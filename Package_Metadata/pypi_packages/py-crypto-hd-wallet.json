{"info": {"author": "Emanuele Bellocchia", "author_email": "ebellocchia@gmail.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# PY crypto HD wallet\n[![PyPI version](https://badge.fury.io/py/py-crypto-hd-wallet.svg)](https://badge.fury.io/py/py-crypto-hd-wallet)\n[![Build Status](https://travis-ci.com/ebellocchia/py_crypto_hd_wallet.svg?branch=master)](https://travis-ci.com/ebellocchia/py_crypto_hd_wallet)\n[![codecov](https://codecov.io/gh/ebellocchia/py_crypto_hd_wallet/branch/master/graph/badge.svg)](https://codecov.io/gh/ebellocchia/py_crypto_hd_wallet)\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n\n## Introduction\n\nThis package contains a very basic implementation of a HD (Hierarchical Deterministic) wallet based on my [bip_utils](https://github.com/ebellocchia/bip_utils) library. It is basically a simple wrapper for the [bip_utils](https://github.com/ebellocchia/bip_utils) library for generating the mnemonic, seed, public/private keys and addresses.\\\nThe supported coins are the same of the [bip_utils](https://github.com/ebellocchia/bip_utils) library, so check the related page.\n\n## Install the package\n\nThe package requires Python 3, it is not compatible with Python 2.\nTo install it:\n- Using *setuptools*:\n\n        python setup.py install\n\n- Using *pip*:\n\n        pip install py_crypto_hd_wallet\n\nTo run the tests:\n\n- Without code coverage\n\n        python setup.py test\n\n- With code coverage and report:\n\n        pip install coverage\n        coverage run -m unittest discover\n        coverage report\n\n## Usage\n\n### Wallet factory construction\n\nA wallet is created by means of the *HdWalletFactory* class.\\\nA *HdWalletFactory* class is constructed by specifying the coin and BIP specification used to derive keys and addresses. After the construction, the factory can be used to create wallets with the specified coin and BIP specification.\\\nIf no BIP specification is given, BIP-0044 will be used as default.\n\nSupported coin enumerative:\n- Bitcoin (and related test net) : *HdWalletCoins.BITCOIN, HdWalletCoins.BITCOIN_TESTNET*\n- Litecoin (and related test net) : *HdWalletCoins.LITECOIN, HdWalletCoins.LITECOIN_TESTNET*\n- Dogecoin (and related test net) : *HdWalletCoins.DOGECOIN, HdWalletCoins.DOGECOIN_TESTNET*\n- Dash (and related test net) : *HdWalletCoins.DASH, HdWalletCoins.DASH_TESTNET*\n- Ethereum : *HdWalletCoins.ETHEREUM*\n- Ripple : *HdWalletCoins.RIPPLE*\n\nSupported BIP specification enumerative:\n- BIP-0044 : *HdWalletSpecs.BIP44*\n- BIP-0049 : *HdWalletSpecs.BIP49*\n- BIP-0084 : *HdWalletSpecs.BIP84*\n\n**Example**\n\n    from py_crypto_hd_wallet import HdWalletFactory, HdWalletCoins, HdWalletSpecs\n\n    # Create a BIP-0044 (default value) Bitcoin wallet factory\n    hd_wallet_fact = HdWalletFactory(HdWalletCoins.BITCOIN)\n    # Create a BIP-0049 Litecoin wallet factory\n    hd_wallet_fact = HdWalletFactory(HdWalletCoins.LITECOIN, HdWalletSpecs.BIP49)\n    # If a coin is not supported by the desired BIP specification, a ValueError exception will be raised, for example:\n    HdWalletFactory(HdWalletCoins.ETHEREUM, HdWalletSpecs.BIP49)\n\n### Wallet creation\n\nAfter a wallet factory is constructed, a wallet can be created in the following ways:\n- randomly by generating a random mnemonic with the specified words number:\n\n        from py_crypto_hd_wallet import HdWalletWordsNum\n\n        # Create randomly by specifying the words number, these are the possible options:\n        hd_wallet = hd_wallet_fact.CreateRandom(\"my_wallet_name\", HdWalletWordsNum.WORDS_NUM_12)\n        hd_wallet = hd_wallet_fact.CreateRandom(\"my_wallet_name\", HdWalletWordsNum.WORDS_NUM_15)\n        hd_wallet = hd_wallet_fact.CreateRandom(\"my_wallet_name\", HdWalletWordsNum.WORDS_NUM_18)\n        hd_wallet = hd_wallet_fact.CreateRandom(\"my_wallet_name\", HdWalletWordsNum.WORDS_NUM_21)\n        hd_wallet = hd_wallet_fact.CreateRandom(\"my_wallet_name\", HdWalletWordsNum.WORDS_NUM_24)\n\n- from an already existent mnemonic:\n\n        # Create from mnemonic\n        mnemonic = \"garbage fossil patrol shadow put morning miss chapter sister undo nation dignity\"\n        hd_wallet = hd_wallet_fact.CreateFromMnemonic(\"my_wallet_name\", mnemonic)\n\n- from a seed:\n\n        # Create from seed\n        seed_bytes = b\"5eb00bbddcf069084889a8ab9155568165f5c453ccb85e70811aaed6f6da5fc19a5ac40b389cd370d086206dec8aa6c43daea6690f20ad3d8d48b2d2ce9e38e4\"\n        hd_wallet = hd_wallet_fact.CreateFromSeed(\"my_wallet_name\", binascii.unhexlify(seed_bytes))\n\n- from a key in extended format.\nThe extended key should be in the correct format depending on the wallet coin, otherwise a *ValueError* exception will be raised:\n\n        # Create from private extended key\n        ex_key = \"xprv9s21ZrQH143K4L5D8NLB8rE6XwqsK7hkDLUnVpeMq1t59fZPGU4811A1ih8mPrKisgftXWJZZXAoKdzCcX4WERMXns4s9pDYr54iHs3sSha\"\n        hd_wallet = hd_wallet_fact.CreateFromExtendedKey(\"my_wallet_name\",ex_key)\n\n        # Create from public extended key, generating a public-only wallet\n        ex_key = \"xpub661MyMwAqRbcG3PEsG7NDvmtyGb6oMcHY2ExjZJZo7y8LUgEoVTgp9PFZz4iNfaDLTfairQf21r3hP5CGYzboge4EcRNNrdEggpBo2HcJVg\"\n        hd_wallet = hd_wallet_fact.CreateFromExtendedKey(\"my_wallet_name\",ex_key)\n\n### Generating wallet keys and addresses\n\nAfter a wallet is created, you can generate keys and addresses by simply calling the *Generate* method. If you call the method before creating the wallet with the previous methods, a *RuntimeError* exception will, be raised.\\\nFor generating a wallet, you can specify the account index, the change index and the number of addresses.\\\nIf you call the method with no parameters, the default values will be:\n- Account index 0\n- External chain\n- 20 addresses\n\nIn case a wallet was created from an extended key, only the levels starting for the extended key depth will be generated.\\\nThe levels are the ones specified by the BIP-0044 specification:\n\n    master / purpose / coin_type / account / change / address_index\n\nFor example:\n- if the wallet was created from a *master* key, all the levels will be generated\n- if the wallet was created from an *account* key, only *account, change* and *address_index* levels will be generatedd; in this case, the account index parameter will be ignored\n- if the wallet was created from a *change* key, only *change* and *address_index* levels will be generated; in this case, the account and change index parameter will be ignored\n- if the wallet was created from an *address_index* key, only *address_index* level will be generated; in this case, all the parameters will be ignored\n\nIn case the extended key was public, only public keys will be generated (watch-only wallet).\\\nPlease note that, for watch-only wallets, the public extended key shall be of change or address index level, otherwise an exception will be raised.\n\nSupported change index enumerative:\n- External chain: HdWalletChanges.CHAIN_EXT\n- Internal chain: HdWalletChanges.CHAIN_INT\n\n**Example**\n\n    # Generate with default parameters\n    hd_wallet.Generate()\n    # Specify parameters\n    hd_wallet.Generate(account_idx = 1, change_idx = HdWalletChanges.CHAIN_EXT, addr_num = 5)\n    # After generated, you can check if the wallet is watch-only with the IsWatchOnly method\n    is_wo = hd_wallet.IsWatchOnly()\n\n### Getting wallet data\n\nAfter keys and addresses were generated, you can:\n\n- get the whole data as dictionary:\n\n        # Get wallet data as a dictionary\n        wallet_data = hd_wallet.ToDict()\n\n- get the whole data as a string in JSON format:\n\n        # Get wallet data as a string in JSON format\n        wallet_data = hd_wallet.ToJson()\n\n- save data to a file in JSON format by means of the *HdWalletSaver* class, to store the generated keys and addresses:\n\n        # Save wallet data to file\n        HdWalletSaver(hd_wallet).SaveToFile(\"my_wallet.txt\")\n\n- get a specific data, see the next paragraph\n\n### Getting specific wallet data\n\nFor getting specific data, the following methods of *HdWallet* can be used:\n- **GetData(*HdWalletDataTypes*)** : return the specified data type if existent, *None* otherwise\n- **HasData(*HdWalletDataTypes*)** : check if the specified data type is existent\n\nThe possible data types *HdWalletDataTypes* are:\n- *HdWalletDataTypes.WALLET_NAME* : wallet name\n- *HdWalletDataTypes.COIN_NAME* : coin name\n- *HdWalletDataTypes.SPEC_NAME* : specification name\n- *HdWalletDataTypes.MNEMONIC* : mnemonic\n- *HdWalletDataTypes.PASSPHRASE* : passphrase\n- *HdWalletDataTypes.SEED_BYTES* : seed bytes\n- *HdWalletDataTypes.ACCOUNT_IDX* : account index\n- *HdWalletDataTypes.CHANGE_IDX* : change index\n- *HdWalletDataTypes.MASTER_KEY* : master keys\n- *HdWalletDataTypes.PURPOSE_KEY* : purpose keys\n- *HdWalletDataTypes.COIN_KEY* : coin keys\n- *HdWalletDataTypes.ACCOUNT_KEY* : account keys\n- *HdWalletDataTypes.CHANGE_KEY* : change keys\n- *HdWalletDataTypes.ADDRESSES* : addresses\n\nIn case of keys, a *HdWalletKeys* object is returned. This object has the following methods:\n- **ToDict()** : return keys as a dictionary\n- **ToJson()** : return keys as a string in JSON format\n- **HasKey(*HdWalletKeyTypes*)** : get if the specified key type is existent\n- **GetKey(*HdWalletKeyTypes*)** : get the specified key if existetn, *None* otherwise\n\nThe possible key types *HdWalletKeyTypes* are:\n- *HdWalletKeyTypes.EX_PRIV* : private key in extended serialized format\n- *HdWalletKeyTypes.RAW_PRIV* : raw private key\n- *HdWalletKeyTypes.WIF_PRIV* : private key in WIF format, if supported by the coin\n- *HdWalletKeyTypes.EX_PUB* : public key in extended serialized format\n- *HdWalletKeyTypes.RAW_COMPR_PUB* : raw public key in compressed format\n- *HdWalletKeyTypes.RAW_UNCOMPR_PUB* : raw public key in uncompressed format\n- *HdWalletKeyTypes.ADDRESS* : address correspondet to the public key, only for *HdWalletDataTypes.ADDRESSES*\n\nIn case of addresses, a *HdWalletAddresses* is returned, This object has the following methods:\n- **ToDict()** : return addresses as a dictionary\n- **ToJson()** : return addresses as a string in JSON format\n- **Count()** : get the number of addresses\n- **__getitem__(*addr_idx*)** : get the address at the specified index using operator *[]*\n- **__iter__()** : allows to iterate over all addresses\n\nEach address is of type *HdWalletKeys*, so you can access it as a *HdWalletKeys* class as previously described.\n\n**Examples**\n\n    py_crypto_hd_wallet import HdWalletDataTypes\n\n    # Get wallet, coin and specification names\n    wallet_name = hd_wallet.GetData(HdWalletDataTypes.WALLET_NAME)\n    coin_name   = hd_wallet.GetData(HdWalletDataTypes.COIN_NAME)\n    spec_name   = hd_wallet.GetData(HdWalletDataTypes.SPEC_NAME)\n    # Get wallet account index\n    acc_idx = hd_wallet.GetData(HdWalletDataTypes.ACCOUNT_IDX)\n\n    # Get wallet account keys\n    acc_key = hd_wallet.GetData(HdWalletDataTypes.ACCOUNT_KEY)\n    # Print keys in different formats\n    print(acc_key.ToDict())\n    print(acc_key.ToJson())\n    # Check if a key type is existent\n    has_wif = acc_key.HasKey(HdWalletKeyTypes.WIF_PRIV)\n    # Get all keys individually\n    ex_priv = acc_key.GetKey(HdWalletKeyTypes.EX_PRIV)\n    raw_priv = acc_key.GetKey(HdWalletKeyTypes.RAW_PRIV)\n    wif_priv = acc_key.GetKey(HdWalletKeyTypes.WIF_PRIV)\n    ex_pub = acc_key.GetKey(HdWalletKeyTypes.EX_PUB)\n    raw_compr_pub = acc_key.GetKey(HdWalletKeyTypes.RAW_COMPR_PUB)\n    raw_uncompr_pub = acc_key.GetKey(HdWalletKeyTypes.RAW_UNCOMPR_PUB)\n    # Getting address returns None because it's an account level\n    address = acc_key.GetKey(HdWalletKeyTypes.ADDRESS)\n\n    # Get wallet addresses\n    addresses = hd_wallet.GetData(HdWalletDataTypes.ADDRESSES)\n    # Get address count\n    addr_cnt = addresses.Count()\n    # Get a specific address index\n    addr_0 = addresses[0]\n    # Print first address in different formats\n    print(addresses[0].ToDict())\n    print(addresses[0].ToJson())\n    # Iterate over all addresses and print their keys and addresses\n    for addr in addresses:\n        print(addr.GetKey(HdWalletKeyTypes.EX_PRIV))\n        print(addr.GetKey(HdWalletKeyTypes.EX_PUB))\n        print(addr.GetKey(HdWalletKeyTypes.ADDRESS))\n\n### Some examples of wallet JSON outputs\n\n**NOTE:** to limit the output size in the examples, the addresses number is limited to 3\n\n**Random wallet with 24 words passphrase for Ethereum (WIF is not present since it is not supported by Ethereum)**\n\nCode:\n\n    from py_crypto_hd_wallet import HdWallet, HdWalletFactory, HdWalletSaver, HdWalletCoins, HdWalletWordsNum\n\n    hd_wallet_fact = HdWalletFactory(HdWalletCoins.ETHEREUM)\n    hd_wallet = hd_wallet_fact.CreateRandom(\"eth_wallet\", HdWalletWordsNum.WORDS_NUM_24)\n    hd_wallet.Generate(addr_num = 3)\n    HdWalletSaver(hd_wallet).SaveToFile(\"my_wallet.txt\")\n\nOutput:\n\n    {\n        \"wallet_name\": \"eth_wallet\",\n        \"spec_name\": \"BIP-0044\",\n        \"coin_name\": \"Ethereum (ETH)\",\n        \"mnemonic\": \"scale tourist mobile heavy adult invite barely rib iron hover clap used swear group torch inside turn gold test rookie dog pet fuel process\",\n        \"passphrase\": \"\",\n        \"seed_bytes\": \"eed77707306437d996d5adf59e125b9c37a330c6f5d4de471171708b81cdf592c4fa5d8eee244fff8b0518abe5c57e14a09edf4042d0687ea39ad23dcb5f06af\",\n        \"master_key\": {\n            \"ex_pub\": \"xpub661MyMwAqRbcF2SjDobyJMUqu8c7kjeVpcqiDdfjrRYQNKiWA7YkM3za27G9fKQvPRLQNPAiLEUm9XFadwgyiMQ34vczcAH9aB3Ux3b6JGE\",\n            \"raw_compr_pub\": \"02217701ec6f3cb9d13c3e417a1d738d416558d559b93296ef87298a2c4ed3884f\",\n            \"raw_uncompr_pub\": \"217701ec6f3cb9d13c3e417a1d738d416558d559b93296ef87298a2c4ed3884f8e548b094c4d9432f10dfcab73181e1b3ea6dc2f0d26b502cfc52a445ae5edfc\",\n            \"ex_priv\": \"xprv9s21ZrQH143K2YNG7n4xwDY7M6mdMGveTPv7RFG8J61RVXPMcaEVoFg6ArdZSXh54QHBwmfo67PfaMcsrDYpYnzoFoQa7uEf3YVk1FrH1U2\",\n            \"raw_priv\": \"5616df73b23d66b74c4851848a10c89fb06c12ecb81a1f3327d30c9ab070236b\"\n        },\n        \"purpose_key\": {\n            \"ex_pub\": \"xpub68MK54SAUJHH9cSiuYSMopjLDApt67iA81CQKjxm8vnwzgr85xf6SztSwVNDy5arP1ZesG8RGbZU4sz6KXQ3ZoQi3uSec7fHhvPmoxsdCpc\",\n            \"raw_compr_pub\": \"0217dfec78c3a682e363135fc773480f82518505a28b2b8edd2b32e70db37ddfe5\",\n            \"raw_uncompr_pub\": \"17dfec78c3a682e363135fc773480f82518505a28b2b8edd2b32e70db37ddfe5dd30556a88dca1f5dca47291585ef423fa78f5847b86e09e77bbf0df6f50b636\",\n            \"ex_priv\": \"xprv9uMxfYuGdviyw8NFoWuMSgnbf8zPgezJknGoXMZ9abFy7tWyYRLquCZy6FaHkzPW1fiwAR23FqBwZ78TWuV77K3fYMYQwnfeKtpNYxEb8xX\",\n            \"raw_priv\": \"bafa27bb296fdd40662b9d972af8c7739be79463bc4f7ed7f3541fc452c22981\"\n        },\n        \"coin_key\": {\n            \"ex_pub\": \"xpub6ArF3P286eNxGUtPR14RFbD4wDTucq7rPvNKFU2iX9qbzbdCn4aUkz391jWRyKWxfUHrRkQQwsUu2vLymSqeqXeP9Zt5xFYHdaLZtvGjewv\",\n            \"raw_compr_pub\": \"0369fa1e83da6f9d596ddebdf7d30e43ac95000644671e649165b745a22c74689e\",\n            \"raw_uncompr_pub\": \"69fa1e83da6f9d596ddebdf7d30e43ac95000644671e649165b745a22c74689e506718de420e599c604dc52bbed41ffd9915a72e67f0e833e9214dacdb17b23d\",\n            \"ex_priv\": \"xprv9wrtdsVEGGpf3zovJyXQtTGLPBdRDNQ12hSiT5d6xpJd7oJ4EXGEDBifASAsggQ4b9iNi23RDfJKqiwh57Y4AYKMhvCoAPA1w7X6ujvsRJc\",\n            \"raw_priv\": \"3a3082a3296e1218dcb61db7e3922ba8b62702d84ffd45ccb0a91d12f71553f4\"\n        },\n        \"account_idx\": 0,\n        \"account_key\": {\n            \"ex_pub\": \"xpub6D53QhBBbnmDTDw6twzVUeFtB7o6pmJoVDYTXPE3um3qrhbTt7TTa5YyWTWG5bEy4unzthjtQBrSDWY2RV51yM6zsjHdBG1JcgrajgrrLTZ\",\n            \"raw_compr_pub\": \"03d0a089c11f609ea40fc895e5fbba64f6e9f52e191c289235677b931cca421ab2\",\n            \"raw_uncompr_pub\": \"d0a089c11f609ea40fc895e5fbba64f6e9f52e191c289235677b931cca421ab2a889815ce6f98b93616c707404d0c240a1ae0353fa89bf6f13d2de2332ee4f41\",\n            \"ex_priv\": \"xprv9z5h1BeHmRCvEjrdnvTV7WK9d5xcRJax7zcrizpSMRWryuGKLa9D2HEVfALukYkCH5jfVqHYEyR74jZP3mhjfuvrFL5kqh3d96MXqPatu2X\",\n            \"raw_priv\": \"b8039263868eb6dbbe7de9f0aa99ac7817de9186afc111854b3ee4b36048942e\"\n        },\n        \"change_idx\": 0,\n        \"change_key\": {\n            \"ex_pub\": \"xpub6EacFWjYBLjKx9i1FG6AQTZTo4ZTr2y6gbW1eaqwYWN8658EJWrrQ6CiAmLg6gUKvJcPzrfTV4g7h6nzmpCF2mdf9gWPCxYtWSYoY5wLNMg\",\n            \"raw_compr_pub\": \"0308b98916909793ad9335636c70fd61225586d4d72331616a836a167016b57107\",\n            \"raw_uncompr_pub\": \"08b98916909793ad9335636c70fd61225586d4d72331616a836a167016b571077412e60d88599ed9434a23f8f574fac448435851409d114a0ced0a7666d27f37\",\n            \"ex_priv\": \"xprvA1bFr1CeLyB2jfdY9EZA3KcjF2iySaFFKNaQrCSKzAq9DGo5kyYbrHtEKV1BdBwvLFRuVc7F2K3EwudhQQ9Z2rt2xBz1zeLVNKjrE1gVAoD\",\n            \"raw_priv\": \"5cc8571103db0bec90c0ae91020c17145a2d61bc1d391a14f4d2c8ae878c86b1\"\n        },\n        \"addresses\": {\n            \"address_1\": {\n                \"ex_pub\": \"xpub6GkuXeVuFpgwJvJCsRyr1Mq8UEgYa4SrW3GJyPxr232F2xhYJhmY66JiJJ3G8Qsvsmz1n24YUpcmdVuinMj5UdJ2t9oHySr3pftXSiWo2Cq\",\n                \"raw_compr_pub\": \"038a3cae97faf3039fa33b404bb7c683d76a3eff6b27fb43989bfd796426915544\",\n                \"raw_uncompr_pub\": \"8a3cae97faf3039fa33b404bb7c683d76a3eff6b27fb43989bfd79642691554443f3e7f5a6df2a8af4f552299c85bfc73df7ac7f3616d9a09b9faf0888ea6751\",\n                \"ex_priv\": \"xprvA3mZ88y1RT8e6SDjmQSqeDtPvCr4Abj18pLiB1ZEThVGAANPmATHYHzESzuYpF4B1FuE2gGCZmqc89hdPfEji1LKiEt7TA4d9MEgembqjm6\",\n                \"raw_priv\": \"7557f64e51895b529b7ee55f8a2922f5824eeed555f22a1220adb276bf3d2ff1\",\n                \"address\": \"0x11383e8FBdA76cE9beeeDdE603C903cF3bCCCa7A\"\n            },\n            \"address_2\": {\n                \"ex_pub\": \"xpub6GkuXeVuFpgwMoVvA8XSk8KKLzTwCqtEMsrHcCsweZTVoJBSf2in5fNFr6ft5DT3zoBou2nwjfpQCt5UKYEgemr2vGGngzmpj6vcST7bha4\",\n                \"raw_compr_pub\": \"03455fe53ad89f784b8dfdc96e95227eb66b51795260fd53f5777acfa09d2706cf\",\n                \"raw_uncompr_pub\": \"455fe53ad89f784b8dfdc96e95227eb66b51795260fd53f5777acfa09d2706cff0b414b5b3d30b5c927743c2964180387c3e6a48c41a25ecfe4484b16ffe5d69\",\n                \"ex_priv\": \"xprvA3mZ88y1RT8e9KRT46zSNzNanxdSoPANzevgopUL6DvWvVrJ7VQXXs3mzpGWQY6YtyA46MgSi5EuUQ2fNRwVXvBpXgUHfg1Up2ogdTSvsS4\",\n                \"raw_priv\": \"909dcdddcf8542a306ab545586cd1ad0761d1a51db8a9a28e27aafbfb24c0314\",\n                \"address\": \"0x225538102464EEa7eF64299813e2f9c5Ee2Ff01e\"\n            },\n            \"address_3\": {\n                \"ex_pub\": \"xpub6GkuXeVuFpgwPDf5cqMGC4tAwwEAQfuM7bDkVbT7NyB7dsg8UHbV8YEd32L3CvZ82wpFEM2MqPRBGRro4vL9MnoCi1jW9vBaXNCHCzx8NTq\",\n                \"raw_compr_pub\": \"0300ccc5f825b71c4ab346f4b845f51a252a844fcab961b253df35dcbeb45ba4b6\",\n                \"raw_uncompr_pub\": \"00ccc5f825b71c4ab346f4b845f51a252a844fcab961b253df35dcbeb45ba4b6fffaeaf7e2148e73aff118146e88c7612fc85a41aa3ea94a71ae30eddff40d23\",\n                \"ex_priv\": \"xprvA3mZ88y1RT8eAjacWopFpvwSPuPg1DBVkNJ9hD3Vpde8m5LyvkHEajv9BmGknZymZXW6SqJLm37Y6vfAVNZiNV1w9TwTbgcPsTuVBEeQY1n\",\n                \"raw_priv\": \"fd5b0ddcad5d5cf7738b69481c3b985bf59cdf27e2c6f8540036b020815927a7\",\n                \"address\": \"0x39831b2dd62e4385bb3B847FE60a9E6A80483D4E\"\n            }\n        }\n    }\n\n**Wallet created from master private extended key for Litecoin with account 2 and internal chain, using and BIP-0084 specification**\n\nCode:\n\n    from py_crypto_hd_wallet import HdWallet, HdWalletFactory, HdWalletSaver, HdWalletCoins, HdWalletChanges, HdWalletSpecs\n\n    ex_key = \"zprvAWgYBBk7JR8Gjrh4UJQ2uJdG1r3WNRRfURiABBE3RvMXYSrRJL62XuezvGdPvG6GFBZduosCc1YP5wixPox7zhZLfiUm8aunE96BBa4Kei5\"\n\n    hd_wallet_fact = HdWalletFactory(HdWalletCoins.LITECOIN, HdWalletSpecs.BIP84)\n    hd_wallet = hd_wallet_fact.CreateFromExtendedKey(\"ltc_bip84_wallet\", ex_key)\n    hd_wallet.Generate(account_idx = 2, change_idx = HdWalletChanges.CHAIN_INT, addr_num = 3)\n    HdWalletSaver(hd_wallet).SaveToFile(\"my_wallet.txt\")\n\nOutput:\n\n    {\n        \"wallet_name\": \"ltc_bip84_wallet\",\n        \"spec_name\": \"BIP-0084\",\n        \"coin_name\": \"Litecoin (LTC)\",\n        \"master_key\": {\n            \"ex_pub\": \"zpub6jftahH18ngZxLmXaKw3GSZzZsszmt9WqedkyZdezFtWRFBZqsQH5hyUmb4pCEeZGmVfQuP5bedXTB8is6fTv19U1GQRyQUKQGUTzyHACMF\",\n            \"raw_compr_pub\": \"03d902f35f560e0470c63313c7369168d9d7df2d49bf295fd9fb7cb109ccee0494\",\n            \"raw_uncompr_pub\": \"d902f35f560e0470c63313c7369168d9d7df2d49bf295fd9fb7cb109ccee04947d000a1345d3845dd83b4c5814f876c918305b598f066c958fad972bf59f2ec7\",\n            \"ex_priv\": \"zprvAWgYBBk7JR8Gjrh4UJQ2uJdG1r3WNRRfURiABBE3RvMXYSrRJL62XuezvGdPvG6GFBZduosCc1YP5wixPox7zhZLfiUm8aunE96BBa4Kei5\",\n            \"raw_priv\": \"1837c1be8e2995ec11cda2b066151be2cfb48adf9e47b151d46adab3a21cdf67\",\n            \"wif_priv\": \"6uJgfG4pBbMffTdMSGQVurdK6xBcZjhf1iDU2jtPAw5PzRdhx9m\"\n        },\n        \"purpose_key\": {\n            \"ex_pub\": \"zpub6nQP3Kke7oZS9QFQb8sVwb29vtXH66Er1faFqocsBh4KR8XrVKJmgsjLY8xDf9Ps5ifSMX7oHgoAj2CSWBeQbZRJS1KzGQL2SGFGDyZXGbz\",\n            \"raw_compr_pub\": \"03c098a6743927554712f1cbc240ef73190db1b7633b08d54ff853899439c102b5\",\n            \"raw_uncompr_pub\": \"c098a6743927554712f1cbc240ef73190db1b7633b08d54ff853899439c102b51f3c247d877613d8ebd5caf331f814a5421868c196aebb65732985ddfafd9ab5\",\n            \"ex_priv\": \"zprvAZR2dpDkHS18vvAwV7LVaT5RNrgngdWzeSef3RDFdMXLYLChwmzX95QrgrN67wosG2QjJgwUYbfiHTUTaMBb9czFCUUgKk12gKfKPR19T7P\",\n            \"raw_priv\": \"f36a166922514e2e3c7f09e139b0aeff039cbf020606670b27554f7fe1a24d9c\",\n            \"wif_priv\": \"6vyDk5W6psiyaxTfYrCFqpjqnnyiLdBXqqPzvJqmnfcjdfULaLF\"\n        },\n        \"coin_key\": {\n            \"ex_pub\": \"zpub6pNAXMNU74t5LozEhv5YkraP5qKGTDENJLDjtyU7XD7TAC7rDnBEv28HrYaRirxyfJtTtq64Cx136Zy4Z3pEhS8foMqseEyt2fzx6GqjZ5X\",\n            \"raw_compr_pub\": \"038fc79beaaf791f26f94ff65a697d9822974d76b71814a27a579b90a5cb34d479\",\n            \"raw_uncompr_pub\": \"8fc79beaaf791f26f94ff65a697d9822974d76b71814a27a579b90a5cb34d479e7a167212ec340a5e15c59934fb1014b97fbc7462de61e9716a27bcf790b3d6f\",\n            \"ex_priv\": \"zprvAbNp7qqaGhKn8KumbtYYPideXoUn3kWWw7J96b4VxsaUHPnhgErzNDop1EYkEjAboQa1fZKcu7vpjcA459fSBS5goMiMRyKQLvtjmxicd98\",\n            \"raw_priv\": \"04e2afd771056acb6d2b135cde1bf5e48bfe0d45e0cebd2564bd8af181398359\",\n            \"wif_priv\": \"6uAAqq676gdo44PNqGZ5UPFHU17sgfMTbSupfnH3S8Pn4NZ2TU5\"\n        },\n        \"account_idx\": 2,\n        \"account_key\": {\n            \"ex_pub\": \"zpub6rPo5mF47z5cuPYr45wj1wHiJooU6VVoowK5N1BRFiKDA5S62UDPoMnrYUPiNsGgfQpaCV2w2uXnjgUmnestsBp1XPqyPyCFSB1pT8JSwQL\",\n            \"raw_compr_pub\": \"03d3f39769e1a2c930337f94f976b7ae776e0508bf69d51eb72f10dbab0b98e804\",\n            \"raw_uncompr_pub\": \"d3f39769e1a2c930337f94f976b7ae776e0508bf69d51eb72f10dbab0b98e80404434410f2086491c7b3d714e9794bc20eb8ad429f96b26f31897a8c607f4905\",\n            \"ex_priv\": \"zprvAdQSgFiAHcXKguUNx4QieoLykmxyh2mxSiPUZcmohNnEHH6wUvu9FZUNhA6mKaaqBDr6rjf18GLn6KSsEbjzpD3ZFAQRVAh71eXdZXYVam4\",\n            \"raw_priv\": \"26636b848b4c1187c95f827cee303455d034645aa5742c634a4a88057ef0de0b\",\n            \"wif_priv\": \"6uQvdQ9F989FUzaWUtGpzvjrjTyPTHMevkWRZH5XzyuHjdjzUTx\"\n        },\n        \"change_idx\": 1,\n        \"change_key\": {\n            \"ex_pub\": \"zpub6tHpx8aYXtj3Bh1Gj2pZqFd1d8dXZyydeivRaAht6QqCSjdKEyPwgEEshojsEgemRDkwi7SR9kAJ92TJmT538AZwUNHdGvG7yyhxWL98ZAV\",\n            \"raw_compr_pub\": \"0322068c3e9b8b81e6116429e96cce0c7f34dfcbbe02748d7d039c3b6d5f0002e4\",\n            \"raw_uncompr_pub\": \"22068c3e9b8b81e6116429e96cce0c7f34dfcbbe02748d7d039c3b6d5f0002e4325db506b39c54bf3787c97347fe640a36ece3a2fed444dcb32f79fb96c4e7a9\",\n            \"ex_priv\": \"zprvAfJUYd3ehXAjyCvod1HZU7gH56o3AXFnHVzpmnJGY5JDZwJAhS5h8RvPrWhnh3XXWfF7NmM2KMx6RwYtDy2JXjsV3SYUTb73JsR54wnwi8q\",\n            \"raw_priv\": \"19ecb6871998145bc4b14ec9dacf6eacc1be35a2d2f3c871d8e6fe80fd7af8fa\",\n            \"wif_priv\": \"6uKSG2cmhpVmoCNsZShEXKocMAg4wisMz29wXDnwcL82fkrrRXp\"\n        },\n        \"addresses\": {\n            \"address_1\": {\n                \"ex_pub\": \"zpub6vTTtJ8jWvYsRr2xkYgxWA7vbUfhpHPZtqRQ7YUc4TMfoWzJLwxFar48oDAgiN6tX4WW9vmqkXafqXi3fq5XJozY8QyFkcougMwVDYJEofN\",\n                \"raw_compr_pub\": \"03c29e0c901821ed6a5a11ec164b7b4185a6a05fcd55fa9e87197864e98974cdd1\",\n                \"raw_uncompr_pub\": \"c29e0c901821ed6a5a11ec164b7b4185a6a05fcd55fa9e87197864e98974cdd1be8722700b9e957b500970b49b64ed140d7d497ce49efd9b5bf11f61119f0163\",\n                \"ex_priv\": \"zprvAhU7UnbqgYzaDMxVeX9x92BC3SqDQpfiXcVoKA4zW7pgvif9oQe133jewvCKqDdrXfG7EGjV8kZ4NcmnYLH3De58hZThxUSAT9ArQ9kkbyJ\",\n                \"raw_priv\": \"c2f59bac194fac86d3f81f5a99e15c208a1de977a124d5bb1d482dc64ddae168\",\n                \"wif_priv\": \"6vbt2SXs4e8BsMJf1i9pBM7JEm5Y8U9QSrHNWbcNv1i5yHcM9er\",\n                \"address\": \"ltc1qeyp9rflupuvw5j5pdyluhqgdxfk092hra6m8jm\"\n            },\n            \"address_2\": {\n                \"ex_pub\": \"zpub6vTTtJ8jWvYsU8EMiNdNZBK6WGgzXMb5Y44C6sZ3ppmSVZ1T24DsdeeS7CqUzTVm4orZ5DjBfXCUT4EvdMUriMD3wJZ9T6ReHDsjHc1eKY7\",\n                \"raw_compr_pub\": \"039111b4f7b9c4a70d621cc358fcda823117033b9e7c4a4b752014569086f22699\",\n                \"raw_uncompr_pub\": \"9111b4f7b9c4a70d621cc358fcda823117033b9e7c4a4b752014569086f2269942508a95ec95c1aece10aa0ec6c375950ed4131a1300bb5970f75aa1a360f871\",\n                \"ex_priv\": \"zprvAhU7UnbqgYzaFe9tcM6NC3NMxErW7tsEAq8bJV9SGVETckgJUWud5rKxFup4RfzazWi1HGQVdufUhg2c9RzPmtZ8sDBgTNnqiM23UummCXc\",\n                \"raw_priv\": \"8a748332b72d01727f0e63bdc2ddda5db517940b22a91fe57afed4fa8905048b\",\n                \"wif_priv\": \"6vAzhXugPNZXxGVBL9kgWSVMH9B3ZhggCwwtqLsby9NUuE8PTWu\",\n                \"address\": \"ltc1q2ksy0gmj2y2zru74nd64zlaq8h30qpz6dstr2s\"\n            },\n            \"address_3\": {\n                \"ex_pub\": \"zpub6vTTtJ8jWvYsWueMEngC1icupRsMKEL4yu8qrtJHEHXBrqp1xV3JYKr6L8oiaUzub2Vpzzi2jRxktYYkV16HNveP3GxbfpvdeNfUxUC1ec9\",\n                \"raw_compr_pub\": \"0301e2c682317976460352324e4142cdb0153172df8c6c8aca51f8359e6005f400\",\n                \"raw_uncompr_pub\": \"01e2c682317976460352324e4142cdb0153172df8c6c8aca51f8359e6005f400ea341d4a8c1f97d46c9e6a8341b2fd81442b5ae8aea988ccf3f5f429d6eb9bd9\",\n                \"ex_priv\": \"zprvAhU7UnbqgYzaJRZt8m9BeagBGQ2rumcDcgDF4VtffwzCz3UsQwj3zXXcUqvjaMvwLzmtKhYLojHyQSMVyg3VbE7BknvoPVpduFcTECojzq4\",\n                \"raw_priv\": \"0e7002ca0442417ee8a2a20db68c84e6844352f43627660010df8e8182df0c61\",\n                \"wif_priv\": \"6uENqVe5yo2wa2R2aPcZGJdY2RadjiJ1nN4zEFKfNJ3UiE3QSwz\",\n                \"address\": \"ltc1qatkc4pe54qupgp0zazd5qycwmmyhklrkgpjxap\"\n            }\n        }\n    }\n\n**Wallet created from account private extended key for Bitcoin, using BIP-0049 specification**\n\nCode:\n\n    from py_crypto_hd_wallet import HdWallet, HdWalletFactory, HdWalletSaver, HdWalletCoins, HdWalletSpecs\n\n    ex_key = \"yprvAHwhK6RbpuS3dgCYHM5jc2ZvEKd7Bi61u9FVhYMpgMSuZS613T1xxQeKTffhrHY79hZ5PsskBjcc6C2V7DrnsMsNaGDaWev3GLRQRgV7hxF\"\n\n    hd_wallet_fact = HdWalletFactory(HdWalletCoins.BITCOIN, HdWalletSpecs.BIP49)\n    hd_wallet = hd_wallet_fact.CreateFromExtendedKey(\"btc_bip49_wallet\", ex_key)\n    hd_wallet.Generate(addr_num = 3)\n    HdWalletSaver(hd_wallet).SaveToFile(\"my_wallet.txt\")\n\nOutput:\n\n    {\n        \"wallet_name\": \"btc_bip49_wallet\",\n        \"spec_name\": \"BIP-0049\",\n        \"coin_name\": \"Bitcoin (BTC)\",\n        \"account_key\": {\n            \"ex_pub\": \"ypub6Ww3ibxVfGzLrAH1PNcjyAWenMTbbAosGNB6VvmSEgytSER9azLDWCxoJwW7Ke7icmizBMXrzBx9979FfaHxHcrArf3zbeJJJUZPf663zsP\",\n            \"raw_compr_pub\": \"02f1f347891b20f7568eae3ec9869fbfb67bcab6f358326f10ecc42356bd55939d\",\n            \"raw_uncompr_pub\": \"f1f347891b20f7568eae3ec9869fbfb67bcab6f358326f10ecc42356bd55939d9c382f31be121b4a0650e23e97a110d40ab3c33e2cceadc78f278e4caf3cbbfe\",\n            \"ex_priv\": \"yprvAHwhK6RbpuS3dgCYHM5jc2ZvEKd7Bi61u9FVhYMpgMSuZS613T1xxQeKTffhrHY79hZ5PsskBjcc6C2V7DrnsMsNaGDaWev3GLRQRgV7hxF\",\n            \"raw_priv\": \"880d51752bda4190607e079588d3f644d96bfa03446bce93cddfda3c4a99c7e6\",\n            \"wif_priv\": \"5JrCr8UXV86dGBYnpU5UqQ3hmGbq9xmRAxQZCaS126kUgRHWEgf\"\n        },\n        \"change_idx\": 0,\n        \"change_key\": {\n            \"ex_pub\": \"ypub6Ynvx7RLNYgWzFGM8aeU43hFNjTh7u5Grrup7Ryu2nKZ1Y8FWKaJZXiUrkJSnMmGVNBoVH1DNDtQ32tR4YFDRSpSUXjjvsiMnCvoPHVWXJP\",\n            \"raw_compr_pub\": \"0316699a93944c8d45ed4de87240a21a2f08a399b61c2622aa3217864efb0a75c5\",\n            \"raw_uncompr_pub\": \"16699a93944c8d45ed4de87240a21a2f08a399b61c2622aa3217864efb0a75c527bb4ae4405631b4beb47db949e59201e88d375b205e1163a831ca964f2dcc55\",\n            \"ex_priv\": \"yprvAKoaYbtSYB8DmmBt2Z7TgukWphdCiSMRVdzDK3aHUSna8jo6xnG41jQ11ToPk4SQnE5sau6CYK4od9fyz53mK7huW4JskyMMEmixACuyhhr\",\n            \"raw_priv\": \"54c2851797e7fec9f4f84e9b168d84ec689ce1f41929b274e773a3932e322371\",\n            \"wif_priv\": \"5JTcf7b4Qx6UxxHich5zmdN44VSox8Ra4CgF1f7vj7o5HKrT2mC\"\n        },\n        \"addresses\": {\n            \"address_1\": {\n                \"ex_pub\": \"ypub6bWfB6tKVSQKayURFLcsaLjRvEzA92ZNFQpJioiTvN4BLucHrr5btBLpeBDjuV2mGb2wXWL1taoBNWf9xNgjHrPWkhSxxfrDGiciopL6N6E\",\n                \"raw_compr_pub\": \"039b3b694b8fc5b5e07fb069c783cac754f5d38c3e08bed1960e31fdb1dda35c24\",\n                \"raw_uncompr_pub\": \"9b3b694b8fc5b5e07fb069c783cac754f5d38c3e08bed1960e31fdb1dda35c2449bdd1f0ae7d37a04991d4f5927efd359c13189437d9eae0faf7d003ffd04c89\",\n                \"ex_priv\": \"yprvANXJmbMRf4r2NVPx9K5sDCnhND9fjZqWtBthvRJrN2XCU7H9KJmMLP2LnsgLbhdoaNcD89Fw7zktymVkW6eVcX9MKHpeAkEd94Hm9nWKWVw\",\n                \"raw_priv\": \"508c73a06f6b6c817238ba61be232f5080ea4616c54f94771156934666d38ee3\",\n                \"wif_priv\": \"5JRm65cCg7v9T2wWTpuEy9eQKmATg838ufvkZSpVcMxAt2Rmio5\",\n                \"address\": \"37VucYSaXLCAsxYyAPfbSi9eh4iEcbShgf\"\n            },\n            \"address_2\": {\n                \"ex_pub\": \"ypub6bWfB6tKVSQKcyzhDuvtgHqpp14CDMfkba7pG9W9WdCh5Y2Mmktq7rUu8EqXX3fQ6wvHKEXQUkGiXaTtFaraxa9FxsCPJF9qEWDi4HkXs8p\",\n                \"raw_compr_pub\": \"022a421fa4a65a87d1c3e4238155d85f7bd2c5bb87632f331b5722f110586aa198\",\n                \"raw_uncompr_pub\": \"2a421fa4a65a87d1c3e4238155d85f7bd2c5bb87632f331b5722f110586aa19885dc3cfdbc32b6050392ab66f99f67cc15fedb517df58070d022c9d7bc840804\",\n                \"ex_priv\": \"yprvANXJmbMRf4r2QVvE7tPtK9u6FyDhotwuEMCDTm6XxHfiCjhDEDaaa4ARGz27KayDwS58MYjFcjTGqkhmgEBgEr7fNprrWLK6e4a8mezb4Fz\",\n                \"raw_priv\": \"464c5dd427dcf1e2791b97a1aa9348647d3a55e1223b4e58cb663b49fd12e0ca\",\n                \"wif_priv\": \"5JMFFtAFSgvZUjUdV5ZkkmLmP1hpNzUmQNd6KsAT8Nn86M9NmZ7\",\n                \"address\": \"3LtMnn87fqUeHBUG414p9CWwnoV6E2pNKS\"\n            },\n            \"address_3\": {\n                \"ex_pub\": \"ypub6bWfB6tKVSQKezmwEg4FKD6EZmrm1oEd1ydxdRGKd89KyyWmrHar3ATQV2vXNDtXPUZBkaR7zgRKiCqkQwLgxXKLcnBQF8Cmr7jFd8YUnSb\",\n                \"raw_compr_pub\": \"02fdbd244eebd701270478af75ebb8894b963d61f2f686e366a626cb200ba13e45\",\n                \"raw_uncompr_pub\": \"fdbd244eebd701270478af75ebb8894b963d61f2f686e366a626cb200ba13e4504fa4141a7e6ba896cbc25c37b6b26d0ca2bea07a44f33609874faffabbfd35e\",\n                \"ex_priv\": \"yprvANXJmbMRf4r2SWhU8eXEx59W1k2GcLWmekiMq2ri4ncM7BBdJkGbVN8vdmB6mE8SC7LYVjb1P3xz8RP1qy1qz8DtKMHbV25SB7hP3MFAzDz\",\n                \"raw_priv\": \"9f263c1b238e7810453e42e6416292a0ae04e9963856dc470ea46bfcd5c49b23\",\n                \"wif_priv\": \"5K2NqZsCBxxLmW3az5xFBD472yFEkryS9mGjzbQcEPibJCX8qi8\",\n                \"address\": \"3B4cvWGR8X6Xs8nvTxVUoMJV77E4f7oaia\"\n            }\n        }\n    }\n\n**Wallet created from address private extended key for Dogecoin**\n\nCode:\n\n    from py_crypto_hd_wallet import HdWallet, HdWalletFactory, HdWalletSaver, HdWalletCoins\n\n    ex_key = \"dgpv5Chp3Su8jKGdbGsUJ8ksy6TAcid2jPj2vP3pk8eFRVqU1ozGb8Ppcy9yW8j8tCwKDLmw4MpsnJgDx6JzkskPXjpo57QJvf682UeMtr11nnw\"\n\n    hd_wallet_fact = HdWalletFactory(HdWalletCoins.DOGECOIN)\n    hd_wallet = hd_wallet_fact.CreateFromExtendedKey(\"doge_wallet\", ex_key)\n    hd_wallet.Generate()\n    HdWalletSaver(hd_wallet).SaveToFile(\"my_wallet.txt\")\n\nOutput:\n\n    {\n        \"wallet_name\": \"doge_wallet\",\n        \"spec_name\": \"BIP-0044\",\n        \"coin_name\": \"Dogecoin (DOGE)\",\n        \"addresses\": {\n            \"address_1\": {\n                \"ex_pub\": \"dgub8waqP8q2HTvxt8XdLNNr5wzm5GzfZWkkCyq2uF3EDctUZs6xztwbGGZd5Nx7kEg4QaPK6kQYTMXnx4kBmrYAogxfCD6ETtwvvYPDfW2edcB\",\n                \"raw_compr_pub\": \"02cc6b0dc33aabcf3a23643e5e2919a80c50fb3dd2129ce409bbc5f0d4643d05e0\",\n                \"raw_uncompr_pub\": \"cc6b0dc33aabcf3a23643e5e2919a80c50fb3dd2129ce409bbc5f0d4643d05e0ef6096bd24259fb59a4338413d1b542eed17d4cce52709e6ec18ec51bb87b164\",\n                \"ex_priv\": \"dgpv5Chp3Su8jKGdbGsUJ8ksy6TAcid2jPj2vP3pk8eFRVqU1ozGb8Ppcy9yW8j8tCwKDLmw4MpsnJgDx6JzkskPXjpo57QJvf682UeMtr11nnw\",\n                \"raw_priv\": \"21f5e16d57b9b70a1625020b59a85fa9342de9c103af3dd9f7b94393a4ac2f46\",\n                \"wif_priv\": \"6JPaMAeJjouhb8xPzFzETYCHJAJ9wBoFsCyC1LXFSTcZDmHgy6L\",\n                \"address\": \"DBus3bamQjgJULBJtYXpEzDWQRwF5iwxgC\"\n            }\n        }\n    }\n\n**Watch-only wallet create from a change public extended key for Bitcoin**\n\nCode:\n\n    from py_crypto_hd_wallet import HdWallet, HdWalletFactory, HdWalletSaver, HdWalletCoins\n\n    ex_key = \"xpub6ELHKXNimKbxMCytPh7EdC2QXx46T9qLDJWGnTraz1H9kMMFdcduoU69wh9cxP12wDxqAAfbaESWGYt5rREsX1J8iR2TEunvzvddduAPYcY\"\n\n    hd_wallet_fact = HdWalletFactory(HdWalletCoins.BITCOIN)\n    hd_wallet = hd_wallet_fact.CreateFromExtendedKey(\"btc_wo_wallet\", ex_key)\n    hd_wallet.Generate(addr_num = 3)\n    HdWalletSaver(hd_wallet).SaveToFile(\"my_wallet.txt\")\n\nOutput:\n\n    {\n        \"wallet_name\": \"btc_wo_wallet\",\n        \"spec_name\": \"BIP-0044\",\n        \"coin_name\": \"Bitcoin (BTC)\",\n        \"change_key\": {\n            \"ex_pub\": \"xpub6ELHKXNimKbxMCytPh7EdC2QXx46T9qLDJWGnTraz1H9kMMFdcduoU69wh9cxP12wDxqAAfbaESWGYt5rREsX1J8iR2TEunvzvddduAPYcY\",\n            \"raw_compr_pub\": \"0386b865b52b753d0a84d09bc20063fab5d8453ec33c215d4019a5801c9c6438b9\",\n            \"raw_uncompr_pub\": \"86b865b52b753d0a84d09bc20063fab5d8453ec33c215d4019a5801c9c6438b917770b2782e29a9ecc6edb67cd1f0fbf05ec4c1236884b6d686d6be3b1588abb\"\n        },\n        \"addresses\": {\n            \"address_1\": {\n                \"ex_pub\": \"xpub6Fbrwk4KhC8qnFVXTcR3wRsqiTGkedcSSZKyTqKaxXjFN6rZv3UJYZ4mQtjNYY3gCa181iCHSBWyWst2PFiXBKgLpFVSdcyLbHyAahin8pd\",\n                \"raw_compr_pub\": \"03aaeb52dd7494c361049de67cc680e83ebcbbbdbeb13637d92cd845f70308af5e\",\n                \"raw_uncompr_pub\": \"aaeb52dd7494c361049de67cc680e83ebcbbbdbeb13637d92cd845f70308af5e9370164133294e5fd1679672fe7866c307daf97281a28f66dca7cbb52919824f\",\n                \"address\": \"1LqBGSKuX5yYUonjxT5qGfpUsXKYYWeabA\"\n            },\n            \"address_2\": {\n                \"ex_pub\": \"xpub6Fbrwk4KhC8qpW547rQ6k2d2YBu672sBMtGV1q5duGH7pktZou5ZyuufVAC4rtyM5csX6hCkdPJe2SVZUQ2hAtMNcx3iS7qcnFdGJxmtDNn\",\n                \"raw_compr_pub\": \"02dfcaec532010d704860e20ad6aff8cf3477164ffb02f93d45c552dadc70ed24f\",\n                \"raw_uncompr_pub\": \"dfcaec532010d704860e20ad6aff8cf3477164ffb02f93d45c552dadc70ed24f05100e9dc6d05ccd7e8bdade50dabeeed654700fde6134870194a6ccb2a07a5e\",\n                \"address\": \"1Ak8PffB2meyfYnbXZR9EGfLfFZVpzJvQP\"\n            },\n            \"address_3\": {\n                \"ex_pub\": \"xpub6Fbrwk4KhC8qtGNv4K6ZPPa4CjbLKcXhc6CzA57XMPXVYMjQn3LQUY3G8B9kwKkfiM5KnhL1bTSQaN4EYDgamQeQGu7RjFgqBC1rjTvqwLM\",\n                \"raw_compr_pub\": \"0338994349b3a804c44bbec55c2824443ebb9e475dfdad14f4b1a01a97d42751b3\",\n                \"raw_uncompr_pub\": \"38994349b3a804c44bbec55c2824443ebb9e475dfdad14f4b1a01a97d42751b37a93be7a6818b0f5bc5410bb844ba9d417181afae5810c7a222e8fd47a02f6b9\",\n                \"address\": \"1MNF5RSaabFwcbtJirJwKnDytsXXEsVsNb\"\n            }\n        }\n    }\n\n## License\n\nThis software is available under the MIT license.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://github.com/ebellocchia/py_crypto_hd_wallet/archive/v0.3.1.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ebellocchia/py_crypto_hd_wallet", "keywords": "bitcoin,litecoin,dogecoin,dash,ethereum,ripple,wallet,hd-wallet,bip39,bip32,bip44,bip49,bip84,python", "license": "MIT", "maintainer": "Emanuele Bellocchia", "maintainer_email": "ebellocchia@gmail.com", "name": "py-crypto-hd-wallet", "package_url": "https://pypi.org/project/py-crypto-hd-wallet/", "platform": "any", "project_url": "https://pypi.org/project/py-crypto-hd-wallet/", "project_urls": {"Download": "https://github.com/ebellocchia/py_crypto_hd_wallet/archive/v0.3.1.tar.gz", "Homepage": "https://github.com/ebellocchia/py_crypto_hd_wallet"}, "release_url": "https://pypi.org/project/py-crypto-hd-wallet/0.3.1/", "requires_dist": null, "requires_python": ">=3.6", "summary": "HD (Hierarchical Deterministic) wallet for cryptocurrencies based on bip_utils library", "version": "0.3.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>PY crypto HD wallet</h1>\n<p><a href=\"https://badge.fury.io/py/py-crypto-hd-wallet\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/412a138f7462a5234a1a01b757435b8755138bbd/68747470733a2f2f62616467652e667572792e696f2f70792f70792d63727970746f2d68642d77616c6c65742e737667\"></a>\n<a href=\"https://travis-ci.com/ebellocchia/py_crypto_hd_wallet\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/963efaa3163a20ffb0406fc0f6a01e4c0f428661/68747470733a2f2f7472617669732d63692e636f6d2f6562656c6c6f63636869612f70795f63727970746f5f68645f77616c6c65742e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://codecov.io/gh/ebellocchia/py_crypto_hd_wallet\" rel=\"nofollow\"><img alt=\"codecov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/731ae52abc3458b671063dfe8fcfbb019357f093/68747470733a2f2f636f6465636f762e696f2f67682f6562656c6c6f63636869612f70795f63727970746f5f68645f77616c6c65742f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a>\n<a href=\"https://opensource.org/licenses/MIT\" rel=\"nofollow\"><img alt=\"License: MIT\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8645b002dd7ec1b54275a80574942e7a318e03c6/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d4d49542d79656c6c6f772e737667\"></a></p>\n<h2>Introduction</h2>\n<p>This package contains a very basic implementation of a HD (Hierarchical Deterministic) wallet based on my <a href=\"https://github.com/ebellocchia/bip_utils\" rel=\"nofollow\">bip_utils</a> library. It is basically a simple wrapper for the <a href=\"https://github.com/ebellocchia/bip_utils\" rel=\"nofollow\">bip_utils</a> library for generating the mnemonic, seed, public/private keys and addresses.<br>\nThe supported coins are the same of the <a href=\"https://github.com/ebellocchia/bip_utils\" rel=\"nofollow\">bip_utils</a> library, so check the related page.</p>\n<h2>Install the package</h2>\n<p>The package requires Python 3, it is not compatible with Python 2.\nTo install it:</p>\n<ul>\n<li>\n<p>Using <em>setuptools</em>:</p>\n<pre><code>  python setup.py install\n</code></pre>\n</li>\n<li>\n<p>Using <em>pip</em>:</p>\n<pre><code>  pip install py_crypto_hd_wallet\n</code></pre>\n</li>\n</ul>\n<p>To run the tests:</p>\n<ul>\n<li>\n<p>Without code coverage</p>\n<pre><code>  python setup.py test\n</code></pre>\n</li>\n<li>\n<p>With code coverage and report:</p>\n<pre><code>  pip install coverage\n  coverage run -m unittest discover\n  coverage report\n</code></pre>\n</li>\n</ul>\n<h2>Usage</h2>\n<h3>Wallet factory construction</h3>\n<p>A wallet is created by means of the <em>HdWalletFactory</em> class.<br>\nA <em>HdWalletFactory</em> class is constructed by specifying the coin and BIP specification used to derive keys and addresses. After the construction, the factory can be used to create wallets with the specified coin and BIP specification.<br>\nIf no BIP specification is given, BIP-0044 will be used as default.</p>\n<p>Supported coin enumerative:</p>\n<ul>\n<li>Bitcoin (and related test net) : <em>HdWalletCoins.BITCOIN, HdWalletCoins.BITCOIN_TESTNET</em></li>\n<li>Litecoin (and related test net) : <em>HdWalletCoins.LITECOIN, HdWalletCoins.LITECOIN_TESTNET</em></li>\n<li>Dogecoin (and related test net) : <em>HdWalletCoins.DOGECOIN, HdWalletCoins.DOGECOIN_TESTNET</em></li>\n<li>Dash (and related test net) : <em>HdWalletCoins.DASH, HdWalletCoins.DASH_TESTNET</em></li>\n<li>Ethereum : <em>HdWalletCoins.ETHEREUM</em></li>\n<li>Ripple : <em>HdWalletCoins.RIPPLE</em></li>\n</ul>\n<p>Supported BIP specification enumerative:</p>\n<ul>\n<li>BIP-0044 : <em>HdWalletSpecs.BIP44</em></li>\n<li>BIP-0049 : <em>HdWalletSpecs.BIP49</em></li>\n<li>BIP-0084 : <em>HdWalletSpecs.BIP84</em></li>\n</ul>\n<p><strong>Example</strong></p>\n<pre><code>from py_crypto_hd_wallet import HdWalletFactory, HdWalletCoins, HdWalletSpecs\n\n# Create a BIP-0044 (default value) Bitcoin wallet factory\nhd_wallet_fact = HdWalletFactory(HdWalletCoins.BITCOIN)\n# Create a BIP-0049 Litecoin wallet factory\nhd_wallet_fact = HdWalletFactory(HdWalletCoins.LITECOIN, HdWalletSpecs.BIP49)\n# If a coin is not supported by the desired BIP specification, a ValueError exception will be raised, for example:\nHdWalletFactory(HdWalletCoins.ETHEREUM, HdWalletSpecs.BIP49)\n</code></pre>\n<h3>Wallet creation</h3>\n<p>After a wallet factory is constructed, a wallet can be created in the following ways:</p>\n<ul>\n<li>\n<p>randomly by generating a random mnemonic with the specified words number:</p>\n<pre><code>  from py_crypto_hd_wallet import HdWalletWordsNum\n\n  # Create randomly by specifying the words number, these are the possible options:\n  hd_wallet = hd_wallet_fact.CreateRandom(\"my_wallet_name\", HdWalletWordsNum.WORDS_NUM_12)\n  hd_wallet = hd_wallet_fact.CreateRandom(\"my_wallet_name\", HdWalletWordsNum.WORDS_NUM_15)\n  hd_wallet = hd_wallet_fact.CreateRandom(\"my_wallet_name\", HdWalletWordsNum.WORDS_NUM_18)\n  hd_wallet = hd_wallet_fact.CreateRandom(\"my_wallet_name\", HdWalletWordsNum.WORDS_NUM_21)\n  hd_wallet = hd_wallet_fact.CreateRandom(\"my_wallet_name\", HdWalletWordsNum.WORDS_NUM_24)\n</code></pre>\n</li>\n<li>\n<p>from an already existent mnemonic:</p>\n<pre><code>  # Create from mnemonic\n  mnemonic = \"garbage fossil patrol shadow put morning miss chapter sister undo nation dignity\"\n  hd_wallet = hd_wallet_fact.CreateFromMnemonic(\"my_wallet_name\", mnemonic)\n</code></pre>\n</li>\n<li>\n<p>from a seed:</p>\n<pre><code>  # Create from seed\n  seed_bytes = b\"5eb00bbddcf069084889a8ab9155568165f5c453ccb85e70811aaed6f6da5fc19a5ac40b389cd370d086206dec8aa6c43daea6690f20ad3d8d48b2d2ce9e38e4\"\n  hd_wallet = hd_wallet_fact.CreateFromSeed(\"my_wallet_name\", binascii.unhexlify(seed_bytes))\n</code></pre>\n</li>\n<li>\n<p>from a key in extended format.\nThe extended key should be in the correct format depending on the wallet coin, otherwise a <em>ValueError</em> exception will be raised:</p>\n<pre><code>  # Create from private extended key\n  ex_key = \"xprv9s21ZrQH143K4L5D8NLB8rE6XwqsK7hkDLUnVpeMq1t59fZPGU4811A1ih8mPrKisgftXWJZZXAoKdzCcX4WERMXns4s9pDYr54iHs3sSha\"\n  hd_wallet = hd_wallet_fact.CreateFromExtendedKey(\"my_wallet_name\",ex_key)\n\n  # Create from public extended key, generating a public-only wallet\n  ex_key = \"xpub661MyMwAqRbcG3PEsG7NDvmtyGb6oMcHY2ExjZJZo7y8LUgEoVTgp9PFZz4iNfaDLTfairQf21r3hP5CGYzboge4EcRNNrdEggpBo2HcJVg\"\n  hd_wallet = hd_wallet_fact.CreateFromExtendedKey(\"my_wallet_name\",ex_key)\n</code></pre>\n</li>\n</ul>\n<h3>Generating wallet keys and addresses</h3>\n<p>After a wallet is created, you can generate keys and addresses by simply calling the <em>Generate</em> method. If you call the method before creating the wallet with the previous methods, a <em>RuntimeError</em> exception will, be raised.<br>\nFor generating a wallet, you can specify the account index, the change index and the number of addresses.<br>\nIf you call the method with no parameters, the default values will be:</p>\n<ul>\n<li>Account index 0</li>\n<li>External chain</li>\n<li>20 addresses</li>\n</ul>\n<p>In case a wallet was created from an extended key, only the levels starting for the extended key depth will be generated.<br>\nThe levels are the ones specified by the BIP-0044 specification:</p>\n<pre><code>master / purpose / coin_type / account / change / address_index\n</code></pre>\n<p>For example:</p>\n<ul>\n<li>if the wallet was created from a <em>master</em> key, all the levels will be generated</li>\n<li>if the wallet was created from an <em>account</em> key, only <em>account, change</em> and <em>address_index</em> levels will be generatedd; in this case, the account index parameter will be ignored</li>\n<li>if the wallet was created from a <em>change</em> key, only <em>change</em> and <em>address_index</em> levels will be generated; in this case, the account and change index parameter will be ignored</li>\n<li>if the wallet was created from an <em>address_index</em> key, only <em>address_index</em> level will be generated; in this case, all the parameters will be ignored</li>\n</ul>\n<p>In case the extended key was public, only public keys will be generated (watch-only wallet).<br>\nPlease note that, for watch-only wallets, the public extended key shall be of change or address index level, otherwise an exception will be raised.</p>\n<p>Supported change index enumerative:</p>\n<ul>\n<li>External chain: HdWalletChanges.CHAIN_EXT</li>\n<li>Internal chain: HdWalletChanges.CHAIN_INT</li>\n</ul>\n<p><strong>Example</strong></p>\n<pre><code># Generate with default parameters\nhd_wallet.Generate()\n# Specify parameters\nhd_wallet.Generate(account_idx = 1, change_idx = HdWalletChanges.CHAIN_EXT, addr_num = 5)\n# After generated, you can check if the wallet is watch-only with the IsWatchOnly method\nis_wo = hd_wallet.IsWatchOnly()\n</code></pre>\n<h3>Getting wallet data</h3>\n<p>After keys and addresses were generated, you can:</p>\n<ul>\n<li>\n<p>get the whole data as dictionary:</p>\n<pre><code>  # Get wallet data as a dictionary\n  wallet_data = hd_wallet.ToDict()\n</code></pre>\n</li>\n<li>\n<p>get the whole data as a string in JSON format:</p>\n<pre><code>  # Get wallet data as a string in JSON format\n  wallet_data = hd_wallet.ToJson()\n</code></pre>\n</li>\n<li>\n<p>save data to a file in JSON format by means of the <em>HdWalletSaver</em> class, to store the generated keys and addresses:</p>\n<pre><code>  # Save wallet data to file\n  HdWalletSaver(hd_wallet).SaveToFile(\"my_wallet.txt\")\n</code></pre>\n</li>\n<li>\n<p>get a specific data, see the next paragraph</p>\n</li>\n</ul>\n<h3>Getting specific wallet data</h3>\n<p>For getting specific data, the following methods of <em>HdWallet</em> can be used:</p>\n<ul>\n<li><strong>GetData(<em>HdWalletDataTypes</em>)</strong> : return the specified data type if existent, <em>None</em> otherwise</li>\n<li><strong>HasData(<em>HdWalletDataTypes</em>)</strong> : check if the specified data type is existent</li>\n</ul>\n<p>The possible data types <em>HdWalletDataTypes</em> are:</p>\n<ul>\n<li><em>HdWalletDataTypes.WALLET_NAME</em> : wallet name</li>\n<li><em>HdWalletDataTypes.COIN_NAME</em> : coin name</li>\n<li><em>HdWalletDataTypes.SPEC_NAME</em> : specification name</li>\n<li><em>HdWalletDataTypes.MNEMONIC</em> : mnemonic</li>\n<li><em>HdWalletDataTypes.PASSPHRASE</em> : passphrase</li>\n<li><em>HdWalletDataTypes.SEED_BYTES</em> : seed bytes</li>\n<li><em>HdWalletDataTypes.ACCOUNT_IDX</em> : account index</li>\n<li><em>HdWalletDataTypes.CHANGE_IDX</em> : change index</li>\n<li><em>HdWalletDataTypes.MASTER_KEY</em> : master keys</li>\n<li><em>HdWalletDataTypes.PURPOSE_KEY</em> : purpose keys</li>\n<li><em>HdWalletDataTypes.COIN_KEY</em> : coin keys</li>\n<li><em>HdWalletDataTypes.ACCOUNT_KEY</em> : account keys</li>\n<li><em>HdWalletDataTypes.CHANGE_KEY</em> : change keys</li>\n<li><em>HdWalletDataTypes.ADDRESSES</em> : addresses</li>\n</ul>\n<p>In case of keys, a <em>HdWalletKeys</em> object is returned. This object has the following methods:</p>\n<ul>\n<li><strong>ToDict()</strong> : return keys as a dictionary</li>\n<li><strong>ToJson()</strong> : return keys as a string in JSON format</li>\n<li><strong>HasKey(<em>HdWalletKeyTypes</em>)</strong> : get if the specified key type is existent</li>\n<li><strong>GetKey(<em>HdWalletKeyTypes</em>)</strong> : get the specified key if existetn, <em>None</em> otherwise</li>\n</ul>\n<p>The possible key types <em>HdWalletKeyTypes</em> are:</p>\n<ul>\n<li><em>HdWalletKeyTypes.EX_PRIV</em> : private key in extended serialized format</li>\n<li><em>HdWalletKeyTypes.RAW_PRIV</em> : raw private key</li>\n<li><em>HdWalletKeyTypes.WIF_PRIV</em> : private key in WIF format, if supported by the coin</li>\n<li><em>HdWalletKeyTypes.EX_PUB</em> : public key in extended serialized format</li>\n<li><em>HdWalletKeyTypes.RAW_COMPR_PUB</em> : raw public key in compressed format</li>\n<li><em>HdWalletKeyTypes.RAW_UNCOMPR_PUB</em> : raw public key in uncompressed format</li>\n<li><em>HdWalletKeyTypes.ADDRESS</em> : address correspondet to the public key, only for <em>HdWalletDataTypes.ADDRESSES</em></li>\n</ul>\n<p>In case of addresses, a <em>HdWalletAddresses</em> is returned, This object has the following methods:</p>\n<ul>\n<li><strong>ToDict()</strong> : return addresses as a dictionary</li>\n<li><strong>ToJson()</strong> : return addresses as a string in JSON format</li>\n<li><strong>Count()</strong> : get the number of addresses</li>\n<li><strong><strong>getitem</strong>(<em>addr_idx</em>)</strong> : get the address at the specified index using operator <em>[]</em></li>\n<li><strong><strong>iter</strong>()</strong> : allows to iterate over all addresses</li>\n</ul>\n<p>Each address is of type <em>HdWalletKeys</em>, so you can access it as a <em>HdWalletKeys</em> class as previously described.</p>\n<p><strong>Examples</strong></p>\n<pre><code>py_crypto_hd_wallet import HdWalletDataTypes\n\n# Get wallet, coin and specification names\nwallet_name = hd_wallet.GetData(HdWalletDataTypes.WALLET_NAME)\ncoin_name   = hd_wallet.GetData(HdWalletDataTypes.COIN_NAME)\nspec_name   = hd_wallet.GetData(HdWalletDataTypes.SPEC_NAME)\n# Get wallet account index\nacc_idx = hd_wallet.GetData(HdWalletDataTypes.ACCOUNT_IDX)\n\n# Get wallet account keys\nacc_key = hd_wallet.GetData(HdWalletDataTypes.ACCOUNT_KEY)\n# Print keys in different formats\nprint(acc_key.ToDict())\nprint(acc_key.ToJson())\n# Check if a key type is existent\nhas_wif = acc_key.HasKey(HdWalletKeyTypes.WIF_PRIV)\n# Get all keys individually\nex_priv = acc_key.GetKey(HdWalletKeyTypes.EX_PRIV)\nraw_priv = acc_key.GetKey(HdWalletKeyTypes.RAW_PRIV)\nwif_priv = acc_key.GetKey(HdWalletKeyTypes.WIF_PRIV)\nex_pub = acc_key.GetKey(HdWalletKeyTypes.EX_PUB)\nraw_compr_pub = acc_key.GetKey(HdWalletKeyTypes.RAW_COMPR_PUB)\nraw_uncompr_pub = acc_key.GetKey(HdWalletKeyTypes.RAW_UNCOMPR_PUB)\n# Getting address returns None because it's an account level\naddress = acc_key.GetKey(HdWalletKeyTypes.ADDRESS)\n\n# Get wallet addresses\naddresses = hd_wallet.GetData(HdWalletDataTypes.ADDRESSES)\n# Get address count\naddr_cnt = addresses.Count()\n# Get a specific address index\naddr_0 = addresses[0]\n# Print first address in different formats\nprint(addresses[0].ToDict())\nprint(addresses[0].ToJson())\n# Iterate over all addresses and print their keys and addresses\nfor addr in addresses:\n    print(addr.GetKey(HdWalletKeyTypes.EX_PRIV))\n    print(addr.GetKey(HdWalletKeyTypes.EX_PUB))\n    print(addr.GetKey(HdWalletKeyTypes.ADDRESS))\n</code></pre>\n<h3>Some examples of wallet JSON outputs</h3>\n<p><strong>NOTE:</strong> to limit the output size in the examples, the addresses number is limited to 3</p>\n<p><strong>Random wallet with 24 words passphrase for Ethereum (WIF is not present since it is not supported by Ethereum)</strong></p>\n<p>Code:</p>\n<pre><code>from py_crypto_hd_wallet import HdWallet, HdWalletFactory, HdWalletSaver, HdWalletCoins, HdWalletWordsNum\n\nhd_wallet_fact = HdWalletFactory(HdWalletCoins.ETHEREUM)\nhd_wallet = hd_wallet_fact.CreateRandom(\"eth_wallet\", HdWalletWordsNum.WORDS_NUM_24)\nhd_wallet.Generate(addr_num = 3)\nHdWalletSaver(hd_wallet).SaveToFile(\"my_wallet.txt\")\n</code></pre>\n<p>Output:</p>\n<pre><code>{\n    \"wallet_name\": \"eth_wallet\",\n    \"spec_name\": \"BIP-0044\",\n    \"coin_name\": \"Ethereum (ETH)\",\n    \"mnemonic\": \"scale tourist mobile heavy adult invite barely rib iron hover clap used swear group torch inside turn gold test rookie dog pet fuel process\",\n    \"passphrase\": \"\",\n    \"seed_bytes\": \"eed77707306437d996d5adf59e125b9c37a330c6f5d4de471171708b81cdf592c4fa5d8eee244fff8b0518abe5c57e14a09edf4042d0687ea39ad23dcb5f06af\",\n    \"master_key\": {\n        \"ex_pub\": \"xpub661MyMwAqRbcF2SjDobyJMUqu8c7kjeVpcqiDdfjrRYQNKiWA7YkM3za27G9fKQvPRLQNPAiLEUm9XFadwgyiMQ34vczcAH9aB3Ux3b6JGE\",\n        \"raw_compr_pub\": \"02217701ec6f3cb9d13c3e417a1d738d416558d559b93296ef87298a2c4ed3884f\",\n        \"raw_uncompr_pub\": \"217701ec6f3cb9d13c3e417a1d738d416558d559b93296ef87298a2c4ed3884f8e548b094c4d9432f10dfcab73181e1b3ea6dc2f0d26b502cfc52a445ae5edfc\",\n        \"ex_priv\": \"xprv9s21ZrQH143K2YNG7n4xwDY7M6mdMGveTPv7RFG8J61RVXPMcaEVoFg6ArdZSXh54QHBwmfo67PfaMcsrDYpYnzoFoQa7uEf3YVk1FrH1U2\",\n        \"raw_priv\": \"5616df73b23d66b74c4851848a10c89fb06c12ecb81a1f3327d30c9ab070236b\"\n    },\n    \"purpose_key\": {\n        \"ex_pub\": \"xpub68MK54SAUJHH9cSiuYSMopjLDApt67iA81CQKjxm8vnwzgr85xf6SztSwVNDy5arP1ZesG8RGbZU4sz6KXQ3ZoQi3uSec7fHhvPmoxsdCpc\",\n        \"raw_compr_pub\": \"0217dfec78c3a682e363135fc773480f82518505a28b2b8edd2b32e70db37ddfe5\",\n        \"raw_uncompr_pub\": \"17dfec78c3a682e363135fc773480f82518505a28b2b8edd2b32e70db37ddfe5dd30556a88dca1f5dca47291585ef423fa78f5847b86e09e77bbf0df6f50b636\",\n        \"ex_priv\": \"xprv9uMxfYuGdviyw8NFoWuMSgnbf8zPgezJknGoXMZ9abFy7tWyYRLquCZy6FaHkzPW1fiwAR23FqBwZ78TWuV77K3fYMYQwnfeKtpNYxEb8xX\",\n        \"raw_priv\": \"bafa27bb296fdd40662b9d972af8c7739be79463bc4f7ed7f3541fc452c22981\"\n    },\n    \"coin_key\": {\n        \"ex_pub\": \"xpub6ArF3P286eNxGUtPR14RFbD4wDTucq7rPvNKFU2iX9qbzbdCn4aUkz391jWRyKWxfUHrRkQQwsUu2vLymSqeqXeP9Zt5xFYHdaLZtvGjewv\",\n        \"raw_compr_pub\": \"0369fa1e83da6f9d596ddebdf7d30e43ac95000644671e649165b745a22c74689e\",\n        \"raw_uncompr_pub\": \"69fa1e83da6f9d596ddebdf7d30e43ac95000644671e649165b745a22c74689e506718de420e599c604dc52bbed41ffd9915a72e67f0e833e9214dacdb17b23d\",\n        \"ex_priv\": \"xprv9wrtdsVEGGpf3zovJyXQtTGLPBdRDNQ12hSiT5d6xpJd7oJ4EXGEDBifASAsggQ4b9iNi23RDfJKqiwh57Y4AYKMhvCoAPA1w7X6ujvsRJc\",\n        \"raw_priv\": \"3a3082a3296e1218dcb61db7e3922ba8b62702d84ffd45ccb0a91d12f71553f4\"\n    },\n    \"account_idx\": 0,\n    \"account_key\": {\n        \"ex_pub\": \"xpub6D53QhBBbnmDTDw6twzVUeFtB7o6pmJoVDYTXPE3um3qrhbTt7TTa5YyWTWG5bEy4unzthjtQBrSDWY2RV51yM6zsjHdBG1JcgrajgrrLTZ\",\n        \"raw_compr_pub\": \"03d0a089c11f609ea40fc895e5fbba64f6e9f52e191c289235677b931cca421ab2\",\n        \"raw_uncompr_pub\": \"d0a089c11f609ea40fc895e5fbba64f6e9f52e191c289235677b931cca421ab2a889815ce6f98b93616c707404d0c240a1ae0353fa89bf6f13d2de2332ee4f41\",\n        \"ex_priv\": \"xprv9z5h1BeHmRCvEjrdnvTV7WK9d5xcRJax7zcrizpSMRWryuGKLa9D2HEVfALukYkCH5jfVqHYEyR74jZP3mhjfuvrFL5kqh3d96MXqPatu2X\",\n        \"raw_priv\": \"b8039263868eb6dbbe7de9f0aa99ac7817de9186afc111854b3ee4b36048942e\"\n    },\n    \"change_idx\": 0,\n    \"change_key\": {\n        \"ex_pub\": \"xpub6EacFWjYBLjKx9i1FG6AQTZTo4ZTr2y6gbW1eaqwYWN8658EJWrrQ6CiAmLg6gUKvJcPzrfTV4g7h6nzmpCF2mdf9gWPCxYtWSYoY5wLNMg\",\n        \"raw_compr_pub\": \"0308b98916909793ad9335636c70fd61225586d4d72331616a836a167016b57107\",\n        \"raw_uncompr_pub\": \"08b98916909793ad9335636c70fd61225586d4d72331616a836a167016b571077412e60d88599ed9434a23f8f574fac448435851409d114a0ced0a7666d27f37\",\n        \"ex_priv\": \"xprvA1bFr1CeLyB2jfdY9EZA3KcjF2iySaFFKNaQrCSKzAq9DGo5kyYbrHtEKV1BdBwvLFRuVc7F2K3EwudhQQ9Z2rt2xBz1zeLVNKjrE1gVAoD\",\n        \"raw_priv\": \"5cc8571103db0bec90c0ae91020c17145a2d61bc1d391a14f4d2c8ae878c86b1\"\n    },\n    \"addresses\": {\n        \"address_1\": {\n            \"ex_pub\": \"xpub6GkuXeVuFpgwJvJCsRyr1Mq8UEgYa4SrW3GJyPxr232F2xhYJhmY66JiJJ3G8Qsvsmz1n24YUpcmdVuinMj5UdJ2t9oHySr3pftXSiWo2Cq\",\n            \"raw_compr_pub\": \"038a3cae97faf3039fa33b404bb7c683d76a3eff6b27fb43989bfd796426915544\",\n            \"raw_uncompr_pub\": \"8a3cae97faf3039fa33b404bb7c683d76a3eff6b27fb43989bfd79642691554443f3e7f5a6df2a8af4f552299c85bfc73df7ac7f3616d9a09b9faf0888ea6751\",\n            \"ex_priv\": \"xprvA3mZ88y1RT8e6SDjmQSqeDtPvCr4Abj18pLiB1ZEThVGAANPmATHYHzESzuYpF4B1FuE2gGCZmqc89hdPfEji1LKiEt7TA4d9MEgembqjm6\",\n            \"raw_priv\": \"7557f64e51895b529b7ee55f8a2922f5824eeed555f22a1220adb276bf3d2ff1\",\n            \"address\": \"0x11383e8FBdA76cE9beeeDdE603C903cF3bCCCa7A\"\n        },\n        \"address_2\": {\n            \"ex_pub\": \"xpub6GkuXeVuFpgwMoVvA8XSk8KKLzTwCqtEMsrHcCsweZTVoJBSf2in5fNFr6ft5DT3zoBou2nwjfpQCt5UKYEgemr2vGGngzmpj6vcST7bha4\",\n            \"raw_compr_pub\": \"03455fe53ad89f784b8dfdc96e95227eb66b51795260fd53f5777acfa09d2706cf\",\n            \"raw_uncompr_pub\": \"455fe53ad89f784b8dfdc96e95227eb66b51795260fd53f5777acfa09d2706cff0b414b5b3d30b5c927743c2964180387c3e6a48c41a25ecfe4484b16ffe5d69\",\n            \"ex_priv\": \"xprvA3mZ88y1RT8e9KRT46zSNzNanxdSoPANzevgopUL6DvWvVrJ7VQXXs3mzpGWQY6YtyA46MgSi5EuUQ2fNRwVXvBpXgUHfg1Up2ogdTSvsS4\",\n            \"raw_priv\": \"909dcdddcf8542a306ab545586cd1ad0761d1a51db8a9a28e27aafbfb24c0314\",\n            \"address\": \"0x225538102464EEa7eF64299813e2f9c5Ee2Ff01e\"\n        },\n        \"address_3\": {\n            \"ex_pub\": \"xpub6GkuXeVuFpgwPDf5cqMGC4tAwwEAQfuM7bDkVbT7NyB7dsg8UHbV8YEd32L3CvZ82wpFEM2MqPRBGRro4vL9MnoCi1jW9vBaXNCHCzx8NTq\",\n            \"raw_compr_pub\": \"0300ccc5f825b71c4ab346f4b845f51a252a844fcab961b253df35dcbeb45ba4b6\",\n            \"raw_uncompr_pub\": \"00ccc5f825b71c4ab346f4b845f51a252a844fcab961b253df35dcbeb45ba4b6fffaeaf7e2148e73aff118146e88c7612fc85a41aa3ea94a71ae30eddff40d23\",\n            \"ex_priv\": \"xprvA3mZ88y1RT8eAjacWopFpvwSPuPg1DBVkNJ9hD3Vpde8m5LyvkHEajv9BmGknZymZXW6SqJLm37Y6vfAVNZiNV1w9TwTbgcPsTuVBEeQY1n\",\n            \"raw_priv\": \"fd5b0ddcad5d5cf7738b69481c3b985bf59cdf27e2c6f8540036b020815927a7\",\n            \"address\": \"0x39831b2dd62e4385bb3B847FE60a9E6A80483D4E\"\n        }\n    }\n}\n</code></pre>\n<p><strong>Wallet created from master private extended key for Litecoin with account 2 and internal chain, using and BIP-0084 specification</strong></p>\n<p>Code:</p>\n<pre><code>from py_crypto_hd_wallet import HdWallet, HdWalletFactory, HdWalletSaver, HdWalletCoins, HdWalletChanges, HdWalletSpecs\n\nex_key = \"zprvAWgYBBk7JR8Gjrh4UJQ2uJdG1r3WNRRfURiABBE3RvMXYSrRJL62XuezvGdPvG6GFBZduosCc1YP5wixPox7zhZLfiUm8aunE96BBa4Kei5\"\n\nhd_wallet_fact = HdWalletFactory(HdWalletCoins.LITECOIN, HdWalletSpecs.BIP84)\nhd_wallet = hd_wallet_fact.CreateFromExtendedKey(\"ltc_bip84_wallet\", ex_key)\nhd_wallet.Generate(account_idx = 2, change_idx = HdWalletChanges.CHAIN_INT, addr_num = 3)\nHdWalletSaver(hd_wallet).SaveToFile(\"my_wallet.txt\")\n</code></pre>\n<p>Output:</p>\n<pre><code>{\n    \"wallet_name\": \"ltc_bip84_wallet\",\n    \"spec_name\": \"BIP-0084\",\n    \"coin_name\": \"Litecoin (LTC)\",\n    \"master_key\": {\n        \"ex_pub\": \"zpub6jftahH18ngZxLmXaKw3GSZzZsszmt9WqedkyZdezFtWRFBZqsQH5hyUmb4pCEeZGmVfQuP5bedXTB8is6fTv19U1GQRyQUKQGUTzyHACMF\",\n        \"raw_compr_pub\": \"03d902f35f560e0470c63313c7369168d9d7df2d49bf295fd9fb7cb109ccee0494\",\n        \"raw_uncompr_pub\": \"d902f35f560e0470c63313c7369168d9d7df2d49bf295fd9fb7cb109ccee04947d000a1345d3845dd83b4c5814f876c918305b598f066c958fad972bf59f2ec7\",\n        \"ex_priv\": \"zprvAWgYBBk7JR8Gjrh4UJQ2uJdG1r3WNRRfURiABBE3RvMXYSrRJL62XuezvGdPvG6GFBZduosCc1YP5wixPox7zhZLfiUm8aunE96BBa4Kei5\",\n        \"raw_priv\": \"1837c1be8e2995ec11cda2b066151be2cfb48adf9e47b151d46adab3a21cdf67\",\n        \"wif_priv\": \"6uJgfG4pBbMffTdMSGQVurdK6xBcZjhf1iDU2jtPAw5PzRdhx9m\"\n    },\n    \"purpose_key\": {\n        \"ex_pub\": \"zpub6nQP3Kke7oZS9QFQb8sVwb29vtXH66Er1faFqocsBh4KR8XrVKJmgsjLY8xDf9Ps5ifSMX7oHgoAj2CSWBeQbZRJS1KzGQL2SGFGDyZXGbz\",\n        \"raw_compr_pub\": \"03c098a6743927554712f1cbc240ef73190db1b7633b08d54ff853899439c102b5\",\n        \"raw_uncompr_pub\": \"c098a6743927554712f1cbc240ef73190db1b7633b08d54ff853899439c102b51f3c247d877613d8ebd5caf331f814a5421868c196aebb65732985ddfafd9ab5\",\n        \"ex_priv\": \"zprvAZR2dpDkHS18vvAwV7LVaT5RNrgngdWzeSef3RDFdMXLYLChwmzX95QrgrN67wosG2QjJgwUYbfiHTUTaMBb9czFCUUgKk12gKfKPR19T7P\",\n        \"raw_priv\": \"f36a166922514e2e3c7f09e139b0aeff039cbf020606670b27554f7fe1a24d9c\",\n        \"wif_priv\": \"6vyDk5W6psiyaxTfYrCFqpjqnnyiLdBXqqPzvJqmnfcjdfULaLF\"\n    },\n    \"coin_key\": {\n        \"ex_pub\": \"zpub6pNAXMNU74t5LozEhv5YkraP5qKGTDENJLDjtyU7XD7TAC7rDnBEv28HrYaRirxyfJtTtq64Cx136Zy4Z3pEhS8foMqseEyt2fzx6GqjZ5X\",\n        \"raw_compr_pub\": \"038fc79beaaf791f26f94ff65a697d9822974d76b71814a27a579b90a5cb34d479\",\n        \"raw_uncompr_pub\": \"8fc79beaaf791f26f94ff65a697d9822974d76b71814a27a579b90a5cb34d479e7a167212ec340a5e15c59934fb1014b97fbc7462de61e9716a27bcf790b3d6f\",\n        \"ex_priv\": \"zprvAbNp7qqaGhKn8KumbtYYPideXoUn3kWWw7J96b4VxsaUHPnhgErzNDop1EYkEjAboQa1fZKcu7vpjcA459fSBS5goMiMRyKQLvtjmxicd98\",\n        \"raw_priv\": \"04e2afd771056acb6d2b135cde1bf5e48bfe0d45e0cebd2564bd8af181398359\",\n        \"wif_priv\": \"6uAAqq676gdo44PNqGZ5UPFHU17sgfMTbSupfnH3S8Pn4NZ2TU5\"\n    },\n    \"account_idx\": 2,\n    \"account_key\": {\n        \"ex_pub\": \"zpub6rPo5mF47z5cuPYr45wj1wHiJooU6VVoowK5N1BRFiKDA5S62UDPoMnrYUPiNsGgfQpaCV2w2uXnjgUmnestsBp1XPqyPyCFSB1pT8JSwQL\",\n        \"raw_compr_pub\": \"03d3f39769e1a2c930337f94f976b7ae776e0508bf69d51eb72f10dbab0b98e804\",\n        \"raw_uncompr_pub\": \"d3f39769e1a2c930337f94f976b7ae776e0508bf69d51eb72f10dbab0b98e80404434410f2086491c7b3d714e9794bc20eb8ad429f96b26f31897a8c607f4905\",\n        \"ex_priv\": \"zprvAdQSgFiAHcXKguUNx4QieoLykmxyh2mxSiPUZcmohNnEHH6wUvu9FZUNhA6mKaaqBDr6rjf18GLn6KSsEbjzpD3ZFAQRVAh71eXdZXYVam4\",\n        \"raw_priv\": \"26636b848b4c1187c95f827cee303455d034645aa5742c634a4a88057ef0de0b\",\n        \"wif_priv\": \"6uQvdQ9F989FUzaWUtGpzvjrjTyPTHMevkWRZH5XzyuHjdjzUTx\"\n    },\n    \"change_idx\": 1,\n    \"change_key\": {\n        \"ex_pub\": \"zpub6tHpx8aYXtj3Bh1Gj2pZqFd1d8dXZyydeivRaAht6QqCSjdKEyPwgEEshojsEgemRDkwi7SR9kAJ92TJmT538AZwUNHdGvG7yyhxWL98ZAV\",\n        \"raw_compr_pub\": \"0322068c3e9b8b81e6116429e96cce0c7f34dfcbbe02748d7d039c3b6d5f0002e4\",\n        \"raw_uncompr_pub\": \"22068c3e9b8b81e6116429e96cce0c7f34dfcbbe02748d7d039c3b6d5f0002e4325db506b39c54bf3787c97347fe640a36ece3a2fed444dcb32f79fb96c4e7a9\",\n        \"ex_priv\": \"zprvAfJUYd3ehXAjyCvod1HZU7gH56o3AXFnHVzpmnJGY5JDZwJAhS5h8RvPrWhnh3XXWfF7NmM2KMx6RwYtDy2JXjsV3SYUTb73JsR54wnwi8q\",\n        \"raw_priv\": \"19ecb6871998145bc4b14ec9dacf6eacc1be35a2d2f3c871d8e6fe80fd7af8fa\",\n        \"wif_priv\": \"6uKSG2cmhpVmoCNsZShEXKocMAg4wisMz29wXDnwcL82fkrrRXp\"\n    },\n    \"addresses\": {\n        \"address_1\": {\n            \"ex_pub\": \"zpub6vTTtJ8jWvYsRr2xkYgxWA7vbUfhpHPZtqRQ7YUc4TMfoWzJLwxFar48oDAgiN6tX4WW9vmqkXafqXi3fq5XJozY8QyFkcougMwVDYJEofN\",\n            \"raw_compr_pub\": \"03c29e0c901821ed6a5a11ec164b7b4185a6a05fcd55fa9e87197864e98974cdd1\",\n            \"raw_uncompr_pub\": \"c29e0c901821ed6a5a11ec164b7b4185a6a05fcd55fa9e87197864e98974cdd1be8722700b9e957b500970b49b64ed140d7d497ce49efd9b5bf11f61119f0163\",\n            \"ex_priv\": \"zprvAhU7UnbqgYzaDMxVeX9x92BC3SqDQpfiXcVoKA4zW7pgvif9oQe133jewvCKqDdrXfG7EGjV8kZ4NcmnYLH3De58hZThxUSAT9ArQ9kkbyJ\",\n            \"raw_priv\": \"c2f59bac194fac86d3f81f5a99e15c208a1de977a124d5bb1d482dc64ddae168\",\n            \"wif_priv\": \"6vbt2SXs4e8BsMJf1i9pBM7JEm5Y8U9QSrHNWbcNv1i5yHcM9er\",\n            \"address\": \"ltc1qeyp9rflupuvw5j5pdyluhqgdxfk092hra6m8jm\"\n        },\n        \"address_2\": {\n            \"ex_pub\": \"zpub6vTTtJ8jWvYsU8EMiNdNZBK6WGgzXMb5Y44C6sZ3ppmSVZ1T24DsdeeS7CqUzTVm4orZ5DjBfXCUT4EvdMUriMD3wJZ9T6ReHDsjHc1eKY7\",\n            \"raw_compr_pub\": \"039111b4f7b9c4a70d621cc358fcda823117033b9e7c4a4b752014569086f22699\",\n            \"raw_uncompr_pub\": \"9111b4f7b9c4a70d621cc358fcda823117033b9e7c4a4b752014569086f2269942508a95ec95c1aece10aa0ec6c375950ed4131a1300bb5970f75aa1a360f871\",\n            \"ex_priv\": \"zprvAhU7UnbqgYzaFe9tcM6NC3NMxErW7tsEAq8bJV9SGVETckgJUWud5rKxFup4RfzazWi1HGQVdufUhg2c9RzPmtZ8sDBgTNnqiM23UummCXc\",\n            \"raw_priv\": \"8a748332b72d01727f0e63bdc2ddda5db517940b22a91fe57afed4fa8905048b\",\n            \"wif_priv\": \"6vAzhXugPNZXxGVBL9kgWSVMH9B3ZhggCwwtqLsby9NUuE8PTWu\",\n            \"address\": \"ltc1q2ksy0gmj2y2zru74nd64zlaq8h30qpz6dstr2s\"\n        },\n        \"address_3\": {\n            \"ex_pub\": \"zpub6vTTtJ8jWvYsWueMEngC1icupRsMKEL4yu8qrtJHEHXBrqp1xV3JYKr6L8oiaUzub2Vpzzi2jRxktYYkV16HNveP3GxbfpvdeNfUxUC1ec9\",\n            \"raw_compr_pub\": \"0301e2c682317976460352324e4142cdb0153172df8c6c8aca51f8359e6005f400\",\n            \"raw_uncompr_pub\": \"01e2c682317976460352324e4142cdb0153172df8c6c8aca51f8359e6005f400ea341d4a8c1f97d46c9e6a8341b2fd81442b5ae8aea988ccf3f5f429d6eb9bd9\",\n            \"ex_priv\": \"zprvAhU7UnbqgYzaJRZt8m9BeagBGQ2rumcDcgDF4VtffwzCz3UsQwj3zXXcUqvjaMvwLzmtKhYLojHyQSMVyg3VbE7BknvoPVpduFcTECojzq4\",\n            \"raw_priv\": \"0e7002ca0442417ee8a2a20db68c84e6844352f43627660010df8e8182df0c61\",\n            \"wif_priv\": \"6uENqVe5yo2wa2R2aPcZGJdY2RadjiJ1nN4zEFKfNJ3UiE3QSwz\",\n            \"address\": \"ltc1qatkc4pe54qupgp0zazd5qycwmmyhklrkgpjxap\"\n        }\n    }\n}\n</code></pre>\n<p><strong>Wallet created from account private extended key for Bitcoin, using BIP-0049 specification</strong></p>\n<p>Code:</p>\n<pre><code>from py_crypto_hd_wallet import HdWallet, HdWalletFactory, HdWalletSaver, HdWalletCoins, HdWalletSpecs\n\nex_key = \"yprvAHwhK6RbpuS3dgCYHM5jc2ZvEKd7Bi61u9FVhYMpgMSuZS613T1xxQeKTffhrHY79hZ5PsskBjcc6C2V7DrnsMsNaGDaWev3GLRQRgV7hxF\"\n\nhd_wallet_fact = HdWalletFactory(HdWalletCoins.BITCOIN, HdWalletSpecs.BIP49)\nhd_wallet = hd_wallet_fact.CreateFromExtendedKey(\"btc_bip49_wallet\", ex_key)\nhd_wallet.Generate(addr_num = 3)\nHdWalletSaver(hd_wallet).SaveToFile(\"my_wallet.txt\")\n</code></pre>\n<p>Output:</p>\n<pre><code>{\n    \"wallet_name\": \"btc_bip49_wallet\",\n    \"spec_name\": \"BIP-0049\",\n    \"coin_name\": \"Bitcoin (BTC)\",\n    \"account_key\": {\n        \"ex_pub\": \"ypub6Ww3ibxVfGzLrAH1PNcjyAWenMTbbAosGNB6VvmSEgytSER9azLDWCxoJwW7Ke7icmizBMXrzBx9979FfaHxHcrArf3zbeJJJUZPf663zsP\",\n        \"raw_compr_pub\": \"02f1f347891b20f7568eae3ec9869fbfb67bcab6f358326f10ecc42356bd55939d\",\n        \"raw_uncompr_pub\": \"f1f347891b20f7568eae3ec9869fbfb67bcab6f358326f10ecc42356bd55939d9c382f31be121b4a0650e23e97a110d40ab3c33e2cceadc78f278e4caf3cbbfe\",\n        \"ex_priv\": \"yprvAHwhK6RbpuS3dgCYHM5jc2ZvEKd7Bi61u9FVhYMpgMSuZS613T1xxQeKTffhrHY79hZ5PsskBjcc6C2V7DrnsMsNaGDaWev3GLRQRgV7hxF\",\n        \"raw_priv\": \"880d51752bda4190607e079588d3f644d96bfa03446bce93cddfda3c4a99c7e6\",\n        \"wif_priv\": \"5JrCr8UXV86dGBYnpU5UqQ3hmGbq9xmRAxQZCaS126kUgRHWEgf\"\n    },\n    \"change_idx\": 0,\n    \"change_key\": {\n        \"ex_pub\": \"ypub6Ynvx7RLNYgWzFGM8aeU43hFNjTh7u5Grrup7Ryu2nKZ1Y8FWKaJZXiUrkJSnMmGVNBoVH1DNDtQ32tR4YFDRSpSUXjjvsiMnCvoPHVWXJP\",\n        \"raw_compr_pub\": \"0316699a93944c8d45ed4de87240a21a2f08a399b61c2622aa3217864efb0a75c5\",\n        \"raw_uncompr_pub\": \"16699a93944c8d45ed4de87240a21a2f08a399b61c2622aa3217864efb0a75c527bb4ae4405631b4beb47db949e59201e88d375b205e1163a831ca964f2dcc55\",\n        \"ex_priv\": \"yprvAKoaYbtSYB8DmmBt2Z7TgukWphdCiSMRVdzDK3aHUSna8jo6xnG41jQ11ToPk4SQnE5sau6CYK4od9fyz53mK7huW4JskyMMEmixACuyhhr\",\n        \"raw_priv\": \"54c2851797e7fec9f4f84e9b168d84ec689ce1f41929b274e773a3932e322371\",\n        \"wif_priv\": \"5JTcf7b4Qx6UxxHich5zmdN44VSox8Ra4CgF1f7vj7o5HKrT2mC\"\n    },\n    \"addresses\": {\n        \"address_1\": {\n            \"ex_pub\": \"ypub6bWfB6tKVSQKayURFLcsaLjRvEzA92ZNFQpJioiTvN4BLucHrr5btBLpeBDjuV2mGb2wXWL1taoBNWf9xNgjHrPWkhSxxfrDGiciopL6N6E\",\n            \"raw_compr_pub\": \"039b3b694b8fc5b5e07fb069c783cac754f5d38c3e08bed1960e31fdb1dda35c24\",\n            \"raw_uncompr_pub\": \"9b3b694b8fc5b5e07fb069c783cac754f5d38c3e08bed1960e31fdb1dda35c2449bdd1f0ae7d37a04991d4f5927efd359c13189437d9eae0faf7d003ffd04c89\",\n            \"ex_priv\": \"yprvANXJmbMRf4r2NVPx9K5sDCnhND9fjZqWtBthvRJrN2XCU7H9KJmMLP2LnsgLbhdoaNcD89Fw7zktymVkW6eVcX9MKHpeAkEd94Hm9nWKWVw\",\n            \"raw_priv\": \"508c73a06f6b6c817238ba61be232f5080ea4616c54f94771156934666d38ee3\",\n            \"wif_priv\": \"5JRm65cCg7v9T2wWTpuEy9eQKmATg838ufvkZSpVcMxAt2Rmio5\",\n            \"address\": \"37VucYSaXLCAsxYyAPfbSi9eh4iEcbShgf\"\n        },\n        \"address_2\": {\n            \"ex_pub\": \"ypub6bWfB6tKVSQKcyzhDuvtgHqpp14CDMfkba7pG9W9WdCh5Y2Mmktq7rUu8EqXX3fQ6wvHKEXQUkGiXaTtFaraxa9FxsCPJF9qEWDi4HkXs8p\",\n            \"raw_compr_pub\": \"022a421fa4a65a87d1c3e4238155d85f7bd2c5bb87632f331b5722f110586aa198\",\n            \"raw_uncompr_pub\": \"2a421fa4a65a87d1c3e4238155d85f7bd2c5bb87632f331b5722f110586aa19885dc3cfdbc32b6050392ab66f99f67cc15fedb517df58070d022c9d7bc840804\",\n            \"ex_priv\": \"yprvANXJmbMRf4r2QVvE7tPtK9u6FyDhotwuEMCDTm6XxHfiCjhDEDaaa4ARGz27KayDwS58MYjFcjTGqkhmgEBgEr7fNprrWLK6e4a8mezb4Fz\",\n            \"raw_priv\": \"464c5dd427dcf1e2791b97a1aa9348647d3a55e1223b4e58cb663b49fd12e0ca\",\n            \"wif_priv\": \"5JMFFtAFSgvZUjUdV5ZkkmLmP1hpNzUmQNd6KsAT8Nn86M9NmZ7\",\n            \"address\": \"3LtMnn87fqUeHBUG414p9CWwnoV6E2pNKS\"\n        },\n        \"address_3\": {\n            \"ex_pub\": \"ypub6bWfB6tKVSQKezmwEg4FKD6EZmrm1oEd1ydxdRGKd89KyyWmrHar3ATQV2vXNDtXPUZBkaR7zgRKiCqkQwLgxXKLcnBQF8Cmr7jFd8YUnSb\",\n            \"raw_compr_pub\": \"02fdbd244eebd701270478af75ebb8894b963d61f2f686e366a626cb200ba13e45\",\n            \"raw_uncompr_pub\": \"fdbd244eebd701270478af75ebb8894b963d61f2f686e366a626cb200ba13e4504fa4141a7e6ba896cbc25c37b6b26d0ca2bea07a44f33609874faffabbfd35e\",\n            \"ex_priv\": \"yprvANXJmbMRf4r2SWhU8eXEx59W1k2GcLWmekiMq2ri4ncM7BBdJkGbVN8vdmB6mE8SC7LYVjb1P3xz8RP1qy1qz8DtKMHbV25SB7hP3MFAzDz\",\n            \"raw_priv\": \"9f263c1b238e7810453e42e6416292a0ae04e9963856dc470ea46bfcd5c49b23\",\n            \"wif_priv\": \"5K2NqZsCBxxLmW3az5xFBD472yFEkryS9mGjzbQcEPibJCX8qi8\",\n            \"address\": \"3B4cvWGR8X6Xs8nvTxVUoMJV77E4f7oaia\"\n        }\n    }\n}\n</code></pre>\n<p><strong>Wallet created from address private extended key for Dogecoin</strong></p>\n<p>Code:</p>\n<pre><code>from py_crypto_hd_wallet import HdWallet, HdWalletFactory, HdWalletSaver, HdWalletCoins\n\nex_key = \"dgpv5Chp3Su8jKGdbGsUJ8ksy6TAcid2jPj2vP3pk8eFRVqU1ozGb8Ppcy9yW8j8tCwKDLmw4MpsnJgDx6JzkskPXjpo57QJvf682UeMtr11nnw\"\n\nhd_wallet_fact = HdWalletFactory(HdWalletCoins.DOGECOIN)\nhd_wallet = hd_wallet_fact.CreateFromExtendedKey(\"doge_wallet\", ex_key)\nhd_wallet.Generate()\nHdWalletSaver(hd_wallet).SaveToFile(\"my_wallet.txt\")\n</code></pre>\n<p>Output:</p>\n<pre><code>{\n    \"wallet_name\": \"doge_wallet\",\n    \"spec_name\": \"BIP-0044\",\n    \"coin_name\": \"Dogecoin (DOGE)\",\n    \"addresses\": {\n        \"address_1\": {\n            \"ex_pub\": \"dgub8waqP8q2HTvxt8XdLNNr5wzm5GzfZWkkCyq2uF3EDctUZs6xztwbGGZd5Nx7kEg4QaPK6kQYTMXnx4kBmrYAogxfCD6ETtwvvYPDfW2edcB\",\n            \"raw_compr_pub\": \"02cc6b0dc33aabcf3a23643e5e2919a80c50fb3dd2129ce409bbc5f0d4643d05e0\",\n            \"raw_uncompr_pub\": \"cc6b0dc33aabcf3a23643e5e2919a80c50fb3dd2129ce409bbc5f0d4643d05e0ef6096bd24259fb59a4338413d1b542eed17d4cce52709e6ec18ec51bb87b164\",\n            \"ex_priv\": \"dgpv5Chp3Su8jKGdbGsUJ8ksy6TAcid2jPj2vP3pk8eFRVqU1ozGb8Ppcy9yW8j8tCwKDLmw4MpsnJgDx6JzkskPXjpo57QJvf682UeMtr11nnw\",\n            \"raw_priv\": \"21f5e16d57b9b70a1625020b59a85fa9342de9c103af3dd9f7b94393a4ac2f46\",\n            \"wif_priv\": \"6JPaMAeJjouhb8xPzFzETYCHJAJ9wBoFsCyC1LXFSTcZDmHgy6L\",\n            \"address\": \"DBus3bamQjgJULBJtYXpEzDWQRwF5iwxgC\"\n        }\n    }\n}\n</code></pre>\n<p><strong>Watch-only wallet create from a change public extended key for Bitcoin</strong></p>\n<p>Code:</p>\n<pre><code>from py_crypto_hd_wallet import HdWallet, HdWalletFactory, HdWalletSaver, HdWalletCoins\n\nex_key = \"xpub6ELHKXNimKbxMCytPh7EdC2QXx46T9qLDJWGnTraz1H9kMMFdcduoU69wh9cxP12wDxqAAfbaESWGYt5rREsX1J8iR2TEunvzvddduAPYcY\"\n\nhd_wallet_fact = HdWalletFactory(HdWalletCoins.BITCOIN)\nhd_wallet = hd_wallet_fact.CreateFromExtendedKey(\"btc_wo_wallet\", ex_key)\nhd_wallet.Generate(addr_num = 3)\nHdWalletSaver(hd_wallet).SaveToFile(\"my_wallet.txt\")\n</code></pre>\n<p>Output:</p>\n<pre><code>{\n    \"wallet_name\": \"btc_wo_wallet\",\n    \"spec_name\": \"BIP-0044\",\n    \"coin_name\": \"Bitcoin (BTC)\",\n    \"change_key\": {\n        \"ex_pub\": \"xpub6ELHKXNimKbxMCytPh7EdC2QXx46T9qLDJWGnTraz1H9kMMFdcduoU69wh9cxP12wDxqAAfbaESWGYt5rREsX1J8iR2TEunvzvddduAPYcY\",\n        \"raw_compr_pub\": \"0386b865b52b753d0a84d09bc20063fab5d8453ec33c215d4019a5801c9c6438b9\",\n        \"raw_uncompr_pub\": \"86b865b52b753d0a84d09bc20063fab5d8453ec33c215d4019a5801c9c6438b917770b2782e29a9ecc6edb67cd1f0fbf05ec4c1236884b6d686d6be3b1588abb\"\n    },\n    \"addresses\": {\n        \"address_1\": {\n            \"ex_pub\": \"xpub6Fbrwk4KhC8qnFVXTcR3wRsqiTGkedcSSZKyTqKaxXjFN6rZv3UJYZ4mQtjNYY3gCa181iCHSBWyWst2PFiXBKgLpFVSdcyLbHyAahin8pd\",\n            \"raw_compr_pub\": \"03aaeb52dd7494c361049de67cc680e83ebcbbbdbeb13637d92cd845f70308af5e\",\n            \"raw_uncompr_pub\": \"aaeb52dd7494c361049de67cc680e83ebcbbbdbeb13637d92cd845f70308af5e9370164133294e5fd1679672fe7866c307daf97281a28f66dca7cbb52919824f\",\n            \"address\": \"1LqBGSKuX5yYUonjxT5qGfpUsXKYYWeabA\"\n        },\n        \"address_2\": {\n            \"ex_pub\": \"xpub6Fbrwk4KhC8qpW547rQ6k2d2YBu672sBMtGV1q5duGH7pktZou5ZyuufVAC4rtyM5csX6hCkdPJe2SVZUQ2hAtMNcx3iS7qcnFdGJxmtDNn\",\n            \"raw_compr_pub\": \"02dfcaec532010d704860e20ad6aff8cf3477164ffb02f93d45c552dadc70ed24f\",\n            \"raw_uncompr_pub\": \"dfcaec532010d704860e20ad6aff8cf3477164ffb02f93d45c552dadc70ed24f05100e9dc6d05ccd7e8bdade50dabeeed654700fde6134870194a6ccb2a07a5e\",\n            \"address\": \"1Ak8PffB2meyfYnbXZR9EGfLfFZVpzJvQP\"\n        },\n        \"address_3\": {\n            \"ex_pub\": \"xpub6Fbrwk4KhC8qtGNv4K6ZPPa4CjbLKcXhc6CzA57XMPXVYMjQn3LQUY3G8B9kwKkfiM5KnhL1bTSQaN4EYDgamQeQGu7RjFgqBC1rjTvqwLM\",\n            \"raw_compr_pub\": \"0338994349b3a804c44bbec55c2824443ebb9e475dfdad14f4b1a01a97d42751b3\",\n            \"raw_uncompr_pub\": \"38994349b3a804c44bbec55c2824443ebb9e475dfdad14f4b1a01a97d42751b37a93be7a6818b0f5bc5410bb844ba9d417181afae5810c7a222e8fd47a02f6b9\",\n            \"address\": \"1MNF5RSaabFwcbtJirJwKnDytsXXEsVsNb\"\n        }\n    }\n}\n</code></pre>\n<h2>License</h2>\n<p>This software is available under the MIT license.</p>\n\n          </div>"}, "last_serial": 7040167, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "004478211f774cb01c46c2a15b3bb76d", "sha256": "ecf678e7342ddbbb67a7f79fb6198a47b7aaaa43cfe24527ce149f53410b075e"}, "downloads": -1, "filename": "py_crypto_hd_wallet-0.1.0.tar.gz", "has_sig": false, "md5_digest": "004478211f774cb01c46c2a15b3bb76d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 29603, "upload_time": "2020-04-10T15:46:14", "upload_time_iso_8601": "2020-04-10T15:46:14.648691Z", "url": "https://files.pythonhosted.org/packages/a9/7c/4537133fe4267ee7a8101858795ae262464071d04ab82952273166f15ea1/py_crypto_hd_wallet-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "9ebff53eb61bc02443d0349b46c84ba4", "sha256": "0596624b2bfdfbbb52b6f2628d3f1930a18ffe8eb396845ba5ad3006d4e15d44"}, "downloads": -1, "filename": "py_crypto_hd_wallet-0.2.0.tar.gz", "has_sig": false, "md5_digest": "9ebff53eb61bc02443d0349b46c84ba4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 45643, "upload_time": "2020-04-11T12:47:44", "upload_time_iso_8601": "2020-04-11T12:47:44.700969Z", "url": "https://files.pythonhosted.org/packages/02/b8/0a16735b88329c48f56930c7b0625a15d35ccc858c31a784fbc47c5ab17b/py_crypto_hd_wallet-0.2.0.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "03ad1f3c3fc9b935ddeb213de9ad3883", "sha256": "d9197e196b2250788738ca4e283495228dbff95fac327afb5048b89a8979522d"}, "downloads": -1, "filename": "py_crypto_hd_wallet-0.3.0.tar.gz", "has_sig": false, "md5_digest": "03ad1f3c3fc9b935ddeb213de9ad3883", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 49171, "upload_time": "2020-04-11T19:21:54", "upload_time_iso_8601": "2020-04-11T19:21:54.525238Z", "url": "https://files.pythonhosted.org/packages/e2/ed/03bb755716e5b74e8b551b6ce580e8795963664d3bb021de7275614adba8/py_crypto_hd_wallet-0.3.0.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "f77bea66078726305eb649c577665922", "sha256": "ce6a238e6eba1420b13577d6db7bfbf957a98078ec49ea05e9c7f4b0136c3eae"}, "downloads": -1, "filename": "py_crypto_hd_wallet-0.3.1.tar.gz", "has_sig": false, "md5_digest": "f77bea66078726305eb649c577665922", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 49316, "upload_time": "2020-04-17T13:13:07", "upload_time_iso_8601": "2020-04-17T13:13:07.696819Z", "url": "https://files.pythonhosted.org/packages/33/ea/3c6f9fafc9f0b4e6cd8f4d676237a1a1fe647fcce46a586a340cc7fcf126/py_crypto_hd_wallet-0.3.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f77bea66078726305eb649c577665922", "sha256": "ce6a238e6eba1420b13577d6db7bfbf957a98078ec49ea05e9c7f4b0136c3eae"}, "downloads": -1, "filename": "py_crypto_hd_wallet-0.3.1.tar.gz", "has_sig": false, "md5_digest": "f77bea66078726305eb649c577665922", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 49316, "upload_time": "2020-04-17T13:13:07", "upload_time_iso_8601": "2020-04-17T13:13:07.696819Z", "url": "https://files.pythonhosted.org/packages/33/ea/3c6f9fafc9f0b4e6cd8f4d676237a1a1fe647fcce46a586a340cc7fcf126/py_crypto_hd_wallet-0.3.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:07:44 2020"}