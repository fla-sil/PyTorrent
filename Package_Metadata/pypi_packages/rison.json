{"info": {"author": "Stijn Debrouwere", "author_email": "stijn@stdout.be", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Web Environment", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: Utilities"], "description": "python-rison is, not surprisingly, a Rison parser for Python.\n\nRison is a data serialization format optimized for compactness in URIs. Rison is a \nslight variation of JSON that looks vastly superior after URI encoding. Rison still \nexpresses exactly the same set of data structures as JSON, so data can be translated \nback and forth without loss or guesswork.\n\nSee http://mjtemplate.org/examples/rison.html to learn more.\n\nRison URLs look like this:\n\n\thttp://example.org/example-resource?a=(key:val,key2:val2)&b=!(a,list,of,values)\n\nO-Rison and A-Rison shortcuts make these URLs cleaner still. If you know beforehand which \ndata type an argument will receive, you can use O-Rison for objects and A-Rison for arrays, \nand leave off the () and !() syntax respectively:\n\n\thttp://example.org/example-resource?a=key:val,key2:val2&b=a,list,of,values\n\nCurrent version may not work with unicode URLs.", "description_content_type": null, "docs_url": null, "download_url": "http://www.github.com/stdbrouw/rison/tarball/master", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "UNKNOWN", "keywords": "json serialization uri url", "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "rison", "package_url": "https://pypi.org/project/rison/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/rison/", "project_urls": {"Download": "http://www.github.com/stdbrouw/rison/tarball/master", "Homepage": "UNKNOWN"}, "release_url": "https://pypi.org/project/rison/1.1/", "requires_dist": null, "requires_python": null, "summary": "A Rison parser", "version": "1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>python-rison is, not surprisingly, a Rison parser for Python.</p>\n<p>Rison is a data serialization format optimized for compactness in URIs. Rison is a\nslight variation of JSON that looks vastly superior after URI encoding. Rison still\nexpresses exactly the same set of data structures as JSON, so data can be translated\nback and forth without loss or guesswork.</p>\n<p>See <a href=\"http://mjtemplate.org/examples/rison.html\" rel=\"nofollow\">http://mjtemplate.org/examples/rison.html</a> to learn more.</p>\n<p>Rison URLs look like this:</p>\n<blockquote>\n<a href=\"http://example.org/example-resource?a=(key:val,key2:val2)&amp;b=!(a,list,of,values\" rel=\"nofollow\">http://example.org/example-resource?a=(key:val,key2:val2)&amp;b=!(a,list,of,values</a>)</blockquote>\n<p>O-Rison and A-Rison shortcuts make these URLs cleaner still. If you know beforehand which\ndata type an argument will receive, you can use O-Rison for objects and A-Rison for arrays,\nand leave off the () and !() syntax respectively:</p>\n<blockquote>\n<a href=\"http://example.org/example-resource?a=key:val,key2:val2&amp;b=a,list,of,values\" rel=\"nofollow\">http://example.org/example-resource?a=key:val,key2:val2&amp;b=a,list,of,values</a></blockquote>\n<p>Current version may not work with unicode URLs.</p>\n\n          </div>"}, "last_serial": 5650330, "releases": {"1.1": []}, "urls": [], "timestamp": "Fri May  8 03:02:24 2020"}