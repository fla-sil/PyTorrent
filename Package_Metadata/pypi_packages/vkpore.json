{"info": {"author": "Michael Krukov", "author_email": "krukov.michael@ya.ru", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3 :: Only", "Topic :: Software Development :: Libraries"], "description": "# Vkpore\n\n[![Build Status](https://travis-ci.com/ekonda/vkpore.svg?branch=master)](https://travis-ci.com/ekonda/vkpore)\n[![codecov](https://codecov.io/gh/ekonda/vkpore/branch/master/graph/badge.svg)](https://codecov.io/gh/ekonda/vkpore)\n[![Documentation Status](https://readthedocs.org/projects/vkpore/badge/?version=latest)](https://vkpore.readthedocs.io/en/latest/?badge=latest)\n[![CodeFactor](https://www.codefactor.io/repository/github/ekonda/vkpore/badge)](https://www.codefactor.io/repository/github/ekonda/vkpore)\n[![Codacy Badge](https://api.codacy.com/project/badge/Grade/66e342d2507247dcbc5b9a3c7f2fca30)](https://www.codacy.com/app/michaelkrukov/vkpore?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=ekonda/vkpore&amp;utm_campaign=Badge_Grade)\n[![codebeat badge](https://codebeat.co/badges/709259fe-147c-41da-8df5-bdbe2d89f67f)](https://codebeat.co/projects/github-com-ekonda-vkpore-master)\n\nAsynchronous library for organizing interactions with\n[Vkontakte](https://vk.com/dev) api.\n\n## Documentation\n\nDocumentation is available [here](https://vkpore.readthedocs.io/).\n\n## Features\n\n- Direct requests to Vkontakte API\n- Requests to Vkontakte API using [execute](https://vk.com/dev/execute)\n- Straightforward usage and API\n- Heavily annotated types\n- Extensive testing\n- Supports multiple groups at the same time\n- Small overhead\n- Build on experience and many known use cases\n\n### Supported attachments\n\nYou can use these classes from `vkpore.objects` to parse source data into\ninstances. If you need something not supported by the library, every\ninstance has `.source` field with raw source data.\n\n- `Sticker` (type: `sticker`)\n- `Video` (type: `video`)\n- `Photo` (type: `photo`)\n- `Audio` (type: `audio`)\n- `Link` (type: `link`)\n- `Wall` (type: `wall`)\n- `Gift` (type: `gift`)\n- `Doc` (type: `doc`)\n\n### Supported events\n\nYou can use these classes from `vkpore.events` to parse source data into\ninstances. If you need something not supported by the library, every\ninstance has `.source` field with raw source data.\n\n- `MessageNew` (type: `message_new`)\n\n## Usage\n\n### Longpoll\n\nYou can use class `Vkpore` to create a manager and subscribe callbacks to\nevents. When the manager receives event, it will call registered callback\nfor type `vk:<vkontakte-event-name>`. The callback will receive an event\ninstance through which you can interact with Vkontakte.\n\nTo start the manager, just call `.run()` method. If you want to run\nmanager in backgroudn, you can use use coroutine `.start()`.\n\n#### Example\n\n```py\napp = Vkpore([\"token\"])\n\n@app.on(\"vk:message_new\")\nasync def _(event: MessageNew):  # Echo callback\n    await event.response(event.text)\n\napp.run()\n```\n\n### Client\n\nYou can use class `VkClient` to perform requests in a loop with `execute`\nor directly.\n\n> `VkClient` uses `aiohttp.ClientSession`, so you need to\n> clean up before exiting your application, if your don't\n> want to see the warnings\n\n#### Example without loop\n\n```py\nasync def application():\n    client = VkClient(\"token\")\n\n    users = await client.raw_request(\"users.get\", user_id=188149294)\n\n    if users:\n        print(users[0])\n\n    await client.close_session()\n\nget_event_loop().run_until_complete(application())\n```\n\n#### Example with loop\n\n- Use `.request()` to utilize batching with `execute` and respect limits\n- Place your calls to `.request()` between `.start()` and `.stop()`\n\n> You still have to close the session\n\n```py\nasync def application():\n    client = VkClient(\"token\")\n    client.start()\n\n    # ...\n\n    await client.stop()\n\nget_event_loop().run_until_complete(application())\n```\n\n## FAQ\n\n- **Is there plugins?** No. `Vkpore` is a library for aiding in developing\n  your solutions with organizing and using Vkontakte API.\n\n- **Is every event is supported?** No. Only a few update types are\n  supported with classes at the moment. *But.* You don't have to only use\n  classes. You can use `\"vk:raw\"` for receiving any update types that are\n  not supported with classes.\n\n- **Does this library work with user accounts?** No, but actually yes. Only\n  groups are supported by `Vkpore` class, but if you pass a user token in\n  `VkClient` - it will possibly work fine.\n\n- **Does this library support telegram?** No. It's a library for Vkontakte.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ekonda/vkpore/", "keywords": "library,vkontakte,asynchronous,asyncio,longpoll", "license": "", "maintainer": "", "maintainer_email": "", "name": "vkpore", "package_url": "https://pypi.org/project/vkpore/", "platform": "", "project_url": "https://pypi.org/project/vkpore/", "project_urls": {"Homepage": "https://github.com/ekonda/vkpore/"}, "release_url": "https://pypi.org/project/vkpore/0.1.0/", "requires_dist": null, "requires_python": ">=3.5", "summary": "Library for organizing interactions with Vkontakte api.", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Vkpore</h1>\n<p><a href=\"https://travis-ci.com/ekonda/vkpore\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c8e05ffbc36be825dfae787aef0f3d67ebfc2a0a/68747470733a2f2f7472617669732d63692e636f6d2f656b6f6e64612f766b706f72652e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://codecov.io/gh/ekonda/vkpore\" rel=\"nofollow\"><img alt=\"codecov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/208968c15c2fb5200fe00ce141c995761f610039/68747470733a2f2f636f6465636f762e696f2f67682f656b6f6e64612f766b706f72652f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a>\n<a href=\"https://vkpore.readthedocs.io/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/47bac57df2eff7e0a92b78369ae0caa402f71003/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f766b706f72652f62616467652f3f76657273696f6e3d6c6174657374\"></a>\n<a href=\"https://www.codefactor.io/repository/github/ekonda/vkpore\" rel=\"nofollow\"><img alt=\"CodeFactor\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4477952a4ee8e9c174e79bf8229c42c5c2183edc/68747470733a2f2f7777772e636f6465666163746f722e696f2f7265706f7369746f72792f6769746875622f656b6f6e64612f766b706f72652f6261646765\"></a>\n<a href=\"https://www.codacy.com/app/michaelkrukov/vkpore?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=ekonda/vkpore&amp;utm_campaign=Badge_Grade\" rel=\"nofollow\"><img alt=\"Codacy Badge\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1f1c921a417e6933204da4fd13a4b95441330c11/68747470733a2f2f6170692e636f646163792e636f6d2f70726f6a6563742f62616467652f47726164652f3636653334326432353037323437646362633562396133633766326663613330\"></a>\n<a href=\"https://codebeat.co/projects/github-com-ekonda-vkpore-master\" rel=\"nofollow\"><img alt=\"codebeat badge\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9209eae08949c10de3c544bc0989e8882e8623b4/68747470733a2f2f636f6465626561742e636f2f6261646765732f37303932353966652d313437632d343164612d386466352d626462653264383966363766\"></a></p>\n<p>Asynchronous library for organizing interactions with\n<a href=\"https://vk.com/dev\" rel=\"nofollow\">Vkontakte</a> api.</p>\n<h2>Documentation</h2>\n<p>Documentation is available <a href=\"https://vkpore.readthedocs.io/\" rel=\"nofollow\">here</a>.</p>\n<h2>Features</h2>\n<ul>\n<li>Direct requests to Vkontakte API</li>\n<li>Requests to Vkontakte API using <a href=\"https://vk.com/dev/execute\" rel=\"nofollow\">execute</a></li>\n<li>Straightforward usage and API</li>\n<li>Heavily annotated types</li>\n<li>Extensive testing</li>\n<li>Supports multiple groups at the same time</li>\n<li>Small overhead</li>\n<li>Build on experience and many known use cases</li>\n</ul>\n<h3>Supported attachments</h3>\n<p>You can use these classes from <code>vkpore.objects</code> to parse source data into\ninstances. If you need something not supported by the library, every\ninstance has <code>.source</code> field with raw source data.</p>\n<ul>\n<li><code>Sticker</code> (type: <code>sticker</code>)</li>\n<li><code>Video</code> (type: <code>video</code>)</li>\n<li><code>Photo</code> (type: <code>photo</code>)</li>\n<li><code>Audio</code> (type: <code>audio</code>)</li>\n<li><code>Link</code> (type: <code>link</code>)</li>\n<li><code>Wall</code> (type: <code>wall</code>)</li>\n<li><code>Gift</code> (type: <code>gift</code>)</li>\n<li><code>Doc</code> (type: <code>doc</code>)</li>\n</ul>\n<h3>Supported events</h3>\n<p>You can use these classes from <code>vkpore.events</code> to parse source data into\ninstances. If you need something not supported by the library, every\ninstance has <code>.source</code> field with raw source data.</p>\n<ul>\n<li><code>MessageNew</code> (type: <code>message_new</code>)</li>\n</ul>\n<h2>Usage</h2>\n<h3>Longpoll</h3>\n<p>You can use class <code>Vkpore</code> to create a manager and subscribe callbacks to\nevents. When the manager receives event, it will call registered callback\nfor type <code>vk:&lt;vkontakte-event-name&gt;</code>. The callback will receive an event\ninstance through which you can interact with Vkontakte.</p>\n<p>To start the manager, just call <code>.run()</code> method. If you want to run\nmanager in backgroudn, you can use use coroutine <code>.start()</code>.</p>\n<h4>Example</h4>\n<pre><span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">Vkpore</span><span class=\"p\">([</span><span class=\"s2\">\"token\"</span><span class=\"p\">])</span>\n\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">on</span><span class=\"p\">(</span><span class=\"s2\">\"vk:message_new\"</span><span class=\"p\">)</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">_</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"p\">:</span> <span class=\"n\">MessageNew</span><span class=\"p\">):</span>  <span class=\"c1\"># Echo callback</span>\n    <span class=\"k\">await</span> <span class=\"n\">event</span><span class=\"o\">.</span><span class=\"n\">response</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"o\">.</span><span class=\"n\">text</span><span class=\"p\">)</span>\n\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n</pre>\n<h3>Client</h3>\n<p>You can use class <code>VkClient</code> to perform requests in a loop with <code>execute</code>\nor directly.</p>\n<blockquote>\n<p><code>VkClient</code> uses <code>aiohttp.ClientSession</code>, so you need to\nclean up before exiting your application, if your don't\nwant to see the warnings</p>\n</blockquote>\n<h4>Example without loop</h4>\n<pre><span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">application</span><span class=\"p\">():</span>\n    <span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">VkClient</span><span class=\"p\">(</span><span class=\"s2\">\"token\"</span><span class=\"p\">)</span>\n\n    <span class=\"n\">users</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">raw_request</span><span class=\"p\">(</span><span class=\"s2\">\"users.get\"</span><span class=\"p\">,</span> <span class=\"n\">user_id</span><span class=\"o\">=</span><span class=\"mi\">188149294</span><span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">users</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">users</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n\n    <span class=\"k\">await</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">close_session</span><span class=\"p\">()</span>\n\n<span class=\"n\">get_event_loop</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span><span class=\"n\">application</span><span class=\"p\">())</span>\n</pre>\n<h4>Example with loop</h4>\n<ul>\n<li>Use <code>.request()</code> to utilize batching with <code>execute</code> and respect limits</li>\n<li>Place your calls to <code>.request()</code> between <code>.start()</code> and <code>.stop()</code></li>\n</ul>\n<blockquote>\n<p>You still have to close the session</p>\n</blockquote>\n<pre><span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">application</span><span class=\"p\">():</span>\n    <span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">VkClient</span><span class=\"p\">(</span><span class=\"s2\">\"token\"</span><span class=\"p\">)</span>\n    <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n\n    <span class=\"c1\"># ...</span>\n\n    <span class=\"k\">await</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">stop</span><span class=\"p\">()</span>\n\n<span class=\"n\">get_event_loop</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span><span class=\"n\">application</span><span class=\"p\">())</span>\n</pre>\n<h2>FAQ</h2>\n<ul>\n<li>\n<p><strong>Is there plugins?</strong> No. <code>Vkpore</code> is a library for aiding in developing\nyour solutions with organizing and using Vkontakte API.</p>\n</li>\n<li>\n<p><strong>Is every event is supported?</strong> No. Only a few update types are\nsupported with classes at the moment. <em>But.</em> You don't have to only use\nclasses. You can use <code>\"vk:raw\"</code> for receiving any update types that are\nnot supported with classes.</p>\n</li>\n<li>\n<p><strong>Does this library work with user accounts?</strong> No, but actually yes. Only\ngroups are supported by <code>Vkpore</code> class, but if you pass a user token in\n<code>VkClient</code> - it will possibly work fine.</p>\n</li>\n<li>\n<p><strong>Does this library support telegram?</strong> No. It's a library for Vkontakte.</p>\n</li>\n</ul>\n\n          </div>"}, "last_serial": 5329227, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "8fc29887a5b601af0cb85b3f6b02f10e", "sha256": "ad85895c38079351db5d83357f9feb988888174ebdd697c4a7363af24fdc5664"}, "downloads": -1, "filename": "vkpore-0.1.0.tar.gz", "has_sig": false, "md5_digest": "8fc29887a5b601af0cb85b3f6b02f10e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 12632, "upload_time": "2019-05-28T21:54:15", "upload_time_iso_8601": "2019-05-28T21:54:15.040372Z", "url": "https://files.pythonhosted.org/packages/68/e4/3e869b388735927294c778fe5b63ebaecbc212e8a4bca8a04ad67270507f/vkpore-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "8fc29887a5b601af0cb85b3f6b02f10e", "sha256": "ad85895c38079351db5d83357f9feb988888174ebdd697c4a7363af24fdc5664"}, "downloads": -1, "filename": "vkpore-0.1.0.tar.gz", "has_sig": false, "md5_digest": "8fc29887a5b601af0cb85b3f6b02f10e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 12632, "upload_time": "2019-05-28T21:54:15", "upload_time_iso_8601": "2019-05-28T21:54:15.040372Z", "url": "https://files.pythonhosted.org/packages/68/e4/3e869b388735927294c778fe5b63ebaecbc212e8a4bca8a04ad67270507f/vkpore-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:34:57 2020"}