{"info": {"author": "JeanMichel FRANCOIS aka toutpt", "author_email": "toutpt@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: GNU General Public License (GPL)", "Operating System :: OS Independent", "Programming Language :: Python"], "description": "Introduction\n============\n\nThis package is a set of tools to transform captions from one format to another.\nYou will find Writer and Reader for each format and a script if you want\nto use it in command line.\n\nSupported Format:\n\n* sbv Reader and Writer\n* srt Reader and Writer\n* ttml Reader and Writer\n* transcript Reader and Writer\n\nHow to use (API)\n================\n\nYou can read the provided unittest to have complete examples::\n\n    from captionstransformer.sbv import Reader\n    from captionstransformer.ttml import Writer\n    from StringIO import StringIO\n    test_content = StringIO(u\"\"\"\n    0:00:03.490,0:00:07.430\n    >> FISHER: All right. So, let's begin.\n    This session is: Going Social\n    \n    0:00:07.430,0:00:11.600\n    with the YouTube APIs. I am\n    Jeff Fisher,\n    \n    0:00:11.600,0:00:14.009\n    and this is Johann Hartmann,\n    we're presenting today.\n    \n    0:00:14.009,0:00:15.889\n    [pause]\n    \"\"\")\n    reader = Reader(test_content)\n\n    captions = reader.read()\n    len(captions) == 4\n    first = captions[0]\n    type(first.text) == unicode\n    first.text == u\">> FISHER: All right. So, let's begin.\\nThis session is: Going Social\\n\"\n\n    # next get a writer\n    filelike = StringIO()\n    writer = Writer(filelike)\n    writer.set_captions(captions)\n    text = writer.captions_to_text()\n    text.startswith(u\"\"\"<tt xml:lang=\"\" xmlns=\"http://www.w3.org/ns/ttml\"><body><div>\"\"\")\n    writer.write()\n    writer.close()\n\nAbout Formats\n=============\n\nThis quite hard to find simple documentation about existing caption format.\nHere is a set of existing named caption format:\n\nSubViewer (SUB)::\n\n    00:04:35.03,00:04:38.82\n    Hello guys... please sit down...\n    \n    00:05:00.19,00:05:03.47\n    M. Franklin,[br]are you crazy?\n\n\nYoutube (SBV)::\n\n    0:00:03.490,0:00:07.430\n    FISHER: All right. So, let's begin.\n    This session is: Going Social\n    \n    0:00:07.430,0:00:11.600\n    with the YouTube APIs. I am\n    Jeff Fisher,\n    \n    0:00:11.600,0:00:14.009\n    and this is Johann Hartmann,\n    we're presenting today.\n    \n    0:00:14.009,0:00:15.889\n    [pause]\n\nSubRip (SRT)::\n\n    1\n    00:00:03,490 --> 00:00:07,430\n    FISHER: All right. So, let's begin.\n    This session is: Going Social\n    \n    00:00:07,430 --> 00:00:11,600\n    with the YouTube APIs. I am\n    Jeff Fisher,\n    \n    2\n    00:00:11,600 --> 00:00:14,009\n    and this is Johann Hartmann,\n    we're presenting today.\n    \n    3\n    00:00:14,009 --> 00:00:15,889\n    [pause]\n\nTimed Text Markup Language (TTML)::\n\n    <tt xml:lang=\"\" xmlns=\"http://www.w3.org/ns/ttml\">\n      <body region=\"subtitleArea\">\n        <div>\n          <p xml:id=\"subtitle1\" begin=\"0.76s\" end=\"3.45s\">\n            It seems a paradox, does it not,\n          </p>\n          <p xml:id=\"subtitle2\" begin=\"5.0s\" end=\"10.0s\">\n            that the image formed on<br/>\n            the Retina should be inverted?\n          </p>\n        </div>\n      </body>\n    </tt>\n\nTranscript ::\n\n    <?xml version=\"1.0\" encoding=\"utf-8\" ?>\n    <transcript>\n        <text start=\"10\" dur=\"2\">Hi, I&amp;#39;m Emily from Nomensa</text>\n        <text start=\"12\" dur=\"3\">and today I&amp;#39;m going to be talking about the order of content on your pages.</text>\n        <text start=\"16\" dur=\"6\">Making sure the content on your web pages is presented logically is a really important part of web accessibility.</text>\n        <text start=\"23\" dur=\"2\">Page content should be ordered so it makes sense</text>\n    </transcript>\n\n\nMicrosoft SAMI (SAMI, SMI)::\n\n    <SAMI>\n    <Head>\n       <Title>President John F. Kennedy Speech</Title>\n       <SAMIParam>\n          Copyright {(C)Copyright 1997, Microsoft Corporation}\n          Media {JF Kennedy.wav}\n          Metrics {time:ms; duration: 73000;}\n          Spec {MSFT:1.0;}\n       </SAMIParam>\n    </Head>\n    \n    <Body>\n       <SYNC Start=0>\n          <P Class=ENUSCC ID=Source>Pres. John F. Kennedy\n       <SYNC Start=10>\n          <P Class=ENUSCC>Let the word go forth,\n             from this time and place to friend and foe\n             alike that the torch\n    </Body>\n    </SAMI>\n\n\nCredits\n=======\n\nCompanies\n---------\n\n|cirb|_ CIRB / CIBG\n\n* `Contact CIRB <mailto:irisline@irisnet.be>`_\n\n|makinacom|_\n\n* `Planet Makina Corpus <http://www.makina-corpus.org>`_\n* `Contact Makina Corpus <mailto:python@makina-corpus.org>`_\n\nAuthors\n\n- JeanMichel FRANCOIS aka toutpt <toutpt@gmail.com>\n\n.. Contributors\n\n.. |cirb| image:: http://www.cirb.irisnet.be/logo.jpg\n.. _cirb: http://cirb.irisnet.be\n.. |makinacom| image:: http://depot.makina-corpus.org/public/logo.gif\n.. _makinacom:  http://www.makina-corpus.com\n\nChangelog\n=========\n\n1.2.1 (2012-08-07)\n------------------\n\n- force rawcontent to be unicode\n\n\n1.2 (2012-08-06)\n----------------\n\n- add support for time format like start=\"1.8\" in transcript\n- add youtube download captions: captionstransformer.youtube.get_captions &\n  get_reader\n\n\n1.1 (2012-08-05)\n----------------\n\n- add extension and mimetype info into REGISTRY\n- add id info into REGISTRY\n\n1.0 (2012-07-23)\n----------------\n\n- Initial release", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/toutpt/captionstranformer", "keywords": "caption subtitle", "license": "GPL", "maintainer": null, "maintainer_email": null, "name": "captionstransformer", "package_url": "https://pypi.org/project/captionstransformer/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/captionstransformer/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/toutpt/captionstranformer"}, "release_url": "https://pypi.org/project/captionstransformer/1.2.1/", "requires_dist": null, "requires_python": null, "summary": "A set of tools (API + script) to read, write and transform captions from/to many formats", "version": "1.2.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"introduction\">\n<h2>Introduction</h2>\n<p>This package is a set of tools to transform captions from one format to another.\nYou will find Writer and Reader for each format and a script if you want\nto use it in command line.</p>\n<p>Supported Format:</p>\n<ul>\n<li>sbv Reader and Writer</li>\n<li>srt Reader and Writer</li>\n<li>ttml Reader and Writer</li>\n<li>transcript Reader and Writer</li>\n</ul>\n</div>\n<div id=\"how-to-use-api\">\n<h2>How to use (API)</h2>\n<p>You can read the provided unittest to have complete examples:</p>\n<pre>from captionstransformer.sbv import Reader\nfrom captionstransformer.ttml import Writer\nfrom StringIO import StringIO\ntest_content = StringIO(u\"\"\"\n0:00:03.490,0:00:07.430\n&gt;&gt; FISHER: All right. So, let's begin.\nThis session is: Going Social\n\n0:00:07.430,0:00:11.600\nwith the YouTube APIs. I am\nJeff Fisher,\n\n0:00:11.600,0:00:14.009\nand this is Johann Hartmann,\nwe're presenting today.\n\n0:00:14.009,0:00:15.889\n[pause]\n\"\"\")\nreader = Reader(test_content)\n\ncaptions = reader.read()\nlen(captions) == 4\nfirst = captions[0]\ntype(first.text) == unicode\nfirst.text == u\"&gt;&gt; FISHER: All right. So, let's begin.\\nThis session is: Going Social\\n\"\n\n# next get a writer\nfilelike = StringIO()\nwriter = Writer(filelike)\nwriter.set_captions(captions)\ntext = writer.captions_to_text()\ntext.startswith(u\"\"\"&lt;tt xml:lang=\"\" xmlns=\"http://www.w3.org/ns/ttml\"&gt;&lt;body&gt;&lt;div&gt;\"\"\")\nwriter.write()\nwriter.close()\n</pre>\n</div>\n<div id=\"about-formats\">\n<h2>About Formats</h2>\n<p>This quite hard to find simple documentation about existing caption format.\nHere is a set of existing named caption format:</p>\n<p>SubViewer (SUB):</p>\n<pre>00:04:35.03,00:04:38.82\nHello guys... please sit down...\n\n00:05:00.19,00:05:03.47\nM. Franklin,[br]are you crazy?\n</pre>\n<p>Youtube (SBV):</p>\n<pre>0:00:03.490,0:00:07.430\nFISHER: All right. So, let's begin.\nThis session is: Going Social\n\n0:00:07.430,0:00:11.600\nwith the YouTube APIs. I am\nJeff Fisher,\n\n0:00:11.600,0:00:14.009\nand this is Johann Hartmann,\nwe're presenting today.\n\n0:00:14.009,0:00:15.889\n[pause]\n</pre>\n<p>SubRip (SRT):</p>\n<pre>1\n00:00:03,490 --&gt; 00:00:07,430\nFISHER: All right. So, let's begin.\nThis session is: Going Social\n\n00:00:07,430 --&gt; 00:00:11,600\nwith the YouTube APIs. I am\nJeff Fisher,\n\n2\n00:00:11,600 --&gt; 00:00:14,009\nand this is Johann Hartmann,\nwe're presenting today.\n\n3\n00:00:14,009 --&gt; 00:00:15,889\n[pause]\n</pre>\n<p>Timed Text Markup Language (TTML):</p>\n<pre>&lt;tt xml:lang=\"\" xmlns=\"http://www.w3.org/ns/ttml\"&gt;\n  &lt;body region=\"subtitleArea\"&gt;\n    &lt;div&gt;\n      &lt;p xml:id=\"subtitle1\" begin=\"0.76s\" end=\"3.45s\"&gt;\n        It seems a paradox, does it not,\n      &lt;/p&gt;\n      &lt;p xml:id=\"subtitle2\" begin=\"5.0s\" end=\"10.0s\"&gt;\n        that the image formed on&lt;br/&gt;\n        the Retina should be inverted?\n      &lt;/p&gt;\n    &lt;/div&gt;\n  &lt;/body&gt;\n&lt;/tt&gt;\n</pre>\n<p>Transcript</p>\n<pre>&lt;?xml version=\"1.0\" encoding=\"utf-8\" ?&gt;\n&lt;transcript&gt;\n    &lt;text start=\"10\" dur=\"2\"&gt;Hi, I&amp;amp;#39;m Emily from Nomensa&lt;/text&gt;\n    &lt;text start=\"12\" dur=\"3\"&gt;and today I&amp;amp;#39;m going to be talking about the order of content on your pages.&lt;/text&gt;\n    &lt;text start=\"16\" dur=\"6\"&gt;Making sure the content on your web pages is presented logically is a really important part of web accessibility.&lt;/text&gt;\n    &lt;text start=\"23\" dur=\"2\"&gt;Page content should be ordered so it makes sense&lt;/text&gt;\n&lt;/transcript&gt;\n</pre>\n<p>Microsoft SAMI (SAMI, SMI):</p>\n<pre>&lt;SAMI&gt;\n&lt;Head&gt;\n   &lt;Title&gt;President John F. Kennedy Speech&lt;/Title&gt;\n   &lt;SAMIParam&gt;\n      Copyright {(C)Copyright 1997, Microsoft Corporation}\n      Media {JF Kennedy.wav}\n      Metrics {time:ms; duration: 73000;}\n      Spec {MSFT:1.0;}\n   &lt;/SAMIParam&gt;\n&lt;/Head&gt;\n\n&lt;Body&gt;\n   &lt;SYNC Start=0&gt;\n      &lt;P Class=ENUSCC ID=Source&gt;Pres. John F. Kennedy\n   &lt;SYNC Start=10&gt;\n      &lt;P Class=ENUSCC&gt;Let the word go forth,\n         from this time and place to friend and foe\n         alike that the torch\n&lt;/Body&gt;\n&lt;/SAMI&gt;\n</pre>\n</div>\n<div id=\"credits\">\n<h2>Credits</h2>\n<h2 id=\"companies\"><span class=\"section-subtitle\">Companies</span></h2>\n<p><a href=\"http://cirb.irisnet.be\" rel=\"nofollow\"><img alt=\"cirb\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6651164bd1918054f19257cd394a61dba59aa951/687474703a2f2f7777772e636972622e697269736e65742e62652f6c6f676f2e6a7067\"></a> CIRB / CIBG</p>\n<ul>\n<li><a href=\"mailto:irisline%40irisnet.be\">Contact CIRB</a></li>\n</ul>\n<p><a href=\"http://www.makina-corpus.com\" rel=\"nofollow\"><img alt=\"makinacom\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2a7ff2c6fc5ab8cd2f425946f19dbfbf0aa4c1d7/687474703a2f2f6465706f742e6d616b696e612d636f727075732e6f72672f7075626c69632f6c6f676f2e676966\"></a></p>\n<ul>\n<li><a href=\"http://www.makina-corpus.org\" rel=\"nofollow\">Planet Makina Corpus</a></li>\n<li><a href=\"mailto:python%40makina-corpus.org\">Contact Makina Corpus</a></li>\n</ul>\n<p>Authors</p>\n<ul>\n<li>JeanMichel FRANCOIS aka toutpt &lt;<a href=\"mailto:toutpt%40gmail.com\">toutpt<span>@</span>gmail<span>.</span>com</a>&gt;</li>\n</ul>\n</div>\n<div id=\"changelog\">\n<h2>Changelog</h2>\n<div id=\"id1\">\n<h3>1.2.1 (2012-08-07)</h3>\n<ul>\n<li>force rawcontent to be unicode</li>\n</ul>\n</div>\n<div id=\"id2\">\n<h3>1.2 (2012-08-06)</h3>\n<ul>\n<li>add support for time format like start=\u201d1.8\u201d in transcript</li>\n<li>add youtube download captions: captionstransformer.youtube.get_captions &amp;\nget_reader</li>\n</ul>\n</div>\n<div id=\"id3\">\n<h3>1.1 (2012-08-05)</h3>\n<ul>\n<li>add extension and mimetype info into REGISTRY</li>\n<li>add id info into REGISTRY</li>\n</ul>\n</div>\n<div id=\"id4\">\n<h3>1.0 (2012-07-23)</h3>\n<ul>\n<li>Initial release</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 653489, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "1c3e327dd76808f398b878072df0c77c", "sha256": "91d80cf862ce8e71a763255271182901c9eac6fdda27774d8c5e1ed3521b3947"}, "downloads": -1, "filename": "captionstransformer-1.0.zip", "has_sig": false, "md5_digest": "1c3e327dd76808f398b878072df0c77c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 38432, "upload_time": "2012-07-23T15:43:43", "upload_time_iso_8601": "2012-07-23T15:43:43.094281Z", "url": "https://files.pythonhosted.org/packages/1e/53/c0ae3d310ecc7637880bda523c2d81d94751be334f843f05de2d010dc085/captionstransformer-1.0.zip", "yanked": false}], "1.1": [{"comment_text": "", "digests": {"md5": "a43c4d1845d4d4bd05d0fbdec02bafd5", "sha256": "2eb2815784f4b07eb7b6c4e3b82a4a4ffd9fe23bbd41864dee387f9752321567"}, "downloads": -1, "filename": "captionstransformer-1.1.zip", "has_sig": false, "md5_digest": "a43c4d1845d4d4bd05d0fbdec02bafd5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 38828, "upload_time": "2012-08-05T23:32:19", "upload_time_iso_8601": "2012-08-05T23:32:19.606154Z", "url": "https://files.pythonhosted.org/packages/d5/7c/888cba4bd9ce158f360fc077dcb3d63431758c1b2896824723d186ecc8df/captionstransformer-1.1.zip", "yanked": false}], "1.2": [{"comment_text": "", "digests": {"md5": "ee096f9fcbbd2cd7bd541522955b736f", "sha256": "569f6e3c1d3315b9ba301d3ad0cc451bd1d8ce072e157702aa16d8007848efbe"}, "downloads": -1, "filename": "captionstransformer-1.2.zip", "has_sig": false, "md5_digest": "ee096f9fcbbd2cd7bd541522955b736f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 41243, "upload_time": "2012-08-06T18:10:02", "upload_time_iso_8601": "2012-08-06T18:10:02.616859Z", "url": "https://files.pythonhosted.org/packages/0a/83/d5b237f73f0068cdcaf92e56ff20dfcb620b665bd656eca3c707a8beb051/captionstransformer-1.2.zip", "yanked": false}], "1.2.1": [{"comment_text": "", "digests": {"md5": "b5e30a19435c23dadbebe0ef24367cb3", "sha256": "6f5e0eb7ba49f0286dd183cbc082c5f2bffe790996ef3e749dbac5d28f8d86d8"}, "downloads": -1, "filename": "captionstransformer-1.2.1.zip", "has_sig": false, "md5_digest": "b5e30a19435c23dadbebe0ef24367cb3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 41499, "upload_time": "2012-08-07T10:47:40", "upload_time_iso_8601": "2012-08-07T10:47:40.225212Z", "url": "https://files.pythonhosted.org/packages/3c/54/29c698d1690d7f35f387bba36bc135d5cf2dfce1c472b5d491e4529b3147/captionstransformer-1.2.1.zip", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b5e30a19435c23dadbebe0ef24367cb3", "sha256": "6f5e0eb7ba49f0286dd183cbc082c5f2bffe790996ef3e749dbac5d28f8d86d8"}, "downloads": -1, "filename": "captionstransformer-1.2.1.zip", "has_sig": false, "md5_digest": "b5e30a19435c23dadbebe0ef24367cb3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 41499, "upload_time": "2012-08-07T10:47:40", "upload_time_iso_8601": "2012-08-07T10:47:40.225212Z", "url": "https://files.pythonhosted.org/packages/3c/54/29c698d1690d7f35f387bba36bc135d5cf2dfce1c472b5d491e4529b3147/captionstransformer-1.2.1.zip", "yanked": false}], "timestamp": "Thu May  7 22:35:27 2020"}