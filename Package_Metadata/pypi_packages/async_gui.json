{"info": {"author": "Roman Haritonov", "author_email": "reclosedev@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Programming Language :: Python", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "async_gui\n---------------\n\n``async_gui`` is a library aimed to make use of threads in GUI applications simpler.\nIt's inspired by PyCon talk\n`Using futures for async GUI programming in Python 3.3 <http://pyvideo.org/video/1762/using-futures-for-async-gui-programming-in-python>`_\nand `tornado <https://github.com/facebook/tornado>`_ ``@gen.engine`` implementation.\n\nMost of GUI toolkits don't allow you to access graphical elements from non-GUI thread.\nPython 3.2+ has nice new feature ``concurrent.futures``, but we can't just\nwait for result from future and callbacks are not very handy.\n\nCombination of `Coroutines via Enhanced Generators (PEP-342) <http://www.python.org/dev/peps/pep-0342/>`_\nand ``futures`` creates a rich and easy to use asynchronous programming model\nwhich can be used for creating highly responsive GUI applications.\n\n\nExample\n-------\n\nDemo of button click handler:\n\n.. code-block:: python\n\n    @engine.async\n    def on_button_click(self, *args):\n        self.status_label.setText(\"Downloading image...\")\n        # Run single task in separate thread\n        image_data = yield Task(self.load_url,\n                                \"http://www.google.com/images/srpr/logo4w.png\")\n        pixmap = QtGui.QPixmap.fromImage(QtGui.QImage.fromData(image_data))\n        self.image_label.setPixmap(pixmap)\n        self.status_label.setText(\"Downloading pages...\")\n        urls = ['http://www.google.com',\n                'http://www.yandex.ru',\n                'http://www.python.org']\n        # Run multiple task simultaneously in thread pool\n        pages = yield [Task(self.load_url, url) for url in urls]\n        self.status_label.setText(\"Done\")\n        avg_size = sum(map(len, pages)) / len(pages)\n        self.result_label.setText(\"Average page size: %s\" % avg_size)\n\n\nTasks yielded from ``on_button_click()`` executed in thread pool, but\nGUI updates done in the GUI thread.\nFor CPU-bound applications there is also ability to run tasks in pool of\nprocesses.\n\nSee `full example <https://github.com/reclosedev/async_gui/blob/master/examples/qt_app.py>`_\nin `examples <https://github.com/reclosedev/async_gui/tree/master/examples>`_ directory.\n\n\nFeatures\n--------\n\n- Python 2.7+ (`futures <https://pypi.python.org/pypi/futures>`_ required),\n  Python 3+ support\n\n- PyQt4/PySide, Tk, Wx, Gtk GUI toolkits support. Easy to add another\n\n- Can execute tasks in Thread, Process, Greenlet (`gevent <http://www.gevent.org/>`_ required)\n\n- Possibility to run multiple tasks at the same time\n\n- Straightforward exception handling\n\n- Full test coverage\n\nInstallation\n------------\n\nUsing pip_::\n\n    $ pip install async_gui\n\nOr download, unpack and::\n\n    $ python setup.py install\n\n\nTo run tests use::\n\n    $ python setup.py test\n\n.. _pip: http://www.pip-installer.org/en/latest/installing.html\n\nLinks\n-----\n\n- **Documentation** at `readthedocs.org <https://async_gui.readthedocs.org/en/latest/>`_\n\n- **Source code and issue tracking** at `GitHub <https://github.com/reclosedev/async_gui>`_.\n\n\n\n.. :changelog:\n\nHistory\n-------\n\n0.2.0 (2013-0x-xx)\n+++++++++++++++++++\n\n* MultiTask can return generator of ready tasks instead waiting for all done\n\n\n0.1.0 (2013-04-06)\n+++++++++++++++++++\n\n* initial PyPI release", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/reclosedev/async_gui", "keywords": "GUI,thread,coroutine,futures,async", "license": "BSD License", "maintainer": null, "maintainer_email": null, "name": "async_gui", "package_url": "https://pypi.org/project/async_gui/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/async_gui/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/reclosedev/async_gui"}, "release_url": "https://pypi.org/project/async_gui/0.1.1/", "requires_dist": null, "requires_python": null, "summary": "Easy threading and multiprocessing for GUI applications", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"async-gui\">\n<h2>async_gui</h2>\n<p><tt>async_gui</tt> is a library aimed to make use of threads in GUI applications simpler.\nIt\u2019s inspired by PyCon talk\n<a href=\"http://pyvideo.org/video/1762/using-futures-for-async-gui-programming-in-python\" rel=\"nofollow\">Using futures for async GUI programming in Python 3.3</a>\nand <a href=\"https://github.com/facebook/tornado\" rel=\"nofollow\">tornado</a> <tt>@gen.engine</tt> implementation.</p>\n<p>Most of GUI toolkits don\u2019t allow you to access graphical elements from non-GUI thread.\nPython 3.2+ has nice new feature <tt>concurrent.futures</tt>, but we can\u2019t just\nwait for result from future and callbacks are not very handy.</p>\n<p>Combination of <a href=\"http://www.python.org/dev/peps/pep-0342/\" rel=\"nofollow\">Coroutines via Enhanced Generators (PEP-342)</a>\nand <tt>futures</tt> creates a rich and easy to use asynchronous programming model\nwhich can be used for creating highly responsive GUI applications.</p>\n</div>\n<div id=\"example\">\n<h2>Example</h2>\n<p>Demo of button click handler:</p>\n<pre><span class=\"nd\">@engine</span><span class=\"o\">.</span><span class=\"k\">async</span>\n<span class=\"k\">def</span> <span class=\"nf\">on_button_click</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">):</span>\n    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">status_label</span><span class=\"o\">.</span><span class=\"n\">setText</span><span class=\"p\">(</span><span class=\"s2\">\"Downloading image...\"</span><span class=\"p\">)</span>\n    <span class=\"c1\"># Run single task in separate thread</span>\n    <span class=\"n\">image_data</span> <span class=\"o\">=</span> <span class=\"k\">yield</span> <span class=\"n\">Task</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">load_url</span><span class=\"p\">,</span>\n                            <span class=\"s2\">\"http://www.google.com/images/srpr/logo4w.png\"</span><span class=\"p\">)</span>\n    <span class=\"n\">pixmap</span> <span class=\"o\">=</span> <span class=\"n\">QtGui</span><span class=\"o\">.</span><span class=\"n\">QPixmap</span><span class=\"o\">.</span><span class=\"n\">fromImage</span><span class=\"p\">(</span><span class=\"n\">QtGui</span><span class=\"o\">.</span><span class=\"n\">QImage</span><span class=\"o\">.</span><span class=\"n\">fromData</span><span class=\"p\">(</span><span class=\"n\">image_data</span><span class=\"p\">))</span>\n    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">image_label</span><span class=\"o\">.</span><span class=\"n\">setPixmap</span><span class=\"p\">(</span><span class=\"n\">pixmap</span><span class=\"p\">)</span>\n    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">status_label</span><span class=\"o\">.</span><span class=\"n\">setText</span><span class=\"p\">(</span><span class=\"s2\">\"Downloading pages...\"</span><span class=\"p\">)</span>\n    <span class=\"n\">urls</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'http://www.google.com'</span><span class=\"p\">,</span>\n            <span class=\"s1\">'http://www.yandex.ru'</span><span class=\"p\">,</span>\n            <span class=\"s1\">'http://www.python.org'</span><span class=\"p\">]</span>\n    <span class=\"c1\"># Run multiple task simultaneously in thread pool</span>\n    <span class=\"n\">pages</span> <span class=\"o\">=</span> <span class=\"k\">yield</span> <span class=\"p\">[</span><span class=\"n\">Task</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">load_url</span><span class=\"p\">,</span> <span class=\"n\">url</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">url</span> <span class=\"ow\">in</span> <span class=\"n\">urls</span><span class=\"p\">]</span>\n    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">status_label</span><span class=\"o\">.</span><span class=\"n\">setText</span><span class=\"p\">(</span><span class=\"s2\">\"Done\"</span><span class=\"p\">)</span>\n    <span class=\"n\">avg_size</span> <span class=\"o\">=</span> <span class=\"nb\">sum</span><span class=\"p\">(</span><span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">,</span> <span class=\"n\">pages</span><span class=\"p\">))</span> <span class=\"o\">/</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">pages</span><span class=\"p\">)</span>\n    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">result_label</span><span class=\"o\">.</span><span class=\"n\">setText</span><span class=\"p\">(</span><span class=\"s2\">\"Average page size: </span><span class=\"si\">%s</span><span class=\"s2\">\"</span> <span class=\"o\">%</span> <span class=\"n\">avg_size</span><span class=\"p\">)</span>\n</pre>\n<p>Tasks yielded from <tt>on_button_click()</tt> executed in thread pool, but\nGUI updates done in the GUI thread.\nFor CPU-bound applications there is also ability to run tasks in pool of\nprocesses.</p>\n<p>See <a href=\"https://github.com/reclosedev/async_gui/blob/master/examples/qt_app.py\" rel=\"nofollow\">full example</a>\nin <a href=\"https://github.com/reclosedev/async_gui/tree/master/examples\" rel=\"nofollow\">examples</a> directory.</p>\n</div>\n<div id=\"features\">\n<h2>Features</h2>\n<ul>\n<li>Python 2.7+ (<a href=\"https://pypi.python.org/pypi/futures\" rel=\"nofollow\">futures</a> required),\nPython 3+ support</li>\n<li>PyQt4/PySide, Tk, Wx, Gtk GUI toolkits support. Easy to add another</li>\n<li>Can execute tasks in Thread, Process, Greenlet (<a href=\"http://www.gevent.org/\" rel=\"nofollow\">gevent</a> required)</li>\n<li>Possibility to run multiple tasks at the same time</li>\n<li>Straightforward exception handling</li>\n<li>Full test coverage</li>\n</ul>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Using <a href=\"http://www.pip-installer.org/en/latest/installing.html\" rel=\"nofollow\">pip</a>:</p>\n<pre>$ pip install async_gui\n</pre>\n<p>Or download, unpack and:</p>\n<pre>$ python setup.py install\n</pre>\n<p>To run tests use:</p>\n<pre>$ python setup.py test\n</pre>\n</div>\n<div id=\"links\">\n<h2>Links</h2>\n<ul>\n<li><strong>Documentation</strong> at <a href=\"https://async_gui.readthedocs.org/en/latest/\" rel=\"nofollow\">readthedocs.org</a></li>\n<li><strong>Source code and issue tracking</strong> at <a href=\"https://github.com/reclosedev/async_gui\" rel=\"nofollow\">GitHub</a>.</li>\n</ul>\n</div>\n<div id=\"history\">\n<h2>History</h2>\n<div id=\"x-xx\">\n<h3>0.2.0 (2013-0x-xx)</h3>\n<ul>\n<li>MultiTask can return generator of ready tasks instead waiting for all done</li>\n</ul>\n</div>\n<div id=\"id1\">\n<h3>0.1.0 (2013-04-06)</h3>\n<ul>\n<li>initial PyPI release</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 1158723, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "aa6fea83623eac1730a571112abbcb2d", "sha256": "8903c905d238747d458c77feac93a311fe97926fb9f5c1a17607b5180c883aaf"}, "downloads": -1, "filename": "async_gui-0.1.0.tar.gz", "has_sig": false, "md5_digest": "aa6fea83623eac1730a571112abbcb2d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20464, "upload_time": "2013-04-06T13:18:57", "upload_time_iso_8601": "2013-04-06T13:18:57.788942Z", "url": "https://files.pythonhosted.org/packages/e7/9a/acd4e1803841e2bb11172da37884a54ea54d96636303c7c99f35e510c1c0/async_gui-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "ffcdbda070243f3bf16183d9a92a65e1", "sha256": "1584c18f4363bb48a0d8ced1a83387e5b5e7a3779ead018258938560a9317af4"}, "downloads": -1, "filename": "async_gui-0.1.1.tar.gz", "has_sig": false, "md5_digest": "ffcdbda070243f3bf16183d9a92a65e1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22018, "upload_time": "2014-07-15T17:24:12", "upload_time_iso_8601": "2014-07-15T17:24:12.745913Z", "url": "https://files.pythonhosted.org/packages/65/6a/7ed68f2a3e49c6c616482a3f5024c1f8568000a19bc9c656b5a38747c2a6/async_gui-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ffcdbda070243f3bf16183d9a92a65e1", "sha256": "1584c18f4363bb48a0d8ced1a83387e5b5e7a3779ead018258938560a9317af4"}, "downloads": -1, "filename": "async_gui-0.1.1.tar.gz", "has_sig": false, "md5_digest": "ffcdbda070243f3bf16183d9a92a65e1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22018, "upload_time": "2014-07-15T17:24:12", "upload_time_iso_8601": "2014-07-15T17:24:12.745913Z", "url": "https://files.pythonhosted.org/packages/65/6a/7ed68f2a3e49c6c616482a3f5024c1f8568000a19bc9c656b5a38747c2a6/async_gui-0.1.1.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:16:45 2020"}