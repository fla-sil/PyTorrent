{"info": {"author": "Ying-Peng Tang, Guo-Xiang Li, Sheng-Jun Huang", "author_email": "tangyp@nuaa.edu.cn, GuoXiangLi@nuaa.edu.cn, huangsj@nuaa.edu.cn", "bugtrack_url": null, "classifiers": [], "description": "# ALiPy: Active Learning in Python\n\nAuthors: Ying-Peng Tang, Guo-Xiang Li, [Sheng-Jun Huang](http://parnec.nuaa.edu.cn/huangsj)\n\nOnline document: [http://parnec.nuaa.edu.cn/huangsj/alipy/](http://parnec.nuaa.edu.cn/huangsj/alipy/)\n\nOffline document: [http://parnec.nuaa.edu.cn/huangsj/alipy/offline_ver/alipy_doc_v120.zip](http://parnec.nuaa.edu.cn/huangsj/alipy/offline_ver/alipy_doc_v120.zip)\n\n## Introduction\n\nALiPy\u662f\u4e00\u4e2a\u57fa\u4e8ePython\u5b9e\u73b0\u7684\u4e3b\u52a8\u5b66\u4e60\u5de5\u5177\u5305\uff0c\u5185\u7f6e20\u4f59\u79cd\u4e3b\u52a8\u5b66\u4e60\u7b97\u6cd5\uff0c\u5e76\u63d0\u4f9b\u5305\u62ec\u6570\u636e\u5904\u7406\u3001\u7ed3\u679c\u53ef\u89c6\u5316\u7b49\u5de5\u5177\u3002ALiPy\u6839\u636e\u4e3b\u52a8\u5b66\u4e60\u6846\u67b6\u7684\u4e0d\u540c\u90e8\u4ef6\u63d0\u4f9b\u4e86\u82e5\u5e72\u72ec\u7acb\u7684\u5de5\u5177\u7c7b\uff0c\u8fd9\u6837\u4e00\u65b9\u9762\u53ef\u4ee5\u65b9\u4fbf\u5730\u652f\u6301\u4e0d\u540c\u4e3b\u52a8\u5b66\u4e60\u573a\u666f\uff0c\u53e6\u4e00\u65b9\u9762\u53ef\u4ee5\u4f7f\u7528\u6237\u81ea\u7531\u5730\u7ec4\u7ec7\u81ea\u5df1\u7684\u9879\u76ee\uff0c\u7528\u6237\u53ef\u4ee5\u4e0d\u5fc5\u7ee7\u627f\u4efb\u4f55\u63a5\u53e3\u6765\u5b9e\u73b0\u81ea\u5df1\u7684\u7b97\u6cd5\u4e0e\u66ff\u6362\u9879\u76ee\u4e2d\u7684\u90e8\u4ef6\u3002\u6b64\u5916\uff0cALiPy\u4e0d\u4ec5\u652f\u6301\u591a\u79cd\u4e0d\u540c\u7684\u4e3b\u52a8\u5b66\u4e60\u573a\u666f\uff0c\u5982\u6807\u6ce8\u4ee3\u4ef7\u654f\u611f\uff0c\u566a\u58f0\u6807\u6ce8\u8005\uff0c\u591a\u6807\u8bb0\u67e5\u8be2\u7b49\u3002\u8be6\u7ec6\u7684\u4ecb\u7ecd\u4e0e\u6587\u6863\u8bf7\u53c2\u8003\u5de5\u5177\u5305\u7684[\u5b98\u65b9\u7f51\u7ad9](http://parnec.nuaa.edu.cn/huangsj/alipy/)\u3002\n\nALiPy provides a module based implementation of active learning framework, which allows users to conveniently evaluate, compare and analyze the performance of active learning methods. It implementations more than 20 algorithms and also supports users to easily implement their own approaches under different settings.\n\nFeatures of alipy include:\n\n* Model independent\n\t- There is no limitation to the classification model. One can use SVM in sklearn or deep model in tensorflow as you need.\n\n* Module independent\n\t- One can freely modify one or more modules of the toolbox without affection to the others.\n\n* Implement your own algorithm without inheriting anything\n\t- There are few limitations of the user-defined functions, such as the parameters or names.\n\n* Variant Settings supported\n\t- Noisy oracles, Multi-label, Cost effective, Feature querying, etc.\n\n* Powerful tools\n\t- Save intermediate results of each iteration AND recover the program from any breakpoints.\n\t- Parallel the k-folds experiment.\n\t- Gathering, process and visualize the experiment results.\n\t- Provide 25 algorithms.\n\t- Support 7 different settings.\n\nFor more detailed introduction and tutorial, please refer to the [website of alipy](http://parnec.nuaa.edu.cn/huangsj/alipy).\n\n## Setup\n\nYou can get alipy simply by:\n\n```\npip install alipy\n```\n\nOr clone alipy source code to your local directory and build from source:\n\n```\ncd ALiPy\npython setup.py install\n```\n\nThe dependencies of alipy are:\n1. Python dependency\n\n```\npython >= 3.4\n```\n\n2. Basic Dependencies\n\n```\nnumpy\nscipy\nscikit-learn\nmatplotlib\nprettytable\n```\n\n3. Optional dependencies\n\n```\ncvxpy\n```\n\nNote that, the basic dependencies must be installed, and the optional dependencies are required only if users need to involke KDD'13 BMDR and AAAI'19 SPAL methods in alipy. (cvxpy will not be installed through `pip install alipy`.)\n\n## Tools in alipy\n\nThe tool classes provided by alipy cover as many components in active learning as possible. It aims to support experiment implementation with miscellaneous tool functions. These tools are designed in a low coupling way in order to let users to program the experiment project at their own customs.\n\n* Using `alipy.data_manipulate` to preprocess and split your data sets for experiments.\n\n* Using `alipy.query_strategy` to invoke traditional and state-of-the-art methods.\n\n* Using `alipy.index.IndexCollection` to manage your labeled indexes and unlabeled indexes.\n\n* Using `alipy.metric` to calculate your model performances.\n\n* Using `alipy.experiment.state` and `alipy.experiment.state_io` to save the intermediate results after each query and recover the program from the breakpoints.\n\n* Using `alipy.experiment.stopping_criteria` to get some example stopping criteria.\n\n* Using `alipy.experiment.experiment_analyser` to gathering, process and visualize your experiment results.\n\n* Using `alipy.oracle` to implement clean, noisy, cost-sensitive oracles.\n\n* Using `alipy.utils.multi_thread` to parallel your k-fold experiment.\n\n### The implemented query strategies\n\nALiPy provide several commonly used strategies for now, and new algorithms will continue to be added in subsequent updates.\n\n* AL with Instance Selection: Uncertainty (SIGIR 1994), Graph Density (CVPR 2012), QUIRE (TPAMI 2014), SPAL (AAAI 2019), Query By Committee (ICML 1998), Random, BMDR (KDD 2013), LAL (NIPS 2017), Expected Error Reduction (ICML 2001)\n\n* AL for Multi-Label Data: AUDI (ICDM 2013) , QUIRE (TPAMI 2014) , Random, MMC (KDD 2009), Adaptive (IJCAI 2013)\n\n* AL by Querying Features: AFASMC (KDD 2018) , Stability (ICDM 2013) , Random\n\n* AL with Different Costs: HALC (IJCAI 2018) , Random , Cost performance\n\n* AL with Noisy Oracles: CEAL (IJCAI 2017) , IEthresh (KDD 2009) , All, Random\n\n* AL with Novel Query Types: AURO (IJCAI 2015)\n\n* AL for Large Scale Tasks: Subsampling\n\n### Implement your own algorithm\n\nIn alipy, there is no limitation for your implementation. All you need is ensure the returned selected index is a subset of unlabeled indexes.\n\n```\nselect_ind = my_query(unlab_ind, **my_parameters)\nassert set(select_ind) < set(unlab_ind)\n```\n\n## Usage\n\nThere are 2 ways to use alipy. For a high-level encapsulation, you can use alipy.experiment.AlExperiment class. Note that, AlExperiment only support the most commonly used scenario - query all labels of an instance. You can run the experiments with only a few lines of codes by this class. All you need is to specify the various options, the query process will be run in multi-threaded. Note that, if you want to implement your own algorithm with this class, there are some constraints have to be satisfied, please see api reference for this class.\n\n```\nfrom sklearn.datasets import load_iris\nfrom alipy.experiment.al_experiment import AlExperiment\n\nX, y = load_iris(return_X_y=True)\nal = AlExperiment(X, y, stopping_criteria='num_of_queries', stopping_value=50,)\nal.split_AL()\nal.set_query_strategy(strategy=\"QueryInstanceUncertainty\", measure='least_confident')\nal.set_performance_metric('accuracy_score')\nal.start_query(multi_thread=True)\nal.plot_learning_curve()\n```\n\nTo customize your own active learning experiment, it is recommended to follow the examples provided in the ALiPy/examples and tutorial in [alipy main page](http://parnec.nuaa.edu.cn/huangsj/alipy), pick the tools according to your usage. In this way, on one hand, the logic of your program is absolutely clear to you and thus easy to debug. On the other hand, some parts in your active learning process can be substituted by your own implementation for special usage.\n\n```\nimport copy\nfrom sklearn.datasets import load_iris\nfrom alipy import ToolBox\n\nX, y = load_iris(return_X_y=True)\nalibox = ToolBox(X=X, y=y, query_type='AllLabels', saving_path='.')\n\n# Split data\nalibox.split_AL(test_ratio=0.3, initial_label_rate=0.1, split_count=10)\n\n# Use the default Logistic Regression classifier\nmodel = alibox.get_default_model()\n\n# The cost budget is 50 times querying\nstopping_criterion = alibox.get_stopping_criterion('num_of_queries', 50)\n\n# Use pre-defined strategy\nQBCStrategy = alibox.get_query_strategy(strategy_name='QueryInstanceQBC')\nQBC_result = []\n\nfor round in range(10):\n    # Get the data split of one fold experiment\n    train_idx, test_idx, label_ind, unlab_ind = alibox.get_split(round)\n    # Get intermediate results saver for one fold experiment\n    saver = alibox.get_stateio(round)\n\n    while not stopping_criterion.is_stop():\n        # Select a subset of Uind according to the query strategy\n        # Passing model=None to use the default model for evaluating the committees' disagreement\n        select_ind = QBCStrategy.select(label_ind, unlab_ind, model=None, batch_size=1)\n        label_ind.update(select_ind)\n        unlab_ind.difference_update(select_ind)\n\n        # Update model and calc performance according to the model you are using\n        model.fit(X=X[label_ind.index, :], y=y[label_ind.index])\n        pred = model.predict(X[test_idx, :])\n        accuracy = alibox.calc_performance_metric(y_true=y[test_idx],\n                                                  y_pred=pred,\n                                                  performance_metric='accuracy_score')\n\n        # Save intermediate results to file\n        st = alibox.State(select_index=select_ind, performance=accuracy)\n        saver.add_state(st)\n        saver.save()\n\n        # Passing the current progress to stopping criterion object\n        stopping_criterion.update_information(saver)\n    # Reset the progress in stopping criterion object\n    stopping_criterion.reset()\n    QBC_result.append(copy.deepcopy(saver))\n\nanalyser = alibox.get_experiment_analyser(x_axis='num_of_queries')\nanalyser.add_method(method_name='QBC', method_results=QBC_result)\nprint(analyser)\nanalyser.plot_learning_curves(title='Example of AL', std_area=True)\n```\n\n## Citation\n\nPlease cite our work:\n\n```\nTang, Y.-P.; Li, G.-X.; and Huang, S.-J. 2019. ALiPy: Active learning in python. \nTechnical report, Nanjing University of Aeronautics and Astronautics. \navailable as arXiv preprint https://arxiv.org/abs/1901.03802.\n```\n\n```\n@techreport{TLHalipy,\n  author = {Ying-Peng Tang and Guo-Xiang Li and Sheng-Jun Huang},\n  title = {{ALiPy}: Active Learning in Python},\n  institution = {Nanjing University of Aeronautics and Astronautics},\n  url = {https://github.com/NUAA-AL/ALiPy},\n  note = {available as arXiv preprint \\url{https://arxiv.org/abs/1901.03802}},\n  month = jan,\n  year = 2019\n}\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/NUAA-AL/ALiPy", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "alipy", "package_url": "https://pypi.org/project/alipy/", "platform": "", "project_url": "https://pypi.org/project/alipy/", "project_urls": {"Homepage": "https://github.com/NUAA-AL/ALiPy"}, "release_url": "https://pypi.org/project/alipy/1.2.1/", "requires_dist": ["numpy", "scipy", "scikit-learn", "matplotlib", "prettytable"], "requires_python": "", "summary": "Active Learning in Python", "version": "1.2.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>ALiPy: Active Learning in Python</h1>\n<p>Authors: Ying-Peng Tang, Guo-Xiang Li, <a href=\"http://parnec.nuaa.edu.cn/huangsj\" rel=\"nofollow\">Sheng-Jun Huang</a></p>\n<p>Online document: <a href=\"http://parnec.nuaa.edu.cn/huangsj/alipy/\" rel=\"nofollow\">http://parnec.nuaa.edu.cn/huangsj/alipy/</a></p>\n<p>Offline document: <a href=\"http://parnec.nuaa.edu.cn/huangsj/alipy/offline_ver/alipy_doc_v120.zip\" rel=\"nofollow\">http://parnec.nuaa.edu.cn/huangsj/alipy/offline_ver/alipy_doc_v120.zip</a></p>\n<h2>Introduction</h2>\n<p>ALiPy\u662f\u4e00\u4e2a\u57fa\u4e8ePython\u5b9e\u73b0\u7684\u4e3b\u52a8\u5b66\u4e60\u5de5\u5177\u5305\uff0c\u5185\u7f6e20\u4f59\u79cd\u4e3b\u52a8\u5b66\u4e60\u7b97\u6cd5\uff0c\u5e76\u63d0\u4f9b\u5305\u62ec\u6570\u636e\u5904\u7406\u3001\u7ed3\u679c\u53ef\u89c6\u5316\u7b49\u5de5\u5177\u3002ALiPy\u6839\u636e\u4e3b\u52a8\u5b66\u4e60\u6846\u67b6\u7684\u4e0d\u540c\u90e8\u4ef6\u63d0\u4f9b\u4e86\u82e5\u5e72\u72ec\u7acb\u7684\u5de5\u5177\u7c7b\uff0c\u8fd9\u6837\u4e00\u65b9\u9762\u53ef\u4ee5\u65b9\u4fbf\u5730\u652f\u6301\u4e0d\u540c\u4e3b\u52a8\u5b66\u4e60\u573a\u666f\uff0c\u53e6\u4e00\u65b9\u9762\u53ef\u4ee5\u4f7f\u7528\u6237\u81ea\u7531\u5730\u7ec4\u7ec7\u81ea\u5df1\u7684\u9879\u76ee\uff0c\u7528\u6237\u53ef\u4ee5\u4e0d\u5fc5\u7ee7\u627f\u4efb\u4f55\u63a5\u53e3\u6765\u5b9e\u73b0\u81ea\u5df1\u7684\u7b97\u6cd5\u4e0e\u66ff\u6362\u9879\u76ee\u4e2d\u7684\u90e8\u4ef6\u3002\u6b64\u5916\uff0cALiPy\u4e0d\u4ec5\u652f\u6301\u591a\u79cd\u4e0d\u540c\u7684\u4e3b\u52a8\u5b66\u4e60\u573a\u666f\uff0c\u5982\u6807\u6ce8\u4ee3\u4ef7\u654f\u611f\uff0c\u566a\u58f0\u6807\u6ce8\u8005\uff0c\u591a\u6807\u8bb0\u67e5\u8be2\u7b49\u3002\u8be6\u7ec6\u7684\u4ecb\u7ecd\u4e0e\u6587\u6863\u8bf7\u53c2\u8003\u5de5\u5177\u5305\u7684<a href=\"http://parnec.nuaa.edu.cn/huangsj/alipy/\" rel=\"nofollow\">\u5b98\u65b9\u7f51\u7ad9</a>\u3002</p>\n<p>ALiPy provides a module based implementation of active learning framework, which allows users to conveniently evaluate, compare and analyze the performance of active learning methods. It implementations more than 20 algorithms and also supports users to easily implement their own approaches under different settings.</p>\n<p>Features of alipy include:</p>\n<ul>\n<li>\n<p>Model independent</p>\n<ul>\n<li>There is no limitation to the classification model. One can use SVM in sklearn or deep model in tensorflow as you need.</li>\n</ul>\n</li>\n<li>\n<p>Module independent</p>\n<ul>\n<li>One can freely modify one or more modules of the toolbox without affection to the others.</li>\n</ul>\n</li>\n<li>\n<p>Implement your own algorithm without inheriting anything</p>\n<ul>\n<li>There are few limitations of the user-defined functions, such as the parameters or names.</li>\n</ul>\n</li>\n<li>\n<p>Variant Settings supported</p>\n<ul>\n<li>Noisy oracles, Multi-label, Cost effective, Feature querying, etc.</li>\n</ul>\n</li>\n<li>\n<p>Powerful tools</p>\n<ul>\n<li>Save intermediate results of each iteration AND recover the program from any breakpoints.</li>\n<li>Parallel the k-folds experiment.</li>\n<li>Gathering, process and visualize the experiment results.</li>\n<li>Provide 25 algorithms.</li>\n<li>Support 7 different settings.</li>\n</ul>\n</li>\n</ul>\n<p>For more detailed introduction and tutorial, please refer to the <a href=\"http://parnec.nuaa.edu.cn/huangsj/alipy\" rel=\"nofollow\">website of alipy</a>.</p>\n<h2>Setup</h2>\n<p>You can get alipy simply by:</p>\n<pre><code>pip install alipy\n</code></pre>\n<p>Or clone alipy source code to your local directory and build from source:</p>\n<pre><code>cd ALiPy\npython setup.py install\n</code></pre>\n<p>The dependencies of alipy are:</p>\n<ol>\n<li>Python dependency</li>\n</ol>\n<pre><code>python &gt;= 3.4\n</code></pre>\n<ol>\n<li>Basic Dependencies</li>\n</ol>\n<pre><code>numpy\nscipy\nscikit-learn\nmatplotlib\nprettytable\n</code></pre>\n<ol>\n<li>Optional dependencies</li>\n</ol>\n<pre><code>cvxpy\n</code></pre>\n<p>Note that, the basic dependencies must be installed, and the optional dependencies are required only if users need to involke KDD'13 BMDR and AAAI'19 SPAL methods in alipy. (cvxpy will not be installed through <code>pip install alipy</code>.)</p>\n<h2>Tools in alipy</h2>\n<p>The tool classes provided by alipy cover as many components in active learning as possible. It aims to support experiment implementation with miscellaneous tool functions. These tools are designed in a low coupling way in order to let users to program the experiment project at their own customs.</p>\n<ul>\n<li>\n<p>Using <code>alipy.data_manipulate</code> to preprocess and split your data sets for experiments.</p>\n</li>\n<li>\n<p>Using <code>alipy.query_strategy</code> to invoke traditional and state-of-the-art methods.</p>\n</li>\n<li>\n<p>Using <code>alipy.index.IndexCollection</code> to manage your labeled indexes and unlabeled indexes.</p>\n</li>\n<li>\n<p>Using <code>alipy.metric</code> to calculate your model performances.</p>\n</li>\n<li>\n<p>Using <code>alipy.experiment.state</code> and <code>alipy.experiment.state_io</code> to save the intermediate results after each query and recover the program from the breakpoints.</p>\n</li>\n<li>\n<p>Using <code>alipy.experiment.stopping_criteria</code> to get some example stopping criteria.</p>\n</li>\n<li>\n<p>Using <code>alipy.experiment.experiment_analyser</code> to gathering, process and visualize your experiment results.</p>\n</li>\n<li>\n<p>Using <code>alipy.oracle</code> to implement clean, noisy, cost-sensitive oracles.</p>\n</li>\n<li>\n<p>Using <code>alipy.utils.multi_thread</code> to parallel your k-fold experiment.</p>\n</li>\n</ul>\n<h3>The implemented query strategies</h3>\n<p>ALiPy provide several commonly used strategies for now, and new algorithms will continue to be added in subsequent updates.</p>\n<ul>\n<li>\n<p>AL with Instance Selection: Uncertainty (SIGIR 1994), Graph Density (CVPR 2012), QUIRE (TPAMI 2014), SPAL (AAAI 2019), Query By Committee (ICML 1998), Random, BMDR (KDD 2013), LAL (NIPS 2017), Expected Error Reduction (ICML 2001)</p>\n</li>\n<li>\n<p>AL for Multi-Label Data: AUDI (ICDM 2013) , QUIRE (TPAMI 2014) , Random, MMC (KDD 2009), Adaptive (IJCAI 2013)</p>\n</li>\n<li>\n<p>AL by Querying Features: AFASMC (KDD 2018) , Stability (ICDM 2013) , Random</p>\n</li>\n<li>\n<p>AL with Different Costs: HALC (IJCAI 2018) , Random , Cost performance</p>\n</li>\n<li>\n<p>AL with Noisy Oracles: CEAL (IJCAI 2017) , IEthresh (KDD 2009) , All, Random</p>\n</li>\n<li>\n<p>AL with Novel Query Types: AURO (IJCAI 2015)</p>\n</li>\n<li>\n<p>AL for Large Scale Tasks: Subsampling</p>\n</li>\n</ul>\n<h3>Implement your own algorithm</h3>\n<p>In alipy, there is no limitation for your implementation. All you need is ensure the returned selected index is a subset of unlabeled indexes.</p>\n<pre><code>select_ind = my_query(unlab_ind, **my_parameters)\nassert set(select_ind) &lt; set(unlab_ind)\n</code></pre>\n<h2>Usage</h2>\n<p>There are 2 ways to use alipy. For a high-level encapsulation, you can use alipy.experiment.AlExperiment class. Note that, AlExperiment only support the most commonly used scenario - query all labels of an instance. You can run the experiments with only a few lines of codes by this class. All you need is to specify the various options, the query process will be run in multi-threaded. Note that, if you want to implement your own algorithm with this class, there are some constraints have to be satisfied, please see api reference for this class.</p>\n<pre><code>from sklearn.datasets import load_iris\nfrom alipy.experiment.al_experiment import AlExperiment\n\nX, y = load_iris(return_X_y=True)\nal = AlExperiment(X, y, stopping_criteria='num_of_queries', stopping_value=50,)\nal.split_AL()\nal.set_query_strategy(strategy=\"QueryInstanceUncertainty\", measure='least_confident')\nal.set_performance_metric('accuracy_score')\nal.start_query(multi_thread=True)\nal.plot_learning_curve()\n</code></pre>\n<p>To customize your own active learning experiment, it is recommended to follow the examples provided in the ALiPy/examples and tutorial in <a href=\"http://parnec.nuaa.edu.cn/huangsj/alipy\" rel=\"nofollow\">alipy main page</a>, pick the tools according to your usage. In this way, on one hand, the logic of your program is absolutely clear to you and thus easy to debug. On the other hand, some parts in your active learning process can be substituted by your own implementation for special usage.</p>\n<pre><code>import copy\nfrom sklearn.datasets import load_iris\nfrom alipy import ToolBox\n\nX, y = load_iris(return_X_y=True)\nalibox = ToolBox(X=X, y=y, query_type='AllLabels', saving_path='.')\n\n# Split data\nalibox.split_AL(test_ratio=0.3, initial_label_rate=0.1, split_count=10)\n\n# Use the default Logistic Regression classifier\nmodel = alibox.get_default_model()\n\n# The cost budget is 50 times querying\nstopping_criterion = alibox.get_stopping_criterion('num_of_queries', 50)\n\n# Use pre-defined strategy\nQBCStrategy = alibox.get_query_strategy(strategy_name='QueryInstanceQBC')\nQBC_result = []\n\nfor round in range(10):\n    # Get the data split of one fold experiment\n    train_idx, test_idx, label_ind, unlab_ind = alibox.get_split(round)\n    # Get intermediate results saver for one fold experiment\n    saver = alibox.get_stateio(round)\n\n    while not stopping_criterion.is_stop():\n        # Select a subset of Uind according to the query strategy\n        # Passing model=None to use the default model for evaluating the committees' disagreement\n        select_ind = QBCStrategy.select(label_ind, unlab_ind, model=None, batch_size=1)\n        label_ind.update(select_ind)\n        unlab_ind.difference_update(select_ind)\n\n        # Update model and calc performance according to the model you are using\n        model.fit(X=X[label_ind.index, :], y=y[label_ind.index])\n        pred = model.predict(X[test_idx, :])\n        accuracy = alibox.calc_performance_metric(y_true=y[test_idx],\n                                                  y_pred=pred,\n                                                  performance_metric='accuracy_score')\n\n        # Save intermediate results to file\n        st = alibox.State(select_index=select_ind, performance=accuracy)\n        saver.add_state(st)\n        saver.save()\n\n        # Passing the current progress to stopping criterion object\n        stopping_criterion.update_information(saver)\n    # Reset the progress in stopping criterion object\n    stopping_criterion.reset()\n    QBC_result.append(copy.deepcopy(saver))\n\nanalyser = alibox.get_experiment_analyser(x_axis='num_of_queries')\nanalyser.add_method(method_name='QBC', method_results=QBC_result)\nprint(analyser)\nanalyser.plot_learning_curves(title='Example of AL', std_area=True)\n</code></pre>\n<h2>Citation</h2>\n<p>Please cite our work:</p>\n<pre><code>Tang, Y.-P.; Li, G.-X.; and Huang, S.-J. 2019. ALiPy: Active learning in python. \nTechnical report, Nanjing University of Aeronautics and Astronautics. \navailable as arXiv preprint https://arxiv.org/abs/1901.03802.\n</code></pre>\n<pre><code>@techreport{TLHalipy,\n  author = {Ying-Peng Tang and Guo-Xiang Li and Sheng-Jun Huang},\n  title = {{ALiPy}: Active Learning in Python},\n  institution = {Nanjing University of Aeronautics and Astronautics},\n  url = {https://github.com/NUAA-AL/ALiPy},\n  note = {available as arXiv preprint \\url{https://arxiv.org/abs/1901.03802}},\n  month = jan,\n  year = 2019\n}\n</code></pre>\n\n          </div>"}, "last_serial": 5419287, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "057341045d30ba132b9c55b9d1424909", "sha256": "6ad9ca980368b5979867d928f7c76b88001bc158be52115c02ce6956c2377a25"}, "downloads": -1, "filename": "alipy-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "057341045d30ba132b9c55b9d1424909", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 116232, "upload_time": "2019-01-11T07:36:06", "upload_time_iso_8601": "2019-01-11T07:36:06.434141Z", "url": "https://files.pythonhosted.org/packages/50/76/aac115f79dc105dc48d558e5f90b29ff6762557f1884f2f5a7bd1a2667ea/alipy-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0e6477928c3955d8c3e20dbb4042de6d", "sha256": "78dafb46e4d236e7918f41ef0fc376afa505867a76d891018340b668dbe80a5d"}, "downloads": -1, "filename": "alipy-1.0.0.tar.gz", "has_sig": false, "md5_digest": "0e6477928c3955d8c3e20dbb4042de6d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 97456, "upload_time": "2019-01-11T07:36:11", "upload_time_iso_8601": "2019-01-11T07:36:11.056673Z", "url": "https://files.pythonhosted.org/packages/69/46/4358e139d37686a7979c812c9395e8c4bfe62e384433e96474e6362dd991/alipy-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "958f3bef6e395f725226f0a406223427", "sha256": "c7c4b8cadc1cd79f9d7010d9937f2cd4e39c3b575ef2924aaca72555b85bc98b"}, "downloads": -1, "filename": "alipy-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "958f3bef6e395f725226f0a406223427", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 115635, "upload_time": "2019-01-17T05:18:16", "upload_time_iso_8601": "2019-01-17T05:18:16.413133Z", "url": "https://files.pythonhosted.org/packages/6e/04/cd9acc441630e08b8214b025fc1741c498436f6996bcd39eb82c041ffd8a/alipy-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "79161254421834ba428942442f558aa2", "sha256": "4ae958ca8e910735163bfc17a377b1abcbcafbfa866fe8f0092b604eb5c9d38a"}, "downloads": -1, "filename": "alipy-1.0.1.tar.gz", "has_sig": false, "md5_digest": "79161254421834ba428942442f558aa2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 102022, "upload_time": "2019-01-17T05:18:17", "upload_time_iso_8601": "2019-01-17T05:18:17.794883Z", "url": "https://files.pythonhosted.org/packages/76/c4/7d520ae2a384275042d8d7e664649b88a078085b275ad4b5a6acadf5e7a2/alipy-1.0.1.tar.gz", "yanked": false}], "1.0.1.1": [{"comment_text": "", "digests": {"md5": "7e5e1f5efbe1f6df5c6beb52e710be9b", "sha256": "e0ebabe14346a962d788ee9c708ceac6d88d5d588297ee8b8858eff9e16c9043"}, "downloads": -1, "filename": "alipy-1.0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "7e5e1f5efbe1f6df5c6beb52e710be9b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 120614, "upload_time": "2019-01-17T06:19:08", "upload_time_iso_8601": "2019-01-17T06:19:08.675949Z", "url": "https://files.pythonhosted.org/packages/21/65/c846ea480aebbeb64f55fe5f3719da6d793e2734de8f559e919a340a8055/alipy-1.0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1b392c03258b1ca1fafa1cd2efb2d527", "sha256": "f1998c86f9988e9e80d932c725beb35d501de8e3963bbb0ed79fd25df92295d5"}, "downloads": -1, "filename": "alipy-1.0.1.1.tar.gz", "has_sig": false, "md5_digest": "1b392c03258b1ca1fafa1cd2efb2d527", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 97846, "upload_time": "2019-01-17T06:19:11", "upload_time_iso_8601": "2019-01-17T06:19:11.194496Z", "url": "https://files.pythonhosted.org/packages/7d/6e/c8f118c0faa534d82a069b82f3f7c7154ffb3b7964f385ae32b764c7b57c/alipy-1.0.1.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "f86870f77a8de5368f278e3afcee1c62", "sha256": "608c9ba52276b59744fb4bf2383d0c75fc97a02c1c84e31288d9eae61f27136b"}, "downloads": -1, "filename": "alipy-1.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "f86870f77a8de5368f278e3afcee1c62", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 116086, "upload_time": "2019-02-26T13:47:10", "upload_time_iso_8601": "2019-02-26T13:47:10.500991Z", "url": "https://files.pythonhosted.org/packages/52/da/f5020b4c474015d037d8cb0e685d2b770afd6972d61d18a814d583b46638/alipy-1.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ee27174a31cc6f9a7be9de79af041615", "sha256": "974cf420a04106f26225ce344b66776ed99ee8636f298170106fca4c32d1fb64"}, "downloads": -1, "filename": "alipy-1.0.2.tar.gz", "has_sig": false, "md5_digest": "ee27174a31cc6f9a7be9de79af041615", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 98358, "upload_time": "2019-02-26T13:47:12", "upload_time_iso_8601": "2019-02-26T13:47:12.340637Z", "url": "https://files.pythonhosted.org/packages/9e/3e/c314c896f09be0243444fcad12cd01e13e2ef7b513d0f2fdc5ffb5f5ed1b/alipy-1.0.2.tar.gz", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "a705b293546f7cc9cd1d5c2d6ca09e13", "sha256": "fb2391ca23852936a8cb1d01d261cee62ab74ef16f1fe1b9fae61c9426d31f6e"}, "downloads": -1, "filename": "alipy-1.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "a705b293546f7cc9cd1d5c2d6ca09e13", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 117012, "upload_time": "2019-03-11T07:59:35", "upload_time_iso_8601": "2019-03-11T07:59:35.349676Z", "url": "https://files.pythonhosted.org/packages/46/b1/8686f6b692516cd5ee6f1dba7164f61062d620232cdfb649e838b918722c/alipy-1.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e7f7135a0d61c9f7e02a00eb207d0736", "sha256": "366167283fd4dcf26a0dd7414a47d1a89a91e033572e2784c740a7280321d967"}, "downloads": -1, "filename": "alipy-1.0.3.tar.gz", "has_sig": false, "md5_digest": "e7f7135a0d61c9f7e02a00eb207d0736", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 99311, "upload_time": "2019-03-11T07:59:37", "upload_time_iso_8601": "2019-03-11T07:59:37.328952Z", "url": "https://files.pythonhosted.org/packages/09/ab/dfed7fa34cc8438dad962245dd10930d26aa9644b62a7b28dd3c14ad8f35/alipy-1.0.3.tar.gz", "yanked": false}], "1.0.3.1": [{"comment_text": "", "digests": {"md5": "a6e5af65db4ee9aedd71ad117f269991", "sha256": "c5227bae28fe2b10eb1c99f94930847bc4828f7c0c00e12ac252c92994fb63b9"}, "downloads": -1, "filename": "alipy-1.0.3.1-py3-none-any.whl", "has_sig": false, "md5_digest": "a6e5af65db4ee9aedd71ad117f269991", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 121985, "upload_time": "2019-03-11T14:12:41", "upload_time_iso_8601": "2019-03-11T14:12:41.899064Z", "url": "https://files.pythonhosted.org/packages/f7/b9/11ef46090d7a96c3348e9819f14d500adee6b5f5da7552f9d1e481d2f959/alipy-1.0.3.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "61cd0dc23426bf5fd7fe7a3aa6e48a44", "sha256": "aab3903c6cc5359a4895202d87b49f989c693c3165028f1196d55b7216ed5d9e"}, "downloads": -1, "filename": "alipy-1.0.3.1.tar.gz", "has_sig": false, "md5_digest": "61cd0dc23426bf5fd7fe7a3aa6e48a44", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 99254, "upload_time": "2019-03-11T14:12:48", "upload_time_iso_8601": "2019-03-11T14:12:48.087531Z", "url": "https://files.pythonhosted.org/packages/29/77/6b1b9e53fa0becd8dfc10896153481af7fd8d87b577eac074299a3612d41/alipy-1.0.3.1.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "3442b02cc03f647105de56d163d600aa", "sha256": "aa72aa61bcd201aee957694c7aeddf3fca89a59f3255f2e45d03166df3e6c1e4"}, "downloads": -1, "filename": "alipy-1.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "3442b02cc03f647105de56d163d600aa", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 118488, "upload_time": "2019-04-01T07:53:10", "upload_time_iso_8601": "2019-04-01T07:53:10.077091Z", "url": "https://files.pythonhosted.org/packages/75/ac/fbd9720a9b86835b0c410dbc0a8f17c321b5e9bc200a748548f174860dd8/alipy-1.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ae4cf7d130d79f40583f5179a6b78889", "sha256": "67185f1983b8fef76292d085ed3f6e01ff4cf8da52f09e3a4adf79f431cedd8e"}, "downloads": -1, "filename": "alipy-1.1.0.tar.gz", "has_sig": false, "md5_digest": "ae4cf7d130d79f40583f5179a6b78889", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 100754, "upload_time": "2019-04-01T07:53:12", "upload_time_iso_8601": "2019-04-01T07:53:12.694784Z", "url": "https://files.pythonhosted.org/packages/b9/4e/54cf7016374e4517bdbfdffebb425a90d8c73b096a10dd0f5018adeee20f/alipy-1.1.0.tar.gz", "yanked": false}], "1.2.0": [{"comment_text": "", "digests": {"md5": "3280845713638ffcaa653db070d8babb", "sha256": "3ee8e98439f4631b28134a3e9936dc7628183c3cd9fb33ca1a18cc76c7bd74bf"}, "downloads": -1, "filename": "alipy-1.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "3280845713638ffcaa653db070d8babb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 118849, "upload_time": "2019-05-06T06:41:42", "upload_time_iso_8601": "2019-05-06T06:41:42.556657Z", "url": "https://files.pythonhosted.org/packages/06/ac/6c9ef34f9a9378920d68c25c31da1362de73d19bafd846daa057cdd65c3c/alipy-1.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9b41b5af5aaa70908cd6382214273e37", "sha256": "24b34471eaa56a54d7d6f34b58452f9e3b88488bb275cb8ab89782827b57a563"}, "downloads": -1, "filename": "alipy-1.2.0.tar.gz", "has_sig": false, "md5_digest": "9b41b5af5aaa70908cd6382214273e37", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 113938, "upload_time": "2019-05-06T06:41:45", "upload_time_iso_8601": "2019-05-06T06:41:45.200783Z", "url": "https://files.pythonhosted.org/packages/84/d4/e7e62c2e8edfa62da02087b628a36d54359e9b38d3e77ec50e0e63ac911e/alipy-1.2.0.tar.gz", "yanked": false}], "1.2.1": [{"comment_text": "", "digests": {"md5": "d86a52fb31e59fc039308e9eaa037775", "sha256": "95e19b7c61a59f5cb0dc9f89ac617f2d4fc2c6e679a826856b8428b4f9ba12f8"}, "downloads": -1, "filename": "alipy-1.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "d86a52fb31e59fc039308e9eaa037775", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 119041, "upload_time": "2019-06-19T08:51:38", "upload_time_iso_8601": "2019-06-19T08:51:38.157689Z", "url": "https://files.pythonhosted.org/packages/de/f8/dfb7ff2c2473c5902f0dff62423131382d3eaa9b7afb620598cc73689e2d/alipy-1.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "58767f317666b166dbd920ef144cbce3", "sha256": "9c51a6532d8671df1231f193bc0234eb15ba6cf277eb3bcc9b664d08962e1e45"}, "downloads": -1, "filename": "alipy-1.2.1.tar.gz", "has_sig": false, "md5_digest": "58767f317666b166dbd920ef144cbce3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 114313, "upload_time": "2019-06-19T08:51:40", "upload_time_iso_8601": "2019-06-19T08:51:40.434808Z", "url": "https://files.pythonhosted.org/packages/61/c2/716d8f7a127ebd6fddeeecdbe509217ea5825b3c23ac49a40e3fbcb1acd2/alipy-1.2.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d86a52fb31e59fc039308e9eaa037775", "sha256": "95e19b7c61a59f5cb0dc9f89ac617f2d4fc2c6e679a826856b8428b4f9ba12f8"}, "downloads": -1, "filename": "alipy-1.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "d86a52fb31e59fc039308e9eaa037775", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 119041, "upload_time": "2019-06-19T08:51:38", "upload_time_iso_8601": "2019-06-19T08:51:38.157689Z", "url": "https://files.pythonhosted.org/packages/de/f8/dfb7ff2c2473c5902f0dff62423131382d3eaa9b7afb620598cc73689e2d/alipy-1.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "58767f317666b166dbd920ef144cbce3", "sha256": "9c51a6532d8671df1231f193bc0234eb15ba6cf277eb3bcc9b664d08962e1e45"}, "downloads": -1, "filename": "alipy-1.2.1.tar.gz", "has_sig": false, "md5_digest": "58767f317666b166dbd920ef144cbce3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 114313, "upload_time": "2019-06-19T08:51:40", "upload_time_iso_8601": "2019-06-19T08:51:40.434808Z", "url": "https://files.pythonhosted.org/packages/61/c2/716d8f7a127ebd6fddeeecdbe509217ea5825b3c23ac49a40e3fbcb1acd2/alipy-1.2.1.tar.gz", "yanked": false}], "timestamp": "Thu May  7 16:19:41 2020"}