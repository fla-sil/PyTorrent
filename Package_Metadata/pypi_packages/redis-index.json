{"info": {"author": "Vladimir Vyazovetskov", "author_email": "erhosen@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: Other Environment", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Software Development :: Libraries :: Python Modules", "Typing :: Typed"], "description": "# Redis-index: Inverted Index using efficient Redis set\n\nRedis-index helps to delegate part of the work from database to cache.\nIt is useful for highload projects, with complex serach logic underneath the hood.\n\n[![Build Status](https://github.com/ErhoSen/redis-index/workflows/Build/badge.svg)](https://github.com/ErhoSen/redis-index/actions?query=workflow:Build)\n[![codecov](https://codecov.io/gh/ErhoSen/redis-index/branch/master/graph/badge.svg)](https://codecov.io/gh/ErhoSen/redis-index)\n![License](https://img.shields.io/pypi/pyversions/redis-index.svg)\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n[![PyPI](https://img.shields.io/github/license/erhosen/redis-index.svg)](https://pypi.org/project/redis-index/)\n\n## Introduction\n\nSuppose you have to implement a service that will fetch data for a given set of filters.\n\n```http\nGET /api/companies?region=US&currency=USD&search_ids=233,816,266,...\n```\n\nFilters may require a significant costs for the database: each of them involves joining multiple tables. By writing a solution on raw SQL, we have a risk of stumbling into database performance.\n\nSuch \"heavy\" queries can be precalculated, and put into redis SET.\nWe can intersect the resulting SETs with each other, thereby greatly simplifying our SQL.\n\n```python\nsearch_ids = {233, 816, 266, ...}\nus_companies_ids = {266, 112, 643, ...}\nusd_companies_ids = {816, 54, 8395, ...}\n\nfiltered_ids = search_ids & us_companies_ids & usd_companies_ids  # intersection\n...\n\"SELECT * from companies whrere id in {filtered_ids}\"\n```\n\nBut getting such precalculated SETS from Redis to Python memory could be another bottleneck:\nfilters can be really large, and we don't want to transfer a lot of data between servers.\n\nThe solution is intersect these SETs directly in redis.\nThis is exactly what redis-index library does.\n\n## Installation\n\nUse `pip` to install `redis-index`.\n\n```bash\npip install redis-index\n```\n\n## Usage\n\n1) Declare your filters. They must inherit BaseFilter class.\n\n```python\nfrom redis_index import BaseFilter\n\nclass RegionFilter(BaseFilter):\n\n    def get_ids(self, region, **kwargs) -> List[int]:\n        \"\"\"\n        get_ids should return a precalculated list of ints.\n        \"\"\"\n        with psycopg2.connect(...) as conn:\n            with conn.cursor() as cursor:\n                cursor.execute('SELECT id FROM companies WREHE region = %s', (region, ))\n                return cursor.fetchall()\n\nclass CurrencyFilter(BaseFilter):\n\n    def get_ids(self, currency, **kwargs):\n        with psycopg2.connect(...) as conn:\n            with conn.cursor() as cursor:\n                cursor.execute('SELECT id FROM companies WREHE currency = %s', (currency, ))\n                return cursor.fetchall()\n```\n\n2) Initialize Filtering object\n\n```python\nfrom redis_index import RedisFiltering\nfrom hot_redis import HotClient\n\nredis_clent = HotClient(host=\"localhost\", port=6379)\nfiltering = RedisFiltering(redis_clent)\n```\n\n3) Now you can use `filtering` as a singleton in your project.\nSimply call `filter()` method with specific filters, and your `search_ids`\n\n```python\ncompany_ids = request.GET[\"company_ids\"]  # input list\nresult = filtering.filter(search_ids, [RegionFilter(\"US\"), CurrencyFilter(\"USD\")])\n```\n\nThe result will be a list, that contains only ids, that are both satisfying RegionFilter and CurrencyFilter.\n\n## How to warm the cache?\n\nYou can warm up the cache in various ways, for example, using the cron command\n```crontab\n*/5  *   *   *   *   python warm_filters\n```\n\nInside such a command, you can use specific method `warm_filters`\n\n```python\nresult = filtering.filter(search_ids, [RegionFilter(\"US\"), CurrencyFilter(\"USD\")])\n```\n\nOr directly RedisIndex class\n```python\nfor _filter in [RegionFilter(\"US\"), CurrencyFilter(\"USD\")]:\n    filter_index = RedisIndex(_filter, redis_client)\n    filter_index.warm()\n```\n\n## Statsd integration\n\nRedis-index optionally supports statsd-integration.\n\n![Redis-Index performance](https://github.com/ErhoSen/redis-index/raw/master/images/redis_index_performance.png \"Redis-Index performance\")\n\n![Redis-Index by filters](https://github.com/ErhoSen/redis-index/raw/master/images/redis_index_by_filters.png \"Redis-Index by filters\")\n\n## Code of Conduct\n\nEveryone interacting in the project's codebases, issue trackers, chat rooms, and mailing lists is expected to follow the [PyPA Code of Conduct](https://www.pypa.io/en/latest/code-of-conduct/).\n\n## History\n\n### [0.1.11] - 2019-11-08\n\n#### Added\n\n- Added code for initial release\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ErhoSen/redis-index", "keywords": "redis,index,gin,intersection,filters", "license": "MIT", "maintainer": "Vladimir Vyazovetskov", "maintainer_email": "erhosen@gmail.com", "name": "redis-index", "package_url": "https://pypi.org/project/redis-index/", "platform": "", "project_url": "https://pypi.org/project/redis-index/", "project_urls": {"Homepage": "https://github.com/ErhoSen/redis-index", "Repository": "https://github.com/ErhoSen/redis-index"}, "release_url": "https://pypi.org/project/redis-index/0.1.11/", "requires_dist": ["hot_redis (>=0.3.0,<0.4.0)", "inflection (>=0.3.1,<0.4.0)", "statsd (>=3.3,<4.0)"], "requires_python": ">=3.6,<4.0", "summary": "Inverted Index using efficient Redis set", "version": "0.1.11", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Redis-index: Inverted Index using efficient Redis set</h1>\n<p>Redis-index helps to delegate part of the work from database to cache.\nIt is useful for highload projects, with complex serach logic underneath the hood.</p>\n<p><a href=\"https://github.com/ErhoSen/redis-index/actions?query=workflow:Build\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0f62efb093bf201791b9f571b73d25908da3278f/68747470733a2f2f6769746875622e636f6d2f4572686f53656e2f72656469732d696e6465782f776f726b666c6f77732f4275696c642f62616467652e737667\"></a>\n<a href=\"https://codecov.io/gh/ErhoSen/redis-index\" rel=\"nofollow\"><img alt=\"codecov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/16fe4f5c5ef5397671945584e6455ad1ba4928d3/68747470733a2f2f636f6465636f762e696f2f67682f4572686f53656e2f72656469732d696e6465782f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a>\n<img alt=\"License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4bff5ade0b18251a755ed15202643a61bc06ad8a/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f72656469732d696e6465782e737667\">\n<a href=\"https://github.com/psf/black\" rel=\"nofollow\"><img alt=\"Code style: black\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fbfdc7754183ecf079bc71ddeabaf88f6cbc5c00/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64652532307374796c652d626c61636b2d3030303030302e737667\"></a>\n<a href=\"https://pypi.org/project/redis-index/\" rel=\"nofollow\"><img alt=\"PyPI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/962021278ed9bb44f92df8d5dc27ebe2c02e3293/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f6572686f73656e2f72656469732d696e6465782e737667\"></a></p>\n<h2>Introduction</h2>\n<p>Suppose you have to implement a service that will fetch data for a given set of filters.</p>\n<pre><span class=\"err\">GET /api/companies?region=US&amp;currency=USD&amp;search_ids=233,816,266,...</span>\n</pre>\n<p>Filters may require a significant costs for the database: each of them involves joining multiple tables. By writing a solution on raw SQL, we have a risk of stumbling into database performance.</p>\n<p>Such \"heavy\" queries can be precalculated, and put into redis SET.\nWe can intersect the resulting SETs with each other, thereby greatly simplifying our SQL.</p>\n<pre><span class=\"n\">search_ids</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"mi\">233</span><span class=\"p\">,</span> <span class=\"mi\">816</span><span class=\"p\">,</span> <span class=\"mi\">266</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">}</span>\n<span class=\"n\">us_companies_ids</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"mi\">266</span><span class=\"p\">,</span> <span class=\"mi\">112</span><span class=\"p\">,</span> <span class=\"mi\">643</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">}</span>\n<span class=\"n\">usd_companies_ids</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"mi\">816</span><span class=\"p\">,</span> <span class=\"mi\">54</span><span class=\"p\">,</span> <span class=\"mi\">8395</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">}</span>\n\n<span class=\"n\">filtered_ids</span> <span class=\"o\">=</span> <span class=\"n\">search_ids</span> <span class=\"o\">&amp;</span> <span class=\"n\">us_companies_ids</span> <span class=\"o\">&amp;</span> <span class=\"n\">usd_companies_ids</span>  <span class=\"c1\"># intersection</span>\n<span class=\"o\">...</span>\n<span class=\"s2\">\"SELECT * from companies whrere id in </span><span class=\"si\">{filtered_ids}</span><span class=\"s2\">\"</span>\n</pre>\n<p>But getting such precalculated SETS from Redis to Python memory could be another bottleneck:\nfilters can be really large, and we don't want to transfer a lot of data between servers.</p>\n<p>The solution is intersect these SETs directly in redis.\nThis is exactly what redis-index library does.</p>\n<h2>Installation</h2>\n<p>Use <code>pip</code> to install <code>redis-index</code>.</p>\n<pre>pip install redis-index\n</pre>\n<h2>Usage</h2>\n<ol>\n<li>Declare your filters. They must inherit BaseFilter class.</li>\n</ol>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">redis_index</span> <span class=\"kn\">import</span> <span class=\"n\">BaseFilter</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">RegionFilter</span><span class=\"p\">(</span><span class=\"n\">BaseFilter</span><span class=\"p\">):</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_ids</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">region</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]:</span>\n        <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">        get_ids should return a precalculated list of ints.</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"k\">with</span> <span class=\"n\">psycopg2</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">conn</span><span class=\"p\">:</span>\n            <span class=\"k\">with</span> <span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">cursor</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">cursor</span><span class=\"p\">:</span>\n                <span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"s1\">'SELECT id FROM companies WREHE region = </span><span class=\"si\">%s</span><span class=\"s1\">'</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">region</span><span class=\"p\">,</span> <span class=\"p\">))</span>\n                <span class=\"k\">return</span> <span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">fetchall</span><span class=\"p\">()</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">CurrencyFilter</span><span class=\"p\">(</span><span class=\"n\">BaseFilter</span><span class=\"p\">):</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_ids</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">currency</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"k\">with</span> <span class=\"n\">psycopg2</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">conn</span><span class=\"p\">:</span>\n            <span class=\"k\">with</span> <span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">cursor</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">cursor</span><span class=\"p\">:</span>\n                <span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"s1\">'SELECT id FROM companies WREHE currency = </span><span class=\"si\">%s</span><span class=\"s1\">'</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">currency</span><span class=\"p\">,</span> <span class=\"p\">))</span>\n                <span class=\"k\">return</span> <span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">fetchall</span><span class=\"p\">()</span>\n</pre>\n<ol>\n<li>Initialize Filtering object</li>\n</ol>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">redis_index</span> <span class=\"kn\">import</span> <span class=\"n\">RedisFiltering</span>\n<span class=\"kn\">from</span> <span class=\"nn\">hot_redis</span> <span class=\"kn\">import</span> <span class=\"n\">HotClient</span>\n\n<span class=\"n\">redis_clent</span> <span class=\"o\">=</span> <span class=\"n\">HotClient</span><span class=\"p\">(</span><span class=\"n\">host</span><span class=\"o\">=</span><span class=\"s2\">\"localhost\"</span><span class=\"p\">,</span> <span class=\"n\">port</span><span class=\"o\">=</span><span class=\"mi\">6379</span><span class=\"p\">)</span>\n<span class=\"n\">filtering</span> <span class=\"o\">=</span> <span class=\"n\">RedisFiltering</span><span class=\"p\">(</span><span class=\"n\">redis_clent</span><span class=\"p\">)</span>\n</pre>\n<ol>\n<li>Now you can use <code>filtering</code> as a singleton in your project.\nSimply call <code>filter()</code> method with specific filters, and your <code>search_ids</code></li>\n</ol>\n<pre><span class=\"n\">company_ids</span> <span class=\"o\">=</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">GET</span><span class=\"p\">[</span><span class=\"s2\">\"company_ids\"</span><span class=\"p\">]</span>  <span class=\"c1\"># input list</span>\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">filtering</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">search_ids</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">RegionFilter</span><span class=\"p\">(</span><span class=\"s2\">\"US\"</span><span class=\"p\">),</span> <span class=\"n\">CurrencyFilter</span><span class=\"p\">(</span><span class=\"s2\">\"USD\"</span><span class=\"p\">)])</span>\n</pre>\n<p>The result will be a list, that contains only ids, that are both satisfying RegionFilter and CurrencyFilter.</p>\n<h2>How to warm the cache?</h2>\n<p>You can warm up the cache in various ways, for example, using the cron command</p>\n<pre>*/5  *   *   *   *   python warm_filters\n</pre>\n<p>Inside such a command, you can use specific method <code>warm_filters</code></p>\n<pre><span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">filtering</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">search_ids</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">RegionFilter</span><span class=\"p\">(</span><span class=\"s2\">\"US\"</span><span class=\"p\">),</span> <span class=\"n\">CurrencyFilter</span><span class=\"p\">(</span><span class=\"s2\">\"USD\"</span><span class=\"p\">)])</span>\n</pre>\n<p>Or directly RedisIndex class</p>\n<pre><span class=\"k\">for</span> <span class=\"n\">_filter</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"n\">RegionFilter</span><span class=\"p\">(</span><span class=\"s2\">\"US\"</span><span class=\"p\">),</span> <span class=\"n\">CurrencyFilter</span><span class=\"p\">(</span><span class=\"s2\">\"USD\"</span><span class=\"p\">)]:</span>\n    <span class=\"n\">filter_index</span> <span class=\"o\">=</span> <span class=\"n\">RedisIndex</span><span class=\"p\">(</span><span class=\"n\">_filter</span><span class=\"p\">,</span> <span class=\"n\">redis_client</span><span class=\"p\">)</span>\n    <span class=\"n\">filter_index</span><span class=\"o\">.</span><span class=\"n\">warm</span><span class=\"p\">()</span>\n</pre>\n<h2>Statsd integration</h2>\n<p>Redis-index optionally supports statsd-integration.</p>\n<p><img alt=\"Redis-Index performance\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5b99414192e9a2c399fd3ef54a4b024a41c403ef/68747470733a2f2f6769746875622e636f6d2f4572686f53656e2f72656469732d696e6465782f7261772f6d61737465722f696d616765732f72656469735f696e6465785f706572666f726d616e63652e706e67\"></p>\n<p><img alt=\"Redis-Index by filters\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/32cdd2a916582b04902631f1d546d460f921dae9/68747470733a2f2f6769746875622e636f6d2f4572686f53656e2f72656469732d696e6465782f7261772f6d61737465722f696d616765732f72656469735f696e6465785f62795f66696c746572732e706e67\"></p>\n<h2>Code of Conduct</h2>\n<p>Everyone interacting in the project's codebases, issue trackers, chat rooms, and mailing lists is expected to follow the <a href=\"https://www.pypa.io/en/latest/code-of-conduct/\" rel=\"nofollow\">PyPA Code of Conduct</a>.</p>\n<h2>History</h2>\n<h3>[0.1.11] - 2019-11-08</h3>\n<h4>Added</h4>\n<ul>\n<li>Added code for initial release</li>\n</ul>\n\n          </div>"}, "last_serial": 6099694, "releases": {"0.1.11": [{"comment_text": "", "digests": {"md5": "23cfbcd7decb88ffe6a0029ba8bae417", "sha256": "1ac0ed8f243413878157b73fb34c0bf50afbb2e07d3af3ea4c721f36e7a33a0e"}, "downloads": -1, "filename": "redis_index-0.1.11-py3-none-any.whl", "has_sig": false, "md5_digest": "23cfbcd7decb88ffe6a0029ba8bae417", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 6722, "upload_time": "2019-11-08T14:59:50", "upload_time_iso_8601": "2019-11-08T14:59:50.910783Z", "url": "https://files.pythonhosted.org/packages/70/e7/8aeeec02eb527aff4acf14959f4b5403329061f6516f491dbc0034121546/redis_index-0.1.11-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8602ee16ea901d87563177e5d54307b4", "sha256": "c0366627a2a1c3266af24506b2dd4818d2c79afc782813ba397398858b723ac6"}, "downloads": -1, "filename": "redis-index-0.1.11.tar.gz", "has_sig": false, "md5_digest": "8602ee16ea901d87563177e5d54307b4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 6132, "upload_time": "2019-11-08T14:59:48", "upload_time_iso_8601": "2019-11-08T14:59:48.548339Z", "url": "https://files.pythonhosted.org/packages/00/4e/eab7937be524cae55965587261d69d80fc53bf439ed79bdc007efe202bbf/redis-index-0.1.11.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "23cfbcd7decb88ffe6a0029ba8bae417", "sha256": "1ac0ed8f243413878157b73fb34c0bf50afbb2e07d3af3ea4c721f36e7a33a0e"}, "downloads": -1, "filename": "redis_index-0.1.11-py3-none-any.whl", "has_sig": false, "md5_digest": "23cfbcd7decb88ffe6a0029ba8bae417", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 6722, "upload_time": "2019-11-08T14:59:50", "upload_time_iso_8601": "2019-11-08T14:59:50.910783Z", "url": "https://files.pythonhosted.org/packages/70/e7/8aeeec02eb527aff4acf14959f4b5403329061f6516f491dbc0034121546/redis_index-0.1.11-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8602ee16ea901d87563177e5d54307b4", "sha256": "c0366627a2a1c3266af24506b2dd4818d2c79afc782813ba397398858b723ac6"}, "downloads": -1, "filename": "redis-index-0.1.11.tar.gz", "has_sig": false, "md5_digest": "8602ee16ea901d87563177e5d54307b4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 6132, "upload_time": "2019-11-08T14:59:48", "upload_time_iso_8601": "2019-11-08T14:59:48.548339Z", "url": "https://files.pythonhosted.org/packages/00/4e/eab7937be524cae55965587261d69d80fc53bf439ed79bdc007efe202bbf/redis-index-0.1.11.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:05:50 2020"}