{"info": {"author": "Steven LI", "author_email": "steven004@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: MacOS :: MacOS X", "Operating System :: Microsoft :: Windows", "Operating System :: Unix", "Programming Language :: Python :: 3", "Topic :: Software Development :: Libraries", "Topic :: Software Development :: Quality Assurance", "Topic :: Software Development :: Testing", "Topic :: System :: Logging", "Topic :: Utilities"], "description": "pytest plugin for test_steps auto check and log functions\n===============================================================\n\n.. image:: https://pypip.in/v/pytest_autochecklog/badge.png\n    :target: https://crate.io/packages/pytest_autochecklog/\n\n.. image:: https://pypip.in/d/pytest_autochecklog/badge.png\n    :target: https://crate.io/packages/pytest_autochecklog/\n\n\n**Please use pytest-oot plug-in, which provides same functions and much more.**\n\nThis pytest plugin is very simple, which is for users who use test_steps in py.test framework.\nUse this plugin, the function detection mechanism is using pytest runtest_setup to do it, instead of\nusing the original mechanism, which requires users know more about the auto-function-detection while\nwriting scripts originally.\nNow, it will be all set, while taken care of by this plugin.\n\n\nInstall pytest-autochecklog\n---------------------------\n\n::\n\n    pip install pytest-autochecklog\n\n\nUsing\n------\nGiven the following tests (suppose it is in file /test_steps_example/test1.py)\n\n.. code-block:: python\n\n    from test_steps import *\n    import random\n    def test_example():\n        ok(\"just pass the check and log it\")\n        #fail(\"Just fail the check and log it\")\n        ok(3+2 == 5, \"pass if expr else fail\")\n        #eq(\"Shanghai\", \"Beijing\", \"Shanghai not equal to Beijing\")\n        eq(4+5, 9)\n        ne(\"Shanghai\", \"Beijing\", \"Pass, Shanghai not equal to Beijing\")\n        #'Shanghai City' contains 'Country', the second parameter could be regex\n        check(\" 'Shanghai City' =~ 'Country' \", warning=True)\n        unmatch(\"Shanghai City\", \"Country\", \"Pass, not contains, regex can be used too\")\n        check('random.uniform(1,20) > 15', repeat=5)\n\n\nAfter installed the plugin for pytest, when you run pytest with the above test case,\nthen, you will get the following log in logfile /tmp/test_yyyymmdd_hhmm.log by default like::\n\n    Steven-Mac:tmp Steven$ cat test_20150124_1545.log\n    2015-01-24 15:45:11,184 - INFO - ------------------------------------------------------\n    2015-01-24 15:45:11,197 - INFO - Func test_example in file: /test_steps_example/test1.py\n    2015-01-24 15:45:11,198 - INFO - Check-1: just pass the check and log it -PASS-\n    2015-01-24 15:45:11,198 - INFO - Check-2: pass if expr else fail -PASS-\n    2015-01-24 15:45:11,198 - INFO - Check-3: 9 == 9 -PASS- 9 == 9?\n    2015-01-24 15:45:11,199 - INFO - Check-4: Pass, Shanghai not equal to Beijing -PASS- 'Shanghai' != 'Beijing'?\n    2015-01-24 15:45:11,202 - INFO - Check-5: 'Shanghai City' =~ 'Country' -PASS- 'Shanghai City' =~ 'Country'\n    2015-01-24 15:45:11,202 - WARNING -   ^^^  condition not met (pass due to -w option set)  ^^^\n    2015-01-24 15:45:11,203 - INFO - Check-6: Pass, not contains, regex can be used too -PASS- 'Shanghai City' !~ 'Country'?\n    2015-01-24 15:45:13,204 - DEBUG -    vvv  Results(-r 5 set) { 1:<11.960281812565919 > 15>  2:<12.284208523480407 > 15>  3:<15.89909604817515 > 15>  }  vvv\n    2015-01-24 15:45:13,204 - INFO - Check-7: random.uniform(1,20) > 15 -PASS- 15.89909604817515 > 15 - tried 3 times in 5 seconds\n\n\nBtw, you can change the log file and format by using test_steps functions.\n\n\n\nSee more information about test_steps module\n--------------------------------------------\n\nhttps://pypi.python.org/pypi?:action=display&name=test_steps\n\n\n\n", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/steven004/python-autochecklog", "keywords": null, "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "pytest-autochecklog", "package_url": "https://pypi.org/project/pytest-autochecklog/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/pytest-autochecklog/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/steven004/python-autochecklog"}, "release_url": "https://pypi.org/project/pytest-autochecklog/0.2.0/", "requires_dist": null, "requires_python": null, "summary": "automatically check condition and log all the checks", "version": "0.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://crate.io/packages/pytest_autochecklog/\" rel=\"nofollow\"><img alt=\"https://pypip.in/v/pytest_autochecklog/badge.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0c87f329148f098a49c9d1a43c2b617bce72a948/68747470733a2f2f70797069702e696e2f762f7079746573745f6175746f636865636b6c6f672f62616467652e706e67\"></a>\n<a href=\"https://crate.io/packages/pytest_autochecklog/\" rel=\"nofollow\"><img alt=\"https://pypip.in/d/pytest_autochecklog/badge.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/31fa3d546c487b6d9a23cc239e5c235804d1023b/68747470733a2f2f70797069702e696e2f642f7079746573745f6175746f636865636b6c6f672f62616467652e706e67\"></a>\n<p><strong>Please use pytest-oot plug-in, which provides same functions and much more.</strong></p>\n<p>This pytest plugin is very simple, which is for users who use test_steps in py.test framework.\nUse this plugin, the function detection mechanism is using pytest runtest_setup to do it, instead of\nusing the original mechanism, which requires users know more about the auto-function-detection while\nwriting scripts originally.\nNow, it will be all set, while taken care of by this plugin.</p>\n<div id=\"install-pytest-autochecklog\">\n<h2>Install pytest-autochecklog</h2>\n<pre>pip install pytest-autochecklog\n</pre>\n</div>\n<div id=\"using\">\n<h2>Using</h2>\n<p>Given the following tests (suppose it is in file /test_steps_example/test1.py)</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">test_steps</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">import</span> <span class=\"nn\">random</span>\n<span class=\"k\">def</span> <span class=\"nf\">test_example</span><span class=\"p\">():</span>\n    <span class=\"n\">ok</span><span class=\"p\">(</span><span class=\"s2\">\"just pass the check and log it\"</span><span class=\"p\">)</span>\n    <span class=\"c1\">#fail(\"Just fail the check and log it\")</span>\n    <span class=\"n\">ok</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"o\">+</span><span class=\"mi\">2</span> <span class=\"o\">==</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"s2\">\"pass if expr else fail\"</span><span class=\"p\">)</span>\n    <span class=\"c1\">#eq(\"Shanghai\", \"Beijing\", \"Shanghai not equal to Beijing\")</span>\n    <span class=\"n\">eq</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"o\">+</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">)</span>\n    <span class=\"n\">ne</span><span class=\"p\">(</span><span class=\"s2\">\"Shanghai\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Beijing\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Pass, Shanghai not equal to Beijing\"</span><span class=\"p\">)</span>\n    <span class=\"c1\">#'Shanghai City' contains 'Country', the second parameter could be regex</span>\n    <span class=\"n\">check</span><span class=\"p\">(</span><span class=\"s2\">\" 'Shanghai City' =~ 'Country' \"</span><span class=\"p\">,</span> <span class=\"n\">warning</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"n\">unmatch</span><span class=\"p\">(</span><span class=\"s2\">\"Shanghai City\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Country\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Pass, not contains, regex can be used too\"</span><span class=\"p\">)</span>\n    <span class=\"n\">check</span><span class=\"p\">(</span><span class=\"s1\">'random.uniform(1,20) &gt; 15'</span><span class=\"p\">,</span> <span class=\"n\">repeat</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n</pre>\n<p>After installed the plugin for pytest, when you run pytest with the above test case,\nthen, you will get the following log in logfile /tmp/test_yyyymmdd_hhmm.log by default like:</p>\n<pre>Steven-Mac:tmp Steven$ cat test_20150124_1545.log\n2015-01-24 15:45:11,184 - INFO - ------------------------------------------------------\n2015-01-24 15:45:11,197 - INFO - Func test_example in file: /test_steps_example/test1.py\n2015-01-24 15:45:11,198 - INFO - Check-1: just pass the check and log it -PASS-\n2015-01-24 15:45:11,198 - INFO - Check-2: pass if expr else fail -PASS-\n2015-01-24 15:45:11,198 - INFO - Check-3: 9 == 9 -PASS- 9 == 9?\n2015-01-24 15:45:11,199 - INFO - Check-4: Pass, Shanghai not equal to Beijing -PASS- 'Shanghai' != 'Beijing'?\n2015-01-24 15:45:11,202 - INFO - Check-5: 'Shanghai City' =~ 'Country' -PASS- 'Shanghai City' =~ 'Country'\n2015-01-24 15:45:11,202 - WARNING -   ^^^  condition not met (pass due to -w option set)  ^^^\n2015-01-24 15:45:11,203 - INFO - Check-6: Pass, not contains, regex can be used too -PASS- 'Shanghai City' !~ 'Country'?\n2015-01-24 15:45:13,204 - DEBUG -    vvv  Results(-r 5 set) { 1:&lt;11.960281812565919 &gt; 15&gt;  2:&lt;12.284208523480407 &gt; 15&gt;  3:&lt;15.89909604817515 &gt; 15&gt;  }  vvv\n2015-01-24 15:45:13,204 - INFO - Check-7: random.uniform(1,20) &gt; 15 -PASS- 15.89909604817515 &gt; 15 - tried 3 times in 5 seconds\n</pre>\n<p>Btw, you can change the log file and format by using test_steps functions.</p>\n</div>\n<div id=\"see-more-information-about-test-steps-module\">\n<h2>See more information about test_steps module</h2>\n<p><a href=\"https://pypi.python.org/pypi?:action=display&amp;name=test_steps\" rel=\"nofollow\">https://pypi.python.org/pypi?:action=display&amp;name=test_steps</a></p>\n</div>\n\n          </div>"}, "last_serial": 1520376, "releases": {"0.1.1": [{"comment_text": "", "digests": {"md5": "a2c58e626eca540c7833ea6252e157b3", "sha256": "bf27d64f8a9036c510199a0b54741179a6dd41d74d60388a28725e290821435b"}, "downloads": -1, "filename": "pytest-autochecklog-0.1.1.tar.gz", "has_sig": false, "md5_digest": "a2c58e626eca540c7833ea6252e157b3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2689, "upload_time": "2015-01-21T13:18:28", "upload_time_iso_8601": "2015-01-21T13:18:28.698439Z", "url": "https://files.pythonhosted.org/packages/c4/aa/9fe58fb7a1d6a8970a9948fea96880b675b380831af94cdfaa59db7066ab/pytest-autochecklog-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "5cd51f5915cf7a6c3d60eea8460200ee", "sha256": "6d7ca6df269c810082e8e1f66836cc2efb1ce0f48ec6ab807b85dd69e79ca4ae"}, "downloads": -1, "filename": "pytest-autochecklog-0.1.2.tar.gz", "has_sig": false, "md5_digest": "5cd51f5915cf7a6c3d60eea8460200ee", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3483, "upload_time": "2015-01-23T13:31:26", "upload_time_iso_8601": "2015-01-23T13:31:26.083190Z", "url": "https://files.pythonhosted.org/packages/30/67/c59f27b68d0706a351cda53e13b17d113cc320123cedf3734f34c2df551c/pytest-autochecklog-0.1.2.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "80ec8d16262b14bc450c61aa58949e88", "sha256": "71eae9b35ec198e0dc34676d481a4dcfdcba9f658d3092c4bb852595746fc66b"}, "downloads": -1, "filename": "pytest-autochecklog-0.2.0.tar.gz", "has_sig": false, "md5_digest": "80ec8d16262b14bc450c61aa58949e88", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3594, "upload_time": "2015-04-25T00:23:19", "upload_time_iso_8601": "2015-04-25T00:23:19.196866Z", "url": "https://files.pythonhosted.org/packages/92/fd/0760880b86ed18be4da6148dcac37a326b63ce72552dcd1266e187562567/pytest-autochecklog-0.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "80ec8d16262b14bc450c61aa58949e88", "sha256": "71eae9b35ec198e0dc34676d481a4dcfdcba9f658d3092c4bb852595746fc66b"}, "downloads": -1, "filename": "pytest-autochecklog-0.2.0.tar.gz", "has_sig": false, "md5_digest": "80ec8d16262b14bc450c61aa58949e88", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3594, "upload_time": "2015-04-25T00:23:19", "upload_time_iso_8601": "2015-04-25T00:23:19.196866Z", "url": "https://files.pythonhosted.org/packages/92/fd/0760880b86ed18be4da6148dcac37a326b63ce72552dcd1266e187562567/pytest-autochecklog-0.2.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:55:25 2020"}