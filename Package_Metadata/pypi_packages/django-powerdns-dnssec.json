{"info": {"author": "Peter Nixon, \u0141ukasz Langa", "author_email": "lukasz@langa.pl", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Framework :: Django", "Intended Audience :: Developers", "Intended Audience :: System Administrators", "Intended Audience :: Telecommunications Industry", "License :: OSI Approved :: BSD License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 2 :: Only", "Topic :: Internet :: Name Service (DNS)", "Topic :: Internet :: WWW/HTTP", "Topic :: Internet :: WWW/HTTP :: WSGI :: Application", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "Django PowerDNS with DNSSEC support\n===================================\n\nWelcome to the PowerDNS app for Django.\n\nThis application allows easy administration of PowerDNS records stored in an\nSQL database by leveraging the standard Django Admin app. You may also use the\nDjango PowerDNS application as part of a larger project to programatically\nmodify your DNS records.\n\n**Note:** This is an updated and enhanced fork of `django-powerdns\n<http://pypi.python.org/pypi/django-powerdns/>`_ which looks abandoned as of\nNovember 2012.\n\nQuickstart\n----------\n\nSimply add ``powerdns`` and ``lck.django.common`` to ``INSTALLED_APPS`` in your\n``settings.py``.  Use South for database migrations.\n\nCustomizing resource record types\n---------------------------------\n\nIf you're not using DNSSEC or the other less common record types, you can\nsimplify the user interface even more by specifying a sequence of types the app\nshould use. Simply put this in your ``settings.py``::\n\n  POWERDNS_RECORD_TYPES = (\n      'A', 'AAAA', 'CNAME', 'HINFO', 'MX', 'NAPTR', 'NS',\n      'PTR', 'SOA', 'SRV', 'TXT',\n  )\n\nConsult PowerDNS documentation for a `list of supported resource record types\n<http://doc.powerdns.com/types.html>`_.\n\nUsing a separate database for PowerDNS\n--------------------------------------\n\nIf your Django application is using a different database than the one used by\nPowerDNS, provide the configuration for the DNS database in ``settings.py`` as\na separate entry in ``DATABASES``, for example::\n\n  DATABASES = {\n      'default': {\n          'ENGINE': 'django.db.backends.mysql',\n          'NAME': 'project_db',\n          'USER': 'user',\n          'PASSWORD': 'secret',\n          'HOST': '127.0.0.1',\n          'PORT': '3306',\n          'OPTIONS': {\n              \"init_command\": \"SET storage_engine=INNODB\",\n          },\n      },\n      'powerdns': {\n          'ENGINE': 'django.db.backends.mysql',\n          'NAME': 'powerdns',\n          'USER': 'pdns',\n          'PASSWORD': 'pdns',\n          'HOST': '127.0.0.1',\n          'PORT': '3306',\n          'OPTIONS': {\n              \"init_command\": \"SET storage_engine=INNODB\",\n          },\n      },\n  }\n\nFor Django to automatically route ``powerdns`` requests to the right database,\nadd this setting to ``settings.py``::\n\n  DATABASE_ROUTERS = ['powerdns.routers.PowerDNSRouter']\n\nYou have to sync and migrate the ``default`` and the ``powerdns`` databases\nseparately. First the default database::\n\n  $ python manage.py syncdb\n  $ python manage.py migrate\n\nThen the ``powerdns`` database::\n\n  $ python manage.py syncdb --database=powerdns\n  $ python manage.py migrate --database==powerdns powerdns\n\nNote that the ``powerdns`` database will maintain its own separate South\nmigration history table. This is especially helpful if your connecting several\nDjango projects to a single PowerDNS database.\n\nAlso note that due to `South limitations\n<http://south.aeracode.org/ticket/370>`_, ``migrate`` will create all powerdns\ntables also in the default database. This is harmless, even though creates some\nclutter.\n\nChange Log\n----------\n\n0.9.3\n~~~~~\n\n* Fixed issue #3: HTTP 500 in record admin form if no type given\n\n0.9.2\n~~~~~\n\n* Fixed issue #2: numeric sorting of IP addresses in admin\n\n0.9.1\n~~~~~\n\n* Domain foreign keys support auto completion and have \"Edit separately\" links\n  \n* Field choices use radio selects whenever that makes sense (fever clicks\n  necessary)\n\n* Forward/reverse domain filter (requires Django 1.4+)\n\n* The ``0002`` database migration in 0.9.0 was incomplete, this is now fixed\n\n0.9.0\n~~~~~\n\n* DNSSEC tables supported.\n\n* Support for multiple databases.\n\n* Updated the project to require at least Django 1.3.\n\n* UI translations supported (currently Polish translation added).\n\n* South migrations.\n\n* Source code compliant with PEP8.\n\n* Minor fixes.\n\n0.2.0\n~~~~~\n\n* First release with basic PowerDNS support.\n\nAuthors\n-------\n\nApplication written by `Peter Nixon <mailto:listuser@peternixon.net>`_ and\n`\u0141ukasz Langa <mailto:lukasz@langa.pl>`_. NSEC3 code based on George Notaras'\nwork with `django-powerdns-manager\n<https://bitbucket.org/gnotaras/django-powerdns-manager>`_.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://bitbucket.org/ambv/django-powerdns/", "keywords": null, "license": "BSD", "maintainer": null, "maintainer_email": null, "name": "django-powerdns-dnssec", "package_url": "https://pypi.org/project/django-powerdns-dnssec/", "platform": "any", "project_url": "https://pypi.org/project/django-powerdns-dnssec/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://bitbucket.org/ambv/django-powerdns/"}, "release_url": "https://pypi.org/project/django-powerdns-dnssec/0.9.3/", "requires_dist": null, "requires_python": null, "summary": "PowerDNS administration app for Django", "version": "0.9.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Welcome to the PowerDNS app for Django.</p>\n<p>This application allows easy administration of PowerDNS records stored in an\nSQL database by leveraging the standard Django Admin app. You may also use the\nDjango PowerDNS application as part of a larger project to programatically\nmodify your DNS records.</p>\n<p><strong>Note:</strong> This is an updated and enhanced fork of <a href=\"http://pypi.python.org/pypi/django-powerdns/\" rel=\"nofollow\">django-powerdns</a> which looks abandoned as of\nNovember 2012.</p>\n<div id=\"quickstart\">\n<h2>Quickstart</h2>\n<p>Simply add <tt>powerdns</tt> and <tt>lck.django.common</tt> to <tt>INSTALLED_APPS</tt> in your\n<tt>settings.py</tt>.  Use South for database migrations.</p>\n</div>\n<div id=\"customizing-resource-record-types\">\n<h2>Customizing resource record types</h2>\n<p>If you\u2019re not using DNSSEC or the other less common record types, you can\nsimplify the user interface even more by specifying a sequence of types the app\nshould use. Simply put this in your <tt>settings.py</tt>:</p>\n<pre>POWERDNS_RECORD_TYPES = (\n    'A', 'AAAA', 'CNAME', 'HINFO', 'MX', 'NAPTR', 'NS',\n    'PTR', 'SOA', 'SRV', 'TXT',\n)\n</pre>\n<p>Consult PowerDNS documentation for a <a href=\"http://doc.powerdns.com/types.html\" rel=\"nofollow\">list of supported resource record types</a>.</p>\n</div>\n<div id=\"using-a-separate-database-for-powerdns\">\n<h2>Using a separate database for PowerDNS</h2>\n<p>If your Django application is using a different database than the one used by\nPowerDNS, provide the configuration for the DNS database in <tt>settings.py</tt> as\na separate entry in <tt>DATABASES</tt>, for example:</p>\n<pre>DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.mysql',\n        'NAME': 'project_db',\n        'USER': 'user',\n        'PASSWORD': 'secret',\n        'HOST': '127.0.0.1',\n        'PORT': '3306',\n        'OPTIONS': {\n            \"init_command\": \"SET storage_engine=INNODB\",\n        },\n    },\n    'powerdns': {\n        'ENGINE': 'django.db.backends.mysql',\n        'NAME': 'powerdns',\n        'USER': 'pdns',\n        'PASSWORD': 'pdns',\n        'HOST': '127.0.0.1',\n        'PORT': '3306',\n        'OPTIONS': {\n            \"init_command\": \"SET storage_engine=INNODB\",\n        },\n    },\n}\n</pre>\n<p>For Django to automatically route <tt>powerdns</tt> requests to the right database,\nadd this setting to <tt>settings.py</tt>:</p>\n<pre>DATABASE_ROUTERS = ['powerdns.routers.PowerDNSRouter']\n</pre>\n<p>You have to sync and migrate the <tt>default</tt> and the <tt>powerdns</tt> databases\nseparately. First the default database:</p>\n<pre>$ python manage.py syncdb\n$ python manage.py migrate\n</pre>\n<p>Then the <tt>powerdns</tt> database:</p>\n<pre>$ python manage.py syncdb --database=powerdns\n$ python manage.py migrate --database==powerdns powerdns\n</pre>\n<p>Note that the <tt>powerdns</tt> database will maintain its own separate South\nmigration history table. This is especially helpful if your connecting several\nDjango projects to a single PowerDNS database.</p>\n<p>Also note that due to <a href=\"http://south.aeracode.org/ticket/370\" rel=\"nofollow\">South limitations</a>, <tt>migrate</tt> will create all powerdns\ntables also in the default database. This is harmless, even though creates some\nclutter.</p>\n</div>\n<div id=\"change-log\">\n<h2>Change Log</h2>\n<div id=\"id1\">\n<h3>0.9.3</h3>\n<ul>\n<li>Fixed issue #3: HTTP 500 in record admin form if no type given</li>\n</ul>\n</div>\n<div id=\"id2\">\n<h3>0.9.2</h3>\n<ul>\n<li>Fixed issue #2: numeric sorting of IP addresses in admin</li>\n</ul>\n</div>\n<div id=\"id3\">\n<h3>0.9.1</h3>\n<ul>\n<li>Domain foreign keys support auto completion and have \u201cEdit separately\u201d links</li>\n<li>Field choices use radio selects whenever that makes sense (fever clicks\nnecessary)</li>\n<li>Forward/reverse domain filter (requires Django 1.4+)</li>\n<li>The <tt>0002</tt> database migration in 0.9.0 was incomplete, this is now fixed</li>\n</ul>\n</div>\n<div id=\"id4\">\n<h3>0.9.0</h3>\n<ul>\n<li>DNSSEC tables supported.</li>\n<li>Support for multiple databases.</li>\n<li>Updated the project to require at least Django 1.3.</li>\n<li>UI translations supported (currently Polish translation added).</li>\n<li>South migrations.</li>\n<li>Source code compliant with PEP8.</li>\n<li>Minor fixes.</li>\n</ul>\n</div>\n<div id=\"id5\">\n<h3>0.2.0</h3>\n<ul>\n<li>First release with basic PowerDNS support.</li>\n</ul>\n</div>\n</div>\n<div id=\"authors\">\n<h2>Authors</h2>\n<p>Application written by <a href=\"mailto:listuser%40peternixon.net\">Peter Nixon</a> and\n<a href=\"mailto:lukasz%40langa.pl\">\u0141ukasz Langa</a>. NSEC3 code based on George Notaras\u2019\nwork with <a href=\"https://bitbucket.org/gnotaras/django-powerdns-manager\" rel=\"nofollow\">django-powerdns-manager</a>.</p>\n</div>\n\n          </div>"}, "last_serial": 1603785, "releases": {"0.9.0": [{"comment_text": "", "digests": {"md5": "b6cd059e3d1d2141071849af54899067", "sha256": "c1a1aa9d0760c11cc1171730d7dcc854755932408ab2d890a0c8e0f8f9a279e5"}, "downloads": -1, "filename": "django-powerdns-dnssec-0.9.0.tar.gz", "has_sig": false, "md5_digest": "b6cd059e3d1d2141071849af54899067", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12315, "upload_time": "2012-11-05T11:45:36", "upload_time_iso_8601": "2012-11-05T11:45:36.819545Z", "url": "https://files.pythonhosted.org/packages/38/a0/f3da3195fb37ac0e1195101e9e75a83b492f2ee755427266b2318c28732b/django-powerdns-dnssec-0.9.0.tar.gz", "yanked": false}], "0.9.1": [{"comment_text": "", "digests": {"md5": "2b333fc6b5d4fcca0cc72b59624da96b", "sha256": "7cf9cf2998d045a69672184170e0a372dbe304bbc46b4435c14735724dce8b71"}, "downloads": -1, "filename": "django-powerdns-dnssec-0.9.1.tar.gz", "has_sig": false, "md5_digest": "2b333fc6b5d4fcca0cc72b59624da96b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14861, "upload_time": "2012-11-06T11:42:54", "upload_time_iso_8601": "2012-11-06T11:42:54.233455Z", "url": "https://files.pythonhosted.org/packages/6f/65/c8f1fc48164a7c92328c3de2140fac80ab55cb266fdbf927217d8ff1a71b/django-powerdns-dnssec-0.9.1.tar.gz", "yanked": false}], "0.9.2": [{"comment_text": "", "digests": {"md5": "1a8abe4ae0860ab29c1e1452c73f06a7", "sha256": "04813f7db7655a64702a19d90bad49d71264899cbdd9a7e85e4ce0102d34a1aa"}, "downloads": -1, "filename": "django-powerdns-dnssec-0.9.2.tar.gz", "has_sig": false, "md5_digest": "1a8abe4ae0860ab29c1e1452c73f06a7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15207, "upload_time": "2012-12-20T10:16:54", "upload_time_iso_8601": "2012-12-20T10:16:54.084474Z", "url": "https://files.pythonhosted.org/packages/5a/af/84b03842d707386eab3dcd83fca9b50c6c2ec077a43e8e71d4da69942e77/django-powerdns-dnssec-0.9.2.tar.gz", "yanked": false}], "0.9.3": [{"comment_text": "", "digests": {"md5": "961460fe945de7c9d8b1b58c1fb1e9df", "sha256": "520b8dcf6b0e8ad9b3472e66d05fc87fff72a16c93f9007cdf63a6d10ce6191a"}, "downloads": -1, "filename": "django-powerdns-dnssec-0.9.3.tar.gz", "has_sig": false, "md5_digest": "961460fe945de7c9d8b1b58c1fb1e9df", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15508, "upload_time": "2013-03-27T14:07:25", "upload_time_iso_8601": "2013-03-27T14:07:25.046827Z", "url": "https://files.pythonhosted.org/packages/2e/4c/2923a406ff0809c59a2e0a401a3b486dc3bb2fe9d7242de2e7918b69878c/django-powerdns-dnssec-0.9.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "961460fe945de7c9d8b1b58c1fb1e9df", "sha256": "520b8dcf6b0e8ad9b3472e66d05fc87fff72a16c93f9007cdf63a6d10ce6191a"}, "downloads": -1, "filename": "django-powerdns-dnssec-0.9.3.tar.gz", "has_sig": false, "md5_digest": "961460fe945de7c9d8b1b58c1fb1e9df", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15508, "upload_time": "2013-03-27T14:07:25", "upload_time_iso_8601": "2013-03-27T14:07:25.046827Z", "url": "https://files.pythonhosted.org/packages/2e/4c/2923a406ff0809c59a2e0a401a3b486dc3bb2fe9d7242de2e7918b69878c/django-powerdns-dnssec-0.9.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:54:48 2020"}