{"info": {"author": "Florian Leitner", "author_email": "me@fnl.es", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Scientific/Engineering :: Information Analysis", "Topic :: Software Development :: Libraries", "Topic :: Text Processing", "Topic :: Text Processing :: Linguistic"], "description": "======\nsyntok\n======\n\n(a.k.a. segtok_ v2)\n\n.. image:: https://img.shields.io/pypi/v/syntok.svg\n    :target: https://pypi.python.org/pypi/syntok\n\n.. image:: https://travis-ci.org/fnl/syntok.svg?branch=master\n    :target: https://travis-ci.org/fnl/syntok\n\n-------------------------------------------\nSentence segmentation and word tokenization\n-------------------------------------------\n\nThe syntok package provides two modules, ``syntok.segmenter`` and ``syntok.tokenizer``.\nThe tokenizer provides functionality for splitting (Indo-European) text into words and symbols (collectively called *tokens*).\nThe segmenter provides functionality for splitting (Indo-European) token streams (from the tokenizer) into sentences and for pre-processing documents by splitting them into paragraphs.\nBoth modules can also be used from the command-line to split either a given text file (argument) or by reading from STDIN.\nWhile other Indo-European languages could work, it has only been designed with the languages Spanish, English, and German in mind (the author's main languages).\n\n``segtok``\n==========\n\nSyntok is the successor of an earlier, very similar tool, segtok_, but has evolved significantly in terms of providing better segmentation and tokenization performance and throughput (syntok can segment documents at a rate of about 100k tokens per second without problems).\nFor example, if a sentence terminal marker is not followed by a spacing character, segtok is unable to detect that as a terminal marker, while syntok has no problem segmenting that case (as it uses tokenization first, and does segmentation afterwards).\nIn fact, I feel confident enough to just boldly claim syntok is the world's best sentence segmenter for at least English, Spanish, and German.\n\nInstall\n=======\n\nTo use this package, you minimally should have Python 3.5 or installed.\nAs it uses the typing package, earlier versions are not supported.\nThe easiest way to get ``syntok`` installed is using ``pip`` or any other package manager that works with PyPI::\n\n    pip3 install syntok\n\n*Important*: If you are on a Linux machine and have problems installing the ``regex`` dependency of ``segtok``, make sure you have the ``python-dev`` and/or ``python3-dev`` packages installed to get the necessary headers to compile that package.\n\nThen try the command line tools on some plain-text files (e.g., this README) to see if ``segtok`` meets your needs::\n\n    python3 -m syntok.segmenter README.rst\n    python3 -m syntok.tokenizer README.rst\n\nTest Suite\n==========\n\nTo run the test suite, you have to have flake8, pytest, and mypy installed (``pip3 install flake8 pytest mypy``).\n\nThe testing environment works by running ``make`` targets (i.e., you need GNU Make or something equivalent around) or have to call the three commands by hand::\n\n   make check\n\n   # OR\n   flake8 syntok  # make lint\n   mypy syntok    # make type\n   pytest syntok  # make test\n\nUsage\n=====\n\nFor details, please refer to the code documentation; This README only provides an overview of the provided functionality.\n\nCommand-line\n------------\n\nAfter installing the package, two command-line usages will be available, ``python -m syntok.segmenter`` and ``python -m syntok.tokenizer``.\nEach takes [UTF-8 encoded] plain-text files (or STDIN) as input and transforms that into newline-separated sentences or space-separated tokens, respectively.\nYou can control Python3's file ``open`` encoding by `configuring the environment variable`_ ``PYTHONIOENCODING`` to your needs (e.g. ``export PYTHONIOENCODING=\"utf-16-be\"``).\nThe tokenizer produces single-space separated tokens for each input line.\nThe segmenter produces line-segmented sentences for each input file (or after STDIN closes).\n\n``syntok.tokenizer``\n--------------------\n\nThis module provides the ``Tokenizer`` class to tokenize input text into words and symbols (**value** Tokens), prefixed with (possibly empty) **spacing** strings, while recording their **offset** positions.\nThe Tokenizer comes with utility static functions, to join hyphenated words across line-breaks, and to reproduce the original string from a sequence of tokens.\nThe Tokenizer considers camelCase words as individual tokens (here: camel and Case) and by default considers underscores and Unicode hyphens *inside* words as spacing characters (not Token values).\nIt does not split numeric tokens (without letters) if they contain symbols (e.g. maintaining \"2018-11-11\", \"12:30:21\", \"1_000_000\", \"1,000.00\", or \"1..3\" all as single tokens)\nFinally, as it splits English negation contractions (such as \"don't\") into their root and \"not\" (here: do and not), it can be configured to refrain from replacing this special \"n't\" token with \"not\", and instead emit the actual \"n't\" value.\n\nTo track the spacing and offset of tokens, the module contains the ``Token`` class, which is a ``str`` wrapper class where the token **value** itself is available from the ``value`` property and adding a ``spacing`` and a ``offset`` property that will hold the **spacing** prefix and the **offset** position of the token, respectively.\n\nBasic example::\n\n   from syntok.tokenizer import Tokenizer\n\n   document = open('README.rst').read()\n   tok = Tokenizer()  # optional: keep \"n't\" contractions and \"-\", \"_\" inside words as tokens\n\n   for token in tok.tokenize(document):\n       print(repr(token))\n\n``syntok.segmenter``\n--------------------\n\nThis module provides several functions to segment documents into iterators over paragraphs, sentences, and tokens (functions ``analyze`` and ``process``) or simply sentences and tokens (functions ``split`` and ``segment``).\nThe analytic segmenter can even keep track of the original offset of each token in the document while processing (but does not join hyphen-separated words across line-breaks).\nAll segmenter functions accept arbitrary Token streams as input (typically as generated by the ``Tokenizer.tokenize`` method).\nDue to how ``syntok.tokenizer.Token`` objects \"work\", it is possible to establish the exact sentence content (with the original spacing between the tokens).\nThe pre-processing functions and paragraph-based segmentation splits paragraphs, i.e., chunks of text separated by at least two consecutive linebreaks (``\\\\r?\\\\n``).\n\nBasic example::\n\n   import syntok.segmenter as segmenter\n\n   document = open('README.rst').read()\n\n   # choose the segmentation function you need/prefer\n\n   for paragraph in segmenter.process(document):\n       for sentence in paragraph:\n           for token in sentence:\n               # roughly reproduce the input,\n               # except for hyphenated word-breaks\n               # and replacing \"n't\" contractions with \"not\",\n               # separating tokens by single spaces\n               print(token.value, end=' ')\n           print()  # print one sentence per line\n       print()  # separate paragraphs with newlines\n\n   for paragraph in segmenter.analyze(document):\n       for sentence in paragraph:\n           for token in sentence:\n               # exactly reproduce the input\n               # and do not remove \"imperfections\"\n               print(token.spacing, token.value, sep='', end='')\n       print(\"\\n\")  # reinsert paragraph separators\n\nLegal\n=====\n\nLicense: `MIT <http://opensource.org/licenses/MIT>`_\n\nCopyright (c) 2017-2019, Florian Leitner. All rights reserved.\n\n\nHistory\n=======\n\n- **1.3.0** segmenting now occurs at semi-colons, too; discussion in Issue `#9`_\n- **1.2.2** bugfix for offsets in multi-nonword prefix tokens; Issue `#6`_\n- **1.2.1** added a generic rule for catching more uncommon uses of \".\" without space suffix as abbreviation marker\n- **1.2.0** added support for skipping and handling text in brackets (e.g., citations)\n- **1.1.1** fixed non-trivial segmentation in sci. text and refactored splitting logic to one place only\n- **1.1.0** added support for ellipses (back - from segtok) in\n- **1.0.2** hyphen joining only should happen when letters are present; squash escape warnings\n- **1.0.1** fixing segmenter.analyze to preserve \"n't\" contractions, and improved the README and Tokenizer constructor API\n- **1.0.0** initial release\n\n.. _segtok: https://github.com/fnl/segtok\n.. _configuring the environment variable: https://docs.python.org/3/using/cmdline.html\n.. _#6: https://github.com/fnl/syntok/issues/6\n.. _#9: https://github.com/fnl/syntok/issues/9", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/fnl/syntok", "keywords": "sentence segmenter splitter split word tokenizer token nlp", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "syntok", "package_url": "https://pypi.org/project/syntok/", "platform": "", "project_url": "https://pypi.org/project/syntok/", "project_urls": {"Homepage": "https://github.com/fnl/syntok"}, "release_url": "https://pypi.org/project/syntok/1.3.1/", "requires_dist": null, "requires_python": "", "summary": "sentence segmentation and word tokenization toolkit", "version": "1.3.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>(a.k.a. <a href=\"https://github.com/fnl/segtok\" rel=\"nofollow\">segtok</a> v2)</p>\n<a href=\"https://pypi.python.org/pypi/syntok\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/v/syntok.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/54a4daa4a490f6993eda016fa4ed030bfea90ee5/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f73796e746f6b2e737667\"></a>\n<a href=\"https://travis-ci.org/fnl/syntok\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/fnl/syntok.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/36c66730e490ee75423093ef5d97761470c9e0e2/68747470733a2f2f7472617669732d63692e6f72672f666e6c2f73796e746f6b2e7376673f6272616e63683d6d6173746572\"></a>\n<div id=\"sentence-segmentation-and-word-tokenization\">\n<h2>Sentence segmentation and word tokenization</h2>\n<p>The syntok package provides two modules, <tt>syntok.segmenter</tt> and <tt>syntok.tokenizer</tt>.\nThe tokenizer provides functionality for splitting (Indo-European) text into words and symbols (collectively called <em>tokens</em>).\nThe segmenter provides functionality for splitting (Indo-European) token streams (from the tokenizer) into sentences and for pre-processing documents by splitting them into paragraphs.\nBoth modules can also be used from the command-line to split either a given text file (argument) or by reading from STDIN.\nWhile other Indo-European languages could work, it has only been designed with the languages Spanish, English, and German in mind (the author\u2019s main languages).</p>\n<div id=\"segtok\">\n<h3><tt>segtok</tt></h3>\n<p>Syntok is the successor of an earlier, very similar tool, <a href=\"https://github.com/fnl/segtok\" rel=\"nofollow\">segtok</a>, but has evolved significantly in terms of providing better segmentation and tokenization performance and throughput (syntok can segment documents at a rate of about 100k tokens per second without problems).\nFor example, if a sentence terminal marker is not followed by a spacing character, segtok is unable to detect that as a terminal marker, while syntok has no problem segmenting that case (as it uses tokenization first, and does segmentation afterwards).\nIn fact, I feel confident enough to just boldly claim syntok is the world\u2019s best sentence segmenter for at least English, Spanish, and German.</p>\n</div>\n<div id=\"install\">\n<h3>Install</h3>\n<p>To use this package, you minimally should have Python 3.5 or installed.\nAs it uses the typing package, earlier versions are not supported.\nThe easiest way to get <tt>syntok</tt> installed is using <tt>pip</tt> or any other package manager that works with PyPI:</p>\n<pre>pip3 install syntok\n</pre>\n<p><em>Important</em>: If you are on a Linux machine and have problems installing the <tt>regex</tt> dependency of <tt>segtok</tt>, make sure you have the <tt><span class=\"pre\">python-dev</span></tt> and/or <tt><span class=\"pre\">python3-dev</span></tt> packages installed to get the necessary headers to compile that package.</p>\n<p>Then try the command line tools on some plain-text files (e.g., this README) to see if <tt>segtok</tt> meets your needs:</p>\n<pre>python3 -m syntok.segmenter README.rst\npython3 -m syntok.tokenizer README.rst\n</pre>\n</div>\n<div id=\"test-suite\">\n<h3>Test Suite</h3>\n<p>To run the test suite, you have to have flake8, pytest, and mypy installed (<tt>pip3 install flake8 pytest mypy</tt>).</p>\n<p>The testing environment works by running <tt>make</tt> targets (i.e., you need GNU Make or something equivalent around) or have to call the three commands by hand:</p>\n<pre>make check\n\n# OR\nflake8 syntok  # make lint\nmypy syntok    # make type\npytest syntok  # make test\n</pre>\n</div>\n<div id=\"usage\">\n<h3>Usage</h3>\n<p>For details, please refer to the code documentation; This README only provides an overview of the provided functionality.</p>\n<div id=\"command-line\">\n<h4>Command-line</h4>\n<p>After installing the package, two command-line usages will be available, <tt>python <span class=\"pre\">-m</span> syntok.segmenter</tt> and <tt>python <span class=\"pre\">-m</span> syntok.tokenizer</tt>.\nEach takes [UTF-8 encoded] plain-text files (or STDIN) as input and transforms that into newline-separated sentences or space-separated tokens, respectively.\nYou can control Python3\u2019s file <tt>open</tt> encoding by <a href=\"https://docs.python.org/3/using/cmdline.html\" rel=\"nofollow\">configuring the environment variable</a> <tt>PYTHONIOENCODING</tt> to your needs (e.g. <tt>export <span class=\"pre\">PYTHONIOENCODING=\"utf-16-be\"</span></tt>).\nThe tokenizer produces single-space separated tokens for each input line.\nThe segmenter produces line-segmented sentences for each input file (or after STDIN closes).</p>\n</div>\n<div id=\"syntok-tokenizer\">\n<h4><tt>syntok.tokenizer</tt></h4>\n<p>This module provides the <tt>Tokenizer</tt> class to tokenize input text into words and symbols (<strong>value</strong> Tokens), prefixed with (possibly empty) <strong>spacing</strong> strings, while recording their <strong>offset</strong> positions.\nThe Tokenizer comes with utility static functions, to join hyphenated words across line-breaks, and to reproduce the original string from a sequence of tokens.\nThe Tokenizer considers camelCase words as individual tokens (here: camel and Case) and by default considers underscores and Unicode hyphens <em>inside</em> words as spacing characters (not Token values).\nIt does not split numeric tokens (without letters) if they contain symbols (e.g. maintaining \u201c2018-11-11\u201d, \u201c12:30:21\u201d, \u201c1_000_000\u201d, \u201c1,000.00\u201d, or \u201c1..3\u201d all as single tokens)\nFinally, as it splits English negation contractions (such as \u201cdon\u2019t\u201d) into their root and \u201cnot\u201d (here: do and not), it can be configured to refrain from replacing this special \u201cn\u2019t\u201d token with \u201cnot\u201d, and instead emit the actual \u201cn\u2019t\u201d value.</p>\n<p>To track the spacing and offset of tokens, the module contains the <tt>Token</tt> class, which is a <tt>str</tt> wrapper class where the token <strong>value</strong> itself is available from the <tt>value</tt> property and adding a <tt>spacing</tt> and a <tt>offset</tt> property that will hold the <strong>spacing</strong> prefix and the <strong>offset</strong> position of the token, respectively.</p>\n<p>Basic example:</p>\n<pre>from syntok.tokenizer import Tokenizer\n\ndocument = open('README.rst').read()\ntok = Tokenizer()  # optional: keep \"n't\" contractions and \"-\", \"_\" inside words as tokens\n\nfor token in tok.tokenize(document):\n    print(repr(token))\n</pre>\n</div>\n<div id=\"syntok-segmenter\">\n<h4><tt>syntok.segmenter</tt></h4>\n<p>This module provides several functions to segment documents into iterators over paragraphs, sentences, and tokens (functions <tt>analyze</tt> and <tt>process</tt>) or simply sentences and tokens (functions <tt>split</tt> and <tt>segment</tt>).\nThe analytic segmenter can even keep track of the original offset of each token in the document while processing (but does not join hyphen-separated words across line-breaks).\nAll segmenter functions accept arbitrary Token streams as input (typically as generated by the <tt>Tokenizer.tokenize</tt> method).\nDue to how <tt>syntok.tokenizer.Token</tt> objects \u201cwork\u201d, it is possible to establish the exact sentence content (with the original spacing between the tokens).\nThe pre-processing functions and paragraph-based segmentation splits paragraphs, i.e., chunks of text separated by at least two consecutive linebreaks (<tt><span class=\"pre\">\\\\r?\\\\n</span></tt>).</p>\n<p>Basic example:</p>\n<pre>import syntok.segmenter as segmenter\n\ndocument = open('README.rst').read()\n\n# choose the segmentation function you need/prefer\n\nfor paragraph in segmenter.process(document):\n    for sentence in paragraph:\n        for token in sentence:\n            # roughly reproduce the input,\n            # except for hyphenated word-breaks\n            # and replacing \"n't\" contractions with \"not\",\n            # separating tokens by single spaces\n            print(token.value, end=' ')\n        print()  # print one sentence per line\n    print()  # separate paragraphs with newlines\n\nfor paragraph in segmenter.analyze(document):\n    for sentence in paragraph:\n        for token in sentence:\n            # exactly reproduce the input\n            # and do not remove \"imperfections\"\n            print(token.spacing, token.value, sep='', end='')\n    print(\"\\n\")  # reinsert paragraph separators\n</pre>\n</div>\n</div>\n<div id=\"legal\">\n<h3>Legal</h3>\n<p>License: <a href=\"http://opensource.org/licenses/MIT\" rel=\"nofollow\">MIT</a></p>\n<p>Copyright (c) 2017-2019, Florian Leitner. All rights reserved.</p>\n</div>\n<div id=\"history\">\n<h3>History</h3>\n<ul>\n<li><strong>1.3.0</strong> segmenting now occurs at semi-colons, too; discussion in Issue <a href=\"https://github.com/fnl/syntok/issues/9\" rel=\"nofollow\">#9</a></li>\n<li><strong>1.2.2</strong> bugfix for offsets in multi-nonword prefix tokens; Issue <a href=\"https://github.com/fnl/syntok/issues/6\" rel=\"nofollow\">#6</a></li>\n<li><strong>1.2.1</strong> added a generic rule for catching more uncommon uses of \u201c.\u201d without space suffix as abbreviation marker</li>\n<li><strong>1.2.0</strong> added support for skipping and handling text in brackets (e.g., citations)</li>\n<li><strong>1.1.1</strong> fixed non-trivial segmentation in sci. text and refactored splitting logic to one place only</li>\n<li><strong>1.1.0</strong> added support for ellipses (back - from segtok) in</li>\n<li><strong>1.0.2</strong> hyphen joining only should happen when letters are present; squash escape warnings</li>\n<li><strong>1.0.1</strong> fixing segmenter.analyze to preserve \u201cn\u2019t\u201d contractions, and improved the README and Tokenizer constructor API</li>\n<li><strong>1.0.0</strong> initial release</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 7123673, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "d6c56d62dacbe77af7cae918e132204a", "sha256": "be5a72bb94f785dc193fabc13af129635c1862ddb368823fecd5518351588eeb"}, "downloads": -1, "filename": "syntok-1.0.0-py3.6.egg", "has_sig": false, "md5_digest": "d6c56d62dacbe77af7cae918e132204a", "packagetype": "bdist_egg", "python_version": "3.6", "requires_python": null, "size": 31247, "upload_time": "2018-11-14T23:05:45", "upload_time_iso_8601": "2018-11-14T23:05:45.143663Z", "url": "https://files.pythonhosted.org/packages/cb/8d/1344b321bd61f66345f331ef32bfbf90adf2339cfb848aecbf64a98d28e1/syntok-1.0.0-py3.6.egg", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "90b70bf2a62548d8cc9480752fc39bca", "sha256": "99533556e55ee8c0286cfa4bf8184fd2c4a6714ea9721a737fe0d9bc8ea5ebe5"}, "downloads": -1, "filename": "syntok-1.0.1.tar.gz", "has_sig": false, "md5_digest": "90b70bf2a62548d8cc9480752fc39bca", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16307, "upload_time": "2018-11-23T12:20:11", "upload_time_iso_8601": "2018-11-23T12:20:11.827501Z", "url": "https://files.pythonhosted.org/packages/2d/dc/6f025ee1d8f6988c69f1ae5cead0bc1309a9f8f17d05d3e5ff95c9440668/syntok-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "48ba5b6a5149a88146986d5bc56271d6", "sha256": "8de23974f2520730c2c9416797a78a31552ed098e72d8647db39a199c9a22ad2"}, "downloads": -1, "filename": "syntok-1.0.2.tar.gz", "has_sig": false, "md5_digest": "48ba5b6a5149a88146986d5bc56271d6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16443, "upload_time": "2018-11-23T13:06:32", "upload_time_iso_8601": "2018-11-23T13:06:32.583423Z", "url": "https://files.pythonhosted.org/packages/fe/72/373b8f1fb29a0f39a086745bf94a57707a878564bc10255ab524a45eb1ec/syntok-1.0.2.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "6432fab039cb2a5dabad9ff95327a1ff", "sha256": "b986b8c48c2430ce7514e3a7c6df56894758673a10896ef0f6a94236776febb7"}, "downloads": -1, "filename": "syntok-1.1.0.tar.gz", "has_sig": false, "md5_digest": "6432fab039cb2a5dabad9ff95327a1ff", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16656, "upload_time": "2019-02-09T22:07:39", "upload_time_iso_8601": "2019-02-09T22:07:39.844582Z", "url": "https://files.pythonhosted.org/packages/9f/a1/b2e18c77d3bd13b7062d3566f46e38182bafe559635dc456d195e20b1ca8/syntok-1.1.0.tar.gz", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "c3ce99e9ad6d2c7745e9456fe3fd35ca", "sha256": "c255238f7bdd7c650a9e5032a6f4f290124e4234f9750e764bf4b899f86613b5"}, "downloads": -1, "filename": "syntok-1.1.1.tar.gz", "has_sig": false, "md5_digest": "c3ce99e9ad6d2c7745e9456fe3fd35ca", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20138, "upload_time": "2019-03-28T21:54:26", "upload_time_iso_8601": "2019-03-28T21:54:26.995853Z", "url": "https://files.pythonhosted.org/packages/89/c5/863fc93fdef607ecc8b5c4d90386feae3a6359b51cfe3d1f3e5970478ff4/syntok-1.1.1.tar.gz", "yanked": false}], "1.2.0": [{"comment_text": "", "digests": {"md5": "b30fc7efefca358c6ae0be7ceeaa2e14", "sha256": "c97b4501ae71c88b2beba245ca0d146641ebbecc09fc27d4d02ff03fabbc65db"}, "downloads": -1, "filename": "syntok-1.2.0.tar.gz", "has_sig": false, "md5_digest": "b30fc7efefca358c6ae0be7ceeaa2e14", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22164, "upload_time": "2019-05-17T17:23:24", "upload_time_iso_8601": "2019-05-17T17:23:24.519283Z", "url": "https://files.pythonhosted.org/packages/05/d2/b948a211c5190f57832d8bfe35842a5fc95d90f7c5101b185f8e7f6a697f/syntok-1.2.0.tar.gz", "yanked": false}], "1.2.1": [{"comment_text": "", "digests": {"md5": "5a985aef41326d93884c7402af0ec960", "sha256": "473e18fd93beaca51cae888fcfd0e85156a93c66c1ed836e1cbeee4341e320fa"}, "downloads": -1, "filename": "syntok-1.2.1.tar.gz", "has_sig": false, "md5_digest": "5a985aef41326d93884c7402af0ec960", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22561, "upload_time": "2019-05-18T21:39:54", "upload_time_iso_8601": "2019-05-18T21:39:54.446522Z", "url": "https://files.pythonhosted.org/packages/fd/dc/cab829908c5a46e447f21c2f8faea839de4f1fbe4742c6aff83c300b888b/syntok-1.2.1.tar.gz", "yanked": false}], "1.2.2": [{"comment_text": "", "digests": {"md5": "3e494b1af4af09dbdbc09e2cc579698f", "sha256": "6e77ce0ccdb292bfc6a3ca7b3ba59771236e19fa53e3b49cd928022b1819e19e"}, "downloads": -1, "filename": "syntok-1.2.2.tar.gz", "has_sig": false, "md5_digest": "3e494b1af4af09dbdbc09e2cc579698f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22724, "upload_time": "2019-11-11T14:58:34", "upload_time_iso_8601": "2019-11-11T14:58:34.187663Z", "url": "https://files.pythonhosted.org/packages/ff/36/5b423791cd877a21c2771a2b070194270f163f2969066923f89aa3099e2d/syntok-1.2.2.tar.gz", "yanked": false}], "1.3.0": [{"comment_text": "", "digests": {"md5": "4ba2a35978d932756f22cd96f1510183", "sha256": "7c3cd7d2ce50beccddbb4af8951dfe515ec49858df3a6516f66618ea3b09f8b1"}, "downloads": -1, "filename": "syntok-1.3.0.macosx-10.15-x86_64.tar.gz", "has_sig": false, "md5_digest": "4ba2a35978d932756f22cd96f1510183", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 39998, "upload_time": "2020-04-28T21:35:26", "upload_time_iso_8601": "2020-04-28T21:35:26.816609Z", "url": "https://files.pythonhosted.org/packages/62/bb/c5235ad69060882083ba52a3db39c99316ff383dbbf9781ebea1f05b6ffe/syntok-1.3.0.macosx-10.15-x86_64.tar.gz", "yanked": true}], "1.3.1": [{"comment_text": "", "digests": {"md5": "28ad18f040f374e6597fe0fc6e93990b", "sha256": "4e10ed25e5cd131138fe75ae39917f6d70deab07da57726564f602daa2d5303e"}, "downloads": -1, "filename": "syntok-1.3.1.tar.gz", "has_sig": false, "md5_digest": "28ad18f040f374e6597fe0fc6e93990b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23074, "upload_time": "2020-04-28T21:39:31", "upload_time_iso_8601": "2020-04-28T21:39:31.398555Z", "url": "https://files.pythonhosted.org/packages/8c/76/a49e73a04b3e3a14ce232e8e28a1587f8108baa665644fe8c40e307e792e/syntok-1.3.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "28ad18f040f374e6597fe0fc6e93990b", "sha256": "4e10ed25e5cd131138fe75ae39917f6d70deab07da57726564f602daa2d5303e"}, "downloads": -1, "filename": "syntok-1.3.1.tar.gz", "has_sig": false, "md5_digest": "28ad18f040f374e6597fe0fc6e93990b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23074, "upload_time": "2020-04-28T21:39:31", "upload_time_iso_8601": "2020-04-28T21:39:31.398555Z", "url": "https://files.pythonhosted.org/packages/8c/76/a49e73a04b3e3a14ce232e8e28a1587f8108baa665644fe8c40e307e792e/syntok-1.3.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:58:57 2020"}