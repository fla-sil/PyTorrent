{"info": {"author": "Ross Patterson", "author_email": "me@rpatterson.net", "bugtrack_url": null, "classifiers": ["Programming Language :: Python", "Topic :: Software Development :: Libraries :: Python Modules"], "description": ".. -*-doctest-*-\n\n=================\nContent Templates\n=================\n\nThe `collective.contemplate\n<http://pypi.python.org/pypi/collective.contemplate>`_ package allows\nsite administrators to designate content items as the template from\nwhich new items of that type will be created.\n\nWhen creating content from a template, the initial edit form is\nrendered and validation performed on the template after changing the\nowner of the template to the current user within a\ntransaction.savepoint() which is rolled back after rendering.  As a\nresult, portal_factory is not involved and indexing occurs only on the\nfinal copy of the template.  This may result in performance gains\nthough this has not been tested.\n\nWhile designed to be Archetypes agnostic, only an Archetypes\nimplementation is currently provided.  Templates may currently be\ndesignated using Archetype UIDs for the global templates or references\nfor the context specific templates.\n\nA reserved_id property can also be set on type information objects in\nportal_types.  If set and an object with that ID already exists in the\ncontainer, then the type is not allowed to be added.\n\n.. contents:: Table of Contents\n\nInstallation\n============\n\nTo use collective.contemplate for the Plone content types, include the\ncollective.contemplate configure.zcml in your instance and install\n\"Content Templates\" in the \"Add-on Products\" control panel, or in the\nZMI through portal_setup.  This will replace the Plone content type\ninformation with template versions.\n\nTo install for other content types, register a template add form for\nthe content type and use the TemplateDynamicViewTypeInfo meta_type for\nthe content type information.\n\nIn the ZCML for the browser views::\n\n    <contemplate:formControllerPage\n         name=\"addFoo\"\n         type_name=\"Foo\"\n         for=\"zope.app.container.interfaces.IAdding\"\n         permission=\"foo.AddFoo\" />\n\nNote that the \"foo.AddFoo\" permission must be registered and the name\n\"addFoo\" must be the same as your content type constructor.  If you're\nusing Archetypes, then the constructor may auto-generated by prefixing\n\"add\" to the content class name.\n\nIn the GenericSetup profile types.xml file::\n\n    <object name=\"Foo\" meta_type=\"TemplateDynamicViewTypeInfo \"/>\n\nIn the GenericSetup profile types/Foo.xml file::\n\n    <?xml version=\"1.0\"?>\n    <object name=\"Foo\"\n       meta_type=\"TemplateDynamicViewTypeInfo\">\n\nUsage\n=====\n\nThis package is currently incomplete until a UI for designating\ntemplates is included.  In the mean time, you may set the global\ntemplates in the ZMI or context specific templates using the\nreferences GenericSetup import handler provided by collective.gsqi.\n\nYou can use a given content item as the global template by setting the\nglobal_uid property of the content type information under portal_types\nin the ZMI.  Set global_uid to the Archetypes UID of the template.\n\nYou can use a content item as the template in the context of a\nspecific folder by setting a reference from the folder to the item\nwith the relationship of \"contemplate.${type_info/getId}\" where\n\"${type_info/getId}\" is the id of the content type.  \n\nA reserved id can be set using the reserved_id property of the content\ntype information under portal_types in the ZMI.\n\nContext Templates\n=================\n\nOpen a browser and log in as a user who is allowed to administer\ntemplates.\n\n    >>> from Products.Five.testbrowser import Browser\n    >>> from Products.PloneTestCase import ptc\n    >>> owner_browser = Browser()\n    >>> owner_browser.handleErrors = False\n    >>> owner_browser.open(portal.absolute_url())\n    >>> owner_browser.getLink('Log in').click()\n    >>> owner_browser.getControl(\n    ...     'Login Name').value = ptc.portal_owner\n    >>> owner_browser.getControl(\n    ...     'Password').value = ptc.default_password\n    >>> owner_browser.getControl('Log in').click()\n\nBefore we've added a template, adding content proceeds as before with\nfields empty.\n\n    >>> owner_browser.open(portal.Members.absolute_url())\n    >>> owner_browser.getLink(url='/+/addATDocument').click()\n    >>> owner_browser.url\n    'http://nohost/plone/Members/portal_factory/Document/document.../edit'\n    >>> owner_browser.getControl('Title').value\n    ''\n    >>> owner_browser.getControl('Description').value\n    ''\n\nFinish creating the page to use as a template.\n\n    >>> owner_browser.getControl('Title').value = 'Foo Template Title'\n    >>> owner_browser.getControl(\n    ...     'Description').value = 'Foo Template Description'\n    >>> owner_browser.getControl('Save').click()\n    >>> print owner_browser.contents\n    <...\n    ...Changes saved...\n    ...Foo Template Title...\n    ...Foo Template Description...\n\nMake sure the template is visible to users that will use it as a\ntemplate.\n\n    >>> self.loginAsPortalOwner()\n    >>> portal.portal_workflow.doActionFor(\n    ...     portal.Members['foo-template-title'], 'publish')\n    >>> self.logout()\n\nA user with rights to administer templates may designate the page as a\ntemplate for the Page content type in that folder and below using\n\"Make template\" in the actions menu.\n\n    >>> portal.Members.addReference(\n    ...     portal.Members['foo-template-title'],\n    ...     relationship='contemplate.Document')\n    <Reference sid:... tid:... rel:contemplate.Document>\n\nOpen another browser and log in as a normal user.\n\n    >>> from Products.Five.testbrowser import Browser\n    >>> from Products.PloneTestCase import ptc\n    >>> contributor_browser = Browser()\n    >>> contributor_browser.handleErrors = False\n    >>> contributor_browser.open(portal.absolute_url())\n    >>> contributor_browser.getLink('Log in').click()\n    >>> contributor_browser.getControl(\n    ...     'Login Name').value = ptc.default_user\n    >>> contributor_browser.getControl(\n    ...     'Password').value = ptc.default_password\n    >>> contributor_browser.getControl('Log in').click()\n\nOnce a template has been designated, adding an item of the same\ncontent type in that folder or below will use the template.\n\n    >>> contributor_browser.open(folder.absolute_url())\n    >>> contributor_browser.getLink(url='/+/addATDocument').click()\n    >>> contributor_browser.getControl('Title').value\n    'Foo Template Title'\n    >>> contributor_browser.getControl('Description').value\n    'Foo Template Description'\n\nThe edit page will be rendered and validated against the template\nwithout copying or otherwise instantiating new content.\n\n    >>> contributor_browser.getControl('Title').value = ''\n    >>> contributor_browser.getControl('Save').click()\n    >>> print contributor_browser.contents\n    <...\n    ...Please correct the indicated errors...\n    ...Title is required...\n    >>> contributor_browser.url\n    'http://nohost/plone/Members/test_user_1_/+/addATDocument'\n    >>> portal.Members.contentValues()\n    [<ATDocument at /plone/Members/foo-template-title>,\n     <ATFolder at /plone/Members/test_user_1_>]\n    >>> folder.contentValues()\n    []\n\nSuccessfully saving the form will copy the template and modify it with\nthe submitted form data.\n\n    >>> contributor_browser.getControl('Title').value = 'Foo Page Title'\n    >>> contributor_browser.getControl('Save').click()\n    >>> contributor_browser.url\n    'http://nohost/plone/Members/test_user_1_/foo-page-title'\n    >>> print contributor_browser.contents\n    <...\n    ...Changes saved...\n    Foo Page Title...\n    Foo Template Description...\n    >>> portal.Members.contentValues()\n    [<ATDocument at /plone/Members/foo-template-title>,\n     <ATFolder at /plone/Members/test_user_1_>]\n    >>> folder.contentValues()\n    [<ATDocument at /plone/Members/test_user_1_/foo-page-title>]\n\nThe content added from the template behaves as other content and is\neditable by the owner.\n\n    >>> contributor_browser.getLink('Edit')\n    <Link text='Edit' url='http://nohost/plone/Members/test_user_1_/foo-page-title/edit'>\n\nA user without rights to administer templates may not designate\ncontent as a template.\n\n    >>> contributor_browser.getLink('Make template')\n    Traceback (most recent call last):\n    LinkNotFoundError\n\nThe template's permissions and field values have not been changed.\n\n    >>> owner_browser.open(\n    ...     portal.Members['foo-template-title'].absolute_url())\n    >>> print owner_browser.contents\n    <...\n    ...Foo Template Title...\n    ...Foo Template Description...\n\n    >>> contributor_browser.open(\n    ...     portal.Members['foo-template-title'].absolute_url())\n    >>> contributor_browser.getLink('Edit')\n    Traceback (most recent call last):\n    LinkNotFoundError\n\nThe template for a given content type may be replaced using the \"Make\ntemplate\" action on the new template.\n\n    >>> portal.Members.deleteReference(\n    ...     portal.Members['foo-template-title'],\n    ...     relationship='contemplate.Document')\n    >>> portal.Members.addReference(\n    ...     folder['foo-page-title'],\n    ...     relationship='contemplate.Document')\n    <Reference sid:... tid:... rel:contemplate.Document>\n\n    >>> contributor_browser.open(folder.absolute_url())\n    >>> contributor_browser.getLink(url='/+/addATDocument').click()\n    >>> contributor_browser.getControl('Title').value\n    'Foo Page Title'\n\nThe template may also be removed using the \"Remove template\" action on\nthe template based add form.\n\n    >>> portal.Members.deleteReference(\n    ...     folder['foo-page-title'],\n    ...     relationship='contemplate.Document')\n\n    >>> contributor_browser.open(folder.absolute_url())\n    >>> contributor_browser.getLink(url='/+/addATDocument').click()\n    >>> contributor_browser.url\n    'http://nohost/plone/Members/test_user_1_/portal_factory/Document/document.../edit'\n    >>> contributor_browser.getControl('Title').value\n    ''\n    >>> contributor_browser.getControl('Description').value\n    ''\n\nGlobal Templates\n================\n\nA template can be designated as the global template for a given portal\ntype.  To do so set, the \"Global Template UID\" property of the type\ninfo in the portal_types tool to the UID of the template object.\n\nCreate an event as the template.\n\n    >>> self.loginAsPortalOwner()\n    >>> foo_event = portal[portal.invokeFactory(\n    ...     type_name='Event', id='event-template-title',\n    ...     title='Event Template Title',\n    ...     description='Event template description')]\n\nSet the type info property to the UID for the event template.\n\n    >>> portal.portal_types.Event.manage_changeProperties(\n    ...     global_uid=foo_event.UID())\n\nNow when an event is added through the browser, it will be created\nfrom the template.\n\n    >>> contributor_browser.open(folder.absolute_url())\n    >>> contributor_browser.getLink(url='/+/addATEvent').click()\n    >>> contributor_browser.getControl('Title').value\n    'Event Template Title'\n    >>> contributor_browser.getControl('Description').value\n    'Event template description'\n\nReserved IDs\n============\n\nA reserved_id property can also be set on type information objects in\nportal_types.  If set and an object with that ID already exists in the\ncontainer, then the type is not allowed to be added.\n\n    >>> self.login()\n    >>> folder.allowedContentTypes()\n    [<TemplateDynamicViewTypeInfo at /plone/portal_types/Document>,\n     <TemplateDynamicViewTypeInfo at /plone/portal_types/Event>,\n     <TemplateDynamicViewTypeInfo at /plone/portal_types/Favorite>,\n     <TemplateDynamicViewTypeInfo at /plone/portal_types/File>,\n     <TemplateDynamicViewTypeInfo at /plone/portal_types/Folder>,\n     <TemplateDynamicViewTypeInfo at /plone/portal_types/Image>,\n     <TemplateDynamicViewTypeInfo at /plone/portal_types/Link>,\n     <TemplateDynamicViewTypeInfo at /plone/portal_types/News Item>]\n    >>> portal.portal_types.Document.reserved_id = 'foo-page-title'\n    >>> folder.allowedContentTypes()\n    [<TemplateDynamicViewTypeInfo at /plone/portal_types/Event>,\n     <TemplateDynamicViewTypeInfo at /plone/portal_types/Favorite>,\n     <TemplateDynamicViewTypeInfo at /plone/portal_types/File>,\n     <TemplateDynamicViewTypeInfo at /plone/portal_types/Folder>,\n     <TemplateDynamicViewTypeInfo at /plone/portal_types/Image>,\n     <TemplateDynamicViewTypeInfo at /plone/portal_types/Link>,\n     <TemplateDynamicViewTypeInfo at /plone/portal_types/News Item>]\n\nChangelog\n=========\n\n0.1 - Unreleased\n----------------\n\n* Initial release\n\n\nTODO\n====\n\n* Add UI to the types control for selecting a global template\n\n* Add UI to folders for specifying context templates\n\n    >>> owner_browser.getLink('Make template').click()\n    >>> print owner_browser.contents\n    <...\n    ...Item designated as the template...\n\n    >>> owner_browser.open(folder['foo-page-title'].absolute_url())\n    >>> owner_browser.getLink('Make template').click()\n    >>> print owner_browser.contents\n    <...\n    ...Item designated as the template...\n\n    >>> owner_browser.open(folder.absolute_url())\n    >>> owner_browser.getLink(url='/+/addATDocument').click()\n    >>> owner_browser.getLink('Remove template').click()\n    >>> print owner_browser.contents\n    <...\n    ...Item removed as the template...\n    >>> contributor_browser.url\n    'http://nohost/plone/Members/foo-template-title'\n\n* Further avoid redundant indexing\n\n  Implement manage_pasteObjects and manage_renameObject, such that no\n  indexing is performed and leave indexing to the edit form handling.\n\n  This might cause problems with programmatic use.  Look at\n  experimental.contentcreation.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://pypi.python.org/pypi/collective.contemplate", "keywords": "", "license": "GPL", "maintainer": null, "maintainer_email": null, "name": "collective.contemplate", "package_url": "https://pypi.org/project/collective.contemplate/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/collective.contemplate/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://pypi.python.org/pypi/collective.contemplate"}, "release_url": "https://pypi.org/project/collective.contemplate/0.1/", "requires_dist": null, "requires_python": null, "summary": "Add content from existing content templates", "version": "0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>The <a href=\"http://pypi.python.org/pypi/collective.contemplate\" rel=\"nofollow\">collective.contemplate</a> package allows\nsite administrators to designate content items as the template from\nwhich new items of that type will be created.</p>\n<p>When creating content from a template, the initial edit form is\nrendered and validation performed on the template after changing the\nowner of the template to the current user within a\ntransaction.savepoint() which is rolled back after rendering.  As a\nresult, portal_factory is not involved and indexing occurs only on the\nfinal copy of the template.  This may result in performance gains\nthough this has not been tested.</p>\n<p>While designed to be Archetypes agnostic, only an Archetypes\nimplementation is currently provided.  Templates may currently be\ndesignated using Archetype UIDs for the global templates or references\nfor the context specific templates.</p>\n<p>A reserved_id property can also be set on type information objects in\nportal_types.  If set and an object with that ID already exists in the\ncontainer, then the type is not allowed to be added.</p>\n<div id=\"table-of-contents\">\n<p>Table of Contents</p>\n<ul>\n<li><a href=\"#installation\" id=\"id1\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"#usage\" id=\"id2\" rel=\"nofollow\">Usage</a></li>\n<li><a href=\"#context-templates\" id=\"id3\" rel=\"nofollow\">Context Templates</a></li>\n<li><a href=\"#global-templates\" id=\"id4\" rel=\"nofollow\">Global Templates</a></li>\n<li><a href=\"#reserved-ids\" id=\"id5\" rel=\"nofollow\">Reserved IDs</a></li>\n<li><a href=\"#changelog\" id=\"id6\" rel=\"nofollow\">Changelog</a></li>\n<li><a href=\"#todo\" id=\"id7\" rel=\"nofollow\">TODO</a></li>\n</ul>\n</div>\n<div id=\"installation\">\n<h2><a href=\"#id1\" rel=\"nofollow\">Installation</a></h2>\n<p>To use collective.contemplate for the Plone content types, include the\ncollective.contemplate configure.zcml in your instance and install\n\u201cContent Templates\u201d in the \u201cAdd-on Products\u201d control panel, or in the\nZMI through portal_setup.  This will replace the Plone content type\ninformation with template versions.</p>\n<p>To install for other content types, register a template add form for\nthe content type and use the TemplateDynamicViewTypeInfo meta_type for\nthe content type information.</p>\n<p>In the ZCML for the browser views:</p>\n<pre>&lt;contemplate:formControllerPage\n     name=\"addFoo\"\n     type_name=\"Foo\"\n     for=\"zope.app.container.interfaces.IAdding\"\n     permission=\"foo.AddFoo\" /&gt;\n</pre>\n<p>Note that the \u201cfoo.AddFoo\u201d permission must be registered and the name\n\u201caddFoo\u201d must be the same as your content type constructor.  If you\u2019re\nusing Archetypes, then the constructor may auto-generated by prefixing\n\u201cadd\u201d to the content class name.</p>\n<p>In the GenericSetup profile types.xml file:</p>\n<pre>&lt;object name=\"Foo\" meta_type=\"TemplateDynamicViewTypeInfo \"/&gt;\n</pre>\n<p>In the GenericSetup profile types/Foo.xml file:</p>\n<pre>&lt;?xml version=\"1.0\"?&gt;\n&lt;object name=\"Foo\"\n   meta_type=\"TemplateDynamicViewTypeInfo\"&gt;\n</pre>\n</div>\n<div id=\"usage\">\n<h2><a href=\"#id2\" rel=\"nofollow\">Usage</a></h2>\n<p>This package is currently incomplete until a UI for designating\ntemplates is included.  In the mean time, you may set the global\ntemplates in the ZMI or context specific templates using the\nreferences GenericSetup import handler provided by collective.gsqi.</p>\n<p>You can use a given content item as the global template by setting the\nglobal_uid property of the content type information under portal_types\nin the ZMI.  Set global_uid to the Archetypes UID of the template.</p>\n<p>You can use a content item as the template in the context of a\nspecific folder by setting a reference from the folder to the item\nwith the relationship of \u201ccontemplate.${type_info/getId}\u201d where\n\u201c${type_info/getId}\u201d is the id of the content type.</p>\n<p>A reserved id can be set using the reserved_id property of the content\ntype information under portal_types in the ZMI.</p>\n</div>\n<div id=\"context-templates\">\n<h2><a href=\"#id3\" rel=\"nofollow\">Context Templates</a></h2>\n<p>Open a browser and log in as a user who is allowed to administer\ntemplates.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; from Products.Five.testbrowser import Browser\n&gt;&gt;&gt; from Products.PloneTestCase import ptc\n&gt;&gt;&gt; owner_browser = Browser()\n&gt;&gt;&gt; owner_browser.handleErrors = False\n&gt;&gt;&gt; owner_browser.open(portal.absolute_url())\n&gt;&gt;&gt; owner_browser.getLink('Log in').click()\n&gt;&gt;&gt; owner_browser.getControl(\n...     'Login Name').value = ptc.portal_owner\n&gt;&gt;&gt; owner_browser.getControl(\n...     'Password').value = ptc.default_password\n&gt;&gt;&gt; owner_browser.getControl('Log in').click()\n</pre>\n</blockquote>\n<p>Before we\u2019ve added a template, adding content proceeds as before with\nfields empty.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; owner_browser.open(portal.Members.absolute_url())\n&gt;&gt;&gt; owner_browser.getLink(url='/+/addATDocument').click()\n&gt;&gt;&gt; owner_browser.url\n'http://nohost/plone/Members/portal_factory/Document/document.../edit'\n&gt;&gt;&gt; owner_browser.getControl('Title').value\n''\n&gt;&gt;&gt; owner_browser.getControl('Description').value\n''\n</pre>\n</blockquote>\n<p>Finish creating the page to use as a template.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; owner_browser.getControl('Title').value = 'Foo Template Title'\n&gt;&gt;&gt; owner_browser.getControl(\n...     'Description').value = 'Foo Template Description'\n&gt;&gt;&gt; owner_browser.getControl('Save').click()\n&gt;&gt;&gt; print owner_browser.contents\n&lt;...\n...Changes saved...\n...Foo Template Title...\n...Foo Template Description...\n</pre>\n</blockquote>\n<p>Make sure the template is visible to users that will use it as a\ntemplate.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; self.loginAsPortalOwner()\n&gt;&gt;&gt; portal.portal_workflow.doActionFor(\n...     portal.Members['foo-template-title'], 'publish')\n&gt;&gt;&gt; self.logout()\n</pre>\n</blockquote>\n<p>A user with rights to administer templates may designate the page as a\ntemplate for the Page content type in that folder and below using\n\u201cMake template\u201d in the actions menu.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; portal.Members.addReference(\n...     portal.Members['foo-template-title'],\n...     relationship='contemplate.Document')\n&lt;Reference sid:... tid:... rel:contemplate.Document&gt;\n</pre>\n</blockquote>\n<p>Open another browser and log in as a normal user.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; from Products.Five.testbrowser import Browser\n&gt;&gt;&gt; from Products.PloneTestCase import ptc\n&gt;&gt;&gt; contributor_browser = Browser()\n&gt;&gt;&gt; contributor_browser.handleErrors = False\n&gt;&gt;&gt; contributor_browser.open(portal.absolute_url())\n&gt;&gt;&gt; contributor_browser.getLink('Log in').click()\n&gt;&gt;&gt; contributor_browser.getControl(\n...     'Login Name').value = ptc.default_user\n&gt;&gt;&gt; contributor_browser.getControl(\n...     'Password').value = ptc.default_password\n&gt;&gt;&gt; contributor_browser.getControl('Log in').click()\n</pre>\n</blockquote>\n<p>Once a template has been designated, adding an item of the same\ncontent type in that folder or below will use the template.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; contributor_browser.open(folder.absolute_url())\n&gt;&gt;&gt; contributor_browser.getLink(url='/+/addATDocument').click()\n&gt;&gt;&gt; contributor_browser.getControl('Title').value\n'Foo Template Title'\n&gt;&gt;&gt; contributor_browser.getControl('Description').value\n'Foo Template Description'\n</pre>\n</blockquote>\n<p>The edit page will be rendered and validated against the template\nwithout copying or otherwise instantiating new content.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; contributor_browser.getControl('Title').value = ''\n&gt;&gt;&gt; contributor_browser.getControl('Save').click()\n&gt;&gt;&gt; print contributor_browser.contents\n&lt;...\n...Please correct the indicated errors...\n...Title is required...\n&gt;&gt;&gt; contributor_browser.url\n'http://nohost/plone/Members/test_user_1_/+/addATDocument'\n&gt;&gt;&gt; portal.Members.contentValues()\n[&lt;ATDocument at /plone/Members/foo-template-title&gt;,\n &lt;ATFolder at /plone/Members/test_user_1_&gt;]\n&gt;&gt;&gt; folder.contentValues()\n[]\n</pre>\n</blockquote>\n<p>Successfully saving the form will copy the template and modify it with\nthe submitted form data.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; contributor_browser.getControl('Title').value = 'Foo Page Title'\n&gt;&gt;&gt; contributor_browser.getControl('Save').click()\n&gt;&gt;&gt; contributor_browser.url\n'http://nohost/plone/Members/test_user_1_/foo-page-title'\n&gt;&gt;&gt; print contributor_browser.contents\n&lt;...\n...Changes saved...\nFoo Page Title...\nFoo Template Description...\n&gt;&gt;&gt; portal.Members.contentValues()\n[&lt;ATDocument at /plone/Members/foo-template-title&gt;,\n &lt;ATFolder at /plone/Members/test_user_1_&gt;]\n&gt;&gt;&gt; folder.contentValues()\n[&lt;ATDocument at /plone/Members/test_user_1_/foo-page-title&gt;]\n</pre>\n</blockquote>\n<p>The content added from the template behaves as other content and is\neditable by the owner.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; contributor_browser.getLink('Edit')\n&lt;Link text='Edit' url='http://nohost/plone/Members/test_user_1_/foo-page-title/edit'&gt;\n</pre>\n</blockquote>\n<p>A user without rights to administer templates may not designate\ncontent as a template.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; contributor_browser.getLink('Make template')\nTraceback (most recent call last):\nLinkNotFoundError\n</pre>\n</blockquote>\n<p>The template\u2019s permissions and field values have not been changed.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; owner_browser.open(\n...     portal.Members['foo-template-title'].absolute_url())\n&gt;&gt;&gt; print owner_browser.contents\n&lt;...\n...Foo Template Title...\n...Foo Template Description...\n</pre>\n<pre>&gt;&gt;&gt; contributor_browser.open(\n...     portal.Members['foo-template-title'].absolute_url())\n&gt;&gt;&gt; contributor_browser.getLink('Edit')\nTraceback (most recent call last):\nLinkNotFoundError\n</pre>\n</blockquote>\n<p>The template for a given content type may be replaced using the \u201cMake\ntemplate\u201d action on the new template.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; portal.Members.deleteReference(\n...     portal.Members['foo-template-title'],\n...     relationship='contemplate.Document')\n&gt;&gt;&gt; portal.Members.addReference(\n...     folder['foo-page-title'],\n...     relationship='contemplate.Document')\n&lt;Reference sid:... tid:... rel:contemplate.Document&gt;\n</pre>\n<pre>&gt;&gt;&gt; contributor_browser.open(folder.absolute_url())\n&gt;&gt;&gt; contributor_browser.getLink(url='/+/addATDocument').click()\n&gt;&gt;&gt; contributor_browser.getControl('Title').value\n'Foo Page Title'\n</pre>\n</blockquote>\n<p>The template may also be removed using the \u201cRemove template\u201d action on\nthe template based add form.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; portal.Members.deleteReference(\n...     folder['foo-page-title'],\n...     relationship='contemplate.Document')\n</pre>\n<pre>&gt;&gt;&gt; contributor_browser.open(folder.absolute_url())\n&gt;&gt;&gt; contributor_browser.getLink(url='/+/addATDocument').click()\n&gt;&gt;&gt; contributor_browser.url\n'http://nohost/plone/Members/test_user_1_/portal_factory/Document/document.../edit'\n&gt;&gt;&gt; contributor_browser.getControl('Title').value\n''\n&gt;&gt;&gt; contributor_browser.getControl('Description').value\n''\n</pre>\n</blockquote>\n</div>\n<div id=\"global-templates\">\n<h2><a href=\"#id4\" rel=\"nofollow\">Global Templates</a></h2>\n<p>A template can be designated as the global template for a given portal\ntype.  To do so set, the \u201cGlobal Template UID\u201d property of the type\ninfo in the portal_types tool to the UID of the template object.</p>\n<p>Create an event as the template.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; self.loginAsPortalOwner()\n&gt;&gt;&gt; foo_event = portal[portal.invokeFactory(\n...     type_name='Event', id='event-template-title',\n...     title='Event Template Title',\n...     description='Event template description')]\n</pre>\n</blockquote>\n<p>Set the type info property to the UID for the event template.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; portal.portal_types.Event.manage_changeProperties(\n...     global_uid=foo_event.UID())\n</pre>\n</blockquote>\n<p>Now when an event is added through the browser, it will be created\nfrom the template.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; contributor_browser.open(folder.absolute_url())\n&gt;&gt;&gt; contributor_browser.getLink(url='/+/addATEvent').click()\n&gt;&gt;&gt; contributor_browser.getControl('Title').value\n'Event Template Title'\n&gt;&gt;&gt; contributor_browser.getControl('Description').value\n'Event template description'\n</pre>\n</blockquote>\n</div>\n<div id=\"reserved-ids\">\n<h2><a href=\"#id5\" rel=\"nofollow\">Reserved IDs</a></h2>\n<p>A reserved_id property can also be set on type information objects in\nportal_types.  If set and an object with that ID already exists in the\ncontainer, then the type is not allowed to be added.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; self.login()\n&gt;&gt;&gt; folder.allowedContentTypes()\n[&lt;TemplateDynamicViewTypeInfo at /plone/portal_types/Document&gt;,\n &lt;TemplateDynamicViewTypeInfo at /plone/portal_types/Event&gt;,\n &lt;TemplateDynamicViewTypeInfo at /plone/portal_types/Favorite&gt;,\n &lt;TemplateDynamicViewTypeInfo at /plone/portal_types/File&gt;,\n &lt;TemplateDynamicViewTypeInfo at /plone/portal_types/Folder&gt;,\n &lt;TemplateDynamicViewTypeInfo at /plone/portal_types/Image&gt;,\n &lt;TemplateDynamicViewTypeInfo at /plone/portal_types/Link&gt;,\n &lt;TemplateDynamicViewTypeInfo at /plone/portal_types/News Item&gt;]\n&gt;&gt;&gt; portal.portal_types.Document.reserved_id = 'foo-page-title'\n&gt;&gt;&gt; folder.allowedContentTypes()\n[&lt;TemplateDynamicViewTypeInfo at /plone/portal_types/Event&gt;,\n &lt;TemplateDynamicViewTypeInfo at /plone/portal_types/Favorite&gt;,\n &lt;TemplateDynamicViewTypeInfo at /plone/portal_types/File&gt;,\n &lt;TemplateDynamicViewTypeInfo at /plone/portal_types/Folder&gt;,\n &lt;TemplateDynamicViewTypeInfo at /plone/portal_types/Image&gt;,\n &lt;TemplateDynamicViewTypeInfo at /plone/portal_types/Link&gt;,\n &lt;TemplateDynamicViewTypeInfo at /plone/portal_types/News Item&gt;]\n</pre>\n</blockquote>\n</div>\n<div id=\"changelog\">\n<h2><a href=\"#id6\" rel=\"nofollow\">Changelog</a></h2>\n<h2 id=\"unreleased\"><span class=\"section-subtitle\">0.1 - Unreleased</span></h2>\n<ul>\n<li>Initial release</li>\n</ul>\n</div>\n<div id=\"todo\">\n<h2><a href=\"#id7\" rel=\"nofollow\">TODO</a></h2>\n<ul>\n<li><p>Add UI to the types control for selecting a global template</p>\n</li>\n<li><p>Add UI to folders for specifying context templates</p>\n<blockquote>\n<pre>&gt;&gt;&gt; owner_browser.getLink('Make template').click()\n&gt;&gt;&gt; print owner_browser.contents\n&lt;...\n...Item designated as the template...\n</pre>\n<pre>&gt;&gt;&gt; owner_browser.open(folder['foo-page-title'].absolute_url())\n&gt;&gt;&gt; owner_browser.getLink('Make template').click()\n&gt;&gt;&gt; print owner_browser.contents\n&lt;...\n...Item designated as the template...\n</pre>\n<pre>&gt;&gt;&gt; owner_browser.open(folder.absolute_url())\n&gt;&gt;&gt; owner_browser.getLink(url='/+/addATDocument').click()\n&gt;&gt;&gt; owner_browser.getLink('Remove template').click()\n&gt;&gt;&gt; print owner_browser.contents\n&lt;...\n...Item removed as the template...\n&gt;&gt;&gt; contributor_browser.url\n'http://nohost/plone/Members/foo-template-title'\n</pre>\n</blockquote>\n</li>\n<li><p>Further avoid redundant indexing</p>\n<p>Implement manage_pasteObjects and manage_renameObject, such that no\nindexing is performed and leave indexing to the edit form handling.</p>\n<p>This might cause problems with programmatic use.  Look at\nexperimental.contentcreation.</p>\n</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 845318, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "2fcdde526d2cd0515f62277a67f2201b", "sha256": "5985cea5ed6067a464387c6ec68949c5ffc7a1dcc0bbbf0a9122388bc676c66c"}, "downloads": -1, "filename": "collective.contemplate-0.1.tar.gz", "has_sig": false, "md5_digest": "2fcdde526d2cd0515f62277a67f2201b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19278, "upload_time": "2009-08-24T00:12:10", "upload_time_iso_8601": "2009-08-24T00:12:10.494123Z", "url": "https://files.pythonhosted.org/packages/d8/6c/7b4eb24c1406ca594d7a1ea2308df70e52df1ef3136b5ab390665d35049b/collective.contemplate-0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "2fcdde526d2cd0515f62277a67f2201b", "sha256": "5985cea5ed6067a464387c6ec68949c5ffc7a1dcc0bbbf0a9122388bc676c66c"}, "downloads": -1, "filename": "collective.contemplate-0.1.tar.gz", "has_sig": false, "md5_digest": "2fcdde526d2cd0515f62277a67f2201b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19278, "upload_time": "2009-08-24T00:12:10", "upload_time_iso_8601": "2009-08-24T00:12:10.494123Z", "url": "https://files.pythonhosted.org/packages/d8/6c/7b4eb24c1406ca594d7a1ea2308df70e52df1ef3136b5ab390665d35049b/collective.contemplate-0.1.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:17:58 2020"}