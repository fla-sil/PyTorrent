{"info": {"author": "Maximillian Dornseif", "author_email": "md@hudora.de", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "Programming Language :: Python"], "description": "========\npyPostal\n========\n\npyPostal is an Interface for sending real (paper-based) letters via an API.\n\n\nThere are several providers which offer printing, envelope stuffing and posting services but currently only\nhttps://www.pixelletter.de/ provides such services to SME without contractual hassles and the like.\n\nThis interface only supports mailing PDFs which have the Address Placed in the PDF at the `DIN 5008 <http://de.wikipedia.org/wiki/DIN_5008>`_ Address Location.\n\nYou can download it at the `Python PAckage Index (PyPI) <http://pypi.python.org/pypi/pyPostal/>`_.\n\n\nHigh-Level Usage\n================\n\nUsage is very easy: Just set up your credentials in the Environment before starting Python::\n\n    export PYPOSTAL_PIXELLETTER_CRED='your@email.com:PASSWORD'\n\nThen call ``pypostal.send_post_pixelletter()`` with the open PDF files or PDF datatream to send and the country code of the recipient::\n\n    >>> import pypostal\n    >>> pypostal.send_post_pixelletter(\n            [open('/Users/md/Desktop/Testbrief.pdf').read()], 'DE')\n\nIf you prefer to hardcode credentials you can provide them via a function call instead via the environment::\n\n    >>> pypostal.send_post_pixelletter([open('Testbrief.pdf')], 'DE', \n                                       username='your@email.com', \n                                       password='PASSWORD')\n\n\nPixelletter Interface\n=====================\n\nPixelletter offers a `Bunch of Documentation <https://www.pixelletter.de/de/doku2.php>`_ and a `PHP Library <http://www.pixelletter.de/xml/pixelletter.class.txt>`_. Unfortunately there is no specification of the HTTP-API and the documentation seems also somewhat incomplete and outdated. Also it seems that Pixelletter uses no prebuild XML processing and parsing pipeline but build one arround print statements. This library was build by using trial and error and reverse engeneering the website.\n\n\nExample Usage\n-------------\n\nThe Pixelletter interface is straightforward::\n\n    # Log in\n    >>> from pypostal import Pixelletter\n    >>> pix = Pixelletter('your_email', 'your_password', test_mode=True)\n    \n    # Show how many Cents Pixelletter owes you.\n    >>> print pix.get_account_info()['customer_credit']\n    1995\n    \n    # Send two PDFs from your Desktop as en Letter\n    >>> print pix.sendPost([open('/Users/md/Desktop/Testbrief.pdf'), \n                            open('/Users/md/Desktop/Thesis.pdf')])\n\n    # Send one PDF printet in color and in CO2 neutral fashion.\n    >>> print pix.sendPost([open('/Users/md/Desktop/Testbrief.pdf').read()], \n                           guid='0815-4711', service=['green', 'color'])\n\nYou can provide a GUID (\"Transaction Identifier\" in the Pixelletter Documenttion) - this might support a Track and Trace Interface but I havn't seen any documentation on this. Something like https://www.pixelletter.de/de/auftraege.php as an `Atom Feed <http://en.wikipedia.org/wiki/Atom_(standard)>`_ vertainly would be nice.\n\nThe Python library currently supports following services:\n\n* green (default, use ``service=[]`` to disable)\n* einschreiben (see `DHL / Deutsche Post AG <http://www.deutschepost.de/dpag?skin=lo&check=no&lang=de_DE&tab=1&xmlFile=link1015321_6396>`_ on the differences)\n* einschreibeneinwurf\n* eigenhaendig\n* eigenhaendigrueckschein\n* rueckschein\n* color\n\nThe Pixelletter API also seems to support \"Nachnahme\", \"Postident Comfort\" and \"Ueberweisungsvordruck\" but they are undocumented and currently not supported by this library. \n\n\nSipgate.de Fax Interface\n========================\n\nSipgate.de offers a hot and new REST API with `some documentation <http://www.live.sipgate.de/api/rest>`_. Pypostal provides functionality to send PDFs via Fax.\n\n\nExample Usage\n-------------\n\nA nice and clean interface::\n\n    # Log in\n    >>> from pypostal.sipgate import Sipgate\n    >>> sip = Sipgate('your_email', 'your_password')\n        \n    # Send a PDF via Fax\n    >>> sip.sendFax([open('/Users/md/Desktop/Testbrief.pdf')], 'sender_number', ['dest_number'])\n\n\nPlanned other Interfaces\n========================\n\nWe want to support\n\n* Pixelletter Fax interface\n* Pawisda L-Vin Post / Pinbriefportal SOAP Interface\n\n\nLinks\n=====\n\n* `WWW::Pixelletter <http://cpansearch.perl.org/src/RCL/WWW--Pixelletter-0.1/lib/WWW/Pixelletter.pm>`_ (Perl Module) for Pixelletter\n* `PHP Library <http://www.pixelletter.de/xml/pixelletter.class.txt>`_ for Pixelletter\n* `Pixelletter Documentation <https://www.pixelletter.de/de/doku2.php>`_\n* `pyJasper <http://github.com/hudora/pyJasper>`_ and `iReport <http://www.jaspersoft.com/de/ireport>`_ are a decent way to generate PDFs.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/hudora/pyPostal/#readme", "keywords": null, "license": "BSD", "maintainer": null, "maintainer_email": null, "name": "pyPostal", "package_url": "https://pypi.org/project/pyPostal/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/pyPostal/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://github.com/hudora/pyPostal/#readme"}, "release_url": "https://pypi.org/project/pyPostal/1.1/", "requires_dist": null, "requires_python": null, "summary": "pyPostal is an Interface for sending real (paper-based) letters via API (Pixelletter)", "version": "1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>pyPostal is an Interface for sending real (paper-based) letters via an API.</p>\n<p>There are several providers which offer printing, envelope stuffing and posting services but currently only\n<a href=\"https://www.pixelletter.de/\" rel=\"nofollow\">https://www.pixelletter.de/</a> provides such services to SME without contractual hassles and the like.</p>\n<p>This interface only supports mailing PDFs which have the Address Placed in the PDF at the <a href=\"http://de.wikipedia.org/wiki/DIN_5008\" rel=\"nofollow\">DIN 5008</a> Address Location.</p>\n<p>You can download it at the <a href=\"http://pypi.python.org/pypi/pyPostal/\" rel=\"nofollow\">Python PAckage Index (PyPI)</a>.</p>\n<div id=\"high-level-usage\">\n<h2>High-Level Usage</h2>\n<p>Usage is very easy: Just set up your credentials in the Environment before starting Python:</p>\n<pre>export PYPOSTAL_PIXELLETTER_CRED='your@email.com:PASSWORD'\n</pre>\n<p>Then call <tt>pypostal.send_post_pixelletter()</tt> with the open PDF files or PDF datatream to send and the country code of the recipient:</p>\n<pre>&gt;&gt;&gt; import pypostal\n&gt;&gt;&gt; pypostal.send_post_pixelletter(\n        [open('/Users/md/Desktop/Testbrief.pdf').read()], 'DE')\n</pre>\n<p>If you prefer to hardcode credentials you can provide them via a function call instead via the environment:</p>\n<pre>&gt;&gt;&gt; pypostal.send_post_pixelletter([open('Testbrief.pdf')], 'DE',\n                                   username='your@email.com',\n                                   password='PASSWORD')\n</pre>\n</div>\n<div id=\"pixelletter-interface\">\n<h2>Pixelletter Interface</h2>\n<p>Pixelletter offers a <a href=\"https://www.pixelletter.de/de/doku2.php\" rel=\"nofollow\">Bunch of Documentation</a> and a <a href=\"http://www.pixelletter.de/xml/pixelletter.class.txt\" rel=\"nofollow\">PHP Library</a>. Unfortunately there is no specification of the HTTP-API and the documentation seems also somewhat incomplete and outdated. Also it seems that Pixelletter uses no prebuild XML processing and parsing pipeline but build one arround print statements. This library was build by using trial and error and reverse engeneering the website.</p>\n<div id=\"example-usage\">\n<h3>Example Usage</h3>\n<p>The Pixelletter interface is straightforward:</p>\n<pre># Log in\n&gt;&gt;&gt; from pypostal import Pixelletter\n&gt;&gt;&gt; pix = Pixelletter('your_email', 'your_password', test_mode=True)\n\n# Show how many Cents Pixelletter owes you.\n&gt;&gt;&gt; print pix.get_account_info()['customer_credit']\n1995\n\n# Send two PDFs from your Desktop as en Letter\n&gt;&gt;&gt; print pix.sendPost([open('/Users/md/Desktop/Testbrief.pdf'),\n                        open('/Users/md/Desktop/Thesis.pdf')])\n\n# Send one PDF printet in color and in CO2 neutral fashion.\n&gt;&gt;&gt; print pix.sendPost([open('/Users/md/Desktop/Testbrief.pdf').read()],\n                       guid='0815-4711', service=['green', 'color'])\n</pre>\n<p>You can provide a GUID (\u201cTransaction Identifier\u201d in the Pixelletter Documenttion) - this might support a Track and Trace Interface but I havn\u2019t seen any documentation on this. Something like <a href=\"https://www.pixelletter.de/de/auftraege.php\" rel=\"nofollow\">https://www.pixelletter.de/de/auftraege.php</a> as an <a href=\"http://en.wikipedia.org/wiki/Atom_(standard)\" rel=\"nofollow\">Atom Feed</a> vertainly would be nice.</p>\n<p>The Python library currently supports following services:</p>\n<ul>\n<li>green (default, use <tt><span class=\"pre\">service=[]</span></tt> to disable)</li>\n<li>einschreiben (see <a href=\"http://www.deutschepost.de/dpag?skin=lo&amp;check=no&amp;lang=de_DE&amp;tab=1&amp;xmlFile=link1015321_6396\" rel=\"nofollow\">DHL / Deutsche Post AG</a> on the differences)</li>\n<li>einschreibeneinwurf</li>\n<li>eigenhaendig</li>\n<li>eigenhaendigrueckschein</li>\n<li>rueckschein</li>\n<li>color</li>\n</ul>\n<p>The Pixelletter API also seems to support \u201cNachnahme\u201d, \u201cPostident Comfort\u201d and \u201cUeberweisungsvordruck\u201d but they are undocumented and currently not supported by this library.</p>\n</div>\n</div>\n<div id=\"sipgate-de-fax-interface\">\n<h2>Sipgate.de Fax Interface</h2>\n<p>Sipgate.de offers a hot and new REST API with <a href=\"http://www.live.sipgate.de/api/rest\" rel=\"nofollow\">some documentation</a>. Pypostal provides functionality to send PDFs via Fax.</p>\n<div id=\"id1\">\n<h3>Example Usage</h3>\n<p>A nice and clean interface:</p>\n<pre># Log in\n&gt;&gt;&gt; from pypostal.sipgate import Sipgate\n&gt;&gt;&gt; sip = Sipgate('your_email', 'your_password')\n\n# Send a PDF via Fax\n&gt;&gt;&gt; sip.sendFax([open('/Users/md/Desktop/Testbrief.pdf')], 'sender_number', ['dest_number'])\n</pre>\n</div>\n</div>\n<div id=\"planned-other-interfaces\">\n<h2>Planned other Interfaces</h2>\n<p>We want to support</p>\n<ul>\n<li>Pixelletter Fax interface</li>\n<li>Pawisda L-Vin Post / Pinbriefportal SOAP Interface</li>\n</ul>\n</div>\n<div id=\"links\">\n<h2>Links</h2>\n<ul>\n<li><a href=\"http://cpansearch.perl.org/src/RCL/WWW--Pixelletter-0.1/lib/WWW/Pixelletter.pm\" rel=\"nofollow\">WWW::Pixelletter</a> (Perl Module) for Pixelletter</li>\n<li><a href=\"http://www.pixelletter.de/xml/pixelletter.class.txt\" rel=\"nofollow\">PHP Library</a> for Pixelletter</li>\n<li><a href=\"https://www.pixelletter.de/de/doku2.php\" rel=\"nofollow\">Pixelletter Documentation</a></li>\n<li><a href=\"http://github.com/hudora/pyJasper\" rel=\"nofollow\">pyJasper</a> and <a href=\"http://www.jaspersoft.com/de/ireport\" rel=\"nofollow\">iReport</a> are a decent way to generate PDFs.</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 796920, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "988d6068ee527106d19aa580360f37bb", "sha256": "f4ff5d59e5e236f45171b80baf7e5b6183e51ed6e9dc249ebe93db678713ee37"}, "downloads": -1, "filename": "pyPostal-1.0.tar.gz", "has_sig": false, "md5_digest": "988d6068ee527106d19aa580360f37bb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5554, "upload_time": "2010-08-14T22:56:10", "upload_time_iso_8601": "2010-08-14T22:56:10.431404Z", "url": "https://files.pythonhosted.org/packages/b1/c4/7b1c797924d7835aad10a83842b47494b694af4bbde0068e679be7ce9e87/pyPostal-1.0.tar.gz", "yanked": false}], "1.0p1": [{"comment_text": "", "digests": {"md5": "f8a7a33d164a39fe4dc6271edb44bbf4", "sha256": "f1b91a14ea796eb194d98b7caed2a0d60659281a764f4c627f760a5c28f466ec"}, "downloads": -1, "filename": "pyPostal-1.0p1.tar.gz", "has_sig": false, "md5_digest": "f8a7a33d164a39fe4dc6271edb44bbf4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5563, "upload_time": "2010-08-14T23:01:33", "upload_time_iso_8601": "2010-08-14T23:01:33.919952Z", "url": "https://files.pythonhosted.org/packages/be/8f/62e927b44b8bc3e0940f6ff6f92b5a09196c35b21e41a1f45043c27115c1/pyPostal-1.0p1.tar.gz", "yanked": false}], "1.0p2": [{"comment_text": "", "digests": {"md5": "57fdd8dfacf37db9a01f65e85f7fc354", "sha256": "4c1c17a72b8668baea84a53aa0d534a5ee169c489d8ee89a8eee5cee25be8bc9"}, "downloads": -1, "filename": "pyPostal-1.0p2.tar.gz", "has_sig": false, "md5_digest": "57fdd8dfacf37db9a01f65e85f7fc354", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6559, "upload_time": "2010-08-15T15:05:46", "upload_time_iso_8601": "2010-08-15T15:05:46.355470Z", "url": "https://files.pythonhosted.org/packages/98/24/45d07891361332d56ba9c400611b9d71efe86147ef066233e8c2f2dfb7a7/pyPostal-1.0p2.tar.gz", "yanked": false}], "1.0p3": [{"comment_text": "", "digests": {"md5": "691e4fd06cc7958f2935f13b8444f15f", "sha256": "dc5ef30894e3b1983089979259ae95ea8f09c8c18057a26cdc7ad3ff2552dbc3"}, "downloads": -1, "filename": "pyPostal-1.0p3.tar.gz", "has_sig": false, "md5_digest": "691e4fd06cc7958f2935f13b8444f15f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6656, "upload_time": "2010-08-18T22:28:57", "upload_time_iso_8601": "2010-08-18T22:28:57.470481Z", "url": "https://files.pythonhosted.org/packages/62/9b/0372a9aa5679e6f7d01117e1784f42661a278acc291fe2c05e612902ac64/pyPostal-1.0p3.tar.gz", "yanked": false}], "1.1": [{"comment_text": "", "digests": {"md5": "4c18ffd4ec7dd65bb864a79d135aedac", "sha256": "961849750395ab72306b961c586ac04764f6d781bc205632a327cb7359a2f3c7"}, "downloads": -1, "filename": "pyPostal-1.1.tar.gz", "has_sig": false, "md5_digest": "4c18ffd4ec7dd65bb864a79d135aedac", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6678, "upload_time": "2010-10-19T20:00:28", "upload_time_iso_8601": "2010-10-19T20:00:28.183769Z", "url": "https://files.pythonhosted.org/packages/e7/96/145d60501264de505926f48f52c29c5fd20d066f2e158107a66ea963cf56/pyPostal-1.1.tar.gz", "yanked": false}], "1.1b": [{"comment_text": "", "digests": {"md5": "612ba09e3e832c12f7d861fd82320b9b", "sha256": "c3aa57da4dc29f14e5d6b9fd8cfa7c425312b4c96fc707b8fc743b4ba1ec0f66"}, "downloads": -1, "filename": "pyPostal-1.1b.tar.gz", "has_sig": false, "md5_digest": "612ba09e3e832c12f7d861fd82320b9b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6887, "upload_time": "2010-10-19T20:14:40", "upload_time_iso_8601": "2010-10-19T20:14:40.834805Z", "url": "https://files.pythonhosted.org/packages/3e/80/b96f97803877b9c784645f0787d1a9efa6d1a6429e2c41ef93b64326bf7a/pyPostal-1.1b.tar.gz", "yanked": false}], "1.1c": [{"comment_text": "", "digests": {"md5": "1839f1e857237371d720bbe42af43816", "sha256": "6262c467ddb7eebc34efe44730919ccb75d8e5b66036db84c6425302fc2db3d9"}, "downloads": -1, "filename": "pyPostal-1.1c.tar.gz", "has_sig": false, "md5_digest": "1839f1e857237371d720bbe42af43816", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7374, "upload_time": "2010-10-30T22:36:31", "upload_time_iso_8601": "2010-10-30T22:36:31.270543Z", "url": "https://files.pythonhosted.org/packages/af/8a/250804db51fe96a0947cae67f53036c9b4814104a349bb4fc006e6233b34/pyPostal-1.1c.tar.gz", "yanked": false}], "1.1d": [{"comment_text": "", "digests": {"md5": "50e0629c9b35503b52bda8510acc0449", "sha256": "6cce01f1fecc4121ccbe235d1e10eadda26bcd263edf9c0c634c4b8d5620b0a4"}, "downloads": -1, "filename": "pyPostal-1.1d.tar.gz", "has_sig": false, "md5_digest": "50e0629c9b35503b52bda8510acc0449", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7393, "upload_time": "2010-10-30T22:51:36", "upload_time_iso_8601": "2010-10-30T22:51:36.159162Z", "url": "https://files.pythonhosted.org/packages/c3/22/b4be55d6a4a296955992ff7dccab7eb11307799a242fcf9c14373b35b08a/pyPostal-1.1d.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4c18ffd4ec7dd65bb864a79d135aedac", "sha256": "961849750395ab72306b961c586ac04764f6d781bc205632a327cb7359a2f3c7"}, "downloads": -1, "filename": "pyPostal-1.1.tar.gz", "has_sig": false, "md5_digest": "4c18ffd4ec7dd65bb864a79d135aedac", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6678, "upload_time": "2010-10-19T20:00:28", "upload_time_iso_8601": "2010-10-19T20:00:28.183769Z", "url": "https://files.pythonhosted.org/packages/e7/96/145d60501264de505926f48f52c29c5fd20d066f2e158107a66ea963cf56/pyPostal-1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:59:15 2020"}