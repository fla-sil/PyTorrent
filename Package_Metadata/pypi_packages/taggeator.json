{"info": {"author": "Miguel \u00c1ngel Garc\u00eda", "author_email": "miguelangel.garcia@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Console", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6"], "description": "Description\n===========\n\nFrom a file with a tag description format like:\n\n.. code::\n\n\n   apps:\n     - name: fubar\n       url: http://example.org/fubar\n       description: a fubar app\n       tags:\n       - foo1\n       - bar1\n   \n     - name: foo\n       url: http://example.org/foo\n       description: a foo app\n       tags:\n       - foo1\n       - foo2\n   \n     - name: bar\n       url: http://example.org/bar\n       description: a bar app\n       tags:\n       - bar1\n       - bar2\n\nGenerates a new file after applying a template with the inverted file, that is,\na dict of tags with each app as a dict.\n\nAs an example, with the template:\n\n.. code::\n\n\n    Simple output for tageator\n    \n    {% for item in categories | dictsort %}\n    - {{ item[0] }}\n    {%- for app in item[1] | sort(attribute='name') %}\n      - {{ app.name }}: {{ app.description }} ({{ app.url }})\n    {%- endfor %}\n    {% endfor %}\n\nThe previous input file will generate:\n\n.. code::\n\n    Simple output for tageator\n    \n    \n    - bar1\n      - bar: a bar app (http://example.org/bar)\n      - fubar: a fubar app (http://example.org/fubar)\n    \n    - bar2\n      - bar: a bar app (http://example.org/bar)\n    \n    - foo1\n      - foo: a foo app (http://example.org/foo)\n      - fubar: a fubar app (http://example.org/fubar)\n    \n    - foo2\n      - foo: a foo app (http://example.org/foo)\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/magmax/taggeator", "keywords": "tag keyword", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "taggeator", "package_url": "https://pypi.org/project/taggeator/", "platform": "", "project_url": "https://pypi.org/project/taggeator/", "project_urls": {"Homepage": "https://github.com/magmax/taggeator"}, "release_url": "https://pypi.org/project/taggeator/0.0.1/", "requires_dist": null, "requires_python": "", "summary": "Transform tagged lists into readable files.", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>From a file with a tag description format like:</p>\n<pre>apps:\n  - name: fubar\n    url: http://example.org/fubar\n    description: a fubar app\n    tags:\n    - foo1\n    - bar1\n\n  - name: foo\n    url: http://example.org/foo\n    description: a foo app\n    tags:\n    - foo1\n    - foo2\n\n  - name: bar\n    url: http://example.org/bar\n    description: a bar app\n    tags:\n    - bar1\n    - bar2\n</pre>\n<p>Generates a new file after applying a template with the inverted file, that is,\na dict of tags with each app as a dict.</p>\n<p>As an example, with the template:</p>\n<pre>Simple output for tageator\n\n{% for item in categories | dictsort %}\n- {{ item[0] }}\n{%- for app in item[1] | sort(attribute='name') %}\n  - {{ app.name }}: {{ app.description }} ({{ app.url }})\n{%- endfor %}\n{% endfor %}\n</pre>\n<p>The previous input file will generate:</p>\n<pre>Simple output for tageator\n\n\n- bar1\n  - bar: a bar app (http://example.org/bar)\n  - fubar: a fubar app (http://example.org/fubar)\n\n- bar2\n  - bar: a bar app (http://example.org/bar)\n\n- foo1\n  - foo: a foo app (http://example.org/foo)\n  - fubar: a fubar app (http://example.org/fubar)\n\n- foo2\n  - foo: a foo app (http://example.org/foo)\n</pre>\n\n          </div>"}, "last_serial": 4202139, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "0373146c2c29825595fb518ae2c304ca", "sha256": "a327fd49f286f67553f1fddd9fbfc6346934e2b58180e5ef928d009a3ff141f9"}, "downloads": -1, "filename": "taggeator-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "0373146c2c29825595fb518ae2c304ca", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 2985, "upload_time": "2018-08-24T03:10:55", "upload_time_iso_8601": "2018-08-24T03:10:55.487093Z", "url": "https://files.pythonhosted.org/packages/88/42/f3e7f52d9c6682dc1c5a35868c0f3c5631ae2216b40a8171238e22957477/taggeator-0.0.1-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "0373146c2c29825595fb518ae2c304ca", "sha256": "a327fd49f286f67553f1fddd9fbfc6346934e2b58180e5ef928d009a3ff141f9"}, "downloads": -1, "filename": "taggeator-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "0373146c2c29825595fb518ae2c304ca", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 2985, "upload_time": "2018-08-24T03:10:55", "upload_time_iso_8601": "2018-08-24T03:10:55.487093Z", "url": "https://files.pythonhosted.org/packages/88/42/f3e7f52d9c6682dc1c5a35868c0f3c5631ae2216b40a8171238e22957477/taggeator-0.0.1-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 02:58:29 2020"}