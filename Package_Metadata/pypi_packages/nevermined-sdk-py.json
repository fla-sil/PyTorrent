{"info": {"author": "keyko-io", "author_email": "root@keyko.io", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Natural Language :: English", "Programming Language :: Python :: 3.6"], "description": "[![banner](https://raw.githubusercontent.com/keyko-io/assets/master/images/logo/small/keyko_logo@2x-100.jpg)](https://keyko.io)\n\n# Python API for Nevermined Data platform\n\n> \ud83e\udd91 Python SDK for connecting with Nevermined Data Platform\n> [keyko.io](https://keyko.io)\n\n[![PyPI](https://img.shields.io/pypi/v/nevermined-sdk-py.svg)](https://pypi.org/project/nevermined-sdk-py/)\n\n---\n\n## Table of Contents\n\n  - [Features](#features)\n  - [Prerequisites](#prerequisites)\n  - [Quick-start](#quick-start)\n     - [Usage:](#usage)\n  - [Configuration](#configuration)\n  - [Development](#development)\n        - [Testing](#testing)\n        - [New Version / New Release](#new-version-new-release)\n  - [License](#license)\n\n---\n\n## Features\n\nSdk-py include the methods to make easy the connection with contracts deployed in different networks.\nThis repository include also the methods to encrypt and decrypt information using the Parity Secret Store.\n\n## Prerequisites\n\nPython 3.6\n\n## Quick-start\n\nInstall sdk:\n\n```\npip install nevermined-sdk-py\n```\n\n### Usage:\n\n```python\nimport os\nimport time\n\nfrom nevermined_sdk_py import (\n    Nevermined,\n    ConfigProvider,\n    Config,\n    Metadata,\n    Account\n)\n\nConfigProvider.set_config(Config('config.ini'))\n# Make a new instance of Nevermined\nnevermined = Nevermined() # or Nevermined(Config('config.ini'))\nconfig = nevermined.config\n# make account instance, assuming the ethereum account and password are set \n# in the config file `config.ini`\naccount = nevermined.accounts.list()[0]\n# or \naccount = Account(config.parity_address, config.parity_password)\n\n# PUBLISHER\n# Let's start by registering an asset in the Nevermined network\nmetadata = Metadata.get_example()\n\n# consume and service endpoints require `gateway.url` is set in the config file\n# or passed to Nevermined instance in the config_dict.\n# define the services to include in the new asset DDO\n\nddo = nevermined.assets.create(metadata, account)\n\n# Now we have an asset registered, we can verify it exists by resolving the did\n_ddo = nevermined.assets.resolve(ddo.did)\n# ddo and _ddo should be identical\n\n# CONSUMER\n# search for assets\nasset_ddo = nevermined.assets.search('Nevermined protocol')[0]\n# Need some ocean tokens to be able to order assets\nnevermined.accounts.request_tokens(account, 10)\n\n# Start the purchase/consume request. This will automatically make a payment from the specified account.\nconsumer_account = nevermined.accounts.list()[1]\nservice_agreement_id = nevermined.assets.order(asset_ddo.did, 0, consumer_account)\n\n# after a short wait (seconds to minutes) the asset data files should be available in the `downloads.path` defined in config\n# wait a bit to let things happen\ntime.sleep(20)\n\n# Asset files are saved in a folder named after the asset id\ndataset_dir = os.path.join(nevermined.config.downloads_path, f'datafile.{asset_ddo.asset_id}.0')\nif os.path.exists(dataset_dir):\n    print('asset files downloaded: {}'.format(os.listdir(dataset_dir)))\n\n```\n\n## Configuration\n\n```python\nconfig_dict = {\n    'keeper-contracts': {\n        # Point to an Ethereum RPC client. Note that sdk learns the name of the network to work with from this client.\n        'keeper.url': 'http://localhost:8545',\n        # Specify the keeper contracts artifacts folder (has the smart contracts definitions json files). When you\n        # install the package, the artifacts are automatically picked up from the `keeper-contracts` Python\n        # dependency unless you are using a local ethereum network.\n        'keeper.path': 'artifacts',\n        'secret_store.url': 'http://localhost:12001',\n        'parity.url': 'http://localhost:8545',\n        'parity.address': '',\n        'parity.password': '',\n\n    },\n    'resources': {\n        # Metadata is the metadata store. It stores the assets DDO/DID-document\n        'metadata.url': 'http://localhost:5000',\n        # Gateway is the publisher's agent. It serves purchase and requests for both data access and compute services\n        'gateway.url': 'http://localhost:8030',\n        # points to the local database file used for storing temporary information (for instance, pending service agreements).\n        'storage.path': 'sdk.db',\n        # Where to store downloaded asset files\n        'downloads.path': 'consume-downloads'\n    }\n}\n\n```\n\nIn addition to the configuration file, you may use the following environment variables (override the corresponding configuration file values):\n\n- KEEPER_PATH\n- KEEPER_URL\n- GAS_LIMIT\n- METADATA_URL\n\n## Development\n\n1. Set up a virtual environment\n\n    ```bash\n    virtualenv venv -p python3.6\n    source venv/bin/activate \n    ```\n\n1. Install requirements\n\n    ```\n    pip install -r requirements_dev.txt\n    ```\n\n1. Create the local testing environment using [nevermined-tools](https://github.com/keyko-io/nevermined-tools). Once cloned that repository, you can start the cluster running:\n\n    ```\n    ./start_nevermined.sh --latest --no-gateway --no-common --local-spree-node\n    ```\n\n    It runs a Nevermined Metadata node and an Ethereum RPC client. For details, read `docker-compose.yml`.\n\n1. Create local configuration file\n\n    ```\n    cp config.ini config_local.ini\n    ```\n\n   `config_local.ini` is used by unit tests.\n\n1. Copy keeper artifacts\n\n    A bash script is available to copy keeper artifacts into this file directly from a running docker image. This script needs to run in the root of the project.\n    The script waits until the keeper contracts are deployed, and then copies the artifacts.\n\n    ```\n    ./scripts/wait_for_migration_and_extract_keeper_artifacts.sh\n    ```\n\n    The artifacts contain the addresses of all the deployed contracts and their ABI definitions required to interact with them.\n\n\n#### Testing\n\nAutomatic tests are setup via Github actions\nOur test use pytest framework.\n\n#### New Version / New Release\n\nSee [RELEASE_PROCESS.md](RELEASE_PROCESS.md)\n\n##Attribution\nThis project is based in the [Ocean Protocol Squid-py](https://github.com/oceanprotocol/squid-py). It keeps the same Apache v2 License and adds some improvements.\n\n\n## License\n\n```text\nCopyright 2020 Keyko GmbH.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/keyko-io/nevermined-sdk-py", "keywords": "nevermined-sdk-py", "license": "Apache Software License 2.0", "maintainer": "", "maintainer_email": "", "name": "nevermined-sdk-py", "package_url": "https://pypi.org/project/nevermined-sdk-py/", "platform": "", "project_url": "https://pypi.org/project/nevermined-sdk-py/", "project_urls": {"Homepage": "https://github.com/keyko-io/nevermined-sdk-py"}, "release_url": "https://pypi.org/project/nevermined-sdk-py/0.2.0/", "requires_dist": ["coloredlogs", "pyopenssl", "PyJWT", "PyYAML (==4.2b4)", "common-utils-py (==0.2.0)", "contracts-lib-py (==0.2.0)", "ocean-secret-store-client (==0.0.1)", "requests (==2.21.0)", "deprecated", "pycryptodomex", "tqdm", "pytz", "bumpversion ; extra == 'dev'", "pkginfo ; extra == 'dev'", "twine ; extra == 'dev'", "watchdog ; extra == 'dev'", "coverage ; extra == 'dev'", "docker ; extra == 'dev'", "mccabe ; extra == 'dev'", "pylint ; extra == 'dev'", "pytest ; extra == 'dev'", "pytest-watch ; extra == 'dev'", "Sphinx ; extra == 'dev'", "sphinxcontrib-apidoc ; extra == 'dev'", "Sphinx ; extra == 'docs'", "sphinxcontrib-apidoc ; extra == 'docs'", "coverage ; extra == 'test'", "docker ; extra == 'test'", "mccabe ; extra == 'test'", "pylint ; extra == 'test'", "pytest ; extra == 'test'", "pytest-watch ; extra == 'test'"], "requires_python": "", "summary": "\ud83d\udc33 Nevermined/Web3py wrapper.", "version": "0.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://keyko.io\" rel=\"nofollow\"><img alt=\"banner\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b0604a0b58e3ae16c8c486ca26f0429f24853a47/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f6b65796b6f2d696f2f6173736574732f6d61737465722f696d616765732f6c6f676f2f736d616c6c2f6b65796b6f5f6c6f676f4032782d3130302e6a7067\"></a></p>\n<h1>Python API for Nevermined Data platform</h1>\n<blockquote>\n<p>\ud83e\udd91 Python SDK for connecting with Nevermined Data Platform\n<a href=\"https://keyko.io\" rel=\"nofollow\">keyko.io</a></p>\n</blockquote>\n<p><a href=\"https://pypi.org/project/nevermined-sdk-py/\" rel=\"nofollow\"><img alt=\"PyPI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7530ccc4679498936edc98b22c0014b81f973263/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f6e657665726d696e65642d73646b2d70792e737667\"></a></p>\n<hr>\n<h2>Table of Contents</h2>\n<ul>\n<li><a href=\"#features\" rel=\"nofollow\">Features</a></li>\n<li><a href=\"#prerequisites\" rel=\"nofollow\">Prerequisites</a></li>\n<li><a href=\"#quick-start\" rel=\"nofollow\">Quick-start</a>\n<ul>\n<li><a href=\"#usage\" rel=\"nofollow\">Usage:</a></li>\n</ul>\n</li>\n<li><a href=\"#configuration\" rel=\"nofollow\">Configuration</a></li>\n<li><a href=\"#development\" rel=\"nofollow\">Development</a>\n- <a href=\"#testing\" rel=\"nofollow\">Testing</a>\n- <a href=\"#new-version-new-release\" rel=\"nofollow\">New Version / New Release</a></li>\n<li><a href=\"#license\" rel=\"nofollow\">License</a></li>\n</ul>\n<hr>\n<h2>Features</h2>\n<p>Sdk-py include the methods to make easy the connection with contracts deployed in different networks.\nThis repository include also the methods to encrypt and decrypt information using the Parity Secret Store.</p>\n<h2>Prerequisites</h2>\n<p>Python 3.6</p>\n<h2>Quick-start</h2>\n<p>Install sdk:</p>\n<pre><code>pip install nevermined-sdk-py\n</code></pre>\n<h3>Usage:</h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">import</span> <span class=\"nn\">time</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">nevermined_sdk_py</span> <span class=\"kn\">import</span> <span class=\"p\">(</span>\n    <span class=\"n\">Nevermined</span><span class=\"p\">,</span>\n    <span class=\"n\">ConfigProvider</span><span class=\"p\">,</span>\n    <span class=\"n\">Config</span><span class=\"p\">,</span>\n    <span class=\"n\">Metadata</span><span class=\"p\">,</span>\n    <span class=\"n\">Account</span>\n<span class=\"p\">)</span>\n\n<span class=\"n\">ConfigProvider</span><span class=\"o\">.</span><span class=\"n\">set_config</span><span class=\"p\">(</span><span class=\"n\">Config</span><span class=\"p\">(</span><span class=\"s1\">'config.ini'</span><span class=\"p\">))</span>\n<span class=\"c1\"># Make a new instance of Nevermined</span>\n<span class=\"n\">nevermined</span> <span class=\"o\">=</span> <span class=\"n\">Nevermined</span><span class=\"p\">()</span> <span class=\"c1\"># or Nevermined(Config('config.ini'))</span>\n<span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"n\">nevermined</span><span class=\"o\">.</span><span class=\"n\">config</span>\n<span class=\"c1\"># make account instance, assuming the ethereum account and password are set </span>\n<span class=\"c1\"># in the config file `config.ini`</span>\n<span class=\"n\">account</span> <span class=\"o\">=</span> <span class=\"n\">nevermined</span><span class=\"o\">.</span><span class=\"n\">accounts</span><span class=\"o\">.</span><span class=\"n\">list</span><span class=\"p\">()[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"c1\"># or </span>\n<span class=\"n\">account</span> <span class=\"o\">=</span> <span class=\"n\">Account</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">parity_address</span><span class=\"p\">,</span> <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">parity_password</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># PUBLISHER</span>\n<span class=\"c1\"># Let's start by registering an asset in the Nevermined network</span>\n<span class=\"n\">metadata</span> <span class=\"o\">=</span> <span class=\"n\">Metadata</span><span class=\"o\">.</span><span class=\"n\">get_example</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># consume and service endpoints require `gateway.url` is set in the config file</span>\n<span class=\"c1\"># or passed to Nevermined instance in the config_dict.</span>\n<span class=\"c1\"># define the services to include in the new asset DDO</span>\n\n<span class=\"n\">ddo</span> <span class=\"o\">=</span> <span class=\"n\">nevermined</span><span class=\"o\">.</span><span class=\"n\">assets</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">metadata</span><span class=\"p\">,</span> <span class=\"n\">account</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Now we have an asset registered, we can verify it exists by resolving the did</span>\n<span class=\"n\">_ddo</span> <span class=\"o\">=</span> <span class=\"n\">nevermined</span><span class=\"o\">.</span><span class=\"n\">assets</span><span class=\"o\">.</span><span class=\"n\">resolve</span><span class=\"p\">(</span><span class=\"n\">ddo</span><span class=\"o\">.</span><span class=\"n\">did</span><span class=\"p\">)</span>\n<span class=\"c1\"># ddo and _ddo should be identical</span>\n\n<span class=\"c1\"># CONSUMER</span>\n<span class=\"c1\"># search for assets</span>\n<span class=\"n\">asset_ddo</span> <span class=\"o\">=</span> <span class=\"n\">nevermined</span><span class=\"o\">.</span><span class=\"n\">assets</span><span class=\"o\">.</span><span class=\"n\">search</span><span class=\"p\">(</span><span class=\"s1\">'Nevermined protocol'</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"c1\"># Need some ocean tokens to be able to order assets</span>\n<span class=\"n\">nevermined</span><span class=\"o\">.</span><span class=\"n\">accounts</span><span class=\"o\">.</span><span class=\"n\">request_tokens</span><span class=\"p\">(</span><span class=\"n\">account</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Start the purchase/consume request. This will automatically make a payment from the specified account.</span>\n<span class=\"n\">consumer_account</span> <span class=\"o\">=</span> <span class=\"n\">nevermined</span><span class=\"o\">.</span><span class=\"n\">accounts</span><span class=\"o\">.</span><span class=\"n\">list</span><span class=\"p\">()[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"n\">service_agreement_id</span> <span class=\"o\">=</span> <span class=\"n\">nevermined</span><span class=\"o\">.</span><span class=\"n\">assets</span><span class=\"o\">.</span><span class=\"n\">order</span><span class=\"p\">(</span><span class=\"n\">asset_ddo</span><span class=\"o\">.</span><span class=\"n\">did</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">consumer_account</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># after a short wait (seconds to minutes) the asset data files should be available in the `downloads.path` defined in config</span>\n<span class=\"c1\"># wait a bit to let things happen</span>\n<span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">20</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Asset files are saved in a folder named after the asset id</span>\n<span class=\"n\">dataset_dir</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">nevermined</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">downloads_path</span><span class=\"p\">,</span> <span class=\"sa\">f</span><span class=\"s1\">'datafile.</span><span class=\"si\">{</span><span class=\"n\">asset_ddo</span><span class=\"o\">.</span><span class=\"n\">asset_id</span><span class=\"si\">}</span><span class=\"s1\">.0'</span><span class=\"p\">)</span>\n<span class=\"k\">if</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">exists</span><span class=\"p\">(</span><span class=\"n\">dataset_dir</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'asset files downloaded: </span><span class=\"si\">{}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">listdir</span><span class=\"p\">(</span><span class=\"n\">dataset_dir</span><span class=\"p\">)))</span>\n</pre>\n<h2>Configuration</h2>\n<pre><span class=\"n\">config_dict</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'keeper-contracts'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"c1\"># Point to an Ethereum RPC client. Note that sdk learns the name of the network to work with from this client.</span>\n        <span class=\"s1\">'keeper.url'</span><span class=\"p\">:</span> <span class=\"s1\">'http://localhost:8545'</span><span class=\"p\">,</span>\n        <span class=\"c1\"># Specify the keeper contracts artifacts folder (has the smart contracts definitions json files). When you</span>\n        <span class=\"c1\"># install the package, the artifacts are automatically picked up from the `keeper-contracts` Python</span>\n        <span class=\"c1\"># dependency unless you are using a local ethereum network.</span>\n        <span class=\"s1\">'keeper.path'</span><span class=\"p\">:</span> <span class=\"s1\">'artifacts'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'secret_store.url'</span><span class=\"p\">:</span> <span class=\"s1\">'http://localhost:12001'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'parity.url'</span><span class=\"p\">:</span> <span class=\"s1\">'http://localhost:8545'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'parity.address'</span><span class=\"p\">:</span> <span class=\"s1\">''</span><span class=\"p\">,</span>\n        <span class=\"s1\">'parity.password'</span><span class=\"p\">:</span> <span class=\"s1\">''</span><span class=\"p\">,</span>\n\n    <span class=\"p\">},</span>\n    <span class=\"s1\">'resources'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"c1\"># Metadata is the metadata store. It stores the assets DDO/DID-document</span>\n        <span class=\"s1\">'metadata.url'</span><span class=\"p\">:</span> <span class=\"s1\">'http://localhost:5000'</span><span class=\"p\">,</span>\n        <span class=\"c1\"># Gateway is the publisher's agent. It serves purchase and requests for both data access and compute services</span>\n        <span class=\"s1\">'gateway.url'</span><span class=\"p\">:</span> <span class=\"s1\">'http://localhost:8030'</span><span class=\"p\">,</span>\n        <span class=\"c1\"># points to the local database file used for storing temporary information (for instance, pending service agreements).</span>\n        <span class=\"s1\">'storage.path'</span><span class=\"p\">:</span> <span class=\"s1\">'sdk.db'</span><span class=\"p\">,</span>\n        <span class=\"c1\"># Where to store downloaded asset files</span>\n        <span class=\"s1\">'downloads.path'</span><span class=\"p\">:</span> <span class=\"s1\">'consume-downloads'</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n<p>In addition to the configuration file, you may use the following environment variables (override the corresponding configuration file values):</p>\n<ul>\n<li>KEEPER_PATH</li>\n<li>KEEPER_URL</li>\n<li>GAS_LIMIT</li>\n<li>METADATA_URL</li>\n</ul>\n<h2>Development</h2>\n<ol>\n<li>\n<p>Set up a virtual environment</p>\n<pre>virtualenv venv -p python3.6\n<span class=\"nb\">source</span> venv/bin/activate \n</pre>\n</li>\n<li>\n<p>Install requirements</p>\n<pre><code>pip install -r requirements_dev.txt\n</code></pre>\n</li>\n<li>\n<p>Create the local testing environment using <a href=\"https://github.com/keyko-io/nevermined-tools\" rel=\"nofollow\">nevermined-tools</a>. Once cloned that repository, you can start the cluster running:</p>\n<pre><code>./start_nevermined.sh --latest --no-gateway --no-common --local-spree-node\n</code></pre>\n<p>It runs a Nevermined Metadata node and an Ethereum RPC client. For details, read <code>docker-compose.yml</code>.</p>\n</li>\n<li>\n<p>Create local configuration file</p>\n<pre><code>cp config.ini config_local.ini\n</code></pre>\n<p><code>config_local.ini</code> is used by unit tests.</p>\n</li>\n<li>\n<p>Copy keeper artifacts</p>\n<p>A bash script is available to copy keeper artifacts into this file directly from a running docker image. This script needs to run in the root of the project.\nThe script waits until the keeper contracts are deployed, and then copies the artifacts.</p>\n<pre><code>./scripts/wait_for_migration_and_extract_keeper_artifacts.sh\n</code></pre>\n<p>The artifacts contain the addresses of all the deployed contracts and their ABI definitions required to interact with them.</p>\n</li>\n</ol>\n<h4>Testing</h4>\n<p>Automatic tests are setup via Github actions\nOur test use pytest framework.</p>\n<h4>New Version / New Release</h4>\n<p>See <a href=\"RELEASE_PROCESS.md\" rel=\"nofollow\">RELEASE_PROCESS.md</a></p>\n<p>##Attribution\nThis project is based in the <a href=\"https://github.com/oceanprotocol/squid-py\" rel=\"nofollow\">Ocean Protocol Squid-py</a>. It keeps the same Apache v2 License and adds some improvements.</p>\n<h2>License</h2>\n<pre>Copyright 2020 Keyko GmbH.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n</pre>\n\n          </div>"}, "last_serial": 7136138, "releases": {"0.2.0": [{"comment_text": "", "digests": {"md5": "09f1eead055074979a818c39f32b5100", "sha256": "a848442ecd6df752629a7378daf189fa9ccf9f90c0c8ccd655723738fb2f8ac8"}, "downloads": -1, "filename": "nevermined_sdk_py-0.2.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "09f1eead055074979a818c39f32b5100", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 43715, "upload_time": "2020-04-30T09:38:15", "upload_time_iso_8601": "2020-04-30T09:38:15.693639Z", "url": "https://files.pythonhosted.org/packages/f9/c5/e5e9b2006d04d2789185c2737b8090b462e6bd873ee57a13bc68a13074a9/nevermined_sdk_py-0.2.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "992560d2ede7a83ed400bc9e9a36a0d9", "sha256": "833033be12674f3928037ba0499c4d0b1b2202a1d27ffaad396b898f1e2dae93"}, "downloads": -1, "filename": "nevermined-sdk-py-0.2.0.tar.gz", "has_sig": false, "md5_digest": "992560d2ede7a83ed400bc9e9a36a0d9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 73123, "upload_time": "2020-04-30T09:38:18", "upload_time_iso_8601": "2020-04-30T09:38:18.904620Z", "url": "https://files.pythonhosted.org/packages/8f/d0/f0830f22cac62e9d6a9dcf92aab72e4c7a86b5dbb4a2a9c3fdb04c83bafd/nevermined-sdk-py-0.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "09f1eead055074979a818c39f32b5100", "sha256": "a848442ecd6df752629a7378daf189fa9ccf9f90c0c8ccd655723738fb2f8ac8"}, "downloads": -1, "filename": "nevermined_sdk_py-0.2.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "09f1eead055074979a818c39f32b5100", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 43715, "upload_time": "2020-04-30T09:38:15", "upload_time_iso_8601": "2020-04-30T09:38:15.693639Z", "url": "https://files.pythonhosted.org/packages/f9/c5/e5e9b2006d04d2789185c2737b8090b462e6bd873ee57a13bc68a13074a9/nevermined_sdk_py-0.2.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "992560d2ede7a83ed400bc9e9a36a0d9", "sha256": "833033be12674f3928037ba0499c4d0b1b2202a1d27ffaad396b898f1e2dae93"}, "downloads": -1, "filename": "nevermined-sdk-py-0.2.0.tar.gz", "has_sig": false, "md5_digest": "992560d2ede7a83ed400bc9e9a36a0d9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 73123, "upload_time": "2020-04-30T09:38:18", "upload_time_iso_8601": "2020-04-30T09:38:18.904620Z", "url": "https://files.pythonhosted.org/packages/8f/d0/f0830f22cac62e9d6a9dcf92aab72e4c7a86b5dbb4a2a9c3fdb04c83bafd/nevermined-sdk-py-0.2.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:45:43 2020"}