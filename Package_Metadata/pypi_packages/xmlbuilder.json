{"info": {"author": "Kostiantyn Danylov aka koder", "author_email": "koder.mail@gmail.com", "bugtrack_url": null, "classifiers": ["Programming Language :: Python :: 2.5", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 2 :: Only", "Topic :: Text Editors :: Text Processing", "Topic :: Text Processing :: Markup :: HTML", "Topic :: Text Processing :: Markup :: XML"], "description": "XMLBuilder is tiny library build on top of ElementTree.TreeBuilder to\r\nmake xml files creation more pythonomic. `XMLBuilder` use `with`\r\nstatement and attribute access to define xml document structure.\r\nOnly 2.5+ python versions are supported.\r\n\r\nfrom __future__ import with_statement # only for python 2.5\r\nfrom xmlbuilder import XMLBuilder\r\n\r\nx = XMLBuilder('root')\r\nx.some_tag\r\nx.some_tag_with_data('text', a='12')\r\n\r\nwith x.some_tree(a='1'):\r\n    with x.data:\r\n        x.mmm\r\n        for i in range(10):\r\n            x.node(val=str(i))\r\n\r\netree_node = ~x # <= return xml.etree.ElementTree object\r\nprint str(x) # <= string object\r\n\r\nwill result:\r\n\r\n<?xml version=\"1.0\" encoding=\"utf-8\" ?>\r\n<root>\r\n    <some_tag />\r\n    <some_tag_with_data a=\"12\">text</some_tag_with_data>\r\n    <some_tree a=\"1\">\r\n        <data>\r\n            <mmm />\r\n            <node val=\"0\" />\r\n            <node val=\"1\" />\r\n            <node val=\"2\" />\r\n            <node val=\"3\" />\r\n            <node val=\"4\" />\r\n            <node val=\"5\" />\r\n            <node val=\"6\" />\r\n            <node val=\"7\" />\r\n            <node val=\"8\" />\r\n            <node val=\"9\" />\r\n        </data>\r\n    </some_tree>\r\n</root>\r\n\r\nThere some fields, which allow xml output customization:\r\n\r\nformatted = produce formatted xml. default = True\r\ntabstep   = tab string, used for formatting. default = ' ' * 4\r\nencoding  = xml document encoding. default = 'utf-8'\r\nxml_header = add xml header\r\n                (<?xml version=\"1.0\" encoding=\"$DOCUMENT_ENCODING$\">)\r\n            to begining of the document. default = True\r\nbuilder = builder class, used for create dcument. Default =\r\n                        xml.etree.ElementTree.TreeBuilder\r\n\r\nOptions can be readed by\r\n\r\nx = XMLBuilder('root')\r\nprint x[option_name]\r\n\r\nand changed by\r\n\r\nx[option_name] = new_val\r\n\r\nLook at xmlbuilder/test.py for UT and more examples.\r\nHappy xml'ing.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "UNKNOWN", "keywords": "xml", "license": "LGPL v3", "maintainer": "", "maintainer_email": "", "name": "xmlbuilder", "package_url": "https://pypi.org/project/xmlbuilder/", "platform": "any", "project_url": "https://pypi.org/project/xmlbuilder/", "project_urls": {"Download": "UNKNOWN", "Homepage": "UNKNOWN"}, "release_url": "https://pypi.org/project/xmlbuilder/1.0/", "requires_dist": null, "requires_python": null, "summary": "pythonic way to create xml/(x)html files. Updated version with fixes, unicode support and cleaned API.", "version": "1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            XMLBuilder is tiny library build on top of ElementTree.TreeBuilder to\n<br>make xml files creation more pythonomic. `XMLBuilder` use `with`\n<br>statement and attribute access to define xml document structure.\n<br>Only 2.5+ python versions are supported.\n<br>\n<br>from __future__ import with_statement # only for python 2.5\n<br>from xmlbuilder import XMLBuilder\n<br>\n<br>x = XMLBuilder('root')\n<br>x.some_tag\n<br>x.some_tag_with_data('text', a='12')\n<br>\n<br>with x.some_tree(a='1'):\n<br>    with x.data:\n<br>        x.mmm\n<br>        for i in range(10):\n<br>            x.node(val=str(i))\n<br>\n<br>etree_node = ~x # &lt;= return xml.etree.ElementTree object\n<br>print str(x) # &lt;= string object\n<br>\n<br>will result:\n<br>\n<br>&lt;?xml version=\"1.0\" encoding=\"utf-8\" ?&gt;\n<br>&lt;root&gt;\n<br>    &lt;some_tag /&gt;\n<br>    &lt;some_tag_with_data a=\"12\"&gt;text&lt;/some_tag_with_data&gt;\n<br>    &lt;some_tree a=\"1\"&gt;\n<br>        &lt;data&gt;\n<br>            &lt;mmm /&gt;\n<br>            &lt;node val=\"0\" /&gt;\n<br>            &lt;node val=\"1\" /&gt;\n<br>            &lt;node val=\"2\" /&gt;\n<br>            &lt;node val=\"3\" /&gt;\n<br>            &lt;node val=\"4\" /&gt;\n<br>            &lt;node val=\"5\" /&gt;\n<br>            &lt;node val=\"6\" /&gt;\n<br>            &lt;node val=\"7\" /&gt;\n<br>            &lt;node val=\"8\" /&gt;\n<br>            &lt;node val=\"9\" /&gt;\n<br>        &lt;/data&gt;\n<br>    &lt;/some_tree&gt;\n<br>&lt;/root&gt;\n<br>\n<br>There some fields, which allow xml output customization:\n<br>\n<br>formatted = produce formatted xml. default = True\n<br>tabstep   = tab string, used for formatting. default = ' ' * 4\n<br>encoding  = xml document encoding. default = 'utf-8'\n<br>xml_header = add xml header\n<br>                (&lt;?xml version=\"1.0\" encoding=\"$DOCUMENT_ENCODING$\"&gt;)\n<br>            to begining of the document. default = True\n<br>builder = builder class, used for create dcument. Default =\n<br>                        xml.etree.ElementTree.TreeBuilder\n<br>\n<br>Options can be readed by\n<br>\n<br>x = XMLBuilder('root')\n<br>print x[option_name]\n<br>\n<br>and changed by\n<br>\n<br>x[option_name] = new_val\n<br>\n<br>Look at xmlbuilder/test.py for UT and more examples.\n<br>Happy xml'ing.\n          </div>"}, "last_serial": 801850, "releases": {"0.9": [{"comment_text": "", "digests": {"md5": "ebce241baadf6eb8b800a1133acea519", "sha256": "a2b62c9fd27abff5125b88d24554bc2d457c985602110b13cb44da74069db7ef"}, "downloads": -1, "filename": "xmlbuilder-0.9-py2.6.egg", "has_sig": false, "md5_digest": "ebce241baadf6eb8b800a1133acea519", "packagetype": "bdist_egg", "python_version": "2.6", "requires_python": null, "size": 8977, "upload_time": "2008-12-02T22:43:00", "upload_time_iso_8601": "2008-12-02T22:43:00Z", "url": "https://files.pythonhosted.org/packages/96/a4/352112ed11ed0ba0a246b9180db2c311f3b42f8e672836fff431ef3d2ae7/xmlbuilder-0.9-py2.6.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "7cda33d9228bbfe19c273660ff7e1437", "sha256": "3fec4009e0254e8bf4735bc3f6814e0dab7baaf656fc92cc4f73820a7a676a78"}, "downloads": -1, "filename": "xmlbuilder-0.9.zip", "has_sig": false, "md5_digest": "7cda33d9228bbfe19c273660ff7e1437", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9085, "upload_time": "2008-12-02T22:42:59", "upload_time_iso_8601": "2008-12-02T22:42:59Z", "url": "https://files.pythonhosted.org/packages/07/9c/c9752daa264ea345608ce87614967c91315c49ca2687a0d01df235828a26/xmlbuilder-0.9.zip", "yanked": false}], "1.0": [{"comment_text": "", "digests": {"md5": "17596b2b8596a17abc8ab56085921b67", "sha256": "cdeb3231bfe9caa87abeff64f9eb96c83779eb1748300ac451a37ae4e371a25c"}, "downloads": -1, "filename": "xmlbuilder-1.0.tar.gz", "has_sig": false, "md5_digest": "17596b2b8596a17abc8ab56085921b67", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4260, "upload_time": "2011-12-14T01:55:08", "upload_time_iso_8601": "2011-12-14T01:55:08.831494Z", "url": "https://files.pythonhosted.org/packages/ab/50/7d5482347973e449432c7a09385a5d6769db63c95ef98590caa82d0792ae/xmlbuilder-1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "17596b2b8596a17abc8ab56085921b67", "sha256": "cdeb3231bfe9caa87abeff64f9eb96c83779eb1748300ac451a37ae4e371a25c"}, "downloads": -1, "filename": "xmlbuilder-1.0.tar.gz", "has_sig": false, "md5_digest": "17596b2b8596a17abc8ab56085921b67", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4260, "upload_time": "2011-12-14T01:55:08", "upload_time_iso_8601": "2011-12-14T01:55:08.831494Z", "url": "https://files.pythonhosted.org/packages/ab/50/7d5482347973e449432c7a09385a5d6769db63c95ef98590caa82d0792ae/xmlbuilder-1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:25:05 2020"}