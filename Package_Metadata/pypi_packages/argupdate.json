{"info": {"author": "Dustin Wyatt", "author_email": "dustin.wyatt@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3.7"], "description": "# argupdate\n\nThis package is used for updating values in the args/kwargs destined to\na function. This is particularly useful for decorators that want to\nmodify the values passed into the decorated function.\n\nBy introspecting the function the args/kwargs are destined for, it knows\nthe names of all arguments in your args (and of course your kwargs since\nthat is a dict). Because of this, you are able to provide updated values\nby name of the argument.\n\nBy accepting a special callable, we also provide a way to dynamically\nupdate the value of an argument at runtime.\n\n## simple example\n\n### The function we want to modify a value for\n\n```python\nfrom typing import Optional\n\ndef foo(arg_1: int, arg_2: bool, arg_3: Optional[str] = None) -> None:\n    print(arg_1, arg_2, arg_3)\n```\n\nLet's say for some reason we always want `arg_2` to be `False`, no\nmatter what the caller passes in.\n\n```python\nimport functools\nfrom argupdate import update_parameter_value\nfrom typing import Optional\n\ndef arg_2_always_false(func):\n    # This is the new value for `arg_2`\n    updated_values = {\n        'arg_2': False\n    }\n    @functools.wraps(func)\n    def wrapper(*args, **kwargs):\n        # Here we update the value.\n        updated_args, updated_kwargs = update_parameter_value(func, updated_values, args, kwargs)\n        return func(*updated_args, **updated_kwargs)\n    return wrapper\n\n@arg_2_always_false\ndef foo(arg_1: int, arg_2: bool, arg_3: Optional[str] = None) -> None:\n    print(arg_1, arg_2, arg_3)\n```\n\nAdmittedly, this is a contrived example. You could've just set set the\nsecond parameter in `args` to `False` without using this library. But,\neven in this small, contrived example, you've gained some decoupling by\nusing `argupdate`. As long as the name of the parameter stays the same,\nyou do not have to count on it being the second parameter in the\nargument list.\n\n## more advanced example\nYou can also use a special callable as the new value. This allows you to\nset the new value based upon the signature of the function and other\nargument's values.\n\nHere is an example taken from a real project. This project wrapped\nmultiple other backend libraries. These libraries all had methods that\ntook a `handle` argument as an `int`. Except one. This one library\nrequired the `handle` argument as a string that looked like\n`[HANDLE:0x0000001]`.\n\nInstead of repeating code everywhere checking which type of handle we\nshould pass in, we created a decorator that did it for us.\n\n```python\nimport functools\nimport inspect\nfrom typing import Any, Mapping, Sequence\n\nfrom argupdate import update_parameter_value, ValueUpdater\nfrom utils import stringify_int\n\n\ndef handle_stringifier(func):\n    class update_handle(ValueUpdater):\n        def __call__(self,\n                     original_value: Any,\n                     signature: inspect.Signature,\n                     orig_args: Sequence[Any],\n                     orig_kwargs: Mapping[str, Any]) -> Any:\n            if isinstance(original_value, int):\n                return stringify_int(int)\n\n            return original_value\n\n\n    updated_values = {\n        # update_handle will be used to create the value for the argument\n        # called `handle`\n        'handle': update_handle\n    }\n\n    @functools.wraps(func)\n    def wrapper(*args, **kwargs):\n        updated_args, updated_kwargs = update_parameter_value(func, updated_values, args, kwargs)\n        return func(*updated_args, **updated_kwargs)\n\n    return wrapper\n\n\n@handle_stringifier\ndef weird_handle_taker(handle: int) -> None:\n    ...\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/dmwyatt/argupdate", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "argupdate", "package_url": "https://pypi.org/project/argupdate/", "platform": "", "project_url": "https://pypi.org/project/argupdate/", "project_urls": {"Homepage": "https://github.com/dmwyatt/argupdate"}, "release_url": "https://pypi.org/project/argupdate/0.0.1/", "requires_dist": null, "requires_python": "~=3.5", "summary": "Update the value of args and kwargs destined for a callable.", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>argupdate</h1>\n<p>This package is used for updating values in the args/kwargs destined to\na function. This is particularly useful for decorators that want to\nmodify the values passed into the decorated function.</p>\n<p>By introspecting the function the args/kwargs are destined for, it knows\nthe names of all arguments in your args (and of course your kwargs since\nthat is a dict). Because of this, you are able to provide updated values\nby name of the argument.</p>\n<p>By accepting a special callable, we also provide a way to dynamically\nupdate the value of an argument at runtime.</p>\n<h2>simple example</h2>\n<h3>The function we want to modify a value for</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">Optional</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">arg_1</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">arg_2</span><span class=\"p\">:</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"n\">arg_3</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">arg_1</span><span class=\"p\">,</span> <span class=\"n\">arg_2</span><span class=\"p\">,</span> <span class=\"n\">arg_3</span><span class=\"p\">)</span>\n</pre>\n<p>Let's say for some reason we always want <code>arg_2</code> to be <code>False</code>, no\nmatter what the caller passes in.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">functools</span>\n<span class=\"kn\">from</span> <span class=\"nn\">argupdate</span> <span class=\"kn\">import</span> <span class=\"n\">update_parameter_value</span>\n<span class=\"kn\">from</span> <span class=\"nn\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">Optional</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">arg_2_always_false</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">):</span>\n    <span class=\"c1\"># This is the new value for `arg_2`</span>\n    <span class=\"n\">updated_values</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'arg_2'</span><span class=\"p\">:</span> <span class=\"kc\">False</span>\n    <span class=\"p\">}</span>\n    <span class=\"nd\">@functools</span><span class=\"o\">.</span><span class=\"n\">wraps</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">)</span>\n    <span class=\"k\">def</span> <span class=\"nf\">wrapper</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Here we update the value.</span>\n        <span class=\"n\">updated_args</span><span class=\"p\">,</span> <span class=\"n\">updated_kwargs</span> <span class=\"o\">=</span> <span class=\"n\">update_parameter_value</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">,</span> <span class=\"n\">updated_values</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"n\">kwargs</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">func</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">updated_args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">updated_kwargs</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">wrapper</span>\n\n<span class=\"nd\">@arg_2_always_false</span>\n<span class=\"k\">def</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">arg_1</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">arg_2</span><span class=\"p\">:</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"n\">arg_3</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">arg_1</span><span class=\"p\">,</span> <span class=\"n\">arg_2</span><span class=\"p\">,</span> <span class=\"n\">arg_3</span><span class=\"p\">)</span>\n</pre>\n<p>Admittedly, this is a contrived example. You could've just set set the\nsecond parameter in <code>args</code> to <code>False</code> without using this library. But,\neven in this small, contrived example, you've gained some decoupling by\nusing <code>argupdate</code>. As long as the name of the parameter stays the same,\nyou do not have to count on it being the second parameter in the\nargument list.</p>\n<h2>more advanced example</h2>\n<p>You can also use a special callable as the new value. This allows you to\nset the new value based upon the signature of the function and other\nargument's values.</p>\n<p>Here is an example taken from a real project. This project wrapped\nmultiple other backend libraries. These libraries all had methods that\ntook a <code>handle</code> argument as an <code>int</code>. Except one. This one library\nrequired the <code>handle</code> argument as a string that looked like\n<code>[HANDLE:0x0000001]</code>.</p>\n<p>Instead of repeating code everywhere checking which type of handle we\nshould pass in, we created a decorator that did it for us.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">functools</span>\n<span class=\"kn\">import</span> <span class=\"nn\">inspect</span>\n<span class=\"kn\">from</span> <span class=\"nn\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">Mapping</span><span class=\"p\">,</span> <span class=\"n\">Sequence</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">argupdate</span> <span class=\"kn\">import</span> <span class=\"n\">update_parameter_value</span><span class=\"p\">,</span> <span class=\"n\">ValueUpdater</span>\n<span class=\"kn\">from</span> <span class=\"nn\">utils</span> <span class=\"kn\">import</span> <span class=\"n\">stringify_int</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">handle_stringifier</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">):</span>\n    <span class=\"k\">class</span> <span class=\"nc\">update_handle</span><span class=\"p\">(</span><span class=\"n\">ValueUpdater</span><span class=\"p\">):</span>\n        <span class=\"k\">def</span> <span class=\"fm\">__call__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span>\n                     <span class=\"n\">original_value</span><span class=\"p\">:</span> <span class=\"n\">Any</span><span class=\"p\">,</span>\n                     <span class=\"n\">signature</span><span class=\"p\">:</span> <span class=\"n\">inspect</span><span class=\"o\">.</span><span class=\"n\">Signature</span><span class=\"p\">,</span>\n                     <span class=\"n\">orig_args</span><span class=\"p\">:</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">],</span>\n                     <span class=\"n\">orig_kwargs</span><span class=\"p\">:</span> <span class=\"n\">Mapping</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">])</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Any</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">original_value</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">):</span>\n                <span class=\"k\">return</span> <span class=\"n\">stringify_int</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">)</span>\n\n            <span class=\"k\">return</span> <span class=\"n\">original_value</span>\n\n\n    <span class=\"n\">updated_values</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"c1\"># update_handle will be used to create the value for the argument</span>\n        <span class=\"c1\"># called `handle`</span>\n        <span class=\"s1\">'handle'</span><span class=\"p\">:</span> <span class=\"n\">update_handle</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"nd\">@functools</span><span class=\"o\">.</span><span class=\"n\">wraps</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">)</span>\n    <span class=\"k\">def</span> <span class=\"nf\">wrapper</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"n\">updated_args</span><span class=\"p\">,</span> <span class=\"n\">updated_kwargs</span> <span class=\"o\">=</span> <span class=\"n\">update_parameter_value</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">,</span> <span class=\"n\">updated_values</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"n\">kwargs</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">func</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">updated_args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">updated_kwargs</span><span class=\"p\">)</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">wrapper</span>\n\n\n<span class=\"nd\">@handle_stringifier</span>\n<span class=\"k\">def</span> <span class=\"nf\">weird_handle_taker</span><span class=\"p\">(</span><span class=\"n\">handle</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n    <span class=\"o\">...</span>\n</pre>\n\n          </div>"}, "last_serial": 5146919, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "80072f4a536917f9f9f690adc34d9006", "sha256": "58dd2fb7d7ca3148a5cf1e2627233decddc27492c556d3de1d8a4e882c6c3311"}, "downloads": -1, "filename": "argupdate-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "80072f4a536917f9f9f690adc34d9006", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": "~=3.5", "size": 5350, "upload_time": "2019-04-15T21:50:47", "upload_time_iso_8601": "2019-04-15T21:50:47.811158Z", "url": "https://files.pythonhosted.org/packages/e6/f4/afb89e13e7b3d2717e4869140dc181dd54845ee56a51edc2fb8fc36ab4c9/argupdate-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "dea7deb8f2227d7cdd65e6bfe8872ac6", "sha256": "ed577897b7d8a3ce29d4a400749bc73b117d85ca796a23ec822ea66bdc331621"}, "downloads": -1, "filename": "argupdate-0.0.1.tar.gz", "has_sig": false, "md5_digest": "dea7deb8f2227d7cdd65e6bfe8872ac6", "packagetype": "sdist", "python_version": "source", "requires_python": "~=3.5", "size": 4242, "upload_time": "2019-04-15T21:50:49", "upload_time_iso_8601": "2019-04-15T21:50:49.479546Z", "url": "https://files.pythonhosted.org/packages/b7/33/c98f2ff8495cd23b103427fdb8676028de6337bf53cb2fc21624e02c18c9/argupdate-0.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "80072f4a536917f9f9f690adc34d9006", "sha256": "58dd2fb7d7ca3148a5cf1e2627233decddc27492c556d3de1d8a4e882c6c3311"}, "downloads": -1, "filename": "argupdate-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "80072f4a536917f9f9f690adc34d9006", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": "~=3.5", "size": 5350, "upload_time": "2019-04-15T21:50:47", "upload_time_iso_8601": "2019-04-15T21:50:47.811158Z", "url": "https://files.pythonhosted.org/packages/e6/f4/afb89e13e7b3d2717e4869140dc181dd54845ee56a51edc2fb8fc36ab4c9/argupdate-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "dea7deb8f2227d7cdd65e6bfe8872ac6", "sha256": "ed577897b7d8a3ce29d4a400749bc73b117d85ca796a23ec822ea66bdc331621"}, "downloads": -1, "filename": "argupdate-0.0.1.tar.gz", "has_sig": false, "md5_digest": "dea7deb8f2227d7cdd65e6bfe8872ac6", "packagetype": "sdist", "python_version": "source", "requires_python": "~=3.5", "size": 4242, "upload_time": "2019-04-15T21:50:49", "upload_time_iso_8601": "2019-04-15T21:50:49.479546Z", "url": "https://files.pythonhosted.org/packages/b7/33/c98f2ff8495cd23b103427fdb8676028de6337bf53cb2fc21624e02c18c9/argupdate-0.0.1.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:17:16 2020"}