{"info": {"author": "Giuseppe De Marco", "author_email": "giuseppe.demarco@unical.it", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "License :: OSI Approved :: BSD License", "Programming Language :: Python :: 2", "Programming Language :: Python :: 3"], "description": "Django SAML MDQ\n---------------\n\nA lightweight SAML2 MDQ server that implements [draft-young-md-query implementation](https://tools.ietf.org/html/draft-young-md-query-12):\n\n1) Runs on top of the metadata downloaded and validated by pyFF (batch pipeline)\n2) Have signing features (on top of xmlsec)\n3) Have ValidUntil definitions feature\n4) Supports the following Entities Identifiers: urlencoded, {sha1} and {base64}\n\nRemember that pyFF is needed for metadata downloading, it can run as daemon or as a scheduled process (batch)\n\nTable of contents\n-----------------\n\n<!--ts-->\n   * #### Installation\n       * [Requirements](#requirements)\n       * [Configure pyFF](#configure-pyff)\n       * [Test the pipeline](#test-the-pipeline)\n       * [Configure Django MDQ](#configure-django-mdq)\n   * #### Client configurations\n      * [Shibboleth IdP Configuration](#shibboleth-idp-configuration)\n      * [PySAML2](#A-test-with-pysaml2)\n   * #### Performances\n      * [Performances](#performances)\n   * [Authors](#authors)\n   * [Credits](#credits)\n<!--te-->\n\nRequirements\n------------\n\n````\napt install build-essential python3-dev libxml2-dev libxslt1-dev libyaml-dev python3-pip\npip3 install --upgrade pip\npip3 install virtualenv django lxml xmlsec\n````\n\nInstall [pyFF](https://pyff.io/)\n````\nvirtualenv -p python3 python-pyff\nsource python-pyff/bin/activate\npip3 install git+https://github.com/IdentityPython/pyFF.git\n````\n\nConfigure pyFF\n--------------\n\n````\n# Create a folder for the configuration\nmkdir pyff-configuration\ncd pyff-configuration\n\n# create folder for the certificates\nmkdir certificates\n\n# create certificates\nopenssl req -nodes -new -x509 -days 3650 -keyout certificates/private.key -out certificates/public.cert -subj '/CN=your.own.fqdn.com'\n\n# create a pipeline directory\nmkdir pipelines\n````\n\nCreate a pipelines to fetch and handle all the Idem + eduGAIN metadata, this would be similar to the following.\nName it `pipelines/garr_batch.fd`:\n````\n# Metadata download and validation\n- load xrd garr-loaded.xrd:\n  - ./pipelines/garr.xrd\n# select can even filter entity by IDPSSO or SPSSO Description and things ...\n# - select: \"!//md:EntityDescriptor[md:SPSSODescriptor]\"\n- select\n- store:\n     directory: ./garr\n- publish:\n     output: ./garr/garr-loaded.xml\n- stats\n````\n\nNow create the XRD file where to configure the URLs where the Metadata can be downloaded.\nName it `pipelines/garr.xrd`\n````\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<XRDS xmlns=\"http://docs.oasis-open.org/ns/xri/xrd-1.0\">\n  <XRD>\n    <Link rel=\"urn:oasis:names:tc:SAML:2.0:metadata\" href=\"http://md.idem.garr.it/metadata/idem-test-metadata-sha256.xml\"/>\n  </XRD>\n  <XRD>\n    <Subject>http://md.idem.garr.it/metadata/edugain2idem-metadata-sha256.xml</Subject>\n    <Link rel=\"urn:oasis:names:tc:SAML:2.0:metadata\" href=\"http://md.idem.garr.it/metadata/edugain2idem-metadata-sha256.xml\">\n        <Title>IDEM+eduGAIN</Title>\n        <ds:KeyInfo xmlns:ds=\"http://www.w3.org/2000/09/xmldsig#\">\n            <ds:X509Data>\n                <ds:X509Certificate>\n                MIIDWzCCAkOgAwIBAgIJALo/EGIq8rgNMA0GCSqGSIb3DQEBCwUAMEQxCzAJBgNV\n                BAYTAklUMRYwFAYDVQQKDA1JREVNIEdBUlIgQUFJMR0wGwYDVQQDDBRJREVNIE1l\n                dGFkYXRhIFNpZ25lcjAeFw0xOTAxMjIxNjA5MjBaFw0yMjAxMjExNjA5MjBaMEQx\n                CzAJBgNVBAYTAklUMRYwFAYDVQQKDA1JREVNIEdBUlIgQUFJMR0wGwYDVQQDDBRJ\n                REVNIE1ldGFkYXRhIFNpZ25lcjCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoC\n                ggEBAMay3N21fswu3AE6hqCPUVjvCyol5OKTHs9CXDIFyAoigP+YSdloLSGwx6n6\n                ks9aBbJqlzRBIEd3CpByvX7GmBuITl3ElhxMY40Cv/ULok1GbDmQMhPScU6J1f9b\n                526R9Ks+BbYZYmBRX9gqmpX1R867IES4z+JhXnXr5K8HTPjfaDGh2xORL6msXjww\n                DJgaJCOpBCctLvCWcmUp0ucpl8VHGjFAAI5Eb6pwQEEPj1yqW52ggM+AHNFY6bAC\n                9RX7Qv8MonQZwXpNNBNL+UcnGLVBXtBftd4zq7XxPNN9F/Ele3YJGaOVk8cCEJt5\n                SfTeguzUaAyh8f/BfEs6CwucCSsCAwEAAaNQME4wHQYDVR0OBBYEFCZQVW7g6mc9\n                3zaJP/p0lGbVQ4O6MB8GA1UdIwQYMBaAFCZQVW7g6mc93zaJP/p0lGbVQ4O6MAwG\n                A1UdEwQFMAMBAf8wDQYJKoZIhvcNAQELBQADggEBAF6OKKdWyeI385ZS5i29mSMA\n                4BoPCVAhyXDMLMdqTQqvZp3PAL/zjLYRYKgGH53d4uN/EztWM8YBdyzBzdbpFWpd\n                wRGzwyfXzt6l2luElWb59PacNqHbBkyFO2YZmgqLzgrVX1gA3/3ij9zrLqd1lHVH\n                MHPUpqv98KYXnttyzhacdYaRGDO/2A28U9QeRq2/HgVScklhJvoySeNyXNspYfte\n                ePRxeHBj21DgiQb+X1+ovKASM+RULa6cA1TJBCop+VqZMZiRJ3Rj6RML63ckEO8H\n                Md/XFvxlr+P2JcVKzHaZEEUGGINUCCuDABqKBZOqykGWXDastVw6/I0OIdLmWNI=\n                </ds:X509Certificate>\n            </ds:X509Data>\n      </ds:KeyInfo>\n    </Link>\n  </XRD>\n</XRDS>\n````\n\n#### Test the pipeline\n````\n\npyff pipelines/garr.fd\n````\n\nYou should have an output of this kind\n````\ntotal size:     6003\nselected:       6003\n          idps: 3257\n           sps: 2744\n````\n\nConfigure Django MDQ\n--------------------\nIf you need to integrate `saml2_mdq` in a preexisting django project you can install it as an app:\n````\npip install saml2_mdq\n````\nThen add `saml2_mdq` into your `settings.INSTALLED_APPS`, it doesn't need migrations.\nAdd also `django.middleware.http.ConditionalGetMiddleware` in `settings.MIDDLEWARE` to enable `ETag` in the HttpResponse headers.\n\nIf you instead just need a fully working MDQ server you can copy the entire project this way\n````\ngit clone https://github.com/UniversitaDellaCalabria/Django-MDQ.git\ncd Django-MDQ\npip install -r requirements\n````\n\nThen\n\n1. Copy `django_mdq/settingslocal.py.example` to `django_mdq/settingslocal.py` and edit it\n2. in `django_mdq/settingslocal.py` configure:\n   - `PYFF_METADATA_FOLDER` must point to the folder where the pyFF downloads periodically the metadata xml files\n   - `PYFF_METADATA_LOADED` must point to the full metadata xml published by pyff, containing all the entities\n   - `METADATA_SIGNER_KEY` and `METADATA_SIGNER_CERT` to enable Metadata signing features (optional, not required)\n   - `METADATA_CACHE_CONTROL` to set the Http-Header Cache control max-age\n   - `METADATA_VALID_UNTIL` to set the freshness of the metadata\n2. This projects doesn't need of any database configuration\n3. Run it in development mode `./manage.py runserver 0.0.0.0:8001` or in production one (see gunicorn or uwsgi examples to do that)\n\nTo create your Metadata RSA keys you can even use this example command:\n````\nopenssl req -nodes -new -x509 -days 3650 -keyout certificates/private.key -out certificates/public.cert -subj '/CN=your.own.fqdn.com'\n````\n\nShibboleth IdP Configuration\n----------------------------\n\nThis is a metadata-provider definition file that can be included in`/opt/shibboleth-idp/conf/services.xml`.\nIn the MetadataProviders resources, called `<util:list id=\"shibboleth.MetadataResolverResources\">` we can put it as the child element `<value>%{idp.home}/conf/metadata-providers-mdq.xml</value>`.\nJust change `django_mdq.url` in your production url.\n````\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!-- This file is an EXAMPLE metadata configuration file. -->\n<MetadataProvider id=\"ShibbolethMetadataMdq\" xsi:type=\"ChainingMetadataProvider\"\n    xmlns=\"urn:mace:shibboleth:2.0:metadata\"\n    xmlns:resource=\"urn:mace:shibboleth:2.0:resource\"\n    xmlns:security=\"urn:mace:shibboleth:2.0:security\"\n    xmlns:md=\"urn:oasis:names:tc:SAML:2.0:metadata\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"urn:mace:shibboleth:2.0:metadata http://shibboleth.net/schema/idp/shibboleth-metadata.xsd\n                        urn:mace:shibboleth:2.0:resource http://shibboleth.net/schema/idp/shibboleth-resource.xsd\n                        urn:mace:shibboleth:2.0:security http://shibboleth.net/schema/idp/shibboleth-security.xsd\n                        urn:oasis:names:tc:SAML:2.0:metadata http://docs.oasis-open.org/security/saml/v2.0/saml-schema-metadata-2.0.xsd\">\n\n    <MetadataProvider id=\"DynamicEntityMetadata\" xsi:type=\"DynamicHTTPMetadataProvider\"\n                  connectionRequestTimeout=\"PT5S\"\n                  connectionTimeout=\"PT5S\"\n                  socketTimeout=\"PT3S\">\n\n    <!-- Enable this if have configured METADATA_SIGNER_KEY and METADATA_SIGNER_CERT in Django-MDQ settingslocal.py\n    <MetadataFilter xsi:type=\"SignatureValidation\" requireSignedRoot=\"true\"\n                    certificateFile=\"%{idp.home}/credentials/mdq-cert.pem\"/>\n    -->\n\n    <!-- Enable this if have configured METADATA_VALID_UNTIL in Django-MDQ settingslocal.py\n    <MetadataFilter xsi:type=\"RequiredValidUntil\" maxValidityInterval=\"P14D\"/>\n    -->\n\n    <MetadataQueryProtocol>https://django_mdq.url/</MetadataQueryProtocol>\n    </MetadataProvider>\n\n</MetadataProvider>\n````\n\n#### Test the configuration\n````\n# reload ShibbolethIdP or Metadata Service\ntouch /opt/jetty/webapps/idp.xml\n\n# do a mdquery\n/opt/shibboleth-idp/bin/mdquery.sh -e https://coco.release-check.edugain.org/shibboleth --saml2 -u http://localhost:8080/idp\n````\n\nA test with PySAML2\n-------------------\n\n````\nimport io\nimport json\nimport urllib.request\n\nfrom saml2.mdstore import MetaDataMDX\n\ndef b64(entity_name):\n    return '{base64}'+base64.b64encode(entity_name.encode()).decode()\n\n# when available\nmdq_url = \"http://localhost:8001\"\nmdq_cert = \"certificates/public.cert\"\n\nentity2check = 'https://idp.unical.it/idp/shibboleth'\n\ncert = open(mdq_cert)\n\n# omit cert if unavailable\nmdx = MetaDataMDX(mdq_url, cert=cert)\n# base64 entity name trasformation\n# mdx = MetaDataMDX(mdq_url, cert=cert, entity_transform=b64)\n\n# certificati\nmdx.certs(entity2check, \"idpsso\", use=\"encryption\")\n\n# get certs from idp\nmdx.service(entity2check, 'idpsso_descriptor', 'single_sign_on_service')\nmdx.certs(entity2check, \"idpsso\", use=\"signing\")\n````\n\nAuthors\n-------\n\nGiuseppe De Marco <giuseppe.demarco@unical.it>\n\n\nCredits\n-------\n[IdentityPython](https://idpy.org/)\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/UniversitaDellaCalabria/Django-MDQ", "keywords": "", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "saml2-mdq", "package_url": "https://pypi.org/project/saml2-mdq/", "platform": "", "project_url": "https://pypi.org/project/saml2-mdq/", "project_urls": {"Homepage": "https://github.com/UniversitaDellaCalabria/Django-MDQ"}, "release_url": "https://pypi.org/project/saml2-mdq/0.6.5/", "requires_dist": ["django", "pyff"], "requires_python": "", "summary": "Django SAML MDQ", "version": "0.6.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h2>Django SAML MDQ</h2>\n<p>A lightweight SAML2 MDQ server that implements <a href=\"https://tools.ietf.org/html/draft-young-md-query-12\" rel=\"nofollow\">draft-young-md-query implementation</a>:</p>\n<ol>\n<li>Runs on top of the metadata downloaded and validated by pyFF (batch pipeline)</li>\n<li>Have signing features (on top of xmlsec)</li>\n<li>Have ValidUntil definitions feature</li>\n<li>Supports the following Entities Identifiers: urlencoded, {sha1} and {base64}</li>\n</ol>\n<p>Remember that pyFF is needed for metadata downloading, it can run as daemon or as a scheduled process (batch)</p>\n<h2>Table of contents</h2>\n\n<ul>\n<li>\n<h4>Installation</h4>\n<ul>\n<li><a href=\"#requirements\" rel=\"nofollow\">Requirements</a></li>\n<li><a href=\"#configure-pyff\" rel=\"nofollow\">Configure pyFF</a></li>\n<li><a href=\"#test-the-pipeline\" rel=\"nofollow\">Test the pipeline</a></li>\n<li><a href=\"#configure-django-mdq\" rel=\"nofollow\">Configure Django MDQ</a></li>\n</ul>\n</li>\n<li>\n<h4>Client configurations</h4>\n<ul>\n<li><a href=\"#shibboleth-idp-configuration\" rel=\"nofollow\">Shibboleth IdP Configuration</a></li>\n<li><a href=\"#A-test-with-pysaml2\" rel=\"nofollow\">PySAML2</a></li>\n</ul>\n</li>\n<li>\n<h4>Performances</h4>\n<ul>\n<li><a href=\"#performances\" rel=\"nofollow\">Performances</a></li>\n</ul>\n</li>\n<li><a href=\"#authors\" rel=\"nofollow\">Authors</a></li>\n<li><a href=\"#credits\" rel=\"nofollow\">Credits</a></li>\n</ul>\n\n<h2>Requirements</h2>\n<pre><code>apt install build-essential python3-dev libxml2-dev libxslt1-dev libyaml-dev python3-pip\npip3 install --upgrade pip\npip3 install virtualenv django lxml xmlsec\n</code></pre>\n<p>Install <a href=\"https://pyff.io/\" rel=\"nofollow\">pyFF</a></p>\n<pre><code>virtualenv -p python3 python-pyff\nsource python-pyff/bin/activate\npip3 install git+https://github.com/IdentityPython/pyFF.git\n</code></pre>\n<h2>Configure pyFF</h2>\n<pre><code># Create a folder for the configuration\nmkdir pyff-configuration\ncd pyff-configuration\n\n# create folder for the certificates\nmkdir certificates\n\n# create certificates\nopenssl req -nodes -new -x509 -days 3650 -keyout certificates/private.key -out certificates/public.cert -subj '/CN=your.own.fqdn.com'\n\n# create a pipeline directory\nmkdir pipelines\n</code></pre>\n<p>Create a pipelines to fetch and handle all the Idem + eduGAIN metadata, this would be similar to the following.\nName it <code>pipelines/garr_batch.fd</code>:</p>\n<pre><code># Metadata download and validation\n- load xrd garr-loaded.xrd:\n  - ./pipelines/garr.xrd\n# select can even filter entity by IDPSSO or SPSSO Description and things ...\n# - select: \"!//md:EntityDescriptor[md:SPSSODescriptor]\"\n- select\n- store:\n     directory: ./garr\n- publish:\n     output: ./garr/garr-loaded.xml\n- stats\n</code></pre>\n<p>Now create the XRD file where to configure the URLs where the Metadata can be downloaded.\nName it <code>pipelines/garr.xrd</code></p>\n<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;XRDS xmlns=\"http://docs.oasis-open.org/ns/xri/xrd-1.0\"&gt;\n  &lt;XRD&gt;\n    &lt;Link rel=\"urn:oasis:names:tc:SAML:2.0:metadata\" href=\"http://md.idem.garr.it/metadata/idem-test-metadata-sha256.xml\"/&gt;\n  &lt;/XRD&gt;\n  &lt;XRD&gt;\n    &lt;Subject&gt;http://md.idem.garr.it/metadata/edugain2idem-metadata-sha256.xml&lt;/Subject&gt;\n    &lt;Link rel=\"urn:oasis:names:tc:SAML:2.0:metadata\" href=\"http://md.idem.garr.it/metadata/edugain2idem-metadata-sha256.xml\"&gt;\n        &lt;Title&gt;IDEM+eduGAIN&lt;/Title&gt;\n        &lt;ds:KeyInfo xmlns:ds=\"http://www.w3.org/2000/09/xmldsig#\"&gt;\n            &lt;ds:X509Data&gt;\n                &lt;ds:X509Certificate&gt;\n                MIIDWzCCAkOgAwIBAgIJALo/EGIq8rgNMA0GCSqGSIb3DQEBCwUAMEQxCzAJBgNV\n                BAYTAklUMRYwFAYDVQQKDA1JREVNIEdBUlIgQUFJMR0wGwYDVQQDDBRJREVNIE1l\n                dGFkYXRhIFNpZ25lcjAeFw0xOTAxMjIxNjA5MjBaFw0yMjAxMjExNjA5MjBaMEQx\n                CzAJBgNVBAYTAklUMRYwFAYDVQQKDA1JREVNIEdBUlIgQUFJMR0wGwYDVQQDDBRJ\n                REVNIE1ldGFkYXRhIFNpZ25lcjCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoC\n                ggEBAMay3N21fswu3AE6hqCPUVjvCyol5OKTHs9CXDIFyAoigP+YSdloLSGwx6n6\n                ks9aBbJqlzRBIEd3CpByvX7GmBuITl3ElhxMY40Cv/ULok1GbDmQMhPScU6J1f9b\n                526R9Ks+BbYZYmBRX9gqmpX1R867IES4z+JhXnXr5K8HTPjfaDGh2xORL6msXjww\n                DJgaJCOpBCctLvCWcmUp0ucpl8VHGjFAAI5Eb6pwQEEPj1yqW52ggM+AHNFY6bAC\n                9RX7Qv8MonQZwXpNNBNL+UcnGLVBXtBftd4zq7XxPNN9F/Ele3YJGaOVk8cCEJt5\n                SfTeguzUaAyh8f/BfEs6CwucCSsCAwEAAaNQME4wHQYDVR0OBBYEFCZQVW7g6mc9\n                3zaJP/p0lGbVQ4O6MB8GA1UdIwQYMBaAFCZQVW7g6mc93zaJP/p0lGbVQ4O6MAwG\n                A1UdEwQFMAMBAf8wDQYJKoZIhvcNAQELBQADggEBAF6OKKdWyeI385ZS5i29mSMA\n                4BoPCVAhyXDMLMdqTQqvZp3PAL/zjLYRYKgGH53d4uN/EztWM8YBdyzBzdbpFWpd\n                wRGzwyfXzt6l2luElWb59PacNqHbBkyFO2YZmgqLzgrVX1gA3/3ij9zrLqd1lHVH\n                MHPUpqv98KYXnttyzhacdYaRGDO/2A28U9QeRq2/HgVScklhJvoySeNyXNspYfte\n                ePRxeHBj21DgiQb+X1+ovKASM+RULa6cA1TJBCop+VqZMZiRJ3Rj6RML63ckEO8H\n                Md/XFvxlr+P2JcVKzHaZEEUGGINUCCuDABqKBZOqykGWXDastVw6/I0OIdLmWNI=\n                &lt;/ds:X509Certificate&gt;\n            &lt;/ds:X509Data&gt;\n      &lt;/ds:KeyInfo&gt;\n    &lt;/Link&gt;\n  &lt;/XRD&gt;\n&lt;/XRDS&gt;\n</code></pre>\n<h4>Test the pipeline</h4>\n<pre><code>\npyff pipelines/garr.fd\n</code></pre>\n<p>You should have an output of this kind</p>\n<pre><code>total size:     6003\nselected:       6003\n          idps: 3257\n           sps: 2744\n</code></pre>\n<h2>Configure Django MDQ</h2>\n<p>If you need to integrate <code>saml2_mdq</code> in a preexisting django project you can install it as an app:</p>\n<pre><code>pip install saml2_mdq\n</code></pre>\n<p>Then add <code>saml2_mdq</code> into your <code>settings.INSTALLED_APPS</code>, it doesn't need migrations.\nAdd also <code>django.middleware.http.ConditionalGetMiddleware</code> in <code>settings.MIDDLEWARE</code> to enable <code>ETag</code> in the HttpResponse headers.</p>\n<p>If you instead just need a fully working MDQ server you can copy the entire project this way</p>\n<pre><code>git clone https://github.com/UniversitaDellaCalabria/Django-MDQ.git\ncd Django-MDQ\npip install -r requirements\n</code></pre>\n<p>Then</p>\n<ol>\n<li>Copy <code>django_mdq/settingslocal.py.example</code> to <code>django_mdq/settingslocal.py</code> and edit it</li>\n<li>in <code>django_mdq/settingslocal.py</code> configure:\n<ul>\n<li><code>PYFF_METADATA_FOLDER</code> must point to the folder where the pyFF downloads periodically the metadata xml files</li>\n<li><code>PYFF_METADATA_LOADED</code> must point to the full metadata xml published by pyff, containing all the entities</li>\n<li><code>METADATA_SIGNER_KEY</code> and <code>METADATA_SIGNER_CERT</code> to enable Metadata signing features (optional, not required)</li>\n<li><code>METADATA_CACHE_CONTROL</code> to set the Http-Header Cache control max-age</li>\n<li><code>METADATA_VALID_UNTIL</code> to set the freshness of the metadata</li>\n</ul>\n</li>\n<li>This projects doesn't need of any database configuration</li>\n<li>Run it in development mode <code>./manage.py runserver 0.0.0.0:8001</code> or in production one (see gunicorn or uwsgi examples to do that)</li>\n</ol>\n<p>To create your Metadata RSA keys you can even use this example command:</p>\n<pre><code>openssl req -nodes -new -x509 -days 3650 -keyout certificates/private.key -out certificates/public.cert -subj '/CN=your.own.fqdn.com'\n</code></pre>\n<h2>Shibboleth IdP Configuration</h2>\n<p>This is a metadata-provider definition file that can be included in<code>/opt/shibboleth-idp/conf/services.xml</code>.\nIn the MetadataProviders resources, called <code>&lt;util:list id=\"shibboleth.MetadataResolverResources\"&gt;</code> we can put it as the child element <code>&lt;value&gt;%{idp.home}/conf/metadata-providers-mdq.xml&lt;/value&gt;</code>.\nJust change <code>django_mdq.url</code> in your production url.</p>\n<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;!-- This file is an EXAMPLE metadata configuration file. --&gt;\n&lt;MetadataProvider id=\"ShibbolethMetadataMdq\" xsi:type=\"ChainingMetadataProvider\"\n    xmlns=\"urn:mace:shibboleth:2.0:metadata\"\n    xmlns:resource=\"urn:mace:shibboleth:2.0:resource\"\n    xmlns:security=\"urn:mace:shibboleth:2.0:security\"\n    xmlns:md=\"urn:oasis:names:tc:SAML:2.0:metadata\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"urn:mace:shibboleth:2.0:metadata http://shibboleth.net/schema/idp/shibboleth-metadata.xsd\n                        urn:mace:shibboleth:2.0:resource http://shibboleth.net/schema/idp/shibboleth-resource.xsd\n                        urn:mace:shibboleth:2.0:security http://shibboleth.net/schema/idp/shibboleth-security.xsd\n                        urn:oasis:names:tc:SAML:2.0:metadata http://docs.oasis-open.org/security/saml/v2.0/saml-schema-metadata-2.0.xsd\"&gt;\n\n    &lt;MetadataProvider id=\"DynamicEntityMetadata\" xsi:type=\"DynamicHTTPMetadataProvider\"\n                  connectionRequestTimeout=\"PT5S\"\n                  connectionTimeout=\"PT5S\"\n                  socketTimeout=\"PT3S\"&gt;\n\n    &lt;!-- Enable this if have configured METADATA_SIGNER_KEY and METADATA_SIGNER_CERT in Django-MDQ settingslocal.py\n    &lt;MetadataFilter xsi:type=\"SignatureValidation\" requireSignedRoot=\"true\"\n                    certificateFile=\"%{idp.home}/credentials/mdq-cert.pem\"/&gt;\n    --&gt;\n\n    &lt;!-- Enable this if have configured METADATA_VALID_UNTIL in Django-MDQ settingslocal.py\n    &lt;MetadataFilter xsi:type=\"RequiredValidUntil\" maxValidityInterval=\"P14D\"/&gt;\n    --&gt;\n\n    &lt;MetadataQueryProtocol&gt;https://django_mdq.url/&lt;/MetadataQueryProtocol&gt;\n    &lt;/MetadataProvider&gt;\n\n&lt;/MetadataProvider&gt;\n</code></pre>\n<h4>Test the configuration</h4>\n<pre><code># reload ShibbolethIdP or Metadata Service\ntouch /opt/jetty/webapps/idp.xml\n\n# do a mdquery\n/opt/shibboleth-idp/bin/mdquery.sh -e https://coco.release-check.edugain.org/shibboleth --saml2 -u http://localhost:8080/idp\n</code></pre>\n<h2>A test with PySAML2</h2>\n<pre><code>import io\nimport json\nimport urllib.request\n\nfrom saml2.mdstore import MetaDataMDX\n\ndef b64(entity_name):\n    return '{base64}'+base64.b64encode(entity_name.encode()).decode()\n\n# when available\nmdq_url = \"http://localhost:8001\"\nmdq_cert = \"certificates/public.cert\"\n\nentity2check = 'https://idp.unical.it/idp/shibboleth'\n\ncert = open(mdq_cert)\n\n# omit cert if unavailable\nmdx = MetaDataMDX(mdq_url, cert=cert)\n# base64 entity name trasformation\n# mdx = MetaDataMDX(mdq_url, cert=cert, entity_transform=b64)\n\n# certificati\nmdx.certs(entity2check, \"idpsso\", use=\"encryption\")\n\n# get certs from idp\nmdx.service(entity2check, 'idpsso_descriptor', 'single_sign_on_service')\nmdx.certs(entity2check, \"idpsso\", use=\"signing\")\n</code></pre>\n<h2>Authors</h2>\n<p>Giuseppe De Marco <a href=\"mailto:giuseppe.demarco@unical.it\">giuseppe.demarco@unical.it</a></p>\n<h2>Credits</h2>\n<p><a href=\"https://idpy.org/\" rel=\"nofollow\">IdentityPython</a></p>\n\n          </div>"}, "last_serial": 6776563, "releases": {"0.2rc0": [{"comment_text": "", "digests": {"md5": "6faa6981255fbb8ba23fa093a91649d6", "sha256": "8bcc0b4ad5b3ec7b90b97fb0c54e453e736f3febc868739884b9d41888eb0c42"}, "downloads": -1, "filename": "saml2_mdq-0.2rc0-py3-none-any.whl", "has_sig": false, "md5_digest": "6faa6981255fbb8ba23fa093a91649d6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7907, "upload_time": "2020-02-10T09:03:47", "upload_time_iso_8601": "2020-02-10T09:03:47.838406Z", "url": "https://files.pythonhosted.org/packages/f8/aa/037049c7ef426e279f683e2920d6c8b666a92f76194d410eb385f47ee116/saml2_mdq-0.2rc0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "14eb7f249b4cd9454f39f192717f05d2", "sha256": "3433fba0c9c91c7de0fbf6417899ac067170263b50e0cab18fa6dd7ef446835a"}, "downloads": -1, "filename": "saml2_mdq-0.2rc0.tar.gz", "has_sig": false, "md5_digest": "14eb7f249b4cd9454f39f192717f05d2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7403, "upload_time": "2020-02-10T09:03:49", "upload_time_iso_8601": "2020-02-10T09:03:49.972288Z", "url": "https://files.pythonhosted.org/packages/c1/f3/f54ba039b42e12a8c1b04573c36bd5b5e5458997bcc978c5e9bd10fe78de/saml2_mdq-0.2rc0.tar.gz", "yanked": false}], "0.4": [{"comment_text": "", "digests": {"md5": "e1ba57578a1cdb8ebc5e8e25884967e1", "sha256": "1cda858bd028597af33d6ddcba4bf33a952ce875d94e7e6273743462150e7b4f"}, "downloads": -1, "filename": "saml2_mdq-0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "e1ba57578a1cdb8ebc5e8e25884967e1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8716, "upload_time": "2020-02-10T11:54:21", "upload_time_iso_8601": "2020-02-10T11:54:21.271679Z", "url": "https://files.pythonhosted.org/packages/c9/14/767b534b772bab57017c408efdee425b2d3da14a3883d027e7dd65d4233a/saml2_mdq-0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "db9cd23c1c719fbee1ac181ec3208546", "sha256": "a3620cd8706f2e0ae556f5dbaf8c413853b1500f90bd50c77a8d4ccf255142a9"}, "downloads": -1, "filename": "saml2_mdq-0.4.tar.gz", "has_sig": false, "md5_digest": "db9cd23c1c719fbee1ac181ec3208546", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8225, "upload_time": "2020-02-10T11:54:22", "upload_time_iso_8601": "2020-02-10T11:54:22.930722Z", "url": "https://files.pythonhosted.org/packages/db/ad/9534162c468336c81aa839892b35c711bfbb99b0dbd3bfabdded7baf2af0/saml2_mdq-0.4.tar.gz", "yanked": false}], "0.6.0": [{"comment_text": "", "digests": {"md5": "bd5d3a2d282ad1be316fdb93666404a7", "sha256": "e033dc1e1ef681d809b2823e3fb82510623bc61b05557a387a847c41a2049b30"}, "downloads": -1, "filename": "saml2_mdq-0.6.0-py3-none-any.whl", "has_sig": false, "md5_digest": "bd5d3a2d282ad1be316fdb93666404a7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9033, "upload_time": "2020-02-11T12:23:19", "upload_time_iso_8601": "2020-02-11T12:23:19.517163Z", "url": "https://files.pythonhosted.org/packages/3d/83/1d20afc0274f2be64772fd713117462c793be31385346b06e6029cb30a84/saml2_mdq-0.6.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4dadd5348bf690e11ba3831230085655", "sha256": "d67988464e6c894d75de3f250de0dc2d0a57876bec8ad5171ddfdc42b12e22c0"}, "downloads": -1, "filename": "saml2_mdq-0.6.0.tar.gz", "has_sig": false, "md5_digest": "4dadd5348bf690e11ba3831230085655", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8614, "upload_time": "2020-02-11T12:23:21", "upload_time_iso_8601": "2020-02-11T12:23:21.163159Z", "url": "https://files.pythonhosted.org/packages/c0/ab/858f97f7f2c5beae6788d9ce8462846dca938726e7ac5868c04a16d7e906/saml2_mdq-0.6.0.tar.gz", "yanked": false}], "0.6.2": [{"comment_text": "", "digests": {"md5": "d70ba6ff0930378d0e79bdffc6e8b908", "sha256": "75050e05b43df61b6dce6f4f29049353caa5dde54c0e96768c324d57920e2bdd"}, "downloads": -1, "filename": "saml2_mdq-0.6.2-py3-none-any.whl", "has_sig": false, "md5_digest": "d70ba6ff0930378d0e79bdffc6e8b908", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8482, "upload_time": "2020-02-15T23:55:48", "upload_time_iso_8601": "2020-02-15T23:55:48.562228Z", "url": "https://files.pythonhosted.org/packages/0c/1c/96f8f0b44b92812e012245aacd184832173ddcdb8637397b14c358fe5cd1/saml2_mdq-0.6.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "29f282c237f5d79367cb8b8161b7bda2", "sha256": "0691a1a1b98eceac17715149dbbc76bdfa8aedd4d2601810797e3d9b401b8846"}, "downloads": -1, "filename": "saml2_mdq-0.6.2.tar.gz", "has_sig": false, "md5_digest": "29f282c237f5d79367cb8b8161b7bda2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7904, "upload_time": "2020-02-15T23:55:49", "upload_time_iso_8601": "2020-02-15T23:55:49.995881Z", "url": "https://files.pythonhosted.org/packages/5f/c2/6e5b49def633db45614e1c241adbec5aa9bdcf1432db9c396b56a77d8f3e/saml2_mdq-0.6.2.tar.gz", "yanked": false}], "0.6.5": [{"comment_text": "", "digests": {"md5": "ab582bb1bc250b2005ca3e932e861bdc", "sha256": "1d935200c9fa753a5f21329c32dab7f15ccf1fd9cf8e883e3b7f780cb8a88309"}, "downloads": -1, "filename": "saml2_mdq-0.6.5-py3-none-any.whl", "has_sig": false, "md5_digest": "ab582bb1bc250b2005ca3e932e861bdc", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8611, "upload_time": "2020-03-09T11:54:36", "upload_time_iso_8601": "2020-03-09T11:54:36.293820Z", "url": "https://files.pythonhosted.org/packages/5d/20/ab4d50a2836ddfe99036e57b8eaeae7643501e8510b6d61b5ca3b5c61c86/saml2_mdq-0.6.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b13967ad331ccb68bf34f311cbcbbb70", "sha256": "0b36e273002c9bd8bc7070f7de7e3b4aa5c0fee773dfa62cfda70b32fbf74aed"}, "downloads": -1, "filename": "saml2_mdq-0.6.5.tar.gz", "has_sig": false, "md5_digest": "b13967ad331ccb68bf34f311cbcbbb70", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8005, "upload_time": "2020-03-09T11:54:38", "upload_time_iso_8601": "2020-03-09T11:54:38.800984Z", "url": "https://files.pythonhosted.org/packages/df/34/f53f0d4f8064b1dbf4f69c1866bf97c585a3d518e017f3470481f3899737/saml2_mdq-0.6.5.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ab582bb1bc250b2005ca3e932e861bdc", "sha256": "1d935200c9fa753a5f21329c32dab7f15ccf1fd9cf8e883e3b7f780cb8a88309"}, "downloads": -1, "filename": "saml2_mdq-0.6.5-py3-none-any.whl", "has_sig": false, "md5_digest": "ab582bb1bc250b2005ca3e932e861bdc", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8611, "upload_time": "2020-03-09T11:54:36", "upload_time_iso_8601": "2020-03-09T11:54:36.293820Z", "url": "https://files.pythonhosted.org/packages/5d/20/ab4d50a2836ddfe99036e57b8eaeae7643501e8510b6d61b5ca3b5c61c86/saml2_mdq-0.6.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b13967ad331ccb68bf34f311cbcbbb70", "sha256": "0b36e273002c9bd8bc7070f7de7e3b4aa5c0fee773dfa62cfda70b32fbf74aed"}, "downloads": -1, "filename": "saml2_mdq-0.6.5.tar.gz", "has_sig": false, "md5_digest": "b13967ad331ccb68bf34f311cbcbbb70", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8005, "upload_time": "2020-03-09T11:54:38", "upload_time_iso_8601": "2020-03-09T11:54:38.800984Z", "url": "https://files.pythonhosted.org/packages/df/34/f53f0d4f8064b1dbf4f69c1866bf97c585a3d518e017f3470481f3899737/saml2_mdq-0.6.5.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:58:57 2020"}