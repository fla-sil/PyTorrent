{"info": {"author": "Kristian Ollegaard", "author_email": "kristian@oellegaard.com", "bugtrack_url": null, "classifiers": [], "description": "===================\ndjango-health-check\n===================\n\n|version| |ci| |coverage| |health| |license|\n\nThis project checks for various conditions and provides reports when anomalous\nbehavior is detected.\n\nThe following health checks are bundled with this project:\n\n- cache\n- database\n- storage\n- disk and memory utilization (via ``psutil``)\n- AWS S3 storage\n- Celery task queue\n\nWriting your own custom health checks is also very quick and easy.\n\nWe also like contributions, so don't be afraid to make a pull request.\n\nUse Cases\n---------\n\nThe primary intended use case is to monitor conditions via HTTP(S), with\nresponses available in HTML and JSON formats. When you get back a response that\nincludes one or more problems, you can then decide the appropriate course of\naction, which could include generating notifications and/or automating the\nreplacement of a failing node with a new one. If you are monitoring health in a\nhigh-availability environment with a load balancer that returns responses from\nmultiple nodes, please note that certain checks (e.g., disk and memory usage)\nwill return responses specific to the node selected by the load balancer.\n\nSupported Versions\n------------------\n\nWe officially only support the latest version of Python as well as the\nlatest version of Django and the latest Django LTS version.\n\n.. note:: The latest version to support Python 2 is 2.4.0\n\nInstallation\n------------\n\nFirst install the ``django-health-check`` package:\n\n.. code::\n\n    pip install django-health-check\n\nAdd the health checker to a URL you want to use:\n\n.. code:: python\n\n    urlpatterns = [\n        # ...\n        url(r'^ht/', include('health_check.urls')),\n    ]\n\nAdd the ``health_check`` applications to your ``INSTALLED_APPS``:\n\n.. code:: python\n\n    INSTALLED_APPS = [\n        # ...\n        'health_check',                             # required\n        'health_check.db',                          # stock Django health checkers\n        'health_check.cache',\n        'health_check.storage',\n        'health_check.contrib.celery',              # requires celery\n        'health_check.contrib.psutil',              # disk and memory utilization; requires psutil\n        'health_check.contrib.s3boto_storage',      # requires boto and S3BotoStorage backend\n    ]\n\n(Optional) If using the ``psutil`` app, you can configure disk and memory\nthreshold settings; otherwise below defaults are assumed. If you want to disable\none of these checks, set its value to ``None``.\n\n.. code:: python\n\n    HEALTH_CHECK = {\n        'DISK_USAGE_MAX': 90,  # percent\n        'MEMORY_MIN' = 100,    # in MB\n    }\n\nIf using the DB check, run migrations:\n\n.. code::\n\n    django-admin migrate\n\nSetting up monitoring\n---------------------\n\nYou can use tools like Pingdom_ or other uptime robots to monitor service status.\nThe ``/ht/`` endpoint will respond a HTTP 200 if all checks passed\nand a HTTP 500 if any of the tests failed.\n\n.. code::\n\n    $ curl -v -X GET -H http://www.example.com/ht/\n\n    > GET /ht/ HTTP/1.1\n    > Host: www.example.com\n    > Accept: */*\n    >\n    < HTTP/1.1 200 OK\n    < Content-Type: text/html; charset=utf-8\n\n    <!-- This is an excerpt -->\n    <div class=\"container\">\n        <h1>System status</h1>\n        <table>\n            <tr>\n                <td class=\"status_1\"></td>\n                <td>CacheBackend</td>\n                <td>working</td>\n            </tr>\n            <tr>\n                <td class=\"status_1\"></td>\n                <td>DatabaseBackend</td>\n                <td>working</td>\n            </tr>\n            <tr>\n                <td class=\"status_1\"></td>\n                <td>S3BotoStorageHealthCheck</td>\n                <td>working</td>\n            </tr>\n        </table>\n    </div>\n\nGetting machine readable JSON reports\n-------------------------------------\n\nIf you want machine readable status reports you can request the ``/ht/``\nendpoint with the ``Accept`` HTTP header set to ``application/json``.\n\nThe backend will return a JSON response:\n\n.. code::\n\n    $ curl -v -X GET -H \"Accept: application/json\" http://www.example.com/ht/\n\n    > GET /ht/ HTTP/1.1\n    > Host: www.example.com\n    > Accept: application/json\n    >\n    < HTTP/1.1 200 OK\n    < Content-Type: application/json\n\n    {\n        \"CacheBackend\": \"working\",\n        \"DatabaseBackend\": \"working\",\n        \"S3BotoStorageHealthCheck\": \"working\"\n    }\n\nWriting a custom health check\n-----------------------------\n\nWriting a health check is quick and easy:\n\n.. code:: python\n\n    from health_check.backends import BaseHealthCheckBackend\n\n    class MyHealthCheckBackend(BaseHealthCheckBackend):\n        def check_status(self):\n            # The test code goes here.\n            # You can use `self.add_error` or\n            # raise a `HealthCheckException`,\n            # similar to Django's form validation.\n            pass\n\n        def identifier(self):\n            return self.__class__.__name__  # Display name on the endpoint.\n\nAfter writing a custom checker, register it in your app configuration:\n\n.. code:: python\n\n    from django.apps import AppConfig\n\n    from health_check.plugins import plugin_dir\n\n    class MyAppConfig(AppConfig):\n        name = 'my_app'\n\n        def ready(self):\n            from .backends import MyHealthCheckBackend\n            plugin_dir.register(MyHealthCheckBackend)\n\nMake sure the application you write the checker into is registered in your ``INSTALLED_APPS``.\n\nCustomizing output\n------------------\n\nYou can customize HTML or JSON rendering by inheriting from ``MainView`` in ``health_check.views``\nand customizing the ``template_name``, ``get``, ``render_to_response`` and ``render_to_response_json`` properties:\n\n.. code:: python\n\n    # views.py\n    from health_check.views import MainView\n\n    class HealthCheckCustomView(MainView):\n        template_name = 'myapp/health_check_dashboard.html'  # customize the used templates\n\n        def get(self, request, *args, **kwargs):\n            plugins = []\n            # ...\n            if 'application/json' in request.META.get('HTTP_ACCEPT', ''):\n                return self.render_to_response_json(plugins, status)\n            return self.render_to_response(plugins, status)\n\n        def render_to_response(self, plugins, status):       # customize HTML output\n            return HttpResponse('COOL' if status == 200 else 'SWEATY', status=status)\n\n        def render_to_response_json(self, plugins, status):  # customize JSON output\n            return JsonResponse(\n                {str(p.identifier()): 'COOL' if status == 200 else 'SWEATY' for p in plugins}\n                status=status\n            )\n\n    # urls.py\n    import views\n\n    urlpatterns = [\n        # ...\n        url(r'^ht/$', views.HealthCheckCustomView.as_view(), name='health_check_custom'),\n    ]\n\nOther resources\n---------------\n\n- django-watchman_ is a package that does some of the same things in a slightly different way.\n- See this weblog_ about configuring Django and health checking with AWS Elastic Load Balancer.\n\n.. |version| image:: https://img.shields.io/pypi/v/django-health-check.svg\n   :target: https://pypi.python.org/pypi/django-health-check/\n.. |ci| image:: https://api.travis-ci.org/KristianOellegaard/django-health-check.svg?branch=master\n   :target: https://travis-ci.org/KristianOellegaard/django-health-check\n.. |coverage| image:: https://codecov.io/gh/KristianOellegaard/django-health-check/branch/master/graph/badge.svg\n   :target: https://codecov.io/gh/KristianOellegaard/django-health-check\n.. |health| image:: https://landscape.io/github/KristianOellegaard/django-health-check/master/landscape.svg?style=flat\n   :target: https://landscape.io/github/KristianOellegaard/django-health-check/master\n.. |license| image:: https://img.shields.io/badge/license-BSD-blue.svg\n   :target: LICENSE\n\n.. _Pingdom: https://www.pingdom.com/\n.. _django-watchman: https://github.com/mwarkentin/django-watchman\n.. _weblog: https://www.vincit.fi/en/blog/deploying-django-to-elastic-beanstalk-with-https-redirects-and-functional-health-checks/\n\n\n\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/KristianOellegaard/django-health-check", "keywords": "django", "license": "BSD License", "maintainer": "", "maintainer_email": "", "name": "django-health-checkers", "package_url": "https://pypi.org/project/django-health-checkers/", "platform": "", "project_url": "https://pypi.org/project/django-health-checkers/", "project_urls": {"Homepage": "https://github.com/KristianOellegaard/django-health-check"}, "release_url": "https://pypi.org/project/django-health-checkers/3.5.0/", "requires_dist": null, "requires_python": "", "summary": "Run checks on services like databases, queue servers, celery processes, etc.", "version": "3.5.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://pypi.python.org/pypi/django-health-check/\" rel=\"nofollow\"><img alt=\"version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/18620d727bd81e036607b82e86ee645ed387d5e2/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f646a616e676f2d6865616c74682d636865636b2e737667\"></a> <a href=\"https://travis-ci.org/KristianOellegaard/django-health-check\" rel=\"nofollow\"><img alt=\"ci\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c7eb220944add412b2a0d58953a7ad7320c76af1/68747470733a2f2f6170692e7472617669732d63692e6f72672f4b7269737469616e4f656c6c6567616172642f646a616e676f2d6865616c74682d636865636b2e7376673f6272616e63683d6d6173746572\"></a> <a href=\"https://codecov.io/gh/KristianOellegaard/django-health-check\" rel=\"nofollow\"><img alt=\"coverage\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/bb8fb2449bf96a7e63abacfbf75a6a6f976fc809/68747470733a2f2f636f6465636f762e696f2f67682f4b7269737469616e4f656c6c6567616172642f646a616e676f2d6865616c74682d636865636b2f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a> <a href=\"https://landscape.io/github/KristianOellegaard/django-health-check/master\" rel=\"nofollow\"><img alt=\"health\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0199a04dae87683c1264807788860220ae0c7870/68747470733a2f2f6c616e6473636170652e696f2f6769746875622f4b7269737469616e4f656c6c6567616172642f646a616e676f2d6865616c74682d636865636b2f6d61737465722f6c616e6473636170652e7376673f7374796c653d666c6174\"></a> <a href=\"LICENSE\" rel=\"nofollow\"><img alt=\"license\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b9171fec0f2756a39e1306c6dc870bf846e0b4f1/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4253442d626c75652e737667\"></a></p>\n<p>This project checks for various conditions and provides reports when anomalous\nbehavior is detected.</p>\n<p>The following health checks are bundled with this project:</p>\n<ul>\n<li>cache</li>\n<li>database</li>\n<li>storage</li>\n<li>disk and memory utilization (via <tt>psutil</tt>)</li>\n<li>AWS S3 storage</li>\n<li>Celery task queue</li>\n</ul>\n<p>Writing your own custom health checks is also very quick and easy.</p>\n<p>We also like contributions, so don\u2019t be afraid to make a pull request.</p>\n<div id=\"use-cases\">\n<h2>Use Cases</h2>\n<p>The primary intended use case is to monitor conditions via HTTP(S), with\nresponses available in HTML and JSON formats. When you get back a response that\nincludes one or more problems, you can then decide the appropriate course of\naction, which could include generating notifications and/or automating the\nreplacement of a failing node with a new one. If you are monitoring health in a\nhigh-availability environment with a load balancer that returns responses from\nmultiple nodes, please note that certain checks (e.g., disk and memory usage)\nwill return responses specific to the node selected by the load balancer.</p>\n</div>\n<div id=\"supported-versions\">\n<h2>Supported Versions</h2>\n<p>We officially only support the latest version of Python as well as the\nlatest version of Django and the latest Django LTS version.</p>\n<div>\n<p>Note</p>\n<p>The latest version to support Python 2 is 2.4.0</p>\n</div>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>First install the <tt><span class=\"pre\">django-health-check</span></tt> package:</p>\n<pre>pip install django-health-check\n</pre>\n<p>Add the health checker to a URL you want to use:</p>\n<pre><span class=\"n\">urlpatterns</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"c1\"># ...</span>\n    <span class=\"n\">url</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s1\">'^ht/'</span><span class=\"p\">,</span> <span class=\"n\">include</span><span class=\"p\">(</span><span class=\"s1\">'health_check.urls'</span><span class=\"p\">)),</span>\n<span class=\"p\">]</span>\n</pre>\n<p>Add the <tt>health_check</tt> applications to your <tt>INSTALLED_APPS</tt>:</p>\n<pre><span class=\"n\">INSTALLED_APPS</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"c1\"># ...</span>\n    <span class=\"s1\">'health_check'</span><span class=\"p\">,</span>                             <span class=\"c1\"># required</span>\n    <span class=\"s1\">'health_check.db'</span><span class=\"p\">,</span>                          <span class=\"c1\"># stock Django health checkers</span>\n    <span class=\"s1\">'health_check.cache'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'health_check.storage'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'health_check.contrib.celery'</span><span class=\"p\">,</span>              <span class=\"c1\"># requires celery</span>\n    <span class=\"s1\">'health_check.contrib.psutil'</span><span class=\"p\">,</span>              <span class=\"c1\"># disk and memory utilization; requires psutil</span>\n    <span class=\"s1\">'health_check.contrib.s3boto_storage'</span><span class=\"p\">,</span>      <span class=\"c1\"># requires boto and S3BotoStorage backend</span>\n<span class=\"p\">]</span>\n</pre>\n<p>(Optional) If using the <tt>psutil</tt> app, you can configure disk and memory\nthreshold settings; otherwise below defaults are assumed. If you want to disable\none of these checks, set its value to <tt>None</tt>.</p>\n<pre><span class=\"n\">HEALTH_CHECK</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'DISK_USAGE_MAX'</span><span class=\"p\">:</span> <span class=\"mi\">90</span><span class=\"p\">,</span>  <span class=\"c1\"># percent</span>\n    <span class=\"s1\">'MEMORY_MIN'</span> <span class=\"o\">=</span> <span class=\"mi\">100</span><span class=\"p\">,</span>    <span class=\"c1\"># in MB</span>\n<span class=\"p\">}</span>\n</pre>\n<p>If using the DB check, run migrations:</p>\n<pre>django-admin migrate\n</pre>\n</div>\n<div id=\"setting-up-monitoring\">\n<h2>Setting up monitoring</h2>\n<p>You can use tools like <a href=\"https://www.pingdom.com/\" rel=\"nofollow\">Pingdom</a> or other uptime robots to monitor service status.\nThe <tt>/ht/</tt> endpoint will respond a HTTP 200 if all checks passed\nand a HTTP 500 if any of the tests failed.</p>\n<pre>$ curl -v -X GET -H http://www.example.com/ht/\n\n&gt; GET /ht/ HTTP/1.1\n&gt; Host: www.example.com\n&gt; Accept: */*\n&gt;\n&lt; HTTP/1.1 200 OK\n&lt; Content-Type: text/html; charset=utf-8\n\n&lt;!-- This is an excerpt --&gt;\n&lt;div class=\"container\"&gt;\n    &lt;h1&gt;System status&lt;/h1&gt;\n    &lt;table&gt;\n        &lt;tr&gt;\n            &lt;td class=\"status_1\"&gt;&lt;/td&gt;\n            &lt;td&gt;CacheBackend&lt;/td&gt;\n            &lt;td&gt;working&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n            &lt;td class=\"status_1\"&gt;&lt;/td&gt;\n            &lt;td&gt;DatabaseBackend&lt;/td&gt;\n            &lt;td&gt;working&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n            &lt;td class=\"status_1\"&gt;&lt;/td&gt;\n            &lt;td&gt;S3BotoStorageHealthCheck&lt;/td&gt;\n            &lt;td&gt;working&lt;/td&gt;\n        &lt;/tr&gt;\n    &lt;/table&gt;\n&lt;/div&gt;\n</pre>\n</div>\n<div id=\"getting-machine-readable-json-reports\">\n<h2>Getting machine readable JSON reports</h2>\n<p>If you want machine readable status reports you can request the <tt>/ht/</tt>\nendpoint with the <tt>Accept</tt> HTTP header set to <tt>application/json</tt>.</p>\n<p>The backend will return a JSON response:</p>\n<pre>$ curl -v -X GET -H \"Accept: application/json\" http://www.example.com/ht/\n\n&gt; GET /ht/ HTTP/1.1\n&gt; Host: www.example.com\n&gt; Accept: application/json\n&gt;\n&lt; HTTP/1.1 200 OK\n&lt; Content-Type: application/json\n\n{\n    \"CacheBackend\": \"working\",\n    \"DatabaseBackend\": \"working\",\n    \"S3BotoStorageHealthCheck\": \"working\"\n}\n</pre>\n</div>\n<div id=\"writing-a-custom-health-check\">\n<h2>Writing a custom health check</h2>\n<p>Writing a health check is quick and easy:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">health_check.backends</span> <span class=\"kn\">import</span> <span class=\"n\">BaseHealthCheckBackend</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MyHealthCheckBackend</span><span class=\"p\">(</span><span class=\"n\">BaseHealthCheckBackend</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">check_status</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"c1\"># The test code goes here.</span>\n        <span class=\"c1\"># You can use `self.add_error` or</span>\n        <span class=\"c1\"># raise a `HealthCheckException`,</span>\n        <span class=\"c1\"># similar to Django's form validation.</span>\n        <span class=\"k\">pass</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">identifier</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"vm\">__class__</span><span class=\"o\">.</span><span class=\"vm\">__name__</span>  <span class=\"c1\"># Display name on the endpoint.</span>\n</pre>\n<p>After writing a custom checker, register it in your app configuration:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">django.apps</span> <span class=\"kn\">import</span> <span class=\"n\">AppConfig</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">health_check.plugins</span> <span class=\"kn\">import</span> <span class=\"n\">plugin_dir</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MyAppConfig</span><span class=\"p\">(</span><span class=\"n\">AppConfig</span><span class=\"p\">):</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s1\">'my_app'</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">ready</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"kn\">from</span> <span class=\"nn\">.backends</span> <span class=\"kn\">import</span> <span class=\"n\">MyHealthCheckBackend</span>\n        <span class=\"n\">plugin_dir</span><span class=\"o\">.</span><span class=\"n\">register</span><span class=\"p\">(</span><span class=\"n\">MyHealthCheckBackend</span><span class=\"p\">)</span>\n</pre>\n<p>Make sure the application you write the checker into is registered in your <tt>INSTALLED_APPS</tt>.</p>\n</div>\n<div id=\"customizing-output\">\n<h2>Customizing output</h2>\n<p>You can customize HTML or JSON rendering by inheriting from <tt>MainView</tt> in <tt>health_check.views</tt>\nand customizing the <tt>template_name</tt>, <tt>get</tt>, <tt>render_to_response</tt> and <tt>render_to_response_json</tt> properties:</p>\n<pre><span class=\"c1\"># views.py</span>\n<span class=\"kn\">from</span> <span class=\"nn\">health_check.views</span> <span class=\"kn\">import</span> <span class=\"n\">MainView</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">HealthCheckCustomView</span><span class=\"p\">(</span><span class=\"n\">MainView</span><span class=\"p\">):</span>\n    <span class=\"n\">template_name</span> <span class=\"o\">=</span> <span class=\"s1\">'myapp/health_check_dashboard.html'</span>  <span class=\"c1\"># customize the used templates</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"n\">plugins</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"c1\"># ...</span>\n        <span class=\"k\">if</span> <span class=\"s1\">'application/json'</span> <span class=\"ow\">in</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">META</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'HTTP_ACCEPT'</span><span class=\"p\">,</span> <span class=\"s1\">''</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">render_to_response_json</span><span class=\"p\">(</span><span class=\"n\">plugins</span><span class=\"p\">,</span> <span class=\"n\">status</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">render_to_response</span><span class=\"p\">(</span><span class=\"n\">plugins</span><span class=\"p\">,</span> <span class=\"n\">status</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">render_to_response</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">plugins</span><span class=\"p\">,</span> <span class=\"n\">status</span><span class=\"p\">):</span>       <span class=\"c1\"># customize HTML output</span>\n        <span class=\"k\">return</span> <span class=\"n\">HttpResponse</span><span class=\"p\">(</span><span class=\"s1\">'COOL'</span> <span class=\"k\">if</span> <span class=\"n\">status</span> <span class=\"o\">==</span> <span class=\"mi\">200</span> <span class=\"k\">else</span> <span class=\"s1\">'SWEATY'</span><span class=\"p\">,</span> <span class=\"n\">status</span><span class=\"o\">=</span><span class=\"n\">status</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">render_to_response_json</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">plugins</span><span class=\"p\">,</span> <span class=\"n\">status</span><span class=\"p\">):</span>  <span class=\"c1\"># customize JSON output</span>\n        <span class=\"k\">return</span> <span class=\"n\">JsonResponse</span><span class=\"p\">(</span>\n            <span class=\"p\">{</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">identifier</span><span class=\"p\">()):</span> <span class=\"s1\">'COOL'</span> <span class=\"k\">if</span> <span class=\"n\">status</span> <span class=\"o\">==</span> <span class=\"mi\">200</span> <span class=\"k\">else</span> <span class=\"s1\">'SWEATY'</span> <span class=\"k\">for</span> <span class=\"n\">p</span> <span class=\"ow\">in</span> <span class=\"n\">plugins</span><span class=\"p\">}</span>\n            <span class=\"n\">status</span><span class=\"o\">=</span><span class=\"n\">status</span>\n        <span class=\"p\">)</span>\n\n<span class=\"c1\"># urls.py</span>\n<span class=\"kn\">import</span> <span class=\"nn\">views</span>\n\n<span class=\"n\">urlpatterns</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"c1\"># ...</span>\n    <span class=\"n\">url</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s1\">'^ht/$'</span><span class=\"p\">,</span> <span class=\"n\">views</span><span class=\"o\">.</span><span class=\"n\">HealthCheckCustomView</span><span class=\"o\">.</span><span class=\"n\">as_view</span><span class=\"p\">(),</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'health_check_custom'</span><span class=\"p\">),</span>\n<span class=\"p\">]</span>\n</pre>\n</div>\n<div id=\"other-resources\">\n<h2>Other resources</h2>\n<ul>\n<li><a href=\"https://github.com/mwarkentin/django-watchman\" rel=\"nofollow\">django-watchman</a> is a package that does some of the same things in a slightly different way.</li>\n<li>See this <a href=\"https://www.vincit.fi/en/blog/deploying-django-to-elastic-beanstalk-with-https-redirects-and-functional-health-checks/\" rel=\"nofollow\">weblog</a> about configuring Django and health checking with AWS Elastic Load Balancer.</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 3581726, "releases": {"3.5.0": [{"comment_text": "", "digests": {"md5": "7c76b4e83b77c4e89c6a35f708b2fac2", "sha256": "279f5367a7a4cff5e74e375db995fadb1204c86923f21db73fcc77417013ac7f"}, "downloads": -1, "filename": "django_health_checkers-3.5.0-py3-none-any.whl", "has_sig": false, "md5_digest": "7c76b4e83b77c4e89c6a35f708b2fac2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 21943, "upload_time": "2018-02-14T15:47:03", "upload_time_iso_8601": "2018-02-14T15:47:03.523147Z", "url": "https://files.pythonhosted.org/packages/55/f9/5e8e3a21582d22e4c763f2409452a831437336d0b1ceecbc771e1f86ffd8/django_health_checkers-3.5.0-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "7c76b4e83b77c4e89c6a35f708b2fac2", "sha256": "279f5367a7a4cff5e74e375db995fadb1204c86923f21db73fcc77417013ac7f"}, "downloads": -1, "filename": "django_health_checkers-3.5.0-py3-none-any.whl", "has_sig": false, "md5_digest": "7c76b4e83b77c4e89c6a35f708b2fac2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 21943, "upload_time": "2018-02-14T15:47:03", "upload_time_iso_8601": "2018-02-14T15:47:03.523147Z", "url": "https://files.pythonhosted.org/packages/55/f9/5e8e3a21582d22e4c763f2409452a831437336d0b1ceecbc771e1f86ffd8/django_health_checkers-3.5.0-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 00:35:44 2020"}