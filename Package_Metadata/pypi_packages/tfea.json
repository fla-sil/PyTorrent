{"info": {"author": "Jonathan Rubin", "author_email": "jonathan.rubin@colorado.edu", "bugtrack_url": null, "classifiers": [], "description": "<H1>Transcription Factor Enrichment Analysis (TFEA)</H1>\n<H2 id=\"TableOfContents\">Table of Contents</H2>\n\n1. <A href=\"#Pipeline\">Pipeline</A>\n2. <A href=\"#InstallationandRequirements\">Installation and Requirements</A>\n   - <A href=\"#TFEA\">TFEA</A>\n   - <A href=\"#DESeq\">DESeq</A>\n   - <A href=\"#Bedtools\">Bedtools</A>\n   - <A href=\"#Samtools\">Samtools</A>\n   - <A href=\"#MEMESuite\">MEME Suite</A>\n     - <A href=\"#ImageMagick\">Image Magick</A>\n   - <A href=\"#FIJIModules\">FIJI Modules</A>\n4. <A href=\"#BasicUsage\">Basic Usage</A>\n   - <A href=\"#TestingTFEA\">Testing TFEA</A>\n   - <A href=\"#RunningTFEA\">Running TFEA</A>\n5. <A href=\"#AdvancedUsage\">Advanced Usage</A>\n   - <A href=\"#ConfigurationFile\">Configuration File</A>\n   - <A href=\"#BatchCorrection\">Batch Correction</A>\n   - <A href=\"#UsingSBATCH\">Using SBATCH</A>\n   - <A href=\"#PreProcessedInputs\">Pre-Processed Inputs</A>\n   - <A href=\"#SecondaryAnalysis\">Secondary Analysis (MD, MDD)</A>\n   - <A href=\"#FPKM\">Measuring TF FPKM</A>\n   - <A href=\"#SimulatedData\">Generating Simulated Data</A>\n   - <A href=\"RerunningTFEA\">Rerunning TFEA</A>\n   - <A href=\"#HelpMessage\">Help Message</A>\n6. <A href=\"#ExampleOutput\">Example Output</A>\n7. <A href=\"#ContactInformation\">Contact Information</A>\n\n<br></br>\n\n<H2 id=\"Pipeline\">TFEA Pipeline</H2>\n\n![TFEA Pipeline](https://github.com/jdrubin91/TFEA/blob/master/README_images/TFEAPipelinev5.png)\n\n<br></br>\n\n<H2 id=\"InstallationandRequirements\">Installation and Requirements</H2>\n\n   <H3 id=\"TFEA\">TFEA</H3>\n\nTo install, this package and all python3 dependencies:\n\n```\npython3 -m pip install tfea\n```\n\nThis should take no longer than several minutes.\n\nOnce successfully installed, you should be able to run the tfea command from anywhere, try:\n\n```\nTFEA --help\n```\n\n<b>*Note:*</B> If you plan to run TFEA only on FIJI using the --sbatch flag, then you only need to install DESeq and DESeq2. Otherwise, follow the instructions below for installing all TFEA dependencies.\n\n  <H3 id=\"DESeq\">DESeq</H3>\n  TFEA uses DESeq or DESeq2 (depending on replicate number) to rank inputted bed files based on fold change significance. If on FIJI, make sure all gcc modules are unloaded before installing DESeq or DESeq2. This can be accomplished with:\n\n  ```\n  module unload gcc\n  ```\n\n  or\n\n  ```\n  module purge\n  ```\n\n  To install DESeq and DESeq2 type in your terminal:\n\n  ```\n  R\n\n  > if (!requireNamespace(\"BiocManager\", quietly = TRUE))\n  >   install.packages(\"BiocManager\")\n\n  > BiocManager::install(\"DESeq\")\n  > BiocManager::install(\"DESeq2\")\n  ```\n\n  <H3 id=\"Bedtools\">Bedtools</H3>\n  TFEA uses Bedtools to do several genomic computations. Instructions for installing bedtools can be found here:\n\n  <a href=\"http://bedtools.readthedocs.io/en/latest/content/installation.html\">Bedtools Installation</a>\n\n  If you are on FIJI compute cluster, bedtools is available as a module:\n\n  ```\n  module load bedtools/2.25.0\n  ```\n\n  <H3 id=\"Samtools\">Samtools</H3>\n  TFEA uses samtools to index bam files. Samtools download and install instructions can be found here:\n  <a href=\"http://www.htslib.org/download/\">Samtools Download and Install</a>\n\n  If you are on FIJI compute cluster, bedtools is available as a module:\n\n  ```\n  module load samtools/1.8\n  ```\n\n  <H3 id=\"MEMESuite\">MEME Suite</H3>\n  TFEA uses the MEME suite to scan sequences from inputted bed files for motif hits using the background atcg distribution form inputted bed file regions. TFEA also uses the MEME suite to generate motif logos for html display. Instructions for downloading and installing the MEME suite can be found here:\n\n  <a href=\"http://meme-suite.org/doc/install.html?man_type=web\">MEME Download and Installation</a>\n\n  If you are on FIJI compute cluster, the meme suite is available as a module:\n\n  ```\n  module load meme/5.0.3\n  ```\n\n  <H4 id=\"ImageMagick\">Image Magick</H3>\n  TFEA uses the meme2images script within MEME to produce motif logo figures. This requires Image Magick, which is a common linux utility package sometimes pre-installed on machines. To check if you have Image Magick installed try:\n\n  ```\n  identify -version\n  ```\n\n  If you do not have Image Magick installed, follow these instructions:\n\n  <a href=\"https://imagemagick.org/script/install-source.php\">Image Magick Download and Installation</a>\n\n  <H3 id=\"FIJIModules\">FIJI Modules</H3>\n  Below is a summary of all FIJI modules needed to run TFEA.\n\n  ```\n  module load python/3.6.3\n  module load python/3.6.3/matplotlib/1.5.1\n  module load python/3.6.3/scipy/0.17.1\n  module load python/3.6.3/numpy/1.14.1\n  module load python/3.6.3/htseq/0.9.1\n  module load python/3.6.3/pybedtools/0.7.10\n\n  module load samtools/1.8\n  module load bedtools/2.25.0\n  module load meme/5.0.3\n  ```\n\n<br></br>\n<H2 id=\"BasicUsage\">BasicUsage</H2>\n<H3 id=\"TestingTFEA\">Testing TFEA</H3>\nTo make sure TFEA is installed properly, run the following tests:\n\n<b>*Note:*</b> If you chose to skip installations because you were going to run TFEA using the --sbatch flag, make sure you load the appropriate modules on FIJI or these tests will fail.\n\n```\nTFEA --test-install\nTFEA --test-full\n```\n\nThese should each take no longer than several minutes to run\n\nIf on a compute cluster with slurm the --sbatch flag is compatible with --test-full and is recommended on FIJI. Execute like so:\n\n```\nTFEA --test-full --sbatch your_email@address.com\n```\n\n<H3 id=\"RunningTFEA\">Running TFEA</H3>\nOnce you've run the above tests successfully, you should be ready to run the full version of TFEA. Below are the minimum required inputs to run the full TFEA pipeline. Test files are provided in './TFEA/test/test_files' within this repository.\n\n```\nTFEA --output ./TFEA/test/test_files/test_output \\\n--bed1 ./TFEA/test/test_files/SRR1105736.tfit_bidirs.chr22.bed ./TFEA/test/test_files/SRR1105737.tfit_bidirs.chr22.bed \\\n--bed2 ./TFEA/test/test_files/SRR1105738.tfit_bidirs.chr22.bed ./TFEA/test/test_files/SRR1105739.tfit_bidirs.chr22.bed \\\n--bam1 ./TFEA/test/test_files/SRR1105736.sorted.chr22.subsample.bam ./TFEA/test/test_files/SRR1105737.sorted.chr22.subsample.bam \\\n--bam2 ./TFEA/test/test_files/SRR1105738.sorted.chr22.subsample.bam ./TFEA/test/test_files/SRR1105739.sorted.chr22.subsample.bam \\\n--label1 DMSO --label2 Nutlin \\\n--genomefasta ./TFEA/test/test_files/chr22.fa \\\n--fimo_motifs ./TFEA/test/test_files/test_database.meme\n```\n\n<H2 id=\"AdvancedUsage\">Advanced Usage</H2> \n<H3 id=\"ConfigurationFile\">Configuration File</H3>\nTFEA can be run exclusively through the command line using flags. Alternatively, TFEA can be run using a configuration file (.ini) that takes in flags as variables. For example:\n\n```\nTFEA --config ./TFEA/test/test_files/test_config.ini\n```\n\nThis can be helpful to keep track of different TFEA runs and because you can use variables within the config file to clean up your input. For documentation on config files and what you can do with them see <a href=\"https://docs.python.org/3.6/library/configparser.html#supported-ini-file-structure\">Supported INI File Structure</a> and <a href=\"https://docs.python.org/3.6/library/configparser.html#interpolation-of-values\">Interpolation of values (ExtendedInterpolation)</a>\n\n<b>*Notes:*</b>\n\n1. Section headers (ex: `[OUTPUT]`) don't matter but you need to have at least ONE section header to be a viable .ini file.\n2. Capitalization of variables doesn't matter.\n3. Feel free to specify any additional variables you like (variables are bash-like), TFEA will only parse variables that match a flag input.\n4. If an input is provided both as a flag and in a configuration file, TFEA prioritizes the command line flag input.\n\nBelow is an example of a configuration file (./test_files/test_config.ini):\n\n  ```bash\n[OUTPUT]\nOUTPUT='./TFEA/test/test_files/test_output/'\nLABEL1='Condition 1'\nLABEL2='Condition 2'\n\n[DATA]\nTEST_FILES='./TFEA/test/test_files/'\nBED1=[${TEST_FILES}+'SRR1105736.tfit_bidirs.chr22.bed',${TEST_FILES}+'SRR1105737.tfit_bidirs.chr22.bed']\nBED2=[${TEST_FILES}+'SRR1105738.tfit_bidirs.chr22.bed',${TEST_FILES}+'SRR1105739.tfit_bidirs.chr22.bed']\nBAM1=[${TEST_FILES}+'SRR1105736.sorted.chr22.subsample.bam', ${TEST_FILES}+'SRR1105737.sorted.chr22.subsample.bam']\nBAM2=[${TEST_FILES}+'SRR1105738.sorted.chr22.subsample.bam', ${TEST_FILES}+'SRR1105739.sorted.chr22.subsample.bam']\n\n[MODULES]\nTEST_FILES='./TFEA/test/test_files/' #You need to re-initialize variables within each [MODULE]\nFIMO_MOTIFS=${TEST_FILES}+'test_database.meme'\nGENOMEFASTA=${TEST_FILES}+'chr22.fa'\n\n[OPTIONS]\nOUTPUT_TYPE='html'\nPLOTALL=True\n```\n\n<H3 id=\"BatchCorrection\">Batch Correction</H3>\n\nThe presence of batch effects is common in sequencing data. TFEA can account for batch effects when performing ROI ranking using DE-Seq using built in functions. To correct for batch effects, specify a comma-separated list of batch labels to apply to your bam files in order of bam1 then bam2. For example:\n\n```\n--bam1 condition1_batch1 condition1_batch2 condition1_batch3\n--bam2 condition2_batch1 condition2_batch2 condition2_batch3\n--batch 1,2,3,1,2,3\n```\n\n<H3 id=\"UsingSBATCH\">Using SBATCH</H3>\n\nSpecifying the `--sbatch` flag will submit TFEA to a compute cluster assuming you are logged into one. If the `--sbatch` flag is specified, it MUST be followed by an e-mail address to send job information to. For example:\n\n\n```\nTFEA --config ./TFEA/test/test_files/test_config.ini --sbatch your_email@address.com\n```\n\nAdditionally, the following flags can be used to change some of the job parameters and specify a python virtual environment:\n\n```\n  --cpus CPUS           Number of processes to run in parallel. Warning:\n                        Increasing this value will significantly increase\n                        memory footprint. Default: 1\n  --mem MEM             Amount of memory to request forsbatch script. Default:\n                        50gb\n  --venv VENV           Full path to virtual environment.\n```\n\n<b>*Note:*</b> `--cpus` also works without the `--sbatch` flag. The `--venv` flag takes the root venv directory, it then activates the venv by calling `source <venv path>/bin/activate`\n\n\n<H3 id=\"PreProcessedInputs\">Using Pre-processed Inputs</H3>\nTFEA has several pipeline elements to it that a user may bypass by providing downstream pre-processed files. These files can be generated by TFEA if running the full pipeline and may also be used to speed up reruns of TFEA. Below are the three types of pre-processed inputs, short descriptions, an example of the file, and a usage example with TFEA (in some cases there are other inputs needed to go along with the pre-processed file). If multiple pre-processed inputs specified, TFEA will use the most downstream one.\n\n<H4>combined_file</H4>\n\nA sorted (by chrom, start, stop) bed file containing regions of interest\n\nExample (./test_files/test_combined_file.bed)\n```\n#chrom   start stop\nchr22 10683195\t10683999\nchr22\t16609343\t16609405\nchr22\t16901069\t16902599\nchr22\t17036962\t17037636\nchr22\t17158022\t17160214\n...\n```\n\nUsage with TFEA\n```\nTFEA --output ./TFEA/test/test_files/test_output \\\n--combined_file ./TFEA/test/test_files/test_combined_file.bed \\\n--bam1 ./TFEA/test/test_files/SRR1105736.sorted.chr22.subsample.bam ./test_files/SRR1105737.sorted.chr22.subsample.bam \\\n--bam2 ./TFEA/test/test_files/SRR1105738.sorted.chr22.subsample.bam ./test_files/SRR1105739.sorted.chr22.subsample.bam \\\n--label1 condition1 --label2 condition2 \\\n--genomefasta ./TFEA/test/test_files/chr22.fa \\\n--fimo_motifs ./TFEA/test/test_files/test_database.meme\n```\n\n<H4>ranked_file</H4>\n\nA ranked bed file with regions of interest. \n\n<b>*Note:*</b> Specifying a ranked_file turns off some plotting functionality\n\nExample (./test_files/test_ranked_file.bed)\n\n```\n#chrom\tstart\tstop\nchr22\t50794870\t50797870\nchr22\t21554591\t21557591\nchr22\t50304644\t50307644\nchr22\t39096295\t39099295\nchr22\t31176104\t31179104\n...\n```\n\nUsage with TFEA\n\n```\nTFEA --output ./TFEA/test/test_files/test_output \\\n--ranked_file ./TFEA/test/test_files/test_ranked_file.bed \\\n--label1 condition1 --label2 condition2 \\\n--genomefasta ./TFEA/test/test_files/chr22.fa \\\n--fimo_motifs ./TFEA/test/test_files/test_database.meme\n```\n\n<H4>fasta_file</H4>\n\nA ranked fasta file with regions of interest (sequences must have unique names but these names aren't used for anything). \n\n<b>*Note:*</b> Specifying a fasta_file turns off some plotting functionality\n\nExample (./test_files/test_fasta_file.bed)\n\n```\n>chr22:50794870-50797870\nccgccccacactgacgcagt...ccgcctcagcctcctaaa\n>chr22:21554591-21557591\ncttggggagagcagaagcca...gtgcagtggtgcaatctt\n>chr22:50304644-50307644\nCTGAGCACCCCCCACCAGCCA...GGAGACGGGGCCTTTGT\n...\n```\n\nUsage with TFEA\n\n```\nTFEA --output ./TFEA/test/test_files/test_output \\\n--fasta_file ./TFEA/test/test_files/test_fasta_file.fa \\\n--label1 condition1 --label2 condition2 \\\n--genomefasta ./TFEA/test/test_files/chr22.fa \\\n--fimo_motifs ./TFEA/test/test_files/test_database.meme\n```\n\n<H3 id=\"SecondaryAnalysis\">Secondary Analysis</H3>\nTFEA can also perform MD-Score analysis and differential MD-Score analysis. This can be switched on easily if running the full pipeline:\n\n```\nTFEA --output ./TFEA/test/test_files/test_output \\\n--combined_file ./TFEA/test/test_files/test_combined_file.bed \\\n--bam1 ./TFEA/test/test_files/SRR1105736.sorted.chr22.subsample.bam ./TFEA/test/test_files/SRR1105737.sorted.chr22.subsample.bam \\\n--bam2 ./TFEA/test/test_files/SRR1105738.sorted.chr22.subsample.bam ./TFEA/test/test_files/SRR1105739.sorted.chr22.subsample.bam \\\n--label1 condition1 --label2 condition2 \\\n--genomefasta ./TFEA/test/test_files/chr22.fa \\\n--fimo_motifs ./TFEA/test/test_files/test_database.meme \\\n--md --mdd\n```\n\nThese secondary analyses can also take pre-processed input similar to TFEA. See the 'Secondary Analysis Inputs' section in the <A href=\"#HelpMessage\">help message</A> for more information.\n\n<H3 id=\"FPKM\">Measuring TF FPKM</H3>\nTFEA will also measure the FPKM of TF genes within your data if desired. This requires input into the `--motif_annotations` flag which is a bed file with motif names as the 4th column. Example:\n\n```\nchr1\t3698045\t3733079\tP73_HUMAN.H11MO.0.A\t0\t+\nchr1\t6579990\t6589212\tZBT48_HUMAN.H11MO.0.C\t0\t+\nchr1\t15941868\t15948495\tZBT17_HUMAN.H11MO.0.A\t0\t-\nchr1\t23359447\t23368005\tZN436_HUMAN.H11MO.0.C\t0\t-\n```\n\nThis special bed file can be generated from a .meme database file using a tab-separated 2-column file containing motif names to gene names and a gene annotation file:\n\nExample of a motif_to_gene.tsv (this was generated on the HOCOMOCO v11 website):\n\n```\nModel\tTranscription factor\nANDR_HUMAN.H11MO.0.A\tAR\nAP2A_HUMAN.H11MO.0.A\tTFAP2A\nAP2C_HUMAN.H11MO.0.A\tTFAP2C\nASCL1_HUMAN.H11MO.0.A\tASCL1\n```\n\nExample of gene annotations:\n\n```\nchr1\t11873\t14409\tDDX11L1;NR_046018;chr1:11873-14409\t0\t+\nchr1\t14361\t29370\tWASH7P;NR_024540;chr1:14361-29370\t0\t-\nchr1\t17368\t17436\tMIR6859-1;NR_106918;chr1:17368-17436\t0\t-\nchr1\t17368\t17436\tMIR6859-4;NR_128720;chr1:17368-17436\t0\t-\nchr1\t17368\t17436\tMIR6859-3;NR_107063;chr1:17368-17436\t0\t-\n```\n\nThe script works by looking for gene names that correspond to each motif within the 4th column of the gene annotation file. It expects the 4th column to be ';' delimited.\n\nAlready generated motif_annotation.bed files (and also intermediate .tsv files) are located within './motif_files/'\n\n<H3 id=\"SimulatedData\">Generating Simulated Data</H3>\nTFEA has a subpackage that is capable of generating simulated data for testing. If you have installed TFEA, it can be invoked with:\n\n```TFEA-simulate --help```\n\nThe purpose of this subpackage is to embed motif instances into fasta sequences that can be generated randomly or be from an experimental dataset (e.g. untreated control sample). There are several key flags that control this process (each of these may be a comma-delimited list of values that would indicate multiple instances of motif adding):\n\n`--distance_mu` : This flag controls where the center of the distribution is located (note: only normal distributions are supported at this point)\n\n`--distance_sigma` : Controls the standard deviation of the normal distribution\n\n`--rank_range` : Controls the range of sequences in which to add a motif\n\n`--motif_number` : Controls the number of motifs to add to your range of sequences\n\n\n<H3 id=\"RerunningTFEA\">Rerunning TFEA</H3>\nTFEA can be easily rerun given one or multiple TFEA output folders. This works simply by rerunning the rerun.sh script which contains all command-line flag inputs. TFEA also automatically creates a copy of your configuration file (if used) within the output folder which is then also used when rerunning (so no need to worry about editing the original configuration file). To rerun a single TFEA output folder:\n\n```\nTFEA --rerun ./TFEA/test/test_files/test_output\n```\n\nThe `--rerun` flag also supports patterns containing wildcards to rerun all TFEA output folders that match. For example:\n\n```\nTFEA --rerun ./TFEA/test/test_files/test*\n```\n\nThis works by looking recursively into all folders and subfolders for rerun.sh scripts and then executing `sh rerun.sh`, so use with caution!\n\n<H3 id=\"HelpMessage\">Help Message</H3>\nBelow are all the possible flags that can be provided to TFEA with a short description and default values.\n\n```\nusage: TFEA [-h] [--output DIR] [--bed1 [BED1 [BED1 ...]]]\n            [--bed2 [BED2 [BED2 ...]]] [--bam1 [BAM1 [BAM1 ...]]]\n            [--bam2 [BAM2 [BAM2 ...]]] [--bg1 [BG1 [BG1 ...]]]\n            [--bg2 [BG2 [BG2 ...]]] [--label1 LABEL1] [--label2 LABEL2]\n            [--genomefasta GENOMEFASTA] [--fimo_motifs FIMO_MOTIFS]\n            [--config CONFIG] [--sbatch SBATCH] [--test-install] [--test-full]\n            [--combined_file COMBINED_FILE] [--ranked_file RANKED_FILE]\n            [--fasta_file FASTA_FILE] [--md] [--mdd]\n            [--md_bedfile1 MD_BEDFILE1] [--md_bedfile2 MD_BEDFILE2]\n            [--mdd_bedfile1 MDD_BEDFILE1] [--mdd_bedfile2 MDD_BEDFILE2]\n            [--md_fasta1 MD_FASTA1] [--md_fasta2 MD_FASTA2]\n            [--mdd_fasta1 MDD_FASTA1] [--mdd_fasta2 MDD_FASTA2]\n            [--mdd_pval MDD_PVAL] [--mdd_percent MDD_PERCENT]\n            [--combine {mumerge,intersect/merge,mergeall,tfitclean,tfitremovesmall}]\n            [--rank {deseq,fc,False}] [--scanner {fimo,genome hits}]\n            [--enrichment {auc,auc_bgcorrect}] [--fimo_thresh FIMO_THRESH]\n            [--fimo_background FIMO_BACKGROUND] [--genomehits GENOMEHITS]\n            [--singlemotif SINGLEMOTIF] [--permutations PERMUTATIONS]\n            [--largewindow LARGEWINDOW] [--smallwindow SMALLWINDOW]\n            [--padjcutoff PADJCUTOFF] [--plot_format {png,svg,pdf}]\n            [--dpi DPI] [--plotall] [--metaprofile] [--output_type {txt,html}]\n            [--batch BATCH] [--cpus CPUS] [--mem MEM]\n            [--motif_annotations MOTIF_ANNOTATIONS] [--bootstrap BOOTSTRAP]\n            [--basemean_cut BASEMEAN_CUT] [--rerun [RERUN [RERUN ...]]]\n            [--gc GC] [--venv VENV] [--debug]\n\nTranscription Factor Enrichment Analysis (TFEA) v1.1.3\n\noptional arguments:\n  -h, --help            show this help message and exit\n\nMain Inputs:\n  Inputs required for full pipeline\n\n  --output DIR, -o DIR  Full path to output directory. If it exists, overwrite\n                        its contents.\n  --bed1 [BED1 [BED1 ...]]\n                        Bed files associated with condition 1\n  --bed2 [BED2 [BED2 ...]]\n                        Bed files associated with condition 2\n  --bam1 [BAM1 [BAM1 ...]]\n                        Sorted bam files associated with condition 1. Must be\n                        indexed.\n  --bam2 [BAM2 [BAM2 ...]]\n                        Sorted bam files associated with condition 2. Must be\n                        indexed.\n  --bg1 [BG1 [BG1 ...]]\n                        Sorted bedGraph files associated with condition 1.\n                        Must be indexed.\n  --bg2 [BG2 [BG2 ...]]\n                        Sorted bedGraph files associated with condition 2.\n                        Must be indexed.\n  --label1 LABEL1       An informative label for condition 1\n  --label2 LABEL2       An informative label for condition 2\n  --genomefasta GENOMEFASTA\n                        Genomic fasta file\n  --fimo_motifs FIMO_MOTIFS\n                        Full path to a .meme formatted motif databse file.\n                        Some databases included in motif_files folder.\n  --config CONFIG, -c CONFIG\n                        A configuration file that a user may use instead of\n                        specifying flags. Command line flags will overwrite\n                        options within the config file. See examples in the\n                        config_files folder.\n  --sbatch SBATCH, -s SBATCH\n                        Submits an sbatch (slurm) job. If specified, input an\n                        e-mail address.\n  --test-install, -ti   Checks whether all requirements are installed and\n                        command-line runnable.\n  --test-full, -t       Performs unit testing on full TFEA pipeline.\n\nProcessed Inputs:\n  Input options for pre-processed data\n\n  --combined_file COMBINED_FILE\n                        A single bed file combining regions of interest.\n  --ranked_file RANKED_FILE\n                        A bed file containing each regions rank as the 4th\n                        column.\n  --fasta_file FASTA_FILE\n                        A fasta file containing sequences to be analyzed,\n                        ranked by the user.\n\nSecondary Analysis Inputs:\n  Input options for performing MD-Score and Differential MD-Score analysis\n\n  --md                  Switch that controls whether to perform MD analysis.\n  --mdd                 Switch that controls whether to perform differential\n                        MD analysis.\n  --md_bedfile1 MD_BEDFILE1\n                        A bed file for MD-Score analysis associated with\n                        condition 1.\n  --md_bedfile2 MD_BEDFILE2\n                        A bed file for MD-Score analysis associated with\n                        condition 2.\n  --mdd_bedfile1 MDD_BEDFILE1\n                        A bed file for Differential MD-Score analysis\n                        associated with condition 1.\n  --mdd_bedfile2 MDD_BEDFILE2\n                        A bed file for Differential MD-Score analysis\n                        associated with condition 2.\n  --md_fasta1 MD_FASTA1\n                        A fasta file for MD-Score analysis associated with\n                        condition 1.\n  --md_fasta2 MD_FASTA2\n                        A fasta file for MD-Score analysis associated with\n                        condition 2.\n  --mdd_fasta1 MDD_FASTA1\n                        A fasta file for Differential MD-Score analysis\n                        associated with condition 1.\n  --mdd_fasta2 MDD_FASTA2\n                        A fasta file for Differential MD-Score analysis\n                        associated with condition 2.\n  --mdd_pval MDD_PVAL   P-value cutoff for retaining differential regions.\n                        Default: 0.2\n  --mdd_percent MDD_PERCENT\n                        Percentage cutoff for retaining differential regions.\n                        Default: False\n\nModules:\n  Options for different modules\n\n  --combine {mumerge,intersect/merge,mergeall,tfitclean,tfitremovesmall}\n                        Method for combining input bed files. Default: mumerge\n  --rank {deseq,fc,False}\n                        Method for ranking combined bed file\n  --scanner {fimo,genome hits}\n                        Method for scanning fasta files for motifs. Default:\n                        fimo\n  --enrichment {auc,auc_bgcorrect}\n                        Method for calculating enrichment. Default: auc\n\nScanner Options:\n  Options for performing motif scanning\n\n  --fimo_thresh FIMO_THRESH\n                        P-value threshold for calling FIMO motif hits.\n                        Default: 1e-6\n  --fimo_background FIMO_BACKGROUND\n                        Options for choosing mononucleotide background\n                        distribution to use with FIMO. Default:\n                        largewindow{'largewindow', 'smallwindow', int, file}\n  --genomehits GENOMEHITS\n                        A folder containing bed files with pre-calculated\n                        motif hits to a genome. For use with 'genome hits'\n                        scanner option.\n  --singlemotif SINGLEMOTIF\n                        Option to run analysis on a subset of motifs within\n                        specified motif database or genome hits. Can be a\n                        single motif or a comma-separated list of motifs.\n\nEnrichment Options:\n  Options for performing enrichment analysis\n\n  --permutations PERMUTATIONS\n                        Number of permutations to perfrom for calculating\n                        p-value. Default: 1000\n  --largewindow LARGEWINDOW\n                        The size (bp) of a large window around input regions\n                        that captures background. Default: 1500\n  --smallwindow SMALLWINDOW\n                        The size (bp) of a small window arount input regions\n                        that captures signal. Default: 150\n\nOutput Options:\n  Options for the output.\n\n  --padjcutoff PADJCUTOFF\n                        A p-adjusted cutoff value that determines some\n                        plotting output.\n  --plot_format {png,svg,pdf}\n                        Format of saved figures. Default: png\n  --dpi DPI             Resolution of saved figures. Applies to png. Default:\n                        100\n  --plotall             Plot graphs for all motifs.Warning: This will make\n                        TFEA run much slower andwill result in a large output\n                        folder.\n  --metaprofile         Create meta profile plots per quartile. Warning: This\n                        will make TFEA run much slower and consume a lot more\n                        memory.\n  --output_type {txt,html}\n                        Specify output type. Selecting html will increase\n                        processing time and memory usage. Default: txt\n\nMiscellaneous Options:\n  Other options.\n\n  --batch BATCH         Comma-separated list of batches to assign to bam files\n                        in order of bam1 files then bam2 files. For use only\n                        when ranking with DE-Seq.\n  --cpus CPUS           Number of processes to run in parallel. Warning:\n                        Increasing this value will significantly increase\n                        memory footprint. Default: 1\n  --mem MEM             Amount of memory to request for sbatch script.\n                        Default: 20gb\n  --motif_annotations MOTIF_ANNOTATIONS\n                        A bed file specifying genomic coordinates for genes\n                        corresponding to motifs. Motif name must be in the 4th\n                        column and match what is in the database.\n  --bootstrap BOOTSTRAP\n                        Amount to subsample motifhits to. Set to False to turn\n                        off. Default: False\n  --basemean_cut BASEMEAN_CUT\n                        Basemean cutoff value for inputted regions. Default: 0\n  --rerun [RERUN [RERUN ...]]\n                        Rerun TFEA in all folders of aspecified directory.\n                        Used as a standalone flag.Default: False\n  --gc GC               Perform GC-correction. Default: True\n  --venv VENV           Full path to virtual environment.\n  --debug               Print memory and CPU usage to stderr. Also retain\n                        temporary files.\n```\n\n<br></br>\n\n<H2 id=\"ExampleOutput\">Example Output</H2>\nTFEA will output all files and folders into the directory specified by the `--output` flag. The output directory structure is as follows:\n\n```\n./TFEA/test/test_output\n\u2502   rerun.sh\n\u2502   test_config.ini\n\u2502   inputs.txt\n\u2502   results.txt\n\u2502   md_results.txt\n\u2502   mdd_results.txt\n\u2502   results.html\n\u2502\n\u2514\u2500\u2500\u2500e_and_o\n\u2502      TFEA_test_output.err\n\u2502      TFEA_test_output.out\n\u2502  \n\u2514\u2500\u2500\u2500plots\n\u2502      logo_rcMOTIF.eps\n\u2502      logo_rcMOTIF.png\n\u2502      logoMOTIF.eps\n\u2502      logoMOTIF.png\n\u2502      MOTIF_enrichment_plot.png\n\u2502      MOTIF_simulation_plot.png\n\u2502      MOTIF.results.html\n\u2502      \n\u2514\u2500\u2500\u2500temp_files\n       combined_file.mergeall.bed\n       count_file.bed\n       count_file.header.bed\n       DESeq.R\n       DESeq.Rout\n       DESeq.res.txt\n       markov_background.txt\n       ranked_file.bed\n       ranked_file.fa\n```\n\nA brief description of the files contained within this output directory are below:\n\n<H3 id=\"\">rerun.sh</H3>\nThis bash script can be used at any time to regenerate a TFEA output folder in its entirety, run it using:\n\n```\nsh ./TFEA/test/test_output/rerun.sh\n```\n\n<H3 id=\"\">test_config.ini</H3>\n\nTFEA copies the config file you are using into the output directoy. This file is then referenced by rerun.sh.\n\n\n<H3 id=\"\">inputs.txt</H3>\n\nA .txt file that contains all user-provided inputs into TFEA\n\n<H3 id=\"\">results.txt</H3>\nContains TFEA results tab-delimited in .txt format. For example:\n\n```\n#TF     E-Score Corrected E-Score       Events  GC      FPKM    P-adj   Corrected P-adj\nZN121_HUMAN.H11MO.0.C   0.03850103634523616     0.10374224445904234     230     0.5825102880658438      nan     0.637   1e-1\nSP2_HUMAN.H11MO.0.A     -0.14690991996820513    -0.09232220913971645    119     0.7937748120168564      nan     1e0     0.494\n```\nColumn Descriptions:\n\n1. TF - The name of the motif analyzed as it appears in the .meme database or filename within the genome hits directory without the '.bed' extension.\n2. E-Score - The enrichment score of the given motif. Ranges from -1 to 1.\n3. Corrected E-Score - The GC-corrected E-Score. Calculated by fitting a linear regression to the E-Score vs. motif GC content of results and correcting to obtain a flat line.\n4. Events - Number of motif hits within the analyzed regions of interest.\n5. GC - GC content of the analyzed motif\n6. FPKM - FPKM of the gene associated with the analyzed motif, see `--motif_annotations` flag.\n7. P-adj - The adjusted p-value of the motif using the Bonferroni correction (to get the original p-value, simply divide this by the total number of motifs analyzed).\n8. Corrected P-adj - The adjusted p-value after GC-correction.\n\n<H3 id=\"\">md_results.txt and mdd_results.txt</H3>\nContains tab-delimited results for secondary MD-Score (MDS) and Differential MD-Score (MDD) analysis if these flags were specified\n\n<H3 id=\"\">results.html</H3>\n\nThe main results html (if `--output_type 'html'` specified). For example:\n\n![TFEA Pipeline](https://github.com/jdrubin91/TFEA/blob/master/README_images/ExampleResults_v2.png)\n\n<b>Figure 1: Main Results Page.</b> An example main results page (i.e. `results.html`). (a) <i>TFEA GC-Plot.</i> A scatter plot showing the raw calculated E-Score as a function of GC-content. A linear regression is fit (red line) to these data to determine if there is a GC-bias. E-Scores are then corrected to flatten the line by subtracting the y-offset from each motif to yield the corrected E-Score. TFs are also colored on the subsequent correction to be applied. (b) <i>TFEA MA-Plot.</i> A scatter plot showing E-Score vs. Log10(Events). Analogous to an MA-Plot produced from DE-Seq, these are a good way to judge believable motifs. The further you go to the right, the more confidence you have in smaller absolute E-Score values. (c) <i>DE-Seq MA-Plot.</i> A scatter plot showing all input ROIs as an MA-Plot showing fold change in reads vs. average reads across conditions. Colored based on the subsequent rank of each ROI. (d) Links to supplementary infromation, secondary analyses performed, and runtime information. (e) Lists of all motifs analyzed separated on positive and negative E-Scores. Significant motifs (or any if `--plotall` is specified) may be clicked to bring up individual motif plots\n\n<H3 id=\"\">MOTIF.results.html</H3>\n\nEach signficant TF motif (or all motifs if `--plotall` specified) will produce its own MOTIF.results.html file contained within the plots/ directory in the specified output directory. All images are also self-contained within the plots/ folder. For example:\n\n![TFEA Pipeline](https://github.com/jdrubin91/TFEA/blob/master/README_images/ExampleMotifResults_v2.png)\n\n<b>Figure 2: Individual Motif Results Page.</b> An example individual motif results page. (a) The numerical results for this specific motif. (b) A representation of the running sum statistic which increases from 0 as it travels right based on the distance of an observed motif to the center of each ROI. (c) Representation of the amount added to the running sum at each given location. Similar to GSEA enrichment plots. (d) Scatter plot showing the raw motif hits as a function of distance to ROI center (y-axis) and rank (x-axis). (e) Representation of the ranking metric used to rank ROI. Specifically this is the -log10 of the DE-Seq p-value with an added sign (+/-) based on whether the ROI fold change was positive or negative. (f) Meta plots of all regions that contain a motif hit separated by quartiles (n=number of ROI that go into the plot). (g) Heatmaps that represent motif hit distribution across the n ROI, separated again by quartiles. (h) Forward and reverse motif logos. (i) Simulation plot showing the background simulated distribution in blue, the observed non-corrected E-Score in red, and the GC-corrected E-Score in green.\n\n<br></br>\n\n<H2 id=\"ContactInformation\">Contact Information</H2>\n<a href=\"mailto:jonathan.rubin@colorado.edu\">Jonathan.Rubin@colorado.edu</a>\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Dowell-Lab/TFEA.git", "keywords": "", "license": "GPL-3.0", "maintainer": "", "maintainer_email": "", "name": "tfea", "package_url": "https://pypi.org/project/tfea/", "platform": "", "project_url": "https://pypi.org/project/tfea/", "project_urls": {"Homepage": "https://github.com/Dowell-Lab/TFEA.git"}, "release_url": "https://pypi.org/project/tfea/1.1.4/", "requires_dist": ["matplotlib (>=3.1.1)", "scipy", "numpy", "pybedtools", "htseq", "psutil", "ujson", "pysam (==0.15.2)"], "requires_python": ">=3", "summary": "Transcription Factor Enrichment Analysis", "version": "1.1.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Transcription Factor Enrichment Analysis (TFEA)</h1>\n<h2 id=\"TableOfContents\">Table of Contents</h2>\n<ol>\n<li><a href=\"#Pipeline\" rel=\"nofollow\">Pipeline</a></li>\n<li><a href=\"#InstallationandRequirements\" rel=\"nofollow\">Installation and Requirements</a>\n<ul>\n<li><a href=\"#TFEA\" rel=\"nofollow\">TFEA</a></li>\n<li><a href=\"#DESeq\" rel=\"nofollow\">DESeq</a></li>\n<li><a href=\"#Bedtools\" rel=\"nofollow\">Bedtools</a></li>\n<li><a href=\"#Samtools\" rel=\"nofollow\">Samtools</a></li>\n<li><a href=\"#MEMESuite\" rel=\"nofollow\">MEME Suite</a>\n<ul>\n<li><a href=\"#ImageMagick\" rel=\"nofollow\">Image Magick</a></li>\n</ul>\n</li>\n<li><a href=\"#FIJIModules\" rel=\"nofollow\">FIJI Modules</a></li>\n</ul>\n</li>\n<li><a href=\"#BasicUsage\" rel=\"nofollow\">Basic Usage</a>\n<ul>\n<li><a href=\"#TestingTFEA\" rel=\"nofollow\">Testing TFEA</a></li>\n<li><a href=\"#RunningTFEA\" rel=\"nofollow\">Running TFEA</a></li>\n</ul>\n</li>\n<li><a href=\"#AdvancedUsage\" rel=\"nofollow\">Advanced Usage</a>\n<ul>\n<li><a href=\"#ConfigurationFile\" rel=\"nofollow\">Configuration File</a></li>\n<li><a href=\"#BatchCorrection\" rel=\"nofollow\">Batch Correction</a></li>\n<li><a href=\"#UsingSBATCH\" rel=\"nofollow\">Using SBATCH</a></li>\n<li><a href=\"#PreProcessedInputs\" rel=\"nofollow\">Pre-Processed Inputs</a></li>\n<li><a href=\"#SecondaryAnalysis\" rel=\"nofollow\">Secondary Analysis (MD, MDD)</a></li>\n<li><a href=\"#FPKM\" rel=\"nofollow\">Measuring TF FPKM</a></li>\n<li><a href=\"#SimulatedData\" rel=\"nofollow\">Generating Simulated Data</a></li>\n<li><a href=\"RerunningTFEA\" rel=\"nofollow\">Rerunning TFEA</a></li>\n<li><a href=\"#HelpMessage\" rel=\"nofollow\">Help Message</a></li>\n</ul>\n</li>\n<li><a href=\"#ExampleOutput\" rel=\"nofollow\">Example Output</a></li>\n<li><a href=\"#ContactInformation\" rel=\"nofollow\">Contact Information</a></li>\n</ol>\n<p><br><br></p>\n<h2 id=\"Pipeline\">TFEA Pipeline</h2>\n<p><img alt=\"TFEA Pipeline\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/841c434e7892761bf48640c587a8abbe8721adc6/68747470733a2f2f6769746875622e636f6d2f6a64727562696e39312f544645412f626c6f622f6d61737465722f524541444d455f696d616765732f54464541506970656c696e6576352e706e67\"></p>\n<p><br><br></p>\n<h2 id=\"InstallationandRequirements\">Installation and Requirements</h2>\n   <h3 id=\"TFEA\">TFEA</h3>\n<p>To install, this package and all python3 dependencies:</p>\n<pre><code>python3 -m pip install tfea\n</code></pre>\n<p>This should take no longer than several minutes.</p>\n<p>Once successfully installed, you should be able to run the tfea command from anywhere, try:</p>\n<pre><code>TFEA --help\n</code></pre>\n<p><b><em>Note:</em></b> If you plan to run TFEA only on FIJI using the --sbatch flag, then you only need to install DESeq and DESeq2. Otherwise, follow the instructions below for installing all TFEA dependencies.</p>\n  <h3 id=\"DESeq\">DESeq</h3>\n  TFEA uses DESeq or DESeq2 (depending on replicate number) to rank inputted bed files based on fold change significance. If on FIJI, make sure all gcc modules are unloaded before installing DESeq or DESeq2. This can be accomplished with:\n<pre><code>module unload gcc\n</code></pre>\n<p>or</p>\n<pre><code>module purge\n</code></pre>\n<p>To install DESeq and DESeq2 type in your terminal:</p>\n<pre><code>R\n\n&gt; if (!requireNamespace(\"BiocManager\", quietly = TRUE))\n&gt;   install.packages(\"BiocManager\")\n\n&gt; BiocManager::install(\"DESeq\")\n&gt; BiocManager::install(\"DESeq2\")\n</code></pre>\n  <h3 id=\"Bedtools\">Bedtools</h3>\n  TFEA uses Bedtools to do several genomic computations. Instructions for installing bedtools can be found here:\n<p><a href=\"http://bedtools.readthedocs.io/en/latest/content/installation.html\" rel=\"nofollow\">Bedtools Installation</a></p>\n<p>If you are on FIJI compute cluster, bedtools is available as a module:</p>\n<pre><code>module load bedtools/2.25.0\n</code></pre>\n  <h3 id=\"Samtools\">Samtools</h3>\n  TFEA uses samtools to index bam files. Samtools download and install instructions can be found here:\n  <a href=\"http://www.htslib.org/download/\" rel=\"nofollow\">Samtools Download and Install</a>\n<p>If you are on FIJI compute cluster, bedtools is available as a module:</p>\n<pre><code>module load samtools/1.8\n</code></pre>\n  <h3 id=\"MEMESuite\">MEME Suite</h3>\n  TFEA uses the MEME suite to scan sequences from inputted bed files for motif hits using the background atcg distribution form inputted bed file regions. TFEA also uses the MEME suite to generate motif logos for html display. Instructions for downloading and installing the MEME suite can be found here:\n<p><a href=\"http://meme-suite.org/doc/install.html?man_type=web\" rel=\"nofollow\">MEME Download and Installation</a></p>\n<p>If you are on FIJI compute cluster, the meme suite is available as a module:</p>\n<pre><code>module load meme/5.0.3\n</code></pre>\n  <h4 id=\"ImageMagick\">Image Magick</h4>\n  TFEA uses the meme2images script within MEME to produce motif logo figures. This requires Image Magick, which is a common linux utility package sometimes pre-installed on machines. To check if you have Image Magick installed try:\n<pre><code>identify -version\n</code></pre>\n<p>If you do not have Image Magick installed, follow these instructions:</p>\n<p><a href=\"https://imagemagick.org/script/install-source.php\" rel=\"nofollow\">Image Magick Download and Installation</a></p>\n  <h3 id=\"FIJIModules\">FIJI Modules</h3>\n  Below is a summary of all FIJI modules needed to run TFEA.\n<pre><code>module load python/3.6.3\nmodule load python/3.6.3/matplotlib/1.5.1\nmodule load python/3.6.3/scipy/0.17.1\nmodule load python/3.6.3/numpy/1.14.1\nmodule load python/3.6.3/htseq/0.9.1\nmodule load python/3.6.3/pybedtools/0.7.10\n\nmodule load samtools/1.8\nmodule load bedtools/2.25.0\nmodule load meme/5.0.3\n</code></pre>\n<p><br><br></p>\n<h2 id=\"BasicUsage\">BasicUsage</h2>\n<h3 id=\"TestingTFEA\">Testing TFEA</h3>\nTo make sure TFEA is installed properly, run the following tests:\n<p><b><em>Note:</em></b> If you chose to skip installations because you were going to run TFEA using the --sbatch flag, make sure you load the appropriate modules on FIJI or these tests will fail.</p>\n<pre><code>TFEA --test-install\nTFEA --test-full\n</code></pre>\n<p>These should each take no longer than several minutes to run</p>\n<p>If on a compute cluster with slurm the --sbatch flag is compatible with --test-full and is recommended on FIJI. Execute like so:</p>\n<pre><code>TFEA --test-full --sbatch your_email@address.com\n</code></pre>\n<h3 id=\"RunningTFEA\">Running TFEA</h3>\nOnce you've run the above tests successfully, you should be ready to run the full version of TFEA. Below are the minimum required inputs to run the full TFEA pipeline. Test files are provided in './TFEA/test/test_files' within this repository.\n<pre><code>TFEA --output ./TFEA/test/test_files/test_output \\\n--bed1 ./TFEA/test/test_files/SRR1105736.tfit_bidirs.chr22.bed ./TFEA/test/test_files/SRR1105737.tfit_bidirs.chr22.bed \\\n--bed2 ./TFEA/test/test_files/SRR1105738.tfit_bidirs.chr22.bed ./TFEA/test/test_files/SRR1105739.tfit_bidirs.chr22.bed \\\n--bam1 ./TFEA/test/test_files/SRR1105736.sorted.chr22.subsample.bam ./TFEA/test/test_files/SRR1105737.sorted.chr22.subsample.bam \\\n--bam2 ./TFEA/test/test_files/SRR1105738.sorted.chr22.subsample.bam ./TFEA/test/test_files/SRR1105739.sorted.chr22.subsample.bam \\\n--label1 DMSO --label2 Nutlin \\\n--genomefasta ./TFEA/test/test_files/chr22.fa \\\n--fimo_motifs ./TFEA/test/test_files/test_database.meme\n</code></pre>\n<h2 id=\"AdvancedUsage\">Advanced Usage</h2> \n<h3 id=\"ConfigurationFile\">Configuration File</h3>\nTFEA can be run exclusively through the command line using flags. Alternatively, TFEA can be run using a configuration file (.ini) that takes in flags as variables. For example:\n<pre><code>TFEA --config ./TFEA/test/test_files/test_config.ini\n</code></pre>\n<p>This can be helpful to keep track of different TFEA runs and because you can use variables within the config file to clean up your input. For documentation on config files and what you can do with them see <a href=\"https://docs.python.org/3.6/library/configparser.html#supported-ini-file-structure\" rel=\"nofollow\">Supported INI File Structure</a> and <a href=\"https://docs.python.org/3.6/library/configparser.html#interpolation-of-values\" rel=\"nofollow\">Interpolation of values (ExtendedInterpolation)</a></p>\n<p><b><em>Notes:</em></b></p>\n<ol>\n<li>Section headers (ex: <code>[OUTPUT]</code>) don't matter but you need to have at least ONE section header to be a viable .ini file.</li>\n<li>Capitalization of variables doesn't matter.</li>\n<li>Feel free to specify any additional variables you like (variables are bash-like), TFEA will only parse variables that match a flag input.</li>\n<li>If an input is provided both as a flag and in a configuration file, TFEA prioritizes the command line flag input.</li>\n</ol>\n<p>Below is an example of a configuration file (./test_files/test_config.ini):</p>\n<pre><span class=\"o\">[</span>OUTPUT<span class=\"o\">]</span>\n<span class=\"nv\">OUTPUT</span><span class=\"o\">=</span><span class=\"s1\">'./TFEA/test/test_files/test_output/'</span>\n<span class=\"nv\">LABEL1</span><span class=\"o\">=</span><span class=\"s1\">'Condition 1'</span>\n<span class=\"nv\">LABEL2</span><span class=\"o\">=</span><span class=\"s1\">'Condition 2'</span>\n\n<span class=\"o\">[</span>DATA<span class=\"o\">]</span>\n<span class=\"nv\">TEST_FILES</span><span class=\"o\">=</span><span class=\"s1\">'./TFEA/test/test_files/'</span>\n<span class=\"nv\">BED1</span><span class=\"o\">=[</span><span class=\"si\">${</span><span class=\"nv\">TEST_FILES</span><span class=\"si\">}</span>+<span class=\"s1\">'SRR1105736.tfit_bidirs.chr22.bed'</span>,<span class=\"si\">${</span><span class=\"nv\">TEST_FILES</span><span class=\"si\">}</span>+<span class=\"s1\">'SRR1105737.tfit_bidirs.chr22.bed'</span><span class=\"o\">]</span>\n<span class=\"nv\">BED2</span><span class=\"o\">=[</span><span class=\"si\">${</span><span class=\"nv\">TEST_FILES</span><span class=\"si\">}</span>+<span class=\"s1\">'SRR1105738.tfit_bidirs.chr22.bed'</span>,<span class=\"si\">${</span><span class=\"nv\">TEST_FILES</span><span class=\"si\">}</span>+<span class=\"s1\">'SRR1105739.tfit_bidirs.chr22.bed'</span><span class=\"o\">]</span>\n<span class=\"nv\">BAM1</span><span class=\"o\">=[</span><span class=\"si\">${</span><span class=\"nv\">TEST_FILES</span><span class=\"si\">}</span>+<span class=\"s1\">'SRR1105736.sorted.chr22.subsample.bam'</span>, <span class=\"si\">${</span><span class=\"nv\">TEST_FILES</span><span class=\"si\">}</span>+<span class=\"s1\">'SRR1105737.sorted.chr22.subsample.bam'</span><span class=\"o\">]</span>\n<span class=\"nv\">BAM2</span><span class=\"o\">=[</span><span class=\"si\">${</span><span class=\"nv\">TEST_FILES</span><span class=\"si\">}</span>+<span class=\"s1\">'SRR1105738.sorted.chr22.subsample.bam'</span>, <span class=\"si\">${</span><span class=\"nv\">TEST_FILES</span><span class=\"si\">}</span>+<span class=\"s1\">'SRR1105739.sorted.chr22.subsample.bam'</span><span class=\"o\">]</span>\n\n<span class=\"o\">[</span>MODULES<span class=\"o\">]</span>\n<span class=\"nv\">TEST_FILES</span><span class=\"o\">=</span><span class=\"s1\">'./TFEA/test/test_files/'</span> <span class=\"c1\">#You need to re-initialize variables within each [MODULE]</span>\n<span class=\"nv\">FIMO_MOTIFS</span><span class=\"o\">=</span><span class=\"si\">${</span><span class=\"nv\">TEST_FILES</span><span class=\"si\">}</span>+<span class=\"s1\">'test_database.meme'</span>\n<span class=\"nv\">GENOMEFASTA</span><span class=\"o\">=</span><span class=\"si\">${</span><span class=\"nv\">TEST_FILES</span><span class=\"si\">}</span>+<span class=\"s1\">'chr22.fa'</span>\n\n<span class=\"o\">[</span>OPTIONS<span class=\"o\">]</span>\n<span class=\"nv\">OUTPUT_TYPE</span><span class=\"o\">=</span><span class=\"s1\">'html'</span>\n<span class=\"nv\">PLOTALL</span><span class=\"o\">=</span>True\n</pre>\n<h3 id=\"BatchCorrection\">Batch Correction</h3>\n<p>The presence of batch effects is common in sequencing data. TFEA can account for batch effects when performing ROI ranking using DE-Seq using built in functions. To correct for batch effects, specify a comma-separated list of batch labels to apply to your bam files in order of bam1 then bam2. For example:</p>\n<pre><code>--bam1 condition1_batch1 condition1_batch2 condition1_batch3\n--bam2 condition2_batch1 condition2_batch2 condition2_batch3\n--batch 1,2,3,1,2,3\n</code></pre>\n<h3 id=\"UsingSBATCH\">Using SBATCH</h3>\n<p>Specifying the <code>--sbatch</code> flag will submit TFEA to a compute cluster assuming you are logged into one. If the <code>--sbatch</code> flag is specified, it MUST be followed by an e-mail address to send job information to. For example:</p>\n<pre><code>TFEA --config ./TFEA/test/test_files/test_config.ini --sbatch your_email@address.com\n</code></pre>\n<p>Additionally, the following flags can be used to change some of the job parameters and specify a python virtual environment:</p>\n<pre><code>  --cpus CPUS           Number of processes to run in parallel. Warning:\n                        Increasing this value will significantly increase\n                        memory footprint. Default: 1\n  --mem MEM             Amount of memory to request forsbatch script. Default:\n                        50gb\n  --venv VENV           Full path to virtual environment.\n</code></pre>\n<p><b><em>Note:</em></b> <code>--cpus</code> also works without the <code>--sbatch</code> flag. The <code>--venv</code> flag takes the root venv directory, it then activates the venv by calling <code>source &lt;venv path&gt;/bin/activate</code></p>\n<h3 id=\"PreProcessedInputs\">Using Pre-processed Inputs</h3>\nTFEA has several pipeline elements to it that a user may bypass by providing downstream pre-processed files. These files can be generated by TFEA if running the full pipeline and may also be used to speed up reruns of TFEA. Below are the three types of pre-processed inputs, short descriptions, an example of the file, and a usage example with TFEA (in some cases there are other inputs needed to go along with the pre-processed file). If multiple pre-processed inputs specified, TFEA will use the most downstream one.\n<h4>combined_file</h4>\n<p>A sorted (by chrom, start, stop) bed file containing regions of interest</p>\n<p>Example (./test_files/test_combined_file.bed)</p>\n<pre><code>#chrom   start stop\nchr22 10683195\t10683999\nchr22\t16609343\t16609405\nchr22\t16901069\t16902599\nchr22\t17036962\t17037636\nchr22\t17158022\t17160214\n...\n</code></pre>\n<p>Usage with TFEA</p>\n<pre><code>TFEA --output ./TFEA/test/test_files/test_output \\\n--combined_file ./TFEA/test/test_files/test_combined_file.bed \\\n--bam1 ./TFEA/test/test_files/SRR1105736.sorted.chr22.subsample.bam ./test_files/SRR1105737.sorted.chr22.subsample.bam \\\n--bam2 ./TFEA/test/test_files/SRR1105738.sorted.chr22.subsample.bam ./test_files/SRR1105739.sorted.chr22.subsample.bam \\\n--label1 condition1 --label2 condition2 \\\n--genomefasta ./TFEA/test/test_files/chr22.fa \\\n--fimo_motifs ./TFEA/test/test_files/test_database.meme\n</code></pre>\n<h4>ranked_file</h4>\n<p>A ranked bed file with regions of interest.</p>\n<p><b><em>Note:</em></b> Specifying a ranked_file turns off some plotting functionality</p>\n<p>Example (./test_files/test_ranked_file.bed)</p>\n<pre><code>#chrom\tstart\tstop\nchr22\t50794870\t50797870\nchr22\t21554591\t21557591\nchr22\t50304644\t50307644\nchr22\t39096295\t39099295\nchr22\t31176104\t31179104\n...\n</code></pre>\n<p>Usage with TFEA</p>\n<pre><code>TFEA --output ./TFEA/test/test_files/test_output \\\n--ranked_file ./TFEA/test/test_files/test_ranked_file.bed \\\n--label1 condition1 --label2 condition2 \\\n--genomefasta ./TFEA/test/test_files/chr22.fa \\\n--fimo_motifs ./TFEA/test/test_files/test_database.meme\n</code></pre>\n<h4>fasta_file</h4>\n<p>A ranked fasta file with regions of interest (sequences must have unique names but these names aren't used for anything).</p>\n<p><b><em>Note:</em></b> Specifying a fasta_file turns off some plotting functionality</p>\n<p>Example (./test_files/test_fasta_file.bed)</p>\n<pre><code>&gt;chr22:50794870-50797870\nccgccccacactgacgcagt...ccgcctcagcctcctaaa\n&gt;chr22:21554591-21557591\ncttggggagagcagaagcca...gtgcagtggtgcaatctt\n&gt;chr22:50304644-50307644\nCTGAGCACCCCCCACCAGCCA...GGAGACGGGGCCTTTGT\n...\n</code></pre>\n<p>Usage with TFEA</p>\n<pre><code>TFEA --output ./TFEA/test/test_files/test_output \\\n--fasta_file ./TFEA/test/test_files/test_fasta_file.fa \\\n--label1 condition1 --label2 condition2 \\\n--genomefasta ./TFEA/test/test_files/chr22.fa \\\n--fimo_motifs ./TFEA/test/test_files/test_database.meme\n</code></pre>\n<h3 id=\"SecondaryAnalysis\">Secondary Analysis</h3>\nTFEA can also perform MD-Score analysis and differential MD-Score analysis. This can be switched on easily if running the full pipeline:\n<pre><code>TFEA --output ./TFEA/test/test_files/test_output \\\n--combined_file ./TFEA/test/test_files/test_combined_file.bed \\\n--bam1 ./TFEA/test/test_files/SRR1105736.sorted.chr22.subsample.bam ./TFEA/test/test_files/SRR1105737.sorted.chr22.subsample.bam \\\n--bam2 ./TFEA/test/test_files/SRR1105738.sorted.chr22.subsample.bam ./TFEA/test/test_files/SRR1105739.sorted.chr22.subsample.bam \\\n--label1 condition1 --label2 condition2 \\\n--genomefasta ./TFEA/test/test_files/chr22.fa \\\n--fimo_motifs ./TFEA/test/test_files/test_database.meme \\\n--md --mdd\n</code></pre>\n<p>These secondary analyses can also take pre-processed input similar to TFEA. See the 'Secondary Analysis Inputs' section in the <a href=\"#HelpMessage\" rel=\"nofollow\">help message</a> for more information.</p>\n<h3 id=\"FPKM\">Measuring TF FPKM</h3>\nTFEA will also measure the FPKM of TF genes within your data if desired. This requires input into the `--motif_annotations` flag which is a bed file with motif names as the 4th column. Example:\n<pre><code>chr1\t3698045\t3733079\tP73_HUMAN.H11MO.0.A\t0\t+\nchr1\t6579990\t6589212\tZBT48_HUMAN.H11MO.0.C\t0\t+\nchr1\t15941868\t15948495\tZBT17_HUMAN.H11MO.0.A\t0\t-\nchr1\t23359447\t23368005\tZN436_HUMAN.H11MO.0.C\t0\t-\n</code></pre>\n<p>This special bed file can be generated from a .meme database file using a tab-separated 2-column file containing motif names to gene names and a gene annotation file:</p>\n<p>Example of a motif_to_gene.tsv (this was generated on the HOCOMOCO v11 website):</p>\n<pre><code>Model\tTranscription factor\nANDR_HUMAN.H11MO.0.A\tAR\nAP2A_HUMAN.H11MO.0.A\tTFAP2A\nAP2C_HUMAN.H11MO.0.A\tTFAP2C\nASCL1_HUMAN.H11MO.0.A\tASCL1\n</code></pre>\n<p>Example of gene annotations:</p>\n<pre><code>chr1\t11873\t14409\tDDX11L1;NR_046018;chr1:11873-14409\t0\t+\nchr1\t14361\t29370\tWASH7P;NR_024540;chr1:14361-29370\t0\t-\nchr1\t17368\t17436\tMIR6859-1;NR_106918;chr1:17368-17436\t0\t-\nchr1\t17368\t17436\tMIR6859-4;NR_128720;chr1:17368-17436\t0\t-\nchr1\t17368\t17436\tMIR6859-3;NR_107063;chr1:17368-17436\t0\t-\n</code></pre>\n<p>The script works by looking for gene names that correspond to each motif within the 4th column of the gene annotation file. It expects the 4th column to be ';' delimited.</p>\n<p>Already generated motif_annotation.bed files (and also intermediate .tsv files) are located within './motif_files/'</p>\n<h3 id=\"SimulatedData\">Generating Simulated Data</h3>\nTFEA has a subpackage that is capable of generating simulated data for testing. If you have installed TFEA, it can be invoked with:\n<p><code>TFEA-simulate --help</code></p>\n<p>The purpose of this subpackage is to embed motif instances into fasta sequences that can be generated randomly or be from an experimental dataset (e.g. untreated control sample). There are several key flags that control this process (each of these may be a comma-delimited list of values that would indicate multiple instances of motif adding):</p>\n<p><code>--distance_mu</code> : This flag controls where the center of the distribution is located (note: only normal distributions are supported at this point)</p>\n<p><code>--distance_sigma</code> : Controls the standard deviation of the normal distribution</p>\n<p><code>--rank_range</code> : Controls the range of sequences in which to add a motif</p>\n<p><code>--motif_number</code> : Controls the number of motifs to add to your range of sequences</p>\n<h3 id=\"RerunningTFEA\">Rerunning TFEA</h3>\nTFEA can be easily rerun given one or multiple TFEA output folders. This works simply by rerunning the rerun.sh script which contains all command-line flag inputs. TFEA also automatically creates a copy of your configuration file (if used) within the output folder which is then also used when rerunning (so no need to worry about editing the original configuration file). To rerun a single TFEA output folder:\n<pre><code>TFEA --rerun ./TFEA/test/test_files/test_output\n</code></pre>\n<p>The <code>--rerun</code> flag also supports patterns containing wildcards to rerun all TFEA output folders that match. For example:</p>\n<pre><code>TFEA --rerun ./TFEA/test/test_files/test*\n</code></pre>\n<p>This works by looking recursively into all folders and subfolders for rerun.sh scripts and then executing <code>sh rerun.sh</code>, so use with caution!</p>\n<h3 id=\"HelpMessage\">Help Message</h3>\nBelow are all the possible flags that can be provided to TFEA with a short description and default values.\n<pre><code>usage: TFEA [-h] [--output DIR] [--bed1 [BED1 [BED1 ...]]]\n            [--bed2 [BED2 [BED2 ...]]] [--bam1 [BAM1 [BAM1 ...]]]\n            [--bam2 [BAM2 [BAM2 ...]]] [--bg1 [BG1 [BG1 ...]]]\n            [--bg2 [BG2 [BG2 ...]]] [--label1 LABEL1] [--label2 LABEL2]\n            [--genomefasta GENOMEFASTA] [--fimo_motifs FIMO_MOTIFS]\n            [--config CONFIG] [--sbatch SBATCH] [--test-install] [--test-full]\n            [--combined_file COMBINED_FILE] [--ranked_file RANKED_FILE]\n            [--fasta_file FASTA_FILE] [--md] [--mdd]\n            [--md_bedfile1 MD_BEDFILE1] [--md_bedfile2 MD_BEDFILE2]\n            [--mdd_bedfile1 MDD_BEDFILE1] [--mdd_bedfile2 MDD_BEDFILE2]\n            [--md_fasta1 MD_FASTA1] [--md_fasta2 MD_FASTA2]\n            [--mdd_fasta1 MDD_FASTA1] [--mdd_fasta2 MDD_FASTA2]\n            [--mdd_pval MDD_PVAL] [--mdd_percent MDD_PERCENT]\n            [--combine {mumerge,intersect/merge,mergeall,tfitclean,tfitremovesmall}]\n            [--rank {deseq,fc,False}] [--scanner {fimo,genome hits}]\n            [--enrichment {auc,auc_bgcorrect}] [--fimo_thresh FIMO_THRESH]\n            [--fimo_background FIMO_BACKGROUND] [--genomehits GENOMEHITS]\n            [--singlemotif SINGLEMOTIF] [--permutations PERMUTATIONS]\n            [--largewindow LARGEWINDOW] [--smallwindow SMALLWINDOW]\n            [--padjcutoff PADJCUTOFF] [--plot_format {png,svg,pdf}]\n            [--dpi DPI] [--plotall] [--metaprofile] [--output_type {txt,html}]\n            [--batch BATCH] [--cpus CPUS] [--mem MEM]\n            [--motif_annotations MOTIF_ANNOTATIONS] [--bootstrap BOOTSTRAP]\n            [--basemean_cut BASEMEAN_CUT] [--rerun [RERUN [RERUN ...]]]\n            [--gc GC] [--venv VENV] [--debug]\n\nTranscription Factor Enrichment Analysis (TFEA) v1.1.3\n\noptional arguments:\n  -h, --help            show this help message and exit\n\nMain Inputs:\n  Inputs required for full pipeline\n\n  --output DIR, -o DIR  Full path to output directory. If it exists, overwrite\n                        its contents.\n  --bed1 [BED1 [BED1 ...]]\n                        Bed files associated with condition 1\n  --bed2 [BED2 [BED2 ...]]\n                        Bed files associated with condition 2\n  --bam1 [BAM1 [BAM1 ...]]\n                        Sorted bam files associated with condition 1. Must be\n                        indexed.\n  --bam2 [BAM2 [BAM2 ...]]\n                        Sorted bam files associated with condition 2. Must be\n                        indexed.\n  --bg1 [BG1 [BG1 ...]]\n                        Sorted bedGraph files associated with condition 1.\n                        Must be indexed.\n  --bg2 [BG2 [BG2 ...]]\n                        Sorted bedGraph files associated with condition 2.\n                        Must be indexed.\n  --label1 LABEL1       An informative label for condition 1\n  --label2 LABEL2       An informative label for condition 2\n  --genomefasta GENOMEFASTA\n                        Genomic fasta file\n  --fimo_motifs FIMO_MOTIFS\n                        Full path to a .meme formatted motif databse file.\n                        Some databases included in motif_files folder.\n  --config CONFIG, -c CONFIG\n                        A configuration file that a user may use instead of\n                        specifying flags. Command line flags will overwrite\n                        options within the config file. See examples in the\n                        config_files folder.\n  --sbatch SBATCH, -s SBATCH\n                        Submits an sbatch (slurm) job. If specified, input an\n                        e-mail address.\n  --test-install, -ti   Checks whether all requirements are installed and\n                        command-line runnable.\n  --test-full, -t       Performs unit testing on full TFEA pipeline.\n\nProcessed Inputs:\n  Input options for pre-processed data\n\n  --combined_file COMBINED_FILE\n                        A single bed file combining regions of interest.\n  --ranked_file RANKED_FILE\n                        A bed file containing each regions rank as the 4th\n                        column.\n  --fasta_file FASTA_FILE\n                        A fasta file containing sequences to be analyzed,\n                        ranked by the user.\n\nSecondary Analysis Inputs:\n  Input options for performing MD-Score and Differential MD-Score analysis\n\n  --md                  Switch that controls whether to perform MD analysis.\n  --mdd                 Switch that controls whether to perform differential\n                        MD analysis.\n  --md_bedfile1 MD_BEDFILE1\n                        A bed file for MD-Score analysis associated with\n                        condition 1.\n  --md_bedfile2 MD_BEDFILE2\n                        A bed file for MD-Score analysis associated with\n                        condition 2.\n  --mdd_bedfile1 MDD_BEDFILE1\n                        A bed file for Differential MD-Score analysis\n                        associated with condition 1.\n  --mdd_bedfile2 MDD_BEDFILE2\n                        A bed file for Differential MD-Score analysis\n                        associated with condition 2.\n  --md_fasta1 MD_FASTA1\n                        A fasta file for MD-Score analysis associated with\n                        condition 1.\n  --md_fasta2 MD_FASTA2\n                        A fasta file for MD-Score analysis associated with\n                        condition 2.\n  --mdd_fasta1 MDD_FASTA1\n                        A fasta file for Differential MD-Score analysis\n                        associated with condition 1.\n  --mdd_fasta2 MDD_FASTA2\n                        A fasta file for Differential MD-Score analysis\n                        associated with condition 2.\n  --mdd_pval MDD_PVAL   P-value cutoff for retaining differential regions.\n                        Default: 0.2\n  --mdd_percent MDD_PERCENT\n                        Percentage cutoff for retaining differential regions.\n                        Default: False\n\nModules:\n  Options for different modules\n\n  --combine {mumerge,intersect/merge,mergeall,tfitclean,tfitremovesmall}\n                        Method for combining input bed files. Default: mumerge\n  --rank {deseq,fc,False}\n                        Method for ranking combined bed file\n  --scanner {fimo,genome hits}\n                        Method for scanning fasta files for motifs. Default:\n                        fimo\n  --enrichment {auc,auc_bgcorrect}\n                        Method for calculating enrichment. Default: auc\n\nScanner Options:\n  Options for performing motif scanning\n\n  --fimo_thresh FIMO_THRESH\n                        P-value threshold for calling FIMO motif hits.\n                        Default: 1e-6\n  --fimo_background FIMO_BACKGROUND\n                        Options for choosing mononucleotide background\n                        distribution to use with FIMO. Default:\n                        largewindow{'largewindow', 'smallwindow', int, file}\n  --genomehits GENOMEHITS\n                        A folder containing bed files with pre-calculated\n                        motif hits to a genome. For use with 'genome hits'\n                        scanner option.\n  --singlemotif SINGLEMOTIF\n                        Option to run analysis on a subset of motifs within\n                        specified motif database or genome hits. Can be a\n                        single motif or a comma-separated list of motifs.\n\nEnrichment Options:\n  Options for performing enrichment analysis\n\n  --permutations PERMUTATIONS\n                        Number of permutations to perfrom for calculating\n                        p-value. Default: 1000\n  --largewindow LARGEWINDOW\n                        The size (bp) of a large window around input regions\n                        that captures background. Default: 1500\n  --smallwindow SMALLWINDOW\n                        The size (bp) of a small window arount input regions\n                        that captures signal. Default: 150\n\nOutput Options:\n  Options for the output.\n\n  --padjcutoff PADJCUTOFF\n                        A p-adjusted cutoff value that determines some\n                        plotting output.\n  --plot_format {png,svg,pdf}\n                        Format of saved figures. Default: png\n  --dpi DPI             Resolution of saved figures. Applies to png. Default:\n                        100\n  --plotall             Plot graphs for all motifs.Warning: This will make\n                        TFEA run much slower andwill result in a large output\n                        folder.\n  --metaprofile         Create meta profile plots per quartile. Warning: This\n                        will make TFEA run much slower and consume a lot more\n                        memory.\n  --output_type {txt,html}\n                        Specify output type. Selecting html will increase\n                        processing time and memory usage. Default: txt\n\nMiscellaneous Options:\n  Other options.\n\n  --batch BATCH         Comma-separated list of batches to assign to bam files\n                        in order of bam1 files then bam2 files. For use only\n                        when ranking with DE-Seq.\n  --cpus CPUS           Number of processes to run in parallel. Warning:\n                        Increasing this value will significantly increase\n                        memory footprint. Default: 1\n  --mem MEM             Amount of memory to request for sbatch script.\n                        Default: 20gb\n  --motif_annotations MOTIF_ANNOTATIONS\n                        A bed file specifying genomic coordinates for genes\n                        corresponding to motifs. Motif name must be in the 4th\n                        column and match what is in the database.\n  --bootstrap BOOTSTRAP\n                        Amount to subsample motifhits to. Set to False to turn\n                        off. Default: False\n  --basemean_cut BASEMEAN_CUT\n                        Basemean cutoff value for inputted regions. Default: 0\n  --rerun [RERUN [RERUN ...]]\n                        Rerun TFEA in all folders of aspecified directory.\n                        Used as a standalone flag.Default: False\n  --gc GC               Perform GC-correction. Default: True\n  --venv VENV           Full path to virtual environment.\n  --debug               Print memory and CPU usage to stderr. Also retain\n                        temporary files.\n</code></pre>\n<p><br><br></p>\n<h2 id=\"ExampleOutput\">Example Output</h2>\nTFEA will output all files and folders into the directory specified by the `--output` flag. The output directory structure is as follows:\n<pre><code>./TFEA/test/test_output\n\u2502   rerun.sh\n\u2502   test_config.ini\n\u2502   inputs.txt\n\u2502   results.txt\n\u2502   md_results.txt\n\u2502   mdd_results.txt\n\u2502   results.html\n\u2502\n\u2514\u2500\u2500\u2500e_and_o\n\u2502      TFEA_test_output.err\n\u2502      TFEA_test_output.out\n\u2502  \n\u2514\u2500\u2500\u2500plots\n\u2502      logo_rcMOTIF.eps\n\u2502      logo_rcMOTIF.png\n\u2502      logoMOTIF.eps\n\u2502      logoMOTIF.png\n\u2502      MOTIF_enrichment_plot.png\n\u2502      MOTIF_simulation_plot.png\n\u2502      MOTIF.results.html\n\u2502      \n\u2514\u2500\u2500\u2500temp_files\n       combined_file.mergeall.bed\n       count_file.bed\n       count_file.header.bed\n       DESeq.R\n       DESeq.Rout\n       DESeq.res.txt\n       markov_background.txt\n       ranked_file.bed\n       ranked_file.fa\n</code></pre>\n<p>A brief description of the files contained within this output directory are below:</p>\n<h3 id=\"\">rerun.sh</h3>\nThis bash script can be used at any time to regenerate a TFEA output folder in its entirety, run it using:\n<pre><code>sh ./TFEA/test/test_output/rerun.sh\n</code></pre>\n<h3 id=\"\">test_config.ini</h3>\n<p>TFEA copies the config file you are using into the output directoy. This file is then referenced by rerun.sh.</p>\n<h3 id=\"\">inputs.txt</h3>\n<p>A .txt file that contains all user-provided inputs into TFEA</p>\n<h3 id=\"\">results.txt</h3>\nContains TFEA results tab-delimited in .txt format. For example:\n<pre><code>#TF     E-Score Corrected E-Score       Events  GC      FPKM    P-adj   Corrected P-adj\nZN121_HUMAN.H11MO.0.C   0.03850103634523616     0.10374224445904234     230     0.5825102880658438      nan     0.637   1e-1\nSP2_HUMAN.H11MO.0.A     -0.14690991996820513    -0.09232220913971645    119     0.7937748120168564      nan     1e0     0.494\n</code></pre>\n<p>Column Descriptions:</p>\n<ol>\n<li>TF - The name of the motif analyzed as it appears in the .meme database or filename within the genome hits directory without the '.bed' extension.</li>\n<li>E-Score - The enrichment score of the given motif. Ranges from -1 to 1.</li>\n<li>Corrected E-Score - The GC-corrected E-Score. Calculated by fitting a linear regression to the E-Score vs. motif GC content of results and correcting to obtain a flat line.</li>\n<li>Events - Number of motif hits within the analyzed regions of interest.</li>\n<li>GC - GC content of the analyzed motif</li>\n<li>FPKM - FPKM of the gene associated with the analyzed motif, see <code>--motif_annotations</code> flag.</li>\n<li>P-adj - The adjusted p-value of the motif using the Bonferroni correction (to get the original p-value, simply divide this by the total number of motifs analyzed).</li>\n<li>Corrected P-adj - The adjusted p-value after GC-correction.</li>\n</ol>\n<h3 id=\"\">md_results.txt and mdd_results.txt</h3>\nContains tab-delimited results for secondary MD-Score (MDS) and Differential MD-Score (MDD) analysis if these flags were specified\n<h3 id=\"\">results.html</h3>\n<p>The main results html (if <code>--output_type 'html'</code> specified). For example:</p>\n<p><img alt=\"TFEA Pipeline\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9888120d810bbaa361fd46644da4843bcd718b72/68747470733a2f2f6769746875622e636f6d2f6a64727562696e39312f544645412f626c6f622f6d61737465722f524541444d455f696d616765732f4578616d706c65526573756c74735f76322e706e67\"></p>\n<p><b>Figure 1: Main Results Page.</b> An example main results page (i.e. <code>results.html</code>). (a) <i>TFEA GC-Plot.</i> A scatter plot showing the raw calculated E-Score as a function of GC-content. A linear regression is fit (red line) to these data to determine if there is a GC-bias. E-Scores are then corrected to flatten the line by subtracting the y-offset from each motif to yield the corrected E-Score. TFs are also colored on the subsequent correction to be applied. (b) <i>TFEA MA-Plot.</i> A scatter plot showing E-Score vs. Log10(Events). Analogous to an MA-Plot produced from DE-Seq, these are a good way to judge believable motifs. The further you go to the right, the more confidence you have in smaller absolute E-Score values. (c) <i>DE-Seq MA-Plot.</i> A scatter plot showing all input ROIs as an MA-Plot showing fold change in reads vs. average reads across conditions. Colored based on the subsequent rank of each ROI. (d) Links to supplementary infromation, secondary analyses performed, and runtime information. (e) Lists of all motifs analyzed separated on positive and negative E-Scores. Significant motifs (or any if <code>--plotall</code> is specified) may be clicked to bring up individual motif plots</p>\n<h3 id=\"\">MOTIF.results.html</h3>\n<p>Each signficant TF motif (or all motifs if <code>--plotall</code> specified) will produce its own MOTIF.results.html file contained within the plots/ directory in the specified output directory. All images are also self-contained within the plots/ folder. For example:</p>\n<p><img alt=\"TFEA Pipeline\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/81062902eba68125a50e4c555f7aa2f91eed1302/68747470733a2f2f6769746875622e636f6d2f6a64727562696e39312f544645412f626c6f622f6d61737465722f524541444d455f696d616765732f4578616d706c654d6f746966526573756c74735f76322e706e67\"></p>\n<p><b>Figure 2: Individual Motif Results Page.</b> An example individual motif results page. (a) The numerical results for this specific motif. (b) A representation of the running sum statistic which increases from 0 as it travels right based on the distance of an observed motif to the center of each ROI. (c) Representation of the amount added to the running sum at each given location. Similar to GSEA enrichment plots. (d) Scatter plot showing the raw motif hits as a function of distance to ROI center (y-axis) and rank (x-axis). (e) Representation of the ranking metric used to rank ROI. Specifically this is the -log10 of the DE-Seq p-value with an added sign (+/-) based on whether the ROI fold change was positive or negative. (f) Meta plots of all regions that contain a motif hit separated by quartiles (n=number of ROI that go into the plot). (g) Heatmaps that represent motif hit distribution across the n ROI, separated again by quartiles. (h) Forward and reverse motif logos. (i) Simulation plot showing the background simulated distribution in blue, the observed non-corrected E-Score in red, and the GC-corrected E-Score in green.</p>\n<p><br><br></p>\n<h2 id=\"ContactInformation\">Contact Information</h2>\n<a href=\"mailto:jonathan.rubin@colorado.edu\">Jonathan.Rubin@colorado.edu</a>\n\n          </div>"}, "last_serial": 7139270, "releases": {"1.0.1": [{"comment_text": "", "digests": {"md5": "33f2cc3ffbf3c6041c3d365e6d9ae77a", "sha256": "3259ee0ba07447a154253b2e863bf45a2697863771675534cf30d01da7848e8a"}, "downloads": -1, "filename": "tfea-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "33f2cc3ffbf3c6041c3d365e6d9ae77a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 50469883, "upload_time": "2020-02-06T18:24:42", "upload_time_iso_8601": "2020-02-06T18:24:42.298784Z", "url": "https://files.pythonhosted.org/packages/b0/7a/567a45062692203f50b16a3d38c8a006fdb1b345d807c85b737c075ff119/tfea-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a95d417c52a8cdedfbe12088ca96e2a7", "sha256": "bf93a7cfc969bece47a333ddd574367cf6301f065348336018972b128e880f81"}, "downloads": -1, "filename": "tfea-1.0.1.tar.gz", "has_sig": false, "md5_digest": "a95d417c52a8cdedfbe12088ca96e2a7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 50096616, "upload_time": "2020-02-06T18:24:58", "upload_time_iso_8601": "2020-02-06T18:24:58.433669Z", "url": "https://files.pythonhosted.org/packages/81/9f/9a118475df85b735d2e96247560ec22f1e060435a8c0076586b3b01be1f3/tfea-1.0.1.tar.gz", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "4662594282ef6a56b1a6577223fbe596", "sha256": "9c970db48480b0bd82b08ea8f1c7f3bc0b88c0274810c08d685b3e146ea493ea"}, "downloads": -1, "filename": "tfea-1.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "4662594282ef6a56b1a6577223fbe596", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 50470571, "upload_time": "2020-04-11T17:10:53", "upload_time_iso_8601": "2020-04-11T17:10:53.929808Z", "url": "https://files.pythonhosted.org/packages/74/8a/8abdfad1bbd748d15a92cfc94ebbd6a2e51287b39db015870ddf49ab64ef/tfea-1.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b97780d5a7de1c19b12949f4a6c3056c", "sha256": "41b49d62648fe43d3299393abf177d4c36acb28d1b289365cda712241ceb9a37"}, "downloads": -1, "filename": "tfea-1.1.1.tar.gz", "has_sig": false, "md5_digest": "b97780d5a7de1c19b12949f4a6c3056c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 50098075, "upload_time": "2020-04-11T17:28:32", "upload_time_iso_8601": "2020-04-11T17:28:32.741054Z", "url": "https://files.pythonhosted.org/packages/90/7b/239505b7b220fb29356cd3a1cdb5f7d84c9942eeee25d9300955671a02f1/tfea-1.1.1.tar.gz", "yanked": false}], "1.1.3": [{"comment_text": "", "digests": {"md5": "41bbffbdcf8c9a9627bdb4cc2ceca52d", "sha256": "1535082614af036067af9d2aefb2c913360c0f87a9d7de2d20a81beb319fa684"}, "downloads": -1, "filename": "tfea-1.1.3-py3-none-any.whl", "has_sig": false, "md5_digest": "41bbffbdcf8c9a9627bdb4cc2ceca52d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 50471429, "upload_time": "2020-04-24T18:14:45", "upload_time_iso_8601": "2020-04-24T18:14:45.942403Z", "url": "https://files.pythonhosted.org/packages/9b/27/5468d58bc1fbc31bb41673a616183e39d7c86e801731ba8ffce2d23f37ca/tfea-1.1.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e414689afa5397c08fadbebff529a79b", "sha256": "9ebdbc31ae07d4c7ac9a0f73c895023718a9e3cc1bcec6ccd1482c11c5dc7cae"}, "downloads": -1, "filename": "tfea-1.1.3.tar.gz", "has_sig": false, "md5_digest": "e414689afa5397c08fadbebff529a79b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 50100086, "upload_time": "2020-04-24T18:41:29", "upload_time_iso_8601": "2020-04-24T18:41:29.349983Z", "url": "https://files.pythonhosted.org/packages/57/c9/1674c09c60567c6d96bedc1945eb85efc0106e9819d3bc3105b3374d302b/tfea-1.1.3.tar.gz", "yanked": false}], "1.1.4": [{"comment_text": "", "digests": {"md5": "9ec6a39f62645652a530e22df0301124", "sha256": "2886cc8e561a708ff0f946bf93681f5f66727b0520f03bda3d42e3b0de61359f"}, "downloads": -1, "filename": "tfea-1.1.4-py3-none-any.whl", "has_sig": false, "md5_digest": "9ec6a39f62645652a530e22df0301124", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 50471814, "upload_time": "2020-04-30T17:40:03", "upload_time_iso_8601": "2020-04-30T17:40:03.615393Z", "url": "https://files.pythonhosted.org/packages/8e/5f/f94b86cdecc1e4c7b7eaf02cd4e0dae445dbccbeda48207f0186293c18d3/tfea-1.1.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2863ff7317970e4ccd0ac78d7c41906f", "sha256": "fa74d0e4ab11fa7ca125d86b76ee1cb66480374a220ab01d61433d4302cb9b3a"}, "downloads": -1, "filename": "tfea-1.1.4.tar.gz", "has_sig": false, "md5_digest": "2863ff7317970e4ccd0ac78d7c41906f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 50100873, "upload_time": "2020-04-30T17:50:03", "upload_time_iso_8601": "2020-04-30T17:50:03.004583Z", "url": "https://files.pythonhosted.org/packages/68/2a/357d634137b3eb879cf593e7d3a919d570edcdbdcbc2fbc12ca05bad7455/tfea-1.1.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "9ec6a39f62645652a530e22df0301124", "sha256": "2886cc8e561a708ff0f946bf93681f5f66727b0520f03bda3d42e3b0de61359f"}, "downloads": -1, "filename": "tfea-1.1.4-py3-none-any.whl", "has_sig": false, "md5_digest": "9ec6a39f62645652a530e22df0301124", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 50471814, "upload_time": "2020-04-30T17:40:03", "upload_time_iso_8601": "2020-04-30T17:40:03.615393Z", "url": "https://files.pythonhosted.org/packages/8e/5f/f94b86cdecc1e4c7b7eaf02cd4e0dae445dbccbeda48207f0186293c18d3/tfea-1.1.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2863ff7317970e4ccd0ac78d7c41906f", "sha256": "fa74d0e4ab11fa7ca125d86b76ee1cb66480374a220ab01d61433d4302cb9b3a"}, "downloads": -1, "filename": "tfea-1.1.4.tar.gz", "has_sig": false, "md5_digest": "2863ff7317970e4ccd0ac78d7c41906f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 50100873, "upload_time": "2020-04-30T17:50:03", "upload_time_iso_8601": "2020-04-30T17:50:03.004583Z", "url": "https://files.pythonhosted.org/packages/68/2a/357d634137b3eb879cf593e7d3a919d570edcdbdcbc2fbc12ca05bad7455/tfea-1.1.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:54:37 2020"}