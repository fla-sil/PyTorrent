{"info": {"author": "David Wallace", "author_email": "david.wallace@goodeggs.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: 3 :: Only", "Topic :: Software Development"], "description": "# tap-holidays\n[![PyPI version](https://badge.fury.io/py/tap-holidays.svg)](https://badge.fury.io/py/tap-holidays)\n![PyPI - Status](https://img.shields.io/pypi/status/tap-holidays)\n[![Build Status](https://travis-ci.com/goodeggs/tap-holidays.svg?branch=master)](https://travis-ci.com/goodeggs/tap-holidays.svg?branch=master)\n![PyPI - Python Version](https://img.shields.io/pypi/pyversions/tap-holidays)\n[![License: GPL v3](https://img.shields.io/badge/License-GPLv3-blue.svg)](https://www.gnu.org/licenses/gpl-3.0)\n\nA [Singer](https://www.singer.io/) tap for extracting data from the [Holiday API](https://holidayapi.com/docs).\n\n## Installation\n\nSince package dependencies tend to conflict between various taps and targets, Singer [recommends](https://github.com/singer-io/getting-started/blob/master/docs/RUNNING_AND_DEVELOPING.md#running-singer-with-python) installing taps and targets into their own isolated virtual environments:\n\n### Install Holidays Tap\n\n```bash\n$ python3 -m venv ~/.venvs/tap-holidays\n$ source ~/.venvs/tap-holidays/bin/activate\n$ pip3 install tap-holidays\n$ deactivate\n```\n\n### Install Stitch Target (optional)\n\n```bash\n$ python3 -m venv ~/.venvs/target-stitch\n$ source ~/.venvs/target-stitch/bin/activate\n$ pip3 install target-stitch\n$ deactivate\n```\n\n## Configuration\n\nThe tap accepts a JSON-formatted configuration file as arguments. This configuration file has a single required field:\n\n1. `api_key`: A valid Holiday API key.\n\nAn bare-bones Holiday API configuration may file may look like the following:\n\n```json\n{\n  \"api_key\": \"foo\"\n}\n```\n\n### Granular Stream Configuration\n\nAdditionally, you may specify more granular configurations for individual streams. Each key under a stream should represent a valid API request parameter for that endpoint. A more fleshed-out configuration file may look similar to the following:\n\n```json\n{\n  \"api_key\": \"foo\",\n  \"api_version\": \"v1\",\n  \"streams\": {\n    \"holidays\": {\n      \"country\": \"US\",\n      \"year\": 2018,\n      \"subdivisions\": true\n    }\n  }\n}\n```\n\n## Streams\n\nThe current version of the tap syncs a single [Stream](https://github.com/singer-io/getting-started/blob/master/docs/SYNC_MODE.md#streams):\n1. `Holidays`: [Endpoint Documentation](https://holidayapi.com/docs)\n\n## Discovery\n\nSinger taps describe the data that a stream supports via a [Discovery](https://github.com/singer-io/getting-started/blob/master/docs/DISCOVERY_MODE.md#discovery-mode) process. You can run the Dayforce tap in Discovery mode by passing the `--discover` flag at runtime:\n\n```bash\n$ ~/.venvs/tap-holidays/bin/tap-holidays --config=config/holidays.config.json --discover\n```\n\nThe tap will generate a [Catalog](https://github.com/singer-io/getting-started/blob/master/docs/DISCOVERY_MODE.md#the-catalog) to stdout. To pass the Catalog to a file instead, simply redirect it to a file:s\n\n```bash\n$ ~/.venvs/tap-holidays/bin/tap-holidays --config=config/holidays.config.json --discover > catalog.json\n```\n\n## Sync to stdout\n\nRunning a tap in [Sync mode](https://github.com/singer-io/getting-started/blob/master/docs/SYNC_MODE.md#sync-mode) will extract data from the various selected Streams. In order to run a tap in Sync mode and have messages emitted to stdout, pass a valid configuration file and catalog file:\n\n```bash\n$ ~/.venvs/tap-holidays/bin/tap-holidays --config=config/holidays.config.json --catalog=catalog.json\n```\n\nThe tap will emit occasional [Metric](https://github.com/singer-io/getting-started/blob/master/docs/SYNC_MODE.md#metric-messages), [Schema](https://github.com/singer-io/getting-started/blob/master/docs/SPEC.md#schema-message), [Record](https://github.com/singer-io/getting-started/blob/master/docs/SPEC.md#record-message), and [State messages](https://github.com/singer-io/getting-started/blob/master/docs/SPEC.md#state-message). You can persist State between runs by redirecting messages to a file:\n\n```bash\n$ ~/.venvs/tap-holidays/bin/tap-holidays --config=config/holidays.config.json --catalog=catalog.json >> state.json\n$ tail -1 state.json > state.json.tmp\n$ mv state.json.tmp state.json\n```\n\n## Sync to Stitch\n\nYou can also send the output of the tap to [Stitch Data](https://www.stitchdata.com/) for loading into the data warehouse. To do this, first create a JSON-formatted configuration for Stitch. This configuration file has two required fields:\n1. `client_id`: The ID associated with the Stitch Data account you'll be sending data to.\n2. `token` The token associated with the specific [Import API integration](https://www.stitchdata.com/docs/integrations/import-api/) within the Stitch Data account.\n\nAn example configuration file will look as follows:\n\n```json\n{\n  \"client_id\": 1234,\n  \"token\": \"foobarfoobar\"\n}\n```\n\nOnce the configuration file is created, simply pipe the output of the tap to the Stitch Data target and supply the target with the newly created configuration file:\n\n```bash\n$ ~/.venvs/tap-holidays/bin/tap-holidays --config=config/dayforce.config.json --catalog=catalog.json --state=state.json | ~/.venvs/target-stitch/bin/target-stitch --config=config/stitch.config.json >> state.json\n$ tail -1 state.json > state.json.tmp\n$ mv state.json.tmp state.json\n```\n\n## Contributing\n\nThe first step to contributing is getting a copy of the source code. First, [fork `tap-holidays` on GitHub](https://github.com/goodeggs/tap-holidays/fork). Then, `cd` into the directory where you want your copy of the source code to live and clone the source code:\n\n```bash\n$ git clone git@github.com:YourGitHubName/tap-holidays.git\n```\n\nNow that you have a copy of the source code on your local machine, you can leverage [Pipenv](https://docs.pipenv.org/en/latest/) and the corresponding `Pipfile` to install of the development dependencies within a virtual environment:\n\n```bash\n$ pipenv install --three --dev\n```\n\nThis command will create an isolated virtual environment for your `tap-holidays` project and install all the development dependencies defined within the `Pipfile` inside of the environment. You can then enter a shell within the environment:\n\n```bash\n$ pipenv shell\n```\n\nOr, you can run individual commands within the environment without entering the shell:\n\n```bash\n$ pipenv run <command>\n```\n\nFor example, to format your code using [isort](https://github.com/timothycrosley/isort) and [flake8](http://flake8.pycqa.org/en/latest/index.html) before commiting changes, run the following commands:\n\n```bash\n$ pipenv run make isort\n$ pipenv run make flake8\n```\n\nYou can also run the entire testing suite before committing using [tox](https://tox.readthedocs.io/en/latest/):\n\n```bash\n$ pipenv run tox\n```\n\nFinally, you can run your local version of the tap within the virtual environment using a command like the following:\n\n```bash\n$ pipenv run tap-holidays --config=config/dayforce.config.json --catalog=catalog.json\n```\n\nOnce you've confirmed that your changes work and the testing suite passes, feel free to put out a PR!\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/goodeggs/tap-holidays", "keywords": "singer tap python holidays", "license": "GPLv3", "maintainer": "", "maintainer_email": "", "name": "tap-holidays", "package_url": "https://pypi.org/project/tap-holidays/", "platform": "", "project_url": "https://pypi.org/project/tap-holidays/", "project_urls": {"Homepage": "https://github.com/goodeggs/tap-holidays"}, "release_url": "https://pypi.org/project/tap-holidays/0.1.1/", "requires_dist": ["requests (==2.22.0)", "attrs (==19.3.0)", "backoff (==1.8.0)", "singer-python (==5.9.0)", "rollbar (==0.14.7)"], "requires_python": ">=3.6", "summary": "Singer.io tap for extracting data from Holidays API.", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>tap-holidays</h1>\n<p><a href=\"https://badge.fury.io/py/tap-holidays\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/210d26de8b595ed9e05a55d08898c72a016fb697/68747470733a2f2f62616467652e667572792e696f2f70792f7461702d686f6c69646179732e737667\"></a>\n<img alt=\"PyPI - Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c99aaa398af65b0d5c4d1a03b597df0aae88eba1/68747470733a2f2f696d672e736869656c64732e696f2f707970692f7374617475732f7461702d686f6c6964617973\">\n<a href=\"https://travis-ci.com/goodeggs/tap-holidays.svg?branch=master\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/217b98d83f63700421a31a8c42bc1eb33d6cbe80/68747470733a2f2f7472617669732d63692e636f6d2f676f6f64656767732f7461702d686f6c69646179732e7376673f6272616e63683d6d6173746572\"></a>\n<img alt=\"PyPI - Python Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/cdf345ba0c832d9c35253596144869b3e8daa065/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f7461702d686f6c6964617973\">\n<a href=\"https://www.gnu.org/licenses/gpl-3.0\" rel=\"nofollow\"><img alt=\"License: GPL v3\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8de17537dd1659a5a076ce547de301e27c839e67/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d47504c76332d626c75652e737667\"></a></p>\n<p>A <a href=\"https://www.singer.io/\" rel=\"nofollow\">Singer</a> tap for extracting data from the <a href=\"https://holidayapi.com/docs\" rel=\"nofollow\">Holiday API</a>.</p>\n<h2>Installation</h2>\n<p>Since package dependencies tend to conflict between various taps and targets, Singer <a href=\"https://github.com/singer-io/getting-started/blob/master/docs/RUNNING_AND_DEVELOPING.md#running-singer-with-python\" rel=\"nofollow\">recommends</a> installing taps and targets into their own isolated virtual environments:</p>\n<h3>Install Holidays Tap</h3>\n<pre>$ python3 -m venv ~/.venvs/tap-holidays\n$ <span class=\"nb\">source</span> ~/.venvs/tap-holidays/bin/activate\n$ pip3 install tap-holidays\n$ deactivate\n</pre>\n<h3>Install Stitch Target (optional)</h3>\n<pre>$ python3 -m venv ~/.venvs/target-stitch\n$ <span class=\"nb\">source</span> ~/.venvs/target-stitch/bin/activate\n$ pip3 install target-stitch\n$ deactivate\n</pre>\n<h2>Configuration</h2>\n<p>The tap accepts a JSON-formatted configuration file as arguments. This configuration file has a single required field:</p>\n<ol>\n<li><code>api_key</code>: A valid Holiday API key.</li>\n</ol>\n<p>An bare-bones Holiday API configuration may file may look like the following:</p>\n<pre><span class=\"p\">{</span>\n  <span class=\"nt\">\"api_key\"</span><span class=\"p\">:</span> <span class=\"s2\">\"foo\"</span>\n<span class=\"p\">}</span>\n</pre>\n<h3>Granular Stream Configuration</h3>\n<p>Additionally, you may specify more granular configurations for individual streams. Each key under a stream should represent a valid API request parameter for that endpoint. A more fleshed-out configuration file may look similar to the following:</p>\n<pre><span class=\"p\">{</span>\n  <span class=\"nt\">\"api_key\"</span><span class=\"p\">:</span> <span class=\"s2\">\"foo\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"api_version\"</span><span class=\"p\">:</span> <span class=\"s2\">\"v1\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"streams\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"nt\">\"holidays\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n      <span class=\"nt\">\"country\"</span><span class=\"p\">:</span> <span class=\"s2\">\"US\"</span><span class=\"p\">,</span>\n      <span class=\"nt\">\"year\"</span><span class=\"p\">:</span> <span class=\"mi\">2018</span><span class=\"p\">,</span>\n      <span class=\"nt\">\"subdivisions\"</span><span class=\"p\">:</span> <span class=\"kc\">true</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n<h2>Streams</h2>\n<p>The current version of the tap syncs a single <a href=\"https://github.com/singer-io/getting-started/blob/master/docs/SYNC_MODE.md#streams\" rel=\"nofollow\">Stream</a>:</p>\n<ol>\n<li><code>Holidays</code>: <a href=\"https://holidayapi.com/docs\" rel=\"nofollow\">Endpoint Documentation</a></li>\n</ol>\n<h2>Discovery</h2>\n<p>Singer taps describe the data that a stream supports via a <a href=\"https://github.com/singer-io/getting-started/blob/master/docs/DISCOVERY_MODE.md#discovery-mode\" rel=\"nofollow\">Discovery</a> process. You can run the Dayforce tap in Discovery mode by passing the <code>--discover</code> flag at runtime:</p>\n<pre>$ ~/.venvs/tap-holidays/bin/tap-holidays --config<span class=\"o\">=</span>config/holidays.config.json --discover\n</pre>\n<p>The tap will generate a <a href=\"https://github.com/singer-io/getting-started/blob/master/docs/DISCOVERY_MODE.md#the-catalog\" rel=\"nofollow\">Catalog</a> to stdout. To pass the Catalog to a file instead, simply redirect it to a file:s</p>\n<pre>$ ~/.venvs/tap-holidays/bin/tap-holidays --config<span class=\"o\">=</span>config/holidays.config.json --discover &gt; catalog.json\n</pre>\n<h2>Sync to stdout</h2>\n<p>Running a tap in <a href=\"https://github.com/singer-io/getting-started/blob/master/docs/SYNC_MODE.md#sync-mode\" rel=\"nofollow\">Sync mode</a> will extract data from the various selected Streams. In order to run a tap in Sync mode and have messages emitted to stdout, pass a valid configuration file and catalog file:</p>\n<pre>$ ~/.venvs/tap-holidays/bin/tap-holidays --config<span class=\"o\">=</span>config/holidays.config.json --catalog<span class=\"o\">=</span>catalog.json\n</pre>\n<p>The tap will emit occasional <a href=\"https://github.com/singer-io/getting-started/blob/master/docs/SYNC_MODE.md#metric-messages\" rel=\"nofollow\">Metric</a>, <a href=\"https://github.com/singer-io/getting-started/blob/master/docs/SPEC.md#schema-message\" rel=\"nofollow\">Schema</a>, <a href=\"https://github.com/singer-io/getting-started/blob/master/docs/SPEC.md#record-message\" rel=\"nofollow\">Record</a>, and <a href=\"https://github.com/singer-io/getting-started/blob/master/docs/SPEC.md#state-message\" rel=\"nofollow\">State messages</a>. You can persist State between runs by redirecting messages to a file:</p>\n<pre>$ ~/.venvs/tap-holidays/bin/tap-holidays --config<span class=\"o\">=</span>config/holidays.config.json --catalog<span class=\"o\">=</span>catalog.json &gt;&gt; state.json\n$ tail -1 state.json &gt; state.json.tmp\n$ mv state.json.tmp state.json\n</pre>\n<h2>Sync to Stitch</h2>\n<p>You can also send the output of the tap to <a href=\"https://www.stitchdata.com/\" rel=\"nofollow\">Stitch Data</a> for loading into the data warehouse. To do this, first create a JSON-formatted configuration for Stitch. This configuration file has two required fields:</p>\n<ol>\n<li><code>client_id</code>: The ID associated with the Stitch Data account you'll be sending data to.</li>\n<li><code>token</code> The token associated with the specific <a href=\"https://www.stitchdata.com/docs/integrations/import-api/\" rel=\"nofollow\">Import API integration</a> within the Stitch Data account.</li>\n</ol>\n<p>An example configuration file will look as follows:</p>\n<pre><span class=\"p\">{</span>\n  <span class=\"nt\">\"client_id\"</span><span class=\"p\">:</span> <span class=\"mi\">1234</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"token\"</span><span class=\"p\">:</span> <span class=\"s2\">\"foobarfoobar\"</span>\n<span class=\"p\">}</span>\n</pre>\n<p>Once the configuration file is created, simply pipe the output of the tap to the Stitch Data target and supply the target with the newly created configuration file:</p>\n<pre>$ ~/.venvs/tap-holidays/bin/tap-holidays --config<span class=\"o\">=</span>config/dayforce.config.json --catalog<span class=\"o\">=</span>catalog.json --state<span class=\"o\">=</span>state.json <span class=\"p\">|</span> ~/.venvs/target-stitch/bin/target-stitch --config<span class=\"o\">=</span>config/stitch.config.json &gt;&gt; state.json\n$ tail -1 state.json &gt; state.json.tmp\n$ mv state.json.tmp state.json\n</pre>\n<h2>Contributing</h2>\n<p>The first step to contributing is getting a copy of the source code. First, <a href=\"https://github.com/goodeggs/tap-holidays/fork\" rel=\"nofollow\">fork <code>tap-holidays</code> on GitHub</a>. Then, <code>cd</code> into the directory where you want your copy of the source code to live and clone the source code:</p>\n<pre>$ git clone git@github.com:YourGitHubName/tap-holidays.git\n</pre>\n<p>Now that you have a copy of the source code on your local machine, you can leverage <a href=\"https://docs.pipenv.org/en/latest/\" rel=\"nofollow\">Pipenv</a> and the corresponding <code>Pipfile</code> to install of the development dependencies within a virtual environment:</p>\n<pre>$ pipenv install --three --dev\n</pre>\n<p>This command will create an isolated virtual environment for your <code>tap-holidays</code> project and install all the development dependencies defined within the <code>Pipfile</code> inside of the environment. You can then enter a shell within the environment:</p>\n<pre>$ pipenv shell\n</pre>\n<p>Or, you can run individual commands within the environment without entering the shell:</p>\n<pre>$ pipenv run &lt;command&gt;\n</pre>\n<p>For example, to format your code using <a href=\"https://github.com/timothycrosley/isort\" rel=\"nofollow\">isort</a> and <a href=\"http://flake8.pycqa.org/en/latest/index.html\" rel=\"nofollow\">flake8</a> before commiting changes, run the following commands:</p>\n<pre>$ pipenv run make isort\n$ pipenv run make flake8\n</pre>\n<p>You can also run the entire testing suite before committing using <a href=\"https://tox.readthedocs.io/en/latest/\" rel=\"nofollow\">tox</a>:</p>\n<pre>$ pipenv run tox\n</pre>\n<p>Finally, you can run your local version of the tap within the virtual environment using a command like the following:</p>\n<pre>$ pipenv run tap-holidays --config<span class=\"o\">=</span>config/dayforce.config.json --catalog<span class=\"o\">=</span>catalog.json\n</pre>\n<p>Once you've confirmed that your changes work and the testing suite passes, feel free to put out a PR!</p>\n\n          </div>"}, "last_serial": 6379591, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "82f3be47c5a8db3586d36ac5c6aaaffc", "sha256": "2129a5ce2886ceaa4351a148828746aa315c514a73f06d932c0cb21b4570b89d"}, "downloads": -1, "filename": "tap_holidays-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "82f3be47c5a8db3586d36ac5c6aaaffc", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 19501, "upload_time": "2019-12-04T15:07:16", "upload_time_iso_8601": "2019-12-04T15:07:16.260434Z", "url": "https://files.pythonhosted.org/packages/c8/5a/1690c843d75f0d085550112481ca0d373b331f27d0b76288dff92cb92515/tap_holidays-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2be79d3052d7cadc1ff1fa38b5a246c7", "sha256": "84d362cad4c790402e072bc7ecba38e71d24010936ae5aab7fd2aeee110ae21d"}, "downloads": -1, "filename": "tap_holidays-0.1.0.tar.gz", "has_sig": false, "md5_digest": "2be79d3052d7cadc1ff1fa38b5a246c7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 7190, "upload_time": "2019-12-04T15:07:18", "upload_time_iso_8601": "2019-12-04T15:07:18.103061Z", "url": "https://files.pythonhosted.org/packages/84/9d/68420004255e973cdbbd6630f1c9b4bfdebdcabf686b817b82ca0b6c536f/tap_holidays-0.1.0.tar.gz", "yanked": false}], "0.1.0a1": [{"comment_text": "", "digests": {"md5": "fe003a9f99f767b5b8061dba9b04c5be", "sha256": "0cb5e123a013d5bcee2c7db94cab752f9ddb91edbeea21161ed385e7f211dc13"}, "downloads": -1, "filename": "tap_holidays-0.1.0a1-py3-none-any.whl", "has_sig": false, "md5_digest": "fe003a9f99f767b5b8061dba9b04c5be", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 19517, "upload_time": "2019-11-13T17:42:41", "upload_time_iso_8601": "2019-11-13T17:42:41.541316Z", "url": "https://files.pythonhosted.org/packages/60/98/63729fb81762aaa12ed5c93935d7693b5dd814f2068c73591a9eb691df95/tap_holidays-0.1.0a1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8acfdaa81c90d6b1d08eeb5be4b340a0", "sha256": "a2c6ba142c0e5057a90850763a76522e5acfb41b9a22e1d8f425396be2fdafbf"}, "downloads": -1, "filename": "tap_holidays-0.1.0a1.tar.gz", "has_sig": false, "md5_digest": "8acfdaa81c90d6b1d08eeb5be4b340a0", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 7141, "upload_time": "2019-11-13T17:42:43", "upload_time_iso_8601": "2019-11-13T17:42:43.894779Z", "url": "https://files.pythonhosted.org/packages/5d/a1/da2c9b09e64437f3889403d3965991c5552c15ab78af3e06a36460f3198a/tap_holidays-0.1.0a1.tar.gz", "yanked": false}], "0.1.0rc1": [{"comment_text": "", "digests": {"md5": "29f737700931d5ec731b00eb21b18f63", "sha256": "d63402aea6cbde26dd24bf4b58d901f41f445696fdf8e9df9aeffb478e090dd7"}, "downloads": -1, "filename": "tap_holidays-0.1.0rc1-py3-none-any.whl", "has_sig": false, "md5_digest": "29f737700931d5ec731b00eb21b18f63", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 19578, "upload_time": "2019-11-14T22:07:23", "upload_time_iso_8601": "2019-11-14T22:07:23.023571Z", "url": "https://files.pythonhosted.org/packages/b1/3c/d62955e4049e7014cd5288ec3c0f9dba376322e4d9460d88fd6258fc4b9c/tap_holidays-0.1.0rc1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6c86e0fa63745dfc63e64be73ccba02a", "sha256": "5bfcd55bf628adfb178c5cca4fc7e2561974859591c7958f8fe02474f52b0e3b"}, "downloads": -1, "filename": "tap_holidays-0.1.0rc1.tar.gz", "has_sig": false, "md5_digest": "6c86e0fa63745dfc63e64be73ccba02a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 7190, "upload_time": "2019-11-14T22:07:24", "upload_time_iso_8601": "2019-11-14T22:07:24.522709Z", "url": "https://files.pythonhosted.org/packages/33/2a/bd7543522f810c76a946e4876931c4a25f329f0a6b0ec52ef9175ddb117a/tap_holidays-0.1.0rc1.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "06cc985ec48912590866ed95799727a2", "sha256": "83c42a7b14e32aa8b92d129f41e50e4204b867e371c23a865b6b522434acbcc8"}, "downloads": -1, "filename": "tap_holidays-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "06cc985ec48912590866ed95799727a2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 19917, "upload_time": "2019-12-31T14:22:21", "upload_time_iso_8601": "2019-12-31T14:22:21.190807Z", "url": "https://files.pythonhosted.org/packages/01/dc/fdcd5d03dc35aae6014334ab355c8168407f1f0109a439eed18a9f9b6676/tap_holidays-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "86870f9388227e5e0d80300242196f07", "sha256": "ac69d40f1a4bdecf1bf46aae8b7fe80238250d8939e836c8dd3b5a21d5c7768f"}, "downloads": -1, "filename": "tap_holidays-0.1.1.tar.gz", "has_sig": false, "md5_digest": "86870f9388227e5e0d80300242196f07", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 7638, "upload_time": "2019-12-31T14:22:22", "upload_time_iso_8601": "2019-12-31T14:22:22.342443Z", "url": "https://files.pythonhosted.org/packages/22/2c/08692171c0d3ade583b9288876c32094e1f9e1eefc945f44274af14094fb/tap_holidays-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "06cc985ec48912590866ed95799727a2", "sha256": "83c42a7b14e32aa8b92d129f41e50e4204b867e371c23a865b6b522434acbcc8"}, "downloads": -1, "filename": "tap_holidays-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "06cc985ec48912590866ed95799727a2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 19917, "upload_time": "2019-12-31T14:22:21", "upload_time_iso_8601": "2019-12-31T14:22:21.190807Z", "url": "https://files.pythonhosted.org/packages/01/dc/fdcd5d03dc35aae6014334ab355c8168407f1f0109a439eed18a9f9b6676/tap_holidays-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "86870f9388227e5e0d80300242196f07", "sha256": "ac69d40f1a4bdecf1bf46aae8b7fe80238250d8939e836c8dd3b5a21d5c7768f"}, "downloads": -1, "filename": "tap_holidays-0.1.1.tar.gz", "has_sig": false, "md5_digest": "86870f9388227e5e0d80300242196f07", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 7638, "upload_time": "2019-12-31T14:22:22", "upload_time_iso_8601": "2019-12-31T14:22:22.342443Z", "url": "https://files.pythonhosted.org/packages/22/2c/08692171c0d3ade583b9288876c32094e1f9e1eefc945f44274af14094fb/tap_holidays-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:58:05 2020"}