{"info": {"author": "Malte Vogl", "author_email": "mvogl@mpiwg-berlin.mpg.de", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Science/Research", "License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Programming Language :: Python :: 3", "Topic :: Text Processing :: General", "Topic :: Text Processing :: Indexing"], "description": "# CorpusSearch\n\nA tool to load and search in text corpora.\n\nThe tool provides routines to search in large corpora in pandas dataframe format, where rows contain textual information on the level of sentences or paragraphs.\nDataframes can be single or multilevel indexed and loaded from URL, DOI, [citable](http://www.edition-topoi.org/publishing_with_us/citable) or local files. Accepted file formats are pickle, excel, json and csv.\n\nThis package is designed to work with Jupyter Notebooks as well as in the IPython command line. If used in a Notebook, the user has access to a search GUI. See the [example folder](examples) for some simple examples in Jupyter Notebooks.  \n\n# Content\n\n1. [Installation](#installation)\n2. [Usage](#basic-usage)\n3. [GUI usage](#gui-usage)\n4. [Search in context](#search-words-of-similar-context)\n5. [Visualization](#visualization)\n\n\n# Installation\n\nThe package can be installed via `pip`:\n```\n  pip install corpussearch\n```\n\nSince the package is under active development, the most recent version is always on Github, and can be installed by\n```\n  pip install git+https://github.com/computational-antiquity/corpussearch.git\n```\n\n# Basic usage\n\nImport the package\n```python\nfrom corpussearch import search as corSearch\n```\n\nThe class is instantiated by providing the path to the source file. Excepted\nformats are pickled dataframes, CSV, JSON or Excel files.\n\nStandard parameters assume pickled, multi-indexed dataframes, where the main text\nis contained in a column 'text'. For other sources change parameters accordingly.\n\n## Loading data\n\nUsing a pre-pickled dataframe:\n```python\n  search = corSearch('./path/to/dataframe/file.pickle')\n```\n\nUsing data in excel format:\n```python\n  search = corSearch(\n      pathDF='./path/to/excel/file.xlsx'\n      dataType='excel',\n      dataIndex='single'\n  )\n```\n\nLoading data in excel format from a DOI:\n```python\n  search = corSearch(\n      pathDF='10.17171/1-6-90'\n      pathType='DOI',\n      dataType='excel',\n      dataIndex='single'\n  )\n```\n\n## Search for text and/or parts\n\nA reduction to a specific part and page number is obtained by chaining the desired\nreductions `.reduce(key,value)`, where `key` can be either a level of the multi index, or a column name. To obtain the resulting dataframe, `.results()` is added.\n\n```python\n  result = search.reduce('part','part_name').reduce('page','page_number').results()\n```\n\nTo restart a search, e.g. within another part, use\n```python\n  search.resetSearch()\n```\n\nAdditional search logic can be used with `.logicReduce()`. The method accepts a\nlist of reductions chained with logical AND,OR, or NOT. For example,\n```python\n  search.logicReduce([('part','Part1'),&,('page','10'),|,('text','TEST')]).result()\n```\nwill return the entries of a dataframe where part is Part1 and page number is 10, or the text string contains TEST.\n\n# GUI usage\n\nImport the GUI part of the package into a Jupyter Notebook\n```python\nfrom corpussearch import gui as CorpusGUI\n```\n\nInstantiate with path to source file, as above.\n```python\n  gui = CorpusGUI('./path/to/dataframe/file.pickle')\n```\nand display the interface\n```python\n  gui.displayGUI()\n```\n\nA basic word search returns all results where the search word is contained in the main column, e.g. 'text'. Search values can contain regular expressions, e.g. `\\d{2,4}\\s[A-Z]`.\nFor search in parts other then the main column, fuzzy searches are possible if the number of unique values on that level is less than `maxValues`. This routine uses `difflib` to compare the search string to possible values on that level. This can help if the actual string formating is not well known, but could possibly lead to undesired results.\n\nResults are displayed in the sentence output boxes, where the right box contains meta-information derived from the non-main columns or multi-index levels.\n\nTo navigate between results use the slider.\n\n## Additional search logic\n\nTo chain search terms, use the 'more'-button. This opens additional search fields.\nPossible logic operations are 'AND', 'OR', and 'NOT'. Each logic operation is between\ntwo consecutive search pairs (part,value). The logic operates in a linear fashion, from the first triple downwards, e.g. for the search ``(('text','NAME') & ('part','PART1') | ('page','PAGE4'))`` each tuple (key,value) yields a boolean vector v, such that the search becomes `(v1 & v2 | v3)`. Evaluation continues for the pair `v<sub>temp</sub> = (v1 & v2)`, and finally `v<sub>res</sub>= (v<sub>temp</sub> | v3)`. The resulting boolean vector is used to reduce the full data to the dataframe containing the search result.\n\n# Search words of similar context\n\nTo find words which occur in a similar context in the corpus, a simple machine-learning module is provided. The module is based on [Gensims word2vec](https://github.com/RaRe-Technologies/gensim) and uses `difflib` for words\nwhich are not part of the training dictionary.\n\nImport the machine-learning module using\n```python\nfrom corpussearch import ml as corML\n```\n\nInstantiate with path to source file, as above. Additionally, you need to provide the language of the corpus, to remove stop-words and normalize the text (currently Greek, Latin, English and German are supported).\n\nThe model parameters for Gensims word2vec are a tuple (a,b,c) with the following functionality:\n\n| par | used for |\n|:---|:---:|\n| a | number of workers |\n| b | minimal occurrence of a word |\n| c | feature size |\n\n\nOptionally, you can enable the display of logging messages by `showLogging = True`.\n```python\nml = corML(\n        './path/to/dataframe/file.pickle',\n        language='german',\n        showLogging=True,\n        model_params=(4,1,5)\n        )\n```\n\nTo train the model use\n```python\nml.trainModel()\n```\n\nThis automatically performs all necessary steps: It cleans the text column, creates a training_data column, and builds the vocabulary for the model.\n\nTo find words of similiar context just enter any word\n```python\nml.getSimilarContext('searchterm')\n```\nIf the search term is not contained in the dictionary, `difflib` tries to find a similar word, and performs the search for this word. The result is a list of words with their respective similarity weight.\n\n# Visualization\n\n**Attention:** *work in progress*\n\nTo visualize results of a search in Jupyter Notebooks you can use the `visualize` module.\n```python\nfrom corpussearch import vis as corVis\n```\nIt is initialized with any result dataframe of a search and a label, which describes the search in the corpus.\n```python\nvis = corVis(\n        result_dataframe\n        'description of search'\n        )\n```\n\nA GUI allows to select which column of the dataframe to use for plotting. If, for example, dates are provided with the corpus, one could plot a distribution of publications per year.\n\nIf the number of unique values for a column is of the order of the size of the dataframe, a warning is printed and no plotting occurs.\n\nAdditionally, the user can select the option `lambda function` to enter a custom function to operate on a column, which is then used for plotting. The format to enter is a tuple `(a,b)` with `a:` the column name to operate on, and `b:` the function (as a function of row) to apply to the column. Formating of the function depends on the column values, e.g. `row[:4]` for the first four characters of a string, or `row < 10` for integer comparison. The resulting new column can be checked by\n```python\nvis.resultDF.lambda_func\n```\nIf the lambda function fails to create a new column, a warning is printed and a new column with `None` values is returned.\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/computational-antiquity/corpussearch/", "keywords": "", "license": "GPLv3", "maintainer": "", "maintainer_email": "", "name": "corpussearch", "package_url": "https://pypi.org/project/corpussearch/", "platform": "", "project_url": "https://pypi.org/project/corpussearch/", "project_urls": {"Download": "https://github.com/computational-antiquity/corpussearch/archive/0.0.16.tar.gz", "Home": "https://github.com/computational-antiquity/corpussearch/", "Homepage": "https://github.com/computational-antiquity/corpussearch/", "Tracker": "https://github.com/computational-antiquity/corpussearch/issues"}, "release_url": "https://pypi.org/project/corpussearch/0.0.16/", "requires_dist": ["pandas", "numpy", "xlrd", "citableclass", "ipywidgets", "Ipython", "gensim", "cltk"], "requires_python": ">=3", "summary": "Tools for loading and analyzing large text corpora.", "version": "0.0.16", "yanked": false, "html_description": "<div class=\"project-description\">\n            # CorpusSearch<br><br>A tool to load and search in text corpora.<br><br>The tool provides routines to search in large corpora in pandas dataframe format, where rows contain textual information on the level of sentences or paragraphs.<br>Dataframes can be single or multilevel indexed and loaded from URL, DOI, [citable](http://www.edition-topoi.org/publishing_with_us/citable) or local files. Accepted file formats are pickle, excel, json and csv.<br><br>This package is designed to work with Jupyter Notebooks as well as in the IPython command line. If used in a Notebook, the user has access to a search GUI. See the [example folder](examples) for some simple examples in Jupyter Notebooks.  <br><br># Content<br><br>1. [Installation](#installation)<br>2. [Usage](#basic-usage)<br>3. [GUI usage](#gui-usage)<br>4. [Search in context](#search-words-of-similar-context)<br>5. [Visualization](#visualization)<br><br><br># Installation<br><br>The package can be installed via `pip`:<br>```<br>  pip install corpussearch<br>```<br><br>Since the package is under active development, the most recent version is always on Github, and can be installed by<br>```<br>  pip install git+https://github.com/computational-antiquity/corpussearch.git<br>```<br><br># Basic usage<br><br>Import the package<br>```python<br>from corpussearch import search as corSearch<br>```<br><br>The class is instantiated by providing the path to the source file. Excepted<br>formats are pickled dataframes, CSV, JSON or Excel files.<br><br>Standard parameters assume pickled, multi-indexed dataframes, where the main text<br>is contained in a column 'text'. For other sources change parameters accordingly.<br><br>## Loading data<br><br>Using a pre-pickled dataframe:<br>```python<br>  search = corSearch('./path/to/dataframe/file.pickle')<br>```<br><br>Using data in excel format:<br>```python<br>  search = corSearch(<br>      pathDF='./path/to/excel/file.xlsx'<br>      dataType='excel',<br>      dataIndex='single'<br>  )<br>```<br><br>Loading data in excel format from a DOI:<br>```python<br>  search = corSearch(<br>      pathDF='10.17171/1-6-90'<br>      pathType='DOI',<br>      dataType='excel',<br>      dataIndex='single'<br>  )<br>```<br><br>## Search for text and/or parts<br><br>A reduction to a specific part and page number is obtained by chaining the desired<br>reductions `.reduce(key,value)`, where `key` can be either a level of the multi index, or a column name. To obtain the resulting dataframe, `.results()` is added.<br><br>```python<br>  result = search.reduce('part','part_name').reduce('page','page_number').results()<br>```<br><br>To restart a search, e.g. within another part, use<br>```python<br>  search.resetSearch()<br>```<br><br>Additional search logic can be used with `.logicReduce()`. The method accepts a<br>list of reductions chained with logical AND,OR, or NOT. For example,<br>```python<br>  search.logicReduce([('part','Part1'),&amp;,('page','10'),|,('text','TEST')]).result()<br>```<br>will return the entries of a dataframe where part is Part1 and page number is 10, or the text string contains TEST.<br><br># GUI usage<br><br>Import the GUI part of the package into a Jupyter Notebook<br>```python<br>from corpussearch import gui as CorpusGUI<br>```<br><br>Instantiate with path to source file, as above.<br>```python<br>  gui = CorpusGUI('./path/to/dataframe/file.pickle')<br>```<br>and display the interface<br>```python<br>  gui.displayGUI()<br>```<br><br>A basic word search returns all results where the search word is contained in the main column, e.g. 'text'. Search values can contain regular expressions, e.g. `\\d{2,4}\\s[A-Z]`.<br>For search in parts other then the main column, fuzzy searches are possible if the number of unique values on that level is less than `maxValues`. This routine uses `difflib` to compare the search string to possible values on that level. This can help if the actual string formating is not well known, but could possibly lead to undesired results.<br><br>Results are displayed in the sentence output boxes, where the right box contains meta-information derived from the non-main columns or multi-index levels.<br><br>To navigate between results use the slider.<br><br>## Additional search logic<br><br>To chain search terms, use the 'more'-button. This opens additional search fields.<br>Possible logic operations are 'AND', 'OR', and 'NOT'. Each logic operation is between<br>two consecutive search pairs (part,value). The logic operates in a linear fashion, from the first triple downwards, e.g. for the search ``(('text','NAME') &amp; ('part','PART1') | ('page','PAGE4'))`` each tuple (key,value) yields a boolean vector v, such that the search becomes `(v1 &amp; v2 | v3)`. Evaluation continues for the pair `v&lt;sub&gt;temp&lt;/sub&gt; = (v1 &amp; v2)`, and finally `v&lt;sub&gt;res&lt;/sub&gt;= (v&lt;sub&gt;temp&lt;/sub&gt; | v3)`. The resulting boolean vector is used to reduce the full data to the dataframe containing the search result.<br><br># Search words of similar context<br><br>To find words which occur in a similar context in the corpus, a simple machine-learning module is provided. The module is based on [Gensims word2vec](https://github.com/RaRe-Technologies/gensim) and uses `difflib` for words<br>which are not part of the training dictionary.<br><br>Import the machine-learning module using<br>```python<br>from corpussearch import ml as corML<br>```<br><br>Instantiate with path to source file, as above. Additionally, you need to provide the language of the corpus, to remove stop-words and normalize the text (currently Greek, Latin, English and German are supported).<br><br>The model parameters for Gensims word2vec are a tuple (a,b,c) with the following functionality:<br><br>| par | used for |<br>|:---|:---:|<br>| a | number of workers |<br>| b | minimal occurrence of a word |<br>| c | feature size |<br><br><br>Optionally, you can enable the display of logging messages by `showLogging = True`.<br>```python<br>ml = corML(<br>        './path/to/dataframe/file.pickle',<br>        language='german',<br>        showLogging=True,<br>        model_params=(4,1,5)<br>        )<br>```<br><br>To train the model use<br>```python<br>ml.trainModel()<br>```<br><br>This automatically performs all necessary steps: It cleans the text column, creates a training_data column, and builds the vocabulary for the model.<br><br>To find words of similiar context just enter any word<br>```python<br>ml.getSimilarContext('searchterm')<br>```<br>If the search term is not contained in the dictionary, `difflib` tries to find a similar word, and performs the search for this word. The result is a list of words with their respective similarity weight.<br><br># Visualization<br><br>**Attention:** *work in progress*<br><br>To visualize results of a search in Jupyter Notebooks you can use the `visualize` module.<br>```python<br>from corpussearch import vis as corVis<br>```<br>It is initialized with any result dataframe of a search and a label, which describes the search in the corpus.<br>```python<br>vis = corVis(<br>        result_dataframe<br>        'description of search'<br>        )<br>```<br><br>A GUI allows to select which column of the dataframe to use for plotting. If, for example, dates are provided with the corpus, one could plot a distribution of publications per year.<br><br>If the number of unique values for a column is of the order of the size of the dataframe, a warning is printed and no plotting occurs.<br><br>Additionally, the user can select the option `lambda function` to enter a custom function to operate on a column, which is then used for plotting. The format to enter is a tuple `(a,b)` with `a:` the column name to operate on, and `b:` the function (as a function of row) to apply to the column. Formating of the function depends on the column values, e.g. `row[:4]` for the first four characters of a string, or `row &lt; 10` for integer comparison. The resulting new column can be checked by<br>```python<br>vis.resultDF.lambda_func<br>```<br>If the lambda function fails to create a new column, a warning is printed and a new column with `None` values is returned.<br><br><br>\n          </div>"}, "last_serial": 4572034, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "418392409f88d394c188476e97acb54b", "sha256": "4182e57a8b2d8c9307272675ee881d4f0427fca57352564e5bed6cbddff4ba4c"}, "downloads": -1, "filename": "corpussearch-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "418392409f88d394c188476e97acb54b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 4803, "upload_time": "2018-03-07T10:28:07", "upload_time_iso_8601": "2018-03-07T10:28:07.440926Z", "url": "https://files.pythonhosted.org/packages/d7/b1/30d1c8453db1d5b2dfb51b023a85dfadb647227863588de73bf7bd5c4965/corpussearch-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d029e1df4f76b216b642a6a7d95c9abf", "sha256": "4519abafdfc7ba967611e3e559d11ea7dd195744aaab6ba63320d9a105a73ccf"}, "downloads": -1, "filename": "corpussearch-0.0.1.tar.gz", "has_sig": false, "md5_digest": "d029e1df4f76b216b642a6a7d95c9abf", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 3530, "upload_time": "2018-03-07T10:28:08", "upload_time_iso_8601": "2018-03-07T10:28:08.402216Z", "url": "https://files.pythonhosted.org/packages/ff/75/bd425c3a936b8f3200927b3f572d8c60a1834d9fd0de6f27adf31d1b4892/corpussearch-0.0.1.tar.gz", "yanked": false}], "0.0.10": [{"comment_text": "", "digests": {"md5": "164ef868c2b7f50baa901df5a8eca66c", "sha256": "b88c071719bcf9186539866652589cc6c5b11dbb5f274549d09b36124a3cdee4"}, "downloads": -1, "filename": "corpussearch-0.0.10-py3-none-any.whl", "has_sig": false, "md5_digest": "164ef868c2b7f50baa901df5a8eca66c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 13763, "upload_time": "2018-03-15T14:59:56", "upload_time_iso_8601": "2018-03-15T14:59:56.957635Z", "url": "https://files.pythonhosted.org/packages/05/da/674d424e52266bf30b85de7d5109a1a40f643ae87bbc0c6d24a1fb87aed5/corpussearch-0.0.10-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "21496b67b46bde8518a33c8b12400c18", "sha256": "562559758bd1fe84c80e3e5bbcf6e32b9bd0825592fc3ef21eafe0ee29dbc1df"}, "downloads": -1, "filename": "corpussearch-0.0.10.tar.gz", "has_sig": false, "md5_digest": "21496b67b46bde8518a33c8b12400c18", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 24077, "upload_time": "2018-03-15T14:59:58", "upload_time_iso_8601": "2018-03-15T14:59:58.917308Z", "url": "https://files.pythonhosted.org/packages/86/15/422ed36c7faf4ea9a1b8a812265c6c8fbb9056cbe679091efd7ed24cb980/corpussearch-0.0.10.tar.gz", "yanked": false}], "0.0.11": [{"comment_text": "", "digests": {"md5": "e0ad0eef8da55eb08342fb756ae96d12", "sha256": "ec695c029e0a3400f947b25f4e9fd424acade3ca69b59096d293c6e7dd0c3c26"}, "downloads": -1, "filename": "corpussearch-0.0.11-py3-none-any.whl", "has_sig": false, "md5_digest": "e0ad0eef8da55eb08342fb756ae96d12", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 15161, "upload_time": "2018-03-21T12:27:01", "upload_time_iso_8601": "2018-03-21T12:27:01.278775Z", "url": "https://files.pythonhosted.org/packages/d5/ce/73e06c5f55296a3053ceff6c7f9627c1ae7f55174391e50e30cde1d55175/corpussearch-0.0.11-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cca43833ab5bc3cb3026d28c39f1f18e", "sha256": "7e35d6937e5349dc5519b0c22f1bf9ed1c1a0c2f079e0928d61d1f85ba87d5a7"}, "downloads": -1, "filename": "corpussearch-0.0.11.tar.gz", "has_sig": false, "md5_digest": "cca43833ab5bc3cb3026d28c39f1f18e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 25097, "upload_time": "2018-03-21T12:27:03", "upload_time_iso_8601": "2018-03-21T12:27:03.162108Z", "url": "https://files.pythonhosted.org/packages/68/0a/4462e3806223d60001c909bece28c186b9a00737bbd1984376d14ee61906/corpussearch-0.0.11.tar.gz", "yanked": false}], "0.0.12": [{"comment_text": "", "digests": {"md5": "bd898d67d0a9471632ed24ddfa74063e", "sha256": "9e7752753aaec676bbad526fa06ca9ca0b910e8d3051af094c6c82a9f244c483"}, "downloads": -1, "filename": "corpussearch-0.0.12-py3-none-any.whl", "has_sig": false, "md5_digest": "bd898d67d0a9471632ed24ddfa74063e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 16707, "upload_time": "2018-03-26T09:33:23", "upload_time_iso_8601": "2018-03-26T09:33:23.122371Z", "url": "https://files.pythonhosted.org/packages/1d/39/c12df98532fed3d1e9e5a3841d0297e1645890071760f586473389d6c8fb/corpussearch-0.0.12-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1a088330a11aa174d32d36751a6e8473", "sha256": "45a1ccc57781d8f37dede12546d6387a7715fc59e04cdc53182ba04af4a3cf3f"}, "downloads": -1, "filename": "corpussearch-0.0.12.tar.gz", "has_sig": false, "md5_digest": "1a088330a11aa174d32d36751a6e8473", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 25968, "upload_time": "2018-03-26T09:33:24", "upload_time_iso_8601": "2018-03-26T09:33:24.277256Z", "url": "https://files.pythonhosted.org/packages/e9/b8/177c455b3f436ab0c6f685cacf871c19d2ee6b3ceb419562d26026a90a50/corpussearch-0.0.12.tar.gz", "yanked": false}], "0.0.13": [{"comment_text": "", "digests": {"md5": "f6932812ad5094eb0eb40fe370855b37", "sha256": "35fd83b398f04e3bb9b84073e7ede1a1174d7c4dae2e4eb12a47b8ad30e0b351"}, "downloads": -1, "filename": "corpussearch-0.0.13-py3-none-any.whl", "has_sig": false, "md5_digest": "f6932812ad5094eb0eb40fe370855b37", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 17229, "upload_time": "2018-03-28T15:24:32", "upload_time_iso_8601": "2018-03-28T15:24:32.561019Z", "url": "https://files.pythonhosted.org/packages/1f/78/ca22d0c68d34948eea84c467fb1b072745523a2b9777340462884844b6d4/corpussearch-0.0.13-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1a7120cb0ff86820a812caf552364bd4", "sha256": "774413b30d978938a43b7247e4f0f68bf78e1e2f2d79352d34757e589d18eed9"}, "downloads": -1, "filename": "corpussearch-0.0.13.tar.gz", "has_sig": false, "md5_digest": "1a7120cb0ff86820a812caf552364bd4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 26271, "upload_time": "2018-03-28T15:24:34", "upload_time_iso_8601": "2018-03-28T15:24:34.026425Z", "url": "https://files.pythonhosted.org/packages/3f/62/5ba546e727c3cb2133141f4ab414426453d2f4007c010dff87d0b4ae26b3/corpussearch-0.0.13.tar.gz", "yanked": false}], "0.0.14": [{"comment_text": "", "digests": {"md5": "8cad58ffa44c587ccb8a080737988590", "sha256": "b9c3e26ad21af597d062c0ccc2bbff91f5250b2a0b8998c7c4836cd2d77df8ca"}, "downloads": -1, "filename": "corpussearch-0.0.14-py3-none-any.whl", "has_sig": false, "md5_digest": "8cad58ffa44c587ccb8a080737988590", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 20888, "upload_time": "2018-10-29T14:18:45", "upload_time_iso_8601": "2018-10-29T14:18:45.810600Z", "url": "https://files.pythonhosted.org/packages/e7/f3/da80f5b318d8f27fa409b2c1ce5b841f0a00c40c1ddce4dd20fced7c0df9/corpussearch-0.0.14-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b1827971e5144defb0ad2a5bb4ddb462", "sha256": "7f136739c95647fad738153eb0700dfb87c8d8a603183e5268f2a06a659a22ab"}, "downloads": -1, "filename": "corpussearch-0.0.14.tar.gz", "has_sig": false, "md5_digest": "b1827971e5144defb0ad2a5bb4ddb462", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 30213, "upload_time": "2018-10-29T14:18:47", "upload_time_iso_8601": "2018-10-29T14:18:47.572304Z", "url": "https://files.pythonhosted.org/packages/29/e1/b04c79eca055493590a1871fb93af737f2a67c3594d9ab116551f403c68d/corpussearch-0.0.14.tar.gz", "yanked": false}], "0.0.15": [{"comment_text": "", "digests": {"md5": "4fbeb90950de98ff0eec66c7a416b7fc", "sha256": "c1acf325c776261f6e9d38478904845476239072036d43d69e72a7891a978514"}, "downloads": -1, "filename": "corpussearch-0.0.15-py3-none-any.whl", "has_sig": false, "md5_digest": "4fbeb90950de98ff0eec66c7a416b7fc", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 21333, "upload_time": "2018-11-15T09:35:09", "upload_time_iso_8601": "2018-11-15T09:35:09.104866Z", "url": "https://files.pythonhosted.org/packages/2e/7e/80c2768aec0691da6243ff7797c1915e527f89c19019577c12f6d3019205/corpussearch-0.0.15-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "87b0adffc7cebbb78f2514f0d925377b", "sha256": "e1fff6743c255c1e3ac27fac1fcd438498fe1401c707c2ffdce89d7b1c05519b"}, "downloads": -1, "filename": "corpussearch-0.0.15.tar.gz", "has_sig": false, "md5_digest": "87b0adffc7cebbb78f2514f0d925377b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 30637, "upload_time": "2018-11-15T09:35:11", "upload_time_iso_8601": "2018-11-15T09:35:11.446548Z", "url": "https://files.pythonhosted.org/packages/32/ea/14471e81f7edd896cebd71fe418efbd777ae1d9556a8e4aaa8bf76f2df4c/corpussearch-0.0.15.tar.gz", "yanked": false}], "0.0.16": [{"comment_text": "", "digests": {"md5": "bd3911ddcb8053c5a8702c994ebf84b1", "sha256": "6b94e9476bf7e35e17a237e7c009ad6e171982c6faf75c469219788971458466"}, "downloads": -1, "filename": "corpussearch-0.0.16-py3-none-any.whl", "has_sig": false, "md5_digest": "bd3911ddcb8053c5a8702c994ebf84b1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 21449, "upload_time": "2018-12-07T13:53:10", "upload_time_iso_8601": "2018-12-07T13:53:10.808682Z", "url": "https://files.pythonhosted.org/packages/f9/28/8bb0267581635643b6ba1e2b3a735f74b0b51b7a965917f384346e476c90/corpussearch-0.0.16-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9f09cc5f9a924bbd8027040ee662fe80", "sha256": "e5623749c11844abaffb01d8b5ba32f1562bcc08f2fdc77a08ab9191b466e762"}, "downloads": -1, "filename": "corpussearch-0.0.16.tar.gz", "has_sig": false, "md5_digest": "9f09cc5f9a924bbd8027040ee662fe80", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 30734, "upload_time": "2018-12-07T13:53:12", "upload_time_iso_8601": "2018-12-07T13:53:12.642653Z", "url": "https://files.pythonhosted.org/packages/eb/7f/1db64af6005a9fc9e5f22146f47855d0bf5f106e6a110790bc0cec6b470a/corpussearch-0.0.16.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "e961b734539db94dbd29e1f0c4a4089b", "sha256": "2fe12cb92053a14df844ad221986b1933a78902e59950b5555fee2ee4e5801f5"}, "downloads": -1, "filename": "corpussearch-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "e961b734539db94dbd29e1f0c4a4089b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 4787, "upload_time": "2018-03-07T11:19:47", "upload_time_iso_8601": "2018-03-07T11:19:47.315044Z", "url": "https://files.pythonhosted.org/packages/2b/77/cd250d69cfc95eaefd3676f036a062acbfd25bad1bb683cff4b629800c6e/corpussearch-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "94a6ed78eca8c4418afa90f5363f95ad", "sha256": "bbb8c6de2734ca28286c25321a9793c4cd7948e2029cbb6bdad3dbb5ebaa91b9"}, "downloads": -1, "filename": "corpussearch-0.0.2.tar.gz", "has_sig": false, "md5_digest": "94a6ed78eca8c4418afa90f5363f95ad", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 3528, "upload_time": "2018-03-07T11:19:48", "upload_time_iso_8601": "2018-03-07T11:19:48.241665Z", "url": "https://files.pythonhosted.org/packages/77/74/d0c3dc83e8a5d6ad8a5157aa59670ec4e0b3d44a0e47b5a1300121bacb1a/corpussearch-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "9bbfaa99d56c6ddedd7ef1949d2b97e4", "sha256": "9c163c5164a4315a14dc67f641c956c89cae1286beff19e8411399ceaebd195e"}, "downloads": -1, "filename": "corpussearch-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "9bbfaa99d56c6ddedd7ef1949d2b97e4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 4746, "upload_time": "2018-03-07T14:06:01", "upload_time_iso_8601": "2018-03-07T14:06:01.144234Z", "url": "https://files.pythonhosted.org/packages/b7/4e/b752352b7a836dd5938de00700d52bcad164604c96dcf183459bc5a8d712/corpussearch-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "eb5d13b8f6088e69785241f0246c530b", "sha256": "dcd9a3703d6a09b5519ac1701562edab2a2771b2e9f4edc21ec477716286c31d"}, "downloads": -1, "filename": "corpussearch-0.0.3.tar.gz", "has_sig": false, "md5_digest": "eb5d13b8f6088e69785241f0246c530b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 3509, "upload_time": "2018-03-07T14:06:03", "upload_time_iso_8601": "2018-03-07T14:06:03.019611Z", "url": "https://files.pythonhosted.org/packages/3f/25/17c1d1279bf2bb9f2bf947bd7185405d432c3ef3e0165df9bbb9da88c259/corpussearch-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "db815271025e14d3e60191897b2c3d78", "sha256": "3491db5670f790c754b67ca4151d1137d56c5fefad851a5ffb86f3090e301ffd"}, "downloads": -1, "filename": "corpussearch-0.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "db815271025e14d3e60191897b2c3d78", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 30317, "upload_time": "2018-03-08T13:48:12", "upload_time_iso_8601": "2018-03-08T13:48:12.799197Z", "url": "https://files.pythonhosted.org/packages/35/f3/559b3b9a61d9b5e4b024209f368df620b412336fd7bd74a3fb036c4562d1/corpussearch-0.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2bdd93c2fc17fdcdb9b3a7981b942743", "sha256": "4083325365b01f02ef75fe712a9529f2c8041382985aaf23aaa8df7ce141e469"}, "downloads": -1, "filename": "corpussearch-0.0.4.tar.gz", "has_sig": false, "md5_digest": "2bdd93c2fc17fdcdb9b3a7981b942743", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 39812, "upload_time": "2018-03-08T13:48:14", "upload_time_iso_8601": "2018-03-08T13:48:14.165307Z", "url": "https://files.pythonhosted.org/packages/02/a5/35a41f3851f4bb6c8879a96748abe3305de417b5f03330cd8f24814df9d2/corpussearch-0.0.4.tar.gz", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "3364ffea0400f895a935cf67d19e9fe9", "sha256": "c9eac414ed6d34125e5619f78723396bfb3435f05c2a7debc04f337dc1976af3"}, "downloads": -1, "filename": "corpussearch-0.0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "3364ffea0400f895a935cf67d19e9fe9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 6070, "upload_time": "2018-03-08T13:58:28", "upload_time_iso_8601": "2018-03-08T13:58:28.216601Z", "url": "https://files.pythonhosted.org/packages/dd/a2/f6ddf042dda49cb6b8749effeadc2b68bec18fa05035ececf1c208956db3/corpussearch-0.0.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5a7496540353224d9ecf36fd7bd495b8", "sha256": "53a2f82a20de542507fb791c236a6bd2dd4db39673a724ce82d0b3acfd282615"}, "downloads": -1, "filename": "corpussearch-0.0.5.tar.gz", "has_sig": false, "md5_digest": "5a7496540353224d9ecf36fd7bd495b8", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 17052, "upload_time": "2018-03-08T13:58:29", "upload_time_iso_8601": "2018-03-08T13:58:29.460447Z", "url": "https://files.pythonhosted.org/packages/33/2f/b940efd56a53928e01cf9f4ccca9d1c0ce52146ff26fe1a8d68528491e79/corpussearch-0.0.5.tar.gz", "yanked": false}], "0.0.6": [{"comment_text": "", "digests": {"md5": "432afaaee722018f552a4ac7d7b537ab", "sha256": "9e267043bb83343b523c1c278d69cbe0242d470bc40a5d2471a77b7c60a9b937"}, "downloads": -1, "filename": "corpussearch-0.0.6-py2-none-any.whl", "has_sig": false, "md5_digest": "432afaaee722018f552a4ac7d7b537ab", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": ">=3", "size": 11038, "upload_time": "2018-03-15T10:32:38", "upload_time_iso_8601": "2018-03-15T10:32:38.772866Z", "url": "https://files.pythonhosted.org/packages/82/4c/b85c0e2d8fa18fe693613314b6bd1f457efb226534f959f949c3322258d3/corpussearch-0.0.6-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6637cc3758d096a06694864da9b2e08a", "sha256": "8609d023e8ee71b639f24c713d728cb61ebed2d5b81f498687d53222b67ed7e2"}, "downloads": -1, "filename": "corpussearch-0.0.6-py3-none-any.whl", "has_sig": false, "md5_digest": "6637cc3758d096a06694864da9b2e08a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 11147, "upload_time": "2018-03-15T10:32:40", "upload_time_iso_8601": "2018-03-15T10:32:40.279625Z", "url": "https://files.pythonhosted.org/packages/33/5e/175d6c147d37f1084814a27738d013fc315680ac297e6643ae09fe892ece/corpussearch-0.0.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "98bc082d93e6cc9b4d994f8ebfd74608", "sha256": "d0d0386683220a5ff7d6bb0d4d08c8aa5517ed6540fac1114d998b286fea2b8b"}, "downloads": -1, "filename": "corpussearch-0.0.6.tar.gz", "has_sig": false, "md5_digest": "98bc082d93e6cc9b4d994f8ebfd74608", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 21584, "upload_time": "2018-03-15T10:32:42", "upload_time_iso_8601": "2018-03-15T10:32:42.537439Z", "url": "https://files.pythonhosted.org/packages/b9/4f/3ac706844531a559297bd0244fa4fa24cdc639426d1fad0abb926eea70eb/corpussearch-0.0.6.tar.gz", "yanked": false}], "0.0.7": [{"comment_text": "", "digests": {"md5": "7d4de8715f9d2f1c44608bd4149b45c1", "sha256": "b371b4ffd951c4e7716c2e37129a30e6aaaa6f6bf74b1928da05eee7560ea84c"}, "downloads": -1, "filename": "corpussearch-0.0.7-py3-none-any.whl", "has_sig": false, "md5_digest": "7d4de8715f9d2f1c44608bd4149b45c1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 11194, "upload_time": "2018-03-15T10:39:47", "upload_time_iso_8601": "2018-03-15T10:39:47.140506Z", "url": "https://files.pythonhosted.org/packages/37/77/bc96c32d154a0db58e2f7bc573f91c7ee8f8c41201ca3525464cac9c95ea/corpussearch-0.0.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e6fa38a9a2e4a784ab16a7a3ab6a44ad", "sha256": "6636b4a791f7d04b0e2c8b6cb8b3e320240b0a54f97747607bd322f7c2c9fae0"}, "downloads": -1, "filename": "corpussearch-0.0.7.tar.gz", "has_sig": false, "md5_digest": "e6fa38a9a2e4a784ab16a7a3ab6a44ad", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 21842, "upload_time": "2018-03-15T10:39:48", "upload_time_iso_8601": "2018-03-15T10:39:48.399091Z", "url": "https://files.pythonhosted.org/packages/c3/ad/40c37dd9c86132bb27993cd6cee4bf837ce3925f4e9282d9fe8fdb259e60/corpussearch-0.0.7.tar.gz", "yanked": false}], "0.0.8": [{"comment_text": "", "digests": {"md5": "42dce82d46f0c3e3b7dbd41b51a0d424", "sha256": "3bb4359ea562622e27ee73d861973f5ea1b75195f0ec89052437752ac4ca9885"}, "downloads": -1, "filename": "corpussearch-0.0.8-py3-none-any.whl", "has_sig": false, "md5_digest": "42dce82d46f0c3e3b7dbd41b51a0d424", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 11556, "upload_time": "2018-03-15T11:23:23", "upload_time_iso_8601": "2018-03-15T11:23:23.744870Z", "url": "https://files.pythonhosted.org/packages/3f/ef/4a00ae9e6a8a17245d104c3ee9dc3ad41a8e98b467ddab8b0da233fd5f4a/corpussearch-0.0.8-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "29dc80425a0320278baca7440f95da8f", "sha256": "4af36013afc89d1bcf11726d1b2504a8f4b4659f54b1f7eca577f1e49ef2fdf3"}, "downloads": -1, "filename": "corpussearch-0.0.8.tar.gz", "has_sig": false, "md5_digest": "29dc80425a0320278baca7440f95da8f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 22241, "upload_time": "2018-03-15T11:23:24", "upload_time_iso_8601": "2018-03-15T11:23:24.974414Z", "url": "https://files.pythonhosted.org/packages/7d/e4/90ff2e739dcc6eb46af041ab3ff9fa0bb02acea219067c1e0f148b42e1d8/corpussearch-0.0.8.tar.gz", "yanked": false}], "0.0.9": [{"comment_text": "", "digests": {"md5": "dd11934fc2a8ecba080211035cedc61c", "sha256": "7eca9bd3d5a071e17199e2d758c9c94f88f04db330d82a7a45e585c05cc002bd"}, "downloads": -1, "filename": "corpussearch-0.0.9-py3-none-any.whl", "has_sig": false, "md5_digest": "dd11934fc2a8ecba080211035cedc61c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 11562, "upload_time": "2018-03-15T12:35:51", "upload_time_iso_8601": "2018-03-15T12:35:51.417129Z", "url": "https://files.pythonhosted.org/packages/58/d4/3a568e1192123ca135157e5ba57ad3988a637c692952e1258febe21c37d8/corpussearch-0.0.9-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "143c205dc0f80f359604f23bf59475e1", "sha256": "1ef82649f187e295845fde12dafb87a3ceddd8b279ddfffd4e36989519c48285"}, "downloads": -1, "filename": "corpussearch-0.0.9.tar.gz", "has_sig": false, "md5_digest": "143c205dc0f80f359604f23bf59475e1", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 22252, "upload_time": "2018-03-15T12:35:52", "upload_time_iso_8601": "2018-03-15T12:35:52.470240Z", "url": "https://files.pythonhosted.org/packages/72/07/7f5ef299a766f08940e33ad910e540a7fd0e5d5846ecacc140c1509994ba/corpussearch-0.0.9.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "bd3911ddcb8053c5a8702c994ebf84b1", "sha256": "6b94e9476bf7e35e17a237e7c009ad6e171982c6faf75c469219788971458466"}, "downloads": -1, "filename": "corpussearch-0.0.16-py3-none-any.whl", "has_sig": false, "md5_digest": "bd3911ddcb8053c5a8702c994ebf84b1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 21449, "upload_time": "2018-12-07T13:53:10", "upload_time_iso_8601": "2018-12-07T13:53:10.808682Z", "url": "https://files.pythonhosted.org/packages/f9/28/8bb0267581635643b6ba1e2b3a735f74b0b51b7a965917f384346e476c90/corpussearch-0.0.16-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9f09cc5f9a924bbd8027040ee662fe80", "sha256": "e5623749c11844abaffb01d8b5ba32f1562bcc08f2fdc77a08ab9191b466e762"}, "downloads": -1, "filename": "corpussearch-0.0.16.tar.gz", "has_sig": false, "md5_digest": "9f09cc5f9a924bbd8027040ee662fe80", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 30734, "upload_time": "2018-12-07T13:53:12", "upload_time_iso_8601": "2018-12-07T13:53:12.642653Z", "url": "https://files.pythonhosted.org/packages/eb/7f/1db64af6005a9fc9e5f22146f47855d0bf5f106e6a110790bc0cec6b470a/corpussearch-0.0.16.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:43:06 2020"}