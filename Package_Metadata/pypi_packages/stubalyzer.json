{"info": {"author": "Kialo GmbH", "author_email": "open-source@kialo.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Software Development :: Build Tools", "Typing :: Typed"], "description": "Stubalyzer\n==========\n\n.. image:: https://readthedocs.org/projects/stubalyzer/badge/?version=latest\n    :target: https://stubalyzer.readthedocs.io/en/latest/?badge=latest\n    :alt: Documentation Status\n\n\nAn analysis\u00a0tool\u00a0to\ncompare\u00a0handwritten\u00a0mypy\u00a0stubs\u00a0to\u00a0stubgen-generated\u00a0stubs.\n\n**stubalyzer**\u00a0makes\u00a0the\u00a0process\u00a0of\u00a0crafting\u00a0types\u00a0for\u00a0untyped\u00a0dependencies\u00a0easier.\nSome example inconsistencies which are found and reported by stubalyzer\nare listed below:\n\n-  handcrafted and generated stubs have different method signatures\n-  generated stubs are missing functions/class members\n-  generated types are more specific than the handcrafted types\n\nHow to use?\n-----------\n\nInstallation\n~~~~~~~~~~~~\n\nInstall stubalyzer with the following command:\n\n.. code:: shell-session\n\n   $ pip install stubalyzer\n\nHow to run\n~~~~~~~~~~\n\nRun stubalyzer with the following command:\n\n.. code:: shell-session\n\n   $ stubalyzer -h\n   usage: stubalyzer [-h] -c CONFIG [-e EXPECTED_MISMATCHES] [-r REFERENCE_STUBS] [-x CHECKSTYLE_REPORT] [-s] [-p]\n                     STUBS_HANDWRITTEN\n\n   Analyze a set of (handcrafted) mypy stubs by comparing them to (generated)\n   reference stubs\n\n   required arguments:\n   -c CONFIG, --config CONFIG\n                           Mypy config file\n\n   positional arguments:\n     STUBS_HANDWRITTEN     Directory of handwritten stubs that need to be\n                           analyzed\n\n   optional arguments:\n     -h, --help            show this help message and exit\n     -e EXPECTED_MISMATCHES, --expected-mismatches EXPECTED_MISMATCHES\n                           A JSON file, which defines expected mismatching\n                           symbols and their match results. If any symbol is\n                           declared in an expected_mismatches JSON file,\n                           stubalyzer will count it as an expected failure, and\n                           ignore this inconsistency.\n\n                           Example contents:\n                           {\n                               \"my.module.function: \"mismatch\",\n                               \"another.module.Class: \"not_found\"\n                           }\n\n                           According to the example above, we expect the signature\n                           of my.module.function to mismatch, and module.Class to\n                           be missing in the generated stubs. stubalyzer will\n                           ignore these inconsistencies.\n     -r REFERENCE_STUBS, --reference REFERENCE_STUBS\n\n                           Directory of reference stubs to compare against. If\n                           not specified stubgen will be used to generate the\n                           reference stubs.\n     -x CHECKSTYLE_REPORT, --checkstyle-report CHECKSTYLE_REPORT\n\n                           Write an xml report in checkstyle format to the given file.\n     -s, --silent\n                           Suppress all non-error output.\n     -p, --include-private\n\n                           Include definitions stubgen would otherwise consider\n                           private, when generating the reference stubs. (e.g.\n                           names with a single leading underscore, like \"_foo\")\n\nOutput\n~~~~~~\n\nIf the comparison ends successfully with zero inconsistencies,\nstubalyzer will print a success message to stdout, alongside with an\nignore message.\n\nThe ignore message includes the number of failures ignored, which are\ndeclared as expected in the file for expected mismatches. If this file\nis not provided, the ignore message will not be printed.\n\n.. code:: shell-session\n\n   Successfully validated 68 stubs.\n\nIf there are mismatches in the given types, stubalyzer will print a list\nof all inconsistencies with a result message, alongside with an ignore\nmessage -if there is any, similar to the following:\n\n.. code:: shell-session\n\n   Symbol \"vars.any_var\" not found in generated stubs.\n\n   Types for functions.additional_args do not match:\n\n      Handwritten type: def (foo: builtins.int, bar: builtins.int) -> builtins.str\n\n      Reference type  : def (foo: builtins.int) -> builtins.str\n\n\n   Failure: 33 of 68 stubs seem not to be valid.\n\n   2 more fail(s) were ignored, because they were defined in expected mismatches.\n\nDevelopment\n-----------\n\nThe following section contains instructions on how to set up and use the\ndevelopment environment for this project.\n\nDevelopment Setup\n~~~~~~~~~~~~~~~~~\n\nRequirements for development:\n\n-  A recent Python version (we currently use 3.7)\n-  ``virtualenv`` and ``virtualenvwrapper``\n\nFor a development setup, run the following shell script:\n\n.. code:: shell-session\n\n   $ ./dev/setup.sh\n\nThis will create a virtual environment called ``stubalyzer`` and install\nthe projects dependencies. The setup script also creates a ``.venv``\nfile so the environment activates automatically if you use\nauto-activation with virtualenv.\n\nTests\n~~~~~\n\nTests are run using pytest:\n\n.. code:: shell-session\n\n   $ pytest\n\nType Checking\n~~~~~~~~~~~~~\n\nType checking is done with Mypy:\n\n.. code:: shell-session\n\n   $ mypy stubalyzer\n\nCode Formatting\n~~~~~~~~~~~~~~~\n\nTo set up the pre-commit hook to automatically format files, create the\nfollowing link:\n\n.. code:: shell-session\n\n   $ ln -sf ../../dev/pre-commit.sh .git/hooks/pre-commit\n\nThe source code is formatted using ``black`` and ``isort``. The\nfollowing will format all files in the project:\n\n.. code:: shell-session\n\n   $ ./dev/fmt.sh\n\nLinting\n~~~~~~~\n\nLinting is done using ``flake8``, in the root directory run:\n\n.. code:: shell-session\n\n   $ flake8\n\nDependency Management\n~~~~~~~~~~~~~~~~~~~~~\n\nIf you need new dependencies, add them in ``requirements.in`` and\n``setup.py``, then run the ``pip-compile`` command specified at the top\nof ``requirements.txt``.\n\nDocumentation\n~~~~~~~~~~~~~\n\nThe documentation is written using Sphinx.\n\nFirst install the requirements:\n\n.. code:: shell-session\n\n   $ pip install -r docs/requirements.txt\n\nThen build the documentation using:\n\n.. code:: shell-session\n\n   $ cd doc; make html\n\nThe output will be in ``docs/_build/html/index.html``.\n\nYou can update the API documentation using the following:\n\n.. code:: shell-session\n\n   $ ./dev/update-apidoc.sh\n\nReleases\n~~~~~~~~\n\nStubalyzer has no fixed release schedule.\nInstead releases are made when needed.\n\nTo prepare a new release, run the following and follow the instructions in the output:\n\n.. code:: shell-session\n\n   $ ./dev/release.sh <patch|minor|major>\n\n\n", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/kialo/stubalyzer", "keywords": "mypy analysis stubgen stubs", "license": "", "maintainer": "", "maintainer_email": "", "name": "stubalyzer", "package_url": "https://pypi.org/project/stubalyzer/", "platform": "", "project_url": "https://pypi.org/project/stubalyzer/", "project_urls": {"Bug Reports": "https://github.com/kialo/stubalyzer/issues", "Homepage": "https://github.com/kialo/stubalyzer", "Source": "https://github.com/kialo/stubalyzer"}, "release_url": "https://pypi.org/project/stubalyzer/0.3.0/", "requires_dist": ["mypy", "schema", "black ; extra == 'dev'", "flake8-rst-docstrings ; extra == 'dev'", "flake8 ; extra == 'dev'", "ipython ; extra == 'dev'", "isort ; extra == 'dev'", "pip-tools ; extra == 'dev'", "pytest ; extra == 'dev'"], "requires_python": ">=3.6", "summary": "Analysis tool comparing hand written stubs to stubgen-generated ones, reporting inconsistencies", "version": "0.3.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://stubalyzer.readthedocs.io/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1a01a991faf91e6e13037c5731e7d40239e2a5de/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f73747562616c797a65722f62616467652f3f76657273696f6e3d6c6174657374\"></a>\n<p>An analysis\u00a0tool\u00a0to\ncompare\u00a0handwritten\u00a0mypy\u00a0stubs\u00a0to\u00a0stubgen-generated\u00a0stubs.</p>\n<p><strong>stubalyzer</strong>\u00a0makes\u00a0the\u00a0process\u00a0of\u00a0crafting\u00a0types\u00a0for\u00a0untyped\u00a0dependencies\u00a0easier.\nSome example inconsistencies which are found and reported by stubalyzer\nare listed below:</p>\n<ul>\n<li>handcrafted and generated stubs have different method signatures</li>\n<li>generated stubs are missing functions/class members</li>\n<li>generated types are more specific than the handcrafted types</li>\n</ul>\n<div id=\"how-to-use\">\n<h2>How to use?</h2>\n<div id=\"installation\">\n<h3>Installation</h3>\n<p>Install stubalyzer with the following command:</p>\n<pre><span class=\"gp\">$</span> pip install stubalyzer\n</pre>\n</div>\n<div id=\"how-to-run\">\n<h3>How to run</h3>\n<p>Run stubalyzer with the following command:</p>\n<pre><span class=\"gp\">$</span> stubalyzer -h\n<span class=\"go\">usage: stubalyzer [-h] -c CONFIG [-e EXPECTED_MISMATCHES] [-r REFERENCE_STUBS] [-x CHECKSTYLE_REPORT] [-s] [-p]\n                  STUBS_HANDWRITTEN\n\nAnalyze a set of (handcrafted) mypy stubs by comparing them to (generated)\nreference stubs\n\nrequired arguments:\n-c CONFIG, --config CONFIG\n                        Mypy config file\n\npositional arguments:\n  STUBS_HANDWRITTEN     Directory of handwritten stubs that need to be\n                        analyzed\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -e EXPECTED_MISMATCHES, --expected-mismatches EXPECTED_MISMATCHES\n                        A JSON file, which defines expected mismatching\n                        symbols and their match results. If any symbol is\n                        declared in an expected_mismatches JSON file,\n                        stubalyzer will count it as an expected failure, and\n                        ignore this inconsistency.\n\n                        Example contents:\n                        {\n                            \"my.module.function: \"mismatch\",\n                            \"another.module.Class: \"not_found\"\n                        }\n\n                        According to the example above, we expect the signature\n                        of my.module.function to mismatch, and module.Class to\n                        be missing in the generated stubs. stubalyzer will\n                        ignore these inconsistencies.\n  -r REFERENCE_STUBS, --reference REFERENCE_STUBS\n\n                        Directory of reference stubs to compare against. If\n                        not specified stubgen will be used to generate the\n                        reference stubs.\n  -x CHECKSTYLE_REPORT, --checkstyle-report CHECKSTYLE_REPORT\n\n                        Write an xml report in checkstyle format to the given file.\n  -s, --silent\n                        Suppress all non-error output.\n  -p, --include-private\n\n                        Include definitions stubgen would otherwise consider\n                        private, when generating the reference stubs. (e.g.\n                        names with a single leading underscore, like \"_foo\")</span>\n</pre>\n</div>\n<div id=\"output\">\n<h3>Output</h3>\n<p>If the comparison ends successfully with zero inconsistencies,\nstubalyzer will print a success message to stdout, alongside with an\nignore message.</p>\n<p>The ignore message includes the number of failures ignored, which are\ndeclared as expected in the file for expected mismatches. If this file\nis not provided, the ignore message will not be printed.</p>\n<pre><span class=\"go\">Successfully validated 68 stubs.</span>\n</pre>\n<p>If there are mismatches in the given types, stubalyzer will print a list\nof all inconsistencies with a result message, alongside with an ignore\nmessage -if there is any, similar to the following:</p>\n<pre><span class=\"go\">Symbol \"vars.any_var\" not found in generated stubs.\n\nTypes for functions.additional_args do not match:\n\n   Handwritten type: def (foo: builtins.int, bar: builtins.int) -&gt; builtins.str\n\n   Reference type  : def (foo: builtins.int) -&gt; builtins.str\n\n\nFailure: 33 of 68 stubs seem not to be valid.\n\n2 more fail(s) were ignored, because they were defined in expected mismatches.</span>\n</pre>\n</div>\n</div>\n<div id=\"development\">\n<h2>Development</h2>\n<p>The following section contains instructions on how to set up and use the\ndevelopment environment for this project.</p>\n<div id=\"development-setup\">\n<h3>Development Setup</h3>\n<p>Requirements for development:</p>\n<ul>\n<li>A recent Python version (we currently use 3.7)</li>\n<li><tt>virtualenv</tt> and <tt>virtualenvwrapper</tt></li>\n</ul>\n<p>For a development setup, run the following shell script:</p>\n<pre><span class=\"gp\">$</span> ./dev/setup.sh\n</pre>\n<p>This will create a virtual environment called <tt>stubalyzer</tt> and install\nthe projects dependencies. The setup script also creates a <tt>.venv</tt>\nfile so the environment activates automatically if you use\nauto-activation with virtualenv.</p>\n</div>\n<div id=\"tests\">\n<h3>Tests</h3>\n<p>Tests are run using pytest:</p>\n<pre><span class=\"gp\">$</span> pytest\n</pre>\n</div>\n<div id=\"type-checking\">\n<h3>Type Checking</h3>\n<p>Type checking is done with Mypy:</p>\n<pre><span class=\"gp\">$</span> mypy stubalyzer\n</pre>\n</div>\n<div id=\"code-formatting\">\n<h3>Code Formatting</h3>\n<p>To set up the pre-commit hook to automatically format files, create the\nfollowing link:</p>\n<pre><span class=\"gp\">$</span> ln -sf ../../dev/pre-commit.sh .git/hooks/pre-commit\n</pre>\n<p>The source code is formatted using <tt>black</tt> and <tt>isort</tt>. The\nfollowing will format all files in the project:</p>\n<pre><span class=\"gp\">$</span> ./dev/fmt.sh\n</pre>\n</div>\n<div id=\"linting\">\n<h3>Linting</h3>\n<p>Linting is done using <tt>flake8</tt>, in the root directory run:</p>\n<pre><span class=\"gp\">$</span> flake8\n</pre>\n</div>\n<div id=\"dependency-management\">\n<h3>Dependency Management</h3>\n<p>If you need new dependencies, add them in <tt>requirements.in</tt> and\n<tt>setup.py</tt>, then run the <tt><span class=\"pre\">pip-compile</span></tt> command specified at the top\nof <tt>requirements.txt</tt>.</p>\n</div>\n<div id=\"documentation\">\n<h3>Documentation</h3>\n<p>The documentation is written using Sphinx.</p>\n<p>First install the requirements:</p>\n<pre><span class=\"gp\">$</span> pip install -r docs/requirements.txt\n</pre>\n<p>Then build the documentation using:</p>\n<pre><span class=\"gp\">$</span> <span class=\"nb\">cd</span> doc<span class=\"p\">;</span> make html\n</pre>\n<p>The output will be in <tt>docs/_build/html/index.html</tt>.</p>\n<p>You can update the API documentation using the following:</p>\n<pre><span class=\"gp\">$</span> ./dev/update-apidoc.sh\n</pre>\n</div>\n<div id=\"releases\">\n<h3>Releases</h3>\n<p>Stubalyzer has no fixed release schedule.\nInstead releases are made when needed.</p>\n<p>To prepare a new release, run the following and follow the instructions in the output:</p>\n<pre><span class=\"gp\">$</span> ./dev/release.sh &lt;patch<span class=\"p\">|</span>minor<span class=\"p\">|</span>major&gt;\n</pre>\n</div>\n</div>\n\n          </div>"}, "last_serial": 6742007, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "5c89688c5bd75223256e7eee9b8c2ee2", "sha256": "82a325871613b157fe5cbc029b6d5251bdb5b90ca96a4066edc65fff7fa009aa"}, "downloads": -1, "filename": "stubalyzer-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "5c89688c5bd75223256e7eee9b8c2ee2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 25473, "upload_time": "2019-11-07T09:28:55", "upload_time_iso_8601": "2019-11-07T09:28:55.701756Z", "url": "https://files.pythonhosted.org/packages/b0/f9/d61086014726a28240e67566acfb8815f50ffd6bc762fa47ee8b6ab23834/stubalyzer-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e882081a794bc015280b43fd9c9e4158", "sha256": "801048de13477730937a46b519f441ad41a133446ef424ad06eb42ac45383adb"}, "downloads": -1, "filename": "stubalyzer-0.1.0.tar.gz", "has_sig": false, "md5_digest": "e882081a794bc015280b43fd9c9e4158", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 22632, "upload_time": "2019-11-07T09:28:57", "upload_time_iso_8601": "2019-11-07T09:28:57.992769Z", "url": "https://files.pythonhosted.org/packages/54/68/a6e8d8d882f9aa2455661ec8840686fd517b2e9f7bbf0c933f130de81ded/stubalyzer-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "9fff9c81af2b17edef09db399623878e", "sha256": "2063cd78d50778905c1c907e42b4fee9d93284ead2cc6bd7e2c729bc8bf509ed"}, "downloads": -1, "filename": "stubalyzer-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "9fff9c81af2b17edef09db399623878e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 25469, "upload_time": "2019-11-07T09:51:26", "upload_time_iso_8601": "2019-11-07T09:51:26.178776Z", "url": "https://files.pythonhosted.org/packages/41/24/862752e3505ff4750cde48ea8cff841a73c41843ef9d511996dd7111490e/stubalyzer-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4f83f6b237e1f1e43ab373bf0d235176", "sha256": "b4951e709e6690dce26b3967de336d60d351c21f85a5724a7016ddfa8dd8be96"}, "downloads": -1, "filename": "stubalyzer-0.1.1.tar.gz", "has_sig": false, "md5_digest": "4f83f6b237e1f1e43ab373bf0d235176", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 22608, "upload_time": "2019-11-07T09:51:27", "upload_time_iso_8601": "2019-11-07T09:51:27.844448Z", "url": "https://files.pythonhosted.org/packages/6d/9f/b3fa3c731f1d905bfcda27dfec35afa5d3baf823839dae66f459179858ac/stubalyzer-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "4fb719911da8b97c503df27ce8b90d13", "sha256": "c2c51552d186d6c17790b76359c8900a0e23c3c4ce670104df050afd0509fe12"}, "downloads": -1, "filename": "stubalyzer-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "4fb719911da8b97c503df27ce8b90d13", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 26867, "upload_time": "2019-11-11T15:03:51", "upload_time_iso_8601": "2019-11-11T15:03:51.530780Z", "url": "https://files.pythonhosted.org/packages/c4/11/b898c452b731b9126a11a8b7826a8a9f9ad91f2007ee34cac7be959793d4/stubalyzer-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a0f49aed3c974a2248ca2020bbed04cb", "sha256": "697db1d6ab90dbe66ef1bce9df2cfa81c0bfea21df466d688b9054449ab144e5"}, "downloads": -1, "filename": "stubalyzer-0.1.2.tar.gz", "has_sig": false, "md5_digest": "a0f49aed3c974a2248ca2020bbed04cb", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 23903, "upload_time": "2019-11-11T15:03:53", "upload_time_iso_8601": "2019-11-11T15:03:53.478859Z", "url": "https://files.pythonhosted.org/packages/56/60/57d2bcdc9c7738cd6262da805c844d519f6ea89aca598606e1304c3ae9a3/stubalyzer-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "ffd9af14aa4474003aad12f777e171c1", "sha256": "832e00da6285ee65d4ff8b0cb165cd45774546513fa48b1833c5c859b82b45ab"}, "downloads": -1, "filename": "stubalyzer-0.1.3-py3-none-any.whl", "has_sig": false, "md5_digest": "ffd9af14aa4474003aad12f777e171c1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 26856, "upload_time": "2019-11-13T10:43:54", "upload_time_iso_8601": "2019-11-13T10:43:54.856310Z", "url": "https://files.pythonhosted.org/packages/9a/38/869395633fd45fe89031d6011a677f5c3b1186d4a554f742eb4a119422e9/stubalyzer-0.1.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8cb01d9b31320b9731cc0f9fc86eec0a", "sha256": "8d9b187bcbb5ec6913931daa59981f256df5eeb317d9b6177226cdeedf660cc4"}, "downloads": -1, "filename": "stubalyzer-0.1.3.tar.gz", "has_sig": false, "md5_digest": "8cb01d9b31320b9731cc0f9fc86eec0a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 23890, "upload_time": "2019-11-13T10:43:56", "upload_time_iso_8601": "2019-11-13T10:43:56.542779Z", "url": "https://files.pythonhosted.org/packages/0f/dd/27eb988438e285d2e0320d2583b91cb4a9d542de7a244f6d11c64e7ee7df/stubalyzer-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "98f47014fd363d07513a54944e1afd16", "sha256": "41ae219f698cdf7e6ae7becb97535103165091b365a72b3b4e7d14864370d39d"}, "downloads": -1, "filename": "stubalyzer-0.1.4-py3-none-any.whl", "has_sig": false, "md5_digest": "98f47014fd363d07513a54944e1afd16", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 26825, "upload_time": "2019-12-09T10:47:06", "upload_time_iso_8601": "2019-12-09T10:47:06.979040Z", "url": "https://files.pythonhosted.org/packages/13/cb/c5c5b76e3de9c9413d395f826bd44bb1d8809c16312f59bf50cdd6cc5a35/stubalyzer-0.1.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "48beeffc0678c59e164339b896d0f1e1", "sha256": "d6755f2521a5fceeac8d4d3664fb7dfefa9d0938ad797e991e678e82ea28a104"}, "downloads": -1, "filename": "stubalyzer-0.1.4.tar.gz", "has_sig": false, "md5_digest": "48beeffc0678c59e164339b896d0f1e1", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 23841, "upload_time": "2019-12-09T10:47:09", "upload_time_iso_8601": "2019-12-09T10:47:09.225570Z", "url": "https://files.pythonhosted.org/packages/14/1a/f75f047b5701fd102cd2a74e57e6c281091fc6c2722223fa5d5995be8e54/stubalyzer-0.1.4.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "83c3d4a2a03dd84904a1a4a8d4b1acd9", "sha256": "105e2286e5d8db65495ff4841499ba4cfd21e6675ba2b95617d1a48032abb367"}, "downloads": -1, "filename": "stubalyzer-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "83c3d4a2a03dd84904a1a4a8d4b1acd9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 27343, "upload_time": "2020-01-16T10:30:08", "upload_time_iso_8601": "2020-01-16T10:30:08.238974Z", "url": "https://files.pythonhosted.org/packages/54/67/54f0ea9fc262d8e4d9d4b1a499155154d4c8c5e746976d0de6374b9e3a68/stubalyzer-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1331c3c5c54c20dd008ff7e15b494a09", "sha256": "70e480d85e2bc5f5dafa5d7e85a3dab141286cbaaefcd3bbfa72a609476927a6"}, "downloads": -1, "filename": "stubalyzer-0.2.0.tar.gz", "has_sig": false, "md5_digest": "1331c3c5c54c20dd008ff7e15b494a09", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 24349, "upload_time": "2020-01-16T10:30:10", "upload_time_iso_8601": "2020-01-16T10:30:10.044418Z", "url": "https://files.pythonhosted.org/packages/7c/d7/0acfb8eb45ed7e057bfa012e80e5b3c5b0f3391371737c7648d2b92dcd83/stubalyzer-0.2.0.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "8a869ee9ae745df8793ae978fe0f68d9", "sha256": "1601f219d9ce59b3f20648792eb1f7b52e373f84f21987a2fa89ae8ac2bd21d6"}, "downloads": -1, "filename": "stubalyzer-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "8a869ee9ae745df8793ae978fe0f68d9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 27786, "upload_time": "2020-03-03T16:44:21", "upload_time_iso_8601": "2020-03-03T16:44:21.903296Z", "url": "https://files.pythonhosted.org/packages/54/81/d3a0eb07f3990a9eead95dd080f9f88819475cc04961b2a85d8618be9522/stubalyzer-0.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a53ac1cc8fc645a6e1ef74ce502185e2", "sha256": "dfe8358694bce2854f83ae6c607eb43fbd5ba55516d205b770dd03cb20f89a75"}, "downloads": -1, "filename": "stubalyzer-0.3.0.tar.gz", "has_sig": false, "md5_digest": "a53ac1cc8fc645a6e1ef74ce502185e2", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 25673, "upload_time": "2020-03-03T16:44:23", "upload_time_iso_8601": "2020-03-03T16:44:23.188884Z", "url": "https://files.pythonhosted.org/packages/15/64/6afafd0291a472b71d55ab3bc6d313d1ac53e58e8b51efdf206ea3aa6994/stubalyzer-0.3.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "8a869ee9ae745df8793ae978fe0f68d9", "sha256": "1601f219d9ce59b3f20648792eb1f7b52e373f84f21987a2fa89ae8ac2bd21d6"}, "downloads": -1, "filename": "stubalyzer-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "8a869ee9ae745df8793ae978fe0f68d9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 27786, "upload_time": "2020-03-03T16:44:21", "upload_time_iso_8601": "2020-03-03T16:44:21.903296Z", "url": "https://files.pythonhosted.org/packages/54/81/d3a0eb07f3990a9eead95dd080f9f88819475cc04961b2a85d8618be9522/stubalyzer-0.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a53ac1cc8fc645a6e1ef74ce502185e2", "sha256": "dfe8358694bce2854f83ae6c607eb43fbd5ba55516d205b770dd03cb20f89a75"}, "downloads": -1, "filename": "stubalyzer-0.3.0.tar.gz", "has_sig": false, "md5_digest": "a53ac1cc8fc645a6e1ef74ce502185e2", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 25673, "upload_time": "2020-03-03T16:44:23", "upload_time_iso_8601": "2020-03-03T16:44:23.188884Z", "url": "https://files.pythonhosted.org/packages/15/64/6afafd0291a472b71d55ab3bc6d313d1ac53e58e8b51efdf206ea3aa6994/stubalyzer-0.3.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:00:59 2020"}