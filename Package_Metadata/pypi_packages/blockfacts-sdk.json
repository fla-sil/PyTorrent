{"info": {"author": "BlockFacts Ltd.", "author_email": "marko@blockfacts.io", "bugtrack_url": null, "classifiers": [], "description": "![alt text](https://blockfacts.io/img/logo/bf-logo@2x.png \"BlockFacts official logo\")\n# BlockFacts Python SDK\nOfficial BlockFacts Python SDK including Rest and WebSocket API support.\n\n[![PyPI version](https://badge.fury.io/py/blockfacts-sdk.svg)](https://badge.fury.io/py/blockfacts-sdk)\n\n## Features\n\n- REST API client with a function wrapper for easy API access\n- WebSocket API client for real-time data gathering\n\n**Note**: In order to read more and get richer details regarding our REST and WebSocket APIs, please refer to our official docs: https://docs.blockfacts.io.\n\n* [Installation](#installation)\n* [Quick start](#quick-start)\n* [Using Rest API Client](#using-rest-api-client)\n* [Asset endpoints](#asset-endpoints)\n* [BlockFacts endpoints](#blockfacts-endpoints)\n* [Exchange endpoints](#exchange-endpoints)\n* [Using WebSocket API Client](#using-websocket-api-client)\n\n## Installation\n```bash\n$ pip install blockfacts-sdk\n```\n\n## Quick start\nTo start using our SDK just import the package and pass the `API-KEY` and `API-SECRET` in the constructor.\n\n```python\nfrom blockfacts import RestClient \nfrom blockfacts import WebsocketClient \n\nkey = 'your-api-key'\nsecret = 'your-api-secret'\n\nrestClient = RestClient(key, secret)\nwebsocketClient = WebsocketClient(key, secret)\n```\n\n## Using Rest API Client\nIn the examples below, you can see which method is mapped to call it's predefined endpoint. You can also read more about authorization and how to obtain an API Key here: https://docs.blockfacts.io/?python#authorization\n\n## Asset endpoints\n\n### List all assets\nGet all assets that we support.\n- [`listAllAssets()`](https://docs.blockfacts.io/?python#list-all-assets)\n\n```python\njsonResponse = restClient.assets.listAllAssets()\n```\n\n### Get specific asset\nGet specific asset by ticker ID.\n- [`getSpecificAsset(tickerId)`](https://docs.blockfacts.io/?python#specific-asset)\n\n```python\njsonResponse = restClient.assets.getSpecificAsset(\"BTC\")\n```\n\n## BlockFacts endpoints\n\n### Exchanges in normalization\nList exchanges that go into the normalization for specific asset-denominator pair.\n- [`getExchangesInNormalization(pairs)`](https://docs.blockfacts.io/?python#exchanges-in-normalization)\n\n```python\njsonResponse = restClient.blockfacts.getExchangesInNormalization([\"BTC-USD\", \"ETH-USD\"])\n\n# OR\n\njsonResponse = restClient.blockfacts.getExchangesInNormalization(\"BTC-USD, ETH-USD\")\n```\n\n### Current data\nGet current normalization data for specific asset-denominator pair.\n- [`getCurrentData(assets, denominators)`](https://docs.blockfacts.io/?python#current-data)\n\n```python\njsonResponse = restClient.blockfacts.getCurrentData([\"BTC\", \"ETH\"], [\"USD\", \"EUR\"])\n\n# OR\n\njsonResponse = restClient.blockfacts.getCurrentData(\"BTC, ETH\", \"USD, EUR\")\n```\n\n### Snapshot data\nGet last 600 BlockFacts normalized prices for provided asset-denominator pairs.\n- [`getSnapshotData(assets, denominators)`](https://docs.blockfacts.io/?python#data-snapshot)\n\n```python\njsonResponse = restClient.blockfacts.getSnapshotData([\"BTC\", \"ETH\"], [\"USD\", \"EUR\"])\n\n# OR\n\njsonResponse = restClient.blockfacts.getSnapshotData(\"BTC, ETH\", \"USD, EUR\")\n```\n\n### Historical data\nGet historical normalization data by asset-denominator, date, time and interval.\n- [`getHistoricalData(asset, denominator, date, time, interval, page)`](https://docs.blockfacts.io/?python#historical-data)\n\n```python\njsonResponse = restClient.blockfacts.getHistoricalData(\"BTC\", \"USD\", \"2.9.2019\", \"14:00:00\", 20)\n\n# OR with page parameter (optional)\n\njsonResponse = restClient.blockfacts.getHistoricalData(\"BTC\", \"USD\", \"2.9.2019\", \"14:00:00\", 20, 3)\n```\n\n### Specific historical data\nGet historical normalized price by specific point in time.\n- [`getSpecificHistoricalData(asset, denominator, date, time)`](https://docs.blockfacts.io/?python#specific-historical-data)\n\n```python\njsonResponse = restClient.blockfacts.getSpecificHistoricalData(\"BTC\", \"USD\", \"2.9.2019\", \"14:00:00\")\n```\n\n### Normalization pairs\nGet all running normalization pairs. Resulting in which asset-denominator pairs are currently being normalized inside our internal system.\n- [`getNormalizationPairs()`](https://docs.blockfacts.io/?python#normalization-pairs)\n\n```python\njsonResponse = restClient.blockfacts.getNormalizationPairs()\n```\n\n### End of day data\nGet normalized end of day data for specific asset-denominator.\n- [`getEndOfDayData(asset, denominator, length)`](https://docs.blockfacts.io/?python#end-of-day-data)\n\n```python\njsonResponse = restClient.blockfacts.getEndOfDayData(\"BTC\", \"USD\", 1)\n```\n\n## Exchange endpoints\n\n### List all exchanges\nList all exchanges that we support.\n- [`listAllExchanges()`](https://docs.blockfacts.io/?python#all-exchanges)\n\n```python\njsonResponse = restClient.exchanges.listAllExchanges()\n```\n\n### Specific exchange data\nGet information about a specific exchange by its name. Returns information such as which assets are supported, asset ticker info, etc.\n- [`getSpecificExchangeData(exchange)`](https://docs.blockfacts.io/?python#specific-exchange-data)\n\n```python\njsonResponse = restClient.exchanges.getSpecificExchangeData(\"KRAKEN\")\n```\n\n### Current trade data\nGet current trade data for specific asset-denominator pair, from specific exchange(s).\n- [`getCurrentTradeData(assets, denominators, exchanges)`](https://docs.blockfacts.io/?python#current-trade-data)\n\n```python\njsonResponse = restClient.exchanges.getCurrentTradeData([\"BTC\", \"ETH\"], [\"USD\", \"GBP\"], [\"KRAKEN\", \"COINBASE\"])\n\n# OR\n\njsonResponse = restClient.exchanges.getCurrentTradeData(\"BTC, ETH\", \"USD, GBP\", \"KRAKEN, COINBASE\")\n```\n\n### Snapshot trade data\nGet 600 latest trades that happened on the requested exchange(s) and pairs.\n- [`getSnapshotTradeData(assets, denominators, exchanges)`](https://docs.blockfacts.io/?python#snapshot-trade-data)\n\n```python\njsonResponse = restClient.exchanges.getSnapshotTradeData([\"BTC\", \"ETH\"], [\"USD\", \"GBP\"], [\"KRAKEN\", \"COINBASE\"])\n\n# OR\n\njsonResponse = restClient.exchanges.getSnapshotTradeData(\"BTC, ETH\", \"USD, GBP\", \"KRAKEN, COINBASE\")\n```\n\n### Historical trade data\nGet exchange historical price by asset-denominator, exchange, date, time and interval.\n- [`getHistoricalTradeData(asset, denominator, exchanges, date, time, interval, page)`](https://docs.blockfacts.io/?python#historical-trade-data)\n\n```python\njsonResponse = restClient.exchanges.getHistoricalTradeData(\"BTC\", \"USD\", [\"KRAKEN\", \"COINBASE\"], \"2.9.2019\", \"14:00:00\", 20)\n\n# OR with page parameter (optional)\n\njsonResponse = restClient.exchanges.getHistoricalTradeData(\"BTC\", \"USD\", \"KRAKEN, COINBASE\", \"2.9.2019\", \"14:00:00\", 20, 3)\n```\n\n### Specific trade data\nGet historical exchange trades in specific second.\n- [`getSpecificTradeData(asset, denominator, exchanges, date, time)`](https://docs.blockfacts.io/?python#specific-trade-data)\n\n```python\njsonResponse = restClient.exchanges.getSpecificTradeData(\"BTC\", \"USD\", [\"KRAKEN\", \"COINBASE\"], \"2.9.2019\", \"14:00:00\")\n\n# OR\n\njsonResponse = restClient.exchanges.getSpecificTradeData(\"BTC\", \"USD\", \"KRAKEN, COINBASE\", \"2.9.2019\", \"14:00:00\")\n```\n\n### End of day data\nGet exchange end of day data for specific asset-denominator and exchange\n- [`getEndOfDayData(asset, denominator, exchange, length)`](https://docs.blockfacts.io/?python#end-of-day-data-2)\n\n```python\njsonResponse = restClient.exchanges.getEndOfDayData(\"BTC\", \"USD\", \"KRAKEN\", 5)\n```\n\n## Using WebSocket API Client\nOur WebSocket feed provides real-time market data streams from multiple exchanges at once and the BlockFacts normalized price stream for each second. The WebSocket feed uses a bidirectional protocol, and all messages sent and received via websockets are encoded in a `JSON` format.\n\n### Getting started and connecting\nTo get started simply create a new instance of the WebsocketClient class, and create handler functions for websocket events. You can then call the `connect()` function and open a connection with the BlockFacts websocket server.\n\n```python\nfrom blockfacts import WebsocketClient\nimport json\n\nkey = 'your-api-key'\nsecret = 'your-api-secret'\n\ndef on_open():\n    print(\"BlockFacts websocket server connection open\")\n\ndef on_message(message):\n    data = json.loads(message)\n    print(data)    \n    # Handle websocket server messages\n\ndef on_close():\n    print(\"BlockFacts websocket server connection closed\")\n\ndef on_error(err):\n    print(err)\n\nwebsocketClient = WebsocketClient(key, secret)\nwebsocketClient.onOpen = on_open\nwebsocketClient.onMessage = on_message\nwebsocketClient.onClose = on_close\nwebsocketClient.onError = on_error\nwebsocketClient.connect()\n```\n\n### Subscribing\nIn order to subscribe to specific channels or asset-pairs you must send out a `subscribe` type message. The subscribe message must be sent out after the connection with the websocket has been established. You can call the `subscribe()` function right after the `connect()` function, or in the `on_open()` event handler and pass it a list of channels: \n\n```python\nwebsocketClient.connect()\nwebsocketClient.subscribe([\n    {\n        \"name\":\"BLOCKFACTS\",\n        \"pairs\": [\n            \"BTC-USD\"\n        ]\n    },\n    {\n        \"name\":\"HEARTBEAT\"\n    }\n])\n\n# OR\n\ndef on_open():\n    print(\"BlockFacts websocket server connection open\")\n    websocketClient.subscribe([\n      {\n        \"name\":\"BLOCKFACTS\",\n        \"pairs\": [\n            \"BTC-USD\"\n        ]\n      },\n      {\n        \"name\":\"HEARTBEAT\"\n      }\n    ])\n```\n\nThe `subscribe` type message supports two more optional parameters which are `id` and `snapshot`. You can pass those parameters after the listed channels dictionary in the `subscribe()` function. \n\n```python\nwebsocketClient.subscribe([\n    {\n        \"name\":\"BLOCKFACTS\",\n        \"pairs\": [\n            \"BTC-USD\"\n        ]\n    },\n    {\n        \"name\":\"HEARTBEAT\"\n    }\n], \"some-id\", True)\n```\n\nTo read more about the `snapshot` type message, please refer to our official documentation: https://docs.blockfacts.io/?python#snapshot\n\n### Unsubscribing\nIf you wish to unsubscribe from certain channels or pairs, you can do so by sending the `unsubscribe` type message.\n\n```python\nwebsocketClient.unsubscribe([\n    {\n      \"name\":\"BLOCKFACTS\",\n      \"pairs\": [\n          \"BTC-USD\",\n          \"ETH-USD\"\n      ]\n    },\n    {\n      \"name\":\"HEARTBEAT\"\n    },\n    {\n      \"name\":\"KRAKEN\"\n    }\n], 12345)\n```\n\nThe `unsubscribe` type message supports one more optional parameter which is `id`. You can pass this parameter after the listed channels dictionary in the `unsubscribe()` function. \n\n### Ping\nClients can send `ping` type messages to determine if the server is online.\n\n```python\nwebsocketClient.ping()\n```\n\nThe `ping` type message supports one optional parameter which is `id`. You can pass this parameter in the `ping()` function. \n\n### Pong\nClients must respond to `ping` type messages sent from the server with a `pong` type message.\n\n```python\ndef on_message(message):\n    data = json.loads(message)\n\n    if (data[\"type\"] == \"ping\"):\n      websocketClient.pong()\n```\n\nThe `on_message()` event handler can also be used to handle all message types from the websocket, for example:\n\n```python\ndef on_msg(message):\n    data = json.loads(message)\n\n    if data[\"type\"] == 'subscribed':\n      # Subscribed type message  \n\n    if data[\"type\"] == 'snapshot':\n      # Snapshot type message  \n\n    if data[\"type\"] == 'unsubscribed':\n      # Unsubscribed type message    \n\n    if data[\"type\"] == 'exchangeTrade':\n      # ExchangeTrade type message    \n\n    if data[\"type\"] == 'blockfactsPrice':\n      # BlockfactsPrice type message    \n\n    if data[\"type\"] == 'ping':\n      # Ping type message     \n      websocketClient.pong()   \n\n    if data[\"type\"] == 'pong':\n      # Pong type message       \n\n    if data[\"type\"] == 'status':\n      # Status type message       \n\n    if data[\"type\"] == 'heartbeat':\n      # Heartbeat type message        \n\n    if data[\"type\"] == 'error':\n      # Error type message   \n```\n\n### Disconnect\nClients can disconnect from the BlockFacts websocket by calling the `disconnect()` function. The disconnect function will work only if the connection has already been established.\n\n```python\nwebsocketClient.disconnect()\n```\n\nIn order to have a better understanding of our server responses, please refer to: https://docs.blockfacts.io/?python#server-messages\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/blockfacts-io/blockfacts-python-sdk", "keywords": "BlockFacts,BlockFacts API,Crypto API,Crypto Assets API,Unified Cryptocurrency API,BlockFacts SDK,BlockFacts Python,Blockchain API,Digital Assets API,Digital Asset API", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "blockfacts-sdk", "package_url": "https://pypi.org/project/blockfacts-sdk/", "platform": "", "project_url": "https://pypi.org/project/blockfacts-sdk/", "project_urls": {"Homepage": "https://github.com/blockfacts-io/blockfacts-python-sdk"}, "release_url": "https://pypi.org/project/blockfacts-sdk/1.0.2/", "requires_dist": ["requests", "websocket-client"], "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*, <4", "summary": "Official BlockFacts Python SDK including Rest and WebSocket API support", "version": "1.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><img alt=\"alt text\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fa756167d7d3423f4fe48ed132041b65cf3c3674/68747470733a2f2f626c6f636b66616374732e696f2f696d672f6c6f676f2f62662d6c6f676f4032782e706e67\"></p>\n<h1>BlockFacts Python SDK</h1>\n<p>Official BlockFacts Python SDK including Rest and WebSocket API support.</p>\n<p><a href=\"https://badge.fury.io/py/blockfacts-sdk\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6b8c4e5b4ca63595bc6135ea9db07fadee17804b/68747470733a2f2f62616467652e667572792e696f2f70792f626c6f636b66616374732d73646b2e737667\"></a></p>\n<h2>Features</h2>\n<ul>\n<li>REST API client with a function wrapper for easy API access</li>\n<li>WebSocket API client for real-time data gathering</li>\n</ul>\n<p><strong>Note</strong>: In order to read more and get richer details regarding our REST and WebSocket APIs, please refer to our official docs: <a href=\"https://docs.blockfacts.io\" rel=\"nofollow\">https://docs.blockfacts.io</a>.</p>\n<ul>\n<li><a href=\"#installation\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"#quick-start\" rel=\"nofollow\">Quick start</a></li>\n<li><a href=\"#using-rest-api-client\" rel=\"nofollow\">Using Rest API Client</a></li>\n<li><a href=\"#asset-endpoints\" rel=\"nofollow\">Asset endpoints</a></li>\n<li><a href=\"#blockfacts-endpoints\" rel=\"nofollow\">BlockFacts endpoints</a></li>\n<li><a href=\"#exchange-endpoints\" rel=\"nofollow\">Exchange endpoints</a></li>\n<li><a href=\"#using-websocket-api-client\" rel=\"nofollow\">Using WebSocket API Client</a></li>\n</ul>\n<h2>Installation</h2>\n<pre>$ pip install blockfacts-sdk\n</pre>\n<h2>Quick start</h2>\n<p>To start using our SDK just import the package and pass the <code>API-KEY</code> and <code>API-SECRET</code> in the constructor.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">blockfacts</span> <span class=\"kn\">import</span> <span class=\"n\">RestClient</span> \n<span class=\"kn\">from</span> <span class=\"nn\">blockfacts</span> <span class=\"kn\">import</span> <span class=\"n\">WebsocketClient</span> \n\n<span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"s1\">'your-api-key'</span>\n<span class=\"n\">secret</span> <span class=\"o\">=</span> <span class=\"s1\">'your-api-secret'</span>\n\n<span class=\"n\">restClient</span> <span class=\"o\">=</span> <span class=\"n\">RestClient</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">secret</span><span class=\"p\">)</span>\n<span class=\"n\">websocketClient</span> <span class=\"o\">=</span> <span class=\"n\">WebsocketClient</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">secret</span><span class=\"p\">)</span>\n</pre>\n<h2>Using Rest API Client</h2>\n<p>In the examples below, you can see which method is mapped to call it's predefined endpoint. You can also read more about authorization and how to obtain an API Key here: <a href=\"https://docs.blockfacts.io/?python#authorization\" rel=\"nofollow\">https://docs.blockfacts.io/?python#authorization</a></p>\n<h2>Asset endpoints</h2>\n<h3>List all assets</h3>\n<p>Get all assets that we support.</p>\n<ul>\n<li><a href=\"https://docs.blockfacts.io/?python#list-all-assets\" rel=\"nofollow\"><code>listAllAssets()</code></a></li>\n</ul>\n<pre><span class=\"n\">jsonResponse</span> <span class=\"o\">=</span> <span class=\"n\">restClient</span><span class=\"o\">.</span><span class=\"n\">assets</span><span class=\"o\">.</span><span class=\"n\">listAllAssets</span><span class=\"p\">()</span>\n</pre>\n<h3>Get specific asset</h3>\n<p>Get specific asset by ticker ID.</p>\n<ul>\n<li><a href=\"https://docs.blockfacts.io/?python#specific-asset\" rel=\"nofollow\"><code>getSpecificAsset(tickerId)</code></a></li>\n</ul>\n<pre><span class=\"n\">jsonResponse</span> <span class=\"o\">=</span> <span class=\"n\">restClient</span><span class=\"o\">.</span><span class=\"n\">assets</span><span class=\"o\">.</span><span class=\"n\">getSpecificAsset</span><span class=\"p\">(</span><span class=\"s2\">\"BTC\"</span><span class=\"p\">)</span>\n</pre>\n<h2>BlockFacts endpoints</h2>\n<h3>Exchanges in normalization</h3>\n<p>List exchanges that go into the normalization for specific asset-denominator pair.</p>\n<ul>\n<li><a href=\"https://docs.blockfacts.io/?python#exchanges-in-normalization\" rel=\"nofollow\"><code>getExchangesInNormalization(pairs)</code></a></li>\n</ul>\n<pre><span class=\"n\">jsonResponse</span> <span class=\"o\">=</span> <span class=\"n\">restClient</span><span class=\"o\">.</span><span class=\"n\">blockfacts</span><span class=\"o\">.</span><span class=\"n\">getExchangesInNormalization</span><span class=\"p\">([</span><span class=\"s2\">\"BTC-USD\"</span><span class=\"p\">,</span> <span class=\"s2\">\"ETH-USD\"</span><span class=\"p\">])</span>\n\n<span class=\"c1\"># OR</span>\n\n<span class=\"n\">jsonResponse</span> <span class=\"o\">=</span> <span class=\"n\">restClient</span><span class=\"o\">.</span><span class=\"n\">blockfacts</span><span class=\"o\">.</span><span class=\"n\">getExchangesInNormalization</span><span class=\"p\">(</span><span class=\"s2\">\"BTC-USD, ETH-USD\"</span><span class=\"p\">)</span>\n</pre>\n<h3>Current data</h3>\n<p>Get current normalization data for specific asset-denominator pair.</p>\n<ul>\n<li><a href=\"https://docs.blockfacts.io/?python#current-data\" rel=\"nofollow\"><code>getCurrentData(assets, denominators)</code></a></li>\n</ul>\n<pre><span class=\"n\">jsonResponse</span> <span class=\"o\">=</span> <span class=\"n\">restClient</span><span class=\"o\">.</span><span class=\"n\">blockfacts</span><span class=\"o\">.</span><span class=\"n\">getCurrentData</span><span class=\"p\">([</span><span class=\"s2\">\"BTC\"</span><span class=\"p\">,</span> <span class=\"s2\">\"ETH\"</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"s2\">\"USD\"</span><span class=\"p\">,</span> <span class=\"s2\">\"EUR\"</span><span class=\"p\">])</span>\n\n<span class=\"c1\"># OR</span>\n\n<span class=\"n\">jsonResponse</span> <span class=\"o\">=</span> <span class=\"n\">restClient</span><span class=\"o\">.</span><span class=\"n\">blockfacts</span><span class=\"o\">.</span><span class=\"n\">getCurrentData</span><span class=\"p\">(</span><span class=\"s2\">\"BTC, ETH\"</span><span class=\"p\">,</span> <span class=\"s2\">\"USD, EUR\"</span><span class=\"p\">)</span>\n</pre>\n<h3>Snapshot data</h3>\n<p>Get last 600 BlockFacts normalized prices for provided asset-denominator pairs.</p>\n<ul>\n<li><a href=\"https://docs.blockfacts.io/?python#data-snapshot\" rel=\"nofollow\"><code>getSnapshotData(assets, denominators)</code></a></li>\n</ul>\n<pre><span class=\"n\">jsonResponse</span> <span class=\"o\">=</span> <span class=\"n\">restClient</span><span class=\"o\">.</span><span class=\"n\">blockfacts</span><span class=\"o\">.</span><span class=\"n\">getSnapshotData</span><span class=\"p\">([</span><span class=\"s2\">\"BTC\"</span><span class=\"p\">,</span> <span class=\"s2\">\"ETH\"</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"s2\">\"USD\"</span><span class=\"p\">,</span> <span class=\"s2\">\"EUR\"</span><span class=\"p\">])</span>\n\n<span class=\"c1\"># OR</span>\n\n<span class=\"n\">jsonResponse</span> <span class=\"o\">=</span> <span class=\"n\">restClient</span><span class=\"o\">.</span><span class=\"n\">blockfacts</span><span class=\"o\">.</span><span class=\"n\">getSnapshotData</span><span class=\"p\">(</span><span class=\"s2\">\"BTC, ETH\"</span><span class=\"p\">,</span> <span class=\"s2\">\"USD, EUR\"</span><span class=\"p\">)</span>\n</pre>\n<h3>Historical data</h3>\n<p>Get historical normalization data by asset-denominator, date, time and interval.</p>\n<ul>\n<li><a href=\"https://docs.blockfacts.io/?python#historical-data\" rel=\"nofollow\"><code>getHistoricalData(asset, denominator, date, time, interval, page)</code></a></li>\n</ul>\n<pre><span class=\"n\">jsonResponse</span> <span class=\"o\">=</span> <span class=\"n\">restClient</span><span class=\"o\">.</span><span class=\"n\">blockfacts</span><span class=\"o\">.</span><span class=\"n\">getHistoricalData</span><span class=\"p\">(</span><span class=\"s2\">\"BTC\"</span><span class=\"p\">,</span> <span class=\"s2\">\"USD\"</span><span class=\"p\">,</span> <span class=\"s2\">\"2.9.2019\"</span><span class=\"p\">,</span> <span class=\"s2\">\"14:00:00\"</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># OR with page parameter (optional)</span>\n\n<span class=\"n\">jsonResponse</span> <span class=\"o\">=</span> <span class=\"n\">restClient</span><span class=\"o\">.</span><span class=\"n\">blockfacts</span><span class=\"o\">.</span><span class=\"n\">getHistoricalData</span><span class=\"p\">(</span><span class=\"s2\">\"BTC\"</span><span class=\"p\">,</span> <span class=\"s2\">\"USD\"</span><span class=\"p\">,</span> <span class=\"s2\">\"2.9.2019\"</span><span class=\"p\">,</span> <span class=\"s2\">\"14:00:00\"</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n</pre>\n<h3>Specific historical data</h3>\n<p>Get historical normalized price by specific point in time.</p>\n<ul>\n<li><a href=\"https://docs.blockfacts.io/?python#specific-historical-data\" rel=\"nofollow\"><code>getSpecificHistoricalData(asset, denominator, date, time)</code></a></li>\n</ul>\n<pre><span class=\"n\">jsonResponse</span> <span class=\"o\">=</span> <span class=\"n\">restClient</span><span class=\"o\">.</span><span class=\"n\">blockfacts</span><span class=\"o\">.</span><span class=\"n\">getSpecificHistoricalData</span><span class=\"p\">(</span><span class=\"s2\">\"BTC\"</span><span class=\"p\">,</span> <span class=\"s2\">\"USD\"</span><span class=\"p\">,</span> <span class=\"s2\">\"2.9.2019\"</span><span class=\"p\">,</span> <span class=\"s2\">\"14:00:00\"</span><span class=\"p\">)</span>\n</pre>\n<h3>Normalization pairs</h3>\n<p>Get all running normalization pairs. Resulting in which asset-denominator pairs are currently being normalized inside our internal system.</p>\n<ul>\n<li><a href=\"https://docs.blockfacts.io/?python#normalization-pairs\" rel=\"nofollow\"><code>getNormalizationPairs()</code></a></li>\n</ul>\n<pre><span class=\"n\">jsonResponse</span> <span class=\"o\">=</span> <span class=\"n\">restClient</span><span class=\"o\">.</span><span class=\"n\">blockfacts</span><span class=\"o\">.</span><span class=\"n\">getNormalizationPairs</span><span class=\"p\">()</span>\n</pre>\n<h3>End of day data</h3>\n<p>Get normalized end of day data for specific asset-denominator.</p>\n<ul>\n<li><a href=\"https://docs.blockfacts.io/?python#end-of-day-data\" rel=\"nofollow\"><code>getEndOfDayData(asset, denominator, length)</code></a></li>\n</ul>\n<pre><span class=\"n\">jsonResponse</span> <span class=\"o\">=</span> <span class=\"n\">restClient</span><span class=\"o\">.</span><span class=\"n\">blockfacts</span><span class=\"o\">.</span><span class=\"n\">getEndOfDayData</span><span class=\"p\">(</span><span class=\"s2\">\"BTC\"</span><span class=\"p\">,</span> <span class=\"s2\">\"USD\"</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n</pre>\n<h2>Exchange endpoints</h2>\n<h3>List all exchanges</h3>\n<p>List all exchanges that we support.</p>\n<ul>\n<li><a href=\"https://docs.blockfacts.io/?python#all-exchanges\" rel=\"nofollow\"><code>listAllExchanges()</code></a></li>\n</ul>\n<pre><span class=\"n\">jsonResponse</span> <span class=\"o\">=</span> <span class=\"n\">restClient</span><span class=\"o\">.</span><span class=\"n\">exchanges</span><span class=\"o\">.</span><span class=\"n\">listAllExchanges</span><span class=\"p\">()</span>\n</pre>\n<h3>Specific exchange data</h3>\n<p>Get information about a specific exchange by its name. Returns information such as which assets are supported, asset ticker info, etc.</p>\n<ul>\n<li><a href=\"https://docs.blockfacts.io/?python#specific-exchange-data\" rel=\"nofollow\"><code>getSpecificExchangeData(exchange)</code></a></li>\n</ul>\n<pre><span class=\"n\">jsonResponse</span> <span class=\"o\">=</span> <span class=\"n\">restClient</span><span class=\"o\">.</span><span class=\"n\">exchanges</span><span class=\"o\">.</span><span class=\"n\">getSpecificExchangeData</span><span class=\"p\">(</span><span class=\"s2\">\"KRAKEN\"</span><span class=\"p\">)</span>\n</pre>\n<h3>Current trade data</h3>\n<p>Get current trade data for specific asset-denominator pair, from specific exchange(s).</p>\n<ul>\n<li><a href=\"https://docs.blockfacts.io/?python#current-trade-data\" rel=\"nofollow\"><code>getCurrentTradeData(assets, denominators, exchanges)</code></a></li>\n</ul>\n<pre><span class=\"n\">jsonResponse</span> <span class=\"o\">=</span> <span class=\"n\">restClient</span><span class=\"o\">.</span><span class=\"n\">exchanges</span><span class=\"o\">.</span><span class=\"n\">getCurrentTradeData</span><span class=\"p\">([</span><span class=\"s2\">\"BTC\"</span><span class=\"p\">,</span> <span class=\"s2\">\"ETH\"</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"s2\">\"USD\"</span><span class=\"p\">,</span> <span class=\"s2\">\"GBP\"</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"s2\">\"KRAKEN\"</span><span class=\"p\">,</span> <span class=\"s2\">\"COINBASE\"</span><span class=\"p\">])</span>\n\n<span class=\"c1\"># OR</span>\n\n<span class=\"n\">jsonResponse</span> <span class=\"o\">=</span> <span class=\"n\">restClient</span><span class=\"o\">.</span><span class=\"n\">exchanges</span><span class=\"o\">.</span><span class=\"n\">getCurrentTradeData</span><span class=\"p\">(</span><span class=\"s2\">\"BTC, ETH\"</span><span class=\"p\">,</span> <span class=\"s2\">\"USD, GBP\"</span><span class=\"p\">,</span> <span class=\"s2\">\"KRAKEN, COINBASE\"</span><span class=\"p\">)</span>\n</pre>\n<h3>Snapshot trade data</h3>\n<p>Get 600 latest trades that happened on the requested exchange(s) and pairs.</p>\n<ul>\n<li><a href=\"https://docs.blockfacts.io/?python#snapshot-trade-data\" rel=\"nofollow\"><code>getSnapshotTradeData(assets, denominators, exchanges)</code></a></li>\n</ul>\n<pre><span class=\"n\">jsonResponse</span> <span class=\"o\">=</span> <span class=\"n\">restClient</span><span class=\"o\">.</span><span class=\"n\">exchanges</span><span class=\"o\">.</span><span class=\"n\">getSnapshotTradeData</span><span class=\"p\">([</span><span class=\"s2\">\"BTC\"</span><span class=\"p\">,</span> <span class=\"s2\">\"ETH\"</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"s2\">\"USD\"</span><span class=\"p\">,</span> <span class=\"s2\">\"GBP\"</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"s2\">\"KRAKEN\"</span><span class=\"p\">,</span> <span class=\"s2\">\"COINBASE\"</span><span class=\"p\">])</span>\n\n<span class=\"c1\"># OR</span>\n\n<span class=\"n\">jsonResponse</span> <span class=\"o\">=</span> <span class=\"n\">restClient</span><span class=\"o\">.</span><span class=\"n\">exchanges</span><span class=\"o\">.</span><span class=\"n\">getSnapshotTradeData</span><span class=\"p\">(</span><span class=\"s2\">\"BTC, ETH\"</span><span class=\"p\">,</span> <span class=\"s2\">\"USD, GBP\"</span><span class=\"p\">,</span> <span class=\"s2\">\"KRAKEN, COINBASE\"</span><span class=\"p\">)</span>\n</pre>\n<h3>Historical trade data</h3>\n<p>Get exchange historical price by asset-denominator, exchange, date, time and interval.</p>\n<ul>\n<li><a href=\"https://docs.blockfacts.io/?python#historical-trade-data\" rel=\"nofollow\"><code>getHistoricalTradeData(asset, denominator, exchanges, date, time, interval, page)</code></a></li>\n</ul>\n<pre><span class=\"n\">jsonResponse</span> <span class=\"o\">=</span> <span class=\"n\">restClient</span><span class=\"o\">.</span><span class=\"n\">exchanges</span><span class=\"o\">.</span><span class=\"n\">getHistoricalTradeData</span><span class=\"p\">(</span><span class=\"s2\">\"BTC\"</span><span class=\"p\">,</span> <span class=\"s2\">\"USD\"</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s2\">\"KRAKEN\"</span><span class=\"p\">,</span> <span class=\"s2\">\"COINBASE\"</span><span class=\"p\">],</span> <span class=\"s2\">\"2.9.2019\"</span><span class=\"p\">,</span> <span class=\"s2\">\"14:00:00\"</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># OR with page parameter (optional)</span>\n\n<span class=\"n\">jsonResponse</span> <span class=\"o\">=</span> <span class=\"n\">restClient</span><span class=\"o\">.</span><span class=\"n\">exchanges</span><span class=\"o\">.</span><span class=\"n\">getHistoricalTradeData</span><span class=\"p\">(</span><span class=\"s2\">\"BTC\"</span><span class=\"p\">,</span> <span class=\"s2\">\"USD\"</span><span class=\"p\">,</span> <span class=\"s2\">\"KRAKEN, COINBASE\"</span><span class=\"p\">,</span> <span class=\"s2\">\"2.9.2019\"</span><span class=\"p\">,</span> <span class=\"s2\">\"14:00:00\"</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n</pre>\n<h3>Specific trade data</h3>\n<p>Get historical exchange trades in specific second.</p>\n<ul>\n<li><a href=\"https://docs.blockfacts.io/?python#specific-trade-data\" rel=\"nofollow\"><code>getSpecificTradeData(asset, denominator, exchanges, date, time)</code></a></li>\n</ul>\n<pre><span class=\"n\">jsonResponse</span> <span class=\"o\">=</span> <span class=\"n\">restClient</span><span class=\"o\">.</span><span class=\"n\">exchanges</span><span class=\"o\">.</span><span class=\"n\">getSpecificTradeData</span><span class=\"p\">(</span><span class=\"s2\">\"BTC\"</span><span class=\"p\">,</span> <span class=\"s2\">\"USD\"</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s2\">\"KRAKEN\"</span><span class=\"p\">,</span> <span class=\"s2\">\"COINBASE\"</span><span class=\"p\">],</span> <span class=\"s2\">\"2.9.2019\"</span><span class=\"p\">,</span> <span class=\"s2\">\"14:00:00\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># OR</span>\n\n<span class=\"n\">jsonResponse</span> <span class=\"o\">=</span> <span class=\"n\">restClient</span><span class=\"o\">.</span><span class=\"n\">exchanges</span><span class=\"o\">.</span><span class=\"n\">getSpecificTradeData</span><span class=\"p\">(</span><span class=\"s2\">\"BTC\"</span><span class=\"p\">,</span> <span class=\"s2\">\"USD\"</span><span class=\"p\">,</span> <span class=\"s2\">\"KRAKEN, COINBASE\"</span><span class=\"p\">,</span> <span class=\"s2\">\"2.9.2019\"</span><span class=\"p\">,</span> <span class=\"s2\">\"14:00:00\"</span><span class=\"p\">)</span>\n</pre>\n<h3>End of day data</h3>\n<p>Get exchange end of day data for specific asset-denominator and exchange</p>\n<ul>\n<li><a href=\"https://docs.blockfacts.io/?python#end-of-day-data-2\" rel=\"nofollow\"><code>getEndOfDayData(asset, denominator, exchange, length)</code></a></li>\n</ul>\n<pre><span class=\"n\">jsonResponse</span> <span class=\"o\">=</span> <span class=\"n\">restClient</span><span class=\"o\">.</span><span class=\"n\">exchanges</span><span class=\"o\">.</span><span class=\"n\">getEndOfDayData</span><span class=\"p\">(</span><span class=\"s2\">\"BTC\"</span><span class=\"p\">,</span> <span class=\"s2\">\"USD\"</span><span class=\"p\">,</span> <span class=\"s2\">\"KRAKEN\"</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">)</span>\n</pre>\n<h2>Using WebSocket API Client</h2>\n<p>Our WebSocket feed provides real-time market data streams from multiple exchanges at once and the BlockFacts normalized price stream for each second. The WebSocket feed uses a bidirectional protocol, and all messages sent and received via websockets are encoded in a <code>JSON</code> format.</p>\n<h3>Getting started and connecting</h3>\n<p>To get started simply create a new instance of the WebsocketClient class, and create handler functions for websocket events. You can then call the <code>connect()</code> function and open a connection with the BlockFacts websocket server.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">blockfacts</span> <span class=\"kn\">import</span> <span class=\"n\">WebsocketClient</span>\n<span class=\"kn\">import</span> <span class=\"nn\">json</span>\n\n<span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"s1\">'your-api-key'</span>\n<span class=\"n\">secret</span> <span class=\"o\">=</span> <span class=\"s1\">'your-api-secret'</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">on_open</span><span class=\"p\">():</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"BlockFacts websocket server connection open\"</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">on_message</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"p\">):</span>\n    <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">loads</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>    \n    <span class=\"c1\"># Handle websocket server messages</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">on_close</span><span class=\"p\">():</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"BlockFacts websocket server connection closed\"</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">on_error</span><span class=\"p\">(</span><span class=\"n\">err</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">err</span><span class=\"p\">)</span>\n\n<span class=\"n\">websocketClient</span> <span class=\"o\">=</span> <span class=\"n\">WebsocketClient</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">secret</span><span class=\"p\">)</span>\n<span class=\"n\">websocketClient</span><span class=\"o\">.</span><span class=\"n\">onOpen</span> <span class=\"o\">=</span> <span class=\"n\">on_open</span>\n<span class=\"n\">websocketClient</span><span class=\"o\">.</span><span class=\"n\">onMessage</span> <span class=\"o\">=</span> <span class=\"n\">on_message</span>\n<span class=\"n\">websocketClient</span><span class=\"o\">.</span><span class=\"n\">onClose</span> <span class=\"o\">=</span> <span class=\"n\">on_close</span>\n<span class=\"n\">websocketClient</span><span class=\"o\">.</span><span class=\"n\">onError</span> <span class=\"o\">=</span> <span class=\"n\">on_error</span>\n<span class=\"n\">websocketClient</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">()</span>\n</pre>\n<h3>Subscribing</h3>\n<p>In order to subscribe to specific channels or asset-pairs you must send out a <code>subscribe</code> type message. The subscribe message must be sent out after the connection with the websocket has been established. You can call the <code>subscribe()</code> function right after the <code>connect()</code> function, or in the <code>on_open()</code> event handler and pass it a list of channels:</p>\n<pre><span class=\"n\">websocketClient</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">()</span>\n<span class=\"n\">websocketClient</span><span class=\"o\">.</span><span class=\"n\">subscribe</span><span class=\"p\">([</span>\n    <span class=\"p\">{</span>\n        <span class=\"s2\">\"name\"</span><span class=\"p\">:</span><span class=\"s2\">\"BLOCKFACTS\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"pairs\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n            <span class=\"s2\">\"BTC-USD\"</span>\n        <span class=\"p\">]</span>\n    <span class=\"p\">},</span>\n    <span class=\"p\">{</span>\n        <span class=\"s2\">\"name\"</span><span class=\"p\">:</span><span class=\"s2\">\"HEARTBEAT\"</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">])</span>\n\n<span class=\"c1\"># OR</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">on_open</span><span class=\"p\">():</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"BlockFacts websocket server connection open\"</span><span class=\"p\">)</span>\n    <span class=\"n\">websocketClient</span><span class=\"o\">.</span><span class=\"n\">subscribe</span><span class=\"p\">([</span>\n      <span class=\"p\">{</span>\n        <span class=\"s2\">\"name\"</span><span class=\"p\">:</span><span class=\"s2\">\"BLOCKFACTS\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"pairs\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n            <span class=\"s2\">\"BTC-USD\"</span>\n        <span class=\"p\">]</span>\n      <span class=\"p\">},</span>\n      <span class=\"p\">{</span>\n        <span class=\"s2\">\"name\"</span><span class=\"p\">:</span><span class=\"s2\">\"HEARTBEAT\"</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">])</span>\n</pre>\n<p>The <code>subscribe</code> type message supports two more optional parameters which are <code>id</code> and <code>snapshot</code>. You can pass those parameters after the listed channels dictionary in the <code>subscribe()</code> function.</p>\n<pre><span class=\"n\">websocketClient</span><span class=\"o\">.</span><span class=\"n\">subscribe</span><span class=\"p\">([</span>\n    <span class=\"p\">{</span>\n        <span class=\"s2\">\"name\"</span><span class=\"p\">:</span><span class=\"s2\">\"BLOCKFACTS\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"pairs\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n            <span class=\"s2\">\"BTC-USD\"</span>\n        <span class=\"p\">]</span>\n    <span class=\"p\">},</span>\n    <span class=\"p\">{</span>\n        <span class=\"s2\">\"name\"</span><span class=\"p\">:</span><span class=\"s2\">\"HEARTBEAT\"</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">],</span> <span class=\"s2\">\"some-id\"</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<p>To read more about the <code>snapshot</code> type message, please refer to our official documentation: <a href=\"https://docs.blockfacts.io/?python#snapshot\" rel=\"nofollow\">https://docs.blockfacts.io/?python#snapshot</a></p>\n<h3>Unsubscribing</h3>\n<p>If you wish to unsubscribe from certain channels or pairs, you can do so by sending the <code>unsubscribe</code> type message.</p>\n<pre><span class=\"n\">websocketClient</span><span class=\"o\">.</span><span class=\"n\">unsubscribe</span><span class=\"p\">([</span>\n    <span class=\"p\">{</span>\n      <span class=\"s2\">\"name\"</span><span class=\"p\">:</span><span class=\"s2\">\"BLOCKFACTS\"</span><span class=\"p\">,</span>\n      <span class=\"s2\">\"pairs\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n          <span class=\"s2\">\"BTC-USD\"</span><span class=\"p\">,</span>\n          <span class=\"s2\">\"ETH-USD\"</span>\n      <span class=\"p\">]</span>\n    <span class=\"p\">},</span>\n    <span class=\"p\">{</span>\n      <span class=\"s2\">\"name\"</span><span class=\"p\">:</span><span class=\"s2\">\"HEARTBEAT\"</span>\n    <span class=\"p\">},</span>\n    <span class=\"p\">{</span>\n      <span class=\"s2\">\"name\"</span><span class=\"p\">:</span><span class=\"s2\">\"KRAKEN\"</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">],</span> <span class=\"mi\">12345</span><span class=\"p\">)</span>\n</pre>\n<p>The <code>unsubscribe</code> type message supports one more optional parameter which is <code>id</code>. You can pass this parameter after the listed channels dictionary in the <code>unsubscribe()</code> function.</p>\n<h3>Ping</h3>\n<p>Clients can send <code>ping</code> type messages to determine if the server is online.</p>\n<pre><span class=\"n\">websocketClient</span><span class=\"o\">.</span><span class=\"n\">ping</span><span class=\"p\">()</span>\n</pre>\n<p>The <code>ping</code> type message supports one optional parameter which is <code>id</code>. You can pass this parameter in the <code>ping()</code> function.</p>\n<h3>Pong</h3>\n<p>Clients must respond to <code>ping</code> type messages sent from the server with a <code>pong</code> type message.</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">on_message</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"p\">):</span>\n    <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">loads</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s2\">\"type\"</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s2\">\"ping\"</span><span class=\"p\">):</span>\n      <span class=\"n\">websocketClient</span><span class=\"o\">.</span><span class=\"n\">pong</span><span class=\"p\">()</span>\n</pre>\n<p>The <code>on_message()</code> event handler can also be used to handle all message types from the websocket, for example:</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">on_msg</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"p\">):</span>\n    <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">loads</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s2\">\"type\"</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s1\">'subscribed'</span><span class=\"p\">:</span>\n      <span class=\"c1\"># Subscribed type message  </span>\n\n    <span class=\"k\">if</span> <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s2\">\"type\"</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s1\">'snapshot'</span><span class=\"p\">:</span>\n      <span class=\"c1\"># Snapshot type message  </span>\n\n    <span class=\"k\">if</span> <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s2\">\"type\"</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s1\">'unsubscribed'</span><span class=\"p\">:</span>\n      <span class=\"c1\"># Unsubscribed type message    </span>\n\n    <span class=\"k\">if</span> <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s2\">\"type\"</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s1\">'exchangeTrade'</span><span class=\"p\">:</span>\n      <span class=\"c1\"># ExchangeTrade type message    </span>\n\n    <span class=\"k\">if</span> <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s2\">\"type\"</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s1\">'blockfactsPrice'</span><span class=\"p\">:</span>\n      <span class=\"c1\"># BlockfactsPrice type message    </span>\n\n    <span class=\"k\">if</span> <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s2\">\"type\"</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s1\">'ping'</span><span class=\"p\">:</span>\n      <span class=\"c1\"># Ping type message     </span>\n      <span class=\"n\">websocketClient</span><span class=\"o\">.</span><span class=\"n\">pong</span><span class=\"p\">()</span>   \n\n    <span class=\"k\">if</span> <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s2\">\"type\"</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s1\">'pong'</span><span class=\"p\">:</span>\n      <span class=\"c1\"># Pong type message       </span>\n\n    <span class=\"k\">if</span> <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s2\">\"type\"</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s1\">'status'</span><span class=\"p\">:</span>\n      <span class=\"c1\"># Status type message       </span>\n\n    <span class=\"k\">if</span> <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s2\">\"type\"</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s1\">'heartbeat'</span><span class=\"p\">:</span>\n      <span class=\"c1\"># Heartbeat type message        </span>\n\n    <span class=\"k\">if</span> <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s2\">\"type\"</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s1\">'error'</span><span class=\"p\">:</span>\n      <span class=\"c1\"># Error type message   </span>\n</pre>\n<h3>Disconnect</h3>\n<p>Clients can disconnect from the BlockFacts websocket by calling the <code>disconnect()</code> function. The disconnect function will work only if the connection has already been established.</p>\n<pre><span class=\"n\">websocketClient</span><span class=\"o\">.</span><span class=\"n\">disconnect</span><span class=\"p\">()</span>\n</pre>\n<p>In order to have a better understanding of our server responses, please refer to: <a href=\"https://docs.blockfacts.io/?python#server-messages\" rel=\"nofollow\">https://docs.blockfacts.io/?python#server-messages</a></p>\n\n          </div>"}, "last_serial": 7005504, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "8d2a7508bbe93042cc3c5489b26145cb", "sha256": "0c8e3f3f158088be71c90c32ff8e970db0b96e74d90c9226737de932d9320c99"}, "downloads": -1, "filename": "blockfacts_sdk-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "8d2a7508bbe93042cc3c5489b26145cb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*, <4", "size": 10270, "upload_time": "2019-10-16T09:00:05", "upload_time_iso_8601": "2019-10-16T09:00:05.818787Z", "url": "https://files.pythonhosted.org/packages/ee/14/511c5d6e599997cb9f38186a46a9a6ed751f4a3c197fc4983b77968b49c6/blockfacts_sdk-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "78597ef260b4a31bab7f12499676a9be", "sha256": "b60e5b4caba22bac3ae9299ee9b18e4b9dbd76875551661c5fc846cccea54369"}, "downloads": -1, "filename": "blockfacts-sdk-1.0.0.tar.gz", "has_sig": false, "md5_digest": "78597ef260b4a31bab7f12499676a9be", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*, <4", "size": 9529, "upload_time": "2019-10-16T09:00:09", "upload_time_iso_8601": "2019-10-16T09:00:09.114786Z", "url": "https://files.pythonhosted.org/packages/d6/92/9e0ee63525bc87b0886f23cb4c9098b69b631bf52e44879f573e43c962cf/blockfacts-sdk-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "a2b1201d7e035c407a59c7609683123c", "sha256": "4e6611e45c3464e6634fbeeec50a021b73fd175d424ccda5b8f2f66128626533"}, "downloads": -1, "filename": "blockfacts_sdk-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "a2b1201d7e035c407a59c7609683123c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*, <4", "size": 10879, "upload_time": "2020-02-07T13:03:47", "upload_time_iso_8601": "2020-02-07T13:03:47.246425Z", "url": "https://files.pythonhosted.org/packages/ab/5c/f5634450558715455caa81c2b255438cede6a0d9f426a53d1c2726322b0e/blockfacts_sdk-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "66a8d53cb62a18a3593b71aa1b34496d", "sha256": "0885ce79d56b15beaf6abc76988df5acd34a3a61e2d1e575c0f8f4da52207b61"}, "downloads": -1, "filename": "blockfacts-sdk-1.0.1.tar.gz", "has_sig": false, "md5_digest": "66a8d53cb62a18a3593b71aa1b34496d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*, <4", "size": 10502, "upload_time": "2020-02-07T13:03:50", "upload_time_iso_8601": "2020-02-07T13:03:50.551054Z", "url": "https://files.pythonhosted.org/packages/be/b2/aa6e2f373ffe488375fbc3ddc3e34609a2c5fe457cd47c6ee187c74aa08f/blockfacts-sdk-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "8daf43c5d37d6d3c7b7efdc1b7ebba7d", "sha256": "ac639e2a5933fe69baa02cd379dc867333775e15d894d6619c0424c3d2341d01"}, "downloads": -1, "filename": "blockfacts_sdk-1.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "8daf43c5d37d6d3c7b7efdc1b7ebba7d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*, <4", "size": 10882, "upload_time": "2020-04-12T17:20:15", "upload_time_iso_8601": "2020-04-12T17:20:15.328701Z", "url": "https://files.pythonhosted.org/packages/5f/28/1ca8be5976ff7fa467ab8506e57e2e0eb0a0ea5f1bbccffff00cbca5950c/blockfacts_sdk-1.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fa218ab959ba58876e10e138478436c9", "sha256": "3cd7631bab4883e458bb0183c90cc12148fd7d7258e3f02e207c5e841b11fa5e"}, "downloads": -1, "filename": "blockfacts-sdk-1.0.2.tar.gz", "has_sig": false, "md5_digest": "fa218ab959ba58876e10e138478436c9", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*, <4", "size": 10512, "upload_time": "2020-04-12T17:20:16", "upload_time_iso_8601": "2020-04-12T17:20:16.927669Z", "url": "https://files.pythonhosted.org/packages/e9/95/e51b3f3e4238ad8541e009ee4729d81bbc8011c0f04e682af3ff2a133bb3/blockfacts-sdk-1.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "8daf43c5d37d6d3c7b7efdc1b7ebba7d", "sha256": "ac639e2a5933fe69baa02cd379dc867333775e15d894d6619c0424c3d2341d01"}, "downloads": -1, "filename": "blockfacts_sdk-1.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "8daf43c5d37d6d3c7b7efdc1b7ebba7d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*, <4", "size": 10882, "upload_time": "2020-04-12T17:20:15", "upload_time_iso_8601": "2020-04-12T17:20:15.328701Z", "url": "https://files.pythonhosted.org/packages/5f/28/1ca8be5976ff7fa467ab8506e57e2e0eb0a0ea5f1bbccffff00cbca5950c/blockfacts_sdk-1.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fa218ab959ba58876e10e138478436c9", "sha256": "3cd7631bab4883e458bb0183c90cc12148fd7d7258e3f02e207c5e841b11fa5e"}, "downloads": -1, "filename": "blockfacts-sdk-1.0.2.tar.gz", "has_sig": false, "md5_digest": "fa218ab959ba58876e10e138478436c9", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*, <4", "size": 10512, "upload_time": "2020-04-12T17:20:16", "upload_time_iso_8601": "2020-04-12T17:20:16.927669Z", "url": "https://files.pythonhosted.org/packages/e9/95/e51b3f3e4238ad8541e009ee4729d81bbc8011c0f04e682af3ff2a133bb3/blockfacts-sdk-1.0.2.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:37:02 2020"}