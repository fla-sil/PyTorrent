{"info": {"author": "Zope Corporation and Contributors", "author_email": "zope-dev@zope.org", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Web Environment", "Framework :: Zope3", "Intended Audience :: Developers", "License :: OSI Approved :: Zope Public License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Internet :: WWW/HTTP"], "description": "This package provides the SQL Script content type for Zope 3 applications. SQL\nScripts are connected to execute SQL statements and the result is return in an\nobject-oriented data structure.\n\n\nDetailed Documentation\n======================\n\n\n=======================================\nUsing additional DTML tags in SQLScript\n=======================================\n\nInserting optional tests with 'sqlgroup'\n----------------------------------------\n\nIt is sometimes useful to make inputs to an SQL statement optinal.\nDoing so can be difficult, because not only must the test be inserted\nconditionally, but SQL boolean operators may or may not need to be\ninserted depending on whether other, possibly optional, comparisons\nhave been done.  The 'sqlgroup' tag automates the conditional\ninsertion of boolean operators.\n\nThe 'sqlgroup' tag is a block tag that has no attributes. It can have\nany number of 'and' and 'or' continuation tags.\n\nSuppose we want to find all people with a given first or nick name and\noptionally constrain the search by city and minimum and maximum age.\nSuppose we want all inputs to be optional.  We can use DTML source\nlike the following::\n\n  <dtml-sqlgroup>\n    <dtml-sqlgroup>\n      <dtml-sqltest name column=nick_name type=nb multiple optional>\n    <dtml-or>\n      <dtml-sqltest name column=first_name type=nb multiple optional>\n    </dtml-sqlgroup>\n  <dtml-and>\n    <dtml-sqltest home_town type=nb optional>\n  <dtml-and>\n    <dtml-if minimum_age>\n       age >= <dtml-sqlvar minimum_age type=int>\n    </dtml-if>\n  <dtml-and>\n    <dtml-if maximum_age>\n       age <= <dtml-sqlvar maximum_age type=int>\n    </dtml-if>\n  </dtml-sqlgroup>\n\nThis example illustrates how groups can be nested to control boolean\nevaluation order.  It also illustrates that the grouping facility can\nalso be used with other DTML tags like 'if' tags.\n\nThe 'sqlgroup' tag checks to see if text to be inserted contains other\nthan whitespace characters.  If it does, then it is inserted with the\nappropriate boolean operator, as indicated by use of an 'and' or 'or'\ntag, otherwise, no text is inserted.\n\nInserting optional tests with 'sqlgroup'\n----------------------------------------\n\nIt is sometimes useful to make inputs to an SQL statement optinal.\nDoing so can be difficult, because not only must the test be inserted\nconditionally, but SQL boolean operators may or may not need to be\ninserted depending on whether other, possibly optional, comparisons\nhave been done.  The 'sqlgroup' tag automates the conditional\ninsertion of boolean operators.\n\nThe 'sqlgroup' tag is a block tag. It can have any number of 'and' and\n'or' continuation tags.\n\nThe 'sqlgroup' tag has an optional attribure, 'required' to specify\ngroups that must include at least one test.  This is useful when you\nwant to make sure that a query is qualified, but want to be very\nflexible about how it is qualified.\n\nSuppose we want to find people with a given first or nick name, city\nor minimum and maximum age.  Suppose we want all inputs to be\noptional, but want to require *some* input.  We can use DTML source\nlike the following::\n\n  <dtml-sqlgroup required>\n    <dtml-sqlgroup>\n      <dtml-sqltest name column=nick_name type=nb multiple optional>\n    <dtml-or>\n      <dtml-sqltest name column=first_name type=nb multiple optional>\n    </dtml-sqlgroup>\n  <dtml-and>\n    <dtml-sqltest home_town type=nb optional>\n  <dtml-and>\n    <dtml-if minimum_age>\n       age >= <dtml-sqlvar minimum_age type=int>\n    </dtml-if>\n  <dtml-and>\n    <dtml-if maximum_age>\n       age <= <dtml-sqlvar maximum_age type=int>\n    </dtml-if>\n  </dtml-sqlgroup>\n\nThis example illustrates how groups can be nested to control boolean\nevaluation order.  It also illustrates that the grouping facility can\nalso be used with other DTML tags like 'if' tags.\n\nThe 'sqlgroup' tag checks to see if text to be inserted contains other\nthan whitespace characters.  If it does, then it is inserted with the\nappropriate boolean operator, as indicated by use of an 'and' or 'or'\ntag, otherwise, no text is inserted.\n\nInserting values with the 'sqlvar' tag\n--------------------------------------\n\nThe 'sqlvar' tag is used to type-safely insert values into SQL text.\nThe 'sqlvar' tag is similar to the 'var' tag, except that it replaces\ntext formatting parameters with SQL type information.\n\nThe sqlvar tag has the following attributes:\n\n`name`\n  The name of the variable to insert. As with other DTML tags, the\n  'name=' prefix may be, and usually is, ommitted.\n\n`type`\n  The data type of the value to be inserted.  This attribute is\n  required and may be one of 'string', 'int', 'float', or 'nb'.  The\n  'nb' data type indicates a string that must have a length that is\n  greater than 0.\n\n`optional`\n  A flag indicating that a value is optional.  If a value is optional\n  and is not provided (or is blank when a non-blank value is\n  expected), then the string 'null' is inserted.\n\nFor example, given the tag::\n\n  <dtml-sqlvar x type=nb optional>\n\nif the value of 'x' is::\n\n  Let\\'s do it\n\nthen the text inserted is:\n\n  'Let''s do it'\n\nhowever, if x is ommitted or an empty string, then the value inserted\nis 'null'.\n\n\n=======\nCHANGES\n=======\n\n3.5.0 (2009-02-01)\n------------------\n\n- Use ``zope.container`` instead of ``zope.app.container``.\n\n3.4.1 (2007-10-31)\n------------------\n\n- Resolve ``ZopeSecurityPolicy`` deprecation warning.\n\n3.4.0 (2007-10-27)\n------------------\n\n- Initial release independent of the main Zope tree.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://pypi.python.org/pypi/zope.app.sqlscript", "keywords": "zope3 sql script", "license": "ZPL 2.1", "maintainer": null, "maintainer_email": null, "name": "zope.app.sqlscript", "package_url": "https://pypi.org/project/zope.app.sqlscript/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/zope.app.sqlscript/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://pypi.python.org/pypi/zope.app.sqlscript"}, "release_url": "https://pypi.org/project/zope.app.sqlscript/3.5.0/", "requires_dist": null, "requires_python": null, "summary": "SQL Script -- Zope 3 Content Component", "version": "3.5.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>This package provides the SQL Script content type for Zope 3 applications. SQL\nScripts are connected to execute SQL statements and the result is return in an\nobject-oriented data structure.</p>\n<div id=\"detailed-documentation\">\n<h2>Detailed Documentation</h2>\n<div id=\"using-additional-dtml-tags-in-sqlscript\">\n<h3>Using additional DTML tags in SQLScript</h3>\n<div id=\"inserting-optional-tests-with-sqlgroup\">\n<h4>Inserting optional tests with \u2018sqlgroup\u2019</h4>\n<p>It is sometimes useful to make inputs to an SQL statement optinal.\nDoing so can be difficult, because not only must the test be inserted\nconditionally, but SQL boolean operators may or may not need to be\ninserted depending on whether other, possibly optional, comparisons\nhave been done.  The \u2018sqlgroup\u2019 tag automates the conditional\ninsertion of boolean operators.</p>\n<p>The \u2018sqlgroup\u2019 tag is a block tag that has no attributes. It can have\nany number of \u2018and\u2019 and \u2018or\u2019 continuation tags.</p>\n<p>Suppose we want to find all people with a given first or nick name and\noptionally constrain the search by city and minimum and maximum age.\nSuppose we want all inputs to be optional.  We can use DTML source\nlike the following:</p>\n<pre>&lt;dtml-sqlgroup&gt;\n  &lt;dtml-sqlgroup&gt;\n    &lt;dtml-sqltest name column=nick_name type=nb multiple optional&gt;\n  &lt;dtml-or&gt;\n    &lt;dtml-sqltest name column=first_name type=nb multiple optional&gt;\n  &lt;/dtml-sqlgroup&gt;\n&lt;dtml-and&gt;\n  &lt;dtml-sqltest home_town type=nb optional&gt;\n&lt;dtml-and&gt;\n  &lt;dtml-if minimum_age&gt;\n     age &gt;= &lt;dtml-sqlvar minimum_age type=int&gt;\n  &lt;/dtml-if&gt;\n&lt;dtml-and&gt;\n  &lt;dtml-if maximum_age&gt;\n     age &lt;= &lt;dtml-sqlvar maximum_age type=int&gt;\n  &lt;/dtml-if&gt;\n&lt;/dtml-sqlgroup&gt;\n</pre>\n<p>This example illustrates how groups can be nested to control boolean\nevaluation order.  It also illustrates that the grouping facility can\nalso be used with other DTML tags like \u2018if\u2019 tags.</p>\n<p>The \u2018sqlgroup\u2019 tag checks to see if text to be inserted contains other\nthan whitespace characters.  If it does, then it is inserted with the\nappropriate boolean operator, as indicated by use of an \u2018and\u2019 or \u2018or\u2019\ntag, otherwise, no text is inserted.</p>\n</div>\n<div id=\"id1\">\n<h4>Inserting optional tests with \u2018sqlgroup\u2019</h4>\n<p>It is sometimes useful to make inputs to an SQL statement optinal.\nDoing so can be difficult, because not only must the test be inserted\nconditionally, but SQL boolean operators may or may not need to be\ninserted depending on whether other, possibly optional, comparisons\nhave been done.  The \u2018sqlgroup\u2019 tag automates the conditional\ninsertion of boolean operators.</p>\n<p>The \u2018sqlgroup\u2019 tag is a block tag. It can have any number of \u2018and\u2019 and\n\u2018or\u2019 continuation tags.</p>\n<p>The \u2018sqlgroup\u2019 tag has an optional attribure, \u2018required\u2019 to specify\ngroups that must include at least one test.  This is useful when you\nwant to make sure that a query is qualified, but want to be very\nflexible about how it is qualified.</p>\n<p>Suppose we want to find people with a given first or nick name, city\nor minimum and maximum age.  Suppose we want all inputs to be\noptional, but want to require <em>some</em> input.  We can use DTML source\nlike the following:</p>\n<pre>&lt;dtml-sqlgroup required&gt;\n  &lt;dtml-sqlgroup&gt;\n    &lt;dtml-sqltest name column=nick_name type=nb multiple optional&gt;\n  &lt;dtml-or&gt;\n    &lt;dtml-sqltest name column=first_name type=nb multiple optional&gt;\n  &lt;/dtml-sqlgroup&gt;\n&lt;dtml-and&gt;\n  &lt;dtml-sqltest home_town type=nb optional&gt;\n&lt;dtml-and&gt;\n  &lt;dtml-if minimum_age&gt;\n     age &gt;= &lt;dtml-sqlvar minimum_age type=int&gt;\n  &lt;/dtml-if&gt;\n&lt;dtml-and&gt;\n  &lt;dtml-if maximum_age&gt;\n     age &lt;= &lt;dtml-sqlvar maximum_age type=int&gt;\n  &lt;/dtml-if&gt;\n&lt;/dtml-sqlgroup&gt;\n</pre>\n<p>This example illustrates how groups can be nested to control boolean\nevaluation order.  It also illustrates that the grouping facility can\nalso be used with other DTML tags like \u2018if\u2019 tags.</p>\n<p>The \u2018sqlgroup\u2019 tag checks to see if text to be inserted contains other\nthan whitespace characters.  If it does, then it is inserted with the\nappropriate boolean operator, as indicated by use of an \u2018and\u2019 or \u2018or\u2019\ntag, otherwise, no text is inserted.</p>\n</div>\n<div id=\"inserting-values-with-the-sqlvar-tag\">\n<h4>Inserting values with the \u2018sqlvar\u2019 tag</h4>\n<p>The \u2018sqlvar\u2019 tag is used to type-safely insert values into SQL text.\nThe \u2018sqlvar\u2019 tag is similar to the \u2018var\u2019 tag, except that it replaces\ntext formatting parameters with SQL type information.</p>\n<p>The sqlvar tag has the following attributes:</p>\n<dl>\n<dt><cite>name</cite></dt>\n<dd>The name of the variable to insert. As with other DTML tags, the\n\u2018name=\u2019 prefix may be, and usually is, ommitted.</dd>\n<dt><cite>type</cite></dt>\n<dd>The data type of the value to be inserted.  This attribute is\nrequired and may be one of \u2018string\u2019, \u2018int\u2019, \u2018float\u2019, or \u2018nb\u2019.  The\n\u2018nb\u2019 data type indicates a string that must have a length that is\ngreater than 0.</dd>\n<dt><cite>optional</cite></dt>\n<dd>A flag indicating that a value is optional.  If a value is optional\nand is not provided (or is blank when a non-blank value is\nexpected), then the string \u2018null\u2019 is inserted.</dd>\n</dl>\n<p>For example, given the tag:</p>\n<pre>&lt;dtml-sqlvar x type=nb optional&gt;\n</pre>\n<p>if the value of \u2018x\u2019 is:</p>\n<pre>Let\\'s do it\n</pre>\n<p>then the text inserted is:</p>\n<blockquote>\n\u2018Let\u2019\u2019s do it\u2019</blockquote>\n<p>however, if x is ommitted or an empty string, then the value inserted\nis \u2018null\u2019.</p>\n</div>\n</div>\n<div id=\"changes\">\n<h3>CHANGES</h3>\n<div id=\"id2\">\n<h4>3.5.0 (2009-02-01)</h4>\n<ul>\n<li>Use <tt>zope.container</tt> instead of <tt>zope.app.container</tt>.</li>\n</ul>\n</div>\n<div id=\"id3\">\n<h4>3.4.1 (2007-10-31)</h4>\n<ul>\n<li>Resolve <tt>ZopeSecurityPolicy</tt> deprecation warning.</li>\n</ul>\n</div>\n<div id=\"id4\">\n<h4>3.4.0 (2007-10-27)</h4>\n<ul>\n<li>Initial release independent of the main Zope tree.</li>\n</ul>\n</div>\n</div>\n</div>\n\n          </div>"}, "last_serial": 805232, "releases": {"3.4.0": [{"comment_text": "", "digests": {"md5": "65b03c0f3aa82402018bfa17252b20a8", "sha256": "dcc9834c88e9fe8c99521664894cb286e6af0bffc98e3df86480f75ce27f230e"}, "downloads": -1, "filename": "zope.app.sqlscript-3.4.0.tar.gz", "has_sig": false, "md5_digest": "65b03c0f3aa82402018bfa17252b20a8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17337, "upload_time": "2007-10-28T02:17:51", "upload_time_iso_8601": "2007-10-28T02:17:51Z", "url": "https://files.pythonhosted.org/packages/bb/0e/9ab8f496cecf60689ab0ee27e81341c8bb001e80633f5b333b2838de85a2/zope.app.sqlscript-3.4.0.tar.gz", "yanked": false}], "3.4.0a1": [{"comment_text": "", "digests": {"md5": "fbb36c846515b28bb52968184072bfeb", "sha256": "d3b873db4c0cd2fb2fc138d1324a43f7b997c3c8f17e49b54f75b7235b698d12"}, "downloads": -1, "filename": "zope.app.sqlscript-3.4.0a1.tar.gz", "has_sig": false, "md5_digest": "fbb36c846515b28bb52968184072bfeb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15574, "upload_time": "2007-04-23T13:32:45", "upload_time_iso_8601": "2007-04-23T13:32:45Z", "url": "https://files.pythonhosted.org/packages/6d/f1/d5712587751464616751f6e5200b762941e6e59b64a5b51f4e7b2b94c549/zope.app.sqlscript-3.4.0a1.tar.gz", "yanked": false}], "3.4.1": [{"comment_text": "", "digests": {"md5": "021f657672574ee54bc8e1cac2e722ba", "sha256": "0e05451ee9ee11e472c707142b9a4d837ee36d79c5c90edc6da74814300d6958"}, "downloads": -1, "filename": "zope.app.sqlscript-3.4.1.tar.gz", "has_sig": false, "md5_digest": "021f657672574ee54bc8e1cac2e722ba", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17485, "upload_time": "2007-10-31T18:16:08", "upload_time_iso_8601": "2007-10-31T18:16:08Z", "url": "https://files.pythonhosted.org/packages/7e/a5/598774c30d7531b56d561ee9124bd1e3144ed160958eeee47f92501c9fde/zope.app.sqlscript-3.4.1.tar.gz", "yanked": false}], "3.5.0": [{"comment_text": "", "digests": {"md5": "657aab7dbb07f157aa8ab1e3177be49a", "sha256": "8abaae3ab930a6962f89629729017f900192b30f952ff4fa5af9cadfb65e9b71"}, "downloads": -1, "filename": "zope.app.sqlscript-3.5.0.tar.gz", "has_sig": false, "md5_digest": "657aab7dbb07f157aa8ab1e3177be49a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19856, "upload_time": "2009-02-01T19:09:49", "upload_time_iso_8601": "2009-02-01T19:09:49Z", "url": "https://files.pythonhosted.org/packages/f6/cd/3b0f5bce73fa938cdf6fedcc2e23eedf8a48147156dd8d1e62cd455aa5a5/zope.app.sqlscript-3.5.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "657aab7dbb07f157aa8ab1e3177be49a", "sha256": "8abaae3ab930a6962f89629729017f900192b30f952ff4fa5af9cadfb65e9b71"}, "downloads": -1, "filename": "zope.app.sqlscript-3.5.0.tar.gz", "has_sig": false, "md5_digest": "657aab7dbb07f157aa8ab1e3177be49a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19856, "upload_time": "2009-02-01T19:09:49", "upload_time_iso_8601": "2009-02-01T19:09:49Z", "url": "https://files.pythonhosted.org/packages/f6/cd/3b0f5bce73fa938cdf6fedcc2e23eedf8a48147156dd8d1e62cd455aa5a5/zope.app.sqlscript-3.5.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:14:17 2020"}