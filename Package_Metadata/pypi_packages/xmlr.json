{"info": {"author": "Henrik Blidh", "author_email": "henrik.blidh@nedomkull.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "Operating System :: OS Independent", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Topic :: Text Processing :: Markup :: XML"], "description": "xmlr\n====\n\n|Build Status| |Coverage Status|\n\nIt can be problematic to handle large XML files (>> 10 MB) and using the\n``xml`` module in Python directly leads to huge memory overheads. Most\noften, these large XML files are pure data files, storing highly\nstructured data that have no intrinsic need to be stored in XML.\n\nThis package provides iterative methods for dealing with them, reading\nthe XML documents into Python dict representation instead, according to\nmethodology specifed on the page `Converting Between XML and JSON\n<http://www.xml.com/lpt/a/1658>`_. ``xmlr`` is inspired by the solutions\ndescribed in the blog posts `High-performance XML parsing in Python with lxml\n<https://www.ibm.com/developerworks/xml/library/x-hiperfparse/>`_ and\n`Parsing large XML files, serially, in Python\n<http://boscoh.com/programming/reading-xml-serially.html>`_,\nenabling the parsing of very large documents without problems with\novertaxing the memory.\n\n.. pull-quote::\n\n    This package generally provides a one way trip; there is not necessarily\n    a bijectional relation with the XML source after parsing.\n\nInstallation\n------------\n\n::\n\n    pip install xmlr\n\nUsage\n-----\n\nTo parse an entire document, use the ``xmlparse`` method:\n\n.. code:: python\n\n    from xmlr import xmlparse\n\n    doc = xmlparse('very_large_doc.xml')\n\nAn iterator, ``xmliter``, yielding elements of a specified type as they\nare parsed from the document is also present:\n\n.. code:: python\n\n    from xmlr import xmliter\n\n    for d in xmliter('very_large_record.xml', 'Record'):\n        print(d)\n\nThe desired parser can also be specified. Available methods are:\n\n-  ``ELEMENTTREE`` - Using ``xml.etree.ElementTree`` as backend.\n-  ``C_ELEMENTTREE`` - Using ``xml.etree.cElementTree`` as backend.\n-  ``LXML_ELEMENTTREE`` - Using ``lxml.etree`` as backend. Requires\n   installation of the ``lxml`` package.\n\nThese can then be used like this:\n\n.. code:: python\n\n    from xmlr import xmliter, XMLParsingMethods\n\n    for d in xmliter('very_large_record.xml', 'Record', parser=XMLParsingMethods.LXML_ELEMENTTREE):\n        print(d)\n\nNo type conversion is performed right now. A value in the output\ndictionary can have the type ``dict`` (a subdocument), ``list`` (an\narray of similar documents), ``str`` (a leaf or value) or ``None``\n(empty XML leaf tag). All keys are of the type ``str``.\n\nTests\n~~~~~\n\nTests are run with ``pytest``:\n\n.. code:: bash\n\n    $ py.test tests/\n    ============================= test session starts ==============================\n    platform linux2 -- Python 2.7.6, pytest-2.9.1, py-1.4.31, pluggy-0.3.1\n    rootdir: /home/hbldh/Repos/xmlr, inifile:\n    collected 50 items\n\n    tests/test_iter.py ...........................\n    tests/test_methods.py ..\n    tests/test_parsing.py .....................\n\n    ========================== 50 passed in 0.50 seconds ===========================\n\nThe tests fetches some XML documents from `W3Schools XML tutorials`_ and\nalso uses a bundled, slimmed down version of the document available at\n`U.S. copyright renewal records available for download\n<http://booksearch.blogspot.se/2008/06/us-copyright-renewal-records-available.html>`_.\n\n\n.. _W3Schools XML tutorials: http://www.w3schools.com/xml/xml_examples.asp\n\n.. |Build Status| image:: https://travis-ci.org/hbldh/xmlr.svg?branch=master\n   :target: https://travis-ci.org/hbldh/xmlr\n.. |Coverage Status| image:: https://coveralls.io/repos/github/hbldh/xmlr/badge.svg?branch=master\n   :target: https://coveralls.io/github/hbldh/xmlr?branch=master\n\n\n\n\nv0.3.1 (2016-08-16)\n===================\n- Made available on PyPi\n\nv0.3.0 (2016-05-23)\n===================\n- Renaming from `xmller` to `xmlr`.\n- General improvements.\n- Test coverage increased.\n- More documentation.\n- Development Status classifier increased from Alpha to Beta.\n\nv0.2.0 (2016-05-20)\n===================\n- Bugfixes.\n- `xmliter` method written.\n- `lxml` support added.\n- Improved parser selection.\n- Increased test coverage to >90%.\n\nv0.1.0 (2016-05-17)\n===================\n- Initial release", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/hbldh/xmlr", "keywords": "XML,parsing,json,conversion", "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "xmlr", "package_url": "https://pypi.org/project/xmlr/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/xmlr/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/hbldh/xmlr"}, "release_url": "https://pypi.org/project/xmlr/0.3.1/", "requires_dist": null, "requires_python": null, "summary": "XML parsing package for very large files", "version": "0.3.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"xmlr\">\n<h2>xmlr</h2>\n<p><a href=\"https://travis-ci.org/hbldh/xmlr\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fca214243ceb4bf32279ba8d53fbce1b1757a710/68747470733a2f2f7472617669732d63692e6f72672f68626c64682f786d6c722e7376673f6272616e63683d6d6173746572\"></a> <a href=\"https://coveralls.io/github/hbldh/xmlr?branch=master\" rel=\"nofollow\"><img alt=\"Coverage Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/db9003846f1217dc09b10fca5df1849968481d21/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f68626c64682f786d6c722f62616467652e7376673f6272616e63683d6d6173746572\"></a></p>\n<p>It can be problematic to handle large XML files (&gt;&gt; 10 MB) and using the\n<tt>xml</tt> module in Python directly leads to huge memory overheads. Most\noften, these large XML files are pure data files, storing highly\nstructured data that have no intrinsic need to be stored in XML.</p>\n<p>This package provides iterative methods for dealing with them, reading\nthe XML documents into Python dict representation instead, according to\nmethodology specifed on the page <a href=\"http://www.xml.com/lpt/a/1658\" rel=\"nofollow\">Converting Between XML and JSON</a>. <tt>xmlr</tt> is inspired by the solutions\ndescribed in the blog posts <a href=\"https://www.ibm.com/developerworks/xml/library/x-hiperfparse/\" rel=\"nofollow\">High-performance XML parsing in Python with lxml</a> and\n<a href=\"http://boscoh.com/programming/reading-xml-serially.html\" rel=\"nofollow\">Parsing large XML files, serially, in Python</a>,\nenabling the parsing of very large documents without problems with\novertaxing the memory.</p>\n<blockquote>\nThis package generally provides a one way trip; there is not necessarily\na bijectional relation with the XML source after parsing.</blockquote>\n<div id=\"installation\">\n<h3>Installation</h3>\n<pre>pip install xmlr\n</pre>\n</div>\n<div id=\"usage\">\n<h3>Usage</h3>\n<p>To parse an entire document, use the <tt>xmlparse</tt> method:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">xmlr</span> <span class=\"kn\">import</span> <span class=\"n\">xmlparse</span>\n\n<span class=\"n\">doc</span> <span class=\"o\">=</span> <span class=\"n\">xmlparse</span><span class=\"p\">(</span><span class=\"s1\">'very_large_doc.xml'</span><span class=\"p\">)</span>\n</pre>\n<p>An iterator, <tt>xmliter</tt>, yielding elements of a specified type as they\nare parsed from the document is also present:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">xmlr</span> <span class=\"kn\">import</span> <span class=\"n\">xmliter</span>\n\n<span class=\"k\">for</span> <span class=\"n\">d</span> <span class=\"ow\">in</span> <span class=\"n\">xmliter</span><span class=\"p\">(</span><span class=\"s1\">'very_large_record.xml'</span><span class=\"p\">,</span> <span class=\"s1\">'Record'</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">)</span>\n</pre>\n<p>The desired parser can also be specified. Available methods are:</p>\n<ul>\n<li><tt>ELEMENTTREE</tt> - Using <tt>xml.etree.ElementTree</tt> as backend.</li>\n<li><tt>C_ELEMENTTREE</tt> - Using <tt>xml.etree.cElementTree</tt> as backend.</li>\n<li><tt>LXML_ELEMENTTREE</tt> - Using <tt>lxml.etree</tt> as backend. Requires\ninstallation of the <tt>lxml</tt> package.</li>\n</ul>\n<p>These can then be used like this:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">xmlr</span> <span class=\"kn\">import</span> <span class=\"n\">xmliter</span><span class=\"p\">,</span> <span class=\"n\">XMLParsingMethods</span>\n\n<span class=\"k\">for</span> <span class=\"n\">d</span> <span class=\"ow\">in</span> <span class=\"n\">xmliter</span><span class=\"p\">(</span><span class=\"s1\">'very_large_record.xml'</span><span class=\"p\">,</span> <span class=\"s1\">'Record'</span><span class=\"p\">,</span> <span class=\"n\">parser</span><span class=\"o\">=</span><span class=\"n\">XMLParsingMethods</span><span class=\"o\">.</span><span class=\"n\">LXML_ELEMENTTREE</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">)</span>\n</pre>\n<p>No type conversion is performed right now. A value in the output\ndictionary can have the type <tt>dict</tt> (a subdocument), <tt>list</tt> (an\narray of similar documents), <tt>str</tt> (a leaf or value) or <tt>None</tt>\n(empty XML leaf tag). All keys are of the type <tt>str</tt>.</p>\n<div id=\"tests\">\n<h4>Tests</h4>\n<p>Tests are run with <tt>pytest</tt>:</p>\n<pre>$ py.test tests/\n<span class=\"o\">=============================</span> <span class=\"nb\">test</span> session <span class=\"nv\">starts</span> <span class=\"o\">==============================</span>\nplatform linux2 -- Python <span class=\"m\">2</span>.7.6, pytest-2.9.1, py-1.4.31, pluggy-0.3.1\nrootdir: /home/hbldh/Repos/xmlr, inifile:\ncollected <span class=\"m\">50</span> items\n\ntests/test_iter.py ...........................\ntests/test_methods.py ..\ntests/test_parsing.py .....................\n\n<span class=\"o\">==========================</span> <span class=\"m\">50</span> passed in <span class=\"m\">0</span>.50 <span class=\"nv\">seconds</span> <span class=\"o\">===========================</span>\n</pre>\n<p>The tests fetches some XML documents from <a href=\"http://www.w3schools.com/xml/xml_examples.asp\" rel=\"nofollow\">W3Schools XML tutorials</a> and\nalso uses a bundled, slimmed down version of the document available at\n<a href=\"http://booksearch.blogspot.se/2008/06/us-copyright-renewal-records-available.html\" rel=\"nofollow\">U.S. copyright renewal records available for download</a>.</p>\n</div>\n</div>\n</div>\n<div id=\"v0-3-1-2016-08-16\">\n<h2>v0.3.1 (2016-08-16)</h2>\n<ul>\n<li>Made available on PyPi</li>\n</ul>\n</div>\n<div id=\"v0-3-0-2016-05-23\">\n<h2>v0.3.0 (2016-05-23)</h2>\n<ul>\n<li>Renaming from <cite>xmller</cite> to <cite>xmlr</cite>.</li>\n<li>General improvements.</li>\n<li>Test coverage increased.</li>\n<li>More documentation.</li>\n<li>Development Status classifier increased from Alpha to Beta.</li>\n</ul>\n</div>\n<div id=\"v0-2-0-2016-05-20\">\n<h2>v0.2.0 (2016-05-20)</h2>\n<ul>\n<li>Bugfixes.</li>\n<li><cite>xmliter</cite> method written.</li>\n<li><cite>lxml</cite> support added.</li>\n<li>Improved parser selection.</li>\n<li>Increased test coverage to &gt;90%.</li>\n</ul>\n</div>\n<div id=\"v0-1-0-2016-05-17\">\n<h2>v0.1.0 (2016-05-17)</h2>\n<ul>\n<li>Initial release</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 2283777, "releases": {"0.3.1": [{"comment_text": "", "digests": {"md5": "c9e902b631655b7438235e805929b0d5", "sha256": "2ffa67dfb27eee514ff30eeb8e4b67830456ee5d80822e0c3a940f39d796f37b"}, "downloads": -1, "filename": "xmlr-0.3.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "c9e902b631655b7438235e805929b0d5", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 11469, "upload_time": "2016-08-16T08:53:00", "upload_time_iso_8601": "2016-08-16T08:53:00.027587Z", "url": "https://files.pythonhosted.org/packages/ac/ac/afc64d4cf5fd64bed18390e1b59058373f86f548b7caba2f80df68f5bf2f/xmlr-0.3.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cdcfd6aa5eaab531ca434b7ac6ff2f8d", "sha256": "5fed62f9a7f963796d1c01fdb36ebe0dee0c44f18ea281dc2674bb3530715516"}, "downloads": -1, "filename": "xmlr-0.3.1.tar.gz", "has_sig": false, "md5_digest": "cdcfd6aa5eaab531ca434b7ac6ff2f8d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8068, "upload_time": "2016-08-16T08:52:47", "upload_time_iso_8601": "2016-08-16T08:52:47.048313Z", "url": "https://files.pythonhosted.org/packages/15/8c/0048af8beff056b21fad4002a56233a9827ddc157dec38ba06f4413797b9/xmlr-0.3.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c9e902b631655b7438235e805929b0d5", "sha256": "2ffa67dfb27eee514ff30eeb8e4b67830456ee5d80822e0c3a940f39d796f37b"}, "downloads": -1, "filename": "xmlr-0.3.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "c9e902b631655b7438235e805929b0d5", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 11469, "upload_time": "2016-08-16T08:53:00", "upload_time_iso_8601": "2016-08-16T08:53:00.027587Z", "url": "https://files.pythonhosted.org/packages/ac/ac/afc64d4cf5fd64bed18390e1b59058373f86f548b7caba2f80df68f5bf2f/xmlr-0.3.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cdcfd6aa5eaab531ca434b7ac6ff2f8d", "sha256": "5fed62f9a7f963796d1c01fdb36ebe0dee0c44f18ea281dc2674bb3530715516"}, "downloads": -1, "filename": "xmlr-0.3.1.tar.gz", "has_sig": false, "md5_digest": "cdcfd6aa5eaab531ca434b7ac6ff2f8d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8068, "upload_time": "2016-08-16T08:52:47", "upload_time_iso_8601": "2016-08-16T08:52:47.048313Z", "url": "https://files.pythonhosted.org/packages/15/8c/0048af8beff056b21fad4002a56233a9827ddc157dec38ba06f4413797b9/xmlr-0.3.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:24:57 2020"}