{"info": {"author": "Mathieu Bridon", "author_email": "bochecha@daitauha.fr", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Framework :: Pelican :: Plugins", "License :: OSI Approved :: GNU Affero General Public License v3 or later (AGPLv3+)", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3 :: Only", "Topic :: Internet :: WWW/HTTP", "Topic :: Internet :: WWW/HTTP :: Site Management"], "description": "Blog aggregation, static-website style!\n=======================================\n\nThis is a plugin for the `Pelican`_ static site generator.\n\nIt allows generating a page aggregating blog articles from other web sites.\n\n.. _Pelican: https://getpelican.com\n\nUsage\n-----\n\nInstall this plugin::\n\n    $ pip install git+https://framagit.org/bochecha/pelican-planet#egg=pelican_planet\n\nThen, in your Pelican config file, enable the plugin::\n\n    PLUGINS = [\n        ...\n        'pelican_planet',\n        ...\n        ]\n\nNext, declare the feeds you want to aggregate in your Pelican config file::\n\n    PLANET_FEEDS = {\n        'Some amazing blog': 'https://example1.org/feeds/blog.atom.xml',\n        'Another great blog': 'http://example2.org/feeds/blog.atom.xml',\n        }\n\nWrite a `Jinja2`_ template for your aggregation page. For example, if the rest\nof your website is generated from Markdown pages, then create a\n``planet.md.tmpl`` file with the following contents::\n\n    Some blogs aggregated here.\n\n    {% for article in articles %}\n    # {{ article.title }}\n\n    {% endfor %}\n\nFinally, declare the template and destination page in your Pelican config file::\n\n    PLANET_TEMPLATE = 'planet.md.tmpl'\n    PLANET_PAGE = 'content/planet.md'\n\nThen rebuild your website as usual using the ``pelican`` command line, and you\nshould have your blog aggregation page.\n\nYou'll probably want to rebuild your website periodically though, maybe with a\nsystemd timer or a cron job, to always fetch the latest articles in the feeds\nyou aggregate.\n\n.. _Jinja2: http://jinja.pocoo.org/\n\nTemplate design\n---------------\n\nThe template for your aggregation page will be passed an ``articles`` variable,\ncontaining the list of articles aggregated.\n\nEach item of this list will have the following attributes:\n\n* ``title``: The title of the article;\n* ``updated``: The date at which the article was last updated, as a\n  timezone-aware ``datetime`` object;\n* ``author``: The author of the article;\n* ``link``: The URL to the article on its original website;\n* ``summary``: The summary text of the article;\n* ``feed_name``: The name of the feed from which the article originated, as\n  defined in the Pelican config file;\n\nOptional configuration\n----------------------\n\nYou can have more control on the generated page, by setting a few more options\nin your Pelican config file:\n\n* ``PLANET_MAX_ARTICLES``: The maximum number of articles to show on the page.\n\n  By default, all articles from all feeds will be added to the page.\n\n* ``PLANET_MAX_ARTICLES_PER_FEED``: The maximum of articles from a single feed\n  ending on the page.\n\n  By default all articles of a given feed are considered.\n\n* ``PLANET_MAX_SUMMARY_LENGTH``: The maximum number of words kept from the\n  summary.\n\n  By default the `summary` of the article will be the full text coming from\n  the feed.\n\nLegalities\n----------\n\npelican-planet is offered under the terms of the\n`GNU Affero General Public License, either version 3 or any later version`_.\n\nWe will never ask you to sign a copyright assignment or any other kind of\nsilly and tedious legal document before accepting your contributions.\n\nIn case you're wondering, we do **not** consider that a website built with\npelican-planet would need to be licensed under the AGPL.\n\n.. _GNU Affero General Public License, either version 3 or any later version: https://www.gnu.org/licenses/agpl.html\n\n\nRelease History\n===============\n\n0.9.1\n-----\n\nThis is a trivial release, fixing some release-related issues:\n\n* Moved to reStructuredText for the README/CHANGES files, as that's what Pypi\n  prefers;\n* Fixed the link to the AGPLv3+ license;\n* Added a missing Pypi classifier;\n* Added missing files to the dist tarball;\n\n0.9\n---\n\nInitial release:\n\n* Aggregates a list of feeds into a page generated by a template;\n* Optionally limits the total number of articles kept, as well as the number of\n  articles per feed;\n* Displays the full articles, or just short summaries;\n* Supports Python 3.4 and up;", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://framagit.org/bochecha/pelican-planet", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "pelican-planet", "package_url": "https://pypi.org/project/pelican-planet/", "platform": "", "project_url": "https://pypi.org/project/pelican-planet/", "project_urls": {"Homepage": "https://framagit.org/bochecha/pelican-planet"}, "release_url": "https://pypi.org/project/pelican-planet/0.9.1/", "requires_dist": null, "requires_python": "", "summary": "Blog aggregator plugin for Pelican", "version": "0.9.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"blog-aggregation-static-website-style\">\n<h2>Blog aggregation, static-website style!</h2>\n<p>This is a plugin for the <a href=\"https://getpelican.com\" rel=\"nofollow\">Pelican</a> static site generator.</p>\n<p>It allows generating a page aggregating blog articles from other web sites.</p>\n<div id=\"usage\">\n<h3>Usage</h3>\n<p>Install this plugin:</p>\n<pre>$ pip install git+https://framagit.org/bochecha/pelican-planet#egg=pelican_planet\n</pre>\n<p>Then, in your Pelican config file, enable the plugin:</p>\n<pre>PLUGINS = [\n    ...\n    'pelican_planet',\n    ...\n    ]\n</pre>\n<p>Next, declare the feeds you want to aggregate in your Pelican config file:</p>\n<pre>PLANET_FEEDS = {\n    'Some amazing blog': 'https://example1.org/feeds/blog.atom.xml',\n    'Another great blog': 'http://example2.org/feeds/blog.atom.xml',\n    }\n</pre>\n<p>Write a <a href=\"http://jinja.pocoo.org/\" rel=\"nofollow\">Jinja2</a> template for your aggregation page. For example, if the rest\nof your website is generated from Markdown pages, then create a\n<tt>planet.md.tmpl</tt> file with the following contents:</p>\n<pre>Some blogs aggregated here.\n\n{% for article in articles %}\n# {{ article.title }}\n\n{% endfor %}\n</pre>\n<p>Finally, declare the template and destination page in your Pelican config file:</p>\n<pre>PLANET_TEMPLATE = 'planet.md.tmpl'\nPLANET_PAGE = 'content/planet.md'\n</pre>\n<p>Then rebuild your website as usual using the <tt>pelican</tt> command line, and you\nshould have your blog aggregation page.</p>\n<p>You\u2019ll probably want to rebuild your website periodically though, maybe with a\nsystemd timer or a cron job, to always fetch the latest articles in the feeds\nyou aggregate.</p>\n</div>\n<div id=\"template-design\">\n<h3>Template design</h3>\n<p>The template for your aggregation page will be passed an <tt>articles</tt> variable,\ncontaining the list of articles aggregated.</p>\n<p>Each item of this list will have the following attributes:</p>\n<ul>\n<li><tt>title</tt>: The title of the article;</li>\n<li><tt>updated</tt>: The date at which the article was last updated, as a\ntimezone-aware <tt>datetime</tt> object;</li>\n<li><tt>author</tt>: The author of the article;</li>\n<li><tt>link</tt>: The URL to the article on its original website;</li>\n<li><tt>summary</tt>: The summary text of the article;</li>\n<li><tt>feed_name</tt>: The name of the feed from which the article originated, as\ndefined in the Pelican config file;</li>\n</ul>\n</div>\n<div id=\"optional-configuration\">\n<h3>Optional configuration</h3>\n<p>You can have more control on the generated page, by setting a few more options\nin your Pelican config file:</p>\n<ul>\n<li><p><tt>PLANET_MAX_ARTICLES</tt>: The maximum number of articles to show on the page.</p>\n<p>By default, all articles from all feeds will be added to the page.</p>\n</li>\n<li><p><tt>PLANET_MAX_ARTICLES_PER_FEED</tt>: The maximum of articles from a single feed\nending on the page.</p>\n<p>By default all articles of a given feed are considered.</p>\n</li>\n<li><p><tt>PLANET_MAX_SUMMARY_LENGTH</tt>: The maximum number of words kept from the\nsummary.</p>\n<p>By default the <cite>summary</cite> of the article will be the full text coming from\nthe feed.</p>\n</li>\n</ul>\n</div>\n<div id=\"legalities\">\n<h3>Legalities</h3>\n<p>pelican-planet is offered under the terms of the\n<a href=\"https://www.gnu.org/licenses/agpl.html\" rel=\"nofollow\">GNU Affero General Public License, either version 3 or any later version</a>.</p>\n<p>We will never ask you to sign a copyright assignment or any other kind of\nsilly and tedious legal document before accepting your contributions.</p>\n<p>In case you\u2019re wondering, we do <strong>not</strong> consider that a website built with\npelican-planet would need to be licensed under the AGPL.</p>\n</div>\n</div>\n<div id=\"release-history\">\n<h2>Release History</h2>\n<div id=\"id1\">\n<h3>0.9.1</h3>\n<p>This is a trivial release, fixing some release-related issues:</p>\n<ul>\n<li>Moved to reStructuredText for the README/CHANGES files, as that\u2019s what Pypi\nprefers;</li>\n<li>Fixed the link to the AGPLv3+ license;</li>\n<li>Added a missing Pypi classifier;</li>\n<li>Added missing files to the dist tarball;</li>\n</ul>\n</div>\n<div id=\"id2\">\n<h3>0.9</h3>\n<p>Initial release:</p>\n<ul>\n<li>Aggregates a list of feeds into a page generated by a template;</li>\n<li>Optionally limits the total number of articles kept, as well as the number of\narticles per feed;</li>\n<li>Displays the full articles, or just short summaries;</li>\n<li>Supports Python 3.4 and up;</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 4418726, "releases": {"0.9": [{"comment_text": "", "digests": {"md5": "1543340def1e63396f82e897d060bdd4", "sha256": "7d0fc04eb46af54ab4f1ebbf44a5888cb18f9f8ecaae1673e8a597ccc9f56701"}, "downloads": -1, "filename": "pelican-planet-0.9.tar.gz", "has_sig": true, "md5_digest": "1543340def1e63396f82e897d060bdd4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4388, "upload_time": "2017-05-15T09:55:23", "upload_time_iso_8601": "2017-05-15T09:55:23.305228Z", "url": "https://files.pythonhosted.org/packages/e5/74/9de8da8f8f4495ff36812da335c6452b0b67a140a985a23f4075740cd5ca/pelican-planet-0.9.tar.gz", "yanked": false}], "0.9.1": [{"comment_text": "", "digests": {"md5": "9ad461418e84afdba82898da8e78a481", "sha256": "298def5baeabe9c9b9d209cc9cead4d23ebafa2d5f86fca33e577f607c74d4ef"}, "downloads": -1, "filename": "pelican-planet-0.9.1.tar.gz", "has_sig": true, "md5_digest": "9ad461418e84afdba82898da8e78a481", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20539, "upload_time": "2017-05-15T17:39:22", "upload_time_iso_8601": "2017-05-15T17:39:22.013936Z", "url": "https://files.pythonhosted.org/packages/d5/16/ab4279fc612fe93cc1b68ce917840078a36d95d8f24ed56d000cbabc70de/pelican-planet-0.9.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "9ad461418e84afdba82898da8e78a481", "sha256": "298def5baeabe9c9b9d209cc9cead4d23ebafa2d5f86fca33e577f607c74d4ef"}, "downloads": -1, "filename": "pelican-planet-0.9.1.tar.gz", "has_sig": true, "md5_digest": "9ad461418e84afdba82898da8e78a481", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20539, "upload_time": "2017-05-15T17:39:22", "upload_time_iso_8601": "2017-05-15T17:39:22.013936Z", "url": "https://files.pythonhosted.org/packages/d5/16/ab4279fc612fe93cc1b68ce917840078a36d95d8f24ed56d000cbabc70de/pelican-planet-0.9.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:56:38 2020"}