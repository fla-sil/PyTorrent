{"info": {"author": "Miguel Garcia (aka Zeycus)", "author_email": "zeycus@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3.5", "Topic :: Utilities"], "description": "****************************\nTruly Binary Clock in Python\n****************************\n\n\nOverview\n========\n\nThere are many `binary clocks <https://en.wikipedia.org/wiki/Binary_clock>`_ and watches advertised on the Internet, it is even possible to actually buy wrist binary watches,\nfor instance in `Ledwatchstop <https://www.ledwatchstop.com/store/binary-c-5.html>`_. \nHowever, as far as I know they are only binary on the surface, measuring the time of the day \nconventionally, in hours + minutes. It's just that those two numbers are somehow represented in binary.\n\nModule **binary_clock** provides an implementation of what I consider a truly binary clock.\nThe first bit stands for the half of the day, 12 hours. The second, for the a quarter of a day, 6 hours, and so on.\nEach bit stands for an interval that is the half of the previous.\n\nFor instance, 11010000 represents 12 + 6 + 1.5 = 19.5, which means 7:30 PM.\n\nAnother way to see it is that 0.11010000 is the fraction of the day passed, in binary. So, 0.11010000 = 13/16 of a day.\n\n\nModes\n=======\n\nTwo modes are provided. The simplest option is to use flat colors, each bit is shown with a square of that color. The binary clock then\nlooks like this:\n\n.. image:: images/animation_flat.gif\n   :scale: 100 %\n   :alt: Binary clock with flat bits\n   :align: center\n\nBits should be read left-to-right, top-to-bottom. With this 4x4 format, it is suitable to stand as one icon more on the desktop.\n   \nIf you want to get fancy, the second mode allows you to choose any two equal-size images, one for on-bit and another for off-bit, getting something like:\n   \n.. image:: images/animation_image.gif\n   :scale: 70 %\n   :alt: Binary clock with images\n   :align: center\n\n\n   \nUsage\n===========\n\nAll the code is in file ``binclockWrapper.py``, launched by command line script ``binclock.py``. The arguments supported are\n\n``geometry``\n  mandatory argument of the form axb, where a and b are integer numbers. It provides the size of the grid of bits.\n\n``offset``\n  string that provides the initial offset from the bottom-right corner of the screen. For instance, '-1-43' is 1 pixel to the left\n  and 43 upwards. Clocks are draggable, you can move them once created.\n\n``side`` and ``color``\n  For the *flat* mode.\n  In the latter case, ``side`` is the number of pixels per side, and ``color`` a string in format '#rrggbb' in hexadecimal.\n  For instance, yellow is '#00ffff'.\n\n``imageon`` and ``imageoff``\n  Strings for filenames, for the *image* mode. If provided, options ``side`` and ``color`` are ignored.\n\n``borderwidth``\n  is the width of each bit inside its frame, in number of pixels.\n\n``bgcolor``\n  is the color of the frame, in '#rrggbb' format.\n\n``persistent``\n  is a flag that, if present, forces the clock to always stay on top of other windows.\n\n  \n---------\nExamples\n---------\n\nFlat mode:\n\n.. code-block:: bash\n\n  binclock --color=#30a0ff --side=10 --borderwidth=2 --bgcolor=#808080 --geometry=4x4 --persistent\n\nImage mode:\n\n.. code-block:: bash\n  \n  binclock --imageon=light_green_button.jpg --imageoff=dark_green_button.jpg  --borderwidth=3 --bgcolor=#808080 --geometry=1x12\n\n  \n\nObservations\n============\n\nThe blinking frequence of each bit is twice that of the previous bit. With 16 bits, the last one stands for 2^-16 days, more or less 1.318 seconds.\nSo, 16 bits is the closest you can get to the typical hours + minutes + seconds watch. If the value provided for ``geometry`` contains too many bits:\n\n    * The consumption of CPU time will be noticeable\n\n    * The computer/screen might not be fast enough to refresh bits with the speed that would be required.\n\nIn tests I performed, that limit of reasonable behaviour seems to be around 22 bits, but there seems to be little\npoint in using that many.\n\n\n  \n\nCollaboration\n=============\n\nYou may wish to improve or add features, in that case you are more than welcome, feel free to contact me at zeycus@gmail.com.\n\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/zeycus/binary_clock/", "keywords": "binary clock", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "binary_clock", "package_url": "https://pypi.org/project/binary_clock/", "platform": "Windows", "project_url": "https://pypi.org/project/binary_clock/", "project_urls": {"Homepage": "https://github.com/zeycus/binary_clock/"}, "release_url": "https://pypi.org/project/binary_clock/0.0.2/", "requires_dist": null, "requires_python": "", "summary": "Truly Binary Clock", "version": "0.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"overview\">\n<h2>Overview</h2>\n<p>There are many <a href=\"https://en.wikipedia.org/wiki/Binary_clock\" rel=\"nofollow\">binary clocks</a> and watches advertised on the Internet, it is even possible to actually buy wrist binary watches,\nfor instance in <a href=\"https://www.ledwatchstop.com/store/binary-c-5.html\" rel=\"nofollow\">Ledwatchstop</a>.\nHowever, as far as I know they are only binary on the surface, measuring the time of the day\nconventionally, in hours + minutes. It\u2019s just that those two numbers are somehow represented in binary.</p>\n<p>Module <strong>binary_clock</strong> provides an implementation of what I consider a truly binary clock.\nThe first bit stands for the half of the day, 12 hours. The second, for the a quarter of a day, 6 hours, and so on.\nEach bit stands for an interval that is the half of the previous.</p>\n<p>For instance, 11010000 represents 12 + 6 + 1.5 = 19.5, which means 7:30 PM.</p>\n<p>Another way to see it is that 0.11010000 is the fraction of the day passed, in binary. So, 0.11010000 = 13/16 of a day.</p>\n</div>\n<div id=\"modes\">\n<h2>Modes</h2>\n<p>Two modes are provided. The simplest option is to use flat colors, each bit is shown with a square of that color. The binary clock then\nlooks like this:</p>\n<img alt=\"Binary clock with flat bits\" class=\"align-center\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c8e69b7526241972efcb698e94ffaeaae375669c/696d616765732f616e696d6174696f6e5f666c61742e676966\">\n<p>Bits should be read left-to-right, top-to-bottom. With this 4x4 format, it is suitable to stand as one icon more on the desktop.</p>\n<p>If you want to get fancy, the second mode allows you to choose any two equal-size images, one for on-bit and another for off-bit, getting something like:</p>\n<img alt=\"Binary clock with images\" class=\"align-center\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/53acaf442ebb7883755864ed6738badbf55742af/696d616765732f616e696d6174696f6e5f696d6167652e676966\">\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>All the code is in file <tt>binclockWrapper.py</tt>, launched by command line script <tt>binclock.py</tt>. The arguments supported are</p>\n<dl>\n<dt><tt>geometry</tt></dt>\n<dd>mandatory argument of the form axb, where a and b are integer numbers. It provides the size of the grid of bits.</dd>\n<dt><tt>offset</tt></dt>\n<dd>string that provides the initial offset from the bottom-right corner of the screen. For instance, \u2018-1-43\u2019 is 1 pixel to the left\nand 43 upwards. Clocks are draggable, you can move them once created.</dd>\n<dt><tt>side</tt> and <tt>color</tt></dt>\n<dd>For the <em>flat</em> mode.\nIn the latter case, <tt>side</tt> is the number of pixels per side, and <tt>color</tt> a string in format \u2018#rrggbb\u2019 in hexadecimal.\nFor instance, yellow is \u2018#00ffff\u2019.</dd>\n<dt><tt>imageon</tt> and <tt>imageoff</tt></dt>\n<dd>Strings for filenames, for the <em>image</em> mode. If provided, options <tt>side</tt> and <tt>color</tt> are ignored.</dd>\n<dt><tt>borderwidth</tt></dt>\n<dd>is the width of each bit inside its frame, in number of pixels.</dd>\n<dt><tt>bgcolor</tt></dt>\n<dd>is the color of the frame, in \u2018#rrggbb\u2019 format.</dd>\n<dt><tt>persistent</tt></dt>\n<dd>is a flag that, if present, forces the clock to always stay on top of other windows.</dd>\n</dl>\n<div id=\"examples\">\n<h3>Examples</h3>\n<p>Flat mode:</p>\n<pre>binclock --color<span class=\"o\">=</span><span class=\"c1\">#30a0ff --side=10 --borderwidth=2 --bgcolor=#808080 --geometry=4x4 --persistent</span>\n</pre>\n<p>Image mode:</p>\n<pre>binclock --imageon<span class=\"o\">=</span>light_green_button.jpg --imageoff<span class=\"o\">=</span>dark_green_button.jpg  --borderwidth<span class=\"o\">=</span><span class=\"m\">3</span> --bgcolor<span class=\"o\">=</span><span class=\"c1\">#808080 --geometry=1x12</span>\n</pre>\n</div>\n</div>\n<div id=\"observations\">\n<h2>Observations</h2>\n<p>The blinking frequence of each bit is twice that of the previous bit. With 16 bits, the last one stands for 2^-16 days, more or less 1.318 seconds.\nSo, 16 bits is the closest you can get to the typical hours + minutes + seconds watch. If the value provided for <tt>geometry</tt> contains too many bits:</p>\n<blockquote>\n<ul>\n<li>The consumption of CPU time will be noticeable</li>\n<li>The computer/screen might not be fast enough to refresh bits with the speed that would be required.</li>\n</ul>\n</blockquote>\n<p>In tests I performed, that limit of reasonable behaviour seems to be around 22 bits, but there seems to be little\npoint in using that many.</p>\n</div>\n<div id=\"collaboration\">\n<h2>Collaboration</h2>\n<p>You may wish to improve or add features, in that case you are more than welcome, feel free to contact me at <a href=\"mailto:zeycus%40gmail.com\">zeycus<span>@</span>gmail<span>.</span>com</a>.</p>\n</div>\n\n          </div>"}, "last_serial": 3403515, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "eee0f5494f3c99eb86d523f12c51cf78", "sha256": "2ab66e140f741dc7494e0d30263780c9e683df67faa5ae8d9f6e8b239cec7646"}, "downloads": -1, "filename": "binary_clock-0.0.1.tar.gz", "has_sig": false, "md5_digest": "eee0f5494f3c99eb86d523f12c51cf78", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7436, "upload_time": "2017-12-09T12:05:49", "upload_time_iso_8601": "2017-12-09T12:05:49.521990Z", "url": "https://files.pythonhosted.org/packages/61/98/1f1e5478242b424f08fce9cb471f36fbf4cdeb0195c748ef43c9ef2319bd/binary_clock-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "d6716f04daffa8dc9446166bfff63cd2", "sha256": "95158b9672423b5c19111db3452b2baadc7aa8ff669ba10b499b0269d97d6c84"}, "downloads": -1, "filename": "binary_clock-0.0.2.tar.gz", "has_sig": false, "md5_digest": "d6716f04daffa8dc9446166bfff63cd2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 64563, "upload_time": "2017-12-09T12:12:57", "upload_time_iso_8601": "2017-12-09T12:12:57.527234Z", "url": "https://files.pythonhosted.org/packages/37/98/36df3e80bbf9ad012d84ec7806750de75c808bb71d188bbed2950c0ad71b/binary_clock-0.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d6716f04daffa8dc9446166bfff63cd2", "sha256": "95158b9672423b5c19111db3452b2baadc7aa8ff669ba10b499b0269d97d6c84"}, "downloads": -1, "filename": "binary_clock-0.0.2.tar.gz", "has_sig": false, "md5_digest": "d6716f04daffa8dc9446166bfff63cd2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 64563, "upload_time": "2017-12-09T12:12:57", "upload_time_iso_8601": "2017-12-09T12:12:57.527234Z", "url": "https://files.pythonhosted.org/packages/37/98/36df3e80bbf9ad012d84ec7806750de75c808bb71d188bbed2950c0ad71b/binary_clock-0.0.2.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:37:30 2020"}