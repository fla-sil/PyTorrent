{"info": {"author": "Mitchell Hashimoto", "author_email": "mitchell@kiip.me", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: System Administrators", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: System :: Systems Administration"], "description": "PyNagios\n========\n\nPyNagios is a simple Python library meant to make writing\n`Nagios <http://www.nagios.org/>`_ plugins much easier. Nagios\nplugins have `quite a few guidelines <http://nagiosplug.sourceforge.net/developer-guidelines.html>`_\nto adhere to, and PyNagios provides helpers to make this\neasy.\n\nInstall\n-------\n\nTo install, simply use ``pip`` or ``easy_install``::\n\n    pip install pynagios\n\nDocumentation\n-------------\n\nDocumentation for the latest version can always be found at\n`http://kiip.github.com/pynagios/latest <http://kiip.github.com/pynagios/latest>`_.\n\nFeatures\n--------\n\nThe core features supported by PyNagios:\n\n- Parsing command line arguments such that the standard expected\n  arguments (such as ``-H``, ``-w``, ``-c``) are accepted.\n- Returning proper POSIX exit code based on status.\n- Parsing Nagios range formats (such as \"@10:20\", \"~:50\", \"10\", etc.)\n- Outputting status and message.\n- Outputting performance data.\n\nExample\n-------\n\nWhat all these features result in is a concise, simple, and\nguidelines-compliant Python-based Nagios plugin::\n\n    from pynagios import Plugin\n\n    class UserCheck(Plugin):\n        \"\"\"\n        Nagios plugin to check how many users are logged into this\n        machine.\n        \"\"\"\n\n        def check(self):\n            # Get the number of logged in users, for now we hardcode\n            users = 27\n\n            # Build a response and exit. This `response_for_value` automatically\n            # creates a response with the proper status given the value and the\n            # warning/critical ranges passed in via the command line.\n            response = self.response_for_value(users, \"%d users\" % users)\n            response.set_perf_data(\"users\", users)\n            response.set_perf_data(\"another metric\", 27, \"MB\")\n            return response\n\n    if __name__ == 'main':\n        # Build the plugin instance and run it. This will also parse\n        # command line arguments by default.\n        UserCheck().check().exit()\n\nWhile the above example subclasses ``Plugin``, you're of course welcome\nto simply call `Plugin`s methods directly and build a ``Response``\nyourself.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://kiip.github.com/pynagios/", "keywords": "nagios,pynagios,monitoring", "license": "MIT License", "maintainer": null, "maintainer_email": null, "name": "pynagios", "package_url": "https://pypi.org/project/pynagios/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/pynagios/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://kiip.github.com/pynagios/"}, "release_url": "https://pypi.org/project/pynagios/0.1.1/", "requires_dist": null, "requires_python": null, "summary": "Python library to write Nagios plugins.", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>PyNagios is a simple Python library meant to make writing\n<a href=\"http://www.nagios.org/\" rel=\"nofollow\">Nagios</a> plugins much easier. Nagios\nplugins have <a href=\"http://nagiosplug.sourceforge.net/developer-guidelines.html\" rel=\"nofollow\">quite a few guidelines</a>\nto adhere to, and PyNagios provides helpers to make this\neasy.</p>\n<div id=\"install\">\n<h2>Install</h2>\n<p>To install, simply use <tt>pip</tt> or <tt>easy_install</tt>:</p>\n<pre>pip install pynagios\n</pre>\n</div>\n<div id=\"documentation\">\n<h2>Documentation</h2>\n<p>Documentation for the latest version can always be found at\n<a href=\"http://kiip.github.com/pynagios/latest\" rel=\"nofollow\">http://kiip.github.com/pynagios/latest</a>.</p>\n</div>\n<div id=\"features\">\n<h2>Features</h2>\n<p>The core features supported by PyNagios:</p>\n<ul>\n<li>Parsing command line arguments such that the standard expected\narguments (such as <tt><span class=\"pre\">-H</span></tt>, <tt><span class=\"pre\">-w</span></tt>, <tt><span class=\"pre\">-c</span></tt>) are accepted.</li>\n<li>Returning proper POSIX exit code based on status.</li>\n<li>Parsing Nagios range formats (such as \u201c@10:20\u201d, \u201c~:50\u201d, \u201c10\u201d, etc.)</li>\n<li>Outputting status and message.</li>\n<li>Outputting performance data.</li>\n</ul>\n</div>\n<div id=\"example\">\n<h2>Example</h2>\n<p>What all these features result in is a concise, simple, and\nguidelines-compliant Python-based Nagios plugin:</p>\n<pre>from pynagios import Plugin\n\nclass UserCheck(Plugin):\n    \"\"\"\n    Nagios plugin to check how many users are logged into this\n    machine.\n    \"\"\"\n\n    def check(self):\n        # Get the number of logged in users, for now we hardcode\n        users = 27\n\n        # Build a response and exit. This `response_for_value` automatically\n        # creates a response with the proper status given the value and the\n        # warning/critical ranges passed in via the command line.\n        response = self.response_for_value(users, \"%d users\" % users)\n        response.set_perf_data(\"users\", users)\n        response.set_perf_data(\"another metric\", 27, \"MB\")\n        return response\n\nif __name__ == 'main':\n    # Build the plugin instance and run it. This will also parse\n    # command line arguments by default.\n    UserCheck().check().exit()\n</pre>\n<p>While the above example subclasses <tt>Plugin</tt>, you\u2019re of course welcome\nto simply call <cite>Plugin`s methods directly and build a ``Response`</cite>\nyourself.</p>\n</div>\n\n          </div>"}, "last_serial": 797435, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "f4132043d8222364da1dbb68900ddaff", "sha256": "aeb2301649bc8f84afad4b4220a2c4cd1b7bed46d76f01534e966a3e61ab9150"}, "downloads": -1, "filename": "pynagios-0.1.0.tar.gz", "has_sig": false, "md5_digest": "f4132043d8222364da1dbb68900ddaff", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8794, "upload_time": "2011-07-29T00:24:41", "upload_time_iso_8601": "2011-07-29T00:24:41.354753Z", "url": "https://files.pythonhosted.org/packages/87/78/742731f5eb79b9c548cd6b0d7f00a5e71fb0648ea57f4564564ef9d3fb89/pynagios-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "ca1724333b3cd63259934b4271f3e6b6", "sha256": "3d4919c833436ca753807b46993769083ff144305cfe8646e2469ea0def49367"}, "downloads": -1, "filename": "pynagios-0.1.1.tar.gz", "has_sig": false, "md5_digest": "ca1724333b3cd63259934b4271f3e6b6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8888, "upload_time": "2011-08-02T00:30:29", "upload_time_iso_8601": "2011-08-02T00:30:29.018027Z", "url": "https://files.pythonhosted.org/packages/1f/4c/9495088c3a82866682a455bc6636b7a3935a2df221b529251f79db0e1695/pynagios-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ca1724333b3cd63259934b4271f3e6b6", "sha256": "3d4919c833436ca753807b46993769083ff144305cfe8646e2469ea0def49367"}, "downloads": -1, "filename": "pynagios-0.1.1.tar.gz", "has_sig": false, "md5_digest": "ca1724333b3cd63259934b4271f3e6b6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8888, "upload_time": "2011-08-02T00:30:29", "upload_time_iso_8601": "2011-08-02T00:30:29.018027Z", "url": "https://files.pythonhosted.org/packages/1f/4c/9495088c3a82866682a455bc6636b7a3935a2df221b529251f79db0e1695/pynagios-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:01:24 2020"}