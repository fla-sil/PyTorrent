{"info": {"author": "Ed J", "author_email": "mohawk2@users.noreply.github.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Framework :: Pytest", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: Implementation :: CPython", "Topic :: Software Development :: Testing"], "description": "==============\npytest-bdd-web\n==============\n\n.. image:: https://img.shields.io/pypi/v/pytest-bdd-web.svg\n    :target: https://pypi.org/project/pytest-bdd-web\n    :alt: PyPI version\n\n.. image:: https://img.shields.io/pypi/pyversions/pytest-bdd-web.svg\n    :target: https://pypi.org/project/pytest-bdd-web\n    :alt: Python versions\n\n.. image:: https://travis-ci.org/mohawk2/pytest-bdd-web.svg?branch=master\n    :target: https://travis-ci.org/mohawk2/pytest-bdd-web\n    :alt: See Build Status on Travis CI\n\n.. image:: https://ci.appveyor.com/api/projects/status/github/mohawk2/pytest-bdd-web?branch=master\n    :target: https://ci.appveyor.com/project/mohawk2/pytest-bdd-web/branch/master\n    :alt: See Build Status on AppVeyor\n\npytest plugin providing a BDD 'language' for web app integration-testing.\n\n----\n\nFeatures\n--------\n\nImplements a simple headless browser that requests web pages according\nto a URL mapping, parses web forms, and enables assertions about\nthe various web responses using PyQuery selectors (similar to jQuery).\n\nExample::\n\n    Feature: Homepage functionality\n        Scenario: Homepage\n            When the user requests list home\n            Then response 0 status code is \"200\"\n            And response 0 element \"#main_title\" contains 'Welcome'\n\n        Scenario: User profile\n            When the user requests view user_profile\n            Then response 0 status code is \"200\"\n            And response 0 element \"tr:contains('Balance')\" contains '45.67'\n            And response 0 form-contains-array-outline <arrayfield> <arrayvalue>\n\n            Examples:\n            | arrayfield | arrayvalue |\n            | choices    | [0 2 3]    |\n\n\nRequires you to provide these fixtures:\n\n    * client\n    * url_mapping\n\n`client` must implement `get` and `post` methods, compatible with\n`Flask.test_client`.\n\nExample::\n\n    @pytest.fixture\n    def app():\n        \"\"\"Create, configure a new app instance for each test.\"\"\"\n        \"...\"\n        return app\n\n    @pytest.fixture\n    def client(app):\n        return app.test_client()\n\n`url_mapping` must be a dictionary, with keys of top-level \"groups\",\nand values mapping a human-readable \"action\" to an absolute URL in\nyour web app.\n\nExample::\n\n    URL_MAPPING = {\n        'home': {\n            'list': '/',\n            'articles': '/latest/',\n        },\n        'user_profile': {\n            'view': '/user/profile/',\n            'update': '/user/profile/update',\n        },\n        'blog': {\n            'delete': '/blog/{}/delete', # {} gets filled from feature args\n        },\n    };\n    @pytest.fixture\n    def url_mapping():\n        return URL_MAPPING\n\n\nAvailable When Steps\n--------------------\n\n- the user requests {action} {what} *[args...]*\n\nWill operate on the URL looked up from the `url_mapping`, with\nany args substituted in for occurrences of `{}` in the mapped\nURL.\n\nExample::\n\n    When the user requests view user_profile\n\n- the user sets-array {afield} [{avalue}]\n\nSets a form value on the current web page.\n\nExample::\n\n    When the user sets-array choices [1 3 4]\n\n- the user sets-array-outline <arrayfield> <arrayvalue>\n\nSets a form value on the current web page.\n\nExample::\n\n    When the user sets-array-outline <arrayfield> <arrayvalue>\n\n    Examples:\n    | arrayfield | arrayvalue |\n    | choices    | [0 2 3]    |\n\n- the user sets {field} \"{value}\"\n\nSets a form value on the current web page.\n\nExample::\n\n    When the user sets fullname \"Big Bob\"\n\n- the user submits requests {action} {what} *[args...]*\n\nWill operate on the URL looked up from the `url_mapping`, with\nany args substituted in for occurrences of `{}` in the mapped\nURL.\n\nExample::\n\n    When the user submits delete blog 4ec2d70\n\n\nAvailable Then Steps\n--------------------\n\n- response {response_index:d} status code is \"{code:d}\"\n\nExample::\n\n    Then response 0 status code is \"200\"\n\n- response {response_index:d} shows element \"{selector}\"\n\nExample::\n\n    Then response 0 shows element \"div.success\"\n\n- response {response_index:d} form-contains-array-outline <arrayfield> <arrayvalue>\n\nThen-clause asserting about a given outline form-field having the given\noutline array value.\n\nExample::\n\n    Then response 0 form-contains-array-outline <arrayfield> <arrayvalue>\n\n    Examples:\n    | arrayfield | arrayvalue |\n    | choices    | [0 2 3]    |\n\n- response {response_index:d} json-has \"{key}\"\n\nExample::\n\n    Then response 0 json-has \"account_balance\"\n\n- response {response_index:d} json-contains \"{key}\" \"{phrase}\"\n\nExample::\n\n    Then response 0 json-contains \"account_balance\" \"45.67\"\n\n- response {response_index:d} doesn't show element \"{selector}\"\n\nExample::\n\n    Then response 0 doesn't show element \"div.alert\"\n\n- response {response_index:d} element \"{selector}\" doesn't contain '{phrase}'\n\nExample::\n\n    Then response 0 element \"#username\" doesn't contain 'bob'\n\n- response {response_index:d} element \"{selector}\" doesn't contain-outline <contains>\n\nThen-clause asserting about a PyQuery-selected element not containing an\noutline value.\n\nExample::\n\n    Then response 0 element \"#username\" doesn't contain 'bob'\n\n- response {response_index:d} element \"{selector}\" doesn't contain-outline <contains>\n\nThen-clause asserting about a PyQuery-selected element not containing an\noutline value.\n\nExample::\n\n    Then response 0 element \"#response\" doesn't contain-outline <contains>\n\n    Examples:\n    | contains |\n    | 0 items added |\n\n- response {response_index:d} element \"{selector}\" contains-outline <contains>\n\nThen-clause asserting about a PyQuery-selected element containing an\noutline value.\n\nExample::\n\n    Then response 0 element \"#username\" contains-outline <contains>\n\n    Examples:\n    | contains |\n    | Bob |\n\n\nRequirements\n------------\n\nPyQuery, pytest-bdd, mechanize\n\n\nInstallation\n------------\n\nYou can install \"pytest-bdd-web\" via `pip`_ from `PyPI`_::\n\n    $ pip install pytest-bdd-web\n\n\nContributing\n------------\nContributions are very welcome. Tests can be run with `tox`_, please ensure\nthe coverage at least stays the same before you submit a pull request.\n\nLicense\n-------\n\nDistributed under the terms of the `MIT`_ license, \"pytest-bdd-web\" is free and open source software\n\n\nIssues\n------\n\nIf you encounter any problems, please `file an issue`_ along with a detailed description.\n\n.. _`MIT`: http://opensource.org/licenses/MIT\n.. _`file an issue`: https://github.com/mohawk2/pytest-bdd-web/issues\n.. _`tox`: https://tox.readthedocs.io/en/latest/\n.. _`pip`: https://pypi.org/project/pip/\n.. _`PyPI`: https://pypi.org/project\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/mohawk2/pytest-bdd-web", "keywords": "", "license": "MIT", "maintainer": "Ed J", "maintainer_email": "mohawk2@users.noreply.github.com", "name": "pytest-bdd-web", "package_url": "https://pypi.org/project/pytest-bdd-web/", "platform": "", "project_url": "https://pypi.org/project/pytest-bdd-web/", "project_urls": {"Homepage": "https://github.com/mohawk2/pytest-bdd-web"}, "release_url": "https://pypi.org/project/pytest-bdd-web/0.1.1/", "requires_dist": ["pytest (>=3.5.0)", "pytest-bdd (>=3.2)", "mechanize (>=0.4.5)", "pyquery (>=1.4.1)"], "requires_python": ">=3.5", "summary": "A simple plugin to use with pytest", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://pypi.org/project/pytest-bdd-web\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/08f6692983549893e6ce015e9869ffb7357e4699/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f7079746573742d6264642d7765622e737667\"></a>\n<a href=\"https://pypi.org/project/pytest-bdd-web\" rel=\"nofollow\"><img alt=\"Python versions\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3ed1f55a0328bf3676ba902b6da6540eb3c94367/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f7079746573742d6264642d7765622e737667\"></a>\n<a href=\"https://travis-ci.org/mohawk2/pytest-bdd-web\" rel=\"nofollow\"><img alt=\"See Build Status on Travis CI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/cc2e7043783b4a59184f33f8aa18d6217d6e43cf/68747470733a2f2f7472617669732d63692e6f72672f6d6f6861776b322f7079746573742d6264642d7765622e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://ci.appveyor.com/project/mohawk2/pytest-bdd-web/branch/master\" rel=\"nofollow\"><img alt=\"See Build Status on AppVeyor\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/385faae7085237db7000cf9f8951a51c3df47f4c/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f6769746875622f6d6f6861776b322f7079746573742d6264642d7765623f6272616e63683d6d6173746572\"></a>\n<p>pytest plugin providing a BDD \u2018language\u2019 for web app integration-testing.</p>\n<hr class=\"docutils\">\n<div id=\"features\">\n<h2>Features</h2>\n<p>Implements a simple headless browser that requests web pages according\nto a URL mapping, parses web forms, and enables assertions about\nthe various web responses using PyQuery selectors (similar to jQuery).</p>\n<p>Example:</p>\n<pre>Feature: Homepage functionality\n    Scenario: Homepage\n        When the user requests list home\n        Then response 0 status code is \"200\"\n        And response 0 element \"#main_title\" contains 'Welcome'\n\n    Scenario: User profile\n        When the user requests view user_profile\n        Then response 0 status code is \"200\"\n        And response 0 element \"tr:contains('Balance')\" contains '45.67'\n        And response 0 form-contains-array-outline &lt;arrayfield&gt; &lt;arrayvalue&gt;\n\n        Examples:\n        | arrayfield | arrayvalue |\n        | choices    | [0 2 3]    |\n</pre>\n<p>Requires you to provide these fixtures:</p>\n<blockquote>\n<ul>\n<li>client</li>\n<li>url_mapping</li>\n</ul>\n</blockquote>\n<p><cite>client</cite> must implement <cite>get</cite> and <cite>post</cite> methods, compatible with\n<cite>Flask.test_client</cite>.</p>\n<p>Example:</p>\n<pre>@pytest.fixture\ndef app():\n    \"\"\"Create, configure a new app instance for each test.\"\"\"\n    \"...\"\n    return app\n\n@pytest.fixture\ndef client(app):\n    return app.test_client()\n</pre>\n<p><cite>url_mapping</cite> must be a dictionary, with keys of top-level \u201cgroups\u201d,\nand values mapping a human-readable \u201caction\u201d to an absolute URL in\nyour web app.</p>\n<p>Example:</p>\n<pre>URL_MAPPING = {\n    'home': {\n        'list': '/',\n        'articles': '/latest/',\n    },\n    'user_profile': {\n        'view': '/user/profile/',\n        'update': '/user/profile/update',\n    },\n    'blog': {\n        'delete': '/blog/{}/delete', # {} gets filled from feature args\n    },\n};\n@pytest.fixture\ndef url_mapping():\n    return URL_MAPPING\n</pre>\n</div>\n<div id=\"available-when-steps\">\n<h2>Available When Steps</h2>\n<ul>\n<li>the user requests {action} {what} <em>[args\u2026]</em></li>\n</ul>\n<p>Will operate on the URL looked up from the <cite>url_mapping</cite>, with\nany args substituted in for occurrences of <cite>{}</cite> in the mapped\nURL.</p>\n<p>Example:</p>\n<pre>When the user requests view user_profile\n</pre>\n<ul>\n<li>the user sets-array {afield} [{avalue}]</li>\n</ul>\n<p>Sets a form value on the current web page.</p>\n<p>Example:</p>\n<pre>When the user sets-array choices [1 3 4]\n</pre>\n<ul>\n<li>the user sets-array-outline &lt;arrayfield&gt; &lt;arrayvalue&gt;</li>\n</ul>\n<p>Sets a form value on the current web page.</p>\n<p>Example:</p>\n<pre>When the user sets-array-outline &lt;arrayfield&gt; &lt;arrayvalue&gt;\n\nExamples:\n| arrayfield | arrayvalue |\n| choices    | [0 2 3]    |\n</pre>\n<ul>\n<li>the user sets {field} \u201c{value}\u201d</li>\n</ul>\n<p>Sets a form value on the current web page.</p>\n<p>Example:</p>\n<pre>When the user sets fullname \"Big Bob\"\n</pre>\n<ul>\n<li>the user submits requests {action} {what} <em>[args\u2026]</em></li>\n</ul>\n<p>Will operate on the URL looked up from the <cite>url_mapping</cite>, with\nany args substituted in for occurrences of <cite>{}</cite> in the mapped\nURL.</p>\n<p>Example:</p>\n<pre>When the user submits delete blog 4ec2d70\n</pre>\n</div>\n<div id=\"available-then-steps\">\n<h2>Available Then Steps</h2>\n<ul>\n<li>response {response_index:d} status code is \u201c{code:d}\u201d</li>\n</ul>\n<p>Example:</p>\n<pre>Then response 0 status code is \"200\"\n</pre>\n<ul>\n<li>response {response_index:d} shows element \u201c{selector}\u201d</li>\n</ul>\n<p>Example:</p>\n<pre>Then response 0 shows element \"div.success\"\n</pre>\n<ul>\n<li>response {response_index:d} form-contains-array-outline &lt;arrayfield&gt; &lt;arrayvalue&gt;</li>\n</ul>\n<p>Then-clause asserting about a given outline form-field having the given\noutline array value.</p>\n<p>Example:</p>\n<pre>Then response 0 form-contains-array-outline &lt;arrayfield&gt; &lt;arrayvalue&gt;\n\nExamples:\n| arrayfield | arrayvalue |\n| choices    | [0 2 3]    |\n</pre>\n<ul>\n<li>response {response_index:d} json-has \u201c{key}\u201d</li>\n</ul>\n<p>Example:</p>\n<pre>Then response 0 json-has \"account_balance\"\n</pre>\n<ul>\n<li>response {response_index:d} json-contains \u201c{key}\u201d \u201c{phrase}\u201d</li>\n</ul>\n<p>Example:</p>\n<pre>Then response 0 json-contains \"account_balance\" \"45.67\"\n</pre>\n<ul>\n<li>response {response_index:d} doesn\u2019t show element \u201c{selector}\u201d</li>\n</ul>\n<p>Example:</p>\n<pre>Then response 0 doesn't show element \"div.alert\"\n</pre>\n<ul>\n<li>response {response_index:d} element \u201c{selector}\u201d doesn\u2019t contain \u2018{phrase}\u2019</li>\n</ul>\n<p>Example:</p>\n<pre>Then response 0 element \"#username\" doesn't contain 'bob'\n</pre>\n<ul>\n<li>response {response_index:d} element \u201c{selector}\u201d doesn\u2019t contain-outline &lt;contains&gt;</li>\n</ul>\n<p>Then-clause asserting about a PyQuery-selected element not containing an\noutline value.</p>\n<p>Example:</p>\n<pre>Then response 0 element \"#username\" doesn't contain 'bob'\n</pre>\n<ul>\n<li>response {response_index:d} element \u201c{selector}\u201d doesn\u2019t contain-outline &lt;contains&gt;</li>\n</ul>\n<p>Then-clause asserting about a PyQuery-selected element not containing an\noutline value.</p>\n<p>Example:</p>\n<pre>Then response 0 element \"#response\" doesn't contain-outline &lt;contains&gt;\n\nExamples:\n| contains |\n| 0 items added |\n</pre>\n<ul>\n<li>response {response_index:d} element \u201c{selector}\u201d contains-outline &lt;contains&gt;</li>\n</ul>\n<p>Then-clause asserting about a PyQuery-selected element containing an\noutline value.</p>\n<p>Example:</p>\n<pre>Then response 0 element \"#username\" contains-outline &lt;contains&gt;\n\nExamples:\n| contains |\n| Bob |\n</pre>\n</div>\n<div id=\"requirements\">\n<h2>Requirements</h2>\n<p>PyQuery, pytest-bdd, mechanize</p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>You can install \u201cpytest-bdd-web\u201d via <a href=\"https://pypi.org/project/pip/\" rel=\"nofollow\">pip</a> from <a href=\"https://pypi.org/project\" rel=\"nofollow\">PyPI</a>:</p>\n<pre>$ pip install pytest-bdd-web\n</pre>\n</div>\n<div id=\"contributing\">\n<h2>Contributing</h2>\n<p>Contributions are very welcome. Tests can be run with <a href=\"https://tox.readthedocs.io/en/latest/\" rel=\"nofollow\">tox</a>, please ensure\nthe coverage at least stays the same before you submit a pull request.</p>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>Distributed under the terms of the <a href=\"http://opensource.org/licenses/MIT\" rel=\"nofollow\">MIT</a> license, \u201cpytest-bdd-web\u201d is free and open source software</p>\n</div>\n<div id=\"issues\">\n<h2>Issues</h2>\n<p>If you encounter any problems, please <a href=\"https://github.com/mohawk2/pytest-bdd-web/issues\" rel=\"nofollow\">file an issue</a> along with a detailed description.</p>\n</div>\n\n          </div>"}, "last_serial": 6387184, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "bbbae1a2458a527878e602a804e04b21", "sha256": "18c5d8621485681bbc92906ac0b36c9480cbe619777d5850cfb8344e9cc1dd91"}, "downloads": -1, "filename": "pytest_bdd_web-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "bbbae1a2458a527878e602a804e04b21", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 6501, "upload_time": "2019-12-30T18:28:54", "upload_time_iso_8601": "2019-12-30T18:28:54.356901Z", "url": "https://files.pythonhosted.org/packages/fe/c2/a466ae17f328415829543471c4543d1fe746301834b8ecf65298ba4be027/pytest_bdd_web-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "275e4abef241dc6d13fbc852a13eaac6", "sha256": "879841dd8febec6eee5aec3051510784932e6b629ec514ee1a73431efd10aab8"}, "downloads": -1, "filename": "pytest-bdd-web-0.1.0.tar.gz", "has_sig": false, "md5_digest": "275e4abef241dc6d13fbc852a13eaac6", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 5835, "upload_time": "2019-12-30T18:28:57", "upload_time_iso_8601": "2019-12-30T18:28:57.026652Z", "url": "https://files.pythonhosted.org/packages/e8/1d/d53a668451038fa730ac9bb884d698c5effc9a3772b9de814259b4eec135/pytest-bdd-web-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "8e338e8f7201e07c0572906c06ade384", "sha256": "e67a7477f5f52ee28a140ce3e3ef3244a6bf6f29777bd0ede7516d8a5acaa161"}, "downloads": -1, "filename": "pytest_bdd_web-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "8e338e8f7201e07c0572906c06ade384", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 7037, "upload_time": "2020-01-02T18:15:15", "upload_time_iso_8601": "2020-01-02T18:15:15.820691Z", "url": "https://files.pythonhosted.org/packages/eb/2e/2902c1ade952bbbd0df99caa42ff70742c083234326592e31776760b1691/pytest_bdd_web-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "194fb337c89c477714ed2992e598bcb4", "sha256": "3f53fdbea2fb494869f943e26e75a685571cf2cd94fd2f40c267b9c4e8dff3f3"}, "downloads": -1, "filename": "pytest-bdd-web-0.1.1.tar.gz", "has_sig": false, "md5_digest": "194fb337c89c477714ed2992e598bcb4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 6420, "upload_time": "2020-01-02T18:15:18", "upload_time_iso_8601": "2020-01-02T18:15:18.344702Z", "url": "https://files.pythonhosted.org/packages/3e/6a/0624dc545cd165a376f5cad93c0a06bb22ecbb5b049cb2dcaeda8983ca8d/pytest-bdd-web-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "8e338e8f7201e07c0572906c06ade384", "sha256": "e67a7477f5f52ee28a140ce3e3ef3244a6bf6f29777bd0ede7516d8a5acaa161"}, "downloads": -1, "filename": "pytest_bdd_web-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "8e338e8f7201e07c0572906c06ade384", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 7037, "upload_time": "2020-01-02T18:15:15", "upload_time_iso_8601": "2020-01-02T18:15:15.820691Z", "url": "https://files.pythonhosted.org/packages/eb/2e/2902c1ade952bbbd0df99caa42ff70742c083234326592e31776760b1691/pytest_bdd_web-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "194fb337c89c477714ed2992e598bcb4", "sha256": "3f53fdbea2fb494869f943e26e75a685571cf2cd94fd2f40c267b9c4e8dff3f3"}, "downloads": -1, "filename": "pytest-bdd-web-0.1.1.tar.gz", "has_sig": false, "md5_digest": "194fb337c89c477714ed2992e598bcb4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 6420, "upload_time": "2020-01-02T18:15:18", "upload_time_iso_8601": "2020-01-02T18:15:18.344702Z", "url": "https://files.pythonhosted.org/packages/3e/6a/0624dc545cd165a376f5cad93c0a06bb22ecbb5b049cb2dcaeda8983ca8d/pytest-bdd-web-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:55:23 2020"}