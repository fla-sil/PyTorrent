{"info": {"author": "SAY Media Ltd.", "author_email": "python@saymedia.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Console", "Environment :: Web Environment", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: MacOS :: MacOS X", "Operating System :: POSIX", "Programming Language :: Python", "Topic :: Internet :: WWW/HTTP", "Topic :: Software Development :: Object Brokering"], "description": "remoteobjects are real subclassable Python objects on which you can build a\n        rich API library.\n        \n        remoteobjects provides easy coding and transfer between Python objects and a\n        JSON REST API. You can define the resources in a RESTful API as `RemoteObject`\n        classes and their properties. These objects then support using the basic HTTP\n        verbs to request and submit data to the API.\n        \n        remoteobjects have:\n        \n        * programmable conversion between Python objects and your API's JSON resource\n          format\n        \n        * full and correct HTTP support through the `httplib2` library, including\n          caching and authentication\n        \n        * delayed evaluation of objects to avoid unnecessary requests\n        \n        \n        Example\n        =======\n        \n        For example, you can build a simplified Twitter API library in the shell::\n        \n            >>> from remoteobjects import RemoteObject, fields, ListObject\n            >>> class Tweeter(RemoteObject):\n            ...     name        = fields.Field()\n            ...     screen_name = fields.Field()\n            ...     location    = fields.Field()\n            ...\n            >>> class Tweet(RemoteObject):\n            ...     text    = fields.Field()\n            ...     source  = fields.Field()\n            ...     tweeter = fields.Object(Tweeter, api_name='user')\n            ...\n            >>> class Timeline(ListObject):\n            ...     entries = fields.List(fields.Object(Tweet))\n            ...\n            >>> tweets = Timeline.get('http://twitter.com/statuses/public_timeline.json')\n            >>> [t.tweeter.screen_name for t in tweets.entries[0:3]]\n            ['eddeaux', 'CurtisLilly', '8email8']\n        \n        \n        For web APIs\n        ============\n        \n        `remoteobjects` is your Object RESTational Model for web APIs. You can define\n        each type of resource as a `RemoteObject` subclass, with all the resource's\n        member data specified as `remoteobjects.field.Field` instances for lightweight\n        typing.\n        \n        As provided, `remoteobjects` works with JSON REST APIs. Such an API should be\n        arranged as a series of resources available at URLs as JSON entities\n        (generally objects). The API server should support editing through ``POST``\n        and ``PUT`` requests, and return appropriate HTTP status codes for errors.\n        \n        The remoteobjects module is not *limited* to a particular kind of API. The\n        `RemoteObject` interface is provided in `DataObject`, `HttpObject`, and\n        `PromiseObject` layers you can reuse, extend, and override to tailor objects\n        to your target API.\n        \n        \n        Dictionaries with methods\n        =========================\n        \n        While you can use an HTTP module and plain JSON coding to convert API\n        resources into dictionaries, `remoteobjects` gives you real objects with\n        encapsulated behavior instead of processing with external functions. A\n        `RemoteObject` instance's behavior is clearly packaged in your `RemoteObject`\n        subclass, where it is not only enforced through use of the object interface\n        but extensible and replaceable through plain old subclassing.", "description_content_type": null, "docs_url": null, "download_url": null, "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/saymedia/remoteobjects", "keywords": null, "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "remoteobjects", "package_url": "https://pypi.org/project/remoteobjects/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/remoteobjects/", "project_urls": {"Homepage": "http://github.com/saymedia/remoteobjects"}, "release_url": "https://pypi.org/project/remoteobjects/1.2.1/", "requires_dist": null, "requires_python": null, "summary": "an Object RESTational Model", "version": "1.2.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            remoteobjects are real subclassable Python objects on which you can build a<br>        rich API library.<br>        <br>        remoteobjects provides easy coding and transfer between Python objects and a<br>        JSON REST API. You can define the resources in a RESTful API as `RemoteObject`<br>        classes and their properties. These objects then support using the basic HTTP<br>        verbs to request and submit data to the API.<br>        <br>        remoteobjects have:<br>        <br>        * programmable conversion between Python objects and your API's JSON resource<br>          format<br>        <br>        * full and correct HTTP support through the `httplib2` library, including<br>          caching and authentication<br>        <br>        * delayed evaluation of objects to avoid unnecessary requests<br>        <br>        <br>        Example<br>        =======<br>        <br>        For example, you can build a simplified Twitter API library in the shell::<br>        <br>            &gt;&gt;&gt; from remoteobjects import RemoteObject, fields, ListObject<br>            &gt;&gt;&gt; class Tweeter(RemoteObject):<br>            ...     name        = fields.Field()<br>            ...     screen_name = fields.Field()<br>            ...     location    = fields.Field()<br>            ...<br>            &gt;&gt;&gt; class Tweet(RemoteObject):<br>            ...     text    = fields.Field()<br>            ...     source  = fields.Field()<br>            ...     tweeter = fields.Object(Tweeter, api_name='user')<br>            ...<br>            &gt;&gt;&gt; class Timeline(ListObject):<br>            ...     entries = fields.List(fields.Object(Tweet))<br>            ...<br>            &gt;&gt;&gt; tweets = Timeline.get('http://twitter.com/statuses/public_timeline.json')<br>            &gt;&gt;&gt; [t.tweeter.screen_name for t in tweets.entries[0:3]]<br>            ['eddeaux', 'CurtisLilly', '8email8']<br>        <br>        <br>        For web APIs<br>        ============<br>        <br>        `remoteobjects` is your Object RESTational Model for web APIs. You can define<br>        each type of resource as a `RemoteObject` subclass, with all the resource's<br>        member data specified as `remoteobjects.field.Field` instances for lightweight<br>        typing.<br>        <br>        As provided, `remoteobjects` works with JSON REST APIs. Such an API should be<br>        arranged as a series of resources available at URLs as JSON entities<br>        (generally objects). The API server should support editing through ``POST``<br>        and ``PUT`` requests, and return appropriate HTTP status codes for errors.<br>        <br>        The remoteobjects module is not *limited* to a particular kind of API. The<br>        `RemoteObject` interface is provided in `DataObject`, `HttpObject`, and<br>        `PromiseObject` layers you can reuse, extend, and override to tailor objects<br>        to your target API.<br>        <br>        <br>        Dictionaries with methods<br>        =========================<br>        <br>        While you can use an HTTP module and plain JSON coding to convert API<br>        resources into dictionaries, `remoteobjects` gives you real objects with<br>        encapsulated behavior instead of processing with external functions. A<br>        `RemoteObject` instance's behavior is clearly packaged in your `RemoteObject`<br>        subclass, where it is not only enforced through use of the object interface<br>        but extensible and replaceable through plain old subclassing.\n          </div>"}, "last_serial": 1173104, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "d5d94c9b64f9ba6916d8f41e669f271f", "sha256": "9c7c29b9a8bcca213a81c53de7e3a7f51ba347f9874a53373820ba9ab3b31870"}, "downloads": -1, "filename": "remoteobjects-1.0.tar.gz", "has_sig": false, "md5_digest": "d5d94c9b64f9ba6916d8f41e669f271f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24111, "upload_time": "2009-10-01T01:54:20", "upload_time_iso_8601": "2009-10-01T01:54:20.480490Z", "url": "https://files.pythonhosted.org/packages/9e/79/c572e2dc6eed7e2542ad056ea2131c1a9cde7d872455565b3a03500f11b8/remoteobjects-1.0.tar.gz", "yanked": false}], "1.1": [{"comment_text": "", "digests": {"md5": "5f854da784b1624520cc74e13a0597a7", "sha256": "dfa1cbb2777e7fc947be8c0c9b6b738927f105ba4085291e858536370ea17ccd"}, "downloads": -1, "filename": "remoteobjects-1.1.tar.gz", "has_sig": false, "md5_digest": "5f854da784b1624520cc74e13a0597a7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 35260, "upload_time": "2009-11-24T21:10:25", "upload_time_iso_8601": "2009-11-24T21:10:25.404201Z", "url": "https://files.pythonhosted.org/packages/79/ca/6af66316509378f54648e3c90f0d662cc956dd26f645ad6b866525d837ab/remoteobjects-1.1.tar.gz", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "653662ac98811f3de0a29b678243e57b", "sha256": "59dc8e5c7d6872f8bee3872a0e3acf707463128c9f3ec39b235b47b17d59cd14"}, "downloads": -1, "filename": "remoteobjects-1.1.1.tar.gz", "has_sig": false, "md5_digest": "653662ac98811f3de0a29b678243e57b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 35821, "upload_time": "2010-07-08T23:14:34", "upload_time_iso_8601": "2010-07-08T23:14:34.850622Z", "url": "https://files.pythonhosted.org/packages/be/81/f8fb3277fe1af331e35435edda696d79abe5b1bdf9e912b4287e4f01ad36/remoteobjects-1.1.1.tar.gz", "yanked": false}], "1.2.1": [{"comment_text": "", "digests": {"md5": "05efb117c824cf954264b10194f6a4f6", "sha256": "f69c439b061f61306b72c0ac5cf4e026a6fa4a3d602434a7a875604a4ad3d009"}, "downloads": -1, "filename": "remoteobjects-1.2.1.tar.gz", "has_sig": false, "md5_digest": "05efb117c824cf954264b10194f6a4f6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 432199, "upload_time": "2012-05-21T18:49:11", "upload_time_iso_8601": "2012-05-21T18:49:11.942111Z", "url": "https://files.pythonhosted.org/packages/0c/38/05e006c165c5e495794008bdee38d7194f530cada337a83c18ccf8e2bffc/remoteobjects-1.2.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "05efb117c824cf954264b10194f6a4f6", "sha256": "f69c439b061f61306b72c0ac5cf4e026a6fa4a3d602434a7a875604a4ad3d009"}, "downloads": -1, "filename": "remoteobjects-1.2.1.tar.gz", "has_sig": false, "md5_digest": "05efb117c824cf954264b10194f6a4f6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 432199, "upload_time": "2012-05-21T18:49:11", "upload_time_iso_8601": "2012-05-21T18:49:11.942111Z", "url": "https://files.pythonhosted.org/packages/0c/38/05e006c165c5e495794008bdee38d7194f530cada337a83c18ccf8e2bffc/remoteobjects-1.2.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:04:51 2020"}