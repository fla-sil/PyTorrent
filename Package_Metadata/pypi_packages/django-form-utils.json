{"info": {"author": "Carl Meyer", "author_email": "carl@oddbird.net", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Web Environment", "Framework :: Django", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3"], "description": "=================\ndjango-form-utils\n=================\n\nThis application provides utilities for enhancing Django's form handling:\n\n    1. ``BetterForm`` and ``BetterModelForm`` classes, which are\n       subclasses of ``django.forms.Form`` and\n       ``django.forms.ModelForm``, respectively.  ``BetterForm`` and\n       ``BetterModelForm`` allow subdivision of forms into fieldsets\n       which are iterable from a template, and also allow definition\n       of ``row_attrs`` which can be accessed from the template to\n       apply attributes to the surrounding container (<li>, <tr>, or\n       whatever) of a specific form field.\n\n    2. A variety of small template filters that are useful for giving template\n       authors more control over custom rendering of forms without needing to\n       edit Python code: `label`_, `value_text`_, `selected_values`_,\n       `optional`_, `is_checkbox`_, and `is_multiple`_.\n\n    2. A ``ClearableFileField`` to enhance ``FileField`` and\n       ``ImageField`` with a checkbox for clearing the contents of the\n       field.\n\n    3. An ``ImageWidget`` which display a thumbnail of the image\n       rather than just the filename.\n\n    4. An ``AutoResizeTextarea`` widget which auto-resizes to\n       accommodate its contents.\n\n\nInstallation\n============\n\nInstall from PyPI with ``easy_install`` or ``pip``::\n\n    pip install django-form-utils\n\nTo use ``django-form-utils`` in your Django project, just include\n``form_utils`` in your INSTALLED_APPS setting.  ``django-form-utils`` does\nnot provide any models, but including it in INSTALLED_APPS makes the\n``form_utils`` template tag library available.\n\nYou may also want to override the default form rendering templates by\nproviding alternate templates at ``templates/form_utils/better_form.html``\nand ``templates/form_utils/form.html``.\n\nDependencies\n------------\n\n``django-form-utils`` is tested on `Django`_ 1.4 and later and `Python`_ 2.6,\n2.7, and 3.3. It is known to be incompatible with Python 3.0, 3.1, and 3.2.\n\n`ImageWidget`_ requires the `Python Imaging Library`_.\n`sorl-thumbnail`_ or `easy-thumbnails`_ is optional, but without it\nfull-size images will be displayed instead of thumbnails. The default\nthumbnail size is 200px x 200px.\n\n`AutoResizeTextarea`_ requires `jQuery`_ (by default using a\nGoogle-served version; see `JQUERY_URL`_).\n\n.. _Django: http://www.djangoproject.com/\n.. _Python: http://www.python.org/\n.. _sorl-thumbnail: http://pypi.python.org/pypi/sorl-thumbnail\n.. _easy-thumbnails: http://pypi.python.org/pypi/easy-thumbnails\n.. _Python Imaging Library: http://python-imaging.github.io/\n.. _jQuery: http://www.jquery.com/\n\nUsage\n=====\n\nBetterForm\n----------\n\nSimply inherit your form class from ``form_utils.forms.BetterForm`` (rather\nthan ``django.forms.Form``), or your modelform class from\n``form_utils.forms.BetterModelForm``, and define the ``fieldsets`` and/or\n``row_attrs`` attributes of the inner Meta class::\n\n    class MyForm(BetterForm):\n        one = forms.CharField()\n        two = forms.CharField()\n        three = forms.CharField()\n        class Meta:\n            fieldsets = [('main', {'fields': ['two'], 'legend': ''}),\n                         ('Advanced', {'fields': ['three', 'one'],\n                                       'description': 'advanced stuff',\n                                       'classes': ['advanced', 'collapse']})]\n            row_attrs = {'one': {'style': 'display: none'}}\n\nfieldsets\n'''''''''\n\nFieldset definitions are similar to ModelAdmin fieldset definitions:\neach fieldset is a two-tuple with a name and an options\ndictionary. Valid fieldset options in the dictionary include:\n\n``fields``\n  (required) A tuple of field names to display in this fieldset.\n\n``classes``\n  A tuple/list of extra CSS classes to apply to the fieldset.\n\n``legend``\n  This value, if present, will be the contents of a ``legend``\n  tag to open the fieldset.  If not present the name of the fieldset will\n  be used (so a value of '' for legend must be used if no legend is\n  desired.)\n\n``description``\n  A string of optional extra text to be displayed\n  under the ``legend`` of the fieldset.\n\nWhen iterated over, the ``fieldsets`` attribute of a ``BetterForm``\n(or ``BetterModelForm``) yields ``Fieldset`` s.  Each ``Fieldset`` has\na ``name`` attribute, a ``legend`` attribute, a ``classes`` attribute\n(the ``classes`` tuple collapsed into a space-separated string), and a\n``description`` attribute, and when iterated over yields its\n``BoundField`` s.\n\nFor backwards compatibility, a ``BetterForm`` or ``BetterModelForm`` can\nstill be iterated over directly to yield all of its ``BoundField`` s,\nregardless of fieldsets.\n\nIf you set ``fieldsets`` on a ``BetterModelForm`` and don't set either\nthe ``fields`` or ``exclude`` options on that form class,\n``BetterModelForm`` will set ``fields`` to be the list of all fields\npresent in your ``fieldsets`` definition. This avoids problems with\nforms that can't validate because not all fields are listed in a\n``fieldset``. If you manually set either ``fields`` or ``exclude``,\n``BetterModelForm`` assumes you know what you're doing and doesn't\ntouch those definitions, even if they don't match the fields listed in\nyour fieldsets.\n\nFor more detailed examples, see the tests in ``tests/tests.py``.\n\nrow_attrs\n'''''''''\n\nThe row_attrs declaration is a dictionary mapping field names to\ndictionaries of attribute/value pairs.  The attribute/value\ndictionaries will be flattened into HTML-style attribute/values\n(i.e. {'style': 'display: none'} will become ``style=\"display:\nnone\"``), and will be available as the ``row_attrs`` attribute of the\n``BoundField``.\n\nA ``BetterForm`` or ``BetterModelForm`` will add a CSS class of\n\"required\" or \"optional\" automatically to the row_attrs of each\n``BoundField`` depending on whether the field is required, and will\nalso add a CSS class of \"error\" if the field has errors.\n\nRendering\n'''''''''\n\nA possible template for rendering a ``BetterForm``::\n\n    {% if form.non_field_errors %}{{ form.non_field_errors }}{% endif %}\n    {% for fieldset in form.fieldsets %}\n      <fieldset class=\"{{ fieldset.classes }}\">\n      {% if fieldset.legend %}\n        <legend>{{ fieldset.legend }}</legend>\n      {% endif %}\n      {% if fieldset.description %}\n        <p class=\"description\">{{ fieldset.description }}</p>\n      {% endif %}\n      <ul>\n      {% for field in fieldset %}\n        {% if field.is_hidden %}\n          {{ field }}\n        {% else %}\n          <li{{ field.row_attrs }}>\n            {{ field.errors }}\n            {{ field.label_tag }}\n            {{ field }}\n          </li>\n        {% endif %}\n      {% endfor %}\n      </ul>\n      </fieldset>\n    {% endfor %}\n\n\nOne can also access the fieldset directly if any special casing needs to be\ndone, e.g.::\n\n    {% for field in form.fieldsets.main %}\n        ...\n    {% endfor %}\n\n``django-form-utils`` also provides a convenience template filter,\n``render``.  It is used like this::\n\n    {% load form_utils %}\n\n    {{ form|render }}\n\nBy default, it will check whether the form is a ``BetterForm``, and if\nso render it using the template ``form_utils/better_form.html``.  If\nnot, it will render it using the template ``form_utils/form.html``.\n(In either case, the form object will be passed to the render\ntemplate's context as ``form``).\n\nThe render filter also accepts an optional argument, which is a\ntemplate name or comma-separated list of template names to use for\nrendering the form::\n\n    {{ form|render:\"my_form_stuff/custom_form_template.html\" }}\n\n\nUtility Filters\n---------------\n\nAll the below filters require ``{% load form_utils %}`` in the template where\nthey are used.\n\nThese filters are complementary to the useful filters found in the\n`django-widget-tweaks`_ library for setting arbitrary attributes and classes on\nform field widgets; thus such filters are not provided in\n``django-form-utils``.\n\n.. _django-widget-tweaks: http://pypi.python.org/pypi/django-widget-tweaks\n\n\nlabel\n'''''\n\nRender a label tag for the given form field by rendering the template\n``forms/_label.html`` with the context ``field`` (the boundfield object),\n``id`` (the form field id attribute), and ``label_text``.\n\nBy default the Python-defined label text for the form field is used, but\nalternate label text can be provided as an argument to the filter::\n\n    {{ form.fieldname|label:\"Alternate label\" }}\n\n\nvalue_text\n''''''''''\n\nDisplay the current value of the given form field in a human-readable way\n(i.e. display labels for choice values rather than the internal value). The\ncurrent value may be the default value (for first-time rendering of a form) or\nthe previously-input value (for repeat rendering of a form with\nerrors). Usage::\n\n    {{ form.fieldname|value_text }}\n\n\nselected_values\n'''''''''''''''\n\nSimilar to `value_text`_, but for use with multiple-select form fields, and\nreturns a list of selected values rather than a single string. Usage::\n\n    <ul>\n      {% for selected_value in form.multiselect|selected_values %}\n        <li>{{ selected_value }}</li>\n      {% endfor %}\n    </ul>\n\n\noptional\n''''''''\n\nReturn ``True`` if the given field is optional, ``False`` if it is\nrequired. Sample usage::\n\n    {% if form.fieldname|optional %}(optional){% endif %}\n\n\nis_checkbox\n'''''''''''\n\nReturn ``True`` if the given field's widget is a ``CheckboxInput``, ``False``\notherwise. Sample usage::\n\n    {% if form.fieldname|is_checkbox %}\n      {{ form.fieldname }}\n      {{ form.fieldname|label }}\n    {% else %}\n      {{ form.fieldname|label }}\n      {{ form.fieldname }}\n    {% endif %}\n\n\nis_multiple\n'''''''''''\n\nReturn ``True`` if the given field is a ``MultipleChoiceField``, ``False``\notherwise. Sample usage::\n\n    {% if form.fieldname|is_multiple %}\n      {% for value in form.fieldname|selected_values %}{{ value }} {% endif %}\n    {% else %}\n      {{ form.fieldname|value_text }}\n    {% endif %}\n\n\n\nClearableFileField\n------------------\n\nA replacement for ``django.forms.FileField`` that has a checkbox to\nclear the field of an existing file. Use as you would any other form\nfield class::\n\n    from django import forms\n\n    from form_utils.fields import ClearableFileField\n\n    class MyModelForm(forms.ModelForm):\n        pdf = ClearableFileField()\n\n``ClearableFileField`` also accepts two keyword arguments,\n``file_field`` and ``template``.\n\n``file_field`` is the instantiated field to actually use for\nrepresenting the file portion. For instance, if you want to use\n``ClearableFileField`` to replace an ``ImageField``, and you want to\nuse `ImageWidget`_, you could do the following::\n\n    from django import forms\n\n    from form_utils.fields import ClearableFileField\n    from form_utils.widgets import ImageWidget\n\n    class MyModelForm(forms.ModelForm):\n        avatar = ClearableFileField(\n            file_field=forms.ImageField(widget=ImageWidget))\n\nBy default, ``file_field`` is a plain ``forms.FileField`` with the\ndefault ``forms.FileInput`` widget.\n\n``template`` is a string defining how the ``FileField`` (or\nalternative ``file_field``) and the clear checkbox are displayed in\nrelation to each other. The template string should contain variable\ninterpolation markers ``%(input)s`` and ``%(checkbox)s``. The default\nvalue is ``%(input)s Clear: %(checkbox)s``.\n\nTo use ``ClearableFileField`` in the admin; just inherit your admin\noptions class from ``form_utils.admin.ClearableFileFieldsAdmin``\ninstead of ``django.contrib.admin.ModelAdmin``, and all ``FileField``s\nand ``ImageField``s in that model will automatically be made clearable\n(while still using the same file/image field/widget they would have\notherwise, including any overrides you provide in\n``formfield_overrides``).\n\nClearableImageField\n-------------------\n\n``form_utils.fields.ClearableImageField`` is just a\n``ClearableFileField`` with the default file field set to\n``forms.ImageField`` rather than ``forms.FileField``.\n\nImageWidget\n-----------\n\nA widget for representing an ``ImageField`` that includes a thumbnail\nof the current image in the field, not just the name of the\nfile. (Thumbnails only available if `sorl-thumbnail`_ is installed;\notherwise the full-size image is displayed). To use, just pass in as\nthe widget class for an ``ImageField``::\n\n    from django import forms\n     \n    from form_utils.widgets import ImageWidget\n    \n    class MyForm(forms.Form):\n        pic = forms.ImageField(widget=ImageWidget())\n\n``ImageWidget`` accepts a keyword argument, ``template``. This is a\nstring defining how the image thumbnail and the file input widget are\nrendered relative to each other. The template string should contain\nvariable interpolation markers ``%(input)s`` and ``%(image)s``. The\ndefault value is ``%(input)s<br />%(image)s``. For example, to display\nthe image above the input rather than below::\n\n    pic = forms.ImageField(\n        widget=ImageWidget(template='%(image)s<br />%(input)s'))\n\nTo use in the admin, set as the default widget for ``ImageField``\nusing ``formfield_overrides``::\n\n    from django.db import models\n\n    from form_utils.widgets import ImageWidget\n\n    class MyModelAdmin(admin.ModelAdmin):\n        formfield_overrides = { models.ImageField: {'widget': ImageWidget}}\n\n.. _sorl-thumbnail: http://pypi.python.org/pypi/sorl-thumbnail\n\nAutoResizeTextarea\n------------------\n\nJust import the widget and assign it to a form field::\n\n    from django import forms\n    from form_utils.widgets import AutoResizeTextarea\n    \n    class MyForm(forms.Form):\n        description = forms.CharField(widget=AutoResizeTextarea())\n\nOr use it in ``formfield_overrides`` in your ``ModelAdmin`` subclass::\n\n    from django import forms\n    from django.contrib import admin\n    from form_utils.widgets import AutoResizeTextarea\n    \n    class MyModelAdmin(admin.ModelAdmin):\n        formfield_overrides = {forms.CharField: {'widget': AutoResizeTextarea()}}\n\nThere is also an ``InlineAutoResizeTextarea``, which simply provides\nsmaller default sizes suitable for use in a tabular inline.\n\nSettings\n========\n\n\nJQUERY_URL\n----------\n\n`AutoResizeTextarea`_ requires the jQuery Javascript library.  By\ndefault, ``django-form-utils`` links to the most recent minor version\nof jQuery 1.8 available at ajax.googleapis.com (via the URL\n``http://ajax.googleapis.com/ajax/libs/jquery/1.8/jquery.min.js``).\nIf you wish to use a different version of jQuery, or host it yourself,\nset the JQUERY_URL setting.  For example::\n\n    JQUERY_URL = 'jquery.min.js'\n\nThis will use the jQuery available at STATIC_URL/jquery.min.js. Note\nthat a relative ``JQUERY_URL`` is relative to ``STATIC_URL``.\n\n\nCHANGES\n=======\n\n1.0.3 (2015-08-25)\n------------------\n\n- Fixed compatibility with Django 1.9. Fixed GH-12.\n\n1.0.2 (2014-09-08)\n------------------\n\n- Fixed compatibility with Django 1.7. Fixed BB-20 and GH-8.\n\n1.0.1 (2013-10-19)\n------------------\n\n- Removed invalid uses of ``python_2_unicode_compatible`` that broke with\n  https://github.com/django/django/commit/589dc49e129f63801c54c15e408c944a345b3dfe\n  Thanks ocZio for the report.\n\n- Fixed inheritance of form Meta class. Thanks chmodas. Fixed BB-16.\n\n1.0 (2013.08.22)\n----------------\n\n- Add Python 3.3 compatibility. Thanks chmodas! (Merge of GH-5.)\n\n0.3.1 (2013.06.25)\n------------------\n\n- Call ``FileInput.render`` from ``ImageWidget.render``, ensuring no value is\n  output in HTML. Fixes GH-4. Thanks Aron Griffis.\n\n0.3.0 (2013.06.04)\n------------------\n\n- BACKWARDS-INCOMPATIBLE: Renamed template tag library from ``form_utils_tags``\n  to ``form_utils``.\n\n- BACKWARDS-INCOMPATIBLE: Removed ``FORM_UTILS_MEDIA_URL`` setting and updated\n  to use ``STATIC_URL`` rather than ``MEDIA_URL`` throughout.\n\n- Added \"error\" class to row_attrs for fields with errors. Thanks Aron\n  Griffis.\n\n- Dropped explicit support for Django versions prior to 1.4 and Python\n  versions prior to 2.6.\n\n0.2.0 (2011.01.28)\n------------------\n\n- Add width and height arguments to ImageWidget.\n\n- Make ImageWidget image-detection backend-friendly, no direct use of\n  PIL. Fixes issue #7.\n\n- Fix default templates' rendering of labels for radio/checkbox inputs.\n\n- Fix error redisplaying bound form with ClearableFileField.\n\n- Automatically set ``fields`` on ``BetterModelForm`` to list of fields\n  present in ``fieldsets``, if ``fields`` or ``exclude`` are not set\n  manually.\n\n- Updated to allow ``__getitem__`` access to fieldsets.\n\n0.1.8 (2010.03.16)\n------------------\n\n- Restrict PIL import to ImageWidget only\n\n- Added AutoResizeTextarea\n\n0.1.7 (2009.12.02)\n------------------\n\n- Fix ClearableFileField import in admin.py.\n\n0.1.6 (2009.11.24)\n------------------\n\n- Added documentation and tests for ``ImageWidget`` and\n  ``ClearableFileField``.\n\n- Moved ``ClearableFileField`` from ``widgets.py`` to ``fields.py``.\n\n- Converted doctests to unittests.\n\n0.1.5 (2009.11.10)\n--------------------------\n\n- Added fieldset classes (previously existed only as a figment of the\n  documentation).\n\n0.1.0 (2009-03-26)\n------------------\n\n- Initial public release.", "description_content_type": null, "docs_url": null, "download_url": null, "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://bitbucket.org/carljm/django-form-utils/", "keywords": null, "license": null, "maintainer": null, "maintainer_email": null, "name": "django-form-utils", "package_url": "https://pypi.org/project/django-form-utils/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/django-form-utils/", "project_urls": {"Homepage": "http://bitbucket.org/carljm/django-form-utils/"}, "release_url": "https://pypi.org/project/django-form-utils/1.0.3/", "requires_dist": null, "requires_python": null, "summary": "Form utilities for Django", "version": "1.0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>This application provides utilities for enhancing Django\u2019s form handling:</p>\n<blockquote>\n<ol>\n<li><tt>BetterForm</tt> and <tt>BetterModelForm</tt> classes, which are\nsubclasses of <tt>django.forms.Form</tt> and\n<tt>django.forms.ModelForm</tt>, respectively.  <tt>BetterForm</tt> and\n<tt>BetterModelForm</tt> allow subdivision of forms into fieldsets\nwhich are iterable from a template, and also allow definition\nof <tt>row_attrs</tt> which can be accessed from the template to\napply attributes to the surrounding container (&lt;li&gt;, &lt;tr&gt;, or\nwhatever) of a specific form field.</li>\n<li>A variety of small template filters that are useful for giving template\nauthors more control over custom rendering of forms without needing to\nedit Python code: <a href=\"#label\" rel=\"nofollow\">label</a>, <a href=\"#value-text\" rel=\"nofollow\">value_text</a>, <a href=\"#selected-values\" rel=\"nofollow\">selected_values</a>,\n<a href=\"#optional\" rel=\"nofollow\">optional</a>, <a href=\"#is-checkbox\" rel=\"nofollow\">is_checkbox</a>, and <a href=\"#is-multiple\" rel=\"nofollow\">is_multiple</a>.</li>\n</ol>\n<ol>\n<li>A <tt>ClearableFileField</tt> to enhance <tt>FileField</tt> and\n<tt>ImageField</tt> with a checkbox for clearing the contents of the\nfield.</li>\n<li>An <tt>ImageWidget</tt> which display a thumbnail of the image\nrather than just the filename.</li>\n<li>An <tt>AutoResizeTextarea</tt> widget which auto-resizes to\naccommodate its contents.</li>\n</ol>\n</blockquote>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Install from PyPI with <tt>easy_install</tt> or <tt>pip</tt>:</p>\n<pre>pip install django-form-utils\n</pre>\n<p>To use <tt><span class=\"pre\">django-form-utils</span></tt> in your Django project, just include\n<tt>form_utils</tt> in your INSTALLED_APPS setting.  <tt><span class=\"pre\">django-form-utils</span></tt> does\nnot provide any models, but including it in INSTALLED_APPS makes the\n<tt>form_utils</tt> template tag library available.</p>\n<p>You may also want to override the default form rendering templates by\nproviding alternate templates at <tt>templates/form_utils/better_form.html</tt>\nand <tt>templates/form_utils/form.html</tt>.</p>\n<div id=\"dependencies\">\n<h3>Dependencies</h3>\n<p><tt><span class=\"pre\">django-form-utils</span></tt> is tested on <a href=\"http://www.djangoproject.com/\" rel=\"nofollow\">Django</a> 1.4 and later and <a href=\"http://www.python.org/\" rel=\"nofollow\">Python</a> 2.6,\n2.7, and 3.3. It is known to be incompatible with Python 3.0, 3.1, and 3.2.</p>\n<p><a href=\"#imagewidget\" rel=\"nofollow\">ImageWidget</a> requires the <a href=\"http://python-imaging.github.io/\" rel=\"nofollow\">Python Imaging Library</a>.\n<a href=\"http://pypi.python.org/pypi/sorl-thumbnail\" rel=\"nofollow\">sorl-thumbnail</a> or <a href=\"http://pypi.python.org/pypi/easy-thumbnails\" rel=\"nofollow\">easy-thumbnails</a> is optional, but without it\nfull-size images will be displayed instead of thumbnails. The default\nthumbnail size is 200px x 200px.</p>\n<p><a href=\"#autoresizetextarea\" rel=\"nofollow\">AutoResizeTextarea</a> requires <a href=\"http://www.jquery.com/\" rel=\"nofollow\">jQuery</a> (by default using a\nGoogle-served version; see <a href=\"#jquery-url\" rel=\"nofollow\">JQUERY_URL</a>).</p>\n</div>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<div id=\"betterform\">\n<h3>BetterForm</h3>\n<p>Simply inherit your form class from <tt>form_utils.forms.BetterForm</tt> (rather\nthan <tt>django.forms.Form</tt>), or your modelform class from\n<tt>form_utils.forms.BetterModelForm</tt>, and define the <tt>fieldsets</tt> and/or\n<tt>row_attrs</tt> attributes of the inner Meta class:</p>\n<pre>class MyForm(BetterForm):\n    one = forms.CharField()\n    two = forms.CharField()\n    three = forms.CharField()\n    class Meta:\n        fieldsets = [('main', {'fields': ['two'], 'legend': ''}),\n                     ('Advanced', {'fields': ['three', 'one'],\n                                   'description': 'advanced stuff',\n                                   'classes': ['advanced', 'collapse']})]\n        row_attrs = {'one': {'style': 'display: none'}}\n</pre>\n<div id=\"fieldsets\">\n<h4>fieldsets</h4>\n<p>Fieldset definitions are similar to ModelAdmin fieldset definitions:\neach fieldset is a two-tuple with a name and an options\ndictionary. Valid fieldset options in the dictionary include:</p>\n<dl>\n<dt><tt>fields</tt></dt>\n<dd>(required) A tuple of field names to display in this fieldset.</dd>\n<dt><tt>classes</tt></dt>\n<dd>A tuple/list of extra CSS classes to apply to the fieldset.</dd>\n<dt><tt>legend</tt></dt>\n<dd>This value, if present, will be the contents of a <tt>legend</tt>\ntag to open the fieldset.  If not present the name of the fieldset will\nbe used (so a value of \u2018\u2019 for legend must be used if no legend is\ndesired.)</dd>\n<dt><tt>description</tt></dt>\n<dd>A string of optional extra text to be displayed\nunder the <tt>legend</tt> of the fieldset.</dd>\n</dl>\n<p>When iterated over, the <tt>fieldsets</tt> attribute of a <tt>BetterForm</tt>\n(or <tt>BetterModelForm</tt>) yields <tt>Fieldset</tt> s.  Each <tt>Fieldset</tt> has\na <tt>name</tt> attribute, a <tt>legend</tt> attribute, a <tt>classes</tt> attribute\n(the <tt>classes</tt> tuple collapsed into a space-separated string), and a\n<tt>description</tt> attribute, and when iterated over yields its\n<tt>BoundField</tt> s.</p>\n<p>For backwards compatibility, a <tt>BetterForm</tt> or <tt>BetterModelForm</tt> can\nstill be iterated over directly to yield all of its <tt>BoundField</tt> s,\nregardless of fieldsets.</p>\n<p>If you set <tt>fieldsets</tt> on a <tt>BetterModelForm</tt> and don\u2019t set either\nthe <tt>fields</tt> or <tt>exclude</tt> options on that form class,\n<tt>BetterModelForm</tt> will set <tt>fields</tt> to be the list of all fields\npresent in your <tt>fieldsets</tt> definition. This avoids problems with\nforms that can\u2019t validate because not all fields are listed in a\n<tt>fieldset</tt>. If you manually set either <tt>fields</tt> or <tt>exclude</tt>,\n<tt>BetterModelForm</tt> assumes you know what you\u2019re doing and doesn\u2019t\ntouch those definitions, even if they don\u2019t match the fields listed in\nyour fieldsets.</p>\n<p>For more detailed examples, see the tests in <tt>tests/tests.py</tt>.</p>\n</div>\n<div id=\"row-attrs\">\n<h4>row_attrs</h4>\n<p>The row_attrs declaration is a dictionary mapping field names to\ndictionaries of attribute/value pairs.  The attribute/value\ndictionaries will be flattened into HTML-style attribute/values\n(i.e. {\u2018style\u2019: \u2018display: none\u2019} will become <tt><span class=\"pre\">style=\"display:</span>\nnone\"</tt>), and will be available as the <tt>row_attrs</tt> attribute of the\n<tt>BoundField</tt>.</p>\n<p>A <tt>BetterForm</tt> or <tt>BetterModelForm</tt> will add a CSS class of\n\u201crequired\u201d or \u201coptional\u201d automatically to the row_attrs of each\n<tt>BoundField</tt> depending on whether the field is required, and will\nalso add a CSS class of \u201cerror\u201d if the field has errors.</p>\n</div>\n<div id=\"rendering\">\n<h4>Rendering</h4>\n<p>A possible template for rendering a <tt>BetterForm</tt>:</p>\n<pre>{% if form.non_field_errors %}{{ form.non_field_errors }}{% endif %}\n{% for fieldset in form.fieldsets %}\n  &lt;fieldset class=\"{{ fieldset.classes }}\"&gt;\n  {% if fieldset.legend %}\n    &lt;legend&gt;{{ fieldset.legend }}&lt;/legend&gt;\n  {% endif %}\n  {% if fieldset.description %}\n    &lt;p class=\"description\"&gt;{{ fieldset.description }}&lt;/p&gt;\n  {% endif %}\n  &lt;ul&gt;\n  {% for field in fieldset %}\n    {% if field.is_hidden %}\n      {{ field }}\n    {% else %}\n      &lt;li{{ field.row_attrs }}&gt;\n        {{ field.errors }}\n        {{ field.label_tag }}\n        {{ field }}\n      &lt;/li&gt;\n    {% endif %}\n  {% endfor %}\n  &lt;/ul&gt;\n  &lt;/fieldset&gt;\n{% endfor %}\n</pre>\n<p>One can also access the fieldset directly if any special casing needs to be\ndone, e.g.:</p>\n<pre>{% for field in form.fieldsets.main %}\n    ...\n{% endfor %}\n</pre>\n<p><tt><span class=\"pre\">django-form-utils</span></tt> also provides a convenience template filter,\n<tt>render</tt>.  It is used like this:</p>\n<pre>{% load form_utils %}\n\n{{ form|render }}\n</pre>\n<p>By default, it will check whether the form is a <tt>BetterForm</tt>, and if\nso render it using the template <tt>form_utils/better_form.html</tt>.  If\nnot, it will render it using the template <tt>form_utils/form.html</tt>.\n(In either case, the form object will be passed to the render\ntemplate\u2019s context as <tt>form</tt>).</p>\n<p>The render filter also accepts an optional argument, which is a\ntemplate name or comma-separated list of template names to use for\nrendering the form:</p>\n<pre>{{ form|render:\"my_form_stuff/custom_form_template.html\" }}\n</pre>\n</div>\n</div>\n<div id=\"utility-filters\">\n<h3>Utility Filters</h3>\n<p>All the below filters require <tt>{% load form_utils %}</tt> in the template where\nthey are used.</p>\n<p>These filters are complementary to the useful filters found in the\n<a href=\"http://pypi.python.org/pypi/django-widget-tweaks\" rel=\"nofollow\">django-widget-tweaks</a> library for setting arbitrary attributes and classes on\nform field widgets; thus such filters are not provided in\n<tt><span class=\"pre\">django-form-utils</span></tt>.</p>\n<div id=\"label\">\n<h4>label</h4>\n<p>Render a label tag for the given form field by rendering the template\n<tt>forms/_label.html</tt> with the context <tt>field</tt> (the boundfield object),\n<tt>id</tt> (the form field id attribute), and <tt>label_text</tt>.</p>\n<p>By default the Python-defined label text for the form field is used, but\nalternate label text can be provided as an argument to the filter:</p>\n<pre>{{ form.fieldname|label:\"Alternate label\" }}\n</pre>\n</div>\n<div id=\"value-text\">\n<h4>value_text</h4>\n<p>Display the current value of the given form field in a human-readable way\n(i.e. display labels for choice values rather than the internal value). The\ncurrent value may be the default value (for first-time rendering of a form) or\nthe previously-input value (for repeat rendering of a form with\nerrors). Usage:</p>\n<pre>{{ form.fieldname|value_text }}\n</pre>\n</div>\n<div id=\"selected-values\">\n<h4>selected_values</h4>\n<p>Similar to <a href=\"#value-text\" rel=\"nofollow\">value_text</a>, but for use with multiple-select form fields, and\nreturns a list of selected values rather than a single string. Usage:</p>\n<pre>&lt;ul&gt;\n  {% for selected_value in form.multiselect|selected_values %}\n    &lt;li&gt;{{ selected_value }}&lt;/li&gt;\n  {% endfor %}\n&lt;/ul&gt;\n</pre>\n</div>\n<div id=\"optional\">\n<h4>optional</h4>\n<p>Return <tt>True</tt> if the given field is optional, <tt>False</tt> if it is\nrequired. Sample usage:</p>\n<pre>{% if form.fieldname|optional %}(optional){% endif %}\n</pre>\n</div>\n<div id=\"is-checkbox\">\n<h4>is_checkbox</h4>\n<p>Return <tt>True</tt> if the given field\u2019s widget is a <tt>CheckboxInput</tt>, <tt>False</tt>\notherwise. Sample usage:</p>\n<pre>{% if form.fieldname|is_checkbox %}\n  {{ form.fieldname }}\n  {{ form.fieldname|label }}\n{% else %}\n  {{ form.fieldname|label }}\n  {{ form.fieldname }}\n{% endif %}\n</pre>\n</div>\n<div id=\"is-multiple\">\n<h4>is_multiple</h4>\n<p>Return <tt>True</tt> if the given field is a <tt>MultipleChoiceField</tt>, <tt>False</tt>\notherwise. Sample usage:</p>\n<pre>{% if form.fieldname|is_multiple %}\n  {% for value in form.fieldname|selected_values %}{{ value }} {% endif %}\n{% else %}\n  {{ form.fieldname|value_text }}\n{% endif %}\n</pre>\n</div>\n</div>\n<div id=\"clearablefilefield\">\n<h3>ClearableFileField</h3>\n<p>A replacement for <tt>django.forms.FileField</tt> that has a checkbox to\nclear the field of an existing file. Use as you would any other form\nfield class:</p>\n<pre>from django import forms\n\nfrom form_utils.fields import ClearableFileField\n\nclass MyModelForm(forms.ModelForm):\n    pdf = ClearableFileField()\n</pre>\n<p><tt>ClearableFileField</tt> also accepts two keyword arguments,\n<tt>file_field</tt> and <tt>template</tt>.</p>\n<p><tt>file_field</tt> is the instantiated field to actually use for\nrepresenting the file portion. For instance, if you want to use\n<tt>ClearableFileField</tt> to replace an <tt>ImageField</tt>, and you want to\nuse <a href=\"#imagewidget\" rel=\"nofollow\">ImageWidget</a>, you could do the following:</p>\n<pre>from django import forms\n\nfrom form_utils.fields import ClearableFileField\nfrom form_utils.widgets import ImageWidget\n\nclass MyModelForm(forms.ModelForm):\n    avatar = ClearableFileField(\n        file_field=forms.ImageField(widget=ImageWidget))\n</pre>\n<p>By default, <tt>file_field</tt> is a plain <tt>forms.FileField</tt> with the\ndefault <tt>forms.FileInput</tt> widget.</p>\n<p><tt>template</tt> is a string defining how the <tt>FileField</tt> (or\nalternative <tt>file_field</tt>) and the clear checkbox are displayed in\nrelation to each other. The template string should contain variable\ninterpolation markers <tt>%(input)s</tt> and <tt>%(checkbox)s</tt>. The default\nvalue is <tt>%(input)s Clear: %(checkbox)s</tt>.</p>\n<p>To use <tt>ClearableFileField</tt> in the admin; just inherit your admin\noptions class from <tt>form_utils.admin.ClearableFileFieldsAdmin</tt>\ninstead of <tt>django.contrib.admin.ModelAdmin</tt>, and all <tt><span class=\"pre\">FileField``s</span>\nand <span class=\"pre\">``ImageField``s</span> in that model will automatically be made clearable\n(while still using the same file/image field/widget they would have\notherwise, including any overrides you provide in\n``formfield_overrides</tt>).</p>\n</div>\n<div id=\"clearableimagefield\">\n<h3>ClearableImageField</h3>\n<p><tt>form_utils.fields.ClearableImageField</tt> is just a\n<tt>ClearableFileField</tt> with the default file field set to\n<tt>forms.ImageField</tt> rather than <tt>forms.FileField</tt>.</p>\n</div>\n<div id=\"imagewidget\">\n<h3>ImageWidget</h3>\n<p>A widget for representing an <tt>ImageField</tt> that includes a thumbnail\nof the current image in the field, not just the name of the\nfile. (Thumbnails only available if <a href=\"http://pypi.python.org/pypi/sorl-thumbnail\" rel=\"nofollow\">sorl-thumbnail</a> is installed;\notherwise the full-size image is displayed). To use, just pass in as\nthe widget class for an <tt>ImageField</tt>:</p>\n<pre>from django import forms\n\nfrom form_utils.widgets import ImageWidget\n\nclass MyForm(forms.Form):\n    pic = forms.ImageField(widget=ImageWidget())\n</pre>\n<p><tt>ImageWidget</tt> accepts a keyword argument, <tt>template</tt>. This is a\nstring defining how the image thumbnail and the file input widget are\nrendered relative to each other. The template string should contain\nvariable interpolation markers <tt>%(input)s</tt> and <tt>%(image)s</tt>. The\ndefault value is <tt>%(input)s&lt;br <span class=\"pre\">/&gt;%(image)s</span></tt>. For example, to display\nthe image above the input rather than below:</p>\n<pre>pic = forms.ImageField(\n    widget=ImageWidget(template='%(image)s&lt;br /&gt;%(input)s'))\n</pre>\n<p>To use in the admin, set as the default widget for <tt>ImageField</tt>\nusing <tt>formfield_overrides</tt>:</p>\n<pre>from django.db import models\n\nfrom form_utils.widgets import ImageWidget\n\nclass MyModelAdmin(admin.ModelAdmin):\n    formfield_overrides = { models.ImageField: {'widget': ImageWidget}}\n</pre>\n</div>\n<div id=\"autoresizetextarea\">\n<h3>AutoResizeTextarea</h3>\n<p>Just import the widget and assign it to a form field:</p>\n<pre>from django import forms\nfrom form_utils.widgets import AutoResizeTextarea\n\nclass MyForm(forms.Form):\n    description = forms.CharField(widget=AutoResizeTextarea())\n</pre>\n<p>Or use it in <tt>formfield_overrides</tt> in your <tt>ModelAdmin</tt> subclass:</p>\n<pre>from django import forms\nfrom django.contrib import admin\nfrom form_utils.widgets import AutoResizeTextarea\n\nclass MyModelAdmin(admin.ModelAdmin):\n    formfield_overrides = {forms.CharField: {'widget': AutoResizeTextarea()}}\n</pre>\n<p>There is also an <tt>InlineAutoResizeTextarea</tt>, which simply provides\nsmaller default sizes suitable for use in a tabular inline.</p>\n</div>\n</div>\n<div id=\"settings\">\n<h2>Settings</h2>\n<h2 id=\"jquery-url\"><span class=\"section-subtitle\">JQUERY_URL</span></h2>\n<p><a href=\"#autoresizetextarea\" rel=\"nofollow\">AutoResizeTextarea</a> requires the jQuery Javascript library.  By\ndefault, <tt><span class=\"pre\">django-form-utils</span></tt> links to the most recent minor version\nof jQuery 1.8 available at ajax.googleapis.com (via the URL\n<tt><span class=\"pre\">http://ajax.googleapis.com/ajax/libs/jquery/1.8/jquery.min.js</span></tt>).\nIf you wish to use a different version of jQuery, or host it yourself,\nset the JQUERY_URL setting.  For example:</p>\n<pre>JQUERY_URL = 'jquery.min.js'\n</pre>\n<p>This will use the jQuery available at STATIC_URL/jquery.min.js. Note\nthat a relative <tt>JQUERY_URL</tt> is relative to <tt>STATIC_URL</tt>.</p>\n</div>\n<div id=\"changes\">\n<h2>CHANGES</h2>\n<div id=\"id2\">\n<h3>1.0.3 (2015-08-25)</h3>\n<ul>\n<li>Fixed compatibility with Django 1.9. Fixed GH-12.</li>\n</ul>\n</div>\n<div id=\"id3\">\n<h3>1.0.2 (2014-09-08)</h3>\n<ul>\n<li>Fixed compatibility with Django 1.7. Fixed BB-20 and GH-8.</li>\n</ul>\n</div>\n<div id=\"id4\">\n<h3>1.0.1 (2013-10-19)</h3>\n<ul>\n<li>Removed invalid uses of <tt>python_2_unicode_compatible</tt> that broke with\n<a href=\"https://github.com/django/django/commit/589dc49e129f63801c54c15e408c944a345b3dfe\" rel=\"nofollow\">https://github.com/django/django/commit/589dc49e129f63801c54c15e408c944a345b3dfe</a>\nThanks ocZio for the report.</li>\n<li>Fixed inheritance of form Meta class. Thanks chmodas. Fixed BB-16.</li>\n</ul>\n</div>\n<div id=\"id5\">\n<h3>1.0 (2013.08.22)</h3>\n<ul>\n<li>Add Python 3.3 compatibility. Thanks chmodas! (Merge of GH-5.)</li>\n</ul>\n</div>\n<div id=\"id6\">\n<h3>0.3.1 (2013.06.25)</h3>\n<ul>\n<li>Call <tt>FileInput.render</tt> from <tt>ImageWidget.render</tt>, ensuring no value is\noutput in HTML. Fixes GH-4. Thanks Aron Griffis.</li>\n</ul>\n</div>\n<div id=\"id7\">\n<h3>0.3.0 (2013.06.04)</h3>\n<ul>\n<li>BACKWARDS-INCOMPATIBLE: Renamed template tag library from <tt>form_utils_tags</tt>\nto <tt>form_utils</tt>.</li>\n<li>BACKWARDS-INCOMPATIBLE: Removed <tt>FORM_UTILS_MEDIA_URL</tt> setting and updated\nto use <tt>STATIC_URL</tt> rather than <tt>MEDIA_URL</tt> throughout.</li>\n<li>Added \u201cerror\u201d class to row_attrs for fields with errors. Thanks Aron\nGriffis.</li>\n<li>Dropped explicit support for Django versions prior to 1.4 and Python\nversions prior to 2.6.</li>\n</ul>\n</div>\n<div id=\"id8\">\n<h3>0.2.0 (2011.01.28)</h3>\n<ul>\n<li>Add width and height arguments to ImageWidget.</li>\n<li>Make ImageWidget image-detection backend-friendly, no direct use of\nPIL. Fixes issue #7.</li>\n<li>Fix default templates\u2019 rendering of labels for radio/checkbox inputs.</li>\n<li>Fix error redisplaying bound form with ClearableFileField.</li>\n<li>Automatically set <tt>fields</tt> on <tt>BetterModelForm</tt> to list of fields\npresent in <tt>fieldsets</tt>, if <tt>fields</tt> or <tt>exclude</tt> are not set\nmanually.</li>\n<li>Updated to allow <tt>__getitem__</tt> access to fieldsets.</li>\n</ul>\n</div>\n<div id=\"id9\">\n<h3>0.1.8 (2010.03.16)</h3>\n<ul>\n<li>Restrict PIL import to ImageWidget only</li>\n<li>Added AutoResizeTextarea</li>\n</ul>\n</div>\n<div id=\"id10\">\n<h3>0.1.7 (2009.12.02)</h3>\n<ul>\n<li>Fix ClearableFileField import in admin.py.</li>\n</ul>\n</div>\n<div id=\"id11\">\n<h3>0.1.6 (2009.11.24)</h3>\n<ul>\n<li>Added documentation and tests for <tt>ImageWidget</tt> and\n<tt>ClearableFileField</tt>.</li>\n<li>Moved <tt>ClearableFileField</tt> from <tt>widgets.py</tt> to <tt>fields.py</tt>.</li>\n<li>Converted doctests to unittests.</li>\n</ul>\n</div>\n<div id=\"id12\">\n<h3>0.1.5 (2009.11.10)</h3>\n<ul>\n<li>Added fieldset classes (previously existed only as a figment of the\ndocumentation).</li>\n</ul>\n</div>\n<div id=\"id13\">\n<h3>0.1.0 (2009-03-26)</h3>\n<ul>\n<li>Initial public release.</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 1693133, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "4f82aa93bd25785f39b2694b76cfa90a", "sha256": "4e6db80cb8d2d1df400c2415b1c691fdbb616c86b7a13512e14d7bab775ec698"}, "downloads": -1, "filename": "django-form-utils-0.1.0.tar.gz", "has_sig": false, "md5_digest": "4f82aa93bd25785f39b2694b76cfa90a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9304, "upload_time": "2009-04-01T06:27:44", "upload_time_iso_8601": "2009-04-01T06:27:44.338180Z", "url": "https://files.pythonhosted.org/packages/27/7e/53b56f3ea29eb35ae8efdb46e8c5cb425f15495c44412837aaef05748ea5/django-form-utils-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "ac505cb8ddf484300492bcdd4e481c49", "sha256": "7b4db5d1550e02e43d530c68b8390f0988ef1ca877a9fb4fcb34f3efb5da5c5e"}, "downloads": -1, "filename": "django-form-utils-0.1.1.tar.gz", "has_sig": true, "md5_digest": "ac505cb8ddf484300492bcdd4e481c49", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9980, "upload_time": "2009-06-26T18:18:23", "upload_time_iso_8601": "2009-06-26T18:18:23.116482Z", "url": "https://files.pythonhosted.org/packages/8a/7d/0cf133c1ca590ba1064a230d70f33752ad5d69b46a5f7a19f78778cf7cad/django-form-utils-0.1.1.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "3d345bedd2cfecc53df4cbbfe7de3d76", "sha256": "797a7742c6dd1e0944a30852f181b0d6a4b1d5186a0fd328d6502905aa312806"}, "downloads": -1, "filename": "django-form-utils-0.1.3.tar.gz", "has_sig": true, "md5_digest": "3d345bedd2cfecc53df4cbbfe7de3d76", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10961, "upload_time": "2009-10-26T21:21:56", "upload_time_iso_8601": "2009-10-26T21:21:56.626920Z", "url": "https://files.pythonhosted.org/packages/46/f9/5df76374e8e3f487dc65144b6a5730d32b2dd4d8a7660a7b2099092e2899/django-form-utils-0.1.3.tar.gz", "yanked": false}], "0.1.5": [{"comment_text": "", "digests": {"md5": "5e8b79863da447ab2f53a4e854e69c05", "sha256": "23f18d6ef22fdea5a4a74d01bae766bcee46c84ab362389881fe279f5cd3a86a"}, "downloads": -1, "filename": "django-form-utils-0.1.5.tar.gz", "has_sig": true, "md5_digest": "5e8b79863da447ab2f53a4e854e69c05", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11096, "upload_time": "2009-11-11T03:37:14", "upload_time_iso_8601": "2009-11-11T03:37:14.448110Z", "url": "https://files.pythonhosted.org/packages/90/00/54131d0fd04bac990d6f01f159ac7f5f0fe7cba1bd383593dafcba2e8d5b/django-form-utils-0.1.5.tar.gz", "yanked": false}], "0.1.6": [{"comment_text": "", "digests": {"md5": "9533ee6cda7d29e43f14eb076d9c74b4", "sha256": "d4a657ace6315f52999e794ddae785d55e017c396f7dcb90fa7bedb88239bf8e"}, "downloads": -1, "filename": "django-form-utils-0.1.6.tar.gz", "has_sig": true, "md5_digest": "9533ee6cda7d29e43f14eb076d9c74b4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11163, "upload_time": "2009-11-25T10:36:21", "upload_time_iso_8601": "2009-11-25T10:36:21.213021Z", "url": "https://files.pythonhosted.org/packages/5d/27/2d6642de049f8579ab65dd18e26d6849e6b1d3d7ba922fee515f0403e99a/django-form-utils-0.1.6.tar.gz", "yanked": false}], "0.1.7": [{"comment_text": "", "digests": {"md5": "42adbfaf7ba42346237b84ca7b81a4ac", "sha256": "2fe6bb327f7fb8c386b527ef02b1fa4063f7218444b40c664070b4b5cfa469de"}, "downloads": -1, "filename": "django-form-utils-0.1.7.tar.gz", "has_sig": true, "md5_digest": "42adbfaf7ba42346237b84ca7b81a4ac", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11204, "upload_time": "2009-12-03T04:59:35", "upload_time_iso_8601": "2009-12-03T04:59:35.516441Z", "url": "https://files.pythonhosted.org/packages/ec/f3/51a9bfadd66431b37ff6bd8cb38b2e2265836597edeaffa43616dd88738b/django-form-utils-0.1.7.tar.gz", "yanked": false}], "0.1.8": [{"comment_text": "", "digests": {"md5": "89070f8923320dc4f6ef55d925c797d4", "sha256": "c431f2976a8cc79fb21fbc585c18704e4dd1b56a5fc345739bc6e0c0fbe1247d"}, "downloads": -1, "filename": "django-form-utils-0.1.8.tar.gz", "has_sig": true, "md5_digest": "89070f8923320dc4f6ef55d925c797d4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18206, "upload_time": "2010-03-16T22:27:24", "upload_time_iso_8601": "2010-03-16T22:27:24.737393Z", "url": "https://files.pythonhosted.org/packages/63/88/4f1f0f7d1d00b326a0f03c7eff93819a1cfe3876831ad9d5eb942591a98a/django-form-utils-0.1.8.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "e97eab5f43d89ec36802f6e503d5b4ad", "sha256": "b009fa8079e9e0c7f3671d6dc30323a517b04f8388a9c58b61fd892de83b9d4c"}, "downloads": -1, "filename": "django-form-utils-0.2.0.tar.gz", "has_sig": false, "md5_digest": "e97eab5f43d89ec36802f6e503d5b4ad", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18024, "upload_time": "2011-01-29T01:15:29", "upload_time_iso_8601": "2011-01-29T01:15:29.821321Z", "url": "https://files.pythonhosted.org/packages/b6/35/4f13a77396cead445087fa5a34e36cd5f19aac64193d6d0e6a694d16d712/django-form-utils-0.2.0.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "23477c6b4b273ef5bf9198113ae1154f", "sha256": "854e88dbde69552cd99734dc53749f057ee817c01d8aba1fd9f1bf3c675f4a78"}, "downloads": -1, "filename": "django-form-utils-0.3.tar.gz", "has_sig": false, "md5_digest": "23477c6b4b273ef5bf9198113ae1154f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20419, "upload_time": "2013-06-04T16:06:04", "upload_time_iso_8601": "2013-06-04T16:06:04.604541Z", "url": "https://files.pythonhosted.org/packages/e6/dd/a98e69e4ce30088e242d54236b5e255ec67647a8849b6105f031a165592b/django-form-utils-0.3.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "60579ab6fc7066e797ea6dc319f81422", "sha256": "965795d60c21e8742c833b8672130dfd5d287badb42a7a22814f5d06ec195906"}, "downloads": -1, "filename": "django-form-utils-0.3.1.tar.gz", "has_sig": true, "md5_digest": "60579ab6fc7066e797ea6dc319f81422", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20497, "upload_time": "2013-06-25T17:14:00", "upload_time_iso_8601": "2013-06-25T17:14:00.342867Z", "url": "https://files.pythonhosted.org/packages/3b/60/84e8562d1f18aa3e6af32877772de1697dab722c4c2b55a66fa9d765ae34/django-form-utils-0.3.1.tar.gz", "yanked": false}], "1.0": [{"comment_text": "", "digests": {"md5": "4b911deeb59b8e5560190f9e5c1f1d97", "sha256": "709ea2735927bf5d5a3623daf29be7bfa408d95b5e7abd0fdb567d8e5cfc5fef"}, "downloads": -1, "filename": "django-form-utils-1.0.tar.gz", "has_sig": true, "md5_digest": "4b911deeb59b8e5560190f9e5c1f1d97", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21449, "upload_time": "2013-08-23T00:20:50", "upload_time_iso_8601": "2013-08-23T00:20:50.162322Z", "url": "https://files.pythonhosted.org/packages/a1/2c/c60ee3c1898f770a89cb8aa9595a0b5b465e63b477960fdfdbbc5050e662/django-form-utils-1.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "881bd5cdb26591088d9c20eb9f0c185a", "sha256": "848c0eadbd723d549ddacf926cfda96813f7fe29d8b01f847ad91903dbb353b4"}, "downloads": -1, "filename": "django-form-utils-1.0.1.tar.gz", "has_sig": true, "md5_digest": "881bd5cdb26591088d9c20eb9f0c185a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24126, "upload_time": "2013-10-19T23:48:00", "upload_time_iso_8601": "2013-10-19T23:48:00.107683Z", "url": "https://files.pythonhosted.org/packages/d3/90/17dc34c880fb535b8537b2fe2f13e6ac1fdc7a546120b0ce9edee2f0f65b/django-form-utils-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "83befed61328aacc431481e3a00fc81a", "sha256": "4614c85e02437691a11129ed70e6b3eb7a0485b084f91a3b44c89a1d886b647d"}, "downloads": -1, "filename": "django-form-utils-1.0.2.tar.gz", "has_sig": true, "md5_digest": "83befed61328aacc431481e3a00fc81a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21912, "upload_time": "2014-09-08T21:43:34", "upload_time_iso_8601": "2014-09-08T21:43:34.762854Z", "url": "https://files.pythonhosted.org/packages/71/56/b88d9e4e237ef163f1f90b17f4aafbcf662b6a64a8669f43143763fa5aab/django-form-utils-1.0.2.tar.gz", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "d785b085efdfb29ad28d11abcd81d2d3", "sha256": "670d0c6ce809aa91f17b6cb8905dab7a56d054191251540d5d011649c4fda108"}, "downloads": -1, "filename": "django-form-utils-1.0.3.tar.gz", "has_sig": true, "md5_digest": "d785b085efdfb29ad28d11abcd81d2d3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21190, "upload_time": "2015-08-25T15:43:09", "upload_time_iso_8601": "2015-08-25T15:43:09.305107Z", "url": "https://files.pythonhosted.org/packages/fe/4e/0d860844f52081507e7d16349682c184768abebadb92af5fbb852bb64bfd/django-form-utils-1.0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d785b085efdfb29ad28d11abcd81d2d3", "sha256": "670d0c6ce809aa91f17b6cb8905dab7a56d054191251540d5d011649c4fda108"}, "downloads": -1, "filename": "django-form-utils-1.0.3.tar.gz", "has_sig": true, "md5_digest": "d785b085efdfb29ad28d11abcd81d2d3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21190, "upload_time": "2015-08-25T15:43:09", "upload_time_iso_8601": "2015-08-25T15:43:09.305107Z", "url": "https://files.pythonhosted.org/packages/fe/4e/0d860844f52081507e7d16349682c184768abebadb92af5fbb852bb64bfd/django-form-utils-1.0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:36:01 2020"}