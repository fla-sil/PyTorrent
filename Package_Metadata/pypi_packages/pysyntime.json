{"info": {"author": "Zhou Shengsheng", "author_email": "szhou006@e.ntu.edu.sg", "bugtrack_url": null, "classifiers": ["Programming Language :: Python :: 3", "Programming Language :: Python :: 3.7"], "description": "# pysyntime\n\n`pysyntime` is a python library implementing `SynTime` algorithm from paper \u2013 *Time Expression Analysis and Recognition Using Syntactic Token Types and General Heuristic Rules*.\n\n## Features\n\n`pysyntime` supports extracting `timex` (time expressions) from raw text. For example, given the following text:\n\n```text\nThe last 6 months surviving member of the team which first conquered Everest in 6 a.m. 17 Jan 1953 has died in a Derbyshire nursing home.\n```\n\n`pysyntime` will extract `timex` from the text and produce the following annotated text in `TimeML` format:\n\n```\n<TIMEX3 tid=\"t1\" type=\"DATE\" value=\"2016-10-10\">The last 6 months</TIMEX3> surviving member of the team which first conquered Everest in <TIMEX3 tid=\"t2\" type=\"DATE\" value=\"2016-10-10\">6 a.m. 17 Jan 1953</TIMEX3> has died in a Derbyshire nursing home.\n```\n\n## Installation\n\nYou can install the package by easily running the `pip` command:\n\n```bash\npip install pysyntime\n```\n\nSince `pysyntime` relies on [spaCy](https://spacy.io/) which is an NLP library, the required model needs to be downloaded:\n\n```bash\npython -m spacy download en_core_web_sm\n```\n\n**Note**: The above command will download spaCy model and create symbol link, make sure you have root permission. \nIf you are working with python virtualenv, you don't need the root permission. See [spaCy documentation](https://spacy.io/usage/#symlink-privilege) for details.\n\n## Usage\n\n```python\nfrom pysyntime import SynTime\n\n# Instanciate SynTime\nsynTime = SynTime()\n\n# Your raw text\ntext = 'The last 6 months surviving member of the team which first conquered Everest in 6 a.m. 17 Jan 1953 has died in a Derbyshire nursing home.'\ndate = '2016-10-10'\n\n# Extract timex from raw text\ntimeMLText = synTime.extractTimexFromText(text, date)\nprint(timeMLText)\n```\n\n## References\n\n[1] Xiaoshi Zhong, Aixin Sun, and Erik Cambria. Time Expression Analysis and Recognition Using Syntactic Token Types and General Heuristic Rules. In *Proceedings of the 55th Annual Meeting of the Association for Computational Linguistics* (ACL), pages 420-429, 2017. [[pdf](http://aclweb.org/anthology/P/P17/P17-1039.pdf)] [[slides](https://drive.google.com/file/d/0B4MkuquLjWvpV2d2dmZpU0VmbGs/view)] <br>\n[2] `Syntime` implementation in Java. [[github](https://github.com/xszhong/syntime)]\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ZhouShengsheng/pysyntime", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "pysyntime", "package_url": "https://pypi.org/project/pysyntime/", "platform": "", "project_url": "https://pypi.org/project/pysyntime/", "project_urls": {"Homepage": "https://github.com/ZhouShengsheng/pysyntime"}, "release_url": "https://pypi.org/project/pysyntime/1.0.0/", "requires_dist": ["spacy (<3.0.0,>=2.0.0)"], "requires_python": "", "summary": "SynTime implementation in Python.", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>pysyntime</h1>\n<p><code>pysyntime</code> is a python library implementing <code>SynTime</code> algorithm from paper \u2013 <em>Time Expression Analysis and Recognition Using Syntactic Token Types and General Heuristic Rules</em>.</p>\n<h2>Features</h2>\n<p><code>pysyntime</code> supports extracting <code>timex</code> (time expressions) from raw text. For example, given the following text:</p>\n<pre>The last 6 months surviving member of the team which first conquered Everest in 6 a.m. 17 Jan 1953 has died in a Derbyshire nursing home.\n</pre>\n<p><code>pysyntime</code> will extract <code>timex</code> from the text and produce the following annotated text in <code>TimeML</code> format:</p>\n<pre><code>&lt;TIMEX3 tid=\"t1\" type=\"DATE\" value=\"2016-10-10\"&gt;The last 6 months&lt;/TIMEX3&gt; surviving member of the team which first conquered Everest in &lt;TIMEX3 tid=\"t2\" type=\"DATE\" value=\"2016-10-10\"&gt;6 a.m. 17 Jan 1953&lt;/TIMEX3&gt; has died in a Derbyshire nursing home.\n</code></pre>\n<h2>Installation</h2>\n<p>You can install the package by easily running the <code>pip</code> command:</p>\n<pre>pip install pysyntime\n</pre>\n<p>Since <code>pysyntime</code> relies on <a href=\"https://spacy.io/\" rel=\"nofollow\">spaCy</a> which is an NLP library, the required model needs to be downloaded:</p>\n<pre>python -m spacy download en_core_web_sm\n</pre>\n<p><strong>Note</strong>: The above command will download spaCy model and create symbol link, make sure you have root permission.\nIf you are working with python virtualenv, you don't need the root permission. See <a href=\"https://spacy.io/usage/#symlink-privilege\" rel=\"nofollow\">spaCy documentation</a> for details.</p>\n<h2>Usage</h2>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pysyntime</span> <span class=\"kn\">import</span> <span class=\"n\">SynTime</span>\n\n<span class=\"c1\"># Instanciate SynTime</span>\n<span class=\"n\">synTime</span> <span class=\"o\">=</span> <span class=\"n\">SynTime</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Your raw text</span>\n<span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"s1\">'The last 6 months surviving member of the team which first conquered Everest in 6 a.m. 17 Jan 1953 has died in a Derbyshire nursing home.'</span>\n<span class=\"n\">date</span> <span class=\"o\">=</span> <span class=\"s1\">'2016-10-10'</span>\n\n<span class=\"c1\"># Extract timex from raw text</span>\n<span class=\"n\">timeMLText</span> <span class=\"o\">=</span> <span class=\"n\">synTime</span><span class=\"o\">.</span><span class=\"n\">extractTimexFromText</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">,</span> <span class=\"n\">date</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">timeMLText</span><span class=\"p\">)</span>\n</pre>\n<h2>References</h2>\n<p>[1] Xiaoshi Zhong, Aixin Sun, and Erik Cambria. Time Expression Analysis and Recognition Using Syntactic Token Types and General Heuristic Rules. In <em>Proceedings of the 55th Annual Meeting of the Association for Computational Linguistics</em> (ACL), pages 420-429, 2017. [<a href=\"http://aclweb.org/anthology/P/P17/P17-1039.pdf\" rel=\"nofollow\">pdf</a>] [<a href=\"https://drive.google.com/file/d/0B4MkuquLjWvpV2d2dmZpU0VmbGs/view\" rel=\"nofollow\">slides</a>] <br>\n[2] <code>Syntime</code> implementation in Java. [<a href=\"https://github.com/xszhong/syntime\" rel=\"nofollow\">github</a>]</p>\n\n          </div>"}, "last_serial": 4721210, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "19ca6bb5c08c55a9602804f6db0d5e4d", "sha256": "6cfaf1a6a993ac5747f53e56f49c71c20bc75a86e6eae87141ff0a58712d8bbe"}, "downloads": -1, "filename": "pysyntime-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "19ca6bb5c08c55a9602804f6db0d5e4d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 14753, "upload_time": "2019-01-21T11:00:54", "upload_time_iso_8601": "2019-01-21T11:00:54.021156Z", "url": "https://files.pythonhosted.org/packages/85/16/dd6d8544c5c636721597f57055f44af87913cb6fc1675369ef980b27480e/pysyntime-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3691a1a52f478418549cc76e8d73624c", "sha256": "65af2bf88bccfbe59dba5d21c50fb2840ace5af3bf7e00f6e0e3fb89615a5709"}, "downloads": -1, "filename": "pysyntime-1.0.0.tar.gz", "has_sig": false, "md5_digest": "3691a1a52f478418549cc76e8d73624c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13787, "upload_time": "2019-01-21T11:00:55", "upload_time_iso_8601": "2019-01-21T11:00:55.467082Z", "url": "https://files.pythonhosted.org/packages/b8/c5/5f258f95e9f2d0378918a001bd6decc6eaf3af2c70193eb6f322620bb568/pysyntime-1.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "19ca6bb5c08c55a9602804f6db0d5e4d", "sha256": "6cfaf1a6a993ac5747f53e56f49c71c20bc75a86e6eae87141ff0a58712d8bbe"}, "downloads": -1, "filename": "pysyntime-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "19ca6bb5c08c55a9602804f6db0d5e4d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 14753, "upload_time": "2019-01-21T11:00:54", "upload_time_iso_8601": "2019-01-21T11:00:54.021156Z", "url": "https://files.pythonhosted.org/packages/85/16/dd6d8544c5c636721597f57055f44af87913cb6fc1675369ef980b27480e/pysyntime-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3691a1a52f478418549cc76e8d73624c", "sha256": "65af2bf88bccfbe59dba5d21c50fb2840ace5af3bf7e00f6e0e3fb89615a5709"}, "downloads": -1, "filename": "pysyntime-1.0.0.tar.gz", "has_sig": false, "md5_digest": "3691a1a52f478418549cc76e8d73624c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13787, "upload_time": "2019-01-21T11:00:55", "upload_time_iso_8601": "2019-01-21T11:00:55.467082Z", "url": "https://files.pythonhosted.org/packages/b8/c5/5f258f95e9f2d0378918a001bd6decc6eaf3af2c70193eb6f322620bb568/pysyntime-1.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:55:43 2020"}