{"info": {"author": "Preston Holmes", "author_email": "preston@ptone.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: Web Environment", "Framework :: Django", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Topic :: Utilities"], "description": "django-modelish\n===============\n\n.. pull-quote::\n    Because programmers are lazy...\n\nModelish is a quick attempt to save a few keystrokes. Many data modeling tools\nare a GUI nightmare, with dropdowns and lots of buttons. But sometimes,\nespecially when you are sketching something out, writing out full Django models\ncan be a bit tedious.\n\nModelish will parse a file with a simplified model declaration in a flavor of\nYAML and generate Python code for model definition.\n\nNormally I would say source code generation is a \"Bad Idea\", but really even\nin Python, Django models are a mostly declarative syntax\n\n\nQuickstart\n----------\n\nInstall django-predicate:\n\n.. code-block:: console\n\n    pip install django-modelish\n\nYou can then start banging out models like this\n\n.. code-block:: yaml\n\n    Poll:\n        doc: This is the poll model\n        question:\n            type: char\n            max_length: 200\n        pub_date:\n            type: datetime\n            args: date published\n\n    Choice:\n        poll:\n            type: fk\n            args: [Poll]\n        choice_text-char:\n            max_length: 200\n        votes:\n            type: int\n\nYou then just use the CLI tool:\n\n.. code-block:: console\n\n    modelish path-to-file.yml\n\nThis will generate code like this:\n\n.. code-block:: python\n\n    class Poll(models.Model):\n        \"\"\"This is the poll model\"\"\"\n\n        pub_date = models.DateTimeField(\n            'date published')\n        question = models.CharField(\n            max_length=200,\n            blank=True)\n\n    class Choice(models.Model):\n        choice_text = models.CharField(\n            max_length=200,\n            blank=True)\n        poll = models.ForeignKey(\n            'Poll')\n        votes = models.IntegerField()\n\nSyntax\n------\n\nThe syntax is pretty simple::\n\n    <ModelName>:\n        [doc: docstring]\n        <fieldname>[-type-alias]:\n            [type: type-alias],\n            [args: arglist],\n            kwarg: value\n\nThe field type is represented by a shortened 'type' alias so 'char' becomes\n'models.CharField' etc (see grammarish below).\n\nThe type can be specified one of two ways, either following the field name with\na hyphen, or explicitly declared as a ``type`` in the field definition.\n\nPositional args to the model specified as an explicit list in square brackets,\nor as a comma delimited string.\n\nThe remaining block of the field definition consists of kwarg/value pairs.\n\nWorking with grammarish\n-----------------------\n\nModelish works with a grammar composed of type aliases and defaults. The standard\ntypes are:\n\n.. code-block:: yaml\n\n    auto: AutoField\n    bigint: BigIntegerField\n    bool: BooleanField\n    char: CharField\n    date: DateField\n    datetime: DateTimeField\n    decimal: DecimalField\n    email: EmailField\n    file: FileField\n    float: FloatField\n    image: ImageField\n    int: IntegerField\n    ip: IPAddressField\n    gip: GenericIPAddressField\n    nbool: NullBooleanField\n    pint: PositiveIntegerField\n    psint: PositiveSmallIntegerField\n    slug: SlugField\n    sint: SmallIntegerField\n    text: TextField\n    time: TimeField\n    url: URLField\n    fk: ForeignKey\n    m2m: ManyToManyField\n    timestamp: DateTimeField\n\nFor each type - a set of default kwargs is defined in the grammar as\n``defaults``:\n\n.. code-block:: yaml\n\n    defaults:\n    bool:\n        default: true\n    char:\n        max_length: 100\n        blank: true\n    nbool:\n        null: true\n    timestamp:\n        auto-now: true\n\nThis default grammar can be replace, or enhanced by passing your own yaml files\nto the command.  Use ``--grammar`` to replace the default grammer, and use\n``--extra-grammar`` to merge in and update the default grammer with your own\nadditions or changes.\n\nThat's it - this isn't meant to be any sort of full featured model builder or\ndata modeler, it is just a simple DSLish bootstrap tool to give you\na models.py starting point with a little less typing.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/ptone/django-modelish", "keywords": null, "license": "BSD", "maintainer": null, "maintainer_email": null, "name": "django-modelish", "package_url": "https://pypi.org/project/django-modelish/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/django-modelish/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://github.com/ptone/django-modelish"}, "release_url": "https://pypi.org/project/django-modelish/0.1/", "requires_dist": null, "requires_python": null, "summary": "A simple markup and processor to make initial models.py less tedious", "version": "0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <blockquote>\nBecause programmers are lazy\u2026</blockquote>\n<p>Modelish is a quick attempt to save a few keystrokes. Many data modeling tools\nare a GUI nightmare, with dropdowns and lots of buttons. But sometimes,\nespecially when you are sketching something out, writing out full Django models\ncan be a bit tedious.</p>\n<p>Modelish will parse a file with a simplified model declaration in a flavor of\nYAML and generate Python code for model definition.</p>\n<p>Normally I would say source code generation is a \u201cBad Idea\u201d, but really even\nin Python, Django models are a mostly declarative syntax</p>\n<div id=\"quickstart\">\n<h2>Quickstart</h2>\n<p>Install django-predicate:</p>\n<pre><span class=\"go\">pip install django-modelish</span>\n</pre>\n<p>You can then start banging out models like this</p>\n<pre><span class=\"nt\">Poll</span><span class=\"p\">:</span>\n    <span class=\"nt\">doc</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">This is the poll model</span>\n    <span class=\"nt\">question</span><span class=\"p\">:</span>\n        <span class=\"nt\">type</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">char</span>\n        <span class=\"nt\">max_length</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">200</span>\n    <span class=\"nt\">pub_date</span><span class=\"p\">:</span>\n        <span class=\"nt\">type</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">datetime</span>\n        <span class=\"nt\">args</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">date published</span>\n\n<span class=\"nt\">Choice</span><span class=\"p\">:</span>\n    <span class=\"nt\">poll</span><span class=\"p\">:</span>\n        <span class=\"nt\">type</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">fk</span>\n        <span class=\"nt\">args</span><span class=\"p\">:</span> <span class=\"p-Indicator\">[</span><span class=\"nv\">Poll</span><span class=\"p-Indicator\">]</span>\n    <span class=\"nt\">choice_text-char</span><span class=\"p\">:</span>\n        <span class=\"nt\">max_length</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">200</span>\n    <span class=\"nt\">votes</span><span class=\"p\">:</span>\n        <span class=\"nt\">type</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">int</span>\n</pre>\n<p>You then just use the CLI tool:</p>\n<pre><span class=\"go\">modelish path-to-file.yml</span>\n</pre>\n<p>This will generate code like this:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">Poll</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"This is the poll model\"\"\"</span>\n\n    <span class=\"n\">pub_date</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">DateTimeField</span><span class=\"p\">(</span>\n        <span class=\"s1\">'date published'</span><span class=\"p\">)</span>\n    <span class=\"n\">question</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span>\n        <span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">200</span><span class=\"p\">,</span>\n        <span class=\"n\">blank</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Choice</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">choice_text</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span>\n        <span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">200</span><span class=\"p\">,</span>\n        <span class=\"n\">blank</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"n\">poll</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">ForeignKey</span><span class=\"p\">(</span>\n        <span class=\"s1\">'Poll'</span><span class=\"p\">)</span>\n    <span class=\"n\">votes</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">IntegerField</span><span class=\"p\">()</span>\n</pre>\n</div>\n<div id=\"syntax\">\n<h2>Syntax</h2>\n<p>The syntax is pretty simple:</p>\n<pre>&lt;ModelName&gt;:\n    [doc: docstring]\n    &lt;fieldname&gt;[-type-alias]:\n        [type: type-alias],\n        [args: arglist],\n        kwarg: value\n</pre>\n<p>The field type is represented by a shortened \u2018type\u2019 alias so \u2018char\u2019 becomes\n\u2018models.CharField\u2019 etc (see grammarish below).</p>\n<p>The type can be specified one of two ways, either following the field name with\na hyphen, or explicitly declared as a <tt>type</tt> in the field definition.</p>\n<p>Positional args to the model specified as an explicit list in square brackets,\nor as a comma delimited string.</p>\n<p>The remaining block of the field definition consists of kwarg/value pairs.</p>\n</div>\n<div id=\"working-with-grammarish\">\n<h2>Working with grammarish</h2>\n<p>Modelish works with a grammar composed of type aliases and defaults. The standard\ntypes are:</p>\n<pre><span class=\"nt\">auto</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">AutoField</span>\n<span class=\"nt\">bigint</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">BigIntegerField</span>\n<span class=\"nt\">bool</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">BooleanField</span>\n<span class=\"nt\">char</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">CharField</span>\n<span class=\"nt\">date</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">DateField</span>\n<span class=\"nt\">datetime</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">DateTimeField</span>\n<span class=\"nt\">decimal</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">DecimalField</span>\n<span class=\"nt\">email</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">EmailField</span>\n<span class=\"nt\">file</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">FileField</span>\n<span class=\"nt\">float</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">FloatField</span>\n<span class=\"nt\">image</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">ImageField</span>\n<span class=\"nt\">int</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">IntegerField</span>\n<span class=\"nt\">ip</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">IPAddressField</span>\n<span class=\"nt\">gip</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">GenericIPAddressField</span>\n<span class=\"nt\">nbool</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">NullBooleanField</span>\n<span class=\"nt\">pint</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">PositiveIntegerField</span>\n<span class=\"nt\">psint</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">PositiveSmallIntegerField</span>\n<span class=\"nt\">slug</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">SlugField</span>\n<span class=\"nt\">sint</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">SmallIntegerField</span>\n<span class=\"nt\">text</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">TextField</span>\n<span class=\"nt\">time</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">TimeField</span>\n<span class=\"nt\">url</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">URLField</span>\n<span class=\"nt\">fk</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">ForeignKey</span>\n<span class=\"nt\">m2m</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">ManyToManyField</span>\n<span class=\"nt\">timestamp</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">DateTimeField</span>\n</pre>\n<p>For each type - a set of default kwargs is defined in the grammar as\n<tt>defaults</tt>:</p>\n<pre><span class=\"nt\">defaults</span><span class=\"p\">:</span>\n<span class=\"nt\">bool</span><span class=\"p\">:</span>\n    <span class=\"nt\">default</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">true</span>\n<span class=\"nt\">char</span><span class=\"p\">:</span>\n    <span class=\"nt\">max_length</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">100</span>\n    <span class=\"nt\">blank</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">true</span>\n<span class=\"nt\">nbool</span><span class=\"p\">:</span>\n    <span class=\"nt\">null</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">true</span>\n<span class=\"nt\">timestamp</span><span class=\"p\">:</span>\n    <span class=\"nt\">auto-now</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">true</span>\n</pre>\n<p>This default grammar can be replace, or enhanced by passing your own yaml files\nto the command.  Use <tt><span class=\"pre\">--grammar</span></tt> to replace the default grammer, and use\n<tt><span class=\"pre\">--extra-grammar</span></tt> to merge in and update the default grammer with your own\nadditions or changes.</p>\n<p>That\u2019s it - this isn\u2019t meant to be any sort of full featured model builder or\ndata modeler, it is just a simple DSLish bootstrap tool to give you\na models.py starting point with a little less typing.</p>\n</div>\n\n          </div>"}, "last_serial": 748687, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "220c1f4d5e917d09778debeeda85cd45", "sha256": "a7ffd8bdef4d0ac078901fce2d7c88ca10bb7a92e5d2af9f056c67b2b2838990"}, "downloads": -1, "filename": "django-modelish-0.1.tar.gz", "has_sig": false, "md5_digest": "220c1f4d5e917d09778debeeda85cd45", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9361, "upload_time": "2012-08-18T15:57:06", "upload_time_iso_8601": "2012-08-18T15:57:06.763708Z", "url": "https://files.pythonhosted.org/packages/95/ac/d6246b9cf6da0f26abcab24eceacc2b00c4144a790d674f9976ef758a7ed/django-modelish-0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "220c1f4d5e917d09778debeeda85cd45", "sha256": "a7ffd8bdef4d0ac078901fce2d7c88ca10bb7a92e5d2af9f056c67b2b2838990"}, "downloads": -1, "filename": "django-modelish-0.1.tar.gz", "has_sig": false, "md5_digest": "220c1f4d5e917d09778debeeda85cd45", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9361, "upload_time": "2012-08-18T15:57:06", "upload_time_iso_8601": "2012-08-18T15:57:06.763708Z", "url": "https://files.pythonhosted.org/packages/95/ac/d6246b9cf6da0f26abcab24eceacc2b00c4144a790d674f9976ef758a7ed/django-modelish-0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:35:01 2020"}