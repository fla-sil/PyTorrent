{"info": {"author": "Marsel Mavletkulov", "author_email": "marselester@ya.ru", "bugtrack_url": null, "classifiers": ["Environment :: Web Environment", "Intended Audience :: Developers", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3", "Topic :: Internet :: WWW/HTTP :: Dynamic Content", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "===============\nFlask-API-Utils\n===============\n\n.. image:: https://travis-ci.org/marselester/flask-api-utils.png\n   :target: https://travis-ci.org/marselester/flask-api-utils\n\nFlask-API-Utils helps you to create APIs. It makes responses in appropriate\nformats, for instance, JSON. All you need to do is to return dictionary\nfrom your views. Another useful feature is an authentication.\nThe library supports Hawk_ HTTP authentication scheme and `Flask-Login`_\nextension. To sum up, there is an `API example project`_.\n\n\"Accept\" Header based Response\n------------------------------\n\n**ResponsiveFlask** tends to make responses based on **Accept**\nrequest-header (RFC 2616). If a view function does not return a dictionary,\nthen response will be processed as usual. Here is an example.\n\n.. code-block:: python\n\n    from api_utils import ResponsiveFlask\n\n    app = ResponsiveFlask(__name__)\n\n\n    @app.route('/')\n    def hello_world():\n        return {'hello': 'world'}\n\n\n    def dummy_xml_formatter(*args, **kwargs):\n        return '<hello>world</hello>'\n\n    xml_mimetype = 'application/vnd.company+xml'\n    app.response_formatters[xml_mimetype] = dummy_xml_formatter\n\n    if __name__ == '__main__':\n        app.run()\n\n\nIt's assumed that file was saved as ``api.py``:\n\n.. code-block:: console\n\n    $ python api.py\n     * Running on http://127.0.0.1:5000/\n\nHere are curl examples with different **Accept** headers:\n\n.. code-block:: console\n\n    $ curl http://127.0.0.1:5000/ -i\n    HTTP/1.0 200 OK\n    Content-Type: application/json\n    Content-Length: 22\n    Server: Werkzeug/0.9.4 Python/2.7.5\n    Date: Sat, 07 Dec 2013 14:01:14 GMT\n\n    {\n      \"hello\": \"world\"\n    }\n    $ curl http://127.0.0.1:5000/ -H 'Accept: application/vnd.company+xml' -i\n    HTTP/1.0 200 OK\n    Content-Type: application/vnd.company+xml; charset=utf-8\n    Content-Length: 20\n    Server: Werkzeug/0.9.4 Python/2.7.5\n    Date: Sat, 07 Dec 2013 14:01:50 GMT\n\n    <hello>world</hello>\n    $ curl http://127.0.0.1:5000/ -H 'Accept: blah/*' -i\n    HTTP/1.0 406 NOT ACCEPTABLE\n    Content-Type: application/json\n    Content-Length: 83\n    Server: Werkzeug/0.9.4 Python/2.7.5\n    Date: Sat, 07 Dec 2013 14:02:23 GMT\n\n    {\n      \"mimetypes\": [\n        \"application/json\",\n        \"application/vnd.company+xml\"\n      ]\n    }\n\nHTTP Error Handling\n-------------------\n\nYou can set HTTP error handler by using **@app.default_errorhandler**\ndecorator. Note that it might override already defined error handlers,\nso you should declare it before them.\n\n.. code-block:: python\n\n    from flask import request\n    from api_utils import ResponsiveFlask\n\n    app = ResponsiveFlask(__name__)\n\n\n    @app.default_errorhandler\n    def werkzeug_default_exceptions_handler(error):\n        error_info_url = (\n            'http://developer.example.com/errors.html#error-code-{}'\n        ).format(error.code)\n\n        response = {\n            'code': error.code,\n            'message': str(error),\n            'info_url': error_info_url,\n        }\n        return response, error.code\n\n\n    @app.errorhandler(404)\n    def page_not_found(error):\n        return {'error': 'This page does not exist'}, 404\n\n\n    class MyException(Exception):\n        pass\n\n\n    @app.errorhandler(MyException)\n    def special_exception_handler(error):\n        return {'error': str(error)}\n\n\n    @app.route('/my-exc')\n    def hello_my_exception():\n        raise MyException('Krivens!')\n\n\n    @app.route('/yarr')\n    def hello_bad_request():\n        request.args['bad-key']\n\n    if __name__ == '__main__':\n        app.run()\n\n\nLet's try to curl this example. First response shows that we redefined\ndefault ``{'code': 400, 'message': '400: Bad Request'}`` error format.\nNext ones show that you can handle specific errors as usual.\n\n.. code-block:: console\n\n    $ curl http://127.0.0.1:5000/yarr -i\n    HTTP/1.0 400 BAD REQUEST\n    Content-Type: application/json\n    Content-Length: 125\n    Server: Werkzeug/0.9.4 Python/2.7.5\n    Date: Sun, 29 Dec 2013 14:26:30 GMT\n\n    {\n      \"code\": 400,\n      \"info_url\": \"http://developer.example.com/errors.html#error-code-400\",\n      \"message\": \"400: Bad Request\"\n    }\n    $ curl http://127.0.0.1:5000/ -i\n    HTTP/1.0 404 NOT FOUND\n    Content-Type: application/json\n    Content-Length: 41\n    Server: Werkzeug/0.9.4 Python/2.7.5\n    Date: Sun, 29 Dec 2013 14:28:46 GMT\n\n    {\n      \"error\": \"This page does not exist\"\n    }\n    $ curl http://127.0.0.1:5000/my-exc -i\n    HTTP/1.0 200 OK\n    Content-Type: application/json\n    Content-Length: 25\n    Server: Werkzeug/0.9.4 Python/2.7.5\n    Date: Sun, 29 Dec 2013 14:27:33 GMT\n\n    {\n      \"error\": \"Krivens!\"\n    }\n\nAuthentication\n--------------\n\n**Hawk** extension provides API authentication for Flask.\n\nHawk_ is an HTTP authentication scheme using a message authentication code\n(MAC) algorithm to provide partial HTTP request cryptographic verification.\n\nThe extension is based on Mohawk_, so make sure you have installed it.\n\n.. code-block:: console\n\n    $ pip install mohawk\n\nUsage example:\n\n.. code-block:: python\n\n    from flask import Flask\n    from api_utils import Hawk\n\n    app = Flask(__name__)\n    hawk = Hawk(app)\n\n\n    @hawk.client_key_loader\n    def get_client_key(client_id):\n        # In a real project you will likely use some storage.\n        if client_id == 'Alice':\n            return 'werxhqb98rpaxn39848xrunpaw3489ruxnpa98w4rxn'\n        else:\n            raise LookupError()\n\n\n    @app.route('/')\n    @hawk.auth_required\n    def index():\n        return 'hello world'\n\n    if __name__ == '__main__':\n        app.run()\n\n.. code-block:: console\n\n    $ curl http://127.0.0.1:5000/ -i\n    HTTP/1.0 401 UNAUTHORIZED\n    ...\n\nCookie based authentication is disabled by default.\nSet ``HAWK_ALLOW_COOKIE_AUTH = True`` to enable it. Also **Hawk** supports\nresponse signing, enable it ``HAWK_SIGN_RESPONSE = True`` if you need it.\n\nFollowing configuration keys are used by Mohawk_ library.\n\n.. code-block:: python\n\n    HAWK_ALGORITHM = 'sha256'\n    HAWK_ACCEPT_UNTRUSTED_CONTENT = False\n    HAWK_LOCALTIME_OFFSET_IN_SECONDS = 0\n    HAWK_TIMESTAMP_SKEW_IN_SECONDS = 60\n\nCheck `Mohawk documentation`_ for more information.\n\nIt can be convenient to globally turn off authentication when unit testing\nby setting ``HAWK_ENABLED = False``.\n\nTests\n-----\n\nTests are run by:\n\n.. code-block:: console\n\n    $ pip install -r requirements.txt\n    $ tox\n\n.. _API example project: https://github.com/marselester/api-example-based-on-flask\n.. _Hawk: https://github.com/hueniverse/hawk\n.. _Mohawk: https://github.com/kumar303/mohawk\n.. _Mohawk documentation: http://mohawk.readthedocs.org\n.. _Flask-Login: https://flask-login.readthedocs.org", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/marselester/flask-api-utils", "keywords": null, "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "Flask-API-Utils", "package_url": "https://pypi.org/project/Flask-API-Utils/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/Flask-API-Utils/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/marselester/flask-api-utils"}, "release_url": "https://pypi.org/project/Flask-API-Utils/1.0.2/", "requires_dist": null, "requires_python": null, "summary": "Flask-API-Utils helps you to create APIs.", "version": "1.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://travis-ci.org/marselester/flask-api-utils\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/marselester/flask-api-utils.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3d085f4f147278f5cdd2829ffef5c7e7a359e621/68747470733a2f2f7472617669732d63692e6f72672f6d617273656c65737465722f666c61736b2d6170692d7574696c732e706e67\"></a>\n<p>Flask-API-Utils helps you to create APIs. It makes responses in appropriate\nformats, for instance, JSON. All you need to do is to return dictionary\nfrom your views. Another useful feature is an authentication.\nThe library supports <a href=\"https://github.com/hueniverse/hawk\" rel=\"nofollow\">Hawk</a> HTTP authentication scheme and <a href=\"https://flask-login.readthedocs.org\" rel=\"nofollow\">Flask-Login</a>\nextension. To sum up, there is an <a href=\"https://github.com/marselester/api-example-based-on-flask\" rel=\"nofollow\">API example project</a>.</p>\n<div id=\"accept-header-based-response\">\n<h2>\u201cAccept\u201d Header based Response</h2>\n<p><strong>ResponsiveFlask</strong> tends to make responses based on <strong>Accept</strong>\nrequest-header (RFC 2616). If a view function does not return a dictionary,\nthen response will be processed as usual. Here is an example.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">api_utils</span> <span class=\"kn\">import</span> <span class=\"n\">ResponsiveFlask</span>\n\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">ResponsiveFlask</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n\n\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span><span class=\"p\">(</span><span class=\"s1\">'/'</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">hello_world</span><span class=\"p\">():</span>\n    <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"s1\">'hello'</span><span class=\"p\">:</span> <span class=\"s1\">'world'</span><span class=\"p\">}</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">dummy_xml_formatter</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"s1\">'&lt;hello&gt;world&lt;/hello&gt;'</span>\n\n<span class=\"n\">xml_mimetype</span> <span class=\"o\">=</span> <span class=\"s1\">'application/vnd.company+xml'</span>\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">response_formatters</span><span class=\"p\">[</span><span class=\"n\">xml_mimetype</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">dummy_xml_formatter</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n</pre>\n<p>It\u2019s assumed that file was saved as <tt>api.py</tt>:</p>\n<pre><span class=\"gp\">$</span> python api.py\n<span class=\"go\"> * Running on http://127.0.0.1:5000/</span>\n</pre>\n<p>Here are curl examples with different <strong>Accept</strong> headers:</p>\n<pre><span class=\"gp\">$</span> curl http://127.0.0.1:5000/ -i\n<span class=\"go\">HTTP/1.0 200 OK\nContent-Type: application/json\nContent-Length: 22\nServer: Werkzeug/0.9.4 Python/2.7.5\nDate: Sat, 07 Dec 2013 14:01:14 GMT\n\n{\n  \"hello\": \"world\"\n}\n</span><span class=\"gp\">$</span> curl http://127.0.0.1:5000/ -H <span class=\"s1\">'Accept: application/vnd.company+xml'</span> -i\n<span class=\"go\">HTTP/1.0 200 OK\nContent-Type: application/vnd.company+xml; charset=utf-8\nContent-Length: 20\nServer: Werkzeug/0.9.4 Python/2.7.5\nDate: Sat, 07 Dec 2013 14:01:50 GMT\n\n&lt;hello&gt;world&lt;/hello&gt;\n</span><span class=\"gp\">$</span> curl http://127.0.0.1:5000/ -H <span class=\"s1\">'Accept: blah/*'</span> -i\n<span class=\"go\">HTTP/1.0 406 NOT ACCEPTABLE\nContent-Type: application/json\nContent-Length: 83\nServer: Werkzeug/0.9.4 Python/2.7.5\nDate: Sat, 07 Dec 2013 14:02:23 GMT\n\n{\n  \"mimetypes\": [\n    \"application/json\",\n    \"application/vnd.company+xml\"\n  ]\n}</span>\n</pre>\n</div>\n<div id=\"http-error-handling\">\n<h2>HTTP Error Handling</h2>\n<p>You can set HTTP error handler by using <strong>@app.default_errorhandler</strong>\ndecorator. Note that it might override already defined error handlers,\nso you should declare it before them.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">flask</span> <span class=\"kn\">import</span> <span class=\"n\">request</span>\n<span class=\"kn\">from</span> <span class=\"nn\">api_utils</span> <span class=\"kn\">import</span> <span class=\"n\">ResponsiveFlask</span>\n\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">ResponsiveFlask</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n\n\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">default_errorhandler</span>\n<span class=\"k\">def</span> <span class=\"nf\">werkzeug_default_exceptions_handler</span><span class=\"p\">(</span><span class=\"n\">error</span><span class=\"p\">):</span>\n    <span class=\"n\">error_info_url</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n        <span class=\"s1\">'http://developer.example.com/errors.html#error-code-</span><span class=\"si\">{}</span><span class=\"s1\">'</span>\n    <span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">error</span><span class=\"o\">.</span><span class=\"n\">code</span><span class=\"p\">)</span>\n\n    <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'code'</span><span class=\"p\">:</span> <span class=\"n\">error</span><span class=\"o\">.</span><span class=\"n\">code</span><span class=\"p\">,</span>\n        <span class=\"s1\">'message'</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">error</span><span class=\"p\">),</span>\n        <span class=\"s1\">'info_url'</span><span class=\"p\">:</span> <span class=\"n\">error_info_url</span><span class=\"p\">,</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"n\">response</span><span class=\"p\">,</span> <span class=\"n\">error</span><span class=\"o\">.</span><span class=\"n\">code</span>\n\n\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">errorhandler</span><span class=\"p\">(</span><span class=\"mi\">404</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">page_not_found</span><span class=\"p\">(</span><span class=\"n\">error</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"s1\">'error'</span><span class=\"p\">:</span> <span class=\"s1\">'This page does not exist'</span><span class=\"p\">},</span> <span class=\"mi\">404</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">MyException</span><span class=\"p\">(</span><span class=\"ne\">Exception</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n\n\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">errorhandler</span><span class=\"p\">(</span><span class=\"n\">MyException</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">special_exception_handler</span><span class=\"p\">(</span><span class=\"n\">error</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"s1\">'error'</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">error</span><span class=\"p\">)}</span>\n\n\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span><span class=\"p\">(</span><span class=\"s1\">'/my-exc'</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">hello_my_exception</span><span class=\"p\">():</span>\n    <span class=\"k\">raise</span> <span class=\"n\">MyException</span><span class=\"p\">(</span><span class=\"s1\">'Krivens!'</span><span class=\"p\">)</span>\n\n\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span><span class=\"p\">(</span><span class=\"s1\">'/yarr'</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">hello_bad_request</span><span class=\"p\">():</span>\n    <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"p\">[</span><span class=\"s1\">'bad-key'</span><span class=\"p\">]</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n</pre>\n<p>Let\u2019s try to curl this example. First response shows that we redefined\ndefault <tt>{'code': 400, 'message': '400: Bad Request'}</tt> error format.\nNext ones show that you can handle specific errors as usual.</p>\n<pre><span class=\"gp\">$</span> curl http://127.0.0.1:5000/yarr -i\n<span class=\"go\">HTTP/1.0 400 BAD REQUEST\nContent-Type: application/json\nContent-Length: 125\nServer: Werkzeug/0.9.4 Python/2.7.5\nDate: Sun, 29 Dec 2013 14:26:30 GMT\n\n{\n  \"code\": 400,\n  \"info_url\": \"http://developer.example.com/errors.html#error-code-400\",\n  \"message\": \"400: Bad Request\"\n}\n</span><span class=\"gp\">$</span> curl http://127.0.0.1:5000/ -i\n<span class=\"go\">HTTP/1.0 404 NOT FOUND\nContent-Type: application/json\nContent-Length: 41\nServer: Werkzeug/0.9.4 Python/2.7.5\nDate: Sun, 29 Dec 2013 14:28:46 GMT\n\n{\n  \"error\": \"This page does not exist\"\n}\n</span><span class=\"gp\">$</span> curl http://127.0.0.1:5000/my-exc -i\n<span class=\"go\">HTTP/1.0 200 OK\nContent-Type: application/json\nContent-Length: 25\nServer: Werkzeug/0.9.4 Python/2.7.5\nDate: Sun, 29 Dec 2013 14:27:33 GMT\n\n{\n  \"error\": \"Krivens!\"\n}</span>\n</pre>\n</div>\n<div id=\"authentication\">\n<h2>Authentication</h2>\n<p><strong>Hawk</strong> extension provides API authentication for Flask.</p>\n<p><a href=\"https://github.com/hueniverse/hawk\" rel=\"nofollow\">Hawk</a> is an HTTP authentication scheme using a message authentication code\n(MAC) algorithm to provide partial HTTP request cryptographic verification.</p>\n<p>The extension is based on <a href=\"https://github.com/kumar303/mohawk\" rel=\"nofollow\">Mohawk</a>, so make sure you have installed it.</p>\n<pre><span class=\"gp\">$</span> pip install mohawk\n</pre>\n<p>Usage example:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">flask</span> <span class=\"kn\">import</span> <span class=\"n\">Flask</span>\n<span class=\"kn\">from</span> <span class=\"nn\">api_utils</span> <span class=\"kn\">import</span> <span class=\"n\">Hawk</span>\n\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">Flask</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n<span class=\"n\">hawk</span> <span class=\"o\">=</span> <span class=\"n\">Hawk</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"p\">)</span>\n\n\n<span class=\"nd\">@hawk</span><span class=\"o\">.</span><span class=\"n\">client_key_loader</span>\n<span class=\"k\">def</span> <span class=\"nf\">get_client_key</span><span class=\"p\">(</span><span class=\"n\">client_id</span><span class=\"p\">):</span>\n    <span class=\"c1\"># In a real project you will likely use some storage.</span>\n    <span class=\"k\">if</span> <span class=\"n\">client_id</span> <span class=\"o\">==</span> <span class=\"s1\">'Alice'</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"s1\">'werxhqb98rpaxn39848xrunpaw3489ruxnpa98w4rxn'</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">LookupError</span><span class=\"p\">()</span>\n\n\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span><span class=\"p\">(</span><span class=\"s1\">'/'</span><span class=\"p\">)</span>\n<span class=\"nd\">@hawk</span><span class=\"o\">.</span><span class=\"n\">auth_required</span>\n<span class=\"k\">def</span> <span class=\"nf\">index</span><span class=\"p\">():</span>\n    <span class=\"k\">return</span> <span class=\"s1\">'hello world'</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n</pre>\n<pre><span class=\"gp\">$</span> curl http://127.0.0.1:5000/ -i\n<span class=\"go\">HTTP/1.0 401 UNAUTHORIZED\n...</span>\n</pre>\n<p>Cookie based authentication is disabled by default.\nSet <tt>HAWK_ALLOW_COOKIE_AUTH = True</tt> to enable it. Also <strong>Hawk</strong> supports\nresponse signing, enable it <tt>HAWK_SIGN_RESPONSE = True</tt> if you need it.</p>\n<p>Following configuration keys are used by <a href=\"https://github.com/kumar303/mohawk\" rel=\"nofollow\">Mohawk</a> library.</p>\n<pre><span class=\"n\">HAWK_ALGORITHM</span> <span class=\"o\">=</span> <span class=\"s1\">'sha256'</span>\n<span class=\"n\">HAWK_ACCEPT_UNTRUSTED_CONTENT</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n<span class=\"n\">HAWK_LOCALTIME_OFFSET_IN_SECONDS</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span class=\"n\">HAWK_TIMESTAMP_SKEW_IN_SECONDS</span> <span class=\"o\">=</span> <span class=\"mi\">60</span>\n</pre>\n<p>Check <a href=\"http://mohawk.readthedocs.org\" rel=\"nofollow\">Mohawk documentation</a> for more information.</p>\n<p>It can be convenient to globally turn off authentication when unit testing\nby setting <tt>HAWK_ENABLED = False</tt>.</p>\n</div>\n<div id=\"tests\">\n<h2>Tests</h2>\n<p>Tests are run by:</p>\n<pre><span class=\"gp\">$</span> pip install -r requirements.txt\n<span class=\"gp\">$</span> tox\n</pre>\n</div>\n\n          </div>"}, "last_serial": 1769744, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "0de9485c295fa69ddae516c771da1946", "sha256": "921dd9f32aef8e0c9b8ff6ef92caf7cdadd110539ba36839a90a3e27ecaa1d50"}, "downloads": -1, "filename": "Flask-API-Utils-0.1.0.tar.gz", "has_sig": false, "md5_digest": "0de9485c295fa69ddae516c771da1946", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3064, "upload_time": "2013-12-10T13:22:06", "upload_time_iso_8601": "2013-12-10T13:22:06.570887Z", "url": "https://files.pythonhosted.org/packages/b8/97/7fdfa84b01cbc520441d689702c0f540b654d4c0d2aac10c939c68845e5a/Flask-API-Utils-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "166a2406b0d4fd9166a00ce27a380aaa", "sha256": "68c60a79f6544c8382d149b7738c93a118718e8416ba6c8dc1a91c9528f11c18"}, "downloads": -1, "filename": "Flask-API-Utils-0.2.0.tar.gz", "has_sig": false, "md5_digest": "166a2406b0d4fd9166a00ce27a380aaa", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3987, "upload_time": "2013-12-31T08:43:34", "upload_time_iso_8601": "2013-12-31T08:43:34.185324Z", "url": "https://files.pythonhosted.org/packages/f1/b6/aeba2cfbc434c96f8aba8fb261e75c54ecd3821ff081fa7d34dd2c445b5e/Flask-API-Utils-0.2.0.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "e80e1cc7f4be4975f7132a1663140cb9", "sha256": "1fafce0ee8b74e188253ed4d3d7b1fbd81600e6c5d17ffa438c323fbedf9a4fb"}, "downloads": -1, "filename": "Flask-API-Utils-1.0.0.tar.gz", "has_sig": false, "md5_digest": "e80e1cc7f4be4975f7132a1663140cb9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6026, "upload_time": "2014-06-21T13:33:43", "upload_time_iso_8601": "2014-06-21T13:33:43.268874Z", "url": "https://files.pythonhosted.org/packages/e6/15/bb387d1c571fa692cae6d864550c910a19c5b65c64aff3edb3373858aaff/Flask-API-Utils-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "47c6941d04e8b75e76889f32e55d42f1", "sha256": "51d9654e914942cb0d7ca0aab71f2a2bad3cca597411869353fcfe39e28e94b6"}, "downloads": -1, "filename": "Flask-API-Utils-1.0.1.tar.gz", "has_sig": false, "md5_digest": "47c6941d04e8b75e76889f32e55d42f1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6197, "upload_time": "2015-10-15T02:44:25", "upload_time_iso_8601": "2015-10-15T02:44:25.876192Z", "url": "https://files.pythonhosted.org/packages/06/ae/25d102b3a84a324ba707e7dabc01517acfa92236163592f4d9098d2ac006/Flask-API-Utils-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "9d58b8fd15eadb1f625139487e17111c", "sha256": "c108000b91b6ebdf6cd2ff8e57af091edb12feb80e97484619311783d073437d"}, "downloads": -1, "filename": "Flask-API-Utils-1.0.2.tar.gz", "has_sig": false, "md5_digest": "9d58b8fd15eadb1f625139487e17111c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6311, "upload_time": "2015-10-15T08:31:55", "upload_time_iso_8601": "2015-10-15T08:31:55.707061Z", "url": "https://files.pythonhosted.org/packages/88/7a/ea0575cd9f410f3bebed0d18ee06a72d488db99260a5331a641dbbcfb218/Flask-API-Utils-1.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "9d58b8fd15eadb1f625139487e17111c", "sha256": "c108000b91b6ebdf6cd2ff8e57af091edb12feb80e97484619311783d073437d"}, "downloads": -1, "filename": "Flask-API-Utils-1.0.2.tar.gz", "has_sig": false, "md5_digest": "9d58b8fd15eadb1f625139487e17111c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6311, "upload_time": "2015-10-15T08:31:55", "upload_time_iso_8601": "2015-10-15T08:31:55.707061Z", "url": "https://files.pythonhosted.org/packages/88/7a/ea0575cd9f410f3bebed0d18ee06a72d488db99260a5331a641dbbcfb218/Flask-API-Utils-1.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 01:03:09 2020"}