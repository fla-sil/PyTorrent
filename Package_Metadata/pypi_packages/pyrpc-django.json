{"info": {"author": "Louis Livingston", "author_email": "livingston.louis@gmail.com", "bugtrack_url": null, "classifiers": ["Environment :: Web Environment", "Framework :: Django", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: 3 :: Only", "Topic :: Internet :: WWW/HTTP", "Topic :: Internet :: WWW/HTTP :: Dynamic Content"], "description": "pyrpc\n-----\n\nPyrpc is a Django app to handle JSON Remote Procedure Calls \nusing Django Rest Framework. \n\nInstallation\n^^^^^^^^^^^^\n\n``pip install pyrpc-django``\n\nQuick Setup\n^^^^^^^^^^^\n\n\n1. \n   Add ``rest_framework`` ``pyrpc``\\ to your INSTALLED_APPS setting like this:\n\n   .. code-block::\n\n       INSTALLED_APPS = [\n           ...\n           'rest_framework',\n           'pyrpc',\n       ]\n\n2. \n   Add the ``safe_method`` decorator to methods in your app.\n\n.. code-block::\n\n   from pyrpc.decorators import safe_method\n\n   @safe_method\n   def return_cat_string(*args, **kwargs):\n       \"\"\" \n       Returns a concatenated string. \n       Extended description of function. \n\n       @param args: List of strings\n       @returns: Concatenated string\n       \"\"\"\n\n       result = ''\n       for arg in args:\n           result = result + arg\n       return result\n\n\n   class Library():\n       @safe_method\n       def sum_two_numbers(self, operand1=0, operand2=0):\n           \"\"\" \n           Returns the sum of two numbers. \n           Extended description of function. \n\n           @param operand1: Can be any float number.\n           @param operand2: Can be any float number.\n           @returns: operand1 + operand2. \n           \"\"\"\n           return operand1 + operand2\n\n       @safe_method\n       def multiply_two_numbers(self, operand1=0, operand2=0):\n           \"\"\" \n           Returns the product of two numbers. \n           Extended description of function.\n\n           @param operand1: Can be any float number.\n           @param operand2: Can be any float number.\n           @returns: operand1 * operand2. \n           \"\"\"\n           return operand1 * operand2\n\n\n3. Add pyrpc urls to ``urls.py``\n\n.. code-block::\n\n   from django.urls import path\n   from django.conf.urls import include\n   from pyrpc.urls import urls as pyrpc_urls\n\n   urlpatterns = [\n       path('api/', include(pyrpc_urls)),\n   ]\n\n\n4. Start the server: ``python manage.py runserver``\n\nSending Requests\n^^^^^^^^^^^^^^^^\n\n\n1. Using the above example, POST the folowing JSON to ``127.0.0.1:8000/api/methods/``.\n\n.. code-block::\n\n   {\n       \"id\": 1,\n       \"jsonrpc\": \"2.0\",\n       \"method\": \"sum_two_numbers\",\n       \"params\": {\n           \"args\": [],\n           \"kwargs\": {\n               \"operand1\": 5,\n               \"operand2\": 6\n           }\n       }\n   }\n\n\n2. A JSON response should be returned similar to the folowing:\n\n.. code-block::\n\n   {\n       \"id\": 1,\n       \"jsonrpc\": \"2.0\",\n       \"result\": 11\n   }\n\nReturning a List of Methods\n^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n1. Using the previous example, send a GET request to ``127.0.0.1:8000/api/methods``.\n2. A list of methods and their descriptions shold be returned as follows:\n\n.. code-block::\n\n   [\n       {\n           \"name\": \"multiply_two_numbers\",\n           \"kwargs\": {\n               \"operand1\": \"Can be any float number.\",\n               \"operand2\": \"Can be any float number.\"\n           },\n           \"description\": [\n               \"Returns the product of two numbers.\",\n               \"Extended description of function.\"\n           ],\n           \"returns\": \"operand1 * operand2.\"\n       },\n       {\n           \"name\": \"sum_two_numbers\",\n           \"kwargs\": {\n               \"operand1\": \"Can be any float number.\",\n               \"operand2\": \"Can be any float number.\"\n           },\n           \"description\": [\n               \"Returns the sum of two numbers.\",\n               \"Extended description of function.\"\n           ],\n           \"returns\": \"operand1 + operand2.\"\n       }\n   ]", "description_content_type": "", "docs_url": null, "download_url": "https://github.com/louisliv/pyrpc/archive/0.1.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/louisliv/pyrpc", "keywords": "", "license": "BSD-3-Clause  # Example license", "maintainer": "", "maintainer_email": "", "name": "pyrpc-django", "package_url": "https://pypi.org/project/pyrpc-django/", "platform": "", "project_url": "https://pypi.org/project/pyrpc-django/", "project_urls": {"Download": "https://github.com/louisliv/pyrpc/archive/0.1.tar.gz", "Homepage": "https://github.com/louisliv/pyrpc"}, "release_url": "https://pypi.org/project/pyrpc-django/1.0/", "requires_dist": null, "requires_python": "", "summary": "A Django app to conduct Web-based polls.", "version": "1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Pyrpc is a Django app to handle JSON Remote Procedure Calls\nusing Django Rest Framework.</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p><tt>pip install <span class=\"pre\">pyrpc-django</span></tt></p>\n</div>\n<div id=\"quick-setup\">\n<h2>Quick Setup</h2>\n<ol>\n<li><p>Add <tt>rest_framework</tt> <tt>pyrpc</tt>to your INSTALLED_APPS setting like this:</p>\n<pre>INSTALLED_APPS = [\n    ...\n    'rest_framework',\n    'pyrpc',\n]\n</pre>\n</li>\n<li><p>Add the <tt>safe_method</tt> decorator to methods in your app.</p>\n</li>\n</ol>\n<pre>from pyrpc.decorators import safe_method\n\n@safe_method\ndef return_cat_string(*args, **kwargs):\n    \"\"\"\n    Returns a concatenated string.\n    Extended description of function.\n\n    @param args: List of strings\n    @returns: Concatenated string\n    \"\"\"\n\n    result = ''\n    for arg in args:\n        result = result + arg\n    return result\n\n\nclass Library():\n    @safe_method\n    def sum_two_numbers(self, operand1=0, operand2=0):\n        \"\"\"\n        Returns the sum of two numbers.\n        Extended description of function.\n\n        @param operand1: Can be any float number.\n        @param operand2: Can be any float number.\n        @returns: operand1 + operand2.\n        \"\"\"\n        return operand1 + operand2\n\n    @safe_method\n    def multiply_two_numbers(self, operand1=0, operand2=0):\n        \"\"\"\n        Returns the product of two numbers.\n        Extended description of function.\n\n        @param operand1: Can be any float number.\n        @param operand2: Can be any float number.\n        @returns: operand1 * operand2.\n        \"\"\"\n        return operand1 * operand2\n</pre>\n<ol>\n<li>Add pyrpc urls to <tt>urls.py</tt></li>\n</ol>\n<pre>from django.urls import path\nfrom django.conf.urls import include\nfrom pyrpc.urls import urls as pyrpc_urls\n\nurlpatterns = [\n    path('api/', include(pyrpc_urls)),\n]\n</pre>\n<ol>\n<li>Start the server: <tt>python manage.py runserver</tt></li>\n</ol>\n</div>\n<div id=\"sending-requests\">\n<h2>Sending Requests</h2>\n<ol>\n<li>Using the above example, POST the folowing JSON to <tt>127.0.0.1:8000/api/methods/</tt>.</li>\n</ol>\n<pre>{\n    \"id\": 1,\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"sum_two_numbers\",\n    \"params\": {\n        \"args\": [],\n        \"kwargs\": {\n            \"operand1\": 5,\n            \"operand2\": 6\n        }\n    }\n}\n</pre>\n<ol>\n<li>A JSON response should be returned similar to the folowing:</li>\n</ol>\n<pre>{\n    \"id\": 1,\n    \"jsonrpc\": \"2.0\",\n    \"result\": 11\n}\n</pre>\n</div>\n<div id=\"returning-a-list-of-methods\">\n<h2>Returning a List of Methods</h2>\n<ol>\n<li>Using the previous example, send a GET request to <tt>127.0.0.1:8000/api/methods</tt>.</li>\n<li>A list of methods and their descriptions shold be returned as follows:</li>\n</ol>\n<pre>[\n    {\n        \"name\": \"multiply_two_numbers\",\n        \"kwargs\": {\n            \"operand1\": \"Can be any float number.\",\n            \"operand2\": \"Can be any float number.\"\n        },\n        \"description\": [\n            \"Returns the product of two numbers.\",\n            \"Extended description of function.\"\n        ],\n        \"returns\": \"operand1 * operand2.\"\n    },\n    {\n        \"name\": \"sum_two_numbers\",\n        \"kwargs\": {\n            \"operand1\": \"Can be any float number.\",\n            \"operand2\": \"Can be any float number.\"\n        },\n        \"description\": [\n            \"Returns the sum of two numbers.\",\n            \"Extended description of function.\"\n        ],\n        \"returns\": \"operand1 + operand2.\"\n    }\n]\n</pre>\n</div>\n\n          </div>"}, "last_serial": 7184146, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "16cd9166f312dc0fa58ae61cea5ae601", "sha256": "e06a61c041f807a1c2fe79ce9adda79c06cafae04a0623744a1ad9b931ed4d68"}, "downloads": -1, "filename": "pyrpc-django-0.1.tar.gz", "has_sig": false, "md5_digest": "16cd9166f312dc0fa58ae61cea5ae601", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3817, "upload_time": "2020-05-04T19:48:04", "upload_time_iso_8601": "2020-05-04T19:48:04.595130Z", "url": "https://files.pythonhosted.org/packages/ce/81/7dcd9f572da45c47fec2919212584eeea6ee4ab1837e9f6176deb035ef90/pyrpc-django-0.1.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "c3d98c408188409e351347b58bbff2e5", "sha256": "83af449da1893aa2bcc77ad677ce385cdc5649e94b4f1295bd625731627dc92f"}, "downloads": -1, "filename": "pyrpc-django-0.3.tar.gz", "has_sig": false, "md5_digest": "c3d98c408188409e351347b58bbff2e5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7826, "upload_time": "2020-05-05T21:24:16", "upload_time_iso_8601": "2020-05-05T21:24:16.192259Z", "url": "https://files.pythonhosted.org/packages/e6/e1/695eb911bc7937d8556ad4949b404eca006b74e85979f3cfb9bd84a7f19c/pyrpc-django-0.3.tar.gz", "yanked": false}], "1.0": [{"comment_text": "", "digests": {"md5": "a382b60581308bb39c6ebb264ec2e99c", "sha256": "745405767d4273590771ea947a9f35d1598300ae727ad6065a911e3bca810a7e"}, "downloads": -1, "filename": "pyrpc-django-1.0.tar.gz", "has_sig": false, "md5_digest": "a382b60581308bb39c6ebb264ec2e99c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10626, "upload_time": "2020-05-06T23:10:45", "upload_time_iso_8601": "2020-05-06T23:10:45.268022Z", "url": "https://files.pythonhosted.org/packages/f9/c6/316b97cf6ff85628f26c6ac0f3f6043a2691c7f1d30208fc37a38476821a/pyrpc-django-1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a382b60581308bb39c6ebb264ec2e99c", "sha256": "745405767d4273590771ea947a9f35d1598300ae727ad6065a911e3bca810a7e"}, "downloads": -1, "filename": "pyrpc-django-1.0.tar.gz", "has_sig": false, "md5_digest": "a382b60581308bb39c6ebb264ec2e99c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10626, "upload_time": "2020-05-06T23:10:45", "upload_time_iso_8601": "2020-05-06T23:10:45.268022Z", "url": "https://files.pythonhosted.org/packages/f9/c6/316b97cf6ff85628f26c6ac0f3f6043a2691c7f1d30208fc37a38476821a/pyrpc-django-1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:57:35 2020"}