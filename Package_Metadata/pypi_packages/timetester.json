{"info": {"author": "Matthew Lam", "author_email": "lcpmatthew@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "\n# timetester\nFeed it a method and it tells you the average time.\n\n## Downloads\n`pip install timetester`  \nor   \n`python3 -m pip install timetester`\n\n## Usage\n- Timetester Object\n```python\nimport timetester\n\ndef foo(arg):\n    print(arg)\n    pass\n\nk = timetester.timeTester(foo)\n# NOT NECESSARY. Only use if you encountered an error and reloaded the object\nk.initialise()\n# Run tests\nk.runtests(*args,**kwargs)\n# Graph the average time taken\nk.graph()\n# Print a report of how the function did\nk.report()\n```\n- Timeout Decorator\n```python\nimport timetester\nimport time\n\n# Raises error\n@timetester.timeout(10)\ndef foo(bar):\n    time.sleep(11)\n```\n- Compare object\n> The compared functions should have the same intended purpose and the same arguments\n```python\nimport timetester\n\ndef foo():\n    pass\n\ndef bar():\n    pass\n\nk= timetester.compare(foo,bar)\n# NOT NECESSARY. Only use if you encountered an error and reloaded the function\nk.initialise()\n# Arguments are passed in here\nk.compareFuncs(*args,**kwargs)\n# Outputs a graph comparing the time\nk.graph()\n# Creates a json file consising of the time took for each function to run\nk.output_asfile()\n# Prints each function on the screen\nk.sort()\n```\n- Usage in Real-Time IDE(Terminal)\n>  Joining of functions are generally allowed for timeTester object\n>  However, you have to run the actual test function first\n```python\nimport timetester\n\ndef foo(args):\n    pass\n\ndef bar(args):\n    pass\n\n# Allowed\ntimetester.timeTester(foo).initialise().runtests().graph().report()\ntimetester.timeTester(foo).runtests().graph().report()\ntimetester.compare(foo,bar).initialise().compareFuncs().graph().sort().output_asfile()\ntimetester.compare(foo,bar).compareFuncs().output_asfile().graph()\n\n# Not allowed -- You have to run tests first\ntimetester.timeTester(foo).graph().report()\ntimetester.timeTester(foo).report()\ntimetester.compare(foo,bar).initialise().graph().sort().output_asfile()\ntimetester.compare(foo,bar).graph().sort()\n\n```\n## Default options\n```python\nimport timetester\ndef foo():\n    pass\n\ndef bar():\n    pass\n\n@timetester.timeout(seconds=10,error_message=os.strerror(errno.ETIME))  \n\nk= timetester.timeTester(foo, target=1, print_output=False,runtime=100,maxtime=10,error_time=0,return_type='mean')\n\n\n# compare object arguments must be methods\n# variables can only be changed later\nc = timetester.compare(foo,bar)\n\n```\n\n## timeTester object options\n- target(float/int)\n    > The target time you want the function to be at \n```Python\nimport timetester\n\ndef foo(arg):\n    pass\n\nk = timetester.timeTester(foo,target=0.005)\n# or\nk.target =0.05\n```  \n- - - - \n- runtime(int,float)\n> How many times the function is ran before taking average\n```python\nimport timetester\n\ndef foo(arg):\n    pass\n\nk= timetester.timeTester(foo, runtime=100)\n# or \nk.runtime = 100\n```\n----\n- print_output(bool)\n    > disable all `print` function inside the provided function.\n```Python\nimport timetester\n\ndef foo(arg):\n    print(arg)\n\nk= timetester.timeTester(foo, print_output=False)\n# or\nk.print_output = False\n# Even though the function is intended to print arguments, no output will be printed during run tests\nk.runtests('hi','bye')\n# After runtests print functions will be normal.\nprint('hi')\n```\n  - - --\n- maxtime(int/float)\n    > Maximum time all functions would run\n\n```python\nimport timetester\n\ndef foo(arg):\n    sleep(1)\n\nk=timetester.timeTester(foo,maxtime=1)\n# or\nk.maxtime = 1\nk.runtests()\n# When the total time is larger than 1 second error will be raised \n```\n----\n- return_type(choice)\n> Type of value returned  \n\nTypes of possible values include:\n<sub><sub>\n1. 'mean'\n2. 'mode'\n3. 'median'\n4. 'harmonicmean'\n5. 'geometricmean'  \n</sub></sub>\n```python \nimport timetester\n\ndef foo(arg):\n    pass\n\nk= timetester.timeTester(foo,return_type='geometricmean')\n# or\nk.type = 'geometricmean'\n```\n\n## timeTester object compatibility\nAllows comparision with `int`, `float` and `decimal.Decimal` objects\nTake this code below:\n```python\nimport timetester\nfrom decimal import Decimal\n\ndef foo(args):\n    pass\n\nk=timetester.timeTester(foo)\nk.runtests()\n```\n<sub>Lets say the return value of k (k.\\_\\_repr__()) is 0.1</sub>\n```python\nk==0.1              # True(float)\nk<1                 # True(int)\nk>=Decimal(0.0001)  # True(Decimal object)\nk==0.002            # False(float)\nk>1                 # False(int)\nk<=Decimal(0.00001) # False(Decimal object)\n```  \n## Compare object options\n- When creating the object,  the arguments must all be functions\n- Variables can only be changed later  \nSo let's say this is the initial code:  \n```python\nimport timetester\ndef foo():\n    pass\ndef bar():\n    pass\nk=timetester.compare(foo,bar)\n```\n----\n- looptime(int)\n> Changes how many 'loops' would be ran everytime compareFuncs() would return\n```python\n# Default\nk.looptime\n>>2\n# Change\nk.looptime = 10\nsetattr(k, 'looptime',10)\n# Restart\nk.initialise()\n```\n----\n- runtime(int)\n> Acts like timeTester.runtime option\n```python\n# Default\nk.runtime\n>>50\n# Change\nk.runtime=100\nsetattr(k, 'looptime',100)\n# Restart\nk.initialise()\n```\n----\n- errortime(int,float, decimal.Decimal object)\n> Acts as timetester.error_time option\n```python\n# Default\nk.errortime\n>>0 # off\n# Change\nk.errortime = 0.0001\nsetattr(k,'errortime',0.0001)\n# Restart\nk.initialise()\n```\n----\n- print(bool)\n> Acts as the timetester.print_output option\n```python\n# Default\nk.print\n>>False\n# Change\nk.print = False\nsetattr(k, 'print',False)\n# Restart\nk.initialise()\n```\n- meantype(string)\n> Acts as the timetester.type option\n```python\n# Default\nk.meantype\n>>'harmonicmean'\n# Change\nk.meantype = 'median'\nsetattr(k, 'meantype','median')\n# Restart\nk.initialise()\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/feimaomiao/timetester", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "timetester", "package_url": "https://pypi.org/project/timetester/", "platform": "", "project_url": "https://pypi.org/project/timetester/", "project_urls": {"Homepage": "https://github.com/feimaomiao/timetester"}, "release_url": "https://pypi.org/project/timetester/1.1.1/", "requires_dist": ["matplotlib"], "requires_python": ">=3.8", "summary": "Python package to get an average time of your function", "version": "1.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>timetester</h1>\n<p>Feed it a method and it tells you the average time.</p>\n<h2>Downloads</h2>\n<p><code>pip install timetester</code><br>\nor<br>\n<code>python3 -m pip install timetester</code></p>\n<h2>Usage</h2>\n<ul>\n<li>Timetester Object</li>\n</ul>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">timetester</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"p\">)</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"n\">timetester</span><span class=\"o\">.</span><span class=\"n\">timeTester</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"p\">)</span>\n<span class=\"c1\"># NOT NECESSARY. Only use if you encountered an error and reloaded the object</span>\n<span class=\"n\">k</span><span class=\"o\">.</span><span class=\"n\">initialise</span><span class=\"p\">()</span>\n<span class=\"c1\"># Run tests</span>\n<span class=\"n\">k</span><span class=\"o\">.</span><span class=\"n\">runtests</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n<span class=\"c1\"># Graph the average time taken</span>\n<span class=\"n\">k</span><span class=\"o\">.</span><span class=\"n\">graph</span><span class=\"p\">()</span>\n<span class=\"c1\"># Print a report of how the function did</span>\n<span class=\"n\">k</span><span class=\"o\">.</span><span class=\"n\">report</span><span class=\"p\">()</span>\n</pre>\n<ul>\n<li>Timeout Decorator</li>\n</ul>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">timetester</span>\n<span class=\"kn\">import</span> <span class=\"nn\">time</span>\n\n<span class=\"c1\"># Raises error</span>\n<span class=\"nd\">@timetester</span><span class=\"o\">.</span><span class=\"n\">timeout</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">bar</span><span class=\"p\">):</span>\n    <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">11</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li>Compare object</li>\n</ul>\n<blockquote>\n<p>The compared functions should have the same intended purpose and the same arguments</p>\n</blockquote>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">timetester</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">foo</span><span class=\"p\">():</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">bar</span><span class=\"p\">():</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"n\">k</span><span class=\"o\">=</span> <span class=\"n\">timetester</span><span class=\"o\">.</span><span class=\"n\">compare</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"p\">,</span><span class=\"n\">bar</span><span class=\"p\">)</span>\n<span class=\"c1\"># NOT NECESSARY. Only use if you encountered an error and reloaded the function</span>\n<span class=\"n\">k</span><span class=\"o\">.</span><span class=\"n\">initialise</span><span class=\"p\">()</span>\n<span class=\"c1\"># Arguments are passed in here</span>\n<span class=\"n\">k</span><span class=\"o\">.</span><span class=\"n\">compareFuncs</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n<span class=\"c1\"># Outputs a graph comparing the time</span>\n<span class=\"n\">k</span><span class=\"o\">.</span><span class=\"n\">graph</span><span class=\"p\">()</span>\n<span class=\"c1\"># Creates a json file consising of the time took for each function to run</span>\n<span class=\"n\">k</span><span class=\"o\">.</span><span class=\"n\">output_asfile</span><span class=\"p\">()</span>\n<span class=\"c1\"># Prints each function on the screen</span>\n<span class=\"n\">k</span><span class=\"o\">.</span><span class=\"n\">sort</span><span class=\"p\">()</span>\n</pre>\n<ul>\n<li>Usage in Real-Time IDE(Terminal)</li>\n</ul>\n<blockquote>\n<p>Joining of functions are generally allowed for timeTester object\nHowever, you have to run the actual test function first</p>\n</blockquote>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">timetester</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">bar</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"c1\"># Allowed</span>\n<span class=\"n\">timetester</span><span class=\"o\">.</span><span class=\"n\">timeTester</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">initialise</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">runtests</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">graph</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">report</span><span class=\"p\">()</span>\n<span class=\"n\">timetester</span><span class=\"o\">.</span><span class=\"n\">timeTester</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">runtests</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">graph</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">report</span><span class=\"p\">()</span>\n<span class=\"n\">timetester</span><span class=\"o\">.</span><span class=\"n\">compare</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"p\">,</span><span class=\"n\">bar</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">initialise</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">compareFuncs</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">graph</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">sort</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">output_asfile</span><span class=\"p\">()</span>\n<span class=\"n\">timetester</span><span class=\"o\">.</span><span class=\"n\">compare</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"p\">,</span><span class=\"n\">bar</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">compareFuncs</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">output_asfile</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">graph</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Not allowed -- You have to run tests first</span>\n<span class=\"n\">timetester</span><span class=\"o\">.</span><span class=\"n\">timeTester</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">graph</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">report</span><span class=\"p\">()</span>\n<span class=\"n\">timetester</span><span class=\"o\">.</span><span class=\"n\">timeTester</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">report</span><span class=\"p\">()</span>\n<span class=\"n\">timetester</span><span class=\"o\">.</span><span class=\"n\">compare</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"p\">,</span><span class=\"n\">bar</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">initialise</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">graph</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">sort</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">output_asfile</span><span class=\"p\">()</span>\n<span class=\"n\">timetester</span><span class=\"o\">.</span><span class=\"n\">compare</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"p\">,</span><span class=\"n\">bar</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">graph</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">sort</span><span class=\"p\">()</span>\n</pre>\n<h2>Default options</h2>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">timetester</span>\n<span class=\"k\">def</span> <span class=\"nf\">foo</span><span class=\"p\">():</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">bar</span><span class=\"p\">():</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"nd\">@timetester</span><span class=\"o\">.</span><span class=\"n\">timeout</span><span class=\"p\">(</span><span class=\"n\">seconds</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span><span class=\"n\">error_message</span><span class=\"o\">=</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">strerror</span><span class=\"p\">(</span><span class=\"n\">errno</span><span class=\"o\">.</span><span class=\"n\">ETIME</span><span class=\"p\">))</span>  \n\n<span class=\"n\">k</span><span class=\"o\">=</span> <span class=\"n\">timetester</span><span class=\"o\">.</span><span class=\"n\">timeTester</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"p\">,</span> <span class=\"n\">target</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">print_output</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span><span class=\"n\">runtime</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">,</span><span class=\"n\">maxtime</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span><span class=\"n\">error_time</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"n\">return_type</span><span class=\"o\">=</span><span class=\"s1\">'mean'</span><span class=\"p\">)</span>\n\n\n<span class=\"c1\"># compare object arguments must be methods</span>\n<span class=\"c1\"># variables can only be changed later</span>\n<span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">timetester</span><span class=\"o\">.</span><span class=\"n\">compare</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"p\">,</span><span class=\"n\">bar</span><span class=\"p\">)</span>\n</pre>\n<h2>timeTester object options</h2>\n<ul>\n<li>target(float/int)\n<blockquote>\n<p>The target time you want the function to be at</p>\n</blockquote>\n</li>\n</ul>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">timetester</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"n\">timetester</span><span class=\"o\">.</span><span class=\"n\">timeTester</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"p\">,</span><span class=\"n\">target</span><span class=\"o\">=</span><span class=\"mf\">0.005</span><span class=\"p\">)</span>\n<span class=\"c1\"># or</span>\n<span class=\"n\">k</span><span class=\"o\">.</span><span class=\"n\">target</span> <span class=\"o\">=</span><span class=\"mf\">0.05</span>\n</pre>\n<hr>\n<ul>\n<li>runtime(int,float)</li>\n</ul>\n<blockquote>\n<p>How many times the function is ran before taking average</p>\n</blockquote>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">timetester</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"n\">k</span><span class=\"o\">=</span> <span class=\"n\">timetester</span><span class=\"o\">.</span><span class=\"n\">timeTester</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"p\">,</span> <span class=\"n\">runtime</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">)</span>\n<span class=\"c1\"># or </span>\n<span class=\"n\">k</span><span class=\"o\">.</span><span class=\"n\">runtime</span> <span class=\"o\">=</span> <span class=\"mi\">100</span>\n</pre>\n<hr>\n<ul>\n<li>print_output(bool)\n<blockquote>\n<p>disable all <code>print</code> function inside the provided function.</p>\n</blockquote>\n</li>\n</ul>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">timetester</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"p\">)</span>\n\n<span class=\"n\">k</span><span class=\"o\">=</span> <span class=\"n\">timetester</span><span class=\"o\">.</span><span class=\"n\">timeTester</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"p\">,</span> <span class=\"n\">print_output</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"c1\"># or</span>\n<span class=\"n\">k</span><span class=\"o\">.</span><span class=\"n\">print_output</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n<span class=\"c1\"># Even though the function is intended to print arguments, no output will be printed during run tests</span>\n<span class=\"n\">k</span><span class=\"o\">.</span><span class=\"n\">runtests</span><span class=\"p\">(</span><span class=\"s1\">'hi'</span><span class=\"p\">,</span><span class=\"s1\">'bye'</span><span class=\"p\">)</span>\n<span class=\"c1\"># After runtests print functions will be normal.</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'hi'</span><span class=\"p\">)</span>\n</pre>\n<hr>\n<ul>\n<li>maxtime(int/float)\n<blockquote>\n<p>Maximum time all functions would run</p>\n</blockquote>\n</li>\n</ul>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">timetester</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"p\">):</span>\n    <span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"n\">k</span><span class=\"o\">=</span><span class=\"n\">timetester</span><span class=\"o\">.</span><span class=\"n\">timeTester</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"p\">,</span><span class=\"n\">maxtime</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"c1\"># or</span>\n<span class=\"n\">k</span><span class=\"o\">.</span><span class=\"n\">maxtime</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n<span class=\"n\">k</span><span class=\"o\">.</span><span class=\"n\">runtests</span><span class=\"p\">()</span>\n<span class=\"c1\"># When the total time is larger than 1 second error will be raised </span>\n</pre>\n<hr>\n<ul>\n<li>return_type(choice)</li>\n</ul>\n<blockquote>\n<p>Type of value returned</p>\n</blockquote>\n<p>Types of possible values include:\n<sub><sub></sub></sub></p>\n<ol>\n<li>'mean'</li>\n<li>'mode'</li>\n<li>'median'</li>\n<li>'harmonicmean'</li>\n<li>'geometricmean'<br>\n</li>\n</ol>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">timetester</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"n\">k</span><span class=\"o\">=</span> <span class=\"n\">timetester</span><span class=\"o\">.</span><span class=\"n\">timeTester</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"p\">,</span><span class=\"n\">return_type</span><span class=\"o\">=</span><span class=\"s1\">'geometricmean'</span><span class=\"p\">)</span>\n<span class=\"c1\"># or</span>\n<span class=\"n\">k</span><span class=\"o\">.</span><span class=\"n\">type</span> <span class=\"o\">=</span> <span class=\"s1\">'geometricmean'</span>\n</pre>\n<h2>timeTester object compatibility</h2>\n<p>Allows comparision with <code>int</code>, <code>float</code> and <code>decimal.Decimal</code> objects\nTake this code below:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">timetester</span>\n<span class=\"kn\">from</span> <span class=\"nn\">decimal</span> <span class=\"kn\">import</span> <span class=\"n\">Decimal</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"n\">k</span><span class=\"o\">=</span><span class=\"n\">timetester</span><span class=\"o\">.</span><span class=\"n\">timeTester</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"p\">)</span>\n<span class=\"n\">k</span><span class=\"o\">.</span><span class=\"n\">runtests</span><span class=\"p\">()</span>\n</pre>\n<p><sub>Lets say the return value of k (k.__repr__()) is 0.1</sub></p>\n<pre><span class=\"n\">k</span><span class=\"o\">==</span><span class=\"mf\">0.1</span>              <span class=\"c1\"># True(float)</span>\n<span class=\"n\">k</span><span class=\"o\">&lt;</span><span class=\"mi\">1</span>                 <span class=\"c1\"># True(int)</span>\n<span class=\"n\">k</span><span class=\"o\">&gt;=</span><span class=\"n\">Decimal</span><span class=\"p\">(</span><span class=\"mf\">0.0001</span><span class=\"p\">)</span>  <span class=\"c1\"># True(Decimal object)</span>\n<span class=\"n\">k</span><span class=\"o\">==</span><span class=\"mf\">0.002</span>            <span class=\"c1\"># False(float)</span>\n<span class=\"n\">k</span><span class=\"o\">&gt;</span><span class=\"mi\">1</span>                 <span class=\"c1\"># False(int)</span>\n<span class=\"n\">k</span><span class=\"o\">&lt;=</span><span class=\"n\">Decimal</span><span class=\"p\">(</span><span class=\"mf\">0.00001</span><span class=\"p\">)</span> <span class=\"c1\"># False(Decimal object)</span>\n</pre>\n<h2>Compare object options</h2>\n<ul>\n<li>When creating the object,  the arguments must all be functions</li>\n<li>Variables can only be changed later<br>\nSo let's say this is the initial code:</li>\n</ul>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">timetester</span>\n<span class=\"k\">def</span> <span class=\"nf\">foo</span><span class=\"p\">():</span>\n    <span class=\"k\">pass</span>\n<span class=\"k\">def</span> <span class=\"nf\">bar</span><span class=\"p\">():</span>\n    <span class=\"k\">pass</span>\n<span class=\"n\">k</span><span class=\"o\">=</span><span class=\"n\">timetester</span><span class=\"o\">.</span><span class=\"n\">compare</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"p\">,</span><span class=\"n\">bar</span><span class=\"p\">)</span>\n</pre>\n<hr>\n<ul>\n<li>looptime(int)</li>\n</ul>\n<blockquote>\n<p>Changes how many 'loops' would be ran everytime compareFuncs() would return</p>\n</blockquote>\n<pre><span class=\"c1\"># Default</span>\n<span class=\"n\">k</span><span class=\"o\">.</span><span class=\"n\">looptime</span>\n<span class=\"o\">&gt;&gt;</span><span class=\"mi\">2</span>\n<span class=\"c1\"># Change</span>\n<span class=\"n\">k</span><span class=\"o\">.</span><span class=\"n\">looptime</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>\n<span class=\"nb\">setattr</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"s1\">'looptime'</span><span class=\"p\">,</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"c1\"># Restart</span>\n<span class=\"n\">k</span><span class=\"o\">.</span><span class=\"n\">initialise</span><span class=\"p\">()</span>\n</pre>\n<hr>\n<ul>\n<li>runtime(int)</li>\n</ul>\n<blockquote>\n<p>Acts like timeTester.runtime option</p>\n</blockquote>\n<pre><span class=\"c1\"># Default</span>\n<span class=\"n\">k</span><span class=\"o\">.</span><span class=\"n\">runtime</span>\n<span class=\"o\">&gt;&gt;</span><span class=\"mi\">50</span>\n<span class=\"c1\"># Change</span>\n<span class=\"n\">k</span><span class=\"o\">.</span><span class=\"n\">runtime</span><span class=\"o\">=</span><span class=\"mi\">100</span>\n<span class=\"nb\">setattr</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"s1\">'looptime'</span><span class=\"p\">,</span><span class=\"mi\">100</span><span class=\"p\">)</span>\n<span class=\"c1\"># Restart</span>\n<span class=\"n\">k</span><span class=\"o\">.</span><span class=\"n\">initialise</span><span class=\"p\">()</span>\n</pre>\n<hr>\n<ul>\n<li>errortime(int,float, decimal.Decimal object)</li>\n</ul>\n<blockquote>\n<p>Acts as timetester.error_time option</p>\n</blockquote>\n<pre><span class=\"c1\"># Default</span>\n<span class=\"n\">k</span><span class=\"o\">.</span><span class=\"n\">errortime</span>\n<span class=\"o\">&gt;&gt;</span><span class=\"mi\">0</span> <span class=\"c1\"># off</span>\n<span class=\"c1\"># Change</span>\n<span class=\"n\">k</span><span class=\"o\">.</span><span class=\"n\">errortime</span> <span class=\"o\">=</span> <span class=\"mf\">0.0001</span>\n<span class=\"nb\">setattr</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"p\">,</span><span class=\"s1\">'errortime'</span><span class=\"p\">,</span><span class=\"mf\">0.0001</span><span class=\"p\">)</span>\n<span class=\"c1\"># Restart</span>\n<span class=\"n\">k</span><span class=\"o\">.</span><span class=\"n\">initialise</span><span class=\"p\">()</span>\n</pre>\n<hr>\n<ul>\n<li>print(bool)</li>\n</ul>\n<blockquote>\n<p>Acts as the timetester.print_output option</p>\n</blockquote>\n<pre><span class=\"c1\"># Default</span>\n<span class=\"n\">k</span><span class=\"o\">.</span><span class=\"n\">print</span>\n<span class=\"o\">&gt;&gt;</span><span class=\"kc\">False</span>\n<span class=\"c1\"># Change</span>\n<span class=\"n\">k</span><span class=\"o\">.</span><span class=\"n\">print</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n<span class=\"nb\">setattr</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"s1\">'print'</span><span class=\"p\">,</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"c1\"># Restart</span>\n<span class=\"n\">k</span><span class=\"o\">.</span><span class=\"n\">initialise</span><span class=\"p\">()</span>\n</pre>\n<ul>\n<li>meantype(string)</li>\n</ul>\n<blockquote>\n<p>Acts as the timetester.type option</p>\n</blockquote>\n<pre><span class=\"c1\"># Default</span>\n<span class=\"n\">k</span><span class=\"o\">.</span><span class=\"n\">meantype</span>\n<span class=\"o\">&gt;&gt;</span><span class=\"s1\">'harmonicmean'</span>\n<span class=\"c1\"># Change</span>\n<span class=\"n\">k</span><span class=\"o\">.</span><span class=\"n\">meantype</span> <span class=\"o\">=</span> <span class=\"s1\">'median'</span>\n<span class=\"nb\">setattr</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"s1\">'meantype'</span><span class=\"p\">,</span><span class=\"s1\">'median'</span><span class=\"p\">)</span>\n<span class=\"c1\"># Restart</span>\n<span class=\"n\">k</span><span class=\"o\">.</span><span class=\"n\">initialise</span><span class=\"p\">()</span>\n</pre>\n\n          </div>"}, "last_serial": 6924675, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "c926864a1d564a4b5eeba90525c2fb86", "sha256": "e619af1230f767b33ccdcc58b8418e0b71d0af71cc913be0c32069095cd2a7fe"}, "downloads": -1, "filename": "timetester-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "c926864a1d564a4b5eeba90525c2fb86", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.8", "size": 8789, "upload_time": "2020-03-11T23:27:12", "upload_time_iso_8601": "2020-03-11T23:27:12.757221Z", "url": "https://files.pythonhosted.org/packages/b5/5b/4cad074339f435b2f8d8cc76a3a92b5000f9c3d00dc0b2f8375486ba45ff/timetester-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "72559d36453302d19aa95016cb6b4b67", "sha256": "60738e7e77f3df12650b625cb832f46df3b08913340b484b51626105f6625bbc"}, "downloads": -1, "filename": "timetester-0.0.1.tar.gz", "has_sig": false, "md5_digest": "72559d36453302d19aa95016cb6b4b67", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.8", "size": 9960, "upload_time": "2020-03-11T23:27:15", "upload_time_iso_8601": "2020-03-11T23:27:15.127424Z", "url": "https://files.pythonhosted.org/packages/fb/72/13b6d76f6de838812241b311e35bb84807dd0c657f0c1402d949be072d8e/timetester-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "8a1038d29c591d9054911e70e8c9a8e0", "sha256": "5afb5b80192a1f2cb48963f72eb8763445dbe0a13bd60c003b04ce2559316943"}, "downloads": -1, "filename": "timetester-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "8a1038d29c591d9054911e70e8c9a8e0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.8", "size": 8496, "upload_time": "2020-03-12T02:08:38", "upload_time_iso_8601": "2020-03-12T02:08:38.126771Z", "url": "https://files.pythonhosted.org/packages/0e/76/f758fedd1c8f24cf61b6fe233926df059241386ad76aeaa4861cdef9e4af/timetester-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f436d7f552a3296eac2a4f71dd8b30f4", "sha256": "12a13af8987d4094bbfe1adb3bca17bb52bb6c768d4231b3a6306f377e81fb19"}, "downloads": -1, "filename": "timetester-0.0.2.tar.gz", "has_sig": false, "md5_digest": "f436d7f552a3296eac2a4f71dd8b30f4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.8", "size": 9891, "upload_time": "2020-03-12T02:08:39", "upload_time_iso_8601": "2020-03-12T02:08:39.263918Z", "url": "https://files.pythonhosted.org/packages/05/c0/84ec8884183017d8d628b92d34cafecb33973e1abb58e29f2393106b3079/timetester-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "eebf76e4fc740b383b7b2b1fb86ec680", "sha256": "dd0ce72c70e9b513b5bb37bf1c513edefba9954000233c1ab9fb3327b77a8a83"}, "downloads": -1, "filename": "timetester-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "eebf76e4fc740b383b7b2b1fb86ec680", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.8", "size": 8463, "upload_time": "2020-03-13T17:20:27", "upload_time_iso_8601": "2020-03-13T17:20:27.110131Z", "url": "https://files.pythonhosted.org/packages/54/ac/0955dd8c8f46a883ee1c11c20c0a191f005e2300597f6bbbaa3c9a780604/timetester-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a4bbe8d1a2a3979f4fa104cd5e79dbcf", "sha256": "10f50df6b59cdf09070bf99cf10a365fdf6424e87ea67b0fc61b5e70bb60435f"}, "downloads": -1, "filename": "timetester-0.0.3.tar.gz", "has_sig": false, "md5_digest": "a4bbe8d1a2a3979f4fa104cd5e79dbcf", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.8", "size": 9885, "upload_time": "2020-03-13T17:20:28", "upload_time_iso_8601": "2020-03-13T17:20:28.262790Z", "url": "https://files.pythonhosted.org/packages/93/3f/ed2df9236692fda4ce891fe31596818aa9f2f82f70c778860f68048e23d2/timetester-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "604992c3491d1ec22cbb2088f2bcef0d", "sha256": "70b57d3a70d7b8f8e9b953d112ae654e74a88f12a7f3e7551aebc3a3f51943c0"}, "downloads": -1, "filename": "timetester-0.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "604992c3491d1ec22cbb2088f2bcef0d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.8", "size": 8465, "upload_time": "2020-03-14T03:22:41", "upload_time_iso_8601": "2020-03-14T03:22:41.474178Z", "url": "https://files.pythonhosted.org/packages/7f/dc/5a6931a1f9b35baa5cfbb8d1bae7baf87fcaf40a895d75eb5020793c3858/timetester-0.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7a32bd0942648648c64b44654badde6c", "sha256": "b5dd86cbdfcc5305ed4dd1eb2ff8394d4dc2ba303ff5727471c798df0019b4b3"}, "downloads": -1, "filename": "timetester-0.0.4.tar.gz", "has_sig": false, "md5_digest": "7a32bd0942648648c64b44654badde6c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.8", "size": 9872, "upload_time": "2020-03-14T03:22:42", "upload_time_iso_8601": "2020-03-14T03:22:42.822275Z", "url": "https://files.pythonhosted.org/packages/df/db/07cfe807ccb5394b61397a02c2927b1e151050cb4983a301111b2b3f3ee4/timetester-0.0.4.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "80e8a96a876d5281335c03ec3065c61d", "sha256": "728fa2b4ade1e0426eedf29631e69674829a13cb61dee9a592a5ebbe1f4e1a9f"}, "downloads": -1, "filename": "timetester-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "80e8a96a876d5281335c03ec3065c61d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.8", "size": 8497, "upload_time": "2020-03-28T19:29:04", "upload_time_iso_8601": "2020-03-28T19:29:04.891008Z", "url": "https://files.pythonhosted.org/packages/74/0e/ef2b6328f5f5ac3896ee7dbc2c8c59336cef71870242df4de47993eafad1/timetester-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3a5cf3392402a3515fbbc1d7ff30d56e", "sha256": "e6307aeb30df42587c8ea01ec992df3c9ff374a44fc556d584da12290c208347"}, "downloads": -1, "filename": "timetester-0.1.0.tar.gz", "has_sig": false, "md5_digest": "3a5cf3392402a3515fbbc1d7ff30d56e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.8", "size": 9920, "upload_time": "2020-03-28T19:29:06", "upload_time_iso_8601": "2020-03-28T19:29:06.376087Z", "url": "https://files.pythonhosted.org/packages/f9/24/8b76e49e3a82a631b0048558ce226455a610dd4f8b43d2108497aedfb003/timetester-0.1.0.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "6a40a82a4c8be7ce5b482ac6a60d75fc", "sha256": "a8f068855e2f2e0397ac98c71a2e2b9c2a2dd0d5935d647cd7c4e3a10ac915ed"}, "downloads": -1, "filename": "timetester-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "6a40a82a4c8be7ce5b482ac6a60d75fc", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.8", "size": 8590, "upload_time": "2020-03-31T00:07:51", "upload_time_iso_8601": "2020-03-31T00:07:51.423970Z", "url": "https://files.pythonhosted.org/packages/6d/f2/cc36c8f0f1d0391b19bddb923df30b87ce560767df038f2b820be5275d63/timetester-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0a77c88e1ad397973805af41517e45f4", "sha256": "bab875a00e84294af0199ed012f8382c668baf8dd8bdcd0ceac7deb38f9e5165"}, "downloads": -1, "filename": "timetester-1.0.0.tar.gz", "has_sig": false, "md5_digest": "0a77c88e1ad397973805af41517e45f4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.8", "size": 9974, "upload_time": "2020-03-31T00:07:52", "upload_time_iso_8601": "2020-03-31T00:07:52.897089Z", "url": "https://files.pythonhosted.org/packages/e5/6b/8e23e0166bfcead06c4adf2efc69de413ab104624726573625ee1c8dc664/timetester-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "c8d7359dcb5775eca6b4896b8a67ad69", "sha256": "f6288260dce37c8a8994741ed4fd75326701eeb4f1d59dd2203559576a00e385"}, "downloads": -1, "filename": "timetester-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "c8d7359dcb5775eca6b4896b8a67ad69", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.8", "size": 8605, "upload_time": "2020-03-31T00:10:01", "upload_time_iso_8601": "2020-03-31T00:10:01.114804Z", "url": "https://files.pythonhosted.org/packages/97/a3/feae63ee972f6b49926499da1c857ba5f2ae22609c3142a231a868cfd7e1/timetester-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8e7245894cf9413b8d7ed6b082babb95", "sha256": "b7bd94d38cc11ef84b7926665a1e814639ffb3f040190172cd19131b0fc43248"}, "downloads": -1, "filename": "timetester-1.0.1.tar.gz", "has_sig": false, "md5_digest": "8e7245894cf9413b8d7ed6b082babb95", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.8", "size": 10002, "upload_time": "2020-03-31T00:10:02", "upload_time_iso_8601": "2020-03-31T00:10:02.745126Z", "url": "https://files.pythonhosted.org/packages/21/59/5ec706e50abca6fa4e1a909c762ee736562712c0b5e92ee34d6d4b4c3e25/timetester-1.0.1.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "59e53c5a4baaa23f7f9de6117e724421", "sha256": "421ce70c153318bd8efeefd9e995299ba938f4ed64ccc5a2675e2e4e1b1f3f31"}, "downloads": -1, "filename": "timetester-1.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "59e53c5a4baaa23f7f9de6117e724421", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.8", "size": 8622, "upload_time": "2020-03-31T05:12:01", "upload_time_iso_8601": "2020-03-31T05:12:01.751135Z", "url": "https://files.pythonhosted.org/packages/41/4c/4bee3166fdf3661b883908087ab07f65c967585f58d5ac0b3e234cb61f06/timetester-1.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ef7c6a2622e2846581c19dabceb1b155", "sha256": "cc09ff2d5f4cc712b2a41485f4ed0fd9216cfc35c0035fcfa3450e12685c5bd8"}, "downloads": -1, "filename": "timetester-1.1.0.tar.gz", "has_sig": false, "md5_digest": "ef7c6a2622e2846581c19dabceb1b155", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.8", "size": 10034, "upload_time": "2020-03-31T05:12:03", "upload_time_iso_8601": "2020-03-31T05:12:03.301359Z", "url": "https://files.pythonhosted.org/packages/b8/2d/1ab4d1458beea0f060e783ca79e10ded54595ab0d2aab2cbbc16745f3434/timetester-1.1.0.tar.gz", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "b4bb4baa37f2e13f804c95d0ee0c7508", "sha256": "e61cdfca34faff6c578b65018d2cff08daca2424e235db2a22b7050a0d0c3801"}, "downloads": -1, "filename": "timetester-1.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "b4bb4baa37f2e13f804c95d0ee0c7508", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.8", "size": 8617, "upload_time": "2020-04-01T01:53:28", "upload_time_iso_8601": "2020-04-01T01:53:28.351686Z", "url": "https://files.pythonhosted.org/packages/e5/2f/126794f1e7c5f84176d5e2591e87708af5232b1f05789b7e0e1a51b85675/timetester-1.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "125d4464f27ec7d4599f009e5121c961", "sha256": "728a3f2bef29a972e72e9ab6d470020d913ec34ecb99d8f537ccbecb4eff595f"}, "downloads": -1, "filename": "timetester-1.1.1.tar.gz", "has_sig": false, "md5_digest": "125d4464f27ec7d4599f009e5121c961", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.8", "size": 10043, "upload_time": "2020-04-01T01:53:29", "upload_time_iso_8601": "2020-04-01T01:53:29.925329Z", "url": "https://files.pythonhosted.org/packages/f4/a2/ae051e66d580c9ef3f5b5557ac783714076838ffe83980b26696078eb4a4/timetester-1.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b4bb4baa37f2e13f804c95d0ee0c7508", "sha256": "e61cdfca34faff6c578b65018d2cff08daca2424e235db2a22b7050a0d0c3801"}, "downloads": -1, "filename": "timetester-1.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "b4bb4baa37f2e13f804c95d0ee0c7508", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.8", "size": 8617, "upload_time": "2020-04-01T01:53:28", "upload_time_iso_8601": "2020-04-01T01:53:28.351686Z", "url": "https://files.pythonhosted.org/packages/e5/2f/126794f1e7c5f84176d5e2591e87708af5232b1f05789b7e0e1a51b85675/timetester-1.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "125d4464f27ec7d4599f009e5121c961", "sha256": "728a3f2bef29a972e72e9ab6d470020d913ec34ecb99d8f537ccbecb4eff595f"}, "downloads": -1, "filename": "timetester-1.1.1.tar.gz", "has_sig": false, "md5_digest": "125d4464f27ec7d4599f009e5121c961", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.8", "size": 10043, "upload_time": "2020-04-01T01:53:29", "upload_time_iso_8601": "2020-04-01T01:53:29.925329Z", "url": "https://files.pythonhosted.org/packages/f4/a2/ae051e66d580c9ef3f5b5557ac783714076838ffe83980b26696078eb4a4/timetester-1.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:53:22 2020"}