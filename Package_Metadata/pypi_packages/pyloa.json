{"info": {"author": "PyLoa Developers", "author_email": "pyloadevelopers@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "Intended Audience :: Education", "Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Operating System :: MacOS", "Operating System :: Microsoft :: Windows", "Operating System :: POSIX", "Operating System :: Unix", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Scientific/Engineering"], "description": "## PyLoa - Learning on-line Algorithms with Python\n\n`pyloa` is a research repository for analyzing the performance of classic on-line algorithms vs. modern Machine\nLearning, specifically Reinforcement Learning, approaches. PyLoa ships with an implementation of two commonly known \non-line problems as `environments`:\n\n* `(k,n)-paging-problem` with a `cache_size k` and `n pages` for a sequence of page-requests\n* `(k,n)-coloring-problem` with `k colors` for a graph with `n vertices` \n\nPyLoa allows for `agents` to be \n\n* trained on such `enviroments` (problem definitions) that require on-line solutions, \n* evaluated against commonly used heuristics or any state-of-the-art algorithm,\n* exploited (extrapolation of a *potentially* worst case problem instances) to determine a solution's [competitve ratio](https://en.wikipedia.org/wiki/Competitive_analysis_(online_algorithm)).\n\n---\n\n#### Dependencies\n\n`pyloa` is developed for Python 3.5+ and has the following package dependencies:\n\n```python\nmatplotlib==3.0.3  \nscipy==1.2.1  \ntensorflow==1.13.1  \ntqdm==4.31.1  \nnumpy==1.16.2\n```\n\n---\n#### Installation\n\nWe recommend using `pyloa` within a [virtual environment](https://docs.python.org/3.5/library/venv.html):\n\n    mkdir myproject\n    cd myproject\n    python3 -m venv virtualenv/\n    source virtualenv/bin/activate\n\nUpdate [`pip`](https://pypi.org/project/pip/) and [`setuptools`](https://pypi.org/project/setuptools/) before continuing:\n\n    pip install --upgrade pip setuptools\n\nAfterwards you can install `pyloa` either from its latest [PyPI stable](https://google.com) release\n\n    pip install pyloa\n\n**or** from its latest [development release](https://github.com/pyloa/PyLoa/tree/master/pyloa) on GitHub\n\n    pip install git+https://github.com/pyloa/PyLoa.git\n\n---\n#### General Usage\n\n`pyloa` can be used in three different ways to analyze an on-line problem; each depicted via a so called runmode \n(`train`, `eval`, `gen`). Any runemode can be invoked via its positional argument and requires a python-configuration-file.\n\n    pyloa {train,gen,eval} --config path/to/hyperparams.py\n\nhyperparams depicts the setting of the experiment at hand; it must hold a dictionary named `params`, which moreover **must \ncontain** dictionaries for the keys `instance`, `environment` and `agent`. \n\n* `params[\"\u00ecnstance\"]`: Must define a configuration of a subclass implementation of [`pyloa.instance.InstanceGenerator`](https://github.com/pyloa/PyLoa/blob/master/pyloa/instance/instancegenerator.py), \nwhich generates problem instances for the domain. As an example, for the `(k,n)-paging-problem` a simple generator could \nrandomly generate a sequence of requests of length `sequence_size`, whereas each request is within [1, n].   \n* `params[\"agent\"]`: Must define a configuration of a subclass implementation of [`pyloa.agent.Agent`](https://github.com/pyloa/PyLoa/blob/master/pyloa/agent/agent.py), \nwhich observes a state `s` of its environment, acts with action `a` accordingly, receives reward `r` and observes \ntransitioned state `s'`. For toy problem instances a simple Q-learning table implementation would suffice. \n* `params[\"environment\"]`: Must define a configuration of a subclass implementation of [`pyloa.environment.Environment`](https://github.com/pyloa/PyLoa/blob/master/pyloa/environment/environment.py), \nwhich consumes a problem instance and let's the agent *play* until it terminates. An `environment` constitutes as a problem\ndefinition.\n\nA minimal example for learning the `(5,6)-paging-problem` with a [`QTableAgent`](https://github.com/pyloa/PyLoa/blob/master/pyloa/agent/qtable.py) on a \n[`PagingEnvironment`](https://github.com/pyloa/PyLoa/blob/master/pyloa/environment/environment.py#L105) can be invoked with\n\n    pyloa train --config hyperparams.py\n\nand the hyperparams.py as following:\n\n```python\nfrom pyloa.instance import RandomSequenceGenerator\nfrom pyloa.environment import DefaultPagingEnvironment\nfrom pyloa.agent import QTableAgent\n\n# vars\nsequence_size = 1000\nmax_page = 6\nmin_page = 1\nepisodes = 250\n\n# hyperparams\nparams = {\n    'checkpoint_step': episodes//10,\n    'instance': {\n        'type': RandomSequenceGenerator,\n        'sequence_size': sequence_size,\n        'sequence_number': episodes,\n        'min_page': min_page,\n        'max_page': max_page,\n    },\n    'environment': {\n        'type': DefaultPagingEnvironment,\n        'sequence_size': sequence_size,\n        'cache_size': 5,\n        'num_pages': max_page - min_page + 1,\n    },\n    'agent': {\n        'type': QTableAgent,\n        'discount_factor': 0.55,\n        'learning_rate': 0.001,\n        'epsilon': 0.0,\n        'epsilon_delta': 13 / (episodes * 10),\n        'epsilon_max': 0.99,\n        'save_file': \"/home/me/models/\",\n    },\n}\n```\n\nThis example is defined in [examples/0_train_qtable_paging/hyperparams.py](https://github.com/pyloa/PyLoa/tree/master/examples/0_train_qtable_paging) and can be run with\n\n    pyloa train --config examples/0_train_qtable_paging/hyperparams.py\n\nThe resulting run can be seen [here](http://google.com). In total there are five toy examples, which can be run on any system, \ndefined in the examples directory.\n\n#### Runmodes\n\nPyLoa has three different runmodes: `train` ,`eval` and `gen`. There are slight adaptions to be made for the configuration file \ndepending on the selected runmode; we encourage checking the examples for reference (on a site note: hyperparams are loaded and validated\nin [pyloa.utils.load](https://github.com/pyloa/PyLoa/blob/master/pyloa/utils/load.py#L13)). Semantically the three different runmodes stand for: \n\n* train: An `RLAgent` will be trained for `episode`-many instances, generated by an `InstanceGenerator`, on his `environment`. \nEvery `checkpoint_step`-many instances a checkpoint of `RLAgent` will be saved.  \n* eval: All trained `RLagents` nested within `root_dir` will be evaluated on `episode`-many instances, generated by an `InstanceGenerator`.\nAdditionally non-trainable agents may be defined and evaluated alongside.\n* gen: Currently **only applicable** for the `(k,n)-paging-problem`. A genetic algorithm empirically determines a `PagingAgent`'s \n(approximate) competitive ratio. \n\nEach runmode will create TFEvent-files for TensorBoard in its experiment's output directory. \n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/pyloa/PyLoa", "keywords": "on-line algorithms,paging,vertex coloring,machine learning", "license": "MIT", "maintainer": "PyLoa Developers", "maintainer_email": "pyloadevelopers@gmail.com", "name": "pyloa", "package_url": "https://pypi.org/project/pyloa/", "platform": "any", "project_url": "https://pypi.org/project/pyloa/", "project_urls": {"Bug Tracker": "https://github.com/pyloa/PyLoa/issues", "Documentation": "https://github.com/pyloa/PyLoa/tree/master/pyloa", "Homepage": "https://github.com/pyloa/PyLoa", "Source Code": "https://github.com/pyloa/PyLoa/tree/master/pyloa"}, "release_url": "https://pypi.org/project/pyloa/1.0.3/", "requires_dist": ["matplotlib (==3.0.3)", "scipy (==1.2.1)", "tensorflow (==1.13.1)", "tqdm (==4.31.1)", "numpy (==1.16.2)"], "requires_python": ">=3.5", "summary": "PyLoa: Learning on-line Algorithms with Python", "version": "1.0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h2>PyLoa - Learning on-line Algorithms with Python</h2>\n<p><code>pyloa</code> is a research repository for analyzing the performance of classic on-line algorithms vs. modern Machine\nLearning, specifically Reinforcement Learning, approaches. PyLoa ships with an implementation of two commonly known\non-line problems as <code>environments</code>:</p>\n<ul>\n<li><code>(k,n)-paging-problem</code> with a <code>cache_size k</code> and <code>n pages</code> for a sequence of page-requests</li>\n<li><code>(k,n)-coloring-problem</code> with <code>k colors</code> for a graph with <code>n vertices</code></li>\n</ul>\n<p>PyLoa allows for <code>agents</code> to be</p>\n<ul>\n<li>trained on such <code>enviroments</code> (problem definitions) that require on-line solutions,</li>\n<li>evaluated against commonly used heuristics or any state-of-the-art algorithm,</li>\n<li>exploited (extrapolation of a <em>potentially</em> worst case problem instances) to determine a solution's <a href=\"https://en.wikipedia.org/wiki/Competitive_analysis_(online_algorithm)\" rel=\"nofollow\">competitve ratio</a>.</li>\n</ul>\n<hr>\n<h4>Dependencies</h4>\n<p><code>pyloa</code> is developed for Python 3.5+ and has the following package dependencies:</p>\n<pre><span class=\"n\">matplotlib</span><span class=\"o\">==</span><span class=\"mf\">3.0</span><span class=\"o\">.</span><span class=\"mi\">3</span>  \n<span class=\"n\">scipy</span><span class=\"o\">==</span><span class=\"mf\">1.2</span><span class=\"o\">.</span><span class=\"mi\">1</span>  \n<span class=\"n\">tensorflow</span><span class=\"o\">==</span><span class=\"mf\">1.13</span><span class=\"o\">.</span><span class=\"mi\">1</span>  \n<span class=\"n\">tqdm</span><span class=\"o\">==</span><span class=\"mf\">4.31</span><span class=\"o\">.</span><span class=\"mi\">1</span>  \n<span class=\"n\">numpy</span><span class=\"o\">==</span><span class=\"mf\">1.16</span><span class=\"o\">.</span><span class=\"mi\">2</span>\n</pre>\n<hr>\n<h4>Installation</h4>\n<p>We recommend using <code>pyloa</code> within a <a href=\"https://docs.python.org/3.5/library/venv.html\" rel=\"nofollow\">virtual environment</a>:</p>\n<pre><code>mkdir myproject\ncd myproject\npython3 -m venv virtualenv/\nsource virtualenv/bin/activate\n</code></pre>\n<p>Update <a href=\"https://pypi.org/project/pip/\" rel=\"nofollow\"><code>pip</code></a> and <a href=\"https://pypi.org/project/setuptools/\" rel=\"nofollow\"><code>setuptools</code></a> before continuing:</p>\n<pre><code>pip install --upgrade pip setuptools\n</code></pre>\n<p>Afterwards you can install <code>pyloa</code> either from its latest <a href=\"https://google.com\" rel=\"nofollow\">PyPI stable</a> release</p>\n<pre><code>pip install pyloa\n</code></pre>\n<p><strong>or</strong> from its latest <a href=\"https://github.com/pyloa/PyLoa/tree/master/pyloa\" rel=\"nofollow\">development release</a> on GitHub</p>\n<pre><code>pip install git+https://github.com/pyloa/PyLoa.git\n</code></pre>\n<hr>\n<h4>General Usage</h4>\n<p><code>pyloa</code> can be used in three different ways to analyze an on-line problem; each depicted via a so called runmode\n(<code>train</code>, <code>eval</code>, <code>gen</code>). Any runemode can be invoked via its positional argument and requires a python-configuration-file.</p>\n<pre><code>pyloa {train,gen,eval} --config path/to/hyperparams.py\n</code></pre>\n<p>hyperparams depicts the setting of the experiment at hand; it must hold a dictionary named <code>params</code>, which moreover <strong>must\ncontain</strong> dictionaries for the keys <code>instance</code>, <code>environment</code> and <code>agent</code>.</p>\n<ul>\n<li><code>params[\"\u00ecnstance\"]</code>: Must define a configuration of a subclass implementation of <a href=\"https://github.com/pyloa/PyLoa/blob/master/pyloa/instance/instancegenerator.py\" rel=\"nofollow\"><code>pyloa.instance.InstanceGenerator</code></a>,\nwhich generates problem instances for the domain. As an example, for the <code>(k,n)-paging-problem</code> a simple generator could\nrandomly generate a sequence of requests of length <code>sequence_size</code>, whereas each request is within [1, n].</li>\n<li><code>params[\"agent\"]</code>: Must define a configuration of a subclass implementation of <a href=\"https://github.com/pyloa/PyLoa/blob/master/pyloa/agent/agent.py\" rel=\"nofollow\"><code>pyloa.agent.Agent</code></a>,\nwhich observes a state <code>s</code> of its environment, acts with action <code>a</code> accordingly, receives reward <code>r</code> and observes\ntransitioned state <code>s'</code>. For toy problem instances a simple Q-learning table implementation would suffice.</li>\n<li><code>params[\"environment\"]</code>: Must define a configuration of a subclass implementation of <a href=\"https://github.com/pyloa/PyLoa/blob/master/pyloa/environment/environment.py\" rel=\"nofollow\"><code>pyloa.environment.Environment</code></a>,\nwhich consumes a problem instance and let's the agent <em>play</em> until it terminates. An <code>environment</code> constitutes as a problem\ndefinition.</li>\n</ul>\n<p>A minimal example for learning the <code>(5,6)-paging-problem</code> with a <a href=\"https://github.com/pyloa/PyLoa/blob/master/pyloa/agent/qtable.py\" rel=\"nofollow\"><code>QTableAgent</code></a> on a\n<a href=\"https://github.com/pyloa/PyLoa/blob/master/pyloa/environment/environment.py#L105\" rel=\"nofollow\"><code>PagingEnvironment</code></a> can be invoked with</p>\n<pre><code>pyloa train --config hyperparams.py\n</code></pre>\n<p>and the hyperparams.py as following:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pyloa.instance</span> <span class=\"kn\">import</span> <span class=\"n\">RandomSequenceGenerator</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyloa.environment</span> <span class=\"kn\">import</span> <span class=\"n\">DefaultPagingEnvironment</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyloa.agent</span> <span class=\"kn\">import</span> <span class=\"n\">QTableAgent</span>\n\n<span class=\"c1\"># vars</span>\n<span class=\"n\">sequence_size</span> <span class=\"o\">=</span> <span class=\"mi\">1000</span>\n<span class=\"n\">max_page</span> <span class=\"o\">=</span> <span class=\"mi\">6</span>\n<span class=\"n\">min_page</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n<span class=\"n\">episodes</span> <span class=\"o\">=</span> <span class=\"mi\">250</span>\n\n<span class=\"c1\"># hyperparams</span>\n<span class=\"n\">params</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'checkpoint_step'</span><span class=\"p\">:</span> <span class=\"n\">episodes</span><span class=\"o\">//</span><span class=\"mi\">10</span><span class=\"p\">,</span>\n    <span class=\"s1\">'instance'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'type'</span><span class=\"p\">:</span> <span class=\"n\">RandomSequenceGenerator</span><span class=\"p\">,</span>\n        <span class=\"s1\">'sequence_size'</span><span class=\"p\">:</span> <span class=\"n\">sequence_size</span><span class=\"p\">,</span>\n        <span class=\"s1\">'sequence_number'</span><span class=\"p\">:</span> <span class=\"n\">episodes</span><span class=\"p\">,</span>\n        <span class=\"s1\">'min_page'</span><span class=\"p\">:</span> <span class=\"n\">min_page</span><span class=\"p\">,</span>\n        <span class=\"s1\">'max_page'</span><span class=\"p\">:</span> <span class=\"n\">max_page</span><span class=\"p\">,</span>\n    <span class=\"p\">},</span>\n    <span class=\"s1\">'environment'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'type'</span><span class=\"p\">:</span> <span class=\"n\">DefaultPagingEnvironment</span><span class=\"p\">,</span>\n        <span class=\"s1\">'sequence_size'</span><span class=\"p\">:</span> <span class=\"n\">sequence_size</span><span class=\"p\">,</span>\n        <span class=\"s1\">'cache_size'</span><span class=\"p\">:</span> <span class=\"mi\">5</span><span class=\"p\">,</span>\n        <span class=\"s1\">'num_pages'</span><span class=\"p\">:</span> <span class=\"n\">max_page</span> <span class=\"o\">-</span> <span class=\"n\">min_page</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n    <span class=\"p\">},</span>\n    <span class=\"s1\">'agent'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'type'</span><span class=\"p\">:</span> <span class=\"n\">QTableAgent</span><span class=\"p\">,</span>\n        <span class=\"s1\">'discount_factor'</span><span class=\"p\">:</span> <span class=\"mf\">0.55</span><span class=\"p\">,</span>\n        <span class=\"s1\">'learning_rate'</span><span class=\"p\">:</span> <span class=\"mf\">0.001</span><span class=\"p\">,</span>\n        <span class=\"s1\">'epsilon'</span><span class=\"p\">:</span> <span class=\"mf\">0.0</span><span class=\"p\">,</span>\n        <span class=\"s1\">'epsilon_delta'</span><span class=\"p\">:</span> <span class=\"mi\">13</span> <span class=\"o\">/</span> <span class=\"p\">(</span><span class=\"n\">episodes</span> <span class=\"o\">*</span> <span class=\"mi\">10</span><span class=\"p\">),</span>\n        <span class=\"s1\">'epsilon_max'</span><span class=\"p\">:</span> <span class=\"mf\">0.99</span><span class=\"p\">,</span>\n        <span class=\"s1\">'save_file'</span><span class=\"p\">:</span> <span class=\"s2\">\"/home/me/models/\"</span><span class=\"p\">,</span>\n    <span class=\"p\">},</span>\n<span class=\"p\">}</span>\n</pre>\n<p>This example is defined in <a href=\"https://github.com/pyloa/PyLoa/tree/master/examples/0_train_qtable_paging\" rel=\"nofollow\">examples/0_train_qtable_paging/hyperparams.py</a> and can be run with</p>\n<pre><code>pyloa train --config examples/0_train_qtable_paging/hyperparams.py\n</code></pre>\n<p>The resulting run can be seen <a href=\"http://google.com\" rel=\"nofollow\">here</a>. In total there are five toy examples, which can be run on any system,\ndefined in the examples directory.</p>\n<h4>Runmodes</h4>\n<p>PyLoa has three different runmodes: <code>train</code> ,<code>eval</code> and <code>gen</code>. There are slight adaptions to be made for the configuration file\ndepending on the selected runmode; we encourage checking the examples for reference (on a site note: hyperparams are loaded and validated\nin <a href=\"https://github.com/pyloa/PyLoa/blob/master/pyloa/utils/load.py#L13\" rel=\"nofollow\">pyloa.utils.load</a>). Semantically the three different runmodes stand for:</p>\n<ul>\n<li>train: An <code>RLAgent</code> will be trained for <code>episode</code>-many instances, generated by an <code>InstanceGenerator</code>, on his <code>environment</code>.\nEvery <code>checkpoint_step</code>-many instances a checkpoint of <code>RLAgent</code> will be saved.</li>\n<li>eval: All trained <code>RLagents</code> nested within <code>root_dir</code> will be evaluated on <code>episode</code>-many instances, generated by an <code>InstanceGenerator</code>.\nAdditionally non-trainable agents may be defined and evaluated alongside.</li>\n<li>gen: Currently <strong>only applicable</strong> for the <code>(k,n)-paging-problem</code>. A genetic algorithm empirically determines a <code>PagingAgent</code>'s\n(approximate) competitive ratio.</li>\n</ul>\n<p>Each runmode will create TFEvent-files for TensorBoard in its experiment's output directory.</p>\n\n          </div>"}, "last_serial": 5527075, "releases": {"1.0.3": [{"comment_text": "", "digests": {"md5": "67ade7f331ce41edb934f161de0560b5", "sha256": "502cd72fcd66b15e13317b471d99e20f4a371014d6db532247889243c5cce078"}, "downloads": -1, "filename": "pyloa-1.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "67ade7f331ce41edb934f161de0560b5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 67402, "upload_time": "2019-07-13T14:50:33", "upload_time_iso_8601": "2019-07-13T14:50:33.202705Z", "url": "https://files.pythonhosted.org/packages/22/f7/655600403e3ac453f8c08edf4b6e98a1b23cf53753dda88e103f9ef89252/pyloa-1.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1c047fce6265286b24e31f628aa68bdb", "sha256": "f088d040456d2ab7d8b39acc1e90e051c4a4a614bdfe7312dbc54aecffc28da9"}, "downloads": -1, "filename": "pyloa-1.0.3.tar.gz", "has_sig": false, "md5_digest": "1c047fce6265286b24e31f628aa68bdb", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 46114, "upload_time": "2019-07-13T14:50:36", "upload_time_iso_8601": "2019-07-13T14:50:36.373544Z", "url": "https://files.pythonhosted.org/packages/70/7a/daa5c9d7a774bde7375a34e68c5f178b0ea9fb43ee903e3490c651e11ead/pyloa-1.0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "67ade7f331ce41edb934f161de0560b5", "sha256": "502cd72fcd66b15e13317b471d99e20f4a371014d6db532247889243c5cce078"}, "downloads": -1, "filename": "pyloa-1.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "67ade7f331ce41edb934f161de0560b5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 67402, "upload_time": "2019-07-13T14:50:33", "upload_time_iso_8601": "2019-07-13T14:50:33.202705Z", "url": "https://files.pythonhosted.org/packages/22/f7/655600403e3ac453f8c08edf4b6e98a1b23cf53753dda88e103f9ef89252/pyloa-1.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1c047fce6265286b24e31f628aa68bdb", "sha256": "f088d040456d2ab7d8b39acc1e90e051c4a4a614bdfe7312dbc54aecffc28da9"}, "downloads": -1, "filename": "pyloa-1.0.3.tar.gz", "has_sig": false, "md5_digest": "1c047fce6265286b24e31f628aa68bdb", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 46114, "upload_time": "2019-07-13T14:50:36", "upload_time_iso_8601": "2019-07-13T14:50:36.373544Z", "url": "https://files.pythonhosted.org/packages/70/7a/daa5c9d7a774bde7375a34e68c5f178b0ea9fb43ee903e3490c651e11ead/pyloa-1.0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:02:55 2020"}