{"info": {"author": "Charles Morton", "author_email": "charles.g.morton@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: Apache Software License", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": "=======================================================================\nGoogle Earth Engine ASCE Standardized Reference Evapotranspiration (ET)\n=======================================================================\n\n|version| |build|\n\nGoogle Earth Engine (GEE) functions for computing daily and hourly reference ET following the ASCE Standardized Reference Evapotranspiration Equations (ASCE2005_).\n\nUsage\n=====\n\nDaily\n-----\n\nThe following demonstrates how to compute a single daily ETr value using weather data for 2015-07-01 from the `Fallon, NV AgriMet station <https://www.usbr.gov/pn/agrimet/agrimetmap/falnda.html>`__.\nThe necessary unit conversions are shown on the input values.\nThe raw input data is available `here <https://www.usbr.gov/pn-bin/daily.pl?station=FALN&year=2015&month=7&day=1&year=2015&month=7&day=1&pcode=ETRS&pcode=MN&pcode=MX&pcode=SR&pcode=YM&pcode=UA>`__.\n\n.. code-block:: console\n\n    import math\n    import ee\n    import geerefet\n\n    # Unit conversions\n    tmin_c = (66.65 - 32) * (5.0 / 9)                          # F -> C\n    tmax_c = (102.80 - 32) * (5.0 / 9)                         # F -> C\n    tdew_c = (57.26 - 32) * (5.0 / 9)                          # F -> C\n    ea = 0.6108 * math.exp(17.27 * tdew_c / (tdew_c + 237.3))  # kPa\n    rs = (674.07 * 0.041868)                                   # Langleys -> MJ m-2 d-1\n    uz = 4.80 * 0.44704                                        # mpg -> m s-1\n    lat = 39.4575                                              # degrees\n\n    etr = geerefet.Daily(\n        tmin=tmin_c, tmax=tmax_c, ea=ea, rs=rs, uz=uz, zw=3, elev=1208.5,\n        lat=lat, doy=182).etr().getInfo()\n\n    print('ETr: {:.2f} mm'.format(float(etr)))\n\nHourly\n------\n\nThe following demonstrates how to compute a single hourly ETr value using weather data for 18:00 UTC (11:00 AM PDT) on 2015-07-01 from the `Fallon, NV AgriMet station <https://www.usbr.gov/pn/agrimet/agrimetmap/falnda.html>`__.\nThe necessary unit conversions are shown on the input values.\nThe raw input data is available `here <https://www.usbr.gov/pn-bin/instant.pl?station=FALN&year=2015&month=7&day=1&year=2015&month=7&day=1&pcode=OB&pcode=EA&pcode=WS&pcode=SI&print_hourly=1>`__\n\n.. code-block:: console\n\n    import math\n    import ee\n    import geerefet\n\n    # Unit conversions\n    tmean_c = (91.80 - 32) * (5.0 / 9)           # F -> C\n    ea = 1.20                                    # kPa\n    rs = (61.16 * 0.041868)                      # Langleys -> MJ m-2 h-1\n    uz = 3.33 * 0.44704                          # mph -> m s-1\n    lat = 39.4575                                # degrees\n    lon = -118.77388                             # degrees\n\n    etr = geerefet.Hourly(\n        tmean=tmean_c, ea=ea, rs=rs, uz=uz, zw=3, elev=1208.5,\n        lat=lat, lon=lon_radians, doy=182, time=18).etr().getInfo()\n\n    print('ETr: {:.2f} mm'.format(float(etr)))\n\nGRIDMET\n-------\n\nA helper function for computing daily ETo and ETr for `GRIDMET <http://www.climatologylab.org/gridmet.html>`__ images is available.\n\n.. code-block:: console\n\n    import ee\n    import geerefet\n\n    gridmet_img = ee.Image(ee.ImageCollection('IDAHO_EPSCOR/GRIDMET').first())\n    etr = geerefet.Daily.gridmet(gridmet_img).etr().getInfo()\n\n    print('ETr: {:.2f} mm'.format(float(etr)))\n\nNLDAS\n-----\n\nHelper functions for computing daily/hourly ETo/ETr for `NLDAS <https://ldas.gsfc.nasa.gov/nldas/NLDAS2forcing.php>`__ images are available.\n\nFor the daily function, the NLDAS collection must be filtered to a single 24 hour period.\n\n.. code-block:: console\n\n    import ee\n    import geerefet\n\n    nldas_coll = ee.ImageCollection('NASA/NLDAS/FORA0125_H002')\\\n        .filterDate('2017-07-01', '2017-07-02)\n    etr = geerefet.Daily.nldas(nldas_coll).etr().getInfo()\n\n    print('ETr: {:.2f} mm'.format(float(etr)))\n\n.. code-block:: console\n\n    import ee\n    import geerefet\n\n    nldas_img = ee.Image(ee.ImageCollection('NASA/NLDAS/FORA0125_H002').first())\n    etr = geerefet.Hourly.nldas(nldas_img).etr().getInfo()\n\n    print('ETr: {:.2f} mm'.format(float(etr)))\n\nInput Parameters\n================\n\nRequired Parameters (hourly & daily)\n------------------------------------\n\n========  ===================  =================================================\nVariable  Type                 Description [units]\n========  ===================  =================================================\nea        ee.Image             Actual vapor pressure [kPa]\nrs        ee.Image             Incoming shortwave solar radiation [MJ m-2 day-1]\nuz        ee.Image             Wind speed [m s-1]\nzw        ee.Number            Wind speed height [m]\nelev      ee.Image, ee.Number  Elevation [m]\nlat       ee.Image, ee.Number  Latitude [degrees]\ndoy       ee.Image, ee.Number  Day of year\n========  ===================  =================================================\n\nRequired Daily Parameters\n-------------------------\n\n========  ===================  =================================================\nVariable  Type                 Description [units]\n========  ===================  =================================================\ntmin      ee.Image             Minimum daily temperature [C]\ntmax      ee.Image             Maximum daily temperature [C]\n========  ===================  =================================================\n\nRequired Hourly Parameters\n--------------------------\n\n========  ===================  =================================================\nVariable  Type                 Description [units]\n========  ===================  =================================================\ntmean     ee.Image             Average hourly temperature [C]\nlon       ee.Image, ee.Number  Longitude [degrees]\ntime      ee.Number            UTC hour at start of time period\n========  ===================  =================================================\n\nOptional Parameters\n-------------------\n\n========  ===================  ====================================================\nVariable  Type                 Description [units]\n========  ===================  ====================================================\nmethod    str                  | Calculation method\n\n                               * 'asce' -- Calculations will follow ASCE-EWRI 2005 (default)\n                               * 'refet' -- Calculations will follow RefET software\n\nrso_type  str                  | Override default clear sky solar radiation (Rso) calculation\n                               | Defaults to None if not set\n\n                               * 'full' -- Full clear sky solar formulation (default)\n                               * 'simple' -- Simplified clear sky solar formulation (Eq. 19)\n                               * 'array' -- Read Rso values from \"rso\" function parameter\n\nrso       ee.Image, ee.Number  | Clear sky solar radiation [MJ m-2 day-1]\n\n                               * Only needed if rso_type is 'array'\n                               * Defaults to None if not set\n\n========  ===================  ====================================================\n\nIssues\n======\n\nCurrently the user must handle all of the file I/O and unit conversions.\n\nCloudiness Fraction (hourly)\n----------------------------\n\nThe cloudiness fraction (fcd) is computed as the ratio of the measured solar radiation (Rs) to the theoretical clear sky solar radiation (Rso).  This ratio cannot be computed directly at night since Rso is 0.  ASCE-EWRI 2005 suggests computing a representative nighttime fcd based on the fcd at sunset and/or sunrise.\n\nIn the RefET module fcd is hard coded to 1 for all time steps with very low sun angles since the hourly reference ET is computed independently for each time step.\n\nCalculation Method - ASCE vs. RefET\n===================================\n\nThe main difference between the two \"methods\" is that the \"asce\" method attempts to follow the equations in ASCE2005_, whereas the \"refet\" method attempts to follow the calculations of the `RefET Software <https://www.uidaho.edu/cals/kimberly-research-and-extension-center/research/water-resources/ref-et-software>`__ as closely as possible.  The difference in output between these methods is generally negligible (if not identical for realistic numbers of significant digits).  Note that the default is set to \"asce\" to best match the calculations a user would expect to have happen. The \"refet\" method was added in order to help validate this code to the RefET Software.\n\nInstallation\n============\n\nTo install the RefET-GEE python module:\n\n.. code-block:: console\n\n    pip install geerefet\n\nValidation\n==========\n\nPlease see the `validation document <VALIDATION.md>`__ for additional details on the source of the test values and the comparison of the functions to the Ref-ET software.\n\nDependencies\n============\n\n * `earthengine-api <https://github.com/google/earthengine-api>`__\n\nModules needed to run the test suite:\n\n * `pandas <http://pandas.pydata.org>`__\n * `pytest <https://docs.pytest.org/en/latest/>`__\n * `pytz <http://pythonhosted.org/pytz/>`__\n\nReferences\n==========\n\n.. [ASCE2005]\n | ASCE-EWRI (2005). The ASCE standardized reference evapotranspiration equation.\n | `https://ascelibrary.org/doi/book/10.1061/9780784408056 <https://ascelibrary.org/doi/book/10.1061/9780784408056>`__\n\n.. |build| image:: https://github.com/cgmorton/RefET-GEE/workflows/build/badge.svg\n   :alt: Build status\n   :target: https://github.com/cgmorton/RefET-GEE\n.. |version| image:: https://badge.fury.io/py/geerefet.svg\n   :alt: Latest version on PyPI\n   :target: https://badge.fury.io/py/geerefet", "description_content_type": "", "docs_url": null, "download_url": "https://github.com/cgmorton/RefET-GEE/archive/v0.1.12.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/cgmorton/RefET-GEE", "keywords": "RefET Evapotranspiration GEE", "license": "Apache", "maintainer": "", "maintainer_email": "", "name": "geerefet", "package_url": "https://pypi.org/project/geerefet/", "platform": "", "project_url": "https://pypi.org/project/geerefet/", "project_urls": {"Download": "https://github.com/cgmorton/RefET-GEE/archive/v0.1.12.tar.gz", "Homepage": "https://github.com/cgmorton/RefET-GEE"}, "release_url": "https://pypi.org/project/geerefet/0.1.12/", "requires_dist": null, "requires_python": "", "summary": "Google Earth Engine ASCE Standardized Reference Evapotranspiration Functions", "version": "0.1.12", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://badge.fury.io/py/geerefet\" rel=\"nofollow\"><img alt=\"Latest version on PyPI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/79e0a4c63cc652cc8393540321cd00d1f662c121/68747470733a2f2f62616467652e667572792e696f2f70792f67656572656665742e737667\"></a> <a href=\"https://github.com/cgmorton/RefET-GEE\" rel=\"nofollow\"><img alt=\"Build status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/00d0dc56fa70686f2e9cb746593b76c43e6ce12d/68747470733a2f2f6769746875622e636f6d2f63676d6f72746f6e2f52656645542d4745452f776f726b666c6f77732f6275696c642f62616467652e737667\"></a></p>\n<p>Google Earth Engine (GEE) functions for computing daily and hourly reference ET following the ASCE Standardized Reference Evapotranspiration Equations (<a href=\"#asce2005\" rel=\"nofollow\">ASCE2005</a>).</p>\n<div id=\"usage\">\n<h2>Usage</h2>\n<div id=\"daily\">\n<h3>Daily</h3>\n<p>The following demonstrates how to compute a single daily ETr value using weather data for 2015-07-01 from the <a href=\"https://www.usbr.gov/pn/agrimet/agrimetmap/falnda.html\" rel=\"nofollow\">Fallon, NV AgriMet station</a>.\nThe necessary unit conversions are shown on the input values.\nThe raw input data is available <a href=\"https://www.usbr.gov/pn-bin/daily.pl?station=FALN&amp;year=2015&amp;month=7&amp;day=1&amp;year=2015&amp;month=7&amp;day=1&amp;pcode=ETRS&amp;pcode=MN&amp;pcode=MX&amp;pcode=SR&amp;pcode=YM&amp;pcode=UA\" rel=\"nofollow\">here</a>.</p>\n<pre><span class=\"go\">import math\nimport ee\nimport geerefet\n\n</span><span class=\"gp\">#</span> Unit conversions\n<span class=\"go\">tmin_c = (66.65 - 32) * (5.0 / 9)                          # F -&gt; C\ntmax_c = (102.80 - 32) * (5.0 / 9)                         # F -&gt; C\ntdew_c = (57.26 - 32) * (5.0 / 9)                          # F -&gt; C\nea = 0.6108 * math.exp(17.27 * tdew_c / (tdew_c + 237.3))  # kPa\nrs = (674.07 * 0.041868)                                   # Langleys -&gt; MJ m-2 d-1\nuz = 4.80 * 0.44704                                        # mpg -&gt; m s-1\nlat = 39.4575                                              # degrees\n\netr = geerefet.Daily(\n    tmin=tmin_c, tmax=tmax_c, ea=ea, rs=rs, uz=uz, zw=3, elev=1208.5,\n    lat=lat, doy=182).etr().getInfo()\n\nprint('ETr: {:.2f} mm'.format(float(etr)))</span>\n</pre>\n</div>\n<div id=\"hourly\">\n<h3>Hourly</h3>\n<p>The following demonstrates how to compute a single hourly ETr value using weather data for 18:00 UTC (11:00 AM PDT) on 2015-07-01 from the <a href=\"https://www.usbr.gov/pn/agrimet/agrimetmap/falnda.html\" rel=\"nofollow\">Fallon, NV AgriMet station</a>.\nThe necessary unit conversions are shown on the input values.\nThe raw input data is available <a href=\"https://www.usbr.gov/pn-bin/instant.pl?station=FALN&amp;year=2015&amp;month=7&amp;day=1&amp;year=2015&amp;month=7&amp;day=1&amp;pcode=OB&amp;pcode=EA&amp;pcode=WS&amp;pcode=SI&amp;print_hourly=1\" rel=\"nofollow\">here</a></p>\n<pre><span class=\"go\">import math\nimport ee\nimport geerefet\n\n</span><span class=\"gp\">#</span> Unit conversions\n<span class=\"go\">tmean_c = (91.80 - 32) * (5.0 / 9)           # F -&gt; C\nea = 1.20                                    # kPa\nrs = (61.16 * 0.041868)                      # Langleys -&gt; MJ m-2 h-1\nuz = 3.33 * 0.44704                          # mph -&gt; m s-1\nlat = 39.4575                                # degrees\nlon = -118.77388                             # degrees\n\netr = geerefet.Hourly(\n    tmean=tmean_c, ea=ea, rs=rs, uz=uz, zw=3, elev=1208.5,\n    lat=lat, lon=lon_radians, doy=182, time=18).etr().getInfo()\n\nprint('ETr: {:.2f} mm'.format(float(etr)))</span>\n</pre>\n</div>\n<div id=\"gridmet\">\n<h3>GRIDMET</h3>\n<p>A helper function for computing daily ETo and ETr for <a href=\"http://www.climatologylab.org/gridmet.html\" rel=\"nofollow\">GRIDMET</a> images is available.</p>\n<pre><span class=\"go\">import ee\nimport geerefet\n\ngridmet_img = ee.Image(ee.ImageCollection('IDAHO_EPSCOR/GRIDMET').first())\netr = geerefet.Daily.gridmet(gridmet_img).etr().getInfo()\n\nprint('ETr: {:.2f} mm'.format(float(etr)))</span>\n</pre>\n</div>\n<div id=\"nldas\">\n<h3>NLDAS</h3>\n<p>Helper functions for computing daily/hourly ETo/ETr for <a href=\"https://ldas.gsfc.nasa.gov/nldas/NLDAS2forcing.php\" rel=\"nofollow\">NLDAS</a> images are available.</p>\n<p>For the daily function, the NLDAS collection must be filtered to a single 24 hour period.</p>\n<pre><span class=\"go\">import ee\nimport geerefet\n\nnldas_coll = ee.ImageCollection('NASA/NLDAS/FORA0125_H002')\\\n    .filterDate('2017-07-01', '2017-07-02)\netr = geerefet.Daily.nldas(nldas_coll).etr().getInfo()\n\nprint('ETr: {:.2f} mm'.format(float(etr)))</span>\n</pre>\n<pre><span class=\"go\">import ee\nimport geerefet\n\nnldas_img = ee.Image(ee.ImageCollection('NASA/NLDAS/FORA0125_H002').first())\netr = geerefet.Hourly.nldas(nldas_img).etr().getInfo()\n\nprint('ETr: {:.2f} mm'.format(float(etr)))</span>\n</pre>\n</div>\n</div>\n<div id=\"input-parameters\">\n<h2>Input Parameters</h2>\n<div id=\"required-parameters-hourly-daily\">\n<h3>Required Parameters (hourly &amp; daily)</h3>\n<table>\n<colgroup>\n<col>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Variable</th>\n<th>Type</th>\n<th>Description [units]</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>ea</td>\n<td>ee.Image</td>\n<td>Actual vapor pressure [kPa]</td>\n</tr>\n<tr><td>rs</td>\n<td>ee.Image</td>\n<td>Incoming shortwave solar radiation [MJ m-2 day-1]</td>\n</tr>\n<tr><td>uz</td>\n<td>ee.Image</td>\n<td>Wind speed [m s-1]</td>\n</tr>\n<tr><td>zw</td>\n<td>ee.Number</td>\n<td>Wind speed height [m]</td>\n</tr>\n<tr><td>elev</td>\n<td>ee.Image, ee.Number</td>\n<td>Elevation [m]</td>\n</tr>\n<tr><td>lat</td>\n<td>ee.Image, ee.Number</td>\n<td>Latitude [degrees]</td>\n</tr>\n<tr><td>doy</td>\n<td>ee.Image, ee.Number</td>\n<td>Day of year</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div id=\"required-daily-parameters\">\n<h3>Required Daily Parameters</h3>\n<table>\n<colgroup>\n<col>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Variable</th>\n<th>Type</th>\n<th>Description [units]</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>tmin</td>\n<td>ee.Image</td>\n<td>Minimum daily temperature [C]</td>\n</tr>\n<tr><td>tmax</td>\n<td>ee.Image</td>\n<td>Maximum daily temperature [C]</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div id=\"required-hourly-parameters\">\n<h3>Required Hourly Parameters</h3>\n<table>\n<colgroup>\n<col>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Variable</th>\n<th>Type</th>\n<th>Description [units]</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>tmean</td>\n<td>ee.Image</td>\n<td>Average hourly temperature [C]</td>\n</tr>\n<tr><td>lon</td>\n<td>ee.Image, ee.Number</td>\n<td>Longitude [degrees]</td>\n</tr>\n<tr><td>time</td>\n<td>ee.Number</td>\n<td>UTC hour at start of time period</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div id=\"optional-parameters\">\n<h3>Optional Parameters</h3>\n<table>\n<colgroup>\n<col>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Variable</th>\n<th>Type</th>\n<th>Description [units]</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>method</td>\n<td>str</td>\n<td><div>\n<div>Calculation method</div>\n</div>\n<ul>\n<li>\u2018asce\u2019 \u2013 Calculations will follow ASCE-EWRI 2005 (default)</li>\n<li>\u2018refet\u2019 \u2013 Calculations will follow RefET software</li>\n</ul>\n</td>\n</tr>\n<tr><td>rso_type</td>\n<td>str</td>\n<td><div>\n<div>Override default clear sky solar radiation (Rso) calculation</div>\n<div>Defaults to None if not set</div>\n</div>\n<ul>\n<li>\u2018full\u2019 \u2013 Full clear sky solar formulation (default)</li>\n<li>\u2018simple\u2019 \u2013 Simplified clear sky solar formulation (Eq. 19)</li>\n<li>\u2018array\u2019 \u2013 Read Rso values from \u201crso\u201d function parameter</li>\n</ul>\n</td>\n</tr>\n<tr><td>rso</td>\n<td>ee.Image, ee.Number</td>\n<td><div>\n<div>Clear sky solar radiation [MJ m-2 day-1]</div>\n</div>\n<ul>\n<li>Only needed if rso_type is \u2018array\u2019</li>\n<li>Defaults to None if not set</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>\n<div id=\"issues\">\n<h2>Issues</h2>\n<p>Currently the user must handle all of the file I/O and unit conversions.</p>\n<div id=\"cloudiness-fraction-hourly\">\n<h3>Cloudiness Fraction (hourly)</h3>\n<p>The cloudiness fraction (fcd) is computed as the ratio of the measured solar radiation (Rs) to the theoretical clear sky solar radiation (Rso).  This ratio cannot be computed directly at night since Rso is 0.  ASCE-EWRI 2005 suggests computing a representative nighttime fcd based on the fcd at sunset and/or sunrise.</p>\n<p>In the RefET module fcd is hard coded to 1 for all time steps with very low sun angles since the hourly reference ET is computed independently for each time step.</p>\n</div>\n</div>\n<div id=\"calculation-method-asce-vs-refet\">\n<h2>Calculation Method - ASCE vs. RefET</h2>\n<p>The main difference between the two \u201cmethods\u201d is that the \u201casce\u201d method attempts to follow the equations in <a href=\"#asce2005\" rel=\"nofollow\">ASCE2005</a>, whereas the \u201crefet\u201d method attempts to follow the calculations of the <a href=\"https://www.uidaho.edu/cals/kimberly-research-and-extension-center/research/water-resources/ref-et-software\" rel=\"nofollow\">RefET Software</a> as closely as possible.  The difference in output between these methods is generally negligible (if not identical for realistic numbers of significant digits).  Note that the default is set to \u201casce\u201d to best match the calculations a user would expect to have happen. The \u201crefet\u201d method was added in order to help validate this code to the RefET Software.</p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>To install the RefET-GEE python module:</p>\n<pre><span class=\"go\">pip install geerefet</span>\n</pre>\n</div>\n<div id=\"validation\">\n<h2>Validation</h2>\n<p>Please see the <a href=\"VALIDATION.md\" rel=\"nofollow\">validation document</a> for additional details on the source of the test values and the comparison of the functions to the Ref-ET software.</p>\n</div>\n<div id=\"dependencies\">\n<h2>Dependencies</h2>\n<blockquote>\n<ul>\n<li><a href=\"https://github.com/google/earthengine-api\" rel=\"nofollow\">earthengine-api</a></li>\n</ul>\n</blockquote>\n<p>Modules needed to run the test suite:</p>\n<blockquote>\n<ul>\n<li><a href=\"http://pandas.pydata.org\" rel=\"nofollow\">pandas</a></li>\n<li><a href=\"https://docs.pytest.org/en/latest/\" rel=\"nofollow\">pytest</a></li>\n<li><a href=\"http://pythonhosted.org/pytz/\" rel=\"nofollow\">pytz</a></li>\n</ul>\n</blockquote>\n</div>\n<div id=\"references\">\n<h2>References</h2>\n<table id=\"asce2005\">\n<col><col>\n<tbody>\n<tr><td>[ASCE2005]</td><td><div>\n<div>ASCE-EWRI (2005). The ASCE standardized reference evapotranspiration equation.</div>\n<div><a href=\"https://ascelibrary.org/doi/book/10.1061/9780784408056\" rel=\"nofollow\">https://ascelibrary.org/doi/book/10.1061/9780784408056</a></div>\n</div>\n</td></tr>\n</tbody>\n</table>\n</div>\n\n          </div>"}, "last_serial": 6516616, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "ad6695d13e09074b8a14c8edcd0e8319", "sha256": "e56abe8649d4e9a74d2ea82bfdc1440a9bb7beffa94fb55fba73ee812f7b3666"}, "downloads": -1, "filename": "geerefet-0.1.0.tar.gz", "has_sig": false, "md5_digest": "ad6695d13e09074b8a14c8edcd0e8319", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10842, "upload_time": "2018-04-19T06:35:57", "upload_time_iso_8601": "2018-04-19T06:35:57.924333Z", "url": "https://files.pythonhosted.org/packages/d2/e0/795874e957f18895365e022256cbc9416e8b63e2f98f567ec4e03a48bf4a/geerefet-0.1.0.tar.gz", "yanked": false}], "0.1.11": [{"comment_text": "", "digests": {"md5": "204d1c99c02d186cb527705a9e6bb45e", "sha256": "e5d0cf1793800fd9b2dde04ae993b8baa5471300a6d819acca87d3b8c9b3cb4a"}, "downloads": -1, "filename": "geerefet-0.1.11.tar.gz", "has_sig": false, "md5_digest": "204d1c99c02d186cb527705a9e6bb45e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 31112, "upload_time": "2019-12-07T00:26:55", "upload_time_iso_8601": "2019-12-07T00:26:55.042009Z", "url": "https://files.pythonhosted.org/packages/01/7b/fd759c3b99b20dc77f164e6c1fc9370aa934288deb2af1d1cf080fca1ec8/geerefet-0.1.11.tar.gz", "yanked": false}], "0.1.12": [{"comment_text": "", "digests": {"md5": "df64ce533c52e73911af8d0bfe1722d7", "sha256": "dad4338ff0e5aee4915f868a5fb1393e94579110a521654c9a769a89195e1d32"}, "downloads": -1, "filename": "geerefet-0.1.12.tar.gz", "has_sig": false, "md5_digest": "df64ce533c52e73911af8d0bfe1722d7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 31170, "upload_time": "2020-01-24T22:42:17", "upload_time_iso_8601": "2020-01-24T22:42:17.226120Z", "url": "https://files.pythonhosted.org/packages/86/ac/86778bdf986908d7993b2cbf19ad1d51fe91c10e70c9d406bd337da52d69/geerefet-0.1.12.tar.gz", "yanked": false}], "0.1.5": [{"comment_text": "", "digests": {"md5": "f60bbe7be240aa5a2c1b1bba12ced532", "sha256": "0bbbc73e99fb8b6c2f23ba49e35421f93236052ad280ff8aaace64001023a321"}, "downloads": -1, "filename": "geerefet-0.1.5.tar.gz", "has_sig": false, "md5_digest": "f60bbe7be240aa5a2c1b1bba12ced532", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24481, "upload_time": "2018-04-19T07:26:33", "upload_time_iso_8601": "2018-04-19T07:26:33.495405Z", "url": "https://files.pythonhosted.org/packages/71/46/c059a8b2fcef830b477936afdaf7ecc7c70531f3b88630bb525d114c6e30/geerefet-0.1.5.tar.gz", "yanked": false}], "0.1.6": [{"comment_text": "", "digests": {"md5": "8c2a1427e09304f78c199439a69cd9e9", "sha256": "353e2bc3ce48aff81f9916fb5b5731065ba3841629e6abb48dc700f3840e966f"}, "downloads": -1, "filename": "geerefet-0.1.6.tar.gz", "has_sig": false, "md5_digest": "8c2a1427e09304f78c199439a69cd9e9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24789, "upload_time": "2018-04-24T04:19:31", "upload_time_iso_8601": "2018-04-24T04:19:31.154293Z", "url": "https://files.pythonhosted.org/packages/7b/9d/f1c60f8964266a6d548b7dd85fe95720d717d1bac1365dfd8b96ac0d847d/geerefet-0.1.6.tar.gz", "yanked": false}], "0.1.7": [{"comment_text": "", "digests": {"md5": "c302998035db011c3b1ddbecf1f32159", "sha256": "47b349b25e987c0dce3e5deb63d1037975922643f7256775bfa0fcc7b8445cd4"}, "downloads": -1, "filename": "geerefet-0.1.7.tar.gz", "has_sig": false, "md5_digest": "c302998035db011c3b1ddbecf1f32159", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15945, "upload_time": "2018-05-11T14:17:38", "upload_time_iso_8601": "2018-05-11T14:17:38.148043Z", "url": "https://files.pythonhosted.org/packages/7e/4f/0ecdb8225c8e94e2e418f7cb95415a5bfa1df4c52afedd874ba0eea37932/geerefet-0.1.7.tar.gz", "yanked": false}], "0.1.9": [{"comment_text": "", "digests": {"md5": "a02c7750db8f044a969f9753e7502bb3", "sha256": "b1c46618e3da5425dbc27d825c4455d92e8e9b826267a29c68789e8f83135641"}, "downloads": -1, "filename": "geerefet-0.1.9.tar.gz", "has_sig": false, "md5_digest": "a02c7750db8f044a969f9753e7502bb3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16796, "upload_time": "2018-05-25T05:54:33", "upload_time_iso_8601": "2018-05-25T05:54:33.583480Z", "url": "https://files.pythonhosted.org/packages/90/b8/165465ad1022b71d4ad1193377f205328276bdf49d709afbc73ebd2b7774/geerefet-0.1.9.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "df64ce533c52e73911af8d0bfe1722d7", "sha256": "dad4338ff0e5aee4915f868a5fb1393e94579110a521654c9a769a89195e1d32"}, "downloads": -1, "filename": "geerefet-0.1.12.tar.gz", "has_sig": false, "md5_digest": "df64ce533c52e73911af8d0bfe1722d7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 31170, "upload_time": "2020-01-24T22:42:17", "upload_time_iso_8601": "2020-01-24T22:42:17.226120Z", "url": "https://files.pythonhosted.org/packages/86/ac/86778bdf986908d7993b2cbf19ad1d51fe91c10e70c9d406bd337da52d69/geerefet-0.1.12.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:58:33 2020"}