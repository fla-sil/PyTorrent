{"info": {"author": "Mauricio Villegas", "author_email": "mauricio@omnius.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: MacOS", "Operating System :: POSIX :: Linux", "Operating System :: Unix", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: 3 :: Only"], "description": ".. image:: https://circleci.com/gh/omni-us/jsonargparse.svg?style=svg\n    :target: https://circleci.com/gh/omni-us/jsonargparse\n.. image:: https://codecov.io/gh/omni-us/jsonargparse/branch/master/graph/badge.svg\n    :target: https://codecov.io/gh/omni-us/jsonargparse\n.. image:: https://badge.fury.io/py/jsonargparse.svg\n    :target: https://badge.fury.io/py/jsonargparse\n.. image:: https://img.shields.io/badge/contributions-welcome-brightgreen.svg\n    :target: https://github.com/omni-us/jsonargparse\n\n\njsonargparse (former yamlargparse)\n==================================\n\nhttps://omni-us.github.io/jsonargparse/\n\nThis module is an extension to python's argparse which simplifies parsing of\nconfiguration options from command line arguments, json supersets (`yaml\n<https://yaml.org/>`__ or `jsonnet <https://jsonnet.org/>`__) configuration\nfiles, environment variables and hard-coded defaults.\n\nThe aim is similar to other projects such as `configargparse\n<https://pypi.org/project/ConfigArgParse/>`__, `yconf\n<https://pypi.org/project/yconf/>`__ and `confuse\n<https://pypi.org/project/confuse/>`__. The obvious question is, why yet another\nmodule similar to many already existing ones? The answer is simply that none of\nthe existing projects had the exact features we wanted and after analyzing the\nalternatives it seemed simpler to create a new module.\n\n\nFeatures\n========\n\n- Parsers are configured just like with python's argparse, thus it has a gentle\n  learning curve.\n\n- Not exclusively intended for parsing command line arguments. The main focus is\n  parsing yaml or jsonnet configuration files and not necessarily from a command\n  line tool.\n\n- Support for nested namespaces which makes it possible to parse config files\n  with non-flat hierarchies.\n\n- Support for two popular supersets of json, making config files more versatile\n  and powerful.\n\n- Parsing of relative paths within config files and path lists.\n\n- Several convenient action classes to ease common parsing use cases (paths,\n  comparison operators, json schemas, ...).\n\n- Two mechanisms to define parsers in a modular way: parsers as arguments and\n  sub-commands.\n\n- Default behavior is not identical to argparse, though it is possible to\n  configure it to be identical. The main differences are:\n\n  - When parsing fails `.ParserError` is raised, instead of printing usage\n    and program exit.\n  - To modify the behavior for parsing errors (e.g. print usage) an error\n    handler function can be provided.\n\n- Configuration values are overridden based on the following precedence.\n\n  - **Parsing command line:** command line arguments (might include config file)\n    > environment variables > default config file > defaults.\n  - **Parsing files:** config file > environment variables > default config file\n    > defaults.\n  - **Parsing environment:** environment variables > default config file >\n    defaults.\n\n\nBasic usage\n===========\n\nA parser is created just like it is done with argparse. You import the module,\ncreate a parser object and then add arguments to it. A simple example would be:\n\n.. code-block:: python\n\n    from jsonargparse import ArgumentParser\n    parser = ArgumentParser(\n        prog='app',\n        description='Description for my app.')\n\n    parser.add_argument('--opt1',\n        type=int,\n        default=0,\n        help='Help for option 1.')\n\n    parser.add_argument('--opt2',\n        type=float,\n        default=1.0,\n        help='Help for option 2.')\n\n\nAfter creating the parser, you can use it to parse command line arguments with\nthe `jsonargparse.ArgumentParser.parse_args` function, after which you get\nan object with the parsed values or defaults available as attributes. For\nillustrative purposes giving to `parse_args` a list of arguments (instead\nof automatically getting them from the command line arguments), with the parser\nfrom above you would observe:\n\n.. code-block:: python\n\n    >>> cfg = parser.parse_args(['--opt2', '2.3'])\n    >>> cfg.opt1, type(cfg.opt1)\n    (0, <class 'int'>)\n    >>> cfg.opt2, type(cfg.opt2)\n    (2.3, <class 'float'>)\n\nIf the parsing fails a `.ParserError` is raised, so depending on the use\ncase it might be necessary to catch it.\n\n.. code-block:: python\n\n    >>> try:\n    ...     cfg = parser.parse_args(['--opt2', 'four'])\n    ... except jsonargparse.ParserError as ex:\n    ...     print('parser error: '+str(ex))\n    ...\n    parser error: argument --opt2: invalid float value: 'four'\n\nTo get the default behavior of argparse the ArgumentParser can be initialized as\nfollows:\n\n.. code-block:: python\n\n    parser = ArgumentParser(\n        prog='app',\n        error_handler='usage_and_exit_error_handler',\n        description='Description for my app.')\n\n\n.. _nested-namespaces:\n\nNested namespaces\n=================\n\nA difference with respect to the basic argparse is that it by using dot notation\nin the argument names, you can define a hierarchy of nested namespaces. So for\nexample you could do the following:\n\n.. code-block:: python\n\n    >>> parser = ArgumentParser(prog='app')\n    >>> parser.add_argument('--lev1.opt1', default='from default 1')\n    >>> parser.add_argument('--lev1.opt2', default='from default 2')\n    >>> cfg = parser.get_defaults()\n    >>> cfg.lev1.opt1\n    'from default 2'\n    >>> cfg.lev1.opt2\n    'from default 2'\n\n\n.. _environment-variables:\n\nEnvironment variables\n=====================\n\nThe jsonargparse parsers can also get values from environment variables. The\nparser checks existing environment variables whose name is of the form\n:code:`[PREFIX_][LEV__]*OPT`, that is all in upper case, first a prefix (set by\n:code:`env_prefix`, or if unset the :code:`prog` without extension) followed by\nunderscore and then the argument name replacing dots with two underscores. Using\nthe parser from the `nested-namespaces` section above, in your shell you\nwould set the environment variables as:\n\n.. code-block:: bash\n\n    export APP_LEV1__OPT1='from env 1'\n    export APP_LEV1__OPT2='from env 2'\n\nThen in python the parser would use these variables, unless overridden by the\ncommand line arguments, that is:\n\n.. code-block:: python\n\n    >>> parser = ArgumentParser(env_prefix='APP', default_env=True)\n    >>> parser.add_argument('--lev1.opt1', default='from default 1')\n    >>> parser.add_argument('--lev1.opt2', default='from default 2')\n    >>> cfg = parser.parse_args(['--lev1.opt1', 'from arg 1'])\n    >>> cfg.lev1.opt1\n    'from arg 1'\n    >>> cfg.lev1.opt2\n    'from env 2'\n\nNote that when creating the parser, :code:`default_env=True` was given as\nargument. By default `jsonargparse.ArgumentParser.parse_args` does not\ncheck environment variables, so it has to be enabled explicitly.\n\nThere is also the `jsonargparse.ArgumentParser.parse_env` function to only\nparse environment variables, which might be useful for some use cases in which\nthere is no command line call involved.\n\nIf a parser includes an `.ActionConfigFile` argument, then the\nenvironment variable for this config file will be checked before all the other\nenvironment variables.\n\n\nConfiguration files\n===================\n\nAn important feature of this module is the parsing of yaml/json files. The dot\nnotation hierarchy of the arguments (see `nested-namespaces`) are used for\nthe expected structure in the config files.\n\nWhen creating the `.ArgumentParser` the :code:`default_config_files`\nargument can be given to specify patterns to search for configuration files.\nOnly the first matched config file is parsed.\n\nWhen parsing command line arguments, it is possible to add a configuration file\npath argument. The config file would be read and parsed in the specific position\namong the command line arguments, so the arguments after would override the\nvalues from the configuration file. If the config argument can be given multiple\ntimes, each overriding the values of the previous. Again using the parser from\nthe `nested-namespaces` section above, for example we could have the\nfollowing config file in yaml format:\n\n.. code-block:: yaml\n\n    # File: example.yaml\n    lev1:\n      opt1: from yaml 1\n      opt2: from yaml 2\n\nThen in python adding a yaml file argument and parsing some example arguments,\nthe following would be observed:\n\n.. code-block:: python\n\n    >>> from jsonargparse import ArgumentParser, ActionConfigFile\n    >>> parser = ArgumentParser()\n    >>> parser.add_argument('--lev1.opt1', default='from default 1')\n    >>> parser.add_argument('--lev1.opt2', default='from default 2')\n    >>> parser.add_argument('--cfg', action=ActionConfigFile)\n    >>> cfg = parser.parse_args(['--lev1.opt1', 'from arg 1', '--cfg', 'example.yaml', '--lev1.opt2', 'from arg 2'])\n    >>> cfg.lev1.opt1\n    'from yaml 1'\n    >>> cfg.lev1.opt2\n    'from arg 2'\n\nInstead of providing a path to a configuration file, a string with the\nconfiguration content can also be provided.\n\n.. code-block:: python\n\n    >>> cfg = parser.parse_args(['--cfg', '{\"lev1\":{\"opt1\":\"from string 1\"}}'])\n    >>> cfg.lev1.opt1\n    'from string 1'\n\nThe config file could also be provided as an environment variable as explained\nin section `environment-variables`. The configuration file environment\nvariable is the first one to be parsed. So any other argument provided through\nenvironment variables would override the config file one.\n\nA configuration file or string can also be parsed without parsing command line\narguments. The functions for this are\n`jsonargparse.ArgumentParser.parse_path` and\n`jsonargparse.ArgumentParser.parse_string` to parse a config file or a\nconfig contained in a string respectively.\n\n\nJson schemas\n============\n\nThe `.ActionJsonSchema` class is provided to allow parsing and validation\nof values using a json schema. This class requires the `jsonschema\n<https://pypi.org/project/jsonschema/>`__ python package. Though note that\njsonschema is not a requirement of the minimal jsonargparse install. To enable\nthis functionality install the module with the *all* extras requires as:\n\n.. code-block:: bash\n\n    $ pip3 install jsonargparse[all]\n\nCheck out the `jsonschema documentation\n<https://python-jsonschema.readthedocs.io/>`__ to learn how to write a schema.\nThe current version of jsonargparse uses Draft4Validator. Parsing an argument\nusing a json schema is done like in the following example:\n\n.. code-block:: python\n\n    >>> schema = {\n    ...     \"type\" : \"object\",\n    ...     \"properties\" : {\n    ...         \"price\" : {\"type\" : \"number\"},\n    ...         \"name\" : {\"type\" : \"string\"},\n    ...     },\n    ... }\n\n    >>> from jsonargparse import ActionJsonSchema\n    >>> parser.add_argument('--op', action=ActionJsonSchema(schema=schema))\n\n    >>> parser.parse_args(['--op', '{\"price\": 1.5, \"name\": \"cookie\"}'])\n    namespace(op=namespace(name='cookie', price=1.5))\n\nInstead of giving a json string as argument value, it is also possible to\nprovide a path to a json/yaml file, which would be loaded and validated against\nthe schema. If the schema defines default values, these will be used by the\nparser to initialize the config values that are not specified. When adding an\nargument with the `.ActionJsonSchema` action, you can use \"%s\" in the\n:code:`help` string so that in that position the schema will be printed.\n\n\nJsonnet files\n=============\n\nThe Jsonnet support requires `jsonschema\n<https://pypi.org/project/jsonschema/>`__ and `jsonnet\n<https://pypi.org/project/jsonnet/>`__ python packages which are not included\nwith minimal jsonargparse install. To enable this functionality install\njsonargparse with the *all* extras requires as:\n\n.. code-block:: bash\n\n    $ pip3 install jsonargparse[all]\n\nBy default an `.ArgumentParser` parses configuration files as yaml.\nHowever, if instantiated giving as argument :code:`parser_mode='jsonnet'`, then\n`parse_args`, `parse_path` and `parse_string` will expect\nconfig files to be in jsonnet format instead. Example:\n\n.. code-block:: python\n\n    >>> from jsonargparse import ArgumentParser, ActionConfigFile\n    >>> parser = ArgumentParser(parser_mode='jsonnet')\n    >>> parser.add_argument('--cfg', action=ActionConfigFile)\n    >>> cfg = parser.parse_args(['--cfg', 'example.jsonnet'])\n\nJsonnet files are commonly parametrized, thus requiring external variables for\nparsing. For these cases, instead of changing the parser mode away from yaml,\nthe `.ActionJsonnet` class can be used. This action allows to define an\nargument which would be a jsonnet string or a path to a jsonnet file. Moreover,\nanother argument can be specified as the source for any external variables\nrequired, which would be either a path to or a string containing a json\ndictionary of variables. Its use would be as follows:\n\n.. code-block:: python\n\n    from jsonargparse import ArgumentParser, ActionJsonnet, ActionJsonnetExtVars\n    parser = ArgumentParser()\n    parser.add_argument('--in_ext_vars',\n        action=ActionJsonnetExtVars())\n    parser.add_argument('--in_jsonnet',\n        action=ActionJsonnet(ext_vars='in_ext_vars'))\n\nFor example, if a jsonnet file required some external variable :code:`param`,\nthen the jsonnet and the external variable could be given as:\n\n.. code-block:: python\n\n        cfg = parser.parse_args(['--in_ext_vars', '{\"param\": 123}', '--in_jsonnet', 'path_to_jsonnet'])\n\nNote that the external variables argument must be provided before the jsonnet\npath so that this dictionary already exists when parsing the jsonnet.\n\nThe `.ActionJsonnet` class also accepts as argument a json schema, in\nwhich case the jsonnet would be validated against this schema right after\nparsing.\n\n\nParsing paths\n=============\n\nFor some use cases it is necessary to parse file paths, checking its existence\nand access permissions, but not necessarily opening the file. Moreover, a file\npath could be included in a config file as relative with respect to the config\nfile's location. After parsing it should be easy to access the parsed file path\nwithout having to consider the location of the config file. To help in these\nsituations jsonargparse includes the `.ActionPath` and the\n`.ActionPathList` classes.\n\nFor example suppose you have a directory with a configuration file\n:code:`app/config.yaml` and some data :code:`app/data/info.db`. The contents of\nthe yaml file is the following:\n\n.. code-block:: yaml\n\n    # File: config.yaml\n    databases:\n      info: data/info.db\n\nTo create a parser that checks that the value of :code:`databases.info` exists\nand is readable, the following could be done:\n\n.. code-block:: python\n\n    >>> from jsonargparse import ArgumentParser, ActionPath\n    >>> parser = ArgumentParser()\n    >>> parser.add_argument('--databases.info', action=ActionPath(mode='fr'))\n    >>> cfg = parser.parse_path('app/config.yaml')\n\nAfter parsing the value of :code:`databases.info` will be an instance of the\n`.Path` class that allows to get both the original relative path as\nincluded in the yaml file, or the corresponding absolute path:\n\n.. code-block:: python\n\n    >>> cfg.databases.info(absolute=False)\n    'data/info.db'\n    >>> cfg.databases.info()\n    '/YOUR_CWD/app/data/info.db'\n\nLikewise directories can also be parsed by including in the mode the :code:`'d'`\nflag, e.g. :code:`ActionPath(mode='drw')`.\n\nThe content of a file that a `.Path` instance references can be read by using\nthe `jsonargparse.Path.get_content` method. For the previous example would be\n:code:`info_db = cfg.databases.info.get_content()`.\n\nAn argument with `.ActionPath` can be given :code:`nargs='+'` to parse\nmultiple paths. But it might also be wanted to parse a list of paths found in a\nplain text file or from stdin. For this the `.ActionPathList` is used and\nas argument either the path to a file listing the paths is given or the special\n:code:`'-'` string for reading the list from stdin. For for example:\n\n.. code-block:: python\n\n    >>> from jsonargparse import ActionPathList\n    >>> parser.add_argument('--list', action=ActionPathList(mode='fr'))\n    >>> cfg = parser.parse_args(['--list', 'paths.lst')  # Text file with paths\n    >>> cfg = parser.parse_args(['--list', '-')          # List from stdin\n\nIf :code:`nargs='+'` is given to :code:`add_argument` then a single list is\ngenerated including all paths in all lists provided.\n\n\nParsing URLs\n============\n\nThe `.ActionPath` and `.ActionPathList` classes also support URLs\nwhich after parsing the `jsonargparse.Path.get_content` can be used to\nperform a GET request to the corresponding URL and retrieve its content. For this\nto work the *validators* and *requests* python packages are required which will\nbe installed along with jsonargparse if the *all* extras requires is chosen:\n\n.. code-block:: bash\n\n    $ pip3 install jsonargparse[all]\n\nThen the :code:`'u'` flag can be used to parse URLs. For example if it is\ndesired that an argument can be either a readable file or URL the action would\nbe initialized as :code:`ActionPath(mode='fur')`. If the value appears to be a\nURL according to `validators.url.url` then a HEAD request would be\ntriggered to check if it is accessible, and if so, the parsing succeeds.\n\nThere is also URL support for functions and classes that load from paths, namely\n`jsonargparse.ArgumentParser.parse_path`,\n`jsonargparse.ArgumentParser.get_defaults` (:code:`default_config_files`\nargument), `.ActionConfigFile`, `.ActionJsonSchema`,\n`.ActionJsonnet` and `.ActionParser`. This means that for example\nthat a tool that can receive a configuration file via `.ActionConfigFile`\nis able to get the config file from a URL, that is something like the following\nwould work:\n\n.. code-block:: bash\n\n    $ my_tool.py --cfg http://example.com/config.yaml\n\n\nComparison operators\n====================\n\nIt is quite common that when parsing a number, its range should be limited. To\nease these cases the module includes the `.ActionOperators`. Some\nexamples of arguments that can be added using this action are the following:\n\n.. code-block:: python\n\n    from jsonargparse import ActionOperators\n    # Larger than zero\n    parser.add_argument('--op1', action=ActionOperators(expr=('>', 0)))\n    # Between 0 and 10\n    parser.add_argument('--op2', action=ActionOperators(expr=[('>=', 0), ('<=', 10)]))\n    # Either larger than zero or 'off' string\n    def int_or_off(x): return x if x == 'off' else int(x)\n    parser.add_argument('--op3', action=ActionOperators(expr=[('>', 0), ('==', 'off')], join='or', type=int_or_off))\n\n\nBoolean arguments\n=================\n\nParsing boolean arguments is very common, however, the original argparse only\nhas a limited support for them, via :code:`store_true` and :code:`store_false`.\nFuthermore unexperienced users might mistakenly use :code:`type=bool` which\nwould not provide the intended behavior.\n\nWith jsonargparse adding an argument with :code:`type=bool` the intended action\nis implemented. If given as values :code:`{'yes', 'true'}` or :code:`{'no',\n'false'}` the corresponding parsed values would be :code:`True` or\n:code:`False`. For example:\n\n.. code-block:: python\n\n    >>> parser.add_argument('--op1', type=bool, default=False)\n    >>> parser.add_argument('--op2', type=bool, default=True)\n    >>> parser.parse_args(['--op1', 'yes', '--op2', 'false'])\n    namespace(op1=True, op2=False)\n\nSometimes it is also useful to define two paired options, one to set\n:code:`True` and the other to set :code:`False`. The `.ActionYesNo` class\nmakes this straightforward. A couple of examples would be:\n\n.. code-block:: python\n\n    from jsonargparse import ActionYesNo\n    # --opt1 for true and --no_opt1 for false.\n    parser.add_argument('--op1', action=ActionYesNo)\n    # --with-opt2 for true and --without-opt2 for false.\n    parser.add_argument('--with-op2', action=ActionYesNo(yes_prefix='with-', no_prefix='without-'))\n\nIf the `.ActionYesNo` class is used in conjunction with\n:code:`nargs='?'` the options can also be set by giving as value any of\n:code:`{'true', 'yes', 'false', 'no'}`.\n\n\nParsers as arguments\n====================\n\nAs parsers get more complex, being able to define them in a modular way becomes\nimportant. Two mechanisms are available to define parsers in a modular way, both\nexplained in this and the next section respectively.\n\nSometimes it is useful to take an already existing parser that is required\nstandalone in some part of the code, and reuse it to parse an inner node of\nanother more complex parser. For these cases an argument can be defined using\nthe `.ActionParser` class. An example of how to use this class is the\nfollowing:\n\n.. code-block:: python\n\n    from jsonargparse import ArgumentParser, ActionParser\n    inner_parser = ArgumentParser(prog='app1')\n    inner_parser.add_argument('--op1')\n    ...\n    outer_parser = ArgumentParser(prog='app2')\n    outer_parser.add_argument('--inner.node',\n        action=ActionParser(parser=inner_parser))\n\nWhen using the `.ActionParser` class, the value of the node in a config\nfile can be either the complex node itself, or the path to a file which will be\nloaded and parsed with the corresponding inner parser. Naturally using\n`.ActionConfigFile` to parse a complete config file will parse the inner\nnodes correctly.\n\nFrom the command line the help of the inner parsers can be shown by calling the\ntool with a prefixed help command, that is, for the example above it would be\n:code:`--inner.node.help`.\n\nRegarding environment variables, the prefix of the outer parser will be used to\npopulate the leaf nodes of the inner parser. In the example above, if\n:code:`inner_parser` is used to parse environment variables, then as normal\n:code:`APP1_OP1` would be checked to populate option :code:`op1`. But if\n:code:`outer_parser` is used, then :code:`APP2_INNER__NODE__OP1` would be\nchecked to populate :code:`inner.node.op1`.\n\nAn important detail to note is that the parsers that are given to\n`.ActionParser` are internally modified. So they should be instantiated\nexclusively for the `.ActionParser` and not used standalone.\n\n\nSub-commands\n============\n\nA second way to define parsers in a modular way is what in argparse is known as\n`sub-commands <https://docs.python.org/3/library/argparse.html#sub-commands>`_.\nHowever, to promote modularity, in jsonargparse sub-commands work a bit\ndifferent than in argparse. To add sub-commands to a parser, the\n`jsonargparse.ArgumentParser.add_subcommands` method is used. Then an\nexisting parser is added as a sub-command using\n`jsonargparse.ActionSubCommands.add_subcommand`. In a parsed config object\nthe sub-command will be stored in the :code:`subcommand` entry (or whatever\n:code:`dest` was set to), and the values of the sub-command will be in an entry\nwith the same name as the respective sub-command. An example of defining a\nparser with sub-commands is the following:\n\n.. code-block:: python\n\n    from jsonargparse import ArgumentParser\n    ...\n    parser_subcomm1 = ArgumentParser()\n    parser_subcomm1.add_argument('--op1')\n    ...\n    parser_subcomm2 = ArgumentParser()\n    parser_subcomm2.add_argument('--op2')\n    ...\n    parser = ArgumentParser(prog='app')\n    parser.add_argument('--op0')\n    subcommands = parser.add_subcommands()\n    subcommands.add_subcommand('subcomm1', parser_subcomm1)\n    subcommands.add_subcommand('subcomm2', parser_subcomm2)\n\nThen some examples of parsing are the following:\n\n.. code-block:: python\n\n    >>> parser.parse_args(['subcomm1', '--op1', 'val1'])\n    namespace(op0=None, subcomm1=namespace(op1='val1'), subcommand='subcomm1')\n    >>> parser.parse_args(['--op0', 'val0', 'subcomm2', '--op2', 'val2'])\n    namespace(op0='val0', subcomm2=namespace(op2='val2'), subcommand='subcomm2')\n\nParsing config files with `jsonargparse.ArgumentParser.parse_path` or\n`jsonargparse.ArgumentParser.parse_string` is also possible. Though there\ncan only be values for one of the sub-commands. The config file is not required\nto specify a value for :code:`subcommand`. For the example parser above a valid\nyaml would be:\n\n.. code-block:: yaml\n\n    # File: example.yaml\n    op0: val0\n    subcomm1:\n      op1: val1\n\nParsing of environment variables works similar to `.ActionParser`. For\nthe example parser above, all environment variables for :code:`subcomm1` would\nhave as prefix :code:`APP_SUBCOMM1_` and likewise for :code:`subcomm2` as prefix\n:code:`APP_SUBCOMM2_`. The sub-command to use could be chosen by setting\nenvironment variable :code:`APP_SUBCOMMAND`.\n\n\nLogging\n=======\n\nThe parsers from jsonargparse log some basic events, though by default this is\ndisabled. To enable it the :code:`logger` argument should be set when creating\nan `.ArgumentParser` object. The intended use is to give as value an\nalready existing logger object which is used for the whole application. Though\nfor convenience to enable a default logger the :code:`logger` argument can also\nreceive :code:`True` or a string which sets the name of the logger or a\ndictionary that can include the name and the level, e.g. :code:`{\"name\":\n\"myapp\", \"level\": \"ERROR\"}`.\n\n\nContributing\n============\n\nContributions to the jsonargparse package are very welcome, be it just to create\n`issues <https://github.com/omni-us/jsonargparse/issues>`_ for reporting bugs\nand proposing enhancements, or more directly by creating `pull requests\n<https://github.com/omni-us/jsonargparse/pulls>`_.\n\nIf you intend to work with the source code, note that this project does not\ninclude any :code:`requirements.txt` file. This is by intention. To make it very\nclear what are the requirements for different use cases, all the requirements of\nthe project are stored in the file :code:`setup.cfg`. The basic runtime\nrequirements are defined in section :code:`[options]` in the\n:code:`install_requires` entry. All optional requirements are stored in section\n:code:`[options.extras_require]` in the :code:`all` entry. Also there are\n:code:`test`, :code:`dev` and :code:`doc` entries in the same\n:code:`[options.extras_require]` section which lists requirements for testing,\ndevelopment and documentation building.\n\nThe recommended way to work with the source code is the following. First clone\nthe repository, then create a virtual environment, activate it and finally\ninstall the development requirements. More precisely the steps would be:\n\n.. code-block:: bash\n\n    git clone https://github.com/omni-us/jsonargparse.git\n    cd jsonargparse\n    virtualenv -p python3 venv\n    . venv/bin/activate\n\nThe crucial step is installing the requirements which would be done by running:\n\n.. code-block:: bash\n\n    pip install --editable .[test,dev,doc,all]\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://omni-us.github.io/jsonargparse", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "jsonargparse", "package_url": "https://pypi.org/project/jsonargparse/", "platform": "any", "project_url": "https://pypi.org/project/jsonargparse/", "project_urls": {"CircleCI": "https://circleci.com/gh/omni-us/jsonargparse", "Documentation": "https://omni-us.github.io/jsonargparse", "GitHub": "https://github.com/omni-us/jsonargparse", "Homepage": "https://omni-us.github.io/jsonargparse", "PyPI": "https://pypi.org/project/jsonargparse"}, "release_url": "https://pypi.org/project/jsonargparse/2.29.0/", "requires_dist": ["PyYAML (>=3.13)", "jsonschema (>=2.6.0) ; extra == 'all'", "jsonnet (>=0.13.0) ; extra == 'all'", "validators (>=0.14.2) ; extra == 'all'", "requests (>=2.22.0) ; extra == 'all'", "pylint (>=1.8.3) ; extra == 'dev'", "pycodestyle (>=2.5.0) ; extra == 'dev'", "mypy (>=0.701) ; extra == 'dev'", "bump2version (>=0.5.11) ; extra == 'dev'", "Sphinx (>=1.7.9) ; extra == 'doc'", "sphinx-rtd-theme (>=0.4.3) ; extra == 'doc'", "autodocsumm (>=0.1.10) ; extra == 'doc'", "coverage (>=4.5.1) ; extra == 'test'", "codecov (>=2.0.15) ; extra == 'test'", "junitxml (>=0.7) ; extra == 'test'", "python-subunit (>=1.3.0) ; extra == 'test'"], "requires_python": ">=3.4", "summary": "Parsing of command line options, yaml/jsonnet config files and/or environment variables based on argparse.", "version": "2.29.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://circleci.com/gh/omni-us/jsonargparse\" rel=\"nofollow\"><img alt=\"https://circleci.com/gh/omni-us/jsonargparse.svg?style=svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/21ca11859f5c79a6b1989b1b898f2b32690a9b7f/68747470733a2f2f636972636c6563692e636f6d2f67682f6f6d6e692d75732f6a736f6e61726770617273652e7376673f7374796c653d737667\"></a>\n<a href=\"https://codecov.io/gh/omni-us/jsonargparse\" rel=\"nofollow\"><img alt=\"https://codecov.io/gh/omni-us/jsonargparse/branch/master/graph/badge.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/08b611c398705f84038a8feb57a8e87cdc39dfe2/68747470733a2f2f636f6465636f762e696f2f67682f6f6d6e692d75732f6a736f6e61726770617273652f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a>\n<a href=\"https://badge.fury.io/py/jsonargparse\" rel=\"nofollow\"><img alt=\"https://badge.fury.io/py/jsonargparse.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/603b97a878d98142ca1004135b836ba29dc9e6d1/68747470733a2f2f62616467652e667572792e696f2f70792f6a736f6e61726770617273652e737667\"></a>\n<a href=\"https://github.com/omni-us/jsonargparse\" rel=\"nofollow\"><img alt=\"https://img.shields.io/badge/contributions-welcome-brightgreen.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/220aa3f89f789ec18b3b3c9096a2a11ab994fd90/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f6e747269627574696f6e732d77656c636f6d652d627269676874677265656e2e737667\"></a>\n<div id=\"jsonargparse-former-yamlargparse\">\n<h2>jsonargparse (former yamlargparse)</h2>\n<p><a href=\"https://omni-us.github.io/jsonargparse/\" rel=\"nofollow\">https://omni-us.github.io/jsonargparse/</a></p>\n<p>This module is an extension to python\u2019s argparse which simplifies parsing of\nconfiguration options from command line arguments, json supersets (<a href=\"https://yaml.org/\" rel=\"nofollow\">yaml</a> or <a href=\"https://jsonnet.org/\" rel=\"nofollow\">jsonnet</a>) configuration\nfiles, environment variables and hard-coded defaults.</p>\n<p>The aim is similar to other projects such as <a href=\"https://pypi.org/project/ConfigArgParse/\" rel=\"nofollow\">configargparse</a>, <a href=\"https://pypi.org/project/yconf/\" rel=\"nofollow\">yconf</a> and <a href=\"https://pypi.org/project/confuse/\" rel=\"nofollow\">confuse</a>. The obvious question is, why yet another\nmodule similar to many already existing ones? The answer is simply that none of\nthe existing projects had the exact features we wanted and after analyzing the\nalternatives it seemed simpler to create a new module.</p>\n</div>\n<div id=\"features\">\n<h2>Features</h2>\n<ul>\n<li>Parsers are configured just like with python\u2019s argparse, thus it has a gentle\nlearning curve.</li>\n<li>Not exclusively intended for parsing command line arguments. The main focus is\nparsing yaml or jsonnet configuration files and not necessarily from a command\nline tool.</li>\n<li>Support for nested namespaces which makes it possible to parse config files\nwith non-flat hierarchies.</li>\n<li>Support for two popular supersets of json, making config files more versatile\nand powerful.</li>\n<li>Parsing of relative paths within config files and path lists.</li>\n<li>Several convenient action classes to ease common parsing use cases (paths,\ncomparison operators, json schemas, \u2026).</li>\n<li>Two mechanisms to define parsers in a modular way: parsers as arguments and\nsub-commands.</li>\n<li>Default behavior is not identical to argparse, though it is possible to\nconfigure it to be identical. The main differences are:<ul>\n<li>When parsing fails <cite>.ParserError</cite> is raised, instead of printing usage\nand program exit.</li>\n<li>To modify the behavior for parsing errors (e.g. print usage) an error\nhandler function can be provided.</li>\n</ul>\n</li>\n<li>Configuration values are overridden based on the following precedence.<ul>\n<li><strong>Parsing command line:</strong> command line arguments (might include config file)\n&gt; environment variables &gt; default config file &gt; defaults.</li>\n<li><strong>Parsing files:</strong> config file &gt; environment variables &gt; default config file\n&gt; defaults.</li>\n<li><strong>Parsing environment:</strong> environment variables &gt; default config file &gt;\ndefaults.</li>\n</ul>\n</li>\n</ul>\n</div>\n<div id=\"basic-usage\">\n<h2>Basic usage</h2>\n<p>A parser is created just like it is done with argparse. You import the module,\ncreate a parser object and then add arguments to it. A simple example would be:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">jsonargparse</span> <span class=\"kn\">import</span> <span class=\"n\">ArgumentParser</span>\n<span class=\"n\">parser</span> <span class=\"o\">=</span> <span class=\"n\">ArgumentParser</span><span class=\"p\">(</span>\n    <span class=\"n\">prog</span><span class=\"o\">=</span><span class=\"s1\">'app'</span><span class=\"p\">,</span>\n    <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"s1\">'Description for my app.'</span><span class=\"p\">)</span>\n\n<span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">add_argument</span><span class=\"p\">(</span><span class=\"s1\">'--opt1'</span><span class=\"p\">,</span>\n    <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"nb\">int</span><span class=\"p\">,</span>\n    <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span>\n    <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s1\">'Help for option 1.'</span><span class=\"p\">)</span>\n\n<span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">add_argument</span><span class=\"p\">(</span><span class=\"s1\">'--opt2'</span><span class=\"p\">,</span>\n    <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"nb\">float</span><span class=\"p\">,</span>\n    <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"mf\">1.0</span><span class=\"p\">,</span>\n    <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s1\">'Help for option 2.'</span><span class=\"p\">)</span>\n</pre>\n<p>After creating the parser, you can use it to parse command line arguments with\nthe <cite>jsonargparse.ArgumentParser.parse_args</cite> function, after which you get\nan object with the parsed values or defaults available as attributes. For\nillustrative purposes giving to <cite>parse_args</cite> a list of arguments (instead\nof automatically getting them from the command line arguments), with the parser\nfrom above you would observe:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cfg</span> <span class=\"o\">=</span> <span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">parse_args</span><span class=\"p\">([</span><span class=\"s1\">'--opt2'</span><span class=\"p\">,</span> <span class=\"s1\">'2.3'</span><span class=\"p\">])</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cfg</span><span class=\"o\">.</span><span class=\"n\">opt1</span><span class=\"p\">,</span> <span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">cfg</span><span class=\"o\">.</span><span class=\"n\">opt1</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"o\">&lt;</span><span class=\"k\">class</span> <span class=\"err\">'</span><span class=\"nc\">int</span><span class=\"s1\">'&gt;)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cfg</span><span class=\"o\">.</span><span class=\"n\">opt2</span><span class=\"p\">,</span> <span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">cfg</span><span class=\"o\">.</span><span class=\"n\">opt2</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"mf\">2.3</span><span class=\"p\">,</span> <span class=\"o\">&lt;</span><span class=\"k\">class</span> <span class=\"err\">'</span><span class=\"nc\">float</span><span class=\"s1\">'&gt;)</span>\n</pre>\n<p>If the parsing fails a <cite>.ParserError</cite> is raised, so depending on the use\ncase it might be necessary to catch it.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">try</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>     <span class=\"n\">cfg</span> <span class=\"o\">=</span> <span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">parse_args</span><span class=\"p\">([</span><span class=\"s1\">'--opt2'</span><span class=\"p\">,</span> <span class=\"s1\">'four'</span><span class=\"p\">])</span>\n<span class=\"o\">...</span> <span class=\"k\">except</span> <span class=\"n\">jsonargparse</span><span class=\"o\">.</span><span class=\"n\">ParserError</span> <span class=\"k\">as</span> <span class=\"n\">ex</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>     <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'parser error: '</span><span class=\"o\">+</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">ex</span><span class=\"p\">))</span>\n<span class=\"o\">...</span>\n<span class=\"n\">parser</span> <span class=\"n\">error</span><span class=\"p\">:</span> <span class=\"n\">argument</span> <span class=\"o\">--</span><span class=\"n\">opt2</span><span class=\"p\">:</span> <span class=\"n\">invalid</span> <span class=\"nb\">float</span> <span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"s1\">'four'</span>\n</pre>\n<p>To get the default behavior of argparse the ArgumentParser can be initialized as\nfollows:</p>\n<pre><span class=\"n\">parser</span> <span class=\"o\">=</span> <span class=\"n\">ArgumentParser</span><span class=\"p\">(</span>\n    <span class=\"n\">prog</span><span class=\"o\">=</span><span class=\"s1\">'app'</span><span class=\"p\">,</span>\n    <span class=\"n\">error_handler</span><span class=\"o\">=</span><span class=\"s1\">'usage_and_exit_error_handler'</span><span class=\"p\">,</span>\n    <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"s1\">'Description for my app.'</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"id1\">\n<span id=\"nested-namespaces\"></span><h2>Nested namespaces</h2>\n<p>A difference with respect to the basic argparse is that it by using dot notation\nin the argument names, you can define a hierarchy of nested namespaces. So for\nexample you could do the following:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">parser</span> <span class=\"o\">=</span> <span class=\"n\">ArgumentParser</span><span class=\"p\">(</span><span class=\"n\">prog</span><span class=\"o\">=</span><span class=\"s1\">'app'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">add_argument</span><span class=\"p\">(</span><span class=\"s1\">'--lev1.opt1'</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"s1\">'from default 1'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">add_argument</span><span class=\"p\">(</span><span class=\"s1\">'--lev1.opt2'</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"s1\">'from default 2'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cfg</span> <span class=\"o\">=</span> <span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">get_defaults</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cfg</span><span class=\"o\">.</span><span class=\"n\">lev1</span><span class=\"o\">.</span><span class=\"n\">opt1</span>\n<span class=\"s1\">'from default 2'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cfg</span><span class=\"o\">.</span><span class=\"n\">lev1</span><span class=\"o\">.</span><span class=\"n\">opt2</span>\n<span class=\"s1\">'from default 2'</span>\n</pre>\n</div>\n<div id=\"id2\">\n<span id=\"environment-variables\"></span><h2>Environment variables</h2>\n<p>The jsonargparse parsers can also get values from environment variables. The\nparser checks existing environment variables whose name is of the form\n<code>[PREFIX_][LEV__]*OPT</code>, that is all in upper case, first a prefix (set by\n<code>env_prefix</code>, or if unset the <code>prog</code> without extension) followed by\nunderscore and then the argument name replacing dots with two underscores. Using\nthe parser from the <cite>nested-namespaces</cite> section above, in your shell you\nwould set the environment variables as:</p>\n<pre><span class=\"nb\">export</span> <span class=\"nv\">APP_LEV1__OPT1</span><span class=\"o\">=</span><span class=\"s1\">'from env 1'</span>\n<span class=\"nb\">export</span> <span class=\"nv\">APP_LEV1__OPT2</span><span class=\"o\">=</span><span class=\"s1\">'from env 2'</span>\n</pre>\n<p>Then in python the parser would use these variables, unless overridden by the\ncommand line arguments, that is:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">parser</span> <span class=\"o\">=</span> <span class=\"n\">ArgumentParser</span><span class=\"p\">(</span><span class=\"n\">env_prefix</span><span class=\"o\">=</span><span class=\"s1\">'APP'</span><span class=\"p\">,</span> <span class=\"n\">default_env</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">add_argument</span><span class=\"p\">(</span><span class=\"s1\">'--lev1.opt1'</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"s1\">'from default 1'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">add_argument</span><span class=\"p\">(</span><span class=\"s1\">'--lev1.opt2'</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"s1\">'from default 2'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cfg</span> <span class=\"o\">=</span> <span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">parse_args</span><span class=\"p\">([</span><span class=\"s1\">'--lev1.opt1'</span><span class=\"p\">,</span> <span class=\"s1\">'from arg 1'</span><span class=\"p\">])</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cfg</span><span class=\"o\">.</span><span class=\"n\">lev1</span><span class=\"o\">.</span><span class=\"n\">opt1</span>\n<span class=\"s1\">'from arg 1'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cfg</span><span class=\"o\">.</span><span class=\"n\">lev1</span><span class=\"o\">.</span><span class=\"n\">opt2</span>\n<span class=\"s1\">'from env 2'</span>\n</pre>\n<p>Note that when creating the parser, <code>default_env=True</code> was given as\nargument. By default <cite>jsonargparse.ArgumentParser.parse_args</cite> does not\ncheck environment variables, so it has to be enabled explicitly.</p>\n<p>There is also the <cite>jsonargparse.ArgumentParser.parse_env</cite> function to only\nparse environment variables, which might be useful for some use cases in which\nthere is no command line call involved.</p>\n<p>If a parser includes an <cite>.ActionConfigFile</cite> argument, then the\nenvironment variable for this config file will be checked before all the other\nenvironment variables.</p>\n</div>\n<div id=\"configuration-files\">\n<h2>Configuration files</h2>\n<p>An important feature of this module is the parsing of yaml/json files. The dot\nnotation hierarchy of the arguments (see <cite>nested-namespaces</cite>) are used for\nthe expected structure in the config files.</p>\n<p>When creating the <cite>.ArgumentParser</cite> the <code>default_config_files</code>\nargument can be given to specify patterns to search for configuration files.\nOnly the first matched config file is parsed.</p>\n<p>When parsing command line arguments, it is possible to add a configuration file\npath argument. The config file would be read and parsed in the specific position\namong the command line arguments, so the arguments after would override the\nvalues from the configuration file. If the config argument can be given multiple\ntimes, each overriding the values of the previous. Again using the parser from\nthe <cite>nested-namespaces</cite> section above, for example we could have the\nfollowing config file in yaml format:</p>\n<pre><span class=\"c1\"># File: example.yaml</span>\n<span class=\"nt\">lev1</span><span class=\"p\">:</span>\n  <span class=\"nt\">opt1</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">from yaml 1</span>\n  <span class=\"nt\">opt2</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">from yaml 2</span>\n</pre>\n<p>Then in python adding a yaml file argument and parsing some example arguments,\nthe following would be observed:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">jsonargparse</span> <span class=\"kn\">import</span> <span class=\"n\">ArgumentParser</span><span class=\"p\">,</span> <span class=\"n\">ActionConfigFile</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">parser</span> <span class=\"o\">=</span> <span class=\"n\">ArgumentParser</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">add_argument</span><span class=\"p\">(</span><span class=\"s1\">'--lev1.opt1'</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"s1\">'from default 1'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">add_argument</span><span class=\"p\">(</span><span class=\"s1\">'--lev1.opt2'</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"s1\">'from default 2'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">add_argument</span><span class=\"p\">(</span><span class=\"s1\">'--cfg'</span><span class=\"p\">,</span> <span class=\"n\">action</span><span class=\"o\">=</span><span class=\"n\">ActionConfigFile</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cfg</span> <span class=\"o\">=</span> <span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">parse_args</span><span class=\"p\">([</span><span class=\"s1\">'--lev1.opt1'</span><span class=\"p\">,</span> <span class=\"s1\">'from arg 1'</span><span class=\"p\">,</span> <span class=\"s1\">'--cfg'</span><span class=\"p\">,</span> <span class=\"s1\">'example.yaml'</span><span class=\"p\">,</span> <span class=\"s1\">'--lev1.opt2'</span><span class=\"p\">,</span> <span class=\"s1\">'from arg 2'</span><span class=\"p\">])</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cfg</span><span class=\"o\">.</span><span class=\"n\">lev1</span><span class=\"o\">.</span><span class=\"n\">opt1</span>\n<span class=\"s1\">'from yaml 1'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cfg</span><span class=\"o\">.</span><span class=\"n\">lev1</span><span class=\"o\">.</span><span class=\"n\">opt2</span>\n<span class=\"s1\">'from arg 2'</span>\n</pre>\n<p>Instead of providing a path to a configuration file, a string with the\nconfiguration content can also be provided.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cfg</span> <span class=\"o\">=</span> <span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">parse_args</span><span class=\"p\">([</span><span class=\"s1\">'--cfg'</span><span class=\"p\">,</span> <span class=\"s1\">'{\"lev1\":{\"opt1\":\"from string 1\"}}'</span><span class=\"p\">])</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cfg</span><span class=\"o\">.</span><span class=\"n\">lev1</span><span class=\"o\">.</span><span class=\"n\">opt1</span>\n<span class=\"s1\">'from string 1'</span>\n</pre>\n<p>The config file could also be provided as an environment variable as explained\nin section <cite>environment-variables</cite>. The configuration file environment\nvariable is the first one to be parsed. So any other argument provided through\nenvironment variables would override the config file one.</p>\n<p>A configuration file or string can also be parsed without parsing command line\narguments. The functions for this are\n<cite>jsonargparse.ArgumentParser.parse_path</cite> and\n<cite>jsonargparse.ArgumentParser.parse_string</cite> to parse a config file or a\nconfig contained in a string respectively.</p>\n</div>\n<div id=\"json-schemas\">\n<h2>Json schemas</h2>\n<p>The <cite>.ActionJsonSchema</cite> class is provided to allow parsing and validation\nof values using a json schema. This class requires the <a href=\"https://pypi.org/project/jsonschema/\" rel=\"nofollow\">jsonschema</a> python package. Though note that\njsonschema is not a requirement of the minimal jsonargparse install. To enable\nthis functionality install the module with the <em>all</em> extras requires as:</p>\n<pre>$ pip3 install jsonargparse<span class=\"o\">[</span>all<span class=\"o\">]</span>\n</pre>\n<p>Check out the <a href=\"https://python-jsonschema.readthedocs.io/\" rel=\"nofollow\">jsonschema documentation</a> to learn how to write a schema.\nThe current version of jsonargparse uses Draft4Validator. Parsing an argument\nusing a json schema is done like in the following example:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">schema</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n<span class=\"o\">...</span>     <span class=\"s2\">\"type\"</span> <span class=\"p\">:</span> <span class=\"s2\">\"object\"</span><span class=\"p\">,</span>\n<span class=\"o\">...</span>     <span class=\"s2\">\"properties\"</span> <span class=\"p\">:</span> <span class=\"p\">{</span>\n<span class=\"o\">...</span>         <span class=\"s2\">\"price\"</span> <span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s2\">\"type\"</span> <span class=\"p\">:</span> <span class=\"s2\">\"number\"</span><span class=\"p\">},</span>\n<span class=\"o\">...</span>         <span class=\"s2\">\"name\"</span> <span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s2\">\"type\"</span> <span class=\"p\">:</span> <span class=\"s2\">\"string\"</span><span class=\"p\">},</span>\n<span class=\"o\">...</span>     <span class=\"p\">},</span>\n<span class=\"o\">...</span> <span class=\"p\">}</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">jsonargparse</span> <span class=\"kn\">import</span> <span class=\"n\">ActionJsonSchema</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">add_argument</span><span class=\"p\">(</span><span class=\"s1\">'--op'</span><span class=\"p\">,</span> <span class=\"n\">action</span><span class=\"o\">=</span><span class=\"n\">ActionJsonSchema</span><span class=\"p\">(</span><span class=\"n\">schema</span><span class=\"o\">=</span><span class=\"n\">schema</span><span class=\"p\">))</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">parse_args</span><span class=\"p\">([</span><span class=\"s1\">'--op'</span><span class=\"p\">,</span> <span class=\"s1\">'{\"price\": 1.5, \"name\": \"cookie\"}'</span><span class=\"p\">])</span>\n<span class=\"n\">namespace</span><span class=\"p\">(</span><span class=\"n\">op</span><span class=\"o\">=</span><span class=\"n\">namespace</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'cookie'</span><span class=\"p\">,</span> <span class=\"n\">price</span><span class=\"o\">=</span><span class=\"mf\">1.5</span><span class=\"p\">))</span>\n</pre>\n<p>Instead of giving a json string as argument value, it is also possible to\nprovide a path to a json/yaml file, which would be loaded and validated against\nthe schema. If the schema defines default values, these will be used by the\nparser to initialize the config values that are not specified. When adding an\nargument with the <cite>.ActionJsonSchema</cite> action, you can use \u201c%s\u201d in the\n<code>help</code> string so that in that position the schema will be printed.</p>\n</div>\n<div id=\"jsonnet-files\">\n<h2>Jsonnet files</h2>\n<p>The Jsonnet support requires <a href=\"https://pypi.org/project/jsonschema/\" rel=\"nofollow\">jsonschema</a> and <a href=\"https://pypi.org/project/jsonnet/\" rel=\"nofollow\">jsonnet</a> python packages which are not included\nwith minimal jsonargparse install. To enable this functionality install\njsonargparse with the <em>all</em> extras requires as:</p>\n<pre>$ pip3 install jsonargparse<span class=\"o\">[</span>all<span class=\"o\">]</span>\n</pre>\n<p>By default an <cite>.ArgumentParser</cite> parses configuration files as yaml.\nHowever, if instantiated giving as argument <code>parser_mode='jsonnet'</code>, then\n<cite>parse_args</cite>, <cite>parse_path</cite> and <cite>parse_string</cite> will expect\nconfig files to be in jsonnet format instead. Example:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">jsonargparse</span> <span class=\"kn\">import</span> <span class=\"n\">ArgumentParser</span><span class=\"p\">,</span> <span class=\"n\">ActionConfigFile</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">parser</span> <span class=\"o\">=</span> <span class=\"n\">ArgumentParser</span><span class=\"p\">(</span><span class=\"n\">parser_mode</span><span class=\"o\">=</span><span class=\"s1\">'jsonnet'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">add_argument</span><span class=\"p\">(</span><span class=\"s1\">'--cfg'</span><span class=\"p\">,</span> <span class=\"n\">action</span><span class=\"o\">=</span><span class=\"n\">ActionConfigFile</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cfg</span> <span class=\"o\">=</span> <span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">parse_args</span><span class=\"p\">([</span><span class=\"s1\">'--cfg'</span><span class=\"p\">,</span> <span class=\"s1\">'example.jsonnet'</span><span class=\"p\">])</span>\n</pre>\n<p>Jsonnet files are commonly parametrized, thus requiring external variables for\nparsing. For these cases, instead of changing the parser mode away from yaml,\nthe <cite>.ActionJsonnet</cite> class can be used. This action allows to define an\nargument which would be a jsonnet string or a path to a jsonnet file. Moreover,\nanother argument can be specified as the source for any external variables\nrequired, which would be either a path to or a string containing a json\ndictionary of variables. Its use would be as follows:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">jsonargparse</span> <span class=\"kn\">import</span> <span class=\"n\">ArgumentParser</span><span class=\"p\">,</span> <span class=\"n\">ActionJsonnet</span><span class=\"p\">,</span> <span class=\"n\">ActionJsonnetExtVars</span>\n<span class=\"n\">parser</span> <span class=\"o\">=</span> <span class=\"n\">ArgumentParser</span><span class=\"p\">()</span>\n<span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">add_argument</span><span class=\"p\">(</span><span class=\"s1\">'--in_ext_vars'</span><span class=\"p\">,</span>\n    <span class=\"n\">action</span><span class=\"o\">=</span><span class=\"n\">ActionJsonnetExtVars</span><span class=\"p\">())</span>\n<span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">add_argument</span><span class=\"p\">(</span><span class=\"s1\">'--in_jsonnet'</span><span class=\"p\">,</span>\n    <span class=\"n\">action</span><span class=\"o\">=</span><span class=\"n\">ActionJsonnet</span><span class=\"p\">(</span><span class=\"n\">ext_vars</span><span class=\"o\">=</span><span class=\"s1\">'in_ext_vars'</span><span class=\"p\">))</span>\n</pre>\n<p>For example, if a jsonnet file required some external variable <code>param</code>,\nthen the jsonnet and the external variable could be given as:</p>\n<pre><span class=\"n\">cfg</span> <span class=\"o\">=</span> <span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">parse_args</span><span class=\"p\">([</span><span class=\"s1\">'--in_ext_vars'</span><span class=\"p\">,</span> <span class=\"s1\">'{\"param\": 123}'</span><span class=\"p\">,</span> <span class=\"s1\">'--in_jsonnet'</span><span class=\"p\">,</span> <span class=\"s1\">'path_to_jsonnet'</span><span class=\"p\">])</span>\n</pre>\n<p>Note that the external variables argument must be provided before the jsonnet\npath so that this dictionary already exists when parsing the jsonnet.</p>\n<p>The <cite>.ActionJsonnet</cite> class also accepts as argument a json schema, in\nwhich case the jsonnet would be validated against this schema right after\nparsing.</p>\n</div>\n<div id=\"parsing-paths\">\n<h2>Parsing paths</h2>\n<p>For some use cases it is necessary to parse file paths, checking its existence\nand access permissions, but not necessarily opening the file. Moreover, a file\npath could be included in a config file as relative with respect to the config\nfile\u2019s location. After parsing it should be easy to access the parsed file path\nwithout having to consider the location of the config file. To help in these\nsituations jsonargparse includes the <cite>.ActionPath</cite> and the\n<cite>.ActionPathList</cite> classes.</p>\n<p>For example suppose you have a directory with a configuration file\n<code>app/config.yaml</code> and some data <code>app/data/info.db</code>. The contents of\nthe yaml file is the following:</p>\n<pre><span class=\"c1\"># File: config.yaml</span>\n<span class=\"nt\">databases</span><span class=\"p\">:</span>\n  <span class=\"nt\">info</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">data/info.db</span>\n</pre>\n<p>To create a parser that checks that the value of <code>databases.info</code> exists\nand is readable, the following could be done:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">jsonargparse</span> <span class=\"kn\">import</span> <span class=\"n\">ArgumentParser</span><span class=\"p\">,</span> <span class=\"n\">ActionPath</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">parser</span> <span class=\"o\">=</span> <span class=\"n\">ArgumentParser</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">add_argument</span><span class=\"p\">(</span><span class=\"s1\">'--databases.info'</span><span class=\"p\">,</span> <span class=\"n\">action</span><span class=\"o\">=</span><span class=\"n\">ActionPath</span><span class=\"p\">(</span><span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"s1\">'fr'</span><span class=\"p\">))</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cfg</span> <span class=\"o\">=</span> <span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">parse_path</span><span class=\"p\">(</span><span class=\"s1\">'app/config.yaml'</span><span class=\"p\">)</span>\n</pre>\n<p>After parsing the value of <code>databases.info</code> will be an instance of the\n<cite>.Path</cite> class that allows to get both the original relative path as\nincluded in the yaml file, or the corresponding absolute path:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cfg</span><span class=\"o\">.</span><span class=\"n\">databases</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"n\">absolute</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"s1\">'data/info.db'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cfg</span><span class=\"o\">.</span><span class=\"n\">databases</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">()</span>\n<span class=\"s1\">'/YOUR_CWD/app/data/info.db'</span>\n</pre>\n<p>Likewise directories can also be parsed by including in the mode the <code>'d'</code>\nflag, e.g. <code>ActionPath(mode='drw')</code>.</p>\n<p>The content of a file that a <cite>.Path</cite> instance references can be read by using\nthe <cite>jsonargparse.Path.get_content</cite> method. For the previous example would be\n<code>info_db = cfg.databases.info.get_content()</code>.</p>\n<p>An argument with <cite>.ActionPath</cite> can be given <code>nargs='+'</code> to parse\nmultiple paths. But it might also be wanted to parse a list of paths found in a\nplain text file or from stdin. For this the <cite>.ActionPathList</cite> is used and\nas argument either the path to a file listing the paths is given or the special\n<code>'-'</code> string for reading the list from stdin. For for example:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">jsonargparse</span> <span class=\"kn\">import</span> <span class=\"n\">ActionPathList</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">add_argument</span><span class=\"p\">(</span><span class=\"s1\">'--list'</span><span class=\"p\">,</span> <span class=\"n\">action</span><span class=\"o\">=</span><span class=\"n\">ActionPathList</span><span class=\"p\">(</span><span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"s1\">'fr'</span><span class=\"p\">))</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cfg</span> <span class=\"o\">=</span> <span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">parse_args</span><span class=\"p\">([</span><span class=\"s1\">'--list'</span><span class=\"p\">,</span> <span class=\"s1\">'paths.lst'</span><span class=\"p\">)</span>  <span class=\"c1\"># Text file with paths</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cfg</span> <span class=\"o\">=</span> <span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">parse_args</span><span class=\"p\">([</span><span class=\"s1\">'--list'</span><span class=\"p\">,</span> <span class=\"s1\">'-'</span><span class=\"p\">)</span>          <span class=\"c1\"># List from stdin</span>\n</pre>\n<p>If <code>nargs='+'</code> is given to <code>add_argument</code> then a single list is\ngenerated including all paths in all lists provided.</p>\n</div>\n<div id=\"parsing-urls\">\n<h2>Parsing URLs</h2>\n<p>The <cite>.ActionPath</cite> and <cite>.ActionPathList</cite> classes also support URLs\nwhich after parsing the <cite>jsonargparse.Path.get_content</cite> can be used to\nperform a GET request to the corresponding URL and retrieve its content. For this\nto work the <em>validators</em> and <em>requests</em> python packages are required which will\nbe installed along with jsonargparse if the <em>all</em> extras requires is chosen:</p>\n<pre>$ pip3 install jsonargparse<span class=\"o\">[</span>all<span class=\"o\">]</span>\n</pre>\n<p>Then the <code>'u'</code> flag can be used to parse URLs. For example if it is\ndesired that an argument can be either a readable file or URL the action would\nbe initialized as <code>ActionPath(mode='fur')</code>. If the value appears to be a\nURL according to <cite>validators.url.url</cite> then a HEAD request would be\ntriggered to check if it is accessible, and if so, the parsing succeeds.</p>\n<p>There is also URL support for functions and classes that load from paths, namely\n<cite>jsonargparse.ArgumentParser.parse_path</cite>,\n<cite>jsonargparse.ArgumentParser.get_defaults</cite> (<code>default_config_files</code>\nargument), <cite>.ActionConfigFile</cite>, <cite>.ActionJsonSchema</cite>,\n<cite>.ActionJsonnet</cite> and <cite>.ActionParser</cite>. This means that for example\nthat a tool that can receive a configuration file via <cite>.ActionConfigFile</cite>\nis able to get the config file from a URL, that is something like the following\nwould work:</p>\n<pre>$ my_tool.py --cfg http://example.com/config.yaml\n</pre>\n</div>\n<div id=\"comparison-operators\">\n<h2>Comparison operators</h2>\n<p>It is quite common that when parsing a number, its range should be limited. To\nease these cases the module includes the <cite>.ActionOperators</cite>. Some\nexamples of arguments that can be added using this action are the following:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">jsonargparse</span> <span class=\"kn\">import</span> <span class=\"n\">ActionOperators</span>\n<span class=\"c1\"># Larger than zero</span>\n<span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">add_argument</span><span class=\"p\">(</span><span class=\"s1\">'--op1'</span><span class=\"p\">,</span> <span class=\"n\">action</span><span class=\"o\">=</span><span class=\"n\">ActionOperators</span><span class=\"p\">(</span><span class=\"n\">expr</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">'&gt;'</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)))</span>\n<span class=\"c1\"># Between 0 and 10</span>\n<span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">add_argument</span><span class=\"p\">(</span><span class=\"s1\">'--op2'</span><span class=\"p\">,</span> <span class=\"n\">action</span><span class=\"o\">=</span><span class=\"n\">ActionOperators</span><span class=\"p\">(</span><span class=\"n\">expr</span><span class=\"o\">=</span><span class=\"p\">[(</span><span class=\"s1\">'&gt;='</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'&lt;='</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)]))</span>\n<span class=\"c1\"># Either larger than zero or 'off' string</span>\n<span class=\"k\">def</span> <span class=\"nf\">int_or_off</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">):</span> <span class=\"k\">return</span> <span class=\"n\">x</span> <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"o\">==</span> <span class=\"s1\">'off'</span> <span class=\"k\">else</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">add_argument</span><span class=\"p\">(</span><span class=\"s1\">'--op3'</span><span class=\"p\">,</span> <span class=\"n\">action</span><span class=\"o\">=</span><span class=\"n\">ActionOperators</span><span class=\"p\">(</span><span class=\"n\">expr</span><span class=\"o\">=</span><span class=\"p\">[(</span><span class=\"s1\">'&gt;'</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'=='</span><span class=\"p\">,</span> <span class=\"s1\">'off'</span><span class=\"p\">)],</span> <span class=\"n\">join</span><span class=\"o\">=</span><span class=\"s1\">'or'</span><span class=\"p\">,</span> <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"n\">int_or_off</span><span class=\"p\">))</span>\n</pre>\n</div>\n<div id=\"boolean-arguments\">\n<h2>Boolean arguments</h2>\n<p>Parsing boolean arguments is very common, however, the original argparse only\nhas a limited support for them, via <code>store_true</code> and <code>store_false</code>.\nFuthermore unexperienced users might mistakenly use <code>type=bool</code> which\nwould not provide the intended behavior.</p>\n<p>With jsonargparse adding an argument with <code>type=bool</code> the intended action\nis implemented. If given as values <code>{'yes', 'true'}</code> or <code>{'no',\n'false'}</code> the corresponding parsed values would be <code>True</code> or\n<code>False</code>. For example:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">add_argument</span><span class=\"p\">(</span><span class=\"s1\">'--op1'</span><span class=\"p\">,</span> <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">add_argument</span><span class=\"p\">(</span><span class=\"s1\">'--op2'</span><span class=\"p\">,</span> <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">parse_args</span><span class=\"p\">([</span><span class=\"s1\">'--op1'</span><span class=\"p\">,</span> <span class=\"s1\">'yes'</span><span class=\"p\">,</span> <span class=\"s1\">'--op2'</span><span class=\"p\">,</span> <span class=\"s1\">'false'</span><span class=\"p\">])</span>\n<span class=\"n\">namespace</span><span class=\"p\">(</span><span class=\"n\">op1</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">op2</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n</pre>\n<p>Sometimes it is also useful to define two paired options, one to set\n<code>True</code> and the other to set <code>False</code>. The <cite>.ActionYesNo</cite> class\nmakes this straightforward. A couple of examples would be:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">jsonargparse</span> <span class=\"kn\">import</span> <span class=\"n\">ActionYesNo</span>\n<span class=\"c1\"># --opt1 for true and --no_opt1 for false.</span>\n<span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">add_argument</span><span class=\"p\">(</span><span class=\"s1\">'--op1'</span><span class=\"p\">,</span> <span class=\"n\">action</span><span class=\"o\">=</span><span class=\"n\">ActionYesNo</span><span class=\"p\">)</span>\n<span class=\"c1\"># --with-opt2 for true and --without-opt2 for false.</span>\n<span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">add_argument</span><span class=\"p\">(</span><span class=\"s1\">'--with-op2'</span><span class=\"p\">,</span> <span class=\"n\">action</span><span class=\"o\">=</span><span class=\"n\">ActionYesNo</span><span class=\"p\">(</span><span class=\"n\">yes_prefix</span><span class=\"o\">=</span><span class=\"s1\">'with-'</span><span class=\"p\">,</span> <span class=\"n\">no_prefix</span><span class=\"o\">=</span><span class=\"s1\">'without-'</span><span class=\"p\">))</span>\n</pre>\n<p>If the <cite>.ActionYesNo</cite> class is used in conjunction with\n<code>nargs='?'</code> the options can also be set by giving as value any of\n<code>{'true', 'yes', 'false', 'no'}</code>.</p>\n</div>\n<div id=\"parsers-as-arguments\">\n<h2>Parsers as arguments</h2>\n<p>As parsers get more complex, being able to define them in a modular way becomes\nimportant. Two mechanisms are available to define parsers in a modular way, both\nexplained in this and the next section respectively.</p>\n<p>Sometimes it is useful to take an already existing parser that is required\nstandalone in some part of the code, and reuse it to parse an inner node of\nanother more complex parser. For these cases an argument can be defined using\nthe <cite>.ActionParser</cite> class. An example of how to use this class is the\nfollowing:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">jsonargparse</span> <span class=\"kn\">import</span> <span class=\"n\">ArgumentParser</span><span class=\"p\">,</span> <span class=\"n\">ActionParser</span>\n<span class=\"n\">inner_parser</span> <span class=\"o\">=</span> <span class=\"n\">ArgumentParser</span><span class=\"p\">(</span><span class=\"n\">prog</span><span class=\"o\">=</span><span class=\"s1\">'app1'</span><span class=\"p\">)</span>\n<span class=\"n\">inner_parser</span><span class=\"o\">.</span><span class=\"n\">add_argument</span><span class=\"p\">(</span><span class=\"s1\">'--op1'</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>\n<span class=\"n\">outer_parser</span> <span class=\"o\">=</span> <span class=\"n\">ArgumentParser</span><span class=\"p\">(</span><span class=\"n\">prog</span><span class=\"o\">=</span><span class=\"s1\">'app2'</span><span class=\"p\">)</span>\n<span class=\"n\">outer_parser</span><span class=\"o\">.</span><span class=\"n\">add_argument</span><span class=\"p\">(</span><span class=\"s1\">'--inner.node'</span><span class=\"p\">,</span>\n    <span class=\"n\">action</span><span class=\"o\">=</span><span class=\"n\">ActionParser</span><span class=\"p\">(</span><span class=\"n\">parser</span><span class=\"o\">=</span><span class=\"n\">inner_parser</span><span class=\"p\">))</span>\n</pre>\n<p>When using the <cite>.ActionParser</cite> class, the value of the node in a config\nfile can be either the complex node itself, or the path to a file which will be\nloaded and parsed with the corresponding inner parser. Naturally using\n<cite>.ActionConfigFile</cite> to parse a complete config file will parse the inner\nnodes correctly.</p>\n<p>From the command line the help of the inner parsers can be shown by calling the\ntool with a prefixed help command, that is, for the example above it would be\n<code>--inner.node.help</code>.</p>\n<p>Regarding environment variables, the prefix of the outer parser will be used to\npopulate the leaf nodes of the inner parser. In the example above, if\n<code>inner_parser</code> is used to parse environment variables, then as normal\n<code>APP1_OP1</code> would be checked to populate option <code>op1</code>. But if\n<code>outer_parser</code> is used, then <code>APP2_INNER__NODE__OP1</code> would be\nchecked to populate <code>inner.node.op1</code>.</p>\n<p>An important detail to note is that the parsers that are given to\n<cite>.ActionParser</cite> are internally modified. So they should be instantiated\nexclusively for the <cite>.ActionParser</cite> and not used standalone.</p>\n</div>\n<div id=\"sub-commands\">\n<h2>Sub-commands</h2>\n<p>A second way to define parsers in a modular way is what in argparse is known as\n<a href=\"https://docs.python.org/3/library/argparse.html#sub-commands\" rel=\"nofollow\">sub-commands</a>.\nHowever, to promote modularity, in jsonargparse sub-commands work a bit\ndifferent than in argparse. To add sub-commands to a parser, the\n<cite>jsonargparse.ArgumentParser.add_subcommands</cite> method is used. Then an\nexisting parser is added as a sub-command using\n<cite>jsonargparse.ActionSubCommands.add_subcommand</cite>. In a parsed config object\nthe sub-command will be stored in the <code>subcommand</code> entry (or whatever\n<code>dest</code> was set to), and the values of the sub-command will be in an entry\nwith the same name as the respective sub-command. An example of defining a\nparser with sub-commands is the following:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">jsonargparse</span> <span class=\"kn\">import</span> <span class=\"n\">ArgumentParser</span>\n<span class=\"o\">...</span>\n<span class=\"n\">parser_subcomm1</span> <span class=\"o\">=</span> <span class=\"n\">ArgumentParser</span><span class=\"p\">()</span>\n<span class=\"n\">parser_subcomm1</span><span class=\"o\">.</span><span class=\"n\">add_argument</span><span class=\"p\">(</span><span class=\"s1\">'--op1'</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>\n<span class=\"n\">parser_subcomm2</span> <span class=\"o\">=</span> <span class=\"n\">ArgumentParser</span><span class=\"p\">()</span>\n<span class=\"n\">parser_subcomm2</span><span class=\"o\">.</span><span class=\"n\">add_argument</span><span class=\"p\">(</span><span class=\"s1\">'--op2'</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>\n<span class=\"n\">parser</span> <span class=\"o\">=</span> <span class=\"n\">ArgumentParser</span><span class=\"p\">(</span><span class=\"n\">prog</span><span class=\"o\">=</span><span class=\"s1\">'app'</span><span class=\"p\">)</span>\n<span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">add_argument</span><span class=\"p\">(</span><span class=\"s1\">'--op0'</span><span class=\"p\">)</span>\n<span class=\"n\">subcommands</span> <span class=\"o\">=</span> <span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">add_subcommands</span><span class=\"p\">()</span>\n<span class=\"n\">subcommands</span><span class=\"o\">.</span><span class=\"n\">add_subcommand</span><span class=\"p\">(</span><span class=\"s1\">'subcomm1'</span><span class=\"p\">,</span> <span class=\"n\">parser_subcomm1</span><span class=\"p\">)</span>\n<span class=\"n\">subcommands</span><span class=\"o\">.</span><span class=\"n\">add_subcommand</span><span class=\"p\">(</span><span class=\"s1\">'subcomm2'</span><span class=\"p\">,</span> <span class=\"n\">parser_subcomm2</span><span class=\"p\">)</span>\n</pre>\n<p>Then some examples of parsing are the following:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">parse_args</span><span class=\"p\">([</span><span class=\"s1\">'subcomm1'</span><span class=\"p\">,</span> <span class=\"s1\">'--op1'</span><span class=\"p\">,</span> <span class=\"s1\">'val1'</span><span class=\"p\">])</span>\n<span class=\"n\">namespace</span><span class=\"p\">(</span><span class=\"n\">op0</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">subcomm1</span><span class=\"o\">=</span><span class=\"n\">namespace</span><span class=\"p\">(</span><span class=\"n\">op1</span><span class=\"o\">=</span><span class=\"s1\">'val1'</span><span class=\"p\">),</span> <span class=\"n\">subcommand</span><span class=\"o\">=</span><span class=\"s1\">'subcomm1'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">parse_args</span><span class=\"p\">([</span><span class=\"s1\">'--op0'</span><span class=\"p\">,</span> <span class=\"s1\">'val0'</span><span class=\"p\">,</span> <span class=\"s1\">'subcomm2'</span><span class=\"p\">,</span> <span class=\"s1\">'--op2'</span><span class=\"p\">,</span> <span class=\"s1\">'val2'</span><span class=\"p\">])</span>\n<span class=\"n\">namespace</span><span class=\"p\">(</span><span class=\"n\">op0</span><span class=\"o\">=</span><span class=\"s1\">'val0'</span><span class=\"p\">,</span> <span class=\"n\">subcomm2</span><span class=\"o\">=</span><span class=\"n\">namespace</span><span class=\"p\">(</span><span class=\"n\">op2</span><span class=\"o\">=</span><span class=\"s1\">'val2'</span><span class=\"p\">),</span> <span class=\"n\">subcommand</span><span class=\"o\">=</span><span class=\"s1\">'subcomm2'</span><span class=\"p\">)</span>\n</pre>\n<p>Parsing config files with <cite>jsonargparse.ArgumentParser.parse_path</cite> or\n<cite>jsonargparse.ArgumentParser.parse_string</cite> is also possible. Though there\ncan only be values for one of the sub-commands. The config file is not required\nto specify a value for <code>subcommand</code>. For the example parser above a valid\nyaml would be:</p>\n<pre><span class=\"c1\"># File: example.yaml</span>\n<span class=\"nt\">op0</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">val0</span>\n<span class=\"nt\">subcomm1</span><span class=\"p\">:</span>\n  <span class=\"nt\">op1</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">val1</span>\n</pre>\n<p>Parsing of environment variables works similar to <cite>.ActionParser</cite>. For\nthe example parser above, all environment variables for <code>subcomm1</code> would\nhave as prefix <code>APP_SUBCOMM1_</code> and likewise for <code>subcomm2</code> as prefix\n<code>APP_SUBCOMM2_</code>. The sub-command to use could be chosen by setting\nenvironment variable <code>APP_SUBCOMMAND</code>.</p>\n</div>\n<div id=\"logging\">\n<h2>Logging</h2>\n<p>The parsers from jsonargparse log some basic events, though by default this is\ndisabled. To enable it the <code>logger</code> argument should be set when creating\nan <cite>.ArgumentParser</cite> object. The intended use is to give as value an\nalready existing logger object which is used for the whole application. Though\nfor convenience to enable a default logger the <code>logger</code> argument can also\nreceive <code>True</code> or a string which sets the name of the logger or a\ndictionary that can include the name and the level, e.g. <code>{\"name\":\n\"myapp\", \"level\": \"ERROR\"}</code>.</p>\n</div>\n<div id=\"contributing\">\n<h2>Contributing</h2>\n<p>Contributions to the jsonargparse package are very welcome, be it just to create\n<a href=\"https://github.com/omni-us/jsonargparse/issues\" rel=\"nofollow\">issues</a> for reporting bugs\nand proposing enhancements, or more directly by creating <a href=\"https://github.com/omni-us/jsonargparse/pulls\" rel=\"nofollow\">pull requests</a>.</p>\n<p>If you intend to work with the source code, note that this project does not\ninclude any <code>requirements.txt</code> file. This is by intention. To make it very\nclear what are the requirements for different use cases, all the requirements of\nthe project are stored in the file <code>setup.cfg</code>. The basic runtime\nrequirements are defined in section <code>[options]</code> in the\n<code>install_requires</code> entry. All optional requirements are stored in section\n<code>[options.extras_require]</code> in the <code>all</code> entry. Also there are\n<code>test</code>, <code>dev</code> and <code>doc</code> entries in the same\n<code>[options.extras_require]</code> section which lists requirements for testing,\ndevelopment and documentation building.</p>\n<p>The recommended way to work with the source code is the following. First clone\nthe repository, then create a virtual environment, activate it and finally\ninstall the development requirements. More precisely the steps would be:</p>\n<pre>git clone https://github.com/omni-us/jsonargparse.git\n<span class=\"nb\">cd</span> jsonargparse\nvirtualenv -p python3 venv\n. venv/bin/activate\n</pre>\n<p>The crucial step is installing the requirements which would be done by running:</p>\n<pre>pip install --editable .<span class=\"o\">[</span>test,dev,doc,all<span class=\"o\">]</span>\n</pre>\n</div>\n\n          </div>"}, "last_serial": 7185702, "releases": {"2.0.0": [{"comment_text": "", "digests": {"md5": "3a74c7ce03ba25c1ac360c96482efdd9", "sha256": "6070a2f5f83ad542936495fc5862959ae10cfc44050b307977d566e0df978adb"}, "downloads": -1, "filename": "jsonargparse-2.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "3a74c7ce03ba25c1ac360c96482efdd9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 20557, "upload_time": "2019-08-26T16:36:38", "upload_time_iso_8601": "2019-08-26T16:36:38.198644Z", "url": "https://files.pythonhosted.org/packages/54/9f/0e9d2c372212dd7a9c061dc5a1b168cbd1747cc4f6664ce8668cbe20f20e/jsonargparse-2.0.0-py3-none-any.whl", "yanked": false}], "2.1.0": [{"comment_text": "", "digests": {"md5": "52644611d974c21405744adf6c5eadde", "sha256": "7892130a64e7c9236c3fb244c7de30d24a41f1820a7683d9995895c7b1582cd5"}, "downloads": -1, "filename": "jsonargparse-2.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "52644611d974c21405744adf6c5eadde", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 21532, "upload_time": "2019-08-27T06:07:29", "upload_time_iso_8601": "2019-08-27T06:07:29.610022Z", "url": "https://files.pythonhosted.org/packages/75/1c/1024001ca903a5e2d68e9d80756e23b3785e0eee46fb17523cc7b3c9ea80/jsonargparse-2.1.0-py3-none-any.whl", "yanked": false}], "2.1.1": [{"comment_text": "", "digests": {"md5": "7030a1fc38751f1187ec78dedd3dda5d", "sha256": "ae804120bfd6b626e82c1ccb940805175c2d3138aafcf97635823bdfd08dc5a3"}, "downloads": -1, "filename": "jsonargparse-2.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "7030a1fc38751f1187ec78dedd3dda5d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 21557, "upload_time": "2019-08-31T05:59:32", "upload_time_iso_8601": "2019-08-31T05:59:32.639248Z", "url": "https://files.pythonhosted.org/packages/8d/f3/517d267a8d189d038ee0a7472003ebe0882c781f3c2520b3689fbd1c4fa3/jsonargparse-2.1.1-py3-none-any.whl", "yanked": false}], "2.10.1": [{"comment_text": "", "digests": {"md5": "b3626d65f56a52e90326291bac3e9686", "sha256": "a828cd091ac86c4487225683248ba2d1e8bd882aa1972010bbd1d919a4ba47ec"}, "downloads": -1, "filename": "jsonargparse-2.10.1-py3-none-any.whl", "has_sig": false, "md5_digest": "b3626d65f56a52e90326291bac3e9686", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 25741, "upload_time": "2019-11-13T10:37:43", "upload_time_iso_8601": "2019-11-13T10:37:43.581920Z", "url": "https://files.pythonhosted.org/packages/3d/61/a9f828e0a37d9e7ae6ac9cd80da7924ef23a4558aeedbf7f940c4351e56c/jsonargparse-2.10.1-py3-none-any.whl", "yanked": false}], "2.11.0": [{"comment_text": "", "digests": {"md5": "12853350d0e7385e5cc9eddec65e898d", "sha256": "36c001d34bf308a50bd6c0642448723c30c12fc10dfd9caf0f5cbbf04077de79"}, "downloads": -1, "filename": "jsonargparse-2.11.0-py3-none-any.whl", "has_sig": false, "md5_digest": "12853350d0e7385e5cc9eddec65e898d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 25769, "upload_time": "2019-11-22T08:27:20", "upload_time_iso_8601": "2019-11-22T08:27:20.436208Z", "url": "https://files.pythonhosted.org/packages/c1/77/36edec5cd3e3ce2ea3da4d3e24daec5fdd9253db2e0e9a7377c76407062f/jsonargparse-2.11.0-py3-none-any.whl", "yanked": false}], "2.12.0": [{"comment_text": "", "digests": {"md5": "dcc38edcec8a6391381bdb9b26d02a04", "sha256": "05036c8d52615ca060e1adc50387fb83d57c9be137f12b619d88f53b25270c14"}, "downloads": -1, "filename": "jsonargparse-2.12.0-py3-none-any.whl", "has_sig": false, "md5_digest": "dcc38edcec8a6391381bdb9b26d02a04", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 25862, "upload_time": "2019-11-30T10:08:21", "upload_time_iso_8601": "2019-11-30T10:08:21.566658Z", "url": "https://files.pythonhosted.org/packages/6f/f9/17ae0f1c80f15f63f216d91f4b4b3ab263ee20e91ef2cdad6df85b2a5015/jsonargparse-2.12.0-py3-none-any.whl", "yanked": false}], "2.13.0": [{"comment_text": "", "digests": {"md5": "84b2d3880b120ba73ab8c4d159eac484", "sha256": "71ae701a77322867559099d7fa7282d9d138323af7b5fb541094fd09ef9a4d17"}, "downloads": -1, "filename": "jsonargparse-2.13.0-py3-none-any.whl", "has_sig": false, "md5_digest": "84b2d3880b120ba73ab8c4d159eac484", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 26083, "upload_time": "2019-12-06T07:26:02", "upload_time_iso_8601": "2019-12-06T07:26:02.840302Z", "url": "https://files.pythonhosted.org/packages/0e/13/5f3c904faabd87b3b877a47f280a2841de3936ff5d3860bd888ace3fbec9/jsonargparse-2.13.0-py3-none-any.whl", "yanked": false}], "2.13.1": [{"comment_text": "", "digests": {"md5": "d7c54d5776a0e9778c74609429f66c9b", "sha256": "fbf58f8d96c857778887bf552267b4b86071dbbe94cfc34f3584857c316b0a0f"}, "downloads": -1, "filename": "jsonargparse-2.13.1-py3-none-any.whl", "has_sig": false, "md5_digest": "d7c54d5776a0e9778c74609429f66c9b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 26197, "upload_time": "2019-12-06T22:58:51", "upload_time_iso_8601": "2019-12-06T22:58:51.947845Z", "url": "https://files.pythonhosted.org/packages/4e/af/09ecabf3a2b1fb9f61b0e150a7b596278032aae577d1c8bc238b222e510f/jsonargparse-2.13.1-py3-none-any.whl", "yanked": false}], "2.14.0": [{"comment_text": "", "digests": {"md5": "c25a7da482c8692175fd0ea756a41999", "sha256": "6d363f77f7b1e04faaf273e94a8f6b24c29a09c7ec8f7ecde4f61c5e52ad2283"}, "downloads": -1, "filename": "jsonargparse-2.14.0-py3-none-any.whl", "has_sig": false, "md5_digest": "c25a7da482c8692175fd0ea756a41999", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 25694, "upload_time": "2019-12-09T07:42:05", "upload_time_iso_8601": "2019-12-09T07:42:05.282572Z", "url": "https://files.pythonhosted.org/packages/e3/25/8a2de77ddc051541e6b9b488b67dccd9da679cabf92137fc62f4e86c7a01/jsonargparse-2.14.0-py3-none-any.whl", "yanked": false}], "2.14.1": [{"comment_text": "", "digests": {"md5": "a074cf9d93bb779d28d2bb9a1dead2ca", "sha256": "aa2a478b88668e83e1879d923719b5d7095ffca789eeaedf26ebc2d9ac72f61e"}, "downloads": -1, "filename": "jsonargparse-2.14.1-py3-none-any.whl", "has_sig": false, "md5_digest": "a074cf9d93bb779d28d2bb9a1dead2ca", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 25912, "upload_time": "2019-12-10T06:50:46", "upload_time_iso_8601": "2019-12-10T06:50:46.024978Z", "url": "https://files.pythonhosted.org/packages/c1/bb/89358d8e78876e2a925fb027186dfb03447aab1610d225f2dc69cca4f6b9/jsonargparse-2.14.1-py3-none-any.whl", "yanked": false}], "2.14.2": [{"comment_text": "", "digests": {"md5": "90794a226714df5de34647bbd5ca226c", "sha256": "08b76120873fb580fc5e4cc1d419e9d840fc2a3f4c13a9ecdc3321c8f7c0e667"}, "downloads": -1, "filename": "jsonargparse-2.14.2-py3-none-any.whl", "has_sig": false, "md5_digest": "90794a226714df5de34647bbd5ca226c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 25925, "upload_time": "2019-12-10T12:11:28", "upload_time_iso_8601": "2019-12-10T12:11:28.285311Z", "url": "https://files.pythonhosted.org/packages/06/92/7fea8ae143b29427e5dc983364717f5aa83ccbd958e5e85ba0259a2119f8/jsonargparse-2.14.2-py3-none-any.whl", "yanked": false}], "2.14.3": [{"comment_text": "", "digests": {"md5": "2eebf40e2ca3754f5b62ddb78416f351", "sha256": "4bb86aa5c3fd87c30d37546e7a99f9399b110dc3094ecec79fc0869d4e9ca2aa"}, "downloads": -1, "filename": "jsonargparse-2.14.3-py3-none-any.whl", "has_sig": false, "md5_digest": "2eebf40e2ca3754f5b62ddb78416f351", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 25988, "upload_time": "2019-12-11T07:29:06", "upload_time_iso_8601": "2019-12-11T07:29:06.929770Z", "url": "https://files.pythonhosted.org/packages/48/1e/592837cc6a2f8d47af2a465d8b26e4a004f633a4954171ceb4c396497d35/jsonargparse-2.14.3-py3-none-any.whl", "yanked": false}], "2.15.0": [{"comment_text": "", "digests": {"md5": "e70ec4032b5e83a0b39244705a46a8fc", "sha256": "bd586c1bed9a0968204db4351bf7f2b158f341d301571805b155952f6d952bc5"}, "downloads": -1, "filename": "jsonargparse-2.15.0-py3-none-any.whl", "has_sig": false, "md5_digest": "e70ec4032b5e83a0b39244705a46a8fc", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 26317, "upload_time": "2019-12-12T07:55:00", "upload_time_iso_8601": "2019-12-12T07:55:00.667525Z", "url": "https://files.pythonhosted.org/packages/95/05/881d57fb939c1b913c4e4366ce685728d8e84522d1b508e53c25b0ac0b63/jsonargparse-2.15.0-py3-none-any.whl", "yanked": false}], "2.16.0": [{"comment_text": "", "digests": {"md5": "3b3b7df9a6904ba5f88b961d7be993af", "sha256": "ab0d108cf45367a649222ac6f8f07b6ce1ca5de34b6ad3b2a5e5b2dc28d17d3e"}, "downloads": -1, "filename": "jsonargparse-2.16.0-py3-none-any.whl", "has_sig": false, "md5_digest": "3b3b7df9a6904ba5f88b961d7be993af", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 26836, "upload_time": "2019-12-16T19:48:03", "upload_time_iso_8601": "2019-12-16T19:48:03.917212Z", "url": "https://files.pythonhosted.org/packages/42/0c/20ec5abb63e91d3f8e167ba6ed93e0ff1f3c873ffda191aa3a99f887f4d6/jsonargparse-2.16.0-py3-none-any.whl", "yanked": false}], "2.17.0": [{"comment_text": "", "digests": {"md5": "0e47f90f5ad1033fedaf5eea68199a36", "sha256": "bc1d071b3a61a01313953d1cf8205bd0494ea0f5c286144c62b7c73d89cd88ed"}, "downloads": -1, "filename": "jsonargparse-2.17.0-py3-none-any.whl", "has_sig": false, "md5_digest": "0e47f90f5ad1033fedaf5eea68199a36", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 26850, "upload_time": "2019-12-18T08:29:44", "upload_time_iso_8601": "2019-12-18T08:29:44.492483Z", "url": "https://files.pythonhosted.org/packages/ae/24/5d20ed841f4ce3e0efd5aa2615591adea9b4cd16a150372a790d4a0ebd2e/jsonargparse-2.17.0-py3-none-any.whl", "yanked": false}], "2.18.0": [{"comment_text": "", "digests": {"md5": "825ec2d600d71f7721b5087da21c08fc", "sha256": "f4f7a00f772ebf5f5e7369fe133649edd98cf071507dc145a82722eb6be58f5b"}, "downloads": -1, "filename": "jsonargparse-2.18.0-py3-none-any.whl", "has_sig": false, "md5_digest": "825ec2d600d71f7721b5087da21c08fc", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 26884, "upload_time": "2019-12-20T08:37:50", "upload_time_iso_8601": "2019-12-20T08:37:50.838785Z", "url": "https://files.pythonhosted.org/packages/62/f0/b5353d0bd5f08e9f754b137f51645b01dc3c95d61e226cbe1f951a5b6787/jsonargparse-2.18.0-py3-none-any.whl", "yanked": false}], "2.19.0": [{"comment_text": "", "digests": {"md5": "06ea7b49eeb95fff1a726e816516cf3a", "sha256": "9b0ec611d1482b26c016f1c82f48476ad52e320df2cc87cebe466742ff84fd78"}, "downloads": -1, "filename": "jsonargparse-2.19.0-py3-none-any.whl", "has_sig": false, "md5_digest": "06ea7b49eeb95fff1a726e816516cf3a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 27013, "upload_time": "2019-12-22T13:49:02", "upload_time_iso_8601": "2019-12-22T13:49:02.017037Z", "url": "https://files.pythonhosted.org/packages/2a/39/f2e7f2c9a86fca818f5dcee7d467cb778d34f64ecfd338557676fa1b3dd3/jsonargparse-2.19.0-py3-none-any.whl", "yanked": false}], "2.2.1": [{"comment_text": "", "digests": {"md5": "7e9d067d04d87549b4282e2bd25fe542", "sha256": "f50d3e3001db207e25576e58e2e4f48ed63bd2831005c7d26676b548bed83b59"}, "downloads": -1, "filename": "jsonargparse-2.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "7e9d067d04d87549b4282e2bd25fe542", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 23244, "upload_time": "2019-09-02T06:20:03", "upload_time_iso_8601": "2019-09-02T06:20:03.756298Z", "url": "https://files.pythonhosted.org/packages/cf/84/dff5b43d35ac2aae5d0c65047c4bb9e3ad1d0d5a58040afd26d659921188/jsonargparse-2.2.1-py3-none-any.whl", "yanked": false}], "2.20.0": [{"comment_text": "", "digests": {"md5": "3addcc85411c7355441c089bde3f0c0f", "sha256": "4f1ffc0eb4950e5a90052d95cd8e00f70871bdeb2ef82fb12d8c9d84eaf9a7fb"}, "downloads": -1, "filename": "jsonargparse-2.20.0-py3-none-any.whl", "has_sig": false, "md5_digest": "3addcc85411c7355441c089bde3f0c0f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 27047, "upload_time": "2020-01-09T17:10:39", "upload_time_iso_8601": "2020-01-09T17:10:39.675191Z", "url": "https://files.pythonhosted.org/packages/33/0b/6d28df0dc89a631b8eb1a0a16791c9dc110bb9a5e8c7f41b01d75a5c1cca/jsonargparse-2.20.0-py3-none-any.whl", "yanked": false}], "2.21.0": [{"comment_text": "", "digests": {"md5": "063ebedbb72e16725777d1f1637d382e", "sha256": "2aafb7f4d2e5b021acb85332b57fa35224f5e07c5b7b98c77a1d05c6611b638d"}, "downloads": -1, "filename": "jsonargparse-2.21.0-py3-none-any.whl", "has_sig": false, "md5_digest": "063ebedbb72e16725777d1f1637d382e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 27308, "upload_time": "2020-01-16T18:14:08", "upload_time_iso_8601": "2020-01-16T18:14:08.391382Z", "url": "https://files.pythonhosted.org/packages/27/bd/1c72fdb3df7be72d1be0b140f9f37d529ef4956da2045981a9b3685160c3/jsonargparse-2.21.0-py3-none-any.whl", "yanked": false}], "2.22.0": [{"comment_text": "", "digests": {"md5": "516541caf40277024703bae8c545c934", "sha256": "ba9e692f7dd3e1a1e1e888a6caadf7b59334d4e062819c4df68c2cb531cb96ef"}, "downloads": -1, "filename": "jsonargparse-2.22.0-py3-none-any.whl", "has_sig": false, "md5_digest": "516541caf40277024703bae8c545c934", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 28643, "upload_time": "2020-01-21T17:38:32", "upload_time_iso_8601": "2020-01-21T17:38:32.597409Z", "url": "https://files.pythonhosted.org/packages/2f/3d/ecc2734fa54eaf94466c6306aac64494b7d38f29411f552d6f5aa5e1c063/jsonargparse-2.22.0-py3-none-any.whl", "yanked": false}], "2.22.1": [{"comment_text": "", "digests": {"md5": "b555513bd123d65012443876513a905b", "sha256": "e43454cab16c119e27023d52f62dc9afba11cc7d6f90f03044e7727abee16789"}, "downloads": -1, "filename": "jsonargparse-2.22.1-py3-none-any.whl", "has_sig": false, "md5_digest": "b555513bd123d65012443876513a905b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 29853, "upload_time": "2020-01-24T07:47:09", "upload_time_iso_8601": "2020-01-24T07:47:09.213308Z", "url": "https://files.pythonhosted.org/packages/14/df/d8025be5bf49c837836086a4bde4a98d63dd11dcd43e5a95e4b7b01f2796/jsonargparse-2.22.1-py3-none-any.whl", "yanked": false}], "2.22.2": [{"comment_text": "", "digests": {"md5": "a62a6f942b1115f9a6ab7f9ebc2a11f8", "sha256": "ce8ffbc4cf94775b67c81e469a833dfeb14c549e4f4cd9398f65ecc5c42ce5f5"}, "downloads": -1, "filename": "jsonargparse-2.22.2-py3-none-any.whl", "has_sig": false, "md5_digest": "a62a6f942b1115f9a6ab7f9ebc2a11f8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 30421, "upload_time": "2020-01-26T20:14:40", "upload_time_iso_8601": "2020-01-26T20:14:40.486789Z", "url": "https://files.pythonhosted.org/packages/50/3c/c064cee553e769f7f8634489b9667b21bc76240e587f94b7b2096249277c/jsonargparse-2.22.2-py3-none-any.whl", "yanked": false}], "2.23.0": [{"comment_text": "", "digests": {"md5": "e6a177d464f54b44b1856c98481c1cfe", "sha256": "ebb205a50b6b929668ee3910c467777f62f979809d7b618d61931d33d31bfc09"}, "downloads": -1, "filename": "jsonargparse-2.23.0-py3-none-any.whl", "has_sig": false, "md5_digest": "e6a177d464f54b44b1856c98481c1cfe", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 31111, "upload_time": "2020-01-29T11:08:34", "upload_time_iso_8601": "2020-01-29T11:08:34.840941Z", "url": "https://files.pythonhosted.org/packages/2c/6b/adbde4dfd1e22df652ceaa9b30feb31dc8132e9d181f25847d2d884ff88e/jsonargparse-2.23.0-py3-none-any.whl", "yanked": false}], "2.23.1": [{"comment_text": "", "digests": {"md5": "4acce7e60c0d6eea3846ed26290e7e72", "sha256": "5dca16f7d70b2ae009bdbdaff42c855443dd85d4ecaa939a228fef1167096443"}, "downloads": -1, "filename": "jsonargparse-2.23.1-py3-none-any.whl", "has_sig": false, "md5_digest": "4acce7e60c0d6eea3846ed26290e7e72", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 31089, "upload_time": "2020-01-30T09:35:57", "upload_time_iso_8601": "2020-01-30T09:35:57.056104Z", "url": "https://files.pythonhosted.org/packages/7d/ee/92a8229829c4a39ee23541bd2f3c2f7f53edc87057349bef6b12941d5942/jsonargparse-2.23.1-py3-none-any.whl", "yanked": false}], "2.23.2": [{"comment_text": "", "digests": {"md5": "d0f3754aded3f6c7f9f4a09988654c5b", "sha256": "8f05c886a7d00bcc940bde765c83b49a1d01357d93f5ea0e7afd3e494dcab3fc"}, "downloads": -1, "filename": "jsonargparse-2.23.2-py3-none-any.whl", "has_sig": false, "md5_digest": "d0f3754aded3f6c7f9f4a09988654c5b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 31382, "upload_time": "2020-02-08T10:38:02", "upload_time_iso_8601": "2020-02-08T10:38:02.294595Z", "url": "https://files.pythonhosted.org/packages/5a/1b/de1bcdf222a674e0daba674803aa8caf7ed01133f421c411336da89d76ac/jsonargparse-2.23.2-py3-none-any.whl", "yanked": false}], "2.23.3": [{"comment_text": "", "digests": {"md5": "f95b91148bb7bac3f0683c4802d31aba", "sha256": "f73e8daaf950b004fee756e661111ccba481759ac47c1034b1abaab8ff1f86ab"}, "downloads": -1, "filename": "jsonargparse-2.23.3-py3-none-any.whl", "has_sig": false, "md5_digest": "f95b91148bb7bac3f0683c4802d31aba", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 31447, "upload_time": "2020-02-10T13:00:57", "upload_time_iso_8601": "2020-02-10T13:00:57.615014Z", "url": "https://files.pythonhosted.org/packages/89/5f/e6713da5ced6f878166f1dd804fe1ea6c68504721c47ea8bca3bea9fa15c/jsonargparse-2.23.3-py3-none-any.whl", "yanked": false}], "2.23.4": [{"comment_text": "", "digests": {"md5": "a7c2009ba1cd2467157039c9462f5ace", "sha256": "50aa8856b580e45a0298b99f87f50f6de35ed3347268f74480d4ebd628ad2402"}, "downloads": -1, "filename": "jsonargparse-2.23.4-py3-none-any.whl", "has_sig": false, "md5_digest": "a7c2009ba1cd2467157039c9462f5ace", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 31495, "upload_time": "2020-02-12T15:01:34", "upload_time_iso_8601": "2020-02-12T15:01:34.137591Z", "url": "https://files.pythonhosted.org/packages/25/8c/c4c2d62208e5262df6956d7e17a777b7a4dc6a43eb5e807cbfa0b9956f99/jsonargparse-2.23.4-py3-none-any.whl", "yanked": false}], "2.23.5": [{"comment_text": "", "digests": {"md5": "4bd0c3b5e51527724ff3084b774daedd", "sha256": "9fcab7ecccf54f0c1ef7828f9d941bce2fab8acfcf226211f1d06bedc5ae642e"}, "downloads": -1, "filename": "jsonargparse-2.23.5-py3-none-any.whl", "has_sig": false, "md5_digest": "4bd0c3b5e51527724ff3084b774daedd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 31769, "upload_time": "2020-02-19T17:31:41", "upload_time_iso_8601": "2020-02-19T17:31:41.028976Z", "url": "https://files.pythonhosted.org/packages/38/61/9d54ce7da7ec5f2e177fe62941a0da0b938454270bc083a06dede2b366b0/jsonargparse-2.23.5-py3-none-any.whl", "yanked": false}], "2.24.0": [{"comment_text": "", "digests": {"md5": "7953b520cd0c822cfb2903a733f2ecd0", "sha256": "07c823399f65236ec448a23f37c8403cb94b7df217cc2b816dfdb6f1b1059d76"}, "downloads": -1, "filename": "jsonargparse-2.24.0-py3-none-any.whl", "has_sig": false, "md5_digest": "7953b520cd0c822cfb2903a733f2ecd0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 33493, "upload_time": "2020-02-26T07:28:34", "upload_time_iso_8601": "2020-02-26T07:28:34.608852Z", "url": "https://files.pythonhosted.org/packages/4b/ac/72b7cb5c3538be1646718942ccae457a534bbdf33364d7c5e8719811c24a/jsonargparse-2.24.0-py3-none-any.whl", "yanked": false}], "2.24.1": [{"comment_text": "", "digests": {"md5": "0926cbd9fe2f8b864319d2945b253bc6", "sha256": "bedb4f2e4c8c3547d1db80d30c435fd3e46228f7c3f20811f74fba86c398b881"}, "downloads": -1, "filename": "jsonargparse-2.24.1-py3-none-any.whl", "has_sig": false, "md5_digest": "0926cbd9fe2f8b864319d2945b253bc6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 33542, "upload_time": "2020-02-28T08:52:03", "upload_time_iso_8601": "2020-02-28T08:52:03.560613Z", "url": "https://files.pythonhosted.org/packages/9f/82/2a5ad4fa34100508dcab07f24010c12fcda34c259f2d3e87ac9dc30e57bb/jsonargparse-2.24.1-py3-none-any.whl", "yanked": false}], "2.25.0": [{"comment_text": "", "digests": {"md5": "1301d427350e72cfc99e5be29d0d3df4", "sha256": "64e0b613721b5dd55ba3e1592beda5cd294cd7f6ca3dba9c755adac2a74c0745"}, "downloads": -1, "filename": "jsonargparse-2.25.0-py3-none-any.whl", "has_sig": false, "md5_digest": "1301d427350e72cfc99e5be29d0d3df4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 36285, "upload_time": "2020-03-02T07:58:20", "upload_time_iso_8601": "2020-03-02T07:58:20.047009Z", "url": "https://files.pythonhosted.org/packages/57/b9/4f5198eb28c34f904b78e44cd48c90f45c8f75e295b2e26b48fcf6a060b0/jsonargparse-2.25.0-py3-none-any.whl", "yanked": false}], "2.25.1": [{"comment_text": "", "digests": {"md5": "96e25b42dc0b54eaa3ce9dd808de3de9", "sha256": "c4ab7bb3e5990d5c9b514750930e590b6cd9512e0dddda3db84d2ef5018f51b8"}, "downloads": -1, "filename": "jsonargparse-2.25.1-py3-none-any.whl", "has_sig": false, "md5_digest": "96e25b42dc0b54eaa3ce9dd808de3de9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 36459, "upload_time": "2020-03-04T15:05:19", "upload_time_iso_8601": "2020-03-04T15:05:19.147771Z", "url": "https://files.pythonhosted.org/packages/12/89/b23ab182dcdb5046954134f50b847e234c8c695f404078566a860ccafc9d/jsonargparse-2.25.1-py3-none-any.whl", "yanked": false}], "2.25.2": [{"comment_text": "", "digests": {"md5": "4edf6ecf7119678cc63bfaff802f6e17", "sha256": "6c1461b4af8d0bb5178589cedb105f6e61d5097db0624d11b79684b172a6a587"}, "downloads": -1, "filename": "jsonargparse-2.25.2-py3-none-any.whl", "has_sig": false, "md5_digest": "4edf6ecf7119678cc63bfaff802f6e17", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 36480, "upload_time": "2020-03-10T12:48:24", "upload_time_iso_8601": "2020-03-10T12:48:24.890395Z", "url": "https://files.pythonhosted.org/packages/1b/2e/74129a56e1d17261463efcafa13505dbfffa2bd1003f682e820727678ff2/jsonargparse-2.25.2-py3-none-any.whl", "yanked": false}], "2.25.3": [{"comment_text": "", "digests": {"md5": "fac035b8042c91f5fb09b098940cb28c", "sha256": "0dd7cd919d6124b76d496d45f4ad833464577c37d13989016e53ae3fce1731a9"}, "downloads": -1, "filename": "jsonargparse-2.25.3-py3-none-any.whl", "has_sig": false, "md5_digest": "fac035b8042c91f5fb09b098940cb28c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 36658, "upload_time": "2020-04-03T07:27:19", "upload_time_iso_8601": "2020-04-03T07:27:19.936178Z", "url": "https://files.pythonhosted.org/packages/6d/cc/b5308e4a1f7354f6409e32d2a12de84f6be0d424881ba477a2f05dd20821/jsonargparse-2.25.3-py3-none-any.whl", "yanked": false}], "2.25.4": [{"comment_text": "", "digests": {"md5": "ea4e87cb93b9a6d438c8925a1aec7fa7", "sha256": "44007dae9f5afdbf20f2d0ba92ed6923471cc7d2033b9f6c9b779a2d4bf8fc32"}, "downloads": -1, "filename": "jsonargparse-2.25.4-py3-none-any.whl", "has_sig": false, "md5_digest": "ea4e87cb93b9a6d438c8925a1aec7fa7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 36768, "upload_time": "2020-04-21T05:43:46", "upload_time_iso_8601": "2020-04-21T05:43:46.504860Z", "url": "https://files.pythonhosted.org/packages/7c/f2/7804910d1e3ec8b425b5a5346b5fb7e726de123e8fc93b061ae024d462e5/jsonargparse-2.25.4-py3-none-any.whl", "yanked": false}], "2.26.0": [{"comment_text": "", "digests": {"md5": "6261d5499dbe77371ea6f962310f9993", "sha256": "ca4f4754e32e1ad475e78e4f4eb151762f9892428d2e1556ce01910269217840"}, "downloads": -1, "filename": "jsonargparse-2.26.0-py3-none-any.whl", "has_sig": false, "md5_digest": "6261d5499dbe77371ea6f962310f9993", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 36695, "upload_time": "2020-04-23T06:20:35", "upload_time_iso_8601": "2020-04-23T06:20:35.024471Z", "url": "https://files.pythonhosted.org/packages/de/bf/38eab2457540c676a907716dc86d50932f18470721f01e6cea6aee941b85/jsonargparse-2.26.0-py3-none-any.whl", "yanked": false}], "2.26.1": [{"comment_text": "", "digests": {"md5": "be8fa350b2525f77044a865298ec2390", "sha256": "5cdbeaf77113f5834e8c2a2a60bab0209296b248a967d9f9af388c779255e2fc"}, "downloads": -1, "filename": "jsonargparse-2.26.1-py3-none-any.whl", "has_sig": false, "md5_digest": "be8fa350b2525f77044a865298ec2390", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 36750, "upload_time": "2020-04-23T13:47:02", "upload_time_iso_8601": "2020-04-23T13:47:02.343583Z", "url": "https://files.pythonhosted.org/packages/53/4c/27000468b3895a24bf77d2cdae8c0b8f4fed3fbab319c7036a6ad6670d1e/jsonargparse-2.26.1-py3-none-any.whl", "yanked": false}], "2.27.0": [{"comment_text": "", "digests": {"md5": "d786e38b10798902e41acbf2bd7f0a2a", "sha256": "64b17b46d49f7e6f451ffbd5d2dc20edc5f112ee29458ff6baeb0182c0037a83"}, "downloads": -1, "filename": "jsonargparse-2.27.0-py3-none-any.whl", "has_sig": false, "md5_digest": "d786e38b10798902e41acbf2bd7f0a2a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 36777, "upload_time": "2020-04-26T18:41:13", "upload_time_iso_8601": "2020-04-26T18:41:13.735305Z", "url": "https://files.pythonhosted.org/packages/e3/e0/3b4ce2e93904885f237c20dab16a1a9d4454cf70e8ba9350a193a49e1ed1/jsonargparse-2.27.0-py3-none-any.whl", "yanked": false}], "2.28.0": [{"comment_text": "", "digests": {"md5": "2aa80d97d8b669bb71d9c50041710c54", "sha256": "a4d598a46c558def6ebf938cc61161f52f92ba88963e19e427f808d8f8dd79bd"}, "downloads": -1, "filename": "jsonargparse-2.28.0-py3-none-any.whl", "has_sig": false, "md5_digest": "2aa80d97d8b669bb71d9c50041710c54", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 36938, "upload_time": "2020-05-04T06:42:40", "upload_time_iso_8601": "2020-05-04T06:42:40.648277Z", "url": "https://files.pythonhosted.org/packages/97/fb/bfdb1c902ab6215b348b4975391f342b57066592805df114f7b7e2edb380/jsonargparse-2.28.0-py3-none-any.whl", "yanked": false}], "2.29.0": [{"comment_text": "", "digests": {"md5": "81c73f38ec66e7cd195f7062d2bd7e43", "sha256": "04cd99b519c8e95d35d8ac957b0f3a564eacd672b0e3b561418268e26674cd61"}, "downloads": -1, "filename": "jsonargparse-2.29.0-py3-none-any.whl", "has_sig": false, "md5_digest": "81c73f38ec66e7cd195f7062d2bd7e43", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 37033, "upload_time": "2020-05-07T06:11:01", "upload_time_iso_8601": "2020-05-07T06:11:01.556203Z", "url": "https://files.pythonhosted.org/packages/ef/6d/50c0579ca4811453ec246ac53e382220115ecf20661af3ac90e179c4a3d4/jsonargparse-2.29.0-py3-none-any.whl", "yanked": false}], "2.3.0": [{"comment_text": "", "digests": {"md5": "568a34fc9c16fe0f6276690939e3b978", "sha256": "7f1fb53f76073b59420cfe54eeed1f9007a0fa0fe7b5ac82635319d5e1b44ff1"}, "downloads": -1, "filename": "jsonargparse-2.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "568a34fc9c16fe0f6276690939e3b978", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 23549, "upload_time": "2019-09-06T04:58:25", "upload_time_iso_8601": "2019-09-06T04:58:25.759614Z", "url": "https://files.pythonhosted.org/packages/50/dd/d587b901fdd8c241bf56d72cdc53b791ecad35c8cdc1027e645aa5f16304/jsonargparse-2.3.0-py3-none-any.whl", "yanked": false}], "2.4.0": [{"comment_text": "", "digests": {"md5": "51db996c51b9737f5f97ecebdc5a54e3", "sha256": "fccee36dc606a991266113c8da6585447c568281d9d8b60d57dfa328be12caba"}, "downloads": -1, "filename": "jsonargparse-2.4.0-py3-none-any.whl", "has_sig": false, "md5_digest": "51db996c51b9737f5f97ecebdc5a54e3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 23660, "upload_time": "2019-09-06T08:35:16", "upload_time_iso_8601": "2019-09-06T08:35:16.890304Z", "url": "https://files.pythonhosted.org/packages/21/0e/86f858674788b8c731301b346dabc61ff0f77c729dca133d51564ca93ec1/jsonargparse-2.4.0-py3-none-any.whl", "yanked": false}], "2.4.1": [{"comment_text": "", "digests": {"md5": "f95de4980a68a305172e121f602d24eb", "sha256": "1b905b720453467ede682c7169ccfd99cf96e330c413d33d2e2c4b69fd9a3493"}, "downloads": -1, "filename": "jsonargparse-2.4.1-py3-none-any.whl", "has_sig": false, "md5_digest": "f95de4980a68a305172e121f602d24eb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 23657, "upload_time": "2019-09-06T09:49:16", "upload_time_iso_8601": "2019-09-06T09:49:16.271117Z", "url": "https://files.pythonhosted.org/packages/f6/86/a9eb63976dd07a5ed17959da6cfe7e17561ad642b6a513cf4e5ac8cb81fa/jsonargparse-2.4.1-py3-none-any.whl", "yanked": false}], "2.5.0": [{"comment_text": "", "digests": {"md5": "54d446b6d04b54963f9dc28f35db6c56", "sha256": "c208577b1fec1ac4b76c8b56f2322fa68c756f3940c206ed33842fb26f535c44"}, "downloads": -1, "filename": "jsonargparse-2.5.0-py3-none-any.whl", "has_sig": false, "md5_digest": "54d446b6d04b54963f9dc28f35db6c56", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 24352, "upload_time": "2019-09-13T04:39:34", "upload_time_iso_8601": "2019-09-13T04:39:34.371296Z", "url": "https://files.pythonhosted.org/packages/4f/25/997cefd4857ea4b7cc699de17e54ebcfc914553843ddb6b36033cd255031/jsonargparse-2.5.0-py3-none-any.whl", "yanked": false}], "2.6.0": [{"comment_text": "", "digests": {"md5": "86f2ce071f256b78a169332d40f3abd6", "sha256": "11a8b187fa47fb65637259f7767ad47de7b47e9614bf9b24d203aa6661ce166f"}, "downloads": -1, "filename": "jsonargparse-2.6.0-py3-none-any.whl", "has_sig": false, "md5_digest": "86f2ce071f256b78a169332d40f3abd6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 25307, "upload_time": "2019-09-14T09:42:38", "upload_time_iso_8601": "2019-09-14T09:42:38.657355Z", "url": "https://files.pythonhosted.org/packages/f2/a9/3ca6e3bcd025f578c506368e3db17c88c7e878717c69525408602fe03968/jsonargparse-2.6.0-py3-none-any.whl", "yanked": false}], "2.6.1": [{"comment_text": "", "digests": {"md5": "8a3abd1519a2a6ee930ebb7f2a38d8bb", "sha256": "8171411ef0b9554adc7f4af2aea242d5a7b05c9f5a3bcad9348f9b6622b224a5"}, "downloads": -1, "filename": "jsonargparse-2.6.1-py3-none-any.whl", "has_sig": false, "md5_digest": "8a3abd1519a2a6ee930ebb7f2a38d8bb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 25305, "upload_time": "2019-09-17T05:48:10", "upload_time_iso_8601": "2019-09-17T05:48:10.561925Z", "url": "https://files.pythonhosted.org/packages/34/2a/66d62ca9df43f77761160fb8ea7bcc9167a3821f19be501ed374d086cf93/jsonargparse-2.6.1-py3-none-any.whl", "yanked": false}], "2.7.0": [{"comment_text": "", "digests": {"md5": "e72e088cd38326409ff759090f033476", "sha256": "5a1934b3abfce97685df2a9e54cf9fc2a1c90520c13c01ed24322c586dd50cc4"}, "downloads": -1, "filename": "jsonargparse-2.7.0-py3-none-any.whl", "has_sig": false, "md5_digest": "e72e088cd38326409ff759090f033476", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 25366, "upload_time": "2019-10-07T15:03:52", "upload_time_iso_8601": "2019-10-07T15:03:52.533210Z", "url": "https://files.pythonhosted.org/packages/c2/a9/2daac08fa368779a0e97d1198de5676fc11f67ebdb286cc838045223a07b/jsonargparse-2.7.0-py3-none-any.whl", "yanked": false}], "2.8.0": [{"comment_text": "", "digests": {"md5": "d5ffa9919bbf2534f51e5f7820c32e74", "sha256": "a348f40d69c29d2bf66c9fa3786927531a04eda03649e435f6b2fdd32d240111"}, "downloads": -1, "filename": "jsonargparse-2.8.0-py3-none-any.whl", "has_sig": false, "md5_digest": "d5ffa9919bbf2534f51e5f7820c32e74", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 25638, "upload_time": "2019-10-10T05:07:14", "upload_time_iso_8601": "2019-10-10T05:07:14.606873Z", "url": "https://files.pythonhosted.org/packages/dd/31/5480eea20381a123cbd284effa3f4e3ade77785c765622a480a480b2dd5c/jsonargparse-2.8.0-py3-none-any.whl", "yanked": false}], "2.9.0": [{"comment_text": "", "digests": {"md5": "2534a4428f962d54b64f6c41696bdf70", "sha256": "28b76acc8d143c22a9be0bdfe36344aa643991be196e994d9391a4c8117addf2"}, "downloads": -1, "filename": "jsonargparse-2.9.0-py3-none-any.whl", "has_sig": false, "md5_digest": "2534a4428f962d54b64f6c41696bdf70", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 25720, "upload_time": "2019-10-10T15:41:19", "upload_time_iso_8601": "2019-10-10T15:41:19.570427Z", "url": "https://files.pythonhosted.org/packages/f4/ae/f149c36157c554d952d9cbe9c7978faa9b022fa237a1a0237889423ed639/jsonargparse-2.9.0-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "81c73f38ec66e7cd195f7062d2bd7e43", "sha256": "04cd99b519c8e95d35d8ac957b0f3a564eacd672b0e3b561418268e26674cd61"}, "downloads": -1, "filename": "jsonargparse-2.29.0-py3-none-any.whl", "has_sig": false, "md5_digest": "81c73f38ec66e7cd195f7062d2bd7e43", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 37033, "upload_time": "2020-05-07T06:11:01", "upload_time_iso_8601": "2020-05-07T06:11:01.556203Z", "url": "https://files.pythonhosted.org/packages/ef/6d/50c0579ca4811453ec246ac53e382220115ecf20661af3ac90e179c4a3d4/jsonargparse-2.29.0-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 00:51:53 2020"}