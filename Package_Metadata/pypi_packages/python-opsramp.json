{"info": {"author": "HPE Greenlake Talos", "author_email": "hcss_kalpana@hpe.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Operating System :: OS Independent", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Topic :: Software Development :: Libraries"], "description": "<!---\n(c) Copyright 2019-2020 Hewlett Packard Enterprise Development LP\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n-->\n# python-opsramp\nA Python language binding for the OpsRamp API\n\nTravisCI [![Build Status](https://travis-ci.org/HewlettPackard/python-opsramp.svg?branch=master)](https://travis-ci.org/HewlettPackard/python-opsramp)\nCircleCI [![CircleCI](https://circleci.com/gh/HewlettPackard/python-opsramp.svg?style=svg)](https://circleci.com/gh/HewlettPackard/python-opsramp)\n\n## About\nThis directory tree contains a Python module that provides a convenient way to\naccess the OpsRamp REST API programmatically. The OpsRamp API documentation is\nsomewhat opaque and this binding hides some of the details for exactly that reason.\nI have also added \"assert\" statements in various places to guard against pitfalls\nthat I ran into that are not obvious from the API docs.\n\n### Scope\nThe basic framework of this library is in place and the\nscope will increase incrementally over time. The supplied samples\nexercise most of the main API sections and are described\nlater in this document.\n\nNote however that all of our wrapper objects also provide an `api` property that\ncan be used to access REST URLs further down the API tree\nwhere we have not written a specific wrapper class yet.\n\nWhile you can use these api objects to work directly with OpsRamp at a REST level,\nplease consider taking the small amount of time needed to add a proper wrapper class\nhere instead, for your own benefit and that of future users.\n\n### Return values\nAll functions in this binding return regular Python objects (not JSON strings).\nIn general you will need to look at the OpsRamp API docs to see exactly what\nsort of object and/fields the response will contain; typically we return exactly\nwhat the API gave us, or an equivalent Python object if it returned JSON.\n\n### Runtime Environment\nThis module is primarily designed for use on Python 3.\n\nWe also run the unit tests against Python 2.7 and it *should* work correctly there\ntoo. Note however that Python 2 is going end-of-life in late 2019 and we reserve\nthe right to drop support for it in a future version of this module.\n\n## Public Object Tree\nFollowing is a summary of the object tree currently available in this OpsRamp language binding. See\nthe \"Samples\" section later in this document for an illustration of how to use them.\n\nYou start by calling `opsramp.binding.connect()`\nwhich returns a single \"OpsRamp\" object to represent the entire REST API instance\nthat you want to access, and make a series of calls that return progressively lower level objects to access\nlower level information from OpsRamp. For clarity in these end-user instructions I have omitted several Python\nclasses that are internal implementation detail in the module and not intended for direct use by external callers.\n\nHere's an illustration of a simple use of the binding. See the Samples section for more detailed ones.\n```\nimport opsramp.binding\n\normp = opsramp.binding.connect(OPSRAMP_URL, KEY, SECRET)\ncfg = ormp.config()\nprint('alert types', cfg.get_alert_types())\nprint('timezones', cfg.get_timezones())\n```\n\n### Class diagram\nThis diagram is an overview of the public classes and their relationship to each other.\nThe individual classes are described in detail in the following section. This diagram\nwas produced using [Graphviz](https://www.graphviz.org/) `apt-get install graphviz`\nand to edit it you need to modify the\nsource file classes.dot and regenerate the PNG from that.\n\n`dot -Tpng < classes.dot > classes.png`\n\n![OpsRamp classes](classes.png)\n\nI have used color to highlight the subset of classes that implement a \"create\" method.\n\n### Class definitions\n\nimport opsramp.binding\n\n- def connect(url, key, secret) _returns an instance of the class Opsramp that is connected to the specified API endpoint_\n  This function posts a login request to the specified endpoint URL using the key and secret given. This post\n  returns an access token, which the function uses to construct an Opsramp object and returns that.\n- class Opsramp(url, token) _an object representing the complete API tree of one OpsRamp instance_\n  - config() -> returns a GlobalConfig object that can be used to access global settings for this OpsRamp instance.\n  - tenant(uuid) -> returns a Tenant object representing the API subtree for one specific tenant.\n\nimport opsramp.globalconfig\n\n- class GlobalConfig() _read-only access to global settings on this OpsRamp instance_\n  - get\\_alert\\_types() -> returns a list of the global alert types that are defined on this OpsRamp instance.\n  - get\\_channels() -> returns a list of the \"channels\" that are defined on this OpsRamp instance. See the OpsRamp docs for details.\n  - get\\_countries() -> a list of dicts each describing one country known to this OpsRamp instance.\n  - get\\_timezones() -> a list of dicts each describing one timezone known to this OpsRamp instance.\n  - get\\_alert\\_technologies() -> a list of dicts each describing one alert technology known to this OpsRamp instance.\n  - get\\_nocs() -> a list of dicts each describing one NOC known to this OpsRamp instance.\n  - get\\_device\\_types() -> a list of dicts each describing device type known to this OpsRamp instance.\n\nimport opsramp.tenant\n\n- class Tenant(uuid) _the API subtree for one specific tenant_\n  - get\\_alert\\_script() -> Returns a string containing the appropriate Python script to run on a Linux node\n  to install the OpsRamp agent there and connect it to this Tenant. This text contains the tenant's access keys\n  so think twice before printing it to the screen or logs.\n  - integrations() -> returns an Integrations object representing all integrations on this Tenant.\n  - rba() -> returns an Rba object representing all runbook automation information for this Tenant.\n  - monitoring() -> returns a Monitoring object representing all monitoring information for this Tenant.\n  - policies() -> returns a Policies object representing the device management policies on this Tenant.\n  - clients() ->  returns a Clients object representing all OpsRamp clients on this Tenant. _Note that\n  this is only valid for MSP-level tenants because an OpsRamp client cannot contain other clients._\n  - discovery() -> returns a Discovery object representing all OpsRamp Discovery profiles for this Tenant.\n  - credential\\_sets() -> returns a Credential set object representing all OpsRamp Discovery profiles for this Tenant.\n  - permission\\_sets() -> returns a PermissionSets object representing all OpsRamp RBAC permission sets for this Tenant.\n  - roles() -> returns a Roles object representing all OpsRamp RBAC roles for this Tenant.\n  - escalations() -> returns an Escalations object representing the Alert Escalation Policies of this Tenant.\n  - mgmt\\_profiles() -> returns a Profiles object representing the Management Profiles of this Tenant. These are used\n  to connect OpsRamp gateway node to the SaaS.\n  - sites() -> returns a Sites object. Sites are used to organize devices based on location.\n  - service\\_maps() -> returns a ServiceMaps object. Service maps are used to create directed graphs of dependencies\n  that are used in the OpsRamp UI to present human-readable graphs of the impact of service failures on each other.\n  - kb() -> returns a KnowledgeBase object. These are used to organize\n  knowledge base articles and categories related to this tenant.\n  - resources() -> returns a Resources object representing all OpsRamp resources on this Tenant\n\nimport opsramp.service\\_maps\n\n- class ServiceMaps() _the ServiceMaps that are defined for this specific Tenant_\n  - create(definition) -> Creates a new service map in this Tenant. \"definition\" is a Python dict.\n  - update(uuid, definition) -> Updates an existing service map\n  - delete(uuid) -> Deletes an existing service map\n  - get(uuid=None, minimal=False) -> returns a list of dicts, each one containing details for one service map.\n\nimport opsramp.roles\n\n- class PermissionSets() _the RBAC permission sets that are defined for this specific Tenant_\n  - search(pattern) -> returns a list of dicts, each containing a single description.\n\n- class Roles() _the subtree of RBAC roles that are defined for this specific Tenant_\n  - create(definition) -> Creates a new RBAC role in this Tenant. \"definition\" is a Python dict.\n  - update(uuid, definition) -> Updates an existing role.\n  - delete(uuid) -> Deletes an existing role.\n  - search(pattern) -> returns a list of dicts, each containing a single role description.\n\nimport opsramp.sites\n\n- class Sites() _the subtree of Sites that are defined for this specific Tenant_\n  - create(definition) -> Creates a new site in this Tenant. \"definition\" is a Python dict.\n  - update(uuid, definition) -> Updates an existing site\n  - delete(uuid) -> Deletes an existing site\n  - search(pattern) -> returns a list of dicts, each containing a single site.\n  - get() -> returns a list of dicts, each one containing minimal details for one site.\n\nimport opsramp.monitoring\n\n- class Monitoring() _the monitoring information subtree for one specific Tenant_\n  - templates() -> returns a Templates object representing the set of monitoring templates on this Tenant.\n\n- class Templates() _the set of monitoring templates for one Tenant_\n  - search(pattern) -> returns a list of templates that match the pattern. See the OpsRamp API docs for details\n  on the format of the pattern string.\n\nimport opsramp.rba\n\n- class Rba() _the runbook automation subtree of one specific Tenant_\n  - categories() -> the subtree containing the RBA categories of this Tenant\n\n- class Categories() _the subtree for the RBA categories of one specific Tenant_\n  - get() -> Return a list of all the script categories in this Tenant RBA subtree.\n  - get(uuid) -> returns the definition of one specific category as a Python dict.\n  See the OpsRamp API docs for detailed contents of these dicts.\n  - create(name, optional parent\\_uuid) -> creates a new *category* on this Tenant and\n  returns its uuid. Optionally takes the uuid of a pre-existing category under which to nest the new one.\n  - category(uuid) -> returns a Category object representing the API subtree for one specific category.\n  - update(uuid, definition) -> Updates an existing category\n  - delete(uuid) -> Deletes an existing category\n\n- class Category() _the subtree for one RBA category_\n  - get() -> returns a list of the scripts in this category.\n  - get(uuid) -> returns the definition of one specific script as a Python dict.\n  See the OpsRamp API docs for detailed contents of these dicts.\n  - create(definition) -> creates a new *script* in this category. \"definition\" is a Python dict\n  specifying details of the script to be created. The content of these structs is complex so helper\n  functions for creating them are provided below.\n  - @staticmethod mkParameter(name, description, datatype, optional=False, default=None) -> helper function that returns a\n  Python dict describing one parameter of a proposed new script.\n  - @staticmethod mkScript(name, description, platforms, execution\\_type, payload=None, payload\\_file=None, parameters=[], script\\_name=None, install\\_timeout=0, registry\\_path=None, registry\\_value=None, process\\_name=None, service\\_name=None, output\\_directory=None, output\\_file=None) -> helper function that returns\n  a Python dict describing a proposed new script. There are lots of optional arguments because these structs\n  have variable content depending on the type of script and also some are only applicable on Linux, some only on Windows.\n  The function contains `assert` statements to flag violations of (some of) those rules.\n  I may add another layer of helpers later that are more specificially targetted (like \"mkPythonLinuxScript\" for example)\n  and implement those by calling mkScript() internally with appropriate arguments.\n  - update(uuid, definition) -> Updates an existing *script* in this category given the uuid of the script.The Python dict, \"definition\" is similar to the one used for create call and the helper functions used for create can be used for update too.\n\nimport opsramp.msp\n\n- class Clients() _the subtree containing all clients of this MSP-level tenant_\n  An OpsRamp client cannot contain other clients so this is class is only useful with MSP-level tenants.\n  - get() -> returns a list of dicts, each one containing minimal details for one client. It's worth\n  noting that the main ID field in the objects that get returned is called *uniqueId* and this is the\n  value you need to use everywhere in this binding that a client ID is required.\n  - get(uuid) -> returns the definition of one specific client as a Python dict.\n  See the OpsRamp API docs for detailed contents of these dicts.\n  - search(self, pattern='') -> returns a list of client ids matching the specified search pattern, the format of\n  which is described in the OpsRamp documentation.\n  - create(definition) -> creates a new Client in this Tenant. \"definition\" is a Python dict\n  specifying details of the client to be created.\n  The content of these structs is complex so helper functions for creating them are provided below.\n  - update(uuid, definition) -> \"definition\" is a Python dict specifying the changes to be made to this client.\n  The contents are described in the OpsRamp docs and helper functions for creating these dicts are provided here.\n  - activate(uuid) -> marks the client as \"active\" in OpsRamp.\n  - suspend(uuid) -> marks the client as \"suspended\" in OpsRamp. _This takes 10+ seconds to run._\n  - terminate(uuid) -> terminates the client in OpsRamp. _The API docs say that this call deletes the client but in\n  reality it just goes onto an \"inactive\" list that is retrievable through the API and visible in the UI. OpsRamp\n  say that clients on the inactive list will get garbage collected eventually, but I couldn't get clarity on\n  how long \"eventually\" is._\n  - @staticmethod mkHours(day\\_start=datetime.time(9, 0),\n                day\\_end=datetime.time(17, 0),\n                week\\_start=2, week\\_end=6,\n                sms\\_voice\\_notification=False) -> returns a dict that can be used to define\n  customer working and opening hours in OpsRamp.\n  - @staticmethod mkClient(name, address, time\\_zone, country, hours=None) -> returns a dict that can be\n  used to create a new client.\n\nimport opsramp.devmgmt\n\n- class Policies() _the policies subtree of one specific Tenant_\n  - get() -> returns a list of dicts, each containing a single policy definition.\n  - get(uuid) -> returns the definition of one specific policy as a Python dict.\n  See the OpsRamp API docs for detailed contents of these dicts.\n  - search(pattern) -> Search for a policy with a specific name. The syntax is defined in the OpsRamp docs.\n  - create(definition) -> creates a new policy in this Tenant. \"definition\" is a Python dict\n  specifying details of the policy to be created.\n  The contents are described in the OpsRamp docs and helper functions for creating these dicts are provided here.\n  - update(uuid, definition) -> Updates an existing policy.\n  \"definition\" is a Python dict specifying the changes to be made.\n  The contents are described in the OpsRamp docs and helper functions for creating these dicts are provided here.\n  - run(uuid) -> sends a request to the OpsRamp server to run this policy now. _The actual run is asynchronous._\n  - delete(uuid) -> deletes this policy from the OpsRamp server.\n\n- class Discovery() _the discovery profile subtree of one specific Tenant_\n  - search(pattern) -> returns a list of dicts, each containing a single discovery profile.\n  - create(definition) -> Creates a new discovery profile in this Tenant. \"definition\" is a Python dict.\n  - update(definition) -> Updates an existing discovery profile.\n  - rescan(discoveryProfileId) -> Causes a discovery profile to run.\n  - delete(discoveryProfileId) -> Deletes this discovery profile.\n\n- class CredentialSets() _the Credential set subtree of one specific Tenant_\n  - get(credentialSetId, minimal) -> Returns a Credential set definition.\n  - create(definition) -> Creates a new Credential set in this Tenant.\n  - update(credentialSetId, definition) -> Update an existing Credential set.\n  - delete(credentialSetId) -> Delete a Credential set.\n\nimport opsramp.integrations\n\n- class Integrations() _the integrations subtree of one specific Tenant_\n  - itypes() -> Returns a Types object describing all the *types*\n  of integrations that are available to be installed on this Tenant. Each\n  represents a *category* like CUSTOM, AZURE, rather than specific instances\n  of those.\n  - instances() -> Returns an Instances object representing all the actual\n  instances of integrations that are installed on this Tenant.\n  - _available() -> A synonym for \"types()\" that I included because that's\n  the name of the API endpoint in OpsRamp that returns this set of data.\n  It took a while to figure out what the returned data means though,\n  so we went with the more obvious name \"types\" here instead._\n  - _installed() -> A synonym for \"instances()\" that I included because that's\n  the name of the API endpoint in OpsRamp that returns this set of data.\n  It took a while to figure out what the returned data means though,\n  so we went with the more obvious name \"instances\" here instead._\n\n- class Types() _a set of integration types_\n  - get() -> returns a list of dicts, each containing a single integration type.\n  - get(uuid) -> returns the definition of one specific type as a Python dict.\n  - search(pattern) -> Search for an integration type with a specific name or\n  other attributes. The syntax of the pattern is defined in the OpsRamp docs.\n  Returns a list of type definition dicts.\n\n- class Instances() _the actual integration instances on one specific Tenant_\n  - get() -> returns a list of dicts, each containing a single integration instance.\n  - get(uuid) -> returns the definition of one specific integration instance as a Python dict.\n  - search(pattern) -> Search for existing integration instances with specific name or\n  other attributes. The syntax of the pattern is defined in the OpsRamp docs.\n  Returns a list of instance definition dicts.\n  - create(type\\_name, definition) -> creates a new instance of a specific\n  integration type on this Tenant. \"definition\" is a Python dict specifying\n  details of the integration instance that is to be created.\n  The contents are described in the OpsRamp docs and helper functions for creating these dicts are provided here.\n  - update(definition) -> \"definition\" is a Python dict specifying the changes\n  to be made to this instance. The contents are described in the OpsRamp docs\n  and helper functions to construct them exist in the Integrations class.\n  - set\\_auth\\_type(self, auth\\_type) -> sets the authentication type for this\n  integration to one of \"OAUTH2\", \"WEBHOOK\", \"BASIC\" and returns a dict that\n  contains the keys etc that are needed to connect to this integration using\n  that auth method. Note that OAUTH2 secret values are redacted by default in\n  the API response.\n  - enable(uuid) -> marks a specific instance as \"enabled\" in OpsRamp.\n  - disable(uuid) -> marks a specific instance as \"disabled\" in OpsRamp.\n  - notifier(uuid, definition) -> configures a notifier on one specific instance.\n  \"definition\" is a Python dict specifying details of the new configuration.\n  The syntax is defined in the OpsRamp docs. Helper functions for creating\n  these dicts will be added later.\n  - @staticmethod mkEmailAlert(display\\_name, logo\\_fname=None) ->\n  helper function that returns a Python dict suitable for creating or updating\n  an integration instance of type EMAILALERT.\n  - @staticmethod mkCustom(display\\_name, logo\\_fname=None, parent\\_uuid=None, inbound\\_auth\\_type=None) ->\n  helper function that returns a Python dict suitable for creating or updating\n  an integration instance of type CUSTOM.\n  - @staticmethod mkAzureARM(display\\_name, arm\\_subscription\\_id,\n  arm\\_tenant\\_id, arm\\_client\\_id, arm\\_secret\\_key) ->\n  helper function that returns a Python dict suitable for creating or updating\n  an integration instance of type AZUREARM. Note that ARM and ASM integrations\n  are different and each has its own helper function.\n  - @staticmethod mkAzureASM(display\\_name, arm\\_subscription\\_id,\n  arm\\_mgmt\\_cert, arm\\_keystore\\_pass) ->\n  helper function that returns a Python dict suitable for creating or updating\n  an integration instance of type AZUREASM. Note that ARM and ASM integrations\n  are different and each has its own helper function.\n\n- class Escalations() _the subtree of Alert Escalation Policies that are defined for this specific Tenant_\n  - create(definition) -> Creates a new escalation policy in this Tenant. \"definition\" is a Python dict.\n  - update(uuid, definition) -> Updates an existing escalation policy.\n  - delete(uuid) -> Deletes an existing escalation policy.\n  - search(pattern) -> returns a list of dicts, each containing a single policy.\n  - enable(uuid) -> marks a specific instance as \"enabled\" in OpsRamp.\n  - disable(uuid) -> marks a specific instance as \"disabled\" in OpsRamp.\n\n- class Profiles() _the subtree of Management Profiles that are defined for this specific Tenant_\n  - create(definition) -> Creates a new mgmt profile in this Tenant. \"definition\" is a Python dict.\n  - update(uuid, definition) -> Updates an existing mgmt profile.\n  - delete(uuid) -> Deletes an existing mgmt profile.\n  - search(pattern) -> returns a list of dicts, each containing a single profile.\n  - attach(uuid) -> This is used to attach OpsRamp Gateway and returns an activation token.\n  - detach(uuid) -> Detach the existing gateway and invalidate its activation token.\n  - reconnect(uuid) -> Error recovery should happen automatically but this can be called\n  to \"do it now\". _It's unclear at this time in what circumstances this would be used._\n\n- class KnowledgeBase() _the subtree of knowledge base that is defined for this specific Tenant_\n  - categories() -> Returns a KBcategories object representing the knowledge base\n  categories for this tenant.\n  - articles() -> Returns a KBarticles object representing the knowledge base\n  articles for this tenant.\n  - templates() -> Returns a KBtemplates object representing the knowledge base\n  templates for this tenant.\n\n- class KBcategories() _the subtree of knowledge base categories for this specific Tenant_\n  - create(definition) -> creates a KB category.\n  - update(uuid, definition) -> updates an existing KB category.\n  - delete(uuid) -> deletes an existing KB category.\n  - search(pattern) -> searches for categories matching a pattern.\n  - children(uuid) -> returns a list of the child categories of uuid.\n  - restore(uuid) -> undeletes category uuid (if it has not been\n  garbage collected yet).\n\n- class KBarticles() _the subtree of knowledge base articles for this specific Tenant_\n  - create(definition) -> creates a KB article.\n  - update(uuid, definition) -> updates an existing KB article.\n  - delete(uuid) -> deletes an existing KB article.\n  - search(pattern) -> searches for articles matching a pattern.\n  - share(uuid) -> marks article uuid as \"shared\" _I don't know what that means_\n  - comments(uuid) -> returns a list of the comments on article uuid.\n\n- class KBtemplates() _the subtree of knowledge base templates for this specific Tenant_\n  - create(definition) -> creates a KB template.\n  - update(uuid, definition) -> updates an existing KB template.\n  - delete(uuid) -> deletes an existing KB template.\n  - search(pattern) -> searches for templates matching a pattern.\n\nimport opsramp.resources\n\n- class Resources() _the subtree of Resources that are defined for this specific Tenant_\n  - create(definition) -> Creates a new resource in this Tenant. \"definition\" is a Python dict.\n  - update(uuid, definition) -> updates an existing resource.\n  - delete(uuid) -> deletes an existing resource.\n  - search(pattern) -> searches for resources matching a pattern.\n  - minimal(pattern) -> similar to search but returns minimal details about each resource to\n  improve performance and reduce runtime. _This appears to work only on OpsRamp *clients.*_\n  - applications(uuid) -> This endpoint is used to fetch list of applications running on a resource.\n  - availability(uuid, start\\_epoch, end\\_epoch) -> fetch the availability details of a resource\n  within a specific time frame. The times are Unix epoch timestamps.\n\n## Samples and examples\nThe `samples` subdirectory contains a series of short Python scripts illustrating\nthe use of most of the major API sections that we cover. These are supposed to be\nself-explanatory so I will not document them in detail here. If any of the samples\nare not obvious then please submit a PR that adds comments to the appropriate\nsource file explaining how it works, as an aid to other users.\n\nAll of the samples expect to be run as modules, like this:\n```\nls -l samples/*.py\npython3 -m samples.timezone_list\npython3 -m samples.integration_list\npython3 -m samples.category_list\npython3 -m samples.client_list\n... etc ...\n```\n\n### OpsRamp credentials\nEach of the samples depends on the existence of some environment variables to tell it which OpsRamp\nendpoint to use and the relevant creds. You can see those at the top of timezones.py\nfor example, and you must set them appropriately in your environment before running it.\n```\nexport OPSRAMP_URL='https://my-org.api.try.opsramp.com'\nexport OPSRAMP_TENANT_ID='client_1234'\nexport OPSRAMP_KEY='whatever'\nexport OPSRAMP_SECRET='whatever'\n```\nThe tenant id, key and secret are obtained from an \"integration\" in the OpsRamp UI.\nYou need to go to \"setup\", \"integrations\" and look for (or create) a row containing\na custom integration that uses OAUTH2. It doesn't matter what it's called, you just\nneed its id and creds to call the REST API.\n\nOn the list of integrations, click on the integration name in the appropriate row\nand a screen appears with the \"Tenant Id\", \"Key\" and \"Secret\" fields that you need.\nThe UI even gives sample curl commands at the bottom and you can cut the URL value\nout of those if it's not obvious. It's just the bit as far as opsramp.com like the\nexample above.\n\nIt's not obvious, but the creds you're getting here are for *the entire Tenant*\n(aka client) and will be the same for all integrations on that Tenant. Be careful\nwith them, don't put them in logs or post them online by accident.\n\nIf there isn't a suitable integration already (or you want your own) then create a new\none by selecting the \"other\" tab in the Available Integrations section at the bottom\nof the page and then \"custom\". Give it a name and leave the image file field blank.\nThe name will appear in access logs but otherwise has no real meaning. Select OAUTH2\nas the authentication type and hit Save. This will bring you to the screen with keys\nand curl commands etc as described above.\n\n### examples.py\nThe file `examples.py` collects together a series of examples and illustrates most of\nthe major areas of the API that we cover. It uses the same environment variables as\nthe samples to tell it which OpsRamp tenant to examine.\n\n`python3 -m opsramp.examples`\n\n### Simple CLI prototype\nI wrote a simple Python program that uses this binding to perform some simple\nread-only operations on OpsRamp. Uses the same environment variables as above.\n```\n$ python3 -m opsramp.cli tenant rba categories | jq -S .\n[\n  {\n    \"id\": 346,\n    \"name\": \"Day to day actions\"\n  },\n  {\n    \"id\": 698,\n    \"name\": \"DR procedures\"\n  }\n]\n$ python3 -m opsramp.cli tenant monitoring templates\n538 monitoring templates found\n$ python3 -m opsramp.cli tenant agent script | wc -l\n763\n$\n```\n\n## The API objects and direct REST calls\nIf we don't have a class that exposes the piece of the API that you want to use, then you can use the `ApiObject` base\nclass to make REST calls to that part directly while still using the correct wrapper classes for everything else.\n\nThe general approach would be to navigate to the nearest object for which we do have a wrapper and use its `api` property\nto get an instance of the `ApiObject` class that you can then use to make direct REST calls to the tree below that point.\nThis still has an advantage over raw curl or \"requests\" calls because the enclosing object class will have set up the\nURLs and access tokens for you.\n\n### API object example\n```\nmonitoring_api = ormp.tenant('client_9234').monitoring().api\nresult = monitoring_api.get('/templates')\nprint(result)\n```\nThis uses a REST get() to retrieve the list of templates directly from OpsRamp, by starting from the api object\nof a Monitoring object. The Monitoring object will have already done all the work to set up the correct tenant,\ncredentials and other context for that call so it's still much easier than making httplib, requests or curl\ncalls yourself.\n\n- ApiObject() _an object representing some subtree of a REST API_\n  - get(suffix='', headers={}) -> performs a GET to the specified REST endpoint and returns the body of the\n  server's reply. \"headers\" is an optional dict containing any additional HTTP headers that you want to send\n  with the GET.\n  - post(suffix='', headers={}, data=None, json=None) -> performs a POST to the specified REST endpoint and\n  returns the body of the server's reply. \"headers\" is an optional dict containing any additional HTTP headers\n  that you want to send, \"data\" is the text body, or \"json\" is a Python struct to be converted to a JSON\n  string and sent as a body. _Specifying both \"data\" and \"json\" in the same call results in undefined behavior\n  and should be avoided._\n  - put(suffix='', headers={}, data=None, json=None) -> performs a PUT to the specified REST endpoint and\n  returns the body of the server's reply. \"headers\" is an optional dict containing any additional HTTP headers\n  that you want to send, \"data\" is the text body, or \"json\" is a Python struct to be converted to a JSON\n  string and sent as a body. _Specifying both \"data\" and \"json\" in the same call results in undefined behavior\n  and should be avoided._\n  - delete(suffix='', headers={}) -> performs a DELETE to the specified REST endpoint and returns the body of\n  the server's reply. \"headers\" is an optional dict containing any additional HTTP headers that you want to send.\n  - _we will add other http actions if/when a specific need for them arises_\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/HewlettPackard/python-opsramp", "keywords": "opsramp", "license": "Apache 2.0", "maintainer": "", "maintainer_email": "", "name": "python-opsramp", "package_url": "https://pypi.org/project/python-opsramp/", "platform": "", "project_url": "https://pypi.org/project/python-opsramp/", "project_urls": {"Homepage": "https://github.com/HewlettPackard/python-opsramp"}, "release_url": "https://pypi.org/project/python-opsramp/1.0.3/", "requires_dist": ["eventlet", "requests", "simplejson"], "requires_python": "", "summary": "Python language binding for the Opsramp API", "version": "1.0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>python-opsramp</h1>\n<p>A Python language binding for the OpsRamp API</p>\n<p>TravisCI <a href=\"https://travis-ci.org/HewlettPackard/python-opsramp\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/832f13c86fa5d9fe4ced370a6726d121b58526f8/68747470733a2f2f7472617669732d63692e6f72672f4865776c6574745061636b6172642f707974686f6e2d6f707372616d702e7376673f6272616e63683d6d6173746572\"></a>\nCircleCI <a href=\"https://circleci.com/gh/HewlettPackard/python-opsramp\" rel=\"nofollow\"><img alt=\"CircleCI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9d43077535bc96bac51ad3ea77709f90cdd4f6ed/68747470733a2f2f636972636c6563692e636f6d2f67682f4865776c6574745061636b6172642f707974686f6e2d6f707372616d702e7376673f7374796c653d737667\"></a></p>\n<h2>About</h2>\n<p>This directory tree contains a Python module that provides a convenient way to\naccess the OpsRamp REST API programmatically. The OpsRamp API documentation is\nsomewhat opaque and this binding hides some of the details for exactly that reason.\nI have also added \"assert\" statements in various places to guard against pitfalls\nthat I ran into that are not obvious from the API docs.</p>\n<h3>Scope</h3>\n<p>The basic framework of this library is in place and the\nscope will increase incrementally over time. The supplied samples\nexercise most of the main API sections and are described\nlater in this document.</p>\n<p>Note however that all of our wrapper objects also provide an <code>api</code> property that\ncan be used to access REST URLs further down the API tree\nwhere we have not written a specific wrapper class yet.</p>\n<p>While you can use these api objects to work directly with OpsRamp at a REST level,\nplease consider taking the small amount of time needed to add a proper wrapper class\nhere instead, for your own benefit and that of future users.</p>\n<h3>Return values</h3>\n<p>All functions in this binding return regular Python objects (not JSON strings).\nIn general you will need to look at the OpsRamp API docs to see exactly what\nsort of object and/fields the response will contain; typically we return exactly\nwhat the API gave us, or an equivalent Python object if it returned JSON.</p>\n<h3>Runtime Environment</h3>\n<p>This module is primarily designed for use on Python 3.</p>\n<p>We also run the unit tests against Python 2.7 and it <em>should</em> work correctly there\ntoo. Note however that Python 2 is going end-of-life in late 2019 and we reserve\nthe right to drop support for it in a future version of this module.</p>\n<h2>Public Object Tree</h2>\n<p>Following is a summary of the object tree currently available in this OpsRamp language binding. See\nthe \"Samples\" section later in this document for an illustration of how to use them.</p>\n<p>You start by calling <code>opsramp.binding.connect()</code>\nwhich returns a single \"OpsRamp\" object to represent the entire REST API instance\nthat you want to access, and make a series of calls that return progressively lower level objects to access\nlower level information from OpsRamp. For clarity in these end-user instructions I have omitted several Python\nclasses that are internal implementation detail in the module and not intended for direct use by external callers.</p>\n<p>Here's an illustration of a simple use of the binding. See the Samples section for more detailed ones.</p>\n<pre><code>import opsramp.binding\n\normp = opsramp.binding.connect(OPSRAMP_URL, KEY, SECRET)\ncfg = ormp.config()\nprint('alert types', cfg.get_alert_types())\nprint('timezones', cfg.get_timezones())\n</code></pre>\n<h3>Class diagram</h3>\n<p>This diagram is an overview of the public classes and their relationship to each other.\nThe individual classes are described in detail in the following section. This diagram\nwas produced using <a href=\"https://www.graphviz.org/\" rel=\"nofollow\">Graphviz</a> <code>apt-get install graphviz</code>\nand to edit it you need to modify the\nsource file classes.dot and regenerate the PNG from that.</p>\n<p><code>dot -Tpng &lt; classes.dot &gt; classes.png</code></p>\n<p><img alt=\"OpsRamp classes\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4811eaee5eee2cc49383016928f3ddbb29685fe3/636c61737365732e706e67\"></p>\n<p>I have used color to highlight the subset of classes that implement a \"create\" method.</p>\n<h3>Class definitions</h3>\n<p>import opsramp.binding</p>\n<ul>\n<li>def connect(url, key, secret) <em>returns an instance of the class Opsramp that is connected to the specified API endpoint</em>\nThis function posts a login request to the specified endpoint URL using the key and secret given. This post\nreturns an access token, which the function uses to construct an Opsramp object and returns that.</li>\n<li>class Opsramp(url, token) <em>an object representing the complete API tree of one OpsRamp instance</em>\n<ul>\n<li>config() -&gt; returns a GlobalConfig object that can be used to access global settings for this OpsRamp instance.</li>\n<li>tenant(uuid) -&gt; returns a Tenant object representing the API subtree for one specific tenant.</li>\n</ul>\n</li>\n</ul>\n<p>import opsramp.globalconfig</p>\n<ul>\n<li>class GlobalConfig() <em>read-only access to global settings on this OpsRamp instance</em>\n<ul>\n<li>get_alert_types() -&gt; returns a list of the global alert types that are defined on this OpsRamp instance.</li>\n<li>get_channels() -&gt; returns a list of the \"channels\" that are defined on this OpsRamp instance. See the OpsRamp docs for details.</li>\n<li>get_countries() -&gt; a list of dicts each describing one country known to this OpsRamp instance.</li>\n<li>get_timezones() -&gt; a list of dicts each describing one timezone known to this OpsRamp instance.</li>\n<li>get_alert_technologies() -&gt; a list of dicts each describing one alert technology known to this OpsRamp instance.</li>\n<li>get_nocs() -&gt; a list of dicts each describing one NOC known to this OpsRamp instance.</li>\n<li>get_device_types() -&gt; a list of dicts each describing device type known to this OpsRamp instance.</li>\n</ul>\n</li>\n</ul>\n<p>import opsramp.tenant</p>\n<ul>\n<li>class Tenant(uuid) <em>the API subtree for one specific tenant</em>\n<ul>\n<li>get_alert_script() -&gt; Returns a string containing the appropriate Python script to run on a Linux node\nto install the OpsRamp agent there and connect it to this Tenant. This text contains the tenant's access keys\nso think twice before printing it to the screen or logs.</li>\n<li>integrations() -&gt; returns an Integrations object representing all integrations on this Tenant.</li>\n<li>rba() -&gt; returns an Rba object representing all runbook automation information for this Tenant.</li>\n<li>monitoring() -&gt; returns a Monitoring object representing all monitoring information for this Tenant.</li>\n<li>policies() -&gt; returns a Policies object representing the device management policies on this Tenant.</li>\n<li>clients() -&gt;  returns a Clients object representing all OpsRamp clients on this Tenant. <em>Note that\nthis is only valid for MSP-level tenants because an OpsRamp client cannot contain other clients.</em></li>\n<li>discovery() -&gt; returns a Discovery object representing all OpsRamp Discovery profiles for this Tenant.</li>\n<li>credential_sets() -&gt; returns a Credential set object representing all OpsRamp Discovery profiles for this Tenant.</li>\n<li>permission_sets() -&gt; returns a PermissionSets object representing all OpsRamp RBAC permission sets for this Tenant.</li>\n<li>roles() -&gt; returns a Roles object representing all OpsRamp RBAC roles for this Tenant.</li>\n<li>escalations() -&gt; returns an Escalations object representing the Alert Escalation Policies of this Tenant.</li>\n<li>mgmt_profiles() -&gt; returns a Profiles object representing the Management Profiles of this Tenant. These are used\nto connect OpsRamp gateway node to the SaaS.</li>\n<li>sites() -&gt; returns a Sites object. Sites are used to organize devices based on location.</li>\n<li>service_maps() -&gt; returns a ServiceMaps object. Service maps are used to create directed graphs of dependencies\nthat are used in the OpsRamp UI to present human-readable graphs of the impact of service failures on each other.</li>\n<li>kb() -&gt; returns a KnowledgeBase object. These are used to organize\nknowledge base articles and categories related to this tenant.</li>\n<li>resources() -&gt; returns a Resources object representing all OpsRamp resources on this Tenant</li>\n</ul>\n</li>\n</ul>\n<p>import opsramp.service_maps</p>\n<ul>\n<li>class ServiceMaps() <em>the ServiceMaps that are defined for this specific Tenant</em>\n<ul>\n<li>create(definition) -&gt; Creates a new service map in this Tenant. \"definition\" is a Python dict.</li>\n<li>update(uuid, definition) -&gt; Updates an existing service map</li>\n<li>delete(uuid) -&gt; Deletes an existing service map</li>\n<li>get(uuid=None, minimal=False) -&gt; returns a list of dicts, each one containing details for one service map.</li>\n</ul>\n</li>\n</ul>\n<p>import opsramp.roles</p>\n<ul>\n<li>\n<p>class PermissionSets() <em>the RBAC permission sets that are defined for this specific Tenant</em></p>\n<ul>\n<li>search(pattern) -&gt; returns a list of dicts, each containing a single description.</li>\n</ul>\n</li>\n<li>\n<p>class Roles() <em>the subtree of RBAC roles that are defined for this specific Tenant</em></p>\n<ul>\n<li>create(definition) -&gt; Creates a new RBAC role in this Tenant. \"definition\" is a Python dict.</li>\n<li>update(uuid, definition) -&gt; Updates an existing role.</li>\n<li>delete(uuid) -&gt; Deletes an existing role.</li>\n<li>search(pattern) -&gt; returns a list of dicts, each containing a single role description.</li>\n</ul>\n</li>\n</ul>\n<p>import opsramp.sites</p>\n<ul>\n<li>class Sites() <em>the subtree of Sites that are defined for this specific Tenant</em>\n<ul>\n<li>create(definition) -&gt; Creates a new site in this Tenant. \"definition\" is a Python dict.</li>\n<li>update(uuid, definition) -&gt; Updates an existing site</li>\n<li>delete(uuid) -&gt; Deletes an existing site</li>\n<li>search(pattern) -&gt; returns a list of dicts, each containing a single site.</li>\n<li>get() -&gt; returns a list of dicts, each one containing minimal details for one site.</li>\n</ul>\n</li>\n</ul>\n<p>import opsramp.monitoring</p>\n<ul>\n<li>\n<p>class Monitoring() <em>the monitoring information subtree for one specific Tenant</em></p>\n<ul>\n<li>templates() -&gt; returns a Templates object representing the set of monitoring templates on this Tenant.</li>\n</ul>\n</li>\n<li>\n<p>class Templates() <em>the set of monitoring templates for one Tenant</em></p>\n<ul>\n<li>search(pattern) -&gt; returns a list of templates that match the pattern. See the OpsRamp API docs for details\non the format of the pattern string.</li>\n</ul>\n</li>\n</ul>\n<p>import opsramp.rba</p>\n<ul>\n<li>\n<p>class Rba() <em>the runbook automation subtree of one specific Tenant</em></p>\n<ul>\n<li>categories() -&gt; the subtree containing the RBA categories of this Tenant</li>\n</ul>\n</li>\n<li>\n<p>class Categories() <em>the subtree for the RBA categories of one specific Tenant</em></p>\n<ul>\n<li>get() -&gt; Return a list of all the script categories in this Tenant RBA subtree.</li>\n<li>get(uuid) -&gt; returns the definition of one specific category as a Python dict.\nSee the OpsRamp API docs for detailed contents of these dicts.</li>\n<li>create(name, optional parent_uuid) -&gt; creates a new <em>category</em> on this Tenant and\nreturns its uuid. Optionally takes the uuid of a pre-existing category under which to nest the new one.</li>\n<li>category(uuid) -&gt; returns a Category object representing the API subtree for one specific category.</li>\n<li>update(uuid, definition) -&gt; Updates an existing category</li>\n<li>delete(uuid) -&gt; Deletes an existing category</li>\n</ul>\n</li>\n<li>\n<p>class Category() <em>the subtree for one RBA category</em></p>\n<ul>\n<li>get() -&gt; returns a list of the scripts in this category.</li>\n<li>get(uuid) -&gt; returns the definition of one specific script as a Python dict.\nSee the OpsRamp API docs for detailed contents of these dicts.</li>\n<li>create(definition) -&gt; creates a new <em>script</em> in this category. \"definition\" is a Python dict\nspecifying details of the script to be created. The content of these structs is complex so helper\nfunctions for creating them are provided below.</li>\n<li>@staticmethod mkParameter(name, description, datatype, optional=False, default=None) -&gt; helper function that returns a\nPython dict describing one parameter of a proposed new script.</li>\n<li>@staticmethod mkScript(name, description, platforms, execution_type, payload=None, payload_file=None, parameters=[], script_name=None, install_timeout=0, registry_path=None, registry_value=None, process_name=None, service_name=None, output_directory=None, output_file=None) -&gt; helper function that returns\na Python dict describing a proposed new script. There are lots of optional arguments because these structs\nhave variable content depending on the type of script and also some are only applicable on Linux, some only on Windows.\nThe function contains <code>assert</code> statements to flag violations of (some of) those rules.\nI may add another layer of helpers later that are more specificially targetted (like \"mkPythonLinuxScript\" for example)\nand implement those by calling mkScript() internally with appropriate arguments.</li>\n<li>update(uuid, definition) -&gt; Updates an existing <em>script</em> in this category given the uuid of the script.The Python dict, \"definition\" is similar to the one used for create call and the helper functions used for create can be used for update too.</li>\n</ul>\n</li>\n</ul>\n<p>import opsramp.msp</p>\n<ul>\n<li>class Clients() <em>the subtree containing all clients of this MSP-level tenant</em>\nAn OpsRamp client cannot contain other clients so this is class is only useful with MSP-level tenants.\n<ul>\n<li>get() -&gt; returns a list of dicts, each one containing minimal details for one client. It's worth\nnoting that the main ID field in the objects that get returned is called <em>uniqueId</em> and this is the\nvalue you need to use everywhere in this binding that a client ID is required.</li>\n<li>get(uuid) -&gt; returns the definition of one specific client as a Python dict.\nSee the OpsRamp API docs for detailed contents of these dicts.</li>\n<li>search(self, pattern='') -&gt; returns a list of client ids matching the specified search pattern, the format of\nwhich is described in the OpsRamp documentation.</li>\n<li>create(definition) -&gt; creates a new Client in this Tenant. \"definition\" is a Python dict\nspecifying details of the client to be created.\nThe content of these structs is complex so helper functions for creating them are provided below.</li>\n<li>update(uuid, definition) -&gt; \"definition\" is a Python dict specifying the changes to be made to this client.\nThe contents are described in the OpsRamp docs and helper functions for creating these dicts are provided here.</li>\n<li>activate(uuid) -&gt; marks the client as \"active\" in OpsRamp.</li>\n<li>suspend(uuid) -&gt; marks the client as \"suspended\" in OpsRamp. <em>This takes 10+ seconds to run.</em></li>\n<li>terminate(uuid) -&gt; terminates the client in OpsRamp. <em>The API docs say that this call deletes the client but in\nreality it just goes onto an \"inactive\" list that is retrievable through the API and visible in the UI. OpsRamp\nsay that clients on the inactive list will get garbage collected eventually, but I couldn't get clarity on\nhow long \"eventually\" is.</em></li>\n<li>@staticmethod mkHours(day_start=datetime.time(9, 0),\nday_end=datetime.time(17, 0),\nweek_start=2, week_end=6,\nsms_voice_notification=False) -&gt; returns a dict that can be used to define\ncustomer working and opening hours in OpsRamp.</li>\n<li>@staticmethod mkClient(name, address, time_zone, country, hours=None) -&gt; returns a dict that can be\nused to create a new client.</li>\n</ul>\n</li>\n</ul>\n<p>import opsramp.devmgmt</p>\n<ul>\n<li>\n<p>class Policies() <em>the policies subtree of one specific Tenant</em></p>\n<ul>\n<li>get() -&gt; returns a list of dicts, each containing a single policy definition.</li>\n<li>get(uuid) -&gt; returns the definition of one specific policy as a Python dict.\nSee the OpsRamp API docs for detailed contents of these dicts.</li>\n<li>search(pattern) -&gt; Search for a policy with a specific name. The syntax is defined in the OpsRamp docs.</li>\n<li>create(definition) -&gt; creates a new policy in this Tenant. \"definition\" is a Python dict\nspecifying details of the policy to be created.\nThe contents are described in the OpsRamp docs and helper functions for creating these dicts are provided here.</li>\n<li>update(uuid, definition) -&gt; Updates an existing policy.\n\"definition\" is a Python dict specifying the changes to be made.\nThe contents are described in the OpsRamp docs and helper functions for creating these dicts are provided here.</li>\n<li>run(uuid) -&gt; sends a request to the OpsRamp server to run this policy now. <em>The actual run is asynchronous.</em></li>\n<li>delete(uuid) -&gt; deletes this policy from the OpsRamp server.</li>\n</ul>\n</li>\n<li>\n<p>class Discovery() <em>the discovery profile subtree of one specific Tenant</em></p>\n<ul>\n<li>search(pattern) -&gt; returns a list of dicts, each containing a single discovery profile.</li>\n<li>create(definition) -&gt; Creates a new discovery profile in this Tenant. \"definition\" is a Python dict.</li>\n<li>update(definition) -&gt; Updates an existing discovery profile.</li>\n<li>rescan(discoveryProfileId) -&gt; Causes a discovery profile to run.</li>\n<li>delete(discoveryProfileId) -&gt; Deletes this discovery profile.</li>\n</ul>\n</li>\n<li>\n<p>class CredentialSets() <em>the Credential set subtree of one specific Tenant</em></p>\n<ul>\n<li>get(credentialSetId, minimal) -&gt; Returns a Credential set definition.</li>\n<li>create(definition) -&gt; Creates a new Credential set in this Tenant.</li>\n<li>update(credentialSetId, definition) -&gt; Update an existing Credential set.</li>\n<li>delete(credentialSetId) -&gt; Delete a Credential set.</li>\n</ul>\n</li>\n</ul>\n<p>import opsramp.integrations</p>\n<ul>\n<li>\n<p>class Integrations() <em>the integrations subtree of one specific Tenant</em></p>\n<ul>\n<li>itypes() -&gt; Returns a Types object describing all the <em>types</em>\nof integrations that are available to be installed on this Tenant. Each\nrepresents a <em>category</em> like CUSTOM, AZURE, rather than specific instances\nof those.</li>\n<li>instances() -&gt; Returns an Instances object representing all the actual\ninstances of integrations that are installed on this Tenant.</li>\n<li><em>available() -&gt; A synonym for \"types()\" that I included because that's\nthe name of the API endpoint in OpsRamp that returns this set of data.\nIt took a while to figure out what the returned data means though,\nso we went with the more obvious name \"types\" here instead.</em></li>\n<li><em>installed() -&gt; A synonym for \"instances()\" that I included because that's\nthe name of the API endpoint in OpsRamp that returns this set of data.\nIt took a while to figure out what the returned data means though,\nso we went with the more obvious name \"instances\" here instead.</em></li>\n</ul>\n</li>\n<li>\n<p>class Types() <em>a set of integration types</em></p>\n<ul>\n<li>get() -&gt; returns a list of dicts, each containing a single integration type.</li>\n<li>get(uuid) -&gt; returns the definition of one specific type as a Python dict.</li>\n<li>search(pattern) -&gt; Search for an integration type with a specific name or\nother attributes. The syntax of the pattern is defined in the OpsRamp docs.\nReturns a list of type definition dicts.</li>\n</ul>\n</li>\n<li>\n<p>class Instances() <em>the actual integration instances on one specific Tenant</em></p>\n<ul>\n<li>get() -&gt; returns a list of dicts, each containing a single integration instance.</li>\n<li>get(uuid) -&gt; returns the definition of one specific integration instance as a Python dict.</li>\n<li>search(pattern) -&gt; Search for existing integration instances with specific name or\nother attributes. The syntax of the pattern is defined in the OpsRamp docs.\nReturns a list of instance definition dicts.</li>\n<li>create(type_name, definition) -&gt; creates a new instance of a specific\nintegration type on this Tenant. \"definition\" is a Python dict specifying\ndetails of the integration instance that is to be created.\nThe contents are described in the OpsRamp docs and helper functions for creating these dicts are provided here.</li>\n<li>update(definition) -&gt; \"definition\" is a Python dict specifying the changes\nto be made to this instance. The contents are described in the OpsRamp docs\nand helper functions to construct them exist in the Integrations class.</li>\n<li>set_auth_type(self, auth_type) -&gt; sets the authentication type for this\nintegration to one of \"OAUTH2\", \"WEBHOOK\", \"BASIC\" and returns a dict that\ncontains the keys etc that are needed to connect to this integration using\nthat auth method. Note that OAUTH2 secret values are redacted by default in\nthe API response.</li>\n<li>enable(uuid) -&gt; marks a specific instance as \"enabled\" in OpsRamp.</li>\n<li>disable(uuid) -&gt; marks a specific instance as \"disabled\" in OpsRamp.</li>\n<li>notifier(uuid, definition) -&gt; configures a notifier on one specific instance.\n\"definition\" is a Python dict specifying details of the new configuration.\nThe syntax is defined in the OpsRamp docs. Helper functions for creating\nthese dicts will be added later.</li>\n<li>@staticmethod mkEmailAlert(display_name, logo_fname=None) -&gt;\nhelper function that returns a Python dict suitable for creating or updating\nan integration instance of type EMAILALERT.</li>\n<li>@staticmethod mkCustom(display_name, logo_fname=None, parent_uuid=None, inbound_auth_type=None) -&gt;\nhelper function that returns a Python dict suitable for creating or updating\nan integration instance of type CUSTOM.</li>\n<li>@staticmethod mkAzureARM(display_name, arm_subscription_id,\narm_tenant_id, arm_client_id, arm_secret_key) -&gt;\nhelper function that returns a Python dict suitable for creating or updating\nan integration instance of type AZUREARM. Note that ARM and ASM integrations\nare different and each has its own helper function.</li>\n<li>@staticmethod mkAzureASM(display_name, arm_subscription_id,\narm_mgmt_cert, arm_keystore_pass) -&gt;\nhelper function that returns a Python dict suitable for creating or updating\nan integration instance of type AZUREASM. Note that ARM and ASM integrations\nare different and each has its own helper function.</li>\n</ul>\n</li>\n<li>\n<p>class Escalations() <em>the subtree of Alert Escalation Policies that are defined for this specific Tenant</em></p>\n<ul>\n<li>create(definition) -&gt; Creates a new escalation policy in this Tenant. \"definition\" is a Python dict.</li>\n<li>update(uuid, definition) -&gt; Updates an existing escalation policy.</li>\n<li>delete(uuid) -&gt; Deletes an existing escalation policy.</li>\n<li>search(pattern) -&gt; returns a list of dicts, each containing a single policy.</li>\n<li>enable(uuid) -&gt; marks a specific instance as \"enabled\" in OpsRamp.</li>\n<li>disable(uuid) -&gt; marks a specific instance as \"disabled\" in OpsRamp.</li>\n</ul>\n</li>\n<li>\n<p>class Profiles() <em>the subtree of Management Profiles that are defined for this specific Tenant</em></p>\n<ul>\n<li>create(definition) -&gt; Creates a new mgmt profile in this Tenant. \"definition\" is a Python dict.</li>\n<li>update(uuid, definition) -&gt; Updates an existing mgmt profile.</li>\n<li>delete(uuid) -&gt; Deletes an existing mgmt profile.</li>\n<li>search(pattern) -&gt; returns a list of dicts, each containing a single profile.</li>\n<li>attach(uuid) -&gt; This is used to attach OpsRamp Gateway and returns an activation token.</li>\n<li>detach(uuid) -&gt; Detach the existing gateway and invalidate its activation token.</li>\n<li>reconnect(uuid) -&gt; Error recovery should happen automatically but this can be called\nto \"do it now\". <em>It's unclear at this time in what circumstances this would be used.</em></li>\n</ul>\n</li>\n<li>\n<p>class KnowledgeBase() <em>the subtree of knowledge base that is defined for this specific Tenant</em></p>\n<ul>\n<li>categories() -&gt; Returns a KBcategories object representing the knowledge base\ncategories for this tenant.</li>\n<li>articles() -&gt; Returns a KBarticles object representing the knowledge base\narticles for this tenant.</li>\n<li>templates() -&gt; Returns a KBtemplates object representing the knowledge base\ntemplates for this tenant.</li>\n</ul>\n</li>\n<li>\n<p>class KBcategories() <em>the subtree of knowledge base categories for this specific Tenant</em></p>\n<ul>\n<li>create(definition) -&gt; creates a KB category.</li>\n<li>update(uuid, definition) -&gt; updates an existing KB category.</li>\n<li>delete(uuid) -&gt; deletes an existing KB category.</li>\n<li>search(pattern) -&gt; searches for categories matching a pattern.</li>\n<li>children(uuid) -&gt; returns a list of the child categories of uuid.</li>\n<li>restore(uuid) -&gt; undeletes category uuid (if it has not been\ngarbage collected yet).</li>\n</ul>\n</li>\n<li>\n<p>class KBarticles() <em>the subtree of knowledge base articles for this specific Tenant</em></p>\n<ul>\n<li>create(definition) -&gt; creates a KB article.</li>\n<li>update(uuid, definition) -&gt; updates an existing KB article.</li>\n<li>delete(uuid) -&gt; deletes an existing KB article.</li>\n<li>search(pattern) -&gt; searches for articles matching a pattern.</li>\n<li>share(uuid) -&gt; marks article uuid as \"shared\" <em>I don't know what that means</em></li>\n<li>comments(uuid) -&gt; returns a list of the comments on article uuid.</li>\n</ul>\n</li>\n<li>\n<p>class KBtemplates() <em>the subtree of knowledge base templates for this specific Tenant</em></p>\n<ul>\n<li>create(definition) -&gt; creates a KB template.</li>\n<li>update(uuid, definition) -&gt; updates an existing KB template.</li>\n<li>delete(uuid) -&gt; deletes an existing KB template.</li>\n<li>search(pattern) -&gt; searches for templates matching a pattern.</li>\n</ul>\n</li>\n</ul>\n<p>import opsramp.resources</p>\n<ul>\n<li>class Resources() <em>the subtree of Resources that are defined for this specific Tenant</em>\n<ul>\n<li>create(definition) -&gt; Creates a new resource in this Tenant. \"definition\" is a Python dict.</li>\n<li>update(uuid, definition) -&gt; updates an existing resource.</li>\n<li>delete(uuid) -&gt; deletes an existing resource.</li>\n<li>search(pattern) -&gt; searches for resources matching a pattern.</li>\n<li>minimal(pattern) -&gt; similar to search but returns minimal details about each resource to\nimprove performance and reduce runtime. <em>This appears to work only on OpsRamp <em>clients.</em></em></li>\n<li>applications(uuid) -&gt; This endpoint is used to fetch list of applications running on a resource.</li>\n<li>availability(uuid, start_epoch, end_epoch) -&gt; fetch the availability details of a resource\nwithin a specific time frame. The times are Unix epoch timestamps.</li>\n</ul>\n</li>\n</ul>\n<h2>Samples and examples</h2>\n<p>The <code>samples</code> subdirectory contains a series of short Python scripts illustrating\nthe use of most of the major API sections that we cover. These are supposed to be\nself-explanatory so I will not document them in detail here. If any of the samples\nare not obvious then please submit a PR that adds comments to the appropriate\nsource file explaining how it works, as an aid to other users.</p>\n<p>All of the samples expect to be run as modules, like this:</p>\n<pre><code>ls -l samples/*.py\npython3 -m samples.timezone_list\npython3 -m samples.integration_list\npython3 -m samples.category_list\npython3 -m samples.client_list\n... etc ...\n</code></pre>\n<h3>OpsRamp credentials</h3>\n<p>Each of the samples depends on the existence of some environment variables to tell it which OpsRamp\nendpoint to use and the relevant creds. You can see those at the top of timezones.py\nfor example, and you must set them appropriately in your environment before running it.</p>\n<pre><code>export OPSRAMP_URL='https://my-org.api.try.opsramp.com'\nexport OPSRAMP_TENANT_ID='client_1234'\nexport OPSRAMP_KEY='whatever'\nexport OPSRAMP_SECRET='whatever'\n</code></pre>\n<p>The tenant id, key and secret are obtained from an \"integration\" in the OpsRamp UI.\nYou need to go to \"setup\", \"integrations\" and look for (or create) a row containing\na custom integration that uses OAUTH2. It doesn't matter what it's called, you just\nneed its id and creds to call the REST API.</p>\n<p>On the list of integrations, click on the integration name in the appropriate row\nand a screen appears with the \"Tenant Id\", \"Key\" and \"Secret\" fields that you need.\nThe UI even gives sample curl commands at the bottom and you can cut the URL value\nout of those if it's not obvious. It's just the bit as far as opsramp.com like the\nexample above.</p>\n<p>It's not obvious, but the creds you're getting here are for <em>the entire Tenant</em>\n(aka client) and will be the same for all integrations on that Tenant. Be careful\nwith them, don't put them in logs or post them online by accident.</p>\n<p>If there isn't a suitable integration already (or you want your own) then create a new\none by selecting the \"other\" tab in the Available Integrations section at the bottom\nof the page and then \"custom\". Give it a name and leave the image file field blank.\nThe name will appear in access logs but otherwise has no real meaning. Select OAUTH2\nas the authentication type and hit Save. This will bring you to the screen with keys\nand curl commands etc as described above.</p>\n<h3>examples.py</h3>\n<p>The file <code>examples.py</code> collects together a series of examples and illustrates most of\nthe major areas of the API that we cover. It uses the same environment variables as\nthe samples to tell it which OpsRamp tenant to examine.</p>\n<p><code>python3 -m opsramp.examples</code></p>\n<h3>Simple CLI prototype</h3>\n<p>I wrote a simple Python program that uses this binding to perform some simple\nread-only operations on OpsRamp. Uses the same environment variables as above.</p>\n<pre><code>$ python3 -m opsramp.cli tenant rba categories | jq -S .\n[\n  {\n    \"id\": 346,\n    \"name\": \"Day to day actions\"\n  },\n  {\n    \"id\": 698,\n    \"name\": \"DR procedures\"\n  }\n]\n$ python3 -m opsramp.cli tenant monitoring templates\n538 monitoring templates found\n$ python3 -m opsramp.cli tenant agent script | wc -l\n763\n$\n</code></pre>\n<h2>The API objects and direct REST calls</h2>\n<p>If we don't have a class that exposes the piece of the API that you want to use, then you can use the <code>ApiObject</code> base\nclass to make REST calls to that part directly while still using the correct wrapper classes for everything else.</p>\n<p>The general approach would be to navigate to the nearest object for which we do have a wrapper and use its <code>api</code> property\nto get an instance of the <code>ApiObject</code> class that you can then use to make direct REST calls to the tree below that point.\nThis still has an advantage over raw curl or \"requests\" calls because the enclosing object class will have set up the\nURLs and access tokens for you.</p>\n<h3>API object example</h3>\n<pre><code>monitoring_api = ormp.tenant('client_9234').monitoring().api\nresult = monitoring_api.get('/templates')\nprint(result)\n</code></pre>\n<p>This uses a REST get() to retrieve the list of templates directly from OpsRamp, by starting from the api object\nof a Monitoring object. The Monitoring object will have already done all the work to set up the correct tenant,\ncredentials and other context for that call so it's still much easier than making httplib, requests or curl\ncalls yourself.</p>\n<ul>\n<li>ApiObject() <em>an object representing some subtree of a REST API</em>\n<ul>\n<li>get(suffix='', headers={}) -&gt; performs a GET to the specified REST endpoint and returns the body of the\nserver's reply. \"headers\" is an optional dict containing any additional HTTP headers that you want to send\nwith the GET.</li>\n<li>post(suffix='', headers={}, data=None, json=None) -&gt; performs a POST to the specified REST endpoint and\nreturns the body of the server's reply. \"headers\" is an optional dict containing any additional HTTP headers\nthat you want to send, \"data\" is the text body, or \"json\" is a Python struct to be converted to a JSON\nstring and sent as a body. <em>Specifying both \"data\" and \"json\" in the same call results in undefined behavior\nand should be avoided.</em></li>\n<li>put(suffix='', headers={}, data=None, json=None) -&gt; performs a PUT to the specified REST endpoint and\nreturns the body of the server's reply. \"headers\" is an optional dict containing any additional HTTP headers\nthat you want to send, \"data\" is the text body, or \"json\" is a Python struct to be converted to a JSON\nstring and sent as a body. <em>Specifying both \"data\" and \"json\" in the same call results in undefined behavior\nand should be avoided.</em></li>\n<li>delete(suffix='', headers={}) -&gt; performs a DELETE to the specified REST endpoint and returns the body of\nthe server's reply. \"headers\" is an optional dict containing any additional HTTP headers that you want to send.</li>\n<li><em>we will add other http actions if/when a specific need for them arises</em></li>\n</ul>\n</li>\n</ul>\n\n          </div>"}, "last_serial": 6852578, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "50c774d832d1663a0ef0ac7d59ad90d1", "sha256": "9eefc025204670eee5f189d6b2ac950cf265c2021241be5822501a37dd7e5678"}, "downloads": -1, "filename": "python_opsramp-0.0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "50c774d832d1663a0ef0ac7d59ad90d1", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 16884, "upload_time": "2019-06-21T14:47:13", "upload_time_iso_8601": "2019-06-21T14:47:13.475437Z", "url": "https://files.pythonhosted.org/packages/6c/e5/e8c5c0a8dc39ebd35013071e80e6fe46e9156b1ad17406e268b4565e8765/python_opsramp-0.0.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5c764a607fb45c1d8a3564cbe1b3195a", "sha256": "411a10c4398b37bde5750c6220a27153a4ff218b70035881c630917781e77ecd"}, "downloads": -1, "filename": "python-opsramp-0.0.1.tar.gz", "has_sig": false, "md5_digest": "5c764a607fb45c1d8a3564cbe1b3195a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13571, "upload_time": "2019-06-21T14:47:15", "upload_time_iso_8601": "2019-06-21T14:47:15.887254Z", "url": "https://files.pythonhosted.org/packages/e6/3b/7bc0bd58779b10479305153dec99105e90947463f5741df9e9f2d661277f/python-opsramp-0.0.1.tar.gz", "yanked": false}], "0.0.10": [{"comment_text": "", "digests": {"md5": "fef38ae30c473382008d05a145250bd7", "sha256": "0ffaf8413b613b57139a8892866d3dad4b1a5ff23948670a76e27a250f263f03"}, "downloads": -1, "filename": "python_opsramp-0.0.10-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "fef38ae30c473382008d05a145250bd7", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 48003, "upload_time": "2019-11-05T17:35:04", "upload_time_iso_8601": "2019-11-05T17:35:04.384025Z", "url": "https://files.pythonhosted.org/packages/fc/6c/620c1f96dc6fbf548b954b5fcc793490176954a40355bec9a70d77cd7bad/python_opsramp-0.0.10-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a682200cfa1dbde0f6b1af26c95e3d63", "sha256": "be2034373359b2335ef94552a20ebd2cd06a77b4ecf57716e9a6febb820beced"}, "downloads": -1, "filename": "python-opsramp-0.0.10.tar.gz", "has_sig": false, "md5_digest": "a682200cfa1dbde0f6b1af26c95e3d63", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 143690, "upload_time": "2019-11-05T17:35:06", "upload_time_iso_8601": "2019-11-05T17:35:06.132810Z", "url": "https://files.pythonhosted.org/packages/05/b5/f6a07d3b0f9add21e49f41b2084f35bc0c19b0638ee48e006d493321c179/python-opsramp-0.0.10.tar.gz", "yanked": false}], "0.0.11": [{"comment_text": "", "digests": {"md5": "5157ba8b344db3eb5843434866e84a95", "sha256": "a853aaf3bd9174f5bb5d92ad0763719909229ec8bf81b72847b37b2ffd336a59"}, "downloads": -1, "filename": "python_opsramp-0.0.11-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "5157ba8b344db3eb5843434866e84a95", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 50343, "upload_time": "2019-11-07T15:26:34", "upload_time_iso_8601": "2019-11-07T15:26:34.931411Z", "url": "https://files.pythonhosted.org/packages/8d/2c/63186fb223820c30cc16fa7e54aef2acf401abad13474389c91e0b96b813/python_opsramp-0.0.11-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ac5fb2813705d92d3128227c7c222a1f", "sha256": "fe2084a42e4d3636e09a159086a7247f769d34e3dd53cb40465af95cc730b8a8"}, "downloads": -1, "filename": "python-opsramp-0.0.11.tar.gz", "has_sig": false, "md5_digest": "ac5fb2813705d92d3128227c7c222a1f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 153948, "upload_time": "2019-11-07T15:26:38", "upload_time_iso_8601": "2019-11-07T15:26:38.298780Z", "url": "https://files.pythonhosted.org/packages/39/ef/cb292f6d0cc2f4ff319549dc57c8099339eee9886fd6c569a5f97829b569/python-opsramp-0.0.11.tar.gz", "yanked": false}], "0.0.12": [{"comment_text": "", "digests": {"md5": "2507e75a6d5c395e0cf0abd9a0f5b480", "sha256": "984c50fd0e41886d87e1d9dc1e417551654c90b558165ecc16a168632e29e9c6"}, "downloads": -1, "filename": "python_opsramp-0.0.12-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "2507e75a6d5c395e0cf0abd9a0f5b480", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 54899, "upload_time": "2019-12-16T15:03:27", "upload_time_iso_8601": "2019-12-16T15:03:27.584779Z", "url": "https://files.pythonhosted.org/packages/0f/40/bc645fbcef432748c1558661f627093ea0b361ea65a09c5be6115c8369d0/python_opsramp-0.0.12-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b561d0433a42f9132ca40298ef42f7af", "sha256": "597b77309427cad5ee20184a1b6a491a69850e9d18680ba5f09f9f77833fa441"}, "downloads": -1, "filename": "python-opsramp-0.0.12.tar.gz", "has_sig": false, "md5_digest": "b561d0433a42f9132ca40298ef42f7af", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 164938, "upload_time": "2019-12-16T15:03:29", "upload_time_iso_8601": "2019-12-16T15:03:29.514200Z", "url": "https://files.pythonhosted.org/packages/25/b1/f07a837ec836007baae851459f8592a20501103b7bc0a0a82ff839c909ea/python-opsramp-0.0.12.tar.gz", "yanked": false}], "0.0.13": [{"comment_text": "", "digests": {"md5": "5d81c82e52e0a5a302a12b1041375200", "sha256": "7f6cd7c70e767f52aa04b3c66aa5dbd63c15d4bcd8af9926f4ac87157ba50553"}, "downloads": -1, "filename": "python_opsramp-0.0.13-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "5d81c82e52e0a5a302a12b1041375200", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 54956, "upload_time": "2020-01-17T14:22:24", "upload_time_iso_8601": "2020-01-17T14:22:24.145891Z", "url": "https://files.pythonhosted.org/packages/1b/34/c000835c7f9d9ec39386df06cd8dc32e00d24221fcf8df58f5d1a0ac3fcd/python_opsramp-0.0.13-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "41d3e6d9b8c538a743e99f3f9e19e9e3", "sha256": "b3890c5111a715e37c1d7cebe898576a7f3384d76dda87a2d7d54c46149865a6"}, "downloads": -1, "filename": "python-opsramp-0.0.13.tar.gz", "has_sig": false, "md5_digest": "41d3e6d9b8c538a743e99f3f9e19e9e3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 165188, "upload_time": "2020-01-17T14:22:27", "upload_time_iso_8601": "2020-01-17T14:22:27.108430Z", "url": "https://files.pythonhosted.org/packages/91/f2/70f76f98747c4f982c747bd9d2d0b88253010832931b24aba8a993e608d4/python-opsramp-0.0.13.tar.gz", "yanked": false}], "0.0.14": [{"comment_text": "", "digests": {"md5": "0918d5d54c5cb3b658c98316b4c76951", "sha256": "9269b16ef73d4e84a8fc889562d81b27593b4cd310a40911617f669b2626b7c3"}, "downloads": -1, "filename": "python_opsramp-0.0.14-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "0918d5d54c5cb3b658c98316b4c76951", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 58478, "upload_time": "2020-01-24T14:53:02", "upload_time_iso_8601": "2020-01-24T14:53:02.312118Z", "url": "https://files.pythonhosted.org/packages/00/4b/f33471917a890a4a607fe123109ee6664436cfff28c0024a33b5a152431b/python_opsramp-0.0.14-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "40d2893d08df228c17c71d1b9e317b80", "sha256": "3bba81393e7e1b65b9859ed58293b5f6de070d90937bf7aa80ffe8b1d1edd1db"}, "downloads": -1, "filename": "python-opsramp-0.0.14.tar.gz", "has_sig": false, "md5_digest": "40d2893d08df228c17c71d1b9e317b80", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 175705, "upload_time": "2020-01-24T14:53:06", "upload_time_iso_8601": "2020-01-24T14:53:06.210783Z", "url": "https://files.pythonhosted.org/packages/80/fe/7f143456eaba04c761e7314fff594360a8542228346733c46e8c1b80ff04/python-opsramp-0.0.14.tar.gz", "yanked": false}], "0.0.15": [{"comment_text": "", "digests": {"md5": "bf4152ad1d436b0d119fa25a2c51a185", "sha256": "c6c572f9fd2551e9b1e8a5842d48598dad53f766ff5d681fe8f5eb10847a90c6"}, "downloads": -1, "filename": "python_opsramp-0.0.15-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "bf4152ad1d436b0d119fa25a2c51a185", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 60043, "upload_time": "2020-01-31T16:08:30", "upload_time_iso_8601": "2020-01-31T16:08:30.729690Z", "url": "https://files.pythonhosted.org/packages/08/6d/daf49ef16f4bb738f03504a03788528aa1eab6b8eb979ef4e202f0f91aa9/python_opsramp-0.0.15-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "dd55798737b115837112ec0c8cdac1c2", "sha256": "87366ec87a1d435f0a33eb83a9b3e1c5dfc091cc71db7c7a6bfab046cfb80ca7"}, "downloads": -1, "filename": "python-opsramp-0.0.15.tar.gz", "has_sig": false, "md5_digest": "dd55798737b115837112ec0c8cdac1c2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 209457, "upload_time": "2020-01-31T16:08:34", "upload_time_iso_8601": "2020-01-31T16:08:34.974791Z", "url": "https://files.pythonhosted.org/packages/c6/9e/5f217328da12af795729bd50028cfb73972d7249bd2c44f4a5801e1e0201/python-opsramp-0.0.15.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "d54eb33c635663567e727b5a11e08bf9", "sha256": "c876edd3bfadfaf4cf0c36330db9b83f11a4b4714c9c26a289b11cde41b2276b"}, "downloads": -1, "filename": "python_opsramp-0.0.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "d54eb33c635663567e727b5a11e08bf9", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 16889, "upload_time": "2019-06-21T15:00:54", "upload_time_iso_8601": "2019-06-21T15:00:54.728990Z", "url": "https://files.pythonhosted.org/packages/01/13/0086abea457fd200ecc86368306bd1a3e0448924abb64b9cfa3ce4d1a125/python_opsramp-0.0.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "272a8bdc4dbc0ce57a9a207015f8dfc0", "sha256": "f4bf2dddb9e566be098213f9d3f0dfd5023c65463d144de722972458d50cf66f"}, "downloads": -1, "filename": "python-opsramp-0.0.2.tar.gz", "has_sig": false, "md5_digest": "272a8bdc4dbc0ce57a9a207015f8dfc0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24306, "upload_time": "2019-06-21T15:00:56", "upload_time_iso_8601": "2019-06-21T15:00:56.043344Z", "url": "https://files.pythonhosted.org/packages/8e/61/99d3c234dd2eb7da52c291901dd8e485c9e3a78b5dc34aeb40e83a6c7132/python-opsramp-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "0b5f00cf5de03dc862ed9b280c2f5966", "sha256": "c816dadca9ba5bc9662e6705b47cb279cb80a108716c663adb9e1b6d9fec6045"}, "downloads": -1, "filename": "python_opsramp-0.0.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "0b5f00cf5de03dc862ed9b280c2f5966", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 24593, "upload_time": "2019-06-27T22:35:49", "upload_time_iso_8601": "2019-06-27T22:35:49.295954Z", "url": "https://files.pythonhosted.org/packages/07/8f/78db288429fcbdfbc5b4c535ba491a82362b5a706e5dadfec59448e7f36b/python_opsramp-0.0.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c03e4698a432ff2c3c24bda5f99a9c77", "sha256": "5ff492fac323dc0825c2c15c75b7814651e0ffa498c04e54a5f3d529b32b27b4"}, "downloads": -1, "filename": "python-opsramp-0.0.3.tar.gz", "has_sig": false, "md5_digest": "c03e4698a432ff2c3c24bda5f99a9c77", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29173, "upload_time": "2019-06-27T22:35:51", "upload_time_iso_8601": "2019-06-27T22:35:51.698953Z", "url": "https://files.pythonhosted.org/packages/f6/cd/bb59e939de1b5dc37731bfb69631555d448cb0381417aa72a7e143c89959/python-opsramp-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "8e3d2c26654f290e3571ce6de7a61a37", "sha256": "d1fd3ea8b8bd25419ca81d542309af684a67895c50542e40e049a4ba00622a1f"}, "downloads": -1, "filename": "python_opsramp-0.0.4-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "8e3d2c26654f290e3571ce6de7a61a37", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 27825, "upload_time": "2019-07-03T15:47:05", "upload_time_iso_8601": "2019-07-03T15:47:05.838373Z", "url": "https://files.pythonhosted.org/packages/b4/6b/9d4ac9191a510f412fc00cfc7b4a28a63e3be3dcaeea8c3c9cb39e354a1c/python_opsramp-0.0.4-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "03af37c58cc1adb9db75c61193a0fb05", "sha256": "988f6b4fb47e9ca6f67d98a0e3967aea846c89c6eadfcf763fea5b63ef197d5b"}, "downloads": -1, "filename": "python-opsramp-0.0.4.tar.gz", "has_sig": false, "md5_digest": "03af37c58cc1adb9db75c61193a0fb05", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 34553, "upload_time": "2019-07-03T15:47:08", "upload_time_iso_8601": "2019-07-03T15:47:08.373692Z", "url": "https://files.pythonhosted.org/packages/3d/42/3b4950000afac62e1e6397011a1195682a930b6949d83f1062bd0c6489f2/python-opsramp-0.0.4.tar.gz", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "a59349ca1b6b9f7f49f409a1caef80f8", "sha256": "df84b23685535f89a5d3afc1108a958f92e5a9ae72510b9bbc501f7047763d40"}, "downloads": -1, "filename": "python_opsramp-0.0.5-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "a59349ca1b6b9f7f49f409a1caef80f8", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 28449, "upload_time": "2019-07-04T17:27:23", "upload_time_iso_8601": "2019-07-04T17:27:23.065183Z", "url": "https://files.pythonhosted.org/packages/75/b9/04a954b143035a57d5acedfbbcff474e35dd0e8faa6d1e959baf2f766bb3/python_opsramp-0.0.5-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a2e5fbb54cd244ec8ea769399792e803", "sha256": "062b5f66ae0d05549135ed895822a3d03fd3cd336e6120e41f8cd106013ca70b"}, "downloads": -1, "filename": "python-opsramp-0.0.5.tar.gz", "has_sig": false, "md5_digest": "a2e5fbb54cd244ec8ea769399792e803", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 35605, "upload_time": "2019-07-04T17:27:26", "upload_time_iso_8601": "2019-07-04T17:27:26.998232Z", "url": "https://files.pythonhosted.org/packages/e3/23/f22aa86c047b9ef96ed8f24cfe14b3fc9967ffbd55e451d1c0e0d72e6091/python-opsramp-0.0.5.tar.gz", "yanked": false}], "0.0.6": [{"comment_text": "", "digests": {"md5": "792adf0053b3ce218f2b6b74abcdeba2", "sha256": "e68c0406c27808a644d84c64701959a24fb28473f9f447c62ff0a50da4f17295"}, "downloads": -1, "filename": "python_opsramp-0.0.6-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "792adf0053b3ce218f2b6b74abcdeba2", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 35676, "upload_time": "2019-07-09T16:20:34", "upload_time_iso_8601": "2019-07-09T16:20:34.178545Z", "url": "https://files.pythonhosted.org/packages/37/90/d57b1b52ff2b5749b2dfdf238ab70be542d0b408602a98a1624bc2dcfdb4/python_opsramp-0.0.6-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "706c118c64a419f7cac75e2b2616cd80", "sha256": "6b6a9d4810d78a7e64b90254dea9367eba460b760a0b185d610845891b62d863"}, "downloads": -1, "filename": "python-opsramp-0.0.6.tar.gz", "has_sig": false, "md5_digest": "706c118c64a419f7cac75e2b2616cd80", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 100395, "upload_time": "2019-07-09T16:20:38", "upload_time_iso_8601": "2019-07-09T16:20:38.735112Z", "url": "https://files.pythonhosted.org/packages/a1/a0/da307dee1bc06c718aa8b7fa547b729721d7832d98019e76aafe0ba05b3a/python-opsramp-0.0.6.tar.gz", "yanked": false}], "0.0.7": [{"comment_text": "", "digests": {"md5": "28df6f52a1aba5f399aab1ab47dbdd3f", "sha256": "ceb6ab0660ebe0b22bd7360b481da4ea37914d93c763994bda372fa9acdb777f"}, "downloads": -1, "filename": "python_opsramp-0.0.7-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "28df6f52a1aba5f399aab1ab47dbdd3f", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 41631, "upload_time": "2019-07-22T10:29:35", "upload_time_iso_8601": "2019-07-22T10:29:35.914779Z", "url": "https://files.pythonhosted.org/packages/b8/e3/802eadf3d9c4e45478dc5b24398d16d5c40694872de5e9a9168d55cda2d3/python_opsramp-0.0.7-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a0194c14fce9eebf4d9b47a37cfd5307", "sha256": "51c3f209abcd9a34ca0e433cff8ebc282537c63676144d117d294772c8c62fd3"}, "downloads": -1, "filename": "python-opsramp-0.0.7.tar.gz", "has_sig": false, "md5_digest": "a0194c14fce9eebf4d9b47a37cfd5307", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 117146, "upload_time": "2019-07-22T10:29:37", "upload_time_iso_8601": "2019-07-22T10:29:37.995257Z", "url": "https://files.pythonhosted.org/packages/19/c7/147cbe3de776293652b0ae8941d5f719bcefc9be66222c38bea7b7e1d8a6/python-opsramp-0.0.7.tar.gz", "yanked": false}], "0.0.8": [{"comment_text": "", "digests": {"md5": "35b9cb00909d95ae27d1fb54eed1a523", "sha256": "8a90849ef60b860f0a2b1bd42239742b0aa52a7ec6d26b459f2a584181b65756"}, "downloads": -1, "filename": "python_opsramp-0.0.8-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "35b9cb00909d95ae27d1fb54eed1a523", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 45012, "upload_time": "2019-09-18T16:11:19", "upload_time_iso_8601": "2019-09-18T16:11:19.402781Z", "url": "https://files.pythonhosted.org/packages/0d/b2/4c4a208b864acea323465c5eb5c1cde07ac64f3ec67abe0dc39066af5751/python_opsramp-0.0.8-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "774610bd2100be2af1dd758ff277b741", "sha256": "51bfc6dc09577f2485507625de4c313af7b168bd6f10294d69b7865acb27ea5e"}, "downloads": -1, "filename": "python-opsramp-0.0.8.tar.gz", "has_sig": false, "md5_digest": "774610bd2100be2af1dd758ff277b741", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 132284, "upload_time": "2019-09-18T16:11:24", "upload_time_iso_8601": "2019-09-18T16:11:24.188028Z", "url": "https://files.pythonhosted.org/packages/5c/2d/395133755cf0f053715bd75454346da7f3213a492445b0cd5f65c8cb046e/python-opsramp-0.0.8.tar.gz", "yanked": false}], "0.0.9": [{"comment_text": "", "digests": {"md5": "ac9ec7b437220ff7aae3026d0804e6dc", "sha256": "f46fa7c5827a73bc592b6ee332735f63a4e05c09ffff978edfaac5741be4408e"}, "downloads": -1, "filename": "python_opsramp-0.0.9-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "ac9ec7b437220ff7aae3026d0804e6dc", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 45109, "upload_time": "2019-10-09T13:46:25", "upload_time_iso_8601": "2019-10-09T13:46:25.895555Z", "url": "https://files.pythonhosted.org/packages/00/17/e0ca32b8b36025085cb1750d1bdd4b45d874a047b6a745156b41112591b9/python_opsramp-0.0.9-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "53ad7ad2f466b07ff7b45a2a9ec4e4f6", "sha256": "87bc53eeaa00f26d491f77c519230e3ecba1c1275de1ed4dcd45d481a7871d4c"}, "downloads": -1, "filename": "python-opsramp-0.0.9.tar.gz", "has_sig": false, "md5_digest": "53ad7ad2f466b07ff7b45a2a9ec4e4f6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 132630, "upload_time": "2019-10-09T13:46:30", "upload_time_iso_8601": "2019-10-09T13:46:30.430581Z", "url": "https://files.pythonhosted.org/packages/cf/42/51be690eebd9118947b926e5bec48093e8105ae856adde0001e53cf4cbb2/python-opsramp-0.0.9.tar.gz", "yanked": false}], "0.16": [{"comment_text": "", "digests": {"md5": "79195c1a22c172c0d665607cdb73ca62", "sha256": "44fc476c125a705d000a00a3cfc04c295c0d269410901680f6877708a774acd0"}, "downloads": -1, "filename": "python_opsramp-0.16-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "79195c1a22c172c0d665607cdb73ca62", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 61057, "upload_time": "2020-02-10T15:20:07", "upload_time_iso_8601": "2020-02-10T15:20:07.481375Z", "url": "https://files.pythonhosted.org/packages/24/df/9c1a85c324a888bdd991175423e5840b388075a81580f854e324fd96f0f3/python_opsramp-0.16-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3df25f8903974ff3f96193101d663608", "sha256": "3dfca750283f7a07b2a289c00afeacea8801730ab72e5faf3f015a09f14135a9"}, "downloads": -1, "filename": "python-opsramp-0.16.tar.gz", "has_sig": false, "md5_digest": "3df25f8903974ff3f96193101d663608", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 211629, "upload_time": "2020-02-10T15:20:12", "upload_time_iso_8601": "2020-02-10T15:20:12.862527Z", "url": "https://files.pythonhosted.org/packages/7a/9b/a0e316c518fed394f8f7c28972b3ec5d6e534bce72b74a37ba46635e891f/python-opsramp-0.16.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "ef31329bb1151c3bab1126c56ca4f1c2", "sha256": "ce4e3f1e6bdbfb04f1d7d06be966545e29e435f96c629bbf731fcc108cf6eb26"}, "downloads": -1, "filename": "python_opsramp-1.0.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "ef31329bb1151c3bab1126c56ca4f1c2", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 61226, "upload_time": "2020-02-21T18:04:53", "upload_time_iso_8601": "2020-02-21T18:04:53.218336Z", "url": "https://files.pythonhosted.org/packages/cb/8f/dd90118f8478ef5ab7646aeaa95bb081511e8746747b0a965493cdb1502b/python_opsramp-1.0.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "78b987875a809f1a3dd21ae2979d130c", "sha256": "a5217267fc6b3b775301e447c4076b38a23c49ac8f1cd76efc8867466e23e25b"}, "downloads": -1, "filename": "python-opsramp-1.0.0.tar.gz", "has_sig": false, "md5_digest": "78b987875a809f1a3dd21ae2979d130c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 211957, "upload_time": "2020-02-21T18:04:55", "upload_time_iso_8601": "2020-02-21T18:04:55.303977Z", "url": "https://files.pythonhosted.org/packages/f6/41/dfeb1594ed5c67885d231b1571b0f7971cf12087dcc3ee593c028065e9cb/python-opsramp-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "bc2aeb9f555de58781bb2fe4e0ce216b", "sha256": "ed651dc54d58ff14334cd8bbfe2a21cb476768d79a76fc2ba0ed43e43151c026"}, "downloads": -1, "filename": "python_opsramp-1.0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "bc2aeb9f555de58781bb2fe4e0ce216b", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 62470, "upload_time": "2020-03-03T14:54:30", "upload_time_iso_8601": "2020-03-03T14:54:30.057901Z", "url": "https://files.pythonhosted.org/packages/6e/1a/720c958079f67ce55023229271adb0e2529f06064d87287a2f70bf36860c/python_opsramp-1.0.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a181180fc9ed07e676f81e90ac64b971", "sha256": "390473e53a302d6f969bf9a511729729114dcc35dce70e1ca5a3e30beee2dac7"}, "downloads": -1, "filename": "python-opsramp-1.0.1.tar.gz", "has_sig": false, "md5_digest": "a181180fc9ed07e676f81e90ac64b971", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 212540, "upload_time": "2020-03-03T14:54:33", "upload_time_iso_8601": "2020-03-03T14:54:33.012392Z", "url": "https://files.pythonhosted.org/packages/5f/d1/9f06f0c8a4edbcbcd63571478c71ffac9504f554a0fb53b26d7a42d3e4b4/python-opsramp-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "2b1d68db648c0d6e557f21aaf62b5d90", "sha256": "c04b59a80be5749e7b4986959c17d20057307ba373f61dad6939d3363bd9e637"}, "downloads": -1, "filename": "python_opsramp-1.0.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "2b1d68db648c0d6e557f21aaf62b5d90", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 63561, "upload_time": "2020-03-13T19:28:06", "upload_time_iso_8601": "2020-03-13T19:28:06.478334Z", "url": "https://files.pythonhosted.org/packages/d2/64/bfc53dd4d3b96543861767d65b0bb7cff506b448f630a25182eccfbd0dcc/python_opsramp-1.0.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5b8bbf4eb1b8d7da05c789af5fdfdba4", "sha256": "8f2aeda5e9f4f68ccb6510122891db2f5c4877e1d2124b67fc1603834a24c253"}, "downloads": -1, "filename": "python-opsramp-1.0.2.tar.gz", "has_sig": false, "md5_digest": "5b8bbf4eb1b8d7da05c789af5fdfdba4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 212952, "upload_time": "2020-03-13T19:28:09", "upload_time_iso_8601": "2020-03-13T19:28:09.854093Z", "url": "https://files.pythonhosted.org/packages/31/fd/e664100cef7586d7b38d0eeb719827e9ebb0aa870b840e6cde7330ac5b5b/python-opsramp-1.0.2.tar.gz", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "b259e95609263aa43da684789ef9e972", "sha256": "54c40c5f016e668bd28b6f7ad5bd1fcb2ae91d29d611134681b4148dc5ece8f1"}, "downloads": -1, "filename": "python_opsramp-1.0.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "b259e95609263aa43da684789ef9e972", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 67147, "upload_time": "2020-03-20T20:30:34", "upload_time_iso_8601": "2020-03-20T20:30:34.796068Z", "url": "https://files.pythonhosted.org/packages/4a/87/d61848c5303a79f68cdee0b30750d4b2f3d305b257de8719bf00b58450cf/python_opsramp-1.0.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "783995956cc8b07945395819539746b8", "sha256": "292facb7f07cdc0bd75f822bdb7b03c185457a4d5af5feba64c9b5dc156f5126"}, "downloads": -1, "filename": "python-opsramp-1.0.3.tar.gz", "has_sig": false, "md5_digest": "783995956cc8b07945395819539746b8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 236072, "upload_time": "2020-03-20T20:30:39", "upload_time_iso_8601": "2020-03-20T20:30:39.915278Z", "url": "https://files.pythonhosted.org/packages/ba/cf/555e243adb77eeaa5e624f9c02873d44eae7c4ac22d5fb4cf998ec481879/python-opsramp-1.0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b259e95609263aa43da684789ef9e972", "sha256": "54c40c5f016e668bd28b6f7ad5bd1fcb2ae91d29d611134681b4148dc5ece8f1"}, "downloads": -1, "filename": "python_opsramp-1.0.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "b259e95609263aa43da684789ef9e972", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 67147, "upload_time": "2020-03-20T20:30:34", "upload_time_iso_8601": "2020-03-20T20:30:34.796068Z", "url": "https://files.pythonhosted.org/packages/4a/87/d61848c5303a79f68cdee0b30750d4b2f3d305b257de8719bf00b58450cf/python_opsramp-1.0.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "783995956cc8b07945395819539746b8", "sha256": "292facb7f07cdc0bd75f822bdb7b03c185457a4d5af5feba64c9b5dc156f5126"}, "downloads": -1, "filename": "python-opsramp-1.0.3.tar.gz", "has_sig": false, "md5_digest": "783995956cc8b07945395819539746b8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 236072, "upload_time": "2020-03-20T20:30:39", "upload_time_iso_8601": "2020-03-20T20:30:39.915278Z", "url": "https://files.pythonhosted.org/packages/ba/cf/555e243adb77eeaa5e624f9c02873d44eae7c4ac22d5fb4cf998ec481879/python-opsramp-1.0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:16:08 2020"}