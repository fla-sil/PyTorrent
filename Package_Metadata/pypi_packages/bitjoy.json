{"info": {"author": "Matheus Sena Vasconcelos", "author_email": "sena.matheus14@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# BitJoy\nBit, Bytes and Logical Gates Abstraction.\n\n## About\nRepository to 'Padr\u00f5es de Projeto' subject at university. A height level Bit/Bytes and logical circuits abstractions.  \nAlso Udacity Machine Learning Engineer Nanodegre program to add these package to PyPi.\n\n## Usage\n### Installing\n```sh\npip install bitjoy\n```\n### Starting with Bit\nImporting and instantiating Bit class.\n```python\nfrom bitjoy.dtypes import Bit\n\nzero = Bit(0)\n# ZeroBit(0)\none = Bit(1)\n# OneBit(1)\n```\nCreating a bit passing `0` in the `__init__` method, it will create another class: `ZeroBit`. The same away, passing `1`, it will create a `OneBit`.\n\n### Logical Gates\nThere is also support to logical operators (called logical gates or logical circuits).\n```python\nfrom bitjoy.dtypes import LogicalOperator\n```\n- NOT\n```python\nLogicalOperator.not_(zero)\n# OneBit(1)\nLogicalOperator.not_(one)\n# OneBit(0)\n```\n- OR\n```python\nLogicalOperator.or_(zero, zero)\n# ZeroBit(0)\nLogicalOperator.or_(zero, one)\n# OneBit(1)\nLogicalOperator.or_(one, zero)\n# OneBit(1)\nLogicalOperator.or_(one, one)\n# OneBit(1)\n```\n- AND\n```python\nLogicalOperator.and_(zero, zero)\n# ZeroBit(0)\nLogicalOperator.and_(zero, one)\n# ZeroBit(0)\nLogicalOperator.and_(one, zero)\n# ZeroBit(0)\nLogicalOperator.and_(one, one)\n# OneBit(1)\n```\nThere is also support to others Logical Gates:  \n`nor_`, `nand_`, xor_` and `xnor_`\n\n### Bytes\nThere is also a Bytes class.\n```python\nfrom bitjoy.dtypes import Bytes\n```\nPassing a list of Bit to the Bytes' constructor to creating a bytes instance. *NOTE that bytes only have 8 bits. So passing more or less it'll throw an error.*\n```python\nbits = [Bit(0), Bit(0), Bit(0), Bit(0), Bit(1), Bit(1), Bit(0), Bit(0)]\nb = Bytes(bits)\n# Bytes(0, 0, 0, 0, 1, 1, 0, 0)\n```\nTo creating a easy bytes, use `int_to_bytes` function from `utils` to help.\n```python\nfrom bitjoy.utils import int_to_bytes\n\nb1 = int_to_bytes(10)\n# Bytes(0, 0, 0, 0, 1, 0, 1, 0)\nb2 = int_to_bytes(175)\n# Bytes(1, 0, 1, 0, 1, 1, 1, 1)\n```\n- Adding Bytes\nBytes class also has support to `+` operand with `__add__` method.\n```python\nb1_b2 = b1 + b2\n# Bytes(1, 0, 1, 1, 1, 0, 0, 1)\n```\n- Casting\nBytes supports casting with other number types: `int`, `bin`, `oct` and `hex`.\n```python\nint(b1_b2)\n# 185\n\nbin(b1_b2)\n# '0b10111001'\n\noct(b1_b2)\n# '0o271'\n\nhex(b1_b2)\n# '0xb9'\n```\n\n### Adders\nFor arithmetic operators, the class `Adder` has two method to make additions:  \n`half`: to [half-adder](https://www.gatevidyalay.com/half-adder/)  \n`full`: to [full-adder](https://www.gatevidyalay.com/full-adder/)", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/senavs/BitJoy", "keywords": "bitjoy,bit,bytes,logical-operators,int_to_bytes,half-adder,full-adder,boolean,gates,abstraction", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "bitjoy", "package_url": "https://pypi.org/project/bitjoy/", "platform": "", "project_url": "https://pypi.org/project/bitjoy/", "project_urls": {"Homepage": "https://github.com/senavs/BitJoy"}, "release_url": "https://pypi.org/project/bitjoy/1.1/", "requires_dist": null, "requires_python": "", "summary": "Bit, Bytes and Logical Gates Abstraction.", "version": "1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>BitJoy</h1>\n<p>Bit, Bytes and Logical Gates Abstraction.</p>\n<h2>About</h2>\n<p>Repository to 'Padr\u00f5es de Projeto' subject at university. A height level Bit/Bytes and logical circuits abstractions.<br>\nAlso Udacity Machine Learning Engineer Nanodegre program to add these package to PyPi.</p>\n<h2>Usage</h2>\n<h3>Installing</h3>\n<pre>pip install bitjoy\n</pre>\n<h3>Starting with Bit</h3>\n<p>Importing and instantiating Bit class.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">bitjoy.dtypes</span> <span class=\"kn\">import</span> <span class=\"n\">Bit</span>\n\n<span class=\"n\">zero</span> <span class=\"o\">=</span> <span class=\"n\">Bit</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"c1\"># ZeroBit(0)</span>\n<span class=\"n\">one</span> <span class=\"o\">=</span> <span class=\"n\">Bit</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"c1\"># OneBit(1)</span>\n</pre>\n<p>Creating a bit passing <code>0</code> in the <code>__init__</code> method, it will create another class: <code>ZeroBit</code>. The same away, passing <code>1</code>, it will create a <code>OneBit</code>.</p>\n<h3>Logical Gates</h3>\n<p>There is also support to logical operators (called logical gates or logical circuits).</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">bitjoy.dtypes</span> <span class=\"kn\">import</span> <span class=\"n\">LogicalOperator</span>\n</pre>\n<ul>\n<li>NOT</li>\n</ul>\n<pre><span class=\"n\">LogicalOperator</span><span class=\"o\">.</span><span class=\"n\">not_</span><span class=\"p\">(</span><span class=\"n\">zero</span><span class=\"p\">)</span>\n<span class=\"c1\"># OneBit(1)</span>\n<span class=\"n\">LogicalOperator</span><span class=\"o\">.</span><span class=\"n\">not_</span><span class=\"p\">(</span><span class=\"n\">one</span><span class=\"p\">)</span>\n<span class=\"c1\"># OneBit(0)</span>\n</pre>\n<ul>\n<li>OR</li>\n</ul>\n<pre><span class=\"n\">LogicalOperator</span><span class=\"o\">.</span><span class=\"n\">or_</span><span class=\"p\">(</span><span class=\"n\">zero</span><span class=\"p\">,</span> <span class=\"n\">zero</span><span class=\"p\">)</span>\n<span class=\"c1\"># ZeroBit(0)</span>\n<span class=\"n\">LogicalOperator</span><span class=\"o\">.</span><span class=\"n\">or_</span><span class=\"p\">(</span><span class=\"n\">zero</span><span class=\"p\">,</span> <span class=\"n\">one</span><span class=\"p\">)</span>\n<span class=\"c1\"># OneBit(1)</span>\n<span class=\"n\">LogicalOperator</span><span class=\"o\">.</span><span class=\"n\">or_</span><span class=\"p\">(</span><span class=\"n\">one</span><span class=\"p\">,</span> <span class=\"n\">zero</span><span class=\"p\">)</span>\n<span class=\"c1\"># OneBit(1)</span>\n<span class=\"n\">LogicalOperator</span><span class=\"o\">.</span><span class=\"n\">or_</span><span class=\"p\">(</span><span class=\"n\">one</span><span class=\"p\">,</span> <span class=\"n\">one</span><span class=\"p\">)</span>\n<span class=\"c1\"># OneBit(1)</span>\n</pre>\n<ul>\n<li>AND</li>\n</ul>\n<pre><span class=\"n\">LogicalOperator</span><span class=\"o\">.</span><span class=\"n\">and_</span><span class=\"p\">(</span><span class=\"n\">zero</span><span class=\"p\">,</span> <span class=\"n\">zero</span><span class=\"p\">)</span>\n<span class=\"c1\"># ZeroBit(0)</span>\n<span class=\"n\">LogicalOperator</span><span class=\"o\">.</span><span class=\"n\">and_</span><span class=\"p\">(</span><span class=\"n\">zero</span><span class=\"p\">,</span> <span class=\"n\">one</span><span class=\"p\">)</span>\n<span class=\"c1\"># ZeroBit(0)</span>\n<span class=\"n\">LogicalOperator</span><span class=\"o\">.</span><span class=\"n\">and_</span><span class=\"p\">(</span><span class=\"n\">one</span><span class=\"p\">,</span> <span class=\"n\">zero</span><span class=\"p\">)</span>\n<span class=\"c1\"># ZeroBit(0)</span>\n<span class=\"n\">LogicalOperator</span><span class=\"o\">.</span><span class=\"n\">and_</span><span class=\"p\">(</span><span class=\"n\">one</span><span class=\"p\">,</span> <span class=\"n\">one</span><span class=\"p\">)</span>\n<span class=\"c1\"># OneBit(1)</span>\n</pre>\n<p>There is also support to others Logical Gates:<br>\n<code>nor_</code>, <code>nand_</code>, xor_<code>and</code>xnor_`</p>\n<h3>Bytes</h3>\n<p>There is also a Bytes class.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">bitjoy.dtypes</span> <span class=\"kn\">import</span> <span class=\"n\">Bytes</span>\n</pre>\n<p>Passing a list of Bit to the Bytes' constructor to creating a bytes instance. <em>NOTE that bytes only have 8 bits. So passing more or less it'll throw an error.</em></p>\n<pre><span class=\"n\">bits</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">Bit</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"n\">Bit</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"n\">Bit</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"n\">Bit</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"n\">Bit</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"n\">Bit</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"n\">Bit</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"n\">Bit</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)]</span>\n<span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">Bytes</span><span class=\"p\">(</span><span class=\"n\">bits</span><span class=\"p\">)</span>\n<span class=\"c1\"># Bytes(0, 0, 0, 0, 1, 1, 0, 0)</span>\n</pre>\n<p>To creating a easy bytes, use <code>int_to_bytes</code> function from <code>utils</code> to help.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">bitjoy.utils</span> <span class=\"kn\">import</span> <span class=\"n\">int_to_bytes</span>\n\n<span class=\"n\">b1</span> <span class=\"o\">=</span> <span class=\"n\">int_to_bytes</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"c1\"># Bytes(0, 0, 0, 0, 1, 0, 1, 0)</span>\n<span class=\"n\">b2</span> <span class=\"o\">=</span> <span class=\"n\">int_to_bytes</span><span class=\"p\">(</span><span class=\"mi\">175</span><span class=\"p\">)</span>\n<span class=\"c1\"># Bytes(1, 0, 1, 0, 1, 1, 1, 1)</span>\n</pre>\n<ul>\n<li>Adding Bytes\nBytes class also has support to <code>+</code> operand with <code>__add__</code> method.</li>\n</ul>\n<pre><span class=\"n\">b1_b2</span> <span class=\"o\">=</span> <span class=\"n\">b1</span> <span class=\"o\">+</span> <span class=\"n\">b2</span>\n<span class=\"c1\"># Bytes(1, 0, 1, 1, 1, 0, 0, 1)</span>\n</pre>\n<ul>\n<li>Casting\nBytes supports casting with other number types: <code>int</code>, <code>bin</code>, <code>oct</code> and <code>hex</code>.</li>\n</ul>\n<pre><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">b1_b2</span><span class=\"p\">)</span>\n<span class=\"c1\"># 185</span>\n\n<span class=\"nb\">bin</span><span class=\"p\">(</span><span class=\"n\">b1_b2</span><span class=\"p\">)</span>\n<span class=\"c1\"># '0b10111001'</span>\n\n<span class=\"nb\">oct</span><span class=\"p\">(</span><span class=\"n\">b1_b2</span><span class=\"p\">)</span>\n<span class=\"c1\"># '0o271'</span>\n\n<span class=\"nb\">hex</span><span class=\"p\">(</span><span class=\"n\">b1_b2</span><span class=\"p\">)</span>\n<span class=\"c1\"># '0xb9'</span>\n</pre>\n<h3>Adders</h3>\n<p>For arithmetic operators, the class <code>Adder</code> has two method to make additions:<br>\n<code>half</code>: to <a href=\"https://www.gatevidyalay.com/half-adder/\" rel=\"nofollow\">half-adder</a><br>\n<code>full</code>: to <a href=\"https://www.gatevidyalay.com/full-adder/\" rel=\"nofollow\">full-adder</a></p>\n\n          </div>"}, "last_serial": 6682841, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "7710b8a584f6f75e71419b93c3c025a5", "sha256": "c5c78b12b33f8808bd21b84e937c0fe4e3c3731b9e61818f8a4cfbee2b41abdb"}, "downloads": -1, "filename": "bitjoy-1.0.tar.gz", "has_sig": false, "md5_digest": "7710b8a584f6f75e71419b93c3c025a5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3980, "upload_time": "2020-02-16T16:22:55", "upload_time_iso_8601": "2020-02-16T16:22:55.732496Z", "url": "https://files.pythonhosted.org/packages/b6/06/637cc60eeed059033827dadedb9f8e3d1de27816ea7e419e180c6e6bd53a/bitjoy-1.0.tar.gz", "yanked": false}], "1.1": [{"comment_text": "", "digests": {"md5": "cdcf970ab2a806cdd42b39092f5095ed", "sha256": "16a71f552c20ed4ccb3b5ffca9b486c284e30e73247b492bad2ae3e78decdae3"}, "downloads": -1, "filename": "bitjoy-1.1b.tar.gz", "has_sig": false, "md5_digest": "cdcf970ab2a806cdd42b39092f5095ed", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4366, "upload_time": "2020-02-23T02:54:21", "upload_time_iso_8601": "2020-02-23T02:54:21.659633Z", "url": "https://files.pythonhosted.org/packages/16/45/428a20fed4e40995e40fbb9105268d9ed250b121cc227ab8685e59ffc989/bitjoy-1.1b.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "cdcf970ab2a806cdd42b39092f5095ed", "sha256": "16a71f552c20ed4ccb3b5ffca9b486c284e30e73247b492bad2ae3e78decdae3"}, "downloads": -1, "filename": "bitjoy-1.1b.tar.gz", "has_sig": false, "md5_digest": "cdcf970ab2a806cdd42b39092f5095ed", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4366, "upload_time": "2020-02-23T02:54:21", "upload_time_iso_8601": "2020-02-23T02:54:21.659633Z", "url": "https://files.pythonhosted.org/packages/16/45/428a20fed4e40995e40fbb9105268d9ed250b121cc227ab8685e59ffc989/bitjoy-1.1b.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:37:16 2020"}