{"info": {"author": "Francisco Depascuali", "author_email": "francisco.depascuali@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.6", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "|Python| |License|\n\nwikiquotes-python-api\n=====================\n\nThis library is intended to be a python API for wikiquotes (inspired by\n`python-wikiquotes <https://github.com/federicotdn/python-wikiquotes/>`__).\n\nTable of Contents\n-----------------\n\n-  `Usage <#usage>`__\n-  `Motivation <#motivation>`__\n-  `Search <#search>`__\n-  `Output <#output>`__\n-  `Testing <#testing>`__\n\nUsage\n-----\n\n.. code:: python\n\n    >>> import wikiquotes\n\n    >>> wikiquotes.search(\"gandi\", \"english\")\n    [u'Mahatma Gandhi', u'Indira Gandhi', u'Rahul Gandhi', u'Rajiv Gandhi', u'Arun Manilal Gandhi', u'Gandhi (film)', u'Anand Gandhi', u'Virchand Gandhi', u'Maneka Gandhi', u'Blindness']\n\n    >>> wikiquotes.get_quotes('Hau Pei-tsun', \"english\")\n    # [u\"The slogans of 'countering back the mainland' created by Chiang Kai-shek and 'liberating Taiwan' by Mao Zedong several decades ago should be forgotten because none of them could be put into practice.\",\n    #  u'When people on both sides of the Strait reach a consensus on their political system, unification will come to fruition naturally.',\n    #  u'Taiwanese independence is a dead end.']\n\n    >>> wikiquotes.quote_of_the_day(\"english\")\n    # (u'Even after killing ninety nine tigers the Maharaja should beware of the hundredth.', u'Kalki Krishnamurthy')\n\n    >>> wikiquotes.quote_of_the_day(\"spanish\")\n    # (u'Por San Ferm\\xedn, el calor no tiene fin', u'Refr\\xe1n espa\\xf1ol')\n\n    >>> wikiquotes.random_quote(\"Aristotle\", \"english\")\n    # u'For the things we have to learn before we can do, we learn by doing.'\n\n    >>> wikiquotes.supported_languages()\n    # ['english', 'spanish']\n\nMotivation\n----------\n\nThere seems to be two options for retrieving quotes from WikiQuotes using python: To implement it\nyourself or to use `python-wikiquotes <https://github.com/federicotdn/python-wikiquotes/>`__. At a\nfirst glance, I chose the second option and used that library. However, usage and code inspection\nover `python-wikiquotes <https://github.com/federicotdn/python-wikiquotes/>`__ lead me to choose the\nfirst approach and develop a library.\n\nThe main reasons for this decision were that: 1. Quotes retrieved weren't all the quotes in\nwikiquotes API (tried with different authors). 2. It doesn't work for python 2.x 2. The code was too\ncomplex for what it was achieving. The choice in that project was to use urllib to retrieve the\nquotes, and lxml to parse the html.\n\nThis project: 1. Adds tests for retrieving all the quotes from several authors (Though this point is\ndifficult to satisfy, because quotes don't respect a format for all authors). 2. Works for python\n2.x and 3.x 3. Uses requests and BeautifulSoup, which abstract great part of the complexity which is\npresent in `python-wikiquotes <https://github.com/federicotdn/python-wikiquotes/>`__.\n\nAnyway, the correct approach would be to try both and stick with the one that gives you the best\nresults.\n\nSearch\n------\n\nQuotes are retrieved by searching first for the correct author. This strives for robustness, because\nit allows to return a quote whether the input is the correct name of the author or not. At the same\ntime, note that subsequent calls to WikiQuotes api have to be made to grab suggestions (see\n`here <https://github.com/FranDepascuali/wikiquotes-python-api/blob/master/wikiquotes/managers/api_manager.py#L20>`__).\n\nExample: \"shakspare\" -> \"shakespeare\" -> ['William Shakespeare', 'Last words in Shakespeare',\n'Shakespeare in Love', ...] -> get\\_quotes = 4 calls.\n\nOutput\n------\n\nWhile in python 3.x str type = unicode, in python 2.x str type != unicode. Therefore (and to be\nconsistent), all string output are unicode strings, independent of python's version. If you call any\nfunction from the API that have non-english characters, you will see some weird characters.\n\n.. code:: python\n\n    >>> wikiquotes.random_quote(\"borges\", \"espa\u00f1ol\")\n    # u'\\xabTodos caminamos hacia el anonimato, solo que los mediocres llegan un poco antes\\xbb.'\n\nThis is not incorrect, it is the underlying representation of the format of the string. You could\nencode the string in utf-8 and print it (or just print it and your python interpreter should convert\nit automatically).\n\n.. code:: python\n\n    >>> print(u'\\xabTodos caminamos hacia el anonimato, solo que los mediocres llegan un poco antes\\xbb.'.encode('utf8'))\n    # \u00abTodos caminamos hacia el anonimato, solo que los mediocres llegan un poco antes\u00bb.\n\nTesting\n-------\n\nThe approach for testing changed: at a first glance, testing was done by manually adding the code to\ntest each author. After that, I realized that the structure was the same for every author: We need\nthe name, the language and the quotes. Using some *black* magic for parametrizing tests, I could\nextract all the logic to code and have a text file for each author. (See\n`author\\_test <https://github.com/FranDepascuali/wikiquotes-python-api/blob/master/tests/test_suite/author_test.py>`__\nfor more info.)\n\nThe way of testing right now is to add a txt file of the author to test's\n`authors <https://github.com/FranDepascuali/wikiquotes-python-api/tree/master/tests/authors>`__. For\nexample,\n`here <https://github.com/FranDepascuali/wikiquotes-python-api/blob/master/tests/authors/dijkstra.txt>`__\nis the test for Dijkstra quotes in english. Adding a new author is a txt file for the author (the\nname is irrelevant, but should be the author name) and respecting the following format. 1. First\nline: Author's name (or the suffix of the wikiquotes page, because sometimes wikipedia has ambiguate\nredirections if author name is used ). 2. Second line: language. 3. Third line: empty. 4. Following\nlines should contain one quote per line.\n\n.. |Python| image:: https://img.shields.io/badge/python-2.x%2F3.x-blue.svg\n.. |License| image:: https://img.shields.io/badge/license-MIT-blue.svg\n   :target: https://opensource.org/licenses/MIT\n", "description_content_type": null, "docs_url": null, "download_url": "https://github.com/FranDepascuali/wikiquotes-python-api/archive/1.4.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/FranDepascuali/wikiquotes-python-api", "keywords": "", "license": "MIT License\n\nCopyright (c) 2017 Francisco Depascuali\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n", "maintainer": "", "maintainer_email": "", "name": "wikiquotes", "package_url": "https://pypi.org/project/wikiquotes/", "platform": "any", "project_url": "https://pypi.org/project/wikiquotes/", "project_urls": {"Download": "https://github.com/FranDepascuali/wikiquotes-python-api/archive/1.4.tar.gz", "Homepage": "https://github.com/FranDepascuali/wikiquotes-python-api"}, "release_url": "https://pypi.org/project/wikiquotes/1.4/", "requires_dist": null, "requires_python": "", "summary": "Wikiquotes python API", "version": "1.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><img alt=\"Python\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d124d9fa07db1d2c449e6c3a17cd2c90af7e57cf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f707974686f6e2d322e78253246332e782d626c75652e737667\"> <a href=\"https://opensource.org/licenses/MIT\" rel=\"nofollow\"><img alt=\"License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c88fab50b4a1dc0cd91faeb7ba5654d56e380260/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d626c75652e737667\"></a></p>\n<div id=\"wikiquotes-python-api\">\n<h2>wikiquotes-python-api</h2>\n<p>This library is intended to be a python API for wikiquotes (inspired by\n<a href=\"https://github.com/federicotdn/python-wikiquotes/\" rel=\"nofollow\">python-wikiquotes</a>).</p>\n<div id=\"table-of-contents\">\n<h3>Table of Contents</h3>\n<ul>\n<li><a href=\"#usage\" rel=\"nofollow\">Usage</a></li>\n<li><a href=\"#motivation\" rel=\"nofollow\">Motivation</a></li>\n<li><a href=\"#search\" rel=\"nofollow\">Search</a></li>\n<li><a href=\"#output\" rel=\"nofollow\">Output</a></li>\n<li><a href=\"#testing\" rel=\"nofollow\">Testing</a></li>\n</ul>\n</div>\n<div id=\"usage\">\n<h3>Usage</h3>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">wikiquotes</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">wikiquotes</span><span class=\"o\">.</span><span class=\"n\">search</span><span class=\"p\">(</span><span class=\"s2\">\"gandi\"</span><span class=\"p\">,</span> <span class=\"s2\">\"english\"</span><span class=\"p\">)</span>\n<span class=\"p\">[</span><span class=\"sa\">u</span><span class=\"s1\">'Mahatma Gandhi'</span><span class=\"p\">,</span> <span class=\"sa\">u</span><span class=\"s1\">'Indira Gandhi'</span><span class=\"p\">,</span> <span class=\"sa\">u</span><span class=\"s1\">'Rahul Gandhi'</span><span class=\"p\">,</span> <span class=\"sa\">u</span><span class=\"s1\">'Rajiv Gandhi'</span><span class=\"p\">,</span> <span class=\"sa\">u</span><span class=\"s1\">'Arun Manilal Gandhi'</span><span class=\"p\">,</span> <span class=\"sa\">u</span><span class=\"s1\">'Gandhi (film)'</span><span class=\"p\">,</span> <span class=\"sa\">u</span><span class=\"s1\">'Anand Gandhi'</span><span class=\"p\">,</span> <span class=\"sa\">u</span><span class=\"s1\">'Virchand Gandhi'</span><span class=\"p\">,</span> <span class=\"sa\">u</span><span class=\"s1\">'Maneka Gandhi'</span><span class=\"p\">,</span> <span class=\"sa\">u</span><span class=\"s1\">'Blindness'</span><span class=\"p\">]</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">wikiquotes</span><span class=\"o\">.</span><span class=\"n\">get_quotes</span><span class=\"p\">(</span><span class=\"s1\">'Hau Pei-tsun'</span><span class=\"p\">,</span> <span class=\"s2\">\"english\"</span><span class=\"p\">)</span>\n<span class=\"c1\"># [u\"The slogans of 'countering back the mainland' created by Chiang Kai-shek and 'liberating Taiwan' by Mao Zedong several decades ago should be forgotten because none of them could be put into practice.\",</span>\n<span class=\"c1\">#  u'When people on both sides of the Strait reach a consensus on their political system, unification will come to fruition naturally.',</span>\n<span class=\"c1\">#  u'Taiwanese independence is a dead end.']</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">wikiquotes</span><span class=\"o\">.</span><span class=\"n\">quote_of_the_day</span><span class=\"p\">(</span><span class=\"s2\">\"english\"</span><span class=\"p\">)</span>\n<span class=\"c1\"># (u'Even after killing ninety nine tigers the Maharaja should beware of the hundredth.', u'Kalki Krishnamurthy')</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">wikiquotes</span><span class=\"o\">.</span><span class=\"n\">quote_of_the_day</span><span class=\"p\">(</span><span class=\"s2\">\"spanish\"</span><span class=\"p\">)</span>\n<span class=\"c1\"># (u'Por San Ferm\\xedn, el calor no tiene fin', u'Refr\\xe1n espa\\xf1ol')</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">wikiquotes</span><span class=\"o\">.</span><span class=\"n\">random_quote</span><span class=\"p\">(</span><span class=\"s2\">\"Aristotle\"</span><span class=\"p\">,</span> <span class=\"s2\">\"english\"</span><span class=\"p\">)</span>\n<span class=\"c1\"># u'For the things we have to learn before we can do, we learn by doing.'</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">wikiquotes</span><span class=\"o\">.</span><span class=\"n\">supported_languages</span><span class=\"p\">()</span>\n<span class=\"c1\"># ['english', 'spanish']</span>\n</pre>\n</div>\n<div id=\"motivation\">\n<h3>Motivation</h3>\n<p>There seems to be two options for retrieving quotes from WikiQuotes using python: To implement it\nyourself or to use <a href=\"https://github.com/federicotdn/python-wikiquotes/\" rel=\"nofollow\">python-wikiquotes</a>. At a\nfirst glance, I chose the second option and used that library. However, usage and code inspection\nover <a href=\"https://github.com/federicotdn/python-wikiquotes/\" rel=\"nofollow\">python-wikiquotes</a> lead me to choose the\nfirst approach and develop a library.</p>\n<p>The main reasons for this decision were that: 1. Quotes retrieved weren\u2019t all the quotes in\nwikiquotes API (tried with different authors). 2. It doesn\u2019t work for python 2.x 2. The code was too\ncomplex for what it was achieving. The choice in that project was to use urllib to retrieve the\nquotes, and lxml to parse the html.</p>\n<p>This project: 1. Adds tests for retrieving all the quotes from several authors (Though this point is\ndifficult to satisfy, because quotes don\u2019t respect a format for all authors). 2. Works for python\n2.x and 3.x 3. Uses requests and BeautifulSoup, which abstract great part of the complexity which is\npresent in <a href=\"https://github.com/federicotdn/python-wikiquotes/\" rel=\"nofollow\">python-wikiquotes</a>.</p>\n<p>Anyway, the correct approach would be to try both and stick with the one that gives you the best\nresults.</p>\n</div>\n<div id=\"search\">\n<h3>Search</h3>\n<p>Quotes are retrieved by searching first for the correct author. This strives for robustness, because\nit allows to return a quote whether the input is the correct name of the author or not. At the same\ntime, note that subsequent calls to WikiQuotes api have to be made to grab suggestions (see\n<a href=\"https://github.com/FranDepascuali/wikiquotes-python-api/blob/master/wikiquotes/managers/api_manager.py#L20\" rel=\"nofollow\">here</a>).</p>\n<p>Example: \u201cshakspare\u201d -&gt; \u201cshakespeare\u201d -&gt; [\u2018William Shakespeare\u2019, \u2018Last words in Shakespeare\u2019,\n\u2018Shakespeare in Love\u2019, \u2026] -&gt; get_quotes = 4 calls.</p>\n</div>\n<div id=\"output\">\n<h3>Output</h3>\n<p>While in python 3.x str type = unicode, in python 2.x str type != unicode. Therefore (and to be\nconsistent), all string output are unicode strings, independent of python\u2019s version. If you call any\nfunction from the API that have non-english characters, you will see some weird characters.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">wikiquotes</span><span class=\"o\">.</span><span class=\"n\">random_quote</span><span class=\"p\">(</span><span class=\"s2\">\"borges\"</span><span class=\"p\">,</span> <span class=\"s2\">\"espa\u00f1ol\"</span><span class=\"p\">)</span>\n<span class=\"c1\"># u'\\xabTodos caminamos hacia el anonimato, solo que los mediocres llegan un poco antes\\xbb.'</span>\n</pre>\n<p>This is not incorrect, it is the underlying representation of the format of the string. You could\nencode the string in utf-8 and print it (or just print it and your python interpreter should convert\nit automatically).</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">u</span><span class=\"s1\">'</span><span class=\"se\">\\xab</span><span class=\"s1\">Todos caminamos hacia el anonimato, solo que los mediocres llegan un poco antes</span><span class=\"se\">\\xbb</span><span class=\"s1\">.'</span><span class=\"o\">.</span><span class=\"n\">encode</span><span class=\"p\">(</span><span class=\"s1\">'utf8'</span><span class=\"p\">))</span>\n<span class=\"c1\"># \u00abTodos caminamos hacia el anonimato, solo que los mediocres llegan un poco antes\u00bb.</span>\n</pre>\n</div>\n<div id=\"testing\">\n<h3>Testing</h3>\n<p>The approach for testing changed: at a first glance, testing was done by manually adding the code to\ntest each author. After that, I realized that the structure was the same for every author: We need\nthe name, the language and the quotes. Using some <em>black</em> magic for parametrizing tests, I could\nextract all the logic to code and have a text file for each author. (See\n<a href=\"https://github.com/FranDepascuali/wikiquotes-python-api/blob/master/tests/test_suite/author_test.py\" rel=\"nofollow\">author_test</a>\nfor more info.)</p>\n<p>The way of testing right now is to add a txt file of the author to test\u2019s\n<a href=\"https://github.com/FranDepascuali/wikiquotes-python-api/tree/master/tests/authors\" rel=\"nofollow\">authors</a>. For\nexample,\n<a href=\"https://github.com/FranDepascuali/wikiquotes-python-api/blob/master/tests/authors/dijkstra.txt\" rel=\"nofollow\">here</a>\nis the test for Dijkstra quotes in english. Adding a new author is a txt file for the author (the\nname is irrelevant, but should be the author name) and respecting the following format. 1. First\nline: Author\u2019s name (or the suffix of the wikiquotes page, because sometimes wikipedia has ambiguate\nredirections if author name is used ). 2. Second line: language. 3. Third line: empty. 4. Following\nlines should contain one quote per line.</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 3209753, "releases": {"1.1": [{"comment_text": "", "digests": {"md5": "639481f688c9494da6afd6dc049edb66", "sha256": "2e92c9c07a64acb80666315c1a686af4f43f9d7f197cd8a99b079d47ccd25c34"}, "downloads": -1, "filename": "wikiquotes-1.1.tar.gz", "has_sig": false, "md5_digest": "639481f688c9494da6afd6dc049edb66", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14142, "upload_time": "2017-09-13T17:59:18", "upload_time_iso_8601": "2017-09-13T17:59:18.572221Z", "url": "https://files.pythonhosted.org/packages/f5/7d/ed81208d2ff7c200229f9774a6131c39ff25c4a6fd695176ab16fbc036f6/wikiquotes-1.1.tar.gz", "yanked": false}], "1.2": [{"comment_text": "", "digests": {"md5": "d4a495f98d4540784e19384b9edf4412", "sha256": "1024658f0c75c9aa74b4d8640286d601f3089b21b3c6a786e65535ab3d85c04e"}, "downloads": -1, "filename": "wikiquotes-1.2.tar.gz", "has_sig": false, "md5_digest": "d4a495f98d4540784e19384b9edf4412", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14207, "upload_time": "2017-09-13T18:26:25", "upload_time_iso_8601": "2017-09-13T18:26:25.175896Z", "url": "https://files.pythonhosted.org/packages/de/60/e8130b3b6c46d4a2fa8dab60cf745b66cacd9a7950ba78381d6f82cce004/wikiquotes-1.2.tar.gz", "yanked": false}], "1.3": [{"comment_text": "", "digests": {"md5": "0261d522243142e3672db37574426393", "sha256": "1c150461131ef34d5950faa9a01d4cd632a0199830090fe66976d457f95bee75"}, "downloads": -1, "filename": "wikiquotes-1.3.tar.gz", "has_sig": false, "md5_digest": "0261d522243142e3672db37574426393", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15199, "upload_time": "2017-09-27T18:54:21", "upload_time_iso_8601": "2017-09-27T18:54:21.353391Z", "url": "https://files.pythonhosted.org/packages/30/62/bff707d09b5162bc94d44d231c5c147e7b22d766e16b92d032489edcec26/wikiquotes-1.3.tar.gz", "yanked": false}], "1.4": [{"comment_text": "", "digests": {"md5": "50ffb06a9e70fec4f31bdd35b74283de", "sha256": "7fcec63405c80d2309e5199328b60dbbbc8b7c6bd2f12ed8d89d64e9193530ac"}, "downloads": -1, "filename": "wikiquotes-1.4.tar.gz", "has_sig": false, "md5_digest": "50ffb06a9e70fec4f31bdd35b74283de", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15297, "upload_time": "2017-09-28T11:12:51", "upload_time_iso_8601": "2017-09-28T11:12:51.830303Z", "url": "https://files.pythonhosted.org/packages/e6/45/0ed50f224a4559fcaea28b851b6b896cb5a0f5c8a5c382034f82e92a664d/wikiquotes-1.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "50ffb06a9e70fec4f31bdd35b74283de", "sha256": "7fcec63405c80d2309e5199328b60dbbbc8b7c6bd2f12ed8d89d64e9193530ac"}, "downloads": -1, "filename": "wikiquotes-1.4.tar.gz", "has_sig": false, "md5_digest": "50ffb06a9e70fec4f31bdd35b74283de", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15297, "upload_time": "2017-09-28T11:12:51", "upload_time_iso_8601": "2017-09-28T11:12:51.830303Z", "url": "https://files.pythonhosted.org/packages/e6/45/0ed50f224a4559fcaea28b851b6b896cb5a0f5c8a5c382034f82e92a664d/wikiquotes-1.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:29:14 2020"}