{"info": {"author": "Mikalai Radchuk", "author_email": "mikalai.radchuk@torchbox.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Web Environment", "Framework :: Django", "Framework :: Django :: 2.0", "Framework :: Django :: 2.1", "Framework :: Django :: 2.2", "Framework :: Wagtail :: 2", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Internet :: WWW/HTTP :: Site Management"], "description": "# [wagtailmedia](https://pypi.org/project/wagtailmedia/) [![PyPI](https://img.shields.io/pypi/v/wagtailmedia.svg)](https://pypi.org/project/wagtailmedia/) [![Build Status](https://travis-ci.org/torchbox/wagtailmedia.svg?branch=master)](https://travis-ci.org/torchbox/wagtailmedia)\n\nA module for Wagtail that provides functionality similar to `wagtail.documents` module,\nbut for audio and video files.\n\n## Compatibility\n\n`wagtailmedia` is compatible with Wagtail 2.2 and above. For compatibility with Wagtail 2.1 and 2.0, use the [v0.2.0 release](https://pypi.org/project/wagtailmedia/0.2.0/).\n\n## How to install\n\nInstall using pip:\n\n```sh\npip install wagtailmedia\n```\n\n### Settings\n\nIn your settings file, add `wagtailmedia` to `INSTALLED_APPS`:\n\n```python\nINSTALLED_APPS = [\n    # ...\n    'wagtailmedia',\n    # ...\n]\n```\n\n### URL configuration\n\nYour project needs to be set up to serve user-uploaded files from `MEDIA_ROOT`.\nYour Django project may already have this in place, but if not, add the following snippet to `urls.py`:\n\n```python\nfrom django.conf import settings\nfrom django.conf.urls.static import static\n\nurlpatterns = [\n    # ... the rest of your URLconf goes here ...\n] + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)\n```\n\nNote that this only works in development mode (`DEBUG = True`);\nin production, you will need to configure your web server to serve files from `MEDIA_ROOT`.\nFor further details, see the Django documentation: [Serving files uploaded by a user during development](https://docs.djangoproject.com/en/stable/howto/static-files/#serving-files-uploaded-by-a-user-during-development)\nand [Deploying static files](https://docs.djangoproject.com/en/stable/howto/static-files/deployment/).\n\nWith this configuration in place, you are ready to run `./manage.py migrate` to create the database tables used by wagtailmedia.\n\n### Custom `Media` model\n\nThe `Media` model can be customised. To do this, you need\nto add a new model to your project that inherits from `wagtailmedia.models.AbstractMedia`.\n\nThen set the `WAGTAILMEDIA_MEDIA_MODEL` setting to point to it:\n\n```python\nWAGTAILMEDIA_MEDIA_MODEL = 'mymedia.CustomMedia'\n```\n\nYou can customize the model form used with your `Media` model using the `WAGTAILMEDIA_MEDIA_FORM_BASE` setting.  It should be the dotted path to the form and will be used as the base form passed to modelform_factory() when constructing the media form.\n\n### Hooks\n\n#### `construct_media_chooser_queryset`\n\nCalled when rendering the media chooser view, to allow the media listing QuerySet to be customised.\nThe callable passed into the hook will receive the current media QuerySet and the request object, and must return a Media QuerySet (either the original one, or a new one).\n\n```python\nfrom wagtail.core import hooks\n\n@hooks.register('construct_media_chooser_queryset')\ndef show_my_uploaded_media_only(media, request):\n    # Only show uploaded media\n    media = media.filter(uploaded_by_user=request.user)\n\n    return media\n```\n\n## How to use\n\n### As a regular Django field\n\nYou can use `Media` as a regular Django field. Here\u2019s an example:\n\n```python\nfrom __future__ import unicode_literals\n\nfrom django.db import models\n\nfrom wagtail.wagtailcore.models import Page\nfrom wagtail.wagtailcore.fields import RichTextField\nfrom wagtail.wagtailadmin.edit_handlers import FieldPanel\n\nfrom wagtailmedia.edit_handlers import MediaChooserPanel\n\n\nclass BlogPageWithMedia(Page):\n    author = models.CharField(max_length=255)\n    date = models.DateField(\"Post date\")\n    body = RichTextField(blank=False)\n    featured_media = models.ForeignKey(\n        'wagtailmedia.Media',\n        null=True,\n        blank=True,\n        on_delete=models.SET_NULL,\n        related_name='+'\n    )\n\n    content_panels = Page.content_panels + [\n        FieldPanel('author'),\n        FieldPanel('date'),\n        FieldPanel('body'),\n        MediaChooserPanel('featured_media'),\n    ]\n```\n\n#### Name clash with Wagtail\n\nDo not name the field `media`. When rendering the admin UI, Wagtail uses a `media` property for its fields\u2019 CSS & JS assets loading. Using `media` as a field name breaks the admin UI ([#54](https://github.com/torchbox/wagtailmedia/issues/54)).\n\n### In StreamField\n\nYou can use `Media` in StreamField. To do this, you need\nto add a new block class that inherits from `wagtailmedia.blocks.AbstractMediaChooserBlock`\nand implement your own `render_basic` method.\n\nHere is an example:\n\n```python\nfrom __future__ import unicode_literals\n\nfrom django.db import models\nfrom django.forms.utils import flatatt\nfrom django.utils.html import format_html, format_html_join\n\nfrom wagtail.wagtailcore.models import Page\nfrom wagtail.wagtailcore.fields import StreamField\nfrom wagtail.wagtailcore import blocks\nfrom wagtail.wagtailadmin.edit_handlers import FieldPanel, StreamFieldPanel\n\nfrom wagtailmedia.blocks import AbstractMediaChooserBlock\n\n\nclass TestMediaBlock(AbstractMediaChooserBlock):\n    def render_basic(self, value, context=None):\n        if not value:\n            return ''\n\n        if value.type == 'video':\n            player_code = '''\n            <div>\n                <video width=\"320\" height=\"240\" controls>\n                    {0}\n                    Your browser does not support the video tag.\n                </video>\n            </div>\n            '''\n        else:\n            player_code = '''\n            <div>\n                <audio controls>\n                    {0}\n                    Your browser does not support the audio element.\n                </audio>\n            </div>\n            '''\n\n        return format_html(player_code, format_html_join(\n            '\\n', \"<source{0}>\",\n            [[flatatt(s)] for s in value.sources]\n        ))\n\n\nclass BlogPage(Page):\n    author = models.CharField(max_length=255)\n    date = models.DateField(\"Post date\")\n    body = StreamField([\n        ('heading', blocks.CharBlock(classname=\"full title\", icon='title')),\n        ('paragraph', blocks.RichTextBlock(icon='pilcrow')),\n        ('media', TestMediaBlock(icon='media')),\n    ])\n\n    content_panels = Page.content_panels + [\n        FieldPanel('author'),\n        FieldPanel('date'),\n        StreamFieldPanel('body'),\n    ]\n```\n\n## Contributing\n\n### Install\n\nTo make changes to this project, first clone this repository:\n\n```sh\ngit clone git@github.com:torchbox/wagtailmedia.git\ncd wagtailmedia\n```\n\nWith your preferred virtualenv activated, install testing dependencies:\n\n```sh\npip install -e .[testing] -U\n```\n\n### How to run tests\n\nNow you can run tests as shown below:\n\n```sh\npython runtests.py\n```\n\nAlternately, you can skip local configuration and use the provided vagrant environment for testing.\n[Reference its README for further details.](vagrant/README)\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/torchbox/wagtailmedia", "keywords": "", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "wagtailmedia", "package_url": "https://pypi.org/project/wagtailmedia/", "platform": "", "project_url": "https://pypi.org/project/wagtailmedia/", "project_urls": {"Homepage": "https://github.com/torchbox/wagtailmedia"}, "release_url": "https://pypi.org/project/wagtailmedia/0.5.0/", "requires_dist": ["wagtail (>=2.2)", "mock (>=1.0.0) ; extra == 'testing'", "coverage (>=3.7.0) ; extra == 'testing'", "flake8 (>=2.2.0) ; extra == 'testing'", "isort ; extra == 'testing'", "tox (==3.9.0) ; extra == 'testing'", "psycopg2-binary ; extra == 'testing'", "django-redis-cache ; extra == 'testing'"], "requires_python": "", "summary": "A module for Wagtail that provides functionality similar to wagtail.documents module, but for audio and video files.", "version": "0.5.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1><a href=\"https://pypi.org/project/wagtailmedia/\" rel=\"nofollow\">wagtailmedia</a> <a href=\"https://pypi.org/project/wagtailmedia/\" rel=\"nofollow\"><img alt=\"PyPI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c1bbaeb8fdb16065a2ded9236ec121c317ac446d/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f7761677461696c6d656469612e737667\"></a> <a href=\"https://travis-ci.org/torchbox/wagtailmedia\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9d586fc7910d97ed6a96ff4dc86140115c45cc46/68747470733a2f2f7472617669732d63692e6f72672f746f726368626f782f7761677461696c6d656469612e7376673f6272616e63683d6d6173746572\"></a></h1>\n<p>A module for Wagtail that provides functionality similar to <code>wagtail.documents</code> module,\nbut for audio and video files.</p>\n<h2>Compatibility</h2>\n<p><code>wagtailmedia</code> is compatible with Wagtail 2.2 and above. For compatibility with Wagtail 2.1 and 2.0, use the <a href=\"https://pypi.org/project/wagtailmedia/0.2.0/\" rel=\"nofollow\">v0.2.0 release</a>.</p>\n<h2>How to install</h2>\n<p>Install using pip:</p>\n<pre>pip install wagtailmedia\n</pre>\n<h3>Settings</h3>\n<p>In your settings file, add <code>wagtailmedia</code> to <code>INSTALLED_APPS</code>:</p>\n<pre><span class=\"n\">INSTALLED_APPS</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"c1\"># ...</span>\n    <span class=\"s1\">'wagtailmedia'</span><span class=\"p\">,</span>\n    <span class=\"c1\"># ...</span>\n<span class=\"p\">]</span>\n</pre>\n<h3>URL configuration</h3>\n<p>Your project needs to be set up to serve user-uploaded files from <code>MEDIA_ROOT</code>.\nYour Django project may already have this in place, but if not, add the following snippet to <code>urls.py</code>:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">django.conf</span> <span class=\"kn\">import</span> <span class=\"n\">settings</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.conf.urls.static</span> <span class=\"kn\">import</span> <span class=\"n\">static</span>\n\n<span class=\"n\">urlpatterns</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"c1\"># ... the rest of your URLconf goes here ...</span>\n<span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">static</span><span class=\"p\">(</span><span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">MEDIA_URL</span><span class=\"p\">,</span> <span class=\"n\">document_root</span><span class=\"o\">=</span><span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">MEDIA_ROOT</span><span class=\"p\">)</span>\n</pre>\n<p>Note that this only works in development mode (<code>DEBUG = True</code>);\nin production, you will need to configure your web server to serve files from <code>MEDIA_ROOT</code>.\nFor further details, see the Django documentation: <a href=\"https://docs.djangoproject.com/en/stable/howto/static-files/#serving-files-uploaded-by-a-user-during-development\" rel=\"nofollow\">Serving files uploaded by a user during development</a>\nand <a href=\"https://docs.djangoproject.com/en/stable/howto/static-files/deployment/\" rel=\"nofollow\">Deploying static files</a>.</p>\n<p>With this configuration in place, you are ready to run <code>./manage.py migrate</code> to create the database tables used by wagtailmedia.</p>\n<h3>Custom <code>Media</code> model</h3>\n<p>The <code>Media</code> model can be customised. To do this, you need\nto add a new model to your project that inherits from <code>wagtailmedia.models.AbstractMedia</code>.</p>\n<p>Then set the <code>WAGTAILMEDIA_MEDIA_MODEL</code> setting to point to it:</p>\n<pre><span class=\"n\">WAGTAILMEDIA_MEDIA_MODEL</span> <span class=\"o\">=</span> <span class=\"s1\">'mymedia.CustomMedia'</span>\n</pre>\n<p>You can customize the model form used with your <code>Media</code> model using the <code>WAGTAILMEDIA_MEDIA_FORM_BASE</code> setting.  It should be the dotted path to the form and will be used as the base form passed to modelform_factory() when constructing the media form.</p>\n<h3>Hooks</h3>\n<h4><code>construct_media_chooser_queryset</code></h4>\n<p>Called when rendering the media chooser view, to allow the media listing QuerySet to be customised.\nThe callable passed into the hook will receive the current media QuerySet and the request object, and must return a Media QuerySet (either the original one, or a new one).</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">wagtail.core</span> <span class=\"kn\">import</span> <span class=\"n\">hooks</span>\n\n<span class=\"nd\">@hooks</span><span class=\"o\">.</span><span class=\"n\">register</span><span class=\"p\">(</span><span class=\"s1\">'construct_media_chooser_queryset'</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">show_my_uploaded_media_only</span><span class=\"p\">(</span><span class=\"n\">media</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"c1\"># Only show uploaded media</span>\n    <span class=\"n\">media</span> <span class=\"o\">=</span> <span class=\"n\">media</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">uploaded_by_user</span><span class=\"o\">=</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">user</span><span class=\"p\">)</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">media</span>\n</pre>\n<h2>How to use</h2>\n<h3>As a regular Django field</h3>\n<p>You can use <code>Media</code> as a regular Django field. Here\u2019s an example:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">__future__</span> <span class=\"kn\">import</span> <span class=\"n\">unicode_literals</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">django.db</span> <span class=\"kn\">import</span> <span class=\"n\">models</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">wagtail.wagtailcore.models</span> <span class=\"kn\">import</span> <span class=\"n\">Page</span>\n<span class=\"kn\">from</span> <span class=\"nn\">wagtail.wagtailcore.fields</span> <span class=\"kn\">import</span> <span class=\"n\">RichTextField</span>\n<span class=\"kn\">from</span> <span class=\"nn\">wagtail.wagtailadmin.edit_handlers</span> <span class=\"kn\">import</span> <span class=\"n\">FieldPanel</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">wagtailmedia.edit_handlers</span> <span class=\"kn\">import</span> <span class=\"n\">MediaChooserPanel</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">BlogPageWithMedia</span><span class=\"p\">(</span><span class=\"n\">Page</span><span class=\"p\">):</span>\n    <span class=\"n\">author</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">255</span><span class=\"p\">)</span>\n    <span class=\"n\">date</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">DateField</span><span class=\"p\">(</span><span class=\"s2\">\"Post date\"</span><span class=\"p\">)</span>\n    <span class=\"n\">body</span> <span class=\"o\">=</span> <span class=\"n\">RichTextField</span><span class=\"p\">(</span><span class=\"n\">blank</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n    <span class=\"n\">featured_media</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">ForeignKey</span><span class=\"p\">(</span>\n        <span class=\"s1\">'wagtailmedia.Media'</span><span class=\"p\">,</span>\n        <span class=\"n\">null</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">blank</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">on_delete</span><span class=\"o\">=</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">SET_NULL</span><span class=\"p\">,</span>\n        <span class=\"n\">related_name</span><span class=\"o\">=</span><span class=\"s1\">'+'</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"n\">content_panels</span> <span class=\"o\">=</span> <span class=\"n\">Page</span><span class=\"o\">.</span><span class=\"n\">content_panels</span> <span class=\"o\">+</span> <span class=\"p\">[</span>\n        <span class=\"n\">FieldPanel</span><span class=\"p\">(</span><span class=\"s1\">'author'</span><span class=\"p\">),</span>\n        <span class=\"n\">FieldPanel</span><span class=\"p\">(</span><span class=\"s1\">'date'</span><span class=\"p\">),</span>\n        <span class=\"n\">FieldPanel</span><span class=\"p\">(</span><span class=\"s1\">'body'</span><span class=\"p\">),</span>\n        <span class=\"n\">MediaChooserPanel</span><span class=\"p\">(</span><span class=\"s1\">'featured_media'</span><span class=\"p\">),</span>\n    <span class=\"p\">]</span>\n</pre>\n<h4>Name clash with Wagtail</h4>\n<p>Do not name the field <code>media</code>. When rendering the admin UI, Wagtail uses a <code>media</code> property for its fields\u2019 CSS &amp; JS assets loading. Using <code>media</code> as a field name breaks the admin UI (<a href=\"https://github.com/torchbox/wagtailmedia/issues/54\" rel=\"nofollow\">#54</a>).</p>\n<h3>In StreamField</h3>\n<p>You can use <code>Media</code> in StreamField. To do this, you need\nto add a new block class that inherits from <code>wagtailmedia.blocks.AbstractMediaChooserBlock</code>\nand implement your own <code>render_basic</code> method.</p>\n<p>Here is an example:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">__future__</span> <span class=\"kn\">import</span> <span class=\"n\">unicode_literals</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">django.db</span> <span class=\"kn\">import</span> <span class=\"n\">models</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.forms.utils</span> <span class=\"kn\">import</span> <span class=\"n\">flatatt</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.utils.html</span> <span class=\"kn\">import</span> <span class=\"n\">format_html</span><span class=\"p\">,</span> <span class=\"n\">format_html_join</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">wagtail.wagtailcore.models</span> <span class=\"kn\">import</span> <span class=\"n\">Page</span>\n<span class=\"kn\">from</span> <span class=\"nn\">wagtail.wagtailcore.fields</span> <span class=\"kn\">import</span> <span class=\"n\">StreamField</span>\n<span class=\"kn\">from</span> <span class=\"nn\">wagtail.wagtailcore</span> <span class=\"kn\">import</span> <span class=\"n\">blocks</span>\n<span class=\"kn\">from</span> <span class=\"nn\">wagtail.wagtailadmin.edit_handlers</span> <span class=\"kn\">import</span> <span class=\"n\">FieldPanel</span><span class=\"p\">,</span> <span class=\"n\">StreamFieldPanel</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">wagtailmedia.blocks</span> <span class=\"kn\">import</span> <span class=\"n\">AbstractMediaChooserBlock</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">TestMediaBlock</span><span class=\"p\">(</span><span class=\"n\">AbstractMediaChooserBlock</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">render_basic</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">value</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"s1\">''</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">type</span> <span class=\"o\">==</span> <span class=\"s1\">'video'</span><span class=\"p\">:</span>\n            <span class=\"n\">player_code</span> <span class=\"o\">=</span> <span class=\"s1\">'''</span>\n<span class=\"s1\">            &lt;div&gt;</span>\n<span class=\"s1\">                &lt;video width=\"320\" height=\"240\" controls&gt;</span>\n<span class=\"s1\">                    </span><span class=\"si\">{0}</span><span class=\"s1\"></span>\n<span class=\"s1\">                    Your browser does not support the video tag.</span>\n<span class=\"s1\">                &lt;/video&gt;</span>\n<span class=\"s1\">            &lt;/div&gt;</span>\n<span class=\"s1\">            '''</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">player_code</span> <span class=\"o\">=</span> <span class=\"s1\">'''</span>\n<span class=\"s1\">            &lt;div&gt;</span>\n<span class=\"s1\">                &lt;audio controls&gt;</span>\n<span class=\"s1\">                    </span><span class=\"si\">{0}</span><span class=\"s1\"></span>\n<span class=\"s1\">                    Your browser does not support the audio element.</span>\n<span class=\"s1\">                &lt;/audio&gt;</span>\n<span class=\"s1\">            &lt;/div&gt;</span>\n<span class=\"s1\">            '''</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">format_html</span><span class=\"p\">(</span><span class=\"n\">player_code</span><span class=\"p\">,</span> <span class=\"n\">format_html_join</span><span class=\"p\">(</span>\n            <span class=\"s1\">'</span><span class=\"se\">\\n</span><span class=\"s1\">'</span><span class=\"p\">,</span> <span class=\"s2\">\"&lt;source</span><span class=\"si\">{0}</span><span class=\"s2\">&gt;\"</span><span class=\"p\">,</span>\n            <span class=\"p\">[[</span><span class=\"n\">flatatt</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)]</span> <span class=\"k\">for</span> <span class=\"n\">s</span> <span class=\"ow\">in</span> <span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">sources</span><span class=\"p\">]</span>\n        <span class=\"p\">))</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">BlogPage</span><span class=\"p\">(</span><span class=\"n\">Page</span><span class=\"p\">):</span>\n    <span class=\"n\">author</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">255</span><span class=\"p\">)</span>\n    <span class=\"n\">date</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">DateField</span><span class=\"p\">(</span><span class=\"s2\">\"Post date\"</span><span class=\"p\">)</span>\n    <span class=\"n\">body</span> <span class=\"o\">=</span> <span class=\"n\">StreamField</span><span class=\"p\">([</span>\n        <span class=\"p\">(</span><span class=\"s1\">'heading'</span><span class=\"p\">,</span> <span class=\"n\">blocks</span><span class=\"o\">.</span><span class=\"n\">CharBlock</span><span class=\"p\">(</span><span class=\"n\">classname</span><span class=\"o\">=</span><span class=\"s2\">\"full title\"</span><span class=\"p\">,</span> <span class=\"n\">icon</span><span class=\"o\">=</span><span class=\"s1\">'title'</span><span class=\"p\">)),</span>\n        <span class=\"p\">(</span><span class=\"s1\">'paragraph'</span><span class=\"p\">,</span> <span class=\"n\">blocks</span><span class=\"o\">.</span><span class=\"n\">RichTextBlock</span><span class=\"p\">(</span><span class=\"n\">icon</span><span class=\"o\">=</span><span class=\"s1\">'pilcrow'</span><span class=\"p\">)),</span>\n        <span class=\"p\">(</span><span class=\"s1\">'media'</span><span class=\"p\">,</span> <span class=\"n\">TestMediaBlock</span><span class=\"p\">(</span><span class=\"n\">icon</span><span class=\"o\">=</span><span class=\"s1\">'media'</span><span class=\"p\">)),</span>\n    <span class=\"p\">])</span>\n\n    <span class=\"n\">content_panels</span> <span class=\"o\">=</span> <span class=\"n\">Page</span><span class=\"o\">.</span><span class=\"n\">content_panels</span> <span class=\"o\">+</span> <span class=\"p\">[</span>\n        <span class=\"n\">FieldPanel</span><span class=\"p\">(</span><span class=\"s1\">'author'</span><span class=\"p\">),</span>\n        <span class=\"n\">FieldPanel</span><span class=\"p\">(</span><span class=\"s1\">'date'</span><span class=\"p\">),</span>\n        <span class=\"n\">StreamFieldPanel</span><span class=\"p\">(</span><span class=\"s1\">'body'</span><span class=\"p\">),</span>\n    <span class=\"p\">]</span>\n</pre>\n<h2>Contributing</h2>\n<h3>Install</h3>\n<p>To make changes to this project, first clone this repository:</p>\n<pre>git clone git@github.com:torchbox/wagtailmedia.git\n<span class=\"nb\">cd</span> wagtailmedia\n</pre>\n<p>With your preferred virtualenv activated, install testing dependencies:</p>\n<pre>pip install -e .<span class=\"o\">[</span>testing<span class=\"o\">]</span> -U\n</pre>\n<h3>How to run tests</h3>\n<p>Now you can run tests as shown below:</p>\n<pre>python runtests.py\n</pre>\n<p>Alternately, you can skip local configuration and use the provided vagrant environment for testing.\n<a href=\"vagrant/README\" rel=\"nofollow\">Reference its README for further details.</a></p>\n\n          </div>"}, "last_serial": 6667307, "releases": {"0.1.1": [{"comment_text": "", "digests": {"md5": "9b7a858251596cb91a63d5a48f5414f0", "sha256": "099698179c72a343222296b2436481152856c38f920075e43d37e0f3b78a9da2"}, "downloads": -1, "filename": "wagtailmedia-0.1.1.tar.gz", "has_sig": false, "md5_digest": "9b7a858251596cb91a63d5a48f5414f0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23001, "upload_time": "2016-05-26T10:29:24", "upload_time_iso_8601": "2016-05-26T10:29:24.721086Z", "url": "https://files.pythonhosted.org/packages/27/27/9d6f2f35b3b52637bb28b0cd010bb406f5775941bcca699483aa421dafbb/wagtailmedia-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "9111bd4cfffcf5878167f3b66d0c5425", "sha256": "0fa15b81d15056fe26d6101d03c6349e4f0a5b2af6de17929628da88d4a3092e"}, "downloads": -1, "filename": "wagtailmedia-0.1.2.tar.gz", "has_sig": false, "md5_digest": "9111bd4cfffcf5878167f3b66d0c5425", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22983, "upload_time": "2016-11-03T11:23:29", "upload_time_iso_8601": "2016-11-03T11:23:29.227777Z", "url": "https://files.pythonhosted.org/packages/ac/1d/63cc903a813bbe36f756b17c7b92524e105e9883a5e27073a58dc98dcc14/wagtailmedia-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "792f87bdd95a80f1575993fe1af720b6", "sha256": "4315eac461a253b42192d270267c3663648a90c73e1ecff8394e0de25e4a0940"}, "downloads": -1, "filename": "wagtailmedia-0.1.3.tar.gz", "has_sig": false, "md5_digest": "792f87bdd95a80f1575993fe1af720b6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23106, "upload_time": "2017-01-04T12:27:49", "upload_time_iso_8601": "2017-01-04T12:27:49.142830Z", "url": "https://files.pythonhosted.org/packages/a6/c5/72b8b51c255ecec2ab6abddee9f9a9a943a0756125743cee44c6da46a729/wagtailmedia-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "2a6c5f4883d5a8c4e63e4de21b9fbcf8", "sha256": "e2b7f1c020a0b8f5306a126be511a336c1e26d996ea3dd675fa6fc7d27b5ee16"}, "downloads": -1, "filename": "wagtailmedia-0.1.4.tar.gz", "has_sig": false, "md5_digest": "2a6c5f4883d5a8c4e63e4de21b9fbcf8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23171, "upload_time": "2017-04-16T08:44:36", "upload_time_iso_8601": "2017-04-16T08:44:36.700373Z", "url": "https://files.pythonhosted.org/packages/9e/88/aca1c88efec91656172bb66542f927d0cc5005e80bbb26ef9e151a9c1a7a/wagtailmedia-0.1.4.tar.gz", "yanked": false}], "0.1.5": [{"comment_text": "", "digests": {"md5": "8c068eaec6db7e89957664a1c925e06d", "sha256": "5bbdeec3a2bf2d2b00e68d9fee8673a804610ec336080259f6e7aba89ea0f2e0"}, "downloads": -1, "filename": "wagtailmedia-0.1.5.tar.gz", "has_sig": false, "md5_digest": "8c068eaec6db7e89957664a1c925e06d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23392, "upload_time": "2017-11-02T15:54:21", "upload_time_iso_8601": "2017-11-02T15:54:21.856112Z", "url": "https://files.pythonhosted.org/packages/40/30/810c185ff9c75a6e92aa03698b07e60d651259b2073e918d8795e7256fd8/wagtailmedia-0.1.5.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "ad39cd542c92c128afd3c73682016b76", "sha256": "f6e8ac235aad98514c3cfc43d80c6f8bae32a19bb2ed6204d17149fe6c154d63"}, "downloads": -1, "filename": "wagtailmedia-0.2.0.tar.gz", "has_sig": false, "md5_digest": "ad39cd542c92c128afd3c73682016b76", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25539, "upload_time": "2018-05-24T10:02:39", "upload_time_iso_8601": "2018-05-24T10:02:39.127266Z", "url": "https://files.pythonhosted.org/packages/9b/f2/fbbfc3bb271c8f51db214a4cf10b8c821cebaa14964b3dd51fa0ab23dbb6/wagtailmedia-0.2.0.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "0d4b93415ec0c82efa117c8ac5cff9b9", "sha256": "5872941a085ce718c66710826a9c0fadc4818c9d486bf2d4648ad22045861900"}, "downloads": -1, "filename": "wagtailmedia-0.3.0.tar.gz", "has_sig": false, "md5_digest": "0d4b93415ec0c82efa117c8ac5cff9b9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27878, "upload_time": "2019-05-08T14:25:40", "upload_time_iso_8601": "2019-05-08T14:25:40.729393Z", "url": "https://files.pythonhosted.org/packages/dd/85/c540f60a297ac9704ff6aa9cc2cd3493e6ae4ce7e6f454f064af520113c5/wagtailmedia-0.3.0.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "378c1d24ebc929caf41730518be60cb9", "sha256": "29f6d29ac0a77f27e9870bfe1c25f911f50e47ef0c4c1ae31621c4ac97f4ec20"}, "downloads": -1, "filename": "wagtailmedia-0.3.1.tar.gz", "has_sig": false, "md5_digest": "378c1d24ebc929caf41730518be60cb9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28274, "upload_time": "2019-05-22T14:11:53", "upload_time_iso_8601": "2019-05-22T14:11:53.110774Z", "url": "https://files.pythonhosted.org/packages/2f/e1/34b7b9d7f642fd23c6489b76fc2a02832f154b3a4b007c2a6cf938026a8c/wagtailmedia-0.3.1.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "3c22d4728e6812399d5ca51edfb95b99", "sha256": "4ec2e17d0fd1f6211560ee0fd0eda8a6f71f7cbc2868bed7aca07c9bd8aa8abf"}, "downloads": -1, "filename": "wagtailmedia-0.4.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "3c22d4728e6812399d5ca51edfb95b99", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 43922, "upload_time": "2019-12-06T11:11:10", "upload_time_iso_8601": "2019-12-06T11:11:10.516442Z", "url": "https://files.pythonhosted.org/packages/97/e3/bbdfd57d992c0f1d87b7f0285660dafe37ae48dc8c446feae071b935fca0/wagtailmedia-0.4.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8612f49dfd457d0403ba4fce1a1e69e9", "sha256": "b631af0e67c339e213b273fba53cc82754400feef2887bd662c48f128b8fa28d"}, "downloads": -1, "filename": "wagtailmedia-0.4.0.tar.gz", "has_sig": false, "md5_digest": "8612f49dfd457d0403ba4fce1a1e69e9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30210, "upload_time": "2019-12-06T11:11:12", "upload_time_iso_8601": "2019-12-06T11:11:12.890045Z", "url": "https://files.pythonhosted.org/packages/0d/23/9b79dd6ddd24f0bcb372906f4dc68289171f73a399905c754f4c3087ef69/wagtailmedia-0.4.0.tar.gz", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "4435a02353e3316b44d95c0a26f90d8b", "sha256": "d495bc2a1057bc818dde087b00ea8f19b707aeec5e449ca950f4f5a8051cc05c"}, "downloads": -1, "filename": "wagtailmedia-0.5.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "4435a02353e3316b44d95c0a26f90d8b", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 45866, "upload_time": "2020-02-20T10:38:02", "upload_time_iso_8601": "2020-02-20T10:38:02.024138Z", "url": "https://files.pythonhosted.org/packages/79/e7/71010b71f18efeec3493be5c7ba7e2beaa93099b14e52e38425378c0bc66/wagtailmedia-0.5.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1320ef275cf2936bfed572793dd4bcdb", "sha256": "cebbf9c1152f6facb889e5807bd3446cddcad9f44a5ebf5864443323849cf327"}, "downloads": -1, "filename": "wagtailmedia-0.5.0.tar.gz", "has_sig": false, "md5_digest": "1320ef275cf2936bfed572793dd4bcdb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 31895, "upload_time": "2020-02-20T10:38:03", "upload_time_iso_8601": "2020-02-20T10:38:03.884465Z", "url": "https://files.pythonhosted.org/packages/03/89/2d8cde7a9ffcf1766da4203b5bebeeb075251285baaa08286707e63423d2/wagtailmedia-0.5.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4435a02353e3316b44d95c0a26f90d8b", "sha256": "d495bc2a1057bc818dde087b00ea8f19b707aeec5e449ca950f4f5a8051cc05c"}, "downloads": -1, "filename": "wagtailmedia-0.5.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "4435a02353e3316b44d95c0a26f90d8b", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 45866, "upload_time": "2020-02-20T10:38:02", "upload_time_iso_8601": "2020-02-20T10:38:02.024138Z", "url": "https://files.pythonhosted.org/packages/79/e7/71010b71f18efeec3493be5c7ba7e2beaa93099b14e52e38425378c0bc66/wagtailmedia-0.5.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1320ef275cf2936bfed572793dd4bcdb", "sha256": "cebbf9c1152f6facb889e5807bd3446cddcad9f44a5ebf5864443323849cf327"}, "downloads": -1, "filename": "wagtailmedia-0.5.0.tar.gz", "has_sig": false, "md5_digest": "1320ef275cf2936bfed572793dd4bcdb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 31895, "upload_time": "2020-02-20T10:38:03", "upload_time_iso_8601": "2020-02-20T10:38:03.884465Z", "url": "https://files.pythonhosted.org/packages/03/89/2d8cde7a9ffcf1766da4203b5bebeeb075251285baaa08286707e63423d2/wagtailmedia-0.5.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:33:00 2020"}