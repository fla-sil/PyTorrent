{"info": {"author": "LuckyDams", "author_email": "LuckyDams@gmail.org", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: Utilities"], "description": "# Attr-Dict  \n\nYet another Attribute Dict implementation !  \n\nThis package provides a dictionary with attribute access to keys. It is especially convenient when working with deeply nested data. (Original idea from https://github.com/otsaloma/attd)\n\n\n**Different implementations** based on `OrderedDict`:  \n\n- **Strict**: **`AttrDict`**  \n    Work as a dictionary with class attribute syntax. Some keys cannot be translated to attributes (like int), in this case revert to usual dict syntax (ie: dict[key]).  \n\n- **Lazy**: **`LazyAttrDict`**  \n    Based on AttrDict but return None on missing keys, and mask values (list of keys on repr()).\n\n- **Restricted**: **`RestrictedAttrDict`**  \n    Lazy Attribute dictionary enforcing value change from dictionary syntax only (setitem & delitem), and masking values (return list of keys on repr()).  \n\n    Will raise AttributeError on Attribute change (setattr or delattr) to mimic @property attribute. \n\n\n#### Basic usage:\n```python\n# Some dict\n>>> conf_A = {'a': 1, 'b': 2, 'c': 3}\n>>> conf_B = {'a': 11, 'b': 12, 'c': {'c1': 13, 'c2': 23}}\n\n# import library\n>>> from attr_dict import AttrDict, LazyAttrDict, RestrictedAttrDict\n\n\n## Create a Lazy Attribute Dict\n>>> lad = LazyAttrDict()\n\n# Add some data (using different syntax)\n>>> lad.A = conf_A\n>>> lad['B']= conf_B\n\n# or\n>>> lad.update(dict(A=conf_A, B=conf_B))\n\n# Access data\n>>> lad\n{'A': {'a': 1, 'b': 2, 'c': 3}, 'B': {'a': 11, 'b': 12, 'c': {'c1': 13, 'c2': 23}}}\n>>> lad.A\n{'a': 1, 'b': 2, 'c': 3}\n>>> lad.A.c\n3\n>>> lad['A']['c']\n3\n>>> 'c' in lad.A\nTrue\n```\n\n\n#### Other features:\n```python\n# Export to JSON\n>>> json_data = lad.to_json()\n>>> print(json_data)\n{\n  \"A\": {\n    \"a\": 1,\n    \"b\": 2,\n    \"c\": 3\n  },\n  \"B\": {\n    \"a\": 11,\n    \"b\": 12,\n    \"c\": {\n      \"c1\": 13,\n      \"c2\": 23\n    }\n  }\n}\n\n## Import JSON to a new Attribute Dict\n>>> new_ad = AttrDict().from_json(json_data)\n>>> print(new_ad)\nAttrDict([('A', AttrDict([('a', 1), ('b', 2), ('c', 3)])), \\\n('B', AttrDict([('a', 11), ('b', 12), ('c', AttrDict([('c1', 13), ('c2', 23)]))]))])\n\n\n## Use Restricted Attribute Dict\n>>> rad = RestrictedAttrDict()\n\n# Add data using dict syntax (setitem)\n>>> rad['A'] = {}\n>>> rad['A']['a'] = 1\n>>> for k,v in conf_A.items():\n...     rad['A'][k] = v\n...\n\n# Data access to values is restricted\n>>> rad\n['A']\n>>> rad.A\n['a', 'b', 'c']\n>>> rad.A.b\n2\n>>> dict(rad.A)\n{'a': 1, 'b': 2, 'c': 3}\n\n\n# Attributes are protected\n>>> rad.A = conf_A                              # doctest: +ELLIPSIS\nTraceback (most recent call last):\n...\nAttributeError: can't set attribute\n\n>>> rad.A.b = 0                                 # doctest: +ELLIPSIS\nTraceback (most recent call last):\n...\nAttributeError: can't set attribute\n>>> del rad.A.b                                 # doctest: +ELLIPSIS\nTraceback (most recent call last):\n...\nAttributeError: can't delete attribute\n\n# Use dict syntax to change or delete\n>>> rad.A['b'] = 0\n>>> rad.A.pop('b')\n0\n\n# Missing key return None\n>>> print(rad.A.b)\nNone\n>>> 'b' in rad.A\nFalse\n```  \n\n\nRelative interfaces named '**indexes**' are also available to manage any king of objects with these attribute dictionaries:  \n**`AttrIndex`**, **`LazyIndex`**, **`RestrictedIndex`**  \n(current implementation only works on 2 levels)  \n\n#### Index usage:\n```python\n# Import & init\n>>> from attr_dict import LazyIndex\n>>> x = LazyIndex()\n\n# set keys & args\n>>> x.set_arg('A', a=1, b=2, c=3)\n>>> x.set_key('B')\n\n>>> x.index\n{'A': {'a': 1, 'b': 2, 'c': 3}, 'B': {}}\n\n# get, del & check\n>>> x.get_key('A')\n{'a': 1, 'b': 2, 'c': 3}\n>>> x.get_arg('A', 'b')\n2\n\n>>> x.del_arg('A', 'c')\n>>> x.get_key('A')\n{'a': 1, 'b': 2}\n\n>>> x.check_arg('A', 'b', 2)\nTrue\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/LuckyDams/Attr-Dict", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "Attr-Dict", "package_url": "https://pypi.org/project/Attr-Dict/", "platform": "any", "project_url": "https://pypi.org/project/Attr-Dict/", "project_urls": {"Homepage": "https://github.com/LuckyDams/Attr-Dict"}, "release_url": "https://pypi.org/project/Attr-Dict/1.0.0/", "requires_dist": null, "requires_python": "", "summary": "Yet another Attribute Dict implementation !", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Attr-Dict</h1>\n<p>Yet another Attribute Dict implementation !</p>\n<p>This package provides a dictionary with attribute access to keys. It is especially convenient when working with deeply nested data. (Original idea from <a href=\"https://github.com/otsaloma/attd\" rel=\"nofollow\">https://github.com/otsaloma/attd</a>)</p>\n<p><strong>Different implementations</strong> based on <code>OrderedDict</code>:</p>\n<ul>\n<li>\n<p><strong>Strict</strong>: <strong><code>AttrDict</code></strong><br>\nWork as a dictionary with class attribute syntax. Some keys cannot be translated to attributes (like int), in this case revert to usual dict syntax (ie: dict[key]).</p>\n</li>\n<li>\n<p><strong>Lazy</strong>: <strong><code>LazyAttrDict</code></strong><br>\nBased on AttrDict but return None on missing keys, and mask values (list of keys on repr()).</p>\n</li>\n<li>\n<p><strong>Restricted</strong>: <strong><code>RestrictedAttrDict</code></strong><br>\nLazy Attribute dictionary enforcing value change from dictionary syntax only (setitem &amp; delitem), and masking values (return list of keys on repr()).</p>\n<p>Will raise AttributeError on Attribute change (setattr or delattr) to mimic @property attribute.</p>\n</li>\n</ul>\n<h4>Basic usage:</h4>\n<pre><span class=\"c1\"># Some dict</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">conf_A</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'a'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'b'</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s1\">'c'</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">}</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">conf_B</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'a'</span><span class=\"p\">:</span> <span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"s1\">'b'</span><span class=\"p\">:</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"s1\">'c'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'c1'</span><span class=\"p\">:</span> <span class=\"mi\">13</span><span class=\"p\">,</span> <span class=\"s1\">'c2'</span><span class=\"p\">:</span> <span class=\"mi\">23</span><span class=\"p\">}}</span>\n\n<span class=\"c1\"># import library</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">attr_dict</span> <span class=\"kn\">import</span> <span class=\"n\">AttrDict</span><span class=\"p\">,</span> <span class=\"n\">LazyAttrDict</span><span class=\"p\">,</span> <span class=\"n\">RestrictedAttrDict</span>\n\n\n<span class=\"c1\">## Create a Lazy Attribute Dict</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">lad</span> <span class=\"o\">=</span> <span class=\"n\">LazyAttrDict</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Add some data (using different syntax)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">lad</span><span class=\"o\">.</span><span class=\"n\">A</span> <span class=\"o\">=</span> <span class=\"n\">conf_A</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">lad</span><span class=\"p\">[</span><span class=\"s1\">'B'</span><span class=\"p\">]</span><span class=\"o\">=</span> <span class=\"n\">conf_B</span>\n\n<span class=\"c1\"># or</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">lad</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"o\">=</span><span class=\"n\">conf_A</span><span class=\"p\">,</span> <span class=\"n\">B</span><span class=\"o\">=</span><span class=\"n\">conf_B</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># Access data</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">lad</span>\n<span class=\"p\">{</span><span class=\"s1\">'A'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'a'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'b'</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s1\">'c'</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">},</span> <span class=\"s1\">'B'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'a'</span><span class=\"p\">:</span> <span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"s1\">'b'</span><span class=\"p\">:</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"s1\">'c'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'c1'</span><span class=\"p\">:</span> <span class=\"mi\">13</span><span class=\"p\">,</span> <span class=\"s1\">'c2'</span><span class=\"p\">:</span> <span class=\"mi\">23</span><span class=\"p\">}}}</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">lad</span><span class=\"o\">.</span><span class=\"n\">A</span>\n<span class=\"p\">{</span><span class=\"s1\">'a'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'b'</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s1\">'c'</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">}</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">lad</span><span class=\"o\">.</span><span class=\"n\">A</span><span class=\"o\">.</span><span class=\"n\">c</span>\n<span class=\"mi\">3</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">lad</span><span class=\"p\">[</span><span class=\"s1\">'A'</span><span class=\"p\">][</span><span class=\"s1\">'c'</span><span class=\"p\">]</span>\n<span class=\"mi\">3</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"s1\">'c'</span> <span class=\"ow\">in</span> <span class=\"n\">lad</span><span class=\"o\">.</span><span class=\"n\">A</span>\n<span class=\"kc\">True</span>\n</pre>\n<h4>Other features:</h4>\n<pre><span class=\"c1\"># Export to JSON</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">json_data</span> <span class=\"o\">=</span> <span class=\"n\">lad</span><span class=\"o\">.</span><span class=\"n\">to_json</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">json_data</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n  <span class=\"s2\">\"A\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"s2\">\"a\"</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"b\"</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"c\"</span><span class=\"p\">:</span> <span class=\"mi\">3</span>\n  <span class=\"p\">},</span>\n  <span class=\"s2\">\"B\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"s2\">\"a\"</span><span class=\"p\">:</span> <span class=\"mi\">11</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"b\"</span><span class=\"p\">:</span> <span class=\"mi\">12</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"c\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n      <span class=\"s2\">\"c1\"</span><span class=\"p\">:</span> <span class=\"mi\">13</span><span class=\"p\">,</span>\n      <span class=\"s2\">\"c2\"</span><span class=\"p\">:</span> <span class=\"mi\">23</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">## Import JSON to a new Attribute Dict</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">new_ad</span> <span class=\"o\">=</span> <span class=\"n\">AttrDict</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">from_json</span><span class=\"p\">(</span><span class=\"n\">json_data</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">new_ad</span><span class=\"p\">)</span>\n<span class=\"n\">AttrDict</span><span class=\"p\">([(</span><span class=\"s1\">'A'</span><span class=\"p\">,</span> <span class=\"n\">AttrDict</span><span class=\"p\">([(</span><span class=\"s1\">'a'</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'b'</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'c'</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)])),</span> \\\n<span class=\"p\">(</span><span class=\"s1\">'B'</span><span class=\"p\">,</span> <span class=\"n\">AttrDict</span><span class=\"p\">([(</span><span class=\"s1\">'a'</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'b'</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'c'</span><span class=\"p\">,</span> <span class=\"n\">AttrDict</span><span class=\"p\">([(</span><span class=\"s1\">'c1'</span><span class=\"p\">,</span> <span class=\"mi\">13</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'c2'</span><span class=\"p\">,</span> <span class=\"mi\">23</span><span class=\"p\">)]))]))])</span>\n\n\n<span class=\"c1\">## Use Restricted Attribute Dict</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">rad</span> <span class=\"o\">=</span> <span class=\"n\">RestrictedAttrDict</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Add data using dict syntax (setitem)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">rad</span><span class=\"p\">[</span><span class=\"s1\">'A'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">rad</span><span class=\"p\">[</span><span class=\"s1\">'A'</span><span class=\"p\">][</span><span class=\"s1\">'a'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">for</span> <span class=\"n\">k</span><span class=\"p\">,</span><span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"n\">conf_A</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n<span class=\"o\">...</span>     <span class=\"n\">rad</span><span class=\"p\">[</span><span class=\"s1\">'A'</span><span class=\"p\">][</span><span class=\"n\">k</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">v</span>\n<span class=\"o\">...</span>\n\n<span class=\"c1\"># Data access to values is restricted</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">rad</span>\n<span class=\"p\">[</span><span class=\"s1\">'A'</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">rad</span><span class=\"o\">.</span><span class=\"n\">A</span>\n<span class=\"p\">[</span><span class=\"s1\">'a'</span><span class=\"p\">,</span> <span class=\"s1\">'b'</span><span class=\"p\">,</span> <span class=\"s1\">'c'</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">rad</span><span class=\"o\">.</span><span class=\"n\">A</span><span class=\"o\">.</span><span class=\"n\">b</span>\n<span class=\"mi\">2</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">rad</span><span class=\"o\">.</span><span class=\"n\">A</span><span class=\"p\">)</span>\n<span class=\"p\">{</span><span class=\"s1\">'a'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'b'</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s1\">'c'</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">}</span>\n\n\n<span class=\"c1\"># Attributes are protected</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">rad</span><span class=\"o\">.</span><span class=\"n\">A</span> <span class=\"o\">=</span> <span class=\"n\">conf_A</span>                              <span class=\"c1\"># doctest: +ELLIPSIS</span>\n<span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>\n<span class=\"ne\">AttributeError</span><span class=\"p\">:</span> <span class=\"n\">can</span><span class=\"s1\">'t set attribute</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">rad</span><span class=\"o\">.</span><span class=\"n\">A</span><span class=\"o\">.</span><span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>                                 <span class=\"c1\"># doctest: +ELLIPSIS</span>\n<span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>\n<span class=\"ne\">AttributeError</span><span class=\"p\">:</span> <span class=\"n\">can</span><span class=\"s1\">'t set attribute</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">del</span> <span class=\"n\">rad</span><span class=\"o\">.</span><span class=\"n\">A</span><span class=\"o\">.</span><span class=\"n\">b</span>                                 <span class=\"c1\"># doctest: +ELLIPSIS</span>\n<span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>\n<span class=\"ne\">AttributeError</span><span class=\"p\">:</span> <span class=\"n\">can</span><span class=\"s1\">'t delete attribute</span>\n\n<span class=\"c1\"># Use dict syntax to change or delete</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">rad</span><span class=\"o\">.</span><span class=\"n\">A</span><span class=\"p\">[</span><span class=\"s1\">'b'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">rad</span><span class=\"o\">.</span><span class=\"n\">A</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"s1\">'b'</span><span class=\"p\">)</span>\n<span class=\"mi\">0</span>\n\n<span class=\"c1\"># Missing key return None</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">rad</span><span class=\"o\">.</span><span class=\"n\">A</span><span class=\"o\">.</span><span class=\"n\">b</span><span class=\"p\">)</span>\n<span class=\"kc\">None</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"s1\">'b'</span> <span class=\"ow\">in</span> <span class=\"n\">rad</span><span class=\"o\">.</span><span class=\"n\">A</span>\n<span class=\"kc\">False</span>\n</pre>\n<p>Relative interfaces named '<strong>indexes</strong>' are also available to manage any king of objects with these attribute dictionaries:<br>\n<strong><code>AttrIndex</code></strong>, <strong><code>LazyIndex</code></strong>, <strong><code>RestrictedIndex</code></strong><br>\n(current implementation only works on 2 levels)</p>\n<h4>Index usage:</h4>\n<pre><span class=\"c1\"># Import &amp; init</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">attr_dict</span> <span class=\"kn\">import</span> <span class=\"n\">LazyIndex</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">LazyIndex</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># set keys &amp; args</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">set_arg</span><span class=\"p\">(</span><span class=\"s1\">'A'</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">set_key</span><span class=\"p\">(</span><span class=\"s1\">'B'</span><span class=\"p\">)</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">index</span>\n<span class=\"p\">{</span><span class=\"s1\">'A'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'a'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'b'</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s1\">'c'</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">},</span> <span class=\"s1\">'B'</span><span class=\"p\">:</span> <span class=\"p\">{}}</span>\n\n<span class=\"c1\"># get, del &amp; check</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">get_key</span><span class=\"p\">(</span><span class=\"s1\">'A'</span><span class=\"p\">)</span>\n<span class=\"p\">{</span><span class=\"s1\">'a'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'b'</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s1\">'c'</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">}</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">get_arg</span><span class=\"p\">(</span><span class=\"s1\">'A'</span><span class=\"p\">,</span> <span class=\"s1\">'b'</span><span class=\"p\">)</span>\n<span class=\"mi\">2</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">del_arg</span><span class=\"p\">(</span><span class=\"s1\">'A'</span><span class=\"p\">,</span> <span class=\"s1\">'c'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">get_key</span><span class=\"p\">(</span><span class=\"s1\">'A'</span><span class=\"p\">)</span>\n<span class=\"p\">{</span><span class=\"s1\">'a'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'b'</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">}</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">check_arg</span><span class=\"p\">(</span><span class=\"s1\">'A'</span><span class=\"p\">,</span> <span class=\"s1\">'b'</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"kc\">True</span>\n</pre>\n\n          </div>"}, "last_serial": 5090998, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "e5c8573688db451e339550fd15f208aa", "sha256": "6fcb77fb2dc9336a2a34357810ba2ea964cbeb28dafc070975cb75c5844f1cc6"}, "downloads": -1, "filename": "Attr_Dict-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "e5c8573688db451e339550fd15f208aa", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6281, "upload_time": "2019-04-03T13:49:06", "upload_time_iso_8601": "2019-04-03T13:49:06.332614Z", "url": "https://files.pythonhosted.org/packages/06/38/431d442ceb2a25d2732b98ecb272875d8639e9a48f8569afe5c2ec76861b/Attr_Dict-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f611c82336b5ebbff99e68f641992bcf", "sha256": "3378d2e5a329fc084840c8644cd3759764016ec2f9e0d7cd4307f1a909597f4e"}, "downloads": -1, "filename": "Attr-Dict-1.0.0.tar.gz", "has_sig": false, "md5_digest": "f611c82336b5ebbff99e68f641992bcf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4640, "upload_time": "2019-04-03T13:49:08", "upload_time_iso_8601": "2019-04-03T13:49:08.209101Z", "url": "https://files.pythonhosted.org/packages/62/54/0e75a87fe1449052e6ed5740fedeeda2cd0adba0305a3a0fe9ccc707174b/Attr-Dict-1.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e5c8573688db451e339550fd15f208aa", "sha256": "6fcb77fb2dc9336a2a34357810ba2ea964cbeb28dafc070975cb75c5844f1cc6"}, "downloads": -1, "filename": "Attr_Dict-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "e5c8573688db451e339550fd15f208aa", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6281, "upload_time": "2019-04-03T13:49:06", "upload_time_iso_8601": "2019-04-03T13:49:06.332614Z", "url": "https://files.pythonhosted.org/packages/06/38/431d442ceb2a25d2732b98ecb272875d8639e9a48f8569afe5c2ec76861b/Attr_Dict-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f611c82336b5ebbff99e68f641992bcf", "sha256": "3378d2e5a329fc084840c8644cd3759764016ec2f9e0d7cd4307f1a909597f4e"}, "downloads": -1, "filename": "Attr-Dict-1.0.0.tar.gz", "has_sig": false, "md5_digest": "f611c82336b5ebbff99e68f641992bcf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4640, "upload_time": "2019-04-03T13:49:08", "upload_time_iso_8601": "2019-04-03T13:49:08.209101Z", "url": "https://files.pythonhosted.org/packages/62/54/0e75a87fe1449052e6ed5740fedeeda2cd0adba0305a3a0fe9ccc707174b/Attr-Dict-1.0.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:16:30 2020"}