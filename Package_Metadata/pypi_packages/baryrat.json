{"info": {"author": "Clemens Hofreither", "author_email": "clemens.hofreither@ricam.oeaw.ac.at", "bugtrack_url": null, "classifiers": ["Intended Audience :: Science/Research", "License :: OSI Approved :: BSD License", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Topic :: Scientific/Engineering :: Mathematics"], "description": "# Barycentric rational approximation [![Build Status](https://travis-ci.com/c-f-h/baryrat.svg?branch=master)](https://travis-ci.com/c-f-h/baryrat)\n\nThis is a pure Python package which provides routines for rational and\npolynomial approximation through the so-called barycentric representation.\nThe advantage of this representation is (often significantly) improved\nstability over classical approaches.\n\n## Features\n\n### The AAA algorithm\n\nThe package includes a Python implementation of the AAA algorithm for rational\napproximation described in the paper \"The AAA Algorithm for Rational\nApproximation\" by Yuji Nakatsukasa, Olivier S\u00e8te, and Lloyd N. Trefethen, SIAM\nJournal on Scientific Computing 2018 40:3, A1494-A1522.\n[(doi)](https://doi.org/10.1137/16M1106122)\n\nA MATLAB implementation of this algorithm is contained in\n[Chebfun](http://www.chebfun.org/).  The present Python version is a more or\nless direct port of the MATLAB version.\n\nThe \"cleanup\" feature for spurious poles and zeros is not currently implemented.\n\n### Further algorithms\n\nThe package includes functions for polynomial interpolation, rational\ninterpolation with either fixed poles or fixed interpolation nodes,\nFloater-Hormann interpolation, and more.\n\n## Installation\n\nThe implementation is in pure Python and requires only numpy and scipy as\ndependencies. Install it using pip:\n\n    pip install baryrat\n\n## Usage\n\nHere's an example of how to approximate a function in the interval [0,1]\nusing the AAA algorithm:\n\n    import numpy as np\n    from baryrat import aaa\n\n    Z = np.linspace(0.0, 1.0, 1000)\n    F = np.exp(Z) * np.sin(2*np.pi*Z)\n\n    r = aaa(Z, F, mmax=10)\n\nInstead of the maximum number of terms `mmax`, it's also possible to specify\nthe error tolerance `tol`.  Both arguments work exactly as in the MATLAB\nversion.\n\nThe returned object `r` is an instance of the class\n`baryrat.BarycentricRational` and can be called like a function. For instance,\nyou can compute the error on `Z` like this:\n\n    err = F - r(Z)\n    print(np.linalg.norm(err, np.inf))\n\nIf you are interested in the poles and residues of the computed rational function,\nyou can query them like\n\n    pol, res = r.polres()\n\nand the zeroes using\n\n    zer = r.zeros()\n\nFinally, the nodes, values and weights used for interpolation (called `zj`,\n`fj` and `wj` in the original implementation) can be accessed as properties:\n\n    r.nodes\n    r.values\n    r.weights\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/c-f-h/baryrat", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "baryrat", "package_url": "https://pypi.org/project/baryrat/", "platform": "", "project_url": "https://pypi.org/project/baryrat/", "project_urls": {"Homepage": "https://github.com/c-f-h/baryrat"}, "release_url": "https://pypi.org/project/baryrat/1.0.0/", "requires_dist": ["numpy (>=1.11)", "scipy"], "requires_python": "", "summary": "A Python package for barycentric rational approximation", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Barycentric rational approximation <a href=\"https://travis-ci.com/c-f-h/baryrat\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e8dfc9a7813eb1f9b2b8d28f4af90e93efafcdb9/68747470733a2f2f7472617669732d63692e636f6d2f632d662d682f626172797261742e7376673f6272616e63683d6d6173746572\"></a></h1>\n<p>This is a pure Python package which provides routines for rational and\npolynomial approximation through the so-called barycentric representation.\nThe advantage of this representation is (often significantly) improved\nstability over classical approaches.</p>\n<h2>Features</h2>\n<h3>The AAA algorithm</h3>\n<p>The package includes a Python implementation of the AAA algorithm for rational\napproximation described in the paper \"The AAA Algorithm for Rational\nApproximation\" by Yuji Nakatsukasa, Olivier S\u00e8te, and Lloyd N. Trefethen, SIAM\nJournal on Scientific Computing 2018 40:3, A1494-A1522.\n<a href=\"https://doi.org/10.1137/16M1106122\" rel=\"nofollow\">(doi)</a></p>\n<p>A MATLAB implementation of this algorithm is contained in\n<a href=\"http://www.chebfun.org/\" rel=\"nofollow\">Chebfun</a>.  The present Python version is a more or\nless direct port of the MATLAB version.</p>\n<p>The \"cleanup\" feature for spurious poles and zeros is not currently implemented.</p>\n<h3>Further algorithms</h3>\n<p>The package includes functions for polynomial interpolation, rational\ninterpolation with either fixed poles or fixed interpolation nodes,\nFloater-Hormann interpolation, and more.</p>\n<h2>Installation</h2>\n<p>The implementation is in pure Python and requires only numpy and scipy as\ndependencies. Install it using pip:</p>\n<pre><code>pip install baryrat\n</code></pre>\n<h2>Usage</h2>\n<p>Here's an example of how to approximate a function in the interval [0,1]\nusing the AAA algorithm:</p>\n<pre><code>import numpy as np\nfrom baryrat import aaa\n\nZ = np.linspace(0.0, 1.0, 1000)\nF = np.exp(Z) * np.sin(2*np.pi*Z)\n\nr = aaa(Z, F, mmax=10)\n</code></pre>\n<p>Instead of the maximum number of terms <code>mmax</code>, it's also possible to specify\nthe error tolerance <code>tol</code>.  Both arguments work exactly as in the MATLAB\nversion.</p>\n<p>The returned object <code>r</code> is an instance of the class\n<code>baryrat.BarycentricRational</code> and can be called like a function. For instance,\nyou can compute the error on <code>Z</code> like this:</p>\n<pre><code>err = F - r(Z)\nprint(np.linalg.norm(err, np.inf))\n</code></pre>\n<p>If you are interested in the poles and residues of the computed rational function,\nyou can query them like</p>\n<pre><code>pol, res = r.polres()\n</code></pre>\n<p>and the zeroes using</p>\n<pre><code>zer = r.zeros()\n</code></pre>\n<p>Finally, the nodes, values and weights used for interpolation (called <code>zj</code>,\n<code>fj</code> and <code>wj</code> in the original implementation) can be accessed as properties:</p>\n<pre><code>r.nodes\nr.values\nr.weights\n</code></pre>\n\n          </div>"}, "last_serial": 6598009, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "54a7a8fb0fe86a1c55353dbc1f4b9665", "sha256": "d7dbf16e38d61e7c341987cdfe9db83818d56dfad67e16f00850e61ce7141e4f"}, "downloads": -1, "filename": "baryrat-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "54a7a8fb0fe86a1c55353dbc1f4b9665", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6077, "upload_time": "2020-02-09T15:24:29", "upload_time_iso_8601": "2020-02-09T15:24:29.052069Z", "url": "https://files.pythonhosted.org/packages/0e/87/16c6849aa4858dfdff74063fa2c5e2dd4bd30ac730301edb20c36612f614/baryrat-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2a9eeaac8cf177ce855959efcadb9bdc", "sha256": "44cb0a4c1ad6d3164828b0ca4cb86bbf1c7f72bd90f35b59848d04aaec90d67a"}, "downloads": -1, "filename": "baryrat-1.0.0.tar.gz", "has_sig": false, "md5_digest": "2a9eeaac8cf177ce855959efcadb9bdc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5010, "upload_time": "2020-02-09T15:24:31", "upload_time_iso_8601": "2020-02-09T15:24:31.301569Z", "url": "https://files.pythonhosted.org/packages/c1/f6/c967d47f23f36bd81381ba0d783bec4a6a516c8b7cc10504445daa5f332f/baryrat-1.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "54a7a8fb0fe86a1c55353dbc1f4b9665", "sha256": "d7dbf16e38d61e7c341987cdfe9db83818d56dfad67e16f00850e61ce7141e4f"}, "downloads": -1, "filename": "baryrat-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "54a7a8fb0fe86a1c55353dbc1f4b9665", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6077, "upload_time": "2020-02-09T15:24:29", "upload_time_iso_8601": "2020-02-09T15:24:29.052069Z", "url": "https://files.pythonhosted.org/packages/0e/87/16c6849aa4858dfdff74063fa2c5e2dd4bd30ac730301edb20c36612f614/baryrat-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2a9eeaac8cf177ce855959efcadb9bdc", "sha256": "44cb0a4c1ad6d3164828b0ca4cb86bbf1c7f72bd90f35b59848d04aaec90d67a"}, "downloads": -1, "filename": "baryrat-1.0.0.tar.gz", "has_sig": false, "md5_digest": "2a9eeaac8cf177ce855959efcadb9bdc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5010, "upload_time": "2020-02-09T15:24:31", "upload_time_iso_8601": "2020-02-09T15:24:31.301569Z", "url": "https://files.pythonhosted.org/packages/c1/f6/c967d47f23f36bd81381ba0d783bec4a6a516c8b7cc10504445daa5f332f/baryrat-1.0.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:14:51 2020"}