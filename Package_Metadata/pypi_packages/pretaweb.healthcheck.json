{"info": {"author": "Adam Terrey", "author_email": "software@pretaweb.com", "bugtrack_url": null, "classifiers": ["Programming Language :: Python"], "description": "Introduction\n============\n\nProvides a mechanism to front-end load balancers to check whether a Zope\ninstance with one or more Plone sites installed is suitable for sending\nrequests to.\n\nSuitability for a load balancer in this case is\n- Are the Plone sites and their sub-resources pre-cached into memory? and\n- Do the Plone sites and their sub-resources return valid HTTP status codes?\n\nThe health check works in this way:\n- http://my.zope.instance/@@healthcheck is called\n- If the health check has already run successfully 200 OK is returned\n- The health checker traverses the ZODB looking for Plone insistences\n- For each instance the front page is sub-requested (by making a sub-requests,\n  this forces the relevant Zope objects in the cache)\n- The front page is inspected for second level pages and resources associated\n  with the page like images and css.\n- Those resources are sub-requested to bring them into the cache\n- CSS is inspected for resources and those resources and also sub-requested\n- If successful a status code of 200 OK is returned otherwise 503 Service\n  Unavailable is returned\n\nThe health check will fail if\n- The Plone front-page returns a 4xx client error or a 5xx server error. Except\n  for 401 Unauthorised access (unauthorised access is valid because a\n  restricted Plone site is a valid situation.)\n- If a sub-resource returns a 5xx (server) error.\n\nOptions\n- http://my.zope.instance/@@healthcheck?verbose=yes gives more output to the\n  instance logs\n- http://my.zope.instance/@@healthcheck?ignoreResourceServerError=yes ignores\n  5xx server errors on sub-requests to resources discovered on the front page\n  or CSS\n\n\n\nChangelog\n=========\n\n\n1.0 (2011-06-24)\n----------------\n\n- Removed force=yes option to prevent DoS attacks \n- Output now to instance stderr\n\n\n0.1dev (unreleased)\n-------------------\n\n- Plone instance discovery / ZODB traveersal\n- Resource sub-requesting\n- Page xml interigation and sub-requesting\n- CSS interigation and sub-requesting\n- Second level page sub-requesting\n- Added verbose=yes for better output control\n- Added force=yes to force a re-check\n- Added ignoreResourceServerError=yes option to ignore 5xx errors returned by\n  sub-resources", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/collective/pretaweb.healthcheck", "keywords": "Zope Plone load-balancing health-check haproxy", "license": "GPL", "maintainer": null, "maintainer_email": null, "name": "pretaweb.healthcheck", "package_url": "https://pypi.org/project/pretaweb.healthcheck/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/pretaweb.healthcheck/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/collective/pretaweb.healthcheck"}, "release_url": "https://pypi.org/project/pretaweb.healthcheck/1.0/", "requires_dist": null, "requires_python": null, "summary": "Load balancer health checker for a Plone/Zope Instance", "version": "1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            Introduction<br>============<br><br>Provides a mechanism to front-end load balancers to check whether a Zope<br>instance with one or more Plone sites installed is suitable for sending<br>requests to.<br><br>Suitability for a load balancer in this case is<br>- Are the Plone sites and their sub-resources pre-cached into memory? and<br>- Do the Plone sites and their sub-resources return valid HTTP status codes?<br><br>The health check works in this way:<br>- http://my.zope.instance/@@healthcheck is called<br>- If the health check has already run successfully 200 OK is returned<br>- The health checker traverses the ZODB looking for Plone insistences<br>- For each instance the front page is sub-requested (by making a sub-requests,<br>  this forces the relevant Zope objects in the cache)<br>- The front page is inspected for second level pages and resources associated<br>  with the page like images and css.<br>- Those resources are sub-requested to bring them into the cache<br>- CSS is inspected for resources and those resources and also sub-requested<br>- If successful a status code of 200 OK is returned otherwise 503 Service<br>  Unavailable is returned<br><br>The health check will fail if<br>- The Plone front-page returns a 4xx client error or a 5xx server error. Except<br>  for 401 Unauthorised access (unauthorised access is valid because a<br>  restricted Plone site is a valid situation.)<br>- If a sub-resource returns a 5xx (server) error.<br><br>Options<br>- http://my.zope.instance/@@healthcheck?verbose=yes gives more output to the<br>  instance logs<br>- http://my.zope.instance/@@healthcheck?ignoreResourceServerError=yes ignores<br>  5xx server errors on sub-requests to resources discovered on the front page<br>  or CSS<br><br><br><br>Changelog<br>=========<br><br><br>1.0 (2011-06-24)<br>----------------<br><br>- Removed force=yes option to prevent DoS attacks <br>- Output now to instance stderr<br><br><br>0.1dev (unreleased)<br>-------------------<br><br>- Plone instance discovery / ZODB traveersal<br>- Resource sub-requesting<br>- Page xml interigation and sub-requesting<br>- CSS interigation and sub-requesting<br>- Second level page sub-requesting<br>- Added verbose=yes for better output control<br>- Added force=yes to force a re-check<br>- Added ignoreResourceServerError=yes option to ignore 5xx errors returned by<br>  sub-resources\n          </div>"}, "last_serial": 796670, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "2b9f88691f6ee4e6107a766ea9ea2304", "sha256": "edbe14a95fcb12745302211629185fe240b4453d22ead09dc7ee7aaf545ba642"}, "downloads": -1, "filename": "pretaweb.healthcheck-1.0.zip", "has_sig": false, "md5_digest": "2b9f88691f6ee4e6107a766ea9ea2304", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10452, "upload_time": "2011-06-24T04:54:58", "upload_time_iso_8601": "2011-06-24T04:54:58.289981Z", "url": "https://files.pythonhosted.org/packages/5d/df/dda40d0c2abcc4f92cb6225d48384b186cf570584e5955098411aed9ba8f/pretaweb.healthcheck-1.0.zip", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "2b9f88691f6ee4e6107a766ea9ea2304", "sha256": "edbe14a95fcb12745302211629185fe240b4453d22ead09dc7ee7aaf545ba642"}, "downloads": -1, "filename": "pretaweb.healthcheck-1.0.zip", "has_sig": false, "md5_digest": "2b9f88691f6ee4e6107a766ea9ea2304", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10452, "upload_time": "2011-06-24T04:54:58", "upload_time_iso_8601": "2011-06-24T04:54:58.289981Z", "url": "https://files.pythonhosted.org/packages/5d/df/dda40d0c2abcc4f92cb6225d48384b186cf570584e5955098411aed9ba8f/pretaweb.healthcheck-1.0.zip", "yanked": false}], "timestamp": "Fri May  8 03:19:44 2020"}