{"info": {"author": "Mindey", "author_email": "mindey@qq.com", "bugtrack_url": null, "classifiers": [], "description": ".. image:: https://mindey.com/docs/metaform-logo.png\n\n*One star knowing it all...*\n\n.. code:: python\n\n   # HAVING DATA:\n   DATA = {\n     'a': 1.5,\n     'b': 1458266965.250572,\n     'c': [{'x': {'y': 'LT121000011101001000'}}, {'z': 'Omega'}]}\n\n   # GETTING KNOWLEDGE:\n   SCHEMA = {\n     'a': 'price#EUR|to.decimal',\n     'b': 'timestamp#date|to.unixtime',\n     'c': [{'*': 'contributions',\n       'x': {'*': 'origins', 'y': 'account#IBAN|to.string'},\n       'z': 'company#name|to.string'}],\n   }\n\n   # NORMALIZATION\n   metaform.load(DATA).format(SCHEMA)\n\n   # OR USE '*' TO REFERENCE SCHEMA TO PACK SCHEMA WITH DATA PACKETS:\n   metaform.load(dict(DATA, **{'*': 'https://github.com/wefindx/schema/wiki/Sale#test'})).format()\n\n\nmetaform\n========\n\n.. image:: https://badge.fury.io/py/metaform.svg\n    :target: https://badge.fury.io/py/metaform\n.. image:: https://badges.gitter.im/djrobstep/csvx.svg\n   :alt: Join the chat at https://gitter.im/wefindx/metaform\n   :target: https://gitter.im/wefindx/metaform\n\nMetaform is a package for hierarchical and nested data normalization.\n\n.. image:: https://wiki.mindey.com/shared/shots/53dcf81b7efd0573f07c5f562.png\n   :target: https://wiki.mindey.com/shared/shots/56542f97f99a2b3886baa661f-what-is-metaform.mp4\n\nBasic Usage\n-----------\n\n``pip install metaform``\n\n.. code:: python\n\n   import metaform\n\nIf your data had an asterisk~!\n------------------------------\n.. code:: python\n\n   # INPUT\n   metaform.load({\n     '*': 'https://github.com/mindey/terms/wiki/person#foaf',\n     'url': 'http://dbpedia.org/resource/John_Lennon',\n     'fullname': 'John Lennon',\n     'birthdate': '1940-10-09',\n     'spouse': 'http://dbpedia.org/resource/Cynthia_Lennon'\n   }).format(refresh=True)\n   # (schemas are cached locally, pass refresh=True to redownload)\n\n   # OUTPUT\n   {\n     '*': 'GH:mindey/terms/person#foaf',\n     'jsonld:id': 'http://dbpedia.org/resource/John_Lennon',\n     'foaf:name': 'John Lennon',\n     'schema:birthDate': datetime.datetime(1940, 10, 9, 0, 0),\n     'schema:spouse': 'http://dbpedia.org/resource/Cynthia_Lennon'\n   }\n\nOr, if your filenames had references to schema~\n-----------------------------------------------\n\n.. code:: python\n\n   df = metaform.read_csv(\n     'https://gist.githubusercontent.com/mindey/3f2596e108a5c151f32e1967275a7689/raw/7c4c963219255008fdb438e8b9777cd658eea02e/hello-world.csv',\n     schema={\n       0: 'Timestamp|to.unixtime',\n       1: 'KeyUpOrDown|lambda x: x==\"k\u2193\" and \"KeyDown\" or (x==\"k\u2191\" and \"KeyUp\")',\n       2: 'KeyName'},\n     header=None\n   )\n\nAlternatively, save schema to wiki like `here <https://github.com/mindey/schema/wiki/KeyEvent#mykeylogger-01>`_, and include the schema token inside filename by encoding it as sub-extension, that is, rename ``hello-world.csv`` to ``hello-world.GH~mindey+schema+KeyEvent@mykeylogger-01.csv``:\n\n.. code:: python\n\n   # To get schema token for filename (GH~mindey+schema+KeyEvent@mykeylogger-01) do:\n   metaform.metawiki.url2ext('https://github.com/mindey/schema/wiki/KeyEvent#mykeylogger-01')\n\n   # Then rename filename in the source, and just read file remotely or locally from disk:\n   df = metaform.read_csv('https://gist.githubusercontent.com/mindey/f33978b31468097b5003f032d5d85eb8/raw/9541191e4d99c052a7668223697ef0ef9ce37977/hello-world.GH~mindey+schema+KeyEvent@mykeylogger-01.csv', header=None)\n\n\nSo, what's happening here?\n--------------------------\n.. code:: python\n\n   metaform.load( DATA ).format( SCHEMA )\n\nLet\u2019s say we have some data:\n\n.. code:: python\n\n   data = {\n       'hello': 1.0,\n       'world': 2,\n       'how': ['is', {'are': {'you': 'doing'}}]\n   }\n\nWe can get the template for defining schema, by ``metaform.template``:\n\n.. code:: python\n\n   metaform.template(data)\n\n::\n\n   {'*': '',\n    'hello': {'*': ''},\n    'how': [{'*': '', 'are': {'you': {'*': ''}}}],\n    'world': {'*': ''}}\n\nThis provides an opportunity to specify metadata for each key and the\nobject itself. For example:\n\n.. code:: python\n\n   schema = {\n       '*': 'greeting',\n       'hello': 'length',\n       'world': 'atoms',\n       'how': [\n            {'*': 'method',\n             'are': {\n                 '*': 'yup',\n                 'you': {'*': 'me'}}\n            }\n       ]}\n\n   metaform.normalize(data, schema)\n\n::\n\n   {'atoms': 2, 'length': 1.0, 'method': ['is', {'yup': {'me': 'doing'}}]}\n\nWe recommend saving schemas you create for normalizations for data\nanalytics and `driver projects <https://github.com/drivernet>`__ in\ndot-folders ``.schema``, in a JSON or YAML files in that folder.\n\nSo, we have access to all keys, and can specify, what to do with them:\n\n.. code:: python\n\n   schema = {\n       '*': 'greeting',\n       'hello': 'length|lambda x: x+5.',\n       'world': 'atoms|lambda x: str(x)+\"ABC\"',\n       'how': [\n            {'*': 'method',\n             'are': {\n                 '*': 'yup',\n                 'you': {'*': 'me|lambda x: \"-\".join(list(x))'}}\n            }\n       ]}\n\n   metaform.normalize(data, schema)\n\n::\n\n   {'atoms': '2ABC',\n    'length': 6.0,\n    'method': ['is', {'yup': {'me': 'd-o-i-n-g'}}]}\n\nAnd suppose, we want to define a more complex function, inconvenient via\nlambdas:\n\n.. code:: python\n\n   from metaform import converters\n\n   def some_func(x):\n       a = 123\n       b = 345\n       return (b-a)*x\n\n   converters.func = some_func\n\n   schema = {\n       '*': 'greeting',\n       'hello': 'length|to.func',\n       'world': 'atoms|lambda x: str(x)+\"ABC\"',\n       'how': [\n            {'*': 'method',\n             'are': {\n                 '*': 'yup',\n                 'you': {'*': 'me|lambda x: \"-\".join(list(x))'}}\n            }\n       ]}\n\n   metaform.normalize(data, schema)\n\n::\n\n   {'atoms': '2ABC',\n    'length': 222.0,\n    'method': ['is', {'yup': {'me': 'd-o-i-n-g'}}]}\n\nWe just renamed the keys, and normalized values! What else could we\nwant?\n\nNormalizing Data\n----------------\n\nSuppose we have similar data from different sources. For example, topics\nand comments are not so different after all, because if a comment\nbecomes large enough, it can stand as a topic of its own.\n\n.. code:: python\n\n   topics = requests.get('https://api.infty.xyz/topics/?format=json').json()['results']\n   comments = requests.get('https://api.infty.xyz/comments/?format=json').json()['results']\n\nLet\u2019s define templates for them, with the key names and types to match:\n\n.. code:: python\n\n   topics_schema = [{\n     'id': 'topic-id',\n     'type': '|lambda x: {0: \"NEED\", 1: \"GOAL\", 2: \"IDEA\", 3: \"PLAN\", 4: \"STEP\", 5: \"TASK\"}.get(x)',\n     'owner': {'id': 'user-id'},\n     'blockchain': '|lambda x: x and True or False',\n   }]\n\n   normal_topics = metaform.normalize(topics, topics_schema)\n\n   topics_df = pandas.io.json.json_normalize(normal_topics)\n   topics_df.dtypes\n\n::\n\n   blockchain             bool\n   body                 object\n   categories           object\n   categories_names     object\n   children             object\n   comment_count         int64\n   created_date         object\n   data                 object\n   declared            float64\n   editors              object\n   funds               float64\n   is_draft               bool\n   languages            object\n   matched             float64\n   owner.user-id         int64\n   owner.username       object\n   parents              object\n   title                object\n   topic-id              int64\n   type                 object\n   updated_date         object\n   url                  object\n   dtype: object\n\n.. code:: python\n\n   comments_schema = [{\n     'id': 'comment-id',\n     'topic': 'topic-url',\n     'text': 'body',\n     'owner': {'id': 'user-id'},\n     'blockchain': '|lambda x: x and True or False',\n   }]\n\n   normal_comments = metaform.normalize(comments, comments_schema)\n\n   comments_df = pandas.io.json.json_normalize(normal_comments)\n   comments_df.dtypes\n\n::\n\n   assumed_hours      object\n   blockchain           bool\n   body               object\n   claimed_hours      object\n   comment-id          int64\n   created_date       object\n   donated           float64\n   languages          object\n   matched           float64\n   owner.user-id       int64\n   owner.username     object\n   parent             object\n   remains           float64\n   topic-url          object\n   updated_date       object\n   url                object\n   dtype: object\n\n.. code:: python\n\n   df = pandas.concat([topics_df, comments_df], sort=False)\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://gitlab.com/wefindx/metaform", "keywords": "", "license": "ASK FOR PERMISSIONS", "maintainer": "", "maintainer_email": "", "name": "metaform", "package_url": "https://pypi.org/project/metaform/", "platform": "", "project_url": "https://pypi.org/project/metaform/", "project_urls": {"Homepage": "https://gitlab.com/wefindx/metaform"}, "release_url": "https://pypi.org/project/metaform/1.0.2.2/", "requires_dist": null, "requires_python": "", "summary": "A utility for defining metadata for data types and formats.", "version": "1.0.2.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <img alt=\"https://mindey.com/docs/metaform-logo.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/922e1fb5fa83cdfd4075dfeed825a144ff799e06/68747470733a2f2f6d696e6465792e636f6d2f646f63732f6d657461666f726d2d6c6f676f2e706e67\">\n<p><em>One star knowing it all\u2026</em></p>\n<pre><span class=\"c1\"># HAVING DATA:</span>\n<span class=\"n\">DATA</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"s1\">'a'</span><span class=\"p\">:</span> <span class=\"mf\">1.5</span><span class=\"p\">,</span>\n  <span class=\"s1\">'b'</span><span class=\"p\">:</span> <span class=\"mf\">1458266965.250572</span><span class=\"p\">,</span>\n  <span class=\"s1\">'c'</span><span class=\"p\">:</span> <span class=\"p\">[{</span><span class=\"s1\">'x'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'y'</span><span class=\"p\">:</span> <span class=\"s1\">'LT121000011101001000'</span><span class=\"p\">}},</span> <span class=\"p\">{</span><span class=\"s1\">'z'</span><span class=\"p\">:</span> <span class=\"s1\">'Omega'</span><span class=\"p\">}]}</span>\n\n<span class=\"c1\"># GETTING KNOWLEDGE:</span>\n<span class=\"n\">SCHEMA</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"s1\">'a'</span><span class=\"p\">:</span> <span class=\"s1\">'price#EUR|to.decimal'</span><span class=\"p\">,</span>\n  <span class=\"s1\">'b'</span><span class=\"p\">:</span> <span class=\"s1\">'timestamp#date|to.unixtime'</span><span class=\"p\">,</span>\n  <span class=\"s1\">'c'</span><span class=\"p\">:</span> <span class=\"p\">[{</span><span class=\"s1\">'*'</span><span class=\"p\">:</span> <span class=\"s1\">'contributions'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'x'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'*'</span><span class=\"p\">:</span> <span class=\"s1\">'origins'</span><span class=\"p\">,</span> <span class=\"s1\">'y'</span><span class=\"p\">:</span> <span class=\"s1\">'account#IBAN|to.string'</span><span class=\"p\">},</span>\n    <span class=\"s1\">'z'</span><span class=\"p\">:</span> <span class=\"s1\">'company#name|to.string'</span><span class=\"p\">}],</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># NORMALIZATION</span>\n<span class=\"n\">metaform</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"n\">DATA</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">SCHEMA</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># OR USE '*' TO REFERENCE SCHEMA TO PACK SCHEMA WITH DATA PACKETS:</span>\n<span class=\"n\">metaform</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">DATA</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"p\">{</span><span class=\"s1\">'*'</span><span class=\"p\">:</span> <span class=\"s1\">'https://github.com/wefindx/schema/wiki/Sale#test'</span><span class=\"p\">}))</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">()</span>\n</pre>\n<div id=\"metaform\">\n<h2>metaform</h2>\n<a href=\"https://badge.fury.io/py/metaform\" rel=\"nofollow\"><img alt=\"https://badge.fury.io/py/metaform.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3eb526234405020448bb157572d1206f076f4b9d/68747470733a2f2f62616467652e667572792e696f2f70792f6d657461666f726d2e737667\"></a>\n<a href=\"https://gitter.im/wefindx/metaform\" rel=\"nofollow\"><img alt=\"Join the chat at https://gitter.im/wefindx/metaform\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/078efff2403e79d0a39a2895ce17dfaf3cb02d8c/68747470733a2f2f6261646765732e6769747465722e696d2f646a726f62737465702f637376782e737667\"></a>\n<p>Metaform is a package for hierarchical and nested data normalization.</p>\n<a href=\"https://wiki.mindey.com/shared/shots/56542f97f99a2b3886baa661f-what-is-metaform.mp4\" rel=\"nofollow\"><img alt=\"https://wiki.mindey.com/shared/shots/53dcf81b7efd0573f07c5f562.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2d1ea2b8ca74c4b7a6edd045c05762667081be96/68747470733a2f2f77696b692e6d696e6465792e636f6d2f7368617265642f73686f74732f353364636638316237656664303537336630376335663536322e706e67\"></a>\n<div id=\"basic-usage\">\n<h3>Basic Usage</h3>\n<p><tt>pip install metaform</tt></p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">metaform</span>\n</pre>\n</div>\n<div id=\"if-your-data-had-an-asterisk\">\n<h3>If your data had an asterisk~!</h3>\n<pre><span class=\"c1\"># INPUT</span>\n<span class=\"n\">metaform</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">({</span>\n  <span class=\"s1\">'*'</span><span class=\"p\">:</span> <span class=\"s1\">'https://github.com/mindey/terms/wiki/person#foaf'</span><span class=\"p\">,</span>\n  <span class=\"s1\">'url'</span><span class=\"p\">:</span> <span class=\"s1\">'http://dbpedia.org/resource/John_Lennon'</span><span class=\"p\">,</span>\n  <span class=\"s1\">'fullname'</span><span class=\"p\">:</span> <span class=\"s1\">'John Lennon'</span><span class=\"p\">,</span>\n  <span class=\"s1\">'birthdate'</span><span class=\"p\">:</span> <span class=\"s1\">'1940-10-09'</span><span class=\"p\">,</span>\n  <span class=\"s1\">'spouse'</span><span class=\"p\">:</span> <span class=\"s1\">'http://dbpedia.org/resource/Cynthia_Lennon'</span>\n<span class=\"p\">})</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">refresh</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"c1\"># (schemas are cached locally, pass refresh=True to redownload)</span>\n\n<span class=\"c1\"># OUTPUT</span>\n<span class=\"p\">{</span>\n  <span class=\"s1\">'*'</span><span class=\"p\">:</span> <span class=\"s1\">'GH:mindey/terms/person#foaf'</span><span class=\"p\">,</span>\n  <span class=\"s1\">'jsonld:id'</span><span class=\"p\">:</span> <span class=\"s1\">'http://dbpedia.org/resource/John_Lennon'</span><span class=\"p\">,</span>\n  <span class=\"s1\">'foaf:name'</span><span class=\"p\">:</span> <span class=\"s1\">'John Lennon'</span><span class=\"p\">,</span>\n  <span class=\"s1\">'schema:birthDate'</span><span class=\"p\">:</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">(</span><span class=\"mi\">1940</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span>\n  <span class=\"s1\">'schema:spouse'</span><span class=\"p\">:</span> <span class=\"s1\">'http://dbpedia.org/resource/Cynthia_Lennon'</span>\n<span class=\"p\">}</span>\n</pre>\n</div>\n<div id=\"or-if-your-filenames-had-references-to-schema\">\n<h3>Or, if your filenames had references to schema~</h3>\n<pre><span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">metaform</span><span class=\"o\">.</span><span class=\"n\">read_csv</span><span class=\"p\">(</span>\n  <span class=\"s1\">'https://gist.githubusercontent.com/mindey/3f2596e108a5c151f32e1967275a7689/raw/7c4c963219255008fdb438e8b9777cd658eea02e/hello-world.csv'</span><span class=\"p\">,</span>\n  <span class=\"n\">schema</span><span class=\"o\">=</span><span class=\"p\">{</span>\n    <span class=\"mi\">0</span><span class=\"p\">:</span> <span class=\"s1\">'Timestamp|to.unixtime'</span><span class=\"p\">,</span>\n    <span class=\"mi\">1</span><span class=\"p\">:</span> <span class=\"s1\">'KeyUpOrDown|lambda x: x==\"k\u2193\" and \"KeyDown\" or (x==\"k\u2191\" and \"KeyUp\")'</span><span class=\"p\">,</span>\n    <span class=\"mi\">2</span><span class=\"p\">:</span> <span class=\"s1\">'KeyName'</span><span class=\"p\">},</span>\n  <span class=\"n\">header</span><span class=\"o\">=</span><span class=\"kc\">None</span>\n<span class=\"p\">)</span>\n</pre>\n<p>Alternatively, save schema to wiki like <a href=\"https://github.com/mindey/schema/wiki/KeyEvent#mykeylogger-01\" rel=\"nofollow\">here</a>, and include the schema token inside filename by encoding it as sub-extension, that is, rename <tt><span class=\"pre\">hello-world.csv</span></tt> to <tt><span class=\"pre\">hello-world.GH~mindey+schema+KeyEvent@mykeylogger-01.csv</span></tt>:</p>\n<pre><span class=\"c1\"># To get schema token for filename (GH~mindey+schema+KeyEvent@mykeylogger-01) do:</span>\n<span class=\"n\">metaform</span><span class=\"o\">.</span><span class=\"n\">metawiki</span><span class=\"o\">.</span><span class=\"n\">url2ext</span><span class=\"p\">(</span><span class=\"s1\">'https://github.com/mindey/schema/wiki/KeyEvent#mykeylogger-01'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Then rename filename in the source, and just read file remotely or locally from disk:</span>\n<span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">metaform</span><span class=\"o\">.</span><span class=\"n\">read_csv</span><span class=\"p\">(</span><span class=\"s1\">'https://gist.githubusercontent.com/mindey/f33978b31468097b5003f032d5d85eb8/raw/9541191e4d99c052a7668223697ef0ef9ce37977/hello-world.GH~mindey+schema+KeyEvent@mykeylogger-01.csv'</span><span class=\"p\">,</span> <span class=\"n\">header</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"so-what-s-happening-here\">\n<h3>So, what\u2019s happening here?</h3>\n<pre><span class=\"n\">metaform</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span> <span class=\"n\">DATA</span> <span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span> <span class=\"n\">SCHEMA</span> <span class=\"p\">)</span>\n</pre>\n<p>Let\u2019s say we have some data:</p>\n<pre><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'hello'</span><span class=\"p\">:</span> <span class=\"mf\">1.0</span><span class=\"p\">,</span>\n    <span class=\"s1\">'world'</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span>\n    <span class=\"s1\">'how'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'is'</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">'are'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'you'</span><span class=\"p\">:</span> <span class=\"s1\">'doing'</span><span class=\"p\">}}]</span>\n<span class=\"p\">}</span>\n</pre>\n<p>We can get the template for defining schema, by <tt>metaform.template</tt>:</p>\n<pre><span class=\"n\">metaform</span><span class=\"o\">.</span><span class=\"n\">template</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n</pre>\n<pre>{'*': '',\n 'hello': {'*': ''},\n 'how': [{'*': '', 'are': {'you': {'*': ''}}}],\n 'world': {'*': ''}}\n</pre>\n<p>This provides an opportunity to specify metadata for each key and the\nobject itself. For example:</p>\n<pre><span class=\"n\">schema</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'*'</span><span class=\"p\">:</span> <span class=\"s1\">'greeting'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'hello'</span><span class=\"p\">:</span> <span class=\"s1\">'length'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'world'</span><span class=\"p\">:</span> <span class=\"s1\">'atoms'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'how'</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n         <span class=\"p\">{</span><span class=\"s1\">'*'</span><span class=\"p\">:</span> <span class=\"s1\">'method'</span><span class=\"p\">,</span>\n          <span class=\"s1\">'are'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n              <span class=\"s1\">'*'</span><span class=\"p\">:</span> <span class=\"s1\">'yup'</span><span class=\"p\">,</span>\n              <span class=\"s1\">'you'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'*'</span><span class=\"p\">:</span> <span class=\"s1\">'me'</span><span class=\"p\">}}</span>\n         <span class=\"p\">}</span>\n    <span class=\"p\">]}</span>\n\n<span class=\"n\">metaform</span><span class=\"o\">.</span><span class=\"n\">normalize</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">schema</span><span class=\"p\">)</span>\n</pre>\n<pre>{'atoms': 2, 'length': 1.0, 'method': ['is', {'yup': {'me': 'doing'}}]}\n</pre>\n<p>We recommend saving schemas you create for normalizations for data\nanalytics and <a href=\"https://github.com/drivernet\" rel=\"nofollow\">driver projects</a> in\ndot-folders <tt>.schema</tt>, in a JSON or YAML files in that folder.</p>\n<p>So, we have access to all keys, and can specify, what to do with them:</p>\n<pre><span class=\"n\">schema</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'*'</span><span class=\"p\">:</span> <span class=\"s1\">'greeting'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'hello'</span><span class=\"p\">:</span> <span class=\"s1\">'length|lambda x: x+5.'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'world'</span><span class=\"p\">:</span> <span class=\"s1\">'atoms|lambda x: str(x)+\"ABC\"'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'how'</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n         <span class=\"p\">{</span><span class=\"s1\">'*'</span><span class=\"p\">:</span> <span class=\"s1\">'method'</span><span class=\"p\">,</span>\n          <span class=\"s1\">'are'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n              <span class=\"s1\">'*'</span><span class=\"p\">:</span> <span class=\"s1\">'yup'</span><span class=\"p\">,</span>\n              <span class=\"s1\">'you'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'*'</span><span class=\"p\">:</span> <span class=\"s1\">'me|lambda x: \"-\".join(list(x))'</span><span class=\"p\">}}</span>\n         <span class=\"p\">}</span>\n    <span class=\"p\">]}</span>\n\n<span class=\"n\">metaform</span><span class=\"o\">.</span><span class=\"n\">normalize</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">schema</span><span class=\"p\">)</span>\n</pre>\n<pre>{'atoms': '2ABC',\n 'length': 6.0,\n 'method': ['is', {'yup': {'me': 'd-o-i-n-g'}}]}\n</pre>\n<p>And suppose, we want to define a more complex function, inconvenient via\nlambdas:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">metaform</span> <span class=\"kn\">import</span> <span class=\"n\">converters</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">some_func</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">):</span>\n    <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"mi\">123</span>\n    <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"mi\">345</span>\n    <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"n\">b</span><span class=\"o\">-</span><span class=\"n\">a</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"n\">x</span>\n\n<span class=\"n\">converters</span><span class=\"o\">.</span><span class=\"n\">func</span> <span class=\"o\">=</span> <span class=\"n\">some_func</span>\n\n<span class=\"n\">schema</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'*'</span><span class=\"p\">:</span> <span class=\"s1\">'greeting'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'hello'</span><span class=\"p\">:</span> <span class=\"s1\">'length|to.func'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'world'</span><span class=\"p\">:</span> <span class=\"s1\">'atoms|lambda x: str(x)+\"ABC\"'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'how'</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n         <span class=\"p\">{</span><span class=\"s1\">'*'</span><span class=\"p\">:</span> <span class=\"s1\">'method'</span><span class=\"p\">,</span>\n          <span class=\"s1\">'are'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n              <span class=\"s1\">'*'</span><span class=\"p\">:</span> <span class=\"s1\">'yup'</span><span class=\"p\">,</span>\n              <span class=\"s1\">'you'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'*'</span><span class=\"p\">:</span> <span class=\"s1\">'me|lambda x: \"-\".join(list(x))'</span><span class=\"p\">}}</span>\n         <span class=\"p\">}</span>\n    <span class=\"p\">]}</span>\n\n<span class=\"n\">metaform</span><span class=\"o\">.</span><span class=\"n\">normalize</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">schema</span><span class=\"p\">)</span>\n</pre>\n<pre>{'atoms': '2ABC',\n 'length': 222.0,\n 'method': ['is', {'yup': {'me': 'd-o-i-n-g'}}]}\n</pre>\n<p>We just renamed the keys, and normalized values! What else could we\nwant?</p>\n</div>\n<div id=\"normalizing-data\">\n<h3>Normalizing Data</h3>\n<p>Suppose we have similar data from different sources. For example, topics\nand comments are not so different after all, because if a comment\nbecomes large enough, it can stand as a topic of its own.</p>\n<pre><span class=\"n\">topics</span> <span class=\"o\">=</span> <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'https://api.infty.xyz/topics/?format=json'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">json</span><span class=\"p\">()[</span><span class=\"s1\">'results'</span><span class=\"p\">]</span>\n<span class=\"n\">comments</span> <span class=\"o\">=</span> <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'https://api.infty.xyz/comments/?format=json'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">json</span><span class=\"p\">()[</span><span class=\"s1\">'results'</span><span class=\"p\">]</span>\n</pre>\n<p>Let\u2019s define templates for them, with the key names and types to match:</p>\n<pre><span class=\"n\">topics_schema</span> <span class=\"o\">=</span> <span class=\"p\">[{</span>\n  <span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"s1\">'topic-id'</span><span class=\"p\">,</span>\n  <span class=\"s1\">'type'</span><span class=\"p\">:</span> <span class=\"s1\">'|lambda x: {0: \"NEED\", 1: \"GOAL\", 2: \"IDEA\", 3: \"PLAN\", 4: \"STEP\", 5: \"TASK\"}.get(x)'</span><span class=\"p\">,</span>\n  <span class=\"s1\">'owner'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"s1\">'user-id'</span><span class=\"p\">},</span>\n  <span class=\"s1\">'blockchain'</span><span class=\"p\">:</span> <span class=\"s1\">'|lambda x: x and True or False'</span><span class=\"p\">,</span>\n<span class=\"p\">}]</span>\n\n<span class=\"n\">normal_topics</span> <span class=\"o\">=</span> <span class=\"n\">metaform</span><span class=\"o\">.</span><span class=\"n\">normalize</span><span class=\"p\">(</span><span class=\"n\">topics</span><span class=\"p\">,</span> <span class=\"n\">topics_schema</span><span class=\"p\">)</span>\n\n<span class=\"n\">topics_df</span> <span class=\"o\">=</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">io</span><span class=\"o\">.</span><span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">json_normalize</span><span class=\"p\">(</span><span class=\"n\">normal_topics</span><span class=\"p\">)</span>\n<span class=\"n\">topics_df</span><span class=\"o\">.</span><span class=\"n\">dtypes</span>\n</pre>\n<pre>blockchain             bool\nbody                 object\ncategories           object\ncategories_names     object\nchildren             object\ncomment_count         int64\ncreated_date         object\ndata                 object\ndeclared            float64\neditors              object\nfunds               float64\nis_draft               bool\nlanguages            object\nmatched             float64\nowner.user-id         int64\nowner.username       object\nparents              object\ntitle                object\ntopic-id              int64\ntype                 object\nupdated_date         object\nurl                  object\ndtype: object\n</pre>\n<pre><span class=\"n\">comments_schema</span> <span class=\"o\">=</span> <span class=\"p\">[{</span>\n  <span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"s1\">'comment-id'</span><span class=\"p\">,</span>\n  <span class=\"s1\">'topic'</span><span class=\"p\">:</span> <span class=\"s1\">'topic-url'</span><span class=\"p\">,</span>\n  <span class=\"s1\">'text'</span><span class=\"p\">:</span> <span class=\"s1\">'body'</span><span class=\"p\">,</span>\n  <span class=\"s1\">'owner'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"s1\">'user-id'</span><span class=\"p\">},</span>\n  <span class=\"s1\">'blockchain'</span><span class=\"p\">:</span> <span class=\"s1\">'|lambda x: x and True or False'</span><span class=\"p\">,</span>\n<span class=\"p\">}]</span>\n\n<span class=\"n\">normal_comments</span> <span class=\"o\">=</span> <span class=\"n\">metaform</span><span class=\"o\">.</span><span class=\"n\">normalize</span><span class=\"p\">(</span><span class=\"n\">comments</span><span class=\"p\">,</span> <span class=\"n\">comments_schema</span><span class=\"p\">)</span>\n\n<span class=\"n\">comments_df</span> <span class=\"o\">=</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">io</span><span class=\"o\">.</span><span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">json_normalize</span><span class=\"p\">(</span><span class=\"n\">normal_comments</span><span class=\"p\">)</span>\n<span class=\"n\">comments_df</span><span class=\"o\">.</span><span class=\"n\">dtypes</span>\n</pre>\n<pre>assumed_hours      object\nblockchain           bool\nbody               object\nclaimed_hours      object\ncomment-id          int64\ncreated_date       object\ndonated           float64\nlanguages          object\nmatched           float64\nowner.user-id       int64\nowner.username     object\nparent             object\nremains           float64\ntopic-url          object\nupdated_date       object\nurl                object\ndtype: object\n</pre>\n<pre><span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">concat</span><span class=\"p\">([</span><span class=\"n\">topics_df</span><span class=\"p\">,</span> <span class=\"n\">comments_df</span><span class=\"p\">],</span> <span class=\"n\">sort</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n</pre>\n</div>\n</div>\n\n          </div>"}, "last_serial": 6120051, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "3d4e847490b8f74a33c59cda564e29e5", "sha256": "f997b6e2194878cef9e40e6faa0a6c4acec5ecd971877e2f01dca85acba958fa"}, "downloads": -1, "filename": "metaform-1.0.0.tar.gz", "has_sig": false, "md5_digest": "3d4e847490b8f74a33c59cda564e29e5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10274, "upload_time": "2019-05-05T15:52:22", "upload_time_iso_8601": "2019-05-05T15:52:22.081378Z", "url": "https://files.pythonhosted.org/packages/10/41/29e7e8166a2634cd0a3700b9501b69992114c5844af0547b785dd83ae6f0/metaform-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "2cfbbcd9e63a1ef52ae5e67d77e9e5c7", "sha256": "e8a6bd3b770000477ee3ce0771631eedaafb770280bb3b405f9fd0e92a3e5717"}, "downloads": -1, "filename": "metaform-1.0.1.tar.gz", "has_sig": false, "md5_digest": "2cfbbcd9e63a1ef52ae5e67d77e9e5c7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12620, "upload_time": "2019-10-21T14:51:53", "upload_time_iso_8601": "2019-10-21T14:51:53.893261Z", "url": "https://files.pythonhosted.org/packages/fd/17/e2ad99534e43b9483def6ca6dbfef085741c70470fddc3ce33771f850b6a/metaform-1.0.1.tar.gz", "yanked": false}], "1.0.1.1": [{"comment_text": "", "digests": {"md5": "0aa0e693835b0c24b5b73a090d2781c7", "sha256": "8c8a7cc918937e7817ade9e1298543f475157861875f633dc0e6560d1d96778c"}, "downloads": -1, "filename": "metaform-1.0.1.1.tar.gz", "has_sig": false, "md5_digest": "0aa0e693835b0c24b5b73a090d2781c7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13923, "upload_time": "2019-10-21T15:17:18", "upload_time_iso_8601": "2019-10-21T15:17:18.566776Z", "url": "https://files.pythonhosted.org/packages/00/98/660dcc38f009d04448ad8207ef4a676191caba8d578176b9e75a22ee4323/metaform-1.0.1.1.tar.gz", "yanked": false}], "1.0.1.2": [{"comment_text": "", "digests": {"md5": "31fbdd10e25925dae6022294ca2717db", "sha256": "0200a212c5a5d1e1adddb8f3b820e20dbaaa431dff4a16fb4afbde7623bcf0b8"}, "downloads": -1, "filename": "metaform-1.0.1.2.tar.gz", "has_sig": false, "md5_digest": "31fbdd10e25925dae6022294ca2717db", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14062, "upload_time": "2019-10-24T19:47:27", "upload_time_iso_8601": "2019-10-24T19:47:27.937907Z", "url": "https://files.pythonhosted.org/packages/25/c9/2cd30aed66ae88f359225811da96b05c837fb2facb2d8d6fe808099ec704/metaform-1.0.1.2.tar.gz", "yanked": false}], "1.0.1.3": [{"comment_text": "", "digests": {"md5": "4d661b973db8be7d1aa8c61fed2f8f6a", "sha256": "f7923997b6d56bb9ec366c6dc2ef9919c4f290cfca42bba5455e6c81864414b5"}, "downloads": -1, "filename": "metaform-1.0.1.3.tar.gz", "has_sig": false, "md5_digest": "4d661b973db8be7d1aa8c61fed2f8f6a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14343, "upload_time": "2019-11-07T15:53:34", "upload_time_iso_8601": "2019-11-07T15:53:34.187754Z", "url": "https://files.pythonhosted.org/packages/61/0c/dcdfce56eb722605e590bcd64e366f7367bbc883a99abc1a0f1433dac3a0/metaform-1.0.1.3.tar.gz", "yanked": false}], "1.0.1.4": [{"comment_text": "", "digests": {"md5": "2530eef42583b14e5ffb9b58e378decc", "sha256": "fccc5a70bfa5a31a7a507669caf9aa0a36212c64c5bccaa496d89015fd0edfc0"}, "downloads": -1, "filename": "metaform-1.0.1.4.tar.gz", "has_sig": false, "md5_digest": "2530eef42583b14e5ffb9b58e378decc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14368, "upload_time": "2019-11-09T18:23:30", "upload_time_iso_8601": "2019-11-09T18:23:30.573699Z", "url": "https://files.pythonhosted.org/packages/65/72/b49a5c82143067354bebd76381ca3392ec8e43b52baba34a074ae8a26bbd/metaform-1.0.1.4.tar.gz", "yanked": false}], "1.0.1.5": [{"comment_text": "", "digests": {"md5": "da84cc09bbdca4d4fa922b0db39aee37", "sha256": "e8bf0564d8b785e39eb55500ad4080d046808dc2d340d9d6f68f7de924831268"}, "downloads": -1, "filename": "metaform-1.0.1.5.tar.gz", "has_sig": false, "md5_digest": "da84cc09bbdca4d4fa922b0db39aee37", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14388, "upload_time": "2019-11-09T18:41:57", "upload_time_iso_8601": "2019-11-09T18:41:57.756687Z", "url": "https://files.pythonhosted.org/packages/e2/b9/72f4d1c2c773d20ba84bd1808837630ec45d75eeb0f056e8c0d9aae582cb/metaform-1.0.1.5.tar.gz", "yanked": false}], "1.0.1.6": [{"comment_text": "", "digests": {"md5": "f5b88af0a088e7be001d82d25f370948", "sha256": "c218b2a1d7e3a082054c8af48dffb54503595641536f12a7113471bc55325f16"}, "downloads": -1, "filename": "metaform-1.0.1.6.tar.gz", "has_sig": false, "md5_digest": "f5b88af0a088e7be001d82d25f370948", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14459, "upload_time": "2019-11-09T18:58:33", "upload_time_iso_8601": "2019-11-09T18:58:33.778782Z", "url": "https://files.pythonhosted.org/packages/5b/48/3cfbc30b481b4fda63f82010217392b5bf35778d9a94a466a5211ea20196/metaform-1.0.1.6.tar.gz", "yanked": false}], "1.0.1.7": [{"comment_text": "", "digests": {"md5": "2271125cabd610a5dc6b0ed9fa13bc4b", "sha256": "2f21eec354704c89076646305e5ff61bbead97b92ea7f648039c7266eb132b41"}, "downloads": -1, "filename": "metaform-1.0.1.7.tar.gz", "has_sig": false, "md5_digest": "2271125cabd610a5dc6b0ed9fa13bc4b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15145, "upload_time": "2019-11-09T21:45:04", "upload_time_iso_8601": "2019-11-09T21:45:04.818895Z", "url": "https://files.pythonhosted.org/packages/9a/f2/814c88af4390a93788cca7e5c02b0bc0f5e090a9be6a8636000bff1b81f2/metaform-1.0.1.7.tar.gz", "yanked": false}], "1.0.1.8": [{"comment_text": "", "digests": {"md5": "979584d7b43f6ac1cc70ade33de7b065", "sha256": "1862eb3a3a8ad0e048ea0dd638f1206dd06b25e537cb93d2d8396e680e3edfa9"}, "downloads": -1, "filename": "metaform-1.0.1.8.tar.gz", "has_sig": false, "md5_digest": "979584d7b43f6ac1cc70ade33de7b065", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15005, "upload_time": "2019-11-09T21:53:56", "upload_time_iso_8601": "2019-11-09T21:53:56.258281Z", "url": "https://files.pythonhosted.org/packages/65/c1/424fe3b3cf10d01a0ed6fb364c346ebdf2952e6d45bd55c8f65891cf2075/metaform-1.0.1.8.tar.gz", "yanked": false}], "1.0.1.9": [{"comment_text": "", "digests": {"md5": "8b470c416d3228f43a8808a8757d19ff", "sha256": "8026052e71a3843aebffb7cdd71e0f530810b07db85116c61a85cb1923a1a7aa"}, "downloads": -1, "filename": "metaform-1.0.1.9.tar.gz", "has_sig": false, "md5_digest": "8b470c416d3228f43a8808a8757d19ff", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15865, "upload_time": "2019-11-11T08:36:56", "upload_time_iso_8601": "2019-11-11T08:36:56.506146Z", "url": "https://files.pythonhosted.org/packages/a3/51/b63ee5bb736ce0dd2599fef3a86a02e26fe8b977f4197d756e7a25407706/metaform-1.0.1.9.tar.gz", "yanked": false}], "1.0.2.0": [{"comment_text": "", "digests": {"md5": "65c909a64ad8314096d9c616d64f463d", "sha256": "5bf5a707470b21980b04ce779bd58ced9bd2df99e8efd37e43891fef7229ffc2"}, "downloads": -1, "filename": "metaform-1.0.2.0.tar.gz", "has_sig": false, "md5_digest": "65c909a64ad8314096d9c616d64f463d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15969, "upload_time": "2019-11-11T16:51:05", "upload_time_iso_8601": "2019-11-11T16:51:05.405332Z", "url": "https://files.pythonhosted.org/packages/5b/56/3b059d9e0a9eb47d70a80ad57afd81563878985fee8f4712b3ca245efa7f/metaform-1.0.2.0.tar.gz", "yanked": false}], "1.0.2.1": [{"comment_text": "", "digests": {"md5": "a984f5ab0b1cf7144ce3546ef644148d", "sha256": "420ba49b4c6ac0ba805ce4afadb7dc4240203fefcd1238903726f094e45fb293"}, "downloads": -1, "filename": "metaform-1.0.2.1.tar.gz", "has_sig": false, "md5_digest": "a984f5ab0b1cf7144ce3546ef644148d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15996, "upload_time": "2019-11-11T17:41:41", "upload_time_iso_8601": "2019-11-11T17:41:41.757294Z", "url": "https://files.pythonhosted.org/packages/90/50/d4ab32c5cf226e63f2d3a6fe66d0a09d0bf5d308b33e296cdc8f904caa22/metaform-1.0.2.1.tar.gz", "yanked": false}], "1.0.2.2": [{"comment_text": "", "digests": {"md5": "3b7fb09d8faa2f532823f4b129ce6b6d", "sha256": "73475c7dd325493e6325533c914a7897da15212d2dbcfde293c34311c3369883"}, "downloads": -1, "filename": "metaform-1.0.2.2.tar.gz", "has_sig": false, "md5_digest": "3b7fb09d8faa2f532823f4b129ce6b6d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17467, "upload_time": "2019-11-11T23:04:49", "upload_time_iso_8601": "2019-11-11T23:04:49.842776Z", "url": "https://files.pythonhosted.org/packages/53/02/906bc659343c55c301c4aaf0e33c69f2a9590c78438547599143a9558cf5/metaform-1.0.2.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "3b7fb09d8faa2f532823f4b129ce6b6d", "sha256": "73475c7dd325493e6325533c914a7897da15212d2dbcfde293c34311c3369883"}, "downloads": -1, "filename": "metaform-1.0.2.2.tar.gz", "has_sig": false, "md5_digest": "3b7fb09d8faa2f532823f4b129ce6b6d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17467, "upload_time": "2019-11-11T23:04:49", "upload_time_iso_8601": "2019-11-11T23:04:49.842776Z", "url": "https://files.pythonhosted.org/packages/53/02/906bc659343c55c301c4aaf0e33c69f2a9590c78438547599143a9558cf5/metaform-1.0.2.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:55:56 2020"}