{"info": {"author": "Chris Streeter", "author_email": "pypi@chrisstreeter.com", "bugtrack_url": null, "classifiers": ["Framework :: Django", "Intended Audience :: Developers", "Intended Audience :: System Administrators", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.5", "Topic :: Software Development"], "description": "About\n-----\n\nA way to globally disable writes to your database. This works by\ninserting a cursor wrapper between Django's ``CursorWrapper`` and the\ndatabase connection's cursor wrapper.\n\nInstallation\n------------\n\nThe library is hosted on\n`PyPi <http://pypi.python.org/pypi/django-db-readonly/>`_, so you can\ngrab it there with::\n\n    pip install django-db-readonly\n\nThen add ``readonly`` to your ``INSTALLED_APPS``.::\n\n    INSTALLED_APPS = (\n        # ...\n        'readonly',\n        # ...\n    )\n\nUsage\n-----\n\nYou need to add this line to your ``settings.py`` to make the database read-only:\n\n::\n\n    # Set to False to allow writes\n    SITE_READ_ONLY = True\n\nWhen you do this, any write action to your databases will generate an\nexception. You should catch this exception and deal with it somehow. Or\nlet Django display an `error 500\npage <http://docs.djangoproject.com/en/1.3/topics/http/urls/#handler500>`_.\nThe exception you will want to catch is\n``readonly.exceptions.DatabaseWriteDenied`` which inherits from\n``django.db.utils.DatabaseError``.\n\nThere is also a middleware class that will handle the exceptions and\nattempt to handle them as explained below. To enable the middleware, add the following line to your\n``settings.py``:\n\n::\n\n    MIDDLEWARE_CLASSES = (\n        # ...\n        'readonly.middleware.DatabaseReadOnlyMiddleware',\n        # ...\n    )\n\nThis will then catch ``DatabaseWriteDenied`` exceptions. If the request is a POST request, we\nwill redirect the user to the same URL, but as a GET request. If the\nrequest is not a POST (ie. a GET), we will just display a\n``HttpResponse`` with text telling the user the site is in read-only\nmode.\n\nIn addition, the middleware class can add an error-type message using\nthe ``django.contrib.messages`` module. Add:\n\n::\n\n    # Enable\n    DB_READ_ONLY_MIDDLEWARE_MESSAGE = True\n\nto your ``settings.py`` and then on POST requests that generate a\n``DatabaseWriteDenied`` exception, we will add an error message\ninforming the user that the site is in read-only mode.\n\nFor additional messaging, there is a context processor that adds\n``SITE_READ_ONLY`` into the context. Add the following line in your\n``settings.py``:\n\n::\n\n    TEMPLATE_CONTEXT_PROCESSORS = (\n        # ...\n        'readonly.context_processors.readonly',\n        # ...\n    )\n\nAnd use it as you would any boolean in the template, e.g.\n``{% if SITE_READ_ONLY %} We're down for maintenance. {% endif %}``\n\nTesting\n-------\n\nThere aren't any tests included, yet. Run it at your own risk.\n\nCaveats\n-------\n\nThis will work with `Django Debug\nToolbar <https://github.com/robhudson/django-debug-toolbar>`_. In fact,\nI was inspired by `DDT's sql\npanel <https://github.com/robhudson/django-debug-toolbar/blob/master/debug_toolbar/panels/sql.py>`_\nwhen writing this app.\n\nHowever, in order for both DDT *and* django-db-readonly to work, you\nneed to make sure that you have ``readonly`` before ``debug_toolbar`` in\nyour ``INSTALLED_APPS``. Otherwise, you are responsible for debugging\nwhat is going on. Of course, I'm not sure why you'd be running DDT in\nproduction and running django-db-readonly in development, but whatever,\nI'm not you.\n\nMore generally, if you have any other apps that modifies either\n``django.db.backends.util.CursorWrapper`` or\n``django.db.backends.util.CursorDebugWrapper``, you need to make sure\nthat ``readonly`` is placed *before* of those apps in\n``INSTALLED_APPS``.\n\nThe Nitty Gritty\n----------------\n\nHow does this do what it does? Well, django-db-readonly sits between\nDjango's own cursor wrapper at ``django.db.backends.util.CursorWrapper``\nand the database specific cursor at\n``django.db.backends.*.base.*CursorWrapper``. It overrides two specific\nmethods: ``execute`` and ``executemany``. If the site is in read-only\nmode, then the SQL is examined to see if it contains any write actions\n(defined in ``readonly.ReadOnlyCursorWrapper.SQL_WRITE_BLACKLIST``). If\na write is detected, an exception is raised.\n\nLicense\n-------\n\nUses the `MIT <http://opensource.org/licenses/MIT>`_ license.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/streeter/django-db-readonly", "keywords": null, "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "ambition-django-db-readonly", "package_url": "https://pypi.org/project/ambition-django-db-readonly/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/ambition-django-db-readonly/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://github.com/streeter/django-db-readonly"}, "release_url": "https://pypi.org/project/ambition-django-db-readonly/1.0.1/", "requires_dist": null, "requires_python": null, "summary": "Add a global database read-only setting.", "version": "1.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"about\">\n<h2>About</h2>\n<p>A way to globally disable writes to your database. This works by\ninserting a cursor wrapper between Django\u2019s <tt>CursorWrapper</tt> and the\ndatabase connection\u2019s cursor wrapper.</p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>The library is hosted on\n<a href=\"http://pypi.python.org/pypi/django-db-readonly/\" rel=\"nofollow\">PyPi</a>, so you can\ngrab it there with:</p>\n<pre>pip install django-db-readonly\n</pre>\n<p>Then add <tt>readonly</tt> to your <tt>INSTALLED_APPS</tt>.:</p>\n<pre>INSTALLED_APPS = (\n    # ...\n    'readonly',\n    # ...\n)\n</pre>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>You need to add this line to your <tt>settings.py</tt> to make the database read-only:</p>\n<pre># Set to False to allow writes\nSITE_READ_ONLY = True\n</pre>\n<p>When you do this, any write action to your databases will generate an\nexception. You should catch this exception and deal with it somehow. Or\nlet Django display an <a href=\"http://docs.djangoproject.com/en/1.3/topics/http/urls/#handler500\" rel=\"nofollow\">error 500\npage</a>.\nThe exception you will want to catch is\n<tt>readonly.exceptions.DatabaseWriteDenied</tt> which inherits from\n<tt>django.db.utils.DatabaseError</tt>.</p>\n<p>There is also a middleware class that will handle the exceptions and\nattempt to handle them as explained below. To enable the middleware, add the following line to your\n<tt>settings.py</tt>:</p>\n<pre>MIDDLEWARE_CLASSES = (\n    # ...\n    'readonly.middleware.DatabaseReadOnlyMiddleware',\n    # ...\n)\n</pre>\n<p>This will then catch <tt>DatabaseWriteDenied</tt> exceptions. If the request is a POST request, we\nwill redirect the user to the same URL, but as a GET request. If the\nrequest is not a POST (ie. a GET), we will just display a\n<tt>HttpResponse</tt> with text telling the user the site is in read-only\nmode.</p>\n<p>In addition, the middleware class can add an error-type message using\nthe <tt>django.contrib.messages</tt> module. Add:</p>\n<pre># Enable\nDB_READ_ONLY_MIDDLEWARE_MESSAGE = True\n</pre>\n<p>to your <tt>settings.py</tt> and then on POST requests that generate a\n<tt>DatabaseWriteDenied</tt> exception, we will add an error message\ninforming the user that the site is in read-only mode.</p>\n<p>For additional messaging, there is a context processor that adds\n<tt>SITE_READ_ONLY</tt> into the context. Add the following line in your\n<tt>settings.py</tt>:</p>\n<pre>TEMPLATE_CONTEXT_PROCESSORS = (\n    # ...\n    'readonly.context_processors.readonly',\n    # ...\n)\n</pre>\n<p>And use it as you would any boolean in the template, e.g.\n<tt>{% if SITE_READ_ONLY %} We're down for maintenance. {% endif %}</tt></p>\n</div>\n<div id=\"testing\">\n<h2>Testing</h2>\n<p>There aren\u2019t any tests included, yet. Run it at your own risk.</p>\n</div>\n<div id=\"caveats\">\n<h2>Caveats</h2>\n<p>This will work with <a href=\"https://github.com/robhudson/django-debug-toolbar\" rel=\"nofollow\">Django Debug\nToolbar</a>. In fact,\nI was inspired by <a href=\"https://github.com/robhudson/django-debug-toolbar/blob/master/debug_toolbar/panels/sql.py\" rel=\"nofollow\">DDT\u2019s sql\npanel</a>\nwhen writing this app.</p>\n<p>However, in order for both DDT <em>and</em> django-db-readonly to work, you\nneed to make sure that you have <tt>readonly</tt> before <tt>debug_toolbar</tt> in\nyour <tt>INSTALLED_APPS</tt>. Otherwise, you are responsible for debugging\nwhat is going on. Of course, I\u2019m not sure why you\u2019d be running DDT in\nproduction and running django-db-readonly in development, but whatever,\nI\u2019m not you.</p>\n<p>More generally, if you have any other apps that modifies either\n<tt>django.db.backends.util.CursorWrapper</tt> or\n<tt>django.db.backends.util.CursorDebugWrapper</tt>, you need to make sure\nthat <tt>readonly</tt> is placed <em>before</em> of those apps in\n<tt>INSTALLED_APPS</tt>.</p>\n</div>\n<div id=\"the-nitty-gritty\">\n<h2>The Nitty Gritty</h2>\n<p>How does this do what it does? Well, django-db-readonly sits between\nDjango\u2019s own cursor wrapper at <tt>django.db.backends.util.CursorWrapper</tt>\nand the database specific cursor at\n<tt><span class=\"pre\">django.db.backends.*.base.*CursorWrapper</span></tt>. It overrides two specific\nmethods: <tt>execute</tt> and <tt>executemany</tt>. If the site is in read-only\nmode, then the SQL is examined to see if it contains any write actions\n(defined in <tt>readonly.ReadOnlyCursorWrapper.SQL_WRITE_BLACKLIST</tt>). If\na write is detected, an exception is raised.</p>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>Uses the <a href=\"http://opensource.org/licenses/MIT\" rel=\"nofollow\">MIT</a> license.</p>\n</div>\n\n          </div>"}, "last_serial": 2562309, "releases": {"1.0.1": []}, "urls": [], "timestamp": "Thu May  7 18:18:23 2020"}