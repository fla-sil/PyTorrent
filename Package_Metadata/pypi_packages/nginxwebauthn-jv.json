{"info": {"author": "Jan Vitek", "author_email": "mail@janvitek.com", "bugtrack_url": null, "classifiers": ["Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# NGINX + WebAuthn for your small scale web applications\n\n## What is this for?\n\nIf you run some small services on a public-facing server that you would like to protect (i.e. Jupyter of VS code-server) and have a Yubikey or similar, you can use this repository to add secure, public-key authentication to them **without modifying the original service itself**.\n\n## How to set up?\n\nRun `nginx -V` and check it is compiled with `auth_request_module` otherwise recompile it with `--with-http_auth_request_module` configuration parameter. Then set up NGINX to proxy your service, note that you will also need SSL because WebAuthn only works over HTTPS.\n\n```\nserver {\n    server_name myserver.bennewhouse.com; # managed by Certbot\n\n    # Redirect everything that begins with /auth to the authorization server\n    location /nginx_fido_auth {\n        proxy_pass http://127.0.0.1:8000;\n    }\n\n    # If the authorization server returns 401 Unauthorized, redirect to /atuh/login\n    error_page 401 = @error401;\n    location @error401 {\n        return 302 /nginx_fido_auth/login;\n    }\n\n    root /var/www/html;\n    index index.html;\n    location / {\n        auth_request /nginx_fido_auth/check; # Ping /auth/check for every request, and if it returns 200 OK grant access\n        # The next two lines are ptional config for authentication header needed by your application.\n        # Replace X-SSL-CERT with any header your application expects to carry the user ID.\n        auth_request_set $fido $upstream_http_fido_user;\n        passenger_set_header 'X-SSL-CERT' $fido;\n\n        # Here is where you would put other proxy_pass info to forward to Jupyter, etc. In this example I'm just serving raw HTML\n    }\n\n    # Override the application logout url with the fido auth logout url. Replace /users/logout with url where your application logout button points to.\n    location /users/logout {\n        return 302 /nginx_fido_auth/logout\n    }\n\n    listen [::]:443 ssl ; # managed by Certbot\n    listen 443 ssl; # managed by Certbot\n    ssl_certificate /etc/letsencrypt/live/myserver.bennewhouse.com/fullchain.pem; # managed by Certbot\n    ssl_certificate_key /etc/letsencrypt/live/myserver.bennewhouse.com/privkey.pem; # managed by Certbot\n    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot\n    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot\n}\n```\n\nReload NGINX with the aforementioned configuration. Next install the nginxwebauthn Python package as root -- dependencies needs to be installed globally to be able to add user credentials later. Other option is to change privileges to `/opt/nginxwebauthn` to be able to write there by regular user which may be a security flaw. Install script takes two arguments -- user and group for the script to be started as.  \n\n```\nsudo su\npip3 install nginxwebauthn-jv\nnginxwebauthn-ubuntu-install.py user group\n```\n\nIf `nginxwebauthn-ubuntu-install.py` fails for any reason you can try to replicate steps in ``cat `which nginxwebauthn-install.py` ``. Basically it creates a directory structure in `/opt/nginxwebauthn` and configures systemd service to run the `nginxwebauthn.py` script as a daemon.\n\n## How to use?\n\nBrowse to your site with appended `/nginx_fido_auth/register` in a browser that supports WebAuthn. Insert your security key when requested, and the page will tell you to run a command that looks like:\n\n```\nsudo python3 nginx-webauthn.py save-client myserver.bennewhouse.com *big long base64 string* *big long base64 string* auth_name\n```\n\nReplace `auth_name` with something unique that will help you identify the credential and run that on the server. You only need to do this once per key. The credentials are stored in `/opt/nginxwebauthn/credentials/auth_name`. If you set up your NGINX to expect the HTTP header to distinguish the authenticated user put the header contents to `/opt/nginxwebauthn/headers/auth_name`. The header file is paired with credential file by file name. `\\n` characters in headers are replaced with `\\t` and sent back to the NGINX server.\n\nThat's it! Navigating back to your website will now authenticate you using the key you just saved.\n\n## How to build pip package\n\n```\nsudo python3 -m pip install --upgrade pip setuptools wheel\nsudo -H pip3 install keyring\ngit clone https://github.com/jan-vitek/nginxwebauthn\ncd nginxwebauthn\npython3 setup.py bdist_wheel\n```\n\nThen you can distribute the `.whl` file from `dist` to your server and install it with `pip3 install nginxwebauthn_jv-*.whl`. Or if you are registered to PyPI.org you can upload the package this way:\n```\ncat << EOF > ~/.pypirc\n[distutils] \nindex-servers=pypi\n[pypi] \nrepository = https://upload.pypi.org/legacy/ \nusername = your_pypi_username\nEOF\n\npython -m twine upload dist/*\n```\n\n## Limitations\n\n- This uses the built-in python3 server, which isn't designed for high-volume. You'd want to port this to a uwsgi setup if you wanted to productionize it.\n\n## FAQ\n\n*Why do I need to run the `save-client` command?*\n\nThis seemed easier than setting up a potentially insecure password so that you could authorize your key. Instead it asserts that you have shell access by requiring that you run a command.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/jan-vite/nginxwebauthn", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "nginxwebauthn-jv", "package_url": "https://pypi.org/project/nginxwebauthn-jv/", "platform": "", "project_url": "https://pypi.org/project/nginxwebauthn-jv/", "project_urls": {"Homepage": "https://github.com/jan-vite/nginxwebauthn"}, "release_url": "https://pypi.org/project/nginxwebauthn-jv/0.1.2/", "requires_dist": ["fido2 (==0.6.0)"], "requires_python": "", "summary": "WebAuthn auth proxy for NGINX. Fork of github.com/newhouseb/nginxwebauthn with multi user capabilities and HTTP header user identification.", "version": "0.1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>NGINX + WebAuthn for your small scale web applications</h1>\n<h2>What is this for?</h2>\n<p>If you run some small services on a public-facing server that you would like to protect (i.e. Jupyter of VS code-server) and have a Yubikey or similar, you can use this repository to add secure, public-key authentication to them <strong>without modifying the original service itself</strong>.</p>\n<h2>How to set up?</h2>\n<p>Run <code>nginx -V</code> and check it is compiled with <code>auth_request_module</code> otherwise recompile it with <code>--with-http_auth_request_module</code> configuration parameter. Then set up NGINX to proxy your service, note that you will also need SSL because WebAuthn only works over HTTPS.</p>\n<pre><code>server {\n    server_name myserver.bennewhouse.com; # managed by Certbot\n\n    # Redirect everything that begins with /auth to the authorization server\n    location /nginx_fido_auth {\n        proxy_pass http://127.0.0.1:8000;\n    }\n\n    # If the authorization server returns 401 Unauthorized, redirect to /atuh/login\n    error_page 401 = @error401;\n    location @error401 {\n        return 302 /nginx_fido_auth/login;\n    }\n\n    root /var/www/html;\n    index index.html;\n    location / {\n        auth_request /nginx_fido_auth/check; # Ping /auth/check for every request, and if it returns 200 OK grant access\n        # The next two lines are ptional config for authentication header needed by your application.\n        # Replace X-SSL-CERT with any header your application expects to carry the user ID.\n        auth_request_set $fido $upstream_http_fido_user;\n        passenger_set_header 'X-SSL-CERT' $fido;\n\n        # Here is where you would put other proxy_pass info to forward to Jupyter, etc. In this example I'm just serving raw HTML\n    }\n\n    # Override the application logout url with the fido auth logout url. Replace /users/logout with url where your application logout button points to.\n    location /users/logout {\n        return 302 /nginx_fido_auth/logout\n    }\n\n    listen [::]:443 ssl ; # managed by Certbot\n    listen 443 ssl; # managed by Certbot\n    ssl_certificate /etc/letsencrypt/live/myserver.bennewhouse.com/fullchain.pem; # managed by Certbot\n    ssl_certificate_key /etc/letsencrypt/live/myserver.bennewhouse.com/privkey.pem; # managed by Certbot\n    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot\n    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot\n}\n</code></pre>\n<p>Reload NGINX with the aforementioned configuration. Next install the nginxwebauthn Python package as root -- dependencies needs to be installed globally to be able to add user credentials later. Other option is to change privileges to <code>/opt/nginxwebauthn</code> to be able to write there by regular user which may be a security flaw. Install script takes two arguments -- user and group for the script to be started as.</p>\n<pre><code>sudo su\npip3 install nginxwebauthn-jv\nnginxwebauthn-ubuntu-install.py user group\n</code></pre>\n<p>If <code>nginxwebauthn-ubuntu-install.py</code> fails for any reason you can try to replicate steps in <code>cat `which nginxwebauthn-install.py`</code>. Basically it creates a directory structure in <code>/opt/nginxwebauthn</code> and configures systemd service to run the <code>nginxwebauthn.py</code> script as a daemon.</p>\n<h2>How to use?</h2>\n<p>Browse to your site with appended <code>/nginx_fido_auth/register</code> in a browser that supports WebAuthn. Insert your security key when requested, and the page will tell you to run a command that looks like:</p>\n<pre><code>sudo python3 nginx-webauthn.py save-client myserver.bennewhouse.com *big long base64 string* *big long base64 string* auth_name\n</code></pre>\n<p>Replace <code>auth_name</code> with something unique that will help you identify the credential and run that on the server. You only need to do this once per key. The credentials are stored in <code>/opt/nginxwebauthn/credentials/auth_name</code>. If you set up your NGINX to expect the HTTP header to distinguish the authenticated user put the header contents to <code>/opt/nginxwebauthn/headers/auth_name</code>. The header file is paired with credential file by file name. <code>\\n</code> characters in headers are replaced with <code>\\t</code> and sent back to the NGINX server.</p>\n<p>That's it! Navigating back to your website will now authenticate you using the key you just saved.</p>\n<h2>How to build pip package</h2>\n<pre><code>sudo python3 -m pip install --upgrade pip setuptools wheel\nsudo -H pip3 install keyring\ngit clone https://github.com/jan-vitek/nginxwebauthn\ncd nginxwebauthn\npython3 setup.py bdist_wheel\n</code></pre>\n<p>Then you can distribute the <code>.whl</code> file from <code>dist</code> to your server and install it with <code>pip3 install nginxwebauthn_jv-*.whl</code>. Or if you are registered to PyPI.org you can upload the package this way:</p>\n<pre><code>cat &lt;&lt; EOF &gt; ~/.pypirc\n[distutils] \nindex-servers=pypi\n[pypi] \nrepository = https://upload.pypi.org/legacy/ \nusername = your_pypi_username\nEOF\n\npython -m twine upload dist/*\n</code></pre>\n<h2>Limitations</h2>\n<ul>\n<li>This uses the built-in python3 server, which isn't designed for high-volume. You'd want to port this to a uwsgi setup if you wanted to productionize it.</li>\n</ul>\n<h2>FAQ</h2>\n<p><em>Why do I need to run the <code>save-client</code> command?</em></p>\n<p>This seemed easier than setting up a potentially insecure password so that you could authorize your key. Instead it asserts that you have shell access by requiring that you run a command.</p>\n\n          </div>"}, "last_serial": 6968074, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "52b389ebf25ba9bcfde943d348866ebe", "sha256": "e5c2c6e27e4f37df4723a540e2705b4c6d24ab2fdd3e951589765cc06c41cec3"}, "downloads": -1, "filename": "nginxwebauthn_jv-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "52b389ebf25ba9bcfde943d348866ebe", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 10496, "upload_time": "2020-04-06T16:44:22", "upload_time_iso_8601": "2020-04-06T16:44:22.506981Z", "url": "https://files.pythonhosted.org/packages/e8/c0/98441728293cb0552765a48bc91299e0aef760e37e8ffe643715b6bc99e4/nginxwebauthn_jv-0.1-py3-none-any.whl", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "2dea249bd5e38c10409b44321d71a478", "sha256": "92dfd4ccb169bfa84165227ce4bca5487bd5afaf88f34d0add8022d77c336aa9"}, "downloads": -1, "filename": "nginxwebauthn_jv-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "2dea249bd5e38c10409b44321d71a478", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 10577, "upload_time": "2020-04-06T18:33:41", "upload_time_iso_8601": "2020-04-06T18:33:41.708371Z", "url": "https://files.pythonhosted.org/packages/cf/30/9a777ccb78d45ced7f52bac108daf050d465e7df339bf84d05b56e5907ac/nginxwebauthn_jv-0.1.1-py3-none-any.whl", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "b243da9cdee937c980a8eaf58d47abd0", "sha256": "66b15f95ed1fbc0125376dec91946fef361201e8c36a9f791e49433778a32f56"}, "downloads": -1, "filename": "nginxwebauthn_jv-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "b243da9cdee937c980a8eaf58d47abd0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7471, "upload_time": "2020-04-07T09:53:00", "upload_time_iso_8601": "2020-04-07T09:53:00.210164Z", "url": "https://files.pythonhosted.org/packages/0c/94/59adddfd98cd1ddfc647e4f6bcc7dda0c3b780d08ada5b39fc659696dc22/nginxwebauthn_jv-0.1.2-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b243da9cdee937c980a8eaf58d47abd0", "sha256": "66b15f95ed1fbc0125376dec91946fef361201e8c36a9f791e49433778a32f56"}, "downloads": -1, "filename": "nginxwebauthn_jv-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "b243da9cdee937c980a8eaf58d47abd0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7471, "upload_time": "2020-04-07T09:53:00", "upload_time_iso_8601": "2020-04-07T09:53:00.210164Z", "url": "https://files.pythonhosted.org/packages/0c/94/59adddfd98cd1ddfc647e4f6bcc7dda0c3b780d08ada5b39fc659696dc22/nginxwebauthn_jv-0.1.2-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 00:45:30 2020"}