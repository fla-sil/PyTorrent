{"info": {"author": "Utropicmedia", "author_email": "development@utropicmedia.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Topic :: Software Development :: Build Tools"], "description": "# storj-python binding \n### *Developed using RC v1.0.1 storj/uplink-c*\n\n## Initial Set-up\n\n**NOTE**: for Golang\n\nMake sure your `PATH` includes the `$GOPATH/bin` directory, so that your commands can be easily used [Refer: Install the Go Tools](https://golang.org/doc/install):\n```\nexport PATH=$PATH:$GOPATH/bin\n```\n\nInstall [storj-uplink-c](https://godoc.org/storj.io/storj/lib/uplink) go package, by running:\n```\n$ go get storj.io/uplink-c\n```\n\n**NOTE**: for Python \n\nPlease ensure you have Python 3.x and [pip](https://pypi.org/project/pip/) installed on your system. If you have Python version 3.4 or later, pip is included by default. pythonStorj does not support Python 2.x.\n```\n$ python get-pip.py\n```\n\nInstall [storjPython](https://pypi.org/project/storjPython/) python package, by running:\n```\n$ pip install storjPython\n```\n\n## Set-up Files\n\n* After git cloning go package, using cmd/terminal, navigate to the ```$HOME/go/src/storj.io/uplink-c``` folder.\n\n* Create '.so' file at  ```$HOME/go/src/storj.io/uplink-c``` folder, by using following command:\n```\n$ go build -o libuplinkc.so -buildmode=c-shared \n```\n\n* Copy *libuplinkc.so* file into the folder, where Python package was installed\n\n* To include uplinkPython in you project, import the library, by using following command:\n```\nfrom storjPython.uplinkPython import *\n```\n* Create an object of ```LibUplinkPy``` class to access all the functions of library. Please refer the sample *helloStorj.py* file, for example.\n```\nvariable_name = LibUplinkPy()\n```\n\n## Sample Hello Storj!\n\nFile *helloStorj.py* can be found in folder where Python package was installed.\n\nThe sample *helloStorj.py* code calls the *uplinkPython.py* file and imports the *libUplinkPy* binding class to do the following:\n* list all buckets in a Storj project\n* create a new bucket (if it does not exist) within desired Storj project\n* write a file from local computer to the a Storj bucket\n* read back the object from the Storj bucket to local system for verification\n* list all objects in a bucket\n* delete bucket from a Storj project\n* create shareable Access with permissions and shared prefix.\n* list all buckets and objects with permission to shareable access. \n\n\n## Storj-Python Binding Functions\n\n**NOTE**: Every function consists of error response. Please use it, to check if the function call was successful or not. In case, if it is not *None*, then you may also show the error's text. Please refer the sample *helloStorj.py* file, for example.\n\n\n### request_access_with_passphrase(String, String, String)\n    * function requests satellite for a new access grant using a passphrase\n    * pre-requisites: none\n    * inputs: Satellite Address (String), API key (String) and Passphrase (String)\n    * output: AccessResult (Object), Error (String) if any else None\n\n### config_request_access_with_passphrase(Object, String, String, String)\n    * function requests satellite for a new access grant using a passphrase and custom configuration\n    * pre-requisites: none\n    * inputs: Config (Object), Satellite Address (String), API key (String) and Passphrase (String)\n    * output: AccessResult (Object), Error (String) if any else None\n   * **Note:** To set Config Refer: [Config](https://godoc.org/storj.io/uplink#Config)\n\n### open_project(Object)\n    * function opens Storj(V3) project using access grant.\n    * pre-requisites: request_access_with_passphrase or parse_access function has been already called\n    * inputs: Access (Object)\n    * output: ProjectResult (Object), Error (String) if any else None\n\n### config_open_project(Object, Object)\n    * function opens Storj(V3) project using access grant and custom configuration.\n    * pre-requisites: request_access_with_passphrase or parse_access function has been already called\n    * inputs: Config (Object), Access (Object)\n    * output: ProjectResult (Object), Error (String) if any else None\n   * **Note:** To set Config Refer: [Config](https://godoc.org/storj.io/uplink#Config)\n\n### close_project(Object)\n    * function closes the Storj(V3) project.\n    * pre-requisites: open_project function has been already called\n    * inputs: Project (Object)\n    * output: Error (Object) if any else None\n\n### ensure_bucket(Object, String)\n    * function creates a new bucket and ignores the error when it already exists\n    * pre-requisites: open_project function has been already called\n    * inputs: Project (Object) ,Bucket Name (String)\n    * output: BucketResult (Object), Error (String) if any else None\n\n### stat_bucket(Object, String)\n    * function returns information about a bucket.\n    * pre-requisites: open_project function has been already called\n    * inputs: Project (Object), Bucket Name (String)\n    * output: BucketResult (Object), Error (String) if any else None\n\n### create_bucket(Object, String)\n    * function creates a new bucket.\n    * pre-requisites: open_project function has been already called\n    * inputs: Project (Object), Bucket Name (String)\n    * output: BucketResult (Object), Error (String) if any else None\n\n### list_buckets(Object, Object)\n    * function lists buckets\n    * pre-requisites: open_project function has been already called\n    * inputs: Project (Object), ListBucketsOptions (Object)\n    * output: Bucket List (Python List), Error (String) if any else None\n   * **Note:** To set List Bucket Options Refer: [ListBucketOptions](https://godoc.org/storj.io/uplink#ListBucketsOptions)\n\n### delete_bucket(Object, String)\n    * function deletes a bucket.\n    * pre-requisites: open_project function has been already called\n    * inputs: Project (Object), Bucket Name (String)\n    * output: BucketResult (Object), Error (String) if any else None\n\n### stat_object(Object, String, String)\n    * function returns information about an object at the specific key.\n    * pre-requisites: open_project\n    * inputs: Project (Object) ,Bucket Name (String) , Object Key(String)\n    * output: ObjectResult (Object), Error (string) if any else None\n\n### list_objects(Object, String, Object)\n    * function lists objects\n    * pre-requisites: open_project function has been already called\n    * inputs: Project (Object), Bucket Name (String), ListObjectsOptions (Object)\n    * output: Bucket List (Python List), Error (String) if any else None\n   * **Note:** To set List Object Options Refer: [ListObjectOptions](https://godoc.org/storj.io/uplink#ListObjectsOptions)\n\n### delete_object(Object, String, String)\n    * function deletes an object.\n    * pre-requisites: open_project function has been already called\n    * inputs: Project (Object), Bucket Name (String), Object Key (String)\n    * output: ObjectResult (Object), Error (String) if any else None\n\n### upload_object(bject, String, String, Object)\n    * function starts an upload to the specified key.\n    * pre-requisites: open_project function has been already called\n    * inputs: Project (Object), Bucket Name (String), Object Key (String), Upload Options (Object)\n    * output: UploadResult (Object), Error (String) if any else None\n   * **Note:** To set Upload Options Refer: [UploadOptions](https://godoc.org/storj.io/uplink#UploadOptions)\n\n### upload_write(Object, LP_c_ubyte, Integer)\n    * function uploads bytes data passed as parameter to the object's data stream.\n    * pre-requisites: upload_object function has been already called\n    * inputs: Upload (Object), Bytes Data Stream(LP_c_ubyte) , Length (Integer)\n    * output: WriteResult (Object), Error (String) if any else None\n   * **Note:** The Data to upload (LP_c_ubyte) passed to function should be a ctypes char or uint8 pointer only. (Please refer the sample helloStorj.py file, for example.)\n\n### upload_commit(Object)\n    * function commits the uploaded data.\n    * pre-requisites: upload_object function has been already called\n    * inputs: Upload (Object)\n    * output: Error (Object) if any else None\n\n### upload_abort(Object)\n    * function aborts an ongoing upload.\n    * pre-requisites: upload_object function has been already called\n    * inputs: Upload (Object)\n    * output: Error (Object) if any else None\n\n### upload_set_custom_metadata(Object, Object)\n    * function to set custom meta information while uploading data\n    * pre-requisites: upload_object function has been already called\n    * inputs: Upload (Object), CustomMetadata (Object)\n    * output: Error (Object) if any else None\n   * **Note:** To set Custom Metadata Refer: [CustomMetadata](https://godoc.org/storj.io/uplink#CustomMetadata)\n\n### upload_info(Object)\n    * function returns the last information about the uploaded object.\n    * pre-requisites: upload_object function has been already called\n    * inputs: Upload (Object)\n    * output: Object Result (Object), Error (String) if any else None\n\n### download_object(Object, String, String, Object)\n    * function starts download to the specified key.\n    * pre-requisites: open_project function has been already called\n    * inputs: Project (Object), Bucket Name(String), Object Key(String), Download Options(Object)\n    * output: DownloadResult (Object), Error (String) if any else None\n   * **Note:** To set Download Options Refer: [DownloadOptions](https://godoc.org/storj.io/uplink#DownloadOptions)\n\n### download_read(Object, Integer)\n    * function downloads from object's data stream into bytes up to length amount.\n    * pre-requisites: download_object function has been already called\n    * inputs: Download (Object), Length(Integer)\n    * output: Data downloaded (LP_c_ubyte), ReadResult (Object), Error (String) if any else None\n\n### close_download(Object)\n    * function closes the download.\n    * pre-requisites: download_object function has been already called\n    * inputs: Download (Object)\n    * output: Error (Object) if any else None\n\n### download_info(Object)\n    * function returns information about the downloaded object.\n    * pre-requisites: download_object function has been already called\n    * inputs: Download (Object)\n    * output: Object Result (Object), Error (String) if any else None\n\n### parse_access(String)\n    * function to parses serialized access grant string\n    * pre-requisites: none\n    * inputs: Serialized Access (String)\n    * output: AccessResult (Object), Error (String) if any else None\n\n### access_serialize(Object)\n    * function serializes access grant into a string.\n    * pre-requisites: request_access_with_passphrase or parse_access function has been already called\n    * inputs: Access (Object)\n    * output: StringResult (Object), Error (String) if any else None\n\n### access_share(Object, Object, List)\n    * function creates new access grant with specific permission. Permission will be applied to prefixes when defined.\n    * pre-requisites: request_access_with_passphrase or parse_access function has been already called\n    * inputs: Access (Object), Permission (Object), Share Prefix (Python List of Dictionaries)\n    * output: String Result (Object), Error (String) if any else None\n   * **Note:** To set Permission Refer: [Permission](https://godoc.org/storj.io/uplink#Permission)\n   * **Note:** To set Shared Prefix Refer: [SharedPrefix](https://godoc.org/storj.io/uplink#SharePrefix)\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/utropicmedia/storj-python", "keywords": "", "license": "Apache Software License", "maintainer": "", "maintainer_email": "", "name": "storjPython", "package_url": "https://pypi.org/project/storjPython/", "platform": "", "project_url": "https://pypi.org/project/storjPython/", "project_urls": {"Homepage": "https://github.com/utropicmedia/storj-python"}, "release_url": "https://pypi.org/project/storjPython/1.0.1/", "requires_dist": null, "requires_python": ">=3.4", "summary": "Python-native language binding for storj-uplink-c to communicate with the Storj network.", "version": "1.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>storj-python binding</h1>\n<h3><em>Developed using RC v1.0.1 storj/uplink-c</em></h3>\n<h2>Initial Set-up</h2>\n<p><strong>NOTE</strong>: for Golang</p>\n<p>Make sure your <code>PATH</code> includes the <code>$GOPATH/bin</code> directory, so that your commands can be easily used <a href=\"https://golang.org/doc/install\" rel=\"nofollow\">Refer: Install the Go Tools</a>:</p>\n<pre><code>export PATH=$PATH:$GOPATH/bin\n</code></pre>\n<p>Install <a href=\"https://godoc.org/storj.io/storj/lib/uplink\" rel=\"nofollow\">storj-uplink-c</a> go package, by running:</p>\n<pre><code>$ go get storj.io/uplink-c\n</code></pre>\n<p><strong>NOTE</strong>: for Python</p>\n<p>Please ensure you have Python 3.x and <a href=\"https://pypi.org/project/pip/\" rel=\"nofollow\">pip</a> installed on your system. If you have Python version 3.4 or later, pip is included by default. pythonStorj does not support Python 2.x.</p>\n<pre><code>$ python get-pip.py\n</code></pre>\n<p>Install <a href=\"https://pypi.org/project/storjPython/\" rel=\"nofollow\">storjPython</a> python package, by running:</p>\n<pre><code>$ pip install storjPython\n</code></pre>\n<h2>Set-up Files</h2>\n<ul>\n<li>\n<p>After git cloning go package, using cmd/terminal, navigate to the <code>$HOME/go/src/storj.io/uplink-c</code> folder.</p>\n</li>\n<li>\n<p>Create '.so' file at  <code>$HOME/go/src/storj.io/uplink-c</code> folder, by using following command:</p>\n</li>\n</ul>\n<pre><code>$ go build -o libuplinkc.so -buildmode=c-shared \n</code></pre>\n<ul>\n<li>\n<p>Copy <em>libuplinkc.so</em> file into the folder, where Python package was installed</p>\n</li>\n<li>\n<p>To include uplinkPython in you project, import the library, by using following command:</p>\n</li>\n</ul>\n<pre><code>from storjPython.uplinkPython import *\n</code></pre>\n<ul>\n<li>Create an object of <code>LibUplinkPy</code> class to access all the functions of library. Please refer the sample <em>helloStorj.py</em> file, for example.</li>\n</ul>\n<pre><code>variable_name = LibUplinkPy()\n</code></pre>\n<h2>Sample Hello Storj!</h2>\n<p>File <em>helloStorj.py</em> can be found in folder where Python package was installed.</p>\n<p>The sample <em>helloStorj.py</em> code calls the <em>uplinkPython.py</em> file and imports the <em>libUplinkPy</em> binding class to do the following:</p>\n<ul>\n<li>list all buckets in a Storj project</li>\n<li>create a new bucket (if it does not exist) within desired Storj project</li>\n<li>write a file from local computer to the a Storj bucket</li>\n<li>read back the object from the Storj bucket to local system for verification</li>\n<li>list all objects in a bucket</li>\n<li>delete bucket from a Storj project</li>\n<li>create shareable Access with permissions and shared prefix.</li>\n<li>list all buckets and objects with permission to shareable access.</li>\n</ul>\n<h2>Storj-Python Binding Functions</h2>\n<p><strong>NOTE</strong>: Every function consists of error response. Please use it, to check if the function call was successful or not. In case, if it is not <em>None</em>, then you may also show the error's text. Please refer the sample <em>helloStorj.py</em> file, for example.</p>\n<h3>request_access_with_passphrase(String, String, String)</h3>\n<pre><code>* function requests satellite for a new access grant using a passphrase\n* pre-requisites: none\n* inputs: Satellite Address (String), API key (String) and Passphrase (String)\n* output: AccessResult (Object), Error (String) if any else None\n</code></pre>\n<h3>config_request_access_with_passphrase(Object, String, String, String)</h3>\n<pre><code>* function requests satellite for a new access grant using a passphrase and custom configuration\n* pre-requisites: none\n* inputs: Config (Object), Satellite Address (String), API key (String) and Passphrase (String)\n* output: AccessResult (Object), Error (String) if any else None\n</code></pre>\n<ul>\n<li><strong>Note:</strong> To set Config Refer: <a href=\"https://godoc.org/storj.io/uplink#Config\" rel=\"nofollow\">Config</a></li>\n</ul>\n<h3>open_project(Object)</h3>\n<pre><code>* function opens Storj(V3) project using access grant.\n* pre-requisites: request_access_with_passphrase or parse_access function has been already called\n* inputs: Access (Object)\n* output: ProjectResult (Object), Error (String) if any else None\n</code></pre>\n<h3>config_open_project(Object, Object)</h3>\n<pre><code>* function opens Storj(V3) project using access grant and custom configuration.\n* pre-requisites: request_access_with_passphrase or parse_access function has been already called\n* inputs: Config (Object), Access (Object)\n* output: ProjectResult (Object), Error (String) if any else None\n</code></pre>\n<ul>\n<li><strong>Note:</strong> To set Config Refer: <a href=\"https://godoc.org/storj.io/uplink#Config\" rel=\"nofollow\">Config</a></li>\n</ul>\n<h3>close_project(Object)</h3>\n<pre><code>* function closes the Storj(V3) project.\n* pre-requisites: open_project function has been already called\n* inputs: Project (Object)\n* output: Error (Object) if any else None\n</code></pre>\n<h3>ensure_bucket(Object, String)</h3>\n<pre><code>* function creates a new bucket and ignores the error when it already exists\n* pre-requisites: open_project function has been already called\n* inputs: Project (Object) ,Bucket Name (String)\n* output: BucketResult (Object), Error (String) if any else None\n</code></pre>\n<h3>stat_bucket(Object, String)</h3>\n<pre><code>* function returns information about a bucket.\n* pre-requisites: open_project function has been already called\n* inputs: Project (Object), Bucket Name (String)\n* output: BucketResult (Object), Error (String) if any else None\n</code></pre>\n<h3>create_bucket(Object, String)</h3>\n<pre><code>* function creates a new bucket.\n* pre-requisites: open_project function has been already called\n* inputs: Project (Object), Bucket Name (String)\n* output: BucketResult (Object), Error (String) if any else None\n</code></pre>\n<h3>list_buckets(Object, Object)</h3>\n<pre><code>* function lists buckets\n* pre-requisites: open_project function has been already called\n* inputs: Project (Object), ListBucketsOptions (Object)\n* output: Bucket List (Python List), Error (String) if any else None\n</code></pre>\n<ul>\n<li><strong>Note:</strong> To set List Bucket Options Refer: <a href=\"https://godoc.org/storj.io/uplink#ListBucketsOptions\" rel=\"nofollow\">ListBucketOptions</a></li>\n</ul>\n<h3>delete_bucket(Object, String)</h3>\n<pre><code>* function deletes a bucket.\n* pre-requisites: open_project function has been already called\n* inputs: Project (Object), Bucket Name (String)\n* output: BucketResult (Object), Error (String) if any else None\n</code></pre>\n<h3>stat_object(Object, String, String)</h3>\n<pre><code>* function returns information about an object at the specific key.\n* pre-requisites: open_project\n* inputs: Project (Object) ,Bucket Name (String) , Object Key(String)\n* output: ObjectResult (Object), Error (string) if any else None\n</code></pre>\n<h3>list_objects(Object, String, Object)</h3>\n<pre><code>* function lists objects\n* pre-requisites: open_project function has been already called\n* inputs: Project (Object), Bucket Name (String), ListObjectsOptions (Object)\n* output: Bucket List (Python List), Error (String) if any else None\n</code></pre>\n<ul>\n<li><strong>Note:</strong> To set List Object Options Refer: <a href=\"https://godoc.org/storj.io/uplink#ListObjectsOptions\" rel=\"nofollow\">ListObjectOptions</a></li>\n</ul>\n<h3>delete_object(Object, String, String)</h3>\n<pre><code>* function deletes an object.\n* pre-requisites: open_project function has been already called\n* inputs: Project (Object), Bucket Name (String), Object Key (String)\n* output: ObjectResult (Object), Error (String) if any else None\n</code></pre>\n<h3>upload_object(bject, String, String, Object)</h3>\n<pre><code>* function starts an upload to the specified key.\n* pre-requisites: open_project function has been already called\n* inputs: Project (Object), Bucket Name (String), Object Key (String), Upload Options (Object)\n* output: UploadResult (Object), Error (String) if any else None\n</code></pre>\n<ul>\n<li><strong>Note:</strong> To set Upload Options Refer: <a href=\"https://godoc.org/storj.io/uplink#UploadOptions\" rel=\"nofollow\">UploadOptions</a></li>\n</ul>\n<h3>upload_write(Object, LP_c_ubyte, Integer)</h3>\n<pre><code>* function uploads bytes data passed as parameter to the object's data stream.\n* pre-requisites: upload_object function has been already called\n* inputs: Upload (Object), Bytes Data Stream(LP_c_ubyte) , Length (Integer)\n* output: WriteResult (Object), Error (String) if any else None\n</code></pre>\n<ul>\n<li><strong>Note:</strong> The Data to upload (LP_c_ubyte) passed to function should be a ctypes char or uint8 pointer only. (Please refer the sample helloStorj.py file, for example.)</li>\n</ul>\n<h3>upload_commit(Object)</h3>\n<pre><code>* function commits the uploaded data.\n* pre-requisites: upload_object function has been already called\n* inputs: Upload (Object)\n* output: Error (Object) if any else None\n</code></pre>\n<h3>upload_abort(Object)</h3>\n<pre><code>* function aborts an ongoing upload.\n* pre-requisites: upload_object function has been already called\n* inputs: Upload (Object)\n* output: Error (Object) if any else None\n</code></pre>\n<h3>upload_set_custom_metadata(Object, Object)</h3>\n<pre><code>* function to set custom meta information while uploading data\n* pre-requisites: upload_object function has been already called\n* inputs: Upload (Object), CustomMetadata (Object)\n* output: Error (Object) if any else None\n</code></pre>\n<ul>\n<li><strong>Note:</strong> To set Custom Metadata Refer: <a href=\"https://godoc.org/storj.io/uplink#CustomMetadata\" rel=\"nofollow\">CustomMetadata</a></li>\n</ul>\n<h3>upload_info(Object)</h3>\n<pre><code>* function returns the last information about the uploaded object.\n* pre-requisites: upload_object function has been already called\n* inputs: Upload (Object)\n* output: Object Result (Object), Error (String) if any else None\n</code></pre>\n<h3>download_object(Object, String, String, Object)</h3>\n<pre><code>* function starts download to the specified key.\n* pre-requisites: open_project function has been already called\n* inputs: Project (Object), Bucket Name(String), Object Key(String), Download Options(Object)\n* output: DownloadResult (Object), Error (String) if any else None\n</code></pre>\n<ul>\n<li><strong>Note:</strong> To set Download Options Refer: <a href=\"https://godoc.org/storj.io/uplink#DownloadOptions\" rel=\"nofollow\">DownloadOptions</a></li>\n</ul>\n<h3>download_read(Object, Integer)</h3>\n<pre><code>* function downloads from object's data stream into bytes up to length amount.\n* pre-requisites: download_object function has been already called\n* inputs: Download (Object), Length(Integer)\n* output: Data downloaded (LP_c_ubyte), ReadResult (Object), Error (String) if any else None\n</code></pre>\n<h3>close_download(Object)</h3>\n<pre><code>* function closes the download.\n* pre-requisites: download_object function has been already called\n* inputs: Download (Object)\n* output: Error (Object) if any else None\n</code></pre>\n<h3>download_info(Object)</h3>\n<pre><code>* function returns information about the downloaded object.\n* pre-requisites: download_object function has been already called\n* inputs: Download (Object)\n* output: Object Result (Object), Error (String) if any else None\n</code></pre>\n<h3>parse_access(String)</h3>\n<pre><code>* function to parses serialized access grant string\n* pre-requisites: none\n* inputs: Serialized Access (String)\n* output: AccessResult (Object), Error (String) if any else None\n</code></pre>\n<h3>access_serialize(Object)</h3>\n<pre><code>* function serializes access grant into a string.\n* pre-requisites: request_access_with_passphrase or parse_access function has been already called\n* inputs: Access (Object)\n* output: StringResult (Object), Error (String) if any else None\n</code></pre>\n<h3>access_share(Object, Object, List)</h3>\n<pre><code>* function creates new access grant with specific permission. Permission will be applied to prefixes when defined.\n* pre-requisites: request_access_with_passphrase or parse_access function has been already called\n* inputs: Access (Object), Permission (Object), Share Prefix (Python List of Dictionaries)\n* output: String Result (Object), Error (String) if any else None\n</code></pre>\n<ul>\n<li><strong>Note:</strong> To set Permission Refer: <a href=\"https://godoc.org/storj.io/uplink#Permission\" rel=\"nofollow\">Permission</a></li>\n<li><strong>Note:</strong> To set Shared Prefix Refer: <a href=\"https://godoc.org/storj.io/uplink#SharePrefix\" rel=\"nofollow\">SharedPrefix</a></li>\n</ul>\n\n          </div>"}, "last_serial": 7069648, "releases": {"0.10": [{"comment_text": "", "digests": {"md5": "a41d076c9e8ef90d12fbd3cf82712742", "sha256": "b4347aedf48f9e76f8f64ca5467e760aedc56c6e9a6cac03171350d65eaee814"}, "downloads": -1, "filename": "storjPython-0.10.tar.gz", "has_sig": false, "md5_digest": "a41d076c9e8ef90d12fbd3cf82712742", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14484, "upload_time": "2019-12-12T11:50:51", "upload_time_iso_8601": "2019-12-12T11:50:51.035889Z", "url": "https://files.pythonhosted.org/packages/3f/98/a5275d48274edbb04f8b6f9632ed6af8683a47ef77316fa63c05ef989984/storjPython-0.10.tar.gz", "yanked": false}], "0.11": [{"comment_text": "", "digests": {"md5": "a6b27d91c4e1e9d8f926d1e14baef236", "sha256": "6affcdee035c16ab21169cc6765173191db0e2cf71ca6af6092ad699384b4eaa"}, "downloads": -1, "filename": "storjPython-0.11.tar.gz", "has_sig": false, "md5_digest": "a6b27d91c4e1e9d8f926d1e14baef236", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15120, "upload_time": "2020-01-06T14:19:49", "upload_time_iso_8601": "2020-01-06T14:19:49.805531Z", "url": "https://files.pythonhosted.org/packages/e6/4a/320e96b55a231852dbc22beed1719d1ce11425f610aaee19965451b57125/storjPython-0.11.tar.gz", "yanked": false}], "0.12": [{"comment_text": "", "digests": {"md5": "0b9d3a3d94c12a76d965bf2a75c1ab2b", "sha256": "e889144840332ca59770f2ced50213506762c70a6d877f660c72718a78974891"}, "downloads": -1, "filename": "storjPython-0.12.tar.gz", "has_sig": false, "md5_digest": "0b9d3a3d94c12a76d965bf2a75c1ab2b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15158, "upload_time": "2020-01-30T10:20:01", "upload_time_iso_8601": "2020-01-30T10:20:01.552882Z", "url": "https://files.pythonhosted.org/packages/2e/14/8f87d0c685552ad5191f5d5cc155601a34a2605d7c506e49b435aa3b8519/storjPython-0.12.tar.gz", "yanked": false}], "0.8": [{"comment_text": "", "digests": {"md5": "cf61da9b960687b6b73cf57c29c06a12", "sha256": "710f3f776450f532dc79bde76dbb16cf5d46dd5046c39869899e5ac514061c5c"}, "downloads": -1, "filename": "storjPython-0.8-py3-none-any.whl", "has_sig": false, "md5_digest": "cf61da9b960687b6b73cf57c29c06a12", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 16926, "upload_time": "2019-09-17T12:47:57", "upload_time_iso_8601": "2019-09-17T12:47:57.138896Z", "url": "https://files.pythonhosted.org/packages/98/7f/6a791e38e8f66afe045db0330853d0593fe73a501008a2e3cfc41486b420/storjPython-0.8-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e7a2f4a76548d4126999d002faab4eb0", "sha256": "b821b82f1449bf644b7127b19584daf2eabb3015e2a4be962d4671a0e73b9490"}, "downloads": -1, "filename": "storjPython-0.8.tar.gz", "has_sig": false, "md5_digest": "e7a2f4a76548d4126999d002faab4eb0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9263, "upload_time": "2019-09-17T12:47:59", "upload_time_iso_8601": "2019-09-17T12:47:59.538667Z", "url": "https://files.pythonhosted.org/packages/61/ef/94777d5fbee5e4fab840bf30015b13b303e0a70019b661d851ce42364c31/storjPython-0.8.tar.gz", "yanked": false}], "0.9": [{"comment_text": "", "digests": {"md5": "babaf4cd0511078c4b18c39675269e0e", "sha256": "1b6ed55e08124ee412c7a0abbd871e0d2d18e8638f821078530a6701596e24e0"}, "downloads": -1, "filename": "storjPython-0.9-py3-none-any.whl", "has_sig": false, "md5_digest": "babaf4cd0511078c4b18c39675269e0e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 19606, "upload_time": "2019-09-24T13:44:20", "upload_time_iso_8601": "2019-09-24T13:44:20.798635Z", "url": "https://files.pythonhosted.org/packages/98/b7/ca9f40cb404ccc94d827b0822cbe47d4f41de572291c253bcb27851644da/storjPython-0.9-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e078ac98087a3b817f48f5919cf12713", "sha256": "6e251b42ad4c9165ead898d5850344e11c9aa3387f66de5b7221bb2c849eb2db"}, "downloads": -1, "filename": "storjPython-0.9.tar.gz", "has_sig": false, "md5_digest": "e078ac98087a3b817f48f5919cf12713", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12532, "upload_time": "2019-09-24T13:44:22", "upload_time_iso_8601": "2019-09-24T13:44:22.317327Z", "url": "https://files.pythonhosted.org/packages/2c/8c/86619037c8114e833894653a51782f6e882ce048d9bc37d3e827b2f29aff/storjPython-0.9.tar.gz", "yanked": false}], "1.0.0rc1": [{"comment_text": "", "digests": {"md5": "c4cfdf55d0955cd7e2247ae42f8ea854", "sha256": "fd4cd11a9d5be6591ba8a0296a981f9890e9b24a68060c9f2f22295c551f26b2"}, "downloads": -1, "filename": "storjPython-1.0.0rc1-py3-none-any.whl", "has_sig": false, "md5_digest": "c4cfdf55d0955cd7e2247ae42f8ea854", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 15936, "upload_time": "2020-04-19T21:45:47", "upload_time_iso_8601": "2020-04-19T21:45:47.490321Z", "url": "https://files.pythonhosted.org/packages/8c/41/8db47d43798d8957faa6c2a9c78c0f3cea09408f18b59c7f1ca5a78f7110/storjPython-1.0.0rc1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0018cc924a57adc27be3a38c4f7ff00f", "sha256": "410483cb26ff38f12385bd2191bb2ea06456d59c1cd6eebeea3baca9e65898f3"}, "downloads": -1, "filename": "storjPython-1.0.0rc1.tar.gz", "has_sig": false, "md5_digest": "0018cc924a57adc27be3a38c4f7ff00f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 14151, "upload_time": "2020-04-19T21:45:49", "upload_time_iso_8601": "2020-04-19T21:45:49.314837Z", "url": "https://files.pythonhosted.org/packages/d2/cd/411477ed8d67915e4770abfa70cbdfa5cd0a567a4a3c90ed8e8317414d23/storjPython-1.0.0rc1.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "cab3ba8fa2c414ed2335cffdbb01e785", "sha256": "f77d19e3db313a59a5d29ec32ff6b9a4cf1c96786b0c846cde3cb4a184ee64b5"}, "downloads": -1, "filename": "storjPython-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "cab3ba8fa2c414ed2335cffdbb01e785", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 15896, "upload_time": "2020-04-21T17:44:18", "upload_time_iso_8601": "2020-04-21T17:44:18.056643Z", "url": "https://files.pythonhosted.org/packages/84/67/83eebaa888b8666b1b2ec37d7487c9e554c3faab79bc6d1d3a0fecafc306/storjPython-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bafdc10714f74658b9b55151d895020a", "sha256": "e78fc5864c1f85eb6939c02ff3469f9bb8669cb11aa55bb9d17e8da503516139"}, "downloads": -1, "filename": "storjPython-1.0.1.tar.gz", "has_sig": false, "md5_digest": "bafdc10714f74658b9b55151d895020a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 14131, "upload_time": "2020-04-21T17:44:19", "upload_time_iso_8601": "2020-04-21T17:44:19.929199Z", "url": "https://files.pythonhosted.org/packages/00/7f/a014214fd0fa4cec859834c2b70c77d651c562bcb71f29c0ba936e5cb414/storjPython-1.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "cab3ba8fa2c414ed2335cffdbb01e785", "sha256": "f77d19e3db313a59a5d29ec32ff6b9a4cf1c96786b0c846cde3cb4a184ee64b5"}, "downloads": -1, "filename": "storjPython-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "cab3ba8fa2c414ed2335cffdbb01e785", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 15896, "upload_time": "2020-04-21T17:44:18", "upload_time_iso_8601": "2020-04-21T17:44:18.056643Z", "url": "https://files.pythonhosted.org/packages/84/67/83eebaa888b8666b1b2ec37d7487c9e554c3faab79bc6d1d3a0fecafc306/storjPython-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bafdc10714f74658b9b55151d895020a", "sha256": "e78fc5864c1f85eb6939c02ff3469f9bb8669cb11aa55bb9d17e8da503516139"}, "downloads": -1, "filename": "storjPython-1.0.1.tar.gz", "has_sig": false, "md5_digest": "bafdc10714f74658b9b55151d895020a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 14131, "upload_time": "2020-04-21T17:44:19", "upload_time_iso_8601": "2020-04-21T17:44:19.929199Z", "url": "https://files.pythonhosted.org/packages/00/7f/a014214fd0fa4cec859834c2b70c77d651c562bcb71f29c0ba936e5cb414/storjPython-1.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:01:36 2020"}