{"info": {"author": "BlockChyp", "author_email": "support@blockchyp.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Software Development :: Libraries"], "description": "# BlockChyp Python SDK\n\n[![Build Status](https://circleci.com/gh/blockchyp/blockchyp-python/tree/master.svg?style=shield)](https://circleci.com/gh/blockchyp/blockchyp-python/tree/master)\n[![PyPI](https://img.shields.io/pypi/v/blockchyp.svg)](https://pypi.org/project/blockchyp/)\n[![License: MIT](https://img.shields.io/badge/license-MIT-blue.svg)](https://github.com/blockchyp/blockchyp-python/blob/master/LICENSE)\n\nThe official library for accessing the [BlockChyp] Terminal and Gateway APIs\nfrom Python.\n\n## Installation\n\nBlockChyp can be simply installed by running:\n\n```sh\npip install blockchyp\n```\n\n\n## Additional Documentation\n\nComplete documentation can be found on our [Developer Documentation Portal].\n\n[Developer Documentation Portal]: https://docs.blockchyp.com/\n\n## Getting a Developer Kit\n\nIn order to test your integration with real terminals, you'll need a BlockChyp\nDeveloper Kit. Our kits include a fully functioning payment terminal with\ntest pin encryption keys. Every kit includes a comprehensive set of test\ncards with test cards for every major card brand and entry method, including\nContactless and Contact EMV and mag stripe cards. Each kit also includes\ntest gift cards for our blockchain gift card system.\n\nAccess to BlockChyp's developer program is currently invite only, but you\ncan request an invitation by contacting our engineering team at **nerds@blockchyp.com**.\n\nYou can also view a number of long form demos and learn more about us on our [YouTube Channel](https://www.youtube.com/channel/UCE-iIVlJic_XArs_U65ZcJg).\n\n## Transaction Code Examples\n\nYou don't want to read words. You want examples. Here's a quick rundown of the\nstuff you can do with the BlockChyp Python SDK and a few basic examples.\n\n#### Terminal Ping\n\n\nThis simple test transaction helps ensure you have good communication with a payment terminal and is usually the first one you'll run in development.\n\nIt tests communication with the terminal and returns a positive response if everything\nis okay.  It works the same way in local or cloud relay mode.\n\nIf you get a positive response, you've successfully verified all of the following:\n\n* The terminal is online.\n* There is a valid route to the terminal.\n* The API Credential are valid.\n\n\n\n\n```python\nimport os\n\nimport blockchyp\n\n# initialize a client.\nclient = blockchyp.Client(\n    api_key=os.environ[\"BC_API_KEY\"],\n    bearer_token=os.environ[\"BC_BEARER_TOKEN\"],\n    signing_key=os.environ[\"BC_SIGNING_KEY\"],\n)\n\n# populate request parameters.\nrequest = {\n    \"terminalName\": \"Test Terminal\",\n}\n\n# run the transaction.\nresponse = client.ping(request)\n\nprint(\"Response: %r\" % response)\n\n\n```\n\n#### Charge\n\n\nOur most popular transaction executes a standard authorization and capture.\nThis is the most basic of\nbasic payment transactions, typically used in conventional retail.\n\nCharge transactions can use a payment terminal to capture a payment or\nuse a previously enrolled payment token.\n\n**Terminal Transactions**\n\nFor terminal transactions, make sure you pass in the terminal name using the `terminalName` property.\n\n**Token Transactions**\n\nIf you have a payment token, omit the `terminalName` property and pass in the token with the `token`\nproperty instead.\n\n**Card Numbers and Mag Stripes**\n\nYou can also pass in PANs and Mag Stripes, but you probably shouldn't.  This will\nput you in PCI scope and the most common vector for POS breaches is key logging.\nIf you use terminals for manual card entry, you'll bypass any key loggers that\nmight be maliciously running on the point-of-sale system.\n\n**Common Variations**\n\n* **Gift Card Redemption**:  There's no special API for gift card redemption in BlockChyp.  Just execute a plain charge transaction and if the customer happens to swipe a gift card, our terminals will identify the gift card and run a gift card redemption.  Also note that if for some reason the gift card's original purchase transaction is associated with fraud or a chargeback, the transaction will be rejected.\n* **EBT**: Set the `ebt` flag to process an EBT SNAP transaction.  Note that test EBT transactions alway assume a balance of $100.00, so test EBT transactions over that amount may be declined.\n* **Cash Back**: To enable cash back for debit transactions, set the `cashBack` flag.  If the card presented isn't a debit card, the `cashBack` flag will be ignored.\n* **Manual Card Entry**: Set the `manual` flag to enable manual card entry.  Good as a backup when chips and MSR's don't work or for more secure phone orders.  You can even combine the `manual` flag with the `ebt` flag for manual EBT card entry.\n* **Inline Tokenization**: You can enroll the payment method in the token vault inline with a charge transaction by setting the `enroll` flag.  You'll get a token back in the response.  You can even bind the token to a customer record if you also pass in customer data.\n* **Prompting for Tips**: Set the `promptForTips` flag if you'd like to prompt the customer for a tip before authorization.  Good for pay-at-the-table and other services related scenarios.\n* **Cash Discounting and Surcharging**:  The `surcharge` and `cashDiscount` flags can be used together to support cash discounting or surcharge problems. Consult the Cash Discount documentation for more details.\n\n\n\n\n```python\nimport os\n\nimport blockchyp\n\n# initialize a client.\nclient = blockchyp.Client(\n    api_key=os.environ[\"BC_API_KEY\"],\n    bearer_token=os.environ[\"BC_BEARER_TOKEN\"],\n    signing_key=os.environ[\"BC_SIGNING_KEY\"],\n)\n\n# populate request parameters.\nrequest = {\n    \"test\": True,\n    \"terminalName\": \"Test Terminal\",\n    \"amount\": \"55.00\",\n}\n\n# run the transaction.\nresponse = client.charge(request)\n\nprint(\"Response: %r\" % response)\n\n\n```\n\n#### Preauthorization\n\n\nA preauthorization puts a hold on funds and must be captured later.  This is used\nin scenarios where the final transaction amount might change.  Examples would\nbe fine dining where a tip adjustment is required prior to capture or hotels\n\nAnother use case for preauthorization is e-commerce.  Typically, an online order\nis preauthorized at the time of the order and then captured when the order ships.\n\nPreauthorizations can use a payment terminal to capture a payment or\nuse a previously enrolled payment token.\n\n**Terminal Transactions**\n\nFor terminal transactions, make sure you pass in the terminal name using the `terminalName` property.\n\n**Token Transactions**\n\nIf you have a payment token, omit the `terminalName` property and pass in the token with the `token`\nproperty instead.\n\n**Card Numbers and Mag Stripes**\n\nYou can also pass in PANs and Mag Stripes, but you probably shouldn't.  This will\nput you in PCI scope and the most common vector for POS breaches is key logging.\nIf you use terminals for manual card entry, you'll bypass any key loggers that\nmight be maliciously running on the point-of-sale system.\n\n**Common Variations**\n\n* **Manual Card Entry**: Set the `manual` flag to enable manual card entry.  Good as a backup when chips and MSR's don't work or for more secure phone orders.  You can even combine the `manual` flag with the `ebt` flag for manual EBT card entry.\n* **Inline Tokenization**: You can enroll the payment method in the token vault in line with a charge transaction by setting the `enroll` flag.  You'll get a token back in the response.  You can even bind the token to a customer record if you also pass in customer data.\n* **Prompting for Tips**: Set the `promptForTips` flag if you'd like to prompt the customer for a tip before authorization.  You can prompt for tips as part of a preauthorization, although it's not a very common approach.\n* **Cash Discounting and Surcharging**:  The `surcharge` and `cashDiscount` flags can be used together to support cash discounting or surcharge problems. Consult the Cash Discount documentation for more details.\n\n\n\n\n```python\nimport os\n\nimport blockchyp\n\n# initialize a client.\nclient = blockchyp.Client(\n    api_key=os.environ[\"BC_API_KEY\"],\n    bearer_token=os.environ[\"BC_BEARER_TOKEN\"],\n    signing_key=os.environ[\"BC_SIGNING_KEY\"],\n)\n\n# populate request parameters.\nrequest = {\n    \"test\": True,\n    \"terminalName\": \"Test Terminal\",\n    \"amount\": \"27.00\",\n}\n\n# run the transaction.\nresponse = client.preauth(request)\n\nprint(\"Response: %r\" % response)\n\n\n```\n\n#### Capture Preauthorization\n\n\nThis API allows you to capture a previously approved preauthorization.\n\nYou'll need to make sure you pass in the Transaction ID returned by the original preauth transaction so we know which transaction we're capturing.  If you want to capture the transaction for the\nexact amount of the preauth, the Transaction ID is all you need to pass in.\n\nYou can adjust the total if you need to by passing in a new `amount`.  We\nalso recommend you pass in updated amounts for `tax` and `tip` as it can\nreduce your interchange fees in some cases. (Level II Processing, for example.)\n\n\n\n\n```python\nimport os\n\nimport blockchyp\n\n# initialize a client.\nclient = blockchyp.Client(\n    api_key=os.environ[\"BC_API_KEY\"],\n    bearer_token=os.environ[\"BC_BEARER_TOKEN\"],\n    signing_key=os.environ[\"BC_SIGNING_KEY\"],\n)\n\n# populate request parameters.\nrequest = {\n    \"test\": True,\n    \"transactionId\": \"<PREAUTH TRANSACTION ID>\",\n}\n\n# run the transaction.\nresponse = client.capture(request)\n\nprint(\"Response: %r\" % response)\n\n\n```\n\n#### Refund\n\n\nIt's not ideal, but sometimes customers want their money back.\n\nOur refund API allows you to confront this unpleasant reality by executing refunds in a few different scenarios.\n\nThe most fraud resistent method is to execute refunds in the context of a previous transaction.  You should always keep track of the Transaction ID\nreturned in a BlockChyp response.  To refund the full amount of the previous transaction, just pass in the original Transaction ID with the refund requests.\n\n**Partial Refunds**\n\nFor a partial refund, just passing an amount along with the Transaction ID.\nThe only rule is that the amount has to be equal to or less than the original\ntransaction.  You can even execute multiple partial refunds against the same\noriginal transaction as long as the total refunded amount doesn't exceed the original transaction.\n\n**Tokenized Refunds**\n\nYou can also use a token to execute a refund.  Just pass in a token instead\nof the Transaction ID along with the desired refund amount.\n\n**Free Range Refunds**\n\nWhen you execute a refund without referencing a previous transaction, we\ncall this a *free range refund*.\n\nWe don't recommend it, but it is permitted.  Just pass in a\nTerminal Name and an amount.\n\nYou can even execute a manual or keyed refund by passing the `manual` flag\nto a free range refund request.\n\n**Gift Card Refunds**\n\nGift card refunds are allowed in the context of a previous transaction, but\nfree range gift card refunds are not allowed.  Use the gift card activation\nAPI if you need to add more funds to a gift card.\n\n**Store and Forward Support**\n\nRefunds are not permitted when a terminal falls back to store and forward mode.\n\n**Auto Voids**\n\nIf a refund referencing a previous transaction is executed for the full amount\nbefore the original transaction's batch is closed, the refund is automatically\nconverted to a void.  This saves the merchant a little bit of money.\n\n\n\n\n```python\nimport os\n\nimport blockchyp\n\n# initialize a client.\nclient = blockchyp.Client(\n    api_key=os.environ[\"BC_API_KEY\"],\n    bearer_token=os.environ[\"BC_BEARER_TOKEN\"],\n    signing_key=os.environ[\"BC_SIGNING_KEY\"],\n)\n\n# populate request parameters.\nrequest = {\n    \"terminalName\": \"Test Terminal\",\n    \"transactionId\": \"<PREVIOUS TRANSACTION ID>\",\n\n    # Optional amount for partial refunds.\n    \"amount\": \"5.00\",\n}\n\n# run the transaction.\nresponse = client.refund(request)\n\nprint(\"Response: %r\" % response)\n\n\n```\n\n#### Enroll\n\n\nThis API allows you to tokenize and enroll a payment method in the token\nvault.  You can also pass in customer information and associate the\npayment method with a customer record.\n\nA token is returned in the response that can be used in subsequent charge,\npreauth, and refund transactions.\n\n**Gift Cards and EBT**\n\nGift Cards and EBT cards cannot be tokenized.\n\n**E-Commerce Tokens**\n\nThe tokens returned by the enroll API and the e-commerce web tokenizer\nare the same tokens and can be used interchangeably.\n\n\n\n\n```python\nimport os\n\nimport blockchyp\n\n# initialize a client.\nclient = blockchyp.Client(\n    api_key=os.environ[\"BC_API_KEY\"],\n    bearer_token=os.environ[\"BC_BEARER_TOKEN\"],\n    signing_key=os.environ[\"BC_SIGNING_KEY\"],\n)\n\n# populate request parameters.\nrequest = {\n    \"test\": True,\n    \"terminalName\": \"Test Terminal\",\n}\n\n# run the transaction.\nresponse = client.enroll(request)\n\nprint(\"Response: %r\" % response)\n\n\n```\n\n#### Void\n\n\n\nMistakes happen.  If a transaction is made by mistake, you can void it\nwith this API.  All that's needed is to pass in a Transaction ID and execute\nthe void before the original transaction's batch closes.\n\nVoids work with EBT and gift card transactions with no additional parameters.\n\n\n\n\n```python\nimport os\n\nimport blockchyp\n\n# initialize a client.\nclient = blockchyp.Client(\n    api_key=os.environ[\"BC_API_KEY\"],\n    bearer_token=os.environ[\"BC_BEARER_TOKEN\"],\n    signing_key=os.environ[\"BC_SIGNING_KEY\"],\n)\n\n# populate request parameters.\nrequest = {\n    \"test\": True,\n    \"transactionId\": \"<PREVIOUS TRANSACTION ID>\",\n}\n\n# run the transaction.\nresponse = client.void(request)\n\nprint(\"Response: %r\" % response)\n\n\n```\n\n#### Time Out Reversal\n\n\n\nPayment transactions require a stable network to function correctly and\nno network is stable all the time.  Time out reversals are a great line\nof defense against accidentally double charging consumers when payments\nare retried during shaky network conditions.\n\nWe highly recommend developers use this API whenever a charge, preauth, or refund transaction times out.  If you don't receive a definitive response\nfrom BlockChyp, you can't be certain about whether or not the transaction went through.\n\nA best practice in this situation is to send a time out reversal request.  Time out reversals check for a transaction and void it if it exists.\n\nThe only caveat is that developers must use the `transactionRef` property (`txRef` for the CLI) when executing charge, preauth, and refund transactions.\n\nThe reason for this requirement is that if a system never receives a definitive\nresponse for a transaction, the system would never have received the BlockChyp\ngenerated Transaction ID.  We have to fallback to transaction ref to identify\na transaction.\n\n\n\n\n```python\nimport os\n\nimport blockchyp\n\n# initialize a client.\nclient = blockchyp.Client(\n    api_key=os.environ[\"BC_API_KEY\"],\n    bearer_token=os.environ[\"BC_BEARER_TOKEN\"],\n    signing_key=os.environ[\"BC_SIGNING_KEY\"],\n)\n\n# populate request parameters.\nrequest = {\n    \"transactionRef\": \"<LAST TRANSACTION REF>\",\n}\n\n# run the transaction.\nresponse = client.reverse(request)\n\nprint(\"Response: %r\" % response)\n\n\n```\n\n#### Gift Card Activation\n\n\nThis API can be used to activate or add value to BlockChyp gift cards.\nJust pass in the terminal name and the amount to add to the card.\nOnce the customer swipes their card, the terminal will use keys\non the mag stripe to add value to the card.\n\nYou don't need to handle a new gift card or a gift card recharge any\ndifferently.  The terminal firmware will figure out what to do on its\nown and also returns the new balance for the gift card.\n\nThis is the part of the system where BlockChyp's blockchain DNA comes\nclosest to the surface.  The BlockChyp gift card system doesn't really\nuse gift card numbers.  This means they can't be stolen.\n\nBlockChyp identifies cards with an elliptic curve public key instead.\nGift card transactions are actually blocks signed with those keys.\nThis means there are no shared secrets sent over the network with\nBlockChyp gift cards.\nTo keep track of a BlockChyp gift card, hang on to the **public key** returned\nduring gift card activation.  That's the gift card's elliptic curve public key.\n\nWe sometimes print numbers on our gift cards, but these are actually\ndecimal encoded hashes of a portion of the public key to make our gift\ncards seem *normal* to *normies*.  They can be used\nfor balance checks and play a lookup role in online gift card\nauthorization, but are of little use beyond that.\n\n**Voids and Reversals**\n\nGift card activations can be voided and reversed just like any other\nBlockChyp transaction.  Use the Transaction ID or Transaction Ref\nto identify the gift activation transaction as you normally would for\nvoiding or reversing a conventional payment transaction.\n\n**Importing Gift Cards**\n\nBlockChyp does have the ability to import gift card liability from\nconventional gift card platforms.  Unfortunately, BlockChyp does not\nsupport activating cards on third party systems, but you can import\nyour outstanding gift cards and customerSearch can swipe them on the\nterminals just like BlockChyp's standard gift cards.\n\nNo special coding is required to access this feature.  The gateway and\nterminal firmware handle everything for you.\n\n**Third Party Gift Card Networks**\n\nBlockChyp does not currently provide any native support for other gift card\nplatforms beyond importing gift card liability.  We do have a white listing system however that be used support your own custom gift card implementations.  We have a security review\nprocess before we allow a BIN range to be white listed, so contact support@blockchyp.com if you need to white list a BIN range.\n\n\n\n\n```python\nimport os\n\nimport blockchyp\n\n# initialize a client.\nclient = blockchyp.Client(\n    api_key=os.environ[\"BC_API_KEY\"],\n    bearer_token=os.environ[\"BC_BEARER_TOKEN\"],\n    signing_key=os.environ[\"BC_SIGNING_KEY\"],\n)\n\n# populate request parameters.\nrequest = {\n    \"test\": True,\n    \"terminalName\": \"Test Terminal\",\n    \"amount\": \"50.00\",\n}\n\n# run the transaction.\nresponse = client.gift_activate(request)\n\nprint(\"Response: %r\" % response)\n\n\n```\n\n#### Balance\n\n\n\nChecks a gift or EBT card balance.\n\n**Gift Card Balance Checks**\n\nFor gift cards, just pass in a terminal name and the customer will be prompted\nto swipe a card on that terminal.  The remaining balance will be displayed\nbriefly on the terminal screen and the API response will include the gift card's public key and the remaining balance.\n\n**EBT Balance Checks**\n\nAll EBT transactions require a PIN, so in order to check an EBT card balance,\nyou need to pass in the `ebt` flag just like you would for a normal EBT\ncharge transaction.  The customer will be prompted to swipe their card and\nenter a PIN code.  If everything checks out, the remaining balance on the card will be displayed on terminal for the customer and returned in the API.\n\n**Testing Gift Card Balance Checks**\n\nTest gift card balance checks works no differently than live gift cards.  You\nmust activate a test gift card first in order to test balance checks.  Test\ngift cards are real blockchain cards that live on our parallel test blockchain.\n\n**Testing EBT Gift Card Balance Checks**\n\nAll test EBT transactions assume a starting balance of $100.00.  As a result,\ntest EBT balance checks always return a balance of $100.00.\n\n\n\n\n```python\nimport os\n\nimport blockchyp\n\n# initialize a client.\nclient = blockchyp.Client(\n    api_key=os.environ[\"BC_API_KEY\"],\n    bearer_token=os.environ[\"BC_BEARER_TOKEN\"],\n    signing_key=os.environ[\"BC_SIGNING_KEY\"],\n)\n\n# populate request parameters.\nrequest = {\n    \"test\": True,\n    \"terminalName\": \"Test Terminal\",\n    \"cardType\": blockchyp.CardType.EBT,\n}\n\n# run the transaction.\nresponse = client.balance(request)\n\nprint(\"Response: %r\" % response)\n\n\n```\n\n#### Close Batch\n\n\nThis API will close the merchant's batch, if it's currently open.\n\nBy default, merchant batches will close automatically at 3 AM in their\nlocal time zone.  The automatic batch closure time can be changed\nin the Merchant Profile or disabled completely.\n\nIf automatic batch closure is disabled, you'll need to use this API to\nclose the batch manually.\n\n\n\n```python\nimport os\n\nimport blockchyp\n\n# initialize a client.\nclient = blockchyp.Client(\n    api_key=os.environ[\"BC_API_KEY\"],\n    bearer_token=os.environ[\"BC_BEARER_TOKEN\"],\n    signing_key=os.environ[\"BC_SIGNING_KEY\"],\n)\n\n# populate request parameters.\nrequest = {\n    \"test\": True,\n}\n\n# run the transaction.\nresponse = client.close_batch(request)\n\nprint(\"Response: %r\" % response)\n\n\n```\n\n#### Send Payment Link\n\n\n\nThis API allows you to send an invoice to a customer and capture payment\nvia a BlockChyp hosted payment page.\n\nIf you set the `autoSend` flag, BlockChyp will send a basic invoice email\nto the customer for you that includes the payment link.  If you'd rather have\nmore control over the look of the email message, you can omit the `autoSend`\nflag and send the customer email yourself.\n\nThere are a lot of optional parameters for this API, but at a minimum\nyou'll need to pass in a total, customer name, and email address. (Unless\nyou use the `cashier` flag.)\n\n**Customer Info**\n\nUnless you're using the `cashier` flag, you must specify a customer, either by\ncreating a new customer record inline or by passing in an existing Customer ID or Customer Ref.\n\n**Line Item Level Data**\n\nIt's not strictly required, but we strongly recommend sending line item level\ndetail with every request.  It will make the invoice look a little more complete\nand the data format for line item level data is the exact same format used\nfor terminal line item display, so the same code can be used to support both areas.\n\n**Descriptions**\n\nYou can also provide a free form description or message that's displayed near\nthe bottom of the invoice.  Usually this is some kind of thank you note\nor instructions.\n\n**Terms and Conditions**\n\nYou can include long form contract language with a request and capture\nterms and conditions acceptance at the same time payment is captured.\n\nThe interface is identical to that used for the terminal based terms and\nconditions API in that you can pass in content directly via `tcContent` or via\na preconfigured template via `tcAlias`.  The terms and conditions log will also be updated when\nterms and conditions acceptance is incorporated into a send link request.\n\n**Auto Send**\n\nBy default, BlockChyp does not send the email notification automatically.  This is\nreally just a safeguard to prevent real emails from going out when you may not expect it.\nIf you want BlockChyp to send the email for you, just add the `autoSend` flag with\nall requests.\n\n**Cashier Facing Card Entry**\n\nBlockChyp can be used to generate internal/cashier facing links as well.  This is\ndesigned for situations where you might need to take a phone order and you don't\nhave a terminal.\n\nIf you pass in the `cashier` flag, no email will be sent and you'll be be able to\nload the link in a browser or iframe for payment entry.  When the `cashier` flag\nis used, the `autoSend` flag will be ignored.\n\n**Payment Notifications**\n\nWhen a customer successfully submits payment, the merchant will receive an email\nnotifying them that the payment was received.\n\n**Real Time Callback Notifications**\n\nEmail notifications are fine, but you may also want your system to be informed\nimmediately whenever a payment event occurs.  By using the optional `callbackUrl` request\nproperty, you can specify a URL to which the Authorization Response will be posted\nevery time the user submits a payment, whether approved or otherwise.\n\nThe response will be sent as a JSON encoded POST request and will be the exact\nsame format as all BlockChyp charge and preauth transaction responses.\n\n**Status Polling**\n\nIf real time callbacks aren't practical or necesary in your environment, you can\nalways use the Transaction Status API described below.\n\nA common use case for the send link API with status polling is curbside pickup.\nYou could have your system check the Transaction Status when a customer arrives to\nensure it's been paid without necessarily needing to create background threads\nto constantly poll for status updates.\n\n\n\n\n```python\nimport os\n\nimport blockchyp\n\n# initialize a client.\nclient = blockchyp.Client(\n    api_key=os.environ[\"BC_API_KEY\"],\n    bearer_token=os.environ[\"BC_BEARER_TOKEN\"],\n    signing_key=os.environ[\"BC_SIGNING_KEY\"],\n)\n\n# populate request parameters.\nrequest = {\n    \"amount\": \"199.99\",\n    \"description\": \"Widget\",\n    \"subject\": \"Widget invoice\",\n    \"transaction\": {\n        \"subtotal\": \"195.00\",\n        \"tax\": \"4.99\",\n        \"total\": \"199.99\",\n        \"items\": [\n            {\n                \"description\": \"Widget\",\n                \"price\": \"195.00\",\n                \"quantity\": 1,\n            },\n        ],\n    },\n    \"autoSend\": True,\n    \"customer\": {\n        \"customerRef\": \"Customer reference string\",\n        \"firstName\": \"FirstName\",\n        \"lastName\": \"LastName\",\n        \"companyName\": \"Company Name\",\n        \"emailAddress\": \"support@blockchyp.com\",\n        \"smsNumber\": \"(123) 123-1231\",\n    },\n}\n\n# run the transaction.\nresponse = client.send_payment_link(request)\n\nprint(\"Response: %r\" % response)\n\n\n```\n\n#### Transaction Status\n\n\n\nReturns the current status for any transaction.  You can lookup a transaction\nby its BlockChyp assigned Transaction ID or your own Transaction Ref.\n\nYou should alway use globally unique Transaction Ref values, but in the event\nthat you duplicate Transaction Refs, the most recent transaction matching your\nTransaction Ref is returned.\n\n\n\n\n```python\nimport os\n\nimport blockchyp\n\n# initialize a client.\nclient = blockchyp.Client(\n    api_key=os.environ[\"BC_API_KEY\"],\n    bearer_token=os.environ[\"BC_BEARER_TOKEN\"],\n    signing_key=os.environ[\"BC_SIGNING_KEY\"],\n)\n\n# populate request parameters.\nrequest = {\n    \"transactionId\": \"ID of transaction to retrieve\",\n}\n\n# run the transaction.\nresponse = client.transaction_status(request)\n\nprint(\"Response: %r\" % response)\n\n\n```\n\n#### Terminal Clear\n\n\n\nThis API interrupts whatever a terminal may be doing and returns it to the\nidle state.\n\n\n\n\n\n```python\nimport os\n\nimport blockchyp\n\n# initialize a client.\nclient = blockchyp.Client(\n    api_key=os.environ[\"BC_API_KEY\"],\n    bearer_token=os.environ[\"BC_BEARER_TOKEN\"],\n    signing_key=os.environ[\"BC_SIGNING_KEY\"],\n)\n\n# populate request parameters.\nrequest = {\n    \"test\": True,\n    \"terminalName\": \"Test Terminal\",\n}\n\n# run the transaction.\nresponse = client.clear(request)\n\nprint(\"Response: %r\" % response)\n\n\n```\n\n#### Terminal Status\n\n\n\nReturns the current status of a payment terminal.  This is typically used\nas a way to determine if the terminal is busy before sending a new transaction.\n\nIf the terminal is busy, `idle` will be false and the `status` field will return\na short string indicating the transaction type currently in progress.  The system\nwill also return the timestamp of the last status change in the `since` field.\n\nIf the system is running a payment transaction and you wisely passed in a\nTransaction Ref, this API will also return the Transaction Ref of the in progress\ntransaction in the response.\n\n\n\n\n```python\nimport os\n\nimport blockchyp\n\n# initialize a client.\nclient = blockchyp.Client(\n    api_key=os.environ[\"BC_API_KEY\"],\n    bearer_token=os.environ[\"BC_BEARER_TOKEN\"],\n    signing_key=os.environ[\"BC_SIGNING_KEY\"],\n)\n\n# populate request parameters.\nrequest = {\n    \"terminalName\": \"Test Terminal\",\n}\n\n# run the transaction.\nresponse = client.terminal_status(request)\n\nprint(\"Response: %r\" % response)\n\n\n```\n\n#### Terms & Conditions Capture\n\n\n\nThis API allows you to prompt a customer to accept a legal agreement on the terminal\nand optionally capture their signature.\n\nContent for the agreement can be specified in two ways.  You can reference a\npreviously configured T&C template or pass in the full agreement text with every request.\n\n**Using Templates**\n\nIf your application doesn't keep track of agreements you can leverage BlockChyp's\ntemplate system.  You can create any number of T&C Templates in the merchant dashboard\nand pass in the `tcAlias` flag to specify which one to display.\n\n**Raw Content**\n\nIf your system keeps track of the agreement language or executes complicated merging\nand rendering logic, you can bypass our template system and pass in the full text with\nevery transaction.  Use the `tcName` to pass in the agreement name and `tcContent` to\npass in the contract text.  Note that only plain text is supported.\n\n**Bypassing Signatures**\n\nSignature images are captured by default.  If for some reason this doesn't fit your\nuse case and you'd like to capture acceptance without actually capturing a signature image set\nthe `disableSignature` flag in the request.\n\n**Terms & Conditions Log**\n\nEvery time a user accepts an agreement on the terminal the signature image (if captured),\nwill be uploaded to the gateway and added to the log along with the full text of the\nagreement.  This preserves the historical record in the event that standard agreements\nor templates change over time.\n\n**Associating Agreements with Transactions**\n\nTo associate a Terms & Conditions log entry with a transaction, just pass in the\nTransaction ID or Transaction Ref for the associated transaction.\n\n\n\n\n\n```python\nimport os\n\nimport blockchyp\n\n# initialize a client.\nclient = blockchyp.Client(\n    api_key=os.environ[\"BC_API_KEY\"],\n    bearer_token=os.environ[\"BC_BEARER_TOKEN\"],\n    signing_key=os.environ[\"BC_SIGNING_KEY\"],\n)\n\n# populate request parameters.\nrequest = {\n    \"test\": True,\n    \"terminalName\": \"Test Terminal\",\n\n    # Alias for a Terms and Conditions template configured in the BlockChyp\n    # dashboard.\n    \"tcAlias\": \"hippa\",\n\n    # Name of the contract or document if not using an alias.\n    \"tcName\": \"HIPPA Disclosure\",\n\n    # Full text of the contract or disclosure if not using an alias.\n    \"tcContent\": \"Full contract text\",\n\n    # File format for the signature image.\n    \"sigFormat\": blockchyp.SignatureFormat.PNG,\n\n    # Width of the signature image in pixels.\n    \"sigWidth\": 200,\n\n    # Whether or not a signature is required. Defaults to true.\n    \"sigRequired\": True,\n}\n\n# run the transaction.\nresponse = client.terms_and_conditions(request)\n\nprint(\"Response: %r\" % response)\n\n\n```\n\n#### Capture Signature\n\n\n\nThis endpoint captures a written signature from the terminal and returns the\nimage.\n\nUnlike the Terms & Conditions API, this endpoint performs basic signature\ncapture with no agreement display or signature archival.\n\nUnder the hood, signatures are captured in a proprietary vector format and\nmust be converted to a common raster format in order to be useful to most\napplications.  At a minimum, you must specify an image format using the\n`sigFormat` parameter.  As of this writing JPG and PNG are supported.\n\nBy default, images are returned in the JSON response as hex encoded binary.\nYou can redirect the binary image output to a file using the `sigFile`\nparameter.\n\nYou can also scale the output image to your preferred width by\npassing in a `sigWidth` parameter.  The image will be scaled to that\nwidth, preserving the aspect ratio of the original image.\n\n\n\n\n```python\nimport os\n\nimport blockchyp\n\n# initialize a client.\nclient = blockchyp.Client(\n    api_key=os.environ[\"BC_API_KEY\"],\n    bearer_token=os.environ[\"BC_BEARER_TOKEN\"],\n    signing_key=os.environ[\"BC_SIGNING_KEY\"],\n)\n\n# populate request parameters.\nrequest = {\n    \"terminalName\": \"Test Terminal\",\n\n    # File format for the signature image.\n    \"sigFormat\": blockchyp.SignatureFormat.PNG,\n\n    # Width of the signature image in pixels.\n    \"sigWidth\": 200,\n}\n\n# run the transaction.\nresponse = client.capture_signature(request)\n\nprint(\"Response: %r\" % response)\n\n\n```\n\n#### New Transaction Display\n\n\n\nSends totals and line item level data to the terminal.\n\nAt a minimum, you should send total information as part of a display request,\nincluding `total`, `tax`, and `subtotal`.\n\nYou can also send line item level data and each line item can have a `description`,\n`qty`, `price`, and `extended` price.\n\nIf you fail to send an extended price, BlockChyp will multiply the `qty` by the\n`price`, but we strongly recommend you precalculate all the fields yourself\nto ensure consistency.  Your treatment of floating-point multiplication and rounding\nmay differ slightly from BlockChyp's, for example.\n\n**Discounts**\n\nYou have the option to show discounts on the display as individual line items\nwith negative values or you can associate discounts with a specific line item.\nYou can apply any number of discounts to an individual line item with a description\nand amount.\n\n\n\n\n```python\nimport os\n\nimport blockchyp\n\n# initialize a client.\nclient = blockchyp.Client(\n    api_key=os.environ[\"BC_API_KEY\"],\n    bearer_token=os.environ[\"BC_BEARER_TOKEN\"],\n    signing_key=os.environ[\"BC_SIGNING_KEY\"],\n)\n\n# populate request parameters.\nrequest = {\n    \"test\": True,\n    \"terminalName\": \"Test Terminal\",\n    \"transaction\": {\n        \"subtotal\": \"60.00\",\n        \"tax\": \"5.00\",\n        \"total\": \"65.00\",\n        \"items\": [\n            {\n                \"description\": \"Leki Trekking Poles\",\n                \"price\": \"35.00\",\n                \"quantity\": 2,\n                \"extended\": \"70.00\",\n                \"discounts\": [\n                    {\n                        \"description\": \"memberDiscount\",\n                        \"amount\": \"10.00\",\n                    },\n                ],\n            },\n        ],\n    },\n}\n\n# run the transaction.\nresponse = client.new_transaction_display(request)\n\nprint(\"Response: %r\" % response)\n\n\n```\n\n#### Update Transaction Display\n\n\n\nSimilar to *New Transaction Display*, this variant allows developers to update\nline item level data currently being displayed on the terminal.\n\nThis is designed for situations where you want to update the terminal display as\nitems are scanned.  This variant means you only have to send information to the\nterminal that's changed, which usually means the new line item and updated totals.\n\nIf the terminal is not in line item display mode and you invoke this endpoint,\nthe first invocation will behave like a *New Transaction Display* call.\n\nAt a minimum, you should send total information as part of a display request,\nincluding `total`, `tax`, and `subtotal`.\n\nYou can also send line item level data and each line item can have a `description`,\n`qty`, `price`, and `extended` price.\n\nIf you fail to send an extended price, BlockChyp will multiply the `qty` by the\n`price`, but we strongly recommend you precalculate all the fields yourself\nto ensure consistency.  Your treatment of floating-point multiplication and rounding\nmay differ slightly from BlockChyp's, for example.\n\n**Discounts**\n\nYou have the option to show discounts on the display as individual line items\nwith negative values or you can associate discounts with a specific line item.\nYou can apply any number of discounts to an individual line item with a description\nand amount.\n\n\n\n\n```python\nimport os\n\nimport blockchyp\n\n# initialize a client.\nclient = blockchyp.Client(\n    api_key=os.environ[\"BC_API_KEY\"],\n    bearer_token=os.environ[\"BC_BEARER_TOKEN\"],\n    signing_key=os.environ[\"BC_SIGNING_KEY\"],\n)\n\n# populate request parameters.\nrequest = {\n    \"test\": True,\n    \"terminalName\": \"Test Terminal\",\n    \"transaction\": {\n        \"subtotal\": \"60.00\",\n        \"tax\": \"5.00\",\n        \"total\": \"65.00\",\n        \"items\": [\n            {\n                \"description\": \"Leki Trekking Poles\",\n                \"price\": \"35.00\",\n                \"quantity\": 2,\n                \"extended\": \"70.00\",\n                \"discounts\": [\n                    {\n                        \"description\": \"memberDiscount\",\n                        \"amount\": \"10.00\",\n                    },\n                ],\n            },\n        ],\n    },\n}\n\n# run the transaction.\nresponse = client.update_transaction_display(request)\n\nprint(\"Response: %r\" % response)\n\n\n```\n\n#### Display Message\n\n\n\nDisplays a message on the payment terminal.\n\nJust specify the target terminal and the message using the `message` parameter.\n\n\n\n\n```python\nimport os\n\nimport blockchyp\n\n# initialize a client.\nclient = blockchyp.Client(\n    api_key=os.environ[\"BC_API_KEY\"],\n    bearer_token=os.environ[\"BC_BEARER_TOKEN\"],\n    signing_key=os.environ[\"BC_SIGNING_KEY\"],\n)\n\n# populate request parameters.\nrequest = {\n    \"test\": True,\n    \"terminalName\": \"Test Terminal\",\n    \"message\": \"Thank you for your business.\",\n}\n\n# run the transaction.\nresponse = client.message(request)\n\nprint(\"Response: %r\" % response)\n\n\n```\n\n#### Boolean Prompt\n\n\n\nPrompts the customer to answer a yes or no question.\n\nYou can specify the question or prompt with the `prompt` parameter and\nthe response is returned in the `response` field.\n\nThis can be used for a number of use cases including starting a loyalty enrollment\nworkflow or customer facing suggestive selling prompts.\n\n**Custom Captions**\n\nYou can optionally override the \"YES\" and \"NO\" button captions by\nusing the `yesCaption` and `noCaption` request parameters.\n\n\n\n\n```python\nimport os\n\nimport blockchyp\n\n# initialize a client.\nclient = blockchyp.Client(\n    api_key=os.environ[\"BC_API_KEY\"],\n    bearer_token=os.environ[\"BC_BEARER_TOKEN\"],\n    signing_key=os.environ[\"BC_SIGNING_KEY\"],\n)\n\n# populate request parameters.\nrequest = {\n    \"test\": True,\n    \"terminalName\": \"Test Terminal\",\n    \"prompt\": \"Would you like to become a member?\",\n    \"yesCaption\": \"Yes\",\n    \"noCaption\": \"No\",\n}\n\n# run the transaction.\nresponse = client.boolean_prompt(request)\n\nprint(\"Response: %r\" % response)\n\n\n```\n\n#### Text Prompt\n\n\n\nPrompts the customer to enter numeric or alphanumeric data.\n\nDue to PCI rules, free form prompts are not permitted when the response\ncould be any valid string.  The reason for this is that a malicious\ndeveloper (not you, of course) could use text prompts to ask the customer to\ninput a card number or PIN code.\n\nThis means that instead of providing a prompt, you provide a `promptType` instead.\n\nThe prompt types currently supported are listed below:\n\n* **phone**: Captures a phone number.\n* **email**: Captures an email address.\n* **first-name**: Captures a first name.\n* **last-name**: Captures a last name.\n* **customer-number**: Captures a customer number.\n* **rewards-number**: Captures a rewards number.\n\nYou can specify the prompt with the `promptType` parameter and\nthe response is returned in the `response` field.\n\n\n\n\n\n```python\nimport os\n\nimport blockchyp\n\n# initialize a client.\nclient = blockchyp.Client(\n    api_key=os.environ[\"BC_API_KEY\"],\n    bearer_token=os.environ[\"BC_BEARER_TOKEN\"],\n    signing_key=os.environ[\"BC_SIGNING_KEY\"],\n)\n\n# populate request parameters.\nrequest = {\n    \"test\": True,\n    \"terminalName\": \"Test Terminal\",\n\n    # Type of prompt. Can be 'email', 'phone', 'customer-number', or\n    # 'rewards-number'.\n    \"promptType\": blockchyp.PromptType.EMAIL,\n}\n\n# run the transaction.\nresponse = client.text_prompt(request)\n\nprint(\"Response: %r\" % response)\n\n\n```\n\n#### Update Customer\n\n\n\nAdds or updates a customer record.\n\nIf you pass in customer information including `firstName`, `lastName`, `email`,\n`email`, or `sms` without any Customer ID or Customer Ref, a new record will\nbe created.\n\nIf you pass in `customerRef` and `customerId`, the customer record will be updated\nif it exists.\n\n**Customer Ref**\n\nThe `customerRef` field is optional, but highly recommended as this allows you\nto use your own customer identifiers instead of storing BlockChyp's Customer IDs\nin your systems.\n\n**Creating Customer Records With Payment Transactions**\n\nIf you have customer information available at the time a payment transaction is\nexecuted, you can pass all the same customer information directly into a payment transaction and\ncreate a customer record at the same time payment is captured.  The advantage of this approach is\nthat the customer's payment card is automatically associated with the customer record in a single step.\nIf the customer uses the payment card in the future, the customer data will automatically\nbe returned without needing to ask the customer to provide any additional information.\n\n\n\n\n```python\nimport os\n\nimport blockchyp\n\n# initialize a client.\nclient = blockchyp.Client(\n    api_key=os.environ[\"BC_API_KEY\"],\n    bearer_token=os.environ[\"BC_BEARER_TOKEN\"],\n    signing_key=os.environ[\"BC_SIGNING_KEY\"],\n)\n\n# populate request parameters.\nrequest = {\n    \"customer\": {\n        \"id\": \"ID of the customer to update\",\n        \"customerRef\": \"Customer reference string\",\n        \"firstName\": \"FirstName\",\n        \"lastName\": \"LastName\",\n        \"companyName\": \"Company Name\",\n        \"emailAddress\": \"support@blockchyp.com\",\n        \"smsNumber\": \"(123) 123-1231\",\n    },\n}\n\n# run the transaction.\nresponse = client.update_customer(request)\n\nprint(\"Response: %r\" % response)\n\n\n```\n\n#### Retrieve Customer\n\n\n\nRetrieves detailed information about a customer record, including saved payment\nmethods if available.\n\nCustomers can be looked up by `customerId` or `customerRef`.\n\n\n\n\n```python\nimport os\n\nimport blockchyp\n\n# initialize a client.\nclient = blockchyp.Client(\n    api_key=os.environ[\"BC_API_KEY\"],\n    bearer_token=os.environ[\"BC_BEARER_TOKEN\"],\n    signing_key=os.environ[\"BC_SIGNING_KEY\"],\n)\n\n# populate request parameters.\nrequest = {\n    \"customerId\": \"ID of the customer to retrieve\",\n}\n\n# run the transaction.\nresponse = client.customer(request)\n\nprint(\"Response: %r\" % response)\n\n\n```\n\n#### Search Customer\n\n\n\nSearches the customer database and returns matching results.\n\nUse `query` to pass in a search string and the system will return all results whose\nfirst or last names contain the query string.\n\n\n\n\n```python\nimport os\n\nimport blockchyp\n\n# initialize a client.\nclient = blockchyp.Client(\n    api_key=os.environ[\"BC_API_KEY\"],\n    bearer_token=os.environ[\"BC_BEARER_TOKEN\"],\n    signing_key=os.environ[\"BC_SIGNING_KEY\"],\n)\n\n# populate request parameters.\nrequest = {\n    \"query\": \"(123) 123-1234\",\n}\n\n# run the transaction.\nresponse = client.customer_search(request)\n\nprint(\"Response: %r\" % response)\n\n\n```\n\n#### Cash Discount\n\n\n\nCalculates the surcharge, cash discount, and total amounts for cash transactions.\n\nIf you're using BlockChyp's cash discounting features, you can use this endpoint\nto make sure the numbers and receipts for true cash transactions are consistent\nwith transactions processed by BlockChyp.\n\n\n\n\n```python\nimport os\n\nimport blockchyp\n\n# initialize a client.\nclient = blockchyp.Client(\n    api_key=os.environ[\"BC_API_KEY\"],\n    bearer_token=os.environ[\"BC_BEARER_TOKEN\"],\n    signing_key=os.environ[\"BC_SIGNING_KEY\"],\n)\n\n# populate request parameters.\nrequest = {\n    \"amount\": \"100.00\",\n    \"cashDiscount\": True,\n    \"surcharge\": True,\n}\n\n# run the transaction.\nresponse = client.cash_discount(request)\n\nprint(\"Response: %r\" % response)\n\n\n```\n\n## Running Integration Tests\n\nIf you'd like to run the integration tests, create a new file on your system\ncalled `sdk-itest-config.json` with the API credentials you'll be using as\nshown in the example below.\n\n```\n{\n \"gatewayHost\": \"https://api.blockchyp.com\",\n \"testGatewayHost\": \"https://test.blockchyp.com\",\n \"apiKey\": \"PZZNEFK7HFULCB3HTLA7HRQDJU\",\n \"bearerToken\": \"QUJCHIKNXOMSPGQ4QLT2UJX5DI\",\n \"signingKey\": \"f88a72d8bc0965f193abc7006bbffa240663c10e4d1dc3ba2f81e0ca10d359f5\"\n}\n```\n\nThis file can be located in a few different places, but is usually located\nat `<USER_HOME>/.config/blockchyp/sdk-itest-config.json`. All BlockChyp SDKs\nuse the same configuration file.\n\nTo run the integration test suite via `make`, type the following command:\n\n`make integration`\n\n[BlockChyp]: https://www.blockchyp.com\n\n## Contributions\n\nBlockChyp welcomes contributions from the open source community, but bear in mind\nthat this repository has been generated by our internal SDK Generator tool. If\nwe choose to accept a PR or contribution, your code will be moved into our SDK\nGenerator project, which is a private repository.\n\n## License\n\nCopyright BlockChyp, Inc., 2019\n\nDistributed under the terms of the [MIT] license, blockchyp-python is free and open source software.\n\n[MIT]: https://github.com/blockchyp/blockchyp-python/blob/master/LICENSE\n\n## Other SDKs\n\nBlockChyp has officially supported SDKs for eight different development platforms and counting.\nHere's the full list with links to their GitHub repositories.\n\n[Go SDK](https://github.com/blockchyp/blockchyp-go)\n\n[Node.js/JavaScript SDK](https://github.com/blockchyp/blockchyp-js)\n\n[Java SDK](https://github.com/blockchyp/blockchyp-java)\n\n[.net/C# SDK](https://github.com/blockchyp/blockchyp-csharp)\n\n[Ruby SDK](https://github.com/blockchyp/blockchyp-ruby)\n\n[PHP SDK](https://github.com/blockchyp/blockchyp-php)\n\n[Python SDK](https://github.com/blockchyp/blockchyp-python)\n\n[iOS (Objective-C/Swift) SDK](https://github.com/blockchyp/blockchyp-ios)\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/blockchyp/blockchyp-python", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "blockchyp", "package_url": "https://pypi.org/project/blockchyp/", "platform": "", "project_url": "https://pypi.org/project/blockchyp/", "project_urls": {"Homepage": "https://github.com/blockchyp/blockchyp-python"}, "release_url": "https://pypi.org/project/blockchyp/2.3.4.post1/", "requires_dist": ["cryptography", "requests"], "requires_python": ">=3.5", "summary": "The official library for accessing the BlockChyp Terminal and Gateway APIs", "version": "2.3.4.post1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>BlockChyp Python SDK</h1>\n<p><a href=\"https://circleci.com/gh/blockchyp/blockchyp-python/tree/master\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7250ee28ecb19833cde618309ac311dad29b4730/68747470733a2f2f636972636c6563692e636f6d2f67682f626c6f636b636879702f626c6f636b636879702d707974686f6e2f747265652f6d61737465722e7376673f7374796c653d736869656c64\"></a>\n<a href=\"https://pypi.org/project/blockchyp/\" rel=\"nofollow\"><img alt=\"PyPI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/586d9d6e075bdc36e899df57b74110b1c20e7422/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f626c6f636b636879702e737667\"></a>\n<a href=\"https://github.com/blockchyp/blockchyp-python/blob/master/LICENSE\" rel=\"nofollow\"><img alt=\"License: MIT\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c88fab50b4a1dc0cd91faeb7ba5654d56e380260/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d626c75652e737667\"></a></p>\n<p>The official library for accessing the <a href=\"https://www.blockchyp.com\" rel=\"nofollow\">BlockChyp</a> Terminal and Gateway APIs\nfrom Python.</p>\n<h2>Installation</h2>\n<p>BlockChyp can be simply installed by running:</p>\n<pre>pip install blockchyp\n</pre>\n<h2>Additional Documentation</h2>\n<p>Complete documentation can be found on our <a href=\"https://docs.blockchyp.com/\" rel=\"nofollow\">Developer Documentation Portal</a>.</p>\n<h2>Getting a Developer Kit</h2>\n<p>In order to test your integration with real terminals, you'll need a BlockChyp\nDeveloper Kit. Our kits include a fully functioning payment terminal with\ntest pin encryption keys. Every kit includes a comprehensive set of test\ncards with test cards for every major card brand and entry method, including\nContactless and Contact EMV and mag stripe cards. Each kit also includes\ntest gift cards for our blockchain gift card system.</p>\n<p>Access to BlockChyp's developer program is currently invite only, but you\ncan request an invitation by contacting our engineering team at <strong><a href=\"mailto:nerds@blockchyp.com\">nerds@blockchyp.com</a></strong>.</p>\n<p>You can also view a number of long form demos and learn more about us on our <a href=\"https://www.youtube.com/channel/UCE-iIVlJic_XArs_U65ZcJg\" rel=\"nofollow\">YouTube Channel</a>.</p>\n<h2>Transaction Code Examples</h2>\n<p>You don't want to read words. You want examples. Here's a quick rundown of the\nstuff you can do with the BlockChyp Python SDK and a few basic examples.</p>\n<h4>Terminal Ping</h4>\n<p>This simple test transaction helps ensure you have good communication with a payment terminal and is usually the first one you'll run in development.</p>\n<p>It tests communication with the terminal and returns a positive response if everything\nis okay.  It works the same way in local or cloud relay mode.</p>\n<p>If you get a positive response, you've successfully verified all of the following:</p>\n<ul>\n<li>The terminal is online.</li>\n<li>There is a valid route to the terminal.</li>\n<li>The API Credential are valid.</li>\n</ul>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">blockchyp</span>\n\n<span class=\"c1\"># initialize a client.</span>\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">blockchyp</span><span class=\"o\">.</span><span class=\"n\">Client</span><span class=\"p\">(</span>\n    <span class=\"n\">api_key</span><span class=\"o\">=</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s2\">\"BC_API_KEY\"</span><span class=\"p\">],</span>\n    <span class=\"n\">bearer_token</span><span class=\"o\">=</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s2\">\"BC_BEARER_TOKEN\"</span><span class=\"p\">],</span>\n    <span class=\"n\">signing_key</span><span class=\"o\">=</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s2\">\"BC_SIGNING_KEY\"</span><span class=\"p\">],</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\"># populate request parameters.</span>\n<span class=\"n\">request</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">\"terminalName\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Test Terminal\"</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># run the transaction.</span>\n<span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">ping</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Response: </span><span class=\"si\">%r</span><span class=\"s2\">\"</span> <span class=\"o\">%</span> <span class=\"n\">response</span><span class=\"p\">)</span>\n</pre>\n<h4>Charge</h4>\n<p>Our most popular transaction executes a standard authorization and capture.\nThis is the most basic of\nbasic payment transactions, typically used in conventional retail.</p>\n<p>Charge transactions can use a payment terminal to capture a payment or\nuse a previously enrolled payment token.</p>\n<p><strong>Terminal Transactions</strong></p>\n<p>For terminal transactions, make sure you pass in the terminal name using the <code>terminalName</code> property.</p>\n<p><strong>Token Transactions</strong></p>\n<p>If you have a payment token, omit the <code>terminalName</code> property and pass in the token with the <code>token</code>\nproperty instead.</p>\n<p><strong>Card Numbers and Mag Stripes</strong></p>\n<p>You can also pass in PANs and Mag Stripes, but you probably shouldn't.  This will\nput you in PCI scope and the most common vector for POS breaches is key logging.\nIf you use terminals for manual card entry, you'll bypass any key loggers that\nmight be maliciously running on the point-of-sale system.</p>\n<p><strong>Common Variations</strong></p>\n<ul>\n<li><strong>Gift Card Redemption</strong>:  There's no special API for gift card redemption in BlockChyp.  Just execute a plain charge transaction and if the customer happens to swipe a gift card, our terminals will identify the gift card and run a gift card redemption.  Also note that if for some reason the gift card's original purchase transaction is associated with fraud or a chargeback, the transaction will be rejected.</li>\n<li><strong>EBT</strong>: Set the <code>ebt</code> flag to process an EBT SNAP transaction.  Note that test EBT transactions alway assume a balance of $100.00, so test EBT transactions over that amount may be declined.</li>\n<li><strong>Cash Back</strong>: To enable cash back for debit transactions, set the <code>cashBack</code> flag.  If the card presented isn't a debit card, the <code>cashBack</code> flag will be ignored.</li>\n<li><strong>Manual Card Entry</strong>: Set the <code>manual</code> flag to enable manual card entry.  Good as a backup when chips and MSR's don't work or for more secure phone orders.  You can even combine the <code>manual</code> flag with the <code>ebt</code> flag for manual EBT card entry.</li>\n<li><strong>Inline Tokenization</strong>: You can enroll the payment method in the token vault inline with a charge transaction by setting the <code>enroll</code> flag.  You'll get a token back in the response.  You can even bind the token to a customer record if you also pass in customer data.</li>\n<li><strong>Prompting for Tips</strong>: Set the <code>promptForTips</code> flag if you'd like to prompt the customer for a tip before authorization.  Good for pay-at-the-table and other services related scenarios.</li>\n<li><strong>Cash Discounting and Surcharging</strong>:  The <code>surcharge</code> and <code>cashDiscount</code> flags can be used together to support cash discounting or surcharge problems. Consult the Cash Discount documentation for more details.</li>\n</ul>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">blockchyp</span>\n\n<span class=\"c1\"># initialize a client.</span>\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">blockchyp</span><span class=\"o\">.</span><span class=\"n\">Client</span><span class=\"p\">(</span>\n    <span class=\"n\">api_key</span><span class=\"o\">=</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s2\">\"BC_API_KEY\"</span><span class=\"p\">],</span>\n    <span class=\"n\">bearer_token</span><span class=\"o\">=</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s2\">\"BC_BEARER_TOKEN\"</span><span class=\"p\">],</span>\n    <span class=\"n\">signing_key</span><span class=\"o\">=</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s2\">\"BC_SIGNING_KEY\"</span><span class=\"p\">],</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\"># populate request parameters.</span>\n<span class=\"n\">request</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">\"test\"</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"terminalName\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Test Terminal\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"amount\"</span><span class=\"p\">:</span> <span class=\"s2\">\"55.00\"</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># run the transaction.</span>\n<span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">charge</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Response: </span><span class=\"si\">%r</span><span class=\"s2\">\"</span> <span class=\"o\">%</span> <span class=\"n\">response</span><span class=\"p\">)</span>\n</pre>\n<h4>Preauthorization</h4>\n<p>A preauthorization puts a hold on funds and must be captured later.  This is used\nin scenarios where the final transaction amount might change.  Examples would\nbe fine dining where a tip adjustment is required prior to capture or hotels</p>\n<p>Another use case for preauthorization is e-commerce.  Typically, an online order\nis preauthorized at the time of the order and then captured when the order ships.</p>\n<p>Preauthorizations can use a payment terminal to capture a payment or\nuse a previously enrolled payment token.</p>\n<p><strong>Terminal Transactions</strong></p>\n<p>For terminal transactions, make sure you pass in the terminal name using the <code>terminalName</code> property.</p>\n<p><strong>Token Transactions</strong></p>\n<p>If you have a payment token, omit the <code>terminalName</code> property and pass in the token with the <code>token</code>\nproperty instead.</p>\n<p><strong>Card Numbers and Mag Stripes</strong></p>\n<p>You can also pass in PANs and Mag Stripes, but you probably shouldn't.  This will\nput you in PCI scope and the most common vector for POS breaches is key logging.\nIf you use terminals for manual card entry, you'll bypass any key loggers that\nmight be maliciously running on the point-of-sale system.</p>\n<p><strong>Common Variations</strong></p>\n<ul>\n<li><strong>Manual Card Entry</strong>: Set the <code>manual</code> flag to enable manual card entry.  Good as a backup when chips and MSR's don't work or for more secure phone orders.  You can even combine the <code>manual</code> flag with the <code>ebt</code> flag for manual EBT card entry.</li>\n<li><strong>Inline Tokenization</strong>: You can enroll the payment method in the token vault in line with a charge transaction by setting the <code>enroll</code> flag.  You'll get a token back in the response.  You can even bind the token to a customer record if you also pass in customer data.</li>\n<li><strong>Prompting for Tips</strong>: Set the <code>promptForTips</code> flag if you'd like to prompt the customer for a tip before authorization.  You can prompt for tips as part of a preauthorization, although it's not a very common approach.</li>\n<li><strong>Cash Discounting and Surcharging</strong>:  The <code>surcharge</code> and <code>cashDiscount</code> flags can be used together to support cash discounting or surcharge problems. Consult the Cash Discount documentation for more details.</li>\n</ul>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">blockchyp</span>\n\n<span class=\"c1\"># initialize a client.</span>\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">blockchyp</span><span class=\"o\">.</span><span class=\"n\">Client</span><span class=\"p\">(</span>\n    <span class=\"n\">api_key</span><span class=\"o\">=</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s2\">\"BC_API_KEY\"</span><span class=\"p\">],</span>\n    <span class=\"n\">bearer_token</span><span class=\"o\">=</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s2\">\"BC_BEARER_TOKEN\"</span><span class=\"p\">],</span>\n    <span class=\"n\">signing_key</span><span class=\"o\">=</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s2\">\"BC_SIGNING_KEY\"</span><span class=\"p\">],</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\"># populate request parameters.</span>\n<span class=\"n\">request</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">\"test\"</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"terminalName\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Test Terminal\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"amount\"</span><span class=\"p\">:</span> <span class=\"s2\">\"27.00\"</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># run the transaction.</span>\n<span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">preauth</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Response: </span><span class=\"si\">%r</span><span class=\"s2\">\"</span> <span class=\"o\">%</span> <span class=\"n\">response</span><span class=\"p\">)</span>\n</pre>\n<h4>Capture Preauthorization</h4>\n<p>This API allows you to capture a previously approved preauthorization.</p>\n<p>You'll need to make sure you pass in the Transaction ID returned by the original preauth transaction so we know which transaction we're capturing.  If you want to capture the transaction for the\nexact amount of the preauth, the Transaction ID is all you need to pass in.</p>\n<p>You can adjust the total if you need to by passing in a new <code>amount</code>.  We\nalso recommend you pass in updated amounts for <code>tax</code> and <code>tip</code> as it can\nreduce your interchange fees in some cases. (Level II Processing, for example.)</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">blockchyp</span>\n\n<span class=\"c1\"># initialize a client.</span>\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">blockchyp</span><span class=\"o\">.</span><span class=\"n\">Client</span><span class=\"p\">(</span>\n    <span class=\"n\">api_key</span><span class=\"o\">=</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s2\">\"BC_API_KEY\"</span><span class=\"p\">],</span>\n    <span class=\"n\">bearer_token</span><span class=\"o\">=</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s2\">\"BC_BEARER_TOKEN\"</span><span class=\"p\">],</span>\n    <span class=\"n\">signing_key</span><span class=\"o\">=</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s2\">\"BC_SIGNING_KEY\"</span><span class=\"p\">],</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\"># populate request parameters.</span>\n<span class=\"n\">request</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">\"test\"</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"transactionId\"</span><span class=\"p\">:</span> <span class=\"s2\">\"&lt;PREAUTH TRANSACTION ID&gt;\"</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># run the transaction.</span>\n<span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">capture</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Response: </span><span class=\"si\">%r</span><span class=\"s2\">\"</span> <span class=\"o\">%</span> <span class=\"n\">response</span><span class=\"p\">)</span>\n</pre>\n<h4>Refund</h4>\n<p>It's not ideal, but sometimes customers want their money back.</p>\n<p>Our refund API allows you to confront this unpleasant reality by executing refunds in a few different scenarios.</p>\n<p>The most fraud resistent method is to execute refunds in the context of a previous transaction.  You should always keep track of the Transaction ID\nreturned in a BlockChyp response.  To refund the full amount of the previous transaction, just pass in the original Transaction ID with the refund requests.</p>\n<p><strong>Partial Refunds</strong></p>\n<p>For a partial refund, just passing an amount along with the Transaction ID.\nThe only rule is that the amount has to be equal to or less than the original\ntransaction.  You can even execute multiple partial refunds against the same\noriginal transaction as long as the total refunded amount doesn't exceed the original transaction.</p>\n<p><strong>Tokenized Refunds</strong></p>\n<p>You can also use a token to execute a refund.  Just pass in a token instead\nof the Transaction ID along with the desired refund amount.</p>\n<p><strong>Free Range Refunds</strong></p>\n<p>When you execute a refund without referencing a previous transaction, we\ncall this a <em>free range refund</em>.</p>\n<p>We don't recommend it, but it is permitted.  Just pass in a\nTerminal Name and an amount.</p>\n<p>You can even execute a manual or keyed refund by passing the <code>manual</code> flag\nto a free range refund request.</p>\n<p><strong>Gift Card Refunds</strong></p>\n<p>Gift card refunds are allowed in the context of a previous transaction, but\nfree range gift card refunds are not allowed.  Use the gift card activation\nAPI if you need to add more funds to a gift card.</p>\n<p><strong>Store and Forward Support</strong></p>\n<p>Refunds are not permitted when a terminal falls back to store and forward mode.</p>\n<p><strong>Auto Voids</strong></p>\n<p>If a refund referencing a previous transaction is executed for the full amount\nbefore the original transaction's batch is closed, the refund is automatically\nconverted to a void.  This saves the merchant a little bit of money.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">blockchyp</span>\n\n<span class=\"c1\"># initialize a client.</span>\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">blockchyp</span><span class=\"o\">.</span><span class=\"n\">Client</span><span class=\"p\">(</span>\n    <span class=\"n\">api_key</span><span class=\"o\">=</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s2\">\"BC_API_KEY\"</span><span class=\"p\">],</span>\n    <span class=\"n\">bearer_token</span><span class=\"o\">=</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s2\">\"BC_BEARER_TOKEN\"</span><span class=\"p\">],</span>\n    <span class=\"n\">signing_key</span><span class=\"o\">=</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s2\">\"BC_SIGNING_KEY\"</span><span class=\"p\">],</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\"># populate request parameters.</span>\n<span class=\"n\">request</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">\"terminalName\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Test Terminal\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"transactionId\"</span><span class=\"p\">:</span> <span class=\"s2\">\"&lt;PREVIOUS TRANSACTION ID&gt;\"</span><span class=\"p\">,</span>\n\n    <span class=\"c1\"># Optional amount for partial refunds.</span>\n    <span class=\"s2\">\"amount\"</span><span class=\"p\">:</span> <span class=\"s2\">\"5.00\"</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># run the transaction.</span>\n<span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">refund</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Response: </span><span class=\"si\">%r</span><span class=\"s2\">\"</span> <span class=\"o\">%</span> <span class=\"n\">response</span><span class=\"p\">)</span>\n</pre>\n<h4>Enroll</h4>\n<p>This API allows you to tokenize and enroll a payment method in the token\nvault.  You can also pass in customer information and associate the\npayment method with a customer record.</p>\n<p>A token is returned in the response that can be used in subsequent charge,\npreauth, and refund transactions.</p>\n<p><strong>Gift Cards and EBT</strong></p>\n<p>Gift Cards and EBT cards cannot be tokenized.</p>\n<p><strong>E-Commerce Tokens</strong></p>\n<p>The tokens returned by the enroll API and the e-commerce web tokenizer\nare the same tokens and can be used interchangeably.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">blockchyp</span>\n\n<span class=\"c1\"># initialize a client.</span>\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">blockchyp</span><span class=\"o\">.</span><span class=\"n\">Client</span><span class=\"p\">(</span>\n    <span class=\"n\">api_key</span><span class=\"o\">=</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s2\">\"BC_API_KEY\"</span><span class=\"p\">],</span>\n    <span class=\"n\">bearer_token</span><span class=\"o\">=</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s2\">\"BC_BEARER_TOKEN\"</span><span class=\"p\">],</span>\n    <span class=\"n\">signing_key</span><span class=\"o\">=</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s2\">\"BC_SIGNING_KEY\"</span><span class=\"p\">],</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\"># populate request parameters.</span>\n<span class=\"n\">request</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">\"test\"</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"terminalName\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Test Terminal\"</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># run the transaction.</span>\n<span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">enroll</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Response: </span><span class=\"si\">%r</span><span class=\"s2\">\"</span> <span class=\"o\">%</span> <span class=\"n\">response</span><span class=\"p\">)</span>\n</pre>\n<h4>Void</h4>\n<p>Mistakes happen.  If a transaction is made by mistake, you can void it\nwith this API.  All that's needed is to pass in a Transaction ID and execute\nthe void before the original transaction's batch closes.</p>\n<p>Voids work with EBT and gift card transactions with no additional parameters.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">blockchyp</span>\n\n<span class=\"c1\"># initialize a client.</span>\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">blockchyp</span><span class=\"o\">.</span><span class=\"n\">Client</span><span class=\"p\">(</span>\n    <span class=\"n\">api_key</span><span class=\"o\">=</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s2\">\"BC_API_KEY\"</span><span class=\"p\">],</span>\n    <span class=\"n\">bearer_token</span><span class=\"o\">=</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s2\">\"BC_BEARER_TOKEN\"</span><span class=\"p\">],</span>\n    <span class=\"n\">signing_key</span><span class=\"o\">=</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s2\">\"BC_SIGNING_KEY\"</span><span class=\"p\">],</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\"># populate request parameters.</span>\n<span class=\"n\">request</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">\"test\"</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"transactionId\"</span><span class=\"p\">:</span> <span class=\"s2\">\"&lt;PREVIOUS TRANSACTION ID&gt;\"</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># run the transaction.</span>\n<span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">void</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Response: </span><span class=\"si\">%r</span><span class=\"s2\">\"</span> <span class=\"o\">%</span> <span class=\"n\">response</span><span class=\"p\">)</span>\n</pre>\n<h4>Time Out Reversal</h4>\n<p>Payment transactions require a stable network to function correctly and\nno network is stable all the time.  Time out reversals are a great line\nof defense against accidentally double charging consumers when payments\nare retried during shaky network conditions.</p>\n<p>We highly recommend developers use this API whenever a charge, preauth, or refund transaction times out.  If you don't receive a definitive response\nfrom BlockChyp, you can't be certain about whether or not the transaction went through.</p>\n<p>A best practice in this situation is to send a time out reversal request.  Time out reversals check for a transaction and void it if it exists.</p>\n<p>The only caveat is that developers must use the <code>transactionRef</code> property (<code>txRef</code> for the CLI) when executing charge, preauth, and refund transactions.</p>\n<p>The reason for this requirement is that if a system never receives a definitive\nresponse for a transaction, the system would never have received the BlockChyp\ngenerated Transaction ID.  We have to fallback to transaction ref to identify\na transaction.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">blockchyp</span>\n\n<span class=\"c1\"># initialize a client.</span>\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">blockchyp</span><span class=\"o\">.</span><span class=\"n\">Client</span><span class=\"p\">(</span>\n    <span class=\"n\">api_key</span><span class=\"o\">=</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s2\">\"BC_API_KEY\"</span><span class=\"p\">],</span>\n    <span class=\"n\">bearer_token</span><span class=\"o\">=</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s2\">\"BC_BEARER_TOKEN\"</span><span class=\"p\">],</span>\n    <span class=\"n\">signing_key</span><span class=\"o\">=</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s2\">\"BC_SIGNING_KEY\"</span><span class=\"p\">],</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\"># populate request parameters.</span>\n<span class=\"n\">request</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">\"transactionRef\"</span><span class=\"p\">:</span> <span class=\"s2\">\"&lt;LAST TRANSACTION REF&gt;\"</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># run the transaction.</span>\n<span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">reverse</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Response: </span><span class=\"si\">%r</span><span class=\"s2\">\"</span> <span class=\"o\">%</span> <span class=\"n\">response</span><span class=\"p\">)</span>\n</pre>\n<h4>Gift Card Activation</h4>\n<p>This API can be used to activate or add value to BlockChyp gift cards.\nJust pass in the terminal name and the amount to add to the card.\nOnce the customer swipes their card, the terminal will use keys\non the mag stripe to add value to the card.</p>\n<p>You don't need to handle a new gift card or a gift card recharge any\ndifferently.  The terminal firmware will figure out what to do on its\nown and also returns the new balance for the gift card.</p>\n<p>This is the part of the system where BlockChyp's blockchain DNA comes\nclosest to the surface.  The BlockChyp gift card system doesn't really\nuse gift card numbers.  This means they can't be stolen.</p>\n<p>BlockChyp identifies cards with an elliptic curve public key instead.\nGift card transactions are actually blocks signed with those keys.\nThis means there are no shared secrets sent over the network with\nBlockChyp gift cards.\nTo keep track of a BlockChyp gift card, hang on to the <strong>public key</strong> returned\nduring gift card activation.  That's the gift card's elliptic curve public key.</p>\n<p>We sometimes print numbers on our gift cards, but these are actually\ndecimal encoded hashes of a portion of the public key to make our gift\ncards seem <em>normal</em> to <em>normies</em>.  They can be used\nfor balance checks and play a lookup role in online gift card\nauthorization, but are of little use beyond that.</p>\n<p><strong>Voids and Reversals</strong></p>\n<p>Gift card activations can be voided and reversed just like any other\nBlockChyp transaction.  Use the Transaction ID or Transaction Ref\nto identify the gift activation transaction as you normally would for\nvoiding or reversing a conventional payment transaction.</p>\n<p><strong>Importing Gift Cards</strong></p>\n<p>BlockChyp does have the ability to import gift card liability from\nconventional gift card platforms.  Unfortunately, BlockChyp does not\nsupport activating cards on third party systems, but you can import\nyour outstanding gift cards and customerSearch can swipe them on the\nterminals just like BlockChyp's standard gift cards.</p>\n<p>No special coding is required to access this feature.  The gateway and\nterminal firmware handle everything for you.</p>\n<p><strong>Third Party Gift Card Networks</strong></p>\n<p>BlockChyp does not currently provide any native support for other gift card\nplatforms beyond importing gift card liability.  We do have a white listing system however that be used support your own custom gift card implementations.  We have a security review\nprocess before we allow a BIN range to be white listed, so contact <a href=\"mailto:support@blockchyp.com\">support@blockchyp.com</a> if you need to white list a BIN range.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">blockchyp</span>\n\n<span class=\"c1\"># initialize a client.</span>\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">blockchyp</span><span class=\"o\">.</span><span class=\"n\">Client</span><span class=\"p\">(</span>\n    <span class=\"n\">api_key</span><span class=\"o\">=</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s2\">\"BC_API_KEY\"</span><span class=\"p\">],</span>\n    <span class=\"n\">bearer_token</span><span class=\"o\">=</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s2\">\"BC_BEARER_TOKEN\"</span><span class=\"p\">],</span>\n    <span class=\"n\">signing_key</span><span class=\"o\">=</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s2\">\"BC_SIGNING_KEY\"</span><span class=\"p\">],</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\"># populate request parameters.</span>\n<span class=\"n\">request</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">\"test\"</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"terminalName\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Test Terminal\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"amount\"</span><span class=\"p\">:</span> <span class=\"s2\">\"50.00\"</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># run the transaction.</span>\n<span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">gift_activate</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Response: </span><span class=\"si\">%r</span><span class=\"s2\">\"</span> <span class=\"o\">%</span> <span class=\"n\">response</span><span class=\"p\">)</span>\n</pre>\n<h4>Balance</h4>\n<p>Checks a gift or EBT card balance.</p>\n<p><strong>Gift Card Balance Checks</strong></p>\n<p>For gift cards, just pass in a terminal name and the customer will be prompted\nto swipe a card on that terminal.  The remaining balance will be displayed\nbriefly on the terminal screen and the API response will include the gift card's public key and the remaining balance.</p>\n<p><strong>EBT Balance Checks</strong></p>\n<p>All EBT transactions require a PIN, so in order to check an EBT card balance,\nyou need to pass in the <code>ebt</code> flag just like you would for a normal EBT\ncharge transaction.  The customer will be prompted to swipe their card and\nenter a PIN code.  If everything checks out, the remaining balance on the card will be displayed on terminal for the customer and returned in the API.</p>\n<p><strong>Testing Gift Card Balance Checks</strong></p>\n<p>Test gift card balance checks works no differently than live gift cards.  You\nmust activate a test gift card first in order to test balance checks.  Test\ngift cards are real blockchain cards that live on our parallel test blockchain.</p>\n<p><strong>Testing EBT Gift Card Balance Checks</strong></p>\n<p>All test EBT transactions assume a starting balance of $100.00.  As a result,\ntest EBT balance checks always return a balance of $100.00.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">blockchyp</span>\n\n<span class=\"c1\"># initialize a client.</span>\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">blockchyp</span><span class=\"o\">.</span><span class=\"n\">Client</span><span class=\"p\">(</span>\n    <span class=\"n\">api_key</span><span class=\"o\">=</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s2\">\"BC_API_KEY\"</span><span class=\"p\">],</span>\n    <span class=\"n\">bearer_token</span><span class=\"o\">=</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s2\">\"BC_BEARER_TOKEN\"</span><span class=\"p\">],</span>\n    <span class=\"n\">signing_key</span><span class=\"o\">=</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s2\">\"BC_SIGNING_KEY\"</span><span class=\"p\">],</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\"># populate request parameters.</span>\n<span class=\"n\">request</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">\"test\"</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"terminalName\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Test Terminal\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"cardType\"</span><span class=\"p\">:</span> <span class=\"n\">blockchyp</span><span class=\"o\">.</span><span class=\"n\">CardType</span><span class=\"o\">.</span><span class=\"n\">EBT</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># run the transaction.</span>\n<span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">balance</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Response: </span><span class=\"si\">%r</span><span class=\"s2\">\"</span> <span class=\"o\">%</span> <span class=\"n\">response</span><span class=\"p\">)</span>\n</pre>\n<h4>Close Batch</h4>\n<p>This API will close the merchant's batch, if it's currently open.</p>\n<p>By default, merchant batches will close automatically at 3 AM in their\nlocal time zone.  The automatic batch closure time can be changed\nin the Merchant Profile or disabled completely.</p>\n<p>If automatic batch closure is disabled, you'll need to use this API to\nclose the batch manually.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">blockchyp</span>\n\n<span class=\"c1\"># initialize a client.</span>\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">blockchyp</span><span class=\"o\">.</span><span class=\"n\">Client</span><span class=\"p\">(</span>\n    <span class=\"n\">api_key</span><span class=\"o\">=</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s2\">\"BC_API_KEY\"</span><span class=\"p\">],</span>\n    <span class=\"n\">bearer_token</span><span class=\"o\">=</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s2\">\"BC_BEARER_TOKEN\"</span><span class=\"p\">],</span>\n    <span class=\"n\">signing_key</span><span class=\"o\">=</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s2\">\"BC_SIGNING_KEY\"</span><span class=\"p\">],</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\"># populate request parameters.</span>\n<span class=\"n\">request</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">\"test\"</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># run the transaction.</span>\n<span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">close_batch</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Response: </span><span class=\"si\">%r</span><span class=\"s2\">\"</span> <span class=\"o\">%</span> <span class=\"n\">response</span><span class=\"p\">)</span>\n</pre>\n<h4>Send Payment Link</h4>\n<p>This API allows you to send an invoice to a customer and capture payment\nvia a BlockChyp hosted payment page.</p>\n<p>If you set the <code>autoSend</code> flag, BlockChyp will send a basic invoice email\nto the customer for you that includes the payment link.  If you'd rather have\nmore control over the look of the email message, you can omit the <code>autoSend</code>\nflag and send the customer email yourself.</p>\n<p>There are a lot of optional parameters for this API, but at a minimum\nyou'll need to pass in a total, customer name, and email address. (Unless\nyou use the <code>cashier</code> flag.)</p>\n<p><strong>Customer Info</strong></p>\n<p>Unless you're using the <code>cashier</code> flag, you must specify a customer, either by\ncreating a new customer record inline or by passing in an existing Customer ID or Customer Ref.</p>\n<p><strong>Line Item Level Data</strong></p>\n<p>It's not strictly required, but we strongly recommend sending line item level\ndetail with every request.  It will make the invoice look a little more complete\nand the data format for line item level data is the exact same format used\nfor terminal line item display, so the same code can be used to support both areas.</p>\n<p><strong>Descriptions</strong></p>\n<p>You can also provide a free form description or message that's displayed near\nthe bottom of the invoice.  Usually this is some kind of thank you note\nor instructions.</p>\n<p><strong>Terms and Conditions</strong></p>\n<p>You can include long form contract language with a request and capture\nterms and conditions acceptance at the same time payment is captured.</p>\n<p>The interface is identical to that used for the terminal based terms and\nconditions API in that you can pass in content directly via <code>tcContent</code> or via\na preconfigured template via <code>tcAlias</code>.  The terms and conditions log will also be updated when\nterms and conditions acceptance is incorporated into a send link request.</p>\n<p><strong>Auto Send</strong></p>\n<p>By default, BlockChyp does not send the email notification automatically.  This is\nreally just a safeguard to prevent real emails from going out when you may not expect it.\nIf you want BlockChyp to send the email for you, just add the <code>autoSend</code> flag with\nall requests.</p>\n<p><strong>Cashier Facing Card Entry</strong></p>\n<p>BlockChyp can be used to generate internal/cashier facing links as well.  This is\ndesigned for situations where you might need to take a phone order and you don't\nhave a terminal.</p>\n<p>If you pass in the <code>cashier</code> flag, no email will be sent and you'll be be able to\nload the link in a browser or iframe for payment entry.  When the <code>cashier</code> flag\nis used, the <code>autoSend</code> flag will be ignored.</p>\n<p><strong>Payment Notifications</strong></p>\n<p>When a customer successfully submits payment, the merchant will receive an email\nnotifying them that the payment was received.</p>\n<p><strong>Real Time Callback Notifications</strong></p>\n<p>Email notifications are fine, but you may also want your system to be informed\nimmediately whenever a payment event occurs.  By using the optional <code>callbackUrl</code> request\nproperty, you can specify a URL to which the Authorization Response will be posted\nevery time the user submits a payment, whether approved or otherwise.</p>\n<p>The response will be sent as a JSON encoded POST request and will be the exact\nsame format as all BlockChyp charge and preauth transaction responses.</p>\n<p><strong>Status Polling</strong></p>\n<p>If real time callbacks aren't practical or necesary in your environment, you can\nalways use the Transaction Status API described below.</p>\n<p>A common use case for the send link API with status polling is curbside pickup.\nYou could have your system check the Transaction Status when a customer arrives to\nensure it's been paid without necessarily needing to create background threads\nto constantly poll for status updates.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">blockchyp</span>\n\n<span class=\"c1\"># initialize a client.</span>\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">blockchyp</span><span class=\"o\">.</span><span class=\"n\">Client</span><span class=\"p\">(</span>\n    <span class=\"n\">api_key</span><span class=\"o\">=</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s2\">\"BC_API_KEY\"</span><span class=\"p\">],</span>\n    <span class=\"n\">bearer_token</span><span class=\"o\">=</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s2\">\"BC_BEARER_TOKEN\"</span><span class=\"p\">],</span>\n    <span class=\"n\">signing_key</span><span class=\"o\">=</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s2\">\"BC_SIGNING_KEY\"</span><span class=\"p\">],</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\"># populate request parameters.</span>\n<span class=\"n\">request</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">\"amount\"</span><span class=\"p\">:</span> <span class=\"s2\">\"199.99\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"description\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Widget\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"subject\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Widget invoice\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"transaction\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s2\">\"subtotal\"</span><span class=\"p\">:</span> <span class=\"s2\">\"195.00\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"tax\"</span><span class=\"p\">:</span> <span class=\"s2\">\"4.99\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"total\"</span><span class=\"p\">:</span> <span class=\"s2\">\"199.99\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"items\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n            <span class=\"p\">{</span>\n                <span class=\"s2\">\"description\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Widget\"</span><span class=\"p\">,</span>\n                <span class=\"s2\">\"price\"</span><span class=\"p\">:</span> <span class=\"s2\">\"195.00\"</span><span class=\"p\">,</span>\n                <span class=\"s2\">\"quantity\"</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n            <span class=\"p\">},</span>\n        <span class=\"p\">],</span>\n    <span class=\"p\">},</span>\n    <span class=\"s2\">\"autoSend\"</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"customer\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s2\">\"customerRef\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Customer reference string\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"firstName\"</span><span class=\"p\">:</span> <span class=\"s2\">\"FirstName\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"lastName\"</span><span class=\"p\">:</span> <span class=\"s2\">\"LastName\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"companyName\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Company Name\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"emailAddress\"</span><span class=\"p\">:</span> <span class=\"s2\">\"support@blockchyp.com\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"smsNumber\"</span><span class=\"p\">:</span> <span class=\"s2\">\"(123) 123-1231\"</span><span class=\"p\">,</span>\n    <span class=\"p\">},</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># run the transaction.</span>\n<span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">send_payment_link</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Response: </span><span class=\"si\">%r</span><span class=\"s2\">\"</span> <span class=\"o\">%</span> <span class=\"n\">response</span><span class=\"p\">)</span>\n</pre>\n<h4>Transaction Status</h4>\n<p>Returns the current status for any transaction.  You can lookup a transaction\nby its BlockChyp assigned Transaction ID or your own Transaction Ref.</p>\n<p>You should alway use globally unique Transaction Ref values, but in the event\nthat you duplicate Transaction Refs, the most recent transaction matching your\nTransaction Ref is returned.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">blockchyp</span>\n\n<span class=\"c1\"># initialize a client.</span>\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">blockchyp</span><span class=\"o\">.</span><span class=\"n\">Client</span><span class=\"p\">(</span>\n    <span class=\"n\">api_key</span><span class=\"o\">=</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s2\">\"BC_API_KEY\"</span><span class=\"p\">],</span>\n    <span class=\"n\">bearer_token</span><span class=\"o\">=</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s2\">\"BC_BEARER_TOKEN\"</span><span class=\"p\">],</span>\n    <span class=\"n\">signing_key</span><span class=\"o\">=</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s2\">\"BC_SIGNING_KEY\"</span><span class=\"p\">],</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\"># populate request parameters.</span>\n<span class=\"n\">request</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">\"transactionId\"</span><span class=\"p\">:</span> <span class=\"s2\">\"ID of transaction to retrieve\"</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># run the transaction.</span>\n<span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">transaction_status</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Response: </span><span class=\"si\">%r</span><span class=\"s2\">\"</span> <span class=\"o\">%</span> <span class=\"n\">response</span><span class=\"p\">)</span>\n</pre>\n<h4>Terminal Clear</h4>\n<p>This API interrupts whatever a terminal may be doing and returns it to the\nidle state.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">blockchyp</span>\n\n<span class=\"c1\"># initialize a client.</span>\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">blockchyp</span><span class=\"o\">.</span><span class=\"n\">Client</span><span class=\"p\">(</span>\n    <span class=\"n\">api_key</span><span class=\"o\">=</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s2\">\"BC_API_KEY\"</span><span class=\"p\">],</span>\n    <span class=\"n\">bearer_token</span><span class=\"o\">=</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s2\">\"BC_BEARER_TOKEN\"</span><span class=\"p\">],</span>\n    <span class=\"n\">signing_key</span><span class=\"o\">=</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s2\">\"BC_SIGNING_KEY\"</span><span class=\"p\">],</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\"># populate request parameters.</span>\n<span class=\"n\">request</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">\"test\"</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"terminalName\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Test Terminal\"</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># run the transaction.</span>\n<span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">clear</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Response: </span><span class=\"si\">%r</span><span class=\"s2\">\"</span> <span class=\"o\">%</span> <span class=\"n\">response</span><span class=\"p\">)</span>\n</pre>\n<h4>Terminal Status</h4>\n<p>Returns the current status of a payment terminal.  This is typically used\nas a way to determine if the terminal is busy before sending a new transaction.</p>\n<p>If the terminal is busy, <code>idle</code> will be false and the <code>status</code> field will return\na short string indicating the transaction type currently in progress.  The system\nwill also return the timestamp of the last status change in the <code>since</code> field.</p>\n<p>If the system is running a payment transaction and you wisely passed in a\nTransaction Ref, this API will also return the Transaction Ref of the in progress\ntransaction in the response.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">blockchyp</span>\n\n<span class=\"c1\"># initialize a client.</span>\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">blockchyp</span><span class=\"o\">.</span><span class=\"n\">Client</span><span class=\"p\">(</span>\n    <span class=\"n\">api_key</span><span class=\"o\">=</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s2\">\"BC_API_KEY\"</span><span class=\"p\">],</span>\n    <span class=\"n\">bearer_token</span><span class=\"o\">=</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s2\">\"BC_BEARER_TOKEN\"</span><span class=\"p\">],</span>\n    <span class=\"n\">signing_key</span><span class=\"o\">=</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s2\">\"BC_SIGNING_KEY\"</span><span class=\"p\">],</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\"># populate request parameters.</span>\n<span class=\"n\">request</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">\"terminalName\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Test Terminal\"</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># run the transaction.</span>\n<span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">terminal_status</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Response: </span><span class=\"si\">%r</span><span class=\"s2\">\"</span> <span class=\"o\">%</span> <span class=\"n\">response</span><span class=\"p\">)</span>\n</pre>\n<h4>Terms &amp; Conditions Capture</h4>\n<p>This API allows you to prompt a customer to accept a legal agreement on the terminal\nand optionally capture their signature.</p>\n<p>Content for the agreement can be specified in two ways.  You can reference a\npreviously configured T&amp;C template or pass in the full agreement text with every request.</p>\n<p><strong>Using Templates</strong></p>\n<p>If your application doesn't keep track of agreements you can leverage BlockChyp's\ntemplate system.  You can create any number of T&amp;C Templates in the merchant dashboard\nand pass in the <code>tcAlias</code> flag to specify which one to display.</p>\n<p><strong>Raw Content</strong></p>\n<p>If your system keeps track of the agreement language or executes complicated merging\nand rendering logic, you can bypass our template system and pass in the full text with\nevery transaction.  Use the <code>tcName</code> to pass in the agreement name and <code>tcContent</code> to\npass in the contract text.  Note that only plain text is supported.</p>\n<p><strong>Bypassing Signatures</strong></p>\n<p>Signature images are captured by default.  If for some reason this doesn't fit your\nuse case and you'd like to capture acceptance without actually capturing a signature image set\nthe <code>disableSignature</code> flag in the request.</p>\n<p><strong>Terms &amp; Conditions Log</strong></p>\n<p>Every time a user accepts an agreement on the terminal the signature image (if captured),\nwill be uploaded to the gateway and added to the log along with the full text of the\nagreement.  This preserves the historical record in the event that standard agreements\nor templates change over time.</p>\n<p><strong>Associating Agreements with Transactions</strong></p>\n<p>To associate a Terms &amp; Conditions log entry with a transaction, just pass in the\nTransaction ID or Transaction Ref for the associated transaction.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">blockchyp</span>\n\n<span class=\"c1\"># initialize a client.</span>\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">blockchyp</span><span class=\"o\">.</span><span class=\"n\">Client</span><span class=\"p\">(</span>\n    <span class=\"n\">api_key</span><span class=\"o\">=</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s2\">\"BC_API_KEY\"</span><span class=\"p\">],</span>\n    <span class=\"n\">bearer_token</span><span class=\"o\">=</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s2\">\"BC_BEARER_TOKEN\"</span><span class=\"p\">],</span>\n    <span class=\"n\">signing_key</span><span class=\"o\">=</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s2\">\"BC_SIGNING_KEY\"</span><span class=\"p\">],</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\"># populate request parameters.</span>\n<span class=\"n\">request</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">\"test\"</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"terminalName\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Test Terminal\"</span><span class=\"p\">,</span>\n\n    <span class=\"c1\"># Alias for a Terms and Conditions template configured in the BlockChyp</span>\n    <span class=\"c1\"># dashboard.</span>\n    <span class=\"s2\">\"tcAlias\"</span><span class=\"p\">:</span> <span class=\"s2\">\"hippa\"</span><span class=\"p\">,</span>\n\n    <span class=\"c1\"># Name of the contract or document if not using an alias.</span>\n    <span class=\"s2\">\"tcName\"</span><span class=\"p\">:</span> <span class=\"s2\">\"HIPPA Disclosure\"</span><span class=\"p\">,</span>\n\n    <span class=\"c1\"># Full text of the contract or disclosure if not using an alias.</span>\n    <span class=\"s2\">\"tcContent\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Full contract text\"</span><span class=\"p\">,</span>\n\n    <span class=\"c1\"># File format for the signature image.</span>\n    <span class=\"s2\">\"sigFormat\"</span><span class=\"p\">:</span> <span class=\"n\">blockchyp</span><span class=\"o\">.</span><span class=\"n\">SignatureFormat</span><span class=\"o\">.</span><span class=\"n\">PNG</span><span class=\"p\">,</span>\n\n    <span class=\"c1\"># Width of the signature image in pixels.</span>\n    <span class=\"s2\">\"sigWidth\"</span><span class=\"p\">:</span> <span class=\"mi\">200</span><span class=\"p\">,</span>\n\n    <span class=\"c1\"># Whether or not a signature is required. Defaults to true.</span>\n    <span class=\"s2\">\"sigRequired\"</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># run the transaction.</span>\n<span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">terms_and_conditions</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Response: </span><span class=\"si\">%r</span><span class=\"s2\">\"</span> <span class=\"o\">%</span> <span class=\"n\">response</span><span class=\"p\">)</span>\n</pre>\n<h4>Capture Signature</h4>\n<p>This endpoint captures a written signature from the terminal and returns the\nimage.</p>\n<p>Unlike the Terms &amp; Conditions API, this endpoint performs basic signature\ncapture with no agreement display or signature archival.</p>\n<p>Under the hood, signatures are captured in a proprietary vector format and\nmust be converted to a common raster format in order to be useful to most\napplications.  At a minimum, you must specify an image format using the\n<code>sigFormat</code> parameter.  As of this writing JPG and PNG are supported.</p>\n<p>By default, images are returned in the JSON response as hex encoded binary.\nYou can redirect the binary image output to a file using the <code>sigFile</code>\nparameter.</p>\n<p>You can also scale the output image to your preferred width by\npassing in a <code>sigWidth</code> parameter.  The image will be scaled to that\nwidth, preserving the aspect ratio of the original image.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">blockchyp</span>\n\n<span class=\"c1\"># initialize a client.</span>\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">blockchyp</span><span class=\"o\">.</span><span class=\"n\">Client</span><span class=\"p\">(</span>\n    <span class=\"n\">api_key</span><span class=\"o\">=</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s2\">\"BC_API_KEY\"</span><span class=\"p\">],</span>\n    <span class=\"n\">bearer_token</span><span class=\"o\">=</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s2\">\"BC_BEARER_TOKEN\"</span><span class=\"p\">],</span>\n    <span class=\"n\">signing_key</span><span class=\"o\">=</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s2\">\"BC_SIGNING_KEY\"</span><span class=\"p\">],</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\"># populate request parameters.</span>\n<span class=\"n\">request</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">\"terminalName\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Test Terminal\"</span><span class=\"p\">,</span>\n\n    <span class=\"c1\"># File format for the signature image.</span>\n    <span class=\"s2\">\"sigFormat\"</span><span class=\"p\">:</span> <span class=\"n\">blockchyp</span><span class=\"o\">.</span><span class=\"n\">SignatureFormat</span><span class=\"o\">.</span><span class=\"n\">PNG</span><span class=\"p\">,</span>\n\n    <span class=\"c1\"># Width of the signature image in pixels.</span>\n    <span class=\"s2\">\"sigWidth\"</span><span class=\"p\">:</span> <span class=\"mi\">200</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># run the transaction.</span>\n<span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">capture_signature</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Response: </span><span class=\"si\">%r</span><span class=\"s2\">\"</span> <span class=\"o\">%</span> <span class=\"n\">response</span><span class=\"p\">)</span>\n</pre>\n<h4>New Transaction Display</h4>\n<p>Sends totals and line item level data to the terminal.</p>\n<p>At a minimum, you should send total information as part of a display request,\nincluding <code>total</code>, <code>tax</code>, and <code>subtotal</code>.</p>\n<p>You can also send line item level data and each line item can have a <code>description</code>,\n<code>qty</code>, <code>price</code>, and <code>extended</code> price.</p>\n<p>If you fail to send an extended price, BlockChyp will multiply the <code>qty</code> by the\n<code>price</code>, but we strongly recommend you precalculate all the fields yourself\nto ensure consistency.  Your treatment of floating-point multiplication and rounding\nmay differ slightly from BlockChyp's, for example.</p>\n<p><strong>Discounts</strong></p>\n<p>You have the option to show discounts on the display as individual line items\nwith negative values or you can associate discounts with a specific line item.\nYou can apply any number of discounts to an individual line item with a description\nand amount.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">blockchyp</span>\n\n<span class=\"c1\"># initialize a client.</span>\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">blockchyp</span><span class=\"o\">.</span><span class=\"n\">Client</span><span class=\"p\">(</span>\n    <span class=\"n\">api_key</span><span class=\"o\">=</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s2\">\"BC_API_KEY\"</span><span class=\"p\">],</span>\n    <span class=\"n\">bearer_token</span><span class=\"o\">=</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s2\">\"BC_BEARER_TOKEN\"</span><span class=\"p\">],</span>\n    <span class=\"n\">signing_key</span><span class=\"o\">=</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s2\">\"BC_SIGNING_KEY\"</span><span class=\"p\">],</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\"># populate request parameters.</span>\n<span class=\"n\">request</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">\"test\"</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"terminalName\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Test Terminal\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"transaction\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s2\">\"subtotal\"</span><span class=\"p\">:</span> <span class=\"s2\">\"60.00\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"tax\"</span><span class=\"p\">:</span> <span class=\"s2\">\"5.00\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"total\"</span><span class=\"p\">:</span> <span class=\"s2\">\"65.00\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"items\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n            <span class=\"p\">{</span>\n                <span class=\"s2\">\"description\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Leki Trekking Poles\"</span><span class=\"p\">,</span>\n                <span class=\"s2\">\"price\"</span><span class=\"p\">:</span> <span class=\"s2\">\"35.00\"</span><span class=\"p\">,</span>\n                <span class=\"s2\">\"quantity\"</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span>\n                <span class=\"s2\">\"extended\"</span><span class=\"p\">:</span> <span class=\"s2\">\"70.00\"</span><span class=\"p\">,</span>\n                <span class=\"s2\">\"discounts\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n                    <span class=\"p\">{</span>\n                        <span class=\"s2\">\"description\"</span><span class=\"p\">:</span> <span class=\"s2\">\"memberDiscount\"</span><span class=\"p\">,</span>\n                        <span class=\"s2\">\"amount\"</span><span class=\"p\">:</span> <span class=\"s2\">\"10.00\"</span><span class=\"p\">,</span>\n                    <span class=\"p\">},</span>\n                <span class=\"p\">],</span>\n            <span class=\"p\">},</span>\n        <span class=\"p\">],</span>\n    <span class=\"p\">},</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># run the transaction.</span>\n<span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">new_transaction_display</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Response: </span><span class=\"si\">%r</span><span class=\"s2\">\"</span> <span class=\"o\">%</span> <span class=\"n\">response</span><span class=\"p\">)</span>\n</pre>\n<h4>Update Transaction Display</h4>\n<p>Similar to <em>New Transaction Display</em>, this variant allows developers to update\nline item level data currently being displayed on the terminal.</p>\n<p>This is designed for situations where you want to update the terminal display as\nitems are scanned.  This variant means you only have to send information to the\nterminal that's changed, which usually means the new line item and updated totals.</p>\n<p>If the terminal is not in line item display mode and you invoke this endpoint,\nthe first invocation will behave like a <em>New Transaction Display</em> call.</p>\n<p>At a minimum, you should send total information as part of a display request,\nincluding <code>total</code>, <code>tax</code>, and <code>subtotal</code>.</p>\n<p>You can also send line item level data and each line item can have a <code>description</code>,\n<code>qty</code>, <code>price</code>, and <code>extended</code> price.</p>\n<p>If you fail to send an extended price, BlockChyp will multiply the <code>qty</code> by the\n<code>price</code>, but we strongly recommend you precalculate all the fields yourself\nto ensure consistency.  Your treatment of floating-point multiplication and rounding\nmay differ slightly from BlockChyp's, for example.</p>\n<p><strong>Discounts</strong></p>\n<p>You have the option to show discounts on the display as individual line items\nwith negative values or you can associate discounts with a specific line item.\nYou can apply any number of discounts to an individual line item with a description\nand amount.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">blockchyp</span>\n\n<span class=\"c1\"># initialize a client.</span>\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">blockchyp</span><span class=\"o\">.</span><span class=\"n\">Client</span><span class=\"p\">(</span>\n    <span class=\"n\">api_key</span><span class=\"o\">=</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s2\">\"BC_API_KEY\"</span><span class=\"p\">],</span>\n    <span class=\"n\">bearer_token</span><span class=\"o\">=</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s2\">\"BC_BEARER_TOKEN\"</span><span class=\"p\">],</span>\n    <span class=\"n\">signing_key</span><span class=\"o\">=</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s2\">\"BC_SIGNING_KEY\"</span><span class=\"p\">],</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\"># populate request parameters.</span>\n<span class=\"n\">request</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">\"test\"</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"terminalName\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Test Terminal\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"transaction\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s2\">\"subtotal\"</span><span class=\"p\">:</span> <span class=\"s2\">\"60.00\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"tax\"</span><span class=\"p\">:</span> <span class=\"s2\">\"5.00\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"total\"</span><span class=\"p\">:</span> <span class=\"s2\">\"65.00\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"items\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n            <span class=\"p\">{</span>\n                <span class=\"s2\">\"description\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Leki Trekking Poles\"</span><span class=\"p\">,</span>\n                <span class=\"s2\">\"price\"</span><span class=\"p\">:</span> <span class=\"s2\">\"35.00\"</span><span class=\"p\">,</span>\n                <span class=\"s2\">\"quantity\"</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span>\n                <span class=\"s2\">\"extended\"</span><span class=\"p\">:</span> <span class=\"s2\">\"70.00\"</span><span class=\"p\">,</span>\n                <span class=\"s2\">\"discounts\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n                    <span class=\"p\">{</span>\n                        <span class=\"s2\">\"description\"</span><span class=\"p\">:</span> <span class=\"s2\">\"memberDiscount\"</span><span class=\"p\">,</span>\n                        <span class=\"s2\">\"amount\"</span><span class=\"p\">:</span> <span class=\"s2\">\"10.00\"</span><span class=\"p\">,</span>\n                    <span class=\"p\">},</span>\n                <span class=\"p\">],</span>\n            <span class=\"p\">},</span>\n        <span class=\"p\">],</span>\n    <span class=\"p\">},</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># run the transaction.</span>\n<span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">update_transaction_display</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Response: </span><span class=\"si\">%r</span><span class=\"s2\">\"</span> <span class=\"o\">%</span> <span class=\"n\">response</span><span class=\"p\">)</span>\n</pre>\n<h4>Display Message</h4>\n<p>Displays a message on the payment terminal.</p>\n<p>Just specify the target terminal and the message using the <code>message</code> parameter.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">blockchyp</span>\n\n<span class=\"c1\"># initialize a client.</span>\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">blockchyp</span><span class=\"o\">.</span><span class=\"n\">Client</span><span class=\"p\">(</span>\n    <span class=\"n\">api_key</span><span class=\"o\">=</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s2\">\"BC_API_KEY\"</span><span class=\"p\">],</span>\n    <span class=\"n\">bearer_token</span><span class=\"o\">=</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s2\">\"BC_BEARER_TOKEN\"</span><span class=\"p\">],</span>\n    <span class=\"n\">signing_key</span><span class=\"o\">=</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s2\">\"BC_SIGNING_KEY\"</span><span class=\"p\">],</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\"># populate request parameters.</span>\n<span class=\"n\">request</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">\"test\"</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"terminalName\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Test Terminal\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"message\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Thank you for your business.\"</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># run the transaction.</span>\n<span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">message</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Response: </span><span class=\"si\">%r</span><span class=\"s2\">\"</span> <span class=\"o\">%</span> <span class=\"n\">response</span><span class=\"p\">)</span>\n</pre>\n<h4>Boolean Prompt</h4>\n<p>Prompts the customer to answer a yes or no question.</p>\n<p>You can specify the question or prompt with the <code>prompt</code> parameter and\nthe response is returned in the <code>response</code> field.</p>\n<p>This can be used for a number of use cases including starting a loyalty enrollment\nworkflow or customer facing suggestive selling prompts.</p>\n<p><strong>Custom Captions</strong></p>\n<p>You can optionally override the \"YES\" and \"NO\" button captions by\nusing the <code>yesCaption</code> and <code>noCaption</code> request parameters.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">blockchyp</span>\n\n<span class=\"c1\"># initialize a client.</span>\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">blockchyp</span><span class=\"o\">.</span><span class=\"n\">Client</span><span class=\"p\">(</span>\n    <span class=\"n\">api_key</span><span class=\"o\">=</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s2\">\"BC_API_KEY\"</span><span class=\"p\">],</span>\n    <span class=\"n\">bearer_token</span><span class=\"o\">=</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s2\">\"BC_BEARER_TOKEN\"</span><span class=\"p\">],</span>\n    <span class=\"n\">signing_key</span><span class=\"o\">=</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s2\">\"BC_SIGNING_KEY\"</span><span class=\"p\">],</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\"># populate request parameters.</span>\n<span class=\"n\">request</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">\"test\"</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"terminalName\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Test Terminal\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"prompt\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Would you like to become a member?\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"yesCaption\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Yes\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"noCaption\"</span><span class=\"p\">:</span> <span class=\"s2\">\"No\"</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># run the transaction.</span>\n<span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">boolean_prompt</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Response: </span><span class=\"si\">%r</span><span class=\"s2\">\"</span> <span class=\"o\">%</span> <span class=\"n\">response</span><span class=\"p\">)</span>\n</pre>\n<h4>Text Prompt</h4>\n<p>Prompts the customer to enter numeric or alphanumeric data.</p>\n<p>Due to PCI rules, free form prompts are not permitted when the response\ncould be any valid string.  The reason for this is that a malicious\ndeveloper (not you, of course) could use text prompts to ask the customer to\ninput a card number or PIN code.</p>\n<p>This means that instead of providing a prompt, you provide a <code>promptType</code> instead.</p>\n<p>The prompt types currently supported are listed below:</p>\n<ul>\n<li><strong>phone</strong>: Captures a phone number.</li>\n<li><strong>email</strong>: Captures an email address.</li>\n<li><strong>first-name</strong>: Captures a first name.</li>\n<li><strong>last-name</strong>: Captures a last name.</li>\n<li><strong>customer-number</strong>: Captures a customer number.</li>\n<li><strong>rewards-number</strong>: Captures a rewards number.</li>\n</ul>\n<p>You can specify the prompt with the <code>promptType</code> parameter and\nthe response is returned in the <code>response</code> field.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">blockchyp</span>\n\n<span class=\"c1\"># initialize a client.</span>\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">blockchyp</span><span class=\"o\">.</span><span class=\"n\">Client</span><span class=\"p\">(</span>\n    <span class=\"n\">api_key</span><span class=\"o\">=</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s2\">\"BC_API_KEY\"</span><span class=\"p\">],</span>\n    <span class=\"n\">bearer_token</span><span class=\"o\">=</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s2\">\"BC_BEARER_TOKEN\"</span><span class=\"p\">],</span>\n    <span class=\"n\">signing_key</span><span class=\"o\">=</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s2\">\"BC_SIGNING_KEY\"</span><span class=\"p\">],</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\"># populate request parameters.</span>\n<span class=\"n\">request</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">\"test\"</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"terminalName\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Test Terminal\"</span><span class=\"p\">,</span>\n\n    <span class=\"c1\"># Type of prompt. Can be 'email', 'phone', 'customer-number', or</span>\n    <span class=\"c1\"># 'rewards-number'.</span>\n    <span class=\"s2\">\"promptType\"</span><span class=\"p\">:</span> <span class=\"n\">blockchyp</span><span class=\"o\">.</span><span class=\"n\">PromptType</span><span class=\"o\">.</span><span class=\"n\">EMAIL</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># run the transaction.</span>\n<span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">text_prompt</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Response: </span><span class=\"si\">%r</span><span class=\"s2\">\"</span> <span class=\"o\">%</span> <span class=\"n\">response</span><span class=\"p\">)</span>\n</pre>\n<h4>Update Customer</h4>\n<p>Adds or updates a customer record.</p>\n<p>If you pass in customer information including <code>firstName</code>, <code>lastName</code>, <code>email</code>,\n<code>email</code>, or <code>sms</code> without any Customer ID or Customer Ref, a new record will\nbe created.</p>\n<p>If you pass in <code>customerRef</code> and <code>customerId</code>, the customer record will be updated\nif it exists.</p>\n<p><strong>Customer Ref</strong></p>\n<p>The <code>customerRef</code> field is optional, but highly recommended as this allows you\nto use your own customer identifiers instead of storing BlockChyp's Customer IDs\nin your systems.</p>\n<p><strong>Creating Customer Records With Payment Transactions</strong></p>\n<p>If you have customer information available at the time a payment transaction is\nexecuted, you can pass all the same customer information directly into a payment transaction and\ncreate a customer record at the same time payment is captured.  The advantage of this approach is\nthat the customer's payment card is automatically associated with the customer record in a single step.\nIf the customer uses the payment card in the future, the customer data will automatically\nbe returned without needing to ask the customer to provide any additional information.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">blockchyp</span>\n\n<span class=\"c1\"># initialize a client.</span>\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">blockchyp</span><span class=\"o\">.</span><span class=\"n\">Client</span><span class=\"p\">(</span>\n    <span class=\"n\">api_key</span><span class=\"o\">=</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s2\">\"BC_API_KEY\"</span><span class=\"p\">],</span>\n    <span class=\"n\">bearer_token</span><span class=\"o\">=</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s2\">\"BC_BEARER_TOKEN\"</span><span class=\"p\">],</span>\n    <span class=\"n\">signing_key</span><span class=\"o\">=</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s2\">\"BC_SIGNING_KEY\"</span><span class=\"p\">],</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\"># populate request parameters.</span>\n<span class=\"n\">request</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">\"customer\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s2\">\"id\"</span><span class=\"p\">:</span> <span class=\"s2\">\"ID of the customer to update\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"customerRef\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Customer reference string\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"firstName\"</span><span class=\"p\">:</span> <span class=\"s2\">\"FirstName\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"lastName\"</span><span class=\"p\">:</span> <span class=\"s2\">\"LastName\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"companyName\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Company Name\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"emailAddress\"</span><span class=\"p\">:</span> <span class=\"s2\">\"support@blockchyp.com\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"smsNumber\"</span><span class=\"p\">:</span> <span class=\"s2\">\"(123) 123-1231\"</span><span class=\"p\">,</span>\n    <span class=\"p\">},</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># run the transaction.</span>\n<span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">update_customer</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Response: </span><span class=\"si\">%r</span><span class=\"s2\">\"</span> <span class=\"o\">%</span> <span class=\"n\">response</span><span class=\"p\">)</span>\n</pre>\n<h4>Retrieve Customer</h4>\n<p>Retrieves detailed information about a customer record, including saved payment\nmethods if available.</p>\n<p>Customers can be looked up by <code>customerId</code> or <code>customerRef</code>.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">blockchyp</span>\n\n<span class=\"c1\"># initialize a client.</span>\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">blockchyp</span><span class=\"o\">.</span><span class=\"n\">Client</span><span class=\"p\">(</span>\n    <span class=\"n\">api_key</span><span class=\"o\">=</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s2\">\"BC_API_KEY\"</span><span class=\"p\">],</span>\n    <span class=\"n\">bearer_token</span><span class=\"o\">=</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s2\">\"BC_BEARER_TOKEN\"</span><span class=\"p\">],</span>\n    <span class=\"n\">signing_key</span><span class=\"o\">=</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s2\">\"BC_SIGNING_KEY\"</span><span class=\"p\">],</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\"># populate request parameters.</span>\n<span class=\"n\">request</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">\"customerId\"</span><span class=\"p\">:</span> <span class=\"s2\">\"ID of the customer to retrieve\"</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># run the transaction.</span>\n<span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">customer</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Response: </span><span class=\"si\">%r</span><span class=\"s2\">\"</span> <span class=\"o\">%</span> <span class=\"n\">response</span><span class=\"p\">)</span>\n</pre>\n<h4>Search Customer</h4>\n<p>Searches the customer database and returns matching results.</p>\n<p>Use <code>query</code> to pass in a search string and the system will return all results whose\nfirst or last names contain the query string.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">blockchyp</span>\n\n<span class=\"c1\"># initialize a client.</span>\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">blockchyp</span><span class=\"o\">.</span><span class=\"n\">Client</span><span class=\"p\">(</span>\n    <span class=\"n\">api_key</span><span class=\"o\">=</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s2\">\"BC_API_KEY\"</span><span class=\"p\">],</span>\n    <span class=\"n\">bearer_token</span><span class=\"o\">=</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s2\">\"BC_BEARER_TOKEN\"</span><span class=\"p\">],</span>\n    <span class=\"n\">signing_key</span><span class=\"o\">=</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s2\">\"BC_SIGNING_KEY\"</span><span class=\"p\">],</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\"># populate request parameters.</span>\n<span class=\"n\">request</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">\"query\"</span><span class=\"p\">:</span> <span class=\"s2\">\"(123) 123-1234\"</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># run the transaction.</span>\n<span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">customer_search</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Response: </span><span class=\"si\">%r</span><span class=\"s2\">\"</span> <span class=\"o\">%</span> <span class=\"n\">response</span><span class=\"p\">)</span>\n</pre>\n<h4>Cash Discount</h4>\n<p>Calculates the surcharge, cash discount, and total amounts for cash transactions.</p>\n<p>If you're using BlockChyp's cash discounting features, you can use this endpoint\nto make sure the numbers and receipts for true cash transactions are consistent\nwith transactions processed by BlockChyp.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">blockchyp</span>\n\n<span class=\"c1\"># initialize a client.</span>\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">blockchyp</span><span class=\"o\">.</span><span class=\"n\">Client</span><span class=\"p\">(</span>\n    <span class=\"n\">api_key</span><span class=\"o\">=</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s2\">\"BC_API_KEY\"</span><span class=\"p\">],</span>\n    <span class=\"n\">bearer_token</span><span class=\"o\">=</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s2\">\"BC_BEARER_TOKEN\"</span><span class=\"p\">],</span>\n    <span class=\"n\">signing_key</span><span class=\"o\">=</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s2\">\"BC_SIGNING_KEY\"</span><span class=\"p\">],</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\"># populate request parameters.</span>\n<span class=\"n\">request</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">\"amount\"</span><span class=\"p\">:</span> <span class=\"s2\">\"100.00\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"cashDiscount\"</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"surcharge\"</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># run the transaction.</span>\n<span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">cash_discount</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Response: </span><span class=\"si\">%r</span><span class=\"s2\">\"</span> <span class=\"o\">%</span> <span class=\"n\">response</span><span class=\"p\">)</span>\n</pre>\n<h2>Running Integration Tests</h2>\n<p>If you'd like to run the integration tests, create a new file on your system\ncalled <code>sdk-itest-config.json</code> with the API credentials you'll be using as\nshown in the example below.</p>\n<pre><code>{\n \"gatewayHost\": \"https://api.blockchyp.com\",\n \"testGatewayHost\": \"https://test.blockchyp.com\",\n \"apiKey\": \"PZZNEFK7HFULCB3HTLA7HRQDJU\",\n \"bearerToken\": \"QUJCHIKNXOMSPGQ4QLT2UJX5DI\",\n \"signingKey\": \"f88a72d8bc0965f193abc7006bbffa240663c10e4d1dc3ba2f81e0ca10d359f5\"\n}\n</code></pre>\n<p>This file can be located in a few different places, but is usually located\nat <code>&lt;USER_HOME&gt;/.config/blockchyp/sdk-itest-config.json</code>. All BlockChyp SDKs\nuse the same configuration file.</p>\n<p>To run the integration test suite via <code>make</code>, type the following command:</p>\n<p><code>make integration</code></p>\n<h2>Contributions</h2>\n<p>BlockChyp welcomes contributions from the open source community, but bear in mind\nthat this repository has been generated by our internal SDK Generator tool. If\nwe choose to accept a PR or contribution, your code will be moved into our SDK\nGenerator project, which is a private repository.</p>\n<h2>License</h2>\n<p>Copyright BlockChyp, Inc., 2019</p>\n<p>Distributed under the terms of the <a href=\"https://github.com/blockchyp/blockchyp-python/blob/master/LICENSE\" rel=\"nofollow\">MIT</a> license, blockchyp-python is free and open source software.</p>\n<h2>Other SDKs</h2>\n<p>BlockChyp has officially supported SDKs for eight different development platforms and counting.\nHere's the full list with links to their GitHub repositories.</p>\n<p><a href=\"https://github.com/blockchyp/blockchyp-go\" rel=\"nofollow\">Go SDK</a></p>\n<p><a href=\"https://github.com/blockchyp/blockchyp-js\" rel=\"nofollow\">Node.js/JavaScript SDK</a></p>\n<p><a href=\"https://github.com/blockchyp/blockchyp-java\" rel=\"nofollow\">Java SDK</a></p>\n<p><a href=\"https://github.com/blockchyp/blockchyp-csharp\" rel=\"nofollow\">.net/C# SDK</a></p>\n<p><a href=\"https://github.com/blockchyp/blockchyp-ruby\" rel=\"nofollow\">Ruby SDK</a></p>\n<p><a href=\"https://github.com/blockchyp/blockchyp-php\" rel=\"nofollow\">PHP SDK</a></p>\n<p><a href=\"https://github.com/blockchyp/blockchyp-python\" rel=\"nofollow\">Python SDK</a></p>\n<p><a href=\"https://github.com/blockchyp/blockchyp-ios\" rel=\"nofollow\">iOS (Objective-C/Swift) SDK</a></p>\n\n          </div>"}, "last_serial": 7192402, "releases": {"0.1.0a1.post1": [{"comment_text": "", "digests": {"md5": "2356b36e96e16b66362f1867f08b9e7a", "sha256": "31e4071a940016166fbd88a28e681a8359533c62be628040999b6f9daf030a8e"}, "downloads": -1, "filename": "blockchyp-0.1.0a1.post1.tar.gz", "has_sig": false, "md5_digest": "2356b36e96e16b66362f1867f08b9e7a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 33423, "upload_time": "2020-01-06T18:27:04", "upload_time_iso_8601": "2020-01-06T18:27:04.639533Z", "url": "https://files.pythonhosted.org/packages/9b/15/ca27141d7c0a64021f681319d47d4646414b58354ae03f2ca7b92607fd5b/blockchyp-0.1.0a1.post1.tar.gz", "yanked": false}], "2.0.0a2.post1": [{"comment_text": "", "digests": {"md5": "86cc8f178d4dbc5c3427ac34f0d4bc65", "sha256": "eb03ff88f895f34e6edca8c8cad9a6536249140745500a147bdbad5459811a4d"}, "downloads": -1, "filename": "blockchyp-2.0.0a2.post1.tar.gz", "has_sig": false, "md5_digest": "86cc8f178d4dbc5c3427ac34f0d4bc65", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 9674, "upload_time": "2020-01-06T23:09:47", "upload_time_iso_8601": "2020-01-06T23:09:47.081081Z", "url": "https://files.pythonhosted.org/packages/be/1d/06ec9b9a8f55f04032046a795f7c8be0f2bac1b22b29e55b9f9a9744c858/blockchyp-2.0.0a2.post1.tar.gz", "yanked": false}], "2.0.0a3.post1": [{"comment_text": "", "digests": {"md5": "6782a6bfad57e7e16c9d969613b2baf7", "sha256": "e4e78e56af8a66dadbb487acf7dd4e15491e04de748373772d40f9e66f302332"}, "downloads": -1, "filename": "blockchyp-2.0.0a3.post1.tar.gz", "has_sig": false, "md5_digest": "6782a6bfad57e7e16c9d969613b2baf7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 9671, "upload_time": "2020-01-06T23:20:59", "upload_time_iso_8601": "2020-01-06T23:20:59.076146Z", "url": "https://files.pythonhosted.org/packages/06/e9/8ba2f66c624828cad29e45bff141a002034fc3fa2e940f85d8182d288455/blockchyp-2.0.0a3.post1.tar.gz", "yanked": false}], "2.0.0a4.post1": [{"comment_text": "", "digests": {"md5": "55734b1f830bae676fca50f4bca191b2", "sha256": "7c927bbc7b32d338af59d0024896835788df6847927abf8507a4542994b1ece5"}, "downloads": -1, "filename": "blockchyp-2.0.0a4.post1.tar.gz", "has_sig": false, "md5_digest": "55734b1f830bae676fca50f4bca191b2", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 9670, "upload_time": "2020-01-06T23:27:28", "upload_time_iso_8601": "2020-01-06T23:27:28.302011Z", "url": "https://files.pythonhosted.org/packages/a4/23/9cd49fa79dfb4bf64385184521727dcd1ca4182b99bd45340c7092a5b597/blockchyp-2.0.0a4.post1.tar.gz", "yanked": false}], "2.0.0a5.post1": [{"comment_text": "", "digests": {"md5": "b49a43bac96ae330a2858c98fad98f58", "sha256": "ab13140cdc0d6c0fb7e85e3f9886215cf431c23da17fa4cc9a98cd6bad110ed9"}, "downloads": -1, "filename": "blockchyp-2.0.0a5.post1.tar.gz", "has_sig": false, "md5_digest": "b49a43bac96ae330a2858c98fad98f58", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 9677, "upload_time": "2020-01-07T17:46:56", "upload_time_iso_8601": "2020-01-07T17:46:56.254122Z", "url": "https://files.pythonhosted.org/packages/f7/f1/4e476fecee517464f9e1b7879ea4581d10d6935086aa29bbbd2a4fecb126/blockchyp-2.0.0a5.post1.tar.gz", "yanked": false}], "2.0.0a6.post1": [{"comment_text": "", "digests": {"md5": "798e801bfdb621faf353114738d5de9c", "sha256": "a555edd4de7a1eb29fdc1f6838041b39ffde0e5efc024317a5e78b09fab1f00d"}, "downloads": -1, "filename": "blockchyp-2.0.0a6.post1.tar.gz", "has_sig": false, "md5_digest": "798e801bfdb621faf353114738d5de9c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 9670, "upload_time": "2020-01-07T21:55:05", "upload_time_iso_8601": "2020-01-07T21:55:05.155386Z", "url": "https://files.pythonhosted.org/packages/90/d7/58722ea232ceb1951081e2e5898e0a47d7d344359c71c082d27760faca13/blockchyp-2.0.0a6.post1.tar.gz", "yanked": false}], "2.0.0a7.post1": [{"comment_text": "", "digests": {"md5": "3062a1b553c37d7db0c977c2548cd549", "sha256": "5db1b8a6ff5b5b12d761a111601020295dffd2ac7594f8a1043bad6927edef2f"}, "downloads": -1, "filename": "blockchyp-2.0.0a7.post1-py3-none-any.whl", "has_sig": false, "md5_digest": "3062a1b553c37d7db0c977c2548cd549", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 16671, "upload_time": "2020-01-08T00:12:06", "upload_time_iso_8601": "2020-01-08T00:12:06.161996Z", "url": "https://files.pythonhosted.org/packages/65/62/404e46813ee28062715c73eea239fbf0af2a65759104fb882eb2374d2b7c/blockchyp-2.0.0a7.post1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ed576a12e8ecc8932763b5821e1e03e4", "sha256": "5aff8dbda039fb8568044cd0c5ae851dbbeddf3b7f305833cc572e0cafa6a301"}, "downloads": -1, "filename": "blockchyp-2.0.0a7.post1.tar.gz", "has_sig": false, "md5_digest": "ed576a12e8ecc8932763b5821e1e03e4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 17926, "upload_time": "2020-01-08T00:12:07", "upload_time_iso_8601": "2020-01-08T00:12:07.795526Z", "url": "https://files.pythonhosted.org/packages/f7/3a/cb6e8bc12bcf8027005fbbce16609f93b591329b67886bd3cc38bc2c64b3/blockchyp-2.0.0a7.post1.tar.gz", "yanked": false}], "2.0.0rc1.post1": [{"comment_text": "", "digests": {"md5": "08ec3f0325bf45dda2ac1f5e5e15322c", "sha256": "8e131755ec36a3ae0437fb2a8989a032a4853375c16f129355e6ac7b7618e7e4"}, "downloads": -1, "filename": "blockchyp-2.0.0rc1.post1-py3-none-any.whl", "has_sig": false, "md5_digest": "08ec3f0325bf45dda2ac1f5e5e15322c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 16929, "upload_time": "2020-01-13T20:25:00", "upload_time_iso_8601": "2020-01-13T20:25:00.035096Z", "url": "https://files.pythonhosted.org/packages/34/dc/af82bee31ddbf3ae191c03831fd491135f4940024bb8214ad2bd0363827a/blockchyp-2.0.0rc1.post1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "903c706d8643393541ec15276b0aa71e", "sha256": "81c969c0db7dccde0b07b16dce65b8bd9c374a6aeae8b255c2901ca499402251"}, "downloads": -1, "filename": "blockchyp-2.0.0rc1.post1.tar.gz", "has_sig": false, "md5_digest": "903c706d8643393541ec15276b0aa71e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 18170, "upload_time": "2020-01-13T20:25:02", "upload_time_iso_8601": "2020-01-13T20:25:02.085094Z", "url": "https://files.pythonhosted.org/packages/55/d8/15695d800f3b0e686d68602422a6b28ac0fb61140a8c84140d778c421c9e/blockchyp-2.0.0rc1.post1.tar.gz", "yanked": false}], "2.0.0rc2.post1": [{"comment_text": "", "digests": {"md5": "6edbba2e2e2a0427cd5c4790d34d43b5", "sha256": "4714b5293e10f272c5054538884eb045d54b4ee16d3fa3d7554c8ba2a624f91b"}, "downloads": -1, "filename": "blockchyp-2.0.0rc2.post1-py3-none-any.whl", "has_sig": false, "md5_digest": "6edbba2e2e2a0427cd5c4790d34d43b5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 16930, "upload_time": "2020-01-13T20:39:32", "upload_time_iso_8601": "2020-01-13T20:39:32.430727Z", "url": "https://files.pythonhosted.org/packages/b9/61/4e2a8567ba2d2f299c1e7852a8dc70c05525f7c68427b8a08e3b08b7d4bd/blockchyp-2.0.0rc2.post1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5a6265f615fbdbd6b5cdf4e1ada768c9", "sha256": "d0596ba6158be4fda6edbcc508c8329776f5d703e6fdf0fe77c8efafcc120b8b"}, "downloads": -1, "filename": "blockchyp-2.0.0rc2.post1.tar.gz", "has_sig": false, "md5_digest": "5a6265f615fbdbd6b5cdf4e1ada768c9", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 18170, "upload_time": "2020-01-13T20:39:34", "upload_time_iso_8601": "2020-01-13T20:39:34.222427Z", "url": "https://files.pythonhosted.org/packages/e0/a6/b529b00e9af876989fcbaa42703ce333e0f9f29c2234240984698f3d4bb7/blockchyp-2.0.0rc2.post1.tar.gz", "yanked": false}], "2.0.1.post1": [{"comment_text": "", "digests": {"md5": "dbe998a185fe4ca85510a1d39acba2f7", "sha256": "f213e34209c6a4f6657c8db8c3e6a4578f2eda335054e7c1f9526f592332ee23"}, "downloads": -1, "filename": "blockchyp-2.0.1.post1-py3-none-any.whl", "has_sig": false, "md5_digest": "dbe998a185fe4ca85510a1d39acba2f7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 16959, "upload_time": "2020-02-07T23:28:42", "upload_time_iso_8601": "2020-02-07T23:28:42.670780Z", "url": "https://files.pythonhosted.org/packages/a9/4c/5229ad2cb90658d351f6b26f62d827b955fd5d79e84ecff707403b1f73da/blockchyp-2.0.1.post1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "28b2ead400f471241d3ad8176d29e319", "sha256": "3bd3f311d9ff71739a92862915d62e6c8d11488bdccda8c79af0e3ac0c010b86"}, "downloads": -1, "filename": "blockchyp-2.0.1.post1.tar.gz", "has_sig": false, "md5_digest": "28b2ead400f471241d3ad8176d29e319", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 18347, "upload_time": "2020-02-07T23:28:43", "upload_time_iso_8601": "2020-02-07T23:28:43.872339Z", "url": "https://files.pythonhosted.org/packages/f9/10/85f4f657027924c0813b7a0e6cafb27c6815f8c74e41d887f47fc9a2fa64/blockchyp-2.0.1.post1.tar.gz", "yanked": false}], "2.0.1rc1.post1": [{"comment_text": "", "digests": {"md5": "45c1b3605ad274c12158b083141546aa", "sha256": "5bb20661e2f48369ca772e99f6ba6e7b2584195bb55f6f6f77d83ceaf5665741"}, "downloads": -1, "filename": "blockchyp-2.0.1rc1.post1-py3-none-any.whl", "has_sig": false, "md5_digest": "45c1b3605ad274c12158b083141546aa", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 16999, "upload_time": "2020-01-17T00:53:04", "upload_time_iso_8601": "2020-01-17T00:53:04.614820Z", "url": "https://files.pythonhosted.org/packages/61/b9/c31a03c22abdd84548c95114c72a11ed294327440f5a91caec2a604cb668/blockchyp-2.0.1rc1.post1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3bed68171f2d3a2abc3f19eaff869095", "sha256": "93a1f0941a5bab8dfb810df98ed29be360810f4ba53fd37c42f46dc1bf4309a8"}, "downloads": -1, "filename": "blockchyp-2.0.1rc1.post1.tar.gz", "has_sig": false, "md5_digest": "3bed68171f2d3a2abc3f19eaff869095", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 18332, "upload_time": "2020-01-17T00:53:07", "upload_time_iso_8601": "2020-01-17T00:53:07.479696Z", "url": "https://files.pythonhosted.org/packages/7c/e2/822e2b0404843c29bfb3abdf4b1bbbf47193aedd39fb6a6bc66dbd3c8e42/blockchyp-2.0.1rc1.post1.tar.gz", "yanked": false}], "2.0.1rc2.post1": [{"comment_text": "", "digests": {"md5": "65a3b5e4faa1f0052b97b353bb6747af", "sha256": "094936570c567550fe89f9aeec1bd50d9555eca7c9748cda9a9452c652ba061f"}, "downloads": -1, "filename": "blockchyp-2.0.1rc2.post1-py3-none-any.whl", "has_sig": false, "md5_digest": "65a3b5e4faa1f0052b97b353bb6747af", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 17000, "upload_time": "2020-02-06T16:41:31", "upload_time_iso_8601": "2020-02-06T16:41:31.330549Z", "url": "https://files.pythonhosted.org/packages/f9/9f/05dd8c713df3963fc4d904fddba2ea205a4b1e3319873c89fc208f703e9a/blockchyp-2.0.1rc2.post1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f53cbf69ad9c4dc5acb55efb17ebcaca", "sha256": "cfcc7451b06c54040c1238d5d178df77ad86fc0f8396044ec241a323c5612169"}, "downloads": -1, "filename": "blockchyp-2.0.1rc2.post1.tar.gz", "has_sig": false, "md5_digest": "f53cbf69ad9c4dc5acb55efb17ebcaca", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 18330, "upload_time": "2020-02-06T16:41:32", "upload_time_iso_8601": "2020-02-06T16:41:32.817080Z", "url": "https://files.pythonhosted.org/packages/82/30/8db2324bbadd70b3babc4f7ec61fc06f63a2e5222222ee756ecdb8e9d4c0/blockchyp-2.0.1rc2.post1.tar.gz", "yanked": false}], "2.0.1rc3.post1": [{"comment_text": "", "digests": {"md5": "3dcb55b64910dd35c05cf8f4372f8169", "sha256": "3e3c92ecf1444af3cf590c53215db1c95789bca9e2caaaa49c94f81cab8b1937"}, "downloads": -1, "filename": "blockchyp-2.0.1rc3.post1-py3-none-any.whl", "has_sig": false, "md5_digest": "3dcb55b64910dd35c05cf8f4372f8169", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 17000, "upload_time": "2020-02-06T17:14:07", "upload_time_iso_8601": "2020-02-06T17:14:07.994258Z", "url": "https://files.pythonhosted.org/packages/f2/b5/f8a29881ec572de397afb91480bb048dcffacc7621da3d6d57b396d38d06/blockchyp-2.0.1rc3.post1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5fbf12e44883cfab706529bce288b886", "sha256": "d15dfadfffd6131002bdaa43a6e2c6ae304c2252a8d51057c278a00fa4cb444e"}, "downloads": -1, "filename": "blockchyp-2.0.1rc3.post1.tar.gz", "has_sig": false, "md5_digest": "5fbf12e44883cfab706529bce288b886", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 18330, "upload_time": "2020-02-06T17:14:09", "upload_time_iso_8601": "2020-02-06T17:14:09.887104Z", "url": "https://files.pythonhosted.org/packages/53/5d/211b8cfc695eb55f386acbb1109042acf594e34e1656aa1ec83d95a67f29/blockchyp-2.0.1rc3.post1.tar.gz", "yanked": false}], "2.0.1rc4.post1": [{"comment_text": "", "digests": {"md5": "1c28b9ae1e55d4f65c5c76084051a14a", "sha256": "eec0ba51edaeb79d4b3b658266ef2e321b9d56faf4a639e3f89d865fe1c84968"}, "downloads": -1, "filename": "blockchyp-2.0.1rc4.post1-py3-none-any.whl", "has_sig": false, "md5_digest": "1c28b9ae1e55d4f65c5c76084051a14a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 16998, "upload_time": "2020-02-06T18:04:20", "upload_time_iso_8601": "2020-02-06T18:04:20.307397Z", "url": "https://files.pythonhosted.org/packages/9e/a3/2a7bde9d03ed9e94f28bfe1a43b06733fd44d67817bf1dddbfc00fe7ae29/blockchyp-2.0.1rc4.post1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8a9e6d1b3b2dd896d962d495a5368f68", "sha256": "b23596361624f6629f4b5bd8a01ece5d361b0f62cb702f883ea64684cdb43e98"}, "downloads": -1, "filename": "blockchyp-2.0.1rc4.post1.tar.gz", "has_sig": false, "md5_digest": "8a9e6d1b3b2dd896d962d495a5368f68", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 18332, "upload_time": "2020-02-06T18:04:22", "upload_time_iso_8601": "2020-02-06T18:04:22.084758Z", "url": "https://files.pythonhosted.org/packages/2f/27/b53a2705bb758d689cffaae193a2991e6e93fb9e87f433aaea10461160a0/blockchyp-2.0.1rc4.post1.tar.gz", "yanked": false}], "2.0.1rc5.post1": [{"comment_text": "", "digests": {"md5": "29f13c1e6831c44fd77d61faf162b254", "sha256": "855b5cefe1c946bf65ca10fcd840a5c70bc5ef0be31fe63261d0b732b51db7db"}, "downloads": -1, "filename": "blockchyp-2.0.1rc5.post1-py3-none-any.whl", "has_sig": false, "md5_digest": "29f13c1e6831c44fd77d61faf162b254", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 17004, "upload_time": "2020-02-07T22:24:06", "upload_time_iso_8601": "2020-02-07T22:24:06.043866Z", "url": "https://files.pythonhosted.org/packages/c7/fb/90dc1cdd9ce2f671446a5e8f4206a928d25713e6c7a57f30a2427b6c1c9a/blockchyp-2.0.1rc5.post1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "926cbc59d087ee5b4f1cf49e42745227", "sha256": "3019f294cc8e11f998d20488f388e6578128ce7f6db84ab0bd41b541e839bc6c"}, "downloads": -1, "filename": "blockchyp-2.0.1rc5.post1.tar.gz", "has_sig": false, "md5_digest": "926cbc59d087ee5b4f1cf49e42745227", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 18351, "upload_time": "2020-02-07T22:24:07", "upload_time_iso_8601": "2020-02-07T22:24:07.873114Z", "url": "https://files.pythonhosted.org/packages/6b/cc/7375fc63ccc0a3b577c5ff3cd1aa31b5ff2ab57579f85f5375f4d958e42b/blockchyp-2.0.1rc5.post1.tar.gz", "yanked": false}], "2.0.1rc6.post1": [{"comment_text": "", "digests": {"md5": "09898b75cd01f00d3a6c102a18cab712", "sha256": "4343a39db936f4eb8ebe4d1e0dae5d1e821594983e3da50566613d04f07c5811"}, "downloads": -1, "filename": "blockchyp-2.0.1rc6.post1-py3-none-any.whl", "has_sig": false, "md5_digest": "09898b75cd01f00d3a6c102a18cab712", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 17003, "upload_time": "2020-02-07T22:42:29", "upload_time_iso_8601": "2020-02-07T22:42:29.973794Z", "url": "https://files.pythonhosted.org/packages/ca/d8/5de3e148bf78b7240bd60bba0513e04b08f7e8669f6f89931652cb2e9b65/blockchyp-2.0.1rc6.post1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4359ee65259270bf02d1763a85e7ee80", "sha256": "5cf816c923a0c0dafbe94d52cfee63c2d5bf351bd4b4822c55ba26c3cdfba836"}, "downloads": -1, "filename": "blockchyp-2.0.1rc6.post1.tar.gz", "has_sig": false, "md5_digest": "4359ee65259270bf02d1763a85e7ee80", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 18352, "upload_time": "2020-02-07T22:42:31", "upload_time_iso_8601": "2020-02-07T22:42:31.541441Z", "url": "https://files.pythonhosted.org/packages/04/9f/4cccb96e2e78cc04677968cc49935120b4802827a8b040755e092e1d378e/blockchyp-2.0.1rc6.post1.tar.gz", "yanked": false}], "2.0.1rc8.post1": [{"comment_text": "", "digests": {"md5": "19f51cb49cc88d7b2dc8154b92a7c475", "sha256": "0d77c64f5b3cea49cea9ae1215871390886ea441cd7a533068e50a52000c382d"}, "downloads": -1, "filename": "blockchyp-2.0.1rc8.post1-py3-none-any.whl", "has_sig": false, "md5_digest": "19f51cb49cc88d7b2dc8154b92a7c475", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 17002, "upload_time": "2020-02-07T23:05:25", "upload_time_iso_8601": "2020-02-07T23:05:25.163365Z", "url": "https://files.pythonhosted.org/packages/46/4a/5ee51a5108435fe39da750e1e5df9cd7787a9b77961db6ae9c6b228387a9/blockchyp-2.0.1rc8.post1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9d61f3b15b0f53923366762db528c24d", "sha256": "52ae51183b328f733569a9aece407205dbc0f9d3f9e3a86eec23ce34b084f684"}, "downloads": -1, "filename": "blockchyp-2.0.1rc8.post1.tar.gz", "has_sig": false, "md5_digest": "9d61f3b15b0f53923366762db528c24d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 18351, "upload_time": "2020-02-07T23:05:26", "upload_time_iso_8601": "2020-02-07T23:05:26.938505Z", "url": "https://files.pythonhosted.org/packages/94/fa/ef74cc30f4176c1ddaa098e28cc801688e513b7a737f36a7704c7bc14d82/blockchyp-2.0.1rc8.post1.tar.gz", "yanked": false}], "2.1.0.post1": [{"comment_text": "", "digests": {"md5": "7e36092e4dd6f0f204535d92cbfd2e3c", "sha256": "96bd4f5e52a6366742fe91424f51695f1b6ca27e7608c7827f71b64ebf4b461e"}, "downloads": -1, "filename": "blockchyp-2.1.0.post1-py3-none-any.whl", "has_sig": false, "md5_digest": "7e36092e4dd6f0f204535d92cbfd2e3c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 17178, "upload_time": "2020-02-28T18:39:38", "upload_time_iso_8601": "2020-02-28T18:39:38.760638Z", "url": "https://files.pythonhosted.org/packages/79/0f/2dfa64e315577787c5e9d4022b268f43591b3b2fa57204247b1de4927f65/blockchyp-2.1.0.post1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "509361682ab324a7fa8434fe08c0d2c8", "sha256": "ece33f2d0c483f24fc9220e2c686949087da75567f7511e1dd8e8e15b315ec3e"}, "downloads": -1, "filename": "blockchyp-2.1.0.post1.tar.gz", "has_sig": false, "md5_digest": "509361682ab324a7fa8434fe08c0d2c8", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 18602, "upload_time": "2020-02-28T18:39:40", "upload_time_iso_8601": "2020-02-28T18:39:40.078828Z", "url": "https://files.pythonhosted.org/packages/e3/9d/ac1448b1aa03de133802f47c9e6dff485c57bdfcf70c3b5bc555123b2945/blockchyp-2.1.0.post1.tar.gz", "yanked": false}], "2.1.1.post1": [{"comment_text": "", "digests": {"md5": "cdec3883da4bcc010556748613640c0e", "sha256": "d7338400a3f9be88368c5d9bced83f58c7438274a233d0ed3e57b1a671dc841f"}, "downloads": -1, "filename": "blockchyp-2.1.1.post1-py3-none-any.whl", "has_sig": false, "md5_digest": "cdec3883da4bcc010556748613640c0e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 17178, "upload_time": "2020-03-03T18:09:38", "upload_time_iso_8601": "2020-03-03T18:09:38.966260Z", "url": "https://files.pythonhosted.org/packages/bf/12/5cbc2ba2d2acc86ba09d543795a2162bd1f772d2bb4170e6fd09bd84ef51/blockchyp-2.1.1.post1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b8790741995eb0f389d3f64807a8a77c", "sha256": "e5a73aaf02bd2ef3af190177965d62b43206859dfb4b2a6ac0609e6d0153bcd4"}, "downloads": -1, "filename": "blockchyp-2.1.1.post1.tar.gz", "has_sig": false, "md5_digest": "b8790741995eb0f389d3f64807a8a77c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 18600, "upload_time": "2020-03-03T18:09:40", "upload_time_iso_8601": "2020-03-03T18:09:40.553314Z", "url": "https://files.pythonhosted.org/packages/7f/e6/eedb3adb94c260bfd12b9533e339f6675dd8a6e74c938306374dc777cac1/blockchyp-2.1.1.post1.tar.gz", "yanked": false}], "2.2.0.post1": [{"comment_text": "", "digests": {"md5": "d93e49f932a0282cc48955cdf4335d39", "sha256": "5f3ac13f98836abdacf9b15e989cc0d3886b25722092936baae30da3b234f67e"}, "downloads": -1, "filename": "blockchyp-2.2.0.post1-py3-none-any.whl", "has_sig": false, "md5_digest": "d93e49f932a0282cc48955cdf4335d39", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 17728, "upload_time": "2020-03-25T16:37:43", "upload_time_iso_8601": "2020-03-25T16:37:43.899734Z", "url": "https://files.pythonhosted.org/packages/10/c8/58cc2a8fe7e32f26f76e37c58e4c5fa86d1bd838e23679fbcc92a6bde7a9/blockchyp-2.2.0.post1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6eed4c88ec56bbbc2e2bf37db6584db4", "sha256": "c68e34e26cb6b6e5f83b4aefe5591e68aa8b31d04431faf95a0a330139460d91"}, "downloads": -1, "filename": "blockchyp-2.2.0.post1.tar.gz", "has_sig": false, "md5_digest": "6eed4c88ec56bbbc2e2bf37db6584db4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 19724, "upload_time": "2020-03-25T16:37:47", "upload_time_iso_8601": "2020-03-25T16:37:47.092385Z", "url": "https://files.pythonhosted.org/packages/24/52/f27770a616405f4bb7a5e3a0f81e94f8c3f999ae34eb8c9f32f59ccf441c/blockchyp-2.2.0.post1.tar.gz", "yanked": false}], "2.2.1.post1": [{"comment_text": "", "digests": {"md5": "21e965681eee581fd82e12879d3a9a79", "sha256": "9058175c57a686d94b2bc981559a1c8d92fb320566ba5ade75ddd03e77396a55"}, "downloads": -1, "filename": "blockchyp-2.2.1.post1-py3-none-any.whl", "has_sig": false, "md5_digest": "21e965681eee581fd82e12879d3a9a79", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 17726, "upload_time": "2020-03-27T18:21:03", "upload_time_iso_8601": "2020-03-27T18:21:03.934780Z", "url": "https://files.pythonhosted.org/packages/2c/9c/c15528ad211f91b2f29bf60a861e4fa515510c362417b2038800214e1252/blockchyp-2.2.1.post1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1166040b4a260461e4456fa48fb17dcc", "sha256": "beeffced5573b9ce570c62c1a69192e8bb9d8fade016d1e5fed5aec3efeb3df0"}, "downloads": -1, "filename": "blockchyp-2.2.1.post1.tar.gz", "has_sig": false, "md5_digest": "1166040b4a260461e4456fa48fb17dcc", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 19720, "upload_time": "2020-03-27T18:21:05", "upload_time_iso_8601": "2020-03-27T18:21:05.657116Z", "url": "https://files.pythonhosted.org/packages/7a/b0/548ba5a64f29d8699093d7b0daf3862a73bd3daafb56353bbdca48504c82/blockchyp-2.2.1.post1.tar.gz", "yanked": false}], "2.2.2.post1": [{"comment_text": "", "digests": {"md5": "5816e3d2a6f7ce9a30eb4a71b64a6975", "sha256": "43235154250ffbc68a2a3d84d0ccbc09e5762c3377d9da5d3b7ed4977f20a215"}, "downloads": -1, "filename": "blockchyp-2.2.2.post1-py3-none-any.whl", "has_sig": false, "md5_digest": "5816e3d2a6f7ce9a30eb4a71b64a6975", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 17726, "upload_time": "2020-03-30T17:28:32", "upload_time_iso_8601": "2020-03-30T17:28:32.912133Z", "url": "https://files.pythonhosted.org/packages/02/68/d8659a6f33b94665d7a640f1cfb53f1514dd58d3f4721bd9480b439a9f9c/blockchyp-2.2.2.post1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8d6e9b3d1e4f2ba79e10fb05aecb6559", "sha256": "58bc34a925504487d40a7d60a73b35b511d5a93d49268866991f0cd59645db2a"}, "downloads": -1, "filename": "blockchyp-2.2.2.post1.tar.gz", "has_sig": false, "md5_digest": "8d6e9b3d1e4f2ba79e10fb05aecb6559", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 19722, "upload_time": "2020-03-30T17:28:34", "upload_time_iso_8601": "2020-03-30T17:28:34.478322Z", "url": "https://files.pythonhosted.org/packages/52/0a/e8f873501b63e2391d7c3cfef2a368fa9a7785a81862de96397ee47a73ce/blockchyp-2.2.2.post1.tar.gz", "yanked": false}], "2.2.3.post1": [{"comment_text": "", "digests": {"md5": "4d5e744f08edddcdebc68332a7401768", "sha256": "46954576d61a60bb68566dde0f58b84f92a12e866f0106375203b741d758299f"}, "downloads": -1, "filename": "blockchyp-2.2.3.post1-py3-none-any.whl", "has_sig": false, "md5_digest": "4d5e744f08edddcdebc68332a7401768", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 17727, "upload_time": "2020-04-01T19:05:53", "upload_time_iso_8601": "2020-04-01T19:05:53.229596Z", "url": "https://files.pythonhosted.org/packages/8c/1c/ea0b842c9ad40b3d3916f5518635fefbc0200b163de999baa0b8b6dd0562/blockchyp-2.2.3.post1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "eb78ba6d99bb6607a6bcae85dc49a600", "sha256": "96c4bbd262dfd149953ab34c3fc1a43db257178618afb17dbdea2aca31a6c01e"}, "downloads": -1, "filename": "blockchyp-2.2.3.post1.tar.gz", "has_sig": false, "md5_digest": "eb78ba6d99bb6607a6bcae85dc49a600", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 19718, "upload_time": "2020-04-01T19:05:54", "upload_time_iso_8601": "2020-04-01T19:05:54.509101Z", "url": "https://files.pythonhosted.org/packages/84/3f/dda8e9fc192e7be58b937b17476fe4cda16a7acd2c7e216b5ac3d5fdfda3/blockchyp-2.2.3.post1.tar.gz", "yanked": false}], "2.2.4.post1": [{"comment_text": "", "digests": {"md5": "9edd9f69749b801a1666f5a0491804fb", "sha256": "a31610e85b11371487e5e054dc5217b108016bc58f158e4cb49b5ecb2f479142"}, "downloads": -1, "filename": "blockchyp-2.2.4.post1-py3-none-any.whl", "has_sig": false, "md5_digest": "9edd9f69749b801a1666f5a0491804fb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 17727, "upload_time": "2020-04-08T23:04:37", "upload_time_iso_8601": "2020-04-08T23:04:37.719851Z", "url": "https://files.pythonhosted.org/packages/d1/4f/a2e83399e014a2e5cb5437ad051b7ab2b77309f1496ea772c2a457263c7d/blockchyp-2.2.4.post1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ef25b122c816628e8a25877318c5adf1", "sha256": "0882658abe5919911825a58a85ac7b35d4e778b4dd874069f77d06b59b08ba03"}, "downloads": -1, "filename": "blockchyp-2.2.4.post1.tar.gz", "has_sig": false, "md5_digest": "ef25b122c816628e8a25877318c5adf1", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 19723, "upload_time": "2020-04-08T23:04:39", "upload_time_iso_8601": "2020-04-08T23:04:39.278752Z", "url": "https://files.pythonhosted.org/packages/65/c2/2a82a3ddb6b5585c9e1e052d486abc12c2fbd12bfc292a0a91d83785be03/blockchyp-2.2.4.post1.tar.gz", "yanked": false}], "2.3.0.post1": [{"comment_text": "", "digests": {"md5": "203039ecf359bc6c5597195eebd34664", "sha256": "09630ef5257ea3818a305f67706980228aa4e70d6cd76f48f01465236c7a0533"}, "downloads": -1, "filename": "blockchyp-2.3.0.post1-py3-none-any.whl", "has_sig": false, "md5_digest": "203039ecf359bc6c5597195eebd34664", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 17818, "upload_time": "2020-04-23T23:58:35", "upload_time_iso_8601": "2020-04-23T23:58:35.833144Z", "url": "https://files.pythonhosted.org/packages/e5/0f/ed7bd836b6e403cfa7ed94c11b53df7c7c6901fdf97cf562add084eb7a99/blockchyp-2.3.0.post1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d3dbf034c8dd7f204806fec443e062ab", "sha256": "8892bbf1f9e8919a942d3021d1b994e889c4a2a56fad52b3169d2d28c33c2b39"}, "downloads": -1, "filename": "blockchyp-2.3.0.post1.tar.gz", "has_sig": false, "md5_digest": "d3dbf034c8dd7f204806fec443e062ab", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 19914, "upload_time": "2020-04-23T23:58:37", "upload_time_iso_8601": "2020-04-23T23:58:37.618271Z", "url": "https://files.pythonhosted.org/packages/e4/ca/195b4872659c83f126b6f6aa29a5c05213e389eb1439e2aa684f9f1bc5e1/blockchyp-2.3.0.post1.tar.gz", "yanked": false}], "2.3.1.post1": [{"comment_text": "", "digests": {"md5": "fa6c775dc572a3324dfea163f58523d7", "sha256": "82db72c094e144ba4ef7f46ceafcfe331e547f6d3b9ad29960241c0c765025a7"}, "downloads": -1, "filename": "blockchyp-2.3.1.post1-py3-none-any.whl", "has_sig": false, "md5_digest": "fa6c775dc572a3324dfea163f58523d7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 17817, "upload_time": "2020-04-24T22:05:59", "upload_time_iso_8601": "2020-04-24T22:05:59.582324Z", "url": "https://files.pythonhosted.org/packages/2b/35/e9fd1ec356340b02ad8409e7c87d88e79b083cfb8ed18ecbf219b9a6c99d/blockchyp-2.3.1.post1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "22b1f91788fbb201e8d068ec3702f37b", "sha256": "dd851722e76508ace453713196674eb32ac3e5fd0c1e1aa5a0382285233bf43f"}, "downloads": -1, "filename": "blockchyp-2.3.1.post1.tar.gz", "has_sig": false, "md5_digest": "22b1f91788fbb201e8d068ec3702f37b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 19914, "upload_time": "2020-04-24T22:06:00", "upload_time_iso_8601": "2020-04-24T22:06:00.898781Z", "url": "https://files.pythonhosted.org/packages/f7/d7/92e48dec7e58f77b741e5ed70f50595cc7e6cf329978dbade82f3d30dfca/blockchyp-2.3.1.post1.tar.gz", "yanked": false}], "2.3.2.post1": [{"comment_text": "", "digests": {"md5": "afa3677de4e967f71891eacb3553abac", "sha256": "4dc5d11ddb4e60ccbfbda3a82f52c7ad7fc01233258cebe69555e4ae98772137"}, "downloads": -1, "filename": "blockchyp-2.3.2.post1-py3-none-any.whl", "has_sig": false, "md5_digest": "afa3677de4e967f71891eacb3553abac", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 25132, "upload_time": "2020-05-05T17:50:20", "upload_time_iso_8601": "2020-05-05T17:50:20.232281Z", "url": "https://files.pythonhosted.org/packages/9e/83/661078f3c90d22e61c5e1c90bcd9152032c932fa2a84ff6c324cf8642e3c/blockchyp-2.3.2.post1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ee68ad6d5cbafc5c1d1238793adc311e", "sha256": "880b016c78414a7c463b2f6db170322b4436ffbd65952880e986455c4e00e35f"}, "downloads": -1, "filename": "blockchyp-2.3.2.post1.tar.gz", "has_sig": false, "md5_digest": "ee68ad6d5cbafc5c1d1238793adc311e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 45374, "upload_time": "2020-05-05T17:50:21", "upload_time_iso_8601": "2020-05-05T17:50:21.355272Z", "url": "https://files.pythonhosted.org/packages/88/2b/f8611800d6706d6b506f28c819f684881da3a68c185234dfc17a3031b7c4/blockchyp-2.3.2.post1.tar.gz", "yanked": false}], "2.3.3.post1": [{"comment_text": "", "digests": {"md5": "13f169dd2210f10e7b83b4112296a021", "sha256": "d91286b7b5c80249db012fd6f62abafa821f93c01d460e91a98348f466d5261f"}, "downloads": -1, "filename": "blockchyp-2.3.3.post1-py3-none-any.whl", "has_sig": false, "md5_digest": "13f169dd2210f10e7b83b4112296a021", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 25085, "upload_time": "2020-05-07T17:03:39", "upload_time_iso_8601": "2020-05-07T17:03:39.585435Z", "url": "https://files.pythonhosted.org/packages/27/b7/43dc3fcd9efd31f997bb7c8714f27ece898fc577db3f1817380be3d323a5/blockchyp-2.3.3.post1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "adf80a78bca08c30ccb46df43a290026", "sha256": "d08987be7b21c2a58f6d08a1fc928a2c36e8f593d980febc2ab3cadedfb91081"}, "downloads": -1, "filename": "blockchyp-2.3.3.post1.tar.gz", "has_sig": false, "md5_digest": "adf80a78bca08c30ccb46df43a290026", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 45139, "upload_time": "2020-05-07T17:03:41", "upload_time_iso_8601": "2020-05-07T17:03:41.158804Z", "url": "https://files.pythonhosted.org/packages/75/f5/2fe3eddc3bfdaa0936a01b858681d8091ef7716ea37db57d596c4e8e64c3/blockchyp-2.3.3.post1.tar.gz", "yanked": false}], "2.3.4.post1": [{"comment_text": "", "digests": {"md5": "ce99447ccf2320f2fae77162809d0271", "sha256": "d0763aa76999a41688a44c5d8549ca5961bf172794e8d2ea8b409d2330a37232"}, "downloads": -1, "filename": "blockchyp-2.3.4.post1-py3-none-any.whl", "has_sig": false, "md5_digest": "ce99447ccf2320f2fae77162809d0271", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 25247, "upload_time": "2020-05-07T22:08:04", "upload_time_iso_8601": "2020-05-07T22:08:04.139941Z", "url": "https://files.pythonhosted.org/packages/cc/ae/deb7afde94a3dfc336a228901c8a70c07dedbefcdcaa4a4fb9cac1df8e27/blockchyp-2.3.4.post1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0a802cc2281d87d23efb912aa1e78b05", "sha256": "441d01f98d6bdf4f2e0002576255069bf8a8cbe890605ffea319f818167b3865"}, "downloads": -1, "filename": "blockchyp-2.3.4.post1.tar.gz", "has_sig": false, "md5_digest": "0a802cc2281d87d23efb912aa1e78b05", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 45670, "upload_time": "2020-05-07T22:08:06", "upload_time_iso_8601": "2020-05-07T22:08:06.220507Z", "url": "https://files.pythonhosted.org/packages/d5/b0/9f55376f0071c6da1a643bc0385497eb7ea9f98603d0a6beeba9eb55263b/blockchyp-2.3.4.post1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ce99447ccf2320f2fae77162809d0271", "sha256": "d0763aa76999a41688a44c5d8549ca5961bf172794e8d2ea8b409d2330a37232"}, "downloads": -1, "filename": "blockchyp-2.3.4.post1-py3-none-any.whl", "has_sig": false, "md5_digest": "ce99447ccf2320f2fae77162809d0271", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 25247, "upload_time": "2020-05-07T22:08:04", "upload_time_iso_8601": "2020-05-07T22:08:04.139941Z", "url": "https://files.pythonhosted.org/packages/cc/ae/deb7afde94a3dfc336a228901c8a70c07dedbefcdcaa4a4fb9cac1df8e27/blockchyp-2.3.4.post1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0a802cc2281d87d23efb912aa1e78b05", "sha256": "441d01f98d6bdf4f2e0002576255069bf8a8cbe890605ffea319f818167b3865"}, "downloads": -1, "filename": "blockchyp-2.3.4.post1.tar.gz", "has_sig": false, "md5_digest": "0a802cc2281d87d23efb912aa1e78b05", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 45670, "upload_time": "2020-05-07T22:08:06", "upload_time_iso_8601": "2020-05-07T22:08:06.220507Z", "url": "https://files.pythonhosted.org/packages/d5/b0/9f55376f0071c6da1a643bc0385497eb7ea9f98603d0a6beeba9eb55263b/blockchyp-2.3.4.post1.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:37:04 2020"}