{"info": {"author": "Lyst Ltd.", "author_email": "devs@lyst.com", "bugtrack_url": null, "classifiers": [], "description": "# Django URLconf Export\n\n![Django URLconf Export logo](https://github.com/lyst/django-urlconf-export/raw/master/logos/box-logo.jpg)\n\nDo you need to make URLs for your Django website in another microservice?\n\nThis used to be painful; you had to hard-code URL logic in multiple places.\n\nThis was messy and fragile, especially when URLs are translated to multiple languages.\n\nBut now, Django URLconf Export has solved this problem.\n\nIt exports your website URLconf in a JSON format, then imports it to any other Python service.\n\nSo you can make URLs for your website from anywhere, with no hassle, no repetition and no debt.\n\nSome example uses:\n\n* Email microservice that sends links to users.\n* Sitmaps generation microservice.\n* Microservice that buys paid ads for some website pages.\n\n## Video: 7 minute overview\n\n[![Link to short overview on YouTube](https://github.com/lyst/django-urlconf-export/raw/master/logos/video-link-720p.jpg)](https://youtu.be/3-9_6My5EWg)\n\n## Table of contents\n\n- [Django URLconf Export](https://github.com/lyst/django-urlconf-export#django-urlconf-export)\n  * [Video: 7 minute overview](https://github.com/lyst/django-urlconf-export#video-7-minute-overview)\n- [User Guide](https://github.com/lyst/django-urlconf-export#user-guide)\n  * [Installation](https://github.com/lyst/django-urlconf-export#installation)\n  * [Export URLconf as JSON](https://github.com/lyst/django-urlconf-export#export-urlconf-as-json)\n  * [Save URLconf to a file](https://github.com/lyst/django-urlconf-export#save-urlconf-to-a-file)\n    + [Example use-case](https://github.com/lyst/django-urlconf-export#example-use-case)\n  * [Serve URLconf from an endpoint](https://github.com/lyst/django-urlconf-export#serve-urlconf-from-an-endpoint)\n    + [Example use-case](https://github.com/lyst/django-urlconf-export#example-use-case-1)\n- [Integration](https://github.com/lyst/django-urlconf-export#integration)\n  * [Exporting from a Django service](https://github.com/lyst/django-urlconf-export#exporting-from-a-django-service)\n  * [Importing in a non-Django service](https://github.com/lyst/django-urlconf-export#importing-in-a-non-django-service)\n    + [Edge cases](https://github.com/lyst/django-urlconf-export#edge-cases)\n  * [Importing in a Django service with own URLs](https://github.com/lyst/django-urlconf-export#importing-in-a-django-service-with-own-urls)\n  * [Importing in a Django service with no URLs](https://github.com/lyst/django-urlconf-export#importing-in-a-django-service-with-no-urls)\n- [Feature Details](https://github.com/lyst/django-urlconf-export#feature-details)\n  * [Export whitelist and blacklist](https://github.com/lyst/django-urlconf-export#export-whitelist-and-blacklist)\n  * [Included URLs](https://github.com/lyst/django-urlconf-export#included-urls)\n  * [I18n URLs](https://github.com/lyst/django-urlconf-export#i18n-urls)\n  * [Export non-default root URLconf](https://github.com/lyst/django-urlconf-export#export-non-default-root-urlconf)\n  * [Quality assurance for i18n URLs](https://github.com/lyst/django-urlconf-export#quality-assurance-for-i18n-urls)\n    + [Check for translation errors in URL patterns](https://github.com/lyst/django-urlconf-export#check-for-translation-errors-in-url-patterns)\n    + [Ensure URL patterns use kwargs, not args](https://github.com/lyst/django-urlconf-export#ensure-url-patterns-use-kwargs-not-args)\n- [Development Guide](https://github.com/lyst/django-urlconf-export#development-guide)\n  * [Running tests](https://github.com/lyst/django-urlconf-export#running-tests)\n  * [Developing](https://github.com/lyst/django-urlconf-export#developing)\n  * [Changing test dependencies](https://github.com/lyst/django-urlconf-export#changing-test-dependencies)\n  * [Formatting imports and code](https://github.com/lyst/django-urlconf-export#formatting-imports-and-code)\n  * [Publishing to PyPi](https://github.com/lyst/django-urlconf-export#publishing-to-pypi)\n- [Further Development](https://github.com/lyst/django-urlconf-export#further-development)\n\n# User Guide\n\n## Installation\n\nThe package is called `django-urlconf-export`\n\nSome ways to install:\n\n```shell\npipenv install django-urlconf-export\n\npip install django-urlconf-export\n\npoetry add django-urlconf-export\n```\n\n## Export URLconf as JSON\n\nIf you have this URLconf:\n\n```Python\nurlpatterns = [\n    url(r\"^login/$\", View.as_view(), name=\"login\"),\n]\n```\n\nYou can run this code:\n\n```Python\nfrom django_urlconf_export import export_urlconf\n\nexport_urlconf.as_json()\n```\n\nYou will get this JSON:\n\n```Python\n[\n    {\"regex\": \"^login/$\", \"name\": \"login\"},\n]\n```\n\nThen somewhere else, you can import the JSON like this:\n\n```Python\nfrom django_urlconf_export import import_urlconf\n\nimport_urlconf.from_json(json_urlpatterns)\n```\n\nThen you can call `reverse` to make urls, just like normal:\n\n```Python\nreverse(\"login\") == \"/login/\"\n```\n\n\n## Save URLconf to a file\n\nIf you add `django_urlconf_export` to your website's `INSTALLED_APPS` you can run:\n\n```shell\ndjango-admin export_urlconf_to_file > \"urlconf.json\"\n```\n\nTo create a file called `urlconf.json`\n\nThen you can import the file somewhere else like this:\n\n```python\nimport_urlconf.from_file(\"urlconf.json\")\n```\n\n### Example use-case\n\nAt Lyst, we have a skeleton repo that we share with digital agencies who create special pages for us like [The Year in Fashion](https://www.lyst.com/year-in-fashion-2019/). The repo is a stripped-down simulation of our production environment. Agencies develop pages for our website within the repo, so integration is easy.\n\nWe include a URLconf file in the skeleton repo. Before we did this, agencies used to hard-code URLs into their work. But now:\n\n* They can make URLs in the standard Django way.\n* The URLs are always correct; no silent errors.\n* The URLs are localised for all the languages we support.\n\n## Serve URLconf from an endpoint\n\nThis view returns URLconf JSON:\n\n```Python\nfrom django_urlconf_export.views.export import URLConfExportView\n\nurlpatterns = [\n    url(r\"^urlconf/\", URLConfExportView.as_view()),\n]\n```\n\nThen you can import from a URI like this:\n\n```Python\nimport_urlconf.from_uri(\"/urlconf/\")\n```\n\n### Example use-case\n\nA Lyst we have 3 services that make Lyst website urls:\n\n* An email service.\n* A sitemaps generation service.\n* A paid advertising purchasing service.\n\nThese services fetch URLconf from the Lyst website when they boot up, and update it periodically.\n\nSo when the URLs change, we don't need to update any service code. This is particularly helpful when we add a new language for our localised URLs.\n\n# Integration\n\n## Exporting from a Django service\n\nIn most situations, the best approach is to [serve URLconf from an endpoint](https://github.com/lyst/django-urlconf-export#serve-urlconf-from-an-endpoint).\n\nIn some situations, it might work better if you [save URLconf to a file](https://github.com/lyst/django-urlconf-export#save-urlconf-to-a-file).\n\nIf you have a specialised use-case that isn't handled by either of these approaches, You could roll your own core logic to [export URLconf as JSON](https://github.com/lyst/django-urlconf-export#export-urlconf-as-json).\n\nIf you roll a bespoke integration you think might be useful to others, please feel free to submit a PR.\n\n## Importing in a non-Django service\n\nYou can import URLconf and make URLs in any Python code.\n\nFirst, add Django as a dependency e.g. `pip install django`\n\nThen call `import_urlconf.init_django()` before you import any URLconf e.g.\n\n```python\nfrom django_urlconf_export import import_urlconf\n\nimport_urlconf.init_django()\n\nimport_urlconf.from_uri(\"https://www.example.com/urlconf/\")\n```\n\nThen you can call `reverse()` and make URLs for your website, just like in the website code.\n\n### Edge cases\n\nBy default, Django will be initialized with `settings.ROOT_URLCONF == \"imported_urlconf\"`\n\nThe module will be created when you import some urlconf.\n\nIf you need to set `settings.ROOT_URLCONF` to different module name, you can:\n\n```python\nimport_urlconf.init_django(ROOT_URLCONF=\"another_urlconf_module\")\n```\n\nYou can set any other Django settings this way too. \n\nSee [the source code](https://github.com/lyst/django-urlconf-export/blob/master/src/django_urlconf_export/import_urlconf.py) for the default Django settings.\n\n\n## Importing in a Django service with own URLs\n\nBy default, the library imports URLconf into the root URLconf module of the service - `settings.ROOT_URLCONF`. \n\nBut if the service has its own URLs, `settings.ROOT_URLCONF` will have some URLconf in it already.\n\nTo avoid overwriting the service's URLs, you can import to a different module with this Django setting:\n\n```python\nURLCONF_IMPORT_ROOT_URLCONF = \"imported_urlconf\"\n```\n\nOr you can add a `urlconf=\"...\"` argument when you import:\n\n```python\nimport_urlconf.from_file(\"urlconf.json\", urlconf=\"imported_urlconf\")\n```\n\nIf the module does not exist, it will be created - so you can call it anything you like.\n\nIf the module exists, any existing `urlpatterns` will be overwritten.\n\nThen you can make a url like:\n\n```python\nreverse(\"login\", urlconf=\"imported_urlconf\")\n```\n\nOr for convenience, you could make a `website_urls.py` module like this:\n\n```python\nfrom django import urls as django_urls\nfrom django.apps import AppConfig\nfrom django_urlconf_export import import_urlconf\n\n\nclass WebsiteURLsAppConfig(AppConfig):\n    name = \"website_urls\"\n    verbose_name = \"Make URLs for our website in any Django service.\"\n\n    def ready(self):\n        \"\"\"\n        When Django initializes, get the latest urlconf from our website.\n        \"\"\"\n        update_urlconf()\n\n\ndef update_urlconf():\n    \"\"\"\n    Download the latest urlconf from our website\n    \"\"\"\n    import_urlconf.from_uri(\"https://www.example.com/urlconf/\", urlconf=\"imported_urlconf\")\n\n\ndef reverse(*args, **kwargs):\n    \"\"\"\n    Thin wrapper for Django's reverse method, to make a URL for our website.\n    \"\"\"\n    return django_urls.reverse(*args, urlconf=\"imported_urlconf\", **kwargs)\n```\n\nAdding `\"website_urls.WebsiteURLsAppConfig\"` to `INSTALLED_APPS` in Django setting will import the URLconf when Django starts up.\n\nThen you can make URLs for your website by calling `website_urls.reverse(...)`\n\nIf you want to update the URLconf later, you can call `website_urls.update_urlconf()`.\n\n## Importing in a Django service with no URLs\n\nIf your Django service doesn't have any URLs of it's own, you can store imported URLconf in the default URLconf module - `settings.ROOT_URLCONF`.\n\nThis makes things a bit simpler. You could make a `website_urls.py` module like this:\n\n```python\nfrom django.apps import AppConfig\nfrom django_urlconf_export import import_urlconf\n\n\nclass WebsiteURLsAppConfig(AppConfig):\n    name = \"website_urls\"\n    verbose_name = \"Make URLs for our website in any Django service.\"\n\n    def ready(self):\n        \"\"\"\n        When Django initializes, get the latest urlconf from our website.\n        \"\"\"\n        update_urlconf()\n\n\ndef update_urlconf():\n    \"\"\"\n    Download the latest urlconf from our website\n    \"\"\"\n    import_urlconf.from_uri(\"https://www.example.com/urlconf/\")\n```\n\nAdding `\"website_urls.WebsiteURLsAppConfig\"` to `INSTALLED_APPS` in Django setting will import the URLconf when Django starts up.\n\nThen you can call `reverse()` and make URLs for your website, just like in the website code:\n\n```python\nfrom django.urls import reverse\n\nreverse(...)\n```\n\nIf you want to update the URLconf later, you can call `website_urls.update_urlconf()`.\n\n# Feature Details\n\nIf you prefer to read code than docs, the tests have examples of all feature details:\n\n* [export_urlconf tests](https://github.com/lyst/django-urlconf-export/blob/master/tests/django_urlconf_export/test_export_urlconf.py)\n* [import_urlconf tests](https://github.com/lyst/django-urlconf-export/blob/master/tests/django_urlconf_export/test_import_urlconf.py)\n\n## Export whitelist and blacklist\n\nBy default, all URLs will be exported. But you can set a whitelist and/or blacklist with these Django settings:\n\n```python\nURLCONF_EXPORT_WHITELIST = {\"only-show-this-url\"}\nURLCONF_EXPORT_BLACKLIST = {\"hide-this-url\", \"hide-this-one-too\"}\n```\n\nThe whitelist is applied first, then the blacklist.\n\nList items can be regexes, for example `\"secret-.\"` matches all URL names that start with `secret-` like `secret-page-1`, `secret-page-2` etc.\n\nThe whitelist and blacklist sets are a mixture of:\n\n* URL names\n* URL namespaces\n\nFor included URLs with a `namespace` (see [Django docs](https://docs.djangoproject.com/en/3.0/topics/http/urls/#url-namespaces)) like the Django admin urls, the `namespace` and the `url_name` must be _both_ be allowed by the lists. \n\nSo you can ban all URLs in the `admin` namespace with `blacklist = {\"admin\"}`.\n\nIf you want to export `admin:some-url` but no other `admin` URLs, set `whitelist = {\"admin\", \"some-url\"}`. \n\nNote: if you set `whitelist = {\"admin\"}` _no admin URLs will be exported_.\n\nSee the [unit tests](https://github.com/lyst/django-urlconf-export/blob/master/tests/django_urlconf_export/test_export_urlconf.py) for more examples.\n\nYou can check the whitelist and/or blacklist are working as expected like this:\n\n```python\nprint(export_urlconf.get_all_allowed_url_names())\n```\n\nYou can also set whitelist or blacklist explicitly when exporting as JSON:\n\n```Python\nexport_urlconf.as_json(\n    whitelist={\"only-show-this-url\"},\n    blacklist={\"hide-this-url\", \"hide-this-one-too\"}\n)\n```\n\nOr when generating a file:\n\n```shell\ndjango-admin export_urlconf_to_file \\\n        --whitelist 'only-show-this-url' \\\n        --blacklist 'hide-this-url\", \"hide-this-one-too' \\\n        > urlconf.json\n```\n\nOr when serving from an endpoint:\n\n```Python\nurlpatterns = [\n    url(r\"^urlconf/\", URLConfExportView.as_view(\n        whitelist={\"only-show-this-url\"},\n        blacklist={\"hide-this-url\", \"hide-this-one-too\"}\n    )),\n]\n```\n\n## Included URLs\n\nWe fully support included URLconf. The JSON looks like:\n\n```python\n{\n    \"regex\": \"^colors/\",\n    \"namespace\": None,\n    \"app_name\": None,\n    \"includes\": [\n        {\"regex\": \"^red/$\", \"name\": \"red\"},\n        {\"regex\": \"^blue/$\", \"name\": \"blue\"}\n    ],\n}\n```\n\n## I18n URLs\n\nWe fully support internationalized URLs. \n\nThe JSON looks like:\n\n```python\n{\n    \"regex\": {\n        \"en-us\": \"^color/$\",\n        \"en-gb\": \"^colour/$\",\n        \"fr-fr\": \"^couleur/$\"\n    },\n    \"name\": \"color\"\n}\n```\n\n---\n\nSome websites (e.g. Lyst) only localise URLs at the language-family level.\n\nFor example, `en` rather than `en-us` and `en-gb`.\n\nIf you set this Django setting:\n\n```python\nURLCONF_EXPORT_LANGUAGE_WITHOUT_COUNTRY = True\n```\n\nThen you get JSON like:\n\n```python\n{\n    \"regex\": {\n        \"en\": \"^color/$\",\n        \"fr\": \"^couleur/$\"\n    },\n    \"name\": \"color\"\n}\n```\n\nYou can also add an argument when exporting as JSON:\n\n```Python\nexport_urlconf.as_json(language_without_country=True)\n```\n\nOr when generating a file:\n\n```shell\ndjango-admin export_urlconf_to_file --language-without-country > urlconf.json\n```\n\nOr when serving from an endpoint:\n\n```Python\nurlpatterns = [\n    url(r\"^urlconf/\", URLConfExportView.as_view(language_without_country=True)),\n]\n```\n\n---\n\nWe support the `LocalePrefixPattern` (see [Django docs](https://docs.djangoproject.com/en/3.0/topics/i18n/translation/#language-prefix-in-url-patterns).\n\nSo if you have URLconf like:\n\n```python\nfrom django.conf.urls.i18n import i18n_patterns\n\nurlpatterns = i18n_patterns(\n    url(r\"^$\", View.as_view(), name=\"index\"),\n)\n```\n\nYou get JSON like:\n\n```python\n{\n    \"isLocalePrefix\": True,\n    \"classPath\": \"django.urls.resolvers.LocalePrefixPattern\",\n    \"includes\": [\n        {\"regex\": \"^$\", \"name\": \"index\"}\n    ],\n}\n```\n\nNote that `classPath` is saved in the JSON. So if (like Lyst) your project uses a subclass of Django's `LocalePrefixPattern` it will work.\n\n## Export non-default root URLconf\n\nBy default, we export the root URLconf module that creates the endpoints of your Django website: `settings.ROOT_URLCONF`. This is almost always what you want.\n\nIf you need to export from a different root URLconf module, you can use this Django setting:\n\n```python\nURLCONF_EXPORT_ROOT_URLCONF = \"path.to.non_default_root_urlconf\"\n```\n\nOr when exporting as JSON:\n\n```Python\nexport_urlconf.as_json(\"path.to.non_default_root_urlconf\")\n```\n\nOr when generating a file:\n\n```shell\ndjango-admin export_urlconf_to_file \\\n        --urlconf 'path.to.non_default_root_urlconf' \\\n        > urlconf.json\n```\n\nOr when serving from an endpoint:\n\n```Python\nurlpatterns = [\n    url(r\"^urlconf/\", URLConfExportView.as_view(\n        urlconf=\"path.to.non_default_root_urlconf\",\n    )),\n]\n```\n\n## Quality assurance for i18n URLs\n\nThis library is particularly useful if you have internationalized URLs.\n\nWe provide some methods to help ensure URLs are translated correctly.\n\n### Check for translation errors in URL patterns\n\nIf you want to check that URL pattern kwargs are the same for all translations of a URL, you can add a unit test to your project like:\n\n```python\nfrom django_urlconf_export import urlconf_qa\n\ndef test_for_url_translation_errors():\n    urlconf_qa.assert_url_kwargs_are_the_same_for_all_languages()\n```\n\n### Ensure URL patterns use kwargs, not args\n\nDjango allows you to make URL patterns that have positional arguments (`args`) and/or named keyword arguments (`kwargs`).\n\nThis flexibility can lead to confusion, particularly in large teams. So it can be helpful to ensure developers only use `kwargs` and not `args`.\n\nIt's also less error-prone to translate URLs that use `kwargs`, because translators are free to change the order of `kwargs` in the URL to match the word order in their language.\n\nFor example, at Lyst we have URLs like:\n\n|         | Example URL   | Localised URL Pattern                         |\n|---------|---------------|-----------------------------------------------|\n| English | `/gucci-bags` | `/(?P<designer_name>.+)-(?P<product_type>.+)` |\n| French  | `/sacs-gucci` | `/(?P<product_type>.+)-(?P<designer_name>.+)` |\n\nTo enforce that URL patterns always use `kwargs` and not `args`, add a test like this:\n\n```python\nfrom django_urlconf_export import urlconf_qa\n\ndef test_all_urls_use_kwargs():\n    urlconf_qa.assert_all_urls_use_kwargs_not_args()\n```\n\n# Development Guide\n\n## Running tests\n\n`pip install tox` (or `pip3 install tox`)\n\nThen run `tox`\n\n## Developing\n\n`pip install --user pipenv` (or `pip3 install --user pipenv`)\n\nThen run:\n\n* `pipenv install`\n* `pipenv shell`\n* `exit`\n* `pipenv --venv`\n\nThe location of the virtual environment will be displayed.\n\nHere is a [guide for using this venv in PyCharm](https://stackoverflow.com/a/50749980/3048733).\n\n## Changing test dependencies\n\nYou need to `pipenv install {new-dependency}` and also add the dependency in `tox.ini`.\n\n## Formatting imports and code\n\nFirst run `pipenv shell`\n\nThen run:\n\n* `isort` - format imports\n* `black src/ tests/` - format code\n\nThen `exit` to quit the shell.\n\n## Publishing to PyPi\n\nCreate a new release, and the package will be published automatically by a GitHub action. \n\n# Further Development\n\nIt would be cool if we could make URLs in JavaScript using the JSON generated by this library. Then we could make URLs on the front-end, and in Node services.\n\nLyst are not working on this at the moment. If this feature would be useful to you, a PR would be very welcome :)\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/lyst/django-urlconf-export", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "django-urlconf-export", "package_url": "https://pypi.org/project/django-urlconf-export/", "platform": "", "project_url": "https://pypi.org/project/django-urlconf-export/", "project_urls": {"Homepage": "https://github.com/lyst/django-urlconf-export"}, "release_url": "https://pypi.org/project/django-urlconf-export/1.1.0/", "requires_dist": ["django", "requests"], "requires_python": ">=3.6", "summary": "Make URLs for your website from anywhere.", "version": "1.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Django URLconf Export</h1>\n<p><img alt=\"Django URLconf Export logo\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0d6b3699020e65eae048734d50f732b243198e15/68747470733a2f2f6769746875622e636f6d2f6c7973742f646a616e676f2d75726c636f6e662d6578706f72742f7261772f6d61737465722f6c6f676f732f626f782d6c6f676f2e6a7067\"></p>\n<p>Do you need to make URLs for your Django website in another microservice?</p>\n<p>This used to be painful; you had to hard-code URL logic in multiple places.</p>\n<p>This was messy and fragile, especially when URLs are translated to multiple languages.</p>\n<p>But now, Django URLconf Export has solved this problem.</p>\n<p>It exports your website URLconf in a JSON format, then imports it to any other Python service.</p>\n<p>So you can make URLs for your website from anywhere, with no hassle, no repetition and no debt.</p>\n<p>Some example uses:</p>\n<ul>\n<li>Email microservice that sends links to users.</li>\n<li>Sitmaps generation microservice.</li>\n<li>Microservice that buys paid ads for some website pages.</li>\n</ul>\n<h2>Video: 7 minute overview</h2>\n<p><a href=\"https://youtu.be/3-9_6My5EWg\" rel=\"nofollow\"><img alt=\"Link to short overview on YouTube\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f524656b2142de4956417d0f1a49179e7dd799a0/68747470733a2f2f6769746875622e636f6d2f6c7973742f646a616e676f2d75726c636f6e662d6578706f72742f7261772f6d61737465722f6c6f676f732f766964656f2d6c696e6b2d373230702e6a7067\"></a></p>\n<h2>Table of contents</h2>\n<ul>\n<li><a href=\"https://github.com/lyst/django-urlconf-export#django-urlconf-export\" rel=\"nofollow\">Django URLconf Export</a>\n<ul>\n<li><a href=\"https://github.com/lyst/django-urlconf-export#video-7-minute-overview\" rel=\"nofollow\">Video: 7 minute overview</a></li>\n</ul>\n</li>\n<li><a href=\"https://github.com/lyst/django-urlconf-export#user-guide\" rel=\"nofollow\">User Guide</a>\n<ul>\n<li><a href=\"https://github.com/lyst/django-urlconf-export#installation\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"https://github.com/lyst/django-urlconf-export#export-urlconf-as-json\" rel=\"nofollow\">Export URLconf as JSON</a></li>\n<li><a href=\"https://github.com/lyst/django-urlconf-export#save-urlconf-to-a-file\" rel=\"nofollow\">Save URLconf to a file</a>\n<ul>\n<li><a href=\"https://github.com/lyst/django-urlconf-export#example-use-case\" rel=\"nofollow\">Example use-case</a></li>\n</ul>\n</li>\n<li><a href=\"https://github.com/lyst/django-urlconf-export#serve-urlconf-from-an-endpoint\" rel=\"nofollow\">Serve URLconf from an endpoint</a>\n<ul>\n<li><a href=\"https://github.com/lyst/django-urlconf-export#example-use-case-1\" rel=\"nofollow\">Example use-case</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"https://github.com/lyst/django-urlconf-export#integration\" rel=\"nofollow\">Integration</a>\n<ul>\n<li><a href=\"https://github.com/lyst/django-urlconf-export#exporting-from-a-django-service\" rel=\"nofollow\">Exporting from a Django service</a></li>\n<li><a href=\"https://github.com/lyst/django-urlconf-export#importing-in-a-non-django-service\" rel=\"nofollow\">Importing in a non-Django service</a>\n<ul>\n<li><a href=\"https://github.com/lyst/django-urlconf-export#edge-cases\" rel=\"nofollow\">Edge cases</a></li>\n</ul>\n</li>\n<li><a href=\"https://github.com/lyst/django-urlconf-export#importing-in-a-django-service-with-own-urls\" rel=\"nofollow\">Importing in a Django service with own URLs</a></li>\n<li><a href=\"https://github.com/lyst/django-urlconf-export#importing-in-a-django-service-with-no-urls\" rel=\"nofollow\">Importing in a Django service with no URLs</a></li>\n</ul>\n</li>\n<li><a href=\"https://github.com/lyst/django-urlconf-export#feature-details\" rel=\"nofollow\">Feature Details</a>\n<ul>\n<li><a href=\"https://github.com/lyst/django-urlconf-export#export-whitelist-and-blacklist\" rel=\"nofollow\">Export whitelist and blacklist</a></li>\n<li><a href=\"https://github.com/lyst/django-urlconf-export#included-urls\" rel=\"nofollow\">Included URLs</a></li>\n<li><a href=\"https://github.com/lyst/django-urlconf-export#i18n-urls\" rel=\"nofollow\">I18n URLs</a></li>\n<li><a href=\"https://github.com/lyst/django-urlconf-export#export-non-default-root-urlconf\" rel=\"nofollow\">Export non-default root URLconf</a></li>\n<li><a href=\"https://github.com/lyst/django-urlconf-export#quality-assurance-for-i18n-urls\" rel=\"nofollow\">Quality assurance for i18n URLs</a>\n<ul>\n<li><a href=\"https://github.com/lyst/django-urlconf-export#check-for-translation-errors-in-url-patterns\" rel=\"nofollow\">Check for translation errors in URL patterns</a></li>\n<li><a href=\"https://github.com/lyst/django-urlconf-export#ensure-url-patterns-use-kwargs-not-args\" rel=\"nofollow\">Ensure URL patterns use kwargs, not args</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"https://github.com/lyst/django-urlconf-export#development-guide\" rel=\"nofollow\">Development Guide</a>\n<ul>\n<li><a href=\"https://github.com/lyst/django-urlconf-export#running-tests\" rel=\"nofollow\">Running tests</a></li>\n<li><a href=\"https://github.com/lyst/django-urlconf-export#developing\" rel=\"nofollow\">Developing</a></li>\n<li><a href=\"https://github.com/lyst/django-urlconf-export#changing-test-dependencies\" rel=\"nofollow\">Changing test dependencies</a></li>\n<li><a href=\"https://github.com/lyst/django-urlconf-export#formatting-imports-and-code\" rel=\"nofollow\">Formatting imports and code</a></li>\n<li><a href=\"https://github.com/lyst/django-urlconf-export#publishing-to-pypi\" rel=\"nofollow\">Publishing to PyPi</a></li>\n</ul>\n</li>\n<li><a href=\"https://github.com/lyst/django-urlconf-export#further-development\" rel=\"nofollow\">Further Development</a></li>\n</ul>\n<h1>User Guide</h1>\n<h2>Installation</h2>\n<p>The package is called <code>django-urlconf-export</code></p>\n<p>Some ways to install:</p>\n<pre>pipenv install django-urlconf-export\n\npip install django-urlconf-export\n\npoetry add django-urlconf-export\n</pre>\n<h2>Export URLconf as JSON</h2>\n<p>If you have this URLconf:</p>\n<pre><span class=\"n\">urlpatterns</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"n\">url</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s2\">\"^login/$\"</span><span class=\"p\">,</span> <span class=\"n\">View</span><span class=\"o\">.</span><span class=\"n\">as_view</span><span class=\"p\">(),</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"login\"</span><span class=\"p\">),</span>\n<span class=\"p\">]</span>\n</pre>\n<p>You can run this code:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">django_urlconf_export</span> <span class=\"kn\">import</span> <span class=\"n\">export_urlconf</span>\n\n<span class=\"n\">export_urlconf</span><span class=\"o\">.</span><span class=\"n\">as_json</span><span class=\"p\">()</span>\n</pre>\n<p>You will get this JSON:</p>\n<pre><span class=\"p\">[</span>\n    <span class=\"p\">{</span><span class=\"s2\">\"regex\"</span><span class=\"p\">:</span> <span class=\"s2\">\"^login/$\"</span><span class=\"p\">,</span> <span class=\"s2\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"login\"</span><span class=\"p\">},</span>\n<span class=\"p\">]</span>\n</pre>\n<p>Then somewhere else, you can import the JSON like this:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">django_urlconf_export</span> <span class=\"kn\">import</span> <span class=\"n\">import_urlconf</span>\n\n<span class=\"n\">import_urlconf</span><span class=\"o\">.</span><span class=\"n\">from_json</span><span class=\"p\">(</span><span class=\"n\">json_urlpatterns</span><span class=\"p\">)</span>\n</pre>\n<p>Then you can call <code>reverse</code> to make urls, just like normal:</p>\n<pre><span class=\"n\">reverse</span><span class=\"p\">(</span><span class=\"s2\">\"login\"</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"s2\">\"/login/\"</span>\n</pre>\n<h2>Save URLconf to a file</h2>\n<p>If you add <code>django_urlconf_export</code> to your website's <code>INSTALLED_APPS</code> you can run:</p>\n<pre>django-admin export_urlconf_to_file &gt; <span class=\"s2\">\"urlconf.json\"</span>\n</pre>\n<p>To create a file called <code>urlconf.json</code></p>\n<p>Then you can import the file somewhere else like this:</p>\n<pre><span class=\"n\">import_urlconf</span><span class=\"o\">.</span><span class=\"n\">from_file</span><span class=\"p\">(</span><span class=\"s2\">\"urlconf.json\"</span><span class=\"p\">)</span>\n</pre>\n<h3>Example use-case</h3>\n<p>At Lyst, we have a skeleton repo that we share with digital agencies who create special pages for us like <a href=\"https://www.lyst.com/year-in-fashion-2019/\" rel=\"nofollow\">The Year in Fashion</a>. The repo is a stripped-down simulation of our production environment. Agencies develop pages for our website within the repo, so integration is easy.</p>\n<p>We include a URLconf file in the skeleton repo. Before we did this, agencies used to hard-code URLs into their work. But now:</p>\n<ul>\n<li>They can make URLs in the standard Django way.</li>\n<li>The URLs are always correct; no silent errors.</li>\n<li>The URLs are localised for all the languages we support.</li>\n</ul>\n<h2>Serve URLconf from an endpoint</h2>\n<p>This view returns URLconf JSON:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">django_urlconf_export.views.export</span> <span class=\"kn\">import</span> <span class=\"n\">URLConfExportView</span>\n\n<span class=\"n\">urlpatterns</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"n\">url</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s2\">\"^urlconf/\"</span><span class=\"p\">,</span> <span class=\"n\">URLConfExportView</span><span class=\"o\">.</span><span class=\"n\">as_view</span><span class=\"p\">()),</span>\n<span class=\"p\">]</span>\n</pre>\n<p>Then you can import from a URI like this:</p>\n<pre><span class=\"n\">import_urlconf</span><span class=\"o\">.</span><span class=\"n\">from_uri</span><span class=\"p\">(</span><span class=\"s2\">\"/urlconf/\"</span><span class=\"p\">)</span>\n</pre>\n<h3>Example use-case</h3>\n<p>A Lyst we have 3 services that make Lyst website urls:</p>\n<ul>\n<li>An email service.</li>\n<li>A sitemaps generation service.</li>\n<li>A paid advertising purchasing service.</li>\n</ul>\n<p>These services fetch URLconf from the Lyst website when they boot up, and update it periodically.</p>\n<p>So when the URLs change, we don't need to update any service code. This is particularly helpful when we add a new language for our localised URLs.</p>\n<h1>Integration</h1>\n<h2>Exporting from a Django service</h2>\n<p>In most situations, the best approach is to <a href=\"https://github.com/lyst/django-urlconf-export#serve-urlconf-from-an-endpoint\" rel=\"nofollow\">serve URLconf from an endpoint</a>.</p>\n<p>In some situations, it might work better if you <a href=\"https://github.com/lyst/django-urlconf-export#save-urlconf-to-a-file\" rel=\"nofollow\">save URLconf to a file</a>.</p>\n<p>If you have a specialised use-case that isn't handled by either of these approaches, You could roll your own core logic to <a href=\"https://github.com/lyst/django-urlconf-export#export-urlconf-as-json\" rel=\"nofollow\">export URLconf as JSON</a>.</p>\n<p>If you roll a bespoke integration you think might be useful to others, please feel free to submit a PR.</p>\n<h2>Importing in a non-Django service</h2>\n<p>You can import URLconf and make URLs in any Python code.</p>\n<p>First, add Django as a dependency e.g. <code>pip install django</code></p>\n<p>Then call <code>import_urlconf.init_django()</code> before you import any URLconf e.g.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">django_urlconf_export</span> <span class=\"kn\">import</span> <span class=\"n\">import_urlconf</span>\n\n<span class=\"n\">import_urlconf</span><span class=\"o\">.</span><span class=\"n\">init_django</span><span class=\"p\">()</span>\n\n<span class=\"n\">import_urlconf</span><span class=\"o\">.</span><span class=\"n\">from_uri</span><span class=\"p\">(</span><span class=\"s2\">\"https://www.example.com/urlconf/\"</span><span class=\"p\">)</span>\n</pre>\n<p>Then you can call <code>reverse()</code> and make URLs for your website, just like in the website code.</p>\n<h3>Edge cases</h3>\n<p>By default, Django will be initialized with <code>settings.ROOT_URLCONF == \"imported_urlconf\"</code></p>\n<p>The module will be created when you import some urlconf.</p>\n<p>If you need to set <code>settings.ROOT_URLCONF</code> to different module name, you can:</p>\n<pre><span class=\"n\">import_urlconf</span><span class=\"o\">.</span><span class=\"n\">init_django</span><span class=\"p\">(</span><span class=\"n\">ROOT_URLCONF</span><span class=\"o\">=</span><span class=\"s2\">\"another_urlconf_module\"</span><span class=\"p\">)</span>\n</pre>\n<p>You can set any other Django settings this way too.</p>\n<p>See <a href=\"https://github.com/lyst/django-urlconf-export/blob/master/src/django_urlconf_export/import_urlconf.py\" rel=\"nofollow\">the source code</a> for the default Django settings.</p>\n<h2>Importing in a Django service with own URLs</h2>\n<p>By default, the library imports URLconf into the root URLconf module of the service - <code>settings.ROOT_URLCONF</code>.</p>\n<p>But if the service has its own URLs, <code>settings.ROOT_URLCONF</code> will have some URLconf in it already.</p>\n<p>To avoid overwriting the service's URLs, you can import to a different module with this Django setting:</p>\n<pre><span class=\"n\">URLCONF_IMPORT_ROOT_URLCONF</span> <span class=\"o\">=</span> <span class=\"s2\">\"imported_urlconf\"</span>\n</pre>\n<p>Or you can add a <code>urlconf=\"...\"</code> argument when you import:</p>\n<pre><span class=\"n\">import_urlconf</span><span class=\"o\">.</span><span class=\"n\">from_file</span><span class=\"p\">(</span><span class=\"s2\">\"urlconf.json\"</span><span class=\"p\">,</span> <span class=\"n\">urlconf</span><span class=\"o\">=</span><span class=\"s2\">\"imported_urlconf\"</span><span class=\"p\">)</span>\n</pre>\n<p>If the module does not exist, it will be created - so you can call it anything you like.</p>\n<p>If the module exists, any existing <code>urlpatterns</code> will be overwritten.</p>\n<p>Then you can make a url like:</p>\n<pre><span class=\"n\">reverse</span><span class=\"p\">(</span><span class=\"s2\">\"login\"</span><span class=\"p\">,</span> <span class=\"n\">urlconf</span><span class=\"o\">=</span><span class=\"s2\">\"imported_urlconf\"</span><span class=\"p\">)</span>\n</pre>\n<p>Or for convenience, you could make a <code>website_urls.py</code> module like this:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">django</span> <span class=\"kn\">import</span> <span class=\"n\">urls</span> <span class=\"k\">as</span> <span class=\"n\">django_urls</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.apps</span> <span class=\"kn\">import</span> <span class=\"n\">AppConfig</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django_urlconf_export</span> <span class=\"kn\">import</span> <span class=\"n\">import_urlconf</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">WebsiteURLsAppConfig</span><span class=\"p\">(</span><span class=\"n\">AppConfig</span><span class=\"p\">):</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s2\">\"website_urls\"</span>\n    <span class=\"n\">verbose_name</span> <span class=\"o\">=</span> <span class=\"s2\">\"Make URLs for our website in any Django service.\"</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">ready</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">        When Django initializes, get the latest urlconf from our website.</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"n\">update_urlconf</span><span class=\"p\">()</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">update_urlconf</span><span class=\"p\">():</span>\n    <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">    Download the latest urlconf from our website</span>\n<span class=\"sd\">    \"\"\"</span>\n    <span class=\"n\">import_urlconf</span><span class=\"o\">.</span><span class=\"n\">from_uri</span><span class=\"p\">(</span><span class=\"s2\">\"https://www.example.com/urlconf/\"</span><span class=\"p\">,</span> <span class=\"n\">urlconf</span><span class=\"o\">=</span><span class=\"s2\">\"imported_urlconf\"</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">reverse</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">    Thin wrapper for Django's reverse method, to make a URL for our website.</span>\n<span class=\"sd\">    \"\"\"</span>\n    <span class=\"k\">return</span> <span class=\"n\">django_urls</span><span class=\"o\">.</span><span class=\"n\">reverse</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"n\">urlconf</span><span class=\"o\">=</span><span class=\"s2\">\"imported_urlconf\"</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n</pre>\n<p>Adding <code>\"website_urls.WebsiteURLsAppConfig\"</code> to <code>INSTALLED_APPS</code> in Django setting will import the URLconf when Django starts up.</p>\n<p>Then you can make URLs for your website by calling <code>website_urls.reverse(...)</code></p>\n<p>If you want to update the URLconf later, you can call <code>website_urls.update_urlconf()</code>.</p>\n<h2>Importing in a Django service with no URLs</h2>\n<p>If your Django service doesn't have any URLs of it's own, you can store imported URLconf in the default URLconf module - <code>settings.ROOT_URLCONF</code>.</p>\n<p>This makes things a bit simpler. You could make a <code>website_urls.py</code> module like this:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">django.apps</span> <span class=\"kn\">import</span> <span class=\"n\">AppConfig</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django_urlconf_export</span> <span class=\"kn\">import</span> <span class=\"n\">import_urlconf</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">WebsiteURLsAppConfig</span><span class=\"p\">(</span><span class=\"n\">AppConfig</span><span class=\"p\">):</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s2\">\"website_urls\"</span>\n    <span class=\"n\">verbose_name</span> <span class=\"o\">=</span> <span class=\"s2\">\"Make URLs for our website in any Django service.\"</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">ready</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">        When Django initializes, get the latest urlconf from our website.</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"n\">update_urlconf</span><span class=\"p\">()</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">update_urlconf</span><span class=\"p\">():</span>\n    <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">    Download the latest urlconf from our website</span>\n<span class=\"sd\">    \"\"\"</span>\n    <span class=\"n\">import_urlconf</span><span class=\"o\">.</span><span class=\"n\">from_uri</span><span class=\"p\">(</span><span class=\"s2\">\"https://www.example.com/urlconf/\"</span><span class=\"p\">)</span>\n</pre>\n<p>Adding <code>\"website_urls.WebsiteURLsAppConfig\"</code> to <code>INSTALLED_APPS</code> in Django setting will import the URLconf when Django starts up.</p>\n<p>Then you can call <code>reverse()</code> and make URLs for your website, just like in the website code:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">django.urls</span> <span class=\"kn\">import</span> <span class=\"n\">reverse</span>\n\n<span class=\"n\">reverse</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">)</span>\n</pre>\n<p>If you want to update the URLconf later, you can call <code>website_urls.update_urlconf()</code>.</p>\n<h1>Feature Details</h1>\n<p>If you prefer to read code than docs, the tests have examples of all feature details:</p>\n<ul>\n<li><a href=\"https://github.com/lyst/django-urlconf-export/blob/master/tests/django_urlconf_export/test_export_urlconf.py\" rel=\"nofollow\">export_urlconf tests</a></li>\n<li><a href=\"https://github.com/lyst/django-urlconf-export/blob/master/tests/django_urlconf_export/test_import_urlconf.py\" rel=\"nofollow\">import_urlconf tests</a></li>\n</ul>\n<h2>Export whitelist and blacklist</h2>\n<p>By default, all URLs will be exported. But you can set a whitelist and/or blacklist with these Django settings:</p>\n<pre><span class=\"n\">URLCONF_EXPORT_WHITELIST</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">\"only-show-this-url\"</span><span class=\"p\">}</span>\n<span class=\"n\">URLCONF_EXPORT_BLACKLIST</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">\"hide-this-url\"</span><span class=\"p\">,</span> <span class=\"s2\">\"hide-this-one-too\"</span><span class=\"p\">}</span>\n</pre>\n<p>The whitelist is applied first, then the blacklist.</p>\n<p>List items can be regexes, for example <code>\"secret-.\"</code> matches all URL names that start with <code>secret-</code> like <code>secret-page-1</code>, <code>secret-page-2</code> etc.</p>\n<p>The whitelist and blacklist sets are a mixture of:</p>\n<ul>\n<li>URL names</li>\n<li>URL namespaces</li>\n</ul>\n<p>For included URLs with a <code>namespace</code> (see <a href=\"https://docs.djangoproject.com/en/3.0/topics/http/urls/#url-namespaces\" rel=\"nofollow\">Django docs</a>) like the Django admin urls, the <code>namespace</code> and the <code>url_name</code> must be <em>both</em> be allowed by the lists.</p>\n<p>So you can ban all URLs in the <code>admin</code> namespace with <code>blacklist = {\"admin\"}</code>.</p>\n<p>If you want to export <code>admin:some-url</code> but no other <code>admin</code> URLs, set <code>whitelist = {\"admin\", \"some-url\"}</code>.</p>\n<p>Note: if you set <code>whitelist = {\"admin\"}</code> <em>no admin URLs will be exported</em>.</p>\n<p>See the <a href=\"https://github.com/lyst/django-urlconf-export/blob/master/tests/django_urlconf_export/test_export_urlconf.py\" rel=\"nofollow\">unit tests</a> for more examples.</p>\n<p>You can check the whitelist and/or blacklist are working as expected like this:</p>\n<pre><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">export_urlconf</span><span class=\"o\">.</span><span class=\"n\">get_all_allowed_url_names</span><span class=\"p\">())</span>\n</pre>\n<p>You can also set whitelist or blacklist explicitly when exporting as JSON:</p>\n<pre><span class=\"n\">export_urlconf</span><span class=\"o\">.</span><span class=\"n\">as_json</span><span class=\"p\">(</span>\n    <span class=\"n\">whitelist</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"only-show-this-url\"</span><span class=\"p\">},</span>\n    <span class=\"n\">blacklist</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"hide-this-url\"</span><span class=\"p\">,</span> <span class=\"s2\">\"hide-this-one-too\"</span><span class=\"p\">}</span>\n<span class=\"p\">)</span>\n</pre>\n<p>Or when generating a file:</p>\n<pre>django-admin export_urlconf_to_file <span class=\"se\">\\</span>\n        --whitelist <span class=\"s1\">'only-show-this-url'</span> <span class=\"se\">\\</span>\n        --blacklist <span class=\"s1\">'hide-this-url\", \"hide-this-one-too'</span> <span class=\"se\">\\</span>\n        &gt; urlconf.json\n</pre>\n<p>Or when serving from an endpoint:</p>\n<pre><span class=\"n\">urlpatterns</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"n\">url</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s2\">\"^urlconf/\"</span><span class=\"p\">,</span> <span class=\"n\">URLConfExportView</span><span class=\"o\">.</span><span class=\"n\">as_view</span><span class=\"p\">(</span>\n        <span class=\"n\">whitelist</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"only-show-this-url\"</span><span class=\"p\">},</span>\n        <span class=\"n\">blacklist</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"hide-this-url\"</span><span class=\"p\">,</span> <span class=\"s2\">\"hide-this-one-too\"</span><span class=\"p\">}</span>\n    <span class=\"p\">)),</span>\n<span class=\"p\">]</span>\n</pre>\n<h2>Included URLs</h2>\n<p>We fully support included URLconf. The JSON looks like:</p>\n<pre><span class=\"p\">{</span>\n    <span class=\"s2\">\"regex\"</span><span class=\"p\">:</span> <span class=\"s2\">\"^colors/\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"namespace\"</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"app_name\"</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"includes\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n        <span class=\"p\">{</span><span class=\"s2\">\"regex\"</span><span class=\"p\">:</span> <span class=\"s2\">\"^red/$\"</span><span class=\"p\">,</span> <span class=\"s2\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"red\"</span><span class=\"p\">},</span>\n        <span class=\"p\">{</span><span class=\"s2\">\"regex\"</span><span class=\"p\">:</span> <span class=\"s2\">\"^blue/$\"</span><span class=\"p\">,</span> <span class=\"s2\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"blue\"</span><span class=\"p\">}</span>\n    <span class=\"p\">],</span>\n<span class=\"p\">}</span>\n</pre>\n<h2>I18n URLs</h2>\n<p>We fully support internationalized URLs.</p>\n<p>The JSON looks like:</p>\n<pre><span class=\"p\">{</span>\n    <span class=\"s2\">\"regex\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s2\">\"en-us\"</span><span class=\"p\">:</span> <span class=\"s2\">\"^color/$\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"en-gb\"</span><span class=\"p\">:</span> <span class=\"s2\">\"^colour/$\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"fr-fr\"</span><span class=\"p\">:</span> <span class=\"s2\">\"^couleur/$\"</span>\n    <span class=\"p\">},</span>\n    <span class=\"s2\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"color\"</span>\n<span class=\"p\">}</span>\n</pre>\n<hr>\n<p>Some websites (e.g. Lyst) only localise URLs at the language-family level.</p>\n<p>For example, <code>en</code> rather than <code>en-us</code> and <code>en-gb</code>.</p>\n<p>If you set this Django setting:</p>\n<pre><span class=\"n\">URLCONF_EXPORT_LANGUAGE_WITHOUT_COUNTRY</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n</pre>\n<p>Then you get JSON like:</p>\n<pre><span class=\"p\">{</span>\n    <span class=\"s2\">\"regex\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s2\">\"en\"</span><span class=\"p\">:</span> <span class=\"s2\">\"^color/$\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"fr\"</span><span class=\"p\">:</span> <span class=\"s2\">\"^couleur/$\"</span>\n    <span class=\"p\">},</span>\n    <span class=\"s2\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"color\"</span>\n<span class=\"p\">}</span>\n</pre>\n<p>You can also add an argument when exporting as JSON:</p>\n<pre><span class=\"n\">export_urlconf</span><span class=\"o\">.</span><span class=\"n\">as_json</span><span class=\"p\">(</span><span class=\"n\">language_without_country</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<p>Or when generating a file:</p>\n<pre>django-admin export_urlconf_to_file --language-without-country &gt; urlconf.json\n</pre>\n<p>Or when serving from an endpoint:</p>\n<pre><span class=\"n\">urlpatterns</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"n\">url</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s2\">\"^urlconf/\"</span><span class=\"p\">,</span> <span class=\"n\">URLConfExportView</span><span class=\"o\">.</span><span class=\"n\">as_view</span><span class=\"p\">(</span><span class=\"n\">language_without_country</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)),</span>\n<span class=\"p\">]</span>\n</pre>\n<hr>\n<p>We support the <code>LocalePrefixPattern</code> (see <a href=\"https://docs.djangoproject.com/en/3.0/topics/i18n/translation/#language-prefix-in-url-patterns\" rel=\"nofollow\">Django docs</a>.</p>\n<p>So if you have URLconf like:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">django.conf.urls.i18n</span> <span class=\"kn\">import</span> <span class=\"n\">i18n_patterns</span>\n\n<span class=\"n\">urlpatterns</span> <span class=\"o\">=</span> <span class=\"n\">i18n_patterns</span><span class=\"p\">(</span>\n    <span class=\"n\">url</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s2\">\"^$\"</span><span class=\"p\">,</span> <span class=\"n\">View</span><span class=\"o\">.</span><span class=\"n\">as_view</span><span class=\"p\">(),</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"index\"</span><span class=\"p\">),</span>\n<span class=\"p\">)</span>\n</pre>\n<p>You get JSON like:</p>\n<pre><span class=\"p\">{</span>\n    <span class=\"s2\">\"isLocalePrefix\"</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"classPath\"</span><span class=\"p\">:</span> <span class=\"s2\">\"django.urls.resolvers.LocalePrefixPattern\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"includes\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n        <span class=\"p\">{</span><span class=\"s2\">\"regex\"</span><span class=\"p\">:</span> <span class=\"s2\">\"^$\"</span><span class=\"p\">,</span> <span class=\"s2\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"index\"</span><span class=\"p\">}</span>\n    <span class=\"p\">],</span>\n<span class=\"p\">}</span>\n</pre>\n<p>Note that <code>classPath</code> is saved in the JSON. So if (like Lyst) your project uses a subclass of Django's <code>LocalePrefixPattern</code> it will work.</p>\n<h2>Export non-default root URLconf</h2>\n<p>By default, we export the root URLconf module that creates the endpoints of your Django website: <code>settings.ROOT_URLCONF</code>. This is almost always what you want.</p>\n<p>If you need to export from a different root URLconf module, you can use this Django setting:</p>\n<pre><span class=\"n\">URLCONF_EXPORT_ROOT_URLCONF</span> <span class=\"o\">=</span> <span class=\"s2\">\"path.to.non_default_root_urlconf\"</span>\n</pre>\n<p>Or when exporting as JSON:</p>\n<pre><span class=\"n\">export_urlconf</span><span class=\"o\">.</span><span class=\"n\">as_json</span><span class=\"p\">(</span><span class=\"s2\">\"path.to.non_default_root_urlconf\"</span><span class=\"p\">)</span>\n</pre>\n<p>Or when generating a file:</p>\n<pre>django-admin export_urlconf_to_file <span class=\"se\">\\</span>\n        --urlconf <span class=\"s1\">'path.to.non_default_root_urlconf'</span> <span class=\"se\">\\</span>\n        &gt; urlconf.json\n</pre>\n<p>Or when serving from an endpoint:</p>\n<pre><span class=\"n\">urlpatterns</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"n\">url</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s2\">\"^urlconf/\"</span><span class=\"p\">,</span> <span class=\"n\">URLConfExportView</span><span class=\"o\">.</span><span class=\"n\">as_view</span><span class=\"p\">(</span>\n        <span class=\"n\">urlconf</span><span class=\"o\">=</span><span class=\"s2\">\"path.to.non_default_root_urlconf\"</span><span class=\"p\">,</span>\n    <span class=\"p\">)),</span>\n<span class=\"p\">]</span>\n</pre>\n<h2>Quality assurance for i18n URLs</h2>\n<p>This library is particularly useful if you have internationalized URLs.</p>\n<p>We provide some methods to help ensure URLs are translated correctly.</p>\n<h3>Check for translation errors in URL patterns</h3>\n<p>If you want to check that URL pattern kwargs are the same for all translations of a URL, you can add a unit test to your project like:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">django_urlconf_export</span> <span class=\"kn\">import</span> <span class=\"n\">urlconf_qa</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">test_for_url_translation_errors</span><span class=\"p\">():</span>\n    <span class=\"n\">urlconf_qa</span><span class=\"o\">.</span><span class=\"n\">assert_url_kwargs_are_the_same_for_all_languages</span><span class=\"p\">()</span>\n</pre>\n<h3>Ensure URL patterns use kwargs, not args</h3>\n<p>Django allows you to make URL patterns that have positional arguments (<code>args</code>) and/or named keyword arguments (<code>kwargs</code>).</p>\n<p>This flexibility can lead to confusion, particularly in large teams. So it can be helpful to ensure developers only use <code>kwargs</code> and not <code>args</code>.</p>\n<p>It's also less error-prone to translate URLs that use <code>kwargs</code>, because translators are free to change the order of <code>kwargs</code> in the URL to match the word order in their language.</p>\n<p>For example, at Lyst we have URLs like:</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>Example URL</th>\n<th>Localised URL Pattern</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>English</td>\n<td><code>/gucci-bags</code></td>\n<td><code>/(?P&lt;designer_name&gt;.+)-(?P&lt;product_type&gt;.+)</code></td>\n</tr>\n<tr>\n<td>French</td>\n<td><code>/sacs-gucci</code></td>\n<td><code>/(?P&lt;product_type&gt;.+)-(?P&lt;designer_name&gt;.+)</code></td>\n</tr></tbody></table>\n<p>To enforce that URL patterns always use <code>kwargs</code> and not <code>args</code>, add a test like this:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">django_urlconf_export</span> <span class=\"kn\">import</span> <span class=\"n\">urlconf_qa</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">test_all_urls_use_kwargs</span><span class=\"p\">():</span>\n    <span class=\"n\">urlconf_qa</span><span class=\"o\">.</span><span class=\"n\">assert_all_urls_use_kwargs_not_args</span><span class=\"p\">()</span>\n</pre>\n<h1>Development Guide</h1>\n<h2>Running tests</h2>\n<p><code>pip install tox</code> (or <code>pip3 install tox</code>)</p>\n<p>Then run <code>tox</code></p>\n<h2>Developing</h2>\n<p><code>pip install --user pipenv</code> (or <code>pip3 install --user pipenv</code>)</p>\n<p>Then run:</p>\n<ul>\n<li><code>pipenv install</code></li>\n<li><code>pipenv shell</code></li>\n<li><code>exit</code></li>\n<li><code>pipenv --venv</code></li>\n</ul>\n<p>The location of the virtual environment will be displayed.</p>\n<p>Here is a <a href=\"https://stackoverflow.com/a/50749980/3048733\" rel=\"nofollow\">guide for using this venv in PyCharm</a>.</p>\n<h2>Changing test dependencies</h2>\n<p>You need to <code>pipenv install {new-dependency}</code> and also add the dependency in <code>tox.ini</code>.</p>\n<h2>Formatting imports and code</h2>\n<p>First run <code>pipenv shell</code></p>\n<p>Then run:</p>\n<ul>\n<li><code>isort</code> - format imports</li>\n<li><code>black src/ tests/</code> - format code</li>\n</ul>\n<p>Then <code>exit</code> to quit the shell.</p>\n<h2>Publishing to PyPi</h2>\n<p>Create a new release, and the package will be published automatically by a GitHub action.</p>\n<h1>Further Development</h1>\n<p>It would be cool if we could make URLs in JavaScript using the JSON generated by this library. Then we could make URLs on the front-end, and in Node services.</p>\n<p>Lyst are not working on this at the moment. If this feature would be useful to you, a PR would be very welcome :)</p>\n\n          </div>"}, "last_serial": 6920131, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "3e92473cb0bbd7cf381973fd85b820c5", "sha256": "46aa1efd0df43b0734ad8fce2f0e0ddefe248abef11b2c65c5997d867cab1fd7"}, "downloads": -1, "filename": "django_urlconf_export-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "3e92473cb0bbd7cf381973fd85b820c5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 10410, "upload_time": "2020-03-16T12:27:15", "upload_time_iso_8601": "2020-03-16T12:27:15.576532Z", "url": "https://files.pythonhosted.org/packages/53/be/afe8a2a99dc0346ddb474a3ead74d67034e06996cd987ad680627ea0cdfa/django_urlconf_export-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "488a1c3c72f6168b765422ae60b2fc85", "sha256": "a05f4f03a0b47e60f784c86f304f136b25e473995702c1c3ab9bf8d5782c77fe"}, "downloads": -1, "filename": "django-urlconf-export-1.0.0.tar.gz", "has_sig": false, "md5_digest": "488a1c3c72f6168b765422ae60b2fc85", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 662512, "upload_time": "2020-03-16T12:27:17", "upload_time_iso_8601": "2020-03-16T12:27:17.775588Z", "url": "https://files.pythonhosted.org/packages/00/4d/8a3e3208a5222e4ada72901d3c669352351bb020aade1492a0b6a664532d/django-urlconf-export-1.0.0.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "b51c89cf357ce07f4519215d4b303e63", "sha256": "37b7de1b46b027ed24c11f48bbb238594e081e30bf87e619c3a3988fbaba121f"}, "downloads": -1, "filename": "django_urlconf_export-1.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "b51c89cf357ce07f4519215d4b303e63", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 14924, "upload_time": "2020-03-16T13:24:48", "upload_time_iso_8601": "2020-03-16T13:24:48.611434Z", "url": "https://files.pythonhosted.org/packages/6e/16/619e58aa930c1e70f702c83477d276a8c17d1fcc52ff48dcdb68c4c867f8/django_urlconf_export-1.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "89588f0055b8d848a16d8855f7673088", "sha256": "15648380221a09206700f728bae7c502066b7fd13f699e83a7a430ac3b0a0448"}, "downloads": -1, "filename": "django-urlconf-export-1.0.2.tar.gz", "has_sig": false, "md5_digest": "89588f0055b8d848a16d8855f7673088", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 673171, "upload_time": "2020-03-16T13:24:50", "upload_time_iso_8601": "2020-03-16T13:24:50.043043Z", "url": "https://files.pythonhosted.org/packages/3e/60/fa63561415245f5ad435ce866170e54c91d501908c6577a1fdcdee4e74ee/django-urlconf-export-1.0.2.tar.gz", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "cacfb8f3147d5143ad6bb7e386b19a68", "sha256": "570de5bc36760f82fc25237d96b3672f03e69e19970ac77e868be77809ec64df"}, "downloads": -1, "filename": "django_urlconf_export-1.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "cacfb8f3147d5143ad6bb7e386b19a68", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 14973, "upload_time": "2020-03-16T13:39:38", "upload_time_iso_8601": "2020-03-16T13:39:38.510182Z", "url": "https://files.pythonhosted.org/packages/e6/c5/39f624370a9dd83c17cd72b0d84d8a6fdf0ae76026a13f1f102fd09b2971/django_urlconf_export-1.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fbf3fdd3bc409909d1ed0adcf9889a81", "sha256": "e5c000f6e8e5543ad35812ba5f6c2a094bb677d881cc512a3f5e056218041694"}, "downloads": -1, "filename": "django-urlconf-export-1.0.3.tar.gz", "has_sig": false, "md5_digest": "fbf3fdd3bc409909d1ed0adcf9889a81", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 673351, "upload_time": "2020-03-16T13:39:39", "upload_time_iso_8601": "2020-03-16T13:39:39.884847Z", "url": "https://files.pythonhosted.org/packages/c2/8a/90a6db5c59bef01d02da908803b8b8d1a50c62d5d5e5d572e0711e42587f/django-urlconf-export-1.0.3.tar.gz", "yanked": false}], "1.0.4": [{"comment_text": "", "digests": {"md5": "dfa33d4c779f757e4bbaea21255e4281", "sha256": "319521012dbe3a7a43d59bf587df1a56449d8ee7912205b7d8e4cd4297b11815"}, "downloads": -1, "filename": "django_urlconf_export-1.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "dfa33d4c779f757e4bbaea21255e4281", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 14976, "upload_time": "2020-03-16T21:29:30", "upload_time_iso_8601": "2020-03-16T21:29:30.671907Z", "url": "https://files.pythonhosted.org/packages/66/4c/4c72d0fdbc1f176d50d911b46c502724a1f64b98bb1209860e0223671c4d/django_urlconf_export-1.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5088703a18e55b9adbdc30d099bc7c93", "sha256": "a2be1400e2712eaf73bad9a489015a8622821bc838be5c2fe2e81af67fabbd2b"}, "downloads": -1, "filename": "django-urlconf-export-1.0.4.tar.gz", "has_sig": false, "md5_digest": "5088703a18e55b9adbdc30d099bc7c93", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 673365, "upload_time": "2020-03-16T21:29:32", "upload_time_iso_8601": "2020-03-16T21:29:32.052098Z", "url": "https://files.pythonhosted.org/packages/92/85/81d2d9c4d5bc26e5ed14675f7b94db7708d37808e47cbecedf49343e4e53/django-urlconf-export-1.0.4.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "e768569091ccc7c150f28811ae763804", "sha256": "9367c0cf7bfd4350353010ad96c2cb18d802229037072fa47aed4cf7714b6496"}, "downloads": -1, "filename": "django_urlconf_export-1.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "e768569091ccc7c150f28811ae763804", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 16337, "upload_time": "2020-03-31T13:19:47", "upload_time_iso_8601": "2020-03-31T13:19:47.016899Z", "url": "https://files.pythonhosted.org/packages/e8/12/7e2c4c3eadc8ea74a0a4338e97040413ab78955810b460f6cbaec1c55cf5/django_urlconf_export-1.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7f2d7b94f528d4ec49b63cbf55d6e885", "sha256": "e7262d5e2d131d9eb5df04e4b891175e352b1958d247a906b2e4c2d83b989f48"}, "downloads": -1, "filename": "django-urlconf-export-1.1.0.tar.gz", "has_sig": false, "md5_digest": "7f2d7b94f528d4ec49b63cbf55d6e885", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 676435, "upload_time": "2020-03-31T13:19:48", "upload_time_iso_8601": "2020-03-31T13:19:48.548944Z", "url": "https://files.pythonhosted.org/packages/5a/97/2db2e16f158c496c0ee62eef6ccedcd785c435790d9dc0dd0c7295af8917/django-urlconf-export-1.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e768569091ccc7c150f28811ae763804", "sha256": "9367c0cf7bfd4350353010ad96c2cb18d802229037072fa47aed4cf7714b6496"}, "downloads": -1, "filename": "django_urlconf_export-1.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "e768569091ccc7c150f28811ae763804", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 16337, "upload_time": "2020-03-31T13:19:47", "upload_time_iso_8601": "2020-03-31T13:19:47.016899Z", "url": "https://files.pythonhosted.org/packages/e8/12/7e2c4c3eadc8ea74a0a4338e97040413ab78955810b460f6cbaec1c55cf5/django_urlconf_export-1.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7f2d7b94f528d4ec49b63cbf55d6e885", "sha256": "e7262d5e2d131d9eb5df04e4b891175e352b1958d247a906b2e4c2d83b989f48"}, "downloads": -1, "filename": "django-urlconf-export-1.1.0.tar.gz", "has_sig": false, "md5_digest": "7f2d7b94f528d4ec49b63cbf55d6e885", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 676435, "upload_time": "2020-03-31T13:19:48", "upload_time_iso_8601": "2020-03-31T13:19:48.548944Z", "url": "https://files.pythonhosted.org/packages/5a/97/2db2e16f158c496c0ee62eef6ccedcd785c435790d9dc0dd0c7295af8917/django-urlconf-export-1.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:52:12 2020"}