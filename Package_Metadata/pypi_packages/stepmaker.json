{"info": {"author": "Kevin L. Mitchell", "author_email": "klmitch@mit.edu", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Operating System :: OS Independent", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6"], "description": "=================================\nStep Maker Step-parsing Framework\n=================================\n\n.. image:: https://travis-ci.org/klmitch/stepmaker.svg?branch=master\n    :target: https://travis-ci.org/klmitch/stepmaker\n\nThe `ansible`_ system automation tool uses, as its primary primitive,\na list of steps to execute, expressed in YAML list syntax.  Each step\nis described as a dictionary, with one key indicating the actual\naction to take, along with some additional keys that describe metadata\nabout the step (such as a description) or modifiers for the step (such\nas conditional expressions).  This package provides a framework for\nbuilding applications that use similar step descriptions.\n\nSteps\n=====\n\nAs mentioned above, steps consist of metadata, modifiers, and an\naction, all expressed through keys on the step dictionary.  The\n``stepmaker`` package provides the abstract superclasses ``Step``,\n``Modifier``, and ``Action`` that can be extended to provide\napplication-specific step structure.\n\nThe ``Step`` class is the main class for ``stepmaker``.  Implementors\nmust subclass ``Step`` and provide an implementation for the\n``validate()`` method, as well as setting the ``namespace_actions``\nand ``namespace_modifiers`` class variables.  The ``metadata_keys``\nclass variable can be used to identify particular keys as metadata.\nThe ``Step`` class provides a ``parse_list()`` class method for\nparsing a list of dictionaries as step descriptions, using actions and\nmodifiers discovered in the entrypoint groups declared using\n``namespace_actions`` and ``namespace_modifiers``.  Invoking the step\nis as simple as calling the ``Step`` object with an\napplication-specific context.\n\nThe ``Action`` class is an abstract superclass for step actions.\nImplementors must subclass ``Action`` and implement its ``validate()``\nand ``__call__()`` methods.  The ``Action`` subclass performs the\nactual work of the step.  Note that actions are classed as either\n\"eager\" or \"lazy\", controlled by the ``eager`` class variable, with\nthe default being lazy.  Eager actions can be used to allow for\nincluding other files or other libraries of step actions during\nparsing by ``Step.parse_list()``.\n\nThe ``Modifier`` class is an abstract superclass for step modifiers.\nA step modifier is able to modify how the action is performed;\neverything from temporary mutations of the execution context to\nskipping the step, or even executing the action multiple times (the\n``Step.evaluate()`` method can facilitate this).  Implementors must\nimplement its ``validate()`` method, and then may implement the\n``pre_call()`` and/or ``post_call()`` hook methods to perform the\nnecessary work.  Implementors may also set the ``restriction`` class\nvariable to restrict which actions a modifier can be used with; the\n``before`` and ``after`` class variables provide control over the\norder with which modifiers are applied; and the ``required`` and\n``prohibited`` class variables can control which other modifiers are\nrequired or prohibited on a given step.\n\nFor full details on defining steps, see the documentation on the\n``Step``, ``Action``, and ``Modifier`` classes.\n\nUtilities\n=========\n\nA number of utilities are also made available to assist with the\ncreation of a step-driven application.  For instance, the\n``validate()`` methods of the ``Step``, ``Action``, and ``Modifier``\nclasses could be implemented using the ``jsonschema`` package; the\n``jsonschema_validator()`` context manager can be used with\n``jsonschema.validate()`` to translate schema validation errors into\nmore helpful ``StepError`` exceptions, which include the \"address\" of\na step configuration error.  The ``Environment`` class is a special\ndictionary-like object containing system environment variables, but\nalso includes methods for registering \"special\" translators for\nenvironment variables (e.g., the \"PATH\" environment variable could be\ntranslated into a Python list-like object using the ``SpecialList``\ntranslator), opening files relative to a working directory associated\nwith the ``Environment`` object, and even executing shell commands.\nFinally, the ``RedactedObject`` and ``RedactedDict`` classes proxy to\nother objects, but are additionally capable of masking certain\nattributes or dictionary keys; this could be used on output routines\nto ensure that sensitive data such as passwords is not exposed to the\nconsole.\n\nModifiers\n---------\n\nModifiers can inhibit the further processing of a step by raising the\n``AbortStep`` exception from their ``pre_call()`` hook method.\nModifiers can also specify a result to be returned to the step's\ncaller by passing that result to ``AbortStep``.  If no result is\npassed, the result will be the special singleton ``skipped``.\n\nNote that ``post_call()`` processing of the modifier still occurs;\nraising ``AbortStep`` prevents the processing of modifiers after the\none that raised it, but the ``post_call()`` method of the raising\nmodifier, along with the ones called before, are still called with the\nresult proposed in the ``AbortStep``.\n\nAddresses and the Validator Methods\n-----------------------------------\n\nThe ``StepAddress`` class is used to express the location of a\nconfiguration item, and is used during parsing by ``Step.parse()`` and\n``Step.parse_list()`` to raise helpful errors that indicate the\nlocation of a configuration problem.  These addresses are also passed\non to actions and modifiers, and can be used by the ``validate()``\nmethods to raise appropriate ``StepError`` exceptions.  Additionally,\nif using the ``jsonschema`` package for validation, the\n``jsonschema_validator()`` context manager can be used to translate\nschema validation errors raised by the package into ``StepError``\nexceptions that include the address.  It can be used like so::\n\n    with jsonschema_validator(addr):\n        jsonschema.validate(config, schema)\n\n(Note that ``jsonschema`` is *not* a dependency of ``stepmaker``.  The\n``jsonschema_validator()`` function uses duck-typing to avoid needing\nto install ``jsonschema`` alongside ``stepmaker``.)\n\nRedacted Objects and Dictionaries\n---------------------------------\n\nSome data may be sensitive: an application developer may wish to\ninhibit the display of that data to the console.  This data may be a\nset of variables associated with the execution context, or it may even\nbe environment variables that may contain such things as passwords.\nTo ensure that such information cannot be accidentally displayed or\nused, an implementor may choose to proxy an object or dictionary using\nthe ``RedactedObject`` and ``RedactedDict`` classes.  These classes\nproxy attribute and, in the case of ``RedactedDict``, item accesses\nback to an underlying object, but can return instances of ``Redacted``\nfor certain attributes or items.  By default, these classes return a\nsingleton ``redacted`` instance of ``Redacted``, which has a default\nstring representation of \"<redacted>\".\n\nThe attributes and items to redact are controlled by sets of attribute\nnames or item keys.  This implements a black-list policy, where only\ncertain attributes or items are redacted; to implement a white-list\npolicy, where all attributes or items are redacted except for\nspecified exceptions, wrap a set in the ``Inverter`` class; this will\ninvert the sense of membership tests.\n\nIt should be noted that the sets of attributes and items passed to\n``RedactedObject`` and ``RedactedDict`` (and ``Inverter``) are saved\ndirectly, and can be updated by processes outside of the classes.\n\nEnvironment\n-----------\n\nStep-driven applications often need at least one step capable of\nexecuting shell commands on the system, and also often need to be able\nto manipulate environment variables and open files.  The ``stepmaker``\npackage provides an ``Environment`` class which provides all of this\nfunctionality in a single object.  The class is a dictionary\ncontaining the environment variables for execution of system commands\n(note that this is distinct from the current contents of\n``os.environ``, though the ``Environment`` class constructor uses the\ncurrent contents of ``os.environ`` as the default environment); the\nclass also keeps track of a current working directory (which is also\ndistinct from the process's current working directory).  Finally,\nspecial interpreters can be associated with environment variables,\nenabling, for instance, list-like access to the \"PATH\" environment\nvariable; a full collection of special interpreters is included, and\ndescribed below.\n\nThere are two ways to invoke a shell command using an ``Environment``\ninstance.  The first is to call ``popen()`` with a string or list\ndescribing the command and its options, and a set of keyword arguments\nsuitable for passing to ``subprocess.Popen``.  This will return a\n``subprocess.Popen`` instance, which may then be manipulated using the\nmethods provided by that class.  The second way to invoke a shell\ncommand is to call the ``Environment``; the ``__call__()`` method is\nsimilar to the ``subprocess.run()`` function provided in Python 3\nversions of ``subprocess``, and will return a\n``stepmaker.CompletedProcess`` object with the command's return code,\nalong with captured standard output and standard error (to capture\nthese streams, pass ``subprocess.PIPE`` or ``stepmaker.PIPE`` to the\n``stdout`` and/or ``stderr`` keyword arguments to ``__call__()``).\nAdditionally, if the ``input`` keyword argument is provided, it will\nbe sent to the command's standard input; and if the ``check`` keyword\nargument is set to ``True``, a ``stepmaker.ProcessError`` exception\nwill be raised if the command's return code is non-zero.  This will,\nof course, wait for process execution to complete before continuing.\n\nIn addition to ``stepmaker.PIPE``, the ``stepmaker`` package also\ncopies ``subprocess.STDOUT`` for convenience.  This allows the use of\nthe ``Environment`` command execution facilities without having to\nseparately import ``subprocess``.\n\nThe ``Environment`` class tracks a working directory, which can be\nchanged by setting the ``cwd`` property.  Commands are, by default,\nexecuted with there working directory set to the value of ``cwd``.  It\nis also possible to locate a file relative to the ``cwd``, using the\n``filename()`` method; and the file may even be opened (using the\n``open()`` built-in) with the ``open()`` method.\n\nSpecials\n~~~~~~~~\n\nSpecials are environment variable interpreters attached to an\n``Environment`` instance.  They can be registered at construction\ntime, by passing keyword arguments of the form ``VARIABLE=factory``\n(e.g., ``PATH=SpecialList``) to the constructor, or they can be\nregistered after the fact by calling the ``register()`` method of the\n``Environment``.  (Specials may also be unregistered by calling\n``register()`` without a factory function.)  Several specials are\nprovided, such as the ``SpecialList`` for list-like environment\nvariables, such as \"PATH\"; ``SpecialSet``, for set-like environment\nvariables (distinguished from list-like environment variables in that\nordering is not important); ``SpecialDict``, for dictionary-like\nenvironment variables containing \"key=value\" pairs; or\n``SpecialOrderedDict``, which is distinguished from ``SpecialDict`` by\nthe fact that it maintains the original key order.  The ``Special``\nabstract base class can be used for constructing other specials.\n\nIt should be noted that the ``SpecialList``, ``SpecialSet``,\n``SpecialDict``, and ``SpecialOrderedDict`` classes all contain a\n``with_sep()`` class method that can be used to construct a factory\nfunction using alternate separators.  If the default separators are\nnot suitable for a given application, then, instead of passing the\nclass as the factory function, pass the result of calling the class's\n``with_sep()`` class method with appropriate arguments.\n\nIt should also be noted that ``Environment`` never deletes an instance\nof a special unless a new special factory is registered (or the\nspecial is deregistered).  This means that the value can be kept\noutside of the environment.  In particular, it is possible to use a\n``SpecialSet`` with a ``RedactedDict`` class wrapping the\n``Environment``, so that environment variables to be redacted can be\nlisted in a particular environment variable.\n\n.. _ansible: https://www.ansible.com/\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/klmitch/stepmaker", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "stepmaker", "package_url": "https://pypi.org/project/stepmaker/", "platform": "", "project_url": "https://pypi.org/project/stepmaker/", "project_urls": {"Homepage": "https://github.com/klmitch/stepmaker"}, "release_url": "https://pypi.org/project/stepmaker/0.1.0/", "requires_dist": null, "requires_python": "", "summary": "Step Maker Step-parsing Framework", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://travis-ci.org/klmitch/stepmaker\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/klmitch/stepmaker.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/226e52af4730d1daa96c252a1938d717e9080272/68747470733a2f2f7472617669732d63692e6f72672f6b6c6d697463682f737465706d616b65722e7376673f6272616e63683d6d6173746572\"></a>\n<p>The <a href=\"https://www.ansible.com/\" rel=\"nofollow\">ansible</a> system automation tool uses, as its primary primitive,\na list of steps to execute, expressed in YAML list syntax.  Each step\nis described as a dictionary, with one key indicating the actual\naction to take, along with some additional keys that describe metadata\nabout the step (such as a description) or modifiers for the step (such\nas conditional expressions).  This package provides a framework for\nbuilding applications that use similar step descriptions.</p>\n<div id=\"steps\">\n<h2>Steps</h2>\n<p>As mentioned above, steps consist of metadata, modifiers, and an\naction, all expressed through keys on the step dictionary.  The\n<tt>stepmaker</tt> package provides the abstract superclasses <tt>Step</tt>,\n<tt>Modifier</tt>, and <tt>Action</tt> that can be extended to provide\napplication-specific step structure.</p>\n<p>The <tt>Step</tt> class is the main class for <tt>stepmaker</tt>.  Implementors\nmust subclass <tt>Step</tt> and provide an implementation for the\n<tt>validate()</tt> method, as well as setting the <tt>namespace_actions</tt>\nand <tt>namespace_modifiers</tt> class variables.  The <tt>metadata_keys</tt>\nclass variable can be used to identify particular keys as metadata.\nThe <tt>Step</tt> class provides a <tt>parse_list()</tt> class method for\nparsing a list of dictionaries as step descriptions, using actions and\nmodifiers discovered in the entrypoint groups declared using\n<tt>namespace_actions</tt> and <tt>namespace_modifiers</tt>.  Invoking the step\nis as simple as calling the <tt>Step</tt> object with an\napplication-specific context.</p>\n<p>The <tt>Action</tt> class is an abstract superclass for step actions.\nImplementors must subclass <tt>Action</tt> and implement its <tt>validate()</tt>\nand <tt>__call__()</tt> methods.  The <tt>Action</tt> subclass performs the\nactual work of the step.  Note that actions are classed as either\n\u201ceager\u201d or \u201clazy\u201d, controlled by the <tt>eager</tt> class variable, with\nthe default being lazy.  Eager actions can be used to allow for\nincluding other files or other libraries of step actions during\nparsing by <tt>Step.parse_list()</tt>.</p>\n<p>The <tt>Modifier</tt> class is an abstract superclass for step modifiers.\nA step modifier is able to modify how the action is performed;\neverything from temporary mutations of the execution context to\nskipping the step, or even executing the action multiple times (the\n<tt>Step.evaluate()</tt> method can facilitate this).  Implementors must\nimplement its <tt>validate()</tt> method, and then may implement the\n<tt>pre_call()</tt> and/or <tt>post_call()</tt> hook methods to perform the\nnecessary work.  Implementors may also set the <tt>restriction</tt> class\nvariable to restrict which actions a modifier can be used with; the\n<tt>before</tt> and <tt>after</tt> class variables provide control over the\norder with which modifiers are applied; and the <tt>required</tt> and\n<tt>prohibited</tt> class variables can control which other modifiers are\nrequired or prohibited on a given step.</p>\n<p>For full details on defining steps, see the documentation on the\n<tt>Step</tt>, <tt>Action</tt>, and <tt>Modifier</tt> classes.</p>\n</div>\n<div id=\"utilities\">\n<h2>Utilities</h2>\n<p>A number of utilities are also made available to assist with the\ncreation of a step-driven application.  For instance, the\n<tt>validate()</tt> methods of the <tt>Step</tt>, <tt>Action</tt>, and <tt>Modifier</tt>\nclasses could be implemented using the <tt>jsonschema</tt> package; the\n<tt>jsonschema_validator()</tt> context manager can be used with\n<tt>jsonschema.validate()</tt> to translate schema validation errors into\nmore helpful <tt>StepError</tt> exceptions, which include the \u201caddress\u201d of\na step configuration error.  The <tt>Environment</tt> class is a special\ndictionary-like object containing system environment variables, but\nalso includes methods for registering \u201cspecial\u201d translators for\nenvironment variables (e.g., the \u201cPATH\u201d environment variable could be\ntranslated into a Python list-like object using the <tt>SpecialList</tt>\ntranslator), opening files relative to a working directory associated\nwith the <tt>Environment</tt> object, and even executing shell commands.\nFinally, the <tt>RedactedObject</tt> and <tt>RedactedDict</tt> classes proxy to\nother objects, but are additionally capable of masking certain\nattributes or dictionary keys; this could be used on output routines\nto ensure that sensitive data such as passwords is not exposed to the\nconsole.</p>\n<div id=\"modifiers\">\n<h3>Modifiers</h3>\n<p>Modifiers can inhibit the further processing of a step by raising the\n<tt>AbortStep</tt> exception from their <tt>pre_call()</tt> hook method.\nModifiers can also specify a result to be returned to the step\u2019s\ncaller by passing that result to <tt>AbortStep</tt>.  If no result is\npassed, the result will be the special singleton <tt>skipped</tt>.</p>\n<p>Note that <tt>post_call()</tt> processing of the modifier still occurs;\nraising <tt>AbortStep</tt> prevents the processing of modifiers after the\none that raised it, but the <tt>post_call()</tt> method of the raising\nmodifier, along with the ones called before, are still called with the\nresult proposed in the <tt>AbortStep</tt>.</p>\n</div>\n<div id=\"addresses-and-the-validator-methods\">\n<h3>Addresses and the Validator Methods</h3>\n<p>The <tt>StepAddress</tt> class is used to express the location of a\nconfiguration item, and is used during parsing by <tt>Step.parse()</tt> and\n<tt>Step.parse_list()</tt> to raise helpful errors that indicate the\nlocation of a configuration problem.  These addresses are also passed\non to actions and modifiers, and can be used by the <tt>validate()</tt>\nmethods to raise appropriate <tt>StepError</tt> exceptions.  Additionally,\nif using the <tt>jsonschema</tt> package for validation, the\n<tt>jsonschema_validator()</tt> context manager can be used to translate\nschema validation errors raised by the package into <tt>StepError</tt>\nexceptions that include the address.  It can be used like so:</p>\n<pre>with jsonschema_validator(addr):\n    jsonschema.validate(config, schema)\n</pre>\n<p>(Note that <tt>jsonschema</tt> is <em>not</em> a dependency of <tt>stepmaker</tt>.  The\n<tt>jsonschema_validator()</tt> function uses duck-typing to avoid needing\nto install <tt>jsonschema</tt> alongside <tt>stepmaker</tt>.)</p>\n</div>\n<div id=\"redacted-objects-and-dictionaries\">\n<h3>Redacted Objects and Dictionaries</h3>\n<p>Some data may be sensitive: an application developer may wish to\ninhibit the display of that data to the console.  This data may be a\nset of variables associated with the execution context, or it may even\nbe environment variables that may contain such things as passwords.\nTo ensure that such information cannot be accidentally displayed or\nused, an implementor may choose to proxy an object or dictionary using\nthe <tt>RedactedObject</tt> and <tt>RedactedDict</tt> classes.  These classes\nproxy attribute and, in the case of <tt>RedactedDict</tt>, item accesses\nback to an underlying object, but can return instances of <tt>Redacted</tt>\nfor certain attributes or items.  By default, these classes return a\nsingleton <tt>redacted</tt> instance of <tt>Redacted</tt>, which has a default\nstring representation of \u201c&lt;redacted&gt;\u201d.</p>\n<p>The attributes and items to redact are controlled by sets of attribute\nnames or item keys.  This implements a black-list policy, where only\ncertain attributes or items are redacted; to implement a white-list\npolicy, where all attributes or items are redacted except for\nspecified exceptions, wrap a set in the <tt>Inverter</tt> class; this will\ninvert the sense of membership tests.</p>\n<p>It should be noted that the sets of attributes and items passed to\n<tt>RedactedObject</tt> and <tt>RedactedDict</tt> (and <tt>Inverter</tt>) are saved\ndirectly, and can be updated by processes outside of the classes.</p>\n</div>\n<div id=\"environment\">\n<h3>Environment</h3>\n<p>Step-driven applications often need at least one step capable of\nexecuting shell commands on the system, and also often need to be able\nto manipulate environment variables and open files.  The <tt>stepmaker</tt>\npackage provides an <tt>Environment</tt> class which provides all of this\nfunctionality in a single object.  The class is a dictionary\ncontaining the environment variables for execution of system commands\n(note that this is distinct from the current contents of\n<tt>os.environ</tt>, though the <tt>Environment</tt> class constructor uses the\ncurrent contents of <tt>os.environ</tt> as the default environment); the\nclass also keeps track of a current working directory (which is also\ndistinct from the process\u2019s current working directory).  Finally,\nspecial interpreters can be associated with environment variables,\nenabling, for instance, list-like access to the \u201cPATH\u201d environment\nvariable; a full collection of special interpreters is included, and\ndescribed below.</p>\n<p>There are two ways to invoke a shell command using an <tt>Environment</tt>\ninstance.  The first is to call <tt>popen()</tt> with a string or list\ndescribing the command and its options, and a set of keyword arguments\nsuitable for passing to <tt>subprocess.Popen</tt>.  This will return a\n<tt>subprocess.Popen</tt> instance, which may then be manipulated using the\nmethods provided by that class.  The second way to invoke a shell\ncommand is to call the <tt>Environment</tt>; the <tt>__call__()</tt> method is\nsimilar to the <tt>subprocess.run()</tt> function provided in Python 3\nversions of <tt>subprocess</tt>, and will return a\n<tt>stepmaker.CompletedProcess</tt> object with the command\u2019s return code,\nalong with captured standard output and standard error (to capture\nthese streams, pass <tt>subprocess.PIPE</tt> or <tt>stepmaker.PIPE</tt> to the\n<tt>stdout</tt> and/or <tt>stderr</tt> keyword arguments to <tt>__call__()</tt>).\nAdditionally, if the <tt>input</tt> keyword argument is provided, it will\nbe sent to the command\u2019s standard input; and if the <tt>check</tt> keyword\nargument is set to <tt>True</tt>, a <tt>stepmaker.ProcessError</tt> exception\nwill be raised if the command\u2019s return code is non-zero.  This will,\nof course, wait for process execution to complete before continuing.</p>\n<p>In addition to <tt>stepmaker.PIPE</tt>, the <tt>stepmaker</tt> package also\ncopies <tt>subprocess.STDOUT</tt> for convenience.  This allows the use of\nthe <tt>Environment</tt> command execution facilities without having to\nseparately import <tt>subprocess</tt>.</p>\n<p>The <tt>Environment</tt> class tracks a working directory, which can be\nchanged by setting the <tt>cwd</tt> property.  Commands are, by default,\nexecuted with there working directory set to the value of <tt>cwd</tt>.  It\nis also possible to locate a file relative to the <tt>cwd</tt>, using the\n<tt>filename()</tt> method; and the file may even be opened (using the\n<tt>open()</tt> built-in) with the <tt>open()</tt> method.</p>\n<div id=\"specials\">\n<h4>Specials</h4>\n<p>Specials are environment variable interpreters attached to an\n<tt>Environment</tt> instance.  They can be registered at construction\ntime, by passing keyword arguments of the form <tt>VARIABLE=factory</tt>\n(e.g., <tt>PATH=SpecialList</tt>) to the constructor, or they can be\nregistered after the fact by calling the <tt>register()</tt> method of the\n<tt>Environment</tt>.  (Specials may also be unregistered by calling\n<tt>register()</tt> without a factory function.)  Several specials are\nprovided, such as the <tt>SpecialList</tt> for list-like environment\nvariables, such as \u201cPATH\u201d; <tt>SpecialSet</tt>, for set-like environment\nvariables (distinguished from list-like environment variables in that\nordering is not important); <tt>SpecialDict</tt>, for dictionary-like\nenvironment variables containing \u201ckey=value\u201d pairs; or\n<tt>SpecialOrderedDict</tt>, which is distinguished from <tt>SpecialDict</tt> by\nthe fact that it maintains the original key order.  The <tt>Special</tt>\nabstract base class can be used for constructing other specials.</p>\n<p>It should be noted that the <tt>SpecialList</tt>, <tt>SpecialSet</tt>,\n<tt>SpecialDict</tt>, and <tt>SpecialOrderedDict</tt> classes all contain a\n<tt>with_sep()</tt> class method that can be used to construct a factory\nfunction using alternate separators.  If the default separators are\nnot suitable for a given application, then, instead of passing the\nclass as the factory function, pass the result of calling the class\u2019s\n<tt>with_sep()</tt> class method with appropriate arguments.</p>\n<p>It should also be noted that <tt>Environment</tt> never deletes an instance\nof a special unless a new special factory is registered (or the\nspecial is deregistered).  This means that the value can be kept\noutside of the environment.  In particular, it is possible to use a\n<tt>SpecialSet</tt> with a <tt>RedactedDict</tt> class wrapping the\n<tt>Environment</tt>, so that environment variables to be redacted can be\nlisted in a particular environment variable.</p>\n</div>\n</div>\n</div>\n\n          </div>"}, "last_serial": 3593868, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "54e9054d30c5b9728265d2ac0cb2401a", "sha256": "10f2c5ab197ffbc2842a55215644757f044ab12a8a3abcbec39fbaa5d40a80e0"}, "downloads": -1, "filename": "stepmaker-0.1.0.tar.gz", "has_sig": false, "md5_digest": "54e9054d30c5b9728265d2ac0cb2401a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 41209, "upload_time": "2018-02-18T18:12:31", "upload_time_iso_8601": "2018-02-18T18:12:31.869433Z", "url": "https://files.pythonhosted.org/packages/9d/79/f78db39a5c610e1dcd71f16e6ca7885fe8c5ade6d67e663ccb4bd0a35b60/stepmaker-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "54e9054d30c5b9728265d2ac0cb2401a", "sha256": "10f2c5ab197ffbc2842a55215644757f044ab12a8a3abcbec39fbaa5d40a80e0"}, "downloads": -1, "filename": "stepmaker-0.1.0.tar.gz", "has_sig": false, "md5_digest": "54e9054d30c5b9728265d2ac0cb2401a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 41209, "upload_time": "2018-02-18T18:12:31", "upload_time_iso_8601": "2018-02-18T18:12:31.869433Z", "url": "https://files.pythonhosted.org/packages/9d/79/f78db39a5c610e1dcd71f16e6ca7885fe8c5ade6d67e663ccb4bd0a35b60/stepmaker-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:02:02 2020"}