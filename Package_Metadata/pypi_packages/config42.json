{"info": {"author": "Amine Ben Asker", "author_email": "ben.asker.amine@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Software Development :: Build Tools"], "description": "[![Latest version on](https://badge.fury.io/py/config42.svg)](https://badge.fury.io/py/config42)\n[![Supported Python versions](https://img.shields.io/pypi/pyversions/config42.svg)](https://pypi.org/project/config42/)\n[![Travis Pipelines build status](https://img.shields.io/travis/com/yurilaaziz/config42.svg)](https://travis-ci.com/yurilaaziz/config42/)\n[![codecov](https://codecov.io/gh/yurilaaziz/config42/branch/master/graph/badge.svg)](https://codecov.io/gh/yurilaaziz/config42)\n# Config42\n\nConfig42  is a complete configuration reader and manager. It aims to read the configuration from different sources: a memory Dict object, an external file ( YAML, JSON, INI, PYTHON Object ), an SQL database (Postgres, MySQL, Oracle) \nalternatively, Key-value data store ( Etcd )\n\nIt is designed to be extensible. Different handlers could support another data store. \nAll PR are welcome. \n\n## Related blog posts\n\n* [Easy configuration management with config42 for Python applications](https://medium.com/@asker_amine/easy-configuration-management-with-config42-for-python-applications-8e90bf4c6450)\n\n## Install \n\n**From sources:**  (Bleeding edge)\n\n`pip install git+https://github.com/yurilaaziz/config42`\n\n**From PyPi:** (Stable)\n\n`pip install config42`\n\n## Getting started\nConfig42 abstract loading configuration complexity. Let config42 manage your configuration for you.\n\n### Using environment variables \nMost of the containerised applications change behaviour from environment variables to change their behaviour. config42 handle it easily.\n\nHere a working sample [examples/docker](examples/docker)\n\n```python\nfrom config42 import ConfigManager\nenv_config = ConfigManager(prefix=\"MYAPP\")\n# Access to configuration via the ConfigManager getter\nprint(\"username : {}\".format(env_config.get('username')))\nprint(\"nested key  : {}\".format(env_config.get('secret.one')))\n```\n\nExport variables to system environment \n```bash\nexport MYAPP_USERNAME=yuri\nexport MYAPP_SECRET_ONE=password\npython app.py\n```\n\nExport variables to process environment \n\n```bash\nMYAPP_USERNAME=yuri2 python app.py\n```\n\nOnce you build you docker image, you may run the application by export variables into the container environment\n```bash\ndocker run  -e MYAPP_USERNAME=yuri -e MYAPP_SECRET_ONE=secret testconfig42:latest\n```\n\n\n### Using Etcd  Handler \nTo load configuration from Etcd data store, you need to specify the *keyspace* where the configuration is located, Etcd host(s) and port(s).\n\n```python\nfrom config42 import ConfigManager\nfrom config42.handlers import Etcd\n\nconfig = ConfigManager(handler=Etcd, keyspace='/config')\n# config = ConfigManager(handler=Etcd, keyspace='/config', port=4001)\n# config = ConfigManager(handler=Etcd, keyspace='/config', host='127.0.0.1', port=4001)\n# config = ConfigManager(handler=Etcd, keyspace='/config', host=(('127.0.0.1', 4001), ('127.0.0.1', 4002), ('127.0.0.1', 4003)))\n\n```\nNote : Etcd handler use [python-etcd](https://github.com/jplana/python-etcd) client \nAll args after keyspace are passed to Etcd.Client class. \n\n\n### Using Filehandler, Load configuration from file \n```python\nfrom pprint import pprint\nfrom config42 import ConfigManager\nfrom config42.handlers import FileHandler\n\n# Yaml files\nconfig = ConfigManager(handler=FileHandler, path='files/config1.yml')\n#config = ConfigManager(handler=FileHandler, path='files/config1.yaml')\n\n# Json file \n#config = ConfigManager(handler=FileHandler, path='files/config1.json')\n\n#INI structure support only one level of nesting (Sections = { key: value }) \n#config = ConfigManager(handler=FileHandler, path='files/config.ini')\n\nCONFIG = config.as_dict()\n\nprint(\"Configuration has been loaded\")\npprint(CONFIG)\n\n# Access to configuration via the ConfigManager getter\nprint(\"application_name : {}\".format(config.get('application_name')))\nprint(\"nested key : {}\".format(config.get('nested.nestedkey.key2')))\n\n# Access to configuration via the as dict utility; it will dump configuration file to data store if updated\nprint(\"user : {}\".format(config.as_dict()['user']))\n\n# Access to configuration via the classic CONFIG global variable\nprint(\"application_name : {}\".format(CONFIG['application_name']))\nprint(\"nested key : {}\".format(CONFIG['nested']['nestedkey']['key2']))\n````\n\n### Using argparse, Load configuration from commandline parameters (sys.argv)\n\n```python\nfrom config42 import ConfigManager\nfrom config42.handlers.argparse import Argparse\n\nschema = [\n    dict(key=\"user\", description=\"username\"),\n    dict(key=\"verbosity\", description=\"verbosity level\", choices=[\"debug\", \"info\"]),\n\n]\nconfig = ConfigManager(handler=Argparse, schema=schema)\n```\nPlease take a look to the [example using Argparse's handler](examples/cmdline.py)\n\n## Real use case\nBelow is a real use from Instabot-Py project that uses this library as a configuration manager.\n\nconfig42 handles 4 sources of configuration data in order of priority:\n\n* Default configuration from Dict Object\n* Environment variables prefixed by INSTABOT\n* Local file where value located in config.file (INSTABOT_CONFIG_FILE)\n* Etcd data-store\n\nref : [https://github.com/instabot-py/instabot.py](https://github.com/instabot-py/instabot.py) \n\n```python\nimport logging.config\nimport os\n\nfrom config42 import ConfigManager\n\nfrom instabot_py.default_config import DEFAULT_CONFIG\n\nenv_config = ConfigManager(prefix=\"INSTABOT\")\nlogging.basicConfig(level=logging.DEBUG if env_config.get(\"debug\") else logging.INFO)\nLOGGER = logging.getLogger(__name__)\nconfig = ConfigManager()\nconfig.set_many(DEFAULT_CONFIG)\n\nconfig.set_many(env_config.as_dict())\nconfig_file = config.get(\"config.file\")\nconfig_etcd = config.get(\"config.etcd\")\n\nif config_file:\n    if config_file.startswith(\"/\"):\n        config_path = config_file\n    else:\n        cwd = os.getcwd()\n        config_path = cwd + \"/\" + config_file\n    config.set_many(ConfigManager(path=config_path.replace('//', '/')).as_dict())\n    LOGGER.info(\"Setting configuration from {} : OK\".format(config_file))\n\nif config_etcd:\n    if not config_etcd.get(\"keyspace\"):\n        raise Exception(\"etcd Keyspace is mandatory\")\n    try:\n        config.set_many(ConfigManager(**config_etcd).as_dict())\n        LOGGER.info(\n            \"Setting external configuration from {} : OK\".format(config_file))\n    except Exception as exc:\n        LOGGER.error(\n            \"Setting external configuration from ({}) : NOT OK\".format(\n                \",\".join({key + \"=\" + value for key, value in config_etcd.items() or {}})\n            ))\n\n        LOGGER.exception(exc)\n        raise exc\n\nlogging.config.dictConfig(config.get(\"logging\"))\n\n``` \n\n\n## Requirements\n### Yaml configuration files\n\n```bash\npip install Pyaml\n```\n\n### Etcd data store \n```bash\npip install python-etcd\n```\n\n### DEV \nThe following packages are needed to run tests and coverage\n\n```bash\npip install tox pytest-cov pytest flake8\n```\n\nor \n\n```bash\npip install -r requirements/ci.txt\npip install -r requirements/tests.txt\n```\n\n\n## Usage examples\n\n* [from-etcd.py](examples/from-etcd.py)\n* [from-yaml.py](examples/from-yaml.py)\n\n\n## TODO\n* readthedoc with sphinx\n\n## Releases\n\n#### 0.3.1\n* Add set default variables feature\n#### 0.3\n* Add Environment Handler\n\n#### 0.2\n\n* Add Etcd Handler\n* Add Ini Yaml, Json Handlers\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://github.com/yurilaaziz/config42/releases/tag/0.2", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/yurilaaziz/config42", "keywords": "Pretty configuration manager,Key value data store,cloud native configuration", "license": "GPLv3+", "maintainer": "", "maintainer_email": "", "name": "config42", "package_url": "https://pypi.org/project/config42/", "platform": "", "project_url": "https://pypi.org/project/config42/", "project_urls": {"Download": "https://github.com/yurilaaziz/config42/releases/tag/0.2", "Homepage": "https://github.com/yurilaaziz/config42"}, "release_url": "https://pypi.org/project/config42/0.4.3/", "requires_dist": ["Pyyaml (>=5.1)", "Jinja2 (>=2.0)", "Cerberus (>=1.3.1)"], "requires_python": "", "summary": "Configuration manager for cloud native application, support configuration stored in memory, in files, in databases", "version": "0.4.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://badge.fury.io/py/config42\" rel=\"nofollow\"><img alt=\"Latest version on\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0e2a3a2cb9e9987642c972bb582a8a94cc7adf41/68747470733a2f2f62616467652e667572792e696f2f70792f636f6e66696734322e737667\"></a>\n<a href=\"https://pypi.org/project/config42/\" rel=\"nofollow\"><img alt=\"Supported Python versions\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3450ba5dd67f0e0fce3bb81ed6d269b9f22330cb/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f636f6e66696734322e737667\"></a>\n<a href=\"https://travis-ci.com/yurilaaziz/config42/\" rel=\"nofollow\"><img alt=\"Travis Pipelines build status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/79656cd9bc6247a55a694d0f14e91b71a14f039e/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f636f6d2f797572696c61617a697a2f636f6e66696734322e737667\"></a>\n<a href=\"https://codecov.io/gh/yurilaaziz/config42\" rel=\"nofollow\"><img alt=\"codecov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/dd49b17e7199eea758929bb7bb9d364985ee0e2e/68747470733a2f2f636f6465636f762e696f2f67682f797572696c61617a697a2f636f6e66696734322f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a></p>\n<h1>Config42</h1>\n<p>Config42  is a complete configuration reader and manager. It aims to read the configuration from different sources: a memory Dict object, an external file ( YAML, JSON, INI, PYTHON Object ), an SQL database (Postgres, MySQL, Oracle)\nalternatively, Key-value data store ( Etcd )</p>\n<p>It is designed to be extensible. Different handlers could support another data store.\nAll PR are welcome.</p>\n<h2>Related blog posts</h2>\n<ul>\n<li><a href=\"https://medium.com/@asker_amine/easy-configuration-management-with-config42-for-python-applications-8e90bf4c6450\" rel=\"nofollow\">Easy configuration management with config42 for Python applications</a></li>\n</ul>\n<h2>Install</h2>\n<p><strong>From sources:</strong>  (Bleeding edge)</p>\n<p><code>pip install git+https://github.com/yurilaaziz/config42</code></p>\n<p><strong>From PyPi:</strong> (Stable)</p>\n<p><code>pip install config42</code></p>\n<h2>Getting started</h2>\n<p>Config42 abstract loading configuration complexity. Let config42 manage your configuration for you.</p>\n<h3>Using environment variables</h3>\n<p>Most of the containerised applications change behaviour from environment variables to change their behaviour. config42 handle it easily.</p>\n<p>Here a working sample <a href=\"examples/docker\" rel=\"nofollow\">examples/docker</a></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">config42</span> <span class=\"kn\">import</span> <span class=\"n\">ConfigManager</span>\n<span class=\"n\">env_config</span> <span class=\"o\">=</span> <span class=\"n\">ConfigManager</span><span class=\"p\">(</span><span class=\"n\">prefix</span><span class=\"o\">=</span><span class=\"s2\">\"MYAPP\"</span><span class=\"p\">)</span>\n<span class=\"c1\"># Access to configuration via the ConfigManager getter</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"username : </span><span class=\"si\">{}</span><span class=\"s2\">\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">env_config</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'username'</span><span class=\"p\">)))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"nested key  : </span><span class=\"si\">{}</span><span class=\"s2\">\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">env_config</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'secret.one'</span><span class=\"p\">)))</span>\n</pre>\n<p>Export variables to system environment</p>\n<pre><span class=\"nb\">export</span> <span class=\"nv\">MYAPP_USERNAME</span><span class=\"o\">=</span>yuri\n<span class=\"nb\">export</span> <span class=\"nv\">MYAPP_SECRET_ONE</span><span class=\"o\">=</span>password\npython app.py\n</pre>\n<p>Export variables to process environment</p>\n<pre><span class=\"nv\">MYAPP_USERNAME</span><span class=\"o\">=</span>yuri2 python app.py\n</pre>\n<p>Once you build you docker image, you may run the application by export variables into the container environment</p>\n<pre>docker run  -e <span class=\"nv\">MYAPP_USERNAME</span><span class=\"o\">=</span>yuri -e <span class=\"nv\">MYAPP_SECRET_ONE</span><span class=\"o\">=</span>secret testconfig42:latest\n</pre>\n<h3>Using Etcd  Handler</h3>\n<p>To load configuration from Etcd data store, you need to specify the <em>keyspace</em> where the configuration is located, Etcd host(s) and port(s).</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">config42</span> <span class=\"kn\">import</span> <span class=\"n\">ConfigManager</span>\n<span class=\"kn\">from</span> <span class=\"nn\">config42.handlers</span> <span class=\"kn\">import</span> <span class=\"n\">Etcd</span>\n\n<span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"n\">ConfigManager</span><span class=\"p\">(</span><span class=\"n\">handler</span><span class=\"o\">=</span><span class=\"n\">Etcd</span><span class=\"p\">,</span> <span class=\"n\">keyspace</span><span class=\"o\">=</span><span class=\"s1\">'/config'</span><span class=\"p\">)</span>\n<span class=\"c1\"># config = ConfigManager(handler=Etcd, keyspace='/config', port=4001)</span>\n<span class=\"c1\"># config = ConfigManager(handler=Etcd, keyspace='/config', host='127.0.0.1', port=4001)</span>\n<span class=\"c1\"># config = ConfigManager(handler=Etcd, keyspace='/config', host=(('127.0.0.1', 4001), ('127.0.0.1', 4002), ('127.0.0.1', 4003)))</span>\n</pre>\n<p>Note : Etcd handler use <a href=\"https://github.com/jplana/python-etcd\" rel=\"nofollow\">python-etcd</a> client\nAll args after keyspace are passed to Etcd.Client class.</p>\n<h3>Using Filehandler, Load configuration from file</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pprint</span> <span class=\"kn\">import</span> <span class=\"n\">pprint</span>\n<span class=\"kn\">from</span> <span class=\"nn\">config42</span> <span class=\"kn\">import</span> <span class=\"n\">ConfigManager</span>\n<span class=\"kn\">from</span> <span class=\"nn\">config42.handlers</span> <span class=\"kn\">import</span> <span class=\"n\">FileHandler</span>\n\n<span class=\"c1\"># Yaml files</span>\n<span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"n\">ConfigManager</span><span class=\"p\">(</span><span class=\"n\">handler</span><span class=\"o\">=</span><span class=\"n\">FileHandler</span><span class=\"p\">,</span> <span class=\"n\">path</span><span class=\"o\">=</span><span class=\"s1\">'files/config1.yml'</span><span class=\"p\">)</span>\n<span class=\"c1\">#config = ConfigManager(handler=FileHandler, path='files/config1.yaml')</span>\n\n<span class=\"c1\"># Json file </span>\n<span class=\"c1\">#config = ConfigManager(handler=FileHandler, path='files/config1.json')</span>\n\n<span class=\"c1\">#INI structure support only one level of nesting (Sections = { key: value }) </span>\n<span class=\"c1\">#config = ConfigManager(handler=FileHandler, path='files/config.ini')</span>\n\n<span class=\"n\">CONFIG</span> <span class=\"o\">=</span> <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">as_dict</span><span class=\"p\">()</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Configuration has been loaded\"</span><span class=\"p\">)</span>\n<span class=\"n\">pprint</span><span class=\"p\">(</span><span class=\"n\">CONFIG</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Access to configuration via the ConfigManager getter</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"application_name : </span><span class=\"si\">{}</span><span class=\"s2\">\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'application_name'</span><span class=\"p\">)))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"nested key : </span><span class=\"si\">{}</span><span class=\"s2\">\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'nested.nestedkey.key2'</span><span class=\"p\">)))</span>\n\n<span class=\"c1\"># Access to configuration via the as dict utility; it will dump configuration file to data store if updated</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"user : </span><span class=\"si\">{}</span><span class=\"s2\">\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">as_dict</span><span class=\"p\">()[</span><span class=\"s1\">'user'</span><span class=\"p\">]))</span>\n\n<span class=\"c1\"># Access to configuration via the classic CONFIG global variable</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"application_name : </span><span class=\"si\">{}</span><span class=\"s2\">\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">CONFIG</span><span class=\"p\">[</span><span class=\"s1\">'application_name'</span><span class=\"p\">]))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"nested key : </span><span class=\"si\">{}</span><span class=\"s2\">\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">CONFIG</span><span class=\"p\">[</span><span class=\"s1\">'nested'</span><span class=\"p\">][</span><span class=\"s1\">'nestedkey'</span><span class=\"p\">][</span><span class=\"s1\">'key2'</span><span class=\"p\">]))</span>\n</pre>\n<h3>Using argparse, Load configuration from commandline parameters (sys.argv)</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">config42</span> <span class=\"kn\">import</span> <span class=\"n\">ConfigManager</span>\n<span class=\"kn\">from</span> <span class=\"nn\">config42.handlers.argparse</span> <span class=\"kn\">import</span> <span class=\"n\">Argparse</span>\n\n<span class=\"n\">schema</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"o\">=</span><span class=\"s2\">\"user\"</span><span class=\"p\">,</span> <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"s2\">\"username\"</span><span class=\"p\">),</span>\n    <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"o\">=</span><span class=\"s2\">\"verbosity\"</span><span class=\"p\">,</span> <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"s2\">\"verbosity level\"</span><span class=\"p\">,</span> <span class=\"n\">choices</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"debug\"</span><span class=\"p\">,</span> <span class=\"s2\">\"info\"</span><span class=\"p\">]),</span>\n\n<span class=\"p\">]</span>\n<span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"n\">ConfigManager</span><span class=\"p\">(</span><span class=\"n\">handler</span><span class=\"o\">=</span><span class=\"n\">Argparse</span><span class=\"p\">,</span> <span class=\"n\">schema</span><span class=\"o\">=</span><span class=\"n\">schema</span><span class=\"p\">)</span>\n</pre>\n<p>Please take a look to the <a href=\"examples/cmdline.py\" rel=\"nofollow\">example using Argparse's handler</a></p>\n<h2>Real use case</h2>\n<p>Below is a real use from Instabot-Py project that uses this library as a configuration manager.</p>\n<p>config42 handles 4 sources of configuration data in order of priority:</p>\n<ul>\n<li>Default configuration from Dict Object</li>\n<li>Environment variables prefixed by INSTABOT</li>\n<li>Local file where value located in config.file (INSTABOT_CONFIG_FILE)</li>\n<li>Etcd data-store</li>\n</ul>\n<p>ref : <a href=\"https://github.com/instabot-py/instabot.py\" rel=\"nofollow\">https://github.com/instabot-py/instabot.py</a></p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">logging.config</span>\n<span class=\"kn\">import</span> <span class=\"nn\">os</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">config42</span> <span class=\"kn\">import</span> <span class=\"n\">ConfigManager</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">instabot_py.default_config</span> <span class=\"kn\">import</span> <span class=\"n\">DEFAULT_CONFIG</span>\n\n<span class=\"n\">env_config</span> <span class=\"o\">=</span> <span class=\"n\">ConfigManager</span><span class=\"p\">(</span><span class=\"n\">prefix</span><span class=\"o\">=</span><span class=\"s2\">\"INSTABOT\"</span><span class=\"p\">)</span>\n<span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">basicConfig</span><span class=\"p\">(</span><span class=\"n\">level</span><span class=\"o\">=</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">DEBUG</span> <span class=\"k\">if</span> <span class=\"n\">env_config</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"debug\"</span><span class=\"p\">)</span> <span class=\"k\">else</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">INFO</span><span class=\"p\">)</span>\n<span class=\"n\">LOGGER</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">getLogger</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n<span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"n\">ConfigManager</span><span class=\"p\">()</span>\n<span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">set_many</span><span class=\"p\">(</span><span class=\"n\">DEFAULT_CONFIG</span><span class=\"p\">)</span>\n\n<span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">set_many</span><span class=\"p\">(</span><span class=\"n\">env_config</span><span class=\"o\">.</span><span class=\"n\">as_dict</span><span class=\"p\">())</span>\n<span class=\"n\">config_file</span> <span class=\"o\">=</span> <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"config.file\"</span><span class=\"p\">)</span>\n<span class=\"n\">config_etcd</span> <span class=\"o\">=</span> <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"config.etcd\"</span><span class=\"p\">)</span>\n\n<span class=\"k\">if</span> <span class=\"n\">config_file</span><span class=\"p\">:</span>\n    <span class=\"k\">if</span> <span class=\"n\">config_file</span><span class=\"o\">.</span><span class=\"n\">startswith</span><span class=\"p\">(</span><span class=\"s2\">\"/\"</span><span class=\"p\">):</span>\n        <span class=\"n\">config_path</span> <span class=\"o\">=</span> <span class=\"n\">config_file</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">cwd</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">getcwd</span><span class=\"p\">()</span>\n        <span class=\"n\">config_path</span> <span class=\"o\">=</span> <span class=\"n\">cwd</span> <span class=\"o\">+</span> <span class=\"s2\">\"/\"</span> <span class=\"o\">+</span> <span class=\"n\">config_file</span>\n    <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">set_many</span><span class=\"p\">(</span><span class=\"n\">ConfigManager</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"o\">=</span><span class=\"n\">config_path</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s1\">'//'</span><span class=\"p\">,</span> <span class=\"s1\">'/'</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">as_dict</span><span class=\"p\">())</span>\n    <span class=\"n\">LOGGER</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">\"Setting configuration from </span><span class=\"si\">{}</span><span class=\"s2\"> : OK\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">config_file</span><span class=\"p\">))</span>\n\n<span class=\"k\">if</span> <span class=\"n\">config_etcd</span><span class=\"p\">:</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">config_etcd</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"keyspace\"</span><span class=\"p\">):</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">Exception</span><span class=\"p\">(</span><span class=\"s2\">\"etcd Keyspace is mandatory\"</span><span class=\"p\">)</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">set_many</span><span class=\"p\">(</span><span class=\"n\">ConfigManager</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">config_etcd</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">as_dict</span><span class=\"p\">())</span>\n        <span class=\"n\">LOGGER</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span>\n            <span class=\"s2\">\"Setting external configuration from </span><span class=\"si\">{}</span><span class=\"s2\"> : OK\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">config_file</span><span class=\"p\">))</span>\n    <span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">exc</span><span class=\"p\">:</span>\n        <span class=\"n\">LOGGER</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span>\n            <span class=\"s2\">\"Setting external configuration from (</span><span class=\"si\">{}</span><span class=\"s2\">) : NOT OK\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span>\n                <span class=\"s2\">\",\"</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">({</span><span class=\"n\">key</span> <span class=\"o\">+</span> <span class=\"s2\">\"=\"</span> <span class=\"o\">+</span> <span class=\"n\">value</span> <span class=\"k\">for</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">value</span> <span class=\"ow\">in</span> <span class=\"n\">config_etcd</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">()</span> <span class=\"ow\">or</span> <span class=\"p\">{}})</span>\n            <span class=\"p\">))</span>\n\n        <span class=\"n\">LOGGER</span><span class=\"o\">.</span><span class=\"n\">exception</span><span class=\"p\">(</span><span class=\"n\">exc</span><span class=\"p\">)</span>\n        <span class=\"k\">raise</span> <span class=\"n\">exc</span>\n\n<span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">dictConfig</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"logging\"</span><span class=\"p\">))</span>\n</pre>\n<h2>Requirements</h2>\n<h3>Yaml configuration files</h3>\n<pre>pip install Pyaml\n</pre>\n<h3>Etcd data store</h3>\n<pre>pip install python-etcd\n</pre>\n<h3>DEV</h3>\n<p>The following packages are needed to run tests and coverage</p>\n<pre>pip install tox pytest-cov pytest flake8\n</pre>\n<p>or</p>\n<pre>pip install -r requirements/ci.txt\npip install -r requirements/tests.txt\n</pre>\n<h2>Usage examples</h2>\n<ul>\n<li><a href=\"examples/from-etcd.py\" rel=\"nofollow\">from-etcd.py</a></li>\n<li><a href=\"examples/from-yaml.py\" rel=\"nofollow\">from-yaml.py</a></li>\n</ul>\n<h2>TODO</h2>\n<ul>\n<li>readthedoc with sphinx</li>\n</ul>\n<h2>Releases</h2>\n<h4>0.3.1</h4>\n<ul>\n<li>Add set default variables feature</li>\n</ul>\n<h4>0.3</h4>\n<ul>\n<li>Add Environment Handler</li>\n</ul>\n<h4>0.2</h4>\n<ul>\n<li>Add Etcd Handler</li>\n<li>Add Ini Yaml, Json Handlers</li>\n</ul>\n\n          </div>"}, "last_serial": 5996776, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "3b601fc01642c06c1e16122d1a7c23a6", "sha256": "4e478cbdd6e67a1e32ae597414c1de3294b5380461e555ac41d06bbb94e0469a"}, "downloads": -1, "filename": "config42-0.1-py2-none-any.whl", "has_sig": false, "md5_digest": "3b601fc01642c06c1e16122d1a7c23a6", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 16366, "upload_time": "2019-01-28T02:03:44", "upload_time_iso_8601": "2019-01-28T02:03:44.268281Z", "url": "https://files.pythonhosted.org/packages/ff/8b/c4dd87f7e1602f83b5eb26087f30b2285032f59a235d7ee9181b969f3539/config42-0.1-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2102f7aacd594261dbe5745876c34911", "sha256": "4db19ad56ab7b9fe8177d784be256788e20b1efbde72d8ba9e016c5bb42cb0f1"}, "downloads": -1, "filename": "config42-0.1.tar.gz", "has_sig": false, "md5_digest": "2102f7aacd594261dbe5745876c34911", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3224, "upload_time": "2019-01-28T02:03:47", "upload_time_iso_8601": "2019-01-28T02:03:47.037691Z", "url": "https://files.pythonhosted.org/packages/b1/c9/a4c903788fc6a4a727b40b204819ac21cd1afa0d43cfd08beaf0aeeea023/config42-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "48a6a9bfb9852b91062bd49e8e6604d4", "sha256": "7f461ad24dce72de5c74b8f1da137c94a1eb9c49448ab822ffd9d63c632102f0"}, "downloads": -1, "filename": "config42-0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "48a6a9bfb9852b91062bd49e8e6604d4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 19789, "upload_time": "2019-02-15T14:07:15", "upload_time_iso_8601": "2019-02-15T14:07:15.729781Z", "url": "https://files.pythonhosted.org/packages/a4/12/8f8ea4831b175bf0bbad262b8aa1e48e3c7239d9707b272b62fb8ea75e33/config42-0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "91654169b3853a13085ab9f18cef2955", "sha256": "29e70797cc5f2fb1e2420ee27090ffde206481a32f2d8a984981c6ba4bcb9c72"}, "downloads": -1, "filename": "config42-0.2.tar.gz", "has_sig": false, "md5_digest": "91654169b3853a13085ab9f18cef2955", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5600, "upload_time": "2019-02-15T14:07:17", "upload_time_iso_8601": "2019-02-15T14:07:17.133227Z", "url": "https://files.pythonhosted.org/packages/67/d2/bc72494b29a23e0b10799e5f9429f19367b9cdab806e5aecc22e3522738e/config42-0.2.tar.gz", "yanked": false}], "0.2.3": [{"comment_text": "", "digests": {"md5": "d1961504970819d351949b64b76c45bb", "sha256": "5de39a65a5ba3c0a72fed5386a124ec56986447c958a7a0fd4c7c4b51cf3903b"}, "downloads": -1, "filename": "config42-0.2.3-py3-none-any.whl", "has_sig": false, "md5_digest": "d1961504970819d351949b64b76c45bb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 21090, "upload_time": "2019-02-15T14:53:00", "upload_time_iso_8601": "2019-02-15T14:53:00.037868Z", "url": "https://files.pythonhosted.org/packages/cd/4f/ca0784b04de2eb25a50d1d32c5a395c78e0fce8f1d0511fc6b2124ab8390/config42-0.2.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "305e96c1f9b4acc1f1364757901e9e11", "sha256": "f91523ac9377ca14a7d982694aa74de5e5140dd3042c6c43a5f1ccf80ed7a6ed"}, "downloads": -1, "filename": "config42-0.2.3.tar.gz", "has_sig": false, "md5_digest": "305e96c1f9b4acc1f1364757901e9e11", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6085, "upload_time": "2019-02-15T14:53:01", "upload_time_iso_8601": "2019-02-15T14:53:01.375445Z", "url": "https://files.pythonhosted.org/packages/85/df/ebb69bd455a905b4a58b49c980c4856da38317cb351c9cbb6ded9facb68f/config42-0.2.3.tar.gz", "yanked": false}], "0.2.4": [{"comment_text": "", "digests": {"md5": "33b673d83fa2931f73c355b308b6ada1", "sha256": "b8dc91fb653221e6747757081a580d0e136c880d2fe6a4bef9bc3bdc8eb65c6e"}, "downloads": -1, "filename": "config42-0.2.4-py3-none-any.whl", "has_sig": false, "md5_digest": "33b673d83fa2931f73c355b308b6ada1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 21551, "upload_time": "2019-03-17T17:11:10", "upload_time_iso_8601": "2019-03-17T17:11:10.931204Z", "url": "https://files.pythonhosted.org/packages/00/49/af0531e90b610615b7e4848e102bfe8cd57677431f9784ce31d738c9bfd7/config42-0.2.4-py3-none-any.whl", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "d4f64c7a973930e814ca4e7c028ffc28", "sha256": "cafa0a40bfbeefaba62a2444d247780e0508f4dd632f1b84db7f262ba1d62520"}, "downloads": -1, "filename": "config42-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "d4f64c7a973930e814ca4e7c028ffc28", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 22086, "upload_time": "2019-03-24T16:57:14", "upload_time_iso_8601": "2019-03-24T16:57:14.252681Z", "url": "https://files.pythonhosted.org/packages/fc/a6/b0e583c5896d891d87b1e3559ad35aa06ae09600b16e0426e3dd21d6bccb/config42-0.3.0-py3-none-any.whl", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "aec1dc30aad694c5a4f9c816c1a66982", "sha256": "bf3bc83a3d21ab930e5e0607d83f1fa1600805929713217f3a94c61250face24"}, "downloads": -1, "filename": "config42-0.3.1.macosx-10.6-intel.tar.gz", "has_sig": false, "md5_digest": "aec1dc30aad694c5a4f9c816c1a66982", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12495, "upload_time": "2019-04-27T22:25:30", "upload_time_iso_8601": "2019-04-27T22:25:30.814619Z", "url": "https://files.pythonhosted.org/packages/19/af/24c04759fea59a3cd301db8f26ce3851fb44a172981b697461a7ea5586bc/config42-0.3.1.macosx-10.6-intel.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "08b48e68908355caf32165bbf5283471", "sha256": "5b551930d79c95e266d496f436dc0b4439c1c8290007c5c7c46d87f2f0f2928a"}, "downloads": -1, "filename": "config42-0.3.1-py3-none-any.whl", "has_sig": false, "md5_digest": "08b48e68908355caf32165bbf5283471", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 22173, "upload_time": "2019-04-27T22:26:02", "upload_time_iso_8601": "2019-04-27T22:26:02.498779Z", "url": "https://files.pythonhosted.org/packages/b3/eb/42825e0bcc0611b0690a672072a9b76130c75977e766226667ef14c9e7f4/config42-0.3.1-py3-none-any.whl", "yanked": false}], "0.3.2": [{"comment_text": "", "digests": {"md5": "8cadda5755f9391d635d3b3054536281", "sha256": "503ea3ceea2eebee887a8685520557250b3f0f2938a9859725b140aa337f28ad"}, "downloads": -1, "filename": "config42-0.3.2-py3-none-any.whl", "has_sig": false, "md5_digest": "8cadda5755f9391d635d3b3054536281", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 23625, "upload_time": "2019-07-04T15:18:54", "upload_time_iso_8601": "2019-07-04T15:18:54.245095Z", "url": "https://files.pythonhosted.org/packages/04/f0/4693a28cee283f0122c0d0b261ed685a22ae8695915becea412e123228e1/config42-0.3.2-py3-none-any.whl", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "fcf477a02aa0fb9eafe68dbec92f2076", "sha256": "bd019cf94e69e206a6aa986b61a8c103b9208993f613095fd917dbf6dcdd3ccd"}, "downloads": -1, "filename": "config42-0.4.0-py3-none-any.whl", "has_sig": false, "md5_digest": "fcf477a02aa0fb9eafe68dbec92f2076", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 29474, "upload_time": "2019-07-23T19:04:34", "upload_time_iso_8601": "2019-07-23T19:04:34.171891Z", "url": "https://files.pythonhosted.org/packages/97/2f/4c0718133d062b2275fe55c82b336dd9ded0dee690c2eebfe4e0f3acc727/config42-0.4.0-py3-none-any.whl", "yanked": false}], "0.4.1": [{"comment_text": "", "digests": {"md5": "fc24d70f06502092b28f3950db9d1f2d", "sha256": "7aa9223944333272bd5b3985c6449ee0c62e2b545c9286d2cd146fae57ce7df3"}, "downloads": -1, "filename": "config42-0.4.1-py3-none-any.whl", "has_sig": false, "md5_digest": "fc24d70f06502092b28f3950db9d1f2d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 29502, "upload_time": "2019-07-24T16:10:09", "upload_time_iso_8601": "2019-07-24T16:10:09.187967Z", "url": "https://files.pythonhosted.org/packages/fd/64/09ae43e55298c26e69ee7341261b5578b904a247efe75f3cbfe2279b7d40/config42-0.4.1-py3-none-any.whl", "yanked": false}], "0.4.2": [{"comment_text": "", "digests": {"md5": "2b1997b968ce67d4c0d29ed4fd0ff3b8", "sha256": "f458f18523b0c209198444060d887c28c08acfd4add148edd780bd054efdf162"}, "downloads": -1, "filename": "config42-0.4.2-py3-none-any.whl", "has_sig": false, "md5_digest": "2b1997b968ce67d4c0d29ed4fd0ff3b8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 29564, "upload_time": "2019-08-05T16:35:26", "upload_time_iso_8601": "2019-08-05T16:35:26.160516Z", "url": "https://files.pythonhosted.org/packages/5f/43/5fc25e3966549bb60d47ab7c21e6647521f7d7e6cd1ca38ea43fb1c3f6a9/config42-0.4.2-py3-none-any.whl", "yanked": false}], "0.4.3": [{"comment_text": "", "digests": {"md5": "c525909ea6bfe44ffcb5680093be76d7", "sha256": "15d3c57a7a193f6c45ff20d14dbeb1273bd72c372e2f24e0a2737127204a4968"}, "downloads": -1, "filename": "config42-0.4.3-py3-none-any.whl", "has_sig": false, "md5_digest": "c525909ea6bfe44ffcb5680093be76d7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 29739, "upload_time": "2019-10-18T17:37:14", "upload_time_iso_8601": "2019-10-18T17:37:14.074782Z", "url": "https://files.pythonhosted.org/packages/f8/a6/73ebccb41a320f7a7d93bf7932d552e049179de8827222649d66a1084fbf/config42-0.4.3-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c525909ea6bfe44ffcb5680093be76d7", "sha256": "15d3c57a7a193f6c45ff20d14dbeb1273bd72c372e2f24e0a2737127204a4968"}, "downloads": -1, "filename": "config42-0.4.3-py3-none-any.whl", "has_sig": false, "md5_digest": "c525909ea6bfe44ffcb5680093be76d7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 29739, "upload_time": "2019-10-18T17:37:14", "upload_time_iso_8601": "2019-10-18T17:37:14.074782Z", "url": "https://files.pythonhosted.org/packages/f8/a6/73ebccb41a320f7a7d93bf7932d552e049179de8827222649d66a1084fbf/config42-0.4.3-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 00:43:59 2020"}