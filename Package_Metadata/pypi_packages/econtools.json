{"info": {"author": "Daniel M. Sullivan", "author_email": "", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Scientific/Engineering :: Information Analysis", "Topic :: Scientific/Engineering :: Mathematics", "Topic :: Sociology"], "description": "# econtools\n*econtools* is a Python package of econometric functions and convenient\nshortcuts for data work with [pandas](http://github.com/pydata/pandas) and\n[numpy](https://github.com/numpy/numpy). Full documentation\n[here](http://www.danielmsullivan.com/econtools).\n\n## Installation\n\nYou can install directly from PYPI:\n\n```bash\n$ pip install econtools\n```\n\nOr you can clone from Github and install directly.\n\n```bash\n$ git clone http://github.com/dmsul/econtools\n$ cd econtools\n$ python setup.py install\n```\n\n\n## Econometrics\n- OLS, 2SLS, LIML\n- Option to absorb any variable via within-transformation (a la `areg` in Stata)\n- Robust standard errors\n  - HAC (`robust`/`hc1`, `hc2`, `hc3`)\n  - Clustered standard errors\n  - Spatial HAC (SHAC, aka Conley standard errors) with uniform and triangle\n    kernels\n- F-tests by variable name or `R` matrix.\n- Local linear regression.\n- WARNING [31 Oct 2019]: Predicted values (yhat and residuals) may not be as\n  expected in transformed regressions (when using fixed effects or using\n  weights). That is, the current behavior is different from Stata. I am looking\n  into this and will post a either a fix or a justification of current behavior\n  in the near future.\n\n```python\nimport econtools\nimport econtools.metrics as mt\n\n# Read Stata DTA file\ndf = econtools.read('my_data.dta')\n\n# Estimate OLS regression with fixed-effects and clustered s.e.'s\nresult = mt.reg(df,                     # DataFrame to use\n                'y',                    # Outcome\n                ['x1', 'x2'],           # Indep. Variables\n                fe_name='person_id',    # Fixed-effects using variable 'person_id'\n                cluster='state'         # Cluster by state\n)\n\n# Results\nprint(result.summary)                                # Print regression results\nbeta_x1 = result.beta['x1']                          # Get coefficient by variable name\nr_squared = result.r2a                               # Get adjusted R-squared\njoint_F = result.Ftest(['x1', 'x2'])                 # Test for joint significance\nequality_F = result.Ftest(['x1', 'x2'], equal=True)  # Test for coeff. equality\n```\n\n## Regression and Summary Stat Tables\n\n- `outreg` takes regression results and creates a LaTeX-formatted tabular\n  fragment.\n- `table_statrow` can be used to add arbitrary statistics, notes, etc. to a\n  table. Can also be used to create a table of summary statistics.\n- `write_notes` makes it easy to save table notes that depend on your data.\n\n## Misc. Data Manipulation Tools\n\n- `stata_merge` wraps `pandas.merge` and adds a lot of Stata's merge niceties\n  like a `'_m'` flag for successfully merge observations.\n- `group_id` generates an ID based on the variables past (compare `egen\n  group`).\n- Crosswalks of commonly used U.S. state labels.\n  - State abbreviation to state name (and reverse).\n  - State fips to state name (and reverse).\n\n## Data I/O\n\n- `read` and `write`: Use the passed file path's extension to determine which\n  `pandas` I/O method to use. Useful for writing functions that\n  programmatically read DataFrames from disk which are saved in different\n  formats. See examples above and below.\n- `load_or_build`: A function decorator that caches datasets to disk.\n  This function builds the requested dataset and saves it to disk if it\n  doesn't already exist on disk. If the dataset is already saved, it simply\n  loads it, saving computational time and allowing the use of a single function\n  to both load and build data.\n  ```python\n  from econtools import load_or_build, read\n\n  @load_or_build('my_data_file.dta')\n  def build_my_data_file():\n    \"\"\"\n    Cleans raw data from CSV format and saves as Stata DTA.\n    \"\"\"\n    df = read('raw_data.csv')\n    # Clean the DataFrame\n    return df\n  ```\n  File type  is automatically detected from the passed filename. In this case,\n  Stata DTA from `my_data_file.dta`.\n- `save_cli`: Simple wrapper for `argparse` that let's you use a `--save` flag\n  on the command line. This lets you run a regression without over-writing the\n  previous results and without modifying the code in any way (i.e., commenting\n  out the \"save\" lines).\n\n  In your regression script:\n  ```python\n  from econtools import save_cli\n\n  def regression_table(save=False):\n    \"\"\" Run a regression and save output if `save == True`.  \"\"\" \n    # Regression guts\n\n\n  if __name__ == '__main__':\n      save = save_cli()\n      regression_table(save=save)\n  ```\n  In the command line/bash script:\n  ```bash\n  python run_regression.py          # Runs regression without saving output\n  python run_regression.py --save   # Runs regression and saves output\n  ```\n\n## Requirements\n\n- Python 3.6+\n- Pandas and its dependencies (Numpy, etc.)\n- Scipy and its dependencies\n- Pytables (optional, if you use HDF5 files)\n- PyTest (optional, if you want to run the tests)\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://www.danielmsullivan.com/econtools", "keywords": "", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "econtools", "package_url": "https://pypi.org/project/econtools/", "platform": "", "project_url": "https://pypi.org/project/econtools/", "project_urls": {"Homepage": "http://www.danielmsullivan.com/econtools"}, "release_url": "https://pypi.org/project/econtools/0.3.2/", "requires_dist": ["pandas (>=0.16.0)", "numpy (>=1.9.2)", "scipy"], "requires_python": ">=3.6", "summary": "Econometrics and other tools", "version": "0.3.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>econtools</h1>\n<p><em>econtools</em> is a Python package of econometric functions and convenient\nshortcuts for data work with <a href=\"http://github.com/pydata/pandas\" rel=\"nofollow\">pandas</a> and\n<a href=\"https://github.com/numpy/numpy\" rel=\"nofollow\">numpy</a>. Full documentation\n<a href=\"http://www.danielmsullivan.com/econtools\" rel=\"nofollow\">here</a>.</p>\n<h2>Installation</h2>\n<p>You can install directly from PYPI:</p>\n<pre>$ pip install econtools\n</pre>\n<p>Or you can clone from Github and install directly.</p>\n<pre>$ git clone http://github.com/dmsul/econtools\n$ <span class=\"nb\">cd</span> econtools\n$ python setup.py install\n</pre>\n<h2>Econometrics</h2>\n<ul>\n<li>OLS, 2SLS, LIML</li>\n<li>Option to absorb any variable via within-transformation (a la <code>areg</code> in Stata)</li>\n<li>Robust standard errors\n<ul>\n<li>HAC (<code>robust</code>/<code>hc1</code>, <code>hc2</code>, <code>hc3</code>)</li>\n<li>Clustered standard errors</li>\n<li>Spatial HAC (SHAC, aka Conley standard errors) with uniform and triangle\nkernels</li>\n</ul>\n</li>\n<li>F-tests by variable name or <code>R</code> matrix.</li>\n<li>Local linear regression.</li>\n<li>WARNING [31 Oct 2019]: Predicted values (yhat and residuals) may not be as\nexpected in transformed regressions (when using fixed effects or using\nweights). That is, the current behavior is different from Stata. I am looking\ninto this and will post a either a fix or a justification of current behavior\nin the near future.</li>\n</ul>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">econtools</span>\n<span class=\"kn\">import</span> <span class=\"nn\">econtools.metrics</span> <span class=\"k\">as</span> <span class=\"nn\">mt</span>\n\n<span class=\"c1\"># Read Stata DTA file</span>\n<span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">econtools</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"s1\">'my_data.dta'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Estimate OLS regression with fixed-effects and clustered s.e.'s</span>\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">mt</span><span class=\"o\">.</span><span class=\"n\">reg</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">,</span>                     <span class=\"c1\"># DataFrame to use</span>\n                <span class=\"s1\">'y'</span><span class=\"p\">,</span>                    <span class=\"c1\"># Outcome</span>\n                <span class=\"p\">[</span><span class=\"s1\">'x1'</span><span class=\"p\">,</span> <span class=\"s1\">'x2'</span><span class=\"p\">],</span>           <span class=\"c1\"># Indep. Variables</span>\n                <span class=\"n\">fe_name</span><span class=\"o\">=</span><span class=\"s1\">'person_id'</span><span class=\"p\">,</span>    <span class=\"c1\"># Fixed-effects using variable 'person_id'</span>\n                <span class=\"n\">cluster</span><span class=\"o\">=</span><span class=\"s1\">'state'</span>         <span class=\"c1\"># Cluster by state</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\"># Results</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">summary</span><span class=\"p\">)</span>                                <span class=\"c1\"># Print regression results</span>\n<span class=\"n\">beta_x1</span> <span class=\"o\">=</span> <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">beta</span><span class=\"p\">[</span><span class=\"s1\">'x1'</span><span class=\"p\">]</span>                          <span class=\"c1\"># Get coefficient by variable name</span>\n<span class=\"n\">r_squared</span> <span class=\"o\">=</span> <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">r2a</span>                               <span class=\"c1\"># Get adjusted R-squared</span>\n<span class=\"n\">joint_F</span> <span class=\"o\">=</span> <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">Ftest</span><span class=\"p\">([</span><span class=\"s1\">'x1'</span><span class=\"p\">,</span> <span class=\"s1\">'x2'</span><span class=\"p\">])</span>                 <span class=\"c1\"># Test for joint significance</span>\n<span class=\"n\">equality_F</span> <span class=\"o\">=</span> <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">Ftest</span><span class=\"p\">([</span><span class=\"s1\">'x1'</span><span class=\"p\">,</span> <span class=\"s1\">'x2'</span><span class=\"p\">],</span> <span class=\"n\">equal</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>  <span class=\"c1\"># Test for coeff. equality</span>\n</pre>\n<h2>Regression and Summary Stat Tables</h2>\n<ul>\n<li><code>outreg</code> takes regression results and creates a LaTeX-formatted tabular\nfragment.</li>\n<li><code>table_statrow</code> can be used to add arbitrary statistics, notes, etc. to a\ntable. Can also be used to create a table of summary statistics.</li>\n<li><code>write_notes</code> makes it easy to save table notes that depend on your data.</li>\n</ul>\n<h2>Misc. Data Manipulation Tools</h2>\n<ul>\n<li><code>stata_merge</code> wraps <code>pandas.merge</code> and adds a lot of Stata's merge niceties\nlike a <code>'_m'</code> flag for successfully merge observations.</li>\n<li><code>group_id</code> generates an ID based on the variables past (compare <code>egen group</code>).</li>\n<li>Crosswalks of commonly used U.S. state labels.\n<ul>\n<li>State abbreviation to state name (and reverse).</li>\n<li>State fips to state name (and reverse).</li>\n</ul>\n</li>\n</ul>\n<h2>Data I/O</h2>\n<ul>\n<li>\n<p><code>read</code> and <code>write</code>: Use the passed file path's extension to determine which\n<code>pandas</code> I/O method to use. Useful for writing functions that\nprogrammatically read DataFrames from disk which are saved in different\nformats. See examples above and below.</p>\n</li>\n<li>\n<p><code>load_or_build</code>: A function decorator that caches datasets to disk.\nThis function builds the requested dataset and saves it to disk if it\ndoesn't already exist on disk. If the dataset is already saved, it simply\nloads it, saving computational time and allowing the use of a single function\nto both load and build data.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">econtools</span> <span class=\"kn\">import</span> <span class=\"n\">load_or_build</span><span class=\"p\">,</span> <span class=\"n\">read</span>\n\n<span class=\"nd\">@load_or_build</span><span class=\"p\">(</span><span class=\"s1\">'my_data_file.dta'</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">build_my_data_file</span><span class=\"p\">():</span>\n  <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">  Cleans raw data from CSV format and saves as Stata DTA.</span>\n<span class=\"sd\">  \"\"\"</span>\n  <span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">read</span><span class=\"p\">(</span><span class=\"s1\">'raw_data.csv'</span><span class=\"p\">)</span>\n  <span class=\"c1\"># Clean the DataFrame</span>\n  <span class=\"k\">return</span> <span class=\"n\">df</span>\n</pre>\n<p>File type  is automatically detected from the passed filename. In this case,\nStata DTA from <code>my_data_file.dta</code>.</p>\n</li>\n<li>\n<p><code>save_cli</code>: Simple wrapper for <code>argparse</code> that let's you use a <code>--save</code> flag\non the command line. This lets you run a regression without over-writing the\nprevious results and without modifying the code in any way (i.e., commenting\nout the \"save\" lines).</p>\n<p>In your regression script:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">econtools</span> <span class=\"kn\">import</span> <span class=\"n\">save_cli</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">regression_table</span><span class=\"p\">(</span><span class=\"n\">save</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n  <span class=\"sd\">\"\"\" Run a regression and save output if `save == True`.  \"\"\"</span> \n  <span class=\"c1\"># Regression guts</span>\n\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"n\">save</span> <span class=\"o\">=</span> <span class=\"n\">save_cli</span><span class=\"p\">()</span>\n    <span class=\"n\">regression_table</span><span class=\"p\">(</span><span class=\"n\">save</span><span class=\"o\">=</span><span class=\"n\">save</span><span class=\"p\">)</span>\n</pre>\n<p>In the command line/bash script:</p>\n<pre>python run_regression.py          <span class=\"c1\"># Runs regression without saving output</span>\npython run_regression.py --save   <span class=\"c1\"># Runs regression and saves output</span>\n</pre>\n</li>\n</ul>\n<h2>Requirements</h2>\n<ul>\n<li>Python 3.6+</li>\n<li>Pandas and its dependencies (Numpy, etc.)</li>\n<li>Scipy and its dependencies</li>\n<li>Pytables (optional, if you use HDF5 files)</li>\n<li>PyTest (optional, if you want to run the tests)</li>\n</ul>\n\n          </div>"}, "last_serial": 6789304, "releases": {"0.3.1": [{"comment_text": "", "digests": {"md5": "3f478c8d07cb1aaa9cfb23aa329f9481", "sha256": "3e3229c1a0ad3317393e0c6f5c634b995053b6e3ee383be4263dd3014d2cd0cd"}, "downloads": -1, "filename": "econtools-0.3.1-py3-none-any.whl", "has_sig": false, "md5_digest": "3f478c8d07cb1aaa9cfb23aa329f9481", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 536597, "upload_time": "2020-03-11T02:20:09", "upload_time_iso_8601": "2020-03-11T02:20:09.294606Z", "url": "https://files.pythonhosted.org/packages/7a/24/8f127280a8ef32d37c7c1f128a85de2f0646694b5a11075ef44707495255/econtools-0.3.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5cbe3e646ecdd3d6b3b6b0ecd095aab7", "sha256": "e31cde01e829522056ca6caeb93a1609b8cff5494417d863b4169210bf6a74f7"}, "downloads": -1, "filename": "econtools-0.3.1.tar.gz", "has_sig": false, "md5_digest": "5cbe3e646ecdd3d6b3b6b0ecd095aab7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 523978, "upload_time": "2020-03-11T02:20:11", "upload_time_iso_8601": "2020-03-11T02:20:11.765489Z", "url": "https://files.pythonhosted.org/packages/34/26/841dd8c607dee0c7a160a42486c328163805731ba8914a41452e927bc234/econtools-0.3.1.tar.gz", "yanked": false}], "0.3.2": [{"comment_text": "", "digests": {"md5": "cfec164954b31e3d15b09cb3ff4bb7bb", "sha256": "c286b6bcf2cc0652e426698085660135e8b9db949aa0f97a88a8006a23d17424"}, "downloads": -1, "filename": "econtools-0.3.2-py3-none-any.whl", "has_sig": false, "md5_digest": "cfec164954b31e3d15b09cb3ff4bb7bb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 536604, "upload_time": "2020-03-11T02:28:10", "upload_time_iso_8601": "2020-03-11T02:28:10.395969Z", "url": "https://files.pythonhosted.org/packages/77/42/5942d2eb92c0f0390892978ff83673114261cd642a6b8504e5534434e8ac/econtools-0.3.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "04144217587dd480ec2c430bb2d4b87c", "sha256": "f2a4aa928550c43768e0b609ec9944fbfbca177088021fe167ec59724752f838"}, "downloads": -1, "filename": "econtools-0.3.2.tar.gz", "has_sig": false, "md5_digest": "04144217587dd480ec2c430bb2d4b87c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 523989, "upload_time": "2020-03-11T02:28:11", "upload_time_iso_8601": "2020-03-11T02:28:11.755447Z", "url": "https://files.pythonhosted.org/packages/25/0f/20cb2d753aa88590fb7c0dc716e5922d0e451f67c2d053990f323a704514/econtools-0.3.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "cfec164954b31e3d15b09cb3ff4bb7bb", "sha256": "c286b6bcf2cc0652e426698085660135e8b9db949aa0f97a88a8006a23d17424"}, "downloads": -1, "filename": "econtools-0.3.2-py3-none-any.whl", "has_sig": false, "md5_digest": "cfec164954b31e3d15b09cb3ff4bb7bb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 536604, "upload_time": "2020-03-11T02:28:10", "upload_time_iso_8601": "2020-03-11T02:28:10.395969Z", "url": "https://files.pythonhosted.org/packages/77/42/5942d2eb92c0f0390892978ff83673114261cd642a6b8504e5534434e8ac/econtools-0.3.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "04144217587dd480ec2c430bb2d4b87c", "sha256": "f2a4aa928550c43768e0b609ec9944fbfbca177088021fe167ec59724752f838"}, "downloads": -1, "filename": "econtools-0.3.2.tar.gz", "has_sig": false, "md5_digest": "04144217587dd480ec2c430bb2d4b87c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 523989, "upload_time": "2020-03-11T02:28:11", "upload_time_iso_8601": "2020-03-11T02:28:11.755447Z", "url": "https://files.pythonhosted.org/packages/25/0f/20cb2d753aa88590fb7c0dc716e5922d0e451f67c2d053990f323a704514/econtools-0.3.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:47:58 2020"}