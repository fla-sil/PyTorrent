{"info": {"author": "Canonical webteam", "author_email": "robin+pypi@canonical.com", "bugtrack_url": null, "classifiers": [], "description": "canonicalwebteam.gsa: Python GSA client\n===================================\n\n.. image:: https://travis-ci.org/canonicalwebteam/gsa.svg?branch=master\n   :alt: build status\n   :target: https://travis-ci.org/canonicalweeam/gsa\n\nA client library for the `Google Search Appliance <https://enterprise.google.com/search/products/gsa.html>`_, to make retrieving search results in Python easier.\n\nInstallation\n------------\n\nThis module is in PyPi as :code:`canonicalwebteam.gsa`. You should be able to install it simply with:\n\n.. code:: bash\n\n    pip install canonicalwebteam.gsa\n\nGSAClient\n---------\n\nThis is a basic client for querying a Google Search Appliance.\n\nMaking queries\n~~~~~~~~~~~~~~\n\nYou can query the GSA using the :code:`search` method.\n\n.. code:: python\n\n    search_client = GSAClient(base_url=\"http://gsa.example.com/search\")\n\n    first_ten_results = search_client.search(\"hello world\")\n\n    first_thirty_results = search_client.search(\"hello world\", num=30)\n\n    results_twenty_to_forty = search_client.search(\n      \"hello world\", start=20, num=20\n    )\n\nThis will set the `q <https://www.google.com/support/enterprise/static/gsa/docs/admin/72/gsa_doc_set/xml_reference/request_format.html#1089652>`_,\n`start <https://www.google.com/support/enterprise/static/gsa/docs/admin/72/gsa_doc_set/xml_reference/request_format.html#1076971>`_ (default: 0) and\n`num <https://www.google.com/support/enterprise/static/gsa/docs/admin/72/gsa_doc_set/xml_reference/request_format.html#1076882>`_ (default: 10) and\n`lr <https://www.google.com/support/enterprise/static/gsa/docs/admin/72/gsa_doc_set/xml_reference/request_format.html#1076879>`_ (default: '') parameters.\nNo other `search parameters <https://www.google.com/support/enterprise/static/gsa/docs/admin/72/gsa_doc_set/xml_reference/request_format.html#1086546>`_,\nwill be provided, so they will all fall back to their defaults.\n\nThe returned results object will attempt to map each of the GSA's\n`standard result XML tags <https://www.google.com/support/enterprise/static/gsa/docs/admin/70/gsa_doc_set/xml_reference/results_format.html#1078461>`_\ninto a more readable format:\n\n.. code:: python\n\n    {\n        'estimated_total_results': int,  # \"M\": GSA's estimate, see below\n        'document_filtering': bool,      # \"FI\": Is filtering enabled?\n        'next_url': str,                 # \"NU\": GSA URL for querying the next set of results, if available\n        'previous_url': str,             # \"PU\": Ditto for previous set of results\n        'items': [\n            {\n                'index': int,            # \"R[N]\": The number of this result in the index of all results\n                'url': str,              # \"U\": The URL of the resulting page\n                'encoded_url': str,      # \"UE\": The above URL, encoded\n                'title': str,            # \"T\": The page title\n                'relevancy': int,        # \"RK\": How relevant is this result to the query? From 0 to 10\n                'appliance_id': str,     # \"ENT_SOURCE\": The serial number of the GSA\n                'summary': str,          # \"S\": Summary text for this result\n                'language': str,         # \"LANG\": The language of the page\n                'details': {}            # \"FS\": Name:value pairs of any extra info\n                'link_supported': bool,  # \"L\": \u201clink:\u201d special query term is supported,\n                'cache': {               # \"C\": Dictionary, or \"None\" if cache is not available\n                    'size': str,         # \"C[SZ]\": Human readable size of cached page\n                    'cache_id': str,     # \"C[CID]\": ID of document in GSA's cache\n                    'encoding': str      # \"C[ENC]\": The text encoding of the cached page\n                }\n            },\n            ...\n        ]\n    }\n\nFiltering by domain or language\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nYou can filter your search results by specifying specific domains or a\n`specific language <https://www.google.com/support/enterprise/static/gsa/docs/admin/72/gsa_doc_set/xml_reference/request_format.html#1077439>`_.\n\n.. code:: python\n\n    english_results = search_client.search(\"hello world\", language=\"lang_en\")\n    non_english_results = search_client.search(\"hello world\", language=\"-lang_en\")\n    domain_specific_results = search_client.search(\n        \"hello world\",\n        domains=[\"site1.example.com\", \"site2.example.com\"]\n    )\n\n*NB:* If no search results are found with the specified ``language``, the GSA will fall back to returning any results it finds in all languages.\n\nGetting accurate totals\n~~~~~~~~~~~~~~~~~~~~~~~\n\nAt the time of writing, the Google Search Appliance will return an \"estimate\" of\nthe total number of results with each query, but this estimate is usually wildly\ninaccurate, sometimes out by more than a factor of 10! This is true even with\n`rc <https://www.google.com/support/enterprise/static/gsa/docs/admin/72/gsa_doc_set/xml_reference/request_format.html#1076946>`_\nenabled.\n\nWith the :code:`total_results` method, the client will attempt to request results\n990 - 1000. This will usually result in the GSA returning the last page of\nresults, which allows us to find the actual total number of results.\n\n.. code:: python\n\n    total = search_client.total_results(\"hello world\", domains=[], language='')\n\nDjango view\n-----------\n\nTo simplify usage of the GSA client with Django, a Django view is included\nwith this module.\n\nUsage\n~~~~~\n\nAt the minimum, need to provide the :code:`SEARCH_SERVER_URL` setting to tell the view\nwhere to find the GSA:\n\n.. code:: python\n\n    # settings.py\n    SEARCH_SERVER_URL = 'http://gsa.example.com/search'  # Required: GSA location\n    SEARCH_DOMAINS = ['site1.example.com']               # Optional: By default, limit results to this set of domains\n    SEARCH_LANGUAGE = 'lang_zh-CN'                       # Optional: By default, limit results to this language\n\n    # urls.py\n    from canonicalwebteam.gsa.views import SearchView\n    urlpatterns += [url(r'^search/?$', SearchView.as_view(template_name=\"search.html\"))]\n\nThis view will then be available to be queried:\n\n- :code:`example.com/search?q=my+search+term`\n- :code:`example.com/search?q=my+search+term&domain=example.com&domain=something.example.com`  (overrides :code:`SEARCH_DOMAINS`)\n- :code:`example.com/search?q=my+search+term&language=-lang_zh-CN`  (exclude results in Chinese, overrides :code:`SEARCH_LANGUAGE`)\n\nAfter retrieving search results, the view will pass the context object to the specified :code:`template_name` (in this case :code:`search.html`).\n\nThe context object will be structured as follows:\n\n.. code:: python\n\n    {\n        'query': str,       # The value of the `q` parameters passed to the view\n        'limit': int,       # The value of the `limit` parameter, or the default of 10\n        'offset': int,      # The value of the `offset` parameter, or the default of 0\n        'error': None|str,  # None, or a description of the error if one occurred\n        'results': {\n            'items': [],    # The list of items as returned from the GSAClient (see above)\n            'total': int,   # The exact total number of results available\n            'start': int,   # The index of the first result in the set\n            'end': int,     # The index of the last result in the set\n            'next_offset': int|None,      # The offset for the next page of results, if available\n            'previous_offset': int|None,  # The offset for the previous page of results, if available\n            'last_page_offset': int,      # The offset for the last page of results\n            'last_page': int,             # The final page number (calculated from \"limit\" and \"total\")\n            'current_page': int,          # The current page number (calculated from \"limit\" and \"end\")\n            'penultimate_page': int       # The second-to-last page\n    }", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/canonicalwebteam/gsa", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "canonicalwebteam.gsa", "package_url": "https://pypi.org/project/canonicalwebteam.gsa/", "platform": "", "project_url": "https://pypi.org/project/canonicalwebteam.gsa/", "project_urls": {"Homepage": "https://github.com/canonicalwebteam/gsa"}, "release_url": "https://pypi.org/project/canonicalwebteam.gsa/2.0.1/", "requires_dist": null, "requires_python": "", "summary": "A client for communicating with the Google Search Appliance.", "version": "2.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            canonicalwebteam.gsa: Python GSA client<br>===================================<br><br>.. image:: https://travis-ci.org/canonicalwebteam/gsa.svg?branch=master<br>   :alt: build status<br>   :target: https://travis-ci.org/canonicalweeam/gsa<br><br>A client library for the `Google Search Appliance &lt;https://enterprise.google.com/search/products/gsa.html&gt;`_, to make retrieving search results in Python easier.<br><br>Installation<br>------------<br><br>This module is in PyPi as :code:`canonicalwebteam.gsa`. You should be able to install it simply with:<br><br>.. code:: bash<br><br>    pip install canonicalwebteam.gsa<br><br>GSAClient<br>---------<br><br>This is a basic client for querying a Google Search Appliance.<br><br>Making queries<br>~~~~~~~~~~~~~~<br><br>You can query the GSA using the :code:`search` method.<br><br>.. code:: python<br><br>    search_client = GSAClient(base_url=\"http://gsa.example.com/search\")<br><br>    first_ten_results = search_client.search(\"hello world\")<br><br>    first_thirty_results = search_client.search(\"hello world\", num=30)<br><br>    results_twenty_to_forty = search_client.search(<br>      \"hello world\", start=20, num=20<br>    )<br><br>This will set the `q &lt;https://www.google.com/support/enterprise/static/gsa/docs/admin/72/gsa_doc_set/xml_reference/request_format.html#1089652&gt;`_,<br>`start &lt;https://www.google.com/support/enterprise/static/gsa/docs/admin/72/gsa_doc_set/xml_reference/request_format.html#1076971&gt;`_ (default: 0) and<br>`num &lt;https://www.google.com/support/enterprise/static/gsa/docs/admin/72/gsa_doc_set/xml_reference/request_format.html#1076882&gt;`_ (default: 10) and<br>`lr &lt;https://www.google.com/support/enterprise/static/gsa/docs/admin/72/gsa_doc_set/xml_reference/request_format.html#1076879&gt;`_ (default: '') parameters.<br>No other `search parameters &lt;https://www.google.com/support/enterprise/static/gsa/docs/admin/72/gsa_doc_set/xml_reference/request_format.html#1086546&gt;`_,<br>will be provided, so they will all fall back to their defaults.<br><br>The returned results object will attempt to map each of the GSA's<br>`standard result XML tags &lt;https://www.google.com/support/enterprise/static/gsa/docs/admin/70/gsa_doc_set/xml_reference/results_format.html#1078461&gt;`_<br>into a more readable format:<br><br>.. code:: python<br><br>    {<br>        'estimated_total_results': int,  # \"M\": GSA's estimate, see below<br>        'document_filtering': bool,      # \"FI\": Is filtering enabled?<br>        'next_url': str,                 # \"NU\": GSA URL for querying the next set of results, if available<br>        'previous_url': str,             # \"PU\": Ditto for previous set of results<br>        'items': [<br>            {<br>                'index': int,            # \"R[N]\": The number of this result in the index of all results<br>                'url': str,              # \"U\": The URL of the resulting page<br>                'encoded_url': str,      # \"UE\": The above URL, encoded<br>                'title': str,            # \"T\": The page title<br>                'relevancy': int,        # \"RK\": How relevant is this result to the query? From 0 to 10<br>                'appliance_id': str,     # \"ENT_SOURCE\": The serial number of the GSA<br>                'summary': str,          # \"S\": Summary text for this result<br>                'language': str,         # \"LANG\": The language of the page<br>                'details': {}            # \"FS\": Name:value pairs of any extra info<br>                'link_supported': bool,  # \"L\": \u201clink:\u201d special query term is supported,<br>                'cache': {               # \"C\": Dictionary, or \"None\" if cache is not available<br>                    'size': str,         # \"C[SZ]\": Human readable size of cached page<br>                    'cache_id': str,     # \"C[CID]\": ID of document in GSA's cache<br>                    'encoding': str      # \"C[ENC]\": The text encoding of the cached page<br>                }<br>            },<br>            ...<br>        ]<br>    }<br><br>Filtering by domain or language<br>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>You can filter your search results by specifying specific domains or a<br>`specific language &lt;https://www.google.com/support/enterprise/static/gsa/docs/admin/72/gsa_doc_set/xml_reference/request_format.html#1077439&gt;`_.<br><br>.. code:: python<br><br>    english_results = search_client.search(\"hello world\", language=\"lang_en\")<br>    non_english_results = search_client.search(\"hello world\", language=\"-lang_en\")<br>    domain_specific_results = search_client.search(<br>        \"hello world\",<br>        domains=[\"site1.example.com\", \"site2.example.com\"]<br>    )<br><br>*NB:* If no search results are found with the specified ``language``, the GSA will fall back to returning any results it finds in all languages.<br><br>Getting accurate totals<br>~~~~~~~~~~~~~~~~~~~~~~~<br><br>At the time of writing, the Google Search Appliance will return an \"estimate\" of<br>the total number of results with each query, but this estimate is usually wildly<br>inaccurate, sometimes out by more than a factor of 10! This is true even with<br>`rc &lt;https://www.google.com/support/enterprise/static/gsa/docs/admin/72/gsa_doc_set/xml_reference/request_format.html#1076946&gt;`_<br>enabled.<br><br>With the :code:`total_results` method, the client will attempt to request results<br>990 - 1000. This will usually result in the GSA returning the last page of<br>results, which allows us to find the actual total number of results.<br><br>.. code:: python<br><br>    total = search_client.total_results(\"hello world\", domains=[], language='')<br><br>Django view<br>-----------<br><br>To simplify usage of the GSA client with Django, a Django view is included<br>with this module.<br><br>Usage<br>~~~~~<br><br>At the minimum, need to provide the :code:`SEARCH_SERVER_URL` setting to tell the view<br>where to find the GSA:<br><br>.. code:: python<br><br>    # settings.py<br>    SEARCH_SERVER_URL = 'http://gsa.example.com/search'  # Required: GSA location<br>    SEARCH_DOMAINS = ['site1.example.com']               # Optional: By default, limit results to this set of domains<br>    SEARCH_LANGUAGE = 'lang_zh-CN'                       # Optional: By default, limit results to this language<br><br>    # urls.py<br>    from canonicalwebteam.gsa.views import SearchView<br>    urlpatterns += [url(r'^search/?$', SearchView.as_view(template_name=\"search.html\"))]<br><br>This view will then be available to be queried:<br><br>- :code:`example.com/search?q=my+search+term`<br>- :code:`example.com/search?q=my+search+term&amp;domain=example.com&amp;domain=something.example.com`  (overrides :code:`SEARCH_DOMAINS`)<br>- :code:`example.com/search?q=my+search+term&amp;language=-lang_zh-CN`  (exclude results in Chinese, overrides :code:`SEARCH_LANGUAGE`)<br><br>After retrieving search results, the view will pass the context object to the specified :code:`template_name` (in this case :code:`search.html`).<br><br>The context object will be structured as follows:<br><br>.. code:: python<br><br>    {<br>        'query': str,       # The value of the `q` parameters passed to the view<br>        'limit': int,       # The value of the `limit` parameter, or the default of 10<br>        'offset': int,      # The value of the `offset` parameter, or the default of 0<br>        'error': None|str,  # None, or a description of the error if one occurred<br>        'results': {<br>            'items': [],    # The list of items as returned from the GSAClient (see above)<br>            'total': int,   # The exact total number of results available<br>            'start': int,   # The index of the first result in the set<br>            'end': int,     # The index of the last result in the set<br>            'next_offset': int|None,      # The offset for the next page of results, if available<br>            'previous_offset': int|None,  # The offset for the previous page of results, if available<br>            'last_page_offset': int,      # The offset for the last page of results<br>            'last_page': int,             # The final page number (calculated from \"limit\" and \"total\")<br>            'current_page': int,          # The current page number (calculated from \"limit\" and \"end\")<br>            'penultimate_page': int       # The second-to-last page<br>    }\n          </div>"}, "last_serial": 6176213, "releases": {"2.0.0": [{"comment_text": "", "digests": {"md5": "9604483eaa34353c468ed8319b71f49a", "sha256": "b515e50d10ea79eb28c9cd39002559c95dcf787deb7c6d60b824fbd4878949b8"}, "downloads": -1, "filename": "canonicalwebteam.gsa-2.0.0.tar.gz", "has_sig": false, "md5_digest": "9604483eaa34353c468ed8319b71f49a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6244, "upload_time": "2018-05-03T17:05:04", "upload_time_iso_8601": "2018-05-03T17:05:04.773099Z", "url": "https://files.pythonhosted.org/packages/c1/a6/64c652ef77e49b17a3d509750bdd84bbefc5722f2558b87df989f3fec05a/canonicalwebteam.gsa-2.0.0.tar.gz", "yanked": false}], "2.0.1": [{"comment_text": "", "digests": {"md5": "af4225f84edbf7583e6d77f3f7427609", "sha256": "24d87d26b3199de847ad4154501d3da10622d53a2226e03781f726e70fbf4650"}, "downloads": -1, "filename": "canonicalwebteam.gsa-2.0.1.tar.gz", "has_sig": false, "md5_digest": "af4225f84edbf7583e6d77f3f7427609", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6252, "upload_time": "2018-05-08T12:28:48", "upload_time_iso_8601": "2018-05-08T12:28:48.289972Z", "url": "https://files.pythonhosted.org/packages/a7/61/2b57dc44bd87c1dc013a17e6dc11f1fc6d6dba65fc6e9560d1598db49f52/canonicalwebteam.gsa-2.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "af4225f84edbf7583e6d77f3f7427609", "sha256": "24d87d26b3199de847ad4154501d3da10622d53a2226e03781f726e70fbf4650"}, "downloads": -1, "filename": "canonicalwebteam.gsa-2.0.1.tar.gz", "has_sig": false, "md5_digest": "af4225f84edbf7583e6d77f3f7427609", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6252, "upload_time": "2018-05-08T12:28:48", "upload_time_iso_8601": "2018-05-08T12:28:48.289972Z", "url": "https://files.pythonhosted.org/packages/a7/61/2b57dc44bd87c1dc013a17e6dc11f1fc6d6dba65fc6e9560d1598db49f52/canonicalwebteam.gsa-2.0.1.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:35:31 2020"}