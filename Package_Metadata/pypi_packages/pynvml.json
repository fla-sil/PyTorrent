{"info": {"author": "NVIDIA Corporation", "author_email": "rzamora@nvidia.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "Intended Audience :: System Administrators", "License :: OSI Approved :: BSD License", "Operating System :: Microsoft :: Windows", "Operating System :: POSIX :: Linux", "Programming Language :: Python", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: System :: Hardware", "Topic :: System :: Systems Administration"], "description": "Python bindings to the NVIDIA Management Library\n================================================\n\nProvides a Python interface to GPU management and monitoring functions.\n\nThis is a wrapper around the NVML library.\nFor information about the NVML library, see the NVML developer page\nhttp://developer.nvidia.com/nvidia-management-library-nvml\n\nNote this file can be run with 'python -m doctest -v README.txt'\nalthough the results are system dependent\n\nRequires\n--------\nPython 3, or an earlier version with the ctypes module.\n\nInstallation\n------------\n\n    pip install .\n\nUsage\n-----\n\nYou can use the lower level nvml bindings\n\n```python\n>>> from pynvml import *\n>>> nvmlInit()\n>>> print \"Driver Version:\", nvmlSystemGetDriverVersion()\nDriver Version: 410.00\n>>> deviceCount = nvmlDeviceGetCount()\n>>> for i in range(deviceCount):\n...     handle = nvmlDeviceGetHandleByIndex(i)\n...     print \"Device\", i, \":\", nvmlDeviceGetName(handle)\n...\nDevice 0 : Tesla V100\n\n>>> nvmlShutdown()\n```\n\nOr the higher level nvidia_smi API\n\n```python\nfrom pynvml.smi import nvidia_smi\nnvsmi = nvidia_smi.getInstance()\nnvsmi.DeviceQuery('memory.free, memory.total')\n```\n\nFunctions\n---------\nPython methods wrap NVML functions, implemented in a C shared library.\nEach function's use is the same with the following exceptions:\n\n- Instead of returning error codes, failing error codes are raised as\n  Python exceptions.\n\n    ```python\n    >>> try:\n    ...     nvmlDeviceGetCount()\n    ... except NVMLError as error:\n    ...     print(error)\n    ...\n    Uninitialized\n    ```\n\n- C function output parameters are returned from the corresponding\n  Python function left to right.\n\n    ```c\n    nvmlReturn_t nvmlDeviceGetEccMode(nvmlDevice_t device,\n                                      nvmlEnableState_t *current,\n                                      nvmlEnableState_t *pending);\n    ```\n\n    ```python\n    >>> nvmlInit()\n    >>> handle = nvmlDeviceGetHandleByIndex(0)\n    >>> (current, pending) = nvmlDeviceGetEccMode(handle)\n    ```\n\n- C structs are converted into Python classes.\n\n    ```c\n    nvmlReturn_t DECLDIR nvmlDeviceGetMemoryInfo(nvmlDevice_t device,\n                                                 nvmlMemory_t *memory);\n    typedef struct nvmlMemory_st {\n        unsigned long long total;\n        unsigned long long free;\n        unsigned long long used;\n    } nvmlMemory_t;\n    ```\n\n    ```python\n    >>> info = nvmlDeviceGetMemoryInfo(handle)\n    >>> print \"Total memory:\", info.total\n    Total memory: 5636292608\n    >>> print \"Free memory:\", info.free\n    Free memory: 5578420224\n    >>> print \"Used memory:\", info.used\n    Used memory: 57872384\n    ```\n\n- Python handles string buffer creation.\n\n    ```c\n    nvmlReturn_t nvmlSystemGetDriverVersion(char* version,\n                                            unsigned int length);\n    ```\n\n    ```python\n    >>> version = nvmlSystemGetDriverVersion();\n    >>> nvmlShutdown()\n    ```\n\nFor usage information see the NVML documentation.\n\nVariables\n---------\n\nAll meaningful NVML constants and enums are exposed in Python.\n\nThe NVML_VALUE_NOT_AVAILABLE constant is not used.  Instead None is mapped to the field.\n\nNVML Permissions\n----------------\n\nMany of the `pynvml` wrappers assume that the underlying NVIDIA Management Library (NVML) API can be used without admin/root privileges.  However, it is certainly possible for the system permissions to prevent pynvml from querying GPU performance counters. For example:\n\n```\n$ nvidia-smi nvlink -g 0\nGPU 0: Tesla V100-SXM2-32GB (UUID: GPU-96ab329d-7a1f-73a8-a9b7-18b4b2855f92)\nNVML: Unable to get the NvLink link utilization counter control for link 0: Insufficient Permissions\n```\n\nA simple way to check the permissions status is to look for `RmProfilingAdminOnly` in the driver `params` file (Note that `RmProfilingAdminOnly == 1` means that admin/sudo access is required):\n\n```\n$ cat /proc/driver/nvidia/params | grep RmProfilingAdminOnly\nRmProfilingAdminOnly: 1\n```\n\nFor more information on setting/unsetting the relevant admin privileges, see [these notes](https://developer.nvidia.com/nvidia-development-tools-solutions-ERR_NVGPUCTRPERM-permission-issue-performance-counters) on resolving `ERR_NVGPUCTRPERM` errors.\n\n\nRelease Notes\n-------------\n\n-   Version 2.285.0\n    - Added new functions for NVML 2.285.  See NVML documentation for more information.\n    - Ported to support Python 3.0 and Python 2.0 syntax.\n    - Added nvidia_smi.py tool as a sample app.\n-   Version 3.295.0\n    - Added new functions for NVML 3.295.  See NVML documentation for more information.\n    - Updated nvidia_smi.py tool\n      - Includes additional error handling\n-   Version 4.304.0\n    - Added new functions for NVML 4.304.  See NVML documentation for more information.\n    - Updated nvidia_smi.py tool\n-   Version 4.304.3\n    - Fixing nvmlUnitGetDeviceCount bug\n-   Version 5.319.0\n    - Added new functions for NVML 5.319.  See NVML documentation for more information.\n-   Version 6.340.0\n    - Added new functions for NVML 6.340.  See NVML documentation for more information.\n-   Version 7.346.0\n    - Added new functions for NVML 7.346.  See NVML documentation for more information.\n-   Version 7.352.0\n    - Added new functions for NVML 7.352.  See NVML documentation for more information.\n-   Version 8.0.0\n    - Refactor code to a nvidia_smi singleton class\n    - Added DeviceQuery that returns a dictionary of (name, value).\n    - Added filter parameters on DeviceQuery to match query api in nvidia-smi\n    - Added filter parameters on XmlDeviceQuery to match query api in nvidia-smi\n    - Added integer enumeration for filter strings to reduce overhead for performance monitoring.\n    - Added loop(filter) method with async and callback support\n-   Version 8.0.1\n    - Restructuring directories into two packages (pynvml and nvidia_smi)\n    - Adding initial tests for both packages\n    - Some name-convention cleanup in pynvml\n-   Version 8.0.2\n    - Added NVLink function wrappers for pynvml module\n-   Version 8.0.3\n    - Added versioneer\n    - Fixed nvmlDeviceGetNvLinkUtilizationCounter bug\n-   Version 8.0.4\n    - Added nvmlDeviceGetTotalEnergyConsumption\n    - Added notes about NVML permissions\n    - Fixed version-check testing\n\n\nCopyright\n---------\nCopyright (c) 2011-2019, NVIDIA Corporation.  All rights reserved.\n\nLicense\n-------\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n\n- Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n\n- Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n\n- Neither the name of the NVIDIA Corporation nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://www.nvidia.com/", "keywords": "", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "pynvml", "package_url": "https://pypi.org/project/pynvml/", "platform": "", "project_url": "https://pypi.org/project/pynvml/", "project_urls": {"Homepage": "http://www.nvidia.com/"}, "release_url": "https://pypi.org/project/pynvml/8.0.4/", "requires_dist": null, "requires_python": ">=3.6", "summary": "Python Bindings for the NVIDIA Management Library", "version": "8.0.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Python bindings to the NVIDIA Management Library</h1>\n<p>Provides a Python interface to GPU management and monitoring functions.</p>\n<p>This is a wrapper around the NVML library.\nFor information about the NVML library, see the NVML developer page\n<a href=\"http://developer.nvidia.com/nvidia-management-library-nvml\" rel=\"nofollow\">http://developer.nvidia.com/nvidia-management-library-nvml</a></p>\n<p>Note this file can be run with 'python -m doctest -v README.txt'\nalthough the results are system dependent</p>\n<h2>Requires</h2>\n<p>Python 3, or an earlier version with the ctypes module.</p>\n<h2>Installation</h2>\n<pre><code>pip install .\n</code></pre>\n<h2>Usage</h2>\n<p>You can use the lower level nvml bindings</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">pynvml</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">nvmlInit</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span> <span class=\"s2\">\"Driver Version:\"</span><span class=\"p\">,</span> <span class=\"n\">nvmlSystemGetDriverVersion</span><span class=\"p\">()</span>\n<span class=\"n\">Driver</span> <span class=\"n\">Version</span><span class=\"p\">:</span> <span class=\"mf\">410.00</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">deviceCount</span> <span class=\"o\">=</span> <span class=\"n\">nvmlDeviceGetCount</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">deviceCount</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"n\">handle</span> <span class=\"o\">=</span> <span class=\"n\">nvmlDeviceGetHandleByIndex</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>     <span class=\"nb\">print</span> <span class=\"s2\">\"Device\"</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"s2\">\":\"</span><span class=\"p\">,</span> <span class=\"n\">nvmlDeviceGetName</span><span class=\"p\">(</span><span class=\"n\">handle</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>\n<span class=\"n\">Device</span> <span class=\"mi\">0</span> <span class=\"p\">:</span> <span class=\"n\">Tesla</span> <span class=\"n\">V100</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">nvmlShutdown</span><span class=\"p\">()</span>\n</pre>\n<p>Or the higher level nvidia_smi API</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pynvml.smi</span> <span class=\"kn\">import</span> <span class=\"n\">nvidia_smi</span>\n<span class=\"n\">nvsmi</span> <span class=\"o\">=</span> <span class=\"n\">nvidia_smi</span><span class=\"o\">.</span><span class=\"n\">getInstance</span><span class=\"p\">()</span>\n<span class=\"n\">nvsmi</span><span class=\"o\">.</span><span class=\"n\">DeviceQuery</span><span class=\"p\">(</span><span class=\"s1\">'memory.free, memory.total'</span><span class=\"p\">)</span>\n</pre>\n<h2>Functions</h2>\n<p>Python methods wrap NVML functions, implemented in a C shared library.\nEach function's use is the same with the following exceptions:</p>\n<ul>\n<li>\n<p>Instead of returning error codes, failing error codes are raised as\nPython exceptions.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">try</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>     <span class=\"n\">nvmlDeviceGetCount</span><span class=\"p\">()</span>\n<span class=\"o\">...</span> <span class=\"k\">except</span> <span class=\"n\">NVMLError</span> <span class=\"k\">as</span> <span class=\"n\">error</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>     <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">error</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>\n<span class=\"n\">Uninitialized</span>\n</pre>\n</li>\n<li>\n<p>C function output parameters are returned from the corresponding\nPython function left to right.</p>\n<pre><span class=\"n\">nvmlReturn_t</span> <span class=\"nf\">nvmlDeviceGetEccMode</span><span class=\"p\">(</span><span class=\"n\">nvmlDevice_t</span> <span class=\"n\">device</span><span class=\"p\">,</span>\n                                  <span class=\"n\">nvmlEnableState_t</span> <span class=\"o\">*</span><span class=\"n\">current</span><span class=\"p\">,</span>\n                                  <span class=\"n\">nvmlEnableState_t</span> <span class=\"o\">*</span><span class=\"n\">pending</span><span class=\"p\">);</span>\n</pre>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">nvmlInit</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">handle</span> <span class=\"o\">=</span> <span class=\"n\">nvmlDeviceGetHandleByIndex</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">,</span> <span class=\"n\">pending</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">nvmlDeviceGetEccMode</span><span class=\"p\">(</span><span class=\"n\">handle</span><span class=\"p\">)</span>\n</pre>\n</li>\n<li>\n<p>C structs are converted into Python classes.</p>\n<pre><span class=\"n\">nvmlReturn_t</span> <span class=\"n\">DECLDIR</span> <span class=\"nf\">nvmlDeviceGetMemoryInfo</span><span class=\"p\">(</span><span class=\"n\">nvmlDevice_t</span> <span class=\"n\">device</span><span class=\"p\">,</span>\n                                             <span class=\"n\">nvmlMemory_t</span> <span class=\"o\">*</span><span class=\"n\">memory</span><span class=\"p\">);</span>\n<span class=\"k\">typedef</span> <span class=\"k\">struct</span> <span class=\"n\">nvmlMemory_st</span> <span class=\"p\">{</span>\n    <span class=\"kt\">unsigned</span> <span class=\"kt\">long</span> <span class=\"kt\">long</span> <span class=\"n\">total</span><span class=\"p\">;</span>\n    <span class=\"kt\">unsigned</span> <span class=\"kt\">long</span> <span class=\"kt\">long</span> <span class=\"n\">free</span><span class=\"p\">;</span>\n    <span class=\"kt\">unsigned</span> <span class=\"kt\">long</span> <span class=\"kt\">long</span> <span class=\"n\">used</span><span class=\"p\">;</span>\n<span class=\"p\">}</span> <span class=\"n\">nvmlMemory_t</span><span class=\"p\">;</span>\n</pre>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">info</span> <span class=\"o\">=</span> <span class=\"n\">nvmlDeviceGetMemoryInfo</span><span class=\"p\">(</span><span class=\"n\">handle</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span> <span class=\"s2\">\"Total memory:\"</span><span class=\"p\">,</span> <span class=\"n\">info</span><span class=\"o\">.</span><span class=\"n\">total</span>\n<span class=\"n\">Total</span> <span class=\"n\">memory</span><span class=\"p\">:</span> <span class=\"mi\">5636292608</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span> <span class=\"s2\">\"Free memory:\"</span><span class=\"p\">,</span> <span class=\"n\">info</span><span class=\"o\">.</span><span class=\"n\">free</span>\n<span class=\"n\">Free</span> <span class=\"n\">memory</span><span class=\"p\">:</span> <span class=\"mi\">5578420224</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span> <span class=\"s2\">\"Used memory:\"</span><span class=\"p\">,</span> <span class=\"n\">info</span><span class=\"o\">.</span><span class=\"n\">used</span>\n<span class=\"n\">Used</span> <span class=\"n\">memory</span><span class=\"p\">:</span> <span class=\"mi\">57872384</span>\n</pre>\n</li>\n<li>\n<p>Python handles string buffer creation.</p>\n<pre><span class=\"n\">nvmlReturn_t</span> <span class=\"nf\">nvmlSystemGetDriverVersion</span><span class=\"p\">(</span><span class=\"kt\">char</span><span class=\"o\">*</span> <span class=\"n\">version</span><span class=\"p\">,</span>\n                                        <span class=\"kt\">unsigned</span> <span class=\"kt\">int</span> <span class=\"n\">length</span><span class=\"p\">);</span>\n</pre>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">version</span> <span class=\"o\">=</span> <span class=\"n\">nvmlSystemGetDriverVersion</span><span class=\"p\">();</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">nvmlShutdown</span><span class=\"p\">()</span>\n</pre>\n</li>\n</ul>\n<p>For usage information see the NVML documentation.</p>\n<h2>Variables</h2>\n<p>All meaningful NVML constants and enums are exposed in Python.</p>\n<p>The NVML_VALUE_NOT_AVAILABLE constant is not used.  Instead None is mapped to the field.</p>\n<h2>NVML Permissions</h2>\n<p>Many of the <code>pynvml</code> wrappers assume that the underlying NVIDIA Management Library (NVML) API can be used without admin/root privileges.  However, it is certainly possible for the system permissions to prevent pynvml from querying GPU performance counters. For example:</p>\n<pre><code>$ nvidia-smi nvlink -g 0\nGPU 0: Tesla V100-SXM2-32GB (UUID: GPU-96ab329d-7a1f-73a8-a9b7-18b4b2855f92)\nNVML: Unable to get the NvLink link utilization counter control for link 0: Insufficient Permissions\n</code></pre>\n<p>A simple way to check the permissions status is to look for <code>RmProfilingAdminOnly</code> in the driver <code>params</code> file (Note that <code>RmProfilingAdminOnly == 1</code> means that admin/sudo access is required):</p>\n<pre><code>$ cat /proc/driver/nvidia/params | grep RmProfilingAdminOnly\nRmProfilingAdminOnly: 1\n</code></pre>\n<p>For more information on setting/unsetting the relevant admin privileges, see <a href=\"https://developer.nvidia.com/nvidia-development-tools-solutions-ERR_NVGPUCTRPERM-permission-issue-performance-counters\" rel=\"nofollow\">these notes</a> on resolving <code>ERR_NVGPUCTRPERM</code> errors.</p>\n<h2>Release Notes</h2>\n<ul>\n<li>Version 2.285.0\n<ul>\n<li>Added new functions for NVML 2.285.  See NVML documentation for more information.</li>\n<li>Ported to support Python 3.0 and Python 2.0 syntax.</li>\n<li>Added nvidia_smi.py tool as a sample app.</li>\n</ul>\n</li>\n<li>Version 3.295.0\n<ul>\n<li>Added new functions for NVML 3.295.  See NVML documentation for more information.</li>\n<li>Updated nvidia_smi.py tool\n<ul>\n<li>Includes additional error handling</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Version 4.304.0\n<ul>\n<li>Added new functions for NVML 4.304.  See NVML documentation for more information.</li>\n<li>Updated nvidia_smi.py tool</li>\n</ul>\n</li>\n<li>Version 4.304.3\n<ul>\n<li>Fixing nvmlUnitGetDeviceCount bug</li>\n</ul>\n</li>\n<li>Version 5.319.0\n<ul>\n<li>Added new functions for NVML 5.319.  See NVML documentation for more information.</li>\n</ul>\n</li>\n<li>Version 6.340.0\n<ul>\n<li>Added new functions for NVML 6.340.  See NVML documentation for more information.</li>\n</ul>\n</li>\n<li>Version 7.346.0\n<ul>\n<li>Added new functions for NVML 7.346.  See NVML documentation for more information.</li>\n</ul>\n</li>\n<li>Version 7.352.0\n<ul>\n<li>Added new functions for NVML 7.352.  See NVML documentation for more information.</li>\n</ul>\n</li>\n<li>Version 8.0.0\n<ul>\n<li>Refactor code to a nvidia_smi singleton class</li>\n<li>Added DeviceQuery that returns a dictionary of (name, value).</li>\n<li>Added filter parameters on DeviceQuery to match query api in nvidia-smi</li>\n<li>Added filter parameters on XmlDeviceQuery to match query api in nvidia-smi</li>\n<li>Added integer enumeration for filter strings to reduce overhead for performance monitoring.</li>\n<li>Added loop(filter) method with async and callback support</li>\n</ul>\n</li>\n<li>Version 8.0.1\n<ul>\n<li>Restructuring directories into two packages (pynvml and nvidia_smi)</li>\n<li>Adding initial tests for both packages</li>\n<li>Some name-convention cleanup in pynvml</li>\n</ul>\n</li>\n<li>Version 8.0.2\n<ul>\n<li>Added NVLink function wrappers for pynvml module</li>\n</ul>\n</li>\n<li>Version 8.0.3\n<ul>\n<li>Added versioneer</li>\n<li>Fixed nvmlDeviceGetNvLinkUtilizationCounter bug</li>\n</ul>\n</li>\n<li>Version 8.0.4\n<ul>\n<li>Added nvmlDeviceGetTotalEnergyConsumption</li>\n<li>Added notes about NVML permissions</li>\n<li>Fixed version-check testing</li>\n</ul>\n</li>\n</ul>\n<h2>Copyright</h2>\n<p>Copyright (c) 2011-2019, NVIDIA Corporation.  All rights reserved.</p>\n<h2>License</h2>\n<p>Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:</p>\n<ul>\n<li>\n<p>Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.</p>\n</li>\n<li>\n<p>Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.</p>\n</li>\n<li>\n<p>Neither the name of the NVIDIA Corporation nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.</p>\n</li>\n</ul>\n<p>THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</p>\n\n          </div>"}, "last_serial": 6431796, "releases": {"8.0.1": [{"comment_text": "", "digests": {"md5": "fb044672f9e5e093e76bfe45c01bb89f", "sha256": "425c760b5e21ade73c38da168b657017dbddeb4aa90fc70b5f93c41be389f189"}, "downloads": -1, "filename": "pynvml-8.0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "fb044672f9e5e093e76bfe45c01bb89f", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6", "size": 33823, "upload_time": "2019-05-03T20:52:01", "upload_time_iso_8601": "2019-05-03T20:52:01.056002Z", "url": "https://files.pythonhosted.org/packages/b7/6c/0f292b95bd255bde728194e49c4ffcc308baf7c99cf80445741ffa70a50f/pynvml-8.0.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a9a8c3c1c78ec3e19a334d9a4a2ca572", "sha256": "373d2eabb95866ad60ea184266a32bcea6b5a9958919a56d2926b50d88755857"}, "downloads": -1, "filename": "pynvml-8.0.1.tar.gz", "has_sig": false, "md5_digest": "a9a8c3c1c78ec3e19a334d9a4a2ca572", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 35598, "upload_time": "2019-05-03T20:52:03", "upload_time_iso_8601": "2019-05-03T20:52:03.332053Z", "url": "https://files.pythonhosted.org/packages/75/51/5aad2f3339a94aaa57e4ee4590332e12434205946f70db74622f13999bc1/pynvml-8.0.1.tar.gz", "yanked": false}], "8.0.2": [{"comment_text": "", "digests": {"md5": "0c0fd0351ef60ea81b3bb5140e365b64", "sha256": "95fe05b141c5f63dbb97cb35dd0f1c8a17d9240d5e4d1a68183b325b5168c4a4"}, "downloads": -1, "filename": "pynvml-8.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "0c0fd0351ef60ea81b3bb5140e365b64", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 35575, "upload_time": "2019-08-16T19:28:04", "upload_time_iso_8601": "2019-08-16T19:28:04.013282Z", "url": "https://files.pythonhosted.org/packages/97/89/7a56c14117167a41efa3838b0d9f7960f05269fd23db396bbf19cceb4399/pynvml-8.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "69c4b33518409de9584870fee4397428", "sha256": "465db2da0471b0ee9fe04bbeca6545d9fb5627181b0abac272ca0767b1579d00"}, "downloads": -1, "filename": "pynvml-8.0.2.tar.gz", "has_sig": false, "md5_digest": "69c4b33518409de9584870fee4397428", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 37359, "upload_time": "2019-08-16T19:28:05", "upload_time_iso_8601": "2019-08-16T19:28:05.781546Z", "url": "https://files.pythonhosted.org/packages/45/94/b9434439a20ceb6b0ee85506d48d7f4f5ceea0f15f2225c887b06d47444c/pynvml-8.0.2.tar.gz", "yanked": false}], "8.0.3": [{"comment_text": "", "digests": {"md5": "331b2b848e395a07dc3574d4cc254292", "sha256": "368ea0e819abf82ca58395f082e05c5552c740ae6c5f2a9e8d3adce3326a03a8"}, "downloads": -1, "filename": "pynvml-8.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "331b2b848e395a07dc3574d4cc254292", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 36132, "upload_time": "2019-09-03T14:32:00", "upload_time_iso_8601": "2019-09-03T14:32:00.909735Z", "url": "https://files.pythonhosted.org/packages/63/e6/7a621480e789a51243c721a297ce0f2e492fd96e9fd762261fad2b861e70/pynvml-8.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ec05a3ead7f53dea6427b4d640a8cdfa", "sha256": "cf4ad1b59351a8e7d9040f0fba95decf0f0966c0ed76084a2541bfd2a37d694b"}, "downloads": -1, "filename": "pynvml-8.0.3.tar.gz", "has_sig": false, "md5_digest": "ec05a3ead7f53dea6427b4d640a8cdfa", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 53546, "upload_time": "2019-09-03T14:32:03", "upload_time_iso_8601": "2019-09-03T14:32:03.522066Z", "url": "https://files.pythonhosted.org/packages/45/7b/201cd98534c7093eef2f5cc4a1bb1b974dc20eb6024439612328b102cf49/pynvml-8.0.3.tar.gz", "yanked": false}], "8.0.4": [{"comment_text": "", "digests": {"md5": "1c517bdbdc518600828464263f814e41", "sha256": "00c1a54fd3462a0774ec08add0d9fbb5f051214a85f782ca7d55b85eb8d54e53"}, "downloads": -1, "filename": "pynvml-8.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "1c517bdbdc518600828464263f814e41", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 36697, "upload_time": "2020-01-10T17:08:31", "upload_time_iso_8601": "2020-01-10T17:08:31.300915Z", "url": "https://files.pythonhosted.org/packages/1b/1a/a25c143e1d2f873d67edf534b269d028dd3c20be69737cca56bf28911d02/pynvml-8.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b3bec0ddcbb9e77265ed0db29adcee7c", "sha256": "c8d4eadc648c7e12a3c9182a9750afd8481b76412f83747bcc01e2aa829cde5d"}, "downloads": -1, "filename": "pynvml-8.0.4.tar.gz", "has_sig": false, "md5_digest": "b3bec0ddcbb9e77265ed0db29adcee7c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 54739, "upload_time": "2020-01-10T16:29:16", "upload_time_iso_8601": "2020-01-10T16:29:16.304520Z", "url": "https://files.pythonhosted.org/packages/0c/78/f63eb0c5e465c194edc5419b9dcd001bb285122b7582f1d2b0f9710ff05a/pynvml-8.0.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "1c517bdbdc518600828464263f814e41", "sha256": "00c1a54fd3462a0774ec08add0d9fbb5f051214a85f782ca7d55b85eb8d54e53"}, "downloads": -1, "filename": "pynvml-8.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "1c517bdbdc518600828464263f814e41", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 36697, "upload_time": "2020-01-10T17:08:31", "upload_time_iso_8601": "2020-01-10T17:08:31.300915Z", "url": "https://files.pythonhosted.org/packages/1b/1a/a25c143e1d2f873d67edf534b269d028dd3c20be69737cca56bf28911d02/pynvml-8.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b3bec0ddcbb9e77265ed0db29adcee7c", "sha256": "c8d4eadc648c7e12a3c9182a9750afd8481b76412f83747bcc01e2aa829cde5d"}, "downloads": -1, "filename": "pynvml-8.0.4.tar.gz", "has_sig": false, "md5_digest": "b3bec0ddcbb9e77265ed0db29adcee7c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 54739, "upload_time": "2020-01-10T16:29:16", "upload_time_iso_8601": "2020-01-10T16:29:16.304520Z", "url": "https://files.pythonhosted.org/packages/0c/78/f63eb0c5e465c194edc5419b9dcd001bb285122b7582f1d2b0f9710ff05a/pynvml-8.0.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:00:57 2020"}