{"info": {"author": "Akshay Agarwal", "author_email": "akshay2agarwal@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "# rabbitmq_asynqp\nPython package for using rabbitmq using asynqp\n\nUsage:\n\n\n* Both producer and consumer:\n\n    rabbitmq_asynqp provides you ability to use rabbitmq messaging asynchronous non-blocking way by the use of asynqp and\n    asyncio with just few lines of code. Typical usage will be like this:\n\n\n            from rabbitmq_asynqp.messaging import Messaging\n\n            rabbitmq_config = dict(host=\"localhost\", port=5672, username=\"guest\", password=\"guest\")\n            queue_config = dict(\n                    exchange=\"sample_exchange\",\n                    queues=[\"sample_queue1\"],\n                    routing_key=\"sample.routing_key\",\n                    exchange_type=\"direct\",\n                    error_messaging=dict(\n                        exchange=\"error_exchange\",\n                        queues=[\"error_queue\"],\n                        routing_key=\"error.key\",\n                        exchange_type=\"direct\",\n                    )\n                )\n\n            queue_settings = {'reconnect_backoff_secs': 1, 'connection_check_polling_secs': 5} # Not compulsory\n\n            def consumer_func(message: dict):\n                # define your consumer func\n                pass\n\n            messaging = Messaging(rabbitmq_config: dict, queue_config: dict, consumer_func)\n\n    use this messaging object globally for sending message like this:\n\n            messaging.send_message(message) # To send single message\n            messaging.send_messages(messages) # To send multiple bulk messages\n\n* Only Consumer:\n\n\n    To run only consumer use a separate thread or process and do following:\n\n            from rabbitmq_asynqp.messaging import Consumer\n\n            rabbitmq_config = dict(host=\"localhost\", port=5672, username=\"guest\", password=\"guest\")\n            queue = \"queue_name\"\n            queue_settings = {'reconnect_backoff_secs': 1, 'connection_check_polling_secs': 5} # Not compulsory\n\n            def consumer_func(message:dict):\n                # define your consumer func\n                pass\n\n            consumer = Consumer(rabbitmq_config, queue, consumer_func, queue_settings)\n            consumer()\n\n\n* Only Producer:\n\n\n    To run producer only for message production:\n\n            from rabbitmq_asynqp.messaging import Producer\n\n            rabbitmq_config = dict(host=\"localhost\", port=5672, username=\"guest\", password=\"guest\")\n            queue_config = dict(\n                    exchange=\"sample_exchange\",\n                    queues=[\"sample_queue1\"],\n                    routing_key=\"sample.routing_key\",\n                    exchange_type=\"direct\",\n                    error_messaging=dict(\n                        exchange=\"error_exchange\",\n                        queues=[\"error_queue\"],\n                        routing_key=\"error.key\",\n                        exchange_type=\"direct\",\n                    )\n                )\n\n            producer = Producer(rabbitmq_config, queue_config)\n            producer.send_msg(message)\n\n\n<b>Message sent must be dict.</b>\n\nFor any queries, mail to <b>akshay2agarwal@gmail.com</b>\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://pypi.python.org/pypi/rabbitmq_asynqp/", "keywords": "", "license": "LICENSE.txt", "maintainer": "", "maintainer_email": "", "name": "rabbitmq-asynqp", "package_url": "https://pypi.org/project/rabbitmq-asynqp/", "platform": "", "project_url": "https://pypi.org/project/rabbitmq-asynqp/", "project_urls": {"Homepage": "http://pypi.python.org/pypi/rabbitmq_asynqp/"}, "release_url": "https://pypi.org/project/rabbitmq-asynqp/0.1.1/", "requires_dist": ["asynqp (>=0.5.1)"], "requires_python": "", "summary": "Implementation of rabbitmq with asynqp", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>rabbitmq_asynqp</h1>\n<p>Python package for using rabbitmq using asynqp</p>\n<p>Usage:</p>\n<ul>\n<li>\n<p>Both producer and consumer:</p>\n<p>rabbitmq_asynqp provides you ability to use rabbitmq messaging asynchronous non-blocking way by the use of asynqp and\nasyncio with just few lines of code. Typical usage will be like this:</p>\n<pre><code>      from rabbitmq_asynqp.messaging import Messaging\n\n      rabbitmq_config = dict(host=\"localhost\", port=5672, username=\"guest\", password=\"guest\")\n      queue_config = dict(\n              exchange=\"sample_exchange\",\n              queues=[\"sample_queue1\"],\n              routing_key=\"sample.routing_key\",\n              exchange_type=\"direct\",\n              error_messaging=dict(\n                  exchange=\"error_exchange\",\n                  queues=[\"error_queue\"],\n                  routing_key=\"error.key\",\n                  exchange_type=\"direct\",\n              )\n          )\n\n      queue_settings = {'reconnect_backoff_secs': 1, 'connection_check_polling_secs': 5} # Not compulsory\n\n      def consumer_func(message: dict):\n          # define your consumer func\n          pass\n\n      messaging = Messaging(rabbitmq_config: dict, queue_config: dict, consumer_func)\n</code></pre>\n<p>use this messaging object globally for sending message like this:</p>\n<pre><code>      messaging.send_message(message) # To send single message\n      messaging.send_messages(messages) # To send multiple bulk messages\n</code></pre>\n</li>\n<li>\n<p>Only Consumer:</p>\n<p>To run only consumer use a separate thread or process and do following:</p>\n<pre><code>      from rabbitmq_asynqp.messaging import Consumer\n\n      rabbitmq_config = dict(host=\"localhost\", port=5672, username=\"guest\", password=\"guest\")\n      queue = \"queue_name\"\n      queue_settings = {'reconnect_backoff_secs': 1, 'connection_check_polling_secs': 5} # Not compulsory\n\n      def consumer_func(message:dict):\n          # define your consumer func\n          pass\n\n      consumer = Consumer(rabbitmq_config, queue, consumer_func, queue_settings)\n      consumer()\n</code></pre>\n</li>\n<li>\n<p>Only Producer:</p>\n<p>To run producer only for message production:</p>\n<pre><code>      from rabbitmq_asynqp.messaging import Producer\n\n      rabbitmq_config = dict(host=\"localhost\", port=5672, username=\"guest\", password=\"guest\")\n      queue_config = dict(\n              exchange=\"sample_exchange\",\n              queues=[\"sample_queue1\"],\n              routing_key=\"sample.routing_key\",\n              exchange_type=\"direct\",\n              error_messaging=dict(\n                  exchange=\"error_exchange\",\n                  queues=[\"error_queue\"],\n                  routing_key=\"error.key\",\n                  exchange_type=\"direct\",\n              )\n          )\n\n      producer = Producer(rabbitmq_config, queue_config)\n      producer.send_msg(message)\n</code></pre>\n</li>\n</ul>\n<p><b>Message sent must be dict.</b></p>\n<p>For any queries, mail to <b><a href=\"mailto:akshay2agarwal@gmail.com\">akshay2agarwal@gmail.com</a></b></p>\n\n          </div>"}, "last_serial": 4713152, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "3a6d3f7c6043c5d91e8f5945ad55a9bf", "sha256": "4beacd778a270c432498bed61799d3cdddd6cdbd91223c9b85c3ba97600f39e9"}, "downloads": -1, "filename": "rabbitmq_asynqp-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "3a6d3f7c6043c5d91e8f5945ad55a9bf", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 10838, "upload_time": "2019-01-18T12:04:55", "upload_time_iso_8601": "2019-01-18T12:04:55.849346Z", "url": "https://files.pythonhosted.org/packages/ae/ad/5e511080e5ae1d671b921468d8e3c92586ea56f76fba321336c1a080cca2/rabbitmq_asynqp-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2caba49a1dd132a3a04606ef1ac45ce2", "sha256": "95a160f67967aa910c891a6ac00c143f6f930f40923916241a572acc0570f6e1"}, "downloads": -1, "filename": "rabbitmq_asynqp-0.1.0.tar.gz", "has_sig": false, "md5_digest": "2caba49a1dd132a3a04606ef1ac45ce2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4986, "upload_time": "2019-01-18T12:04:58", "upload_time_iso_8601": "2019-01-18T12:04:58.034690Z", "url": "https://files.pythonhosted.org/packages/32/d6/76ac57c5ca39023750b09324b27064cf6237da14c05f3e52eb757094842d/rabbitmq_asynqp-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "3e9e7f678f48481d40f6f81f6f966abd", "sha256": "4b927ba2444f1936e435c4c042bae3bb1e611f251e21e17e860bca7190c86504"}, "downloads": -1, "filename": "rabbitmq_asynqp-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "3e9e7f678f48481d40f6f81f6f966abd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 11103, "upload_time": "2019-01-18T18:10:38", "upload_time_iso_8601": "2019-01-18T18:10:38.494950Z", "url": "https://files.pythonhosted.org/packages/55/03/1120f3bf67feaadca99fe31969c4eb16d0ce2491e35da0536757af479328/rabbitmq_asynqp-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7ee6dfbc62531c3d67c21a79efc0d082", "sha256": "8914463224d2b0874c9f9476a9453423f638a1d10517f8fc1fe3f34b80d8db38"}, "downloads": -1, "filename": "rabbitmq_asynqp-0.1.1.tar.gz", "has_sig": false, "md5_digest": "7ee6dfbc62531c3d67c21a79efc0d082", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5316, "upload_time": "2019-01-18T18:10:39", "upload_time_iso_8601": "2019-01-18T18:10:39.931599Z", "url": "https://files.pythonhosted.org/packages/bb/f3/6d3d825e17df71f62b8ba28226eea34519a2ee61d4e331fc014da5c6f004/rabbitmq_asynqp-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "3e9e7f678f48481d40f6f81f6f966abd", "sha256": "4b927ba2444f1936e435c4c042bae3bb1e611f251e21e17e860bca7190c86504"}, "downloads": -1, "filename": "rabbitmq_asynqp-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "3e9e7f678f48481d40f6f81f6f966abd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 11103, "upload_time": "2019-01-18T18:10:38", "upload_time_iso_8601": "2019-01-18T18:10:38.494950Z", "url": "https://files.pythonhosted.org/packages/55/03/1120f3bf67feaadca99fe31969c4eb16d0ce2491e35da0536757af479328/rabbitmq_asynqp-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7ee6dfbc62531c3d67c21a79efc0d082", "sha256": "8914463224d2b0874c9f9476a9453423f638a1d10517f8fc1fe3f34b80d8db38"}, "downloads": -1, "filename": "rabbitmq_asynqp-0.1.1.tar.gz", "has_sig": false, "md5_digest": "7ee6dfbc62531c3d67c21a79efc0d082", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5316, "upload_time": "2019-01-18T18:10:39", "upload_time_iso_8601": "2019-01-18T18:10:39.931599Z", "url": "https://files.pythonhosted.org/packages/bb/f3/6d3d825e17df71f62b8ba28226eea34519a2ee61d4e331fc014da5c6f004/rabbitmq_asynqp-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:08:08 2020"}