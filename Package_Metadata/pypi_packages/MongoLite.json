{"info": {"author": "Namlook", "author_email": "UNKNOWN", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Other Environment", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Database", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: Utilities"], "description": "=========\nMongoLite\n=========\n\nMongoLite is a fork of MongoKit_ by the same author. It aims to come back to simplicity by stripping a lot of features and replacing them with best practices.\n\nThe goal of MongoLite is to stick as much as possible to the pymongo api.\nMongoLite always choose speed over syntaxic sugar, this is why you won't see\nvalidation or dot notation features in this project.\n\n.. _MongoKit : http://namlook.github.com/mongokit/\n\nMongoLite is perfect for who wants a thin layer on top of pymongo and don't care about validation stuff.\n\nA mongolite is a beautiful stone_\n\n.. _stone : http://www.mindat.org/photos/0656330001207867080.jpg\n\n.. _MongoKit : http://namlook.github.com/mongokit/\n\n.. topic:: **Your data is clean**:\n\n    \"Tools change, not data\". In order to follow this \"credo\", just like\n    MongoKit, MongoLite won't add any information into your data saved into the\n    database.  So if you need to use other mongo tools or ODMs in other languages,\n    your data won't be polluted by MongoLite's stuff.\n\nFeatures\n========\n\n * schema less feature\n * inheritance and polymorphisme support\n * skeleton generation (your object is automaticaly filled by the correct fields)\n * nested and complex schema declaration\n * default values features\n * random query support (which returns a random document from the database)\n * json helpers\n * GridFS support\n\n.. Go to the full documentation_ .\n\n.. _documentation : http://github.com/namlook/MongoLite/wiki\n\nA quick example\n===============\n\nA Document declaration look like that::\n\n    >>> from mongolite import *\n    >>> import datetime\n\n    >>> connection = Connection()\n    \n    >>> @connection.register\n    ... class BlogPost(Document):\n    ...     __database__ = 'test'\n    ...     __collection__ = 'example'\n    ...     skeleton = {\n    ...             'title':unicode,\n    ...             'body':unicode,\n    ...             'author':unicode,\n    ...             'date_creation':datetime.datetime,\n    ...             'rank':int\n    ...     }\n    ...     optional = {\n    ...             'tags': [unicode],\n    ...     }\n    ...     default_values = {'rank':0, 'date_creation':datetime.datetime.utcnow}\n    ... \n\n    >>> blogpost = con.BlogPost() # this use the db \"test\" from `__database__` and the collection \"example\" from `__collection__`\n    >>> blogpost # the skeleton is automatically generated (based on the skeleton attribute)\n    {'body': None, 'title': None, 'date_creation': datetime.datetime(...), 'rank': 0, 'author': None}\n    >>> blogpost['title'] = u'my title'\n    >>> blogpost['body'] = u'a body'\n    >>> blogpost['author'] = u'me'\n    >>> blogpost['tags'] = ['about me', 'first post']\n    >>> blogpost\n    {'body': u'a body', 'title': u'my title', 'date_creation': datetime.datetime(...), 'rank': 0, 'author': u'me', 'tags': [u'about me', u'first post']}\n    >>> blogpost.save()\n\nNote that, while fields in `skeleton` should be present in the document, fields in `optional` attribute are not generated by default. It aims to be for documentation only...\n\nTo access those fields, use the following convention:\n\n**for fields in skeleton**::\n\n    >>> title = blogpost['title']\n\n**for fields in optional**::\n\n    >>> tags = blogpost.get('tags', [])\n\nMongoLite is written on top of pymongo. All the pymongo's API is accessible and the results are wrapped into Document objects:\n\n    >>> blogpost = con.BlogPost.find_one() # this is a blogpost object\n\nHowever, if you need more performances, you can use the pymongo layer directly:\n\n    >>> blogpost = con.test.example.find_one() # this is a dict\n\nSuggestion and patches are really welcome. If you find mistakes in the documentation\n(english is not my primary langage) feel free to contact me. You can find me (namlook) \non twitter_.\n\n.. _twitter : http://twitter.com/namlook\n\n\nRecent Change Log\n=================\n\nv1.5\n----\n\n * support pymongo 2.4\n\nv1.4\n----\n\n * support pymongo 2.3\n * added fix for unconditional access to __wrap on cursors\n * add __getitem__ suport on Cursor\n\nv1.3\n----\n\n * change pymongo.objectid -> bson.objectid as this alias was deleted in pymongo 2.2\n * add exception in case of bad behavior with inherited queries\n\nv1.2\n----\n\n * fix generate_indexes() and slightly api change\n\nv1.1\n----\n\n * add inherited queries support\n * add serialize support\n * fix pymongo's version\n\nv1.0\n----\n\n * fork from MongoKit, strip all unwanted features", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://namlook.github.com/mongolite/", "keywords": null, "license": "New BSD License", "maintainer": null, "maintainer_email": null, "name": "MongoLite", "package_url": "https://pypi.org/project/MongoLite/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/MongoLite/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://namlook.github.com/mongolite/"}, "release_url": "https://pypi.org/project/MongoLite/1.5/", "requires_dist": null, "requires_python": null, "summary": "Python MongoDB light toolkit", "version": "1.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>MongoLite is a fork of <a href=\"http://namlook.github.com/mongokit/\" rel=\"nofollow\">MongoKit</a> by the same author. It aims to come back to simplicity by stripping a lot of features and replacing them with best practices.</p>\n<p>The goal of MongoLite is to stick as much as possible to the pymongo api.\nMongoLite always choose speed over syntaxic sugar, this is why you won\u2019t see\nvalidation or dot notation features in this project.</p>\n<p>MongoLite is perfect for who wants a thin layer on top of pymongo and don\u2019t care about validation stuff.</p>\n<p>A mongolite is a beautiful <a href=\"http://www.mindat.org/photos/0656330001207867080.jpg\" rel=\"nofollow\">stone</a></p>\n<div>\n<p><strong>Your data is clean</strong>:</p>\n<p>\u201cTools change, not data\u201d. In order to follow this \u201ccredo\u201d, just like\nMongoKit, MongoLite won\u2019t add any information into your data saved into the\ndatabase.  So if you need to use other mongo tools or ODMs in other languages,\nyour data won\u2019t be polluted by MongoLite\u2019s stuff.</p>\n</div>\n<div id=\"features\">\n<h2>Features</h2>\n<blockquote>\n<ul>\n<li>schema less feature</li>\n<li>inheritance and polymorphisme support</li>\n<li>skeleton generation (your object is automaticaly filled by the correct fields)</li>\n<li>nested and complex schema declaration</li>\n<li>default values features</li>\n<li>random query support (which returns a random document from the database)</li>\n<li>json helpers</li>\n<li>GridFS support</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"a-quick-example\">\n<h2>A quick example</h2>\n<p>A Document declaration look like that:</p>\n<pre>&gt;&gt;&gt; from mongolite import *\n&gt;&gt;&gt; import datetime\n\n&gt;&gt;&gt; connection = Connection()\n\n&gt;&gt;&gt; @connection.register\n... class BlogPost(Document):\n...     __database__ = 'test'\n...     __collection__ = 'example'\n...     skeleton = {\n...             'title':unicode,\n...             'body':unicode,\n...             'author':unicode,\n...             'date_creation':datetime.datetime,\n...             'rank':int\n...     }\n...     optional = {\n...             'tags': [unicode],\n...     }\n...     default_values = {'rank':0, 'date_creation':datetime.datetime.utcnow}\n...\n\n&gt;&gt;&gt; blogpost = con.BlogPost() # this use the db \"test\" from `__database__` and the collection \"example\" from `__collection__`\n&gt;&gt;&gt; blogpost # the skeleton is automatically generated (based on the skeleton attribute)\n{'body': None, 'title': None, 'date_creation': datetime.datetime(...), 'rank': 0, 'author': None}\n&gt;&gt;&gt; blogpost['title'] = u'my title'\n&gt;&gt;&gt; blogpost['body'] = u'a body'\n&gt;&gt;&gt; blogpost['author'] = u'me'\n&gt;&gt;&gt; blogpost['tags'] = ['about me', 'first post']\n&gt;&gt;&gt; blogpost\n{'body': u'a body', 'title': u'my title', 'date_creation': datetime.datetime(...), 'rank': 0, 'author': u'me', 'tags': [u'about me', u'first post']}\n&gt;&gt;&gt; blogpost.save()\n</pre>\n<p>Note that, while fields in <cite>skeleton</cite> should be present in the document, fields in <cite>optional</cite> attribute are not generated by default. It aims to be for documentation only\u2026</p>\n<p>To access those fields, use the following convention:</p>\n<p><strong>for fields in skeleton</strong>:</p>\n<pre>&gt;&gt;&gt; title = blogpost['title']\n</pre>\n<p><strong>for fields in optional</strong>:</p>\n<pre>&gt;&gt;&gt; tags = blogpost.get('tags', [])\n</pre>\n<p>MongoLite is written on top of pymongo. All the pymongo\u2019s API is accessible and the results are wrapped into Document objects:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; blogpost = con.BlogPost.find_one() # this is a blogpost object\n</pre>\n</blockquote>\n<p>However, if you need more performances, you can use the pymongo layer directly:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; blogpost = con.test.example.find_one() # this is a dict\n</pre>\n</blockquote>\n<p>Suggestion and patches are really welcome. If you find mistakes in the documentation\n(english is not my primary langage) feel free to contact me. You can find me (namlook)\non <a href=\"http://twitter.com/namlook\" rel=\"nofollow\">twitter</a>.</p>\n</div>\n<div id=\"recent-change-log\">\n<h2>Recent Change Log</h2>\n<div id=\"v1-5\">\n<h3>v1.5</h3>\n<blockquote>\n<ul>\n<li>support pymongo 2.4</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"v1-4\">\n<h3>v1.4</h3>\n<blockquote>\n<ul>\n<li>support pymongo 2.3</li>\n<li>added fix for unconditional access to __wrap on cursors</li>\n<li>add __getitem__ suport on Cursor</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"v1-3\">\n<h3>v1.3</h3>\n<blockquote>\n<ul>\n<li>change pymongo.objectid -&gt; bson.objectid as this alias was deleted in pymongo 2.2</li>\n<li>add exception in case of bad behavior with inherited queries</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"v1-2\">\n<h3>v1.2</h3>\n<blockquote>\n<ul>\n<li>fix generate_indexes() and slightly api change</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"v1-1\">\n<h3>v1.1</h3>\n<blockquote>\n<ul>\n<li>add inherited queries support</li>\n<li>add serialize support</li>\n<li>fix pymongo\u2019s version</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"v1-0\">\n<h3>v1.0</h3>\n<blockquote>\n<ul>\n<li>fork from MongoKit, strip all unwanted features</li>\n</ul>\n</blockquote>\n</div>\n</div>\n\n          </div>"}, "last_serial": 784734, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "07a2919c88ccc4f55ff0ad29abd1c928", "sha256": "7d10c046f2beb524f9a512f5123916dc4f573ec6416b49541aeb248c34666a5b"}, "downloads": -1, "filename": "MongoLite-1.0.tar.gz", "has_sig": false, "md5_digest": "07a2919c88ccc4f55ff0ad29abd1c928", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 58748, "upload_time": "2011-08-17T17:34:32", "upload_time_iso_8601": "2011-08-17T17:34:32.943434Z", "url": "https://files.pythonhosted.org/packages/1b/d0/a7d208fce761de09733d47692f62deaf0fa41fa4c1cba35f277d4b2a43b6/MongoLite-1.0.tar.gz", "yanked": false}], "1.0beta1": [{"comment_text": "", "digests": {"md5": "81be00370cbc37652affeb0b4b119d1a", "sha256": "68650ba5ed27207465a4c6a877b3a332ae6ce41ce8d1e090e3a8ec0da616e0ac"}, "downloads": -1, "filename": "MongoLite-1.0beta1.tar.gz", "has_sig": false, "md5_digest": "81be00370cbc37652affeb0b4b119d1a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 35890, "upload_time": "2011-08-08T15:46:43", "upload_time_iso_8601": "2011-08-08T15:46:43.589514Z", "url": "https://files.pythonhosted.org/packages/fd/f8/773001aa7966fa155256d0db3007c4ca056a67cc9dbb18a8f4be19d618b1/MongoLite-1.0beta1.tar.gz", "yanked": false}], "1.1": [{"comment_text": "", "digests": {"md5": "42f2898fee2cd7dfbc34172033889c32", "sha256": "96c5f4cff625d738a93ad6dabaccd750c46296a854bfc57f35a4b19700d0470c"}, "downloads": -1, "filename": "MongoLite-1.1.tar.gz", "has_sig": false, "md5_digest": "42f2898fee2cd7dfbc34172033889c32", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 61306, "upload_time": "2011-08-22T10:45:16", "upload_time_iso_8601": "2011-08-22T10:45:16.733303Z", "url": "https://files.pythonhosted.org/packages/df/89/d380b578e4ae59a6441d0ed0fe2ea3984fda025a7ec279f4e46474c2a603/MongoLite-1.1.tar.gz", "yanked": false}], "1.2": [{"comment_text": "", "digests": {"md5": "c7d5b7376b2574afa55e1c89b16e3b20", "sha256": "742e37371dc479c6a8a2156ebebebca439e2baaaf4f924ce286cc6f2e1a36880"}, "downloads": -1, "filename": "MongoLite-1.2.tar.gz", "has_sig": false, "md5_digest": "c7d5b7376b2574afa55e1c89b16e3b20", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 67626, "upload_time": "2011-08-22T11:59:28", "upload_time_iso_8601": "2011-08-22T11:59:28.250854Z", "url": "https://files.pythonhosted.org/packages/2b/91/fd13cae874eef4be5c55bf27bd4cd0278ef7d71965f41e4972ae88fefc95/MongoLite-1.2.tar.gz", "yanked": false}], "1.3": [{"comment_text": "", "digests": {"md5": "c476b3793f6bc04006eb9c0612888bbe", "sha256": "57053a85ca3fd15bf9c6463f66ac2aafa77eb320929aa0c7a80e90173331fdda"}, "downloads": -1, "filename": "MongoLite-1.3.tar.gz", "has_sig": false, "md5_digest": "c476b3793f6bc04006eb9c0612888bbe", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 32206, "upload_time": "2012-06-05T15:36:20", "upload_time_iso_8601": "2012-06-05T15:36:20.450120Z", "url": "https://files.pythonhosted.org/packages/98/9d/13e6b7e39f0a513cfe7cb55598ab19f82f8b3a3ce1b48677e809cb7ba72b/MongoLite-1.3.tar.gz", "yanked": false}], "1.4": [{"comment_text": "", "digests": {"md5": "bbf1acb75c0d62a3dd3eaa909045b679", "sha256": "3d27f1a41f416fec1e84494d349f5b40eeb8f9d20f13c40dab1a92c857554504"}, "downloads": -1, "filename": "MongoLite-1.4.tar.gz", "has_sig": false, "md5_digest": "bbf1acb75c0d62a3dd3eaa909045b679", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 63399, "upload_time": "2012-09-04T10:14:13", "upload_time_iso_8601": "2012-09-04T10:14:13.953225Z", "url": "https://files.pythonhosted.org/packages/58/18/15d44aaaa880b27bf0c4331c76b6d206cba9bc640544173008bca8a967f2/MongoLite-1.4.tar.gz", "yanked": false}], "1.5": [{"comment_text": "", "digests": {"md5": "004327ff079a226a88a3745ba7d27fdf", "sha256": "13bd134013fd8ca42af4bb04a685fa782e41b96cce6054d52df2743f34f7cf1e"}, "downloads": -1, "filename": "MongoLite-1.5.tar.gz", "has_sig": false, "md5_digest": "004327ff079a226a88a3745ba7d27fdf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 32041, "upload_time": "2012-12-11T14:25:12", "upload_time_iso_8601": "2012-12-11T14:25:12.141876Z", "url": "https://files.pythonhosted.org/packages/1e/9f/66b02563a7b6396226cce7ec9f991acc2010f737471f74f8d6b28b80b073/MongoLite-1.5.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "004327ff079a226a88a3745ba7d27fdf", "sha256": "13bd134013fd8ca42af4bb04a685fa782e41b96cce6054d52df2743f34f7cf1e"}, "downloads": -1, "filename": "MongoLite-1.5.tar.gz", "has_sig": false, "md5_digest": "004327ff079a226a88a3745ba7d27fdf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 32041, "upload_time": "2012-12-11T14:25:12", "upload_time_iso_8601": "2012-12-11T14:25:12.141876Z", "url": "https://files.pythonhosted.org/packages/1e/9f/66b02563a7b6396226cce7ec9f991acc2010f737471f74f8d6b28b80b073/MongoLite-1.5.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:52:17 2020"}