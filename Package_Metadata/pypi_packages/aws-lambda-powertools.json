{"info": {"author": "Amazon Web Services", "author_email": "", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "# Lambda Powertools\n\n![PackageStatus](https://img.shields.io/static/v1?label=status&message=beta&color=blueviolet?style=flat-square) ![PythonSupport](https://img.shields.io/static/v1?label=python&message=3.6%20|%203.7|%203.8&color=blue?style=flat-square&logo=python) ![PyPI version](https://badge.fury.io/py/aws-lambda-powertools.svg) ![PyPi monthly downloads](https://img.shields.io/pypi/dm/aws-lambda-powertools) ![Build](https://github.com/awslabs/aws-lambda-powertools/workflows/Powertools%20Python/badge.svg?branch=master)\n\nA suite of utilities for AWS Lambda Functions that makes tracing with AWS X-Ray, structured logging and creating custom metrics asynchronously easier - Currently available for Python only and compatible with Python >=3.6.\n\n**Status**: Beta\n\n## Features\n\n**Tracing**\n\n> It currently uses AWS X-Ray\n\n* Decorators that capture cold start as annotation, and response and exceptions as metadata\n* Run functions locally with SAM CLI without code change to disable tracing\n* Explicitly disable tracing via env var `POWERTOOLS_TRACE_DISABLED=\"true\"`\n\n**Logging**\n\n* Decorators that capture key fields from Lambda context, cold start and structures logging output as JSON\n* Optionally log Lambda request when instructed (disabled by default)\n    - Enable via `POWERTOOLS_LOGGER_LOG_EVENT=\"true\"` or explicitly via decorator param\n* Logs canonical custom metric line to logs that can be consumed asynchronously\n* Log sampling enables DEBUG log level for a percentage of requests (disabled by default)\n    - Enable via `POWERTOOLS_LOGGER_SAMPLE_RATE=0.1`, ranges from 0 to 1, where 0.1 is 10% and 1 is 100%\n* Append additional keys to structured log at any point in time so they're available across log statements\n\n**Metrics**\n\n* Aggregate up to 100 metrics using a single CloudWatch Embedded Metric Format object (large JSON blob)\n* Context manager to create an one off metric with a different dimension than metrics already aggregated\n* Validate against common metric definitions mistakes (metric unit, values, max dimensions, max metrics, etc)\n* No stack, custom resource, data collection needed \u2014 Metrics are created async by CloudWatch EMF\n\n**Bring your own middleware**\n\n* Utility to easily create your own middleware\n* Run logic before, after, and handle exceptions\n* Receive lambda handler, event, context\n* Optionally create sub-segment for each custom middleware\n\n**Environment variables** used across suite of utilities\n\nEnvironment variable | Description | Default | Utility\n------------------------------------------------- | --------------------------------------------------------------------------------- | --------------------------------------------------------------------------------- | -------------------------------------------------\nPOWERTOOLS_SERVICE_NAME | Sets service name used for tracing namespace, metrics dimensions and structured logging | \"service_undefined\" | all\nPOWERTOOLS_TRACE_DISABLED | Disables tracing | \"false\" | tracing\nPOWERTOOLS_TRACE_MIDDLEWARES | Creates sub-segment for each middleware created by lambda_handler_decorator | \"false\" | middleware_factory\nPOWERTOOLS_LOGGER_LOG_EVENT | Logs incoming event | \"false\" | logging\nPOWERTOOLS_LOGGER_SAMPLE_RATE | Debug log sampling  | 0 | logging\nPOWERTOOLS_METRICS_NAMESPACE | Metrics namespace  | None | metrics\nLOG_LEVEL | Sets logging level | \"INFO\" | logging\n\n## Usage\n\n### Installation\n\nWith [pip](https://pip.pypa.io/en/latest/index.html) installed, run: ``pip install aws-lambda-powertools``\n\n### Tracing\n\n**Example SAM template using supported environment variables**\n\n```yaml\nGlobals:\n  Function:\n    Tracing: Active # can also be enabled per function\n    Environment:\n        Variables:\n            POWERTOOLS_SERVICE_NAME: \"payment\" \n            POWERTOOLS_TRACE_DISABLED: \"false\" \n```\n\n**Pseudo Python Lambda code**\n\n```python\nfrom aws_lambda_powertools.tracing import Tracer\ntracer = Tracer()\n# tracer = Tracer(service=\"payment\") # can also be explicitly defined\n\n@tracer.capture_method\ndef collect_payment(charge_id):\n  # logic\n  ret = requests.post(PAYMENT_ENDPOINT)\n  # custom annotation\n  tracer.put_annotation(\"PAYMENT_STATUS\", \"SUCCESS\")\n  return ret\n\n@tracer.capture_lambda_handler\ndef handler(event, context)\n  charge_id = event.get('charge_id')\n  payment = collect_payment(charge_id)\n  ...\n```\n\n**Fetching a pre-configured tracer anywhere**\n\n```python\n# handler.py\nfrom aws_lambda_powertools.tracing import Tracer\ntracer = Tracer(service=\"payment\")\n\n@tracer.capture_lambda_handler\ndef handler(event, context)\n  charge_id = event.get('charge_id')\n  payment = collect_payment(charge_id)\n  ...\n\n# another_file.py\nfrom aws_lambda_powertools.tracing import Tracer\ntracer = Tracer(auto_patch=False) # new instance using existing configuration with auto patching overriden\n```\n\n### Logging\n\n> **NOTE** `logger_setup` and `logger_inject_lambda_context` are deprecated and will be completely removed once it's GA.\n\n**Example SAM template using supported environment variables**\n\n```yaml\nGlobals:\n  Function:\n    Environment:\n        Variables:\n            POWERTOOLS_SERVICE_NAME: \"payment\" \n            POWERTOOLS_LOGGER_SAMPLE_RATE: 0.1 # enable debug logging for 1% of requests, 0% by default\n            LOG_LEVEL: \"INFO\"\n```\n\n**Pseudo Python Lambda code**\n\n```python\nfrom aws_lambda_powertools.logging import Logger\n\nlogger = Logger()\n# Logger(service=\"payment\", level=\"INFO\") # also accepts explicit service name, log level\n\n@logger.inject_lambda_context\ndef handler(event, context)\n  logger.info(\"Collecting payment\")\n  ...\n  # You can log entire objects too\n  logger.info({\n    \"operation\": \"collect_payment\",\n    \"charge_id\": event['charge_id']\n  })\n  ...\n```\n\n**Exerpt output in CloudWatch Logs**\n\n```json\n{  \n   \"timestamp\":\"2019-08-22 18:17:33,774\",\n   \"level\":\"INFO\",\n   \"location\":\"collect.handler:1\",\n   \"service\":\"payment\",\n   \"lambda_function_name\":\"test\",\n   \"lambda_function_memory_size\":\"128\",\n   \"lambda_function_arn\":\"arn:aws:lambda:eu-west-1:12345678910:function:test\",\n   \"lambda_request_id\":\"52fdfc07-2182-154f-163f-5f0f9a621d72\",\n   \"cold_start\": \"true\",\n   \"sampling_rate\": 0.1,\n   \"message\": \"Collecting payment\"\n}\n\n{  \n   \"timestamp\":\"2019-08-22 18:17:33,774\",\n   \"level\":\"INFO\",\n   \"location\":\"collect.handler:15\",\n   \"service\":\"payment\",\n   \"lambda_function_name\":\"test\",\n   \"lambda_function_memory_size\":\"128\",\n   \"lambda_function_arn\":\"arn:aws:lambda:eu-west-1:12345678910:function:test\",\n   \"lambda_request_id\":\"52fdfc07-2182-154f-163f-5f0f9a621d72\",\n   \"cold_start\": \"true\",\n   \"sampling_rate\": 0.1,\n   \"message\":{  \n      \"operation\":\"collect_payment\",\n      \"charge_id\": \"ch_AZFlk2345C0\"\n   }\n}\n```\n\n**Append additional keys to structured log**\n\n```python\nfrom aws_lambda_powertools.logging import Logger\n\nlogger = Logger()\n\n@logger.inject_lambda_context\ndef handler(event, context)\n  if \"order_id\" in event:\n      logger.structure_logs(append=True, order_id=event[\"order_id\"])\n  logger.info(\"Collecting payment\")\n  ...\n```\n\n**Exerpt output in CloudWatch Logs**\n\n```json\n{  \n   \"timestamp\":\"2019-08-22 18:17:33,774\",\n   \"level\":\"INFO\",\n   \"location\":\"collect.handler:1\",\n   \"service\":\"payment\",\n   \"lambda_function_name\":\"test\",\n   \"lambda_function_memory_size\":\"128\",\n   \"lambda_function_arn\":\"arn:aws:lambda:eu-west-1:12345678910:function:test\",\n   \"lambda_request_id\":\"52fdfc07-2182-154f-163f-5f0f9a621d72\",\n   \"cold_start\": \"true\",\n   \"sampling_rate\": 0.1,\n   \"order_id\": \"order_id_value\",\n   \"message\": \"Collecting payment\"\n}\n```\n\n### Custom Metrics async\n\n> **NOTE** `log_metric` will be removed once it's GA.\n\nThis feature makes use of CloudWatch Embedded Metric Format (EMF) and metrics are created asynchronously by CloudWatch service\n\n> Contrary to `log_metric`, you don't need any custom resource or additional CloudFormation stack anymore.\n\nMetrics middleware validates against the minimum necessary for a metric to be published:\n\n* At least of one Metric and Dimension \n* Maximum of 9 dimensions\n* Only one Namespace\n* [Any Metric unit supported by CloudWatch](https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_MetricDatum.html)\n\n**Creating multiple metrics**\n\n`log_metrics` decorator calls the decorated function, so leave that for last decorator or will fail with `SchemaValidationError` if no metrics are recorded.\n\n```python\nfrom aws_lambda_powertools.metrics import Metrics, MetricUnit\n\nmetrics = Metrics()\nmetrics.add_namespace(name=\"ServerlessAirline\")\nmetrics.add_metric(name=\"ColdStart\", unit=\"Count\", value=1)\nmetrics.add_dimension(name=\"service\", value=\"booking\")\n\n@metrics.log_metrics\n@tracer.capture_lambda_handler\ndef lambda_handler(evt, ctx):\n    metrics.add_metric(name=\"BookingConfirmation\", unit=\"Count\", value=1)\n    some_code()\n    return True\n\ndef some_code():\n    metrics.add_metric(name=\"some_other_metric\", unit=MetricUnit.Seconds, value=1)\n    ...\n```\n\nCloudWatch EMF uses the same dimensions across all metrics. If you have metrics that should have different dimensions, use `single_metric` to create a single metric with any dimension you want. Generally, this would be an edge case since you [pay for unique metric](https://aws.amazon.com/cloudwatch/pricing/) \n\n> unique metric = (metric_name + dimension_name + dimension_value)\n\n```python\nfrom aws_lambda_powertools.metrics import MetricUnit, single_metric\n\nwith single_metric(name=\"ColdStart\", unit=MetricUnit.Count, value=1) as metric:\n    metric.add_dimension(name=\"function_context\", value=\"$LATEST\")\n```\n\n> **NOTE**: If you want to instantiate Metrics() in multiple places in your code, make sure to use `POWERTOOLS_METRICS_NAMESPACE` env var as we don't keep a copy of that across instances.\n\n### Utilities\n\n#### Bring your own middleware\n\nThis feature allows you to create your own middleware as a decorator with ease by following a simple signature. \n\n* Accept 3 mandatory args - `handler, event, context` \n* Always return the handler with event/context or response if executed\n  - Supports nested middleware/decorators use case\n\n**Middleware with no params**\n\n```python\nfrom aws_lambda_powertools.middleware_factory import lambda_handler_decorator\n\n@lambda_handler_decorator\ndef middleware_name(handler, event, context):\n    return handler(event, context)\n\n@lambda_handler_decorator\ndef middleware_before_after(handler, event, context):\n    logic_before_handler_execution()\n    response = handler(event, context)\n    logic_after_handler_execution()\n    return response\n\n\n# middleware_name will wrap Lambda handler \n# and simply return the handler as we're not pre/post-processing anything\n# then middleware_before_after will wrap middleware_name\n# run some code before/after calling the handler returned by middleware_name\n# This way, lambda_handler is only actually called once (top-down)\n@middleware_before_after # This will run last\n@middleware_name # This will run first\ndef lambda_handler(event, context):\n    return True\n```\n\n**Middleware with params**\n\n```python\n@lambda_handler_decorator\ndef obfuscate_sensitive_data(handler, event, context, fields=None):\n    # Obfuscate email before calling Lambda handler\n    if fields:\n        for field in fields:\n            field = event.get(field, \"\")\n            event[field] = obfuscate_pii(field)\n\n    return handler(event, context)\n\n@obfuscate_sensitive_data(fields=[\"email\"])\ndef lambda_handler(event, context):\n    return True\n```\n\n**Optionally trace middleware execution**\n\nThis makes use of an existing Tracer instance that you may have initialized anywhere in your code, otherwise it'll initialize one using default options and provider (X-Ray).\n\n```python\nfrom aws_lambda_powertools.middleware_factory import lambda_handler_decorator\n\n@lambda_handler_decorator(trace_execution=True)\ndef middleware_name(handler, event, context):\n    return handler(event, context)\n\n@middleware_name\ndef lambda_handler(event, context):\n    return True\n```\n\nOptionally, you can enrich the final trace with additional annotations and metadata by retrieving a copy of the Tracer used.\n\n```python\nfrom aws_lambda_powertools.middleware_factory import lambda_handler_decorator\nfrom aws_lambda_powertools.tracing import Tracer\n\n@lambda_handler_decorator(trace_execution=True)\ndef middleware_name(handler, event, context):\n    tracer = Tracer() # Takes a copy of an existing tracer instance\n    tracer.add_anotation...\n    tracer.metadata...\n    return handler(event, context)\n\n@middleware_name\ndef lambda_handler(event, context):\n    return True\n```\n\n\n### Debug mode\n\nBy default, all debug log statements from AWS Lambda Powertools package are suppressed. If you'd like to enable them, use `set_package_logger` utility:\n\n```python\nimport aws_lambda_powertools\naws_lambda_powertools.logging.logger.set_package_logger()\n...\n```\n\n## Beta\n\nThis library may change its API/methods or environment variables as it receives feedback from customers\n\n**[Progress towards GA](https://github.com/awslabs/aws-lambda-powertools/projects/1)**\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/awslabs/aws-lambda-powertools/", "keywords": "aws_lambda_powertools,aws,tracing,logging,lambda,powertools", "license": "", "maintainer": "", "maintainer_email": "", "name": "aws-lambda-powertools", "package_url": "https://pypi.org/project/aws-lambda-powertools/", "platform": "", "project_url": "https://pypi.org/project/aws-lambda-powertools/", "project_urls": {"Homepage": "https://github.com/awslabs/aws-lambda-powertools/", "Repository": "https://github.com/awslabs/aws-lambda-powertools/"}, "release_url": "https://pypi.org/project/aws-lambda-powertools/0.8.1/", "requires_dist": ["aws-xray-sdk (>=2.4.3,<3.0.0)", "fastjsonschema (>=2.14.4,<3.0.0)"], "requires_python": ">=3.6,<4.0", "summary": "Python utilities for AWS Lambda functions including but not limited to tracing, logging and custom metric", "version": "0.8.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Lambda Powertools</h1>\n<p><img alt=\"PackageStatus\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/12d125520e820f0fe7d6f15768a42607e06b6d2c/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f6c6162656c3d737461747573266d6573736167653d6265746126636f6c6f723d626c756576696f6c65743f7374796c653d666c61742d737175617265\"> <img alt=\"PythonSupport\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/98f30f85a81caa573aa4ad664f2649b5eda31ab9/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f6c6162656c3d707974686f6e266d6573736167653d332e36253230253743253230332e37253743253230332e3826636f6c6f723d626c75653f7374796c653d666c61742d737175617265266c6f676f3d707974686f6e\"> <img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d5d5e9fb520deb09ca64a47f32048c7c7d789e41/68747470733a2f2f62616467652e667572792e696f2f70792f6177732d6c616d6264612d706f776572746f6f6c732e737667\"> <img alt=\"PyPi monthly downloads\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b2969d5a75b985207815942e1994033e5222529c/68747470733a2f2f696d672e736869656c64732e696f2f707970692f646d2f6177732d6c616d6264612d706f776572746f6f6c73\"> <img alt=\"Build\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c22683b27d75708108559a5ff62bc18cb051dcb8/68747470733a2f2f6769746875622e636f6d2f6177736c6162732f6177732d6c616d6264612d706f776572746f6f6c732f776f726b666c6f77732f506f776572746f6f6c73253230507974686f6e2f62616467652e7376673f6272616e63683d6d6173746572\"></p>\n<p>A suite of utilities for AWS Lambda Functions that makes tracing with AWS X-Ray, structured logging and creating custom metrics asynchronously easier - Currently available for Python only and compatible with Python &gt;=3.6.</p>\n<p><strong>Status</strong>: Beta</p>\n<h2>Features</h2>\n<p><strong>Tracing</strong></p>\n<blockquote>\n<p>It currently uses AWS X-Ray</p>\n</blockquote>\n<ul>\n<li>Decorators that capture cold start as annotation, and response and exceptions as metadata</li>\n<li>Run functions locally with SAM CLI without code change to disable tracing</li>\n<li>Explicitly disable tracing via env var <code>POWERTOOLS_TRACE_DISABLED=\"true\"</code></li>\n</ul>\n<p><strong>Logging</strong></p>\n<ul>\n<li>Decorators that capture key fields from Lambda context, cold start and structures logging output as JSON</li>\n<li>Optionally log Lambda request when instructed (disabled by default)\n<ul>\n<li>Enable via <code>POWERTOOLS_LOGGER_LOG_EVENT=\"true\"</code> or explicitly via decorator param</li>\n</ul>\n</li>\n<li>Logs canonical custom metric line to logs that can be consumed asynchronously</li>\n<li>Log sampling enables DEBUG log level for a percentage of requests (disabled by default)\n<ul>\n<li>Enable via <code>POWERTOOLS_LOGGER_SAMPLE_RATE=0.1</code>, ranges from 0 to 1, where 0.1 is 10% and 1 is 100%</li>\n</ul>\n</li>\n<li>Append additional keys to structured log at any point in time so they're available across log statements</li>\n</ul>\n<p><strong>Metrics</strong></p>\n<ul>\n<li>Aggregate up to 100 metrics using a single CloudWatch Embedded Metric Format object (large JSON blob)</li>\n<li>Context manager to create an one off metric with a different dimension than metrics already aggregated</li>\n<li>Validate against common metric definitions mistakes (metric unit, values, max dimensions, max metrics, etc)</li>\n<li>No stack, custom resource, data collection needed \u2014 Metrics are created async by CloudWatch EMF</li>\n</ul>\n<p><strong>Bring your own middleware</strong></p>\n<ul>\n<li>Utility to easily create your own middleware</li>\n<li>Run logic before, after, and handle exceptions</li>\n<li>Receive lambda handler, event, context</li>\n<li>Optionally create sub-segment for each custom middleware</li>\n</ul>\n<p><strong>Environment variables</strong> used across suite of utilities</p>\n<table>\n<thead>\n<tr>\n<th>Environment variable</th>\n<th>Description</th>\n<th>Default</th>\n<th>Utility</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>POWERTOOLS_SERVICE_NAME</td>\n<td>Sets service name used for tracing namespace, metrics dimensions and structured logging</td>\n<td>\"service_undefined\"</td>\n<td>all</td>\n</tr>\n<tr>\n<td>POWERTOOLS_TRACE_DISABLED</td>\n<td>Disables tracing</td>\n<td>\"false\"</td>\n<td>tracing</td>\n</tr>\n<tr>\n<td>POWERTOOLS_TRACE_MIDDLEWARES</td>\n<td>Creates sub-segment for each middleware created by lambda_handler_decorator</td>\n<td>\"false\"</td>\n<td>middleware_factory</td>\n</tr>\n<tr>\n<td>POWERTOOLS_LOGGER_LOG_EVENT</td>\n<td>Logs incoming event</td>\n<td>\"false\"</td>\n<td>logging</td>\n</tr>\n<tr>\n<td>POWERTOOLS_LOGGER_SAMPLE_RATE</td>\n<td>Debug log sampling</td>\n<td>0</td>\n<td>logging</td>\n</tr>\n<tr>\n<td>POWERTOOLS_METRICS_NAMESPACE</td>\n<td>Metrics namespace</td>\n<td>None</td>\n<td>metrics</td>\n</tr>\n<tr>\n<td>LOG_LEVEL</td>\n<td>Sets logging level</td>\n<td>\"INFO\"</td>\n<td>logging</td>\n</tr></tbody></table>\n<h2>Usage</h2>\n<h3>Installation</h3>\n<p>With <a href=\"https://pip.pypa.io/en/latest/index.html\" rel=\"nofollow\">pip</a> installed, run: <code>pip install aws-lambda-powertools</code></p>\n<h3>Tracing</h3>\n<p><strong>Example SAM template using supported environment variables</strong></p>\n<pre><span class=\"nt\">Globals</span><span class=\"p\">:</span>\n  <span class=\"nt\">Function</span><span class=\"p\">:</span>\n    <span class=\"nt\">Tracing</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">Active</span> <span class=\"c1\"># can also be enabled per function</span>\n    <span class=\"nt\">Environment</span><span class=\"p\">:</span>\n        <span class=\"nt\">Variables</span><span class=\"p\">:</span>\n            <span class=\"nt\">POWERTOOLS_SERVICE_NAME</span><span class=\"p\">:</span> <span class=\"s\">\"payment\"</span> \n            <span class=\"nt\">POWERTOOLS_TRACE_DISABLED</span><span class=\"p\">:</span> <span class=\"s\">\"false\"</span> \n</pre>\n<p><strong>Pseudo Python Lambda code</strong></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">aws_lambda_powertools.tracing</span> <span class=\"kn\">import</span> <span class=\"n\">Tracer</span>\n<span class=\"n\">tracer</span> <span class=\"o\">=</span> <span class=\"n\">Tracer</span><span class=\"p\">()</span>\n<span class=\"c1\"># tracer = Tracer(service=\"payment\") # can also be explicitly defined</span>\n\n<span class=\"nd\">@tracer</span><span class=\"o\">.</span><span class=\"n\">capture_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">collect_payment</span><span class=\"p\">(</span><span class=\"n\">charge_id</span><span class=\"p\">):</span>\n  <span class=\"c1\"># logic</span>\n  <span class=\"n\">ret</span> <span class=\"o\">=</span> <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">post</span><span class=\"p\">(</span><span class=\"n\">PAYMENT_ENDPOINT</span><span class=\"p\">)</span>\n  <span class=\"c1\"># custom annotation</span>\n  <span class=\"n\">tracer</span><span class=\"o\">.</span><span class=\"n\">put_annotation</span><span class=\"p\">(</span><span class=\"s2\">\"PAYMENT_STATUS\"</span><span class=\"p\">,</span> <span class=\"s2\">\"SUCCESS\"</span><span class=\"p\">)</span>\n  <span class=\"k\">return</span> <span class=\"n\">ret</span>\n\n<span class=\"nd\">@tracer</span><span class=\"o\">.</span><span class=\"n\">capture_lambda_handler</span>\n<span class=\"k\">def</span> <span class=\"nf\">handler</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">)</span>\n  <span class=\"n\">charge_id</span> <span class=\"o\">=</span> <span class=\"n\">event</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'charge_id'</span><span class=\"p\">)</span>\n  <span class=\"n\">payment</span> <span class=\"o\">=</span> <span class=\"n\">collect_payment</span><span class=\"p\">(</span><span class=\"n\">charge_id</span><span class=\"p\">)</span>\n  <span class=\"o\">...</span>\n</pre>\n<p><strong>Fetching a pre-configured tracer anywhere</strong></p>\n<pre><span class=\"c1\"># handler.py</span>\n<span class=\"kn\">from</span> <span class=\"nn\">aws_lambda_powertools.tracing</span> <span class=\"kn\">import</span> <span class=\"n\">Tracer</span>\n<span class=\"n\">tracer</span> <span class=\"o\">=</span> <span class=\"n\">Tracer</span><span class=\"p\">(</span><span class=\"n\">service</span><span class=\"o\">=</span><span class=\"s2\">\"payment\"</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@tracer</span><span class=\"o\">.</span><span class=\"n\">capture_lambda_handler</span>\n<span class=\"k\">def</span> <span class=\"nf\">handler</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">)</span>\n  <span class=\"n\">charge_id</span> <span class=\"o\">=</span> <span class=\"n\">event</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'charge_id'</span><span class=\"p\">)</span>\n  <span class=\"n\">payment</span> <span class=\"o\">=</span> <span class=\"n\">collect_payment</span><span class=\"p\">(</span><span class=\"n\">charge_id</span><span class=\"p\">)</span>\n  <span class=\"o\">...</span>\n\n<span class=\"c1\"># another_file.py</span>\n<span class=\"kn\">from</span> <span class=\"nn\">aws_lambda_powertools.tracing</span> <span class=\"kn\">import</span> <span class=\"n\">Tracer</span>\n<span class=\"n\">tracer</span> <span class=\"o\">=</span> <span class=\"n\">Tracer</span><span class=\"p\">(</span><span class=\"n\">auto_patch</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span> <span class=\"c1\"># new instance using existing configuration with auto patching overriden</span>\n</pre>\n<h3>Logging</h3>\n<blockquote>\n<p><strong>NOTE</strong> <code>logger_setup</code> and <code>logger_inject_lambda_context</code> are deprecated and will be completely removed once it's GA.</p>\n</blockquote>\n<p><strong>Example SAM template using supported environment variables</strong></p>\n<pre><span class=\"nt\">Globals</span><span class=\"p\">:</span>\n  <span class=\"nt\">Function</span><span class=\"p\">:</span>\n    <span class=\"nt\">Environment</span><span class=\"p\">:</span>\n        <span class=\"nt\">Variables</span><span class=\"p\">:</span>\n            <span class=\"nt\">POWERTOOLS_SERVICE_NAME</span><span class=\"p\">:</span> <span class=\"s\">\"payment\"</span> \n            <span class=\"nt\">POWERTOOLS_LOGGER_SAMPLE_RATE</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">0.1</span> <span class=\"c1\"># enable debug logging for 1% of requests, 0% by default</span>\n            <span class=\"nt\">LOG_LEVEL</span><span class=\"p\">:</span> <span class=\"s\">\"INFO\"</span>\n</pre>\n<p><strong>Pseudo Python Lambda code</strong></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">aws_lambda_powertools.logging</span> <span class=\"kn\">import</span> <span class=\"n\">Logger</span>\n\n<span class=\"n\">logger</span> <span class=\"o\">=</span> <span class=\"n\">Logger</span><span class=\"p\">()</span>\n<span class=\"c1\"># Logger(service=\"payment\", level=\"INFO\") # also accepts explicit service name, log level</span>\n\n<span class=\"nd\">@logger</span><span class=\"o\">.</span><span class=\"n\">inject_lambda_context</span>\n<span class=\"k\">def</span> <span class=\"nf\">handler</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">)</span>\n  <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">\"Collecting payment\"</span><span class=\"p\">)</span>\n  <span class=\"o\">...</span>\n  <span class=\"c1\"># You can log entire objects too</span>\n  <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">({</span>\n    <span class=\"s2\">\"operation\"</span><span class=\"p\">:</span> <span class=\"s2\">\"collect_payment\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"charge_id\"</span><span class=\"p\">:</span> <span class=\"n\">event</span><span class=\"p\">[</span><span class=\"s1\">'charge_id'</span><span class=\"p\">]</span>\n  <span class=\"p\">})</span>\n  <span class=\"o\">...</span>\n</pre>\n<p><strong>Exerpt output in CloudWatch Logs</strong></p>\n<pre><span class=\"p\">{</span>  \n   <span class=\"nt\">\"timestamp\"</span><span class=\"p\">:</span><span class=\"s2\">\"2019-08-22 18:17:33,774\"</span><span class=\"p\">,</span>\n   <span class=\"nt\">\"level\"</span><span class=\"p\">:</span><span class=\"s2\">\"INFO\"</span><span class=\"p\">,</span>\n   <span class=\"nt\">\"location\"</span><span class=\"p\">:</span><span class=\"s2\">\"collect.handler:1\"</span><span class=\"p\">,</span>\n   <span class=\"nt\">\"service\"</span><span class=\"p\">:</span><span class=\"s2\">\"payment\"</span><span class=\"p\">,</span>\n   <span class=\"nt\">\"lambda_function_name\"</span><span class=\"p\">:</span><span class=\"s2\">\"test\"</span><span class=\"p\">,</span>\n   <span class=\"nt\">\"lambda_function_memory_size\"</span><span class=\"p\">:</span><span class=\"s2\">\"128\"</span><span class=\"p\">,</span>\n   <span class=\"nt\">\"lambda_function_arn\"</span><span class=\"p\">:</span><span class=\"s2\">\"arn:aws:lambda:eu-west-1:12345678910:function:test\"</span><span class=\"p\">,</span>\n   <span class=\"nt\">\"lambda_request_id\"</span><span class=\"p\">:</span><span class=\"s2\">\"52fdfc07-2182-154f-163f-5f0f9a621d72\"</span><span class=\"p\">,</span>\n   <span class=\"nt\">\"cold_start\"</span><span class=\"p\">:</span> <span class=\"s2\">\"true\"</span><span class=\"p\">,</span>\n   <span class=\"nt\">\"sampling_rate\"</span><span class=\"p\">:</span> <span class=\"mf\">0.1</span><span class=\"p\">,</span>\n   <span class=\"nt\">\"message\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Collecting payment\"</span>\n<span class=\"p\">}</span>\n\n<span class=\"p\">{</span>  \n   <span class=\"nt\">\"timestamp\"</span><span class=\"p\">:</span><span class=\"s2\">\"2019-08-22 18:17:33,774\"</span><span class=\"p\">,</span>\n   <span class=\"nt\">\"level\"</span><span class=\"p\">:</span><span class=\"s2\">\"INFO\"</span><span class=\"p\">,</span>\n   <span class=\"nt\">\"location\"</span><span class=\"p\">:</span><span class=\"s2\">\"collect.handler:15\"</span><span class=\"p\">,</span>\n   <span class=\"nt\">\"service\"</span><span class=\"p\">:</span><span class=\"s2\">\"payment\"</span><span class=\"p\">,</span>\n   <span class=\"nt\">\"lambda_function_name\"</span><span class=\"p\">:</span><span class=\"s2\">\"test\"</span><span class=\"p\">,</span>\n   <span class=\"nt\">\"lambda_function_memory_size\"</span><span class=\"p\">:</span><span class=\"s2\">\"128\"</span><span class=\"p\">,</span>\n   <span class=\"nt\">\"lambda_function_arn\"</span><span class=\"p\">:</span><span class=\"s2\">\"arn:aws:lambda:eu-west-1:12345678910:function:test\"</span><span class=\"p\">,</span>\n   <span class=\"nt\">\"lambda_request_id\"</span><span class=\"p\">:</span><span class=\"s2\">\"52fdfc07-2182-154f-163f-5f0f9a621d72\"</span><span class=\"p\">,</span>\n   <span class=\"nt\">\"cold_start\"</span><span class=\"p\">:</span> <span class=\"s2\">\"true\"</span><span class=\"p\">,</span>\n   <span class=\"nt\">\"sampling_rate\"</span><span class=\"p\">:</span> <span class=\"mf\">0.1</span><span class=\"p\">,</span>\n   <span class=\"nt\">\"message\"</span><span class=\"p\">:{</span>  \n      <span class=\"nt\">\"operation\"</span><span class=\"p\">:</span><span class=\"s2\">\"collect_payment\"</span><span class=\"p\">,</span>\n      <span class=\"nt\">\"charge_id\"</span><span class=\"p\">:</span> <span class=\"s2\">\"ch_AZFlk2345C0\"</span>\n   <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n<p><strong>Append additional keys to structured log</strong></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">aws_lambda_powertools.logging</span> <span class=\"kn\">import</span> <span class=\"n\">Logger</span>\n\n<span class=\"n\">logger</span> <span class=\"o\">=</span> <span class=\"n\">Logger</span><span class=\"p\">()</span>\n\n<span class=\"nd\">@logger</span><span class=\"o\">.</span><span class=\"n\">inject_lambda_context</span>\n<span class=\"k\">def</span> <span class=\"nf\">handler</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">)</span>\n  <span class=\"k\">if</span> <span class=\"s2\">\"order_id\"</span> <span class=\"ow\">in</span> <span class=\"n\">event</span><span class=\"p\">:</span>\n      <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">structure_logs</span><span class=\"p\">(</span><span class=\"n\">append</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">order_id</span><span class=\"o\">=</span><span class=\"n\">event</span><span class=\"p\">[</span><span class=\"s2\">\"order_id\"</span><span class=\"p\">])</span>\n  <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">\"Collecting payment\"</span><span class=\"p\">)</span>\n  <span class=\"o\">...</span>\n</pre>\n<p><strong>Exerpt output in CloudWatch Logs</strong></p>\n<pre><span class=\"p\">{</span>  \n   <span class=\"nt\">\"timestamp\"</span><span class=\"p\">:</span><span class=\"s2\">\"2019-08-22 18:17:33,774\"</span><span class=\"p\">,</span>\n   <span class=\"nt\">\"level\"</span><span class=\"p\">:</span><span class=\"s2\">\"INFO\"</span><span class=\"p\">,</span>\n   <span class=\"nt\">\"location\"</span><span class=\"p\">:</span><span class=\"s2\">\"collect.handler:1\"</span><span class=\"p\">,</span>\n   <span class=\"nt\">\"service\"</span><span class=\"p\">:</span><span class=\"s2\">\"payment\"</span><span class=\"p\">,</span>\n   <span class=\"nt\">\"lambda_function_name\"</span><span class=\"p\">:</span><span class=\"s2\">\"test\"</span><span class=\"p\">,</span>\n   <span class=\"nt\">\"lambda_function_memory_size\"</span><span class=\"p\">:</span><span class=\"s2\">\"128\"</span><span class=\"p\">,</span>\n   <span class=\"nt\">\"lambda_function_arn\"</span><span class=\"p\">:</span><span class=\"s2\">\"arn:aws:lambda:eu-west-1:12345678910:function:test\"</span><span class=\"p\">,</span>\n   <span class=\"nt\">\"lambda_request_id\"</span><span class=\"p\">:</span><span class=\"s2\">\"52fdfc07-2182-154f-163f-5f0f9a621d72\"</span><span class=\"p\">,</span>\n   <span class=\"nt\">\"cold_start\"</span><span class=\"p\">:</span> <span class=\"s2\">\"true\"</span><span class=\"p\">,</span>\n   <span class=\"nt\">\"sampling_rate\"</span><span class=\"p\">:</span> <span class=\"mf\">0.1</span><span class=\"p\">,</span>\n   <span class=\"nt\">\"order_id\"</span><span class=\"p\">:</span> <span class=\"s2\">\"order_id_value\"</span><span class=\"p\">,</span>\n   <span class=\"nt\">\"message\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Collecting payment\"</span>\n<span class=\"p\">}</span>\n</pre>\n<h3>Custom Metrics async</h3>\n<blockquote>\n<p><strong>NOTE</strong> <code>log_metric</code> will be removed once it's GA.</p>\n</blockquote>\n<p>This feature makes use of CloudWatch Embedded Metric Format (EMF) and metrics are created asynchronously by CloudWatch service</p>\n<blockquote>\n<p>Contrary to <code>log_metric</code>, you don't need any custom resource or additional CloudFormation stack anymore.</p>\n</blockquote>\n<p>Metrics middleware validates against the minimum necessary for a metric to be published:</p>\n<ul>\n<li>At least of one Metric and Dimension</li>\n<li>Maximum of 9 dimensions</li>\n<li>Only one Namespace</li>\n<li><a href=\"https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_MetricDatum.html\" rel=\"nofollow\">Any Metric unit supported by CloudWatch</a></li>\n</ul>\n<p><strong>Creating multiple metrics</strong></p>\n<p><code>log_metrics</code> decorator calls the decorated function, so leave that for last decorator or will fail with <code>SchemaValidationError</code> if no metrics are recorded.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">aws_lambda_powertools.metrics</span> <span class=\"kn\">import</span> <span class=\"n\">Metrics</span><span class=\"p\">,</span> <span class=\"n\">MetricUnit</span>\n\n<span class=\"n\">metrics</span> <span class=\"o\">=</span> <span class=\"n\">Metrics</span><span class=\"p\">()</span>\n<span class=\"n\">metrics</span><span class=\"o\">.</span><span class=\"n\">add_namespace</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"ServerlessAirline\"</span><span class=\"p\">)</span>\n<span class=\"n\">metrics</span><span class=\"o\">.</span><span class=\"n\">add_metric</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"ColdStart\"</span><span class=\"p\">,</span> <span class=\"n\">unit</span><span class=\"o\">=</span><span class=\"s2\">\"Count\"</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">metrics</span><span class=\"o\">.</span><span class=\"n\">add_dimension</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"service\"</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"o\">=</span><span class=\"s2\">\"booking\"</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@metrics</span><span class=\"o\">.</span><span class=\"n\">log_metrics</span>\n<span class=\"nd\">@tracer</span><span class=\"o\">.</span><span class=\"n\">capture_lambda_handler</span>\n<span class=\"k\">def</span> <span class=\"nf\">lambda_handler</span><span class=\"p\">(</span><span class=\"n\">evt</span><span class=\"p\">,</span> <span class=\"n\">ctx</span><span class=\"p\">):</span>\n    <span class=\"n\">metrics</span><span class=\"o\">.</span><span class=\"n\">add_metric</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"BookingConfirmation\"</span><span class=\"p\">,</span> <span class=\"n\">unit</span><span class=\"o\">=</span><span class=\"s2\">\"Count\"</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"n\">some_code</span><span class=\"p\">()</span>\n    <span class=\"k\">return</span> <span class=\"kc\">True</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">some_code</span><span class=\"p\">():</span>\n    <span class=\"n\">metrics</span><span class=\"o\">.</span><span class=\"n\">add_metric</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"some_other_metric\"</span><span class=\"p\">,</span> <span class=\"n\">unit</span><span class=\"o\">=</span><span class=\"n\">MetricUnit</span><span class=\"o\">.</span><span class=\"n\">Seconds</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"o\">...</span>\n</pre>\n<p>CloudWatch EMF uses the same dimensions across all metrics. If you have metrics that should have different dimensions, use <code>single_metric</code> to create a single metric with any dimension you want. Generally, this would be an edge case since you <a href=\"https://aws.amazon.com/cloudwatch/pricing/\" rel=\"nofollow\">pay for unique metric</a></p>\n<blockquote>\n<p>unique metric = (metric_name + dimension_name + dimension_value)</p>\n</blockquote>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">aws_lambda_powertools.metrics</span> <span class=\"kn\">import</span> <span class=\"n\">MetricUnit</span><span class=\"p\">,</span> <span class=\"n\">single_metric</span>\n\n<span class=\"k\">with</span> <span class=\"n\">single_metric</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"ColdStart\"</span><span class=\"p\">,</span> <span class=\"n\">unit</span><span class=\"o\">=</span><span class=\"n\">MetricUnit</span><span class=\"o\">.</span><span class=\"n\">Count</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">metric</span><span class=\"p\">:</span>\n    <span class=\"n\">metric</span><span class=\"o\">.</span><span class=\"n\">add_dimension</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"function_context\"</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"o\">=</span><span class=\"s2\">\"$LATEST\"</span><span class=\"p\">)</span>\n</pre>\n<blockquote>\n<p><strong>NOTE</strong>: If you want to instantiate Metrics() in multiple places in your code, make sure to use <code>POWERTOOLS_METRICS_NAMESPACE</code> env var as we don't keep a copy of that across instances.</p>\n</blockquote>\n<h3>Utilities</h3>\n<h4>Bring your own middleware</h4>\n<p>This feature allows you to create your own middleware as a decorator with ease by following a simple signature.</p>\n<ul>\n<li>Accept 3 mandatory args - <code>handler, event, context</code></li>\n<li>Always return the handler with event/context or response if executed\n<ul>\n<li>Supports nested middleware/decorators use case</li>\n</ul>\n</li>\n</ul>\n<p><strong>Middleware with no params</strong></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">aws_lambda_powertools.middleware_factory</span> <span class=\"kn\">import</span> <span class=\"n\">lambda_handler_decorator</span>\n\n<span class=\"nd\">@lambda_handler_decorator</span>\n<span class=\"k\">def</span> <span class=\"nf\">middleware_name</span><span class=\"p\">(</span><span class=\"n\">handler</span><span class=\"p\">,</span> <span class=\"n\">event</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">handler</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@lambda_handler_decorator</span>\n<span class=\"k\">def</span> <span class=\"nf\">middleware_before_after</span><span class=\"p\">(</span><span class=\"n\">handler</span><span class=\"p\">,</span> <span class=\"n\">event</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">):</span>\n    <span class=\"n\">logic_before_handler_execution</span><span class=\"p\">()</span>\n    <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">handler</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">)</span>\n    <span class=\"n\">logic_after_handler_execution</span><span class=\"p\">()</span>\n    <span class=\"k\">return</span> <span class=\"n\">response</span>\n\n\n<span class=\"c1\"># middleware_name will wrap Lambda handler </span>\n<span class=\"c1\"># and simply return the handler as we're not pre/post-processing anything</span>\n<span class=\"c1\"># then middleware_before_after will wrap middleware_name</span>\n<span class=\"c1\"># run some code before/after calling the handler returned by middleware_name</span>\n<span class=\"c1\"># This way, lambda_handler is only actually called once (top-down)</span>\n<span class=\"nd\">@middleware_before_after</span> <span class=\"c1\"># This will run last</span>\n<span class=\"nd\">@middleware_name</span> <span class=\"c1\"># This will run first</span>\n<span class=\"k\">def</span> <span class=\"nf\">lambda_handler</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"kc\">True</span>\n</pre>\n<p><strong>Middleware with params</strong></p>\n<pre><span class=\"nd\">@lambda_handler_decorator</span>\n<span class=\"k\">def</span> <span class=\"nf\">obfuscate_sensitive_data</span><span class=\"p\">(</span><span class=\"n\">handler</span><span class=\"p\">,</span> <span class=\"n\">event</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">,</span> <span class=\"n\">fields</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"c1\"># Obfuscate email before calling Lambda handler</span>\n    <span class=\"k\">if</span> <span class=\"n\">fields</span><span class=\"p\">:</span>\n        <span class=\"k\">for</span> <span class=\"n\">field</span> <span class=\"ow\">in</span> <span class=\"n\">fields</span><span class=\"p\">:</span>\n            <span class=\"n\">field</span> <span class=\"o\">=</span> <span class=\"n\">event</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">field</span><span class=\"p\">,</span> <span class=\"s2\">\"\"</span><span class=\"p\">)</span>\n            <span class=\"n\">event</span><span class=\"p\">[</span><span class=\"n\">field</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">obfuscate_pii</span><span class=\"p\">(</span><span class=\"n\">field</span><span class=\"p\">)</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">handler</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@obfuscate_sensitive_data</span><span class=\"p\">(</span><span class=\"n\">fields</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"email\"</span><span class=\"p\">])</span>\n<span class=\"k\">def</span> <span class=\"nf\">lambda_handler</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"kc\">True</span>\n</pre>\n<p><strong>Optionally trace middleware execution</strong></p>\n<p>This makes use of an existing Tracer instance that you may have initialized anywhere in your code, otherwise it'll initialize one using default options and provider (X-Ray).</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">aws_lambda_powertools.middleware_factory</span> <span class=\"kn\">import</span> <span class=\"n\">lambda_handler_decorator</span>\n\n<span class=\"nd\">@lambda_handler_decorator</span><span class=\"p\">(</span><span class=\"n\">trace_execution</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">middleware_name</span><span class=\"p\">(</span><span class=\"n\">handler</span><span class=\"p\">,</span> <span class=\"n\">event</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">handler</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@middleware_name</span>\n<span class=\"k\">def</span> <span class=\"nf\">lambda_handler</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"kc\">True</span>\n</pre>\n<p>Optionally, you can enrich the final trace with additional annotations and metadata by retrieving a copy of the Tracer used.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">aws_lambda_powertools.middleware_factory</span> <span class=\"kn\">import</span> <span class=\"n\">lambda_handler_decorator</span>\n<span class=\"kn\">from</span> <span class=\"nn\">aws_lambda_powertools.tracing</span> <span class=\"kn\">import</span> <span class=\"n\">Tracer</span>\n\n<span class=\"nd\">@lambda_handler_decorator</span><span class=\"p\">(</span><span class=\"n\">trace_execution</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">middleware_name</span><span class=\"p\">(</span><span class=\"n\">handler</span><span class=\"p\">,</span> <span class=\"n\">event</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">):</span>\n    <span class=\"n\">tracer</span> <span class=\"o\">=</span> <span class=\"n\">Tracer</span><span class=\"p\">()</span> <span class=\"c1\"># Takes a copy of an existing tracer instance</span>\n    <span class=\"n\">tracer</span><span class=\"o\">.</span><span class=\"n\">add_anotation</span><span class=\"o\">...</span>\n    <span class=\"n\">tracer</span><span class=\"o\">.</span><span class=\"n\">metadata</span><span class=\"o\">...</span>\n    <span class=\"k\">return</span> <span class=\"n\">handler</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@middleware_name</span>\n<span class=\"k\">def</span> <span class=\"nf\">lambda_handler</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"kc\">True</span>\n</pre>\n<h3>Debug mode</h3>\n<p>By default, all debug log statements from AWS Lambda Powertools package are suppressed. If you'd like to enable them, use <code>set_package_logger</code> utility:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">aws_lambda_powertools</span>\n<span class=\"n\">aws_lambda_powertools</span><span class=\"o\">.</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">set_package_logger</span><span class=\"p\">()</span>\n<span class=\"o\">...</span>\n</pre>\n<h2>Beta</h2>\n<p>This library may change its API/methods or environment variables as it receives feedback from customers</p>\n<p><strong><a href=\"https://github.com/awslabs/aws-lambda-powertools/projects/1\" rel=\"nofollow\">Progress towards GA</a></strong></p>\n\n          </div>"}, "last_serial": 7144992, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "78e05d2291d5b5382cee6415ddd72b00", "sha256": "d42c4d1474f72c98e707d0efb7fed09783fc5ffd203e8d670a8946d917daaf6e"}, "downloads": -1, "filename": "aws_lambda_powertools-0.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "78e05d2291d5b5382cee6415ddd72b00", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6", "size": 14349, "upload_time": "2019-11-16T17:09:02", "upload_time_iso_8601": "2019-11-16T17:09:02.299417Z", "url": "https://files.pythonhosted.org/packages/0b/e5/a01435def69735525ffb3ac876a2a95b16567ca590ce7c8751e1f82782e7/aws_lambda_powertools-0.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e78856d379a792c04277eb4a381adcb7", "sha256": "9a131a798653459f7a0f99454338d1e68924e5e400360f0e33c5f6ca6c16501b"}, "downloads": -1, "filename": "aws_lambda_powertools-0.1.0.tar.gz", "has_sig": false, "md5_digest": "e78856d379a792c04277eb4a381adcb7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 13809, "upload_time": "2019-11-16T17:09:04", "upload_time_iso_8601": "2019-11-16T17:09:04.814478Z", "url": "https://files.pythonhosted.org/packages/cf/41/9e48d652030066af3b36074b3ca321f9305b694db22fee30b5c70019fa1e/aws_lambda_powertools-0.1.0.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "55944299f9c5a44a08f1899c4d063ae8", "sha256": "79902be859182fab40a521d02bab6481cfdc6711052a13772b1fed15deaa98fa"}, "downloads": -1, "filename": "aws_lambda_powertools-0.3.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "55944299f9c5a44a08f1899c4d063ae8", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6", "size": 14944, "upload_time": "2019-11-16T18:27:30", "upload_time_iso_8601": "2019-11-16T18:27:30.060145Z", "url": "https://files.pythonhosted.org/packages/eb/09/17061d4cb73df1f65e1b7a4837557c9337200df8e15e1033ceb5c5c1a3cf/aws_lambda_powertools-0.3.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "db6a9d65e9966a93e2b4d4e33c7c2abb", "sha256": "cf3860c0c02a04280d09f60b9f83a7d643a64deb73f3b653b998725b4bce4c24"}, "downloads": -1, "filename": "aws_lambda_powertools-0.3.0.tar.gz", "has_sig": false, "md5_digest": "db6a9d65e9966a93e2b4d4e33c7c2abb", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 14937, "upload_time": "2019-11-16T18:27:31", "upload_time_iso_8601": "2019-11-16T18:27:31.744644Z", "url": "https://files.pythonhosted.org/packages/84/28/bd034587c0427efe1bf6509dda87127fef0f1a5e2f7c5b5e95be376737d9/aws_lambda_powertools-0.3.0.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "42b5e10d4e9c37f8aafac8e9090dd0f8", "sha256": "4bfaa0bb6cecf915cbeeafd8d4d30f02f4e239f72291d14f7252bdac192f25db"}, "downloads": -1, "filename": "aws_lambda_powertools-0.3.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "42b5e10d4e9c37f8aafac8e9090dd0f8", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6", "size": 15078, "upload_time": "2020-01-09T11:25:39", "upload_time_iso_8601": "2020-01-09T11:25:39.207609Z", "url": "https://files.pythonhosted.org/packages/b2/6e/098bb2d2c4fab3ffff790e9af9dc3352574eb676e37faa5ced2b8dcf21fa/aws_lambda_powertools-0.3.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "40df3ce35deaa217d33bee1f5362fc40", "sha256": "614d74320f511965af55400335f7b7368b7d87b8fae86032551234caa755620c"}, "downloads": -1, "filename": "aws_lambda_powertools-0.3.1.tar.gz", "has_sig": false, "md5_digest": "40df3ce35deaa217d33bee1f5362fc40", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 15411, "upload_time": "2020-01-09T11:25:41", "upload_time_iso_8601": "2020-01-09T11:25:41.045210Z", "url": "https://files.pythonhosted.org/packages/23/83/8ac2e59ca1272152deb811fa24d1bd4f17c4d7b79b7641d56c511be8738b/aws_lambda_powertools-0.3.1.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "43e2cf85bcb0a72863d30cd1ea1d7c3c", "sha256": "c05c64f25246b742854a7ab62fcd78a7c437a1ca706965f90ee34992cdec0233"}, "downloads": -1, "filename": "aws_lambda_powertools-0.4.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "43e2cf85bcb0a72863d30cd1ea1d7c3c", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6", "size": 15282, "upload_time": "2020-02-20T14:53:05", "upload_time_iso_8601": "2020-02-20T14:53:05.392160Z", "url": "https://files.pythonhosted.org/packages/e2/9f/affa31a4b9e0b90a9a5f13b5c8d39a43875bbe088043a46c10371c395756/aws_lambda_powertools-0.4.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "953bbbccaa1b4709564a78b0a84ddd4e", "sha256": "04324fc7f6fc6791401df299a237b65148d96d6a6f3de3949f881f89573f278b"}, "downloads": -1, "filename": "aws_lambda_powertools-0.4.0.tar.gz", "has_sig": false, "md5_digest": "953bbbccaa1b4709564a78b0a84ddd4e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 15809, "upload_time": "2020-02-20T14:53:07", "upload_time_iso_8601": "2020-02-20T14:53:07.419724Z", "url": "https://files.pythonhosted.org/packages/e6/8c/69bacc6d92e1cb5bf7a33fef511420720e9b91a28c060e32a232f66895c7/aws_lambda_powertools-0.4.0.tar.gz", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "f80393ca0b3b394288f341dfb73aa874", "sha256": "8aba790dde797166fcba1efd7877a0a06f1583912f9079d6ff14d2f31e5b3900"}, "downloads": -1, "filename": "aws_lambda_powertools-0.5.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "f80393ca0b3b394288f341dfb73aa874", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6", "size": 15546, "upload_time": "2020-02-20T14:58:17", "upload_time_iso_8601": "2020-02-20T14:58:17.341415Z", "url": "https://files.pythonhosted.org/packages/39/a4/c4b40a8b3ac1095c6251c4076df609f6454af3e11f3a61c1894c03bf489d/aws_lambda_powertools-0.5.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "81f35b85049f21f12459184c9232c0e7", "sha256": "d1c5d616295415fb633776c4bcbc5bab9af285cc4449c0c88e26d7bdc569b1cd"}, "downloads": -1, "filename": "aws_lambda_powertools-0.5.0.tar.gz", "has_sig": false, "md5_digest": "81f35b85049f21f12459184c9232c0e7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 16071, "upload_time": "2020-02-20T14:58:18", "upload_time_iso_8601": "2020-02-20T14:58:18.982561Z", "url": "https://files.pythonhosted.org/packages/bd/a2/07ff1375e9176270594a55ed9e9b7c51bc5073f5f633b1d3337d2e40bf54/aws_lambda_powertools-0.5.0.tar.gz", "yanked": false}], "0.6.0": [{"comment_text": "", "digests": {"md5": "698a512dbbc64d71ecb06bd38c18037c", "sha256": "9e14f102642274669cffd67cb76230f83660a5a15aab0a1c0eeae7d591980d09"}, "downloads": -1, "filename": "aws_lambda_powertools-0.6.0-py3-none-any.whl", "has_sig": false, "md5_digest": "698a512dbbc64d71ecb06bd38c18037c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 22500, "upload_time": "2020-04-07T19:44:37", "upload_time_iso_8601": "2020-04-07T19:44:37.615869Z", "url": "https://files.pythonhosted.org/packages/4f/c3/aeda6df2f5c5fd9596aa0316f74f358dc4f13aa1bb043b602026d009a07e/aws_lambda_powertools-0.6.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "894b490e39e9694f1285014ab113a749", "sha256": "2b0658dd67527c323d5e980cc29b56c2946e7bd67eb0294010f3126c0c45799a"}, "downloads": -1, "filename": "aws_lambda_powertools-0.6.0.tar.gz", "has_sig": false, "md5_digest": "894b490e39e9694f1285014ab113a749", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 20797, "upload_time": "2020-04-07T19:44:39", "upload_time_iso_8601": "2020-04-07T19:44:39.254371Z", "url": "https://files.pythonhosted.org/packages/3a/36/92026b6a673bde7a0e64b22ab991e9a9bbc30892bb3d1795dc375ad21c7a/aws_lambda_powertools-0.6.0.tar.gz", "yanked": false}], "0.6.1": [{"comment_text": "", "digests": {"md5": "e8181508bcddf3ed896372fa722c4298", "sha256": "dc6fdc93502062bac7f90562cb6c6b6a499ecfb56a757f1aced5eb1a3e82704e"}, "downloads": -1, "filename": "aws_lambda_powertools-0.6.1-py3-none-any.whl", "has_sig": false, "md5_digest": "e8181508bcddf3ed896372fa722c4298", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 22501, "upload_time": "2020-04-08T10:40:13", "upload_time_iso_8601": "2020-04-08T10:40:13.378633Z", "url": "https://files.pythonhosted.org/packages/43/96/a6bafe9a18006fcf7f565680d92ed37abb6079a3664b32fd99aaab98714f/aws_lambda_powertools-0.6.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "dcad38373ba19af5f3a44f429183d8f1", "sha256": "f332baeb3e931e91dae8588442235fc32abde2838424847d70163f4a5faab1dd"}, "downloads": -1, "filename": "aws_lambda_powertools-0.6.1.tar.gz", "has_sig": false, "md5_digest": "dcad38373ba19af5f3a44f429183d8f1", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 20809, "upload_time": "2020-04-08T10:40:14", "upload_time_iso_8601": "2020-04-08T10:40:14.748956Z", "url": "https://files.pythonhosted.org/packages/93/76/5461ca65dbc5e984484cc5bf64faf47bf616c4451610e09d70d99cb7999d/aws_lambda_powertools-0.6.1.tar.gz", "yanked": false}], "0.6.2": [{"comment_text": "", "digests": {"md5": "80f99f00a5cd14586501f8da6cccb616", "sha256": "01123f5a1f73902852f73b4303456de54afae71469f0284a9804eff9572379c1"}, "downloads": -1, "filename": "aws_lambda_powertools-0.6.2-py3-none-any.whl", "has_sig": false, "md5_digest": "80f99f00a5cd14586501f8da6cccb616", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 22399, "upload_time": "2020-04-09T15:19:16", "upload_time_iso_8601": "2020-04-09T15:19:16.762663Z", "url": "https://files.pythonhosted.org/packages/53/04/09de9ecedb939a93580ae734ff4b23d69000d43241f94801e4b4bdc4c8f6/aws_lambda_powertools-0.6.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "50259bb3d49ef0b2896090a40d0e7445", "sha256": "376e7df62505fccc37537d87674ce6af6524569dca21309d0afac4ffa3a0bcc5"}, "downloads": -1, "filename": "aws_lambda_powertools-0.6.2.tar.gz", "has_sig": false, "md5_digest": "50259bb3d49ef0b2896090a40d0e7445", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 20806, "upload_time": "2020-04-09T15:19:18", "upload_time_iso_8601": "2020-04-09T15:19:18.091546Z", "url": "https://files.pythonhosted.org/packages/f3/7d/1582883446d7ade6a6654548961f470f545281e763147f97e55d8b90981e/aws_lambda_powertools-0.6.2.tar.gz", "yanked": false}], "0.6.3": [{"comment_text": "", "digests": {"md5": "6ffcebd913ae72f2f6833f40a6b0abbd", "sha256": "7c43c1026e6855361498f8384596b2ca68ef05de3fe5905e974f44909075b2be"}, "downloads": -1, "filename": "aws_lambda_powertools-0.6.3-py3-none-any.whl", "has_sig": false, "md5_digest": "6ffcebd913ae72f2f6833f40a6b0abbd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 22415, "upload_time": "2020-04-09T15:33:30", "upload_time_iso_8601": "2020-04-09T15:33:30.167835Z", "url": "https://files.pythonhosted.org/packages/c3/83/84a3b58c95ace963bf3cb291c4cf791a8993343216bfb7739255dff4d5c3/aws_lambda_powertools-0.6.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6f9eb8d89f4e3364feb452e7bd377f98", "sha256": "34ac7b815eb29f15611cf3fff315182208825aa06c83da3709c9bf8e3f067627"}, "downloads": -1, "filename": "aws_lambda_powertools-0.6.3.tar.gz", "has_sig": false, "md5_digest": "6f9eb8d89f4e3364feb452e7bd377f98", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 20815, "upload_time": "2020-04-09T15:33:31", "upload_time_iso_8601": "2020-04-09T15:33:31.715078Z", "url": "https://files.pythonhosted.org/packages/62/f3/05c572d737de37715d567d924162409eac02f6fd970b309d9e8b9ded3f30/aws_lambda_powertools-0.6.3.tar.gz", "yanked": false}], "0.7.0": [{"comment_text": "", "digests": {"md5": "9baaab80a05a33f3d5a879646942420d", "sha256": "02bb712088a144968af118ad5c71f13e46c76a623491d1d21d0c106636675ee4"}, "downloads": -1, "filename": "aws_lambda_powertools-0.7.0-py3-none-any.whl", "has_sig": false, "md5_digest": "9baaab80a05a33f3d5a879646942420d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 25905, "upload_time": "2020-04-20T15:33:42", "upload_time_iso_8601": "2020-04-20T15:33:42.805601Z", "url": "https://files.pythonhosted.org/packages/b1/10/3b230926d4cd0ee3a38694fc7014873b0315900eedf51e124ab2a8badce4/aws_lambda_powertools-0.7.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "97e3e3f4cf775437f214ab50f184760d", "sha256": "fd4833abbb4d5bcebfa347eb54f6ffd21c9a7d3b4c7f7ca9a71f65c962c60a5c"}, "downloads": -1, "filename": "aws_lambda_powertools-0.7.0.tar.gz", "has_sig": false, "md5_digest": "97e3e3f4cf775437f214ab50f184760d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 24627, "upload_time": "2020-04-20T15:33:44", "upload_time_iso_8601": "2020-04-20T15:33:44.177612Z", "url": "https://files.pythonhosted.org/packages/1c/14/5088fa46d7ba79211ff2ccb6fa10b2002a9ee0c01c903d1f1cf912623001/aws_lambda_powertools-0.7.0.tar.gz", "yanked": false}], "0.8.0": [{"comment_text": "", "digests": {"md5": "9110f1e3d2db7d18fd20ab98c6c00db0", "sha256": "3266b750cfffffaa919e89af622fc7ae1ddbacebf1989c3eb0c6170d5693c3f4"}, "downloads": -1, "filename": "aws_lambda_powertools-0.8.0-py3-none-any.whl", "has_sig": false, "md5_digest": "9110f1e3d2db7d18fd20ab98c6c00db0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 27097, "upload_time": "2020-04-24T16:09:36", "upload_time_iso_8601": "2020-04-24T16:09:36.273892Z", "url": "https://files.pythonhosted.org/packages/6b/62/3dc0750930312ebbeae059c230433e5d077e652e5504eefdb0db51d3df4f/aws_lambda_powertools-0.8.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1d161f6dddc1c57cc379d7307d71ee52", "sha256": "9fef52568496233acac3817a6fc83c5789a22642e7cbb88020b4db704dbfbe65"}, "downloads": -1, "filename": "aws_lambda_powertools-0.8.0.tar.gz", "has_sig": false, "md5_digest": "1d161f6dddc1c57cc379d7307d71ee52", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 26052, "upload_time": "2020-04-24T16:09:37", "upload_time_iso_8601": "2020-04-24T16:09:37.486071Z", "url": "https://files.pythonhosted.org/packages/9e/c5/0a3aeebbb55e71b5b7ecf047c33c9969f7895e5827e94f4c0b8fa716fe24/aws_lambda_powertools-0.8.0.tar.gz", "yanked": false}], "0.8.1": [{"comment_text": "", "digests": {"md5": "04f7c881cb6a32388234925a274a34f3", "sha256": "7f79594dedc60b852ba4e9c168d948b170ef06ec64a72793119f949ccb63f2fc"}, "downloads": -1, "filename": "aws_lambda_powertools-0.8.1-py3-none-any.whl", "has_sig": false, "md5_digest": "04f7c881cb6a32388234925a274a34f3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 27317, "upload_time": "2020-05-01T13:37:27", "upload_time_iso_8601": "2020-05-01T13:37:27.525094Z", "url": "https://files.pythonhosted.org/packages/e6/e4/46abfbc06f708975058eac7c8808eb30c054f6ece28f3f0f540e4a5736fe/aws_lambda_powertools-0.8.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "12f6476cfb50f9ee646fd1ddf5b3af19", "sha256": "53ad50b81d96272fb252b189ecea7fe433634d5697866536b4f0537ede660100"}, "downloads": -1, "filename": "aws_lambda_powertools-0.8.1.tar.gz", "has_sig": false, "md5_digest": "12f6476cfb50f9ee646fd1ddf5b3af19", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 26219, "upload_time": "2020-05-01T13:37:28", "upload_time_iso_8601": "2020-05-01T13:37:28.612765Z", "url": "https://files.pythonhosted.org/packages/c3/d6/e5b2c52b29a225ebca991cd95e7ba755989f8f69a3e5c568f1707f27b1b2/aws_lambda_powertools-0.8.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "04f7c881cb6a32388234925a274a34f3", "sha256": "7f79594dedc60b852ba4e9c168d948b170ef06ec64a72793119f949ccb63f2fc"}, "downloads": -1, "filename": "aws_lambda_powertools-0.8.1-py3-none-any.whl", "has_sig": false, "md5_digest": "04f7c881cb6a32388234925a274a34f3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 27317, "upload_time": "2020-05-01T13:37:27", "upload_time_iso_8601": "2020-05-01T13:37:27.525094Z", "url": "https://files.pythonhosted.org/packages/e6/e4/46abfbc06f708975058eac7c8808eb30c054f6ece28f3f0f540e4a5736fe/aws_lambda_powertools-0.8.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "12f6476cfb50f9ee646fd1ddf5b3af19", "sha256": "53ad50b81d96272fb252b189ecea7fe433634d5697866536b4f0537ede660100"}, "downloads": -1, "filename": "aws_lambda_powertools-0.8.1.tar.gz", "has_sig": false, "md5_digest": "12f6476cfb50f9ee646fd1ddf5b3af19", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 26219, "upload_time": "2020-05-01T13:37:28", "upload_time_iso_8601": "2020-05-01T13:37:28.612765Z", "url": "https://files.pythonhosted.org/packages/c3/d6/e5b2c52b29a225ebca991cd95e7ba755989f8f69a3e5c568f1707f27b1b2/aws_lambda_powertools-0.8.1.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:15:38 2020"}