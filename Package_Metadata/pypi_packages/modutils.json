{"info": {"author": "Tanner Burns", "author_email": "tjburns102@gmail.com", "bugtrack_url": null, "classifiers": ["Operating System :: OS Independent", "Programming Language :: Python :: 3.7"], "description": "# Modutils\n\n    A library with modern utilities to assist development efficiency \n    \n# Documentation\n\n- [ modutils.hashutils ](#modutils.hashutils_9099713)\n\t- [ calc_sha256_from_dir ](#calc_sha256_from_dir_1893375329)\n\t- [ calc_sha256_from_dir_map ](#calc_sha256_from_dir_map_1000019374)\n\t- [ sha256_from_dir ](#sha256_from_dir_1523514038)\n\t- [ sha256_from_dir_map ](#sha256_from_dir_map_1310874601)\n\t- [ sha256_from_file ](#sha256_from_file_136289233)\n- [ modutils.importutils ](#modutils.importutils_1652321527)\n\t- [ globpath ](#globpath_346197787)\n\t- [ import_from ](#import_from_679080163)\n- [ modutils.packageutils ](#modutils.packageutils_2091287763)\n\t- [ has_package ](#has_package_1270361615)\n\t- [ install_package ](#install_package_1298376952)\n\t- [ list_packages ](#list_packages_1777836065)\n\t- [ update_package ](#update_package_1100192072)\n- [ modutils.stdutils ](#modutils.stdutils_1737493875)\n\t- [ modutils.stdutils.echo ](#modutils.stdutils.echo_362805693)\n\t\t- [ echo.__call__ ](#echo.__call___318159007)\n\t\t- [ echo.__init__ ](#echo.__init___1476576396)\n\t\t- [ echo._resolve ](#echo._resolve_1902868456)\n\t\t- [ echo._resolve_class_object ](#echo._resolve_class_object_1121738252)\n\t\t- [ echo._resolve_response_object ](#echo._resolve_response_object_1840220819)\n- [ modutils.typeutils ](#modutils.typeutils_135504944)\n\t- [ nget ](#nget_42222092)\n\t- [ modutils.typeutils.sha256 ](#modutils.typeutils.sha256_1273030348)\n\n\n<a name=\"modutils.hashutils_9099713\"></a>\n## modutils.hashutils\n\n<a name=\"calc_sha256_from_dir_1893375329\"></a>\n#### `calc_sha256_from_dir(directory: str) -> list`\n\ncalculate sha256 values from files found in a directory\n\n    directory {str} -- path to directory to search\n\n    return {list} -- list of sha256 values found\n    \n\n<a name=\"calc_sha256_from_dir_map_1000019374\"></a>\n#### `calc_sha256_from_dir_map(directory: str) -> dict`\n\ncalculate sha256 values from files found in a directory and map them to their filepath\n\n    directory {str} -- path to directory to search\n\n    return {dict} -- dictionary with filepath as key and sha256 as value\n    \n\n<a name=\"sha256_from_dir_1523514038\"></a>\n#### `sha256_from_dir(directory: str) -> list`\n\nextract all sha256 values from all files inside of a directory using regex\n\n    directory {str} -- path to directory to search\n\n    return {list} -- list of sha256 values found\n    \n\n<a name=\"sha256_from_dir_map_1310874601\"></a>\n#### `sha256_from_dir_map(directory: str) -> dict`\n\nextract all sha256 values from all files inside of a directory using regex and map them to their filepath\n\n    directory {str} -- path to directory to search\n\n    return {dict} -- dictionary of filepath as key and found sha256 list as value\n    \n\n<a name=\"sha256_from_file_136289233\"></a>\n#### `sha256_from_file(filepath: str) -> list`\n\nextract all sha256 values from a file using regex\n\n    filepath {str} -- path to file to search\n\n    return {list} -- list of sha256 values found\n    \n\n<a name=\"modutils.importutils_1652321527\"></a>\n## modutils.importutils\n\n<a name=\"globpath_346197787\"></a>\n#### `globpath(filepath: str) -> str`\n\nconvert a filepath to a glob path, ['/'|''] to '.'\n\n    filepath {str} -- filepath to glob\n\n    return {str} -- new globpath\n    \n\n<a name=\"import_from_679080163\"></a>\n#### `import_from(globpath: str, name: str) -> Union[object, NoneType]`\n\nImport module and return instance of given function name\n\n    globpath {str} -- the filepath in glob format\n    name {str} -- the method name to import\n\n    return {Union[object, None]} -- method attribute of import\n    \n\n<a name=\"modutils.packageutils_2091287763\"></a>\n## modutils.packageutils\n\n<a name=\"has_package_1270361615\"></a>\n#### `has_package(name: str, version: Union[str, int, float] = None) -> bool`\n\ncheck if current environment has a package\n\n    name {str} -- name of package to check\n    version {Union[str, int, float]} -- OPTIONAL, will append version for a specific version check of package\n\n    return {bool} -- True if package was found and False if not\n    \n\n<a name=\"install_package_1298376952\"></a>\n#### `install_package(name: str, force: bool = False, extra_index: str = None, trusted_host: str = None) -> Tuple[str, str]`\n\ninstall a pip3 package using a subprocess in current environment\n    \n    name {str} -- name of package to install\n    force {bool} -- force newest edition\n    extra_index {str} -- extra url to index in package manager\n    trusted_host {str} -- extra url where package is hosted\n\n    return {tuple} -- return the output, and error of subprocess run\n    \n\n<a name=\"list_packages_1777836065\"></a>\n#### `list_packages() -> list`\n\nlist current pip3 packages in environment\n\n    return {list} -- a list of available packages\n    \n\n<a name=\"update_package_1100192072\"></a>\n#### `update_package(name: str, extra_index: str = None, trusted_host: str = None) -> Tuple[str, str]`\n\nupdate a pip3 package by name, leverages install_package with force = True\n\n    name {str} -- name of package to install\n    extra_index {str} -- extra url to index in package manager\n    trusted_host {str} -- extra url where package is hosted\n\n    return {tuple} -- return the output, and error of subprocess run\n    \n\n<a name=\"modutils.stdutils_1737493875\"></a>\n## modutils.stdutils\n\n<a name=\"fg_1840553876\"></a>\n#### `fg(color)`\n\nalias for colored().foreground()\n\n<a name=\"main_890288721\"></a>\n#### `main(md=None, filename=None, cols=None, theme=None, c_theme=None, bg=None, c_no_guess=None, display_links=None, link_style=None, from_txt=None, do_html=None, code_hilite=None, c_def_lexer=None, theme_info=None, no_colors=None, tab_length=4, no_change_defenc=False, header_nrs=False, **kw)`\n\n md is markdown string. alternatively we use filename and read \n\n<a name=\"modutils.stdutils.echo_362805693\"></a>\n### modutils.stdutils.echo(self, message: Any, expand: bool = False, list_delimiter: str = '\\n', indent: int = 4, color: str = None, newline: bool = True, markdown: bool = False)\n\n\n    echo - a modern print statement that resolves objects to printable types\n    \n\n<a name=\"echo.__call___318159007\"></a>\n#### `echo.__call__(self, message: Any = None)`\n\n__call__ can be used to overwrite the current message if you want to reuse an echo object\n\n            x = echo('123')\n            x()\n            x('345')\n\n\n        message {Any} -- object to print\n\n        \n\n<a name=\"echo.__init___1476576396\"></a>\n#### `echo.__init__(self, message: Any, expand: bool = False, list_delimiter: str = '\\n', indent: int = 4, color: str = None, newline: bool = True, markdown: bool = False)`\n\nNone\n\n<a name=\"echo._resolve_1902868456\"></a>\n#### `echo._resolve(self, message: Any) -> None`\n\nresolve and print a message based on Any given type\n\n        message {Any} -- an object to print\n\n        return {None} -- does not return anything, this function will write to stdout\n        \n\n<a name=\"echo._resolve_class_object_1121738252\"></a>\n#### `echo._resolve_class_object(self, cls: object)`\n\nresolve a class object to an always printable form based on the type of attributes.\n        recursively resolves attributes\n\n        cls {object} -- class object to print\n\n        return {None} - does not return anything due to needing to call resolve\n        \n\n<a name=\"echo._resolve_response_object_1840220819\"></a>\n#### `echo._resolve_response_object(self, response: requests.models.Response) -> str`\n\nresolve requests.Response objects to an always printable form based on their status_code from response\n\n        response {requests.Response} -- response object to resolve\n\n        return {str} -- a printable form of the response\n        \n\n<a name=\"modutils.typeutils_135504944\"></a>\n## modutils.typeutils\n\n<a name=\"nget_42222092\"></a>\n#### `nget(d: dict, *args: Union[str, list]) -> Any`\n\nnget - nested get call to easily retrieve nested information with a single call and set a default\n    Ex.\n        nget(dict, ['key1', 'key2', ..], default)\n        nget(dict, key1, key2, .., default)\n\n        nget use an iterable of keys to retrieve nested information and can set a default if a key is not found\n    \n\n<a name=\"modutils.typeutils.sha256_1273030348\"></a>\n### modutils.typeutils.sha256(self, value)\n\nAn implementation of a sha256 type based off the str type", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://www.github.com/tannerburns/modutils", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "modutils", "package_url": "https://pypi.org/project/modutils/", "platform": "", "project_url": "https://pypi.org/project/modutils/", "project_urls": {"Homepage": "https://www.github.com/tannerburns/modutils"}, "release_url": "https://pypi.org/project/modutils/0.0.6/", "requires_dist": null, "requires_python": "", "summary": "A library with modern utilities to assist development efficiency", "version": "0.0.6", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Modutils</h1>\n<pre><code>A library with modern utilities to assist development efficiency \n</code></pre>\n<h1>Documentation</h1>\n<ul>\n<li><a href=\"#modutils.hashutils_9099713\" rel=\"nofollow\"> modutils.hashutils </a>\n<ul>\n<li><a href=\"#calc_sha256_from_dir_1893375329\" rel=\"nofollow\"> calc_sha256_from_dir </a></li>\n<li><a href=\"#calc_sha256_from_dir_map_1000019374\" rel=\"nofollow\"> calc_sha256_from_dir_map </a></li>\n<li><a href=\"#sha256_from_dir_1523514038\" rel=\"nofollow\"> sha256_from_dir </a></li>\n<li><a href=\"#sha256_from_dir_map_1310874601\" rel=\"nofollow\"> sha256_from_dir_map </a></li>\n<li><a href=\"#sha256_from_file_136289233\" rel=\"nofollow\"> sha256_from_file </a></li>\n</ul>\n</li>\n<li><a href=\"#modutils.importutils_1652321527\" rel=\"nofollow\"> modutils.importutils </a>\n<ul>\n<li><a href=\"#globpath_346197787\" rel=\"nofollow\"> globpath </a></li>\n<li><a href=\"#import_from_679080163\" rel=\"nofollow\"> import_from </a></li>\n</ul>\n</li>\n<li><a href=\"#modutils.packageutils_2091287763\" rel=\"nofollow\"> modutils.packageutils </a>\n<ul>\n<li><a href=\"#has_package_1270361615\" rel=\"nofollow\"> has_package </a></li>\n<li><a href=\"#install_package_1298376952\" rel=\"nofollow\"> install_package </a></li>\n<li><a href=\"#list_packages_1777836065\" rel=\"nofollow\"> list_packages </a></li>\n<li><a href=\"#update_package_1100192072\" rel=\"nofollow\"> update_package </a></li>\n</ul>\n</li>\n<li><a href=\"#modutils.stdutils_1737493875\" rel=\"nofollow\"> modutils.stdutils </a>\n<ul>\n<li><a href=\"#modutils.stdutils.echo_362805693\" rel=\"nofollow\"> modutils.stdutils.echo </a>\n<ul>\n<li><a href=\"#echo.__call___318159007\" rel=\"nofollow\"> echo.<strong>call</strong> </a></li>\n<li><a href=\"#echo.__init___1476576396\" rel=\"nofollow\"> echo.<strong>init</strong> </a></li>\n<li><a href=\"#echo._resolve_1902868456\" rel=\"nofollow\"> echo._resolve </a></li>\n<li><a href=\"#echo._resolve_class_object_1121738252\" rel=\"nofollow\"> echo._resolve_class_object </a></li>\n<li><a href=\"#echo._resolve_response_object_1840220819\" rel=\"nofollow\"> echo._resolve_response_object </a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#modutils.typeutils_135504944\" rel=\"nofollow\"> modutils.typeutils </a>\n<ul>\n<li><a href=\"#nget_42222092\" rel=\"nofollow\"> nget </a></li>\n<li><a href=\"#modutils.typeutils.sha256_1273030348\" rel=\"nofollow\"> modutils.typeutils.sha256 </a></li>\n</ul>\n</li>\n</ul>\n<p><a></a></p>\n<h2>modutils.hashutils</h2>\n<p><a></a></p>\n<h4><code>calc_sha256_from_dir(directory: str) -&gt; list</code></h4>\n<p>calculate sha256 values from files found in a directory</p>\n<pre><code>directory {str} -- path to directory to search\n\nreturn {list} -- list of sha256 values found\n</code></pre>\n<p><a></a></p>\n<h4><code>calc_sha256_from_dir_map(directory: str) -&gt; dict</code></h4>\n<p>calculate sha256 values from files found in a directory and map them to their filepath</p>\n<pre><code>directory {str} -- path to directory to search\n\nreturn {dict} -- dictionary with filepath as key and sha256 as value\n</code></pre>\n<p><a></a></p>\n<h4><code>sha256_from_dir(directory: str) -&gt; list</code></h4>\n<p>extract all sha256 values from all files inside of a directory using regex</p>\n<pre><code>directory {str} -- path to directory to search\n\nreturn {list} -- list of sha256 values found\n</code></pre>\n<p><a></a></p>\n<h4><code>sha256_from_dir_map(directory: str) -&gt; dict</code></h4>\n<p>extract all sha256 values from all files inside of a directory using regex and map them to their filepath</p>\n<pre><code>directory {str} -- path to directory to search\n\nreturn {dict} -- dictionary of filepath as key and found sha256 list as value\n</code></pre>\n<p><a></a></p>\n<h4><code>sha256_from_file(filepath: str) -&gt; list</code></h4>\n<p>extract all sha256 values from a file using regex</p>\n<pre><code>filepath {str} -- path to file to search\n\nreturn {list} -- list of sha256 values found\n</code></pre>\n<p><a></a></p>\n<h2>modutils.importutils</h2>\n<p><a></a></p>\n<h4><code>globpath(filepath: str) -&gt; str</code></h4>\n<p>convert a filepath to a glob path, ['/'|''] to '.'</p>\n<pre><code>filepath {str} -- filepath to glob\n\nreturn {str} -- new globpath\n</code></pre>\n<p><a></a></p>\n<h4><code>import_from(globpath: str, name: str) -&gt; Union[object, NoneType]</code></h4>\n<p>Import module and return instance of given function name</p>\n<pre><code>globpath {str} -- the filepath in glob format\nname {str} -- the method name to import\n\nreturn {Union[object, None]} -- method attribute of import\n</code></pre>\n<p><a></a></p>\n<h2>modutils.packageutils</h2>\n<p><a></a></p>\n<h4><code>has_package(name: str, version: Union[str, int, float] = None) -&gt; bool</code></h4>\n<p>check if current environment has a package</p>\n<pre><code>name {str} -- name of package to check\nversion {Union[str, int, float]} -- OPTIONAL, will append version for a specific version check of package\n\nreturn {bool} -- True if package was found and False if not\n</code></pre>\n<p><a></a></p>\n<h4><code>install_package(name: str, force: bool = False, extra_index: str = None, trusted_host: str = None) -&gt; Tuple[str, str]</code></h4>\n<p>install a pip3 package using a subprocess in current environment</p>\n<pre><code>name {str} -- name of package to install\nforce {bool} -- force newest edition\nextra_index {str} -- extra url to index in package manager\ntrusted_host {str} -- extra url where package is hosted\n\nreturn {tuple} -- return the output, and error of subprocess run\n</code></pre>\n<p><a></a></p>\n<h4><code>list_packages() -&gt; list</code></h4>\n<p>list current pip3 packages in environment</p>\n<pre><code>return {list} -- a list of available packages\n</code></pre>\n<p><a></a></p>\n<h4><code>update_package(name: str, extra_index: str = None, trusted_host: str = None) -&gt; Tuple[str, str]</code></h4>\n<p>update a pip3 package by name, leverages install_package with force = True</p>\n<pre><code>name {str} -- name of package to install\nextra_index {str} -- extra url to index in package manager\ntrusted_host {str} -- extra url where package is hosted\n\nreturn {tuple} -- return the output, and error of subprocess run\n</code></pre>\n<p><a></a></p>\n<h2>modutils.stdutils</h2>\n<p><a></a></p>\n<h4><code>fg(color)</code></h4>\n<p>alias for colored().foreground()</p>\n<p><a></a></p>\n<h4><code>main(md=None, filename=None, cols=None, theme=None, c_theme=None, bg=None, c_no_guess=None, display_links=None, link_style=None, from_txt=None, do_html=None, code_hilite=None, c_def_lexer=None, theme_info=None, no_colors=None, tab_length=4, no_change_defenc=False, header_nrs=False, **kw)</code></h4>\n<p>md is markdown string. alternatively we use filename and read</p>\n<p><a></a></p>\n<h3>modutils.stdutils.echo(self, message: Any, expand: bool = False, list_delimiter: str = '\\n', indent: int = 4, color: str = None, newline: bool = True, markdown: bool = False)</h3>\n<pre><code>echo - a modern print statement that resolves objects to printable types\n</code></pre>\n<p><a></a></p>\n<h4><code>echo.__call__(self, message: Any = None)</code></h4>\n<p><strong>call</strong> can be used to overwrite the current message if you want to reuse an echo object</p>\n<pre><code>        x = echo('123')\n        x()\n        x('345')\n\n\n    message {Any} -- object to print\n</code></pre>\n<p><a></a></p>\n<h4><code>echo.__init__(self, message: Any, expand: bool = False, list_delimiter: str = '\\n', indent: int = 4, color: str = None, newline: bool = True, markdown: bool = False)</code></h4>\n<p>None</p>\n<p><a></a></p>\n<h4><code>echo._resolve(self, message: Any) -&gt; None</code></h4>\n<p>resolve and print a message based on Any given type</p>\n<pre><code>    message {Any} -- an object to print\n\n    return {None} -- does not return anything, this function will write to stdout\n</code></pre>\n<p><a></a></p>\n<h4><code>echo._resolve_class_object(self, cls: object)</code></h4>\n<p>resolve a class object to an always printable form based on the type of attributes.\nrecursively resolves attributes</p>\n<pre><code>    cls {object} -- class object to print\n\n    return {None} - does not return anything due to needing to call resolve\n</code></pre>\n<p><a></a></p>\n<h4><code>echo._resolve_response_object(self, response: requests.models.Response) -&gt; str</code></h4>\n<p>resolve requests.Response objects to an always printable form based on their status_code from response</p>\n<pre><code>    response {requests.Response} -- response object to resolve\n\n    return {str} -- a printable form of the response\n</code></pre>\n<p><a></a></p>\n<h2>modutils.typeutils</h2>\n<p><a></a></p>\n<h4><code>nget(d: dict, *args: Union[str, list]) -&gt; Any</code></h4>\n<p>nget - nested get call to easily retrieve nested information with a single call and set a default\nEx.\nnget(dict, ['key1', 'key2', ..], default)\nnget(dict, key1, key2, .., default)</p>\n<pre><code>    nget use an iterable of keys to retrieve nested information and can set a default if a key is not found\n</code></pre>\n<p><a></a></p>\n<h3>modutils.typeutils.sha256(self, value)</h3>\n<p>An implementation of a sha256 type based off the str type</p>\n\n          </div>"}, "last_serial": 7167297, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "37d07edb72e4b5162f8fc37d7390240e", "sha256": "85ca6ae5656a9e112651711a38b45459b841bdbffca529d41e6c9b1934191770"}, "downloads": -1, "filename": "modutils-0.0.1.tar.gz", "has_sig": false, "md5_digest": "37d07edb72e4b5162f8fc37d7390240e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2741, "upload_time": "2020-04-28T23:43:14", "upload_time_iso_8601": "2020-04-28T23:43:14.916924Z", "url": "https://files.pythonhosted.org/packages/01/4d/354c67073b0e0a1482b1c0debc8fae22a12f859134dbcb1bd861d3fa216a/modutils-0.0.1.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "acb80ecdbe5bee5894e358b1b546aba7", "sha256": "bb53046cf7110cec03b234102395750c361cad541e7a78861130d68ae59150b8"}, "downloads": -1, "filename": "modutils-0.0.3.tar.gz", "has_sig": false, "md5_digest": "acb80ecdbe5bee5894e358b1b546aba7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3129, "upload_time": "2020-04-29T03:35:03", "upload_time_iso_8601": "2020-04-29T03:35:03.143905Z", "url": "https://files.pythonhosted.org/packages/f1/56/b5abbc5bb6ce864c1d2d005e0a45ff1b8e451f6b3d6162de11a1ebc3f6c0/modutils-0.0.3.tar.gz", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "0b28af2ec0aeb9346d46f0d4112f2013", "sha256": "63bad65851ac035e8d36509a21424f730168b27dd2a7c4c8b9e074717b90e194"}, "downloads": -1, "filename": "modutils-0.0.5.tar.gz", "has_sig": false, "md5_digest": "0b28af2ec0aeb9346d46f0d4112f2013", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7333, "upload_time": "2020-04-30T20:32:56", "upload_time_iso_8601": "2020-04-30T20:32:56.323958Z", "url": "https://files.pythonhosted.org/packages/b6/49/b390035345ae5825a435b41b65207186641513d15fe5bb73945fc9ccfc58/modutils-0.0.5.tar.gz", "yanked": false}], "0.0.6": [{"comment_text": "", "digests": {"md5": "9c61f81c66faf6540ff734546ce981d1", "sha256": "9a66f2b67b3a611f98ebefcc34562fb6983e4532dbfed0b925c12df2f6f6dbf8"}, "downloads": -1, "filename": "modutils-0.0.6.tar.gz", "has_sig": false, "md5_digest": "9c61f81c66faf6540ff734546ce981d1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7348, "upload_time": "2020-05-04T20:10:04", "upload_time_iso_8601": "2020-05-04T20:10:04.973681Z", "url": "https://files.pythonhosted.org/packages/a6/01/7073db8fa074501a4b7d25eaa165fbadd977aa1ec7518d3c0f353ac0cb78/modutils-0.0.6.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "9c61f81c66faf6540ff734546ce981d1", "sha256": "9a66f2b67b3a611f98ebefcc34562fb6983e4532dbfed0b925c12df2f6f6dbf8"}, "downloads": -1, "filename": "modutils-0.0.6.tar.gz", "has_sig": false, "md5_digest": "9c61f81c66faf6540ff734546ce981d1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7348, "upload_time": "2020-05-04T20:10:04", "upload_time_iso_8601": "2020-05-04T20:10:04.973681Z", "url": "https://files.pythonhosted.org/packages/a6/01/7073db8fa074501a4b7d25eaa165fbadd977aa1ec7518d3c0f353ac0cb78/modutils-0.0.6.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:52:42 2020"}