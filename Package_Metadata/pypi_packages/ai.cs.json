{"info": {"author": "Alexey Isavnin", "author_email": "alexey.isavnin@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Console", "Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3"], "description": "Welcome to AI.CS\n================\n\nAI.CS is the coordinates transformation package in Python. It offers functionality for converting data between geometrical coordinates (cartesian, spherical and cylindrical) as well as between geocentric and heliocentric coordinate systems typically used in spacecraft measurements. The package currently also supports rotations of data by means of `rotation matrices <https://en.wikipedia.org/wiki/Rotation_matrix>`_. Transformations between spacecraft coordinate systems are implemented as a Python binding to the `CXFORM <https://spdf.sci.gsfc.nasa.gov/pub/software/old/selected_software_from_nssdc/coordinate_transform/>`_ library.\n\nThe full documentation is available at `aics.rtfd.io <http://aics.rtfd.io>`_.\n\nGetting started\n===============\n\nThis tutorial will guide you through basic usage of AI.CS.\n\nInstallation\n------------\n\nAI.CS is developed for Python 3, so make sure that you have a working isntallation of it. The package is distributed together with C portion of CXFORM library, which is compiled automatically during installation. Thus make sure that you have a functioning compiler in your system, for instance, gcc.\n\nAssuming the above requirements are satisfied install the package with Python package manager::\n\n    $ pip install ai.cs\n\nGeometrical coordinates\n-----------------------\n\nAI.CS ships with functions for conversion between cartesian and spherical coordinates and between cartesian and cylindrical coordinates:\n\n.. code-block:: python\n\n    import numpy as np\n    from ai import cs\n\n    # cartesian to spherical\n    r, theta, phi = cs.cart2sp(x=1, y=1, z=1)\n\n    # spherical to cartesian\n    x, y, z = cs.sp2cart(r=1, theta=np.pi/4, phi=np.pi/4)\n\n    # cartesian to cylindrical\n    r, phi, z = cs.cart2cyl(x=1, y=1, z=1)\n\n    # cylindrical to cartesian\n    x, y, z = cs.cyl2cart(r=1, phi=np.pi/2, z=1)\n\nMost of the functions support both scalars and numpy arrays as input:\n\n.. code-block:: python\n\n    import numpy as np\n    from ai import cs\n\n    # converting spherical spiral from spherical to cartesian coordinates\n    x, y, z = cs.sp2cart(\n        r=np.ones(100),\n        theta=np.linspace(-np.pi/2, np.pi/2, 100),\n        phi=np.linspace(0, np.pi*6, 100)\n    )\n\nSpacecraft coordinates\n----------------------\n\nAI.CS provides Python bindings to CXFORM library for conversion between various geocentric and heliocentric cartesian coordinate systems. For example, the code below performs transformation of data from GSE to HEEQ coordinate system:\n\n.. code-block:: python\n\n    from datetime import datetime\n    from astropy import units as u\n    from ai import cs\n\n    # converting (0.5, 0.5, 0.5) AU location from GSE to HEEQ at current time\n    x, y, z = cs.cxform(\n        'GSE',\n        'HEEQ',\n        datetime.now(),\n        x=u.au.to(u.m, 0.5),\n        y=u.au.to(u.m, 0.5),\n        z=u.au.to(u.m, 0.5)\n    )\n\nBoth scalars and numpy arrays are supported as input:\n\n.. code-block:: python\n\n    from datetime import datetime, timedelta\n    from astropy import units as u\n    from ai import cs\n\n    # converting circular orbit at 1 AU from cylindrical to cartesian coordinates\n    r = np.ones(365)*u.au.to(u.m, 1)\n    phi = np.linspace(0, np.pi*2, 365)\n    z = np.zeros(365)\n    x_HEE, y_HEE, z_HEE = cs.cyl2cart(r, phi, z)\n\n    # converting HEE to HEEQ\n    x_HEEQ, y_HEEQ, z_HEEQ = cs.cxform(\n        'HEE',\n        'HEEQ',\n        [datetime(2016, 1, 1)+timedelta(days=d) for d in range(365)],\n        x=x_HEE,\n        y=y_HEE,\n        z=z_HEE\n    )\n\nGeometrical transformations\n---------------------------\n\nCurrently AI.CS offers only one type of geometrical transformations - rotations. Rotation is executed by means of 3D transformation matrices for right-handed rotations around X, Y and Z axes: \n\n.. code-block:: python\n\n    import numpy as np\n    from ai import cs\n\n    # get (3x3) rotation matrix for rotation by pi/4 around X axis \n    Tx = cs.mx_rot_x(gamma=np.pi/4)\n    # get (3x3) rotation matrix for rotation by -pi/4 around Y axis \n    Ty = cs.mx_rot_y(theta=-np.pi/4)\n    # get (3x3) rotation matrix for rotation by pi/2 around Z axis \n    Tz = cs.mx_rot_z(phi=np.pi/2)\n\nIs is also possible to construct rotation matrices for compound rotations in one shot: \n\n\n.. code-block:: python\n\n    import numpy as np\n    from ai import cs\n\n    # get matrix for right-handed rotation around X, Y and Z axes (exactly in this order)\n    T = cs.mx_rot(theta=np.pi/4, phi=np.pi/4, gamma=np.pi/4)\n\n    # get matrix for right-handed rotation around Z, Y and X axes (exactly in this order)\n    T_reverse = cs.mx_rot_reverse(theta-np.pi/4, phi=-np.pi/4, gamma=-np.pi/4)\n    # T_reverse effectively reverses the transformation described by T in this case\n\nRotation matrices can be applied to data in cartesian coordinates in the following way:\n\n.. code-block:: python\n\n    import numpy as np\n    from ai import cs\n\n    # a cube with the side length 2\n    x = np.array([1, 1, 1, 1, -1, -1, -1, -1])\n    y = np.array([1, 1, -1, -1, 1, 1, -1, -1])\n    z = np.array([1, -1, 1, -1, 1, 1, -1, -1])\n\n    # rotate cube by pi/4 around each axis\n    T = cs.mx_rot(theta=np.pi/4, phi=np.pi/4, gamma=np.pi/4)\n    x, y, z = cs.mx_apply(T, x, y, z)\n\n\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://bitbucket.org/isavnin/ai.cs", "keywords": "coordinates transformation cxform heliocentric geocentric", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "ai.cs", "package_url": "https://pypi.org/project/ai.cs/", "platform": "", "project_url": "https://pypi.org/project/ai.cs/", "project_urls": {"Homepage": "https://bitbucket.org/isavnin/ai.cs"}, "release_url": "https://pypi.org/project/ai.cs/1.0.7/", "requires_dist": ["numpy"], "requires_python": "", "summary": "Coordinates transformation package for geocentric, heliocentric and geometrical coordinates", "version": "1.0.7", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"welcome-to-ai-cs\">\n<h2>Welcome to AI.CS</h2>\n<p>AI.CS is the coordinates transformation package in Python. It offers functionality for converting data between geometrical coordinates (cartesian, spherical and cylindrical) as well as between geocentric and heliocentric coordinate systems typically used in spacecraft measurements. The package currently also supports rotations of data by means of <a href=\"https://en.wikipedia.org/wiki/Rotation_matrix\" rel=\"nofollow\">rotation matrices</a>. Transformations between spacecraft coordinate systems are implemented as a Python binding to the <a href=\"https://spdf.sci.gsfc.nasa.gov/pub/software/old/selected_software_from_nssdc/coordinate_transform/\" rel=\"nofollow\">CXFORM</a> library.</p>\n<p>The full documentation is available at <a href=\"http://aics.rtfd.io\" rel=\"nofollow\">aics.rtfd.io</a>.</p>\n</div>\n<div id=\"getting-started\">\n<h2>Getting started</h2>\n<p>This tutorial will guide you through basic usage of AI.CS.</p>\n<div id=\"installation\">\n<h3>Installation</h3>\n<p>AI.CS is developed for Python 3, so make sure that you have a working isntallation of it. The package is distributed together with C portion of CXFORM library, which is compiled automatically during installation. Thus make sure that you have a functioning compiler in your system, for instance, gcc.</p>\n<p>Assuming the above requirements are satisfied install the package with Python package manager:</p>\n<pre>$ pip install ai.cs\n</pre>\n</div>\n<div id=\"geometrical-coordinates\">\n<h3>Geometrical coordinates</h3>\n<p>AI.CS ships with functions for conversion between cartesian and spherical coordinates and between cartesian and cylindrical coordinates:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ai</span> <span class=\"kn\">import</span> <span class=\"n\">cs</span>\n\n<span class=\"c1\"># cartesian to spherical</span>\n<span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"n\">theta</span><span class=\"p\">,</span> <span class=\"n\">phi</span> <span class=\"o\">=</span> <span class=\"n\">cs</span><span class=\"o\">.</span><span class=\"n\">cart2sp</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># spherical to cartesian</span>\n<span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">z</span> <span class=\"o\">=</span> <span class=\"n\">cs</span><span class=\"o\">.</span><span class=\"n\">sp2cart</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">theta</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">pi</span><span class=\"o\">/</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">phi</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">pi</span><span class=\"o\">/</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># cartesian to cylindrical</span>\n<span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"n\">phi</span><span class=\"p\">,</span> <span class=\"n\">z</span> <span class=\"o\">=</span> <span class=\"n\">cs</span><span class=\"o\">.</span><span class=\"n\">cart2cyl</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># cylindrical to cartesian</span>\n<span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">z</span> <span class=\"o\">=</span> <span class=\"n\">cs</span><span class=\"o\">.</span><span class=\"n\">cyl2cart</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">phi</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">pi</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n</pre>\n<p>Most of the functions support both scalars and numpy arrays as input:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ai</span> <span class=\"kn\">import</span> <span class=\"n\">cs</span>\n\n<span class=\"c1\"># converting spherical spiral from spherical to cartesian coordinates</span>\n<span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">z</span> <span class=\"o\">=</span> <span class=\"n\">cs</span><span class=\"o\">.</span><span class=\"n\">sp2cart</span><span class=\"p\">(</span>\n    <span class=\"n\">r</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ones</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">),</span>\n    <span class=\"n\">theta</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">linspace</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">pi</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">pi</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">),</span>\n    <span class=\"n\">phi</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">linspace</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">pi</span><span class=\"o\">*</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">)</span>\n<span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"spacecraft-coordinates\">\n<h3>Spacecraft coordinates</h3>\n<p>AI.CS provides Python bindings to CXFORM library for conversion between various geocentric and heliocentric cartesian coordinate systems. For example, the code below performs transformation of data from GSE to HEEQ coordinate system:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">datetime</span> <span class=\"kn\">import</span> <span class=\"n\">datetime</span>\n<span class=\"kn\">from</span> <span class=\"nn\">astropy</span> <span class=\"kn\">import</span> <span class=\"n\">units</span> <span class=\"k\">as</span> <span class=\"n\">u</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ai</span> <span class=\"kn\">import</span> <span class=\"n\">cs</span>\n\n<span class=\"c1\"># converting (0.5, 0.5, 0.5) AU location from GSE to HEEQ at current time</span>\n<span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">z</span> <span class=\"o\">=</span> <span class=\"n\">cs</span><span class=\"o\">.</span><span class=\"n\">cxform</span><span class=\"p\">(</span>\n    <span class=\"s1\">'GSE'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'HEEQ'</span><span class=\"p\">,</span>\n    <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">now</span><span class=\"p\">(),</span>\n    <span class=\"n\">x</span><span class=\"o\">=</span><span class=\"n\">u</span><span class=\"o\">.</span><span class=\"n\">au</span><span class=\"o\">.</span><span class=\"n\">to</span><span class=\"p\">(</span><span class=\"n\">u</span><span class=\"o\">.</span><span class=\"n\">m</span><span class=\"p\">,</span> <span class=\"mf\">0.5</span><span class=\"p\">),</span>\n    <span class=\"n\">y</span><span class=\"o\">=</span><span class=\"n\">u</span><span class=\"o\">.</span><span class=\"n\">au</span><span class=\"o\">.</span><span class=\"n\">to</span><span class=\"p\">(</span><span class=\"n\">u</span><span class=\"o\">.</span><span class=\"n\">m</span><span class=\"p\">,</span> <span class=\"mf\">0.5</span><span class=\"p\">),</span>\n    <span class=\"n\">z</span><span class=\"o\">=</span><span class=\"n\">u</span><span class=\"o\">.</span><span class=\"n\">au</span><span class=\"o\">.</span><span class=\"n\">to</span><span class=\"p\">(</span><span class=\"n\">u</span><span class=\"o\">.</span><span class=\"n\">m</span><span class=\"p\">,</span> <span class=\"mf\">0.5</span><span class=\"p\">)</span>\n<span class=\"p\">)</span>\n</pre>\n<p>Both scalars and numpy arrays are supported as input:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">datetime</span> <span class=\"kn\">import</span> <span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"n\">timedelta</span>\n<span class=\"kn\">from</span> <span class=\"nn\">astropy</span> <span class=\"kn\">import</span> <span class=\"n\">units</span> <span class=\"k\">as</span> <span class=\"n\">u</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ai</span> <span class=\"kn\">import</span> <span class=\"n\">cs</span>\n\n<span class=\"c1\"># converting circular orbit at 1 AU from cylindrical to cartesian coordinates</span>\n<span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ones</span><span class=\"p\">(</span><span class=\"mi\">365</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"n\">u</span><span class=\"o\">.</span><span class=\"n\">au</span><span class=\"o\">.</span><span class=\"n\">to</span><span class=\"p\">(</span><span class=\"n\">u</span><span class=\"o\">.</span><span class=\"n\">m</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">phi</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">linspace</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">pi</span><span class=\"o\">*</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">365</span><span class=\"p\">)</span>\n<span class=\"n\">z</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">zeros</span><span class=\"p\">(</span><span class=\"mi\">365</span><span class=\"p\">)</span>\n<span class=\"n\">x_HEE</span><span class=\"p\">,</span> <span class=\"n\">y_HEE</span><span class=\"p\">,</span> <span class=\"n\">z_HEE</span> <span class=\"o\">=</span> <span class=\"n\">cs</span><span class=\"o\">.</span><span class=\"n\">cyl2cart</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"n\">phi</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># converting HEE to HEEQ</span>\n<span class=\"n\">x_HEEQ</span><span class=\"p\">,</span> <span class=\"n\">y_HEEQ</span><span class=\"p\">,</span> <span class=\"n\">z_HEEQ</span> <span class=\"o\">=</span> <span class=\"n\">cs</span><span class=\"o\">.</span><span class=\"n\">cxform</span><span class=\"p\">(</span>\n    <span class=\"s1\">'HEE'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'HEEQ'</span><span class=\"p\">,</span>\n    <span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"p\">(</span><span class=\"mi\">2016</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">+</span><span class=\"n\">timedelta</span><span class=\"p\">(</span><span class=\"n\">days</span><span class=\"o\">=</span><span class=\"n\">d</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">d</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">365</span><span class=\"p\">)],</span>\n    <span class=\"n\">x</span><span class=\"o\">=</span><span class=\"n\">x_HEE</span><span class=\"p\">,</span>\n    <span class=\"n\">y</span><span class=\"o\">=</span><span class=\"n\">y_HEE</span><span class=\"p\">,</span>\n    <span class=\"n\">z</span><span class=\"o\">=</span><span class=\"n\">z_HEE</span>\n<span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"geometrical-transformations\">\n<h3>Geometrical transformations</h3>\n<p>Currently AI.CS offers only one type of geometrical transformations - rotations. Rotation is executed by means of 3D transformation matrices for right-handed rotations around X, Y and Z axes:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ai</span> <span class=\"kn\">import</span> <span class=\"n\">cs</span>\n\n<span class=\"c1\"># get (3x3) rotation matrix for rotation by pi/4 around X axis</span>\n<span class=\"n\">Tx</span> <span class=\"o\">=</span> <span class=\"n\">cs</span><span class=\"o\">.</span><span class=\"n\">mx_rot_x</span><span class=\"p\">(</span><span class=\"n\">gamma</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">pi</span><span class=\"o\">/</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"c1\"># get (3x3) rotation matrix for rotation by -pi/4 around Y axis</span>\n<span class=\"n\">Ty</span> <span class=\"o\">=</span> <span class=\"n\">cs</span><span class=\"o\">.</span><span class=\"n\">mx_rot_y</span><span class=\"p\">(</span><span class=\"n\">theta</span><span class=\"o\">=-</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">pi</span><span class=\"o\">/</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"c1\"># get (3x3) rotation matrix for rotation by pi/2 around Z axis</span>\n<span class=\"n\">Tz</span> <span class=\"o\">=</span> <span class=\"n\">cs</span><span class=\"o\">.</span><span class=\"n\">mx_rot_z</span><span class=\"p\">(</span><span class=\"n\">phi</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">pi</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n</pre>\n<p>Is is also possible to construct rotation matrices for compound rotations in one shot:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ai</span> <span class=\"kn\">import</span> <span class=\"n\">cs</span>\n\n<span class=\"c1\"># get matrix for right-handed rotation around X, Y and Z axes (exactly in this order)</span>\n<span class=\"n\">T</span> <span class=\"o\">=</span> <span class=\"n\">cs</span><span class=\"o\">.</span><span class=\"n\">mx_rot</span><span class=\"p\">(</span><span class=\"n\">theta</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">pi</span><span class=\"o\">/</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">phi</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">pi</span><span class=\"o\">/</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">gamma</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">pi</span><span class=\"o\">/</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># get matrix for right-handed rotation around Z, Y and X axes (exactly in this order)</span>\n<span class=\"n\">T_reverse</span> <span class=\"o\">=</span> <span class=\"n\">cs</span><span class=\"o\">.</span><span class=\"n\">mx_rot_reverse</span><span class=\"p\">(</span><span class=\"n\">theta</span><span class=\"o\">-</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">pi</span><span class=\"o\">/</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">phi</span><span class=\"o\">=-</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">pi</span><span class=\"o\">/</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">gamma</span><span class=\"o\">=-</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">pi</span><span class=\"o\">/</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"c1\"># T_reverse effectively reverses the transformation described by T in this case</span>\n</pre>\n<p>Rotation matrices can be applied to data in cartesian coordinates in the following way:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ai</span> <span class=\"kn\">import</span> <span class=\"n\">cs</span>\n\n<span class=\"c1\"># a cube with the side length 2</span>\n<span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n<span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n<span class=\"n\">z</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n\n<span class=\"c1\"># rotate cube by pi/4 around each axis</span>\n<span class=\"n\">T</span> <span class=\"o\">=</span> <span class=\"n\">cs</span><span class=\"o\">.</span><span class=\"n\">mx_rot</span><span class=\"p\">(</span><span class=\"n\">theta</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">pi</span><span class=\"o\">/</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">phi</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">pi</span><span class=\"o\">/</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">gamma</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">pi</span><span class=\"o\">/</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">z</span> <span class=\"o\">=</span> <span class=\"n\">cs</span><span class=\"o\">.</span><span class=\"n\">mx_apply</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">)</span>\n</pre>\n</div>\n</div>\n\n          </div>"}, "last_serial": 3426030, "releases": {"1.0.2": [{"comment_text": "", "digests": {"md5": "54deb1d5a80aca6a6c110421bee35154", "sha256": "70664fae8863940a5ea37a43d0dc4dff172682621dc6c9770a0c8fab20b50254"}, "downloads": -1, "filename": "ai.cs-1.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "54deb1d5a80aca6a6c110421bee35154", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 21998, "upload_time": "2017-12-11T17:36:50", "upload_time_iso_8601": "2017-12-11T17:36:50.733472Z", "url": "https://files.pythonhosted.org/packages/3f/5b/3ed75cd2207702bcc958866a47fbbf58041e9b623c4f161ffcd005ad3439/ai.cs-1.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2c38c561c776633b178f877fd8afe109", "sha256": "521cfb09864c372d3676ec1dd3140ab6b6879a4ebf70a5a97413cde48af4011b"}, "downloads": -1, "filename": "ai.cs-1.0.2.tar.gz", "has_sig": false, "md5_digest": "2c38c561c776633b178f877fd8afe109", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5464, "upload_time": "2017-12-11T17:36:52", "upload_time_iso_8601": "2017-12-11T17:36:52.575698Z", "url": "https://files.pythonhosted.org/packages/37/02/0580ebca5a86fbf51472f405ee1f0d3233f8280d1e12f52b3e726bc6c3b6/ai.cs-1.0.2.tar.gz", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "d9d63f7a7d5fa537b667a8d57a95ca0f", "sha256": "924bc6d462dded3ebe285baf6f14f3e52ef897ef28dd6ca7f5b81140e53fed8a"}, "downloads": -1, "filename": "ai.cs-1.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "d9d63f7a7d5fa537b667a8d57a95ca0f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7760, "upload_time": "2017-12-12T15:37:30", "upload_time_iso_8601": "2017-12-12T15:37:30.322080Z", "url": "https://files.pythonhosted.org/packages/f3/25/563bb9d79de90d9f2c50d14b9dcb7fd1bfaf33c6e679c778cb017dd325e9/ai.cs-1.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "205091dc8736ff7960783d2281642ac0", "sha256": "258609d58c2d8209cc9ae29d242ce8d2d76b2ce616887857d9808d1549a8a536"}, "downloads": -1, "filename": "ai.cs-1.0.3.tar.gz", "has_sig": false, "md5_digest": "205091dc8736ff7960783d2281642ac0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5482, "upload_time": "2017-12-12T15:37:33", "upload_time_iso_8601": "2017-12-12T15:37:33.247741Z", "url": "https://files.pythonhosted.org/packages/5a/56/3bf416e5dd46e500c4216120bf9c51b4781b526403580ac7ecd9c4cd5c45/ai.cs-1.0.3.tar.gz", "yanked": false}], "1.0.4": [{"comment_text": "", "digests": {"md5": "482978c65d3bf28fb08ef0887d14e06b", "sha256": "296f5f970b3b186ca68d2409fb3e4f58b41f9511fb16cad33ee6bda9a7717280"}, "downloads": -1, "filename": "ai.cs-1.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "482978c65d3bf28fb08ef0887d14e06b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7718, "upload_time": "2017-12-15T16:09:58", "upload_time_iso_8601": "2017-12-15T16:09:58.303043Z", "url": "https://files.pythonhosted.org/packages/bc/ea/76b3cbc9045a4728639728d04f1a29626b1f826475689772f6a951c37393/ai.cs-1.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "11af07d51df61ac8fc4e1710cd92a07b", "sha256": "466c80604fbc2f721612136518dab79bbe7b74f415610d5c27e9d8bd7235e684"}, "downloads": -1, "filename": "ai.cs-1.0.4.tar.gz", "has_sig": false, "md5_digest": "11af07d51df61ac8fc4e1710cd92a07b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5522, "upload_time": "2017-12-15T16:10:00", "upload_time_iso_8601": "2017-12-15T16:10:00.072261Z", "url": "https://files.pythonhosted.org/packages/a8/6e/af560642611e317cc3b0a7cc30f95d5afc185251e06a95d34e0535c5587f/ai.cs-1.0.4.tar.gz", "yanked": false}], "1.0.5": [{"comment_text": "", "digests": {"md5": "fb8f8818daff60d211f25852a13208a9", "sha256": "f81874de72c2af3d98feb11286bfab97899783e8302dc92849ead4722d3e9063"}, "downloads": -1, "filename": "ai.cs-1.0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "fb8f8818daff60d211f25852a13208a9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7719, "upload_time": "2017-12-15T17:10:12", "upload_time_iso_8601": "2017-12-15T17:10:12.119647Z", "url": "https://files.pythonhosted.org/packages/0b/ec/8870a76d22b6de5d75b246a3d917ce2578af9d4e74af88c3c0e280f78de5/ai.cs-1.0.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c9b08dca323059cf4281983d79618183", "sha256": "d3241413472a953e71aa03da0234e99c3c32b0c578306783b543235aeed10b61"}, "downloads": -1, "filename": "ai.cs-1.0.5.tar.gz", "has_sig": false, "md5_digest": "c9b08dca323059cf4281983d79618183", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20705, "upload_time": "2017-12-15T17:10:13", "upload_time_iso_8601": "2017-12-15T17:10:13.337986Z", "url": "https://files.pythonhosted.org/packages/76/9a/39298bc71a6e40e0905533eec6842ba97525cfb1e21a6d7992632e3f07e0/ai.cs-1.0.5.tar.gz", "yanked": false}], "1.0.6": [{"comment_text": "", "digests": {"md5": "1b940c57788d9f991214ddc558d4c496", "sha256": "897f59e1fe31532af979c508195e2a1889e3d9f4d27edb8d6df55c62f871ce17"}, "downloads": -1, "filename": "ai.cs-1.0.6-py3-none-any.whl", "has_sig": false, "md5_digest": "1b940c57788d9f991214ddc558d4c496", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 21892, "upload_time": "2017-12-15T18:22:22", "upload_time_iso_8601": "2017-12-15T18:22:22.988652Z", "url": "https://files.pythonhosted.org/packages/81/96/4a6a817fbf1b32e19fc8fe985928855f5b8e6df582b450b8f2e21d4bb5aa/ai.cs-1.0.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e30feb744e15df34a4f3079baeae0c79", "sha256": "35a52693fe05f2ad0ef2e016b05693da23cd4275fbd2c43c8c6862ba76f77a05"}, "downloads": -1, "filename": "ai.cs-1.0.6.tar.gz", "has_sig": false, "md5_digest": "e30feb744e15df34a4f3079baeae0c79", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20681, "upload_time": "2017-12-15T18:22:24", "upload_time_iso_8601": "2017-12-15T18:22:24.645994Z", "url": "https://files.pythonhosted.org/packages/21/a9/98c2974b2c9c82385310bcf38069aa95243da09992cd88b08537142f2ead/ai.cs-1.0.6.tar.gz", "yanked": false}], "1.0.7": [{"comment_text": "", "digests": {"md5": "1292cff26f8569ae6c251bcda3caf078", "sha256": "f5a2c7c31cabd4764fd1042916ef19680ea905b8ffb2fba85fcf0b8104a30272"}, "downloads": -1, "filename": "ai.cs-1.0.7-py3-none-any.whl", "has_sig": false, "md5_digest": "1292cff26f8569ae6c251bcda3caf078", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 21895, "upload_time": "2017-12-18T21:31:28", "upload_time_iso_8601": "2017-12-18T21:31:28.804281Z", "url": "https://files.pythonhosted.org/packages/e0/52/6add9ff47b0d6f3652f5d5b5e7815e49114754289a59b886441308cf2651/ai.cs-1.0.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "492b7df86799fe82db682bde5772f88c", "sha256": "68a4f86a8b0d67d664bf63c5ca59af1e4e48b16e2553203586d76d654d8d7fc2"}, "downloads": -1, "filename": "ai.cs-1.0.7.tar.gz", "has_sig": false, "md5_digest": "492b7df86799fe82db682bde5772f88c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20680, "upload_time": "2017-12-18T21:31:31", "upload_time_iso_8601": "2017-12-18T21:31:31.317419Z", "url": "https://files.pythonhosted.org/packages/20/66/e05282b4e8546cea4b09a55eaa9efc8ca4fd9702a2d34484e2bc9fa0e2ce/ai.cs-1.0.7.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "1292cff26f8569ae6c251bcda3caf078", "sha256": "f5a2c7c31cabd4764fd1042916ef19680ea905b8ffb2fba85fcf0b8104a30272"}, "downloads": -1, "filename": "ai.cs-1.0.7-py3-none-any.whl", "has_sig": false, "md5_digest": "1292cff26f8569ae6c251bcda3caf078", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 21895, "upload_time": "2017-12-18T21:31:28", "upload_time_iso_8601": "2017-12-18T21:31:28.804281Z", "url": "https://files.pythonhosted.org/packages/e0/52/6add9ff47b0d6f3652f5d5b5e7815e49114754289a59b886441308cf2651/ai.cs-1.0.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "492b7df86799fe82db682bde5772f88c", "sha256": "68a4f86a8b0d67d664bf63c5ca59af1e4e48b16e2553203586d76d654d8d7fc2"}, "downloads": -1, "filename": "ai.cs-1.0.7.tar.gz", "has_sig": false, "md5_digest": "492b7df86799fe82db682bde5772f88c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20680, "upload_time": "2017-12-18T21:31:31", "upload_time_iso_8601": "2017-12-18T21:31:31.317419Z", "url": "https://files.pythonhosted.org/packages/20/66/e05282b4e8546cea4b09a55eaa9efc8ca4fd9702a2d34484e2bc9fa0e2ce/ai.cs-1.0.7.tar.gz", "yanked": false}], "timestamp": "Thu May  7 16:22:11 2020"}