{"info": {"author": "Shay Palachy", "author_email": "shaypal5@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Topic :: Software Development :: Libraries", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "decore\n#########\n|PyPI-Status| |PyPI-Versions| |Build-Status| |Codecov| |LICENCE|\n\nA small pure-python package for utility decorators.\n\n.. code-block:: python\n\n  from decore import lazy_property\n\n  @lazy_property\n  def paramless_big_calc():\n    sub_res = [big_func(const) for const in array_of_constants]\n    return sum(sub_res)\n\n.. contents::\n\n.. section-numbering::\n\n\nInstallation\n============\n\nInstall ``decore`` with:\n\n.. code-block:: bash\n\n  pip install decore\n\n\nDecorators\n==========\n\nlazy_property\n-------------\n\nThe ``lazy_property`` decorator is meant to decorate functions that compute some constant value or property that you only want to compute once. The first call to the decorated function will run it and save the value (in memory) before returning it; subsequent calls will get this value without trigerring the calculation.\n\nYou can think about it like a ``functools.lru_cache(maxsize=1)`` for functions with no parameters.\n\n.. code-block:: python\n\n  from decore import lazy_property\n\n  @lazy_property\n  def paramless_big_calc():\n    \"\"\"I take a lot of time!\"\"\"\n    sub_res = [big_func(const) for const in array_of_constants]\n    return sum(sub_res)\n\n\nthreadsafe_generator\n--------------------\n\nThe ``threadsafe_generator`` decorator makes generators threadsafe. This means multiple threads can be given references to the decorated generator and it is guarenteed that each item in the stream will be yielded (i.e. returned) to only a single thread.\n\n.. code-block:: python\n\n  from decore import threadsafe_generator\n\n  @threadsafe_generator\n  def user_documents(day):\n    \"\"\"I yield some MongoDB documents!\"\"\"\n    client = get_mongodb_client(some_params)\n    dt_obj = translate_day_to_dt(day)\n    user_document_cursor = client.some_mongodb_query(dt_obj, SOME_CONST)\n    while True:\n      yield user_document_cursor.__next__()\n\n\nContributing\n============\n\nPackage author and current maintainer is Shay Palachy (shay.palachy@gmail.com); You are more than welcome to approach him for help. Contributions are very welcomed.\n\nInstalling for development\n--------------------------\n\nClone:\n\n.. code-block:: bash\n\n  git clone git@github.com:shaypal5/decore.git\n\n\nInstall in development mode with test dependencies:\n\n.. code-block:: bash\n\n  cd pdpipe\n  pip install -e \".[test]\"\n\n\nRunning the tests\n-----------------\n\nTo run the tests, use:\n\n.. code-block:: bash\n\n  python -m pytest --cov=decore\n\n\nAdding documentation\n--------------------\n\nThis project is documented using the `numpy docstring conventions`_, which were chosen as they are perhaps the most widely-spread conventions that are both supported by common tools such as Sphinx and result in human-readable docstrings (in my personal opinion, of course). When documenting code you add to this project, please follow `these conventions`_.\n\n.. _`numpy docstring conventions`: https://github.com/numpy/numpy/blob/master/doc/HOWTO_DOCUMENT.rst.txt\n.. _`these conventions`: https://github.com/numpy/numpy/blob/master/doc/HOWTO_DOCUMENT.rst.txt\n\n\nCredits\n=======\nCreated by Shay Palachy  (shay.palachy@gmail.com).\n\n.. |PyPI-Status| image:: https://img.shields.io/pypi/v/decore.svg\n  :target: https://pypi.python.org/pypi/decore\n\n.. |PyPI-Versions| image:: https://img.shields.io/pypi/pyversions/decore.svg\n   :target: https://pypi.python.org/pypi/decore\n\n.. |Build-Status| image:: https://travis-ci.org/shaypal5/decore.svg?branch=master\n  :target: https://travis-ci.org/shaypal5/decore\n\n.. |LICENCE| image:: https://img.shields.io/pypi/l/decore.svg\n  :target: https://pypi.python.org/pypi/decore\n\n.. |Codecov| image:: https://codecov.io/github/shaypal5/decore/coverage.svg?branch=master\n   :target: https://codecov.io/github/shaypal5/decore?branch=master\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/shaypal5/decore", "keywords": "python decorator decorators", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "decore", "package_url": "https://pypi.org/project/decore/", "platform": "any", "project_url": "https://pypi.org/project/decore/", "project_urls": {"Homepage": "https://github.com/shaypal5/decore"}, "release_url": "https://pypi.org/project/decore/0.0.1/", "requires_dist": null, "requires_python": "", "summary": "A small pure-python package for utility decorators.", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://pypi.python.org/pypi/decore\" rel=\"nofollow\"><img alt=\"PyPI-Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/05ea476ad50905f4edb86127d4daceafbb541a52/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f6465636f72652e737667\"></a> <a href=\"https://pypi.python.org/pypi/decore\" rel=\"nofollow\"><img alt=\"PyPI-Versions\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8434a18d710041e8b1f0f8e8fcfe952e1db817d2/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f6465636f72652e737667\"></a> <a href=\"https://travis-ci.org/shaypal5/decore\" rel=\"nofollow\"><img alt=\"Build-Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fa01110c8697edaa3ea6d1eb1ae4f2579f2fff36/68747470733a2f2f7472617669732d63692e6f72672f7368617970616c352f6465636f72652e7376673f6272616e63683d6d6173746572\"></a> <a href=\"https://codecov.io/github/shaypal5/decore?branch=master\" rel=\"nofollow\"><img alt=\"Codecov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/72eed35038aa85415bee4370ecb45562295cafff/68747470733a2f2f636f6465636f762e696f2f6769746875622f7368617970616c352f6465636f72652f636f7665726167652e7376673f6272616e63683d6d6173746572\"></a> <a href=\"https://pypi.python.org/pypi/decore\" rel=\"nofollow\"><img alt=\"LICENCE\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e6bacceb0b08fcb2f006e25d1466854a482e657c/68747470733a2f2f696d672e736869656c64732e696f2f707970692f6c2f6465636f72652e737667\"></a></p>\n<p>A small pure-python package for utility decorators.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">decore</span> <span class=\"kn\">import</span> <span class=\"n\">lazy_property</span>\n\n<span class=\"nd\">@lazy_property</span>\n<span class=\"k\">def</span> <span class=\"nf\">paramless_big_calc</span><span class=\"p\">():</span>\n  <span class=\"n\">sub_res</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">big_func</span><span class=\"p\">(</span><span class=\"n\">const</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">const</span> <span class=\"ow\">in</span> <span class=\"n\">array_of_constants</span><span class=\"p\">]</span>\n  <span class=\"k\">return</span> <span class=\"nb\">sum</span><span class=\"p\">(</span><span class=\"n\">sub_res</span><span class=\"p\">)</span>\n</pre>\n<div id=\"contents\">\n<p>Contents</p>\n<ul>\n<li><a href=\"#installation\" id=\"id1\" rel=\"nofollow\">1\u00a0\u00a0\u00a0Installation</a></li>\n<li><a href=\"#decorators\" id=\"id2\" rel=\"nofollow\">2\u00a0\u00a0\u00a0Decorators</a><ul>\n<li><a href=\"#lazy-property\" id=\"id3\" rel=\"nofollow\">2.1\u00a0\u00a0\u00a0lazy_property</a></li>\n<li><a href=\"#threadsafe-generator\" id=\"id4\" rel=\"nofollow\">2.2\u00a0\u00a0\u00a0threadsafe_generator</a></li>\n</ul>\n</li>\n<li><a href=\"#contributing\" id=\"id5\" rel=\"nofollow\">3\u00a0\u00a0\u00a0Contributing</a><ul>\n<li><a href=\"#installing-for-development\" id=\"id6\" rel=\"nofollow\">3.1\u00a0\u00a0\u00a0Installing for development</a></li>\n<li><a href=\"#running-the-tests\" id=\"id7\" rel=\"nofollow\">3.2\u00a0\u00a0\u00a0Running the tests</a></li>\n<li><a href=\"#adding-documentation\" id=\"id8\" rel=\"nofollow\">3.3\u00a0\u00a0\u00a0Adding documentation</a></li>\n</ul>\n</li>\n<li><a href=\"#credits\" id=\"id9\" rel=\"nofollow\">4\u00a0\u00a0\u00a0Credits</a></li>\n</ul>\n</div>\n<div id=\"installation\">\n<h2><a href=\"#id1\" rel=\"nofollow\">1\u00a0\u00a0\u00a0Installation</a></h2>\n<p>Install <tt>decore</tt> with:</p>\n<pre>pip install decore\n</pre>\n</div>\n<div id=\"decorators\">\n<h2><a href=\"#id2\" rel=\"nofollow\">2\u00a0\u00a0\u00a0Decorators</a></h2>\n<div id=\"lazy-property\">\n<h3><a href=\"#id3\" rel=\"nofollow\">2.1\u00a0\u00a0\u00a0lazy_property</a></h3>\n<p>The <tt>lazy_property</tt> decorator is meant to decorate functions that compute some constant value or property that you only want to compute once. The first call to the decorated function will run it and save the value (in memory) before returning it; subsequent calls will get this value without trigerring the calculation.</p>\n<p>You can think about it like a <tt>functools.lru_cache(maxsize=1)</tt> for functions with no parameters.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">decore</span> <span class=\"kn\">import</span> <span class=\"n\">lazy_property</span>\n\n<span class=\"nd\">@lazy_property</span>\n<span class=\"k\">def</span> <span class=\"nf\">paramless_big_calc</span><span class=\"p\">():</span>\n  <span class=\"sd\">\"\"\"I take a lot of time!\"\"\"</span>\n  <span class=\"n\">sub_res</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">big_func</span><span class=\"p\">(</span><span class=\"n\">const</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">const</span> <span class=\"ow\">in</span> <span class=\"n\">array_of_constants</span><span class=\"p\">]</span>\n  <span class=\"k\">return</span> <span class=\"nb\">sum</span><span class=\"p\">(</span><span class=\"n\">sub_res</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"threadsafe-generator\">\n<h3><a href=\"#id4\" rel=\"nofollow\">2.2\u00a0\u00a0\u00a0threadsafe_generator</a></h3>\n<p>The <tt>threadsafe_generator</tt> decorator makes generators threadsafe. This means multiple threads can be given references to the decorated generator and it is guarenteed that each item in the stream will be yielded (i.e. returned) to only a single thread.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">decore</span> <span class=\"kn\">import</span> <span class=\"n\">threadsafe_generator</span>\n\n<span class=\"nd\">@threadsafe_generator</span>\n<span class=\"k\">def</span> <span class=\"nf\">user_documents</span><span class=\"p\">(</span><span class=\"n\">day</span><span class=\"p\">):</span>\n  <span class=\"sd\">\"\"\"I yield some MongoDB documents!\"\"\"</span>\n  <span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">get_mongodb_client</span><span class=\"p\">(</span><span class=\"n\">some_params</span><span class=\"p\">)</span>\n  <span class=\"n\">dt_obj</span> <span class=\"o\">=</span> <span class=\"n\">translate_day_to_dt</span><span class=\"p\">(</span><span class=\"n\">day</span><span class=\"p\">)</span>\n  <span class=\"n\">user_document_cursor</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">some_mongodb_query</span><span class=\"p\">(</span><span class=\"n\">dt_obj</span><span class=\"p\">,</span> <span class=\"n\">SOME_CONST</span><span class=\"p\">)</span>\n  <span class=\"k\">while</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n    <span class=\"k\">yield</span> <span class=\"n\">user_document_cursor</span><span class=\"o\">.</span><span class=\"fm\">__next__</span><span class=\"p\">()</span>\n</pre>\n</div>\n</div>\n<div id=\"contributing\">\n<h2><a href=\"#id5\" rel=\"nofollow\">3\u00a0\u00a0\u00a0Contributing</a></h2>\n<p>Package author and current maintainer is Shay Palachy (<a href=\"mailto:shay.palachy%40gmail.com\">shay<span>.</span>palachy<span>@</span>gmail<span>.</span>com</a>); You are more than welcome to approach him for help. Contributions are very welcomed.</p>\n<div id=\"installing-for-development\">\n<h3><a href=\"#id6\" rel=\"nofollow\">3.1\u00a0\u00a0\u00a0Installing for development</a></h3>\n<p>Clone:</p>\n<pre>git clone git@github.com:shaypal5/decore.git\n</pre>\n<p>Install in development mode with test dependencies:</p>\n<pre><span class=\"nb\">cd</span> pdpipe\npip install -e <span class=\"s2\">\".[test]\"</span>\n</pre>\n</div>\n<div id=\"running-the-tests\">\n<h3><a href=\"#id7\" rel=\"nofollow\">3.2\u00a0\u00a0\u00a0Running the tests</a></h3>\n<p>To run the tests, use:</p>\n<pre>python -m pytest --cov<span class=\"o\">=</span>decore\n</pre>\n</div>\n<div id=\"adding-documentation\">\n<h3><a href=\"#id8\" rel=\"nofollow\">3.3\u00a0\u00a0\u00a0Adding documentation</a></h3>\n<p>This project is documented using the <a href=\"https://github.com/numpy/numpy/blob/master/doc/HOWTO_DOCUMENT.rst.txt\" rel=\"nofollow\">numpy docstring conventions</a>, which were chosen as they are perhaps the most widely-spread conventions that are both supported by common tools such as Sphinx and result in human-readable docstrings (in my personal opinion, of course). When documenting code you add to this project, please follow <a href=\"https://github.com/numpy/numpy/blob/master/doc/HOWTO_DOCUMENT.rst.txt\" rel=\"nofollow\">these conventions</a>.</p>\n</div>\n</div>\n<div id=\"credits\">\n<h2><a href=\"#id9\" rel=\"nofollow\">4\u00a0\u00a0\u00a0Credits</a></h2>\n<p>Created by Shay Palachy  (<a href=\"mailto:shay.palachy%40gmail.com\">shay<span>.</span>palachy<span>@</span>gmail<span>.</span>com</a>).</p>\n</div>\n\n          </div>"}, "last_serial": 3218149, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "dce2b743c6601ee8e7a50a7d62540403", "sha256": "2aff5856b50e1650dd7b2294722994a359ea05966c2303dca9b017d97219f9aa"}, "downloads": -1, "filename": "decore-0.0.1.tar.gz", "has_sig": false, "md5_digest": "dce2b743c6601ee8e7a50a7d62540403", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19685, "upload_time": "2017-10-02T08:59:18", "upload_time_iso_8601": "2017-10-02T08:59:18.895074Z", "url": "https://files.pythonhosted.org/packages/b4/69/9e3da3a87058d43e5b9f0f668f69da591b8b0c2763b3afbfea084582ea57/decore-0.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "dce2b743c6601ee8e7a50a7d62540403", "sha256": "2aff5856b50e1650dd7b2294722994a359ea05966c2303dca9b017d97219f9aa"}, "downloads": -1, "filename": "decore-0.0.1.tar.gz", "has_sig": false, "md5_digest": "dce2b743c6601ee8e7a50a7d62540403", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19685, "upload_time": "2017-10-02T08:59:18", "upload_time_iso_8601": "2017-10-02T08:59:18.895074Z", "url": "https://files.pythonhosted.org/packages/b4/69/9e3da3a87058d43e5b9f0f668f69da591b8b0c2763b3afbfea084582ea57/decore-0.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:39:34 2020"}