{"info": {"author": "Chakib Belgaid, Arthur d'Az\u00e9mar, Romain Rouvoy", "author_email": "powerapi-staff@inria.fr", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3.7"], "description": "# PyJoules\n\n[![License: MIT](https://img.shields.io/pypi/l/pyRAPL)](https://spdx.org/licenses/MIT.html)\n[![Build Status](https://img.shields.io/circleci/build/github/powerapi-ng/pyJoules.svg)](https://circleci.com/gh/powerapi-ng/pyjoules)\n\n\n# About\n**pyJoules** is a software toolkit to measure the energy footprint of a host machine along the execution of a piece of Python code.\nIt monitors the energy consumed by specific device of the host machine such as :\n\n- intel CPU socket package\n- RAM (for intel server architectures)\n- intel integrated GPU (for client architectures)\n- nvidia GPU\n\n## Limitation\n\n### CPU, RAM and integrated GPU\n**pyJoules** uses the Intel \"_Running Average Power Limit_\" (RAPL) technology that estimates power consumption of the CPU, ram and integrated GPU.\nThis technology is available on Intel CPU since the [Sandy Bridge generation](https://fr.wikipedia.org/wiki/Intel#Historique_des_microprocesseurs_produits)(2010).\n\n### Nvidia GPU\n**pyJoules** uses the nvidia \"_Nvidia Management Library_\" technology to measure energy consumption of nvidia devices. The energy measurement API is only available on nvidia GPU with [Volta architecture](https://en.wikipedia.org/wiki/Volta_(microarchitecture))(2018)\n# Installation\n\nYou can install **pyJoules** with pip: `pip install pyJoules`\n\nif you want to use pyJoule to also measure nvidia GPU energy consumption, you have to install it with nvidia driver support using this command : `pip install pyJoules[nvidia]`. You need also to install the [nvml](https://developer.nvidia.com/nvidia-management-library-nvml) library.\n\n# Basic usage\n\nHere are some basic usages of **pyJoules**. Please note that the reported energy consumption is not only the energy consumption of the code you are running. This includes the _global energy consumption_ of all the process running on the machine during this period, thus including the operating system and other applications.\nThat is why we recommend to eliminate any extra programs that may alter the energy consumption of the machine hosting experiments and to keep _only_ the code under measurement (_i.e._, no extra applications, such as graphical interface, background running task...). This will give the closest measure to the real energy consumption of the measured code.\n\n## Decorate a function to measure its energy consumption\n\nTo measure the energy consumed by the machine during the execution of the function `foo()` run the following code:\n```python\nfrom pyJoules.energy_meter import measureit\n\n@measureit\ndef foo():\n\t# Instructions to be evaluated.\n\nfoo()\n```\n\nThis will print in the console the recorded energy consumption of all the monitorable devices during the execution of function `foo`.\n\n## Configure the decorator specifying the device to monitor\n\nYou can easily configure which device to monitor using the parameters of the `measureit` decorator. \nFor example, the following example only monitors the CPU power consumption on the CPU socket `1` and the Nvidia GPU `0`.\nBy default, **pyJoules** monitors all the available devices of the CPU sockets.\n```python\nfrom pyJoules.energy_meter import measureit\nfrom pyJoules.energy_device.rapl_device import RaplPackageDomain\nfrom pyJoules.energy_device.nvidia_device import NvidiaGPUDomain\n\n@measureit(domains=[RaplPackageDomain(1), NvidiaGPUDomain(0)])\ndef foo():\n\t# Instructions to be evaluated.\n\nfoo()\t\n```\n\nYou can append the following domain list to monitor them : \n\n- `pyJoules.energy_device.rapl_device.RaplPackageDomain` : CPU (specify the socket id in parameter)\n- `pyJoules.energy_device.rapl_device.RaplDramDomain` : RAM (specify the socket id in parameter)\n- `pyJoules.energy_device.rapl_device.RaplUncoreDomain` : integrated GPU (specify the socket id in parameter)\n- `pyJoules.energy_device.rapl_device.RaplCoreDomain` : RAPL Core domain (specify the socket id in parameter)\n- `pyJoules.energy_device.nvidia_device.NvidiaGPUDomain` : Nvidia GPU (specify the socket id in parameter)\n\n## Configure the output of the decorator\n\nIf you want to handle data with different output than the standard one, you can configure the decorator with an `EnergyHandler` instance from the `pyJoules.energy_handler` module.\n\nAs an example, if you want to write the recorded energy consumption in a .csv file:\n```python\nfrom pyJoules.energy_meter import measureit\nfrom pyJoules.energy_handler import CsvHandler\n\ncsv_handler = CsvHandler('result.csv')\n\n@measureit(handler=csv_handler)\ndef foo():\n\t# Instructions to be evaluated.\n\nfor _ in range(100):\n\tfoo()\n\ncsv_output.save()\n```\n\nThis will produce a csv file of 100 lines. Each line containing the energy\nconsumption recorded during one execution of the function `foo`.\nOther predefined `Handler` classes exist to export data to *MongoDB* and *Panda*\ndataframe.\nYou can also create your own Output class (see the\n[documentation](https://pyJoules.readthedocs.io/en/latest/Handler_API.html))\n\n\n## Use a context manager to add tagged \"_breakpoint_\" in your measurment\n\nIf you want to know where is the \"_hot spots_\" where your python code consume the\nmost energy you can add \"_breakpoints_\" during the measurement process and tag\nthem to know amount of energy consumed between this breakpoints.\n\nFor this, you have to use a context manager to measure the energy\nconsumption. It is configurable as the decorator. For example, here we use an\n`EnergyContext` to measure the power consumption of CPU `1` and nvidia gpu `0`\nand report it in a csv file : \n\n```python\nfrom pyJoules.energy_meter import EnergyContext\nfrom pyJoules.energy_device.rapl_device import RaplPackageDomain\nfrom pyJoules.energy_device.nvidia_device import NvidiaGPUDomain\nfrom pyJoules.energy_handler import CsvHandler\n\ncsv_handler = CsvHandler('result.csv')\n\nwith EnergyContext(handler=csv_handler, domains=[RaplPackageDomain(1), NvidiaGPUDomain(0)], start_tag='foo') as ctx:\n\tfoo()\n\tctx.record(tag='bar')\n\tbar()\n\ncsv_handler.save()\n```\n\nThis will record the energy consumed :\n\n- between the beginning of the `EnergyContext` and the call of the `ctx.record` method\n- between the call of the `ctx.record` method and the end of the `EnergyContext`\n\nEach measured part will be written in the csv file. One line per part.\n\n# Miscellaneous\n\n## About\n\n**pyJoules** is an open-source project developed by the [Spirals research group](https://team.inria.fr/spirals) (University of Lille and Inria) that is part of the [PowerAPI](http://powerapi.org) initiative.\n\nThe documentation is available [here](https://pyJoules.readthedocs.io/en/latest/).\n\n## Mailing list\n\nYou can follow the latest news and asks questions by subscribing to our <a href=\"mailto:sympa@inria.fr?subject=subscribe powerapi\">mailing list</a>.\n\n## Contributing\n\nIf you would like to contribute code, you can do so via GitHub by forking the repository and sending a pull request.\n\nWhen submitting code, please make every effort to follow existing coding conventions and style in order to keep the code as readable as possible.\n\nMIT License\n\nCopyright (c) 2019, INRIA\nCopyright (c) 2019, University of Lille\nAll rights reserved.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "energy", "license": "MIT License", "maintainer": "", "maintainer_email": "", "name": "pyJoules", "package_url": "https://pypi.org/project/pyJoules/", "platform": "linux", "project_url": "https://pypi.org/project/pyJoules/", "project_urls": {"Homepage": "https://pyjoules.readthedocs.io/en/latest/", "Source": "https://github.com/powerapi-ng/pyJoules"}, "release_url": "https://pypi.org/project/pyJoules/0.2.4.1/", "requires_dist": ["sphinx (>=1.8.1) ; extra == 'docs'", "sphinx-autodoc-typehints (>=1.6.0) ; extra == 'docs'", "pymongo (>=3.9.0) ; extra == 'mongodb'", "pynvml (>=8.0.4) ; extra == 'nvidia'", "pandas (>=0.25.1) ; extra == 'pandas'"], "requires_python": ">=3.7", "summary": "", "version": "0.2.4.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>PyJoules</h1>\n<p><a href=\"https://spdx.org/licenses/MIT.html\" rel=\"nofollow\"><img alt=\"License: MIT\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c1313cd1808418926cfd6b4bf78b24691d4b56f9/68747470733a2f2f696d672e736869656c64732e696f2f707970692f6c2f70795241504c\"></a>\n<a href=\"https://circleci.com/gh/powerapi-ng/pyjoules\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/599c0c8f9e0a1e4eb0994c83a3f6812aaaa46de4/68747470733a2f2f696d672e736869656c64732e696f2f636972636c6563692f6275696c642f6769746875622f706f7765726170692d6e672f70794a6f756c65732e737667\"></a></p>\n<h1>About</h1>\n<p><strong>pyJoules</strong> is a software toolkit to measure the energy footprint of a host machine along the execution of a piece of Python code.\nIt monitors the energy consumed by specific device of the host machine such as :</p>\n<ul>\n<li>intel CPU socket package</li>\n<li>RAM (for intel server architectures)</li>\n<li>intel integrated GPU (for client architectures)</li>\n<li>nvidia GPU</li>\n</ul>\n<h2>Limitation</h2>\n<h3>CPU, RAM and integrated GPU</h3>\n<p><strong>pyJoules</strong> uses the Intel \"<em>Running Average Power Limit</em>\" (RAPL) technology that estimates power consumption of the CPU, ram and integrated GPU.\nThis technology is available on Intel CPU since the <a href=\"https://fr.wikipedia.org/wiki/Intel#Historique_des_microprocesseurs_produits\" rel=\"nofollow\">Sandy Bridge generation</a>(2010).</p>\n<h3>Nvidia GPU</h3>\n<p><strong>pyJoules</strong> uses the nvidia \"<em>Nvidia Management Library</em>\" technology to measure energy consumption of nvidia devices. The energy measurement API is only available on nvidia GPU with <a href=\"https://en.wikipedia.org/wiki/Volta_(microarchitecture)\" rel=\"nofollow\">Volta architecture</a>(2018)</p>\n<h1>Installation</h1>\n<p>You can install <strong>pyJoules</strong> with pip: <code>pip install pyJoules</code></p>\n<p>if you want to use pyJoule to also measure nvidia GPU energy consumption, you have to install it with nvidia driver support using this command : <code>pip install pyJoules[nvidia]</code>. You need also to install the <a href=\"https://developer.nvidia.com/nvidia-management-library-nvml\" rel=\"nofollow\">nvml</a> library.</p>\n<h1>Basic usage</h1>\n<p>Here are some basic usages of <strong>pyJoules</strong>. Please note that the reported energy consumption is not only the energy consumption of the code you are running. This includes the <em>global energy consumption</em> of all the process running on the machine during this period, thus including the operating system and other applications.\nThat is why we recommend to eliminate any extra programs that may alter the energy consumption of the machine hosting experiments and to keep <em>only</em> the code under measurement (<em>i.e.</em>, no extra applications, such as graphical interface, background running task...). This will give the closest measure to the real energy consumption of the measured code.</p>\n<h2>Decorate a function to measure its energy consumption</h2>\n<p>To measure the energy consumed by the machine during the execution of the function <code>foo()</code> run the following code:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pyJoules.energy_meter</span> <span class=\"kn\">import</span> <span class=\"n\">measureit</span>\n\n<span class=\"nd\">@measureit</span>\n<span class=\"k\">def</span> <span class=\"nf\">foo</span><span class=\"p\">():</span>\n\t<span class=\"c1\"># Instructions to be evaluated.</span>\n\n<span class=\"n\">foo</span><span class=\"p\">()</span>\n</pre>\n<p>This will print in the console the recorded energy consumption of all the monitorable devices during the execution of function <code>foo</code>.</p>\n<h2>Configure the decorator specifying the device to monitor</h2>\n<p>You can easily configure which device to monitor using the parameters of the <code>measureit</code> decorator.\nFor example, the following example only monitors the CPU power consumption on the CPU socket <code>1</code> and the Nvidia GPU <code>0</code>.\nBy default, <strong>pyJoules</strong> monitors all the available devices of the CPU sockets.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pyJoules.energy_meter</span> <span class=\"kn\">import</span> <span class=\"n\">measureit</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyJoules.energy_device.rapl_device</span> <span class=\"kn\">import</span> <span class=\"n\">RaplPackageDomain</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyJoules.energy_device.nvidia_device</span> <span class=\"kn\">import</span> <span class=\"n\">NvidiaGPUDomain</span>\n\n<span class=\"nd\">@measureit</span><span class=\"p\">(</span><span class=\"n\">domains</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">RaplPackageDomain</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"n\">NvidiaGPUDomain</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)])</span>\n<span class=\"k\">def</span> <span class=\"nf\">foo</span><span class=\"p\">():</span>\n\t<span class=\"c1\"># Instructions to be evaluated.</span>\n\n<span class=\"n\">foo</span><span class=\"p\">()</span>\t\n</pre>\n<p>You can append the following domain list to monitor them :</p>\n<ul>\n<li><code>pyJoules.energy_device.rapl_device.RaplPackageDomain</code> : CPU (specify the socket id in parameter)</li>\n<li><code>pyJoules.energy_device.rapl_device.RaplDramDomain</code> : RAM (specify the socket id in parameter)</li>\n<li><code>pyJoules.energy_device.rapl_device.RaplUncoreDomain</code> : integrated GPU (specify the socket id in parameter)</li>\n<li><code>pyJoules.energy_device.rapl_device.RaplCoreDomain</code> : RAPL Core domain (specify the socket id in parameter)</li>\n<li><code>pyJoules.energy_device.nvidia_device.NvidiaGPUDomain</code> : Nvidia GPU (specify the socket id in parameter)</li>\n</ul>\n<h2>Configure the output of the decorator</h2>\n<p>If you want to handle data with different output than the standard one, you can configure the decorator with an <code>EnergyHandler</code> instance from the <code>pyJoules.energy_handler</code> module.</p>\n<p>As an example, if you want to write the recorded energy consumption in a .csv file:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pyJoules.energy_meter</span> <span class=\"kn\">import</span> <span class=\"n\">measureit</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyJoules.energy_handler</span> <span class=\"kn\">import</span> <span class=\"n\">CsvHandler</span>\n\n<span class=\"n\">csv_handler</span> <span class=\"o\">=</span> <span class=\"n\">CsvHandler</span><span class=\"p\">(</span><span class=\"s1\">'result.csv'</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@measureit</span><span class=\"p\">(</span><span class=\"n\">handler</span><span class=\"o\">=</span><span class=\"n\">csv_handler</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">foo</span><span class=\"p\">():</span>\n\t<span class=\"c1\"># Instructions to be evaluated.</span>\n\n<span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">):</span>\n\t<span class=\"n\">foo</span><span class=\"p\">()</span>\n\n<span class=\"n\">csv_output</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span>\n</pre>\n<p>This will produce a csv file of 100 lines. Each line containing the energy\nconsumption recorded during one execution of the function <code>foo</code>.\nOther predefined <code>Handler</code> classes exist to export data to <em>MongoDB</em> and <em>Panda</em>\ndataframe.\nYou can also create your own Output class (see the\n<a href=\"https://pyJoules.readthedocs.io/en/latest/Handler_API.html\" rel=\"nofollow\">documentation</a>)</p>\n<h2>Use a context manager to add tagged \"<em>breakpoint</em>\" in your measurment</h2>\n<p>If you want to know where is the \"<em>hot spots</em>\" where your python code consume the\nmost energy you can add \"<em>breakpoints</em>\" during the measurement process and tag\nthem to know amount of energy consumed between this breakpoints.</p>\n<p>For this, you have to use a context manager to measure the energy\nconsumption. It is configurable as the decorator. For example, here we use an\n<code>EnergyContext</code> to measure the power consumption of CPU <code>1</code> and nvidia gpu <code>0</code>\nand report it in a csv file :</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pyJoules.energy_meter</span> <span class=\"kn\">import</span> <span class=\"n\">EnergyContext</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyJoules.energy_device.rapl_device</span> <span class=\"kn\">import</span> <span class=\"n\">RaplPackageDomain</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyJoules.energy_device.nvidia_device</span> <span class=\"kn\">import</span> <span class=\"n\">NvidiaGPUDomain</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyJoules.energy_handler</span> <span class=\"kn\">import</span> <span class=\"n\">CsvHandler</span>\n\n<span class=\"n\">csv_handler</span> <span class=\"o\">=</span> <span class=\"n\">CsvHandler</span><span class=\"p\">(</span><span class=\"s1\">'result.csv'</span><span class=\"p\">)</span>\n\n<span class=\"k\">with</span> <span class=\"n\">EnergyContext</span><span class=\"p\">(</span><span class=\"n\">handler</span><span class=\"o\">=</span><span class=\"n\">csv_handler</span><span class=\"p\">,</span> <span class=\"n\">domains</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">RaplPackageDomain</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"n\">NvidiaGPUDomain</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)],</span> <span class=\"n\">start_tag</span><span class=\"o\">=</span><span class=\"s1\">'foo'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">ctx</span><span class=\"p\">:</span>\n\t<span class=\"n\">foo</span><span class=\"p\">()</span>\n\t<span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">record</span><span class=\"p\">(</span><span class=\"n\">tag</span><span class=\"o\">=</span><span class=\"s1\">'bar'</span><span class=\"p\">)</span>\n\t<span class=\"n\">bar</span><span class=\"p\">()</span>\n\n<span class=\"n\">csv_handler</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span>\n</pre>\n<p>This will record the energy consumed :</p>\n<ul>\n<li>between the beginning of the <code>EnergyContext</code> and the call of the <code>ctx.record</code> method</li>\n<li>between the call of the <code>ctx.record</code> method and the end of the <code>EnergyContext</code></li>\n</ul>\n<p>Each measured part will be written in the csv file. One line per part.</p>\n<h1>Miscellaneous</h1>\n<h2>About</h2>\n<p><strong>pyJoules</strong> is an open-source project developed by the <a href=\"https://team.inria.fr/spirals\" rel=\"nofollow\">Spirals research group</a> (University of Lille and Inria) that is part of the <a href=\"http://powerapi.org\" rel=\"nofollow\">PowerAPI</a> initiative.</p>\n<p>The documentation is available <a href=\"https://pyJoules.readthedocs.io/en/latest/\" rel=\"nofollow\">here</a>.</p>\n<h2>Mailing list</h2>\n<p>You can follow the latest news and asks questions by subscribing to our <a href=\"mailto:sympa@inria.fr?subject=subscribe%20powerapi\">mailing list</a>.</p>\n<h2>Contributing</h2>\n<p>If you would like to contribute code, you can do so via GitHub by forking the repository and sending a pull request.</p>\n<p>When submitting code, please make every effort to follow existing coding conventions and style in order to keep the code as readable as possible.</p>\n<p>MIT License</p>\n<p>Copyright (c) 2019, INRIA\nCopyright (c) 2019, University of Lille\nAll rights reserved.</p>\n<p>Permission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:</p>\n<p>The above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.</p>\n<p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.</p>\n\n          </div>"}, "last_serial": 7174222, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "5d15983b0d1e7745357084308a7aabc9", "sha256": "4d0fd7e2175855d1673f868eea2a9af9682689554fac818f62ed11d1ec9577c8"}, "downloads": -1, "filename": "pyJoules-0.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "5d15983b0d1e7745357084308a7aabc9", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.7", "size": 41239, "upload_time": "2020-01-08T17:27:30", "upload_time_iso_8601": "2020-01-08T17:27:30.453781Z", "url": "https://files.pythonhosted.org/packages/26/68/f2896d16a2a8fb89af9895715590631c487761e678bb2a55b7211712149a/pyJoules-0.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a1b65ffcd60398b685f1d05d44682965", "sha256": "878f006cc27d50c698a1d63bd1399e1ff5bd1aa6ab512cd5a0eaccdd79a03e50"}, "downloads": -1, "filename": "pyJoules-0.1.0.tar.gz", "has_sig": false, "md5_digest": "a1b65ffcd60398b685f1d05d44682965", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 18900, "upload_time": "2020-01-08T17:27:32", "upload_time_iso_8601": "2020-01-08T17:27:32.891024Z", "url": "https://files.pythonhosted.org/packages/13/43/e7aa93d46c7a59fa2e837939264b1038b68a234b5f1bc401a79c60a9bfb1/pyJoules-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "16a6f32660794ca8e6b4d893c89da2ce", "sha256": "acf6e916632bd738461d3a4febfcca2a70fec4cafe885a7774ef16b8f93fcc28"}, "downloads": -1, "filename": "pyJoules-0.2.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "16a6f32660794ca8e6b4d893c89da2ce", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.7", "size": 46801, "upload_time": "2020-01-13T14:31:50", "upload_time_iso_8601": "2020-01-13T14:31:50.143880Z", "url": "https://files.pythonhosted.org/packages/48/c9/66ad0ef8a30be00ad631acaf6ac6710339e630b27f8d8ca1b132c58cdd5e/pyJoules-0.2.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "12156b63d8137c04bfcfda892f8f5427", "sha256": "5282ee9c1d67101312449bea931476a30dbc455a2f45ae7510419e083a287158"}, "downloads": -1, "filename": "pyJoules-0.2.0.tar.gz", "has_sig": false, "md5_digest": "12156b63d8137c04bfcfda892f8f5427", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 20545, "upload_time": "2020-01-13T14:31:51", "upload_time_iso_8601": "2020-01-13T14:31:51.820058Z", "url": "https://files.pythonhosted.org/packages/00/9a/677bb50b601c26a139b62a257ed34f1bb301e5b4db75588083e4d4198119/pyJoules-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "fe83a22973640389327aac6c883961bd", "sha256": "bc9917bf24f6e2baa070726df61028b5963d5f881f19dda5d1d605a39e47c222"}, "downloads": -1, "filename": "pyJoules-0.2.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "fe83a22973640389327aac6c883961bd", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.7", "size": 46799, "upload_time": "2020-01-13T15:50:39", "upload_time_iso_8601": "2020-01-13T15:50:39.513103Z", "url": "https://files.pythonhosted.org/packages/60/7d/be1508ae213bc5233dc76619fa4fac339bb799a1cb2d88cb61d86939602f/pyJoules-0.2.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0fcef45132f6bc1b2792c2d81b93e1a8", "sha256": "d6c6106b0184642d34744981fd2ab2b8293c9f4e74b6fab106d1b38578b535b3"}, "downloads": -1, "filename": "pyJoules-0.2.1.tar.gz", "has_sig": false, "md5_digest": "0fcef45132f6bc1b2792c2d81b93e1a8", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 20548, "upload_time": "2020-01-13T15:50:41", "upload_time_iso_8601": "2020-01-13T15:50:41.270151Z", "url": "https://files.pythonhosted.org/packages/e6/ac/40eaaf27819b07e3fb8a162a235f4a4970003ec83094e7e2c4fa07fabf21/pyJoules-0.2.1.tar.gz", "yanked": false}], "0.2.3": [{"comment_text": "", "digests": {"md5": "d47b72630c2d43089b2dfde023c27be6", "sha256": "9995a2c37558423cac1683903b0b7c5ba0718bd25b6f82d76ebfcef51774583c"}, "downloads": -1, "filename": "pyJoules-0.2.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "d47b72630c2d43089b2dfde023c27be6", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.7", "size": 49319, "upload_time": "2020-01-15T16:12:50", "upload_time_iso_8601": "2020-01-15T16:12:50.690474Z", "url": "https://files.pythonhosted.org/packages/8b/09/61eb8c4971785791ef4ac2cc706019127448b86d438e17fe994c7b13dcfe/pyJoules-0.2.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "51c576bd21b1b071361d32a43c942043", "sha256": "1b3e7947e335843d06ecf2b97f90ac71a9b2a2d123b83498719d8e3aa76b7e41"}, "downloads": -1, "filename": "pyJoules-0.2.3.tar.gz", "has_sig": false, "md5_digest": "51c576bd21b1b071361d32a43c942043", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 21072, "upload_time": "2020-01-15T16:12:52", "upload_time_iso_8601": "2020-01-15T16:12:52.258273Z", "url": "https://files.pythonhosted.org/packages/58/a3/c01dfb1f4ddb1c3a5f635bc9d5c5c114c2d4ebfe16af256443f2ce6c3437/pyJoules-0.2.3.tar.gz", "yanked": false}], "0.2.4": [{"comment_text": "", "digests": {"md5": "49bd6da47fbdedb2baf3874004fce397", "sha256": "4ad866ab235c2f5dee9a7f708c999e137a903b7408a1882b65ebdd34b7acff42"}, "downloads": -1, "filename": "pyJoules-0.2.4-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "49bd6da47fbdedb2baf3874004fce397", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.7", "size": 49454, "upload_time": "2020-05-05T17:22:48", "upload_time_iso_8601": "2020-05-05T17:22:48.504089Z", "url": "https://files.pythonhosted.org/packages/e8/d8/4e28d15e710551202fed7cc6f5572b30b1c7d78aa8e1742f0fef0f005ce2/pyJoules-0.2.4-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "41eb9b2d77049d14567b7e150645e07f", "sha256": "b2bb06f07f5bbfee14093bc1729beca039e1e869195dd26ea91c9b3271809a49"}, "downloads": -1, "filename": "pyJoules-0.2.4.tar.gz", "has_sig": false, "md5_digest": "41eb9b2d77049d14567b7e150645e07f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 21185, "upload_time": "2020-05-05T17:22:49", "upload_time_iso_8601": "2020-05-05T17:22:49.686658Z", "url": "https://files.pythonhosted.org/packages/87/e2/72e8f505872f2cc6b147b2ef9269a4a9968ba16cd9c7c6d20057e0b351cd/pyJoules-0.2.4.tar.gz", "yanked": false}], "0.2.4.1": [{"comment_text": "", "digests": {"md5": "6392946d0445104c952feb146d685638", "sha256": "7bf9ecdcc572e00aac7b9f103a5c6b0516c5d975c72228cfd1beee45104842c4"}, "downloads": -1, "filename": "pyJoules-0.2.4.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "6392946d0445104c952feb146d685638", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.7", "size": 49505, "upload_time": "2020-05-05T17:37:47", "upload_time_iso_8601": "2020-05-05T17:37:47.814612Z", "url": "https://files.pythonhosted.org/packages/ad/3f/7b81dad78d8ea41f183b8052ca317571d93435ad6f63abf3726341b767b2/pyJoules-0.2.4.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0e647211d378130dd8eda36be5ee5cbf", "sha256": "cbc59706fb32525959dbba8331af5e79960eee5065d05a967fca3193c420523f"}, "downloads": -1, "filename": "pyJoules-0.2.4.1.tar.gz", "has_sig": false, "md5_digest": "0e647211d378130dd8eda36be5ee5cbf", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 21220, "upload_time": "2020-05-05T17:37:48", "upload_time_iso_8601": "2020-05-05T17:37:48.744970Z", "url": "https://files.pythonhosted.org/packages/d2/21/c59292d93a3fc6e1193c376f4d76970e25a543783350c93f2d5de6879254/pyJoules-0.2.4.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "6392946d0445104c952feb146d685638", "sha256": "7bf9ecdcc572e00aac7b9f103a5c6b0516c5d975c72228cfd1beee45104842c4"}, "downloads": -1, "filename": "pyJoules-0.2.4.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "6392946d0445104c952feb146d685638", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.7", "size": 49505, "upload_time": "2020-05-05T17:37:47", "upload_time_iso_8601": "2020-05-05T17:37:47.814612Z", "url": "https://files.pythonhosted.org/packages/ad/3f/7b81dad78d8ea41f183b8052ca317571d93435ad6f63abf3726341b767b2/pyJoules-0.2.4.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0e647211d378130dd8eda36be5ee5cbf", "sha256": "cbc59706fb32525959dbba8331af5e79960eee5065d05a967fca3193c420523f"}, "downloads": -1, "filename": "pyJoules-0.2.4.1.tar.gz", "has_sig": false, "md5_digest": "0e647211d378130dd8eda36be5ee5cbf", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 21220, "upload_time": "2020-05-05T17:37:48", "upload_time_iso_8601": "2020-05-05T17:37:48.744970Z", "url": "https://files.pythonhosted.org/packages/d2/21/c59292d93a3fc6e1193c376f4d76970e25a543783350c93f2d5de6879254/pyJoules-0.2.4.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:03:44 2020"}