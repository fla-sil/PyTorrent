{"info": {"author": "David Warde-Farley", "author_email": "d.warde.farley@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Topic :: Utilities"], "description": ".. image:: https://img.shields.io/coveralls/mila-udem/picklable-itertools.svg\n   :target: https://coveralls.io/r/mila-udem/picklable-itertools\n\n.. image:: https://travis-ci.org/mila-udem/picklable-itertools.svg?branch=master\n   :target: https://travis-ci.org/mila-udem/picklable-itertools\n\n.. image:: https://img.shields.io/scrutinizer/g/mila-udem/picklable-itertools.svg\n   :target: https://scrutinizer-ci.com/g/mila-udem/picklable-itertools/\n\n.. image:: https://img.shields.io/badge/license-MIT-blue.svg\n   :target: https://github.com/mila-udem/picklable-itertools/blob/master/LICENSE\n\npicklable-itertools\n===================\n\nA reimplementation of the Python standard library's ``itertools``, in Python,\nusing picklable iterator objects. Intended to be Python 2.7 and 3.4+\ncompatible. Also includes picklable, Python {2, 3}-compatible implementations\nof some related utilities, including some functions from the Toolz_ library,\nin ``picklable_itertools.extras``.\n\n.. _Toolz: http://toolz.readthedocs.org/en/latest/\n\nWhy?\n----\n* Because the standard library pickle module (nor the excellent dill_ package)\n  can't serialize all of the ``itertools`` iterators, at least on Python 2\n  (at least some appear to be serializable on Python 3).\n* Because there are lots of instances where these things in ``itertools`` would\n  simplify code, but can't be used because serializability must be maintained\n  across both Python 2 and Python 3.  The in-development framework Blocks_ is\n  our first consumer. We'd like to be able to serialize the entire state of a\n  long-running program for later resumption. We can't do this with\n  non-picklable objects.\n\n.. _dill: https://github.com/uqfoundation/dill\n.. _blocks: https://github.com/bartvm/blocks\n\nPhilosophy\n----------\n* *This should be a drop-in replacement.* Pretty self-explanatory. Test\n  against the standard library ``itertools`` or builtin implementation to\n  verify behaviour matches. Where Python 2 and Python 3 differ in their\n  naming, (``filterfalse`` vs ``ifilterfalse``, ``zip_longest`` vs. ``izip_longest``)\n  we provide both. We also provide names that were only available in the\n  Python 2 incarnation of ``itertools`` (``ifilter``, ``izip``), also available\n  under their built-in names in Python 3 (``filter``, ``zip``), for convenience.\n  As new objects are added to the Python 3 ``itertools`` module, we intend\n  to add them (``accumulate``, for example, appears only in Python 3, and a\n  picklable implementation is contained in this package.)\n* *Handle built-in types gracefully if possible.* List iterators, etc.\n  are not picklable on Python 2.x, so we provide an alternative\n  implementation. File iterators are handled transparently as well. dict\n  iterators and set iterators are currently *not* supported.\n  ``picklable_itertools.xrange`` can be used as a drop-in replacement for\n  Python 2 ``xrange``/Python 3 ``range``, with the benefit that the iterators\n  produced by it will be picklable on both Python 2 and 3.\n* *Premature optimization is the root of all evil.* These things are\n  implemented in Python, so speed is obviously not our primary concern. Several\n  of the more advanced iterators are constructed by chaining simpler iterators\n  together, which is not the most efficient thing to do but simplifies the\n  code a lot. If it turns out that speed (or a shallower object graph) is\n  necessary or desirable, these can always be reimplemented. Pull requests\n  to this effect are welcome.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/mila-udem/picklable-itertools", "keywords": "pickle serialize pickling itertools iterable iteration", "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "picklable-itertools", "package_url": "https://pypi.org/project/picklable-itertools/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/picklable-itertools/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/mila-udem/picklable-itertools"}, "release_url": "https://pypi.org/project/picklable-itertools/0.1.1/", "requires_dist": null, "requires_python": null, "summary": "itertools. But picklable. Even on Python 2.", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://coveralls.io/r/mila-udem/picklable-itertools\" rel=\"nofollow\"><img alt=\"https://img.shields.io/coveralls/mila-udem/picklable-itertools.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d5fda2d9f895c733d94f6a37baeaaec8fdad0dfb/68747470733a2f2f696d672e736869656c64732e696f2f636f766572616c6c732f6d696c612d7564656d2f7069636b6c61626c652d69746572746f6f6c732e737667\"></a>\n<a href=\"https://travis-ci.org/mila-udem/picklable-itertools\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/mila-udem/picklable-itertools.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b630e1f175c7924e6ef48436c68a331ff697be4d/68747470733a2f2f7472617669732d63692e6f72672f6d696c612d7564656d2f7069636b6c61626c652d69746572746f6f6c732e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://scrutinizer-ci.com/g/mila-udem/picklable-itertools/\" rel=\"nofollow\"><img alt=\"https://img.shields.io/scrutinizer/g/mila-udem/picklable-itertools.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d3cd9d378752ad831ddc075b9cbd021ae6b172b0/68747470733a2f2f696d672e736869656c64732e696f2f7363727574696e697a65722f672f6d696c612d7564656d2f7069636b6c61626c652d69746572746f6f6c732e737667\"></a>\n<a href=\"https://github.com/mila-udem/picklable-itertools/blob/master/LICENSE\" rel=\"nofollow\"><img alt=\"https://img.shields.io/badge/license-MIT-blue.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c88fab50b4a1dc0cd91faeb7ba5654d56e380260/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d626c75652e737667\"></a>\n<div id=\"picklable-itertools\">\n<h2>picklable-itertools</h2>\n<p>A reimplementation of the Python standard library\u2019s <tt>itertools</tt>, in Python,\nusing picklable iterator objects. Intended to be Python 2.7 and 3.4+\ncompatible. Also includes picklable, Python {2, 3}-compatible implementations\nof some related utilities, including some functions from the <a href=\"http://toolz.readthedocs.org/en/latest/\" rel=\"nofollow\">Toolz</a> library,\nin <tt>picklable_itertools.extras</tt>.</p>\n<div id=\"why\">\n<h3>Why?</h3>\n<ul>\n<li>Because the standard library pickle module (nor the excellent <a href=\"https://github.com/uqfoundation/dill\" rel=\"nofollow\">dill</a> package)\ncan\u2019t serialize all of the <tt>itertools</tt> iterators, at least on Python 2\n(at least some appear to be serializable on Python 3).</li>\n<li>Because there are lots of instances where these things in <tt>itertools</tt> would\nsimplify code, but can\u2019t be used because serializability must be maintained\nacross both Python 2 and Python 3.  The in-development framework <a href=\"https://github.com/bartvm/blocks\" rel=\"nofollow\">Blocks</a> is\nour first consumer. We\u2019d like to be able to serialize the entire state of a\nlong-running program for later resumption. We can\u2019t do this with\nnon-picklable objects.</li>\n</ul>\n</div>\n<div id=\"philosophy\">\n<h3>Philosophy</h3>\n<ul>\n<li><em>This should be a drop-in replacement.</em> Pretty self-explanatory. Test\nagainst the standard library <tt>itertools</tt> or builtin implementation to\nverify behaviour matches. Where Python 2 and Python 3 differ in their\nnaming, (<tt>filterfalse</tt> vs <tt>ifilterfalse</tt>, <tt>zip_longest</tt> vs. <tt>izip_longest</tt>)\nwe provide both. We also provide names that were only available in the\nPython 2 incarnation of <tt>itertools</tt> (<tt>ifilter</tt>, <tt>izip</tt>), also available\nunder their built-in names in Python 3 (<tt>filter</tt>, <tt>zip</tt>), for convenience.\nAs new objects are added to the Python 3 <tt>itertools</tt> module, we intend\nto add them (<tt>accumulate</tt>, for example, appears only in Python 3, and a\npicklable implementation is contained in this package.)</li>\n<li><em>Handle built-in types gracefully if possible.</em> List iterators, etc.\nare not picklable on Python 2.x, so we provide an alternative\nimplementation. File iterators are handled transparently as well. dict\niterators and set iterators are currently <em>not</em> supported.\n<tt>picklable_itertools.xrange</tt> can be used as a drop-in replacement for\nPython 2 <tt>xrange</tt>/Python 3 <tt>range</tt>, with the benefit that the iterators\nproduced by it will be picklable on both Python 2 and 3.</li>\n<li><em>Premature optimization is the root of all evil.</em> These things are\nimplemented in Python, so speed is obviously not our primary concern. Several\nof the more advanced iterators are constructed by chaining simpler iterators\ntogether, which is not the most efficient thing to do but simplifies the\ncode a lot. If it turns out that speed (or a shallower object graph) is\nnecessary or desirable, these can always be reimplemented. Pull requests\nto this effect are welcome.</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 1666366, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "55fb2e8caa925d13639a39f2b87ad854", "sha256": "3fe0a75d3637b4962c96787547355e53c1a1d73a5022da98c1553bc3cb21373e"}, "downloads": -1, "filename": "picklable-itertools-0.1.0.tar.gz", "has_sig": false, "md5_digest": "55fb2e8caa925d13639a39f2b87ad854", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10910, "upload_time": "2015-05-17T23:44:37", "upload_time_iso_8601": "2015-05-17T23:44:37.331679Z", "url": "https://files.pythonhosted.org/packages/e0/17/ab67e75c55f2a4100cda51ef50b162384269070919c311b55a284f6966c9/picklable-itertools-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "1bcfa6cd575a833fed253766aeb584a5", "sha256": "faecb7709d2684f3d2d06032e06ed0670cacc59cc074adccd666291c848fe638"}, "downloads": -1, "filename": "picklable-itertools-0.1.1.tar.gz", "has_sig": false, "md5_digest": "1bcfa6cd575a833fed253766aeb584a5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11289, "upload_time": "2015-08-06T04:02:25", "upload_time_iso_8601": "2015-08-06T04:02:25.323641Z", "url": "https://files.pythonhosted.org/packages/75/bc/cda9191f0c92960ede6aa95e364443965246385faf62775cc30749931c2c/picklable-itertools-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "1bcfa6cd575a833fed253766aeb584a5", "sha256": "faecb7709d2684f3d2d06032e06ed0670cacc59cc074adccd666291c848fe638"}, "downloads": -1, "filename": "picklable-itertools-0.1.1.tar.gz", "has_sig": false, "md5_digest": "1bcfa6cd575a833fed253766aeb584a5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11289, "upload_time": "2015-08-06T04:02:25", "upload_time_iso_8601": "2015-08-06T04:02:25.323641Z", "url": "https://files.pythonhosted.org/packages/75/bc/cda9191f0c92960ede6aa95e364443965246385faf62775cc30749931c2c/picklable-itertools-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:55:04 2020"}