{"info": {"author": "Ritesh Kadmawala", "author_email": "ritesh@loanzen.in", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "Intended Audience :: Information Technology", "Intended Audience :: System Administrators", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Operating System :: MacOS :: MacOS X", "Operating System :: Microsoft :: Windows", "Operating System :: POSIX :: Linux", "Operating System :: Unix", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Topic :: Software Development :: Build Tools", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: System :: Archiving :: Backup"], "description": "# pybackups-py\n\nA python port of [pgbackups-archive](https://github.com/kjohnston/pgbackups-archive)\nthat helps in automating Heroku PGBackups and archiving them to Amazon S3.\n\n# Overview\n\nThis package provides a python script `pgbackup` that will capture a Heroku \nPGBackup, wait for it to complete, and then store it within the Amazon S3 bucket\nyou specify. Best way to use this package is to use heroku scheduler to schedule \nthis python script at any required durations and get automated offsite backups.\nThis project though can also be used as a library and can be used within\nyour own code. The `pgbackup` script can also be run \nfrom command line to generate adhoc backups\n\n\nThis package doesn't interfere with or utilze automated backups, so feel free to \nschedule those with the `pg:backups schedule` command as you desire.\n\n# Installation\n\n    pip install -e pgbackups-py\n\n# Usage\n\nTo use it with heroku scheduler:\n\n#### Install Heroku Scheduler add-on\n\n    heroku addons:create scheduler\n\nSetup an AWS IAM user, S3 bucket and policy\nA good security measure would be to use a dedicated set of AWS credentials with \na security policy only allowing access to the bucket you're specifying. See this \nPro Tip on Assigning an AWS IAM user access to a single S3 bucket.\n\n#### Configure Backups\n\nThe backups can either be configured by setting environment variables or by \npassing arguments to the provided `pgbackup` script. On heroku environemnt \nvariables can be set as below  \n\n    # Required\n    heroku config:add HEROKU_API_KEY=\"collaborator-api-key\"\n    heroku config:add PGBACKUPS_APP=\"myapp\"\n    heroku config:add PGBACKUPS_AWS_ACCESS_KEY_ID=\"XXX\"\n    heroku config:add PGBACKUPS_AWS_SECRET_ACCESS_KEY=\"YYY\"\n    heroku config:add PGBACKUPS_BUCKET=\"myapp-backups\"    \n\n    # Optional: If you wish to backup a database other than the one that\n    # DATABASE_URL points to, set this to the name of the variable for that\n    # database (useful for follower databases).\n    heroku config:add PGBACKUPS_DATABASE=\"HEROKU_POSTGRESQL_BLACK_URL\"\n    \nThe `pgbackup` script takes following options\n\n      -h, --help            show this help message and exit\n      --app APP             Heroku App for which backup needs to be performed\n      --api-key API_KEY     API key for heroku\n      --db DB_NAME          Name of Heroku database\n      --access-key ACCESS_KEY\n                            AWS Access Key\n      --secret-key SECRET_KEY\n                            AWS SECRET Key\n      --aws-bucket AWS_BUCKET\n                            AWS S3 Bucket\n      --log-level {DEBUG,INFO,WARNING,ERROR,CRITICAL}\n                            Log Level\n      --disable-logging     Enable Logging\n      --log-name LOG_NAME   Log Name\n      --storage-opts [STORAGE_OPTIONS [STORAGE_OPTIONS ...]]\n                            set additional storage options as key=value\n      --delete-after        Delete backups from heroku after storing to s3\n\n####Add the backup task to scheduler\n\n    heroku addons:open scheduler\n\nThen specify `pgbackup` as a command you would like to run at any of the available intervals.\n\n\n## License\n\n* MIT license.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/loanzen/pgbackups-py", "keywords": "heroku,backups,postgres,pgbackup", "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "pgbackups-py", "package_url": "https://pypi.org/project/pgbackups-py/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/pgbackups-py/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/loanzen/pgbackups-py"}, "release_url": "https://pypi.org/project/pgbackups-py/0.0.1/", "requires_dist": null, "requires_python": null, "summary": "A cli to perform a backup of postgres db on heroku and store to s3", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            # pybackups-py<br><br>A python port of [pgbackups-archive](https://github.com/kjohnston/pgbackups-archive)<br>that helps in automating Heroku PGBackups and archiving them to Amazon S3.<br><br># Overview<br><br>This package provides a python script `pgbackup` that will capture a Heroku <br>PGBackup, wait for it to complete, and then store it within the Amazon S3 bucket<br>you specify. Best way to use this package is to use heroku scheduler to schedule <br>this python script at any required durations and get automated offsite backups.<br>This project though can also be used as a library and can be used within<br>your own code. The `pgbackup` script can also be run <br>from command line to generate adhoc backups<br><br><br>This package doesn't interfere with or utilze automated backups, so feel free to <br>schedule those with the `pg:backups schedule` command as you desire.<br><br># Installation<br><br>    pip install -e pgbackups-py<br><br># Usage<br><br>To use it with heroku scheduler:<br><br>#### Install Heroku Scheduler add-on<br><br>    heroku addons:create scheduler<br><br>Setup an AWS IAM user, S3 bucket and policy<br>A good security measure would be to use a dedicated set of AWS credentials with <br>a security policy only allowing access to the bucket you're specifying. See this <br>Pro Tip on Assigning an AWS IAM user access to a single S3 bucket.<br><br>#### Configure Backups<br><br>The backups can either be configured by setting environment variables or by <br>passing arguments to the provided `pgbackup` script. On heroku environemnt <br>variables can be set as below  <br><br>    # Required<br>    heroku config:add HEROKU_API_KEY=\"collaborator-api-key\"<br>    heroku config:add PGBACKUPS_APP=\"myapp\"<br>    heroku config:add PGBACKUPS_AWS_ACCESS_KEY_ID=\"XXX\"<br>    heroku config:add PGBACKUPS_AWS_SECRET_ACCESS_KEY=\"YYY\"<br>    heroku config:add PGBACKUPS_BUCKET=\"myapp-backups\"    <br><br>    # Optional: If you wish to backup a database other than the one that<br>    # DATABASE_URL points to, set this to the name of the variable for that<br>    # database (useful for follower databases).<br>    heroku config:add PGBACKUPS_DATABASE=\"HEROKU_POSTGRESQL_BLACK_URL\"<br>    <br>The `pgbackup` script takes following options<br><br>      -h, --help            show this help message and exit<br>      --app APP             Heroku App for which backup needs to be performed<br>      --api-key API_KEY     API key for heroku<br>      --db DB_NAME          Name of Heroku database<br>      --access-key ACCESS_KEY<br>                            AWS Access Key<br>      --secret-key SECRET_KEY<br>                            AWS SECRET Key<br>      --aws-bucket AWS_BUCKET<br>                            AWS S3 Bucket<br>      --log-level {DEBUG,INFO,WARNING,ERROR,CRITICAL}<br>                            Log Level<br>      --disable-logging     Enable Logging<br>      --log-name LOG_NAME   Log Name<br>      --storage-opts [STORAGE_OPTIONS [STORAGE_OPTIONS ...]]<br>                            set additional storage options as key=value<br>      --delete-after        Delete backups from heroku after storing to s3<br><br>####Add the backup task to scheduler<br><br>    heroku addons:open scheduler<br><br>Then specify `pgbackup` as a command you would like to run at any of the available intervals.<br><br><br>## License<br><br>* MIT license.\n          </div>"}, "last_serial": 2700253, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "4112ff8e143a0a97f7817e14ea4ebfe4", "sha256": "d4ae4c960696c2a8ae1dc2c080acb33fe21134238c6321e7f0adf3d7f7e7fafa"}, "downloads": -1, "filename": "pgbackups-py-0.0.1.tar.gz", "has_sig": false, "md5_digest": "4112ff8e143a0a97f7817e14ea4ebfe4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7063, "upload_time": "2017-03-12T08:43:50", "upload_time_iso_8601": "2017-03-12T08:43:50.393657Z", "url": "https://files.pythonhosted.org/packages/53/f8/1745dd40bc7e956702f3e61a9270f9bad860a3762467d4c5b4c2f9155451/pgbackups-py-0.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4112ff8e143a0a97f7817e14ea4ebfe4", "sha256": "d4ae4c960696c2a8ae1dc2c080acb33fe21134238c6321e7f0adf3d7f7e7fafa"}, "downloads": -1, "filename": "pgbackups-py-0.0.1.tar.gz", "has_sig": false, "md5_digest": "4112ff8e143a0a97f7817e14ea4ebfe4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7063, "upload_time": "2017-03-12T08:43:50", "upload_time_iso_8601": "2017-03-12T08:43:50.393657Z", "url": "https://files.pythonhosted.org/packages/53/f8/1745dd40bc7e956702f3e61a9270f9bad860a3762467d4c5b4c2f9155451/pgbackups-py-0.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:55:52 2020"}