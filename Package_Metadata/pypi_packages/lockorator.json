{"info": {"author": "Roman Evstifeev", "author_email": "someuniquename@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: Android", "Operating System :: MacOS :: MacOS X", "Operating System :: Microsoft :: Windows", "Operating System :: OS Independent", "Operating System :: POSIX :: Linux", "Programming Language :: Python :: 3", "Topic :: Software Development", "Topic :: Utilities"], "description": "This package provides decorators that will try to acquire lock before\ncalling decorated function.\n\nInstallation\n------------\n\n.. code:: bash\n\n   pip install lockorator\n\nUsage\n-----\n\nThis package provides two flavours of lock decorators: redis and\nasyncio. Both flavours have the same api.\n\nPackage ``lockorator.asyncio`` provides asyncio lock decorators, also\ncompatible with ``trio``.\n\nPackage ``lockorator.redis`` provides redis lock decorators.\n\nTo use redis locks, set ``LOCKORATOR_REDIS_URL`` in your environment:\n\n::\n\n   export LOCKORATOR_REDIS_URL=\"redis://localhost:6379\"\n\nAPI\n~~~\n\nlock_or_exit\n^^^^^^^^^^^^\n\nDecorator. Before decorated function starts, try to acquire lock with\nspecified identifier. If lock is acquired successfully, proceed\nexecuting the function. Otherwise, return immediately. The ``id``\nargument can contain templated string, wich will be rendered with args\nand kwargs, passed to the function.\n\nExample:\n\n.. code:: python\n\n   from lockorator.asyncio import lock_or_exit\n\n   @lock_or_exit('lock_work_{}')\n   def workwork(x):\n       pass\n\n   workwork(3)  # Will try to acquire lock 'lock_work_3'\n\nlock_wait\n^^^^^^^^^\n\nDecorator. Before decorated function starts, try to acquire lock with\nspecified identifier, waiting for ``waittime`` seconds if needed. If\nlock is acquired successfully, proceed executing the function.\nOtherwise, raise ``lockorator.TimeoutError``. The ``id`` argument can\ncontain templated string, wich will be rendered with args and kwargs,\npassed to the function.\n\nExample:\n\n.. code:: python\n\n   from lockorator.redis import lock_wait\n\n   @lock_wait('lock_work_{}', waittime=4)\n   def workwork(x):\n       pass\n\n   workwork(3)  # Will try to acquire lock 'lock_work_3' for 4 seconds\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Fak3/lockorator", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "lockorator", "package_url": "https://pypi.org/project/lockorator/", "platform": "", "project_url": "https://pypi.org/project/lockorator/", "project_urls": {"Homepage": "https://github.com/Fak3/lockorator"}, "release_url": "https://pypi.org/project/lockorator/0.1/", "requires_dist": null, "requires_python": "", "summary": "lock decorators", "version": "0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>This package provides decorators that will try to acquire lock before\ncalling decorated function.</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<pre>pip install lockorator\n</pre>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>This package provides two flavours of lock decorators: redis and\nasyncio. Both flavours have the same api.</p>\n<p>Package <tt>lockorator.asyncio</tt> provides asyncio lock decorators, also\ncompatible with <tt>trio</tt>.</p>\n<p>Package <tt>lockorator.redis</tt> provides redis lock decorators.</p>\n<p>To use redis locks, set <tt>LOCKORATOR_REDIS_URL</tt> in your environment:</p>\n<pre>export LOCKORATOR_REDIS_URL=\"redis://localhost:6379\"\n</pre>\n<div id=\"api\">\n<h3>API</h3>\n<div id=\"lock-or-exit\">\n<h4>lock_or_exit</h4>\n<p>Decorator. Before decorated function starts, try to acquire lock with\nspecified identifier. If lock is acquired successfully, proceed\nexecuting the function. Otherwise, return immediately. The <tt>id</tt>\nargument can contain templated string, wich will be rendered with args\nand kwargs, passed to the function.</p>\n<p>Example:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">lockorator.asyncio</span> <span class=\"kn\">import</span> <span class=\"n\">lock_or_exit</span>\n\n<span class=\"nd\">@lock_or_exit</span><span class=\"p\">(</span><span class=\"s1\">'lock_work_</span><span class=\"si\">{}</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">workwork</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"n\">workwork</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>  <span class=\"c1\"># Will try to acquire lock 'lock_work_3'</span>\n</pre>\n</div>\n<div id=\"lock-wait\">\n<h4>lock_wait</h4>\n<p>Decorator. Before decorated function starts, try to acquire lock with\nspecified identifier, waiting for <tt>waittime</tt> seconds if needed. If\nlock is acquired successfully, proceed executing the function.\nOtherwise, raise <tt>lockorator.TimeoutError</tt>. The <tt>id</tt> argument can\ncontain templated string, wich will be rendered with args and kwargs,\npassed to the function.</p>\n<p>Example:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">lockorator.redis</span> <span class=\"kn\">import</span> <span class=\"n\">lock_wait</span>\n\n<span class=\"nd\">@lock_wait</span><span class=\"p\">(</span><span class=\"s1\">'lock_work_</span><span class=\"si\">{}</span><span class=\"s1\">'</span><span class=\"p\">,</span> <span class=\"n\">waittime</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">workwork</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"n\">workwork</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>  <span class=\"c1\"># Will try to acquire lock 'lock_work_3' for 4 seconds</span>\n</pre>\n</div>\n</div>\n</div>\n\n          </div>"}, "last_serial": 4979491, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "73557ebd373801f6381d09ba2cded386", "sha256": "6a6c29f15957e3d6225d732fda807f2818476e99f7821e2776128e0d15a8c235"}, "downloads": -1, "filename": "lockorator-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "73557ebd373801f6381d09ba2cded386", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4880, "upload_time": "2019-03-24T18:35:08", "upload_time_iso_8601": "2019-03-24T18:35:08.724554Z", "url": "https://files.pythonhosted.org/packages/16/f4/e00961a2ffc6a9c9f663b5a6b29f51caeb91477ab5bdc4a8adcbb8a644e4/lockorator-0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "929b1e62066758af8bc912d3cfef21bd", "sha256": "c5beda474335f8f892ca1b775cc9e421668e2e9eb512ab65d25c8f586a35b9c2"}, "downloads": -1, "filename": "lockorator-0.1.tar.gz", "has_sig": false, "md5_digest": "929b1e62066758af8bc912d3cfef21bd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3013, "upload_time": "2019-03-24T18:35:10", "upload_time_iso_8601": "2019-03-24T18:35:10.725354Z", "url": "https://files.pythonhosted.org/packages/2e/82/f75e59aa950b5344e9d7710e90287755862700d94180ab6faea6d05db5b1/lockorator-0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "73557ebd373801f6381d09ba2cded386", "sha256": "6a6c29f15957e3d6225d732fda807f2818476e99f7821e2776128e0d15a8c235"}, "downloads": -1, "filename": "lockorator-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "73557ebd373801f6381d09ba2cded386", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4880, "upload_time": "2019-03-24T18:35:08", "upload_time_iso_8601": "2019-03-24T18:35:08.724554Z", "url": "https://files.pythonhosted.org/packages/16/f4/e00961a2ffc6a9c9f663b5a6b29f51caeb91477ab5bdc4a8adcbb8a644e4/lockorator-0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "929b1e62066758af8bc912d3cfef21bd", "sha256": "c5beda474335f8f892ca1b775cc9e421668e2e9eb512ab65d25c8f586a35b9c2"}, "downloads": -1, "filename": "lockorator-0.1.tar.gz", "has_sig": false, "md5_digest": "929b1e62066758af8bc912d3cfef21bd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3013, "upload_time": "2019-03-24T18:35:10", "upload_time_iso_8601": "2019-03-24T18:35:10.725354Z", "url": "https://files.pythonhosted.org/packages/2e/82/f75e59aa950b5344e9d7710e90287755862700d94180ab6faea6d05db5b1/lockorator-0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:44:33 2020"}