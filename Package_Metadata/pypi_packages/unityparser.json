{"info": {"author": "Ricard Valverde", "author_email": "ricard.valverde@socialpoint.es", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3 :: Only", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "# Unity YAML Parser #\n![travis](https://travis-ci.org/socialpoint-labs/unity-yaml-parser.svg?branch=master)\n\nThis project aims to provide a python3 API to load and dump Unity YAML \nfiles(configurations, prefabs, scenes, serialized data, etc) in the exact same \nformat the internal Unity YAML serializer does.\n\nUsing this API you will be able to easily manipulate(as python objects) \nUnity YAML files and save them just the same, keeping the YAML structure\nexactly as Unity does. This has the advantages of, first not having to\nconfigure PyYAML beforehand to deal with Unity YAMLs, and second as the\nmodified file keeps the same structure and formatting that Unity does, \nwhen the YAML file is loaded by Unity it won't make formatting changes \nto it that will make any VCS report unexpected file changes.\n\n## Installing ##\n\nInstall and update using [pip](https://pip.pypa.io/en/stable/quickstart/):\n````\npip install -U unityparser\n````\n## A Simple Example ##\n````python\nfrom unityparser import UnityDocument\n\n# Loading and modifying a config file with a single YAML document\nproject_settings_file = 'UnityProject/ProjectSettings/ProjectSettings.asset'\ndoc = UnityDocument.load_yaml(project_settings_file)\nProjectSettings = doc.entry\nProjectSettings.scriptingDefineSymbols[1] += ';CUSTOM_DEFINE'\nProjectSettings.scriptingDefineSymbols[7] = ProjectSettings.scriptingDefineSymbols[1]\ndoc.dump_yaml()\n\n# You can also load YAML files with multiple documents and filter for a single or multiple entries\nhero_prefab_file = 'UnityProject/Assets/Prefabs/Hero.prefab'\ndoc = UnityDocument.load_yaml(hero_prefab_file)\n# accessing all entries\ndoc.entries\n# [<UnityClass>, <UnityClass>, ...]\n# accessing first entry\ndoc.entry\n# <UnityClass>\n# get single entry uniquely defined by filters\nentry = doc.get(class_name='MonoBehaviour', attributes=('m_MaxHealth',))\nentry.m_MaxHealth += 10\n# get multiple entries matching a filter\nentries = doc.filter(class_names=('MonoBehaviour',), attributes=('m_Enabled',))\nfor entry in entries:\n    entry.m_Enabled = 1\ndoc.dump_yaml()\n# calling entry method for a doc with multiple document will return the first one\nprint(doc.entry.__class__.__name__)\n# 'Prefab'\n````\n\n## Classes ##\n\n### unityparser.UnityDocument ###\n\nMain class to load and dump files.\n\n#### unityparser.UnityDocument.load_yaml(file_path) ####\n\n_**Classmethod**_: Load the given YAML file_path and return a UnityDocument file\n\n#### unityparser.UnityDocument.dump_yaml(file_path=None) ####\n\nDump the UnityDocument to the previously loaded file location(overwrite). \nIf *file_path* argument is provided, dump the document to the specified location instead.\n\nThis method **keeps line endings** of the original file when it dumps.\n\n#### unityparser.UnityDocument.entries ####\n\n_**Property**_: Return the _list_ of documents found in the YAML. The objects in the _list_ are of _types_ Class named after the serialized Unity class(ie. MonoBehaviour, GameObject, Prefab, CustomName, etc).\n\n#### unityparser.UnityDocument.entry ####\n\n_**Property**_: Return the first document in the YAML, useful if there is only one. Equivalent of doing `UnityDocument.entries[0]`.\n\n#### unityparser.UnityDocument.get(class_name=None, attributes=None) ####\n\n_**Method**_: Return a single entry uniquely matching the given filters. Must exist exactly one.\n\n#### unityparser.UnityDocument.filter(class_names=None, attributes=None) ####\n\n_**Method**_: Return a list of entries matching the given filters. Many or none can be matched.\n\n### unityparser.loader.UnityLoader ###\n\nPyYAML's Loader class, can be used directly with PyYAML to customise loading. \n\n### unityparser.dumper.UnityDumper ###\n\nPyYAML's Dumper class, can be used directly with PyYAML to customise dumping. \n\n## Considerations ##\n\nText scalars which are single or double quoted that span multiple lines are not being dumped exactly as Unity does. There's a difference in the maximum length allowed per line and the logic to wrap them.\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/socialpoint-labs/unity-yaml-parser", "keywords": "unity,yaml,parser,serializer", "license": "MIT License", "maintainer": "", "maintainer_email": "", "name": "unityparser", "package_url": "https://pypi.org/project/unityparser/", "platform": "", "project_url": "https://pypi.org/project/unityparser/", "project_urls": {"Homepage": "https://github.com/socialpoint-labs/unity-yaml-parser"}, "release_url": "https://pypi.org/project/unityparser/1.0.0/", "requires_dist": ["PyYAML (==5.1)"], "requires_python": ">=3.5.0", "summary": "A python library to parse and dump Unity YAML files", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Unity YAML Parser</h1>\n<p><img alt=\"travis\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5107cf227f4caea28c57284eee2574ae3d94d0f3/68747470733a2f2f7472617669732d63692e6f72672f736f6369616c706f696e742d6c6162732f756e6974792d79616d6c2d7061727365722e7376673f6272616e63683d6d6173746572\"></p>\n<p>This project aims to provide a python3 API to load and dump Unity YAML\nfiles(configurations, prefabs, scenes, serialized data, etc) in the exact same\nformat the internal Unity YAML serializer does.</p>\n<p>Using this API you will be able to easily manipulate(as python objects)\nUnity YAML files and save them just the same, keeping the YAML structure\nexactly as Unity does. This has the advantages of, first not having to\nconfigure PyYAML beforehand to deal with Unity YAMLs, and second as the\nmodified file keeps the same structure and formatting that Unity does,\nwhen the YAML file is loaded by Unity it won't make formatting changes\nto it that will make any VCS report unexpected file changes.</p>\n<h2>Installing</h2>\n<p>Install and update using <a href=\"https://pip.pypa.io/en/stable/quickstart/\" rel=\"nofollow\">pip</a>:</p>\n<pre><code>pip install -U unityparser\n</code></pre>\n<h2>A Simple Example</h2>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">unityparser</span> <span class=\"kn\">import</span> <span class=\"n\">UnityDocument</span>\n\n<span class=\"c1\"># Loading and modifying a config file with a single YAML document</span>\n<span class=\"n\">project_settings_file</span> <span class=\"o\">=</span> <span class=\"s1\">'UnityProject/ProjectSettings/ProjectSettings.asset'</span>\n<span class=\"n\">doc</span> <span class=\"o\">=</span> <span class=\"n\">UnityDocument</span><span class=\"o\">.</span><span class=\"n\">load_yaml</span><span class=\"p\">(</span><span class=\"n\">project_settings_file</span><span class=\"p\">)</span>\n<span class=\"n\">ProjectSettings</span> <span class=\"o\">=</span> <span class=\"n\">doc</span><span class=\"o\">.</span><span class=\"n\">entry</span>\n<span class=\"n\">ProjectSettings</span><span class=\"o\">.</span><span class=\"n\">scriptingDefineSymbols</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"s1\">';CUSTOM_DEFINE'</span>\n<span class=\"n\">ProjectSettings</span><span class=\"o\">.</span><span class=\"n\">scriptingDefineSymbols</span><span class=\"p\">[</span><span class=\"mi\">7</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">ProjectSettings</span><span class=\"o\">.</span><span class=\"n\">scriptingDefineSymbols</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"n\">doc</span><span class=\"o\">.</span><span class=\"n\">dump_yaml</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># You can also load YAML files with multiple documents and filter for a single or multiple entries</span>\n<span class=\"n\">hero_prefab_file</span> <span class=\"o\">=</span> <span class=\"s1\">'UnityProject/Assets/Prefabs/Hero.prefab'</span>\n<span class=\"n\">doc</span> <span class=\"o\">=</span> <span class=\"n\">UnityDocument</span><span class=\"o\">.</span><span class=\"n\">load_yaml</span><span class=\"p\">(</span><span class=\"n\">hero_prefab_file</span><span class=\"p\">)</span>\n<span class=\"c1\"># accessing all entries</span>\n<span class=\"n\">doc</span><span class=\"o\">.</span><span class=\"n\">entries</span>\n<span class=\"c1\"># [&lt;UnityClass&gt;, &lt;UnityClass&gt;, ...]</span>\n<span class=\"c1\"># accessing first entry</span>\n<span class=\"n\">doc</span><span class=\"o\">.</span><span class=\"n\">entry</span>\n<span class=\"c1\"># &lt;UnityClass&gt;</span>\n<span class=\"c1\"># get single entry uniquely defined by filters</span>\n<span class=\"n\">entry</span> <span class=\"o\">=</span> <span class=\"n\">doc</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">class_name</span><span class=\"o\">=</span><span class=\"s1\">'MonoBehaviour'</span><span class=\"p\">,</span> <span class=\"n\">attributes</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">'m_MaxHealth'</span><span class=\"p\">,))</span>\n<span class=\"n\">entry</span><span class=\"o\">.</span><span class=\"n\">m_MaxHealth</span> <span class=\"o\">+=</span> <span class=\"mi\">10</span>\n<span class=\"c1\"># get multiple entries matching a filter</span>\n<span class=\"n\">entries</span> <span class=\"o\">=</span> <span class=\"n\">doc</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">class_names</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">'MonoBehaviour'</span><span class=\"p\">,),</span> <span class=\"n\">attributes</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">'m_Enabled'</span><span class=\"p\">,))</span>\n<span class=\"k\">for</span> <span class=\"n\">entry</span> <span class=\"ow\">in</span> <span class=\"n\">entries</span><span class=\"p\">:</span>\n    <span class=\"n\">entry</span><span class=\"o\">.</span><span class=\"n\">m_Enabled</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n<span class=\"n\">doc</span><span class=\"o\">.</span><span class=\"n\">dump_yaml</span><span class=\"p\">()</span>\n<span class=\"c1\"># calling entry method for a doc with multiple document will return the first one</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">doc</span><span class=\"o\">.</span><span class=\"n\">entry</span><span class=\"o\">.</span><span class=\"vm\">__class__</span><span class=\"o\">.</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n<span class=\"c1\"># 'Prefab'</span>\n</pre>\n<h2>Classes</h2>\n<h3>unityparser.UnityDocument</h3>\n<p>Main class to load and dump files.</p>\n<h4>unityparser.UnityDocument.load_yaml(file_path)</h4>\n<p><em><strong>Classmethod</strong></em>: Load the given YAML file_path and return a UnityDocument file</p>\n<h4>unityparser.UnityDocument.dump_yaml(file_path=None)</h4>\n<p>Dump the UnityDocument to the previously loaded file location(overwrite).\nIf <em>file_path</em> argument is provided, dump the document to the specified location instead.</p>\n<p>This method <strong>keeps line endings</strong> of the original file when it dumps.</p>\n<h4>unityparser.UnityDocument.entries</h4>\n<p><em><strong>Property</strong></em>: Return the <em>list</em> of documents found in the YAML. The objects in the <em>list</em> are of <em>types</em> Class named after the serialized Unity class(ie. MonoBehaviour, GameObject, Prefab, CustomName, etc).</p>\n<h4>unityparser.UnityDocument.entry</h4>\n<p><em><strong>Property</strong></em>: Return the first document in the YAML, useful if there is only one. Equivalent of doing <code>UnityDocument.entries[0]</code>.</p>\n<h4>unityparser.UnityDocument.get(class_name=None, attributes=None)</h4>\n<p><em><strong>Method</strong></em>: Return a single entry uniquely matching the given filters. Must exist exactly one.</p>\n<h4>unityparser.UnityDocument.filter(class_names=None, attributes=None)</h4>\n<p><em><strong>Method</strong></em>: Return a list of entries matching the given filters. Many or none can be matched.</p>\n<h3>unityparser.loader.UnityLoader</h3>\n<p>PyYAML's Loader class, can be used directly with PyYAML to customise loading.</p>\n<h3>unityparser.dumper.UnityDumper</h3>\n<p>PyYAML's Dumper class, can be used directly with PyYAML to customise dumping.</p>\n<h2>Considerations</h2>\n<p>Text scalars which are single or double quoted that span multiple lines are not being dumped exactly as Unity does. There's a difference in the maximum length allowed per line and the logic to wrap them.</p>\n\n          </div>"}, "last_serial": 6251221, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "2720983e14e8acdc464b08fcf1163d1f", "sha256": "5db9a5e9ce7a11d9d5786edb32e92e8eb14a70daafc4b446aeda8794c2819b4e"}, "downloads": -1, "filename": "unityparser-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "2720983e14e8acdc464b08fcf1163d1f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5.0", "size": 14869, "upload_time": "2019-06-11T10:33:15", "upload_time_iso_8601": "2019-06-11T10:33:15.228652Z", "url": "https://files.pythonhosted.org/packages/53/41/22188ac9e4d511d76f8ff9c54852fc360c913dcdd6732d76bb9f511ec072/unityparser-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e4eaa930fc4c37818dd829750b61ccc7", "sha256": "c4781c1e083a787cc249b76d7eb7383ddbdc3adfc3f409a18444e9008023a312"}, "downloads": -1, "filename": "unityparser-0.0.1.tar.gz", "has_sig": false, "md5_digest": "e4eaa930fc4c37818dd829750b61ccc7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5.0", "size": 12806, "upload_time": "2019-06-11T10:33:17", "upload_time_iso_8601": "2019-06-11T10:33:17.901113Z", "url": "https://files.pythonhosted.org/packages/96/9d/5bef1b80a18eb97a5045cd2cf545fc37ba8282ae33c33109ad89c27eba2a/unityparser-0.0.1.tar.gz", "yanked": false}], "0.0.1.post1": [{"comment_text": "", "digests": {"md5": "5017910bc3427006974f77f68c8daf8d", "sha256": "65ed777feb1d8056f561dd752926a106d2558633752de557fe4f919c236d0c90"}, "downloads": -1, "filename": "unityparser-0.0.1.post1-py3-none-any.whl", "has_sig": false, "md5_digest": "5017910bc3427006974f77f68c8daf8d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5.0", "size": 14959, "upload_time": "2019-06-11T10:41:20", "upload_time_iso_8601": "2019-06-11T10:41:20.889758Z", "url": "https://files.pythonhosted.org/packages/af/ca/1e3036f3820f2ee3d6d2c1689431741e47f6357a3511b748cb3877865ff8/unityparser-0.0.1.post1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0ca30e312becd45190ed8cac7eeb089e", "sha256": "e050e59ded57e70bbbe269a5ec2235df18c1ce098bf074238f11511b320cc3d7"}, "downloads": -1, "filename": "unityparser-0.0.1.post1.tar.gz", "has_sig": false, "md5_digest": "0ca30e312becd45190ed8cac7eeb089e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5.0", "size": 12810, "upload_time": "2019-06-11T10:41:22", "upload_time_iso_8601": "2019-06-11T10:41:22.758273Z", "url": "https://files.pythonhosted.org/packages/03/ba/f4f2e8ad1508139975493ad07052f9e562141ddf5cd1e65c2ffe728ccc6f/unityparser-0.0.1.post1.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "d62457fd4f1b641c6d5d55f47ff0246a", "sha256": "20282b2b3cd5ac2871476c5729035b6c285ca29f8f4c6b70f1aed5aa216a12f1"}, "downloads": -1, "filename": "unityparser-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "d62457fd4f1b641c6d5d55f47ff0246a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5.0", "size": 16208, "upload_time": "2019-10-18T22:30:13", "upload_time_iso_8601": "2019-10-18T22:30:13.132698Z", "url": "https://files.pythonhosted.org/packages/6f/fc/3dcd3d00b98ce0588ddf78d7a8b5d13faae39229cefc2c528ec2ad737111/unityparser-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6f43415c7a24a66521210dbcf85dcbb6", "sha256": "58be8410fe05da21afda0a064885891679b5b8d3ef084291f57f2e61e8935ec5"}, "downloads": -1, "filename": "unityparser-0.1.0.tar.gz", "has_sig": false, "md5_digest": "6f43415c7a24a66521210dbcf85dcbb6", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5.0", "size": 13626, "upload_time": "2019-10-18T22:30:16", "upload_time_iso_8601": "2019-10-18T22:30:16.334799Z", "url": "https://files.pythonhosted.org/packages/d2/cb/48181742fbf07bee81b552231b81a00654d6af57d7c1a744b885d4231e1f/unityparser-0.1.0.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "dd705bc290a21ec13de0de8047e8bd02", "sha256": "2a5a6b044384312819c7a7c37e6828c391bc76ae18b89461e85c3d998ba8d3ef"}, "downloads": -1, "filename": "unityparser-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "dd705bc290a21ec13de0de8047e8bd02", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5.0", "size": 16825, "upload_time": "2019-12-06T01:10:52", "upload_time_iso_8601": "2019-12-06T01:10:52.713897Z", "url": "https://files.pythonhosted.org/packages/cc/22/c734f1056689165db82f51789b7bd2c86349e962a6b6cd00657a0dc596fd/unityparser-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6b2de16be7d139ffb78da46a1c529d99", "sha256": "7b552fb654f0eeed3ed479203529b99d04fff71635db260103eaf3ff88aeb525"}, "downloads": -1, "filename": "unityparser-1.0.0.tar.gz", "has_sig": false, "md5_digest": "6b2de16be7d139ffb78da46a1c529d99", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5.0", "size": 14167, "upload_time": "2019-12-06T01:10:55", "upload_time_iso_8601": "2019-12-06T01:10:55.106786Z", "url": "https://files.pythonhosted.org/packages/78/f7/c7e11588405bd001351f953d30ca4922d530e62a6c177478b59d6b0dee6f/unityparser-1.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "dd705bc290a21ec13de0de8047e8bd02", "sha256": "2a5a6b044384312819c7a7c37e6828c391bc76ae18b89461e85c3d998ba8d3ef"}, "downloads": -1, "filename": "unityparser-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "dd705bc290a21ec13de0de8047e8bd02", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5.0", "size": 16825, "upload_time": "2019-12-06T01:10:52", "upload_time_iso_8601": "2019-12-06T01:10:52.713897Z", "url": "https://files.pythonhosted.org/packages/cc/22/c734f1056689165db82f51789b7bd2c86349e962a6b6cd00657a0dc596fd/unityparser-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6b2de16be7d139ffb78da46a1c529d99", "sha256": "7b552fb654f0eeed3ed479203529b99d04fff71635db260103eaf3ff88aeb525"}, "downloads": -1, "filename": "unityparser-1.0.0.tar.gz", "has_sig": false, "md5_digest": "6b2de16be7d139ffb78da46a1c529d99", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5.0", "size": 14167, "upload_time": "2019-12-06T01:10:55", "upload_time_iso_8601": "2019-12-06T01:10:55.106786Z", "url": "https://files.pythonhosted.org/packages/78/f7/c7e11588405bd001351f953d30ca4922d530e62a6c177478b59d6b0dee6f/unityparser-1.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:40:17 2020"}