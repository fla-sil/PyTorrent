{"info": {"author": "similarface", "author_email": "similarface@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: Console", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 2", "Programming Language :: Python :: 3", "Topic :: Database", "Topic :: Database :: Front-Ends"], "description": "===========\nipython-sql\n===========\n\n:Author: Catherine Devlin, http://catherinedevlin.blogspot.com\n\nIntroduces a %sql (or %%sql) magic.\n\nConnect to a database, using SQLAlchemy connect strings, then issue SQL\ncommands within IPython or IPython Notebook.\n\n.. image:: https://raw.github.com/catherinedevlin/ipython-sql/master/examples/writers.png\n   :width: 600px\n   :alt: screenshot of ipython-sql in the Notebook\n\nExamples\n--------\n\n.. code-block:: python\n\n    In [1]: %load_ext sql\n\n    In [2]: %%sql postgresql://will:longliveliz@localhost/shakes\n       ...: select * from character\n       ...: where abbrev = 'ALICE'\n       ...:\n    Out[2]: [(u'Alice', u'Alice', u'ALICE', u'a lady attending on Princess Katherine', 22)]\n\n    In [3]: result = _\n\n    In [4]: print(result)\n    charid   charname   abbrev                description                 speechcount\n    =================================================================================\n    Alice    Alice      ALICE    a lady attending on Princess Katherine   22\n\n    In [4]: result.keys\n    Out[5]: [u'charid', u'charname', u'abbrev', u'description', u'speechcount']\n\n    In [6]: result[0][0]\n    Out[6]: u'Alice'\n\n    In [7]: result[0].description\n    Out[7]: u'a lady attending on Princess Katherine'\n\nAfter the first connection, connect info can be omitted::\n\n    In [8]: %sql select count(*) from work\n    Out[8]: [(43L,)]\n\nConnections to multiple databases can be maintained.  You can refer to\nan existing connection by username@database\n\n.. code-block:: python\n\n    In [9]: %%sql will@shakes\n       ...: select charname, speechcount from character\n       ...: where  speechcount = (select max(speechcount)\n       ...:                       from character);\n       ...:\n    Out[9]: [(u'Poet', 733)]\n\n    In [10]: print(_)\n    charname   speechcount\n    ======================\n    Poet       733\n\nIf no connect string is supplied, ``%sql`` will provide a list of existing connections;\nhowever, if no connections have yet been made and the environment variable ``DATABASE_URL``\nis available, that will be used.\n\nFor secure access, you may dynamically access your credentials (e.g. from your system environment or `getpass.getpass`) to avoid storing your password in the notebook itself. Use the `$` before any variable to access it in your `%sql` command.\n\n.. code-block:: python\n\n    In [11]: user = os.getenv('SOME_USER')\n       ....: password = os.getenv('SOME_PASSWORD')\n       ....: connection_string = \"postgresql://{user}:{password}@localhost/some_database\".format(user=user, password=password)\n       ....: %sql $connection_string\n    Out[11]: u'Connected: some_user@some_database'\n\nYou may use multiple SQL statements inside a single cell, but you will\nonly see any query results from the last of them, so this really only\nmakes sense for statements with no output\n\n.. code-block:: python\n\n    In [11]: %%sql sqlite://\n       ....: CREATE TABLE writer (first_name, last_name, year_of_death);\n       ....: INSERT INTO writer VALUES ('William', 'Shakespeare', 1616);\n       ....: INSERT INTO writer VALUES ('Bertold', 'Brecht', 1956);\n       ....:\n    Out[11]: []\n\n\nBind variables (bind parameters) can be used in the \"named\" (:x) style.\nThe variable names used should be defined in the local namespace\n\n.. code-block:: python\n\n    In [12]: name = 'Countess'\n\n    In [13]: %sql select description from character where charname = :name\n    Out[13]: [(u'mother to Bertram',)]\n\nAs a convenience, dict-style access for result sets is supported, with the\nleftmost column serving as key, for unique values.\n\n.. code-block:: python\n\n    In [14]: result = %sql select * from work\n    43 rows affected.\n\n    In [15]: result['richard2']\n    Out[15]: (u'richard2', u'Richard II', u'History of Richard II', 1595, u'h', None, u'Moby', 22411, 628)\n\nResults can also be retrieved as an iterator of dictionaries (``result.dicts()``)\nor a single dictionary with a tuple of scalar values per key (``result.dict()``)\n\nAssignment\n----------\n\nOrdinary IPython assignment works for single-line `%sql` queries:\n\n.. code-block:: python\n\n    In [16]: works = %sql SELECT title, year FROM work\n    43 rows affected.\n\nThe `<<` operator captures query results in a local variable, and\ncan be used in multi-line ``%%sql``:\n\n.. code-block:: python\n\n    In [17]: %%sql works << SELECT title, year\n        ...: FROM work\n        ...:\n    43 rows affected.\n    Returning data to local variable works\n\nConnecting\n----------\n\nConnection strings are `SQLAlchemy`_ standard.\n\nSome example connection strings::\n\n    mysql+pymysql://scott:tiger@localhost/foo\n    oracle://scott:tiger@127.0.0.1:1521/sidname\n    sqlite://\n    sqlite:///foo.db\n    mssql+pyodbc://username:password@host/database?driver=SQL+Server+Native+Client+11.0\n\n.. _SQLAlchemy: http://docs.sqlalchemy.org/en/latest/core/engines.html#database-urls\n\nNote that ``mysql`` and ``mysql+pymysql`` connections (and perhaps others)\ndon't read your client character set information from .my.cnf.  You need\nto specify it in the connection string::\n\n    mysql+pymysql://scott:tiger@localhost/foo?charset=utf8\n\nNote that an ``impala`` connection with `impyla`_  for HiveServer2 requires disabling autocommit::\n\n    %config SqlMagic.autocommit=False\n    %sql impala://hserverhost:port/default?kerberos_service_name=hive&auth_mechanism=GSSAPI\n\n.. _impyla: https://github.com/cloudera/impyla\n\nConfiguration\n-------------\n\nQuery results are loaded as lists, so very large result sets may use up\nyour system's memory and/or hang your browser.  There is no autolimit\nby default.  However, `autolimit` (if set) limits the size of the result\nset (usually with a `LIMIT` clause in the SQL).  `displaylimit` is similar,\nbut the entire result set is still pulled into memory (for later analysis);\nonly the screen display is truncated.\n\n.. code-block:: python\n\n    In [2]: %config SqlMagic\n    SqlMagic options\n    --------------\n    SqlMagic.autocommit=<Bool>\n        Current: True\n        Set autocommit mode\n    SqlMagic.autolimit=<Int>\n        Current: 0\n        Automatically limit the size of the returned result sets\n    SqlMagic.autopandas=<Bool>\n        Current: False\n        Return Pandas DataFrames instead of regular result sets\n    SqlMagic.displaylimit=<Int>\n        Current: 0\n        Automatically limit the number of rows displayed (full result set is still\n        stored)\n    SqlMagic.feedback=<Bool>\n        Current: True\n        Print number of rows affected by DML\n    SqlMagic.short_errors=<Bool>\n        Current: True\n        Don't display the full traceback on SQL Programming Error\n    SqlMagic.style=<Unicode>\n        Current: 'DEFAULT'\n        Set the table printing style to any of prettytable's defined styles\n        (currently DEFAULT, MSWORD_FRIENDLY, PLAIN_COLUMNS, RANDOM)\n\n    In[3]: %config SqlMagic.feedback = False\n\nPlease note: if you have autopandas set to true, the displaylimit option will not apply. You can set the pandas display limit by using the pandas ``max_rows`` option as described in the `pandas documentation <http://pandas.pydata.org/pandas-docs/version/0.18.1/options.html#frequently-used-options>`_.\n\nPandas\n------\n\nIf you have installed ``pandas``, you can use a result set's\n``.DataFrame()`` method\n\n.. code-block:: python\n\n    In [3]: result = %sql SELECT * FROM character WHERE speechcount > 25\n\n    In [4]: dataframe = result.DataFrame()\n\nThe bogus non-standard pseudo-SQL command ``PERSIST`` will create a table name\nin the database from the named DataFrame.\n\n.. code-block:: python\n\n    In [5]: %sql PERSIST dataframe\n\n    In [6]: %sql SELECT * FROM dataframe;\n\n.. _Pandas: http://pandas.pydata.org/\n\nGraphing\n--------\n\nIf you have installed ``matplotlib``, you can use a result set's\n``.plot()``, ``.pie()``, and ``.bar()`` methods for quick plotting\n\n.. code-block:: python\n\n    In[5]: result = %sql SELECT title, totalwords FROM work WHERE genretype = 'c'\n\n    In[6]: %matplotlib inline\n\n    In[7]: result.pie()\n\n.. image:: https://raw.github.com/catherinedevlin/ipython-sql/master/examples/wordcount.png\n   :alt: pie chart of word count of Shakespeare's comedies\n\nDumping\n-------\n\nResult sets come with a ``.csv(filename=None)`` method.  This generates\ncomma-separated text either as a return value (if ``filename`` is not\nspecified) or in a file of the given name.\n\n.. code-block:: python\n\n    In[8]: result = %sql SELECT title, totalwords FROM work WHERE genretype = 'c'\n\n    In[9]: result.csv(filename='work.csv')\n\nPostgreSQL features\n-------------------\n\n``psql``-style \"backslash\" `meta-commands`_ commands (``\\d``, ``\\dt``, etc.)\nare provided by `PGSpecial`_.  Example:\n\n.. code-block:: python\n\n    In[9]: %sql \\d\n\n.. _PGSpecial: https://pypi.python.org/pypi/pgspecial\n\n.. _meta-commands: https://www.postgresql.org/docs/9.6/static/app-psql.html#APP-PSQL-META-COMMANDS\n\nInstalling\n----------\n\nInstall the lastest release with::\n\n    pip install ipython-sql\n\nor download from https://github.com/catherinedevlin/ipython-sql and::\n\n    cd ipython-sql\n    sudo python setup.py install\n\nDevelopment\n-----------\n\nhttps://github.com/catherinedevlin/ipython-sql\n\nCredits\n-------\n\n- Matthias Bussonnier for help with configuration\n- Olivier Le Thanh Duong for ``%config`` fixes and improvements\n- Distribute_\n- Buildout_\n- modern-package-template_\n- Mike Wilson for bind variable code\n- Thomas Kluyver and Steve Holden for debugging help\n- Berton Earnshaw for DSN connection syntax\n- Andr\u00e9s Celis for SQL Server bugfix\n- Michael Erasmus for DataFrame truth bugfix\n- Noam Finkelstein for README clarification\n- Xiaochuan Yu for `<<` operator, syntax colorization\n- Amjith Ramanujam for PGSpecial and incorporating it here\n\n.. _Distribute: http://pypi.python.org/pypi/distribute\n.. _Buildout: http://www.buildout.org/\n.. _modern-package-template: http://pypi.python.org/pypi/modern-package-template\n\n\nNews\n====\n\n0.1\n---\n\n*Release date: 21-Mar-2013*\n\n* Initial release\n\n0.1.1\n-----\n\n*Release date: 29-Mar-2013*\n\n* Release to PyPI\n\n* Results returned as lists\n\n* print(_) to get table form in text console\n\n* set autolimit and text wrap in configuration\n\n\n0.1.2\n-----\n\n*Release date: 29-Mar-2013*\n\n* Python 3 compatibility\n\n* use prettyprint package\n\n* allow multiple SQL per cell\n\n0.2.0\n-----\n\n*Release date: 30-May-2013*\n\n* Accept bind variables (Thanks Mike Wilson!)\n\n0.2.1\n-----\n\n*Release date: 15-June-2013*\n\n* Recognize socket connection strings\n\n* Bugfix - issue 4 (remember existing connections by case)\n\n0.2.2\n-----\n\n*Release date: 30-July-2013*\n\nConverted from an IPython Plugin to an Extension for 1.0 compatibility\n\n0.2.2.1\n-------\n\n*Release date: 01-Aug-2013*\n\nDeleted Plugin import left behind in 0.2.2\n\n0.2.3\n-----\n\n*Release date: 20-Sep-2013*\n\n* Contributions from Olivier Le Thanh Duong:\n\n  - SQL errors reported without internal IPython error stack\n\n  - Proper handling of configuration\n\n* Added .DataFrame(), .pie(), .plot(), and .bar() methods to\n  result sets\n\n0.3.0\n-----\n\n*Release date: 13-Oct-2013*\n\n* displaylimit config parameter\n\n* reports number of rows affected by each query\n\n* test suite working again\n\n* dict-style access for result sets by primary key\n\n0.3.1\n-----\n\n* Reporting of number of rows affected configurable with ``feedback``\n\n* Local variables usable as SQL bind variables\n\n0.3.2\n-----\n\n* ``.csv(filename=None)`` method added to result sets\n\n0.3.3\n-----\n\n* Python 3 compatibility restored\n* DSN access supported (thanks Berton Earnshaw)\n\n0.3.4\n-----\n\n* PERSIST pseudo-SQL command added\n\n0.3.5\n-----\n\n* Indentations visible in HTML cells\n* COMMIT each SQL statement immediately - prevent locks\n\n0.3.6\n-----\n\n* Fixed issue #30, commit failures for sqlite (thanks stonebig, jandot)\n\n0.3.7\n-----\n\n* New `column_local_vars` config option submitted by darikg\n* Avoid contaminating user namespace from locals (thanks alope107)\n\n0.3.7.1\n-------\n\n* Avoid \"connection busy\" error for SQL Server (thanks Andr\u00e9s Celis)\n\n0.3.8\n-----\n\n* Stop warnings for deprecated use of IPython 3 traitlets in IPython 4 (thanks graphaelli; also stonebig, aebrahim, mccahill)\n* README update for keeping connection info private, from eshilts\n\n0.3.9\n-----\n\n* Fix truth value of DataFrame error (thanks michael-erasmus)\n* `<<` operator (thanks xiaochuanyu)\n* added README example (thanks tanhuil)\n* bugfix in executing column_local_vars (thanks tebeka)\n* pgspecial installation optional (thanks jstoebel and arjoe)\n* conceal passwords in connection strings (thanks jstoebel)\n\n0.3.9\n-----\n\n* Restored Python 2 compatibility (thanks tokenmathguy)", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://pypi.python.org/pypi/ipython-sparksql", "keywords": "database ipython postgresql mysql", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "ipython-sparksql", "package_url": "https://pypi.org/project/ipython-sparksql/", "platform": "", "project_url": "https://pypi.org/project/ipython-sparksql/", "project_urls": {"Homepage": "https://pypi.python.org/pypi/ipython-sparksql"}, "release_url": "https://pypi.org/project/ipython-sparksql/0.3.9/", "requires_dist": null, "requires_python": "", "summary": "RDBMS access via IPython", "version": "0.3.9", "yanked": false, "html_description": "<div class=\"project-description\">\n            <table>\n<col>\n<col>\n<tbody>\n<tr><th>Author:</th>\n<td>Catherine Devlin, <a href=\"http://catherinedevlin.blogspot.com\" rel=\"nofollow\">http://catherinedevlin.blogspot.com</a></td></tr>\n</tbody>\n</table>\n<p>Introduces a %sql (or %%sql) magic.</p>\n<p>Connect to a database, using SQLAlchemy connect strings, then issue SQL\ncommands within IPython or IPython Notebook.</p>\n<img alt=\"screenshot of ipython-sql in the Notebook\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/119cc8696678b925bc7aef97f471e2621dd9d9c4/68747470733a2f2f7261772e6769746875622e636f6d2f636174686572696e656465766c696e2f69707974686f6e2d73716c2f6d61737465722f6578616d706c65732f777269746572732e706e67\" width=\"600px\">\n<div id=\"examples\">\n<h2>Examples</h2>\n<pre><span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]:</span> <span class=\"o\">%</span><span class=\"n\">load_ext</span> <span class=\"n\">sql</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]:</span> <span class=\"o\">%%</span><span class=\"n\">sql</span> <span class=\"n\">postgresql</span><span class=\"p\">:</span><span class=\"o\">//</span><span class=\"n\">will</span><span class=\"p\">:</span><span class=\"n\">longliveliz</span><span class=\"nd\">@localhost</span><span class=\"o\">/</span><span class=\"n\">shakes</span>\n   <span class=\"o\">...</span><span class=\"p\">:</span> <span class=\"n\">select</span> <span class=\"o\">*</span> <span class=\"kn\">from</span> <span class=\"nn\">character</span>\n   <span class=\"o\">...</span><span class=\"p\">:</span> <span class=\"n\">where</span> <span class=\"n\">abbrev</span> <span class=\"o\">=</span> <span class=\"s1\">'ALICE'</span>\n   <span class=\"o\">...</span><span class=\"p\">:</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]:</span> <span class=\"p\">[(</span><span class=\"sa\">u</span><span class=\"s1\">'Alice'</span><span class=\"p\">,</span> <span class=\"sa\">u</span><span class=\"s1\">'Alice'</span><span class=\"p\">,</span> <span class=\"sa\">u</span><span class=\"s1\">'ALICE'</span><span class=\"p\">,</span> <span class=\"sa\">u</span><span class=\"s1\">'a lady attending on Princess Katherine'</span><span class=\"p\">,</span> <span class=\"mi\">22</span><span class=\"p\">)]</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]:</span> <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">_</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]:</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span>\n<span class=\"n\">charid</span>   <span class=\"n\">charname</span>   <span class=\"n\">abbrev</span>                <span class=\"n\">description</span>                 <span class=\"n\">speechcount</span>\n<span class=\"o\">=================================================================================</span>\n<span class=\"n\">Alice</span>    <span class=\"n\">Alice</span>      <span class=\"n\">ALICE</span>    <span class=\"n\">a</span> <span class=\"n\">lady</span> <span class=\"n\">attending</span> <span class=\"n\">on</span> <span class=\"n\">Princess</span> <span class=\"n\">Katherine</span>   <span class=\"mi\">22</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]:</span> <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">keys</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">]:</span> <span class=\"p\">[</span><span class=\"sa\">u</span><span class=\"s1\">'charid'</span><span class=\"p\">,</span> <span class=\"sa\">u</span><span class=\"s1\">'charname'</span><span class=\"p\">,</span> <span class=\"sa\">u</span><span class=\"s1\">'abbrev'</span><span class=\"p\">,</span> <span class=\"sa\">u</span><span class=\"s1\">'description'</span><span class=\"p\">,</span> <span class=\"sa\">u</span><span class=\"s1\">'speechcount'</span><span class=\"p\">]</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"p\">]:</span> <span class=\"n\">result</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"p\">]:</span> <span class=\"sa\">u</span><span class=\"s1\">'Alice'</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">7</span><span class=\"p\">]:</span> <span class=\"n\">result</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">description</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">7</span><span class=\"p\">]:</span> <span class=\"sa\">u</span><span class=\"s1\">'a lady attending on Princess Katherine'</span>\n</pre>\n<p>After the first connection, connect info can be omitted:</p>\n<pre>In [8]: %sql select count(*) from work\nOut[8]: [(43L,)]\n</pre>\n<p>Connections to multiple databases can be maintained.  You can refer to\nan existing connection by <a href=\"mailto:username%40database\">username<span>@</span>database</a></p>\n<pre><span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">9</span><span class=\"p\">]:</span> <span class=\"o\">%%</span><span class=\"n\">sql</span> <span class=\"n\">will</span><span class=\"nd\">@shakes</span>\n   <span class=\"o\">...</span><span class=\"p\">:</span> <span class=\"n\">select</span> <span class=\"n\">charname</span><span class=\"p\">,</span> <span class=\"n\">speechcount</span> <span class=\"kn\">from</span> <span class=\"nn\">character</span>\n   <span class=\"o\">...</span><span class=\"p\">:</span> <span class=\"n\">where</span>  <span class=\"n\">speechcount</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">select</span> <span class=\"nb\">max</span><span class=\"p\">(</span><span class=\"n\">speechcount</span><span class=\"p\">)</span>\n   <span class=\"o\">...</span><span class=\"p\">:</span>                       <span class=\"kn\">from</span> <span class=\"nn\">character</span><span class=\"p\">);</span>\n   <span class=\"o\">...</span><span class=\"p\">:</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">9</span><span class=\"p\">]:</span> <span class=\"p\">[(</span><span class=\"sa\">u</span><span class=\"s1\">'Poet'</span><span class=\"p\">,</span> <span class=\"mi\">733</span><span class=\"p\">)]</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">]:</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">)</span>\n<span class=\"n\">charname</span>   <span class=\"n\">speechcount</span>\n<span class=\"o\">======================</span>\n<span class=\"n\">Poet</span>       <span class=\"mi\">733</span>\n</pre>\n<p>If no connect string is supplied, <tt>%sql</tt> will provide a list of existing connections;\nhowever, if no connections have yet been made and the environment variable <tt>DATABASE_URL</tt>\nis available, that will be used.</p>\n<p>For secure access, you may dynamically access your credentials (e.g. from your system environment or <cite>getpass.getpass</cite>) to avoid storing your password in the notebook itself. Use the <cite>$</cite> before any variable to access it in your <cite>%sql</cite> command.</p>\n<pre><span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">11</span><span class=\"p\">]:</span> <span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">getenv</span><span class=\"p\">(</span><span class=\"s1\">'SOME_USER'</span><span class=\"p\">)</span>\n   <span class=\"o\">....</span><span class=\"p\">:</span> <span class=\"n\">password</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">getenv</span><span class=\"p\">(</span><span class=\"s1\">'SOME_PASSWORD'</span><span class=\"p\">)</span>\n   <span class=\"o\">....</span><span class=\"p\">:</span> <span class=\"n\">connection_string</span> <span class=\"o\">=</span> <span class=\"s2\">\"postgresql://</span><span class=\"si\">{user}</span><span class=\"s2\">:</span><span class=\"si\">{password}</span><span class=\"s2\">@localhost/some_database\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"o\">=</span><span class=\"n\">user</span><span class=\"p\">,</span> <span class=\"n\">password</span><span class=\"o\">=</span><span class=\"n\">password</span><span class=\"p\">)</span>\n   <span class=\"o\">....</span><span class=\"p\">:</span> <span class=\"o\">%</span><span class=\"n\">sql</span> <span class=\"err\">$</span><span class=\"n\">connection_string</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">11</span><span class=\"p\">]:</span> <span class=\"sa\">u</span><span class=\"s1\">'Connected: some_user@some_database'</span>\n</pre>\n<p>You may use multiple SQL statements inside a single cell, but you will\nonly see any query results from the last of them, so this really only\nmakes sense for statements with no output</p>\n<pre><span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">11</span><span class=\"p\">]:</span> <span class=\"o\">%%</span><span class=\"n\">sql</span> <span class=\"n\">sqlite</span><span class=\"p\">:</span><span class=\"o\">//</span>\n   <span class=\"o\">....</span><span class=\"p\">:</span> <span class=\"n\">CREATE</span> <span class=\"n\">TABLE</span> <span class=\"n\">writer</span> <span class=\"p\">(</span><span class=\"n\">first_name</span><span class=\"p\">,</span> <span class=\"n\">last_name</span><span class=\"p\">,</span> <span class=\"n\">year_of_death</span><span class=\"p\">);</span>\n   <span class=\"o\">....</span><span class=\"p\">:</span> <span class=\"n\">INSERT</span> <span class=\"n\">INTO</span> <span class=\"n\">writer</span> <span class=\"n\">VALUES</span> <span class=\"p\">(</span><span class=\"s1\">'William'</span><span class=\"p\">,</span> <span class=\"s1\">'Shakespeare'</span><span class=\"p\">,</span> <span class=\"mi\">1616</span><span class=\"p\">);</span>\n   <span class=\"o\">....</span><span class=\"p\">:</span> <span class=\"n\">INSERT</span> <span class=\"n\">INTO</span> <span class=\"n\">writer</span> <span class=\"n\">VALUES</span> <span class=\"p\">(</span><span class=\"s1\">'Bertold'</span><span class=\"p\">,</span> <span class=\"s1\">'Brecht'</span><span class=\"p\">,</span> <span class=\"mi\">1956</span><span class=\"p\">);</span>\n   <span class=\"o\">....</span><span class=\"p\">:</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">11</span><span class=\"p\">]:</span> <span class=\"p\">[]</span>\n</pre>\n<p>Bind variables (bind parameters) can be used in the \u201cnamed\u201d (:x) style.\nThe variable names used should be defined in the local namespace</p>\n<pre><span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">12</span><span class=\"p\">]:</span> <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s1\">'Countess'</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">13</span><span class=\"p\">]:</span> <span class=\"o\">%</span><span class=\"n\">sql</span> <span class=\"n\">select</span> <span class=\"n\">description</span> <span class=\"kn\">from</span> <span class=\"nn\">character</span> <span class=\"n\">where</span> <span class=\"n\">charname</span> <span class=\"o\">=</span> <span class=\"p\">:</span><span class=\"n\">name</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">13</span><span class=\"p\">]:</span> <span class=\"p\">[(</span><span class=\"sa\">u</span><span class=\"s1\">'mother to Bertram'</span><span class=\"p\">,)]</span>\n</pre>\n<p>As a convenience, dict-style access for result sets is supported, with the\nleftmost column serving as key, for unique values.</p>\n<pre><span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">14</span><span class=\"p\">]:</span> <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"o\">%</span><span class=\"n\">sql</span> <span class=\"n\">select</span> <span class=\"o\">*</span> <span class=\"kn\">from</span> <span class=\"nn\">work</span>\n<span class=\"mi\">43</span> <span class=\"n\">rows</span> <span class=\"n\">affected</span><span class=\"o\">.</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">15</span><span class=\"p\">]:</span> <span class=\"n\">result</span><span class=\"p\">[</span><span class=\"s1\">'richard2'</span><span class=\"p\">]</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">15</span><span class=\"p\">]:</span> <span class=\"p\">(</span><span class=\"sa\">u</span><span class=\"s1\">'richard2'</span><span class=\"p\">,</span> <span class=\"sa\">u</span><span class=\"s1\">'Richard II'</span><span class=\"p\">,</span> <span class=\"sa\">u</span><span class=\"s1\">'History of Richard II'</span><span class=\"p\">,</span> <span class=\"mi\">1595</span><span class=\"p\">,</span> <span class=\"sa\">u</span><span class=\"s1\">'h'</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"sa\">u</span><span class=\"s1\">'Moby'</span><span class=\"p\">,</span> <span class=\"mi\">22411</span><span class=\"p\">,</span> <span class=\"mi\">628</span><span class=\"p\">)</span>\n</pre>\n<p>Results can also be retrieved as an iterator of dictionaries (<tt>result.dicts()</tt>)\nor a single dictionary with a tuple of scalar values per key (<tt>result.dict()</tt>)</p>\n</div>\n<div id=\"assignment\">\n<h2>Assignment</h2>\n<p>Ordinary IPython assignment works for single-line <cite>%sql</cite> queries:</p>\n<pre><span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">16</span><span class=\"p\">]:</span> <span class=\"n\">works</span> <span class=\"o\">=</span> <span class=\"o\">%</span><span class=\"n\">sql</span> <span class=\"n\">SELECT</span> <span class=\"n\">title</span><span class=\"p\">,</span> <span class=\"n\">year</span> <span class=\"n\">FROM</span> <span class=\"n\">work</span>\n<span class=\"mi\">43</span> <span class=\"n\">rows</span> <span class=\"n\">affected</span><span class=\"o\">.</span>\n</pre>\n<p>The <cite>&lt;&lt;</cite> operator captures query results in a local variable, and\ncan be used in multi-line <tt>%%sql</tt>:</p>\n<pre><span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">17</span><span class=\"p\">]:</span> <span class=\"o\">%%</span><span class=\"n\">sql</span> <span class=\"n\">works</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">SELECT</span> <span class=\"n\">title</span><span class=\"p\">,</span> <span class=\"n\">year</span>\n    <span class=\"o\">...</span><span class=\"p\">:</span> <span class=\"n\">FROM</span> <span class=\"n\">work</span>\n    <span class=\"o\">...</span><span class=\"p\">:</span>\n<span class=\"mi\">43</span> <span class=\"n\">rows</span> <span class=\"n\">affected</span><span class=\"o\">.</span>\n<span class=\"n\">Returning</span> <span class=\"n\">data</span> <span class=\"n\">to</span> <span class=\"n\">local</span> <span class=\"n\">variable</span> <span class=\"n\">works</span>\n</pre>\n</div>\n<div id=\"connecting\">\n<h2>Connecting</h2>\n<p>Connection strings are <a href=\"http://docs.sqlalchemy.org/en/latest/core/engines.html#database-urls\" rel=\"nofollow\">SQLAlchemy</a> standard.</p>\n<p>Some example connection strings:</p>\n<pre>mysql+pymysql://scott:tiger@localhost/foo\noracle://scott:tiger@127.0.0.1:1521/sidname\nsqlite://\nsqlite:///foo.db\nmssql+pyodbc://username:password@host/database?driver=SQL+Server+Native+Client+11.0\n</pre>\n<p>Note that <tt>mysql</tt> and <tt>mysql+pymysql</tt> connections (and perhaps others)\ndon\u2019t read your client character set information from .my.cnf.  You need\nto specify it in the connection string:</p>\n<pre>mysql+pymysql://scott:tiger@localhost/foo?charset=utf8\n</pre>\n<p>Note that an <tt>impala</tt> connection with <a href=\"https://github.com/cloudera/impyla\" rel=\"nofollow\">impyla</a>  for HiveServer2 requires disabling autocommit:</p>\n<pre>%config SqlMagic.autocommit=False\n%sql impala://hserverhost:port/default?kerberos_service_name=hive&amp;auth_mechanism=GSSAPI\n</pre>\n</div>\n<div id=\"configuration\">\n<h2>Configuration</h2>\n<p>Query results are loaded as lists, so very large result sets may use up\nyour system\u2019s memory and/or hang your browser.  There is no autolimit\nby default.  However, <cite>autolimit</cite> (if set) limits the size of the result\nset (usually with a <cite>LIMIT</cite> clause in the SQL).  <cite>displaylimit</cite> is similar,\nbut the entire result set is still pulled into memory (for later analysis);\nonly the screen display is truncated.</p>\n<pre><span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]:</span> <span class=\"o\">%</span><span class=\"n\">config</span> <span class=\"n\">SqlMagic</span>\n<span class=\"n\">SqlMagic</span> <span class=\"n\">options</span>\n<span class=\"o\">--------------</span>\n<span class=\"n\">SqlMagic</span><span class=\"o\">.</span><span class=\"n\">autocommit</span><span class=\"o\">=&lt;</span><span class=\"n\">Bool</span><span class=\"o\">&gt;</span>\n    <span class=\"n\">Current</span><span class=\"p\">:</span> <span class=\"kc\">True</span>\n    <span class=\"n\">Set</span> <span class=\"n\">autocommit</span> <span class=\"n\">mode</span>\n<span class=\"n\">SqlMagic</span><span class=\"o\">.</span><span class=\"n\">autolimit</span><span class=\"o\">=&lt;</span><span class=\"n\">Int</span><span class=\"o\">&gt;</span>\n    <span class=\"n\">Current</span><span class=\"p\">:</span> <span class=\"mi\">0</span>\n    <span class=\"n\">Automatically</span> <span class=\"n\">limit</span> <span class=\"n\">the</span> <span class=\"n\">size</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">returned</span> <span class=\"n\">result</span> <span class=\"n\">sets</span>\n<span class=\"n\">SqlMagic</span><span class=\"o\">.</span><span class=\"n\">autopandas</span><span class=\"o\">=&lt;</span><span class=\"n\">Bool</span><span class=\"o\">&gt;</span>\n    <span class=\"n\">Current</span><span class=\"p\">:</span> <span class=\"kc\">False</span>\n    <span class=\"n\">Return</span> <span class=\"n\">Pandas</span> <span class=\"n\">DataFrames</span> <span class=\"n\">instead</span> <span class=\"n\">of</span> <span class=\"n\">regular</span> <span class=\"n\">result</span> <span class=\"n\">sets</span>\n<span class=\"n\">SqlMagic</span><span class=\"o\">.</span><span class=\"n\">displaylimit</span><span class=\"o\">=&lt;</span><span class=\"n\">Int</span><span class=\"o\">&gt;</span>\n    <span class=\"n\">Current</span><span class=\"p\">:</span> <span class=\"mi\">0</span>\n    <span class=\"n\">Automatically</span> <span class=\"n\">limit</span> <span class=\"n\">the</span> <span class=\"n\">number</span> <span class=\"n\">of</span> <span class=\"n\">rows</span> <span class=\"n\">displayed</span> <span class=\"p\">(</span><span class=\"n\">full</span> <span class=\"n\">result</span> <span class=\"nb\">set</span> <span class=\"ow\">is</span> <span class=\"n\">still</span>\n    <span class=\"n\">stored</span><span class=\"p\">)</span>\n<span class=\"n\">SqlMagic</span><span class=\"o\">.</span><span class=\"n\">feedback</span><span class=\"o\">=&lt;</span><span class=\"n\">Bool</span><span class=\"o\">&gt;</span>\n    <span class=\"n\">Current</span><span class=\"p\">:</span> <span class=\"kc\">True</span>\n    <span class=\"n\">Print</span> <span class=\"n\">number</span> <span class=\"n\">of</span> <span class=\"n\">rows</span> <span class=\"n\">affected</span> <span class=\"n\">by</span> <span class=\"n\">DML</span>\n<span class=\"n\">SqlMagic</span><span class=\"o\">.</span><span class=\"n\">short_errors</span><span class=\"o\">=&lt;</span><span class=\"n\">Bool</span><span class=\"o\">&gt;</span>\n    <span class=\"n\">Current</span><span class=\"p\">:</span> <span class=\"kc\">True</span>\n    <span class=\"n\">Don</span><span class=\"s1\">'t display the full traceback on SQL Programming Error</span>\n<span class=\"n\">SqlMagic</span><span class=\"o\">.</span><span class=\"n\">style</span><span class=\"o\">=&lt;</span><span class=\"n\">Unicode</span><span class=\"o\">&gt;</span>\n    <span class=\"n\">Current</span><span class=\"p\">:</span> <span class=\"s1\">'DEFAULT'</span>\n    <span class=\"n\">Set</span> <span class=\"n\">the</span> <span class=\"n\">table</span> <span class=\"n\">printing</span> <span class=\"n\">style</span> <span class=\"n\">to</span> <span class=\"nb\">any</span> <span class=\"n\">of</span> <span class=\"n\">prettytable</span><span class=\"s1\">'s defined styles</span>\n    <span class=\"p\">(</span><span class=\"n\">currently</span> <span class=\"n\">DEFAULT</span><span class=\"p\">,</span> <span class=\"n\">MSWORD_FRIENDLY</span><span class=\"p\">,</span> <span class=\"n\">PLAIN_COLUMNS</span><span class=\"p\">,</span> <span class=\"n\">RANDOM</span><span class=\"p\">)</span>\n\n<span class=\"n\">In</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]:</span> <span class=\"o\">%</span><span class=\"n\">config</span> <span class=\"n\">SqlMagic</span><span class=\"o\">.</span><span class=\"n\">feedback</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n</pre>\n<p>Please note: if you have autopandas set to true, the displaylimit option will not apply. You can set the pandas display limit by using the pandas <tt>max_rows</tt> option as described in the <a href=\"http://pandas.pydata.org/pandas-docs/version/0.18.1/options.html#frequently-used-options\" rel=\"nofollow\">pandas documentation</a>.</p>\n</div>\n<div id=\"pandas\">\n<h2>Pandas</h2>\n<p>If you have installed <tt>pandas</tt>, you can use a result set\u2019s\n<tt>.DataFrame()</tt> method</p>\n<pre><span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]:</span> <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"o\">%</span><span class=\"n\">sql</span> <span class=\"n\">SELECT</span> <span class=\"o\">*</span> <span class=\"n\">FROM</span> <span class=\"n\">character</span> <span class=\"n\">WHERE</span> <span class=\"n\">speechcount</span> <span class=\"o\">&gt;</span> <span class=\"mi\">25</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]:</span> <span class=\"n\">dataframe</span> <span class=\"o\">=</span> <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">()</span>\n</pre>\n<p>The bogus non-standard pseudo-SQL command <tt>PERSIST</tt> will create a table name\nin the database from the named DataFrame.</p>\n<pre><span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">]:</span> <span class=\"o\">%</span><span class=\"n\">sql</span> <span class=\"n\">PERSIST</span> <span class=\"n\">dataframe</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"p\">]:</span> <span class=\"o\">%</span><span class=\"n\">sql</span> <span class=\"n\">SELECT</span> <span class=\"o\">*</span> <span class=\"n\">FROM</span> <span class=\"n\">dataframe</span><span class=\"p\">;</span>\n</pre>\n</div>\n<div id=\"graphing\">\n<h2>Graphing</h2>\n<p>If you have installed <tt>matplotlib</tt>, you can use a result set\u2019s\n<tt>.plot()</tt>, <tt>.pie()</tt>, and <tt>.bar()</tt> methods for quick plotting</p>\n<pre><span class=\"n\">In</span><span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">]:</span> <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"o\">%</span><span class=\"n\">sql</span> <span class=\"n\">SELECT</span> <span class=\"n\">title</span><span class=\"p\">,</span> <span class=\"n\">totalwords</span> <span class=\"n\">FROM</span> <span class=\"n\">work</span> <span class=\"n\">WHERE</span> <span class=\"n\">genretype</span> <span class=\"o\">=</span> <span class=\"s1\">'c'</span>\n\n<span class=\"n\">In</span><span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"p\">]:</span> <span class=\"o\">%</span><span class=\"n\">matplotlib</span> <span class=\"n\">inline</span>\n\n<span class=\"n\">In</span><span class=\"p\">[</span><span class=\"mi\">7</span><span class=\"p\">]:</span> <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">pie</span><span class=\"p\">()</span>\n</pre>\n<img alt=\"pie chart of word count of Shakespeare's comedies\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4fc51d9544dff20f44fe967a979c0d5089105ad0/68747470733a2f2f7261772e6769746875622e636f6d2f636174686572696e656465766c696e2f69707974686f6e2d73716c2f6d61737465722f6578616d706c65732f776f7264636f756e742e706e67\">\n</div>\n<div id=\"dumping\">\n<h2>Dumping</h2>\n<p>Result sets come with a <tt>.csv(filename=None)</tt> method.  This generates\ncomma-separated text either as a return value (if <tt>filename</tt> is not\nspecified) or in a file of the given name.</p>\n<pre><span class=\"n\">In</span><span class=\"p\">[</span><span class=\"mi\">8</span><span class=\"p\">]:</span> <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"o\">%</span><span class=\"n\">sql</span> <span class=\"n\">SELECT</span> <span class=\"n\">title</span><span class=\"p\">,</span> <span class=\"n\">totalwords</span> <span class=\"n\">FROM</span> <span class=\"n\">work</span> <span class=\"n\">WHERE</span> <span class=\"n\">genretype</span> <span class=\"o\">=</span> <span class=\"s1\">'c'</span>\n\n<span class=\"n\">In</span><span class=\"p\">[</span><span class=\"mi\">9</span><span class=\"p\">]:</span> <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">csv</span><span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"o\">=</span><span class=\"s1\">'work.csv'</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"postgresql-features\">\n<h2>PostgreSQL features</h2>\n<p><tt>psql</tt>-style \u201cbackslash\u201d <a href=\"https://www.postgresql.org/docs/9.6/static/app-psql.html#APP-PSQL-META-COMMANDS\" rel=\"nofollow\">meta-commands</a> commands (<tt>\\d</tt>, <tt>\\dt</tt>, etc.)\nare provided by <a href=\"https://pypi.python.org/pypi/pgspecial\" rel=\"nofollow\">PGSpecial</a>.  Example:</p>\n<pre><span class=\"n\">In</span><span class=\"p\">[</span><span class=\"mi\">9</span><span class=\"p\">]:</span> <span class=\"o\">%</span><span class=\"n\">sql</span> \\<span class=\"n\">d</span>\n</pre>\n</div>\n<div id=\"installing\">\n<h2>Installing</h2>\n<p>Install the lastest release with:</p>\n<pre>pip install ipython-sql\n</pre>\n<p>or download from <a href=\"https://github.com/catherinedevlin/ipython-sql\" rel=\"nofollow\">https://github.com/catherinedevlin/ipython-sql</a> and:</p>\n<pre>cd ipython-sql\nsudo python setup.py install\n</pre>\n</div>\n<div id=\"development\">\n<h2>Development</h2>\n<p><a href=\"https://github.com/catherinedevlin/ipython-sql\" rel=\"nofollow\">https://github.com/catherinedevlin/ipython-sql</a></p>\n</div>\n<div id=\"credits\">\n<h2>Credits</h2>\n<ul>\n<li>Matthias Bussonnier for help with configuration</li>\n<li>Olivier Le Thanh Duong for <tt>%config</tt> fixes and improvements</li>\n<li><a href=\"http://pypi.python.org/pypi/distribute\" rel=\"nofollow\">Distribute</a></li>\n<li><a href=\"http://www.buildout.org/\" rel=\"nofollow\">Buildout</a></li>\n<li><a href=\"http://pypi.python.org/pypi/modern-package-template\" rel=\"nofollow\">modern-package-template</a></li>\n<li>Mike Wilson for bind variable code</li>\n<li>Thomas Kluyver and Steve Holden for debugging help</li>\n<li>Berton Earnshaw for DSN connection syntax</li>\n<li>Andr\u00e9s Celis for SQL Server bugfix</li>\n<li>Michael Erasmus for DataFrame truth bugfix</li>\n<li>Noam Finkelstein for README clarification</li>\n<li>Xiaochuan Yu for <cite>&lt;&lt;</cite> operator, syntax colorization</li>\n<li>Amjith Ramanujam for PGSpecial and incorporating it here</li>\n</ul>\n<div id=\"news\">\n<h3>News</h3>\n</div>\n</div>\n<div id=\"id2\">\n<h2>0.1</h2>\n<p><em>Release date: 21-Mar-2013</em></p>\n<ul>\n<li>Initial release</li>\n</ul>\n</div>\n<div id=\"id3\">\n<h2>0.1.1</h2>\n<p><em>Release date: 29-Mar-2013</em></p>\n<ul>\n<li>Release to PyPI</li>\n<li>Results returned as lists</li>\n<li>print(_) to get table form in text console</li>\n<li>set autolimit and text wrap in configuration</li>\n</ul>\n</div>\n<div id=\"id4\">\n<h2>0.1.2</h2>\n<p><em>Release date: 29-Mar-2013</em></p>\n<ul>\n<li>Python 3 compatibility</li>\n<li>use prettyprint package</li>\n<li>allow multiple SQL per cell</li>\n</ul>\n</div>\n<div id=\"id5\">\n<h2>0.2.0</h2>\n<p><em>Release date: 30-May-2013</em></p>\n<ul>\n<li>Accept bind variables (Thanks Mike Wilson!)</li>\n</ul>\n</div>\n<div id=\"id6\">\n<h2>0.2.1</h2>\n<p><em>Release date: 15-June-2013</em></p>\n<ul>\n<li>Recognize socket connection strings</li>\n<li>Bugfix - issue 4 (remember existing connections by case)</li>\n</ul>\n</div>\n<div id=\"id7\">\n<h2>0.2.2</h2>\n<p><em>Release date: 30-July-2013</em></p>\n<p>Converted from an IPython Plugin to an Extension for 1.0 compatibility</p>\n</div>\n<div id=\"id8\">\n<h2>0.2.2.1</h2>\n<p><em>Release date: 01-Aug-2013</em></p>\n<p>Deleted Plugin import left behind in 0.2.2</p>\n</div>\n<div id=\"id9\">\n<h2>0.2.3</h2>\n<p><em>Release date: 20-Sep-2013</em></p>\n<ul>\n<li>Contributions from Olivier Le Thanh Duong:<ul>\n<li>SQL errors reported without internal IPython error stack</li>\n<li>Proper handling of configuration</li>\n</ul>\n</li>\n<li>Added .DataFrame(), .pie(), .plot(), and .bar() methods to\nresult sets</li>\n</ul>\n</div>\n<div id=\"id10\">\n<h2>0.3.0</h2>\n<p><em>Release date: 13-Oct-2013</em></p>\n<ul>\n<li>displaylimit config parameter</li>\n<li>reports number of rows affected by each query</li>\n<li>test suite working again</li>\n<li>dict-style access for result sets by primary key</li>\n</ul>\n</div>\n<div id=\"id11\">\n<h2>0.3.1</h2>\n<ul>\n<li>Reporting of number of rows affected configurable with <tt>feedback</tt></li>\n<li>Local variables usable as SQL bind variables</li>\n</ul>\n</div>\n<div id=\"id12\">\n<h2>0.3.2</h2>\n<ul>\n<li><tt>.csv(filename=None)</tt> method added to result sets</li>\n</ul>\n</div>\n<div id=\"id13\">\n<h2>0.3.3</h2>\n<ul>\n<li>Python 3 compatibility restored</li>\n<li>DSN access supported (thanks Berton Earnshaw)</li>\n</ul>\n</div>\n<div id=\"id14\">\n<h2>0.3.4</h2>\n<ul>\n<li>PERSIST pseudo-SQL command added</li>\n</ul>\n</div>\n<div id=\"id15\">\n<h2>0.3.5</h2>\n<ul>\n<li>Indentations visible in HTML cells</li>\n<li>COMMIT each SQL statement immediately - prevent locks</li>\n</ul>\n</div>\n<div id=\"id16\">\n<h2>0.3.6</h2>\n<ul>\n<li>Fixed issue #30, commit failures for sqlite (thanks stonebig, jandot)</li>\n</ul>\n</div>\n<div id=\"id17\">\n<h2>0.3.7</h2>\n<ul>\n<li>New <cite>column_local_vars</cite> config option submitted by darikg</li>\n<li>Avoid contaminating user namespace from locals (thanks alope107)</li>\n</ul>\n</div>\n<div id=\"id18\">\n<h2>0.3.7.1</h2>\n<ul>\n<li>Avoid \u201cconnection busy\u201d error for SQL Server (thanks Andr\u00e9s Celis)</li>\n</ul>\n</div>\n<div id=\"id19\">\n<h2>0.3.8</h2>\n<ul>\n<li>Stop warnings for deprecated use of IPython 3 traitlets in IPython 4 (thanks graphaelli; also stonebig, aebrahim, mccahill)</li>\n<li>README update for keeping connection info private, from eshilts</li>\n</ul>\n</div>\n<div id=\"id20\">\n<h2>0.3.9</h2>\n<ul>\n<li>Fix truth value of DataFrame error (thanks michael-erasmus)</li>\n<li><cite>&lt;&lt;</cite> operator (thanks xiaochuanyu)</li>\n<li>added README example (thanks tanhuil)</li>\n<li>bugfix in executing column_local_vars (thanks tebeka)</li>\n<li>pgspecial installation optional (thanks jstoebel and arjoe)</li>\n<li>conceal passwords in connection strings (thanks jstoebel)</li>\n</ul>\n</div>\n<div id=\"id21\">\n<h2>0.3.9</h2>\n<ul>\n<li>Restored Python 2 compatibility (thanks tokenmathguy)</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 6389108, "releases": {"0.3.9": [{"comment_text": "", "digests": {"md5": "025b3bb28ef3cf1af66c3c09ebf34441", "sha256": "e4dbc44cf722b9d627324d5f4770ce15b37465766d5f2de5297d4b76ec196d71"}, "downloads": -1, "filename": "ipython-sparksql-0.3.9.tar.gz", "has_sig": false, "md5_digest": "025b3bb28ef3cf1af66c3c09ebf34441", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19245, "upload_time": "2020-01-03T02:10:46", "upload_time_iso_8601": "2020-01-03T02:10:46.982178Z", "url": "https://files.pythonhosted.org/packages/24/1c/e799b5ee8a5d1331546bef82df5fb56a99d885dc5e939278492e8302ef66/ipython-sparksql-0.3.9.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "025b3bb28ef3cf1af66c3c09ebf34441", "sha256": "e4dbc44cf722b9d627324d5f4770ce15b37465766d5f2de5297d4b76ec196d71"}, "downloads": -1, "filename": "ipython-sparksql-0.3.9.tar.gz", "has_sig": false, "md5_digest": "025b3bb28ef3cf1af66c3c09ebf34441", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19245, "upload_time": "2020-01-03T02:10:46", "upload_time_iso_8601": "2020-01-03T02:10:46.982178Z", "url": "https://files.pythonhosted.org/packages/24/1c/e799b5ee8a5d1331546bef82df5fb56a99d885dc5e939278492e8302ef66/ipython-sparksql-0.3.9.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:54:23 2020"}