{"info": {"author": "Jay Young(yjmade)", "author_email": "dev@yjmade.net", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: ISC License (ISCL)", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5"], "description": "django-errorlog\n===============\n\nDjango reuseable app to collect the unexpcted exception then generate\ncomprehansive report just like what you get in debug mode and store in\ndatabase\n\nIntroduction\n============\n\nDjango has it's own error handling machanism, which will send a email to\nthe admin address configed in the settings. It works but there are some\nshortage.\n\n1. The stack trace include in the email is as same as what you can see\n   in console. It doesn't contains the varible value which can be very\n   useful to debug.\n\n2. Incovinient to trace the errors, it's a email, hard to catoegorized,\n   and hard to track the status.\n3. Some times one same error will bring you thousands of emails if this\n   api happens to be visit a lot. You will waste a lot of time to find\n   the different errors from the error happens most.\n\nThis module solves these problem in the following way.\n\n1. We are love the Django buildin debug 500 page, it's contains almost\n   all the information we need to debug, like the request infomation,\n   the user, the settings, the stack trace with local vars, etc. So what\n   we do, is to have a middleware to capture the unhandle exception then\n   simply invoke the Django buildin reporter class to generate the full\n   html report of the exception, then store in the database.\n2. Each error item have the field to record a. fixed b. vcs\n   version(support hg and git), you can ``ignore`` it after this bug has\n   been addressed. Then it will gone from the ``unfixed_error`` list.\n3. Errors will be categoried by the type of exception and the location\n   where the exception been raised (location means the python file path\n   and the method name). So in most case, same error that happened\n   multiple times will be showed only once but with the count of how\n   many times it's happend. Then when the error been ignore, all the\n   same error will been marked as ignored.\n\nThis Module has been running in my company's website for more than 1\nyear and helps to solved thousands of bugs.\n\nChange Logs\n===========\n\n2016-12-04: 0.1.0 Initial submit. Split the code from the online\nproject. Write the documents, and add the tests.\n\nInstall\n=======\n\n.. code:: bash\n\n    pip install django-errorlog\n\nThen modify the settings\n\n1. add ``errorlog`` in the INSTALLED\\_APPS\n2. if you are using django>=1.10, insert\n   ``errorlog.middlewares.ErrorLogMiddleware`` in the ``MIDDLEWARES`` at\n   the first line.\n3. (optional) if you have your django project live inside a VCS(hg or\n   git), set ``VCS_SYSTEM = \"hg\"`` or ``VCS_SYSTEM = \"git\"`` to enable\n   the erro rev tracking.\n\nThen do ``python manage.py migrate`` to setup the database table.\n\nThen when your views get an 500 error, there will be a new log item\nstored.\n\nUsage\n=====\n\nbuildin shell command\n---------------------\n\n.. code:: python\n\n    >>> from errorlog.models import Error\n    >>> Error.unfixed_errors\n    {0: <Error:     1 - /test/2/ - ValueError: A>,\n     1: <Error:     4 - /test/1/ - ValueError: B>}\n    >>> error = Error.unfixed_errors[1]\n    >>> error\n     1: <Error:     4 - /test/1/ - ValueError: B>\n    >>> # in this repr, the first number is the index to make it easy to select; \n    >>> # the second number 4 is the the count of the same error happened;\n    >>> # /test/1/ is the uri of the api;\n    >>> # ValueError is the exception type; \n    >>> # B is the args in the exception.\n    >>> error.vcs_rev # the git/hg version of error, for hg, it's the incremental number that is orderable\n    \"1\"\n    >>> error.ignore() # this command ignore the whole 4 error logs\n\nDjango admin\n------------\n\nIf you use django buildin admin, you should be able to find the Error in\nthe home page.\n\nIf you want to see the html error report, you need to build the view\nyouself to transfer the error\\_html to the browser.\n\nAdvance Usage\n-------------\n\nYou can use Error.log\\_exception to log one specific error in one\ncertain scope.\n\n.. code:: python\n\n    from errorlog.models import Error\n    with Error.log_exception(\"name\", reraise=False):\n        do_something_here()\n\nIf ``reraise = True``, then after being loged, the exception will keep\nraising out. Caution, if you have database atomic open, since unhandle\nerror will make django to rollback the transaction, so this log will\nalso been rollbacked.\n\nIf ``reraise = False``, then it will log the exception then stop\npropogation and continue to run the following code. It's as same as the\nfollowing code\n\n.. code:: python\n\n    try:\n        do_something_here()\n    except Exception as e:\n        pass\n\nHere is an example of how I using it\n\n.. code:: python\n\n    with Error.log_exception(\"send_email_through_mailgun\", reraise=False):\n        response=requests.post(url,parms)\n        content=response.content\n        status_code=response.status_code\n        if status_code!=200:\n            raise ValueError(\"Mailgun failed\")\n    other_stuff()\n\nSo that I can capture when the mailgun's api return an error, and keep\nthe stuff going.\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/yjmade/django-errorlog", "keywords": "django error log report", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "django-errorlog", "package_url": "https://pypi.org/project/django-errorlog/", "platform": "", "project_url": "https://pypi.org/project/django-errorlog/", "project_urls": {"Homepage": "https://github.com/yjmade/django-errorlog"}, "release_url": "https://pypi.org/project/django-errorlog/0.1.1/", "requires_dist": null, "requires_python": "", "summary": "Django reuseable app to collect the unexpcted exception then generate comprehansive report just like what you get in debug mode and store in database", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"django-errorlog\">\n<h2>django-errorlog</h2>\n<p>Django reuseable app to collect the unexpcted exception then generate\ncomprehansive report just like what you get in debug mode and store in\ndatabase</p>\n</div>\n<div id=\"introduction\">\n<h2>Introduction</h2>\n<p>Django has it\u2019s own error handling machanism, which will send a email to\nthe admin address configed in the settings. It works but there are some\nshortage.</p>\n<ol>\n<li>The stack trace include in the email is as same as what you can see\nin console. It doesn\u2019t contains the varible value which can be very\nuseful to debug.</li>\n<li>Incovinient to trace the errors, it\u2019s a email, hard to catoegorized,\nand hard to track the status.</li>\n<li>Some times one same error will bring you thousands of emails if this\napi happens to be visit a lot. You will waste a lot of time to find\nthe different errors from the error happens most.</li>\n</ol>\n<p>This module solves these problem in the following way.</p>\n<ol>\n<li>We are love the Django buildin debug 500 page, it\u2019s contains almost\nall the information we need to debug, like the request infomation,\nthe user, the settings, the stack trace with local vars, etc. So what\nwe do, is to have a middleware to capture the unhandle exception then\nsimply invoke the Django buildin reporter class to generate the full\nhtml report of the exception, then store in the database.</li>\n<li>Each error item have the field to record a. fixed b. vcs\nversion(support hg and git), you can <tt>ignore</tt> it after this bug has\nbeen addressed. Then it will gone from the <tt>unfixed_error</tt> list.</li>\n<li>Errors will be categoried by the type of exception and the location\nwhere the exception been raised (location means the python file path\nand the method name). So in most case, same error that happened\nmultiple times will be showed only once but with the count of how\nmany times it\u2019s happend. Then when the error been ignore, all the\nsame error will been marked as ignored.</li>\n</ol>\n<p>This Module has been running in my company\u2019s website for more than 1\nyear and helps to solved thousands of bugs.</p>\n</div>\n<div id=\"change-logs\">\n<h2>Change Logs</h2>\n<p>2016-12-04: 0.1.0 Initial submit. Split the code from the online\nproject. Write the documents, and add the tests.</p>\n</div>\n<div id=\"install\">\n<h2>Install</h2>\n<pre>pip install django-errorlog\n</pre>\n<p>Then modify the settings</p>\n<ol>\n<li>add <tt>errorlog</tt> in the INSTALLED_APPS</li>\n<li>if you are using django&gt;=1.10, insert\n<tt>errorlog.middlewares.ErrorLogMiddleware</tt> in the <tt>MIDDLEWARES</tt> at\nthe first line.</li>\n<li>(optional) if you have your django project live inside a VCS(hg or\ngit), set <tt>VCS_SYSTEM = \"hg\"</tt> or <tt>VCS_SYSTEM = \"git\"</tt> to enable\nthe erro rev tracking.</li>\n</ol>\n<p>Then do <tt>python manage.py migrate</tt> to setup the database table.</p>\n<p>Then when your views get an 500 error, there will be a new log item\nstored.</p>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<div id=\"buildin-shell-command\">\n<h3>buildin shell command</h3>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">errorlog.models</span> <span class=\"kn\">import</span> <span class=\"n\">Error</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Error</span><span class=\"o\">.</span><span class=\"n\">unfixed_errors</span>\n<span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">Error</span><span class=\"p\">:</span>     <span class=\"mi\">1</span> <span class=\"o\">-</span> <span class=\"o\">/</span><span class=\"n\">test</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"o\">/</span> <span class=\"o\">-</span> <span class=\"ne\">ValueError</span><span class=\"p\">:</span> <span class=\"n\">A</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n <span class=\"mi\">1</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">Error</span><span class=\"p\">:</span>     <span class=\"mi\">4</span> <span class=\"o\">-</span> <span class=\"o\">/</span><span class=\"n\">test</span><span class=\"o\">/</span><span class=\"mi\">1</span><span class=\"o\">/</span> <span class=\"o\">-</span> <span class=\"ne\">ValueError</span><span class=\"p\">:</span> <span class=\"n\">B</span><span class=\"o\">&gt;</span><span class=\"p\">}</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">error</span> <span class=\"o\">=</span> <span class=\"n\">Error</span><span class=\"o\">.</span><span class=\"n\">unfixed_errors</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">error</span>\n <span class=\"mi\">1</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">Error</span><span class=\"p\">:</span>     <span class=\"mi\">4</span> <span class=\"o\">-</span> <span class=\"o\">/</span><span class=\"n\">test</span><span class=\"o\">/</span><span class=\"mi\">1</span><span class=\"o\">/</span> <span class=\"o\">-</span> <span class=\"ne\">ValueError</span><span class=\"p\">:</span> <span class=\"n\">B</span><span class=\"o\">&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># in this repr, the first number is the index to make it easy to select;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># the second number 4 is the the count of the same error happened;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># /test/1/ is the uri of the api;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># ValueError is the exception type;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># B is the args in the exception.</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">error</span><span class=\"o\">.</span><span class=\"n\">vcs_rev</span> <span class=\"c1\"># the git/hg version of error, for hg, it's the incremental number that is orderable</span>\n<span class=\"s2\">\"1\"</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">error</span><span class=\"o\">.</span><span class=\"n\">ignore</span><span class=\"p\">()</span> <span class=\"c1\"># this command ignore the whole 4 error logs</span>\n</pre>\n</div>\n<div id=\"django-admin\">\n<h3>Django admin</h3>\n<p>If you use django buildin admin, you should be able to find the Error in\nthe home page.</p>\n<p>If you want to see the html error report, you need to build the view\nyouself to transfer the error_html to the browser.</p>\n</div>\n<div id=\"advance-usage\">\n<h3>Advance Usage</h3>\n<p>You can use Error.log_exception to log one specific error in one\ncertain scope.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">errorlog.models</span> <span class=\"kn\">import</span> <span class=\"n\">Error</span>\n<span class=\"k\">with</span> <span class=\"n\">Error</span><span class=\"o\">.</span><span class=\"n\">log_exception</span><span class=\"p\">(</span><span class=\"s2\">\"name\"</span><span class=\"p\">,</span> <span class=\"n\">reraise</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n    <span class=\"n\">do_something_here</span><span class=\"p\">()</span>\n</pre>\n<p>If <tt>reraise = True</tt>, then after being loged, the exception will keep\nraising out. Caution, if you have database atomic open, since unhandle\nerror will make django to rollback the transaction, so this log will\nalso been rollbacked.</p>\n<p>If <tt>reraise = False</tt>, then it will log the exception then stop\npropogation and continue to run the following code. It\u2019s as same as the\nfollowing code</p>\n<pre><span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"n\">do_something_here</span><span class=\"p\">()</span>\n<span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n    <span class=\"k\">pass</span>\n</pre>\n<p>Here is an example of how I using it</p>\n<pre><span class=\"k\">with</span> <span class=\"n\">Error</span><span class=\"o\">.</span><span class=\"n\">log_exception</span><span class=\"p\">(</span><span class=\"s2\">\"send_email_through_mailgun\"</span><span class=\"p\">,</span> <span class=\"n\">reraise</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n    <span class=\"n\">response</span><span class=\"o\">=</span><span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">post</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">,</span><span class=\"n\">parms</span><span class=\"p\">)</span>\n    <span class=\"n\">content</span><span class=\"o\">=</span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">content</span>\n    <span class=\"n\">status_code</span><span class=\"o\">=</span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">status_code</span>\n    <span class=\"k\">if</span> <span class=\"n\">status_code</span><span class=\"o\">!=</span><span class=\"mi\">200</span><span class=\"p\">:</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s2\">\"Mailgun failed\"</span><span class=\"p\">)</span>\n<span class=\"n\">other_stuff</span><span class=\"p\">()</span>\n</pre>\n<p>So that I can capture when the mailgun\u2019s api return an error, and keep\nthe stuff going.</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 2500327, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "a9b471588b69e381801ea656a3cbf778", "sha256": "be14b6d48b6d9545fa892c7536e1f25770e7649cc768b3f4144238b2db26078e"}, "downloads": -1, "filename": "django-errorlog-0.1.0.tar.gz", "has_sig": false, "md5_digest": "a9b471588b69e381801ea656a3cbf778", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7123, "upload_time": "2016-12-04T14:20:59", "upload_time_iso_8601": "2016-12-04T14:20:59.919318Z", "url": "https://files.pythonhosted.org/packages/8c/e4/cabece9795cf64eebb4e3e1f6863df9fbd74c0434ebb93bb1dfb467c6cc5/django-errorlog-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "58d3e8e71fee00c3640e1d80ad45d060", "sha256": "c0c2c9a76f0c5406841b5125f210602969f4e5a993194617b01afee2a2b75c20"}, "downloads": -1, "filename": "django-errorlog-0.1.1.tar.gz", "has_sig": false, "md5_digest": "58d3e8e71fee00c3640e1d80ad45d060", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13257, "upload_time": "2016-12-05T13:53:14", "upload_time_iso_8601": "2016-12-05T13:53:14.246279Z", "url": "https://files.pythonhosted.org/packages/ae/08/4f9e97a2c3bcba20864cc43e78a3094b7364af004135b85d3c9da96911b8/django-errorlog-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "58d3e8e71fee00c3640e1d80ad45d060", "sha256": "c0c2c9a76f0c5406841b5125f210602969f4e5a993194617b01afee2a2b75c20"}, "downloads": -1, "filename": "django-errorlog-0.1.1.tar.gz", "has_sig": false, "md5_digest": "58d3e8e71fee00c3640e1d80ad45d060", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13257, "upload_time": "2016-12-05T13:53:14", "upload_time_iso_8601": "2016-12-05T13:53:14.246279Z", "url": "https://files.pythonhosted.org/packages/ae/08/4f9e97a2c3bcba20864cc43e78a3094b7364af004135b85d3c9da96911b8/django-errorlog-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:36:19 2020"}