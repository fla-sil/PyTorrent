{"info": {"author": "Vladimir Keleshev", "author_email": "vladimir@keleshev.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 2.5", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.2", "Programming Language :: Python :: 3.3", "Topic :: Utilities"], "description": "Implementation of Value Object Pattern for Python\n=================================================\n\n`From Wikipedia <http://en.wikipedia.org/wiki/Value_object>`_:\n\n  A **value object** is a small object that represents a\n  simple entity whose equality isn't based on identity: i.e.\n  two value objects are equal when they have the same value,\n  not necessarily being the same object.\n\nBy default (if you subclass from ``object``) Python follows\n\"reference semantics\", i.e. two objects are equal if they\nare the same instance.  ``Value`` class implements \"value\nsemantics\", i.e. if you subclass it your objects will be\nequall if they hold the same data.\n\nThis implementation will also inspect your ``__init__``\nsignature to automatically assign instance variables and\nproduce a nice ``__repr__`` for your objects, dogether with\na suitable ``__hash__`` implementation.\n\nInstead of asigning each instance variable manually:\n\n.. code:: python\n\n    >>> class Date(object):\n    ...\n    ...     def __init__(self, year, month=1, day=1):\n    ...         self.year = year\n    ...         self.month = month\n    ...         self.day = day\n\n``Value`` defines ``__new__`` that will look at your\n``__init__`` signature and assign instance variables based\non it:\n\n.. code:: python\n\n    >>> from value import Value\n    ...\n    >>> class Date(Value):\n    ...\n    ...     def __init__(self, year, month=1, day=1):\n    ...         pass\n    ...\n    >>> Date(2013, 3).year == 2013\n    True\n    >>> Date(2013, 3).month == 3\n    True\n    >>> Date(2013, 3).day == 1\n    True\n\n``Value`` defines ``__eq__`` and ``__ne__`` to implement\nvalue object semantics, i.e. objects holding the same data\nare compared equal:\n\n.. code:: python\n\n    >>> Date(2013, 3, 18) == Date(2013, 3, 18)\n    True\n    >>> Date(2013, 3, 18) != Date(1988)\n    True\n\n``Value`` also defines ``__repr__`` for you based on\n``__init__`` signature:\n\n.. code:: python\n\n    >>> repr(Date(2013, 3, 18))\n    'Date(2013, 3, 18)'\n    >>> repr(Date(1988, 1, 1))\n    'Date(1988)'\n\n``Value`` also defines ``__hash__`` for you, so that\ninstances could be used in sets and as dictionary keys.\n\nInstallation\n------------------------------------------------------------\n\nUse `pip <http://pip-installer.org>`_ or easy_install::\n\n    pip install value==0.1.0\n\nAlternatively, you can just drop ``value.py`` file into your\nproject\u2014it is self-contained.\n\n- **value** is tested with Python 2.6, 2.7, 3.2, 3.3 and PyPy.\n- **value** follows `semantic versioning <http://semver.org>`_.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/halst/value", "keywords": "value object pattern", "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "value", "package_url": "https://pypi.org/project/value/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/value/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://github.com/halst/value"}, "release_url": "https://pypi.org/project/value/0.1.0/", "requires_dist": null, "requires_python": null, "summary": "Implementation of Value Object pattern", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"http://en.wikipedia.org/wiki/Value_object\" rel=\"nofollow\">From Wikipedia</a>:</p>\n<blockquote>\nA <strong>value object</strong> is a small object that represents a\nsimple entity whose equality isn\u2019t based on identity: i.e.\ntwo value objects are equal when they have the same value,\nnot necessarily being the same object.</blockquote>\n<p>By default (if you subclass from <tt>object</tt>) Python follows\n\u201creference semantics\u201d, i.e. two objects are equal if they\nare the same instance.  <tt>Value</tt> class implements \u201cvalue\nsemantics\u201d, i.e. if you subclass it your objects will be\nequall if they hold the same data.</p>\n<p>This implementation will also inspect your <tt>__init__</tt>\nsignature to automatically assign instance variables and\nproduce a nice <tt>__repr__</tt> for your objects, dogether with\na suitable <tt>__hash__</tt> implementation.</p>\n<p>Instead of asigning each instance variable manually:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">class</span> <span class=\"nc\">Date</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>\n<span class=\"o\">...</span>     <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">year</span><span class=\"p\">,</span> <span class=\"n\">month</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">day</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>         <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">year</span> <span class=\"o\">=</span> <span class=\"n\">year</span>\n<span class=\"o\">...</span>         <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">month</span> <span class=\"o\">=</span> <span class=\"n\">month</span>\n<span class=\"o\">...</span>         <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">day</span> <span class=\"o\">=</span> <span class=\"n\">day</span>\n</pre>\n<p><tt>Value</tt> defines <tt>__new__</tt> that will look at your\n<tt>__init__</tt> signature and assign instance variables based\non it:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">value</span> <span class=\"kn\">import</span> <span class=\"n\">Value</span>\n<span class=\"o\">...</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">class</span> <span class=\"nc\">Date</span><span class=\"p\">(</span><span class=\"n\">Value</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>\n<span class=\"o\">...</span>     <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">year</span><span class=\"p\">,</span> <span class=\"n\">month</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">day</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>         <span class=\"k\">pass</span>\n<span class=\"o\">...</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Date</span><span class=\"p\">(</span><span class=\"mi\">2013</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">year</span> <span class=\"o\">==</span> <span class=\"mi\">2013</span>\n<span class=\"kc\">True</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Date</span><span class=\"p\">(</span><span class=\"mi\">2013</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">month</span> <span class=\"o\">==</span> <span class=\"mi\">3</span>\n<span class=\"kc\">True</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Date</span><span class=\"p\">(</span><span class=\"mi\">2013</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">day</span> <span class=\"o\">==</span> <span class=\"mi\">1</span>\n<span class=\"kc\">True</span>\n</pre>\n<p><tt>Value</tt> defines <tt>__eq__</tt> and <tt>__ne__</tt> to implement\nvalue object semantics, i.e. objects holding the same data\nare compared equal:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Date</span><span class=\"p\">(</span><span class=\"mi\">2013</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">18</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">Date</span><span class=\"p\">(</span><span class=\"mi\">2013</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">18</span><span class=\"p\">)</span>\n<span class=\"kc\">True</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Date</span><span class=\"p\">(</span><span class=\"mi\">2013</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">18</span><span class=\"p\">)</span> <span class=\"o\">!=</span> <span class=\"n\">Date</span><span class=\"p\">(</span><span class=\"mi\">1988</span><span class=\"p\">)</span>\n<span class=\"kc\">True</span>\n</pre>\n<p><tt>Value</tt> also defines <tt>__repr__</tt> for you based on\n<tt>__init__</tt> signature:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">repr</span><span class=\"p\">(</span><span class=\"n\">Date</span><span class=\"p\">(</span><span class=\"mi\">2013</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">18</span><span class=\"p\">))</span>\n<span class=\"s1\">'Date(2013, 3, 18)'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">repr</span><span class=\"p\">(</span><span class=\"n\">Date</span><span class=\"p\">(</span><span class=\"mi\">1988</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n<span class=\"s1\">'Date(1988)'</span>\n</pre>\n<p><tt>Value</tt> also defines <tt>__hash__</tt> for you, so that\ninstances could be used in sets and as dictionary keys.</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Use <a href=\"http://pip-installer.org\" rel=\"nofollow\">pip</a> or easy_install:</p>\n<pre>pip install value==0.1.0\n</pre>\n<p>Alternatively, you can just drop <tt>value.py</tt> file into your\nproject\u2014it is self-contained.</p>\n<ul>\n<li><strong>value</strong> is tested with Python 2.6, 2.7, 3.2, 3.3 and PyPy.</li>\n<li><strong>value</strong> follows <a href=\"http://semver.org\" rel=\"nofollow\">semantic versioning</a>.</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 652807, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "2148ba70c44414eaf309080efbf0cf9a", "sha256": "9d6f696f9ac0d5ecb6189f6fe08e153cc6ee39449c3b23100e565b156a60c569"}, "downloads": -1, "filename": "value-0.1.0.tar.gz", "has_sig": false, "md5_digest": "2148ba70c44414eaf309080efbf0cf9a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3438, "upload_time": "2013-03-18T22:22:38", "upload_time_iso_8601": "2013-03-18T22:22:38.710488Z", "url": "https://files.pythonhosted.org/packages/13/d5/33f2063de7e21cf41cd6c029d2212cea9da7062e45cad37b3942bf935f7a/value-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "2148ba70c44414eaf309080efbf0cf9a", "sha256": "9d6f696f9ac0d5ecb6189f6fe08e153cc6ee39449c3b23100e565b156a60c569"}, "downloads": -1, "filename": "value-0.1.0.tar.gz", "has_sig": false, "md5_digest": "2148ba70c44414eaf309080efbf0cf9a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3438, "upload_time": "2013-03-18T22:22:38", "upload_time_iso_8601": "2013-03-18T22:22:38.710488Z", "url": "https://files.pythonhosted.org/packages/13/d5/33f2063de7e21cf41cd6c029d2212cea9da7062e45cad37b3942bf935f7a/value-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:37:59 2020"}