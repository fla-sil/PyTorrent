{"info": {"author": "Shay Palachy", "author_email": "shaypal5@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Software Development :: Libraries", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "pulearn \u23c2 \n#########\n\n|PyPI-Status| |PyPI-Versions| |Build-Status| |Codecov| |LICENCE|\n\nWebsite: `https://pulearn.github.io/pulearn/ <https://pulearn.github.io/pulearn/>`_\n\nDocumentation: `https://pulearn.github.io/pulearn/doc/pulearn/ <https://pulearn.github.io/pulearn/doc/pulearn/>`_\n\n\n.. code-block:: python\n\n    from pulearn import ElkanotoPuClassifier\n    from sklearn.svm import SVC\n    svc = SVC(C=10, kernel='rbf', gamma=0.4, probability=True)\n    pu_estimator = ElkanotoPuClassifier(estimator=svc, hold_out_ratio=0.2)\n    pu_estimator.fit(X, y)\n\n\n.. contents::\n\n.. section-numbering::\n\n\nDocumentation\n=============\n\nThis is the repository of the ``pulearn`` package, and this readme file is aimed to help potential contributors to the project.\n\nTo learn more about how to use ``pulearn``, either `visit pulearn's homepage <https://pulearn.github.io/pulearn/>`_ or read the `online documentation of pulearn <https://pulearn.github.io/pulearn/doc/pulearn/>`_.\n\n\nInstallation\n============\n\nInstall ``pulearn`` with:\n\n.. code-block:: bash\n\n  pip install pulearn\n\n\nImplemented Classifiers\n=======================\n\nElkanoto\n--------\n\nScikit-Learn wrappers for both the methods mentioned in the paper by Elkan and Noto, `\"Learning classifiers from only positive and unlabeled data\" <https://cseweb.ucsd.edu/~elkan/posonly.pdf>`_ (published in Proceeding of the 14th ACM SIGKDD international conference on Knowledge discovery and data mining, ACM, 2008).\n\nThese wrap the Python code from `a fork by AdityaAS <https://github.com/AdityaAS/pu-learning>`_ (with implementation to both methods) to the `original repository <https://github.com/aldro61/pu-learning>`_ by `Alexandre Drouin <https://github.com/aldro61>`_ implementing one of the methods.\n\n\nClassic Elkanoto\n~~~~~~~~~~~~~~~~\n\nTo use the classic (unweighted) method, use the ``ElkanotoPuClassifier`` class:\n\n.. code-block:: python\n\n    from pulearn import ElkanotoPuClassifier\n    from sklearn.svm import SVC\n    svc = SVC(C=10, kernel='rbf', gamma=0.4, probability=True)\n    pu_estimator = ElkanotoPuClassifier(estimator=svc, hold_out_ratio=0.2)\n    pu_estimator.fit(X, y)\n\n\nWeighted Elkanoto\n~~~~~~~~~~~~~~~~~\n\nTo use the weighted method, use the ``WeightedElkanotoPuClassifier`` class:\n\n.. code-block:: python\n\n    from pulearn import WeightedElkanotoPuClassifier\n    from sklearn.svm import SVC\n    svc = SVC(C=10, kernel='rbf', gamma=0.4, probability=True)\n    pu_estimator = WeightedElkanotoPuClassifier(\n        estimator=svc, labeled=10, unlabeled=20, hold_out_ratio=0.2)\n    pu_estimator.fit(X, y)\n\nSee the original paper for details on how the ``labeled`` and ``unlabeled`` quantities are used to weigh training examples and affect the learning process: `https://cseweb.ucsd.edu/~elkan/posonly.pdf <https://cseweb.ucsd.edu/~elkan/posonly.pdf>`_.\n\nBagging-based PU-learning\n-------------------------\n\nBased on the paper `A bagging SVM to learn from positive and unlabeled examples (2013) <http://members.cbio.mines-paristech.fr/~jvert/svn/bibli/local/Mordelet2013bagging.pdf>`_ by Mordelet and Vert. The implementation is by `Roy Wright <https://roywrightme.wordpress.com/>`__ (`roywright <https://github.com/roywright/>`_ on GitHub), and can be found in `his repository <https://github.com/roywright/pu_learning>`_\n\n.. code-block:: python\n\n    from pulearn import BaggingPuClassifier\n    from sklearn.svm import SVC\n    svc = SVC(C=10, kernel='rbf', gamma=0.4, probability=True)\n    pu_estimator = BaggingPuClassifier(\n        base_estimator=svc, n_estimators=15)\n    pu_estimator.fit(X, y)\n\n\nExamples\n========\n\nA nice code example of the classic Elkan-Noto classifier used for classification on the `Wisconsin breast cancer dataset <https://archive.ics.uci.edu/ml/datasets/Breast+Cancer+Wisconsin+(Diagnostic)>`_ , comparing it to a regular random forest classifer, can be found in the ``examples`` directory.\n\nTo run it, clone the repository, and run the following command from the root of the repository, with a python environment where ``pulearn`` is installed:\n\n.. code-block:: bash\n\n    python examples/BreastCancerElkanotoExample.py\n\nYou should see a nice plot, like the one below, comparing the F1 score of the PU learner versus a naive learner, demonstrating how PU learning becomes more effective - or worthwhile - the more positive examples are \"hidden\" from the training set. \n\n.. image:: https://raw.githubusercontent.com/pulearn/pulearn/master/pulearn_breast_cancer_f1_scores.png\n\n\nContributing\n============\n\nPackage author and current maintainer is Shay Palachy (shay.palachy@gmail.com); You are more than welcome to approach him for help. Contributions are very welcomed, especially since this package is very much in its infancy and many other pipeline stages can be added.\n\nInstalling for development\n--------------------------\n\nClone:\n\n.. code-block:: bash\n\n  git clone git@github.com:pulearn/pulearn.git\n\n\nInstall in development mode with test dependencies:\n\n.. code-block:: bash\n\n  cd pulearn\n  pip install -e \".[test]\"\n\n\nRunning the tests\n-----------------\n\nTo run the tests, use:\n\n.. code-block:: bash\n\n  python -m pytest\n\n\nNotice ``pytest`` runs are configured by the ``pytest.ini`` file. Read it to understand the exact ``pytest`` arguments used.\n\n\nAdding tests\n------------\n\nAt the time of writing, ``pulearn`` is maintained with a test coverage of 100%. Although challenging, I hope to maintain this status. If you add code to the package, please make sure you thoroughly test it. Codecov automatically reports changes in coverage on each PR, and so PR reducing test coverage will not be examined before that is fixed.\n\nTests reside under the ``tests`` directory in the root of the repository. Each model has a separate test folder, with each class - usually a pipeline stage - having a dedicated file (always starting with the string \"test\") containing several tests (each a global function starting with the string \"test\"). Please adhere to this structure, and try to separate tests cases to different test functions; this allows us to quickly focus on problem areas and use cases. Thank you! :)\n\nCode style\n----------\n\n``pdpip`` code is written to adhere to the coding style dictated by `flake8 <http://flake8.pycqa.org/en/latest/>`_. Practically, this means that one of the jobs that runs on `the project's Travis <https://travis-ci.org/pulearn/pulearn>`_ for each commit and pull request checks for a successfull run of the ``flake8`` CLI command in the repository's root. Which means pull requests will be flagged red by the Travis bot if non-flake8-compliant code was added.\n\nTo solve this, please run ``flake8`` on your code (whether through your text editor/IDE or using the command line) and fix all resulting errors. Thank you! :)\n\n\nAdding documentation\n--------------------\n\nThis project is documented using the `numpy docstring conventions`_, which were chosen as they are perhaps the most widely-spread conventions that are both supported by common tools such as Sphinx and result in human-readable docstrings (in my personal opinion, of course). When documenting code you add to this project, please follow `these conventions`_.\n\n.. _`numpy docstring conventions`: https://numpydoc.readthedocs.io/en/latest/format.html#docstring-standard\n.. _`these conventions`: https://numpydoc.readthedocs.io/en/latest/format.html#docstring-standard\n\nAdditionally, if you update this ``README.rst`` file,  use ``python setup.py checkdocs`` to validate it compiles.\n\n\nLicense\n=======\n\nThis package is released as open-source software under the `BSD 3-clause license <https://opensource.org/licenses/BSD-3-Clause>`_. See ``LICENSE_NOTICE.md`` for the different copyright holders of different parts of the code.\n\n\nCredits\n=======\n\nImplementations code by:\n\n* Elkan & Noto - Alexandre Drouin and `AditraAS <https://github.com/AdityaAS>`_.\n* Bagging PU Classifier - `Roy Wright <https://github.com/roywright/>`_.\n\nPackaging, testing and documentation by `Shay Palachy <http://www.shaypalachy.com/>`_.\n\n\n.. alternative:\n.. https://badge.fury.io/py/yellowbrick.svg\n\n.. |PyPI-Status| image:: https://img.shields.io/pypi/v/pulearn.svg\n  :target: https://pypi.org/project/pulearn\n\n.. |PyPI-Versions| image:: https://img.shields.io/pypi/pyversions/pulearn.svg\n   :target: https://pypi.org/project/pulearn\n\n.. |Build-Status| image:: https://travis-ci.org/pulearn/pulearn.svg?branch=master\n  :target: https://travis-ci.org/pulearn/pulearn\n\n.. |LICENCE| image:: https://img.shields.io/badge/License-BSD%203--clause-ff69b4.svg \n  :target: https://pypi.python.org/pypi/pulearn\n\n.. .. |LICENCE| image:: https://github.com/pulearn/pulearn/blob/master/mit_license_badge.svg\n  :target: https://pypi.python.org/pypi/pulearn\n\n.. https://img.shields.io/pypi/l/pulearn.svg\n\n.. |Codecov| image:: https://codecov.io/github/pulearn/pulearn/coverage.svg?branch=master\n   :target: https://codecov.io/github/pulearn/pulearn?branch=master\n\n\n.. |Codacy|  image:: https://api.codacy.com/project/badge/Grade/7d605e063f114ecdb5569266bd0226cd\n   :alt: Codacy Badge\n   :target: https://app.codacy.com/app/pulearn/pulearn?utm_source=github.com&utm_medium=referral&utm_content=pulearn/pulearn&utm_campaign=Badge_Grade_Dashboard\n\n.. |Requirements| image:: https://requires.io/github/pulearn/pulearn/requirements.svg?branch=master\n     :target: https://requires.io/github/pulearn/pulearn/requirements/?branch=master\n     :alt: Requirements Status\n\n.. |Downloads| image:: https://pepy.tech/badge/pulearn\n     :target: https://pepy.tech/project/pulearn\n     :alt: PePy stats\n\n.. |Codefactor| image:: https://www.codefactor.io/repository/github/pulearn/pulearn/badge?style=plastic\n     :target: https://www.codefactor.io/repository/github/pulearn/pulearn\n     :alt: Codefactor code quality\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://pulearn.github.io/pulearn/", "keywords": "classifier learning sklearn", "license": "BSD 3-Clause", "maintainer": "", "maintainer_email": "", "name": "pulearn", "package_url": "https://pypi.org/project/pulearn/", "platform": "any", "project_url": "https://pypi.org/project/pulearn/", "project_urls": {"Homepage": "https://pulearn.github.io/pulearn/"}, "release_url": "https://pypi.org/project/pulearn/0.0.3/", "requires_dist": ["numpy", "scikit-learn", "pytest ; extra == 'test'", "coverage ; extra == 'test'", "pytest-cov ; extra == 'test'", "pytest-ordering ; extra == 'test'", "matplotlib ; extra == 'test'", "collective.checkdocs ; extra == 'test'", "pygments ; extra == 'test'"], "requires_python": "", "summary": "Positive-unlabeled learning with Python", "version": "0.0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://pypi.org/project/pulearn\" rel=\"nofollow\"><img alt=\"PyPI-Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/34c89461cb0a958fdbb31c12cd0aabe9a7906f4d/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f70756c6561726e2e737667\"></a> <a href=\"https://pypi.org/project/pulearn\" rel=\"nofollow\"><img alt=\"PyPI-Versions\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/728b019502571e229dfd5302ecf0ecff07980289/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f70756c6561726e2e737667\"></a> <a href=\"https://travis-ci.org/pulearn/pulearn\" rel=\"nofollow\"><img alt=\"Build-Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a14dedcb680fc1fac24ffa37f52d6c55c6898d4d/68747470733a2f2f7472617669732d63692e6f72672f70756c6561726e2f70756c6561726e2e7376673f6272616e63683d6d6173746572\"></a> <a href=\"https://codecov.io/github/pulearn/pulearn?branch=master\" rel=\"nofollow\"><img alt=\"Codecov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3d177bb685380eda1b02141a27578794c619fde4/68747470733a2f2f636f6465636f762e696f2f6769746875622f70756c6561726e2f70756c6561726e2f636f7665726167652e7376673f6272616e63683d6d6173746572\"></a> <a href=\"https://pypi.python.org/pypi/pulearn\" rel=\"nofollow\"><img alt=\"LICENCE\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/18f750845e6d734addb1c053673a93b364665c89/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d425344253230332d2d636c617573652d6666363962342e737667\"></a></p>\n<p>Website: <a href=\"https://pulearn.github.io/pulearn/\" rel=\"nofollow\">https://pulearn.github.io/pulearn/</a></p>\n<p>Documentation: <a href=\"https://pulearn.github.io/pulearn/doc/pulearn/\" rel=\"nofollow\">https://pulearn.github.io/pulearn/doc/pulearn/</a></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pulearn</span> <span class=\"kn\">import</span> <span class=\"n\">ElkanotoPuClassifier</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.svm</span> <span class=\"kn\">import</span> <span class=\"n\">SVC</span>\n<span class=\"n\">svc</span> <span class=\"o\">=</span> <span class=\"n\">SVC</span><span class=\"p\">(</span><span class=\"n\">C</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">kernel</span><span class=\"o\">=</span><span class=\"s1\">'rbf'</span><span class=\"p\">,</span> <span class=\"n\">gamma</span><span class=\"o\">=</span><span class=\"mf\">0.4</span><span class=\"p\">,</span> <span class=\"n\">probability</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">pu_estimator</span> <span class=\"o\">=</span> <span class=\"n\">ElkanotoPuClassifier</span><span class=\"p\">(</span><span class=\"n\">estimator</span><span class=\"o\">=</span><span class=\"n\">svc</span><span class=\"p\">,</span> <span class=\"n\">hold_out_ratio</span><span class=\"o\">=</span><span class=\"mf\">0.2</span><span class=\"p\">)</span>\n<span class=\"n\">pu_estimator</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">)</span>\n</pre>\n<div id=\"contents\">\n<p>Contents</p>\n<ul>\n<li><a href=\"#documentation\" id=\"id1\" rel=\"nofollow\">1\u00a0\u00a0\u00a0Documentation</a></li>\n<li><a href=\"#installation\" id=\"id2\" rel=\"nofollow\">2\u00a0\u00a0\u00a0Installation</a></li>\n<li><a href=\"#implemented-classifiers\" id=\"id3\" rel=\"nofollow\">3\u00a0\u00a0\u00a0Implemented Classifiers</a><ul>\n<li><a href=\"#elkanoto\" id=\"id4\" rel=\"nofollow\">3.1\u00a0\u00a0\u00a0Elkanoto</a><ul>\n<li><a href=\"#classic-elkanoto\" id=\"id5\" rel=\"nofollow\">3.1.1\u00a0\u00a0\u00a0Classic Elkanoto</a></li>\n<li><a href=\"#weighted-elkanoto\" id=\"id6\" rel=\"nofollow\">3.1.2\u00a0\u00a0\u00a0Weighted Elkanoto</a></li>\n</ul>\n</li>\n<li><a href=\"#bagging-based-pu-learning\" id=\"id7\" rel=\"nofollow\">3.2\u00a0\u00a0\u00a0Bagging-based PU-learning</a></li>\n</ul>\n</li>\n<li><a href=\"#examples\" id=\"id8\" rel=\"nofollow\">4\u00a0\u00a0\u00a0Examples</a></li>\n<li><a href=\"#contributing\" id=\"id9\" rel=\"nofollow\">5\u00a0\u00a0\u00a0Contributing</a><ul>\n<li><a href=\"#installing-for-development\" id=\"id10\" rel=\"nofollow\">5.1\u00a0\u00a0\u00a0Installing for development</a></li>\n<li><a href=\"#running-the-tests\" id=\"id11\" rel=\"nofollow\">5.2\u00a0\u00a0\u00a0Running the tests</a></li>\n<li><a href=\"#adding-tests\" id=\"id12\" rel=\"nofollow\">5.3\u00a0\u00a0\u00a0Adding tests</a></li>\n<li><a href=\"#code-style\" id=\"id13\" rel=\"nofollow\">5.4\u00a0\u00a0\u00a0Code style</a></li>\n<li><a href=\"#adding-documentation\" id=\"id14\" rel=\"nofollow\">5.5\u00a0\u00a0\u00a0Adding documentation</a></li>\n</ul>\n</li>\n<li><a href=\"#license\" id=\"id15\" rel=\"nofollow\">6\u00a0\u00a0\u00a0License</a></li>\n<li><a href=\"#credits\" id=\"id16\" rel=\"nofollow\">7\u00a0\u00a0\u00a0Credits</a></li>\n</ul>\n</div>\n<div id=\"documentation\">\n<h2><a href=\"#id1\" rel=\"nofollow\">1\u00a0\u00a0\u00a0Documentation</a></h2>\n<p>This is the repository of the <tt>pulearn</tt> package, and this readme file is aimed to help potential contributors to the project.</p>\n<p>To learn more about how to use <tt>pulearn</tt>, either <a href=\"https://pulearn.github.io/pulearn/\" rel=\"nofollow\">visit pulearn\u2019s homepage</a> or read the <a href=\"https://pulearn.github.io/pulearn/doc/pulearn/\" rel=\"nofollow\">online documentation of pulearn</a>.</p>\n</div>\n<div id=\"installation\">\n<h2><a href=\"#id2\" rel=\"nofollow\">2\u00a0\u00a0\u00a0Installation</a></h2>\n<p>Install <tt>pulearn</tt> with:</p>\n<pre>pip install pulearn\n</pre>\n</div>\n<div id=\"implemented-classifiers\">\n<h2><a href=\"#id3\" rel=\"nofollow\">3\u00a0\u00a0\u00a0Implemented Classifiers</a></h2>\n<div id=\"elkanoto\">\n<h3><a href=\"#id4\" rel=\"nofollow\">3.1\u00a0\u00a0\u00a0Elkanoto</a></h3>\n<p>Scikit-Learn wrappers for both the methods mentioned in the paper by Elkan and Noto, <a href=\"https://cseweb.ucsd.edu/~elkan/posonly.pdf\" rel=\"nofollow\">\u201cLearning classifiers from only positive and unlabeled data\u201d</a> (published in Proceeding of the 14th ACM SIGKDD international conference on Knowledge discovery and data mining, ACM, 2008).</p>\n<p>These wrap the Python code from <a href=\"https://github.com/AdityaAS/pu-learning\" rel=\"nofollow\">a fork by AdityaAS</a> (with implementation to both methods) to the <a href=\"https://github.com/aldro61/pu-learning\" rel=\"nofollow\">original repository</a> by <a href=\"https://github.com/aldro61\" rel=\"nofollow\">Alexandre Drouin</a> implementing one of the methods.</p>\n<div id=\"classic-elkanoto\">\n<h4><a href=\"#id5\" rel=\"nofollow\">3.1.1\u00a0\u00a0\u00a0Classic Elkanoto</a></h4>\n<p>To use the classic (unweighted) method, use the <tt>ElkanotoPuClassifier</tt> class:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pulearn</span> <span class=\"kn\">import</span> <span class=\"n\">ElkanotoPuClassifier</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.svm</span> <span class=\"kn\">import</span> <span class=\"n\">SVC</span>\n<span class=\"n\">svc</span> <span class=\"o\">=</span> <span class=\"n\">SVC</span><span class=\"p\">(</span><span class=\"n\">C</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">kernel</span><span class=\"o\">=</span><span class=\"s1\">'rbf'</span><span class=\"p\">,</span> <span class=\"n\">gamma</span><span class=\"o\">=</span><span class=\"mf\">0.4</span><span class=\"p\">,</span> <span class=\"n\">probability</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">pu_estimator</span> <span class=\"o\">=</span> <span class=\"n\">ElkanotoPuClassifier</span><span class=\"p\">(</span><span class=\"n\">estimator</span><span class=\"o\">=</span><span class=\"n\">svc</span><span class=\"p\">,</span> <span class=\"n\">hold_out_ratio</span><span class=\"o\">=</span><span class=\"mf\">0.2</span><span class=\"p\">)</span>\n<span class=\"n\">pu_estimator</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"weighted-elkanoto\">\n<h4><a href=\"#id6\" rel=\"nofollow\">3.1.2\u00a0\u00a0\u00a0Weighted Elkanoto</a></h4>\n<p>To use the weighted method, use the <tt>WeightedElkanotoPuClassifier</tt> class:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pulearn</span> <span class=\"kn\">import</span> <span class=\"n\">WeightedElkanotoPuClassifier</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.svm</span> <span class=\"kn\">import</span> <span class=\"n\">SVC</span>\n<span class=\"n\">svc</span> <span class=\"o\">=</span> <span class=\"n\">SVC</span><span class=\"p\">(</span><span class=\"n\">C</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">kernel</span><span class=\"o\">=</span><span class=\"s1\">'rbf'</span><span class=\"p\">,</span> <span class=\"n\">gamma</span><span class=\"o\">=</span><span class=\"mf\">0.4</span><span class=\"p\">,</span> <span class=\"n\">probability</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">pu_estimator</span> <span class=\"o\">=</span> <span class=\"n\">WeightedElkanotoPuClassifier</span><span class=\"p\">(</span>\n    <span class=\"n\">estimator</span><span class=\"o\">=</span><span class=\"n\">svc</span><span class=\"p\">,</span> <span class=\"n\">labeled</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">unlabeled</span><span class=\"o\">=</span><span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"n\">hold_out_ratio</span><span class=\"o\">=</span><span class=\"mf\">0.2</span><span class=\"p\">)</span>\n<span class=\"n\">pu_estimator</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">)</span>\n</pre>\n<p>See the original paper for details on how the <tt>labeled</tt> and <tt>unlabeled</tt> quantities are used to weigh training examples and affect the learning process: <a href=\"https://cseweb.ucsd.edu/~elkan/posonly.pdf\" rel=\"nofollow\">https://cseweb.ucsd.edu/~elkan/posonly.pdf</a>.</p>\n</div>\n</div>\n<div id=\"bagging-based-pu-learning\">\n<h3><a href=\"#id7\" rel=\"nofollow\">3.2\u00a0\u00a0\u00a0Bagging-based PU-learning</a></h3>\n<p>Based on the paper <a href=\"http://members.cbio.mines-paristech.fr/~jvert/svn/bibli/local/Mordelet2013bagging.pdf\" rel=\"nofollow\">A bagging SVM to learn from positive and unlabeled examples (2013)</a> by Mordelet and Vert. The implementation is by <a href=\"https://roywrightme.wordpress.com/\" rel=\"nofollow\">Roy Wright</a> (<a href=\"https://github.com/roywright/\" rel=\"nofollow\">roywright</a> on GitHub), and can be found in <a href=\"https://github.com/roywright/pu_learning\" rel=\"nofollow\">his repository</a></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pulearn</span> <span class=\"kn\">import</span> <span class=\"n\">BaggingPuClassifier</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.svm</span> <span class=\"kn\">import</span> <span class=\"n\">SVC</span>\n<span class=\"n\">svc</span> <span class=\"o\">=</span> <span class=\"n\">SVC</span><span class=\"p\">(</span><span class=\"n\">C</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">kernel</span><span class=\"o\">=</span><span class=\"s1\">'rbf'</span><span class=\"p\">,</span> <span class=\"n\">gamma</span><span class=\"o\">=</span><span class=\"mf\">0.4</span><span class=\"p\">,</span> <span class=\"n\">probability</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">pu_estimator</span> <span class=\"o\">=</span> <span class=\"n\">BaggingPuClassifier</span><span class=\"p\">(</span>\n    <span class=\"n\">base_estimator</span><span class=\"o\">=</span><span class=\"n\">svc</span><span class=\"p\">,</span> <span class=\"n\">n_estimators</span><span class=\"o\">=</span><span class=\"mi\">15</span><span class=\"p\">)</span>\n<span class=\"n\">pu_estimator</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">)</span>\n</pre>\n</div>\n</div>\n<div id=\"examples\">\n<h2><a href=\"#id8\" rel=\"nofollow\">4\u00a0\u00a0\u00a0Examples</a></h2>\n<p>A nice code example of the classic Elkan-Noto classifier used for classification on the <a href=\"https://archive.ics.uci.edu/ml/datasets/Breast+Cancer+Wisconsin+(Diagnostic)\" rel=\"nofollow\">Wisconsin breast cancer dataset</a> , comparing it to a regular random forest classifer, can be found in the <tt>examples</tt> directory.</p>\n<p>To run it, clone the repository, and run the following command from the root of the repository, with a python environment where <tt>pulearn</tt> is installed:</p>\n<pre>python examples/BreastCancerElkanotoExample.py\n</pre>\n<p>You should see a nice plot, like the one below, comparing the F1 score of the PU learner versus a naive learner, demonstrating how PU learning becomes more effective - or worthwhile - the more positive examples are \u201chidden\u201d from the training set.</p>\n<img alt=\"https://raw.githubusercontent.com/pulearn/pulearn/master/pulearn_breast_cancer_f1_scores.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4252fcd123ebdc7e9425193ee4afba72be321404/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f70756c6561726e2f70756c6561726e2f6d61737465722f70756c6561726e5f6272656173745f63616e6365725f66315f73636f7265732e706e67\">\n</div>\n<div id=\"contributing\">\n<h2><a href=\"#id9\" rel=\"nofollow\">5\u00a0\u00a0\u00a0Contributing</a></h2>\n<p>Package author and current maintainer is Shay Palachy (<a href=\"mailto:shay.palachy%40gmail.com\">shay<span>.</span>palachy<span>@</span>gmail<span>.</span>com</a>); You are more than welcome to approach him for help. Contributions are very welcomed, especially since this package is very much in its infancy and many other pipeline stages can be added.</p>\n<div id=\"installing-for-development\">\n<h3><a href=\"#id10\" rel=\"nofollow\">5.1\u00a0\u00a0\u00a0Installing for development</a></h3>\n<p>Clone:</p>\n<pre>git clone git@github.com:pulearn/pulearn.git\n</pre>\n<p>Install in development mode with test dependencies:</p>\n<pre><span class=\"nb\">cd</span> pulearn\npip install -e <span class=\"s2\">\".[test]\"</span>\n</pre>\n</div>\n<div id=\"running-the-tests\">\n<h3><a href=\"#id11\" rel=\"nofollow\">5.2\u00a0\u00a0\u00a0Running the tests</a></h3>\n<p>To run the tests, use:</p>\n<pre>python -m pytest\n</pre>\n<p>Notice <tt>pytest</tt> runs are configured by the <tt>pytest.ini</tt> file. Read it to understand the exact <tt>pytest</tt> arguments used.</p>\n</div>\n<div id=\"adding-tests\">\n<h3><a href=\"#id12\" rel=\"nofollow\">5.3\u00a0\u00a0\u00a0Adding tests</a></h3>\n<p>At the time of writing, <tt>pulearn</tt> is maintained with a test coverage of 100%. Although challenging, I hope to maintain this status. If you add code to the package, please make sure you thoroughly test it. Codecov automatically reports changes in coverage on each PR, and so PR reducing test coverage will not be examined before that is fixed.</p>\n<p>Tests reside under the <tt>tests</tt> directory in the root of the repository. Each model has a separate test folder, with each class - usually a pipeline stage - having a dedicated file (always starting with the string \u201ctest\u201d) containing several tests (each a global function starting with the string \u201ctest\u201d). Please adhere to this structure, and try to separate tests cases to different test functions; this allows us to quickly focus on problem areas and use cases. Thank you! :)</p>\n</div>\n<div id=\"code-style\">\n<h3><a href=\"#id13\" rel=\"nofollow\">5.4\u00a0\u00a0\u00a0Code style</a></h3>\n<p><tt>pdpip</tt> code is written to adhere to the coding style dictated by <a href=\"http://flake8.pycqa.org/en/latest/\" rel=\"nofollow\">flake8</a>. Practically, this means that one of the jobs that runs on <a href=\"https://travis-ci.org/pulearn/pulearn\" rel=\"nofollow\">the project\u2019s Travis</a> for each commit and pull request checks for a successfull run of the <tt>flake8</tt> CLI command in the repository\u2019s root. Which means pull requests will be flagged red by the Travis bot if non-flake8-compliant code was added.</p>\n<p>To solve this, please run <tt>flake8</tt> on your code (whether through your text editor/IDE or using the command line) and fix all resulting errors. Thank you! :)</p>\n</div>\n<div id=\"adding-documentation\">\n<h3><a href=\"#id14\" rel=\"nofollow\">5.5\u00a0\u00a0\u00a0Adding documentation</a></h3>\n<p>This project is documented using the <a href=\"https://numpydoc.readthedocs.io/en/latest/format.html#docstring-standard\" rel=\"nofollow\">numpy docstring conventions</a>, which were chosen as they are perhaps the most widely-spread conventions that are both supported by common tools such as Sphinx and result in human-readable docstrings (in my personal opinion, of course). When documenting code you add to this project, please follow <a href=\"https://numpydoc.readthedocs.io/en/latest/format.html#docstring-standard\" rel=\"nofollow\">these conventions</a>.</p>\n<p>Additionally, if you update this <tt>README.rst</tt> file,  use <tt>python setup.py checkdocs</tt> to validate it compiles.</p>\n</div>\n</div>\n<div id=\"license\">\n<h2><a href=\"#id15\" rel=\"nofollow\">6\u00a0\u00a0\u00a0License</a></h2>\n<p>This package is released as open-source software under the <a href=\"https://opensource.org/licenses/BSD-3-Clause\" rel=\"nofollow\">BSD 3-clause license</a>. See <tt>LICENSE_NOTICE.md</tt> for the different copyright holders of different parts of the code.</p>\n</div>\n<div id=\"credits\">\n<h2><a href=\"#id16\" rel=\"nofollow\">7\u00a0\u00a0\u00a0Credits</a></h2>\n<p>Implementations code by:</p>\n<ul>\n<li>Elkan &amp; Noto - Alexandre Drouin and <a href=\"https://github.com/AdityaAS\" rel=\"nofollow\">AditraAS</a>.</li>\n<li>Bagging PU Classifier - <a href=\"https://github.com/roywright/\" rel=\"nofollow\">Roy Wright</a>.</li>\n</ul>\n<p>Packaging, testing and documentation by <a href=\"http://www.shaypalachy.com/\" rel=\"nofollow\">Shay Palachy</a>.</p>\n</div>\n\n          </div>"}, "last_serial": 6490389, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "ac236f1fa799678d32456e287824024d", "sha256": "df8c9c4068132bbc4b3af4a7ba15965bee82da23625d445a7565098049dd2c8b"}, "downloads": -1, "filename": "pulearn-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "ac236f1fa799678d32456e287824024d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8084, "upload_time": "2020-01-10T16:27:56", "upload_time_iso_8601": "2020-01-10T16:27:56.975972Z", "url": "https://files.pythonhosted.org/packages/cd/a1/18ef24674f1336d1b764cb2577c5c280cba5c96344ffb1fa5c8568309932/pulearn-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6873fef3288a49bb72956e5cbefc79f9", "sha256": "566f8545f5bc621f5114ecdc1db3082ac25252b4d96757a86fe70175b6b7dff0"}, "downloads": -1, "filename": "pulearn-0.0.1.tar.gz", "has_sig": false, "md5_digest": "6873fef3288a49bb72956e5cbefc79f9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23513, "upload_time": "2020-01-10T16:27:59", "upload_time_iso_8601": "2020-01-10T16:27:59.593502Z", "url": "https://files.pythonhosted.org/packages/45/51/b517193dfcb4389c68f9d7af72a80885a588b2c43033928e074ed16cc610/pulearn-0.0.1.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "e55a3a55adf52ae92be851d2310d94c8", "sha256": "a7fbf888b85a85ccb094381464099ffdbe18b2ae2c4f6c8604de230be7a9ba90"}, "downloads": -1, "filename": "pulearn-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "e55a3a55adf52ae92be851d2310d94c8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 15892, "upload_time": "2020-01-20T21:44:25", "upload_time_iso_8601": "2020-01-20T21:44:25.397897Z", "url": "https://files.pythonhosted.org/packages/20/47/3dbddb19c16f240afc1740e071d95e1eacbe7709f84d36a7390a743d59ae/pulearn-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1b020b3c364785d1082ee7318c856ddf", "sha256": "462f7a715566c54d0e22a1e91880f4daaa959e0a5af49b5dd7927dfa8a924480"}, "downloads": -1, "filename": "pulearn-0.0.3.tar.gz", "has_sig": false, "md5_digest": "1b020b3c364785d1082ee7318c856ddf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 32987, "upload_time": "2020-01-20T21:44:27", "upload_time_iso_8601": "2020-01-20T21:44:27.501163Z", "url": "https://files.pythonhosted.org/packages/56/65/7def793242f3e525363d5e56f5a57a153f721bfe40e3176220c5f4581f1c/pulearn-0.0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e55a3a55adf52ae92be851d2310d94c8", "sha256": "a7fbf888b85a85ccb094381464099ffdbe18b2ae2c4f6c8604de230be7a9ba90"}, "downloads": -1, "filename": "pulearn-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "e55a3a55adf52ae92be851d2310d94c8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 15892, "upload_time": "2020-01-20T21:44:25", "upload_time_iso_8601": "2020-01-20T21:44:25.397897Z", "url": "https://files.pythonhosted.org/packages/20/47/3dbddb19c16f240afc1740e071d95e1eacbe7709f84d36a7390a743d59ae/pulearn-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1b020b3c364785d1082ee7318c856ddf", "sha256": "462f7a715566c54d0e22a1e91880f4daaa959e0a5af49b5dd7927dfa8a924480"}, "downloads": -1, "filename": "pulearn-0.0.3.tar.gz", "has_sig": false, "md5_digest": "1b020b3c364785d1082ee7318c856ddf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 32987, "upload_time": "2020-01-20T21:44:27", "upload_time_iso_8601": "2020-01-20T21:44:27.501163Z", "url": "https://files.pythonhosted.org/packages/56/65/7def793242f3e525363d5e56f5a57a153f721bfe40e3176220c5f4581f1c/pulearn-0.0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:14:39 2020"}