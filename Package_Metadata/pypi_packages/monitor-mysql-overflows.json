{"info": {"author": "Jeremy Cohen Solal", "author_email": "jeremy@rentabiliweb.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: System Administrators", "Operating System :: OS Independent", "Programming Language :: Python :: 2", "Topic :: Database :: Database Engines/Servers", "Topic :: System :: Monitoring", "Topic :: Utilities"], "description": "# mysql-monitor\n\n#### Table of contents\n\n1. [Overview] (#overview)\n2. [Usage] (#usage)\n3. [Notices] (#notices)\n4. [Installation] (#installation)\n5. [Development] (#development)\n\n## Overview\nThis program scan and report all the TINYINT, SMALLINT, MEDIUMINT, INT, BIGINT columns where the highest value is too\nclose from the highest possible value allowed by the column type.\n\nIt handles UNSIGNED and SIGNED cases.\n\n## Usage\n\n```\nusage: monitor.py [-h] [--username USERNAME] [--password [PASSWORD]]\n                  [--host HOST] [--threshold THRESHOLD]\n                  [--exclude EXCLUDE [EXCLUDE ...]] [--db DB [DB ...]]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --username USERNAME, -u USERNAME\n                        MySQL username\n  --password [PASSWORD], -p [PASSWORD]\n                        MySQL password\n  --host HOST           MySQL host\n  --threshold THRESHOLD, -t THRESHOLD\n                        The alerting threshold (ex: 0.8 means alert when a\n                        column max value is 80% of the max possible value\n  --exclude EXCLUDE [EXCLUDE ...], -e EXCLUDE [EXCLUDE ...]\n                        Database to exclude separated by a comma\n  --db DB [DB ...], -d DB [DB ...]\n                        Databases to analyse separated by a comma (default\n                        all)\n```\n\n## Notices\nBE CAREFUL:\n - It could be very slow (especially on heavy loaded servers or servers with a huge databases/tables count.\n You surely want to run this tool on a slave instead of a master\n\n - This script disable innodb_stats computing for optimizing performance_schema analysis and enable it at the end\n\n See: http://www.percona.com/blog/2011/12/23/solving-information_schema-slowness/\n\n If you interrupt this script (Ctrl+C ...) it is up to you to reactivate it using something like:\n set global innodb_stats_on_metadata=1;\n\n\n## Installation\n\nTo install it with a [Python virtualenv](http://docs.python-guide.org/en/latest/dev/virtualenvs/) (recommended):\n\n```\n$> virtualenv myenv\n$> source myenv/bin/activate\n(myenv) $> pip install mysql-monitor\n(myenv) $> mysql-monitor -h\n```\n\nOr on your system, without virtualenv:\n\n```\n$> pip install mysql-monitor\n$> mysql-monitor -h\n```\n\n## Development\n\nTo start hacking on the project, run:\n\n```\n$> virtualenv myenv\n$> source myenv/bin/activate\n(myenv) $> pip install -e .\n(myenv) $> mysql-monitor -h\n```\n\nChangelog\n=========\n\n0.1.0 (unreleased)\n------------------\n\nInitial version.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://www.rentabiliweb-group.com", "keywords": null, "license": "Proprietary", "maintainer": null, "maintainer_email": null, "name": "monitor-mysql-overflows", "package_url": "https://pypi.org/project/monitor-mysql-overflows/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/monitor-mysql-overflows/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://www.rentabiliweb-group.com"}, "release_url": "https://pypi.org/project/monitor-mysql-overflows/1.1.1/", "requires_dist": null, "requires_python": null, "summary": "MySQL utilities to detect integer like columns overflows", "version": "1.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            # mysql-monitor<br><br>#### Table of contents<br><br>1. [Overview] (#overview)<br>2. [Usage] (#usage)<br>3. [Notices] (#notices)<br>4. [Installation] (#installation)<br>5. [Development] (#development)<br><br>## Overview<br>This program scan and report all the TINYINT, SMALLINT, MEDIUMINT, INT, BIGINT columns where the highest value is too<br>close from the highest possible value allowed by the column type.<br><br>It handles UNSIGNED and SIGNED cases.<br><br>## Usage<br><br>```<br>usage: monitor.py [-h] [--username USERNAME] [--password [PASSWORD]]<br>                  [--host HOST] [--threshold THRESHOLD]<br>                  [--exclude EXCLUDE [EXCLUDE ...]] [--db DB [DB ...]]<br><br>optional arguments:<br>  -h, --help            show this help message and exit<br>  --username USERNAME, -u USERNAME<br>                        MySQL username<br>  --password [PASSWORD], -p [PASSWORD]<br>                        MySQL password<br>  --host HOST           MySQL host<br>  --threshold THRESHOLD, -t THRESHOLD<br>                        The alerting threshold (ex: 0.8 means alert when a<br>                        column max value is 80% of the max possible value<br>  --exclude EXCLUDE [EXCLUDE ...], -e EXCLUDE [EXCLUDE ...]<br>                        Database to exclude separated by a comma<br>  --db DB [DB ...], -d DB [DB ...]<br>                        Databases to analyse separated by a comma (default<br>                        all)<br>```<br><br>## Notices<br>BE CAREFUL:<br> - It could be very slow (especially on heavy loaded servers or servers with a huge databases/tables count.<br> You surely want to run this tool on a slave instead of a master<br><br> - This script disable innodb_stats computing for optimizing performance_schema analysis and enable it at the end<br><br> See: http://www.percona.com/blog/2011/12/23/solving-information_schema-slowness/<br><br> If you interrupt this script (Ctrl+C ...) it is up to you to reactivate it using something like:<br> set global innodb_stats_on_metadata=1;<br><br><br>## Installation<br><br>To install it with a [Python virtualenv](http://docs.python-guide.org/en/latest/dev/virtualenvs/) (recommended):<br><br>```<br>$&gt; virtualenv myenv<br>$&gt; source myenv/bin/activate<br>(myenv) $&gt; pip install mysql-monitor<br>(myenv) $&gt; mysql-monitor -h<br>```<br><br>Or on your system, without virtualenv:<br><br>```<br>$&gt; pip install mysql-monitor<br>$&gt; mysql-monitor -h<br>```<br><br>## Development<br><br>To start hacking on the project, run:<br><br>```<br>$&gt; virtualenv myenv<br>$&gt; source myenv/bin/activate<br>(myenv) $&gt; pip install -e .<br>(myenv) $&gt; mysql-monitor -h<br>```<br><br>Changelog<br>=========<br><br>0.1.0 (unreleased)<br>------------------<br><br>Initial version.\n          </div>"}, "last_serial": 1478449, "releases": {"1.1.1": [{"comment_text": "", "digests": {"md5": "48a7d22554634765d31f40c921a5a58c", "sha256": "4b493b650001ac3efe3361f4c6bc50fdb98fccb07e88f6a4ca5071d16316d699"}, "downloads": -1, "filename": "monitor-mysql-overflows-1.1.1.tar.gz", "has_sig": false, "md5_digest": "48a7d22554634765d31f40c921a5a58c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5323, "upload_time": "2015-03-26T11:02:18", "upload_time_iso_8601": "2015-03-26T11:02:18.399786Z", "url": "https://files.pythonhosted.org/packages/09/7a/0438dec3658278eeba633f24eaf645602647f7004bdba9d18d851dff0f88/monitor-mysql-overflows-1.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "48a7d22554634765d31f40c921a5a58c", "sha256": "4b493b650001ac3efe3361f4c6bc50fdb98fccb07e88f6a4ca5071d16316d699"}, "downloads": -1, "filename": "monitor-mysql-overflows-1.1.1.tar.gz", "has_sig": false, "md5_digest": "48a7d22554634765d31f40c921a5a58c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5323, "upload_time": "2015-03-26T11:02:18", "upload_time_iso_8601": "2015-03-26T11:02:18.399786Z", "url": "https://files.pythonhosted.org/packages/09/7a/0438dec3658278eeba633f24eaf645602647f7004bdba9d18d851dff0f88/monitor-mysql-overflows-1.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:52:10 2020"}