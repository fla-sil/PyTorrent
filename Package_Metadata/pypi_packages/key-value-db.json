{"info": {"author": "Adewale Azeez", "author_email": "azeezadewale98@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "License :: OSI Approved :: GNU Lesser General Public License v3 (LGPLv3)", "Natural Language :: English", "Programming Language :: Python", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Database", "Topic :: Database :: Database Engines/Servers", "Topic :: Database :: Front-Ends"], "description": "Light weight package to quickly and easily manage, load, update and save\nkey-value type database\n\nThe sample use cases of this package is loading configuration file,\nlanguage file, preference setting in an application. More use cases can\nbe seen `here <https://keyvaluedb.github.io/usecases/index.html>`__.\n\nThe package does not do any Input and Output operation as there are\nseveral way to read and write to file and the methods has their strength\nand weakness therefore the developer has to find the efficient way to\nload and save locally.\n\n--------------\n\nTable of content\n----------------\n\n-  `Installation <#installation>`__\n-  `Example <#example>`__\n-  `Legends <#legends>`__\n-  `API <#api>`__\n\n   -  `Creating/loading a document <#creating/loading-a-document>`__\n   -  `Inserting data <#inserting-data>`__\n   -  `Finding data <#finding-data>`__\n\n      -  `Get KeyValue Object <#get-keyvalue-object>`__\n      -  `Get Like KeyValue Object <#get-like-keyvalue-object>`__\n      -  `Get <#get-like>`__\n      -  `Get Like <#get-like>`__\n\n   -  `Updating data <#updating-data>`__\n\n      -  `Set <#set>`__\n      -  `Set KeyValue Object <#set-keyvalue-object>`__\n\n   -  `Inserting data <#inserting-data>`__\n   -  `Removing data <#removing-data>`__\n   -  `Size, Clear, isEmpty <#size,-clear,-isempty>`__\n\n      -  `Size <#size>`__\n      -  `Clear <#clear>`__\n      -  `isEmpty <#isempty>`__\n\n   -  `Saving collection <#saving-collection>`__\n   -  `Iterating collection <#iterating-collection>`__\n\n-  `How it works <#how-it-works>`__\n-  `Contributing <#contributing>`__\n-  `Support <#support>`__\n-  `License <#license>`__\n\nInstallation\n------------\n\nInstall the package from the Python package index or download the zip\nand .egg file from\n`releases <https://github.com/keyvaluedb/key-value-db-python/releases>`__.\n\n.. code:: bash\n\n    pip install key_value_db\n\nExample\n-------\n\nThe following example load, update, read and remove a simple key value\nobject\n\n.. code:: python\n\n    from key_value_db import KeyValueDB, KeyValueObject\n\n    #initialize the key-value\n    key_value_db = KeyValueDB(\"Greet=Hello World,Project=KeyValueDB\", True, '=', ',', False)\n\n    #get an object\n    print(key_value_db.get(\"Greet\"))\n\n    #remove an object\n    key_value_db.remove(\"Greet\")\n\n    #add an object\n    key_value_db.add(\"What\", \"i don't know what to write here\")\n\n    #print all the objects\n    for kvo in key_value_db:\n        print(kvo)\n\nLegends\n-------\n\n::\n\n    kvp  - Key Value Pair\n    kvdb - Key value Database\n    pss  - Possibly\n    kvo  - Key Value Object\n\nAPI\n---\n\nOnly string type is used as the key and value of the kvo. A kvo can be\nused to replace or set the value for a key.\n\nCreating/loading a document\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nYou can use the package to update and create an existing key value\ndatabase. This library does not read the database from a file which\nmeans you have to find a way to read a string from the file.\n\nCreate a new keyValueDB. The default seperator between the key and value\nis ``=`` and the delimeter between the kvp is ``\\n``\\ (newline).\n\n.. code:: python\n\n    key_value_db = KeyValueDB()\n\nTo load existing KeyValueDB\n\n.. code:: python\n\n    key_value_db = KeyValueDB(\n            \"Greet=Hello World,Project=KeyValueDB\", #pss read string from file\n            True, #case sensitive is true\n            '=', #the seperator from key and value\n            ',', #the delimeter for the key-value-pair\n            False #error tolerance if true no exception is thrown\n            )\n\nInserting Data\n~~~~~~~~~~~~~~\n\nThe only accepted type that can be inserted is a valid\n``KeyValueObject`` and ``String``. The method ``add`` can be used to add\na new kvp into the object.\n\nAdd a kvp with it key and value\n\n.. code:: python\n\n    key_value_db.add(\"Greet\", \"Hello World\")\n\nAdd a kvp using the ``KeyValueObject`` class.\n\n.. code:: python\n\n    key_value_object = KeyValueObject(\"Greet\", \"Hello World\")\n    key_value_db.add(keyValueObject)\n\nFinding Data\n~~~~~~~~~~~~\n\nThere are several way to find and get a value from the kvdb object. The\nvalue or the KeyValueObject can be gotten using the methods below\n\nGet KeyValue Object\n^^^^^^^^^^^^^^^^^^^\n\nYou can get the kvo using either the key or index. If the corresponding\nkvo is not found, an empty kvo is added to the db and then returned but\nnot in the case when requested with the integer index. If a fallback kvo\nis sent as second parameter then when the request kvo is not found the\nfallback second parameter is added to the kvdb and then returned.\n\nGet the kvo using it integer index\n\n.. code:: python\n\n    key_value_db.get_key_value_object(0)\n    #<KeyValueObject@6034722440246165772:Key=Greet,Value=Hello World>\n\nGet the kvo using it key\n\n.. code:: python\n\n    key_value_db.get_key_value_object(\"Greet\")\n    #<KeyValueObject@6034722440246165772:Key=Greet,Value=Hello World>\n\nGet the kvo using it key with fallback kvo\n\n.. code:: python\n\n    key_value_object = KeyValueObject(\"Name\", \"Adewale Azeez\")\n    key_value_db.get_key_value_object(\"Name\", key_value_object)\n    #<KeyValueObject@6034722440246165772:Key=Name,Value=Adewale Azeez>\n\nGet Like KeyValue Object\n^^^^^^^^^^^^^^^^^^^^^^^^\n\nGet a kvo by checking the kvdb for the kvo object that contains a part\nof the key. If a fallback kvo is sent as second parameter then when the\nrequest kvo is not found the fallback second parameter is added to the\nkvdb and then returned.\n\nGet a similar kvo using it key part\n\n.. code:: python\n\n    key_value_db.get_like_key_value_object(\"eet\")\n    #<KeyValueObject@6034722440246165772:Key=Greet,Value=Hello World>\n\nGet a similar kvo using it key part with fallback kvo\n\n.. code:: python\n\n    key_value_object = KeyValueObject(\"Name\", \"Adewale Azeez\")\n    key_value_db.get_like_key_value_object(\"Nam\", key_value_object)\n    #<KeyValueObject@6034722440246165772:Key=Name,Value=Adewale Azeez>\n\nGet\n^^^\n\nYou can get a kvdb value using either the key or index. If the\ncorresponding value is not found, an empty string is added to the db and\nthen returned but not in the case when requested with the integer index.\n\nIf a fallback kvo is sent as second parameter then when the request key\nis not found the fallback second parameter is added to the kvdb and then\nvalue is returned. If a string value is sent as the second value it is\nreturned if the key is not found in the kvdb.\n\nGet a value using it integer index\n\n.. code:: python\n\n    key_value_db.get(0)\n    #\"Hello World\"\n\nGet the value using it key\n\n.. code:: python\n\n    key_value_db.get(\"Greet\")\n    #\"Hello World\"\n\nGet the kvo using it key with fallback value\n\n.. code:: python\n\n    key_value_db.get(\"Licence\", \"The MIT Licence\")\n    #\"The MIT Licence\"\n\nGet the kvo using it key with fallback kvo\n\n.. code:: python\n\n    key_value_object = KeyValueObject(\"Licence\", \"The MIT Licence\")\n    key_value_db.get(\"Name\", key_value_object)\n    #\"The MIT Licence\"\n\nGet Like\n^^^^^^^^\n\nGet a value by checking the kvdb for the kvo object that contains a part\nof the key.\n\nIf a fallback kvo is sent as second parameter then when the request key\nis not found the fallback second parameter is added to the kvdb and then\nvalue is returned.\n\nGet a value using it key part\n\n.. code:: python\n\n    key_value_db.get_like(\"eet\")\n    #\"Hello World\"\n\nGet a value using it key part with fallback kvo\n\n.. code:: python\n\n    key_value_object = KeyValueObject(\"Licence\", \"The MIT Licence\")\n    key_value_db.get_like(\"Li\", key_value_object)\n    #\"The MIT Licence\"\n\nUpdating Data\n~~~~~~~~~~~~~\n\nThere are various way to update a kvp in the kvdb, the value can be\nchanged directly or set to a new KeyValueObject. If you try to set a kvo\nthat does not exist in the kvdb using it key, it is added to the kvdb.\n\nSet\n^^^\n\nThe ``set`` method is used to change the value of the kvo using the\nindex of the kvo or a kvo key.\n\nSet a kvo value using it index\n\n.. code:: python\n\n    key_value_db.set(0, \"Hello World from thecarisma\")\n    #<KeyValueObject@603472244355765772:Key=Greet,Value=Hello World from thecarisma>\n\nSet a kvo value using it key\n\n.. code:: python\n\n    key_value_db.set(\"Greet\", \"Hello World from thecarisma\")\n    #<KeyValueObject@603472244355765772:Key=Greet,Value=Hello World from thecarisma>\n\nSet KeyValue Object\n^^^^^^^^^^^^^^^^^^^\n\nCompletly change a KeyValueObject in the kvdb using either it index or\nit key. The kvo is completly replaced which means unique fields like the\nhashcode of the kvo changes. When the kvo is set using it key if the\ncorresponding kvo does not exist it is added into the kvdb. Note that\nthis method completly changes the kvo so it can be used to replace a\nkvo.\n\nSet a kvo using it index\n\n.. code:: python\n\n    key_value_object = KeyValueObject(\"Licence\", \"The MIT Licence\")\n    key_value_db.set_keyValueObject(0, key_value_object)\n    #<KeyValueObject@6034545687687898767:Key=Licence,Value=The MIT Licence>\n\nSet a kvo value using it key\n\n.. code:: python\n\n    key_value_object = KeyValueObject(\"Licence\", \"The MIT Licence\")\n    key_value_db.set_key_value_object(\"Greet\", key_value_object)\n    #<KeyValueObject@6034545687687898767:Key=Licence,Value=The MIT Licence>\n\nInserting Data\n~~~~~~~~~~~~~~\n\nA new kvp can be inserted by invoking the ``add`` method. The kvp can be\nadded using it key and value or by directly adding the KeyValueObject to\nthe kvdb.\n\nAdd a new kvp using the key and value\n\n.. code:: python\n\n    key_value_db.add(\"Key\", \"This is the value\")\n\nAdd a new kvp using a new KeyValueObject\n\n.. code:: python\n\n    key_value_object = KeyValueObject(\"Key\", \"This is the value\")\n    key_value_db.add(key_value_object)\n\nRemoving Data\n~~~~~~~~~~~~~\n\nRemove a kvp completely from the kvdb using either it key of the integer\nindex. The kvp that was removed is returned from the method. If the\nindex does not exist out of bound error occur and if a kvo with the key\nis not present nothing is done but an empty kvo is returned.\n\nRemove a kvp using integer index\n\n.. code:: python\n\n    key_value_db.remove(0)\n    #removes the first kvp in the kvdb\n    #<KeyValueObject@6034722440246165772:Key=Greet,Value=Hello World>\n\nRemove a kvp using it key\n\n.. code:: python\n\n    key_value_db.remove(\"Greet\")\n    #removes the first kvp in the kvdb\n    #<KeyValueObject@6034722440246165772:Key=Greet,Value=Hello World>\n\nSize, Clear, isEmpty\n--------------------\n\nSize\n~~~~\n\nGet the size of the kvo in the kvdb.\n\n.. code:: python\n\n    key_value_db.size()\n    #4\n\nClear\n~~~~~\n\nRemove all the elements and kvo from the kvdb\n\n.. code:: python\n\n    key_value_db.clear()\n    #key_value_db.size() = 0\n\nisEmpty\n~~~~~~~\n\nCheck whether the kvdb contains any kvo in it.\n\n.. code:: python\n\n    key_value_db.is_empty();\n    #false\n\nSaving collection\n-----------------\n\nThe kvp collection kvdb can be inspected as a string using the\n``__str__`` method. The returned value can be saved locally by writing\nto a persistent storage or to a plain text file. The output of the\n``__str__`` method is determined by the kvos, the seperator and the\ndelimeter.\n\n.. code:: python\n\n    key_value_db.__str__();\n    #\"Greet=Hello World,Project=KeyValueDB,Project=KeyValueDB,Licence=The MIT Licence\"\n\nIterating collection\n--------------------\n\nThe KeyValueDB object can be iterated natively using the ``for..in``\nloop expression.\n\n.. code:: python\n\n    for kvo in key_value_db:\n        #operate on the KeyValueObject\n\nHow it works\n------------\n\nKeyValueObject class contains the key and value field and the fields\nsetter and getter. The KeyValueObject is the main internal type used in\nthe KeyValueDB class.\n\nIn KeyValueDB the key value pair is stored in ``[KeyValueObject...]``\ntype, all search, updating and removal is done on the\n``keyValueObjects`` in the class. The string sent as first parameter if\nparsed into valid key value using the separator and delimiter fields.\nThe ``__str__`` method also parse the ``keyValueObjects`` content into a\nvalid string with regards to the separator and delimeter.\n\nContributing\n------------\n\nBefore you begin contribution please read the contribution guide at\n`CONTRIBUTING GUIDE <https://keyvaluedb.github.io/contributing.html>`__\n\nYou can open issue or file a request that only address problems in this\nimplementation on this repo, if the issue address the concepts of the\npackage then create an issue or rfc\n`here <https://github.com/keyvaluedb/keyvaluedb.github.io/>`__\n\nSupport\n-------\n\nYou can support some of this community as they make big impact in the\ndevelopement of people to get started with software engineering.\n\n-  https://www.patreon.com/devcareer\n\nLicense\n-------\n\nMIT License Copyright (c) 2019 Adewale Azeez - keyvaluedb", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://keyvaluedb.github.io/", "keywords": "key-value,database,python,package,quick,simple,dictionary", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "key-value-db", "package_url": "https://pypi.org/project/key-value-db/", "platform": "any", "project_url": "https://pypi.org/project/key-value-db/", "project_urls": {"Homepage": "https://keyvaluedb.github.io/"}, "release_url": "https://pypi.org/project/key-value-db/1.1.7/", "requires_dist": null, "requires_python": "", "summary": "Light weight package to quickly and easily manage, load, update and save key-value type database", "version": "1.1.7", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Light weight package to quickly and easily manage, load, update and save\nkey-value type database</p>\n<p>The sample use cases of this package is loading configuration file,\nlanguage file, preference setting in an application. More use cases can\nbe seen <a href=\"https://keyvaluedb.github.io/usecases/index.html\" rel=\"nofollow\">here</a>.</p>\n<p>The package does not do any Input and Output operation as there are\nseveral way to read and write to file and the methods has their strength\nand weakness therefore the developer has to find the efficient way to\nload and save locally.</p>\n<hr class=\"docutils\">\n<div id=\"table-of-content\">\n<h2>Table of content</h2>\n<ul>\n<li><a href=\"#installation\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"#example\" rel=\"nofollow\">Example</a></li>\n<li><a href=\"#legends\" rel=\"nofollow\">Legends</a></li>\n<li><a href=\"#api\" rel=\"nofollow\">API</a><ul>\n<li><a href=\"#creating/loading-a-document\" rel=\"nofollow\">Creating/loading a document</a></li>\n<li><a href=\"#inserting-data\" rel=\"nofollow\">Inserting data</a></li>\n<li><a href=\"#finding-data\" rel=\"nofollow\">Finding data</a><ul>\n<li><a href=\"#get-keyvalue-object\" rel=\"nofollow\">Get KeyValue Object</a></li>\n<li><a href=\"#get-like-keyvalue-object\" rel=\"nofollow\">Get Like KeyValue Object</a></li>\n<li><a href=\"#get-like\" rel=\"nofollow\">Get</a></li>\n<li><a href=\"#get-like\" rel=\"nofollow\">Get Like</a></li>\n</ul>\n</li>\n<li><a href=\"#updating-data\" rel=\"nofollow\">Updating data</a><ul>\n<li><a href=\"#set\" rel=\"nofollow\">Set</a></li>\n<li><a href=\"#set-keyvalue-object\" rel=\"nofollow\">Set KeyValue Object</a></li>\n</ul>\n</li>\n<li><a href=\"#inserting-data\" rel=\"nofollow\">Inserting data</a></li>\n<li><a href=\"#removing-data\" rel=\"nofollow\">Removing data</a></li>\n<li><a href=\"#size,-clear,-isempty\" rel=\"nofollow\">Size, Clear, isEmpty</a><ul>\n<li><a href=\"#size\" rel=\"nofollow\">Size</a></li>\n<li><a href=\"#clear\" rel=\"nofollow\">Clear</a></li>\n<li><a href=\"#isempty\" rel=\"nofollow\">isEmpty</a></li>\n</ul>\n</li>\n<li><a href=\"#saving-collection\" rel=\"nofollow\">Saving collection</a></li>\n<li><a href=\"#iterating-collection\" rel=\"nofollow\">Iterating collection</a></li>\n</ul>\n</li>\n<li><a href=\"#how-it-works\" rel=\"nofollow\">How it works</a></li>\n<li><a href=\"#contributing\" rel=\"nofollow\">Contributing</a></li>\n<li><a href=\"#support\" rel=\"nofollow\">Support</a></li>\n<li><a href=\"#license\" rel=\"nofollow\">License</a></li>\n</ul>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Install the package from the Python package index or download the zip\nand .egg file from\n<a href=\"https://github.com/keyvaluedb/key-value-db-python/releases\" rel=\"nofollow\">releases</a>.</p>\n<pre>pip install key_value_db\n</pre>\n</div>\n<div id=\"example\">\n<h2>Example</h2>\n<p>The following example load, update, read and remove a simple key value\nobject</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">key_value_db</span> <span class=\"kn\">import</span> <span class=\"n\">KeyValueDB</span><span class=\"p\">,</span> <span class=\"n\">KeyValueObject</span>\n\n<span class=\"c1\">#initialize the key-value</span>\n<span class=\"n\">key_value_db</span> <span class=\"o\">=</span> <span class=\"n\">KeyValueDB</span><span class=\"p\">(</span><span class=\"s2\">\"Greet=Hello World,Project=KeyValueDB\"</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"s1\">'='</span><span class=\"p\">,</span> <span class=\"s1\">','</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">)</span>\n\n<span class=\"c1\">#get an object</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">key_value_db</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"Greet\"</span><span class=\"p\">))</span>\n\n<span class=\"c1\">#remove an object</span>\n<span class=\"n\">key_value_db</span><span class=\"o\">.</span><span class=\"n\">remove</span><span class=\"p\">(</span><span class=\"s2\">\"Greet\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\">#add an object</span>\n<span class=\"n\">key_value_db</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"s2\">\"What\"</span><span class=\"p\">,</span> <span class=\"s2\">\"i don't know what to write here\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\">#print all the objects</span>\n<span class=\"k\">for</span> <span class=\"n\">kvo</span> <span class=\"ow\">in</span> <span class=\"n\">key_value_db</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">kvo</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"legends\">\n<h2>Legends</h2>\n<pre>kvp  - Key Value Pair\nkvdb - Key value Database\npss  - Possibly\nkvo  - Key Value Object\n</pre>\n</div>\n<div id=\"api\">\n<h2>API</h2>\n<p>Only string type is used as the key and value of the kvo. A kvo can be\nused to replace or set the value for a key.</p>\n<div id=\"creating-loading-a-document\">\n<h3>Creating/loading a document</h3>\n<p>You can use the package to update and create an existing key value\ndatabase. This library does not read the database from a file which\nmeans you have to find a way to read a string from the file.</p>\n<p>Create a new keyValueDB. The default seperator between the key and value\nis <tt>=</tt> and the delimeter between the kvp is <tt>\\n</tt>(newline).</p>\n<pre><span class=\"n\">key_value_db</span> <span class=\"o\">=</span> <span class=\"n\">KeyValueDB</span><span class=\"p\">()</span>\n</pre>\n<p>To load existing KeyValueDB</p>\n<pre><span class=\"n\">key_value_db</span> <span class=\"o\">=</span> <span class=\"n\">KeyValueDB</span><span class=\"p\">(</span>\n        <span class=\"s2\">\"Greet=Hello World,Project=KeyValueDB\"</span><span class=\"p\">,</span> <span class=\"c1\">#pss read string from file</span>\n        <span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"c1\">#case sensitive is true</span>\n        <span class=\"s1\">'='</span><span class=\"p\">,</span> <span class=\"c1\">#the seperator from key and value</span>\n        <span class=\"s1\">','</span><span class=\"p\">,</span> <span class=\"c1\">#the delimeter for the key-value-pair</span>\n        <span class=\"kc\">False</span> <span class=\"c1\">#error tolerance if true no exception is thrown</span>\n        <span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"inserting-data\">\n<h3>Inserting Data</h3>\n<p>The only accepted type that can be inserted is a valid\n<tt>KeyValueObject</tt> and <tt>String</tt>. The method <tt>add</tt> can be used to add\na new kvp into the object.</p>\n<p>Add a kvp with it key and value</p>\n<pre><span class=\"n\">key_value_db</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"s2\">\"Greet\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Hello World\"</span><span class=\"p\">)</span>\n</pre>\n<p>Add a kvp using the <tt>KeyValueObject</tt> class.</p>\n<pre><span class=\"n\">key_value_object</span> <span class=\"o\">=</span> <span class=\"n\">KeyValueObject</span><span class=\"p\">(</span><span class=\"s2\">\"Greet\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Hello World\"</span><span class=\"p\">)</span>\n<span class=\"n\">key_value_db</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">keyValueObject</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"finding-data\">\n<h3>Finding Data</h3>\n<p>There are several way to find and get a value from the kvdb object. The\nvalue or the KeyValueObject can be gotten using the methods below</p>\n<div id=\"get-keyvalue-object\">\n<h4>Get KeyValue Object</h4>\n<p>You can get the kvo using either the key or index. If the corresponding\nkvo is not found, an empty kvo is added to the db and then returned but\nnot in the case when requested with the integer index. If a fallback kvo\nis sent as second parameter then when the request kvo is not found the\nfallback second parameter is added to the kvdb and then returned.</p>\n<p>Get the kvo using it integer index</p>\n<pre><span class=\"n\">key_value_db</span><span class=\"o\">.</span><span class=\"n\">get_key_value_object</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"c1\">#&lt;KeyValueObject@6034722440246165772:Key=Greet,Value=Hello World&gt;</span>\n</pre>\n<p>Get the kvo using it key</p>\n<pre><span class=\"n\">key_value_db</span><span class=\"o\">.</span><span class=\"n\">get_key_value_object</span><span class=\"p\">(</span><span class=\"s2\">\"Greet\"</span><span class=\"p\">)</span>\n<span class=\"c1\">#&lt;KeyValueObject@6034722440246165772:Key=Greet,Value=Hello World&gt;</span>\n</pre>\n<p>Get the kvo using it key with fallback kvo</p>\n<pre><span class=\"n\">key_value_object</span> <span class=\"o\">=</span> <span class=\"n\">KeyValueObject</span><span class=\"p\">(</span><span class=\"s2\">\"Name\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Adewale Azeez\"</span><span class=\"p\">)</span>\n<span class=\"n\">key_value_db</span><span class=\"o\">.</span><span class=\"n\">get_key_value_object</span><span class=\"p\">(</span><span class=\"s2\">\"Name\"</span><span class=\"p\">,</span> <span class=\"n\">key_value_object</span><span class=\"p\">)</span>\n<span class=\"c1\">#&lt;KeyValueObject@6034722440246165772:Key=Name,Value=Adewale Azeez&gt;</span>\n</pre>\n</div>\n<div id=\"get-like-keyvalue-object\">\n<h4>Get Like KeyValue Object</h4>\n<p>Get a kvo by checking the kvdb for the kvo object that contains a part\nof the key. If a fallback kvo is sent as second parameter then when the\nrequest kvo is not found the fallback second parameter is added to the\nkvdb and then returned.</p>\n<p>Get a similar kvo using it key part</p>\n<pre><span class=\"n\">key_value_db</span><span class=\"o\">.</span><span class=\"n\">get_like_key_value_object</span><span class=\"p\">(</span><span class=\"s2\">\"eet\"</span><span class=\"p\">)</span>\n<span class=\"c1\">#&lt;KeyValueObject@6034722440246165772:Key=Greet,Value=Hello World&gt;</span>\n</pre>\n<p>Get a similar kvo using it key part with fallback kvo</p>\n<pre><span class=\"n\">key_value_object</span> <span class=\"o\">=</span> <span class=\"n\">KeyValueObject</span><span class=\"p\">(</span><span class=\"s2\">\"Name\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Adewale Azeez\"</span><span class=\"p\">)</span>\n<span class=\"n\">key_value_db</span><span class=\"o\">.</span><span class=\"n\">get_like_key_value_object</span><span class=\"p\">(</span><span class=\"s2\">\"Nam\"</span><span class=\"p\">,</span> <span class=\"n\">key_value_object</span><span class=\"p\">)</span>\n<span class=\"c1\">#&lt;KeyValueObject@6034722440246165772:Key=Name,Value=Adewale Azeez&gt;</span>\n</pre>\n</div>\n<div id=\"get\">\n<h4>Get</h4>\n<p>You can get a kvdb value using either the key or index. If the\ncorresponding value is not found, an empty string is added to the db and\nthen returned but not in the case when requested with the integer index.</p>\n<p>If a fallback kvo is sent as second parameter then when the request key\nis not found the fallback second parameter is added to the kvdb and then\nvalue is returned. If a string value is sent as the second value it is\nreturned if the key is not found in the kvdb.</p>\n<p>Get a value using it integer index</p>\n<pre><span class=\"n\">key_value_db</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"c1\">#\"Hello World\"</span>\n</pre>\n<p>Get the value using it key</p>\n<pre><span class=\"n\">key_value_db</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"Greet\"</span><span class=\"p\">)</span>\n<span class=\"c1\">#\"Hello World\"</span>\n</pre>\n<p>Get the kvo using it key with fallback value</p>\n<pre><span class=\"n\">key_value_db</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"Licence\"</span><span class=\"p\">,</span> <span class=\"s2\">\"The MIT Licence\"</span><span class=\"p\">)</span>\n<span class=\"c1\">#\"The MIT Licence\"</span>\n</pre>\n<p>Get the kvo using it key with fallback kvo</p>\n<pre><span class=\"n\">key_value_object</span> <span class=\"o\">=</span> <span class=\"n\">KeyValueObject</span><span class=\"p\">(</span><span class=\"s2\">\"Licence\"</span><span class=\"p\">,</span> <span class=\"s2\">\"The MIT Licence\"</span><span class=\"p\">)</span>\n<span class=\"n\">key_value_db</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"Name\"</span><span class=\"p\">,</span> <span class=\"n\">key_value_object</span><span class=\"p\">)</span>\n<span class=\"c1\">#\"The MIT Licence\"</span>\n</pre>\n</div>\n<div id=\"get-like\">\n<h4>Get Like</h4>\n<p>Get a value by checking the kvdb for the kvo object that contains a part\nof the key.</p>\n<p>If a fallback kvo is sent as second parameter then when the request key\nis not found the fallback second parameter is added to the kvdb and then\nvalue is returned.</p>\n<p>Get a value using it key part</p>\n<pre><span class=\"n\">key_value_db</span><span class=\"o\">.</span><span class=\"n\">get_like</span><span class=\"p\">(</span><span class=\"s2\">\"eet\"</span><span class=\"p\">)</span>\n<span class=\"c1\">#\"Hello World\"</span>\n</pre>\n<p>Get a value using it key part with fallback kvo</p>\n<pre><span class=\"n\">key_value_object</span> <span class=\"o\">=</span> <span class=\"n\">KeyValueObject</span><span class=\"p\">(</span><span class=\"s2\">\"Licence\"</span><span class=\"p\">,</span> <span class=\"s2\">\"The MIT Licence\"</span><span class=\"p\">)</span>\n<span class=\"n\">key_value_db</span><span class=\"o\">.</span><span class=\"n\">get_like</span><span class=\"p\">(</span><span class=\"s2\">\"Li\"</span><span class=\"p\">,</span> <span class=\"n\">key_value_object</span><span class=\"p\">)</span>\n<span class=\"c1\">#\"The MIT Licence\"</span>\n</pre>\n</div>\n</div>\n<div id=\"updating-data\">\n<h3>Updating Data</h3>\n<p>There are various way to update a kvp in the kvdb, the value can be\nchanged directly or set to a new KeyValueObject. If you try to set a kvo\nthat does not exist in the kvdb using it key, it is added to the kvdb.</p>\n<div id=\"set\">\n<h4>Set</h4>\n<p>The <tt>set</tt> method is used to change the value of the kvo using the\nindex of the kvo or a kvo key.</p>\n<p>Set a kvo value using it index</p>\n<pre><span class=\"n\">key_value_db</span><span class=\"o\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s2\">\"Hello World from thecarisma\"</span><span class=\"p\">)</span>\n<span class=\"c1\">#&lt;KeyValueObject@603472244355765772:Key=Greet,Value=Hello World from thecarisma&gt;</span>\n</pre>\n<p>Set a kvo value using it key</p>\n<pre><span class=\"n\">key_value_db</span><span class=\"o\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"s2\">\"Greet\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Hello World from thecarisma\"</span><span class=\"p\">)</span>\n<span class=\"c1\">#&lt;KeyValueObject@603472244355765772:Key=Greet,Value=Hello World from thecarisma&gt;</span>\n</pre>\n</div>\n<div id=\"set-keyvalue-object\">\n<h4>Set KeyValue Object</h4>\n<p>Completly change a KeyValueObject in the kvdb using either it index or\nit key. The kvo is completly replaced which means unique fields like the\nhashcode of the kvo changes. When the kvo is set using it key if the\ncorresponding kvo does not exist it is added into the kvdb. Note that\nthis method completly changes the kvo so it can be used to replace a\nkvo.</p>\n<p>Set a kvo using it index</p>\n<pre><span class=\"n\">key_value_object</span> <span class=\"o\">=</span> <span class=\"n\">KeyValueObject</span><span class=\"p\">(</span><span class=\"s2\">\"Licence\"</span><span class=\"p\">,</span> <span class=\"s2\">\"The MIT Licence\"</span><span class=\"p\">)</span>\n<span class=\"n\">key_value_db</span><span class=\"o\">.</span><span class=\"n\">set_keyValueObject</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">key_value_object</span><span class=\"p\">)</span>\n<span class=\"c1\">#&lt;KeyValueObject@6034545687687898767:Key=Licence,Value=The MIT Licence&gt;</span>\n</pre>\n<p>Set a kvo value using it key</p>\n<pre><span class=\"n\">key_value_object</span> <span class=\"o\">=</span> <span class=\"n\">KeyValueObject</span><span class=\"p\">(</span><span class=\"s2\">\"Licence\"</span><span class=\"p\">,</span> <span class=\"s2\">\"The MIT Licence\"</span><span class=\"p\">)</span>\n<span class=\"n\">key_value_db</span><span class=\"o\">.</span><span class=\"n\">set_key_value_object</span><span class=\"p\">(</span><span class=\"s2\">\"Greet\"</span><span class=\"p\">,</span> <span class=\"n\">key_value_object</span><span class=\"p\">)</span>\n<span class=\"c1\">#&lt;KeyValueObject@6034545687687898767:Key=Licence,Value=The MIT Licence&gt;</span>\n</pre>\n</div>\n</div>\n<div id=\"id1\">\n<h3>Inserting Data</h3>\n<p>A new kvp can be inserted by invoking the <tt>add</tt> method. The kvp can be\nadded using it key and value or by directly adding the KeyValueObject to\nthe kvdb.</p>\n<p>Add a new kvp using the key and value</p>\n<pre><span class=\"n\">key_value_db</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"s2\">\"Key\"</span><span class=\"p\">,</span> <span class=\"s2\">\"This is the value\"</span><span class=\"p\">)</span>\n</pre>\n<p>Add a new kvp using a new KeyValueObject</p>\n<pre><span class=\"n\">key_value_object</span> <span class=\"o\">=</span> <span class=\"n\">KeyValueObject</span><span class=\"p\">(</span><span class=\"s2\">\"Key\"</span><span class=\"p\">,</span> <span class=\"s2\">\"This is the value\"</span><span class=\"p\">)</span>\n<span class=\"n\">key_value_db</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">key_value_object</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"removing-data\">\n<h3>Removing Data</h3>\n<p>Remove a kvp completely from the kvdb using either it key of the integer\nindex. The kvp that was removed is returned from the method. If the\nindex does not exist out of bound error occur and if a kvo with the key\nis not present nothing is done but an empty kvo is returned.</p>\n<p>Remove a kvp using integer index</p>\n<pre><span class=\"n\">key_value_db</span><span class=\"o\">.</span><span class=\"n\">remove</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"c1\">#removes the first kvp in the kvdb</span>\n<span class=\"c1\">#&lt;KeyValueObject@6034722440246165772:Key=Greet,Value=Hello World&gt;</span>\n</pre>\n<p>Remove a kvp using it key</p>\n<pre><span class=\"n\">key_value_db</span><span class=\"o\">.</span><span class=\"n\">remove</span><span class=\"p\">(</span><span class=\"s2\">\"Greet\"</span><span class=\"p\">)</span>\n<span class=\"c1\">#removes the first kvp in the kvdb</span>\n<span class=\"c1\">#&lt;KeyValueObject@6034722440246165772:Key=Greet,Value=Hello World&gt;</span>\n</pre>\n</div>\n</div>\n<div id=\"size-clear-isempty\">\n<h2>Size, Clear, isEmpty</h2>\n<div id=\"size\">\n<h3>Size</h3>\n<p>Get the size of the kvo in the kvdb.</p>\n<pre><span class=\"n\">key_value_db</span><span class=\"o\">.</span><span class=\"n\">size</span><span class=\"p\">()</span>\n<span class=\"c1\">#4</span>\n</pre>\n</div>\n<div id=\"clear\">\n<h3>Clear</h3>\n<p>Remove all the elements and kvo from the kvdb</p>\n<pre><span class=\"n\">key_value_db</span><span class=\"o\">.</span><span class=\"n\">clear</span><span class=\"p\">()</span>\n<span class=\"c1\">#key_value_db.size() = 0</span>\n</pre>\n</div>\n<div id=\"isempty\">\n<h3>isEmpty</h3>\n<p>Check whether the kvdb contains any kvo in it.</p>\n<pre><span class=\"n\">key_value_db</span><span class=\"o\">.</span><span class=\"n\">is_empty</span><span class=\"p\">();</span>\n<span class=\"c1\">#false</span>\n</pre>\n</div>\n</div>\n<div id=\"saving-collection\">\n<h2>Saving collection</h2>\n<p>The kvp collection kvdb can be inspected as a string using the\n<tt>__str__</tt> method. The returned value can be saved locally by writing\nto a persistent storage or to a plain text file. The output of the\n<tt>__str__</tt> method is determined by the kvos, the seperator and the\ndelimeter.</p>\n<pre><span class=\"n\">key_value_db</span><span class=\"o\">.</span><span class=\"fm\">__str__</span><span class=\"p\">();</span>\n<span class=\"c1\">#\"Greet=Hello World,Project=KeyValueDB,Project=KeyValueDB,Licence=The MIT Licence\"</span>\n</pre>\n</div>\n<div id=\"iterating-collection\">\n<h2>Iterating collection</h2>\n<p>The KeyValueDB object can be iterated natively using the <tt><span class=\"pre\">for..in</span></tt>\nloop expression.</p>\n<pre><span class=\"k\">for</span> <span class=\"n\">kvo</span> <span class=\"ow\">in</span> <span class=\"n\">key_value_db</span><span class=\"p\">:</span>\n    <span class=\"c1\">#operate on the KeyValueObject</span>\n</pre>\n</div>\n<div id=\"how-it-works\">\n<h2>How it works</h2>\n<p>KeyValueObject class contains the key and value field and the fields\nsetter and getter. The KeyValueObject is the main internal type used in\nthe KeyValueDB class.</p>\n<p>In KeyValueDB the key value pair is stored in <tt><span class=\"pre\">[KeyValueObject...]</span></tt>\ntype, all search, updating and removal is done on the\n<tt>keyValueObjects</tt> in the class. The string sent as first parameter if\nparsed into valid key value using the separator and delimiter fields.\nThe <tt>__str__</tt> method also parse the <tt>keyValueObjects</tt> content into a\nvalid string with regards to the separator and delimeter.</p>\n</div>\n<div id=\"contributing\">\n<h2>Contributing</h2>\n<p>Before you begin contribution please read the contribution guide at\n<a href=\"https://keyvaluedb.github.io/contributing.html\" rel=\"nofollow\">CONTRIBUTING GUIDE</a></p>\n<p>You can open issue or file a request that only address problems in this\nimplementation on this repo, if the issue address the concepts of the\npackage then create an issue or rfc\n<a href=\"https://github.com/keyvaluedb/keyvaluedb.github.io/\" rel=\"nofollow\">here</a></p>\n</div>\n<div id=\"support\">\n<h2>Support</h2>\n<p>You can support some of this community as they make big impact in the\ndevelopement of people to get started with software engineering.</p>\n<ul>\n<li><a href=\"https://www.patreon.com/devcareer\" rel=\"nofollow\">https://www.patreon.com/devcareer</a></li>\n</ul>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>MIT License Copyright (c) 2019 Adewale Azeez - keyvaluedb</p>\n</div>\n\n          </div>"}, "last_serial": 6506158, "releases": {"1.1.2": [{"comment_text": "", "digests": {"md5": "9374a8536d05f6586d740be5b9c5dd9f", "sha256": "c91c5d1b78301a4dcd0ed782c8a5cc383d0fc0b116fc2c8ce88273fed2fdf4ac"}, "downloads": -1, "filename": "key_value_db-1.1.2.tar.gz", "has_sig": false, "md5_digest": "9374a8536d05f6586d740be5b9c5dd9f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3043, "upload_time": "2019-08-14T02:00:54", "upload_time_iso_8601": "2019-08-14T02:00:54.566085Z", "url": "https://files.pythonhosted.org/packages/16/9a/621f57a5e41f75dbeb482caf5d9ce9464c8296d3d2df53236d03f8b57152/key_value_db-1.1.2.tar.gz", "yanked": false}], "1.1.5": [{"comment_text": "", "digests": {"md5": "4718e1943b211f1fe85b59b118654107", "sha256": "0819cf0e7a22840d36ce59a4aee1dc5b9dcbe29a96c0029a1b0815ba70b062c4"}, "downloads": -1, "filename": "key_value_db-1.1.5.tar.gz", "has_sig": false, "md5_digest": "4718e1943b211f1fe85b59b118654107", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6561, "upload_time": "2019-12-12T01:03:27", "upload_time_iso_8601": "2019-12-12T01:03:27.353937Z", "url": "https://files.pythonhosted.org/packages/bd/e3/0d4fd0e31a68adfd09ef1d0ae26d65c888ec51c97f65d5c7b3203755067b/key_value_db-1.1.5.tar.gz", "yanked": false}], "1.1.6": [{"comment_text": "", "digests": {"md5": "61fd93a98f822af15756b3462665cf98", "sha256": "87f308b24d2e914cbcd7d3f70cd1bb114d84ab54b64b29de8b3a1c8d03bfb3ea"}, "downloads": -1, "filename": "key_value_db-1.1.6.tar.gz", "has_sig": false, "md5_digest": "61fd93a98f822af15756b3462665cf98", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10743, "upload_time": "2019-12-12T01:19:03", "upload_time_iso_8601": "2019-12-12T01:19:03.897998Z", "url": "https://files.pythonhosted.org/packages/0e/65/02a9358efaef6874e3fb65391a0a69f054f2403e531a097732ff17cd8574/key_value_db-1.1.6.tar.gz", "yanked": false}], "1.1.7": [{"comment_text": "", "digests": {"md5": "fa76da1f06188c36585722c5f6f3d96c", "sha256": "5ec6b67bb842eeb748ff5e314aa3efe87876de77dc97eeeb16a294b65ad9ec15"}, "downloads": -1, "filename": "key_value_db-1.1.7.tar.gz", "has_sig": false, "md5_digest": "fa76da1f06188c36585722c5f6f3d96c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9328, "upload_time": "2020-01-23T12:20:50", "upload_time_iso_8601": "2020-01-23T12:20:50.444540Z", "url": "https://files.pythonhosted.org/packages/be/34/15ac4cbd483ba6a822e2782d35fdaf3e4e7f043c79aa4fb8dcebf3a79fdb/key_value_db-1.1.7.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "fa76da1f06188c36585722c5f6f3d96c", "sha256": "5ec6b67bb842eeb748ff5e314aa3efe87876de77dc97eeeb16a294b65ad9ec15"}, "downloads": -1, "filename": "key_value_db-1.1.7.tar.gz", "has_sig": false, "md5_digest": "fa76da1f06188c36585722c5f6f3d96c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9328, "upload_time": "2020-01-23T12:20:50", "upload_time_iso_8601": "2020-01-23T12:20:50.444540Z", "url": "https://files.pythonhosted.org/packages/be/34/15ac4cbd483ba6a822e2782d35fdaf3e4e7f043c79aa4fb8dcebf3a79fdb/key_value_db-1.1.7.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:49:55 2020"}