{"info": {"author": "OpenBCI, Inc.", "author_email": "contact@openbci.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.6", "Topic :: Software Development :: Build Tools"], "description": "# OpenBCI Python\n\n<p align=\"center\" href=\"\">\n  Provide a stable Python driver for all OpenBCI Biosensors\n</p>\n\nUsing this repo provides a building block for developing with Python. The goal for the Python library is to ***provide a stable Python driver for all OpenBCI Biosensors***, that:\n\n* Allows Python users to install one module and use any board they choose\n* Provides examples of using Python to port data to other apps like lab streaming layer\n* Performs the heavy lifting when extracting and transforming raw binary byte streams\n* Provides a base for the beginner users to use Python to process their OpenBCI data\n\n## To Do\n* Add Ganglion Aux Data\n\n## Requirements\n\n* Python 2.7 or 3.4+\n* Currently the Cyton works on Windows, Linux, and MacOS.\n* Ganglion works on Linux only (Linux VM with enabled Bluetooth works as well).\n* The WiFi shield is known to have reliability issues across different computer configurations. Using it effectively requires advanced technical skills and programming knowledge. Note that the code avaiable here has not been tested accross all platforms.\n\n## Installation\nFirst, make sure you have the necessary dependencies.\n\n```python\npip install numpy pyserial bitstring xmltodict requests\n```\n\nLinux users may need `bluepy` also.\n\nThen you can use pip to install the OpenBCI module.\n\n```python\npip install -i https://test.pypi.org/simple/ pyOpenBCI\n```\n\nOnce installed, try running the examples provided to make sure you can connect to your OpenBCI board.\n\n## Important notes\n\nCurrently the Ganglion board can only be used with a Linux OS. The WiFi shield is known to have reliability issues across different computer configurations. Using it effectively requires advanced technical skills and programming knowledge. Note that the code avaiable here has not been tested accross all platforms.\n\n### Getting Started\n\nFirst you need to initialize your board with one of the following commands:\n\n#### For Cyton board:\n\n```python\n# For Windows replace '*' with the port number\nboard = OpenBCICyton(port='COM*')\n\n# For MacOS and Linux replace '*' with the port number\nboard = OpenBCICyton(port='/dev/ttyUSB*')\n```\n\nTo find the COM port you are connected to you can use the OpenBCI GUI. Otherwise you can leave the port number as None, and the function find_port() will run and connect to the first Cyton Dongle it finds.\n\n#### For Cyton + Daisy:\n\n```python\n# For Windows replace '*' with the port number\nboard = OpenBCICyton(port='COM*', daisy=True)\n\n# For MacOS and Linux replace '*' with the port number\nboard = OpenBCICyton(port='/dev/ttyUSB*', daisy=True)\n```\n\nTo find the COM port you are connected to you can use the OpenBCI GUI. Otherwise you can leave the port number as None, and the function find_port() will run and connect to the first Cyton Dongle it finds.\n\n#### For Ganglion:\n\n```python\n# For Linux replace '*' with the mac address.\nboard = OpenBCIGanglion(mac='*')\n```\nIf you need to find the Ganglion mac address you can use an app like [nRF connect](https://play.google.com/store/apps/details?id=no.nordicsemi.android.mcp&hl=en_US) to find the ganglion. Otherwise you can leave the mac address as None, and the function find_mac() will run (NOTE: You will need to run the script with sudo for this function to work).\n\n#### For Wifi Shield:\n\n```python\nboard = OpenBCIWifi(shield_name='OpenBCI-2254', sample_rate=200)\n```\n\n### Sending commands\n\nOnce you initialize the board you can use the commands on the OpenBCI SDKs ([Ganglion](https://docs.openbci.com/OpenBCI%20Software/06-OpenBCI_Ganglion_SDK), [Cyton](https://docs.openbci.com/OpenBCI%20Software/04-OpenBCI_Cyton_SDK), [Wifi Shield](https://docs.openbci.com/OpenBCI%20Software/08-OpenBCI_Wifi_SDK)) to send commands to the board using python (make sure your commands are strings).\n\n```python\n# Write commands to the board\nboard.write_command(command)\n```\n\nHere is a table of the most common ones:\n\n|                               | Ganglion SDK | Cyton SDK       | Cyton & Daisy SDK (Additional Commands) | Wifi Shield SDK (Additional Commands)                                                                                                                                    |\n|-------------------------------|--------------|-----------------|-----------------------------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Turn Channels OFF             | 1 2 3 4      | 1 2 3 4 5 6 7 8 | q w e r t y u i                         |                                                                                                                                                                          |\n| Turn Channels ON              |              | ! @ # $ % ^ & * | Q W E R T Y U I                         |                                                                                                                                                                          |\n| Connect to internal GND       |              | 0               |                                         |                                                                                                                                                                          |\n| Enable Synthetic Square Wave  | [            | [               |                                         |                                                                                                                                                                          |\n| Disable Synthetic Square Wave | ]            | ]               |                                         |                                                                                                                                                                          |\n| Connect to DC Signal          |              | p               |                                         |                                                                                                                                                                          |\n| Set Channels to Default       |              | d               |                                         |                                                                                                                                                                          |\n| Start Streaming Data          | b            | b               |                                         |                                                                                                                                                                          |\n| Stop Streaming Data           | s            | s               |                                         |                                                                                                                                                                          |\n| Soft Reset                    | v            | v               |                                         | ;                                                                                                                                                                        |\n| Enable Accelerometer          | n            |                 |                                         |                                                                                                                                                                          |\n| Disable Accelerometer         | N            |                 |                                         |                                                                                                                                                                          |\n\n\n### Initializing Stream\n\nTo start your stream you can use the following command with a callback function. You can look at the examples folder for some pre-written callback functions.\n\n```python\n# Start stream\nboard.start_stream(callback)\n```\nThe output of the start_stream function is the OpenBCISample on the callback function. The OpenBCISample object has the following attributes:\n\n* packet_id = The ID of the incomming packet.\n* channels_data = The raw EEG data of each channel. 4 for the Ganglion, 8 for the Cyton, and 16 for the Cyton + Daisy.\n* aux_data = Accelerometer data.\n\nBecause the channels_data and aux_data is the raw data in counts read by the board, we need to multiply the data by a scale factor. There is a specific scale factor for each board:\n\n#### For the Cyton and Cyton + Daisy boards:\n\nMultiply uVolts_per_count to convert the channels_data to uVolts.\n\n```python\nuVolts_per_count = (4500000)/24/(2**23-1) #uV/count\n```\nMultiply accel_G_per_count to convert the aux_data to G.\n\n```python\naccel_G_per_count = 0.002 / (2**4) #G/count\n```\n#### For the Ganglion Board\n\nMultiply Volts_per_count to convert the channels_data to Volts.\n\n```python\nVolts_per_count = 1.2 * 8388607.0 * 1.5 * 51.0 #V/count\n```\nMultiply accel_G_per_count to convert the aux_data to G.\n\n```python\naccel_G_per_count = 0.032 #G/count\n```\n\n#### For the Wifi Shield\n\nThe Wifi Shield already outputs the data in Volts and the aux data in G.\n\n### Example (Print Raw Data)\n\nTo test this example, use `py Examples\\print_raw_example.py` or `python Examples\\print_raw_example.py`.\n\n```python\nfrom pyOpenBCI import OpenBCICyton\n\ndef print_raw(sample):\n    print(sample.channels_data)\n\nboard = OpenBCICyton(port='COM5', daisy=False)\n\nboard.start_stream(print_raw)\n\n```\n\n### Example (Simple LSL Streamer)\n\nTo run this example, use `py Examples\\lsl_example.py` or `python Examples\\lsl_example.py`.\n\n```python\n\nfrom pyOpenBCI import OpenBCICyton\nfrom pylsl import StreamInfo, StreamOutlet\nimport numpy as np\n\nSCALE_FACTOR_EEG = (4500000)/24/(2**23-1) #uV/count\nSCALE_FACTOR_AUX = 0.002 / (2**4)\n\n\nprint(\"Creating LSL stream for EEG. \\nName: OpenBCIEEG\\nID: OpenBCItestEEG\\n\")\n\ninfo_eeg = StreamInfo('OpenBCIEEG', 'EEG', 8, 250, 'float32', 'OpenBCItestEEG')\n\nprint(\"Creating LSL stream for AUX. \\nName: OpenBCIAUX\\nID: OpenBCItestEEG\\n\")\n\ninfo_aux = StreamInfo('OpenBCIAUX', 'AUX', 3, 250, 'float32', 'OpenBCItestAUX')\n\noutlet_eeg = StreamOutlet(info_eeg)\noutlet_aux = StreamOutlet(info_aux)\n\ndef lsl_streamers(sample):\n    outlet_eeg.push_sample(np.array(sample.channels_data)*SCALE_FACTOR_EEG)\n    outlet_aux.push_sample(np.array(sample.aux_data)*SCALE_FACTOR_AUX)\n\nboard = OpenBCICyton(port='COM5', daisy=False)\n\nboard.start_stream(lsl_streamers)\n\n```\n### Who are we?\n\nThe founder of the OpenBCI Python repository is Jermey Frey. The Python driver is one of the most popular repositories and has the most contributors!\n\nThe contributors to these repos are people using Python mainly for their data acquisition and analytics.\n\n\n### Get involved\n\nIf you think you can help in any of the areas listed above (and we bet you can) or in any of the many areas that we haven't yet thought of (and here we're *sure* you can) then please check out our [contributors' guidelines](CONTRIBUTING.md) and our [roadmap](ROADMAP.md).\n\nPlease note that it's very important to us that we maintain a positive and supportive environment for everyone who wants to participate. When you join us we ask that you follow our [code of conduct](CODE_OF_CONDUCT.md) in all interactions both on and offline.\n\n### Contact us\n\nIf you want to report a problem or suggest an enhancement we'd love for you to [open an issue](../../issues) at this github repository because then we can get right on it. But you can also contact [AJ][link_aj_keller] by email (pushtheworldllc AT gmail DOT com) or on [twitter](https://twitter.com/aj-ptw).\n\n### Find out more\n\nYou might be interested in:\n\n* Purchase a [Cyton][link_shop_cyton] | [Ganglion][link_shop_ganglion] | [WiFi Shield][link_shop_wifi_shield] from [OpenBCI][link_openbci]\n* Get taught how to use OpenBCI devices by [Push The World][link_ptw] BCI Consulting\n\nAnd of course, you'll want to know our:\n\n* [Contributors' guidelines](CONTRIBUTING.md)\n* [Roadmap](ROADMAP.md)\n\n### Glossary\n\nOpenBCI boards are commonly referred to as _biosensors_. A biosensor converts biological data into digital data. \n\nThe [Ganglion][link_shop_ganglion] has 4 channels, meaning the Ganglion can take four simultaneous voltage readings.\n \nThe [Cyton][link_shop_cyton] has 8 channels and [Cyton with Daisy][link_shop_cyton_daisy] has 16 channels. \n\nGenerally speaking, the Cyton records at a high quality with less noise. Noise is anything that is not signal.\n\n### Thank you\n\nThank you so much (Danke sch\u00c3\u00b6n! Merci beaucoup!) for visiting the project and we do hope that you'll join us on this amazing journey to make programming with OpenBCI fun and easy.\n\n### <a name=\"license\"></a> License:\n\nMIT\n\n[link_shop_wifi_shield]: https://shop.openbci.com/collections/frontpage/products/wifi-shield?variant=44534009550\n[link_shop_ganglion]: https://shop.openbci.com/collections/frontpage/products/pre-order-ganglion-board\n[link_shop_cyton]: https://shop.openbci.com/collections/frontpage/products/cyton-biosensing-board-8-channel\n[link_shop_cyton_daisy]: https://shop.openbci.com/collections/frontpage/products/cyton-daisy-biosensing-boards-16-channel\n[link_nodejs_cyton]: https://github.com/openbci/openbci_nodejs_cyton\n[link_nodejs_ganglion]: https://github.com/openbci/openbci_nodejs_ganglion\n[link_nodejs_wifi]: https://github.com/openbci/openbci_nodejs_wifi\n[link_javascript_utilities]: https://github.com/OpenBCI/OpenBCI_JavaScript_Utilities\n[link_openbci]: http://www.openbci.com", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://github.com/andreaortuno/pyOpenBCI/archive/0.13.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/andreaortuno/pyOpenBCI", "keywords": "device,control,eeg,emg,ekg,ads1299,openbci,ganglion,cyton,wifi", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "pyOpenBCI", "package_url": "https://pypi.org/project/pyOpenBCI/", "platform": "", "project_url": "https://pypi.org/project/pyOpenBCI/", "project_urls": {"Download": "https://github.com/andreaortuno/pyOpenBCI/archive/0.13.tar.gz", "Homepage": "https://github.com/andreaortuno/pyOpenBCI"}, "release_url": "https://pypi.org/project/pyOpenBCI/0.13/", "requires_dist": null, "requires_python": "", "summary": "A lib for controlling OpenBCI devices", "version": "0.13", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>OpenBCI Python</h1>\n<p align=\"center\">\n  Provide a stable Python driver for all OpenBCI Biosensors\n</p>\n<p>Using this repo provides a building block for developing with Python. The goal for the Python library is to <em><strong>provide a stable Python driver for all OpenBCI Biosensors</strong></em>, that:</p>\n<ul>\n<li>Allows Python users to install one module and use any board they choose</li>\n<li>Provides examples of using Python to port data to other apps like lab streaming layer</li>\n<li>Performs the heavy lifting when extracting and transforming raw binary byte streams</li>\n<li>Provides a base for the beginner users to use Python to process their OpenBCI data</li>\n</ul>\n<h2>To Do</h2>\n<ul>\n<li>Add Ganglion Aux Data</li>\n</ul>\n<h2>Requirements</h2>\n<ul>\n<li>Python 2.7 or 3.4+</li>\n<li>Currently the Cyton works on Windows, Linux, and MacOS.</li>\n<li>Ganglion works on Linux only (Linux VM with enabled Bluetooth works as well).</li>\n<li>The WiFi shield is known to have reliability issues across different computer configurations. Using it effectively requires advanced technical skills and programming knowledge. Note that the code avaiable here has not been tested accross all platforms.</li>\n</ul>\n<h2>Installation</h2>\n<p>First, make sure you have the necessary dependencies.</p>\n<pre><span class=\"n\">pip</span> <span class=\"n\">install</span> <span class=\"n\">numpy</span> <span class=\"n\">pyserial</span> <span class=\"n\">bitstring</span> <span class=\"n\">xmltodict</span> <span class=\"n\">requests</span>\n</pre>\n<p>Linux users may need <code>bluepy</code> also.</p>\n<p>Then you can use pip to install the OpenBCI module.</p>\n<pre><span class=\"n\">pip</span> <span class=\"n\">install</span> <span class=\"o\">-</span><span class=\"n\">i</span> <span class=\"n\">https</span><span class=\"p\">:</span><span class=\"o\">//</span><span class=\"n\">test</span><span class=\"o\">.</span><span class=\"n\">pypi</span><span class=\"o\">.</span><span class=\"n\">org</span><span class=\"o\">/</span><span class=\"n\">simple</span><span class=\"o\">/</span> <span class=\"n\">pyOpenBCI</span>\n</pre>\n<p>Once installed, try running the examples provided to make sure you can connect to your OpenBCI board.</p>\n<h2>Important notes</h2>\n<p>Currently the Ganglion board can only be used with a Linux OS. The WiFi shield is known to have reliability issues across different computer configurations. Using it effectively requires advanced technical skills and programming knowledge. Note that the code avaiable here has not been tested accross all platforms.</p>\n<h3>Getting Started</h3>\n<p>First you need to initialize your board with one of the following commands:</p>\n<h4>For Cyton board:</h4>\n<pre><span class=\"c1\"># For Windows replace '*' with the port number</span>\n<span class=\"n\">board</span> <span class=\"o\">=</span> <span class=\"n\">OpenBCICyton</span><span class=\"p\">(</span><span class=\"n\">port</span><span class=\"o\">=</span><span class=\"s1\">'COM*'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># For MacOS and Linux replace '*' with the port number</span>\n<span class=\"n\">board</span> <span class=\"o\">=</span> <span class=\"n\">OpenBCICyton</span><span class=\"p\">(</span><span class=\"n\">port</span><span class=\"o\">=</span><span class=\"s1\">'/dev/ttyUSB*'</span><span class=\"p\">)</span>\n</pre>\n<p>To find the COM port you are connected to you can use the OpenBCI GUI. Otherwise you can leave the port number as None, and the function find_port() will run and connect to the first Cyton Dongle it finds.</p>\n<h4>For Cyton + Daisy:</h4>\n<pre><span class=\"c1\"># For Windows replace '*' with the port number</span>\n<span class=\"n\">board</span> <span class=\"o\">=</span> <span class=\"n\">OpenBCICyton</span><span class=\"p\">(</span><span class=\"n\">port</span><span class=\"o\">=</span><span class=\"s1\">'COM*'</span><span class=\"p\">,</span> <span class=\"n\">daisy</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># For MacOS and Linux replace '*' with the port number</span>\n<span class=\"n\">board</span> <span class=\"o\">=</span> <span class=\"n\">OpenBCICyton</span><span class=\"p\">(</span><span class=\"n\">port</span><span class=\"o\">=</span><span class=\"s1\">'/dev/ttyUSB*'</span><span class=\"p\">,</span> <span class=\"n\">daisy</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<p>To find the COM port you are connected to you can use the OpenBCI GUI. Otherwise you can leave the port number as None, and the function find_port() will run and connect to the first Cyton Dongle it finds.</p>\n<h4>For Ganglion:</h4>\n<pre><span class=\"c1\"># For Linux replace '*' with the mac address.</span>\n<span class=\"n\">board</span> <span class=\"o\">=</span> <span class=\"n\">OpenBCIGanglion</span><span class=\"p\">(</span><span class=\"n\">mac</span><span class=\"o\">=</span><span class=\"s1\">'*'</span><span class=\"p\">)</span>\n</pre>\n<p>If you need to find the Ganglion mac address you can use an app like <a href=\"https://play.google.com/store/apps/details?id=no.nordicsemi.android.mcp&amp;hl=en_US\" rel=\"nofollow\">nRF connect</a> to find the ganglion. Otherwise you can leave the mac address as None, and the function find_mac() will run (NOTE: You will need to run the script with sudo for this function to work).</p>\n<h4>For Wifi Shield:</h4>\n<pre><span class=\"n\">board</span> <span class=\"o\">=</span> <span class=\"n\">OpenBCIWifi</span><span class=\"p\">(</span><span class=\"n\">shield_name</span><span class=\"o\">=</span><span class=\"s1\">'OpenBCI-2254'</span><span class=\"p\">,</span> <span class=\"n\">sample_rate</span><span class=\"o\">=</span><span class=\"mi\">200</span><span class=\"p\">)</span>\n</pre>\n<h3>Sending commands</h3>\n<p>Once you initialize the board you can use the commands on the OpenBCI SDKs (<a href=\"https://docs.openbci.com/OpenBCI%20Software/06-OpenBCI_Ganglion_SDK\" rel=\"nofollow\">Ganglion</a>, <a href=\"https://docs.openbci.com/OpenBCI%20Software/04-OpenBCI_Cyton_SDK\" rel=\"nofollow\">Cyton</a>, <a href=\"https://docs.openbci.com/OpenBCI%20Software/08-OpenBCI_Wifi_SDK\" rel=\"nofollow\">Wifi Shield</a>) to send commands to the board using python (make sure your commands are strings).</p>\n<pre><span class=\"c1\"># Write commands to the board</span>\n<span class=\"n\">board</span><span class=\"o\">.</span><span class=\"n\">write_command</span><span class=\"p\">(</span><span class=\"n\">command</span><span class=\"p\">)</span>\n</pre>\n<p>Here is a table of the most common ones:</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>Ganglion SDK</th>\n<th>Cyton SDK</th>\n<th>Cyton &amp; Daisy SDK (Additional Commands)</th>\n<th>Wifi Shield SDK (Additional Commands)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Turn Channels OFF</td>\n<td>1 2 3 4</td>\n<td>1 2 3 4 5 6 7 8</td>\n<td>q w e r t y u i</td>\n<td></td>\n</tr>\n<tr>\n<td>Turn Channels ON</td>\n<td></td>\n<td>! @ # $ % ^ &amp; *</td>\n<td>Q W E R T Y U I</td>\n<td></td>\n</tr>\n<tr>\n<td>Connect to internal GND</td>\n<td></td>\n<td>0</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Enable Synthetic Square Wave</td>\n<td>[</td>\n<td>[</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Disable Synthetic Square Wave</td>\n<td>]</td>\n<td>]</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Connect to DC Signal</td>\n<td></td>\n<td>p</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Set Channels to Default</td>\n<td></td>\n<td>d</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Start Streaming Data</td>\n<td>b</td>\n<td>b</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Stop Streaming Data</td>\n<td>s</td>\n<td>s</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Soft Reset</td>\n<td>v</td>\n<td>v</td>\n<td></td>\n<td>;</td>\n</tr>\n<tr>\n<td>Enable Accelerometer</td>\n<td>n</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Disable Accelerometer</td>\n<td>N</td>\n<td></td>\n<td></td>\n<td></td>\n</tr></tbody></table>\n<h3>Initializing Stream</h3>\n<p>To start your stream you can use the following command with a callback function. You can look at the examples folder for some pre-written callback functions.</p>\n<pre><span class=\"c1\"># Start stream</span>\n<span class=\"n\">board</span><span class=\"o\">.</span><span class=\"n\">start_stream</span><span class=\"p\">(</span><span class=\"n\">callback</span><span class=\"p\">)</span>\n</pre>\n<p>The output of the start_stream function is the OpenBCISample on the callback function. The OpenBCISample object has the following attributes:</p>\n<ul>\n<li>packet_id = The ID of the incomming packet.</li>\n<li>channels_data = The raw EEG data of each channel. 4 for the Ganglion, 8 for the Cyton, and 16 for the Cyton + Daisy.</li>\n<li>aux_data = Accelerometer data.</li>\n</ul>\n<p>Because the channels_data and aux_data is the raw data in counts read by the board, we need to multiply the data by a scale factor. There is a specific scale factor for each board:</p>\n<h4>For the Cyton and Cyton + Daisy boards:</h4>\n<p>Multiply uVolts_per_count to convert the channels_data to uVolts.</p>\n<pre><span class=\"n\">uVolts_per_count</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">4500000</span><span class=\"p\">)</span><span class=\"o\">/</span><span class=\"mi\">24</span><span class=\"o\">/</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"o\">**</span><span class=\"mi\">23</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"c1\">#uV/count</span>\n</pre>\n<p>Multiply accel_G_per_count to convert the aux_data to G.</p>\n<pre><span class=\"n\">accel_G_per_count</span> <span class=\"o\">=</span> <span class=\"mf\">0.002</span> <span class=\"o\">/</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"o\">**</span><span class=\"mi\">4</span><span class=\"p\">)</span> <span class=\"c1\">#G/count</span>\n</pre>\n<h4>For the Ganglion Board</h4>\n<p>Multiply Volts_per_count to convert the channels_data to Volts.</p>\n<pre><span class=\"n\">Volts_per_count</span> <span class=\"o\">=</span> <span class=\"mf\">1.2</span> <span class=\"o\">*</span> <span class=\"mf\">8388607.0</span> <span class=\"o\">*</span> <span class=\"mf\">1.5</span> <span class=\"o\">*</span> <span class=\"mf\">51.0</span> <span class=\"c1\">#V/count</span>\n</pre>\n<p>Multiply accel_G_per_count to convert the aux_data to G.</p>\n<pre><span class=\"n\">accel_G_per_count</span> <span class=\"o\">=</span> <span class=\"mf\">0.032</span> <span class=\"c1\">#G/count</span>\n</pre>\n<h4>For the Wifi Shield</h4>\n<p>The Wifi Shield already outputs the data in Volts and the aux data in G.</p>\n<h3>Example (Print Raw Data)</h3>\n<p>To test this example, use <code>py Examples\\print_raw_example.py</code> or <code>python Examples\\print_raw_example.py</code>.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pyOpenBCI</span> <span class=\"kn\">import</span> <span class=\"n\">OpenBCICyton</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">print_raw</span><span class=\"p\">(</span><span class=\"n\">sample</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">sample</span><span class=\"o\">.</span><span class=\"n\">channels_data</span><span class=\"p\">)</span>\n\n<span class=\"n\">board</span> <span class=\"o\">=</span> <span class=\"n\">OpenBCICyton</span><span class=\"p\">(</span><span class=\"n\">port</span><span class=\"o\">=</span><span class=\"s1\">'COM5'</span><span class=\"p\">,</span> <span class=\"n\">daisy</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n\n<span class=\"n\">board</span><span class=\"o\">.</span><span class=\"n\">start_stream</span><span class=\"p\">(</span><span class=\"n\">print_raw</span><span class=\"p\">)</span>\n</pre>\n<h3>Example (Simple LSL Streamer)</h3>\n<p>To run this example, use <code>py Examples\\lsl_example.py</code> or <code>python Examples\\lsl_example.py</code>.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pyOpenBCI</span> <span class=\"kn\">import</span> <span class=\"n\">OpenBCICyton</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pylsl</span> <span class=\"kn\">import</span> <span class=\"n\">StreamInfo</span><span class=\"p\">,</span> <span class=\"n\">StreamOutlet</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n\n<span class=\"n\">SCALE_FACTOR_EEG</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">4500000</span><span class=\"p\">)</span><span class=\"o\">/</span><span class=\"mi\">24</span><span class=\"o\">/</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"o\">**</span><span class=\"mi\">23</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"c1\">#uV/count</span>\n<span class=\"n\">SCALE_FACTOR_AUX</span> <span class=\"o\">=</span> <span class=\"mf\">0.002</span> <span class=\"o\">/</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"o\">**</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Creating LSL stream for EEG. </span><span class=\"se\">\\n</span><span class=\"s2\">Name: OpenBCIEEG</span><span class=\"se\">\\n</span><span class=\"s2\">ID: OpenBCItestEEG</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">info_eeg</span> <span class=\"o\">=</span> <span class=\"n\">StreamInfo</span><span class=\"p\">(</span><span class=\"s1\">'OpenBCIEEG'</span><span class=\"p\">,</span> <span class=\"s1\">'EEG'</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">250</span><span class=\"p\">,</span> <span class=\"s1\">'float32'</span><span class=\"p\">,</span> <span class=\"s1\">'OpenBCItestEEG'</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Creating LSL stream for AUX. </span><span class=\"se\">\\n</span><span class=\"s2\">Name: OpenBCIAUX</span><span class=\"se\">\\n</span><span class=\"s2\">ID: OpenBCItestEEG</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">info_aux</span> <span class=\"o\">=</span> <span class=\"n\">StreamInfo</span><span class=\"p\">(</span><span class=\"s1\">'OpenBCIAUX'</span><span class=\"p\">,</span> <span class=\"s1\">'AUX'</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">250</span><span class=\"p\">,</span> <span class=\"s1\">'float32'</span><span class=\"p\">,</span> <span class=\"s1\">'OpenBCItestAUX'</span><span class=\"p\">)</span>\n\n<span class=\"n\">outlet_eeg</span> <span class=\"o\">=</span> <span class=\"n\">StreamOutlet</span><span class=\"p\">(</span><span class=\"n\">info_eeg</span><span class=\"p\">)</span>\n<span class=\"n\">outlet_aux</span> <span class=\"o\">=</span> <span class=\"n\">StreamOutlet</span><span class=\"p\">(</span><span class=\"n\">info_aux</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">lsl_streamers</span><span class=\"p\">(</span><span class=\"n\">sample</span><span class=\"p\">):</span>\n    <span class=\"n\">outlet_eeg</span><span class=\"o\">.</span><span class=\"n\">push_sample</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">sample</span><span class=\"o\">.</span><span class=\"n\">channels_data</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"n\">SCALE_FACTOR_EEG</span><span class=\"p\">)</span>\n    <span class=\"n\">outlet_aux</span><span class=\"o\">.</span><span class=\"n\">push_sample</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">sample</span><span class=\"o\">.</span><span class=\"n\">aux_data</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"n\">SCALE_FACTOR_AUX</span><span class=\"p\">)</span>\n\n<span class=\"n\">board</span> <span class=\"o\">=</span> <span class=\"n\">OpenBCICyton</span><span class=\"p\">(</span><span class=\"n\">port</span><span class=\"o\">=</span><span class=\"s1\">'COM5'</span><span class=\"p\">,</span> <span class=\"n\">daisy</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n\n<span class=\"n\">board</span><span class=\"o\">.</span><span class=\"n\">start_stream</span><span class=\"p\">(</span><span class=\"n\">lsl_streamers</span><span class=\"p\">)</span>\n</pre>\n<h3>Who are we?</h3>\n<p>The founder of the OpenBCI Python repository is Jermey Frey. The Python driver is one of the most popular repositories and has the most contributors!</p>\n<p>The contributors to these repos are people using Python mainly for their data acquisition and analytics.</p>\n<h3>Get involved</h3>\n<p>If you think you can help in any of the areas listed above (and we bet you can) or in any of the many areas that we haven't yet thought of (and here we're <em>sure</em> you can) then please check out our <a href=\"CONTRIBUTING.md\" rel=\"nofollow\">contributors' guidelines</a> and our <a href=\"ROADMAP.md\" rel=\"nofollow\">roadmap</a>.</p>\n<p>Please note that it's very important to us that we maintain a positive and supportive environment for everyone who wants to participate. When you join us we ask that you follow our <a href=\"CODE_OF_CONDUCT.md\" rel=\"nofollow\">code of conduct</a> in all interactions both on and offline.</p>\n<h3>Contact us</h3>\n<p>If you want to report a problem or suggest an enhancement we'd love for you to <a href=\"../../issues\" rel=\"nofollow\">open an issue</a> at this github repository because then we can get right on it. But you can also contact [AJ][link_aj_keller] by email (pushtheworldllc AT gmail DOT com) or on <a href=\"https://twitter.com/aj-ptw\" rel=\"nofollow\">twitter</a>.</p>\n<h3>Find out more</h3>\n<p>You might be interested in:</p>\n<ul>\n<li>Purchase a <a href=\"https://shop.openbci.com/collections/frontpage/products/cyton-biosensing-board-8-channel\" rel=\"nofollow\">Cyton</a> | <a href=\"https://shop.openbci.com/collections/frontpage/products/pre-order-ganglion-board\" rel=\"nofollow\">Ganglion</a> | <a href=\"https://shop.openbci.com/collections/frontpage/products/wifi-shield?variant=44534009550\" rel=\"nofollow\">WiFi Shield</a> from <a href=\"http://www.openbci.com\" rel=\"nofollow\">OpenBCI</a></li>\n<li>Get taught how to use OpenBCI devices by [Push The World][link_ptw] BCI Consulting</li>\n</ul>\n<p>And of course, you'll want to know our:</p>\n<ul>\n<li><a href=\"CONTRIBUTING.md\" rel=\"nofollow\">Contributors' guidelines</a></li>\n<li><a href=\"ROADMAP.md\" rel=\"nofollow\">Roadmap</a></li>\n</ul>\n<h3>Glossary</h3>\n<p>OpenBCI boards are commonly referred to as <em>biosensors</em>. A biosensor converts biological data into digital data.</p>\n<p>The <a href=\"https://shop.openbci.com/collections/frontpage/products/pre-order-ganglion-board\" rel=\"nofollow\">Ganglion</a> has 4 channels, meaning the Ganglion can take four simultaneous voltage readings.</p>\n<p>The <a href=\"https://shop.openbci.com/collections/frontpage/products/cyton-biosensing-board-8-channel\" rel=\"nofollow\">Cyton</a> has 8 channels and <a href=\"https://shop.openbci.com/collections/frontpage/products/cyton-daisy-biosensing-boards-16-channel\" rel=\"nofollow\">Cyton with Daisy</a> has 16 channels.</p>\n<p>Generally speaking, the Cyton records at a high quality with less noise. Noise is anything that is not signal.</p>\n<h3>Thank you</h3>\n<p>Thank you so much (Danke sch\u00c3\u00b6n! Merci beaucoup!) for visiting the project and we do hope that you'll join us on this amazing journey to make programming with OpenBCI fun and easy.</p>\n<h3><a></a> License:</h3>\n<p>MIT</p>\n\n          </div>"}, "last_serial": 5324266, "releases": {"0.12": [{"comment_text": "", "digests": {"md5": "03d0e225cc69882fb8e61681a7c2e9af", "sha256": "c8b4553fef76998ce767ca9232c710557e62b96afbca29209ded3cba0c45b4cd"}, "downloads": -1, "filename": "pyOpenBCI-0.12.tar.gz", "has_sig": false, "md5_digest": "03d0e225cc69882fb8e61681a7c2e9af", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25676, "upload_time": "2019-05-20T23:00:52", "upload_time_iso_8601": "2019-05-20T23:00:52.050910Z", "url": "https://files.pythonhosted.org/packages/b0/19/15c52f0f3d4298d3cb1f432c398724ce35a089bef34f02b78d7bb8839148/pyOpenBCI-0.12.tar.gz", "yanked": false}], "0.13": [{"comment_text": "", "digests": {"md5": "dc89bb6ccaab4f85770b5a1548a08f46", "sha256": "c5b8a06aa6e38aa3191e2d28c8939f26c1839c3ed179004e786cf05e23070da5"}, "downloads": -1, "filename": "pyOpenBCI-0.13.tar.gz", "has_sig": false, "md5_digest": "dc89bb6ccaab4f85770b5a1548a08f46", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25637, "upload_time": "2019-05-27T23:21:33", "upload_time_iso_8601": "2019-05-27T23:21:33.112619Z", "url": "https://files.pythonhosted.org/packages/be/bf/0def649047687c6443fdee295256abe13dd3704cb693789c643cbe3210fc/pyOpenBCI-0.13.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "dc89bb6ccaab4f85770b5a1548a08f46", "sha256": "c5b8a06aa6e38aa3191e2d28c8939f26c1839c3ed179004e786cf05e23070da5"}, "downloads": -1, "filename": "pyOpenBCI-0.13.tar.gz", "has_sig": false, "md5_digest": "dc89bb6ccaab4f85770b5a1548a08f46", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25637, "upload_time": "2019-05-27T23:21:33", "upload_time_iso_8601": "2019-05-27T23:21:33.112619Z", "url": "https://files.pythonhosted.org/packages/be/bf/0def649047687c6443fdee295256abe13dd3704cb693789c643cbe3210fc/pyOpenBCI-0.13.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:00:13 2020"}