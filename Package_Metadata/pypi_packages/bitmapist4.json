{"info": {"author": "Doist Team", "author_email": "dev@doist.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "\n![bitmapist](https://raw.githubusercontent.com/Doist/bitmapist4/master/static/bitmapist.png \"bitmapist\")\n\n\n[![Build Status](https://travis-ci.org/Doist/bitmapist4.svg?branch=master)](https://travis-ci.org/Doist/bitmapist4)\n\n**NEW!** Try out our new standalone [bitmapist-server](https://github.com/Doist/bitmapist-server), which improves memory efficiency 443 times and makes your setup cheaper and more scaleable. It's fully compatable with bitmapist that runs on Redis.\n\n# bitmapist: a powerful analytics library for Redis\n\nThis Python library makes it possible to implement real-time, highly scalable analytics that can answer following questions:\n\n* Has user 123 been online today? This week? This month?\n* Has user 123 performed action \"X\"?\n* How many users have been active have this month? This hour?\n* How many unique users have performed action \"X\" this week?\n* How many % of users that were active last week are still active?\n* How many % of users that were active last month are still active this month?\n* What users performed action \"X\"?\n\nThis library is very easy to use and enables you to create your own reports easily.\n\nUsing Redis bitmaps you can store events for millions of users in a very little amount of memory (megabytes).\nYou should be careful about using huge ids as this could require larger amounts of memory. Ids should be in range [0, 2^32).\n\nAdditionally bitmapist can generate cohort graphs that can do following:\n* Cohort over user retention\n* How many % of users that were active last [days, weeks, months] are still active?\n* How many % of users that performed action X also performed action Y (and this over time)\n* And a lot of other things!\n\nIf you want to read more about bitmaps please read following:\n\n* http://blog.getspool.com/2011/11/29/fast-easy-realtime-metrics-using-redis-bitmaps/\n* http://redis.io/commands/setbit\n* http://en.wikipedia.org/wiki/Bit_array\n* http://www.slideshare.net/crashlytics/crashlytics-on-redis-analytics\n\n\n\n# Installation\n\nCan be installed very easily via:\n\n    $ pip install bitmapist4\n\n\n# Ports\n\n* PHP port: https://github.com/jeremyFreeAgent/Bitter\n\n\n# Examples\n\nSetting things up:\n\n```python\nimport bitmapist4\nb = bitmapist4.Bitmapist()\n```\n\nMark user 123 as active and has played a song:\n\n```python\nb.mark_event('active', 123)\nb.mark_event('song:played', 123)\n```\n\nAnswer if user 123 has been active this month:\n\n```python\nassert 123 in b.MonthEvents('active')\nassert 123 in b.MonthEvents('song:played')\n```\n\n\nHow many users have been active this week?:\n\n```python\nlen(b.WeekEvents('active'))\n```\n\nIterate over all users active this week:\n\n```python\nfor uid in b.WeekEvents('active'):\n    print(uid)\n```\n\n\nTo explore any specific day, week, month or year instead of the current one, \nuou can create an event from any datetime object with a `from_date` static\nmethod.\n\n```python\nspecific_date = datetime.datetime(2018, 1, 1)\nev = b.MonthEvents('active').from_date(specific_date)\nprint(len(ev))\n```\n\nThere are methods `prev` and `next` returning \"sibling\" events and\nallowing you to walk through events in time without any sophisticated\niterators. A `delta` method allows you to jump forward or backward for\nmore than one step. Uniform API allows you to use all types of base events\n(from hour to year) with the same code.\n\n```python\n\ncurrent_month = b.MonthEvents('active')\nprev_month = current_month.prev()\nnext_month = current_month.next()\nyear_ago = current_month.delta(-12)\n```\n\nEvery event object has `period_start` and `period_end` methods to find a\ntime span of the event. This can be useful for caching values when the caching\nof \"events in future\" is not desirable:\n\n```python\n\nev = b.MonthEvent('active', dt)\nif ev.period_end() < datetime.datetime.utcnow():\n    cache.set('active_users_<...>', len(ev))\n```\n\n\nTracking hourly is disabled (to save memory!) You can enable it with a\nconstructor argument.\n\n```python\nb = bitmapist4.Bitmapist(track_hourly=True)\n```\n\nAdditionally you can supply an extra argument to `mark_event` to bypass the default value::\n\n```python\nb.mark_event('active', 123, track_hourly=False)\n```\n\n\n## Unique events\n\nSometimes data of the event makes little or no sense and you are more interested\nif that specific event happened at least once in a lifetime for a user. \n\nThere is a `UniqueEvents` model for this purpose. The model creates only one\nRedis key and doesn't depend on the date.\n\nYou can combine unique events with other types of events.\n\nA/B testing example:\n\n```python\n\nactive = b.DailyEvents('active')\na = b.UniqueEvents('signup_form:classic')\nb = b.UniqueEvents('signup_form:new')\n\nprint(\"Active users, signed up with classic form\", len(active & a))\nprint(\"Active users, signed up with new form\", len(active & b))\n```\n\nYou can mark these users with `b.mark_unique` or you can automatically\npopulate the extra unique cohort for all marked keys\n\n```python\nb = bitmapist4.Bitmapist(track_unique=True)\nb.mark_event('premium', 1)\nassert 1 in b.UniqueEvents('premium')\n``` \n\n## Perform bit operations\n\nHow many users that have been active last month are still active this month?\n\n```python\nev = b.MonthEvents('active')\nactive_2months = ev & ev.prev() \nprint(len(active_2months))\n\n# Is 123 active for 2 months?\nassert 123 in active_2months\n```\n\nOperators `&`, `|`, `^` and `~` supported.\n\nThis works with nested bit operations (imagine what you can do with this ;-))!\n\n\n## Delete events\n\nIf you want to permanently remove marked events for any time period you can use the `delete()` method:\n\n```python\nev = b.MonthEvents.from_date('active', last_month)\nev.delete()\n```\n\nIf you want to remove all bitmapist events use:\n```python\nb.delete_all_events()\n```\n\nResults of bit operations are cached by default. They're cached for 60 seconds\nfor operations, contained non-finished periods, and for 24 hours otherwise.\n\nYou may want to reset the cache explicitly:\n\n```python\nev = b.MonthEvents('active')\nactive_2months = ev & ev.prev() \n# Delete the temporary AND operation\nactive_2months.delete()\n\n# delete all bit operations (slow if you have many millions of keys in Redis)\nb.delete_temporary_bitop_keys()\n```\n\n## Bulk updates with transactions\n\nIf you often performs multiple updates at once, you can benefit from Redis\npipelines, wrapped as transactions inside bitmapist.\n\n```python\nwith b.transaction():\n    b.mark_event('active')\n    b.mark_event('song:played')\n```\n\n\n# Migration from previous version\n\nThe API of the \"bitmapist4.Bitmapist\" instance is mostly compatible with the\nAPI of previous version of bitmapist (module-level). Notable changes outlined\nbelow.\n\n- Removed the \"system\" attribute for choosing the server. You are supposed to\n  use different Bitmapist class instances instead. If you used \"system\" to\n  work with pipelines, you should switch to transactions instead.\n- bitmapist.TRACK_HOURLY and bitmapist.TRACK_UNIQUE module-level constants\n  moved to bitmapist4.Bitmapist attributes and can be set up with a class\n  constructor.\n- On a database level, new bitmapist4 uses \"bitmapist_\" prefix for Redis keys,\n  while old bitmapist uses \"trackist_\" for historical reasons. If you want\n  to keep using the old database, or want to use bitmapist and bitmapist4\n  against the same database, you need to explicitly set the key prefix\n  to \"trackist_\".\n- If you use bitmapist-server, make sure that you use the version 1.2 or newer.\n  This version adds the support for  EXPIRE command which is used to expire\n  temporary bitop keys.\n\n\nReplace old code which could look like this:\n\n```python\nimport bitmapist\nbitmapist.setup_redis('default', 'localhost', 6380)\n...\nbitmapist.mark_event('acive', user_id)\n```\n\nWith something looking like this:\n\n```python\nfrom bitmapist4 import Bitmapist\nbitmapist = Bitmapist('redis://localhost:6380', key_prefix='trackist_')\n...\nbitmapist.mark_event('acive', user_id)\n```\n\n\n\n# Bitmapist cohort\n\nCohort is a group of subjects who share a defining characteristic (typically\nsubjects who experienced a common event in a selected time period, such as\nbirth or graduation).\n\nYou can get the cohort table using `bitmapist4.cohort.get_cohort_table()` \nfunction. \n\nEach row of this table answers the question \"what part of the `cohort`\nperformed `activity` over time\", and Nth cell of that row represents the\nnumber of users (absolute or in percent) which still perform the activity\nN days (or weeks, or months) after.\n\nEach new column of the cohort unfolds the behavior of different similar\ncohorts over time. The latest row displays the behavior of the cohort,\nprovided as an argument, the one above displays the behavior of the similar\ncohort, but shifted 1 day (or week, or month) ago, etc.\n\nFor example, consider following cohort statistics\n\n```\ntable = get_cohort_table(b.WeekEvents('registered'), b.WeekEvents('active'))\n```\n\nThis table shows what's the rate of registered users is still active\nthe same week after registration, then one week after, then two weeks\nafter the registration, etc.\n\nBy default the table displays 20 rows.\n\nThe first row represents the statistics from cohort of users, registered\n20 weeks ago. The second row represents the same statistics for users,\nregistered 19 week ago, and so on until finally the latest row shows users\nregistered this week. Naturally, the last row will contain only one cell,\nthe number of users that were registered this week AND were active this\nweek as well.\n\n\nThen you may render it yourself to HTML, or export to Pandas dataframe\nwith df() method.\n\nSample from user activity on http://www.gharchive.org/\n\n```python\nIn [1]: from bitmapist4 import Bitmapist, cohort\n\nIn [2]: b = Bitmapist()\n\nIn [3]: cohort.get_cohort_table(b.WeekEvents('active'), b.WeekEvents('active'), rows=5, use_percent=False).df()\nOut[3]:\n             cohort       0        1        2        3        4\n05 Nov 2018  137420  137420  25480.0  18358.0  21575.0  18430.0\n12 Nov 2018  150975  150975  22195.0  25833.0  21165.0      NaN\n19 Nov 2018  121417  121417  22477.0  15796.0      NaN      NaN\n26 Nov 2018  152027  152027  25606.0      NaN      NaN      NaN\n03 Dec 2018  130470  130470      NaN      NaN      NaN      NaN\n```\n\nThe dataframe can be further colorized (to be displayed in Jupyter notebooks)\nwith stylize().\n\n\n---\n\nCopyright: 2012-2018 by Doist Ltd.\n\nLicense: BSD\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Doist/bitmapist4", "keywords": "redis bitmap analytics bitmaps realtime cohort", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "bitmapist4", "package_url": "https://pypi.org/project/bitmapist4/", "platform": "Any", "project_url": "https://pypi.org/project/bitmapist4/", "project_urls": {"Homepage": "https://github.com/Doist/bitmapist4"}, "release_url": "https://pypi.org/project/bitmapist4/4.0/", "requires_dist": ["redis (>=2.10)", "future (>=0.14)"], "requires_python": "", "summary": "Powerful analytics library using Redis bitmaps", "version": "4.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><img alt=\"bitmapist\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c01ce59046b180b56a103d96a8f259351d1ce81b/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f446f6973742f6269746d6170697374342f6d61737465722f7374617469632f6269746d61706973742e706e67\"></p>\n<p><a href=\"https://travis-ci.org/Doist/bitmapist4\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/610569faf5a857c296f167518a586b336330e6d1/68747470733a2f2f7472617669732d63692e6f72672f446f6973742f6269746d6170697374342e7376673f6272616e63683d6d6173746572\"></a></p>\n<p><strong>NEW!</strong> Try out our new standalone <a href=\"https://github.com/Doist/bitmapist-server\" rel=\"nofollow\">bitmapist-server</a>, which improves memory efficiency 443 times and makes your setup cheaper and more scaleable. It's fully compatable with bitmapist that runs on Redis.</p>\n<h1>bitmapist: a powerful analytics library for Redis</h1>\n<p>This Python library makes it possible to implement real-time, highly scalable analytics that can answer following questions:</p>\n<ul>\n<li>Has user 123 been online today? This week? This month?</li>\n<li>Has user 123 performed action \"X\"?</li>\n<li>How many users have been active have this month? This hour?</li>\n<li>How many unique users have performed action \"X\" this week?</li>\n<li>How many % of users that were active last week are still active?</li>\n<li>How many % of users that were active last month are still active this month?</li>\n<li>What users performed action \"X\"?</li>\n</ul>\n<p>This library is very easy to use and enables you to create your own reports easily.</p>\n<p>Using Redis bitmaps you can store events for millions of users in a very little amount of memory (megabytes).\nYou should be careful about using huge ids as this could require larger amounts of memory. Ids should be in range [0, 2^32).</p>\n<p>Additionally bitmapist can generate cohort graphs that can do following:</p>\n<ul>\n<li>Cohort over user retention</li>\n<li>How many % of users that were active last [days, weeks, months] are still active?</li>\n<li>How many % of users that performed action X also performed action Y (and this over time)</li>\n<li>And a lot of other things!</li>\n</ul>\n<p>If you want to read more about bitmaps please read following:</p>\n<ul>\n<li><a href=\"http://blog.getspool.com/2011/11/29/fast-easy-realtime-metrics-using-redis-bitmaps/\" rel=\"nofollow\">http://blog.getspool.com/2011/11/29/fast-easy-realtime-metrics-using-redis-bitmaps/</a></li>\n<li><a href=\"http://redis.io/commands/setbit\" rel=\"nofollow\">http://redis.io/commands/setbit</a></li>\n<li><a href=\"http://en.wikipedia.org/wiki/Bit_array\" rel=\"nofollow\">http://en.wikipedia.org/wiki/Bit_array</a></li>\n<li><a href=\"http://www.slideshare.net/crashlytics/crashlytics-on-redis-analytics\" rel=\"nofollow\">http://www.slideshare.net/crashlytics/crashlytics-on-redis-analytics</a></li>\n</ul>\n<h1>Installation</h1>\n<p>Can be installed very easily via:</p>\n<pre><code>$ pip install bitmapist4\n</code></pre>\n<h1>Ports</h1>\n<ul>\n<li>PHP port: <a href=\"https://github.com/jeremyFreeAgent/Bitter\" rel=\"nofollow\">https://github.com/jeremyFreeAgent/Bitter</a></li>\n</ul>\n<h1>Examples</h1>\n<p>Setting things up:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">bitmapist4</span>\n<span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">bitmapist4</span><span class=\"o\">.</span><span class=\"n\">Bitmapist</span><span class=\"p\">()</span>\n</pre>\n<p>Mark user 123 as active and has played a song:</p>\n<pre><span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">mark_event</span><span class=\"p\">(</span><span class=\"s1\">'active'</span><span class=\"p\">,</span> <span class=\"mi\">123</span><span class=\"p\">)</span>\n<span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">mark_event</span><span class=\"p\">(</span><span class=\"s1\">'song:played'</span><span class=\"p\">,</span> <span class=\"mi\">123</span><span class=\"p\">)</span>\n</pre>\n<p>Answer if user 123 has been active this month:</p>\n<pre><span class=\"k\">assert</span> <span class=\"mi\">123</span> <span class=\"ow\">in</span> <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">MonthEvents</span><span class=\"p\">(</span><span class=\"s1\">'active'</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"mi\">123</span> <span class=\"ow\">in</span> <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">MonthEvents</span><span class=\"p\">(</span><span class=\"s1\">'song:played'</span><span class=\"p\">)</span>\n</pre>\n<p>How many users have been active this week?:</p>\n<pre><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">WeekEvents</span><span class=\"p\">(</span><span class=\"s1\">'active'</span><span class=\"p\">))</span>\n</pre>\n<p>Iterate over all users active this week:</p>\n<pre><span class=\"k\">for</span> <span class=\"n\">uid</span> <span class=\"ow\">in</span> <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">WeekEvents</span><span class=\"p\">(</span><span class=\"s1\">'active'</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">uid</span><span class=\"p\">)</span>\n</pre>\n<p>To explore any specific day, week, month or year instead of the current one,\nuou can create an event from any datetime object with a <code>from_date</code> static\nmethod.</p>\n<pre><span class=\"n\">specific_date</span> <span class=\"o\">=</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">(</span><span class=\"mi\">2018</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">ev</span> <span class=\"o\">=</span> <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">MonthEvents</span><span class=\"p\">(</span><span class=\"s1\">'active'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">from_date</span><span class=\"p\">(</span><span class=\"n\">specific_date</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">ev</span><span class=\"p\">))</span>\n</pre>\n<p>There are methods <code>prev</code> and <code>next</code> returning \"sibling\" events and\nallowing you to walk through events in time without any sophisticated\niterators. A <code>delta</code> method allows you to jump forward or backward for\nmore than one step. Uniform API allows you to use all types of base events\n(from hour to year) with the same code.</p>\n<pre><span class=\"n\">current_month</span> <span class=\"o\">=</span> <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">MonthEvents</span><span class=\"p\">(</span><span class=\"s1\">'active'</span><span class=\"p\">)</span>\n<span class=\"n\">prev_month</span> <span class=\"o\">=</span> <span class=\"n\">current_month</span><span class=\"o\">.</span><span class=\"n\">prev</span><span class=\"p\">()</span>\n<span class=\"n\">next_month</span> <span class=\"o\">=</span> <span class=\"n\">current_month</span><span class=\"o\">.</span><span class=\"n\">next</span><span class=\"p\">()</span>\n<span class=\"n\">year_ago</span> <span class=\"o\">=</span> <span class=\"n\">current_month</span><span class=\"o\">.</span><span class=\"n\">delta</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">12</span><span class=\"p\">)</span>\n</pre>\n<p>Every event object has <code>period_start</code> and <code>period_end</code> methods to find a\ntime span of the event. This can be useful for caching values when the caching\nof \"events in future\" is not desirable:</p>\n<pre><span class=\"n\">ev</span> <span class=\"o\">=</span> <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">MonthEvent</span><span class=\"p\">(</span><span class=\"s1\">'active'</span><span class=\"p\">,</span> <span class=\"n\">dt</span><span class=\"p\">)</span>\n<span class=\"k\">if</span> <span class=\"n\">ev</span><span class=\"o\">.</span><span class=\"n\">period_end</span><span class=\"p\">()</span> <span class=\"o\">&lt;</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">utcnow</span><span class=\"p\">():</span>\n    <span class=\"n\">cache</span><span class=\"o\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"s1\">'active_users_&lt;...&gt;'</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">ev</span><span class=\"p\">))</span>\n</pre>\n<p>Tracking hourly is disabled (to save memory!) You can enable it with a\nconstructor argument.</p>\n<pre><span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">bitmapist4</span><span class=\"o\">.</span><span class=\"n\">Bitmapist</span><span class=\"p\">(</span><span class=\"n\">track_hourly</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<p>Additionally you can supply an extra argument to <code>mark_event</code> to bypass the default value::</p>\n<pre><span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">mark_event</span><span class=\"p\">(</span><span class=\"s1\">'active'</span><span class=\"p\">,</span> <span class=\"mi\">123</span><span class=\"p\">,</span> <span class=\"n\">track_hourly</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n</pre>\n<h2>Unique events</h2>\n<p>Sometimes data of the event makes little or no sense and you are more interested\nif that specific event happened at least once in a lifetime for a user.</p>\n<p>There is a <code>UniqueEvents</code> model for this purpose. The model creates only one\nRedis key and doesn't depend on the date.</p>\n<p>You can combine unique events with other types of events.</p>\n<p>A/B testing example:</p>\n<pre><span class=\"n\">active</span> <span class=\"o\">=</span> <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">DailyEvents</span><span class=\"p\">(</span><span class=\"s1\">'active'</span><span class=\"p\">)</span>\n<span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">UniqueEvents</span><span class=\"p\">(</span><span class=\"s1\">'signup_form:classic'</span><span class=\"p\">)</span>\n<span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">UniqueEvents</span><span class=\"p\">(</span><span class=\"s1\">'signup_form:new'</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Active users, signed up with classic form\"</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">active</span> <span class=\"o\">&amp;</span> <span class=\"n\">a</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Active users, signed up with new form\"</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">active</span> <span class=\"o\">&amp;</span> <span class=\"n\">b</span><span class=\"p\">))</span>\n</pre>\n<p>You can mark these users with <code>b.mark_unique</code> or you can automatically\npopulate the extra unique cohort for all marked keys</p>\n<pre><span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">bitmapist4</span><span class=\"o\">.</span><span class=\"n\">Bitmapist</span><span class=\"p\">(</span><span class=\"n\">track_unique</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">mark_event</span><span class=\"p\">(</span><span class=\"s1\">'premium'</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"mi\">1</span> <span class=\"ow\">in</span> <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">UniqueEvents</span><span class=\"p\">(</span><span class=\"s1\">'premium'</span><span class=\"p\">)</span>\n</pre>\n<h2>Perform bit operations</h2>\n<p>How many users that have been active last month are still active this month?</p>\n<pre><span class=\"n\">ev</span> <span class=\"o\">=</span> <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">MonthEvents</span><span class=\"p\">(</span><span class=\"s1\">'active'</span><span class=\"p\">)</span>\n<span class=\"n\">active_2months</span> <span class=\"o\">=</span> <span class=\"n\">ev</span> <span class=\"o\">&amp;</span> <span class=\"n\">ev</span><span class=\"o\">.</span><span class=\"n\">prev</span><span class=\"p\">()</span> \n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">active_2months</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># Is 123 active for 2 months?</span>\n<span class=\"k\">assert</span> <span class=\"mi\">123</span> <span class=\"ow\">in</span> <span class=\"n\">active_2months</span>\n</pre>\n<p>Operators <code>&amp;</code>, <code>|</code>, <code>^</code> and <code>~</code> supported.</p>\n<p>This works with nested bit operations (imagine what you can do with this ;-))!</p>\n<h2>Delete events</h2>\n<p>If you want to permanently remove marked events for any time period you can use the <code>delete()</code> method:</p>\n<pre><span class=\"n\">ev</span> <span class=\"o\">=</span> <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">MonthEvents</span><span class=\"o\">.</span><span class=\"n\">from_date</span><span class=\"p\">(</span><span class=\"s1\">'active'</span><span class=\"p\">,</span> <span class=\"n\">last_month</span><span class=\"p\">)</span>\n<span class=\"n\">ev</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">()</span>\n</pre>\n<p>If you want to remove all bitmapist events use:</p>\n<pre><span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">delete_all_events</span><span class=\"p\">()</span>\n</pre>\n<p>Results of bit operations are cached by default. They're cached for 60 seconds\nfor operations, contained non-finished periods, and for 24 hours otherwise.</p>\n<p>You may want to reset the cache explicitly:</p>\n<pre><span class=\"n\">ev</span> <span class=\"o\">=</span> <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">MonthEvents</span><span class=\"p\">(</span><span class=\"s1\">'active'</span><span class=\"p\">)</span>\n<span class=\"n\">active_2months</span> <span class=\"o\">=</span> <span class=\"n\">ev</span> <span class=\"o\">&amp;</span> <span class=\"n\">ev</span><span class=\"o\">.</span><span class=\"n\">prev</span><span class=\"p\">()</span> \n<span class=\"c1\"># Delete the temporary AND operation</span>\n<span class=\"n\">active_2months</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># delete all bit operations (slow if you have many millions of keys in Redis)</span>\n<span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">delete_temporary_bitop_keys</span><span class=\"p\">()</span>\n</pre>\n<h2>Bulk updates with transactions</h2>\n<p>If you often performs multiple updates at once, you can benefit from Redis\npipelines, wrapped as transactions inside bitmapist.</p>\n<pre><span class=\"k\">with</span> <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">transaction</span><span class=\"p\">():</span>\n    <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">mark_event</span><span class=\"p\">(</span><span class=\"s1\">'active'</span><span class=\"p\">)</span>\n    <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">mark_event</span><span class=\"p\">(</span><span class=\"s1\">'song:played'</span><span class=\"p\">)</span>\n</pre>\n<h1>Migration from previous version</h1>\n<p>The API of the \"bitmapist4.Bitmapist\" instance is mostly compatible with the\nAPI of previous version of bitmapist (module-level). Notable changes outlined\nbelow.</p>\n<ul>\n<li>Removed the \"system\" attribute for choosing the server. You are supposed to\nuse different Bitmapist class instances instead. If you used \"system\" to\nwork with pipelines, you should switch to transactions instead.</li>\n<li>bitmapist.TRACK_HOURLY and bitmapist.TRACK_UNIQUE module-level constants\nmoved to bitmapist4.Bitmapist attributes and can be set up with a class\nconstructor.</li>\n<li>On a database level, new bitmapist4 uses \"bitmapist_\" prefix for Redis keys,\nwhile old bitmapist uses \"trackist_\" for historical reasons. If you want\nto keep using the old database, or want to use bitmapist and bitmapist4\nagainst the same database, you need to explicitly set the key prefix\nto \"trackist_\".</li>\n<li>If you use bitmapist-server, make sure that you use the version 1.2 or newer.\nThis version adds the support for  EXPIRE command which is used to expire\ntemporary bitop keys.</li>\n</ul>\n<p>Replace old code which could look like this:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">bitmapist</span>\n<span class=\"n\">bitmapist</span><span class=\"o\">.</span><span class=\"n\">setup_redis</span><span class=\"p\">(</span><span class=\"s1\">'default'</span><span class=\"p\">,</span> <span class=\"s1\">'localhost'</span><span class=\"p\">,</span> <span class=\"mi\">6380</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>\n<span class=\"n\">bitmapist</span><span class=\"o\">.</span><span class=\"n\">mark_event</span><span class=\"p\">(</span><span class=\"s1\">'acive'</span><span class=\"p\">,</span> <span class=\"n\">user_id</span><span class=\"p\">)</span>\n</pre>\n<p>With something looking like this:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">bitmapist4</span> <span class=\"kn\">import</span> <span class=\"n\">Bitmapist</span>\n<span class=\"n\">bitmapist</span> <span class=\"o\">=</span> <span class=\"n\">Bitmapist</span><span class=\"p\">(</span><span class=\"s1\">'redis://localhost:6380'</span><span class=\"p\">,</span> <span class=\"n\">key_prefix</span><span class=\"o\">=</span><span class=\"s1\">'trackist_'</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>\n<span class=\"n\">bitmapist</span><span class=\"o\">.</span><span class=\"n\">mark_event</span><span class=\"p\">(</span><span class=\"s1\">'acive'</span><span class=\"p\">,</span> <span class=\"n\">user_id</span><span class=\"p\">)</span>\n</pre>\n<h1>Bitmapist cohort</h1>\n<p>Cohort is a group of subjects who share a defining characteristic (typically\nsubjects who experienced a common event in a selected time period, such as\nbirth or graduation).</p>\n<p>You can get the cohort table using <code>bitmapist4.cohort.get_cohort_table()</code>\nfunction.</p>\n<p>Each row of this table answers the question \"what part of the <code>cohort</code>\nperformed <code>activity</code> over time\", and Nth cell of that row represents the\nnumber of users (absolute or in percent) which still perform the activity\nN days (or weeks, or months) after.</p>\n<p>Each new column of the cohort unfolds the behavior of different similar\ncohorts over time. The latest row displays the behavior of the cohort,\nprovided as an argument, the one above displays the behavior of the similar\ncohort, but shifted 1 day (or week, or month) ago, etc.</p>\n<p>For example, consider following cohort statistics</p>\n<pre><code>table = get_cohort_table(b.WeekEvents('registered'), b.WeekEvents('active'))\n</code></pre>\n<p>This table shows what's the rate of registered users is still active\nthe same week after registration, then one week after, then two weeks\nafter the registration, etc.</p>\n<p>By default the table displays 20 rows.</p>\n<p>The first row represents the statistics from cohort of users, registered\n20 weeks ago. The second row represents the same statistics for users,\nregistered 19 week ago, and so on until finally the latest row shows users\nregistered this week. Naturally, the last row will contain only one cell,\nthe number of users that were registered this week AND were active this\nweek as well.</p>\n<p>Then you may render it yourself to HTML, or export to Pandas dataframe\nwith df() method.</p>\n<p>Sample from user activity on <a href=\"http://www.gharchive.org/\" rel=\"nofollow\">http://www.gharchive.org/</a></p>\n<pre><span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]:</span> <span class=\"kn\">from</span> <span class=\"nn\">bitmapist4</span> <span class=\"kn\">import</span> <span class=\"n\">Bitmapist</span><span class=\"p\">,</span> <span class=\"n\">cohort</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]:</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">Bitmapist</span><span class=\"p\">()</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]:</span> <span class=\"n\">cohort</span><span class=\"o\">.</span><span class=\"n\">get_cohort_table</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">WeekEvents</span><span class=\"p\">(</span><span class=\"s1\">'active'</span><span class=\"p\">),</span> <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">WeekEvents</span><span class=\"p\">(</span><span class=\"s1\">'active'</span><span class=\"p\">),</span> <span class=\"n\">rows</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">use_percent</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">df</span><span class=\"p\">()</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]:</span>\n             <span class=\"n\">cohort</span>       <span class=\"mi\">0</span>        <span class=\"mi\">1</span>        <span class=\"mi\">2</span>        <span class=\"mi\">3</span>        <span class=\"mi\">4</span>\n<span class=\"mi\">05</span> <span class=\"n\">Nov</span> <span class=\"mi\">2018</span>  <span class=\"mi\">137420</span>  <span class=\"mi\">137420</span>  <span class=\"mf\">25480.0</span>  <span class=\"mf\">18358.0</span>  <span class=\"mf\">21575.0</span>  <span class=\"mf\">18430.0</span>\n<span class=\"mi\">12</span> <span class=\"n\">Nov</span> <span class=\"mi\">2018</span>  <span class=\"mi\">150975</span>  <span class=\"mi\">150975</span>  <span class=\"mf\">22195.0</span>  <span class=\"mf\">25833.0</span>  <span class=\"mf\">21165.0</span>      <span class=\"n\">NaN</span>\n<span class=\"mi\">19</span> <span class=\"n\">Nov</span> <span class=\"mi\">2018</span>  <span class=\"mi\">121417</span>  <span class=\"mi\">121417</span>  <span class=\"mf\">22477.0</span>  <span class=\"mf\">15796.0</span>      <span class=\"n\">NaN</span>      <span class=\"n\">NaN</span>\n<span class=\"mi\">26</span> <span class=\"n\">Nov</span> <span class=\"mi\">2018</span>  <span class=\"mi\">152027</span>  <span class=\"mi\">152027</span>  <span class=\"mf\">25606.0</span>      <span class=\"n\">NaN</span>      <span class=\"n\">NaN</span>      <span class=\"n\">NaN</span>\n<span class=\"mi\">03</span> <span class=\"n\">Dec</span> <span class=\"mi\">2018</span>  <span class=\"mi\">130470</span>  <span class=\"mi\">130470</span>      <span class=\"n\">NaN</span>      <span class=\"n\">NaN</span>      <span class=\"n\">NaN</span>      <span class=\"n\">NaN</span>\n</pre>\n<p>The dataframe can be further colorized (to be displayed in Jupyter notebooks)\nwith stylize().</p>\n<hr>\n<p>Copyright: 2012-2018 by Doist Ltd.</p>\n<p>License: BSD</p>\n\n          </div>"}, "last_serial": 4835374, "releases": {"4.0": [{"comment_text": "", "digests": {"md5": "acb0e255c3bc2c2276bd93406dfcb76f", "sha256": "1f1a17cec134387d74506721bf70108bb671750c9d3bbfdc9aca950b28ebb6c8"}, "downloads": -1, "filename": "bitmapist4-4.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "acb0e255c3bc2c2276bd93406dfcb76f", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 13744, "upload_time": "2018-12-11T10:58:30", "upload_time_iso_8601": "2018-12-11T10:58:30.275602Z", "url": "https://files.pythonhosted.org/packages/2d/b1/b264ba7e84eac1f75d569a31b1938d04c491706f96f69e8e7d54fcc3442b/bitmapist4-4.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1ea4bc68bbf62bba655cbadab3767179", "sha256": "09037d838ae7c5e90b12713d67869e040cc3e8892493fd186f233cdb3806e2f1"}, "downloads": -1, "filename": "bitmapist4-4.0.tar.gz", "has_sig": false, "md5_digest": "1ea4bc68bbf62bba655cbadab3767179", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18657, "upload_time": "2018-12-11T10:58:32", "upload_time_iso_8601": "2018-12-11T10:58:32.755139Z", "url": "https://files.pythonhosted.org/packages/25/3f/9c49604844ed61e8c69671b580a701dd2d778d77cad6958a0a82c8b32290/bitmapist4-4.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "acb0e255c3bc2c2276bd93406dfcb76f", "sha256": "1f1a17cec134387d74506721bf70108bb671750c9d3bbfdc9aca950b28ebb6c8"}, "downloads": -1, "filename": "bitmapist4-4.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "acb0e255c3bc2c2276bd93406dfcb76f", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 13744, "upload_time": "2018-12-11T10:58:30", "upload_time_iso_8601": "2018-12-11T10:58:30.275602Z", "url": "https://files.pythonhosted.org/packages/2d/b1/b264ba7e84eac1f75d569a31b1938d04c491706f96f69e8e7d54fcc3442b/bitmapist4-4.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1ea4bc68bbf62bba655cbadab3767179", "sha256": "09037d838ae7c5e90b12713d67869e040cc3e8892493fd186f233cdb3806e2f1"}, "downloads": -1, "filename": "bitmapist4-4.0.tar.gz", "has_sig": false, "md5_digest": "1ea4bc68bbf62bba655cbadab3767179", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18657, "upload_time": "2018-12-11T10:58:32", "upload_time_iso_8601": "2018-12-11T10:58:32.755139Z", "url": "https://files.pythonhosted.org/packages/25/3f/9c49604844ed61e8c69671b580a701dd2d778d77cad6958a0a82c8b32290/bitmapist4-4.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:37:16 2020"}