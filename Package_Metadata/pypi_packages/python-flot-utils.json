{"info": {"author": "Brian Luft", "author_email": "brian@unbracketed.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "License :: OSI Approved :: MIT License", "Topic :: Utilities"], "description": "python-flot-utils\n=================\n\nPyFlot makes it easy to generate flot_ graphs. Its primary goal is to\nallow one to specify data inputs and options in a Python application \nand generate the appropriate JSON. Common uses of this will be rendering\ninto a template as flot() arguments or as the payload of an XHR response.\nPyFlot takes care of all the annoying details of converting types to match\nup with how `flot` expects them.\n\n\nFor example::\n\n    >>> import pyflot \n    >>> graph = pyflot.Flot() \n    >>> graph.add_line([(1, 1), (2, 2), (3, 3)]) \n    >>> print graph.series_json \n    [{\"data\": [[1, 1], [2, 2], [3, 3]]}]\n\nIn this simple example the ``series_json`` is a JSON string\nin the format expected by ``flot``.\n\nThe following Django template snippet shows how you might use \nit in a Django template::\n\n\n    <script id=\"source\" language=\"javascript\" type=\"text/javascript\"> \n    $(function () {\n        $.plot($(\"#linear-graph\"), {{ graph.series_json|safe }}, {{ graph.options_json|safe }});\n    });\n    </script>     \n\n\n.. _flot: http://code.google.com/p/flot/", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "UNKNOWN", "keywords": "flot graphs charts javascript data timeseries time series", "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "python-flot-utils", "package_url": "https://pypi.org/project/python-flot-utils/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/python-flot-utils/", "project_urls": {"Download": "UNKNOWN", "Homepage": "UNKNOWN"}, "release_url": "https://pypi.org/project/python-flot-utils/0.2.1/", "requires_dist": null, "requires_python": null, "summary": "Makes it easy to convert Python data structures to JSON strings suitable for flot series and options", "version": "0.2.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>PyFlot makes it easy to generate <a href=\"http://code.google.com/p/flot/\" rel=\"nofollow\">flot</a> graphs. Its primary goal is to\nallow one to specify data inputs and options in a Python application\nand generate the appropriate JSON. Common uses of this will be rendering\ninto a template as flot() arguments or as the payload of an XHR response.\nPyFlot takes care of all the annoying details of converting types to match\nup with how <cite>flot</cite> expects them.</p>\n<p>For example:</p>\n<pre>&gt;&gt;&gt; import pyflot\n&gt;&gt;&gt; graph = pyflot.Flot()\n&gt;&gt;&gt; graph.add_line([(1, 1), (2, 2), (3, 3)])\n&gt;&gt;&gt; print graph.series_json\n[{\"data\": [[1, 1], [2, 2], [3, 3]]}]\n</pre>\n<p>In this simple example the <tt>series_json</tt> is a JSON string\nin the format expected by <tt>flot</tt>.</p>\n<p>The following Django template snippet shows how you might use\nit in a Django template:</p>\n<pre>&lt;script id=\"source\" language=\"javascript\" type=\"text/javascript\"&gt;\n$(function () {\n    $.plot($(\"#linear-graph\"), {{ graph.series_json|safe }}, {{ graph.options_json|safe }});\n});\n&lt;/script&gt;\n</pre>\n\n          </div>"}, "last_serial": 797937, "releases": {"0.1": [], "0.2": [{"comment_text": "", "digests": {"md5": "67c935cb83e4c3f72adb10e615a33118", "sha256": "9a3f5b460e40f3ba2347190e0c6e7ef0d0d69c96967c44697e3b248f299875e2"}, "downloads": -1, "filename": "python-flot-utils-0.2.linux-x86_64.exe", "has_sig": false, "md5_digest": "67c935cb83e4c3f72adb10e615a33118", "packagetype": "bdist_wininst", "python_version": "any", "requires_python": null, "size": 68429, "upload_time": "2011-02-21T21:01:12", "upload_time_iso_8601": "2011-02-21T21:01:12.879782Z", "url": "https://files.pythonhosted.org/packages/cb/50/4d3188256f1db5eb83228551eebc5722737f5c8dc17aa785f570d7c4fb29/python-flot-utils-0.2.linux-x86_64.exe", "yanked": false}, {"comment_text": "", "digests": {"md5": "b0e77f4b82b6648c1d3b727fa63ce1b7", "sha256": "b804838a8ae2282ad3c80cfdf549d8f3d9cd3f5fc8963b02dc21affb53ab4367"}, "downloads": -1, "filename": "python-flot-utils-0.2.tar.gz", "has_sig": false, "md5_digest": "b0e77f4b82b6648c1d3b727fa63ce1b7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4602, "upload_time": "2011-02-21T21:01:11", "upload_time_iso_8601": "2011-02-21T21:01:11.112523Z", "url": "https://files.pythonhosted.org/packages/86/bc/4d05556a079a0b4c978e15a4606a07f1e71ae29eb1abf50bc7adcb3047d1/python-flot-utils-0.2.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "d8fae33e30c6a3e62b6a320976b5fd10", "sha256": "0f678eaee810fdd5ce24d93d7f1c9dfd2608f26939d3c67afd0e40f91e190ed2"}, "downloads": -1, "filename": "python-flot-utils-0.2.1.tar.gz", "has_sig": false, "md5_digest": "d8fae33e30c6a3e62b6a320976b5fd10", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 54575, "upload_time": "2011-02-21T21:26:15", "upload_time_iso_8601": "2011-02-21T21:26:15.337618Z", "url": "https://files.pythonhosted.org/packages/62/30/1e9b3c8f929fdff399724953c04db5e8192036c390a8d7547e93cb7d05f6/python-flot-utils-0.2.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d8fae33e30c6a3e62b6a320976b5fd10", "sha256": "0f678eaee810fdd5ce24d93d7f1c9dfd2608f26939d3c67afd0e40f91e190ed2"}, "downloads": -1, "filename": "python-flot-utils-0.2.1.tar.gz", "has_sig": false, "md5_digest": "d8fae33e30c6a3e62b6a320976b5fd10", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 54575, "upload_time": "2011-02-21T21:26:15", "upload_time_iso_8601": "2011-02-21T21:26:15.337618Z", "url": "https://files.pythonhosted.org/packages/62/30/1e9b3c8f929fdff399724953c04db5e8192036c390a8d7547e93cb7d05f6/python-flot-utils-0.2.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:17:37 2020"}