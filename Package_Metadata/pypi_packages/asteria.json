{"info": {"author": "isidentical", "author_email": "", "bugtrack_url": null, "classifiers": [], "description": "# Asteria (`Al2O3`)\nMissing AST features\n\n## Features\n- Repr implementation to every node (uses `astpretty` if it is available, if not fall backs to the `ast.dump`)\n- AST Comparisons with other nodes\n- Custom initializer with finding default values according to ASDL spec\n- Shortcuts for `fix_missing_locations`, `compile` (e.g `ast.parse(\"2+2\").compile()`)\n- Unparsing shortcuts, `ast.parse(\"2+2\").to_source()`. It uses astor if its available, if not it fallbacks to the `ast.unparse` interface.\n- Parent/Child relationships to nodes\n- Helpers functions for mutating tree (like `add_global` method to `Module` nodes which inserts given node at the top of body)\n- Symbol table access with `get_symbol_table` method\n- and many more...\n\n## Demo\n```py\n>>> import ast\n>>> import asteria\n>>> ast.parse(\"2+2\") == ast.parse(\"2+2\")\nTrue\n>>> ast.parse(\"2+2\").body[0].value\nBinOp(\n    left=Constant(value=2, kind=None),\n    op=Add(),\n    right=Constant(value=2, kind=None),\n)\n>>> ast.parse(\"print(2+2)\").compile()\n<code object <module> at 0x7f2602f21450, file \"<ASTERIA>\", line 1>\n>>> eval(_)\n4\n>>> ast.parse(\"import asteria\").to_source()\n'import asteria'\n>>> sample = ast.parse(\"2+2\")\n>>> sample.parentize()\n>>> sample.body[0].value.left.parent\nBinOp(\n    left=Constant(value=2, kind=None),\n    op=Add(),\n    right=Constant(value=2, kind=None),\n)\n>>> sample.body[0].value.parent\nExpr(\n    value=BinOp(\n        left=Constant(value=2, kind=None),\n        op=Add(),\n        right=Constant(value=2, kind=None),\n    ),\n)\n>>> some_try = ast.parse(\"\"\"\\\n... try:                \n...     def x():        \n...             print(1)\n... finally: pass       \n... \"\"\")\n>>> some_try.parentize()\n>>> some_try.body[0].body[0].body[0].value\nCall(\n    func=Name(id='print', ctx=Load()),\n    args=[Constant(value=1, kind=None)],\n    keywords=[],\n)\n>>> len(tuple(some_try.body[0].body[0].body[0].value.until_parented_by(ast.Try)))\n3\n>>> some_try.add_global(ast.parse(\"print('lol')\").body[0])\n>>> print(some_try.to_source())\nprint('lol')\ntry:\n\n    def x():\n        print(1)\nfinally:\n    pass\n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/isidentical/asteria", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "asteria", "package_url": "https://pypi.org/project/asteria/", "platform": "", "project_url": "https://pypi.org/project/asteria/", "project_urls": {"Homepage": "https://github.com/isidentical/asteria"}, "release_url": "https://pypi.org/project/asteria/0.0.2/", "requires_dist": null, "requires_python": ">=3.9", "summary": "Missing AST features", "version": "0.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Asteria (<code>Al2O3</code>)</h1>\n<p>Missing AST features</p>\n<h2>Features</h2>\n<ul>\n<li>Repr implementation to every node (uses <code>astpretty</code> if it is available, if not fall backs to the <code>ast.dump</code>)</li>\n<li>AST Comparisons with other nodes</li>\n<li>Custom initializer with finding default values according to ASDL spec</li>\n<li>Shortcuts for <code>fix_missing_locations</code>, <code>compile</code> (e.g <code>ast.parse(\"2+2\").compile()</code>)</li>\n<li>Unparsing shortcuts, <code>ast.parse(\"2+2\").to_source()</code>. It uses astor if its available, if not it fallbacks to the <code>ast.unparse</code> interface.</li>\n<li>Parent/Child relationships to nodes</li>\n<li>Helpers functions for mutating tree (like <code>add_global</code> method to <code>Module</code> nodes which inserts given node at the top of body)</li>\n<li>Symbol table access with <code>get_symbol_table</code> method</li>\n<li>and many more...</li>\n</ul>\n<h2>Demo</h2>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">ast</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">asteria</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">ast</span><span class=\"o\">.</span><span class=\"n\">parse</span><span class=\"p\">(</span><span class=\"s2\">\"2+2\"</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">ast</span><span class=\"o\">.</span><span class=\"n\">parse</span><span class=\"p\">(</span><span class=\"s2\">\"2+2\"</span><span class=\"p\">)</span>\n<span class=\"kc\">True</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">ast</span><span class=\"o\">.</span><span class=\"n\">parse</span><span class=\"p\">(</span><span class=\"s2\">\"2+2\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">body</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">value</span>\n<span class=\"n\">BinOp</span><span class=\"p\">(</span>\n    <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"n\">Constant</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">kind</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">),</span>\n    <span class=\"n\">op</span><span class=\"o\">=</span><span class=\"n\">Add</span><span class=\"p\">(),</span>\n    <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"n\">Constant</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">kind</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">),</span>\n<span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">ast</span><span class=\"o\">.</span><span class=\"n\">parse</span><span class=\"p\">(</span><span class=\"s2\">\"print(2+2)\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">compile</span><span class=\"p\">()</span>\n<span class=\"o\">&lt;</span><span class=\"n\">code</span> <span class=\"nb\">object</span> <span class=\"o\">&lt;</span><span class=\"n\">module</span><span class=\"o\">&gt;</span> <span class=\"n\">at</span> <span class=\"mh\">0x7f2602f21450</span><span class=\"p\">,</span> <span class=\"n\">file</span> <span class=\"s2\">\"&lt;ASTERIA&gt;\"</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">1</span><span class=\"o\">&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">eval</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">)</span>\n<span class=\"mi\">4</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">ast</span><span class=\"o\">.</span><span class=\"n\">parse</span><span class=\"p\">(</span><span class=\"s2\">\"import asteria\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">to_source</span><span class=\"p\">()</span>\n<span class=\"s1\">'import asteria'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">sample</span> <span class=\"o\">=</span> <span class=\"n\">ast</span><span class=\"o\">.</span><span class=\"n\">parse</span><span class=\"p\">(</span><span class=\"s2\">\"2+2\"</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">sample</span><span class=\"o\">.</span><span class=\"n\">parentize</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">sample</span><span class=\"o\">.</span><span class=\"n\">body</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">left</span><span class=\"o\">.</span><span class=\"n\">parent</span>\n<span class=\"n\">BinOp</span><span class=\"p\">(</span>\n    <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"n\">Constant</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">kind</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">),</span>\n    <span class=\"n\">op</span><span class=\"o\">=</span><span class=\"n\">Add</span><span class=\"p\">(),</span>\n    <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"n\">Constant</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">kind</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">),</span>\n<span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">sample</span><span class=\"o\">.</span><span class=\"n\">body</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">parent</span>\n<span class=\"n\">Expr</span><span class=\"p\">(</span>\n    <span class=\"n\">value</span><span class=\"o\">=</span><span class=\"n\">BinOp</span><span class=\"p\">(</span>\n        <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"n\">Constant</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">kind</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">),</span>\n        <span class=\"n\">op</span><span class=\"o\">=</span><span class=\"n\">Add</span><span class=\"p\">(),</span>\n        <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"n\">Constant</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">kind</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">),</span>\n    <span class=\"p\">),</span>\n<span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">some_try</span> <span class=\"o\">=</span> <span class=\"n\">ast</span><span class=\"o\">.</span><span class=\"n\">parse</span><span class=\"p\">(</span><span class=\"s2\">\"\"\"</span><span class=\"se\">\\</span>\n<span class=\"s2\">... try:                </span>\n<span class=\"s2\">...     def x():        </span>\n<span class=\"s2\">...             print(1)</span>\n<span class=\"s2\">... finally: pass       </span>\n<span class=\"s2\">... \"\"\"</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">some_try</span><span class=\"o\">.</span><span class=\"n\">parentize</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">some_try</span><span class=\"o\">.</span><span class=\"n\">body</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">body</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">body</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">value</span>\n<span class=\"n\">Call</span><span class=\"p\">(</span>\n    <span class=\"n\">func</span><span class=\"o\">=</span><span class=\"n\">Name</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"s1\">'print'</span><span class=\"p\">,</span> <span class=\"n\">ctx</span><span class=\"o\">=</span><span class=\"n\">Load</span><span class=\"p\">()),</span>\n    <span class=\"n\">args</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">Constant</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">kind</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)],</span>\n    <span class=\"n\">keywords</span><span class=\"o\">=</span><span class=\"p\">[],</span>\n<span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"nb\">tuple</span><span class=\"p\">(</span><span class=\"n\">some_try</span><span class=\"o\">.</span><span class=\"n\">body</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">body</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">body</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">until_parented_by</span><span class=\"p\">(</span><span class=\"n\">ast</span><span class=\"o\">.</span><span class=\"n\">Try</span><span class=\"p\">)))</span>\n<span class=\"mi\">3</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">some_try</span><span class=\"o\">.</span><span class=\"n\">add_global</span><span class=\"p\">(</span><span class=\"n\">ast</span><span class=\"o\">.</span><span class=\"n\">parse</span><span class=\"p\">(</span><span class=\"s2\">\"print('lol')\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">body</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">some_try</span><span class=\"o\">.</span><span class=\"n\">to_source</span><span class=\"p\">())</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'lol'</span><span class=\"p\">)</span>\n<span class=\"k\">try</span><span class=\"p\">:</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">x</span><span class=\"p\">():</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"k\">finally</span><span class=\"p\">:</span>\n    <span class=\"k\">pass</span>\n</pre>\n\n          </div>"}, "last_serial": 6635947, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "a8db9a9e54dd3f6a16ab905fc788ee11", "sha256": "80b76d210fd6504b669c53aaaea45c8ffb60c6017d73a85b9e9e2d619d922c40"}, "downloads": -1, "filename": "asteria-0.0.1.tar.gz", "has_sig": false, "md5_digest": "a8db9a9e54dd3f6a16ab905fc788ee11", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 3592, "upload_time": "2020-02-15T09:19:10", "upload_time_iso_8601": "2020-02-15T09:19:10.877052Z", "url": "https://files.pythonhosted.org/packages/0b/cd/43c480ef2f12f1ea300b370340f5539a15087534404c4819164f76b59cf9/asteria-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "8ac25bcc5d889567654241651f55848e", "sha256": "852ced0ee2bb064908b98748c0b4ddc2d0c7d8d71a4885b9efe0c1aff49a8e7b"}, "downloads": -1, "filename": "asteria-0.0.2.tar.gz", "has_sig": false, "md5_digest": "8ac25bcc5d889567654241651f55848e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.9", "size": 4750, "upload_time": "2020-02-15T10:33:52", "upload_time_iso_8601": "2020-02-15T10:33:52.322887Z", "url": "https://files.pythonhosted.org/packages/04/45/ef5cc71cdb44a91b4a0aa3fff8c6f660d082911ade053ca7bb2de0e1f940/asteria-0.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "8ac25bcc5d889567654241651f55848e", "sha256": "852ced0ee2bb064908b98748c0b4ddc2d0c7d8d71a4885b9efe0c1aff49a8e7b"}, "downloads": -1, "filename": "asteria-0.0.2.tar.gz", "has_sig": false, "md5_digest": "8ac25bcc5d889567654241651f55848e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.9", "size": 4750, "upload_time": "2020-02-15T10:33:52", "upload_time_iso_8601": "2020-02-15T10:33:52.322887Z", "url": "https://files.pythonhosted.org/packages/04/45/ef5cc71cdb44a91b4a0aa3fff8c6f660d082911ade053ca7bb2de0e1f940/asteria-0.0.2.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:16:51 2020"}