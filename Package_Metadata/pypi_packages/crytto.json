{"info": {"author": "M. Massenzio", "author_email": "marco@alertavert.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: System Administrators", "License :: OSI Approved :: Apache Software License", "Programming Language :: Python :: 3"], "description": "filecrypt - OpenSSL file encryption\n===================================\n\n  Author    [M. Massenzio](http://codetrips.com)\n  --------- --------------------------------------------------------\n  Version   0.7.2\n  Updated   2020-04-30\n  Code      [bitbucket.org](https://bitbucket.org/marco/filecrypt)\n\noverview\n========\n\nUses OpenSSL library to encrypt a file using a private/public key pair\nand a one-time secret.\n\nA full description of the process can be found\n[here](https://github.com/massenz/HOW-TOs/blob/master/HOW-TO%20Encrypt%20archive.rst).\n\nSee also this [blog\nentry](https://codetrips.com/2016/07/13/filecrypt-openssl-file-encryption/)\nfor more details.\n\ninstallation\n============\n\nInstall directly from PyPi:\n\n    pip install crytto\n\nPlease note the **package name** (`filecrypt` was conflicting with the\nexisting `FileCrypt` package name, and `crypto` was already taken).\n\nThis requires OpenSSL to be installed on your machine:\n\n    sudo apt-get install openssl\n\nAlternatively, clone the project from github and follow the instructions\nbelow:\n\n    git clone git@bitbucket.org:marco/filecrypt.git\n\nOnce cloned, you can try out functionality by packaging it as a\nself-contained executable: use the `package.sh` script to generate a\n`filecrypt.pyz` self-extracting executable (make sure to set the `x`\npermission on \\*nix systems) and then you can encrypt/decrpyt files (see\nthe [configuration](#configuration) section first).\n\n\\`\\`\\`shell script \\# To encrypt ./filecrypt.pyz -o test.enc\n/path/to/my\\_plaintext.txt\n\nTo decrypt:\n===========\n\n./filecrypt.pyz -d -o /path/to/whatever.txt test.enc \\`\\`\\`\n\nOnce all dependencies are installed:\n\n    pip install -r requirements.txt\n\ntests can be run via:\n\n    ./run_tests.sh\n\nSee both the `run_tests` and `package` scripts for examples of how to\nuse encryption/decryption.\n\nconfiguration\n=============\n\nThis uses a YAML file to describe the configuration; by default it\nassumes it is in `/etc/filecrypt/conf.yml` but its location can be\nspecified using the `-f` flag.\n\nThe structure of the `conf.yml` file is as follows:\n\n``` {.yaml}\nkeys:\n     private: sample.pem\n     public: sample.pub\n     secrets: .\n\nstore: keys.csv\n\n##\n# Any option below is optional and can be omitted.\n#\n# Where to store the encrypted file; the folder MUST already exist and the user\n# have write permissions.  Defaults to the current directory; can be overridden\n# using --out on the command line.\n#\n#out: /data/store/file\n\n# Whether to securely delete the original plaintext file; by default it is kept.\n# It can be overridden by using `--keep` when running `filecrypt`.  True by default.\nshred: true\n\n# Optional logging configuration - mostly useful to\n# diagnose issues.  Default is WARN level.\nlogging:\n   format: \"%(asctime)s [%(levelname)-5s] %(message)s\"\n   level: WARN\n```\n\nThe `private`/`public` keys are a key-pair generated using the\n`openssl genrsa` command; the encryption key used to actually encrypt\nthe file will be created in the `secrets` folder, and afterward\nencrypted using the `public` key and stored in the location provided.\n\nThe name will be `pass-key-nnnn.enc`, where `nnnn` will be a random\nvalue between `1000` and `9999`, that has not been already used for a\nfile in that folder.\n\nThe name of the secret passphrase can also be defined by the user, using\nthe `--secret` option (it will be left unmodified):\n\n-   if it does not exist a random secure one will be created, used for\n    encryption, then encrypted and saved with the given path, while the\n    plain-text temporary version securely destroyed; OR\n\n-   if it is the name of an already existing file, it will be decrypted,\n    used to encrypt the file, then left **unchanged** on disk.\n\n**NOTE** we recommend NOT to re-use encryption passphrases, but always\ngenerate a new secret.\n\n**NOTE** it is currently not possible to specify a plain-text\npassphrase: we always assume that the given file has been encrypted\nusing the `private` key.\n\nThe `store` file is a CSV list of:\n\n    \"Original archive\",\"Encryption key\",\"Encrypted archive\"\n    201511_data.tar.gz,/opt/store/pass-key-001.enc,201511_data.tar.gz.enc\n\na new line will be appended at the end; any comments will be left\nunchanged.\n\nusage\n-----\n\n### keypair generation\n\nWe do not provide the means to generate them (this will be done at a\nlater stage), but for now they can be generated using:\n\n    openssl genrsa -out ./key.pem 2048\n    openssl rsa -in key.pem -out key.pub -outform PEM -pubout\n\ntheir path can then be specified in the `conf.yaml` file.\n\n### encryption\n\nAlways use the `--help` option to see the most up-to-date options\navailable; anyway, the basic usage is:\n\n    filecrypt my_secret.txt\n\nwhich will create a `my_secret.txt.enc` file in the current directory,\nunless a different one has been specified using the `out` option in\n`/etc/filecrypt/conf.yml`.\n\nA completely random and cryptographically secure key will have been\ncreated; used; and then encrypted to the `secrets` location, its full\npath stored in the CSV keystore named in the `store` option of the YAML\nconfiguration file.\n\nFinally, the plaintext version of this key will have been safely\ndestroyed.\n\nA more elaborate one (see the example configuration in\n`examples/example_conf.yaml`):\n\n    filecrypt --conf example_conf.yaml -s secret-key.enc plaintext.txt\n\nwill create an encrypted copy of the file to be stored as\n`/data/store/plaintext.txt.enc`; the original file **will not** be\nsecurely destroyed (using `shred`); and the encryption key name and\nlocation (the current directory, and `secret-key.enc`) to be stored in\nthe `keys.csv` file:\n\n``` {.yaml}\n# Fragment of example_conf.yaml\n...\nstore: keys.csv\nout: /data/store\nshred: false\n```\n\n**Specifying the encryption destination**\n\nBy default, the encrypted filename has the same name as the plaintext\nfile, with the `.enc` extension appended; and it is saved to either the\ncurrent directory or the `out` location specified in the configuration\nYAML.\n\nBy using the `--out` (`-o`) option, it is possible to specify the\nlocation of the output encrypted file, either absolute, or relative to\nthe current directory:\n\n    filecrypt -o mysecret.ser my_secret.doc\n\nor:\n\n    filecrypt -o secret/files/mysecret.ser my_secret.doc\n\nRegardless of the means of specifying the input/outpup files, the full\npath to both files will **always** be used in the CSV keystore,\nregardless of whether a relative or absolute path was specified on the\ncommand line.\n\n**IMPORTANT** \\>We recommend testing your configuration and command-line\noptions on test files: `shred` erases files in a *terminal* way that is\n**not** recoverable: if you mess up, **you will lose data**. \\> \\>You\nhave been warned.\n\n### decryption\n\nTo decrypt a file that has been encrypted using this utility, use the\n`-d` flag:\n\n    decrypt -o example_conf.yaml -d plaintext.txt\n\nIf the encryption key (`--secret` or `-s`) is not specified, then the\napplication will try and locate the plaintext file in the keystore\nspecified in the `conf.yaml` using the `store` key:\n\n``` {.yaml}\nstore: keys.csv\n...\n```\n\nand derive the location of the encryption key from the entry, if one is\nfound.\n\nPlease note that **only the filename is used to lookup the key** and so\ntwo **encrypted** filenames in different directories but with the same\nname will be assumed to have been encrypted with the same `passphrase`.\n\nThe `passphrase` file, is stored with its full path: if you move the\nkeys, or rename any of the folder in their path, you will have to update\nthe `keystore` (or use the `-s` flag when decrypting).\n\nAs with encryption, the `--out` flag can be used to specify the output\nfile; otherwise, the current directory will be used.\n\nThe encrypted file will be left untouched: the `--keep` flag *may* be\nused, but will have no effect and the value of the `shred:` option will\nbe ignored.\n\nAs the encrypted file is already cryptographically secure a simple\n`rm my_secret.doc.enc` will be sufficient to guarantee privacy.\n\n### sharing files\n\nAs of `0.5.x`, `crytto` supports encrypting a file using solely a Public\nKey, and then the resulting ecnrypted file can be securely decrypted by\nthe owner of the Secret Key.\n\nThe main use case is to enable Alice to send Bob an encrypted file, once\nBob has given her a copy of his Public key; call the latter `bob.pub`\nand the file to share `my_secret.txt`, then Alice can execute:\n\n    filecrypt --send --key bob.pub --out my-secret.ser my_secret.txt\n\nafter encryption, in the current directory there will be the following\ntwo new files:\n\n    my-secret.ser\n    pass-key-000854.enc\n\nthe former is the encrypted contents of `my_secret.txt` and the latter\nthe encrypted passphrase (leaving out the `--out` argument would have\nmade the encrypted file's name `my_secret.txt.enc`).\n\nThose files can be both sent to Bob or, even better, provided to him\nseparately for added security; either way, upon receiving them, Bob can\nrun the following (we assume the `bob.pub` was the private half of the\nconfigured key pair that he keeps in his [configuration\nfile](#configuration)):\n\n    filecrypt -s pass-key-000854.enc --out alice_secret.txt -d my-secret.ser\n\n(again, leaving out the `--out` is useful when using the defaults, as\nthe `my_secret.txt.enc` would have turned back into `my_secret.txt` --\nin this case, the plaintext decrypted file would have been called\n`my-secret.ser.out`).\n\nreferences\n----------\n\n-   a [detailed\n    HOW-TO](https://github.com/massenz/HOW-TOs/blob/master/HOW-TO%20Encrypt%20archive.rst)\n    with the steps to encrypt a file manually;\n-   the original [Ask\n    Ubuntu](http://askubuntu.com/questions/95920/encrypt-tar-gz-file-on-create)\n    post;\n-   [OpenSSL](https://openssl.org);\n-   [Ubuntu guide to\n    OpenSSL](https://help.ubuntu.com/community/OpenSSL).\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://bitbucket.org/marco/filecrypt", "keywords": "", "license": "Apache2", "maintainer": "", "maintainer_email": "", "name": "crytto", "package_url": "https://pypi.org/project/crytto/", "platform": "", "project_url": "https://pypi.org/project/crytto/", "project_urls": {"Homepage": "https://bitbucket.org/marco/filecrypt"}, "release_url": "https://pypi.org/project/crytto/0.7.2/", "requires_dist": ["PyYAML (>=3.11)", "sh (>=1.11)"], "requires_python": "", "summary": "An OpenSSL-based file encryption and decryption utility", "version": "0.7.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>filecrypt - OpenSSL file encryption</h1>\n<p>Author    <a href=\"http://codetrips.com\" rel=\"nofollow\">M. Massenzio</a></p>\n<hr>\n<p>Version   0.7.2\nUpdated   2020-04-30\nCode      <a href=\"https://bitbucket.org/marco/filecrypt\" rel=\"nofollow\">bitbucket.org</a></p>\n<h1>overview</h1>\n<p>Uses OpenSSL library to encrypt a file using a private/public key pair\nand a one-time secret.</p>\n<p>A full description of the process can be found\n<a href=\"https://github.com/massenz/HOW-TOs/blob/master/HOW-TO%20Encrypt%20archive.rst\" rel=\"nofollow\">here</a>.</p>\n<p>See also this <a href=\"https://codetrips.com/2016/07/13/filecrypt-openssl-file-encryption/\" rel=\"nofollow\">blog\nentry</a>\nfor more details.</p>\n<h1>installation</h1>\n<p>Install directly from PyPi:</p>\n<pre><code>pip install crytto\n</code></pre>\n<p>Please note the <strong>package name</strong> (<code>filecrypt</code> was conflicting with the\nexisting <code>FileCrypt</code> package name, and <code>crypto</code> was already taken).</p>\n<p>This requires OpenSSL to be installed on your machine:</p>\n<pre><code>sudo apt-get install openssl\n</code></pre>\n<p>Alternatively, clone the project from github and follow the instructions\nbelow:</p>\n<pre><code>git clone git@bitbucket.org:marco/filecrypt.git\n</code></pre>\n<p>Once cloned, you can try out functionality by packaging it as a\nself-contained executable: use the <code>package.sh</code> script to generate a\n<code>filecrypt.pyz</code> self-extracting executable (make sure to set the <code>x</code>\npermission on *nix systems) and then you can encrypt/decrpyt files (see\nthe <a href=\"#configuration\" rel=\"nofollow\">configuration</a> section first).</p>\n<p>```shell script # To encrypt ./filecrypt.pyz -o test.enc\n/path/to/my_plaintext.txt</p>\n<h1>To decrypt:</h1>\n<p>./filecrypt.pyz -d -o /path/to/whatever.txt test.enc ```</p>\n<p>Once all dependencies are installed:</p>\n<pre><code>pip install -r requirements.txt\n</code></pre>\n<p>tests can be run via:</p>\n<pre><code>./run_tests.sh\n</code></pre>\n<p>See both the <code>run_tests</code> and <code>package</code> scripts for examples of how to\nuse encryption/decryption.</p>\n<h1>configuration</h1>\n<p>This uses a YAML file to describe the configuration; by default it\nassumes it is in <code>/etc/filecrypt/conf.yml</code> but its location can be\nspecified using the <code>-f</code> flag.</p>\n<p>The structure of the <code>conf.yml</code> file is as follows:</p>\n<pre>keys:\n     private: sample.pem\n     public: sample.pub\n     secrets: .\n\nstore: keys.csv\n\n##\n# Any option below is optional and can be omitted.\n#\n# Where to store the encrypted file; the folder MUST already exist and the user\n# have write permissions.  Defaults to the current directory; can be overridden\n# using --out on the command line.\n#\n#out: /data/store/file\n\n# Whether to securely delete the original plaintext file; by default it is kept.\n# It can be overridden by using `--keep` when running `filecrypt`.  True by default.\nshred: true\n\n# Optional logging configuration - mostly useful to\n# diagnose issues.  Default is WARN level.\nlogging:\n   format: \"%(asctime)s [%(levelname)-5s] %(message)s\"\n   level: WARN\n</pre>\n<p>The <code>private</code>/<code>public</code> keys are a key-pair generated using the\n<code>openssl genrsa</code> command; the encryption key used to actually encrypt\nthe file will be created in the <code>secrets</code> folder, and afterward\nencrypted using the <code>public</code> key and stored in the location provided.</p>\n<p>The name will be <code>pass-key-nnnn.enc</code>, where <code>nnnn</code> will be a random\nvalue between <code>1000</code> and <code>9999</code>, that has not been already used for a\nfile in that folder.</p>\n<p>The name of the secret passphrase can also be defined by the user, using\nthe <code>--secret</code> option (it will be left unmodified):</p>\n<ul>\n<li>\n<p>if it does not exist a random secure one will be created, used for\nencryption, then encrypted and saved with the given path, while the\nplain-text temporary version securely destroyed; OR</p>\n</li>\n<li>\n<p>if it is the name of an already existing file, it will be decrypted,\nused to encrypt the file, then left <strong>unchanged</strong> on disk.</p>\n</li>\n</ul>\n<p><strong>NOTE</strong> we recommend NOT to re-use encryption passphrases, but always\ngenerate a new secret.</p>\n<p><strong>NOTE</strong> it is currently not possible to specify a plain-text\npassphrase: we always assume that the given file has been encrypted\nusing the <code>private</code> key.</p>\n<p>The <code>store</code> file is a CSV list of:</p>\n<pre><code>\"Original archive\",\"Encryption key\",\"Encrypted archive\"\n201511_data.tar.gz,/opt/store/pass-key-001.enc,201511_data.tar.gz.enc\n</code></pre>\n<p>a new line will be appended at the end; any comments will be left\nunchanged.</p>\n<h2>usage</h2>\n<h3>keypair generation</h3>\n<p>We do not provide the means to generate them (this will be done at a\nlater stage), but for now they can be generated using:</p>\n<pre><code>openssl genrsa -out ./key.pem 2048\nopenssl rsa -in key.pem -out key.pub -outform PEM -pubout\n</code></pre>\n<p>their path can then be specified in the <code>conf.yaml</code> file.</p>\n<h3>encryption</h3>\n<p>Always use the <code>--help</code> option to see the most up-to-date options\navailable; anyway, the basic usage is:</p>\n<pre><code>filecrypt my_secret.txt\n</code></pre>\n<p>which will create a <code>my_secret.txt.enc</code> file in the current directory,\nunless a different one has been specified using the <code>out</code> option in\n<code>/etc/filecrypt/conf.yml</code>.</p>\n<p>A completely random and cryptographically secure key will have been\ncreated; used; and then encrypted to the <code>secrets</code> location, its full\npath stored in the CSV keystore named in the <code>store</code> option of the YAML\nconfiguration file.</p>\n<p>Finally, the plaintext version of this key will have been safely\ndestroyed.</p>\n<p>A more elaborate one (see the example configuration in\n<code>examples/example_conf.yaml</code>):</p>\n<pre><code>filecrypt --conf example_conf.yaml -s secret-key.enc plaintext.txt\n</code></pre>\n<p>will create an encrypted copy of the file to be stored as\n<code>/data/store/plaintext.txt.enc</code>; the original file <strong>will not</strong> be\nsecurely destroyed (using <code>shred</code>); and the encryption key name and\nlocation (the current directory, and <code>secret-key.enc</code>) to be stored in\nthe <code>keys.csv</code> file:</p>\n<pre># Fragment of example_conf.yaml\n...\nstore: keys.csv\nout: /data/store\nshred: false\n</pre>\n<p><strong>Specifying the encryption destination</strong></p>\n<p>By default, the encrypted filename has the same name as the plaintext\nfile, with the <code>.enc</code> extension appended; and it is saved to either the\ncurrent directory or the <code>out</code> location specified in the configuration\nYAML.</p>\n<p>By using the <code>--out</code> (<code>-o</code>) option, it is possible to specify the\nlocation of the output encrypted file, either absolute, or relative to\nthe current directory:</p>\n<pre><code>filecrypt -o mysecret.ser my_secret.doc\n</code></pre>\n<p>or:</p>\n<pre><code>filecrypt -o secret/files/mysecret.ser my_secret.doc\n</code></pre>\n<p>Regardless of the means of specifying the input/outpup files, the full\npath to both files will <strong>always</strong> be used in the CSV keystore,\nregardless of whether a relative or absolute path was specified on the\ncommand line.</p>\n<p><strong>IMPORTANT</strong> &gt;We recommend testing your configuration and command-line\noptions on test files: <code>shred</code> erases files in a <em>terminal</em> way that is\n<strong>not</strong> recoverable: if you mess up, <strong>you will lose data</strong>. &gt; &gt;You\nhave been warned.</p>\n<h3>decryption</h3>\n<p>To decrypt a file that has been encrypted using this utility, use the\n<code>-d</code> flag:</p>\n<pre><code>decrypt -o example_conf.yaml -d plaintext.txt\n</code></pre>\n<p>If the encryption key (<code>--secret</code> or <code>-s</code>) is not specified, then the\napplication will try and locate the plaintext file in the keystore\nspecified in the <code>conf.yaml</code> using the <code>store</code> key:</p>\n<pre>store: keys.csv\n...\n</pre>\n<p>and derive the location of the encryption key from the entry, if one is\nfound.</p>\n<p>Please note that <strong>only the filename is used to lookup the key</strong> and so\ntwo <strong>encrypted</strong> filenames in different directories but with the same\nname will be assumed to have been encrypted with the same <code>passphrase</code>.</p>\n<p>The <code>passphrase</code> file, is stored with its full path: if you move the\nkeys, or rename any of the folder in their path, you will have to update\nthe <code>keystore</code> (or use the <code>-s</code> flag when decrypting).</p>\n<p>As with encryption, the <code>--out</code> flag can be used to specify the output\nfile; otherwise, the current directory will be used.</p>\n<p>The encrypted file will be left untouched: the <code>--keep</code> flag <em>may</em> be\nused, but will have no effect and the value of the <code>shred:</code> option will\nbe ignored.</p>\n<p>As the encrypted file is already cryptographically secure a simple\n<code>rm my_secret.doc.enc</code> will be sufficient to guarantee privacy.</p>\n<h3>sharing files</h3>\n<p>As of <code>0.5.x</code>, <code>crytto</code> supports encrypting a file using solely a Public\nKey, and then the resulting ecnrypted file can be securely decrypted by\nthe owner of the Secret Key.</p>\n<p>The main use case is to enable Alice to send Bob an encrypted file, once\nBob has given her a copy of his Public key; call the latter <code>bob.pub</code>\nand the file to share <code>my_secret.txt</code>, then Alice can execute:</p>\n<pre><code>filecrypt --send --key bob.pub --out my-secret.ser my_secret.txt\n</code></pre>\n<p>after encryption, in the current directory there will be the following\ntwo new files:</p>\n<pre><code>my-secret.ser\npass-key-000854.enc\n</code></pre>\n<p>the former is the encrypted contents of <code>my_secret.txt</code> and the latter\nthe encrypted passphrase (leaving out the <code>--out</code> argument would have\nmade the encrypted file's name <code>my_secret.txt.enc</code>).</p>\n<p>Those files can be both sent to Bob or, even better, provided to him\nseparately for added security; either way, upon receiving them, Bob can\nrun the following (we assume the <code>bob.pub</code> was the private half of the\nconfigured key pair that he keeps in his <a href=\"#configuration\" rel=\"nofollow\">configuration\nfile</a>):</p>\n<pre><code>filecrypt -s pass-key-000854.enc --out alice_secret.txt -d my-secret.ser\n</code></pre>\n<p>(again, leaving out the <code>--out</code> is useful when using the defaults, as\nthe <code>my_secret.txt.enc</code> would have turned back into <code>my_secret.txt</code> --\nin this case, the plaintext decrypted file would have been called\n<code>my-secret.ser.out</code>).</p>\n<h2>references</h2>\n<ul>\n<li>a <a href=\"https://github.com/massenz/HOW-TOs/blob/master/HOW-TO%20Encrypt%20archive.rst\" rel=\"nofollow\">detailed\nHOW-TO</a>\nwith the steps to encrypt a file manually;</li>\n<li>the original <a href=\"http://askubuntu.com/questions/95920/encrypt-tar-gz-file-on-create\" rel=\"nofollow\">Ask\nUbuntu</a>\npost;</li>\n<li><a href=\"https://openssl.org\" rel=\"nofollow\">OpenSSL</a>;</li>\n<li><a href=\"https://help.ubuntu.com/community/OpenSSL\" rel=\"nofollow\">Ubuntu guide to\nOpenSSL</a>.</li>\n</ul>\n\n          </div>"}, "last_serial": 7148648, "releases": {"0.2.0": [{"comment_text": "", "digests": {"md5": "3b8a5eb748757a2706229177d3d89ac4", "sha256": "71864e40915cda7d666362ad488764c8b69923aedad7fd0a843e48946303ad32"}, "downloads": -1, "filename": "crytto-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "3b8a5eb748757a2706229177d3d89ac4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 26647, "upload_time": "2016-09-19T01:41:40", "upload_time_iso_8601": "2016-09-19T01:41:40.912712Z", "url": "https://files.pythonhosted.org/packages/87/9f/d51c281e4e97c367b1868f1180c00bdd37655dc675329eb25d0eeec3bfdc/crytto-0.2.0-py3-none-any.whl", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "e0095cb4826db8089b7fde21888d4673", "sha256": "8e0313f9eb2d09f9b436840905ea9778c7ac8b4c53a9a3af8daceefdb587480b"}, "downloads": -1, "filename": "crytto-0.2.1.linux-x86_64.tar.gz", "has_sig": false, "md5_digest": "e0095cb4826db8089b7fde21888d4673", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11217, "upload_time": "2016-09-19T15:07:51", "upload_time_iso_8601": "2016-09-19T15:07:51.510513Z", "url": "https://files.pythonhosted.org/packages/73/dc/d50fae2842d43f841fd575114dabb9e2c5bf41d79ed29acbbb74139079f3/crytto-0.2.1.linux-x86_64.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "53764efff43fb7ea9e065b9e384a9f13", "sha256": "6e46e21bef1ecfe3d61d6a61e08e0ce186f79d70a74f713dc06c3e12c9081fbe"}, "downloads": -1, "filename": "crytto-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "53764efff43fb7ea9e065b9e384a9f13", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 26903, "upload_time": "2016-09-19T15:07:49", "upload_time_iso_8601": "2016-09-19T15:07:49.199088Z", "url": "https://files.pythonhosted.org/packages/a8/99/6a404c388985002cd8b81fdea06622f0a8314fbd7de79bfd57ed1f97bf63/crytto-0.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3e227de6d5cdfdd796abf36f08aaddd2", "sha256": "bbf1c8ffbb93b2a05cbe6db71f06a6211f019fe442572317a3855e3896593ecf"}, "downloads": -1, "filename": "crytto-0.2.1.tar.gz", "has_sig": false, "md5_digest": "3e227de6d5cdfdd796abf36f08aaddd2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10923, "upload_time": "2016-09-19T15:07:53", "upload_time_iso_8601": "2016-09-19T15:07:53.629283Z", "url": "https://files.pythonhosted.org/packages/62/d9/6a54fc631c85da59133d95b774e4c7026580e2996ea8149b7055390371af/crytto-0.2.1.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "78ef6b37a2fe9ee3fadc1afc184d0309", "sha256": "377fc18de2dc2f7cc160f3f95f00957548218146072d0695a751d735c70ab3b0"}, "downloads": -1, "filename": "crytto-0.3.1-py3-none-any.whl", "has_sig": false, "md5_digest": "78ef6b37a2fe9ee3fadc1afc184d0309", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 27101, "upload_time": "2017-06-01T04:24:29", "upload_time_iso_8601": "2017-06-01T04:24:29.570552Z", "url": "https://files.pythonhosted.org/packages/59/d7/3b42c0d83789387f0c3e1a7959a040cc8d6976697ec0c1ea69edf61b3a9d/crytto-0.3.1-py3-none-any.whl", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "94aaf2efe24478103b15149569358999", "sha256": "9c61cb83f2558e4a528d96eb62be67fccecbad27ca0315693cb7a294211763a7"}, "downloads": -1, "filename": "crytto-0.4.0-py3-none-any.whl", "has_sig": false, "md5_digest": "94aaf2efe24478103b15149569358999", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 28879, "upload_time": "2017-08-30T06:09:50", "upload_time_iso_8601": "2017-08-30T06:09:50.246352Z", "url": "https://files.pythonhosted.org/packages/11/db/bc7ea9c88b0e60f6321e23f3ee093d621e958a9acf660b8a3c54a157fd2a/crytto-0.4.0-py3-none-any.whl", "yanked": false}], "0.4.1": [{"comment_text": "", "digests": {"md5": "be4cb2695a2456951cab9829722d35eb", "sha256": "91af223d626ab0e7293c5a120f418274a8dfa4fc83cf8dfee533372603e7fc83"}, "downloads": -1, "filename": "crytto-0.4.1-py3-none-any.whl", "has_sig": false, "md5_digest": "be4cb2695a2456951cab9829722d35eb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 28889, "upload_time": "2017-09-03T22:51:11", "upload_time_iso_8601": "2017-09-03T22:51:11.805897Z", "url": "https://files.pythonhosted.org/packages/5b/fc/66b2d74a7e1344271ec36f62b58b6915155d366f780aa4eda883c78e6f13/crytto-0.4.1-py3-none-any.whl", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "2fc2c91d8fdbd8e853aed95043128598", "sha256": "db7c14d099091b90540855fb8304e2528263dcf231265e6c71dc080353aef509"}, "downloads": -1, "filename": "crytto-0.5.0-py3-none-any.whl", "has_sig": false, "md5_digest": "2fc2c91d8fdbd8e853aed95043128598", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 30803, "upload_time": "2017-10-16T04:42:12", "upload_time_iso_8601": "2017-10-16T04:42:12.657031Z", "url": "https://files.pythonhosted.org/packages/18/fe/cb9835ac80f21671f16e889554e2db47a327b5fd00dd922609a1ec0d6ccc/crytto-0.5.0-py3-none-any.whl", "yanked": false}], "0.6.0": [{"comment_text": "", "digests": {"md5": "a9d2344dee447087d16cf81df3dd0874", "sha256": "83d4f58331023c8ea9e45217a3ec7cfa67d6a85612bbb7b54e4962c791ef270e"}, "downloads": -1, "filename": "crytto-0.6.0-py3-none-any.whl", "has_sig": false, "md5_digest": "a9d2344dee447087d16cf81df3dd0874", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 23941, "upload_time": "2018-02-13T07:17:20", "upload_time_iso_8601": "2018-02-13T07:17:20.282872Z", "url": "https://files.pythonhosted.org/packages/2e/bd/79e87d88ff66c84f90d80dab8bcfc4935784d5e62d3d041a28a250e2e796/crytto-0.6.0-py3-none-any.whl", "yanked": false}], "0.6.1": [{"comment_text": "", "digests": {"md5": "d71c878feb00b701e5b51da853a0a144", "sha256": "9ffd6e5ed203260af4a695e27ce6371bdd9b75c84171cc2bbdd5341a4481a38f"}, "downloads": -1, "filename": "crytto-0.6.1-py3-none-any.whl", "has_sig": false, "md5_digest": "d71c878feb00b701e5b51da853a0a144", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 31420, "upload_time": "2018-05-31T08:23:40", "upload_time_iso_8601": "2018-05-31T08:23:40.917883Z", "url": "https://files.pythonhosted.org/packages/87/41/fb7364f4f9466b0a5739d8a55041e3e9f1e5a030c2ae0c87056f7ac569df/crytto-0.6.1-py3-none-any.whl", "yanked": false}], "0.6.2": [{"comment_text": "", "digests": {"md5": "a3040a64c0be1c664a481b21f1e4fe51", "sha256": "a75ee898b21518472373370ee3d1a760c8bfa9211d0328fa80213489df51dd6b"}, "downloads": -1, "filename": "crytto-0.6.2-py3-none-any.whl", "has_sig": false, "md5_digest": "a3040a64c0be1c664a481b21f1e4fe51", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 26656, "upload_time": "2019-07-03T05:20:27", "upload_time_iso_8601": "2019-07-03T05:20:27.905260Z", "url": "https://files.pythonhosted.org/packages/6c/33/36e5806c422e986f6a62b356962462374aaa746e5b60d1492b0929421459/crytto-0.6.2-py3-none-any.whl", "yanked": false}], "0.6.3": [{"comment_text": "", "digests": {"md5": "42f679b49bc0b8d79f733b203d910491", "sha256": "0405b3f23ea5baf6968084a8d79d149c3db0e9ecc4e00bba97d5256404064705"}, "downloads": -1, "filename": "crytto-0.6.3-py3-none-any.whl", "has_sig": false, "md5_digest": "42f679b49bc0b8d79f733b203d910491", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 26660, "upload_time": "2019-07-03T05:33:12", "upload_time_iso_8601": "2019-07-03T05:33:12.549240Z", "url": "https://files.pythonhosted.org/packages/03/e6/f9553a9149d910e4de87762c3c444237e7a0c05560baa2cf8204aa441028/crytto-0.6.3-py3-none-any.whl", "yanked": false}], "0.7.0": [{"comment_text": "", "digests": {"md5": "41afe5e8ff9fa33c4ea88ed811151938", "sha256": "5fa0aec10a69b2764d7ca0640ceaae7defc4a45d1700a9f1f7c9231927962928"}, "downloads": -1, "filename": "crytto-0.7.0-py3-none-any.whl", "has_sig": false, "md5_digest": "41afe5e8ff9fa33c4ea88ed811151938", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 16521, "upload_time": "2020-04-08T06:25:17", "upload_time_iso_8601": "2020-04-08T06:25:17.856047Z", "url": "https://files.pythonhosted.org/packages/a9/76/baee039a9e84bb34ebcbe70ad2d4630f7c1dd1b23c80b2faf69e99b4d394/crytto-0.7.0-py3-none-any.whl", "yanked": false}], "0.7.2": [{"comment_text": "", "digests": {"md5": "d6789f93e22f0cee7b97daaa89139aa3", "sha256": "12016a4348962ca593bb44d8301e6f46dd1262755f2545ecd3ddd539c6b9a4a4"}, "downloads": -1, "filename": "crytto-0.7.2-py3-none-any.whl", "has_sig": false, "md5_digest": "d6789f93e22f0cee7b97daaa89139aa3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 16654, "upload_time": "2020-05-01T22:28:14", "upload_time_iso_8601": "2020-05-01T22:28:14.295015Z", "url": "https://files.pythonhosted.org/packages/a3/67/8669c25d50dcd22ea09a7853d370c5d78ed438f6f4b72938cb8661ee3ae3/crytto-0.7.2-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d6789f93e22f0cee7b97daaa89139aa3", "sha256": "12016a4348962ca593bb44d8301e6f46dd1262755f2545ecd3ddd539c6b9a4a4"}, "downloads": -1, "filename": "crytto-0.7.2-py3-none-any.whl", "has_sig": false, "md5_digest": "d6789f93e22f0cee7b97daaa89139aa3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 16654, "upload_time": "2020-05-01T22:28:14", "upload_time_iso_8601": "2020-05-01T22:28:14.295015Z", "url": "https://files.pythonhosted.org/packages/a3/67/8669c25d50dcd22ea09a7853d370c5d78ed438f6f4b72938cb8661ee3ae3/crytto-0.7.2-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 00:41:56 2020"}