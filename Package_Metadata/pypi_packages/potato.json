{"info": {"author": "Sean Ochoa", "author_email": "sean.m.ochoa@gmail.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "License :: OSI Approved", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2.6"], "description": "=============\n== Potato ==\n=============\n\n\n\nGeneral\n================================================================\n\nThis project exposes a way to load classes dynamically and to\nmake sure that each class that is loaded has and adheres to one \nor more verifiable interfaces.\n\n\n\nProject Name\n================================================================\n\nThe project name started as simply \"class registry\", but that \nseemed really dull and boring.  Totally not entertaining.  So, \nmy wife and I brainstormed and we came up with the idea of a \nplant, which is both something that grows and somthing that \nsimply produces items according to technical specification\n(AKA factory).  Then, I started to consider the types of plants\nthat we grow which create hearty staples, and potatos came to \nmind.  And yes, I could have used \"potato plant\", but that \nwas too long, so now its just \"potato\".  My wife wanted to \ncall it \"pytatoe\", but I said that that was too cheesy.  \n\n\n\nMotivation\n================================================================\n\nI wanted a system for a plug-in architecture.  I got the idea \nfor this project from the following stackoverflow.com question:\n\nhttp://stackoverflow.com/questions/5145378/dynamic-module-import-\nof-class-list-from-module-given-its-full-path\n\nAs I developed it, it became apparent that a construct and/or\npattern must have been used in the making of such evil software\nas Microsoft Windows.\n\n\n\nUsage\n================================================================\nSee example/ for a usage example.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/seanochoa/potato", "keywords": "dynamic class loading", "license": "Eclipse Public License -v 1.0", "maintainer": null, "maintainer_email": null, "name": "potato", "package_url": "https://pypi.org/project/potato/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/potato/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/seanochoa/potato"}, "release_url": "https://pypi.org/project/potato/0.0.2/", "requires_dist": null, "requires_python": null, "summary": "a dynamic class loader", "version": "0.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"general\">\n<h2>General</h2>\n<p>This project exposes a way to load classes dynamically and to\nmake sure that each class that is loaded has and adheres to one\nor more verifiable interfaces.</p>\n</div>\n<div id=\"project-name\">\n<h2>Project Name</h2>\n<p>The project name started as simply \u201cclass registry\u201d, but that\nseemed really dull and boring.  Totally not entertaining.  So,\nmy wife and I brainstormed and we came up with the idea of a\nplant, which is both something that grows and somthing that\nsimply produces items according to technical specification\n(AKA factory).  Then, I started to consider the types of plants\nthat we grow which create hearty staples, and potatos came to\nmind.  And yes, I could have used \u201cpotato plant\u201d, but that\nwas too long, so now its just \u201cpotato\u201d.  My wife wanted to\ncall it \u201cpytatoe\u201d, but I said that that was too cheesy.</p>\n</div>\n<div id=\"motivation\">\n<h2>Motivation</h2>\n<p>I wanted a system for a plug-in architecture.  I got the idea\nfor this project from the following stackoverflow.com question:</p>\n<p><a href=\"http://stackoverflow.com/questions/5145378/dynamic-module-import\" rel=\"nofollow\">http://stackoverflow.com/questions/5145378/dynamic-module-import</a>-\nof-class-list-from-module-given-its-full-path</p>\n<p>As I developed it, it became apparent that a construct and/or\npattern must have been used in the making of such evil software\nas Microsoft Windows.</p>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>See example/ for a usage example.</p>\n</div>\n\n          </div>"}, "last_serial": 796625, "releases": {"0.0.2": [{"comment_text": "", "digests": {"md5": "5680cf1cd25a588fd2d93f65594aa6d1", "sha256": "764b17610c960a60ba261ff94077c4bd2b49c5c952134eab31b408f8c4f78780"}, "downloads": -1, "filename": "potato-0.0.2.tar.gz", "has_sig": false, "md5_digest": "5680cf1cd25a588fd2d93f65594aa6d1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10179, "upload_time": "2011-04-24T02:41:56", "upload_time_iso_8601": "2011-04-24T02:41:56.655885Z", "url": "https://files.pythonhosted.org/packages/2d/3d/9f754d81e5ae9956d774970b0ccccce5060dc618b32efdd9b4d6ee4aa1bd/potato-0.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "5680cf1cd25a588fd2d93f65594aa6d1", "sha256": "764b17610c960a60ba261ff94077c4bd2b49c5c952134eab31b408f8c4f78780"}, "downloads": -1, "filename": "potato-0.0.2.tar.gz", "has_sig": false, "md5_digest": "5680cf1cd25a588fd2d93f65594aa6d1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10179, "upload_time": "2011-04-24T02:41:56", "upload_time_iso_8601": "2011-04-24T02:41:56.655885Z", "url": "https://files.pythonhosted.org/packages/2d/3d/9f754d81e5ae9956d774970b0ccccce5060dc618b32efdd9b4d6ee4aa1bd/potato-0.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:20:51 2020"}