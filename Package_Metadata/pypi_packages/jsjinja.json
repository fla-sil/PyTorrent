{"info": {"author": "Syrus Akbary", "author_email": "me@syrusakbary.com", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "Environment :: Console", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Topic :: Scientific/Engineering"], "description": "JsJinja: Render Jinja2 Templates in JS\n======================================\n\nJsJinja lets you use your `Jinja2`_ templates in Javascript. It\n**compile the Jinja2 templates to Javascript with no restrictions**.\n\nThe js can be generated via command line ``jsjinja <template file>`` or\nthrough the ``{% jsjinja %}`` tag in the templates.\n\nYou can use:\n\n-  Template inheritance (Include, Extends, Blocks, super, \u2026)\n-  Import\n-  Macros\n-  Tests\n-  Filters\n-  Tags\n\nThe only exception is that **you cannot use custom tags** like\n``{% customtag %}{% endcustomtag %}``.\n\n\nInstalling\n----------\n\nFirst, you must do:\n\n::\n\n    pip install jsjinja\n\n\nNutshell\n========\n\nHere a small example of a Jinja template:\n\n.. code:: html+django\n\n    {% extends 'base.html' %}\n    {% block title %}Memberlist{% endblock %}\n    {% block content %}\n      <ul>\n      {% for user in users %}\n        <li><a href=\"{{ user.url }}\">{{ user.username }}</a></li>\n      {% endfor %}\n      </ul>\n    {% endblock %}\n\nAnd here is the javascript compiled template:\n\n.. code:: javascript\n\n    (function() {\n        Jinja2.extends(Template, Jinja2.Template);\n        Jinja2.registerTemplate(\"readme_template.tmpl\", Template);\n        function Template() {return Template.__super__.constructor.apply(this, arguments);};\n        Template.prototype.root = function (context) {\n            var buf = \"\";\n            var parent_template = Jinja2.getTemplate(\"base.html\", \"readme_template.tmpl\");\n            for (name in parent_template.blocks) {\n                var parent_block = parent_template.blocks[name];\n                context.blocks[name] = context.blocks[name] || [];\n                context.blocks[name].push(parent_block)\n            }\n            buf += parent_template.root(context);\n            return buf;\n        }\n        Template.prototype.block_content = function (context) {\n            var buf = \"\";\n            var l_users = context.resolve(\"users\");\n            buf += \"\\n  <ul>\\n  \";\n            var l_user = undefined;\n            var t_1 = l_users;\n            for (var t_2= 0, t_3 = t_1.length; t_2<t_3; t_2++) {\n                l_user = t_1[t_2];\n                buf += '\\n    <li><a href=\"';\n                buf += l_user['url'];\n                buf += '\">';\n                buf += l_user['username'];\n                buf += '</a></li>\\n  ';\n            }\n            l_user = undefined;\n            buf += \"\\n  </ul>\\n\";\n            return buf;\n        }\n        Template.prototype.block_title = function (context) {\n            var buf = \"\";\n            buf += \"Memberlist\";\n            return buf;\n        }\n        return Template;\n    })()\n\nInstallation\n============\n\nFor begin using JsJinja just add ``jsjinja.ext.JsJinjaExtension`` to\nyour Jinja2 Environment.\n\nExample:\n\n.. code:: python\n\n    import jinja2\n    env = jinja2.Environment(extensions=['jsjinja.ext.JsJinjaExtension',])\n\nOr:\n\n.. code:: python\n\n    jinja_env.add_extension('jsjinja.ext.JsJinjaExtension')\n\nUsage\n=====\n\nGenerating js templates\n-----------------------\n\nOnce you have the JsJinja extension installed, you have to generate the\njs templates:\n\n.. code:: python\n\n    print jinja_env.jsjinja.generate('your_template.jinja2')\n\nOr just converting all\n\n.. code:: python\n\n    print jinja_env.jsjinja.generate_all()\n\nOr using the **command line utility**\n\n::\n\n    jsjinja <templates>\n\nRendering the js templates\n--------------------------\n\nFor start using the templates you must include the ``jinja2.runtime.js``\nscript:\n\n.. code:: html\n\n    <script src=\"https://raw.github.com/SyrusAkbary/jsjinja/master/jsjinja/lib/jinja2.runtime.min.js\"></script>\n\nAfter you have included ``jinja2.runtime.js`` and the generated js\ntemplates, then\n\n.. code:: javascript\n\n    html = Jinja2.getTemplate(\"template.html\").render({}})\n    $('body').html(html)\n\nExamples\n========\n\nLibrary comes with a lot of examples, you can find them in `examples`_\ndirectory.\n\n-  `Static`_ generation\n-  `Dynamic`_ generation\n\nTesting\n=======\n\nYou must have ``pyv8`` and ``nose`` python packages installed. You can\ndo the tests with\n\n::\n\n    ./test.sh\n\nTODOs and BUGS\n==============\n\nSee: http://github.com/syrusakbary/jsjinja/issues\n\n.. _Jinja2: http://jinja.pocoo.org/\n.. _examples: https://github.com/SyrusAkbary/jsjinja/tree/master/examples/\n.. _Static: https://github.com/SyrusAkbary/jsjinja/tree/master/examples/static\n.. _Dynamic: https://github.com/SyrusAkbary/jsjinja/tree/master/examples/dynamic", "description_content_type": null, "docs_url": null, "download_url": "git@github.com:syrusakbary/jsjinja.git", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/syrusakbary/jsjinja", "keywords": "jinja2 javascript converter coffeescript", "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "jsjinja", "package_url": "https://pypi.org/project/jsjinja/", "platform": "any", "project_url": "https://pypi.org/project/jsjinja/", "project_urls": {"Download": "git@github.com:syrusakbary/jsjinja.git", "Homepage": "https://github.com/syrusakbary/jsjinja"}, "release_url": "https://pypi.org/project/jsjinja/0.3.1/", "requires_dist": null, "requires_python": null, "summary": "Jinja2 to Javascript compiler", "version": "0.3.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"jsjinja-render-jinja2-templates-in-js\">\n<h2>JsJinja: Render Jinja2 Templates in JS</h2>\n<p>JsJinja lets you use your <a href=\"http://jinja.pocoo.org/\" rel=\"nofollow\">Jinja2</a> templates in Javascript. It\n<strong>compile the Jinja2 templates to Javascript with no restrictions</strong>.</p>\n<p>The js can be generated via command line <tt>jsjinja &lt;template file&gt;</tt> or\nthrough the <tt>{% jsjinja %}</tt> tag in the templates.</p>\n<p>You can use:</p>\n<ul>\n<li>Template inheritance (Include, Extends, Blocks, super, \u2026)</li>\n<li>Import</li>\n<li>Macros</li>\n<li>Tests</li>\n<li>Filters</li>\n<li>Tags</li>\n</ul>\n<p>The only exception is that <strong>you cannot use custom tags</strong> like\n<tt>{% customtag <span class=\"pre\">%}{%</span> endcustomtag %}</tt>.</p>\n<div id=\"installing\">\n<h3>Installing</h3>\n<p>First, you must do:</p>\n<pre>pip install jsjinja\n</pre>\n</div>\n</div>\n<div id=\"nutshell\">\n<h2>Nutshell</h2>\n<p>Here a small example of a Jinja template:</p>\n<pre><span class=\"cp\">{%</span> <span class=\"k\">extends</span> <span class=\"s1\">'base.html'</span> <span class=\"cp\">%}</span>\n<span class=\"cp\">{%</span> <span class=\"k\">block</span> <span class=\"nv\">title</span> <span class=\"cp\">%}</span>Memberlist<span class=\"cp\">{%</span> <span class=\"k\">endblock</span> <span class=\"cp\">%}</span>\n<span class=\"cp\">{%</span> <span class=\"k\">block</span> <span class=\"nv\">content</span> <span class=\"cp\">%}</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">ul</span><span class=\"p\">&gt;</span>\n  <span class=\"cp\">{%</span> <span class=\"k\">for</span> <span class=\"nv\">user</span> <span class=\"k\">in</span> <span class=\"nv\">users</span> <span class=\"cp\">%}</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">li</span><span class=\"p\">&gt;&lt;</span><span class=\"nt\">a</span> <span class=\"na\">href</span><span class=\"o\">=</span><span class=\"s\">\"</span><span class=\"cp\">{{</span> <span class=\"nv\">user.url</span> <span class=\"cp\">}}</span><span class=\"s\">\"</span><span class=\"p\">&gt;</span><span class=\"cp\">{{</span> <span class=\"nv\">user.username</span> <span class=\"cp\">}}</span><span class=\"p\">&lt;/</span><span class=\"nt\">a</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>\n  <span class=\"cp\">{%</span> <span class=\"k\">endfor</span> <span class=\"cp\">%}</span>\n  <span class=\"p\">&lt;/</span><span class=\"nt\">ul</span><span class=\"p\">&gt;</span>\n<span class=\"cp\">{%</span> <span class=\"k\">endblock</span> <span class=\"cp\">%}</span>\n</pre>\n<p>And here is the javascript compiled template:</p>\n<pre><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nx\">Jinja2</span><span class=\"p\">.</span><span class=\"kr\">extends</span><span class=\"p\">(</span><span class=\"nx\">Template</span><span class=\"p\">,</span> <span class=\"nx\">Jinja2</span><span class=\"p\">.</span><span class=\"nx\">Template</span><span class=\"p\">);</span>\n    <span class=\"nx\">Jinja2</span><span class=\"p\">.</span><span class=\"nx\">registerTemplate</span><span class=\"p\">(</span><span class=\"s2\">\"readme_template.tmpl\"</span><span class=\"p\">,</span> <span class=\"nx\">Template</span><span class=\"p\">);</span>\n    <span class=\"kd\">function</span> <span class=\"nx\">Template</span><span class=\"p\">()</span> <span class=\"p\">{</span><span class=\"k\">return</span> <span class=\"nx\">Template</span><span class=\"p\">.</span><span class=\"nx\">__super__</span><span class=\"p\">.</span><span class=\"nx\">constructor</span><span class=\"p\">.</span><span class=\"nx\">apply</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">,</span> <span class=\"nx\">arguments</span><span class=\"p\">);};</span>\n    <span class=\"nx\">Template</span><span class=\"p\">.</span><span class=\"nx\">prototype</span><span class=\"p\">.</span><span class=\"nx\">root</span> <span class=\"o\">=</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">context</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">buf</span> <span class=\"o\">=</span> <span class=\"s2\">\"\"</span><span class=\"p\">;</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">parent_template</span> <span class=\"o\">=</span> <span class=\"nx\">Jinja2</span><span class=\"p\">.</span><span class=\"nx\">getTemplate</span><span class=\"p\">(</span><span class=\"s2\">\"base.html\"</span><span class=\"p\">,</span> <span class=\"s2\">\"readme_template.tmpl\"</span><span class=\"p\">);</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"nx\">name</span> <span class=\"k\">in</span> <span class=\"nx\">parent_template</span><span class=\"p\">.</span><span class=\"nx\">blocks</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"kd\">var</span> <span class=\"nx\">parent_block</span> <span class=\"o\">=</span> <span class=\"nx\">parent_template</span><span class=\"p\">.</span><span class=\"nx\">blocks</span><span class=\"p\">[</span><span class=\"nx\">name</span><span class=\"p\">];</span>\n            <span class=\"nx\">context</span><span class=\"p\">.</span><span class=\"nx\">blocks</span><span class=\"p\">[</span><span class=\"nx\">name</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nx\">context</span><span class=\"p\">.</span><span class=\"nx\">blocks</span><span class=\"p\">[</span><span class=\"nx\">name</span><span class=\"p\">]</span> <span class=\"o\">||</span> <span class=\"p\">[];</span>\n            <span class=\"nx\">context</span><span class=\"p\">.</span><span class=\"nx\">blocks</span><span class=\"p\">[</span><span class=\"nx\">name</span><span class=\"p\">].</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"nx\">parent_block</span><span class=\"p\">)</span>\n        <span class=\"p\">}</span>\n        <span class=\"nx\">buf</span> <span class=\"o\">+=</span> <span class=\"nx\">parent_template</span><span class=\"p\">.</span><span class=\"nx\">root</span><span class=\"p\">(</span><span class=\"nx\">context</span><span class=\"p\">);</span>\n        <span class=\"k\">return</span> <span class=\"nx\">buf</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"nx\">Template</span><span class=\"p\">.</span><span class=\"nx\">prototype</span><span class=\"p\">.</span><span class=\"nx\">block_content</span> <span class=\"o\">=</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">context</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">buf</span> <span class=\"o\">=</span> <span class=\"s2\">\"\"</span><span class=\"p\">;</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">l_users</span> <span class=\"o\">=</span> <span class=\"nx\">context</span><span class=\"p\">.</span><span class=\"nx\">resolve</span><span class=\"p\">(</span><span class=\"s2\">\"users\"</span><span class=\"p\">);</span>\n        <span class=\"nx\">buf</span> <span class=\"o\">+=</span> <span class=\"s2\">\"\\n  &lt;ul&gt;\\n  \"</span><span class=\"p\">;</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">l_user</span> <span class=\"o\">=</span> <span class=\"kc\">undefined</span><span class=\"p\">;</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">t_1</span> <span class=\"o\">=</span> <span class=\"nx\">l_users</span><span class=\"p\">;</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">var</span> <span class=\"nx\">t_2</span><span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nx\">t_3</span> <span class=\"o\">=</span> <span class=\"nx\">t_1</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">;</span> <span class=\"nx\">t_2</span><span class=\"o\">&lt;</span><span class=\"nx\">t_3</span><span class=\"p\">;</span> <span class=\"nx\">t_2</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"nx\">l_user</span> <span class=\"o\">=</span> <span class=\"nx\">t_1</span><span class=\"p\">[</span><span class=\"nx\">t_2</span><span class=\"p\">];</span>\n            <span class=\"nx\">buf</span> <span class=\"o\">+=</span> <span class=\"s1\">'\\n    &lt;li&gt;&lt;a href=\"'</span><span class=\"p\">;</span>\n            <span class=\"nx\">buf</span> <span class=\"o\">+=</span> <span class=\"nx\">l_user</span><span class=\"p\">[</span><span class=\"s1\">'url'</span><span class=\"p\">];</span>\n            <span class=\"nx\">buf</span> <span class=\"o\">+=</span> <span class=\"s1\">'\"&gt;'</span><span class=\"p\">;</span>\n            <span class=\"nx\">buf</span> <span class=\"o\">+=</span> <span class=\"nx\">l_user</span><span class=\"p\">[</span><span class=\"s1\">'username'</span><span class=\"p\">];</span>\n            <span class=\"nx\">buf</span> <span class=\"o\">+=</span> <span class=\"s1\">'&lt;/a&gt;&lt;/li&gt;\\n  '</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"nx\">l_user</span> <span class=\"o\">=</span> <span class=\"kc\">undefined</span><span class=\"p\">;</span>\n        <span class=\"nx\">buf</span> <span class=\"o\">+=</span> <span class=\"s2\">\"\\n  &lt;/ul&gt;\\n\"</span><span class=\"p\">;</span>\n        <span class=\"k\">return</span> <span class=\"nx\">buf</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"nx\">Template</span><span class=\"p\">.</span><span class=\"nx\">prototype</span><span class=\"p\">.</span><span class=\"nx\">block_title</span> <span class=\"o\">=</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">context</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">buf</span> <span class=\"o\">=</span> <span class=\"s2\">\"\"</span><span class=\"p\">;</span>\n        <span class=\"nx\">buf</span> <span class=\"o\">+=</span> <span class=\"s2\">\"Memberlist\"</span><span class=\"p\">;</span>\n        <span class=\"k\">return</span> <span class=\"nx\">buf</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"nx\">Template</span><span class=\"p\">;</span>\n<span class=\"p\">})()</span>\n</pre>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>For begin using JsJinja just add <tt>jsjinja.ext.JsJinjaExtension</tt> to\nyour Jinja2 Environment.</p>\n<p>Example:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">jinja2</span>\n<span class=\"n\">env</span> <span class=\"o\">=</span> <span class=\"n\">jinja2</span><span class=\"o\">.</span><span class=\"n\">Environment</span><span class=\"p\">(</span><span class=\"n\">extensions</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'jsjinja.ext.JsJinjaExtension'</span><span class=\"p\">,])</span>\n</pre>\n<p>Or:</p>\n<pre><span class=\"n\">jinja_env</span><span class=\"o\">.</span><span class=\"n\">add_extension</span><span class=\"p\">(</span><span class=\"s1\">'jsjinja.ext.JsJinjaExtension'</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<div id=\"generating-js-templates\">\n<h3>Generating js templates</h3>\n<p>Once you have the JsJinja extension installed, you have to generate the\njs templates:</p>\n<pre><span class=\"nb\">print</span> <span class=\"n\">jinja_env</span><span class=\"o\">.</span><span class=\"n\">jsjinja</span><span class=\"o\">.</span><span class=\"n\">generate</span><span class=\"p\">(</span><span class=\"s1\">'your_template.jinja2'</span><span class=\"p\">)</span>\n</pre>\n<p>Or just converting all</p>\n<pre><span class=\"nb\">print</span> <span class=\"n\">jinja_env</span><span class=\"o\">.</span><span class=\"n\">jsjinja</span><span class=\"o\">.</span><span class=\"n\">generate_all</span><span class=\"p\">()</span>\n</pre>\n<p>Or using the <strong>command line utility</strong></p>\n<pre>jsjinja &lt;templates&gt;\n</pre>\n</div>\n<div id=\"rendering-the-js-templates\">\n<h3>Rendering the js templates</h3>\n<p>For start using the templates you must include the <tt>jinja2.runtime.js</tt>\nscript:</p>\n<pre><span class=\"p\">&lt;</span><span class=\"nt\">script</span> <span class=\"na\">src</span><span class=\"o\">=</span><span class=\"s\">\"https://raw.github.com/SyrusAkbary/jsjinja/master/jsjinja/lib/jinja2.runtime.min.js\"</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\n</pre>\n<p>After you have included <tt>jinja2.runtime.js</tt> and the generated js\ntemplates, then</p>\n<pre><span class=\"nx\">html</span> <span class=\"o\">=</span> <span class=\"nx\">Jinja2</span><span class=\"p\">.</span><span class=\"nx\">getTemplate</span><span class=\"p\">(</span><span class=\"s2\">\"template.html\"</span><span class=\"p\">).</span><span class=\"nx\">render</span><span class=\"p\">({}})</span>\n<span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s1\">'body'</span><span class=\"p\">).</span><span class=\"nx\">html</span><span class=\"p\">(</span><span class=\"nx\">html</span><span class=\"p\">)</span>\n</pre>\n</div>\n</div>\n<div id=\"examples\">\n<h2>Examples</h2>\n<p>Library comes with a lot of examples, you can find them in <a href=\"https://github.com/SyrusAkbary/jsjinja/tree/master/examples/\" rel=\"nofollow\">examples</a>\ndirectory.</p>\n<ul>\n<li><a href=\"https://github.com/SyrusAkbary/jsjinja/tree/master/examples/static\" rel=\"nofollow\">Static</a> generation</li>\n<li><a href=\"https://github.com/SyrusAkbary/jsjinja/tree/master/examples/dynamic\" rel=\"nofollow\">Dynamic</a> generation</li>\n</ul>\n</div>\n<div id=\"testing\">\n<h2>Testing</h2>\n<p>You must have <tt>pyv8</tt> and <tt>nose</tt> python packages installed. You can\ndo the tests with</p>\n<pre>./test.sh\n</pre>\n</div>\n<div id=\"todos-and-bugs\">\n<h2>TODOs and BUGS</h2>\n<p>See: <a href=\"http://github.com/syrusakbary/jsjinja/issues\" rel=\"nofollow\">http://github.com/syrusakbary/jsjinja/issues</a></p>\n</div>\n\n          </div>"}, "last_serial": 793793, "releases": {"0.2": [{"comment_text": "", "digests": {"md5": "81167ae3c11006cb975a28e12a1b4a1c", "sha256": "9ef5e783c1718c9030d592c9ae5b694220f0f5e6dd4f6292741980f221826a04"}, "downloads": -1, "filename": "jsjinja-0.2.tar.gz", "has_sig": false, "md5_digest": "81167ae3c11006cb975a28e12a1b4a1c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22488, "upload_time": "2012-11-27T22:09:57", "upload_time_iso_8601": "2012-11-27T22:09:57.081022Z", "url": "https://files.pythonhosted.org/packages/71/91/0fa59c06a1082f6e5bd10ed27a034c385c57dfdc53f06559f3ff5975283f/jsjinja-0.2.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "64de1b18f197a7e07750dd85b5809043", "sha256": "13e54f60149046a5f98f960f6b6b7fcf910ab42597fc61749bd13bb5d7a85497"}, "downloads": -1, "filename": "jsjinja-0.2.1.tar.gz", "has_sig": false, "md5_digest": "64de1b18f197a7e07750dd85b5809043", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 31170, "upload_time": "2012-12-28T18:34:55", "upload_time_iso_8601": "2012-12-28T18:34:55.496310Z", "url": "https://files.pythonhosted.org/packages/c9/f9/b166027827fa0700952f37eab88b1ac77fde22d4a67e03078b3b98b8daeb/jsjinja-0.2.1.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "97453a08c31fb42bbbcf69329ee141f4", "sha256": "061475c23c7ebee22eb2d5b71ef1b18ca0e2094d9aeda46819bd417f453ed5dd"}, "downloads": -1, "filename": "jsjinja-0.3.0.tar.gz", "has_sig": false, "md5_digest": "97453a08c31fb42bbbcf69329ee141f4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29384, "upload_time": "2013-04-18T18:21:50", "upload_time_iso_8601": "2013-04-18T18:21:50.608131Z", "url": "https://files.pythonhosted.org/packages/f2/6c/2b5f41409d0b1222daa03eea2218eeac33634f093e94b16dbfcc58ff98f6/jsjinja-0.3.0.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "4cc8dae1d548166f6a4fcb6ed358c8bf", "sha256": "98bfbbd08caa28d6c45bad452053639574e17dd94fd518cc718c5f482f54479c"}, "downloads": -1, "filename": "jsjinja-0.3.1.tar.gz", "has_sig": false, "md5_digest": "4cc8dae1d548166f6a4fcb6ed358c8bf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30385, "upload_time": "2013-04-24T22:58:07", "upload_time_iso_8601": "2013-04-24T22:58:07.506345Z", "url": "https://files.pythonhosted.org/packages/bc/6a/6b51d114c4e5959bcb6c3b8029b4c6c0b63ca965b55f1cd49acbe1ac7602/jsjinja-0.3.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4cc8dae1d548166f6a4fcb6ed358c8bf", "sha256": "98bfbbd08caa28d6c45bad452053639574e17dd94fd518cc718c5f482f54479c"}, "downloads": -1, "filename": "jsjinja-0.3.1.tar.gz", "has_sig": false, "md5_digest": "4cc8dae1d548166f6a4fcb6ed358c8bf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30385, "upload_time": "2013-04-24T22:58:07", "upload_time_iso_8601": "2013-04-24T22:58:07.506345Z", "url": "https://files.pythonhosted.org/packages/bc/6a/6b51d114c4e5959bcb6c3b8029b4c6c0b63ca965b55f1cd49acbe1ac7602/jsjinja-0.3.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:52:00 2020"}