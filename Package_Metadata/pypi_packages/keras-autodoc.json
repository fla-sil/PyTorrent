{"info": {"author": "The Keras team", "author_email": "gabrieldemarmiesse@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: Apache Software License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Documentation", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: Utilities"], "description": "# keras-autodoc\n\n![](https://https://github.com/keras-team/keras-autodoc/workflows/.github/workflows/dockerimage.yml/badge.svg?branch=master)\n\n\n[Autodoc](http://www.sphinx-doc.org/en/master/usage/extensions/autodoc.html) for [mkdocs](https://www.mkdocs.org/).\n\nkeras-autodoc will fetch the docstrings from the functions you wish to document and will insert them in the markdown files.\n\nTake a look at the [documentation](https://gabrieldemarmiesse.github.io/keras-autodoc/)!\n\n### Install\n\n```bash\npip install keras-autodoc\n```\n\nWe recommend pinning the version (eg: `pip install keras-autodoc==0.3.2`). We may break compatibility without any warning.\n\n### Example\n\nLet's suppose that you have a `docs` directory:\n\n```\n./docs\n|-- autogen.py\n|-- mkdocs.yml\n```\n\nThe API is quite simple:\n\n```python\n# content of docs/autogen.py\n\nfrom keras_autodoc import DocumentationGenerator\n\n\npages = {'layers/core.md': ['keras.layers.Dense', 'keras.layers.Flatten'],\n         'callbacks.md': ['keras.callbacks.TensorBoard']}\n\ndoc_generator = DocumentationGenerator(pages)\ndoc_generator.generate('./sources')\n```\n\n```yaml\n# content of docs/mkdocs.yml\n\nsite_name: My_site\ndocs_dir: sources\nsite_description: 'My pretty site.'\n\nnav:\n    - Core: layers/core.md\n    - Callbacks:\n      - Some callbacks: callbacks.md\n```\n\nThen you just have to run:\n\n```bash\npython autogen.py\nmkdocs serve\n```\n\nand you'll be able to see your website at [localhost:8000/callbacks](http://localhost:8000/callbacks/).\n\n### Docstring format:\n\nThe docstrings used should use the The docstrings follow the [Google Python Style Guide](https://github.com/google/styleguide/blob/gh-pages/pyguide.md#381-docstrings) with markdown, or just plain markdown.\n\nFor example, let's take this class:\n\n```python\nclass ImageDataGenerator:\n    \"\"\"Generate batches of tensor image data with real-time data augmentation.\n\n    The data will be looped over (in batches).\n\n    # Arguments\n        featurewise_center: Boolean.\n            Set input mean to 0 over the dataset, feature-wise.\n        zca_whitening: Boolean. Apply ZCA whitening.\n        width_shift_range: Float, 1-D array-like or int\n            - float: fraction of total width, if < 1, or pixels if >= 1.\n            - 1-D array-like: random elements from the array.\n            - int: integer number of pixels from interval\n                `(-width_shift_range, +width_shift_range)`\n            - With `width_shift_range=2` possible values\n                are integers `[-1, 0, +1]`,\n                same as with `width_shift_range=[-1, 0, +1]`,\n                while with `width_shift_range=1.0` possible values are floats\n                in the interval `[-1.0, +1.0)`.\n\n    # Examples\n\n    Example of using `.flow(x, y)`:\n    ```python\n    datagen = ImageDataGenerator(\n        featurewise_center=True,\n        zca_whitening=True,\n        width_shift_range=0.2)\n    # compute quantities required for featurewise normalization\n    # (std, mean, and principal components if ZCA whitening is applied)\n    datagen.fit(x_train)\n    # fits the model on batches with real-time data augmentation:\n    model.fit_generator(datagen.flow(x_train, y_train, batch_size=32),\n                        steps_per_epoch=len(x_train) / 32, epochs=epochs)\n    ```\n    \"\"\"\n\n    def __init__(self,featurewise_center, zca_whitening, width_shift_range):\n        pass\n```\n\nwill be rendered as:\n\n### ImageDataGenerator class:\n\n```python\ndummy_module.ImageDataGenerator(featurewise_center, zca_whitening, width_shift_range=0.0)\n```\n\nGenerate batches of tensor image data with real-time data augmentation.\n\nThe data will be looped over (in batches).\n\n__Arguments__\n\n- __featurewise_center__: Boolean.\n    Set input mean to 0 over the dataset, feature-wise.\n- __zca_whitening__: Boolean. Apply ZCA whitening.\n- __width_shift_range__: Float, 1-D array-like or int\n    - float: fraction of total width, if < 1, or pixels if >= 1.\n    - 1-D array-like: random elements from the array.\n    - int: integer number of pixels from interval\n        `(-width_shift_range, +width_shift_range)`\n    - With `width_shift_range=2` possible values\n        are integers `[-1, 0, +1]`,\n        same as with `width_shift_range=[-1, 0, +1]`,\n        while with `width_shift_range=1.0` possible values are floats\n        in the interval `[-1.0, +1.0)`.\n\n__Examples__\n\n\nExample of using `.flow(x, y)`:\n```python\ndatagen = ImageDataGenerator(\n    featurewise_center=True,\n    zca_whitening=True,\n    width_shift_range=0.2)\n# compute quantities required for featurewise normalization\n# (std, mean, and principal components if ZCA whitening is applied)\ndatagen.fit(x_train)\n# fits the model on batches with real-time data augmentation:\nmodel.fit_generator(datagen.flow(x_train, y_train, batch_size=32),\n                    steps_per_epoch=len(x_train) / 32, epochs=epochs)\n```\n\n### Take a look at our docs\n\nIf you want examples, you can take a look at [the docs directory of autokeras](https://github.com/keras-team/autokeras/tree/master/docs) as well as [the generated docs](https://autokeras.com/).\n\nYou can also look at [the docs directory of keras-tuner](https://github.com/keras-team/keras-tuner/tree/master/docs).\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/keras-team/keras-autodoc", "keywords": "", "license": "Apache License 2.0", "maintainer": "", "maintainer_email": "", "name": "keras-autodoc", "package_url": "https://pypi.org/project/keras-autodoc/", "platform": "", "project_url": "https://pypi.org/project/keras-autodoc/", "project_urls": {"Homepage": "https://github.com/keras-team/keras-autodoc"}, "release_url": "https://pypi.org/project/keras-autodoc/0.4.1/", "requires_dist": ["markdown", "sphinx", "black (==19.10b0)", "pytest ; extra == 'tests'", "pytest-pep8 ; extra == 'tests'"], "requires_python": "", "summary": "Building the Keras projects docs.", "version": "0.4.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>keras-autodoc</h1>\n<p><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e9dc7b388d39ce10fc757188b27300cb2bad7139/68747470733a2f2f68747470733a2f2f6769746875622e636f6d2f6b657261732d7465616d2f6b657261732d6175746f646f632f776f726b666c6f77732f2e6769746875622f776f726b666c6f77732f646f636b6572696d6167652e796d6c2f62616467652e7376673f6272616e63683d6d6173746572\"></p>\n<p><a href=\"http://www.sphinx-doc.org/en/master/usage/extensions/autodoc.html\" rel=\"nofollow\">Autodoc</a> for <a href=\"https://www.mkdocs.org/\" rel=\"nofollow\">mkdocs</a>.</p>\n<p>keras-autodoc will fetch the docstrings from the functions you wish to document and will insert them in the markdown files.</p>\n<p>Take a look at the <a href=\"https://gabrieldemarmiesse.github.io/keras-autodoc/\" rel=\"nofollow\">documentation</a>!</p>\n<h3>Install</h3>\n<pre>pip install keras-autodoc\n</pre>\n<p>We recommend pinning the version (eg: <code>pip install keras-autodoc==0.3.2</code>). We may break compatibility without any warning.</p>\n<h3>Example</h3>\n<p>Let's suppose that you have a <code>docs</code> directory:</p>\n<pre><code>./docs\n|-- autogen.py\n|-- mkdocs.yml\n</code></pre>\n<p>The API is quite simple:</p>\n<pre><span class=\"c1\"># content of docs/autogen.py</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">keras_autodoc</span> <span class=\"kn\">import</span> <span class=\"n\">DocumentationGenerator</span>\n\n\n<span class=\"n\">pages</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'layers/core.md'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'keras.layers.Dense'</span><span class=\"p\">,</span> <span class=\"s1\">'keras.layers.Flatten'</span><span class=\"p\">],</span>\n         <span class=\"s1\">'callbacks.md'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'keras.callbacks.TensorBoard'</span><span class=\"p\">]}</span>\n\n<span class=\"n\">doc_generator</span> <span class=\"o\">=</span> <span class=\"n\">DocumentationGenerator</span><span class=\"p\">(</span><span class=\"n\">pages</span><span class=\"p\">)</span>\n<span class=\"n\">doc_generator</span><span class=\"o\">.</span><span class=\"n\">generate</span><span class=\"p\">(</span><span class=\"s1\">'./sources'</span><span class=\"p\">)</span>\n</pre>\n<pre><span class=\"c1\"># content of docs/mkdocs.yml</span>\n\n<span class=\"nt\">site_name</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">My_site</span>\n<span class=\"nt\">docs_dir</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">sources</span>\n<span class=\"nt\">site_description</span><span class=\"p\">:</span> <span class=\"s\">'My</span><span class=\"nv\"> </span><span class=\"s\">pretty</span><span class=\"nv\"> </span><span class=\"s\">site.'</span>\n\n<span class=\"nt\">nav</span><span class=\"p\">:</span>\n    <span class=\"p p-Indicator\">-</span> <span class=\"nt\">Core</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">layers/core.md</span>\n    <span class=\"p p-Indicator\">-</span> <span class=\"nt\">Callbacks</span><span class=\"p\">:</span>\n      <span class=\"p p-Indicator\">-</span> <span class=\"nt\">Some callbacks</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">callbacks.md</span>\n</pre>\n<p>Then you just have to run:</p>\n<pre>python autogen.py\nmkdocs serve\n</pre>\n<p>and you'll be able to see your website at <a href=\"http://localhost:8000/callbacks/\" rel=\"nofollow\">localhost:8000/callbacks</a>.</p>\n<h3>Docstring format:</h3>\n<p>The docstrings used should use the The docstrings follow the <a href=\"https://github.com/google/styleguide/blob/gh-pages/pyguide.md#381-docstrings\" rel=\"nofollow\">Google Python Style Guide</a> with markdown, or just plain markdown.</p>\n<p>For example, let's take this class:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">ImageDataGenerator</span><span class=\"p\">:</span>\n    <span class=\"sd\">\"\"\"Generate batches of tensor image data with real-time data augmentation.</span>\n\n<span class=\"sd\">    The data will be looped over (in batches).</span>\n\n<span class=\"sd\">    # Arguments</span>\n<span class=\"sd\">        featurewise_center: Boolean.</span>\n<span class=\"sd\">            Set input mean to 0 over the dataset, feature-wise.</span>\n<span class=\"sd\">        zca_whitening: Boolean. Apply ZCA whitening.</span>\n<span class=\"sd\">        width_shift_range: Float, 1-D array-like or int</span>\n<span class=\"sd\">            - float: fraction of total width, if &lt; 1, or pixels if &gt;= 1.</span>\n<span class=\"sd\">            - 1-D array-like: random elements from the array.</span>\n<span class=\"sd\">            - int: integer number of pixels from interval</span>\n<span class=\"sd\">                `(-width_shift_range, +width_shift_range)`</span>\n<span class=\"sd\">            - With `width_shift_range=2` possible values</span>\n<span class=\"sd\">                are integers `[-1, 0, +1]`,</span>\n<span class=\"sd\">                same as with `width_shift_range=[-1, 0, +1]`,</span>\n<span class=\"sd\">                while with `width_shift_range=1.0` possible values are floats</span>\n<span class=\"sd\">                in the interval `[-1.0, +1.0)`.</span>\n\n<span class=\"sd\">    # Examples</span>\n\n<span class=\"sd\">    Example of using `.flow(x, y)`:</span>\n<span class=\"sd\">    ```python</span>\n<span class=\"sd\">    datagen = ImageDataGenerator(</span>\n<span class=\"sd\">        featurewise_center=True,</span>\n<span class=\"sd\">        zca_whitening=True,</span>\n<span class=\"sd\">        width_shift_range=0.2)</span>\n<span class=\"sd\">    # compute quantities required for featurewise normalization</span>\n<span class=\"sd\">    # (std, mean, and principal components if ZCA whitening is applied)</span>\n<span class=\"sd\">    datagen.fit(x_train)</span>\n<span class=\"sd\">    # fits the model on batches with real-time data augmentation:</span>\n<span class=\"sd\">    model.fit_generator(datagen.flow(x_train, y_train, batch_size=32),</span>\n<span class=\"sd\">                        steps_per_epoch=len(x_train) / 32, epochs=epochs)</span>\n<span class=\"sd\">    ```</span>\n<span class=\"sd\">    \"\"\"</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"n\">featurewise_center</span><span class=\"p\">,</span> <span class=\"n\">zca_whitening</span><span class=\"p\">,</span> <span class=\"n\">width_shift_range</span><span class=\"p\">):</span>\n        <span class=\"k\">pass</span>\n</pre>\n<p>will be rendered as:</p>\n<h3>ImageDataGenerator class:</h3>\n<pre><span class=\"n\">dummy_module</span><span class=\"o\">.</span><span class=\"n\">ImageDataGenerator</span><span class=\"p\">(</span><span class=\"n\">featurewise_center</span><span class=\"p\">,</span> <span class=\"n\">zca_whitening</span><span class=\"p\">,</span> <span class=\"n\">width_shift_range</span><span class=\"o\">=</span><span class=\"mf\">0.0</span><span class=\"p\">)</span>\n</pre>\n<p>Generate batches of tensor image data with real-time data augmentation.</p>\n<p>The data will be looped over (in batches).</p>\n<p><strong>Arguments</strong></p>\n<ul>\n<li><strong>featurewise_center</strong>: Boolean.\nSet input mean to 0 over the dataset, feature-wise.</li>\n<li><strong>zca_whitening</strong>: Boolean. Apply ZCA whitening.</li>\n<li><strong>width_shift_range</strong>: Float, 1-D array-like or int\n<ul>\n<li>float: fraction of total width, if &lt; 1, or pixels if &gt;= 1.</li>\n<li>1-D array-like: random elements from the array.</li>\n<li>int: integer number of pixels from interval\n<code>(-width_shift_range, +width_shift_range)</code></li>\n<li>With <code>width_shift_range=2</code> possible values\nare integers <code>[-1, 0, +1]</code>,\nsame as with <code>width_shift_range=[-1, 0, +1]</code>,\nwhile with <code>width_shift_range=1.0</code> possible values are floats\nin the interval <code>[-1.0, +1.0)</code>.</li>\n</ul>\n</li>\n</ul>\n<p><strong>Examples</strong></p>\n<p>Example of using <code>.flow(x, y)</code>:</p>\n<pre><span class=\"n\">datagen</span> <span class=\"o\">=</span> <span class=\"n\">ImageDataGenerator</span><span class=\"p\">(</span>\n    <span class=\"n\">featurewise_center</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n    <span class=\"n\">zca_whitening</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n    <span class=\"n\">width_shift_range</span><span class=\"o\">=</span><span class=\"mf\">0.2</span><span class=\"p\">)</span>\n<span class=\"c1\"># compute quantities required for featurewise normalization</span>\n<span class=\"c1\"># (std, mean, and principal components if ZCA whitening is applied)</span>\n<span class=\"n\">datagen</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">x_train</span><span class=\"p\">)</span>\n<span class=\"c1\"># fits the model on batches with real-time data augmentation:</span>\n<span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">fit_generator</span><span class=\"p\">(</span><span class=\"n\">datagen</span><span class=\"o\">.</span><span class=\"n\">flow</span><span class=\"p\">(</span><span class=\"n\">x_train</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">,</span> <span class=\"n\">batch_size</span><span class=\"o\">=</span><span class=\"mi\">32</span><span class=\"p\">),</span>\n                    <span class=\"n\">steps_per_epoch</span><span class=\"o\">=</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">x_train</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">32</span><span class=\"p\">,</span> <span class=\"n\">epochs</span><span class=\"o\">=</span><span class=\"n\">epochs</span><span class=\"p\">)</span>\n</pre>\n<h3>Take a look at our docs</h3>\n<p>If you want examples, you can take a look at <a href=\"https://github.com/keras-team/autokeras/tree/master/docs\" rel=\"nofollow\">the docs directory of autokeras</a> as well as <a href=\"https://autokeras.com/\" rel=\"nofollow\">the generated docs</a>.</p>\n<p>You can also look at <a href=\"https://github.com/keras-team/keras-tuner/tree/master/docs\" rel=\"nofollow\">the docs directory of keras-tuner</a>.</p>\n\n          </div>"}, "last_serial": 6646609, "releases": {"0.3.2": [{"comment_text": "", "digests": {"md5": "d34f94719dc2200dc97689d6336f6618", "sha256": "3dfae1059a7d864a7a6267bb14e48459ebc49b47833917f9b448747f5c26cd04"}, "downloads": -1, "filename": "keras-autodoc-0.3.2.tar.gz", "has_sig": false, "md5_digest": "d34f94719dc2200dc97689d6336f6618", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18193, "upload_time": "2019-11-06T10:53:42", "upload_time_iso_8601": "2019-11-06T10:53:42.867997Z", "url": "https://files.pythonhosted.org/packages/7e/e1/ddf78328f80f4dd2a2a2f1beca5ec6b0a00b0bfb259bb5a73d188f09c699/keras-autodoc-0.3.2.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "601db9025b9cb660629a97899f215a39", "sha256": "3e9e9538eaafc836b9c8d25e9796e12065cdb787fd102bc527fe7b4deb3bc524"}, "downloads": -1, "filename": "keras-autodoc-0.4.0.tar.gz", "has_sig": false, "md5_digest": "601db9025b9cb660629a97899f215a39", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20458, "upload_time": "2019-11-10T22:16:49", "upload_time_iso_8601": "2019-11-10T22:16:49.159965Z", "url": "https://files.pythonhosted.org/packages/e6/4b/18e08d280b4767623dae6fed14a3021c58b473553e04766544a1536c3f6d/keras-autodoc-0.4.0.tar.gz", "yanked": false}], "0.4.1": [{"comment_text": "", "digests": {"md5": "175cb3538f06b83a4da6b5aec2ab2b39", "sha256": "3fe1ef32808426dd074fa6fdb4201e32f6b98e72f96255d383628cb116c6c548"}, "downloads": -1, "filename": "keras_autodoc-0.4.1-py3-none-any.whl", "has_sig": false, "md5_digest": "175cb3538f06b83a4da6b5aec2ab2b39", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 28504, "upload_time": "2020-02-17T14:53:12", "upload_time_iso_8601": "2020-02-17T14:53:12.684089Z", "url": "https://files.pythonhosted.org/packages/17/50/7ccb6b230801f2336378e115534cdae62eb8aba65f90c5d3bad2488e4311/keras_autodoc-0.4.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2bfc23b22ae89d0794d30d8b4870852f", "sha256": "cfde301f429d1ca21960f5d30e1f34039224f0f03ae74158f2f00cb9f8356e52"}, "downloads": -1, "filename": "keras-autodoc-0.4.1.tar.gz", "has_sig": false, "md5_digest": "2bfc23b22ae89d0794d30d8b4870852f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21314, "upload_time": "2020-02-17T14:53:13", "upload_time_iso_8601": "2020-02-17T14:53:13.875557Z", "url": "https://files.pythonhosted.org/packages/2b/62/6dbf1c1f7a996e7b18bedcf56de2e7b7072d609355af2f18d78ccbc7e1d7/keras-autodoc-0.4.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "175cb3538f06b83a4da6b5aec2ab2b39", "sha256": "3fe1ef32808426dd074fa6fdb4201e32f6b98e72f96255d383628cb116c6c548"}, "downloads": -1, "filename": "keras_autodoc-0.4.1-py3-none-any.whl", "has_sig": false, "md5_digest": "175cb3538f06b83a4da6b5aec2ab2b39", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 28504, "upload_time": "2020-02-17T14:53:12", "upload_time_iso_8601": "2020-02-17T14:53:12.684089Z", "url": "https://files.pythonhosted.org/packages/17/50/7ccb6b230801f2336378e115534cdae62eb8aba65f90c5d3bad2488e4311/keras_autodoc-0.4.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2bfc23b22ae89d0794d30d8b4870852f", "sha256": "cfde301f429d1ca21960f5d30e1f34039224f0f03ae74158f2f00cb9f8356e52"}, "downloads": -1, "filename": "keras-autodoc-0.4.1.tar.gz", "has_sig": false, "md5_digest": "2bfc23b22ae89d0794d30d8b4870852f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21314, "upload_time": "2020-02-17T14:53:13", "upload_time_iso_8601": "2020-02-17T14:53:13.875557Z", "url": "https://files.pythonhosted.org/packages/2b/62/6dbf1c1f7a996e7b18bedcf56de2e7b7072d609355af2f18d78ccbc7e1d7/keras-autodoc-0.4.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:50:14 2020"}