{"info": {"author": "David H. Ardell", "author_email": "dardell@ucmerced.edu", "bugtrack_url": null, "classifiers": [], "description": "=======================================================\nCMCpy -- Code-Message Coevolution Models in Python\n=======================================================\n\nCMCpy provides an object-oriented python API, together with command-line\ninterface executables, that implement \"Code-Message Coevolution\" models.\nThese published evolutionary models pertain to the evolution by natural\nselection of a genetic code in coevolution with a population of\nprotein-coding genes.\n\nFormally, CMC models are sets of quasispecies coupled together for their\nfitness through a genetic code. The system alternates between quasispecies\nequilibration and adaptive hill-climbing through codon assignments and\nreassignment by code mutation.\n\nCMCpy can reproduce the statistics and results of [Ardell_and_Sella_2001]_,\n[Sella_and_Ardell_2002]_, [Ardell_and_Sella_2002]_ and\n[Sella_and_Ardell_2006]_. CMCpy additionally implements additional\nextensions that have not yet been studied in published work. It is easliy\nfeasible to extend the present code-base to implement the model studied by\n[Vetsigian_et_al_2006]_.\n\nCMC evolutionary trajectories are partly a sequence of eigensystem\nsolutions. Qualitative differences in results on different platforms can\noriginate from differences in convergence criteria when power method-based\neigensystem solvers are used, or from differences in floating point\nrepresentations. Python defers to the platform C library for float\nrepresentation. The default eigensystem solver is the eig() function in\nNumpy.\n\nDependencies \n============================================ \n\nCMCpy relies heavily on, and absolutely requires, numpy as a prerequisite.\nYou should install numpy with the easy_install framework to be detected as\ninstalled when installing this package. \n\nIf you wish to play with an experimental CUDA-based power-method eigensystem\nsolver, you must install pycuda. This implementation is not faster than the\nNumPy default solver for many systems.\n\n\nInstallation\n============================================\n\t\t\t\nThis installer requires setuptools, the most recent python packaging\nframework. If you do not already have this installed, this package\nwill install it for you, so long as you have network access. Otherwise\npreinstall the correct version of setuptools using the EasyInstall\ninstallation instructions at\nhttp://peak.telecommunity.com/DevCenter/EasyInstall#installation-instructions \n\nIf you need to install this package somewhere other than the main\nsite-packages directory, install setuptools using the instructions for\nCustom Installation Locations before installing this package. The\ninstructions are here:\nhttp://peak.telecommunity.com/DevCenter/EasyInstall#custom-installation-locations\n\nIf you have downloaded the source-code package, the easiest way to\ninstall the package is to execute (from within the source root directory)::\n\n\teasy_install .\n\nMac users may need to run this command with \"sudo\" prepended.\n\nYou may also try simply executing:\n    \n    \teasy_install CMCpy\n\nUsage\n============================================\n\nCMCpy comes with an executable inside the bin subdirectory to the\ninstallation source package, a UNIX-compatible script called \"cmc\". \n\nAdditionally, a platform-specific executable may be automatically generated\non installation.\n\nPublished results with CMC models may be (at least qualitatively) reproduced\nthrough the --demo option to the executables.\n\nAlso try running the --help option to the executables after installation and\nfor a command-line example.\n\nProgrammers may use the executable in bin as a guide and template for how to\nprogram against the cmcpy API.\n\t\t       \t\t\t  \nDocumentation \n============================================ \n\nSome documentation of the cmcpy API is available within the \"doc\"\nsubdirectory of the source distribution. HTML, pdf and texinfo alternative\nformats are provided.\n\nLicensing and Attribution \n============================================\n\nThe CMCpy project is distributed under the terms of the Apache License 2.0\nas described in the file LICENSE.txt\n\nPlease cite Becich et al. (2012) in all scientific works that use this code.\n\nRelease Notes\n============================================\nThe most recent version is 0.1 released October 2012.\n\nSee CHANGES.txt for version-related changes to the CMCpy code-base.\n\nReferences\n============================================\n\n.. [Ardell_and_Sella_2001] D.H. Ardell and G. Sella (2001). On the evolution of redundancy in genetic codes. `Journal of Molecular Evolution 53(4/5):269-281`_.\n\n.. [Ardell_and_Sella_2002] D.H. Ardell and G. Sella (2002). No accident: genetic codes freeze in error-correcting patterns of the standard genetic code. `Philosophical Transactions of the Royal Society of London B 357:1625-1642`_.\n\n.. [Sella_and_Ardell_2002] G. Sella and D.H. Ardell (2002). The impact of message mutation on the fitness of a genetic code. `Journal of Molecular Evolution 54(5):638-651`_.\n\n.. [Sella_and_Ardell_2006] G. Sella and D.H. Ardell (2006). The coevolution of genes and genetic codes: Crick's frozen accident revisited. `J. Mol. Evol. 63(3):297-313`_.\n\n.. [Vetsigian_et_al_2006] Vetsigian K., Woese C. R., Goldenfeld N. (2006). Collective evolution and the genetic code. `Proc. Natl. Acad. Sci. U.S.A. 103, 10696-10701`_.\n\n\n.. _Journal of Molecular Evolution 53(4/5):269-281: http://dx.doi.org/10.1007/s002390010217\n\n.. _Philosophical Transactions of the Royal Society of London B 357:1625-1642: http://dx.doi.org/10.1098/rstb.2002.1071\n\n.. _Journal of Molecular Evolution 54(5):638-651: http://dx.doi.org/10.1007/s00239-001-0060-7\n\n.. _J. Mol. Evol. 63(3):297-313: http://dx.doi.org/10.1007/s00239-004-0176-7\n\n.. _Proc. Natl. Acad. Sci. U.S.A. 103, 10696-10701: http://www.pnas.org/cgi/pmidlookup?view=long&pmid=16818880", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://pypi.python.org/pypi/CMCpy/", "keywords": "", "license": "Apache 2.0", "maintainer": null, "maintainer_email": null, "name": "CMCpy", "package_url": "https://pypi.org/project/CMCpy/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/CMCpy/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://pypi.python.org/pypi/CMCpy/"}, "release_url": "https://pypi.org/project/CMCpy/0.3/", "requires_dist": null, "requires_python": null, "summary": "Genetic Code-Message Coevolution in Python", "version": "0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>CMCpy provides an object-oriented python API, together with command-line\ninterface executables, that implement \u201cCode-Message Coevolution\u201d models.\nThese published evolutionary models pertain to the evolution by natural\nselection of a genetic code in coevolution with a population of\nprotein-coding genes.</p>\n<p>Formally, CMC models are sets of quasispecies coupled together for their\nfitness through a genetic code. The system alternates between quasispecies\nequilibration and adaptive hill-climbing through codon assignments and\nreassignment by code mutation.</p>\n<p>CMCpy can reproduce the statistics and results of <a href=\"#ardell-and-sella-2001\" id=\"id1\" rel=\"nofollow\">[Ardell_and_Sella_2001]</a>,\n<a href=\"#sella-and-ardell-2002\" id=\"id2\" rel=\"nofollow\">[Sella_and_Ardell_2002]</a>, <a href=\"#ardell-and-sella-2002\" id=\"id3\" rel=\"nofollow\">[Ardell_and_Sella_2002]</a> and\n<a href=\"#sella-and-ardell-2006\" id=\"id4\" rel=\"nofollow\">[Sella_and_Ardell_2006]</a>. CMCpy additionally implements additional\nextensions that have not yet been studied in published work. It is easliy\nfeasible to extend the present code-base to implement the model studied by\n<a href=\"#vetsigian-et-al-2006\" id=\"id5\" rel=\"nofollow\">[Vetsigian_et_al_2006]</a>.</p>\n<p>CMC evolutionary trajectories are partly a sequence of eigensystem\nsolutions. Qualitative differences in results on different platforms can\noriginate from differences in convergence criteria when power method-based\neigensystem solvers are used, or from differences in floating point\nrepresentations. Python defers to the platform C library for float\nrepresentation. The default eigensystem solver is the eig() function in\nNumpy.</p>\n<div id=\"dependencies\">\n<h2>Dependencies</h2>\n<p>CMCpy relies heavily on, and absolutely requires, numpy as a prerequisite.\nYou should install numpy with the easy_install framework to be detected as\ninstalled when installing this package.</p>\n<p>If you wish to play with an experimental CUDA-based power-method eigensystem\nsolver, you must install pycuda. This implementation is not faster than the\nNumPy default solver for many systems.</p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>This installer requires setuptools, the most recent python packaging\nframework. If you do not already have this installed, this package\nwill install it for you, so long as you have network access. Otherwise\npreinstall the correct version of setuptools using the EasyInstall\ninstallation instructions at\n<a href=\"http://peak.telecommunity.com/DevCenter/EasyInstall#installation-instructions\" rel=\"nofollow\">http://peak.telecommunity.com/DevCenter/EasyInstall#installation-instructions</a></p>\n<p>If you need to install this package somewhere other than the main\nsite-packages directory, install setuptools using the instructions for\nCustom Installation Locations before installing this package. The\ninstructions are here:\n<a href=\"http://peak.telecommunity.com/DevCenter/EasyInstall#custom-installation-locations\" rel=\"nofollow\">http://peak.telecommunity.com/DevCenter/EasyInstall#custom-installation-locations</a></p>\n<p>If you have downloaded the source-code package, the easiest way to\ninstall the package is to execute (from within the source root directory):</p>\n<pre>easy_install .\n</pre>\n<p>Mac users may need to run this command with \u201csudo\u201d prepended.</p>\n<p>You may also try simply executing:</p>\n<blockquote>\neasy_install CMCpy</blockquote>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>CMCpy comes with an executable inside the bin subdirectory to the\ninstallation source package, a UNIX-compatible script called \u201ccmc\u201d.</p>\n<p>Additionally, a platform-specific executable may be automatically generated\non installation.</p>\n<p>Published results with CMC models may be (at least qualitatively) reproduced\nthrough the \u2013demo option to the executables.</p>\n<p>Also try running the \u2013help option to the executables after installation and\nfor a command-line example.</p>\n<p>Programmers may use the executable in bin as a guide and template for how to\nprogram against the cmcpy API.</p>\n</div>\n<div id=\"documentation\">\n<h2>Documentation</h2>\n<p>Some documentation of the cmcpy API is available within the \u201cdoc\u201d\nsubdirectory of the source distribution. HTML, pdf and texinfo alternative\nformats are provided.</p>\n</div>\n<div id=\"licensing-and-attribution\">\n<h2>Licensing and Attribution</h2>\n<p>The CMCpy project is distributed under the terms of the Apache License 2.0\nas described in the file LICENSE.txt</p>\n<p>Please cite Becich et al. (2012) in all scientific works that use this code.</p>\n</div>\n<div id=\"release-notes\">\n<h2>Release Notes</h2>\n<p>The most recent version is 0.1 released October 2012.</p>\n<p>See CHANGES.txt for version-related changes to the CMCpy code-base.</p>\n</div>\n<div id=\"references\">\n<h2>References</h2>\n<table id=\"ardell-and-sella-2001\">\n<col><col>\n<tbody>\n<tr><td><a href=\"#id1\" rel=\"nofollow\">[Ardell_and_Sella_2001]</a></td><td>D.H. Ardell and G. Sella (2001). On the evolution of redundancy in genetic codes. <a href=\"http://dx.doi.org/10.1007/s002390010217\" rel=\"nofollow\">Journal of Molecular Evolution 53(4/5):269-281</a>.</td></tr>\n</tbody>\n</table>\n<table id=\"ardell-and-sella-2002\">\n<col><col>\n<tbody>\n<tr><td><a href=\"#id3\" rel=\"nofollow\">[Ardell_and_Sella_2002]</a></td><td>D.H. Ardell and G. Sella (2002). No accident: genetic codes freeze in error-correcting patterns of the standard genetic code. <a href=\"http://dx.doi.org/10.1098/rstb.2002.1071\" rel=\"nofollow\">Philosophical Transactions of the Royal Society of London B 357:1625-1642</a>.</td></tr>\n</tbody>\n</table>\n<table id=\"sella-and-ardell-2002\">\n<col><col>\n<tbody>\n<tr><td><a href=\"#id2\" rel=\"nofollow\">[Sella_and_Ardell_2002]</a></td><td><ol>\n<li>Sella and D.H. Ardell (2002). The impact of message mutation on the fitness of a genetic code. <a href=\"http://dx.doi.org/10.1007/s00239-001-0060-7\" rel=\"nofollow\">Journal of Molecular Evolution 54(5):638-651</a>.</li>\n</ol>\n</td></tr>\n</tbody>\n</table>\n<table id=\"sella-and-ardell-2006\">\n<col><col>\n<tbody>\n<tr><td><a href=\"#id4\" rel=\"nofollow\">[Sella_and_Ardell_2006]</a></td><td><ol>\n<li>Sella and D.H. Ardell (2006). The coevolution of genes and genetic codes: Crick\u2019s frozen accident revisited. <a href=\"http://dx.doi.org/10.1007/s00239-004-0176-7\" rel=\"nofollow\">J. Mol. Evol. 63(3):297-313</a>.</li>\n</ol>\n</td></tr>\n</tbody>\n</table>\n<table id=\"vetsigian-et-al-2006\">\n<col><col>\n<tbody>\n<tr><td><a href=\"#id5\" rel=\"nofollow\">[Vetsigian_et_al_2006]</a></td><td>Vetsigian K., Woese C. R., Goldenfeld N. (2006). Collective evolution and the genetic code. <a href=\"http://www.pnas.org/cgi/pmidlookup?view=long&amp;pmid=16818880\" rel=\"nofollow\">Proc. Natl. Acad. Sci. U.S.A. 103, 10696-10701</a>.</td></tr>\n</tbody>\n</table>\n</div>\n\n          </div>"}, "last_serial": 1970370, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "de03f7413d764d1e7fc7ad9ae20e7806", "sha256": "682515ba6abe759d9f69d7b59b56c6a6d7e6a51cda7262bf3078443499533288"}, "downloads": -1, "filename": "CMCpy-0.1.tar.gz", "has_sig": false, "md5_digest": "de03f7413d764d1e7fc7ad9ae20e7806", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 305592, "upload_time": "2012-10-26T23:13:35", "upload_time_iso_8601": "2012-10-26T23:13:35.940047Z", "url": "https://files.pythonhosted.org/packages/51/aa/523bc600c56c743a3cbbdaa2921c7a91f92621f4744d54705a751afeb59b/CMCpy-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "6abcd46eb9d46d83457bdae6ef1e0de5", "sha256": "64b2a94bb06f7bfe09120c3f7b7eaee263c620d8e7d2d5e1a8caef6e983e6293"}, "downloads": -1, "filename": "CMCpy-0.2.tar.gz", "has_sig": false, "md5_digest": "6abcd46eb9d46d83457bdae6ef1e0de5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 309357, "upload_time": "2012-12-21T23:40:57", "upload_time_iso_8601": "2012-12-21T23:40:57.229205Z", "url": "https://files.pythonhosted.org/packages/ac/d1/911177fc70bd2e87dc912ba6ab67deb81ce95f781f316de8b791886c7590/CMCpy-0.2.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "b9a48c68152951684124789bc3950bed", "sha256": "111d7cf0bbc154776f0c3826b82e040eb87dcdd840b7aeb6f514584cbf719473"}, "downloads": -1, "filename": "CMCpy-0.3.tar.gz", "has_sig": false, "md5_digest": "b9a48c68152951684124789bc3950bed", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 310539, "upload_time": "2016-02-22T20:55:37", "upload_time_iso_8601": "2016-02-22T20:55:37.215984Z", "url": "https://files.pythonhosted.org/packages/5e/a2/f9624094925fc5ab90cb3ed0e353554228e0854e8f1346c087c1cd8b4688/CMCpy-0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b9a48c68152951684124789bc3950bed", "sha256": "111d7cf0bbc154776f0c3826b82e040eb87dcdd840b7aeb6f514584cbf719473"}, "downloads": -1, "filename": "CMCpy-0.3.tar.gz", "has_sig": false, "md5_digest": "b9a48c68152951684124789bc3950bed", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 310539, "upload_time": "2016-02-22T20:55:37", "upload_time_iso_8601": "2016-02-22T20:55:37.215984Z", "url": "https://files.pythonhosted.org/packages/5e/a2/f9624094925fc5ab90cb3ed0e353554228e0854e8f1346c087c1cd8b4688/CMCpy-0.3.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:18:36 2020"}