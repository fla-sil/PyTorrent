{"info": {"author": "David Sundell", "author_email": "david.sundell@foi.se", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "[![install with bioconda](https://img.shields.io/badge/install%20with-bioconda-brightgreen.svg?style=flat-square)](http://bioconda.github.io/recipes/cansnper/README.html)\n\n## Installing CanSNPer\nCanSNPer is written in Python and requires Python installed as well as several \ndependencies. The easiest way to install CanSNPer is using \n[Bioconda conda](https://bioconda.github.io/recipes/cansnper/README.html) channel \nor with pip. Consult the INSTALL document for detailed installation instructions. \nWhen the dependencies are all installed CanSNPer can be run as it is from the shell.\n\n## Running CanSNPer\nAll CanSNPer runs start with the main CanSNPer script. Following installation,\ntry to invoke the CanSNPer help with this command:\n\n```\nCanSNPer -h\n```\n\nSometimes CanSNPer will want more information from you, such as the name of the \norganism you want to use as a reference when aligning. This is done by a prompt \nwhere you type the answer in and press enter to submit. If you are ever stuck \nin a prompt or dont know what to enter, type 'exit' to exit. \n\nNote that not all information that CanSNPer needs can be given interactively. \nFile names can only be given as a command argument. \n\n## Running the usual analysis \nCanSNPer takes a fasta file as input, using the argument  `--snp_type_file (-i)`  \nwith the file name, the reference organism is given with the argument `--reference (-r)` and the\npath to the CanSNPer database is given with the `--db_path (-b)`:\n\n```\nCanSNPer --snp_type_file /path/to/fasta.fa -r Yersinia_pestis -b CanSNPerDB.db\n```\n\nIf you want to change the output of CanSNPer use the arguments `--tab_sep (-t)`, \n`--draw_tree (-d)`, `--list_snps (-l)` or `--verbose (-v)`. The following command \nwill type fasta.fa with Y. pestis as reference, print the outcome in a tab \nseparated format, create a text file with all SNPs listed, draw a canSNP tree \nand save it as a PDF file and CanSNPer will print whatever it is doing (because \nwe used all the `-t`, `-l`, `-d` and `-v` options):\n\n```\nCanSNPer -i fasta.fa -r Yersinia_pestis -tldv -b CanSNPerDB.db\n```\n\n## Threads\nCanSNPer is fairly lightweight in terms of how much computational power it \nneeds. However, If there are several reference strains to align to (as in the \ncase of Fracisella tularensis) the alignments of the query to each reference \nare all assigned their own thread. That is, unless the user specifies a \nMAXIMUM number of threads to use. The default value is no limit (0). This \noption is called `-n`.\n\n```\nCanSNPer -i fasta.fa -r Yersinia_pestis -b CanSNPerDB -n2 \n```\n\n## The `--allow_differences` argument\nThis argument allows CanSNPer to pass through a number of canSNP tree nodes \neven if the SNP is not in a derived state. The number of nodes that are \npermitted to be wrong is stated after `--allow_differences`. This option can be \nuseful if you know there is a specific part of the sequence missing and that \nthis will cause CanSNPer to overlook information. Use this option only if you \nare certain of the effects on the outcome. Here is an example:\n\n```\nCanSNPer -i BROKEN.fa --allow_differences 1 -b CanSNPerDB.db\n```\n\nThis may produce a warning, in addition to the classification, letting you \nknow which SNPs (if any) were not in the derived state in the canSNP tree:\n\nClassification of BROKEN.fa: B.24\n```\n#[WARNING] these SNPs were not in the derived state: B.3\n```\n\n## Setting up, or changing a CanSNPer database\nA database complete with the current information is available with the CanSNPer \ndistribution, but if you want to create a separate DB, or add to yours, here \nare some CanSNPer command line arguments that will help. The formatting of the \nSNP text file and the tree text file is explained in another section of this \nREADME.\n\nThe SQLite database file will be created automatically in the location \nspecified in CanSNPer.conf (default is in your home folder). When you want to \nadd a new organism to your database, use the -initialise_organism argument:\n\n```\nCanSNPer -initialise_organism -b CanSNPerDB.db\n```\n\nCanSNPer will ask for an organism name if you did not supply one using the `-r` \nargument.\n\nAfter initialising an organism you can start to add information to it. To add \nthe list of SNPs use the `--import_snp_file` argument and supply the text-file. \nIf you did not supply the `-r` argument CanSNPer will ask which organism this \ndata belongs to.\n\n```\nCanSNPer -r Yersinia_pestis --import_snp_file y_snps.txt -b CanSNPerDB.db\n```\n\nNext, if you want to upload a new, or update an existingcanSNP tree, use \n`--import_tree_file`. The tree in the CanSNPer database will be replaced:\n\n```\nCanSNPer -r Yersinia_pestis --import_tree_file y_tree.txt -b CanSNPerDB.db\n```\n\nThe last database altering option in CanSNPer allows you to import a fasta \nsequence to the SQLite database. A sequence file has to be imported for each of \nthe reference strains that are used in the SNP table. You can only import one \nat a time, though:\n\n```\nCanSNPer -r Yersinia_pestis --import_seq_file CO92.fa -b CanSNPerDB.db\n```\n\nCanSNPer list the reference strains that are in the SNP list, and you choose \none of them to link to the sequence you are uploading.\n\nWith the `--import_seq_file` argument you can also add the `--strain_name` and tell \nCanSNPer what the strain name is without having to go through the prompt:\n\n```\nCanSNPer -r Yersinia_pestis -b CanSNPerDB.db --import_seq_file CO92.fa --strain_name CO92 \n```\n\n## Formatting a canSNP tree text file for CanSNPer\nThe format that CanSNPer accepts as a tree is very simple.  \n1. The first line MUST contain the root of the tree.  \n2. All subsequent lines represent one intermediate or leaf node in the tree. It \nis listed with all its ancestors in order, separated by semi-colons, with the \nnode name at the end.\n\nThis formatting creates a tree that is easy to inspect in text form, in any \neditor.\n\nHere is an example tree:\n```\nRoot\nRoot;SNP1\nRoot;SNP1;SNP3\nRoot;SNP1;SNP4\nRoot;SNP1;SNP4;SNP5\nRoot;SNP2\n```\n\nThe only node with a positional requirement, in terms of line number, is the \nroot and while it doesnt exactly make much sense to write it like this, the \nfollowing tree is also valid:\n```\nRoot\nRoot;SNP1;SNP4;SNP5\nRoot;SNP1;SNP4\nRoot;SNP1\nRoot;SNP2\nRoot;SNP1;SNP3\n```\n## Formatting a SNP list text file for CanSNPer\nThe SNP list is a tab separated text file and must have the information in the \nfollowing order: SNP name, Organism name, Reference, Strain, Position, Derived \nbase, Ancestral base\n\nHere is an example:\n```\nB.1\tFrancisella\tSvensson\tLVS\t23942\tA\tG\n```\nThe header line is not needed and any line beginning with a '#' will be \nconsidered a comment line. The order of derived and ancestral state is of \nparticular importance because there is no way for CanSNPer to tell the columns \napart.\n\nThe column Organism name is not used by CanSNPer at this moment, but is kept in \norder to ease any future work with the file formats and import functions. It \ncan be left out, but there must then be two tabs between SNP name and Reference.\n\n## Running CanSNPer in Galaxy\nThere is a Galaxy tool definition file available with the Github CanSNPer \ndistribution called CanSNPer.xml. Place this file along with the CanSNPer main \nscript and the CanSNPer.conf in the Galaxy tools folder and make sure to edit \nthe Galaxy tool_conf.xml tool-registry file. More detailed instructions on how \nto add a tool to Galaxy can be found at wiki.galaxyproject.org.\n\nThere is one more thing that may need additional configuration when running \nCanSNPer in Galaxy; the tmp-folder set by Galaxy. The default may cause issues \nrunning progressiveMauve and will in that case show up as an error in the \nCanSNPer error file produced by Galaxy. Set the tmp-file path in the \nuniverse_wsgi.ini config file located in your Galaxy root. Just make sure you \nhave the apropriate permissions to work in the set directory.\n\nCanSNPer has a specific command-line option that is specific for a Galaxy run. \nIt is `--galaxy` and should not be invoked unless CanSNPer is running from Galaxy.\n\nThe CanSNPer galaxy tool is largely untested and feedback is greatly \nappreciated.\n\n\n## Citing CanSNPer \nThe first verion of CanSNPer is published in Bioinformatics.\n\n```\nL\u00e4rkeryd A, Myrtenn\u00e4s K, Karlsson E, Dwibedi CK, Forsman M, Larsson P, Johansson A, Sj\u00f6din A: \nCanSNPer: a hierarchical genotype classifier of clonal pathogens. Bioinformatics 2014\n```\n\nDepending on which canonical SNPs that are used to classify your strain some the following \npublications should also be cited. More information about were each CanSNP is publiched may \nbe found in snp.txt file for each genus. \n\n__Francisella__\n\n- Birdsell, D. N. et al. Francisella tularensis subsp. tularensis Group A.I, United States. Emerg. Infect. Dis. 20, 861\u2013865 (2014).\n- Chanturia, G. et al. Phylogeography of Francisella tularensis subspecies holarctica from the country of Georgia. BMC Microbiol. 11, 139 (2011).\n- Dwibedi, C. et al. Long-range dispersal moved Francisella tularensis into western Europe from the East. Microbial Genomics (2016)\n- Gyuranecz, M. et al. Phylogeography of Francisella tularensis subsp. holarctica, Europe. Emerg. Infect. Dis. 18, 290\u20133 (2012).\n- Karadenizli, a et al. Genomic analyses of Francisella tularensis strains confirm disease transmission from drinking water sources, Turkey, 2008, 2009 and 2012. Eurosurveillance 20, 21136 (2015).\n- Karlsson, E. et al. The phylogeographic pattern of Francisella tularensis in Sweden indicates a Scandinavian origin of Eurosiberian tularaemia. Environ. Microbiol. 15, 634\u2013645 (2013).\n- Myrtenn\u00e4s, K. et al. Introduction and persistence of tularemia in Bulgaria. Infect. Ecol. Epidemiol. 6, 1\u20139 (2016).\n- Schulze, C. et al. High and novel genetic diversity of Francisella tularensis in Germany and indication of environmental persistence. Epidemiol. Infect. 144, 3025\u20133036 (2016).\n- Svensson, K. et al. A real-time PCR array for hierarchical identification of Francisella isolates. PLoS One 4, e8360 (2009).\n- Vogler, A. J. et al. Phylogeography of Francisella tularensis: global expansion of a highly fit clone. J. Bacteriol. 191, 2474\u201384 (2009).\n- Wittwer, M et al. Population Genomics of Francisella tularensis subsp. holarctica and its Implication on the Eco-Epidemiology of Tularemia in Switzerland. Front Cell Infect Microbiol. 8: 89. (2018).\n\n__Bacillus__\n- Van Ert, M. N. et al. Global genetic population structure of Bacillus anthracis. PLoS One 2, e461 (2007).\n\n__Brucella__\n- Foster, J. T. et al. Real-time PCR assays of single-nucleotide polymorphisms defining the major Brucella clades. J. Clin. Microbiol. 46, 296\u2013301 (2008).\n\n__Coxiella__\n- Karlsson, E. et al. Eight New Genomes and Synthetic Controls Increase the Accessibility of Rapid Melt-MAMA SNP Typing of Coxiella burnetii. PLoS One 9, e85417 (2014).\n\n__Yersinia__\n- Morelli, G. et al. Yersinia pestis genome sequencing identifies patterns of global phylogenetic diversity. Nat. Genet. 42, 1140\u20133 (2010).\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/FOI-Bioinformatics/cansnper1.1", "keywords": "Bioinformatics SNP-typing sequence-data", "license": "GPL'", "maintainer": "", "maintainer_email": "", "name": "CanSNPer-1.1.0", "package_url": "https://pypi.org/project/CanSNPer-1.1.0/", "platform": "", "project_url": "https://pypi.org/project/CanSNPer-1.1.0/", "project_urls": {"Homepage": "https://github.com/FOI-Bioinformatics/cansnper1.1"}, "release_url": "https://pypi.org/project/CanSNPer-1.1.0/1.1.0/", "requires_dist": ["numpy", "ete3"], "requires_python": "", "summary": "CanSNPer: A toolkit for SNP-typing using NGS data.", "version": "1.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"http://bioconda.github.io/recipes/cansnper/README.html\" rel=\"nofollow\"><img alt=\"install with bioconda\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/46594aa9d755bed29a0b8f0a7ca2fa8dba131a8d/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f696e7374616c6c253230776974682d62696f636f6e64612d627269676874677265656e2e7376673f7374796c653d666c61742d737175617265\"></a></p>\n<h2>Installing CanSNPer</h2>\n<p>CanSNPer is written in Python and requires Python installed as well as several\ndependencies. The easiest way to install CanSNPer is using\n<a href=\"https://bioconda.github.io/recipes/cansnper/README.html\" rel=\"nofollow\">Bioconda conda</a> channel\nor with pip. Consult the INSTALL document for detailed installation instructions.\nWhen the dependencies are all installed CanSNPer can be run as it is from the shell.</p>\n<h2>Running CanSNPer</h2>\n<p>All CanSNPer runs start with the main CanSNPer script. Following installation,\ntry to invoke the CanSNPer help with this command:</p>\n<pre><code>CanSNPer -h\n</code></pre>\n<p>Sometimes CanSNPer will want more information from you, such as the name of the\norganism you want to use as a reference when aligning. This is done by a prompt\nwhere you type the answer in and press enter to submit. If you are ever stuck\nin a prompt or dont know what to enter, type 'exit' to exit.</p>\n<p>Note that not all information that CanSNPer needs can be given interactively.\nFile names can only be given as a command argument.</p>\n<h2>Running the usual analysis</h2>\n<p>CanSNPer takes a fasta file as input, using the argument  <code>--snp_type_file (-i)</code><br>\nwith the file name, the reference organism is given with the argument <code>--reference (-r)</code> and the\npath to the CanSNPer database is given with the <code>--db_path (-b)</code>:</p>\n<pre><code>CanSNPer --snp_type_file /path/to/fasta.fa -r Yersinia_pestis -b CanSNPerDB.db\n</code></pre>\n<p>If you want to change the output of CanSNPer use the arguments <code>--tab_sep (-t)</code>,\n<code>--draw_tree (-d)</code>, <code>--list_snps (-l)</code> or <code>--verbose (-v)</code>. The following command\nwill type fasta.fa with Y. pestis as reference, print the outcome in a tab\nseparated format, create a text file with all SNPs listed, draw a canSNP tree\nand save it as a PDF file and CanSNPer will print whatever it is doing (because\nwe used all the <code>-t</code>, <code>-l</code>, <code>-d</code> and <code>-v</code> options):</p>\n<pre><code>CanSNPer -i fasta.fa -r Yersinia_pestis -tldv -b CanSNPerDB.db\n</code></pre>\n<h2>Threads</h2>\n<p>CanSNPer is fairly lightweight in terms of how much computational power it\nneeds. However, If there are several reference strains to align to (as in the\ncase of Fracisella tularensis) the alignments of the query to each reference\nare all assigned their own thread. That is, unless the user specifies a\nMAXIMUM number of threads to use. The default value is no limit (0). This\noption is called <code>-n</code>.</p>\n<pre><code>CanSNPer -i fasta.fa -r Yersinia_pestis -b CanSNPerDB -n2 \n</code></pre>\n<h2>The <code>--allow_differences</code> argument</h2>\n<p>This argument allows CanSNPer to pass through a number of canSNP tree nodes\neven if the SNP is not in a derived state. The number of nodes that are\npermitted to be wrong is stated after <code>--allow_differences</code>. This option can be\nuseful if you know there is a specific part of the sequence missing and that\nthis will cause CanSNPer to overlook information. Use this option only if you\nare certain of the effects on the outcome. Here is an example:</p>\n<pre><code>CanSNPer -i BROKEN.fa --allow_differences 1 -b CanSNPerDB.db\n</code></pre>\n<p>This may produce a warning, in addition to the classification, letting you\nknow which SNPs (if any) were not in the derived state in the canSNP tree:</p>\n<p>Classification of BROKEN.fa: B.24</p>\n<pre><code>#[WARNING] these SNPs were not in the derived state: B.3\n</code></pre>\n<h2>Setting up, or changing a CanSNPer database</h2>\n<p>A database complete with the current information is available with the CanSNPer\ndistribution, but if you want to create a separate DB, or add to yours, here\nare some CanSNPer command line arguments that will help. The formatting of the\nSNP text file and the tree text file is explained in another section of this\nREADME.</p>\n<p>The SQLite database file will be created automatically in the location\nspecified in CanSNPer.conf (default is in your home folder). When you want to\nadd a new organism to your database, use the -initialise_organism argument:</p>\n<pre><code>CanSNPer -initialise_organism -b CanSNPerDB.db\n</code></pre>\n<p>CanSNPer will ask for an organism name if you did not supply one using the <code>-r</code>\nargument.</p>\n<p>After initialising an organism you can start to add information to it. To add\nthe list of SNPs use the <code>--import_snp_file</code> argument and supply the text-file.\nIf you did not supply the <code>-r</code> argument CanSNPer will ask which organism this\ndata belongs to.</p>\n<pre><code>CanSNPer -r Yersinia_pestis --import_snp_file y_snps.txt -b CanSNPerDB.db\n</code></pre>\n<p>Next, if you want to upload a new, or update an existingcanSNP tree, use\n<code>--import_tree_file</code>. The tree in the CanSNPer database will be replaced:</p>\n<pre><code>CanSNPer -r Yersinia_pestis --import_tree_file y_tree.txt -b CanSNPerDB.db\n</code></pre>\n<p>The last database altering option in CanSNPer allows you to import a fasta\nsequence to the SQLite database. A sequence file has to be imported for each of\nthe reference strains that are used in the SNP table. You can only import one\nat a time, though:</p>\n<pre><code>CanSNPer -r Yersinia_pestis --import_seq_file CO92.fa -b CanSNPerDB.db\n</code></pre>\n<p>CanSNPer list the reference strains that are in the SNP list, and you choose\none of them to link to the sequence you are uploading.</p>\n<p>With the <code>--import_seq_file</code> argument you can also add the <code>--strain_name</code> and tell\nCanSNPer what the strain name is without having to go through the prompt:</p>\n<pre><code>CanSNPer -r Yersinia_pestis -b CanSNPerDB.db --import_seq_file CO92.fa --strain_name CO92 \n</code></pre>\n<h2>Formatting a canSNP tree text file for CanSNPer</h2>\n<p>The format that CanSNPer accepts as a tree is very simple.</p>\n<ol>\n<li>The first line MUST contain the root of the tree.</li>\n<li>All subsequent lines represent one intermediate or leaf node in the tree. It\nis listed with all its ancestors in order, separated by semi-colons, with the\nnode name at the end.</li>\n</ol>\n<p>This formatting creates a tree that is easy to inspect in text form, in any\neditor.</p>\n<p>Here is an example tree:</p>\n<pre><code>Root\nRoot;SNP1\nRoot;SNP1;SNP3\nRoot;SNP1;SNP4\nRoot;SNP1;SNP4;SNP5\nRoot;SNP2\n</code></pre>\n<p>The only node with a positional requirement, in terms of line number, is the\nroot and while it doesnt exactly make much sense to write it like this, the\nfollowing tree is also valid:</p>\n<pre><code>Root\nRoot;SNP1;SNP4;SNP5\nRoot;SNP1;SNP4\nRoot;SNP1\nRoot;SNP2\nRoot;SNP1;SNP3\n</code></pre>\n<h2>Formatting a SNP list text file for CanSNPer</h2>\n<p>The SNP list is a tab separated text file and must have the information in the\nfollowing order: SNP name, Organism name, Reference, Strain, Position, Derived\nbase, Ancestral base</p>\n<p>Here is an example:</p>\n<pre><code>B.1\tFrancisella\tSvensson\tLVS\t23942\tA\tG\n</code></pre>\n<p>The header line is not needed and any line beginning with a '#' will be\nconsidered a comment line. The order of derived and ancestral state is of\nparticular importance because there is no way for CanSNPer to tell the columns\napart.</p>\n<p>The column Organism name is not used by CanSNPer at this moment, but is kept in\norder to ease any future work with the file formats and import functions. It\ncan be left out, but there must then be two tabs between SNP name and Reference.</p>\n<h2>Running CanSNPer in Galaxy</h2>\n<p>There is a Galaxy tool definition file available with the Github CanSNPer\ndistribution called CanSNPer.xml. Place this file along with the CanSNPer main\nscript and the CanSNPer.conf in the Galaxy tools folder and make sure to edit\nthe Galaxy tool_conf.xml tool-registry file. More detailed instructions on how\nto add a tool to Galaxy can be found at wiki.galaxyproject.org.</p>\n<p>There is one more thing that may need additional configuration when running\nCanSNPer in Galaxy; the tmp-folder set by Galaxy. The default may cause issues\nrunning progressiveMauve and will in that case show up as an error in the\nCanSNPer error file produced by Galaxy. Set the tmp-file path in the\nuniverse_wsgi.ini config file located in your Galaxy root. Just make sure you\nhave the apropriate permissions to work in the set directory.</p>\n<p>CanSNPer has a specific command-line option that is specific for a Galaxy run.\nIt is <code>--galaxy</code> and should not be invoked unless CanSNPer is running from Galaxy.</p>\n<p>The CanSNPer galaxy tool is largely untested and feedback is greatly\nappreciated.</p>\n<h2>Citing CanSNPer</h2>\n<p>The first verion of CanSNPer is published in Bioinformatics.</p>\n<pre><code>L\u00e4rkeryd A, Myrtenn\u00e4s K, Karlsson E, Dwibedi CK, Forsman M, Larsson P, Johansson A, Sj\u00f6din A: \nCanSNPer: a hierarchical genotype classifier of clonal pathogens. Bioinformatics 2014\n</code></pre>\n<p>Depending on which canonical SNPs that are used to classify your strain some the following\npublications should also be cited. More information about were each CanSNP is publiched may\nbe found in snp.txt file for each genus.</p>\n<p><strong>Francisella</strong></p>\n<ul>\n<li>Birdsell, D. N. et al. Francisella tularensis subsp. tularensis Group A.I, United States. Emerg. Infect. Dis. 20, 861\u2013865 (2014).</li>\n<li>Chanturia, G. et al. Phylogeography of Francisella tularensis subspecies holarctica from the country of Georgia. BMC Microbiol. 11, 139 (2011).</li>\n<li>Dwibedi, C. et al. Long-range dispersal moved Francisella tularensis into western Europe from the East. Microbial Genomics (2016)</li>\n<li>Gyuranecz, M. et al. Phylogeography of Francisella tularensis subsp. holarctica, Europe. Emerg. Infect. Dis. 18, 290\u20133 (2012).</li>\n<li>Karadenizli, a et al. Genomic analyses of Francisella tularensis strains confirm disease transmission from drinking water sources, Turkey, 2008, 2009 and 2012. Eurosurveillance 20, 21136 (2015).</li>\n<li>Karlsson, E. et al. The phylogeographic pattern of Francisella tularensis in Sweden indicates a Scandinavian origin of Eurosiberian tularaemia. Environ. Microbiol. 15, 634\u2013645 (2013).</li>\n<li>Myrtenn\u00e4s, K. et al. Introduction and persistence of tularemia in Bulgaria. Infect. Ecol. Epidemiol. 6, 1\u20139 (2016).</li>\n<li>Schulze, C. et al. High and novel genetic diversity of Francisella tularensis in Germany and indication of environmental persistence. Epidemiol. Infect. 144, 3025\u20133036 (2016).</li>\n<li>Svensson, K. et al. A real-time PCR array for hierarchical identification of Francisella isolates. PLoS One 4, e8360 (2009).</li>\n<li>Vogler, A. J. et al. Phylogeography of Francisella tularensis: global expansion of a highly fit clone. J. Bacteriol. 191, 2474\u201384 (2009).</li>\n<li>Wittwer, M et al. Population Genomics of Francisella tularensis subsp. holarctica and its Implication on the Eco-Epidemiology of Tularemia in Switzerland. Front Cell Infect Microbiol. 8: 89. (2018).</li>\n</ul>\n<p><strong>Bacillus</strong></p>\n<ul>\n<li>Van Ert, M. N. et al. Global genetic population structure of Bacillus anthracis. PLoS One 2, e461 (2007).</li>\n</ul>\n<p><strong>Brucella</strong></p>\n<ul>\n<li>Foster, J. T. et al. Real-time PCR assays of single-nucleotide polymorphisms defining the major Brucella clades. J. Clin. Microbiol. 46, 296\u2013301 (2008).</li>\n</ul>\n<p><strong>Coxiella</strong></p>\n<ul>\n<li>Karlsson, E. et al. Eight New Genomes and Synthetic Controls Increase the Accessibility of Rapid Melt-MAMA SNP Typing of Coxiella burnetii. PLoS One 9, e85417 (2014).</li>\n</ul>\n<p><strong>Yersinia</strong></p>\n<ul>\n<li>Morelli, G. et al. Yersinia pestis genome sequencing identifies patterns of global phylogenetic diversity. Nat. Genet. 42, 1140\u20133 (2010).</li>\n</ul>\n\n          </div>"}, "last_serial": 6201793, "releases": {"1.1.0": [{"comment_text": "", "digests": {"md5": "1d323b8e98a1769ef8212a257943cca6", "sha256": "64db869f9a8f7f18f09c48808a3f419c45cbdbd01fe1dc8319b11b276dc1e530"}, "downloads": -1, "filename": "CanSNPer_1.1.0-1.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "1d323b8e98a1769ef8212a257943cca6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 39185, "upload_time": "2019-11-26T14:58:15", "upload_time_iso_8601": "2019-11-26T14:58:15.169505Z", "url": "https://files.pythonhosted.org/packages/63/70/c862f1b90965d8b9c5a75dcdb01666a276f56c2b943be428b0d0f441f356/CanSNPer_1.1.0-1.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6a758db87e76a146ca2412d35e846ebd", "sha256": "cfd829ec5a09899c559a1ba5b242a904dc87ca0e9755fd42385972ef7c81c881"}, "downloads": -1, "filename": "CanSNPer-1.1.0-1.1.0.tar.gz", "has_sig": false, "md5_digest": "6a758db87e76a146ca2412d35e846ebd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 42336, "upload_time": "2019-11-26T14:58:20", "upload_time_iso_8601": "2019-11-26T14:58:20.735364Z", "url": "https://files.pythonhosted.org/packages/38/0d/4972e4b65c614b14e7458f7905a9fde0a1b6cb969c9ac44f2ecabea30f99/CanSNPer-1.1.0-1.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "1d323b8e98a1769ef8212a257943cca6", "sha256": "64db869f9a8f7f18f09c48808a3f419c45cbdbd01fe1dc8319b11b276dc1e530"}, "downloads": -1, "filename": "CanSNPer_1.1.0-1.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "1d323b8e98a1769ef8212a257943cca6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 39185, "upload_time": "2019-11-26T14:58:15", "upload_time_iso_8601": "2019-11-26T14:58:15.169505Z", "url": "https://files.pythonhosted.org/packages/63/70/c862f1b90965d8b9c5a75dcdb01666a276f56c2b943be428b0d0f441f356/CanSNPer_1.1.0-1.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6a758db87e76a146ca2412d35e846ebd", "sha256": "cfd829ec5a09899c559a1ba5b242a904dc87ca0e9755fd42385972ef7c81c881"}, "downloads": -1, "filename": "CanSNPer-1.1.0-1.1.0.tar.gz", "has_sig": false, "md5_digest": "6a758db87e76a146ca2412d35e846ebd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 42336, "upload_time": "2019-11-26T14:58:20", "upload_time_iso_8601": "2019-11-26T14:58:20.735364Z", "url": "https://files.pythonhosted.org/packages/38/0d/4972e4b65c614b14e7458f7905a9fde0a1b6cb969c9ac44f2ecabea30f99/CanSNPer-1.1.0-1.1.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:35:30 2020"}