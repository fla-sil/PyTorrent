{"info": {"author": "Daniel Robbins", "author_email": "drobbins@funtoo.org", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: Apache Software License", "Operating System :: POSIX :: Linux", "Programming Language :: Python :: 3"], "description": "# fchroot\n\n## Introduction\n\n`fchroot`, also known as \"Franken-Chroot\" or \"Funtoo Chroot\", is a utility that helps\nyou to leverage the magic of QEMU to chroot into a non-native system. For example,\non your x86-compatible 64-bit PC, it is possible to chroot into a 32-bit or 64-bit\nARM environment and have it actually work. \n\nThis is accomplished by leveraging the\n\"binfmt-misc\" functionality built-in to the Linux kernel, combined with QEMU to\nperform emulation of non-native instruction sets. `fchroot` itself doesn't do any\nmagic except provide a very easy-to-use mechanism to get this to work, typically\nrequiring little or no manual configuration. You simply run `fchroot` just like\n`chroot`, and everything works. Well, I suppose that is a bit magical :) Here's an\nexample of how things work with fchroot. Let's say you are on your 64-bit x86-64\nPC, and want to enter a 64-bit ARM environment. Do this:\n\n```bash\nmy64bitpc # tar xpvf stage3-arm64bit.tar.xz\nmy64bitpc # fchroot arm64-root\n>>> arm-64bit frankenchroot B]...\n#\n```\n\nThat last `#` prompt may not look like anything special, but you are now inside a\n64-bit ARM frankenchroot. A 64-bit ARM shell is providing that prompt to you, and\nif you run a standard Linux command, it will be running the 64-bit ARM variant of\nthat command using QEMU emulation. Pretty cool stuff.\n\n## What `fchroot` Does For You\n\nThe `fchroot` command does lots of things automatically for you to make your \nfranken-chroot experience as seamless as possible. First, note that `fchroot` is\ndesigned to have a similar calling convention to the standard Linux `chroot` command --\nin fact, at the very end of doing all its magic, it passes all of its arguments to\n`chroot` to get you inside the frankenchroot. But `fchroot` does quite a bit of\ngrunt-work to make the `chroot` work:\n\n* `fchroot` will look inside the specified directory and attempt to auto-detect\nwhat kind of non-native environment it's dealing with. It will currently recognize arm-32bit\nand arm-64bit environments.\n* `fchroot` will check to see if QEMU is available for the detected non-native\narchitecture and abort with a (hopefully) useful error message if it is not.\n* `fchroot` will use `gcc` to compile a special wrapper that will be used inside\nthe chrooted environment, and store it in `/usr/share/fchroot/wrappers` so it is\navailable for later use.\n* `fchroot` will leverage Linux's `binfmt_misc` functionality and register a handler\nso that the kernel will know to use our wrapper (and QEMU) to run non-native binaries.\n* `fchroot` will copy the necessary QEMU binary as well as its wrapper into \n`/usr/local/bin/` inside the chrooted environment.\n* `fchroot` will mount `/proc`, `/dev` (bind-mount) and `/sys` (bind-mount) within the\nchroot environment automatically if they are not already mounted.\n* `fchroot` will copy the local system's `/etc/resolv.conf` to the chroot environment\nso that DNS resolution will work properly.\n* `fchroot` will then `execvp` the `chroot` command to place you inside the franken-chroot\nenvironment.\n\n## Prerequisites\n\nThis section lists the prerequisites for getting `fchroot` running -- in other words,\nthe things that *you* are responsible for ensuring are done. `fchroot` takes care\nof the rest.\n\n### Host and Emulated System\n\n``fchroot`` has been used on x86-compatible 64-bit systems, and currently supports\narm-32bit and arm-64bit chrooted environments. It is relatively easy to add support\nfor new native and emulated systems -- the code is designed to accept patches for\nnew architectures -- but for now, be aware of the current architectures supported.\n\n### QEMU\n\nQEMU will need to be installed with the ``aarch64`` and ``arm`` user targets enabled.\nIn addition, it will need to be compiled as a *static* binary. In Funtoo Linux and\nGentoo Linux, this can be accomplished by adding the following configuration\nprior to running ``emerge qemu``:\n\nAdd to ``/etc/make.conf``:\n\n```bash\nQEMU_USER_TARGETS=\"aarch64 arm\"\n```\n\nAdd to ``/etc/portage/package.use``:\n\n```bash\napp-emulation/qemu static-user\ndev-libs/glib static-libs\nsys-apps/attr static-libs\nsys-libs/zlib static-libs\ndev-libs/libpcre static-libs\n```\n\n### binfmt_misc\n\nIn addition, you will need to ensure that ``binfmt_misc`` functionality is enabled\nin-kernel or as a module. By default, this is the case when using Funtoo Linux with\nits default ``debian-sources-lts`` kernel.\n\n## Setup\n\nThe easiest way to set up `fchroot` is to clone it directly from https://code.funtoo.org:\n\n```bash\n# git clone https://code.funtoo.org/bitbucket/scm/~drobbins/fchroot.git\n```\n\nYou can then simply run ``fchroot`` directly from the git repository:\n\n```bash\n# fchroot/bin/fchroot /path/to/chroot\n```\n\n## Acknowledgements\n\nThe `fchroot` command automates a process that was documented at the following locations:\n\n* https://wiki.gentoo.org/wiki/Embedded_Handbook/General/Compiling_with_qemu_user_chroot\n* https://github.com/sakaki-/gentoo-on-rpi3-64bit/wiki/Build-aarch64-Packages-on-your-PC%2C-with-User-Mode-QEMU-and-binfmt_misc\n\nMany thanks to Sakaki and others who documented this process.\n\n## Contributing\n\nTo contribute, please visit https://code.funtoo.org/bitbucket/users/drobbins/repos/fchroot/browse and submit a pull request.\nFor more information on how to submit pull requests on code.funtoo.org, see the following YouTube video: https://www.youtube.com/watch?v=V6PfB64oMWo\n\n## Author and Copyright\n\nCopyright 2020 Daniel Robbins, Funtoo Solutions, Inc.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://code.funtoo.org/bitbucket/users/drobbins/repos/fchroot/browse", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "fchroot", "package_url": "https://pypi.org/project/fchroot/", "platform": "", "project_url": "https://pypi.org/project/fchroot/", "project_urls": {"Homepage": "https://code.funtoo.org/bitbucket/users/drobbins/repos/fchroot/browse"}, "release_url": "https://pypi.org/project/fchroot/0.1.2/", "requires_dist": null, "requires_python": ">=3.7", "summary": "Funtoo franken-chroot tool.", "version": "0.1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>fchroot</h1>\n<h2>Introduction</h2>\n<p><code>fchroot</code>, also known as \"Franken-Chroot\" or \"Funtoo Chroot\", is a utility that helps\nyou to leverage the magic of QEMU to chroot into a non-native system. For example,\non your x86-compatible 64-bit PC, it is possible to chroot into a 32-bit or 64-bit\nARM environment and have it actually work.</p>\n<p>This is accomplished by leveraging the\n\"binfmt-misc\" functionality built-in to the Linux kernel, combined with QEMU to\nperform emulation of non-native instruction sets. <code>fchroot</code> itself doesn't do any\nmagic except provide a very easy-to-use mechanism to get this to work, typically\nrequiring little or no manual configuration. You simply run <code>fchroot</code> just like\n<code>chroot</code>, and everything works. Well, I suppose that is a bit magical :) Here's an\nexample of how things work with fchroot. Let's say you are on your 64-bit x86-64\nPC, and want to enter a 64-bit ARM environment. Do this:</p>\n<pre>my64bitpc <span class=\"c1\"># tar xpvf stage3-arm64bit.tar.xz</span>\nmy64bitpc <span class=\"c1\"># fchroot arm64-root</span>\n&gt;&gt;&gt; arm-64bit frankenchroot B<span class=\"o\">]</span>...\n<span class=\"c1\">#</span>\n</pre>\n<p>That last <code>#</code> prompt may not look like anything special, but you are now inside a\n64-bit ARM frankenchroot. A 64-bit ARM shell is providing that prompt to you, and\nif you run a standard Linux command, it will be running the 64-bit ARM variant of\nthat command using QEMU emulation. Pretty cool stuff.</p>\n<h2>What <code>fchroot</code> Does For You</h2>\n<p>The <code>fchroot</code> command does lots of things automatically for you to make your\nfranken-chroot experience as seamless as possible. First, note that <code>fchroot</code> is\ndesigned to have a similar calling convention to the standard Linux <code>chroot</code> command --\nin fact, at the very end of doing all its magic, it passes all of its arguments to\n<code>chroot</code> to get you inside the frankenchroot. But <code>fchroot</code> does quite a bit of\ngrunt-work to make the <code>chroot</code> work:</p>\n<ul>\n<li><code>fchroot</code> will look inside the specified directory and attempt to auto-detect\nwhat kind of non-native environment it's dealing with. It will currently recognize arm-32bit\nand arm-64bit environments.</li>\n<li><code>fchroot</code> will check to see if QEMU is available for the detected non-native\narchitecture and abort with a (hopefully) useful error message if it is not.</li>\n<li><code>fchroot</code> will use <code>gcc</code> to compile a special wrapper that will be used inside\nthe chrooted environment, and store it in <code>/usr/share/fchroot/wrappers</code> so it is\navailable for later use.</li>\n<li><code>fchroot</code> will leverage Linux's <code>binfmt_misc</code> functionality and register a handler\nso that the kernel will know to use our wrapper (and QEMU) to run non-native binaries.</li>\n<li><code>fchroot</code> will copy the necessary QEMU binary as well as its wrapper into\n<code>/usr/local/bin/</code> inside the chrooted environment.</li>\n<li><code>fchroot</code> will mount <code>/proc</code>, <code>/dev</code> (bind-mount) and <code>/sys</code> (bind-mount) within the\nchroot environment automatically if they are not already mounted.</li>\n<li><code>fchroot</code> will copy the local system's <code>/etc/resolv.conf</code> to the chroot environment\nso that DNS resolution will work properly.</li>\n<li><code>fchroot</code> will then <code>execvp</code> the <code>chroot</code> command to place you inside the franken-chroot\nenvironment.</li>\n</ul>\n<h2>Prerequisites</h2>\n<p>This section lists the prerequisites for getting <code>fchroot</code> running -- in other words,\nthe things that <em>you</em> are responsible for ensuring are done. <code>fchroot</code> takes care\nof the rest.</p>\n<h3>Host and Emulated System</h3>\n<p><code>fchroot</code> has been used on x86-compatible 64-bit systems, and currently supports\narm-32bit and arm-64bit chrooted environments. It is relatively easy to add support\nfor new native and emulated systems -- the code is designed to accept patches for\nnew architectures -- but for now, be aware of the current architectures supported.</p>\n<h3>QEMU</h3>\n<p>QEMU will need to be installed with the <code>aarch64</code> and <code>arm</code> user targets enabled.\nIn addition, it will need to be compiled as a <em>static</em> binary. In Funtoo Linux and\nGentoo Linux, this can be accomplished by adding the following configuration\nprior to running <code>emerge qemu</code>:</p>\n<p>Add to <code>/etc/make.conf</code>:</p>\n<pre><span class=\"nv\">QEMU_USER_TARGETS</span><span class=\"o\">=</span><span class=\"s2\">\"aarch64 arm\"</span>\n</pre>\n<p>Add to <code>/etc/portage/package.use</code>:</p>\n<pre>app-emulation/qemu static-user\ndev-libs/glib static-libs\nsys-apps/attr static-libs\nsys-libs/zlib static-libs\ndev-libs/libpcre static-libs\n</pre>\n<h3>binfmt_misc</h3>\n<p>In addition, you will need to ensure that <code>binfmt_misc</code> functionality is enabled\nin-kernel or as a module. By default, this is the case when using Funtoo Linux with\nits default <code>debian-sources-lts</code> kernel.</p>\n<h2>Setup</h2>\n<p>The easiest way to set up <code>fchroot</code> is to clone it directly from <a href=\"https://code.funtoo.org\" rel=\"nofollow\">https://code.funtoo.org</a>:</p>\n<pre><span class=\"c1\"># git clone https://code.funtoo.org/bitbucket/scm/~drobbins/fchroot.git</span>\n</pre>\n<p>You can then simply run <code>fchroot</code> directly from the git repository:</p>\n<pre><span class=\"c1\"># fchroot/bin/fchroot /path/to/chroot</span>\n</pre>\n<h2>Acknowledgements</h2>\n<p>The <code>fchroot</code> command automates a process that was documented at the following locations:</p>\n<ul>\n<li><a href=\"https://wiki.gentoo.org/wiki/Embedded_Handbook/General/Compiling_with_qemu_user_chroot\" rel=\"nofollow\">https://wiki.gentoo.org/wiki/Embedded_Handbook/General/Compiling_with_qemu_user_chroot</a></li>\n<li><a href=\"https://github.com/sakaki-/gentoo-on-rpi3-64bit/wiki/Build-aarch64-Packages-on-your-PC%2C-with-User-Mode-QEMU-and-binfmt_misc\" rel=\"nofollow\">https://github.com/sakaki-/gentoo-on-rpi3-64bit/wiki/Build-aarch64-Packages-on-your-PC%2C-with-User-Mode-QEMU-and-binfmt_misc</a></li>\n</ul>\n<p>Many thanks to Sakaki and others who documented this process.</p>\n<h2>Contributing</h2>\n<p>To contribute, please visit <a href=\"https://code.funtoo.org/bitbucket/users/drobbins/repos/fchroot/browse\" rel=\"nofollow\">https://code.funtoo.org/bitbucket/users/drobbins/repos/fchroot/browse</a> and submit a pull request.\nFor more information on how to submit pull requests on code.funtoo.org, see the following YouTube video: <a href=\"https://www.youtube.com/watch?v=V6PfB64oMWo\" rel=\"nofollow\">https://www.youtube.com/watch?v=V6PfB64oMWo</a></p>\n<h2>Author and Copyright</h2>\n<p>Copyright 2020 Daniel Robbins, Funtoo Solutions, Inc.</p>\n<p>Licensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at</p>\n<pre><code>http://www.apache.org/licenses/LICENSE-2.0\n</code></pre>\n<p>Unless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.</p>\n\n          </div>"}, "last_serial": 6990589, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "219fbc3af695b4df01f3163f7a2cc98e", "sha256": "d0b0e75af933331859018638a6d05ca3f71d3b5f8cf74788f7a702a87ff650f1"}, "downloads": -1, "filename": "fchroot-0.1.tar.gz", "has_sig": false, "md5_digest": "219fbc3af695b4df01f3163f7a2cc98e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 7420, "upload_time": "2020-04-10T03:28:24", "upload_time_iso_8601": "2020-04-10T03:28:24.048315Z", "url": "https://files.pythonhosted.org/packages/49/db/a30f6b7efee36e05db2b5ffd428eee27333cad6ed3ea124875b16fcb7e09/fchroot-0.1.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "dbef38e6bfbaedb6879d83727b47bea6", "sha256": "86cc21afc5bf947756e65c0608ae411183abffccff620b74afad90454111bfdf"}, "downloads": -1, "filename": "fchroot-0.1.1.tar.gz", "has_sig": false, "md5_digest": "dbef38e6bfbaedb6879d83727b47bea6", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 7744, "upload_time": "2020-04-10T03:30:36", "upload_time_iso_8601": "2020-04-10T03:30:36.354463Z", "url": "https://files.pythonhosted.org/packages/60/b5/ae4ab33b3f6f39ca07bbadb305bf5941ae6e437e782f62a054f30ebb413b/fchroot-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "844403a934c876e1e5ef6dde99ced80b", "sha256": "89b792817bb596dc3404e841d05e190bbab7711396da4b7b70b30437d2167a5a"}, "downloads": -1, "filename": "fchroot-0.1.2.tar.gz", "has_sig": false, "md5_digest": "844403a934c876e1e5ef6dde99ced80b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 8351, "upload_time": "2020-04-10T03:45:15", "upload_time_iso_8601": "2020-04-10T03:45:15.791726Z", "url": "https://files.pythonhosted.org/packages/f2/04/4db5e98e93207dbb9bb71725767a8d016f9aa1e70c9c7892a5c270c3eac6/fchroot-0.1.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "844403a934c876e1e5ef6dde99ced80b", "sha256": "89b792817bb596dc3404e841d05e190bbab7711396da4b7b70b30437d2167a5a"}, "downloads": -1, "filename": "fchroot-0.1.2.tar.gz", "has_sig": false, "md5_digest": "844403a934c876e1e5ef6dde99ced80b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 8351, "upload_time": "2020-04-10T03:45:15", "upload_time_iso_8601": "2020-04-10T03:45:15.791726Z", "url": "https://files.pythonhosted.org/packages/f2/04/4db5e98e93207dbb9bb71725767a8d016f9aa1e70c9c7892a5c270c3eac6/fchroot-0.1.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:43:13 2020"}