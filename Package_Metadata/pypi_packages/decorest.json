{"info": {"author": "Bartek Kryza", "author_email": "bkryza@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.6"], "description": "decorest - decorator heavy REST client for Python\n#################################################\n\n.. image::\thttps://img.shields.io/travis/bkryza/decorest.svg\n    :target: https://travis-ci.org/bkryza/decorest\n\n.. image:: https://img.shields.io/pypi/v/decorest.svg\n    :target: https://pypi.python.org/pypi/decorest\n\n.. image:: https://img.shields.io/pypi/l/decorest.svg\n    :target: https://pypi.python.org/pypi/decorest\n\n.. image:: https://img.shields.io/pypi/pyversions/decorest.svg\n    :target: https://pypi.python.org/pypi/decorest\n\nDeclarative, decorator-based REST client for Python.\n\n.. role:: py(code)\n   :language: python\n\n\n.. contents::\n\nOverview\n========\n\ndecorest_ library provides an easy to use declarative REST API client interface,\nwhere definition of the API methods using decorators automatically produces\na working REST client with no additional code. In practice the library provides\nonly an interface to describe and interact with REST services - the actual work\nis done underneath by the requests_ library.\n\nFor example:\n\n.. code-block:: python\n\n    from decorest import RestClient, GET\n\n    class DogClient(RestClient):\n        def __init__(self, endpoint):\n            super(DogClient, self).__init__(endpoint)\n\n        @GET('breed/{breed_name}/list')\n        def list_subbreeds(self, breed_name):\n            \"\"\"List all sub-breeds\"\"\"\n\n    client = DogClient('https://dog.ceo/api')\n\n    print(client.list_subbreeds('hound'))\n\n\nInstallation\n============\n\nUsing pip:\n\n.. code-block:: bash\n\n    pip install decorest\n\nUsage\n=====\n\nBasics\n------\n\nFor most typical cases the usage should be fairly straightforward. Simply create a\nsubclass of :py:`decorest.RestClient` and define methods, which will perform calls\nto the actual REST service. You can declare how each function should perform\nthe request to the service solely using decorators attached to the\nmethod definition. The method itself is not expected to have any implementation,\nexcept maybe for a docstring.\n\nAfter your API client class definition is complete, simply create an instance\nof it and you're good to go. This library relies on the functionality provided\nby the requests_ library, which means that any valid named argument, which\ncould be passed to a requests_ HTTP call can be also passed to the calls\nof the client methods and will be forwarded as is.\n\nFor more information checkout sample clients in `examples`.\n\nDecorators\n----------\n\nBelow is a list of all supported decorators along with short explanation and\nexamples. Some decorators can be attached to both client class as well as\nmethods, in which case the class-level decorator is applied to all HTTP methods\nin that class. Furthermore, each decorator can be overridden directly during\nthe method call by providing a named argument with name equal to the decorator\nname.\n\n\n@GET, @PUT, @POST, @PATCH, @DELETE, @HEAD, @OPTIONS\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nMarks the request with a specific HTTP method and the path relative to\nendpoint provided as argument. The path can contain variables enclosed\nin curly brackets, e.g.:\n\n.. code-block:: python\n\n        @GET('breed/{breed_name}/list')\n        def list_subbreeds(self, breed_name):\n            \"\"\"List all sub-breeds\"\"\"\n\nwhich will be replaced by the arguments from the method definition.\nThese decorators apply only to methods.\n\n@query\n~~~~~~\n\nAdds a query parameter to the request. URL encoding will be applied to\nthe value using :py:`urlencode`, e.g.:\n\n.. code-block:: python\n\n        @GET('breed/{breed_name}/list')\n        @query('long_names', 'longNames')\n        @query('limit')\n        def list_subbreeds(self, breed_name, long_names, limit=100):\n            \"\"\"List all sub-breeds\"\"\"\n\nThis decorator can take a single string parameter, which determines the name\nof the method argument whose value will be added as the query argument value\nof the same name.\n\nIn case 2 arguments are provided, the second argument determines the actual\nquery key name, which will be used in the request query (if for some reason\nit should be different than the method argument name).\n\nFurthermore, if a default value is provided in a method declaration, it\nwill be used whenever a value for this argument is not provided during\ninvocation.\n\nFor example, the following invocation of the above method:\n\n.. code-block:: python\n\n    client.list_subbreeds('hound', 1)\n\nwill result in the following query:\n\n.. code-block::\n\n    https://dog.ceo/api/breed/hound?longNames=1&limit=100\n\nThis decorator can be added only to methods.\n\n@form\n~~~~~~\n\nAdds a form parameter to the request. For example:\n\n.. code-block:: python\n\n        @POST('breed')\n        @form('breed_name')\n        @form('breed_url', 'breed_wikipedia_link')\n        def add_breed(self, breed_name, breed_url):\n            \"\"\"Add sub-breed\"\"\"\n\nThis decorator can take a single string parameter, which determines the name\nof the method argument whose value will be added as the query argument value\nof the same name.\n\nIn case 2 arguments are provided, the second argument determines the actual\nform field name, which will be used in the request form (if for some reason\nit cannot be the same as the method argument name).\n\nIf a method has at least one :py:`@form` decorator attached, the `Content-type`\nheader value will be always set to `application/x-www-form-urlencoded`.\n\nThis decorator can be added only to methods.\n\n@header\n~~~~~~~\n\nAdds a header key-value pair to the request, e.g.:\n\n.. code-block:: python\n\n        @GET('breed/{breed_name}/list')\n        @header('accept', 'application/json')\n        def list_subbreeds(self, breed_name):\n            \"\"\"List all sub-breeds\"\"\"\n\nThis decorator can be added to both methods and client class. The class level\ndecorators will be added to every method and can be overridden using method\nlevel decorators.\n\n@body\n~~~~~\n\nBody decorator enables to specify which of the method parameters should provide\nthe body content to the request, e.g.:\n\n.. code-block:: python\n\n    @POST('pet')\n    @header('content-type', 'application/json')\n    @header('accept', 'application/json')\n    @body('pet')\n    def add_pet(self, pet):\n        \"\"\"Add a new pet to the store\"\"\"\n\n:py:`@body` decorator can take an optional argument which provides a serialization\nhandler, which will be invoked automatically before passing the argument as\nbody content, which can be a simple lambda or a more complex function with some\nlogic. For example:\n\n.. code-block:: python\n\n    @POST('pet')\n    @header('content-type', 'application/json')\n    @header('accept', 'application/json')\n    @body('pet', lambda p: json.dumps(p))\n    def add_pet(self, pet):\n        \"\"\"Add a new pet to the store\"\"\"\n\nThe above code will automatically stringify the dictionary provided as\nvalue of 'pet' argument using :py:`json.dumps()` function.\n\n@on\n~~~\n\nBy default the request method will not return requests_ response object,\nbut the response will depend on the content type of the response.\n\nIn case the HTTP request succeeds the following results are expected:\n\n- :py:`response.json()` if the content type of response is JSON\n- :py:`response.content` if the content type is binary\n- :py:`response.text` otherwise\n\nIn case the request fails, :py:`response.raise_for_status()` is called and\nshould be handled in the code.\n\nIn case another behavior is required, custom handlers can be provided\nfor each method using lambdas or functions. The provided handler is\nexpected to take only a single argument, which is the requests_ response\nobject, e.g.:\n\n.. code-block:: python\n\n        @GET('breed/{breed_name}/list')\n        @header('accept', 'application/json')\n        @on(200, lambda r: r.json())\n        def list_subbreeds(self, breed_name):\n            \"\"\"List all sub-breeds\"\"\"\n\nThis decorator can be applied to both methods and classes, however when\napplied to a class the handler will be called for method which receives\nthe provided status code.\n\nThe first argument of this decorator must be an integer. On Python 3 it\nalso possible to pass :py:`...` (i.e. Ellipsis) object, which is equivalent\nto :py:`HttpStatus.ANY`. Any other value passed for this argument will\nraise :py:`TypeError`.\n\n@content\n~~~~~~~~\nThis decorator is a shortcut for :py:`@header('content-type', ...)`, e.g:\n\n.. code-block:: python\n\n    @POST('pet')\n    @content('application/json')\n    @header('accept', 'application/json')\n    @body('pet', lambda p: json.dumps(p))\n    def add_pet(self, pet):\n        \"\"\"Add a new pet to the store\"\"\"\n\n@accept\n~~~~~~~~\nThis decorator is a shortcut for :py:`@header('accept', ...)`, e.g:\n\n.. code-block:: python\n\n        @GET('breed/{breed_name}/list')\n        @content('application/json')\n        @accept('application/xml')\n        def list_subbreeds(self, breed_name):\n            \"\"\"List all sub-breeds\"\"\"\n\n@endpoint\n~~~~~~~~\nThis decorator enables to define a default endpoint for the service,\nwhich then doesn't have to be provided in the client constructor:\n\n.. code-block:: python\n\n        @endpoint('https://dog.ceo/api')\n        class DogClient(RestClient):\n            \"\"\"List all sub-breeds\"\"\"\n            def __init__(self, endpoint=None):\n                super(DogClient, self).__init__(endpoint)\n\nThe endpoint provided in the client constructor will take precedence\nhowever.\n\n\n@timeout\n~~~~~~~~\nSpecifies a default timeout value (in seconds) for method or entire API.\n\n.. code-block:: python\n\n        @endpoint('https://dog.ceo/api')\n        @timeout(5)\n        class DogClient(RestClient):\n            \"\"\"List all sub-breeds\"\"\"\n            def __init__(self, endpoint=None):\n                super(DogClient, self).__init__(endpoint)\n\n@stream\n~~~~~~~\nThis decorator allows to specify a method which returns binary stream of data.\nAdding this decorator to a method will add a :py:`stream=True`\nargument to the requests_ call and will by default return entire requests\nobject which then can be accessed for instance using :py:`iter_content()` method.\n\n.. code-block:: python\n\n    ...\n\n    class MyClient(RestClient):\n        ...\n\n        @GET('stream/{n}/{m}')\n        @stream\n        @query('size')\n        @query('offset', 'off')\n        def stream(self, n, m, size, offset):\n            \"\"\"Get data range\"\"\"\n\n    ...\n\n    with client.stream(2,4, 1024, 200) as r:\n        for b in r.iter_content(chunk_size=100):\n            content.append(b)\n\n\nSessions\n--------\n\nBased on the functionality provided by requests_ library in the form of\nsession objects, sessions can significantly improve the performance of the\nclient in case multiple responses are performed as well as maintain certain\ninformation between requests such as session cookies.\n\nSessions in decorest_ can either be created and closed manually:\n\n.. code-block:: python\n\n        s = client._session()\n        s.list_subbreeds('hound')\n        s.list_subbreeds('husky')\n        s._close()\n\nor can be used via the context manager :py:`with` operator:\n\n.. code-block:: python\n\n        with client._session() as s:\n            s.list_subbreeds('hound')\n            s.list_subbreeds('husky')\n\nAll session specific methods begin with a single underscore, in order not\nto interfere with any possible API method names defined in the base client\nclass.\n\nIf some additional customization of the session is required, the underlying\n`requests session`_ object can be retrieved from decorest_ session object\nusing :py:`_requests_session` attribute:\n\n.. code-block:: python\n\n        with client._session() as s:\n            s._requests_session.verify = '/path/to/cert.pem'\n            s.list_subbreeds('hound')\n            s.list_subbreeds('husky')\n\nAuthentication\n--------------\n\nSince authentication is highly specific to actual invocation of the REST API,\nand not to it's specification, there is not decorator for authentication,\nbut instead an authentication object (compatible with `requests_`\nauthentication mechanism) can be set in the client object using\n:py:`_set_auth()` method, for example:\n\n.. code-block:: python\n\n        client._set_auth(HTTPBasicAuth('user', 'password')\n        with client._session() as s:\n            s._requests_session.verify = '/path/to/cert.pem'\n            s.list_subbreeds('hound')\n            s.list_subbreeds('husky')\n\nThe authentication object will be used in both regular API calls, as well\nas when using sessions.\n\n\nGrouping API methods\n---------------------------\n\nFor larger API's it can be useful to be able to split the API definition\ninto multiple files but still use it from a single instance in the code.\n\nThis can be achieved by creating separate client classes for each group\nof operations and then create a common class, which inherits from all the\ngroup clients and provides entire API from one instance.\n\nFor example of this checkout the `Petstore Swagger client example`_.\n\n\nCaveats\n-------\n\nDecorator order\n~~~~~~~~~~~~~~~\n\nDecorators can be basically added in any order, except for the HTTP method\ndecorator (e.g. :py:`@GET()`), which should always be at the top of the given\ndecorator list. Third party decorators should be added above the HTTP method\ndecorators.\n\nName conflicts\n~~~~~~~~~~~~~~\n\nDecorators can sometimes generate conflicts with decorated method or function\nnames in case they have the same name as they get merged into the :py:`__globals__`\ndictionary. In case this is an issue, decorest decorators should be used with full\nmodule namespace:\n\n.. code-block:: python\n\n    @decorest.POST('pet')\n    @decorest.content('application/json')\n    @decorest.header('accept', 'application/json')\n    @decorest.body('pet', lambda p: json.dumps(p))\n    def add_pet(self, pet):\n        \"\"\"Add a new pet to the store\"\"\"\n\n\nCompatibility with other decorators\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nIn general the decorators should work with other decorators which return\nfunction objects, but your mileage may vary. In general third-party decorators\nshould be added above the HTTP method decorators as only the HTTP decorators\nmake the actual HTTP request. Thus, typical decorators, which try to wrap\nthe actual call should get the HTTP callable returned by HTTP method decorators\nsuch as :py:`@GET()`.\n\nCurrently, it is not possible to add decorators such as :py:`@classmethod`\nor :py:`@staticmethod` to API methods, as the invocation requires an instance\nof client class.\n\nLicense\n=======\n\nCopyright 2018 Bartosz Kryza <bkryza@gmail.com>\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\n\n.. _tests: https://github.com/bkryza/decorest/tree/master/tests\n.. _requests: https://github.com/requests/requests\n.. _`requests session`: http://docs.python-requests.org/en/master/user/advanced/#session-objects\n.. _decorest: https://github.com/bkryza/decorest\n.. _`descriptor objects`: https://docs.python.org/3/c-api/descriptor.html\n.. _`Petstore Swagger client example`: https://github.com/bkryza/decorest/blob/master/examples/swagger_petstore/petstore_client.py\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/bkryza/decorest", "keywords": "", "license": "Apache 2.0", "maintainer": "", "maintainer_email": "", "name": "decorest", "package_url": "https://pypi.org/project/decorest/", "platform": "", "project_url": "https://pypi.org/project/decorest/", "project_urls": {"Homepage": "https://github.com/bkryza/decorest"}, "release_url": "https://pypi.org/project/decorest/0.0.5/", "requires_dist": null, "requires_python": "", "summary": "`decorest` library provides an easy to use declarative REST API client interface, where definition of the API methods using decorators automatically gives a working REST client with no additional code.", "version": "0.0.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            decorest - decorator heavy REST client for Python<br>#################################################<br><br>.. image::\thttps://img.shields.io/travis/bkryza/decorest.svg<br>    :target: https://travis-ci.org/bkryza/decorest<br><br>.. image:: https://img.shields.io/pypi/v/decorest.svg<br>    :target: https://pypi.python.org/pypi/decorest<br><br>.. image:: https://img.shields.io/pypi/l/decorest.svg<br>    :target: https://pypi.python.org/pypi/decorest<br><br>.. image:: https://img.shields.io/pypi/pyversions/decorest.svg<br>    :target: https://pypi.python.org/pypi/decorest<br><br>Declarative, decorator-based REST client for Python.<br><br>.. role:: py(code)<br>   :language: python<br><br><br>.. contents::<br><br>Overview<br>========<br><br>decorest_ library provides an easy to use declarative REST API client interface,<br>where definition of the API methods using decorators automatically produces<br>a working REST client with no additional code. In practice the library provides<br>only an interface to describe and interact with REST services - the actual work<br>is done underneath by the requests_ library.<br><br>For example:<br><br>.. code-block:: python<br><br>    from decorest import RestClient, GET<br><br>    class DogClient(RestClient):<br>        def __init__(self, endpoint):<br>            super(DogClient, self).__init__(endpoint)<br><br>        @GET('breed/{breed_name}/list')<br>        def list_subbreeds(self, breed_name):<br>            \"\"\"List all sub-breeds\"\"\"<br><br>    client = DogClient('https://dog.ceo/api')<br><br>    print(client.list_subbreeds('hound'))<br><br><br>Installation<br>============<br><br>Using pip:<br><br>.. code-block:: bash<br><br>    pip install decorest<br><br>Usage<br>=====<br><br>Basics<br>------<br><br>For most typical cases the usage should be fairly straightforward. Simply create a<br>subclass of :py:`decorest.RestClient` and define methods, which will perform calls<br>to the actual REST service. You can declare how each function should perform<br>the request to the service solely using decorators attached to the<br>method definition. The method itself is not expected to have any implementation,<br>except maybe for a docstring.<br><br>After your API client class definition is complete, simply create an instance<br>of it and you're good to go. This library relies on the functionality provided<br>by the requests_ library, which means that any valid named argument, which<br>could be passed to a requests_ HTTP call can be also passed to the calls<br>of the client methods and will be forwarded as is.<br><br>For more information checkout sample clients in `examples`.<br><br>Decorators<br>----------<br><br>Below is a list of all supported decorators along with short explanation and<br>examples. Some decorators can be attached to both client class as well as<br>methods, in which case the class-level decorator is applied to all HTTP methods<br>in that class. Furthermore, each decorator can be overridden directly during<br>the method call by providing a named argument with name equal to the decorator<br>name.<br><br><br>@GET, @PUT, @POST, @PATCH, @DELETE, @HEAD, @OPTIONS<br>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>Marks the request with a specific HTTP method and the path relative to<br>endpoint provided as argument. The path can contain variables enclosed<br>in curly brackets, e.g.:<br><br>.. code-block:: python<br><br>        @GET('breed/{breed_name}/list')<br>        def list_subbreeds(self, breed_name):<br>            \"\"\"List all sub-breeds\"\"\"<br><br>which will be replaced by the arguments from the method definition.<br>These decorators apply only to methods.<br><br>@query<br>~~~~~~<br><br>Adds a query parameter to the request. URL encoding will be applied to<br>the value using :py:`urlencode`, e.g.:<br><br>.. code-block:: python<br><br>        @GET('breed/{breed_name}/list')<br>        @query('long_names', 'longNames')<br>        @query('limit')<br>        def list_subbreeds(self, breed_name, long_names, limit=100):<br>            \"\"\"List all sub-breeds\"\"\"<br><br>This decorator can take a single string parameter, which determines the name<br>of the method argument whose value will be added as the query argument value<br>of the same name.<br><br>In case 2 arguments are provided, the second argument determines the actual<br>query key name, which will be used in the request query (if for some reason<br>it should be different than the method argument name).<br><br>Furthermore, if a default value is provided in a method declaration, it<br>will be used whenever a value for this argument is not provided during<br>invocation.<br><br>For example, the following invocation of the above method:<br><br>.. code-block:: python<br><br>    client.list_subbreeds('hound', 1)<br><br>will result in the following query:<br><br>.. code-block::<br><br>    https://dog.ceo/api/breed/hound?longNames=1&amp;limit=100<br><br>This decorator can be added only to methods.<br><br>@form<br>~~~~~~<br><br>Adds a form parameter to the request. For example:<br><br>.. code-block:: python<br><br>        @POST('breed')<br>        @form('breed_name')<br>        @form('breed_url', 'breed_wikipedia_link')<br>        def add_breed(self, breed_name, breed_url):<br>            \"\"\"Add sub-breed\"\"\"<br><br>This decorator can take a single string parameter, which determines the name<br>of the method argument whose value will be added as the query argument value<br>of the same name.<br><br>In case 2 arguments are provided, the second argument determines the actual<br>form field name, which will be used in the request form (if for some reason<br>it cannot be the same as the method argument name).<br><br>If a method has at least one :py:`@form` decorator attached, the `Content-type`<br>header value will be always set to `application/x-www-form-urlencoded`.<br><br>This decorator can be added only to methods.<br><br>@header<br>~~~~~~~<br><br>Adds a header key-value pair to the request, e.g.:<br><br>.. code-block:: python<br><br>        @GET('breed/{breed_name}/list')<br>        @header('accept', 'application/json')<br>        def list_subbreeds(self, breed_name):<br>            \"\"\"List all sub-breeds\"\"\"<br><br>This decorator can be added to both methods and client class. The class level<br>decorators will be added to every method and can be overridden using method<br>level decorators.<br><br>@body<br>~~~~~<br><br>Body decorator enables to specify which of the method parameters should provide<br>the body content to the request, e.g.:<br><br>.. code-block:: python<br><br>    @POST('pet')<br>    @header('content-type', 'application/json')<br>    @header('accept', 'application/json')<br>    @body('pet')<br>    def add_pet(self, pet):<br>        \"\"\"Add a new pet to the store\"\"\"<br><br>:py:`@body` decorator can take an optional argument which provides a serialization<br>handler, which will be invoked automatically before passing the argument as<br>body content, which can be a simple lambda or a more complex function with some<br>logic. For example:<br><br>.. code-block:: python<br><br>    @POST('pet')<br>    @header('content-type', 'application/json')<br>    @header('accept', 'application/json')<br>    @body('pet', lambda p: json.dumps(p))<br>    def add_pet(self, pet):<br>        \"\"\"Add a new pet to the store\"\"\"<br><br>The above code will automatically stringify the dictionary provided as<br>value of 'pet' argument using :py:`json.dumps()` function.<br><br>@on<br>~~~<br><br>By default the request method will not return requests_ response object,<br>but the response will depend on the content type of the response.<br><br>In case the HTTP request succeeds the following results are expected:<br><br>- :py:`response.json()` if the content type of response is JSON<br>- :py:`response.content` if the content type is binary<br>- :py:`response.text` otherwise<br><br>In case the request fails, :py:`response.raise_for_status()` is called and<br>should be handled in the code.<br><br>In case another behavior is required, custom handlers can be provided<br>for each method using lambdas or functions. The provided handler is<br>expected to take only a single argument, which is the requests_ response<br>object, e.g.:<br><br>.. code-block:: python<br><br>        @GET('breed/{breed_name}/list')<br>        @header('accept', 'application/json')<br>        @on(200, lambda r: r.json())<br>        def list_subbreeds(self, breed_name):<br>            \"\"\"List all sub-breeds\"\"\"<br><br>This decorator can be applied to both methods and classes, however when<br>applied to a class the handler will be called for method which receives<br>the provided status code.<br><br>The first argument of this decorator must be an integer. On Python 3 it<br>also possible to pass :py:`...` (i.e. Ellipsis) object, which is equivalent<br>to :py:`HttpStatus.ANY`. Any other value passed for this argument will<br>raise :py:`TypeError`.<br><br>@content<br>~~~~~~~~<br>This decorator is a shortcut for :py:`@header('content-type', ...)`, e.g:<br><br>.. code-block:: python<br><br>    @POST('pet')<br>    @content('application/json')<br>    @header('accept', 'application/json')<br>    @body('pet', lambda p: json.dumps(p))<br>    def add_pet(self, pet):<br>        \"\"\"Add a new pet to the store\"\"\"<br><br>@accept<br>~~~~~~~~<br>This decorator is a shortcut for :py:`@header('accept', ...)`, e.g:<br><br>.. code-block:: python<br><br>        @GET('breed/{breed_name}/list')<br>        @content('application/json')<br>        @accept('application/xml')<br>        def list_subbreeds(self, breed_name):<br>            \"\"\"List all sub-breeds\"\"\"<br><br>@endpoint<br>~~~~~~~~<br>This decorator enables to define a default endpoint for the service,<br>which then doesn't have to be provided in the client constructor:<br><br>.. code-block:: python<br><br>        @endpoint('https://dog.ceo/api')<br>        class DogClient(RestClient):<br>            \"\"\"List all sub-breeds\"\"\"<br>            def __init__(self, endpoint=None):<br>                super(DogClient, self).__init__(endpoint)<br><br>The endpoint provided in the client constructor will take precedence<br>however.<br><br><br>@timeout<br>~~~~~~~~<br>Specifies a default timeout value (in seconds) for method or entire API.<br><br>.. code-block:: python<br><br>        @endpoint('https://dog.ceo/api')<br>        @timeout(5)<br>        class DogClient(RestClient):<br>            \"\"\"List all sub-breeds\"\"\"<br>            def __init__(self, endpoint=None):<br>                super(DogClient, self).__init__(endpoint)<br><br>@stream<br>~~~~~~~<br>This decorator allows to specify a method which returns binary stream of data.<br>Adding this decorator to a method will add a :py:`stream=True`<br>argument to the requests_ call and will by default return entire requests<br>object which then can be accessed for instance using :py:`iter_content()` method.<br><br>.. code-block:: python<br><br>    ...<br><br>    class MyClient(RestClient):<br>        ...<br><br>        @GET('stream/{n}/{m}')<br>        @stream<br>        @query('size')<br>        @query('offset', 'off')<br>        def stream(self, n, m, size, offset):<br>            \"\"\"Get data range\"\"\"<br><br>    ...<br><br>    with client.stream(2,4, 1024, 200) as r:<br>        for b in r.iter_content(chunk_size=100):<br>            content.append(b)<br><br><br>Sessions<br>--------<br><br>Based on the functionality provided by requests_ library in the form of<br>session objects, sessions can significantly improve the performance of the<br>client in case multiple responses are performed as well as maintain certain<br>information between requests such as session cookies.<br><br>Sessions in decorest_ can either be created and closed manually:<br><br>.. code-block:: python<br><br>        s = client._session()<br>        s.list_subbreeds('hound')<br>        s.list_subbreeds('husky')<br>        s._close()<br><br>or can be used via the context manager :py:`with` operator:<br><br>.. code-block:: python<br><br>        with client._session() as s:<br>            s.list_subbreeds('hound')<br>            s.list_subbreeds('husky')<br><br>All session specific methods begin with a single underscore, in order not<br>to interfere with any possible API method names defined in the base client<br>class.<br><br>If some additional customization of the session is required, the underlying<br>`requests session`_ object can be retrieved from decorest_ session object<br>using :py:`_requests_session` attribute:<br><br>.. code-block:: python<br><br>        with client._session() as s:<br>            s._requests_session.verify = '/path/to/cert.pem'<br>            s.list_subbreeds('hound')<br>            s.list_subbreeds('husky')<br><br>Authentication<br>--------------<br><br>Since authentication is highly specific to actual invocation of the REST API,<br>and not to it's specification, there is not decorator for authentication,<br>but instead an authentication object (compatible with `requests_`<br>authentication mechanism) can be set in the client object using<br>:py:`_set_auth()` method, for example:<br><br>.. code-block:: python<br><br>        client._set_auth(HTTPBasicAuth('user', 'password')<br>        with client._session() as s:<br>            s._requests_session.verify = '/path/to/cert.pem'<br>            s.list_subbreeds('hound')<br>            s.list_subbreeds('husky')<br><br>The authentication object will be used in both regular API calls, as well<br>as when using sessions.<br><br><br>Grouping API methods<br>---------------------------<br><br>For larger API's it can be useful to be able to split the API definition<br>into multiple files but still use it from a single instance in the code.<br><br>This can be achieved by creating separate client classes for each group<br>of operations and then create a common class, which inherits from all the<br>group clients and provides entire API from one instance.<br><br>For example of this checkout the `Petstore Swagger client example`_.<br><br><br>Caveats<br>-------<br><br>Decorator order<br>~~~~~~~~~~~~~~~<br><br>Decorators can be basically added in any order, except for the HTTP method<br>decorator (e.g. :py:`@GET()`), which should always be at the top of the given<br>decorator list. Third party decorators should be added above the HTTP method<br>decorators.<br><br>Name conflicts<br>~~~~~~~~~~~~~~<br><br>Decorators can sometimes generate conflicts with decorated method or function<br>names in case they have the same name as they get merged into the :py:`__globals__`<br>dictionary. In case this is an issue, decorest decorators should be used with full<br>module namespace:<br><br>.. code-block:: python<br><br>    @decorest.POST('pet')<br>    @decorest.content('application/json')<br>    @decorest.header('accept', 'application/json')<br>    @decorest.body('pet', lambda p: json.dumps(p))<br>    def add_pet(self, pet):<br>        \"\"\"Add a new pet to the store\"\"\"<br><br><br>Compatibility with other decorators<br>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>In general the decorators should work with other decorators which return<br>function objects, but your mileage may vary. In general third-party decorators<br>should be added above the HTTP method decorators as only the HTTP decorators<br>make the actual HTTP request. Thus, typical decorators, which try to wrap<br>the actual call should get the HTTP callable returned by HTTP method decorators<br>such as :py:`@GET()`.<br><br>Currently, it is not possible to add decorators such as :py:`@classmethod`<br>or :py:`@staticmethod` to API methods, as the invocation requires an instance<br>of client class.<br><br>License<br>=======<br><br>Copyright 2018 Bartosz Kryza &lt;bkryza@gmail.com&gt;<br><br>Licensed under the Apache License, Version 2.0 (the \"License\");<br>you may not use this file except in compliance with the License.<br>You may obtain a copy of the License at<br><br>    http://www.apache.org/licenses/LICENSE-2.0<br><br>Unless required by applicable law or agreed to in writing, software<br>distributed under the License is distributed on an \"AS IS\" BASIS,<br>WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br>See the License for the specific language governing permissions and<br>limitations under the License.<br><br><br>.. _tests: https://github.com/bkryza/decorest/tree/master/tests<br>.. _requests: https://github.com/requests/requests<br>.. _`requests session`: http://docs.python-requests.org/en/master/user/advanced/#session-objects<br>.. _decorest: https://github.com/bkryza/decorest<br>.. _`descriptor objects`: https://docs.python.org/3/c-api/descriptor.html<br>.. _`Petstore Swagger client example`: https://github.com/bkryza/decorest/blob/master/examples/swagger_petstore/petstore_client.py<br>\n          </div>"}, "last_serial": 4251365, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "0bebd956e9de2eb687fd6b375ad7f19c", "sha256": "dd0a3c65da986fc3284c62d99f34c1889be1a437eee8787f5a184311183da711"}, "downloads": -1, "filename": "decorest-0.0.1.tar.gz", "has_sig": false, "md5_digest": "0bebd956e9de2eb687fd6b375ad7f19c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8115, "upload_time": "2018-02-08T01:39:33", "upload_time_iso_8601": "2018-02-08T01:39:33.655379Z", "url": "https://files.pythonhosted.org/packages/40/61/09cbdc6d009e9feb6ca8c1beca95d16a5f2a63cb868240940a5a99f4320c/decorest-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "9b70a5ca614e6b80b87cb4fc45ab690a", "sha256": "87702e3c91b81bd3eaf856c6d58ff869705a212a2689a06df3365af2d08478a1"}, "downloads": -1, "filename": "decorest-0.0.2.tar.gz", "has_sig": false, "md5_digest": "9b70a5ca614e6b80b87cb4fc45ab690a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13770, "upload_time": "2018-02-11T23:25:50", "upload_time_iso_8601": "2018-02-11T23:25:50.951672Z", "url": "https://files.pythonhosted.org/packages/79/a3/5b35a2db902802ae30dd6fae1f005b86da15c4893f8598d4be50d175fa13/decorest-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "fb0ee1de9f940f5f9f55ecc77593658b", "sha256": "e5c05fe4dabd26297f7d27a0f83e840a43c782ef460bbf2f3d36b630492f32ac"}, "downloads": -1, "filename": "decorest-0.0.3.tar.gz", "has_sig": false, "md5_digest": "fb0ee1de9f940f5f9f55ecc77593658b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13607, "upload_time": "2018-04-02T12:59:11", "upload_time_iso_8601": "2018-04-02T12:59:11.439222Z", "url": "https://files.pythonhosted.org/packages/13/ac/07dfd314a33f2b892b3a53d3b71f8ce11c64e8992d92a1ac786279c9c084/decorest-0.0.3.tar.gz", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "481f1319a923ef1336bb9270ce7abc19", "sha256": "4c42dc5cea9f22fa878ba0d0a0d0af50e7f59641495aa37bbd39117c935b6c9d"}, "downloads": -1, "filename": "decorest-0.0.5.tar.gz", "has_sig": false, "md5_digest": "481f1319a923ef1336bb9270ce7abc19", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17802, "upload_time": "2018-09-08T09:59:29", "upload_time_iso_8601": "2018-09-08T09:59:29.713205Z", "url": "https://files.pythonhosted.org/packages/b2/b1/857a34415a89a6c96026136e16e0709cc8a7b3b0e4a9b2b643a4327c0f04/decorest-0.0.5.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "481f1319a923ef1336bb9270ce7abc19", "sha256": "4c42dc5cea9f22fa878ba0d0a0d0af50e7f59641495aa37bbd39117c935b6c9d"}, "downloads": -1, "filename": "decorest-0.0.5.tar.gz", "has_sig": false, "md5_digest": "481f1319a923ef1336bb9270ce7abc19", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17802, "upload_time": "2018-09-08T09:59:29", "upload_time_iso_8601": "2018-09-08T09:59:29.713205Z", "url": "https://files.pythonhosted.org/packages/b2/b1/857a34415a89a6c96026136e16e0709cc8a7b3b0e4a9b2b643a4327c0f04/decorest-0.0.5.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:39:33 2020"}