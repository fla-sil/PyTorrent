{"info": {"author": "WardPearce", "author_email": "wardpearce@protonmail.com", "bugtrack_url": null, "classifiers": [], "description": "##### Version 0.1.0 is NOT backwards compatibility with anything below that version.\n\n## Install \nPypi: ``pip3 install aiob2``\nGit: ``pip3 install git+https://github.com/WardPearce/aiob2.git``\n\n## Notes\n- Our wrapper only adjusts the names for required inputs, any non-required input what uses a '-' replace it with '__'.\n- Don't start a pathway with a '/'.\n\n## Index\n- [Backblaze Docs](https://www.backblaze.com/b2/docs/)\n- [API](#api)\n- [Example](#example)\n\n## API\n##### aiob2.client\n``aiob2.client(application_key_id, application_key, session=None, debug=False)``\n- If you aren't passing a aiohttp.ClientSession object created within the event loop aiob2.client should be ran within the context of the loop.\n\n##### aiob2.client(...).bucket(self, bucket_id)\n    - delete(self)\n        Delete the given bucket.\n\n    - file\n        - hide(self, file_name)\n            Hides a file so that downloading by name will not find the file.\n        - versions(self, **kwargs)\n            Lists all of the versions of all of the files.\n        - names(self, **kwargs)\n            Lists the names of all files in a bucket.\n        - download_authorization(self, file_name_prefix, valid_duration_in_seconds, **kwargs)\n            Used to generate an authorization token that can be used to download files.\n        - unfinished_large_files(self, **kwargs)\n            Lists information about large file uploads that have been started.\n\n    - upload\n        - get(self)\n            Gets an URL to use for uploading files.\n        - file(self, file_name, file_pathway, content_type=\"b2/x-auto\", **kwargs)\n            Used to upload local files onto the bucket, returning its unique file ID.\n        - data(self, data, file_name, content_type=\"b2/x-auto\", **kwargs)\n            Used to upload data in memory onto the bucket, returning its unique file ID.\n\n##### aiob2.client(...).account\n    - create\n        - key(self, capabilities, key_name, **kwargs)\n            Creates a new application key.\n        - bucket(self, bucket_name, bucket_type, **kwargs)\n            Creates a new bucket. A bucket belongs to the account used to create it.\n\n    - list\n        - keys(self, **kwargs)\n            Lists application keys associated with an account.\n        - buckets(self, **kwargs)\n            Lists buckets associated with an account, in alphabetical order by bucket name.\n\n##### aiob2.client(...).file(self, file_id=None)\n    - info(self)\n        Gets information about one file stored in B2.\n    - finish(self, part_sha1_array)\n        Converts the parts that have been uploaded into a single B2 file.\n    - download(self)\n        Downloads one file from B2.\n    - parts(self, **kwargs)\n        Lists the parts that have been uploaded for a large file that has not been finished yet.\n\n    - upload\n        - get(self)\n            Gets an URL to use for uploading parts of a large file.\n        - part(self, data, bytes_count, x_bz_part_number: int)\n            Uploads one part of a large file to B2.\n        - cancel(self)\n            Cancels the upload of a large file, and deletes all of the parts that have been uploaded.\n\n##### aiob2.client(...).source_file(self, source_file_id)\n    - copy\n        - part(self, large_file_id, part_number, **kwargs)\n            Copies from an existing B2 file.\n        - file(self, file_name, **kwargs)\n            Creates a new file by copying from an existing file.\n\n## Example\n```py\nimport asyncio\nimport aiob2\n\nasync def example():\n    b2 = aiob2.client(application_key=\"....\", application_key_id=\"....\")\n\n    print(await b2.bucket(bucket_id=\"33e138c438fbe35e6be90b11\").upload.data(data=b\"world\", file_name=\"test/hello.txt\"))\n\n    await b2.session.close()\n\nloop = asyncio.get_event_loop()\nloop.run_until_complete(example())\nloop.close()\n```\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/WardPearce/aiob2", "keywords": "", "license": "Apache License 2.0", "maintainer": "", "maintainer_email": "", "name": "aiob2", "package_url": "https://pypi.org/project/aiob2/", "platform": "", "project_url": "https://pypi.org/project/aiob2/", "project_urls": {"Homepage": "https://github.com/WardPearce/aiob2"}, "release_url": "https://pypi.org/project/aiob2/0.1.0/", "requires_dist": ["aiohttp (>=3.6.2)", "aiofiles (>=0.4.0)", "requests (>=2.0.0)"], "requires_python": ">=3.6", "summary": "Backblaze B2 Asynchronous Wrapper.", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h5>Version 0.1.0 is NOT backwards compatibility with anything below that version.</h5>\n<h2>Install</h2>\n<p>Pypi: <code>pip3 install aiob2</code>\nGit: <code>pip3 install git+https://github.com/WardPearce/aiob2.git</code></p>\n<h2>Notes</h2>\n<ul>\n<li>Our wrapper only adjusts the names for required inputs, any non-required input what uses a '-' replace it with '__'.</li>\n<li>Don't start a pathway with a '/'.</li>\n</ul>\n<h2>Index</h2>\n<ul>\n<li><a href=\"https://www.backblaze.com/b2/docs/\" rel=\"nofollow\">Backblaze Docs</a></li>\n<li><a href=\"#api\" rel=\"nofollow\">API</a></li>\n<li><a href=\"#example\" rel=\"nofollow\">Example</a></li>\n</ul>\n<h2>API</h2>\n<h5>aiob2.client</h5>\n<p><code>aiob2.client(application_key_id, application_key, session=None, debug=False)</code></p>\n<ul>\n<li>If you aren't passing a aiohttp.ClientSession object created within the event loop aiob2.client should be ran within the context of the loop.</li>\n</ul>\n<h5>aiob2.client(...).bucket(self, bucket_id)</h5>\n<pre><code>- delete(self)\n    Delete the given bucket.\n\n- file\n    - hide(self, file_name)\n        Hides a file so that downloading by name will not find the file.\n    - versions(self, **kwargs)\n        Lists all of the versions of all of the files.\n    - names(self, **kwargs)\n        Lists the names of all files in a bucket.\n    - download_authorization(self, file_name_prefix, valid_duration_in_seconds, **kwargs)\n        Used to generate an authorization token that can be used to download files.\n    - unfinished_large_files(self, **kwargs)\n        Lists information about large file uploads that have been started.\n\n- upload\n    - get(self)\n        Gets an URL to use for uploading files.\n    - file(self, file_name, file_pathway, content_type=\"b2/x-auto\", **kwargs)\n        Used to upload local files onto the bucket, returning its unique file ID.\n    - data(self, data, file_name, content_type=\"b2/x-auto\", **kwargs)\n        Used to upload data in memory onto the bucket, returning its unique file ID.\n</code></pre>\n<h5>aiob2.client(...).account</h5>\n<pre><code>- create\n    - key(self, capabilities, key_name, **kwargs)\n        Creates a new application key.\n    - bucket(self, bucket_name, bucket_type, **kwargs)\n        Creates a new bucket. A bucket belongs to the account used to create it.\n\n- list\n    - keys(self, **kwargs)\n        Lists application keys associated with an account.\n    - buckets(self, **kwargs)\n        Lists buckets associated with an account, in alphabetical order by bucket name.\n</code></pre>\n<h5>aiob2.client(...).file(self, file_id=None)</h5>\n<pre><code>- info(self)\n    Gets information about one file stored in B2.\n- finish(self, part_sha1_array)\n    Converts the parts that have been uploaded into a single B2 file.\n- download(self)\n    Downloads one file from B2.\n- parts(self, **kwargs)\n    Lists the parts that have been uploaded for a large file that has not been finished yet.\n\n- upload\n    - get(self)\n        Gets an URL to use for uploading parts of a large file.\n    - part(self, data, bytes_count, x_bz_part_number: int)\n        Uploads one part of a large file to B2.\n    - cancel(self)\n        Cancels the upload of a large file, and deletes all of the parts that have been uploaded.\n</code></pre>\n<h5>aiob2.client(...).source_file(self, source_file_id)</h5>\n<pre><code>- copy\n    - part(self, large_file_id, part_number, **kwargs)\n        Copies from an existing B2 file.\n    - file(self, file_name, **kwargs)\n        Creates a new file by copying from an existing file.\n</code></pre>\n<h2>Example</h2>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n<span class=\"kn\">import</span> <span class=\"nn\">aiob2</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">example</span><span class=\"p\">():</span>\n    <span class=\"n\">b2</span> <span class=\"o\">=</span> <span class=\"n\">aiob2</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"p\">(</span><span class=\"n\">application_key</span><span class=\"o\">=</span><span class=\"s2\">\"....\"</span><span class=\"p\">,</span> <span class=\"n\">application_key_id</span><span class=\"o\">=</span><span class=\"s2\">\"....\"</span><span class=\"p\">)</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"k\">await</span> <span class=\"n\">b2</span><span class=\"o\">.</span><span class=\"n\">bucket</span><span class=\"p\">(</span><span class=\"n\">bucket_id</span><span class=\"o\">=</span><span class=\"s2\">\"33e138c438fbe35e6be90b11\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">upload</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">=</span><span class=\"sa\">b</span><span class=\"s2\">\"world\"</span><span class=\"p\">,</span> <span class=\"n\">file_name</span><span class=\"o\">=</span><span class=\"s2\">\"test/hello.txt\"</span><span class=\"p\">))</span>\n\n    <span class=\"k\">await</span> <span class=\"n\">b2</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n\n<span class=\"n\">loop</span> <span class=\"o\">=</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">get_event_loop</span><span class=\"p\">()</span>\n<span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span><span class=\"n\">example</span><span class=\"p\">())</span>\n<span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n</pre>\n\n          </div>"}, "last_serial": 7154222, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "e32c5d747b7b4cd5762b8770309c7df2", "sha256": "cbe6ed509c4040c2347cf6f5dfef685d442178c71e627392c180a75dadb6e233"}, "downloads": -1, "filename": "aiob2-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "e32c5d747b7b4cd5762b8770309c7df2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 13550, "upload_time": "2020-05-03T01:02:37", "upload_time_iso_8601": "2020-05-03T01:02:37.576208Z", "url": "https://files.pythonhosted.org/packages/81/78/8fc1f996a4e6e9828c95dbe7e3db03f3cfb4a76961c50be6fc2873f8ca0f/aiob2-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "56dad8e6286cd29abfd55ead0b3ee6ea", "sha256": "1eac8d7299b2c8981ba6ef02a53602ca0f47ad405bb5eccb8856c7291c19dda9"}, "downloads": -1, "filename": "aiob2-0.1.0.tar.gz", "has_sig": false, "md5_digest": "56dad8e6286cd29abfd55ead0b3ee6ea", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 7772, "upload_time": "2020-05-03T01:02:39", "upload_time_iso_8601": "2020-05-03T01:02:39.678567Z", "url": "https://files.pythonhosted.org/packages/62/9d/8e69ad2db3450251c8376450528c7ba4345c41f84c9f68c79d2b5952f18a/aiob2-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e32c5d747b7b4cd5762b8770309c7df2", "sha256": "cbe6ed509c4040c2347cf6f5dfef685d442178c71e627392c180a75dadb6e233"}, "downloads": -1, "filename": "aiob2-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "e32c5d747b7b4cd5762b8770309c7df2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 13550, "upload_time": "2020-05-03T01:02:37", "upload_time_iso_8601": "2020-05-03T01:02:37.576208Z", "url": "https://files.pythonhosted.org/packages/81/78/8fc1f996a4e6e9828c95dbe7e3db03f3cfb4a76961c50be6fc2873f8ca0f/aiob2-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "56dad8e6286cd29abfd55ead0b3ee6ea", "sha256": "1eac8d7299b2c8981ba6ef02a53602ca0f47ad405bb5eccb8856c7291c19dda9"}, "downloads": -1, "filename": "aiob2-0.1.0.tar.gz", "has_sig": false, "md5_digest": "56dad8e6286cd29abfd55ead0b3ee6ea", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 7772, "upload_time": "2020-05-03T01:02:39", "upload_time_iso_8601": "2020-05-03T01:02:39.678567Z", "url": "https://files.pythonhosted.org/packages/62/9d/8e69ad2db3450251c8376450528c7ba4345c41f84c9f68c79d2b5952f18a/aiob2-0.1.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 16:21:47 2020"}