{"info": {"author": "Andrey Khrolenok", "author_email": "andrey@khrolenok.ru", "bugtrack_url": null, "classifiers": ["Environment :: Console", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3 :: Only", "Topic :: Software Development :: Build Tools", "Topic :: Utilities"], "description": "# Community Hass.io Add-ons Repository Updater\n\n[![PyPi Release][pypi-shield]][pypi]\n[![GitHub Activity][commits-shield]][commits]\n[![License][license-shield]](LICENSE.md)\n\n![Project Stage][project-stage-shield]\n![Project Maintenance][maintenance-shield]\n\n[![Community Forum][forum-shield]][forum]\n\n## About\n\nReads remote add-on repositories, determines versions and generates\nchangelogs to update the add-on repository fully automated.\n\nMainly used by the Community Hass.io add-ons project.\n\nPlease note, this program cannot be used with the general documented\nHass.io add-on repository approach and only works in the setup where\neach add-on has its own GitHub repository.\n\n## Installation\n\nUsing pip, the Python package manager:\n\n```bash\npip install hassio-repo-updater\n```\n\n## Usage\n\nThe Repository Updater is a pretty simple, straightforward CLI tool.\n\n```txt\nUsage: repository-updater [OPTIONS]\n\n  Community Hass.io Add-ons Repository Updater.\n\nOptions:\n  --token <TOKEN>                 GitHub access token\n  --repository <orgname/reponame>\n                                  The Hassio Addons repository to update\n  --addon <TARGET>                Update a single/specific add-on\n  --force                         Force an update of the add-on repository\n  --dryrun, --dry-run, --simulate\n                                  Do everything which is supposed to be done,\n                                  but don't write any changes. This is used to\n                                  see what would happen with the specified\n                                  action, without actually modifying anything.\n  --version                       Show the version and exit.\n  --help                          Show this message and exit.\n```\n\nTo get a GitHub token, please see the GitHub article: [Create a token][token]\n<!--\n\n## Using Docker\n\nThe Repository Updater has been packaged in a Docker container as well.\nThis allows for easy and quick use, without the need for a Python setup. This\ncan be quite useful when using this tool in a CI server like; Travis,\nCircleCI or GitLab CI.\n\n```bash\ndocker run -it --rm hassioaddons/repository-updater:latest\n```\n\nAll the usage information parameters from the previous chapter apply.\nFor example, this shows the current version of the tool:\n\n```bash\ndocker run -it --rm hassioaddons/repository-updater:latest --version\n```\n\n-->\n\n## Add-ons Repository Configuration\n\nIn order for the Repository Updater to do its job, we need feed it some\ninformation. It needs to know which add-ons there are currently in the\nadd-ons repository and where each add-on is located on GitHub.\n\nSecondly, it needs to know the stability channel of the add-ons repository.\nThere are 3 stability channel levels available:\n\n- **stable**: Stable releases\n- **beta**: Beta / test releases\n- **edge**: Latest builds, usually build straight from development\n\nCreate a `.hassio-addons.yml` file in the root of the add-ons repository,\nwhich looks like this:\n\n```yaml\nchannel: edge\naddons:\n  example:\n    repository: hassio-addons/addon-example\n    target: example\n    image: hassioaddons/example-{arch}\n  homebridge:\n    repository: hassio-addons/addon-homebridge\n    target: homebridge\n    image: hassioaddons/homebridge-{arch}\n  pihole:\n    repository: hassio-addons/addon-pi-hole\n    target: pi-hole\n    image: hassioaddons/pi-hole-{arch}\n    channels: beta, stable\n```\n\nThe target in the add-ons repository is specified as the key for each add-on,\nthis will be the directory name inside the add-ons repository as well. This is\ndifferent from the `target` key, in a way that that key specified the add-on\ntarget directory inside the git repository of the add-on itself.\n\nIn the above example, `pihole` will be the name of the add-on directory\ninside the add-ons repository, while `pi-hole` is the directory in the add-on\ngit repo that contains the actual add-on.\n\n`repository` specified the location of the add-on on GitHub. This must be\nin `organization/repository` or `username/repository` format.\n\nThe `image` key defines the Docker container images on Docker Hub\nfor this add-on. `{arch}` can be used as a placeholder for the architecture and\nis automatically replaced internally by the Repository Updater.\n\nFinally, you can add individual `channels` key for each add-on. This allows you\nto store several versions of add-ons in one repository at once. This way is\nconvenient if you have your own repository with a small number of add-ons.\n\n## Add-ons Repository README template\n\nIt is nice to have an up to date `README.md` file in your add-ons repository,\nbut maintaining one, can be quite time-consuming. The Repository updater is\nable to update the `README.md` file for you each run.\n\nThis is done using a Jinja2 template. Simply create a file called `.README.j2`\nin the root of your add-ons repository. Most information is collected\nfrom the add-on `config.json` and GitHub repo.\n\nThe following variables are available in your templates and are passed into it\nupon rendering your template.\n\n- **addons**: A list of add-ons in this add-ons repository\n- **channel**: The channel type of this add-ons repository\n- **description**: The GitHub add-ons repository description\n- **homepage**: The GitHub add-ons repository specified homepage URL\n- **issues**: The URL to the issues listing of the GitHub add-ons repository\n- **name**: The full GitHub name, e.g., `hassio-addons/repository`\n- **repo**: The full URL to the GitHub add-ons repository\n\nIn the above variables, a list of `addons` was specified. Each item in this\nlist contains the following variables:\n\n- **name**: Name of the add-on\n- **description**: Description of the add-on\n- **url**: URL of the add-on\n- **repo**: URL to the add-on GitHub repo\n- **archs**: List of supported architectures by this add-on\n- **slug**: The add-on slug\n- **target**: The target directory of the add-on inside the add-ons repository\n- **image**: The (untouched) Docker Hub container image name\n- **images**: Dictionary of images per architecture\n  - **aarch64**: `aarch64` DockerHub image (if arch is supported)\n  - **amd64**: `amd64` DockerHub image (if arch is supported)\n  - **armhf**: `armhf` DockerHub image (if arch is supported)\n  - **i386**: `i386` DockerHub image (if arch is supported)\n- **version**: The version of the add-on\n- **commit**: Full SHA of the commit bound to the current version\n- **date**: Date and time of the above commit/version\n\n## Examples\n\nIt is quite a complex setup to create an example for in this little document.\nNevertheless, see the [Community Hass.io Addons Repository][repository] for an\nexample of `.README.j2` and `.hassio-addons.yml` files.\n\nThe community project also uses GitLab for building its add-ons. Each\nadd-on runs this tool upon build, ensuring the repositories are always up to\ndate. Be sure to check some of the add-ons out as well to learn more about\nthe whole setup.\n\n## Why do this all\n\nLet me start by saying, there is nothing wrong with the documented way of\nsetting up a Hass.io add-ons repository. If you are just starting out developing\nadd-ons, please use the official documented way. You can always decide to\nchange your workflow.\n\nNevertheless, there are some advantages using the alternative method:\n\n- Each add-on has its own Git repository, which allows for a maximum separation\n  of concerns. Each add-on has its own issue list, releases, and all other\n  GitHub goodness.\n- Release and versioning is based on GitHub Releases / Git tagging. Which\n  does not need updating of configuration files and is done with a single click.\n- Each add-on Git repository is downloadable and instantly buildable locally.\n- Every single piece of manual labor around maintaining an add-ons repository\n  is fully automated. Building, testing, quality control, publishing, changelogs\n  and even the add-ons repository README are updated automatically.  This level\n  of automation allows us to focus completely on developing the actual add-on.\n- Availability of Beta and Edge channels for everyone who's interested or\n  willing to test.\n\n## Known issues and limitations\n\n- Any kind of testing... is missing...\n\n## Changelog & Releases\n\nThis repository keeps a change log using [GitHub's releases][releases]\nfunctionality. The format of the log is based on\n[Keep a Changelog][keepchangelog].\n\nReleases are based on [Semantic Versioning][semver], and use the format\nof ``MAJOR.MINOR.PATCH``. In a nutshell, the version will be incremented\nbased on the following:\n\n- ``MAJOR``: Incompatible or major changes.\n- ``MINOR``: Backwards-compatible new features and enhancements.\n- ``PATCH``: Backwards-compatible bugfixes and package updates.\n\n## Support\n\nGot questions?\n\nYou have several options to get them answered:\n\n- The Home Assistant [Community Forum][forum].\n\nYou could also [open an issue here][issue] GitHub.\n\n## Contributing\n\nThis is an active open-source project. We are always open to people who want to\nuse the code or contribute to it.\n\nWe have set up a separate document containing our\n[contribution guidelines](CONTRIBUTING.md).\n\nThank you for being involved! :heart_eyes:\n\n## Authors & contributors\n\nThe original setup of this repository is by [Franck Nijhof][frenck] with major\nmodifications by [Andrey \"Limych\" Khrolenok][limych].\n\nFor a full list of all authors and contributors,\ncheck [the contributor's page][contributors].\n\n## We have got some Hass.io add-ons for you\n\nWant some more functionality to your Hass.io Home Assistant instance?\n\nWe have created multiple add-ons for Hass.io. For a full list, check out\nour [GitHub Repository][repository].\n\n## License\n\nMIT License\n\nCopyright (c) 2018-2020 Franck Nijhof \\\nCopyright (c) 2020 Andrey \"Limych\" Khrolenok\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n[commits-shield]: https://img.shields.io/github/commit-activity/y/Limych/repository-updater.svg\n[commits]: https://github.com/Limych/repository-updater/commits/master\n[contributors]: https://github.com/Limych/repository-updater/graphs/contributors\n[forum-shield]: https://img.shields.io/badge/community-forum-brightgreen.svg\n[forum]: https://community.home-assistant.io\n[frenck]: https://github.com/frenck\n[limych]: https://github.com/Limych\n[issue]: https://github.com/Limych/repository-updater/issues\n[keepchangelog]: http://keepachangelog.com/en/1.0.0/\n[license-shield]: https://img.shields.io/github/license/Limych/repository-updater.svg\n[maintenance-shield]: https://img.shields.io/maintenance/yes/2020.svg\n[project-stage-shield]: https://img.shields.io/badge/project%20stage-experimental-yellow.svg\n[pypi-shield]: https://img.shields.io/pypi/v/hassio-repo-updater.svg\n[pypi]: https://pypi.org/project/hassio-repo-updater\n[releases]: https://img.shields.io/github/tag-date/Limych/repository-updater?label=release\n[repository]: https://github.com/Limych/repository\n[semver]: http://semver.org/spec/v2.0.0.html\n[token]: https://help.github.com/articles/creating-a-personal-access-token-for-the-command-line/", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://github.com/Limych/repository-updater/archive/0.4.2.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Limych/repository-updater", "keywords": "hassio,hass.io,addons,repository,home assistant,home-assistant,add-ons,limych", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "hassio-repo-updater", "package_url": "https://pypi.org/project/hassio-repo-updater/", "platform": "any", "project_url": "https://pypi.org/project/hassio-repo-updater/", "project_urls": {"Download": "https://github.com/Limych/repository-updater/archive/0.4.2.tar.gz", "Homepage": "https://github.com/Limych/repository-updater"}, "release_url": "https://pypi.org/project/hassio-repo-updater/0.4.2/", "requires_dist": null, "requires_python": "", "summary": "", "version": "0.4.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Community Hass.io Add-ons Repository Updater</h1>\n<p><a href=\"https://pypi.org/project/hassio-repo-updater\" rel=\"nofollow\"><img alt=\"PyPi Release\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b03c31dc6c0684b4a61b15ac939597738bff5c48/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f68617373696f2d7265706f2d757064617465722e737667\"></a>\n<a href=\"https://github.com/Limych/repository-updater/commits/master\" rel=\"nofollow\"><img alt=\"GitHub Activity\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/afe20a75913ceb841bdf4920f3e44258e3fe2ee5/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f636f6d6d69742d61637469766974792f792f4c696d7963682f7265706f7369746f72792d757064617465722e737667\"></a>\n<a href=\"LICENSE.md\" rel=\"nofollow\"><img alt=\"License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8499b91135f7fede612254d84877f68260bc24b7/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f4c696d7963682f7265706f7369746f72792d757064617465722e737667\"></a></p>\n<p><img alt=\"Project Stage\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fca3fc6625615d4382062eb44634a5be3e28f5a3/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f70726f6a65637425323073746167652d6578706572696d656e74616c2d79656c6c6f772e737667\">\n<img alt=\"Project Maintenance\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/bca9848d2e88f32d30644f64c783b3e5a5c161ed/68747470733a2f2f696d672e736869656c64732e696f2f6d61696e74656e616e63652f7965732f323032302e737667\"></p>\n<p><a href=\"https://community.home-assistant.io\" rel=\"nofollow\"><img alt=\"Community Forum\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/260fe92169bd639f35cdc11eab4d1e18103edc94/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f6d6d756e6974792d666f72756d2d627269676874677265656e2e737667\"></a></p>\n<h2>About</h2>\n<p>Reads remote add-on repositories, determines versions and generates\nchangelogs to update the add-on repository fully automated.</p>\n<p>Mainly used by the Community Hass.io add-ons project.</p>\n<p>Please note, this program cannot be used with the general documented\nHass.io add-on repository approach and only works in the setup where\neach add-on has its own GitHub repository.</p>\n<h2>Installation</h2>\n<p>Using pip, the Python package manager:</p>\n<pre>pip install hassio-repo-updater\n</pre>\n<h2>Usage</h2>\n<p>The Repository Updater is a pretty simple, straightforward CLI tool.</p>\n<pre>Usage: repository-updater [OPTIONS]\n\n  Community Hass.io Add-ons Repository Updater.\n\nOptions:\n  --token &lt;TOKEN&gt;                 GitHub access token\n  --repository &lt;orgname/reponame&gt;\n                                  The Hassio Addons repository to update\n  --addon &lt;TARGET&gt;                Update a single/specific add-on\n  --force                         Force an update of the add-on repository\n  --dryrun, --dry-run, --simulate\n                                  Do everything which is supposed to be done,\n                                  but don't write any changes. This is used to\n                                  see what would happen with the specified\n                                  action, without actually modifying anything.\n  --version                       Show the version and exit.\n  --help                          Show this message and exit.\n</pre>\n<p>To get a GitHub token, please see the GitHub article: <a href=\"https://help.github.com/articles/creating-a-personal-access-token-for-the-command-line/\" rel=\"nofollow\">Create a token</a></p>\n\n<h2>Add-ons Repository Configuration</h2>\n<p>In order for the Repository Updater to do its job, we need feed it some\ninformation. It needs to know which add-ons there are currently in the\nadd-ons repository and where each add-on is located on GitHub.</p>\n<p>Secondly, it needs to know the stability channel of the add-ons repository.\nThere are 3 stability channel levels available:</p>\n<ul>\n<li><strong>stable</strong>: Stable releases</li>\n<li><strong>beta</strong>: Beta / test releases</li>\n<li><strong>edge</strong>: Latest builds, usually build straight from development</li>\n</ul>\n<p>Create a <code>.hassio-addons.yml</code> file in the root of the add-ons repository,\nwhich looks like this:</p>\n<pre><span class=\"nt\">channel</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">edge</span>\n<span class=\"nt\">addons</span><span class=\"p\">:</span>\n  <span class=\"nt\">example</span><span class=\"p\">:</span>\n    <span class=\"nt\">repository</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">hassio-addons/addon-example</span>\n    <span class=\"nt\">target</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">example</span>\n    <span class=\"nt\">image</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">hassioaddons/example-{arch}</span>\n  <span class=\"nt\">homebridge</span><span class=\"p\">:</span>\n    <span class=\"nt\">repository</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">hassio-addons/addon-homebridge</span>\n    <span class=\"nt\">target</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">homebridge</span>\n    <span class=\"nt\">image</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">hassioaddons/homebridge-{arch}</span>\n  <span class=\"nt\">pihole</span><span class=\"p\">:</span>\n    <span class=\"nt\">repository</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">hassio-addons/addon-pi-hole</span>\n    <span class=\"nt\">target</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">pi-hole</span>\n    <span class=\"nt\">image</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">hassioaddons/pi-hole-{arch}</span>\n    <span class=\"nt\">channels</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">beta, stable</span>\n</pre>\n<p>The target in the add-ons repository is specified as the key for each add-on,\nthis will be the directory name inside the add-ons repository as well. This is\ndifferent from the <code>target</code> key, in a way that that key specified the add-on\ntarget directory inside the git repository of the add-on itself.</p>\n<p>In the above example, <code>pihole</code> will be the name of the add-on directory\ninside the add-ons repository, while <code>pi-hole</code> is the directory in the add-on\ngit repo that contains the actual add-on.</p>\n<p><code>repository</code> specified the location of the add-on on GitHub. This must be\nin <code>organization/repository</code> or <code>username/repository</code> format.</p>\n<p>The <code>image</code> key defines the Docker container images on Docker Hub\nfor this add-on. <code>{arch}</code> can be used as a placeholder for the architecture and\nis automatically replaced internally by the Repository Updater.</p>\n<p>Finally, you can add individual <code>channels</code> key for each add-on. This allows you\nto store several versions of add-ons in one repository at once. This way is\nconvenient if you have your own repository with a small number of add-ons.</p>\n<h2>Add-ons Repository README template</h2>\n<p>It is nice to have an up to date <code>README.md</code> file in your add-ons repository,\nbut maintaining one, can be quite time-consuming. The Repository updater is\nable to update the <code>README.md</code> file for you each run.</p>\n<p>This is done using a Jinja2 template. Simply create a file called <code>.README.j2</code>\nin the root of your add-ons repository. Most information is collected\nfrom the add-on <code>config.json</code> and GitHub repo.</p>\n<p>The following variables are available in your templates and are passed into it\nupon rendering your template.</p>\n<ul>\n<li><strong>addons</strong>: A list of add-ons in this add-ons repository</li>\n<li><strong>channel</strong>: The channel type of this add-ons repository</li>\n<li><strong>description</strong>: The GitHub add-ons repository description</li>\n<li><strong>homepage</strong>: The GitHub add-ons repository specified homepage URL</li>\n<li><strong>issues</strong>: The URL to the issues listing of the GitHub add-ons repository</li>\n<li><strong>name</strong>: The full GitHub name, e.g., <code>hassio-addons/repository</code></li>\n<li><strong>repo</strong>: The full URL to the GitHub add-ons repository</li>\n</ul>\n<p>In the above variables, a list of <code>addons</code> was specified. Each item in this\nlist contains the following variables:</p>\n<ul>\n<li><strong>name</strong>: Name of the add-on</li>\n<li><strong>description</strong>: Description of the add-on</li>\n<li><strong>url</strong>: URL of the add-on</li>\n<li><strong>repo</strong>: URL to the add-on GitHub repo</li>\n<li><strong>archs</strong>: List of supported architectures by this add-on</li>\n<li><strong>slug</strong>: The add-on slug</li>\n<li><strong>target</strong>: The target directory of the add-on inside the add-ons repository</li>\n<li><strong>image</strong>: The (untouched) Docker Hub container image name</li>\n<li><strong>images</strong>: Dictionary of images per architecture\n<ul>\n<li><strong>aarch64</strong>: <code>aarch64</code> DockerHub image (if arch is supported)</li>\n<li><strong>amd64</strong>: <code>amd64</code> DockerHub image (if arch is supported)</li>\n<li><strong>armhf</strong>: <code>armhf</code> DockerHub image (if arch is supported)</li>\n<li><strong>i386</strong>: <code>i386</code> DockerHub image (if arch is supported)</li>\n</ul>\n</li>\n<li><strong>version</strong>: The version of the add-on</li>\n<li><strong>commit</strong>: Full SHA of the commit bound to the current version</li>\n<li><strong>date</strong>: Date and time of the above commit/version</li>\n</ul>\n<h2>Examples</h2>\n<p>It is quite a complex setup to create an example for in this little document.\nNevertheless, see the <a href=\"https://github.com/Limych/repository\" rel=\"nofollow\">Community Hass.io Addons Repository</a> for an\nexample of <code>.README.j2</code> and <code>.hassio-addons.yml</code> files.</p>\n<p>The community project also uses GitLab for building its add-ons. Each\nadd-on runs this tool upon build, ensuring the repositories are always up to\ndate. Be sure to check some of the add-ons out as well to learn more about\nthe whole setup.</p>\n<h2>Why do this all</h2>\n<p>Let me start by saying, there is nothing wrong with the documented way of\nsetting up a Hass.io add-ons repository. If you are just starting out developing\nadd-ons, please use the official documented way. You can always decide to\nchange your workflow.</p>\n<p>Nevertheless, there are some advantages using the alternative method:</p>\n<ul>\n<li>Each add-on has its own Git repository, which allows for a maximum separation\nof concerns. Each add-on has its own issue list, releases, and all other\nGitHub goodness.</li>\n<li>Release and versioning is based on GitHub Releases / Git tagging. Which\ndoes not need updating of configuration files and is done with a single click.</li>\n<li>Each add-on Git repository is downloadable and instantly buildable locally.</li>\n<li>Every single piece of manual labor around maintaining an add-ons repository\nis fully automated. Building, testing, quality control, publishing, changelogs\nand even the add-ons repository README are updated automatically.  This level\nof automation allows us to focus completely on developing the actual add-on.</li>\n<li>Availability of Beta and Edge channels for everyone who's interested or\nwilling to test.</li>\n</ul>\n<h2>Known issues and limitations</h2>\n<ul>\n<li>Any kind of testing... is missing...</li>\n</ul>\n<h2>Changelog &amp; Releases</h2>\n<p>This repository keeps a change log using <a href=\"https://img.shields.io/github/tag-date/Limych/repository-updater?label=release\" rel=\"nofollow\">GitHub's releases</a>\nfunctionality. The format of the log is based on\n<a href=\"http://keepachangelog.com/en/1.0.0/\" rel=\"nofollow\">Keep a Changelog</a>.</p>\n<p>Releases are based on <a href=\"http://semver.org/spec/v2.0.0.html\" rel=\"nofollow\">Semantic Versioning</a>, and use the format\nof <code>MAJOR.MINOR.PATCH</code>. In a nutshell, the version will be incremented\nbased on the following:</p>\n<ul>\n<li><code>MAJOR</code>: Incompatible or major changes.</li>\n<li><code>MINOR</code>: Backwards-compatible new features and enhancements.</li>\n<li><code>PATCH</code>: Backwards-compatible bugfixes and package updates.</li>\n</ul>\n<h2>Support</h2>\n<p>Got questions?</p>\n<p>You have several options to get them answered:</p>\n<ul>\n<li>The Home Assistant <a href=\"https://community.home-assistant.io\" rel=\"nofollow\">Community Forum</a>.</li>\n</ul>\n<p>You could also <a href=\"https://github.com/Limych/repository-updater/issues\" rel=\"nofollow\">open an issue here</a> GitHub.</p>\n<h2>Contributing</h2>\n<p>This is an active open-source project. We are always open to people who want to\nuse the code or contribute to it.</p>\n<p>We have set up a separate document containing our\n<a href=\"CONTRIBUTING.md\" rel=\"nofollow\">contribution guidelines</a>.</p>\n<p>Thank you for being involved! :heart_eyes:</p>\n<h2>Authors &amp; contributors</h2>\n<p>The original setup of this repository is by <a href=\"https://github.com/frenck\" rel=\"nofollow\">Franck Nijhof</a> with major\nmodifications by <a href=\"https://github.com/Limych\" rel=\"nofollow\">Andrey \"Limych\" Khrolenok</a>.</p>\n<p>For a full list of all authors and contributors,\ncheck <a href=\"https://github.com/Limych/repository-updater/graphs/contributors\" rel=\"nofollow\">the contributor's page</a>.</p>\n<h2>We have got some Hass.io add-ons for you</h2>\n<p>Want some more functionality to your Hass.io Home Assistant instance?</p>\n<p>We have created multiple add-ons for Hass.io. For a full list, check out\nour <a href=\"https://github.com/Limych/repository\" rel=\"nofollow\">GitHub Repository</a>.</p>\n<h2>License</h2>\n<p>MIT License</p>\n<p>Copyright (c) 2018-2020 Franck Nijhof <br>\nCopyright (c) 2020 Andrey \"Limych\" Khrolenok</p>\n<p>Permission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:</p>\n<p>The above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.</p>\n<p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.</p>\n\n          </div>"}, "last_serial": 6530241, "releases": {"0.4.0": [{"comment_text": "", "digests": {"md5": "c722c84db83a3aa25097580d247e09a2", "sha256": "6cadcc9bf80c6a17789c1d6d90cede47830c48dd9d6d91e48b9169340aa918fc"}, "downloads": -1, "filename": "hassio-repo-updater-0.4.0.tar.gz", "has_sig": false, "md5_digest": "c722c84db83a3aa25097580d247e09a2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15226, "upload_time": "2020-01-28T03:00:30", "upload_time_iso_8601": "2020-01-28T03:00:30.224787Z", "url": "https://files.pythonhosted.org/packages/97/1f/177d42ade740bfee8a17ed04114ebe14d2c44e9bc7edaa7d98d13bab3717/hassio-repo-updater-0.4.0.tar.gz", "yanked": false}], "0.4.1": [{"comment_text": "", "digests": {"md5": "ad22429b25a8bd972a3e19283ee3fc55", "sha256": "9f806b6074d31e31ea666a3001b88d31d522f036187ea54b2abd58042f666dd6"}, "downloads": -1, "filename": "hassio-repo-updater-0.4.1.tar.gz", "has_sig": false, "md5_digest": "ad22429b25a8bd972a3e19283ee3fc55", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15330, "upload_time": "2020-01-28T04:08:01", "upload_time_iso_8601": "2020-01-28T04:08:01.458138Z", "url": "https://files.pythonhosted.org/packages/3b/ad/627a438ce2ca092282373b3805ebf15f32bb5fc761f77f0037b463d6528a/hassio-repo-updater-0.4.1.tar.gz", "yanked": false}], "0.4.2": [{"comment_text": "", "digests": {"md5": "167556952a2e16d08e31246c83bc0f93", "sha256": "54e7a7afec9f38500c068cfcf6d8aacaa6fbd41c874117b715dc0d56cdc7b399"}, "downloads": -1, "filename": "hassio-repo-updater-0.4.2.tar.gz", "has_sig": false, "md5_digest": "167556952a2e16d08e31246c83bc0f93", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15446, "upload_time": "2020-01-28T04:43:29", "upload_time_iso_8601": "2020-01-28T04:43:29.482620Z", "url": "https://files.pythonhosted.org/packages/c4/fb/86910e5e4713a41ee79b75405a1581781cb3e96d4c6e7e4e121bfd06d147/hassio-repo-updater-0.4.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "167556952a2e16d08e31246c83bc0f93", "sha256": "54e7a7afec9f38500c068cfcf6d8aacaa6fbd41c874117b715dc0d56cdc7b399"}, "downloads": -1, "filename": "hassio-repo-updater-0.4.2.tar.gz", "has_sig": false, "md5_digest": "167556952a2e16d08e31246c83bc0f93", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15446, "upload_time": "2020-01-28T04:43:29", "upload_time_iso_8601": "2020-01-28T04:43:29.482620Z", "url": "https://files.pythonhosted.org/packages/c4/fb/86910e5e4713a41ee79b75405a1581781cb3e96d4c6e7e4e121bfd06d147/hassio-repo-updater-0.4.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:52:19 2020"}