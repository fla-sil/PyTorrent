{"info": {"author": "Bogdan Vukobratovic", "author_email": "bogdan.vukobratovic@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3.6", "Topic :: Scientific/Engineering :: Electronic Design Automation (EDA)"], "description": "Welcome to PyGears \n==================\n\nHW Design: A Functional Approach\n---------------------------------\n\n**PyGears** is an ambitious attempt to create a Python framework that facilitates describing digital hardware. It aims to augment current RTL methodology to drastically increase **composability** of hardware modules. Ease of composition leads to better **reusability**, since modules that compose better can be used in a wider variety of contexts. Set of reusable components can then form a well-tested and documented library that significantly speeds up the development process.  \n\nFor a guide through **PyGears** methodology, checkout `blog series on implementing RISC-V in PyGears <https://www.pygears.org/blog/riscv/introduction.html>`_. \n\nFor an introductory **PyGears** example, checkout `echo <https://www.pygears.org/echo.html#echo-examples>`_. A snippet is given below: \n\n.. code-block:: python\n\n  @gear\n  def echo(samples: Int, *, fifo_depth, feedback_gain, precision):\n      dout = Intf(din.dtype)\n\n      feedback = dout \\\n          | fifo(depth=fifo_depth, threshold=fifo_depth - 1) \\\n          | fill_void(fill=Int[16](0)) \\\n          | decoupler\n\n      feedback_attenuated = (feedback * feedback_gain) >> precision\n\n      dout |= (din + feedback_attenuated) | dout.dtype\n\n      return dout\n\n**PyGears** proposes a single generic interface for all modules (`read about the hardware implementation of the interface here <https://www.pygears.org/gears.html#gears-interface>`_) and provides a way to use powerful features of Python language to compose modules written in an existing HDL (currently only supports SystemVerilog). Based on the Python description, **PyGears** generates functionally equivalent, synthetizable RTL code.\n\nFurthermore, **PyGears** offers a way to write verification environment in high-level Python language and co-simulate the generated RTL with an external HDL simulator. **PyGears** features a completely free solution using `Verilator <http://www.veripool.org/wiki/verilator>`_ simulator and standard SystemVerilog simulators via the `DPI <https://en.wikipedia.org/wiki/SystemVerilog_DPI>`_ (tested on proprietary Questa and NCSim simulators).\n\n**PyGears** also features a `library of standard modules <https://github.com/bogdanvuk/pygears/tree/master/pygears/common>`_ and the `cookbook library <https://github.com/bogdanvuk/pygears/tree/master/pygears/cookbook>`_ that are ready to be used in a **PyGears** design.\n\nIn **PyGears**, each HDL module is considered a Python function, called the *gear*, hence the design is described in form of a functional (gear) composition. In order for HDL modules to be composable in this way, they need to be designed in accordance with the **Gears** methodology. You should probably `read a short intro to Gears <https://www.pygears.org/gears.html#gears-introduction-to-gears>`_ in order to understand this project from the hardware perspective.\n\n**PyGears** supports also the hierarchical gears which do not have a HDL implementation, but are defined in terms of other gears. Each gear accepts and returns interface objects as arguments, which represents module connections. This allows for a module composition to be described in terms of powerful functional concepts, such as: partial application, higher-order functions, function polymorphism.\n\n**PyGears** features a powerful system of `generic types <https://www.pygears.org/typing.html#typing>`_, which allows for generic modules to be described, as well as to perform type checking of the gear composition.\n\nInstallation Instructions\n-------------------------\n\nFor the instruction checkout `Installation <https://www.pygears.org/install.html#install>`_ page.\n\nRead the documentation\n----------------------\n\n`PyGears documentation <https://www.pygears.org/>`_\n\nCheckout the examples\n---------------------\n\n`Echo <https://www.pygears.org/echo.html#echo-examples>`_: Hardware module that applies echo audio effect to a continuous audio stream.\n\n`RISC-V processor <https://github.com/bogdanvuk/pygears_riscv>`__: **PyGears** implementation. Checkout also the `RISC-V implementation blog series <https://www.pygears.org/blog/riscv/introduction.html>`_.\n\n`Tests <https://github.com/bogdanvuk/pygears/tree/master/tests>`_: Contain many examples on how individual **PyGears** components operate\n\n`Library of standard modules <https://github.com/bogdanvuk/pygears/tree/master/pygears/common>`_\n\n`Cookbook library <https://github.com/bogdanvuk/pygears/tree/master/pygears/cookbook>`_\n\nReferences\n----------\n\n- `Kortiq's <http://www.kortiq.com/>`_ AIScale Deep Learning Processor was completely developed using **PyGears**\n\nContributions\n=============\n\nSpecial thanks to the people that helped develop this framework:\n\n- Andrea Erdeljan\n- Damjan Rakanovi\u0107\n- Nemanja Kajtez\n- Risto Peja\u0161inovi\u0107\n- Stefan Tambur\n- Vladimir Niki\u0107\n- Vladimir Vrba\u0161ki\n\nIn order to contribute, pull your copy from `github repository <https://github.com/bogdanvuk/pygears>`_ and create a pull request.\n\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://www.pygears.org", "keywords": "functional hardware design Python simulator HDL ASIC FPGA Gears", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "pygears", "package_url": "https://pypi.org/project/pygears/", "platform": "", "project_url": "https://pypi.org/project/pygears/", "project_urls": {"Homepage": "https://www.pygears.org"}, "release_url": "https://pypi.org/project/pygears/0.1.2/", "requires_dist": ["jinja2 (>=2.10)", "pygears-tools"], "requires_python": ">=3.6.0", "summary": "Framework for functional hardware design approach", "version": "0.1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"welcome-to-pygears\">\n<h2>Welcome to PyGears</h2>\n<div id=\"hw-design-a-functional-approach\">\n<h3>HW Design: A Functional Approach</h3>\n<p><strong>PyGears</strong> is an ambitious attempt to create a Python framework that facilitates describing digital hardware. It aims to augment current RTL methodology to drastically increase <strong>composability</strong> of hardware modules. Ease of composition leads to better <strong>reusability</strong>, since modules that compose better can be used in a wider variety of contexts. Set of reusable components can then form a well-tested and documented library that significantly speeds up the development process.</p>\n<p>For a guide through <strong>PyGears</strong> methodology, checkout <a href=\"https://www.pygears.org/blog/riscv/introduction.html\" rel=\"nofollow\">blog series on implementing RISC-V in PyGears</a>.</p>\n<p>For an introductory <strong>PyGears</strong> example, checkout <a href=\"https://www.pygears.org/echo.html#echo-examples\" rel=\"nofollow\">echo</a>. A snippet is given below:</p>\n<pre><span class=\"nd\">@gear</span>\n<span class=\"k\">def</span> <span class=\"nf\">echo</span><span class=\"p\">(</span><span class=\"n\">samples</span><span class=\"p\">:</span> <span class=\"n\">Int</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"p\">,</span> <span class=\"n\">fifo_depth</span><span class=\"p\">,</span> <span class=\"n\">feedback_gain</span><span class=\"p\">,</span> <span class=\"n\">precision</span><span class=\"p\">):</span>\n    <span class=\"n\">dout</span> <span class=\"o\">=</span> <span class=\"n\">Intf</span><span class=\"p\">(</span><span class=\"n\">din</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">)</span>\n\n    <span class=\"n\">feedback</span> <span class=\"o\">=</span> <span class=\"n\">dout</span> \\\n        <span class=\"o\">|</span> <span class=\"n\">fifo</span><span class=\"p\">(</span><span class=\"n\">depth</span><span class=\"o\">=</span><span class=\"n\">fifo_depth</span><span class=\"p\">,</span> <span class=\"n\">threshold</span><span class=\"o\">=</span><span class=\"n\">fifo_depth</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span> \\\n        <span class=\"o\">|</span> <span class=\"n\">fill_void</span><span class=\"p\">(</span><span class=\"n\">fill</span><span class=\"o\">=</span><span class=\"n\">Int</span><span class=\"p\">[</span><span class=\"mi\">16</span><span class=\"p\">](</span><span class=\"mi\">0</span><span class=\"p\">))</span> \\\n        <span class=\"o\">|</span> <span class=\"n\">decoupler</span>\n\n    <span class=\"n\">feedback_attenuated</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">feedback</span> <span class=\"o\">*</span> <span class=\"n\">feedback_gain</span><span class=\"p\">)</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">precision</span>\n\n    <span class=\"n\">dout</span> <span class=\"o\">|=</span> <span class=\"p\">(</span><span class=\"n\">din</span> <span class=\"o\">+</span> <span class=\"n\">feedback_attenuated</span><span class=\"p\">)</span> <span class=\"o\">|</span> <span class=\"n\">dout</span><span class=\"o\">.</span><span class=\"n\">dtype</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">dout</span>\n</pre>\n<p><strong>PyGears</strong> proposes a single generic interface for all modules (<a href=\"https://www.pygears.org/gears.html#gears-interface\" rel=\"nofollow\">read about the hardware implementation of the interface here</a>) and provides a way to use powerful features of Python language to compose modules written in an existing HDL (currently only supports SystemVerilog). Based on the Python description, <strong>PyGears</strong> generates functionally equivalent, synthetizable RTL code.</p>\n<p>Furthermore, <strong>PyGears</strong> offers a way to write verification environment in high-level Python language and co-simulate the generated RTL with an external HDL simulator. <strong>PyGears</strong> features a completely free solution using <a href=\"http://www.veripool.org/wiki/verilator\" rel=\"nofollow\">Verilator</a> simulator and standard SystemVerilog simulators via the <a href=\"https://en.wikipedia.org/wiki/SystemVerilog_DPI\" rel=\"nofollow\">DPI</a> (tested on proprietary Questa and NCSim simulators).</p>\n<p><strong>PyGears</strong> also features a <a href=\"https://github.com/bogdanvuk/pygears/tree/master/pygears/common\" rel=\"nofollow\">library of standard modules</a> and the <a href=\"https://github.com/bogdanvuk/pygears/tree/master/pygears/cookbook\" rel=\"nofollow\">cookbook library</a> that are ready to be used in a <strong>PyGears</strong> design.</p>\n<p>In <strong>PyGears</strong>, each HDL module is considered a Python function, called the <em>gear</em>, hence the design is described in form of a functional (gear) composition. In order for HDL modules to be composable in this way, they need to be designed in accordance with the <strong>Gears</strong> methodology. You should probably <a href=\"https://www.pygears.org/gears.html#gears-introduction-to-gears\" rel=\"nofollow\">read a short intro to Gears</a> in order to understand this project from the hardware perspective.</p>\n<p><strong>PyGears</strong> supports also the hierarchical gears which do not have a HDL implementation, but are defined in terms of other gears. Each gear accepts and returns interface objects as arguments, which represents module connections. This allows for a module composition to be described in terms of powerful functional concepts, such as: partial application, higher-order functions, function polymorphism.</p>\n<p><strong>PyGears</strong> features a powerful system of <a href=\"https://www.pygears.org/typing.html#typing\" rel=\"nofollow\">generic types</a>, which allows for generic modules to be described, as well as to perform type checking of the gear composition.</p>\n</div>\n<div id=\"installation-instructions\">\n<h3>Installation Instructions</h3>\n<p>For the instruction checkout <a href=\"https://www.pygears.org/install.html#install\" rel=\"nofollow\">Installation</a> page.</p>\n</div>\n<div id=\"read-the-documentation\">\n<h3>Read the documentation</h3>\n<p><a href=\"https://www.pygears.org/\" rel=\"nofollow\">PyGears documentation</a></p>\n</div>\n<div id=\"checkout-the-examples\">\n<h3>Checkout the examples</h3>\n<p><a href=\"https://www.pygears.org/echo.html#echo-examples\" rel=\"nofollow\">Echo</a>: Hardware module that applies echo audio effect to a continuous audio stream.</p>\n<p><a href=\"https://github.com/bogdanvuk/pygears_riscv\" rel=\"nofollow\">RISC-V processor</a>: <strong>PyGears</strong> implementation. Checkout also the <a href=\"https://www.pygears.org/blog/riscv/introduction.html\" rel=\"nofollow\">RISC-V implementation blog series</a>.</p>\n<p><a href=\"https://github.com/bogdanvuk/pygears/tree/master/tests\" rel=\"nofollow\">Tests</a>: Contain many examples on how individual <strong>PyGears</strong> components operate</p>\n<p><a href=\"https://github.com/bogdanvuk/pygears/tree/master/pygears/common\" rel=\"nofollow\">Library of standard modules</a></p>\n<p><a href=\"https://github.com/bogdanvuk/pygears/tree/master/pygears/cookbook\" rel=\"nofollow\">Cookbook library</a></p>\n</div>\n<div id=\"references\">\n<h3>References</h3>\n<ul>\n<li><a href=\"http://www.kortiq.com/\" rel=\"nofollow\">Kortiq\u2019s</a> AIScale Deep Learning Processor was completely developed using <strong>PyGears</strong></li>\n</ul>\n</div>\n</div>\n<div id=\"contributions\">\n<h2>Contributions</h2>\n<p>Special thanks to the people that helped develop this framework:</p>\n<ul>\n<li>Andrea Erdeljan</li>\n<li>Damjan Rakanovi\u0107</li>\n<li>Nemanja Kajtez</li>\n<li>Risto Peja\u0161inovi\u0107</li>\n<li>Stefan Tambur</li>\n<li>Vladimir Niki\u0107</li>\n<li>Vladimir Vrba\u0161ki</li>\n</ul>\n<p>In order to contribute, pull your copy from <a href=\"https://github.com/bogdanvuk/pygears\" rel=\"nofollow\">github repository</a> and create a pull request.</p>\n</div>\n\n          </div>"}, "last_serial": 4425301, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "d11b343fc2cbc7386901bd1514f883ed", "sha256": "ddd25e7af93ccc42ad3922fbefa3c613c5b9a2850d5489db6448ab31cdbbf58d"}, "downloads": -1, "filename": "pygears-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "d11b343fc2cbc7386901bd1514f883ed", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 181927, "upload_time": "2018-09-05T17:48:32", "upload_time_iso_8601": "2018-09-05T17:48:32.366004Z", "url": "https://files.pythonhosted.org/packages/9a/73/32ab18beb16e86d420702f6d6049b41fa0bd7014b0e968c1827a27a9017c/pygears-0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0aee922e55e54c204799a1f58272ea75", "sha256": "2bf11874c353ec6edb8b718f4b224d8ae76ac03a0b272333cd4dc45fcfc3d732"}, "downloads": -1, "filename": "pygears-0.1.tar.gz", "has_sig": false, "md5_digest": "0aee922e55e54c204799a1f58272ea75", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 90391, "upload_time": "2018-09-05T17:48:34", "upload_time_iso_8601": "2018-09-05T17:48:34.822088Z", "url": "https://files.pythonhosted.org/packages/0e/91/bfe4f0ea15e65af6b4b91b3c8086162338c2db1d7a3778197e7bd990be71/pygears-0.1.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "5d1ab1eae4cf2e9cf54b697fa850615a", "sha256": "f4a1d4c60c976afd3a8553a783149ca48d82fa6c1a349c8a4f4bb9281eade871"}, "downloads": -1, "filename": "pygears-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "5d1ab1eae4cf2e9cf54b697fa850615a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 201669, "upload_time": "2018-10-07T11:41:00", "upload_time_iso_8601": "2018-10-07T11:41:00.530673Z", "url": "https://files.pythonhosted.org/packages/cd/e7/825ccd678ed1d8f22d10cdc12855c5bf0822b20e1161711890d92efaa421/pygears-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5796cbe114e9c139bcf1d9671fd97a66", "sha256": "3b7cb1520ef7ea63d1442c7d85e9095cca6b74038904be79e8649ebd5f6a2d55"}, "downloads": -1, "filename": "pygears-0.1.1.tar.gz", "has_sig": false, "md5_digest": "5796cbe114e9c139bcf1d9671fd97a66", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 101442, "upload_time": "2018-10-07T11:41:02", "upload_time_iso_8601": "2018-10-07T11:41:02.675539Z", "url": "https://files.pythonhosted.org/packages/ec/c2/fccaa328fa4a72aa46b2599d3a9fcb87d520cd143990ac42a4911df4de63/pygears-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "b3f855320d24a1094f3777a0949fa7df", "sha256": "0a8cf1d01e1337d771c571cd9298841f8f3bb50f1bc7d1477747ae51ca856e01"}, "downloads": -1, "filename": "pygears-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "b3f855320d24a1094f3777a0949fa7df", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 209440, "upload_time": "2018-10-28T21:18:48", "upload_time_iso_8601": "2018-10-28T21:18:48.390213Z", "url": "https://files.pythonhosted.org/packages/a1/03/730e8f9ffa4c3cc65e8fe9ddcb55789bd5598a972e0162721726a08a0a08/pygears-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b67ae3ff25fffc0e2ced2b4f89376790", "sha256": "dce8cf537533476f2f5cc6a53049c3c7a091211f619cb205627a685fb02b82f9"}, "downloads": -1, "filename": "pygears-0.1.2.tar.gz", "has_sig": false, "md5_digest": "b67ae3ff25fffc0e2ced2b4f89376790", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 109048, "upload_time": "2018-10-28T21:18:50", "upload_time_iso_8601": "2018-10-28T21:18:50.796493Z", "url": "https://files.pythonhosted.org/packages/4e/21/8dbe5bddd00828dcf4e5a12a9a18cab4a2cecf9deb3f13519a283b25f9bd/pygears-0.1.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b3f855320d24a1094f3777a0949fa7df", "sha256": "0a8cf1d01e1337d771c571cd9298841f8f3bb50f1bc7d1477747ae51ca856e01"}, "downloads": -1, "filename": "pygears-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "b3f855320d24a1094f3777a0949fa7df", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 209440, "upload_time": "2018-10-28T21:18:48", "upload_time_iso_8601": "2018-10-28T21:18:48.390213Z", "url": "https://files.pythonhosted.org/packages/a1/03/730e8f9ffa4c3cc65e8fe9ddcb55789bd5598a972e0162721726a08a0a08/pygears-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b67ae3ff25fffc0e2ced2b4f89376790", "sha256": "dce8cf537533476f2f5cc6a53049c3c7a091211f619cb205627a685fb02b82f9"}, "downloads": -1, "filename": "pygears-0.1.2.tar.gz", "has_sig": false, "md5_digest": "b67ae3ff25fffc0e2ced2b4f89376790", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 109048, "upload_time": "2018-10-28T21:18:50", "upload_time_iso_8601": "2018-10-28T21:18:50.796493Z", "url": "https://files.pythonhosted.org/packages/4e/21/8dbe5bddd00828dcf4e5a12a9a18cab4a2cecf9deb3f13519a283b25f9bd/pygears-0.1.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:05:12 2020"}