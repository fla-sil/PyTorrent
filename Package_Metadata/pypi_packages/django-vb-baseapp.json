{"info": {"author": "vb YAZILIM", "author_email": "hello@vbyazilim.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Web Environment", "Framework :: Django", "Framework :: Django :: 2.2", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3 :: Only", "Topic :: Internet :: WWW/HTTP", "Topic :: Internet :: WWW/HTTP :: Dynamic Content"], "description": "[![Build Status](https://travis-ci.org/vbyazilim/django-vb-baseapp.svg?branch=master)](https://travis-ci.org/vbyazilim/django-vb-baseapp)\n![Python](https://img.shields.io/badge/python-3.7.4-green.svg)\n![Django](https://img.shields.io/badge/django-2.2.8-green.svg)\n![Version](https://img.shields.io/badge/version-1.1.12-orange.svg)\n[![Codacy Badge](https://api.codacy.com/project/badge/Grade/4c6aa76f09fd437eb3888855fccc9604)](https://www.codacy.com/manual/vigo/django-vb-baseapp?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=vbyazilim/django-vb-baseapp&amp;utm_campaign=Badge_Grade)\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n\n# django-vb-baseapp\n\nThis is a helper app for https://github.com/vbyazilim/django-vb-admin\nand ships with while installation:\n\n```bash\n$ pip install django-vb-admin\n$ django-vb-admin -h\n```\n\nIt\u2019s also available on PyPI and available via:\n\n```bash\n$ pip install django-vb-baseapp\n```\n\n## Features\n\n- Two abstract custom base models: `CustomBaseModel` and `CustomBaseModelWithSoftDelete`\n- Two custom base model admins: `CustomBaseModelAdmin` and `CustomBaseModelAdminWithSoftDelete`\n- Soft deletion feature and admin actions for `CustomBaseModelAdminWithSoftDelete`\n- `pre_undelete` and `post_undelete` signals for **soft delete** operation\n- Pre enabled models admin site: `ContentTypeAdmin`, `LogEntryAdmin`, `PermissionAdmin`, `UserAdmin`\n- Timezone and locale middlewares\n- Onscreen debugging feature for views! (Template layer...)\n- Handy utils: `numerify`, `save_file`, `SlackExceptionHandler`\n- Fancy file widget: `AdminImageFileWidget` for `ImageField` on admin by default\n- `OverwriteStorage` for overwriting file uploads\n- Custom file storage for missing files for development environment: `FileNotFoundFileSystemStorage`\n- Custom and configurable error page views for: `400`, `403`, `404`, `500`\n- Custom management command with basic output feature `CustomBaseCommand`\n- Builtin `console`, `console.dir()` via `vb-console` [package][vb-console]\n- Simpler server logging for `runserver_plus`\n- This project uses [bulma.io][bulma.io] as HTML/CSS framework, ships with **jQuery** and **Fontawesome**\n\n---\n\n## Screenshots\n\n<table>\n    <tr>\n        <td><img src=\"https://github.com/vbyazilim/django-vb-baseapp/raw/master/screenshots/vb_baseapp-admin-changelist-1.png\" alt=\"Change list 1\"></td>\n        <td><img src=\"https://github.com/vbyazilim/django-vb-baseapp/raw/master/screenshots/vb_baseapp-admin-changelist-2.png\" alt=\"Change list 2\"></td>\n    </tr>\n    <tr>\n        <td><img src=\"https://github.com/vbyazilim/django-vb-baseapp/raw/master/screenshots/vb_baseapp-admin-change-form-1.png\" alt=\"Change form 1\"></td>\n        <td><img src=\"https://github.com/vbyazilim/django-vb-baseapp/raw/master/screenshots/vb_baseapp-admin-change-form-2.png\" alt=\"Change form 2\"></td>\n    </tr>\n</table>\n\n---\n\n## Tutorial\n\nLet\u2019s build a basic blog with categories and tags! First, create a virtual\nenvironment:\n\n```bash\n# via builtin\n$ python -m venv my_env\n$ source my_env/bin/activate\n\n# or via virtualenvwrapper\n$ mkvirtualenv my_env\n```\n\nNow, create a postgresql database;\n\n```bash\n$ createdb my_project_dev\n```\n\nNow set your environment variables:\n\n```bash\n$ export DJANGO_SECRET=$(head -c 75 /dev/random | base64 | tr -dc 'a-zA-Z0-9' | head -c 50)\n$ export DATABASE_URL=\"postgres://localhost:5432/my_project_dev\"\n```\n\nEdit `my_env/bin/activate` or `~/.virtualenvs/my_env/bin/postactivate`\n(*according to your virtualenv creation procedure*) and put these export\nvariables in it. Will be handy next time you activate the environment. Now;\n\n```bash\n$ pip install django-vb-admin\n$ cd /path/to/my-django-project\n$ django-vb-admin startproject\n# or\n$ django-vb-admin startproject --target=\"/path/to/folder\"\n```\n\nYou\u2019ll see:\n\n```bash\nSetup completed...\nNow, create your virtual environment and run\n\n\tpip install -r requirements/development.pip\n\n```\n\nmessage. Now;\n\n```bash\n$ pip install -r requirements/development.pip\n$ python manage.py migrate\nOperations to perform:\n  Apply all migrations: admin, auth, contenttypes, sessions\nRunning migrations:\n  Applying contenttypes.0001_initial... OK\n  Applying auth.0001_initial... OK\n  Applying admin.0001_initial... OK\n  Applying admin.0002_logentry_remove_auto_add... OK\n  Applying admin.0003_logentry_add_action_flag_choices... OK\n  Applying contenttypes.0002_remove_content_type_name... OK\n  Applying auth.0002_alter_permission_name_max_length... OK\n  Applying auth.0003_alter_user_email_max_length... OK\n  Applying auth.0004_alter_user_username_opts... OK\n  Applying auth.0005_alter_user_last_login_null... OK\n  Applying auth.0006_require_contenttypes_0002... OK\n  Applying auth.0007_alter_validators_add_error_messages... OK\n  Applying auth.0008_alter_user_username_max_length... OK\n  Applying auth.0009_alter_user_last_name_max_length... OK\n  Applying auth.0010_alter_group_name_max_length... OK\n  Applying auth.0011_update_proxy_permissions... OK\n  Applying sessions.0001_initial... OK\n```\n\nNow, we have a ready Django project. Let\u2019s check;\n\n```bash\n$ python manage.py runserver_plus\n\n# or\n\n$ rake\n\nINFO |  * Running on http://127.0.0.1:8000/ (Press CTRL+C to quit)\nINFO |  * Restarting with stat\nPerforming system checks...\n\nSystem check identified no issues (0 silenced).\n\nDjango version X.X.X, using settings 'config.settings.development'\nDevelopment server is running at http://[127.0.0.1]:8000/\nUsing the Werkzeug debugger (http://werkzeug.pocoo.org/)\nQuit the server with CONTROL-C.\nWARNING |  * Debugger is active!\nWARNING |  * Debugger PIN disabled. DEBUGGER UNSECURED!\n```\n\nLet\u2019s create a **blog** app!\n\n```bash\n$ python manage.py create_app blog\n\n# or\n\n$ rake new:application[blog]\n\n\"blog\" application created.\n\n\n    - Do not forget to add your `blog` to `INSTALLED_APPS` under `config/settings/base.py`:\n\n    INSTALLED_APPS += [\n        'django_extensions',\n        'blog.apps.BlogConfig', # <-- add this\n    ]\n\n    - Do not forget to fix your `config/urls.py`:\n\n    # ...\n    # add your newly created app's urls here!\n    urlpatterns += [\n        # ...\n        # this is just an example!\n        path('__blog__/', include('blog.urls', namespace='blog')),\n        # ..\n    ]\n    # ...\n```\n\nYou can follow the instructions, fix your `config/settings/base.py` and\n`config/urls.py` as seen on the command output. Now run development server\nand call the url:\n\n```bash\n$ python manage.py runserver_plus\n```\n\nOpen `http://127.0.0.1:8000/__blog__/`. Also, another builtin app is running;\n`http://127.0.0.1:8000/__vb_baseapp__/`. You can remove `__vb_baseapp__`\nconfig from `config/urls.py`.\n\nNow let\u2019s add some models. We have 3 choices as parameters:\n\n1. `django`: Uses Django\u2019s `models.Model`\n1. `basemodel`: Uses `CustomBaseModel` (which inherits from `models.Model`)\n1. `softdelete`: Uses `CustomBaseModelWithSoftDelete`\n\nWe\u2019ll use soft-deletable model to demonstrate soft-delete features. Let\u2019s\ncreate `Post`, `Category` and `Tag` models:\n\n```bash\n$ python manage.py create_model blog post softdelete\n\n# or\n\n$ rake new:model[blog,post,softdelete]\n\nmodels/post.py created.\nadmin/post.py created.\npost model added to models/__init__.py\npost model added to admin/__init__.py\n\n\n    `post` related files created successfully:\n\n    - `blog/models/post.py`\n    - `blog/admin/post.py`\n\n    Please check your models before running `makemigrations` ok?\n\n$ python manage.py create_model blog category softdelete\n\n# or\n\n$ rake new:model[blog,category,softdelete]\n\nmodels/category.py created.\nadmin/category.py created.\ncategory model added to models/__init__.py\ncategory model added to admin/__init__.py\n\n\n    `category` related files created successfully:\n\n    - `blog/models/category.py`\n    - `blog/admin/category.py`\n\n    Please check your models before running `makemigrations` ok?\n\n$ python manage.py create_model blog tag softdelete\n\n# or\n\n$ rake new:model[blog,tag,softdelete]\n\nmodels/tag.py created.\nadmin/tag.py created.\ntag model added to models/__init__.py\ntag model added to admin/__init__.py\n\n\n    `tag` related files created successfully:\n\n    - `blog/models/tag.py`\n    - `blog/admin/tag.py`\n\n    Please check your models before running `makemigrations` ok?\n```\n\nLet\u2019s fix models before creating and executing migrations:\n\n```python\n# blog/models/post.py\n\nimport logging\n\nfrom django.conf import settings\nfrom django.db import models\nfrom django.utils.translation import ugettext_lazy as _\n\nfrom console import console\nfrom vb_baseapp.models import CustomBaseModelWithSoftDelete\n\n__all__ = ['Post']\n\nlogger = logging.getLogger('app')\nconsole = console(source=__name__)\n\n\nclass Post(CustomBaseModelWithSoftDelete):\n    author = models.ForeignKey(\n        to=settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name='posts', verbose_name=_('author')\n    )\n    category = models.ForeignKey(\n        to='Category', on_delete=models.CASCADE, related_name='posts', verbose_name=_('category')\n    )\n    title = models.CharField(max_length=255, verbose_name=_('title'))\n    body = models.TextField(verbose_name=_('body'))\n    tags = models.ManyToManyField(to='Tag', related_name='posts', blank=True)\n\n    class Meta:\n        app_label = 'blog'\n        verbose_name = _('post')\n        verbose_name_plural = _('posts')  # check pluralization\n\n    def __str__(self):\n        return self.title\n```\n\nand `Category` model:\n\n```python\n# blog/models/category.py\n\nimport logging\n\nfrom django.db import models\nfrom django.utils.translation import ugettext_lazy as _\n\nfrom console import console\nfrom vb_baseapp.models import CustomBaseModelWithSoftDelete\n\n__all__ = ['Category']\n\nlogger = logging.getLogger('app')\nconsole = console(source=__name__)\n\n\nclass Category(CustomBaseModelWithSoftDelete):\n    title = models.CharField(max_length=255, verbose_name=_('title'))\n\n    class Meta:\n        app_label = 'blog'\n        verbose_name = _('category')\n        verbose_name_plural = _('categories')  # check pluralization\n\n    def __str__(self):\n        return self.title\n```\n\nand `Tag` model:\n\n```python\n# blog/models/tag.py\n\nimport logging\n\nfrom django.db import models\nfrom django.utils.translation import ugettext_lazy as _\n\nfrom console import console\nfrom vb_baseapp.models import CustomBaseModelWithSoftDelete\n\n__all__ = ['Tag']\n\nlogger = logging.getLogger('app')\nconsole = console(source=__name__)\n\n\nclass Tag(CustomBaseModelWithSoftDelete):\n    name = models.CharField(max_length=255, verbose_name=_('name'))\n\n    class Meta:\n        app_label = 'blog'\n\n    def __str__(self):\n        return self.name\n```\n\nLet\u2019s create and run migration file:\n\n```bash\n$ python manage.py makemigrations --name create_post_category_and_tag\n\n# or\n\n$ rake db:update[blog,create_post_category_and_tag]\n\nMigrations for 'blog':\n  applications/blog/migrations/0001_create_post_category_and_tag.py\n    - Create model Category\n    - Create model Tag\n    - Create model Post\n\n$ python manage.py migrate\n\n# or\n\n$ rake db:migrate\n\nOperations to perform:\n  Apply all migrations: admin, auth, blog, contenttypes, sessions\nRunning migrations:\n  Applying blog.0001_create_post_category_and_tag... OK\n```\n\nNow we have a model which has relations to other models via `ForeignKey` and\n`ManyToMany` level. Let\u2019s tweak `blog/admin/post.py`:\n\n```python\n# blog/admin/post.py\n\nimport logging\n\nfrom django.contrib import admin\n\nfrom console import console\nfrom vb_baseapp.admin import (\n    CustomBaseModelAdminWithSoftDelete,\n)\n\nfrom ..models import Post\n\n__all__ = ['PostAdmin']\n\nlogger = logging.getLogger('app')\nconsole = console(source=__name__)\n\n\n@admin.register(Post)\nclass PostAdmin(CustomBaseModelAdminWithSoftDelete):\n    list_filter = ('category', 'tags', 'author')\n    list_display = ('__str__', 'author')\n    ordering = ('title',)\n    # hide_deleted_at = False\n```\n\nLet\u2019s create a super user and jump in to admin pages. `AUTH_PASSWORD_VALIDATORS`\nis removed from **development** settings, you can type any password :)\n\n```bash\n$ python manage.py createsuperuser --username=\"${USER}\" --email=\"your@email.com\"\n$ python manage.py runserver_plus\n\n# or\n\n$ rake\n\nINFO |  * Running on http://127.0.0.1:8000/ (Press CTRL+C to quit)\nINFO |  * Restarting with stat\nPerforming system checks...\n\nSystem check identified no issues (0 silenced).\n\nDjango version X.X.X, using settings 'config.settings.development'\nDevelopment server is running at http://[127.0.0.1]:8000/\nUsing the Werkzeug debugger (http://werkzeug.pocoo.org/)\nQuit the server with CONTROL-C.\nWARNING |  * Debugger is active!\nWARNING |  * Debugger PIN disabled. DEBUGGER UNSECURED!\nINFO | GET | 302 | /admin/\nINFO | GET | 200 | /admin/login/?next=/admin/\nINFO | GET | 404 | /favicon.ico\n:\n:\n```\n\nNow open `http://127.0.0.1:8000/admin/` and add a new blog post! \nCreate different categories and tags. Then open \n`http://127.0.0.1:8000/admin/blog/category/` page. \n\nIn the Action menu, you\u2019ll have couple extra options:\n\n- Delete selected categories\n- Recover selected categories (*Appears if you are filtering inactive records*)\n- Hard delete selected categories\n\nNow, delete one or more categories or tags. Check **activity state** filter\nfor post, category and tag models. You can recover deleted items from the\naction menu too.\n\n---\n\n## Models\n\n### `CustomBaseModel`\n\nThis is a common model. By default, `CustomBaseModel` contains these fields:\n\n- `created_at`\n- `updated_at`\n\nAlmost a default `models.Model` with two extra fields.\n\n### `CustomBaseModelWithSoftDelete`\n\nThis model inherits from `CustomBaseModel` and provides fake deletion which is\nprobably called **SOFT DELETE**. This means, when you call model\u2019s `delete()`\nmethod or QuerySet\u2019s `delete()` method, it acts like delete action but never\ndeletes the data.\n\nJust sets the `deleted_at` field to **NOW**.\n\nThis works exactly like Django\u2019s `delete()`. Broadcasts `pre_delete` and\n`post_delete` signals and returns the number of objects marked as deleted and\na dictionary with the number of deletion-marks per object type.\n\nYou can call `hard_delete()` method to delete an instance or a queryset\nactually.\n\nThis model uses `CustomBaseModelWithSoftDeleteManager` as default manager.\n\n#### How soft-delete works?\n\nWhen you call `.delete()` method of a model instance or queryset, model manager\nsets `deleted_at` attribute to **NOW** all the way down through related\n`ForeignKey` and `ManyToMany` fields. This means, you still keep everything.\n\nNothing is actually deleted, therefore your database constraints are still\nwork fine. When you access deleted (*inactive*) object from admin site, you\u2019ll\nsee \"deleted\" text prefix in your related form fields if your related objects\nare `CustomBaseModelWithSoftDelete` instances.\n\nWhen you click **recover** button in the same page, all related and soft-deleted\nobjects\u2019 `deleted_at` value will set to `NULL` and available again.\n\nPlease use `.actives()` queryset method instead of `.all()`. Why? `.all()`\nmethod is untouched and works as default. When `all()` called, returning\nqueryset set contains everything event if the `deleted_at` is NULL or not...\n\n#### Examples\n\n```python\n>>> Post.objects.all()\n\nSELECT \"blog_post\".\"id\",\n       \"blog_post\".\"created_at\",\n       \"blog_post\".\"updated_at\",\n       \"blog_post\".\"deleted_at\",\n       \"blog_post\".\"author_id\",\n       \"blog_post\".\"category_id\",\n       \"blog_post\".\"title\",\n       \"blog_post\".\"body\"\n  FROM \"blog_post\"\n LIMIT 21\n\n\nExecution time: 0.000950s [Database: default]\n\n<CustomBaseModelWithSoftDeleteQuerySet [\n    <Post: Python post 1>, \n    <Post: Python post 2>, \n    <Post: Python post 3>, \n    <Post: Python post 4>,\n    :\n    :\n    :\n    <Post: Golang post 4>\n]>\n\n>>> Category.objects.all()\n\nSELECT \"blog_category\".\"id\",\n       \"blog_category\".\"created_at\",\n       \"blog_category\".\"updated_at\",\n       \"blog_category\".\"deleted_at\",\n       \"blog_category\".\"title\"\n  FROM \"blog_category\"\n LIMIT 21\n\n\nExecution time: 0.000643s [Database: default]\n\n<CustomBaseModelWithSoftDeleteQuerySet [<Category: Python>, <Category: Ruby>, <Category: Bash>, <Category: Golang>]>\n\n>>> Tag.objects.all()\n\nSELECT \"blog_tag\".\"id\",\n       \"blog_tag\".\"created_at\",\n       \"blog_tag\".\"updated_at\",\n       \"blog_tag\".\"deleted_at\",\n       \"blog_tag\".\"name\"\n  FROM \"blog_tag\"\n LIMIT 21\n\n\nExecution time: 0.000519s [Database: default]\n\n<CustomBaseModelWithSoftDeleteQuerySet [<Tag: textmate>, <Tag: pyc>, <Tag: irb>, <Tag: ipython>, <Tag: lock>, <Tag: environment>]>\n\n>>> Category.objects.get(title='Bash').delete()\n(9, {'blog.Post_tags': 4, 'blog.Category': 1, 'blog.Post': 4})\n\n>>> Category.objects.delete()\n(11, {'blog.Post_tags': 4, 'blog.Category': 3, 'blog.Post': 4})\n\n>>> Category.objects.inactives()\n\nSELECT \"blog_category\".\"id\",\n       \"blog_category\".\"created_at\",\n       \"blog_category\".\"updated_at\",\n       \"blog_category\".\"deleted_at\",\n       \"blog_category\".\"title\"\n  FROM \"blog_category\"\n WHERE \"blog_category\".\"deleted_at\" IS NOT NULL\n LIMIT 21\n\n\nExecution time: 0.000337s [Database: default]\n\n<CustomBaseModelWithSoftDeleteQuerySet [<Category: Bash>]>\n\n>>> Post.objects.inactives()\n\nSELECT \"blog_post\".\"id\",\n       \"blog_post\".\"created_at\",\n       \"blog_post\".\"updated_at\",\n       \"blog_post\".\"deleted_at\",\n       \"blog_post\".\"author_id\",\n       \"blog_post\".\"category_id\",\n       \"blog_post\".\"title\",\n       \"blog_post\".\"body\"\n  FROM \"blog_post\"\n WHERE \"blog_post\".\"deleted_at\" IS NOT NULL\n LIMIT 21\n\n\nExecution time: 0.000387s [Database: default]\n\n<CustomBaseModelWithSoftDeleteQuerySet [<Post: Bash post 1>, <Post: Bash post 2>, <Post: Bash post 3>, <Post: Bash post 4>]>\n\n>>> Category.objects.inactives().undelete()\n(9, {'blog.Post_tags': 4, 'blog.Category': 1, 'blog.Post': 4})\n\n>>> Category.objects.inactives()\n<CustomBaseModelWithSoftDeleteQuerySet []>\n\n>>> Post.objects.inactives()\n<CustomBaseModelWithSoftDeleteQuerySet []>\n```\n\n`CustomBaseModelWithSoftDeleteQuerySet` has these query options:\n\n- `.actives()` : filters if `CustomBaseModelWithSoftDelete.deleted_at` is set to `NULL`\n- `.inactives()` : filters if `CustomBaseModelWithSoftDelete.deleted_at` is not set to `NULL`\n- `.delete()` : soft delete on given object/queryset.\n- `.undelete()` : recover soft deleted on given object/queryset.\n- `.hard_delete()` : this is real delete. this method erases given object/queryset and there is no turning back!.\n\nWhen soft-delete enabled (*during model creation*), Django admin will\nautomatically use `CustomBaseModelAdminWithSoftDelete` which is inherited from:\n `CustomBaseModelAdmin` <- `admin.ModelAdmin`.\n\n---\n\n## Model Admins\n\n### `CustomBaseModelAdmin`, `CustomBaseModelAdminWithSoftDelete`\n\nInherits from `admin.ModelAdmin`. When model is created via `rake new:model...` \nor via management command, admin file is generated automatically.\n\nThis model admin overrides `models.ImageField` form field and displays fancy\nthumbnail for images. By default, uses cached paginator and sets `show_full_result_count`\nto `False` for performance improvements.\n\n#### Model Admin Properties\n\n`show_goback_button` is set to `True` by default. You can disable via;\n\n```python\nclass ExampleAdmin(CustomBaseModelAdminWithSoftDelete):\n    # ...\n    show_goback_button = False\n    # ...\n```\n\n- `show_full_result_count` is set to `False` by default.\n- `hide_deleted_at` is set to `True` by default. This means, you will not see\nthat field while editing the instance.\n\nExample for `Post` model admin (*auto generated*).\n\n```python\nimport logging\n\nfrom django.contrib import admin\n\nfrom console import console\nfrom vb_baseapp.admin import (\n    CustomBaseModelAdminWithSoftDelete,\n)\n\nfrom ..models import Post\n\n__all__ = ['PostAdmin']\n\nlogger = logging.getLogger('app')\nconsole = console(source=__name__)\n\n\n@admin.register(Post)\nclass PostAdmin(CustomBaseModelAdminWithSoftDelete):\n    # hide_deleted_at = False\n```\n\nBy default, `deleted_at` excluded from admin form like `created_at` and\n`updated_at` fields. You can also override this via `hide_deleted_at`\nattribute. Comment/Uncomment lines according to your needs! This works only in\n`CustomBaseModelAdminWithSoftDelete`.\n\n`CustomBaseModelAdminWithSoftDelete` also comes with special admin action. You can\nrecover/make active (*undelete*) multiple objects like deleting feature of\nDjango\u2019s default.\n\n### Extra Features\n\nWhen you\u2019re dealing with soft-deleted objects, you\u2019ll see **HARD DELETE** and \n**RECOVER** buttons in the change form. Hard delete really wipes the items\nfrom database. Recover, recovers/undeletes object and related elements.\n\nYou\u2019ll also have **GO BACK** button too :)\n\n---\n\n## MiddleWare\n\n### `CustomLocaleMiddleware`\n\nThis is mostly used for our custom projects. Injects `LANGUAGE_CODE` variable to\n`request` object. `/en/path/to/page/` sets `request.LANGUAGE_CODE` to `en` otherwise `tr`.\n\n```python\n# add this to your settings/base.py\nMIDDLEWARE += ['vb_baseapp.middlewares.CustomLocaleMiddleware']\n```\n\n### `TimezoneMiddleware`\n\nIf you have custom user model or you have `timezone` field in your `request.user`,\nthis middleware activates timezone for user.\n\n---\n\n## Custom Error Pages\n\nYou have a browsable (*only in development mode*) and customizable error handler\nfunctions and html templates now!. Templates are under `templates/custom_errors/`\nfolder.\n\n---\n\n## Goodies\n\n### `HtmlDebugMixin`\n\n![Example view](screenshots/vb_baseapp-view.png \"Debug on view layer\")\n\n`self.hdbg(arg, arg, arg, ...)` method helps you to output/debug some data\nin view layer.\n\n```python\n# example view: index.py\n\nimport logging\n\nfrom django.views.generic.base import TemplateView\n\nfrom console import console\nfrom vb_baseapp.mixins import HtmlDebugMixin\n\n__all__ = ['BlogView']\n\nlogger = logging.getLogger('app')\nconsole = console(source=__name__)\n\n\nclass BlogView(HtmlDebugMixin, TemplateView):\n    template_name = 'blog/index.html'\n\n    def get_context_data(self, **kwargs):\n        self.hdbg('Hello from hdbg')\n        kwargs = super().get_context_data(**kwargs)\n        console.dir(self.request.user)\n        return kwargs\n```\n\n`{% hdbg %}` tag is added by default in to your `templates/base.html` and works\nonly if the settings `DEBUG` is set to `True`.\n\n```django\n{% load static i18n %}\n\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n    <title>{% block title %}{% endblock %}</title>\n    {% if DJANGO_ENV == 'development' %}\n    <link rel=\"stylesheet\" href=\"{% static 'css/bulma.min.0.8.0.css' %}\">\n    <script defer src=\"{% static 'js/fontawesome.5.3.1.all.js' %}\"></script>\n    {% else %}\n    <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/bulma@0.8.0/css/bulma.min.css\">\n    <script defer src=\"https://use.fontawesome.com/releases/v5.3.1/js/all.js\"></script>\n    {% endif %}\n    <link rel=\"stylesheet\" href=\"{% static 'css/vb-baseapp.css' %}\">\n    <link rel=\"stylesheet\" href=\"{% static 'css/application.css' %}\">\n    {% block extra_css %}{% endblock %}\n    <script defer src=\"{% static 'js/application.js' %}\"></script>\n</head>\n<body>\n    {% hdbg %}\n    {% block body %}{% endblock %}\n    {% block extra_js %}{% endblock %}\n</body>\n</html>\n```\n\nIf you don\u2019t want to extend from `templates/base.html` you can use your\nown template. You just need to add `{% hdbg %}` tag in to your template if\nyou still want to enable this feature.\n\nWe have some mini helpers and tools shipped with `vb_baseapp`.\n\n### `console`\n\nThis little tool helps you to output anything to console. This works only\nin test and development mode. If you forget console declarations in your\ncode, do not worry... console checks `DJANGO_ENV` environment variable...\n\n```python\nfrom console import console\n\nconsole = console(source=__name__)\n\nconsole('hello', 'world')\n```\n\nYou can inspect python object via `.dir()` method:\n\n```python\nconsole.dir([])\n\np = Post.objects.actives().first()\nconsole.dir(p)\n```\n\nMore information is available [here][vb-console]\n\n### `vb_baseapp.utils.numerify`\n\nLittle helper for catching **QUERY_STRING** parameters for numerical values:\n\n```python\nfrom vb_baseapp.utils import numerify\n\n>>> numerify(\"1\")\n1\n>>> numerify(\"1a\")\n-1\n>>> numerify(\"ab\")\n-1\n>>> numerify(\"abc\", default=44)\n44\n```\n\n### `vb_baseapp.utils.save_file`\n\nWhile using `FileField`, sometimes you need to handle uploaded files. In this\ncase, you need to use `upload_to` attribute. Take a look at the example:\n\n```python\nfrom vb_baseapp.utils import save_file as custom_save_file\n:\n:\n:\nclass User(AbstractBaseUser, PermissionsMixin):\n    :\n    :\n    avatar = models.FileField(\n        upload_to=save_user_avatar,\n        verbose_name=_('Profile Image'),\n        null=True,\n        blank=True,\n    )\n    :\n    :\n```\n\n`save_user_avatar` returns `custom_save_file`\u2019s return value. Default\nconfiguration of for `custom_save_file` is \n`save_file(instance, filename, upload_to='upload/%Y/%m/%d/')`. Uploads are go to\nsuch as `MEDIA_ROOT/upload/2017/09/21/`...\n\nMake your custom uploads like:\n\n```python\nfrom vb_baseapp.utils import save_file as custom_save_file\n\ndef my_custom_uploader(instance, filename):\n    # do your stuff\n    # at the end, call:\n    return custom_save_file(instance, filename, upload_to='images/%Y/')\n\n\nclass MyModel(models.Model):\n    image = models.FileField(\n        upload_to='my_custom_uploader',\n        verbose_name=_('Profile Image'),\n    )\n```\n\n### SlackExceptionHandler\n\n`vb_baseapp.utils.log.SlackExceptionHandler`\n\nYou can send errors/exceptions to [slack](https://api.slack.com) channel.\nJust create a slack app, get the webhook URL and set as `SLACK_HOOK`\nenvironment variable. Due to slack message size limitation, `traceback`\nis disabled.\n\nExample message contains:\n\n- http status\n- error message\n- exception message\n- user.id or None\n- full path\n\n```bash\nhttp status: 500\nERROR (internal IP): Internal Server Error: /__vb_baseapp__/\nException: User matching query does not exist.\nuser_id: anonymous (None)\nfull path: /__vb_baseapp__/?foo=!\n```\n\nYou can enable/disable in `config/settings/production.py` / `config/settings/heroku.py`:\n\n```python\n:\n:\n    'loggers': {\n        'django.request': {'handlers': ['mail_admins', 'slack'], 'level': 'ERROR', 'propagate': False},  # remove 'slack'\n    }\n:\n:\n```\n\n### `vb_baseapp.storage`\n\n#### `FileNotFoundFileSystemStorage`\n\nAfter shipping/deploying Django app, users start to upload files, right ?\nThen you need to implement new features etc. You can get the dump of the\ndatabase but what about uploaded files ? Sometimes files are too much or\ntoo big. If you call, let\u2019s say, a model\u2019s `ImageField`\u2019s `url` property,\nlocal dev server logs lot\u2019s of **file not found** errors to console.\n\nAlso breaks the look of application via broken image signs in browser.\n\nNow, you won\u2019t see any errors... `FileNotFoundFileSystemStorage` is a\nfake storage that handles non existing files. Returns `file-not-found.jpg`\nfrom `static/images/` folder.\n\nThis is **development purposes** only! Do not use in the production!\n\nYou don\u2019t need to change/add anything to your code... It\u2019s embeded to\n`config/settings/development.py`:\n\n```python\n:\n:\nDEFAULT_FILE_STORAGE = 'vb_baseapp.storage.FileNotFoundFileSystemStorage'\n:\n```\n\nYou can disable if you like to...\n\n#### `OverwriteStorage`\n\n`OverwriteStorage` helps you to overwrite file when uploading from django\nadmin. Example usage:\n\n```python\n# in a model\nfrom vb_baseapp.storage import OverwriteStorage\n\nclass MyModel(models.Model):\n    :\n    :\n    photo = models.ImageField(\n        upload_to=save_media_photo,\n        storage=OverwriteStorage(),\n    )\n    :\n    :\n```\n\nAdd `storage` option in your file related fields.\n\n#### `AdminImageFileWidget`\n\nUse this widget in your admin forms. By default, It\u2019s already enabled in\n`CustomBaseModelAdmin`. You can also inject this to Django\u2019s default `ModelAdmin`\nvia example:\n\n```python\nfrom vb_baseapp.admin.widgets import AdminImageFileWidget\n\nclass MyAdmin(admin.ModelAdmin):\n    formfield_overrides = {\n        models.FileField: {'widget': AdminImageFileWidget},\n    }\n```\n\nThis widget uses `Pillow` (*Python Image Library*) which ships with your `base.pip`\nrequirements file. Show image preview, width x height if the file is image.\n\n#### `context_processors.py`\n\nBy default, `vb_baseapp` injects few variables to you context:\n\n- `DJANGO_ENV`\n- `IS_DEBUG`\n- `LANGUAGE_CODE`\n- `CURRENT_GIT_TAG`\n- `CURRENT_PYTHON_VERSION`\n- `CURRENT_DJANGO_VERSION`\n\n---\n\n## Reminders\n\nDefault timezone is set to `UTC`, please change this or use according to your\nneeds.\n\n```python\n# config/settings/base.py\n# ...\nTIME_ZONE = 'UTC'\n# ...\n```\n\n---\n\n## Management Commands\n\n`vb_baseapp` ships with three managements commands;\n\n### `create_app`\n\n```bash\n$ python manage.py create_app NAME_OF_APP\n```\n\nCreates new Django application under `applications/` and provides application\nfolder structure:\n\n    applications/NAME_OF_APP/\n    \u251c\u2500\u2500 admin\n    \u251c\u2500\u2500 management\n    \u251c\u2500\u2500 migrations\n    \u251c\u2500\u2500 models\n    \u251c\u2500\u2500 tests\n    \u251c\u2500\u2500 views\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 apps.py\n    \u2514\u2500\u2500 urls.py\n\n### `create_model`\n\n```bash\n$ python manage.py create_model NAME_OF_APP NAME_OF_MODEL STYLE_OF_MODEL\n```\n\nCreates Django model. You have three different model style;\n\n1. `django`: Uses Django\u2019s `models.Model`\n1. `basemodel`: Uses `CustomBaseModel` (which inherits from `models.Model`)\n1. `softdelete`: Uses `CustomBaseModelWithSoftDelete`\n\nAccording to your model choice, related files will be generated.\n\n### `create_custom_user_model`\n\n```bash\n$ python manage.py create_custom_user_model NAME_OF_APP NAME_OF_MODEL STYLE_OF_MODEL \n```\n\nThis command will work only in the beginning state of development. Creating\na custom user model is prohibited in the middle of the development. You\nmust decide before you create other models or run initial migrations for\nDjango\u2019s default.\n\nThis command creates;\n\n- Admin files\n- Model manager files\n- Model admin form files\n- Model files\n\nfor given argumens. Let\u2019s say you\u2019ll start a fresh project and want to use\ncustom user model. First, you need to create an app:\n\n```bash\n$ python manage.py create_app blog\n# follow the instructions\n$ python manage.py create_custom_user_model blog CustomUser softdelete\n\nSet AUTH_USER_MODEL in config file\nmodels/custom_user.py created.\nadmin/custom_user.py created.\nCustomUser model added to models/__init__.py\nCustomUser model added to admin/__init__.py\nCustomUser forms added to admin/forms/__init__.py\nadmin/forms/custom_user.py created.\n\nCustom user installation completed. Now please check your;\n\n    - blog/models/custom_user.py\n    - blog/admin/custom_user.py\n    - blog/admin/forms/custom_user.py\n\nAlso;\n\n    - `email` field is set to `USERNAME_FIELD`\n    - `first_name` and `last_name` are set as `REQUIRED_FIELDS`\n    - `middle_name`, `profile_image` are optionals\n\nMake sure if all ok? Make your changes before running migrations:\n\n    $ python manage.py makemigrations --name create_custom_users\n```\n\nWe\u2019ve created `CustomUser` model from softdeletable object. Default fields\nare:\n\n- `email`: `EmailField`\n- `first_name`: `CharField`\n- `middle_name`: (optional) `CharField`\n- `last_name`: `CharField`\n- `profile_image`: (optional) `FileField`\n- `is_active`: (optional) `BooleanField`\n- `is_staff`: (optional) `BooleanField`\n\nand other fields inherited from `AbstractBaseUser`:\n\n- `password`\n- `last_login`\n\nand other properties from `PermissionsMixin`. You can add/change or remove\nfields before creating migrations. Do not forget to check these files for\n`CustomUser` for the sake of this example:\n\n- `admin/custom_user.py`\n- `admin/forms/custom_user.py`\n- `models/custom_user.py`\n\nAlso, this management commands sets `AUTH_USER_MODEL` value in `config/base.py`.\nYou\u2019ll see;\n\n```python\nAUTH_USER_MODEL = 'blog.CustomUser'\n```\n\nsince you\u2019ve named the custom model as `CustomUser`.\n\n---\n\n## Rake Tasks\n\nYou have some handy rake tasks if you like to use `ruby` :)\n\n```bash\n$ rake -T\n\nrake db:migrate[database]                                        # Run migration for given database (default: 'default')\nrake db:roll_back[name_of_application,name_of_migration]         # Roll-back (name of application, name of migration)\nrake db:shell                                                    # run database shell ..\nrake db:show[name_of_application]                                # Show migrations for an application (default: 'all')\nrake db:update[name_of_application,name_of_migration,is_empty]   # Update migration (name of application, name of migration?, is empty?)\nrake default                                                     # Default task: runserver_plus (Werkzeug)\nrake locale:compile                                              # Compile locale dictionary\nrake locale:update                                               # Update locale dictionary\nrake new:application[name_of_application]                        # Create new Django application\nrake new:model[name_of_application,name_of_model,type_of_model]  # Create new Model for given application: django,basemodel,softdelete\nrake runserver:default                                           # Run: runserver (Django's default server)\nrake runserver:default_ipdb                                      # Run: runserver (Django's default server) + ipdb debug support\nrake runserver:plus                                              # Run: runserver_plus (Werkzeug)\nrake runserver:plus_ipdb                                         # Run: runserver_plus (Werkzeug) + ipdb debug support\nrake shell[repl]                                                 # Run shell+ avail: ptpython,ipython,bpython default: ptpython\nrake test:browse_coverage[port]                                  # Browse test coverage\nrake test:coverage[cli_args]                                     # Show test coverage (default: '--show-missing --ignore-errors --skip-covered')\nrake test:run[name_of_application,verbose]                       # Run tests for given application\n```\n\nDefault task is `runserver:plus`. Just type `rake` that\u2019s it! `runserver:plus` uses\n`runserver_plus`. This means you have lots of debugging options!\n\n### `runserver` based tasks\n\n- `rake runserver:default`: runs `python manage.py runserver`\n- `rake runserver:default_ipdb`: runs Django\u2019s default server with debugging\n  feature. You can inject `breakpoint()` in your code! Debugger kicks in!\n- `rake runserver:plus`: runs `python manage.py runserver_plus --nothreading`\n- `rake runserver:plus_ipdb`: runs `runserver:plus` with debugging!\n\n### `rake db:migrate[database]`\n\nMigrates database with given database name. Default is `default`. If you like\nto work multiple databases:\n\n```python\n# example configuration\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db', 'development.sqlite3'),\n    },\n    'my_database': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db', 'my_database.sqlite3'),\n    }\n}\n```\n\nYou can just call `rake db:migrate` or specify different database like: \n`rake db:migrate[my_database]` :)\n\n### `rake db:show[name_of_application]`\n\nShow migration information:\n\n```bash\n$ rake db:show[blog]\nblog\n [X] 0001_create_post_category_and_tag\n [ ] 0002_add_spot_field_to_post\n\n$ rake db:migrate\nRunning migration for: default database...\nOperations to perform:\n  Apply all migrations: admin, auth, blog, contenttypes, sessions\nRunning migrations:\n  Applying blog.0002_add_spot_field_to_post... OK\n```\n\n### `rake db:roll_back[name_of_application,name_of_migration]`\n\nYour database must be rollable :) To see available migrations: \n`rake db:roll_back[NAME_OF_YOUR_APPLICATION]`. Look at the list and choose your\ntarget migration. You can use just the number as shortcut. In this example,\nwe\u2019ll roll back to migration number 1, which has a name: `0001_create_post_category_and_tag`\n\n```bash\n$ rake db:roll_back[blog]\nPlease select your migration:\nblog\n [X] 0001_create_post_category_and_tag\n [X] 0002_add_spot_field_to_post\n\n$ rake db:roll_back[blog,1]\nOperations to perform:\n  Target specific migration: 0001_create_post_category_and_tag, from blog\nRunning migrations:\n  Rendering model states... DONE\n  Unapplying blog.0002_add_spot_field_to_post... OK\n\n$ rake db:show[blog]\nblog\n [X] 0001_create_post_category_and_tag\n [ ] 0002_add_spot_field_to_post\n```\n\n### `rake db:update[name_of_application,name_of_migration,is_empty]`\n\nWhen you add/change something in your model, you need to create migrations.\nLet\u2019s say you have added new field to `Post` model in your `blog` app:\n\nIf you don\u2019t provide `name_of_migration` param, you\u2019ll endup with auto\ngenerated name such as `000X_auto_YYYMMDD_HHMM`. You can also create\nempty migration via 3^rd parameter: `yes`\n\n```bash\n$ rake db:update[blog,add_spot_field_to_post]\nMigrations for 'blog':\n  applications/blog/migrations/0002_add_spot_field_to_post.py\n    - Add field spot to post\n\n$ rake db:update[blog,add_new_field_to_post,yes]  # empty migration example\nMigrations for 'blog':\n  applications/blog/migrations/0003_add_new_field_to_post.py\n\n$ cat applications/blog/migrations/0003_add_new_field_to_post.py\n```\n\nempty migration output:\n\n```python\nfrom django.db import migrations\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        ('blog', '0002_add_spot_field_to_post'),\n    ]\n\n    operations = [\n    ]\n```\n\n### `rake db:shell`\n\nRuns default database client.\n\n### `rake new:application[name_of_application]`\n\nCreates new application with given application name!\n\n```bash\n$ rake new:application[blog]\n```\n\n### `rake new:model[name_of_application,name_of_model,type_of_model]`\n\nCreates new model! Available model types are:\n\n- `django` (default),\n- `basemodel`\n- `softdelete`\n\n```bash\n$ rake new:model[blog,Post]                # will create model using Django\u2019s `models.Model`\n$ rake new:model[blog,Post,basemodel]      # will create model using our `CustomBaseModel`\n$ rake new:model[blog,Post,softdelete]     # will create model using our `CustomBaseModelWithSoftDelete`\n```\n\n### `rake locale:compile` and `rake locale:update`\n\nWhen you make changes in your application related to locales, run: `rake locale:update`.\nWhen you finish editing your `django.po` file, run `rake locale:compile`.\n\n### `rake shell[repl]`\n\nRuns Django repl/shell with use `shell_plus` of [django-extensions][01].\n `rake shell`. This loads everything to your shell! Also you can see the\nSQL statements while playing in shell. We have couple different repls:\n\n1. `ptpython`\n1. `bpython`\n1. `ipython`\n\nDefault repl is: `ptpython`\n\n```bash\n$ rake shell\n$ rake shell[bpython]\n$ rake shell[ipython]\n```\n\n### `rake test:run[name_of_application,verbose]`\n\nIf you don\u2019t provide `name_of_application` default value will be `applications`. \n`verbose` is `1` by default.\n\nExamples:\n\n```bash\n$ rake test:run\n$ rake test:run[vb_baseapp,2]\n```\n\n### `rake test:coverage[cli_args]`\n\nGet the test report. Default is `--show-missing --ignore-errors --skip-covered` for\n`cli_args` parameter.\n\n```bash\n$ rake test:coverage\n```\n\n### `rake test:browse_coverage[port]`\n\nServes generated html coverages under `htmlcov` folder via `python`. Default port\nis `9001`\n\n---\n\n## Run Tests Manually\n\n```bash\n$ DJANGO_ENV=test python manage.py test vb_baseapp -v 2                                 # or\n$ DJANGO_ENV=test python manage.py test vb_baseapp.tests.test_user.CustomUserTestCase   # run single unit\n$ rake test:run[vb_baseapp]\n```\n\n---\n\n## Manual Usage\n\nLet\u2019s assume you need a model called: `Page`. Create a file under `YOUR_APP/models/page.py`:\n\n```python\n# example for Django\u2019s default model\n# YOUR_APP/models/page.py\n\nfrom django.db import models\n\n__all__ = ['Page',]\n\nclass Page(models.Model):\n    # define your fields here...\n    pass\n\n# YOUR_APP/models/__init__.py\n# append:\nfrom .page import *\n```\n\nor, you can use `CustomBaseModel` or `CustomBaseModelWithSoftDelete`:\n\n```bash\nfrom django.db import models\n\nfrom vb_baseapp.models import CustomBaseModelWithSoftDelete\n\n__all__ = ['Page']\n\nclass Page(CustomBaseModelWithSoftDelete):\n    # define your fields here...\n    pass\n```\n\nNow make migrations etc... Use it as `from YOUR_APP.models import Page` :)\n\n---\n\n## License\n\nThis project is licensed under MIT\n\n---\n\n## Contributer(s)\n\n* [U\u011fur \"vigo\" \u00d6zy\u0131lmazel](https://github.com/vigo) - Creator, maintainer\n\n---\n\n## Contribute\n\nAll PR\u2019s are welcome!\n\n1. `fork` (https://github.com/vbyazilim/django-vb-baseapp/fork)\n1. Create your `branch` (`git checkout -b my-features`)\n1. `commit` yours (`git commit -am 'Add awesome features'`)\n1. `push` your `branch` (`git push origin my-features`)\n1. Than create a new **Pull Request**!\n\n---\n\n## Change Log\n\n**2019-12-05**\n\n- Django 2.2.8\n\n**2019-12-04**\n\n- Add custom user model generator\n- Version bump\n\n**2019-11-30**\n\n- Update and fix typos in README file\n\n**2019-11-28**\n\n- Add tests and travis integration\n- Version bump\n\n**2019-11-27**\n\n- Version bump\n- Ready to use...\n\n**2019-08-07**\n\n- Initial Beta relase: 1.0.0\n\n---\n\n[vb-console]: https://github.com/vbyazilim/vb-console\n[bulma.io]: https://bulma.io\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/vbyazilim/django-vb-baseapp", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "django-vb-baseapp", "package_url": "https://pypi.org/project/django-vb-baseapp/", "platform": "", "project_url": "https://pypi.org/project/django-vb-baseapp/", "project_urls": {"Homepage": "https://github.com/vbyazilim/django-vb-baseapp"}, "release_url": "https://pypi.org/project/django-vb-baseapp/1.1.12/", "requires_dist": ["vb-console"], "requires_python": ">=3.6", "summary": "Magical app for django-vb-admin", "version": "1.1.12", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://travis-ci.org/vbyazilim/django-vb-baseapp\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/29e26ee0634257f4880c1b351f62cca945b7d593/68747470733a2f2f7472617669732d63692e6f72672f766279617a696c696d2f646a616e676f2d76622d626173656170702e7376673f6272616e63683d6d6173746572\"></a>\n<img alt=\"Python\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4269b74ab20bfb6074183033625faba2175b84f1/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f707974686f6e2d332e372e342d677265656e2e737667\">\n<img alt=\"Django\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9975d33c0739861e33732b7d6ba6f5ac6f1b14d6/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646a616e676f2d322e322e382d677265656e2e737667\">\n<img alt=\"Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/923ad4366d3fb11ad79295b405656ffa5af5d6b6/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f76657273696f6e2d312e312e31322d6f72616e67652e737667\">\n<a href=\"https://www.codacy.com/manual/vigo/django-vb-baseapp?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=vbyazilim/django-vb-baseapp&amp;utm_campaign=Badge_Grade\" rel=\"nofollow\"><img alt=\"Codacy Badge\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/232e2ef4262c129eaba19fe0aebd96cd9d6e4c16/68747470733a2f2f6170692e636f646163792e636f6d2f70726f6a6563742f62616467652f47726164652f3463366161373666303966643433376562333838383835356663636339363034\"></a>\n<a href=\"https://github.com/psf/black\" rel=\"nofollow\"><img alt=\"Code style: black\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fbfdc7754183ecf079bc71ddeabaf88f6cbc5c00/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64652532307374796c652d626c61636b2d3030303030302e737667\"></a></p>\n<h1>django-vb-baseapp</h1>\n<p>This is a helper app for <a href=\"https://github.com/vbyazilim/django-vb-admin\" rel=\"nofollow\">https://github.com/vbyazilim/django-vb-admin</a>\nand ships with while installation:</p>\n<pre>$ pip install django-vb-admin\n$ django-vb-admin -h\n</pre>\n<p>It\u2019s also available on PyPI and available via:</p>\n<pre>$ pip install django-vb-baseapp\n</pre>\n<h2>Features</h2>\n<ul>\n<li>Two abstract custom base models: <code>CustomBaseModel</code> and <code>CustomBaseModelWithSoftDelete</code></li>\n<li>Two custom base model admins: <code>CustomBaseModelAdmin</code> and <code>CustomBaseModelAdminWithSoftDelete</code></li>\n<li>Soft deletion feature and admin actions for <code>CustomBaseModelAdminWithSoftDelete</code></li>\n<li><code>pre_undelete</code> and <code>post_undelete</code> signals for <strong>soft delete</strong> operation</li>\n<li>Pre enabled models admin site: <code>ContentTypeAdmin</code>, <code>LogEntryAdmin</code>, <code>PermissionAdmin</code>, <code>UserAdmin</code></li>\n<li>Timezone and locale middlewares</li>\n<li>Onscreen debugging feature for views! (Template layer...)</li>\n<li>Handy utils: <code>numerify</code>, <code>save_file</code>, <code>SlackExceptionHandler</code></li>\n<li>Fancy file widget: <code>AdminImageFileWidget</code> for <code>ImageField</code> on admin by default</li>\n<li><code>OverwriteStorage</code> for overwriting file uploads</li>\n<li>Custom file storage for missing files for development environment: <code>FileNotFoundFileSystemStorage</code></li>\n<li>Custom and configurable error page views for: <code>400</code>, <code>403</code>, <code>404</code>, <code>500</code></li>\n<li>Custom management command with basic output feature <code>CustomBaseCommand</code></li>\n<li>Builtin <code>console</code>, <code>console.dir()</code> via <code>vb-console</code> <a href=\"https://github.com/vbyazilim/vb-console\" rel=\"nofollow\">package</a></li>\n<li>Simpler server logging for <code>runserver_plus</code></li>\n<li>This project uses <a href=\"https://bulma.io\" rel=\"nofollow\">bulma.io</a> as HTML/CSS framework, ships with <strong>jQuery</strong> and <strong>Fontawesome</strong></li>\n</ul>\n<hr>\n<h2>Screenshots</h2>\n<table>\n    <tr>\n        <td><img alt=\"Change list 1\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fedfee1f81c1a073ec326cb077946927817c6e8e/68747470733a2f2f6769746875622e636f6d2f766279617a696c696d2f646a616e676f2d76622d626173656170702f7261772f6d61737465722f73637265656e73686f74732f76625f626173656170702d61646d696e2d6368616e67656c6973742d312e706e67\"></td>\n        <td><img alt=\"Change list 2\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0f197e2ca77e05d5199e5ca8a9ecb6ce73e6a8d9/68747470733a2f2f6769746875622e636f6d2f766279617a696c696d2f646a616e676f2d76622d626173656170702f7261772f6d61737465722f73637265656e73686f74732f76625f626173656170702d61646d696e2d6368616e67656c6973742d322e706e67\"></td>\n    </tr>\n    <tr>\n        <td><img alt=\"Change form 1\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5a9d2baa977aa1e306448a3c0443415d22c8f4d9/68747470733a2f2f6769746875622e636f6d2f766279617a696c696d2f646a616e676f2d76622d626173656170702f7261772f6d61737465722f73637265656e73686f74732f76625f626173656170702d61646d696e2d6368616e67652d666f726d2d312e706e67\"></td>\n        <td><img alt=\"Change form 2\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a72c3634d2e3bf3d466a4d91fb31b5ee7d5b01b5/68747470733a2f2f6769746875622e636f6d2f766279617a696c696d2f646a616e676f2d76622d626173656170702f7261772f6d61737465722f73637265656e73686f74732f76625f626173656170702d61646d696e2d6368616e67652d666f726d2d322e706e67\"></td>\n    </tr>\n</table>\n<hr>\n<h2>Tutorial</h2>\n<p>Let\u2019s build a basic blog with categories and tags! First, create a virtual\nenvironment:</p>\n<pre><span class=\"c1\"># via builtin</span>\n$ python -m venv my_env\n$ <span class=\"nb\">source</span> my_env/bin/activate\n\n<span class=\"c1\"># or via virtualenvwrapper</span>\n$ mkvirtualenv my_env\n</pre>\n<p>Now, create a postgresql database;</p>\n<pre>$ createdb my_project_dev\n</pre>\n<p>Now set your environment variables:</p>\n<pre>$ <span class=\"nb\">export</span> <span class=\"nv\">DJANGO_SECRET</span><span class=\"o\">=</span><span class=\"k\">$(</span>head -c <span class=\"m\">75</span> /dev/random <span class=\"p\">|</span> base64 <span class=\"p\">|</span> tr -dc <span class=\"s1\">'a-zA-Z0-9'</span> <span class=\"p\">|</span> head -c <span class=\"m\">50</span><span class=\"k\">)</span>\n$ <span class=\"nb\">export</span> <span class=\"nv\">DATABASE_URL</span><span class=\"o\">=</span><span class=\"s2\">\"postgres://localhost:5432/my_project_dev\"</span>\n</pre>\n<p>Edit <code>my_env/bin/activate</code> or <code>~/.virtualenvs/my_env/bin/postactivate</code>\n(<em>according to your virtualenv creation procedure</em>) and put these export\nvariables in it. Will be handy next time you activate the environment. Now;</p>\n<pre>$ pip install django-vb-admin\n$ <span class=\"nb\">cd</span> /path/to/my-django-project\n$ django-vb-admin startproject\n<span class=\"c1\"># or</span>\n$ django-vb-admin startproject --target<span class=\"o\">=</span><span class=\"s2\">\"/path/to/folder\"</span>\n</pre>\n<p>You\u2019ll see:</p>\n<pre>Setup completed...\nNow, create your virtual environment and run\n\n\tpip install -r requirements/development.pip\n</pre>\n<p>message. Now;</p>\n<pre>$ pip install -r requirements/development.pip\n$ python manage.py migrate\nOperations to perform:\n  Apply all migrations: admin, auth, contenttypes, sessions\nRunning migrations:\n  Applying contenttypes.0001_initial... OK\n  Applying auth.0001_initial... OK\n  Applying admin.0001_initial... OK\n  Applying admin.0002_logentry_remove_auto_add... OK\n  Applying admin.0003_logentry_add_action_flag_choices... OK\n  Applying contenttypes.0002_remove_content_type_name... OK\n  Applying auth.0002_alter_permission_name_max_length... OK\n  Applying auth.0003_alter_user_email_max_length... OK\n  Applying auth.0004_alter_user_username_opts... OK\n  Applying auth.0005_alter_user_last_login_null... OK\n  Applying auth.0006_require_contenttypes_0002... OK\n  Applying auth.0007_alter_validators_add_error_messages... OK\n  Applying auth.0008_alter_user_username_max_length... OK\n  Applying auth.0009_alter_user_last_name_max_length... OK\n  Applying auth.0010_alter_group_name_max_length... OK\n  Applying auth.0011_update_proxy_permissions... OK\n  Applying sessions.0001_initial... OK\n</pre>\n<p>Now, we have a ready Django project. Let\u2019s check;</p>\n<pre>$ python manage.py runserver_plus\n\n<span class=\"c1\"># or</span>\n\n$ rake\n\nINFO <span class=\"p\">|</span>  * Running on http://127.0.0.1:8000/ <span class=\"o\">(</span>Press CTRL+C to quit<span class=\"o\">)</span>\nINFO <span class=\"p\">|</span>  * Restarting with stat\nPerforming system checks...\n\nSystem check identified no issues <span class=\"o\">(</span><span class=\"m\">0</span> silenced<span class=\"o\">)</span>.\n\nDjango version X.X.X, using settings <span class=\"s1\">'config.settings.development'</span>\nDevelopment server is running at http://<span class=\"o\">[</span><span class=\"m\">127</span>.0.0.1<span class=\"o\">]</span>:8000/\nUsing the Werkzeug debugger <span class=\"o\">(</span>http://werkzeug.pocoo.org/<span class=\"o\">)</span>\nQuit the server with CONTROL-C.\nWARNING <span class=\"p\">|</span>  * Debugger is active!\nWARNING <span class=\"p\">|</span>  * Debugger PIN disabled. DEBUGGER UNSECURED!\n</pre>\n<p>Let\u2019s create a <strong>blog</strong> app!</p>\n<pre>$ python manage.py create_app blog\n\n<span class=\"c1\"># or</span>\n\n$ rake new:application<span class=\"o\">[</span>blog<span class=\"o\">]</span>\n\n<span class=\"s2\">\"blog\"</span> application created.\n\n\n    - Do not forget to add your <span class=\"sb\">`</span>blog<span class=\"sb\">`</span> to <span class=\"sb\">`</span>INSTALLED_APPS<span class=\"sb\">`</span> under <span class=\"sb\">`</span>config/settings/base.py<span class=\"sb\">`</span>:\n\n    <span class=\"nv\">INSTALLED_APPS</span> <span class=\"o\">+=</span> <span class=\"o\">[</span>\n        <span class=\"s1\">'django_extensions'</span>,\n        <span class=\"s1\">'blog.apps.BlogConfig'</span>, <span class=\"c1\"># &lt;-- add this</span>\n    <span class=\"o\">]</span>\n\n    - Do not forget to fix your <span class=\"sb\">`</span>config/urls.py<span class=\"sb\">`</span>:\n\n    <span class=\"c1\"># ...</span>\n    <span class=\"c1\"># add your newly created app's urls here!</span>\n    <span class=\"nv\">urlpatterns</span> <span class=\"o\">+=</span> <span class=\"o\">[</span>\n        <span class=\"c1\"># ...</span>\n        <span class=\"c1\"># this is just an example!</span>\n        path<span class=\"o\">(</span><span class=\"s1\">'__blog__/'</span>, include<span class=\"o\">(</span><span class=\"s1\">'blog.urls'</span>, <span class=\"nv\">namespace</span><span class=\"o\">=</span><span class=\"s1\">'blog'</span><span class=\"o\">))</span>,\n        <span class=\"c1\"># ..</span>\n    <span class=\"o\">]</span>\n    <span class=\"c1\"># ...</span>\n</pre>\n<p>You can follow the instructions, fix your <code>config/settings/base.py</code> and\n<code>config/urls.py</code> as seen on the command output. Now run development server\nand call the url:</p>\n<pre>$ python manage.py runserver_plus\n</pre>\n<p>Open <code>http://127.0.0.1:8000/__blog__/</code>. Also, another builtin app is running;\n<code>http://127.0.0.1:8000/__vb_baseapp__/</code>. You can remove <code>__vb_baseapp__</code>\nconfig from <code>config/urls.py</code>.</p>\n<p>Now let\u2019s add some models. We have 3 choices as parameters:</p>\n<ol>\n<li><code>django</code>: Uses Django\u2019s <code>models.Model</code></li>\n<li><code>basemodel</code>: Uses <code>CustomBaseModel</code> (which inherits from <code>models.Model</code>)</li>\n<li><code>softdelete</code>: Uses <code>CustomBaseModelWithSoftDelete</code></li>\n</ol>\n<p>We\u2019ll use soft-deletable model to demonstrate soft-delete features. Let\u2019s\ncreate <code>Post</code>, <code>Category</code> and <code>Tag</code> models:</p>\n<pre>$ python manage.py create_model blog post softdelete\n\n<span class=\"c1\"># or</span>\n\n$ rake new:model<span class=\"o\">[</span>blog,post,softdelete<span class=\"o\">]</span>\n\nmodels/post.py created.\nadmin/post.py created.\npost model added to models/__init__.py\npost model added to admin/__init__.py\n\n\n    <span class=\"sb\">`</span>post<span class=\"sb\">`</span> related files created successfully:\n\n    - <span class=\"sb\">`</span>blog/models/post.py<span class=\"sb\">`</span>\n    - <span class=\"sb\">`</span>blog/admin/post.py<span class=\"sb\">`</span>\n\n    Please check your models before running <span class=\"sb\">`</span>makemigrations<span class=\"sb\">`</span> ok?\n\n$ python manage.py create_model blog category softdelete\n\n<span class=\"c1\"># or</span>\n\n$ rake new:model<span class=\"o\">[</span>blog,category,softdelete<span class=\"o\">]</span>\n\nmodels/category.py created.\nadmin/category.py created.\ncategory model added to models/__init__.py\ncategory model added to admin/__init__.py\n\n\n    <span class=\"sb\">`</span>category<span class=\"sb\">`</span> related files created successfully:\n\n    - <span class=\"sb\">`</span>blog/models/category.py<span class=\"sb\">`</span>\n    - <span class=\"sb\">`</span>blog/admin/category.py<span class=\"sb\">`</span>\n\n    Please check your models before running <span class=\"sb\">`</span>makemigrations<span class=\"sb\">`</span> ok?\n\n$ python manage.py create_model blog tag softdelete\n\n<span class=\"c1\"># or</span>\n\n$ rake new:model<span class=\"o\">[</span>blog,tag,softdelete<span class=\"o\">]</span>\n\nmodels/tag.py created.\nadmin/tag.py created.\ntag model added to models/__init__.py\ntag model added to admin/__init__.py\n\n\n    <span class=\"sb\">`</span>tag<span class=\"sb\">`</span> related files created successfully:\n\n    - <span class=\"sb\">`</span>blog/models/tag.py<span class=\"sb\">`</span>\n    - <span class=\"sb\">`</span>blog/admin/tag.py<span class=\"sb\">`</span>\n\n    Please check your models before running <span class=\"sb\">`</span>makemigrations<span class=\"sb\">`</span> ok?\n</pre>\n<p>Let\u2019s fix models before creating and executing migrations:</p>\n<pre><span class=\"c1\"># blog/models/post.py</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">django.conf</span> <span class=\"kn\">import</span> <span class=\"n\">settings</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.db</span> <span class=\"kn\">import</span> <span class=\"n\">models</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.utils.translation</span> <span class=\"kn\">import</span> <span class=\"n\">ugettext_lazy</span> <span class=\"k\">as</span> <span class=\"n\">_</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">console</span> <span class=\"kn\">import</span> <span class=\"n\">console</span>\n<span class=\"kn\">from</span> <span class=\"nn\">vb_baseapp.models</span> <span class=\"kn\">import</span> <span class=\"n\">CustomBaseModelWithSoftDelete</span>\n\n<span class=\"n\">__all__</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'Post'</span><span class=\"p\">]</span>\n\n<span class=\"n\">logger</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">getLogger</span><span class=\"p\">(</span><span class=\"s1\">'app'</span><span class=\"p\">)</span>\n<span class=\"n\">console</span> <span class=\"o\">=</span> <span class=\"n\">console</span><span class=\"p\">(</span><span class=\"n\">source</span><span class=\"o\">=</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Post</span><span class=\"p\">(</span><span class=\"n\">CustomBaseModelWithSoftDelete</span><span class=\"p\">):</span>\n    <span class=\"n\">author</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">ForeignKey</span><span class=\"p\">(</span>\n        <span class=\"n\">to</span><span class=\"o\">=</span><span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">AUTH_USER_MODEL</span><span class=\"p\">,</span> <span class=\"n\">on_delete</span><span class=\"o\">=</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CASCADE</span><span class=\"p\">,</span> <span class=\"n\">related_name</span><span class=\"o\">=</span><span class=\"s1\">'posts'</span><span class=\"p\">,</span> <span class=\"n\">verbose_name</span><span class=\"o\">=</span><span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s1\">'author'</span><span class=\"p\">)</span>\n    <span class=\"p\">)</span>\n    <span class=\"n\">category</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">ForeignKey</span><span class=\"p\">(</span>\n        <span class=\"n\">to</span><span class=\"o\">=</span><span class=\"s1\">'Category'</span><span class=\"p\">,</span> <span class=\"n\">on_delete</span><span class=\"o\">=</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CASCADE</span><span class=\"p\">,</span> <span class=\"n\">related_name</span><span class=\"o\">=</span><span class=\"s1\">'posts'</span><span class=\"p\">,</span> <span class=\"n\">verbose_name</span><span class=\"o\">=</span><span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s1\">'category'</span><span class=\"p\">)</span>\n    <span class=\"p\">)</span>\n    <span class=\"n\">title</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">255</span><span class=\"p\">,</span> <span class=\"n\">verbose_name</span><span class=\"o\">=</span><span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s1\">'title'</span><span class=\"p\">))</span>\n    <span class=\"n\">body</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">TextField</span><span class=\"p\">(</span><span class=\"n\">verbose_name</span><span class=\"o\">=</span><span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s1\">'body'</span><span class=\"p\">))</span>\n    <span class=\"n\">tags</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">ManyToManyField</span><span class=\"p\">(</span><span class=\"n\">to</span><span class=\"o\">=</span><span class=\"s1\">'Tag'</span><span class=\"p\">,</span> <span class=\"n\">related_name</span><span class=\"o\">=</span><span class=\"s1\">'posts'</span><span class=\"p\">,</span> <span class=\"n\">blank</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">app_label</span> <span class=\"o\">=</span> <span class=\"s1\">'blog'</span>\n        <span class=\"n\">verbose_name</span> <span class=\"o\">=</span> <span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s1\">'post'</span><span class=\"p\">)</span>\n        <span class=\"n\">verbose_name_plural</span> <span class=\"o\">=</span> <span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s1\">'posts'</span><span class=\"p\">)</span>  <span class=\"c1\"># check pluralization</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__str__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">title</span>\n</pre>\n<p>and <code>Category</code> model:</p>\n<pre><span class=\"c1\"># blog/models/category.py</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">django.db</span> <span class=\"kn\">import</span> <span class=\"n\">models</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.utils.translation</span> <span class=\"kn\">import</span> <span class=\"n\">ugettext_lazy</span> <span class=\"k\">as</span> <span class=\"n\">_</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">console</span> <span class=\"kn\">import</span> <span class=\"n\">console</span>\n<span class=\"kn\">from</span> <span class=\"nn\">vb_baseapp.models</span> <span class=\"kn\">import</span> <span class=\"n\">CustomBaseModelWithSoftDelete</span>\n\n<span class=\"n\">__all__</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'Category'</span><span class=\"p\">]</span>\n\n<span class=\"n\">logger</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">getLogger</span><span class=\"p\">(</span><span class=\"s1\">'app'</span><span class=\"p\">)</span>\n<span class=\"n\">console</span> <span class=\"o\">=</span> <span class=\"n\">console</span><span class=\"p\">(</span><span class=\"n\">source</span><span class=\"o\">=</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Category</span><span class=\"p\">(</span><span class=\"n\">CustomBaseModelWithSoftDelete</span><span class=\"p\">):</span>\n    <span class=\"n\">title</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">255</span><span class=\"p\">,</span> <span class=\"n\">verbose_name</span><span class=\"o\">=</span><span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s1\">'title'</span><span class=\"p\">))</span>\n\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">app_label</span> <span class=\"o\">=</span> <span class=\"s1\">'blog'</span>\n        <span class=\"n\">verbose_name</span> <span class=\"o\">=</span> <span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s1\">'category'</span><span class=\"p\">)</span>\n        <span class=\"n\">verbose_name_plural</span> <span class=\"o\">=</span> <span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s1\">'categories'</span><span class=\"p\">)</span>  <span class=\"c1\"># check pluralization</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__str__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">title</span>\n</pre>\n<p>and <code>Tag</code> model:</p>\n<pre><span class=\"c1\"># blog/models/tag.py</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">django.db</span> <span class=\"kn\">import</span> <span class=\"n\">models</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.utils.translation</span> <span class=\"kn\">import</span> <span class=\"n\">ugettext_lazy</span> <span class=\"k\">as</span> <span class=\"n\">_</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">console</span> <span class=\"kn\">import</span> <span class=\"n\">console</span>\n<span class=\"kn\">from</span> <span class=\"nn\">vb_baseapp.models</span> <span class=\"kn\">import</span> <span class=\"n\">CustomBaseModelWithSoftDelete</span>\n\n<span class=\"n\">__all__</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'Tag'</span><span class=\"p\">]</span>\n\n<span class=\"n\">logger</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">getLogger</span><span class=\"p\">(</span><span class=\"s1\">'app'</span><span class=\"p\">)</span>\n<span class=\"n\">console</span> <span class=\"o\">=</span> <span class=\"n\">console</span><span class=\"p\">(</span><span class=\"n\">source</span><span class=\"o\">=</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Tag</span><span class=\"p\">(</span><span class=\"n\">CustomBaseModelWithSoftDelete</span><span class=\"p\">):</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">255</span><span class=\"p\">,</span> <span class=\"n\">verbose_name</span><span class=\"o\">=</span><span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s1\">'name'</span><span class=\"p\">))</span>\n\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">app_label</span> <span class=\"o\">=</span> <span class=\"s1\">'blog'</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__str__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span>\n</pre>\n<p>Let\u2019s create and run migration file:</p>\n<pre>$ python manage.py makemigrations --name create_post_category_and_tag\n\n<span class=\"c1\"># or</span>\n\n$ rake db:update<span class=\"o\">[</span>blog,create_post_category_and_tag<span class=\"o\">]</span>\n\nMigrations <span class=\"k\">for</span> <span class=\"s1\">'blog'</span>:\n  applications/blog/migrations/0001_create_post_category_and_tag.py\n    - Create model Category\n    - Create model Tag\n    - Create model Post\n\n$ python manage.py migrate\n\n<span class=\"c1\"># or</span>\n\n$ rake db:migrate\n\nOperations to perform:\n  Apply all migrations: admin, auth, blog, contenttypes, sessions\nRunning migrations:\n  Applying blog.0001_create_post_category_and_tag... OK\n</pre>\n<p>Now we have a model which has relations to other models via <code>ForeignKey</code> and\n<code>ManyToMany</code> level. Let\u2019s tweak <code>blog/admin/post.py</code>:</p>\n<pre><span class=\"c1\"># blog/admin/post.py</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">django.contrib</span> <span class=\"kn\">import</span> <span class=\"n\">admin</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">console</span> <span class=\"kn\">import</span> <span class=\"n\">console</span>\n<span class=\"kn\">from</span> <span class=\"nn\">vb_baseapp.admin</span> <span class=\"kn\">import</span> <span class=\"p\">(</span>\n    <span class=\"n\">CustomBaseModelAdminWithSoftDelete</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">..models</span> <span class=\"kn\">import</span> <span class=\"n\">Post</span>\n\n<span class=\"n\">__all__</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'PostAdmin'</span><span class=\"p\">]</span>\n\n<span class=\"n\">logger</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">getLogger</span><span class=\"p\">(</span><span class=\"s1\">'app'</span><span class=\"p\">)</span>\n<span class=\"n\">console</span> <span class=\"o\">=</span> <span class=\"n\">console</span><span class=\"p\">(</span><span class=\"n\">source</span><span class=\"o\">=</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n\n\n<span class=\"nd\">@admin</span><span class=\"o\">.</span><span class=\"n\">register</span><span class=\"p\">(</span><span class=\"n\">Post</span><span class=\"p\">)</span>\n<span class=\"k\">class</span> <span class=\"nc\">PostAdmin</span><span class=\"p\">(</span><span class=\"n\">CustomBaseModelAdminWithSoftDelete</span><span class=\"p\">):</span>\n    <span class=\"n\">list_filter</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">'category'</span><span class=\"p\">,</span> <span class=\"s1\">'tags'</span><span class=\"p\">,</span> <span class=\"s1\">'author'</span><span class=\"p\">)</span>\n    <span class=\"n\">list_display</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">'__str__'</span><span class=\"p\">,</span> <span class=\"s1\">'author'</span><span class=\"p\">)</span>\n    <span class=\"n\">ordering</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">'title'</span><span class=\"p\">,)</span>\n    <span class=\"c1\"># hide_deleted_at = False</span>\n</pre>\n<p>Let\u2019s create a super user and jump in to admin pages. <code>AUTH_PASSWORD_VALIDATORS</code>\nis removed from <strong>development</strong> settings, you can type any password :)</p>\n<pre>$ python manage.py createsuperuser --username<span class=\"o\">=</span><span class=\"s2\">\"</span><span class=\"si\">${</span><span class=\"nv\">USER</span><span class=\"si\">}</span><span class=\"s2\">\"</span> --email<span class=\"o\">=</span><span class=\"s2\">\"your@email.com\"</span>\n$ python manage.py runserver_plus\n\n<span class=\"c1\"># or</span>\n\n$ rake\n\nINFO <span class=\"p\">|</span>  * Running on http://127.0.0.1:8000/ <span class=\"o\">(</span>Press CTRL+C to quit<span class=\"o\">)</span>\nINFO <span class=\"p\">|</span>  * Restarting with stat\nPerforming system checks...\n\nSystem check identified no issues <span class=\"o\">(</span><span class=\"m\">0</span> silenced<span class=\"o\">)</span>.\n\nDjango version X.X.X, using settings <span class=\"s1\">'config.settings.development'</span>\nDevelopment server is running at http://<span class=\"o\">[</span><span class=\"m\">127</span>.0.0.1<span class=\"o\">]</span>:8000/\nUsing the Werkzeug debugger <span class=\"o\">(</span>http://werkzeug.pocoo.org/<span class=\"o\">)</span>\nQuit the server with CONTROL-C.\nWARNING <span class=\"p\">|</span>  * Debugger is active!\nWARNING <span class=\"p\">|</span>  * Debugger PIN disabled. DEBUGGER UNSECURED!\nINFO <span class=\"p\">|</span> GET <span class=\"p\">|</span> <span class=\"m\">302</span> <span class=\"p\">|</span> /admin/\nINFO <span class=\"p\">|</span> GET <span class=\"p\">|</span> <span class=\"m\">200</span> <span class=\"p\">|</span> /admin/login/?next<span class=\"o\">=</span>/admin/\nINFO <span class=\"p\">|</span> GET <span class=\"p\">|</span> <span class=\"m\">404</span> <span class=\"p\">|</span> /favicon.ico\n:\n:\n</pre>\n<p>Now open <code>http://127.0.0.1:8000/admin/</code> and add a new blog post!\nCreate different categories and tags. Then open\n<code>http://127.0.0.1:8000/admin/blog/category/</code> page.</p>\n<p>In the Action menu, you\u2019ll have couple extra options:</p>\n<ul>\n<li>Delete selected categories</li>\n<li>Recover selected categories (<em>Appears if you are filtering inactive records</em>)</li>\n<li>Hard delete selected categories</li>\n</ul>\n<p>Now, delete one or more categories or tags. Check <strong>activity state</strong> filter\nfor post, category and tag models. You can recover deleted items from the\naction menu too.</p>\n<hr>\n<h2>Models</h2>\n<h3><code>CustomBaseModel</code></h3>\n<p>This is a common model. By default, <code>CustomBaseModel</code> contains these fields:</p>\n<ul>\n<li><code>created_at</code></li>\n<li><code>updated_at</code></li>\n</ul>\n<p>Almost a default <code>models.Model</code> with two extra fields.</p>\n<h3><code>CustomBaseModelWithSoftDelete</code></h3>\n<p>This model inherits from <code>CustomBaseModel</code> and provides fake deletion which is\nprobably called <strong>SOFT DELETE</strong>. This means, when you call model\u2019s <code>delete()</code>\nmethod or QuerySet\u2019s <code>delete()</code> method, it acts like delete action but never\ndeletes the data.</p>\n<p>Just sets the <code>deleted_at</code> field to <strong>NOW</strong>.</p>\n<p>This works exactly like Django\u2019s <code>delete()</code>. Broadcasts <code>pre_delete</code> and\n<code>post_delete</code> signals and returns the number of objects marked as deleted and\na dictionary with the number of deletion-marks per object type.</p>\n<p>You can call <code>hard_delete()</code> method to delete an instance or a queryset\nactually.</p>\n<p>This model uses <code>CustomBaseModelWithSoftDeleteManager</code> as default manager.</p>\n<h4>How soft-delete works?</h4>\n<p>When you call <code>.delete()</code> method of a model instance or queryset, model manager\nsets <code>deleted_at</code> attribute to <strong>NOW</strong> all the way down through related\n<code>ForeignKey</code> and <code>ManyToMany</code> fields. This means, you still keep everything.</p>\n<p>Nothing is actually deleted, therefore your database constraints are still\nwork fine. When you access deleted (<em>inactive</em>) object from admin site, you\u2019ll\nsee \"deleted\" text prefix in your related form fields if your related objects\nare <code>CustomBaseModelWithSoftDelete</code> instances.</p>\n<p>When you click <strong>recover</strong> button in the same page, all related and soft-deleted\nobjects\u2019 <code>deleted_at</code> value will set to <code>NULL</code> and available again.</p>\n<p>Please use <code>.actives()</code> queryset method instead of <code>.all()</code>. Why? <code>.all()</code>\nmethod is untouched and works as default. When <code>all()</code> called, returning\nqueryset set contains everything event if the <code>deleted_at</code> is NULL or not...</p>\n<h4>Examples</h4>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Post</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span>\n\n<span class=\"n\">SELECT</span> <span class=\"s2\">\"blog_post\"</span><span class=\"o\">.</span><span class=\"s2\">\"id\"</span><span class=\"p\">,</span>\n       <span class=\"s2\">\"blog_post\"</span><span class=\"o\">.</span><span class=\"s2\">\"created_at\"</span><span class=\"p\">,</span>\n       <span class=\"s2\">\"blog_post\"</span><span class=\"o\">.</span><span class=\"s2\">\"updated_at\"</span><span class=\"p\">,</span>\n       <span class=\"s2\">\"blog_post\"</span><span class=\"o\">.</span><span class=\"s2\">\"deleted_at\"</span><span class=\"p\">,</span>\n       <span class=\"s2\">\"blog_post\"</span><span class=\"o\">.</span><span class=\"s2\">\"author_id\"</span><span class=\"p\">,</span>\n       <span class=\"s2\">\"blog_post\"</span><span class=\"o\">.</span><span class=\"s2\">\"category_id\"</span><span class=\"p\">,</span>\n       <span class=\"s2\">\"blog_post\"</span><span class=\"o\">.</span><span class=\"s2\">\"title\"</span><span class=\"p\">,</span>\n       <span class=\"s2\">\"blog_post\"</span><span class=\"o\">.</span><span class=\"s2\">\"body\"</span>\n  <span class=\"n\">FROM</span> <span class=\"s2\">\"blog_post\"</span>\n <span class=\"n\">LIMIT</span> <span class=\"mi\">21</span>\n\n\n<span class=\"n\">Execution</span> <span class=\"n\">time</span><span class=\"p\">:</span> <span class=\"mf\">0.000950</span><span class=\"n\">s</span> <span class=\"p\">[</span><span class=\"n\">Database</span><span class=\"p\">:</span> <span class=\"n\">default</span><span class=\"p\">]</span>\n\n<span class=\"o\">&lt;</span><span class=\"n\">CustomBaseModelWithSoftDeleteQuerySet</span> <span class=\"p\">[</span>\n    <span class=\"o\">&lt;</span><span class=\"n\">Post</span><span class=\"p\">:</span> <span class=\"n\">Python</span> <span class=\"n\">post</span> <span class=\"mi\">1</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> \n    <span class=\"o\">&lt;</span><span class=\"n\">Post</span><span class=\"p\">:</span> <span class=\"n\">Python</span> <span class=\"n\">post</span> <span class=\"mi\">2</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> \n    <span class=\"o\">&lt;</span><span class=\"n\">Post</span><span class=\"p\">:</span> <span class=\"n\">Python</span> <span class=\"n\">post</span> <span class=\"mi\">3</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> \n    <span class=\"o\">&lt;</span><span class=\"n\">Post</span><span class=\"p\">:</span> <span class=\"n\">Python</span> <span class=\"n\">post</span> <span class=\"mi\">4</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n    <span class=\"p\">:</span>\n    <span class=\"p\">:</span>\n    <span class=\"p\">:</span>\n    <span class=\"o\">&lt;</span><span class=\"n\">Post</span><span class=\"p\">:</span> <span class=\"n\">Golang</span> <span class=\"n\">post</span> <span class=\"mi\">4</span><span class=\"o\">&gt;</span>\n<span class=\"p\">]</span><span class=\"o\">&gt;</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Category</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span>\n\n<span class=\"n\">SELECT</span> <span class=\"s2\">\"blog_category\"</span><span class=\"o\">.</span><span class=\"s2\">\"id\"</span><span class=\"p\">,</span>\n       <span class=\"s2\">\"blog_category\"</span><span class=\"o\">.</span><span class=\"s2\">\"created_at\"</span><span class=\"p\">,</span>\n       <span class=\"s2\">\"blog_category\"</span><span class=\"o\">.</span><span class=\"s2\">\"updated_at\"</span><span class=\"p\">,</span>\n       <span class=\"s2\">\"blog_category\"</span><span class=\"o\">.</span><span class=\"s2\">\"deleted_at\"</span><span class=\"p\">,</span>\n       <span class=\"s2\">\"blog_category\"</span><span class=\"o\">.</span><span class=\"s2\">\"title\"</span>\n  <span class=\"n\">FROM</span> <span class=\"s2\">\"blog_category\"</span>\n <span class=\"n\">LIMIT</span> <span class=\"mi\">21</span>\n\n\n<span class=\"n\">Execution</span> <span class=\"n\">time</span><span class=\"p\">:</span> <span class=\"mf\">0.000643</span><span class=\"n\">s</span> <span class=\"p\">[</span><span class=\"n\">Database</span><span class=\"p\">:</span> <span class=\"n\">default</span><span class=\"p\">]</span>\n\n<span class=\"o\">&lt;</span><span class=\"n\">CustomBaseModelWithSoftDeleteQuerySet</span> <span class=\"p\">[</span><span class=\"o\">&lt;</span><span class=\"n\">Category</span><span class=\"p\">:</span> <span class=\"n\">Python</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"o\">&lt;</span><span class=\"n\">Category</span><span class=\"p\">:</span> <span class=\"n\">Ruby</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"o\">&lt;</span><span class=\"n\">Category</span><span class=\"p\">:</span> <span class=\"n\">Bash</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"o\">&lt;</span><span class=\"n\">Category</span><span class=\"p\">:</span> <span class=\"n\">Golang</span><span class=\"o\">&gt;</span><span class=\"p\">]</span><span class=\"o\">&gt;</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Tag</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span>\n\n<span class=\"n\">SELECT</span> <span class=\"s2\">\"blog_tag\"</span><span class=\"o\">.</span><span class=\"s2\">\"id\"</span><span class=\"p\">,</span>\n       <span class=\"s2\">\"blog_tag\"</span><span class=\"o\">.</span><span class=\"s2\">\"created_at\"</span><span class=\"p\">,</span>\n       <span class=\"s2\">\"blog_tag\"</span><span class=\"o\">.</span><span class=\"s2\">\"updated_at\"</span><span class=\"p\">,</span>\n       <span class=\"s2\">\"blog_tag\"</span><span class=\"o\">.</span><span class=\"s2\">\"deleted_at\"</span><span class=\"p\">,</span>\n       <span class=\"s2\">\"blog_tag\"</span><span class=\"o\">.</span><span class=\"s2\">\"name\"</span>\n  <span class=\"n\">FROM</span> <span class=\"s2\">\"blog_tag\"</span>\n <span class=\"n\">LIMIT</span> <span class=\"mi\">21</span>\n\n\n<span class=\"n\">Execution</span> <span class=\"n\">time</span><span class=\"p\">:</span> <span class=\"mf\">0.000519</span><span class=\"n\">s</span> <span class=\"p\">[</span><span class=\"n\">Database</span><span class=\"p\">:</span> <span class=\"n\">default</span><span class=\"p\">]</span>\n\n<span class=\"o\">&lt;</span><span class=\"n\">CustomBaseModelWithSoftDeleteQuerySet</span> <span class=\"p\">[</span><span class=\"o\">&lt;</span><span class=\"n\">Tag</span><span class=\"p\">:</span> <span class=\"n\">textmate</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"o\">&lt;</span><span class=\"n\">Tag</span><span class=\"p\">:</span> <span class=\"n\">pyc</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"o\">&lt;</span><span class=\"n\">Tag</span><span class=\"p\">:</span> <span class=\"n\">irb</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"o\">&lt;</span><span class=\"n\">Tag</span><span class=\"p\">:</span> <span class=\"n\">ipython</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"o\">&lt;</span><span class=\"n\">Tag</span><span class=\"p\">:</span> <span class=\"n\">lock</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"o\">&lt;</span><span class=\"n\">Tag</span><span class=\"p\">:</span> <span class=\"n\">environment</span><span class=\"o\">&gt;</span><span class=\"p\">]</span><span class=\"o\">&gt;</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Category</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">title</span><span class=\"o\">=</span><span class=\"s1\">'Bash'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">()</span>\n<span class=\"p\">(</span><span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">'blog.Post_tags'</span><span class=\"p\">:</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"s1\">'blog.Category'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'blog.Post'</span><span class=\"p\">:</span> <span class=\"mi\">4</span><span class=\"p\">})</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Category</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">()</span>\n<span class=\"p\">(</span><span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">'blog.Post_tags'</span><span class=\"p\">:</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"s1\">'blog.Category'</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"s1\">'blog.Post'</span><span class=\"p\">:</span> <span class=\"mi\">4</span><span class=\"p\">})</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Category</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">inactives</span><span class=\"p\">()</span>\n\n<span class=\"n\">SELECT</span> <span class=\"s2\">\"blog_category\"</span><span class=\"o\">.</span><span class=\"s2\">\"id\"</span><span class=\"p\">,</span>\n       <span class=\"s2\">\"blog_category\"</span><span class=\"o\">.</span><span class=\"s2\">\"created_at\"</span><span class=\"p\">,</span>\n       <span class=\"s2\">\"blog_category\"</span><span class=\"o\">.</span><span class=\"s2\">\"updated_at\"</span><span class=\"p\">,</span>\n       <span class=\"s2\">\"blog_category\"</span><span class=\"o\">.</span><span class=\"s2\">\"deleted_at\"</span><span class=\"p\">,</span>\n       <span class=\"s2\">\"blog_category\"</span><span class=\"o\">.</span><span class=\"s2\">\"title\"</span>\n  <span class=\"n\">FROM</span> <span class=\"s2\">\"blog_category\"</span>\n <span class=\"n\">WHERE</span> <span class=\"s2\">\"blog_category\"</span><span class=\"o\">.</span><span class=\"s2\">\"deleted_at\"</span> <span class=\"n\">IS</span> <span class=\"n\">NOT</span> <span class=\"n\">NULL</span>\n <span class=\"n\">LIMIT</span> <span class=\"mi\">21</span>\n\n\n<span class=\"n\">Execution</span> <span class=\"n\">time</span><span class=\"p\">:</span> <span class=\"mf\">0.000337</span><span class=\"n\">s</span> <span class=\"p\">[</span><span class=\"n\">Database</span><span class=\"p\">:</span> <span class=\"n\">default</span><span class=\"p\">]</span>\n\n<span class=\"o\">&lt;</span><span class=\"n\">CustomBaseModelWithSoftDeleteQuerySet</span> <span class=\"p\">[</span><span class=\"o\">&lt;</span><span class=\"n\">Category</span><span class=\"p\">:</span> <span class=\"n\">Bash</span><span class=\"o\">&gt;</span><span class=\"p\">]</span><span class=\"o\">&gt;</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Post</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">inactives</span><span class=\"p\">()</span>\n\n<span class=\"n\">SELECT</span> <span class=\"s2\">\"blog_post\"</span><span class=\"o\">.</span><span class=\"s2\">\"id\"</span><span class=\"p\">,</span>\n       <span class=\"s2\">\"blog_post\"</span><span class=\"o\">.</span><span class=\"s2\">\"created_at\"</span><span class=\"p\">,</span>\n       <span class=\"s2\">\"blog_post\"</span><span class=\"o\">.</span><span class=\"s2\">\"updated_at\"</span><span class=\"p\">,</span>\n       <span class=\"s2\">\"blog_post\"</span><span class=\"o\">.</span><span class=\"s2\">\"deleted_at\"</span><span class=\"p\">,</span>\n       <span class=\"s2\">\"blog_post\"</span><span class=\"o\">.</span><span class=\"s2\">\"author_id\"</span><span class=\"p\">,</span>\n       <span class=\"s2\">\"blog_post\"</span><span class=\"o\">.</span><span class=\"s2\">\"category_id\"</span><span class=\"p\">,</span>\n       <span class=\"s2\">\"blog_post\"</span><span class=\"o\">.</span><span class=\"s2\">\"title\"</span><span class=\"p\">,</span>\n       <span class=\"s2\">\"blog_post\"</span><span class=\"o\">.</span><span class=\"s2\">\"body\"</span>\n  <span class=\"n\">FROM</span> <span class=\"s2\">\"blog_post\"</span>\n <span class=\"n\">WHERE</span> <span class=\"s2\">\"blog_post\"</span><span class=\"o\">.</span><span class=\"s2\">\"deleted_at\"</span> <span class=\"n\">IS</span> <span class=\"n\">NOT</span> <span class=\"n\">NULL</span>\n <span class=\"n\">LIMIT</span> <span class=\"mi\">21</span>\n\n\n<span class=\"n\">Execution</span> <span class=\"n\">time</span><span class=\"p\">:</span> <span class=\"mf\">0.000387</span><span class=\"n\">s</span> <span class=\"p\">[</span><span class=\"n\">Database</span><span class=\"p\">:</span> <span class=\"n\">default</span><span class=\"p\">]</span>\n\n<span class=\"o\">&lt;</span><span class=\"n\">CustomBaseModelWithSoftDeleteQuerySet</span> <span class=\"p\">[</span><span class=\"o\">&lt;</span><span class=\"n\">Post</span><span class=\"p\">:</span> <span class=\"n\">Bash</span> <span class=\"n\">post</span> <span class=\"mi\">1</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"o\">&lt;</span><span class=\"n\">Post</span><span class=\"p\">:</span> <span class=\"n\">Bash</span> <span class=\"n\">post</span> <span class=\"mi\">2</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"o\">&lt;</span><span class=\"n\">Post</span><span class=\"p\">:</span> <span class=\"n\">Bash</span> <span class=\"n\">post</span> <span class=\"mi\">3</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"o\">&lt;</span><span class=\"n\">Post</span><span class=\"p\">:</span> <span class=\"n\">Bash</span> <span class=\"n\">post</span> <span class=\"mi\">4</span><span class=\"o\">&gt;</span><span class=\"p\">]</span><span class=\"o\">&gt;</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Category</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">inactives</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">undelete</span><span class=\"p\">()</span>\n<span class=\"p\">(</span><span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">'blog.Post_tags'</span><span class=\"p\">:</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"s1\">'blog.Category'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'blog.Post'</span><span class=\"p\">:</span> <span class=\"mi\">4</span><span class=\"p\">})</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Category</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">inactives</span><span class=\"p\">()</span>\n<span class=\"o\">&lt;</span><span class=\"n\">CustomBaseModelWithSoftDeleteQuerySet</span> <span class=\"p\">[]</span><span class=\"o\">&gt;</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Post</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">inactives</span><span class=\"p\">()</span>\n<span class=\"o\">&lt;</span><span class=\"n\">CustomBaseModelWithSoftDeleteQuerySet</span> <span class=\"p\">[]</span><span class=\"o\">&gt;</span>\n</pre>\n<p><code>CustomBaseModelWithSoftDeleteQuerySet</code> has these query options:</p>\n<ul>\n<li><code>.actives()</code> : filters if <code>CustomBaseModelWithSoftDelete.deleted_at</code> is set to <code>NULL</code></li>\n<li><code>.inactives()</code> : filters if <code>CustomBaseModelWithSoftDelete.deleted_at</code> is not set to <code>NULL</code></li>\n<li><code>.delete()</code> : soft delete on given object/queryset.</li>\n<li><code>.undelete()</code> : recover soft deleted on given object/queryset.</li>\n<li><code>.hard_delete()</code> : this is real delete. this method erases given object/queryset and there is no turning back!.</li>\n</ul>\n<p>When soft-delete enabled (<em>during model creation</em>), Django admin will\nautomatically use <code>CustomBaseModelAdminWithSoftDelete</code> which is inherited from:\n<code>CustomBaseModelAdmin</code> &lt;- <code>admin.ModelAdmin</code>.</p>\n<hr>\n<h2>Model Admins</h2>\n<h3><code>CustomBaseModelAdmin</code>, <code>CustomBaseModelAdminWithSoftDelete</code></h3>\n<p>Inherits from <code>admin.ModelAdmin</code>. When model is created via <code>rake new:model...</code>\nor via management command, admin file is generated automatically.</p>\n<p>This model admin overrides <code>models.ImageField</code> form field and displays fancy\nthumbnail for images. By default, uses cached paginator and sets <code>show_full_result_count</code>\nto <code>False</code> for performance improvements.</p>\n<h4>Model Admin Properties</h4>\n<p><code>show_goback_button</code> is set to <code>True</code> by default. You can disable via;</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">ExampleAdmin</span><span class=\"p\">(</span><span class=\"n\">CustomBaseModelAdminWithSoftDelete</span><span class=\"p\">):</span>\n    <span class=\"c1\"># ...</span>\n    <span class=\"n\">show_goback_button</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n    <span class=\"c1\"># ...</span>\n</pre>\n<ul>\n<li><code>show_full_result_count</code> is set to <code>False</code> by default.</li>\n<li><code>hide_deleted_at</code> is set to <code>True</code> by default. This means, you will not see\nthat field while editing the instance.</li>\n</ul>\n<p>Example for <code>Post</code> model admin (<em>auto generated</em>).</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">django.contrib</span> <span class=\"kn\">import</span> <span class=\"n\">admin</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">console</span> <span class=\"kn\">import</span> <span class=\"n\">console</span>\n<span class=\"kn\">from</span> <span class=\"nn\">vb_baseapp.admin</span> <span class=\"kn\">import</span> <span class=\"p\">(</span>\n    <span class=\"n\">CustomBaseModelAdminWithSoftDelete</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">..models</span> <span class=\"kn\">import</span> <span class=\"n\">Post</span>\n\n<span class=\"n\">__all__</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'PostAdmin'</span><span class=\"p\">]</span>\n\n<span class=\"n\">logger</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">getLogger</span><span class=\"p\">(</span><span class=\"s1\">'app'</span><span class=\"p\">)</span>\n<span class=\"n\">console</span> <span class=\"o\">=</span> <span class=\"n\">console</span><span class=\"p\">(</span><span class=\"n\">source</span><span class=\"o\">=</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n\n\n<span class=\"nd\">@admin</span><span class=\"o\">.</span><span class=\"n\">register</span><span class=\"p\">(</span><span class=\"n\">Post</span><span class=\"p\">)</span>\n<span class=\"k\">class</span> <span class=\"nc\">PostAdmin</span><span class=\"p\">(</span><span class=\"n\">CustomBaseModelAdminWithSoftDelete</span><span class=\"p\">):</span>\n    <span class=\"c1\"># hide_deleted_at = False</span>\n</pre>\n<p>By default, <code>deleted_at</code> excluded from admin form like <code>created_at</code> and\n<code>updated_at</code> fields. You can also override this via <code>hide_deleted_at</code>\nattribute. Comment/Uncomment lines according to your needs! This works only in\n<code>CustomBaseModelAdminWithSoftDelete</code>.</p>\n<p><code>CustomBaseModelAdminWithSoftDelete</code> also comes with special admin action. You can\nrecover/make active (<em>undelete</em>) multiple objects like deleting feature of\nDjango\u2019s default.</p>\n<h3>Extra Features</h3>\n<p>When you\u2019re dealing with soft-deleted objects, you\u2019ll see <strong>HARD DELETE</strong> and\n<strong>RECOVER</strong> buttons in the change form. Hard delete really wipes the items\nfrom database. Recover, recovers/undeletes object and related elements.</p>\n<p>You\u2019ll also have <strong>GO BACK</strong> button too :)</p>\n<hr>\n<h2>MiddleWare</h2>\n<h3><code>CustomLocaleMiddleware</code></h3>\n<p>This is mostly used for our custom projects. Injects <code>LANGUAGE_CODE</code> variable to\n<code>request</code> object. <code>/en/path/to/page/</code> sets <code>request.LANGUAGE_CODE</code> to <code>en</code> otherwise <code>tr</code>.</p>\n<pre><span class=\"c1\"># add this to your settings/base.py</span>\n<span class=\"n\">MIDDLEWARE</span> <span class=\"o\">+=</span> <span class=\"p\">[</span><span class=\"s1\">'vb_baseapp.middlewares.CustomLocaleMiddleware'</span><span class=\"p\">]</span>\n</pre>\n<h3><code>TimezoneMiddleware</code></h3>\n<p>If you have custom user model or you have <code>timezone</code> field in your <code>request.user</code>,\nthis middleware activates timezone for user.</p>\n<hr>\n<h2>Custom Error Pages</h2>\n<p>You have a browsable (<em>only in development mode</em>) and customizable error handler\nfunctions and html templates now!. Templates are under <code>templates/custom_errors/</code>\nfolder.</p>\n<hr>\n<h2>Goodies</h2>\n<h3><code>HtmlDebugMixin</code></h3>\n<p><img alt=\"Example view\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6e8610a66092985bb30abd7220fc20057babcef4/73637265656e73686f74732f76625f626173656170702d766965772e706e67\"></p>\n<p><code>self.hdbg(arg, arg, arg, ...)</code> method helps you to output/debug some data\nin view layer.</p>\n<pre><span class=\"c1\"># example view: index.py</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">django.views.generic.base</span> <span class=\"kn\">import</span> <span class=\"n\">TemplateView</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">console</span> <span class=\"kn\">import</span> <span class=\"n\">console</span>\n<span class=\"kn\">from</span> <span class=\"nn\">vb_baseapp.mixins</span> <span class=\"kn\">import</span> <span class=\"n\">HtmlDebugMixin</span>\n\n<span class=\"n\">__all__</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'BlogView'</span><span class=\"p\">]</span>\n\n<span class=\"n\">logger</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">getLogger</span><span class=\"p\">(</span><span class=\"s1\">'app'</span><span class=\"p\">)</span>\n<span class=\"n\">console</span> <span class=\"o\">=</span> <span class=\"n\">console</span><span class=\"p\">(</span><span class=\"n\">source</span><span class=\"o\">=</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">BlogView</span><span class=\"p\">(</span><span class=\"n\">HtmlDebugMixin</span><span class=\"p\">,</span> <span class=\"n\">TemplateView</span><span class=\"p\">):</span>\n    <span class=\"n\">template_name</span> <span class=\"o\">=</span> <span class=\"s1\">'blog/index.html'</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_context_data</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">hdbg</span><span class=\"p\">(</span><span class=\"s1\">'Hello from hdbg'</span><span class=\"p\">)</span>\n        <span class=\"n\">kwargs</span> <span class=\"o\">=</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">get_context_data</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n        <span class=\"n\">console</span><span class=\"o\">.</span><span class=\"n\">dir</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">user</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">kwargs</span>\n</pre>\n<p><code>{% hdbg %}</code> tag is added by default in to your <code>templates/base.html</code> and works\nonly if the settings <code>DEBUG</code> is set to <code>True</code>.</p>\n<pre><span class=\"cp\">{%</span> <span class=\"k\">load</span> <span class=\"nv\">static</span> <span class=\"nv\">i18n</span> <span class=\"cp\">%}</span><span class=\"x\"></span>\n\n<span class=\"x\">&lt;!DOCTYPE html&gt;</span>\n<span class=\"x\">&lt;html&gt;</span>\n<span class=\"x\">&lt;head&gt;</span>\n<span class=\"x\">    &lt;meta charset=\"utf-8\"&gt;</span>\n<span class=\"x\">    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;</span>\n<span class=\"x\">    &lt;title&gt;</span><span class=\"cp\">{%</span> <span class=\"k\">block</span> <span class=\"nv\">title</span> <span class=\"cp\">%}{%</span> <span class=\"k\">endblock</span> <span class=\"cp\">%}</span><span class=\"x\">&lt;/title&gt;</span>\n<span class=\"x\">    </span><span class=\"cp\">{%</span> <span class=\"k\">if</span> <span class=\"nv\">DJANGO_ENV</span> <span class=\"o\">==</span> <span class=\"s1\">'development'</span> <span class=\"cp\">%}</span><span class=\"x\"></span>\n<span class=\"x\">    &lt;link rel=\"stylesheet\" href=\"</span><span class=\"cp\">{%</span> <span class=\"k\">static</span> <span class=\"s1\">'css/bulma.min.0.8.0.css'</span> <span class=\"cp\">%}</span><span class=\"x\">\"&gt;</span>\n<span class=\"x\">    &lt;script defer src=\"</span><span class=\"cp\">{%</span> <span class=\"k\">static</span> <span class=\"s1\">'js/fontawesome.5.3.1.all.js'</span> <span class=\"cp\">%}</span><span class=\"x\">\"&gt;&lt;/script&gt;</span>\n<span class=\"x\">    </span><span class=\"cp\">{%</span> <span class=\"k\">else</span> <span class=\"cp\">%}</span><span class=\"x\"></span>\n<span class=\"x\">    &lt;link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/bulma@0.8.0/css/bulma.min.css\"&gt;</span>\n<span class=\"x\">    &lt;script defer src=\"https://use.fontawesome.com/releases/v5.3.1/js/all.js\"&gt;&lt;/script&gt;</span>\n<span class=\"x\">    </span><span class=\"cp\">{%</span> <span class=\"k\">endif</span> <span class=\"cp\">%}</span><span class=\"x\"></span>\n<span class=\"x\">    &lt;link rel=\"stylesheet\" href=\"</span><span class=\"cp\">{%</span> <span class=\"k\">static</span> <span class=\"s1\">'css/vb-baseapp.css'</span> <span class=\"cp\">%}</span><span class=\"x\">\"&gt;</span>\n<span class=\"x\">    &lt;link rel=\"stylesheet\" href=\"</span><span class=\"cp\">{%</span> <span class=\"k\">static</span> <span class=\"s1\">'css/application.css'</span> <span class=\"cp\">%}</span><span class=\"x\">\"&gt;</span>\n<span class=\"x\">    </span><span class=\"cp\">{%</span> <span class=\"k\">block</span> <span class=\"nv\">extra_css</span> <span class=\"cp\">%}{%</span> <span class=\"k\">endblock</span> <span class=\"cp\">%}</span><span class=\"x\"></span>\n<span class=\"x\">    &lt;script defer src=\"</span><span class=\"cp\">{%</span> <span class=\"k\">static</span> <span class=\"s1\">'js/application.js'</span> <span class=\"cp\">%}</span><span class=\"x\">\"&gt;&lt;/script&gt;</span>\n<span class=\"x\">&lt;/head&gt;</span>\n<span class=\"x\">&lt;body&gt;</span>\n<span class=\"x\">    </span><span class=\"cp\">{%</span> <span class=\"k\">hdbg</span> <span class=\"cp\">%}</span><span class=\"x\"></span>\n<span class=\"x\">    </span><span class=\"cp\">{%</span> <span class=\"k\">block</span> <span class=\"nv\">body</span> <span class=\"cp\">%}{%</span> <span class=\"k\">endblock</span> <span class=\"cp\">%}</span><span class=\"x\"></span>\n<span class=\"x\">    </span><span class=\"cp\">{%</span> <span class=\"k\">block</span> <span class=\"nv\">extra_js</span> <span class=\"cp\">%}{%</span> <span class=\"k\">endblock</span> <span class=\"cp\">%}</span><span class=\"x\"></span>\n<span class=\"x\">&lt;/body&gt;</span>\n<span class=\"x\">&lt;/html&gt;</span>\n</pre>\n<p>If you don\u2019t want to extend from <code>templates/base.html</code> you can use your\nown template. You just need to add <code>{% hdbg %}</code> tag in to your template if\nyou still want to enable this feature.</p>\n<p>We have some mini helpers and tools shipped with <code>vb_baseapp</code>.</p>\n<h3><code>console</code></h3>\n<p>This little tool helps you to output anything to console. This works only\nin test and development mode. If you forget console declarations in your\ncode, do not worry... console checks <code>DJANGO_ENV</code> environment variable...</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">console</span> <span class=\"kn\">import</span> <span class=\"n\">console</span>\n\n<span class=\"n\">console</span> <span class=\"o\">=</span> <span class=\"n\">console</span><span class=\"p\">(</span><span class=\"n\">source</span><span class=\"o\">=</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n\n<span class=\"n\">console</span><span class=\"p\">(</span><span class=\"s1\">'hello'</span><span class=\"p\">,</span> <span class=\"s1\">'world'</span><span class=\"p\">)</span>\n</pre>\n<p>You can inspect python object via <code>.dir()</code> method:</p>\n<pre><span class=\"n\">console</span><span class=\"o\">.</span><span class=\"n\">dir</span><span class=\"p\">([])</span>\n\n<span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">Post</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">actives</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">first</span><span class=\"p\">()</span>\n<span class=\"n\">console</span><span class=\"o\">.</span><span class=\"n\">dir</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">)</span>\n</pre>\n<p>More information is available <a href=\"https://github.com/vbyazilim/vb-console\" rel=\"nofollow\">here</a></p>\n<h3><code>vb_baseapp.utils.numerify</code></h3>\n<p>Little helper for catching <strong>QUERY_STRING</strong> parameters for numerical values:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">vb_baseapp.utils</span> <span class=\"kn\">import</span> <span class=\"n\">numerify</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">numerify</span><span class=\"p\">(</span><span class=\"s2\">\"1\"</span><span class=\"p\">)</span>\n<span class=\"mi\">1</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">numerify</span><span class=\"p\">(</span><span class=\"s2\">\"1a\"</span><span class=\"p\">)</span>\n<span class=\"o\">-</span><span class=\"mi\">1</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">numerify</span><span class=\"p\">(</span><span class=\"s2\">\"ab\"</span><span class=\"p\">)</span>\n<span class=\"o\">-</span><span class=\"mi\">1</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">numerify</span><span class=\"p\">(</span><span class=\"s2\">\"abc\"</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"mi\">44</span><span class=\"p\">)</span>\n<span class=\"mi\">44</span>\n</pre>\n<h3><code>vb_baseapp.utils.save_file</code></h3>\n<p>While using <code>FileField</code>, sometimes you need to handle uploaded files. In this\ncase, you need to use <code>upload_to</code> attribute. Take a look at the example:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">vb_baseapp.utils</span> <span class=\"kn\">import</span> <span class=\"n\">save_file</span> <span class=\"k\">as</span> <span class=\"n\">custom_save_file</span>\n<span class=\"p\">:</span>\n<span class=\"p\">:</span>\n<span class=\"p\">:</span>\n<span class=\"k\">class</span> <span class=\"nc\">User</span><span class=\"p\">(</span><span class=\"n\">AbstractBaseUser</span><span class=\"p\">,</span> <span class=\"n\">PermissionsMixin</span><span class=\"p\">):</span>\n    <span class=\"p\">:</span>\n    <span class=\"p\">:</span>\n    <span class=\"n\">avatar</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">FileField</span><span class=\"p\">(</span>\n        <span class=\"n\">upload_to</span><span class=\"o\">=</span><span class=\"n\">save_user_avatar</span><span class=\"p\">,</span>\n        <span class=\"n\">verbose_name</span><span class=\"o\">=</span><span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s1\">'Profile Image'</span><span class=\"p\">),</span>\n        <span class=\"n\">null</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">blank</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span>\n    <span class=\"p\">:</span>\n    <span class=\"p\">:</span>\n</pre>\n<p><code>save_user_avatar</code> returns <code>custom_save_file</code>\u2019s return value. Default\nconfiguration of for <code>custom_save_file</code> is\n<code>save_file(instance, filename, upload_to='upload/%Y/%m/%d/')</code>. Uploads are go to\nsuch as <code>MEDIA_ROOT/upload/2017/09/21/</code>...</p>\n<p>Make your custom uploads like:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">vb_baseapp.utils</span> <span class=\"kn\">import</span> <span class=\"n\">save_file</span> <span class=\"k\">as</span> <span class=\"n\">custom_save_file</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">my_custom_uploader</span><span class=\"p\">(</span><span class=\"n\">instance</span><span class=\"p\">,</span> <span class=\"n\">filename</span><span class=\"p\">):</span>\n    <span class=\"c1\"># do your stuff</span>\n    <span class=\"c1\"># at the end, call:</span>\n    <span class=\"k\">return</span> <span class=\"n\">custom_save_file</span><span class=\"p\">(</span><span class=\"n\">instance</span><span class=\"p\">,</span> <span class=\"n\">filename</span><span class=\"p\">,</span> <span class=\"n\">upload_to</span><span class=\"o\">=</span><span class=\"s1\">'images/%Y/'</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">MyModel</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">image</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">FileField</span><span class=\"p\">(</span>\n        <span class=\"n\">upload_to</span><span class=\"o\">=</span><span class=\"s1\">'my_custom_uploader'</span><span class=\"p\">,</span>\n        <span class=\"n\">verbose_name</span><span class=\"o\">=</span><span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s1\">'Profile Image'</span><span class=\"p\">),</span>\n    <span class=\"p\">)</span>\n</pre>\n<h3>SlackExceptionHandler</h3>\n<p><code>vb_baseapp.utils.log.SlackExceptionHandler</code></p>\n<p>You can send errors/exceptions to <a href=\"https://api.slack.com\" rel=\"nofollow\">slack</a> channel.\nJust create a slack app, get the webhook URL and set as <code>SLACK_HOOK</code>\nenvironment variable. Due to slack message size limitation, <code>traceback</code>\nis disabled.</p>\n<p>Example message contains:</p>\n<ul>\n<li>http status</li>\n<li>error message</li>\n<li>exception message</li>\n<li>user.id or None</li>\n<li>full path</li>\n</ul>\n<pre>http status: <span class=\"m\">500</span>\nERROR <span class=\"o\">(</span>internal IP<span class=\"o\">)</span>: Internal Server Error: /__vb_baseapp__/\nException: User matching query does not exist.\nuser_id: anonymous <span class=\"o\">(</span>None<span class=\"o\">)</span>\nfull path: /__vb_baseapp__/?foo<span class=\"o\">=</span>!\n</pre>\n<p>You can enable/disable in <code>config/settings/production.py</code> / <code>config/settings/heroku.py</code>:</p>\n<pre><span class=\"p\">:</span>\n<span class=\"p\">:</span>\n    <span class=\"s1\">'loggers'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'django.request'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'handlers'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'mail_admins'</span><span class=\"p\">,</span> <span class=\"s1\">'slack'</span><span class=\"p\">],</span> <span class=\"s1\">'level'</span><span class=\"p\">:</span> <span class=\"s1\">'ERROR'</span><span class=\"p\">,</span> <span class=\"s1\">'propagate'</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">},</span>  <span class=\"c1\"># remove 'slack'</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">:</span>\n<span class=\"p\">:</span>\n</pre>\n<h3><code>vb_baseapp.storage</code></h3>\n<h4><code>FileNotFoundFileSystemStorage</code></h4>\n<p>After shipping/deploying Django app, users start to upload files, right ?\nThen you need to implement new features etc. You can get the dump of the\ndatabase but what about uploaded files ? Sometimes files are too much or\ntoo big. If you call, let\u2019s say, a model\u2019s <code>ImageField</code>\u2019s <code>url</code> property,\nlocal dev server logs lot\u2019s of <strong>file not found</strong> errors to console.</p>\n<p>Also breaks the look of application via broken image signs in browser.</p>\n<p>Now, you won\u2019t see any errors... <code>FileNotFoundFileSystemStorage</code> is a\nfake storage that handles non existing files. Returns <code>file-not-found.jpg</code>\nfrom <code>static/images/</code> folder.</p>\n<p>This is <strong>development purposes</strong> only! Do not use in the production!</p>\n<p>You don\u2019t need to change/add anything to your code... It\u2019s embeded to\n<code>config/settings/development.py</code>:</p>\n<pre><span class=\"p\">:</span>\n<span class=\"p\">:</span>\n<span class=\"n\">DEFAULT_FILE_STORAGE</span> <span class=\"o\">=</span> <span class=\"s1\">'vb_baseapp.storage.FileNotFoundFileSystemStorage'</span>\n<span class=\"p\">:</span>\n</pre>\n<p>You can disable if you like to...</p>\n<h4><code>OverwriteStorage</code></h4>\n<p><code>OverwriteStorage</code> helps you to overwrite file when uploading from django\nadmin. Example usage:</p>\n<pre><span class=\"c1\"># in a model</span>\n<span class=\"kn\">from</span> <span class=\"nn\">vb_baseapp.storage</span> <span class=\"kn\">import</span> <span class=\"n\">OverwriteStorage</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MyModel</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"p\">:</span>\n    <span class=\"p\">:</span>\n    <span class=\"n\">photo</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">ImageField</span><span class=\"p\">(</span>\n        <span class=\"n\">upload_to</span><span class=\"o\">=</span><span class=\"n\">save_media_photo</span><span class=\"p\">,</span>\n        <span class=\"n\">storage</span><span class=\"o\">=</span><span class=\"n\">OverwriteStorage</span><span class=\"p\">(),</span>\n    <span class=\"p\">)</span>\n    <span class=\"p\">:</span>\n    <span class=\"p\">:</span>\n</pre>\n<p>Add <code>storage</code> option in your file related fields.</p>\n<h4><code>AdminImageFileWidget</code></h4>\n<p>Use this widget in your admin forms. By default, It\u2019s already enabled in\n<code>CustomBaseModelAdmin</code>. You can also inject this to Django\u2019s default <code>ModelAdmin</code>\nvia example:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">vb_baseapp.admin.widgets</span> <span class=\"kn\">import</span> <span class=\"n\">AdminImageFileWidget</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MyAdmin</span><span class=\"p\">(</span><span class=\"n\">admin</span><span class=\"o\">.</span><span class=\"n\">ModelAdmin</span><span class=\"p\">):</span>\n    <span class=\"n\">formfield_overrides</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">FileField</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'widget'</span><span class=\"p\">:</span> <span class=\"n\">AdminImageFileWidget</span><span class=\"p\">},</span>\n    <span class=\"p\">}</span>\n</pre>\n<p>This widget uses <code>Pillow</code> (<em>Python Image Library</em>) which ships with your <code>base.pip</code>\nrequirements file. Show image preview, width x height if the file is image.</p>\n<h4><code>context_processors.py</code></h4>\n<p>By default, <code>vb_baseapp</code> injects few variables to you context:</p>\n<ul>\n<li><code>DJANGO_ENV</code></li>\n<li><code>IS_DEBUG</code></li>\n<li><code>LANGUAGE_CODE</code></li>\n<li><code>CURRENT_GIT_TAG</code></li>\n<li><code>CURRENT_PYTHON_VERSION</code></li>\n<li><code>CURRENT_DJANGO_VERSION</code></li>\n</ul>\n<hr>\n<h2>Reminders</h2>\n<p>Default timezone is set to <code>UTC</code>, please change this or use according to your\nneeds.</p>\n<pre><span class=\"c1\"># config/settings/base.py</span>\n<span class=\"c1\"># ...</span>\n<span class=\"n\">TIME_ZONE</span> <span class=\"o\">=</span> <span class=\"s1\">'UTC'</span>\n<span class=\"c1\"># ...</span>\n</pre>\n<hr>\n<h2>Management Commands</h2>\n<p><code>vb_baseapp</code> ships with three managements commands;</p>\n<h3><code>create_app</code></h3>\n<pre>$ python manage.py create_app NAME_OF_APP\n</pre>\n<p>Creates new Django application under <code>applications/</code> and provides application\nfolder structure:</p>\n<pre><code>applications/NAME_OF_APP/\n\u251c\u2500\u2500 admin\n\u251c\u2500\u2500 management\n\u251c\u2500\u2500 migrations\n\u251c\u2500\u2500 models\n\u251c\u2500\u2500 tests\n\u251c\u2500\u2500 views\n\u251c\u2500\u2500 __init__.py\n\u251c\u2500\u2500 apps.py\n\u2514\u2500\u2500 urls.py\n</code></pre>\n<h3><code>create_model</code></h3>\n<pre>$ python manage.py create_model NAME_OF_APP NAME_OF_MODEL STYLE_OF_MODEL\n</pre>\n<p>Creates Django model. You have three different model style;</p>\n<ol>\n<li><code>django</code>: Uses Django\u2019s <code>models.Model</code></li>\n<li><code>basemodel</code>: Uses <code>CustomBaseModel</code> (which inherits from <code>models.Model</code>)</li>\n<li><code>softdelete</code>: Uses <code>CustomBaseModelWithSoftDelete</code></li>\n</ol>\n<p>According to your model choice, related files will be generated.</p>\n<h3><code>create_custom_user_model</code></h3>\n<pre>$ python manage.py create_custom_user_model NAME_OF_APP NAME_OF_MODEL STYLE_OF_MODEL \n</pre>\n<p>This command will work only in the beginning state of development. Creating\na custom user model is prohibited in the middle of the development. You\nmust decide before you create other models or run initial migrations for\nDjango\u2019s default.</p>\n<p>This command creates;</p>\n<ul>\n<li>Admin files</li>\n<li>Model manager files</li>\n<li>Model admin form files</li>\n<li>Model files</li>\n</ul>\n<p>for given argumens. Let\u2019s say you\u2019ll start a fresh project and want to use\ncustom user model. First, you need to create an app:</p>\n<pre>$ python manage.py create_app blog\n<span class=\"c1\"># follow the instructions</span>\n$ python manage.py create_custom_user_model blog CustomUser softdelete\n\nSet AUTH_USER_MODEL in config file\nmodels/custom_user.py created.\nadmin/custom_user.py created.\nCustomUser model added to models/__init__.py\nCustomUser model added to admin/__init__.py\nCustomUser forms added to admin/forms/__init__.py\nadmin/forms/custom_user.py created.\n\nCustom user installation completed. Now please check your<span class=\"p\">;</span>\n\n    - blog/models/custom_user.py\n    - blog/admin/custom_user.py\n    - blog/admin/forms/custom_user.py\n\nAlso<span class=\"p\">;</span>\n\n    - <span class=\"sb\">`</span>email<span class=\"sb\">`</span> field is <span class=\"nb\">set</span> to <span class=\"sb\">`</span>USERNAME_FIELD<span class=\"sb\">`</span>\n    - <span class=\"sb\">`</span>first_name<span class=\"sb\">`</span> and <span class=\"sb\">`</span>last_name<span class=\"sb\">`</span> are <span class=\"nb\">set</span> as <span class=\"sb\">`</span>REQUIRED_FIELDS<span class=\"sb\">`</span>\n    - <span class=\"sb\">`</span>middle_name<span class=\"sb\">`</span>, <span class=\"sb\">`</span>profile_image<span class=\"sb\">`</span> are optionals\n\nMake sure <span class=\"k\">if</span> all ok? Make your changes before running migrations:\n\n    $ python manage.py makemigrations --name create_custom_users\n</pre>\n<p>We\u2019ve created <code>CustomUser</code> model from softdeletable object. Default fields\nare:</p>\n<ul>\n<li><code>email</code>: <code>EmailField</code></li>\n<li><code>first_name</code>: <code>CharField</code></li>\n<li><code>middle_name</code>: (optional) <code>CharField</code></li>\n<li><code>last_name</code>: <code>CharField</code></li>\n<li><code>profile_image</code>: (optional) <code>FileField</code></li>\n<li><code>is_active</code>: (optional) <code>BooleanField</code></li>\n<li><code>is_staff</code>: (optional) <code>BooleanField</code></li>\n</ul>\n<p>and other fields inherited from <code>AbstractBaseUser</code>:</p>\n<ul>\n<li><code>password</code></li>\n<li><code>last_login</code></li>\n</ul>\n<p>and other properties from <code>PermissionsMixin</code>. You can add/change or remove\nfields before creating migrations. Do not forget to check these files for\n<code>CustomUser</code> for the sake of this example:</p>\n<ul>\n<li><code>admin/custom_user.py</code></li>\n<li><code>admin/forms/custom_user.py</code></li>\n<li><code>models/custom_user.py</code></li>\n</ul>\n<p>Also, this management commands sets <code>AUTH_USER_MODEL</code> value in <code>config/base.py</code>.\nYou\u2019ll see;</p>\n<pre><span class=\"n\">AUTH_USER_MODEL</span> <span class=\"o\">=</span> <span class=\"s1\">'blog.CustomUser'</span>\n</pre>\n<p>since you\u2019ve named the custom model as <code>CustomUser</code>.</p>\n<hr>\n<h2>Rake Tasks</h2>\n<p>You have some handy rake tasks if you like to use <code>ruby</code> :)</p>\n<pre>$ rake -T\n\nrake db:migrate<span class=\"o\">[</span>database<span class=\"o\">]</span>                                        <span class=\"c1\"># Run migration for given database (default: 'default')</span>\nrake db:roll_back<span class=\"o\">[</span>name_of_application,name_of_migration<span class=\"o\">]</span>         <span class=\"c1\"># Roll-back (name of application, name of migration)</span>\nrake db:shell                                                    <span class=\"c1\"># run database shell ..</span>\nrake db:show<span class=\"o\">[</span>name_of_application<span class=\"o\">]</span>                                <span class=\"c1\"># Show migrations for an application (default: 'all')</span>\nrake db:update<span class=\"o\">[</span>name_of_application,name_of_migration,is_empty<span class=\"o\">]</span>   <span class=\"c1\"># Update migration (name of application, name of migration?, is empty?)</span>\nrake default                                                     <span class=\"c1\"># Default task: runserver_plus (Werkzeug)</span>\nrake locale:compile                                              <span class=\"c1\"># Compile locale dictionary</span>\nrake locale:update                                               <span class=\"c1\"># Update locale dictionary</span>\nrake new:application<span class=\"o\">[</span>name_of_application<span class=\"o\">]</span>                        <span class=\"c1\"># Create new Django application</span>\nrake new:model<span class=\"o\">[</span>name_of_application,name_of_model,type_of_model<span class=\"o\">]</span>  <span class=\"c1\"># Create new Model for given application: django,basemodel,softdelete</span>\nrake runserver:default                                           <span class=\"c1\"># Run: runserver (Django's default server)</span>\nrake runserver:default_ipdb                                      <span class=\"c1\"># Run: runserver (Django's default server) + ipdb debug support</span>\nrake runserver:plus                                              <span class=\"c1\"># Run: runserver_plus (Werkzeug)</span>\nrake runserver:plus_ipdb                                         <span class=\"c1\"># Run: runserver_plus (Werkzeug) + ipdb debug support</span>\nrake shell<span class=\"o\">[</span>repl<span class=\"o\">]</span>                                                 <span class=\"c1\"># Run shell+ avail: ptpython,ipython,bpython default: ptpython</span>\nrake test:browse_coverage<span class=\"o\">[</span>port<span class=\"o\">]</span>                                  <span class=\"c1\"># Browse test coverage</span>\nrake test:coverage<span class=\"o\">[</span>cli_args<span class=\"o\">]</span>                                     <span class=\"c1\"># Show test coverage (default: '--show-missing --ignore-errors --skip-covered')</span>\nrake test:run<span class=\"o\">[</span>name_of_application,verbose<span class=\"o\">]</span>                       <span class=\"c1\"># Run tests for given application</span>\n</pre>\n<p>Default task is <code>runserver:plus</code>. Just type <code>rake</code> that\u2019s it! <code>runserver:plus</code> uses\n<code>runserver_plus</code>. This means you have lots of debugging options!</p>\n<h3><code>runserver</code> based tasks</h3>\n<ul>\n<li><code>rake runserver:default</code>: runs <code>python manage.py runserver</code></li>\n<li><code>rake runserver:default_ipdb</code>: runs Django\u2019s default server with debugging\nfeature. You can inject <code>breakpoint()</code> in your code! Debugger kicks in!</li>\n<li><code>rake runserver:plus</code>: runs <code>python manage.py runserver_plus --nothreading</code></li>\n<li><code>rake runserver:plus_ipdb</code>: runs <code>runserver:plus</code> with debugging!</li>\n</ul>\n<h3><code>rake db:migrate[database]</code></h3>\n<p>Migrates database with given database name. Default is <code>default</code>. If you like\nto work multiple databases:</p>\n<pre><span class=\"c1\"># example configuration</span>\n\n<span class=\"n\">DATABASES</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'default'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'ENGINE'</span><span class=\"p\">:</span> <span class=\"s1\">'django.db.backends.sqlite3'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'NAME'</span><span class=\"p\">:</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">BASE_DIR</span><span class=\"p\">,</span> <span class=\"s1\">'db'</span><span class=\"p\">,</span> <span class=\"s1\">'development.sqlite3'</span><span class=\"p\">),</span>\n    <span class=\"p\">},</span>\n    <span class=\"s1\">'my_database'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'ENGINE'</span><span class=\"p\">:</span> <span class=\"s1\">'django.db.backends.sqlite3'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'NAME'</span><span class=\"p\">:</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">BASE_DIR</span><span class=\"p\">,</span> <span class=\"s1\">'db'</span><span class=\"p\">,</span> <span class=\"s1\">'my_database.sqlite3'</span><span class=\"p\">),</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n<p>You can just call <code>rake db:migrate</code> or specify different database like:\n<code>rake db:migrate[my_database]</code> :)</p>\n<h3><code>rake db:show[name_of_application]</code></h3>\n<p>Show migration information:</p>\n<pre>$ rake db:show<span class=\"o\">[</span>blog<span class=\"o\">]</span>\nblog\n <span class=\"o\">[</span>X<span class=\"o\">]</span> 0001_create_post_category_and_tag\n <span class=\"o\">[</span> <span class=\"o\">]</span> 0002_add_spot_field_to_post\n\n$ rake db:migrate\nRunning migration <span class=\"k\">for</span>: default database...\nOperations to perform:\n  Apply all migrations: admin, auth, blog, contenttypes, sessions\nRunning migrations:\n  Applying blog.0002_add_spot_field_to_post... OK\n</pre>\n<h3><code>rake db:roll_back[name_of_application,name_of_migration]</code></h3>\n<p>Your database must be rollable :) To see available migrations:\n<code>rake db:roll_back[NAME_OF_YOUR_APPLICATION]</code>. Look at the list and choose your\ntarget migration. You can use just the number as shortcut. In this example,\nwe\u2019ll roll back to migration number 1, which has a name: <code>0001_create_post_category_and_tag</code></p>\n<pre>$ rake db:roll_back<span class=\"o\">[</span>blog<span class=\"o\">]</span>\nPlease <span class=\"k\">select</span> your migration:\nblog\n <span class=\"o\">[</span>X<span class=\"o\">]</span> 0001_create_post_category_and_tag\n <span class=\"o\">[</span>X<span class=\"o\">]</span> 0002_add_spot_field_to_post\n\n$ rake db:roll_back<span class=\"o\">[</span>blog,1<span class=\"o\">]</span>\nOperations to perform:\n  Target specific migration: 0001_create_post_category_and_tag, from blog\nRunning migrations:\n  Rendering model states... DONE\n  Unapplying blog.0002_add_spot_field_to_post... OK\n\n$ rake db:show<span class=\"o\">[</span>blog<span class=\"o\">]</span>\nblog\n <span class=\"o\">[</span>X<span class=\"o\">]</span> 0001_create_post_category_and_tag\n <span class=\"o\">[</span> <span class=\"o\">]</span> 0002_add_spot_field_to_post\n</pre>\n<h3><code>rake db:update[name_of_application,name_of_migration,is_empty]</code></h3>\n<p>When you add/change something in your model, you need to create migrations.\nLet\u2019s say you have added new field to <code>Post</code> model in your <code>blog</code> app:</p>\n<p>If you don\u2019t provide <code>name_of_migration</code> param, you\u2019ll endup with auto\ngenerated name such as <code>000X_auto_YYYMMDD_HHMM</code>. You can also create\nempty migration via 3^rd parameter: <code>yes</code></p>\n<pre>$ rake db:update<span class=\"o\">[</span>blog,add_spot_field_to_post<span class=\"o\">]</span>\nMigrations <span class=\"k\">for</span> <span class=\"s1\">'blog'</span>:\n  applications/blog/migrations/0002_add_spot_field_to_post.py\n    - Add field spot to post\n\n$ rake db:update<span class=\"o\">[</span>blog,add_new_field_to_post,yes<span class=\"o\">]</span>  <span class=\"c1\"># empty migration example</span>\nMigrations <span class=\"k\">for</span> <span class=\"s1\">'blog'</span>:\n  applications/blog/migrations/0003_add_new_field_to_post.py\n\n$ cat applications/blog/migrations/0003_add_new_field_to_post.py\n</pre>\n<p>empty migration output:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">django.db</span> <span class=\"kn\">import</span> <span class=\"n\">migrations</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Migration</span><span class=\"p\">(</span><span class=\"n\">migrations</span><span class=\"o\">.</span><span class=\"n\">Migration</span><span class=\"p\">):</span>\n\n    <span class=\"n\">dependencies</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"p\">(</span><span class=\"s1\">'blog'</span><span class=\"p\">,</span> <span class=\"s1\">'0002_add_spot_field_to_post'</span><span class=\"p\">),</span>\n    <span class=\"p\">]</span>\n\n    <span class=\"n\">operations</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">]</span>\n</pre>\n<h3><code>rake db:shell</code></h3>\n<p>Runs default database client.</p>\n<h3><code>rake new:application[name_of_application]</code></h3>\n<p>Creates new application with given application name!</p>\n<pre>$ rake new:application<span class=\"o\">[</span>blog<span class=\"o\">]</span>\n</pre>\n<h3><code>rake new:model[name_of_application,name_of_model,type_of_model]</code></h3>\n<p>Creates new model! Available model types are:</p>\n<ul>\n<li><code>django</code> (default),</li>\n<li><code>basemodel</code></li>\n<li><code>softdelete</code></li>\n</ul>\n<pre>$ rake new:model<span class=\"o\">[</span>blog,Post<span class=\"o\">]</span>                <span class=\"c1\"># will create model using Django\u2019s `models.Model`</span>\n$ rake new:model<span class=\"o\">[</span>blog,Post,basemodel<span class=\"o\">]</span>      <span class=\"c1\"># will create model using our `CustomBaseModel`</span>\n$ rake new:model<span class=\"o\">[</span>blog,Post,softdelete<span class=\"o\">]</span>     <span class=\"c1\"># will create model using our `CustomBaseModelWithSoftDelete`</span>\n</pre>\n<h3><code>rake locale:compile</code> and <code>rake locale:update</code></h3>\n<p>When you make changes in your application related to locales, run: <code>rake locale:update</code>.\nWhen you finish editing your <code>django.po</code> file, run <code>rake locale:compile</code>.</p>\n<h3><code>rake shell[repl]</code></h3>\n<p>Runs Django repl/shell with use <code>shell_plus</code> of [django-extensions][01].\n<code>rake shell</code>. This loads everything to your shell! Also you can see the\nSQL statements while playing in shell. We have couple different repls:</p>\n<ol>\n<li><code>ptpython</code></li>\n<li><code>bpython</code></li>\n<li><code>ipython</code></li>\n</ol>\n<p>Default repl is: <code>ptpython</code></p>\n<pre>$ rake shell\n$ rake shell<span class=\"o\">[</span>bpython<span class=\"o\">]</span>\n$ rake shell<span class=\"o\">[</span>ipython<span class=\"o\">]</span>\n</pre>\n<h3><code>rake test:run[name_of_application,verbose]</code></h3>\n<p>If you don\u2019t provide <code>name_of_application</code> default value will be <code>applications</code>.\n<code>verbose</code> is <code>1</code> by default.</p>\n<p>Examples:</p>\n<pre>$ rake test:run\n$ rake test:run<span class=\"o\">[</span>vb_baseapp,2<span class=\"o\">]</span>\n</pre>\n<h3><code>rake test:coverage[cli_args]</code></h3>\n<p>Get the test report. Default is <code>--show-missing --ignore-errors --skip-covered</code> for\n<code>cli_args</code> parameter.</p>\n<pre>$ rake test:coverage\n</pre>\n<h3><code>rake test:browse_coverage[port]</code></h3>\n<p>Serves generated html coverages under <code>htmlcov</code> folder via <code>python</code>. Default port\nis <code>9001</code></p>\n<hr>\n<h2>Run Tests Manually</h2>\n<pre>$ <span class=\"nv\">DJANGO_ENV</span><span class=\"o\">=</span><span class=\"nb\">test</span> python manage.py <span class=\"nb\">test</span> vb_baseapp -v <span class=\"m\">2</span>                                 <span class=\"c1\"># or</span>\n$ <span class=\"nv\">DJANGO_ENV</span><span class=\"o\">=</span><span class=\"nb\">test</span> python manage.py <span class=\"nb\">test</span> vb_baseapp.tests.test_user.CustomUserTestCase   <span class=\"c1\"># run single unit</span>\n$ rake test:run<span class=\"o\">[</span>vb_baseapp<span class=\"o\">]</span>\n</pre>\n<hr>\n<h2>Manual Usage</h2>\n<p>Let\u2019s assume you need a model called: <code>Page</code>. Create a file under <code>YOUR_APP/models/page.py</code>:</p>\n<pre><span class=\"c1\"># example for Django\u2019s default model</span>\n<span class=\"c1\"># YOUR_APP/models/page.py</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">django.db</span> <span class=\"kn\">import</span> <span class=\"n\">models</span>\n\n<span class=\"n\">__all__</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'Page'</span><span class=\"p\">,]</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Page</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"c1\"># define your fields here...</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"c1\"># YOUR_APP/models/__init__.py</span>\n<span class=\"c1\"># append:</span>\n<span class=\"kn\">from</span> <span class=\"nn\">.page</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n</pre>\n<p>or, you can use <code>CustomBaseModel</code> or <code>CustomBaseModelWithSoftDelete</code>:</p>\n<pre>from django.db import models\n\nfrom vb_baseapp.models import CustomBaseModelWithSoftDelete\n\n<span class=\"nv\">__all__</span> <span class=\"o\">=</span> <span class=\"o\">[</span><span class=\"s1\">'Page'</span><span class=\"o\">]</span>\n\nclass Page<span class=\"o\">(</span>CustomBaseModelWithSoftDelete<span class=\"o\">)</span>:\n    <span class=\"c1\"># define your fields here...</span>\n    pass\n</pre>\n<p>Now make migrations etc... Use it as <code>from YOUR_APP.models import Page</code> :)</p>\n<hr>\n<h2>License</h2>\n<p>This project is licensed under MIT</p>\n<hr>\n<h2>Contributer(s)</h2>\n<ul>\n<li><a href=\"https://github.com/vigo\" rel=\"nofollow\">U\u011fur \"vigo\" \u00d6zy\u0131lmazel</a> - Creator, maintainer</li>\n</ul>\n<hr>\n<h2>Contribute</h2>\n<p>All PR\u2019s are welcome!</p>\n<ol>\n<li><code>fork</code> (<a href=\"https://github.com/vbyazilim/django-vb-baseapp/fork\" rel=\"nofollow\">https://github.com/vbyazilim/django-vb-baseapp/fork</a>)</li>\n<li>Create your <code>branch</code> (<code>git checkout -b my-features</code>)</li>\n<li><code>commit</code> yours (<code>git commit -am 'Add awesome features'</code>)</li>\n<li><code>push</code> your <code>branch</code> (<code>git push origin my-features</code>)</li>\n<li>Than create a new <strong>Pull Request</strong>!</li>\n</ol>\n<hr>\n<h2>Change Log</h2>\n<p><strong>2019-12-05</strong></p>\n<ul>\n<li>Django 2.2.8</li>\n</ul>\n<p><strong>2019-12-04</strong></p>\n<ul>\n<li>Add custom user model generator</li>\n<li>Version bump</li>\n</ul>\n<p><strong>2019-11-30</strong></p>\n<ul>\n<li>Update and fix typos in README file</li>\n</ul>\n<p><strong>2019-11-28</strong></p>\n<ul>\n<li>Add tests and travis integration</li>\n<li>Version bump</li>\n</ul>\n<p><strong>2019-11-27</strong></p>\n<ul>\n<li>Version bump</li>\n<li>Ready to use...</li>\n</ul>\n<p><strong>2019-08-07</strong></p>\n<ul>\n<li>Initial Beta relase: 1.0.0</li>\n</ul>\n<hr>\n\n          </div>"}, "last_serial": 6729453, "releases": {"1.0.1": [{"comment_text": "", "digests": {"md5": "8634aa3ac8fe9398e0d8f873e18d1741", "sha256": "5d6b1a11b23033d88fe5ab991558e5f1a9b72dcee858a11a6c6f66eb8ba57339"}, "downloads": -1, "filename": "django_vb_baseapp-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "8634aa3ac8fe9398e0d8f873e18d1741", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.0", "size": 102925, "upload_time": "2019-10-20T06:31:03", "upload_time_iso_8601": "2019-10-20T06:31:03.041000Z", "url": "https://files.pythonhosted.org/packages/57/47/2422ccefe6971d307e41a59ef2d858bcbbac350b13034c58b0bbf12b83b2/django_vb_baseapp-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1dd98daa95d4c7d3064903945344e556", "sha256": "f55ca134f2fc9fcdd68f9a9e93523185ff6fea336dc5c3e7b45dd4523d30f7db"}, "downloads": -1, "filename": "django-vb-baseapp-1.0.1.tar.gz", "has_sig": false, "md5_digest": "1dd98daa95d4c7d3064903945344e556", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.0", "size": 86192, "upload_time": "2019-10-20T06:31:06", "upload_time_iso_8601": "2019-10-20T06:31:06.375070Z", "url": "https://files.pythonhosted.org/packages/76/78/6a3dcc309a3567232f1c119fcac380bc58bf268b4949a353766aebd5650e/django-vb-baseapp-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "eaa17effbf67891593fdd4275cca138f", "sha256": "f086048aeed83c94168268bc9910de4b1b858fc547704f5ae3e8d26d8b779eb0"}, "downloads": -1, "filename": "django_vb_baseapp-1.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "eaa17effbf67891593fdd4275cca138f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 104861, "upload_time": "2019-10-20T18:15:53", "upload_time_iso_8601": "2019-10-20T18:15:53.530658Z", "url": "https://files.pythonhosted.org/packages/40/c6/c4f2e8cda818b4316a39e3dbaba2b630d2286f73758bb0a86cc8e9f8a506/django_vb_baseapp-1.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ec6883519aa70804941bc4ced7f6280c", "sha256": "cc32bbe9c15fa4f598012d21712070590e8500096290fc5e5875e14f3b9275c1"}, "downloads": -1, "filename": "django-vb-baseapp-1.0.2.tar.gz", "has_sig": false, "md5_digest": "ec6883519aa70804941bc4ced7f6280c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 88644, "upload_time": "2019-10-20T18:15:56", "upload_time_iso_8601": "2019-10-20T18:15:56.226145Z", "url": "https://files.pythonhosted.org/packages/67/21/9eceb77dcab974ac6aed2867f553c53c70935f49965295ea08e08f4f3e0a/django-vb-baseapp-1.0.2.tar.gz", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "d9254117cfeab9d23214886172b8ea1b", "sha256": "93ecf719522b51ca9362e83134d2cba4af7e537f358f9c1481920afd10136ebc"}, "downloads": -1, "filename": "django_vb_baseapp-1.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "d9254117cfeab9d23214886172b8ea1b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 112927, "upload_time": "2019-11-27T08:22:13", "upload_time_iso_8601": "2019-11-27T08:22:13.553263Z", "url": "https://files.pythonhosted.org/packages/86/1d/fde15b9371891564377a878be4904907943818b99717cd08a76002e0d399/django_vb_baseapp-1.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a4fb2eccd0824b434412fe92f8ecf065", "sha256": "23a6fb8922daa743501e24b24d1c54828be1daf2c1fcb35660d872daf7e9ea89"}, "downloads": -1, "filename": "django-vb-baseapp-1.0.3.tar.gz", "has_sig": false, "md5_digest": "a4fb2eccd0824b434412fe92f8ecf065", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 97518, "upload_time": "2019-11-27T08:22:15", "upload_time_iso_8601": "2019-11-27T08:22:15.883025Z", "url": "https://files.pythonhosted.org/packages/50/54/215344e67428ea5f5829a734b6b583cace4c9ff1d3af304302a9cceaac40/django-vb-baseapp-1.0.3.tar.gz", "yanked": false}], "1.0.4": [{"comment_text": "", "digests": {"md5": "9d5714a133bf7436d48d96210c54c54d", "sha256": "adbe7cae406ade72ef7e44113b60c06102151db75a2221601e7d05583088c326"}, "downloads": -1, "filename": "django_vb_baseapp-1.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "9d5714a133bf7436d48d96210c54c54d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 112962, "upload_time": "2019-11-27T08:49:08", "upload_time_iso_8601": "2019-11-27T08:49:08.536095Z", "url": "https://files.pythonhosted.org/packages/43/61/4a0d0796691abb8f6d8c13ffeaeb79d77c01e868b2ba27acbd662f85ed9d/django_vb_baseapp-1.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2e0f94f19545a19dacf171cbcb49cb96", "sha256": "38a7ea8338f35b24cbf5adbc58bacbf1ecc3c6076e133835ee043c6dc1fe6ab5"}, "downloads": -1, "filename": "django-vb-baseapp-1.0.4.tar.gz", "has_sig": false, "md5_digest": "2e0f94f19545a19dacf171cbcb49cb96", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 97576, "upload_time": "2019-11-27T08:49:10", "upload_time_iso_8601": "2019-11-27T08:49:10.412502Z", "url": "https://files.pythonhosted.org/packages/7a/9e/0ba600429afafd0b3dd512e23aaeda35d6ffc5fef4a92995437f3c01dafb/django-vb-baseapp-1.0.4.tar.gz", "yanked": false}], "1.0.5": [{"comment_text": "", "digests": {"md5": "2eaf024ac5a967c9721130ed35f94c2d", "sha256": "b01a10c025645ea03483c3982aeae1a1984255b480375b075a56e69e6f2da3cc"}, "downloads": -1, "filename": "django_vb_baseapp-1.0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "2eaf024ac5a967c9721130ed35f94c2d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 116996, "upload_time": "2019-11-27T12:13:46", "upload_time_iso_8601": "2019-11-27T12:13:46.781323Z", "url": "https://files.pythonhosted.org/packages/a9/4f/eb57d86b125667956b9aee57f545153351e4cdc18b0e1c14b1d3fa93056e/django_vb_baseapp-1.0.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ee741f0c33f68e6aff679cb1c73b8e8a", "sha256": "926c8586d80d9f6986da3f048ab8c3ab59a70fca77fc7338577b224c58e43276"}, "downloads": -1, "filename": "django-vb-baseapp-1.0.5.tar.gz", "has_sig": false, "md5_digest": "ee741f0c33f68e6aff679cb1c73b8e8a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 119396, "upload_time": "2019-11-27T12:13:49", "upload_time_iso_8601": "2019-11-27T12:13:49.173662Z", "url": "https://files.pythonhosted.org/packages/8f/18/a523893c1763e47583fb89229061838d8baf3adccb8fb733cec507897b66/django-vb-baseapp-1.0.5.tar.gz", "yanked": false}], "1.0.6": [{"comment_text": "", "digests": {"md5": "4a574bdf803303e48bc726c40245a718", "sha256": "e0644ca2e8b742dabe8ffdfee5406f8365ae1c3a21b878de8e75a3860386b0bb"}, "downloads": -1, "filename": "django_vb_baseapp-1.0.6-py3-none-any.whl", "has_sig": false, "md5_digest": "4a574bdf803303e48bc726c40245a718", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 116999, "upload_time": "2019-11-27T12:32:25", "upload_time_iso_8601": "2019-11-27T12:32:25.620576Z", "url": "https://files.pythonhosted.org/packages/d5/15/c445c78a751f87b304c40c9ebefed6c4d469f8301b3aae50401b40f6711e/django_vb_baseapp-1.0.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "06b5bfa5916eb0a66615b3f1215b2568", "sha256": "a407bf716e6654fd0cdb600c586d70044b526bd6e87c174b8b9d205879f85b2e"}, "downloads": -1, "filename": "django-vb-baseapp-1.0.6.tar.gz", "has_sig": false, "md5_digest": "06b5bfa5916eb0a66615b3f1215b2568", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 119364, "upload_time": "2019-11-27T12:32:28", "upload_time_iso_8601": "2019-11-27T12:32:28.013673Z", "url": "https://files.pythonhosted.org/packages/2a/8b/453f812ac6d4038850cac66a99528ff900f7926e24941988ffda14b65631/django-vb-baseapp-1.0.6.tar.gz", "yanked": false}], "1.0.9": [{"comment_text": "", "digests": {"md5": "4b651e5c672822e0d8864e26fdc596b3", "sha256": "05b6e36d0dbdb5a94a1fa85bd5d15549c301ac899b2da3fb0c9b1b46e754dbf9"}, "downloads": -1, "filename": "django_vb_baseapp-1.0.9-py3-none-any.whl", "has_sig": false, "md5_digest": "4b651e5c672822e0d8864e26fdc596b3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 117670, "upload_time": "2019-11-28T13:15:09", "upload_time_iso_8601": "2019-11-28T13:15:09.427912Z", "url": "https://files.pythonhosted.org/packages/c7/a4/e52b65a2b050bf95170d3abd6baa4c36d174428865790428d860131cc695/django_vb_baseapp-1.0.9-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "647d448d74794ec59c82e13e47d1a3a9", "sha256": "2acb619685f00f3dfe53628c251449fd810bb872da147d3e26eeb431650dad90"}, "downloads": -1, "filename": "django-vb-baseapp-1.0.9.tar.gz", "has_sig": false, "md5_digest": "647d448d74794ec59c82e13e47d1a3a9", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 119616, "upload_time": "2019-11-28T13:15:11", "upload_time_iso_8601": "2019-11-28T13:15:11.472698Z", "url": "https://files.pythonhosted.org/packages/7d/91/b68e6d60447fea61866ec7e9dabddc9315624b46a6399babe2f61b7cda8a/django-vb-baseapp-1.0.9.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "1a719adb03120175067a365c8e01c400", "sha256": "4781ab4bd5f0e0286f8f662791b39de34ab0c2a891c4ab329bca20161cc03520"}, "downloads": -1, "filename": "django_vb_baseapp-1.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "1a719adb03120175067a365c8e01c400", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 129289, "upload_time": "2019-12-04T11:21:17", "upload_time_iso_8601": "2019-12-04T11:21:17.106781Z", "url": "https://files.pythonhosted.org/packages/77/90/2ee54b9b23abea7d2602722cf8ced8eeeb83960ef63db9c8fe1abfca849b/django_vb_baseapp-1.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f2afb12e2b629043efc06b9dd46af4b0", "sha256": "0412ca5f8de353acccdc229d826bdc539dfcce7b612b4f29df21c2317f753705"}, "downloads": -1, "filename": "django-vb-baseapp-1.1.0.tar.gz", "has_sig": false, "md5_digest": "f2afb12e2b629043efc06b9dd46af4b0", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 127499, "upload_time": "2019-12-04T11:21:19", "upload_time_iso_8601": "2019-12-04T11:21:19.519001Z", "url": "https://files.pythonhosted.org/packages/3e/77/435f3abf5885471239edb6eb9a7a4a8b681e2f65688c0f93816a53a2a659/django-vb-baseapp-1.1.0.tar.gz", "yanked": false}], "1.1.10": [{"comment_text": "", "digests": {"md5": "58562f34fb80c00775f59e50379bc857", "sha256": "962f0ca2fb008f223f7ef3cde4ce1fea287dc046a7c23e552ac6dee675c8e8c3"}, "downloads": -1, "filename": "django_vb_baseapp-1.1.10-py3-none-any.whl", "has_sig": false, "md5_digest": "58562f34fb80c00775f59e50379bc857", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 129592, "upload_time": "2020-03-01T11:31:45", "upload_time_iso_8601": "2020-03-01T11:31:45.931388Z", "url": "https://files.pythonhosted.org/packages/e0/51/d7023b06dfd423becee94919fe0eea17c4939754f94400e65e93b56352da/django_vb_baseapp-1.1.10-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5c8bd05d50f6ae308698f561da7b60eb", "sha256": "2c534559d849c3cf047caf00f086bb4907dc67bb8ad25c8de9ee9cdf3da91534"}, "downloads": -1, "filename": "django-vb-baseapp-1.1.10.tar.gz", "has_sig": false, "md5_digest": "5c8bd05d50f6ae308698f561da7b60eb", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 128351, "upload_time": "2020-03-01T11:31:48", "upload_time_iso_8601": "2020-03-01T11:31:48.860694Z", "url": "https://files.pythonhosted.org/packages/e8/b2/58ffcb8ce197b1073adff112d6b7dc8b6aa76b1612e4860cc7e06496f0ca/django-vb-baseapp-1.1.10.tar.gz", "yanked": false}], "1.1.11": [{"comment_text": "", "digests": {"md5": "19847a9ab16e7d4a8a04794863567c36", "sha256": "8e0997d8d75b82248bf94b213f41cd102eae89f1f185a724cccd40fa958cbeea"}, "downloads": -1, "filename": "django_vb_baseapp-1.1.11-py3-none-any.whl", "has_sig": false, "md5_digest": "19847a9ab16e7d4a8a04794863567c36", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 129610, "upload_time": "2020-03-01T15:24:10", "upload_time_iso_8601": "2020-03-01T15:24:10.949758Z", "url": "https://files.pythonhosted.org/packages/8c/d3/84ef254cf0af578093351b59aabd3732a76965ae9956105a958e718105bf/django_vb_baseapp-1.1.11-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d7762ee459581a780abe26c908006c60", "sha256": "4d90f727f7378bfa14ddd5c4f0ebce4c297bedc025f639e974e45ad288042935"}, "downloads": -1, "filename": "django-vb-baseapp-1.1.11.tar.gz", "has_sig": false, "md5_digest": "d7762ee459581a780abe26c908006c60", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 128352, "upload_time": "2020-03-01T15:24:13", "upload_time_iso_8601": "2020-03-01T15:24:13.871639Z", "url": "https://files.pythonhosted.org/packages/53/13/de64e9803e8125cf17fb44dea3a4da4541ae3685cb963ed16ed20e426cc1/django-vb-baseapp-1.1.11.tar.gz", "yanked": false}], "1.1.12": [{"comment_text": "", "digests": {"md5": "cc8153f2763f34d4f780632a4b0ed3f4", "sha256": "c472132c8303dc82c2a117611b86f72cca8f74116a709e8062eac6f485756f37"}, "downloads": -1, "filename": "django_vb_baseapp-1.1.12-py3-none-any.whl", "has_sig": false, "md5_digest": "cc8153f2763f34d4f780632a4b0ed3f4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 129586, "upload_time": "2020-03-01T18:40:39", "upload_time_iso_8601": "2020-03-01T18:40:39.213003Z", "url": "https://files.pythonhosted.org/packages/71/0d/d373cbbeaf4d9c1ebb50b8d5b7c016c6cd59ec192c8f7800fbd4e843b769/django_vb_baseapp-1.1.12-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9ecbf1abb7f2f1d179ff207e496321cb", "sha256": "070a949b8d1efac4c65bce3c151cc106d5af7a830e532e91ce65e98e60c857c8"}, "downloads": -1, "filename": "django-vb-baseapp-1.1.12.tar.gz", "has_sig": false, "md5_digest": "9ecbf1abb7f2f1d179ff207e496321cb", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 128314, "upload_time": "2020-03-01T18:40:42", "upload_time_iso_8601": "2020-03-01T18:40:42.553796Z", "url": "https://files.pythonhosted.org/packages/1a/39/ef1b0c24b5a3b49cf5a190f21664183beca366dd8972f710a152142d017c/django-vb-baseapp-1.1.12.tar.gz", "yanked": false}], "1.1.2": [{"comment_text": "", "digests": {"md5": "5c235807021006fef21c8d0bfcc933b4", "sha256": "85adf09877fcade6a36e0cb827f42518dc8538fd3eb477d45fd9b154643153a3"}, "downloads": -1, "filename": "django_vb_baseapp-1.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "5c235807021006fef21c8d0bfcc933b4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 129366, "upload_time": "2019-12-05T13:08:46", "upload_time_iso_8601": "2019-12-05T13:08:46.593562Z", "url": "https://files.pythonhosted.org/packages/3a/95/5035e617a601565062264c9d6adc1eca5d7327e7960f79040fe735662b57/django_vb_baseapp-1.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4613acdc3df424b94634148480e7e3e4", "sha256": "104b39d849c750c3b1e666b53bdac70c665cfa95902b4301249d93d5507667e4"}, "downloads": -1, "filename": "django-vb-baseapp-1.1.2.tar.gz", "has_sig": false, "md5_digest": "4613acdc3df424b94634148480e7e3e4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 130665, "upload_time": "2019-12-05T13:08:48", "upload_time_iso_8601": "2019-12-05T13:08:48.694776Z", "url": "https://files.pythonhosted.org/packages/1d/16/01ac92193c8bf0dfc18f1b7e1230b4322ccf977000e5798363368ecee806/django-vb-baseapp-1.1.2.tar.gz", "yanked": false}], "1.1.3": [{"comment_text": "", "digests": {"md5": "546efef30317bec68b7ae09be3cb817f", "sha256": "0f86138c749c83512d127bc6680c8f7083a3998260201afa77db4e53036bd8e7"}, "downloads": -1, "filename": "django_vb_baseapp-1.1.3-py3-none-any.whl", "has_sig": false, "md5_digest": "546efef30317bec68b7ae09be3cb817f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 129362, "upload_time": "2019-12-08T09:09:01", "upload_time_iso_8601": "2019-12-08T09:09:01.534782Z", "url": "https://files.pythonhosted.org/packages/00/1f/e99c227e6c6108a964e2630d1962a6ddc7f012c6f357c534d400ea9b7024/django_vb_baseapp-1.1.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ed566d6d57c935f651d303622a726296", "sha256": "7604a21441efcccea6d5b1f857b692664e42737f7686b9b98281a26ffc248f78"}, "downloads": -1, "filename": "django-vb-baseapp-1.1.3.tar.gz", "has_sig": false, "md5_digest": "ed566d6d57c935f651d303622a726296", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 127779, "upload_time": "2019-12-08T09:09:04", "upload_time_iso_8601": "2019-12-08T09:09:04.555742Z", "url": "https://files.pythonhosted.org/packages/af/44/23c81f1f7c61de029c19cf5ca806fdce09abaf1fe6c3abccfd36a56f98a0/django-vb-baseapp-1.1.3.tar.gz", "yanked": false}], "1.1.4": [{"comment_text": "", "digests": {"md5": "39896ed3b6b366ad062cbfeb7fef7ab5", "sha256": "7a4e94ce86e6d2ac989644922888993ed7dbdb8df1ef4b1f5dca42fe4508ca6b"}, "downloads": -1, "filename": "django_vb_baseapp-1.1.4-py3-none-any.whl", "has_sig": false, "md5_digest": "39896ed3b6b366ad062cbfeb7fef7ab5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 129370, "upload_time": "2019-12-08T20:10:37", "upload_time_iso_8601": "2019-12-08T20:10:37.460844Z", "url": "https://files.pythonhosted.org/packages/33/d7/7a3c1aeafd3b9e1ae030fe23635e756cb7f57cf3cbdaeff40fc6cf433999/django_vb_baseapp-1.1.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "dcad78c60de79b07f9b2257de8eb3924", "sha256": "f5aefc8418f366d7cebc0dc6bad010c5ce9d094ce0a97827f046ecc9f1b46d23"}, "downloads": -1, "filename": "django-vb-baseapp-1.1.4.tar.gz", "has_sig": false, "md5_digest": "dcad78c60de79b07f9b2257de8eb3924", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 127787, "upload_time": "2019-12-08T20:10:41", "upload_time_iso_8601": "2019-12-08T20:10:41.267667Z", "url": "https://files.pythonhosted.org/packages/2f/2d/db3d12dd29290b0a2037c1e873336f7b8b1f8910c0fa6b41d4ff16b5eff8/django-vb-baseapp-1.1.4.tar.gz", "yanked": false}], "1.1.5": [{"comment_text": "", "digests": {"md5": "89ea79be0f67b506f294c635ece38c78", "sha256": "1589ca654cf9838d4e28076080ecff978d172ff6528748c7605602a4557958bf"}, "downloads": -1, "filename": "django_vb_baseapp-1.1.5-py3-none-any.whl", "has_sig": false, "md5_digest": "89ea79be0f67b506f294c635ece38c78", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 129439, "upload_time": "2019-12-14T06:40:19", "upload_time_iso_8601": "2019-12-14T06:40:19.555219Z", "url": "https://files.pythonhosted.org/packages/ae/0a/a2ec3d7715505751a0f11fc5e247a77e06eb6bde47a9d6b6df3b6d8cd5ad/django_vb_baseapp-1.1.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9962ff5260f7194d2d79f854f83f9c8f", "sha256": "c74829828b2019de1deb187b2aff450a7bc33bcb6c7062d631ce700160b25b6e"}, "downloads": -1, "filename": "django-vb-baseapp-1.1.5.tar.gz", "has_sig": false, "md5_digest": "9962ff5260f7194d2d79f854f83f9c8f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 127942, "upload_time": "2019-12-14T06:40:23", "upload_time_iso_8601": "2019-12-14T06:40:23.416104Z", "url": "https://files.pythonhosted.org/packages/b2/7d/6e7354f7c1dc8144b716a0254d388fa37c2bea568ededcc441394c71a107/django-vb-baseapp-1.1.5.tar.gz", "yanked": false}], "1.1.6": [{"comment_text": "", "digests": {"md5": "bbc31dd84881034cf5da41ce7047da55", "sha256": "875077638828a78d804a54a72942bc4cfe75e4946fdfa984a72c2f980bd6995a"}, "downloads": -1, "filename": "django_vb_baseapp-1.1.6-py3-none-any.whl", "has_sig": false, "md5_digest": "bbc31dd84881034cf5da41ce7047da55", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 129475, "upload_time": "2019-12-15T05:59:18", "upload_time_iso_8601": "2019-12-15T05:59:18.746351Z", "url": "https://files.pythonhosted.org/packages/a3/03/35c56e0cb1a51a9efc81d62b4a708e584d18a67b489a921a98f6056a6e1e/django_vb_baseapp-1.1.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d7169e6c2563363bd94c209e7cccf607", "sha256": "1f2b5f835ca54570f27276d6fe2870b2d58c0c9097cd3ef383de5b899edf831d"}, "downloads": -1, "filename": "django-vb-baseapp-1.1.6.tar.gz", "has_sig": false, "md5_digest": "d7169e6c2563363bd94c209e7cccf607", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 127970, "upload_time": "2019-12-15T05:59:23", "upload_time_iso_8601": "2019-12-15T05:59:23.754367Z", "url": "https://files.pythonhosted.org/packages/01/6b/5f80610c3629ccf1f633e237fb7315f432c9723e0bdf54ec8d42b7978908/django-vb-baseapp-1.1.6.tar.gz", "yanked": false}], "1.1.7": [{"comment_text": "", "digests": {"md5": "a62034333e32a5ed6be8440b0e795f88", "sha256": "9014faa133fae60a7bed8429304ad23e30453e871417adbf854e45c8b6fa8450"}, "downloads": -1, "filename": "django_vb_baseapp-1.1.7-py3-none-any.whl", "has_sig": false, "md5_digest": "a62034333e32a5ed6be8440b0e795f88", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 129536, "upload_time": "2019-12-20T07:45:44", "upload_time_iso_8601": "2019-12-20T07:45:44.630277Z", "url": "https://files.pythonhosted.org/packages/8d/04/8899909e26b07f4e217d566e0f9a5f7a7f903f4a11b27dadcc81b39db03e/django_vb_baseapp-1.1.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "74bbce12d0a1ec64b500a498561ac703", "sha256": "5c469b06b27ff198fa199a751891342f79e7a8afb1ad82151474063d6f07b723"}, "downloads": -1, "filename": "django-vb-baseapp-1.1.7.tar.gz", "has_sig": false, "md5_digest": "74bbce12d0a1ec64b500a498561ac703", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 128035, "upload_time": "2019-12-20T07:45:46", "upload_time_iso_8601": "2019-12-20T07:45:46.872578Z", "url": "https://files.pythonhosted.org/packages/68/62/8cc95d1e78865441e85b1bf29a3804bd5eac012f52fa8cf40c4fcf3d3e1c/django-vb-baseapp-1.1.7.tar.gz", "yanked": false}], "1.1.8": [{"comment_text": "", "digests": {"md5": "d0cf5295ae42abf4ca27a81adff66a6a", "sha256": "8a07b5588ea647b3216a61c7a32358120413727cf8e8808bc7d7d8481a8495eb"}, "downloads": -1, "filename": "django_vb_baseapp-1.1.8-py3-none-any.whl", "has_sig": false, "md5_digest": "d0cf5295ae42abf4ca27a81adff66a6a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 129540, "upload_time": "2020-02-22T13:29:33", "upload_time_iso_8601": "2020-02-22T13:29:33.274137Z", "url": "https://files.pythonhosted.org/packages/bc/1d/3d9ac244c47caea3eefcd7051ad1bdb2527032beab43bccfaa25028b30da/django_vb_baseapp-1.1.8-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "31e88afdb501273164e42f6600e56508", "sha256": "93ea27fdf61d3d09498aa047077b649a63c9fe0a73c6e3c67d9b25760cb3e7ad"}, "downloads": -1, "filename": "django-vb-baseapp-1.1.8.tar.gz", "has_sig": false, "md5_digest": "31e88afdb501273164e42f6600e56508", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 128257, "upload_time": "2020-02-22T13:29:35", "upload_time_iso_8601": "2020-02-22T13:29:35.887844Z", "url": "https://files.pythonhosted.org/packages/fa/eb/706d98d64244152ec7ad58d894636396858c9301e405dc30c5631cba1bac/django-vb-baseapp-1.1.8.tar.gz", "yanked": false}], "1.1.9": [{"comment_text": "", "digests": {"md5": "2fc4670856beaa355f86f033c6f6469e", "sha256": "6690f96f7f62529dba348ad2a58fedd87a1fd27737e7fcbe4b714e62bc83f5ff"}, "downloads": -1, "filename": "django_vb_baseapp-1.1.9-py3-none-any.whl", "has_sig": false, "md5_digest": "2fc4670856beaa355f86f033c6f6469e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 129567, "upload_time": "2020-03-01T11:28:07", "upload_time_iso_8601": "2020-03-01T11:28:07.912788Z", "url": "https://files.pythonhosted.org/packages/9c/cf/ccc6ee5b3c4b15763114091fd979f060aa61a602e143afab53c8f7e35ca6/django_vb_baseapp-1.1.9-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6d40715b038d3806aed3589d1ceb2684", "sha256": "4ee6010ee4e31a703965b0fa02de630a26b104e1922f842563a39a7518d869f9"}, "downloads": -1, "filename": "django-vb-baseapp-1.1.9.tar.gz", "has_sig": false, "md5_digest": "6d40715b038d3806aed3589d1ceb2684", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 128287, "upload_time": "2020-03-01T11:28:10", "upload_time_iso_8601": "2020-03-01T11:28:10.806376Z", "url": "https://files.pythonhosted.org/packages/8d/b5/629aafcb994516bdfa9292cdd9b2a151534fb3dca23e4c32f1eb8039b658/django-vb-baseapp-1.1.9.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "cc8153f2763f34d4f780632a4b0ed3f4", "sha256": "c472132c8303dc82c2a117611b86f72cca8f74116a709e8062eac6f485756f37"}, "downloads": -1, "filename": "django_vb_baseapp-1.1.12-py3-none-any.whl", "has_sig": false, "md5_digest": "cc8153f2763f34d4f780632a4b0ed3f4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 129586, "upload_time": "2020-03-01T18:40:39", "upload_time_iso_8601": "2020-03-01T18:40:39.213003Z", "url": "https://files.pythonhosted.org/packages/71/0d/d373cbbeaf4d9c1ebb50b8d5b7c016c6cd59ec192c8f7800fbd4e843b769/django_vb_baseapp-1.1.12-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9ecbf1abb7f2f1d179ff207e496321cb", "sha256": "070a949b8d1efac4c65bce3c151cc106d5af7a830e532e91ce65e98e60c857c8"}, "downloads": -1, "filename": "django-vb-baseapp-1.1.12.tar.gz", "has_sig": false, "md5_digest": "9ecbf1abb7f2f1d179ff207e496321cb", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 128314, "upload_time": "2020-03-01T18:40:42", "upload_time_iso_8601": "2020-03-01T18:40:42.553796Z", "url": "https://files.pythonhosted.org/packages/1a/39/ef1b0c24b5a3b49cf5a190f21664183beca366dd8972f710a152142d017c/django-vb-baseapp-1.1.12.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:52:04 2020"}