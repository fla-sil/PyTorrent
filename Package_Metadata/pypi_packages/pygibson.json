{"info": {"author": "Anton Baklanov", "author_email": "antonbaklanov@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: MacOS", "Operating System :: POSIX :: BSD", "Operating System :: POSIX :: Linux", "Programming Language :: Python", "Programming Language :: Python :: Implementation :: CPython", "Topic :: Software Development :: Libraries"], "description": ":version: 0.2.1\n\n|build_status|_\n\n.. |build_status| image:: https://api.travis-ci.org/bak1an/pygibson.png\n.. _build_status: https://travis-ci.org/bak1an/pygibson\n\npygibson\n========\n\nPython client for gibson_ cache server.\n\n.. _gibson: http://gibson-db.in/\n\n\nWhich python versions are supported?\n------------------------------------\n\nCurrently testsuite runs with python 2.6, 2.7, 3.2 and 3.3.\n\nAll tests are passing successfully with PyPy 2.0.2 but since pygibson is\nimplemented as CPython extension it's not recommended to use it with PyPy. We\nneed to find some workaround to this later.\n\n\nHow to install?\n---------------\n::\n\n  pip install pygibson\n\nor\n\n::\n\n  git clone https://github.com/bak1an/pygibson.git\n  cd pygibson\n  git submodule update --init\n  python setup.py install\n\n\nHow to use?\n-----------\n\n\n.. code:: python\n\n    from pygibson import Client\n    from pygibson import NotFoundError\n\n    cl = Client() # defaults, 127.0.0.1:10128, timeout=1000\n    cl2 = Client(host=\"192.168.1.33\", port=4321, timeout=1500) # non defaults\n    cl3 = Client(unix_socket=\"/var/run/gibson.sock\", timeout=500) # connects to unix socket with timeout set to 500\n\n    cl.set(\"some_key\", \"some_value\")\n    print cl.get(\"some_key\")  # \"some_value\" will be printed\n    try:\n        cl.get(\"no_such_key\")\n    except NotFoundError:\n        print \"Yay, no such key!\"\n\n\nClient() class methods\n----------------------\n\n+-------------+-------------------+-----------------------------------------------------------------------------------+\n| Method name | Parameters        | Description                                                                       |\n+=============+===================+===================================================================================+\n| __init__    | host=\"127.0.0.1\", | If *unix_socket* is None connects to **host**:**port**,                           |\n|             | port=10128,       | otherwise connects to given **unix_socket**. *timeout* parameter                  |\n|             | unix_socket=None, | can be used to set timeout for IO operations.                                     |\n|             | timeout=1000      | Default is 1000ms.                                                                |\n+-------------+-------------------+-----------------------------------------------------------------------------------+\n| set_        | key, value, ttl=0 | Required parameters are key and value.                                            |\n|             |                   | Optional parameter *ttl* can be used to set entry TTL in seconds.                 |\n|             |                   | Default is 0, which means infinite TTL.                                           |\n+-------------+-------------------+-----------------------------------------------------------------------------------+\n| mset_       | prefix, value     | Set **value** for all keys which are starting                                     |\n|             |                   | with **prefix**. This method will raise *NotFoundError* if there are no keys      |\n|             |                   | starting with **prefix** at server.                                               |\n+-------------+-------------------+-----------------------------------------------------------------------------------+\n| ttl_        | key, ttl          | Set TTL in seconds for **key**.                                                   |\n+-------------+-------------------+-----------------------------------------------------------------------------------+\n| mttl_       | prefix, ttl       | Set TTL in seconds for all keys string with **prefix**.                           |\n+-------------+-------------------+-----------------------------------------------------------------------------------+\n| get_        | key               | Get value for given **key**.                                                      |\n+-------------+-------------------+-----------------------------------------------------------------------------------+\n| mget_       | prefix            | Get values for keys starting with **prefix**.                                     |\n+-------------+-------------------+-----------------------------------------------------------------------------------+\n| dl_         | key               | Delete given **key** from server. Renamed to *dl* to avoid clashes with           |\n|             |                   | python's keyword.                                                                 |\n+-------------+-------------------+-----------------------------------------------------------------------------------+\n| mdl_        | prefix            | Delete keys starting with **prefix** from server.                                 |\n+-------------+-------------------+-----------------------------------------------------------------------------------+\n| inc_        | key               | Increment **key** by 1.                                                           |\n+-------------+-------------------+-----------------------------------------------------------------------------------+\n| minc_       | prefix            | Increment keys starting with **prefix** by 1.                                     |\n+-------------+-------------------+-----------------------------------------------------------------------------------+\n| dec_        | key               | Decrement **key** by 1.                                                           |\n+-------------+-------------------+-----------------------------------------------------------------------------------+\n| mdec_       | prefix            | Decrement keys starting with **prefix** by 1.                                     |\n+-------------+-------------------+-----------------------------------------------------------------------------------+\n| lock_       | key, time         | Lock **key** for **time** seconds. Any write operations to that key will fail     |\n|             |                   | and *LockedError* will be raised.                                                 |\n+-------------+-------------------+-----------------------------------------------------------------------------------+\n| unlock_     | key               | Unlock **key**.                                                                   |\n+-------------+-------------------+-----------------------------------------------------------------------------------+\n| mlock_      | prefix, time      | Lock keys starting with **prefix** for **time** seconds.                          |\n+-------------+-------------------+-----------------------------------------------------------------------------------+\n| munlock_    | prefix            | Unlock keys starting with **prefix**.                                             |\n+-------------+-------------------+-----------------------------------------------------------------------------------+\n| count_      | prefix            | Get count of keys starting with **prefix**.                                       |\n+-------------+-------------------+-----------------------------------------------------------------------------------+\n| meta_       | key, field        | Get useful info about *key*. Allowed values for **field** are: 'size', 'encoding' |\n|             |                   | 'access', 'created', 'ttl', 'left', 'lock'. Click method's name in first column   |\n|             |                   | for details ;)                                                                    |\n+-------------+-------------------+-----------------------------------------------------------------------------------+\n| keys_       | prefix            | Get list of keys starting with **prefix**.                                        |\n+-------------+-------------------+-----------------------------------------------------------------------------------+\n| stats_      |                   | Get useful statistics from server. See gibson protocol docs for details.          |\n+-------------+-------------------+-----------------------------------------------------------------------------------+\n| ping_       |                   | Ping server. Raise *PyGibsonError* if failed.                                     |\n+-------------+-------------------+-----------------------------------------------------------------------------------+\n| quit_       |                   | Disconnect.                                                                       |\n+-------------+-------------------+-----------------------------------------------------------------------------------+\n\n    :NOTE: values packed in **bytes** are returned from *get*, *mget* and  *keys* under python 3.\n\n.. _set: http://gibson-db.in/command-set.php\n.. _mset: http://gibson-db.in/command-mset.php\n.. _ttl: http://gibson-db.in/command-ttl.php\n.. _mttl: http://gibson-db.in/command-mttl.php\n.. _get: http://gibson-db.in/command-get.php\n.. _mget: http://gibson-db.in/command-mget.php\n.. _dl: http://gibson-db.in/command-del.php\n.. _mdl: http://gibson-db.in/command-mdel.php\n.. _inc: http://gibson-db.in/command-inc.php\n.. _minc: http://gibson-db.in/command-minc.php\n.. _mdec: http://gibson-db.in/command-mdec.php\n.. _dec: http://gibson-db.in/command-dec.php\n.. _lock: http://gibson-db.in/command-lock.php\n.. _mlock: http://gibson-db.in/command-mlock.php\n.. _unlock: http://gibson-db.in/command-unlock.php\n.. _munlock: http://gibson-db.in/command-munlock.php\n.. _count: http://gibson-db.in/command-count.php\n.. _meta: http://gibson-db.in/command-meta.php\n.. _keys: http://gibson-db.in/command-keys.php\n.. _stats: http://gibson-db.in/command-stats.php\n.. _ping: http://gibson-db.in/command-ping.php\n.. _quit: http://gibson-db.in/command-quit.php\n\n\nExceptions\n----------\n\nHere is a list of exceptions which are available in **pygibson** module:\n\n+---------------+------------------------------------------------------------------------+\n| Exception     | Description                                                            |\n+===============+========================================================================+\n| PyGibsonError | Generic error. raised when REPL_ERR received from server               |\n|               | or any other error occurred (connection refused, timeout, etc).        |\n|               | All other pygibson exceptions are subclassed from this one             |\n+---------------+------------------------------------------------------------------------+\n| NotFoundError | Not found error. Raised when REPL_ERR_NOT_FOUND received from server   |\n+---------------+------------------------------------------------------------------------+\n| NaNError      | Not a number. Raised from **inc**, **minc**, **dec** and **mdec** when |\n|               | incrementing/decrementing not a numerical values                       |\n+---------------+------------------------------------------------------------------------+\n| NoMemoryError | Raised when server has no free memory for your stuff                   |\n+---------------+------------------------------------------------------------------------+\n| LockedError   | Raised when values that you are trying to modify are locked            |\n+---------------+------------------------------------------------------------------------+\n\n\nRoadmap\n=======\n\n- Connection pool\n- Ability to connect multiple servers\n- Better pypy support\n\n\nLicense\n=======\n\npygibson code is distributed under MIT license conditions, see LICENSE for\ndetails.\n\npygibson distribution includes bundled copy of libgibsonclient_ library which is written by\nSimone Margaritelli and distributed on terms of BSD license.\n\n.. _libgibsonclient: https://github.com/evilsocket/libgibsonclient", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/bak1an/pygibson", "keywords": null, "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "pygibson", "package_url": "https://pypi.org/project/pygibson/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/pygibson/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/bak1an/pygibson"}, "release_url": "https://pypi.org/project/pygibson/0.2.1/", "requires_dist": null, "requires_python": null, "summary": "Python client for gibson cache server", "version": "0.2.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <table>\n<col>\n<col>\n<tbody>\n<tr><th>Version:</th>\n<td>0.2.1</td></tr>\n</tbody>\n</table>\n<p><a href=\"https://travis-ci.org/bak1an/pygibson\" rel=\"nofollow\"><img alt=\"build_status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/948c20eaf2916abe34e93f54410cf0f643b1e602/68747470733a2f2f6170692e7472617669732d63692e6f72672f62616b31616e2f7079676962736f6e2e706e67\"></a></p>\n<div id=\"pygibson\">\n<h2>pygibson</h2>\n<p>Python client for <a href=\"http://gibson-db.in/\" rel=\"nofollow\">gibson</a> cache server.</p>\n<div id=\"which-python-versions-are-supported\">\n<h3>Which python versions are supported?</h3>\n<p>Currently testsuite runs with python 2.6, 2.7, 3.2 and 3.3.</p>\n<p>All tests are passing successfully with PyPy 2.0.2 but since pygibson is\nimplemented as CPython extension it\u2019s not recommended to use it with PyPy. We\nneed to find some workaround to this later.</p>\n</div>\n<div id=\"how-to-install\">\n<h3>How to install?</h3>\n<pre>pip install pygibson\n</pre>\n<p>or</p>\n<pre>git clone https://github.com/bak1an/pygibson.git\ncd pygibson\ngit submodule update --init\npython setup.py install\n</pre>\n</div>\n<div id=\"how-to-use\">\n<h3>How to use?</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pygibson</span> <span class=\"kn\">import</span> <span class=\"n\">Client</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pygibson</span> <span class=\"kn\">import</span> <span class=\"n\">NotFoundError</span>\n\n<span class=\"n\">cl</span> <span class=\"o\">=</span> <span class=\"n\">Client</span><span class=\"p\">()</span> <span class=\"c1\"># defaults, 127.0.0.1:10128, timeout=1000</span>\n<span class=\"n\">cl2</span> <span class=\"o\">=</span> <span class=\"n\">Client</span><span class=\"p\">(</span><span class=\"n\">host</span><span class=\"o\">=</span><span class=\"s2\">\"192.168.1.33\"</span><span class=\"p\">,</span> <span class=\"n\">port</span><span class=\"o\">=</span><span class=\"mi\">4321</span><span class=\"p\">,</span> <span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"mi\">1500</span><span class=\"p\">)</span> <span class=\"c1\"># non defaults</span>\n<span class=\"n\">cl3</span> <span class=\"o\">=</span> <span class=\"n\">Client</span><span class=\"p\">(</span><span class=\"n\">unix_socket</span><span class=\"o\">=</span><span class=\"s2\">\"/var/run/gibson.sock\"</span><span class=\"p\">,</span> <span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"mi\">500</span><span class=\"p\">)</span> <span class=\"c1\"># connects to unix socket with timeout set to 500</span>\n\n<span class=\"n\">cl</span><span class=\"o\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"s2\">\"some_key\"</span><span class=\"p\">,</span> <span class=\"s2\">\"some_value\"</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span> <span class=\"n\">cl</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"some_key\"</span><span class=\"p\">)</span>  <span class=\"c1\"># \"some_value\" will be printed</span>\n<span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"n\">cl</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"no_such_key\"</span><span class=\"p\">)</span>\n<span class=\"k\">except</span> <span class=\"n\">NotFoundError</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span> <span class=\"s2\">\"Yay, no such key!\"</span>\n</pre>\n</div>\n<div id=\"client-class-methods\">\n<h3>Client() class methods</h3>\n<table>\n<colgroup>\n<col>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Method name</th>\n<th>Parameters</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>__init__</td>\n<td>host=\u201d127.0.0.1\u201d,\nport=10128,\nunix_socket=None,\ntimeout=1000</td>\n<td>If <em>unix_socket</em> is None connects to <strong>host</strong>:<strong>port</strong>,\notherwise connects to given <strong>unix_socket</strong>. <em>timeout</em> parameter\ncan be used to set timeout for IO operations.\nDefault is 1000ms.</td>\n</tr>\n<tr><td><a href=\"http://gibson-db.in/command-set.php\" rel=\"nofollow\">set</a></td>\n<td>key, value, ttl=0</td>\n<td>Required parameters are key and value.\nOptional parameter <em>ttl</em> can be used to set entry TTL in seconds.\nDefault is 0, which means infinite TTL.</td>\n</tr>\n<tr><td><a href=\"http://gibson-db.in/command-mset.php\" rel=\"nofollow\">mset</a></td>\n<td>prefix, value</td>\n<td>Set <strong>value</strong> for all keys which are starting\nwith <strong>prefix</strong>. This method will raise <em>NotFoundError</em> if there are no keys\nstarting with <strong>prefix</strong> at server.</td>\n</tr>\n<tr><td><a href=\"http://gibson-db.in/command-ttl.php\" rel=\"nofollow\">ttl</a></td>\n<td>key, ttl</td>\n<td>Set TTL in seconds for <strong>key</strong>.</td>\n</tr>\n<tr><td><a href=\"http://gibson-db.in/command-mttl.php\" rel=\"nofollow\">mttl</a></td>\n<td>prefix, ttl</td>\n<td>Set TTL in seconds for all keys string with <strong>prefix</strong>.</td>\n</tr>\n<tr><td><a href=\"http://gibson-db.in/command-get.php\" rel=\"nofollow\">get</a></td>\n<td>key</td>\n<td>Get value for given <strong>key</strong>.</td>\n</tr>\n<tr><td><a href=\"http://gibson-db.in/command-mget.php\" rel=\"nofollow\">mget</a></td>\n<td>prefix</td>\n<td>Get values for keys starting with <strong>prefix</strong>.</td>\n</tr>\n<tr><td><a href=\"http://gibson-db.in/command-del.php\" rel=\"nofollow\">dl</a></td>\n<td>key</td>\n<td>Delete given <strong>key</strong> from server. Renamed to <em>dl</em> to avoid clashes with\npython\u2019s keyword.</td>\n</tr>\n<tr><td><a href=\"http://gibson-db.in/command-mdel.php\" rel=\"nofollow\">mdl</a></td>\n<td>prefix</td>\n<td>Delete keys starting with <strong>prefix</strong> from server.</td>\n</tr>\n<tr><td><a href=\"http://gibson-db.in/command-inc.php\" rel=\"nofollow\">inc</a></td>\n<td>key</td>\n<td>Increment <strong>key</strong> by 1.</td>\n</tr>\n<tr><td><a href=\"http://gibson-db.in/command-minc.php\" rel=\"nofollow\">minc</a></td>\n<td>prefix</td>\n<td>Increment keys starting with <strong>prefix</strong> by 1.</td>\n</tr>\n<tr><td><a href=\"http://gibson-db.in/command-dec.php\" rel=\"nofollow\">dec</a></td>\n<td>key</td>\n<td>Decrement <strong>key</strong> by 1.</td>\n</tr>\n<tr><td><a href=\"http://gibson-db.in/command-mdec.php\" rel=\"nofollow\">mdec</a></td>\n<td>prefix</td>\n<td>Decrement keys starting with <strong>prefix</strong> by 1.</td>\n</tr>\n<tr><td><a href=\"http://gibson-db.in/command-lock.php\" rel=\"nofollow\">lock</a></td>\n<td>key, time</td>\n<td>Lock <strong>key</strong> for <strong>time</strong> seconds. Any write operations to that key will fail\nand <em>LockedError</em> will be raised.</td>\n</tr>\n<tr><td><a href=\"http://gibson-db.in/command-unlock.php\" rel=\"nofollow\">unlock</a></td>\n<td>key</td>\n<td>Unlock <strong>key</strong>.</td>\n</tr>\n<tr><td><a href=\"http://gibson-db.in/command-mlock.php\" rel=\"nofollow\">mlock</a></td>\n<td>prefix, time</td>\n<td>Lock keys starting with <strong>prefix</strong> for <strong>time</strong> seconds.</td>\n</tr>\n<tr><td><a href=\"http://gibson-db.in/command-munlock.php\" rel=\"nofollow\">munlock</a></td>\n<td>prefix</td>\n<td>Unlock keys starting with <strong>prefix</strong>.</td>\n</tr>\n<tr><td><a href=\"http://gibson-db.in/command-count.php\" rel=\"nofollow\">count</a></td>\n<td>prefix</td>\n<td>Get count of keys starting with <strong>prefix</strong>.</td>\n</tr>\n<tr><td><a href=\"http://gibson-db.in/command-meta.php\" rel=\"nofollow\">meta</a></td>\n<td>key, field</td>\n<td>Get useful info about <em>key</em>. Allowed values for <strong>field</strong> are: \u2018size\u2019, \u2018encoding\u2019\n\u2018access\u2019, \u2018created\u2019, \u2018ttl\u2019, \u2018left\u2019, \u2018lock\u2019. Click method\u2019s name in first column\nfor details ;)</td>\n</tr>\n<tr><td><a href=\"http://gibson-db.in/command-keys.php\" rel=\"nofollow\">keys</a></td>\n<td>prefix</td>\n<td>Get list of keys starting with <strong>prefix</strong>.</td>\n</tr>\n<tr><td><a href=\"http://gibson-db.in/command-stats.php\" rel=\"nofollow\">stats</a></td>\n<td>\u00a0</td>\n<td>Get useful statistics from server. See gibson protocol docs for details.</td>\n</tr>\n<tr><td><a href=\"http://gibson-db.in/command-ping.php\" rel=\"nofollow\">ping</a></td>\n<td>\u00a0</td>\n<td>Ping server. Raise <em>PyGibsonError</em> if failed.</td>\n</tr>\n<tr><td><a href=\"http://gibson-db.in/command-quit.php\" rel=\"nofollow\">quit</a></td>\n<td>\u00a0</td>\n<td>Disconnect.</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<table>\n<col>\n<col>\n<tbody>\n<tr><th>NOTE:</th><td>values packed in <strong>bytes</strong> are returned from <em>get</em>, <em>mget</em> and  <em>keys</em> under python 3.</td>\n</tr>\n</tbody>\n</table>\n</blockquote>\n</div>\n<div id=\"exceptions\">\n<h3>Exceptions</h3>\n<p>Here is a list of exceptions which are available in <strong>pygibson</strong> module:</p>\n<table>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Exception</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>PyGibsonError</td>\n<td>Generic error. raised when REPL_ERR received from server\nor any other error occurred (connection refused, timeout, etc).\nAll other pygibson exceptions are subclassed from this one</td>\n</tr>\n<tr><td>NotFoundError</td>\n<td>Not found error. Raised when REPL_ERR_NOT_FOUND received from server</td>\n</tr>\n<tr><td>NaNError</td>\n<td>Not a number. Raised from <strong>inc</strong>, <strong>minc</strong>, <strong>dec</strong> and <strong>mdec</strong> when\nincrementing/decrementing not a numerical values</td>\n</tr>\n<tr><td>NoMemoryError</td>\n<td>Raised when server has no free memory for your stuff</td>\n</tr>\n<tr><td>LockedError</td>\n<td>Raised when values that you are trying to modify are locked</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>\n<div id=\"roadmap\">\n<h2>Roadmap</h2>\n<ul>\n<li>Connection pool</li>\n<li>Ability to connect multiple servers</li>\n<li>Better pypy support</li>\n</ul>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>pygibson code is distributed under MIT license conditions, see LICENSE for\ndetails.</p>\n<p>pygibson distribution includes bundled copy of <a href=\"https://github.com/evilsocket/libgibsonclient\" rel=\"nofollow\">libgibsonclient</a> library which is written by\nSimone Margaritelli and distributed on terms of BSD license.</p>\n</div>\n\n          </div>"}, "last_serial": 1661056, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "1fc40a213807318cf48053d6a2b655cb", "sha256": "0c5bb5d69e5ea0ee672245e506d35b4a92b2b9ddcb584e897492595f8e3d44d7"}, "downloads": -1, "filename": "pygibson-0.1.0.tar.gz", "has_sig": false, "md5_digest": "1fc40a213807318cf48053d6a2b655cb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18844, "upload_time": "2013-08-13T21:07:41", "upload_time_iso_8601": "2013-08-13T21:07:41.076284Z", "url": "https://files.pythonhosted.org/packages/1d/61/dbebb88a24e0045786729918dc9c08311976108968d0927d6b4ae84d3eee/pygibson-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "1a2e386531f03ee87ec4bdfc050c0cbe", "sha256": "b6bc45c72d10d29e50cb4b82268c5f08bc6b899485597c12971cc6a647a8a552"}, "downloads": -1, "filename": "pygibson-0.2.0.tar.gz", "has_sig": false, "md5_digest": "1a2e386531f03ee87ec4bdfc050c0cbe", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19346, "upload_time": "2013-08-28T20:09:29", "upload_time_iso_8601": "2013-08-28T20:09:29.045067Z", "url": "https://files.pythonhosted.org/packages/14/8e/262cafa6e4e27c044aef6cbbc50d55010b40f6946d9ad8474d02e9394f79/pygibson-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "58a492c28c208702de585d32d43c1aa8", "sha256": "74991becfabd5702435bb0a540377df33580eaf90dbeb6ef21e64da0c4d1266f"}, "downloads": -1, "filename": "pygibson-0.2.1.tar.gz", "has_sig": false, "md5_digest": "58a492c28c208702de585d32d43c1aa8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19816, "upload_time": "2015-08-02T20:38:48", "upload_time_iso_8601": "2015-08-02T20:38:48.380424Z", "url": "https://files.pythonhosted.org/packages/49/ce/18e324897ae11b3a9f271e3780fe5ffa169ac980a47eb9c14077f586ebda/pygibson-0.2.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "58a492c28c208702de585d32d43c1aa8", "sha256": "74991becfabd5702435bb0a540377df33580eaf90dbeb6ef21e64da0c4d1266f"}, "downloads": -1, "filename": "pygibson-0.2.1.tar.gz", "has_sig": false, "md5_digest": "58a492c28c208702de585d32d43c1aa8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19816, "upload_time": "2015-08-02T20:38:48", "upload_time_iso_8601": "2015-08-02T20:38:48.380424Z", "url": "https://files.pythonhosted.org/packages/49/ce/18e324897ae11b3a9f271e3780fe5ffa169ac980a47eb9c14077f586ebda/pygibson-0.2.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:05:01 2020"}