{"info": {"author": "Veli Akiner", "author_email": "veli@kopernio.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Framework :: Pytest", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy", "Topic :: Software Development :: Testing"], "description": "# Pytest Hoverfly Wrapper\n\nThis `pytest` plugin allows easy integration of Hoverfly into your tests. Hoverfly is a proxy server that can intercept requests and return custom responses. More info on Hoverfly: https://hoverfly.io/\n\n## Installation\n\nClone the repository and then install using `setup.py`:\n\n```sh\npython setup.py install\n```\nThis will also automatically install the plugin's dependencies. Alternatively, install via `pip`:\n\n\n    pip install python-hoverfly-wrapper\n\n\nOnce installation has finished:\n\n  1. Go to https://hoverfly.io/#download\n  2. Download the correct package for your operating system\n  3. Extract the `hoverfly` and `hoverctl` files and ensure that these are in your PATH.\n\n## Usage example\n\n### Cache responses to external services\n\nAdding the `setup_hoverfly` fixture will stand up a Hoverfly server instance running on port 8500. You can then use this \nas a proxy that saves the responses to any requests make via the proxy. If the test passes, the saved responses will be dumped \nto file, which will be used when the test runs again.\n\n```python\n# Enable the fixture explicitly in your tests or conftest.py (not required when using setuptools entry points)\nfrom pytest_hoverfly_wrapper import GeneratedSimulation\nimport requests\nimport pytest\npytest_plugins = ['pytest_hoverfly_wrapper'] # not necessary if the plugin is installed via 'setup.py`\n@pytest.mark.simulated(GeneratedSimulation(file=\"some_file.json\"))\ndef test_something(setup_hoverfly):\n    proxy_port = setup_hoverfly[1]\n    proxies = {\n     \"http\": \"http://localhost:{}\".format(proxy_port),\n     \"https\": \"http://localhost:{}\".format(proxy_port),\n    }\n    requests.get(\"https://urlwedontwanttospam.com\", proxies=proxies)\n    \n```\nAfter running the test for the first time, you will find a file located at `./test_data/generated/some_file.json`, \ncontaining all the requests made using the proxy, as well as the responses to them. Upon running the test the second time, \nthe test will load the file and attempt to match requests to the list in the file. If a successful match is found, the matching \nresponse will be served. If not, the request will be made to its original target and the target's response will be served instead.\n\n### Completely fake responses\n\nYou can also specify your own custom responses.\n\n```python\n# Enable the fixture explicitly in your tests or conftest.py (not required when using setuptools entry points)\nfrom pytest_hoverfly_wrapper import StaticSimulation\nimport requests\nimport pytest\npytest_plugins = ['pytest_hoverfly_wrapper']\n@pytest.mark.simulated(StaticSimulation(files=[\"google_returns_404.json\"]))\ndef test_something(setup_hoverfly):\n    proxy_port = setup_hoverfly[1]\n    proxies = {\n     \"http\": \"http://localhost:{}\".format(proxy_port),\n     \"https\": \"http://localhost:{}\".format(proxy_port),\n    }\n    r = requests.get(\"http://google.com\", proxies=proxies)\n    assert r.status_code == 404\n```\nFull code is in `sample/`\n\n### Hoverfly crashes\nOccasionally, the Hoverfly proxy might crash mid-test. If this happens, the test will raise `HoverflyCrashException`, \nwhich gives you clarity of why the test failed and can be caught in your testing framework as part of some test retrying \nlogic.\n\n### Logging\n`pytest-hoverfly-wrapper` uses the in-built `logging` module for logs. To import the logger:\n```python\nimport logging\nfrom pytest_hoverfly_wrapper import LOGGER_NAME\nhoverfly_logger = logging.getLogger(LOGGER_NAME)\n```\nThen customise the logger as necessary.\n\n\n### Debugging\nIn all scenarios, when a response is sent by Hoverfly rather than a remote server, that response will have the `Hoverfly-Cache-Served` \nheader set. This differentiates the two types of response, and helps debug situations where you think a response is being served by Hoverfly \nbut isn't, e.g. when Hoverfly fails to match the request even though you're expecting it to.\n\nAt the end of the test, the plugin will create a `network.json` file containing the list of all requests made (and responses received) \nduring the test, including parameters and headers.\n\n## Release History\n\n* 0.1.0\n    * Initial release\n* 0.1.1\n    * Updates the description in the PyPi page.\n* 0.1.2\n    * Create test data directory if it doesn't exist\n* 0.1.3\n    * Put the bugfix in 0.1.2 in its correct place and remove extraneous plugin.py code\n\n## Meta\n\nFor all queries contact Veli Akiner: veli@kopernio.com\n\nDistributed under a modified MIT license. See ``LICENSE`` for more information.\n\n[https://github.com/kopernio/pytest-hoverfly-wrapper](https://github.com/kopernio/pytest-hoverfly-wrapper)\n\n## Contributing\n\n1. Fork it (<https://github.com/yourname/yourproject/fork>)\n2. Create your feature branch (`git checkout -b feature/fooBar`)\n3. Commit your changes (`git commit -am 'Add some fooBar'`)\n4. Push to the branch (`git push origin feature/fooBar`)\n5. Create a new Pull Request", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/kopernio/pytest-hoverfly-wrapper", "keywords": "", "license": "MIT", "maintainer": "Veli Akiner", "maintainer_email": "veli@kopernio.com", "name": "pytest-hoverfly-wrapper", "package_url": "https://pypi.org/project/pytest-hoverfly-wrapper/", "platform": "", "project_url": "https://pypi.org/project/pytest-hoverfly-wrapper/", "project_urls": {"Homepage": "https://github.com/kopernio/pytest-hoverfly-wrapper"}, "release_url": "https://pypi.org/project/pytest-hoverfly-wrapper/0.1.3/", "requires_dist": null, "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "summary": "Integrates the Hoverfly HTTP proxy into Pytest", "version": "0.1.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Pytest Hoverfly Wrapper</h1>\n<p>This <code>pytest</code> plugin allows easy integration of Hoverfly into your tests. Hoverfly is a proxy server that can intercept requests and return custom responses. More info on Hoverfly: <a href=\"https://hoverfly.io/\" rel=\"nofollow\">https://hoverfly.io/</a></p>\n<h2>Installation</h2>\n<p>Clone the repository and then install using <code>setup.py</code>:</p>\n<pre>python setup.py install\n</pre>\n<p>This will also automatically install the plugin's dependencies. Alternatively, install via <code>pip</code>:</p>\n<pre><code>pip install python-hoverfly-wrapper\n</code></pre>\n<p>Once installation has finished:</p>\n<ol>\n<li>Go to <a href=\"https://hoverfly.io/#download\" rel=\"nofollow\">https://hoverfly.io/#download</a></li>\n<li>Download the correct package for your operating system</li>\n<li>Extract the <code>hoverfly</code> and <code>hoverctl</code> files and ensure that these are in your PATH.</li>\n</ol>\n<h2>Usage example</h2>\n<h3>Cache responses to external services</h3>\n<p>Adding the <code>setup_hoverfly</code> fixture will stand up a Hoverfly server instance running on port 8500. You can then use this\nas a proxy that saves the responses to any requests make via the proxy. If the test passes, the saved responses will be dumped\nto file, which will be used when the test runs again.</p>\n<pre><span class=\"c1\"># Enable the fixture explicitly in your tests or conftest.py (not required when using setuptools entry points)</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pytest_hoverfly_wrapper</span> <span class=\"kn\">import</span> <span class=\"n\">GeneratedSimulation</span>\n<span class=\"kn\">import</span> <span class=\"nn\">requests</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pytest</span>\n<span class=\"n\">pytest_plugins</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'pytest_hoverfly_wrapper'</span><span class=\"p\">]</span> <span class=\"c1\"># not necessary if the plugin is installed via 'setup.py`</span>\n<span class=\"nd\">@pytest</span><span class=\"o\">.</span><span class=\"n\">mark</span><span class=\"o\">.</span><span class=\"n\">simulated</span><span class=\"p\">(</span><span class=\"n\">GeneratedSimulation</span><span class=\"p\">(</span><span class=\"n\">file</span><span class=\"o\">=</span><span class=\"s2\">\"some_file.json\"</span><span class=\"p\">))</span>\n<span class=\"k\">def</span> <span class=\"nf\">test_something</span><span class=\"p\">(</span><span class=\"n\">setup_hoverfly</span><span class=\"p\">):</span>\n    <span class=\"n\">proxy_port</span> <span class=\"o\">=</span> <span class=\"n\">setup_hoverfly</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n    <span class=\"n\">proxies</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n     <span class=\"s2\">\"http\"</span><span class=\"p\">:</span> <span class=\"s2\">\"http://localhost:</span><span class=\"si\">{}</span><span class=\"s2\">\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">proxy_port</span><span class=\"p\">),</span>\n     <span class=\"s2\">\"https\"</span><span class=\"p\">:</span> <span class=\"s2\">\"http://localhost:</span><span class=\"si\">{}</span><span class=\"s2\">\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">proxy_port</span><span class=\"p\">),</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"https://urlwedontwanttospam.com\"</span><span class=\"p\">,</span> <span class=\"n\">proxies</span><span class=\"o\">=</span><span class=\"n\">proxies</span><span class=\"p\">)</span>\n    \n</pre>\n<p>After running the test for the first time, you will find a file located at <code>./test_data/generated/some_file.json</code>,\ncontaining all the requests made using the proxy, as well as the responses to them. Upon running the test the second time,\nthe test will load the file and attempt to match requests to the list in the file. If a successful match is found, the matching\nresponse will be served. If not, the request will be made to its original target and the target's response will be served instead.</p>\n<h3>Completely fake responses</h3>\n<p>You can also specify your own custom responses.</p>\n<pre><span class=\"c1\"># Enable the fixture explicitly in your tests or conftest.py (not required when using setuptools entry points)</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pytest_hoverfly_wrapper</span> <span class=\"kn\">import</span> <span class=\"n\">StaticSimulation</span>\n<span class=\"kn\">import</span> <span class=\"nn\">requests</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pytest</span>\n<span class=\"n\">pytest_plugins</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'pytest_hoverfly_wrapper'</span><span class=\"p\">]</span>\n<span class=\"nd\">@pytest</span><span class=\"o\">.</span><span class=\"n\">mark</span><span class=\"o\">.</span><span class=\"n\">simulated</span><span class=\"p\">(</span><span class=\"n\">StaticSimulation</span><span class=\"p\">(</span><span class=\"n\">files</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"google_returns_404.json\"</span><span class=\"p\">]))</span>\n<span class=\"k\">def</span> <span class=\"nf\">test_something</span><span class=\"p\">(</span><span class=\"n\">setup_hoverfly</span><span class=\"p\">):</span>\n    <span class=\"n\">proxy_port</span> <span class=\"o\">=</span> <span class=\"n\">setup_hoverfly</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n    <span class=\"n\">proxies</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n     <span class=\"s2\">\"http\"</span><span class=\"p\">:</span> <span class=\"s2\">\"http://localhost:</span><span class=\"si\">{}</span><span class=\"s2\">\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">proxy_port</span><span class=\"p\">),</span>\n     <span class=\"s2\">\"https\"</span><span class=\"p\">:</span> <span class=\"s2\">\"http://localhost:</span><span class=\"si\">{}</span><span class=\"s2\">\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">proxy_port</span><span class=\"p\">),</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"http://google.com\"</span><span class=\"p\">,</span> <span class=\"n\">proxies</span><span class=\"o\">=</span><span class=\"n\">proxies</span><span class=\"p\">)</span>\n    <span class=\"k\">assert</span> <span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">status_code</span> <span class=\"o\">==</span> <span class=\"mi\">404</span>\n</pre>\n<p>Full code is in <code>sample/</code></p>\n<h3>Hoverfly crashes</h3>\n<p>Occasionally, the Hoverfly proxy might crash mid-test. If this happens, the test will raise <code>HoverflyCrashException</code>,\nwhich gives you clarity of why the test failed and can be caught in your testing framework as part of some test retrying\nlogic.</p>\n<h3>Logging</h3>\n<p><code>pytest-hoverfly-wrapper</code> uses the in-built <code>logging</code> module for logs. To import the logger:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pytest_hoverfly_wrapper</span> <span class=\"kn\">import</span> <span class=\"n\">LOGGER_NAME</span>\n<span class=\"n\">hoverfly_logger</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">getLogger</span><span class=\"p\">(</span><span class=\"n\">LOGGER_NAME</span><span class=\"p\">)</span>\n</pre>\n<p>Then customise the logger as necessary.</p>\n<h3>Debugging</h3>\n<p>In all scenarios, when a response is sent by Hoverfly rather than a remote server, that response will have the <code>Hoverfly-Cache-Served</code>\nheader set. This differentiates the two types of response, and helps debug situations where you think a response is being served by Hoverfly\nbut isn't, e.g. when Hoverfly fails to match the request even though you're expecting it to.</p>\n<p>At the end of the test, the plugin will create a <code>network.json</code> file containing the list of all requests made (and responses received)\nduring the test, including parameters and headers.</p>\n<h2>Release History</h2>\n<ul>\n<li>0.1.0\n<ul>\n<li>Initial release</li>\n</ul>\n</li>\n<li>0.1.1\n<ul>\n<li>Updates the description in the PyPi page.</li>\n</ul>\n</li>\n<li>0.1.2\n<ul>\n<li>Create test data directory if it doesn't exist</li>\n</ul>\n</li>\n<li>0.1.3\n<ul>\n<li>Put the bugfix in 0.1.2 in its correct place and remove extraneous plugin.py code</li>\n</ul>\n</li>\n</ul>\n<h2>Meta</h2>\n<p>For all queries contact Veli Akiner: <a href=\"mailto:veli@kopernio.com\">veli@kopernio.com</a></p>\n<p>Distributed under a modified MIT license. See <code>LICENSE</code> for more information.</p>\n<p><a href=\"https://github.com/kopernio/pytest-hoverfly-wrapper\" rel=\"nofollow\">https://github.com/kopernio/pytest-hoverfly-wrapper</a></p>\n<h2>Contributing</h2>\n<ol>\n<li>Fork it (<a href=\"https://github.com/yourname/yourproject/fork\" rel=\"nofollow\">https://github.com/yourname/yourproject/fork</a>)</li>\n<li>Create your feature branch (<code>git checkout -b feature/fooBar</code>)</li>\n<li>Commit your changes (<code>git commit -am 'Add some fooBar'</code>)</li>\n<li>Push to the branch (<code>git push origin feature/fooBar</code>)</li>\n<li>Create a new Pull Request</li>\n</ol>\n\n          </div>"}, "last_serial": 7158982, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "23a1a425d8efa99d6218788623583283", "sha256": "ce37cb6de13c393cbcd75781113def354520652b3d2d46249706f05eb4ff9a66"}, "downloads": -1, "filename": "pytest-hoverfly-wrapper-0.1.0.tar.gz", "has_sig": false, "md5_digest": "23a1a425d8efa99d6218788623583283", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 11170, "upload_time": "2020-05-03T11:21:54", "upload_time_iso_8601": "2020-05-03T11:21:54.789471Z", "url": "https://files.pythonhosted.org/packages/b9/c1/00dcd181400451ea9ba48945dba853a6237e25d701c7c3338796a6157c40/pytest-hoverfly-wrapper-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "81770156551142b6cb4661a5fa97a04e", "sha256": "bfe3c9d8090cbea372d16585eee5212a8d8efe63e341e17acca7eaf2107555d0"}, "downloads": -1, "filename": "pytest-hoverfly-wrapper-0.1.1.tar.gz", "has_sig": false, "md5_digest": "81770156551142b6cb4661a5fa97a04e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 11303, "upload_time": "2020-05-03T11:39:34", "upload_time_iso_8601": "2020-05-03T11:39:34.427412Z", "url": "https://files.pythonhosted.org/packages/c4/9e/404c8726889ef6a6203bd2771620f733d9c060f1ea2d5779027892ff3e1d/pytest-hoverfly-wrapper-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "bdc9f7d3cd085f78961ff8d7e626383f", "sha256": "0fe70ed7fdd1edb3c13bbb658985b2a6393233eaba8a463c357260c4fb8d8c13"}, "downloads": -1, "filename": "pytest-hoverfly-wrapper-0.1.2.tar.gz", "has_sig": false, "md5_digest": "bdc9f7d3cd085f78961ff8d7e626383f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 9386, "upload_time": "2020-05-03T17:08:54", "upload_time_iso_8601": "2020-05-03T17:08:54.632972Z", "url": "https://files.pythonhosted.org/packages/4b/fc/aa689fb2eec5fbf797ca69b8bd8d7aeacae29cd625b8772c7e87677b8aed/pytest-hoverfly-wrapper-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "90511d0e19d2b14ea6f3536e24ba23aa", "sha256": "224001ce77ae73a88045c091eea67bc29703155e27103a9b3f38082c64b0cab7"}, "downloads": -1, "filename": "pytest-hoverfly-wrapper-0.1.3.tar.gz", "has_sig": false, "md5_digest": "90511d0e19d2b14ea6f3536e24ba23aa", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 9570, "upload_time": "2020-05-03T18:52:35", "upload_time_iso_8601": "2020-05-03T18:52:35.712295Z", "url": "https://files.pythonhosted.org/packages/71/80/0e699413d11eca3de1006c554b47e2c408043453aeee57e50a96da9b5902/pytest-hoverfly-wrapper-0.1.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "90511d0e19d2b14ea6f3536e24ba23aa", "sha256": "224001ce77ae73a88045c091eea67bc29703155e27103a9b3f38082c64b0cab7"}, "downloads": -1, "filename": "pytest-hoverfly-wrapper-0.1.3.tar.gz", "has_sig": false, "md5_digest": "90511d0e19d2b14ea6f3536e24ba23aa", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 9570, "upload_time": "2020-05-03T18:52:35", "upload_time_iso_8601": "2020-05-03T18:52:35.712295Z", "url": "https://files.pythonhosted.org/packages/71/80/0e699413d11eca3de1006c554b47e2c408043453aeee57e50a96da9b5902/pytest-hoverfly-wrapper-0.1.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:55:05 2020"}