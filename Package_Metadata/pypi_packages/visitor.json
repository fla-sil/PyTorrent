{"info": {"author": "Marc Brinkmann", "author_email": "git@marcbrinkmann.de", "bugtrack_url": null, "classifiers": ["Programming Language :: Python :: 2", "Programming Language :: Python :: 3"], "description": "visitor\n=======\n\nA tiny library to facilitate `visitor\n<https://en.wikipedia.org/wiki/Visitor_pattern>`_ implementation in Python\n(which are slightly peculiar due to dynamic typing). In fact, it is so small,\nyou may just be better off copy & pasting the source straight into your\nproject...\n\n\nExample use\n-----------\n\nA simple JSON-encoder:\n\n.. code-block:: python\n\n    from visitor import Visitor\n\n\n    class JSONEncoder(Visitor):\n        def __init__(self):\n            self.indent = 0\n\n        def escape_str(self, s):\n            # note: this is not a good escape function, do not use this in\n            # production!\n            s = s.replace('\\\\', '\\\\\\\\')\n            s = s.replace('\"', '\\\\\"')\n            return '\"' + s + '\"'\n\n        def visit_list(self, node):\n            self.indent += 1\n            s = '[\\n' + '  ' * self.indent\n            s += (',\\n' + '  ' * self.indent).join(self.visit(item)\n                                                   for item in node)\n            self.indent -= 1\n            s += '\\n' + '  ' * self.indent + ']'\n            return s\n\n        def visit_str(self, node):\n            return self.escape_str(node)\n\n        def visit_int(self, node):\n            return str(node)\n\n        def visit_bool(self, node):\n            return 'true' if node else 'false'\n\n        def visit_dict(self, node):\n            self.indent += 1\n            s = '{\\n' + '  ' * self.indent\n            s += (',\\n' + '  ' * self.indent).join(\n                '{}: {}'.format(self.escape_str(key), self.visit(value))\n                for key, value in sorted(node.items())\n            )\n            self.indent -= 1\n            s += '\\n' + '  ' * self.indent + '}'\n            return s\n\n\n    data = [\n        'List', 'of', 42, 'items', True, {\n            'sub1': 'some string',\n            'sub2': {\n                'sub2sub1': False,\n                'sub2sub2': 123,\n            }\n        }\n    ]\n\n    print(JSONEncoder().visit(data))\n\n\n\nOutput::\n\n    [\n      \"List\",\n      \"of\",\n      42,\n      \"items\",\n      true,\n      {\n        \"sub1\": \"some string\",\n        \"sub2\": {\n          \"sub2sub1\": false,\n          \"sub2sub2\": 123\n        }\n      }\n    ]", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/mbr/visitor", "keywords": null, "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "visitor", "package_url": "https://pypi.org/project/visitor/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/visitor/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://github.com/mbr/visitor"}, "release_url": "https://pypi.org/project/visitor/0.1.3/", "requires_dist": null, "requires_python": null, "summary": "A tiny pythonic visitor implementation.", "version": "0.1.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>A tiny library to facilitate <a href=\"https://en.wikipedia.org/wiki/Visitor_pattern\" rel=\"nofollow\">visitor</a> implementation in Python\n(which are slightly peculiar due to dynamic typing). In fact, it is so small,\nyou may just be better off copy &amp; pasting the source straight into your\nproject\u2026</p>\n<div id=\"example-use\">\n<h2>Example use</h2>\n<p>A simple JSON-encoder:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">visitor</span> <span class=\"kn\">import</span> <span class=\"n\">Visitor</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">JSONEncoder</span><span class=\"p\">(</span><span class=\"n\">Visitor</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">indent</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">escape_str</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">s</span><span class=\"p\">):</span>\n        <span class=\"c1\"># note: this is not a good escape function, do not use this in</span>\n        <span class=\"c1\"># production!</span>\n        <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s1\">'</span><span class=\"se\">\\\\</span><span class=\"s1\">'</span><span class=\"p\">,</span> <span class=\"s1\">'</span><span class=\"se\">\\\\\\\\</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n        <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s1\">'\"'</span><span class=\"p\">,</span> <span class=\"s1\">'</span><span class=\"se\">\\\\</span><span class=\"s1\">\"'</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"s1\">'\"'</span> <span class=\"o\">+</span> <span class=\"n\">s</span> <span class=\"o\">+</span> <span class=\"s1\">'\"'</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">visit_list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">node</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">indent</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n        <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"s1\">'[</span><span class=\"se\">\\n</span><span class=\"s1\">'</span> <span class=\"o\">+</span> <span class=\"s1\">'  '</span> <span class=\"o\">*</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">indent</span>\n        <span class=\"n\">s</span> <span class=\"o\">+=</span> <span class=\"p\">(</span><span class=\"s1\">',</span><span class=\"se\">\\n</span><span class=\"s1\">'</span> <span class=\"o\">+</span> <span class=\"s1\">'  '</span> <span class=\"o\">*</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">indent</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">visit</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">)</span>\n                                               <span class=\"k\">for</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"n\">node</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">indent</span> <span class=\"o\">-=</span> <span class=\"mi\">1</span>\n        <span class=\"n\">s</span> <span class=\"o\">+=</span> <span class=\"s1\">'</span><span class=\"se\">\\n</span><span class=\"s1\">'</span> <span class=\"o\">+</span> <span class=\"s1\">'  '</span> <span class=\"o\">*</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">indent</span> <span class=\"o\">+</span> <span class=\"s1\">']'</span>\n        <span class=\"k\">return</span> <span class=\"n\">s</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">visit_str</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">node</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">escape_str</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">visit_int</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">node</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">visit_bool</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">node</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"s1\">'true'</span> <span class=\"k\">if</span> <span class=\"n\">node</span> <span class=\"k\">else</span> <span class=\"s1\">'false'</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">visit_dict</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">node</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">indent</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n        <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"s1\">'{</span><span class=\"se\">\\n</span><span class=\"s1\">'</span> <span class=\"o\">+</span> <span class=\"s1\">'  '</span> <span class=\"o\">*</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">indent</span>\n        <span class=\"n\">s</span> <span class=\"o\">+=</span> <span class=\"p\">(</span><span class=\"s1\">',</span><span class=\"se\">\\n</span><span class=\"s1\">'</span> <span class=\"o\">+</span> <span class=\"s1\">'  '</span> <span class=\"o\">*</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">indent</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span>\n            <span class=\"s1\">'</span><span class=\"si\">{}</span><span class=\"s1\">: </span><span class=\"si\">{}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">escape_str</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">),</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">visit</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">))</span>\n            <span class=\"k\">for</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">value</span> <span class=\"ow\">in</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">())</span>\n        <span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">indent</span> <span class=\"o\">-=</span> <span class=\"mi\">1</span>\n        <span class=\"n\">s</span> <span class=\"o\">+=</span> <span class=\"s1\">'</span><span class=\"se\">\\n</span><span class=\"s1\">'</span> <span class=\"o\">+</span> <span class=\"s1\">'  '</span> <span class=\"o\">*</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">indent</span> <span class=\"o\">+</span> <span class=\"s1\">'}'</span>\n        <span class=\"k\">return</span> <span class=\"n\">s</span>\n\n\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"s1\">'List'</span><span class=\"p\">,</span> <span class=\"s1\">'of'</span><span class=\"p\">,</span> <span class=\"mi\">42</span><span class=\"p\">,</span> <span class=\"s1\">'items'</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'sub1'</span><span class=\"p\">:</span> <span class=\"s1\">'some string'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'sub2'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"s1\">'sub2sub1'</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n            <span class=\"s1\">'sub2sub2'</span><span class=\"p\">:</span> <span class=\"mi\">123</span><span class=\"p\">,</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">]</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">JSONEncoder</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">visit</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">))</span>\n</pre>\n<p>Output:</p>\n<pre>[\n  \"List\",\n  \"of\",\n  42,\n  \"items\",\n  true,\n  {\n    \"sub1\": \"some string\",\n    \"sub2\": {\n      \"sub2sub1\": false,\n      \"sub2sub2\": 123\n    }\n  }\n]\n</pre>\n</div>\n\n          </div>"}, "last_serial": 2122337, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "f70b47d75ceeb0a983d433a6d92de517", "sha256": "ad60c5bcc8ed62c1cef08d8d211a3e94accbb3adb2d0fbf87c67557d91fc0282"}, "downloads": -1, "filename": "visitor-0.1.tar.gz", "has_sig": true, "md5_digest": "f70b47d75ceeb0a983d433a6d92de517", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3097, "upload_time": "2015-07-02T15:32:22", "upload_time_iso_8601": "2015-07-02T15:32:22.401845Z", "url": "https://files.pythonhosted.org/packages/cf/0d/3fe1d840a856497a07942b1ac224df60b440cf9cd7b6ecaedf03b0cddb5d/visitor-0.1.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "f3fab0ffc63a29470d80b0511626b456", "sha256": "8cc3a246b8e35cee727b91c191fdfcbf669743b2025fe8283006e4cf925627a9"}, "downloads": -1, "filename": "visitor-0.1.1.tar.gz", "has_sig": true, "md5_digest": "f3fab0ffc63a29470d80b0511626b456", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3096, "upload_time": "2015-07-26T10:05:57", "upload_time_iso_8601": "2015-07-26T10:05:57.254186Z", "url": "https://files.pythonhosted.org/packages/79/ea/b4840de2dfc09949679460f74c51f268bd294535e3560d8de6f32a3e5aaf/visitor-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "e9471b44e5d426b0adf5d27694598be0", "sha256": "d9444ffca56a46a920719460d4952f8c88f8fef97f1ea7d2b1f7c50f675022bd"}, "downloads": -1, "filename": "visitor-0.1.2.tar.gz", "has_sig": true, "md5_digest": "e9471b44e5d426b0adf5d27694598be0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3226, "upload_time": "2015-07-26T11:09:52", "upload_time_iso_8601": "2015-07-26T11:09:52.833495Z", "url": "https://files.pythonhosted.org/packages/6c/40/2f823fdd931e2932c618b678e0ef4340f61a49b8facb7af46873fd97dd47/visitor-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "94a024ed0ec1b02b4497c15267d319ca", "sha256": "2c737903b2b6864ebc6167eef7cf3b997126f1aa94bdf590f90f1436d23e480a"}, "downloads": -1, "filename": "visitor-0.1.3.tar.gz", "has_sig": true, "md5_digest": "94a024ed0ec1b02b4497c15267d319ca", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3260, "upload_time": "2016-05-18T19:27:53", "upload_time_iso_8601": "2016-05-18T19:27:53.383175Z", "url": "https://files.pythonhosted.org/packages/d7/58/785fcd6de4210049da5fafe62301b197f044f3835393594be368547142b0/visitor-0.1.3.tar.gz", "yanked": false}], "0.1.dev1": []}, "urls": [{"comment_text": "", "digests": {"md5": "94a024ed0ec1b02b4497c15267d319ca", "sha256": "2c737903b2b6864ebc6167eef7cf3b997126f1aa94bdf590f90f1436d23e480a"}, "downloads": -1, "filename": "visitor-0.1.3.tar.gz", "has_sig": true, "md5_digest": "94a024ed0ec1b02b4497c15267d319ca", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3260, "upload_time": "2016-05-18T19:27:53", "upload_time_iso_8601": "2016-05-18T19:27:53.383175Z", "url": "https://files.pythonhosted.org/packages/d7/58/785fcd6de4210049da5fafe62301b197f044f3835393594be368547142b0/visitor-0.1.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:35:15 2020"}