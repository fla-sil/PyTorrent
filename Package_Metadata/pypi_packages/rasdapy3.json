{"info": {"author": "Bang Pham Huu", "author_email": "b.phamhuu@jacobs-university.de", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: GNU Library or Lesser General Public License (LGPL)", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Software Development :: Libraries"], "description": "rasdapy - Talk rasql using Python\n=================================\n\n**rasdapy is a client API for rasdaman that enables building and executing rasql\nqueries within python.**\n\nRequirements\n------------\n\n-  numpy, grpcio, protobuf\n-  a running rasdaman instance, see http://rasdaman.org/wiki/Download\n\nInstallation\n------------\n\n1) Make sure you have installed ``pip3`` (e.g. ``sudo apt install python-pip3``)\n\n2) Install rasdapy3 with ``pip3 install rasdapy3``\n\n2) Note that if you do not have setuptools, numpy, grpcio, and protobuf installed,\n   they will be downloaded as dependencies.\n\nUsage\n-----\n\nA `full client <http://rasdaman.org/browser/applications/rasdapy3/rasql.py>`__\nwith a similar interface as the C++ rasql client is available that demonstrates\nhow to use rasdapy to send queries to rasdaman and handle the results. Below the\nmost important details for using rasdapy are listed.\n\n\nImport rasdapy core API\n-----------------------\n\n::\n\n  >>> from rasdapy.db_connector import DBConnector\n  >>> from rasdapy.query_executor import QueryExecutor\n\nConnect to rasdaman\n-------------------\n\nThe ``DBConnector`` maintains the connection to rasdaman. In order to connect it\nis necessary to specify the host and port on which rasmgr is running, as well as\nvalid rasdaman username and password.\n\n::\n\n  >>> db_connector = DBConnector(\"localhost\", 7001, \"rasadmin\", \"rasadmin\")\n\nCreate the query executor\n-------------------------\n\n``QueryExcutor`` is the interface through which rasql queries (create, insert,\nupdate, delete, etc.) are executed.\n\n::\n\n  >>> query_executor = QueryExecutor(db_connector)\n\nOpen the connection to rasdaman\n-------------------------------\n\n::\n\n  >>> db_connector.open()\n\nExecute sample queries\n----------------------\n\nThe query below returns a list of all the collections available in rasdaman.\n\n::\n\n  >>> colls = query_executor.execute_read(\"select c from RAS_COLLECTIONNAMES as c\")\n  >>> print(colls)\n\nCalculate the average of all values in collection mr2.\n\n::\n\n  >>> result = query_executor.execute_read(\"select avg_cells(c) from mr2 as c\")\n  >>> type(result)\n\nDepending on the query the result will have a different type (e.g. scalar value,\ninterval, array). Each data type is wrapped in a `corresponding class\n<http://rasdaman.org/browser/applications/rasdapy3/rasdapy/models>`__.\n\n\nSelect a particular subset of each array in collection mr2. This query will\nreturn raw array data that can be converted to a Numpy ndarray.\n\n::\n\n  >>> result = query_executor.execute_read(\"select m[0:10 ,0:10] from mr2 as m\")\n  >>> numpy_array = result.to_array()\n\nEncode array subset to PNG format and write the result to a file.\n\n::\n\n  >>> result = query_executor.execute_read(\"select encode(m[0:10 ,0:10], \\\"png\\\") from mr2 as m\")\n  >>> with open(\"/tmp/output.png\", \"wb\") as binary_file:\n  >>>   binary_file.write(result.data)\n\nCreate a rasdaman collection. Note that you should be connected with a user that\nhas write permission; by default this is rasadmin/rasadmin in rasdaman, but this\ncan be managed by the administrator.\n\n::\n\n  >>> query_executor.execute_write(\"create collection test_rasdapy GreySet\")\n\nInsert data from a PNG image into the collection. Similarly you need to have\nwrite permissions for this operation.\n\n::\n\n  >>> query_executor.execute_write(\"insert into test_rasdapy values decode($1)\", \"mr_1.png\")\n\nAlternatively, you can import data from a raw binary file; in this case it is\nnecessary to specify the spatial domain and array type.\n\n::\n\n  >>> query_executor.execute_update_from_file(\"insert into test_rasdapy values $1\",\n                                              \"raw_array.bin\", \"[0:100]\", \"GreyString\")\n\nFurther example queries and a general guide for rasql can be found in the \n`rasdaman documentation <http://doc.rasdaman.org/>`__.\n\nClose the connection to rasdaman\n--------------------------------\n\n::\n\n  >>> db_connector.close()\n\nBest practices:\n---------------\n\nIt is recommended to follow this template in order to avoid problems\nwith leaked transactions:\n\n::\n\n    from rasdapy.db_connector import DBConnector\n    from rasdapy.query_executor import QueryExecutor\n\n    db_connector = DBConnector(\"localhost\", 7001, \"rasadmin\", \"rasadmin\")\n    query_executor = QueryExecutor(db_connector)\n\n    db_connector.open()\n\n    try:\n        query_executor.execute_read(\"...\")\n        query_executor.execute_write(\"...\")\n        # ... more Python code\n    finally:\n        db_connector.close()\n\n\nContributors\n------------\n\n-  Bang Pham Huu\n-  Siddharth Shukla\n-  Dimitar Misev\n-  Jean-Fran\u00e7ois Lecomte\n-  Dragi Kamov\n\nThanks also to\n--------------\n\n-  Alex Mircea Dumitru\n-  Vlad Merticariu\n-  George Merticariu\n-  Alex Toader\n-  Peter Baumann\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://rasdaman.org/browser/applications/rasdapy3", "keywords": "rasdaman interface python", "license": "LGPL", "maintainer": "", "maintainer_email": "", "name": "rasdapy3", "package_url": "https://pypi.org/project/rasdapy3/", "platform": "", "project_url": "https://pypi.org/project/rasdapy3/", "project_urls": {"Homepage": "https://rasdaman.org/browser/applications/rasdapy3"}, "release_url": "https://pypi.org/project/rasdapy3/1.0.3/", "requires_dist": ["numpy (>=1.7.1)", "grpcio (>=1.0.0)", "protobuf (>=3.0.0)", "check-manifest; extra == 'dev'", "coverage; extra == 'test'"], "requires_python": "", "summary": "Python3 interface to rasdaman", "version": "1.0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><strong>rasdapy is a client API for rasdaman that enables building and executing rasql\nqueries within python.</strong></p>\n<div id=\"requirements\">\n<h2>Requirements</h2>\n<ul>\n<li>numpy, grpcio, protobuf</li>\n<li>a running rasdaman instance, see <a href=\"http://rasdaman.org/wiki/Download\" rel=\"nofollow\">http://rasdaman.org/wiki/Download</a></li>\n</ul>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<ol>\n<li>Make sure you have installed <tt>pip3</tt> (e.g. <tt>sudo apt install <span class=\"pre\">python-pip3</span></tt>)</li>\n<li>Install rasdapy3 with <tt>pip3 install rasdapy3</tt></li>\n</ol>\n<ol>\n<li>Note that if you do not have setuptools, numpy, grpcio, and protobuf installed,\nthey will be downloaded as dependencies.</li>\n</ol>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>A <a href=\"http://rasdaman.org/browser/applications/rasdapy3/rasql.py\" rel=\"nofollow\">full client</a>\nwith a similar interface as the C++ rasql client is available that demonstrates\nhow to use rasdapy to send queries to rasdaman and handle the results. Below the\nmost important details for using rasdapy are listed.</p>\n</div>\n<div id=\"import-rasdapy-core-api\">\n<h2>Import rasdapy core API</h2>\n<pre>&gt;&gt;&gt; from rasdapy.db_connector import DBConnector\n&gt;&gt;&gt; from rasdapy.query_executor import QueryExecutor\n</pre>\n</div>\n<div id=\"connect-to-rasdaman\">\n<h2>Connect to rasdaman</h2>\n<p>The <tt>DBConnector</tt> maintains the connection to rasdaman. In order to connect it\nis necessary to specify the host and port on which rasmgr is running, as well as\nvalid rasdaman username and password.</p>\n<pre>&gt;&gt;&gt; db_connector = DBConnector(\"localhost\", 7001, \"rasadmin\", \"rasadmin\")\n</pre>\n</div>\n<div id=\"create-the-query-executor\">\n<h2>Create the query executor</h2>\n<p><tt>QueryExcutor</tt> is the interface through which rasql queries (create, insert,\nupdate, delete, etc.) are executed.</p>\n<pre>&gt;&gt;&gt; query_executor = QueryExecutor(db_connector)\n</pre>\n</div>\n<div id=\"open-the-connection-to-rasdaman\">\n<h2>Open the connection to rasdaman</h2>\n<pre>&gt;&gt;&gt; db_connector.open()\n</pre>\n</div>\n<div id=\"execute-sample-queries\">\n<h2>Execute sample queries</h2>\n<p>The query below returns a list of all the collections available in rasdaman.</p>\n<pre>&gt;&gt;&gt; colls = query_executor.execute_read(\"select c from RAS_COLLECTIONNAMES as c\")\n&gt;&gt;&gt; print(colls)\n</pre>\n<p>Calculate the average of all values in collection mr2.</p>\n<pre>&gt;&gt;&gt; result = query_executor.execute_read(\"select avg_cells(c) from mr2 as c\")\n&gt;&gt;&gt; type(result)\n</pre>\n<p>Depending on the query the result will have a different type (e.g. scalar value,\ninterval, array). Each data type is wrapped in a <a href=\"http://rasdaman.org/browser/applications/rasdapy3/rasdapy/models\" rel=\"nofollow\">corresponding class</a>.</p>\n<p>Select a particular subset of each array in collection mr2. This query will\nreturn raw array data that can be converted to a Numpy ndarray.</p>\n<pre>&gt;&gt;&gt; result = query_executor.execute_read(\"select m[0:10 ,0:10] from mr2 as m\")\n&gt;&gt;&gt; numpy_array = result.to_array()\n</pre>\n<p>Encode array subset to PNG format and write the result to a file.</p>\n<pre>&gt;&gt;&gt; result = query_executor.execute_read(\"select encode(m[0:10 ,0:10], \\\"png\\\") from mr2 as m\")\n&gt;&gt;&gt; with open(\"/tmp/output.png\", \"wb\") as binary_file:\n&gt;&gt;&gt;   binary_file.write(result.data)\n</pre>\n<p>Create a rasdaman collection. Note that you should be connected with a user that\nhas write permission; by default this is rasadmin/rasadmin in rasdaman, but this\ncan be managed by the administrator.</p>\n<pre>&gt;&gt;&gt; query_executor.execute_write(\"create collection test_rasdapy GreySet\")\n</pre>\n<p>Insert data from a PNG image into the collection. Similarly you need to have\nwrite permissions for this operation.</p>\n<pre>&gt;&gt;&gt; query_executor.execute_write(\"insert into test_rasdapy values decode($1)\", \"mr_1.png\")\n</pre>\n<p>Alternatively, you can import data from a raw binary file; in this case it is\nnecessary to specify the spatial domain and array type.</p>\n<pre>&gt;&gt;&gt; query_executor.execute_update_from_file(\"insert into test_rasdapy values $1\",\n                                            \"raw_array.bin\", \"[0:100]\", \"GreyString\")\n</pre>\n<p>Further example queries and a general guide for rasql can be found in the\n<a href=\"http://doc.rasdaman.org/\" rel=\"nofollow\">rasdaman documentation</a>.</p>\n</div>\n<div id=\"close-the-connection-to-rasdaman\">\n<h2>Close the connection to rasdaman</h2>\n<pre>&gt;&gt;&gt; db_connector.close()\n</pre>\n</div>\n<div id=\"best-practices\">\n<h2>Best practices:</h2>\n<p>It is recommended to follow this template in order to avoid problems\nwith leaked transactions:</p>\n<pre>from rasdapy.db_connector import DBConnector\nfrom rasdapy.query_executor import QueryExecutor\n\ndb_connector = DBConnector(\"localhost\", 7001, \"rasadmin\", \"rasadmin\")\nquery_executor = QueryExecutor(db_connector)\n\ndb_connector.open()\n\ntry:\n    query_executor.execute_read(\"...\")\n    query_executor.execute_write(\"...\")\n    # ... more Python code\nfinally:\n    db_connector.close()\n</pre>\n</div>\n<div id=\"contributors\">\n<h2>Contributors</h2>\n<ul>\n<li>Bang Pham Huu</li>\n<li>Siddharth Shukla</li>\n<li>Dimitar Misev</li>\n<li>Jean-Fran\u00e7ois Lecomte</li>\n<li>Dragi Kamov</li>\n</ul>\n</div>\n<div id=\"thanks-also-to\">\n<h2>Thanks also to</h2>\n<ul>\n<li>Alex Mircea Dumitru</li>\n<li>Vlad Merticariu</li>\n<li>George Merticariu</li>\n<li>Alex Toader</li>\n<li>Peter Baumann</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 7170224, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "4ceea968a361ed7f16b8a1ac1bbb95dc", "sha256": "7d6b443e852a013cf3cad233063e2cddcec20775edd74ef46ede200011367ea2"}, "downloads": -1, "filename": "rasdapy3-1.0.0.tar.gz", "has_sig": false, "md5_digest": "4ceea968a361ed7f16b8a1ac1bbb95dc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 49738, "upload_time": "2020-02-26T13:40:36", "upload_time_iso_8601": "2020-02-26T13:40:36.758998Z", "url": "https://files.pythonhosted.org/packages/00/c0/4a358edf7fe14f2c8d98792eafa12668a7a1a72cdede6663220a8ff8cc73/rasdapy3-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "7e8473ca75fae9635c85b5fadf05fbd1", "sha256": "c313637a0f9bfd518d3f005fa7233122646f890671161dd817129135509997d3"}, "downloads": -1, "filename": "rasdapy3-1.0.1.tar.gz", "has_sig": false, "md5_digest": "7e8473ca75fae9635c85b5fadf05fbd1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 49735, "upload_time": "2020-02-26T13:50:06", "upload_time_iso_8601": "2020-02-26T13:50:06.511029Z", "url": "https://files.pythonhosted.org/packages/f7/e6/0b9f715bcbe28facc59e06450ec87065133ae37dbe3a18f2bce16189a6ea/rasdapy3-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "0901c32e7bb80bd57744b1f4d6046c4a", "sha256": "cbb675e43bcea49b4bdf866c2ed7941250b3541d1aafa67bed1eb38a8c25f37d"}, "downloads": -1, "filename": "rasdapy3-1.0.2.tar.gz", "has_sig": false, "md5_digest": "0901c32e7bb80bd57744b1f4d6046c4a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 49683, "upload_time": "2020-02-26T15:40:33", "upload_time_iso_8601": "2020-02-26T15:40:33.512493Z", "url": "https://files.pythonhosted.org/packages/f2/93/40946e634efb139b654e9397e8253abfe83b4d8a9542d45926d3cb1d77c9/rasdapy3-1.0.2.tar.gz", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "5e0defbcce4c2d78453b9d4246fd8634", "sha256": "396a32baf0f691a4f4e5f247158b9a460fdda2fb4dcc36d70f04acdd06639e99"}, "downloads": -1, "filename": "rasdapy3-1.0.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "5e0defbcce4c2d78453b9d4246fd8634", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 71559, "upload_time": "2020-05-05T08:16:56", "upload_time_iso_8601": "2020-05-05T08:16:56.998541Z", "url": "https://files.pythonhosted.org/packages/c6/df/78d9eef5ce8299f668b75225478b71e868076ad725e6d5584a9664cd2221/rasdapy3-1.0.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "74ef53ff4091372deda94e2c5a9112c2", "sha256": "ccb7efe318c92b328a048bafc2a31ee57fbf28c7c95afde0b43f3b66e340c7fe"}, "downloads": -1, "filename": "rasdapy3-1.0.3.tar.gz", "has_sig": false, "md5_digest": "74ef53ff4091372deda94e2c5a9112c2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 53099, "upload_time": "2020-05-05T08:16:59", "upload_time_iso_8601": "2020-05-05T08:16:59.938630Z", "url": "https://files.pythonhosted.org/packages/92/c9/9c9bfb29055f9c8898e780620a5cd2d962baff07dc0ce1d2b7980117b631/rasdapy3-1.0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "5e0defbcce4c2d78453b9d4246fd8634", "sha256": "396a32baf0f691a4f4e5f247158b9a460fdda2fb4dcc36d70f04acdd06639e99"}, "downloads": -1, "filename": "rasdapy3-1.0.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "5e0defbcce4c2d78453b9d4246fd8634", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 71559, "upload_time": "2020-05-05T08:16:56", "upload_time_iso_8601": "2020-05-05T08:16:56.998541Z", "url": "https://files.pythonhosted.org/packages/c6/df/78d9eef5ce8299f668b75225478b71e868076ad725e6d5584a9664cd2221/rasdapy3-1.0.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "74ef53ff4091372deda94e2c5a9112c2", "sha256": "ccb7efe318c92b328a048bafc2a31ee57fbf28c7c95afde0b43f3b66e340c7fe"}, "downloads": -1, "filename": "rasdapy3-1.0.3.tar.gz", "has_sig": false, "md5_digest": "74ef53ff4091372deda94e2c5a9112c2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 53099, "upload_time": "2020-05-05T08:16:59", "upload_time_iso_8601": "2020-05-05T08:16:59.938630Z", "url": "https://files.pythonhosted.org/packages/92/c9/9c9bfb29055f9c8898e780620a5cd2d962baff07dc0ce1d2b7980117b631/rasdapy3-1.0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:07:14 2020"}