{"info": {"author": "Thomas Hill", "author_email": "tomlikestorock@gmail.com", "bugtrack_url": null, "classifiers": ["Framework :: Pylons", "Intended Audience :: Developers", "License :: Repoze Public License", "Programming Language :: Python", "Topic :: Internet :: WWW/HTTP", "Topic :: Internet :: WWW/HTTP :: WSGI"], "description": "pyramid_openid provides a view for the Pyramid framework that acts as an OpenID consumer.\n        \n        This code is offered under the BSD-derived Repoze Public License.\n        \n        Much of this code was inspired by (read: 'lifted from') the repoze.who.plugins.openid\n        code which can be found here:\n        http://quantumcore.org/docs/repoze.who.plugins.openid\n        \n        In your Pyramid app, add the pyramid_openid.verify_openid view_callable to your\n        view_configuration, and add the needed settings to your .ini file.\n        \n        Here is a barebones setup:\n        openid.store.type = file\n        openid.store.file.path = %(here)s/sstore\n        openid.success_callback = myapp.lib:remember_me\n        \n        This setup requires you have a folder in your app directory called 'sstore',\n        and that you have a callback function in your lib module named \"remember_me\".\n        Remember_me will receive the current request and the other information returned\n        from the OpenID provider, and should then do whatever is needed to remember the user -\n        pyramid.security.remember, load metadata into the session, etc - that part is \n        completely up to the coder.\n        \n        This setup will then assume the defaults for the rest of the keys.\n        \n        Once the configuration is in place, it's time to hook up the view to the application.\n        You can do this however you want to.\n        \n        Example:\n        In your app config setup code, add this line before 'return config.make_wsgi_app()'\n        \n        config.add_route('verify_openid', \n        \tpattern='/dologin.html',\n        \tview='pyramid_openid.verify_openid')\n        \n        Now you have a URL to submit your OpenID form to: /dologin.html.\n        Based on the configuration above, it expects to find the user's OpenID URL\n        in request.params['openid'].\n        \n        \n        REQUIRED SETTINGS\n        =================\n        OpenID Data Store\n        -----------------\n        Key:\n        openid.store.type\n        \n        Description:\n        This determines the type of store python-openid will use\n        to track nonces and other cross request data. Note that\n        this defaults to None, which has python-openid use a\n        stateless request type. Stateless mode isn't reliable;\n        something else should be chosen. File and mem are\n        recommended.\n        \n        The SQL store has yet to be tested or even verified\n        working. It is also not recommended.\n        \n        Default:\n        None\n        \n        Examples:\n        To use a file store:\n        (openid.store.file.path must also be specified)\n        openid.store.type = file\n        \n        To use a memory store:\n        openid.store.type = mem\n        \n        To use a sql store:\n        (openid.store.sql.connection_string and\n        openid.store.sql.associations_table must also\n        be specified)\n        THIS IS NOT TESTED AND DOES NOT WORK\n        openid.store.type = sql\n        \n        \n        OPTIONAL SETTINGS:\n        ==================\n        Successful Login Callback\n        -------------------------\n        Key:\n        openid.success_callback\n        \n        Description:\n        This is a callable that will be called upon successful verification\n        by the OpenID provider. The callable will be passed three parameters;\n        the current context, the current request, and a dictionary with the \n        following structure:\n        {\n        \t'identity_url': The user's unique URL from the provider,\n        \t'ax':\t\tA dictionary containing all the returned\n        \t\t\tactive exchange parameters requested,\n        \t'sreg':\t\tA list containing all the returned\n        \t\t\tsimple registration parameters requested\n        }\n        \n        This callback is required to have the following format:\n        module.optional_submodules:function\n        \n        What is returned from this callable is return as the response.\n        \n        Default:\n        None\n        \n        Example:\n        If the callback is in the lib module of the my app package, and\n        is named openid_callback, then this is the setting to be used:\n        openid.success_callback = myapp.lib:openid_callback\n        \n        AX\n        --\n        Keys:\n        openid.ax_required\n        openid.ax_optional\n        \n        Description:\n        These represent user data requested via OpenID Attribute Exchange.\n        \n        Default:\n        None\n        \n        Example:\n        To require that the provider respond with the user's email:\n        openid.ax_required = email=http://schema.openid.net/contact/email\n        \n        SX\n        --\n        Keys:\n        openid.sreg_required\n        openid.sreg_optional\n        \n        Description:\n        These represent user data requested via OpenID Simple Registration.\n        \n        Default:\n        None\n        \n        Example:\n        To require that the provider respond with the user's email:\n        openid.sreg_required = email\n        \n        Incoming OpenID Param Name:\n        ---------------------------\n        Key:\n        openid.param_field_name\n        \n        Description:\n        When a request is first submitted with the user's OpenID URL,\n        it must be retrieved from request.params with a key.\n        This is the name of that key in request.params.\n        \n        Default:\n        openid\n        \n        Examples:\n        Once submitted, the user's OpenID URL will be found in\n        request.params['users_openid_url']:\n        openid.param_field_name = users_openid_url\n        \n        Error Destination\n        -----------------\n        Key:\n        openid.error_destination\n        \n        Description:\n        When something in the OpenID verification process fails,\n        the user will be sent to this url. The error message\n        will be stored in the request.session.flash queue\n        as specified by openid.error_flash_queue\n        \n        Default:\n        request.referrer\n        \n        Example:\n        To send the user to a http://www.example.com/sorry.html upon failure:\n        openid.error_destination = http://www.example.com/sorry.html\n        \n        Error Flash Queue\n        -----------------\n        Key:\n        openid.error_flash_queue\n        \n        Description:\n        If something goes awry in the OpenID process, the error message\n        will be put in the request.session.flash message queue, and this\n        is the name of that queue.\n        \n        Default:\n        The default flash queue ('')\n        \n        Example:\n        To put the error messages in the 'OpenIDErrors' flash queue:\n        openid.error_flash_queue=OpenIDErrors\n        \n        Realm Name\n        ----------\n        Key:\n        openid.realm_name\n        \n        Description:\n        This is the value of the realm parameter passed to the OpenID\n        provider. It's here for the sake of completeness, but unless\n        you know what you're doing there's no reason to change it.\n        \n        Default:\n        request.host_url\n        \n        Example:\n        To set the Realm to 'www.example.com':\n        openid.realm_name = http://www.example.com\n        \n        Note:\n        Changing the realm_name will most likely cause your request\n        to fail.\n        \n        \n        CONDITIONAL SETTINGS\n        ====================\n        File Store Path\n        ---------------\n        Key:\n        openid.store.file.path\n        \n        Description:\n        If the file store path is to be used, then it needs\n        a writable folder to store data into. This is that path.\n        \n        Default:\n        No default\n        \n        Example:\n        To store data in the folder named \"sstore\" in the same\n        folder as your development.ini:\n        (Note that you must make this directory as well)\n        openid.store.file.path = %(here)s/sstore\n        \n        SQL Connection String\n        ---------------------\n        Key:\n        openid.store.sql.connection_string\n        \n        Description:\n        This is the connection string for the database for\n        python-openid to store its temporary data in.\n        THIS HAS NOT BEEN TESTED AND DOES NOT WORK YET.\n        \n        Default:\n        No default\n        \n        SQL Associations Table\n        ----------------------\n        Key:\n        openid.store.sql.associations_table\n        \n        Description:\n        This is the name of the table that python-openid\n        will store is temporary data in.\n        THIS HAS NOT BEEN TESTED AND DOES NOT WORK YET.\n        \n        Default:\n        No default", "description_content_type": null, "docs_url": null, "download_url": null, "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/tomlikestorock/pyramid_openid", "keywords": "pyramid openid", "license": "BSD-derived (http://www.repoze.org/LICENSE.txt)", "maintainer": null, "maintainer_email": null, "name": "pyramid-openid", "package_url": "https://pypi.org/project/pyramid-openid/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/pyramid-openid/", "project_urls": {"Homepage": "http://github.com/tomlikestorock/pyramid_openid"}, "release_url": "https://pypi.org/project/pyramid-openid/0.3.4/", "requires_dist": null, "requires_python": null, "summary": "A view for pyramid that functions as an OpenID consumer.", "version": "0.3.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            pyramid_openid provides a view for the Pyramid framework that acts as an OpenID consumer.<br>        <br>        This code is offered under the BSD-derived Repoze Public License.<br>        <br>        Much of this code was inspired by (read: 'lifted from') the repoze.who.plugins.openid<br>        code which can be found here:<br>        http://quantumcore.org/docs/repoze.who.plugins.openid<br>        <br>        In your Pyramid app, add the pyramid_openid.verify_openid view_callable to your<br>        view_configuration, and add the needed settings to your .ini file.<br>        <br>        Here is a barebones setup:<br>        openid.store.type = file<br>        openid.store.file.path = %(here)s/sstore<br>        openid.success_callback = myapp.lib:remember_me<br>        <br>        This setup requires you have a folder in your app directory called 'sstore',<br>        and that you have a callback function in your lib module named \"remember_me\".<br>        Remember_me will receive the current request and the other information returned<br>        from the OpenID provider, and should then do whatever is needed to remember the user -<br>        pyramid.security.remember, load metadata into the session, etc - that part is <br>        completely up to the coder.<br>        <br>        This setup will then assume the defaults for the rest of the keys.<br>        <br>        Once the configuration is in place, it's time to hook up the view to the application.<br>        You can do this however you want to.<br>        <br>        Example:<br>        In your app config setup code, add this line before 'return config.make_wsgi_app()'<br>        <br>        config.add_route('verify_openid', <br>        \tpattern='/dologin.html',<br>        \tview='pyramid_openid.verify_openid')<br>        <br>        Now you have a URL to submit your OpenID form to: /dologin.html.<br>        Based on the configuration above, it expects to find the user's OpenID URL<br>        in request.params['openid'].<br>        <br>        <br>        REQUIRED SETTINGS<br>        =================<br>        OpenID Data Store<br>        -----------------<br>        Key:<br>        openid.store.type<br>        <br>        Description:<br>        This determines the type of store python-openid will use<br>        to track nonces and other cross request data. Note that<br>        this defaults to None, which has python-openid use a<br>        stateless request type. Stateless mode isn't reliable;<br>        something else should be chosen. File and mem are<br>        recommended.<br>        <br>        The SQL store has yet to be tested or even verified<br>        working. It is also not recommended.<br>        <br>        Default:<br>        None<br>        <br>        Examples:<br>        To use a file store:<br>        (openid.store.file.path must also be specified)<br>        openid.store.type = file<br>        <br>        To use a memory store:<br>        openid.store.type = mem<br>        <br>        To use a sql store:<br>        (openid.store.sql.connection_string and<br>        openid.store.sql.associations_table must also<br>        be specified)<br>        THIS IS NOT TESTED AND DOES NOT WORK<br>        openid.store.type = sql<br>        <br>        <br>        OPTIONAL SETTINGS:<br>        ==================<br>        Successful Login Callback<br>        -------------------------<br>        Key:<br>        openid.success_callback<br>        <br>        Description:<br>        This is a callable that will be called upon successful verification<br>        by the OpenID provider. The callable will be passed three parameters;<br>        the current context, the current request, and a dictionary with the <br>        following structure:<br>        {<br>        \t'identity_url': The user's unique URL from the provider,<br>        \t'ax':\t\tA dictionary containing all the returned<br>        \t\t\tactive exchange parameters requested,<br>        \t'sreg':\t\tA list containing all the returned<br>        \t\t\tsimple registration parameters requested<br>        }<br>        <br>        This callback is required to have the following format:<br>        module.optional_submodules:function<br>        <br>        What is returned from this callable is return as the response.<br>        <br>        Default:<br>        None<br>        <br>        Example:<br>        If the callback is in the lib module of the my app package, and<br>        is named openid_callback, then this is the setting to be used:<br>        openid.success_callback = myapp.lib:openid_callback<br>        <br>        AX<br>        --<br>        Keys:<br>        openid.ax_required<br>        openid.ax_optional<br>        <br>        Description:<br>        These represent user data requested via OpenID Attribute Exchange.<br>        <br>        Default:<br>        None<br>        <br>        Example:<br>        To require that the provider respond with the user's email:<br>        openid.ax_required = email=http://schema.openid.net/contact/email<br>        <br>        SX<br>        --<br>        Keys:<br>        openid.sreg_required<br>        openid.sreg_optional<br>        <br>        Description:<br>        These represent user data requested via OpenID Simple Registration.<br>        <br>        Default:<br>        None<br>        <br>        Example:<br>        To require that the provider respond with the user's email:<br>        openid.sreg_required = email<br>        <br>        Incoming OpenID Param Name:<br>        ---------------------------<br>        Key:<br>        openid.param_field_name<br>        <br>        Description:<br>        When a request is first submitted with the user's OpenID URL,<br>        it must be retrieved from request.params with a key.<br>        This is the name of that key in request.params.<br>        <br>        Default:<br>        openid<br>        <br>        Examples:<br>        Once submitted, the user's OpenID URL will be found in<br>        request.params['users_openid_url']:<br>        openid.param_field_name = users_openid_url<br>        <br>        Error Destination<br>        -----------------<br>        Key:<br>        openid.error_destination<br>        <br>        Description:<br>        When something in the OpenID verification process fails,<br>        the user will be sent to this url. The error message<br>        will be stored in the request.session.flash queue<br>        as specified by openid.error_flash_queue<br>        <br>        Default:<br>        request.referrer<br>        <br>        Example:<br>        To send the user to a http://www.example.com/sorry.html upon failure:<br>        openid.error_destination = http://www.example.com/sorry.html<br>        <br>        Error Flash Queue<br>        -----------------<br>        Key:<br>        openid.error_flash_queue<br>        <br>        Description:<br>        If something goes awry in the OpenID process, the error message<br>        will be put in the request.session.flash message queue, and this<br>        is the name of that queue.<br>        <br>        Default:<br>        The default flash queue ('')<br>        <br>        Example:<br>        To put the error messages in the 'OpenIDErrors' flash queue:<br>        openid.error_flash_queue=OpenIDErrors<br>        <br>        Realm Name<br>        ----------<br>        Key:<br>        openid.realm_name<br>        <br>        Description:<br>        This is the value of the realm parameter passed to the OpenID<br>        provider. It's here for the sake of completeness, but unless<br>        you know what you're doing there's no reason to change it.<br>        <br>        Default:<br>        request.host_url<br>        <br>        Example:<br>        To set the Realm to 'www.example.com':<br>        openid.realm_name = http://www.example.com<br>        <br>        Note:<br>        Changing the realm_name will most likely cause your request<br>        to fail.<br>        <br>        <br>        CONDITIONAL SETTINGS<br>        ====================<br>        File Store Path<br>        ---------------<br>        Key:<br>        openid.store.file.path<br>        <br>        Description:<br>        If the file store path is to be used, then it needs<br>        a writable folder to store data into. This is that path.<br>        <br>        Default:<br>        No default<br>        <br>        Example:<br>        To store data in the folder named \"sstore\" in the same<br>        folder as your development.ini:<br>        (Note that you must make this directory as well)<br>        openid.store.file.path = %(here)s/sstore<br>        <br>        SQL Connection String<br>        ---------------------<br>        Key:<br>        openid.store.sql.connection_string<br>        <br>        Description:<br>        This is the connection string for the database for<br>        python-openid to store its temporary data in.<br>        THIS HAS NOT BEEN TESTED AND DOES NOT WORK YET.<br>        <br>        Default:<br>        No default<br>        <br>        SQL Associations Table<br>        ----------------------<br>        Key:<br>        openid.store.sql.associations_table<br>        <br>        Description:<br>        This is the name of the table that python-openid<br>        will store is temporary data in.<br>        THIS HAS NOT BEEN TESTED AND DOES NOT WORK YET.<br>        <br>        Default:<br>        No default\n          </div>"}, "last_serial": 797595, "releases": {"0.3.4": [{"comment_text": "", "digests": {"md5": "060c58e034605317f84af5fcf45c8b8a", "sha256": "3727c0b69f4eab8b7b785fe59cd64746cfbcd266d39147082f48a467e8e48ffd"}, "downloads": -1, "filename": "pyramid_openid-0.3.4.tar.gz", "has_sig": false, "md5_digest": "060c58e034605317f84af5fcf45c8b8a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6549, "upload_time": "2011-01-13T09:44:42", "upload_time_iso_8601": "2011-01-13T09:44:42.759227Z", "url": "https://files.pythonhosted.org/packages/fa/61/4a61f8b16c679894139138e0842381a1309beda3e76e0ce626587f01ffb0/pyramid_openid-0.3.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "060c58e034605317f84af5fcf45c8b8a", "sha256": "3727c0b69f4eab8b7b785fe59cd64746cfbcd266d39147082f48a467e8e48ffd"}, "downloads": -1, "filename": "pyramid_openid-0.3.4.tar.gz", "has_sig": false, "md5_digest": "060c58e034605317f84af5fcf45c8b8a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6549, "upload_time": "2011-01-13T09:44:42", "upload_time_iso_8601": "2011-01-13T09:44:42.759227Z", "url": "https://files.pythonhosted.org/packages/fa/61/4a61f8b16c679894139138e0842381a1309beda3e76e0ce626587f01ffb0/pyramid_openid-0.3.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:58:17 2020"}