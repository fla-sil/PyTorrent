{"info": {"author": "Radmila Kompova and Sveinung Gundersen", "author_email": "radmilko@ifi.uio.no, sveinugu@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Framework :: Pytest", "Intended Audience :: Developers", "License :: OSI Approved :: Mozilla Public License 2.0 (MPL 2.0)", "Operating System :: MacOS :: MacOS X", "Operating System :: Microsoft :: Windows", "Operating System :: POSIX", "Programming Language :: Python :: 2.7", "Topic :: Software Development :: Quality Assurance", "Topic :: Software Development :: Testing", "Topic :: Utilities"], "description": "pytest-html-profiling\n=====================\n\npytest-html-profiling is a plugin for `pytest <http://pytest.org>`_  based on the pytest-html plugin that generates a\nHTML report for the test results along with profiling results and call graphs.\n\n.. image:: https://img.shields.io/badge/license-MPL%202.0-blue.svg\n   :target: https://github.com/pytest-dev/pytest-html/blob/master/LICENSE\n   :alt: License\n.. image:: https://img.shields.io/pypi/v/pytest-html.svg\n   :target: https://pypi.python.org/pypi/pytest-html/\n   :alt: PyPI\n.. image:: https://img.shields.io/conda/vn/conda-forge/pytest-html.svg\n   :target: https://anaconda.org/conda-forge/pytest-html\n   :alt: Conda Forge\n.. image:: https://img.shields.io/travis/pytest-dev/pytest-html.svg\n   :target: https://travis-ci.org/pytest-dev/pytest-html/\n   :alt: Travis\n.. image:: https://img.shields.io/github/issues-raw/pytest-dev/pytest-html.svg\n   :target: https://github.com/pytest-dev/pytest-html/issues\n   :alt: Issues\n.. image:: https://img.shields.io/requires/github/pytest-dev/pytest-html.svg\n   :target: https://requires.io/github/pytest-dev/pytest-html/requirements/?branch=master\n   :alt: Requirements\n\nRequirements\n------------\n\nYou will need the following prerequisites in order to use pytest-html-profiling:\n\n- Python 2.7, pytest-metadata, pygraphviz, gprof2dot\n\nInstallation\n------------\n\nTo install pytest-html-profiling:\n\n.. code-block:: bash\n\n  $ pip install pytest-html-profiling\n\nThen run your tests with:\n\n.. code-block:: bash\n\n  $ pytest --html=report.html --html-profiling --html-call-graph\n\nANSI codes\n----------\n\nNote that ANSI code support depends on the\n`ansi2html <https://pypi.python.org/pypi/ansi2html/>`_ package. Due to the use\nof a less permissive license, this package is not included as a dependency. If\nyou have this package installed, then ANSI codes will be converted to HTML in\nyour report.\n\nEnhancing reports\n-----------------\n\nAppearance\n~~~~~~~~~~\n\nCustom CSS (Cascasding Style Sheets) can be passed on the command line using\nthe :code:`--css` option. These will be applied in the order specified, and can\nbe used to change the appearance of the report.\n\n.. code-block:: bash\n\n  $ pytest --html=report.html --css=highcontrast.css --css=accessible.css\n\nEnvironment\n~~~~~~~~~~~\n\nThe *Environment* section is provided by the `pytest-metadata\n<https://pypi.python.org/pypi/pytest-metadata/>`_, plugin, and can be accessed\nvia the :code:`pytest_configure` hook:\n\n.. code-block:: python\n\n  def pytest_configure(config):\n      config._metadata['foo'] = 'bar'\n\nThe generated table will be sorted alphabetically unless the metadata is a\n:code:`collections.OrderedDict`.\n\nAdditional summary information\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nYou can edit the *Summary* section by using the :code:`pytest_html_results_summary` hook:\n\n.. code-block:: python\n\n   import pytest\n   from py.xml import html\n\n   def pytest_html_results_summary(prefix, summary, postfix):\n       prefix.extend([html.p(\"foo: bar\")])\n\nExtra content\n~~~~~~~~~~~~~\n\nYou can add details to the HTML reports by creating an 'extra' list on the\nreport object. Here are the types of extra content that can be added:\n\n==========  ============================================\nType        Example\n==========  ============================================\nRaw HTML    ``extra.html('<div>Additional HTML</div>')``\n`JSON`_     ``extra.json({'name': 'pytest'})``\nPlain text  ``extra.text('Add some simple Text')``\nURL         ``extra.url('http://www.example.com/')``\nImage       ``extra.image(image, mime_type='image/gif', extension='gif')``\nImage       ``extra.image('/path/to/file.png')``\nImage       ``extra.image('http://some_image.png')``\n==========  ============================================\n\n**Note**: When adding an image from file, the path can be either absolute\nor relative.\n\nThere are also convenient types for several image formats:\n\n============  ====================\nImage format  Example\n============  ====================\nPNG           ``extra.png(image)``\nJPEG          ``extra.jpg(image)``\nSVG           ``extra.svg(image)``\n============  ====================\n\nThe following example adds the various types of extras using a\n:code:`pytest_runtest_makereport` hook, which can be implemented in a plugin or\nconftest.py file:\n\n.. code-block:: python\n\n  import pytest\n  @pytest.hookimpl(hookwrapper=True)\n  def pytest_runtest_makereport(item, call):\n      pytest_html = item.config.pluginmanager.getplugin('html')\n      outcome = yield\n      report = outcome.get_result()\n      extra = getattr(report, 'extra', [])\n      if report.when == 'call':\n          # always add url to report\n          extra.append(pytest_html.extras.url('http://www.example.com/'))\n          xfail = hasattr(report, 'wasxfail')\n          if (report.skipped and xfail) or (report.failed and not xfail):\n              # only add additional html on failure\n              extra.append(pytest_html.extras.html('<div>Additional HTML</div>'))\n          report.extra = extra\n\nYou can also specify the :code:`name` argument for all types other than :code:`html` which will change the title of the\ncreated hyper link:\n\n.. code-block:: python\n\n    extra.append(pytest_html.extras.text('some string', name='Different title'))\n\n\nModifying the results table\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nYou can modify the columns by implementing custom hooks for the header and\nrows. The following example :code:`conftest.py` adds a description column with\nthe test function docstring, adds a sortable time column, and removes the links\ncolumn:\n\n.. code-block:: python\n\n  from datetime import datetime\n  from py.xml import html\n  import pytest\n\n  def pytest_html_results_table_header(cells):\n      cells.insert(2, html.th('Description'))\n      cells.insert(1, html.th('Time', class_='sortable time', col='time'))\n      cells.pop()\n\n  def pytest_html_results_table_row(report, cells):\n      cells.insert(2, html.td(report.description))\n      cells.insert(1, html.td(datetime.utcnow(), class_='col-time'))\n      cells.pop()\n\n  @pytest.hookimpl(hookwrapper=True)\n  def pytest_runtest_makereport(item, call):\n      outcome = yield\n      report = outcome.get_result()\n      report.description = str(item.function.__doc__)\n\nYou can also remove results by implementing the\n:code:`pytest_html_results_table_row` hook and removing all cells. The\nfollowing example removes all passed results from the report:\n\n.. code-block:: python\n\n  import pytest\n\n  def pytest_html_results_table_row(report, cells):\n      if report.passed:\n        del cells[:]\n\nThe log output and additional HTML can be modified by implementing the\n:code:`pytest_html_results_html` hook. The following example replaces all\nadditional HTML and log output with a notice that the log is empty:\n\n.. code-block:: python\n\n  import pytest\n\n  def pytest_html_results_table_html(report, data):\n      if report.passed:\n          del data[:]\n          data.append(html.div('No log output captured.', class_='empty log'))\n\nDisplay options\n---------------\n\nBy default, all rows in the **Results** table will be expanded except those that have :code:`Passed`.\n\nThis behavior can be customized with a query parameter: :code:`?collapsed=Passed,XFailed,Skipped`.\n\n\nScreenshots\n-----------\nCall graph\n\n.. image:: https://raw.githubusercontent.com/hyperbrowser/pytest-html-profiling/pytest-profiling/screenshots/call_graph.png\n\n\nProfiling report\n\n.. image:: https://raw.githubusercontent.com/hyperbrowser/pytest-html-profiling/pytest-profiling/screenshots/profiling.png\n\n\nResources\n---------\n\n- `Release Notes <http://github.com/pytest-dev/pytest-html/blob/master/CHANGES.rst>`_\n- `Issue Tracker <http://github.com/pytest-dev/pytest-html/issues>`_\n- `Code <http://github.com/pytest-dev/pytest-html/>`_\n\n.. _JSON: http://json.org/\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/hyperbrowser/pytest-html-profiling", "keywords": "py.test pytest html report", "license": "Mozilla Public License 2.0 (MPL 2.0)", "maintainer": "", "maintainer_email": "", "name": "pytest-html-profiling", "package_url": "https://pypi.org/project/pytest-html-profiling/", "platform": "", "project_url": "https://pypi.org/project/pytest-html-profiling/", "project_urls": {"Homepage": "https://github.com/hyperbrowser/pytest-html-profiling"}, "release_url": "https://pypi.org/project/pytest-html-profiling/1.0.0/", "requires_dist": ["pytest (>=3.0)", "pytest-metadata", "pygraphviz", "gprof2dot"], "requires_python": "", "summary": "Pytest plugin for generating HTML reports with per-test profiling and optionally call graph visualizations. Based on pytest-html by Dave Hunt.", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>pytest-html-profiling is a plugin for <a href=\"http://pytest.org\" rel=\"nofollow\">pytest</a>  based on the pytest-html plugin that generates a\nHTML report for the test results along with profiling results and call graphs.</p>\n<a href=\"https://github.com/pytest-dev/pytest-html/blob/master/LICENSE\" rel=\"nofollow\"><img alt=\"License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/027804d6a4692dd83257d503ff1da27f322e79fc/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d504c253230322e302d626c75652e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/pytest-html/\" rel=\"nofollow\"><img alt=\"PyPI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ae669d773fefa53bc232b9788b5e9a568eaf67eb/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f7079746573742d68746d6c2e737667\"></a>\n<a href=\"https://anaconda.org/conda-forge/pytest-html\" rel=\"nofollow\"><img alt=\"Conda Forge\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4225e8a4a16d3468955f20a2bdbcca1321ede76e/68747470733a2f2f696d672e736869656c64732e696f2f636f6e64612f766e2f636f6e64612d666f7267652f7079746573742d68746d6c2e737667\"></a>\n<a href=\"https://travis-ci.org/pytest-dev/pytest-html/\" rel=\"nofollow\"><img alt=\"Travis\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b1790eacddfd9193ca4e6c08909523f3ff30a685/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f7079746573742d6465762f7079746573742d68746d6c2e737667\"></a>\n<a href=\"https://github.com/pytest-dev/pytest-html/issues\" rel=\"nofollow\"><img alt=\"Issues\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2b351cc12ff221a6725bd91e2c68ec15f8b06d75/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732d7261772f7079746573742d6465762f7079746573742d68746d6c2e737667\"></a>\n<a href=\"https://requires.io/github/pytest-dev/pytest-html/requirements/?branch=master\" rel=\"nofollow\"><img alt=\"Requirements\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d6afbdb60e8b90e6b72c1e135a83a107462d6f29/68747470733a2f2f696d672e736869656c64732e696f2f72657175697265732f6769746875622f7079746573742d6465762f7079746573742d68746d6c2e737667\"></a>\n<div id=\"requirements\">\n<h2>Requirements</h2>\n<p>You will need the following prerequisites in order to use pytest-html-profiling:</p>\n<ul>\n<li>Python 2.7, pytest-metadata, pygraphviz, gprof2dot</li>\n</ul>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>To install pytest-html-profiling:</p>\n<pre>$ pip install pytest-html-profiling\n</pre>\n<p>Then run your tests with:</p>\n<pre>$ pytest --html<span class=\"o\">=</span>report.html --html-profiling --html-call-graph\n</pre>\n</div>\n<div id=\"ansi-codes\">\n<h2>ANSI codes</h2>\n<p>Note that ANSI code support depends on the\n<a href=\"https://pypi.python.org/pypi/ansi2html/\" rel=\"nofollow\">ansi2html</a> package. Due to the use\nof a less permissive license, this package is not included as a dependency. If\nyou have this package installed, then ANSI codes will be converted to HTML in\nyour report.</p>\n</div>\n<div id=\"enhancing-reports\">\n<h2>Enhancing reports</h2>\n<div id=\"appearance\">\n<h3>Appearance</h3>\n<p>Custom CSS (Cascasding Style Sheets) can be passed on the command line using\nthe <code>--css</code> option. These will be applied in the order specified, and can\nbe used to change the appearance of the report.</p>\n<pre>$ pytest --html<span class=\"o\">=</span>report.html --css<span class=\"o\">=</span>highcontrast.css --css<span class=\"o\">=</span>accessible.css\n</pre>\n</div>\n<div id=\"environment\">\n<h3>Environment</h3>\n<p>The <em>Environment</em> section is provided by the <a href=\"https://pypi.python.org/pypi/pytest-metadata/\" rel=\"nofollow\">pytest-metadata</a>, plugin, and can be accessed\nvia the <code>pytest_configure</code> hook:</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">pytest_configure</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"p\">):</span>\n    <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">_metadata</span><span class=\"p\">[</span><span class=\"s1\">'foo'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'bar'</span>\n</pre>\n<p>The generated table will be sorted alphabetically unless the metadata is a\n<code>collections.OrderedDict</code>.</p>\n</div>\n<div id=\"additional-summary-information\">\n<h3>Additional summary information</h3>\n<p>You can edit the <em>Summary</em> section by using the <code>pytest_html_results_summary</code> hook:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pytest</span>\n<span class=\"kn\">from</span> <span class=\"nn\">py.xml</span> <span class=\"kn\">import</span> <span class=\"n\">html</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">pytest_html_results_summary</span><span class=\"p\">(</span><span class=\"n\">prefix</span><span class=\"p\">,</span> <span class=\"n\">summary</span><span class=\"p\">,</span> <span class=\"n\">postfix</span><span class=\"p\">):</span>\n    <span class=\"n\">prefix</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">([</span><span class=\"n\">html</span><span class=\"o\">.</span><span class=\"n\">p</span><span class=\"p\">(</span><span class=\"s2\">\"foo: bar\"</span><span class=\"p\">)])</span>\n</pre>\n</div>\n<div id=\"extra-content\">\n<h3>Extra content</h3>\n<p>You can add details to the HTML reports by creating an \u2018extra\u2019 list on the\nreport object. Here are the types of extra content that can be added:</p>\n<table>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Type</th>\n<th>Example</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>Raw HTML</td>\n<td><tt><span class=\"pre\">extra.html('&lt;div&gt;Additional</span> <span class=\"pre\">HTML&lt;/div&gt;')</span></tt></td>\n</tr>\n<tr><td><a href=\"http://json.org/\" rel=\"nofollow\">JSON</a></td>\n<td><tt><span class=\"pre\">extra.json({'name':</span> <span class=\"pre\">'pytest'})</span></tt></td>\n</tr>\n<tr><td>Plain text</td>\n<td><tt><span class=\"pre\">extra.text('Add</span> some simple Text')</tt></td>\n</tr>\n<tr><td>URL</td>\n<td><tt><span class=\"pre\">extra.url('http://www.example.com/')</span></tt></td>\n</tr>\n<tr><td>Image</td>\n<td><tt>extra.image(image, <span class=\"pre\">mime_type='image/gif',</span> <span class=\"pre\">extension='gif')</span></tt></td>\n</tr>\n<tr><td>Image</td>\n<td><tt><span class=\"pre\">extra.image('/path/to/file.png')</span></tt></td>\n</tr>\n<tr><td>Image</td>\n<td><tt><span class=\"pre\">extra.image('http://some_image.png')</span></tt></td>\n</tr>\n</tbody>\n</table>\n<p><strong>Note</strong>: When adding an image from file, the path can be either absolute\nor relative.</p>\n<p>There are also convenient types for several image formats:</p>\n<table>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Image format</th>\n<th>Example</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>PNG</td>\n<td><tt>extra.png(image)</tt></td>\n</tr>\n<tr><td>JPEG</td>\n<td><tt>extra.jpg(image)</tt></td>\n</tr>\n<tr><td>SVG</td>\n<td><tt>extra.svg(image)</tt></td>\n</tr>\n</tbody>\n</table>\n<p>The following example adds the various types of extras using a\n<code>pytest_runtest_makereport</code> hook, which can be implemented in a plugin or\nconftest.py file:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pytest</span>\n<span class=\"nd\">@pytest</span><span class=\"o\">.</span><span class=\"n\">hookimpl</span><span class=\"p\">(</span><span class=\"n\">hookwrapper</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">pytest_runtest_makereport</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">,</span> <span class=\"n\">call</span><span class=\"p\">):</span>\n    <span class=\"n\">pytest_html</span> <span class=\"o\">=</span> <span class=\"n\">item</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">pluginmanager</span><span class=\"o\">.</span><span class=\"n\">getplugin</span><span class=\"p\">(</span><span class=\"s1\">'html'</span><span class=\"p\">)</span>\n    <span class=\"n\">outcome</span> <span class=\"o\">=</span> <span class=\"k\">yield</span>\n    <span class=\"n\">report</span> <span class=\"o\">=</span> <span class=\"n\">outcome</span><span class=\"o\">.</span><span class=\"n\">get_result</span><span class=\"p\">()</span>\n    <span class=\"n\">extra</span> <span class=\"o\">=</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"n\">report</span><span class=\"p\">,</span> <span class=\"s1\">'extra'</span><span class=\"p\">,</span> <span class=\"p\">[])</span>\n    <span class=\"k\">if</span> <span class=\"n\">report</span><span class=\"o\">.</span><span class=\"n\">when</span> <span class=\"o\">==</span> <span class=\"s1\">'call'</span><span class=\"p\">:</span>\n        <span class=\"c1\"># always add url to report</span>\n        <span class=\"n\">extra</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">pytest_html</span><span class=\"o\">.</span><span class=\"n\">extras</span><span class=\"o\">.</span><span class=\"n\">url</span><span class=\"p\">(</span><span class=\"s1\">'http://www.example.com/'</span><span class=\"p\">))</span>\n        <span class=\"n\">xfail</span> <span class=\"o\">=</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"n\">report</span><span class=\"p\">,</span> <span class=\"s1\">'wasxfail'</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">report</span><span class=\"o\">.</span><span class=\"n\">skipped</span> <span class=\"ow\">and</span> <span class=\"n\">xfail</span><span class=\"p\">)</span> <span class=\"ow\">or</span> <span class=\"p\">(</span><span class=\"n\">report</span><span class=\"o\">.</span><span class=\"n\">failed</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"n\">xfail</span><span class=\"p\">):</span>\n            <span class=\"c1\"># only add additional html on failure</span>\n            <span class=\"n\">extra</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">pytest_html</span><span class=\"o\">.</span><span class=\"n\">extras</span><span class=\"o\">.</span><span class=\"n\">html</span><span class=\"p\">(</span><span class=\"s1\">'&lt;div&gt;Additional HTML&lt;/div&gt;'</span><span class=\"p\">))</span>\n        <span class=\"n\">report</span><span class=\"o\">.</span><span class=\"n\">extra</span> <span class=\"o\">=</span> <span class=\"n\">extra</span>\n</pre>\n<p>You can also specify the <code>name</code> argument for all types other than <code>html</code> which will change the title of the\ncreated hyper link:</p>\n<pre><span class=\"n\">extra</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">pytest_html</span><span class=\"o\">.</span><span class=\"n\">extras</span><span class=\"o\">.</span><span class=\"n\">text</span><span class=\"p\">(</span><span class=\"s1\">'some string'</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'Different title'</span><span class=\"p\">))</span>\n</pre>\n</div>\n<div id=\"modifying-the-results-table\">\n<h3>Modifying the results table</h3>\n<p>You can modify the columns by implementing custom hooks for the header and\nrows. The following example <code>conftest.py</code> adds a description column with\nthe test function docstring, adds a sortable time column, and removes the links\ncolumn:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">datetime</span> <span class=\"kn\">import</span> <span class=\"n\">datetime</span>\n<span class=\"kn\">from</span> <span class=\"nn\">py.xml</span> <span class=\"kn\">import</span> <span class=\"n\">html</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pytest</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">pytest_html_results_table_header</span><span class=\"p\">(</span><span class=\"n\">cells</span><span class=\"p\">):</span>\n    <span class=\"n\">cells</span><span class=\"o\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">html</span><span class=\"o\">.</span><span class=\"n\">th</span><span class=\"p\">(</span><span class=\"s1\">'Description'</span><span class=\"p\">))</span>\n    <span class=\"n\">cells</span><span class=\"o\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">html</span><span class=\"o\">.</span><span class=\"n\">th</span><span class=\"p\">(</span><span class=\"s1\">'Time'</span><span class=\"p\">,</span> <span class=\"n\">class_</span><span class=\"o\">=</span><span class=\"s1\">'sortable time'</span><span class=\"p\">,</span> <span class=\"n\">col</span><span class=\"o\">=</span><span class=\"s1\">'time'</span><span class=\"p\">))</span>\n    <span class=\"n\">cells</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">()</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">pytest_html_results_table_row</span><span class=\"p\">(</span><span class=\"n\">report</span><span class=\"p\">,</span> <span class=\"n\">cells</span><span class=\"p\">):</span>\n    <span class=\"n\">cells</span><span class=\"o\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">html</span><span class=\"o\">.</span><span class=\"n\">td</span><span class=\"p\">(</span><span class=\"n\">report</span><span class=\"o\">.</span><span class=\"n\">description</span><span class=\"p\">))</span>\n    <span class=\"n\">cells</span><span class=\"o\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">html</span><span class=\"o\">.</span><span class=\"n\">td</span><span class=\"p\">(</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">utcnow</span><span class=\"p\">(),</span> <span class=\"n\">class_</span><span class=\"o\">=</span><span class=\"s1\">'col-time'</span><span class=\"p\">))</span>\n    <span class=\"n\">cells</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">()</span>\n\n<span class=\"nd\">@pytest</span><span class=\"o\">.</span><span class=\"n\">hookimpl</span><span class=\"p\">(</span><span class=\"n\">hookwrapper</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">pytest_runtest_makereport</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">,</span> <span class=\"n\">call</span><span class=\"p\">):</span>\n    <span class=\"n\">outcome</span> <span class=\"o\">=</span> <span class=\"k\">yield</span>\n    <span class=\"n\">report</span> <span class=\"o\">=</span> <span class=\"n\">outcome</span><span class=\"o\">.</span><span class=\"n\">get_result</span><span class=\"p\">()</span>\n    <span class=\"n\">report</span><span class=\"o\">.</span><span class=\"n\">description</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"o\">.</span><span class=\"n\">function</span><span class=\"o\">.</span><span class=\"vm\">__doc__</span><span class=\"p\">)</span>\n</pre>\n<p>You can also remove results by implementing the\n<code>pytest_html_results_table_row</code> hook and removing all cells. The\nfollowing example removes all passed results from the report:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pytest</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">pytest_html_results_table_row</span><span class=\"p\">(</span><span class=\"n\">report</span><span class=\"p\">,</span> <span class=\"n\">cells</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">report</span><span class=\"o\">.</span><span class=\"n\">passed</span><span class=\"p\">:</span>\n      <span class=\"k\">del</span> <span class=\"n\">cells</span><span class=\"p\">[:]</span>\n</pre>\n<p>The log output and additional HTML can be modified by implementing the\n<code>pytest_html_results_html</code> hook. The following example replaces all\nadditional HTML and log output with a notice that the log is empty:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pytest</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">pytest_html_results_table_html</span><span class=\"p\">(</span><span class=\"n\">report</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">report</span><span class=\"o\">.</span><span class=\"n\">passed</span><span class=\"p\">:</span>\n        <span class=\"k\">del</span> <span class=\"n\">data</span><span class=\"p\">[:]</span>\n        <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">html</span><span class=\"o\">.</span><span class=\"n\">div</span><span class=\"p\">(</span><span class=\"s1\">'No log output captured.'</span><span class=\"p\">,</span> <span class=\"n\">class_</span><span class=\"o\">=</span><span class=\"s1\">'empty log'</span><span class=\"p\">))</span>\n</pre>\n</div>\n</div>\n<div id=\"display-options\">\n<h2>Display options</h2>\n<p>By default, all rows in the <strong>Results</strong> table will be expanded except those that have <code>Passed</code>.</p>\n<p>This behavior can be customized with a query parameter: <code>?collapsed=Passed,XFailed,Skipped</code>.</p>\n</div>\n<div id=\"screenshots\">\n<h2>Screenshots</h2>\n<p>Call graph</p>\n<img alt=\"https://raw.githubusercontent.com/hyperbrowser/pytest-html-profiling/pytest-profiling/screenshots/call_graph.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/83531cecec45de53f3949ba68aca48aeaf035ebc/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f687970657262726f777365722f7079746573742d68746d6c2d70726f66696c696e672f7079746573742d70726f66696c696e672f73637265656e73686f74732f63616c6c5f67726170682e706e67\">\n<p>Profiling report</p>\n<img alt=\"https://raw.githubusercontent.com/hyperbrowser/pytest-html-profiling/pytest-profiling/screenshots/profiling.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2cc1c8690253fd1f1f749919f37b188c693030b7/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f687970657262726f777365722f7079746573742d68746d6c2d70726f66696c696e672f7079746573742d70726f66696c696e672f73637265656e73686f74732f70726f66696c696e672e706e67\">\n</div>\n<div id=\"resources\">\n<h2>Resources</h2>\n<ul>\n<li><a href=\"http://github.com/pytest-dev/pytest-html/blob/master/CHANGES.rst\" rel=\"nofollow\">Release Notes</a></li>\n<li><a href=\"http://github.com/pytest-dev/pytest-html/issues\" rel=\"nofollow\">Issue Tracker</a></li>\n<li><a href=\"http://github.com/pytest-dev/pytest-html/\" rel=\"nofollow\">Code</a></li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 6609586, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "7cfe16c038e4aab058c05f0ec134bfee", "sha256": "00f90063df79e9b21b96f68719376b46db80059b92a215ecaa7d4f60b281a689"}, "downloads": -1, "filename": "pytest_html_profiling-1.0.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "7cfe16c038e4aab058c05f0ec134bfee", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 19135, "upload_time": "2020-02-11T13:47:34", "upload_time_iso_8601": "2020-02-11T13:47:34.345225Z", "url": "https://files.pythonhosted.org/packages/01/82/9daad63df298a618350604d64d1e315cad7c355591d13efb56044d978a02/pytest_html_profiling-1.0.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d1ddd3f624980ceb1e134b36e6ba2c59", "sha256": "8b8867b1d6a5b7e6b9d4a26f44e8e7e749adfd0e2c5014f4406706a12fe3d97e"}, "downloads": -1, "filename": "pytest-html-profiling-1.0.0.tar.gz", "has_sig": false, "md5_digest": "d1ddd3f624980ceb1e134b36e6ba2c59", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 483480, "upload_time": "2020-02-11T13:47:37", "upload_time_iso_8601": "2020-02-11T13:47:37.902025Z", "url": "https://files.pythonhosted.org/packages/1d/6f/ac5c3cee60ebcfa20a62637167c5cd271f9d2d555e7726a0f013be0db8ae/pytest-html-profiling-1.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "7cfe16c038e4aab058c05f0ec134bfee", "sha256": "00f90063df79e9b21b96f68719376b46db80059b92a215ecaa7d4f60b281a689"}, "downloads": -1, "filename": "pytest_html_profiling-1.0.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "7cfe16c038e4aab058c05f0ec134bfee", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 19135, "upload_time": "2020-02-11T13:47:34", "upload_time_iso_8601": "2020-02-11T13:47:34.345225Z", "url": "https://files.pythonhosted.org/packages/01/82/9daad63df298a618350604d64d1e315cad7c355591d13efb56044d978a02/pytest_html_profiling-1.0.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d1ddd3f624980ceb1e134b36e6ba2c59", "sha256": "8b8867b1d6a5b7e6b9d4a26f44e8e7e749adfd0e2c5014f4406706a12fe3d97e"}, "downloads": -1, "filename": "pytest-html-profiling-1.0.0.tar.gz", "has_sig": false, "md5_digest": "d1ddd3f624980ceb1e134b36e6ba2c59", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 483480, "upload_time": "2020-02-11T13:47:37", "upload_time_iso_8601": "2020-02-11T13:47:37.902025Z", "url": "https://files.pythonhosted.org/packages/1d/6f/ac5c3cee60ebcfa20a62637167c5cd271f9d2d555e7726a0f013be0db8ae/pytest-html-profiling-1.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:55:05 2020"}