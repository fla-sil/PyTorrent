{"info": {"author": "Jan Verbeek", "author_email": "jan.verbeek@posteo.nl", "bugtrack_url": null, "classifiers": ["Environment :: Console", "Intended Audience :: Developers", "Intended Audience :: System Administrators", "License :: OSI Approved :: ISC License (ISCL)", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy", "Topic :: System :: System Shells"], "description": "mocksh is a library for shell scripting inside Python. It makes external\ncommands available as functions, and provides accessible ways to use their\nresults. It tries to copy the semantics of sh (the Bourne shell) when they\nmake sense in Python.\n\nIt acts as a thin layer around the\n`subprocess <https://docs.python.org/3/library/subprocess.html>`_ module.\n\n======\nBasics\n======\n\nIn the simplest case, a command is run until completion, and the output is\nshown without being captured:\n\n.. code-block:: python\n\n    >>> from mocksh import sh\n    >>> sh.echo(\"Hello, world\")\n    Hello, world\n\nIf the command fails, it raises an exception:\n\n.. code-block:: python\n\n    >>> sh.false()\n    Traceback (most recent call last):\n        ...\n    mocksh.CommandError[1]: Command 'false' failed with status code 1\n\nThis most basic form is useful for commands that are run for their side\neffects. Command output isn't captured by default, because it's often useful.\nIf something goes wrong, it provides extra information that an exception\ndoesn't know about.\n\n----------------\nCapturing output\n----------------\n\nOutput can be captured with the ``capture_`` method, awkwardly inserted into\nthe middle, right before the arguments:\n\n.. code-block:: python\n\n    >>> str(sh.echo.capture_(\"Hello, Python\"))\n    'Hello, Python\\n'\n\nThe process doesn't immediately return a string. You have to tell it how you\nwant to access the output:\n\n.. code-block:: python\n\n    >>> bytes(sh.dd.capture_('if=/dev/urandom', 'count=1', 'bs=16'))  # raw bytes\n    b'w\\xc4K\\xd9\\x04\\xa7\\x8f\\x0el\\xe9\\xb0\\xa1(\\x8f\\tp'\n    >>> for num in sh.seq.capture_(3):  # line by line\n    ...     print(num)\n    1\n    2\n    3\n    >>> list(sh.shuf.capture_('-n', 5, '/usr/share/dict/words'))\n    ['upgrading', 'humongous', 'thesauri', 'candidly', 'drools']\n\nCommands called this way return immediately, before the command is finished.\nThis means the output can be processed line by line without wasting memory\nif the output is large.\n\n------\nPiping\n------\n\nAnother special method, ``pipe_``, lets you construct pipelines:\n\n.. code-block:: python\n\n    >>> sh.fortune.pipe_().cowsay()  # Like 'fortune | cowsay'\n     ______________________________________\n    / Are you making all this up as you go \\\n    \\ along?                               /\n     --------------------------------------\n            \\   ^__^\n             \\  (oo)\\_______\n                (__)\\       )\\/\\\n                    ||----w |\n                    ||     ||\n\nThe next command in the pipeline is called like a method, the same way you\nwould call a command on the ``sh`` object.\n\nThis can naturally be combined with ``capture_``:\n\n.. code-block:: python\n\n    >>> str(sh.fortune.pipe_().rot13.capture_())  # Like 'fortune | rot13'\n    'Lbhe cerfrag cynaf jvyy or fhpprffshy.\\n'\n\n-------\nTesting\n-------\n\nBy default, commands raise an exception if they fail, but that's not always\ndesirable. Sometimes you just want to test whether a command succeeded. The\n``test_`` special method can be used for that:\n\n.. code-block:: python\n\n    >>> if sh.ping.test_('-c', 1, 'fake.domain'):\n    ...     print(\"fake.domain is up\")\n    ... else:\n    ...     print(\"fake.domain is down\")\n    ping: fake.domain: Name or service not known\n    fake.domain is down\n\n==========\nInstalling\n==========\n\n::\n    $ pip install mocksh\n\nBecause the module is only a single file, you could also just dump\n``mocksh.py`` into your scripts folder.\n\n==============\nAdvanced usage\n==============\n\n--------------------\nOther argument forms\n--------------------\n\nSome commands have subcommands. For example, ``git`` has ``git status`` and\n``git commit``. They can be separated by a dot:\n\n.. code-block:: python\n    >>> sh.git.status()\n    On branch master\n    ...\n\nUnderscores in command names are converted to dashes, because many commands\nhave dashes in their names but Python doesn't allow dashes in its names. To\nrun a command that does have an underscore in its name, or any weird\ncharacters, you can use indexing syntax:\n\n.. code-block:: python\n    >>> sh.units_cur()  # Doesn't work, converted to units-cur\n    Traceback (most recent call last):\n    ...\n    FileNotFoundError: [Errno 2] No such file or directory: 'units-cur': 'units-cur'\n    >>> sh['units_cur']()  # works\n    ...\n    >>> sh.sudo['units_cur']()\n    ...\n\nYou can also index with multiple arguments. This gives an easy way of\ndefining aliases:\n\n.. code-block:: python\n    >>> lh = sh.ls['-l', '-h']\n    >>> lh('/')\n    total 16K\n    drwxr-xr-x   1 root root 2.4K Jul 14 08:26 bin\n    ...\n\n---------------\nCommand options\n---------------\n\nOptions can be passed either as regular arguments or as keyword arguments:\n\n.. code-block:: python\n\n    >>> sh.curl('-L', '--data', 'test', 'httpbin.org/post')  # wordy, but transparent\n    ...\n    >>> sh.curl('httpbin.org/post', L=True, data='test')     # fancy, but opaque\n    ...\n\nBoth examples are exactly equivalent, and generate the same command.\n\nOptions are processed according to a few rules.\n\n* Options that are one character long are short options, others are long\n  options. This means ``v`` is translated to ``-v``, but ``verbose`` is\n  translated to ``--verbose``.\n* Underscores ( ``_`` ) are translated to dashes ( ``-`` ). This is because\n  Python does not allow dashes in keyword arguments. ``cookie_jar`` becomes\n  ``--cookie-jar``.\n* If the value of the argument is ``False``, it's discarded. If the value is\n  ``True``, only the flag is added. Otherwise, the key and the value are\n  both added. ``L=True`` becomes ``-L``, and ``data='test'`` becomes\n  ``--data test``.\n* For long options that nevertheless take a single dash, you can start the\n  argument with a dash. ``java -jar ...`` can be expressed as\n  ``sh.java(_jar=...)``\n* Options are inserted after the command name and before the other arguments.\n\nThis is enough to deal with most programs. But if it doesn't do what you\nwant, sticking to the simple, dependable form is always a good option.\n\n---------------\nSpecial options\n---------------\n\nKeyword arguments that end with an underscore aren't added to the command,\nbut used for special behavior. ``mocksh`` has a few special keyword\narguments, and any others are forwarded to ``subprocess`` (without the\nunderscore).\n\nFor example, to append command output to a file:\n\n.. code-block:: python\n    >>> with open('log.txt', 'a') as f:  # rsync -Pr somedir somehost: >> log.txt\n    ...     sh.rsync('-Pr', 'somedir', 'somehost:', stdout_=f)  # stdout_, not stdout\n\nThat's roughly equivalent to this use of ``subprocess``:\n\n.. code-block:: python\n    >>> import subprocess\n    >>> with open('log.txt', 'a') as f:\n    ...     subprocess.run(['rsync', '-Pr', 'somedir', 'somehost:'], stdout=f)\n\nIn addition to the arguments of `subprocess.Popen <https://docs.python.org/3/library/subprocess.html#subprocess.Popen>`_,\nmocksh supports the following arguments:\n\n* ``check``: Whether to automatically raise an exception if the command\n  fails. ``True`` by default.\n* ``input``: String or bytes to be sent to the standard input of the command.\n* ``wait``: Whether to wait until the command is finished before returning.\n  To run a command in the background, add ``wait_=False``.\n* ``timeout``: Optionally, how many seconds to wait before raising a\n  ``subprocess.TimeoutExpred`` exception.\n* ``capture_stdout``: If ``True``, capture the standard output of the command.\n  ``capture_stdout_=True`` is equivalent to ``stdout_=sh.PIPE_``.\n* ``capture_stderr``: Likewise, but for stderr. If only stderr is captured,\n  converting the command to a string will give the stderr output.\n\n---------------\nProcess objects\n---------------\n\nCommands return ``mocksh.Process`` objects, a subclass of\n``subprocess.Popen``. It can be used like a regular instance of ``Popen``,\nbut has additional features, most of which are covered by other sections.\n\nA process in a pipeline will have a ``tail`` attribute, set to the previous\ncommand in the pipeline. If the process at the start of the pipeline has an\nopen ``stdin``, its ``stdin`` attribute is set to that.\n\n``Process.wait`` is pipeline-aware, and will wait for the entire pipeline to\nfinish, with proper timeout handling.\n\nThe ``Process.check_returncode`` method raises a ``CommandError`` even if\n``check=False``, for manual checking.\n\nThe ``captured`` property points to ``stdout`` if it's captured, or\n``stderr`` if that's captured. If both are captured, ``stdout`` and\n``stderr`` have to be addressed directly.\n\n---------------------\nAsynchronous commands\n---------------------\n\nCommands can be run in the background by adding ``wait_=False`` to the\nargument list.\n\nTo make sure they finish, they can be used as a context manager:\n\n.. code-block:: python\n    >>> with sh.wget('some.large/file.ext'):\n    ...     something_else()\n    ... # wget is now guaranteed to have finished, and would have thrown an\n    ... # exception if it failed\n    ... use('file.ext')\n\nBecause ``capture_`` also runs processes in the background, you can wait\nwith gathering the output until later. You could loop through its lines:\n\n.. code-block:: python\n    >>> for line in sh.long_process():\n    ...     process(line)\n\nOr you could collect it all in one go:\n\n.. code-block:: python\n    >>> proc = sh.expensive_computation()\n    >>> # do things\n    >>> output = str(proc)\n\n------------------\nException handling\n------------------\n\nCommands that fail raise a ``CommandError``.\n\nAs a convenience for ``from mocksh import sh``, the exception type is\naccessible as ``sh.CommandError_`` (note the underscore).\n\nThe exception is subclassed for different return codes and signals.\nSubclasses can be accessed with the ``code`` classmethod. For example:\n\n.. code-block:: python\n    >>> try:\n    ...     sh.false()\n    ... except sh.CommandError_.code(10):\n    ...     print(\"Exited with 10\")\n    ... except sh.CommandError_.code(1):\n    ...     print(\"Exited with 1\")\n    Exited with 1\n\nSignals can be referred to by name:\n\n.. code-block:: python\n    >>> try:\n    ...     sh.tcc('-run', '-', input_='#include <stdio.h> int main() { puts(0); }')\n    ... except sh.CommandError_.code('SIGSEGV'):\n    ...     ...\n\n---------------\nCommand objects\n---------------\n\n``sh`` is a ``mocksh.Command`` object. Commands like ``sh.echo`` and\n``sh.ls['-l', '-h']`` are also ``Command`` objects.\n\n``Command`` objects can contain a prepared set of arguments for ``Process``.\nThis is how piping is implemented: ``_pipe`` returns a new ``Command``\nobject with ``tail`` set to the last ``Process``.\n\nIf you're tired of typing ``.capture_`` all the time, you could\ncreate your own launcher like this:\n\n.. code-block:: python\n    >>> import mocksh\n    >>> mysh = mocksh.Command(capture_stdout=True, wait=False)\n    >>> str(mysh.echo('test'))\n    'test\\n'\n\n-------------------------------------\nWhy you should use subprocess instead\n-------------------------------------\n\nmocksh is a leaky abstraction. It pretends external processes are Python\nfunctions, but external processes don't behave like Python functions at all.\nIt tries to copy sh's semantics, but sh's semantics are incompatible with\nPython's syntax.\n\nIn most cases you're better off using ``subprocess`` directly, through a\nnice interface like `subprocess.run <https://docs.python.org/3/library/subprocess.html#subprocess.run>`_.\nIt will be easier to reason about because it doesn't hide what's getting\nexecuted.\n\n----------------\nSimilar projects\n----------------\n\n* `sh <http://amoffat.github.io/sh/>`_ (unrelated to other uses of the word\n  ``sh`` in this document)\n* `plumbum <https://plumbum.readthedocs.io/>`_\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/blyxxyz/mocksh", "keywords": "", "license": "ISC", "maintainer": "", "maintainer_email": "", "name": "mocksh", "package_url": "https://pypi.org/project/mocksh/", "platform": "", "project_url": "https://pypi.org/project/mocksh/", "project_urls": {"Homepage": "https://github.com/blyxxyz/mocksh"}, "release_url": "https://pypi.org/project/mocksh/0.0.1/", "requires_dist": null, "requires_python": "", "summary": "Simple shell-style process calling", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            mocksh is a library for shell scripting inside Python. It makes external<br>commands available as functions, and provides accessible ways to use their<br>results. It tries to copy the semantics of sh (the Bourne shell) when they<br>make sense in Python.<br><br>It acts as a thin layer around the<br>`subprocess &lt;https://docs.python.org/3/library/subprocess.html&gt;`_ module.<br><br>======<br>Basics<br>======<br><br>In the simplest case, a command is run until completion, and the output is<br>shown without being captured:<br><br>.. code-block:: python<br><br>    &gt;&gt;&gt; from mocksh import sh<br>    &gt;&gt;&gt; sh.echo(\"Hello, world\")<br>    Hello, world<br><br>If the command fails, it raises an exception:<br><br>.. code-block:: python<br><br>    &gt;&gt;&gt; sh.false()<br>    Traceback (most recent call last):<br>        ...<br>    mocksh.CommandError[1]: Command 'false' failed with status code 1<br><br>This most basic form is useful for commands that are run for their side<br>effects. Command output isn't captured by default, because it's often useful.<br>If something goes wrong, it provides extra information that an exception<br>doesn't know about.<br><br>----------------<br>Capturing output<br>----------------<br><br>Output can be captured with the ``capture_`` method, awkwardly inserted into<br>the middle, right before the arguments:<br><br>.. code-block:: python<br><br>    &gt;&gt;&gt; str(sh.echo.capture_(\"Hello, Python\"))<br>    'Hello, Python\\n'<br><br>The process doesn't immediately return a string. You have to tell it how you<br>want to access the output:<br><br>.. code-block:: python<br><br>    &gt;&gt;&gt; bytes(sh.dd.capture_('if=/dev/urandom', 'count=1', 'bs=16'))  # raw bytes<br>    b'w\\xc4K\\xd9\\x04\\xa7\\x8f\\x0el\\xe9\\xb0\\xa1(\\x8f\\tp'<br>    &gt;&gt;&gt; for num in sh.seq.capture_(3):  # line by line<br>    ...     print(num)<br>    1<br>    2<br>    3<br>    &gt;&gt;&gt; list(sh.shuf.capture_('-n', 5, '/usr/share/dict/words'))<br>    ['upgrading', 'humongous', 'thesauri', 'candidly', 'drools']<br><br>Commands called this way return immediately, before the command is finished.<br>This means the output can be processed line by line without wasting memory<br>if the output is large.<br><br>------<br>Piping<br>------<br><br>Another special method, ``pipe_``, lets you construct pipelines:<br><br>.. code-block:: python<br><br>    &gt;&gt;&gt; sh.fortune.pipe_().cowsay()  # Like 'fortune | cowsay'<br>     ______________________________________<br>    / Are you making all this up as you go \\<br>    \\ along?                               /<br>     --------------------------------------<br>            \\   ^__^<br>             \\  (oo)\\_______<br>                (__)\\       )\\/\\<br>                    ||----w |<br>                    ||     ||<br><br>The next command in the pipeline is called like a method, the same way you<br>would call a command on the ``sh`` object.<br><br>This can naturally be combined with ``capture_``:<br><br>.. code-block:: python<br><br>    &gt;&gt;&gt; str(sh.fortune.pipe_().rot13.capture_())  # Like 'fortune | rot13'<br>    'Lbhe cerfrag cynaf jvyy or fhpprffshy.\\n'<br><br>-------<br>Testing<br>-------<br><br>By default, commands raise an exception if they fail, but that's not always<br>desirable. Sometimes you just want to test whether a command succeeded. The<br>``test_`` special method can be used for that:<br><br>.. code-block:: python<br><br>    &gt;&gt;&gt; if sh.ping.test_('-c', 1, 'fake.domain'):<br>    ...     print(\"fake.domain is up\")<br>    ... else:<br>    ...     print(\"fake.domain is down\")<br>    ping: fake.domain: Name or service not known<br>    fake.domain is down<br><br>==========<br>Installing<br>==========<br><br>::<br>    $ pip install mocksh<br><br>Because the module is only a single file, you could also just dump<br>``mocksh.py`` into your scripts folder.<br><br>==============<br>Advanced usage<br>==============<br><br>--------------------<br>Other argument forms<br>--------------------<br><br>Some commands have subcommands. For example, ``git`` has ``git status`` and<br>``git commit``. They can be separated by a dot:<br><br>.. code-block:: python<br>    &gt;&gt;&gt; sh.git.status()<br>    On branch master<br>    ...<br><br>Underscores in command names are converted to dashes, because many commands<br>have dashes in their names but Python doesn't allow dashes in its names. To<br>run a command that does have an underscore in its name, or any weird<br>characters, you can use indexing syntax:<br><br>.. code-block:: python<br>    &gt;&gt;&gt; sh.units_cur()  # Doesn't work, converted to units-cur<br>    Traceback (most recent call last):<br>    ...<br>    FileNotFoundError: [Errno 2] No such file or directory: 'units-cur': 'units-cur'<br>    &gt;&gt;&gt; sh['units_cur']()  # works<br>    ...<br>    &gt;&gt;&gt; sh.sudo['units_cur']()<br>    ...<br><br>You can also index with multiple arguments. This gives an easy way of<br>defining aliases:<br><br>.. code-block:: python<br>    &gt;&gt;&gt; lh = sh.ls['-l', '-h']<br>    &gt;&gt;&gt; lh('/')<br>    total 16K<br>    drwxr-xr-x   1 root root 2.4K Jul 14 08:26 bin<br>    ...<br><br>---------------<br>Command options<br>---------------<br><br>Options can be passed either as regular arguments or as keyword arguments:<br><br>.. code-block:: python<br><br>    &gt;&gt;&gt; sh.curl('-L', '--data', 'test', 'httpbin.org/post')  # wordy, but transparent<br>    ...<br>    &gt;&gt;&gt; sh.curl('httpbin.org/post', L=True, data='test')     # fancy, but opaque<br>    ...<br><br>Both examples are exactly equivalent, and generate the same command.<br><br>Options are processed according to a few rules.<br><br>* Options that are one character long are short options, others are long<br>  options. This means ``v`` is translated to ``-v``, but ``verbose`` is<br>  translated to ``--verbose``.<br>* Underscores ( ``_`` ) are translated to dashes ( ``-`` ). This is because<br>  Python does not allow dashes in keyword arguments. ``cookie_jar`` becomes<br>  ``--cookie-jar``.<br>* If the value of the argument is ``False``, it's discarded. If the value is<br>  ``True``, only the flag is added. Otherwise, the key and the value are<br>  both added. ``L=True`` becomes ``-L``, and ``data='test'`` becomes<br>  ``--data test``.<br>* For long options that nevertheless take a single dash, you can start the<br>  argument with a dash. ``java -jar ...`` can be expressed as<br>  ``sh.java(_jar=...)``<br>* Options are inserted after the command name and before the other arguments.<br><br>This is enough to deal with most programs. But if it doesn't do what you<br>want, sticking to the simple, dependable form is always a good option.<br><br>---------------<br>Special options<br>---------------<br><br>Keyword arguments that end with an underscore aren't added to the command,<br>but used for special behavior. ``mocksh`` has a few special keyword<br>arguments, and any others are forwarded to ``subprocess`` (without the<br>underscore).<br><br>For example, to append command output to a file:<br><br>.. code-block:: python<br>    &gt;&gt;&gt; with open('log.txt', 'a') as f:  # rsync -Pr somedir somehost: &gt;&gt; log.txt<br>    ...     sh.rsync('-Pr', 'somedir', 'somehost:', stdout_=f)  # stdout_, not stdout<br><br>That's roughly equivalent to this use of ``subprocess``:<br><br>.. code-block:: python<br>    &gt;&gt;&gt; import subprocess<br>    &gt;&gt;&gt; with open('log.txt', 'a') as f:<br>    ...     subprocess.run(['rsync', '-Pr', 'somedir', 'somehost:'], stdout=f)<br><br>In addition to the arguments of `subprocess.Popen &lt;https://docs.python.org/3/library/subprocess.html#subprocess.Popen&gt;`_,<br>mocksh supports the following arguments:<br><br>* ``check``: Whether to automatically raise an exception if the command<br>  fails. ``True`` by default.<br>* ``input``: String or bytes to be sent to the standard input of the command.<br>* ``wait``: Whether to wait until the command is finished before returning.<br>  To run a command in the background, add ``wait_=False``.<br>* ``timeout``: Optionally, how many seconds to wait before raising a<br>  ``subprocess.TimeoutExpred`` exception.<br>* ``capture_stdout``: If ``True``, capture the standard output of the command.<br>  ``capture_stdout_=True`` is equivalent to ``stdout_=sh.PIPE_``.<br>* ``capture_stderr``: Likewise, but for stderr. If only stderr is captured,<br>  converting the command to a string will give the stderr output.<br><br>---------------<br>Process objects<br>---------------<br><br>Commands return ``mocksh.Process`` objects, a subclass of<br>``subprocess.Popen``. It can be used like a regular instance of ``Popen``,<br>but has additional features, most of which are covered by other sections.<br><br>A process in a pipeline will have a ``tail`` attribute, set to the previous<br>command in the pipeline. If the process at the start of the pipeline has an<br>open ``stdin``, its ``stdin`` attribute is set to that.<br><br>``Process.wait`` is pipeline-aware, and will wait for the entire pipeline to<br>finish, with proper timeout handling.<br><br>The ``Process.check_returncode`` method raises a ``CommandError`` even if<br>``check=False``, for manual checking.<br><br>The ``captured`` property points to ``stdout`` if it's captured, or<br>``stderr`` if that's captured. If both are captured, ``stdout`` and<br>``stderr`` have to be addressed directly.<br><br>---------------------<br>Asynchronous commands<br>---------------------<br><br>Commands can be run in the background by adding ``wait_=False`` to the<br>argument list.<br><br>To make sure they finish, they can be used as a context manager:<br><br>.. code-block:: python<br>    &gt;&gt;&gt; with sh.wget('some.large/file.ext'):<br>    ...     something_else()<br>    ... # wget is now guaranteed to have finished, and would have thrown an<br>    ... # exception if it failed<br>    ... use('file.ext')<br><br>Because ``capture_`` also runs processes in the background, you can wait<br>with gathering the output until later. You could loop through its lines:<br><br>.. code-block:: python<br>    &gt;&gt;&gt; for line in sh.long_process():<br>    ...     process(line)<br><br>Or you could collect it all in one go:<br><br>.. code-block:: python<br>    &gt;&gt;&gt; proc = sh.expensive_computation()<br>    &gt;&gt;&gt; # do things<br>    &gt;&gt;&gt; output = str(proc)<br><br>------------------<br>Exception handling<br>------------------<br><br>Commands that fail raise a ``CommandError``.<br><br>As a convenience for ``from mocksh import sh``, the exception type is<br>accessible as ``sh.CommandError_`` (note the underscore).<br><br>The exception is subclassed for different return codes and signals.<br>Subclasses can be accessed with the ``code`` classmethod. For example:<br><br>.. code-block:: python<br>    &gt;&gt;&gt; try:<br>    ...     sh.false()<br>    ... except sh.CommandError_.code(10):<br>    ...     print(\"Exited with 10\")<br>    ... except sh.CommandError_.code(1):<br>    ...     print(\"Exited with 1\")<br>    Exited with 1<br><br>Signals can be referred to by name:<br><br>.. code-block:: python<br>    &gt;&gt;&gt; try:<br>    ...     sh.tcc('-run', '-', input_='#include &lt;stdio.h&gt; int main() { puts(0); }')<br>    ... except sh.CommandError_.code('SIGSEGV'):<br>    ...     ...<br><br>---------------<br>Command objects<br>---------------<br><br>``sh`` is a ``mocksh.Command`` object. Commands like ``sh.echo`` and<br>``sh.ls['-l', '-h']`` are also ``Command`` objects.<br><br>``Command`` objects can contain a prepared set of arguments for ``Process``.<br>This is how piping is implemented: ``_pipe`` returns a new ``Command``<br>object with ``tail`` set to the last ``Process``.<br><br>If you're tired of typing ``.capture_`` all the time, you could<br>create your own launcher like this:<br><br>.. code-block:: python<br>    &gt;&gt;&gt; import mocksh<br>    &gt;&gt;&gt; mysh = mocksh.Command(capture_stdout=True, wait=False)<br>    &gt;&gt;&gt; str(mysh.echo('test'))<br>    'test\\n'<br><br>-------------------------------------<br>Why you should use subprocess instead<br>-------------------------------------<br><br>mocksh is a leaky abstraction. It pretends external processes are Python<br>functions, but external processes don't behave like Python functions at all.<br>It tries to copy sh's semantics, but sh's semantics are incompatible with<br>Python's syntax.<br><br>In most cases you're better off using ``subprocess`` directly, through a<br>nice interface like `subprocess.run &lt;https://docs.python.org/3/library/subprocess.html#subprocess.run&gt;`_.<br>It will be easier to reason about because it doesn't hide what's getting<br>executed.<br><br>----------------<br>Similar projects<br>----------------<br><br>* `sh &lt;http://amoffat.github.io/sh/&gt;`_ (unrelated to other uses of the word<br>  ``sh`` in this document)<br>* `plumbum &lt;https://plumbum.readthedocs.io/&gt;`_<br><br><br>\n          </div>"}, "last_serial": 4075429, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "8f29c6770a91168ecee1d70951b44c5c", "sha256": "ff9a376ae69c30daac848718c90cf336ab42970471c3ea20809e22056cbdab60"}, "downloads": -1, "filename": "mocksh-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "8f29c6770a91168ecee1d70951b44c5c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 17732, "upload_time": "2018-07-17T21:20:56", "upload_time_iso_8601": "2018-07-17T21:20:56.089432Z", "url": "https://files.pythonhosted.org/packages/be/68/24b1dc99e5e2654c0abf46767c460dfd580f51cb93cd91a3eb87abddacb6/mocksh-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a70faa1d1f758129e2236058c9c88c42", "sha256": "84e233dd286c35c8c344f3c0e06ee55a6918cf68c1ccd9f310239ba358835bc0"}, "downloads": -1, "filename": "mocksh-0.0.1.tar.gz", "has_sig": false, "md5_digest": "a70faa1d1f758129e2236058c9c88c42", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16884, "upload_time": "2018-07-17T21:21:28", "upload_time_iso_8601": "2018-07-17T21:21:28.350585Z", "url": "https://files.pythonhosted.org/packages/ac/81/6a6c5dc0507e18097ec00188ea6549f108a1072be7b6d138b9ace5fce1e9/mocksh-0.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "8f29c6770a91168ecee1d70951b44c5c", "sha256": "ff9a376ae69c30daac848718c90cf336ab42970471c3ea20809e22056cbdab60"}, "downloads": -1, "filename": "mocksh-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "8f29c6770a91168ecee1d70951b44c5c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 17732, "upload_time": "2018-07-17T21:20:56", "upload_time_iso_8601": "2018-07-17T21:20:56.089432Z", "url": "https://files.pythonhosted.org/packages/be/68/24b1dc99e5e2654c0abf46767c460dfd580f51cb93cd91a3eb87abddacb6/mocksh-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a70faa1d1f758129e2236058c9c88c42", "sha256": "84e233dd286c35c8c344f3c0e06ee55a6918cf68c1ccd9f310239ba358835bc0"}, "downloads": -1, "filename": "mocksh-0.0.1.tar.gz", "has_sig": false, "md5_digest": "a70faa1d1f758129e2236058c9c88c42", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16884, "upload_time": "2018-07-17T21:21:28", "upload_time_iso_8601": "2018-07-17T21:21:28.350585Z", "url": "https://files.pythonhosted.org/packages/ac/81/6a6c5dc0507e18097ec00188ea6549f108a1072be7b6d138b9ace5fce1e9/mocksh-0.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:53:01 2020"}