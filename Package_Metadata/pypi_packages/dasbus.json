{"info": {"author": "Vendula Poncova", "author_email": "vponcova@redhat.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: GNU Lesser General Public License v2 or later (LGPLv2+)", "Programming Language :: Python :: 3"], "description": "# dasbus\nThis DBus library is written in Python 3, based on GLib and inspired by pydbus. Find out more in\nthe [documentation](https://dasbus.readthedocs.io/en/latest/).\n\nThe code used to be part of the [Anaconda Installer](https://github.com/rhinstaller/anaconda)\nproject. It was based on the [pydbus](https://github.com/LEW21/pydbus) library, but we replaced\nit with our own solution because its upstream development stalled. The dasbus library is\na result of this effort.\n\n[![Build Status](https://travis-ci.com/rhinstaller/dasbus.svg?branch=master)](https://travis-ci.com/rhinstaller/dasbus)\n[![Documentation Status](https://readthedocs.org/projects/dasbus/badge/?version=latest)](https://dasbus.readthedocs.io/en/latest/?badge=latest)\n[![codecov](https://codecov.io/gh/rhinstaller/dasbus/branch/master/graph/badge.svg)](https://codecov.io/gh/rhinstaller/dasbus)\n\n## Requirements\n\n* Python 3.6+\n* PyGObject 3\n\nYou can install [PyGObject](https://pygobject.readthedocs.io) provided by your system or use PyPI.\nThe system package is usually called `python3-gi`, `python3-gobject` or `pygobject3`. See the\n[instructions](https://pygobject.readthedocs.io/en/latest/getting_started.html) for your platform\n(only for PyGObject, you don't need cairo or GTK).\n\nThe library is known to work with Python 3.8, PyGObject 3.34 and GLib 2.63, but these are not the\nrequired minimal versions.\n\n## Installation\n\nInstall the package from [PyPI](https://pypi.org/project/dasbus/). Follow the instructions above\nto install the required dependencies.\n\n```\npip3 install dasbus\n```\n\nOr install the RPM package on Fedora 31+.\n\n```\nsudo dnf install python3-dasbus\n```\n\n## Examples\n\nShow the current hostname.\n\n```python\nfrom dasbus.connection import SystemMessageBus\nbus = SystemMessageBus()\n\nproxy = bus.get_proxy(\n    \"org.freedesktop.hostname1\",\n    \"/org/freedesktop/hostname1\"\n)\n\nprint(proxy.Hostname)\n```\n\nSend a notification to the notification server.\n\n```python\nfrom dasbus.connection import SessionMessageBus\nbus = SessionMessageBus()\n\nproxy = bus.get_proxy(\n    \"org.freedesktop.Notifications\",\n    \"/org/freedesktop/Notifications\"\n)\n\nid = proxy.Notify(\n    \"\", 0, \"face-smile\", \"Hello World!\",\n    \"This notification can be ignored.\",\n    [], {}, 0\n)\n\nprint(\"The notification {} was sent.\".format(id))\n```\n\nHandle a closed notification.\n\n```python\nfrom dasbus.loop import EventLoop\nloop = EventLoop()\n\nfrom dasbus.connection import SessionMessageBus\nbus = SessionMessageBus()\n\nproxy = bus.get_proxy(\n    \"org.freedesktop.Notifications\",\n    \"/org/freedesktop/Notifications\"\n)\n\ndef callback(id, reason):\n    print(\"The notification {} was closed.\".format(id))\n\nproxy.NotificationClosed.connect(callback)\nloop.run()\n```\n\nRun the service org.example.HelloWorld.\n\n```python\nfrom dasbus.loop import EventLoop\nloop = EventLoop()\n\nfrom dasbus.connection import SessionMessageBus\nbus = SessionMessageBus()\n\nclass HelloWorld(object):\n    __dbus_xml__ = \"\"\"\n    <node>\n        <interface name=\"org.example.HelloWorld\">\n            <method name=\"Hello\">\n                <arg direction=\"in\" name=\"name\" type=\"s\" />\n                <arg direction=\"out\" name=\"return\" type=\"s\" />\n            </method>\n        </interface>\n    </node>\n    \"\"\"\n\n    def Hello(self, name):\n        return \"Hello {}!\".format(name)\n\nbus.publish_object(\"/org/example/HelloWorld\", HelloWorld())\nbus.register_service(\"org.example.HelloWorld\")\nloop.run()\n```\n\n\n## Features\n\nUse constants to define DBus services and objects.\n\n```python\nfrom dasbus.connection import SystemMessageBus\nfrom dasbus.identifier import DBusServiceIdentifier\n\nNETWORK_MANAGER = DBusServiceIdentifier(\n    namespace=(\"org\", \"freedesktop\", \"NetworkManager\"),\n    message_bus=SystemMessageBus()\n)\n\nproxy = NETWORK_MANAGER.get_proxy()\nprint(proxy.NetworkingEnabled)\n```\n\nUse exceptions to propagate and handle DBus errors. Create an error mapper and a decorator for\nmapping Python exception classes to DBus error names. The message bus will use the given error\nmapper to transform Python exceptions to DBus errors and back.\n\n```python\nfrom dasbus.error import ErrorMapper, DBusError, get_error_decorator\nerror_mapper = ErrorMapper()\ndbus_error = get_error_decorator(error_mapper)\n\nfrom dasbus.connection import SessionMessageBus\nbus = SessionMessageBus(error_mapper=error_mapper)\n\n@dbus_error(\"org.freedesktop.DBus.Error.InvalidArgs\")\nclass InvalidArgs(DBusError):\n    pass\n```\n\nCall DBus methods asynchronously.\n\n```python\nfrom dasbus.loop import EventLoop\nloop = EventLoop()\n\ndef callback(call):\n    print(call())\n\nproxy = NETWORK_MANAGER.get_proxy()\nproxy.GetDevices(callback=callback)\nloop.run()\n```\n\nGenerate XML specifications from Python classes.\n\n```python\nfrom dasbus.server.interface import dbus_interface\nfrom dasbus.typing import Str\n\n@dbus_interface(\"org.example.HelloWorld\")\nclass HelloWorld(object):\n\n    def Hello(self, name: Str) -> Str:\n        return \"Hello {}!\".format(name)\n\nprint(HelloWorld.__dbus_xml__)\n```\n\nRepresent DBus structures by Python objects.\n\n```python\nfrom dasbus.structure import DBusData\nfrom dasbus.typing import Str, get_variant\n\nclass UserData(DBusData):\n    def __init__(self):\n        self._name = \"\"\n\n    @property\n    def name(self) -> Str:\n        return self._name\n\n    @name.setter\n    def name(self, name):\n        self._name = name\n\ndata = UserData()\ndata.name = \"Alice\"\n\nprint(UserData.to_structure(data))\nprint(UserData.from_structure({\n    \"name\": get_variant(Str, \"Bob\")\n}))\n```\n\nCreate Python objects that can be published on DBus.\n\n```python\nfrom dasbus.server.interface import dbus_interface\nfrom dasbus.server.template import InterfaceTemplate\nfrom dasbus.server.publishable import Publishable\nfrom dasbus.typing import Str\n\n@dbus_interface(\"org.example.Chat\")\nclass ChatInterface(InterfaceTemplate):\n\n    def Send(self, message: Str):\n        return self.implementation.send()\n\nclass Chat(Publishable):\n\n    def for_publication(self):\n        return ChatInterface(self)\n\n    def send(self, message):\n        print(message) \n\n```\n\nUse DBus containers to publish dynamically created Python objects.\n\n```python\nfrom dasbus.connection import SessionMessageBus\nfrom dasbus.server.container import DBusContainer\n\ncontainer = DBusContainer(\n    namespace=(\"org\", \"example\", \"Chat\"),\n    message_bus=SessionMessageBus()\n)\n\nprint(container.to_object_path(Chat()))\n```\n\n## Inspiration\n\nLook at the [complete examples](https://github.com/rhinstaller/dasbus/tree/master/examples) or\n[DBus services](https://github.com/rhinstaller/anaconda/tree/master/pyanaconda/modules) of\nthe Anaconda Installer for more inspiration.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/rhinstaller/dasbus", "keywords": "dbus glib library", "license": "", "maintainer": "", "maintainer_email": "", "name": "dasbus", "package_url": "https://pypi.org/project/dasbus/", "platform": "", "project_url": "https://pypi.org/project/dasbus/", "project_urls": {"Homepage": "https://github.com/rhinstaller/dasbus"}, "release_url": "https://pypi.org/project/dasbus/1.0/", "requires_dist": null, "requires_python": ">=3.6", "summary": "DBus library in Python 3", "version": "1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>dasbus</h1>\n<p>This DBus library is written in Python 3, based on GLib and inspired by pydbus. Find out more in\nthe <a href=\"https://dasbus.readthedocs.io/en/latest/\" rel=\"nofollow\">documentation</a>.</p>\n<p>The code used to be part of the <a href=\"https://github.com/rhinstaller/anaconda\" rel=\"nofollow\">Anaconda Installer</a>\nproject. It was based on the <a href=\"https://github.com/LEW21/pydbus\" rel=\"nofollow\">pydbus</a> library, but we replaced\nit with our own solution because its upstream development stalled. The dasbus library is\na result of this effort.</p>\n<p><a href=\"https://travis-ci.com/rhinstaller/dasbus\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9bdf235cdd063d95896f4c7d7fe44a059f9f20d3/68747470733a2f2f7472617669732d63692e636f6d2f7268696e7374616c6c65722f6461736275732e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://dasbus.readthedocs.io/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2d3a45d64427bb29c12516d301a6267a8e94a835/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f6461736275732f62616467652f3f76657273696f6e3d6c6174657374\"></a>\n<a href=\"https://codecov.io/gh/rhinstaller/dasbus\" rel=\"nofollow\"><img alt=\"codecov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/13695ac5fa5c97beec25d008aface9dab060cc29/68747470733a2f2f636f6465636f762e696f2f67682f7268696e7374616c6c65722f6461736275732f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a></p>\n<h2>Requirements</h2>\n<ul>\n<li>Python 3.6+</li>\n<li>PyGObject 3</li>\n</ul>\n<p>You can install <a href=\"https://pygobject.readthedocs.io\" rel=\"nofollow\">PyGObject</a> provided by your system or use PyPI.\nThe system package is usually called <code>python3-gi</code>, <code>python3-gobject</code> or <code>pygobject3</code>. See the\n<a href=\"https://pygobject.readthedocs.io/en/latest/getting_started.html\" rel=\"nofollow\">instructions</a> for your platform\n(only for PyGObject, you don't need cairo or GTK).</p>\n<p>The library is known to work with Python 3.8, PyGObject 3.34 and GLib 2.63, but these are not the\nrequired minimal versions.</p>\n<h2>Installation</h2>\n<p>Install the package from <a href=\"https://pypi.org/project/dasbus/\" rel=\"nofollow\">PyPI</a>. Follow the instructions above\nto install the required dependencies.</p>\n<pre><code>pip3 install dasbus\n</code></pre>\n<p>Or install the RPM package on Fedora 31+.</p>\n<pre><code>sudo dnf install python3-dasbus\n</code></pre>\n<h2>Examples</h2>\n<p>Show the current hostname.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">dasbus.connection</span> <span class=\"kn\">import</span> <span class=\"n\">SystemMessageBus</span>\n<span class=\"n\">bus</span> <span class=\"o\">=</span> <span class=\"n\">SystemMessageBus</span><span class=\"p\">()</span>\n\n<span class=\"n\">proxy</span> <span class=\"o\">=</span> <span class=\"n\">bus</span><span class=\"o\">.</span><span class=\"n\">get_proxy</span><span class=\"p\">(</span>\n    <span class=\"s2\">\"org.freedesktop.hostname1\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"/org/freedesktop/hostname1\"</span>\n<span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">proxy</span><span class=\"o\">.</span><span class=\"n\">Hostname</span><span class=\"p\">)</span>\n</pre>\n<p>Send a notification to the notification server.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">dasbus.connection</span> <span class=\"kn\">import</span> <span class=\"n\">SessionMessageBus</span>\n<span class=\"n\">bus</span> <span class=\"o\">=</span> <span class=\"n\">SessionMessageBus</span><span class=\"p\">()</span>\n\n<span class=\"n\">proxy</span> <span class=\"o\">=</span> <span class=\"n\">bus</span><span class=\"o\">.</span><span class=\"n\">get_proxy</span><span class=\"p\">(</span>\n    <span class=\"s2\">\"org.freedesktop.Notifications\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"/org/freedesktop/Notifications\"</span>\n<span class=\"p\">)</span>\n\n<span class=\"nb\">id</span> <span class=\"o\">=</span> <span class=\"n\">proxy</span><span class=\"o\">.</span><span class=\"n\">Notify</span><span class=\"p\">(</span>\n    <span class=\"s2\">\"\"</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s2\">\"face-smile\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Hello World!\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"This notification can be ignored.\"</span><span class=\"p\">,</span>\n    <span class=\"p\">[],</span> <span class=\"p\">{},</span> <span class=\"mi\">0</span>\n<span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"The notification </span><span class=\"si\">{}</span><span class=\"s2\"> was sent.\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"p\">))</span>\n</pre>\n<p>Handle a closed notification.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">dasbus.loop</span> <span class=\"kn\">import</span> <span class=\"n\">EventLoop</span>\n<span class=\"n\">loop</span> <span class=\"o\">=</span> <span class=\"n\">EventLoop</span><span class=\"p\">()</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">dasbus.connection</span> <span class=\"kn\">import</span> <span class=\"n\">SessionMessageBus</span>\n<span class=\"n\">bus</span> <span class=\"o\">=</span> <span class=\"n\">SessionMessageBus</span><span class=\"p\">()</span>\n\n<span class=\"n\">proxy</span> <span class=\"o\">=</span> <span class=\"n\">bus</span><span class=\"o\">.</span><span class=\"n\">get_proxy</span><span class=\"p\">(</span>\n    <span class=\"s2\">\"org.freedesktop.Notifications\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"/org/freedesktop/Notifications\"</span>\n<span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">callback</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"p\">,</span> <span class=\"n\">reason</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"The notification </span><span class=\"si\">{}</span><span class=\"s2\"> was closed.\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"p\">))</span>\n\n<span class=\"n\">proxy</span><span class=\"o\">.</span><span class=\"n\">NotificationClosed</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"n\">callback</span><span class=\"p\">)</span>\n<span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n</pre>\n<p>Run the service org.example.HelloWorld.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">dasbus.loop</span> <span class=\"kn\">import</span> <span class=\"n\">EventLoop</span>\n<span class=\"n\">loop</span> <span class=\"o\">=</span> <span class=\"n\">EventLoop</span><span class=\"p\">()</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">dasbus.connection</span> <span class=\"kn\">import</span> <span class=\"n\">SessionMessageBus</span>\n<span class=\"n\">bus</span> <span class=\"o\">=</span> <span class=\"n\">SessionMessageBus</span><span class=\"p\">()</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">HelloWorld</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"n\">__dbus_xml__</span> <span class=\"o\">=</span> <span class=\"s2\">\"\"\"</span>\n<span class=\"s2\">    &lt;node&gt;</span>\n<span class=\"s2\">        &lt;interface name=\"org.example.HelloWorld\"&gt;</span>\n<span class=\"s2\">            &lt;method name=\"Hello\"&gt;</span>\n<span class=\"s2\">                &lt;arg direction=\"in\" name=\"name\" type=\"s\" /&gt;</span>\n<span class=\"s2\">                &lt;arg direction=\"out\" name=\"return\" type=\"s\" /&gt;</span>\n<span class=\"s2\">            &lt;/method&gt;</span>\n<span class=\"s2\">        &lt;/interface&gt;</span>\n<span class=\"s2\">    &lt;/node&gt;</span>\n<span class=\"s2\">    \"\"\"</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">Hello</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"s2\">\"Hello </span><span class=\"si\">{}</span><span class=\"s2\">!\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span>\n\n<span class=\"n\">bus</span><span class=\"o\">.</span><span class=\"n\">publish_object</span><span class=\"p\">(</span><span class=\"s2\">\"/org/example/HelloWorld\"</span><span class=\"p\">,</span> <span class=\"n\">HelloWorld</span><span class=\"p\">())</span>\n<span class=\"n\">bus</span><span class=\"o\">.</span><span class=\"n\">register_service</span><span class=\"p\">(</span><span class=\"s2\">\"org.example.HelloWorld\"</span><span class=\"p\">)</span>\n<span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n</pre>\n<h2>Features</h2>\n<p>Use constants to define DBus services and objects.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">dasbus.connection</span> <span class=\"kn\">import</span> <span class=\"n\">SystemMessageBus</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dasbus.identifier</span> <span class=\"kn\">import</span> <span class=\"n\">DBusServiceIdentifier</span>\n\n<span class=\"n\">NETWORK_MANAGER</span> <span class=\"o\">=</span> <span class=\"n\">DBusServiceIdentifier</span><span class=\"p\">(</span>\n    <span class=\"n\">namespace</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s2\">\"org\"</span><span class=\"p\">,</span> <span class=\"s2\">\"freedesktop\"</span><span class=\"p\">,</span> <span class=\"s2\">\"NetworkManager\"</span><span class=\"p\">),</span>\n    <span class=\"n\">message_bus</span><span class=\"o\">=</span><span class=\"n\">SystemMessageBus</span><span class=\"p\">()</span>\n<span class=\"p\">)</span>\n\n<span class=\"n\">proxy</span> <span class=\"o\">=</span> <span class=\"n\">NETWORK_MANAGER</span><span class=\"o\">.</span><span class=\"n\">get_proxy</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">proxy</span><span class=\"o\">.</span><span class=\"n\">NetworkingEnabled</span><span class=\"p\">)</span>\n</pre>\n<p>Use exceptions to propagate and handle DBus errors. Create an error mapper and a decorator for\nmapping Python exception classes to DBus error names. The message bus will use the given error\nmapper to transform Python exceptions to DBus errors and back.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">dasbus.error</span> <span class=\"kn\">import</span> <span class=\"n\">ErrorMapper</span><span class=\"p\">,</span> <span class=\"n\">DBusError</span><span class=\"p\">,</span> <span class=\"n\">get_error_decorator</span>\n<span class=\"n\">error_mapper</span> <span class=\"o\">=</span> <span class=\"n\">ErrorMapper</span><span class=\"p\">()</span>\n<span class=\"n\">dbus_error</span> <span class=\"o\">=</span> <span class=\"n\">get_error_decorator</span><span class=\"p\">(</span><span class=\"n\">error_mapper</span><span class=\"p\">)</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">dasbus.connection</span> <span class=\"kn\">import</span> <span class=\"n\">SessionMessageBus</span>\n<span class=\"n\">bus</span> <span class=\"o\">=</span> <span class=\"n\">SessionMessageBus</span><span class=\"p\">(</span><span class=\"n\">error_mapper</span><span class=\"o\">=</span><span class=\"n\">error_mapper</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@dbus_error</span><span class=\"p\">(</span><span class=\"s2\">\"org.freedesktop.DBus.Error.InvalidArgs\"</span><span class=\"p\">)</span>\n<span class=\"k\">class</span> <span class=\"nc\">InvalidArgs</span><span class=\"p\">(</span><span class=\"n\">DBusError</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</pre>\n<p>Call DBus methods asynchronously.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">dasbus.loop</span> <span class=\"kn\">import</span> <span class=\"n\">EventLoop</span>\n<span class=\"n\">loop</span> <span class=\"o\">=</span> <span class=\"n\">EventLoop</span><span class=\"p\">()</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">callback</span><span class=\"p\">(</span><span class=\"n\">call</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">call</span><span class=\"p\">())</span>\n\n<span class=\"n\">proxy</span> <span class=\"o\">=</span> <span class=\"n\">NETWORK_MANAGER</span><span class=\"o\">.</span><span class=\"n\">get_proxy</span><span class=\"p\">()</span>\n<span class=\"n\">proxy</span><span class=\"o\">.</span><span class=\"n\">GetDevices</span><span class=\"p\">(</span><span class=\"n\">callback</span><span class=\"o\">=</span><span class=\"n\">callback</span><span class=\"p\">)</span>\n<span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n</pre>\n<p>Generate XML specifications from Python classes.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">dasbus.server.interface</span> <span class=\"kn\">import</span> <span class=\"n\">dbus_interface</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dasbus.typing</span> <span class=\"kn\">import</span> <span class=\"n\">Str</span>\n\n<span class=\"nd\">@dbus_interface</span><span class=\"p\">(</span><span class=\"s2\">\"org.example.HelloWorld\"</span><span class=\"p\">)</span>\n<span class=\"k\">class</span> <span class=\"nc\">HelloWorld</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">Hello</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"n\">Str</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Str</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"s2\">\"Hello </span><span class=\"si\">{}</span><span class=\"s2\">!\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">HelloWorld</span><span class=\"o\">.</span><span class=\"n\">__dbus_xml__</span><span class=\"p\">)</span>\n</pre>\n<p>Represent DBus structures by Python objects.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">dasbus.structure</span> <span class=\"kn\">import</span> <span class=\"n\">DBusData</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dasbus.typing</span> <span class=\"kn\">import</span> <span class=\"n\">Str</span><span class=\"p\">,</span> <span class=\"n\">get_variant</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">UserData</span><span class=\"p\">(</span><span class=\"n\">DBusData</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_name</span> <span class=\"o\">=</span> <span class=\"s2\">\"\"</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">name</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Str</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_name</span>\n\n    <span class=\"nd\">@name</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">name</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_name</span> <span class=\"o\">=</span> <span class=\"n\">name</span>\n\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">UserData</span><span class=\"p\">()</span>\n<span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s2\">\"Alice\"</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">UserData</span><span class=\"o\">.</span><span class=\"n\">to_structure</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">UserData</span><span class=\"o\">.</span><span class=\"n\">from_structure</span><span class=\"p\">({</span>\n    <span class=\"s2\">\"name\"</span><span class=\"p\">:</span> <span class=\"n\">get_variant</span><span class=\"p\">(</span><span class=\"n\">Str</span><span class=\"p\">,</span> <span class=\"s2\">\"Bob\"</span><span class=\"p\">)</span>\n<span class=\"p\">}))</span>\n</pre>\n<p>Create Python objects that can be published on DBus.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">dasbus.server.interface</span> <span class=\"kn\">import</span> <span class=\"n\">dbus_interface</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dasbus.server.template</span> <span class=\"kn\">import</span> <span class=\"n\">InterfaceTemplate</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dasbus.server.publishable</span> <span class=\"kn\">import</span> <span class=\"n\">Publishable</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dasbus.typing</span> <span class=\"kn\">import</span> <span class=\"n\">Str</span>\n\n<span class=\"nd\">@dbus_interface</span><span class=\"p\">(</span><span class=\"s2\">\"org.example.Chat\"</span><span class=\"p\">)</span>\n<span class=\"k\">class</span> <span class=\"nc\">ChatInterface</span><span class=\"p\">(</span><span class=\"n\">InterfaceTemplate</span><span class=\"p\">):</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">Send</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"p\">:</span> <span class=\"n\">Str</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">implementation</span><span class=\"o\">.</span><span class=\"n\">send</span><span class=\"p\">()</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Chat</span><span class=\"p\">(</span><span class=\"n\">Publishable</span><span class=\"p\">):</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">for_publication</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">ChatInterface</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">send</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"p\">)</span> \n</pre>\n<p>Use DBus containers to publish dynamically created Python objects.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">dasbus.connection</span> <span class=\"kn\">import</span> <span class=\"n\">SessionMessageBus</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dasbus.server.container</span> <span class=\"kn\">import</span> <span class=\"n\">DBusContainer</span>\n\n<span class=\"n\">container</span> <span class=\"o\">=</span> <span class=\"n\">DBusContainer</span><span class=\"p\">(</span>\n    <span class=\"n\">namespace</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s2\">\"org\"</span><span class=\"p\">,</span> <span class=\"s2\">\"example\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Chat\"</span><span class=\"p\">),</span>\n    <span class=\"n\">message_bus</span><span class=\"o\">=</span><span class=\"n\">SessionMessageBus</span><span class=\"p\">()</span>\n<span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">container</span><span class=\"o\">.</span><span class=\"n\">to_object_path</span><span class=\"p\">(</span><span class=\"n\">Chat</span><span class=\"p\">()))</span>\n</pre>\n<h2>Inspiration</h2>\n<p>Look at the <a href=\"https://github.com/rhinstaller/dasbus/tree/master/examples\" rel=\"nofollow\">complete examples</a> or\n<a href=\"https://github.com/rhinstaller/anaconda/tree/master/pyanaconda/modules\" rel=\"nofollow\">DBus services</a> of\nthe Anaconda Installer for more inspiration.</p>\n\n          </div>"}, "last_serial": 7171146, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "ec4381278064914bd92459da22cdcad9", "sha256": "9b354e813626f6ccc8ea762fc64306d4479a556dc3ab5e0870e18d412eec6ecb"}, "downloads": -1, "filename": "dasbus-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "ec4381278064914bd92459da22cdcad9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 53266, "upload_time": "2019-10-30T17:53:55", "upload_time_iso_8601": "2019-10-30T17:53:55.493434Z", "url": "https://files.pythonhosted.org/packages/24/2f/a5fd4b84359fc39f4252f591fbbc8bfd1113b0f6343ea684e8a52b28315c/dasbus-0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a65c614de2a8fb668a3660563cba1365", "sha256": "86a83351190c0c4bea5921f33365642140c156686a6a1f06d419c3a021374bd9"}, "downloads": -1, "filename": "dasbus-0.1.tar.gz", "has_sig": false, "md5_digest": "a65c614de2a8fb668a3660563cba1365", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 36119, "upload_time": "2019-10-30T17:53:58", "upload_time_iso_8601": "2019-10-30T17:53:58.092823Z", "url": "https://files.pythonhosted.org/packages/39/10/6594a3ad92c0cc7411e6ac723577a5d885238a389bda794c91480199b600/dasbus-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "b176a219ef087743d0c39a04b3992c7a", "sha256": "b51f1c83f8c39a1792b038573f84958381019156a7226a43d58305e7fdf5ab8f"}, "downloads": -1, "filename": "dasbus-0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "b176a219ef087743d0c39a04b3992c7a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 54041, "upload_time": "2020-01-13T14:41:34", "upload_time_iso_8601": "2020-01-13T14:41:34.575480Z", "url": "https://files.pythonhosted.org/packages/2c/aa/95af718288370876ed8ef743b32f6756c5c942ae4d21a58ed6674064af08/dasbus-0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "72bb43d8438af1efe2ad771040a00def", "sha256": "62d1961640290a8f67c496444228016d23d04d1ba36c98abcf148ebbfa0c3fc6"}, "downloads": -1, "filename": "dasbus-0.2.tar.gz", "has_sig": false, "md5_digest": "72bb43d8438af1efe2ad771040a00def", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 37278, "upload_time": "2020-01-13T14:41:35", "upload_time_iso_8601": "2020-01-13T14:41:35.930409Z", "url": "https://files.pythonhosted.org/packages/55/54/0cc96f78b40077c1ba299c987fd21df75fd1bd2531b8bf56fabd33e7eea5/dasbus-0.2.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "65ae592bac2f7efc519f6f6994442a90", "sha256": "cf77915bef11511216c0ce04d2b16097b343ac17f8f167e5f5d98477e5165e1e"}, "downloads": -1, "filename": "dasbus-0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "65ae592bac2f7efc519f6f6994442a90", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 56488, "upload_time": "2020-04-02T09:01:15", "upload_time_iso_8601": "2020-04-02T09:01:15.099856Z", "url": "https://files.pythonhosted.org/packages/a2/48/6f9962434f6d239ae5c77459f594c037979b924897580261662a46d6db19/dasbus-0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9f59891ecb08b14bdf05ac9ddd437fd5", "sha256": "68b1b68ae47ba781fbc6834b53182879cd385715774d8f705ae9797a2881f3d2"}, "downloads": -1, "filename": "dasbus-0.3.tar.gz", "has_sig": false, "md5_digest": "9f59891ecb08b14bdf05ac9ddd437fd5", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 40636, "upload_time": "2020-04-02T09:01:16", "upload_time_iso_8601": "2020-04-02T09:01:16.814507Z", "url": "https://files.pythonhosted.org/packages/5b/38/1cca6fc77fff355fe61ff36105b0ca1cc37d21da2f4d7b702beda4852509/dasbus-0.3.tar.gz", "yanked": false}], "0.4": [{"comment_text": "", "digests": {"md5": "4cee6486d72167570dd9913039a73470", "sha256": "bf6eac8e8545eddda15eb6c16ef52f6d789902b1137131606a836f65db6eba5f"}, "downloads": -1, "filename": "dasbus-0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "4cee6486d72167570dd9913039a73470", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 57768, "upload_time": "2020-04-08T10:41:53", "upload_time_iso_8601": "2020-04-08T10:41:53.845602Z", "url": "https://files.pythonhosted.org/packages/d1/49/cfd89573dffbf9a5b3943d40c9100f45f85e8e22bbb8389e02dc5f655f96/dasbus-0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1822d0483b6a32459db79101d3603e29", "sha256": "e6768b3b6b282d86fbd2faa28a9f1d3c91ae58ef469975294fee07dddde4aa4c"}, "downloads": -1, "filename": "dasbus-0.4.tar.gz", "has_sig": false, "md5_digest": "1822d0483b6a32459db79101d3603e29", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 41804, "upload_time": "2020-04-08T10:41:55", "upload_time_iso_8601": "2020-04-08T10:41:55.719885Z", "url": "https://files.pythonhosted.org/packages/77/4e/16566315257f43516cbe48e800d942ecce380a562b846f26eea74ffe77f4/dasbus-0.4.tar.gz", "yanked": false}], "1.0": [{"comment_text": "", "digests": {"md5": "5c902e4f1a983f135ccba4158d272a98", "sha256": "adb9a93b609853f6449f7b57029ea88559767fbfbcf69ee9bf408f5a5cde9b29"}, "downloads": -1, "filename": "dasbus-1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "5c902e4f1a983f135ccba4158d272a98", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 58197, "upload_time": "2020-05-05T10:48:12", "upload_time_iso_8601": "2020-05-05T10:48:12.050510Z", "url": "https://files.pythonhosted.org/packages/1d/af/7e850aa42dd488148fdaf76abf0bea923cb63b291d480d77092314f18795/dasbus-1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4969595b371fb187ccc4e007afdfa91b", "sha256": "83f7f755424143745ad1b6c8807b0974946825ab6722c5bf60683a3a03dde22a"}, "downloads": -1, "filename": "dasbus-1.0.tar.gz", "has_sig": false, "md5_digest": "4969595b371fb187ccc4e007afdfa91b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 42414, "upload_time": "2020-05-05T10:48:14", "upload_time_iso_8601": "2020-05-05T10:48:14.334354Z", "url": "https://files.pythonhosted.org/packages/be/bf/8826ff6298ff576a53c8c68c2eea743708a29f9412e1631f3506beb74c16/dasbus-1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "5c902e4f1a983f135ccba4158d272a98", "sha256": "adb9a93b609853f6449f7b57029ea88559767fbfbcf69ee9bf408f5a5cde9b29"}, "downloads": -1, "filename": "dasbus-1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "5c902e4f1a983f135ccba4158d272a98", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 58197, "upload_time": "2020-05-05T10:48:12", "upload_time_iso_8601": "2020-05-05T10:48:12.050510Z", "url": "https://files.pythonhosted.org/packages/1d/af/7e850aa42dd488148fdaf76abf0bea923cb63b291d480d77092314f18795/dasbus-1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4969595b371fb187ccc4e007afdfa91b", "sha256": "83f7f755424143745ad1b6c8807b0974946825ab6722c5bf60683a3a03dde22a"}, "downloads": -1, "filename": "dasbus-1.0.tar.gz", "has_sig": false, "md5_digest": "4969595b371fb187ccc4e007afdfa91b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 42414, "upload_time": "2020-05-05T10:48:14", "upload_time_iso_8601": "2020-05-05T10:48:14.334354Z", "url": "https://files.pythonhosted.org/packages/be/bf/8826ff6298ff576a53c8c68c2eea743708a29f9412e1631f3506beb74c16/dasbus-1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:40:38 2020"}