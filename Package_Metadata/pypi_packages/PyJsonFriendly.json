{"info": {"author": "Mohammad Abouali", "author_email": "maboualidev@gmail.com", "bugtrack_url": null, "classifiers": ["Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# PyJsonFriendly\n\nPyJsonFriend facilitates conversion of custom made classes to JSON String using json.dumps\n\n\n## Examples\n### Example 1: Failing Example\nLet's say you have the following class:\n```python\nclass NotJsonFriendly:\n    def __init__(self, field1, field2):\n        self._field1 = field1\n        self._field2 = field2\n```\n\nNow if you create an object of type ``NotJsonFriendly`` and try to make a JSON string out\nof it by passing it to ``json.dumps``, you would get a ``TypeError``:\n\n```commandline\n>>> o = NotJsonFriendly(1, 2)\n>>> json.dumps(o)\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \".../lib/python3.7/json/__init__.py\", line 231, in dumps\n    return _default_encoder.encode(obj)\n  File \".../lib/python3.7/json/encoder.py\", line 199, in encode\n    chunks = self.iterencode(o, _one_shot=True)\n  File \".../lib/python3.7/json/encoder.py\", line 257, in iterencode\n    return _iterencode(o, 0)\n  File \".../lib/python3.7/json/encoder.py\", line 179, in default\n    raise TypeError(f'Object of type {o.__class__.__name__} '\nTypeError: Object of type NotJsonFriendly is not JSON serializable\n\n```\n\n### Example 2: Deriving from ``JsonFriendly``\nWhile implementing your class, you could add ``JsonFriendly`` as one of the basis. In another words, if \nyour custom build object/class extends ``JsonFriendly``, then you could pass your object to ``json.dumps``. \nLet's say we have the following class:\n\n```python\nfrom PyJsonFriendly import JsonFriendly\nclass DerivedJsonFriendly(JsonFriendly):\n    def __init__(self, field1, field2):\n        self._field1 = field1\n        self._field2 = field2\n\n    # You would need to add the following method\n    def _as_json_friendly_obj(self):\n        return {\"field1\": self._field1, \"field2\": self._field2}\n```\n\n``JsonFriendly`` is an abstract class, which has only one abstract method called: ``_as_json_friendly_obj``.\nTherefore, you wold need to implement this method as part of your class. Forgetting to do that you would get\nan error or you are required to declare your class an abstract class as well. You could not instantiate an\nobject from an abstract class. Extending your classes from ``JsonFriendly`` is the recommended way,\nbecause it prevents you from accidentally forgetting to implement the required method mentioned above, or\nimplementing it with wrong name.\n\nHere is an example of using the above class which is json friendly:\n\n```commandline\n>>> o = DerivedJsonFriendly(3,4)\n>>> json.dumps(o)\n'{\"field1\": 3, \"field2\": 4}'\n```\n\n### Example 3: Not Deriving from ``JsonFriendly`` but not failing ``json.dumps``\nif you have already imported ``JsonFriendly`` in your code, then any object containing \n``as_json_friendly_obj`` method will work properly with ``json.dumps``. Here is an example:\n\n```python\nclass NonDerivedJsonFriendly:\n    def __init__(self, field1, field2):\n        self._field1 = field1\n        self._field2 = field2\n\n    def _as_json_friendly_obj(self):\n        return {\"field1\": self._field1, \"field2\": self._field2}\n\n```\n\nNow if you use an object of this class you will get:\n\n```commandline\n>>> o = NonDerivedJsonFriendly(5, 6)\n\n\n>>> # The following command would fail because we have not yet imported JsonFriendly\n... json.dumps(o)  \nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"/Users/mabouali/miniconda3/envs/PyJsonFriendly/lib/python3.7/json/__init__.py\", line 231, in dumps\n    return _default_encoder.encode(obj)\n  File \"/Users/mabouali/miniconda3/envs/PyJsonFriendly/lib/python3.7/json/encoder.py\", line 199, in encode\n    chunks = self.iterencode(o, _one_shot=True)\n  File \"/Users/mabouali/miniconda3/envs/PyJsonFriendly/lib/python3.7/json/encoder.py\", line 257, in iterencode\n    return _iterencode(o, 0)\n  File \"/Users/mabouali/miniconda3/envs/PyJsonFriendly/lib/python3.7/json/encoder.py\", line 179, in default\n    raise TypeError(f'Object of type {o.__class__.__name__} '\nTypeError: Object of type NonDerivedJsonFriendly is not JSON serializable\n\n\n>>> from PyJsonFriendly import JsonFriendly\n>>> # However, the following command will work just fine; because we have imported the JsonFriendly\n... json.dumps(o)  \n'{\"field1\": 5, \"field2\": 6}'\n```\n\nAlthough, this would work, however, you are not prompted/notified to implement ``_as_json_friendly_obj``\nin your class. And if you forget to implement that function then passing your object to ``json.dumps``\nwill lead to raising a ``TypeError`` exception. Also you could not use the ``isinstance`` method to \nsuccessfully check if you could pass your object to ``json.dumps``:\n\n```commandline\n>>> o1 = DerivedJsonFriendly(3, 4)\n>>> o2 = NonDerivedJsonFriendly(5, 6)\n>>> isinstance(o1,PyJsonFriendly)\nTrue\n>>> isinstance(o2,PyJsonFriendly)\nFalse\n```\n\nAlthough, you could still use ``hasattr`` method, but this is not so appealing:\n\n```commandline\n>>> hasattr(o1, \"_as_json_friendly_obj\")\nTrue\n>>> hasattr(o2, \"_as_json_friendly_obj\")\nTrue\n```\n\n### Example 4: Making objects ``JsonFriendly`` during the runtime\nWhat if you are not the author of the object; however, you want to make them ``JsonFriendly``? Python allows\nyou to amend the class definition during the runtime. Check the following example:\n\n\n```commandline\n>>> from PyJsonFriendly import JsonFriendly\n>>> o = NotJsonFriendly(7, 8)\n>>> # Any Attempt to use json.dumps(o) will fail. Because o is not JsonFriendly and\n... # does not implement _as_json_friendly_obj\n... # Let's modify the object though during the runtime:\n... o.__class__._as_json_friendly_obj = lambda _: {\"field1\": _._field1, \"field2\": _._field2}\n>>> json.dumps(o)\n'{\"field1\": 7, \"field2\": 8}'\n```\n\n### Example 5: ``_as_json_friendly_obj`` does not need to return a dictionary\nNote that ``_as_json_friendly_obj`` does not need to return a dictionary. You could return anything that\npython's ``json`` accepts. For a table showing the objects that are accepted by ``json`` package by default\nclick [here](https://docs.python.org/3/library/json.html#json.JSONEncoder). The following is an example:\n\n```python\nfrom PyJsonFriendly import JsonFriendly\nclass JsonFriendlyNoneDictOutput(JsonFriendly):\n    def __init__(self, field1, field2):\n        self._field1 = field1\n        self._field2 = field2\n\n    def _as_json_friendly_obj(self):\n        return [self._field1, self._field2]\n```\n\nThis would also work as follows:\n\n```commandline\n>>> o = JsonFriendlyNoneDictOutput(9, 10)\n>>> json.dumps(o)\n'[9, 10]'\n```\n\n## Bonuses \n### JSON Friendly Numpy NDArray\nCalling ``json.dumps`` on a ``numpy.ndarray`` would result into failure. \n\n```commandline\n>>> np_arr = np.asarray([1, 2, 3, 4])\n>>> json.dumps(np_arr)\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"E:\\ProgramData\\Anaconda3\\envs\\PyJsonFriendly\\lib\\json\\__init__.py\", line 231, in dumps\n    return _default_encoder.encode(obj)\n  File \"E:\\ProgramData\\Anaconda3\\envs\\PyJsonFriendly\\lib\\json\\encoder.py\", line 199, in encode\n    chunks = self.iterencode(o, _one_shot=True)\n  File \"E:\\ProgramData\\Anaconda3\\envs\\PyJsonFriendly\\lib\\json\\encoder.py\", line 257, in iterencode\n    return _iterencode(o, 0)\n  File \"E:\\ProgramData\\Anaconda3\\envs\\PyJsonFriendly\\lib\\json\\encoder.py\", line 179, in default\n    raise TypeError(f'Object of type {o.__class__.__name__} '\nTypeError: Object of type ndarray is not JSON serializable\n```\n\nIf for whatever reason, you are interested to turn your ``numpy.ndarray`` into a json friendly,\nall you need to do is import ``PyJsonFriendly.JsonFriendlyNumpyNDArray``, as follow:\n\n```commandline\nimport PyJsonFriendly.JsonFriendlyNumpyNDArray\n>>> json.dumps(np_arr)\n'{\"type\": \"np.ndarray\", \"dtype\": \"int32\", \"shape\": [4], \"size\": 4, \"data\": [1, 2, 3, 4]}'\n\n\n>>> np_arr = np_arr.reshape((2,2))\n>>> json.dumps(np_arr)\n'{\"type\": \"np.ndarray\", \"dtype\": \"int32\", \"shape\": [2, 2], \"size\": 4, \"data\": [[1, 2], [3, 4]]}'\n```\n\n\n\n\n\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/maboualidev/PyJsonFriendly", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "PyJsonFriendly", "package_url": "https://pypi.org/project/PyJsonFriendly/", "platform": "", "project_url": "https://pypi.org/project/PyJsonFriendly/", "project_urls": {"Homepage": "https://github.com/maboualidev/PyJsonFriendly"}, "release_url": "https://pypi.org/project/PyJsonFriendly/19.11.0/", "requires_dist": null, "requires_python": ">=3.7", "summary": "", "version": "19.11.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>PyJsonFriendly</h1>\n<p>PyJsonFriend facilitates conversion of custom made classes to JSON String using json.dumps</p>\n<h2>Examples</h2>\n<h3>Example 1: Failing Example</h3>\n<p>Let's say you have the following class:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">NotJsonFriendly</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">field1</span><span class=\"p\">,</span> <span class=\"n\">field2</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_field1</span> <span class=\"o\">=</span> <span class=\"n\">field1</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_field2</span> <span class=\"o\">=</span> <span class=\"n\">field2</span>\n</pre>\n<p>Now if you create an object of type <code>NotJsonFriendly</code> and try to make a JSON string out\nof it by passing it to <code>json.dumps</code>, you would get a <code>TypeError</code>:</p>\n<pre>&gt;&gt;&gt; o = NotJsonFriendly(1, 2)\n&gt;&gt;&gt; json.dumps(o)\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\n  File \".../lib/python3.7/json/__init__.py\", line 231, in dumps\n    return _default_encoder.encode(obj)\n  File \".../lib/python3.7/json/encoder.py\", line 199, in encode\n    chunks = self.iterencode(o, _one_shot=True)\n  File \".../lib/python3.7/json/encoder.py\", line 257, in iterencode\n    return _iterencode(o, 0)\n  File \".../lib/python3.7/json/encoder.py\", line 179, in default\n    raise TypeError(f'Object of type {o.__class__.__name__} '\nTypeError: Object of type NotJsonFriendly is not JSON serializable\n</pre>\n<h3>Example 2: Deriving from <code>JsonFriendly</code></h3>\n<p>While implementing your class, you could add <code>JsonFriendly</code> as one of the basis. In another words, if\nyour custom build object/class extends <code>JsonFriendly</code>, then you could pass your object to <code>json.dumps</code>.\nLet's say we have the following class:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">PyJsonFriendly</span> <span class=\"kn\">import</span> <span class=\"n\">JsonFriendly</span>\n<span class=\"k\">class</span> <span class=\"nc\">DerivedJsonFriendly</span><span class=\"p\">(</span><span class=\"n\">JsonFriendly</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">field1</span><span class=\"p\">,</span> <span class=\"n\">field2</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_field1</span> <span class=\"o\">=</span> <span class=\"n\">field1</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_field2</span> <span class=\"o\">=</span> <span class=\"n\">field2</span>\n\n    <span class=\"c1\"># You would need to add the following method</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_as_json_friendly_obj</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"s2\">\"field1\"</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_field1</span><span class=\"p\">,</span> <span class=\"s2\">\"field2\"</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_field2</span><span class=\"p\">}</span>\n</pre>\n<p><code>JsonFriendly</code> is an abstract class, which has only one abstract method called: <code>_as_json_friendly_obj</code>.\nTherefore, you wold need to implement this method as part of your class. Forgetting to do that you would get\nan error or you are required to declare your class an abstract class as well. You could not instantiate an\nobject from an abstract class. Extending your classes from <code>JsonFriendly</code> is the recommended way,\nbecause it prevents you from accidentally forgetting to implement the required method mentioned above, or\nimplementing it with wrong name.</p>\n<p>Here is an example of using the above class which is json friendly:</p>\n<pre>&gt;&gt;&gt; o = DerivedJsonFriendly(3,4)\n&gt;&gt;&gt; json.dumps(o)\n'{\"field1\": 3, \"field2\": 4}'\n</pre>\n<h3>Example 3: Not Deriving from <code>JsonFriendly</code> but not failing <code>json.dumps</code></h3>\n<p>if you have already imported <code>JsonFriendly</code> in your code, then any object containing\n<code>as_json_friendly_obj</code> method will work properly with <code>json.dumps</code>. Here is an example:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">NonDerivedJsonFriendly</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">field1</span><span class=\"p\">,</span> <span class=\"n\">field2</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_field1</span> <span class=\"o\">=</span> <span class=\"n\">field1</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_field2</span> <span class=\"o\">=</span> <span class=\"n\">field2</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_as_json_friendly_obj</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"s2\">\"field1\"</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_field1</span><span class=\"p\">,</span> <span class=\"s2\">\"field2\"</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_field2</span><span class=\"p\">}</span>\n</pre>\n<p>Now if you use an object of this class you will get:</p>\n<pre>&gt;&gt;&gt; o = NonDerivedJsonFriendly(5, 6)\n\n\n&gt;&gt;&gt; # The following command would fail because we have not yet imported JsonFriendly\n... json.dumps(o)  \nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\n  File \"/Users/mabouali/miniconda3/envs/PyJsonFriendly/lib/python3.7/json/__init__.py\", line 231, in dumps\n    return _default_encoder.encode(obj)\n  File \"/Users/mabouali/miniconda3/envs/PyJsonFriendly/lib/python3.7/json/encoder.py\", line 199, in encode\n    chunks = self.iterencode(o, _one_shot=True)\n  File \"/Users/mabouali/miniconda3/envs/PyJsonFriendly/lib/python3.7/json/encoder.py\", line 257, in iterencode\n    return _iterencode(o, 0)\n  File \"/Users/mabouali/miniconda3/envs/PyJsonFriendly/lib/python3.7/json/encoder.py\", line 179, in default\n    raise TypeError(f'Object of type {o.__class__.__name__} '\nTypeError: Object of type NonDerivedJsonFriendly is not JSON serializable\n\n\n&gt;&gt;&gt; from PyJsonFriendly import JsonFriendly\n&gt;&gt;&gt; # However, the following command will work just fine; because we have imported the JsonFriendly\n... json.dumps(o)  \n'{\"field1\": 5, \"field2\": 6}'\n</pre>\n<p>Although, this would work, however, you are not prompted/notified to implement <code>_as_json_friendly_obj</code>\nin your class. And if you forget to implement that function then passing your object to <code>json.dumps</code>\nwill lead to raising a <code>TypeError</code> exception. Also you could not use the <code>isinstance</code> method to\nsuccessfully check if you could pass your object to <code>json.dumps</code>:</p>\n<pre>&gt;&gt;&gt; o1 = DerivedJsonFriendly(3, 4)\n&gt;&gt;&gt; o2 = NonDerivedJsonFriendly(5, 6)\n&gt;&gt;&gt; isinstance(o1,PyJsonFriendly)\nTrue\n&gt;&gt;&gt; isinstance(o2,PyJsonFriendly)\nFalse\n</pre>\n<p>Although, you could still use <code>hasattr</code> method, but this is not so appealing:</p>\n<pre>&gt;&gt;&gt; hasattr(o1, \"_as_json_friendly_obj\")\nTrue\n&gt;&gt;&gt; hasattr(o2, \"_as_json_friendly_obj\")\nTrue\n</pre>\n<h3>Example 4: Making objects <code>JsonFriendly</code> during the runtime</h3>\n<p>What if you are not the author of the object; however, you want to make them <code>JsonFriendly</code>? Python allows\nyou to amend the class definition during the runtime. Check the following example:</p>\n<pre>&gt;&gt;&gt; from PyJsonFriendly import JsonFriendly\n&gt;&gt;&gt; o = NotJsonFriendly(7, 8)\n&gt;&gt;&gt; # Any Attempt to use json.dumps(o) will fail. Because o is not JsonFriendly and\n... # does not implement _as_json_friendly_obj\n... # Let's modify the object though during the runtime:\n... o.__class__._as_json_friendly_obj = lambda _: {\"field1\": _._field1, \"field2\": _._field2}\n&gt;&gt;&gt; json.dumps(o)\n'{\"field1\": 7, \"field2\": 8}'\n</pre>\n<h3>Example 5: <code>_as_json_friendly_obj</code> does not need to return a dictionary</h3>\n<p>Note that <code>_as_json_friendly_obj</code> does not need to return a dictionary. You could return anything that\npython's <code>json</code> accepts. For a table showing the objects that are accepted by <code>json</code> package by default\nclick <a href=\"https://docs.python.org/3/library/json.html#json.JSONEncoder\" rel=\"nofollow\">here</a>. The following is an example:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">PyJsonFriendly</span> <span class=\"kn\">import</span> <span class=\"n\">JsonFriendly</span>\n<span class=\"k\">class</span> <span class=\"nc\">JsonFriendlyNoneDictOutput</span><span class=\"p\">(</span><span class=\"n\">JsonFriendly</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">field1</span><span class=\"p\">,</span> <span class=\"n\">field2</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_field1</span> <span class=\"o\">=</span> <span class=\"n\">field1</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_field2</span> <span class=\"o\">=</span> <span class=\"n\">field2</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_as_json_friendly_obj</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_field1</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_field2</span><span class=\"p\">]</span>\n</pre>\n<p>This would also work as follows:</p>\n<pre>&gt;&gt;&gt; o = JsonFriendlyNoneDictOutput(9, 10)\n&gt;&gt;&gt; json.dumps(o)\n'[9, 10]'\n</pre>\n<h2>Bonuses</h2>\n<h3>JSON Friendly Numpy NDArray</h3>\n<p>Calling <code>json.dumps</code> on a <code>numpy.ndarray</code> would result into failure.</p>\n<pre>&gt;&gt;&gt; np_arr = np.asarray([1, 2, 3, 4])\n&gt;&gt;&gt; json.dumps(np_arr)\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\n  File \"E:\\ProgramData\\Anaconda3\\envs\\PyJsonFriendly\\lib\\json\\__init__.py\", line 231, in dumps\n    return _default_encoder.encode(obj)\n  File \"E:\\ProgramData\\Anaconda3\\envs\\PyJsonFriendly\\lib\\json\\encoder.py\", line 199, in encode\n    chunks = self.iterencode(o, _one_shot=True)\n  File \"E:\\ProgramData\\Anaconda3\\envs\\PyJsonFriendly\\lib\\json\\encoder.py\", line 257, in iterencode\n    return _iterencode(o, 0)\n  File \"E:\\ProgramData\\Anaconda3\\envs\\PyJsonFriendly\\lib\\json\\encoder.py\", line 179, in default\n    raise TypeError(f'Object of type {o.__class__.__name__} '\nTypeError: Object of type ndarray is not JSON serializable\n</pre>\n<p>If for whatever reason, you are interested to turn your <code>numpy.ndarray</code> into a json friendly,\nall you need to do is import <code>PyJsonFriendly.JsonFriendlyNumpyNDArray</code>, as follow:</p>\n<pre>import PyJsonFriendly.JsonFriendlyNumpyNDArray\n&gt;&gt;&gt; json.dumps(np_arr)\n'{\"type\": \"np.ndarray\", \"dtype\": \"int32\", \"shape\": [4], \"size\": 4, \"data\": [1, 2, 3, 4]}'\n\n\n&gt;&gt;&gt; np_arr = np_arr.reshape((2,2))\n&gt;&gt;&gt; json.dumps(np_arr)\n'{\"type\": \"np.ndarray\", \"dtype\": \"int32\", \"shape\": [2, 2], \"size\": 4, \"data\": [[1, 2], [3, 4]]}'\n</pre>\n\n          </div>"}, "last_serial": 6067288, "releases": {"19.11.0": [{"comment_text": "", "digests": {"md5": "10c1ef07a95a765cf28f69f86d2a8b09", "sha256": "c56ada4eba173a510e14bb884c8464e92a013f27411261af33c514a5fb4bb97a"}, "downloads": -1, "filename": "PyJsonFriendly-19.11.0-py3-none-any.whl", "has_sig": false, "md5_digest": "10c1ef07a95a765cf28f69f86d2a8b09", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 10671, "upload_time": "2019-11-02T06:37:57", "upload_time_iso_8601": "2019-11-02T06:37:57.938172Z", "url": "https://files.pythonhosted.org/packages/78/78/90c3cfc495ecc43a4e45048ef5a5e2de4e572e128b19382445ae167a557a/PyJsonFriendly-19.11.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e02ffb9cfefda4b99e6927504c324b4d", "sha256": "595030f5583afe5b94bc1f6cea28c8a167eca034aff1025bf9b2a892e0712de9"}, "downloads": -1, "filename": "PyJsonFriendly-19.11.0.tar.gz", "has_sig": false, "md5_digest": "e02ffb9cfefda4b99e6927504c324b4d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 5038, "upload_time": "2019-11-02T06:38:00", "upload_time_iso_8601": "2019-11-02T06:38:00.207142Z", "url": "https://files.pythonhosted.org/packages/7a/17/797780be95cc9052a1b471620e32778b1fe747cc64ba76aa291f29215a04/PyJsonFriendly-19.11.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "10c1ef07a95a765cf28f69f86d2a8b09", "sha256": "c56ada4eba173a510e14bb884c8464e92a013f27411261af33c514a5fb4bb97a"}, "downloads": -1, "filename": "PyJsonFriendly-19.11.0-py3-none-any.whl", "has_sig": false, "md5_digest": "10c1ef07a95a765cf28f69f86d2a8b09", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 10671, "upload_time": "2019-11-02T06:37:57", "upload_time_iso_8601": "2019-11-02T06:37:57.938172Z", "url": "https://files.pythonhosted.org/packages/78/78/90c3cfc495ecc43a4e45048ef5a5e2de4e572e128b19382445ae167a557a/PyJsonFriendly-19.11.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e02ffb9cfefda4b99e6927504c324b4d", "sha256": "595030f5583afe5b94bc1f6cea28c8a167eca034aff1025bf9b2a892e0712de9"}, "downloads": -1, "filename": "PyJsonFriendly-19.11.0.tar.gz", "has_sig": false, "md5_digest": "e02ffb9cfefda4b99e6927504c324b4d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 5038, "upload_time": "2019-11-02T06:38:00", "upload_time_iso_8601": "2019-11-02T06:38:00.207142Z", "url": "https://files.pythonhosted.org/packages/7a/17/797780be95cc9052a1b471620e32778b1fe747cc64ba76aa291f29215a04/PyJsonFriendly-19.11.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:03:42 2020"}