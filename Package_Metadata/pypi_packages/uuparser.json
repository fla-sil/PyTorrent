{"info": {"author": "Uppsala NLP group", "author_email": "miryam.de_lhoneux@lingfil.uu.se", "bugtrack_url": null, "classifiers": [], "description": "# UUParser: A transition-based dependency parser for Universal Dependencies\n\nThis parser is based on [Eli Kiperwasser's transition-based parser](http://github.com/elikip/bist-parser) using BiLSTM feature extractors.\nWe adapted the parser to Universal Dependencies and extended it as described in these papers:\n\n* (Version 1.0) Adaptation to UD + removed POS tags from the input + added character vectors + use pseudo-projective:\n>Miryam de Lhoneux, Yan Shao, Ali Basirat, Eliyahu Kiperwasser, Sara Stymne, Yoav Goldberg, and Joakim Nivre. 2017. From Raw Text to Universal Dependencies - Look, No Tags! In Proceedings of the CoNLL 2017 Shared Task: Multilingual Parsing from Raw Text to Universal Dependencies.\n\n* (Version 2.0) Removed the need for pseudo-projective parsing by using a swap transition and creating a partially dynamic oracle as described in:\n>Miryam de Lhoneux, Sara Stymne and Joakim Nivre. 2017. Arc-Hybrid Non-Projective Dependency Parsing with a Static-Dynamic Oracle. In Proceedings of the The 15th International Conference on Parsing Technologies (IWPT).\n\n* (Version 2.3) Added POS tags back in, extended cross-treebank functionality and use of external embeddings and some tuning of default hyperparameters:\n\n>Aaron Smith, Bernd Bohnet, Miryam de Lhoneux, Joakim Nivre, Yan Shao and Sara Stymne. 2018. 82 Treebanks, 34 Models: Universal Dependency Parsing with Cross-Treebank Models. In Proceedings of the CoNLL 2018 Shared Task: Multilingual Parsing from Raw Text to Universal Dependencies.\n\nThe techniques behind the original parser are described in the paper [Simple and Accurate Dependency Parsing Using Bidirectional LSTM Feature Representations](https://www.transacl.org/ojs/index.php/tacl/article/viewFile/885/198).\n\n#### Required software\n\n * Python 3 (/!\\ recent move from python 2.7 which was used for all releases).\n * [DyNet library](https://github.com/clab/dynet/tree/master/python)\n\n    Note: the current version is Dynet 2.0 but Dynet 1.0 was used in both releases 1.0 and 2.0\n\n### Installation\n\n- (Python > 3.7 only) install [Cython](https://cython.org/) first in order to be able to install [DyNet](https://github.com/clab/dynet)\n\n  ```console\n  pip install cython\n  ```\n\n- Install with pip\n\n  ```console\n  pip install uuparser\n  ```\n\nAlternatively you can install directly from the master branch with `pip install git+https://github.com/UppsalaNLP/uuparser`.\n\n#### Train a parsing model\n\nTo train a set of parsing models for a set of treebanks:\n\n```console\nuuparser --outdir [results directory] --datadir [directory of UD files with the structure UD\\_\\*\\*/iso\\_id-ud-train/dev.conllu] --include [treebanks to include denoted by their ISO id]\n```\n\n#### Options\n\nThe parser has numerous options to allow you to fine-control its behaviour. For a full list, type:\n\n```console\nuuparser --help\n```\n\nWe recommend you set the --dynet-mem option to a larger number when running the full training procedure on larger treebanks.\nCommonly used values are 5000 and 10000 (in MB).\n\nNote that due to random initialization and other non-deterministic elements in the training process, you will not obtain the same results even when training twice under exactly the same circumstances (e.g. languages, number of epochs etc.).\nTo ensure identical results between two runs, we recommend setting the --dynet-seed option to the same value both times (e.g. --dynet-seed 123456789).\nThis ensures that Python's random number generator and Dynet both produce the same sequence of random numbers.\n\n#### Example\n\nThe following is a typical command for training separate models for UD_Swedish, UD_Russian, and UD_English:\n\n```console\nuuparser --outdir my_output --datadir ud-treebanks-v2.0 --include \"sv_talbanken en_partut ru_syntagrus\" --dynet-seed 123456789 --dynet-mem 10000\n```\n\nThe output files will be created in my_output/sv_talbanken, my_output/ru_syntagrus, and my_output/en_partut.\nThis command assumes that the directory UD_Swedish exists in ud-treebanks-v2.0 and contains at least the file sv-ud-train.conllu (and the same for the other two languages).\nIf dev data is also found (sv-ud-dev.conllu), model selection will be performed by default by parsing the dev data at each epoch and choosing the model from the epoch with the highest LAS.\n\n#### Parse data with your parsing model\n\n```console\nuuparser --predict --outdir [results directory] --datadir [directory of UD files with the structure UD\\_\\*\\*/iso\\_id-ud-train/dev.conllu] --include [treebanks to include denoted by their ISO id]\n```\n\nBy default this will parse the dev data for the specified languages with the model files (by default barchybrid.model) found in treebank-specific subdirectories of outdir.\nNote that if you don't want to use the same directory for model files and output files, you can specify the --modeldir explictly.\nBy default, is it assumed that --modeldir is the same as --outdir.\n\n#### Multi-treebank models\n\nAn important feature of the parser is the ability to train cross-treebank models by adding a treebank embedding.\nInformation about this technique is detailed in:\n\n>Sara Stymne, Miryam de Lhoneux, Aaron Smith, Joakim Nivre. 2018. Parser Training with Heterogeneous Treebanks. In Proceedings of ACL.\n\nTo train a multi-treebank model, simply add the --multiling flag at both training and test time.\nThe output model files will be stored by default directly in the specified output directory rather than in treebank-specific subdirectories.\n\n#### Using ELMo continous word embeddings\n\nUUParser supports ELMo embeddings as an input to the LSTM. \nSpecify a HDF5 file containing the layers for each word using the `--elmo` options.\nThe file must contain all sentences from a treebank and be tokenized according\nto the gold segmentation. Additionally, UUParser expects all three layers to be present\n as the task-specific weights are learned during training.\n\nThe weights for the English treebanks EWT, GUM, and LinES can be downloaded [here](https://www.dropbox.com/sh/kyaq2mt07qpbtxt/AACD6LsEJrqgaURaAZ-fvHpoa?dl=0).\n\nYou can also specify the gamma scalar using `--elmo_gamma` or set `--elmo_learn_gamma`\nto learn the value during training.\n\nCredits to Johannes Gontrum for this addition.\nCredits to Giuseppe Attardi for porting the parser to python 3.\n\n#### Citation\n\nIf you make use of this software for research purposes, we'll appreciate if you cite the following:\n\nIf you use version 2.0 or later:\n\n    @InProceedings{delhoneux17arc,\n        author    = {Miryam de Lhoneux and Sara Stymne and Joakim Nivre},\n        title     = {Arc-Hybrid Non-Projective Dependency Parsing with a Static-Dynamic Oracle},\n        booktitle = {Proceedings of the The 15th International Conference on Parsing Technologies (IWPT).},\n        year      = {2017},\n        address = {Pisa, Italy}\n    }\n\nIf you use version 1.0:\n\n    @InProceedings{uu-conll17,\n        author    = {Miryam de Lhoneux and Yan Shao and Ali Basirat and Eliyahu Kiperwasser and Sara Stymne and Yoav Goldberg and Joakim Nivre},\n        title     = {From Raw Text to Universal Dependencies -- Look, No Tags!},\n        booktitle = {Proceedings of the CoNLL 2017 Shared Task: Multilingual Parsing from Raw Text to Universal Dependencies. },\n        year      = {2017},\n        address = {Vancouver, Canada}\n    }\n\nAnd the original parser paper:\n\n    @article{DBLP:journals/tacl/KiperwasserG16,\n        author    = {Eliyahu Kiperwasser and Yoav Goldberg},\n        title     = {Simple and Accurate Dependency Parsing Using Bidirectional {LSTM}\n               Feature Representations},\n        journal   = {{TACL}},\n        volume    = {4},\n        pages     = {313--327},\n        year      = {2016},\n        url       = {https://transacl.org/ojs/index.php/tacl/article/view/885},\n        timestamp = {Tue, 09 Aug 2016 14:51:09 +0200},\n        biburl    = {http://dblp.uni-trier.de/rec/bib/journals/tacl/KiperwasserG16},\n        bibsource = {dblp computer science bibliography, http://dblp.org}\n    }\n\n#### License\n\nThis software is released under the terms of the [Apache License, Version 2.0](http://www.apache.org/licenses/LICENSE-2.0).\n\n#### Contact\n\nFor questions and usage issues, please contact miryam.de\\_lhoneux@lingfil.uu.se\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "nlp,parsing", "license": "Apache", "maintainer": "", "maintainer_email": "", "name": "uuparser", "package_url": "https://pypi.org/project/uuparser/", "platform": "", "project_url": "https://pypi.org/project/uuparser/", "project_urls": null, "release_url": "https://pypi.org/project/uuparser/2.3/", "requires_dist": ["dynet", "h5py", "numpy"], "requires_python": ">=3.6", "summary": "A transition-based parser for Universal Dependencies with BiLSTM word and character representations.", "version": "2.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>UUParser: A transition-based dependency parser for Universal Dependencies</h1>\n<p>This parser is based on <a href=\"http://github.com/elikip/bist-parser\" rel=\"nofollow\">Eli Kiperwasser's transition-based parser</a> using BiLSTM feature extractors.\nWe adapted the parser to Universal Dependencies and extended it as described in these papers:</p>\n<ul>\n<li>(Version 1.0) Adaptation to UD + removed POS tags from the input + added character vectors + use pseudo-projective:</li>\n</ul>\n<blockquote>\n<p>Miryam de Lhoneux, Yan Shao, Ali Basirat, Eliyahu Kiperwasser, Sara Stymne, Yoav Goldberg, and Joakim Nivre. 2017. From Raw Text to Universal Dependencies - Look, No Tags! In Proceedings of the CoNLL 2017 Shared Task: Multilingual Parsing from Raw Text to Universal Dependencies.</p>\n</blockquote>\n<ul>\n<li>(Version 2.0) Removed the need for pseudo-projective parsing by using a swap transition and creating a partially dynamic oracle as described in:</li>\n</ul>\n<blockquote>\n<p>Miryam de Lhoneux, Sara Stymne and Joakim Nivre. 2017. Arc-Hybrid Non-Projective Dependency Parsing with a Static-Dynamic Oracle. In Proceedings of the The 15th International Conference on Parsing Technologies (IWPT).</p>\n</blockquote>\n<ul>\n<li>(Version 2.3) Added POS tags back in, extended cross-treebank functionality and use of external embeddings and some tuning of default hyperparameters:</li>\n</ul>\n<blockquote>\n<p>Aaron Smith, Bernd Bohnet, Miryam de Lhoneux, Joakim Nivre, Yan Shao and Sara Stymne. 2018. 82 Treebanks, 34 Models: Universal Dependency Parsing with Cross-Treebank Models. In Proceedings of the CoNLL 2018 Shared Task: Multilingual Parsing from Raw Text to Universal Dependencies.</p>\n</blockquote>\n<p>The techniques behind the original parser are described in the paper <a href=\"https://www.transacl.org/ojs/index.php/tacl/article/viewFile/885/198\" rel=\"nofollow\">Simple and Accurate Dependency Parsing Using Bidirectional LSTM Feature Representations</a>.</p>\n<h4>Required software</h4>\n<ul>\n<li>\n<p>Python 3 (/!\\ recent move from python 2.7 which was used for all releases).</p>\n</li>\n<li>\n<p><a href=\"https://github.com/clab/dynet/tree/master/python\" rel=\"nofollow\">DyNet library</a></p>\n<p>Note: the current version is Dynet 2.0 but Dynet 1.0 was used in both releases 1.0 and 2.0</p>\n</li>\n</ul>\n<h3>Installation</h3>\n<ul>\n<li>\n<p>(Python &gt; 3.7 only) install <a href=\"https://cython.org/\" rel=\"nofollow\">Cython</a> first in order to be able to install <a href=\"https://github.com/clab/dynet\" rel=\"nofollow\">DyNet</a></p>\n<pre><span class=\"go\">pip install cython</span>\n</pre>\n</li>\n<li>\n<p>Install with pip</p>\n<pre><span class=\"go\">pip install uuparser</span>\n</pre>\n</li>\n</ul>\n<p>Alternatively you can install directly from the master branch with <code>pip install git+https://github.com/UppsalaNLP/uuparser</code>.</p>\n<h4>Train a parsing model</h4>\n<p>To train a set of parsing models for a set of treebanks:</p>\n<pre><span class=\"go\">uuparser --outdir [results directory] --datadir [directory of UD files with the structure UD\\_\\*\\*/iso\\_id-ud-train/dev.conllu] --include [treebanks to include denoted by their ISO id]</span>\n</pre>\n<h4>Options</h4>\n<p>The parser has numerous options to allow you to fine-control its behaviour. For a full list, type:</p>\n<pre><span class=\"go\">uuparser --help</span>\n</pre>\n<p>We recommend you set the --dynet-mem option to a larger number when running the full training procedure on larger treebanks.\nCommonly used values are 5000 and 10000 (in MB).</p>\n<p>Note that due to random initialization and other non-deterministic elements in the training process, you will not obtain the same results even when training twice under exactly the same circumstances (e.g. languages, number of epochs etc.).\nTo ensure identical results between two runs, we recommend setting the --dynet-seed option to the same value both times (e.g. --dynet-seed 123456789).\nThis ensures that Python's random number generator and Dynet both produce the same sequence of random numbers.</p>\n<h4>Example</h4>\n<p>The following is a typical command for training separate models for UD_Swedish, UD_Russian, and UD_English:</p>\n<pre><span class=\"go\">uuparser --outdir my_output --datadir ud-treebanks-v2.0 --include \"sv_talbanken en_partut ru_syntagrus\" --dynet-seed 123456789 --dynet-mem 10000</span>\n</pre>\n<p>The output files will be created in my_output/sv_talbanken, my_output/ru_syntagrus, and my_output/en_partut.\nThis command assumes that the directory UD_Swedish exists in ud-treebanks-v2.0 and contains at least the file sv-ud-train.conllu (and the same for the other two languages).\nIf dev data is also found (sv-ud-dev.conllu), model selection will be performed by default by parsing the dev data at each epoch and choosing the model from the epoch with the highest LAS.</p>\n<h4>Parse data with your parsing model</h4>\n<pre><span class=\"go\">uuparser --predict --outdir [results directory] --datadir [directory of UD files with the structure UD\\_\\*\\*/iso\\_id-ud-train/dev.conllu] --include [treebanks to include denoted by their ISO id]</span>\n</pre>\n<p>By default this will parse the dev data for the specified languages with the model files (by default barchybrid.model) found in treebank-specific subdirectories of outdir.\nNote that if you don't want to use the same directory for model files and output files, you can specify the --modeldir explictly.\nBy default, is it assumed that --modeldir is the same as --outdir.</p>\n<h4>Multi-treebank models</h4>\n<p>An important feature of the parser is the ability to train cross-treebank models by adding a treebank embedding.\nInformation about this technique is detailed in:</p>\n<blockquote>\n<p>Sara Stymne, Miryam de Lhoneux, Aaron Smith, Joakim Nivre. 2018. Parser Training with Heterogeneous Treebanks. In Proceedings of ACL.</p>\n</blockquote>\n<p>To train a multi-treebank model, simply add the --multiling flag at both training and test time.\nThe output model files will be stored by default directly in the specified output directory rather than in treebank-specific subdirectories.</p>\n<h4>Using ELMo continous word embeddings</h4>\n<p>UUParser supports ELMo embeddings as an input to the LSTM.\nSpecify a HDF5 file containing the layers for each word using the <code>--elmo</code> options.\nThe file must contain all sentences from a treebank and be tokenized according\nto the gold segmentation. Additionally, UUParser expects all three layers to be present\nas the task-specific weights are learned during training.</p>\n<p>The weights for the English treebanks EWT, GUM, and LinES can be downloaded <a href=\"https://www.dropbox.com/sh/kyaq2mt07qpbtxt/AACD6LsEJrqgaURaAZ-fvHpoa?dl=0\" rel=\"nofollow\">here</a>.</p>\n<p>You can also specify the gamma scalar using <code>--elmo_gamma</code> or set <code>--elmo_learn_gamma</code>\nto learn the value during training.</p>\n<p>Credits to Johannes Gontrum for this addition.\nCredits to Giuseppe Attardi for porting the parser to python 3.</p>\n<h4>Citation</h4>\n<p>If you make use of this software for research purposes, we'll appreciate if you cite the following:</p>\n<p>If you use version 2.0 or later:</p>\n<pre><code>@InProceedings{delhoneux17arc,\n    author    = {Miryam de Lhoneux and Sara Stymne and Joakim Nivre},\n    title     = {Arc-Hybrid Non-Projective Dependency Parsing with a Static-Dynamic Oracle},\n    booktitle = {Proceedings of the The 15th International Conference on Parsing Technologies (IWPT).},\n    year      = {2017},\n    address = {Pisa, Italy}\n}\n</code></pre>\n<p>If you use version 1.0:</p>\n<pre><code>@InProceedings{uu-conll17,\n    author    = {Miryam de Lhoneux and Yan Shao and Ali Basirat and Eliyahu Kiperwasser and Sara Stymne and Yoav Goldberg and Joakim Nivre},\n    title     = {From Raw Text to Universal Dependencies -- Look, No Tags!},\n    booktitle = {Proceedings of the CoNLL 2017 Shared Task: Multilingual Parsing from Raw Text to Universal Dependencies. },\n    year      = {2017},\n    address = {Vancouver, Canada}\n}\n</code></pre>\n<p>And the original parser paper:</p>\n<pre><code>@article{DBLP:journals/tacl/KiperwasserG16,\n    author    = {Eliyahu Kiperwasser and Yoav Goldberg},\n    title     = {Simple and Accurate Dependency Parsing Using Bidirectional {LSTM}\n           Feature Representations},\n    journal   = {{TACL}},\n    volume    = {4},\n    pages     = {313--327},\n    year      = {2016},\n    url       = {https://transacl.org/ojs/index.php/tacl/article/view/885},\n    timestamp = {Tue, 09 Aug 2016 14:51:09 +0200},\n    biburl    = {http://dblp.uni-trier.de/rec/bib/journals/tacl/KiperwasserG16},\n    bibsource = {dblp computer science bibliography, http://dblp.org}\n}\n</code></pre>\n<h4>License</h4>\n<p>This software is released under the terms of the <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" rel=\"nofollow\">Apache License, Version 2.0</a>.</p>\n<h4>Contact</h4>\n<p>For questions and usage issues, please contact <a href=\"mailto:miryam.de_lhoneux@lingfil.uu.se\">miryam.de_lhoneux@lingfil.uu.se</a></p>\n\n          </div>"}, "last_serial": 6762429, "releases": {"2.3": [{"comment_text": "", "digests": {"md5": "9e47c57625bf48d12facc45a7622c388", "sha256": "dce7a85e8f6ff6a5e06b0e60ceaa9a3a604be3c8cce3e810b28aedc010483107"}, "downloads": -1, "filename": "uuparser-2.3-py3-none-any.whl", "has_sig": false, "md5_digest": "9e47c57625bf48d12facc45a7622c388", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 61084, "upload_time": "2020-03-06T14:38:03", "upload_time_iso_8601": "2020-03-06T14:38:03.108124Z", "url": "https://files.pythonhosted.org/packages/79/a3/62b5eb6677ba21a498f609f29320ea8ca0f0ee9a88092073c64c262ce8e2/uuparser-2.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6566adbc87d87ba2ac11f4859ed9afa8", "sha256": "dde60a79ffe8136cb11e3d4916136aef9da35720cd752aec3031dc39daa7c98e"}, "downloads": -1, "filename": "uuparser-2.3.tar.gz", "has_sig": false, "md5_digest": "6566adbc87d87ba2ac11f4859ed9afa8", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 55140, "upload_time": "2020-03-06T14:38:05", "upload_time_iso_8601": "2020-03-06T14:38:05.792291Z", "url": "https://files.pythonhosted.org/packages/a9/13/a0c801997fa46653aafe69e95ad97e573c682c5d0f3352aff292eb47ac1c/uuparser-2.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "9e47c57625bf48d12facc45a7622c388", "sha256": "dce7a85e8f6ff6a5e06b0e60ceaa9a3a604be3c8cce3e810b28aedc010483107"}, "downloads": -1, "filename": "uuparser-2.3-py3-none-any.whl", "has_sig": false, "md5_digest": "9e47c57625bf48d12facc45a7622c388", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 61084, "upload_time": "2020-03-06T14:38:03", "upload_time_iso_8601": "2020-03-06T14:38:03.108124Z", "url": "https://files.pythonhosted.org/packages/79/a3/62b5eb6677ba21a498f609f29320ea8ca0f0ee9a88092073c64c262ce8e2/uuparser-2.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6566adbc87d87ba2ac11f4859ed9afa8", "sha256": "dde60a79ffe8136cb11e3d4916136aef9da35720cd752aec3031dc39daa7c98e"}, "downloads": -1, "filename": "uuparser-2.3.tar.gz", "has_sig": false, "md5_digest": "6566adbc87d87ba2ac11f4859ed9afa8", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 55140, "upload_time": "2020-03-06T14:38:05", "upload_time_iso_8601": "2020-03-06T14:38:05.792291Z", "url": "https://files.pythonhosted.org/packages/a9/13/a0c801997fa46653aafe69e95ad97e573c682c5d0f3352aff292eb47ac1c/uuparser-2.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:38:42 2020"}