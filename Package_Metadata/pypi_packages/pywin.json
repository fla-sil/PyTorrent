{"info": {"author": "David Marble", "author_email": "davidmarble@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Console", "Environment :: Win32 (MS Windows)", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.4", "Programming Language :: Python :: 2.5", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.0", "Programming Language :: Python :: 3.1", "Programming Language :: Python :: 3.2", "Programming Language :: Python :: 3.3"], "description": "pywin\n=====\n\n**pywin** is a lightweight python 2.5-3.3 launcher and switcher for\nWindows command line and MSYS/MINGW32. It's similar to the `py.exe\nlauncher/switcher available in python\n3.3 <http://docs.python.org/3/using/windows.html#launcher>`__, but\nwritten with basic Windows batch scripts and a shell script for\nMSYS/MINGW32 support. I use bash and command line shell tools from\n`msysgit <http://msysgit.github.com/>`__, based on MSYS/MINGW32, to do\nmost of my python development on Windows.\n\n**pywin** supports several useful features defined in `PEP\n397 <http://www.python.org/dev/peps/pep-0397/>`__, such as command line\nconventions and hash bang #! python version headers in source files.\nWhile pywin lacks some of py.exe's features, it has the basics and a few\nextras of its own.\n\nRequirements\n------------\n\n-  Windows >= XP for command prompt support\n-  Windows >= Vista for MSYS/MINGW support (requires ``mklink`` for\n   symbolic links)\n-  At least one installation of python 2.5 up to 3.3 (though it's not\n   useful without at least two)\n-  easy\\_install, pip, or git\n\nInstallation\n------------\n\n-  Make sure the main python installation you want pywin to live under\n   is in the PATH.\n-  With multiple python installations, it's recommended to have only the\n   main and Scripts directories from one installation in your PATH. For\n   example, ``C:\\Python27;C:\\Python27\\Scripts``.\n\neasy\\_install\n~~~~~~~~~~~~~\n\n.. code:: sh\n\n    easy_install pywin\n\npip\n~~~\n\n.. code:: sh\n\n    pip install pywin\n\nfrom source\n~~~~~~~~~~~\n\n.. code:: sh\n\n    git clone git://github.com/davidmarble/pywin.git\n    cd pywin\n    python setup.py install\n\nGetting Started\n---------------\n\n.. code:: sh\n\n    # Assuming pywin was installed with Python27\n\n    C:\\>pyassoc\n\n        HKEY_CURRENT_USER\\Software\\Classes python keys created successfully.\n\n        .py files will launch with \"C:\\Python27\\pywin.bat\"\n\n    C:\\>pywin genlaunchers\n\n        Generating launchers...\n\n        C:\\Python27\\python2.7.bat -> C:\\Python27\\python.exe\n        C:\\Python27\\python2.6.bat -> C:\\Python26\\python.exe\n        C:\\Python27\\python2.5.bat -> C:\\Python25\\python.exe\n        C:\\Python27\\python3.0.bat -> C:\\Python30\\python.exe\n        C:\\Python27\\python3.1.bat -> C:\\Python31\\python.exe\n        C:\\Python27\\python3.2.bat -> C:\\Python32\\python.exe\n        C:\\Python27\\python3.3.bat -> C:\\Python33\\python.exe\n\n    C:\\>pywin               # launch first python found in PATH\n\n    C:\\>pywin -2.7          # launch python 2.7\n\n    C:\\>pywin setdefault 3.3\n\n        Setting default python for active session to: 3.3\n        C:\\Python33;C:\\Python33\\Scripts -- now at front of PATH\n\n    # Create a test file with a specified python version in the header\n    C:\\>echo #! /usr/bin/python2.7 > test.py\n    C:\\>echo import sys;print(\"\\n  %s\"%sys.exec_prefix) >> test.py\n    C:\\>test.py\n      \n      C:\\Python27\n\n    C:\\>pywin -3.2 test.py  # launch test.py with python 3.2\n\n      C:\\Python32\n\nOverview\n--------\n\n**pywin** and its associated scripts are installed in the main directory\nof the active python version (e.g. C:27). There's no need to install it\nunder more than one version of python (if you do, you'll have to run\n``pywin genlaunchers`` for each version you install it under). Make sure\nthat this main python directory is always on the path. Alternatively you\ncan move the included scripts to another directory in your path.\n\nAuto-generate version-specific launchers\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n**pywin** can create individual launch scripts to directly access core\npython installations (e.g. python2.7). These can be called directly with\nor without arguments from the Windows command prompt and MSYS/MINGW bash\nprompt. To use this feature, call\n\n.. code:: sh\n\n    pywin genlaunchers\n\nLaunchers are created for all machine-wide and user-specific python\ninstallations found in the Windows registry. Windows batch files will be\nadded to the directory where **pywin** is located. MSYS/MINGW32 relies\non Windows links created programmatically with ``mklink``, which is why\nyou must have Windows >= Vista installed to make use of this project.\n\nLaunch a specific python version using pywin\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. code:: sh\n\n    pywin -2.7  # launch python 2.7\n    pywin -3.2 test.py  # launch test.py with python 3.2\n\nAutomatically invoke the right python with a script header\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nAdd a directive to the first or second line of a source file to have the\ncorrect interpreter called. Currently this only supports python\nlaunchers created by the ``pywin genlaunchers`` command. To use this\nfeature, you must associate the .py extension with pywin.bat using the\nincluded ``pyassoc`` utility.\n\n.. code:: sh\n\n    pyassoc\n\npywin\n-----\n\n**NOTE:** ``pywin`` commands work from both Windows command line and\nMSYS/MINGW32 shell.\n\ngenlaunchers\n~~~~~~~~~~~~\n\n.. code:: sh\n\n    pywin genlaunchers\n\nSearch for python installations and create batch files in the same\ndirectory where pywin is installed.\n\nNote if you're using MSYS/MINGW32 this must be run again in the\nMSYS/MINGW32 shell, and you must have Windows >= Vista.\n\nsetdefault\n~~~~~~~~~~\n\n.. code:: sh\n\n    pywin setdefault <version>\n\nSet the default python to ``<major>.<minor>`` version. Adds the right\npython home directory and its associated Scripts directory to the front\nof PATH. Removes any other existing reference to a python Scripts\ndirectory in PATH.\n\nExample\n\n.. code:: sh\n\n    # Existing PATH: C:\\Windows\\System32;C:\\Windows;C:\\Python27;C:\\Python27\\Scripts\n\n    pywin setdefault 3.3\n\n    # New PATH: C:\\Python33;C:\\Python33\\Scripts;C:\\Windows\\System32;C:\\Windows;C:\\Python27;\n    # C:\\Python27 is preserved so that pywin can be found.\n\n``pywin setdefault`` is only active for the current cmd.exe (or\nMSYS/MINGW32 shell) session. If you want to change the\ndefault python permanently, you need to change your system or user\nPATH and make sure pywin is installed for that python version.\n\nWhen calling this from MSYS/MINGW32, enter a dot first so the changes to\n$PATH propagate to your active shell. E.g. ``. pywin setdefault 3.3``\n\nlaunch with version and/or source\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. code:: sh\n\n    pywin [-<version>] [<source file>]\n\nLaunch either a specific ``<major>.<minor>`` version of python, or a\nsource file, or both. Note that specifying a version of python on the\ncommand line will override any version in the header of the source file.\n\nExample\n\n.. code:: sh\n\n    # launch python 2.7\n    pywin -2.7\n\n    # launch test.py with python 3.2\n    pywin -3.2 test.py\n\n    # launch test.py according to Version Search Order below\n    pywin test.py\n\nVersion Search Order\n~~~~~~~~~~~~~~~~~~~~\n\n**pywin** will launch the first version of python found among:\n\n1. Any version specified after a #! in the first 2 lines of the source.\n   The interpreter will be invoked with any additional parameters.\n\n   examples:\n\n   ::\n\n       #! python3.3\n       #! /usr/bin/python2.7 -v\n\n2. If the environment variable ``VIRTUAL_ENV`` is set, use that\n   virtualenv's ``python.exe``.\n3. If the environment variable ``PYTHONHOME`` is set, use its\n   ``python.exe``.\n4. If none of the above, fall back to the first ``python.exe`` found on\n   the path.\n\npyassoc\n-------\n\n.. code:: sh\n\n    pyassoc [original] [all_users]\n\nWith no arguments, ``pyassoc`` will register the .py extension to run\nwith ``%pyhome%\\pywin.bat``. This change is made in the registry to\n``HKEY_CURRENT_USER``, so that when .py files are invoked, any\nmachine-wide setting is overridden.\n\nNote that registry settings have no effect on launch .py files under\nMSYS/MINGW32.\n\nParameters\n~~~~~~~~~~\n\n-  **original** - restore .py registry settings to launch with\n   ``%pyhome%\\python.exe``\n-  **all\\_users** - if administrator, apply changes to\n   ``HKEY_LOCAL_MACHINE`` and remove any ``HKEY_CURRENT_USER`` python\n   keys. Note that users can override this with their own\n   ``HKEY_CURRENT_USER`` values.\n\n%pyhome%\n~~~~~~~~\n\nThe variable ``%pyhome%`` used by ``pyassoc`` is set in this manner:\n\n1. If the environment variable ``PYTHONHOME`` is set, use it.\n2. If the environment variable ``DEFAULTPYTHON`` is set, use it. This is\n   set when you call ``pywin setdefault <version>``, but only lasts for\n   the current session.\n3. The path the ``pyassoc.bat`` script is in.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/davidmarble/pywin/", "keywords": "python windows version switcher launcher", "license": "BSD 3-clause", "maintainer": null, "maintainer_email": null, "name": "pywin", "package_url": "https://pypi.org/project/pywin/", "platform": "WIN32,WIN64", "project_url": "https://pypi.org/project/pywin/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/davidmarble/pywin/"}, "release_url": "https://pypi.org/project/pywin/0.3.1/", "requires_dist": null, "requires_python": null, "summary": "Lightweight python 2.5-3.3 launcher and switcher for Windows command line and MSYS/MINGW32. Partly PEP 397 compliant.", "version": "0.3.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><strong>pywin</strong> is a lightweight python 2.5-3.3 launcher and switcher for\nWindows command line and MSYS/MINGW32. It\u2019s similar to the <a href=\"http://docs.python.org/3/using/windows.html#launcher\" rel=\"nofollow\">py.exe\nlauncher/switcher available in python\n3.3</a>, but\nwritten with basic Windows batch scripts and a shell script for\nMSYS/MINGW32 support. I use bash and command line shell tools from\n<a href=\"http://msysgit.github.com/\" rel=\"nofollow\">msysgit</a>, based on MSYS/MINGW32, to do\nmost of my python development on Windows.</p>\n<p><strong>pywin</strong> supports several useful features defined in <a href=\"http://www.python.org/dev/peps/pep-0397/\" rel=\"nofollow\">PEP\n397</a>, such as command line\nconventions and hash bang #! python version headers in source files.\nWhile pywin lacks some of py.exe\u2019s features, it has the basics and a few\nextras of its own.</p>\n<div id=\"requirements\">\n<h2>Requirements</h2>\n<ul>\n<li>Windows &gt;= XP for command prompt support</li>\n<li>Windows &gt;= Vista for MSYS/MINGW support (requires <tt>mklink</tt> for\nsymbolic links)</li>\n<li>At least one installation of python 2.5 up to 3.3 (though it\u2019s not\nuseful without at least two)</li>\n<li>easy_install, pip, or git</li>\n</ul>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<ul>\n<li>Make sure the main python installation you want pywin to live under\nis in the PATH.</li>\n<li>With multiple python installations, it\u2019s recommended to have only the\nmain and Scripts directories from one installation in your PATH. For\nexample, <tt><span class=\"pre\">C:\\Python27;C:\\Python27\\Scripts</span></tt>.</li>\n</ul>\n<div id=\"easy-install\">\n<h3>easy_install</h3>\n<pre>easy_install pywin\n</pre>\n</div>\n<div id=\"pip\">\n<h3>pip</h3>\n<pre>pip install pywin\n</pre>\n</div>\n<div id=\"from-source\">\n<h3>from source</h3>\n<pre>git clone git://github.com/davidmarble/pywin.git\n<span class=\"nb\">cd</span> pywin\npython setup.py install\n</pre>\n</div>\n</div>\n<div id=\"getting-started\">\n<h2>Getting Started</h2>\n<pre><span class=\"c1\"># Assuming pywin was installed with Python27\n</span>\nC:<span class=\"se\">\\&gt;</span>pyassoc\n\n    HKEY_CURRENT_USER<span class=\"se\">\\S</span>oftware<span class=\"se\">\\C</span>lasses python keys created successfully.\n\n    .py files will launch with <span class=\"s2\">\"C:\\Python27\\pywin.bat\"</span>\n\nC:<span class=\"se\">\\&gt;</span>pywin genlaunchers\n\n    Generating launchers...\n\n    C:<span class=\"se\">\\P</span>ython27<span class=\"se\">\\p</span>ython2.7.bat -&gt; C:<span class=\"se\">\\P</span>ython27<span class=\"se\">\\p</span>ython.exe\n    C:<span class=\"se\">\\P</span>ython27<span class=\"se\">\\p</span>ython2.6.bat -&gt; C:<span class=\"se\">\\P</span>ython26<span class=\"se\">\\p</span>ython.exe\n    C:<span class=\"se\">\\P</span>ython27<span class=\"se\">\\p</span>ython2.5.bat -&gt; C:<span class=\"se\">\\P</span>ython25<span class=\"se\">\\p</span>ython.exe\n    C:<span class=\"se\">\\P</span>ython27<span class=\"se\">\\p</span>ython3.0.bat -&gt; C:<span class=\"se\">\\P</span>ython30<span class=\"se\">\\p</span>ython.exe\n    C:<span class=\"se\">\\P</span>ython27<span class=\"se\">\\p</span>ython3.1.bat -&gt; C:<span class=\"se\">\\P</span>ython31<span class=\"se\">\\p</span>ython.exe\n    C:<span class=\"se\">\\P</span>ython27<span class=\"se\">\\p</span>ython3.2.bat -&gt; C:<span class=\"se\">\\P</span>ython32<span class=\"se\">\\p</span>ython.exe\n    C:<span class=\"se\">\\P</span>ython27<span class=\"se\">\\p</span>ython3.3.bat -&gt; C:<span class=\"se\">\\P</span>ython33<span class=\"se\">\\p</span>ython.exe\n\nC:<span class=\"se\">\\&gt;</span>pywin               <span class=\"c1\"># launch first python found in PATH\n</span>\nC:<span class=\"se\">\\&gt;</span>pywin -2.7          <span class=\"c1\"># launch python 2.7\n</span>\nC:<span class=\"se\">\\&gt;</span>pywin setdefault <span class=\"m\">3</span>.3\n\n    Setting default python <span class=\"k\">for</span> active session to: <span class=\"m\">3</span>.3\n    C:<span class=\"se\">\\P</span>ython33<span class=\"p\">;</span>C:<span class=\"se\">\\P</span>ython33<span class=\"se\">\\S</span>cripts -- now at front of PATH\n\n<span class=\"c1\"># Create a test file with a specified python version in the header\n</span>C:<span class=\"se\">\\&gt;</span><span class=\"nb\">echo</span> <span class=\"c1\">#! /usr/bin/python2.7 &gt; test.py\n</span>C:<span class=\"se\">\\&gt;</span><span class=\"nb\">echo</span> import sys<span class=\"p\">;</span>print<span class=\"o\">(</span><span class=\"s2\">\"\\n  %s\"</span>%sys.exec_prefix<span class=\"o\">)</span> &gt;&gt; test.py\nC:<span class=\"se\">\\&gt;</span>test.py\n\n  C:<span class=\"se\">\\P</span>ython27\n\nC:<span class=\"se\">\\&gt;</span>pywin -3.2 test.py  <span class=\"c1\"># launch test.py with python 3.2\n</span>\n  C:<span class=\"se\">\\P</span>ython32\n</pre>\n</div>\n<div id=\"overview\">\n<h2>Overview</h2>\n<p><strong>pywin</strong> and its associated scripts are installed in the main directory\nof the active python version (e.g. C:27). There\u2019s no need to install it\nunder more than one version of python (if you do, you\u2019ll have to run\n<tt>pywin genlaunchers</tt> for each version you install it under). Make sure\nthat this main python directory is always on the path. Alternatively you\ncan move the included scripts to another directory in your path.</p>\n<div id=\"auto-generate-version-specific-launchers\">\n<h3>Auto-generate version-specific launchers</h3>\n<p><strong>pywin</strong> can create individual launch scripts to directly access core\npython installations (e.g. python2.7). These can be called directly with\nor without arguments from the Windows command prompt and MSYS/MINGW bash\nprompt. To use this feature, call</p>\n<pre>pywin genlaunchers\n</pre>\n<p>Launchers are created for all machine-wide and user-specific python\ninstallations found in the Windows registry. Windows batch files will be\nadded to the directory where <strong>pywin</strong> is located. MSYS/MINGW32 relies\non Windows links created programmatically with <tt>mklink</tt>, which is why\nyou must have Windows &gt;= Vista installed to make use of this project.</p>\n</div>\n<div id=\"launch-a-specific-python-version-using-pywin\">\n<h3>Launch a specific python version using pywin</h3>\n<pre>pywin -2.7  <span class=\"c1\"># launch python 2.7\n</span>pywin -3.2 test.py  <span class=\"c1\"># launch test.py with python 3.2</span>\n</pre>\n</div>\n<div id=\"automatically-invoke-the-right-python-with-a-script-header\">\n<h3>Automatically invoke the right python with a script header</h3>\n<p>Add a directive to the first or second line of a source file to have the\ncorrect interpreter called. Currently this only supports python\nlaunchers created by the <tt>pywin genlaunchers</tt> command. To use this\nfeature, you must associate the .py extension with pywin.bat using the\nincluded <tt>pyassoc</tt> utility.</p>\n<pre>pyassoc\n</pre>\n</div>\n</div>\n<div id=\"id1\">\n<h2>pywin</h2>\n<p><strong>NOTE:</strong> <tt>pywin</tt> commands work from both Windows command line and\nMSYS/MINGW32 shell.</p>\n<div id=\"genlaunchers\">\n<h3>genlaunchers</h3>\n<pre>pywin genlaunchers\n</pre>\n<p>Search for python installations and create batch files in the same\ndirectory where pywin is installed.</p>\n<p>Note if you\u2019re using MSYS/MINGW32 this must be run again in the\nMSYS/MINGW32 shell, and you must have Windows &gt;= Vista.</p>\n</div>\n<div id=\"setdefault\">\n<h3>setdefault</h3>\n<pre>pywin setdefault &lt;version&gt;\n</pre>\n<p>Set the default python to <tt><span class=\"pre\">&lt;major&gt;.&lt;minor&gt;</span></tt> version. Adds the right\npython home directory and its associated Scripts directory to the front\nof PATH. Removes any other existing reference to a python Scripts\ndirectory in PATH.</p>\n<p>Example</p>\n<pre><span class=\"c1\"># Existing PATH: C:\\Windows\\System32;C:\\Windows;C:\\Python27;C:\\Python27\\Scripts\n</span>\npywin setdefault <span class=\"m\">3</span>.3\n\n<span class=\"c1\"># New PATH: C:\\Python33;C:\\Python33\\Scripts;C:\\Windows\\System32;C:\\Windows;C:\\Python27;\n# C:\\Python27 is preserved so that pywin can be found.</span>\n</pre>\n<p><tt>pywin setdefault</tt> is only active for the current cmd.exe (or\nMSYS/MINGW32 shell) session. If you want to change the\ndefault python permanently, you need to change your system or user\nPATH and make sure pywin is installed for that python version.</p>\n<p>When calling this from MSYS/MINGW32, enter a dot first so the changes to\n$PATH propagate to your active shell. E.g. <tt>. pywin setdefault 3.3</tt></p>\n</div>\n<div id=\"launch-with-version-and-or-source\">\n<h3>launch with version and/or source</h3>\n<pre>pywin <span class=\"o\">[</span>-&lt;version&gt;<span class=\"o\">]</span> <span class=\"o\">[</span>&lt;<span class=\"nb\">source</span> file&gt;<span class=\"o\">]</span>\n</pre>\n<p>Launch either a specific <tt><span class=\"pre\">&lt;major&gt;.&lt;minor&gt;</span></tt> version of python, or a\nsource file, or both. Note that specifying a version of python on the\ncommand line will override any version in the header of the source file.</p>\n<p>Example</p>\n<pre><span class=\"c1\"># launch python 2.7\n</span>pywin -2.7\n\n<span class=\"c1\"># launch test.py with python 3.2\n</span>pywin -3.2 test.py\n\n<span class=\"c1\"># launch test.py according to Version Search Order below\n</span>pywin test.py\n</pre>\n</div>\n<div id=\"version-search-order\">\n<h3>Version Search Order</h3>\n<p><strong>pywin</strong> will launch the first version of python found among:</p>\n<ol>\n<li><p>Any version specified after a #! in the first 2 lines of the source.\nThe interpreter will be invoked with any additional parameters.</p>\n<p>examples:</p>\n<pre>#! python3.3\n#! /usr/bin/python2.7 -v\n</pre>\n</li>\n<li><p>If the environment variable <tt>VIRTUAL_ENV</tt> is set, use that\nvirtualenv\u2019s <tt>python.exe</tt>.</p>\n</li>\n<li><p>If the environment variable <tt>PYTHONHOME</tt> is set, use its\n<tt>python.exe</tt>.</p>\n</li>\n<li><p>If none of the above, fall back to the first <tt>python.exe</tt> found on\nthe path.</p>\n</li>\n</ol>\n</div>\n</div>\n<div id=\"pyassoc\">\n<h2>pyassoc</h2>\n<pre>pyassoc <span class=\"o\">[</span>original<span class=\"o\">]</span> <span class=\"o\">[</span>all_users<span class=\"o\">]</span>\n</pre>\n<p>With no arguments, <tt>pyassoc</tt> will register the .py extension to run\nwith <tt><span class=\"pre\">%pyhome%\\pywin.bat</span></tt>. This change is made in the registry to\n<tt>HKEY_CURRENT_USER</tt>, so that when .py files are invoked, any\nmachine-wide setting is overridden.</p>\n<p>Note that registry settings have no effect on launch .py files under\nMSYS/MINGW32.</p>\n<div id=\"parameters\">\n<h3>Parameters</h3>\n<ul>\n<li><strong>original</strong> - restore .py registry settings to launch with\n<tt><span class=\"pre\">%pyhome%\\python.exe</span></tt></li>\n<li><strong>all_users</strong> - if administrator, apply changes to\n<tt>HKEY_LOCAL_MACHINE</tt> and remove any <tt>HKEY_CURRENT_USER</tt> python\nkeys. Note that users can override this with their own\n<tt>HKEY_CURRENT_USER</tt> values.</li>\n</ul>\n</div>\n<div id=\"pyhome\">\n<h3>%pyhome%</h3>\n<p>The variable <tt>%pyhome%</tt> used by <tt>pyassoc</tt> is set in this manner:</p>\n<ol>\n<li>If the environment variable <tt>PYTHONHOME</tt> is set, use it.</li>\n<li>If the environment variable <tt>DEFAULTPYTHON</tt> is set, use it. This is\nset when you call <tt>pywin setdefault &lt;version&gt;</tt>, but only lasts for\nthe current session.</li>\n<li>The path the <tt>pyassoc.bat</tt> script is in.</li>\n</ol>\n</div>\n</div>\n\n          </div>"}, "last_serial": 777031, "releases": {"0.3.1": [{"comment_text": "", "digests": {"md5": "54aa878622bccc6aba0530fe86d74732", "sha256": "4f9195735d6fd726a4e90b7f950383c964ecd52614453a5dd4dfae3a86b8163a"}, "downloads": -1, "filename": "pywin-0.3.1.zip", "has_sig": false, "md5_digest": "54aa878622bccc6aba0530fe86d74732", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25350, "upload_time": "2013-03-31T00:31:33", "upload_time_iso_8601": "2013-03-31T00:31:33.452222Z", "url": "https://files.pythonhosted.org/packages/23/f5/744fc05b39ab479749c2eb9ba5cdf57b932a41a0bc23d833a47cb6314638/pywin-0.3.1.zip", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "54aa878622bccc6aba0530fe86d74732", "sha256": "4f9195735d6fd726a4e90b7f950383c964ecd52614453a5dd4dfae3a86b8163a"}, "downloads": -1, "filename": "pywin-0.3.1.zip", "has_sig": false, "md5_digest": "54aa878622bccc6aba0530fe86d74732", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25350, "upload_time": "2013-03-31T00:31:33", "upload_time_iso_8601": "2013-03-31T00:31:33.452222Z", "url": "https://files.pythonhosted.org/packages/23/f5/744fc05b39ab479749c2eb9ba5cdf57b932a41a0bc23d833a47cb6314638/pywin-0.3.1.zip", "yanked": false}], "timestamp": "Fri May  8 03:11:19 2020"}