{"info": {"author": "Fabian Pedregosa", "author_email": "f@bianp.net", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "Intended Audience :: Science/Research", "License :: OSI Approved", "Operating System :: POSIX", "Operating System :: Unix", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.2", "Programming Language :: Python :: 3.3", "Topic :: Software Development"], "description": "A Trust-Region Newton Method in Python\n======================================\n\n.. DANGER::\n    This is alpha quality software and still quite rough on the edges.\n    Specifically the error management is still lacking (which means that\n    if something goes wrong in the optimization you won't see an error\n    message but just get garbage). These things are being worked out but\n    we're not quite there yet.\n\n.. image:: http://fa.bianp.net/blog/static/images/2013/comparison_logistic_corr_10.png\n\nThe main function is pytron.minimize::\n\n    def minimize(func, grad_hess, x0, args=(), max_iter=1000, tol=1e-6):\n\n        Parameters\n        ----------\n        func : callable\n            func(w, *args) is the evaluation of the function at w, It\n            should return a float.\n        grad_hess: callable\n            returns the gradient and a callable with the hessian times\n            an arbitrary vector.\n        tol: float\n            stopping criterion. XXX TODO. what is the stopping criterion ?\n\n        Returns\n        -------\n        w : array\n\n\n\nStopping criterion\n------------------\n\nIt stops whenever ||grad(x)|| < eps or the maximum number of iterations is\nattained.\n\nTODO: add tol\n\nExamples\n--------\n\nCode\n----\nThis software uses the C++ implementation of `TRON optimization software\n<http://www.mcs.anl.gov/~more/tron/>`_  (files src/tron.{h,cpp})\ndistributed from the LIBLINEAR sources (v1.93), which is BSD licensed.\nNote that the original Fortran TRON implementation (available\n`here <http://fa.bianp.net/projects/pytron/tron-1.2.tar.gz>`_) is not open\nsource and is not used in this project.\n\nThe modifications with respect to the orginal code are:\n\n    * Do not initialize values to zero, allow arbitrary initializations\n\n    * Modify stopping criterion to comply with scipy.optimize API. Stop\n      whenever gradient is smaller than a given quantity, specified in the\n      gtol argument\n\n    * Return the gradient from TRON::tron (pass by reference)\n\n    * Add `tol` option to TRON\n\n    * Rename `eps` to `gtol`.\n\n    * Use infinity norm as stopping criterion for gradient instead of L2.\n\nTODO\n----\n    * return status from TRON::TRON\n    * callback argument\n\n\nReferences\n----------\nIf you use the software please consider citing some of the references below.\n\nThe method is described in the paper \"Newton's Method for Large\nBound-Constrained Optimization Problems\", Chih-Jen Lin and Jorge J. Mor\u00e9\n(http://epubs.siam.org/doi/abs/10.1137/S1052623498345075)\n\nIt is also discussed in the contex of Logistic Regression in the paper \"Trust\nRegion Newton Method for Logistic Regression\", Chih-Jen Lin, Ruby C. Weng,\nS. Sathiya Keerthi (http://dl.acm.org/citation.cfm?id=1390703)\n\nThe website http://www.mcs.anl.gov/~more/tron/ contains reference to this\nimplementation, although the links to the software seem to be currently\nbroken (May 2013).\n\n\nLicense\n-------\nThis code is licensed under the terms of the BSD license. See file COPYING\nfor more details.\n\n\nAcknowledgement\n---------------\nThe source code for the", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://pypi.python.org/pypi/pytron", "keywords": null, "license": "Simplified BSD", "maintainer": null, "maintainer_email": null, "name": "pytron", "package_url": "https://pypi.org/project/pytron/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/pytron/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://pypi.python.org/pypi/pytron"}, "release_url": "https://pypi.org/project/pytron/0.3/", "requires_dist": null, "requires_python": null, "summary": "Python bindings for TRON optimizer", "version": "0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div>\n<p>!DANGER!</p>\n<p>This is alpha quality software and still quite rough on the edges.\nSpecifically the error management is still lacking (which means that\nif something goes wrong in the optimization you won\u2019t see an error\nmessage but just get garbage). These things are being worked out but\nwe\u2019re not quite there yet.</p>\n</div>\n<img alt=\"http://fa.bianp.net/blog/static/images/2013/comparison_logistic_corr_10.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/684aafbede742f8c92643e43986daa60ee032930/687474703a2f2f66612e6269616e702e6e65742f626c6f672f7374617469632f696d616765732f323031332f636f6d70617269736f6e5f6c6f6769737469635f636f72725f31302e706e67\">\n<p>The main function is pytron.minimize:</p>\n<pre>def minimize(func, grad_hess, x0, args=(), max_iter=1000, tol=1e-6):\n\n    Parameters\n    ----------\n    func : callable\n        func(w, *args) is the evaluation of the function at w, It\n        should return a float.\n    grad_hess: callable\n        returns the gradient and a callable with the hessian times\n        an arbitrary vector.\n    tol: float\n        stopping criterion. XXX TODO. what is the stopping criterion ?\n\n    Returns\n    -------\n    w : array\n</pre>\n<div id=\"stopping-criterion\">\n<h2>Stopping criterion</h2>\n<p>It stops whenever ||grad(x)|| &lt; eps or the maximum number of iterations is\nattained.</p>\n<p>TODO: add tol</p>\n</div>\n<div id=\"examples\">\n<h2>Examples</h2>\n</div>\n<div id=\"code\">\n<h2>Code</h2>\n<p>This software uses the C++ implementation of <a href=\"http://www.mcs.anl.gov/~more/tron/\" rel=\"nofollow\">TRON optimization software</a>  (files src/tron.{h,cpp})\ndistributed from the LIBLINEAR sources (v1.93), which is BSD licensed.\nNote that the original Fortran TRON implementation (available\n<a href=\"http://fa.bianp.net/projects/pytron/tron-1.2.tar.gz\" rel=\"nofollow\">here</a>) is not open\nsource and is not used in this project.</p>\n<p>The modifications with respect to the orginal code are:</p>\n<blockquote>\n<ul>\n<li>Do not initialize values to zero, allow arbitrary initializations</li>\n<li>Modify stopping criterion to comply with scipy.optimize API. Stop\nwhenever gradient is smaller than a given quantity, specified in the\ngtol argument</li>\n<li>Return the gradient from TRON::tron (pass by reference)</li>\n<li>Add <cite>tol</cite> option to TRON</li>\n<li>Rename <cite>eps</cite> to <cite>gtol</cite>.</li>\n<li>Use infinity norm as stopping criterion for gradient instead of L2.</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"todo\">\n<h2>TODO</h2>\n<blockquote>\n<ul>\n<li>return status from TRON::TRON</li>\n<li>callback argument</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"references\">\n<h2>References</h2>\n<p>If you use the software please consider citing some of the references below.</p>\n<p>The method is described in the paper \u201cNewton\u2019s Method for Large\nBound-Constrained Optimization Problems\u201d, Chih-Jen Lin and Jorge J. Mor\u00e9\n(<a href=\"http://epubs.siam.org/doi/abs/10.1137/S1052623498345075\" rel=\"nofollow\">http://epubs.siam.org/doi/abs/10.1137/S1052623498345075</a>)</p>\n<p>It is also discussed in the contex of Logistic Regression in the paper \u201cTrust\nRegion Newton Method for Logistic Regression\u201d, Chih-Jen Lin, Ruby C. Weng,\nS. Sathiya Keerthi (<a href=\"http://dl.acm.org/citation.cfm?id=1390703\" rel=\"nofollow\">http://dl.acm.org/citation.cfm?id=1390703</a>)</p>\n<p>The website <a href=\"http://www.mcs.anl.gov/~more/tron/\" rel=\"nofollow\">http://www.mcs.anl.gov/~more/tron/</a> contains reference to this\nimplementation, although the links to the software seem to be currently\nbroken (May 2013).</p>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>This code is licensed under the terms of the BSD license. See file COPYING\nfor more details.</p>\n</div>\n<div id=\"acknowledgement\">\n<h2>Acknowledgement</h2>\n<p>The source code for the</p>\n</div>\n\n          </div>"}, "last_serial": 1471223, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "1e6c9aa85685477f63b39cf840cbbf4f", "sha256": "4a7c0c73642eb2333056ca05538d25074b19ab4e147bff6c1b36a7059b1c7e9b"}, "downloads": -1, "filename": "pytron-0.1.tar.gz", "has_sig": false, "md5_digest": "1e6c9aa85685477f63b39cf840cbbf4f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6714, "upload_time": "2013-05-18T14:43:55", "upload_time_iso_8601": "2013-05-18T14:43:55.011095Z", "url": "https://files.pythonhosted.org/packages/67/8a/57231ede811e444cb3bea0705d7b7b875af06c4054f34e981a8a8a244ae4/pytron-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "47159774d806d54652bc9e148e0dcede", "sha256": "1d36b999ff24665e408b91715c8bce96549553a2a3738638446096ab977a03cb"}, "downloads": -1, "filename": "pytron-0.2.tar.gz", "has_sig": false, "md5_digest": "47159774d806d54652bc9e148e0dcede", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7941, "upload_time": "2015-03-21T13:38:33", "upload_time_iso_8601": "2015-03-21T13:38:33.613530Z", "url": "https://files.pythonhosted.org/packages/18/79/560183ed683e4fb35dc72a919c0981b0ff2609c723efaf58624d93141bfd/pytron-0.2.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "51daaf45deddf8790bed98f40d8d973b", "sha256": "a9bb0a4eec1b15e62277ed46b49ef7ecd3daa2451e7bb223146ee1d7a4577b51"}, "downloads": -1, "filename": "pytron-0.3.tar.gz", "has_sig": false, "md5_digest": "51daaf45deddf8790bed98f40d8d973b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 111710, "upload_time": "2015-03-21T14:37:35", "upload_time_iso_8601": "2015-03-21T14:37:35.204508Z", "url": "https://files.pythonhosted.org/packages/85/4f/83c9e51364868df79cc407ea837e8a8d120704655cdc1adfc4bfba93c631/pytron-0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "51daaf45deddf8790bed98f40d8d973b", "sha256": "a9bb0a4eec1b15e62277ed46b49ef7ecd3daa2451e7bb223146ee1d7a4577b51"}, "downloads": -1, "filename": "pytron-0.3.tar.gz", "has_sig": false, "md5_digest": "51daaf45deddf8790bed98f40d8d973b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 111710, "upload_time": "2015-03-21T14:37:35", "upload_time_iso_8601": "2015-03-21T14:37:35.204508Z", "url": "https://files.pythonhosted.org/packages/85/4f/83c9e51364868df79cc407ea837e8a8d120704655cdc1adfc4bfba93c631/pytron-0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:13:08 2020"}