{"info": {"author": "Equinox Fitness", "author_email": "", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Programming Language :: Python :: 3.6"], "description": "Scripty\n============\n\n.. image:: https://badge.fury.io/py/scripty.svg\n    :target: https://badge.fury.io/py/scripty\n    :alt: PyPI Version\n\n.. image:: https://readthedocs.org/projects/scripty/badge/?version=latest\n    :target: https://scripty.readthedocs.io/en/latest/?badge=latest\n    :alt: Documentation Status\n\n.. image:: https://api.codacy.com/project/badge/Grade/b567417a57594f59bb715fc8a72108bf\n    :target: https://www.codacy.com/gh/equinoxfitness/scripty?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=equinoxfitness/scripty&amp;utm_campaign=Badge_Grade\n    :alt: Code Quality Grade\n\n.. image:: https://img.shields.io/badge/Contributor%20Covenant-v2.0%20adopted-ff69b4.svg\n    :target: https://github.com/equinoxfitness/datacoco-email_tools/blob/master/CODE_OF_CONDUCT.rst\n    :alt: Code of Conduct\n\nScripty is a simple script runner to execute ELT and load tasks.\n\nInstallation\n------------\n\nScripty requires Python 3.6+\n\n::\n\n    python3 -m venv <virtual env name>\n    source <virtual env name>/bin/activate\n    pip install scripty\n\nQuickstart\n----------\n\nRedshift does not have stored procedures so we will use Scripty to execute our ELT and load tasks.\n\nBoth script runner and SQLWorkbenchJ will use the same notation for variable expansion: `$[?variable]`.  This string will be replaced at runtime by the appropriate variable:\n\nThere are three types of substitution parameters that can be used through script runner.  The first is a set of standard etl params for ease of use:\n\n*  -f, from_date, default 1776-07-24\n*  -t,to_date, default 9999-12-31\n*  -b, batch_no, default is -1\n\nThe second option is for arbitrary variable expansion.  This is passed in the following format because rundeck commands don't like json quotes:\n\n*  -p, example: -p \"param1-val1, param2-val2\"\n\nThe final option is to use the batchy integration\n\n*  -wf, batchy_job, this will substitue parameters from a batchy workflow, this should be a fully qualified batchy job name of the format wf.job, if no job is specified it will assume global\n\nHere is a sample SQL Script.  If run in SQL workbench you will be prompted for values for var1 and var2.\n\n::\n\n    drop table if exists  zzztemp;\n\n    create table zzztemp (\n    dt timestamp,\n    var varchar,\n    from_date timestamp,\n    batch_no integer\n    );\n\n    insert into zzztemp\n    values (getdate(), '$[?var1]', '$[?from_date]', '$[?batch_no]');\n\n    insert into zzztemp\n    values (getdate(), '$[?var2]', '$[?from_date]', '$[?batch_no]');\n\n    select * from zzztemp;\n\n\nIn the script runner you would use the following params to substitute that value.  It is assumed these params would be dynamically substituted by the calling script or informatica process:\n\n``python -m scripty.module -s \"sample/scripty_test.sql\" -p \"var1-cat, var2-dog\" -f '1980-12-31 07:00' -b '9999'``\n\nAssuming you had workflow config in batchy under wf3, you could also use this script:\n\n``python -m scripty.module -s sample/scripty_test.sql -wf wf3``\n\n\nDevelopment\n-----------\n\nGetting Started\n~~~~~~~~~~~~~~~\n\nIt is recommended to use the steps below to set up a virtual environment for development:\n\n::\n\n    python3 -m venv <virtual env name>\n    source <virtual env name>/bin/activate\n    pip install -r requirements.txt\n\nTesting\n~~~~~~~\n\n::\n\n    pip install -r requirements-dev.txt\n\nTo run the testing suite, simply run the command: ``tox`` or ``python -m unittest discover tests``\n\nContributing\n------------\n\nContributions to scripty are welcome!\n\nPlease reference guidelines to help with setting up your development\nenvironment\n`here <https://github.com/equinoxfitness/scripty/blob/master/CONTRIBUTING.rst>`__.", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "scripty", "package_url": "https://pypi.org/project/scripty/", "platform": "", "project_url": "https://pypi.org/project/scripty/", "project_urls": null, "release_url": "https://pypi.org/project/scripty/0.1.3/", "requires_dist": null, "requires_python": "", "summary": "Script runner to execute ELT and load tasks by Equinox", "version": "0.1.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://badge.fury.io/py/scripty\" rel=\"nofollow\"><img alt=\"PyPI Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/33eca25ebdb82cae669982243188401182c48f19/68747470733a2f2f62616467652e667572792e696f2f70792f736372697074792e737667\"></a>\n<a href=\"https://scripty.readthedocs.io/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1dc2671a0b0cd790dd88b45b2ecd1bceaf52d679/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f736372697074792f62616467652f3f76657273696f6e3d6c6174657374\"></a>\n<a href=\"https://www.codacy.com/gh/equinoxfitness/scripty?utm_source=github.com&amp;amp;utm_medium=referral&amp;amp;utm_content=equinoxfitness/scripty&amp;amp;utm_campaign=Badge_Grade\" rel=\"nofollow\"><img alt=\"Code Quality Grade\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0afad7398a1ec25e265e9bc50c2b7748c2f01bd6/68747470733a2f2f6170692e636f646163792e636f6d2f70726f6a6563742f62616467652f47726164652f6235363734313761353735393466353962623731356663386137323130386266\"></a>\n<a href=\"https://github.com/equinoxfitness/datacoco-email_tools/blob/master/CODE_OF_CONDUCT.rst\" rel=\"nofollow\"><img alt=\"Code of Conduct\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/591d3b135d63fd7f255a3a299d1936e697eaaf27/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f436f6e7472696275746f72253230436f76656e616e742d76322e3025323061646f707465642d6666363962342e737667\"></a>\n<p>Scripty is a simple script runner to execute ELT and load tasks.</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Scripty requires Python 3.6+</p>\n<pre>python3 -m venv &lt;virtual env name&gt;\nsource &lt;virtual env name&gt;/bin/activate\npip install scripty\n</pre>\n</div>\n<div id=\"quickstart\">\n<h2>Quickstart</h2>\n<p>Redshift does not have stored procedures so we will use Scripty to execute our ELT and load tasks.</p>\n<p>Both script runner and SQLWorkbenchJ will use the same notation for variable expansion: <cite>$[?variable]</cite>.  This string will be replaced at runtime by the appropriate variable:</p>\n<p>There are three types of substitution parameters that can be used through script runner.  The first is a set of standard etl params for ease of use:</p>\n<ul>\n<li>-f, from_date, default 1776-07-24</li>\n<li>-t,to_date, default 9999-12-31</li>\n<li>-b, batch_no, default is -1</li>\n</ul>\n<p>The second option is for arbitrary variable expansion.  This is passed in the following format because rundeck commands don\u2019t like json quotes:</p>\n<ul>\n<li>-p, example: -p \u201cparam1-val1, param2-val2\u201d</li>\n</ul>\n<p>The final option is to use the batchy integration</p>\n<ul>\n<li>-wf, batchy_job, this will substitue parameters from a batchy workflow, this should be a fully qualified batchy job name of the format wf.job, if no job is specified it will assume global</li>\n</ul>\n<p>Here is a sample SQL Script.  If run in SQL workbench you will be prompted for values for var1 and var2.</p>\n<pre>drop table if exists  zzztemp;\n\ncreate table zzztemp (\ndt timestamp,\nvar varchar,\nfrom_date timestamp,\nbatch_no integer\n);\n\ninsert into zzztemp\nvalues (getdate(), '$[?var1]', '$[?from_date]', '$[?batch_no]');\n\ninsert into zzztemp\nvalues (getdate(), '$[?var2]', '$[?from_date]', '$[?batch_no]');\n\nselect * from zzztemp;\n</pre>\n<p>In the script runner you would use the following params to substitute that value.  It is assumed these params would be dynamically substituted by the calling script or informatica process:</p>\n<p><tt>python <span class=\"pre\">-m</span> scripty.module <span class=\"pre\">-s</span> \"sample/scripty_test.sql\" <span class=\"pre\">-p</span> <span class=\"pre\">\"var1-cat,</span> <span class=\"pre\">var2-dog\"</span> <span class=\"pre\">-f</span> <span class=\"pre\">'1980-12-31</span> 07:00' <span class=\"pre\">-b</span> '9999'</tt></p>\n<p>Assuming you had workflow config in batchy under wf3, you could also use this script:</p>\n<p><tt>python <span class=\"pre\">-m</span> scripty.module <span class=\"pre\">-s</span> sample/scripty_test.sql <span class=\"pre\">-wf</span> wf3</tt></p>\n</div>\n<div id=\"development\">\n<h2>Development</h2>\n<div id=\"getting-started\">\n<h3>Getting Started</h3>\n<p>It is recommended to use the steps below to set up a virtual environment for development:</p>\n<pre>python3 -m venv &lt;virtual env name&gt;\nsource &lt;virtual env name&gt;/bin/activate\npip install -r requirements.txt\n</pre>\n</div>\n<div id=\"testing\">\n<h3>Testing</h3>\n<pre>pip install -r requirements-dev.txt\n</pre>\n<p>To run the testing suite, simply run the command: <tt>tox</tt> or <tt>python <span class=\"pre\">-m</span> unittest discover tests</tt></p>\n</div>\n</div>\n<div id=\"contributing\">\n<h2>Contributing</h2>\n<p>Contributions to scripty are welcome!</p>\n<p>Please reference guidelines to help with setting up your development\nenvironment\n<a href=\"https://github.com/equinoxfitness/scripty/blob/master/CONTRIBUTING.rst\" rel=\"nofollow\">here</a>.</p>\n</div>\n\n          </div>"}, "last_serial": 6843807, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "f285dc6ee01ce1d3f8d88c4636c65c01", "sha256": "bc2f9c9a037ec1ae9e703193bda80787f2f261807afe6a7ea14e191d214e6273"}, "downloads": -1, "filename": "scripty-0.1.0.tar.gz", "has_sig": false, "md5_digest": "f285dc6ee01ce1d3f8d88c4636c65c01", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5233, "upload_time": "2020-03-11T07:06:00", "upload_time_iso_8601": "2020-03-11T07:06:00.900655Z", "url": "https://files.pythonhosted.org/packages/7b/03/b4082b0f374c6b34a518c016041474ab8f8452872285bd14e4e8a08f0feb/scripty-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "c15cbfae5288a5efa4cc9f53557d8004", "sha256": "531662a34108b2dffc4f0325471c1fda3f8fae2ed35877f118cf095e71d8fe4c"}, "downloads": -1, "filename": "scripty-0.1.1.tar.gz", "has_sig": false, "md5_digest": "c15cbfae5288a5efa4cc9f53557d8004", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5402, "upload_time": "2020-03-17T12:29:08", "upload_time_iso_8601": "2020-03-17T12:29:08.100712Z", "url": "https://files.pythonhosted.org/packages/ca/58/6948708afd5155fb594c4fc1bc69ff21c66e5693ab02ea21290e97c9c34d/scripty-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "c978558eebbdf4559814360bfe6e3386", "sha256": "76388b0a877137f47ebafa780aa87aca2d3ac0cd97de54c76bf5511888ee6f13"}, "downloads": -1, "filename": "scripty-0.1.2.tar.gz", "has_sig": false, "md5_digest": "c978558eebbdf4559814360bfe6e3386", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5491, "upload_time": "2020-03-18T15:49:09", "upload_time_iso_8601": "2020-03-18T15:49:09.396543Z", "url": "https://files.pythonhosted.org/packages/d0/bb/b1dec4136116eba0d8c011cf3591d3a8f72137c0f5112abdf2153c7b6ee0/scripty-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "1fedcc23ea1d4dfdae1da5682aad2528", "sha256": "a3229fd21fa170afb665a9348294f0c6cce0704f187454c4c5e4fab92514232d"}, "downloads": -1, "filename": "scripty-0.1.3.tar.gz", "has_sig": false, "md5_digest": "1fedcc23ea1d4dfdae1da5682aad2528", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5501, "upload_time": "2020-03-19T15:19:08", "upload_time_iso_8601": "2020-03-19T15:19:08.974747Z", "url": "https://files.pythonhosted.org/packages/36/4c/d75e896ddc4d6a02b9d1876d2769c964bb256d849b4e6a9108cffb1a0358/scripty-0.1.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "1fedcc23ea1d4dfdae1da5682aad2528", "sha256": "a3229fd21fa170afb665a9348294f0c6cce0704f187454c4c5e4fab92514232d"}, "downloads": -1, "filename": "scripty-0.1.3.tar.gz", "has_sig": false, "md5_digest": "1fedcc23ea1d4dfdae1da5682aad2528", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5501, "upload_time": "2020-03-19T15:19:08", "upload_time_iso_8601": "2020-03-19T15:19:08.974747Z", "url": "https://files.pythonhosted.org/packages/36/4c/d75e896ddc4d6a02b9d1876d2769c964bb256d849b4e6a9108cffb1a0358/scripty-0.1.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:56:29 2020"}