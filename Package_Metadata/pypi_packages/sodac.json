{"info": {"author": "Blaok Chi", "author_email": "", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "Intended Audience :: Developers", "Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: 3.9", "Programming Language :: Python :: 3 :: Only", "Topic :: System :: Hardware"], "description": "# SODA: Stencil with Optimized Dataflow Architecture\n\n## Publication\n\n+ Yuze Chi, Jason Cong. Exploiting Computation Reuse for Stencil Accelerators. In DAC, 2020. [[PDF]](https://about.blaok.me/pub/dac20-soda-cr.pdf) [[Code]](https://github.com/Blaok/soda-cr)\n+ Yuze Chi, Jason Cong, Peng Wei, Peipei Zhou. [SODA: Stencil with Optimized Dataflow Architecture](https://doi.org/10.1145/3240765.3240850). In ICCAD, 2018. (Best Paper Candidate) [[PDF]](https://about.blaok.me/pub/iccad18.pdf) [[Slides]](https://about.blaok.me/pub/iccad18.slides.pdf) [[Code]](https://github.com/Blaok/soda)\n\n## SODA DSL Example\n\n```soda\n# comments start with hashtag(#)\n\nkernel: blur      # the kernel name, will be used as the kernel name in HLS\nburst width: 512  # I/O width in bits, for Xilinx platform 512 works the best\nunroll factor: 16 # how many pixels are generated per cycle\n\n# specify the dram bank, type, name, and dimension of the input tile\n# the last dimension is not needed and a placeholder '*' must be given\n# dram bank is optional\n# multiple inputs can be specified but 1 and only 1 must specify the dimensions\ninput dram 0 uint16: input(2000, *)\n\n# specify an intermediate stage of computation, may appear 0 or more times\nlocal uint16: tmp(0, 0) = (input(-1, 0) + input(0, 0) + input(1, 0)) / 3\n\n# specify the output\n# dram bank is optional\noutput dram 1 uint16: output(0, 0) = (tmp(0, -1) + tmp(0, 0) + tmp(0, 1)) / 3\n\n# how many times the whole computation is repeated (only works if input matches output)\niterate: 2\n```\n\n## Getting Started\n\n### Prerequisites\n\n+ Python 3.6+ and corresponding `pip`\n\n<details><summary>How to install Python 3.6+ on Ubuntu 16.04+ and CentOS 7?</summary>\n\n#### Ubuntu 16.04\n\n```bash\nsudo apt install software-properties-common python3-pip\nsudo add-apt-repository ppa:deadsnakes/ppa\nsudo apt update\nsudo apt install python3.6\n```\n\n#### Ubuntu 18.04+\n\n```bash\nsudo apt install python3 python3-pip\n```\n\n#### CentOS 7\n\n```bash\nsudo yum install python3 python3-pip\n```\n\n</details>\n\n### Install SODA\n\n#### Install from PyPI\n\n```bash\npython3 -m pip install --user --upgrade sodac\n```\n\n+ Replace `python3` with a more specific Python version higher than or equal to\n    `python3.6`, if necessary.\n+ Make sure `~/.local/bin` is in your `PATH`,\n    or replace `sodac` with `python3 -m soda.sodac` below.\n\n### Generate Vivado HLS kernel code\n\n```bash\nsodac tests/src/blur.soda --xocl-kernel blur_kernel.cpp\n```\n\n### Generate Intel OpenCL kernel code\n\n```bash\nsodac tests/src/blur.soda --iocl-kernel blur_kernel.cl\n```\n\n### Generate Xilinx Object file with AXI MMAP Master Interface\n\nRequries `vivado_hls`.\n\n```bas\nsodac tests/src/blur.soda --xocl-hw-xo blur_kernel.hw.xoh\n```\n\n### Generate Xilinx Object file with AXI Stream Interface\n\nRequries `vivado_hls`.\n\n```bash\nsodac tests/src/blur.soda --xocl-hw-xo blur_kernel.hw.xo --interface axis\n```\n\n### Apply Computation Reuse\n\n```bash\nsodac tests/src/blur.soda --computation-reuse --xocl-kernel blur_kernel.cpp\n```\n\n## Code Snippets\n\n### Configuration\n\n+ 5-point 2D Jacobi: `t0(0, 0) = (t1(0, 1) + t1(1, 0) + t1(0, 0) + t1(0, -1) + t1(-1, 0)) * 0.2f`\n+ tile size is `(2000, *)`\n\nEach function in the below code snippets is synthesized into an RTL module.\nTheir arguments are all `hls::stream` FIFOs; Without unrolling, a simple line-buffer pipeline is generated, producing 1 pixel per cycle.\nWith unrolling, a SODA microarchitecture pipeline is generated, procuding 2 pixeles per cycle.\n\n### Without Unrolling\n\n```c++\n#pragma HLS dataflow\nModule1Func(\n  /*output*/ &from_t1_offset_0_to_t1_offset_1999,\n  /*output*/ &from_t1_offset_0_to_t0_pe_0,\n  /* input*/ &from_super_source_to_t1_offset_0);\nModule2Func(\n  /*output*/ &from_t1_offset_1999_to_t1_offset_2000,\n  /*output*/ &from_t1_offset_1999_to_t0_pe_0,\n  /* input*/ &from_t1_offset_0_to_t1_offset_1999);\nModule3Func(\n  /*output*/ &from_t1_offset_2000_to_t1_offset_2001,\n  /*output*/ &from_t1_offset_2000_to_t0_pe_0,\n  /* input*/ &from_t1_offset_1999_to_t1_offset_2000);\nModule3Func(\n  /*output*/ &from_t1_offset_2001_to_t1_offset_4000,\n  /*output*/ &from_t1_offset_2001_to_t0_pe_0,\n  /* input*/ &from_t1_offset_2000_to_t1_offset_2001);\nModule4Func(\n  /*output*/ &from_t1_offset_4000_to_t0_pe_0,\n  /* input*/ &from_t1_offset_2001_to_t1_offset_4000);\nModule5Func(\n  /*output*/ &from_t0_pe_0_to_super_sink,\n  /* input*/ &from_t1_offset_0_to_t0_pe_0,\n  /* input*/ &from_t1_offset_1999_to_t0_pe_0,\n  /* input*/ &from_t1_offset_2000_to_t0_pe_0,\n  /* input*/ &from_t1_offset_4000_to_t0_pe_0,\n  /* input*/ &from_t1_offset_2001_to_t0_pe_0);\n```\n\nIn the above code snippet, `Module1Func` to `Module4Func` are forwarding modules; they constitute the line buffer.\nThe line buffer size is approximately two lines of pixels, i.e. 4000 pixels.\n`Module5Func` is a computing module; it implements the computation kernel.\nThe whole design is fully pipelined; however, with only 1 computing module, it can only produce 1 pixel per cycle.\n\n### Unroll 2 Times\n\n```c++\n#pragma HLS dataflow\nModule1Func(\n  /*output*/ &from_t1_offset_1_to_t1_offset_1999,\n  /*output*/ &from_t1_offset_1_to_t0_pe_0,\n  /* input*/ &from_super_source_to_t1_offset_1);\nModule1Func(\n  /*output*/ &from_t1_offset_0_to_t1_offset_2000,\n  /*output*/ &from_t1_offset_0_to_t0_pe_1,\n  /* input*/ &from_super_source_to_t1_offset_0);\nModule2Func(\n  /*output*/ &from_t1_offset_1999_to_t1_offset_2001,\n  /*output*/ &from_t1_offset_1999_to_t0_pe_1,\n  /* input*/ &from_t1_offset_1_to_t1_offset_1999);\nModule3Func(\n  /*output*/ &from_t1_offset_2000_to_t1_offset_2002,\n  /*output*/ &from_t1_offset_2000_to_t0_pe_1,\n  /*output*/ &from_t1_offset_2000_to_t0_pe_0,\n  /* input*/ &from_t1_offset_0_to_t1_offset_2000);\nModule4Func(\n  /*output*/ &from_t1_offset_2001_to_t1_offset_4001,\n  /*output*/ &from_t1_offset_2001_to_t0_pe_1,\n  /*output*/ &from_t1_offset_2001_to_t0_pe_0,\n  /* input*/ &from_t1_offset_1999_to_t1_offset_2001);\nModule5Func(\n  /*output*/ &from_t1_offset_2002_to_t1_offset_4000,\n  /*output*/ &from_t1_offset_2002_to_t0_pe_0,\n  /* input*/ &from_t1_offset_2000_to_t1_offset_2002);\nModule6Func(\n  /*output*/ &from_t1_offset_4001_to_t0_pe_0,\n  /* input*/ &from_t1_offset_2001_to_t1_offset_4001);\nModule7Func(\n  /*output*/ &from_t0_pe_0_to_super_sink,\n  /* input*/ &from_t1_offset_1_to_t0_pe_0,\n  /* input*/ &from_t1_offset_2000_to_t0_pe_0,\n  /* input*/ &from_t1_offset_2001_to_t0_pe_0,\n  /* input*/ &from_t1_offset_4001_to_t0_pe_0,\n  /* input*/ &from_t1_offset_2002_to_t0_pe_0);\nModule8Func(\n  /*output*/ &from_t1_offset_4000_to_t0_pe_1,\n  /* input*/ &from_t1_offset_2002_to_t1_offset_4000);\nModule7Func(\n  /*output*/ &from_t0_pe_1_to_super_sink,\n  /* input*/ &from_t1_offset_0_to_t0_pe_1,\n  /* input*/ &from_t1_offset_1999_to_t0_pe_1,\n  /* input*/ &from_t1_offset_2000_to_t0_pe_1,\n  /* input*/ &from_t1_offset_4000_to_t0_pe_1,\n  /* input*/ &from_t1_offset_2001_to_t0_pe_1);\n```\n\nIn the above code snippet, `Module1Func` to `Module6Func` and `Module8Func` are forwarding modules; they constitute the line buffers of the SODA microarchitecture.\nAlthough unrolled, the line buffer size is still approximately two lines of pixels, i.e. 4000 pixels.\n`Module7Func` is a computing module; it is instanciated twice.\nThe whole design is fully pipelined and can produce 2 pixel per cycle.\nIn general, the unroll factor can be set to any number that satisfies the throughput requirement.\n\n## Best Practices\n\n+ For non-iterative stencil, `unroll factor` shall be determined by the DRAM bandwidth, i.e. saturate the external bandwidth, since the resource is usually not the bottleneck\n+ For iterative stencil, to use more PEs in a single iteration or to implement more iterations is yet to be explored\n+ Note that `2.0` will be a `double` number. To generate `float`, use `2.0f`. This may help reduce DSP usage\n+ SODA is tiling-based and the size of the tile is specified in the `input` keyword. The last dimension is omitted because it is not needed in the reuse buffer generation\n\n## Projects Using SODA\n\n+ Licheng Guo, Jason Lau, Yuze Chi, Jie Wang, Cody Hao Yu, Zhe Chen, Zhiru Zhang, Jason Cong . Analysis and Optimization of the Implicit Broadcasts in FPGA HLS to Improve Maximum Frequency. In DAC, 2020. [[PDF]](https://about.blaok.me/pub/dac20-hls-timing.pdf)\n+ Jiajie Li, Yuze Chi, Jason Cong. [HeteroHalide: From Image Processing DSL to Efficient FPGA Acceleration](https://doi.org/10.1145/3373087.3375320). In FPGA, 2020. [[PDF]](https://about.blaok.me/pub/fpga20-heterohalide.pdf) [[Slides]](https://about.blaok.me/pub/fpga20-heterohalide.slides.pdf)\n+ Young-kyu Choi, Yuze Chi, Jie Wang, Jason Cong. [FLASH: Fast, ParalleL, and Accurate Simulator for HLS](https://doi.org/10.1109/TCAD.2020.2970597). In TCAD, 2020. [[PDF]](https://about.blaok.me/pub/tcad20-flash.pdf)\n+ Yi-Hsiang Lai, Yuze Chi, Yuwei Hu, Jie Wang, Cody Hao Yu, Yuan Zhou, Jason Cong, Zhiru Zhang. [HeteroCL: A Multi-Paradigm Programming Infrastructure for Software-Defined Reconfigurable Computing](https://doi.org/10.1145/3289602.3293910). In FPGA, 2019. (Best Paper Candidate) [[PDF]](https://about.blaok.me/pub/fpga19-heterocl.pdf) [[Slides]](https://about.blaok.me/pub/fpga19-heterocl.slides.pdf) [[Code]](https://github.com/cornell-zhang/heterocl)\n+ Yuze Chi, Young-kyu Choi, Jason Cong, Jie Wang. [Rapid Cycle-Accurate Simulator for High-Level Synthesis](https://doi.org/10.1145/3289602.3293918). In FPGA, 2019. [[PDF]](https://about.blaok.me/pub/fpga19-flash.pdf) [[Slides]](https://about.blaok.me/pub/fpga19-flash.slides.pdf)\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Blaok/soda", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "sodac", "package_url": "https://pypi.org/project/sodac/", "platform": "", "project_url": "https://pypi.org/project/sodac/", "project_urls": {"Homepage": "https://github.com/Blaok/soda"}, "release_url": "https://pypi.org/project/sodac/0.0.20200507.dev1/", "requires_dist": ["cached-property", "haoda (>=0.0.20200505.dev1)", "pulp", "textx", "toposort"], "requires_python": ">=3.6", "summary": "Stencil with optimized dataflow architecture", "version": "0.0.20200507.dev1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>SODA: Stencil with Optimized Dataflow Architecture</h1>\n<h2>Publication</h2>\n<ul>\n<li>Yuze Chi, Jason Cong. Exploiting Computation Reuse for Stencil Accelerators. In DAC, 2020. <a href=\"https://about.blaok.me/pub/dac20-soda-cr.pdf\" rel=\"nofollow\">[PDF]</a> <a href=\"https://github.com/Blaok/soda-cr\" rel=\"nofollow\">[Code]</a></li>\n<li>Yuze Chi, Jason Cong, Peng Wei, Peipei Zhou. <a href=\"https://doi.org/10.1145/3240765.3240850\" rel=\"nofollow\">SODA: Stencil with Optimized Dataflow Architecture</a>. In ICCAD, 2018. (Best Paper Candidate) <a href=\"https://about.blaok.me/pub/iccad18.pdf\" rel=\"nofollow\">[PDF]</a> <a href=\"https://about.blaok.me/pub/iccad18.slides.pdf\" rel=\"nofollow\">[Slides]</a> <a href=\"https://github.com/Blaok/soda\" rel=\"nofollow\">[Code]</a></li>\n</ul>\n<h2>SODA DSL Example</h2>\n<pre># comments start with hashtag(#)\n\nkernel: blur      # the kernel name, will be used as the kernel name in HLS\nburst width: 512  # I/O width in bits, for Xilinx platform 512 works the best\nunroll factor: 16 # how many pixels are generated per cycle\n\n# specify the dram bank, type, name, and dimension of the input tile\n# the last dimension is not needed and a placeholder '*' must be given\n# dram bank is optional\n# multiple inputs can be specified but 1 and only 1 must specify the dimensions\ninput dram 0 uint16: input(2000, *)\n\n# specify an intermediate stage of computation, may appear 0 or more times\nlocal uint16: tmp(0, 0) = (input(-1, 0) + input(0, 0) + input(1, 0)) / 3\n\n# specify the output\n# dram bank is optional\noutput dram 1 uint16: output(0, 0) = (tmp(0, -1) + tmp(0, 0) + tmp(0, 1)) / 3\n\n# how many times the whole computation is repeated (only works if input matches output)\niterate: 2\n</pre>\n<h2>Getting Started</h2>\n<h3>Prerequisites</h3>\n<ul>\n<li>Python 3.6+ and corresponding <code>pip</code></li>\n</ul>\n<details><summary>How to install Python 3.6+ on Ubuntu 16.04+ and CentOS 7?</summary>\n<h4>Ubuntu 16.04</h4>\n<pre>sudo apt install software-properties-common python3-pip\nsudo add-apt-repository ppa:deadsnakes/ppa\nsudo apt update\nsudo apt install python3.6\n</pre>\n<h4>Ubuntu 18.04+</h4>\n<pre>sudo apt install python3 python3-pip\n</pre>\n<h4>CentOS 7</h4>\n<pre>sudo yum install python3 python3-pip\n</pre>\n</details>\n<h3>Install SODA</h3>\n<h4>Install from PyPI</h4>\n<pre>python3 -m pip install --user --upgrade sodac\n</pre>\n<ul>\n<li>Replace <code>python3</code> with a more specific Python version higher than or equal to\n<code>python3.6</code>, if necessary.</li>\n<li>Make sure <code>~/.local/bin</code> is in your <code>PATH</code>,\nor replace <code>sodac</code> with <code>python3 -m soda.sodac</code> below.</li>\n</ul>\n<h3>Generate Vivado HLS kernel code</h3>\n<pre>sodac tests/src/blur.soda --xocl-kernel blur_kernel.cpp\n</pre>\n<h3>Generate Intel OpenCL kernel code</h3>\n<pre>sodac tests/src/blur.soda --iocl-kernel blur_kernel.cl\n</pre>\n<h3>Generate Xilinx Object file with AXI MMAP Master Interface</h3>\n<p>Requries <code>vivado_hls</code>.</p>\n<pre>sodac tests/src/blur.soda --xocl-hw-xo blur_kernel.hw.xoh\n</pre>\n<h3>Generate Xilinx Object file with AXI Stream Interface</h3>\n<p>Requries <code>vivado_hls</code>.</p>\n<pre>sodac tests/src/blur.soda --xocl-hw-xo blur_kernel.hw.xo --interface axis\n</pre>\n<h3>Apply Computation Reuse</h3>\n<pre>sodac tests/src/blur.soda --computation-reuse --xocl-kernel blur_kernel.cpp\n</pre>\n<h2>Code Snippets</h2>\n<h3>Configuration</h3>\n<ul>\n<li>5-point 2D Jacobi: <code>t0(0, 0) = (t1(0, 1) + t1(1, 0) + t1(0, 0) + t1(0, -1) + t1(-1, 0)) * 0.2f</code></li>\n<li>tile size is <code>(2000, *)</code></li>\n</ul>\n<p>Each function in the below code snippets is synthesized into an RTL module.\nTheir arguments are all <code>hls::stream</code> FIFOs; Without unrolling, a simple line-buffer pipeline is generated, producing 1 pixel per cycle.\nWith unrolling, a SODA microarchitecture pipeline is generated, procuding 2 pixeles per cycle.</p>\n<h3>Without Unrolling</h3>\n<pre><span class=\"cp\">#pragma HLS dataflow</span>\n<span class=\"n\">Module1Func</span><span class=\"p\">(</span>\n  <span class=\"cm\">/*output*/</span> <span class=\"o\">&amp;</span><span class=\"n\">from_t1_offset_0_to_t1_offset_1999</span><span class=\"p\">,</span>\n  <span class=\"cm\">/*output*/</span> <span class=\"o\">&amp;</span><span class=\"n\">from_t1_offset_0_to_t0_pe_0</span><span class=\"p\">,</span>\n  <span class=\"cm\">/* input*/</span> <span class=\"o\">&amp;</span><span class=\"n\">from_super_source_to_t1_offset_0</span><span class=\"p\">);</span>\n<span class=\"n\">Module2Func</span><span class=\"p\">(</span>\n  <span class=\"cm\">/*output*/</span> <span class=\"o\">&amp;</span><span class=\"n\">from_t1_offset_1999_to_t1_offset_2000</span><span class=\"p\">,</span>\n  <span class=\"cm\">/*output*/</span> <span class=\"o\">&amp;</span><span class=\"n\">from_t1_offset_1999_to_t0_pe_0</span><span class=\"p\">,</span>\n  <span class=\"cm\">/* input*/</span> <span class=\"o\">&amp;</span><span class=\"n\">from_t1_offset_0_to_t1_offset_1999</span><span class=\"p\">);</span>\n<span class=\"n\">Module3Func</span><span class=\"p\">(</span>\n  <span class=\"cm\">/*output*/</span> <span class=\"o\">&amp;</span><span class=\"n\">from_t1_offset_2000_to_t1_offset_2001</span><span class=\"p\">,</span>\n  <span class=\"cm\">/*output*/</span> <span class=\"o\">&amp;</span><span class=\"n\">from_t1_offset_2000_to_t0_pe_0</span><span class=\"p\">,</span>\n  <span class=\"cm\">/* input*/</span> <span class=\"o\">&amp;</span><span class=\"n\">from_t1_offset_1999_to_t1_offset_2000</span><span class=\"p\">);</span>\n<span class=\"n\">Module3Func</span><span class=\"p\">(</span>\n  <span class=\"cm\">/*output*/</span> <span class=\"o\">&amp;</span><span class=\"n\">from_t1_offset_2001_to_t1_offset_4000</span><span class=\"p\">,</span>\n  <span class=\"cm\">/*output*/</span> <span class=\"o\">&amp;</span><span class=\"n\">from_t1_offset_2001_to_t0_pe_0</span><span class=\"p\">,</span>\n  <span class=\"cm\">/* input*/</span> <span class=\"o\">&amp;</span><span class=\"n\">from_t1_offset_2000_to_t1_offset_2001</span><span class=\"p\">);</span>\n<span class=\"n\">Module4Func</span><span class=\"p\">(</span>\n  <span class=\"cm\">/*output*/</span> <span class=\"o\">&amp;</span><span class=\"n\">from_t1_offset_4000_to_t0_pe_0</span><span class=\"p\">,</span>\n  <span class=\"cm\">/* input*/</span> <span class=\"o\">&amp;</span><span class=\"n\">from_t1_offset_2001_to_t1_offset_4000</span><span class=\"p\">);</span>\n<span class=\"n\">Module5Func</span><span class=\"p\">(</span>\n  <span class=\"cm\">/*output*/</span> <span class=\"o\">&amp;</span><span class=\"n\">from_t0_pe_0_to_super_sink</span><span class=\"p\">,</span>\n  <span class=\"cm\">/* input*/</span> <span class=\"o\">&amp;</span><span class=\"n\">from_t1_offset_0_to_t0_pe_0</span><span class=\"p\">,</span>\n  <span class=\"cm\">/* input*/</span> <span class=\"o\">&amp;</span><span class=\"n\">from_t1_offset_1999_to_t0_pe_0</span><span class=\"p\">,</span>\n  <span class=\"cm\">/* input*/</span> <span class=\"o\">&amp;</span><span class=\"n\">from_t1_offset_2000_to_t0_pe_0</span><span class=\"p\">,</span>\n  <span class=\"cm\">/* input*/</span> <span class=\"o\">&amp;</span><span class=\"n\">from_t1_offset_4000_to_t0_pe_0</span><span class=\"p\">,</span>\n  <span class=\"cm\">/* input*/</span> <span class=\"o\">&amp;</span><span class=\"n\">from_t1_offset_2001_to_t0_pe_0</span><span class=\"p\">);</span>\n</pre>\n<p>In the above code snippet, <code>Module1Func</code> to <code>Module4Func</code> are forwarding modules; they constitute the line buffer.\nThe line buffer size is approximately two lines of pixels, i.e. 4000 pixels.\n<code>Module5Func</code> is a computing module; it implements the computation kernel.\nThe whole design is fully pipelined; however, with only 1 computing module, it can only produce 1 pixel per cycle.</p>\n<h3>Unroll 2 Times</h3>\n<pre><span class=\"cp\">#pragma HLS dataflow</span>\n<span class=\"n\">Module1Func</span><span class=\"p\">(</span>\n  <span class=\"cm\">/*output*/</span> <span class=\"o\">&amp;</span><span class=\"n\">from_t1_offset_1_to_t1_offset_1999</span><span class=\"p\">,</span>\n  <span class=\"cm\">/*output*/</span> <span class=\"o\">&amp;</span><span class=\"n\">from_t1_offset_1_to_t0_pe_0</span><span class=\"p\">,</span>\n  <span class=\"cm\">/* input*/</span> <span class=\"o\">&amp;</span><span class=\"n\">from_super_source_to_t1_offset_1</span><span class=\"p\">);</span>\n<span class=\"n\">Module1Func</span><span class=\"p\">(</span>\n  <span class=\"cm\">/*output*/</span> <span class=\"o\">&amp;</span><span class=\"n\">from_t1_offset_0_to_t1_offset_2000</span><span class=\"p\">,</span>\n  <span class=\"cm\">/*output*/</span> <span class=\"o\">&amp;</span><span class=\"n\">from_t1_offset_0_to_t0_pe_1</span><span class=\"p\">,</span>\n  <span class=\"cm\">/* input*/</span> <span class=\"o\">&amp;</span><span class=\"n\">from_super_source_to_t1_offset_0</span><span class=\"p\">);</span>\n<span class=\"n\">Module2Func</span><span class=\"p\">(</span>\n  <span class=\"cm\">/*output*/</span> <span class=\"o\">&amp;</span><span class=\"n\">from_t1_offset_1999_to_t1_offset_2001</span><span class=\"p\">,</span>\n  <span class=\"cm\">/*output*/</span> <span class=\"o\">&amp;</span><span class=\"n\">from_t1_offset_1999_to_t0_pe_1</span><span class=\"p\">,</span>\n  <span class=\"cm\">/* input*/</span> <span class=\"o\">&amp;</span><span class=\"n\">from_t1_offset_1_to_t1_offset_1999</span><span class=\"p\">);</span>\n<span class=\"n\">Module3Func</span><span class=\"p\">(</span>\n  <span class=\"cm\">/*output*/</span> <span class=\"o\">&amp;</span><span class=\"n\">from_t1_offset_2000_to_t1_offset_2002</span><span class=\"p\">,</span>\n  <span class=\"cm\">/*output*/</span> <span class=\"o\">&amp;</span><span class=\"n\">from_t1_offset_2000_to_t0_pe_1</span><span class=\"p\">,</span>\n  <span class=\"cm\">/*output*/</span> <span class=\"o\">&amp;</span><span class=\"n\">from_t1_offset_2000_to_t0_pe_0</span><span class=\"p\">,</span>\n  <span class=\"cm\">/* input*/</span> <span class=\"o\">&amp;</span><span class=\"n\">from_t1_offset_0_to_t1_offset_2000</span><span class=\"p\">);</span>\n<span class=\"n\">Module4Func</span><span class=\"p\">(</span>\n  <span class=\"cm\">/*output*/</span> <span class=\"o\">&amp;</span><span class=\"n\">from_t1_offset_2001_to_t1_offset_4001</span><span class=\"p\">,</span>\n  <span class=\"cm\">/*output*/</span> <span class=\"o\">&amp;</span><span class=\"n\">from_t1_offset_2001_to_t0_pe_1</span><span class=\"p\">,</span>\n  <span class=\"cm\">/*output*/</span> <span class=\"o\">&amp;</span><span class=\"n\">from_t1_offset_2001_to_t0_pe_0</span><span class=\"p\">,</span>\n  <span class=\"cm\">/* input*/</span> <span class=\"o\">&amp;</span><span class=\"n\">from_t1_offset_1999_to_t1_offset_2001</span><span class=\"p\">);</span>\n<span class=\"n\">Module5Func</span><span class=\"p\">(</span>\n  <span class=\"cm\">/*output*/</span> <span class=\"o\">&amp;</span><span class=\"n\">from_t1_offset_2002_to_t1_offset_4000</span><span class=\"p\">,</span>\n  <span class=\"cm\">/*output*/</span> <span class=\"o\">&amp;</span><span class=\"n\">from_t1_offset_2002_to_t0_pe_0</span><span class=\"p\">,</span>\n  <span class=\"cm\">/* input*/</span> <span class=\"o\">&amp;</span><span class=\"n\">from_t1_offset_2000_to_t1_offset_2002</span><span class=\"p\">);</span>\n<span class=\"n\">Module6Func</span><span class=\"p\">(</span>\n  <span class=\"cm\">/*output*/</span> <span class=\"o\">&amp;</span><span class=\"n\">from_t1_offset_4001_to_t0_pe_0</span><span class=\"p\">,</span>\n  <span class=\"cm\">/* input*/</span> <span class=\"o\">&amp;</span><span class=\"n\">from_t1_offset_2001_to_t1_offset_4001</span><span class=\"p\">);</span>\n<span class=\"n\">Module7Func</span><span class=\"p\">(</span>\n  <span class=\"cm\">/*output*/</span> <span class=\"o\">&amp;</span><span class=\"n\">from_t0_pe_0_to_super_sink</span><span class=\"p\">,</span>\n  <span class=\"cm\">/* input*/</span> <span class=\"o\">&amp;</span><span class=\"n\">from_t1_offset_1_to_t0_pe_0</span><span class=\"p\">,</span>\n  <span class=\"cm\">/* input*/</span> <span class=\"o\">&amp;</span><span class=\"n\">from_t1_offset_2000_to_t0_pe_0</span><span class=\"p\">,</span>\n  <span class=\"cm\">/* input*/</span> <span class=\"o\">&amp;</span><span class=\"n\">from_t1_offset_2001_to_t0_pe_0</span><span class=\"p\">,</span>\n  <span class=\"cm\">/* input*/</span> <span class=\"o\">&amp;</span><span class=\"n\">from_t1_offset_4001_to_t0_pe_0</span><span class=\"p\">,</span>\n  <span class=\"cm\">/* input*/</span> <span class=\"o\">&amp;</span><span class=\"n\">from_t1_offset_2002_to_t0_pe_0</span><span class=\"p\">);</span>\n<span class=\"n\">Module8Func</span><span class=\"p\">(</span>\n  <span class=\"cm\">/*output*/</span> <span class=\"o\">&amp;</span><span class=\"n\">from_t1_offset_4000_to_t0_pe_1</span><span class=\"p\">,</span>\n  <span class=\"cm\">/* input*/</span> <span class=\"o\">&amp;</span><span class=\"n\">from_t1_offset_2002_to_t1_offset_4000</span><span class=\"p\">);</span>\n<span class=\"n\">Module7Func</span><span class=\"p\">(</span>\n  <span class=\"cm\">/*output*/</span> <span class=\"o\">&amp;</span><span class=\"n\">from_t0_pe_1_to_super_sink</span><span class=\"p\">,</span>\n  <span class=\"cm\">/* input*/</span> <span class=\"o\">&amp;</span><span class=\"n\">from_t1_offset_0_to_t0_pe_1</span><span class=\"p\">,</span>\n  <span class=\"cm\">/* input*/</span> <span class=\"o\">&amp;</span><span class=\"n\">from_t1_offset_1999_to_t0_pe_1</span><span class=\"p\">,</span>\n  <span class=\"cm\">/* input*/</span> <span class=\"o\">&amp;</span><span class=\"n\">from_t1_offset_2000_to_t0_pe_1</span><span class=\"p\">,</span>\n  <span class=\"cm\">/* input*/</span> <span class=\"o\">&amp;</span><span class=\"n\">from_t1_offset_4000_to_t0_pe_1</span><span class=\"p\">,</span>\n  <span class=\"cm\">/* input*/</span> <span class=\"o\">&amp;</span><span class=\"n\">from_t1_offset_2001_to_t0_pe_1</span><span class=\"p\">);</span>\n</pre>\n<p>In the above code snippet, <code>Module1Func</code> to <code>Module6Func</code> and <code>Module8Func</code> are forwarding modules; they constitute the line buffers of the SODA microarchitecture.\nAlthough unrolled, the line buffer size is still approximately two lines of pixels, i.e. 4000 pixels.\n<code>Module7Func</code> is a computing module; it is instanciated twice.\nThe whole design is fully pipelined and can produce 2 pixel per cycle.\nIn general, the unroll factor can be set to any number that satisfies the throughput requirement.</p>\n<h2>Best Practices</h2>\n<ul>\n<li>For non-iterative stencil, <code>unroll factor</code> shall be determined by the DRAM bandwidth, i.e. saturate the external bandwidth, since the resource is usually not the bottleneck</li>\n<li>For iterative stencil, to use more PEs in a single iteration or to implement more iterations is yet to be explored</li>\n<li>Note that <code>2.0</code> will be a <code>double</code> number. To generate <code>float</code>, use <code>2.0f</code>. This may help reduce DSP usage</li>\n<li>SODA is tiling-based and the size of the tile is specified in the <code>input</code> keyword. The last dimension is omitted because it is not needed in the reuse buffer generation</li>\n</ul>\n<h2>Projects Using SODA</h2>\n<ul>\n<li>Licheng Guo, Jason Lau, Yuze Chi, Jie Wang, Cody Hao Yu, Zhe Chen, Zhiru Zhang, Jason Cong . Analysis and Optimization of the Implicit Broadcasts in FPGA HLS to Improve Maximum Frequency. In DAC, 2020. <a href=\"https://about.blaok.me/pub/dac20-hls-timing.pdf\" rel=\"nofollow\">[PDF]</a></li>\n<li>Jiajie Li, Yuze Chi, Jason Cong. <a href=\"https://doi.org/10.1145/3373087.3375320\" rel=\"nofollow\">HeteroHalide: From Image Processing DSL to Efficient FPGA Acceleration</a>. In FPGA, 2020. <a href=\"https://about.blaok.me/pub/fpga20-heterohalide.pdf\" rel=\"nofollow\">[PDF]</a> <a href=\"https://about.blaok.me/pub/fpga20-heterohalide.slides.pdf\" rel=\"nofollow\">[Slides]</a></li>\n<li>Young-kyu Choi, Yuze Chi, Jie Wang, Jason Cong. <a href=\"https://doi.org/10.1109/TCAD.2020.2970597\" rel=\"nofollow\">FLASH: Fast, ParalleL, and Accurate Simulator for HLS</a>. In TCAD, 2020. <a href=\"https://about.blaok.me/pub/tcad20-flash.pdf\" rel=\"nofollow\">[PDF]</a></li>\n<li>Yi-Hsiang Lai, Yuze Chi, Yuwei Hu, Jie Wang, Cody Hao Yu, Yuan Zhou, Jason Cong, Zhiru Zhang. <a href=\"https://doi.org/10.1145/3289602.3293910\" rel=\"nofollow\">HeteroCL: A Multi-Paradigm Programming Infrastructure for Software-Defined Reconfigurable Computing</a>. In FPGA, 2019. (Best Paper Candidate) <a href=\"https://about.blaok.me/pub/fpga19-heterocl.pdf\" rel=\"nofollow\">[PDF]</a> <a href=\"https://about.blaok.me/pub/fpga19-heterocl.slides.pdf\" rel=\"nofollow\">[Slides]</a> <a href=\"https://github.com/cornell-zhang/heterocl\" rel=\"nofollow\">[Code]</a></li>\n<li>Yuze Chi, Young-kyu Choi, Jason Cong, Jie Wang. <a href=\"https://doi.org/10.1145/3289602.3293918\" rel=\"nofollow\">Rapid Cycle-Accurate Simulator for High-Level Synthesis</a>. In FPGA, 2019. <a href=\"https://about.blaok.me/pub/fpga19-flash.pdf\" rel=\"nofollow\">[PDF]</a> <a href=\"https://about.blaok.me/pub/fpga19-flash.slides.pdf\" rel=\"nofollow\">[Slides]</a></li>\n</ul>\n\n          </div>"}, "last_serial": 7191313, "releases": {"0.0.20200411.dev1": [{"comment_text": "", "digests": {"md5": "449857543f78bd185cb984a1160b8014", "sha256": "f7d1938f84d5959a9294d67560c99715144505ce73b947cdbe01aa152b2ada13"}, "downloads": -1, "filename": "sodac-0.0.20200411.dev1-py3-none-any.whl", "has_sig": false, "md5_digest": "449857543f78bd185cb984a1160b8014", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 43787, "upload_time": "2020-04-12T03:31:45", "upload_time_iso_8601": "2020-04-12T03:31:45.411801Z", "url": "https://files.pythonhosted.org/packages/b6/4b/70219c007a7120b983ca0762fd267b6c11a4314f7680f9fc0ee88eb6fe4c/sodac-0.0.20200411.dev1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3458be2735a57d5365368f0f1bdd3238", "sha256": "d49284407def8aa61977fe55eccd5f146e8ef9b3edcad8e51bcb6d877bc74f5e"}, "downloads": -1, "filename": "sodac-0.0.20200411.dev1.tar.gz", "has_sig": false, "md5_digest": "3458be2735a57d5365368f0f1bdd3238", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 39794, "upload_time": "2020-04-12T03:31:48", "upload_time_iso_8601": "2020-04-12T03:31:48.773626Z", "url": "https://files.pythonhosted.org/packages/c0/f4/69a751e29d2a6dcb91b3c96a28cdef9fcb97310fab8860612f3efe5bb41f/sodac-0.0.20200411.dev1.tar.gz", "yanked": false}], "0.0.20200424.dev1": [{"comment_text": "", "digests": {"md5": "1dc31c86178c22a81e531b9cc7e06f09", "sha256": "e6a3155c9be9c670ccfa9a89ca139233955dfab3cfab0822b20c025fc1bba0f6"}, "downloads": -1, "filename": "sodac-0.0.20200424.dev1-py3.6.egg", "has_sig": false, "md5_digest": "1dc31c86178c22a81e531b9cc7e06f09", "packagetype": "bdist_egg", "python_version": "3.6", "requires_python": ">=3.6", "size": 111807, "upload_time": "2020-04-24T23:38:48", "upload_time_iso_8601": "2020-04-24T23:38:48.307736Z", "url": "https://files.pythonhosted.org/packages/f5/e4/c9f75f0751d8599827034b0c5f0fcf48e83773858c73d0211bf859709030/sodac-0.0.20200424.dev1-py3.6.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "55c147f55ffad9a12c4abec44e481ee6", "sha256": "fc970eacf03172020ed18d2a5ba6b5293ed08dd06358bca4a3a7bc8acc218fdb"}, "downloads": -1, "filename": "sodac-0.0.20200424.dev1-py3-none-any.whl", "has_sig": false, "md5_digest": "55c147f55ffad9a12c4abec44e481ee6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 46332, "upload_time": "2020-04-24T23:38:47", "upload_time_iso_8601": "2020-04-24T23:38:47.203103Z", "url": "https://files.pythonhosted.org/packages/b7/65/04ccf474cfffa7dd756bcf4b06afbc501a4be0850b72aee546efbcf72109/sodac-0.0.20200424.dev1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "df6b071553bfe94ecec0c8d3b5c5e01b", "sha256": "b1ca5c9b48c0160ee7575c578e6551a8ffc6ec42e2ebfc0fa354c2996454f6e0"}, "downloads": -1, "filename": "sodac-0.0.20200424.dev1.tar.gz", "has_sig": false, "md5_digest": "df6b071553bfe94ecec0c8d3b5c5e01b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 41570, "upload_time": "2020-04-24T23:38:49", "upload_time_iso_8601": "2020-04-24T23:38:49.006717Z", "url": "https://files.pythonhosted.org/packages/cd/4c/980540548eda775bf58bd7204d8636524b953b9c2731162d1306c5fb0e5c/sodac-0.0.20200424.dev1.tar.gz", "yanked": false}], "0.0.20200428.dev1": [{"comment_text": "", "digests": {"md5": "92bd980cd0ddba7e0db6c604b7ebb57d", "sha256": "e4ded312430a0e432b474e16fddf1ebe88c163893435b4d57ae56406d1aaabfc"}, "downloads": -1, "filename": "sodac-0.0.20200428.dev1-py3.6.egg", "has_sig": false, "md5_digest": "92bd980cd0ddba7e0db6c604b7ebb57d", "packagetype": "bdist_egg", "python_version": "3.6", "requires_python": ">=3.6", "size": 111780, "upload_time": "2020-04-28T19:12:52", "upload_time_iso_8601": "2020-04-28T19:12:52.450879Z", "url": "https://files.pythonhosted.org/packages/31/e3/3f420c67b3f1bf0cbe3d117ec6da14a63cc0662ccb1c00e31eaff310026c/sodac-0.0.20200428.dev1-py3.6.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "bfbe2650b25233b20b78b184628a53df", "sha256": "75c902af34ed02313e8924392f11f7bf781608bd93838aa99381fdd2758bdf5d"}, "downloads": -1, "filename": "sodac-0.0.20200428.dev1-py3-none-any.whl", "has_sig": false, "md5_digest": "bfbe2650b25233b20b78b184628a53df", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 46341, "upload_time": "2020-04-28T19:12:51", "upload_time_iso_8601": "2020-04-28T19:12:51.474397Z", "url": "https://files.pythonhosted.org/packages/41/e7/f75c2d8708f6ff5c405b99b12539051f9f994b9fb8fa357e7307bcef4648/sodac-0.0.20200428.dev1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "64efe46ed49878a593762b12107a8cc9", "sha256": "ea575045422f9979319ded7302e42bc608edb700520a19088bb8df76e5b23fe6"}, "downloads": -1, "filename": "sodac-0.0.20200428.dev1.tar.gz", "has_sig": false, "md5_digest": "64efe46ed49878a593762b12107a8cc9", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 41567, "upload_time": "2020-04-28T19:12:53", "upload_time_iso_8601": "2020-04-28T19:12:53.580426Z", "url": "https://files.pythonhosted.org/packages/aa/9e/eb5eee30c71b7f6c6e8424e002907598a5ed21e001f81323b36b1b776130/sodac-0.0.20200428.dev1.tar.gz", "yanked": false}], "0.0.20200428.dev2": [{"comment_text": "", "digests": {"md5": "d8aedd142c2602258c1887bfb55d1fdd", "sha256": "566c9439c94ad6671fc99c147048fa9bf0e8570f6a50e2d385727d9524f6aae0"}, "downloads": -1, "filename": "sodac-0.0.20200428.dev2-py3.6.egg", "has_sig": false, "md5_digest": "d8aedd142c2602258c1887bfb55d1fdd", "packagetype": "bdist_egg", "python_version": "3.6", "requires_python": ">=3.6", "size": 196409, "upload_time": "2020-04-29T01:12:27", "upload_time_iso_8601": "2020-04-29T01:12:27.636530Z", "url": "https://files.pythonhosted.org/packages/73/2f/57c09e40a43b6463a0e2766ab162a8ea38e476a336cfbcf221df3a5ff086/sodac-0.0.20200428.dev2-py3.6.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "9eb217c3625ba487c83bd2481458a151", "sha256": "77183e01fca31215935783880d01c6d4019bb05b1c1d57b649ac88475390b4fc"}, "downloads": -1, "filename": "sodac-0.0.20200428.dev2-py3-none-any.whl", "has_sig": false, "md5_digest": "9eb217c3625ba487c83bd2481458a151", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 81483, "upload_time": "2020-04-29T01:12:26", "upload_time_iso_8601": "2020-04-29T01:12:26.573518Z", "url": "https://files.pythonhosted.org/packages/0d/d3/6e5833dcb21a7ebe90c2ff16e6edc9c8c288defec174cc0512b6d1544441/sodac-0.0.20200428.dev2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5c4fbb14fc7db0385cf4eb031e7313ed", "sha256": "c2478268c65838ce1f0ce7577f42107825ffaa7266960e9499d10d5650fa0c25"}, "downloads": -1, "filename": "sodac-0.0.20200428.dev2.tar.gz", "has_sig": false, "md5_digest": "5c4fbb14fc7db0385cf4eb031e7313ed", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 72405, "upload_time": "2020-04-29T01:12:28", "upload_time_iso_8601": "2020-04-29T01:12:28.909824Z", "url": "https://files.pythonhosted.org/packages/8c/db/17077f8bcd18b5fa26d9a9fbfbfb0b7c14888029cadfe107142f791db986/sodac-0.0.20200428.dev2.tar.gz", "yanked": false}], "0.0.20200429.dev1": [{"comment_text": "", "digests": {"md5": "a5ae4cb4edd7a875f6efd80358516076", "sha256": "60f77477ddaacc65dd946a65b67434a7260ed343922d9b55d9a38486c6f7e9fd"}, "downloads": -1, "filename": "sodac-0.0.20200429.dev1-py3.6.egg", "has_sig": false, "md5_digest": "a5ae4cb4edd7a875f6efd80358516076", "packagetype": "bdist_egg", "python_version": "3.6", "requires_python": ">=3.6", "size": 207118, "upload_time": "2020-04-29T18:14:38", "upload_time_iso_8601": "2020-04-29T18:14:38.160217Z", "url": "https://files.pythonhosted.org/packages/1d/8c/cd674c50fa442e7cc6ea3360e2c15e5426e9d9f5fcac0423ca21f22acdf0/sodac-0.0.20200429.dev1-py3.6.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "536d689c41d3292d1addcd389e6adc15", "sha256": "34e65e1ea09ccb0ca8a94b642c4011a20e2f5c7e6a56c310395549a3775e8eee"}, "downloads": -1, "filename": "sodac-0.0.20200429.dev1-py3-none-any.whl", "has_sig": false, "md5_digest": "536d689c41d3292d1addcd389e6adc15", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 85717, "upload_time": "2020-04-29T18:14:37", "upload_time_iso_8601": "2020-04-29T18:14:37.206948Z", "url": "https://files.pythonhosted.org/packages/c3/2b/03616e0b5102c485f532ab77e417b0ce85a796c2f98ac168d2c93495cafe/sodac-0.0.20200429.dev1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "873649c09b2851381f7156f040f5d811", "sha256": "95726940624a0da5109c748ddfa627304a06d9f40069644e943b2a8173334cf0"}, "downloads": -1, "filename": "sodac-0.0.20200429.dev1.tar.gz", "has_sig": false, "md5_digest": "873649c09b2851381f7156f040f5d811", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 76013, "upload_time": "2020-04-29T18:14:39", "upload_time_iso_8601": "2020-04-29T18:14:39.115897Z", "url": "https://files.pythonhosted.org/packages/57/14/49359ae1b09cd0ca2177d93391325b1a21ec9063adad70f2faf75d776443/sodac-0.0.20200429.dev1.tar.gz", "yanked": false}], "0.0.20200503.dev1": [{"comment_text": "", "digests": {"md5": "f5f2ed6f6d15a0b1c233e8a3f1861e3e", "sha256": "b8ae6757770ce311d1ea15e3a911006cdd26e16bb64e7184ce71414f1f3ecc53"}, "downloads": -1, "filename": "sodac-0.0.20200503.dev1-py3.6.egg", "has_sig": false, "md5_digest": "f5f2ed6f6d15a0b1c233e8a3f1861e3e", "packagetype": "bdist_egg", "python_version": "3.6", "requires_python": ">=3.6", "size": 206930, "upload_time": "2020-05-04T05:28:36", "upload_time_iso_8601": "2020-05-04T05:28:36.658683Z", "url": "https://files.pythonhosted.org/packages/87/c0/be8885f6a1bf3bfd7984e43044f72cbe270fa794505cc72501cdc0e583d1/sodac-0.0.20200503.dev1-py3.6.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "6b9ec8ad7f1431fd7a69fa5a78cfcb0d", "sha256": "aa68282830d328032252db6a565cecf4c21c2411f0f0dd59a5d456edd71400fd"}, "downloads": -1, "filename": "sodac-0.0.20200503.dev1-py3-none-any.whl", "has_sig": false, "md5_digest": "6b9ec8ad7f1431fd7a69fa5a78cfcb0d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 85750, "upload_time": "2020-05-04T05:28:35", "upload_time_iso_8601": "2020-05-04T05:28:35.629264Z", "url": "https://files.pythonhosted.org/packages/41/ae/79f9efa9289dd492ee07c393b45e00e8138c29b14de1cab97dfb93b784d6/sodac-0.0.20200503.dev1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9fa268706da24120a6be73877415bec7", "sha256": "b11fa26a161f635234b4af2b3db1e766612e9bae3e1f0ed37c38cc80faa99f97"}, "downloads": -1, "filename": "sodac-0.0.20200503.dev1.tar.gz", "has_sig": false, "md5_digest": "9fa268706da24120a6be73877415bec7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 76067, "upload_time": "2020-05-04T05:28:37", "upload_time_iso_8601": "2020-05-04T05:28:37.760069Z", "url": "https://files.pythonhosted.org/packages/8c/77/61f05579edd0bc2631d0364e948601c28c08e0181f22dd693a3dbc42025e/sodac-0.0.20200503.dev1.tar.gz", "yanked": false}], "0.0.20200505.dev1": [{"comment_text": "", "digests": {"md5": "9fb99928093a9d3954bb6c25411089e1", "sha256": "83f51a5de298a9a66870c956d43c9462398b83555d41d3060dbfd1197676c3a8"}, "downloads": -1, "filename": "sodac-0.0.20200505.dev1-py3.6.egg", "has_sig": false, "md5_digest": "9fb99928093a9d3954bb6c25411089e1", "packagetype": "bdist_egg", "python_version": "3.6", "requires_python": ">=3.6", "size": 206992, "upload_time": "2020-05-05T17:46:07", "upload_time_iso_8601": "2020-05-05T17:46:07.913020Z", "url": "https://files.pythonhosted.org/packages/82/75/effe8163d49da106142a6f572676313f0febbad738cb6f0dc754e50ece54/sodac-0.0.20200505.dev1-py3.6.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "9f4c80cdae804c400d86b8829997af10", "sha256": "2f40cd617ab66a4885a38e3cf2c676c4436aa63bc984ae51402ab04d7fc265e4"}, "downloads": -1, "filename": "sodac-0.0.20200505.dev1-py3-none-any.whl", "has_sig": false, "md5_digest": "9f4c80cdae804c400d86b8829997af10", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 85781, "upload_time": "2020-05-05T17:46:06", "upload_time_iso_8601": "2020-05-05T17:46:06.690252Z", "url": "https://files.pythonhosted.org/packages/04/0a/47efec5fb704bed304b0044fea3cd44d1071687686962e43a24fd33af849/sodac-0.0.20200505.dev1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7b79d3b3ae64b0e77b4915418e7b4430", "sha256": "7ef394c81cf7c4c6a37752899b933b6570428f4bd3fb8518b7bd22086dbc3e8d"}, "downloads": -1, "filename": "sodac-0.0.20200505.dev1.tar.gz", "has_sig": false, "md5_digest": "7b79d3b3ae64b0e77b4915418e7b4430", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 76144, "upload_time": "2020-05-05T17:46:08", "upload_time_iso_8601": "2020-05-05T17:46:08.789896Z", "url": "https://files.pythonhosted.org/packages/f3/2e/bbdb035846a97055c10832671515cfa70e75d59a6aeb4f45884d3cf1a9f0/sodac-0.0.20200505.dev1.tar.gz", "yanked": false}], "0.0.20200507.dev1": [{"comment_text": "", "digests": {"md5": "9200d87383753067cace9d7728d424c1", "sha256": "f5284a7f9880dc5741fa966c306a982911bf22980491830eda728fec2a4fedd3"}, "downloads": -1, "filename": "sodac-0.0.20200507.dev1-py3.6.egg", "has_sig": false, "md5_digest": "9200d87383753067cace9d7728d424c1", "packagetype": "bdist_egg", "python_version": "3.6", "requires_python": ">=3.6", "size": 207124, "upload_time": "2020-05-07T19:51:34", "upload_time_iso_8601": "2020-05-07T19:51:34.887608Z", "url": "https://files.pythonhosted.org/packages/16/12/56ed7b129f91830ee0d853e01cb0f88a1a611908f8c499026c3d67a72ceb/sodac-0.0.20200507.dev1-py3.6.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "ce6d6dad9bcb4c88e8a62498222d4aec", "sha256": "92bcf9b8db9338c10319d522bbb1aa583c420fbd46d5cfc34ecfd25178bbbdc9"}, "downloads": -1, "filename": "sodac-0.0.20200507.dev1-py3-none-any.whl", "has_sig": false, "md5_digest": "ce6d6dad9bcb4c88e8a62498222d4aec", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 85850, "upload_time": "2020-05-07T19:51:33", "upload_time_iso_8601": "2020-05-07T19:51:33.839104Z", "url": "https://files.pythonhosted.org/packages/d7/d1/60fb7135e8b9f214b3ef13de617bb0096935a103d6e4ea87ce13abffca39/sodac-0.0.20200507.dev1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "439badb3c18afaa8db0b33c16d0eb892", "sha256": "66e3bc31f902a323e077925bdef9af4dd8d82ea038a979a33aeb3f08ebbf4d27"}, "downloads": -1, "filename": "sodac-0.0.20200507.dev1.tar.gz", "has_sig": false, "md5_digest": "439badb3c18afaa8db0b33c16d0eb892", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 76164, "upload_time": "2020-05-07T19:51:35", "upload_time_iso_8601": "2020-05-07T19:51:35.784773Z", "url": "https://files.pythonhosted.org/packages/1f/3e/965776aa8ef19bca8fe126223b42cfd1e3f308afd33129013849fe082d64/sodac-0.0.20200507.dev1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "9200d87383753067cace9d7728d424c1", "sha256": "f5284a7f9880dc5741fa966c306a982911bf22980491830eda728fec2a4fedd3"}, "downloads": -1, "filename": "sodac-0.0.20200507.dev1-py3.6.egg", "has_sig": false, "md5_digest": "9200d87383753067cace9d7728d424c1", "packagetype": "bdist_egg", "python_version": "3.6", "requires_python": ">=3.6", "size": 207124, "upload_time": "2020-05-07T19:51:34", "upload_time_iso_8601": "2020-05-07T19:51:34.887608Z", "url": "https://files.pythonhosted.org/packages/16/12/56ed7b129f91830ee0d853e01cb0f88a1a611908f8c499026c3d67a72ceb/sodac-0.0.20200507.dev1-py3.6.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "ce6d6dad9bcb4c88e8a62498222d4aec", "sha256": "92bcf9b8db9338c10319d522bbb1aa583c420fbd46d5cfc34ecfd25178bbbdc9"}, "downloads": -1, "filename": "sodac-0.0.20200507.dev1-py3-none-any.whl", "has_sig": false, "md5_digest": "ce6d6dad9bcb4c88e8a62498222d4aec", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 85850, "upload_time": "2020-05-07T19:51:33", "upload_time_iso_8601": "2020-05-07T19:51:33.839104Z", "url": "https://files.pythonhosted.org/packages/d7/d1/60fb7135e8b9f214b3ef13de617bb0096935a103d6e4ea87ce13abffca39/sodac-0.0.20200507.dev1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "439badb3c18afaa8db0b33c16d0eb892", "sha256": "66e3bc31f902a323e077925bdef9af4dd8d82ea038a979a33aeb3f08ebbf4d27"}, "downloads": -1, "filename": "sodac-0.0.20200507.dev1.tar.gz", "has_sig": false, "md5_digest": "439badb3c18afaa8db0b33c16d0eb892", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 76164, "upload_time": "2020-05-07T19:51:35", "upload_time_iso_8601": "2020-05-07T19:51:35.784773Z", "url": "https://files.pythonhosted.org/packages/1f/3e/965776aa8ef19bca8fe126223b42cfd1e3f308afd33129013849fe082d64/sodac-0.0.20200507.dev1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:06:57 2020"}