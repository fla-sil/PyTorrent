{"info": {"author": "caiyunapp", "author_email": "admin@caiyunapp.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Programming Language :: C", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": "<h1 align=\"center\">\nnujson: The UltraJSON Fork That Support Numpy Serialization\n</h1>\n\n<div align=\"center\">\n\n*Inspired by [Pandas' ujson](https://github.com/pandas-dev/pandas/tree/master/pandas/_libs/src/ujson/python)*\n\n[![Build Status](https://travis-ci.org/caiyunapp/ultrajson.svg?branch=master)](https://travis-ci.org/caiyunapp/ultrajson)\n[![Version Status](https://img.shields.io/pypi/v/nujson.svg)](https://pypi.org/project/nujson/)\n\n\n</div>\n\n- [How to install](#how-to-install)\n- [Example](#example)\n- [Why make such a package and what is modified](#why-make-such-a-package-and-what-is-modified)\n\n# How to install\n\nPython version: Python2.7, Python3.5+\n\nUsing pip:\n\n```sh\npip install nujson\n```\n\nClone and install:\n\n```sh\n# git clone\ngit clone https://github.com/caiyunapp/ultrajson\n\n# Don't use `python setup.py install`\n# NumPy will install automatically\npip install -e .\n```\n\n\nIf get error like this:\n\n```\nERROR: Could not find a version that satisfies the requirement numpy>=1.16.4 (from nujson) (from versions: 1.9.3)\nERROR: No matching distribution found for numpy>=1.16.4 (from nujson)\n```\n\nTry this:\n\n```sh\npip uninstall numpy\npip install numpy==1.16.4\npip install nujson\n```\n\n# Example\n\n```python\n>>> import numpy as np\n>>> import nujson as ujson\n>>> a = {\"a\": np.int64(100)}\n>>> ujson.dumps(a)\n'{\"a\":100}'\n>>> a[\"b\"] = np.float64(10.9)\n>>> ujson.dumps(a)\n'{\"a\":100,\"b\":10.9}'\n>>> a[\"c\"] = np.str_(\"12\")\n>>> ujson.dumps(a)\n'{\"a\":100,\"b\":10.9,\"c\":\"12\"}'\n>>> a[\"d\"] = np.array(list(range(10)))\n>>> ujson.dumps(a)\n'{\"a\":100,\"b\":10.9,\"c\":\"12\",\"d\":[0,1,2,3,4,5,6,7,8,9]}'\n>>> a[\"e\"] = np.repeat(3.9, 4)\n>>> ujson.dumps(a)\n'{\"a\":100,\"b\":10.9,\"c\":\"12\",\"d\":[0,1,2,3,4,5,6,7,8,9],\"e\":[3.9,3.9,3.9,3.9]}'\n```\n\n# Why make such a package and what is modified\n\nOn Python3, some data types of NumPy is not serializable. Here is some references we searched:\n\n- [python - Why are some numpy datatypes JSON serializable and others not? - Stack Overflow](https://stackoverflow.com/questions/44459168/why-are-some-numpy-datatypes-json-serializable-and-others-not)\n- [Maximum recursion level reached in Python 3 - Issue #221 - esnme/ultrajson](https://github.com/esnme/ultrajson/issues/221)\n- [Issue 24313: json fails to serialise numpy.int64 - Python tracker](https://bugs.python.org/issue24313)\n\nOne solution is type conversion like: `int(numpy.int64)` and `numpy.array.tolist()`.\nBut it's not good for performance. After searching Internet, find a no longer maintained project [Komnomnomnom/ultrajson](https://github.com/Komnomnomnom/ultrajson) recommond to use [Pandas' ujson](https://github.com/pandas-dev/pandas/tree/master/pandas/_libs/src/ujson/python).\n\nWe tried but found Pandas is to heavy for our projects. So we decide to build our own light weight fork. Currentltly, the esn's ujson master branch has some problems we need to solve, and the `master` branch is based on the [the v1.35 ujson](https://github.com/esnme/ultrajson/releases/tag/v1.35).\n\nThe main point is convert NumPy data type in C, with calling NumPy's header. [Commit 187bd15](https://github.com/caiyunapp/ultrajson/commit/187bd155b7acd303aa6f5571f5b858c0d244edd6) has the most changes we made to support NumPy, and [Commit afedc42](https://github.com/caiyunapp/ultrajson/commit/afedc42b2ce288064821981acd70592342da55fa) fix a build issue on macOS caused by Clang.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "http://github.com/caiyunapp/ultrajson", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://caiyunapp.com", "keywords": "numpy ujson json python3", "license": "BSD License", "maintainer": "", "maintainer_email": "", "name": "nujson", "package_url": "https://pypi.org/project/nujson/", "platform": "any", "project_url": "https://pypi.org/project/nujson/", "project_urls": {"Download": "http://github.com/caiyunapp/ultrajson", "Homepage": "https://caiyunapp.com", "Source": "http://github.com/caiyunapp/ultrajson"}, "release_url": "https://pypi.org/project/nujson/1.35.2/", "requires_dist": null, "requires_python": "", "summary": "Ultra fast JSON encoder and decoder for Python with NumPy support", "version": "1.35.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>\nnujson: The UltraJSON Fork That Support Numpy Serialization\n</h1>\n<div>\n<p><em>Inspired by <a href=\"https://github.com/pandas-dev/pandas/tree/master/pandas/_libs/src/ujson/python\" rel=\"nofollow\">Pandas' ujson</a></em></p>\n<p><a href=\"https://travis-ci.org/caiyunapp/ultrajson\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/29715cd27d83d94bf194b73bace5e64dcf7892ee/68747470733a2f2f7472617669732d63692e6f72672f63616979756e6170702f756c7472616a736f6e2e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://pypi.org/project/nujson/\" rel=\"nofollow\"><img alt=\"Version Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c9918cbd60196bae9409bce2387e42de0d9bb9b8/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f6e756a736f6e2e737667\"></a></p>\n</div>\n<ul>\n<li><a href=\"#how-to-install\" rel=\"nofollow\">How to install</a></li>\n<li><a href=\"#example\" rel=\"nofollow\">Example</a></li>\n<li><a href=\"#why-make-such-a-package-and-what-is-modified\" rel=\"nofollow\">Why make such a package and what is modified</a></li>\n</ul>\n<h1>How to install</h1>\n<p>Python version: Python2.7, Python3.5+</p>\n<p>Using pip:</p>\n<pre>pip install nujson\n</pre>\n<p>Clone and install:</p>\n<pre><span class=\"c1\"># git clone</span>\ngit clone https://github.com/caiyunapp/ultrajson\n\n<span class=\"c1\"># Don't use `python setup.py install`</span>\n<span class=\"c1\"># NumPy will install automatically</span>\npip install -e .\n</pre>\n<p>If get error like this:</p>\n<pre><code>ERROR: Could not find a version that satisfies the requirement numpy&gt;=1.16.4 (from nujson) (from versions: 1.9.3)\nERROR: No matching distribution found for numpy&gt;=1.16.4 (from nujson)\n</code></pre>\n<p>Try this:</p>\n<pre>pip uninstall numpy\npip install <span class=\"nv\">numpy</span><span class=\"o\">==</span><span class=\"m\">1</span>.16.4\npip install nujson\n</pre>\n<h1>Example</h1>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">nujson</span> <span class=\"k\">as</span> <span class=\"nn\">ujson</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">\"a\"</span><span class=\"p\">:</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">int64</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">)}</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">ujson</span><span class=\"o\">.</span><span class=\"n\">dumps</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span>\n<span class=\"s1\">'{\"a\":100}'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">a</span><span class=\"p\">[</span><span class=\"s2\">\"b\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">float64</span><span class=\"p\">(</span><span class=\"mf\">10.9</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">ujson</span><span class=\"o\">.</span><span class=\"n\">dumps</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span>\n<span class=\"s1\">'{\"a\":100,\"b\":10.9}'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">a</span><span class=\"p\">[</span><span class=\"s2\">\"c\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">str_</span><span class=\"p\">(</span><span class=\"s2\">\"12\"</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">ujson</span><span class=\"o\">.</span><span class=\"n\">dumps</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span>\n<span class=\"s1\">'{\"a\":100,\"b\":10.9,\"c\":\"12\"}'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">a</span><span class=\"p\">[</span><span class=\"s2\">\"d\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)))</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">ujson</span><span class=\"o\">.</span><span class=\"n\">dumps</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span>\n<span class=\"s1\">'{\"a\":100,\"b\":10.9,\"c\":\"12\",\"d\":[0,1,2,3,4,5,6,7,8,9]}'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">a</span><span class=\"p\">[</span><span class=\"s2\">\"e\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">repeat</span><span class=\"p\">(</span><span class=\"mf\">3.9</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">ujson</span><span class=\"o\">.</span><span class=\"n\">dumps</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span>\n<span class=\"s1\">'{\"a\":100,\"b\":10.9,\"c\":\"12\",\"d\":[0,1,2,3,4,5,6,7,8,9],\"e\":[3.9,3.9,3.9,3.9]}'</span>\n</pre>\n<h1>Why make such a package and what is modified</h1>\n<p>On Python3, some data types of NumPy is not serializable. Here is some references we searched:</p>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/44459168/why-are-some-numpy-datatypes-json-serializable-and-others-not\" rel=\"nofollow\">python - Why are some numpy datatypes JSON serializable and others not? - Stack Overflow</a></li>\n<li><a href=\"https://github.com/esnme/ultrajson/issues/221\" rel=\"nofollow\">Maximum recursion level reached in Python 3 - Issue #221 - esnme/ultrajson</a></li>\n<li><a href=\"https://bugs.python.org/issue24313\" rel=\"nofollow\">Issue 24313: json fails to serialise numpy.int64 - Python tracker</a></li>\n</ul>\n<p>One solution is type conversion like: <code>int(numpy.int64)</code> and <code>numpy.array.tolist()</code>.\nBut it's not good for performance. After searching Internet, find a no longer maintained project <a href=\"https://github.com/Komnomnomnom/ultrajson\" rel=\"nofollow\">Komnomnomnom/ultrajson</a> recommond to use <a href=\"https://github.com/pandas-dev/pandas/tree/master/pandas/_libs/src/ujson/python\" rel=\"nofollow\">Pandas' ujson</a>.</p>\n<p>We tried but found Pandas is to heavy for our projects. So we decide to build our own light weight fork. Currentltly, the esn's ujson master branch has some problems we need to solve, and the <code>master</code> branch is based on the <a href=\"https://github.com/esnme/ultrajson/releases/tag/v1.35\" rel=\"nofollow\">the v1.35 ujson</a>.</p>\n<p>The main point is convert NumPy data type in C, with calling NumPy's header. <a href=\"https://github.com/caiyunapp/ultrajson/commit/187bd155b7acd303aa6f5571f5b858c0d244edd6\" rel=\"nofollow\">Commit 187bd15</a> has the most changes we made to support NumPy, and <a href=\"https://github.com/caiyunapp/ultrajson/commit/afedc42b2ce288064821981acd70592342da55fa\" rel=\"nofollow\">Commit afedc42</a> fix a build issue on macOS caused by Clang.</p>\n\n          </div>"}, "last_serial": 6315157, "releases": {"1.35": [{"comment_text": "", "digests": {"md5": "acc555f3746f815a4eda1e7e46b36859", "sha256": "04c68880a06c34a966e294d4f4d5432e3d8e3000a1b28ae800c332112f77297b"}, "downloads": -1, "filename": "nujson-1.35.tar.gz", "has_sig": false, "md5_digest": "acc555f3746f815a4eda1e7e46b36859", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 187249, "upload_time": "2019-07-25T03:50:03", "upload_time_iso_8601": "2019-07-25T03:50:03.033902Z", "url": "https://files.pythonhosted.org/packages/19/87/573272b835926ecc56cf771ecd4440ee54dcd3e384c783782e9ed47f336c/nujson-1.35.tar.gz", "yanked": false}], "1.35.2": [{"comment_text": "", "digests": {"md5": "391d2cc863a3f1c96d5a9895650991c7", "sha256": "2b231051b6e983d38e9fc4801841a60cd91e6266505f616d32046e54e92e7032"}, "downloads": -1, "filename": "nujson-1.35.2.tar.gz", "has_sig": false, "md5_digest": "391d2cc863a3f1c96d5a9895650991c7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 187231, "upload_time": "2019-12-17T03:50:09", "upload_time_iso_8601": "2019-12-17T03:50:09.708726Z", "url": "https://files.pythonhosted.org/packages/41/76/440ee0166cdb6674fe744f96498cdce6bac7cae0a543b84f19dfa1704fc4/nujson-1.35.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "391d2cc863a3f1c96d5a9895650991c7", "sha256": "2b231051b6e983d38e9fc4801841a60cd91e6266505f616d32046e54e92e7032"}, "downloads": -1, "filename": "nujson-1.35.2.tar.gz", "has_sig": false, "md5_digest": "391d2cc863a3f1c96d5a9895650991c7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 187231, "upload_time": "2019-12-17T03:50:09", "upload_time_iso_8601": "2019-12-17T03:50:09.708726Z", "url": "https://files.pythonhosted.org/packages/41/76/440ee0166cdb6674fe744f96498cdce6bac7cae0a543b84f19dfa1704fc4/nujson-1.35.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:44:17 2020"}