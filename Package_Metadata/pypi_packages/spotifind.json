{"info": {"author": "Samapriya Roy", "author_email": "samapriya.roy@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "Intended Audience :: Science/Research", "License :: OSI Approved :: Apache Software License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "# spotifind\nCombined Spotify and Tunefind Simple Command Line Tool\n\n[![DOI](https://zenodo.org/badge/DOI/10.5281/zenodo.3726351.svg)](https://doi.org/10.5281/zenodo.3726351)\n![Python Version](https://img.shields.io/badge/python-%3E%3D3.2-blue)\n\n![spotifind_transparent_copy](https://user-images.githubusercontent.com/6677629/77322716-8489ec80-6cea-11ea-8d1c-bd2b6e598d21.jpg)\n\n[Tunefind is a music search website](https://www.tunefind.com/) which helps to find music featured in television series and movies. Users can suggest songs related to TV show or movie.If approved, song will be listed on that page.\n\n[Spotify is a digital music streaming service](https://www.spotify.com/) that gives you access to millions of songs, podcasts and videos from artists all over the world, like Apple Music and Amazon Music Unlimited.\n\nOver the span of the last week as people are cooped up working from home, I thought it would be a fun project, to think about soundtracks. I was just getting a new spotify premium account and though you can probably find public playlists for almost any TV series, I thought it would be fun to link Tunefind and Spotify to do this for user generated TV show lists.\n\nSpotifind (Spotify+Tunefind) is a tool designed to first authorize and authenticate your Spotify API and work with Tunefind to search for and create playlists .\n\n![spotifind_main](https://user-images.githubusercontent.com/6677629/77280532-fafefe00-6c9a-11ea-9cf8-be0ff9c0f1fd.png)\n\nThere are two requirements for this tool:\n* You have a spotify account\n* Create a new [spotify client here]\n\nSpotify client setup needs two main steps\n* The Client ID and Client Secret\n* Setting up a redirect URI, you use this to redirect the authorization flow for Spotify. In short, once you authorize your app, the redirect URI will open along with a code that allows for authorization. In this case I use \"http://google.com\" but you can use whatever you would like.\n\n![spotify_client](https://user-images.githubusercontent.com/6677629/77280925-14547a00-6c9c-11ea-91e3-10d898d96ed7.gif)\n\nLet's go back to the problem and the setup\n\n```\n> spotifind -h\nusage: spotifind [-h] {spot_init,spot_auth,spot_refresh,spot_tune} ...\n\nSpotify and Tunefind Bridge Simple CLI\n\npositional arguments:\n  {spot_init,spot_auth,spot_refresh,spot_tune}\n    spot_init           Initialize Spotify & setup client credentials\n    spot_auth           Authorize Spotify Client and get access and refresh\n                        tokens\n    spot_refresh        Refresh spotify token\n    spot_tune           Tunefind playlist to spotify playlist\n\noptional arguments:\n  -h, --help            show this help message and exit\n```\n\nInstall now\n\n```\npip install spotifind\n```\n\n### Spot Init\nYou only have to do this once. This takes a few things into account, your client id, your client secret (don't worry your client secret is not stored in clear text or directly anywhere). It stores three specific things,\n* your client id\n* base64 encoded clientid:clientsecret *(Since base64 encoding is not encryption it is possible to decode this, so try to use this app on your personal computer or virtual machine: Don't worry you can always reset your client secret)*\n* Redirect URI we set earlier\n\nSimply run\n\n```\nspotifind spot_init\n```\n\n### Spot Auth\nThis is the authorization setup, this uses your client id and client secret file you setup using spot_init. Copy and paste the redirect URI and you should be able to create the auth.json credentials file which has the following setup. The setup includes all scopes, in the future the idea would be for a user to simply send out the scopes they want to access. I kept all possible scopes active.\n\n```\n{\n    \"access_token\": \"BQzxzRkNgSxJm0mEc..............lq74SenuW0lFEIqKjJF\",\n    \"token_type\": \"Bearer\",\n    \"expires_in\": 3600,\n    \"refresh_token\": \"AQD80AT2u..............85j2Hk579vTQkstZG-dinGDK7L4\",\n    \"scope\": \"playlist-read-private playlist-read-collaborative user-follow-read playlist-modify-private user-read-email user-read-private user-follow-modify user-modify-playback-state user-library-read user-library-modify playlist-modify-public user-read-playback-state user-read-currently-playing user-read-recently-played user-top-read\"\n}\n```\n\nThe tool setup is as follows\n\n```\n> spotifind spot_auth -h\nusage: spotifind spot_auth [-h] [--overwrite OVERWRITE]\n\noptional arguments:\n  -h, --help            show this help message and exit\n\nOptional named arguments:\n  --overwrite OVERWRITE\n                        Type yes to overwrite existing\n```\nIf you have already done this step, but want to use a different client or different account you can use the setup\n\n```\nspotifind spot_auth --overwrite \"yes\"\n```\n\n### Spot refresh\nThis will be used all the times, though your access token expires every one hour, the refresh token can be used to generate new access tokens. You won't necessarily need this tool but it is built in and used as a module for the spot_tune tool to generate the playlist by first refreshing the access token. Setup is simply\n\n```\nspotifind spot_refresh\n```\n\n### Spot Tune\nThis is the main tool that will be used to convert a Tunefind series URL to a spotify playlist and add it to your account. The tool adds some features such as\n* Checking for existing playlist incase you want to use an existing playlist\n* Checking is songs exist in the playlist, so same songs are not added twice\n* Since you can only add 100 songs at a time, it also iterates through the song list an adds it to the playlist in chunks.\n\nThe tool setup is\n\n```\n> spotifind spot_tune -h\nusage: spotifind spot_tune [-h] --url URL --name NAME --desc DESC --playlist\n                           PLAYLIST\n\noptional arguments:\n  -h, --help           show this help message and exit\n\nRequired named arguments.:\n  --url URL            Tunefind series url\n  --name NAME          Spotify playlist name\n  --desc DESC          Spotify Playlist Description\n  --playlist PLAYLIST  public or private\n```\n\n![spotifind_spot_tune](https://user-images.githubusercontent.com/6677629/77282763-3270a900-6ca1-11ea-9a1e-99bf3eb38f8e.gif)\n\nThe setup was\n\n```\nspotifind spot_tune --url \"https://www.tunefind.com/show/self-made-inspired-by-the-life-of-madam-cj-walker\" --name \"walker\" --desc \"playlist-test\"\n```\n\nThis was a weekend project and so much fun to implement. For now this will be maintained ad hoc and I hope to add more spotify tools inspired by some amazing projects out there and since you are authorizing yourelf with all scopes why not explore more :)\n\n## Changelog\n\n### v0.0.4\n* Replaced fuzzywuzzy with [rapidfuzz](https://github.com/samapriya/spotifind/pull/1)\n\n### v0.0.3\n* Added pagination to get all tracklist\n* Overall improvements\n* Applied Fuzzy song search\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/samapriya/spotifind", "keywords": "", "license": "Apache 2.0", "maintainer": "", "maintainer_email": "", "name": "spotifind", "package_url": "https://pypi.org/project/spotifind/", "platform": "", "project_url": "https://pypi.org/project/spotifind/", "project_urls": {"Homepage": "https://github.com/samapriya/spotifind"}, "release_url": "https://pypi.org/project/spotifind/0.0.4/", "requires_dist": ["requests (>=2.21.1)", "logzero (>=1.5.0)", "beautifulsoup4 (>=4.8.2)", "rapidfuzz (>=0.2.2)"], "requires_python": ">=3.2", "summary": "Spotify and Tunefind Bridge Simple CLI", "version": "0.0.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>spotifind</h1>\n<p>Combined Spotify and Tunefind Simple Command Line Tool</p>\n<p><a href=\"https://doi.org/10.5281/zenodo.3726351\" rel=\"nofollow\"><img alt=\"DOI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2ce805a0bd7b07ba6f01c22ba58d4efcd5700523/68747470733a2f2f7a656e6f646f2e6f72672f62616467652f444f492f31302e353238312f7a656e6f646f2e333732363335312e737667\"></a>\n<img alt=\"Python Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1d85465701b65819b215296bbf85f1896ef1b750/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f707974686f6e2d253345253344332e322d626c7565\"></p>\n<p><img alt=\"spotifind_transparent_copy\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d32f96d825e3d5f800ebe0b6dac7440191dfc60d/68747470733a2f2f757365722d696d616765732e67697468756275736572636f6e74656e742e636f6d2f363637373632392f37373332323731362d38343839656338302d366365612d313165612d386431632d6264326236653539386432312e6a7067\"></p>\n<p><a href=\"https://www.tunefind.com/\" rel=\"nofollow\">Tunefind is a music search website</a> which helps to find music featured in television series and movies. Users can suggest songs related to TV show or movie.If approved, song will be listed on that page.</p>\n<p><a href=\"https://www.spotify.com/\" rel=\"nofollow\">Spotify is a digital music streaming service</a> that gives you access to millions of songs, podcasts and videos from artists all over the world, like Apple Music and Amazon Music Unlimited.</p>\n<p>Over the span of the last week as people are cooped up working from home, I thought it would be a fun project, to think about soundtracks. I was just getting a new spotify premium account and though you can probably find public playlists for almost any TV series, I thought it would be fun to link Tunefind and Spotify to do this for user generated TV show lists.</p>\n<p>Spotifind (Spotify+Tunefind) is a tool designed to first authorize and authenticate your Spotify API and work with Tunefind to search for and create playlists .</p>\n<p><img alt=\"spotifind_main\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/93bc6cfba5c2a1b3e012f6d416ba921bfc17b611/68747470733a2f2f757365722d696d616765732e67697468756275736572636f6e74656e742e636f6d2f363637373632392f37373238303533322d66616665666530302d366339612d313165612d396366382d6265306666396330663166642e706e67\"></p>\n<p>There are two requirements for this tool:</p>\n<ul>\n<li>You have a spotify account</li>\n<li>Create a new [spotify client here]</li>\n</ul>\n<p>Spotify client setup needs two main steps</p>\n<ul>\n<li>The Client ID and Client Secret</li>\n<li>Setting up a redirect URI, you use this to redirect the authorization flow for Spotify. In short, once you authorize your app, the redirect URI will open along with a code that allows for authorization. In this case I use \"<a href=\"http://google.com\" rel=\"nofollow\">http://google.com</a>\" but you can use whatever you would like.</li>\n</ul>\n<p><img alt=\"spotify_client\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d7c464cb91e8b812391a622d3600476056f00cb8/68747470733a2f2f757365722d696d616765732e67697468756275736572636f6e74656e742e636f6d2f363637373632392f37373238303932352d31343534376130302d366339632d313165612d393165332d3130643839386439366564372e676966\"></p>\n<p>Let's go back to the problem and the setup</p>\n<pre><code>&gt; spotifind -h\nusage: spotifind [-h] {spot_init,spot_auth,spot_refresh,spot_tune} ...\n\nSpotify and Tunefind Bridge Simple CLI\n\npositional arguments:\n  {spot_init,spot_auth,spot_refresh,spot_tune}\n    spot_init           Initialize Spotify &amp; setup client credentials\n    spot_auth           Authorize Spotify Client and get access and refresh\n                        tokens\n    spot_refresh        Refresh spotify token\n    spot_tune           Tunefind playlist to spotify playlist\n\noptional arguments:\n  -h, --help            show this help message and exit\n</code></pre>\n<p>Install now</p>\n<pre><code>pip install spotifind\n</code></pre>\n<h3>Spot Init</h3>\n<p>You only have to do this once. This takes a few things into account, your client id, your client secret (don't worry your client secret is not stored in clear text or directly anywhere). It stores three specific things,</p>\n<ul>\n<li>your client id</li>\n<li>base64 encoded clientid:clientsecret <em>(Since base64 encoding is not encryption it is possible to decode this, so try to use this app on your personal computer or virtual machine: Don't worry you can always reset your client secret)</em></li>\n<li>Redirect URI we set earlier</li>\n</ul>\n<p>Simply run</p>\n<pre><code>spotifind spot_init\n</code></pre>\n<h3>Spot Auth</h3>\n<p>This is the authorization setup, this uses your client id and client secret file you setup using spot_init. Copy and paste the redirect URI and you should be able to create the auth.json credentials file which has the following setup. The setup includes all scopes, in the future the idea would be for a user to simply send out the scopes they want to access. I kept all possible scopes active.</p>\n<pre><code>{\n    \"access_token\": \"BQzxzRkNgSxJm0mEc..............lq74SenuW0lFEIqKjJF\",\n    \"token_type\": \"Bearer\",\n    \"expires_in\": 3600,\n    \"refresh_token\": \"AQD80AT2u..............85j2Hk579vTQkstZG-dinGDK7L4\",\n    \"scope\": \"playlist-read-private playlist-read-collaborative user-follow-read playlist-modify-private user-read-email user-read-private user-follow-modify user-modify-playback-state user-library-read user-library-modify playlist-modify-public user-read-playback-state user-read-currently-playing user-read-recently-played user-top-read\"\n}\n</code></pre>\n<p>The tool setup is as follows</p>\n<pre><code>&gt; spotifind spot_auth -h\nusage: spotifind spot_auth [-h] [--overwrite OVERWRITE]\n\noptional arguments:\n  -h, --help            show this help message and exit\n\nOptional named arguments:\n  --overwrite OVERWRITE\n                        Type yes to overwrite existing\n</code></pre>\n<p>If you have already done this step, but want to use a different client or different account you can use the setup</p>\n<pre><code>spotifind spot_auth --overwrite \"yes\"\n</code></pre>\n<h3>Spot refresh</h3>\n<p>This will be used all the times, though your access token expires every one hour, the refresh token can be used to generate new access tokens. You won't necessarily need this tool but it is built in and used as a module for the spot_tune tool to generate the playlist by first refreshing the access token. Setup is simply</p>\n<pre><code>spotifind spot_refresh\n</code></pre>\n<h3>Spot Tune</h3>\n<p>This is the main tool that will be used to convert a Tunefind series URL to a spotify playlist and add it to your account. The tool adds some features such as</p>\n<ul>\n<li>Checking for existing playlist incase you want to use an existing playlist</li>\n<li>Checking is songs exist in the playlist, so same songs are not added twice</li>\n<li>Since you can only add 100 songs at a time, it also iterates through the song list an adds it to the playlist in chunks.</li>\n</ul>\n<p>The tool setup is</p>\n<pre><code>&gt; spotifind spot_tune -h\nusage: spotifind spot_tune [-h] --url URL --name NAME --desc DESC --playlist\n                           PLAYLIST\n\noptional arguments:\n  -h, --help           show this help message and exit\n\nRequired named arguments.:\n  --url URL            Tunefind series url\n  --name NAME          Spotify playlist name\n  --desc DESC          Spotify Playlist Description\n  --playlist PLAYLIST  public or private\n</code></pre>\n<p><img alt=\"spotifind_spot_tune\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/646615f59da2fff9c6d079e0bc07c7dc42413c9b/68747470733a2f2f757365722d696d616765732e67697468756275736572636f6e74656e742e636f6d2f363637373632392f37373238323736332d33323730613930302d366361312d313165612d396131652d3939626633656233386638652e676966\"></p>\n<p>The setup was</p>\n<pre><code>spotifind spot_tune --url \"https://www.tunefind.com/show/self-made-inspired-by-the-life-of-madam-cj-walker\" --name \"walker\" --desc \"playlist-test\"\n</code></pre>\n<p>This was a weekend project and so much fun to implement. For now this will be maintained ad hoc and I hope to add more spotify tools inspired by some amazing projects out there and since you are authorizing yourelf with all scopes why not explore more :)</p>\n<h2>Changelog</h2>\n<h3>v0.0.4</h3>\n<ul>\n<li>Replaced fuzzywuzzy with <a href=\"https://github.com/samapriya/spotifind/pull/1\" rel=\"nofollow\">rapidfuzz</a></li>\n</ul>\n<h3>v0.0.3</h3>\n<ul>\n<li>Added pagination to get all tracklist</li>\n<li>Overall improvements</li>\n<li>Applied Fuzzy song search</li>\n</ul>\n\n          </div>"}, "last_serial": 6885943, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "4b418e75b2b4a631355286400363bf09", "sha256": "a0fcb728ffe8050788a9e69176bb0863f6a0bf72fa304145b4673346e4d816a3"}, "downloads": -1, "filename": "spotifind-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "4b418e75b2b4a631355286400363bf09", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.2", "size": 12674, "upload_time": "2020-03-23T05:26:22", "upload_time_iso_8601": "2020-03-23T05:26:22.933968Z", "url": "https://files.pythonhosted.org/packages/66/48/d8783549d5dc6825af767d2cfa96da20a9073c1a0939d7071892d5069c96/spotifind-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "08dfb969b8bf964570b6344b98bb2f47", "sha256": "9fc186bb96486aa1768bdb760c72925bde68327e0f155ac4d1585962bfedeeda"}, "downloads": -1, "filename": "spotifind-0.0.1.tar.gz", "has_sig": false, "md5_digest": "08dfb969b8bf964570b6344b98bb2f47", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.2", "size": 8798, "upload_time": "2020-03-23T05:26:25", "upload_time_iso_8601": "2020-03-23T05:26:25.030021Z", "url": "https://files.pythonhosted.org/packages/ec/b1/14d2be4daa53eb418644a759e8b24a3f2c5561acbb442d8e729e10a80894/spotifind-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "9b87628f7bf8ce7e29ed5cac13d5cdaa", "sha256": "5767acc4decfa7416a51468f21e0504220ac7e65fe7987774f287f83f5352575"}, "downloads": -1, "filename": "spotifind-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "9b87628f7bf8ce7e29ed5cac13d5cdaa", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.2", "size": 13226, "upload_time": "2020-03-24T22:07:24", "upload_time_iso_8601": "2020-03-24T22:07:24.257922Z", "url": "https://files.pythonhosted.org/packages/5a/f5/28206864d07e8f2e1e33dc2c68ea4d5a436af5ce24d2eb017dfbddc4a493/spotifind-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1786814776147b3d63f0ca907370c75c", "sha256": "6e5481b8bbe99cca8785d129657c67827ce2148b958fd229ac04ee483b62448e"}, "downloads": -1, "filename": "spotifind-0.0.2.tar.gz", "has_sig": false, "md5_digest": "1786814776147b3d63f0ca907370c75c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.2", "size": 11314, "upload_time": "2020-03-24T22:07:25", "upload_time_iso_8601": "2020-03-24T22:07:25.578099Z", "url": "https://files.pythonhosted.org/packages/a0/03/1e807cba7b0229388b62daded6e93e6fbfe23c729b0e9605059833551ea0/spotifind-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "f10a901b1d3f38d3631144dc2269c811", "sha256": "532c299184f7e37efd9b5b4506887f25130b315148483a7d51aa1d06f9a6dba8"}, "downloads": -1, "filename": "spotifind-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "f10a901b1d3f38d3631144dc2269c811", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.2", "size": 13239, "upload_time": "2020-03-24T22:31:38", "upload_time_iso_8601": "2020-03-24T22:31:38.297867Z", "url": "https://files.pythonhosted.org/packages/30/1a/9aa9c10fe981d1aa078ccfabb75775e03159fd5410fbe85849ffe71aa310/spotifind-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c59f47fcb92025a66d63beeafda83ed9", "sha256": "76554539d35755b2d0c80995b79e6fa111d6b62fd870d4d8ab15ec8b4b3a7c9e"}, "downloads": -1, "filename": "spotifind-0.0.3.tar.gz", "has_sig": false, "md5_digest": "c59f47fcb92025a66d63beeafda83ed9", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.2", "size": 11333, "upload_time": "2020-03-24T22:31:39", "upload_time_iso_8601": "2020-03-24T22:31:39.340010Z", "url": "https://files.pythonhosted.org/packages/df/d4/7453b9d2666c70772f79f27b47d2259aa3f7273eab9d852027ae684d2810/spotifind-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "ae600bac7e71b2eb3ef46359a0a83c7f", "sha256": "e75f99eb68fb10486f9f04e49a2e453b19709371b04430a627723e19cdeebaf0"}, "downloads": -1, "filename": "spotifind-0.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "ae600bac7e71b2eb3ef46359a0a83c7f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.2", "size": 13361, "upload_time": "2020-03-26T00:40:25", "upload_time_iso_8601": "2020-03-26T00:40:25.156150Z", "url": "https://files.pythonhosted.org/packages/74/82/9de414efc9b248ee2c8aa5188782b04e85742da70450c768d45988d540f5/spotifind-0.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "47cc252cb3e483a042db5fc52df14575", "sha256": "e6aabc7c13fde45a50dd6822b4ea223d5842252fa04e89473d7178a8fea5006b"}, "downloads": -1, "filename": "spotifind-0.0.4.tar.gz", "has_sig": false, "md5_digest": "47cc252cb3e483a042db5fc52df14575", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.2", "size": 11574, "upload_time": "2020-03-26T00:40:26", "upload_time_iso_8601": "2020-03-26T00:40:26.534324Z", "url": "https://files.pythonhosted.org/packages/be/3c/611e5d146e63ac5648b853c05f41c958a2437b6cc64409af849a3058da6a/spotifind-0.0.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ae600bac7e71b2eb3ef46359a0a83c7f", "sha256": "e75f99eb68fb10486f9f04e49a2e453b19709371b04430a627723e19cdeebaf0"}, "downloads": -1, "filename": "spotifind-0.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "ae600bac7e71b2eb3ef46359a0a83c7f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.2", "size": 13361, "upload_time": "2020-03-26T00:40:25", "upload_time_iso_8601": "2020-03-26T00:40:25.156150Z", "url": "https://files.pythonhosted.org/packages/74/82/9de414efc9b248ee2c8aa5188782b04e85742da70450c768d45988d540f5/spotifind-0.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "47cc252cb3e483a042db5fc52df14575", "sha256": "e6aabc7c13fde45a50dd6822b4ea223d5842252fa04e89473d7178a8fea5006b"}, "downloads": -1, "filename": "spotifind-0.0.4.tar.gz", "has_sig": false, "md5_digest": "47cc252cb3e483a042db5fc52df14575", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.2", "size": 11574, "upload_time": "2020-03-26T00:40:26", "upload_time_iso_8601": "2020-03-26T00:40:26.534324Z", "url": "https://files.pythonhosted.org/packages/be/3c/611e5d146e63ac5648b853c05f41c958a2437b6cc64409af849a3058da6a/spotifind-0.0.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:04:33 2020"}