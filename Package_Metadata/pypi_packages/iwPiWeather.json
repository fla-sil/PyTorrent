{"info": {"author": "Dejan Roshkovski", "author_email": "", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": "Installation:\n-------------\n\nYou can either get the source code and include it in your application\nmanlually, or use can use pip instead.\n\n``pip install iwPiWeather``\n\nOr depending on your raspberry config for python3 you might need to run\n\n``pip3 install iwPiWeather``\n\nUse example:\n------------\n\nInclude your package, define the pins and initialize the thread\n\n::\n\n    import iwPiWeather\n\n    displayPinout = { \"rs\": 22, \"en\": 17, \"d7\": 18, \"d6\": 23, \"d5\": 24, \"d4\": 25 }\n    weather = iwPiWeather.weatherDisplay(apiKey='passyouroowmapikey', poolRate=120, dispPins=displayPinout, autoStart=True)\n\nYou can pass the following arguments in the constructor:\n\n-  *apiKey* - Required field, you need to provide the OpenWeatherMap API\n   key.\n\n-  *poolRate* - Time to wait between each call to the OpenWeatherMap\n   API.\n\n-  *dispPins* - Layout of the display pins connection\n\n-  *autoStart* - If this is toggled off, the thread will start in sleep\n   mode, and no calls will be made until the thread is manually started.\n\nThe created weather object will be actually a thread that runs in the\nbackground. So you can integrate this functionality in your application,\nthis will run as a background process in a separate thread.\n\nYou can temporarily pause the display update thread by calling\n``weather.stopWatch()`` which will allow you for example to stop pooling\nand displaying the weather data on the display and use the display for\nsomething else in your integration.\n\nTo restart the thread and keep reprinting the weather data you can use\n``weather.startWatch()``\n\nTo stop the thread and cleanup the object you can call\n``weather.stopThread()``. This will kill the thread and you can safely\nstop the application.", "description_content_type": "", "docs_url": null, "download_url": "https://github.com/dejanr92/iwPiWeather/archive/master.zip", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/dejanr92/iwPyWeather", "keywords": "RaspberryPi,LCD display,16x2,Pi", "license": "gpl-3.0", "maintainer": "", "maintainer_email": "", "name": "iwPiWeather", "package_url": "https://pypi.org/project/iwPiWeather/", "platform": "", "project_url": "https://pypi.org/project/iwPiWeather/", "project_urls": {"Download": "https://github.com/dejanr92/iwPiWeather/archive/master.zip", "Homepage": "https://github.com/dejanr92/iwPyWeather"}, "release_url": "https://pypi.org/project/iwPiWeather/0.1.1/", "requires_dist": null, "requires_python": "", "summary": "Gets your weather data for a 16x2 display on raspberry pi", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"installation\">\n<h2>Installation:</h2>\n<p>You can either get the source code and include it in your application\nmanlually, or use can use pip instead.</p>\n<p><tt>pip install iwPiWeather</tt></p>\n<p>Or depending on your raspberry config for python3 you might need to run</p>\n<p><tt>pip3 install iwPiWeather</tt></p>\n</div>\n<div id=\"use-example\">\n<h2>Use example:</h2>\n<p>Include your package, define the pins and initialize the thread</p>\n<pre>import iwPiWeather\n\ndisplayPinout = { \"rs\": 22, \"en\": 17, \"d7\": 18, \"d6\": 23, \"d5\": 24, \"d4\": 25 }\nweather = iwPiWeather.weatherDisplay(apiKey='passyouroowmapikey', poolRate=120, dispPins=displayPinout, autoStart=True)\n</pre>\n<p>You can pass the following arguments in the constructor:</p>\n<ul>\n<li><em>apiKey</em> - Required field, you need to provide the OpenWeatherMap API\nkey.</li>\n<li><em>poolRate</em> - Time to wait between each call to the OpenWeatherMap\nAPI.</li>\n<li><em>dispPins</em> - Layout of the display pins connection</li>\n<li><em>autoStart</em> - If this is toggled off, the thread will start in sleep\nmode, and no calls will be made until the thread is manually started.</li>\n</ul>\n<p>The created weather object will be actually a thread that runs in the\nbackground. So you can integrate this functionality in your application,\nthis will run as a background process in a separate thread.</p>\n<p>You can temporarily pause the display update thread by calling\n<tt>weather.stopWatch()</tt> which will allow you for example to stop pooling\nand displaying the weather data on the display and use the display for\nsomething else in your integration.</p>\n<p>To restart the thread and keep reprinting the weather data you can use\n<tt>weather.startWatch()</tt></p>\n<p>To stop the thread and cleanup the object you can call\n<tt>weather.stopThread()</tt>. This will kill the thread and you can safely\nstop the application.</p>\n</div>\n\n          </div>"}, "last_serial": 5516939, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "33d19c23c43811c14337412f2f7151c9", "sha256": "693c72976526f833de8edde0440e90fe91c88325b78ca7b958ab55eacfe8d133"}, "downloads": -1, "filename": "iwPiWeather-0.1.0.tar.gz", "has_sig": false, "md5_digest": "33d19c23c43811c14337412f2f7151c9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2980, "upload_time": "2019-07-11T09:26:32", "upload_time_iso_8601": "2019-07-11T09:26:32.293198Z", "url": "https://files.pythonhosted.org/packages/e3/6b/6ad59d1faf0403e671b551d67f7306cacad7096d07b2249a3f5087fb77f8/iwPiWeather-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "dbf997bb9ca98d2ec279bbf18f10e50e", "sha256": "05f8bf75338822005b97001381992a12a4494b33b47b29d2ac4374935f2fd25a"}, "downloads": -1, "filename": "iwPiWeather-0.1.1.tar.gz", "has_sig": false, "md5_digest": "dbf997bb9ca98d2ec279bbf18f10e50e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3157, "upload_time": "2019-07-11T10:28:08", "upload_time_iso_8601": "2019-07-11T10:28:08.072224Z", "url": "https://files.pythonhosted.org/packages/d1/74/239a16dee99fb71d33f165b9b51691d15418588a577f9d5439bde91d1319/iwPiWeather-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "dbf997bb9ca98d2ec279bbf18f10e50e", "sha256": "05f8bf75338822005b97001381992a12a4494b33b47b29d2ac4374935f2fd25a"}, "downloads": -1, "filename": "iwPiWeather-0.1.1.tar.gz", "has_sig": false, "md5_digest": "dbf997bb9ca98d2ec279bbf18f10e50e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3157, "upload_time": "2019-07-11T10:28:08", "upload_time_iso_8601": "2019-07-11T10:28:08.072224Z", "url": "https://files.pythonhosted.org/packages/d1/74/239a16dee99fb71d33f165b9b51691d15418588a577f9d5439bde91d1319/iwPiWeather-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:53:31 2020"}