{"info": {"author": "Philip Xu", "author_email": "pyx@xrefactor.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "==========================================\nHy Monad Notation - a monad library for Hy\n==========================================\n\n\nIntroduction\n============\n\nHymn is a monad library for Hy/Python, with do notation for monad\ncomprehension.\n\nCode are better than words.\n\nThe continuation monad\n\n.. code-block:: clojure\n\n  => (import [hymn.types.continuation [cont-m call-cc]])\n  => ;; computations in continuation passing style\n  => (defn double [x] (cont-m.unit (* x 2)))\n  => (setv length (cont-m.monadic len))\n  => ;; chain with bind\n  => (.run (>> (cont-m.unit [1 2 3]) length double))\n  6\n  => (defn square [n] (call-cc (fn [k] (k (** n 2)))))\n  => (.run (square 12))\n  144\n  => (.run (square 12) inc)\n  145\n  => (.run (square 12) str)\n  '144'\n  => (require [hymn.macros [do-monad]])\n  => (.run (do-monad [sqr (square 42)] (.format \"answer^2 = {}\" sqr)))\n  'answer^2 = 1764'\n\nThe either monad\n\n.. code-block:: clojure\n\n  => (import [hymn.types.either [Left Right either failsafe]])\n  => (require [hymn.macros [do-monad]])\n  => ;; do notation with either monad\n  => (do-monad [a (Right 1) b (Right 2)] (/ a b))\n  Right(0.5)\n  => (do-monad [a (Right 1) b (Left 'nan)] (/ a b))\n  Left(HySymbol('nan'))\n  => ;; failsafe is a function decorator that wraps return value into either\n  => (setv safe-div (failsafe /))\n  => ;; returns Right if nothing wrong\n  => (safe-div 4 2)\n  Right(2.0)\n  => ;; returns Left when bad thing happened, like exception being thrown\n  => (safe-div 1 0)\n  Left(ZeroDivisionError('division by zero',))\n  => ;; function either tests the value and calls functions accordingly\n  => (either print inc (safe-div 4 2))\n  3.0\n  => (either print inc (safe-div 1 0))\n  division by zero\n\nThe identity monad\n\n.. code-block:: clojure\n\n  => (import [hymn.types.identity [identity-m]])\n  => (require [hymn.macros [do-monad]])\n  => ;; do notation with identity monad is like let binding\n  => (do-monad [a (identity-m 1) b (identity-m 2)] (+ a b))\n  Identity(3)\n\nThe lazy monad\n\n.. code-block:: clojure\n\n  => (import [hymn.types.lazy [force]])\n  => (require [hymn.types.lazy [lazy]])\n  => ;; lazy computation implemented as monad\n  => ;; macro lazy creates deferred computation\n  => (setv a (lazy (print \"evaluate a\") 42))\n  => ;; the computation is deferred, notice the value is shown as '_'\n  => a\n  Lazy(_)\n  => ;; evaluate it\n  => (.evaluate a)\n  evaluate a\n  42\n  => ;; now the value is cached\n  => a\n  Lazy(42)\n  => ;; calling evaluate again will not trigger the computation\n  => (.evaluate a)\n  42\n  => (setv b (lazy (print \"evaluate b\") 21))\n  => b\n  Lazy(_)\n  => ;; force evaluate the computation, same as calling .evaluate on the monad\n  => (force b)\n  evaluate b\n  21\n  => ;; force on values other than lazy return the value unchanged\n  => (force 42)\n  42\n  => (require [hymn.macros [do-monad]])\n  => ;; do notation with lazy monad\n  => (setv c (do-monad [x (lazy (print \"get x\") 1) y (lazy (print \"get y\") 2)] (+ x y)))\n  => ;; the computation is deferred\n  => c\n  Lazy(_)\n  => ;; do it!\n  => (force c)\n  get x\n  get y\n  3\n  => ;; again\n  => (force c)\n  3\n\nThe list monad\n\n.. code-block:: clojure\n\n  => (import [hymn.types.list [list-m]])\n  => (require [hymn.macros [do-monad]])\n  => ;; use list-m contructor to turn sequence into list monad\n  => (setv xs (list-m (range 2)))\n  => (setv ys (list-m (range 3)))\n  => ;; do notation with list monad is list comprehension\n  => (list (do-monad [x xs y ys :when (not (zero? y))] (/ x y)) )\n  [0.0, 0.0, 1.0, 0.5]\n  => (require [hymn.types.list [~]])\n  => ;; ~ is the tag macro for list-m\n  => (list (do-monad [x #~(range 2) y #~(range 3) :when (not (zero? y))] (/ x y)) )\n  [0.0, 0.0, 1.0, 0.5]\n\nThe maybe monad\n\n.. code-block:: clojure\n\n  => (import [hymn.types.maybe [Just Nothing maybe]])\n  => (require [hymn.macros [do-monad]])\n  => ;; do notation with maybe monad\n  => (do-monad [a (Just 1) b (Just 1)] (/ a b))\n  Just(1.0)\n  => ;; Nothing yields Nothing\n  => (do-monad [a Nothing b (Just 1)] (/ a b))\n  Nothing\n  => ;; maybe is a function decorator that wraps return value into maybe\n  => ;; a safe-div with maybe monad\n  => (setv safe-div (maybe /))\n  => (safe-div 42 42)\n  Just(1.0)\n  => (safe-div 42 'answer)\n  Nothing\n  => (safe-div 42 0)\n  Nothing\n\nThe reader monad\n\n.. code-block:: clojure\n\n  => (import [hymn.types.reader [lookup]])\n  => (require [hymn.macros [do-monad]])\n  => ;; do notation with reader monad, lookup assumes the environment is subscriptable\n  => (setv r (do-monad [a (lookup 'a) b (lookup 'b)] (+ a b)))\n  => ;; run reader monad r with environment\n  => (.run r {'a 1 'b 2})\n  3\n\nThe state monad\n\n.. code-block:: clojure\n\n  => (import [hymn.types.state [lookup set-value]])\n  => (require [hymn.macros [do-monad]])\n  => ;; do notation with state monad, set-value sets the value with key in the state\n  => (setv s (do-monad [a (lookup 'a) _ (set-value 'b (inc a))] a))\n  => ;; run state monad s with initial state\n  => (.run s {'a 1})\n  (1, {HySymbol('a'): 1, HySymbol('b'): 2})\n\nThe writer monad\n\n.. code-block:: clojure\n\n  => (import [hymn.types.writer [tell]])\n  => (require [hymn.macros [do-monad]])\n  => ;; do notation with writer monad\n  => (do-monad [_ (tell \"hello\") _ (tell \" world\")] None)\n  StrWriter((None, 'hello world'))\n  => ;; int is monoid, too\n  => (.execute (do-monad [_ (tell 1) _ (tell 2) _ (tell 3)] None))\n  6\n\nOperations on monads\n\n.. code-block:: clojure\n\n  => (import [hymn.operations [lift]])\n  => ;; lift promotes function into monad\n  => (setv m+ (lift +))\n  => ;; lifted function can work on any monad\n  => ;; on the maybe monad\n  => (import [hymn.types.maybe [Just Nothing]])\n  => (m+ (Just 1) (Just 2))\n  Just(3)\n  => (m+ (Just 1) Nothing)\n  Nothing\n  => ;; on the either monad\n  => (import [hymn.types.either [Left Right]])\n  => (m+ (Right 1) (Right 2))\n  Right(3)\n  => (m+ (Left 1) (Right 2))\n  Left(1)\n  => ;; on the list monad\n  => (import [hymn.types.list [list-m]])\n  => (list (m+ (list-m \"ab\") (list-m \"123\")))\n  ['a1', 'a2', 'a3', 'b1', 'b2', 'b3']\n  => (list (m+ (list-m \"+-\") (list-m \"123\") (list-m \"xy\")))\n  ['+1x', '+1y', '+2x', '+2y', '+3x', '+3y', '-1x', '-1y', '-2x', '-2y', '-3x', '-3y']\n  => ;; can be used as normal function\n  => (reduce m+ [(Just 1) (Just 2) (Just 3)])\n  Just(6)\n  => (reduce m+ [(Just 1) Nothing (Just 3)])\n  Nothing\n  => ;; <- is an alias of lookup\n  => (import [hymn.types.reader [<-]])\n  => (require [hymn.macros [^]])\n  => ;; ^ is the tag macro for lift\n  => (setv p (#^ print (<- 'message) :end (<- 'end)))\n  => (.run p {'message \"Hello world\" 'end \"!\\n\"})\n  Hello world!\n  => ;; random number - linear congruential generator\n  => (import [hymn.types.state [get-state set-state]])\n  => (setv random (>> get-state (fn [s] (-> s (* 69069) inc (% (** 2 32)) set-state))))\n  => (.run random 1234)\n  (1234, 85231147)\n  => ;; random can be even shorter by using modify\n  => (import [hymn.types.state [modify]])\n  => (setv random (modify (fn [s] (-> s (* 69069) inc (% (** 2 32))))))\n  => (.run random 1234)\n  (1234, 85231147)\n  => ;; use replicate to do computation repeatly\n  => (import [hymn.operations [replicate]])\n  => (.evaluate (replicate 5 random) 42)\n  [42, 2900899, 2793697416, 2186085609, 1171637142]\n  => ;; sequence on writer monad\n  => (import [hymn.operations [sequence]])\n  => (import [hymn.types.writer [tell]])\n  => (.execute (sequence (map tell (range 1 101))))\n  5050\n\nUsing Hymn in Python\n\n.. code-block:: python\n\n  >>> from hymn.dsl import *\n  >>> sequence(map(tell, range(1, 101))).execute()\n  5050\n  >>> msum = lift(sum)\n  >>> msum(sequence(map(maybe(int), \"12345\")))\n  Just(15)\n  >>> msum(sequence(map(maybe(int), \"12345a\")))\n  Nothing\n  >>> @failsafe\n  ... def safe_div(a, b):\n  ...     return a / b\n  ...\n  >>> safe_div(1.0, 2)\n  Right(0.5)\n  >>> safe_div(1, 0)\n  Left(ZeroDivisionError(...))\n\n\nRequirements\n============\n\n- hy >= 0.14.0\n\nFor hy version 0.13, please install hymn 0.7.\n\nFor hy version 0.12, please install hymn 0.6.\n\nFor hy version 0.11 and earlier, please install hymn 0.5.\n\nSee Changelog section in documentation for details.\n\n\nInstallation\n============\n\nInstall from PyPI::\n\n  pip install hymn\n\nInstall from source, download source package, decompress, then :code:`cd` into\nsource directory, run::\n\n  make install\n\n\nLicense\n=======\n\nBSD New, see LICENSE for details.\n\n\nLinks\n=====\n\nDocumentation:\n  https://hymn.readthedocs.io/\n\nIssue Tracker:\n  https://github.com/pyx/hymn/issues/\n\nSource Package @ PyPI:\n  https://pypi.python.org/pypi/hymn/\n\nMercurial Repository @ bitbucket:\n  https://bitbucket.org/pyx/hymn/\n\nGit Repository @ Gitlab:\n  https://gitlab.com/pyx/hymn/\n\nGit Repository @ Github:\n  https://github.com/pyx/hymn/\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "https://bitbucket.org/pyx/hymn/get/0.8.tar.bz2", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/pyx/hymn/", "keywords": "hy lisp monad functional programming", "license": "BSD-New", "maintainer": "", "maintainer_email": "", "name": "hymn", "package_url": "https://pypi.org/project/hymn/", "platform": "any", "project_url": "https://pypi.org/project/hymn/", "project_urls": {"Download": "https://bitbucket.org/pyx/hymn/get/0.8.tar.bz2", "Homepage": "https://github.com/pyx/hymn/"}, "release_url": "https://pypi.org/project/hymn/0.8/", "requires_dist": ["hy (>=0.14.0)", "twine; extra == 'dev'", "Sphinx; extra == 'doc'", "flake8; extra == 'test'", "pytest; extra == 'test'", "tox; extra == 'test'"], "requires_python": "", "summary": "Hy Monad Notation - a monad library for Hy", "version": "0.8", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"introduction\">\n<h2>Introduction</h2>\n<p>Hymn is a monad library for Hy/Python, with do notation for monad\ncomprehension.</p>\n<p>Code are better than words.</p>\n<p>The continuation monad</p>\n<pre><span class=\"nv\">=&gt;</span> <span class=\"p\">(</span><span class=\"nb\">import </span><span class=\"p\">[</span><span class=\"nv\">hymn.types.continuation</span> <span class=\"p\">[</span><span class=\"nv\">cont-m</span> <span class=\"nv\">call-cc</span><span class=\"p\">]])</span>\n<span class=\"nv\">=&gt;</span> <span class=\"c1\">;; computations in continuation passing style</span>\n<span class=\"nv\">=&gt;</span> <span class=\"p\">(</span><span class=\"kd\">defn </span><span class=\"nb\">double </span><span class=\"p\">[</span><span class=\"nv\">x</span><span class=\"p\">]</span> <span class=\"p\">(</span><span class=\"nf\">cont-m.unit</span> <span class=\"p\">(</span><span class=\"nb\">* </span><span class=\"nv\">x</span> <span class=\"mi\">2</span><span class=\"p\">)))</span>\n<span class=\"nv\">=&gt;</span> <span class=\"p\">(</span><span class=\"nf\">setv</span> <span class=\"nv\">length</span> <span class=\"p\">(</span><span class=\"nf\">cont-m.monadic</span> <span class=\"nv\">len</span><span class=\"p\">))</span>\n<span class=\"nv\">=&gt;</span> <span class=\"c1\">;; chain with bind</span>\n<span class=\"nv\">=&gt;</span> <span class=\"p\">(</span><span class=\"nf\">.run</span> <span class=\"p\">(</span><span class=\"nf\">&gt;&gt;</span> <span class=\"p\">(</span><span class=\"nf\">cont-m.unit</span> <span class=\"p\">[</span><span class=\"mi\">1</span> <span class=\"mi\">2</span> <span class=\"mi\">3</span><span class=\"p\">])</span> <span class=\"nv\">length</span> <span class=\"nv\">double</span><span class=\"p\">))</span>\n<span class=\"mi\">6</span>\n<span class=\"nv\">=&gt;</span> <span class=\"p\">(</span><span class=\"kd\">defn </span><span class=\"nv\">square</span> <span class=\"p\">[</span><span class=\"nv\">n</span><span class=\"p\">]</span> <span class=\"p\">(</span><span class=\"nf\">call-cc</span> <span class=\"p\">(</span><span class=\"k\">fn </span><span class=\"p\">[</span><span class=\"nv\">k</span><span class=\"p\">]</span> <span class=\"p\">(</span><span class=\"nf\">k</span> <span class=\"p\">(</span><span class=\"nf\">**</span> <span class=\"nv\">n</span> <span class=\"mi\">2</span><span class=\"p\">)))))</span>\n<span class=\"nv\">=&gt;</span> <span class=\"p\">(</span><span class=\"nf\">.run</span> <span class=\"p\">(</span><span class=\"nf\">square</span> <span class=\"mi\">12</span><span class=\"p\">))</span>\n<span class=\"mi\">144</span>\n<span class=\"nv\">=&gt;</span> <span class=\"p\">(</span><span class=\"nf\">.run</span> <span class=\"p\">(</span><span class=\"nf\">square</span> <span class=\"mi\">12</span><span class=\"p\">)</span> <span class=\"nv\">inc</span><span class=\"p\">)</span>\n<span class=\"mi\">145</span>\n<span class=\"nv\">=&gt;</span> <span class=\"p\">(</span><span class=\"nf\">.run</span> <span class=\"p\">(</span><span class=\"nf\">square</span> <span class=\"mi\">12</span><span class=\"p\">)</span> <span class=\"nv\">str</span><span class=\"p\">)</span>\n<span class=\"ss\">'144</span><span class=\"o\">'</span>\n<span class=\"nv\">=&gt;</span> <span class=\"p\">(</span><span class=\"nf\">require</span> <span class=\"p\">[</span><span class=\"nv\">hymn.macros</span> <span class=\"p\">[</span><span class=\"nv\">do-monad</span><span class=\"p\">]])</span>\n<span class=\"nv\">=&gt;</span> <span class=\"p\">(</span><span class=\"nf\">.run</span> <span class=\"p\">(</span><span class=\"nf\">do-monad</span> <span class=\"p\">[</span><span class=\"nv\">sqr</span> <span class=\"p\">(</span><span class=\"nf\">square</span> <span class=\"mi\">42</span><span class=\"p\">)]</span> <span class=\"p\">(</span><span class=\"nf\">.format</span> <span class=\"s\">\"answer^2 = {}\"</span> <span class=\"nv\">sqr</span><span class=\"p\">)))</span>\n<span class=\"ss\">'answer</span><span class=\"o\">^</span><span class=\"mi\">2</span> <span class=\"nb\">= </span><span class=\"mi\">1764</span><span class=\"o\">'</span>\n</pre>\n<p>The either monad</p>\n<pre><span class=\"nv\">=&gt;</span> <span class=\"p\">(</span><span class=\"nb\">import </span><span class=\"p\">[</span><span class=\"nv\">hymn.types.either</span> <span class=\"p\">[</span><span class=\"nv\">Left</span> <span class=\"nv\">Right</span> <span class=\"nv\">either</span> <span class=\"nv\">failsafe</span><span class=\"p\">]])</span>\n<span class=\"nv\">=&gt;</span> <span class=\"p\">(</span><span class=\"nf\">require</span> <span class=\"p\">[</span><span class=\"nv\">hymn.macros</span> <span class=\"p\">[</span><span class=\"nv\">do-monad</span><span class=\"p\">]])</span>\n<span class=\"nv\">=&gt;</span> <span class=\"c1\">;; do notation with either monad</span>\n<span class=\"nv\">=&gt;</span> <span class=\"p\">(</span><span class=\"nf\">do-monad</span> <span class=\"p\">[</span><span class=\"nv\">a</span> <span class=\"p\">(</span><span class=\"nf\">Right</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"nv\">b</span> <span class=\"p\">(</span><span class=\"nf\">Right</span> <span class=\"mi\">2</span><span class=\"p\">)]</span> <span class=\"p\">(</span><span class=\"nb\">/ </span><span class=\"nv\">a</span> <span class=\"nv\">b</span><span class=\"p\">))</span>\n<span class=\"nv\">Right</span><span class=\"p\">(</span><span class=\"mf\">0.5</span><span class=\"p\">)</span>\n<span class=\"nv\">=&gt;</span> <span class=\"p\">(</span><span class=\"nf\">do-monad</span> <span class=\"p\">[</span><span class=\"nv\">a</span> <span class=\"p\">(</span><span class=\"nf\">Right</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"nv\">b</span> <span class=\"p\">(</span><span class=\"nf\">Left</span> <span class=\"ss\">'nan</span><span class=\"p\">)]</span> <span class=\"p\">(</span><span class=\"nb\">/ </span><span class=\"nv\">a</span> <span class=\"nv\">b</span><span class=\"p\">))</span>\n<span class=\"nv\">Left</span><span class=\"p\">(</span><span class=\"nf\">HySymbol</span><span class=\"p\">(</span><span class=\"ss\">'nan</span><span class=\"o\">'</span><span class=\"p\">))</span>\n<span class=\"nv\">=&gt;</span> <span class=\"c1\">;; failsafe is a function decorator that wraps return value into either</span>\n<span class=\"nv\">=&gt;</span> <span class=\"p\">(</span><span class=\"nf\">setv</span> <span class=\"nv\">safe-div</span> <span class=\"p\">(</span><span class=\"nf\">failsafe</span> <span class=\"nv\">/</span><span class=\"p\">))</span>\n<span class=\"nv\">=&gt;</span> <span class=\"c1\">;; returns Right if nothing wrong</span>\n<span class=\"nv\">=&gt;</span> <span class=\"p\">(</span><span class=\"nf\">safe-div</span> <span class=\"mi\">4</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"nv\">Right</span><span class=\"p\">(</span><span class=\"mf\">2.0</span><span class=\"p\">)</span>\n<span class=\"nv\">=&gt;</span> <span class=\"c1\">;; returns Left when bad thing happened, like exception being thrown</span>\n<span class=\"nv\">=&gt;</span> <span class=\"p\">(</span><span class=\"nf\">safe-div</span> <span class=\"mi\">1</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"nv\">Left</span><span class=\"p\">(</span><span class=\"nf\">ZeroDivisionError</span><span class=\"p\">(</span><span class=\"ss\">'division</span> <span class=\"nv\">by</span> <span class=\"nv\">zero</span><span class=\"o\">'</span>,<span class=\"p\">))</span>\n<span class=\"nv\">=&gt;</span> <span class=\"c1\">;; function either tests the value and calls functions accordingly</span>\n<span class=\"nv\">=&gt;</span> <span class=\"p\">(</span><span class=\"nf\">either</span> <span class=\"nb\">print inc </span><span class=\"p\">(</span><span class=\"nf\">safe-div</span> <span class=\"mi\">4</span> <span class=\"mi\">2</span><span class=\"p\">))</span>\n<span class=\"mf\">3.0</span>\n<span class=\"nv\">=&gt;</span> <span class=\"p\">(</span><span class=\"nf\">either</span> <span class=\"nb\">print inc </span><span class=\"p\">(</span><span class=\"nf\">safe-div</span> <span class=\"mi\">1</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n<span class=\"nv\">division</span> <span class=\"nv\">by</span> <span class=\"nv\">zero</span>\n</pre>\n<p>The identity monad</p>\n<pre><span class=\"nv\">=&gt;</span> <span class=\"p\">(</span><span class=\"nb\">import </span><span class=\"p\">[</span><span class=\"nv\">hymn.types.identity</span> <span class=\"p\">[</span><span class=\"nv\">identity-m</span><span class=\"p\">]])</span>\n<span class=\"nv\">=&gt;</span> <span class=\"p\">(</span><span class=\"nf\">require</span> <span class=\"p\">[</span><span class=\"nv\">hymn.macros</span> <span class=\"p\">[</span><span class=\"nv\">do-monad</span><span class=\"p\">]])</span>\n<span class=\"nv\">=&gt;</span> <span class=\"c1\">;; do notation with identity monad is like let binding</span>\n<span class=\"nv\">=&gt;</span> <span class=\"p\">(</span><span class=\"nf\">do-monad</span> <span class=\"p\">[</span><span class=\"nv\">a</span> <span class=\"p\">(</span><span class=\"nf\">identity-m</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"nv\">b</span> <span class=\"p\">(</span><span class=\"nf\">identity-m</span> <span class=\"mi\">2</span><span class=\"p\">)]</span> <span class=\"p\">(</span><span class=\"nb\">+ </span><span class=\"nv\">a</span> <span class=\"nv\">b</span><span class=\"p\">))</span>\n<span class=\"nv\">Identity</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n</pre>\n<p>The lazy monad</p>\n<pre><span class=\"nv\">=&gt;</span> <span class=\"p\">(</span><span class=\"nb\">import </span><span class=\"p\">[</span><span class=\"nv\">hymn.types.lazy</span> <span class=\"p\">[</span><span class=\"nv\">force</span><span class=\"p\">]])</span>\n<span class=\"nv\">=&gt;</span> <span class=\"p\">(</span><span class=\"nf\">require</span> <span class=\"p\">[</span><span class=\"nv\">hymn.types.lazy</span> <span class=\"p\">[</span><span class=\"nv\">lazy</span><span class=\"p\">]])</span>\n<span class=\"nv\">=&gt;</span> <span class=\"c1\">;; lazy computation implemented as monad</span>\n<span class=\"nv\">=&gt;</span> <span class=\"c1\">;; macro lazy creates deferred computation</span>\n<span class=\"nv\">=&gt;</span> <span class=\"p\">(</span><span class=\"nf\">setv</span> <span class=\"nv\">a</span> <span class=\"p\">(</span><span class=\"nf\">lazy</span> <span class=\"p\">(</span><span class=\"nb\">print </span><span class=\"s\">\"evaluate a\"</span><span class=\"p\">)</span> <span class=\"mi\">42</span><span class=\"p\">))</span>\n<span class=\"nv\">=&gt;</span> <span class=\"c1\">;; the computation is deferred, notice the value is shown as '_'</span>\n<span class=\"nv\">=&gt;</span> <span class=\"nv\">a</span>\n<span class=\"nv\">Lazy</span><span class=\"p\">(</span><span class=\"nf\">_</span><span class=\"p\">)</span>\n<span class=\"nv\">=&gt;</span> <span class=\"c1\">;; evaluate it</span>\n<span class=\"nv\">=&gt;</span> <span class=\"p\">(</span><span class=\"nf\">.evaluate</span> <span class=\"nv\">a</span><span class=\"p\">)</span>\n<span class=\"nv\">evaluate</span> <span class=\"nv\">a</span>\n<span class=\"mi\">42</span>\n<span class=\"nv\">=&gt;</span> <span class=\"c1\">;; now the value is cached</span>\n<span class=\"nv\">=&gt;</span> <span class=\"nv\">a</span>\n<span class=\"nv\">Lazy</span><span class=\"p\">(</span><span class=\"mi\">42</span><span class=\"p\">)</span>\n<span class=\"nv\">=&gt;</span> <span class=\"c1\">;; calling evaluate again will not trigger the computation</span>\n<span class=\"nv\">=&gt;</span> <span class=\"p\">(</span><span class=\"nf\">.evaluate</span> <span class=\"nv\">a</span><span class=\"p\">)</span>\n<span class=\"mi\">42</span>\n<span class=\"nv\">=&gt;</span> <span class=\"p\">(</span><span class=\"nf\">setv</span> <span class=\"nv\">b</span> <span class=\"p\">(</span><span class=\"nf\">lazy</span> <span class=\"p\">(</span><span class=\"nb\">print </span><span class=\"s\">\"evaluate b\"</span><span class=\"p\">)</span> <span class=\"mi\">21</span><span class=\"p\">))</span>\n<span class=\"nv\">=&gt;</span> <span class=\"nv\">b</span>\n<span class=\"nv\">Lazy</span><span class=\"p\">(</span><span class=\"nf\">_</span><span class=\"p\">)</span>\n<span class=\"nv\">=&gt;</span> <span class=\"c1\">;; force evaluate the computation, same as calling .evaluate on the monad</span>\n<span class=\"nv\">=&gt;</span> <span class=\"p\">(</span><span class=\"nf\">force</span> <span class=\"nv\">b</span><span class=\"p\">)</span>\n<span class=\"nv\">evaluate</span> <span class=\"nv\">b</span>\n<span class=\"mi\">21</span>\n<span class=\"nv\">=&gt;</span> <span class=\"c1\">;; force on values other than lazy return the value unchanged</span>\n<span class=\"nv\">=&gt;</span> <span class=\"p\">(</span><span class=\"nf\">force</span> <span class=\"mi\">42</span><span class=\"p\">)</span>\n<span class=\"mi\">42</span>\n<span class=\"nv\">=&gt;</span> <span class=\"p\">(</span><span class=\"nf\">require</span> <span class=\"p\">[</span><span class=\"nv\">hymn.macros</span> <span class=\"p\">[</span><span class=\"nv\">do-monad</span><span class=\"p\">]])</span>\n<span class=\"nv\">=&gt;</span> <span class=\"c1\">;; do notation with lazy monad</span>\n<span class=\"nv\">=&gt;</span> <span class=\"p\">(</span><span class=\"nf\">setv</span> <span class=\"nv\">c</span> <span class=\"p\">(</span><span class=\"nf\">do-monad</span> <span class=\"p\">[</span><span class=\"nv\">x</span> <span class=\"p\">(</span><span class=\"nf\">lazy</span> <span class=\"p\">(</span><span class=\"nb\">print </span><span class=\"s\">\"get x\"</span><span class=\"p\">)</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"nv\">y</span> <span class=\"p\">(</span><span class=\"nf\">lazy</span> <span class=\"p\">(</span><span class=\"nb\">print </span><span class=\"s\">\"get y\"</span><span class=\"p\">)</span> <span class=\"mi\">2</span><span class=\"p\">)]</span> <span class=\"p\">(</span><span class=\"nb\">+ </span><span class=\"nv\">x</span> <span class=\"nv\">y</span><span class=\"p\">)))</span>\n<span class=\"nv\">=&gt;</span> <span class=\"c1\">;; the computation is deferred</span>\n<span class=\"nv\">=&gt;</span> <span class=\"nv\">c</span>\n<span class=\"nv\">Lazy</span><span class=\"p\">(</span><span class=\"nf\">_</span><span class=\"p\">)</span>\n<span class=\"nv\">=&gt;</span> <span class=\"c1\">;; do it!</span>\n<span class=\"nv\">=&gt;</span> <span class=\"p\">(</span><span class=\"nf\">force</span> <span class=\"nv\">c</span><span class=\"p\">)</span>\n<span class=\"nb\">get </span><span class=\"nv\">x</span>\n<span class=\"nb\">get </span><span class=\"nv\">y</span>\n<span class=\"mi\">3</span>\n<span class=\"nv\">=&gt;</span> <span class=\"c1\">;; again</span>\n<span class=\"nv\">=&gt;</span> <span class=\"p\">(</span><span class=\"nf\">force</span> <span class=\"nv\">c</span><span class=\"p\">)</span>\n<span class=\"mi\">3</span>\n</pre>\n<p>The list monad</p>\n<pre><span class=\"nv\">=&gt;</span> <span class=\"p\">(</span><span class=\"nb\">import </span><span class=\"p\">[</span><span class=\"nv\">hymn.types.list</span> <span class=\"p\">[</span><span class=\"nv\">list-m</span><span class=\"p\">]])</span>\n<span class=\"nv\">=&gt;</span> <span class=\"p\">(</span><span class=\"nf\">require</span> <span class=\"p\">[</span><span class=\"nv\">hymn.macros</span> <span class=\"p\">[</span><span class=\"nv\">do-monad</span><span class=\"p\">]])</span>\n<span class=\"nv\">=&gt;</span> <span class=\"c1\">;; use list-m contructor to turn sequence into list monad</span>\n<span class=\"nv\">=&gt;</span> <span class=\"p\">(</span><span class=\"nf\">setv</span> <span class=\"nv\">xs</span> <span class=\"p\">(</span><span class=\"nf\">list-m</span> <span class=\"p\">(</span><span class=\"nb\">range </span><span class=\"mi\">2</span><span class=\"p\">)))</span>\n<span class=\"nv\">=&gt;</span> <span class=\"p\">(</span><span class=\"nf\">setv</span> <span class=\"nv\">ys</span> <span class=\"p\">(</span><span class=\"nf\">list-m</span> <span class=\"p\">(</span><span class=\"nb\">range </span><span class=\"mi\">3</span><span class=\"p\">)))</span>\n<span class=\"nv\">=&gt;</span> <span class=\"c1\">;; do notation with list monad is list comprehension</span>\n<span class=\"nv\">=&gt;</span> <span class=\"p\">(</span><span class=\"nb\">list </span><span class=\"p\">(</span><span class=\"nf\">do-monad</span> <span class=\"p\">[</span><span class=\"nv\">x</span> <span class=\"nv\">xs</span> <span class=\"nv\">y</span> <span class=\"nv\">ys</span> <span class=\"ss\">:when</span> <span class=\"p\">(</span><span class=\"nb\">not </span><span class=\"p\">(</span><span class=\"nb\">zero? </span><span class=\"nv\">y</span><span class=\"p\">))]</span> <span class=\"p\">(</span><span class=\"nb\">/ </span><span class=\"nv\">x</span> <span class=\"nv\">y</span><span class=\"p\">))</span> <span class=\"p\">)</span>\n<span class=\"p\">[</span><span class=\"mf\">0.0</span>, <span class=\"mf\">0.0</span>, <span class=\"mf\">1.0</span>, <span class=\"mf\">0.5</span><span class=\"p\">]</span>\n<span class=\"nv\">=&gt;</span> <span class=\"p\">(</span><span class=\"nf\">require</span> <span class=\"p\">[</span><span class=\"nv\">hymn.types.list</span> <span class=\"p\">[</span><span class=\"o\">~</span><span class=\"p\">]])</span>\n<span class=\"nv\">=&gt;</span> <span class=\"c1\">;; ~ is the tag macro for list-m</span>\n<span class=\"nv\">=&gt;</span> <span class=\"p\">(</span><span class=\"nb\">list </span><span class=\"p\">(</span><span class=\"nf\">do-monad</span> <span class=\"p\">[</span><span class=\"nv\">x</span> <span class=\"o\">#~</span><span class=\"p\">(</span><span class=\"nb\">range </span><span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"nv\">y</span> <span class=\"o\">#~</span><span class=\"p\">(</span><span class=\"nb\">range </span><span class=\"mi\">3</span><span class=\"p\">)</span> <span class=\"ss\">:when</span> <span class=\"p\">(</span><span class=\"nb\">not </span><span class=\"p\">(</span><span class=\"nb\">zero? </span><span class=\"nv\">y</span><span class=\"p\">))]</span> <span class=\"p\">(</span><span class=\"nb\">/ </span><span class=\"nv\">x</span> <span class=\"nv\">y</span><span class=\"p\">))</span> <span class=\"p\">)</span>\n<span class=\"p\">[</span><span class=\"mf\">0.0</span>, <span class=\"mf\">0.0</span>, <span class=\"mf\">1.0</span>, <span class=\"mf\">0.5</span><span class=\"p\">]</span>\n</pre>\n<p>The maybe monad</p>\n<pre><span class=\"nv\">=&gt;</span> <span class=\"p\">(</span><span class=\"nb\">import </span><span class=\"p\">[</span><span class=\"nv\">hymn.types.maybe</span> <span class=\"p\">[</span><span class=\"nv\">Just</span> <span class=\"nv\">Nothing</span> <span class=\"nv\">maybe</span><span class=\"p\">]])</span>\n<span class=\"nv\">=&gt;</span> <span class=\"p\">(</span><span class=\"nf\">require</span> <span class=\"p\">[</span><span class=\"nv\">hymn.macros</span> <span class=\"p\">[</span><span class=\"nv\">do-monad</span><span class=\"p\">]])</span>\n<span class=\"nv\">=&gt;</span> <span class=\"c1\">;; do notation with maybe monad</span>\n<span class=\"nv\">=&gt;</span> <span class=\"p\">(</span><span class=\"nf\">do-monad</span> <span class=\"p\">[</span><span class=\"nv\">a</span> <span class=\"p\">(</span><span class=\"nf\">Just</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"nv\">b</span> <span class=\"p\">(</span><span class=\"nf\">Just</span> <span class=\"mi\">1</span><span class=\"p\">)]</span> <span class=\"p\">(</span><span class=\"nb\">/ </span><span class=\"nv\">a</span> <span class=\"nv\">b</span><span class=\"p\">))</span>\n<span class=\"nv\">Just</span><span class=\"p\">(</span><span class=\"mf\">1.0</span><span class=\"p\">)</span>\n<span class=\"nv\">=&gt;</span> <span class=\"c1\">;; Nothing yields Nothing</span>\n<span class=\"nv\">=&gt;</span> <span class=\"p\">(</span><span class=\"nf\">do-monad</span> <span class=\"p\">[</span><span class=\"nv\">a</span> <span class=\"nv\">Nothing</span> <span class=\"nv\">b</span> <span class=\"p\">(</span><span class=\"nf\">Just</span> <span class=\"mi\">1</span><span class=\"p\">)]</span> <span class=\"p\">(</span><span class=\"nb\">/ </span><span class=\"nv\">a</span> <span class=\"nv\">b</span><span class=\"p\">))</span>\n<span class=\"nv\">Nothing</span>\n<span class=\"nv\">=&gt;</span> <span class=\"c1\">;; maybe is a function decorator that wraps return value into maybe</span>\n<span class=\"nv\">=&gt;</span> <span class=\"c1\">;; a safe-div with maybe monad</span>\n<span class=\"nv\">=&gt;</span> <span class=\"p\">(</span><span class=\"nf\">setv</span> <span class=\"nv\">safe-div</span> <span class=\"p\">(</span><span class=\"nf\">maybe</span> <span class=\"nv\">/</span><span class=\"p\">))</span>\n<span class=\"nv\">=&gt;</span> <span class=\"p\">(</span><span class=\"nf\">safe-div</span> <span class=\"mi\">42</span> <span class=\"mi\">42</span><span class=\"p\">)</span>\n<span class=\"nv\">Just</span><span class=\"p\">(</span><span class=\"mf\">1.0</span><span class=\"p\">)</span>\n<span class=\"nv\">=&gt;</span> <span class=\"p\">(</span><span class=\"nf\">safe-div</span> <span class=\"mi\">42</span> <span class=\"ss\">'answer</span><span class=\"p\">)</span>\n<span class=\"nv\">Nothing</span>\n<span class=\"nv\">=&gt;</span> <span class=\"p\">(</span><span class=\"nf\">safe-div</span> <span class=\"mi\">42</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"nv\">Nothing</span>\n</pre>\n<p>The reader monad</p>\n<pre><span class=\"nv\">=&gt;</span> <span class=\"p\">(</span><span class=\"nb\">import </span><span class=\"p\">[</span><span class=\"nv\">hymn.types.reader</span> <span class=\"p\">[</span><span class=\"nv\">lookup</span><span class=\"p\">]])</span>\n<span class=\"nv\">=&gt;</span> <span class=\"p\">(</span><span class=\"nf\">require</span> <span class=\"p\">[</span><span class=\"nv\">hymn.macros</span> <span class=\"p\">[</span><span class=\"nv\">do-monad</span><span class=\"p\">]])</span>\n<span class=\"nv\">=&gt;</span> <span class=\"c1\">;; do notation with reader monad, lookup assumes the environment is subscriptable</span>\n<span class=\"nv\">=&gt;</span> <span class=\"p\">(</span><span class=\"nf\">setv</span> <span class=\"nv\">r</span> <span class=\"p\">(</span><span class=\"nf\">do-monad</span> <span class=\"p\">[</span><span class=\"nv\">a</span> <span class=\"p\">(</span><span class=\"nf\">lookup</span> <span class=\"ss\">'a</span><span class=\"p\">)</span> <span class=\"nv\">b</span> <span class=\"p\">(</span><span class=\"nf\">lookup</span> <span class=\"ss\">'b</span><span class=\"p\">)]</span> <span class=\"p\">(</span><span class=\"nb\">+ </span><span class=\"nv\">a</span> <span class=\"nv\">b</span><span class=\"p\">)))</span>\n<span class=\"nv\">=&gt;</span> <span class=\"c1\">;; run reader monad r with environment</span>\n<span class=\"nv\">=&gt;</span> <span class=\"p\">(</span><span class=\"nf\">.run</span> <span class=\"nv\">r</span> <span class=\"p\">{</span><span class=\"ss\">'a</span> <span class=\"mi\">1</span> <span class=\"ss\">'b</span> <span class=\"mi\">2</span><span class=\"p\">})</span>\n<span class=\"mi\">3</span>\n</pre>\n<p>The state monad</p>\n<pre><span class=\"nv\">=&gt;</span> <span class=\"p\">(</span><span class=\"nb\">import </span><span class=\"p\">[</span><span class=\"nv\">hymn.types.state</span> <span class=\"p\">[</span><span class=\"nv\">lookup</span> <span class=\"nv\">set-value</span><span class=\"p\">]])</span>\n<span class=\"nv\">=&gt;</span> <span class=\"p\">(</span><span class=\"nf\">require</span> <span class=\"p\">[</span><span class=\"nv\">hymn.macros</span> <span class=\"p\">[</span><span class=\"nv\">do-monad</span><span class=\"p\">]])</span>\n<span class=\"nv\">=&gt;</span> <span class=\"c1\">;; do notation with state monad, set-value sets the value with key in the state</span>\n<span class=\"nv\">=&gt;</span> <span class=\"p\">(</span><span class=\"nf\">setv</span> <span class=\"nv\">s</span> <span class=\"p\">(</span><span class=\"nf\">do-monad</span> <span class=\"p\">[</span><span class=\"nv\">a</span> <span class=\"p\">(</span><span class=\"nf\">lookup</span> <span class=\"ss\">'a</span><span class=\"p\">)</span> <span class=\"nv\">_</span> <span class=\"p\">(</span><span class=\"nf\">set-value</span> <span class=\"ss\">'b</span> <span class=\"p\">(</span><span class=\"nb\">inc </span><span class=\"nv\">a</span><span class=\"p\">))]</span> <span class=\"nv\">a</span><span class=\"p\">))</span>\n<span class=\"nv\">=&gt;</span> <span class=\"c1\">;; run state monad s with initial state</span>\n<span class=\"nv\">=&gt;</span> <span class=\"p\">(</span><span class=\"nf\">.run</span> <span class=\"nv\">s</span> <span class=\"p\">{</span><span class=\"ss\">'a</span> <span class=\"mi\">1</span><span class=\"p\">})</span>\n<span class=\"p\">(</span><span class=\"mi\">1</span>, <span class=\"p\">{</span><span class=\"nv\">HySymbol</span><span class=\"p\">(</span><span class=\"ss\">'a</span><span class=\"o\">'</span><span class=\"p\">)</span><span class=\"err\">:</span> <span class=\"mi\">1</span>, <span class=\"nv\">HySymbol</span><span class=\"p\">(</span><span class=\"ss\">'b</span><span class=\"o\">'</span><span class=\"p\">)</span><span class=\"err\">:</span> <span class=\"mi\">2</span><span class=\"p\">})</span>\n</pre>\n<p>The writer monad</p>\n<pre><span class=\"nv\">=&gt;</span> <span class=\"p\">(</span><span class=\"nb\">import </span><span class=\"p\">[</span><span class=\"nv\">hymn.types.writer</span> <span class=\"p\">[</span><span class=\"nv\">tell</span><span class=\"p\">]])</span>\n<span class=\"nv\">=&gt;</span> <span class=\"p\">(</span><span class=\"nf\">require</span> <span class=\"p\">[</span><span class=\"nv\">hymn.macros</span> <span class=\"p\">[</span><span class=\"nv\">do-monad</span><span class=\"p\">]])</span>\n<span class=\"nv\">=&gt;</span> <span class=\"c1\">;; do notation with writer monad</span>\n<span class=\"nv\">=&gt;</span> <span class=\"p\">(</span><span class=\"nf\">do-monad</span> <span class=\"p\">[</span><span class=\"nv\">_</span> <span class=\"p\">(</span><span class=\"nf\">tell</span> <span class=\"s\">\"hello\"</span><span class=\"p\">)</span> <span class=\"nv\">_</span> <span class=\"p\">(</span><span class=\"nf\">tell</span> <span class=\"s\">\" world\"</span><span class=\"p\">)]</span> <span class=\"nv\">None</span><span class=\"p\">)</span>\n<span class=\"nv\">StrWriter</span><span class=\"p\">((</span><span class=\"nf\">None</span>, <span class=\"ss\">'hello</span> <span class=\"nv\">world</span><span class=\"o\">'</span><span class=\"p\">))</span>\n<span class=\"nv\">=&gt;</span> <span class=\"c1\">;; int is monoid, too</span>\n<span class=\"nv\">=&gt;</span> <span class=\"p\">(</span><span class=\"nf\">.execute</span> <span class=\"p\">(</span><span class=\"nf\">do-monad</span> <span class=\"p\">[</span><span class=\"nv\">_</span> <span class=\"p\">(</span><span class=\"nf\">tell</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"nv\">_</span> <span class=\"p\">(</span><span class=\"nf\">tell</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"nv\">_</span> <span class=\"p\">(</span><span class=\"nf\">tell</span> <span class=\"mi\">3</span><span class=\"p\">)]</span> <span class=\"nv\">None</span><span class=\"p\">))</span>\n<span class=\"mi\">6</span>\n</pre>\n<p>Operations on monads</p>\n<pre><span class=\"nv\">=&gt;</span> <span class=\"p\">(</span><span class=\"nb\">import </span><span class=\"p\">[</span><span class=\"nv\">hymn.operations</span> <span class=\"p\">[</span><span class=\"nv\">lift</span><span class=\"p\">]])</span>\n<span class=\"nv\">=&gt;</span> <span class=\"c1\">;; lift promotes function into monad</span>\n<span class=\"nv\">=&gt;</span> <span class=\"p\">(</span><span class=\"nf\">setv</span> <span class=\"nv\">m+</span> <span class=\"p\">(</span><span class=\"nf\">lift</span> <span class=\"nv\">+</span><span class=\"p\">))</span>\n<span class=\"nv\">=&gt;</span> <span class=\"c1\">;; lifted function can work on any monad</span>\n<span class=\"nv\">=&gt;</span> <span class=\"c1\">;; on the maybe monad</span>\n<span class=\"nv\">=&gt;</span> <span class=\"p\">(</span><span class=\"nb\">import </span><span class=\"p\">[</span><span class=\"nv\">hymn.types.maybe</span> <span class=\"p\">[</span><span class=\"nv\">Just</span> <span class=\"nv\">Nothing</span><span class=\"p\">]])</span>\n<span class=\"nv\">=&gt;</span> <span class=\"p\">(</span><span class=\"nf\">m+</span> <span class=\"p\">(</span><span class=\"nf\">Just</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nf\">Just</span> <span class=\"mi\">2</span><span class=\"p\">))</span>\n<span class=\"nv\">Just</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"nv\">=&gt;</span> <span class=\"p\">(</span><span class=\"nf\">m+</span> <span class=\"p\">(</span><span class=\"nf\">Just</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"nv\">Nothing</span><span class=\"p\">)</span>\n<span class=\"nv\">Nothing</span>\n<span class=\"nv\">=&gt;</span> <span class=\"c1\">;; on the either monad</span>\n<span class=\"nv\">=&gt;</span> <span class=\"p\">(</span><span class=\"nb\">import </span><span class=\"p\">[</span><span class=\"nv\">hymn.types.either</span> <span class=\"p\">[</span><span class=\"nv\">Left</span> <span class=\"nv\">Right</span><span class=\"p\">]])</span>\n<span class=\"nv\">=&gt;</span> <span class=\"p\">(</span><span class=\"nf\">m+</span> <span class=\"p\">(</span><span class=\"nf\">Right</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nf\">Right</span> <span class=\"mi\">2</span><span class=\"p\">))</span>\n<span class=\"nv\">Right</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"nv\">=&gt;</span> <span class=\"p\">(</span><span class=\"nf\">m+</span> <span class=\"p\">(</span><span class=\"nf\">Left</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nf\">Right</span> <span class=\"mi\">2</span><span class=\"p\">))</span>\n<span class=\"nv\">Left</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"nv\">=&gt;</span> <span class=\"c1\">;; on the list monad</span>\n<span class=\"nv\">=&gt;</span> <span class=\"p\">(</span><span class=\"nb\">import </span><span class=\"p\">[</span><span class=\"nv\">hymn.types.list</span> <span class=\"p\">[</span><span class=\"nv\">list-m</span><span class=\"p\">]])</span>\n<span class=\"nv\">=&gt;</span> <span class=\"p\">(</span><span class=\"nb\">list </span><span class=\"p\">(</span><span class=\"nf\">m+</span> <span class=\"p\">(</span><span class=\"nf\">list-m</span> <span class=\"s\">\"ab\"</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nf\">list-m</span> <span class=\"s\">\"123\"</span><span class=\"p\">)))</span>\n<span class=\"p\">[</span><span class=\"ss\">'a1</span><span class=\"o\">'</span>, <span class=\"ss\">'a2</span><span class=\"o\">'</span>, <span class=\"ss\">'a3</span><span class=\"o\">'</span>, <span class=\"ss\">'b1</span><span class=\"o\">'</span>, <span class=\"ss\">'b2</span><span class=\"o\">'</span>, <span class=\"ss\">'b3</span><span class=\"o\">'</span><span class=\"p\">]</span>\n<span class=\"nv\">=&gt;</span> <span class=\"p\">(</span><span class=\"nb\">list </span><span class=\"p\">(</span><span class=\"nf\">m+</span> <span class=\"p\">(</span><span class=\"nf\">list-m</span> <span class=\"s\">\"+-\"</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nf\">list-m</span> <span class=\"s\">\"123\"</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nf\">list-m</span> <span class=\"s\">\"xy\"</span><span class=\"p\">)))</span>\n<span class=\"p\">[</span><span class=\"ss\">'+1x</span><span class=\"o\">'</span>, <span class=\"ss\">'+1y</span><span class=\"o\">'</span>, <span class=\"ss\">'+2x</span><span class=\"o\">'</span>, <span class=\"ss\">'+2y</span><span class=\"o\">'</span>, <span class=\"ss\">'+3x</span><span class=\"o\">'</span>, <span class=\"ss\">'+3y</span><span class=\"o\">'</span>, <span class=\"ss\">'-1x</span><span class=\"o\">'</span>, <span class=\"ss\">'-1y</span><span class=\"o\">'</span>, <span class=\"ss\">'-2x</span><span class=\"o\">'</span>, <span class=\"ss\">'-2y</span><span class=\"o\">'</span>, <span class=\"ss\">'-3x</span><span class=\"o\">'</span>, <span class=\"ss\">'-3y</span><span class=\"o\">'</span><span class=\"p\">]</span>\n<span class=\"nv\">=&gt;</span> <span class=\"c1\">;; can be used as normal function</span>\n<span class=\"nv\">=&gt;</span> <span class=\"p\">(</span><span class=\"nb\">reduce </span><span class=\"nv\">m+</span> <span class=\"p\">[(</span><span class=\"nf\">Just</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nf\">Just</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nf\">Just</span> <span class=\"mi\">3</span><span class=\"p\">)])</span>\n<span class=\"nv\">Just</span><span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"p\">)</span>\n<span class=\"nv\">=&gt;</span> <span class=\"p\">(</span><span class=\"nb\">reduce </span><span class=\"nv\">m+</span> <span class=\"p\">[(</span><span class=\"nf\">Just</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"nv\">Nothing</span> <span class=\"p\">(</span><span class=\"nf\">Just</span> <span class=\"mi\">3</span><span class=\"p\">)])</span>\n<span class=\"nv\">Nothing</span>\n<span class=\"nv\">=&gt;</span> <span class=\"c1\">;; &lt;- is an alias of lookup</span>\n<span class=\"nv\">=&gt;</span> <span class=\"p\">(</span><span class=\"nb\">import </span><span class=\"p\">[</span><span class=\"nv\">hymn.types.reader</span> <span class=\"p\">[</span><span class=\"nv\">&lt;-</span><span class=\"p\">]])</span>\n<span class=\"nv\">=&gt;</span> <span class=\"p\">(</span><span class=\"nf\">require</span> <span class=\"p\">[</span><span class=\"nv\">hymn.macros</span> <span class=\"p\">[</span><span class=\"o\">^</span><span class=\"p\">]])</span>\n<span class=\"nv\">=&gt;</span> <span class=\"c1\">;; ^ is the tag macro for lift</span>\n<span class=\"nv\">=&gt;</span> <span class=\"p\">(</span><span class=\"nf\">setv</span> <span class=\"nv\">p</span> <span class=\"p\">(</span><span class=\"o\">#^</span> <span class=\"nb\">print </span><span class=\"p\">(</span><span class=\"nf\">&lt;-</span> <span class=\"ss\">'message</span><span class=\"p\">)</span> <span class=\"ss\">:end</span> <span class=\"p\">(</span><span class=\"nf\">&lt;-</span> <span class=\"ss\">'end</span><span class=\"p\">)))</span>\n<span class=\"nv\">=&gt;</span> <span class=\"p\">(</span><span class=\"nf\">.run</span> <span class=\"nv\">p</span> <span class=\"p\">{</span><span class=\"ss\">'message</span> <span class=\"s\">\"Hello world\"</span> <span class=\"ss\">'end</span> <span class=\"s\">\"!\\n\"</span><span class=\"p\">})</span>\n<span class=\"nv\">Hello</span> <span class=\"nv\">world!</span>\n<span class=\"nv\">=&gt;</span> <span class=\"c1\">;; random number - linear congruential generator</span>\n<span class=\"nv\">=&gt;</span> <span class=\"p\">(</span><span class=\"nb\">import </span><span class=\"p\">[</span><span class=\"nv\">hymn.types.state</span> <span class=\"p\">[</span><span class=\"nv\">get-state</span> <span class=\"nv\">set-state</span><span class=\"p\">]])</span>\n<span class=\"nv\">=&gt;</span> <span class=\"p\">(</span><span class=\"nf\">setv</span> <span class=\"nv\">random</span> <span class=\"p\">(</span><span class=\"nf\">&gt;&gt;</span> <span class=\"nv\">get-state</span> <span class=\"p\">(</span><span class=\"k\">fn </span><span class=\"p\">[</span><span class=\"nv\">s</span><span class=\"p\">]</span> <span class=\"p\">(</span><span class=\"nb\">-&gt; </span><span class=\"nv\">s</span> <span class=\"p\">(</span><span class=\"nb\">* </span><span class=\"mi\">69069</span><span class=\"p\">)</span> <span class=\"nb\">inc </span><span class=\"p\">(</span><span class=\"nf\">%</span> <span class=\"p\">(</span><span class=\"nf\">**</span> <span class=\"mi\">2</span> <span class=\"mi\">32</span><span class=\"p\">))</span> <span class=\"nv\">set-state</span><span class=\"p\">))))</span>\n<span class=\"nv\">=&gt;</span> <span class=\"p\">(</span><span class=\"nf\">.run</span> <span class=\"nv\">random</span> <span class=\"mi\">1234</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"mi\">1234</span>, <span class=\"mi\">85231147</span><span class=\"p\">)</span>\n<span class=\"nv\">=&gt;</span> <span class=\"c1\">;; random can be even shorter by using modify</span>\n<span class=\"nv\">=&gt;</span> <span class=\"p\">(</span><span class=\"nb\">import </span><span class=\"p\">[</span><span class=\"nv\">hymn.types.state</span> <span class=\"p\">[</span><span class=\"nv\">modify</span><span class=\"p\">]])</span>\n<span class=\"nv\">=&gt;</span> <span class=\"p\">(</span><span class=\"nf\">setv</span> <span class=\"nv\">random</span> <span class=\"p\">(</span><span class=\"nf\">modify</span> <span class=\"p\">(</span><span class=\"k\">fn </span><span class=\"p\">[</span><span class=\"nv\">s</span><span class=\"p\">]</span> <span class=\"p\">(</span><span class=\"nb\">-&gt; </span><span class=\"nv\">s</span> <span class=\"p\">(</span><span class=\"nb\">* </span><span class=\"mi\">69069</span><span class=\"p\">)</span> <span class=\"nb\">inc </span><span class=\"p\">(</span><span class=\"nf\">%</span> <span class=\"p\">(</span><span class=\"nf\">**</span> <span class=\"mi\">2</span> <span class=\"mi\">32</span><span class=\"p\">))))))</span>\n<span class=\"nv\">=&gt;</span> <span class=\"p\">(</span><span class=\"nf\">.run</span> <span class=\"nv\">random</span> <span class=\"mi\">1234</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"mi\">1234</span>, <span class=\"mi\">85231147</span><span class=\"p\">)</span>\n<span class=\"nv\">=&gt;</span> <span class=\"c1\">;; use replicate to do computation repeatly</span>\n<span class=\"nv\">=&gt;</span> <span class=\"p\">(</span><span class=\"nb\">import </span><span class=\"p\">[</span><span class=\"nv\">hymn.operations</span> <span class=\"p\">[</span><span class=\"nv\">replicate</span><span class=\"p\">]])</span>\n<span class=\"nv\">=&gt;</span> <span class=\"p\">(</span><span class=\"nf\">.evaluate</span> <span class=\"p\">(</span><span class=\"nb\">replicate </span><span class=\"mi\">5</span> <span class=\"nv\">random</span><span class=\"p\">)</span> <span class=\"mi\">42</span><span class=\"p\">)</span>\n<span class=\"p\">[</span><span class=\"mi\">42</span>, <span class=\"mi\">2900899</span>, <span class=\"mi\">2793697416</span>, <span class=\"mi\">2186085609</span>, <span class=\"mi\">1171637142</span><span class=\"p\">]</span>\n<span class=\"nv\">=&gt;</span> <span class=\"c1\">;; sequence on writer monad</span>\n<span class=\"nv\">=&gt;</span> <span class=\"p\">(</span><span class=\"nb\">import </span><span class=\"p\">[</span><span class=\"nv\">hymn.operations</span> <span class=\"p\">[</span><span class=\"nv\">sequence</span><span class=\"p\">]])</span>\n<span class=\"nv\">=&gt;</span> <span class=\"p\">(</span><span class=\"nb\">import </span><span class=\"p\">[</span><span class=\"nv\">hymn.types.writer</span> <span class=\"p\">[</span><span class=\"nv\">tell</span><span class=\"p\">]])</span>\n<span class=\"nv\">=&gt;</span> <span class=\"p\">(</span><span class=\"nf\">.execute</span> <span class=\"p\">(</span><span class=\"nf\">sequence</span> <span class=\"p\">(</span><span class=\"nb\">map </span><span class=\"nv\">tell</span> <span class=\"p\">(</span><span class=\"nb\">range </span><span class=\"mi\">1</span> <span class=\"mi\">101</span><span class=\"p\">))))</span>\n<span class=\"mi\">5050</span>\n</pre>\n<p>Using Hymn in Python</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">hymn.dsl</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">sequence</span><span class=\"p\">(</span><span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"n\">tell</span><span class=\"p\">,</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">101</span><span class=\"p\">)))</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">()</span>\n<span class=\"mi\">5050</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">msum</span> <span class=\"o\">=</span> <span class=\"n\">lift</span><span class=\"p\">(</span><span class=\"nb\">sum</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">msum</span><span class=\"p\">(</span><span class=\"n\">sequence</span><span class=\"p\">(</span><span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"n\">maybe</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">),</span> <span class=\"s2\">\"12345\"</span><span class=\"p\">)))</span>\n<span class=\"n\">Just</span><span class=\"p\">(</span><span class=\"mi\">15</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">msum</span><span class=\"p\">(</span><span class=\"n\">sequence</span><span class=\"p\">(</span><span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"n\">maybe</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">),</span> <span class=\"s2\">\"12345a\"</span><span class=\"p\">)))</span>\n<span class=\"n\">Nothing</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nd\">@failsafe</span>\n<span class=\"o\">...</span> <span class=\"k\">def</span> <span class=\"nf\">safe_div</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"k\">return</span> <span class=\"n\">a</span> <span class=\"o\">/</span> <span class=\"n\">b</span>\n<span class=\"o\">...</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">safe_div</span><span class=\"p\">(</span><span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">Right</span><span class=\"p\">(</span><span class=\"mf\">0.5</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">safe_div</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">Left</span><span class=\"p\">(</span><span class=\"ne\">ZeroDivisionError</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">))</span>\n</pre>\n</div>\n<div id=\"requirements\">\n<h2>Requirements</h2>\n<ul>\n<li>hy &gt;= 0.14.0</li>\n</ul>\n<p>For hy version 0.13, please install hymn 0.7.</p>\n<p>For hy version 0.12, please install hymn 0.6.</p>\n<p>For hy version 0.11 and earlier, please install hymn 0.5.</p>\n<p>See Changelog section in documentation for details.</p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Install from PyPI:</p>\n<pre>pip install hymn\n</pre>\n<p>Install from source, download source package, decompress, then <code>cd</code> into\nsource directory, run:</p>\n<pre>make install\n</pre>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>BSD New, see LICENSE for details.</p>\n</div>\n<div id=\"links\">\n<h2>Links</h2>\n<dl>\n<dt>Documentation:</dt>\n<dd><a href=\"https://hymn.readthedocs.io/\" rel=\"nofollow\">https://hymn.readthedocs.io/</a></dd>\n<dt>Issue Tracker:</dt>\n<dd><a href=\"https://github.com/pyx/hymn/issues/\" rel=\"nofollow\">https://github.com/pyx/hymn/issues/</a></dd>\n<dt>Source Package @ PyPI:</dt>\n<dd><a href=\"https://pypi.python.org/pypi/hymn/\" rel=\"nofollow\">https://pypi.python.org/pypi/hymn/</a></dd>\n<dt>Mercurial Repository @ bitbucket:</dt>\n<dd><a href=\"https://bitbucket.org/pyx/hymn/\" rel=\"nofollow\">https://bitbucket.org/pyx/hymn/</a></dd>\n<dt>Git Repository @ Gitlab:</dt>\n<dd><a href=\"https://gitlab.com/pyx/hymn/\" rel=\"nofollow\">https://gitlab.com/pyx/hymn/</a></dd>\n<dt>Git Repository @ Github:</dt>\n<dd><a href=\"https://github.com/pyx/hymn/\" rel=\"nofollow\">https://github.com/pyx/hymn/</a></dd>\n</dl>\n</div>\n\n          </div>"}, "last_serial": 3808919, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "2c3290eff38108eef4fc7f75ae253344", "sha256": "cb591feb5c73c5d0ca0a4463b05fecf1a9888834e644583edec1d42ee5bae847"}, "downloads": -1, "filename": "hymn-0.1.tar.gz", "has_sig": true, "md5_digest": "2c3290eff38108eef4fc7f75ae253344", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 33678, "upload_time": "2015-12-10T02:03:52", "upload_time_iso_8601": "2015-12-10T02:03:52.690892Z", "url": "https://files.pythonhosted.org/packages/e3/80/a502e7faf3a2d83c7333eb57ee6482d7f9931de941c456422cb09e040088/hymn-0.1.tar.gz", "yanked": false}], "0.1dev": [], "0.2": [{"comment_text": "", "digests": {"md5": "48aa24de112685f7de46f003459124c2", "sha256": "23abc35a3e62bac9ef7ea766aa8268e97a83189345457ea66b8b0ee59810235d"}, "downloads": -1, "filename": "hymn-0.2.tar.gz", "has_sig": true, "md5_digest": "48aa24de112685f7de46f003459124c2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 36375, "upload_time": "2015-12-15T11:34:31", "upload_time_iso_8601": "2015-12-15T11:34:31.018471Z", "url": "https://files.pythonhosted.org/packages/42/a1/b11ede123109b434ace2913887531be3555a52c859057785b95f5d49366a/hymn-0.2.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "065aa126e36491f462ef4a5a0789c073", "sha256": "5eb9e9914cd8de411eb9f04d131f2acc724dc648ea66d1fdc367ed1d6fa5d601"}, "downloads": -1, "filename": "hymn-0.3.tar.gz", "has_sig": true, "md5_digest": "065aa126e36491f462ef4a5a0789c073", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 40902, "upload_time": "2016-01-02T00:59:20", "upload_time_iso_8601": "2016-01-02T00:59:20.893100Z", "url": "https://files.pythonhosted.org/packages/1f/04/b4c39c5a3284267bb1e7bb6dc2e9de2c0306a5d742b4cb33ea7204f30a4f/hymn-0.3.tar.gz", "yanked": false}], "0.4": [], "0.5": [{"comment_text": "", "digests": {"md5": "b086a153ffc1097dab12d8f7b4066376", "sha256": "3efaa194a444c7605285395f61878f77aab2c6c9aa52eeaa8d7b539d1077369d"}, "downloads": -1, "filename": "hymn-0.5.tar.gz", "has_sig": true, "md5_digest": "b086a153ffc1097dab12d8f7b4066376", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 40218, "upload_time": "2016-01-26T01:42:25", "upload_time_iso_8601": "2016-01-26T01:42:25.220106Z", "url": "https://files.pythonhosted.org/packages/95/a2/f76152eaf169e50e2eee09de98c710f94bb49918c485e90e96af70212d8f/hymn-0.5.tar.gz", "yanked": false}], "0.6": [{"comment_text": "", "digests": {"md5": "7278383dd5d765652d536a330f8bc410", "sha256": "4ef353aa2ad7f09b34a36c37c8980e3a615eae84954af1dc3f2825db3581e1fc"}, "downloads": -1, "filename": "hymn-0.6-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "7278383dd5d765652d536a330f8bc410", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 24097, "upload_time": "2017-01-26T06:35:49", "upload_time_iso_8601": "2017-01-26T06:35:49.099009Z", "url": "https://files.pythonhosted.org/packages/c6/d4/e3b0d66dde0b6e23f846957ebd0405ce860b6357b7e1c063a68bb4f07fea/hymn-0.6-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4d90f0c2528cc87a8dddf045c7b781fc", "sha256": "1649c9a79c8c2d9fe0f9b2c0c0bcbff02ede52105db7597b80475bd83df53bd2"}, "downloads": -1, "filename": "hymn-0.6.tar.gz", "has_sig": true, "md5_digest": "4d90f0c2528cc87a8dddf045c7b781fc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 43596, "upload_time": "2017-01-26T06:35:50", "upload_time_iso_8601": "2017-01-26T06:35:50.582021Z", "url": "https://files.pythonhosted.org/packages/fa/43/a76f11b22aea46036ed60b217403d01da3836c669fd0ce6a659fb2b0d3d6/hymn-0.6.tar.gz", "yanked": false}], "0.7": [{"comment_text": "", "digests": {"md5": "dce1afc3675221c77e0835a5e35d4917", "sha256": "2810d76e37be246d8e55ed2c8c5c79fd758f8aee9717539758243c032897983b"}, "downloads": -1, "filename": "hymn-0.7-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "dce1afc3675221c77e0835a5e35d4917", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 24023, "upload_time": "2017-07-03T07:59:22", "upload_time_iso_8601": "2017-07-03T07:59:22.085729Z", "url": "https://files.pythonhosted.org/packages/7e/91/1c75b1525f6fc6101540638daa6fb4cf2112a5e412062cca7e5ac57aa880/hymn-0.7-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8c49fb31adb0103ee60fe4777db6836a", "sha256": "48238363ce7199ac36d170fc820516b1893f228cb6f16e2d4118e55002b90a9b"}, "downloads": -1, "filename": "hymn-0.7.tar.gz", "has_sig": true, "md5_digest": "8c49fb31adb0103ee60fe4777db6836a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 43285, "upload_time": "2017-07-03T07:59:24", "upload_time_iso_8601": "2017-07-03T07:59:24.410821Z", "url": "https://files.pythonhosted.org/packages/74/20/3dc75dd69cc2a668679078b0ab51efa2da753a419b66a4dd32b321c641ba/hymn-0.7.tar.gz", "yanked": false}], "0.8": [{"comment_text": "", "digests": {"md5": "1edbfe697b9c490188d7568464cad70f", "sha256": "bdfb0afb898c3dc3db43db327a87a08bd51e14aa3df092b03e7fb84b04c3933e"}, "downloads": -1, "filename": "hymn-0.8-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "1edbfe697b9c490188d7568464cad70f", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 20331, "upload_time": "2018-04-26T03:27:23", "upload_time_iso_8601": "2018-04-26T03:27:23.279331Z", "url": "https://files.pythonhosted.org/packages/29/6f/07ce056835aea2defff0ee3e503a6e80ecdbccfa8100e96a10b04b3e466f/hymn-0.8-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "15810f4943aa0c5e8f20423e9ccaf5f4", "sha256": "527356ea5ec157fb34a70bdd5cb955927a9ddd917fb08c91acbb95bea9d72d4b"}, "downloads": -1, "filename": "hymn-0.8.tar.gz", "has_sig": true, "md5_digest": "15810f4943aa0c5e8f20423e9ccaf5f4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 42347, "upload_time": "2018-04-26T03:27:24", "upload_time_iso_8601": "2018-04-26T03:27:24.473380Z", "url": "https://files.pythonhosted.org/packages/72/3d/9824b01e7e819a4314da05bca1de7810592515330d32c5b227a44686e9ea/hymn-0.8.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "1edbfe697b9c490188d7568464cad70f", "sha256": "bdfb0afb898c3dc3db43db327a87a08bd51e14aa3df092b03e7fb84b04c3933e"}, "downloads": -1, "filename": "hymn-0.8-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "1edbfe697b9c490188d7568464cad70f", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 20331, "upload_time": "2018-04-26T03:27:23", "upload_time_iso_8601": "2018-04-26T03:27:23.279331Z", "url": "https://files.pythonhosted.org/packages/29/6f/07ce056835aea2defff0ee3e503a6e80ecdbccfa8100e96a10b04b3e466f/hymn-0.8-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "15810f4943aa0c5e8f20423e9ccaf5f4", "sha256": "527356ea5ec157fb34a70bdd5cb955927a9ddd917fb08c91acbb95bea9d72d4b"}, "downloads": -1, "filename": "hymn-0.8.tar.gz", "has_sig": true, "md5_digest": "15810f4943aa0c5e8f20423e9ccaf5f4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 42347, "upload_time": "2018-04-26T03:27:24", "upload_time_iso_8601": "2018-04-26T03:27:24.473380Z", "url": "https://files.pythonhosted.org/packages/72/3d/9824b01e7e819a4314da05bca1de7810592515330d32c5b227a44686e9ea/hymn-0.8.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:49:36 2020"}