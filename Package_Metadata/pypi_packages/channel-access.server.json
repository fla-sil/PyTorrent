{"info": {"author": "Andr\u00e9 Althaus", "author_email": "andre.althaus@tu-dortmund.de", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Scientific/Engineering"], "description": "Channel Access server library\n=============================\n\nThis library contains a low-level binding to the cas library in EPICS base\nand a thread-safe high level interface to create channel access servers.\n\nInstallation\n------------\nBefore installing the library, the environment variables ``EPICS_BASE``\nand ``EPICS_HOST_ARCH`` must be set.\n\nThen the library can be installed with pip::\n\n    pip install channel_access.server\n\nIf *numpy* can be imported at install time, numpy support is automatically\nactivated. This can be explicitly controlled with the environment variable\n``CA_WITH_NUMPY``::\n\n    CA_WITH_NUMPY=0 pip install channel_access.server\n    CA_WITH_NUMPY=1 pip install channel_access.server\n\nIf the package is compiled with numpy support, numpy arrays are used\nby default. If numpy arrays should not be used, the parameter ``use_numpy``\ncan be set to ``False``.\n\nExample\n-------\nThis example shows a simple server with a PV counting up:\n\n.. code:: python\n\n    import time\n    import channel_access.common as ca\n    import channel_access.server as cas\n\n    with cas.Server() as server:\n        pv = server.createPV('CAS:Test', ca.Type.LONG)\n        while True:\n            pv.value += 1\n            time.sleep(1.0)\n\nDocumentation\n-------------\nThe documentation is available `online`_ or it can be\ngenerated from the source code with *sphinx*::\n\n    cd /path/to/repository\n    pip install -e .\n    python setup.py build_sphinx\n\nThen open ``build/sphinx/html/index.html``.\n\n.. _online: https://delta-accelerator.github.io/channel_access.server\n\nGet the source\n--------------\nThe source code is available in a `Github repository`_::\n\n    git clone https://github.com/delta-accelerator/channel_access.server\n\n.. _Github repository: https://github.com/delta-accelerator/channel_access.server\n\nTests\n-----\nTests are run with *pytest*::\n\n    cd /path/to/repository\n    pytest -v\n\nTo run the tests for all supported version use *tox*::\n\n    cd /path/to/repository\n    tox", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "epics ca cas channel_access", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "channel-access.server", "package_url": "https://pypi.org/project/channel-access.server/", "platform": "", "project_url": "https://pypi.org/project/channel-access.server/", "project_urls": null, "release_url": "https://pypi.org/project/channel-access.server/0.2.0/", "requires_dist": null, "requires_python": ">= 3.5", "summary": "Channel Access server library", "version": "0.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>This library contains a low-level binding to the cas library in EPICS base\nand a thread-safe high level interface to create channel access servers.</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Before installing the library, the environment variables <tt>EPICS_BASE</tt>\nand <tt>EPICS_HOST_ARCH</tt> must be set.</p>\n<p>Then the library can be installed with pip:</p>\n<pre>pip install channel_access.server\n</pre>\n<p>If <em>numpy</em> can be imported at install time, numpy support is automatically\nactivated. This can be explicitly controlled with the environment variable\n<tt>CA_WITH_NUMPY</tt>:</p>\n<pre>CA_WITH_NUMPY=0 pip install channel_access.server\nCA_WITH_NUMPY=1 pip install channel_access.server\n</pre>\n<p>If the package is compiled with numpy support, numpy arrays are used\nby default. If numpy arrays should not be used, the parameter <tt>use_numpy</tt>\ncan be set to <tt>False</tt>.</p>\n</div>\n<div id=\"example\">\n<h2>Example</h2>\n<p>This example shows a simple server with a PV counting up:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">time</span>\n<span class=\"kn\">import</span> <span class=\"nn\">channel_access.common</span> <span class=\"k\">as</span> <span class=\"nn\">ca</span>\n<span class=\"kn\">import</span> <span class=\"nn\">channel_access.server</span> <span class=\"k\">as</span> <span class=\"nn\">cas</span>\n\n<span class=\"k\">with</span> <span class=\"n\">cas</span><span class=\"o\">.</span><span class=\"n\">Server</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">server</span><span class=\"p\">:</span>\n    <span class=\"n\">pv</span> <span class=\"o\">=</span> <span class=\"n\">server</span><span class=\"o\">.</span><span class=\"n\">createPV</span><span class=\"p\">(</span><span class=\"s1\">'CAS:Test'</span><span class=\"p\">,</span> <span class=\"n\">ca</span><span class=\"o\">.</span><span class=\"n\">Type</span><span class=\"o\">.</span><span class=\"n\">LONG</span><span class=\"p\">)</span>\n    <span class=\"k\">while</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n        <span class=\"n\">pv</span><span class=\"o\">.</span><span class=\"n\">value</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n        <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mf\">1.0</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"documentation\">\n<h2>Documentation</h2>\n<p>The documentation is available <a href=\"https://delta-accelerator.github.io/channel_access.server\" rel=\"nofollow\">online</a> or it can be\ngenerated from the source code with <em>sphinx</em>:</p>\n<pre>cd /path/to/repository\npip install -e .\npython setup.py build_sphinx\n</pre>\n<p>Then open <tt>build/sphinx/html/index.html</tt>.</p>\n</div>\n<div id=\"get-the-source\">\n<h2>Get the source</h2>\n<p>The source code is available in a <a href=\"https://github.com/delta-accelerator/channel_access.server\" rel=\"nofollow\">Github repository</a>:</p>\n<pre>git clone https://github.com/delta-accelerator/channel_access.server\n</pre>\n</div>\n<div id=\"tests\">\n<h2>Tests</h2>\n<p>Tests are run with <em>pytest</em>:</p>\n<pre>cd /path/to/repository\npytest -v\n</pre>\n<p>To run the tests for all supported version use <em>tox</em>:</p>\n<pre>cd /path/to/repository\ntox\n</pre>\n</div>\n\n          </div>"}, "last_serial": 5431091, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "3986bd87c0ab740713f96e531476d2f6", "sha256": "cf8dc31777c47d3d0857cef2180b643f4aa2f5c0a1fc6bb05ab469e9e5ed794f"}, "downloads": -1, "filename": "channel_access.server-0.1.0.tar.gz", "has_sig": false, "md5_digest": "3986bd87c0ab740713f96e531476d2f6", "packagetype": "sdist", "python_version": "source", "requires_python": ">= 3.5", "size": 21180, "upload_time": "2019-06-12T14:47:26", "upload_time_iso_8601": "2019-06-12T14:47:26.337742Z", "url": "https://files.pythonhosted.org/packages/26/7e/6636f3205268c5ba618040ccc31ca62365ea282bb96fbe6a02afbc1fb083/channel_access.server-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "7de18a40ec786ddec480dba5424fdda1", "sha256": "875b64091ecd2975c7ba9246315a857eff1aa2857eca1813b5d508761c3ae58a"}, "downloads": -1, "filename": "channel_access.server-0.1.1.tar.gz", "has_sig": false, "md5_digest": "7de18a40ec786ddec480dba5424fdda1", "packagetype": "sdist", "python_version": "source", "requires_python": ">= 3.5", "size": 21981, "upload_time": "2019-06-12T14:56:42", "upload_time_iso_8601": "2019-06-12T14:56:42.120698Z", "url": "https://files.pythonhosted.org/packages/c0/6b/ea86210996690501f29c4c0ffdc9b7653b7bb000b09182f8442248e9c889/channel_access.server-0.1.1.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "35d9a6374117dafd7f02b5413357e6e1", "sha256": "3777e95b9d154cad4026509c8d7aed22704ef78308e03d74db8a55c8321d4dfc"}, "downloads": -1, "filename": "channel_access.server-0.2.0.tar.gz", "has_sig": false, "md5_digest": "35d9a6374117dafd7f02b5413357e6e1", "packagetype": "sdist", "python_version": "source", "requires_python": ">= 3.5", "size": 24835, "upload_time": "2019-06-21T14:20:35", "upload_time_iso_8601": "2019-06-21T14:20:35.561544Z", "url": "https://files.pythonhosted.org/packages/2b/da/5873b2b5f8cf2e0bec84db849102928ccf8f6cd07fcfe97bf1bc3812f58e/channel_access.server-0.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "35d9a6374117dafd7f02b5413357e6e1", "sha256": "3777e95b9d154cad4026509c8d7aed22704ef78308e03d74db8a55c8321d4dfc"}, "downloads": -1, "filename": "channel_access.server-0.2.0.tar.gz", "has_sig": false, "md5_digest": "35d9a6374117dafd7f02b5413357e6e1", "packagetype": "sdist", "python_version": "source", "requires_python": ">= 3.5", "size": 24835, "upload_time": "2019-06-21T14:20:35", "upload_time_iso_8601": "2019-06-21T14:20:35.561544Z", "url": "https://files.pythonhosted.org/packages/2b/da/5873b2b5f8cf2e0bec84db849102928ccf8f6cd07fcfe97bf1bc3812f58e/channel_access.server-0.2.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:34:29 2020"}