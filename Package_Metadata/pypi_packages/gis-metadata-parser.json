{"info": {"author": "", "author_email": "", "bugtrack_url": null, "classifiers": [], "description": "# gis_metadata_parser\n\nXML parsers for GIS metadata that are designed to read in, validate, update and output a core set of properties that have been mapped between the most common standards, currently:\n\n* FGDC\n* ISO-19139 (and ISO-19115)\n* ArcGIS (tested with ArcGIS format 1.0).\n\nThis library is compatible with Python versions 2.7 and 3.4 through 3.6.\n\n[![Build Status](https://travis-ci.org/consbio/gis-metadata-parser.png?branch=master)](https://travis-ci.org/consbio/gis-metadata-parser) [![Coverage Status](https://coveralls.io/repos/github/consbio/gis-metadata-parser/badge.svg?branch=master)](https://coveralls.io/github/consbio/gis-metadata-parser?branch=master)\n\n## Installation\nInstall with `pip install gis-metadata-parser`.\n\n## Usage\n\nParsers can be instantiated from files, XML strings or URLs. They can be converted from one standard to another as well.\n```python\nfrom gis_metadata.arcgis_metadata_parser import ArcGISParser\nfrom gis_metadata.fgdc_metadata_parser import FgdcParser\nfrom gis_metadata.iso_metadata_parser import IsoParser\nfrom gis_metadata.metadata_parser import get_metadata_parser\n\n# From file objects\nwith open(r'/path/to/metadata.xml') as metadata:\n    fgdc_from_file = FgdcParser(metadata)\n\nwith open(r'/path/to/metadata.xml') as metadata:\n    iso_from_file = IsoParser(metadata)\n\n# Detect standard based on root element, metadata\nfgdc_from_string = get_metadata_parser(\n    \"\"\"\n    <?xml version='1.0' encoding='UTF-8'?>\n    <metadata>\n        <idinfo>\n        </idinfo>\n    </metadata>\n    \"\"\"\n)\n\n# Detect ArcGIS standard based on root element and its nodes\niso_from_string = get_metadata_parser(\n    \"\"\"\n    <?xml version='1.0' encoding='UTF-8'?>\n    <metadata>\n        <dataIdInfo/></dataIdInfo>\n        <distInfo/></distInfo>\n        <dqInfo/></dqInfo>\n    </metadata>\n    \"\"\"\n)\n\n# Detect ISO standard based on root element, MD_Metadata or MI_Metadata\niso_from_string = get_metadata_parser(\n    \"\"\"\n    <?xml version='1.0' encoding='UTF-8'?>\n    <MD_Metadata>\n        <identificationInfo>\n        </identificationInfo>\n    </MD_Metadata>\n    \"\"\"\n)\n\n# Convert from one standard to another\nfgdc_converted = iso_from_file.convert_to(FgdcParser)\niso_converted = fgdc_from_file.convert_to(IsoParser)\narcgis_converted = iso_converted.convert_to(ArcGISParser)\n\n# Output supported properties as key value pairs (dict)\nfgdc_key_vals = fgdc_from_file.convert_to(dict)\niso_key_vals = iso_from_file.convert_to(dict)\n```\n\nFinally, the properties of the parser can be updated, validated, applied and output:\n```python\nwith open(r'/path/to/metadata.xml') as metadata:\n    fgdc_from_file = FgdcParser(metadata)\n\n# Example simple properties\nfgdc_from_file.title\nfgdc_from_file.abstract\nfgdc_from_file.place_keywords\nfgdc_from_file.thematic_keywords\n\n# :see: gis_metadata.utils.SUPPORTED_PROPS for list of all supported properties\n\n# Complex properties\nfgdc_from_file.attributes\nfgdc_from_file.bounding_box\nfgdc_from_file.contacts\nfgdc_from_file.dates\nfgdc_from_file.digital_forms\nfgdc_from_file.larger_works\nfgdc_from_file.process_steps\nfgdc_from_file.raster_info\n\n# :see: gis_metadata.utils.COMPLEX_DEFINITIONS for structure of all complex properties\n\n# Update properties\nfgdc_from_file.title = 'New Title'\nfgdc_from_file.dates = {'type': 'single' 'values': '1/1/2016'}\n\n# Apply updates\nfgdc_from_file.validate()                                      # Ensure updated properties are valid\nfgdc_from_file.serialize()                                     # Output updated XML as a string\nfgdc_from_file.write()                                         # Output updated XML to existing file\nfgdc_from_file.write(out_file_or_path='/path/to/updated.xml')  # Output updated XML to new file\n```\n\n## Extending and Customizing\n\n### Tips\n\nThere are a few unwritten (until now) rules about the way the metadata parsers are wired to work:\n\n1. Properties are generally defined by XPATH in each `parser._data_map`\n2. Simple parser properties accept only values of `string` and `list`'s of `string`'s\n3. XPATH's configured in the data map support references to element attributes: `'path/to/element/@attr'`\n4. Complex parser properties are defined by custom parser/updater functions instead of by XPATH\n5. Complex parser properties accept values of type `dict` containing simple properties, or a list of said `dict`'s\n6. XPATH keys in the data map with leading underscores are parsed, but not validated or written out\n7. XPATH keys in the data map that \"shadow\" other properties but with a leading underscore serve as secondary values\n8. Secondary values are used in the absence of a primary value if primary location (element or attribute) is missing\n9. Additional underscores indicate further locations to check for missing values, i.e. `title`, `_title`, `__title`\n\nSome examples of existing secondary properties are as follows:\n```python\n# In the ArcGIS parser for distribution contact phone:\n\nARCGIS_TAG_FORMATS = frozendict({\n     ...\n    'dist_phone': 'distInfo/distributor/distorCont/rpCntInfo/cntPhone/voiceNum',\n    '_dist_phone': 'distInfo/distributor/distorCont/rpCntInfo/voiceNum',  # If not in cntPhone\n    ...\n})\n\n# In the FGDC parser for sub-properties in the contacts definition:\n\nFGDC_DEFINITIONS = dict({k: dict(v) for k, v in iteritems(COMPLEX_DEFINITIONS)})\nFGDC_DEFINITIONS[CONTACTS].update({\n    '_name': '{_name}',\n    '_organization': '{_organization}'\n})\n...\nclass FgdcParser(MetadataParser):\n    ...\n    def _init_data_map(self):\n        ...\n        ct_format = FGDC_TAG_FORMATS[CONTACTS]\n        fgdc_data_structures[CONTACTS] = format_xpaths(\n            ...\n            name=ct_format.format(ct_path='cntperp/cntper'),\n            _name=ct_format.format(ct_path='cntorgp/cntper'),  # If not in cntperp\n            organization=ct_format.format(ct_path='cntperp/cntorg'),\n            _organization=ct_format.format(ct_path='cntorgp/cntorg'),  # If not in cntperp\n        )\n\n# Also see the ISO parser for secondary and tertiary sub-properties in the attributes definition:\n\nISO_DEFINITIONS = dict({k: dict(v) for k, v in iteritems(COMPLEX_DEFINITIONS)})\nISO_DEFINITIONS[ATTRIBUTES].update({\n    '_definition_source': '{_definition_src}',\n    '__definition_source': '{__definition_src}',\n    '___definition_source': '{___definition_src}'\n})\n```\n\n\n### Examples\n\nAny of the supported parsers can be extended to include more of a standard's supported data. In this example we'll add two new properties to the `IsoParser`:\n\n* `metadata_language`: a simple string field describing the language of the metadata file itself (not the dataset)\n* `metadata_contacts`: a complex structure with contact info leveraging and enhancing the existing contact structure\n\nThis example will cover:\n\n1. Adding a new simple property\n2. Configuring a secondary location for a property value\n3. Referencing an element attribute in an XPATH\n4. Adding a new complex property\n5. Customizing the complex property to include a new sub-property\n\nAlso, this example is specifically covered by unit tests.\n\n```python\nfrom gis_metadata.iso_metadata_parser import IsoParser\nfrom gis_metadata.utils import COMPLEX_DEFINITIONS, CONTACTS, format_xpaths, ParserProperty\n\n\nclass CustomIsoParser(IsoParser):\n\n    def _init_data_map(self):\n        super(CustomIsoParser, self)._init_data_map()\n\n        # 1. Basic property: text or list (with secondary location referencing `codeListValue` attribute)\n\n        lang_prop = 'metadata_language'\n        self._data_map[lang_prop] = 'language/CharacterString'                    # Parse from here if present\n        self._data_map['_' + lang_prop] = 'language/LanguageCode/@codeListValue'  # Otherwise, try from here\n\n        # 2. Complex structure (reuse of contacts structure plus phone)\n\n        # 2.1 Define some basic variables\n        ct_prop = 'metadata_contacts'\n        ct_xpath = 'contact/CI_ResponsibleParty/{ct_path}'\n        ct_defintion = COMPLEX_DEFINITIONS[CONTACTS]\n        ct_defintion['phone'] = '{phone}'\n\n        # 2.2 Reuse CONTACT structure to specify locations per prop (adapted from parent to add `phone`)\n        self._data_structures[ct_prop] = format_xpaths(\n            ct_defintion,\n            name=ct_xpath.format(ct_path='individualName/CharacterString'),\n            organization=ct_xpath.format(ct_path='organisationName/CharacterString'),\n            position=ct_xpath.format(ct_path='positionName/CharacterString'),\n            phone=ct_xpath.format(\n                ct_path='contactInfo/CI_Contact/phone/CI_Telephone/voice/CharacterString'\n            ),\n            email=ct_xpath.format(\n                ct_path='contactInfo/CI_Contact/address/CI_Address/electronicMailAddress/CharacterString'\n            )\n        )\n\n        # 2.3 Set the contact root to insert new elements at \"contact\" level given the defined path:\n        #   'contact/CI_ResponsibleParty/...'\n        # By default we would get multiple \"CI_ResponsibleParty\" elements under a single \"contact\"\n        # This way we get multiple \"contact\" elements, each with its own single \"CI_ResponsibleParty\"\n        self._data_map['_{prop}_root'.format(prop=ct_prop)] = 'contact'\n\n        # 2.4 Leverage the default methods for parsing complex properties (or write your own parser/updater)\n        self._data_map[ct_prop] = ParserProperty(self._parse_complex_list, self._update_complex_list)\n\n        # 3. And finally, let the parent validation logic know about the two new custom properties\n\n        self._metadata_props.add(lang_prop)\n        self._metadata_props.add(ct_prop)\n\n\nwith open(r'/path/to/metadata.xml') as metadata:\n    iso_from_file = CustomIsoParser(metadata)\n\niso_from_file.metadata_language\niso_from_file.metadata_contacts\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/consbio/gis-metadata-parser", "keywords": "arcgis,fgdc,iso,ISO-19115,ISO-19139,gis,metadata,parser,xml,gis_metadata,gis_metadata_parser", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "gis-metadata-parser", "package_url": "https://pypi.org/project/gis-metadata-parser/", "platform": "", "project_url": "https://pypi.org/project/gis-metadata-parser/", "project_urls": {"Homepage": "https://github.com/consbio/gis-metadata-parser"}, "release_url": "https://pypi.org/project/gis-metadata-parser/1.2.2/", "requires_dist": ["frozendict (>=1.2)", "parserutils (>=1.1)", "six (>=1.9.0)"], "requires_python": "", "summary": "Parser for GIS metadata standards including FGDC and ISO-19115", "version": "1.2.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>gis_metadata_parser</h1>\n<p>XML parsers for GIS metadata that are designed to read in, validate, update and output a core set of properties that have been mapped between the most common standards, currently:</p>\n<ul>\n<li>FGDC</li>\n<li>ISO-19139 (and ISO-19115)</li>\n<li>ArcGIS (tested with ArcGIS format 1.0).</li>\n</ul>\n<p>This library is compatible with Python versions 2.7 and 3.4 through 3.6.</p>\n<p><a href=\"https://travis-ci.org/consbio/gis-metadata-parser\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/59115b51d416c5fffe0e51697c727948f07d1703/68747470733a2f2f7472617669732d63692e6f72672f636f6e7362696f2f6769732d6d657461646174612d7061727365722e706e673f6272616e63683d6d6173746572\"></a> <a href=\"https://coveralls.io/github/consbio/gis-metadata-parser?branch=master\" rel=\"nofollow\"><img alt=\"Coverage Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3c3931f4fc159a80491acfccc42d0d0a0f5431ef/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f636f6e7362696f2f6769732d6d657461646174612d7061727365722f62616467652e7376673f6272616e63683d6d6173746572\"></a></p>\n<h2>Installation</h2>\n<p>Install with <code>pip install gis-metadata-parser</code>.</p>\n<h2>Usage</h2>\n<p>Parsers can be instantiated from files, XML strings or URLs. They can be converted from one standard to another as well.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">gis_metadata.arcgis_metadata_parser</span> <span class=\"kn\">import</span> <span class=\"n\">ArcGISParser</span>\n<span class=\"kn\">from</span> <span class=\"nn\">gis_metadata.fgdc_metadata_parser</span> <span class=\"kn\">import</span> <span class=\"n\">FgdcParser</span>\n<span class=\"kn\">from</span> <span class=\"nn\">gis_metadata.iso_metadata_parser</span> <span class=\"kn\">import</span> <span class=\"n\">IsoParser</span>\n<span class=\"kn\">from</span> <span class=\"nn\">gis_metadata.metadata_parser</span> <span class=\"kn\">import</span> <span class=\"n\">get_metadata_parser</span>\n\n<span class=\"c1\"># From file objects</span>\n<span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s1\">'/path/to/metadata.xml'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">metadata</span><span class=\"p\">:</span>\n    <span class=\"n\">fgdc_from_file</span> <span class=\"o\">=</span> <span class=\"n\">FgdcParser</span><span class=\"p\">(</span><span class=\"n\">metadata</span><span class=\"p\">)</span>\n\n<span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s1\">'/path/to/metadata.xml'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">metadata</span><span class=\"p\">:</span>\n    <span class=\"n\">iso_from_file</span> <span class=\"o\">=</span> <span class=\"n\">IsoParser</span><span class=\"p\">(</span><span class=\"n\">metadata</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Detect standard based on root element, metadata</span>\n<span class=\"n\">fgdc_from_string</span> <span class=\"o\">=</span> <span class=\"n\">get_metadata_parser</span><span class=\"p\">(</span>\n    <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">    &lt;?xml version='1.0' encoding='UTF-8'?&gt;</span>\n<span class=\"sd\">    &lt;metadata&gt;</span>\n<span class=\"sd\">        &lt;idinfo&gt;</span>\n<span class=\"sd\">        &lt;/idinfo&gt;</span>\n<span class=\"sd\">    &lt;/metadata&gt;</span>\n<span class=\"sd\">    \"\"\"</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\"># Detect ArcGIS standard based on root element and its nodes</span>\n<span class=\"n\">iso_from_string</span> <span class=\"o\">=</span> <span class=\"n\">get_metadata_parser</span><span class=\"p\">(</span>\n    <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">    &lt;?xml version='1.0' encoding='UTF-8'?&gt;</span>\n<span class=\"sd\">    &lt;metadata&gt;</span>\n<span class=\"sd\">        &lt;dataIdInfo/&gt;&lt;/dataIdInfo&gt;</span>\n<span class=\"sd\">        &lt;distInfo/&gt;&lt;/distInfo&gt;</span>\n<span class=\"sd\">        &lt;dqInfo/&gt;&lt;/dqInfo&gt;</span>\n<span class=\"sd\">    &lt;/metadata&gt;</span>\n<span class=\"sd\">    \"\"\"</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\"># Detect ISO standard based on root element, MD_Metadata or MI_Metadata</span>\n<span class=\"n\">iso_from_string</span> <span class=\"o\">=</span> <span class=\"n\">get_metadata_parser</span><span class=\"p\">(</span>\n    <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">    &lt;?xml version='1.0' encoding='UTF-8'?&gt;</span>\n<span class=\"sd\">    &lt;MD_Metadata&gt;</span>\n<span class=\"sd\">        &lt;identificationInfo&gt;</span>\n<span class=\"sd\">        &lt;/identificationInfo&gt;</span>\n<span class=\"sd\">    &lt;/MD_Metadata&gt;</span>\n<span class=\"sd\">    \"\"\"</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\"># Convert from one standard to another</span>\n<span class=\"n\">fgdc_converted</span> <span class=\"o\">=</span> <span class=\"n\">iso_from_file</span><span class=\"o\">.</span><span class=\"n\">convert_to</span><span class=\"p\">(</span><span class=\"n\">FgdcParser</span><span class=\"p\">)</span>\n<span class=\"n\">iso_converted</span> <span class=\"o\">=</span> <span class=\"n\">fgdc_from_file</span><span class=\"o\">.</span><span class=\"n\">convert_to</span><span class=\"p\">(</span><span class=\"n\">IsoParser</span><span class=\"p\">)</span>\n<span class=\"n\">arcgis_converted</span> <span class=\"o\">=</span> <span class=\"n\">iso_converted</span><span class=\"o\">.</span><span class=\"n\">convert_to</span><span class=\"p\">(</span><span class=\"n\">ArcGISParser</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Output supported properties as key value pairs (dict)</span>\n<span class=\"n\">fgdc_key_vals</span> <span class=\"o\">=</span> <span class=\"n\">fgdc_from_file</span><span class=\"o\">.</span><span class=\"n\">convert_to</span><span class=\"p\">(</span><span class=\"nb\">dict</span><span class=\"p\">)</span>\n<span class=\"n\">iso_key_vals</span> <span class=\"o\">=</span> <span class=\"n\">iso_from_file</span><span class=\"o\">.</span><span class=\"n\">convert_to</span><span class=\"p\">(</span><span class=\"nb\">dict</span><span class=\"p\">)</span>\n</pre>\n<p>Finally, the properties of the parser can be updated, validated, applied and output:</p>\n<pre><span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s1\">'/path/to/metadata.xml'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">metadata</span><span class=\"p\">:</span>\n    <span class=\"n\">fgdc_from_file</span> <span class=\"o\">=</span> <span class=\"n\">FgdcParser</span><span class=\"p\">(</span><span class=\"n\">metadata</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Example simple properties</span>\n<span class=\"n\">fgdc_from_file</span><span class=\"o\">.</span><span class=\"n\">title</span>\n<span class=\"n\">fgdc_from_file</span><span class=\"o\">.</span><span class=\"n\">abstract</span>\n<span class=\"n\">fgdc_from_file</span><span class=\"o\">.</span><span class=\"n\">place_keywords</span>\n<span class=\"n\">fgdc_from_file</span><span class=\"o\">.</span><span class=\"n\">thematic_keywords</span>\n\n<span class=\"c1\"># :see: gis_metadata.utils.SUPPORTED_PROPS for list of all supported properties</span>\n\n<span class=\"c1\"># Complex properties</span>\n<span class=\"n\">fgdc_from_file</span><span class=\"o\">.</span><span class=\"n\">attributes</span>\n<span class=\"n\">fgdc_from_file</span><span class=\"o\">.</span><span class=\"n\">bounding_box</span>\n<span class=\"n\">fgdc_from_file</span><span class=\"o\">.</span><span class=\"n\">contacts</span>\n<span class=\"n\">fgdc_from_file</span><span class=\"o\">.</span><span class=\"n\">dates</span>\n<span class=\"n\">fgdc_from_file</span><span class=\"o\">.</span><span class=\"n\">digital_forms</span>\n<span class=\"n\">fgdc_from_file</span><span class=\"o\">.</span><span class=\"n\">larger_works</span>\n<span class=\"n\">fgdc_from_file</span><span class=\"o\">.</span><span class=\"n\">process_steps</span>\n<span class=\"n\">fgdc_from_file</span><span class=\"o\">.</span><span class=\"n\">raster_info</span>\n\n<span class=\"c1\"># :see: gis_metadata.utils.COMPLEX_DEFINITIONS for structure of all complex properties</span>\n\n<span class=\"c1\"># Update properties</span>\n<span class=\"n\">fgdc_from_file</span><span class=\"o\">.</span><span class=\"n\">title</span> <span class=\"o\">=</span> <span class=\"s1\">'New Title'</span>\n<span class=\"n\">fgdc_from_file</span><span class=\"o\">.</span><span class=\"n\">dates</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'type'</span><span class=\"p\">:</span> <span class=\"s1\">'single'</span> <span class=\"s1\">'values'</span><span class=\"p\">:</span> <span class=\"s1\">'1/1/2016'</span><span class=\"p\">}</span>\n\n<span class=\"c1\"># Apply updates</span>\n<span class=\"n\">fgdc_from_file</span><span class=\"o\">.</span><span class=\"n\">validate</span><span class=\"p\">()</span>                                      <span class=\"c1\"># Ensure updated properties are valid</span>\n<span class=\"n\">fgdc_from_file</span><span class=\"o\">.</span><span class=\"n\">serialize</span><span class=\"p\">()</span>                                     <span class=\"c1\"># Output updated XML as a string</span>\n<span class=\"n\">fgdc_from_file</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">()</span>                                         <span class=\"c1\"># Output updated XML to existing file</span>\n<span class=\"n\">fgdc_from_file</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">out_file_or_path</span><span class=\"o\">=</span><span class=\"s1\">'/path/to/updated.xml'</span><span class=\"p\">)</span>  <span class=\"c1\"># Output updated XML to new file</span>\n</pre>\n<h2>Extending and Customizing</h2>\n<h3>Tips</h3>\n<p>There are a few unwritten (until now) rules about the way the metadata parsers are wired to work:</p>\n<ol>\n<li>Properties are generally defined by XPATH in each <code>parser._data_map</code></li>\n<li>Simple parser properties accept only values of <code>string</code> and <code>list</code>'s of <code>string</code>'s</li>\n<li>XPATH's configured in the data map support references to element attributes: <code>'path/to/element/@attr'</code></li>\n<li>Complex parser properties are defined by custom parser/updater functions instead of by XPATH</li>\n<li>Complex parser properties accept values of type <code>dict</code> containing simple properties, or a list of said <code>dict</code>'s</li>\n<li>XPATH keys in the data map with leading underscores are parsed, but not validated or written out</li>\n<li>XPATH keys in the data map that \"shadow\" other properties but with a leading underscore serve as secondary values</li>\n<li>Secondary values are used in the absence of a primary value if primary location (element or attribute) is missing</li>\n<li>Additional underscores indicate further locations to check for missing values, i.e. <code>title</code>, <code>_title</code>, <code>__title</code></li>\n</ol>\n<p>Some examples of existing secondary properties are as follows:</p>\n<pre><span class=\"c1\"># In the ArcGIS parser for distribution contact phone:</span>\n\n<span class=\"n\">ARCGIS_TAG_FORMATS</span> <span class=\"o\">=</span> <span class=\"n\">frozendict</span><span class=\"p\">({</span>\n     <span class=\"o\">...</span>\n    <span class=\"s1\">'dist_phone'</span><span class=\"p\">:</span> <span class=\"s1\">'distInfo/distributor/distorCont/rpCntInfo/cntPhone/voiceNum'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'_dist_phone'</span><span class=\"p\">:</span> <span class=\"s1\">'distInfo/distributor/distorCont/rpCntInfo/voiceNum'</span><span class=\"p\">,</span>  <span class=\"c1\"># If not in cntPhone</span>\n    <span class=\"o\">...</span>\n<span class=\"p\">})</span>\n\n<span class=\"c1\"># In the FGDC parser for sub-properties in the contacts definition:</span>\n\n<span class=\"n\">FGDC_DEFINITIONS</span> <span class=\"o\">=</span> <span class=\"nb\">dict</span><span class=\"p\">({</span><span class=\"n\">k</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"n\">iteritems</span><span class=\"p\">(</span><span class=\"n\">COMPLEX_DEFINITIONS</span><span class=\"p\">)})</span>\n<span class=\"n\">FGDC_DEFINITIONS</span><span class=\"p\">[</span><span class=\"n\">CONTACTS</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">({</span>\n    <span class=\"s1\">'_name'</span><span class=\"p\">:</span> <span class=\"s1\">'</span><span class=\"si\">{_name}</span><span class=\"s1\">'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'_organization'</span><span class=\"p\">:</span> <span class=\"s1\">'</span><span class=\"si\">{_organization}</span><span class=\"s1\">'</span>\n<span class=\"p\">})</span>\n<span class=\"o\">...</span>\n<span class=\"k\">class</span> <span class=\"nc\">FgdcParser</span><span class=\"p\">(</span><span class=\"n\">MetadataParser</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_init_data_map</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"o\">...</span>\n        <span class=\"n\">ct_format</span> <span class=\"o\">=</span> <span class=\"n\">FGDC_TAG_FORMATS</span><span class=\"p\">[</span><span class=\"n\">CONTACTS</span><span class=\"p\">]</span>\n        <span class=\"n\">fgdc_data_structures</span><span class=\"p\">[</span><span class=\"n\">CONTACTS</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">format_xpaths</span><span class=\"p\">(</span>\n            <span class=\"o\">...</span>\n            <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">ct_format</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">ct_path</span><span class=\"o\">=</span><span class=\"s1\">'cntperp/cntper'</span><span class=\"p\">),</span>\n            <span class=\"n\">_name</span><span class=\"o\">=</span><span class=\"n\">ct_format</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">ct_path</span><span class=\"o\">=</span><span class=\"s1\">'cntorgp/cntper'</span><span class=\"p\">),</span>  <span class=\"c1\"># If not in cntperp</span>\n            <span class=\"n\">organization</span><span class=\"o\">=</span><span class=\"n\">ct_format</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">ct_path</span><span class=\"o\">=</span><span class=\"s1\">'cntperp/cntorg'</span><span class=\"p\">),</span>\n            <span class=\"n\">_organization</span><span class=\"o\">=</span><span class=\"n\">ct_format</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">ct_path</span><span class=\"o\">=</span><span class=\"s1\">'cntorgp/cntorg'</span><span class=\"p\">),</span>  <span class=\"c1\"># If not in cntperp</span>\n        <span class=\"p\">)</span>\n\n<span class=\"c1\"># Also see the ISO parser for secondary and tertiary sub-properties in the attributes definition:</span>\n\n<span class=\"n\">ISO_DEFINITIONS</span> <span class=\"o\">=</span> <span class=\"nb\">dict</span><span class=\"p\">({</span><span class=\"n\">k</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"n\">iteritems</span><span class=\"p\">(</span><span class=\"n\">COMPLEX_DEFINITIONS</span><span class=\"p\">)})</span>\n<span class=\"n\">ISO_DEFINITIONS</span><span class=\"p\">[</span><span class=\"n\">ATTRIBUTES</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">({</span>\n    <span class=\"s1\">'_definition_source'</span><span class=\"p\">:</span> <span class=\"s1\">'</span><span class=\"si\">{_definition_src}</span><span class=\"s1\">'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'__definition_source'</span><span class=\"p\">:</span> <span class=\"s1\">'</span><span class=\"si\">{__definition_src}</span><span class=\"s1\">'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'___definition_source'</span><span class=\"p\">:</span> <span class=\"s1\">'</span><span class=\"si\">{___definition_src}</span><span class=\"s1\">'</span>\n<span class=\"p\">})</span>\n</pre>\n<h3>Examples</h3>\n<p>Any of the supported parsers can be extended to include more of a standard's supported data. In this example we'll add two new properties to the <code>IsoParser</code>:</p>\n<ul>\n<li><code>metadata_language</code>: a simple string field describing the language of the metadata file itself (not the dataset)</li>\n<li><code>metadata_contacts</code>: a complex structure with contact info leveraging and enhancing the existing contact structure</li>\n</ul>\n<p>This example will cover:</p>\n<ol>\n<li>Adding a new simple property</li>\n<li>Configuring a secondary location for a property value</li>\n<li>Referencing an element attribute in an XPATH</li>\n<li>Adding a new complex property</li>\n<li>Customizing the complex property to include a new sub-property</li>\n</ol>\n<p>Also, this example is specifically covered by unit tests.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">gis_metadata.iso_metadata_parser</span> <span class=\"kn\">import</span> <span class=\"n\">IsoParser</span>\n<span class=\"kn\">from</span> <span class=\"nn\">gis_metadata.utils</span> <span class=\"kn\">import</span> <span class=\"n\">COMPLEX_DEFINITIONS</span><span class=\"p\">,</span> <span class=\"n\">CONTACTS</span><span class=\"p\">,</span> <span class=\"n\">format_xpaths</span><span class=\"p\">,</span> <span class=\"n\">ParserProperty</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">CustomIsoParser</span><span class=\"p\">(</span><span class=\"n\">IsoParser</span><span class=\"p\">):</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_init_data_map</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">(</span><span class=\"n\">CustomIsoParser</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">_init_data_map</span><span class=\"p\">()</span>\n\n        <span class=\"c1\"># 1. Basic property: text or list (with secondary location referencing `codeListValue` attribute)</span>\n\n        <span class=\"n\">lang_prop</span> <span class=\"o\">=</span> <span class=\"s1\">'metadata_language'</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_data_map</span><span class=\"p\">[</span><span class=\"n\">lang_prop</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'language/CharacterString'</span>                    <span class=\"c1\"># Parse from here if present</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_data_map</span><span class=\"p\">[</span><span class=\"s1\">'_'</span> <span class=\"o\">+</span> <span class=\"n\">lang_prop</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'language/LanguageCode/@codeListValue'</span>  <span class=\"c1\"># Otherwise, try from here</span>\n\n        <span class=\"c1\"># 2. Complex structure (reuse of contacts structure plus phone)</span>\n\n        <span class=\"c1\"># 2.1 Define some basic variables</span>\n        <span class=\"n\">ct_prop</span> <span class=\"o\">=</span> <span class=\"s1\">'metadata_contacts'</span>\n        <span class=\"n\">ct_xpath</span> <span class=\"o\">=</span> <span class=\"s1\">'contact/CI_ResponsibleParty/</span><span class=\"si\">{ct_path}</span><span class=\"s1\">'</span>\n        <span class=\"n\">ct_defintion</span> <span class=\"o\">=</span> <span class=\"n\">COMPLEX_DEFINITIONS</span><span class=\"p\">[</span><span class=\"n\">CONTACTS</span><span class=\"p\">]</span>\n        <span class=\"n\">ct_defintion</span><span class=\"p\">[</span><span class=\"s1\">'phone'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'</span><span class=\"si\">{phone}</span><span class=\"s1\">'</span>\n\n        <span class=\"c1\"># 2.2 Reuse CONTACT structure to specify locations per prop (adapted from parent to add `phone`)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_data_structures</span><span class=\"p\">[</span><span class=\"n\">ct_prop</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">format_xpaths</span><span class=\"p\">(</span>\n            <span class=\"n\">ct_defintion</span><span class=\"p\">,</span>\n            <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">ct_xpath</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">ct_path</span><span class=\"o\">=</span><span class=\"s1\">'individualName/CharacterString'</span><span class=\"p\">),</span>\n            <span class=\"n\">organization</span><span class=\"o\">=</span><span class=\"n\">ct_xpath</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">ct_path</span><span class=\"o\">=</span><span class=\"s1\">'organisationName/CharacterString'</span><span class=\"p\">),</span>\n            <span class=\"n\">position</span><span class=\"o\">=</span><span class=\"n\">ct_xpath</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">ct_path</span><span class=\"o\">=</span><span class=\"s1\">'positionName/CharacterString'</span><span class=\"p\">),</span>\n            <span class=\"n\">phone</span><span class=\"o\">=</span><span class=\"n\">ct_xpath</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span>\n                <span class=\"n\">ct_path</span><span class=\"o\">=</span><span class=\"s1\">'contactInfo/CI_Contact/phone/CI_Telephone/voice/CharacterString'</span>\n            <span class=\"p\">),</span>\n            <span class=\"n\">email</span><span class=\"o\">=</span><span class=\"n\">ct_xpath</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span>\n                <span class=\"n\">ct_path</span><span class=\"o\">=</span><span class=\"s1\">'contactInfo/CI_Contact/address/CI_Address/electronicMailAddress/CharacterString'</span>\n            <span class=\"p\">)</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"c1\"># 2.3 Set the contact root to insert new elements at \"contact\" level given the defined path:</span>\n        <span class=\"c1\">#   'contact/CI_ResponsibleParty/...'</span>\n        <span class=\"c1\"># By default we would get multiple \"CI_ResponsibleParty\" elements under a single \"contact\"</span>\n        <span class=\"c1\"># This way we get multiple \"contact\" elements, each with its own single \"CI_ResponsibleParty\"</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_data_map</span><span class=\"p\">[</span><span class=\"s1\">'_</span><span class=\"si\">{prop}</span><span class=\"s1\">_root'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">prop</span><span class=\"o\">=</span><span class=\"n\">ct_prop</span><span class=\"p\">)]</span> <span class=\"o\">=</span> <span class=\"s1\">'contact'</span>\n\n        <span class=\"c1\"># 2.4 Leverage the default methods for parsing complex properties (or write your own parser/updater)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_data_map</span><span class=\"p\">[</span><span class=\"n\">ct_prop</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">ParserProperty</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_parse_complex_list</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_update_complex_list</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># 3. And finally, let the parent validation logic know about the two new custom properties</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_metadata_props</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">lang_prop</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_metadata_props</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">ct_prop</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s1\">'/path/to/metadata.xml'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">metadata</span><span class=\"p\">:</span>\n    <span class=\"n\">iso_from_file</span> <span class=\"o\">=</span> <span class=\"n\">CustomIsoParser</span><span class=\"p\">(</span><span class=\"n\">metadata</span><span class=\"p\">)</span>\n\n<span class=\"n\">iso_from_file</span><span class=\"o\">.</span><span class=\"n\">metadata_language</span>\n<span class=\"n\">iso_from_file</span><span class=\"o\">.</span><span class=\"n\">metadata_contacts</span>\n</pre>\n\n          </div>"}, "last_serial": 7140543, "releases": {"0.9.7": [{"comment_text": "", "digests": {"md5": "e2fbeadad07bebc5f251298892c1590e", "sha256": "47cf22244b312dbc6bb3f37477574452f9e515cacffaa35f1d7c0f4ec511b2cd"}, "downloads": -1, "filename": "gis_metadata_parser-0.9.7-py3-none-any.whl", "has_sig": false, "md5_digest": "e2fbeadad07bebc5f251298892c1590e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 36515, "upload_time": "2016-12-20T23:12:34", "upload_time_iso_8601": "2016-12-20T23:12:34.981701Z", "url": "https://files.pythonhosted.org/packages/18/01/52b601f8d673753222ef6d7e012ca3da561a8abeebc29b6cffbb9a29c7a2/gis_metadata_parser-0.9.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5fdca838ae391e64a5806f018e3d7e0e", "sha256": "4169e66aa43ed53bc8f093bf37dddab3a4f709e9108f4ed67d7c3e6d2453ebca"}, "downloads": -1, "filename": "gis_metadata_parser-0.9.7.tar.gz", "has_sig": false, "md5_digest": "5fdca838ae391e64a5806f018e3d7e0e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29738, "upload_time": "2016-12-20T23:12:36", "upload_time_iso_8601": "2016-12-20T23:12:36.031268Z", "url": "https://files.pythonhosted.org/packages/81/76/cf837c667187a356a4c0ed9e59182d61a783f7b093379b28c2970c96979e/gis_metadata_parser-0.9.7.tar.gz", "yanked": false}], "1.0": [{"comment_text": "", "digests": {"md5": "4f93e8c050abbf86e988ccec98ac8257", "sha256": "52a0ec1f0c51ca02db10f9228de4eb2dd6d3bd841ba5e2e4121c61b771364c62"}, "downloads": -1, "filename": "gis_metadata_parser-1.0-py3.6.egg", "has_sig": false, "md5_digest": "4f93e8c050abbf86e988ccec98ac8257", "packagetype": "bdist_egg", "python_version": "3.6", "requires_python": null, "size": 87281, "upload_time": "2018-06-02T00:16:55", "upload_time_iso_8601": "2018-06-02T00:16:55.879764Z", "url": "https://files.pythonhosted.org/packages/21/b5/fabc20735c176742e5c683e19e7b3cec2167e010bb2f82e882b45603272f/gis_metadata_parser-1.0-py3.6.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "3cbf1ab67cc17c324bb43144c404166e", "sha256": "d266cc3be6c445717409e967e7ff381cf1246571a9cdf2503193970291595304"}, "downloads": -1, "filename": "gis_metadata_parser-1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "3cbf1ab67cc17c324bb43144c404166e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 38992, "upload_time": "2017-07-31T22:28:53", "upload_time_iso_8601": "2017-07-31T22:28:53.436416Z", "url": "https://files.pythonhosted.org/packages/36/aa/706082415be2048e75f0abe2a4735f0340958d8acce627a52bd782551380/gis_metadata_parser-1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f2c912d3885c7ced082b4c4ef7fe8fb0", "sha256": "ad54d06cb097652df8072c792932e392bf6b57c618b8dcfa9aeef7adb7ad72b7"}, "downloads": -1, "filename": "gis_metadata_parser-1.0.tar.gz", "has_sig": false, "md5_digest": "f2c912d3885c7ced082b4c4ef7fe8fb0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 32244, "upload_time": "2017-07-31T22:28:55", "upload_time_iso_8601": "2017-07-31T22:28:55.097313Z", "url": "https://files.pythonhosted.org/packages/c1/0b/6027dd1a4c34dcb749cff424d6ff66e958150e0e0d8af95f23c9c9417a5a/gis_metadata_parser-1.0.tar.gz", "yanked": false}], "1.1.3": [{"comment_text": "", "digests": {"md5": "4b47eefe2bf4f13d24fdc7584f46c4af", "sha256": "46da6f83ec3a6b5fb1f3da3a31132157971ab3240efca2792bd92e91a9a53384"}, "downloads": -1, "filename": "gis_metadata_parser-1.1.3-py3-none-any.whl", "has_sig": false, "md5_digest": "4b47eefe2bf4f13d24fdc7584f46c4af", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 41412, "upload_time": "2018-06-05T23:17:19", "upload_time_iso_8601": "2018-06-05T23:17:19.937107Z", "url": "https://files.pythonhosted.org/packages/13/b0/1a271033effcd466fec65e1af9d1aba9939379e3d37eb4990d449bc6fca5/gis_metadata_parser-1.1.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a7398ff3519a451c0a1b7432dacd61d7", "sha256": "21ec31c3944b4bfeddcda1285045b8e29495e9a3cd86872760f81566ce38a1c7"}, "downloads": -1, "filename": "gis_metadata_parser-1.1.3.tar.gz", "has_sig": false, "md5_digest": "a7398ff3519a451c0a1b7432dacd61d7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 38346, "upload_time": "2018-06-05T23:17:21", "upload_time_iso_8601": "2018-06-05T23:17:21.436144Z", "url": "https://files.pythonhosted.org/packages/bb/4d/2579afd782ed3644ddee1c792da827ce48cab388a61847e35a8f9e05385a/gis_metadata_parser-1.1.3.tar.gz", "yanked": false}], "1.1.4": [{"comment_text": "", "digests": {"md5": "0428d4930e359e55223f9bc38e2ab092", "sha256": "7097278a46cfd3f47b522a724c24072f7c81a7902fc7cb94b0a2d97beb7cf860"}, "downloads": -1, "filename": "gis_metadata_parser-1.1.4-py3-none-any.whl", "has_sig": false, "md5_digest": "0428d4930e359e55223f9bc38e2ab092", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 41416, "upload_time": "2018-07-02T20:41:09", "upload_time_iso_8601": "2018-07-02T20:41:09.094517Z", "url": "https://files.pythonhosted.org/packages/f3/98/4f6a48bbd40eb26eb55cc8fc1e7b451d362cb952f845d8744030f6f0e162/gis_metadata_parser-1.1.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2a30ac210cf4d0b8b81d5f8d7044e3ab", "sha256": "87f110fb892f733366ea9491ce9d5aaf28270e499d8fa7f4cb98a8636434e98f"}, "downloads": -1, "filename": "gis_metadata_parser-1.1.4.tar.gz", "has_sig": false, "md5_digest": "2a30ac210cf4d0b8b81d5f8d7044e3ab", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 38349, "upload_time": "2018-07-02T20:41:10", "upload_time_iso_8601": "2018-07-02T20:41:10.530756Z", "url": "https://files.pythonhosted.org/packages/e8/e6/315691bcabecdd8013b91d26aee35e12a33ebc07b14157d2efcd8746b097/gis_metadata_parser-1.1.4.tar.gz", "yanked": false}], "1.2.1": [{"comment_text": "", "digests": {"md5": "164fb5058f143e3c56ec1903ad7c0f8a", "sha256": "fff1b0463a5f268401693525277694365798fb801b26c8c71b9f2ba48c927183"}, "downloads": -1, "filename": "gis_metadata_parser-1.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "164fb5058f143e3c56ec1903ad7c0f8a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 42456, "upload_time": "2020-04-09T23:49:55", "upload_time_iso_8601": "2020-04-09T23:49:55.404534Z", "url": "https://files.pythonhosted.org/packages/70/1f/5484bdbe6c6cfb3863d4ae9aa8a6422b92bd624016d04906dee7080e8e9b/gis_metadata_parser-1.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8e0f478044cd46af30f7b7c1cee90638", "sha256": "e249a3698348b1c926965d1f496f8a7496404e714b80a8382251256cd7348513"}, "downloads": -1, "filename": "gis_metadata_parser-1.2.1.tar.gz", "has_sig": false, "md5_digest": "8e0f478044cd46af30f7b7c1cee90638", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 39420, "upload_time": "2020-04-09T23:49:56", "upload_time_iso_8601": "2020-04-09T23:49:56.877795Z", "url": "https://files.pythonhosted.org/packages/a3/a6/fe93d6ef151f2e428242f6b881d610acd961fdedef43f46a64f5826e93d4/gis_metadata_parser-1.2.1.tar.gz", "yanked": false}], "1.2.2": [{"comment_text": "", "digests": {"md5": "7c7a13651d041d51a2b9482ebf523ad2", "sha256": "df8b37228c54234e5b64b7ccf9227cfc08e9f1ec3a4ddb26075067946d821cae"}, "downloads": -1, "filename": "gis_metadata_parser-1.2.2-py3-none-any.whl", "has_sig": false, "md5_digest": "7c7a13651d041d51a2b9482ebf523ad2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 42456, "upload_time": "2020-04-30T20:16:07", "upload_time_iso_8601": "2020-04-30T20:16:07.157600Z", "url": "https://files.pythonhosted.org/packages/aa/dc/0e4d109081a7efd1e56ff5246b4099ff9bc67386ac1785d3608b002af92e/gis_metadata_parser-1.2.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0d38c03af12dd1b63ff8c83c71725bc1", "sha256": "23a0191ece1c4a96f4e2a969ed3be43bfaf2e404308edeffaf50dee5a82631af"}, "downloads": -1, "filename": "gis_metadata_parser-1.2.2.tar.gz", "has_sig": false, "md5_digest": "0d38c03af12dd1b63ff8c83c71725bc1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 39435, "upload_time": "2020-04-30T20:16:08", "upload_time_iso_8601": "2020-04-30T20:16:08.574276Z", "url": "https://files.pythonhosted.org/packages/2f/17/9b68554fea2eec88371116549d23bdd40f553cd48524466b032fca241d2b/gis_metadata_parser-1.2.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "7c7a13651d041d51a2b9482ebf523ad2", "sha256": "df8b37228c54234e5b64b7ccf9227cfc08e9f1ec3a4ddb26075067946d821cae"}, "downloads": -1, "filename": "gis_metadata_parser-1.2.2-py3-none-any.whl", "has_sig": false, "md5_digest": "7c7a13651d041d51a2b9482ebf523ad2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 42456, "upload_time": "2020-04-30T20:16:07", "upload_time_iso_8601": "2020-04-30T20:16:07.157600Z", "url": "https://files.pythonhosted.org/packages/aa/dc/0e4d109081a7efd1e56ff5246b4099ff9bc67386ac1785d3608b002af92e/gis_metadata_parser-1.2.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0d38c03af12dd1b63ff8c83c71725bc1", "sha256": "23a0191ece1c4a96f4e2a969ed3be43bfaf2e404308edeffaf50dee5a82631af"}, "downloads": -1, "filename": "gis_metadata_parser-1.2.2.tar.gz", "has_sig": false, "md5_digest": "0d38c03af12dd1b63ff8c83c71725bc1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 39435, "upload_time": "2020-04-30T20:16:08", "upload_time_iso_8601": "2020-04-30T20:16:08.574276Z", "url": "https://files.pythonhosted.org/packages/2f/17/9b68554fea2eec88371116549d23bdd40f553cd48524466b032fca241d2b/gis_metadata_parser-1.2.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:57:13 2020"}