{"info": {"author": "TRIMAR Developer", "author_email": "developer@trimar.com.pl", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Topic :: Software Development :: Embedded Systems", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "##  trimarlib-newland\n\nPython library for interfacing Newland scanners.\n\n\n###  Getting started\n\nThese instructions will get you a copy of the project on your local machine for development and testing purposes. \nSee [Deployment](#deployment) for notes on how to deploy the project on a live system.\n\n\n####  Prerequisites\n\nThe build process requires some basic development tools:\n\n* `make` - GNU Make program, either for *nix or Windows system, used to execute build and test targets\n* `git` - used not only to clone the repository, but also in auto-versioning (see [Versioning](#versioning))\n* `python3`\n\nTwo standard Python packages are used for build and installation steps:\n\n* `setuptools`\n* `wheel`\n\nThe library depends on `pyserial` package as well - it is used as a transport layer with the devices. \nThis dependecy is defined in `setup.py` and is satisfied automatically at installation time.\n\n\n####  Building and releasing\n\nInvoking `make all` (default target) prepares archives for distribution. It is done in two steps:\n\n1. query Git repository for tags (`git describe` command) to determine current version and generate \n`version.py` file,\n2. invoke Python interpreter passing `setup.py` script to prepare source and wheel distributions.\n\nThe Python interpreter invoked by the `Makefile` defaults to `python` - it is possible to override it \npassing a `PYTHON` variable to the command, e.g. `make all PYTHON=python3`.\n\nThe release process is automated and based on GitLab CI/CD environment - each commit triggers a build job\nwhich attempts to make and install built packages (no testing implemented yet, requires an available hardware\nplatform). If the commit is tagged the built wheel distribution is passed to the deployment stage and\nthe runner attempts to upload the package to the repository specified in project settings.\n\n####  Testing\n\nTest source files are located in `newlandlib/tests` directory, they are named after the device and\nfunctionality being tested. Testing is based on `unittest` Python built-in package.  \nThe `Makefile` defines three test targets: `unit-tests`, `integration-tests` and `tests` (invokes both\nunit and integration tests).\n\n\n#####  Unit tests\n\n `unit-tests` are fairly fast and do not require any device to be attached to the machine, they test\n utility methods. They may be invoked manually one-by-one (e.g. `python -m newlandlib.tests.test_fm100_utils`)\n or by the `Makefile` (i.e. `make unit-tests`).\n\n\n#####  Integration tests \n\n`integration-tests` are **very** slow due to number of tests involved (full testing of FM100 device\ntakes ca. 3 hours) and they require the device to be attached to the machine running the code. They may be \ninvoked one-by-one (similarly to unit tests, e.g. `python -m newlandlib.tests.test_fm100_commands`) or\nin batch by the `Makefile` (i.e. `make integration-tests`).  \n\n\n###  Deployment\n\nThe library is not intended to be used in a standalone configuration - the primary purpose is to be used\nby higher-level applications, which should define it as a dependency. However it is perfectly correct\nto install it manually using `pip`.\n\n\n###  Versioning\n\nThe project is versioned using a simple pattern based on repository tagging feature. See [Makefile](Makefile)\nfor implementation details, for versions available see \n[tags on this repository](https://dsl2.trimar.org/pythons-ll/newlandlib/tags).\n\n\n###  Usage\n\nSee docstrings for API documentation.\n\nExample of device initialization using auto-discovery feature:\n\n```python\nfrom newlandlib import FM100\n\n\nports = FM100.discover()\ndev = FM100(ports[0])\ndev.configure()\n\n\ndef callback(sender, *, data, codeid=None, aimid=None):\n    print('sender={}, data={}, codeid={}, aimid={}'.format(sender, data, codeid, aimid))\n\n\ndev.callback = callback\ndev.start()\n```\n\nThe `callback` method will be invoked with each scanned barcode. \n\n\n###  License\n\nThis software is licensed under the MIT License - see [LICENSE](LICENSE).\n\n--------\n\n\n###  Related documents\n\nThis software is based upon the following documents from Newland:\n\n* _FM100 Integration Guide_ (v1.2.1, 22/02/2017)\n* _FM420 Integration Guide_ (v1.1.4, 07/08/2014)\n* _FM430 User Guide_ (v1.2.1, 19/07/2018)\n* _Programming Guide Based on Newland Unified Commands Set_ (v1.0.0, 12/02/2018)\n* _Serial Programming Command Manual_ (v1.3.0, 15/11/2016)\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://dsl2.trimar.org/pythons-ll/newlandlib", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "trimarlib-newland", "package_url": "https://pypi.org/project/trimarlib-newland/", "platform": "", "project_url": "https://pypi.org/project/trimarlib-newland/", "project_urls": {"Homepage": "https://dsl2.trimar.org/pythons-ll/newlandlib"}, "release_url": "https://pypi.org/project/trimarlib-newland/0.1.0rc4/", "requires_dist": ["pyserial"], "requires_python": "", "summary": "Newland scanners library", "version": "0.1.0rc4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h2>trimarlib-newland</h2>\n<p>Python library for interfacing Newland scanners.</p>\n<h3>Getting started</h3>\n<p>These instructions will get you a copy of the project on your local machine for development and testing purposes.\nSee <a href=\"#deployment\" rel=\"nofollow\">Deployment</a> for notes on how to deploy the project on a live system.</p>\n<h4>Prerequisites</h4>\n<p>The build process requires some basic development tools:</p>\n<ul>\n<li><code>make</code> - GNU Make program, either for *nix or Windows system, used to execute build and test targets</li>\n<li><code>git</code> - used not only to clone the repository, but also in auto-versioning (see <a href=\"#versioning\" rel=\"nofollow\">Versioning</a>)</li>\n<li><code>python3</code></li>\n</ul>\n<p>Two standard Python packages are used for build and installation steps:</p>\n<ul>\n<li><code>setuptools</code></li>\n<li><code>wheel</code></li>\n</ul>\n<p>The library depends on <code>pyserial</code> package as well - it is used as a transport layer with the devices.\nThis dependecy is defined in <code>setup.py</code> and is satisfied automatically at installation time.</p>\n<h4>Building and releasing</h4>\n<p>Invoking <code>make all</code> (default target) prepares archives for distribution. It is done in two steps:</p>\n<ol>\n<li>query Git repository for tags (<code>git describe</code> command) to determine current version and generate\n<code>version.py</code> file,</li>\n<li>invoke Python interpreter passing <code>setup.py</code> script to prepare source and wheel distributions.</li>\n</ol>\n<p>The Python interpreter invoked by the <code>Makefile</code> defaults to <code>python</code> - it is possible to override it\npassing a <code>PYTHON</code> variable to the command, e.g. <code>make all PYTHON=python3</code>.</p>\n<p>The release process is automated and based on GitLab CI/CD environment - each commit triggers a build job\nwhich attempts to make and install built packages (no testing implemented yet, requires an available hardware\nplatform). If the commit is tagged the built wheel distribution is passed to the deployment stage and\nthe runner attempts to upload the package to the repository specified in project settings.</p>\n<h4>Testing</h4>\n<p>Test source files are located in <code>newlandlib/tests</code> directory, they are named after the device and\nfunctionality being tested. Testing is based on <code>unittest</code> Python built-in package.<br>\nThe <code>Makefile</code> defines three test targets: <code>unit-tests</code>, <code>integration-tests</code> and <code>tests</code> (invokes both\nunit and integration tests).</p>\n<h5>Unit tests</h5>\n<p><code>unit-tests</code> are fairly fast and do not require any device to be attached to the machine, they test\nutility methods. They may be invoked manually one-by-one (e.g. <code>python -m newlandlib.tests.test_fm100_utils</code>)\nor by the <code>Makefile</code> (i.e. <code>make unit-tests</code>).</p>\n<h5>Integration tests</h5>\n<p><code>integration-tests</code> are <strong>very</strong> slow due to number of tests involved (full testing of FM100 device\ntakes ca. 3 hours) and they require the device to be attached to the machine running the code. They may be\ninvoked one-by-one (similarly to unit tests, e.g. <code>python -m newlandlib.tests.test_fm100_commands</code>) or\nin batch by the <code>Makefile</code> (i.e. <code>make integration-tests</code>).</p>\n<h3>Deployment</h3>\n<p>The library is not intended to be used in a standalone configuration - the primary purpose is to be used\nby higher-level applications, which should define it as a dependency. However it is perfectly correct\nto install it manually using <code>pip</code>.</p>\n<h3>Versioning</h3>\n<p>The project is versioned using a simple pattern based on repository tagging feature. See <a href=\"Makefile\" rel=\"nofollow\">Makefile</a>\nfor implementation details, for versions available see\n<a href=\"https://dsl2.trimar.org/pythons-ll/newlandlib/tags\" rel=\"nofollow\">tags on this repository</a>.</p>\n<h3>Usage</h3>\n<p>See docstrings for API documentation.</p>\n<p>Example of device initialization using auto-discovery feature:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">newlandlib</span> <span class=\"kn\">import</span> <span class=\"n\">FM100</span>\n\n\n<span class=\"n\">ports</span> <span class=\"o\">=</span> <span class=\"n\">FM100</span><span class=\"o\">.</span><span class=\"n\">discover</span><span class=\"p\">()</span>\n<span class=\"n\">dev</span> <span class=\"o\">=</span> <span class=\"n\">FM100</span><span class=\"p\">(</span><span class=\"n\">ports</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n<span class=\"n\">dev</span><span class=\"o\">.</span><span class=\"n\">configure</span><span class=\"p\">()</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">callback</span><span class=\"p\">(</span><span class=\"n\">sender</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">codeid</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">aimid</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'sender=</span><span class=\"si\">{}</span><span class=\"s1\">, data=</span><span class=\"si\">{}</span><span class=\"s1\">, codeid=</span><span class=\"si\">{}</span><span class=\"s1\">, aimid=</span><span class=\"si\">{}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">sender</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">codeid</span><span class=\"p\">,</span> <span class=\"n\">aimid</span><span class=\"p\">))</span>\n\n\n<span class=\"n\">dev</span><span class=\"o\">.</span><span class=\"n\">callback</span> <span class=\"o\">=</span> <span class=\"n\">callback</span>\n<span class=\"n\">dev</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n</pre>\n<p>The <code>callback</code> method will be invoked with each scanned barcode.</p>\n<h3>License</h3>\n<p>This software is licensed under the MIT License - see <a href=\"LICENSE\" rel=\"nofollow\">LICENSE</a>.</p>\n<hr>\n<h3>Related documents</h3>\n<p>This software is based upon the following documents from Newland:</p>\n<ul>\n<li><em>FM100 Integration Guide</em> (v1.2.1, 22/02/2017)</li>\n<li><em>FM420 Integration Guide</em> (v1.1.4, 07/08/2014)</li>\n<li><em>FM430 User Guide</em> (v1.2.1, 19/07/2018)</li>\n<li><em>Programming Guide Based on Newland Unified Commands Set</em> (v1.0.0, 12/02/2018)</li>\n<li><em>Serial Programming Command Manual</em> (v1.3.0, 15/11/2016)</li>\n</ul>\n\n          </div>"}, "last_serial": 4315344, "releases": {"0.1.0.dev0": [{"comment_text": "", "digests": {"md5": "a2ff0f5e47dab065f968629aa17824a4", "sha256": "a05d61cf385f9b5082a047de017aeacde2e41954f72e611a502b34a7651c73bd"}, "downloads": -1, "filename": "trimarlib_newland-0.1.0.dev0-py3-none-any.whl", "has_sig": false, "md5_digest": "a2ff0f5e47dab065f968629aa17824a4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 26934, "upload_time": "2018-09-20T07:59:29", "upload_time_iso_8601": "2018-09-20T07:59:29.332177Z", "url": "https://files.pythonhosted.org/packages/82/b6/b2983a67e49047186250ac301789c9e8d7a99fedae2d10fe06c00fe2abf7/trimarlib_newland-0.1.0.dev0-py3-none-any.whl", "yanked": false}], "0.1.0a0": [{"comment_text": "", "digests": {"md5": "49521d534a59d193782dff097b43e210", "sha256": "1c10d6b6a0d0cff2d5b90c479f60daac8418556c4fa8279df82e3955343120a1"}, "downloads": -1, "filename": "trimarlib_newland-0.1.0a0-py3-none-any.whl", "has_sig": false, "md5_digest": "49521d534a59d193782dff097b43e210", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 11253, "upload_time": "2018-06-27T13:35:06", "upload_time_iso_8601": "2018-06-27T13:35:06.728824Z", "url": "https://files.pythonhosted.org/packages/e0/8a/0d4f53c5cc50ab29804daad39e78e3d64ca00a483797be3ad2a9ad1d418e/trimarlib_newland-0.1.0a0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9137a74b9851539dff3e99fdb64d4994", "sha256": "97f6e79c020e1a02d0de51c3e58eb4737a7f2fa7cadb71fa7b0e89231041b5b5"}, "downloads": -1, "filename": "trimarlib-newland-0.1.0a0.tar.gz", "has_sig": false, "md5_digest": "9137a74b9851539dff3e99fdb64d4994", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9458, "upload_time": "2018-06-27T13:35:07", "upload_time_iso_8601": "2018-06-27T13:35:07.807802Z", "url": "https://files.pythonhosted.org/packages/11/a9/a3bb8a2ff9cb6f5dd9cf097ae8cbc650e0c03f1f296b9344dacc9909bef3/trimarlib-newland-0.1.0a0.tar.gz", "yanked": false}], "0.1.0rc1": [{"comment_text": "", "digests": {"md5": "7a4af28b3ad169e077cd3f02bffa3245", "sha256": "be8a8d58411986a1fbe94121b3b3372a3aac77691c8db92ac3d00a3937dd6688"}, "downloads": -1, "filename": "trimarlib_newland-0.1.0rc1-py3-none-any.whl", "has_sig": false, "md5_digest": "7a4af28b3ad169e077cd3f02bffa3245", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 26880, "upload_time": "2018-09-20T08:25:05", "upload_time_iso_8601": "2018-09-20T08:25:05.030921Z", "url": "https://files.pythonhosted.org/packages/8d/53/6a258b36bda3d265a7202f65422799da9ca7ab99011f21aa424c0866338a/trimarlib_newland-0.1.0rc1-py3-none-any.whl", "yanked": false}], "0.1.0rc2": [{"comment_text": "", "digests": {"md5": "e71c8392cbbd9f3d1990f56ac61e37da", "sha256": "60d9c016b1df906b294f5823e8ce8f7a68d9dba359c135435cafda5d75c9700a"}, "downloads": -1, "filename": "trimarlib_newland-0.1.0rc2-py3-none-any.whl", "has_sig": false, "md5_digest": "e71c8392cbbd9f3d1990f56ac61e37da", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 29615, "upload_time": "2018-09-25T12:56:18", "upload_time_iso_8601": "2018-09-25T12:56:18.730693Z", "url": "https://files.pythonhosted.org/packages/44/0e/7852f8b52e0f25a8bc23afa8ce2d6f7654c77ba6f1862f02eda74bee79c8/trimarlib_newland-0.1.0rc2-py3-none-any.whl", "yanked": false}], "0.1.0rc3": [{"comment_text": "", "digests": {"md5": "0749d67c004e3749406bd5e10c768216", "sha256": "e5a30874be2f3b5cda0e5df7e4dd58b36722339d300497832de815f691872b44"}, "downloads": -1, "filename": "trimarlib_newland-0.1.0rc3-py3-none-any.whl", "has_sig": false, "md5_digest": "0749d67c004e3749406bd5e10c768216", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 29710, "upload_time": "2018-09-26T14:50:04", "upload_time_iso_8601": "2018-09-26T14:50:04.430723Z", "url": "https://files.pythonhosted.org/packages/19/29/f8540c342efd18b3e17956c8dd96b2ea2ea0cf404a0d7769e975539c6e5e/trimarlib_newland-0.1.0rc3-py3-none-any.whl", "yanked": false}], "0.1.0rc4": [{"comment_text": "", "digests": {"md5": "5626bd2f9b9028694677c6e8085e5234", "sha256": "8ab0415fefb1907396f48a284ae3eeed36e40be53baff88d421becca8644026f"}, "downloads": -1, "filename": "trimarlib_newland-0.1.0rc4-py3-none-any.whl", "has_sig": false, "md5_digest": "5626bd2f9b9028694677c6e8085e5234", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 29710, "upload_time": "2018-09-27T08:07:14", "upload_time_iso_8601": "2018-09-27T08:07:14.006924Z", "url": "https://files.pythonhosted.org/packages/da/aa/837711779f21cd5b6de85c06748a71d88aca25bc8c489aba7cc8f733b590/trimarlib_newland-0.1.0rc4-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "5626bd2f9b9028694677c6e8085e5234", "sha256": "8ab0415fefb1907396f48a284ae3eeed36e40be53baff88d421becca8644026f"}, "downloads": -1, "filename": "trimarlib_newland-0.1.0rc4-py3-none-any.whl", "has_sig": false, "md5_digest": "5626bd2f9b9028694677c6e8085e5234", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 29710, "upload_time": "2018-09-27T08:07:14", "upload_time_iso_8601": "2018-09-27T08:07:14.006924Z", "url": "https://files.pythonhosted.org/packages/da/aa/837711779f21cd5b6de85c06748a71d88aca25bc8c489aba7cc8f733b590/trimarlib_newland-0.1.0rc4-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 03:47:11 2020"}