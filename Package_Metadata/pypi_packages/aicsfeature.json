{"info": {"author": "AICS", "author_email": "jianxuc@alleninstitute.org", "bugtrack_url": null, "classifiers": [], "description": "\n## AICS Features Extraction\n\n### from aicsfeatures.extractor import *\n\n#### /feature_calc\n\nFunctions related to feature extraction. Feature extraction should be done like this:\n\n```\nfrom aicsfeatures.extractor import *\n\nfeatures_result = xxx.get_features(args=None, seg=image_xxx)\n```\n\nwhere xxx can be\n\n* **mem**, for cell membrane-related features\n* **dna**, for nucleus-related features\n* **structure**, for structure-specific features.\n* **stack**, for stack-related features.\n\nAssumptions of each function about the input image should be detailed inside the function like this\n\n```\n    Assumptions:\n        - Input is a ZYX 16-bit numpy array (2D images can be passed in as a 1YX)\n        - There is a single object of interest\n        - Background has value 0\n        - Object of interest have pixel value > 0\n```\n\n*The result `features_result` should always be a single row Pandas dataframe.*\n\n**exutils.py:** Main routine for feature calculation. We try to re-use functions from skimage (shape analysis) and Mahotas (texture analysis). Here is also the place to implement new features that are not found in those packages. We try to be general and do not say anything specific about the type of biological structure that the input image should represent.\n\n**mem.py:** Wrappers for feature extraction of cell membrane images.\n\n**dna.py:** Wrappers for feature extraction of dna images.\n\n**structure.py:** Wrappers for feature extraction of structures images. Things to be defined: which type of feature we should extract for each given structure. Or do we do all to all?\n\n**stack.py:** Wrappers for feature extraction of whole stack images.\n\n## How to Build\n\nThe default project layout and build steps are discussed in [BUILD.md](BUILD.md). Some of the information\nis related to the AICS build process.\n\n## Legal documents\n\n- [License](LICENSE.txt) _(Before you release the project publicly please check with your manager to ensure the license is appropriate and has been run through legal review as necessary.)_\n- [Contribution Agreement](CONTRIBUTING.md) _(Additionally update the contribution agreement to reflect\nthe level of contribution you are expecting, and the level of support you intend to provide.)_\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "", "license": "Allen Institute Software License", "maintainer": "", "maintainer_email": "", "name": "aicsfeature", "package_url": "https://pypi.org/project/aicsfeature/", "platform": "", "project_url": "https://pypi.org/project/aicsfeature/", "project_urls": null, "release_url": "https://pypi.org/project/aicsfeature/0.2.1/", "requires_dist": ["numpy", "scipy", "pandas", "aicsimageprocessing", "scikit-image (>=0.13.1)", "matplotlib (>=2.0.0)", "jupyter", "mahotas", "h5py", "pytest ; extra == 'all'", "pytest-cov ; extra == 'all'", "flake8 ; extra == 'all'", "flake8 ; extra == 'lint_group'", "pytest ; extra == 'test_group'", "pytest-cov ; extra == 'test_group'"], "requires_python": "", "summary": "Scripts for image features calculation.", "version": "0.2.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h2>AICS Features Extraction</h2>\n<h3>from aicsfeatures.extractor import *</h3>\n<h4>/feature_calc</h4>\n<p>Functions related to feature extraction. Feature extraction should be done like this:</p>\n<pre><code>from aicsfeatures.extractor import *\n\nfeatures_result = xxx.get_features(args=None, seg=image_xxx)\n</code></pre>\n<p>where xxx can be</p>\n<ul>\n<li><strong>mem</strong>, for cell membrane-related features</li>\n<li><strong>dna</strong>, for nucleus-related features</li>\n<li><strong>structure</strong>, for structure-specific features.</li>\n<li><strong>stack</strong>, for stack-related features.</li>\n</ul>\n<p>Assumptions of each function about the input image should be detailed inside the function like this</p>\n<pre><code>    Assumptions:\n        - Input is a ZYX 16-bit numpy array (2D images can be passed in as a 1YX)\n        - There is a single object of interest\n        - Background has value 0\n        - Object of interest have pixel value &gt; 0\n</code></pre>\n<p><em>The result <code>features_result</code> should always be a single row Pandas dataframe.</em></p>\n<p><strong>exutils.py:</strong> Main routine for feature calculation. We try to re-use functions from skimage (shape analysis) and Mahotas (texture analysis). Here is also the place to implement new features that are not found in those packages. We try to be general and do not say anything specific about the type of biological structure that the input image should represent.</p>\n<p><strong>mem.py:</strong> Wrappers for feature extraction of cell membrane images.</p>\n<p><strong>dna.py:</strong> Wrappers for feature extraction of dna images.</p>\n<p><strong>structure.py:</strong> Wrappers for feature extraction of structures images. Things to be defined: which type of feature we should extract for each given structure. Or do we do all to all?</p>\n<p><strong>stack.py:</strong> Wrappers for feature extraction of whole stack images.</p>\n<h2>How to Build</h2>\n<p>The default project layout and build steps are discussed in <a href=\"BUILD.md\" rel=\"nofollow\">BUILD.md</a>. Some of the information\nis related to the AICS build process.</p>\n<h2>Legal documents</h2>\n<ul>\n<li><a href=\"LICENSE.txt\" rel=\"nofollow\">License</a> <em>(Before you release the project publicly please check with your manager to ensure the license is appropriate and has been run through legal review as necessary.)</em></li>\n<li><a href=\"CONTRIBUTING.md\" rel=\"nofollow\">Contribution Agreement</a> <em>(Additionally update the contribution agreement to reflect\nthe level of contribution you are expecting, and the level of support you intend to provide.)</em></li>\n</ul>\n\n          </div>"}, "last_serial": 5360219, "releases": {"0.2.0": [{"comment_text": "", "digests": {"md5": "1ef0491903fcf9411200416537f081c1", "sha256": "9732af347fbb9aa985cd1e0d96bad160035bbea8867349e09d9b84d7fe04a599"}, "downloads": -1, "filename": "aicsfeature-0.2.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "1ef0491903fcf9411200416537f081c1", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 13921, "upload_time": "2019-03-20T17:19:47", "upload_time_iso_8601": "2019-03-20T17:19:47.821447Z", "url": "https://files.pythonhosted.org/packages/0e/9c/7730748130fd386be64e94ecb895a0dcb42bd571b40e6984400ad4636f34/aicsfeature-0.2.0-py2.py3-none-any.whl", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "2d3e3c37eec3b6230b0ce9062f147775", "sha256": "80552b09842f11f46b78f6e5415fa4508b56d42567b11d07de1d231acb41d597"}, "downloads": -1, "filename": "aicsfeature-0.2.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "2d3e3c37eec3b6230b0ce9062f147775", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 15288, "upload_time": "2019-06-05T00:25:23", "upload_time_iso_8601": "2019-06-05T00:25:23.650187Z", "url": "https://files.pythonhosted.org/packages/8b/9e/ca5da1cf84340ebdf5f1fb6811691c3f9db8459ce1b78ee766c44cfb2a50/aicsfeature-0.2.1-py2.py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "2d3e3c37eec3b6230b0ce9062f147775", "sha256": "80552b09842f11f46b78f6e5415fa4508b56d42567b11d07de1d231acb41d597"}, "downloads": -1, "filename": "aicsfeature-0.2.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "2d3e3c37eec3b6230b0ce9062f147775", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 15288, "upload_time": "2019-06-05T00:25:23", "upload_time_iso_8601": "2019-06-05T00:25:23.650187Z", "url": "https://files.pythonhosted.org/packages/8b/9e/ca5da1cf84340ebdf5f1fb6811691c3f9db8459ce1b78ee766c44cfb2a50/aicsfeature-0.2.1-py2.py3-none-any.whl", "yanked": false}], "timestamp": "Thu May  7 16:22:10 2020"}