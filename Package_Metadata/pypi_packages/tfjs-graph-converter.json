{"info": {"author": "Patrick Levin", "author_email": "vertical-pink@protonmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "Intended Audience :: Education", "Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Topic :: Scientific/Engineering :: Artificial Intelligence", "Topic :: Software Development", "Topic :: Software Development :: Libraries", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "# TensorFlow.js Graph Model Converter\n\n![TFJS Graph Converter Logo](/docs/logo.png)\n\nThe purpose of this library is to import TFJS graph models into Tensorflow.\nThis allows you to use TensorFlow.js models with Python in case you don't\nhave access to the original formats or the models have been created in TFJS.\n\n## Disclaimer\n\nI'm neither a Python developer, nor do I know TensorFlow or TensorFlow.js.\nI created this package solely because I ran into an issue when trying to convert\na pretrained TensorFlow.js model into a different format. I didn't have access to\nthe pretrained original TF model and didn't have the resources to train it myself.\nI soon learned that I'm not alone with this [issue](https://github.com/tensorflow/tfjs/issues/1575)\nso I sat down and wrote this little library.\n\nIf you find any part of the code to be non-idiomatic or know of a simpler way to\nachieve certain things, feel free to let me know, since I'm a beginner in both\nPython and especially TensorFlow (used it for the very first time in this\nvery project).\n\n## Prerequisites\n\n* tensorflow 2.1+\n* tensorflowjs 1.5.2+\n\n## Compatibility\n\nThe converter has been tested with tensorflowjs v1.7.2 and tensorflow v2.1.\nThe Python version used was Python 3.7.7.\n\n## Installation\n\n```sh\npip install tfjs-graph-converter\n```\n\n## Usage\n\nAfter the installation, you can run the packaged `tfjs_graph_converter` binary\nfor quick and easy model conversion.\n\n### Positional Arguments\n\n | Positional Argument | Description |\n | :--- | :--- |\n | `input_path` | Path to the TFJS Graph Model directory containing the model.json |\n | `output_path` | For output format \"tf_saved_model\", a SavedModel target directory. For output format \"tf_frozen_model\", a frozen model file. |\n\n### Options\n\n| Option | Description |\n| :--- | :--- |\n| `-h`, `--help` | Show help message and exit |\n| `--output_format` | Use `tf_frozen_model` (the default) to save a Tensorflow frozen model. `tf_saved_model` exports to a Tensorflow _SavedModel_ instead. |\n | `--saved_model_tags` | Specifies the tags of the MetaGraphDef to save, in comma separated string format. Defaults to \"serve\". Applicable only if `--output format` is `tf_saved_model` |\n | `-v`, `--version` | Shows the version of the converter and its dependencies. |\n | `-s`, `--silent` | Suppresses any output besides error messages. |\n\nAlternatively, you can create your own converter programs using the module's API.\nThe API is required to accomplish more complicated tasks, like packaging multiple\nTensorFlow.js models into a single SavedModel.\n\n## Example\n\nTo convert a TensorFlow.js graph model to a TensorFlow frozen model (i.e. the\nmost common use case?), just specify the directory containing the `model.json`,\nfollowed by the path and file name of the frozen model like so:\n\n```sh\ntfjs_graph_converter path/to/js/model path/to/frozen/model.pb\n```\n\n## Usage from within Python\n\nThe package installs the module `tfjs_graph_converter`, which contains all the\nfunctionality used by the converter script.\nYou can leverage the API to either load TensorFlow.js graph models directly for\nuse with your TensorFlow program (e.g. for inference, fine-tuning, or extending),\nor use the advanced functionality to combine several TFJS models into a single\n`SavedModel`.\nThe latter is only supported using the API (it's just a single function call,\nthough, so don't panic \u00f0\u0178\u02dc\u2030)\n\n[API Documentation](./docs/modules.rst)\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/patlevin/tfjs-to-tf/", "keywords": "tensorflow tensorflowjs converter", "license": "", "maintainer": "", "maintainer_email": "", "name": "tfjs-graph-converter", "package_url": "https://pypi.org/project/tfjs-graph-converter/", "platform": "", "project_url": "https://pypi.org/project/tfjs-graph-converter/", "project_urls": {"Homepage": "https://github.com/patlevin/tfjs-to-tf/"}, "release_url": "https://pypi.org/project/tfjs-graph-converter/1.0.1/", "requires_dist": ["tensorflowjs (>=1.5.2)"], "requires_python": ">=3.6", "summary": "A tensorflowjs Graph Model Converter", "version": "1.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>TensorFlow.js Graph Model Converter</h1>\n<p><img alt=\"TFJS Graph Converter Logo\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/275c8e5f1b872d18c2cf7cdf8c1184336cc0a500/2f646f63732f6c6f676f2e706e67\"></p>\n<p>The purpose of this library is to import TFJS graph models into Tensorflow.\nThis allows you to use TensorFlow.js models with Python in case you don't\nhave access to the original formats or the models have been created in TFJS.</p>\n<h2>Disclaimer</h2>\n<p>I'm neither a Python developer, nor do I know TensorFlow or TensorFlow.js.\nI created this package solely because I ran into an issue when trying to convert\na pretrained TensorFlow.js model into a different format. I didn't have access to\nthe pretrained original TF model and didn't have the resources to train it myself.\nI soon learned that I'm not alone with this <a href=\"https://github.com/tensorflow/tfjs/issues/1575\" rel=\"nofollow\">issue</a>\nso I sat down and wrote this little library.</p>\n<p>If you find any part of the code to be non-idiomatic or know of a simpler way to\nachieve certain things, feel free to let me know, since I'm a beginner in both\nPython and especially TensorFlow (used it for the very first time in this\nvery project).</p>\n<h2>Prerequisites</h2>\n<ul>\n<li>tensorflow 2.1+</li>\n<li>tensorflowjs 1.5.2+</li>\n</ul>\n<h2>Compatibility</h2>\n<p>The converter has been tested with tensorflowjs v1.7.2 and tensorflow v2.1.\nThe Python version used was Python 3.7.7.</p>\n<h2>Installation</h2>\n<pre>pip install tfjs-graph-converter\n</pre>\n<h2>Usage</h2>\n<p>After the installation, you can run the packaged <code>tfjs_graph_converter</code> binary\nfor quick and easy model conversion.</p>\n<h3>Positional Arguments</h3>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Positional Argument</th>\n<th align=\"left\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>input_path</code></td>\n<td align=\"left\">Path to the TFJS Graph Model directory containing the model.json</td>\n</tr>\n<tr>\n<td align=\"left\"><code>output_path</code></td>\n<td align=\"left\">For output format \"tf_saved_model\", a SavedModel target directory. For output format \"tf_frozen_model\", a frozen model file.</td>\n</tr></tbody></table>\n<h3>Options</h3>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Option</th>\n<th align=\"left\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>-h</code>, <code>--help</code></td>\n<td align=\"left\">Show help message and exit</td>\n</tr>\n<tr>\n<td align=\"left\"><code>--output_format</code></td>\n<td align=\"left\">Use <code>tf_frozen_model</code> (the default) to save a Tensorflow frozen model. <code>tf_saved_model</code> exports to a Tensorflow <em>SavedModel</em> instead.</td>\n</tr>\n<tr>\n<td align=\"left\"><code>--saved_model_tags</code></td>\n<td align=\"left\">Specifies the tags of the MetaGraphDef to save, in comma separated string format. Defaults to \"serve\". Applicable only if <code>--output format</code> is <code>tf_saved_model</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>-v</code>, <code>--version</code></td>\n<td align=\"left\">Shows the version of the converter and its dependencies.</td>\n</tr>\n<tr>\n<td align=\"left\"><code>-s</code>, <code>--silent</code></td>\n<td align=\"left\">Suppresses any output besides error messages.</td>\n</tr></tbody></table>\n<p>Alternatively, you can create your own converter programs using the module's API.\nThe API is required to accomplish more complicated tasks, like packaging multiple\nTensorFlow.js models into a single SavedModel.</p>\n<h2>Example</h2>\n<p>To convert a TensorFlow.js graph model to a TensorFlow frozen model (i.e. the\nmost common use case?), just specify the directory containing the <code>model.json</code>,\nfollowed by the path and file name of the frozen model like so:</p>\n<pre>tfjs_graph_converter path/to/js/model path/to/frozen/model.pb\n</pre>\n<h2>Usage from within Python</h2>\n<p>The package installs the module <code>tfjs_graph_converter</code>, which contains all the\nfunctionality used by the converter script.\nYou can leverage the API to either load TensorFlow.js graph models directly for\nuse with your TensorFlow program (e.g. for inference, fine-tuning, or extending),\nor use the advanced functionality to combine several TFJS models into a single\n<code>SavedModel</code>.\nThe latter is only supported using the API (it's just a single function call,\nthough, so don't panic \u00f0\u0178\u02dc\u2030)</p>\n<p><a href=\"./docs/modules.rst\" rel=\"nofollow\">API Documentation</a></p>\n\n          </div>"}, "last_serial": 7124131, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "5ca16925bd87e2ae6421c2ef77259a65", "sha256": "43668aebe0f3ec9eaaeb5b6148aecaeafa3d8d2dc5ea33e677f2f21677744441"}, "downloads": -1, "filename": "tfjs_graph_converter-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "5ca16925bd87e2ae6421c2ef77259a65", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 20830, "upload_time": "2020-04-27T02:35:04", "upload_time_iso_8601": "2020-04-27T02:35:04.339411Z", "url": "https://files.pythonhosted.org/packages/7d/e5/ff50a18fce97a0375d9b3c5fe2ac1f45f8c2ca7800d0496f4d7a0bf1bc71/tfjs_graph_converter-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a6bf8e6cd5012967387160b3c711b704", "sha256": "d8d0916d5dfafc76f87a979504063f423d886b4470475983a27cc4195bed63cf"}, "downloads": -1, "filename": "tfjs-graph-converter-1.0.0.tar.gz", "has_sig": false, "md5_digest": "a6bf8e6cd5012967387160b3c711b704", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 17628, "upload_time": "2020-04-27T02:35:06", "upload_time_iso_8601": "2020-04-27T02:35:06.485297Z", "url": "https://files.pythonhosted.org/packages/6e/55/85cba33425501a250d8b7958ac0c260314cafd84b2ff6b8fc39a66eb37a9/tfjs-graph-converter-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "58bad7acb7b4def52bfb39f9806210c8", "sha256": "40fa45a9c2fa350d059d696d8688754f3e700a84adaff4373d1e19654def68e8"}, "downloads": -1, "filename": "tfjs_graph_converter-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "58bad7acb7b4def52bfb39f9806210c8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 20845, "upload_time": "2020-04-28T22:56:49", "upload_time_iso_8601": "2020-04-28T22:56:49.600575Z", "url": "https://files.pythonhosted.org/packages/e3/33/2300b6272bf73969b6d4e00622993d0b43fea508856f613c642e138f272b/tfjs_graph_converter-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "62bfbac324b8a7fc2891262992e0125f", "sha256": "6576a64cdb022934128fc640b1ab76c1053e476ba25574f83074e72ca58a8aac"}, "downloads": -1, "filename": "tfjs-graph-converter-1.0.1.tar.gz", "has_sig": false, "md5_digest": "62bfbac324b8a7fc2891262992e0125f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 17643, "upload_time": "2020-04-28T22:56:50", "upload_time_iso_8601": "2020-04-28T22:56:50.503137Z", "url": "https://files.pythonhosted.org/packages/a4/16/58827ba040a6f13c21d7fda458d0662e7cc6503994a59fbfe4a0798b91cb/tfjs-graph-converter-1.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "58bad7acb7b4def52bfb39f9806210c8", "sha256": "40fa45a9c2fa350d059d696d8688754f3e700a84adaff4373d1e19654def68e8"}, "downloads": -1, "filename": "tfjs_graph_converter-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "58bad7acb7b4def52bfb39f9806210c8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 20845, "upload_time": "2020-04-28T22:56:49", "upload_time_iso_8601": "2020-04-28T22:56:49.600575Z", "url": "https://files.pythonhosted.org/packages/e3/33/2300b6272bf73969b6d4e00622993d0b43fea508856f613c642e138f272b/tfjs_graph_converter-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "62bfbac324b8a7fc2891262992e0125f", "sha256": "6576a64cdb022934128fc640b1ab76c1053e476ba25574f83074e72ca58a8aac"}, "downloads": -1, "filename": "tfjs-graph-converter-1.0.1.tar.gz", "has_sig": false, "md5_digest": "62bfbac324b8a7fc2891262992e0125f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 17643, "upload_time": "2020-04-28T22:56:50", "upload_time_iso_8601": "2020-04-28T22:56:50.503137Z", "url": "https://files.pythonhosted.org/packages/a4/16/58827ba040a6f13c21d7fda458d0662e7cc6503994a59fbfe4a0798b91cb/tfjs-graph-converter-1.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:54:33 2020"}