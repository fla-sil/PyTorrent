{"info": {"author": "Torben Haase", "author_email": "git@letorbi.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Console", "Intended Audience :: System Administrators", "License :: OSI Approved :: GNU General Public License (GPL)", "Operating System :: POSIX :: Linux", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3"], "description": "# Synoindex Watcher - Automated media index updates\n\nSynoindex Watcher is a media index updater for Synology DiskStations based on inotify and synoindex. It watches the media-folders of your DiskStation an updates the media index every time a file or directory inside the media-folders is created, deleted or changed. It is written in Python and licensed as open-source under the GPL version 3.\n\nThe original version was written by Mark Houghton, who [published it in his \"codesourcery\" blog](https://codesourcery.wordpress.com/2012/11/29/more-on-the-synology-nas-automatically-indexing-new-files/). However, most of the original code has been replaced or rewritten by now.\n\n*This Python package is currently in beta-stage. All planned features are implemented, it is working and used on a number of devices. The only thing that's missing are some automated testing-routines, so there could still be undiscovered bugs.*\n\n## Features\n\n* **Lightweight** No need to install extra Synology packages\n* **Intelligent** Executes only if a file has actually been added/deleted/renamed\n* **Agnostic** Python 2 and Python 3 compatible (minimum tested version is 2.7)\n\n## Installation\n\nSynoindex Watcher cannot be installed via Synology's Package Center. You have to log in via SSH and use the terminal.  I recommend to use pip for the installation. Synology DiskStations do not have pip installed by default, but you can add it easily with the following command:\n\n```\n$ wget https://bootstrap.pypa.io/get-pip.py -qO - | sudo python\n```\n\nNow you can install the Synoindex Watcher module:\n\n```\n$ sudo python -m pip install --upgrade synoindexwatcher\n```\n\nYou can use the same command to upgrade Synoindex Watcher from an older version.\n\nThis will also install its dependency [inotifyrecursive](https://pypi.org/project/inotifyrecursive/) and also [configparser](https://pypi.org/project/configparser/), if you use Python <= 3.5.\n\n## Usage\n\nYou can start Synoindex Watcher with the following command:\n\n```\n$ python -m synoindexwatcher\n```\n\nSynoindex Watcher will watch the directories */volume1/music*, */volume1/photo* and */volume1/video* by default.  You can change this, as well as some other things, by adding some [command-line arguments](#command-line-arguments) or using a [configuration-file](#configuration-file). You can also use an init-script to [start Synoindex Watcher on boot](#start-on-boot).\n\n### Command-line arguments\n\nThe default behaviour of Synoindex Watcher can be changed with various command-line arguments:\n\n* `path [path]`: By appending one or more paths to the command-line you can define which directories shall be watched by synoindexwatcher. For example `python -m synoindexwatcher /home/me/Music` will tell Synoindex Watcher to watch only the directory */home/me/Music*.\n\n* `--blacklist=regex`: Define a regular-expression for a global blacklist. For example `python -m synoindexwatcher --blacklist=\"foo|bar\"` will tell Synoindex Watcher ignore files and directories with `foo` or `bar` in their name. The default regular-expression is `^\\.|^\\@|\\.tmp$`, which means that files and directories are ignored if they start with `.` or `@` or end with `.tmp`. The blacklist is applied after the whitelist.\n\n* `--whitelist=regex`: Define a regular-expression for a global whitelist. For example `python -m synoindexwatcher --whitelist=\"foo|bar\"` will tell Synoindex Watcher to watch only files and directories with `foo` or `bar` in their name. The default regular-expression is empty, which means that all files and directories, which are not blacklisted, are added to the media-index. The whitelist is applied before the blacklist.\n\n* `--logfile=file`: Write log-messages to the specified file. For example `python -m synoindexwatcher --logfile=/home/me/watcher.log` will tell Synoindex Watcher to write into the file */home/me/watcher.log*. By default Synoindex Watcher will write to the terminal, if it is attached to one, or to */var/log/synoindexwatcher.log* otherwise.\n\n* `--loglevel=value`: Synoindex Watcher logs errors, warnings and informational messages by default. You can change this by setting the log-level to either `DEBUG`, `INFO`, `WARNING` or `ERROR`. For example `python -m synoindexwatcher --loglevel=DEBUG` will also log (a lot of) debugging messages along with errors, warnings and infos.\n\n* `--config=file`: Get the default-configuration from a certain file. For example `python -m synoindexwatcher --config=/etc/synoindexwatcher.conf` will tell Synoindex Watcher to use the values in */etc/synoindexwatcher.conf* as its default-values. Any additional command-line arguments will override the values read from the configuration-file.\n\n* `--rebuild-index`: Empty the media-index database, add all allowed files and directories in the watched directories and exit afterwards. Be careful with this argument as it destroys your current index and might take a long time to complete. Use it if your media-index contains deleted files or lacks existing files.\n\n* `--generate-init`: Generate an init-script, write it to the standard output and exit afterwards. Any additional command-line arguments will be integrated into the generated script. See the [start on boot](#start-on-boot) section above for further details.\n\n* `--generate-config`: Generate a configuration-file, write it to the standard output and exit afterwards. Any additional command-line arguments will be integrated into the generated configuration. See the [configuration-file](#configuration-file) section below for further details.\n\n* `--help`: Write a short online help to the standard output and exit afterwards.\n\n### Configuration-file\n\nThe default behaviour of Synoindex Watcher can also be changed via a configuration-file instead of command-line arguments. Use the following command to create a configuration file:\n\n```\npython -m synoindexwatcher --generate-config | sudo tee /usr/local/etc/synoindexwatcher.conf\n```\n\nThe generated file is split into several sections: The section `[GLOBAL]` may contain default-values for some [command-line arguments](#command-line-arguments), while each of the other sections (e.g. `[/volume1/music]`) represents a directory that shall be watched. The directory-sections contain no values so far.\n\nYou have to explicitly tell Synoindex Watcher to use a configuration-file by calling it like this:\n\n```\npython -m synoindexwatcher --config=/usr/local/etc/synoindexwatcher.conf\n```\n\nKeep in mind, that you can use additional command-line arguments to override the values from the configuration-file.\n\n### Start on boot\n\nUse the following commands to create an init-script that starts Synoindex Watcher in the background when your DiskStation boots:\n\n```\n$ python -m synoindexwatcher --generate-init | sudo tee /usr/local/etc/rc.d/S99synoindexwatcher.sh\n$ sudo chmod a+x /usr/local/etc/rc.d/S99synoindexwatcher.sh\n```\n\nPlease note that any messages are written into the file */var/log/synoindexwatcher.log*, if Synoindex Watcher is running as a background process. You can use the `--logfile` parameter to write the output to another file.\n\nAlso other command-line arguments will be integrated into the init-script. The following line will generate an init-script that tells Synoindex Watcher to watch only the directory */home/me/Music* and to log messages to */home/me/watcher.log*:\n\n```\n$ python -m synoindexwatcher --generate-init --logfile=/home/me/watcher.log /home/me/Music\n```\n\nIt is recommended to use a configuration file along with the init script, because it allows you to change the behaviour of Synoindex Watcher without the need to regenerate the init-script after every change. Assuming you have created a configuration-file with the commands in the previous section, you can use the following line to generate an init-script that recognizes this file:\n\n```\n$ python -m synoindexwatcher --generate-init --config=/usr/local/etc/synoindexwatcher.conf\n```\n\n## FAQ\n\n### I'm getting `OSError: [Errno 28] No space left on device`\n\nThis actually does not mean that you run out of disk space, but rather that your system does not allow enough inode-watchers to watch all your media files. The message is quite confusing, though.\n\nTo fix this temporarily you could simply type `echo 204800 > /proc/sys/fs/inotify/max_user_watches` as root. The maximum number of inode-watchers in the user-space would be 204800 afterwards, which should be enough for most use-cases.  Unfortunately this fixes the problem only until the next reboot.\n\nFor a permanent solution it is recommended to add the line `fs.inotify.max_user_watches = 204800` to the file */etc/sysctl.conf*. This should set the maximum value during boot, but I had to add an init-script that executes `sysctl -p /etc/sysctl.conf` to make it work. The simplest way would be to add the command to the start-section of the init-script for Synonindex Watcher.\n\n----\n\nCopyright 2019 Torben Haase \\<[https://pixelsvsbytes.com](https://pixelsvsbytes.com)>\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/letorbi/synoindexwatcher", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "synoindexwatcher", "package_url": "https://pypi.org/project/synoindexwatcher/", "platform": "", "project_url": "https://pypi.org/project/synoindexwatcher/", "project_urls": {"Homepage": "https://github.com/letorbi/synoindexwatcher"}, "release_url": "https://pypi.org/project/synoindexwatcher/0.10.2/", "requires_dist": ["inotifyrecursive (>=0.3.2)", "configparser ; python_version < \"3.5\""], "requires_python": ">=2.7, !=3.0.*, !=3.1.*", "summary": "An automated media-index updater for Synology DiskStations based on inotify and synoindex.", "version": "0.10.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Synoindex Watcher - Automated media index updates</h1>\n<p>Synoindex Watcher is a media index updater for Synology DiskStations based on inotify and synoindex. It watches the media-folders of your DiskStation an updates the media index every time a file or directory inside the media-folders is created, deleted or changed. It is written in Python and licensed as open-source under the GPL version 3.</p>\n<p>The original version was written by Mark Houghton, who <a href=\"https://codesourcery.wordpress.com/2012/11/29/more-on-the-synology-nas-automatically-indexing-new-files/\" rel=\"nofollow\">published it in his \"codesourcery\" blog</a>. However, most of the original code has been replaced or rewritten by now.</p>\n<p><em>This Python package is currently in beta-stage. All planned features are implemented, it is working and used on a number of devices. The only thing that's missing are some automated testing-routines, so there could still be undiscovered bugs.</em></p>\n<h2>Features</h2>\n<ul>\n<li><strong>Lightweight</strong> No need to install extra Synology packages</li>\n<li><strong>Intelligent</strong> Executes only if a file has actually been added/deleted/renamed</li>\n<li><strong>Agnostic</strong> Python 2 and Python 3 compatible (minimum tested version is 2.7)</li>\n</ul>\n<h2>Installation</h2>\n<p>Synoindex Watcher cannot be installed via Synology's Package Center. You have to log in via SSH and use the terminal.  I recommend to use pip for the installation. Synology DiskStations do not have pip installed by default, but you can add it easily with the following command:</p>\n<pre><code>$ wget https://bootstrap.pypa.io/get-pip.py -qO - | sudo python\n</code></pre>\n<p>Now you can install the Synoindex Watcher module:</p>\n<pre><code>$ sudo python -m pip install --upgrade synoindexwatcher\n</code></pre>\n<p>You can use the same command to upgrade Synoindex Watcher from an older version.</p>\n<p>This will also install its dependency <a href=\"https://pypi.org/project/inotifyrecursive/\" rel=\"nofollow\">inotifyrecursive</a> and also <a href=\"https://pypi.org/project/configparser/\" rel=\"nofollow\">configparser</a>, if you use Python &lt;= 3.5.</p>\n<h2>Usage</h2>\n<p>You can start Synoindex Watcher with the following command:</p>\n<pre><code>$ python -m synoindexwatcher\n</code></pre>\n<p>Synoindex Watcher will watch the directories <em>/volume1/music</em>, <em>/volume1/photo</em> and <em>/volume1/video</em> by default.  You can change this, as well as some other things, by adding some <a href=\"#command-line-arguments\" rel=\"nofollow\">command-line arguments</a> or using a <a href=\"#configuration-file\" rel=\"nofollow\">configuration-file</a>. You can also use an init-script to <a href=\"#start-on-boot\" rel=\"nofollow\">start Synoindex Watcher on boot</a>.</p>\n<h3>Command-line arguments</h3>\n<p>The default behaviour of Synoindex Watcher can be changed with various command-line arguments:</p>\n<ul>\n<li>\n<p><code>path [path]</code>: By appending one or more paths to the command-line you can define which directories shall be watched by synoindexwatcher. For example <code>python -m synoindexwatcher /home/me/Music</code> will tell Synoindex Watcher to watch only the directory <em>/home/me/Music</em>.</p>\n</li>\n<li>\n<p><code>--blacklist=regex</code>: Define a regular-expression for a global blacklist. For example <code>python -m synoindexwatcher --blacklist=\"foo|bar\"</code> will tell Synoindex Watcher ignore files and directories with <code>foo</code> or <code>bar</code> in their name. The default regular-expression is <code>^\\.|^\\@|\\.tmp$</code>, which means that files and directories are ignored if they start with <code>.</code> or <code>@</code> or end with <code>.tmp</code>. The blacklist is applied after the whitelist.</p>\n</li>\n<li>\n<p><code>--whitelist=regex</code>: Define a regular-expression for a global whitelist. For example <code>python -m synoindexwatcher --whitelist=\"foo|bar\"</code> will tell Synoindex Watcher to watch only files and directories with <code>foo</code> or <code>bar</code> in their name. The default regular-expression is empty, which means that all files and directories, which are not blacklisted, are added to the media-index. The whitelist is applied before the blacklist.</p>\n</li>\n<li>\n<p><code>--logfile=file</code>: Write log-messages to the specified file. For example <code>python -m synoindexwatcher --logfile=/home/me/watcher.log</code> will tell Synoindex Watcher to write into the file <em>/home/me/watcher.log</em>. By default Synoindex Watcher will write to the terminal, if it is attached to one, or to <em>/var/log/synoindexwatcher.log</em> otherwise.</p>\n</li>\n<li>\n<p><code>--loglevel=value</code>: Synoindex Watcher logs errors, warnings and informational messages by default. You can change this by setting the log-level to either <code>DEBUG</code>, <code>INFO</code>, <code>WARNING</code> or <code>ERROR</code>. For example <code>python -m synoindexwatcher --loglevel=DEBUG</code> will also log (a lot of) debugging messages along with errors, warnings and infos.</p>\n</li>\n<li>\n<p><code>--config=file</code>: Get the default-configuration from a certain file. For example <code>python -m synoindexwatcher --config=/etc/synoindexwatcher.conf</code> will tell Synoindex Watcher to use the values in <em>/etc/synoindexwatcher.conf</em> as its default-values. Any additional command-line arguments will override the values read from the configuration-file.</p>\n</li>\n<li>\n<p><code>--rebuild-index</code>: Empty the media-index database, add all allowed files and directories in the watched directories and exit afterwards. Be careful with this argument as it destroys your current index and might take a long time to complete. Use it if your media-index contains deleted files or lacks existing files.</p>\n</li>\n<li>\n<p><code>--generate-init</code>: Generate an init-script, write it to the standard output and exit afterwards. Any additional command-line arguments will be integrated into the generated script. See the <a href=\"#start-on-boot\" rel=\"nofollow\">start on boot</a> section above for further details.</p>\n</li>\n<li>\n<p><code>--generate-config</code>: Generate a configuration-file, write it to the standard output and exit afterwards. Any additional command-line arguments will be integrated into the generated configuration. See the <a href=\"#configuration-file\" rel=\"nofollow\">configuration-file</a> section below for further details.</p>\n</li>\n<li>\n<p><code>--help</code>: Write a short online help to the standard output and exit afterwards.</p>\n</li>\n</ul>\n<h3>Configuration-file</h3>\n<p>The default behaviour of Synoindex Watcher can also be changed via a configuration-file instead of command-line arguments. Use the following command to create a configuration file:</p>\n<pre><code>python -m synoindexwatcher --generate-config | sudo tee /usr/local/etc/synoindexwatcher.conf\n</code></pre>\n<p>The generated file is split into several sections: The section <code>[GLOBAL]</code> may contain default-values for some <a href=\"#command-line-arguments\" rel=\"nofollow\">command-line arguments</a>, while each of the other sections (e.g. <code>[/volume1/music]</code>) represents a directory that shall be watched. The directory-sections contain no values so far.</p>\n<p>You have to explicitly tell Synoindex Watcher to use a configuration-file by calling it like this:</p>\n<pre><code>python -m synoindexwatcher --config=/usr/local/etc/synoindexwatcher.conf\n</code></pre>\n<p>Keep in mind, that you can use additional command-line arguments to override the values from the configuration-file.</p>\n<h3>Start on boot</h3>\n<p>Use the following commands to create an init-script that starts Synoindex Watcher in the background when your DiskStation boots:</p>\n<pre><code>$ python -m synoindexwatcher --generate-init | sudo tee /usr/local/etc/rc.d/S99synoindexwatcher.sh\n$ sudo chmod a+x /usr/local/etc/rc.d/S99synoindexwatcher.sh\n</code></pre>\n<p>Please note that any messages are written into the file <em>/var/log/synoindexwatcher.log</em>, if Synoindex Watcher is running as a background process. You can use the <code>--logfile</code> parameter to write the output to another file.</p>\n<p>Also other command-line arguments will be integrated into the init-script. The following line will generate an init-script that tells Synoindex Watcher to watch only the directory <em>/home/me/Music</em> and to log messages to <em>/home/me/watcher.log</em>:</p>\n<pre><code>$ python -m synoindexwatcher --generate-init --logfile=/home/me/watcher.log /home/me/Music\n</code></pre>\n<p>It is recommended to use a configuration file along with the init script, because it allows you to change the behaviour of Synoindex Watcher without the need to regenerate the init-script after every change. Assuming you have created a configuration-file with the commands in the previous section, you can use the following line to generate an init-script that recognizes this file:</p>\n<pre><code>$ python -m synoindexwatcher --generate-init --config=/usr/local/etc/synoindexwatcher.conf\n</code></pre>\n<h2>FAQ</h2>\n<h3>I'm getting <code>OSError: [Errno 28] No space left on device</code></h3>\n<p>This actually does not mean that you run out of disk space, but rather that your system does not allow enough inode-watchers to watch all your media files. The message is quite confusing, though.</p>\n<p>To fix this temporarily you could simply type <code>echo 204800 &gt; /proc/sys/fs/inotify/max_user_watches</code> as root. The maximum number of inode-watchers in the user-space would be 204800 afterwards, which should be enough for most use-cases.  Unfortunately this fixes the problem only until the next reboot.</p>\n<p>For a permanent solution it is recommended to add the line <code>fs.inotify.max_user_watches = 204800</code> to the file <em>/etc/sysctl.conf</em>. This should set the maximum value during boot, but I had to add an init-script that executes <code>sysctl -p /etc/sysctl.conf</code> to make it work. The simplest way would be to add the command to the start-section of the init-script for Synonindex Watcher.</p>\n<hr>\n<p>Copyright 2019 Torben Haase &lt;<a href=\"https://pixelsvsbytes.com\" rel=\"nofollow\">https://pixelsvsbytes.com</a>&gt;</p>\n\n          </div>"}, "last_serial": 6699589, "releases": {"0.10.0": [{"comment_text": "", "digests": {"md5": "ff41fa5347a70c7ed64db45366dea31d", "sha256": "06e8bf26f722fb492ee7492e676f5feda1bafe9b3740a526da2342c0767b5825"}, "downloads": -1, "filename": "synoindexwatcher-0.10.0-py3-none-any.whl", "has_sig": false, "md5_digest": "ff41fa5347a70c7ed64db45366dea31d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*", "size": 22328, "upload_time": "2020-02-21T21:56:33", "upload_time_iso_8601": "2020-02-21T21:56:33.505743Z", "url": "https://files.pythonhosted.org/packages/d2/83/2685dc921aee04e26c97e9ac12d0f9ac87930c00b8e65ecab24c155f6703/synoindexwatcher-0.10.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c1b698678ad86811da1335c4809214c7", "sha256": "ccecf73a7306572a5951f9afecf96e37666924a2ab8e45f9a82121d314b7c079"}, "downloads": -1, "filename": "synoindexwatcher-0.10.0.tar.gz", "has_sig": false, "md5_digest": "c1b698678ad86811da1335c4809214c7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*", "size": 11551, "upload_time": "2020-02-21T21:56:35", "upload_time_iso_8601": "2020-02-21T21:56:35.124157Z", "url": "https://files.pythonhosted.org/packages/85/1f/1216a341b7f34675e1996302c0a3344690dfe219b413b055e2b6fa04b103/synoindexwatcher-0.10.0.tar.gz", "yanked": false}], "0.10.1": [{"comment_text": "", "digests": {"md5": "88859adda72ee5fc2a80b94c2701d9e3", "sha256": "a414249c2f26c831d279fc28d148f625fa16ab12c7fbd38ca882852b91d217fd"}, "downloads": -1, "filename": "synoindexwatcher-0.10.1-py3-none-any.whl", "has_sig": false, "md5_digest": "88859adda72ee5fc2a80b94c2701d9e3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*", "size": 22359, "upload_time": "2020-02-22T12:07:32", "upload_time_iso_8601": "2020-02-22T12:07:32.903672Z", "url": "https://files.pythonhosted.org/packages/16/33/10344264ec816d64249f9abc6e2e685ab9347a5950f086aba66203f15308/synoindexwatcher-0.10.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1f0a5ed205d7ad92aa52a0479ec07312", "sha256": "577cc55951ef225d1dbdd661cd1163d329e29b2f1d075a0adfb433828007e49f"}, "downloads": -1, "filename": "synoindexwatcher-0.10.1.tar.gz", "has_sig": false, "md5_digest": "1f0a5ed205d7ad92aa52a0479ec07312", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*", "size": 11591, "upload_time": "2020-02-22T12:07:34", "upload_time_iso_8601": "2020-02-22T12:07:34.857220Z", "url": "https://files.pythonhosted.org/packages/bc/da/48317572c590c74c46d2eaa6f4945a35e75105f0eb8c8aceeb8be2a1a2d3/synoindexwatcher-0.10.1.tar.gz", "yanked": false}], "0.10.2": [{"comment_text": "", "digests": {"md5": "485c682890f53e8bfa7665575f212706", "sha256": "ff0131b8945858fae6e53419fa9e7e86379a0bbee17550f421f25979a6d04145"}, "downloads": -1, "filename": "synoindexwatcher-0.10.2-py3-none-any.whl", "has_sig": false, "md5_digest": "485c682890f53e8bfa7665575f212706", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*", "size": 22361, "upload_time": "2020-02-25T22:49:46", "upload_time_iso_8601": "2020-02-25T22:49:46.687464Z", "url": "https://files.pythonhosted.org/packages/a1/ff/8b18a08b75328b01fb5b032ce745481672abb222888cfa101259577cc376/synoindexwatcher-0.10.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fe4d69b9a90f2d7e60fc98089239b76a", "sha256": "62c96a10f55806a880e2ca0e31d05108bd6243642cd9708450a143a36d495ee2"}, "downloads": -1, "filename": "synoindexwatcher-0.10.2.tar.gz", "has_sig": false, "md5_digest": "fe4d69b9a90f2d7e60fc98089239b76a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*", "size": 11624, "upload_time": "2020-02-25T22:49:48", "upload_time_iso_8601": "2020-02-25T22:49:48.072421Z", "url": "https://files.pythonhosted.org/packages/fd/00/c937f6c9fc4d742ef80ac7954522a84cd1ec19ebe4bd7a337d7156d0ed29/synoindexwatcher-0.10.2.tar.gz", "yanked": false}], "0.9.2": [{"comment_text": "", "digests": {"md5": "afd5b7de23e454a5102d9f2f120fe003", "sha256": "7c75659b306d1b03184110ea8ad9db8d5b693fcd95a4831f189949e866701098"}, "downloads": -1, "filename": "synoindexwatcher-0.9.2-py3-none-any.whl", "has_sig": false, "md5_digest": "afd5b7de23e454a5102d9f2f120fe003", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 22206, "upload_time": "2019-12-19T19:31:57", "upload_time_iso_8601": "2019-12-19T19:31:57.674023Z", "url": "https://files.pythonhosted.org/packages/d4/0b/4675a12a16745a3704637bcbc77680acdca448bcddd2959cfe91d7990637/synoindexwatcher-0.9.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e0d330abebf734cab2b02edb02d62d8e", "sha256": "e6924cd63fe92980c8fbaef9c83f9321118994ea95e2d080cdcd0eac9e3e1698"}, "downloads": -1, "filename": "synoindexwatcher-0.9.2.tar.gz", "has_sig": false, "md5_digest": "e0d330abebf734cab2b02edb02d62d8e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11453, "upload_time": "2019-12-19T19:32:00", "upload_time_iso_8601": "2019-12-19T19:32:00.644743Z", "url": "https://files.pythonhosted.org/packages/f8/37/c26936feaddf4dd4eacb9865193c8d912f4a90e56d5f36b0fd1c319dd5ff/synoindexwatcher-0.9.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "485c682890f53e8bfa7665575f212706", "sha256": "ff0131b8945858fae6e53419fa9e7e86379a0bbee17550f421f25979a6d04145"}, "downloads": -1, "filename": "synoindexwatcher-0.10.2-py3-none-any.whl", "has_sig": false, "md5_digest": "485c682890f53e8bfa7665575f212706", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*", "size": 22361, "upload_time": "2020-02-25T22:49:46", "upload_time_iso_8601": "2020-02-25T22:49:46.687464Z", "url": "https://files.pythonhosted.org/packages/a1/ff/8b18a08b75328b01fb5b032ce745481672abb222888cfa101259577cc376/synoindexwatcher-0.10.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fe4d69b9a90f2d7e60fc98089239b76a", "sha256": "62c96a10f55806a880e2ca0e31d05108bd6243642cd9708450a143a36d495ee2"}, "downloads": -1, "filename": "synoindexwatcher-0.10.2.tar.gz", "has_sig": false, "md5_digest": "fe4d69b9a90f2d7e60fc98089239b76a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*", "size": 11624, "upload_time": "2020-02-25T22:49:48", "upload_time_iso_8601": "2020-02-25T22:49:48.072421Z", "url": "https://files.pythonhosted.org/packages/fd/00/c937f6c9fc4d742ef80ac7954522a84cd1ec19ebe4bd7a337d7156d0ed29/synoindexwatcher-0.10.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:59:01 2020"}