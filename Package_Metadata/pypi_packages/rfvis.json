{"info": {"author": "Philipp Wiesner", "author_email": "mail@philippwiesner.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Console", "Environment :: Web Environment", "Intended Audience :: Education", "Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: JavaScript", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Education", "Topic :: Scientific/Engineering :: Visualization"], "description": "# RFVis [![PyPI version fury.io](https://badge.fury.io/py/rfvis.svg)](https://pypi.org/project/rfvis/) [![Supported versions](https://img.shields.io/pypi/pyversions/rfvis.svg)](https://pypi.org/project/rfvis/) [![License](https://img.shields.io/pypi/l/rfvis.svg)](https://pypi.org/project/rfvis/)\n\nA tool for visualizing the structure and performance of Random Forests (and other ensemble methods based on decision trees).\n\n![Tree](images/tree.png)\n\nRFVis offers a [Command Line API](#command-line-api) and a [Python API](#python-api) which works on a [sklearn.ensemble.RandomForestClassifier](https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestClassifier.html).\n\n\n## Getting Started \n\nInstall and update RFVis via [pip](https://pip.pypa.io/en/stable/quickstart/):\n\n```\n$ pip install rfvis\n```\n\nThis will allow you interactively visualize a fitted Random Forest (RF) in your\nbrowser. To directly generate SVG files from your model you also need to install\n[Node.js](https://nodejs.org/en/download/), see [Command Line Interface](#command-line-interface) for more information.\n\n\n## Command Line API\n\nRFVis offers a command line tool to either generate SVG files directly from\nyour input data (`rfvis cli <data>`) or to spin up a web-based GUI for a more\ninteractive analysis (`rfvis gui <data>`).\n\nTo see all available commands run:\n```\n$ rfvis --help\nUsage: rfvis [OPTIONS] COMMAND [ARGS]...\n\n  A tool for visualizing the structure and performance of Random Forests\n\nOptions:\n  --version  Show the version and exit.\n  --help     Show this message and exit.\n\nCommands:\n  cli  Command line interface to generate SVGs.\n  gui  Web-based graphical user interface.\n```\n\n\n### Graphical User Interface\n\nTo interactively analyze your forest with the web-based GUI run:\n```\n$ rfvis gui /path/to/data\n * Running on http://127.0.0.1:8080/ (Press CTRL+C to quit)\n```\nYou can now open up your browser at <http://localhost:8080> to see something like this:\n\n![Tree](images/screenshot.png)\n\n\n### Command Line Interface\n\nTo use the Command Line Interface (CLI) you need to have\n[Node.js](https://nodejs.org/en/download/) v8+ installed on your system. This\nis a technical limitation due to the fact that the rendering is written in\nJavascript. You do not need to install any other package though, the CLI\nintegrates into the command line tool you already installed via pip:\n```\n$ rfvis cli /path/to/data\n>> Exported \"/dev/random-forest-visualization/tree-0.svg\"\n>> Exported \"/dev/random-forest-visualization/tree-1.svg\"\n>> Exported \"/dev/random-forest-visualization/tree-2.svg\"\n>> Exported \"/dev/random-forest-visualization/tree-3.svg\"\n...\n```\n\nGet a full list of available options with `--help`:\n```\n$ rfvis cli --help\nUsage: rfvis cli [OPTIONS] FOREST_JSON\n\n  Web-based graphical user interface.\n\n  As Python is unable to render React components, we make a subprocess call to a small\n  Node.js application which will do the rendering and also store the created SVG\n  files. This command requires that Node.js is installed on your system!\n\n  FOREST_JSON: Path to the JSON file that contains the forest's data.\n\nOptions:\n  -o, --out PATH                  Output path of the SVG files.  [default: (current\n                                  working directory)]\n  -w, --width INTEGER             Width of the SVG.  [default: 800]\n  -h, --height INTEGER            Height of the SVG.  [default: 800]\n  --trunk-length INTEGER          Length of the trunk which influences the overall tree\n                                  size.  [default: 100]\n  --display-depth INTEGER         Maximum depth of the tree rendering. Cut of leaves are\n                                  visualized as pie chart consolidation nodes.\n  --branch-color [Impurity]       Coloring of the branches.  [default: Impurity]\n  --leaf-color [Impurity|Best Class]\n                                  Coloring of the leaves.  [default: Impurity]\n  --help                          Show this message and exit.\n```\n\n\n### Input Data\n\nThe data for the Command Line API must be available on your filesystem as a JSON file\nfor the forest and additionally one CSV file per tree. Both data formats will\nbe extended with properties in the future, this is just the minimal set.\n\nYou can find a working example under `examples/PolSAR`.\n\n\n#### Forest JSON\n\nThe main `forest.json` holds all information about the ensemble model:\n\n- **name** (string): Name of your forest, will be displayed in the GUI\n- **error** (float): The error (e.g. the out-of-bag or validation error) of the \n    entire ensemble model, will be displayed in the GUI\n- **n_samples** (int): Number of samples the model was trained on\n- **correlationMatrix** (float[][]): Correlation between the single trees within\n    the model. Has dimensions `NxN` where `N` is the number of trees.\n    This will be used to compute the forest map. \n- **classes**: The output classes\n    - **name** (string): Name of the class\n    - **color** (int, int, int): RGB values in the range of 0-255 which\n        determine the color of the class in the visualization\n- **trees**: The trees in the forest\n    - **error** (float): The error (again could be either the out-of-bag or\n        validation error) of the single tree\n    - **data** (string): Relative path to the CSV file containing the tree data\n\n\n#### Tree CSV\n\nFor each tree specified in the `forest.json` RFVis expects a CSV file where one\nentry represents one node in the tree. An entry has the following format:\n\n- **id** (int): ID of the node\n- **depth** (int) Depth of the node in the tree (starting at `0`)\n- **n_node_samples** (int): Number of training samples reaching the node\n- **impurity** (float): Impurity of the node (`0`-`1`)\n- **value** (int[]): Class distribution within the node, i.e. every entry \n    represents the amount of samples within the node that respond to a specific \n    class. The index corresponds to the indices in `forest.classes`.\n\n\n## Python API\n\nRFVis also offers a Python API which works directly on a scikit-learn RandomForestClassifier.\nYou can find a working example under `examples/scikit_learn.py`.\n\nThe function `rfvis.gui()` visualizes a fitted RandomForestClassifier in a web based graphical user interface.\nThe server runs in a separate process and is available at `http://localhost:<port>`.\n\n```python\ngui(model, data=None, target=None, name=None, class_names=None, class_colors=None, port=8080)\n```\n\nArgs:\n\n- **model** ([sklearn.ensemble.RandomForestClassifier](https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestClassifier.html)):\n    The model to visualize.\n- **data** (array-like, shape=(n_samples, n_features)): The training input samples that were used to fit the model.\n    Used to compute the out-of-bag error and correlation of the individual trees.\n    If not provided, the forest view will have no significance.\n- **target** (array-like, shape=n_samples): The target values (class labels) that were used to fit the model.\n    Used to compute the out-of-bag error and correlation of the individual trees.\n    If not provided, the forest view will have no significance.\n- **name** (str): Optional name of the model which will be displayed in the frontend.\n- **class_names** (List[str]): Optional list of names of the target classes\n- **class_colors** (List[str]): Optional list of browser interpretable colors for the target classes.\n    See https://developer.mozilla.org/en-US/docs/Web/CSS/color_value.\n- **port** (int): Port on which the frontend will run on. Defaults to 8080.\n\nReturns:\n- **process** (multiprocessing.Process): Subprocess that runs the server. Can be terminated with\n    [process.terminate()](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.Process.terminate).\n\n## Development\n\nThe repository contains a `Pipfile` for conveniently creating a virtualenv\nfor development. Just install [pipenv](https://pipenv.readthedocs.io/en/latest/)\nand run:\n\n```\n$ pipenv install\n```\n\nYou can now e.g. start the server on the default port 8080 via:\n\n```\n$ pipenv run rfvis gui <path_to_forest_json>\n```\n\nNote that you need to build the frontend bundle first before you can\nactually see the application working on `http://localhost:8080`.\n\nTo build the frontend you need Node.js installed. First install all \ndev-dependencies by running the following \nfrom within the `./rfvis/client` directory:\n\n```\n$ npm install\n```\n\nNow you can build a production-ready bundle via:\n\n```\n$ npm run build\n```\n\nIf you have the Python server running you should now be able to see the\napplication at `http://localhost:8080`.\n\nFor developing on the frontend more conveniently run:\n\n```\n$ npm start\n```\n\nTo start a development server with hot reloading at `http://localhost:3000`.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/birnbaum/rfvis", "keywords": "random-forest,visualization,decision-trees,d3js,react", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "rfvis", "package_url": "https://pypi.org/project/rfvis/", "platform": "", "project_url": "https://pypi.org/project/rfvis/", "project_urls": {"Bug Tracker": "https://github.com/birnbaum/rfvis/issues", "Homepage": "https://github.com/birnbaum/rfvis"}, "release_url": "https://pypi.org/project/rfvis/0.3.0/", "requires_dist": null, "requires_python": "", "summary": "A tool for visualizing the structure and performance of Random Forests", "version": "0.3.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>RFVis <a href=\"https://pypi.org/project/rfvis/\" rel=\"nofollow\"><img alt=\"PyPI version fury.io\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/58aabbeaf2395b71be24b16273f0854669d73610/68747470733a2f2f62616467652e667572792e696f2f70792f72667669732e737667\"></a> <a href=\"https://pypi.org/project/rfvis/\" rel=\"nofollow\"><img alt=\"Supported versions\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3793f3d196e4fb78141ce7b39341dfaaffb5f7b1/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f72667669732e737667\"></a> <a href=\"https://pypi.org/project/rfvis/\" rel=\"nofollow\"><img alt=\"License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a0b6860e6fb483188b48931c0438ec058dcae170/68747470733a2f2f696d672e736869656c64732e696f2f707970692f6c2f72667669732e737667\"></a></h1>\n<p>A tool for visualizing the structure and performance of Random Forests (and other ensemble methods based on decision trees).</p>\n<p><img alt=\"Tree\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fb5773ca629e093ec905fbb97ca9213572c1de56/696d616765732f747265652e706e67\"></p>\n<p>RFVis offers a <a href=\"#command-line-api\" rel=\"nofollow\">Command Line API</a> and a <a href=\"#python-api\" rel=\"nofollow\">Python API</a> which works on a <a href=\"https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestClassifier.html\" rel=\"nofollow\">sklearn.ensemble.RandomForestClassifier</a>.</p>\n<h2>Getting Started</h2>\n<p>Install and update RFVis via <a href=\"https://pip.pypa.io/en/stable/quickstart/\" rel=\"nofollow\">pip</a>:</p>\n<pre><code>$ pip install rfvis\n</code></pre>\n<p>This will allow you interactively visualize a fitted Random Forest (RF) in your\nbrowser. To directly generate SVG files from your model you also need to install\n<a href=\"https://nodejs.org/en/download/\" rel=\"nofollow\">Node.js</a>, see <a href=\"#command-line-interface\" rel=\"nofollow\">Command Line Interface</a> for more information.</p>\n<h2>Command Line API</h2>\n<p>RFVis offers a command line tool to either generate SVG files directly from\nyour input data (<code>rfvis cli &lt;data&gt;</code>) or to spin up a web-based GUI for a more\ninteractive analysis (<code>rfvis gui &lt;data&gt;</code>).</p>\n<p>To see all available commands run:</p>\n<pre><code>$ rfvis --help\nUsage: rfvis [OPTIONS] COMMAND [ARGS]...\n\n  A tool for visualizing the structure and performance of Random Forests\n\nOptions:\n  --version  Show the version and exit.\n  --help     Show this message and exit.\n\nCommands:\n  cli  Command line interface to generate SVGs.\n  gui  Web-based graphical user interface.\n</code></pre>\n<h3>Graphical User Interface</h3>\n<p>To interactively analyze your forest with the web-based GUI run:</p>\n<pre><code>$ rfvis gui /path/to/data\n * Running on http://127.0.0.1:8080/ (Press CTRL+C to quit)\n</code></pre>\n<p>You can now open up your browser at <a href=\"http://localhost:8080\" rel=\"nofollow\">http://localhost:8080</a> to see something like this:</p>\n<p><img alt=\"Tree\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/74db65b32dc1dad369c7ed2975466f9000f0c80d/696d616765732f73637265656e73686f742e706e67\"></p>\n<h3>Command Line Interface</h3>\n<p>To use the Command Line Interface (CLI) you need to have\n<a href=\"https://nodejs.org/en/download/\" rel=\"nofollow\">Node.js</a> v8+ installed on your system. This\nis a technical limitation due to the fact that the rendering is written in\nJavascript. You do not need to install any other package though, the CLI\nintegrates into the command line tool you already installed via pip:</p>\n<pre><code>$ rfvis cli /path/to/data\n&gt;&gt; Exported \"/dev/random-forest-visualization/tree-0.svg\"\n&gt;&gt; Exported \"/dev/random-forest-visualization/tree-1.svg\"\n&gt;&gt; Exported \"/dev/random-forest-visualization/tree-2.svg\"\n&gt;&gt; Exported \"/dev/random-forest-visualization/tree-3.svg\"\n...\n</code></pre>\n<p>Get a full list of available options with <code>--help</code>:</p>\n<pre><code>$ rfvis cli --help\nUsage: rfvis cli [OPTIONS] FOREST_JSON\n\n  Web-based graphical user interface.\n\n  As Python is unable to render React components, we make a subprocess call to a small\n  Node.js application which will do the rendering and also store the created SVG\n  files. This command requires that Node.js is installed on your system!\n\n  FOREST_JSON: Path to the JSON file that contains the forest's data.\n\nOptions:\n  -o, --out PATH                  Output path of the SVG files.  [default: (current\n                                  working directory)]\n  -w, --width INTEGER             Width of the SVG.  [default: 800]\n  -h, --height INTEGER            Height of the SVG.  [default: 800]\n  --trunk-length INTEGER          Length of the trunk which influences the overall tree\n                                  size.  [default: 100]\n  --display-depth INTEGER         Maximum depth of the tree rendering. Cut of leaves are\n                                  visualized as pie chart consolidation nodes.\n  --branch-color [Impurity]       Coloring of the branches.  [default: Impurity]\n  --leaf-color [Impurity|Best Class]\n                                  Coloring of the leaves.  [default: Impurity]\n  --help                          Show this message and exit.\n</code></pre>\n<h3>Input Data</h3>\n<p>The data for the Command Line API must be available on your filesystem as a JSON file\nfor the forest and additionally one CSV file per tree. Both data formats will\nbe extended with properties in the future, this is just the minimal set.</p>\n<p>You can find a working example under <code>examples/PolSAR</code>.</p>\n<h4>Forest JSON</h4>\n<p>The main <code>forest.json</code> holds all information about the ensemble model:</p>\n<ul>\n<li><strong>name</strong> (string): Name of your forest, will be displayed in the GUI</li>\n<li><strong>error</strong> (float): The error (e.g. the out-of-bag or validation error) of the\nentire ensemble model, will be displayed in the GUI</li>\n<li><strong>n_samples</strong> (int): Number of samples the model was trained on</li>\n<li><strong>correlationMatrix</strong> (float[][]): Correlation between the single trees within\nthe model. Has dimensions <code>NxN</code> where <code>N</code> is the number of trees.\nThis will be used to compute the forest map.</li>\n<li><strong>classes</strong>: The output classes\n<ul>\n<li><strong>name</strong> (string): Name of the class</li>\n<li><strong>color</strong> (int, int, int): RGB values in the range of 0-255 which\ndetermine the color of the class in the visualization</li>\n</ul>\n</li>\n<li><strong>trees</strong>: The trees in the forest\n<ul>\n<li><strong>error</strong> (float): The error (again could be either the out-of-bag or\nvalidation error) of the single tree</li>\n<li><strong>data</strong> (string): Relative path to the CSV file containing the tree data</li>\n</ul>\n</li>\n</ul>\n<h4>Tree CSV</h4>\n<p>For each tree specified in the <code>forest.json</code> RFVis expects a CSV file where one\nentry represents one node in the tree. An entry has the following format:</p>\n<ul>\n<li><strong>id</strong> (int): ID of the node</li>\n<li><strong>depth</strong> (int) Depth of the node in the tree (starting at <code>0</code>)</li>\n<li><strong>n_node_samples</strong> (int): Number of training samples reaching the node</li>\n<li><strong>impurity</strong> (float): Impurity of the node (<code>0</code>-<code>1</code>)</li>\n<li><strong>value</strong> (int[]): Class distribution within the node, i.e. every entry\nrepresents the amount of samples within the node that respond to a specific\nclass. The index corresponds to the indices in <code>forest.classes</code>.</li>\n</ul>\n<h2>Python API</h2>\n<p>RFVis also offers a Python API which works directly on a scikit-learn RandomForestClassifier.\nYou can find a working example under <code>examples/scikit_learn.py</code>.</p>\n<p>The function <code>rfvis.gui()</code> visualizes a fitted RandomForestClassifier in a web based graphical user interface.\nThe server runs in a separate process and is available at <code>http://localhost:&lt;port&gt;</code>.</p>\n<pre><span class=\"n\">gui</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">target</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">class_names</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">class_colors</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">port</span><span class=\"o\">=</span><span class=\"mi\">8080</span><span class=\"p\">)</span>\n</pre>\n<p>Args:</p>\n<ul>\n<li><strong>model</strong> (<a href=\"https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestClassifier.html\" rel=\"nofollow\">sklearn.ensemble.RandomForestClassifier</a>):\nThe model to visualize.</li>\n<li><strong>data</strong> (array-like, shape=(n_samples, n_features)): The training input samples that were used to fit the model.\nUsed to compute the out-of-bag error and correlation of the individual trees.\nIf not provided, the forest view will have no significance.</li>\n<li><strong>target</strong> (array-like, shape=n_samples): The target values (class labels) that were used to fit the model.\nUsed to compute the out-of-bag error and correlation of the individual trees.\nIf not provided, the forest view will have no significance.</li>\n<li><strong>name</strong> (str): Optional name of the model which will be displayed in the frontend.</li>\n<li><strong>class_names</strong> (List[str]): Optional list of names of the target classes</li>\n<li><strong>class_colors</strong> (List[str]): Optional list of browser interpretable colors for the target classes.\nSee <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/color_value\" rel=\"nofollow\">https://developer.mozilla.org/en-US/docs/Web/CSS/color_value</a>.</li>\n<li><strong>port</strong> (int): Port on which the frontend will run on. Defaults to 8080.</li>\n</ul>\n<p>Returns:</p>\n<ul>\n<li><strong>process</strong> (multiprocessing.Process): Subprocess that runs the server. Can be terminated with\n<a href=\"https://docs.python.org/3/library/multiprocessing.html#multiprocessing.Process.terminate\" rel=\"nofollow\">process.terminate()</a>.</li>\n</ul>\n<h2>Development</h2>\n<p>The repository contains a <code>Pipfile</code> for conveniently creating a virtualenv\nfor development. Just install <a href=\"https://pipenv.readthedocs.io/en/latest/\" rel=\"nofollow\">pipenv</a>\nand run:</p>\n<pre><code>$ pipenv install\n</code></pre>\n<p>You can now e.g. start the server on the default port 8080 via:</p>\n<pre><code>$ pipenv run rfvis gui &lt;path_to_forest_json&gt;\n</code></pre>\n<p>Note that you need to build the frontend bundle first before you can\nactually see the application working on <code>http://localhost:8080</code>.</p>\n<p>To build the frontend you need Node.js installed. First install all\ndev-dependencies by running the following\nfrom within the <code>./rfvis/client</code> directory:</p>\n<pre><code>$ npm install\n</code></pre>\n<p>Now you can build a production-ready bundle via:</p>\n<pre><code>$ npm run build\n</code></pre>\n<p>If you have the Python server running you should now be able to see the\napplication at <code>http://localhost:8080</code>.</p>\n<p>For developing on the frontend more conveniently run:</p>\n<pre><code>$ npm start\n</code></pre>\n<p>To start a development server with hot reloading at <code>http://localhost:3000</code>.</p>\n\n          </div>"}, "last_serial": 4639218, "releases": {"0.2.0": [{"comment_text": "", "digests": {"md5": "98e2b96473e35d4f4e83b87586393f75", "sha256": "bdf5115880420d774c0ab308c699c0adbe7f84f8892f354904f77d3bc6518207"}, "downloads": -1, "filename": "rfvis-0.2.0.tar.gz", "has_sig": false, "md5_digest": "98e2b96473e35d4f4e83b87586393f75", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3257908, "upload_time": "2018-12-11T07:14:22", "upload_time_iso_8601": "2018-12-11T07:14:22.385266Z", "url": "https://files.pythonhosted.org/packages/8e/f6/50300ca2542f23a42c304a315c32d018d456838a5912441c6bb791bfdd4c/rfvis-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "be91ef8f618e2254051673bb2ba215f9", "sha256": "3e2aec0bfede864bd4924a33205e69a7ed2f37bba53e926de46bbe6c9d58993e"}, "downloads": -1, "filename": "rfvis-0.2.1.tar.gz", "has_sig": false, "md5_digest": "be91ef8f618e2254051673bb2ba215f9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2342888, "upload_time": "2018-12-12T23:30:40", "upload_time_iso_8601": "2018-12-12T23:30:40.365085Z", "url": "https://files.pythonhosted.org/packages/60/73/252a95df19392f27bc0bcc2a1793b44a0513afd1970d7695b66788cad1f2/rfvis-0.2.1.tar.gz", "yanked": false}], "0.2.1a1": [{"comment_text": "", "digests": {"md5": "c8e1cd776fd01946a6e6b8bb0e46be07", "sha256": "07c966d6ab6e25bdb85f05d1e213605945e9cbb3ef6c19a10bc6891a4304cdcd"}, "downloads": -1, "filename": "rfvis-0.2.1a1.tar.gz", "has_sig": false, "md5_digest": "c8e1cd776fd01946a6e6b8bb0e46be07", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3259213, "upload_time": "2018-12-12T12:18:31", "upload_time_iso_8601": "2018-12-12T12:18:31.636796Z", "url": "https://files.pythonhosted.org/packages/bd/70/b72d5b5c345f22d56475904cfca2dae9d6ce8ade8b3ced711d6728989f39/rfvis-0.2.1a1.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "c66c07f03e7c35206825f06d4cb77609", "sha256": "58fad151e5d6e8b5e0df9b719a485e9e4f7399dbc7da0f9e113064e09524f183"}, "downloads": -1, "filename": "rfvis-0.3.0.tar.gz", "has_sig": false, "md5_digest": "c66c07f03e7c35206825f06d4cb77609", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2077481, "upload_time": "2018-12-27T22:57:37", "upload_time_iso_8601": "2018-12-27T22:57:37.141389Z", "url": "https://files.pythonhosted.org/packages/f6/f7/9506f3442bf5946a6381b79304be8426845057ee26a66616c86330e0c45b/rfvis-0.3.0.tar.gz", "yanked": false}], "0.3.0a1": [{"comment_text": "", "digests": {"md5": "65d779d9e22de07f5ac59cfeccadfc03", "sha256": "b2f2af5e95a3b90918dee0e14ad5251ce4abbf2852849f3382cf823dd64e57b2"}, "downloads": -1, "filename": "rfvis-0.3.0a1.tar.gz", "has_sig": false, "md5_digest": "65d779d9e22de07f5ac59cfeccadfc03", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2077564, "upload_time": "2018-12-27T22:35:29", "upload_time_iso_8601": "2018-12-27T22:35:29.582395Z", "url": "https://files.pythonhosted.org/packages/12/60/4c09083868e6f4370c607d1e826a361ec1d21dfae0c7a046d7df3d3fc5ff/rfvis-0.3.0a1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c66c07f03e7c35206825f06d4cb77609", "sha256": "58fad151e5d6e8b5e0df9b719a485e9e4f7399dbc7da0f9e113064e09524f183"}, "downloads": -1, "filename": "rfvis-0.3.0.tar.gz", "has_sig": false, "md5_digest": "c66c07f03e7c35206825f06d4cb77609", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2077481, "upload_time": "2018-12-27T22:57:37", "upload_time_iso_8601": "2018-12-27T22:57:37.141389Z", "url": "https://files.pythonhosted.org/packages/f6/f7/9506f3442bf5946a6381b79304be8426845057ee26a66616c86330e0c45b/rfvis-0.3.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:03:05 2020"}