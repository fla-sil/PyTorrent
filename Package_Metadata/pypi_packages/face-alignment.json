{"info": {"author": "Adrian Bulat", "author_email": "adrian.bulat@nottingham.ac.uk", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "License :: OSI Approved :: BSD License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6"], "description": "# Face Recognition\n\nDetect facial landmarks from Python using the world's most accurate face alignment network, capable of detecting points in both 2D and 3D coordinates.\n\nBuild using [FAN](https://www.adrianbulat.com)'s state-of-the-art deep learning based face alignment method. \n\n<p align=\"center\"><img src=\"docs/images/face-alignment-adrian.gif\" /></p>\n\n**Note:** The lua version is available [here](https://github.com/1adrianb/2D-and-3D-face-alignment).\n\nFor numerical evaluations it is highly recommended to use the lua version which uses indentical models with the ones evaluated in the paper. More models will be added soon.\n\n[![License](https://img.shields.io/badge/License-BSD%203--Clause-blue.svg)](https://opensource.org/licenses/BSD-3-Clause)  [![Build Status](https://travis-ci.com/1adrianb/face-alignment.svg?branch=master)](https://travis-ci.com/1adrianb/face-alignment) [![Anaconda-Server Badge](https://anaconda.org/1adrianb/face_alignment/badges/version.svg)](https://anaconda.org/1adrianb/face_alignment)\n\n## Features\n\n#### Detect 2D facial landmarks in pictures\n\n<p align='center'>\n<img src='docs/images/2dlandmarks.png' title='3D-FAN-Full example' style='max-width:600px'></img>\n</p>\n\n```python\nimport face_alignment\nfrom skimage import io\n\nfa = face_alignment.FaceAlignment(face_alignment.LandmarksType._2D, flip_input=False)\n\ninput = io.imread('../test/assets/aflw-test.jpg')\npreds = fa.get_landmarks(input)\n```\n\n#### Detect 3D facial landmarks in pictures\n\n<p align='center'>\n<img src='https://www.adrianbulat.com/images/image-z-examples.png' title='3D-FAN-Full example' style='max-width:600px'></img>\n</p>\n\n```python\nimport face_alignment\nfrom skimage import io\n\nfa = face_alignment.FaceAlignment(face_alignment.LandmarksType._3D, flip_input=False)\n\ninput = io.imread('../test/assets/aflw-test.jpg')\npreds = fa.get_landmarks(input)\n```\n\n#### Process an entire directory in one go\n\n```python\nimport face_alignment\nfrom skimage import io\n\nfa = face_alignment.FaceAlignment(face_alignment.LandmarksType._2D, flip_input=False)\n\npreds = fa.get_landmarks_from_directory('../test/assets/')\n```\n\n#### Detect the landmarks using a specific face detector.\n\nBy default the package will use the SFD face detector. However the users can alternatively use dlib or pre-existing ground truth bounding boxes.\n\n```python\nimport face_alignment\n\n# sfd for SFD, dlib for Dlib and folder for existing bounding boxes.\nfa = face_alignment.FaceAlignment(face_alignment.LandmarksType._2D, face_detector='sfd')\n```\n\n#### Running on CPU/GPU\nIn order to specify the device (GPU or CPU) on which the code will run one can explicitly pass the device flag:\n\n```python\nimport face_alignment\n\n# cuda for CUDA\nfa = face_alignment.FaceAlignment(face_alignment.LandmarksType._2D, device='cpu')\n```\n\nPlease also see the ``examples`` folder\n\n## Installation\n\n### Requirements\n\n* Python 3.5+ or Python 2.7 (it may work with other versions too)\n* Linux, Windows or macOS\n* pytorch (>=0.4)\n\nWhile not required, for optimal performance(especially for the detector) it is **highly** recommended to run the code using a CUDA enabled GPU.\n\n### Binaries\n\n```bash\nconda install -c 1adrianb face_alignment\n```\n\n### From source\n\n Install pytorch and pytorch dependencies. Instructions taken from [pytorch readme](https://github.com/pytorch/pytorch). For a more updated version check the framework github page.\n\n On Linux\n```bash\nexport CMAKE_PREFIX_PATH=\"$(dirname $(which conda))/../\" # [anaconda root directory]\n\n# Install basic dependencies\nconda install numpy pyyaml mkl setuptools cmake gcc cffi\n\n# Add LAPACK support for the GPU\nconda install -c soumith magma-cuda80 # or magma-cuda75 if CUDA 7.5\n```\n\nOn OSX\n```bash\nexport CMAKE_PREFIX_PATH=[anaconda root directory]\nconda install numpy pyyaml setuptools cmake cffi\n```\n#### Get the PyTorch source\n```bash\ngit clone --recursive https://github.com/pytorch/pytorch\n```\n\n#### Install PyTorch\nOn Linux\n```bash\npython setup.py install\n```\n\nOn OSX\n```bash\nMACOSX_DEPLOYMENT_TARGET=10.9 CC=clang CXX=clang++ python setup.py install\n```\n\n\n#### Get the Face Alignment source code\n```bash\ngit clone https://github.com/1adrianb/face-alignment\n```\n#### Install the Face Alignment lib\n```bash\npip install -r requirements.txt\npython setup.py install\n```\n\n### Docker image\n\nA Dockerfile is provided to build images with cuda support and cudnn v5. For more instructions about running and building a docker image check the orginal Docker documentation.\n```\ndocker build -t face-alignment .\n```\n\n## How does it work?\n\nWhile here the work is presented as a black-box, if you want to know more about the intrisecs of the method please check the original paper either on arxiv or my [webpage](https://www.adrianbulat.com).\n\n## Contributions\n\nAll contributions are welcomed. If you encounter any issue (including examples of images where it fails) feel free to open an issue.\n\n## Citation\n\n```\n@inproceedings{bulat2017far,\n  title={How far are we from solving the 2D \\& 3D Face Alignment problem? (and a dataset of 230,000 3D facial landmarks)},\n  author={Bulat, Adrian and Tzimiropoulos, Georgios},\n  booktitle={International Conference on Computer Vision},\n  year={2017}\n}\n```\n\nFor citing dlib, pytorch or any other packages used here please check the original page of their respective authors.\n\n## Acknowledgements\n\n* To the [pytorch](http://pytorch.org/) team for providing such an awesome deeplearning framework\n* To [my supervisor](http://www.cs.nott.ac.uk/~pszyt/) for his patience and suggestions.\n* To all other python developers that made available the rest of the packages used in this repository.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/1adrianb/face-alignment", "keywords": "", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "face-alignment", "package_url": "https://pypi.org/project/face-alignment/", "platform": "", "project_url": "https://pypi.org/project/face-alignment/", "project_urls": {"Homepage": "https://github.com/1adrianb/face-alignment"}, "release_url": "https://pypi.org/project/face-alignment/1.0.0/", "requires_dist": ["torch", "numpy", "scipy (>=0.17)", "scikit-image", "opencv-python", "tqdm", "enum34; python_version < \"3.4\""], "requires_python": "", "summary": "Detector 2D or 3D face landmarks from Python", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Face Recognition</h1>\n<p>Detect facial landmarks from Python using the world's most accurate face alignment network, capable of detecting points in both 2D and 3D coordinates.</p>\n<p>Build using <a href=\"https://www.adrianbulat.com\" rel=\"nofollow\">FAN</a>'s state-of-the-art deep learning based face alignment method.</p>\n<p align=\"center\"><img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/00d81eec4f5dad7ab2deb922cc3ace9d95ca8317/646f63732f696d616765732f666163652d616c69676e6d656e742d61647269616e2e676966\"></p>\n<p><strong>Note:</strong> The lua version is available <a href=\"https://github.com/1adrianb/2D-and-3D-face-alignment\" rel=\"nofollow\">here</a>.</p>\n<p>For numerical evaluations it is highly recommended to use the lua version which uses indentical models with the ones evaluated in the paper. More models will be added soon.</p>\n<p><a href=\"https://opensource.org/licenses/BSD-3-Clause\" rel=\"nofollow\"><img alt=\"License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/110fcca60a43a8ea37b1a5bda616e639325f2f30/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d425344253230332d2d436c617573652d626c75652e737667\"></a>  <a href=\"https://travis-ci.com/1adrianb/face-alignment\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d95802a78441b828379ac87af360b34d96ef9d36/68747470733a2f2f7472617669732d63692e636f6d2f3161647269616e622f666163652d616c69676e6d656e742e7376673f6272616e63683d6d6173746572\"></a> <a href=\"https://anaconda.org/1adrianb/face_alignment\" rel=\"nofollow\"><img alt=\"Anaconda-Server Badge\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ee1972c8a31f98016a306ce927aa905bcf4d8628/68747470733a2f2f616e61636f6e64612e6f72672f3161647269616e622f666163655f616c69676e6d656e742f6261646765732f76657273696f6e2e737667\"></a></p>\n<h2>Features</h2>\n<h4>Detect 2D facial landmarks in pictures</h4>\n<p align=\"center\">\n<img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/cf800afeade6fd4fc98256fb69e8346929b3d012/646f63732f696d616765732f32646c616e646d61726b732e706e67\">\n</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">face_alignment</span>\n<span class=\"kn\">from</span> <span class=\"nn\">skimage</span> <span class=\"kn\">import</span> <span class=\"n\">io</span>\n\n<span class=\"n\">fa</span> <span class=\"o\">=</span> <span class=\"n\">face_alignment</span><span class=\"o\">.</span><span class=\"n\">FaceAlignment</span><span class=\"p\">(</span><span class=\"n\">face_alignment</span><span class=\"o\">.</span><span class=\"n\">LandmarksType</span><span class=\"o\">.</span><span class=\"n\">_2D</span><span class=\"p\">,</span> <span class=\"n\">flip_input</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n\n<span class=\"nb\">input</span> <span class=\"o\">=</span> <span class=\"n\">io</span><span class=\"o\">.</span><span class=\"n\">imread</span><span class=\"p\">(</span><span class=\"s1\">'../test/assets/aflw-test.jpg'</span><span class=\"p\">)</span>\n<span class=\"n\">preds</span> <span class=\"o\">=</span> <span class=\"n\">fa</span><span class=\"o\">.</span><span class=\"n\">get_landmarks</span><span class=\"p\">(</span><span class=\"nb\">input</span><span class=\"p\">)</span>\n</pre>\n<h4>Detect 3D facial landmarks in pictures</h4>\n<p align=\"center\">\n<img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/98fbc1abcae102d24551b601a6d9ebce2f640211/68747470733a2f2f7777772e61647269616e62756c61742e636f6d2f696d616765732f696d6167652d7a2d6578616d706c65732e706e67\">\n</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">face_alignment</span>\n<span class=\"kn\">from</span> <span class=\"nn\">skimage</span> <span class=\"kn\">import</span> <span class=\"n\">io</span>\n\n<span class=\"n\">fa</span> <span class=\"o\">=</span> <span class=\"n\">face_alignment</span><span class=\"o\">.</span><span class=\"n\">FaceAlignment</span><span class=\"p\">(</span><span class=\"n\">face_alignment</span><span class=\"o\">.</span><span class=\"n\">LandmarksType</span><span class=\"o\">.</span><span class=\"n\">_3D</span><span class=\"p\">,</span> <span class=\"n\">flip_input</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n\n<span class=\"nb\">input</span> <span class=\"o\">=</span> <span class=\"n\">io</span><span class=\"o\">.</span><span class=\"n\">imread</span><span class=\"p\">(</span><span class=\"s1\">'../test/assets/aflw-test.jpg'</span><span class=\"p\">)</span>\n<span class=\"n\">preds</span> <span class=\"o\">=</span> <span class=\"n\">fa</span><span class=\"o\">.</span><span class=\"n\">get_landmarks</span><span class=\"p\">(</span><span class=\"nb\">input</span><span class=\"p\">)</span>\n</pre>\n<h4>Process an entire directory in one go</h4>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">face_alignment</span>\n<span class=\"kn\">from</span> <span class=\"nn\">skimage</span> <span class=\"kn\">import</span> <span class=\"n\">io</span>\n\n<span class=\"n\">fa</span> <span class=\"o\">=</span> <span class=\"n\">face_alignment</span><span class=\"o\">.</span><span class=\"n\">FaceAlignment</span><span class=\"p\">(</span><span class=\"n\">face_alignment</span><span class=\"o\">.</span><span class=\"n\">LandmarksType</span><span class=\"o\">.</span><span class=\"n\">_2D</span><span class=\"p\">,</span> <span class=\"n\">flip_input</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n\n<span class=\"n\">preds</span> <span class=\"o\">=</span> <span class=\"n\">fa</span><span class=\"o\">.</span><span class=\"n\">get_landmarks_from_directory</span><span class=\"p\">(</span><span class=\"s1\">'../test/assets/'</span><span class=\"p\">)</span>\n</pre>\n<h4>Detect the landmarks using a specific face detector.</h4>\n<p>By default the package will use the SFD face detector. However the users can alternatively use dlib or pre-existing ground truth bounding boxes.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">face_alignment</span>\n\n<span class=\"c1\"># sfd for SFD, dlib for Dlib and folder for existing bounding boxes.</span>\n<span class=\"n\">fa</span> <span class=\"o\">=</span> <span class=\"n\">face_alignment</span><span class=\"o\">.</span><span class=\"n\">FaceAlignment</span><span class=\"p\">(</span><span class=\"n\">face_alignment</span><span class=\"o\">.</span><span class=\"n\">LandmarksType</span><span class=\"o\">.</span><span class=\"n\">_2D</span><span class=\"p\">,</span> <span class=\"n\">face_detector</span><span class=\"o\">=</span><span class=\"s1\">'sfd'</span><span class=\"p\">)</span>\n</pre>\n<h4>Running on CPU/GPU</h4>\n<p>In order to specify the device (GPU or CPU) on which the code will run one can explicitly pass the device flag:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">face_alignment</span>\n\n<span class=\"c1\"># cuda for CUDA</span>\n<span class=\"n\">fa</span> <span class=\"o\">=</span> <span class=\"n\">face_alignment</span><span class=\"o\">.</span><span class=\"n\">FaceAlignment</span><span class=\"p\">(</span><span class=\"n\">face_alignment</span><span class=\"o\">.</span><span class=\"n\">LandmarksType</span><span class=\"o\">.</span><span class=\"n\">_2D</span><span class=\"p\">,</span> <span class=\"n\">device</span><span class=\"o\">=</span><span class=\"s1\">'cpu'</span><span class=\"p\">)</span>\n</pre>\n<p>Please also see the <code>examples</code> folder</p>\n<h2>Installation</h2>\n<h3>Requirements</h3>\n<ul>\n<li>Python 3.5+ or Python 2.7 (it may work with other versions too)</li>\n<li>Linux, Windows or macOS</li>\n<li>pytorch (&gt;=0.4)</li>\n</ul>\n<p>While not required, for optimal performance(especially for the detector) it is <strong>highly</strong> recommended to run the code using a CUDA enabled GPU.</p>\n<h3>Binaries</h3>\n<pre>conda install -c 1adrianb face_alignment\n</pre>\n<h3>From source</h3>\n<p>Install pytorch and pytorch dependencies. Instructions taken from <a href=\"https://github.com/pytorch/pytorch\" rel=\"nofollow\">pytorch readme</a>. For a more updated version check the framework github page.</p>\n<p>On Linux</p>\n<pre><span class=\"nb\">export</span> <span class=\"nv\">CMAKE_PREFIX_PATH</span><span class=\"o\">=</span><span class=\"s2\">\"</span><span class=\"k\">$(</span>dirname <span class=\"k\">$(</span>which conda<span class=\"k\">))</span><span class=\"s2\">/../\"</span> <span class=\"c1\"># [anaconda root directory]</span>\n\n<span class=\"c1\"># Install basic dependencies</span>\nconda install numpy pyyaml mkl setuptools cmake gcc cffi\n\n<span class=\"c1\"># Add LAPACK support for the GPU</span>\nconda install -c soumith magma-cuda80 <span class=\"c1\"># or magma-cuda75 if CUDA 7.5</span>\n</pre>\n<p>On OSX</p>\n<pre><span class=\"nb\">export</span> <span class=\"nv\">CMAKE_PREFIX_PATH</span><span class=\"o\">=[</span>anaconda root directory<span class=\"o\">]</span>\nconda install numpy pyyaml setuptools cmake cffi\n</pre>\n<h4>Get the PyTorch source</h4>\n<pre>git clone --recursive https://github.com/pytorch/pytorch\n</pre>\n<h4>Install PyTorch</h4>\n<p>On Linux</p>\n<pre>python setup.py install\n</pre>\n<p>On OSX</p>\n<pre><span class=\"nv\">MACOSX_DEPLOYMENT_TARGET</span><span class=\"o\">=</span><span class=\"m\">10</span>.9 <span class=\"nv\">CC</span><span class=\"o\">=</span>clang <span class=\"nv\">CXX</span><span class=\"o\">=</span>clang++ python setup.py install\n</pre>\n<h4>Get the Face Alignment source code</h4>\n<pre>git clone https://github.com/1adrianb/face-alignment\n</pre>\n<h4>Install the Face Alignment lib</h4>\n<pre>pip install -r requirements.txt\npython setup.py install\n</pre>\n<h3>Docker image</h3>\n<p>A Dockerfile is provided to build images with cuda support and cudnn v5. For more instructions about running and building a docker image check the orginal Docker documentation.</p>\n<pre><code>docker build -t face-alignment .\n</code></pre>\n<h2>How does it work?</h2>\n<p>While here the work is presented as a black-box, if you want to know more about the intrisecs of the method please check the original paper either on arxiv or my <a href=\"https://www.adrianbulat.com\" rel=\"nofollow\">webpage</a>.</p>\n<h2>Contributions</h2>\n<p>All contributions are welcomed. If you encounter any issue (including examples of images where it fails) feel free to open an issue.</p>\n<h2>Citation</h2>\n<pre><code>@inproceedings{bulat2017far,\n  title={How far are we from solving the 2D \\&amp; 3D Face Alignment problem? (and a dataset of 230,000 3D facial landmarks)},\n  author={Bulat, Adrian and Tzimiropoulos, Georgios},\n  booktitle={International Conference on Computer Vision},\n  year={2017}\n}\n</code></pre>\n<p>For citing dlib, pytorch or any other packages used here please check the original page of their respective authors.</p>\n<h2>Acknowledgements</h2>\n<ul>\n<li>To the <a href=\"http://pytorch.org/\" rel=\"nofollow\">pytorch</a> team for providing such an awesome deeplearning framework</li>\n<li>To <a href=\"http://www.cs.nott.ac.uk/%7Epszyt/\" rel=\"nofollow\">my supervisor</a> for his patience and suggestions.</li>\n<li>To all other python developers that made available the rest of the packages used in this repository.</li>\n</ul>\n\n          </div>"}, "last_serial": 4617116, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "1df059091ab570736584c3f49855fe9a", "sha256": "1300d8e701f73691435024e86089151b1e5f6e1070c5d80fad7e0aca12b6a88e"}, "downloads": -1, "filename": "face_alignment-1.0.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "1df059091ab570736584c3f49855fe9a", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 22034, "upload_time": "2018-10-12T10:55:53", "upload_time_iso_8601": "2018-10-12T10:55:53.619980Z", "url": "https://files.pythonhosted.org/packages/20/86/26baa3888c254c9ce284702a1041cf9a533ad91c873b06f74d3cfa23aff7/face_alignment-1.0.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4e2ff1c1390660f4d97d19b074a57e71", "sha256": "dd5dfc4b3d4063ad4d151edd3e18dce67ea655134b2474b94faff5a62485a029"}, "downloads": -1, "filename": "face_alignment-1.0.0-py3.6.egg", "has_sig": false, "md5_digest": "4e2ff1c1390660f4d97d19b074a57e71", "packagetype": "bdist_egg", "python_version": "3.6", "requires_python": null, "size": 47171, "upload_time": "2018-12-19T15:17:40", "upload_time_iso_8601": "2018-12-19T15:17:40.136444Z", "url": "https://files.pythonhosted.org/packages/1f/f1/3b1b6a38c4dbefa811d501f4fbabb05d2b3f88f8ad3c373912f278befc3d/face_alignment-1.0.0-py3.6.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "9729621394fa609a2b0b17d4b237d098", "sha256": "558c2b688c6ab40580da2e55f7d17911acd787aa6af3fafe5f94549a9600e02e"}, "downloads": -1, "filename": "face_alignment-1.0.0.tar.gz", "has_sig": false, "md5_digest": "9729621394fa609a2b0b17d4b237d098", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20729, "upload_time": "2018-10-12T10:55:58", "upload_time_iso_8601": "2018-10-12T10:55:58.854394Z", "url": "https://files.pythonhosted.org/packages/da/38/d429ca0f398195d7f81090db8d7aefb4257a1cbb79405ebf7013958d62b6/face_alignment-1.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "1df059091ab570736584c3f49855fe9a", "sha256": "1300d8e701f73691435024e86089151b1e5f6e1070c5d80fad7e0aca12b6a88e"}, "downloads": -1, "filename": "face_alignment-1.0.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "1df059091ab570736584c3f49855fe9a", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 22034, "upload_time": "2018-10-12T10:55:53", "upload_time_iso_8601": "2018-10-12T10:55:53.619980Z", "url": "https://files.pythonhosted.org/packages/20/86/26baa3888c254c9ce284702a1041cf9a533ad91c873b06f74d3cfa23aff7/face_alignment-1.0.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4e2ff1c1390660f4d97d19b074a57e71", "sha256": "dd5dfc4b3d4063ad4d151edd3e18dce67ea655134b2474b94faff5a62485a029"}, "downloads": -1, "filename": "face_alignment-1.0.0-py3.6.egg", "has_sig": false, "md5_digest": "4e2ff1c1390660f4d97d19b074a57e71", "packagetype": "bdist_egg", "python_version": "3.6", "requires_python": null, "size": 47171, "upload_time": "2018-12-19T15:17:40", "upload_time_iso_8601": "2018-12-19T15:17:40.136444Z", "url": "https://files.pythonhosted.org/packages/1f/f1/3b1b6a38c4dbefa811d501f4fbabb05d2b3f88f8ad3c373912f278befc3d/face_alignment-1.0.0-py3.6.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "9729621394fa609a2b0b17d4b237d098", "sha256": "558c2b688c6ab40580da2e55f7d17911acd787aa6af3fafe5f94549a9600e02e"}, "downloads": -1, "filename": "face_alignment-1.0.0.tar.gz", "has_sig": false, "md5_digest": "9729621394fa609a2b0b17d4b237d098", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20729, "upload_time": "2018-10-12T10:55:58", "upload_time_iso_8601": "2018-10-12T10:55:58.854394Z", "url": "https://files.pythonhosted.org/packages/da/38/d429ca0f398195d7f81090db8d7aefb4257a1cbb79405ebf7013958d62b6/face_alignment-1.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:44:10 2020"}