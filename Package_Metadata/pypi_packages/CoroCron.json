{"info": {"author": "Flying Kiwi", "author_email": "github@flyingkiwibird.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "Programming Language :: Python", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Topic :: Utilities"], "description": "# CoroCron\n\nCoroCron is a cron like scheduler for python functions.  It uses asyncio to asynchronously start jobs at the specified schedule.  The jobs are then put on the event loop when the schedule specified is met.\n\n## Usage\n\nYou can find more usage examples in the examples directory\n\n### Step 1: Create the base cron object\n```python\nimport CoroCron\nCron = CoroCron.Cron()\n```\nNote: By default Cron uses the local timezone but it can be modified to use UTC by initializing like so: ```CoroCron.Cron(True)```\n\n### Step 2: Add jobs\n```python\nCron.Job().Days().Hours().Minutes().Do(function, args)\n```\n\n#### Job options\n* Any option defaults to all of the given period \n    *  Like * in cron\n    * e.g. `.Days()` would run every day in a given month\n* Otherwise a list can be specified for which days\n    * Any iterable or single numeric (`.Days(4)`) can also be used.\n    * e.g. `.Hours([0,2,4])` would run at 12am, 2am, and 4am\n* Any period *after* the initial setting will default to the first if not specified\n    * For days: 1st day of the month\n    * For hours: 0th hour (12am)\n    * For minutes: 0th minute\n    * e.g. `Cron.Job().Days().Do(something)` = something will be done every day at 12:00am\n    * e.g. `Cron.Job().Months().Minutes([15,30]).Do(something)` = something will be done the 1st day of the month at 12:15am and 12:30am\n* Periods\n    * `Months()` - Months of the year\n    * `Days()` - Days of the month\n    * `Weekdays()` - Days of the week (note: you can either specify days XOR weekdays, not both)\n        * Monday = 0, Sunday = 6.  An enum is also provided: `CoroCron.Weekdays`\n    * `Hours()` - Hours of the day\n    * `Minutes()` - Minutes in the hour\n* `Do(function, args=())`\n    * This is the coroutine that you want to execute when the time is right\n    * The function should be passed by reference (i.e. without parenthesis at the end)\n    * You can pass args as a tuple in the 2nd parameter\n\n### Step 3: Start the Cron\n\n```python\nCron.Start(blocking = False)\n```\nBy default `Start()` returns a future which can be awaited in an async funtion or added to a loop with ensure_future.\nIf you set blocking to `True` it will instead be a blocking call using ```loop.run_forever()```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/FlyingKiwiBird/AioCron", "keywords": "Cron asyncio schedule", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "CoroCron", "package_url": "https://pypi.org/project/CoroCron/", "platform": "", "project_url": "https://pypi.org/project/CoroCron/", "project_urls": {"Homepage": "https://github.com/FlyingKiwiBird/AioCron"}, "release_url": "https://pypi.org/project/CoroCron/0.1.5/", "requires_dist": null, "requires_python": "", "summary": "A pythonic cron using asyncio", "version": "0.1.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>CoroCron</h1>\n<p>CoroCron is a cron like scheduler for python functions.  It uses asyncio to asynchronously start jobs at the specified schedule.  The jobs are then put on the event loop when the schedule specified is met.</p>\n<h2>Usage</h2>\n<p>You can find more usage examples in the examples directory</p>\n<h3>Step 1: Create the base cron object</h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">CoroCron</span>\n<span class=\"n\">Cron</span> <span class=\"o\">=</span> <span class=\"n\">CoroCron</span><span class=\"o\">.</span><span class=\"n\">Cron</span><span class=\"p\">()</span>\n</pre>\n<p>Note: By default Cron uses the local timezone but it can be modified to use UTC by initializing like so: <code>CoroCron.Cron(True)</code></p>\n<h3>Step 2: Add jobs</h3>\n<pre><span class=\"n\">Cron</span><span class=\"o\">.</span><span class=\"n\">Job</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">Days</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">Hours</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">Minutes</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">Do</span><span class=\"p\">(</span><span class=\"n\">function</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"p\">)</span>\n</pre>\n<h4>Job options</h4>\n<ul>\n<li>Any option defaults to all of the given period\n<ul>\n<li>Like * in cron</li>\n<li>e.g. <code>.Days()</code> would run every day in a given month</li>\n</ul>\n</li>\n<li>Otherwise a list can be specified for which days\n<ul>\n<li>Any iterable or single numeric (<code>.Days(4)</code>) can also be used.</li>\n<li>e.g. <code>.Hours([0,2,4])</code> would run at 12am, 2am, and 4am</li>\n</ul>\n</li>\n<li>Any period <em>after</em> the initial setting will default to the first if not specified\n<ul>\n<li>For days: 1st day of the month</li>\n<li>For hours: 0th hour (12am)</li>\n<li>For minutes: 0th minute</li>\n<li>e.g. <code>Cron.Job().Days().Do(something)</code> = something will be done every day at 12:00am</li>\n<li>e.g. <code>Cron.Job().Months().Minutes([15,30]).Do(something)</code> = something will be done the 1st day of the month at 12:15am and 12:30am</li>\n</ul>\n</li>\n<li>Periods\n<ul>\n<li><code>Months()</code> - Months of the year</li>\n<li><code>Days()</code> - Days of the month</li>\n<li><code>Weekdays()</code> - Days of the week (note: you can either specify days XOR weekdays, not both)\n<ul>\n<li>Monday = 0, Sunday = 6.  An enum is also provided: <code>CoroCron.Weekdays</code></li>\n</ul>\n</li>\n<li><code>Hours()</code> - Hours of the day</li>\n<li><code>Minutes()</code> - Minutes in the hour</li>\n</ul>\n</li>\n<li><code>Do(function, args=())</code>\n<ul>\n<li>This is the coroutine that you want to execute when the time is right</li>\n<li>The function should be passed by reference (i.e. without parenthesis at the end)</li>\n<li>You can pass args as a tuple in the 2nd parameter</li>\n</ul>\n</li>\n</ul>\n<h3>Step 3: Start the Cron</h3>\n<pre><span class=\"n\">Cron</span><span class=\"o\">.</span><span class=\"n\">Start</span><span class=\"p\">(</span><span class=\"n\">blocking</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">)</span>\n</pre>\n<p>By default <code>Start()</code> returns a future which can be awaited in an async funtion or added to a loop with ensure_future.\nIf you set blocking to <code>True</code> it will instead be a blocking call using <code>loop.run_forever()</code></p>\n\n          </div>"}, "last_serial": 5870011, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "bbcd5f215ffb8df39840f98d2f18e29e", "sha256": "9a4360c40f13f58e8ad38e604ae73bdd4f353e0eb4cf7730d93ec8bba9ca6200"}, "downloads": -1, "filename": "CoroCron-0.1.0.tar.gz", "has_sig": false, "md5_digest": "bbcd5f215ffb8df39840f98d2f18e29e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3674, "upload_time": "2018-11-28T02:56:59", "upload_time_iso_8601": "2018-11-28T02:56:59.397563Z", "url": "https://files.pythonhosted.org/packages/5a/50/fe9d25919d30f863ae7fa762e01d3ed3bae03f9637470c5f67e13f3be0aa/CoroCron-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "3c8ff82fbff5d21f9db1ce53f333265a", "sha256": "5376ba52b6a383213d3d599c6796458b4053e9ee467e7670d13b8e2205937daa"}, "downloads": -1, "filename": "CoroCron-0.1.1.tar.gz", "has_sig": false, "md5_digest": "3c8ff82fbff5d21f9db1ce53f333265a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3587, "upload_time": "2018-11-28T06:17:20", "upload_time_iso_8601": "2018-11-28T06:17:20.677714Z", "url": "https://files.pythonhosted.org/packages/f0/50/c150b71e1a964d464fcea26573c8ee6dc71377fd2aff865c4dde6db10b65/CoroCron-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "858cd8fb60c491faaf79841500234228", "sha256": "950d2e485f5dc2601179ec97611e2c6c2eb2bcf897837ecfe72b2848519da976"}, "downloads": -1, "filename": "CoroCron-0.1.2.tar.gz", "has_sig": false, "md5_digest": "858cd8fb60c491faaf79841500234228", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3670, "upload_time": "2018-11-28T07:01:34", "upload_time_iso_8601": "2018-11-28T07:01:34.458936Z", "url": "https://files.pythonhosted.org/packages/04/30/456e8b568db0d6229103aea0ba0dd5e4352fdb2703380b6aacc1a3e65c6a/CoroCron-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "91b2f6a66ede18b5144f01968fb5319c", "sha256": "609f9a279127f3c7aa412f86b1ac02b8e0769d146289443ec1d0dbdb77ca4e6f"}, "downloads": -1, "filename": "CoroCron-0.1.3.tar.gz", "has_sig": false, "md5_digest": "91b2f6a66ede18b5144f01968fb5319c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3758, "upload_time": "2018-11-28T16:09:37", "upload_time_iso_8601": "2018-11-28T16:09:37.110023Z", "url": "https://files.pythonhosted.org/packages/95/97/1a53a1f0ed90deaa3a7252bf10f926502355f436e38f687383b60c801223/CoroCron-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "982f77196bfb7192acfef291d273b3c5", "sha256": "6a7d794dff5d9ebd7b04198433146510c683083b73b74cddbb434a4b0eebd331"}, "downloads": -1, "filename": "CoroCron-0.1.4.tar.gz", "has_sig": false, "md5_digest": "982f77196bfb7192acfef291d273b3c5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3749, "upload_time": "2018-11-28T20:23:52", "upload_time_iso_8601": "2018-11-28T20:23:52.175541Z", "url": "https://files.pythonhosted.org/packages/54/6d/ac28713e63fa1706748123b36ac93b82867e14be69d4a59a4ca38f9333d2/CoroCron-0.1.4.tar.gz", "yanked": false}], "0.1.5": [{"comment_text": "", "digests": {"md5": "9fcb7e7f8733079a5e1ff2a478430fba", "sha256": "1b5cbc2f82c3cc5e286e20986cfe6c5aae7df9e2152483b8c58f07a31dbda7a8"}, "downloads": -1, "filename": "CoroCron-0.1.5.tar.gz", "has_sig": false, "md5_digest": "9fcb7e7f8733079a5e1ff2a478430fba", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3791, "upload_time": "2019-09-22T18:41:48", "upload_time_iso_8601": "2019-09-22T18:41:48.802421Z", "url": "https://files.pythonhosted.org/packages/7a/ed/fa095ac1b65a9c8f988852908f6e7aeaa4c2193409a7896928c161293e10/CoroCron-0.1.5.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "9fcb7e7f8733079a5e1ff2a478430fba", "sha256": "1b5cbc2f82c3cc5e286e20986cfe6c5aae7df9e2152483b8c58f07a31dbda7a8"}, "downloads": -1, "filename": "CoroCron-0.1.5.tar.gz", "has_sig": false, "md5_digest": "9fcb7e7f8733079a5e1ff2a478430fba", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3791, "upload_time": "2019-09-22T18:41:48", "upload_time_iso_8601": "2019-09-22T18:41:48.802421Z", "url": "https://files.pythonhosted.org/packages/7a/ed/fa095ac1b65a9c8f988852908f6e7aeaa4c2193409a7896928c161293e10/CoroCron-0.1.5.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:43:08 2020"}