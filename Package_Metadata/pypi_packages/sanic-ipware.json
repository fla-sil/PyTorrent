{"info": {"author": "Richard Kuesters", "author_email": "rkuesters@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: Microsoft :: Windows", "Operating System :: POSIX", "Operating System :: Unix", "Programming Language :: Python", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: Implementation :: CPython", "Topic :: Utilities"], "description": "=================\n``sanic-ipware``\n=================\n\n\n\nThis is a fork of `django-ipware <https://github.com/un33k/django-ipware>`_ to work with `Sanic <https://sanicframework.org/>`_.\n\nOverview\n--------\n\n**Best attempt** to get client's IP address while keeping it **DRY**.\n\nNotice\n------\n\nThere is no real good \"out-of-the-box\" solution against fake IP addresses, aka \"IP Address Spoofing\". You are encouraged to read the `Advanced users <README.rst#advanced-users>`_ section of this page and use ``trusted_proxies_ips`` and/or ``proxy_count`` features to match your needs, especially *if* you are planning to include ``sanic-ipware`` in any authentication, security or \"anti-fraud\" related architecture.\n\nHow to install\n--------------\n\nThe best way to install ``sanic-ipware`` would be using ``pip``:\n\n.. code-block::\n\n    pip install sanic-ipware\n\nHow to use\n----------\n\nThere's basically one method that should be usable from ``sanic_ipware``, called ``get_client_ip``. The result is a ``Tuple[Optional[str], bool]`` of ``(ipaddr, routable)``.\n\n.. code-block:: python\n\n    from sanic_ipware import get_client_ip\n\n    @app.get(\"/some/handler\")\n    async def somehandler(request):\n        ip, routable = get_client_ip(request)\n        if ip is not None:\n            if routable:\n                # we have a (probably) real, public ip address for user\n            else:\n                # we have ip address, but it might not be public routable\n        else:\n            # we don't have a ip address for the user\n\nAdvanced users\n--------------\n\n.. code-block:: python\n\n    # you can provide your own meta precedence order by using the\n    # request_header_order in the function call:\n    ip, routable = get_client_ip(\n        request,\n        request_header_order=['Forwarded-For', 'X-Forwarded-For'])\n\n    # if you're going to do this a lot, wrap the function somewhere with\n    # functools.partial\n    from functools import partial\n    my_get_client_ip = partial(\n        get_client_ip,\n        request_header_order=['Forwarded-For', 'X-Forwarded-For'])\n    ip, routable = my_get_client_ip(request)\n\n    # if you plan to use sanic_ipware in any authentication, security or\n    # \"anti-fraud\" related architecture, you should configure it to only\n    # \"trust\" one or more \"known\" proxy server(s)), in the function call:\n    ip, routable = get_client_ip(request, proxy_trusted_ips=['198.84.193.158'])\n\n    # you can perform the same functools.partial trick with these trusted IPs\n\nLicense\n-------\n\nMIT, the same as ``django-ipware`` `license <https://github.com/un33k/django-ipware/blob/57897c03026913892e61a164bc8b022778802ab9/LICENSE>`_ .\n\n\nChangelog\n=========\n\nv0.1.0 on 2018-09-28\n--------------------\n\n* First release on PyPI. Not stable.", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/vltr/sanic-ipware", "keywords": "sanic,request,ip", "license": "MIT license", "maintainer": "", "maintainer_email": "", "name": "sanic-ipware", "package_url": "https://pypi.org/project/sanic-ipware/", "platform": "", "project_url": "https://pypi.org/project/sanic-ipware/", "project_urls": {"Homepage": "https://github.com/vltr/sanic-ipware"}, "release_url": "https://pypi.org/project/sanic-ipware/0.1.0/", "requires_dist": null, "requires_python": "", "summary": "Retrieve your client's IP address (or try its best to)", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>This is a fork of <a href=\"https://github.com/un33k/django-ipware\" rel=\"nofollow\">django-ipware</a> to work with <a href=\"https://sanicframework.org/\" rel=\"nofollow\">Sanic</a>.</p>\n<div id=\"overview\">\n<h2>Overview</h2>\n<p><strong>Best attempt</strong> to get client\u2019s IP address while keeping it <strong>DRY</strong>.</p>\n</div>\n<div id=\"notice\">\n<h2>Notice</h2>\n<p>There is no real good \u201cout-of-the-box\u201d solution against fake IP addresses, aka \u201cIP Address Spoofing\u201d. You are encouraged to read the <a href=\"README.rst#advanced-users\" rel=\"nofollow\">Advanced users</a> section of this page and use <tt>trusted_proxies_ips</tt> and/or <tt>proxy_count</tt> features to match your needs, especially <em>if</em> you are planning to include <tt><span class=\"pre\">sanic-ipware</span></tt> in any authentication, security or \u201canti-fraud\u201d related architecture.</p>\n</div>\n<div id=\"how-to-install\">\n<h2>How to install</h2>\n<p>The best way to install <tt><span class=\"pre\">sanic-ipware</span></tt> would be using <tt>pip</tt>:</p>\n<pre>pip install sanic-ipware\n</pre>\n</div>\n<div id=\"how-to-use\">\n<h2>How to use</h2>\n<p>There\u2019s basically one method that should be usable from <tt>sanic_ipware</tt>, called <tt>get_client_ip</tt>. The result is a <tt>Tuple[Optional[str], bool]</tt> of <tt>(ipaddr, routable)</tt>.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">sanic_ipware</span> <span class=\"kn\">import</span> <span class=\"n\">get_client_ip</span>\n\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"/some/handler\"</span><span class=\"p\">)</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">somehandler</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"n\">ip</span><span class=\"p\">,</span> <span class=\"n\">routable</span> <span class=\"o\">=</span> <span class=\"n\">get_client_ip</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">ip</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"n\">routable</span><span class=\"p\">:</span>\n            <span class=\"c1\"># we have a (probably) real, public ip address for user</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"c1\"># we have ip address, but it might not be public routable</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"c1\"># we don't have a ip address for the user</span>\n</pre>\n</div>\n<div id=\"id1\">\n<h2>Advanced users</h2>\n<pre><span class=\"c1\"># you can provide your own meta precedence order by using the</span>\n<span class=\"c1\"># request_header_order in the function call:</span>\n<span class=\"n\">ip</span><span class=\"p\">,</span> <span class=\"n\">routable</span> <span class=\"o\">=</span> <span class=\"n\">get_client_ip</span><span class=\"p\">(</span>\n    <span class=\"n\">request</span><span class=\"p\">,</span>\n    <span class=\"n\">request_header_order</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'Forwarded-For'</span><span class=\"p\">,</span> <span class=\"s1\">'X-Forwarded-For'</span><span class=\"p\">])</span>\n\n<span class=\"c1\"># if you're going to do this a lot, wrap the function somewhere with</span>\n<span class=\"c1\"># functools.partial</span>\n<span class=\"kn\">from</span> <span class=\"nn\">functools</span> <span class=\"kn\">import</span> <span class=\"n\">partial</span>\n<span class=\"n\">my_get_client_ip</span> <span class=\"o\">=</span> <span class=\"n\">partial</span><span class=\"p\">(</span>\n    <span class=\"n\">get_client_ip</span><span class=\"p\">,</span>\n    <span class=\"n\">request_header_order</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'Forwarded-For'</span><span class=\"p\">,</span> <span class=\"s1\">'X-Forwarded-For'</span><span class=\"p\">])</span>\n<span class=\"n\">ip</span><span class=\"p\">,</span> <span class=\"n\">routable</span> <span class=\"o\">=</span> <span class=\"n\">my_get_client_ip</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># if you plan to use sanic_ipware in any authentication, security or</span>\n<span class=\"c1\"># \"anti-fraud\" related architecture, you should configure it to only</span>\n<span class=\"c1\"># \"trust\" one or more \"known\" proxy server(s)), in the function call:</span>\n<span class=\"n\">ip</span><span class=\"p\">,</span> <span class=\"n\">routable</span> <span class=\"o\">=</span> <span class=\"n\">get_client_ip</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">proxy_trusted_ips</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'198.84.193.158'</span><span class=\"p\">])</span>\n\n<span class=\"c1\"># you can perform the same functools.partial trick with these trusted IPs</span>\n</pre>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>MIT, the same as <tt><span class=\"pre\">django-ipware</span></tt> <a href=\"https://github.com/un33k/django-ipware/blob/57897c03026913892e61a164bc8b022778802ab9/LICENSE\" rel=\"nofollow\">license</a> .</p>\n<div id=\"changelog\">\n<h3>Changelog</h3>\n</div>\n</div>\n<div id=\"v0-1-0-on-2018-09-28\">\n<h2>v0.1.0 on 2018-09-28</h2>\n<ul>\n<li>First release on PyPI. Not stable.</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 4320468, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "fc10027ce115d43441d5691cbb7140fd", "sha256": "43a1894e2ce3b68175319274afc29d817dbf9100d165705d0be0b71670eed227"}, "downloads": -1, "filename": "sanic-ipware-0.1.0.tar.gz", "has_sig": false, "md5_digest": "fc10027ce115d43441d5691cbb7140fd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14044, "upload_time": "2018-09-28T15:20:35", "upload_time_iso_8601": "2018-09-28T15:20:35.053339Z", "url": "https://files.pythonhosted.org/packages/35/5c/ad4f2207b5ae8f7156b8fbb089591d1a2730a67dcd7eb7e7e865210c7374/sanic-ipware-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "fc10027ce115d43441d5691cbb7140fd", "sha256": "43a1894e2ce3b68175319274afc29d817dbf9100d165705d0be0b71670eed227"}, "downloads": -1, "filename": "sanic-ipware-0.1.0.tar.gz", "has_sig": false, "md5_digest": "fc10027ce115d43441d5691cbb7140fd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14044, "upload_time": "2018-09-28T15:20:35", "upload_time_iso_8601": "2018-09-28T15:20:35.053339Z", "url": "https://files.pythonhosted.org/packages/35/5c/ad4f2207b5ae8f7156b8fbb089591d1a2730a67dcd7eb7e7e865210c7374/sanic-ipware-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:58:45 2020"}