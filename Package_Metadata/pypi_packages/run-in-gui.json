{"info": {"author": "Manuel Amador (Rudd-O)", "author_email": "rudd-o@rudd-o.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Console", "Environment :: No Input/Output (Daemon)", "Intended Audience :: End Users/Desktop", "Intended Audience :: System Administrators", "License :: OSI Approved :: GNU General Public License (GPL)", "Operating System :: POSIX :: Linux", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 2 :: Only"], "description": "Run in GUI (run-in-gui)\n============================\n\n| Donate to support this free software |\n|:------------------------------------:|\n| <img width=\"164\" height=\"164\" title=\"\" alt=\"\" src=\"doc/bitcoin.png\" /> |\n| [1DmVQkuY1zjP6ZiPi1QJgSowHtR8afBDMS](bitcoin:1DmVQkuY1zjP6ZiPi1QJgSowHtR8afBDMS) |\n\nThis project contains two programs that assist you in executing programs\nin a separate desktop session (defined by the environment variables of any\nprogram executing in that session), and then switching to the session in\nreal-time as the program executes.  It's useful to start GUI programs from\ncron that need a graphical display and/or audio access.\n\nWhy is this useful?  Because of the way that Linux has evolved, nowadays\nit's very hard to get certain computer programs to do things that were\ntrivial in the past.  For example: getting your music player to play a list\nof songs to wake you up -- unless you're running the program straight from\nthe GUI, it won't actually work; either the program just won't run, or the\naudio will be corked.\n\nCaveat: this program still requires you to be logged in.\n\nTools included in this set\n--------------------------\n\nThis package contains several tools:\n    \n1. `run-in-env-of`: a tool that runs the command of your choice in the\n    environment of the PID of your choice.  If run as root, it can\n   `setuid()` to the user and group of that PID.\n2. `run-in-gui`: a tool that sorts out a desktop session you're running\n   then uses run-in-env-of to execute the command on your choice under\n   that desktop session.  Prior to the execution of that program, it\n   switches to the selected desktop session, to enable hardware access\n   to devices that would otherwise be blocked (e.g. audio).\n\nWhat you need to have before using this package\n-----------------------------------------------\n    \n* Python 2.7 on your local machine\n* `loginctl` fully operational\n* `/proc` mounted\n\nInstallation\n------------\n\nYou will need to install this package on your local machine.\n\nYou can install this package directly from PyPI using pip::\n\n    pip install run-in-gui\n\nIf you are on an RPM-based distribution, build an RPM from the source package\nand install the resulting RPM::\n    \n    python setup.py bdist_rpm\n\nOtherwise, just use the standard Python installation system::\n\n    python setup.py install\n\nYou can also run it directly from the unpacked source directory::\n    \n    export PYTHONPATH=\"$PWD\"/src\n    ./<program> <parameters>\n\nUsage\n-----\n\nSay, for example, you want to run Amarok from a crontab, but you want Amarok\nto start on your logged-in desktop session.  No problem: you can stick this\ninto your crontab:\n\n    20 4 * * * /usr/local/run-in-gui/bin/run-in-gui amarok -p Toke\\ up.m3u\n\nAs you can see, at exactly 4:20 AM, Amarok will be executed in your desktop\nsession, and will start playing the playlist `Toke up.m3u` in your home\ndirectory.\n\nYou can also do the exact same thing from an `at` job:\n\n    echo /path/to/run-in-gui amarok -p Matanga.m3u | at 5:45\n\nIf, for some reason, the program won't start, check your mail folder in\n`/var/mail/$USERNAME`, where cron traditionally deposits crontab output.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/Rudd-O/run-in-gui", "keywords": "cron loginctl daemon GUI", "license": "GPL", "maintainer": null, "maintainer_email": null, "name": "run-in-gui", "package_url": "https://pypi.org/project/run-in-gui/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/run-in-gui/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://github.com/Rudd-O/run-in-gui"}, "release_url": "https://pypi.org/project/run-in-gui/0.0.1/", "requires_dist": null, "requires_python": null, "summary": "Tools to run (possibly graphical) programs in logged-in user sessions on modern Linux distributions", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            Run in GUI (run-in-gui)<br>============================<br><br>| Donate to support this free software |<br>|:------------------------------------:|<br>| &lt;img width=\"164\" height=\"164\" title=\"\" alt=\"\" src=\"doc/bitcoin.png\" /&gt; |<br>| [1DmVQkuY1zjP6ZiPi1QJgSowHtR8afBDMS](bitcoin:1DmVQkuY1zjP6ZiPi1QJgSowHtR8afBDMS) |<br><br>This project contains two programs that assist you in executing programs<br>in a separate desktop session (defined by the environment variables of any<br>program executing in that session), and then switching to the session in<br>real-time as the program executes.  It's useful to start GUI programs from<br>cron that need a graphical display and/or audio access.<br><br>Why is this useful?  Because of the way that Linux has evolved, nowadays<br>it's very hard to get certain computer programs to do things that were<br>trivial in the past.  For example: getting your music player to play a list<br>of songs to wake you up -- unless you're running the program straight from<br>the GUI, it won't actually work; either the program just won't run, or the<br>audio will be corked.<br><br>Caveat: this program still requires you to be logged in.<br><br>Tools included in this set<br>--------------------------<br><br>This package contains several tools:<br>    <br>1. `run-in-env-of`: a tool that runs the command of your choice in the<br>    environment of the PID of your choice.  If run as root, it can<br>   `setuid()` to the user and group of that PID.<br>2. `run-in-gui`: a tool that sorts out a desktop session you're running<br>   then uses run-in-env-of to execute the command on your choice under<br>   that desktop session.  Prior to the execution of that program, it<br>   switches to the selected desktop session, to enable hardware access<br>   to devices that would otherwise be blocked (e.g. audio).<br><br>What you need to have before using this package<br>-----------------------------------------------<br>    <br>* Python 2.7 on your local machine<br>* `loginctl` fully operational<br>* `/proc` mounted<br><br>Installation<br>------------<br><br>You will need to install this package on your local machine.<br><br>You can install this package directly from PyPI using pip::<br><br>    pip install run-in-gui<br><br>If you are on an RPM-based distribution, build an RPM from the source package<br>and install the resulting RPM::<br>    <br>    python setup.py bdist_rpm<br><br>Otherwise, just use the standard Python installation system::<br><br>    python setup.py install<br><br>You can also run it directly from the unpacked source directory::<br>    <br>    export PYTHONPATH=\"$PWD\"/src<br>    ./&lt;program&gt; &lt;parameters&gt;<br><br>Usage<br>-----<br><br>Say, for example, you want to run Amarok from a crontab, but you want Amarok<br>to start on your logged-in desktop session.  No problem: you can stick this<br>into your crontab:<br><br>    20 4 * * * /usr/local/run-in-gui/bin/run-in-gui amarok -p Toke\\ up.m3u<br><br>As you can see, at exactly 4:20 AM, Amarok will be executed in your desktop<br>session, and will start playing the playlist `Toke up.m3u` in your home<br>directory.<br><br>You can also do the exact same thing from an `at` job:<br><br>    echo /path/to/run-in-gui amarok -p Matanga.m3u | at 5:45<br><br>If, for some reason, the program won't start, check your mail folder in<br>`/var/mail/$USERNAME`, where cron traditionally deposits crontab output.\n          </div>"}, "last_serial": 853587, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "7c5911ee55a9b3cd1a4a349a38fbc9f4", "sha256": "16deb6de8a36a689ebceaa85dff181183bd3fb4875408438436ad38039a99d09"}, "downloads": -1, "filename": "run-in-gui-0.0.1.tar.gz", "has_sig": false, "md5_digest": "7c5911ee55a9b3cd1a4a349a38fbc9f4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6825, "upload_time": "2013-08-31T08:48:32", "upload_time_iso_8601": "2013-08-31T08:48:32.628052Z", "url": "https://files.pythonhosted.org/packages/53/a5/a0b41fccca850501274189cfbe87af737354b123acdb04c51ee2992c82c7/run-in-gui-0.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "7c5911ee55a9b3cd1a4a349a38fbc9f4", "sha256": "16deb6de8a36a689ebceaa85dff181183bd3fb4875408438436ad38039a99d09"}, "downloads": -1, "filename": "run-in-gui-0.0.1.tar.gz", "has_sig": false, "md5_digest": "7c5911ee55a9b3cd1a4a349a38fbc9f4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6825, "upload_time": "2013-08-31T08:48:32", "upload_time_iso_8601": "2013-08-31T08:48:32.628052Z", "url": "https://files.pythonhosted.org/packages/53/a5/a0b41fccca850501274189cfbe87af737354b123acdb04c51ee2992c82c7/run-in-gui-0.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:00:00 2020"}