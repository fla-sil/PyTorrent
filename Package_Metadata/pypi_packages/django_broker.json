{"info": {"author": "Seiyifa Tawari", "author_email": "seiyifa.tawari@gmail.com", "bugtrack_url": null, "classifiers": ["Environment :: Web Environment", "Framework :: Django", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3", "Topic :: Internet :: WWW/HTTP", "Topic :: Internet :: WWW/HTTP :: Dynamic Content", "Topic :: Software Development :: Libraries :: Application Frameworks", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "=============\nDjango Broker\n=============\n\nThis extremely simple and straightforward Django application facilitates the retrieval of exchange rates using the `Open Exchange Rates API` available at http://openexchangerates.org.\n\n\nQuick Start\n===========\n\n1. Install easily with pip::\n\n\t    pip install django_broker\n\n2. Add Django Broker to your installed apps::\n\n\t    INSTALLED_APPS = (\n\n\t\t    ...\n\t\t    'exchange',\n\t\t    ...\n\n\t    )\n\n2. Import the RateFetchClient object in your modules and use as shown below\n\n3. Enjoy\n\n\nSynopsis\n========\n\nThis application has one major object which retrieves the exchange rates by\nmaking an API call to the Open Exchange API endpoints.\n\n\nRequired Settings\n-----------------\n\nThis application requires a set of standard settings configurations to get its job done.\n\n\nsettings.OPENEXCHANGERATES_PAID_CX\n**********************************\nThis is a boolean value which lets the application know if the customer account is a paid account or not. It should be set to `True` or `False` accordingly in your project `settings.py` file.\n\n\nsettings.OPENEXCHANGERATES_APP_ID\n*********************************\nThis is a string which stores the API_KEY for your application as provisioned by the Open Exchange Rates API.\n\n\n\nRateFetchClient\n---------------\n\nMain object for retrieving exchange rates. This object simply inherits from the python `object`. It is initialized by passing in your Open Exchange App_ID as the singular parameter to the initializer.\n::\n\n\tfetcher = RateFetchClient('APP_ID')\n\n\nNote that the `APP_ID` does not have to be passed into this constructor. If you have set up the APP_ID project wide, then you do not need it here.\nThat's it!\n\nYou now have a new RateFetchClient object. This object has a couple methods which present the full functionality of the Open Exchange Rates API.\n\n\n\nquery_rates(self, [base])\n*************************\n\nThis method takes an optional `base` parameter. When specified, this parameter instructs the Open Exchange Rates API on the currency to be used as the...well, base! This means that all currency rates are provided relative to the selected base. When a base currency is not specified, the `US Dollar` is assumed as the default.\n::\n\n\tfetcher = RateFetchClient('APP_ID')\n\n\t# Now we can make a query on this object\n\trates = fetcher.query_rates()\n\n\nOr:\n::\n\n\tfetcher = RateFetchClient('APP_ID')\n\trates = fetcher.query_rates(base='CAD')\n\n\nThis method returns a dictionary of exchange rates. The keys of this dictionary represent the currency codes and the values are the exchange rates relative to the base currency. Sample values will look like:\n::\n\n\t{\n\t\t'DZD': Decimal('79.04391'),\n\t\t'NAD': Decimal('10.36218'),\n\t\t'GHS': Decimal('2.90095'),\n\t\t'EGP': Decimal('7.113293'),\n\t\t'BGN': Decimal('1.426792'),\n\t\t...\n\t}\n\n\nrestrict_rates(self, [base, symbols])\n*************************************\n\nThis method takes two optional parameters.\n\nThe `base` parameter is the same as that described above.\nThe `symbols` parameter, when supplied, is a list of strings which represent the currencies we are interested in. This ensures that instead of receiving a massive dictionary of 160+ exchange rates, we only get back the currencies that we are interested in.\n\nIt bears noting, however, that only users who have signed up for Enterprise/Unlimited accounts have access to some of the higher level functions, this one included. An example of the use of this function is shown below:\n::\n\n\tfetcher = RateFetchClient('APP_ID')\n\tsymbols = ['USD', 'GBP', 'CAD']\n\trates = fetcher.restrict_rates(symbols=symbols)\n\n\nThe dictionary returned by this method is exactly identical in format to that shown above, only shorter\n\n\n\nquery_currency(self)\n********************\n\nThis method is somewhat similar to the `query_rates` method. It takes no parameters and returns a dictionary of all currencies provided by the Open Exchange Rates API.\n::\n\n\tfetcher = RateFetchClient('APP_ID')\n\trates = fetcher.query_currency()\n\n\nThe returned dictionay looks like:\n::\n\n\t{\n\t\tu'DZD': u'Algerian Dinar',\n\t\tu'NAD': u'Namibian Dollar',\n\t\tu'GHS': u'Ghanaian Cedi',\n\t\tu'EGP': u'Egyptian Pound',\n\t\tu'BGN': u'Bulgarian Lev',\n\t\tu'PAB': u'Panamanian Balboa',\n\t\tu'BOB': u'Bolivian Boliviano',\n\t\tu'DKK': u'Danish Krone',\n\t\t...\n\t}\n\n\n\nexchange_currency(self, amount, _from, _to, [rate=False])\n*********************************************************\n\nThis method uses the currency rates obtained from the `query_rates` method in converting one to the other. As the method signature shows above, it accepts 3 mandatory parameters and one optional.\n\nThe `amount` parameter is the amount to be changed in the `_from` currency.\nThe `_from` parameter is the currency from which the amount is being converted.\nThe `_to` parameter is the currency to which the amount is converted.\nThe optional `rate` parameter determines whether or not the conversion rate is returned alongside the converted amount.\n\nWhen the `rate` flag is set to True, a tuple is returned containing both the conversion rate and the converted amount. When it is set to False, only the converted amount is returned. This is set to False by default.\n::\n\n\tamount = decimal.Decimal('20.00')\n\t_from = 'EUR'\n\t_to = 'CAD'\n\trate = True\n\tconv_amount, conv_rate = fetcher.exchange_currency(amount, _from, _to, rate)\n\nAnd without the rate:\n::\n\n\t...\n\tconv_amount = fetcher.exchange_currency(amount, _from, _to)\n\n\nAnd that's all folks!", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/parsenz/django-broker", "keywords": "django exchange rates currency", "license": "BSD License", "maintainer": null, "maintainer_email": null, "name": "django_broker", "package_url": "https://pypi.org/project/django_broker/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/django_broker/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://github.com/parsenz/django-broker"}, "release_url": "https://pypi.org/project/django_broker/0.0.6/", "requires_dist": null, "requires_python": null, "summary": "A simple Django app to facilitate currency conversions.", "version": "0.0.6", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>This extremely simple and straightforward Django application facilitates the retrieval of exchange rates using the <cite>Open Exchange Rates API</cite> available at <a href=\"http://openexchangerates.org\" rel=\"nofollow\">http://openexchangerates.org</a>.</p>\n<div id=\"quick-start\">\n<h2>Quick Start</h2>\n<ol>\n<li><p>Install easily with pip:</p>\n<pre>pip install django_broker\n</pre>\n</li>\n<li><p>Add Django Broker to your installed apps:</p>\n<pre>INSTALLED_APPS = (\n\n        ...\n        'exchange',\n        ...\n\n)\n</pre>\n</li>\n</ol>\n<ol>\n<li>Import the RateFetchClient object in your modules and use as shown below</li>\n<li>Enjoy</li>\n</ol>\n</div>\n<div id=\"synopsis\">\n<h2>Synopsis</h2>\n<p>This application has one major object which retrieves the exchange rates by\nmaking an API call to the Open Exchange API endpoints.</p>\n<div id=\"required-settings\">\n<h3>Required Settings</h3>\n<p>This application requires a set of standard settings configurations to get its job done.</p>\n<div id=\"settings-openexchangerates-paid-cx\">\n<h4>settings.OPENEXCHANGERATES_PAID_CX</h4>\n<p>This is a boolean value which lets the application know if the customer account is a paid account or not. It should be set to <cite>True</cite> or <cite>False</cite> accordingly in your project <cite>settings.py</cite> file.</p>\n</div>\n<div id=\"settings-openexchangerates-app-id\">\n<h4>settings.OPENEXCHANGERATES_APP_ID</h4>\n<p>This is a string which stores the API_KEY for your application as provisioned by the Open Exchange Rates API.</p>\n</div>\n</div>\n<div id=\"ratefetchclient\">\n<h3>RateFetchClient</h3>\n<p>Main object for retrieving exchange rates. This object simply inherits from the python <cite>object</cite>. It is initialized by passing in your Open Exchange App_ID as the singular parameter to the initializer.</p>\n<pre>fetcher = RateFetchClient('APP_ID')\n</pre>\n<p>Note that the <cite>APP_ID</cite> does not have to be passed into this constructor. If you have set up the APP_ID project wide, then you do not need it here.\nThat\u2019s it!</p>\n<p>You now have a new RateFetchClient object. This object has a couple methods which present the full functionality of the Open Exchange Rates API.</p>\n<div id=\"query-rates-self-base\">\n<h4>query_rates(self, [base])</h4>\n<p>This method takes an optional <cite>base</cite> parameter. When specified, this parameter instructs the Open Exchange Rates API on the currency to be used as the\u2026well, base! This means that all currency rates are provided relative to the selected base. When a base currency is not specified, the <cite>US Dollar</cite> is assumed as the default.</p>\n<pre>fetcher = RateFetchClient('APP_ID')\n\n# Now we can make a query on this object\nrates = fetcher.query_rates()\n</pre>\n<p>Or:</p>\n<pre>fetcher = RateFetchClient('APP_ID')\nrates = fetcher.query_rates(base='CAD')\n</pre>\n<p>This method returns a dictionary of exchange rates. The keys of this dictionary represent the currency codes and the values are the exchange rates relative to the base currency. Sample values will look like:</p>\n<pre>{\n        'DZD': Decimal('79.04391'),\n        'NAD': Decimal('10.36218'),\n        'GHS': Decimal('2.90095'),\n        'EGP': Decimal('7.113293'),\n        'BGN': Decimal('1.426792'),\n        ...\n}\n</pre>\n</div>\n<div id=\"restrict-rates-self-base-symbols\">\n<h4>restrict_rates(self, [base, symbols])</h4>\n<p>This method takes two optional parameters.</p>\n<p>The <cite>base</cite> parameter is the same as that described above.\nThe <cite>symbols</cite> parameter, when supplied, is a list of strings which represent the currencies we are interested in. This ensures that instead of receiving a massive dictionary of 160+ exchange rates, we only get back the currencies that we are interested in.</p>\n<p>It bears noting, however, that only users who have signed up for Enterprise/Unlimited accounts have access to some of the higher level functions, this one included. An example of the use of this function is shown below:</p>\n<pre>fetcher = RateFetchClient('APP_ID')\nsymbols = ['USD', 'GBP', 'CAD']\nrates = fetcher.restrict_rates(symbols=symbols)\n</pre>\n<p>The dictionary returned by this method is exactly identical in format to that shown above, only shorter</p>\n</div>\n<div id=\"query-currency-self\">\n<h4>query_currency(self)</h4>\n<p>This method is somewhat similar to the <cite>query_rates</cite> method. It takes no parameters and returns a dictionary of all currencies provided by the Open Exchange Rates API.</p>\n<pre>fetcher = RateFetchClient('APP_ID')\nrates = fetcher.query_currency()\n</pre>\n<p>The returned dictionay looks like:</p>\n<pre>{\n        u'DZD': u'Algerian Dinar',\n        u'NAD': u'Namibian Dollar',\n        u'GHS': u'Ghanaian Cedi',\n        u'EGP': u'Egyptian Pound',\n        u'BGN': u'Bulgarian Lev',\n        u'PAB': u'Panamanian Balboa',\n        u'BOB': u'Bolivian Boliviano',\n        u'DKK': u'Danish Krone',\n        ...\n}\n</pre>\n</div>\n<div id=\"exchange-currency-self-amount-from-to-rate-false\">\n<h4>exchange_currency(self, amount, _from, _to, [rate=False])</h4>\n<p>This method uses the currency rates obtained from the <cite>query_rates</cite> method in converting one to the other. As the method signature shows above, it accepts 3 mandatory parameters and one optional.</p>\n<p>The <cite>amount</cite> parameter is the amount to be changed in the <cite>_from</cite> currency.\nThe <cite>_from</cite> parameter is the currency from which the amount is being converted.\nThe <cite>_to</cite> parameter is the currency to which the amount is converted.\nThe optional <cite>rate</cite> parameter determines whether or not the conversion rate is returned alongside the converted amount.</p>\n<p>When the <cite>rate</cite> flag is set to True, a tuple is returned containing both the conversion rate and the converted amount. When it is set to False, only the converted amount is returned. This is set to False by default.</p>\n<pre>amount = decimal.Decimal('20.00')\n_from = 'EUR'\n_to = 'CAD'\nrate = True\nconv_amount, conv_rate = fetcher.exchange_currency(amount, _from, _to, rate)\n</pre>\n<p>And without the rate:</p>\n<pre>...\nconv_amount = fetcher.exchange_currency(amount, _from, _to)\n</pre>\n<p>And that\u2019s all folks!</p>\n</div>\n</div>\n</div>\n\n          </div>"}, "last_serial": 1103538, "releases": {"0.0.1": [], "0.0.2": [{"comment_text": "", "digests": {"md5": "3094faf4d810da096fb67020e8bdc3f9", "sha256": "3cf875e132d67f27cc4a4caf62b4736e63ed813e640e9c275c3e863f34d4339a"}, "downloads": -1, "filename": "django_broker-0.0.2.macosx-10.9-intel.exe", "has_sig": false, "md5_digest": "3094faf4d810da096fb67020e8bdc3f9", "packagetype": "bdist_wininst", "python_version": "any", "requires_python": null, "size": 73253, "upload_time": "2014-05-19T19:37:37", "upload_time_iso_8601": "2014-05-19T19:37:37.227644Z", "url": "https://files.pythonhosted.org/packages/ed/31/74396d2b243aa8cc8265dc2cd2514de1ea81f5c8eb045e33bf35ed7f0c11/django_broker-0.0.2.macosx-10.9-intel.exe", "yanked": false}, {"comment_text": "", "digests": {"md5": "5aa924aa5937557f1e2978e156084dab", "sha256": "942d415c19d7c09c4914cde12938960a5a77d7e2286d37acc4f1bc84be6cd2fc"}, "downloads": -1, "filename": "django_broker-0.0.2.tar.gz", "has_sig": false, "md5_digest": "5aa924aa5937557f1e2978e156084dab", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6306, "upload_time": "2014-05-19T19:37:34", "upload_time_iso_8601": "2014-05-19T19:37:34.601490Z", "url": "https://files.pythonhosted.org/packages/8f/51/90fc66dc8c0750fdc87e606774e8018c1273a1ccc34eea7e1b89a819398b/django_broker-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "5769653d25163aa5d732ab57ec7c6b2f", "sha256": "10c4197f8ccdcc49657efee66260538736d7d1979cf889c070be9f549bbf1858"}, "downloads": -1, "filename": "django_broker-0.0.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "5769653d25163aa5d732ab57ec7c6b2f", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 8949, "upload_time": "2014-05-19T20:31:26", "upload_time_iso_8601": "2014-05-19T20:31:26.189648Z", "url": "https://files.pythonhosted.org/packages/1b/32/1288476cd732bbd292996fbeb9ba7ee5d2a7271a88ca132c969fd603ea5d/django_broker-0.0.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9dda9ba8c7234f69ec74cbbc3b848a85", "sha256": "b2d28c9d2edd7d2ba65a9185055295079cef37ed06784c770eac189449481919"}, "downloads": -1, "filename": "django_broker-0.0.3.tar.gz", "has_sig": false, "md5_digest": "9dda9ba8c7234f69ec74cbbc3b848a85", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6410, "upload_time": "2014-05-19T20:31:06", "upload_time_iso_8601": "2014-05-19T20:31:06.708587Z", "url": "https://files.pythonhosted.org/packages/e9/1c/fa7e4b1dbe1ce2db8dc11e33cc2ef1c4915e22e69ba02b5b247a0a16300b/django_broker-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "075f8f788dc177b07715ab52d7b75d08", "sha256": "b77fbbb1832276171ae45282913f343f4ba78c3fb5bb9d747798f46edf2b3580"}, "downloads": -1, "filename": "django_broker-0.0.4-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "075f8f788dc177b07715ab52d7b75d08", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 9090, "upload_time": "2014-05-19T21:45:47", "upload_time_iso_8601": "2014-05-19T21:45:47.067115Z", "url": "https://files.pythonhosted.org/packages/6c/bf/f85b73ef3acc9d36195887b42a7df6270b810d93fbc0a4c0f1ad9fe1583b/django_broker-0.0.4-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0174ce157bd4c7323b091730a4f945e2", "sha256": "b6805c0e25c196d9a18bcb897b7b8a95288ff83780351f41bc7635c5c0e85cc1"}, "downloads": -1, "filename": "django_broker-0.0.4.tar.gz", "has_sig": false, "md5_digest": "0174ce157bd4c7323b091730a4f945e2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6496, "upload_time": "2014-05-19T21:45:35", "upload_time_iso_8601": "2014-05-19T21:45:35.841037Z", "url": "https://files.pythonhosted.org/packages/75/ff/6369ec3843f172b12dab72a2c3599374b73773e58cc969bb48d96104724b/django_broker-0.0.4.tar.gz", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "4709027655f8ccb510737cf738192919", "sha256": "51adb051516854d51fcf8103ac9a82b83866ab4f10ab9d9f09b619373345177f"}, "downloads": -1, "filename": "django_broker-0.0.5-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "4709027655f8ccb510737cf738192919", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 9139, "upload_time": "2014-05-19T22:42:45", "upload_time_iso_8601": "2014-05-19T22:42:45.373645Z", "url": "https://files.pythonhosted.org/packages/fd/0e/c9f5c42e69594886dc87ab34c4c8a9df9a17d5a14fcbf68b3a489995aa30/django_broker-0.0.5-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ec6086f8bb3d19fff90ce4115467bef4", "sha256": "e708c912ab8f879efff68b0dd21d2e7104141a6058b6a9a36714ca5a28047922"}, "downloads": -1, "filename": "django_broker-0.0.5.tar.gz", "has_sig": false, "md5_digest": "ec6086f8bb3d19fff90ce4115467bef4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6666, "upload_time": "2014-05-19T22:42:34", "upload_time_iso_8601": "2014-05-19T22:42:34.927078Z", "url": "https://files.pythonhosted.org/packages/4f/ed/2ff2ab41c8d86f42132eeb423e8e5108592f171a9707e37cbec92b607f51/django_broker-0.0.5.tar.gz", "yanked": false}], "0.0.6": [{"comment_text": "", "digests": {"md5": "1e3faab852a04e1aff35eba4bbbd34fa", "sha256": "001dc52365259527b0d86352a3b1f113e123780dca4a3bd984a591f45c3ad209"}, "downloads": -1, "filename": "django_broker-0.0.6-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "1e3faab852a04e1aff35eba4bbbd34fa", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 9137, "upload_time": "2014-05-25T07:07:58", "upload_time_iso_8601": "2014-05-25T07:07:58.166996Z", "url": "https://files.pythonhosted.org/packages/48/11/fa465021bc480de3e9a1ae58d3c8f7ad229920d4a5f80492f0959e4ed9a4/django_broker-0.0.6-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c9214598622ed5c4be39b6714bdff223", "sha256": "ab22ae4f55df82f9b118a096aa71485c970999d198dc4796e7a6556534ab9687"}, "downloads": -1, "filename": "django_broker-0.0.6.tar.gz", "has_sig": false, "md5_digest": "c9214598622ed5c4be39b6714bdff223", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6673, "upload_time": "2014-05-25T07:07:43", "upload_time_iso_8601": "2014-05-25T07:07:43.909699Z", "url": "https://files.pythonhosted.org/packages/4e/e2/c2d75a545e281057d16ae2739c9a15bf93ef38238ddbcaa3528b5fe522d1/django_broker-0.0.6.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "1e3faab852a04e1aff35eba4bbbd34fa", "sha256": "001dc52365259527b0d86352a3b1f113e123780dca4a3bd984a591f45c3ad209"}, "downloads": -1, "filename": "django_broker-0.0.6-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "1e3faab852a04e1aff35eba4bbbd34fa", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 9137, "upload_time": "2014-05-25T07:07:58", "upload_time_iso_8601": "2014-05-25T07:07:58.166996Z", "url": "https://files.pythonhosted.org/packages/48/11/fa465021bc480de3e9a1ae58d3c8f7ad229920d4a5f80492f0959e4ed9a4/django_broker-0.0.6-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c9214598622ed5c4be39b6714bdff223", "sha256": "ab22ae4f55df82f9b118a096aa71485c970999d198dc4796e7a6556534ab9687"}, "downloads": -1, "filename": "django_broker-0.0.6.tar.gz", "has_sig": false, "md5_digest": "c9214598622ed5c4be39b6714bdff223", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6673, "upload_time": "2014-05-25T07:07:43", "upload_time_iso_8601": "2014-05-25T07:07:43.909699Z", "url": "https://files.pythonhosted.org/packages/4e/e2/c2d75a545e281057d16ae2739c9a15bf93ef38238ddbcaa3528b5fe522d1/django_broker-0.0.6.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:37:20 2020"}