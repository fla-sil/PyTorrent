{"info": {"author": "thautawarm", "author_email": "twshere@outlook.com", "bugtrack_url": null, "classifiers": ["Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: Implementation :: CPython"], "description": "# writepy\n\nA library for easing boilerplates in writing Python, with static checking support.\n\n## Working with types\n\n- UNQ: `Expr[T] -> T`, anti-quotation\n- Q: `T -> Expr[T]`, quotation\n\n\n## Code Generation\n\nQ: what does `with CG >> seq: stmts...` mean?\n\nA: Generating statically checked `stmts...` to variable `seq`, where `seq` shall have `.extend` method.\n\n## Example: A Family of Variables with Index-concerned Initialization\n\n```python\nfrom writepy import *\nimport ast\nimport ast_compat as astc\n\n\ndef f(base: str):\n    seq = []\n    for each in range(5):\n        lhs = expr_as_is(object, base + str(each))\n        rhs = expr_from_repr(each)\n        call = Q[base + 1](lhs, rhs)            \n        with CG >> seq:\n            UNQ[call]\n            UNQ[lhs] = (UNQ[rhs], UNQ[expr_from_repr(base)])\n    return seq\n\n\nmk_cg(f)\n\nseq_ = f(\"base\")\nprint(astc.unparse(ast.Module(seq_)))\n``` \n\ncodegen:\n\n```python\n(base + 1)(base0, 0)\nbase0 = (0, 'base')\n(base + 1)(base1, 1)\nbase1 = (1, 'base')\n(base + 1)(base2, 2)\nbase2 = (2, 'base')\n(base + 1)(base3, 3)\nbase3 = (3, 'base')\n(base + 1)(base4, 4)\nbase4 = (4, 'base')\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/thautawarm/writepy", "keywords": "metaprogramming,code generation", "license": "mit", "maintainer": "", "maintainer_email": "", "name": "writepy", "package_url": "https://pypi.org/project/writepy/", "platform": "any", "project_url": "https://pypi.org/project/writepy/", "project_urls": {"Homepage": "https://github.com/thautawarm/writepy"}, "release_url": "https://pypi.org/project/writepy/0.1/", "requires_dist": ["ast-compat (>=0.10.0)"], "requires_python": ">=3.5.0", "summary": "ultimate type-safe code generation for python, only for being productive", "version": "0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>writepy</h1>\n<p>A library for easing boilerplates in writing Python, with static checking support.</p>\n<h2>Working with types</h2>\n<ul>\n<li>UNQ: <code>Expr[T] -&gt; T</code>, anti-quotation</li>\n<li>Q: <code>T -&gt; Expr[T]</code>, quotation</li>\n</ul>\n<h2>Code Generation</h2>\n<p>Q: what does <code>with CG &gt;&gt; seq: stmts...</code> mean?</p>\n<p>A: Generating statically checked <code>stmts...</code> to variable <code>seq</code>, where <code>seq</code> shall have <code>.extend</code> method.</p>\n<h2>Example: A Family of Variables with Index-concerned Initialization</h2>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">writepy</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">import</span> <span class=\"nn\">ast</span>\n<span class=\"kn\">import</span> <span class=\"nn\">ast_compat</span> <span class=\"k\">as</span> <span class=\"nn\">astc</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">f</span><span class=\"p\">(</span><span class=\"n\">base</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n    <span class=\"n\">seq</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">for</span> <span class=\"n\">each</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">):</span>\n        <span class=\"n\">lhs</span> <span class=\"o\">=</span> <span class=\"n\">expr_as_is</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">,</span> <span class=\"n\">base</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">each</span><span class=\"p\">))</span>\n        <span class=\"n\">rhs</span> <span class=\"o\">=</span> <span class=\"n\">expr_from_repr</span><span class=\"p\">(</span><span class=\"n\">each</span><span class=\"p\">)</span>\n        <span class=\"n\">call</span> <span class=\"o\">=</span> <span class=\"n\">Q</span><span class=\"p\">[</span><span class=\"n\">base</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">](</span><span class=\"n\">lhs</span><span class=\"p\">,</span> <span class=\"n\">rhs</span><span class=\"p\">)</span>            \n        <span class=\"k\">with</span> <span class=\"n\">CG</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">seq</span><span class=\"p\">:</span>\n            <span class=\"n\">UNQ</span><span class=\"p\">[</span><span class=\"n\">call</span><span class=\"p\">]</span>\n            <span class=\"n\">UNQ</span><span class=\"p\">[</span><span class=\"n\">lhs</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">UNQ</span><span class=\"p\">[</span><span class=\"n\">rhs</span><span class=\"p\">],</span> <span class=\"n\">UNQ</span><span class=\"p\">[</span><span class=\"n\">expr_from_repr</span><span class=\"p\">(</span><span class=\"n\">base</span><span class=\"p\">)])</span>\n    <span class=\"k\">return</span> <span class=\"n\">seq</span>\n\n\n<span class=\"n\">mk_cg</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)</span>\n\n<span class=\"n\">seq_</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"p\">(</span><span class=\"s2\">\"base\"</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">astc</span><span class=\"o\">.</span><span class=\"n\">unparse</span><span class=\"p\">(</span><span class=\"n\">ast</span><span class=\"o\">.</span><span class=\"n\">Module</span><span class=\"p\">(</span><span class=\"n\">seq_</span><span class=\"p\">)))</span>\n</pre>\n<p>codegen:</p>\n<pre><span class=\"p\">(</span><span class=\"n\">base</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)(</span><span class=\"n\">base0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">base0</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s1\">'base'</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"n\">base</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)(</span><span class=\"n\">base1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">base1</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'base'</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"n\">base</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)(</span><span class=\"n\">base2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">base2</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s1\">'base'</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"n\">base</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)(</span><span class=\"n\">base3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"n\">base3</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"s1\">'base'</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"n\">base</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)(</span><span class=\"n\">base4</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"n\">base4</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"s1\">'base'</span><span class=\"p\">)</span>\n</pre>\n\n          </div>"}, "last_serial": 7046327, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "cd44708aa2598a221dbe0c13944165ce", "sha256": "47f03b66288b99bbf70203e7e528bc49e14ff273e829517dda1f654754f881d2"}, "downloads": -1, "filename": "writepy-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "cd44708aa2598a221dbe0c13944165ce", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5.0", "size": 6048, "upload_time": "2020-04-18T06:41:27", "upload_time_iso_8601": "2020-04-18T06:41:27.508936Z", "url": "https://files.pythonhosted.org/packages/17/18/e3c80581c0b7b20b3a2e0dff6f8e3ab812f5350dc64ed0137870c2225680/writepy-0.1-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "cd44708aa2598a221dbe0c13944165ce", "sha256": "47f03b66288b99bbf70203e7e528bc49e14ff273e829517dda1f654754f881d2"}, "downloads": -1, "filename": "writepy-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "cd44708aa2598a221dbe0c13944165ce", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5.0", "size": 6048, "upload_time": "2020-04-18T06:41:27", "upload_time_iso_8601": "2020-04-18T06:41:27.508936Z", "url": "https://files.pythonhosted.org/packages/17/18/e3c80581c0b7b20b3a2e0dff6f8e3ab812f5350dc64ed0137870c2225680/writepy-0.1-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 03:27:15 2020"}