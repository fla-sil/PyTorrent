{"info": {"author": "Christophe Bornet", "author_email": "cbornet@hotmail.com", "bugtrack_url": null, "classifiers": [], "description": "python-httpproblem\n==================\n\nUtility library to work with `RFC7807 Problem Details for HTTP\nAPIs <https://tools.ietf.org/html/rfc7807>`__.\n\n|Build Status| |sonar-quality-gate| |sonar-coverage| |sonar-bugs|\n|sonar-vulnerabilities|\n\nThis library is very light-weight, with no external dependencies,\nfully-tested and works with both Python 2 and Python 3. It has special\nsupport for `AWS lambda proxy integration output\nformat <https://docs.aws.amazon.com/apigateway/latest/developerguide/set-up-lambda-proxy-integrations.html#api-gateway-simple-proxy-for-lambda-output-format>`__\nbut it should be easy to map to any other format or framework. Currently\nonly JSON serialization is supported.\n\nInstallation\n============\n\n::\n\n    pip install httpproblem\n\nUsage\n=====\n\nBuild a Problem dict\n--------------------\n\nThe ``problem()`` function that can be used to build a dict with the\nproblem fields.\n\n.. code:: python\n\n    >>> pprint(problem(httplib.BAD_REQUEST, 'You do not have enough credit.', 'Your current balance is 30, but that costs 50.', '/account/12345/msgs/abc'))\n    {'detail': 'Your current balance is 30, but that costs 50.',\n     'status': 400,\n     'title': 'You do not have enough credit.',\n     'type': '/account/12345/msgs/abc'}\n\nYou can also use problem extensions\n\n.. code:: python\n\n    >>> pprint(problem(httplib.BAD_REQUEST, 'You do not have enough credit.', 'Your current balance is 30, but that costs 50.', '/account/12345/msgs/abc', balance=30, accounts=['/account/12345','/account/67890']))\n    {'accounts': ['/account/12345', '/account/67890'],\n     'balance': 30,\n     'detail': 'Your current balance is 30, but that costs 50.',\n     'status': 400,\n     'title': 'You do not have enough credit.',\n     'type': '/account/12345/msgs/abc'}\n\nAs specified by `Predefined Problem\nTypes <https://tools.ietf.org/html/rfc7807#section-4.2>`__:\n\n    The \u201cabout:blank\u201d URI, when used as a problem type, indicates that\n    the problem has no additional semantics beyond that of the HTTP\n    status code.\n\n..\n\n    When \u201cabout:blank\u201d is used, the title SHOULD be the same as the\n    recommended HTTP status phrase for that code (e.g., \u201cNot Found\u201d for\n    404, and so on), although it MAY be localized to suit client\n    preferences (expressed with the Accept-Language request header).\n\nSo if this library will automatically fill the title field if the type\nis not present or ``about:blank``.\n\n.. code:: python\n\n    >>> problem(404)\n    {'status': 404, 'title': 'Not Found'}\n    >>> problem(httplib.BAD_REQUEST, type='about:blank')\n    {'status': 400, 'type': 'about:blank', 'title': 'Bad Request'}\n\nBuild a Problem HTTP response\n-----------------------------\n\nThe ``problem_http_response()`` function helps to build HTTP responses\nusing the format used by the AWS lambda proxy integration. The method\nwill automatically fill the ``Content-Type`` header with\n``application/problem+json`` and the HTTP response code with the status.\n\n.. code:: python\n\n    >>> pprint(problem_http_response(httplib.BAD_REQUEST))\n    {'body': '{\"status\": 400, \"type\": \"about:blank\", \"title\": \"Bad Request\"}',\n     'headers': {'Content-Type': 'application/problem+json'},\n     'statusCode': 400}\n\nYou can map this to other frameworks. For instance for Flask (or\nWerkzeug):\n\n.. code:: python\n\n    >>> problem = problem_http_response(400)\n    >>> print(flask.Response(problem['body'], status=problem['statusCode'], headers=problem['headers']))\n    <Response 39 bytes [400 BAD REQUEST]>\n\nBy default, ``json.dumps`` is used to serialize into JSON. This can be\nchanged by using the ``set_serialize_function``\n\n::\n\n    >>> httpproblem.set_serialize_method(lambda data: json.dumps(data, indent=4))\n    >>> print(problem_http_response(400)['body'])\n    {\n        \"status\": 400,\n        \"title\": \"Bad Request\"\n    }\n\nRaise a Problem exception\n-------------------------\n\nThe ``Problem`` exception class can be used to simplify the error\nmanagement with try/except. The class has methods to convert it to a\nProblem dict or HTTP response.\n\n.. code:: python\n\n    >>> try:\n    ...     raise Problem(httplib.BAD_REQUEST)\n    ... except Problem as e:\n    ...     print(e.to_dict())\n    ...\n    {'status': 400, 'title': 'Bad Request'}\n\nThe ``to_dict`` and ``to_http_response`` take a ``with_traceback``\nargument that can be used to include the traceback. You can also set it\nglobally with the ``activate_traceback()`` function. For security\nreasons, the default is to not include the traceback and it is\nrecommended to not activate it in production.\n\n.. code:: python\n\n    >>> # Add traceback by call argument\n    >>> try:\n    ...     raise Problem(httplib.BAD_REQUEST)\n    ... except Problem as e:\n    ...     pprint(e.to_dict(with_traceback=True))\n    ...\n    {'status': 400,\n     'title': 'Bad Request',\n     'traceback': 'Traceback (most recent call last):\\n  File \"<stdin>\", line 2, in <module>\\nProblem: {\\'status\\': 400, \\'title\\': \\'Bad Request\\'}\\n'}\n    >>>\n    >>> # Add traceback globally\n    >>> httpproblem.activate_traceback()\n    >>> try:\n    ...     raise Problem(httplib.BAD_REQUEST)\n    ... except Problem as e:\n    ...     pprint(e.to_dict())\n    ...\n    {'status': 400,\n     'title': 'Bad Request',\n     'traceback': 'Traceback (most recent call last):\\n  File \"<stdin>\", line 2, in <module>\\nProblem: {\\'status\\': 400, \\'title\\': \\'Bad Request\\'}\\n'}\n\n.. |Build Status| image:: https://travis-ci.org/cbornet/python-httpproblem.svg?branch=master\n   :target: https://travis-ci.org/cbornet/python-httpproblem\n.. |sonar-quality-gate| image:: https://sonarcloud.io/api/badges/gate?key=python-httpproblem\n   :target: https://sonarcloud.io/dashboard?id=python-httpproblem\n.. |sonar-coverage| image:: https://sonarcloud.io/api/badges/measure?key=python-httpproblem&metric=coverage\n   :target: https://sonarcloud.io/dashboard?id=python-httpproblem\n.. |sonar-bugs| image:: https://sonarcloud.io/api/badges/measure?key=python-httpproblem&metric=bugs\n   :target: https://sonarcloud.io/dashboard?id=python-httpproblem\n.. |sonar-vulnerabilities| image:: https://sonarcloud.io/api/badges/measure?key=python-httpproblem&metric=vulnerabilities\n   :target: https://sonarcloud.io/dashboard?id=python-httpproblem\n", "description_content_type": null, "docs_url": null, "download_url": "https://pypi.python.org/pypi/httpproblem", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/cbornet/python-httpproblem", "keywords": "rfc7807 problem http json", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "httpproblem", "package_url": "https://pypi.org/project/httpproblem/", "platform": "any", "project_url": "https://pypi.org/project/httpproblem/", "project_urls": {"Download": "https://pypi.python.org/pypi/httpproblem", "Homepage": "https://github.com/cbornet/python-httpproblem"}, "release_url": "https://pypi.org/project/httpproblem/0.2.0/", "requires_dist": null, "requires_python": "", "summary": "Utility library to work with RFC7807 Problem Details for HTTP APIs", "version": "0.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"python-httpproblem\">\n<h2>python-httpproblem</h2>\n<p>Utility library to work with <a href=\"https://tools.ietf.org/html/rfc7807\" rel=\"nofollow\">RFC7807 Problem Details for HTTP\nAPIs</a>.</p>\n<p><a href=\"https://travis-ci.org/cbornet/python-httpproblem\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/cc4268c758395891516f6f44c4b7e0c5ab839f82/68747470733a2f2f7472617669732d63692e6f72672f63626f726e65742f707974686f6e2d6874747070726f626c656d2e7376673f6272616e63683d6d6173746572\"></a> <a href=\"https://sonarcloud.io/dashboard?id=python-httpproblem\" rel=\"nofollow\"><img alt=\"sonar-quality-gate\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c09e99a91839ddc0d902b888037380bb98c11aa7/68747470733a2f2f736f6e6172636c6f75642e696f2f6170692f6261646765732f676174653f6b65793d707974686f6e2d6874747070726f626c656d\"></a> <a href=\"https://sonarcloud.io/dashboard?id=python-httpproblem\" rel=\"nofollow\"><img alt=\"sonar-coverage\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/60b4f3e04219c70bdd9a48519e902c49676b163d/68747470733a2f2f736f6e6172636c6f75642e696f2f6170692f6261646765732f6d6561737572653f6b65793d707974686f6e2d6874747070726f626c656d266d65747269633d636f766572616765\"></a> <a href=\"https://sonarcloud.io/dashboard?id=python-httpproblem\" rel=\"nofollow\"><img alt=\"sonar-bugs\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a446b1417ebbd2ec31eac81afbf5f4ba960b2d3f/68747470733a2f2f736f6e6172636c6f75642e696f2f6170692f6261646765732f6d6561737572653f6b65793d707974686f6e2d6874747070726f626c656d266d65747269633d62756773\"></a>\n<a href=\"https://sonarcloud.io/dashboard?id=python-httpproblem\" rel=\"nofollow\"><img alt=\"sonar-vulnerabilities\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3ef336525d18c0c08b31146dc35ce6dfd120a88f/68747470733a2f2f736f6e6172636c6f75642e696f2f6170692f6261646765732f6d6561737572653f6b65793d707974686f6e2d6874747070726f626c656d266d65747269633d76756c6e65726162696c6974696573\"></a></p>\n<p>This library is very light-weight, with no external dependencies,\nfully-tested and works with both Python 2 and Python 3. It has special\nsupport for <a href=\"https://docs.aws.amazon.com/apigateway/latest/developerguide/set-up-lambda-proxy-integrations.html#api-gateway-simple-proxy-for-lambda-output-format\" rel=\"nofollow\">AWS lambda proxy integration output\nformat</a>\nbut it should be easy to map to any other format or framework. Currently\nonly JSON serialization is supported.</p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<pre>pip install httpproblem\n</pre>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<div id=\"build-a-problem-dict\">\n<h3>Build a Problem dict</h3>\n<p>The <tt>problem()</tt> function that can be used to build a dict with the\nproblem fields.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">pprint</span><span class=\"p\">(</span><span class=\"n\">problem</span><span class=\"p\">(</span><span class=\"n\">httplib</span><span class=\"o\">.</span><span class=\"n\">BAD_REQUEST</span><span class=\"p\">,</span> <span class=\"s1\">'You do not have enough credit.'</span><span class=\"p\">,</span> <span class=\"s1\">'Your current balance is 30, but that costs 50.'</span><span class=\"p\">,</span> <span class=\"s1\">'/account/12345/msgs/abc'</span><span class=\"p\">))</span>\n<span class=\"p\">{</span><span class=\"s1\">'detail'</span><span class=\"p\">:</span> <span class=\"s1\">'Your current balance is 30, but that costs 50.'</span><span class=\"p\">,</span>\n <span class=\"s1\">'status'</span><span class=\"p\">:</span> <span class=\"mi\">400</span><span class=\"p\">,</span>\n <span class=\"s1\">'title'</span><span class=\"p\">:</span> <span class=\"s1\">'You do not have enough credit.'</span><span class=\"p\">,</span>\n <span class=\"s1\">'type'</span><span class=\"p\">:</span> <span class=\"s1\">'/account/12345/msgs/abc'</span><span class=\"p\">}</span>\n</pre>\n<p>You can also use problem extensions</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">pprint</span><span class=\"p\">(</span><span class=\"n\">problem</span><span class=\"p\">(</span><span class=\"n\">httplib</span><span class=\"o\">.</span><span class=\"n\">BAD_REQUEST</span><span class=\"p\">,</span> <span class=\"s1\">'You do not have enough credit.'</span><span class=\"p\">,</span> <span class=\"s1\">'Your current balance is 30, but that costs 50.'</span><span class=\"p\">,</span> <span class=\"s1\">'/account/12345/msgs/abc'</span><span class=\"p\">,</span> <span class=\"n\">balance</span><span class=\"o\">=</span><span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"n\">accounts</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'/account/12345'</span><span class=\"p\">,</span><span class=\"s1\">'/account/67890'</span><span class=\"p\">]))</span>\n<span class=\"p\">{</span><span class=\"s1\">'accounts'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'/account/12345'</span><span class=\"p\">,</span> <span class=\"s1\">'/account/67890'</span><span class=\"p\">],</span>\n <span class=\"s1\">'balance'</span><span class=\"p\">:</span> <span class=\"mi\">30</span><span class=\"p\">,</span>\n <span class=\"s1\">'detail'</span><span class=\"p\">:</span> <span class=\"s1\">'Your current balance is 30, but that costs 50.'</span><span class=\"p\">,</span>\n <span class=\"s1\">'status'</span><span class=\"p\">:</span> <span class=\"mi\">400</span><span class=\"p\">,</span>\n <span class=\"s1\">'title'</span><span class=\"p\">:</span> <span class=\"s1\">'You do not have enough credit.'</span><span class=\"p\">,</span>\n <span class=\"s1\">'type'</span><span class=\"p\">:</span> <span class=\"s1\">'/account/12345/msgs/abc'</span><span class=\"p\">}</span>\n</pre>\n<p>As specified by <a href=\"https://tools.ietf.org/html/rfc7807#section-4.2\" rel=\"nofollow\">Predefined Problem\nTypes</a>:</p>\n<blockquote>\nThe \u201c<a>about:blank</a>\u201d URI, when used as a problem type, indicates that\nthe problem has no additional semantics beyond that of the HTTP\nstatus code.</blockquote>\n<blockquote>\nWhen \u201c<a>about:blank</a>\u201d is used, the title SHOULD be the same as the\nrecommended HTTP status phrase for that code (e.g., \u201cNot Found\u201d for\n404, and so on), although it MAY be localized to suit client\npreferences (expressed with the Accept-Language request header).</blockquote>\n<p>So if this library will automatically fill the title field if the type\nis not present or <tt>about:blank</tt>.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">problem</span><span class=\"p\">(</span><span class=\"mi\">404</span><span class=\"p\">)</span>\n<span class=\"p\">{</span><span class=\"s1\">'status'</span><span class=\"p\">:</span> <span class=\"mi\">404</span><span class=\"p\">,</span> <span class=\"s1\">'title'</span><span class=\"p\">:</span> <span class=\"s1\">'Not Found'</span><span class=\"p\">}</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">problem</span><span class=\"p\">(</span><span class=\"n\">httplib</span><span class=\"o\">.</span><span class=\"n\">BAD_REQUEST</span><span class=\"p\">,</span> <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"s1\">'about:blank'</span><span class=\"p\">)</span>\n<span class=\"p\">{</span><span class=\"s1\">'status'</span><span class=\"p\">:</span> <span class=\"mi\">400</span><span class=\"p\">,</span> <span class=\"s1\">'type'</span><span class=\"p\">:</span> <span class=\"s1\">'about:blank'</span><span class=\"p\">,</span> <span class=\"s1\">'title'</span><span class=\"p\">:</span> <span class=\"s1\">'Bad Request'</span><span class=\"p\">}</span>\n</pre>\n</div>\n<div id=\"build-a-problem-http-response\">\n<h3>Build a Problem HTTP response</h3>\n<p>The <tt>problem_http_response()</tt> function helps to build HTTP responses\nusing the format used by the AWS lambda proxy integration. The method\nwill automatically fill the <tt><span class=\"pre\">Content-Type</span></tt> header with\n<tt>application/problem+json</tt> and the HTTP response code with the status.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">pprint</span><span class=\"p\">(</span><span class=\"n\">problem_http_response</span><span class=\"p\">(</span><span class=\"n\">httplib</span><span class=\"o\">.</span><span class=\"n\">BAD_REQUEST</span><span class=\"p\">))</span>\n<span class=\"p\">{</span><span class=\"s1\">'body'</span><span class=\"p\">:</span> <span class=\"s1\">'{\"status\": 400, \"type\": \"about:blank\", \"title\": \"Bad Request\"}'</span><span class=\"p\">,</span>\n <span class=\"s1\">'headers'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'Content-Type'</span><span class=\"p\">:</span> <span class=\"s1\">'application/problem+json'</span><span class=\"p\">},</span>\n <span class=\"s1\">'statusCode'</span><span class=\"p\">:</span> <span class=\"mi\">400</span><span class=\"p\">}</span>\n</pre>\n<p>You can map this to other frameworks. For instance for Flask (or\nWerkzeug):</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">problem</span> <span class=\"o\">=</span> <span class=\"n\">problem_http_response</span><span class=\"p\">(</span><span class=\"mi\">400</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">flask</span><span class=\"o\">.</span><span class=\"n\">Response</span><span class=\"p\">(</span><span class=\"n\">problem</span><span class=\"p\">[</span><span class=\"s1\">'body'</span><span class=\"p\">],</span> <span class=\"n\">status</span><span class=\"o\">=</span><span class=\"n\">problem</span><span class=\"p\">[</span><span class=\"s1\">'statusCode'</span><span class=\"p\">],</span> <span class=\"n\">headers</span><span class=\"o\">=</span><span class=\"n\">problem</span><span class=\"p\">[</span><span class=\"s1\">'headers'</span><span class=\"p\">]))</span>\n<span class=\"o\">&lt;</span><span class=\"n\">Response</span> <span class=\"mi\">39</span> <span class=\"nb\">bytes</span> <span class=\"p\">[</span><span class=\"mi\">400</span> <span class=\"n\">BAD</span> <span class=\"n\">REQUEST</span><span class=\"p\">]</span><span class=\"o\">&gt;</span>\n</pre>\n<p>By default, <tt>json.dumps</tt> is used to serialize into JSON. This can be\nchanged by using the <tt>set_serialize_function</tt></p>\n<pre>&gt;&gt;&gt; httpproblem.set_serialize_method(lambda data: json.dumps(data, indent=4))\n&gt;&gt;&gt; print(problem_http_response(400)['body'])\n{\n    \"status\": 400,\n    \"title\": \"Bad Request\"\n}\n</pre>\n</div>\n<div id=\"raise-a-problem-exception\">\n<h3>Raise a Problem exception</h3>\n<p>The <tt>Problem</tt> exception class can be used to simplify the error\nmanagement with try/except. The class has methods to convert it to a\nProblem dict or HTTP response.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">try</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>     <span class=\"k\">raise</span> <span class=\"n\">Problem</span><span class=\"p\">(</span><span class=\"n\">httplib</span><span class=\"o\">.</span><span class=\"n\">BAD_REQUEST</span><span class=\"p\">)</span>\n<span class=\"o\">...</span> <span class=\"k\">except</span> <span class=\"n\">Problem</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>     <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">to_dict</span><span class=\"p\">())</span>\n<span class=\"o\">...</span>\n<span class=\"p\">{</span><span class=\"s1\">'status'</span><span class=\"p\">:</span> <span class=\"mi\">400</span><span class=\"p\">,</span> <span class=\"s1\">'title'</span><span class=\"p\">:</span> <span class=\"s1\">'Bad Request'</span><span class=\"p\">}</span>\n</pre>\n<p>The <tt>to_dict</tt> and <tt>to_http_response</tt> take a <tt>with_traceback</tt>\nargument that can be used to include the traceback. You can also set it\nglobally with the <tt>activate_traceback()</tt> function. For security\nreasons, the default is to not include the traceback and it is\nrecommended to not activate it in production.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># Add traceback by call argument</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">try</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>     <span class=\"k\">raise</span> <span class=\"n\">Problem</span><span class=\"p\">(</span><span class=\"n\">httplib</span><span class=\"o\">.</span><span class=\"n\">BAD_REQUEST</span><span class=\"p\">)</span>\n<span class=\"o\">...</span> <span class=\"k\">except</span> <span class=\"n\">Problem</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>     <span class=\"n\">pprint</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">to_dict</span><span class=\"p\">(</span><span class=\"n\">with_traceback</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">))</span>\n<span class=\"o\">...</span>\n<span class=\"p\">{</span><span class=\"s1\">'status'</span><span class=\"p\">:</span> <span class=\"mi\">400</span><span class=\"p\">,</span>\n <span class=\"s1\">'title'</span><span class=\"p\">:</span> <span class=\"s1\">'Bad Request'</span><span class=\"p\">,</span>\n <span class=\"s1\">'traceback'</span><span class=\"p\">:</span> <span class=\"s1\">'Traceback (most recent call last):</span><span class=\"se\">\\n</span><span class=\"s1\">  File \"&lt;stdin&gt;\", line 2, in &lt;module&gt;</span><span class=\"se\">\\n</span><span class=\"s1\">Problem: {</span><span class=\"se\">\\'</span><span class=\"s1\">status</span><span class=\"se\">\\'</span><span class=\"s1\">: 400, </span><span class=\"se\">\\'</span><span class=\"s1\">title</span><span class=\"se\">\\'</span><span class=\"s1\">: </span><span class=\"se\">\\'</span><span class=\"s1\">Bad Request</span><span class=\"se\">\\'</span><span class=\"s1\">}</span><span class=\"se\">\\n</span><span class=\"s1\">'</span><span class=\"p\">}</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># Add traceback globally</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">httpproblem</span><span class=\"o\">.</span><span class=\"n\">activate_traceback</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">try</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>     <span class=\"k\">raise</span> <span class=\"n\">Problem</span><span class=\"p\">(</span><span class=\"n\">httplib</span><span class=\"o\">.</span><span class=\"n\">BAD_REQUEST</span><span class=\"p\">)</span>\n<span class=\"o\">...</span> <span class=\"k\">except</span> <span class=\"n\">Problem</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>     <span class=\"n\">pprint</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">to_dict</span><span class=\"p\">())</span>\n<span class=\"o\">...</span>\n<span class=\"p\">{</span><span class=\"s1\">'status'</span><span class=\"p\">:</span> <span class=\"mi\">400</span><span class=\"p\">,</span>\n <span class=\"s1\">'title'</span><span class=\"p\">:</span> <span class=\"s1\">'Bad Request'</span><span class=\"p\">,</span>\n <span class=\"s1\">'traceback'</span><span class=\"p\">:</span> <span class=\"s1\">'Traceback (most recent call last):</span><span class=\"se\">\\n</span><span class=\"s1\">  File \"&lt;stdin&gt;\", line 2, in &lt;module&gt;</span><span class=\"se\">\\n</span><span class=\"s1\">Problem: {</span><span class=\"se\">\\'</span><span class=\"s1\">status</span><span class=\"se\">\\'</span><span class=\"s1\">: 400, </span><span class=\"se\">\\'</span><span class=\"s1\">title</span><span class=\"se\">\\'</span><span class=\"s1\">: </span><span class=\"se\">\\'</span><span class=\"s1\">Bad Request</span><span class=\"se\">\\'</span><span class=\"s1\">}</span><span class=\"se\">\\n</span><span class=\"s1\">'</span><span class=\"p\">}</span>\n</pre>\n</div>\n</div>\n\n          </div>"}, "last_serial": 3575104, "releases": {"0.1.1": [{"comment_text": "", "digests": {"md5": "be21bac47e909cc54ce6f4b6e18eb94c", "sha256": "cfb5e61fe9e8513d2a2f713e28631a1fe0c9953a71f6bcb5c74a6793e8c7a49a"}, "downloads": -1, "filename": "httpproblem-0.1.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "be21bac47e909cc54ce6f4b6e18eb94c", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 4084, "upload_time": "2018-02-08T17:35:39", "upload_time_iso_8601": "2018-02-08T17:35:39.010316Z", "url": "https://files.pythonhosted.org/packages/23/ae/c6eee45ee8fad5d35f6fcab81cca6399f333d51d1f4af5ef124522b10ca6/httpproblem-0.1.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2065cdf6bb8aae01ca3bf9c418922b3b", "sha256": "657aa994bd064030b7d8a973e47ee6b277ca25ee4ca97d3f4b7a9619e9a47754"}, "downloads": -1, "filename": "httpproblem-0.1.1.tar.gz", "has_sig": false, "md5_digest": "2065cdf6bb8aae01ca3bf9c418922b3b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2656, "upload_time": "2018-02-08T17:35:36", "upload_time_iso_8601": "2018-02-08T17:35:36.220734Z", "url": "https://files.pythonhosted.org/packages/08/80/cf3c732d6604af8c48ca57b5af14b52e19b32cdec6d6716055d4735a4529/httpproblem-0.1.1.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "265a2f0bd8405d1ae61cc43f07d59794", "sha256": "15a357dc5a613f8fa1a7185c90638ca5408d94b54852f92765cf00440464e084"}, "downloads": -1, "filename": "httpproblem-0.2.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "265a2f0bd8405d1ae61cc43f07d59794", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 7928, "upload_time": "2018-02-12T14:49:48", "upload_time_iso_8601": "2018-02-12T14:49:48.057676Z", "url": "https://files.pythonhosted.org/packages/71/f9/fefe5e9f97ea6c23e6060a7b62f3f82f1a155fef1a02f6ba5019e9248774/httpproblem-0.2.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "13508fd6dfb314352b91a68c6a14a170", "sha256": "8434f3e8e61bd57d087e3c2d6f34f85ad18fd0f214b339c15c3239a8aa7b42cf"}, "downloads": -1, "filename": "httpproblem-0.2.0.tar.gz", "has_sig": false, "md5_digest": "13508fd6dfb314352b91a68c6a14a170", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5247, "upload_time": "2018-02-12T14:49:43", "upload_time_iso_8601": "2018-02-12T14:49:43.655007Z", "url": "https://files.pythonhosted.org/packages/ef/da/ae53747744535f8d2dce222257bd885ec765d00a7b5a53dcb4d7d9b67a03/httpproblem-0.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "265a2f0bd8405d1ae61cc43f07d59794", "sha256": "15a357dc5a613f8fa1a7185c90638ca5408d94b54852f92765cf00440464e084"}, "downloads": -1, "filename": "httpproblem-0.2.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "265a2f0bd8405d1ae61cc43f07d59794", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 7928, "upload_time": "2018-02-12T14:49:48", "upload_time_iso_8601": "2018-02-12T14:49:48.057676Z", "url": "https://files.pythonhosted.org/packages/71/f9/fefe5e9f97ea6c23e6060a7b62f3f82f1a155fef1a02f6ba5019e9248774/httpproblem-0.2.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "13508fd6dfb314352b91a68c6a14a170", "sha256": "8434f3e8e61bd57d087e3c2d6f34f85ad18fd0f214b339c15c3239a8aa7b42cf"}, "downloads": -1, "filename": "httpproblem-0.2.0.tar.gz", "has_sig": false, "md5_digest": "13508fd6dfb314352b91a68c6a14a170", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5247, "upload_time": "2018-02-12T14:49:43", "upload_time_iso_8601": "2018-02-12T14:49:43.655007Z", "url": "https://files.pythonhosted.org/packages/ef/da/ae53747744535f8d2dce222257bd885ec765d00a7b5a53dcb4d7d9b67a03/httpproblem-0.2.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:50:05 2020"}