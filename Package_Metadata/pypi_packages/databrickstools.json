{"info": {"author": "Rodrigo Hern\u00e1ndez Mota", "author_email": "contact@rhdzmota.com", "bugtrack_url": null, "classifiers": ["Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "# DatabricksTools CLI\n\nA simple commandline application to keep in sync between databricks and your local filesystem. This project uses the databricks [workspace api](https://docs.databricks.com/dev-tools/api/latest/workspace.html). \n \nKey features:\n* List and MkDir commands. \n* Download databricks notebooks as HTML, Jupyter, or Source format. \n* Upload file from your filesystem (source format) to create/overwrite databricks notebooks. \n* Automatically transform markdown files to source!\n    * Using markdown syntax instead of source is more convenient. \n    * Use codeblocks to change between languages (e.g. `python`, `scala`, `sql`, `sh`). \n    * Integrate local development and execution with databricks notebooks. \n\n```commandline\n$ databrickstools ls --path /Shared\n```\n\n```commandline\n$ databrickstools upload markdown \\\n    --from-path exploration.md \\\n    --to-path /Shared/merchants/exploration\n```\n\n## Setup\n\nInstall via `pip`:\n\n```commandline\n$ pip install databrickstools\n```\n\nOr clone the repository and install the commandline application!\n\n1. Clone: `git clone https://github.com/rhdzmota/databrickstools-cli`\n1. Install: `pip install -e databrickstools-cli`\n\n**Note**: you'll need python 3.6 or greater. \n\nCreate the `.env` file containing your environment variables.\n\n1. Create `.env` following the example `.env.example`:\n    * `cp .env.example .env`\n1. Load the variables into the environment:\n    *  `export $(cat .env | xargs)`\n\n**Note**: the `.env` file can be on any place of your machine. The commandline application just needs those variables to be present on the environment. \n\nTest with a simple command:\n\n```commandline\n$ databrickstools ls --path /Shared\n```\n\n## Use case!\n\nAssume you have a file named `exploration.md` with the following markdown content:\n\n````text\n# Exporatory Data Analysis\n\nThis is a file containing the initial EDA work.\n\n## Setup\n\n```python\nimport pandas as pd\nfrom sqlalchemy import create_engine \n\nconnection_string = \"...\"\nengine = create_engine(connection_string) \n```\n\n## Getting the data\n\nConsider the following invalid merchant data:\n\n```python\nSQL_INVALID_MERCHANTS = \"SELECT * FROM merchants WHERE invalid = 1\"\n\ndf = pd.read_sql(query, engine)\ndf.head()\n```\n\nLocation distribution: \n\n```python\ndf.groupby(\"state\").size().to_frame()\n```\n...\n\n````\n\nYou could use [rmarkdown + reticulate](https://rstudio.github.io/reticulate/articles/r_markdown.html) for local development and execution of that report. And then use `databrickstools` to deploy and transform this markdown file into a databricks notebook! \n\n```commandline\n$ databrickstools upload markdown \\\n    --from-path exploration.md \\\n    --to-path /Shared/merchants/exploration \\\n    --base-language python \\\n    --overwrite\n```\n\n## Usage\n\nThe CLI contains `groups` or `commands`. A `command` is a method call that received zero or more arguments. A `group` contains one or more `commands` with common functionality. \n\nAvailable groups: \n\n* `download`\n* `upload`\n\n### Top Level Commands\n\n#### cmd: ls\n\nList the databricks resources for a give path.\n\n````commandline\n$ databrickstools ls --path <value>\n````\n\nWhere:\n\n`--path` (string)\n> Path to folder inside databricks. \n\nExample: \n\n```text\n$ databrickstools ls --path /Shared\n```\n\n#### cmd: mkdir\n\nCreate a directory on databricks. \n\n````commandline\n$ databrickstools mkdir --path <value>\n````\n\nWhere:\n\n`--path` (string)\n> Path to folder inside databricks. \n\nExample: \n\n```text\n$ databrickstools mkdir --path /Shared/temp\n```\n\n### Group: Download\n\n#### cmd: file\n\nDownload a given file from databricks!\n\n````commandline\n$ databrickstools download file \\\n    --from-path <value> \\\n    --to-path <value> \\\n    --file-format <value>\n````\n\nWhere:\n\n`--from-path` (string)\n> Path to file inside databricks. \n\n`--to-path` (string)\n> Path in local machine. \n\n`--file-format` (string)\n> Format used to download file.\n> Default: DATABRICKSTOOLS_DEFAULT_FORMAT\n\nExample: \n\n```text\ndatabrickstools download file \\\n    --from-path /Shared/example \\\n    --to-path example \\\n    --file-format SOURCE\n```\n\n#### cmd: html\n\nDownload a notebook as an HTML file. \n\n````commandline\n$ databrickstools download html \\\n    --from-path <value> \\\n    --to-path <value>\n````\n\nWhere:\n\n`--from-path` (string)\n> Path to file inside databricks. \n\n`--to-path` (string)\n> Path in local machine. \n\nExample: \n\n```text\n$ databrickstools download html \\\n    --from-path /Shared/example \\\n    --to-path example.html\n```\n\n#### cmd: ipynb\n\nDownload a notebook as a Jupyter file. Only works for python-based notebooks. \n\n````commandline\n$ databrickstools download ipynb \\\n    --from-path <value> \\\n    --to-path <value>\n````\n\nWhere:\n\n`--from-path` (string)\n> Path to file inside databricks. \n\n`--to-path` (string)\n> Path in local machine. \n\nExample: \n\n```text\n$ databrickstools download ipynb \\\n    --from-path /Shared/example \\\n    --to-path example.ipynb\n```\n\n#### cmd: source\n\nDownload a notebook as a source file. This can be either a `.py` file for Python or a `.sc` file for Scala. \n\n````commandline\n$ databrickstools download source \\\n    --from-path <value> \\\n    --to-path <value>\n````\n\nWhere:\n\n`--from-path` (string)\n> Path to file inside databricks. \n\n`--to-path` (string)\n> Path in local machine. \n\n\nExample: \n\n```text\n$ databrickstools download source \\\n    --from-path /Shared/example \\\n    --to-path example.py\n```\n\n### Group: Upload\n\n#### cmd: markdown\n\nUpload a markdown file to databricks as a notebook. \n\n````commandline\n$ databrickstools upload markdown \\\n    --from-path <value> \\\n    --to-path <value> \\\n    --base-language <value> \\\n    --overwrite\n````\n\nWhere:\n\n`--from-path` (string)\n> Path to `file.md` in your local machine.\n\n`--to-path` (string)\n> Path to notebook on databricks.\n\n`--base-language` (string)\n> The markdown might contain multiple languages, but we'll need to define (or know) the base language of the notebook. If not present, the CLI will try to infer the base language by looking into the file-ending or fallback to: `DATABRICKSTOOLS_DEFAULT_LANGUAGE`.\n\n`--overwrite` (flag)\n> If present, the new file will overwrite the current one on databricks. \n\nExample: \n\n```text\n$ databrickstools markdown \\\n    --from-path markdown-file.md \\\n    --to-path /Shared/test \\\n    --overwrite\n```\n\n#### cmd: source\n\nSame as `markdown` but with the `SOURCE` format. \n\n## Recommendations\n\nTo get the most out of markdown please consider taking a look into:\n* [Tut](https://tpolecat.github.io/tut/)\n* [Pandoc](https://pandoc.org/)\n* [RMarkdown](https://rmarkdown.rstudio.com/lesson-1.html)\n* [Reticulate](https://rstudio.github.io/reticulate/articles/r_markdown.html)", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/rhdzmota/databrickstools-cli", "keywords": "", "license": "LICENSE.md", "maintainer": "", "maintainer_email": "", "name": "databrickstools", "package_url": "https://pypi.org/project/databrickstools/", "platform": "", "project_url": "https://pypi.org/project/databrickstools/", "project_urls": {"Homepage": "https://github.com/rhdzmota/databrickstools-cli"}, "release_url": "https://pypi.org/project/databrickstools/0.3.2/", "requires_dist": null, "requires_python": ">=3.5, <4", "summary": "A simple commandline application to manage databricks resources.", "version": "0.3.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>DatabricksTools CLI</h1>\n<p>A simple commandline application to keep in sync between databricks and your local filesystem. This project uses the databricks <a href=\"https://docs.databricks.com/dev-tools/api/latest/workspace.html\" rel=\"nofollow\">workspace api</a>.</p>\n<p>Key features:</p>\n<ul>\n<li>List and MkDir commands.</li>\n<li>Download databricks notebooks as HTML, Jupyter, or Source format.</li>\n<li>Upload file from your filesystem (source format) to create/overwrite databricks notebooks.</li>\n<li>Automatically transform markdown files to source!\n<ul>\n<li>Using markdown syntax instead of source is more convenient.</li>\n<li>Use codeblocks to change between languages (e.g. <code>python</code>, <code>scala</code>, <code>sql</code>, <code>sh</code>).</li>\n<li>Integrate local development and execution with databricks notebooks.</li>\n</ul>\n</li>\n</ul>\n<pre>$ databrickstools ls --path /Shared\n</pre>\n<pre>$ databrickstools upload markdown \\\n    --from-path exploration.md \\\n    --to-path /Shared/merchants/exploration\n</pre>\n<h2>Setup</h2>\n<p>Install via <code>pip</code>:</p>\n<pre>$ pip install databrickstools\n</pre>\n<p>Or clone the repository and install the commandline application!</p>\n<ol>\n<li>Clone: <code>git clone https://github.com/rhdzmota/databrickstools-cli</code></li>\n<li>Install: <code>pip install -e databrickstools-cli</code></li>\n</ol>\n<p><strong>Note</strong>: you'll need python 3.6 or greater.</p>\n<p>Create the <code>.env</code> file containing your environment variables.</p>\n<ol>\n<li>Create <code>.env</code> following the example <code>.env.example</code>:\n<ul>\n<li><code>cp .env.example .env</code></li>\n</ul>\n</li>\n<li>Load the variables into the environment:\n<ul>\n<li><code>export $(cat .env | xargs)</code></li>\n</ul>\n</li>\n</ol>\n<p><strong>Note</strong>: the <code>.env</code> file can be on any place of your machine. The commandline application just needs those variables to be present on the environment.</p>\n<p>Test with a simple command:</p>\n<pre>$ databrickstools ls --path /Shared\n</pre>\n<h2>Use case!</h2>\n<p>Assume you have a file named <code>exploration.md</code> with the following markdown content:</p>\n<pre># Exporatory Data Analysis\n\nThis is a file containing the initial EDA work.\n\n## Setup\n\n```python\nimport pandas as pd\nfrom sqlalchemy import create_engine \n\nconnection_string = \"...\"\nengine = create_engine(connection_string) \n```\n\n## Getting the data\n\nConsider the following invalid merchant data:\n\n```python\nSQL_INVALID_MERCHANTS = \"SELECT * FROM merchants WHERE invalid = 1\"\n\ndf = pd.read_sql(query, engine)\ndf.head()\n```\n\nLocation distribution: \n\n```python\ndf.groupby(\"state\").size().to_frame()\n```\n...\n</pre>\n<p>You could use <a href=\"https://rstudio.github.io/reticulate/articles/r_markdown.html\" rel=\"nofollow\">rmarkdown + reticulate</a> for local development and execution of that report. And then use <code>databrickstools</code> to deploy and transform this markdown file into a databricks notebook!</p>\n<pre>$ databrickstools upload markdown \\\n    --from-path exploration.md \\\n    --to-path /Shared/merchants/exploration \\\n    --base-language python \\\n    --overwrite\n</pre>\n<h2>Usage</h2>\n<p>The CLI contains <code>groups</code> or <code>commands</code>. A <code>command</code> is a method call that received zero or more arguments. A <code>group</code> contains one or more <code>commands</code> with common functionality.</p>\n<p>Available groups:</p>\n<ul>\n<li><code>download</code></li>\n<li><code>upload</code></li>\n</ul>\n<h3>Top Level Commands</h3>\n<h4>cmd: ls</h4>\n<p>List the databricks resources for a give path.</p>\n<pre>$ databrickstools ls --path &lt;value&gt;\n</pre>\n<p>Where:</p>\n<p><code>--path</code> (string)</p>\n<blockquote>\n<p>Path to folder inside databricks.</p>\n</blockquote>\n<p>Example:</p>\n<pre>$ databrickstools ls --path /Shared\n</pre>\n<h4>cmd: mkdir</h4>\n<p>Create a directory on databricks.</p>\n<pre>$ databrickstools mkdir --path &lt;value&gt;\n</pre>\n<p>Where:</p>\n<p><code>--path</code> (string)</p>\n<blockquote>\n<p>Path to folder inside databricks.</p>\n</blockquote>\n<p>Example:</p>\n<pre>$ databrickstools mkdir --path /Shared/temp\n</pre>\n<h3>Group: Download</h3>\n<h4>cmd: file</h4>\n<p>Download a given file from databricks!</p>\n<pre>$ databrickstools download file \\\n    --from-path &lt;value&gt; \\\n    --to-path &lt;value&gt; \\\n    --file-format &lt;value&gt;\n</pre>\n<p>Where:</p>\n<p><code>--from-path</code> (string)</p>\n<blockquote>\n<p>Path to file inside databricks.</p>\n</blockquote>\n<p><code>--to-path</code> (string)</p>\n<blockquote>\n<p>Path in local machine.</p>\n</blockquote>\n<p><code>--file-format</code> (string)</p>\n<blockquote>\n<p>Format used to download file.\nDefault: DATABRICKSTOOLS_DEFAULT_FORMAT</p>\n</blockquote>\n<p>Example:</p>\n<pre>databrickstools download file \\\n    --from-path /Shared/example \\\n    --to-path example \\\n    --file-format SOURCE\n</pre>\n<h4>cmd: html</h4>\n<p>Download a notebook as an HTML file.</p>\n<pre>$ databrickstools download html \\\n    --from-path &lt;value&gt; \\\n    --to-path &lt;value&gt;\n</pre>\n<p>Where:</p>\n<p><code>--from-path</code> (string)</p>\n<blockquote>\n<p>Path to file inside databricks.</p>\n</blockquote>\n<p><code>--to-path</code> (string)</p>\n<blockquote>\n<p>Path in local machine.</p>\n</blockquote>\n<p>Example:</p>\n<pre>$ databrickstools download html \\\n    --from-path /Shared/example \\\n    --to-path example.html\n</pre>\n<h4>cmd: ipynb</h4>\n<p>Download a notebook as a Jupyter file. Only works for python-based notebooks.</p>\n<pre>$ databrickstools download ipynb \\\n    --from-path &lt;value&gt; \\\n    --to-path &lt;value&gt;\n</pre>\n<p>Where:</p>\n<p><code>--from-path</code> (string)</p>\n<blockquote>\n<p>Path to file inside databricks.</p>\n</blockquote>\n<p><code>--to-path</code> (string)</p>\n<blockquote>\n<p>Path in local machine.</p>\n</blockquote>\n<p>Example:</p>\n<pre>$ databrickstools download ipynb \\\n    --from-path /Shared/example \\\n    --to-path example.ipynb\n</pre>\n<h4>cmd: source</h4>\n<p>Download a notebook as a source file. This can be either a <code>.py</code> file for Python or a <code>.sc</code> file for Scala.</p>\n<pre>$ databrickstools download source \\\n    --from-path &lt;value&gt; \\\n    --to-path &lt;value&gt;\n</pre>\n<p>Where:</p>\n<p><code>--from-path</code> (string)</p>\n<blockquote>\n<p>Path to file inside databricks.</p>\n</blockquote>\n<p><code>--to-path</code> (string)</p>\n<blockquote>\n<p>Path in local machine.</p>\n</blockquote>\n<p>Example:</p>\n<pre>$ databrickstools download source \\\n    --from-path /Shared/example \\\n    --to-path example.py\n</pre>\n<h3>Group: Upload</h3>\n<h4>cmd: markdown</h4>\n<p>Upload a markdown file to databricks as a notebook.</p>\n<pre>$ databrickstools upload markdown \\\n    --from-path &lt;value&gt; \\\n    --to-path &lt;value&gt; \\\n    --base-language &lt;value&gt; \\\n    --overwrite\n</pre>\n<p>Where:</p>\n<p><code>--from-path</code> (string)</p>\n<blockquote>\n<p>Path to <code>file.md</code> in your local machine.</p>\n</blockquote>\n<p><code>--to-path</code> (string)</p>\n<blockquote>\n<p>Path to notebook on databricks.</p>\n</blockquote>\n<p><code>--base-language</code> (string)</p>\n<blockquote>\n<p>The markdown might contain multiple languages, but we'll need to define (or know) the base language of the notebook. If not present, the CLI will try to infer the base language by looking into the file-ending or fallback to: <code>DATABRICKSTOOLS_DEFAULT_LANGUAGE</code>.</p>\n</blockquote>\n<p><code>--overwrite</code> (flag)</p>\n<blockquote>\n<p>If present, the new file will overwrite the current one on databricks.</p>\n</blockquote>\n<p>Example:</p>\n<pre>$ databrickstools markdown \\\n    --from-path markdown-file.md \\\n    --to-path /Shared/test \\\n    --overwrite\n</pre>\n<h4>cmd: source</h4>\n<p>Same as <code>markdown</code> but with the <code>SOURCE</code> format.</p>\n<h2>Recommendations</h2>\n<p>To get the most out of markdown please consider taking a look into:</p>\n<ul>\n<li><a href=\"https://tpolecat.github.io/tut/\" rel=\"nofollow\">Tut</a></li>\n<li><a href=\"https://pandoc.org/\" rel=\"nofollow\">Pandoc</a></li>\n<li><a href=\"https://rmarkdown.rstudio.com/lesson-1.html\" rel=\"nofollow\">RMarkdown</a></li>\n<li><a href=\"https://rstudio.github.io/reticulate/articles/r_markdown.html\" rel=\"nofollow\">Reticulate</a></li>\n</ul>\n\n          </div>"}, "last_serial": 6989924, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "cccb730e05fbf044355c64fc0f8f6624", "sha256": "df0e31d11cc33acf9947b9144e5781f9501094900793d970c2a81132a6b9d638"}, "downloads": -1, "filename": "databrickstools-0.1.0.tar.gz", "has_sig": false, "md5_digest": "cccb730e05fbf044355c64fc0f8f6624", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5, <4", "size": 10617, "upload_time": "2020-04-05T08:05:40", "upload_time_iso_8601": "2020-04-05T08:05:40.944869Z", "url": "https://files.pythonhosted.org/packages/1c/e1/1bafca2e793673667bb98ca04fd20e80242110a4e67d5bc4c6748333ff0c/databrickstools-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "cf171c843c9d189214164979112db6e4", "sha256": "a56558e640401ee7706cc4f5498f3115b2a2176b50b0c954109cff96c07feecf"}, "downloads": -1, "filename": "databrickstools-0.1.1.tar.gz", "has_sig": false, "md5_digest": "cf171c843c9d189214164979112db6e4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5, <4", "size": 10606, "upload_time": "2020-04-05T08:22:15", "upload_time_iso_8601": "2020-04-05T08:22:15.759742Z", "url": "https://files.pythonhosted.org/packages/c3/5d/f1025decc6bb85486efbdc6755d6517a350cf15236fcc714913ab011e5b4/databrickstools-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "6f002640d820416d97bf0f76bf0fdd66", "sha256": "bce9aaacda2e82707c5196eaa7afe4e885ce0bd1423ab330c029316875470c36"}, "downloads": -1, "filename": "databrickstools-0.1.2.tar.gz", "has_sig": false, "md5_digest": "6f002640d820416d97bf0f76bf0fdd66", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5, <4", "size": 10585, "upload_time": "2020-04-05T08:23:17", "upload_time_iso_8601": "2020-04-05T08:23:17.282451Z", "url": "https://files.pythonhosted.org/packages/13/2b/3603a212196dfeda69bc2e623ec95dfa0dc307727a6431c81f3f9113929e/databrickstools-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "4de46f010963d2cc7a8585ea75b4bb67", "sha256": "42eafd5b6012f45a2290a2c7f261e4e6c08be59ebc895b4e7e9ab3c2c2282cd5"}, "downloads": -1, "filename": "databrickstools-0.1.3.tar.gz", "has_sig": false, "md5_digest": "4de46f010963d2cc7a8585ea75b4bb67", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5, <4", "size": 10199, "upload_time": "2020-04-06T03:51:09", "upload_time_iso_8601": "2020-04-06T03:51:09.347743Z", "url": "https://files.pythonhosted.org/packages/52/99/fb834c66ddb4cb3500b1d726cdba2ba7ab2adf6fed001ae3acf86b560d8b/databrickstools-0.1.3.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "2b6e52082ddf9d63885ad4b936b1bd94", "sha256": "080e4b93c5411d423c7a21fde1caed969f661d10345dfcc0b10d47c00cb0b429"}, "downloads": -1, "filename": "databrickstools-0.2.0.tar.gz", "has_sig": false, "md5_digest": "2b6e52082ddf9d63885ad4b936b1bd94", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5, <4", "size": 10319, "upload_time": "2020-04-06T19:37:44", "upload_time_iso_8601": "2020-04-06T19:37:44.925016Z", "url": "https://files.pythonhosted.org/packages/79/8f/446fb5a665440e9834dfa12b801c2a06467fc08e010a8cd959f75fabe38a/databrickstools-0.2.0.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "5e90ae55a779ff755ca896bf320dd7b2", "sha256": "7ba599cb838e3ae1afb34d935d27d646faa0bfdbf035cf4d97b83585d164ca1c"}, "downloads": -1, "filename": "databrickstools-0.3.0.tar.gz", "has_sig": false, "md5_digest": "5e90ae55a779ff755ca896bf320dd7b2", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5, <4", "size": 10449, "upload_time": "2020-04-07T03:35:05", "upload_time_iso_8601": "2020-04-07T03:35:05.077924Z", "url": "https://files.pythonhosted.org/packages/a6/d9/aa7588709f38ccfeaa09b9eb45f6f1b21e700d8f78afaaa92f273ad6a183/databrickstools-0.3.0.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "8ad645889fbd8b9a9ab4c157152c20c7", "sha256": "e78540ae62e2318042a10098e96807fdb3f836faf5dc5acc92b53a32fa7f20d6"}, "downloads": -1, "filename": "databrickstools-0.3.1.tar.gz", "has_sig": false, "md5_digest": "8ad645889fbd8b9a9ab4c157152c20c7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5, <4", "size": 10490, "upload_time": "2020-04-08T00:56:09", "upload_time_iso_8601": "2020-04-08T00:56:09.213347Z", "url": "https://files.pythonhosted.org/packages/ab/ae/2178bd7ebb9a079cbf666ee33745a6fc77e24b3d22b0ff6e08af960ac97f/databrickstools-0.3.1.tar.gz", "yanked": false}], "0.3.2": [{"comment_text": "", "digests": {"md5": "534c4d518ca41f11e21fb10684812479", "sha256": "b70aedf9a1a59bbdee7e097a46a601dada4ea5db67a4f576ac95c6df16acc370"}, "downloads": -1, "filename": "databrickstools-0.3.2.tar.gz", "has_sig": false, "md5_digest": "534c4d518ca41f11e21fb10684812479", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5, <4", "size": 10558, "upload_time": "2020-04-09T23:59:22", "upload_time_iso_8601": "2020-04-09T23:59:22.716755Z", "url": "https://files.pythonhosted.org/packages/95/16/3caf8cdbab091f96925719aa22021c57d91e657fa771501cb16bdc9bbc26/databrickstools-0.3.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "534c4d518ca41f11e21fb10684812479", "sha256": "b70aedf9a1a59bbdee7e097a46a601dada4ea5db67a4f576ac95c6df16acc370"}, "downloads": -1, "filename": "databrickstools-0.3.2.tar.gz", "has_sig": false, "md5_digest": "534c4d518ca41f11e21fb10684812479", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5, <4", "size": 10558, "upload_time": "2020-04-09T23:59:22", "upload_time_iso_8601": "2020-04-09T23:59:22.716755Z", "url": "https://files.pythonhosted.org/packages/95/16/3caf8cdbab091f96925719aa22021c57d91e657fa771501cb16bdc9bbc26/databrickstools-0.3.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:40:29 2020"}