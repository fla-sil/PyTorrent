{"info": {"author": "Rune Halvorsen", "author_email": "runefh@gmail.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Programming Language :: Python"], "description": ".. -*- restructuredtext -*-\n\n##############################################\nSpotimeta - Spotify metadata search and lookup\n##############################################\n\nIntroduction\n------------\n\nSpotimeta is a simple library for getting data from Spotify's metadata API.\nAvailable functions is searching for artists, albums and tracks, as well\nas looking up the same based on Spotify URIs. The data is returned as\nsimple python dictionaries.\n\nNOTE:\n\nThis product uses a SPOTIFY API but is not endorsed, certified or otherwise \napproved in any way by Spotify. Spotify is the registered trade mark of the \nSpotify Group.\n\nFor more information about the metadata API, see\n http://developer.spotify.com/en/metadata-api/overview/\n\nExamples\n--------\n\n>>> import spotimeta\n\n\nSearch for a track\n\n>>> search = spotimeta.search_track(\"Trip back to childhood\")\n>>> search[\"total_results\"]\n1\n\nPrint the artist of that track\n\n>>> artist = search[\"result\"][0][\"artist\"]\n>>> artist[\"name\"]\nu'St-Petersburg Ska-Jazz Review'\n\nLook up more information about that artist:\n\n>>> lookup = spotimeta.lookup(artist[\"href\"], detail=1)\n>>> for album in lookup[\"result\"][\"albums\"]:\n...     album[\"name\"]\nu'Too Good To Be True'\nu'Too Good To Be True'\nu'Live At The Red Club'\n\nIt's also possible to look up metadata using spotify URLs:\n\n>>> track = spotimeta.lookup(\"http://open.spotify.com/track/3Z8cX6y0SeJIsI3yxoaQ8K\")\n>>> print track[\"result\"][\"artist\"][\"name\"], \"-\", track[\"result\"][\"name\"] \nKings Of Leon - Closer\n\nFor anything but the simples use-cases one should use caching.\nCaching is enabled by making a Metadata instance and passing it\nsomething that is a mapping type. For instance a dictionary:\n\n>>> metacache = {}\n>>> metadata = spotimeta.Metadata(cache=metacache)\n\nThe metadata instance has exactly the same methods as the module itself.\nCaching happens automatically as long as there is a cache object set.\n\n>>> data = metadata.lookup(\"spotify:track:3kofFW93aMr28qx1BKps7A\")\n>>> data = metadata.lookup(\"spotify:track:3kofFW93aMr28qx1BKps7A\")\n\nThis will only cause a single request. Data is cached for as long\nas the Expiry header on the first request says it should.\n\n\nTodo\n----\n\n- Sphinxify docs\n- Testcases for search, not just search parser\n- Deal with all the fixmes\n\n\nChangelog\n---------\n\nSee the CHANGELOG file\n\nContact\n-------\n\nThe author is Rune Halvorsen <runefh@gmail.com>. The project resides at\nhttp://bitbucket.org/runeh/spotimeta . If you find bugs, or have feature\nrequests, please report them in the project site issue tracker. Patches \nvery welcome.\n\nAlso, see AUTHORS file for full list of contributors\n\nLicense\n-------\n\nThis software is licensed under the ``New BSD License``. See the ``LICENCE``\nfile in the top distribution directory for the full license text.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://bitbucket.org/runeh/spotimeta/", "keywords": "Spotify", "license": "BSD", "maintainer": null, "maintainer_email": null, "name": "spotimeta", "package_url": "https://pypi.org/project/spotimeta/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/spotimeta/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://bitbucket.org/runeh/spotimeta/"}, "release_url": "https://pypi.org/project/spotimeta/0.2/", "requires_dist": null, "requires_python": null, "summary": "\"Library for querying the Spotify metadata service", "version": "0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"introduction\">\n<h2>Introduction</h2>\n<p>Spotimeta is a simple library for getting data from Spotify\u2019s metadata API.\nAvailable functions is searching for artists, albums and tracks, as well\nas looking up the same based on Spotify URIs. The data is returned as\nsimple python dictionaries.</p>\n<p>NOTE:</p>\n<p>This product uses a SPOTIFY API but is not endorsed, certified or otherwise\napproved in any way by Spotify. Spotify is the registered trade mark of the\nSpotify Group.</p>\n<dl>\n<dt>For more information about the metadata API, see</dt>\n<dd><a href=\"http://developer.spotify.com/en/metadata-api/overview/\" rel=\"nofollow\">http://developer.spotify.com/en/metadata-api/overview/</a></dd>\n</dl>\n</div>\n<div id=\"examples\">\n<h2>Examples</h2>\n<pre>&gt;&gt;&gt; import spotimeta\n</pre>\n<p>Search for a track</p>\n<pre>&gt;&gt;&gt; search = spotimeta.search_track(\"Trip back to childhood\")\n&gt;&gt;&gt; search[\"total_results\"]\n1\n</pre>\n<p>Print the artist of that track</p>\n<pre>&gt;&gt;&gt; artist = search[\"result\"][0][\"artist\"]\n&gt;&gt;&gt; artist[\"name\"]\nu'St-Petersburg Ska-Jazz Review'\n</pre>\n<p>Look up more information about that artist:</p>\n<pre>&gt;&gt;&gt; lookup = spotimeta.lookup(artist[\"href\"], detail=1)\n&gt;&gt;&gt; for album in lookup[\"result\"][\"albums\"]:\n...     album[\"name\"]\nu'Too Good To Be True'\nu'Too Good To Be True'\nu'Live At The Red Club'\n</pre>\n<p>It\u2019s also possible to look up metadata using spotify URLs:</p>\n<pre>&gt;&gt;&gt; track = spotimeta.lookup(\"http://open.spotify.com/track/3Z8cX6y0SeJIsI3yxoaQ8K\")\n&gt;&gt;&gt; print track[\"result\"][\"artist\"][\"name\"], \"-\", track[\"result\"][\"name\"]\nKings Of Leon - Closer\n</pre>\n<p>For anything but the simples use-cases one should use caching.\nCaching is enabled by making a Metadata instance and passing it\nsomething that is a mapping type. For instance a dictionary:</p>\n<pre>&gt;&gt;&gt; metacache = {}\n&gt;&gt;&gt; metadata = spotimeta.Metadata(cache=metacache)\n</pre>\n<p>The metadata instance has exactly the same methods as the module itself.\nCaching happens automatically as long as there is a cache object set.</p>\n<pre>&gt;&gt;&gt; data = metadata.lookup(\"spotify:track:3kofFW93aMr28qx1BKps7A\")\n&gt;&gt;&gt; data = metadata.lookup(\"spotify:track:3kofFW93aMr28qx1BKps7A\")\n</pre>\n<p>This will only cause a single request. Data is cached for as long\nas the Expiry header on the first request says it should.</p>\n</div>\n<div id=\"todo\">\n<h2>Todo</h2>\n<ul>\n<li>Sphinxify docs</li>\n<li>Testcases for search, not just search parser</li>\n<li>Deal with all the fixmes</li>\n</ul>\n</div>\n<div id=\"changelog\">\n<h2>Changelog</h2>\n<p>See the CHANGELOG file</p>\n</div>\n<div id=\"contact\">\n<h2>Contact</h2>\n<p>The author is Rune Halvorsen &lt;<a href=\"mailto:runefh%40gmail.com\">runefh<span>@</span>gmail<span>.</span>com</a>&gt;. The project resides at\n<a href=\"http://bitbucket.org/runeh/spotimeta\" rel=\"nofollow\">http://bitbucket.org/runeh/spotimeta</a> . If you find bugs, or have feature\nrequests, please report them in the project site issue tracker. Patches\nvery welcome.</p>\n<p>Also, see AUTHORS file for full list of contributors</p>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>This software is licensed under the <tt>New BSD License</tt>. See the <tt>LICENCE</tt>\nfile in the top distribution directory for the full license text.</p>\n</div>\n\n          </div>"}, "last_serial": 799967, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "dfc2a79d79eeb81a455f656b4dd6e6fe", "sha256": "1f20e535deb13586aeab0a0dcd685cf0e006c1c0ff47c349073e26df3595dc44"}, "downloads": -1, "filename": "spotimeta-0.1.tar.gz", "has_sig": false, "md5_digest": "dfc2a79d79eeb81a455f656b4dd6e6fe", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6670, "upload_time": "2009-11-02T00:35:24", "upload_time_iso_8601": "2009-11-02T00:35:24.969880Z", "url": "https://files.pythonhosted.org/packages/1a/fb/e0658a8afc34912473ce895ff26453153dbe65ff7f2cc0f5305d6efb191c/spotimeta-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "c65fe2e9a4d7adc227ec025858544b8c", "sha256": "a6f698848119c24a61fa4bd154446ffff2f49b6830d39b92f728607c5950a9a7"}, "downloads": -1, "filename": "spotimeta-0.2.tar.gz", "has_sig": false, "md5_digest": "c65fe2e9a4d7adc227ec025858544b8c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8128, "upload_time": "2009-11-05T13:10:37", "upload_time_iso_8601": "2009-11-05T13:10:37.991418Z", "url": "https://files.pythonhosted.org/packages/7e/f4/2c2444207bc84d3812adf968d77b3201bbdb65e1d0d721f8ec76a0f48d4a/spotimeta-0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c65fe2e9a4d7adc227ec025858544b8c", "sha256": "a6f698848119c24a61fa4bd154446ffff2f49b6830d39b92f728607c5950a9a7"}, "downloads": -1, "filename": "spotimeta-0.2.tar.gz", "has_sig": false, "md5_digest": "c65fe2e9a4d7adc227ec025858544b8c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8128, "upload_time": "2009-11-05T13:10:37", "upload_time_iso_8601": "2009-11-05T13:10:37.991418Z", "url": "https://files.pythonhosted.org/packages/7e/f4/2c2444207bc84d3812adf968d77b3201bbdb65e1d0d721f8ec76a0f48d4a/spotimeta-0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:04:29 2020"}