{"info": {"author": "Saul Shanabrook", "author_email": "saul@quansight.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License"], "description": "# `jaeger-browser` <br> ![PyPI](https://img.shields.io/pypi/v/jaeger_browser?style=flat-square) ![npm](https://img.shields.io/npm/v/jaeger-browser?style=flat-square)\n\n\nThis repo is to help you submit [Jaeger](https://www.jaegertracing.io/) traces from your browser. It is a workaround\nuntil [a browser client is implemented](https://github.com/jaegertracing/jaeger-client-node/issues/109).\n\n\nIt contains a Python package that runs a REST API which submits traces locally.\n\nIt also contains a TypeScript library that connects to this REST API.\n\n\nIf you want to use this alongside your Jupyter server, check out\n[`jupyter-jaeger`](https://github.com/Quansight/jupyter-jaeger). There is an example in that repo of starting a span in a kernel server side and then continueing it on the clien side.\n\nIn turn, we use that to instrument [plotting interactive Vega visualizations with a Python backend](https://github.com/quansight/ibis-vega-transform).\n\n## Limitations\n\n* Doesn't implement full Jaeger API just a subset I needed. PRs welcome.\n* Hard coded to connect to a local Jaeger server. PRs welcome.\n* No sampling implemented, it will collect all traces. PRs welcome.\n\n\n\n## Usage\n\nFirst get the REST server installed and started:\n\n```bash\n# install jaeger-all-in-one\nconda -c conda-forge install jaeger\n\n# Install the REST server\npip install jaeger_browser\n\n# Start jaeger all in one\njaeger-all-in-one\n# Start the REST server\nenv PORT=8080 jaeger-browser\n```\n\n\nThen install the client side library and connect to it:\n\n```bash\nyarn add jaeger-browser\n```\n\n```typescript\n\nimport {Client} from 'jaeger-browser';\n\n\nconst client = new Client(new URL('http://localhost:8080/'))\n\n\n\nasync function doThings(originalExtractedScan: object): Promise<object> {\n    // Start a span based on some text-map encoded data\n    const span = await client.startSpanExtract({\n        name: 'new-span',\n        reference: originalExtractedScan,\n        relationship: 'child_of'\n    });\n    // create a new span under it\n    const newSpan = await client.startSpan({\n        name: 'other-span',\n        reference: span,\n        relationship: 'child_of'\n    })\n\n    // Finish this inner span\n    await client.finishSpan(newSpan);\n\n    // return the span we started text-map encoded\n    return await client.injectSpan(span);\n}\n```\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Quansight/jaeger-browser", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "jaeger_browser", "package_url": "https://pypi.org/project/jaeger_browser/", "platform": "", "project_url": "https://pypi.org/project/jaeger_browser/", "project_urls": {"Homepage": "https://github.com/Quansight/jaeger-browser"}, "release_url": "https://pypi.org/project/jaeger_browser/1.0.1/", "requires_dist": ["jaeger-client", "uvicorn", "starlette", "mypy-extensions", "typing_extensions"], "requires_python": ">=3.6", "summary": "Python HTTP server to record traces from the browser.", "version": "1.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1><code>jaeger-browser</code> <br> <img alt=\"PyPI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/cb1f9cd3132f97627d0b0ad9dca9ba237b115091/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f6a61656765725f62726f777365723f7374796c653d666c61742d737175617265\"> <img alt=\"npm\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/851102c9dc6e72588c7f17ee320b71135c82757b/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f762f6a61656765722d62726f777365723f7374796c653d666c61742d737175617265\"></h1>\n<p>This repo is to help you submit <a href=\"https://www.jaegertracing.io/\" rel=\"nofollow\">Jaeger</a> traces from your browser. It is a workaround\nuntil <a href=\"https://github.com/jaegertracing/jaeger-client-node/issues/109\" rel=\"nofollow\">a browser client is implemented</a>.</p>\n<p>It contains a Python package that runs a REST API which submits traces locally.</p>\n<p>It also contains a TypeScript library that connects to this REST API.</p>\n<p>If you want to use this alongside your Jupyter server, check out\n<a href=\"https://github.com/Quansight/jupyter-jaeger\" rel=\"nofollow\"><code>jupyter-jaeger</code></a>. There is an example in that repo of starting a span in a kernel server side and then continueing it on the clien side.</p>\n<p>In turn, we use that to instrument <a href=\"https://github.com/quansight/ibis-vega-transform\" rel=\"nofollow\">plotting interactive Vega visualizations with a Python backend</a>.</p>\n<h2>Limitations</h2>\n<ul>\n<li>Doesn't implement full Jaeger API just a subset I needed. PRs welcome.</li>\n<li>Hard coded to connect to a local Jaeger server. PRs welcome.</li>\n<li>No sampling implemented, it will collect all traces. PRs welcome.</li>\n</ul>\n<h2>Usage</h2>\n<p>First get the REST server installed and started:</p>\n<pre><span class=\"c1\"># install jaeger-all-in-one</span>\nconda -c conda-forge install jaeger\n\n<span class=\"c1\"># Install the REST server</span>\npip install jaeger_browser\n\n<span class=\"c1\"># Start jaeger all in one</span>\njaeger-all-in-one\n<span class=\"c1\"># Start the REST server</span>\nenv <span class=\"nv\">PORT</span><span class=\"o\">=</span><span class=\"m\">8080</span> jaeger-browser\n</pre>\n<p>Then install the client side library and connect to it:</p>\n<pre>yarn add jaeger-browser\n</pre>\n<pre><span class=\"kr\">import</span> <span class=\"p\">{</span><span class=\"nx\">Client</span><span class=\"p\">}</span> <span class=\"nx\">from</span> <span class=\"s1\">'jaeger-browser'</span><span class=\"p\">;</span>\n\n\n<span class=\"kr\">const</span> <span class=\"nx\">client</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Client</span><span class=\"p\">(</span><span class=\"k\">new</span> <span class=\"nx\">URL</span><span class=\"p\">(</span><span class=\"s1\">'http://localhost:8080/'</span><span class=\"p\">))</span>\n\n\n\n<span class=\"nx\">async</span> <span class=\"kd\">function</span> <span class=\"nx\">doThings</span><span class=\"p\">(</span><span class=\"nx\">originalExtractedScan</span>: <span class=\"kt\">object</span><span class=\"p\">)</span><span class=\"o\">:</span> <span class=\"nx\">Promise</span><span class=\"o\">&lt;</span><span class=\"nx\">object</span><span class=\"o\">&gt;</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// Start a span based on some text-map encoded data</span>\n    <span class=\"kr\">const</span> <span class=\"nx\">span</span> <span class=\"o\">=</span> <span class=\"nx\">await</span> <span class=\"nx\">client</span><span class=\"p\">.</span><span class=\"nx\">startSpanExtract</span><span class=\"p\">({</span>\n        <span class=\"nx\">name</span><span class=\"o\">:</span> <span class=\"s1\">'new-span'</span><span class=\"p\">,</span>\n        <span class=\"nx\">reference</span>: <span class=\"kt\">originalExtractedScan</span><span class=\"p\">,</span>\n        <span class=\"nx\">relationship</span><span class=\"o\">:</span> <span class=\"s1\">'child_of'</span>\n    <span class=\"p\">});</span>\n    <span class=\"c1\">// create a new span under it</span>\n    <span class=\"kr\">const</span> <span class=\"nx\">newSpan</span> <span class=\"o\">=</span> <span class=\"nx\">await</span> <span class=\"nx\">client</span><span class=\"p\">.</span><span class=\"nx\">startSpan</span><span class=\"p\">({</span>\n        <span class=\"nx\">name</span><span class=\"o\">:</span> <span class=\"s1\">'other-span'</span><span class=\"p\">,</span>\n        <span class=\"nx\">reference</span>: <span class=\"kt\">span</span><span class=\"p\">,</span>\n        <span class=\"nx\">relationship</span><span class=\"o\">:</span> <span class=\"s1\">'child_of'</span>\n    <span class=\"p\">})</span>\n\n    <span class=\"c1\">// Finish this inner span</span>\n    <span class=\"nx\">await</span> <span class=\"nx\">client</span><span class=\"p\">.</span><span class=\"nx\">finishSpan</span><span class=\"p\">(</span><span class=\"nx\">newSpan</span><span class=\"p\">);</span>\n\n    <span class=\"c1\">// return the span we started text-map encoded</span>\n    <span class=\"k\">return</span> <span class=\"nx\">await</span> <span class=\"nx\">client</span><span class=\"p\">.</span><span class=\"nx\">injectSpan</span><span class=\"p\">(</span><span class=\"nx\">span</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</pre>\n\n          </div>"}, "last_serial": 6156785, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "598a7e697d2eac80c0e4dfb8c966e65f", "sha256": "c0ca5744fd4ee78ca5ab3d5d420c64ea900052bf22247a5b0c02ca407ef8b0f4"}, "downloads": -1, "filename": "jaeger_browser-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "598a7e697d2eac80c0e4dfb8c966e65f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 6515, "upload_time": "2019-10-25T00:29:22", "upload_time_iso_8601": "2019-10-25T00:29:22.217854Z", "url": "https://files.pythonhosted.org/packages/68/a4/dd0179078dd6c776e64d41bc703a35d461b12792310514dfe54c982c0054/jaeger_browser-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a3c268c93c91cc4f872e26e13601d3c4", "sha256": "d4b87c6beb9f5da60ca01ebfeb438425e724228bb388fefa1e7ff115d4222fdb"}, "downloads": -1, "filename": "jaeger_browser-1.0.0.tar.gz", "has_sig": false, "md5_digest": "a3c268c93c91cc4f872e26e13601d3c4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 4653, "upload_time": "2019-10-25T00:29:24", "upload_time_iso_8601": "2019-10-25T00:29:24.433626Z", "url": "https://files.pythonhosted.org/packages/9d/b6/5342d6f51133308dccbe69f2df4f4a258c22313cd9ee612d733a44a298ff/jaeger_browser-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "b367ffb6f939e759f6880ed3d3a04bf8", "sha256": "176442772510bedb46e47a4db1a24429a406b612165d2db25fe18e7619182f4b"}, "downloads": -1, "filename": "jaeger_browser-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "b367ffb6f939e759f6880ed3d3a04bf8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 6622, "upload_time": "2019-11-18T16:17:38", "upload_time_iso_8601": "2019-11-18T16:17:38.329992Z", "url": "https://files.pythonhosted.org/packages/66/99/78e6692a0cc1b01821d2895fc182c4ed3c5b67c66d7a81918d2eab4add15/jaeger_browser-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "913b0bc37c3d17de568d5a1bc780bed3", "sha256": "75b019c8a3f66254fece0517ddae17064d1e14b90716270eac6039dd23af41d4"}, "downloads": -1, "filename": "jaeger_browser-1.0.1.tar.gz", "has_sig": false, "md5_digest": "913b0bc37c3d17de568d5a1bc780bed3", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 4757, "upload_time": "2019-11-18T16:17:39", "upload_time_iso_8601": "2019-11-18T16:17:39.911766Z", "url": "https://files.pythonhosted.org/packages/f4/dc/76d789d1f3ab38dda369ad41242aa61cd139ebc94b89bc160e6474f1d057/jaeger_browser-1.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b367ffb6f939e759f6880ed3d3a04bf8", "sha256": "176442772510bedb46e47a4db1a24429a406b612165d2db25fe18e7619182f4b"}, "downloads": -1, "filename": "jaeger_browser-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "b367ffb6f939e759f6880ed3d3a04bf8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 6622, "upload_time": "2019-11-18T16:17:38", "upload_time_iso_8601": "2019-11-18T16:17:38.329992Z", "url": "https://files.pythonhosted.org/packages/66/99/78e6692a0cc1b01821d2895fc182c4ed3c5b67c66d7a81918d2eab4add15/jaeger_browser-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "913b0bc37c3d17de568d5a1bc780bed3", "sha256": "75b019c8a3f66254fece0517ddae17064d1e14b90716270eac6039dd23af41d4"}, "downloads": -1, "filename": "jaeger_browser-1.0.1.tar.gz", "has_sig": false, "md5_digest": "913b0bc37c3d17de568d5a1bc780bed3", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 4757, "upload_time": "2019-11-18T16:17:39", "upload_time_iso_8601": "2019-11-18T16:17:39.911766Z", "url": "https://files.pythonhosted.org/packages/f4/dc/76d789d1f3ab38dda369ad41242aa61cd139ebc94b89bc160e6474f1d057/jaeger_browser-1.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:53:22 2020"}