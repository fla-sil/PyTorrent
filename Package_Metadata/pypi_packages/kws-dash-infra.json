{"info": {"author": "Mathias Ngo", "author_email": "", "bugtrack_url": null, "classifiers": ["License :: Other/Proprietary License", "Programming Language :: Python :: 3.7"], "description": "# A Dash Infrastructure Framework\n\n## Quickstart\n\n\n\n## Introduction\n\nThis package defines a standard framework for the development of Dash Applications, both in the context of prototyping and production applications.\n\nThe framework relies on several core concepts, which are the building blocks of an application.\n\n- [Callbacks](#Callbacks) are an abstraction for Dash Apps function.\n  They perform the conversion between the Dash inputs, the core function and the Dash outputs.\n  Therefore a callback should at least be composed of a `_pre_function_hook` and a `_post_function_hook`, wrapping a function representing the core functionality.\n- [Components](#Components) are an abstraction for Dash components.\n  A Component is an object which has self contained Dash callbacks.\n  Those callbacks should only operate on the functionality of the Component, but have no meaningful functionality.\n  For instance, the `StoreComponent` has a callback to store the outputs from an another Callback into its state.\n- [Dash Apps](#Dash-Apps) are an abstraction for Dash standard Application.\n  A Dash Application has one or multiple `Component`s, and `Callback`s.\n- [Super Apps](#Super-Apps) are a grouping of multiple `DashApp`s inside a global application.\n  Super apps expose an API for every core Callback registered inside it.\n\nIn addition to this framework, this package adds a few helper classes, such as a `StoreComponent` or a `FigureComponent`.\n\n## Core Concepts\n\n### Callbacks\n\n#### Example\n\n```python\n# callbacks.py\nfrom dash_infra import as_callback\nimport numpy as np\n\ndef to_linspace(state, num_points):\n    # A hook function takes the state of the callback as a first argument\n\n    return np.linspace(0, 100, num_points)\n\ndef to_figure(state, array: np.ndarray):\n    return {\"data\": [dict(x=state.current_inputs[0], y=outputs, mode=\"markers\")]}\n\n\n@as_callback(                           # Changes the function into an unbound callback\n    NumpySerializer,                    # Mixins adds capabilities to the callback\n    pre_func_hooks=[to_linspace],       # Takes the input and changes it into a np.array\n    post_func_hooks=[to_figure],        # Takes the output and converts it into a plotly graph\n)\ndef square(x: \"Arrayable\") -> np.ndarray:\n    \"\"\"\n    Computes the square of an array x\n    \"\"\"\n    # the function is defined as it would normally be\n    return np.array(x) ** 2\n\n```\n\nAt this point the callback `square` is not bound to any app or inputs.\nIt is still a callable, and `square([1,2,3])` returns `[1, 4, 9]`.\n\n### Components\n\n#### Example\n\n```python\n# components.py\nfrom dash_core_components import Graph, Slider\n\nfrom dash_infra import as_component\nfrom dash_infra.components.groups import ComponentGroup\nfrom dash_infra.html_helpers.divs import Col\n\n\ngraph_square = as_component(Graph, \"square\", container=Col(s=6))\nslider = as_component(Slider, \"input\", container=Col(s=6))\ngroup = ComponentGroup(\"main\", slider, graph_square, graph_cube)\n\n```\n\nStandard dash components can be transferred into our framework with `as_component(obj, id, container)`.\nThis conversion allows easier registry in the Dash application\n\n### Dash Apps\n\n#### Example\n\n```python\n# app.py\n\nfrom dash_infra import KWSDashApp\nfrom .components import group\nfrom .callbacks import square\n\ndash_app = KWSDashApp(\"A multplier component\", doc=__doc__)\ndash_app.register_component(group)\ndash_app.register_callback(\n    square, \n    outputs=(\"square\", \"figure\"), \n    inputs=[(\"input\", \"value\")]\n)\n\n```\n\n### Super Apps\n\nSuper apps wrap Dash apps, and provide the Dash callbacks with a restful API.\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "", "license": "kilowattsol", "maintainer": "", "maintainer_email": "", "name": "kws-dash-infra", "package_url": "https://pypi.org/project/kws-dash-infra/", "platform": "", "project_url": "https://pypi.org/project/kws-dash-infra/", "project_urls": null, "release_url": "https://pypi.org/project/kws-dash-infra/0.2.0/", "requires_dist": ["dash", "numpy", "pandas", "python-slugify", "twine ; extra == 'deploy'", "black ; extra == 'dev'", "rope ; extra == 'dev'", "ipython ; extra == 'dev'", "isort ; extra == 'dev'", "mypy ; extra == 'dev'", "pre-commit ; extra == 'dev'", "pytest ; extra == 'dev'", "sphinx ; extra == 'docs'", "sphinx-autodoc-typehints ; extra == 'docs'", "seaborn ; extra == 'examples'", "pytest ; extra == 'test'", "pytest-cov ; extra == 'test'"], "requires_python": "", "summary": "\"Helpers to build a dash kws application\"", "version": "0.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>A Dash Infrastructure Framework</h1>\n<h2>Quickstart</h2>\n<h2>Introduction</h2>\n<p>This package defines a standard framework for the development of Dash Applications, both in the context of prototyping and production applications.</p>\n<p>The framework relies on several core concepts, which are the building blocks of an application.</p>\n<ul>\n<li><a href=\"#Callbacks\" rel=\"nofollow\">Callbacks</a> are an abstraction for Dash Apps function.\nThey perform the conversion between the Dash inputs, the core function and the Dash outputs.\nTherefore a callback should at least be composed of a <code>_pre_function_hook</code> and a <code>_post_function_hook</code>, wrapping a function representing the core functionality.</li>\n<li><a href=\"#Components\" rel=\"nofollow\">Components</a> are an abstraction for Dash components.\nA Component is an object which has self contained Dash callbacks.\nThose callbacks should only operate on the functionality of the Component, but have no meaningful functionality.\nFor instance, the <code>StoreComponent</code> has a callback to store the outputs from an another Callback into its state.</li>\n<li><a href=\"#Dash-Apps\" rel=\"nofollow\">Dash Apps</a> are an abstraction for Dash standard Application.\nA Dash Application has one or multiple <code>Component</code>s, and <code>Callback</code>s.</li>\n<li><a href=\"#Super-Apps\" rel=\"nofollow\">Super Apps</a> are a grouping of multiple <code>DashApp</code>s inside a global application.\nSuper apps expose an API for every core Callback registered inside it.</li>\n</ul>\n<p>In addition to this framework, this package adds a few helper classes, such as a <code>StoreComponent</code> or a <code>FigureComponent</code>.</p>\n<h2>Core Concepts</h2>\n<h3>Callbacks</h3>\n<h4>Example</h4>\n<pre><span class=\"c1\"># callbacks.py</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dash_infra</span> <span class=\"kn\">import</span> <span class=\"n\">as_callback</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">to_linspace</span><span class=\"p\">(</span><span class=\"n\">state</span><span class=\"p\">,</span> <span class=\"n\">num_points</span><span class=\"p\">):</span>\n    <span class=\"c1\"># A hook function takes the state of the callback as a first argument</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">linspace</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"n\">num_points</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">to_figure</span><span class=\"p\">(</span><span class=\"n\">state</span><span class=\"p\">,</span> <span class=\"n\">array</span><span class=\"p\">:</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"s2\">\"data\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">=</span><span class=\"n\">state</span><span class=\"o\">.</span><span class=\"n\">current_inputs</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">y</span><span class=\"o\">=</span><span class=\"n\">outputs</span><span class=\"p\">,</span> <span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"s2\">\"markers\"</span><span class=\"p\">)]}</span>\n\n\n<span class=\"nd\">@as_callback</span><span class=\"p\">(</span>                           <span class=\"c1\"># Changes the function into an unbound callback</span>\n    <span class=\"n\">NumpySerializer</span><span class=\"p\">,</span>                    <span class=\"c1\"># Mixins adds capabilities to the callback</span>\n    <span class=\"n\">pre_func_hooks</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">to_linspace</span><span class=\"p\">],</span>       <span class=\"c1\"># Takes the input and changes it into a np.array</span>\n    <span class=\"n\">post_func_hooks</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">to_figure</span><span class=\"p\">],</span>        <span class=\"c1\"># Takes the output and converts it into a plotly graph</span>\n<span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">square</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"s2\">\"Arrayable\"</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">:</span>\n    <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">    Computes the square of an array x</span>\n<span class=\"sd\">    \"\"\"</span>\n    <span class=\"c1\"># the function is defined as it would normally be</span>\n    <span class=\"k\">return</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"o\">**</span> <span class=\"mi\">2</span>\n</pre>\n<p>At this point the callback <code>square</code> is not bound to any app or inputs.\nIt is still a callable, and <code>square([1,2,3])</code> returns <code>[1, 4, 9]</code>.</p>\n<h3>Components</h3>\n<h4>Example</h4>\n<pre><span class=\"c1\"># components.py</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dash_core_components</span> <span class=\"kn\">import</span> <span class=\"n\">Graph</span><span class=\"p\">,</span> <span class=\"n\">Slider</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">dash_infra</span> <span class=\"kn\">import</span> <span class=\"n\">as_component</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dash_infra.components.groups</span> <span class=\"kn\">import</span> <span class=\"n\">ComponentGroup</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dash_infra.html_helpers.divs</span> <span class=\"kn\">import</span> <span class=\"n\">Col</span>\n\n\n<span class=\"n\">graph_square</span> <span class=\"o\">=</span> <span class=\"n\">as_component</span><span class=\"p\">(</span><span class=\"n\">Graph</span><span class=\"p\">,</span> <span class=\"s2\">\"square\"</span><span class=\"p\">,</span> <span class=\"n\">container</span><span class=\"o\">=</span><span class=\"n\">Col</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"o\">=</span><span class=\"mi\">6</span><span class=\"p\">))</span>\n<span class=\"n\">slider</span> <span class=\"o\">=</span> <span class=\"n\">as_component</span><span class=\"p\">(</span><span class=\"n\">Slider</span><span class=\"p\">,</span> <span class=\"s2\">\"input\"</span><span class=\"p\">,</span> <span class=\"n\">container</span><span class=\"o\">=</span><span class=\"n\">Col</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"o\">=</span><span class=\"mi\">6</span><span class=\"p\">))</span>\n<span class=\"n\">group</span> <span class=\"o\">=</span> <span class=\"n\">ComponentGroup</span><span class=\"p\">(</span><span class=\"s2\">\"main\"</span><span class=\"p\">,</span> <span class=\"n\">slider</span><span class=\"p\">,</span> <span class=\"n\">graph_square</span><span class=\"p\">,</span> <span class=\"n\">graph_cube</span><span class=\"p\">)</span>\n</pre>\n<p>Standard dash components can be transferred into our framework with <code>as_component(obj, id, container)</code>.\nThis conversion allows easier registry in the Dash application</p>\n<h3>Dash Apps</h3>\n<h4>Example</h4>\n<pre><span class=\"c1\"># app.py</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">dash_infra</span> <span class=\"kn\">import</span> <span class=\"n\">KWSDashApp</span>\n<span class=\"kn\">from</span> <span class=\"nn\">.components</span> <span class=\"kn\">import</span> <span class=\"n\">group</span>\n<span class=\"kn\">from</span> <span class=\"nn\">.callbacks</span> <span class=\"kn\">import</span> <span class=\"n\">square</span>\n\n<span class=\"n\">dash_app</span> <span class=\"o\">=</span> <span class=\"n\">KWSDashApp</span><span class=\"p\">(</span><span class=\"s2\">\"A multplier component\"</span><span class=\"p\">,</span> <span class=\"n\">doc</span><span class=\"o\">=</span><span class=\"vm\">__doc__</span><span class=\"p\">)</span>\n<span class=\"n\">dash_app</span><span class=\"o\">.</span><span class=\"n\">register_component</span><span class=\"p\">(</span><span class=\"n\">group</span><span class=\"p\">)</span>\n<span class=\"n\">dash_app</span><span class=\"o\">.</span><span class=\"n\">register_callback</span><span class=\"p\">(</span>\n    <span class=\"n\">square</span><span class=\"p\">,</span> \n    <span class=\"n\">outputs</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s2\">\"square\"</span><span class=\"p\">,</span> <span class=\"s2\">\"figure\"</span><span class=\"p\">),</span> \n    <span class=\"n\">inputs</span><span class=\"o\">=</span><span class=\"p\">[(</span><span class=\"s2\">\"input\"</span><span class=\"p\">,</span> <span class=\"s2\">\"value\"</span><span class=\"p\">)]</span>\n<span class=\"p\">)</span>\n</pre>\n<h3>Super Apps</h3>\n<p>Super apps wrap Dash apps, and provide the Dash callbacks with a restful API.</p>\n\n          </div>"}, "last_serial": 7186836, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "ef7a8f11a80037d28c3e68b8874d88f5", "sha256": "d1d094fb91b6d03ea7a20263c99d831f2b4a7143b3b9a85877ffb82fe9f40123"}, "downloads": -1, "filename": "kws_dash_infra-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "ef7a8f11a80037d28c3e68b8874d88f5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8963, "upload_time": "2020-04-25T13:00:21", "upload_time_iso_8601": "2020-04-25T13:00:21.880684Z", "url": "https://files.pythonhosted.org/packages/1b/1c/a104ae7cb074e4989e196eed011ead3cd4951eca791180ccbe36712c0299/kws_dash_infra-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "edc57b90a0293a8d95ba840dcfb6e170", "sha256": "d24025f9f3176849b4bde0ae6bc9b5ea9bad3468d28be219caf109001bf9cb0a"}, "downloads": -1, "filename": "kws_dash_infra-0.1.0.tar.gz", "has_sig": false, "md5_digest": "edc57b90a0293a8d95ba840dcfb6e170", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6779, "upload_time": "2020-04-25T13:00:24", "upload_time_iso_8601": "2020-04-25T13:00:24.213031Z", "url": "https://files.pythonhosted.org/packages/6f/a6/a3904f41bd31eaa49061a4ea449041eb29b62ef2a37a50c08499bb76194e/kws_dash_infra-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "671ea2de58748f93f811a4dc90701a50", "sha256": "74007cb5aa3a4c47413cd076cf703ec52db3ee293b79c4d8710fbaa3792ec01a"}, "downloads": -1, "filename": "kws_dash_infra-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "671ea2de58748f93f811a4dc90701a50", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 10223, "upload_time": "2020-04-26T16:01:13", "upload_time_iso_8601": "2020-04-26T16:01:13.039123Z", "url": "https://files.pythonhosted.org/packages/27/cb/ed93d02c5bd7cda0078349ca121381dda6e26768f182a4bb4a680356aeed/kws_dash_infra-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c5988b64e0827d3745f5fd0b816f1d74", "sha256": "b9a78d953561ca3bdfa258dc92656936a725040180fb87df66e15908f8159bc2"}, "downloads": -1, "filename": "kws_dash_infra-0.1.1.tar.gz", "has_sig": false, "md5_digest": "c5988b64e0827d3745f5fd0b816f1d74", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7857, "upload_time": "2020-04-26T16:01:14", "upload_time_iso_8601": "2020-04-26T16:01:14.768712Z", "url": "https://files.pythonhosted.org/packages/61/34/b19715c0e98ef5786677ebfa5b94211ce0a9d78d00c2562a74b33cafda32/kws_dash_infra-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "277b9317f8995e29972be7b954a62a31", "sha256": "2cc2c3ae3286c6b26381f4c6b628803f4331914aa7f457ac990ccd760b26c1d5"}, "downloads": -1, "filename": "kws_dash_infra-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "277b9317f8995e29972be7b954a62a31", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 15478, "upload_time": "2020-04-29T13:03:33", "upload_time_iso_8601": "2020-04-29T13:03:33.059162Z", "url": "https://files.pythonhosted.org/packages/f4/ad/a6cce6a4763b978236ae6f0f5489b067b1e842e9ef7e3b54a5992262fed7/kws_dash_infra-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f6ff68852ff6328eff62cff015949302", "sha256": "9ddac27ebfd9512113af79d37e8f2afebd28035f58d8d49bc22694324fafb0ea"}, "downloads": -1, "filename": "kws_dash_infra-0.1.2.tar.gz", "has_sig": false, "md5_digest": "f6ff68852ff6328eff62cff015949302", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11901, "upload_time": "2020-04-29T13:03:34", "upload_time_iso_8601": "2020-04-29T13:03:34.420607Z", "url": "https://files.pythonhosted.org/packages/51/3c/9ffeaf1eaf60f821c2f2c68b780fec89eeb9371f75f8e6408d4f897cd7f7/kws_dash_infra-0.1.2.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "e1b8ea36cc9df5edd1a3daf80452272c", "sha256": "3460247f6e576afa8fde098e5e0e9a5a5a3b2e8d38138a2641ef9188d95a1f76"}, "downloads": -1, "filename": "kws_dash_infra-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "e1b8ea36cc9df5edd1a3daf80452272c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 16389, "upload_time": "2020-05-07T09:29:00", "upload_time_iso_8601": "2020-05-07T09:29:00.037665Z", "url": "https://files.pythonhosted.org/packages/02/8a/7ba34ee8953b81b77b158b64a11ead270fc873241b44561e4d0d333d3d48/kws_dash_infra-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0dbf4e959da7b23ca027a5cf9253caf3", "sha256": "8977243b9ff6e05f21ae8bcee31782a2ef708edc33f898b9aef94b336ebe3503"}, "downloads": -1, "filename": "kws_dash_infra-0.2.0.tar.gz", "has_sig": false, "md5_digest": "0dbf4e959da7b23ca027a5cf9253caf3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12754, "upload_time": "2020-05-07T09:29:03", "upload_time_iso_8601": "2020-05-07T09:29:03.004429Z", "url": "https://files.pythonhosted.org/packages/08/0b/cb7f7f9fc2af7d9d0910cf02693a7559fceb35632f1a3d458500733f684c/kws_dash_infra-0.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e1b8ea36cc9df5edd1a3daf80452272c", "sha256": "3460247f6e576afa8fde098e5e0e9a5a5a3b2e8d38138a2641ef9188d95a1f76"}, "downloads": -1, "filename": "kws_dash_infra-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "e1b8ea36cc9df5edd1a3daf80452272c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 16389, "upload_time": "2020-05-07T09:29:00", "upload_time_iso_8601": "2020-05-07T09:29:00.037665Z", "url": "https://files.pythonhosted.org/packages/02/8a/7ba34ee8953b81b77b158b64a11ead270fc873241b44561e4d0d333d3d48/kws_dash_infra-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0dbf4e959da7b23ca027a5cf9253caf3", "sha256": "8977243b9ff6e05f21ae8bcee31782a2ef708edc33f898b9aef94b336ebe3503"}, "downloads": -1, "filename": "kws_dash_infra-0.2.0.tar.gz", "has_sig": false, "md5_digest": "0dbf4e959da7b23ca027a5cf9253caf3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12754, "upload_time": "2020-05-07T09:29:03", "upload_time_iso_8601": "2020-05-07T09:29:03.004429Z", "url": "https://files.pythonhosted.org/packages/08/0b/cb7f7f9fc2af7d9d0910cf02693a7559fceb35632f1a3d458500733f684c/kws_dash_infra-0.2.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:48:26 2020"}