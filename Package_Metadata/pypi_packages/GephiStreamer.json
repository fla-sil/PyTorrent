{"info": {"author": "Matthieu Totet (@totetmatt)", "author_email": "matthieu.totet@gmail.com", "bugtrack_url": null, "classifiers": ["Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3.4", "Topic :: Communications"], "description": "GephiStreamer\n=============\n\nPython classes for streaming graph to gephi\n![Demo](http://matthieu-totet.fr/Koumin/wp-content/uploads/2015/12/GephiStreamDemo.gif)\n\nInstall\n======\n\n`pip install gephistreamer`\n\nQuick use\n======\n\n```python\n# Basic import\nfrom gephistreamer import graph\nfrom gephistreamer import streamer\n\n# Create a Streamer\n# adapt if needed : streamer.GephiWS(hostname=\"localhost\", port=8080, workspace=\"workspace0\")\n# You can also use REST call with GephiREST (a little bit slower than Websocket)\nstream = streamer.Streamer(streamer.GephiWS())\n\n# Create a node with a custom_property\nnode_a = graph.Node(\"A\",custom_property=1)\n\n# Create a node and then add the custom_property\nnode_b = graph.Node(\"B\")\nnode_b.property['custom_property']=2\n\n# Add the node to the stream\n# you can also do it one by one or via a list\n# l = [node_a,node_b]\n# stream.add_node(*l)\nstream.add_node(node_a,node_b)\n\n# Create edge \n# You can also use the id of the node :  graph.Edge(\"A\",\"B\",custom_property=\"hello\")\nedge_ab = graph.Edge(node_a,node_b,custom_property=\"hello\")\nstream.add_edge(edge_ab)\n\n```\nHow to\n=====\n\nUse the `Streamer` class to describe the action to perform:\n* add_node\n* change_node\n* delete_node\n* add_edge\n* change_edge\n* delete_edge\n\nDon't forget to have Gephi running with the plugin [Graph Streaming](https://marketplace.gephi.org/plugin/graph-streaming/) installed and active in \"Master mode\".\n![Master mode](http://matthieu-totet.fr/Koumin/wp-content/uploads/2013/07/ScreenHunter_01-Jul.-30-08.39.jpg)\n\nGephiWS\n=====\n\nThe GephiWS class communicates with Gephi as Websocket call. \n\nGephiREST\n=====\n\nThe GephiREST class communicates with Gephi as REST call. \n\n\nAuto commit\n=====\nBy default, all action will trigger a \"commit\" and send information to Gephi. You still \ncan use the old way by requiering a \n```python\nstream = streamer.Streamer(streamer.GephiREST(),auto_commit=False)\n[.. actions ..]\nstream.commit() # Will send all actions buffered to Gephi \n```", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/totetmatt/GephiStreamer", "keywords": null, "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "GephiStreamer", "package_url": "https://pypi.org/project/GephiStreamer/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/GephiStreamer/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/totetmatt/GephiStreamer"}, "release_url": "https://pypi.org/project/GephiStreamer/2.0.3/", "requires_dist": null, "requires_python": null, "summary": "Tools to stream data to gephi", "version": "2.0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            GephiStreamer<br>=============<br><br>Python classes for streaming graph to gephi<br>![Demo](http://matthieu-totet.fr/Koumin/wp-content/uploads/2015/12/GephiStreamDemo.gif)<br><br>Install<br>======<br><br>`pip install gephistreamer`<br><br>Quick use<br>======<br><br>```python<br># Basic import<br>from gephistreamer import graph<br>from gephistreamer import streamer<br><br># Create a Streamer<br># adapt if needed : streamer.GephiWS(hostname=\"localhost\", port=8080, workspace=\"workspace0\")<br># You can also use REST call with GephiREST (a little bit slower than Websocket)<br>stream = streamer.Streamer(streamer.GephiWS())<br><br># Create a node with a custom_property<br>node_a = graph.Node(\"A\",custom_property=1)<br><br># Create a node and then add the custom_property<br>node_b = graph.Node(\"B\")<br>node_b.property['custom_property']=2<br><br># Add the node to the stream<br># you can also do it one by one or via a list<br># l = [node_a,node_b]<br># stream.add_node(*l)<br>stream.add_node(node_a,node_b)<br><br># Create edge <br># You can also use the id of the node :  graph.Edge(\"A\",\"B\",custom_property=\"hello\")<br>edge_ab = graph.Edge(node_a,node_b,custom_property=\"hello\")<br>stream.add_edge(edge_ab)<br><br>```<br>How to<br>=====<br><br>Use the `Streamer` class to describe the action to perform:<br>* add_node<br>* change_node<br>* delete_node<br>* add_edge<br>* change_edge<br>* delete_edge<br><br>Don't forget to have Gephi running with the plugin [Graph Streaming](https://marketplace.gephi.org/plugin/graph-streaming/) installed and active in \"Master mode\".<br>![Master mode](http://matthieu-totet.fr/Koumin/wp-content/uploads/2013/07/ScreenHunter_01-Jul.-30-08.39.jpg)<br><br>GephiWS<br>=====<br><br>The GephiWS class communicates with Gephi as Websocket call. <br><br>GephiREST<br>=====<br><br>The GephiREST class communicates with Gephi as REST call. <br><br><br>Auto commit<br>=====<br>By default, all action will trigger a \"commit\" and send information to Gephi. You still <br>can use the old way by requiering a <br>```python<br>stream = streamer.Streamer(streamer.GephiREST(),auto_commit=False)<br>[.. actions ..]<br>stream.commit() # Will send all actions buffered to Gephi <br>```\n          </div>"}, "last_serial": 2116848, "releases": {"1.0.1": [{"comment_text": "", "digests": {"md5": "1faac2ded27a767eac5dae1dd02b4190", "sha256": "8620ae612dabe8f54e9e07c29e64b600f8d3df91773c24ea000cec54108b043a"}, "downloads": -1, "filename": "GephiStreamer-1.0.1.zip", "has_sig": false, "md5_digest": "1faac2ded27a767eac5dae1dd02b4190", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11834, "upload_time": "2014-09-28T17:56:32", "upload_time_iso_8601": "2014-09-28T17:56:32.767838Z", "url": "https://files.pythonhosted.org/packages/ed/6b/ebe045ef57acc1993819ed804c6c48a2128ffe2c2b8cd3dfcf533bcb9a98/GephiStreamer-1.0.1.zip", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "918592c7e09ced916b09d20392b38872", "sha256": "f772f7a0bbbe59b3bd6b523424eca094136c125c44fad528fd3f9eb305df9af4"}, "downloads": -1, "filename": "GephiStreamer-1.0.2.zip", "has_sig": false, "md5_digest": "918592c7e09ced916b09d20392b38872", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11828, "upload_time": "2014-09-28T18:07:50", "upload_time_iso_8601": "2014-09-28T18:07:50.262614Z", "url": "https://files.pythonhosted.org/packages/e1/6f/21cfdf823396bf88b4b6add40ffba8cacf8fd0b7e4946d939b1bfedd22f8/GephiStreamer-1.0.2.zip", "yanked": false}], "2.0.0": [{"comment_text": "", "digests": {"md5": "4147dc223f916c6e7f7328080b63a7cc", "sha256": "6bd5f9fe6e89b9e55195aece44c13e59482947b9996c2dbb76f643f5a980cd95"}, "downloads": -1, "filename": "GephiStreamer-2.0.0.zip", "has_sig": false, "md5_digest": "4147dc223f916c6e7f7328080b63a7cc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6666, "upload_time": "2015-12-19T22:49:36", "upload_time_iso_8601": "2015-12-19T22:49:36.968302Z", "url": "https://files.pythonhosted.org/packages/1d/db/1bd8580441d0062bbd47cfc240f47631f7997a118566fcc62c9abd3a3abc/GephiStreamer-2.0.0.zip", "yanked": false}], "2.0.1": [{"comment_text": "", "digests": {"md5": "42a99eaad0f467982265eaac74ec5374", "sha256": "faf320b91b7874f0e43471a41c5fd476e1b7908e79326e417289dc7a2493615d"}, "downloads": -1, "filename": "GephiStreamer-2.0.1.zip", "has_sig": false, "md5_digest": "42a99eaad0f467982265eaac74ec5374", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8137, "upload_time": "2015-12-23T18:43:01", "upload_time_iso_8601": "2015-12-23T18:43:01.016363Z", "url": "https://files.pythonhosted.org/packages/71/10/2995b73781d88538ca3c458a527582e3fd0aeeec9d3eebb86d21fa15f34f/GephiStreamer-2.0.1.zip", "yanked": false}], "2.0.2": [{"comment_text": "", "digests": {"md5": "c18210eeca8593007bb6e759df4d045e", "sha256": "5763a0b3a59c782d013ac831d754dd82bb690df55075cd79a713bc184010bb95"}, "downloads": -1, "filename": "GephiStreamer-2.0.2.zip", "has_sig": false, "md5_digest": "c18210eeca8593007bb6e759df4d045e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8165, "upload_time": "2016-02-18T13:00:34", "upload_time_iso_8601": "2016-02-18T13:00:34.874162Z", "url": "https://files.pythonhosted.org/packages/be/30/36c725f857da3449b34ecf5574fb2f6dd98c2dd9cd573c36b44b97394026/GephiStreamer-2.0.2.zip", "yanked": false}], "2.0.3": [{"comment_text": "", "digests": {"md5": "5ba8aca50ddbd8762d4eeb9a50fe01df", "sha256": "a3cee57ec1e7bbb1a5bd12813615995ae99bba7948e5453608fd0ada5772eea0"}, "downloads": -1, "filename": "GephiStreamer-2.0.3.zip", "has_sig": false, "md5_digest": "5ba8aca50ddbd8762d4eeb9a50fe01df", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8178, "upload_time": "2016-05-15T17:11:04", "upload_time_iso_8601": "2016-05-15T17:11:04.407795Z", "url": "https://files.pythonhosted.org/packages/f4/8a/f40b90c3e9475eaad403b78458e60490c56efbd831eb9eefc522ac1cc80d/GephiStreamer-2.0.3.zip", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "5ba8aca50ddbd8762d4eeb9a50fe01df", "sha256": "a3cee57ec1e7bbb1a5bd12813615995ae99bba7948e5453608fd0ada5772eea0"}, "downloads": -1, "filename": "GephiStreamer-2.0.3.zip", "has_sig": false, "md5_digest": "5ba8aca50ddbd8762d4eeb9a50fe01df", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8178, "upload_time": "2016-05-15T17:11:04", "upload_time_iso_8601": "2016-05-15T17:11:04.407795Z", "url": "https://files.pythonhosted.org/packages/f4/8a/f40b90c3e9475eaad403b78458e60490c56efbd831eb9eefc522ac1cc80d/GephiStreamer-2.0.3.zip", "yanked": false}], "timestamp": "Fri May  8 00:57:53 2020"}