{"info": {"author": "Luke", "author_email": "lukepc@protonmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Operating System :: POSIX :: Linux", "Programming Language :: Python :: 3"], "description": "# BotballKit\n\nAn object-oriented wrapper for the KIPR library\n\n## Why\n\nThe KIPR library is bad in many ways. First of all, it's not even a real Python library, it's just a rushed implementation of its C library.\n\nThis is how you import it:\n\n```python\nkipr = ctypes.CDLL('/usr/lib/libkipr.so')\n```\n\nOkay, so it's technically not a pure Python library, but it still looks like one, right?\n\n```python\nkipr = ctypes.CDLL('/usr/lib/libkipr.so')\n\nstatus = kipr.digital(0)\nprint(status)\n\nkipr.motor(0, 100)\nkipr.motor(1, 100)\nkipr.msleep(2000)\n```\n\nNo. This looks like a C library, because that's all it is. It's barely object-oriented and the names of the functions are inconsistent and not Pythonic.\n\n### The Solution\n\nThe solution to this is a nice, object-oriented wrapper for the official KIPR library. Here's an example that sees if a push sensor is being pressed.\n\n```python\nfrom BotballKit import Bot, Sensor, SensorType\n\nbot = Bot()\nsensor = Sensor(bot, SensorType.DIGITAL, 0)\nleft_motor = Motor(bot, 0)\nright_motor = Motor(bot, 1)\n\nstatus = sensor.status()\nprint(status)\n\nleft_motor.move_async(100, 2)\nright_motor.move(100, 2)\n```\n\nMuch better, right? You create a bot object, a sensor object, two motor objects for each wheel, then you simply get the status of the sensor and print it and move the bot forward for two seconds.\n\n### But It's Longer\n\nWhile in this example the code is longer than the same example with the official library, as you keep adding on to this program the code *will* be shorter.\n\nAlso having an object-oriented library with much more consistent method names can make it easier to remember and harder to make mistakes.\n\n## Documentation\n\n### Creating a Bot\n\nThe first step to using this library is to create a `Bot` object. Doing that is as simple as:\n\n```python\nfrom BotballKit import Bot\n\nbot = Bot()\n```\n\nNow we have a `Bot` object stored in the `bot` variable.\n\nThe `Bot` constructor can optionally take these parameters:\n\n- `wait_for_port: Optional[int] = None`: Waits for a sensor on the specified port to be `True` before starting anything else. This will block the thread until the condition is met.\n\n- `time_limit: Optional[float] = None`: Stops the program after the specified number of seconds.\n\n`Bot` objects also have these methods:\n\n- `Bot.stop_all_motors()`: Stops all motors associated with the bot.\n\n- `Bot.enable_all_servos()`: Enables all servos associated with the bot.\n\n- `Bot.disable_all_servos()`: Disables all servos associated with the bot.\n\n### Sensors\n\nCreating `Sensor` objects is also very simple:\n\n```python\nfrom BotballKit import Sensor, SensorType\n\nsensor = Sensor(bot, SensorType.DIGITAL, 0)\n```\n\nThe `Sensor` constructor must have these parameters:\n\n- `bot: Bot`: Your bot object.\n\n- `type: SensorType`: The type of sensor you want to use. The two options are `SensorType.DIGITAL` and `SensorType.ANALOG`.\n\n- `port: int`: The port your sensor is physically connected to.\n\nIt has this method available:\n\n- `Sensor.status() -> Union[bool, int]`: Gets the status of the sensor. If the sensor is digital, it will return a `bool`. If the sensor is analog, it will return an `int`.\n\n### Motors\n\nTo create a `Motor`, all you have to do is:\n\n```python\nfrom BotballKit import Motor\n\nmotor = Motor(bot, 0)\n```\n\nThe `Motor` constructor requires these parameters be passed:\n\n- `bot: Bot`: Your bot object.\n\n- `port: int`: The port your motor is physically connected to.\n\nThey have these methods available:\n\n- `Motor.stop()`: Stops the motor.\n\n- `Motor.move(power: int, seconds: float)`: Moves the motor with the specified power between `-100` and `100` for the specified amount of seconds.\n\n- `Motor.move_async(power: int, seconds: float)`: Does the same thing as the `Motor.move` method except it runs asynchronously.\n\n### Servos\n\nCreating servos is also easy:\n\n```python\nfrom BotballKit import Servo\n\nservo = Servo(bot, 0)\nservo.enable()\n```\n\nAll servos need to be enabled to work. This can be done with the `Servo.enable` method or the `Bot.enable_all_servos` method.\n\nIts constructor takes the following parameters:\n\n- `Servo.enable(default_position: Optional[int] = None)`: Enables the servo. If the `default_position` parameter is specified, the servo will be set to that position when enabled.\n\n- `Servo.disable(default_position: Optional[int] = None)`: Disables the servo. If the `default_position` parameter is specified, the servo will be set to that position when disabled.\n\n- `Servo.is_enabled() -> bool`: Returns whether the servo is enabled or not.\n\n- `Servo.toggle(default_position: Optional[int] = None)`: Toggles the servo. If the `default_position` parameter is specified, the servo will be set to that position when toggled.\n\n- `Servo.position(position: Optional[int] = None) -> Optional[int]`: Gets or sets the position of the servo. If no parameters are specified, it will return the current position as an `int`. If the `position` parameter is specified, it will set the servo position to that value and return `None`.\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://gitlab.com/devluke/botballkit", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "BotballKit", "package_url": "https://pypi.org/project/BotballKit/", "platform": "", "project_url": "https://pypi.org/project/BotballKit/", "project_urls": {"Homepage": "https://gitlab.com/devluke/botballkit"}, "release_url": "https://pypi.org/project/BotballKit/1.0/", "requires_dist": null, "requires_python": ">=3.7", "summary": "An object-oriented wrapper for the KIPR library", "version": "1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>BotballKit</h1>\n<p>An object-oriented wrapper for the KIPR library</p>\n<h2>Why</h2>\n<p>The KIPR library is bad in many ways. First of all, it's not even a real Python library, it's just a rushed implementation of its C library.</p>\n<p>This is how you import it:</p>\n<pre><span class=\"n\">kipr</span> <span class=\"o\">=</span> <span class=\"n\">ctypes</span><span class=\"o\">.</span><span class=\"n\">CDLL</span><span class=\"p\">(</span><span class=\"s1\">'/usr/lib/libkipr.so'</span><span class=\"p\">)</span>\n</pre>\n<p>Okay, so it's technically not a pure Python library, but it still looks like one, right?</p>\n<pre><span class=\"n\">kipr</span> <span class=\"o\">=</span> <span class=\"n\">ctypes</span><span class=\"o\">.</span><span class=\"n\">CDLL</span><span class=\"p\">(</span><span class=\"s1\">'/usr/lib/libkipr.so'</span><span class=\"p\">)</span>\n\n<span class=\"n\">status</span> <span class=\"o\">=</span> <span class=\"n\">kipr</span><span class=\"o\">.</span><span class=\"n\">digital</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">status</span><span class=\"p\">)</span>\n\n<span class=\"n\">kipr</span><span class=\"o\">.</span><span class=\"n\">motor</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">)</span>\n<span class=\"n\">kipr</span><span class=\"o\">.</span><span class=\"n\">motor</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">)</span>\n<span class=\"n\">kipr</span><span class=\"o\">.</span><span class=\"n\">msleep</span><span class=\"p\">(</span><span class=\"mi\">2000</span><span class=\"p\">)</span>\n</pre>\n<p>No. This looks like a C library, because that's all it is. It's barely object-oriented and the names of the functions are inconsistent and not Pythonic.</p>\n<h3>The Solution</h3>\n<p>The solution to this is a nice, object-oriented wrapper for the official KIPR library. Here's an example that sees if a push sensor is being pressed.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">BotballKit</span> <span class=\"kn\">import</span> <span class=\"n\">Bot</span><span class=\"p\">,</span> <span class=\"n\">Sensor</span><span class=\"p\">,</span> <span class=\"n\">SensorType</span>\n\n<span class=\"n\">bot</span> <span class=\"o\">=</span> <span class=\"n\">Bot</span><span class=\"p\">()</span>\n<span class=\"n\">sensor</span> <span class=\"o\">=</span> <span class=\"n\">Sensor</span><span class=\"p\">(</span><span class=\"n\">bot</span><span class=\"p\">,</span> <span class=\"n\">SensorType</span><span class=\"o\">.</span><span class=\"n\">DIGITAL</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">left_motor</span> <span class=\"o\">=</span> <span class=\"n\">Motor</span><span class=\"p\">(</span><span class=\"n\">bot</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">right_motor</span> <span class=\"o\">=</span> <span class=\"n\">Motor</span><span class=\"p\">(</span><span class=\"n\">bot</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"n\">status</span> <span class=\"o\">=</span> <span class=\"n\">sensor</span><span class=\"o\">.</span><span class=\"n\">status</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">status</span><span class=\"p\">)</span>\n\n<span class=\"n\">left_motor</span><span class=\"o\">.</span><span class=\"n\">move_async</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">right_motor</span><span class=\"o\">.</span><span class=\"n\">move</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n</pre>\n<p>Much better, right? You create a bot object, a sensor object, two motor objects for each wheel, then you simply get the status of the sensor and print it and move the bot forward for two seconds.</p>\n<h3>But It's Longer</h3>\n<p>While in this example the code is longer than the same example with the official library, as you keep adding on to this program the code <em>will</em> be shorter.</p>\n<p>Also having an object-oriented library with much more consistent method names can make it easier to remember and harder to make mistakes.</p>\n<h2>Documentation</h2>\n<h3>Creating a Bot</h3>\n<p>The first step to using this library is to create a <code>Bot</code> object. Doing that is as simple as:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">BotballKit</span> <span class=\"kn\">import</span> <span class=\"n\">Bot</span>\n\n<span class=\"n\">bot</span> <span class=\"o\">=</span> <span class=\"n\">Bot</span><span class=\"p\">()</span>\n</pre>\n<p>Now we have a <code>Bot</code> object stored in the <code>bot</code> variable.</p>\n<p>The <code>Bot</code> constructor can optionally take these parameters:</p>\n<ul>\n<li>\n<p><code>wait_for_port: Optional[int] = None</code>: Waits for a sensor on the specified port to be <code>True</code> before starting anything else. This will block the thread until the condition is met.</p>\n</li>\n<li>\n<p><code>time_limit: Optional[float] = None</code>: Stops the program after the specified number of seconds.</p>\n</li>\n</ul>\n<p><code>Bot</code> objects also have these methods:</p>\n<ul>\n<li>\n<p><code>Bot.stop_all_motors()</code>: Stops all motors associated with the bot.</p>\n</li>\n<li>\n<p><code>Bot.enable_all_servos()</code>: Enables all servos associated with the bot.</p>\n</li>\n<li>\n<p><code>Bot.disable_all_servos()</code>: Disables all servos associated with the bot.</p>\n</li>\n</ul>\n<h3>Sensors</h3>\n<p>Creating <code>Sensor</code> objects is also very simple:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">BotballKit</span> <span class=\"kn\">import</span> <span class=\"n\">Sensor</span><span class=\"p\">,</span> <span class=\"n\">SensorType</span>\n\n<span class=\"n\">sensor</span> <span class=\"o\">=</span> <span class=\"n\">Sensor</span><span class=\"p\">(</span><span class=\"n\">bot</span><span class=\"p\">,</span> <span class=\"n\">SensorType</span><span class=\"o\">.</span><span class=\"n\">DIGITAL</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n</pre>\n<p>The <code>Sensor</code> constructor must have these parameters:</p>\n<ul>\n<li>\n<p><code>bot: Bot</code>: Your bot object.</p>\n</li>\n<li>\n<p><code>type: SensorType</code>: The type of sensor you want to use. The two options are <code>SensorType.DIGITAL</code> and <code>SensorType.ANALOG</code>.</p>\n</li>\n<li>\n<p><code>port: int</code>: The port your sensor is physically connected to.</p>\n</li>\n</ul>\n<p>It has this method available:</p>\n<ul>\n<li><code>Sensor.status() -&gt; Union[bool, int]</code>: Gets the status of the sensor. If the sensor is digital, it will return a <code>bool</code>. If the sensor is analog, it will return an <code>int</code>.</li>\n</ul>\n<h3>Motors</h3>\n<p>To create a <code>Motor</code>, all you have to do is:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">BotballKit</span> <span class=\"kn\">import</span> <span class=\"n\">Motor</span>\n\n<span class=\"n\">motor</span> <span class=\"o\">=</span> <span class=\"n\">Motor</span><span class=\"p\">(</span><span class=\"n\">bot</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n</pre>\n<p>The <code>Motor</code> constructor requires these parameters be passed:</p>\n<ul>\n<li>\n<p><code>bot: Bot</code>: Your bot object.</p>\n</li>\n<li>\n<p><code>port: int</code>: The port your motor is physically connected to.</p>\n</li>\n</ul>\n<p>They have these methods available:</p>\n<ul>\n<li>\n<p><code>Motor.stop()</code>: Stops the motor.</p>\n</li>\n<li>\n<p><code>Motor.move(power: int, seconds: float)</code>: Moves the motor with the specified power between <code>-100</code> and <code>100</code> for the specified amount of seconds.</p>\n</li>\n<li>\n<p><code>Motor.move_async(power: int, seconds: float)</code>: Does the same thing as the <code>Motor.move</code> method except it runs asynchronously.</p>\n</li>\n</ul>\n<h3>Servos</h3>\n<p>Creating servos is also easy:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">BotballKit</span> <span class=\"kn\">import</span> <span class=\"n\">Servo</span>\n\n<span class=\"n\">servo</span> <span class=\"o\">=</span> <span class=\"n\">Servo</span><span class=\"p\">(</span><span class=\"n\">bot</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">servo</span><span class=\"o\">.</span><span class=\"n\">enable</span><span class=\"p\">()</span>\n</pre>\n<p>All servos need to be enabled to work. This can be done with the <code>Servo.enable</code> method or the <code>Bot.enable_all_servos</code> method.</p>\n<p>Its constructor takes the following parameters:</p>\n<ul>\n<li>\n<p><code>Servo.enable(default_position: Optional[int] = None)</code>: Enables the servo. If the <code>default_position</code> parameter is specified, the servo will be set to that position when enabled.</p>\n</li>\n<li>\n<p><code>Servo.disable(default_position: Optional[int] = None)</code>: Disables the servo. If the <code>default_position</code> parameter is specified, the servo will be set to that position when disabled.</p>\n</li>\n<li>\n<p><code>Servo.is_enabled() -&gt; bool</code>: Returns whether the servo is enabled or not.</p>\n</li>\n<li>\n<p><code>Servo.toggle(default_position: Optional[int] = None)</code>: Toggles the servo. If the <code>default_position</code> parameter is specified, the servo will be set to that position when toggled.</p>\n</li>\n<li>\n<p><code>Servo.position(position: Optional[int] = None) -&gt; Optional[int]</code>: Gets or sets the position of the servo. If no parameters are specified, it will return the current position as an <code>int</code>. If the <code>position</code> parameter is specified, it will set the servo position to that value and return <code>None</code>.</p>\n</li>\n</ul>\n\n          </div>"}, "last_serial": 6712976, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "548d377777792d8935d05bf253ed1865", "sha256": "c4eebddcd66e8b6f90c5359dfc74121682c7d6ccf483915a5c93702453823aed"}, "downloads": -1, "filename": "BotballKit-1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "548d377777792d8935d05bf253ed1865", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 16557, "upload_time": "2020-02-27T19:52:10", "upload_time_iso_8601": "2020-02-27T19:52:10.358211Z", "url": "https://files.pythonhosted.org/packages/5a/44/54c5a36e9d5ccefebb02cb3de68bec335659137355de8207d93a5e20b3fe/BotballKit-1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "562aaa1a2851dc4fb23a7e1f9d68949f", "sha256": "e0df593a088883c539995ef755f0ccee2154252d589b4aae5f0fc6d5fc23fb92"}, "downloads": -1, "filename": "BotballKit-1.0.tar.gz", "has_sig": false, "md5_digest": "562aaa1a2851dc4fb23a7e1f9d68949f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 3913, "upload_time": "2020-02-27T19:52:12", "upload_time_iso_8601": "2020-02-27T19:52:12.772153Z", "url": "https://files.pythonhosted.org/packages/10/a3/8ade167158e92004d868ab4bacc858e941b475f5f3b33d4201a9f53779ab/BotballKit-1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "548d377777792d8935d05bf253ed1865", "sha256": "c4eebddcd66e8b6f90c5359dfc74121682c7d6ccf483915a5c93702453823aed"}, "downloads": -1, "filename": "BotballKit-1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "548d377777792d8935d05bf253ed1865", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 16557, "upload_time": "2020-02-27T19:52:10", "upload_time_iso_8601": "2020-02-27T19:52:10.358211Z", "url": "https://files.pythonhosted.org/packages/5a/44/54c5a36e9d5ccefebb02cb3de68bec335659137355de8207d93a5e20b3fe/BotballKit-1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "562aaa1a2851dc4fb23a7e1f9d68949f", "sha256": "e0df593a088883c539995ef755f0ccee2154252d589b4aae5f0fc6d5fc23fb92"}, "downloads": -1, "filename": "BotballKit-1.0.tar.gz", "has_sig": false, "md5_digest": "562aaa1a2851dc4fb23a7e1f9d68949f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 3913, "upload_time": "2020-02-27T19:52:12", "upload_time_iso_8601": "2020-02-27T19:52:12.772153Z", "url": "https://files.pythonhosted.org/packages/10/a3/8ade167158e92004d868ab4bacc858e941b475f5f3b33d4201a9f53779ab/BotballKit-1.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:36:39 2020"}