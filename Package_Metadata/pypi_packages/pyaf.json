{"info": {"author": "Antoine CARME", "author_email": "antoine.carme@laposte.net", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Programming Language :: Python :: 3"], "description": "\nPyAF (Python Automatic Forecasting)\n===================================\n\n[![Build Status](https://travis-ci.org/antoinecarme/pyaf.svg?branch=master)](https://travis-ci.org/antoinecarme/pyaf)\n\nPyAF is an Open Source Python library for Automatic Forecasting built on top of\npopular data science python modules : numpy, scipy, pandas and scikit-learn.\n\nPyAF works as an automated process for predicting future values of a signal\nusing a machine learning approach. It provides a set of features that is\ncomparable to some popular commercial automatic forecasting products.\n\nPyAF has been developed, tested and benchmarked using a **python 3.x** version.\n\nPyAF is distributed under the [3-Clause BSD license](https://tldrlegal.com/license/bsd-3-clause-license-%28revised%29).\n\n\nDemo \n----\n[also availabe as a jupyter notebook](docs/sample_code.ipynb)\n\n```Python\nimport numpy as np\nimport pandas as pd\n\n# generate a daily signal covering one year 2016 in a pandas dataframe\nN = 360\ndf_train = pd.DataFrame({\"Date\" : pd.date_range(start=\"2016-01-25\", periods=N, freq='D'),\n                         \"Signal\" : (np.arange(N)//40 + np.arange(N) % 21 + np.random.randn(N))})\n\nimport pyaf.ForecastEngine as autof\n# create a forecast engine. This is the main object handling all the operations\nlEngine = autof.cForecastEngine()\n\n# get the best time series model for predicting one week\nlEngine.train(iInputDS = df_train, iTime = 'Date', iSignal = 'Signal', iHorizon = 7);\nlEngine.getModelInfo() # => relative error 7% (MAPE)\n\n# predict one week\ndf_forecast = lEngine.forecast(iInputDS = df_train, iHorizon = 7)\n# list the columns of the forecast dataset\nprint(df_forecast.columns) #\n\n# print the real forecasts\n# Future dates : ['2017-01-19T00:00:00.000000000' '2017-01-20T00:00:00.000000000' '2017-01-21T00:00:00.000000000' '2017-01-22T00:00:00.000000000' '2017-01-23T00:00:00.000000000' '2017-01-24T00:00:00.000000000' '2017-01-25T00:00:00.000000000']\nprint(df_forecast['Date'].tail(7).values)\n\n# signal forecast : [ 9.74934646  10.04419761  12.15136455  12.20369717  14.09607727 15.68086323  16.22296559]\nprint(df_forecast['Signal_Forecast'].tail(7).values)\n```\n\nFeatures\n--------\nPyAF allows forecasting a time series (or a signal) for future values in a fully automated\nway. To build forecasts, PyAF allows using time information (by identifying **long-term** evolution and **periodic patterns**), analyzes the **past of the signal**, exploits **exogenous data** (user-provided time series that may be correlated with the signal) as well as the **hierarchical structure** of the signal (by aggregating spatial components forecasts, for example) \n\nPyAF **uses [Pandas](http://pandas.pydata.org/) as a data access layer**. It consumes data coming from a pandas data-\nframe (with time and signal columns), builds a time series model, and outputs\nthe forecasts in a pandas data-frame. Pandas is an excellent data access layer,\nit allows reading/writing a huge set of file formats, accessing various data\nsources (databases) and has an extensive set of algorithms to handle data-\nframes (aggregation, statistics, linear algebra, plotting etc).\n\n\nPyAF statistical time series models are built/estimated/trained using [scikit-learn library](http://scikit-learn.org).\n\n\nThe following features are available :\n   1. **Training a model** to forecast a time series (given in a pandas data-frame\n      with time and signal columns).\n        * PyAF uses a **machine learning approach** (The signal is cut into Estimation\n      and validation parts, respectively, 80% and 20% of the signal).\n        * A [time-series cross-validation](https://github.com/antoinecarme/pyaf/issues/105) can also be used.\n   2. Forecasting a time series model on a given **horizon** (forecast result is\n      also pandas data-frame) and providing **prediction/confidence intervals** for\n      the forecasts.\n   3. Generic training features\n         * [Signal decomposition](http://en.wikipedia.org/wiki/Decomposition_of_time_series) as the sum of a trend, periodic and AR component\n         * PyAF works as a competition between a **comprehensive set of possible signal \n      transformations and linear decompositions**. For each transformed\n      signal , a set of possible trends, periodic components and AR models is\n      generated and all the possible combinations are estimated. The best\n      decomposition in term of performance is kept to forecast the signal (the\n      performance is computed on a part of the signal that was not used for the\n      estimation).\n         * **Signal transformation** is supported before **signal decompositions**. Four\n      transformations are supported by default. Other transformation are\n      available (Box-Cox etc).\n         * All Models are estimated using **standard procedures and state-of-the-art\n      time series modeling**. For example, trend regressions and AR/ARX models\n      are estimated using scikit-learn linear regression models.\n      * Standard performance measures are used (L1, RMSE, MAPE, etc)\n   4. PyAF analyzes the **time variable** and infers the frequency from the data.\n      * Natural time frequencies are supported : Minute, Hour,  Day, Week, Month.\n      * Strange frequencies like every 3.2 days or every 17 minutes are supported if data are recorded accordingly (every other Monday => two weeks frequency).\n      * The frequency is computed as the mean duration between consecutive observations by default (as a [pandas DateOffset](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.tseries.offsets.DateOffset.html)).\n      * The frequency is used to generate values for future dates automatically.\n      * PyAF does its best when dates are not regularly observed. Time frequency is approximate is this case.\n      * Real/Integer valued (fake) dates are also supported and handled in a similar way.\n   4. **Exogenous Data Support**\n        * Exogenous data can be provided to improve the forecasts. These are\n      expected to be **stored in an external data-frame** (this data-frame will be\n      merged with the training data-frame).\n        * Exogenous data are integrated in the modeling process through their **past values**\n      ([ARX models](http://en.wikipedia.org/wiki/Autoregressive%E2%80%93moving-average_model)).\n        * **Exogenous variables can be of any type** (numeric, string , date, or\n      object).\n        * Exogenous variables are **dummified** for the non-numeric types, and\n      **standardized** for the numeric types.\n   5. PyAF implements **Hierarchical Forecasting**. It follows the excellent approach used in [Rob J\n      Hyndman and George Athanasopoulos book](http://www.otexts.org/fpp/9/4). Thanks @robjhyndman\n        * **Hierarchies** and **grouped time series** are supported.\n        * **Bottom-Up**, **Top-Down** (using proportions), **Middle-Out** and **Optimal Combinations** are\n      implemented.\n   6. The modeling process is **customizable** and has a huge set of **options**. The\n      default values of these options should however be OK to produce a reasonable quality model in a limited amount of time (a few minutes).\n      * These options give access to a full set of [signal transformations](https://github.com/antoinecarme/pyaf/blob/ba09233db42d43b9aa16b6151f00794193401841/TS/Options.py#L18) and [AR-like models](https://github.com/antoinecarme/pyaf/blob/ba09233db42d43b9aa16b6151f00794193401841/TS/Options.py#L37) that are not enabled by default.\n      * Gives rise to Logit , Fisher transformations as well as XGBoost and Support Vectort Regressions and Croston intermittent models, among others.\n      * By default , PyAF uses a **fast mode** that activates many popular models. It is also possible to activate a **slow mode**, in which pyaf explores all possible models.\n      * Specific models and features can be customized.\n   7. A **benchmarking process** is in place (using M1, M2, M3 competitions, NN3,\n      NN5 forecasting competitions).\n         * This process will be used to control the quality of modeling changes introduced in the future versions of PyAF. A  [related  github issue](https://github.com/antoinecarme/pyaf/issues/45) is created. \n         * Benchmarks data/reports are saved in a separate [github repository](https://github.com/antoinecarme/PyAF_Benchmarks). \n         * Sample [benchmark report](https://github.com/antoinecarme/PyAF_Benchmarks/blob/master/reporting/data/M1_COMP_debrief.csv) with 1001 datasets from the M1 Forecasting Competition.\n   8. Basic **plotting** functions using matplotlib with standard time series and\n      forecasts plots.\n   9. **Software Quality** Highlights\n      * An **object-oriented** approach is used for the system design. Separation of\n      concerns is the key factor here.\n      * **Fully written in python** with numpy, scipy, pandas and scikit-learn\n      objects. Tries to be **column-based** everywhere for performance reasons (respecting some modeling time and memory constraints).\n      * Internally using a fit/predict pattern , inspired by scikit-learn, to estimate/forecast the different signal components (trends, cycles and AR models).\n      * A **test-driven approach (TDD)** is used. Test scripts are available in the [tests](tests)\n      directory, one directory for each feature.\n      * **TDD** implies that even the most recent features have some sample scripts in this [directory](tests). Want to know how to use cross-validation with PyAF? here are [some scripts](tests/cross_validation).  \n      * Some **[jupyter notebooks](docs)** are available for demo purposes with standard time series and forecasts plots.\n      * Very **simple API** for training and forecasting.\n   10. A basic **RESTful Web Service** (Flask) is available.\n       * This service allows building a time series model, forecasting future data and some standard plots by providing a minimal specification of the signal in the JSON request body (at least a link to a csv file containing the data).\n       * See [this doc](WS/README.md) and the [related github issue](https://github.com/antoinecarme/pyaf/issues/20) for more details.\n\nPyAF is a work in progress. The set of features is evolving. Your feature\nrequests, comments, help, hints are very welcome.\n\n\nInstallation\n------------\n\nPyAF has been developed, tested and used on a python 3.x version. \n\nIt can be installed from PyPI for the latest official release:\n\n\tpip install pyaf\n\nThe development version is also available by executing :\n\n\tpip install scipy pandas sklearn matplotlib pydot dill pathos sqlalchemy xgboost\n\tpip install --upgrade git+git://github.com/antoinecarme/pyaf.git\n\n\nDevelopment\n-----------\n\nCode contributions are welcome. Bug reports, request for new features and\ndocumentation, tests are welcome. Please use GitHub platform for these tasks.\n\nYou can check the latest sources of PyAF from GitHub with the command::\n\n\tgit clone http://github.com/antoinecarme/pyaf.git\n\n\nProject history\n-----------\n\nThis project was started in summer 2016 as a POC to check the feasibility of an\nautomatic forecasting tool based only on python available data science software\n(numpy, scipy, pandas, scikit-learn etc).\n\nSee the [AUTHORS.rst](AUTHORS.rst) file for a complete list of contributors.\n\nHelp and Support\n----------------\n\nPyAF is currently maintained by the original developer. PyAF support will be\nprovided when possible and even if you are not creating an issue, you are encouraged to follow [these guidelines](ISSUE_TEMPLATE.md).\n\nBug reports, Improvement requests, Documentation, Hints and Test scripts are\nwelcome. Please use the GitHub platform for these tasks.\n\nDocumentation\n----------------\n\nAn [introductory notebook](https://github.com/antoinecarme/pyaf/blob/master/docs/PyAF_Introduction.ipynb) to the time series forecasting with PyAF is available here. It contains some real-world examples and use cases.\n\nA specific notebook describing the use of exogenous data is [available here](https://github.com/antoinecarme/pyaf/blob/master/docs/PyAF_Exogenous.ipynb)\n\nNotebooks describing an example of hierarchical forecasting models are available for [Signal Hierarchies](https://github.com/antoinecarme/pyaf/blob/master/docs/PyAF_Hierarchical_FrenchWineExportation.ipynb) and for [Grouped Signals](https://github.com/antoinecarme/pyaf/blob/master/docs/PyAF_GroupedSignals_FrenchWineExportation.ipynb)\n\nThe python code is not yet fully documented. This is a top priority (TODO). \n\nCommunication\n----------------\n\nComments , appreciations, remarks , etc .... are welcome. Your feedback is\nwelcome if you use this library in a project or a publication.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/antoinecarme/pyaf", "keywords": "arx automatic-forecasting autoregressive benchmark cycle decomposition exogenous forecasting heroku hierarchical-forecasting horizon jupyter pandas python scikit-learn seasonal time-series transformation trend web-service", "license": "BSD 3-clause", "maintainer": "", "maintainer_email": "", "name": "pyaf", "package_url": "https://pypi.org/project/pyaf/", "platform": "", "project_url": "https://pypi.org/project/pyaf/", "project_urls": {"Homepage": "https://github.com/antoinecarme/pyaf"}, "release_url": "https://pypi.org/project/pyaf/1.2.4/", "requires_dist": ["scipy", "pandas", "sklearn", "matplotlib", "pydot", "dill", "pathos", "sqlalchemy"], "requires_python": ">=3", "summary": "Python Automatic Forecasting", "version": "1.2.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>PyAF (Python Automatic Forecasting)</h1>\n<p><a href=\"https://travis-ci.org/antoinecarme/pyaf\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ca3efa21dec53b65c96af585a084d2a35db777c7/68747470733a2f2f7472617669732d63692e6f72672f616e746f696e656361726d652f707961662e7376673f6272616e63683d6d6173746572\"></a></p>\n<p>PyAF is an Open Source Python library for Automatic Forecasting built on top of\npopular data science python modules : numpy, scipy, pandas and scikit-learn.</p>\n<p>PyAF works as an automated process for predicting future values of a signal\nusing a machine learning approach. It provides a set of features that is\ncomparable to some popular commercial automatic forecasting products.</p>\n<p>PyAF has been developed, tested and benchmarked using a <strong>python 3.x</strong> version.</p>\n<p>PyAF is distributed under the <a href=\"https://tldrlegal.com/license/bsd-3-clause-license-%28revised%29\" rel=\"nofollow\">3-Clause BSD license</a>.</p>\n<h2>Demo</h2>\n<p><a href=\"docs/sample_code.ipynb\" rel=\"nofollow\">also availabe as a jupyter notebook</a></p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pandas</span> <span class=\"k\">as</span> <span class=\"nn\">pd</span>\n\n<span class=\"c1\"># generate a daily signal covering one year 2016 in a pandas dataframe</span>\n<span class=\"n\">N</span> <span class=\"o\">=</span> <span class=\"mi\">360</span>\n<span class=\"n\">df_train</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">({</span><span class=\"s2\">\"Date\"</span> <span class=\"p\">:</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">date_range</span><span class=\"p\">(</span><span class=\"n\">start</span><span class=\"o\">=</span><span class=\"s2\">\"2016-01-25\"</span><span class=\"p\">,</span> <span class=\"n\">periods</span><span class=\"o\">=</span><span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"n\">freq</span><span class=\"o\">=</span><span class=\"s1\">'D'</span><span class=\"p\">),</span>\n                         <span class=\"s2\">\"Signal\"</span> <span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">arange</span><span class=\"p\">(</span><span class=\"n\">N</span><span class=\"p\">)</span><span class=\"o\">//</span><span class=\"mi\">40</span> <span class=\"o\">+</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">arange</span><span class=\"p\">(</span><span class=\"n\">N</span><span class=\"p\">)</span> <span class=\"o\">%</span> <span class=\"mi\">21</span> <span class=\"o\">+</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">randn</span><span class=\"p\">(</span><span class=\"n\">N</span><span class=\"p\">))})</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">pyaf.ForecastEngine</span> <span class=\"k\">as</span> <span class=\"nn\">autof</span>\n<span class=\"c1\"># create a forecast engine. This is the main object handling all the operations</span>\n<span class=\"n\">lEngine</span> <span class=\"o\">=</span> <span class=\"n\">autof</span><span class=\"o\">.</span><span class=\"n\">cForecastEngine</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># get the best time series model for predicting one week</span>\n<span class=\"n\">lEngine</span><span class=\"o\">.</span><span class=\"n\">train</span><span class=\"p\">(</span><span class=\"n\">iInputDS</span> <span class=\"o\">=</span> <span class=\"n\">df_train</span><span class=\"p\">,</span> <span class=\"n\">iTime</span> <span class=\"o\">=</span> <span class=\"s1\">'Date'</span><span class=\"p\">,</span> <span class=\"n\">iSignal</span> <span class=\"o\">=</span> <span class=\"s1\">'Signal'</span><span class=\"p\">,</span> <span class=\"n\">iHorizon</span> <span class=\"o\">=</span> <span class=\"mi\">7</span><span class=\"p\">);</span>\n<span class=\"n\">lEngine</span><span class=\"o\">.</span><span class=\"n\">getModelInfo</span><span class=\"p\">()</span> <span class=\"c1\"># =&gt; relative error 7% (MAPE)</span>\n\n<span class=\"c1\"># predict one week</span>\n<span class=\"n\">df_forecast</span> <span class=\"o\">=</span> <span class=\"n\">lEngine</span><span class=\"o\">.</span><span class=\"n\">forecast</span><span class=\"p\">(</span><span class=\"n\">iInputDS</span> <span class=\"o\">=</span> <span class=\"n\">df_train</span><span class=\"p\">,</span> <span class=\"n\">iHorizon</span> <span class=\"o\">=</span> <span class=\"mi\">7</span><span class=\"p\">)</span>\n<span class=\"c1\"># list the columns of the forecast dataset</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">df_forecast</span><span class=\"o\">.</span><span class=\"n\">columns</span><span class=\"p\">)</span> <span class=\"c1\">#</span>\n\n<span class=\"c1\"># print the real forecasts</span>\n<span class=\"c1\"># Future dates : ['2017-01-19T00:00:00.000000000' '2017-01-20T00:00:00.000000000' '2017-01-21T00:00:00.000000000' '2017-01-22T00:00:00.000000000' '2017-01-23T00:00:00.000000000' '2017-01-24T00:00:00.000000000' '2017-01-25T00:00:00.000000000']</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">df_forecast</span><span class=\"p\">[</span><span class=\"s1\">'Date'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">tail</span><span class=\"p\">(</span><span class=\"mi\">7</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># signal forecast : [ 9.74934646  10.04419761  12.15136455  12.20369717  14.09607727 15.68086323  16.22296559]</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">df_forecast</span><span class=\"p\">[</span><span class=\"s1\">'Signal_Forecast'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">tail</span><span class=\"p\">(</span><span class=\"mi\">7</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">)</span>\n</pre>\n<h2>Features</h2>\n<p>PyAF allows forecasting a time series (or a signal) for future values in a fully automated\nway. To build forecasts, PyAF allows using time information (by identifying <strong>long-term</strong> evolution and <strong>periodic patterns</strong>), analyzes the <strong>past of the signal</strong>, exploits <strong>exogenous data</strong> (user-provided time series that may be correlated with the signal) as well as the <strong>hierarchical structure</strong> of the signal (by aggregating spatial components forecasts, for example)</p>\n<p>PyAF <strong>uses <a href=\"http://pandas.pydata.org/\" rel=\"nofollow\">Pandas</a> as a data access layer</strong>. It consumes data coming from a pandas data-\nframe (with time and signal columns), builds a time series model, and outputs\nthe forecasts in a pandas data-frame. Pandas is an excellent data access layer,\nit allows reading/writing a huge set of file formats, accessing various data\nsources (databases) and has an extensive set of algorithms to handle data-\nframes (aggregation, statistics, linear algebra, plotting etc).</p>\n<p>PyAF statistical time series models are built/estimated/trained using <a href=\"http://scikit-learn.org\" rel=\"nofollow\">scikit-learn library</a>.</p>\n<p>The following features are available :</p>\n<ol>\n<li><strong>Training a model</strong> to forecast a time series (given in a pandas data-frame\nwith time and signal columns).\n<ul>\n<li>PyAF uses a <strong>machine learning approach</strong> (The signal is cut into Estimation\nand validation parts, respectively, 80% and 20% of the signal).</li>\n<li>A <a href=\"https://github.com/antoinecarme/pyaf/issues/105\" rel=\"nofollow\">time-series cross-validation</a> can also be used.</li>\n</ul>\n</li>\n<li>Forecasting a time series model on a given <strong>horizon</strong> (forecast result is\nalso pandas data-frame) and providing <strong>prediction/confidence intervals</strong> for\nthe forecasts.</li>\n<li>Generic training features\n<ul>\n<li><a href=\"http://en.wikipedia.org/wiki/Decomposition_of_time_series\" rel=\"nofollow\">Signal decomposition</a> as the sum of a trend, periodic and AR component</li>\n<li>PyAF works as a competition between a <strong>comprehensive set of possible signal\ntransformations and linear decompositions</strong>. For each transformed\nsignal , a set of possible trends, periodic components and AR models is\ngenerated and all the possible combinations are estimated. The best\ndecomposition in term of performance is kept to forecast the signal (the\nperformance is computed on a part of the signal that was not used for the\nestimation).</li>\n<li><strong>Signal transformation</strong> is supported before <strong>signal decompositions</strong>. Four\ntransformations are supported by default. Other transformation are\navailable (Box-Cox etc).</li>\n<li>All Models are estimated using <strong>standard procedures and state-of-the-art\ntime series modeling</strong>. For example, trend regressions and AR/ARX models\nare estimated using scikit-learn linear regression models.</li>\n<li>Standard performance measures are used (L1, RMSE, MAPE, etc)</li>\n</ul>\n</li>\n<li>PyAF analyzes the <strong>time variable</strong> and infers the frequency from the data.\n<ul>\n<li>Natural time frequencies are supported : Minute, Hour,  Day, Week, Month.</li>\n<li>Strange frequencies like every 3.2 days or every 17 minutes are supported if data are recorded accordingly (every other Monday =&gt; two weeks frequency).</li>\n<li>The frequency is computed as the mean duration between consecutive observations by default (as a <a href=\"https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.tseries.offsets.DateOffset.html\" rel=\"nofollow\">pandas DateOffset</a>).</li>\n<li>The frequency is used to generate values for future dates automatically.</li>\n<li>PyAF does its best when dates are not regularly observed. Time frequency is approximate is this case.</li>\n<li>Real/Integer valued (fake) dates are also supported and handled in a similar way.</li>\n</ul>\n</li>\n<li><strong>Exogenous Data Support</strong>\n<ul>\n<li>Exogenous data can be provided to improve the forecasts. These are\nexpected to be <strong>stored in an external data-frame</strong> (this data-frame will be\nmerged with the training data-frame).</li>\n<li>Exogenous data are integrated in the modeling process through their <strong>past values</strong>\n(<a href=\"http://en.wikipedia.org/wiki/Autoregressive%E2%80%93moving-average_model\" rel=\"nofollow\">ARX models</a>).</li>\n<li><strong>Exogenous variables can be of any type</strong> (numeric, string , date, or\nobject).</li>\n<li>Exogenous variables are <strong>dummified</strong> for the non-numeric types, and\n<strong>standardized</strong> for the numeric types.</li>\n</ul>\n</li>\n<li>PyAF implements <strong>Hierarchical Forecasting</strong>. It follows the excellent approach used in <a href=\"http://www.otexts.org/fpp/9/4\" rel=\"nofollow\">Rob J\nHyndman and George Athanasopoulos book</a>. Thanks @robjhyndman\n<ul>\n<li><strong>Hierarchies</strong> and <strong>grouped time series</strong> are supported.</li>\n<li><strong>Bottom-Up</strong>, <strong>Top-Down</strong> (using proportions), <strong>Middle-Out</strong> and <strong>Optimal Combinations</strong> are\nimplemented.</li>\n</ul>\n</li>\n<li>The modeling process is <strong>customizable</strong> and has a huge set of <strong>options</strong>. The\ndefault values of these options should however be OK to produce a reasonable quality model in a limited amount of time (a few minutes).\n<ul>\n<li>These options give access to a full set of <a href=\"https://github.com/antoinecarme/pyaf/blob/ba09233db42d43b9aa16b6151f00794193401841/TS/Options.py#L18\" rel=\"nofollow\">signal transformations</a> and <a href=\"https://github.com/antoinecarme/pyaf/blob/ba09233db42d43b9aa16b6151f00794193401841/TS/Options.py#L37\" rel=\"nofollow\">AR-like models</a> that are not enabled by default.</li>\n<li>Gives rise to Logit , Fisher transformations as well as XGBoost and Support Vectort Regressions and Croston intermittent models, among others.</li>\n<li>By default , PyAF uses a <strong>fast mode</strong> that activates many popular models. It is also possible to activate a <strong>slow mode</strong>, in which pyaf explores all possible models.</li>\n<li>Specific models and features can be customized.</li>\n</ul>\n</li>\n<li>A <strong>benchmarking process</strong> is in place (using M1, M2, M3 competitions, NN3,\nNN5 forecasting competitions).\n<ul>\n<li>This process will be used to control the quality of modeling changes introduced in the future versions of PyAF. A  <a href=\"https://github.com/antoinecarme/pyaf/issues/45\" rel=\"nofollow\">related  github issue</a> is created.</li>\n<li>Benchmarks data/reports are saved in a separate <a href=\"https://github.com/antoinecarme/PyAF_Benchmarks\" rel=\"nofollow\">github repository</a>.</li>\n<li>Sample <a href=\"https://github.com/antoinecarme/PyAF_Benchmarks/blob/master/reporting/data/M1_COMP_debrief.csv\" rel=\"nofollow\">benchmark report</a> with 1001 datasets from the M1 Forecasting Competition.</li>\n</ul>\n</li>\n<li>Basic <strong>plotting</strong> functions using matplotlib with standard time series and\nforecasts plots.</li>\n<li><strong>Software Quality</strong> Highlights\n<ul>\n<li>An <strong>object-oriented</strong> approach is used for the system design. Separation of\nconcerns is the key factor here.</li>\n<li><strong>Fully written in python</strong> with numpy, scipy, pandas and scikit-learn\nobjects. Tries to be <strong>column-based</strong> everywhere for performance reasons (respecting some modeling time and memory constraints).</li>\n<li>Internally using a fit/predict pattern , inspired by scikit-learn, to estimate/forecast the different signal components (trends, cycles and AR models).</li>\n<li>A <strong>test-driven approach (TDD)</strong> is used. Test scripts are available in the <a href=\"tests\" rel=\"nofollow\">tests</a>\ndirectory, one directory for each feature.</li>\n<li><strong>TDD</strong> implies that even the most recent features have some sample scripts in this <a href=\"tests\" rel=\"nofollow\">directory</a>. Want to know how to use cross-validation with PyAF? here are <a href=\"tests/cross_validation\" rel=\"nofollow\">some scripts</a>.</li>\n<li>Some <strong><a href=\"docs\" rel=\"nofollow\">jupyter notebooks</a></strong> are available for demo purposes with standard time series and forecasts plots.</li>\n<li>Very <strong>simple API</strong> for training and forecasting.</li>\n</ul>\n</li>\n<li>A basic <strong>RESTful Web Service</strong> (Flask) is available.\n<ul>\n<li>This service allows building a time series model, forecasting future data and some standard plots by providing a minimal specification of the signal in the JSON request body (at least a link to a csv file containing the data).</li>\n<li>See <a href=\"WS/README.md\" rel=\"nofollow\">this doc</a> and the <a href=\"https://github.com/antoinecarme/pyaf/issues/20\" rel=\"nofollow\">related github issue</a> for more details.</li>\n</ul>\n</li>\n</ol>\n<p>PyAF is a work in progress. The set of features is evolving. Your feature\nrequests, comments, help, hints are very welcome.</p>\n<h2>Installation</h2>\n<p>PyAF has been developed, tested and used on a python 3.x version.</p>\n<p>It can be installed from PyPI for the latest official release:</p>\n<pre><code>pip install pyaf\n</code></pre>\n<p>The development version is also available by executing :</p>\n<pre><code>pip install scipy pandas sklearn matplotlib pydot dill pathos sqlalchemy xgboost\npip install --upgrade git+git://github.com/antoinecarme/pyaf.git\n</code></pre>\n<h2>Development</h2>\n<p>Code contributions are welcome. Bug reports, request for new features and\ndocumentation, tests are welcome. Please use GitHub platform for these tasks.</p>\n<p>You can check the latest sources of PyAF from GitHub with the command::</p>\n<pre><code>git clone http://github.com/antoinecarme/pyaf.git\n</code></pre>\n<h2>Project history</h2>\n<p>This project was started in summer 2016 as a POC to check the feasibility of an\nautomatic forecasting tool based only on python available data science software\n(numpy, scipy, pandas, scikit-learn etc).</p>\n<p>See the <a href=\"AUTHORS.rst\" rel=\"nofollow\">AUTHORS.rst</a> file for a complete list of contributors.</p>\n<h2>Help and Support</h2>\n<p>PyAF is currently maintained by the original developer. PyAF support will be\nprovided when possible and even if you are not creating an issue, you are encouraged to follow <a href=\"ISSUE_TEMPLATE.md\" rel=\"nofollow\">these guidelines</a>.</p>\n<p>Bug reports, Improvement requests, Documentation, Hints and Test scripts are\nwelcome. Please use the GitHub platform for these tasks.</p>\n<h2>Documentation</h2>\n<p>An <a href=\"https://github.com/antoinecarme/pyaf/blob/master/docs/PyAF_Introduction.ipynb\" rel=\"nofollow\">introductory notebook</a> to the time series forecasting with PyAF is available here. It contains some real-world examples and use cases.</p>\n<p>A specific notebook describing the use of exogenous data is <a href=\"https://github.com/antoinecarme/pyaf/blob/master/docs/PyAF_Exogenous.ipynb\" rel=\"nofollow\">available here</a></p>\n<p>Notebooks describing an example of hierarchical forecasting models are available for <a href=\"https://github.com/antoinecarme/pyaf/blob/master/docs/PyAF_Hierarchical_FrenchWineExportation.ipynb\" rel=\"nofollow\">Signal Hierarchies</a> and for <a href=\"https://github.com/antoinecarme/pyaf/blob/master/docs/PyAF_GroupedSignals_FrenchWineExportation.ipynb\" rel=\"nofollow\">Grouped Signals</a></p>\n<p>The python code is not yet fully documented. This is a top priority (TODO).</p>\n<h2>Communication</h2>\n<p>Comments , appreciations, remarks , etc .... are welcome. Your feedback is\nwelcome if you use this library in a project or a publication.</p>\n\n          </div>"}, "last_serial": 6956922, "releases": {"1.2.1": [{"comment_text": "", "digests": {"md5": "febe0067eca70419b9fddb121a9d8af9", "sha256": "23915a26db4e7bc8224e5bbf6fb55b3892693986a27a0f45c5f8dfa4c6698162"}, "downloads": -1, "filename": "pyaf-1.2.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "febe0067eca70419b9fddb121a9d8af9", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3", "size": 108821, "upload_time": "2020-04-05T00:33:53", "upload_time_iso_8601": "2020-04-05T00:33:53.454404Z", "url": "https://files.pythonhosted.org/packages/37/f6/4d6019123a5c3ac3720db5e491d9b61c24c26032bfcebbe3001e22eb8ec0/pyaf-1.2.1-py2.py3-none-any.whl", "yanked": false}], "1.2.2": [{"comment_text": "", "digests": {"md5": "73fbd1bd3e3d6f3fc853d554049ace16", "sha256": "bb73f23fcf353c81ec5418b01fb0cc7dafdf24e1ec625b5a15ee02aceb5dcc94"}, "downloads": -1, "filename": "pyaf-1.2.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "73fbd1bd3e3d6f3fc853d554049ace16", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3", "size": 108822, "upload_time": "2020-04-05T00:48:12", "upload_time_iso_8601": "2020-04-05T00:48:12.297331Z", "url": "https://files.pythonhosted.org/packages/ba/02/74aff5846eea3527251dbd3f0396bfeb2b29978277fcbec3640596506353/pyaf-1.2.2-py2.py3-none-any.whl", "yanked": false}], "1.2.3": [{"comment_text": "", "digests": {"md5": "9073dc6a63b9e683e859009a94b3992d", "sha256": "2a30f57f91d17c20f3fd2c46b4b3f42c03509a03ae2ee03cbb7707b05ab84f4a"}, "downloads": -1, "filename": "pyaf-1.2.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "9073dc6a63b9e683e859009a94b3992d", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3", "size": 108822, "upload_time": "2020-04-05T08:10:38", "upload_time_iso_8601": "2020-04-05T08:10:38.583503Z", "url": "https://files.pythonhosted.org/packages/2b/7a/5845bab372e9a726cc620641743604085cf994548f18cc1fcdc5ecb9f7f6/pyaf-1.2.3-py2.py3-none-any.whl", "yanked": false}], "1.2.4": [{"comment_text": "", "digests": {"md5": "df1fca21034c715906bacf95f79165f7", "sha256": "97b4be2c500d969ae232e9aef5bd7dce97d6aee23c42010dd206f3e19bdce155"}, "downloads": -1, "filename": "pyaf-1.2.4-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "df1fca21034c715906bacf95f79165f7", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3", "size": 113746, "upload_time": "2020-04-05T17:38:34", "upload_time_iso_8601": "2020-04-05T17:38:34.547140Z", "url": "https://files.pythonhosted.org/packages/d7/ed/929ce8e0638a3b8f0cfeafcc2140aa17f9911130f2cdcc67bbd590fde1c7/pyaf-1.2.4-py2.py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "df1fca21034c715906bacf95f79165f7", "sha256": "97b4be2c500d969ae232e9aef5bd7dce97d6aee23c42010dd206f3e19bdce155"}, "downloads": -1, "filename": "pyaf-1.2.4-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "df1fca21034c715906bacf95f79165f7", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3", "size": 113746, "upload_time": "2020-04-05T17:38:34", "upload_time_iso_8601": "2020-04-05T17:38:34.547140Z", "url": "https://files.pythonhosted.org/packages/d7/ed/929ce8e0638a3b8f0cfeafcc2140aa17f9911130f2cdcc67bbd590fde1c7/pyaf-1.2.4-py2.py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 03:11:54 2020"}