{"info": {"author": "Kyle S. Smith", "author_email": "kyle.s.smith@ucdenver.edu", "bugtrack_url": null, "classifiers": ["Programming Language :: Python"], "description": "Somatic variant identification from unpaired sample\n\nData Format\n===========\n\nInput files mapped reads must be in SAM or BAM format.\n\nKnown germline mutation positions to be excluded must be in a pickled dictionary of dictionaries:\n\n\trecord[(chromosome, position)] = (reference, alternate)\n\t\nA built-in function is included to create this file from a BED file *(see Invocation)*\n\n\nKnown germline mutations to be used for the prior distribution must be in bed format:\n\n\thttps://raw.githubusercontent.com/kylessmith/SomVarIUS/master/example/chr20_dbsnp.bed\n\t\nThe reference fasta must be in FASTA format.\n\n\nThe copy number segment file must be in BED format (first columns are chrome, start, stop)::\n\n    chr1    11873   14409\n\nNOTE: The BAM and BED files are assumed to be *sorted* in the same way, however a\n      built-in function is included to do this *(see Invocation)*\n\nInvocation\n==========\n\nRunning the following command will the available functions::\n\n    $ SomVarIUS -h\n\nGives::\n\n\tpositional arguments:\n\t  {call_mutations,sort,pickle,clones,query_mutations}\n\t    call_mutations      flag to call mutations\n\t    sort                flag to sort bam file and bed file by name\n\t    pickle              flag to store the pickled germline positions from bed\n\t\tclones              flag to classify as clone or sub-clone\n\t\tquery_mutations     flag to query given mutations in the bam\n\n\toptional arguments:\n\t  -h, --help            show this help message and exit\n\nTo call mutations the following command will show available inputs::\n\n\t$ SomVarIUS call_mutations -h\n\nGives::\n\n\t  --bam BAM             input bam file\n\t  --ref REF             reference fasta file\n\t  --out OUT             output file\n\t  --rna_seq RNA_SEQ     RNA-seq bam file name\n\t  --germ_pos GERM_POS   pickled hapmap file\n\t  --dbsnp_bed DBSNP_BED\n\t                        dbsnp bed file name\n\t  --copy_bed COPY_BED   copy number bed file name\n\t  --min_reads MIN_READS\n\t                        minimum base coverage (default=10)\n\t  --min_support MIN_SUPPORT\n\t                        minimum number of reads supported alternate allele\n\t                        (default=4)\n\t  --min_af MIN_AF       minimum allele frequency (default=0.05)\n\t  --min_pvalue MIN_PVALUE\n\t                        minimum pvalue (default=0.001)\n\t  --min_fr MIN_FR       minimum reverse/forward read ratio (default=0.05)\n\t  --min_qual MIN_QUAL   minimum mean quality for alternate allele (default=25)\n\t  --min_se MIN_SE       minimum probability not sequencing error\n\t                        (default=0.999)\n\t  --min_hetero MIN_HETERO\n\t                        minimum probability not germline (default=0.95)\n\t  --ref_filter          flag to filter by reference fasta (default=False)\n\t  --binom               flag to use binomial test instead of beta-binomial\n\t                        (default=False)\n\t  --min_mapq MIN_MAPQ   minimum mapping quality (default=55)\n\t  --min_baseq MIN_BASEQ\n\t                        minimum base quality (default=13)\n\t  --chrom CHROM         Chromosome name to look at\n\t  --start START         starting position\n\t  --end END             ending position\n\t  --dist DIST           write the beta binomial parameters to a file\n\nTo sort a bam file and bed file by name the following command will show available inputs::\n\n\t$ SomVarIUS sort -h\n\nGives::\n\n\t  --bam BAM             input bam file\n\t  --bam_out BAM_OUT     name of sorted bam file\n\t  --dbsnp DBSNP         input dbsnp bed file\n\t  --dbsnp_out DBSNP_OUT\n\t                        name of sorted dbsnp file\n\nTo create a pickle of bed file positions the following command will show available inputs::\n\n\t$ SomVarIUS pickle -h\n\nGives::\n\n\t  --dbsnp DBSNP         input dbsnp bed file\n\t  --dbsnp_out DBSNP_OUT\n\t                        name of pickled dbsnp file\n\nTo classify mutations as clonal or sub-clonal::\n\n\t$ SomVarIUS clones -h\n\nGives::\n\n\t  --vcf VCF   vcf file\n\t  --t T       tumor purity (default=1.0)\n\t  --gmm       flag to classify by gaussian mixture model (default=False)\n\nTo query a list of mutations in bed format (chrom  start  end  ref  alt)::\n\n\t$ SomVarIUS query_mutations -h\n\t\nGives::\n\n\t  --bam BAM             input bam file\n\t  --out OUT             output file\n\t  --muts MUTS           mutation bed file\n\t  --min_reads MIN_READS\n\t                        minimum base coverage (default=10)\n\t  --min_support MIN_SUPPORT\n\t                        minimum number of reads supported alternate allele\n\t                        (default=4)\n\t  --min_mapq MIN_MAPQ   minimum mapping quality (default=55)\n\t  --min_baseq MIN_BASEQ\n\t                        minimum base quality (default=13)\n\t\t\nQuickStart\n==========\n\nIf your files are sorted in the same way and you want to call somatic mutations in all chromosomes.\n\nsomatic mutations\n-----------------\n::\n\n\t$ SomVarIUS call_mutations \\\n\t\t--bam test.bam \\\n\t\t--ref test.fa \\\n\t\t--out test_output.txt \\\n\t\t--germ_pos dbsnp_pos.pickle \\\n\t\t--dbsnp_bed test_dbsnp.bed \\\n\t\t--ref_filter\n\nThe output will be shown in VCF format.\n\nExample\n=======\n\nTo run the example files, from the examples directory first run::\n\n\t$ SomVarIUS pickle \\\n\t\t--dbsnp chr20_dbsnp.bed\n\t\t--dbsnp_out chr20_dbsnp.pickle\n\t\t\nThen run::\n\n\t$ SomVarIUS call_mutations \\\n\t\t--bam chr20.bam \\\n\t\t--ref chr20.fa \\\n\t\t--out chr20.vcf \\\n\t\t--germ_pos chr20_dbsnp.pickle \\\n\t\t--dbsnp_bed chr20_dbsnp.bed \\\n\t\t--dist dist.txt \\\n\t\t--min_pvalue 0.05 \\\n\t\t--ref_filter\n\t\t\nThe first time this is run the program will detect the files have not been index and index them.\nThe results will be in *chr20.vcf* file and the *dist.txt* will have the estimated parameters \nfor the fitted beta-binomial distribution. The arguments used are recorded in the *chr20_args.txt*\nfile.\n\nInstallation\n============\n\npip can be used to install by::\n\n\t$ pip install SomVarIUS\n\t\nor download from github and run::\n\n\t$ python setup.py install\n\nIf you dont already have numpy and scipy installed, it is best to download\n`Anaconda`, a python distribution that has them included.  \n\n    https://continuum.io/downloads\n\nDependencies can be installed by::\n\n    pip install -r requirements.txt\n\nThe program also depends on Samtools which is available from https://github.com/samtools/samtools", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/kylessmith/SomVarIUS", "keywords": null, "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "SomVarIUS", "package_url": "https://pypi.org/project/SomVarIUS/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/SomVarIUS/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/kylessmith/SomVarIUS"}, "release_url": "https://pypi.org/project/SomVarIUS/1.1/", "requires_dist": null, "requires_python": null, "summary": "A Python utility for calling somatic mutations from a BAM or SAM file", "version": "1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Somatic variant identification from unpaired sample</p>\n<div id=\"data-format\">\n<h2>Data Format</h2>\n<p>Input files mapped reads must be in SAM or BAM format.</p>\n<p>Known germline mutation positions to be excluded must be in a pickled dictionary of dictionaries:</p>\n<blockquote>\nrecord[(chromosome, position)] = (reference, alternate)</blockquote>\n<p>A built-in function is included to create this file from a BED file <em>(see Invocation)</em></p>\n<p>Known germline mutations to be used for the prior distribution must be in bed format:</p>\n<blockquote>\n<a href=\"https://raw.githubusercontent.com/kylessmith/SomVarIUS/master/example/chr20_dbsnp.bed\" rel=\"nofollow\">https://raw.githubusercontent.com/kylessmith/SomVarIUS/master/example/chr20_dbsnp.bed</a></blockquote>\n<p>The reference fasta must be in FASTA format.</p>\n<p>The copy number segment file must be in BED format (first columns are chrome, start, stop):</p>\n<pre>chr1    11873   14409\n</pre>\n<dl>\n<dt>NOTE: The BAM and BED files are assumed to be <em>sorted</em> in the same way, however a</dt>\n<dd>built-in function is included to do this <em>(see Invocation)</em></dd>\n</dl>\n</div>\n<div id=\"invocation\">\n<h2>Invocation</h2>\n<p>Running the following command will the available functions:</p>\n<pre>$ SomVarIUS -h\n</pre>\n<p>Gives:</p>\n<pre>positional arguments:\n  {call_mutations,sort,pickle,clones,query_mutations}\n    call_mutations      flag to call mutations\n    sort                flag to sort bam file and bed file by name\n    pickle              flag to store the pickled germline positions from bed\n        clones              flag to classify as clone or sub-clone\n        query_mutations     flag to query given mutations in the bam\n\noptional arguments:\n  -h, --help            show this help message and exit\n</pre>\n<p>To call mutations the following command will show available inputs:</p>\n<pre>$ SomVarIUS call_mutations -h\n</pre>\n<p>Gives:</p>\n<pre>--bam BAM             input bam file\n--ref REF             reference fasta file\n--out OUT             output file\n--rna_seq RNA_SEQ     RNA-seq bam file name\n--germ_pos GERM_POS   pickled hapmap file\n--dbsnp_bed DBSNP_BED\n                      dbsnp bed file name\n--copy_bed COPY_BED   copy number bed file name\n--min_reads MIN_READS\n                      minimum base coverage (default=10)\n--min_support MIN_SUPPORT\n                      minimum number of reads supported alternate allele\n                      (default=4)\n--min_af MIN_AF       minimum allele frequency (default=0.05)\n--min_pvalue MIN_PVALUE\n                      minimum pvalue (default=0.001)\n--min_fr MIN_FR       minimum reverse/forward read ratio (default=0.05)\n--min_qual MIN_QUAL   minimum mean quality for alternate allele (default=25)\n--min_se MIN_SE       minimum probability not sequencing error\n                      (default=0.999)\n--min_hetero MIN_HETERO\n                      minimum probability not germline (default=0.95)\n--ref_filter          flag to filter by reference fasta (default=False)\n--binom               flag to use binomial test instead of beta-binomial\n                      (default=False)\n--min_mapq MIN_MAPQ   minimum mapping quality (default=55)\n--min_baseq MIN_BASEQ\n                      minimum base quality (default=13)\n--chrom CHROM         Chromosome name to look at\n--start START         starting position\n--end END             ending position\n--dist DIST           write the beta binomial parameters to a file\n</pre>\n<p>To sort a bam file and bed file by name the following command will show available inputs:</p>\n<pre>$ SomVarIUS sort -h\n</pre>\n<p>Gives:</p>\n<pre>--bam BAM             input bam file\n--bam_out BAM_OUT     name of sorted bam file\n--dbsnp DBSNP         input dbsnp bed file\n--dbsnp_out DBSNP_OUT\n                      name of sorted dbsnp file\n</pre>\n<p>To create a pickle of bed file positions the following command will show available inputs:</p>\n<pre>$ SomVarIUS pickle -h\n</pre>\n<p>Gives:</p>\n<pre>--dbsnp DBSNP         input dbsnp bed file\n--dbsnp_out DBSNP_OUT\n                      name of pickled dbsnp file\n</pre>\n<p>To classify mutations as clonal or sub-clonal:</p>\n<pre>$ SomVarIUS clones -h\n</pre>\n<p>Gives:</p>\n<pre>--vcf VCF   vcf file\n--t T       tumor purity (default=1.0)\n--gmm       flag to classify by gaussian mixture model (default=False)\n</pre>\n<p>To query a list of mutations in bed format (chrom  start  end  ref  alt):</p>\n<pre>$ SomVarIUS query_mutations -h\n</pre>\n<p>Gives:</p>\n<pre>--bam BAM             input bam file\n--out OUT             output file\n--muts MUTS           mutation bed file\n--min_reads MIN_READS\n                      minimum base coverage (default=10)\n--min_support MIN_SUPPORT\n                      minimum number of reads supported alternate allele\n                      (default=4)\n--min_mapq MIN_MAPQ   minimum mapping quality (default=55)\n--min_baseq MIN_BASEQ\n                      minimum base quality (default=13)\n</pre>\n</div>\n<div id=\"quickstart\">\n<h2>QuickStart</h2>\n<p>If your files are sorted in the same way and you want to call somatic mutations in all chromosomes.</p>\n<div id=\"somatic-mutations\">\n<h3>somatic mutations</h3>\n<pre>$ SomVarIUS call_mutations \\\n        --bam test.bam \\\n        --ref test.fa \\\n        --out test_output.txt \\\n        --germ_pos dbsnp_pos.pickle \\\n        --dbsnp_bed test_dbsnp.bed \\\n        --ref_filter\n</pre>\n<p>The output will be shown in VCF format.</p>\n</div>\n</div>\n<div id=\"example\">\n<h2>Example</h2>\n<p>To run the example files, from the examples directory first run:</p>\n<pre>$ SomVarIUS pickle \\\n        --dbsnp chr20_dbsnp.bed\n        --dbsnp_out chr20_dbsnp.pickle\n</pre>\n<p>Then run:</p>\n<pre>$ SomVarIUS call_mutations \\\n        --bam chr20.bam \\\n        --ref chr20.fa \\\n        --out chr20.vcf \\\n        --germ_pos chr20_dbsnp.pickle \\\n        --dbsnp_bed chr20_dbsnp.bed \\\n        --dist dist.txt \\\n        --min_pvalue 0.05 \\\n        --ref_filter\n</pre>\n<p>The first time this is run the program will detect the files have not been index and index them.\nThe results will be in <em>chr20.vcf</em> file and the <em>dist.txt</em> will have the estimated parameters\nfor the fitted beta-binomial distribution. The arguments used are recorded in the <em>chr20_args.txt</em>\nfile.</p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>pip can be used to install by:</p>\n<pre>$ pip install SomVarIUS\n</pre>\n<p>or download from github and run:</p>\n<pre>$ python setup.py install\n</pre>\n<p>If you dont already have numpy and scipy installed, it is best to download\n<cite>Anaconda</cite>, a python distribution that has them included.</p>\n<blockquote>\n<a href=\"https://continuum.io/downloads\" rel=\"nofollow\">https://continuum.io/downloads</a></blockquote>\n<p>Dependencies can be installed by:</p>\n<pre>pip install -r requirements.txt\n</pre>\n<p>The program also depends on Samtools which is available from <a href=\"https://github.com/samtools/samtools\" rel=\"nofollow\">https://github.com/samtools/samtools</a></p>\n</div>\n\n          </div>"}, "last_serial": 2610333, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "c0a10e9b875f2f07f11b868f9a09ed3b", "sha256": "1c7fa8e63c45601a2813e9e92b03a82b3d541174fe55eb3e9af9d4b4f24f2e5a"}, "downloads": -1, "filename": "SomVarIUS-0.1.tar.gz", "has_sig": false, "md5_digest": "c0a10e9b875f2f07f11b868f9a09ed3b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 179258, "upload_time": "2015-09-23T19:34:47", "upload_time_iso_8601": "2015-09-23T19:34:47.260307Z", "url": "https://files.pythonhosted.org/packages/45/b7/2b0d2b7d70781081b5d1a12a6f306d4baff0bfce764a876501a7fb571eb3/SomVarIUS-0.1.tar.gz", "yanked": false}], "1.1": [{"comment_text": "", "digests": {"md5": "c176cc1de9d69272e733e2b6730b1a11", "sha256": "a2a03b6b0f864a3f71032454246dd2ffcea5a201fcf225d00fb60d9703c692bf"}, "downloads": -1, "filename": "SomVarIUS-1.1.tar.gz", "has_sig": false, "md5_digest": "c176cc1de9d69272e733e2b6730b1a11", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 179286, "upload_time": "2015-09-23T19:45:45", "upload_time_iso_8601": "2015-09-23T19:45:45.555115Z", "url": "https://files.pythonhosted.org/packages/40/03/6f341993c04eaf317f3c74173b1505a56d194a9a9c571344a27cb631af9c/SomVarIUS-1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c176cc1de9d69272e733e2b6730b1a11", "sha256": "a2a03b6b0f864a3f71032454246dd2ffcea5a201fcf225d00fb60d9703c692bf"}, "downloads": -1, "filename": "SomVarIUS-1.1.tar.gz", "has_sig": false, "md5_digest": "c176cc1de9d69272e733e2b6730b1a11", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 179286, "upload_time": "2015-09-23T19:45:45", "upload_time_iso_8601": "2015-09-23T19:45:45.555115Z", "url": "https://files.pythonhosted.org/packages/40/03/6f341993c04eaf317f3c74173b1505a56d194a9a9c571344a27cb631af9c/SomVarIUS-1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:06:39 2020"}