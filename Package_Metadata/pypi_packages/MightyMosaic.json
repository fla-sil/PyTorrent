{"info": {"author": "Aur\u00e9lien COLIN", "author_email": "aureliencolin@hotmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Programming Language :: Python :: 3.6"], "description": "\n# MightyMosaic\n\n- [Introduction](#introduction)\n- [Requirements](#requirements)\n- [How to Use](#how-to-use)\n    - [Open the images](#open-the-images)\n    - [Create a basic mosaic](#create-a-basic-mosaic)\n    - [Create an overlapping mosaic](#create-an-overlapping-mosaic)\n    - [About the *fill\\_mode* parameter](#about-the-fill_mode-parameter)\n\n\n## Introduction\n\nThe goal of the library is to create a \"mosaic\", which is a sublass of np.ndarray, dividing images of arbitrary shape into a 4d or 5d array. \nThe class is implemented so that we can apply functions on the tiles (usually the prediction function of a neural network, which has a fixed input shape) and fuse the result.\n\nThe MightyMosaic allow the overlapping of tiles, which is necessary to avoid discrepancies between adjacent tiles.\n\n\n## Requirements\n\nAs we use f-string (in the asserts), it is necessary to have, at least, **python3.6**.\n\n- numpy\n- tqdm\n\nFor running this jupyter notebook (which should have been converted to markdown at some point), we also need the following library:\n- matplotlib\n- pillow\n- keras\n\n\n\n## How to use\n\nLet's begin by importing the library that we need and define the filename for both the images and the model that we will use.\n\nBtw, credits for itout (pixiv69581) and Akae Neo (pixiv17014316) for drawing the pictures that we used as examples.\n\n\n```python\nimport os \n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport PIL.Image\n\nfrom keras.models import load_model\n\nfrom MightyMosaic import MightyMosaic\n```\n\n\n```python\nface_filename = \"3578641 0.png\"\nfull_filename = \"__original_drawn_by_itou_onsoku_tassha__sample-f9c6557ccec993c08627d33e49cf4524.jpg\"\nmodel_filename = \"open_eyes_saliency_256.h5\"\n```\n\n\n```python\nmodel = load_model(model_filename)\nprint(f\"The model input shape is {model.input_shape}\")\n```\n\n    The model input shape is (None, 256, 256, 3)\n\n\n### Open the images\n\nThe opening of the images can be done directly using PIL and numpy.\n\nFirst, we show that our model can process a picture of shape (256, 256, 3) (more accurately, a batch of shape (?, 256, 256, 3)).\n\n\n\n```python\nface_im = np.array(PIL.Image.open(face_filename))/255\nfull_im = np.array(PIL.Image.open(full_filename))/255\n\nprediction = model.predict(np.expand_dims(face_im, axis=0))[0,:,:,0]\n```\n\n\n```python\nplt.figure(figsize=(16, 8))\nplt.subplot(121)\nplt.imshow(face_im, interpolation='bilinear', vmin=0, vmax=1)\nplt.subplot(122)\nplt.imshow(prediction, interpolation='bilinear', vmin=0, vmax=1)\nplt.show()\n```\n\n\n![png](https://raw.githubusercontent.com/Rignak/MightyMosaic/master/README_files/README_9_0.png)\n\n\nNice, right? The model return a value of 0 on closed eyes, and 1 on opened eyes.\n\n### Create a basic mosaic\n\nHowever, if we want to run the model on picture of different shape, we need either to resize the picture, which is, obviously, non-ideal, are to divide it in patch and run the network on each of them.\n\nWe will start by creating the mosaic, applying the model can be done later.\n\nIt is done by calling the method *MightyMosaic.from\\_array*. The basic usage is to provide only two parameters : the image that we want to transform, and the size of each tiles (here (256,256)).\nPlease note that it is not mandatory to have square tiles, it's just how our network was constructed.\n\nAfter constructing the mosaic, we will try to retrieve the original image. This is done with the *get\\_fusion* method.\n\n\n```python\nmosaic_without_overlap = MightyMosaic.from_array(full_im, (256,256), overlap_factor=1)\nprint(f'The mosaic shape is {mosaic_without_overlap.shape}')\n\nplt.figure(figsize=(16, 16))\nplt.subplot(121)\nplt.title(f'Image with shape {full_im.shape}')\nplt.imshow(full_im, interpolation='bilinear', vmin=0, vmax=1)\n\nplt.subplot(122)\nplt.title('Mosaic reconstruction')\nplt.imshow(mosaic_without_overlap.get_fusion(), interpolation='bilinear', vmin=0, vmax=1)\nplt.show()\n```\n\n    The mosaic shape is (4, 4, 256, 256, 3)\n\n\n\n![png](https://raw.githubusercontent.com/Rignak/MightyMosaic/master/README_files/README_11_1.png)\n\n\nIf the two images are different, that's mean that I commit something, broke another, and didn't check the results. Hopefully, that didn't happen.\n\nLet's apply the *predict* method and check the result.\n\nPlease ensure that, if the *predict* take an input of shape *(?, x, y, z)*, it returns an array of shape *(?, x', y', z')* or *(?, x', y')* (so, no additional dimensions). There is another condition on *x'*, *y'* that we will see later.\n\nWe can have a *progress\\_bar* to see the progress of the prediction. \n\n\n```python\nfused_prediction_without_overlap = mosaic_without_overlap.apply(model.predict, progress_bar=True)\nprint(f'The prediction shape is : {fused_prediction_without_overlap.shape}')\nfused_prediction_without_overlap = fused_prediction_without_overlap.get_fusion()\n\nplt.figure(figsize=(16, 16))\nplt.subplot(121)\nplt.title(f'Image with shape {full_im.shape}')\nplt.imshow(full_im, interpolation='bilinear', vmin=0, vmax=1)\n\nplt.subplot(122)\nplt.title('Prediction on the mosaic')\nplt.imshow(fused_prediction_without_overlap[:,:,0], interpolation='bilinear', vmin=0, vmax=1)\nplt.show()\n```\n\n\n    HBox(children=(IntProgress(value=0, max=16), HTML(value='')))\n\n\n\n    The prediction shape is : (4, 4, 256, 256, 1)\n\n\n\n![png](https://raw.githubusercontent.com/Rignak/MightyMosaic/master/README_files/README_13_2.png)\n\n\nMeh. Not convinced about the results? Maybe it's because of the boundary of each tile, clearly visible in the prediction. And since the left eye is between four tiles, the prediction can't be accurate.\n\n### Create an overlapping mosaic\n\nIn fact, what we want is an overlapping mosaic (meaning that the tiles overlap). And that's what MightyMosaic is for.\n\nLet's create a mosaic with an *overlapping\\_factor* of 2, meaning that the stride, between each tile is only *tile\\_shape*/2.\nOf course, an overlapping_factor of one means no overlapping, and you can increase the factor to any positive integer. However, please note that the number of tile increase with *tile\\_shape*^2, so might want to refrain to use a high *overlapping\\_factor* (it would be quite useless anyway).\n\n\nAlso, do not use a *overlap\\_factor* that can't divide the *tile\\_shape* (that also means that you want to avoid odd shapes).\nWe previously talk about a condition on *x'* and *y'*, it is the same as on *x*, *y* : they must be multiple of the correspondant *overlap\\_factor*.\n\n\n```python\nmosaic = MightyMosaic.from_array(full_im, (256,256), overlap_factor=2)\nprint(f'The mosaic shape is {mosaic.shape}')\n```\n\n    The mosaic shape is (8, 8, 256, 256, 3)\n\n\nThe number of tiles is not of 16 anymore, but raises to 64.\n\nOur prediction support batchs, so we will use it to speed up the processing a little: we add a parameter *batch\\_size* with 8 as a value.\n\n\n```python\nprediction = mosaic.apply(model.predict, progress_bar=True, batch_size=8)\nprediction = prediction.get_fusion()\n\nplt.figure(figsize=(16, 16))\nplt.subplot(121)\nplt.title(f'Image with shape {full_im.shape}')\nplt.imshow(full_im, interpolation='bilinear', vmin=0, vmax=1)\n\nplt.subplot(122)\nplt.title('Prediction on the mosaic')\nplt.imshow(prediction[:,:,0], interpolation='bilinear', vmin=0, vmax=1)\nplt.show()\n```\n\n\n    HBox(children=(IntProgress(value=0, max=8), HTML(value='')))\n\n\n\n\n\n\n![png](https://raw.githubusercontent.com/Rignak/MightyMosaic/master/README_files/README_17_2.png)\n\n\nThe prediction is quite better, without visible borders between tiles.\n\n### About the *fill\\_mode* parameter\n\nCopying the keras *fill\\_mode* parameter, we enable to change the way the mosaic is filled.\nThe possible values are *constant*, *nearest* and *reflect*. Please refer to the [documentation of keras](https://keras.io/preprocessing/image/) for more details.\n\nHere, we create a mosaic with \"*reflect*\" as the *fill\\_mode*.\n\n\n```python\nmosaic_with_reflection = MightyMosaic.from_array(full_im, (256,256), overlap_factor=4, fill_mode='reflect')\nprint(f'The mosaic shape is {mosaic_with_reflection.shape}')\n```\n\n    The mosaic shape is (16, 16, 256, 256, 3)\n\n\nOK, now, we are ready to plot, side by side, the prediction for:\n- the mosaic without overlap (I);\n- the mosaic with an *overlapping\\_factor* of 2 (II);\n- the mosaic with an *overlapping\\_factor* of 4 and a *fill\\_mode* at \"*nearest*\" (III).\n\nWe also plot abs(II-I) and abs(III-II) to highlight the effects of the parameters.\n\n\n```python\nprediction_with_reflection = mosaic_with_reflection.apply(model.predict, \n                                                          progress_bar=True, batch_size=8)\nprediction_with_reflection = prediction_with_reflection.get_fusion()\n\nplt.figure(figsize=(18, 16))\nplt.subplot(234)\nplt.title('Input')\nplt.imshow(full_im, interpolation='bilinear', vmin=0, vmax=1)\nplt.subplot(231)\nplt.title(f'(I) shape={fused_prediction_without_overlap.shape}')\nplt.imshow(fused_prediction_without_overlap[:,:,0], interpolation='bilinear', vmin=0, vmax=1)\nplt.subplot(232)\nplt.title(f'(II) shape={prediction.shape}')\nplt.imshow(prediction[:,:,0], interpolation='bilinear', vmin=0, vmax=1)\nplt.subplot(233)\nplt.title(f'(III) shape={prediction_with_reflection.shape}')\nplt.imshow(prediction_with_reflection[:,:,0], interpolation='bilinear', vmin=0, vmax=1)\nplt.subplot(235)\nplt.title('abs(II-I)')\nplt.imshow(abs(fused_prediction_without_overlap-prediction)[:,:,0], interpolation='bilinear', vmin=0, vmax=1)\nplt.subplot(236)\nplt.title('abs(III-II)')\nplt.imshow(abs(prediction-prediction_with_reflection)[:,:,0], interpolation='bilinear', vmin=0, vmax=1)\nplt.show()\n```\n\n\n    HBox(children=(IntProgress(value=0, max=32), HTML(value='')))\n\n\n\n\n\n\n![png](https://raw.githubusercontent.com/Rignak/MightyMosaic/master/README_files/README_21_2.png)\n\n\nThat's it.\n\nP.S. It's completely possible to use a categorizer for the prediction. Of course, since the original goal of the mosaic is to use segmentation, we assert that the output of the network should be of size *(?, h, w, c)* with:\n- *?* the number of batch ;\n- *h* the height of the output ;\n- *w* the width of the output ;\n- *c* the number of canals.\n\nA categorizer would have a output shape of *(?, n)* with *n* the number of classes, but you can tweak the lambda to get the correct dimensions.\n\n```python\nmosaic = from_array(im, (tile_size,tile_size), overlap_factor=f)\nprediction = mosaic.apply(lambda x: np.tile(model.predict(x), f*f).reshape(1, f, f, n))\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Rignak/MightyMosaic", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "MightyMosaic", "package_url": "https://pypi.org/project/MightyMosaic/", "platform": "", "project_url": "https://pypi.org/project/MightyMosaic/", "project_urls": {"Homepage": "https://github.com/Rignak/MightyMosaic"}, "release_url": "https://pypi.org/project/MightyMosaic/1.2.3/", "requires_dist": ["tqdm (>=4.32.1)"], "requires_python": ">=3.6", "summary": "Create mosaics with overlapping tiles", "version": "1.2.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>MightyMosaic</h1>\n<ul>\n<li><a href=\"#introduction\" rel=\"nofollow\">Introduction</a></li>\n<li><a href=\"#requirements\" rel=\"nofollow\">Requirements</a></li>\n<li><a href=\"#how-to-use\" rel=\"nofollow\">How to Use</a>\n<ul>\n<li><a href=\"#open-the-images\" rel=\"nofollow\">Open the images</a></li>\n<li><a href=\"#create-a-basic-mosaic\" rel=\"nofollow\">Create a basic mosaic</a></li>\n<li><a href=\"#create-an-overlapping-mosaic\" rel=\"nofollow\">Create an overlapping mosaic</a></li>\n<li><a href=\"#about-the-fill_mode-parameter\" rel=\"nofollow\">About the <em>fill_mode</em> parameter</a></li>\n</ul>\n</li>\n</ul>\n<h2>Introduction</h2>\n<p>The goal of the library is to create a \"mosaic\", which is a sublass of np.ndarray, dividing images of arbitrary shape into a 4d or 5d array.\nThe class is implemented so that we can apply functions on the tiles (usually the prediction function of a neural network, which has a fixed input shape) and fuse the result.</p>\n<p>The MightyMosaic allow the overlapping of tiles, which is necessary to avoid discrepancies between adjacent tiles.</p>\n<h2>Requirements</h2>\n<p>As we use f-string (in the asserts), it is necessary to have, at least, <strong>python3.6</strong>.</p>\n<ul>\n<li>numpy</li>\n<li>tqdm</li>\n</ul>\n<p>For running this jupyter notebook (which should have been converted to markdown at some point), we also need the following library:</p>\n<ul>\n<li>matplotlib</li>\n<li>pillow</li>\n<li>keras</li>\n</ul>\n<h2>How to use</h2>\n<p>Let's begin by importing the library that we need and define the filename for both the images and the model that we will use.</p>\n<p>Btw, credits for itout (pixiv69581) and Akae Neo (pixiv17014316) for drawing the pictures that we used as examples.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">os</span> \n\n<span class=\"kn\">import</span> <span class=\"nn\">matplotlib.pyplot</span> <span class=\"k\">as</span> <span class=\"nn\">plt</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">import</span> <span class=\"nn\">PIL.Image</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">keras.models</span> <span class=\"kn\">import</span> <span class=\"n\">load_model</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">MightyMosaic</span> <span class=\"kn\">import</span> <span class=\"n\">MightyMosaic</span>\n</pre>\n<pre><span class=\"n\">face_filename</span> <span class=\"o\">=</span> <span class=\"s2\">\"3578641 0.png\"</span>\n<span class=\"n\">full_filename</span> <span class=\"o\">=</span> <span class=\"s2\">\"__original_drawn_by_itou_onsoku_tassha__sample-f9c6557ccec993c08627d33e49cf4524.jpg\"</span>\n<span class=\"n\">model_filename</span> <span class=\"o\">=</span> <span class=\"s2\">\"open_eyes_saliency_256.h5\"</span>\n</pre>\n<pre><span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">load_model</span><span class=\"p\">(</span><span class=\"n\">model_filename</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"The model input shape is </span><span class=\"si\">{</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">input_shape</span><span class=\"si\">}</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n</pre>\n<pre><code>The model input shape is (None, 256, 256, 3)\n</code></pre>\n<h3>Open the images</h3>\n<p>The opening of the images can be done directly using PIL and numpy.</p>\n<p>First, we show that our model can process a picture of shape (256, 256, 3) (more accurately, a batch of shape (?, 256, 256, 3)).</p>\n<pre><span class=\"n\">face_im</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">PIL</span><span class=\"o\">.</span><span class=\"n\">Image</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"n\">face_filename</span><span class=\"p\">))</span><span class=\"o\">/</span><span class=\"mi\">255</span>\n<span class=\"n\">full_im</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">PIL</span><span class=\"o\">.</span><span class=\"n\">Image</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"n\">full_filename</span><span class=\"p\">))</span><span class=\"o\">/</span><span class=\"mi\">255</span>\n\n<span class=\"n\">prediction</span> <span class=\"o\">=</span> <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">expand_dims</span><span class=\"p\">(</span><span class=\"n\">face_im</span><span class=\"p\">,</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">))[</span><span class=\"mi\">0</span><span class=\"p\">,:,:,</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n</pre>\n<pre><span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">figure</span><span class=\"p\">(</span><span class=\"n\">figsize</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">16</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">))</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">subplot</span><span class=\"p\">(</span><span class=\"mi\">121</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">imshow</span><span class=\"p\">(</span><span class=\"n\">face_im</span><span class=\"p\">,</span> <span class=\"n\">interpolation</span><span class=\"o\">=</span><span class=\"s1\">'bilinear'</span><span class=\"p\">,</span> <span class=\"n\">vmin</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">vmax</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">subplot</span><span class=\"p\">(</span><span class=\"mi\">122</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">imshow</span><span class=\"p\">(</span><span class=\"n\">prediction</span><span class=\"p\">,</span> <span class=\"n\">interpolation</span><span class=\"o\">=</span><span class=\"s1\">'bilinear'</span><span class=\"p\">,</span> <span class=\"n\">vmin</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">vmax</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n</pre>\n<p><img alt=\"png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5995716c9268b55a5da036e425d3b544b2ac9eeb/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f5269676e616b2f4d69676874794d6f736169632f6d61737465722f524541444d455f66696c65732f524541444d455f395f302e706e67\"></p>\n<p>Nice, right? The model return a value of 0 on closed eyes, and 1 on opened eyes.</p>\n<h3>Create a basic mosaic</h3>\n<p>However, if we want to run the model on picture of different shape, we need either to resize the picture, which is, obviously, non-ideal, are to divide it in patch and run the network on each of them.</p>\n<p>We will start by creating the mosaic, applying the model can be done later.</p>\n<p>It is done by calling the method <em>MightyMosaic.from_array</em>. The basic usage is to provide only two parameters : the image that we want to transform, and the size of each tiles (here (256,256)).\nPlease note that it is not mandatory to have square tiles, it's just how our network was constructed.</p>\n<p>After constructing the mosaic, we will try to retrieve the original image. This is done with the <em>get_fusion</em> method.</p>\n<pre><span class=\"n\">mosaic_without_overlap</span> <span class=\"o\">=</span> <span class=\"n\">MightyMosaic</span><span class=\"o\">.</span><span class=\"n\">from_array</span><span class=\"p\">(</span><span class=\"n\">full_im</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"mi\">256</span><span class=\"p\">,</span><span class=\"mi\">256</span><span class=\"p\">),</span> <span class=\"n\">overlap_factor</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">'The mosaic shape is </span><span class=\"si\">{</span><span class=\"n\">mosaic_without_overlap</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"si\">}</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">figure</span><span class=\"p\">(</span><span class=\"n\">figsize</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">16</span><span class=\"p\">,</span> <span class=\"mi\">16</span><span class=\"p\">))</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">subplot</span><span class=\"p\">(</span><span class=\"mi\">121</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">title</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">'Image with shape </span><span class=\"si\">{</span><span class=\"n\">full_im</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"si\">}</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">imshow</span><span class=\"p\">(</span><span class=\"n\">full_im</span><span class=\"p\">,</span> <span class=\"n\">interpolation</span><span class=\"o\">=</span><span class=\"s1\">'bilinear'</span><span class=\"p\">,</span> <span class=\"n\">vmin</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">vmax</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">subplot</span><span class=\"p\">(</span><span class=\"mi\">122</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">title</span><span class=\"p\">(</span><span class=\"s1\">'Mosaic reconstruction'</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">imshow</span><span class=\"p\">(</span><span class=\"n\">mosaic_without_overlap</span><span class=\"o\">.</span><span class=\"n\">get_fusion</span><span class=\"p\">(),</span> <span class=\"n\">interpolation</span><span class=\"o\">=</span><span class=\"s1\">'bilinear'</span><span class=\"p\">,</span> <span class=\"n\">vmin</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">vmax</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n</pre>\n<pre><code>The mosaic shape is (4, 4, 256, 256, 3)\n</code></pre>\n<p><img alt=\"png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fc50e63920718648b9df8567b80d4befc259e203/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f5269676e616b2f4d69676874794d6f736169632f6d61737465722f524541444d455f66696c65732f524541444d455f31315f312e706e67\"></p>\n<p>If the two images are different, that's mean that I commit something, broke another, and didn't check the results. Hopefully, that didn't happen.</p>\n<p>Let's apply the <em>predict</em> method and check the result.</p>\n<p>Please ensure that, if the <em>predict</em> take an input of shape <em>(?, x, y, z)</em>, it returns an array of shape <em>(?, x', y', z')</em> or <em>(?, x', y')</em> (so, no additional dimensions). There is another condition on <em>x'</em>, <em>y'</em> that we will see later.</p>\n<p>We can have a <em>progress_bar</em> to see the progress of the prediction.</p>\n<pre><span class=\"n\">fused_prediction_without_overlap</span> <span class=\"o\">=</span> <span class=\"n\">mosaic_without_overlap</span><span class=\"o\">.</span><span class=\"n\">apply</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">,</span> <span class=\"n\">progress_bar</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">'The prediction shape is : </span><span class=\"si\">{</span><span class=\"n\">fused_prediction_without_overlap</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"si\">}</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n<span class=\"n\">fused_prediction_without_overlap</span> <span class=\"o\">=</span> <span class=\"n\">fused_prediction_without_overlap</span><span class=\"o\">.</span><span class=\"n\">get_fusion</span><span class=\"p\">()</span>\n\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">figure</span><span class=\"p\">(</span><span class=\"n\">figsize</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">16</span><span class=\"p\">,</span> <span class=\"mi\">16</span><span class=\"p\">))</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">subplot</span><span class=\"p\">(</span><span class=\"mi\">121</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">title</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">'Image with shape </span><span class=\"si\">{</span><span class=\"n\">full_im</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"si\">}</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">imshow</span><span class=\"p\">(</span><span class=\"n\">full_im</span><span class=\"p\">,</span> <span class=\"n\">interpolation</span><span class=\"o\">=</span><span class=\"s1\">'bilinear'</span><span class=\"p\">,</span> <span class=\"n\">vmin</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">vmax</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">subplot</span><span class=\"p\">(</span><span class=\"mi\">122</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">title</span><span class=\"p\">(</span><span class=\"s1\">'Prediction on the mosaic'</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">imshow</span><span class=\"p\">(</span><span class=\"n\">fused_prediction_without_overlap</span><span class=\"p\">[:,:,</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">interpolation</span><span class=\"o\">=</span><span class=\"s1\">'bilinear'</span><span class=\"p\">,</span> <span class=\"n\">vmin</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">vmax</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n</pre>\n<pre><code>HBox(children=(IntProgress(value=0, max=16), HTML(value='')))\n\n\n\nThe prediction shape is : (4, 4, 256, 256, 1)\n</code></pre>\n<p><img alt=\"png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/bcff07e2106019e99a8947fc11b8f02112a76a9a/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f5269676e616b2f4d69676874794d6f736169632f6d61737465722f524541444d455f66696c65732f524541444d455f31335f322e706e67\"></p>\n<p>Meh. Not convinced about the results? Maybe it's because of the boundary of each tile, clearly visible in the prediction. And since the left eye is between four tiles, the prediction can't be accurate.</p>\n<h3>Create an overlapping mosaic</h3>\n<p>In fact, what we want is an overlapping mosaic (meaning that the tiles overlap). And that's what MightyMosaic is for.</p>\n<p>Let's create a mosaic with an <em>overlapping_factor</em> of 2, meaning that the stride, between each tile is only <em>tile_shape</em>/2.\nOf course, an overlapping_factor of one means no overlapping, and you can increase the factor to any positive integer. However, please note that the number of tile increase with <em>tile_shape</em>^2, so might want to refrain to use a high <em>overlapping_factor</em> (it would be quite useless anyway).</p>\n<p>Also, do not use a <em>overlap_factor</em> that can't divide the <em>tile_shape</em> (that also means that you want to avoid odd shapes).\nWe previously talk about a condition on <em>x'</em> and <em>y'</em>, it is the same as on <em>x</em>, <em>y</em> : they must be multiple of the correspondant <em>overlap_factor</em>.</p>\n<pre><span class=\"n\">mosaic</span> <span class=\"o\">=</span> <span class=\"n\">MightyMosaic</span><span class=\"o\">.</span><span class=\"n\">from_array</span><span class=\"p\">(</span><span class=\"n\">full_im</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"mi\">256</span><span class=\"p\">,</span><span class=\"mi\">256</span><span class=\"p\">),</span> <span class=\"n\">overlap_factor</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">'The mosaic shape is </span><span class=\"si\">{</span><span class=\"n\">mosaic</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"si\">}</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n</pre>\n<pre><code>The mosaic shape is (8, 8, 256, 256, 3)\n</code></pre>\n<p>The number of tiles is not of 16 anymore, but raises to 64.</p>\n<p>Our prediction support batchs, so we will use it to speed up the processing a little: we add a parameter <em>batch_size</em> with 8 as a value.</p>\n<pre><span class=\"n\">prediction</span> <span class=\"o\">=</span> <span class=\"n\">mosaic</span><span class=\"o\">.</span><span class=\"n\">apply</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">,</span> <span class=\"n\">progress_bar</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">batch_size</span><span class=\"o\">=</span><span class=\"mi\">8</span><span class=\"p\">)</span>\n<span class=\"n\">prediction</span> <span class=\"o\">=</span> <span class=\"n\">prediction</span><span class=\"o\">.</span><span class=\"n\">get_fusion</span><span class=\"p\">()</span>\n\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">figure</span><span class=\"p\">(</span><span class=\"n\">figsize</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">16</span><span class=\"p\">,</span> <span class=\"mi\">16</span><span class=\"p\">))</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">subplot</span><span class=\"p\">(</span><span class=\"mi\">121</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">title</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">'Image with shape </span><span class=\"si\">{</span><span class=\"n\">full_im</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"si\">}</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">imshow</span><span class=\"p\">(</span><span class=\"n\">full_im</span><span class=\"p\">,</span> <span class=\"n\">interpolation</span><span class=\"o\">=</span><span class=\"s1\">'bilinear'</span><span class=\"p\">,</span> <span class=\"n\">vmin</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">vmax</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">subplot</span><span class=\"p\">(</span><span class=\"mi\">122</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">title</span><span class=\"p\">(</span><span class=\"s1\">'Prediction on the mosaic'</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">imshow</span><span class=\"p\">(</span><span class=\"n\">prediction</span><span class=\"p\">[:,:,</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">interpolation</span><span class=\"o\">=</span><span class=\"s1\">'bilinear'</span><span class=\"p\">,</span> <span class=\"n\">vmin</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">vmax</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n</pre>\n<pre><code>HBox(children=(IntProgress(value=0, max=8), HTML(value='')))\n</code></pre>\n<p><img alt=\"png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ad6885e22ace5878f74cac4a84ded8ba26a28a40/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f5269676e616b2f4d69676874794d6f736169632f6d61737465722f524541444d455f66696c65732f524541444d455f31375f322e706e67\"></p>\n<p>The prediction is quite better, without visible borders between tiles.</p>\n<h3>About the <em>fill_mode</em> parameter</h3>\n<p>Copying the keras <em>fill_mode</em> parameter, we enable to change the way the mosaic is filled.\nThe possible values are <em>constant</em>, <em>nearest</em> and <em>reflect</em>. Please refer to the <a href=\"https://keras.io/preprocessing/image/\" rel=\"nofollow\">documentation of keras</a> for more details.</p>\n<p>Here, we create a mosaic with \"<em>reflect</em>\" as the <em>fill_mode</em>.</p>\n<pre><span class=\"n\">mosaic_with_reflection</span> <span class=\"o\">=</span> <span class=\"n\">MightyMosaic</span><span class=\"o\">.</span><span class=\"n\">from_array</span><span class=\"p\">(</span><span class=\"n\">full_im</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"mi\">256</span><span class=\"p\">,</span><span class=\"mi\">256</span><span class=\"p\">),</span> <span class=\"n\">overlap_factor</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">fill_mode</span><span class=\"o\">=</span><span class=\"s1\">'reflect'</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">'The mosaic shape is </span><span class=\"si\">{</span><span class=\"n\">mosaic_with_reflection</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"si\">}</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n</pre>\n<pre><code>The mosaic shape is (16, 16, 256, 256, 3)\n</code></pre>\n<p>OK, now, we are ready to plot, side by side, the prediction for:</p>\n<ul>\n<li>the mosaic without overlap (I);</li>\n<li>the mosaic with an <em>overlapping_factor</em> of 2 (II);</li>\n<li>the mosaic with an <em>overlapping_factor</em> of 4 and a <em>fill_mode</em> at \"<em>nearest</em>\" (III).</li>\n</ul>\n<p>We also plot abs(II-I) and abs(III-II) to highlight the effects of the parameters.</p>\n<pre><span class=\"n\">prediction_with_reflection</span> <span class=\"o\">=</span> <span class=\"n\">mosaic_with_reflection</span><span class=\"o\">.</span><span class=\"n\">apply</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">,</span> \n                                                          <span class=\"n\">progress_bar</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">batch_size</span><span class=\"o\">=</span><span class=\"mi\">8</span><span class=\"p\">)</span>\n<span class=\"n\">prediction_with_reflection</span> <span class=\"o\">=</span> <span class=\"n\">prediction_with_reflection</span><span class=\"o\">.</span><span class=\"n\">get_fusion</span><span class=\"p\">()</span>\n\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">figure</span><span class=\"p\">(</span><span class=\"n\">figsize</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">18</span><span class=\"p\">,</span> <span class=\"mi\">16</span><span class=\"p\">))</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">subplot</span><span class=\"p\">(</span><span class=\"mi\">234</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">title</span><span class=\"p\">(</span><span class=\"s1\">'Input'</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">imshow</span><span class=\"p\">(</span><span class=\"n\">full_im</span><span class=\"p\">,</span> <span class=\"n\">interpolation</span><span class=\"o\">=</span><span class=\"s1\">'bilinear'</span><span class=\"p\">,</span> <span class=\"n\">vmin</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">vmax</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">subplot</span><span class=\"p\">(</span><span class=\"mi\">231</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">title</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">'(I) shape=</span><span class=\"si\">{</span><span class=\"n\">fused_prediction_without_overlap</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"si\">}</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">imshow</span><span class=\"p\">(</span><span class=\"n\">fused_prediction_without_overlap</span><span class=\"p\">[:,:,</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">interpolation</span><span class=\"o\">=</span><span class=\"s1\">'bilinear'</span><span class=\"p\">,</span> <span class=\"n\">vmin</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">vmax</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">subplot</span><span class=\"p\">(</span><span class=\"mi\">232</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">title</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">'(II) shape=</span><span class=\"si\">{</span><span class=\"n\">prediction</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"si\">}</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">imshow</span><span class=\"p\">(</span><span class=\"n\">prediction</span><span class=\"p\">[:,:,</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">interpolation</span><span class=\"o\">=</span><span class=\"s1\">'bilinear'</span><span class=\"p\">,</span> <span class=\"n\">vmin</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">vmax</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">subplot</span><span class=\"p\">(</span><span class=\"mi\">233</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">title</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">'(III) shape=</span><span class=\"si\">{</span><span class=\"n\">prediction_with_reflection</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"si\">}</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">imshow</span><span class=\"p\">(</span><span class=\"n\">prediction_with_reflection</span><span class=\"p\">[:,:,</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">interpolation</span><span class=\"o\">=</span><span class=\"s1\">'bilinear'</span><span class=\"p\">,</span> <span class=\"n\">vmin</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">vmax</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">subplot</span><span class=\"p\">(</span><span class=\"mi\">235</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">title</span><span class=\"p\">(</span><span class=\"s1\">'abs(II-I)'</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">imshow</span><span class=\"p\">(</span><span class=\"nb\">abs</span><span class=\"p\">(</span><span class=\"n\">fused_prediction_without_overlap</span><span class=\"o\">-</span><span class=\"n\">prediction</span><span class=\"p\">)[:,:,</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">interpolation</span><span class=\"o\">=</span><span class=\"s1\">'bilinear'</span><span class=\"p\">,</span> <span class=\"n\">vmin</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">vmax</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">subplot</span><span class=\"p\">(</span><span class=\"mi\">236</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">title</span><span class=\"p\">(</span><span class=\"s1\">'abs(III-II)'</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">imshow</span><span class=\"p\">(</span><span class=\"nb\">abs</span><span class=\"p\">(</span><span class=\"n\">prediction</span><span class=\"o\">-</span><span class=\"n\">prediction_with_reflection</span><span class=\"p\">)[:,:,</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">interpolation</span><span class=\"o\">=</span><span class=\"s1\">'bilinear'</span><span class=\"p\">,</span> <span class=\"n\">vmin</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">vmax</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n</pre>\n<pre><code>HBox(children=(IntProgress(value=0, max=32), HTML(value='')))\n</code></pre>\n<p><img alt=\"png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a0fb35f20221a73ce428b0dae1fe7a9df61b7773/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f5269676e616b2f4d69676874794d6f736169632f6d61737465722f524541444d455f66696c65732f524541444d455f32315f322e706e67\"></p>\n<p>That's it.</p>\n<p>P.S. It's completely possible to use a categorizer for the prediction. Of course, since the original goal of the mosaic is to use segmentation, we assert that the output of the network should be of size <em>(?, h, w, c)</em> with:</p>\n<ul>\n<li><em>?</em> the number of batch ;</li>\n<li><em>h</em> the height of the output ;</li>\n<li><em>w</em> the width of the output ;</li>\n<li><em>c</em> the number of canals.</li>\n</ul>\n<p>A categorizer would have a output shape of <em>(?, n)</em> with <em>n</em> the number of classes, but you can tweak the lambda to get the correct dimensions.</p>\n<pre><span class=\"n\">mosaic</span> <span class=\"o\">=</span> <span class=\"n\">from_array</span><span class=\"p\">(</span><span class=\"n\">im</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">tile_size</span><span class=\"p\">,</span><span class=\"n\">tile_size</span><span class=\"p\">),</span> <span class=\"n\">overlap_factor</span><span class=\"o\">=</span><span class=\"n\">f</span><span class=\"p\">)</span>\n<span class=\"n\">prediction</span> <span class=\"o\">=</span> <span class=\"n\">mosaic</span><span class=\"o\">.</span><span class=\"n\">apply</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">tile</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">),</span> <span class=\"n\">f</span><span class=\"o\">*</span><span class=\"n\">f</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">reshape</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">))</span>\n</pre>\n\n          </div>"}, "last_serial": 6790980, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "77a0a09f5d30a0061f05ecb3a9a9fb86", "sha256": "2e73ba9d4dd35d662c9eb98ee0b24fd2ffdc72189027bee058ce6f1c7c0fc563"}, "downloads": -1, "filename": "MightyMosaic-1.0.0.tar.gz", "has_sig": false, "md5_digest": "77a0a09f5d30a0061f05ecb3a9a9fb86", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 7865, "upload_time": "2020-02-26T17:26:47", "upload_time_iso_8601": "2020-02-26T17:26:47.910842Z", "url": "https://files.pythonhosted.org/packages/30/c2/88f20bf9fa6716de0ffc43c49da62e4dadbb126aebf6f9455f3a444d89b9/MightyMosaic-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "24417c699c62309582ce7f90643a9ba6", "sha256": "1492a7d9ace7be8c954a93df6a8da8cf72bd1f802d1520a2e6cb37d07fd6f89d"}, "downloads": -1, "filename": "MightyMosaic-1.0.1.tar.gz", "has_sig": false, "md5_digest": "24417c699c62309582ce7f90643a9ba6", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 7846, "upload_time": "2020-02-26T17:28:50", "upload_time_iso_8601": "2020-02-26T17:28:50.650706Z", "url": "https://files.pythonhosted.org/packages/1a/d4/6488b461a7469b0dcae54321bb3748c228eb48666b4f51887031a59ded72/MightyMosaic-1.0.1.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "1c15a973556f75d003fce118a662f4ba", "sha256": "65ad502187e70cf32ba5afb9f824b442bdc394911bf8296847e6fad963128b0b"}, "downloads": -1, "filename": "MightyMosaic-1.1.0.tar.gz", "has_sig": false, "md5_digest": "1c15a973556f75d003fce118a662f4ba", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 8114, "upload_time": "2020-02-27T21:14:01", "upload_time_iso_8601": "2020-02-27T21:14:01.888502Z", "url": "https://files.pythonhosted.org/packages/f4/ae/7793032755f9aaea9b3c84f035d94fb684200f911e8e4aa926dd5097dcb5/MightyMosaic-1.1.0.tar.gz", "yanked": false}], "1.2.2": [{"comment_text": "", "digests": {"md5": "94950fe05e98aa56c03f9e5f34861689", "sha256": "e6452acaf9ea97a8c62f6c389efb3d4de4c46a5d1e8ea1811d92f5871b27d39a"}, "downloads": -1, "filename": "MightyMosaic-1.2.2-py3-none-any.whl", "has_sig": false, "md5_digest": "94950fe05e98aa56c03f9e5f34861689", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 20608, "upload_time": "2020-03-11T09:28:23", "upload_time_iso_8601": "2020-03-11T09:28:23.852578Z", "url": "https://files.pythonhosted.org/packages/07/28/ba870e525cd8fecb5c2ac843da9a85f66ceba57a286c5d9218e6aebe625a/MightyMosaic-1.2.2-py3-none-any.whl", "yanked": false}], "1.2.3": [{"comment_text": "", "digests": {"md5": "3be9c818da90378c9fd92e139fa8c03b", "sha256": "8f019514f607b287e58bbe2834910a0bdb49bb4b1bad583df4f5f6bd006c7e7f"}, "downloads": -1, "filename": "MightyMosaic-1.2.3-py3-none-any.whl", "has_sig": false, "md5_digest": "3be9c818da90378c9fd92e139fa8c03b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 20606, "upload_time": "2020-03-11T09:32:42", "upload_time_iso_8601": "2020-03-11T09:32:42.507308Z", "url": "https://files.pythonhosted.org/packages/0f/0a/5c247e6625bca3f6cf5a9edde71f6a984567226dd297b34f55f8717ef7eb/MightyMosaic-1.2.3-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "3be9c818da90378c9fd92e139fa8c03b", "sha256": "8f019514f607b287e58bbe2834910a0bdb49bb4b1bad583df4f5f6bd006c7e7f"}, "downloads": -1, "filename": "MightyMosaic-1.2.3-py3-none-any.whl", "has_sig": false, "md5_digest": "3be9c818da90378c9fd92e139fa8c03b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 20606, "upload_time": "2020-03-11T09:32:42", "upload_time_iso_8601": "2020-03-11T09:32:42.507308Z", "url": "https://files.pythonhosted.org/packages/0f/0a/5c247e6625bca3f6cf5a9edde71f6a984567226dd297b34f55f8717ef7eb/MightyMosaic-1.2.3-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 00:54:46 2020"}