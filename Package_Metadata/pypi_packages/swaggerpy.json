{"info": {"author": "Digium, Inc.", "author_email": "dlee@digium.com", "bugtrack_url": null, "classifiers": ["Development Status :: 1 - Planning", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "About\n-----\n\nSwagger.py is a Python library for using\n`Swagger <https://developers.helloreverb.com/swagger/>`__ defined API's.\n\nSwagger itself is best described on the Swagger home page:\n\n    Swagger is a specification and complete framework implementation for\n    describing, producing, consuming, and visualizing RESTful web\n    services.\n\nThe `Swagger\nspecification <https://github.com/wordnik/swagger-core/wiki>`__ defines\nhow API's may be described using Swagger.\n\nSwagger.py also supports a WebSocket extension, allowing a WebSocket to\nbe documented, and auto-generated WebSocket client code.\n\nUsage\n-----\n\nInstall the latest release from PyPI.\n\n::\n\n    $ sudo pip install swaggerpy\n\nOr install from source using the ``setup.py`` script.\n\n::\n\n    $ sudo ./setup.py install\n\nAPI\n===\n\nSwagger.py will dynamically build an object model from a Swagger-enabled\nRESTful API.\n\nHere is a simple example using the `Asterisk REST\nInterface <https://wiki.asterisk.org/wiki/display/AST/Asterisk+12+ARI>`__\n\n.. code:: Python\n\n    #!/usr/bin/env python\n\n    import json\n\n    from swaggerpy.client import SwaggerClient\n    from swaggerpy.http_client import SynchronousHttpClient\n\n    http_client = SynchronousHttpClient()\n    http_client.set_basic_auth('localhost', 'hey', 'peekaboo')\n\n    ari = SwaggerClient(\n        \"http://localhost:8088/ari/api-docs/resources.json\",\n        http_client=http_client)\n\n    ws = ari.events.eventWebsocket(app='hello')\n\n    for msg_str in iter(lambda: ws.recv(), None):\n        msg_json = json.loads(msg_str)\n        if msg_json['type'] == 'StasisStart':\n            channelId = msg_json['channel']['id']\n            ari.channels.answer(channelId=channelId)\n            ari.channels.play(channelId=channelId,\n                              media='sound:hello-world')\n            ari.channels.continueInDialplan(channelId=channelId)\n\nswagger-codegen\n===============\n\nThere are the beginnings of a Mustache-based code generator, but it's\nnot functional... yet.\n\n.. Inspired by the original [swagger-codegen][] project, templates are\n   written using [Mustache][] templates ([Pystache][], specifically).\n   There are several important differences.\n\n    * The model that is fed into the mustache templates is almost\n      identical to Swagger's API resource listing and API declaration\n      model. The differences are listed [below](#model).\n    * The templates themselves are completely self contained, with the\n      logic to enrich the model being specified in `translate.py` in the\n      same directory as the `*.mustache` files.\n\nData model\n==========\n\nThe data model presented by the ``swagger_model`` module is nearly\nidentical to the original Swagger API resource listing and API\ndeclaration. This means that if you add extra custom metadata to your\ndocs (such as a ``_author`` or ``_copyright`` field), they will carry\nforward into the object model. I recommend prefixing custom fields with\nan underscore, to avoid collisions with future versions of Swagger.\n\nThere are a few meaningful differences.\n\n-  Resource listing\n-  The ``file`` and ``base_dir`` fields have been added, referencing the\n   original ``.json`` file.\n-  The objects in a ``resource_listing``'s ``api`` array contains a\n   field ``api_declaration``, which is the processed result from the\n   referenced API doc.\n-  API declaration\n-  A ``file`` field has been added, referencing the original ``.json``\n   file.\n\nDevelopment\n-----------\n\nThe code is documented using `Sphinx <http://sphinx-doc.org/>`__, which\nallows `IntelliJ IDEA <http://confluence.jetbrains.net/display/PYH/>`__\nto do a better job at inferring types for autocompletion.\n\nTo keep things isolated, I also recommend installing (and using)\n`virtualenv <http://www.virtualenv.org/>`__.\n\n::\n\n    $ sudo pip install virtualenv\n    $ mkdir -p ~/virtualenv\n    $ virtualenv ~/virtualenv/swagger\n    $ . ~/virtualenv/swagger/bin/activate\n\n`Setuptools <http://pypi.python.org/pypi/setuptools>`__ is used for\nbuilding. `Nose <http://nose.readthedocs.org/en/latest/>`__ is used\nfor unit testing, with the `coverage\n<http://nedbatchelder.com/code/coverage/>`__ plugin installed to\ngenerated code coverage reports. Pass ``--with-coverage`` to generate\nthe code coverage report. HTML versions of the reports are put in\n``cover/index.html``.\n\n::\n\n    $ ./setup.py develop   # prep for development (install deps, launchers, etc.)\n    $ ./setup.py nosetests # run unit tests\n    $ ./setup.py bdist_egg # build distributable\n\n\n\nLicense\n-------\n\nCopyright (c) 2013, Digium, Inc. All rights reserved.\n\nSwagger.py is licensed with a `BSD 3-Clause\nLicense <http://opensource.org/licenses/BSD-3-Clause>`__.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/digium/swagger-py", "keywords": null, "license": "BSD 3-Clause License", "maintainer": null, "maintainer_email": null, "name": "swaggerpy", "package_url": "https://pypi.org/project/swaggerpy/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/swaggerpy/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/digium/swagger-py"}, "release_url": "https://pypi.org/project/swaggerpy/0.2.1/", "requires_dist": null, "requires_python": null, "summary": "Library for accessing Swagger-enabled API's", "version": "0.2.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"about\">\n<h2>About</h2>\n<p>Swagger.py is a Python library for using\n<a href=\"https://developers.helloreverb.com/swagger/\" rel=\"nofollow\">Swagger</a> defined API\u2019s.</p>\n<p>Swagger itself is best described on the Swagger home page:</p>\n<blockquote>\nSwagger is a specification and complete framework implementation for\ndescribing, producing, consuming, and visualizing RESTful web\nservices.</blockquote>\n<p>The <a href=\"https://github.com/wordnik/swagger-core/wiki\" rel=\"nofollow\">Swagger\nspecification</a> defines\nhow API\u2019s may be described using Swagger.</p>\n<p>Swagger.py also supports a WebSocket extension, allowing a WebSocket to\nbe documented, and auto-generated WebSocket client code.</p>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>Install the latest release from PyPI.</p>\n<pre>$ sudo pip install swaggerpy\n</pre>\n<p>Or install from source using the <tt>setup.py</tt> script.</p>\n<pre>$ sudo ./setup.py install\n</pre>\n<div id=\"api\">\n<h3>API</h3>\n<p>Swagger.py will dynamically build an object model from a Swagger-enabled\nRESTful API.</p>\n<p>Here is a simple example using the <a href=\"https://wiki.asterisk.org/wiki/display/AST/Asterisk+12+ARI\" rel=\"nofollow\">Asterisk REST\nInterface</a></p>\n<pre><span class=\"ch\">#!/usr/bin/env python</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">json</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">swaggerpy.client</span> <span class=\"kn\">import</span> <span class=\"n\">SwaggerClient</span>\n<span class=\"kn\">from</span> <span class=\"nn\">swaggerpy.http_client</span> <span class=\"kn\">import</span> <span class=\"n\">SynchronousHttpClient</span>\n\n<span class=\"n\">http_client</span> <span class=\"o\">=</span> <span class=\"n\">SynchronousHttpClient</span><span class=\"p\">()</span>\n<span class=\"n\">http_client</span><span class=\"o\">.</span><span class=\"n\">set_basic_auth</span><span class=\"p\">(</span><span class=\"s1\">'localhost'</span><span class=\"p\">,</span> <span class=\"s1\">'hey'</span><span class=\"p\">,</span> <span class=\"s1\">'peekaboo'</span><span class=\"p\">)</span>\n\n<span class=\"n\">ari</span> <span class=\"o\">=</span> <span class=\"n\">SwaggerClient</span><span class=\"p\">(</span>\n    <span class=\"s2\">\"http://localhost:8088/ari/api-docs/resources.json\"</span><span class=\"p\">,</span>\n    <span class=\"n\">http_client</span><span class=\"o\">=</span><span class=\"n\">http_client</span><span class=\"p\">)</span>\n\n<span class=\"n\">ws</span> <span class=\"o\">=</span> <span class=\"n\">ari</span><span class=\"o\">.</span><span class=\"n\">events</span><span class=\"o\">.</span><span class=\"n\">eventWebsocket</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"o\">=</span><span class=\"s1\">'hello'</span><span class=\"p\">)</span>\n\n<span class=\"k\">for</span> <span class=\"n\">msg_str</span> <span class=\"ow\">in</span> <span class=\"nb\">iter</span><span class=\"p\">(</span><span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"n\">ws</span><span class=\"o\">.</span><span class=\"n\">recv</span><span class=\"p\">(),</span> <span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"n\">msg_json</span> <span class=\"o\">=</span> <span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">loads</span><span class=\"p\">(</span><span class=\"n\">msg_str</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">msg_json</span><span class=\"p\">[</span><span class=\"s1\">'type'</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s1\">'StasisStart'</span><span class=\"p\">:</span>\n        <span class=\"n\">channelId</span> <span class=\"o\">=</span> <span class=\"n\">msg_json</span><span class=\"p\">[</span><span class=\"s1\">'channel'</span><span class=\"p\">][</span><span class=\"s1\">'id'</span><span class=\"p\">]</span>\n        <span class=\"n\">ari</span><span class=\"o\">.</span><span class=\"n\">channels</span><span class=\"o\">.</span><span class=\"n\">answer</span><span class=\"p\">(</span><span class=\"n\">channelId</span><span class=\"o\">=</span><span class=\"n\">channelId</span><span class=\"p\">)</span>\n        <span class=\"n\">ari</span><span class=\"o\">.</span><span class=\"n\">channels</span><span class=\"o\">.</span><span class=\"n\">play</span><span class=\"p\">(</span><span class=\"n\">channelId</span><span class=\"o\">=</span><span class=\"n\">channelId</span><span class=\"p\">,</span>\n                          <span class=\"n\">media</span><span class=\"o\">=</span><span class=\"s1\">'sound:hello-world'</span><span class=\"p\">)</span>\n        <span class=\"n\">ari</span><span class=\"o\">.</span><span class=\"n\">channels</span><span class=\"o\">.</span><span class=\"n\">continueInDialplan</span><span class=\"p\">(</span><span class=\"n\">channelId</span><span class=\"o\">=</span><span class=\"n\">channelId</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"swagger-codegen\">\n<h3>swagger-codegen</h3>\n<p>There are the beginnings of a Mustache-based code generator, but it\u2019s\nnot functional\u2026 yet.</p>\n</div>\n<div id=\"data-model\">\n<h3>Data model</h3>\n<p>The data model presented by the <tt>swagger_model</tt> module is nearly\nidentical to the original Swagger API resource listing and API\ndeclaration. This means that if you add extra custom metadata to your\ndocs (such as a <tt>_author</tt> or <tt>_copyright</tt> field), they will carry\nforward into the object model. I recommend prefixing custom fields with\nan underscore, to avoid collisions with future versions of Swagger.</p>\n<p>There are a few meaningful differences.</p>\n<ul>\n<li>Resource listing</li>\n<li>The <tt>file</tt> and <tt>base_dir</tt> fields have been added, referencing the\noriginal <tt>.json</tt> file.</li>\n<li>The objects in a <tt>resource_listing</tt>\u2019s <tt>api</tt> array contains a\nfield <tt>api_declaration</tt>, which is the processed result from the\nreferenced API doc.</li>\n<li>API declaration</li>\n<li>A <tt>file</tt> field has been added, referencing the original <tt>.json</tt>\nfile.</li>\n</ul>\n</div>\n</div>\n<div id=\"development\">\n<h2>Development</h2>\n<p>The code is documented using <a href=\"http://sphinx-doc.org/\" rel=\"nofollow\">Sphinx</a>, which\nallows <a href=\"http://confluence.jetbrains.net/display/PYH/\" rel=\"nofollow\">IntelliJ IDEA</a>\nto do a better job at inferring types for autocompletion.</p>\n<p>To keep things isolated, I also recommend installing (and using)\n<a href=\"http://www.virtualenv.org/\" rel=\"nofollow\">virtualenv</a>.</p>\n<pre>$ sudo pip install virtualenv\n$ mkdir -p ~/virtualenv\n$ virtualenv ~/virtualenv/swagger\n$ . ~/virtualenv/swagger/bin/activate\n</pre>\n<p><a href=\"http://pypi.python.org/pypi/setuptools\" rel=\"nofollow\">Setuptools</a> is used for\nbuilding. <a href=\"http://nose.readthedocs.org/en/latest/\" rel=\"nofollow\">Nose</a> is used\nfor unit testing, with the <a href=\"http://nedbatchelder.com/code/coverage/\" rel=\"nofollow\">coverage</a> plugin installed to\ngenerated code coverage reports. Pass <tt><span class=\"pre\">--with-coverage</span></tt> to generate\nthe code coverage report. HTML versions of the reports are put in\n<tt>cover/index.html</tt>.</p>\n<pre>$ ./setup.py develop   # prep for development (install deps, launchers, etc.)\n$ ./setup.py nosetests # run unit tests\n$ ./setup.py bdist_egg # build distributable\n</pre>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>Copyright (c) 2013, Digium, Inc. All rights reserved.</p>\n<p>Swagger.py is licensed with a <a href=\"http://opensource.org/licenses/BSD-3-Clause\" rel=\"nofollow\">BSD 3-Clause\nLicense</a>.</p>\n</div>\n\n          </div>"}, "last_serial": 1187187, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "abe2a6e8f0574555f04754a53fa98e3a", "sha256": "3ab01d604cb83379bb774bf0361eae568bdd13fc2a288ed2db2598e9801e73a4"}, "downloads": -1, "filename": "swaggerpy-0.1.0.tar.gz", "has_sig": false, "md5_digest": "abe2a6e8f0574555f04754a53fa98e3a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14523, "upload_time": "2013-10-24T20:55:10", "upload_time_iso_8601": "2013-10-24T20:55:10.923462Z", "url": "https://files.pythonhosted.org/packages/c8/71/74b1cc8982d26888e985358f7835663be51c3eca644662618aec911d8fa2/swaggerpy-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "8271dfe7e1b9c9ec1c14b76344170992", "sha256": "30641b5e56525ad7391c4624b5811a650b737cb96b6e8193e38369dd6c8e7d9f"}, "downloads": -1, "filename": "swaggerpy-0.2.0.tar.gz", "has_sig": false, "md5_digest": "8271dfe7e1b9c9ec1c14b76344170992", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14750, "upload_time": "2013-10-28T15:59:59", "upload_time_iso_8601": "2013-10-28T15:59:59.276082Z", "url": "https://files.pythonhosted.org/packages/a6/6b/c9fac06b8c8fb4af1eefa585dafc80982b06fb6c9b7b5af3f1711107388e/swaggerpy-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "b77a35dff361f2d771c9801335a4caea", "sha256": "fa54bc2b17eb9ed181bc0b5321b180839f14ce6c86792450d92e9fcdb1acad1f"}, "downloads": -1, "filename": "swaggerpy-0.2.1.tar.gz", "has_sig": false, "md5_digest": "b77a35dff361f2d771c9801335a4caea", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12620, "upload_time": "2014-08-12T02:57:37", "upload_time_iso_8601": "2014-08-12T02:57:37.585968Z", "url": "https://files.pythonhosted.org/packages/84/b9/158f0f2f11a61ec5b64c39cf0a70007f5b44773d6bbf8a10c73e36ce88af/swaggerpy-0.2.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b77a35dff361f2d771c9801335a4caea", "sha256": "fa54bc2b17eb9ed181bc0b5321b180839f14ce6c86792450d92e9fcdb1acad1f"}, "downloads": -1, "filename": "swaggerpy-0.2.1.tar.gz", "has_sig": false, "md5_digest": "b77a35dff361f2d771c9801335a4caea", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12620, "upload_time": "2014-08-12T02:57:37", "upload_time_iso_8601": "2014-08-12T02:57:37.585968Z", "url": "https://files.pythonhosted.org/packages/84/b9/158f0f2f11a61ec5b64c39cf0a70007f5b44773d6bbf8a10c73e36ce88af/swaggerpy-0.2.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:59:44 2020"}