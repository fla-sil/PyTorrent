{"info": {"author": "Jeremy Carbaugh", "author_email": "jcarbaugh@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "=========\nwebfinger\n=========\n\nA simple Python client implementation of `WebFinger RFC 7033 <http://tools.ietf.org/html/rfc7033>`_.\n\nWebFinger is a discovery protocol that allows you to find information about people or things in a standardized way. See the `spec <http://tools.ietf.org/html/rfc7033>`_ or `webfinger.net <http://webfinger.net>`_ for more information.\n\n::\n\n    >>> from webfinger import finger\n    >>> wf = finger('acct:eric@konklone.com')\n    >>> wf.subject\n    acct:eric@konklone.com\n    >>> wf.avatar\n    https://secure.gravatar.com/avatar/ac3399caecce27cb19d381f61124539e.jpg?s=400\n    >>> wf.profile\n    https://konklone.com\n    >>> wf.properties.get('http://schema.org/name')\n    Eric Mill\n\n\nfinger\n======\n\nfinger(resource, rel=None)\n    *finger* is a convenience method for instantiating a WebFingerClient object and making the request. The *resource* parameter is a URI of the resource about which you are querying. The optional *rel* parameter can be either a string or a list of strings that will limit the response to the specific relations. WebFinger servers are **not** required to obey the *rel* parameter, so you should handle the response accordingly.\n\n    WebFingerClient supports additional options, so check that out if *finger* does not meet your needs.\n\n\nWebFinger Client\n================\n\nWebFingerClient(timeout=None, official=False)\n    Instantiates a client object. The optional *timeout* parameter specifies the HTTP request timeout. The optional *official* parameter is a boolean that determines if the client will use `unofficial endpoints`_.\n\nfinger(resource, host=None, rel=None, raw=False)\n    The client *finger* method prepares and executes the WebFinger request. *resource* and *rel* are the same as the parameters on the standalone *finger* method. *host* should only be specified if you want to connect to a host other than the host in the resource parameter. Otherwise, this method extracts the host from the *resource* parameter. *raw* is a boolean that determines if the method returns a WebFingerResponse object or the raw JRD response as a dict.\n\n    If the *host* parameter is passed to this method, unofficial endpoints are ignored. You're asking for a specific host so who am I to disagree?\n\n\nWebFinger Response\n==================\n\nThe WebFinger response object provides handy properties for easy access and the raw JRD response. Read the `spec for specifics of the JRD response <http://tools.ietf.org/html/rfc7033#section-4.4>`_.\n\n\nProperties\n----------\n\nsubject\n  The URI of the thing that the response JRD describes.\n\naliases\n  A list of additional URIs that identify the subject.\n\nproperties\n  A dict of URIs and values that provides information about the subject.\n\nlinks\n  A list of dicts that define external resources for the subject.\n\njrd\n  A dict of the raw JRD response.\n\n\nMethods\n-------\n\nrel(relation, attr='href')\n  A convenience method that provides basic access to links. The *relation* parameter is a URI for the desired link. The *attr* parameter is the key of the returned value of the link that matches *relation*. Returns a string if *relation* and *attr* exist, otherwise *None*.\n\n  ::\n\n    >>> wf.rel('http://webfinger.net/rel/avatar')\n    https://secure.gravatar.com/avatar/ac3399caecce27cb19d381f61124539e.jpg?s=400\n\n  The response JRD may have multiple entries with the same relation URI. The *rel* method will select the first one, since order is meant to imply priority. If you need to see all of the values, you'll have to iterate over the *links* property and pull them out yourself.\n\n  ::\n\n    >>> rel = 'http://webfinger.net/rel/avatar'\n    >>> [l.get('href') for l in rel.links if l.get('rel') == rel]\n\n  If *attr* is None, the full dict for the link will be returned.\n\n\n\nRelation Properties\n-------------------\n\nThe following common link relation types are supported as properties of the response object:\n\n* activity_streams: http://activitystrea.ms/spec/1.0\n* avatar: http://webfinger.net/rel/avatar\n* hcard: http://microformats.org/profile/hcard\n* open_id: http://specs.openid.net/auth/2.0/provider\n* opensocial: http://ns.opensocial.org/2008/opensocial/activitystreams\n* portable_contacts: http://portablecontacts.net/spec/1.0\n* profile: http://webfinger.net/rel/profile-page\n* webfist: http://webfist.org/spec/rel\n* xfn: http://gmpg.org/xfn/11\n\nExample::\n\n    >>> wf.avatar\n    https://secure.gravatar.com/avatar/ac3399caecce27cb19d381f61124539e.jpg?s=400\n\n\n.. _unofficial endpoints:\n\nUnofficial Endpoints\n====================\n\nWhile Facebook and Twitter do not officially support WebFinger, the `webfinger-unofficial project <https://github.com/snarfed/webfinger-unofficial>`_ provides a proxy for basic subject information. By default, python-webfinger will attempt to use unoffical the endpoints for facebook.com and twitter.com resource domains. This behavior can be disabled by passing *True* to the *official* parameter::\n\n    >>> wf = finger('acct:konklone@twitter.com', official=True)\n\n\nDependencies\n============\n\n* `requests <https://pypi.python.org/pypi/requests>`_\n\n\nLicense\n=======\n\npython-webfinger is distributed under the `BSD license <http://creativecommons.org/licenses/BSD/>`_.\n\nSee LICENSE for the full terms.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/jcarbaugh/python-webfinger/", "keywords": null, "license": "BSD", "maintainer": null, "maintainer_email": null, "name": "webfinger", "package_url": "https://pypi.org/project/webfinger/", "platform": "any", "project_url": "https://pypi.org/project/webfinger/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://github.com/jcarbaugh/python-webfinger/"}, "release_url": "https://pypi.org/project/webfinger/1.0/", "requires_dist": null, "requires_python": null, "summary": "Simple Python implementation of WebFinger client protocol", "version": "1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>A simple Python client implementation of <a href=\"http://tools.ietf.org/html/rfc7033\" rel=\"nofollow\">WebFinger RFC 7033</a>.</p>\n<p>WebFinger is a discovery protocol that allows you to find information about people or things in a standardized way. See the <a href=\"http://tools.ietf.org/html/rfc7033\" rel=\"nofollow\">spec</a> or <a href=\"http://webfinger.net\" rel=\"nofollow\">webfinger.net</a> for more information.</p>\n<pre>&gt;&gt;&gt; from webfinger import finger\n&gt;&gt;&gt; wf = finger('acct:eric@konklone.com')\n&gt;&gt;&gt; wf.subject\nacct:eric@konklone.com\n&gt;&gt;&gt; wf.avatar\nhttps://secure.gravatar.com/avatar/ac3399caecce27cb19d381f61124539e.jpg?s=400\n&gt;&gt;&gt; wf.profile\nhttps://konklone.com\n&gt;&gt;&gt; wf.properties.get('http://schema.org/name')\nEric Mill\n</pre>\n<div id=\"finger\">\n<h2>finger</h2>\n<dl>\n<dt>finger(resource, rel=None)</dt>\n<dd><p><em>finger</em> is a convenience method for instantiating a WebFingerClient object and making the request. The <em>resource</em> parameter is a URI of the resource about which you are querying. The optional <em>rel</em> parameter can be either a string or a list of strings that will limit the response to the specific relations. WebFinger servers are <strong>not</strong> required to obey the <em>rel</em> parameter, so you should handle the response accordingly.</p>\n<p>WebFingerClient supports additional options, so check that out if <em>finger</em> does not meet your needs.</p>\n</dd>\n</dl>\n</div>\n<div id=\"webfinger-client\">\n<h2>WebFinger Client</h2>\n<dl>\n<dt>WebFingerClient(timeout=None, official=False)</dt>\n<dd>Instantiates a client object. The optional <em>timeout</em> parameter specifies the HTTP request timeout. The optional <em>official</em> parameter is a boolean that determines if the client will use <a href=\"#unofficial-endpoints\" rel=\"nofollow\">unofficial endpoints</a>.</dd>\n<dt>finger(resource, host=None, rel=None, raw=False)</dt>\n<dd><p>The client <em>finger</em> method prepares and executes the WebFinger request. <em>resource</em> and <em>rel</em> are the same as the parameters on the standalone <em>finger</em> method. <em>host</em> should only be specified if you want to connect to a host other than the host in the resource parameter. Otherwise, this method extracts the host from the <em>resource</em> parameter. <em>raw</em> is a boolean that determines if the method returns a WebFingerResponse object or the raw JRD response as a dict.</p>\n<p>If the <em>host</em> parameter is passed to this method, unofficial endpoints are ignored. You\u2019re asking for a specific host so who am I to disagree?</p>\n</dd>\n</dl>\n</div>\n<div id=\"webfinger-response\">\n<h2>WebFinger Response</h2>\n<p>The WebFinger response object provides handy properties for easy access and the raw JRD response. Read the <a href=\"http://tools.ietf.org/html/rfc7033#section-4.4\" rel=\"nofollow\">spec for specifics of the JRD response</a>.</p>\n<div id=\"properties\">\n<h3>Properties</h3>\n<dl>\n<dt>subject</dt>\n<dd>The URI of the thing that the response JRD describes.</dd>\n<dt>aliases</dt>\n<dd>A list of additional URIs that identify the subject.</dd>\n<dt>properties</dt>\n<dd>A dict of URIs and values that provides information about the subject.</dd>\n<dt>links</dt>\n<dd>A list of dicts that define external resources for the subject.</dd>\n<dt>jrd</dt>\n<dd>A dict of the raw JRD response.</dd>\n</dl>\n</div>\n<div id=\"methods\">\n<h3>Methods</h3>\n<dl>\n<dt>rel(relation, attr=\u2019href\u2019)</dt>\n<dd><p>A convenience method that provides basic access to links. The <em>relation</em> parameter is a URI for the desired link. The <em>attr</em> parameter is the key of the returned value of the link that matches <em>relation</em>. Returns a string if <em>relation</em> and <em>attr</em> exist, otherwise <em>None</em>.</p>\n<pre>&gt;&gt;&gt; wf.rel('http://webfinger.net/rel/avatar')\nhttps://secure.gravatar.com/avatar/ac3399caecce27cb19d381f61124539e.jpg?s=400\n</pre>\n<p>The response JRD may have multiple entries with the same relation URI. The <em>rel</em> method will select the first one, since order is meant to imply priority. If you need to see all of the values, you\u2019ll have to iterate over the <em>links</em> property and pull them out yourself.</p>\n<pre>&gt;&gt;&gt; rel = 'http://webfinger.net/rel/avatar'\n&gt;&gt;&gt; [l.get('href') for l in rel.links if l.get('rel') == rel]\n</pre>\n<p>If <em>attr</em> is None, the full dict for the link will be returned.</p>\n</dd>\n</dl>\n</div>\n<div id=\"relation-properties\">\n<h3>Relation Properties</h3>\n<p>The following common link relation types are supported as properties of the response object:</p>\n<ul>\n<li>activity_streams: <a href=\"http://activitystrea.ms/spec/1.0\" rel=\"nofollow\">http://activitystrea.ms/spec/1.0</a></li>\n<li>avatar: <a href=\"http://webfinger.net/rel/avatar\" rel=\"nofollow\">http://webfinger.net/rel/avatar</a></li>\n<li>hcard: <a href=\"http://microformats.org/profile/hcard\" rel=\"nofollow\">http://microformats.org/profile/hcard</a></li>\n<li>open_id: <a href=\"http://specs.openid.net/auth/2.0/provider\" rel=\"nofollow\">http://specs.openid.net/auth/2.0/provider</a></li>\n<li>opensocial: <a href=\"http://ns.opensocial.org/2008/opensocial/activitystreams\" rel=\"nofollow\">http://ns.opensocial.org/2008/opensocial/activitystreams</a></li>\n<li>portable_contacts: <a href=\"http://portablecontacts.net/spec/1.0\" rel=\"nofollow\">http://portablecontacts.net/spec/1.0</a></li>\n<li>profile: <a href=\"http://webfinger.net/rel/profile-page\" rel=\"nofollow\">http://webfinger.net/rel/profile-page</a></li>\n<li>webfist: <a href=\"http://webfist.org/spec/rel\" rel=\"nofollow\">http://webfist.org/spec/rel</a></li>\n<li>xfn: <a href=\"http://gmpg.org/xfn/11\" rel=\"nofollow\">http://gmpg.org/xfn/11</a></li>\n</ul>\n<p>Example:</p>\n<pre>&gt;&gt;&gt; wf.avatar\nhttps://secure.gravatar.com/avatar/ac3399caecce27cb19d381f61124539e.jpg?s=400\n</pre>\n</div>\n</div>\n<div id=\"id1\">\n<span id=\"unofficial-endpoints\"></span><h2>Unofficial Endpoints</h2>\n<p>While Facebook and Twitter do not officially support WebFinger, the <a href=\"https://github.com/snarfed/webfinger-unofficial\" rel=\"nofollow\">webfinger-unofficial project</a> provides a proxy for basic subject information. By default, python-webfinger will attempt to use unoffical the endpoints for facebook.com and twitter.com resource domains. This behavior can be disabled by passing <em>True</em> to the <em>official</em> parameter:</p>\n<pre>&gt;&gt;&gt; wf = finger('acct:konklone@twitter.com', official=True)\n</pre>\n</div>\n<div id=\"dependencies\">\n<h2>Dependencies</h2>\n<ul>\n<li><a href=\"https://pypi.python.org/pypi/requests\" rel=\"nofollow\">requests</a></li>\n</ul>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>python-webfinger is distributed under the <a href=\"http://creativecommons.org/licenses/BSD/\" rel=\"nofollow\">BSD license</a>.</p>\n<p>See LICENSE for the full terms.</p>\n</div>\n\n          </div>"}, "last_serial": 909881, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "693d648fde1524b5f289caa9ee52a42a", "sha256": "f9b7c8a4a65945aceb092c73f0d6ff25fc40e21977bde4f3e38384ee4aa571ff"}, "downloads": -1, "filename": "webfinger-1.0.tar.gz", "has_sig": false, "md5_digest": "693d648fde1524b5f289caa9ee52a42a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5935, "upload_time": "2013-11-02T21:28:52", "upload_time_iso_8601": "2013-11-02T21:28:52.726653Z", "url": "https://files.pythonhosted.org/packages/3e/c7/16b8157e0c57001451210c0a17d1ad081232dfe18d735b953179f04e7900/webfinger-1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "693d648fde1524b5f289caa9ee52a42a", "sha256": "f9b7c8a4a65945aceb092c73f0d6ff25fc40e21977bde4f3e38384ee4aa571ff"}, "downloads": -1, "filename": "webfinger-1.0.tar.gz", "has_sig": false, "md5_digest": "693d648fde1524b5f289caa9ee52a42a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5935, "upload_time": "2013-11-02T21:28:52", "upload_time_iso_8601": "2013-11-02T21:28:52.726653Z", "url": "https://files.pythonhosted.org/packages/3e/c7/16b8157e0c57001451210c0a17d1ad081232dfe18d735b953179f04e7900/webfinger-1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:31:10 2020"}