{"info": {"author": "Prasanna Pendse", "author_email": "prasanna.pendse@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# Welcome to power-daps\n\n## About\n\npower-daps is a build tool that can build apps in multiple languages. It also has templates to speed up creation of \"hello world\" apps in different languages. It has a plugin architecture which allows people to add support for more languages and styles easily.\n\n## Installation\n\n\n### Across platforms with Python 3\n`pip3 install power-daps`\n\n### Mac OS (not yet supported)\n`brew install power-daps`\n\n### CentOS or RedHat (not yet supported)\n`yum install power-daps`\n\n### Ubuntu or Debian (not yet supported)\n`apt-get install power-daps`\n\n## Usage (currently)\n\n### Create a new app\nSpecify the type of app by specifying which meta model you want to use.\n\nMeta models can be specified by the `--meta-model` or `-m` flag\n\nFew built-in meta models are provided with power-daps:\nJava, Python 3, ES 6 and Rust. Here is how you initialize apps with dap\nin these languages.\n\n#### Java\n`dap init --meta-model power_daps/java9`\n\n#### Python\n`dap init --meta-model power_daps/python3`\n\n#### ECMA Script\n`dap init --meta-model power_daps/es6`\n\n#### Rust\n`dap init --meta-model power_daps/rust`\n\n### Build the app\nIf you have initialized the application with `dap init`, then just `dap` will do what is needed\nby looking at `actions.yml` at the root of your project. However, you can use the following commands\ndepending on the language:\n\n* `dap deps` to install dependencies\n* `dap compile` if your language requires compiling\n* `dap compile_test`\n* `dap unit_test`\n* `dap package`\n\n### Adding dependencies\nEdit dependencies.yml at the root level of your project and add dependencies. \n'default' here will eventually be 'run' or 'test' etc depending the scope of the dependency. A given app can have dependencies using different package managers. For example, sometimes you may want something that is installed using 'brew_cask' in a python app.\n\nExamples:\n#### Java\n```\ndefault:\n  junit:\n    version: \"4.12\"\n    installer: jar\n    group_id: junit\n```\n\n#### Python\n```\ndefault:\n  pyyaml:\n    version: 5.3\n    installer: pip3\n```\n\n#### ES6\n```\ndefault:\n  bulma:\n    version: latest\n    installer: npm\n```\n\n#### Cargo / Rust\n```\ndefault:\n  ripgrep:\n    version: latest\n    installer: cargo\n```\n\n\n## Usage (eventually)\n\n### As a suite of tools\n\n#### Creating something new\n\n`dap create suite`\n\n`dap create app <app-name>`\n\n`dap create data-source <app-name>/<data-source-name>[:<data-source-type>]` where `<data-source-type>` is `postgres`, `mysql`, `oracle`, `mongodb`, `cassandra`, `csv-fetch` etc.\n\n#### Working with existing application suites\n\nThe basic structure for using dap is: `dap <target>`. This will run all preceding targets in the chain, unless you tell it to only run that target by running `dap only <target>`. Only targets that need to run will run unless you force it by running `dap force <target>`. If you only want to force one target, run `dap force only <target>`.\n\n\nThe following targets are provided by default for Java development:\n\n1. `deps`: Resolve, download and verify dependencies.\n2. `compile`: Compile application and test code for compiled languages.\n3. `unit-test`: Run unit tests.\n4. `package`: Package the jar or the war or the pip or the gem or the rpm or the docker image.\n5. `deploy`: Spin up necessary environment, and deploy the necessary components and apps.\n6. `functional-test`: Run functional tests on the deployed app.\n\n### As stand-alone tools\n\nEach Power Daps target comes as a stand-alone command:\n\n1. `dap-create`\n2. `dap-deps`\n3. `dap-compile`\n4. `dap-unit-test`\n5. `dap-package`\n6. `dap-deploy`\n7. `dap-functional-test`\n\n## Appendix\n\nComplete target tree:\n\n* `all` or `default` or if you omit a target\n   * `deps`\n      * `resolve-deps`\n      * `download-deps`\n      * `verify-deps`\n   * `validate`\n   * `compile`\n      * `compile-app`\n      * `compile-test`\n   * `unit-test`\n   * `package` or `jar` or `war`\n   * `deploy`\n      * `deploy-machines`\n         * `check-machines`\n         * `stop-machines`\n         * `clean-machines`\n         * `start-machines`\n      * `deploy-dependencies`\n      * `load-data`\n         * `check-data-stores`\n         * `clean-data-stores`\n         * `create-schema`\n         * `populate-data`\n         * `migrate-schema`\n         * `migrate-data`\n   * `component-test`\n   * `contract-test`\n   * `integration-test`\n   * `functional-test`\n\n\n### Details of what happens when creating a new application suite\n\nCreate a new suite by running `dap create suite [dir]`. This will create the following directory structure in the current directory or the specified directory:\n\n* `apps`\n* `bin`\n* `dashboard`\n* `env`\n* `test`\n   * `integration-test`\n   * `functional-test`\n\n### Details of what happens when creating a new application in the current suite\n\n`dap create app <name>` will create the following structure under the `<name>` directory under `apps`:\n\n* `config`\n * `identity`\n* `data`\n * `sources`\n     * `sample-rdbms`\n         * `schema-migrations`\n             * `000-initial-schema.sql`\n         * `data-migrations`\n             * `000-000-initial-data.sql`\n* `src`\n* `test`\n     * `unit-test`\n     * `component-test`\n     * `contract-test`\n\n\n### Creating a data source for an app\n\n`dap create data-source <app-name>/<data-source-name>[:<data-source-type>]` where `<data-source-type>` is `postgres`, `mysql`, `oracle`, `mongodb`, `cassandra`, `csv-fetch` etc.\n\n`csv-fetch` will allow you to setup a periodic sftp download of CSV files from multiple sources and load them into a particular location accessible to the application.\n\n\n## License\nPower Daps is released under [GNU Public License v3.0](http://www.gnu.org/licenses/gpl-3.0.txt)\n\n## Copyright\nCopyright &copy; 2016, Prasanna Pendse\n\n\n\n\n\n\n\n\n\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/power-daps/power-daps", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "power-daps", "package_url": "https://pypi.org/project/power-daps/", "platform": "", "project_url": "https://pypi.org/project/power-daps/", "project_urls": {"Homepage": "https://github.com/power-daps/power-daps"}, "release_url": "https://pypi.org/project/power-daps/0.0.3/", "requires_dist": ["power-daps-core (==0.0.3)", "power-daps-meta-model-python-3 (==0.0.3)", "power-daps-meta-model-java-9 (==0.0.3)", "power-daps-meta-model-rust (==0.0.3)"], "requires_python": ">=3.6", "summary": "A build tool that builds apps in multiple languages", "version": "0.0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Welcome to power-daps</h1>\n<h2>About</h2>\n<p>power-daps is a build tool that can build apps in multiple languages. It also has templates to speed up creation of \"hello world\" apps in different languages. It has a plugin architecture which allows people to add support for more languages and styles easily.</p>\n<h2>Installation</h2>\n<h3>Across platforms with Python 3</h3>\n<p><code>pip3 install power-daps</code></p>\n<h3>Mac OS (not yet supported)</h3>\n<p><code>brew install power-daps</code></p>\n<h3>CentOS or RedHat (not yet supported)</h3>\n<p><code>yum install power-daps</code></p>\n<h3>Ubuntu or Debian (not yet supported)</h3>\n<p><code>apt-get install power-daps</code></p>\n<h2>Usage (currently)</h2>\n<h3>Create a new app</h3>\n<p>Specify the type of app by specifying which meta model you want to use.</p>\n<p>Meta models can be specified by the <code>--meta-model</code> or <code>-m</code> flag</p>\n<p>Few built-in meta models are provided with power-daps:\nJava, Python 3, ES 6 and Rust. Here is how you initialize apps with dap\nin these languages.</p>\n<h4>Java</h4>\n<p><code>dap init --meta-model power_daps/java9</code></p>\n<h4>Python</h4>\n<p><code>dap init --meta-model power_daps/python3</code></p>\n<h4>ECMA Script</h4>\n<p><code>dap init --meta-model power_daps/es6</code></p>\n<h4>Rust</h4>\n<p><code>dap init --meta-model power_daps/rust</code></p>\n<h3>Build the app</h3>\n<p>If you have initialized the application with <code>dap init</code>, then just <code>dap</code> will do what is needed\nby looking at <code>actions.yml</code> at the root of your project. However, you can use the following commands\ndepending on the language:</p>\n<ul>\n<li><code>dap deps</code> to install dependencies</li>\n<li><code>dap compile</code> if your language requires compiling</li>\n<li><code>dap compile_test</code></li>\n<li><code>dap unit_test</code></li>\n<li><code>dap package</code></li>\n</ul>\n<h3>Adding dependencies</h3>\n<p>Edit dependencies.yml at the root level of your project and add dependencies.\n'default' here will eventually be 'run' or 'test' etc depending the scope of the dependency. A given app can have dependencies using different package managers. For example, sometimes you may want something that is installed using 'brew_cask' in a python app.</p>\n<p>Examples:</p>\n<h4>Java</h4>\n<pre><code>default:\n  junit:\n    version: \"4.12\"\n    installer: jar\n    group_id: junit\n</code></pre>\n<h4>Python</h4>\n<pre><code>default:\n  pyyaml:\n    version: 5.3\n    installer: pip3\n</code></pre>\n<h4>ES6</h4>\n<pre><code>default:\n  bulma:\n    version: latest\n    installer: npm\n</code></pre>\n<h4>Cargo / Rust</h4>\n<pre><code>default:\n  ripgrep:\n    version: latest\n    installer: cargo\n</code></pre>\n<h2>Usage (eventually)</h2>\n<h3>As a suite of tools</h3>\n<h4>Creating something new</h4>\n<p><code>dap create suite</code></p>\n<p><code>dap create app &lt;app-name&gt;</code></p>\n<p><code>dap create data-source &lt;app-name&gt;/&lt;data-source-name&gt;[:&lt;data-source-type&gt;]</code> where <code>&lt;data-source-type&gt;</code> is <code>postgres</code>, <code>mysql</code>, <code>oracle</code>, <code>mongodb</code>, <code>cassandra</code>, <code>csv-fetch</code> etc.</p>\n<h4>Working with existing application suites</h4>\n<p>The basic structure for using dap is: <code>dap &lt;target&gt;</code>. This will run all preceding targets in the chain, unless you tell it to only run that target by running <code>dap only &lt;target&gt;</code>. Only targets that need to run will run unless you force it by running <code>dap force &lt;target&gt;</code>. If you only want to force one target, run <code>dap force only &lt;target&gt;</code>.</p>\n<p>The following targets are provided by default for Java development:</p>\n<ol>\n<li><code>deps</code>: Resolve, download and verify dependencies.</li>\n<li><code>compile</code>: Compile application and test code for compiled languages.</li>\n<li><code>unit-test</code>: Run unit tests.</li>\n<li><code>package</code>: Package the jar or the war or the pip or the gem or the rpm or the docker image.</li>\n<li><code>deploy</code>: Spin up necessary environment, and deploy the necessary components and apps.</li>\n<li><code>functional-test</code>: Run functional tests on the deployed app.</li>\n</ol>\n<h3>As stand-alone tools</h3>\n<p>Each Power Daps target comes as a stand-alone command:</p>\n<ol>\n<li><code>dap-create</code></li>\n<li><code>dap-deps</code></li>\n<li><code>dap-compile</code></li>\n<li><code>dap-unit-test</code></li>\n<li><code>dap-package</code></li>\n<li><code>dap-deploy</code></li>\n<li><code>dap-functional-test</code></li>\n</ol>\n<h2>Appendix</h2>\n<p>Complete target tree:</p>\n<ul>\n<li><code>all</code> or <code>default</code> or if you omit a target\n<ul>\n<li><code>deps</code>\n<ul>\n<li><code>resolve-deps</code></li>\n<li><code>download-deps</code></li>\n<li><code>verify-deps</code></li>\n</ul>\n</li>\n<li><code>validate</code></li>\n<li><code>compile</code>\n<ul>\n<li><code>compile-app</code></li>\n<li><code>compile-test</code></li>\n</ul>\n</li>\n<li><code>unit-test</code></li>\n<li><code>package</code> or <code>jar</code> or <code>war</code></li>\n<li><code>deploy</code>\n<ul>\n<li><code>deploy-machines</code>\n<ul>\n<li><code>check-machines</code></li>\n<li><code>stop-machines</code></li>\n<li><code>clean-machines</code></li>\n<li><code>start-machines</code></li>\n</ul>\n</li>\n<li><code>deploy-dependencies</code></li>\n<li><code>load-data</code>\n<ul>\n<li><code>check-data-stores</code></li>\n<li><code>clean-data-stores</code></li>\n<li><code>create-schema</code></li>\n<li><code>populate-data</code></li>\n<li><code>migrate-schema</code></li>\n<li><code>migrate-data</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><code>component-test</code></li>\n<li><code>contract-test</code></li>\n<li><code>integration-test</code></li>\n<li><code>functional-test</code></li>\n</ul>\n</li>\n</ul>\n<h3>Details of what happens when creating a new application suite</h3>\n<p>Create a new suite by running <code>dap create suite [dir]</code>. This will create the following directory structure in the current directory or the specified directory:</p>\n<ul>\n<li><code>apps</code></li>\n<li><code>bin</code></li>\n<li><code>dashboard</code></li>\n<li><code>env</code></li>\n<li><code>test</code>\n<ul>\n<li><code>integration-test</code></li>\n<li><code>functional-test</code></li>\n</ul>\n</li>\n</ul>\n<h3>Details of what happens when creating a new application in the current suite</h3>\n<p><code>dap create app &lt;name&gt;</code> will create the following structure under the <code>&lt;name&gt;</code> directory under <code>apps</code>:</p>\n<ul>\n<li><code>config</code></li>\n<li><code>identity</code></li>\n<li><code>data</code></li>\n<li><code>sources</code>\n<ul>\n<li><code>sample-rdbms</code>\n<ul>\n<li><code>schema-migrations</code>\n<ul>\n<li><code>000-initial-schema.sql</code></li>\n</ul>\n</li>\n<li><code>data-migrations</code>\n<ul>\n<li><code>000-000-initial-data.sql</code></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><code>src</code></li>\n<li><code>test</code>\n<ul>\n<li><code>unit-test</code></li>\n<li><code>component-test</code></li>\n<li><code>contract-test</code></li>\n</ul>\n</li>\n</ul>\n<h3>Creating a data source for an app</h3>\n<p><code>dap create data-source &lt;app-name&gt;/&lt;data-source-name&gt;[:&lt;data-source-type&gt;]</code> where <code>&lt;data-source-type&gt;</code> is <code>postgres</code>, <code>mysql</code>, <code>oracle</code>, <code>mongodb</code>, <code>cassandra</code>, <code>csv-fetch</code> etc.</p>\n<p><code>csv-fetch</code> will allow you to setup a periodic sftp download of CSV files from multiple sources and load them into a particular location accessible to the application.</p>\n<h2>License</h2>\n<p>Power Daps is released under <a href=\"http://www.gnu.org/licenses/gpl-3.0.txt\" rel=\"nofollow\">GNU Public License v3.0</a></p>\n<h2>Copyright</h2>\n<p>Copyright \u00a9 2016, Prasanna Pendse</p>\n\n          </div>"}, "last_serial": 6956671, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "3c62be195e5d3c35d818b31464730ef9", "sha256": "bd49ac356003e4c4dd34f57f78d4ba6f82eec4ddb5ff1cab225b7e4a61ee155a"}, "downloads": -1, "filename": "power_daps-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "3c62be195e5d3c35d818b31464730ef9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 3176, "upload_time": "2020-03-24T04:59:57", "upload_time_iso_8601": "2020-03-24T04:59:57.895095Z", "url": "https://files.pythonhosted.org/packages/88/eb/2b2fb20ffcf2bc4cd427409bc67fb84e2b1161708cdf6fc116ffa750ecf3/power_daps-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6848a5949e8e58d6a99b3f1fbb48752d", "sha256": "f29e67fb362a01f0ccf661f6f2b71c98ca57f62a101e15b347675a8ea1236c05"}, "downloads": -1, "filename": "power-daps-0.0.1.tar.gz", "has_sig": false, "md5_digest": "6848a5949e8e58d6a99b3f1fbb48752d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 3481, "upload_time": "2020-03-24T04:59:59", "upload_time_iso_8601": "2020-03-24T04:59:59.823448Z", "url": "https://files.pythonhosted.org/packages/d1/74/73d82a89b7c5286b0816e40896c7d0fad3faf65d0a2e42444919d4dcc8f9/power-daps-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "65079f31f5eb9523d414c0795d8b190c", "sha256": "f85c8a77df78777a2c9d90c57310608f8b8a7fbcdef0512e5e2ae2492c3fafcd"}, "downloads": -1, "filename": "power_daps-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "65079f31f5eb9523d414c0795d8b190c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 3175, "upload_time": "2020-03-29T07:30:11", "upload_time_iso_8601": "2020-03-29T07:30:11.046433Z", "url": "https://files.pythonhosted.org/packages/eb/2f/8f5ac926ad15538bb185ca837392f8967e24d34abbec9179d10901541db0/power_daps-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3193d2b4150c8865f90d326cc1ca987b", "sha256": "552c75b5425fe76298b43f2d748bddb85edb28d340342f5bede895d484505ab7"}, "downloads": -1, "filename": "power-daps-0.0.2.tar.gz", "has_sig": false, "md5_digest": "3193d2b4150c8865f90d326cc1ca987b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 3477, "upload_time": "2020-03-29T07:30:13", "upload_time_iso_8601": "2020-03-29T07:30:13.466046Z", "url": "https://files.pythonhosted.org/packages/13/54/b4f0add0e32f0541677a07eb41a1ff63a6c64e79555bcc7adab4bd104538/power-daps-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "a715df9307d88dd82070bf4a47cef459", "sha256": "4bb5e3294318ed86a562083e0967777b93ef48fa3921fa9a328313a35bc0eb23"}, "downloads": -1, "filename": "power_daps-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "a715df9307d88dd82070bf4a47cef459", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 3360, "upload_time": "2020-04-05T16:54:45", "upload_time_iso_8601": "2020-04-05T16:54:45.484503Z", "url": "https://files.pythonhosted.org/packages/6c/f3/bfb40aa4a9882705f5d7c7b7088a3fdd8bc2617bdba0d30a6673660b1cbc/power_daps-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9ed7f24ecd9212b725d69cefe28f3a25", "sha256": "3984fa7176ebee3ab94ee8e98446a14985bbcc183504474a7666735f299f2f95"}, "downloads": -1, "filename": "power-daps-0.0.3.tar.gz", "has_sig": false, "md5_digest": "9ed7f24ecd9212b725d69cefe28f3a25", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 3677, "upload_time": "2020-04-05T16:54:46", "upload_time_iso_8601": "2020-04-05T16:54:46.847688Z", "url": "https://files.pythonhosted.org/packages/6f/b1/5264ab08ba156e7e7fb6796d8e82c277ea1a57465967ff5e00c335c09232/power-daps-0.0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a715df9307d88dd82070bf4a47cef459", "sha256": "4bb5e3294318ed86a562083e0967777b93ef48fa3921fa9a328313a35bc0eb23"}, "downloads": -1, "filename": "power_daps-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "a715df9307d88dd82070bf4a47cef459", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 3360, "upload_time": "2020-04-05T16:54:45", "upload_time_iso_8601": "2020-04-05T16:54:45.484503Z", "url": "https://files.pythonhosted.org/packages/6c/f3/bfb40aa4a9882705f5d7c7b7088a3fdd8bc2617bdba0d30a6673660b1cbc/power_daps-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9ed7f24ecd9212b725d69cefe28f3a25", "sha256": "3984fa7176ebee3ab94ee8e98446a14985bbcc183504474a7666735f299f2f95"}, "downloads": -1, "filename": "power-daps-0.0.3.tar.gz", "has_sig": false, "md5_digest": "9ed7f24ecd9212b725d69cefe28f3a25", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 3677, "upload_time": "2020-04-05T16:54:46", "upload_time_iso_8601": "2020-04-05T16:54:46.847688Z", "url": "https://files.pythonhosted.org/packages/6f/b1/5264ab08ba156e7e7fb6796d8e82c277ea1a57465967ff5e00c335c09232/power-daps-0.0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:20:44 2020"}