{"info": {"author": "Anish Gupta", "author_email": "nkanish2002@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python", "Programming Language :: Python :: 3.5", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "pyredis-cache\n=============\n\nPython Cache client for redis.\n\nSupports Python 3.5 and above.\n\nFeatures\n========\n\n-  Automatically Sync data between the sync\\_func and cache\n-  Use of Async/Await for Asynchronous execution of sync\\_func\n\nDependencies\n============\n\n-  `redis-py <https://github.com/andymccurdy/redis-py>`__\n-  `hiredis-py <https://github.com/redis/hiredis-py>`__\n\nInstallation\n============\n\n1. Through pip: ``pip install pyredis-cache``\n\n2. Manually: ``python setup.py install``. Install dependencies first\n\nGetting Started\n===============\n\n-  Simple Redis Cache\n\n.. code:: py\n\n    # Import redis Connection pool and CacheClient.\n    from redis import ConnectionPool\n    from redis_cache import CacheClient\n\n    import json\n\n    # Initialize the Connection pool.\n    redis_pool = ConnectionPool()\n\n    # Create a data synchronisation function\n    # The first argument should define the uniqueness of the data\n    def sync_func(student_id, lots_of_args):\n        # fetch the data however you want to\n        return data # Lets assume that the data returned is of type `dict` \n     \n    # Initialize the cache client\n    cache = CacheClient(redis_pool, \"Student\", sync_func, set_func=json.dumps, get_func=json.loads, expire_time=10)\n    # for persistent cache, assign 0 to expire_time (default)\n\n    # This will set cache for ID: 12\n    cache.set(12)\n\n    # This will set cache for ID: 13, with custom data\n    cache.set(13, data={\"name\":\"John Doe\", \"age\":16})\n\n    # This will get cache for ID: 12 (no need to do a set, it will automatically set the data)\n    cache.get(12)\n\n    # The get function will pass extra arguments to the sync_func, same works with set.\n    cache.get(14, age=15)\n\n    # This will delete the cache for ID: 12\n    cache.delete(12)\n\n-  Caching into a single hash. I am still working on this to make a much\n   more flexible caching mechanism\n\n.. code:: py\n\n    # Import redis Connection pool and HashCacheClient.\n    from redis import ConnectionPool\n    from redis_cache import CacheClient\n\n    import json\n\n    # Initialize the Connection pool.\n    redis_pool = ConnectionPool()\n\n    # Create a data synchronisation function\n    # The first argument should define the uniqueness of the data\n    def sync_func(student_id, lots_of_args):\n        # fetch the data however you want to\n        return data # Lets assume that the data returned is of type `dict` \n     \n    # Initialize the cache client.\n    hcache = HashCacheClient(redis_pool, \"Class\", \"Student\", sync_func, set_func=dumps, get_func=loads)\n    # expire_time not supported.\n\n    # This will set cache for ID: 12 for hash_id: 3\n    hcache.set(3, 12)\n\n    # This will get cache for ID: 12 for hash_id: 3 (no need to do a set, it will automatically set the data)\n    hcache.get(3, 12)\n\n    # This will delete the cache for ID: 12 for hash_id: 3\n    hcache.delete(3, 12)\n\n    # This will delete the hash with hash_id: 3\n    hcache.delete_hash(3)\n\nTerminology\n===========\n\n-  key: is the identifier for the cache object. eg. ``student`` (type\n   string)\n-  identity: is the index for a particular key. eg. Roll no. of a\n   student ``12`` (type int)\n-  sync\\_func: function which will give data tto be stores in cache.\n-  set\\_func: data parsing function for setting data into cache. eg. if\n   you want to set a dict value, you will have to set this as\n   ``json.dumps``\n-  get\\_func: data parsing function for getting data into cache. eg. if\n   you want to set a dict value, you will have to set this as\n   ``json.loads``\n-  hash\\_key and hash\\_id: Unique identifiers for the hash. eg.\n   hash\\_key can be ``grade12`` and hash\\_id can be ``2``\n\nKey and Identity are combined in a unique fashion to make the name\nagainst which the cache object will be stored. Similarly for hash\\_key\nand hash\\_id.\n\nAsync\n=====\n\nIf your function is Async i.e. makes use of ``async`` and ``await``\ncoroutines (`PEP 492 <https://www.python.org/dev/peps/pep-0492/>`__).\nYou will have to use event loop to run use this functionality like\nasyncio and tornado. You could do the following:-\n\n.. code:: py\n\n    cache = CacheClient(redis_pool, \"Student\", sync_func, set_func=json.dumps, get_func=json.loads, expire_time=10, asynchronous=True)\n\n    async def some_func():\n        data = await cache.get(23)\n\nNote: the cache client is synchronous because redis servers are quite\nfast. You can expect near 0 latency with the correct setup. Also the\ncreator of tornado-redis suggests this kind if architecture to reduce\nthe cost overhead caused by setting up callbacks. (see post:\nhttp://stackoverflow.com/a/15596969/2248966)\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/nkanish2002/pyredis-cache", "keywords": "redis cache client asyncio tornado", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "pyredis-cache", "package_url": "https://pypi.org/project/pyredis-cache/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/pyredis-cache/", "project_urls": {"Homepage": "https://github.com/nkanish2002/pyredis-cache"}, "release_url": "https://pypi.org/project/pyredis-cache/0.1.3/", "requires_dist": null, "requires_python": "", "summary": "Cache client for redis", "version": "0.1.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"pyredis-cache\">\n<h2>pyredis-cache</h2>\n<p>Python Cache client for redis.</p>\n<p>Supports Python 3.5 and above.</p>\n</div>\n<div id=\"features\">\n<h2>Features</h2>\n<ul>\n<li>Automatically Sync data between the sync_func and cache</li>\n<li>Use of Async/Await for Asynchronous execution of sync_func</li>\n</ul>\n</div>\n<div id=\"dependencies\">\n<h2>Dependencies</h2>\n<ul>\n<li><a href=\"https://github.com/andymccurdy/redis-py\" rel=\"nofollow\">redis-py</a></li>\n<li><a href=\"https://github.com/redis/hiredis-py\" rel=\"nofollow\">hiredis-py</a></li>\n</ul>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<ol>\n<li>Through pip: <tt>pip install <span class=\"pre\">pyredis-cache</span></tt></li>\n<li>Manually: <tt>python setup.py install</tt>. Install dependencies first</li>\n</ol>\n</div>\n<div id=\"getting-started\">\n<h2>Getting Started</h2>\n<ul>\n<li>Simple Redis Cache</li>\n</ul>\n<pre><span class=\"c1\"># Import redis Connection pool and CacheClient.</span>\n<span class=\"kn\">from</span> <span class=\"nn\">redis</span> <span class=\"kn\">import</span> <span class=\"n\">ConnectionPool</span>\n<span class=\"kn\">from</span> <span class=\"nn\">redis_cache</span> <span class=\"kn\">import</span> <span class=\"n\">CacheClient</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">json</span>\n\n<span class=\"c1\"># Initialize the Connection pool.</span>\n<span class=\"n\">redis_pool</span> <span class=\"o\">=</span> <span class=\"n\">ConnectionPool</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Create a data synchronisation function</span>\n<span class=\"c1\"># The first argument should define the uniqueness of the data</span>\n<span class=\"k\">def</span> <span class=\"nf\">sync_func</span><span class=\"p\">(</span><span class=\"n\">student_id</span><span class=\"p\">,</span> <span class=\"n\">lots_of_args</span><span class=\"p\">):</span>\n    <span class=\"c1\"># fetch the data however you want to</span>\n    <span class=\"k\">return</span> <span class=\"n\">data</span> <span class=\"c1\"># Lets assume that the data returned is of type `dict`</span>\n\n<span class=\"c1\"># Initialize the cache client</span>\n<span class=\"n\">cache</span> <span class=\"o\">=</span> <span class=\"n\">CacheClient</span><span class=\"p\">(</span><span class=\"n\">redis_pool</span><span class=\"p\">,</span> <span class=\"s2\">\"Student\"</span><span class=\"p\">,</span> <span class=\"n\">sync_func</span><span class=\"p\">,</span> <span class=\"n\">set_func</span><span class=\"o\">=</span><span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">dumps</span><span class=\"p\">,</span> <span class=\"n\">get_func</span><span class=\"o\">=</span><span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">loads</span><span class=\"p\">,</span> <span class=\"n\">expire_time</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"c1\"># for persistent cache, assign 0 to expire_time (default)</span>\n\n<span class=\"c1\"># This will set cache for ID: 12</span>\n<span class=\"n\">cache</span><span class=\"o\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"mi\">12</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># This will set cache for ID: 13, with custom data</span>\n<span class=\"n\">cache</span><span class=\"o\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"mi\">13</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"name\"</span><span class=\"p\">:</span><span class=\"s2\">\"John Doe\"</span><span class=\"p\">,</span> <span class=\"s2\">\"age\"</span><span class=\"p\">:</span><span class=\"mi\">16</span><span class=\"p\">})</span>\n\n<span class=\"c1\"># This will get cache for ID: 12 (no need to do a set, it will automatically set the data)</span>\n<span class=\"n\">cache</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"mi\">12</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># The get function will pass extra arguments to the sync_func, same works with set.</span>\n<span class=\"n\">cache</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"mi\">14</span><span class=\"p\">,</span> <span class=\"n\">age</span><span class=\"o\">=</span><span class=\"mi\">15</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># This will delete the cache for ID: 12</span>\n<span class=\"n\">cache</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">(</span><span class=\"mi\">12</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li>Caching into a single hash. I am still working on this to make a much\nmore flexible caching mechanism</li>\n</ul>\n<pre><span class=\"c1\"># Import redis Connection pool and HashCacheClient.</span>\n<span class=\"kn\">from</span> <span class=\"nn\">redis</span> <span class=\"kn\">import</span> <span class=\"n\">ConnectionPool</span>\n<span class=\"kn\">from</span> <span class=\"nn\">redis_cache</span> <span class=\"kn\">import</span> <span class=\"n\">CacheClient</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">json</span>\n\n<span class=\"c1\"># Initialize the Connection pool.</span>\n<span class=\"n\">redis_pool</span> <span class=\"o\">=</span> <span class=\"n\">ConnectionPool</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Create a data synchronisation function</span>\n<span class=\"c1\"># The first argument should define the uniqueness of the data</span>\n<span class=\"k\">def</span> <span class=\"nf\">sync_func</span><span class=\"p\">(</span><span class=\"n\">student_id</span><span class=\"p\">,</span> <span class=\"n\">lots_of_args</span><span class=\"p\">):</span>\n    <span class=\"c1\"># fetch the data however you want to</span>\n    <span class=\"k\">return</span> <span class=\"n\">data</span> <span class=\"c1\"># Lets assume that the data returned is of type `dict`</span>\n\n<span class=\"c1\"># Initialize the cache client.</span>\n<span class=\"n\">hcache</span> <span class=\"o\">=</span> <span class=\"n\">HashCacheClient</span><span class=\"p\">(</span><span class=\"n\">redis_pool</span><span class=\"p\">,</span> <span class=\"s2\">\"Class\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Student\"</span><span class=\"p\">,</span> <span class=\"n\">sync_func</span><span class=\"p\">,</span> <span class=\"n\">set_func</span><span class=\"o\">=</span><span class=\"n\">dumps</span><span class=\"p\">,</span> <span class=\"n\">get_func</span><span class=\"o\">=</span><span class=\"n\">loads</span><span class=\"p\">)</span>\n<span class=\"c1\"># expire_time not supported.</span>\n\n<span class=\"c1\"># This will set cache for ID: 12 for hash_id: 3</span>\n<span class=\"n\">hcache</span><span class=\"o\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># This will get cache for ID: 12 for hash_id: 3 (no need to do a set, it will automatically set the data)</span>\n<span class=\"n\">hcache</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># This will delete the cache for ID: 12 for hash_id: 3</span>\n<span class=\"n\">hcache</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># This will delete the hash with hash_id: 3</span>\n<span class=\"n\">hcache</span><span class=\"o\">.</span><span class=\"n\">delete_hash</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"terminology\">\n<h2>Terminology</h2>\n<ul>\n<li>key: is the identifier for the cache object. eg. <tt>student</tt> (type\nstring)</li>\n<li>identity: is the index for a particular key. eg. Roll no. of a\nstudent <tt>12</tt> (type int)</li>\n<li>sync_func: function which will give data tto be stores in cache.</li>\n<li>set_func: data parsing function for setting data into cache. eg. if\nyou want to set a dict value, you will have to set this as\n<tt>json.dumps</tt></li>\n<li>get_func: data parsing function for getting data into cache. eg. if\nyou want to set a dict value, you will have to set this as\n<tt>json.loads</tt></li>\n<li>hash_key and hash_id: Unique identifiers for the hash. eg.\nhash_key can be <tt>grade12</tt> and hash_id can be <tt>2</tt></li>\n</ul>\n<p>Key and Identity are combined in a unique fashion to make the name\nagainst which the cache object will be stored. Similarly for hash_key\nand hash_id.</p>\n</div>\n<div id=\"async\">\n<h2>Async</h2>\n<p>If your function is Async i.e. makes use of <tt>async</tt> and <tt>await</tt>\ncoroutines (<a href=\"https://www.python.org/dev/peps/pep-0492/\" rel=\"nofollow\">PEP 492</a>).\nYou will have to use event loop to run use this functionality like\nasyncio and tornado. You could do the following:-</p>\n<pre><span class=\"n\">cache</span> <span class=\"o\">=</span> <span class=\"n\">CacheClient</span><span class=\"p\">(</span><span class=\"n\">redis_pool</span><span class=\"p\">,</span> <span class=\"s2\">\"Student\"</span><span class=\"p\">,</span> <span class=\"n\">sync_func</span><span class=\"p\">,</span> <span class=\"n\">set_func</span><span class=\"o\">=</span><span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">dumps</span><span class=\"p\">,</span> <span class=\"n\">get_func</span><span class=\"o\">=</span><span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">loads</span><span class=\"p\">,</span> <span class=\"n\">expire_time</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">asynchronous</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">some_func</span><span class=\"p\">():</span>\n    <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">cache</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"mi\">23</span><span class=\"p\">)</span>\n</pre>\n<p>Note: the cache client is synchronous because redis servers are quite\nfast. You can expect near 0 latency with the correct setup. Also the\ncreator of tornado-redis suggests this kind if architecture to reduce\nthe cost overhead caused by setting up callbacks. (see post:\n<a href=\"http://stackoverflow.com/a/15596969/2248966\" rel=\"nofollow\">http://stackoverflow.com/a/15596969/2248966</a>)</p>\n</div>\n\n          </div>"}, "last_serial": 2159070, "releases": {"0.1.2": [{"comment_text": "", "digests": {"md5": "b77e31662f5df4acdad6551b6b90b575", "sha256": "2e77b75da52facbdd61ca03c1af0cbab6270cc5d730321fcec722f6299aa539a"}, "downloads": -1, "filename": "pyredis-cache-0.1.2.tar.gz", "has_sig": false, "md5_digest": "b77e31662f5df4acdad6551b6b90b575", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2953, "upload_time": "2016-06-09T13:13:49", "upload_time_iso_8601": "2016-06-09T13:13:49.438333Z", "url": "https://files.pythonhosted.org/packages/1a/f4/67f0b83497c7aee788d3da7c4a32068cbc9ab9acdc5d130410651e3dfdb6/pyredis-cache-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "63d413f38ddae50751901aaffa1a6787", "sha256": "165ccf487b0c2b2b1b9b966157e7d2bfc5b6eda79f020f932e1383498e585b48"}, "downloads": -1, "filename": "pyredis-cache-0.1.3.tar.gz", "has_sig": false, "md5_digest": "63d413f38ddae50751901aaffa1a6787", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4530, "upload_time": "2016-06-09T17:40:56", "upload_time_iso_8601": "2016-06-09T17:40:56.617228Z", "url": "https://files.pythonhosted.org/packages/84/d3/f0ff0a8ec30643776b1ddb5553ff30755c6fd12c71c53f691be5100485b7/pyredis-cache-0.1.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "63d413f38ddae50751901aaffa1a6787", "sha256": "165ccf487b0c2b2b1b9b966157e7d2bfc5b6eda79f020f932e1383498e585b48"}, "downloads": -1, "filename": "pyredis-cache-0.1.3.tar.gz", "has_sig": false, "md5_digest": "63d413f38ddae50751901aaffa1a6787", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4530, "upload_time": "2016-06-09T17:40:56", "upload_time_iso_8601": "2016-06-09T17:40:56.617228Z", "url": "https://files.pythonhosted.org/packages/84/d3/f0ff0a8ec30643776b1ddb5553ff30755c6fd12c71c53f691be5100485b7/pyredis-cache-0.1.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:57:56 2020"}