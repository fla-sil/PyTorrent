{"info": {"author": "vaaaaanquish", "author_email": "6syun9@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "# Cloudia\nTools to easily create a word cloud.\n\n  \n### from string\n\nfrom str or List[str]\n```\nfrom cloudia import Cloudia\n\ntext1 = \"text data...\"\ntext2 = \"text data...\"\n\n# from str\nCloudia(text1).plot()\n\n# from list\nCloudia([text1, text2]).plot()\n```\n \nexample from : [20 Newsgroups](http://qwone.com/~jason/20Newsgroups/)\n\n![sample_img](https://github.com/vaaaaanquish/cloudia/blob/021a6d151fb6a3b579dc96b7086356fc0c225852/examples/img/sample_img.png?raw=true, \"sample_img\")\n  \n\nWe can also make it from Tuple.\n```\nfrom cloudia import Cloudia\n\ntext1 = \"text data...\"\ntext2 = \"text data...\"\nCloudia([ (\"cloudia 1\", text1), (\"cloudia 2\", text2) ]).plot()\n```\nTuple is (\"IMAGE TITLE\", \"TEXT\").  \n  \n  \n### from pandas\n\nWe can use pandas.\n\n```\ndf = pd.DataFrame({'wc1': ['sample1','sample2'], 'wc2': ['hoge hoge piyo piyo fuga', 'hoge']})\n\n# plot from df\nCloudia(df).plot()\n\n# add df method\ndf.wc.plot(dark_theme=True)\n```\n\nfrom pandas.DataFrame or pandas.Series.\n\n![pandas_img](https://github.com/vaaaaanquish/cloudia/blob/021a6d151fb6a3b579dc96b7086356fc0c225852/examples/img/pandas_img.png?raw=true, \"pandas_img\")\n![dark_img](https://github.com/vaaaaanquish/cloudia/blob/021a6d151fb6a3b579dc96b7086356fc0c225852/examples/img/dark_img.png?raw=true, \"dark_img\")\n  \nWe can use Tuple too.\n```\nCloudia( (\"IMAGE TITLE\", pd.Series(['hoge'])) ).plot()\n```\n  \n  \n### from japanese\n\nWe can process Japanese too.\n```\ntext = \"\u3053\u308c\u306fCloudia\u306e\u30c6\u30b9\u30c8\u3067\u3059\u3002WordCloud\u3092\u3064\u304f\u308b\u306b\u306f\u672c\u6765\u3001\u5f62\u614b\u7d20\u89e3\u6790\u306e\u5c0e\u5165\u304c\u5fc5\u8981\u306b\u306a\u308a\u307e\u3059\u3002Cloudia\u306fmecab\u306e\u3088\u3046\u306a\u5f62\u614b\u7d20\u89e3\u6790\u5668\u306e\u5c0e\u5165\u306f\u5fc5\u8981\u306f\u306a\u304fnagisa\u3092\u5229\u7528\u3057\u305f\u52d5\u7684\u306a\u751f\u6210\u3092\u884c\u3046\u4e8b\u304c\u3067\u304d\u307e\u3059\u3002nagisa\u3068japanize-matplotlib\u306f\u3001\u5f62\u614b\u7d20\u89e3\u6790\u3092\u5fc5\u8981\u3068\u3057\u3066\u304d\u305fWordCloud\u751f\u6210\u306b\u5bfe\u3057\u3066\u3001Cloudia\u306b\u5bfe\u3057\u3066\u5927\u304d\u304f\u8ca2\u732e\u3057\u307e\u3057\u305f\u3002\u3053\u3053\u306b\u611f\u8b1d\u306e\u610f\u3092\u8ff0\u3079\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\"\n\nCloudia(text).plot()\n```\n\nfrom japanese without morphological analysis module.  \n  \n![japanese_img](https://github.com/vaaaaanquish/cloudia/blob/021a6d151fb6a3b579dc96b7086356fc0c225852/examples/img/japanese_img.png?raw=true, \"jap_img\")  \n  \nNo need to introduce morphological analysis.\n  \n  \n# Install\n\n```\npip install cloudia\n```\n  \n  \n# Args\n\nCloudia args.\n```\nCloudia(\n  data,    # text data\n  single_words=[],    # It's not split word list, example: [\"neural network\"]\n  stop_words=STOPWORDS,    # not count words, default is wordcloud.STOPWORDS\n  extract_postags=['\u540d\u8a5e', '\u82f1\u5358\u8a9e', '\u30ed\u30fc\u30de\u5b57\u6587'],    # part of speech for japanese\n  word_num=100,    # max word num\n  parser=None,    # morphological analysis instance for japanese\n  parse_func=None,    # split text function, example: lambda x: x.split(',')\n  sampling_rate=sampling_rate    # pandas.DataFrame.sample.frac\n)\n```\n  \n  \nplot method args.\n```\nCloudia().plot(\n    dark_theme=False,    # color theme\n    title_size=12,     # title text size\n    row_num=3,    # for example, 12 wordcloud, row_num=3 -> 4*3image\n    figsize_rate=2    # figure size rate\n)\n```\n\nsave method args.\n```\nCloudia().save(\n    file_path,    # save figure image path\n    dark_theme=False,\n    title_size=12, \n    row_num=3,\n    figsize_rate=2\n)\n```\n\npandas.DataFrame, pandas.Series wc.plot method args.\n```\nDataFrame.wc.plot(\n  single_words=[],    # It's not split word list, example: [\"neural network\"]\n  stop_words=STOPWORDS,    # not count words, default is wordcloud.STOPWORDS\n  extract_postags=['\u540d\u8a5e', '\u82f1\u5358\u8a9e', '\u30ed\u30fc\u30de\u5b57\u6587'],    # part of speech for japanese\n  word_num=100,    # max word num\n  parser=None,    # morphological analysis instance for japanese\n  parse_func=None,    # split text function, example: lambda x: x.split(',')\n  sampling_rate=sampling_rate    # pandas.DataFrame.sample.frac\n  dark_theme=False,    # color theme\n  title_size=12,     # title text size\n  row_num=3,    # for example, 12 wordcloud, row_num=3 -> 4*3image\n  figsize_rate=2    # figure size rate\n)\n```\nIf we use wc.save, setting file_path args.\n  \n  \n# Thanks\n\n- [japanize-matplotlib](https://github.com/uehara1414/japanize-matplotlib)\n- [nagisa](https://github.com/taishi-i/nagisa)\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/vaaaaanquish/cloudia", "keywords": "wordcloud,matplotlib", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "cloudia", "package_url": "https://pypi.org/project/cloudia/", "platform": "", "project_url": "https://pypi.org/project/cloudia/", "project_urls": {"Homepage": "https://github.com/vaaaaanquish/cloudia", "Repository": "https://github.com/vaaaaanquish/cloudia"}, "release_url": "https://pypi.org/project/cloudia/0.1.0/", "requires_dist": ["nagisa", "wordcloud", "pandas", "matplotlib", "wurlitzer", "japanize_matplotlib (>=1.1.1,<2.0.0)"], "requires_python": ">=3.6,<4.0", "summary": "Tools to easily create a word cloud", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Cloudia</h1>\n<p>Tools to easily create a word cloud.</p>\n<h3>from string</h3>\n<p>from str or List[str]</p>\n<pre><code>from cloudia import Cloudia\n\ntext1 = \"text data...\"\ntext2 = \"text data...\"\n\n# from str\nCloudia(text1).plot()\n\n# from list\nCloudia([text1, text2]).plot()\n</code></pre>\n<p>example from : <a href=\"http://qwone.com/%7Ejason/20Newsgroups/\" rel=\"nofollow\">20 Newsgroups</a></p>\n<p><img alt=\"sample_img\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1ecf286c210d5e2e09a57c540b22f52da38b8f5d/68747470733a2f2f6769746875622e636f6d2f7661616161616e71756973682f636c6f756469612f626c6f622f303231613664313531666236613362353739646339366237303836333536666330633232353835322f6578616d706c65732f696d672f73616d706c655f696d672e706e673f7261773d747275652c\"></p>\n<p>We can also make it from Tuple.</p>\n<pre><code>from cloudia import Cloudia\n\ntext1 = \"text data...\"\ntext2 = \"text data...\"\nCloudia([ (\"cloudia 1\", text1), (\"cloudia 2\", text2) ]).plot()\n</code></pre>\n<p>Tuple is (\"IMAGE TITLE\", \"TEXT\").</p>\n<h3>from pandas</h3>\n<p>We can use pandas.</p>\n<pre><code>df = pd.DataFrame({'wc1': ['sample1','sample2'], 'wc2': ['hoge hoge piyo piyo fuga', 'hoge']})\n\n# plot from df\nCloudia(df).plot()\n\n# add df method\ndf.wc.plot(dark_theme=True)\n</code></pre>\n<p>from pandas.DataFrame or pandas.Series.</p>\n<p><img alt=\"pandas_img\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/71289d81c1b4e3072dbcc07de7ed9e38a9b12d0a/68747470733a2f2f6769746875622e636f6d2f7661616161616e71756973682f636c6f756469612f626c6f622f303231613664313531666236613362353739646339366237303836333536666330633232353835322f6578616d706c65732f696d672f70616e6461735f696d672e706e673f7261773d747275652c\">\n<img alt=\"dark_img\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ff50ba623ae27cde35f83dc8b0d1a1c500e86b55/68747470733a2f2f6769746875622e636f6d2f7661616161616e71756973682f636c6f756469612f626c6f622f303231613664313531666236613362353739646339366237303836333536666330633232353835322f6578616d706c65732f696d672f6461726b5f696d672e706e673f7261773d747275652c\"></p>\n<p>We can use Tuple too.</p>\n<pre><code>Cloudia( (\"IMAGE TITLE\", pd.Series(['hoge'])) ).plot()\n</code></pre>\n<h3>from japanese</h3>\n<p>We can process Japanese too.</p>\n<pre><code>text = \"\u3053\u308c\u306fCloudia\u306e\u30c6\u30b9\u30c8\u3067\u3059\u3002WordCloud\u3092\u3064\u304f\u308b\u306b\u306f\u672c\u6765\u3001\u5f62\u614b\u7d20\u89e3\u6790\u306e\u5c0e\u5165\u304c\u5fc5\u8981\u306b\u306a\u308a\u307e\u3059\u3002Cloudia\u306fmecab\u306e\u3088\u3046\u306a\u5f62\u614b\u7d20\u89e3\u6790\u5668\u306e\u5c0e\u5165\u306f\u5fc5\u8981\u306f\u306a\u304fnagisa\u3092\u5229\u7528\u3057\u305f\u52d5\u7684\u306a\u751f\u6210\u3092\u884c\u3046\u4e8b\u304c\u3067\u304d\u307e\u3059\u3002nagisa\u3068japanize-matplotlib\u306f\u3001\u5f62\u614b\u7d20\u89e3\u6790\u3092\u5fc5\u8981\u3068\u3057\u3066\u304d\u305fWordCloud\u751f\u6210\u306b\u5bfe\u3057\u3066\u3001Cloudia\u306b\u5bfe\u3057\u3066\u5927\u304d\u304f\u8ca2\u732e\u3057\u307e\u3057\u305f\u3002\u3053\u3053\u306b\u611f\u8b1d\u306e\u610f\u3092\u8ff0\u3079\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\"\n\nCloudia(text).plot()\n</code></pre>\n<p>from japanese without morphological analysis module.</p>\n<p><img alt=\"japanese_img\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f8e9e820c453beb2ec0de32224433c2e71f93903/68747470733a2f2f6769746875622e636f6d2f7661616161616e71756973682f636c6f756469612f626c6f622f303231613664313531666236613362353739646339366237303836333536666330633232353835322f6578616d706c65732f696d672f6a6170616e6573655f696d672e706e673f7261773d747275652c\"></p>\n<p>No need to introduce morphological analysis.</p>\n<h1>Install</h1>\n<pre><code>pip install cloudia\n</code></pre>\n<h1>Args</h1>\n<p>Cloudia args.</p>\n<pre><code>Cloudia(\n  data,    # text data\n  single_words=[],    # It's not split word list, example: [\"neural network\"]\n  stop_words=STOPWORDS,    # not count words, default is wordcloud.STOPWORDS\n  extract_postags=['\u540d\u8a5e', '\u82f1\u5358\u8a9e', '\u30ed\u30fc\u30de\u5b57\u6587'],    # part of speech for japanese\n  word_num=100,    # max word num\n  parser=None,    # morphological analysis instance for japanese\n  parse_func=None,    # split text function, example: lambda x: x.split(',')\n  sampling_rate=sampling_rate    # pandas.DataFrame.sample.frac\n)\n</code></pre>\n<p>plot method args.</p>\n<pre><code>Cloudia().plot(\n    dark_theme=False,    # color theme\n    title_size=12,     # title text size\n    row_num=3,    # for example, 12 wordcloud, row_num=3 -&gt; 4*3image\n    figsize_rate=2    # figure size rate\n)\n</code></pre>\n<p>save method args.</p>\n<pre><code>Cloudia().save(\n    file_path,    # save figure image path\n    dark_theme=False,\n    title_size=12, \n    row_num=3,\n    figsize_rate=2\n)\n</code></pre>\n<p>pandas.DataFrame, pandas.Series wc.plot method args.</p>\n<pre><code>DataFrame.wc.plot(\n  single_words=[],    # It's not split word list, example: [\"neural network\"]\n  stop_words=STOPWORDS,    # not count words, default is wordcloud.STOPWORDS\n  extract_postags=['\u540d\u8a5e', '\u82f1\u5358\u8a9e', '\u30ed\u30fc\u30de\u5b57\u6587'],    # part of speech for japanese\n  word_num=100,    # max word num\n  parser=None,    # morphological analysis instance for japanese\n  parse_func=None,    # split text function, example: lambda x: x.split(',')\n  sampling_rate=sampling_rate    # pandas.DataFrame.sample.frac\n  dark_theme=False,    # color theme\n  title_size=12,     # title text size\n  row_num=3,    # for example, 12 wordcloud, row_num=3 -&gt; 4*3image\n  figsize_rate=2    # figure size rate\n)\n</code></pre>\n<p>If we use wc.save, setting file_path args.</p>\n<h1>Thanks</h1>\n<ul>\n<li><a href=\"https://github.com/uehara1414/japanize-matplotlib\" rel=\"nofollow\">japanize-matplotlib</a></li>\n<li><a href=\"https://github.com/taishi-i/nagisa\" rel=\"nofollow\">nagisa</a></li>\n</ul>\n\n          </div>"}, "last_serial": 7178527, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "bc70a0d3bd690be6df9897bdd9973678", "sha256": "777a1c0b7e964bab539a3abd6dc1500e5bf3b2d3ab73552f12e243e301c75154"}, "downloads": -1, "filename": "cloudia-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "bc70a0d3bd690be6df9897bdd9973678", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 4238, "upload_time": "2020-04-28T12:55:50", "upload_time_iso_8601": "2020-04-28T12:55:50.331350Z", "url": "https://files.pythonhosted.org/packages/56/20/3301aaf05e3c687a9fe9783967c54d8e87059762954695a9f556bf42f1ad/cloudia-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "adc2793c756f219951dc5bf57d9c4369", "sha256": "4e93f88270182acdd0f26a5df9a8de0fd7372a4834059888408469b220d40f18"}, "downloads": -1, "filename": "cloudia-0.0.1.tar.gz", "has_sig": false, "md5_digest": "adc2793c756f219951dc5bf57d9c4369", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 3293, "upload_time": "2020-04-28T12:55:52", "upload_time_iso_8601": "2020-04-28T12:55:52.464054Z", "url": "https://files.pythonhosted.org/packages/3b/a7/1adee216c8212f4deeb0807d263cc92b8a4f0c3e935f5e997f9c8e2888fb/cloudia-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "11719cc0cbb1584b0e71c2c2d41d37e5", "sha256": "24cb39c8b1e097303293478d42366fa40c75ac521b954b731e8444e938eb989a"}, "downloads": -1, "filename": "cloudia-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "11719cc0cbb1584b0e71c2c2d41d37e5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 4371, "upload_time": "2020-04-29T08:11:13", "upload_time_iso_8601": "2020-04-29T08:11:13.992096Z", "url": "https://files.pythonhosted.org/packages/9e/60/4be91659e64b5473266b4b26af4c609c61b008125e5e9327fec2ccf6b84f/cloudia-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ffc103db1be2adfce595a17e08d169de", "sha256": "100d057e055da693c965cbaee11c7a17be21a1698313fff559f963f3fda254de"}, "downloads": -1, "filename": "cloudia-0.0.2.tar.gz", "has_sig": false, "md5_digest": "ffc103db1be2adfce595a17e08d169de", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 3426, "upload_time": "2020-04-29T08:11:15", "upload_time_iso_8601": "2020-04-29T08:11:15.100179Z", "url": "https://files.pythonhosted.org/packages/c5/ba/fff3c0daf76caa18f315040fb5965fab3dbee6567958bfd0a297723e64a0/cloudia-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "fd6c0951bf993f2c1a037fe444c23ac0", "sha256": "25ce3f5900957b6d8ba4ea7f922f3f4940381c1a2a5ddf44da7c345f797902d9"}, "downloads": -1, "filename": "cloudia-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "fd6c0951bf993f2c1a037fe444c23ac0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 4369, "upload_time": "2020-04-29T11:22:51", "upload_time_iso_8601": "2020-04-29T11:22:51.846513Z", "url": "https://files.pythonhosted.org/packages/df/59/d09d2231c0ff90a928d4ce06a92c1cd55fb0d52f7055f38f8382cc379b7a/cloudia-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e34bf9cbbeae3b604e5257f1f060fac6", "sha256": "07a93a802d39d6357bb7a507cd43ea758e064401bf6a86738dbb361788bc29ef"}, "downloads": -1, "filename": "cloudia-0.0.3.tar.gz", "has_sig": false, "md5_digest": "e34bf9cbbeae3b604e5257f1f060fac6", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 3435, "upload_time": "2020-04-29T11:22:52", "upload_time_iso_8601": "2020-04-29T11:22:52.912333Z", "url": "https://files.pythonhosted.org/packages/a6/89/d480f946c731390761ce1dcbfecafced773bf20702441c6c81501a5b52ab/cloudia-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "51493629f55eb93421178e09fa6f3947", "sha256": "24e3b55a4172e516f27b305392f2d8bed49fba0e070fbaf10258ca79d51d88e8"}, "downloads": -1, "filename": "cloudia-0.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "51493629f55eb93421178e09fa6f3947", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 5874, "upload_time": "2020-04-29T12:19:25", "upload_time_iso_8601": "2020-04-29T12:19:25.750483Z", "url": "https://files.pythonhosted.org/packages/89/7d/2476024fe141862a3286137c8e992df3fccee8e947377871eb8c6e760272/cloudia-0.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "65d36b5239f81110ee08c2bdd3d63427", "sha256": "ef03b5aeb0879214bf76188245c5547a506da622d9ceae73534dd2b910415d1a"}, "downloads": -1, "filename": "cloudia-0.0.4.tar.gz", "has_sig": false, "md5_digest": "65d36b5239f81110ee08c2bdd3d63427", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 4998, "upload_time": "2020-04-29T12:19:26", "upload_time_iso_8601": "2020-04-29T12:19:26.829023Z", "url": "https://files.pythonhosted.org/packages/52/4b/cd188ddafdc267f3d08734f7fefc2a37e1ec92861e271c33d5966d9face3/cloudia-0.0.4.tar.gz", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "cc05df9ee1d062f18028a97106e0b8c6", "sha256": "f6a3a58605d466e987c05749b35c4522c18c9313248973e69baf0f272188070e"}, "downloads": -1, "filename": "cloudia-0.0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "cc05df9ee1d062f18028a97106e0b8c6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 6474, "upload_time": "2020-05-04T12:29:23", "upload_time_iso_8601": "2020-05-04T12:29:23.810612Z", "url": "https://files.pythonhosted.org/packages/ba/9f/0ffd81ad2eaa4d9a1dfa498f7204fb93b5d0062729f6e101315c94e5f732/cloudia-0.0.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9595617c4842cbd41f11c0755d4de2d4", "sha256": "7b9672ce6ab1b3c5d9f46feee04c452fca7fbc471c598924643eb38c6744c064"}, "downloads": -1, "filename": "cloudia-0.0.5.tar.gz", "has_sig": false, "md5_digest": "9595617c4842cbd41f11c0755d4de2d4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 5669, "upload_time": "2020-05-04T12:29:24", "upload_time_iso_8601": "2020-05-04T12:29:24.779905Z", "url": "https://files.pythonhosted.org/packages/55/0f/76e72cec139b4d0582d351f6fb1ce4721226915635e9a9678a9a67be1177/cloudia-0.0.5.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "5f51a733686b4571f8588f3c7787852a", "sha256": "d58fb2d10730dfb5a499a0806953e955f382665ee1ddbb53eaed796b24368e50"}, "downloads": -1, "filename": "cloudia-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "5f51a733686b4571f8588f3c7787852a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 6964, "upload_time": "2020-05-06T08:27:02", "upload_time_iso_8601": "2020-05-06T08:27:02.008881Z", "url": "https://files.pythonhosted.org/packages/bb/7f/108cf9355dc4a1aca9511a959f2ac679591143de05a9f469021c71b02890/cloudia-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3894978c380de0cf8ad59d25cc1dc03a", "sha256": "9520228361472a646a304af4a8cf3fbec21a36e481859db268ab5be67e58dcef"}, "downloads": -1, "filename": "cloudia-0.1.0.tar.gz", "has_sig": false, "md5_digest": "3894978c380de0cf8ad59d25cc1dc03a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 6472, "upload_time": "2020-05-06T08:27:03", "upload_time_iso_8601": "2020-05-06T08:27:03.114358Z", "url": "https://files.pythonhosted.org/packages/99/1c/f52ce02f80a145c60958333376840411aed48c95e14a076d3505e4c4df2f/cloudia-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "5f51a733686b4571f8588f3c7787852a", "sha256": "d58fb2d10730dfb5a499a0806953e955f382665ee1ddbb53eaed796b24368e50"}, "downloads": -1, "filename": "cloudia-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "5f51a733686b4571f8588f3c7787852a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 6964, "upload_time": "2020-05-06T08:27:02", "upload_time_iso_8601": "2020-05-06T08:27:02.008881Z", "url": "https://files.pythonhosted.org/packages/bb/7f/108cf9355dc4a1aca9511a959f2ac679591143de05a9f469021c71b02890/cloudia-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3894978c380de0cf8ad59d25cc1dc03a", "sha256": "9520228361472a646a304af4a8cf3fbec21a36e481859db268ab5be67e58dcef"}, "downloads": -1, "filename": "cloudia-0.1.0.tar.gz", "has_sig": false, "md5_digest": "3894978c380de0cf8ad59d25cc1dc03a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 6472, "upload_time": "2020-05-06T08:27:03", "upload_time_iso_8601": "2020-05-06T08:27:03.114358Z", "url": "https://files.pythonhosted.org/packages/99/1c/f52ce02f80a145c60958333376840411aed48c95e14a076d3505e4c4df2f/cloudia-0.1.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:18:50 2020"}