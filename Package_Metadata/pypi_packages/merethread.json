{"info": {"author": "shx2", "author_email": "shx222@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Topic :: Software Development"], "description": "==================================\nMereThread\n==================================\n\nWhat is MereThread?\n=====================\n\nMereThreads are merely python threads (subclasses of ``threading.Thread``), plus various\nuseful features.\n\nThis package also includes thread classes suitable for common use cases\n(specifically, ``EventLoopThread`` and ``TaskThread``).\n\n\nWhat MereThread isn't?\n--------------------------\n\nThis isn't an ambitous new approach to multithreading.  Mere threads, plus added features.\nNo magic is involved.\n\nIf you're familiar with working with standard python threads (the ``threading.Thread`` class),\nthere's almost nothing new to learn before using MereThreads, and benefiting from the\nuseful features.\n\n\nFeatures\n==================\n\n- Added attributes:\n\n    - ``Thread.result``: the value \"returned\" by the thread (e.g. the result of a computation).\n    - ``Thread.exception``: the exception which caused the thread to abort.\n\n- ``Future``-interface: A ``concurrent.futures.Future`` interface, using the ``Thread.future`` attribute.\n\n    - Useful mainly for adding callbacks/errbacks to be called when the thread finishes.\n    - Also allows you to wait on multiple threads (using\n      ``concurrent.futures.wait()`` or ``concurrent.futures.as_completed()`` )\n\n- Clean stopping/cancelling: by calling ``DaemonThread.stop()``, or ``TaskThread.cancel()``.\n\n    - This depends on thread's `well-behaved-ness <#well-behaved-threads>`_.\n\n- Debugging and profiling threads\n\n    - Easily profile a thread.\n    \n        - Enable profiling on the thread by passing ``profile=True``.\n        - Access profiler data and stats using the ``Thread.profiler`` attribute.\n    \n    - Easily view the current (live) stack-trace of the thread, using the\n      ``Thread.get_current_stacktrace()`` method.\n\n    - Access thread execution start/end times, using the ``Thread.runtime`` attribute.\n\n- The ``Thread.join()`` method returns a bool indicating whether thread has finished\n\n    - This corrects an annoying inconvenience in the interface of the standard ``Thread`` class.\n\n\nThread Classes\n==================\n\nThis package includes definitions of **abstract thread classes**, suitable for common use cases.\n\nThese classes are subclasses of the ``merethread.Thread`` baseclass, and include all the features\nlisted above.\n\nThese are:\n\n- ``DaemonThread``: A thread which is meant to run for as long as the process is alive.\n    \n    - Can be signaled to stop (cleanly) by calling its ``DaemonThread.stop()`` method.\n    - Exiting prematurely is considered an error, and an appropriate error handler is called, so\n      they don't disappear silently.\n\n- ``EventLoopThread``: A specialized ``DaemonThread``, customized for the common case of running\n  an `event-loop <https://en.wikipedia.org/wiki/Event_loop>`_.\n\n    - A concrete ``EventLoopThread`` subclass only needs to define how to read the next event, and how\n      to handle an event.\n\n- ``TaskThread``: A \"temporary\" thread which is meant to run a specific task (e.g. compute some value)\n  and exit.\n\n    - Can be cancelled (cleanly) by calling its ``TaskThread.cancel()`` method.\n\n- ``FunctionThread``: A specialized ``TaskThread`` which runs a caller-provided ``target`` function\n  (similar to the standard ``Thread`` ``target`` arguemnt).\n    \n    - This class is provided for convenience.  It is not a well-behaved thread.\n    - Cancelling a ``FunctionThread`` can only be done before it starts running.\n    - You should prefer subclassing ``TaskThread`` instead of using a ``FunctionThread`` when\n      possible.\n\n\nWell Behaved Threads\n======================\n\nIn order to support clean stopping/cancelling of threads, the concrete thread subclasses have to adhere\nto one basic rule: they have to\n\n    *check* **OFTEN** *if the thread has been signalled to stop/cancel.*\n\nThe frequency of the check defines thread's responsiveness to stopping/cancelling.\nIn other words, a check frequency of at most X seconds means it can take up to X seconds, from the time\nstop/cancel is requested, until the thread stops (or, more accurately, until it detects it should stop, and\nmoves on to its exiting-routine).\n\nHow often is **OFTEN**?  That depends on the application, but a good rule of thumb, for most applications,\nis that a frequency of 200 millis is often enough, and 2 seconds is not.\nCare should also be taken not to check too often (e.g. every 0.1 millis), because that would result in a\nbusy-wait loop, and wasted CPU time.\n\n\nInstallation\n==================\n\nInstall using ``pip``::\n\n    % pip install merethread\n\n\nOther locations\n==================\n\n- `MereThread's GitHub page <https://github.com/shx2/merethread>`_\n- `MereThread on PyPI <https://pypi.python.org/pypi?:action=display&name=merethread>`_", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/shx2/merethread", "keywords": "thread,multithreading,profiler", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "merethread", "package_url": "https://pypi.org/project/merethread/", "platform": "", "project_url": "https://pypi.org/project/merethread/", "project_urls": {"Homepage": "https://github.com/shx2/merethread"}, "release_url": "https://pypi.org/project/merethread/0.1.0/", "requires_dist": null, "requires_python": "", "summary": "Mere python threads, plus features", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"what-is-merethread\">\n<h2>What is MereThread?</h2>\n<p>MereThreads are merely python threads (subclasses of <tt>threading.Thread</tt>), plus various\nuseful features.</p>\n<p>This package also includes thread classes suitable for common use cases\n(specifically, <tt>EventLoopThread</tt> and <tt>TaskThread</tt>).</p>\n<div id=\"what-merethread-isn-t\">\n<h3>What MereThread isn\u2019t?</h3>\n<p>This isn\u2019t an ambitous new approach to multithreading.  Mere threads, plus added features.\nNo magic is involved.</p>\n<p>If you\u2019re familiar with working with standard python threads (the <tt>threading.Thread</tt> class),\nthere\u2019s almost nothing new to learn before using MereThreads, and benefiting from the\nuseful features.</p>\n</div>\n</div>\n<div id=\"features\">\n<h2>Features</h2>\n<ul>\n<li><p>Added attributes:</p>\n<blockquote>\n<ul>\n<li><tt>Thread.result</tt>: the value \u201creturned\u201d by the thread (e.g. the result of a computation).</li>\n<li><tt>Thread.exception</tt>: the exception which caused the thread to abort.</li>\n</ul>\n</blockquote>\n</li>\n<li><p><tt>Future</tt>-interface: A <tt>concurrent.futures.Future</tt> interface, using the <tt>Thread.future</tt> attribute.</p>\n<blockquote>\n<ul>\n<li>Useful mainly for adding callbacks/errbacks to be called when the thread finishes.</li>\n<li>Also allows you to wait on multiple threads (using\n<tt>concurrent.futures.wait()</tt> or <tt>concurrent.futures.as_completed()</tt> )</li>\n</ul>\n</blockquote>\n</li>\n<li><p>Clean stopping/cancelling: by calling <tt>DaemonThread.stop()</tt>, or <tt>TaskThread.cancel()</tt>.</p>\n<blockquote>\n<ul>\n<li>This depends on thread\u2019s <a href=\"#well-behaved-threads\" rel=\"nofollow\">well-behaved-ness</a>.</li>\n</ul>\n</blockquote>\n</li>\n<li><p>Debugging and profiling threads</p>\n<blockquote>\n<ul>\n<li><p>Easily profile a thread.</p>\n<blockquote>\n<ul>\n<li>Enable profiling on the thread by passing <tt>profile=True</tt>.</li>\n<li>Access profiler data and stats using the <tt>Thread.profiler</tt> attribute.</li>\n</ul>\n</blockquote>\n</li>\n<li><p>Easily view the current (live) stack-trace of the thread, using the\n<tt>Thread.get_current_stacktrace()</tt> method.</p>\n</li>\n<li><p>Access thread execution start/end times, using the <tt>Thread.runtime</tt> attribute.</p>\n</li>\n</ul>\n</blockquote>\n</li>\n<li><p>The <tt>Thread.join()</tt> method returns a bool indicating whether thread has finished</p>\n<blockquote>\n<ul>\n<li>This corrects an annoying inconvenience in the interface of the standard <tt>Thread</tt> class.</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n</div>\n<div id=\"thread-classes\">\n<h2>Thread Classes</h2>\n<p>This package includes definitions of <strong>abstract thread classes</strong>, suitable for common use cases.</p>\n<p>These classes are subclasses of the <tt>merethread.Thread</tt> baseclass, and include all the features\nlisted above.</p>\n<p>These are:</p>\n<ul>\n<li><p><tt>DaemonThread</tt>: A thread which is meant to run for as long as the process is alive.</p>\n<blockquote>\n<ul>\n<li>Can be signaled to stop (cleanly) by calling its <tt>DaemonThread.stop()</tt> method.</li>\n<li>Exiting prematurely is considered an error, and an appropriate error handler is called, so\nthey don\u2019t disappear silently.</li>\n</ul>\n</blockquote>\n</li>\n<li><p><tt>EventLoopThread</tt>: A specialized <tt>DaemonThread</tt>, customized for the common case of running\nan <a href=\"https://en.wikipedia.org/wiki/Event_loop\" rel=\"nofollow\">event-loop</a>.</p>\n<blockquote>\n<ul>\n<li>A concrete <tt>EventLoopThread</tt> subclass only needs to define how to read the next event, and how\nto handle an event.</li>\n</ul>\n</blockquote>\n</li>\n<li><p><tt>TaskThread</tt>: A \u201ctemporary\u201d thread which is meant to run a specific task (e.g. compute some value)\nand exit.</p>\n<blockquote>\n<ul>\n<li>Can be cancelled (cleanly) by calling its <tt>TaskThread.cancel()</tt> method.</li>\n</ul>\n</blockquote>\n</li>\n<li><p><tt>FunctionThread</tt>: A specialized <tt>TaskThread</tt> which runs a caller-provided <tt>target</tt> function\n(similar to the standard <tt>Thread</tt> <tt>target</tt> arguemnt).</p>\n<blockquote>\n<ul>\n<li>This class is provided for convenience.  It is not a well-behaved thread.</li>\n<li>Cancelling a <tt>FunctionThread</tt> can only be done before it starts running.</li>\n<li>You should prefer subclassing <tt>TaskThread</tt> instead of using a <tt>FunctionThread</tt> when\npossible.</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n</div>\n<div id=\"well-behaved-threads\">\n<h2>Well Behaved Threads</h2>\n<p>In order to support clean stopping/cancelling of threads, the concrete thread subclasses have to adhere\nto one basic rule: they have to</p>\n<blockquote>\n<em>check</em> <strong>OFTEN</strong> <em>if the thread has been signalled to stop/cancel.</em></blockquote>\n<p>The frequency of the check defines thread\u2019s responsiveness to stopping/cancelling.\nIn other words, a check frequency of at most X seconds means it can take up to X seconds, from the time\nstop/cancel is requested, until the thread stops (or, more accurately, until it detects it should stop, and\nmoves on to its exiting-routine).</p>\n<p>How often is <strong>OFTEN</strong>?  That depends on the application, but a good rule of thumb, for most applications,\nis that a frequency of 200 millis is often enough, and 2 seconds is not.\nCare should also be taken not to check too often (e.g. every 0.1 millis), because that would result in a\nbusy-wait loop, and wasted CPU time.</p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Install using <tt>pip</tt>:</p>\n<pre>% pip install merethread\n</pre>\n</div>\n<div id=\"other-locations\">\n<h2>Other locations</h2>\n<ul>\n<li><a href=\"https://github.com/shx2/merethread\" rel=\"nofollow\">MereThread\u2019s GitHub page</a></li>\n<li><a href=\"https://pypi.python.org/pypi?:action=display&amp;name=merethread\" rel=\"nofollow\">MereThread on PyPI</a></li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 7004795, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "d73e575bd5fa50f24ea740e8ee83a458", "sha256": "b380b4562cc316fecc688531da0029445b8a46ea70a73c32efbb346027593981"}, "downloads": -1, "filename": "merethread-0.1.0.tar.gz", "has_sig": false, "md5_digest": "d73e575bd5fa50f24ea740e8ee83a458", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14445, "upload_time": "2020-04-12T14:29:51", "upload_time_iso_8601": "2020-04-12T14:29:51.021771Z", "url": "https://files.pythonhosted.org/packages/94/28/1a0f4eefe18f8c6a3709ded43f4c30f47846a601c682f1fd44f0cdc22e8d/merethread-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d73e575bd5fa50f24ea740e8ee83a458", "sha256": "b380b4562cc316fecc688531da0029445b8a46ea70a73c32efbb346027593981"}, "downloads": -1, "filename": "merethread-0.1.0.tar.gz", "has_sig": false, "md5_digest": "d73e575bd5fa50f24ea740e8ee83a458", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14445, "upload_time": "2020-04-12T14:29:51", "upload_time_iso_8601": "2020-04-12T14:29:51.021771Z", "url": "https://files.pythonhosted.org/packages/94/28/1a0f4eefe18f8c6a3709ded43f4c30f47846a601c682f1fd44f0cdc22e8d/merethread-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:56:09 2020"}