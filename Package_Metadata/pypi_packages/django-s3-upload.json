{"info": {"author": "YunoJuno", "author_email": "code@yunojuno.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Web Environment", "Framework :: Django", "Framework :: Django :: 1.11", "Framework :: Django :: 2.0", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3.6"], "description": "django-s3-upload\n================\n\nCompatibility\n-------------\n\nThis library is now Python3 and Django1.11 and above only.\n\nUpload files directly to S3 from Django\n-------------------------------------\n\n[![Build Status](https://travis-ci.org/yunojuno/django-s3upload.svg?branch=master)](https://travis-ci.org/yunojuno/django-s3upload)\n\nThis project allows direct uploading of a file from the browser to AWS S3 via a file input field rendered by Django.\n\nThe uploaded file's URL is then saveable as the value of that field in the database.\n\nThis avoids the problem of uploads timing out when they go via a web server before being handed off to S3.\n\nFeatures include:\n\n* displaying a progress bar\n* support for ACLs (eg, private uploads)\n* support for encrypted-at-rest S3 buckets\n* mimetype and file extension whitelisting\n* specifying different bucket destinations on a per-field basis\n\n## Installation\n\nInstall with Pip:\n\n```pip install django-s3-upload```\n\n## AWS Setup\n\n### Access Credentials\n\nYou have two options of providing access to AWS resources:\n\n1. Add credentials of an IAM user to your Django settings (see below)\n2. Use the EC2 instance profile and its attached IAM role\n\nWhether you are using an IAM user or a role, there needs to be an IAM policy\nin effect that grants permission to upload to S3:\n\n```json\n\"Statement\": [\n  {\n    \"Effect\": \"Allow\",\n    \"Action\": [\"s3:PutObject\", \"s3:PutObjectAcl\"],\n    \"Resource\": \"arn:aws:s3:::your-bucket-name/*\"\n  }\n]\n```\n\nIf the instance profile is to be used, the IAM role needs to have a\nTrust Relationship configuration applied:\n\n```json\n\"Statement\": [\n\t{\n\t\t\"Effect\": \"Allow\",\n\t\t\"Principal\": {\n\t\t\t\"Service\": \"ec2.amazonaws.com\"\n\t\t},\n\t\t\"Action\": \"sts:AssumeRole\"\n\t}\n]\n```\n\nNote that in order to use the EC2 instance profile, django-s3-upload needs\nto query the EC2 instance metadata using utility functions from the\n[botocore] [] package. You already have `botocore` installed if `boto3`\nis a dependency of your project.\n\n### S3 CORS\n\nSetup a CORS policy on your S3 bucket.\n\n```xml\n<CORSConfiguration>\n    <CORSRule>\n        <AllowedOrigin>http://yourdomain.com:8080</AllowedOrigin>\n        <AllowedMethod>POST</AllowedMethod>\n        <AllowedMethod>PUT</AllowedMethod>\n        <MaxAgeSeconds>3000</MaxAgeSeconds>\n        <AllowedHeader>*</AllowedHeader>\n    </CORSRule>\n</CORSConfiguration>\n```\n\n## Django Setup\n\n### settings.py\n\n```python\nINSTALLED_APPS = [\n    ...\n    's3upload',\n    ...\n]\n\nTEMPLATES = [{\n    ...\n    'APP_DIRS': True,\n    ...\n}]\n\n# AWS\n\n# If these are not defined, the EC2 instance profile and IAM role are used.\n# This requires you to add boto3 (or botocore, which is a dependency of boto3)\n# to your project dependencies.\nAWS_ACCESS_KEY_ID = ''\nAWS_SECRET_ACCESS_KEY = ''\n\nAWS_STORAGE_BUCKET_NAME = ''\n\n# The region of your bucket, more info:\n# http://docs.aws.amazon.com/general/latest/gr/rande.html#s3_region\nS3UPLOAD_REGION = 'us-east-1'\n\n# Destinations, with the following keys:\n#\n# key [required] Where to upload the file to, can be either:\n#     1. '/' = Upload to root with the original filename.\n#     2. 'some/path' = Upload to some/path with the original filename.\n#     3. functionName = Pass a function and create your own path/filename.\n# auth [optional] An ACL function to whether the current Django user can perform this action.\n# allowed [optional] List of allowed MIME types.\n# acl [optional] Give the object another ACL rather than 'public-read'.\n# cache_control [optional] Cache control headers, eg 'max-age=2592000'.\n# content_disposition [optional] Useful for sending files as attachments.\n# bucket [optional] Specify a different bucket for this particular object.\n# server_side_encryption [optional] Encryption headers for buckets that require it.\n\nS3UPLOAD_DESTINATIONS = {\n    'example_destination': {\n        # REQUIRED\n        'key': 'uploads/images',\n\n        # OPTIONAL\n        'auth': lambda u: u.is_staff, # Default allow anybody to upload\n        'allowed_types': ['image/jpeg', 'image/png', 'video/mp4'],  # Default allow all mime types\n        'allowed_extensions': ('.jpg', '.jpeg', '.png'), # Defaults to all extensions\n        'bucket': 'pdf-bucket', # Default is 'AWS_STORAGE_BUCKET_NAME'\n        'acl': 'private', # Defaults to 'public-read'\n        'cache_control': 'max-age=2592000', # Default no cache-control\n        'content_disposition': 'attachment',  # Default no content disposition\n        'content_length_range': (5000, 20000000), # Default allow any size\n        'server_side_encryption': 'AES256', # Default no encryption\n    }\n}\n```\n\n### urls.py\n\n```python\nurlpatterns = [\n    url(r'^s3upload/', include('s3upload.urls')),\n]\n```\n\nRun ```python manage.py collectstatic``` if required.\n\n## Use in Django admin\n\n### models.py\n\n```python\nfrom django.db import models\nfrom s3upload.fields import S3UploadField\n\nclass Example(models.Model):\n    video = S3UploadField(dest='example_destination')\n```\n\n## Use the widget in a custom form\n\n### forms.py\n\n```python\nfrom django import forms\nfrom s3upload.widgets import S3UploadWidget\n\nclass S3UploadForm(forms.Form):\n    images = forms.URLField(widget=S3UploadWidget(dest='example_destination'))\n```\n\n__*Optional.__ You can modify the HTML of the widget by overiding template __s3direct/templates/s3direct-widget.tpl__\n\n### views.py\n\n```python\nfrom django.views.generic import FormView\nfrom .forms import S3UploadForm\n\nclass MyView(FormView):\n    template_name = 'form.html'\n    form_class = S3UploadForm\n```\n\n### templates/form.html\n\n```html\n<html>\n<head>\n    <meta charset=\"utf-8\">\n    <title>s3direct</title>\n    {{ form.media }}\n</head>\n<body>\n    <form action=\"\" method=\"post\">{% csrf_token %}\n        {{ form.as_p }}\n    </form>\n</body>\n</html>\n```\n\n\n## Examples\n\nExamples of both approaches can be found in the examples folder. To run them:\n```shell\n$ git clone git@github.com:yunojuno/django-s3-upload.git\n$ cd django-s3-upload\n\n# Add your AWS keys to your environment\nexport AWS_ACCESS_KEY_ID='...'\nexport AWS_SECRET_ACCESS_KEY='...'\nexport AWS_STORAGE_BUCKET_NAME='...'\nexport S3DIRECT_REGION='...'    # e.g. 'eu-west-1'\n\n$ docker-compose up\n```\n\nVisit ```http://localhost:8000/admin``` to view the admin widget and ```http://localhost:8000/form``` to view the custom form widget.\n\n[botocore]: https://github.com/boto/botocore\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/yunojuno/django-s3-upload", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "django-s3-upload", "package_url": "https://pypi.org/project/django-s3-upload/", "platform": "", "project_url": "https://pypi.org/project/django-s3-upload/", "project_urls": {"Homepage": "https://github.com/yunojuno/django-s3-upload"}, "release_url": "https://pypi.org/project/django-s3-upload/0.2.1/", "requires_dist": ["django (>=1.11)", "boto3"], "requires_python": "", "summary": "Add direct uploads to S3 to file input fields.", "version": "0.2.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            django-s3-upload<br>================<br><br>Compatibility<br>-------------<br><br>This library is now Python3 and Django1.11 and above only.<br><br>Upload files directly to S3 from Django<br>-------------------------------------<br><br>[![Build Status](https://travis-ci.org/yunojuno/django-s3upload.svg?branch=master)](https://travis-ci.org/yunojuno/django-s3upload)<br><br>This project allows direct uploading of a file from the browser to AWS S3 via a file input field rendered by Django.<br><br>The uploaded file's URL is then saveable as the value of that field in the database.<br><br>This avoids the problem of uploads timing out when they go via a web server before being handed off to S3.<br><br>Features include:<br><br>* displaying a progress bar<br>* support for ACLs (eg, private uploads)<br>* support for encrypted-at-rest S3 buckets<br>* mimetype and file extension whitelisting<br>* specifying different bucket destinations on a per-field basis<br><br>## Installation<br><br>Install with Pip:<br><br>```pip install django-s3-upload```<br><br>## AWS Setup<br><br>### Access Credentials<br><br>You have two options of providing access to AWS resources:<br><br>1. Add credentials of an IAM user to your Django settings (see below)<br>2. Use the EC2 instance profile and its attached IAM role<br><br>Whether you are using an IAM user or a role, there needs to be an IAM policy<br>in effect that grants permission to upload to S3:<br><br>```json<br>\"Statement\": [<br>  {<br>    \"Effect\": \"Allow\",<br>    \"Action\": [\"s3:PutObject\", \"s3:PutObjectAcl\"],<br>    \"Resource\": \"arn:aws:s3:::your-bucket-name/*\"<br>  }<br>]<br>```<br><br>If the instance profile is to be used, the IAM role needs to have a<br>Trust Relationship configuration applied:<br><br>```json<br>\"Statement\": [<br>\t{<br>\t\t\"Effect\": \"Allow\",<br>\t\t\"Principal\": {<br>\t\t\t\"Service\": \"ec2.amazonaws.com\"<br>\t\t},<br>\t\t\"Action\": \"sts:AssumeRole\"<br>\t}<br>]<br>```<br><br>Note that in order to use the EC2 instance profile, django-s3-upload needs<br>to query the EC2 instance metadata using utility functions from the<br>[botocore] [] package. You already have `botocore` installed if `boto3`<br>is a dependency of your project.<br><br>### S3 CORS<br><br>Setup a CORS policy on your S3 bucket.<br><br>```xml<br>&lt;CORSConfiguration&gt;<br>    &lt;CORSRule&gt;<br>        &lt;AllowedOrigin&gt;http://yourdomain.com:8080&lt;/AllowedOrigin&gt;<br>        &lt;AllowedMethod&gt;POST&lt;/AllowedMethod&gt;<br>        &lt;AllowedMethod&gt;PUT&lt;/AllowedMethod&gt;<br>        &lt;MaxAgeSeconds&gt;3000&lt;/MaxAgeSeconds&gt;<br>        &lt;AllowedHeader&gt;*&lt;/AllowedHeader&gt;<br>    &lt;/CORSRule&gt;<br>&lt;/CORSConfiguration&gt;<br>```<br><br>## Django Setup<br><br>### settings.py<br><br>```python<br>INSTALLED_APPS = [<br>    ...<br>    's3upload',<br>    ...<br>]<br><br>TEMPLATES = [{<br>    ...<br>    'APP_DIRS': True,<br>    ...<br>}]<br><br># AWS<br><br># If these are not defined, the EC2 instance profile and IAM role are used.<br># This requires you to add boto3 (or botocore, which is a dependency of boto3)<br># to your project dependencies.<br>AWS_ACCESS_KEY_ID = ''<br>AWS_SECRET_ACCESS_KEY = ''<br><br>AWS_STORAGE_BUCKET_NAME = ''<br><br># The region of your bucket, more info:<br># http://docs.aws.amazon.com/general/latest/gr/rande.html#s3_region<br>S3UPLOAD_REGION = 'us-east-1'<br><br># Destinations, with the following keys:<br>#<br># key [required] Where to upload the file to, can be either:<br>#     1. '/' = Upload to root with the original filename.<br>#     2. 'some/path' = Upload to some/path with the original filename.<br>#     3. functionName = Pass a function and create your own path/filename.<br># auth [optional] An ACL function to whether the current Django user can perform this action.<br># allowed [optional] List of allowed MIME types.<br># acl [optional] Give the object another ACL rather than 'public-read'.<br># cache_control [optional] Cache control headers, eg 'max-age=2592000'.<br># content_disposition [optional] Useful for sending files as attachments.<br># bucket [optional] Specify a different bucket for this particular object.<br># server_side_encryption [optional] Encryption headers for buckets that require it.<br><br>S3UPLOAD_DESTINATIONS = {<br>    'example_destination': {<br>        # REQUIRED<br>        'key': 'uploads/images',<br><br>        # OPTIONAL<br>        'auth': lambda u: u.is_staff, # Default allow anybody to upload<br>        'allowed_types': ['image/jpeg', 'image/png', 'video/mp4'],  # Default allow all mime types<br>        'allowed_extensions': ('.jpg', '.jpeg', '.png'), # Defaults to all extensions<br>        'bucket': 'pdf-bucket', # Default is 'AWS_STORAGE_BUCKET_NAME'<br>        'acl': 'private', # Defaults to 'public-read'<br>        'cache_control': 'max-age=2592000', # Default no cache-control<br>        'content_disposition': 'attachment',  # Default no content disposition<br>        'content_length_range': (5000, 20000000), # Default allow any size<br>        'server_side_encryption': 'AES256', # Default no encryption<br>    }<br>}<br>```<br><br>### urls.py<br><br>```python<br>urlpatterns = [<br>    url(r'^s3upload/', include('s3upload.urls')),<br>]<br>```<br><br>Run ```python manage.py collectstatic``` if required.<br><br>## Use in Django admin<br><br>### models.py<br><br>```python<br>from django.db import models<br>from s3upload.fields import S3UploadField<br><br>class Example(models.Model):<br>    video = S3UploadField(dest='example_destination')<br>```<br><br>## Use the widget in a custom form<br><br>### forms.py<br><br>```python<br>from django import forms<br>from s3upload.widgets import S3UploadWidget<br><br>class S3UploadForm(forms.Form):<br>    images = forms.URLField(widget=S3UploadWidget(dest='example_destination'))<br>```<br><br>__*Optional.__ You can modify the HTML of the widget by overiding template __s3direct/templates/s3direct-widget.tpl__<br><br>### views.py<br><br>```python<br>from django.views.generic import FormView<br>from .forms import S3UploadForm<br><br>class MyView(FormView):<br>    template_name = 'form.html'<br>    form_class = S3UploadForm<br>```<br><br>### templates/form.html<br><br>```html<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;meta charset=\"utf-8\"&gt;<br>    &lt;title&gt;s3direct&lt;/title&gt;<br>    {{ form.media }}<br>&lt;/head&gt;<br>&lt;body&gt;<br>    &lt;form action=\"\" method=\"post\"&gt;{% csrf_token %}<br>        {{ form.as_p }}<br>    &lt;/form&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br>```<br><br><br>## Examples<br><br>Examples of both approaches can be found in the examples folder. To run them:<br>```shell<br>$ git clone git@github.com:yunojuno/django-s3-upload.git<br>$ cd django-s3-upload<br><br># Add your AWS keys to your environment<br>export AWS_ACCESS_KEY_ID='...'<br>export AWS_SECRET_ACCESS_KEY='...'<br>export AWS_STORAGE_BUCKET_NAME='...'<br>export S3DIRECT_REGION='...'    # e.g. 'eu-west-1'<br><br>$ docker-compose up<br>```<br><br>Visit ```http://localhost:8000/admin``` to view the admin widget and ```http://localhost:8000/form``` to view the custom form widget.<br><br>[botocore]: https://github.com/boto/botocore<br><br><br>\n          </div>"}, "last_serial": 4221956, "releases": {"0.1.1": [{"comment_text": "", "digests": {"md5": "f538042efd1c3fa424bf7dc15b86d689", "sha256": "854b73589930864c01a5ad059aba921852867f087215413989a70ba6726c21ec"}, "downloads": -1, "filename": "django_s3_upload-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "f538042efd1c3fa424bf7dc15b86d689", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 80574, "upload_time": "2018-02-14T15:40:28", "upload_time_iso_8601": "2018-02-14T15:40:28.139810Z", "url": "https://files.pythonhosted.org/packages/24/7f/041886a2c1e7adec662cab6aad207f4312814dafe958dfd3618e77dc6936/django_s3_upload-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "05b5f6e586caaec134cdf766ccfe7472", "sha256": "1ea6f3c87142e613a7ccb588f64c7579cec3a2297ea8577676302a83ddedbc26"}, "downloads": -1, "filename": "django-s3-upload-0.1.1.tar.gz", "has_sig": false, "md5_digest": "05b5f6e586caaec134cdf766ccfe7472", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 68407, "upload_time": "2018-02-14T15:40:25", "upload_time_iso_8601": "2018-02-14T15:40:25.565193Z", "url": "https://files.pythonhosted.org/packages/0e/b4/98a1d99d14b920eb8b3dc2eb189f8f87dd0d0359e477d07656fc840553a2/django-s3-upload-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "8ee12f7046079e68369f693f38b81191", "sha256": "a17fcb42679410cf6ab89a4e23348aa3b4a3e4b5661280ead9aad6e08b605fb6"}, "downloads": -1, "filename": "django-s3-upload-0.1.2.tar.gz", "has_sig": false, "md5_digest": "8ee12f7046079e68369f693f38b81191", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 69401, "upload_time": "2018-02-16T16:52:43", "upload_time_iso_8601": "2018-02-16T16:52:43.968492Z", "url": "https://files.pythonhosted.org/packages/a3/44/acc6f15a434ad68621b4c4615f833bdc85e0265cc928a769e81b652ec43e/django-s3-upload-0.1.2.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "c4d44d56b6cb99a4ad5bc1d3ee69f973", "sha256": "5d31a41961d271a5df671fd9a347bca67f2ccdcbe109ccb29e815d8927a4027f"}, "downloads": -1, "filename": "django_s3_upload-0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "c4d44d56b6cb99a4ad5bc1d3ee69f973", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 89651, "upload_time": "2018-07-05T15:33:55", "upload_time_iso_8601": "2018-07-05T15:33:55.169228Z", "url": "https://files.pythonhosted.org/packages/b2/89/0d93d07a1df54e73b38968f0e8157eb786b6a032f7178c3414f8514c6518/django_s3_upload-0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b73a1762722b4bbdf08d74b8f14c9832", "sha256": "d366c6b04c757423a6e3205eec509430bd057e01db2ca92f81d73a5000e329cd"}, "downloads": -1, "filename": "django-s3-upload-0.2.tar.gz", "has_sig": false, "md5_digest": "b73a1762722b4bbdf08d74b8f14c9832", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 77323, "upload_time": "2018-07-05T15:33:53", "upload_time_iso_8601": "2018-07-05T15:33:53.318332Z", "url": "https://files.pythonhosted.org/packages/d0/20/88488ce257ec25807e6979da81e11e6a63ea352eee3f4c9af8ef55efeca6/django-s3-upload-0.2.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "a60b9bde2979dc18ff5837bcc071e3b0", "sha256": "2c4f47a849382899b0c09f0f6be2e8b7549fb0cfc40501c25a3d13b0981f4743"}, "downloads": -1, "filename": "django_s3_upload-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "a60b9bde2979dc18ff5837bcc071e3b0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 71052, "upload_time": "2018-08-30T09:47:14", "upload_time_iso_8601": "2018-08-30T09:47:14.915283Z", "url": "https://files.pythonhosted.org/packages/63/cc/94d2529c318e1d4d775c72827d375297da3486f1adb44824404eb40c8c40/django_s3_upload-0.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "08a00a6a5e3e3335be72b171b0a9f036", "sha256": "2dd91f946b103afb4a33ef06c31ca166fe93c0bb60616261f467bbf6004f4d76"}, "downloads": -1, "filename": "django-s3-upload-0.2.1.tar.gz", "has_sig": false, "md5_digest": "08a00a6a5e3e3335be72b171b0a9f036", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 63967, "upload_time": "2018-08-30T09:47:16", "upload_time_iso_8601": "2018-08-30T09:47:16.976341Z", "url": "https://files.pythonhosted.org/packages/38/fa/c59718b5caa20ae856d722b38ecafc5964e3dce928749597a4d648aec33e/django-s3-upload-0.2.1.tar.gz", "yanked": false}], "0.2.dev0": [{"comment_text": "", "digests": {"md5": "9df159f78fef8e056e8e1bea5c88043d", "sha256": "3f9c7d1bd39a9be9b79570bce4b194757cb5d0bb83788b04ebffbd2acfde8063"}, "downloads": -1, "filename": "django_s3_upload-0.2.dev0-py3-none-any.whl", "has_sig": false, "md5_digest": "9df159f78fef8e056e8e1bea5c88043d", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 89660, "upload_time": "2018-07-05T15:13:13", "upload_time_iso_8601": "2018-07-05T15:13:13.614510Z", "url": "https://files.pythonhosted.org/packages/58/34/76ad2d5c3c54d72acf03f4767b42e22e2b178f1180384ff1db9885e92303/django_s3_upload-0.2.dev0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5073b1e8c49a709d9bca40fbd634f8ac", "sha256": "bba918c34594f415ecbac05068c30b5a3a6db8a753827cf5793d9a64358a28b0"}, "downloads": -1, "filename": "django-s3-upload-0.2.dev0.tar.gz", "has_sig": false, "md5_digest": "5073b1e8c49a709d9bca40fbd634f8ac", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 77311, "upload_time": "2018-07-05T15:13:11", "upload_time_iso_8601": "2018-07-05T15:13:11.606894Z", "url": "https://files.pythonhosted.org/packages/02/1c/65c472eea7c9366b2dce1176c4d892708bb63b859f38db998b603d12aa2a/django-s3-upload-0.2.dev0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a60b9bde2979dc18ff5837bcc071e3b0", "sha256": "2c4f47a849382899b0c09f0f6be2e8b7549fb0cfc40501c25a3d13b0981f4743"}, "downloads": -1, "filename": "django_s3_upload-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "a60b9bde2979dc18ff5837bcc071e3b0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 71052, "upload_time": "2018-08-30T09:47:14", "upload_time_iso_8601": "2018-08-30T09:47:14.915283Z", "url": "https://files.pythonhosted.org/packages/63/cc/94d2529c318e1d4d775c72827d375297da3486f1adb44824404eb40c8c40/django_s3_upload-0.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "08a00a6a5e3e3335be72b171b0a9f036", "sha256": "2dd91f946b103afb4a33ef06c31ca166fe93c0bb60616261f467bbf6004f4d76"}, "downloads": -1, "filename": "django-s3-upload-0.2.1.tar.gz", "has_sig": false, "md5_digest": "08a00a6a5e3e3335be72b171b0a9f036", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 63967, "upload_time": "2018-08-30T09:47:16", "upload_time_iso_8601": "2018-08-30T09:47:16.976341Z", "url": "https://files.pythonhosted.org/packages/38/fa/c59718b5caa20ae856d722b38ecafc5964e3dce928749597a4d648aec33e/django-s3-upload-0.2.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:53:50 2020"}