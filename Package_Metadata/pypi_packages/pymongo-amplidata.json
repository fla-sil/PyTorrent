{"info": {"author": "Bret Curtis", "author_email": "bret.curtis@wdc.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Operating System :: MacOS :: MacOS X", "Operating System :: Microsoft :: Windows", "Operating System :: POSIX", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy", "Topic :: Database"], "description": "=======\nPyMongo\n=======\n:Info: See `the mongo site <http://www.mongodb.org>`_ for more information. See `github <http://github.com/mongodb/mongo-python-driver/tree>`_ for the latest source.\n:Author: Mike Dirolf\n:Maintainer: Bernie Hackett <bernie@mongodb.com>\n\nAbout\n=====\n\nThe PyMongo distribution contains tools for interacting with MongoDB\ndatabase from Python.  The ``bson`` package is an implementation of\nthe `BSON format <http://bsonspec.org>`_ for Python. The ``pymongo``\npackage is a native Python driver for MongoDB. The ``gridfs`` package\nis a `gridfs\n<http://www.mongodb.org/display/DOCS/GridFS+Specification>`_\nimplementation on top of ``pymongo``.\n\nPyMongo supports MongoDB 2.6, 3.0, 3.2, 3.4, and 3.6.\n\nSupport / Feedback\n==================\n\nFor issues with, questions about, or feedback for PyMongo, please look into\nour `support channels <http://www.mongodb.org/about/support>`_. Please\ndo not email any of the PyMongo developers directly with issues or\nquestions - you're more likely to get an answer on the `mongodb-user\n<http://groups.google.com/group/mongodb-user>`_ list on Google Groups.\n\nBugs / Feature Requests\n=======================\n\nThink you\u2019ve found a bug? Want to see a new feature in PyMongo? Please open a\ncase in our issue management tool, JIRA:\n\n- `Create an account and login <https://jira.mongodb.org>`_.\n- Navigate to `the PYTHON project <https://jira.mongodb.org/browse/PYTHON>`_.\n- Click **Create Issue** - Please provide as much information as possible about the issue type and how to reproduce it.\n\nBug reports in JIRA for all driver projects (i.e. PYTHON, CSHARP, JAVA) and the\nCore Server (i.e. SERVER) project are **public**.\n\nHow To Ask For Help\n-------------------\n\nPlease include all of the following information when opening an issue:\n\n- Detailed steps to reproduce the problem, including full traceback, if possible.\n- The exact python version used, with patch level::\n\n  $ python -c \"import sys; print(sys.version)\"\n\n- The exact version of PyMongo used, with patch level::\n\n  $ python -c \"import pymongo; print(pymongo.version); print(pymongo.has_c())\"\n\n- The operating system and version (e.g. Windows 7, OSX 10.8, ...)\n- Web framework or asynchronous network library used, if any, with version (e.g.\n  Django 1.7, mod_wsgi 4.3.0, gevent 1.0.1, Tornado 4.0.2, ...)\n\nSecurity Vulnerabilities\n------------------------\n\nIf you\u2019ve identified a security vulnerability in a driver or any other\nMongoDB project, please report it according to the `instructions here\n<http://docs.mongodb.org/manual/tutorial/create-a-vulnerability-report>`_.\n\nInstallation\n============\n\nPyMongo can be installed with `pip <http://pypi.python.org/pypi/pip>`_::\n\n  $ python -m pip install pymongo\n\nOr ``easy_install`` from\n`setuptools <http://pypi.python.org/pypi/setuptools>`_::\n\n  $ python -m easy_install pymongo\n\nYou can also download the project source and do::\n\n  $ python setup.py install\n\nDo **not** install the \"bson\" package. PyMongo comes with its own bson package;\ndoing \"easy_install bson\" installs a third-party package that is incompatible\nwith PyMongo.\n\nDependencies\n============\n\nPyMongo supports CPython 2.6, 2.7, 3.4+, PyPy, and PyPy3.\n\nOptional dependencies:\n\nGSSAPI authentication requires `pykerberos\n<https://pypi.python.org/pypi/pykerberos>`_ on Unix or `WinKerberos\n<https://pypi.python.org/pypi/winkerberos>`_ on Windows. The correct\ndependency can be installed automatically along with PyMongo::\n\n  $ python -m pip install pymongo[gssapi]\n\nSupport for mongodb+srv:// URIs requires `dnspython\n<https://pypi.python.org/pypi/dnspython>`_::\n\n  $ python -m pip install pymongo[srv]\n\nTLS / SSL support may require `ipaddress\n<https://pypi.python.org/pypi/ipaddress>`_ and `certifi\n<https://pypi.python.org/pypi/certifi>`_ or `wincertstore\n<https://pypi.python.org/pypi/wincertstore>`_ depending on the Python\nversion in use. The necessary dependencies can be installed along with\nPyMongo::\n\n  $ python -m pip install pymongo[tls]\n\nYou can install all dependencies automatically with the following\ncommand::\n\n  $ python -m pip install pymongo[gssapi,srv,tls]\n\nOther optional packages:\n\n- `backports.pbkdf2 <https://pypi.python.org/pypi/backports.pbkdf2/>`_,\n  improves authentication performance with SCRAM-SHA-1, the default\n  authentication mechanism for MongoDB 3.0+. It especially improves\n  performance on Python older than 2.7.8, or on Python 3 before Python 3.4.\n- `monotonic <https://pypi.python.org/pypi/monotonic>`_ adds support for\n  a monotonic clock, which improves reliability in environments\n  where clock adjustments are frequent. Not needed in Python 3.3+.\n\n\nAdditional dependencies are:\n\n- (to generate documentation) sphinx_\n- (to run the tests under Python 2.6) unittest2_\n\nExamples\n========\nHere's a basic example (for more see the *examples* section of the docs):\n\n.. code-block:: python\n\n  >>> import pymongo\n  >>> client = pymongo.MongoClient(\"localhost\", 27017)\n  >>> db = client.test\n  >>> db.name\n  u'test'\n  >>> db.my_collection\n  Collection(Database(MongoClient('localhost', 27017), u'test'), u'my_collection')\n  >>> db.my_collection.insert_one({\"x\": 10}).inserted_id\n  ObjectId('4aba15ebe23f6b53b0000000')\n  >>> db.my_collection.insert_one({\"x\": 8}).inserted_id\n  ObjectId('4aba160ee23f6b543e000000')\n  >>> db.my_collection.insert_one({\"x\": 11}).inserted_id\n  ObjectId('4aba160ee23f6b543e000002')\n  >>> db.my_collection.find_one()\n  {u'x': 10, u'_id': ObjectId('4aba15ebe23f6b53b0000000')}\n  >>> for item in db.my_collection.find():\n  ...     print(item[\"x\"])\n  ...\n  10\n  8\n  11\n  >>> db.my_collection.create_index(\"x\")\n  u'x_1'\n  >>> for item in db.my_collection.find().sort(\"x\", pymongo.ASCENDING):\n  ...     print(item[\"x\"])\n  ...\n  8\n  10\n  11\n  >>> [item[\"x\"] for item in db.my_collection.find().limit(2).skip(1)]\n  [8, 11]\n\nDocumentation\n=============\n\nYou will need sphinx_ installed to generate the\ndocumentation. Documentation can be generated by running **python\nsetup.py doc**. Generated documentation can be found in the\n*doc/build/html/* directory.\n\nTesting\n=======\n\nThe easiest way to run the tests is to run **python setup.py test** in\nthe root of the distribution. Note that you will need unittest2_ to\nrun the tests under Python 2.6.\n\nTo verify that PyMongo works with Gevent's monkey-patching::\n\n    $ python green_framework_test.py gevent\n\nOr with Eventlet's::\n\n    $ python green_framework_test.py eventlet\n\n.. _sphinx: http://sphinx.pocoo.org/\n.. _unittest2: https://pypi.python.org/pypi/unittest2", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/amplidata/mongo-python-driver", "keywords": "mongo,mongodb,pymongo,gridfs,bson", "license": "Apache License, Version 2.0", "maintainer": "", "maintainer_email": "", "name": "pymongo-amplidata", "package_url": "https://pypi.org/project/pymongo-amplidata/", "platform": "", "project_url": "https://pypi.org/project/pymongo-amplidata/", "project_urls": {"Homepage": "https://github.com/amplidata/mongo-python-driver"}, "release_url": "https://pypi.org/project/pymongo-amplidata/3.6.0.post1/", "requires_dist": null, "requires_python": "", "summary": "Python driver for MongoDB <http://www.mongodb.org>", "version": "3.6.0.post1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <table>\n<col>\n<col>\n<tbody>\n<tr><th>Info:</th><td>See <a href=\"http://www.mongodb.org\" rel=\"nofollow\">the mongo site</a> for more information. See <a href=\"http://github.com/mongodb/mongo-python-driver/tree\" rel=\"nofollow\">github</a> for the latest source.</td>\n</tr>\n<tr><th>Author:</th>\n<td>Mike Dirolf</td></tr>\n<tr><th>Maintainer:</th><td>Bernie Hackett &lt;<a href=\"mailto:bernie%40mongodb.com\">bernie<span>@</span>mongodb<span>.</span>com</a>&gt;</td>\n</tr>\n</tbody>\n</table>\n<div id=\"about\">\n<h2>About</h2>\n<p>The PyMongo distribution contains tools for interacting with MongoDB\ndatabase from Python.  The <tt>bson</tt> package is an implementation of\nthe <a href=\"http://bsonspec.org\" rel=\"nofollow\">BSON format</a> for Python. The <tt>pymongo</tt>\npackage is a native Python driver for MongoDB. The <tt>gridfs</tt> package\nis a <a href=\"http://www.mongodb.org/display/DOCS/GridFS+Specification\" rel=\"nofollow\">gridfs</a>\nimplementation on top of <tt>pymongo</tt>.</p>\n<p>PyMongo supports MongoDB 2.6, 3.0, 3.2, 3.4, and 3.6.</p>\n</div>\n<div id=\"support-feedback\">\n<h2>Support / Feedback</h2>\n<p>For issues with, questions about, or feedback for PyMongo, please look into\nour <a href=\"http://www.mongodb.org/about/support\" rel=\"nofollow\">support channels</a>. Please\ndo not email any of the PyMongo developers directly with issues or\nquestions - you\u2019re more likely to get an answer on the <a href=\"http://groups.google.com/group/mongodb-user\" rel=\"nofollow\">mongodb-user</a> list on Google Groups.</p>\n</div>\n<div id=\"bugs-feature-requests\">\n<h2>Bugs / Feature Requests</h2>\n<p>Think you\u2019ve found a bug? Want to see a new feature in PyMongo? Please open a\ncase in our issue management tool, JIRA:</p>\n<ul>\n<li><a href=\"https://jira.mongodb.org\" rel=\"nofollow\">Create an account and login</a>.</li>\n<li>Navigate to <a href=\"https://jira.mongodb.org/browse/PYTHON\" rel=\"nofollow\">the PYTHON project</a>.</li>\n<li>Click <strong>Create Issue</strong> - Please provide as much information as possible about the issue type and how to reproduce it.</li>\n</ul>\n<p>Bug reports in JIRA for all driver projects (i.e. PYTHON, CSHARP, JAVA) and the\nCore Server (i.e. SERVER) project are <strong>public</strong>.</p>\n<div id=\"how-to-ask-for-help\">\n<h3>How To Ask For Help</h3>\n<p>Please include all of the following information when opening an issue:</p>\n<ul>\n<li><p>Detailed steps to reproduce the problem, including full traceback, if possible.</p>\n</li>\n<li><p>The exact python version used, with patch level:</p>\n<pre>$ python -c \"import sys; print(sys.version)\"\n</pre>\n</li>\n<li><p>The exact version of PyMongo used, with patch level:</p>\n<pre>$ python -c \"import pymongo; print(pymongo.version); print(pymongo.has_c())\"\n</pre>\n</li>\n<li><p>The operating system and version (e.g. Windows 7, OSX 10.8, \u2026)</p>\n</li>\n<li><p>Web framework or asynchronous network library used, if any, with version (e.g.\nDjango 1.7, mod_wsgi 4.3.0, gevent 1.0.1, Tornado 4.0.2, \u2026)</p>\n</li>\n</ul>\n</div>\n<div id=\"security-vulnerabilities\">\n<h3>Security Vulnerabilities</h3>\n<p>If you\u2019ve identified a security vulnerability in a driver or any other\nMongoDB project, please report it according to the <a href=\"http://docs.mongodb.org/manual/tutorial/create-a-vulnerability-report\" rel=\"nofollow\">instructions here</a>.</p>\n</div>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>PyMongo can be installed with <a href=\"http://pypi.python.org/pypi/pip\" rel=\"nofollow\">pip</a>:</p>\n<pre>$ python -m pip install pymongo\n</pre>\n<p>Or <tt>easy_install</tt> from\n<a href=\"http://pypi.python.org/pypi/setuptools\" rel=\"nofollow\">setuptools</a>:</p>\n<pre>$ python -m easy_install pymongo\n</pre>\n<p>You can also download the project source and do:</p>\n<pre>$ python setup.py install\n</pre>\n<p>Do <strong>not</strong> install the \u201cbson\u201d package. PyMongo comes with its own bson package;\ndoing \u201ceasy_install bson\u201d installs a third-party package that is incompatible\nwith PyMongo.</p>\n</div>\n<div id=\"dependencies\">\n<h2>Dependencies</h2>\n<p>PyMongo supports CPython 2.6, 2.7, 3.4+, PyPy, and PyPy3.</p>\n<p>Optional dependencies:</p>\n<p>GSSAPI authentication requires <a href=\"https://pypi.python.org/pypi/pykerberos\" rel=\"nofollow\">pykerberos</a> on Unix or <a href=\"https://pypi.python.org/pypi/winkerberos\" rel=\"nofollow\">WinKerberos</a> on Windows. The correct\ndependency can be installed automatically along with PyMongo:</p>\n<pre>$ python -m pip install pymongo[gssapi]\n</pre>\n<p>Support for mongodb+srv:// URIs requires <a href=\"https://pypi.python.org/pypi/dnspython\" rel=\"nofollow\">dnspython</a>:</p>\n<pre>$ python -m pip install pymongo[srv]\n</pre>\n<p>TLS / SSL support may require <a href=\"https://pypi.python.org/pypi/ipaddress\" rel=\"nofollow\">ipaddress</a> and <a href=\"https://pypi.python.org/pypi/certifi\" rel=\"nofollow\">certifi</a> or <a href=\"https://pypi.python.org/pypi/wincertstore\" rel=\"nofollow\">wincertstore</a> depending on the Python\nversion in use. The necessary dependencies can be installed along with\nPyMongo:</p>\n<pre>$ python -m pip install pymongo[tls]\n</pre>\n<p>You can install all dependencies automatically with the following\ncommand:</p>\n<pre>$ python -m pip install pymongo[gssapi,srv,tls]\n</pre>\n<p>Other optional packages:</p>\n<ul>\n<li><a href=\"https://pypi.python.org/pypi/backports.pbkdf2/\" rel=\"nofollow\">backports.pbkdf2</a>,\nimproves authentication performance with SCRAM-SHA-1, the default\nauthentication mechanism for MongoDB 3.0+. It especially improves\nperformance on Python older than 2.7.8, or on Python 3 before Python 3.4.</li>\n<li><a href=\"https://pypi.python.org/pypi/monotonic\" rel=\"nofollow\">monotonic</a> adds support for\na monotonic clock, which improves reliability in environments\nwhere clock adjustments are frequent. Not needed in Python 3.3+.</li>\n</ul>\n<p>Additional dependencies are:</p>\n<ul>\n<li>(to generate documentation) <a href=\"http://sphinx.pocoo.org/\" rel=\"nofollow\">sphinx</a></li>\n<li>(to run the tests under Python 2.6) <a href=\"https://pypi.python.org/pypi/unittest2\" rel=\"nofollow\">unittest2</a></li>\n</ul>\n</div>\n<div id=\"examples\">\n<h2>Examples</h2>\n<p>Here\u2019s a basic example (for more see the <em>examples</em> section of the docs):</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">pymongo</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">pymongo</span><span class=\"o\">.</span><span class=\"n\">MongoClient</span><span class=\"p\">(</span><span class=\"s2\">\"localhost\"</span><span class=\"p\">,</span> <span class=\"mi\">27017</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">db</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">test</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">name</span>\n<span class=\"sa\">u</span><span class=\"s1\">'test'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">my_collection</span>\n<span class=\"n\">Collection</span><span class=\"p\">(</span><span class=\"n\">Database</span><span class=\"p\">(</span><span class=\"n\">MongoClient</span><span class=\"p\">(</span><span class=\"s1\">'localhost'</span><span class=\"p\">,</span> <span class=\"mi\">27017</span><span class=\"p\">),</span> <span class=\"sa\">u</span><span class=\"s1\">'test'</span><span class=\"p\">),</span> <span class=\"sa\">u</span><span class=\"s1\">'my_collection'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">my_collection</span><span class=\"o\">.</span><span class=\"n\">insert_one</span><span class=\"p\">({</span><span class=\"s2\">\"x\"</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"p\">})</span><span class=\"o\">.</span><span class=\"n\">inserted_id</span>\n<span class=\"n\">ObjectId</span><span class=\"p\">(</span><span class=\"s1\">'4aba15ebe23f6b53b0000000'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">my_collection</span><span class=\"o\">.</span><span class=\"n\">insert_one</span><span class=\"p\">({</span><span class=\"s2\">\"x\"</span><span class=\"p\">:</span> <span class=\"mi\">8</span><span class=\"p\">})</span><span class=\"o\">.</span><span class=\"n\">inserted_id</span>\n<span class=\"n\">ObjectId</span><span class=\"p\">(</span><span class=\"s1\">'4aba160ee23f6b543e000000'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">my_collection</span><span class=\"o\">.</span><span class=\"n\">insert_one</span><span class=\"p\">({</span><span class=\"s2\">\"x\"</span><span class=\"p\">:</span> <span class=\"mi\">11</span><span class=\"p\">})</span><span class=\"o\">.</span><span class=\"n\">inserted_id</span>\n<span class=\"n\">ObjectId</span><span class=\"p\">(</span><span class=\"s1\">'4aba160ee23f6b543e000002'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">my_collection</span><span class=\"o\">.</span><span class=\"n\">find_one</span><span class=\"p\">()</span>\n<span class=\"p\">{</span><span class=\"sa\">u</span><span class=\"s1\">'x'</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"sa\">u</span><span class=\"s1\">'_id'</span><span class=\"p\">:</span> <span class=\"n\">ObjectId</span><span class=\"p\">(</span><span class=\"s1\">'4aba15ebe23f6b53b0000000'</span><span class=\"p\">)}</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">for</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">my_collection</span><span class=\"o\">.</span><span class=\"n\">find</span><span class=\"p\">():</span>\n<span class=\"o\">...</span>     <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">[</span><span class=\"s2\">\"x\"</span><span class=\"p\">])</span>\n<span class=\"o\">...</span>\n<span class=\"mi\">10</span>\n<span class=\"mi\">8</span>\n<span class=\"mi\">11</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">my_collection</span><span class=\"o\">.</span><span class=\"n\">create_index</span><span class=\"p\">(</span><span class=\"s2\">\"x\"</span><span class=\"p\">)</span>\n<span class=\"sa\">u</span><span class=\"s1\">'x_1'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">for</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">my_collection</span><span class=\"o\">.</span><span class=\"n\">find</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">sort</span><span class=\"p\">(</span><span class=\"s2\">\"x\"</span><span class=\"p\">,</span> <span class=\"n\">pymongo</span><span class=\"o\">.</span><span class=\"n\">ASCENDING</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">[</span><span class=\"s2\">\"x\"</span><span class=\"p\">])</span>\n<span class=\"o\">...</span>\n<span class=\"mi\">8</span>\n<span class=\"mi\">10</span>\n<span class=\"mi\">11</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"p\">[</span><span class=\"n\">item</span><span class=\"p\">[</span><span class=\"s2\">\"x\"</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">my_collection</span><span class=\"o\">.</span><span class=\"n\">find</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">limit</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">skip</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)]</span>\n<span class=\"p\">[</span><span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">]</span>\n</pre>\n</div>\n<div id=\"documentation\">\n<h2>Documentation</h2>\n<p>You will need <a href=\"http://sphinx.pocoo.org/\" rel=\"nofollow\">sphinx</a> installed to generate the\ndocumentation. Documentation can be generated by running <strong>python\nsetup.py doc</strong>. Generated documentation can be found in the\n<em>doc/build/html/</em> directory.</p>\n</div>\n<div id=\"testing\">\n<h2>Testing</h2>\n<p>The easiest way to run the tests is to run <strong>python setup.py test</strong> in\nthe root of the distribution. Note that you will need <a href=\"https://pypi.python.org/pypi/unittest2\" rel=\"nofollow\">unittest2</a> to\nrun the tests under Python 2.6.</p>\n<p>To verify that PyMongo works with Gevent\u2019s monkey-patching:</p>\n<pre>$ python green_framework_test.py gevent\n</pre>\n<p>Or with Eventlet\u2019s:</p>\n<pre>$ python green_framework_test.py eventlet\n</pre>\n</div>\n\n          </div>"}, "last_serial": 3861410, "releases": {"2.8-1": [{"comment_text": "", "digests": {"md5": "e82cb2abeb2c994ebbfe79f1cd6e2e8b", "sha256": "b30b1cb685178427021e97893df7fd7478145b34fbfd67c841c55efeacb483fa"}, "downloads": -1, "filename": "pymongo-amplidata-2.8-1.tar.gz", "has_sig": false, "md5_digest": "e82cb2abeb2c994ebbfe79f1cd6e2e8b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 395306, "upload_time": "2015-02-11T12:11:02", "upload_time_iso_8601": "2015-02-11T12:11:02.046234Z", "url": "https://files.pythonhosted.org/packages/86/41/a4f0fb8efde3aa6663a8d7f8f609085994ffaa7f69f8b68bec6cadae94d7/pymongo-amplidata-2.8-1.tar.gz", "yanked": false}], "2.8-2": [{"comment_text": "", "digests": {"md5": "bd6da40ae22ea0df37b6afef8f0420ed", "sha256": "bffd604628535b2a5ed4263dfb690f704170cdb5c1873a9a90e79590584c079a"}, "downloads": -1, "filename": "pymongo-amplidata-2.8-2.tar.gz", "has_sig": false, "md5_digest": "bd6da40ae22ea0df37b6afef8f0420ed", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 395513, "upload_time": "2015-02-13T11:36:04", "upload_time_iso_8601": "2015-02-13T11:36:04.764786Z", "url": "https://files.pythonhosted.org/packages/76/32/a1c0ba0732c1c4ad6cc30bee8e79cba05bdc7b44616ba9418464c6088783/pymongo-amplidata-2.8-2.tar.gz", "yanked": false}], "3.6.0.post1": [{"comment_text": "", "digests": {"md5": "b718420743cd94e39f57b92b66331e51", "sha256": "bfc1588e9c8730ce68cf95d47987dc1cfd17acb5c6c22ce01d3c102d29d15cbe"}, "downloads": -1, "filename": "pymongo-amplidata-3.6.0.post1.tar.gz", "has_sig": false, "md5_digest": "b718420743cd94e39f57b92b66331e51", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 584244, "upload_time": "2018-05-14T15:46:22", "upload_time_iso_8601": "2018-05-14T15:46:22.168180Z", "url": "https://files.pythonhosted.org/packages/db/df/678a6e25ef941a8f8c496aa51bf0f9892432332df008df2aab2aff08a15a/pymongo-amplidata-3.6.0.post1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b718420743cd94e39f57b92b66331e51", "sha256": "bfc1588e9c8730ce68cf95d47987dc1cfd17acb5c6c22ce01d3c102d29d15cbe"}, "downloads": -1, "filename": "pymongo-amplidata-3.6.0.post1.tar.gz", "has_sig": false, "md5_digest": "b718420743cd94e39f57b92b66331e51", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 584244, "upload_time": "2018-05-14T15:46:22", "upload_time_iso_8601": "2018-05-14T15:46:22.168180Z", "url": "https://files.pythonhosted.org/packages/db/df/678a6e25ef941a8f8c496aa51bf0f9892432332df008df2aab2aff08a15a/pymongo-amplidata-3.6.0.post1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:01:54 2020"}