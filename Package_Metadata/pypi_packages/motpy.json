{"info": {"author": "Wiktor Muron", "author_email": "wiktormuron@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "# motpy - simple multi object tracking library\n\nProject is meant to provide a simple yet powerful baseline for multiple object tracking without the hassle of writing the obvious algorithm stack yourself.\n\n![2D tracking preview](assets/mot16_challange.gif)\n\n*video source: https://motchallenge.net/data/MOT16/ - sequence 11*\n\n## Features:\n\n- tracking by detection paradigm\n- IOU + (optional) feature similarity matching strategy\n- Kalman filter used to model object trackers\n- each object is modeled as a center point (n-dimensional) and its size (n-dimensional); e.g. 2D position with width and height would be the most popular use case for bounding boxes tracking\n- seperately configurable system order for object position and size (currently 0th, 1st and 2nd order systems are allowed)\n- quite fast, more than realtime performance even on Raspberry Pi\n\n## Installation:\n\n### Latest release:\n\n```bash\npip install motpy\n```\n\n### Develop:\n```bash\ngit clone https://github.com/wmuron/motpy\ncd motpy \nmake install-develop # to install editable version of library\nmake test # to run all tests\n```\n\n## Demo\n\n### 2D tracking\n\nRun demo example of tracking N objects in 2D space. In the ideal world it will show a bunch of colorful objects moving on a grey canvas in various directions, sometimes overlapping, sometimes not. Each object is detected from time to time (green box) and once it's being tracked by motpy, its track box is drawn in red with an ID above.\n\n```\nmake demo\n```\n\n![2D tracking preview](assets/2d_multi_object_tracking.gif)\n\n### MOT16 challange tracking\n\n1. Download MOT16 dataset from `https://motchallenge.net/data/MOT16/` and extract to `~Downloads/MOT16` directory,\n2. Type the command: \n   ```bash\n   python examples/mot16_challange.py --dataset_root=~/Downloads/MOT16 --seq_id=11\n   ```\n   This will run a simplified example where a tracker processes artificially corrupted ground-truth bounding boxes from sequence 11; you can preview the expected results in the beginning of the README file.\n\n### Face tracking on webcam\n\nRun the following command to start tracking your own face.\n```bash\npython examples/webcam_face_tracking.py\n```\n\n## Basic usage\n\nA minimal tracking example can be found below:\n\n```python\nimport numpy as np\n\nfrom motpy import Detection, MultiObjectTracker\n\n# create a simple bounding box with format of [xmin, ymin, xmax, ymax]\nobject_box = np.array([1, 1, 10, 10])\n\n# create a multi object tracker with a specified step time of 100ms\ntracker = MultiObjectTracker(dt=0.1)\n\nfor step in range(10):\n    # let's simulate object movement by 1 unit (e.g. pixel)\n    object_box += 1\n\n    # update the state of the multi-object-tracker tracker\n    # with the list of bounding boxes\n    tracker.step(detections=[Detection(box=object_box)])\n\n    # retrieve the active tracks from the tracker (you can customize\n    # the hyperparameters of tracks filtering by passing extra arguments)\n    tracks = tracker.active_tracks()\n\n    print('MOT tracker tracks %d objects' % len(tracks))\n    print('first track box: %s' % str(tracks[0].box))\n\n```\n\n## Customization\n\nTo adapt the underlying motion model used to keep each object, you can pass a dictionary `model_spec` to `MultiObjectTracker`, which will be used to initialize each object tracker at its creation time. The exact parameters can be found in definition of `motpy.model.Model` class. \nSee the example below, where I've adapted the motion model to better fit the typical motion of face in the laptop camera and decent face detector.\n\n```python\nmodel_spec = {\n        'order_pos': 1, 'dim_pos': 2, # position is a center in 2D space; under constant velocity model\n        'order_size': 0, 'dim_size': 2, # bounding box is 2 dimensional; under constant velocity model\n        'q_var_pos': 1000., # process noise\n        'r_var_pos': 0.1 # measurement noise\n    }\n\ntracker = MultiObjectTracker(dt=1 / 10, model_spec=model_spec)\n```\n\nThe simplification used here is that the object position and size can be treated and modeled independently; hence you can use even 2D bounding boxes in 3D space.\n\nFeel free to tune the parameter of Q and R matrix builders to better fit your use case.\n\n## Tested platforms\n- Linux (Ubuntu)\n- macOS (Catalina)\n- Raspberry Pi (4)\n\n## Things to do\n\n- [x] Initial version\n- [ ] Documentation\n- [ ] Performance optimization\n- [ ] Multiple object classes support\n\n## References, papers, ideas and acknowledgements\n- https://github.com/rlabbe/Kalman-and-Bayesian-Filters-in-Python/\n- http://elvera.nue.tu-berlin.de/files/1517Bochinski2017.pdf\n- https://arxiv.org/abs/1602.00763\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://github.com/wmuron/motpy/releases/tag/v0.0.7-alpha", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/wmuron/motpy.git", "keywords": "multi-object-tracking,object-tracking,kalman-filter", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "motpy", "package_url": "https://pypi.org/project/motpy/", "platform": "", "project_url": "https://pypi.org/project/motpy/", "project_urls": {"Download": "https://github.com/wmuron/motpy/releases/tag/v0.0.7-alpha", "Homepage": "https://github.com/wmuron/motpy.git"}, "release_url": "https://pypi.org/project/motpy/0.0.8/", "requires_dist": ["numpy", "scipy", "filterpy", "loguru"], "requires_python": ">3.6", "summary": "Library for track-by-detection multi object tracking implemented in python", "version": "0.0.8", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>motpy - simple multi object tracking library</h1>\n<p>Project is meant to provide a simple yet powerful baseline for multiple object tracking without the hassle of writing the obvious algorithm stack yourself.</p>\n<p><img alt=\"2D tracking preview\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/46a5eb4299c4272778d9310e366f6ff1abd92687/6173736574732f6d6f7431365f6368616c6c616e67652e676966\"></p>\n<p><em>video source: <a href=\"https://motchallenge.net/data/MOT16/\" rel=\"nofollow\">https://motchallenge.net/data/MOT16/</a> - sequence 11</em></p>\n<h2>Features:</h2>\n<ul>\n<li>tracking by detection paradigm</li>\n<li>IOU + (optional) feature similarity matching strategy</li>\n<li>Kalman filter used to model object trackers</li>\n<li>each object is modeled as a center point (n-dimensional) and its size (n-dimensional); e.g. 2D position with width and height would be the most popular use case for bounding boxes tracking</li>\n<li>seperately configurable system order for object position and size (currently 0th, 1st and 2nd order systems are allowed)</li>\n<li>quite fast, more than realtime performance even on Raspberry Pi</li>\n</ul>\n<h2>Installation:</h2>\n<h3>Latest release:</h3>\n<pre>pip install motpy\n</pre>\n<h3>Develop:</h3>\n<pre>git clone https://github.com/wmuron/motpy\n<span class=\"nb\">cd</span> motpy \nmake install-develop <span class=\"c1\"># to install editable version of library</span>\nmake <span class=\"nb\">test</span> <span class=\"c1\"># to run all tests</span>\n</pre>\n<h2>Demo</h2>\n<h3>2D tracking</h3>\n<p>Run demo example of tracking N objects in 2D space. In the ideal world it will show a bunch of colorful objects moving on a grey canvas in various directions, sometimes overlapping, sometimes not. Each object is detected from time to time (green box) and once it's being tracked by motpy, its track box is drawn in red with an ID above.</p>\n<pre><code>make demo\n</code></pre>\n<p><img alt=\"2D tracking preview\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/354f0d995fe0494690cdd2a5e482bf0d480f07d0/6173736574732f32645f6d756c74695f6f626a6563745f747261636b696e672e676966\"></p>\n<h3>MOT16 challange tracking</h3>\n<ol>\n<li>Download MOT16 dataset from <code>https://motchallenge.net/data/MOT16/</code> and extract to <code>~Downloads/MOT16</code> directory,</li>\n<li>Type the command:\n<pre>python examples/mot16_challange.py --dataset_root<span class=\"o\">=</span>~/Downloads/MOT16 --seq_id<span class=\"o\">=</span><span class=\"m\">11</span>\n</pre>\nThis will run a simplified example where a tracker processes artificially corrupted ground-truth bounding boxes from sequence 11; you can preview the expected results in the beginning of the README file.</li>\n</ol>\n<h3>Face tracking on webcam</h3>\n<p>Run the following command to start tracking your own face.</p>\n<pre>python examples/webcam_face_tracking.py\n</pre>\n<h2>Basic usage</h2>\n<p>A minimal tracking example can be found below:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">motpy</span> <span class=\"kn\">import</span> <span class=\"n\">Detection</span><span class=\"p\">,</span> <span class=\"n\">MultiObjectTracker</span>\n\n<span class=\"c1\"># create a simple bounding box with format of [xmin, ymin, xmax, ymax]</span>\n<span class=\"n\">object_box</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">])</span>\n\n<span class=\"c1\"># create a multi object tracker with a specified step time of 100ms</span>\n<span class=\"n\">tracker</span> <span class=\"o\">=</span> <span class=\"n\">MultiObjectTracker</span><span class=\"p\">(</span><span class=\"n\">dt</span><span class=\"o\">=</span><span class=\"mf\">0.1</span><span class=\"p\">)</span>\n\n<span class=\"k\">for</span> <span class=\"n\">step</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">):</span>\n    <span class=\"c1\"># let's simulate object movement by 1 unit (e.g. pixel)</span>\n    <span class=\"n\">object_box</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n\n    <span class=\"c1\"># update the state of the multi-object-tracker tracker</span>\n    <span class=\"c1\"># with the list of bounding boxes</span>\n    <span class=\"n\">tracker</span><span class=\"o\">.</span><span class=\"n\">step</span><span class=\"p\">(</span><span class=\"n\">detections</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">Detection</span><span class=\"p\">(</span><span class=\"n\">box</span><span class=\"o\">=</span><span class=\"n\">object_box</span><span class=\"p\">)])</span>\n\n    <span class=\"c1\"># retrieve the active tracks from the tracker (you can customize</span>\n    <span class=\"c1\"># the hyperparameters of tracks filtering by passing extra arguments)</span>\n    <span class=\"n\">tracks</span> <span class=\"o\">=</span> <span class=\"n\">tracker</span><span class=\"o\">.</span><span class=\"n\">active_tracks</span><span class=\"p\">()</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'MOT tracker tracks </span><span class=\"si\">%d</span><span class=\"s1\"> objects'</span> <span class=\"o\">%</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">tracks</span><span class=\"p\">))</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'first track box: </span><span class=\"si\">%s</span><span class=\"s1\">'</span> <span class=\"o\">%</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">tracks</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">box</span><span class=\"p\">))</span>\n</pre>\n<h2>Customization</h2>\n<p>To adapt the underlying motion model used to keep each object, you can pass a dictionary <code>model_spec</code> to <code>MultiObjectTracker</code>, which will be used to initialize each object tracker at its creation time. The exact parameters can be found in definition of <code>motpy.model.Model</code> class.\nSee the example below, where I've adapted the motion model to better fit the typical motion of face in the laptop camera and decent face detector.</p>\n<pre><span class=\"n\">model_spec</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'order_pos'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'dim_pos'</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"c1\"># position is a center in 2D space; under constant velocity model</span>\n        <span class=\"s1\">'order_size'</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s1\">'dim_size'</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"c1\"># bounding box is 2 dimensional; under constant velocity model</span>\n        <span class=\"s1\">'q_var_pos'</span><span class=\"p\">:</span> <span class=\"mf\">1000.</span><span class=\"p\">,</span> <span class=\"c1\"># process noise</span>\n        <span class=\"s1\">'r_var_pos'</span><span class=\"p\">:</span> <span class=\"mf\">0.1</span> <span class=\"c1\"># measurement noise</span>\n    <span class=\"p\">}</span>\n\n<span class=\"n\">tracker</span> <span class=\"o\">=</span> <span class=\"n\">MultiObjectTracker</span><span class=\"p\">(</span><span class=\"n\">dt</span><span class=\"o\">=</span><span class=\"mi\">1</span> <span class=\"o\">/</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">model_spec</span><span class=\"o\">=</span><span class=\"n\">model_spec</span><span class=\"p\">)</span>\n</pre>\n<p>The simplification used here is that the object position and size can be treated and modeled independently; hence you can use even 2D bounding boxes in 3D space.</p>\n<p>Feel free to tune the parameter of Q and R matrix builders to better fit your use case.</p>\n<h2>Tested platforms</h2>\n<ul>\n<li>Linux (Ubuntu)</li>\n<li>macOS (Catalina)</li>\n<li>Raspberry Pi (4)</li>\n</ul>\n<h2>Things to do</h2>\n<ul>\n<li>[x] Initial version</li>\n<li>[ ] Documentation</li>\n<li>[ ] Performance optimization</li>\n<li>[ ] Multiple object classes support</li>\n</ul>\n<h2>References, papers, ideas and acknowledgements</h2>\n<ul>\n<li><a href=\"https://github.com/rlabbe/Kalman-and-Bayesian-Filters-in-Python/\" rel=\"nofollow\">https://github.com/rlabbe/Kalman-and-Bayesian-Filters-in-Python/</a></li>\n<li><a href=\"http://elvera.nue.tu-berlin.de/files/1517Bochinski2017.pdf\" rel=\"nofollow\">http://elvera.nue.tu-berlin.de/files/1517Bochinski2017.pdf</a></li>\n<li><a href=\"https://arxiv.org/abs/1602.00763\" rel=\"nofollow\">https://arxiv.org/abs/1602.00763</a></li>\n</ul>\n\n          </div>"}, "last_serial": 6931933, "releases": {"0.0.6": [{"comment_text": "", "digests": {"md5": "ed85195a7d90dc305b999b599a373eb3", "sha256": "bb61b3eb6d64fa73076a4ebd2ec5551bb4b33269aa3195256c5db6d6b4f5e5a7"}, "downloads": -1, "filename": "motpy-0.0.6-py3-none-any.whl", "has_sig": false, "md5_digest": "ed85195a7d90dc305b999b599a373eb3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">3.6", "size": 10815, "upload_time": "2020-01-08T00:42:51", "upload_time_iso_8601": "2020-01-08T00:42:51.209150Z", "url": "https://files.pythonhosted.org/packages/90/34/3cc592e1d085bbc47951bc6a85bb0b1f1768def425b7a4a8b7e280b0ae06/motpy-0.0.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "58482aebfe1b5b8140d8b58153018bb6", "sha256": "687d2ed76cac3514fd6d6a399f64d0a0150044fb225d71b53d8fdef539988c0e"}, "downloads": -1, "filename": "motpy-0.0.6.tar.gz", "has_sig": false, "md5_digest": "58482aebfe1b5b8140d8b58153018bb6", "packagetype": "sdist", "python_version": "source", "requires_python": ">3.6", "size": 9400, "upload_time": "2020-01-08T00:42:52", "upload_time_iso_8601": "2020-01-08T00:42:52.858522Z", "url": "https://files.pythonhosted.org/packages/93/30/da4b52afe6bd384988f88df241ad3bc8e9c7a947a2278b0f664dbfe5a7ef/motpy-0.0.6.tar.gz", "yanked": false}], "0.0.7": [{"comment_text": "", "digests": {"md5": "2b6f13e8c13ebb8cd8eaed10923fabb8", "sha256": "2744dc3bb22047ba27ae82ab8f92b3b7a54fe4f05f1545c3dc1f52f5a4f220f9"}, "downloads": -1, "filename": "motpy-0.0.7-py3-none-any.whl", "has_sig": false, "md5_digest": "2b6f13e8c13ebb8cd8eaed10923fabb8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">3.6", "size": 10985, "upload_time": "2020-02-25T22:48:40", "upload_time_iso_8601": "2020-02-25T22:48:40.903067Z", "url": "https://files.pythonhosted.org/packages/66/de/84a8ace97a9fbe94dfee76ac85f4ec7dda70064633a6d3fdb8311635b748/motpy-0.0.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "26be99d75321accbba04d6e3c5304809", "sha256": "dd9f85e244bcfa00dd8b2bb261c2a5ab5cee5b9fbf52508f40b3181518198431"}, "downloads": -1, "filename": "motpy-0.0.7.tar.gz", "has_sig": false, "md5_digest": "26be99d75321accbba04d6e3c5304809", "packagetype": "sdist", "python_version": "source", "requires_python": ">3.6", "size": 9600, "upload_time": "2020-02-25T22:48:42", "upload_time_iso_8601": "2020-02-25T22:48:42.289634Z", "url": "https://files.pythonhosted.org/packages/52/fb/d8b2468343470d6022d570c0064f9085744f6dbc72c08a79dcee0cc28ab3/motpy-0.0.7.tar.gz", "yanked": false}], "0.0.8": [{"comment_text": "", "digests": {"md5": "d3a7c401310d2e7ba6794c2f710207f3", "sha256": "e8a82de94c6c97a934af0a8348ff16277c9016a690148022be1e5706dc9764bf"}, "downloads": -1, "filename": "motpy-0.0.8-py3-none-any.whl", "has_sig": false, "md5_digest": "d3a7c401310d2e7ba6794c2f710207f3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">3.6", "size": 13132, "upload_time": "2020-04-01T23:13:20", "upload_time_iso_8601": "2020-04-01T23:13:20.195996Z", "url": "https://files.pythonhosted.org/packages/8f/e8/433ca4d350ae213cbd151070f9d6f63c9860283d3b6aecf62afcb162ea6f/motpy-0.0.8-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a310be9cbf8ad0ad956c31f246b56e83", "sha256": "4bf48bfd8be34bee7b6baf67e3505fe7546fd2efed40d6f6974485b03a975e81"}, "downloads": -1, "filename": "motpy-0.0.8.tar.gz", "has_sig": false, "md5_digest": "a310be9cbf8ad0ad956c31f246b56e83", "packagetype": "sdist", "python_version": "source", "requires_python": ">3.6", "size": 12843, "upload_time": "2020-04-01T23:13:21", "upload_time_iso_8601": "2020-04-01T23:13:21.502709Z", "url": "https://files.pythonhosted.org/packages/03/e6/f4c54e9ca81191ec33ae4f8fec9f243021d9a6c83e90acf8d5b354ba3706/motpy-0.0.8.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d3a7c401310d2e7ba6794c2f710207f3", "sha256": "e8a82de94c6c97a934af0a8348ff16277c9016a690148022be1e5706dc9764bf"}, "downloads": -1, "filename": "motpy-0.0.8-py3-none-any.whl", "has_sig": false, "md5_digest": "d3a7c401310d2e7ba6794c2f710207f3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">3.6", "size": 13132, "upload_time": "2020-04-01T23:13:20", "upload_time_iso_8601": "2020-04-01T23:13:20.195996Z", "url": "https://files.pythonhosted.org/packages/8f/e8/433ca4d350ae213cbd151070f9d6f63c9860283d3b6aecf62afcb162ea6f/motpy-0.0.8-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a310be9cbf8ad0ad956c31f246b56e83", "sha256": "4bf48bfd8be34bee7b6baf67e3505fe7546fd2efed40d6f6974485b03a975e81"}, "downloads": -1, "filename": "motpy-0.0.8.tar.gz", "has_sig": false, "md5_digest": "a310be9cbf8ad0ad956c31f246b56e83", "packagetype": "sdist", "python_version": "source", "requires_python": ">3.6", "size": 12843, "upload_time": "2020-04-01T23:13:21", "upload_time_iso_8601": "2020-04-01T23:13:21.502709Z", "url": "https://files.pythonhosted.org/packages/03/e6/f4c54e9ca81191ec33ae4f8fec9f243021d9a6c83e90acf8d5b354ba3706/motpy-0.0.8.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:51:32 2020"}