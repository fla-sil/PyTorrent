{"info": {"author": "Rushil Mallarapu", "author_email": "rushil.mallarapu@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3.7", "Topic :: Software Development :: Build Tools"], "description": "# Odachi\n\nAdvanced deep learning-based organic retrosynthesis engine.\n\n# Overview\n\nThe Odachi Retrosynthesis Engine provides a platform for predicting organic retrosynthetic disconnections\nusing a graph convolutional network. It also exposes two custom Tensorflow layers for performing spectral\ngraph convolutions. The engine powers the [retrosynthesis.com](retrosynthesis.com) website, which provides a clean and intuitive interface to run retrosynthetic predictions.\n\n## Requirements\n\nThe Odachi Engine is built in Python 3. It has only three requirements to run:\n\n    - TensorFlow 2.x\n    - Scikit-Learn\n    - Numpy\n\n# Reference\n\n## Installation\n\nTo download dgaintel, simply use Pypi via pip.\n```sh\n$ pip install odachi\n```\n\nAlternatively, you could install from source.\n```sh\n$ git clone https://github.com/sudo-rushil/odachi\n$ cd odachi\n$ python setup.py install\n```\n\nVerify your installation by running\n```Python\n>>> import odachi\n>>> odachi.engine.model.Odachi()\n'<odachi.engine.model.Odachi object at 0x7f9ec80b3bd0>''\n```\n\n# Examples\n\n### Predict bond disconnection\nThis is simple way of finding a retrosynthetic disconnection in a molecule. The input to the model is the SMILES string of the molecule (Ex. Aspirin).\n\n```Python\nfrom odachi.engine.model import Odachi\n\nodachi = Odachi() # instantiates engine and load up TensorFlow model in backend.\n\nresults = odachi('O=C(C)Oc1ccccc1C(=O)O') # call prediction function on an input molecule.\nprint(results)\n```\n> {'bonds': [2], 'smiles': 'O=C(C)Oc1ccccc1C(=O)O', 'svg':...}\n\n\n# Documentation\nThe Odachi package exposes four main objects: the GraphConv and ConvEmbed TensorFlow layers for spectral graph convolutions with knockdown, the Conv object for representing molecules as graphs, and the Odachi object for top-level predictions.\n\n## Layers\n\n### GraphConv\n\n```Python\ngraph_conv = odachi.engine.layers.GraphConv(n,\n                                            num_feat = 41,\n                                            num_atoms = 130,\n                                            activation = tf.nn.elu,\n                                            knockdown = 0.1,\n                                            BATCH_SIZE = 1)\n```\nLayer for performing single-phase spectral graph convolutions. Inherits from `tensorflow.keras.layers.Layer` and has access to all associated methods.\n\n#### Parameters\n\n- n - Layer index for labeling purpose.\n- num_feat - Number of features for each node in graph.\n- num_atoms - Maximum number of nodes over all graphs.\n- activation - Activation function for layer.\n- knockdown - Convolutional knockdown threshold for spectral regularization.\n- BATCH_SIZE - Number of batches in input\n\n### Call\n\n```Python\nA, X = graph_conv([A, X])\n```\n\n#### Parameters\n\n- A - Adjacency matrix of graph. Has dimensions (BATCH_SIZE, num_atoms, num_atoms).\n- X - Features matrix of graph. Has dimensions (BATCH_SIZE, num_atoms, num_feat).\n\n#### Returns\n\n- A - Adjacency matrix of graph. Unchanged from input.\n- X - Convolved features matrix of graph.\n\n### ConvEmbed\n\n```Python\nconv_embed = odachi.engine.layers.ConvEmbed(num_feat = 41,\n                                            num_atoms = 130,\n                                            depth = 10,\n                                            knock = 0.2,\n                                            BATCH_SIZE = 1)\n```\nModel object for performing stacked graph convolutions with the number of features staying constant across layers. Inherits from `tensorflow.keras.Model`.\n\n#### Parameters\n\n- num_feat - Number of features for each node in graph.\n- num_atoms - Maximum number of nodes over all graphs.\n- depth - Number of stacked convolutional layers.\n- knock - Convolutional knockdown threshold.\n- BATCH_SIZE - Number of batches in input.\n\n### Call\n\n```Python\nX = conv_embed([A, X])\n```\n\n#### Parameters\n\n- A - Initial adjacency matrix of graph. Has dimensions (BATCH_SIZE, num_atoms, num_atoms).\n- X - Initial features matrix of graph. Has dimensions (BATCH_SIZE, num_atoms, num_feat).\n\n#### Returns\n\n- X - Fully convolved features matrix of graph.\n\n## Molecular Graph Representation\n\n### Conv\n```Python\nconv = odachi.data.conv.Conv(smiles)\n```\nConvolutional molecule (Conv) object for storing and representing molecules as featurized graphs upon which graph convolutional methods can be applied.\n\n#### Parameters\n\n- smiles - SMILES string representing the molecule to be stored as a featurized graph.\n\n#### Attributes\n\n- smiles - SMILES string of the molecule stored in the object.\n- num_atoms - Number of atoms in the stored molecule.\n- num_feat - Number of features per each atom (default 41).\n- adj_matrix - Adjacency matrix of molecular graph. Padded up to 130 nodes by default.\n- atom_features - Features matrix of molecular graph. Padded up to 130 nodes by default.\n\n\n## Engine\n\n### Odachi\n\n```Python\nodachi = odachi.engine.models.Odachi(knock = 0.0)\n```\nEngine implementation that wraps all three phases of the retrosynthetic prediction process\nto allow for predictions to be made and streamed to the [retrosynthesis.com](retrosynthesis.com) website.\n\n#### Parameters\n\n- knock - Convolutional knockdown threshold for loading saved models.\n\n### Call\n\n```Python\nresult_dict = odachi(smiles,\n                     clusters = 2,\n                     version = 9)\n```\n\n#### Parameters\n\n- smiles - SMILES string of the query target molecule.\n- clusters - number of synthons to cluster the target molecule into.\n- version - Version edition of the convolutional embedding to use for prediction. Latest version is 9.\n\n#### Returns\n\n- result_dict - Dictionary containing prediction data.\n    - smiles - Original smiles string of target molecule.\n    - bonds - List of bonds which are predicted to be disconnected.\n    - svg - Raw SVG for rendering the predicted retrosynthetic disconnection.\n    - time - Total prediction runtime.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://github.com/sudo-rushil/odachi/archive/v1.0.1.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/sudo-rushil/odachi", "keywords": "Chemistry,Organic Chemistry,Synthesis,Retrosynthesis,Deep Learning,AI,Graph,Convolution,Graph Convolution,CNN", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "odachi", "package_url": "https://pypi.org/project/odachi/", "platform": "", "project_url": "https://pypi.org/project/odachi/", "project_urls": {"Download": "https://github.com/sudo-rushil/odachi/archive/v1.0.1.tar.gz", "Homepage": "https://github.com/sudo-rushil/odachi"}, "release_url": "https://pypi.org/project/odachi/1.0.1/", "requires_dist": null, "requires_python": "", "summary": "Advanced deep learning-based organic retrosynthesis engine", "version": "1.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Odachi</h1>\n<p>Advanced deep learning-based organic retrosynthesis engine.</p>\n<h1>Overview</h1>\n<p>The Odachi Retrosynthesis Engine provides a platform for predicting organic retrosynthetic disconnections\nusing a graph convolutional network. It also exposes two custom Tensorflow layers for performing spectral\ngraph convolutions. The engine powers the <a href=\"retrosynthesis.com\" rel=\"nofollow\">retrosynthesis.com</a> website, which provides a clean and intuitive interface to run retrosynthetic predictions.</p>\n<h2>Requirements</h2>\n<p>The Odachi Engine is built in Python 3. It has only three requirements to run:</p>\n<pre><code>- TensorFlow 2.x\n- Scikit-Learn\n- Numpy\n</code></pre>\n<h1>Reference</h1>\n<h2>Installation</h2>\n<p>To download dgaintel, simply use Pypi via pip.</p>\n<pre>$ pip install odachi\n</pre>\n<p>Alternatively, you could install from source.</p>\n<pre>$ git clone https://github.com/sudo-rushil/odachi\n$ <span class=\"nb\">cd</span> odachi\n$ python setup.py install\n</pre>\n<p>Verify your installation by running</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">odachi</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">odachi</span><span class=\"o\">.</span><span class=\"n\">engine</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">Odachi</span><span class=\"p\">()</span>\n<span class=\"s1\">'&lt;odachi.engine.model.Odachi object at 0x7f9ec80b3bd0&gt;''</span>\n</pre>\n<h1>Examples</h1>\n<h3>Predict bond disconnection</h3>\n<p>This is simple way of finding a retrosynthetic disconnection in a molecule. The input to the model is the SMILES string of the molecule (Ex. Aspirin).</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">odachi.engine.model</span> <span class=\"kn\">import</span> <span class=\"n\">Odachi</span>\n\n<span class=\"n\">odachi</span> <span class=\"o\">=</span> <span class=\"n\">Odachi</span><span class=\"p\">()</span> <span class=\"c1\"># instantiates engine and load up TensorFlow model in backend.</span>\n\n<span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"n\">odachi</span><span class=\"p\">(</span><span class=\"s1\">'O=C(C)Oc1ccccc1C(=O)O'</span><span class=\"p\">)</span> <span class=\"c1\"># call prediction function on an input molecule.</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">results</span><span class=\"p\">)</span>\n</pre>\n<blockquote>\n<p>{'bonds': [2], 'smiles': 'O=C(C)Oc1ccccc1C(=O)O', 'svg':...}</p>\n</blockquote>\n<h1>Documentation</h1>\n<p>The Odachi package exposes four main objects: the GraphConv and ConvEmbed TensorFlow layers for spectral graph convolutions with knockdown, the Conv object for representing molecules as graphs, and the Odachi object for top-level predictions.</p>\n<h2>Layers</h2>\n<h3>GraphConv</h3>\n<pre><span class=\"n\">graph_conv</span> <span class=\"o\">=</span> <span class=\"n\">odachi</span><span class=\"o\">.</span><span class=\"n\">engine</span><span class=\"o\">.</span><span class=\"n\">layers</span><span class=\"o\">.</span><span class=\"n\">GraphConv</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span>\n                                            <span class=\"n\">num_feat</span> <span class=\"o\">=</span> <span class=\"mi\">41</span><span class=\"p\">,</span>\n                                            <span class=\"n\">num_atoms</span> <span class=\"o\">=</span> <span class=\"mi\">130</span><span class=\"p\">,</span>\n                                            <span class=\"n\">activation</span> <span class=\"o\">=</span> <span class=\"n\">tf</span><span class=\"o\">.</span><span class=\"n\">nn</span><span class=\"o\">.</span><span class=\"n\">elu</span><span class=\"p\">,</span>\n                                            <span class=\"n\">knockdown</span> <span class=\"o\">=</span> <span class=\"mf\">0.1</span><span class=\"p\">,</span>\n                                            <span class=\"n\">BATCH_SIZE</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n</pre>\n<p>Layer for performing single-phase spectral graph convolutions. Inherits from <code>tensorflow.keras.layers.Layer</code> and has access to all associated methods.</p>\n<h4>Parameters</h4>\n<ul>\n<li>n - Layer index for labeling purpose.</li>\n<li>num_feat - Number of features for each node in graph.</li>\n<li>num_atoms - Maximum number of nodes over all graphs.</li>\n<li>activation - Activation function for layer.</li>\n<li>knockdown - Convolutional knockdown threshold for spectral regularization.</li>\n<li>BATCH_SIZE - Number of batches in input</li>\n</ul>\n<h3>Call</h3>\n<pre><span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"n\">X</span> <span class=\"o\">=</span> <span class=\"n\">graph_conv</span><span class=\"p\">([</span><span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"n\">X</span><span class=\"p\">])</span>\n</pre>\n<h4>Parameters</h4>\n<ul>\n<li>A - Adjacency matrix of graph. Has dimensions (BATCH_SIZE, num_atoms, num_atoms).</li>\n<li>X - Features matrix of graph. Has dimensions (BATCH_SIZE, num_atoms, num_feat).</li>\n</ul>\n<h4>Returns</h4>\n<ul>\n<li>A - Adjacency matrix of graph. Unchanged from input.</li>\n<li>X - Convolved features matrix of graph.</li>\n</ul>\n<h3>ConvEmbed</h3>\n<pre><span class=\"n\">conv_embed</span> <span class=\"o\">=</span> <span class=\"n\">odachi</span><span class=\"o\">.</span><span class=\"n\">engine</span><span class=\"o\">.</span><span class=\"n\">layers</span><span class=\"o\">.</span><span class=\"n\">ConvEmbed</span><span class=\"p\">(</span><span class=\"n\">num_feat</span> <span class=\"o\">=</span> <span class=\"mi\">41</span><span class=\"p\">,</span>\n                                            <span class=\"n\">num_atoms</span> <span class=\"o\">=</span> <span class=\"mi\">130</span><span class=\"p\">,</span>\n                                            <span class=\"n\">depth</span> <span class=\"o\">=</span> <span class=\"mi\">10</span><span class=\"p\">,</span>\n                                            <span class=\"n\">knock</span> <span class=\"o\">=</span> <span class=\"mf\">0.2</span><span class=\"p\">,</span>\n                                            <span class=\"n\">BATCH_SIZE</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n</pre>\n<p>Model object for performing stacked graph convolutions with the number of features staying constant across layers. Inherits from <code>tensorflow.keras.Model</code>.</p>\n<h4>Parameters</h4>\n<ul>\n<li>num_feat - Number of features for each node in graph.</li>\n<li>num_atoms - Maximum number of nodes over all graphs.</li>\n<li>depth - Number of stacked convolutional layers.</li>\n<li>knock - Convolutional knockdown threshold.</li>\n<li>BATCH_SIZE - Number of batches in input.</li>\n</ul>\n<h3>Call</h3>\n<pre><span class=\"n\">X</span> <span class=\"o\">=</span> <span class=\"n\">conv_embed</span><span class=\"p\">([</span><span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"n\">X</span><span class=\"p\">])</span>\n</pre>\n<h4>Parameters</h4>\n<ul>\n<li>A - Initial adjacency matrix of graph. Has dimensions (BATCH_SIZE, num_atoms, num_atoms).</li>\n<li>X - Initial features matrix of graph. Has dimensions (BATCH_SIZE, num_atoms, num_feat).</li>\n</ul>\n<h4>Returns</h4>\n<ul>\n<li>X - Fully convolved features matrix of graph.</li>\n</ul>\n<h2>Molecular Graph Representation</h2>\n<h3>Conv</h3>\n<pre><span class=\"n\">conv</span> <span class=\"o\">=</span> <span class=\"n\">odachi</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">conv</span><span class=\"o\">.</span><span class=\"n\">Conv</span><span class=\"p\">(</span><span class=\"n\">smiles</span><span class=\"p\">)</span>\n</pre>\n<p>Convolutional molecule (Conv) object for storing and representing molecules as featurized graphs upon which graph convolutional methods can be applied.</p>\n<h4>Parameters</h4>\n<ul>\n<li>smiles - SMILES string representing the molecule to be stored as a featurized graph.</li>\n</ul>\n<h4>Attributes</h4>\n<ul>\n<li>smiles - SMILES string of the molecule stored in the object.</li>\n<li>num_atoms - Number of atoms in the stored molecule.</li>\n<li>num_feat - Number of features per each atom (default 41).</li>\n<li>adj_matrix - Adjacency matrix of molecular graph. Padded up to 130 nodes by default.</li>\n<li>atom_features - Features matrix of molecular graph. Padded up to 130 nodes by default.</li>\n</ul>\n<h2>Engine</h2>\n<h3>Odachi</h3>\n<pre><span class=\"n\">odachi</span> <span class=\"o\">=</span> <span class=\"n\">odachi</span><span class=\"o\">.</span><span class=\"n\">engine</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Odachi</span><span class=\"p\">(</span><span class=\"n\">knock</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span><span class=\"p\">)</span>\n</pre>\n<p>Engine implementation that wraps all three phases of the retrosynthetic prediction process\nto allow for predictions to be made and streamed to the <a href=\"retrosynthesis.com\" rel=\"nofollow\">retrosynthesis.com</a> website.</p>\n<h4>Parameters</h4>\n<ul>\n<li>knock - Convolutional knockdown threshold for loading saved models.</li>\n</ul>\n<h3>Call</h3>\n<pre><span class=\"n\">result_dict</span> <span class=\"o\">=</span> <span class=\"n\">odachi</span><span class=\"p\">(</span><span class=\"n\">smiles</span><span class=\"p\">,</span>\n                     <span class=\"n\">clusters</span> <span class=\"o\">=</span> <span class=\"mi\">2</span><span class=\"p\">,</span>\n                     <span class=\"n\">version</span> <span class=\"o\">=</span> <span class=\"mi\">9</span><span class=\"p\">)</span>\n</pre>\n<h4>Parameters</h4>\n<ul>\n<li>smiles - SMILES string of the query target molecule.</li>\n<li>clusters - number of synthons to cluster the target molecule into.</li>\n<li>version - Version edition of the convolutional embedding to use for prediction. Latest version is 9.</li>\n</ul>\n<h4>Returns</h4>\n<ul>\n<li>result_dict - Dictionary containing prediction data.\n<ul>\n<li>smiles - Original smiles string of target molecule.</li>\n<li>bonds - List of bonds which are predicted to be disconnected.</li>\n<li>svg - Raw SVG for rendering the predicted retrosynthetic disconnection.</li>\n<li>time - Total prediction runtime.</li>\n</ul>\n</li>\n</ul>\n\n          </div>"}, "last_serial": 6701049, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "a26f41c4f61b31bec3f5266d33d89d73", "sha256": "2f8413ecfc1dd9025c120dc795ce3e72ae6d3567cb379d4404479ebbef2662c8"}, "downloads": -1, "filename": "odachi-0.1.tar.gz", "has_sig": false, "md5_digest": "a26f41c4f61b31bec3f5266d33d89d73", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 145488, "upload_time": "2020-02-16T15:51:05", "upload_time_iso_8601": "2020-02-16T15:51:05.770684Z", "url": "https://files.pythonhosted.org/packages/ac/ae/26d124825f225266a0fb475377e13d8481830ba4923ff082146832a5dd08/odachi-0.1.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "a9e74f95c35f4cf0b8a3e8fe6a4d2960", "sha256": "7d73a204aaef1f560623ed580a19c764f6280670d007d72103c2ff822a705ab7"}, "downloads": -1, "filename": "odachi-0.1.1.tar.gz", "has_sig": false, "md5_digest": "a9e74f95c35f4cf0b8a3e8fe6a4d2960", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 145480, "upload_time": "2020-02-16T15:56:12", "upload_time_iso_8601": "2020-02-16T15:56:12.299965Z", "url": "https://files.pythonhosted.org/packages/1d/44/0e7d4328538bdff41331b644be1e6f317aa07c0c6f710350c5e14c7a51e8/odachi-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "fa85c3b31a3e2872a47ff8b2f66db4b4", "sha256": "348ffd1d34a8c746a76cf5565340e9ec54f4785af50de4bb90a7f7cb7e1139a2"}, "downloads": -1, "filename": "odachi-0.1.2.tar.gz", "has_sig": false, "md5_digest": "fa85c3b31a3e2872a47ff8b2f66db4b4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 145496, "upload_time": "2020-02-16T16:07:30", "upload_time_iso_8601": "2020-02-16T16:07:30.510111Z", "url": "https://files.pythonhosted.org/packages/24/54/34b2b1e19b201f608f0dc4df5c438b40d7c640a55768e441df55ae46ed75/odachi-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "191aff78f142976810dc871003044ab5", "sha256": "8532c1ac4fef6ef68dc03acea8c9f162ed3542eecfeec9b3d4afaec1b0644f9c"}, "downloads": -1, "filename": "odachi-0.1.3.tar.gz", "has_sig": false, "md5_digest": "191aff78f142976810dc871003044ab5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 145484, "upload_time": "2020-02-16T16:10:49", "upload_time_iso_8601": "2020-02-16T16:10:49.868414Z", "url": "https://files.pythonhosted.org/packages/b4/e3/c34c1bb9a92855c1e1c5b25eda1eb87b6ea889c03a8616abfbb8e3d412b2/odachi-0.1.3.tar.gz", "yanked": false}], "0.2.3": [{"comment_text": "", "digests": {"md5": "b9cd264ac6084cef21d28d3a51faa1b3", "sha256": "4bf6f7da7ee47b5dd48806614685142dddb6ba0d0aaae3026f653d5fb11a98d9"}, "downloads": -1, "filename": "odachi-0.2.3.tar.gz", "has_sig": false, "md5_digest": "b9cd264ac6084cef21d28d3a51faa1b3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1366799, "upload_time": "2020-02-19T21:47:19", "upload_time_iso_8601": "2020-02-19T21:47:19.217250Z", "url": "https://files.pythonhosted.org/packages/3b/c3/7d453c26c691808019cd551d8c40e3bf27f3ed2ff8159c98177fa5d5ef49/odachi-0.2.3.tar.gz", "yanked": false}], "0.2.4": [{"comment_text": "", "digests": {"md5": "fdecd8d36471e6916a0d7121e601b49e", "sha256": "1bdfc74d865b06c7f52aa4396baa36bcc3f75f9d750257790a23e5fb298d1ac1"}, "downloads": -1, "filename": "odachi-0.2.4.tar.gz", "has_sig": false, "md5_digest": "fdecd8d36471e6916a0d7121e601b49e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1366783, "upload_time": "2020-02-21T13:55:40", "upload_time_iso_8601": "2020-02-21T13:55:40.816349Z", "url": "https://files.pythonhosted.org/packages/c9/34/3b98a1817457713a9b2f4529f3fb14b6bf27395a1c0d64b2be35107a0875/odachi-0.2.4.tar.gz", "yanked": false}], "0.2.5": [{"comment_text": "", "digests": {"md5": "7e04944b6e7ed78cdc0d9dde892afeb5", "sha256": "e8b586cb07f5c7a820909fd8fe624f5cdee5f98e334e16bf4139667d1e02855e"}, "downloads": -1, "filename": "odachi-0.2.5.tar.gz", "has_sig": false, "md5_digest": "7e04944b6e7ed78cdc0d9dde892afeb5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1366836, "upload_time": "2020-02-21T21:05:28", "upload_time_iso_8601": "2020-02-21T21:05:28.826131Z", "url": "https://files.pythonhosted.org/packages/6d/8b/c85243f29a39aa0b639fdbf39db65bfdfefe80a5a9727f77ac4bfff72d05/odachi-0.2.5.tar.gz", "yanked": false}], "0.2.6": [{"comment_text": "", "digests": {"md5": "e293c4dda192c3afdd55b38ac0da2e7d", "sha256": "5ee6b51d3ecccbb4743e552859875ffc904d412c4ce36f71778cd7b7177271a8"}, "downloads": -1, "filename": "odachi-0.2.6.tar.gz", "has_sig": false, "md5_digest": "e293c4dda192c3afdd55b38ac0da2e7d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1371208, "upload_time": "2020-02-25T17:47:57", "upload_time_iso_8601": "2020-02-25T17:47:57.527760Z", "url": "https://files.pythonhosted.org/packages/01/3e/6fe939a452ab2cd17ea8a997dcd6f59271ff5550ac208669e6a077289eab/odachi-0.2.6.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "9753dd4723179c03eddadb378fc509f9", "sha256": "6b16fb433f460bbdedabd33e3dc55cbac4201c15f4235b36b9a45e82bae35570"}, "downloads": -1, "filename": "odachi-1.0.0.tar.gz", "has_sig": false, "md5_digest": "9753dd4723179c03eddadb378fc509f9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1371278, "upload_time": "2020-02-25T22:21:34", "upload_time_iso_8601": "2020-02-25T22:21:34.791471Z", "url": "https://files.pythonhosted.org/packages/13/ef/03daca665f05612d2673a32f267a02ed4c0f1bacc2ca6ebcef086d6e9a64/odachi-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "c631bc6700d7be5ce4a4c4f0576f4e2d", "sha256": "937f35e085ddb54f49fd38dde872d28b1e65de3b35d15d8c38396d63c6ff4038"}, "downloads": -1, "filename": "odachi-1.0.1.tar.gz", "has_sig": false, "md5_digest": "c631bc6700d7be5ce4a4c4f0576f4e2d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1371274, "upload_time": "2020-02-26T05:00:38", "upload_time_iso_8601": "2020-02-26T05:00:38.961428Z", "url": "https://files.pythonhosted.org/packages/d0/1e/5ce36118da21f1f68ad678e4ecfb92b794d2897a64981d0b18e262fc0fa5/odachi-1.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c631bc6700d7be5ce4a4c4f0576f4e2d", "sha256": "937f35e085ddb54f49fd38dde872d28b1e65de3b35d15d8c38396d63c6ff4038"}, "downloads": -1, "filename": "odachi-1.0.1.tar.gz", "has_sig": false, "md5_digest": "c631bc6700d7be5ce4a4c4f0576f4e2d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1371274, "upload_time": "2020-02-26T05:00:38", "upload_time_iso_8601": "2020-02-26T05:00:38.961428Z", "url": "https://files.pythonhosted.org/packages/d0/1e/5ce36118da21f1f68ad678e4ecfb92b794d2897a64981d0b18e262fc0fa5/odachi-1.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:43:33 2020"}