{"info": {"author": "totalhack", "author_email": "none@none.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3"], "description": "Zillion: Make sense of it all\n=============================\n\n[![Generic badge](https://img.shields.io/badge/Status-Alpha-yellow.svg)](https://shields.io/)\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n[![Documentation Status](https://readthedocs.org/projects/zillion/badge/?version=latest)](https://zillion.readthedocs.io/en/latest/?badge=latest)\n[![License: MIT](https://img.shields.io/badge/License-MIT-blue.svg)](https://opensource.org/licenses/MIT)\n![Python 3](https://img.shields.io/badge/python-3-blue.svg)\n\nIntroduction\n------------\n\n`Zillion` is a free, open data warehousing and dimensional modeling tool that\nallows combining and analyzing data from multiple datasources through a simple\nAPI. It writes SQL so you don't have to, and it easily bolts onto existing\ndatabase infrastructure that can be understood by SQLALchemy.\n\nWith `Zillion` you can:\n\n- Define a warehouse that contains a variety of SQL and/or file-like\n  datasources\n- Define (or reflect) metrics and dimensions in your data and establish table\n  relationships\n- Define formulas at the datasource level or based on combinations of metrics\n  and dimensions\n- Query multiple datasources at once and combine the results in a simple\n  result DataFrame\n- Flexibly aggregate your data with multi-level rollups and table pivots\n- Apply technical transformations on columns including rolling, cumulative,\n  and rank statistics\n- Save and load report specifications\n- Optionally apply automatic type conversions - i.e. get a \"year\" dimension for free\n  from a \"date\" column\n- Utilize \"adhoc\" datasources and fields to enrich specific report requests\n\nWhy `Zillion`?\n\nThere are many commercial solutions out there that provide data warehousing\ncapabilities. Many of them are cost-prohibitive, come with strings attached or\nvendor lock-in, and are overly heavyweight. `Zillion` aims to be a more\ndemocratic solution to data warehousing, and to provide simple, powerful data\nanalysis capabilities to all.\n\nTable of Contents\n-----------------\n\n* [Installation](#installation)\n* [Primer](#primer)\n  * [Theory](#theory)\n  * [Query Layers](#query-layers)\n  * [Metrics and Dimensions](#metrics-and-dimensions)\n  * [Executing Reports](#executing-reports)\n* [Simple Example](#simple-example)\n  * [Configuration](#example-configuration)\n  * [Reports](#example-reports)\n* [Advanced Topics](#advanced-topics)\n  * [FormulaMetrics](#formula-metrics)\n  * [DataSource Formulas](#datasource-formulas)\n  * [Type Conversions](#type-conversions)\n  * [Config Variables](#config-variables)\n  * [DataSource Priority](#datasource-priority)\n  * [AdHocMetrics](#adhoc-metrics)\n* [Supported DataSources](#supported-datasources)\n* [Docs](#documentation)\n* [How to Contribute](#how-to-contribute)\n\n<a name=\"installation\"></a>\nInstallation\n------------\n\n> \u26a0\ufe0f **Warning**: This project is in an alpha state and is rapidly changing.\n\n```shell\n$ pip install zillion\n```\n\n<a name=\"primer\"></a>\nPrimer\n------\n\nPlease also see the [docs](https://zillion.readthedocs.io/en/latest/) for more\ndetails, or skip below for examples.\n\n<a name=\"theory\"></a>\n### Theory\n\nFor background on dimensional modeling and the drill-across querying\ntechnique `Zillion` employs, I recommend reading Ralph Kimball's [book](https://www.kimballgroup.com/data-warehouse-business-intelligence-resources/books/data-warehouse-dw-toolkit/) on\ndata warehousing.\n\nTo summarize, [drill-across querying](https://www.kimballgroup.com/data-warehouse-business-intelligence-resources/kimball-techniques/dimensional-modeling-techniques/drilling-across/) forms one\nor more queries to satisfy a report request for metrics that may exist across\nmultiple metric tables (sometimes called \"facts\" instead of \"metrics\").\n\n`Zillion` supports [snowflake](https://en.wikipedia.org/wiki/Snowflake_schema)\nor [star](https://en.wikipedia.org/wiki/Star_schema) schemas. You can specify\ntable relationships through a parent-child lineage, and `Zillion` can also\ninfer acceptable joins based on the presence of dimension table primary keys.\n\n<a name=\"query-layers\"></a>\n### Query Layers\n\n`Zillion` reports can be thought of as running in two layers:\n\n1. DataSource Layer: SQL queries against the warehouse's datasources\n2. Combined Layer: A final SQL query against the combined data from the\nDataSource Layer\n\nThe Combined Layer is just another SQL database (in-memory SQLite by default)\nthat is used to tie the datasource data together and apply a few additional\nfeatures such as rollups, row filters, pivots, and technical computations.\nMetric formulas may be defined at the DataSource Layer or the Combined Layer,\nand in either case must adhere to the SQL dialect of the underlying database.\nWe'll get into this with examples later.\n\n<a name=\"metrics-and-dimensions\"></a>\n### Metrics and Dimensions\n\nIn `Zillion` there are two main types of `Fields`:\n\n1. `Dimensions`: attributes of data used for labelling, grouping, and filtering\n2. `Metrics`: facts and measures that may be broken down along dimensions\n\nNote that a `Field` is not the same thing as a \"column\". You can think of a\ncolumn as an instance of a `Field` in a particular table, with all of the\nspecifics of that table/datasource that come with it. A `Field` is more like a\nclass of a column.\n\nFor example, you may have a `Field` called \"revenue\". That `Field` may occur\nacross several datasources, possibly in multiple tables within a single\ndatasource, as specific table columns, possibly with different column names too.\n`Zillion` understands that all of those columns represent the same concept, and\nit can try to use any of them to satisfy reports requesting \"revenue\".\n\nLikewise there are two main types of tables:\n\n1. Dimension Tables: reference/attribute tables containing only related\ndimensions\n2. Metric Tables: fact tables that may contain metrics and some related\ndimensions/attributes\n\n<a name=\"executing-reports\"></a>\n### Executing Reports\n\nThe main purpose of `Zillion` is to execute reports against a `Warehouse`.\nWe'll get into more examples later, but at a high level you will be crafting\nreports as follows:\n\n```python\nwh = Warehouse(...)\n\nresult = wh.execute(\n    metrics=[\"revenue\", \"leads\"],\n    dimensions=[\"date\"],\n    criteria=[\n        (\"date\", \">\", \"2020-01-01\"),\n        (\"partner\", \"=\", \"Partner A\")\n    ]\n)\n\nprint(result.df) # Pandas DataFrame\n```\n\nThe `ReportResult` has a Pandas DataFrame with the dimensions as the index and\nthe metrics as the columns. Think of the dimensions as the target columns of a\n\"group by\" SQL statement. Think of the metrics as the columns you are\naggregating. Think of the criteria as the \"where\" clause.\n\nFor a report like the one above it's possible two DataSource Layer queries\nwere run (one for revenue and one for leads) if they happen to be in different\nmetric tables. Your criteria are applied in the DataSource Layer queries.\n\nA `Report` is said to have a `grain`, which defines the dimensions each metric\nmust be able to join to in order to satisfy the `Report` requirements. The\n`grain` is a combination of **all** dimensions, including those referenced in\ncriteria or in metric formulas. In the example above, the `grain` would be\n`{date, partner}`.  Both \"revenue\" and \"leads\" must be able to join to those\ndimensions for this report to be possible.\n\n<a name=\"simple-example\"></a>\nSimple Example\n--------------\n\nBelow we will walk through a simple example that demonstrates basic\n`DataSource` and `Warehouse` configuration and then shows some sample reports.\nThe data is a SQLite database that is part of the `Zillion` unit test [code](https://github.com/totalhack/zillion/blob/master/tests/testdb1). The schema is as follows:\n\n```\nCREATE TABLE partners (\n  id INTEGER PRIMARY KEY,\n  name VARCHAR NOT NULL UNIQUE,\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\nCREATE TABLE campaigns (\n  id INTEGER PRIMARY KEY,\n  name VARCHAR NOT NULL UNIQUE,\n  category VARCHAR NOT NULL,\n  partner_id INTEGER NOT NULL,\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\nCREATE TABLE leads (\n  id INTEGER PRIMARY KEY,\n  name VARCHAR NOT NULL,\n  campaign_id INTEGER NOT NULL,\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\nCREATE TABLE sales (\n  id INTEGER PRIMARY KEY,\n  item VARCHAR NOT NULL,\n  quantity INTEGER NOT NULL,\n  revenue DECIMAL(10, 2),\n  lead_id INTEGER NOT NULL,\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n```\n\n<a name=\"example-configuration\"></a>\n### Configuration\n\nA `Warehouse` config has the following main sections:\n\n* metrics: optional list of metric configs for global metrics\n* dimensions: optional list of dimension configs for global dimensions\n* datasources: mapping of datasource names to datasource configs\n\nA `DataSource` config has the following main sections:\n\n* url: connection string for a datasource\n* metrics: optional list of metric configs specific to this datasource\n* dimensions: optional list of dimension configs specific to this datasource\n* tables: mapping of table names to table configs\n\nIn this example we will use a JSON config file. You can also set your\nconfig directly on your SQLAlchemy metadata, but we'll save that for a later\nexample.\n\nThe JSON config file we will use to init our `Warehouse` is located\n[here](https://raw.githubusercontent.com/totalhack/zillion/master/tests/example_wh_config.json).\nFor a deeper dive of the config schema please see the full\n[docs](https://zillion.readthedocs.io/en/latest/). For now let's summarize:\n\n* There are lists of metrics and dimensions defined at the warehouse level. This\nincludes defining the name and type of the field, as well as the aggregation\nand rounding settings for metrics.\n* It has a single SQLite datasource named \"testdb1\". The connection string\nassumes the DB file is in the current working directory. This must be valid\nSQLAlchemy connection string.\n* All four tables in our database are included in the config, two as dimension\ntables and two as metric tables. The tables are linked through a parent->child\nrelationship: partners to campaigns, and leads to sales.\n* Some tables utilize the `create_fields` flag to automatically create fields\non the datasource from column definitions.\n\nTo initialize a `Warehouse` from this config:\n\n```python\nconfig = load_warehouse_config(\"example_wh_config.json\")\nwh = Warehouse(config=config)\nwh.print_info() # Formatted print of the Warehouse structure\n```\n\nThe output of `print_info` above would show which tables and columns\nare part of the `Warehouse` and which fields they support. It also lists\nall of the metrics and dimensions at the `Warehouse` and `DataSource` levels.\n\n<a name=\"example-reports\"></a>\n### Reports\n\n> **Note**: the test data in this sample database is not meant to mimic any\nreal world example. The numbers are just made up for testing.\n\n**Example:** Get sales, leads, and revenue by partner:\n\n```python\nresult = wh.execute(\n    metrics=[\"sales\", \"leads\", \"revenue\"],\n    dimensions=[\"partner_name\"]\n)\n\nprint(result.df)\n\"\"\"\n              sales  leads  revenue\npartner_name\nPartner A        11      4    165.0\nPartner B         2      2     19.0\nPartner C         5      1    118.5\n\"\"\"\n```\n\n**Example:** Let's limit to Partner A and break down by its campaigns:\n\n```python\nresult = wh.execute(\n    metrics=[\"sales\", \"leads\", \"revenue\"],\n    dimensions=[\"campaign_name\"],\n    criteria=[(\"partner_name\", \"=\", \"Partner A\")]\n)\n\nprint(result.df)\n\"\"\"\n               sales  leads  revenue\ncampaign_name\nCampaign 1A        5      2       83\nCampaign 2A        6      2       82\n\"\"\"\n```\n\n**Example:** The output below shows rollups at the campaign level within each\npartner, and also a totals rollup at the partner and campaign level.\n\n> Note: the output contains a special character to mark DataFrame rollup rows\nthat were added to the result. The\n[ReportResult](https://zillion.readthedocs.io/en/latest/zillion.report.html#zillion.report.ReportResult)\nobject contains some helper attributes to automatically access or filter\nrollups, as well as a `df_display` attribute that returns the result with\nfriendlier display values substituted for special characters. The\nunder-the-hood special character is left here for illustration, but may not\nrender the same in all scenarios.\n\n```python\nfrom zillion.core import RollupTypes\n\nresult = wh.execute(\n    metrics=[\"sales\", \"leads\", \"revenue\"],\n    dimensions=[\"partner_name\", \"campaign_name\"],\n    rollup=RollupTypes.ALL\n)\n\nprint(result.df)\n\"\"\"\n                            sales  leads  revenue\npartner_name campaign_name\nPartner A    Campaign 1A      5.0    2.0     83.0\n             Campaign 2A      6.0    2.0     82.0\n             \udbff\udfff               11.0    4.0    165.0\nPartner B    Campaign 1B      1.0    1.0      6.0\n             Campaign 2B      1.0    1.0     13.0\n             \udbff\udfff                2.0    2.0     19.0\nPartner C    Campaign 1C      5.0    1.0    118.5\n             \udbff\udfff                5.0    1.0    118.5\n\udbff\udfff            \udbff\udfff               18.0    7.0    302.5\n\"\"\"\n```\n\n**Example:** Save a report spec (just a spec, not the data):\n\n```python\nspec_id = wh.save_report(\n    metrics=[\"sales\", \"leads\", \"revenue\"],\n    dimensions=[\"partner_name\"]\n)\n```\n\n**Example:** Load and run a report from a spec ID:\n\n```python\nresult = wh.execute_id(spec_id)\n```\n\n> Note: The ZILLION_CONFIG environment var can point to a yaml config file.\nThe database used to store Zillion report specs can be configured by setting\nthe ZILLION_DB_URL value in your Zillion config to a valid database connection\nstring. By default a SQLite DB in /tmp is used. See this [sample\nconfig](https://github.com/totalhack/zillion/blob/master/tests/sample_config.yaml).\n\n**Example:** Unsupported Grain\n\nIf you attempt an impossible report, you will get an\n`UnsupportedGrainException`. The report below is impossible because it\nattempts to break down the leads metric by a dimension that only exists\nin a child table. Generally speaking, child tables can join back up to\nparents to find dimensions, but not the other way around.\n\n```python\n# Fails with UnsupportedGrainException\nresult = wh.execute(\n    metrics=[\"leads\"],\n    dimensions=[\"sale_id\"]\n)\n```\n\n<a name=\"advanced-topics\"></a>\nAdvanced Topics\n---------------\n\n<a name=\"formula-metrics\"></a>\n### FormulaMetrics\n\nIn our example above our config included a formula-based metric called \"rpl\",\nwhich is simply revenue / leads. FormulaMetrics combine other metrics and/or\ndimensions to calculate a new metric at the Combined Layer of querying. The\nsyntax must match your Combined Layer database, which is SQLite in our example.\n\n```\n{\n    \"name\": \"rpl\",\n    \"aggregation\": \"MEAN\",\n    \"rounding\": 2,\n    \"formula\": \"{revenue}/{leads}\"\n}\n```\n\n<a name=\"datasource-formulas\"></a>\n### DataSource Formulas\n\nOur example also includes a metric \"sales\" whose value is calculated via\nformula at the DataSource Layer of querying. Note the following in the\n`fields` list for the \"id\" param in the \"main.sales\" table. These formulas are\nin the syntax of the particular `DataSource` database technology, which also\nhappens to be SQLite in our example.\n\n```\n\"fields\": [\n    \"sale_id\",\n    {\"name\":\"sales\", \"ds_formula\": \"COUNT(DISTINCT sales.id)\"}\n]\n```\n\n<a name=\"type-conversions\"></a>\n### Type Conversions\n\nOur example also automatically created a handful of dimensions from the\n\"created_at\" columns of the leads and sales tables. Support for type\nconversions is limited, but for date/datetime type columns in supported\n`DataSource` technologies you can get a variety of dimensions for free this\nway.\n\nThe output of `wh.print_info` will show the added dimensions, which are\nprefixed with \"lead_\" or \"sale_\" as specified by the optional\n`type_conversion_prefix` in the config for each table. Some examples include\nsale_hour, sale_day_name, sale_day_of_month, sale_month, sale_year, etc.\n\n<a name=\"config-variables\"></a>\n### Config Variables\n\nIf you'd like to avoid putting sensitive connection information directly in\nyour `DataSource` configs you can leverage config variables. In your `Zillion`\nyaml config you can specify a `DATASOURCE_CONTEXTS` section as follows:\n\n```\nDATASOURCE_CONTEXTS:\n  my_ds_name:\n    user: user123\n    pass: goodpassword\n    host: 127.0.0.1\n    schema: reporting\n```\n\nThen when your `DataSource` config for the datasource named \"my_ds_name\" is\nread, it can use this context to populate variables in your connection url:\n\n```\n    \"datasources\": {\n        \"my_ds_name\": {\n            \"url\": \"mysql+pymysql://{user}:{pass}@{host}/{schema}\"\n            ...\n        }\n    }\n```\n\n<a name=\"DataSource Priority\"></a>\n### DataSource Priority\n\nOn `Warehouse` init you can specify a default priority order for datasources\nby name. This will come into play when a report could be satisfied by multiple\ndatasources.  `DataSources` earlier in the list will be higher priority. This\nwould be useful if you wanted to favor a set of faster, aggregate tables that\nare grouped in a `DataSource`.\n\n```python\nwh = Warehouse(config=config, ds_priority=[\"aggr_ds\", \"raw_ds\", ...])\n```\n\n<a name=\"adhoc-metrics\"></a>\n### AdHocMetrics\n\nYou may also define metrics \"adhoc\" with each report request. Below is an\nexample that creates a revenue-per-lead metric on the fly. These only exist\nwithin the scope of the report, and the name can not conflict with any existing\nfields:\n\n```python\nresult = wh.execute(\n    metrics=[\n        \"leads\",\n        {\"formula\": \"{revenue}/{leads}\", \"name\": \"my_rpl\"}\n    ],\n    dimensions=[\"partner_name\"]\n)\n```\n\n<a name=\"supported-datasources\"></a>\nSupported DataSources\n---------------------\n\n`Zillion's` goal is to support any database technology that SQLAlchemy\nsupports. That said the support and testing levels in `Zillion` vary at the\nmoment. In particular, the ability to do type conversions, database\nreflection, and kill running queries all require some database specific code\nfor support. The following list summarizes support:\n\n* SQLite: supported and tested\n* MySQL: supported and *moderately* tested\n* PostgreSQL: supported and *lightly* tested\n* MSSQL: not tested\n* Oracle: not tested\n* BigQuery, Redshift, Snowflake, etc: not tested\n\nNote that this is different than the database support for the Combined Layer\ndatabase. Currently only SQLite is supported there, though it is planned to\nmake this more generic such that any SQLAlchemy supported database could be\nused.\n\n<a name=\"documentation\"></a>\nDocumentation\n-------------\n\nMore thorough documentation can be found [here](https://zillion.readthedocs.io/en/latest/).\nYou can supplement your knowledge by perusing the [tests](https://github.com/totalhack/zillion/tree/master/tests) directory\nor the [module reference](https://zillion.readthedocs.io/en/latest/zillion.html).\n\n<a name=\"how-to-contribute\"></a>\nHow to Contribute\n-----------------\n\nSee the [CONTRIBUTING](https://github.com/totalhack/zillion/blob/master/CONTRIBUTING.md) guide.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/totalhack/zillion", "keywords": "", "license": "MIT", "maintainer": "totalhack", "maintainer_email": "", "name": "zillion", "package_url": "https://pypi.org/project/zillion/", "platform": "", "project_url": "https://pypi.org/project/zillion/", "project_urls": {"Homepage": "https://github.com/totalhack/zillion"}, "release_url": "https://pypi.org/project/zillion/0.2.15/", "requires_dist": ["climax", "lxml", "m2r", "marshmallow", "networkx", "numpydoc", "orderedset (>=2.0.3)", "pandas", "pylint", "pymysql", "pyyaml", "simplejson", "stopit", "sqlalchemy", "sqlparse", "tabulate", "tlbx (>=0.1.13)", "xlrd", "black ; extra == 'complete'", "pre-commit ; extra == 'complete'", "psycopg2 ; extra == 'complete'", "pylint ; extra == 'complete'", "pytest ; extra == 'complete'", "sphinx ; extra == 'complete'", "sphinx-rtd-theme ; extra == 'complete'", "twine ; extra == 'complete'", "wheel ; extra == 'complete'", "black ; extra == 'dev'", "pre-commit ; extra == 'dev'", "pylint ; extra == 'dev'", "pytest ; extra == 'dev'", "twine ; extra == 'dev'", "wheel ; extra == 'dev'", "sphinx ; extra == 'dev'", "sphinx-rtd-theme ; extra == 'dev'", "psycopg2 ; extra == 'postgres'"], "requires_python": ">=3.6", "summary": "Make sense of it all.", "version": "0.2.15", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Zillion: Make sense of it all</h1>\n<p><a href=\"https://shields.io/\" rel=\"nofollow\"><img alt=\"Generic badge\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8fff0b90d1fc837a14155ee1b82cc37c40c9f511/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f5374617475732d416c7068612d79656c6c6f772e737667\"></a>\n<a href=\"https://github.com/psf/black\" rel=\"nofollow\"><img alt=\"Code style: black\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fbfdc7754183ecf079bc71ddeabaf88f6cbc5c00/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64652532307374796c652d626c61636b2d3030303030302e737667\"></a>\n<a href=\"https://zillion.readthedocs.io/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/dcc95f1acfee27942632eaba716f1af26c27b7f7/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f7a696c6c696f6e2f62616467652f3f76657273696f6e3d6c6174657374\"></a>\n<a href=\"https://opensource.org/licenses/MIT\" rel=\"nofollow\"><img alt=\"License: MIT\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4150014b4dfdd7b565fa18de88e9bb1b8ccd7c08/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d4d49542d626c75652e737667\"></a>\n<img alt=\"Python 3\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ab19740527af5cf7db635873a78fc8895b2ea71e/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f707974686f6e2d332d626c75652e737667\"></p>\n<h2>Introduction</h2>\n<p><code>Zillion</code> is a free, open data warehousing and dimensional modeling tool that\nallows combining and analyzing data from multiple datasources through a simple\nAPI. It writes SQL so you don't have to, and it easily bolts onto existing\ndatabase infrastructure that can be understood by SQLALchemy.</p>\n<p>With <code>Zillion</code> you can:</p>\n<ul>\n<li>Define a warehouse that contains a variety of SQL and/or file-like\ndatasources</li>\n<li>Define (or reflect) metrics and dimensions in your data and establish table\nrelationships</li>\n<li>Define formulas at the datasource level or based on combinations of metrics\nand dimensions</li>\n<li>Query multiple datasources at once and combine the results in a simple\nresult DataFrame</li>\n<li>Flexibly aggregate your data with multi-level rollups and table pivots</li>\n<li>Apply technical transformations on columns including rolling, cumulative,\nand rank statistics</li>\n<li>Save and load report specifications</li>\n<li>Optionally apply automatic type conversions - i.e. get a \"year\" dimension for free\nfrom a \"date\" column</li>\n<li>Utilize \"adhoc\" datasources and fields to enrich specific report requests</li>\n</ul>\n<p>Why <code>Zillion</code>?</p>\n<p>There are many commercial solutions out there that provide data warehousing\ncapabilities. Many of them are cost-prohibitive, come with strings attached or\nvendor lock-in, and are overly heavyweight. <code>Zillion</code> aims to be a more\ndemocratic solution to data warehousing, and to provide simple, powerful data\nanalysis capabilities to all.</p>\n<h2>Table of Contents</h2>\n<ul>\n<li><a href=\"#installation\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"#primer\" rel=\"nofollow\">Primer</a>\n<ul>\n<li><a href=\"#theory\" rel=\"nofollow\">Theory</a></li>\n<li><a href=\"#query-layers\" rel=\"nofollow\">Query Layers</a></li>\n<li><a href=\"#metrics-and-dimensions\" rel=\"nofollow\">Metrics and Dimensions</a></li>\n<li><a href=\"#executing-reports\" rel=\"nofollow\">Executing Reports</a></li>\n</ul>\n</li>\n<li><a href=\"#simple-example\" rel=\"nofollow\">Simple Example</a>\n<ul>\n<li><a href=\"#example-configuration\" rel=\"nofollow\">Configuration</a></li>\n<li><a href=\"#example-reports\" rel=\"nofollow\">Reports</a></li>\n</ul>\n</li>\n<li><a href=\"#advanced-topics\" rel=\"nofollow\">Advanced Topics</a>\n<ul>\n<li><a href=\"#formula-metrics\" rel=\"nofollow\">FormulaMetrics</a></li>\n<li><a href=\"#datasource-formulas\" rel=\"nofollow\">DataSource Formulas</a></li>\n<li><a href=\"#type-conversions\" rel=\"nofollow\">Type Conversions</a></li>\n<li><a href=\"#config-variables\" rel=\"nofollow\">Config Variables</a></li>\n<li><a href=\"#datasource-priority\" rel=\"nofollow\">DataSource Priority</a></li>\n<li><a href=\"#adhoc-metrics\" rel=\"nofollow\">AdHocMetrics</a></li>\n</ul>\n</li>\n<li><a href=\"#supported-datasources\" rel=\"nofollow\">Supported DataSources</a></li>\n<li><a href=\"#documentation\" rel=\"nofollow\">Docs</a></li>\n<li><a href=\"#how-to-contribute\" rel=\"nofollow\">How to Contribute</a></li>\n</ul>\n<h2><a></a>\nInstallation</h2>\n<blockquote>\n<p>\u26a0\ufe0f <strong>Warning</strong>: This project is in an alpha state and is rapidly changing.</p>\n</blockquote>\n<pre>$ pip install zillion\n</pre>\n<h2><a></a>\nPrimer</h2>\n<p>Please also see the <a href=\"https://zillion.readthedocs.io/en/latest/\" rel=\"nofollow\">docs</a> for more\ndetails, or skip below for examples.</p>\n<p><a></a></p>\n<h3>Theory</h3>\n<p>For background on dimensional modeling and the drill-across querying\ntechnique <code>Zillion</code> employs, I recommend reading Ralph Kimball's <a href=\"https://www.kimballgroup.com/data-warehouse-business-intelligence-resources/books/data-warehouse-dw-toolkit/\" rel=\"nofollow\">book</a> on\ndata warehousing.</p>\n<p>To summarize, <a href=\"https://www.kimballgroup.com/data-warehouse-business-intelligence-resources/kimball-techniques/dimensional-modeling-techniques/drilling-across/\" rel=\"nofollow\">drill-across querying</a> forms one\nor more queries to satisfy a report request for metrics that may exist across\nmultiple metric tables (sometimes called \"facts\" instead of \"metrics\").</p>\n<p><code>Zillion</code> supports <a href=\"https://en.wikipedia.org/wiki/Snowflake_schema\" rel=\"nofollow\">snowflake</a>\nor <a href=\"https://en.wikipedia.org/wiki/Star_schema\" rel=\"nofollow\">star</a> schemas. You can specify\ntable relationships through a parent-child lineage, and <code>Zillion</code> can also\ninfer acceptable joins based on the presence of dimension table primary keys.</p>\n<p><a></a></p>\n<h3>Query Layers</h3>\n<p><code>Zillion</code> reports can be thought of as running in two layers:</p>\n<ol>\n<li>DataSource Layer: SQL queries against the warehouse's datasources</li>\n<li>Combined Layer: A final SQL query against the combined data from the\nDataSource Layer</li>\n</ol>\n<p>The Combined Layer is just another SQL database (in-memory SQLite by default)\nthat is used to tie the datasource data together and apply a few additional\nfeatures such as rollups, row filters, pivots, and technical computations.\nMetric formulas may be defined at the DataSource Layer or the Combined Layer,\nand in either case must adhere to the SQL dialect of the underlying database.\nWe'll get into this with examples later.</p>\n<p><a></a></p>\n<h3>Metrics and Dimensions</h3>\n<p>In <code>Zillion</code> there are two main types of <code>Fields</code>:</p>\n<ol>\n<li><code>Dimensions</code>: attributes of data used for labelling, grouping, and filtering</li>\n<li><code>Metrics</code>: facts and measures that may be broken down along dimensions</li>\n</ol>\n<p>Note that a <code>Field</code> is not the same thing as a \"column\". You can think of a\ncolumn as an instance of a <code>Field</code> in a particular table, with all of the\nspecifics of that table/datasource that come with it. A <code>Field</code> is more like a\nclass of a column.</p>\n<p>For example, you may have a <code>Field</code> called \"revenue\". That <code>Field</code> may occur\nacross several datasources, possibly in multiple tables within a single\ndatasource, as specific table columns, possibly with different column names too.\n<code>Zillion</code> understands that all of those columns represent the same concept, and\nit can try to use any of them to satisfy reports requesting \"revenue\".</p>\n<p>Likewise there are two main types of tables:</p>\n<ol>\n<li>Dimension Tables: reference/attribute tables containing only related\ndimensions</li>\n<li>Metric Tables: fact tables that may contain metrics and some related\ndimensions/attributes</li>\n</ol>\n<p><a></a></p>\n<h3>Executing Reports</h3>\n<p>The main purpose of <code>Zillion</code> is to execute reports against a <code>Warehouse</code>.\nWe'll get into more examples later, but at a high level you will be crafting\nreports as follows:</p>\n<pre><span class=\"n\">wh</span> <span class=\"o\">=</span> <span class=\"n\">Warehouse</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">)</span>\n\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">wh</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span>\n    <span class=\"n\">metrics</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"revenue\"</span><span class=\"p\">,</span> <span class=\"s2\">\"leads\"</span><span class=\"p\">],</span>\n    <span class=\"n\">dimensions</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"date\"</span><span class=\"p\">],</span>\n    <span class=\"n\">criteria</span><span class=\"o\">=</span><span class=\"p\">[</span>\n        <span class=\"p\">(</span><span class=\"s2\">\"date\"</span><span class=\"p\">,</span> <span class=\"s2\">\"&gt;\"</span><span class=\"p\">,</span> <span class=\"s2\">\"2020-01-01\"</span><span class=\"p\">),</span>\n        <span class=\"p\">(</span><span class=\"s2\">\"partner\"</span><span class=\"p\">,</span> <span class=\"s2\">\"=\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Partner A\"</span><span class=\"p\">)</span>\n    <span class=\"p\">]</span>\n<span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">df</span><span class=\"p\">)</span> <span class=\"c1\"># Pandas DataFrame</span>\n</pre>\n<p>The <code>ReportResult</code> has a Pandas DataFrame with the dimensions as the index and\nthe metrics as the columns. Think of the dimensions as the target columns of a\n\"group by\" SQL statement. Think of the metrics as the columns you are\naggregating. Think of the criteria as the \"where\" clause.</p>\n<p>For a report like the one above it's possible two DataSource Layer queries\nwere run (one for revenue and one for leads) if they happen to be in different\nmetric tables. Your criteria are applied in the DataSource Layer queries.</p>\n<p>A <code>Report</code> is said to have a <code>grain</code>, which defines the dimensions each metric\nmust be able to join to in order to satisfy the <code>Report</code> requirements. The\n<code>grain</code> is a combination of <strong>all</strong> dimensions, including those referenced in\ncriteria or in metric formulas. In the example above, the <code>grain</code> would be\n<code>{date, partner}</code>.  Both \"revenue\" and \"leads\" must be able to join to those\ndimensions for this report to be possible.</p>\n<h2><a></a>\nSimple Example</h2>\n<p>Below we will walk through a simple example that demonstrates basic\n<code>DataSource</code> and <code>Warehouse</code> configuration and then shows some sample reports.\nThe data is a SQLite database that is part of the <code>Zillion</code> unit test <a href=\"https://github.com/totalhack/zillion/blob/master/tests/testdb1\" rel=\"nofollow\">code</a>. The schema is as follows:</p>\n<pre><code>CREATE TABLE partners (\n  id INTEGER PRIMARY KEY,\n  name VARCHAR NOT NULL UNIQUE,\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\nCREATE TABLE campaigns (\n  id INTEGER PRIMARY KEY,\n  name VARCHAR NOT NULL UNIQUE,\n  category VARCHAR NOT NULL,\n  partner_id INTEGER NOT NULL,\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\nCREATE TABLE leads (\n  id INTEGER PRIMARY KEY,\n  name VARCHAR NOT NULL,\n  campaign_id INTEGER NOT NULL,\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\nCREATE TABLE sales (\n  id INTEGER PRIMARY KEY,\n  item VARCHAR NOT NULL,\n  quantity INTEGER NOT NULL,\n  revenue DECIMAL(10, 2),\n  lead_id INTEGER NOT NULL,\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n</code></pre>\n<p><a></a></p>\n<h3>Configuration</h3>\n<p>A <code>Warehouse</code> config has the following main sections:</p>\n<ul>\n<li>metrics: optional list of metric configs for global metrics</li>\n<li>dimensions: optional list of dimension configs for global dimensions</li>\n<li>datasources: mapping of datasource names to datasource configs</li>\n</ul>\n<p>A <code>DataSource</code> config has the following main sections:</p>\n<ul>\n<li>url: connection string for a datasource</li>\n<li>metrics: optional list of metric configs specific to this datasource</li>\n<li>dimensions: optional list of dimension configs specific to this datasource</li>\n<li>tables: mapping of table names to table configs</li>\n</ul>\n<p>In this example we will use a JSON config file. You can also set your\nconfig directly on your SQLAlchemy metadata, but we'll save that for a later\nexample.</p>\n<p>The JSON config file we will use to init our <code>Warehouse</code> is located\n<a href=\"https://raw.githubusercontent.com/totalhack/zillion/master/tests/example_wh_config.json\" rel=\"nofollow\">here</a>.\nFor a deeper dive of the config schema please see the full\n<a href=\"https://zillion.readthedocs.io/en/latest/\" rel=\"nofollow\">docs</a>. For now let's summarize:</p>\n<ul>\n<li>There are lists of metrics and dimensions defined at the warehouse level. This\nincludes defining the name and type of the field, as well as the aggregation\nand rounding settings for metrics.</li>\n<li>It has a single SQLite datasource named \"testdb1\". The connection string\nassumes the DB file is in the current working directory. This must be valid\nSQLAlchemy connection string.</li>\n<li>All four tables in our database are included in the config, two as dimension\ntables and two as metric tables. The tables are linked through a parent-&gt;child\nrelationship: partners to campaigns, and leads to sales.</li>\n<li>Some tables utilize the <code>create_fields</code> flag to automatically create fields\non the datasource from column definitions.</li>\n</ul>\n<p>To initialize a <code>Warehouse</code> from this config:</p>\n<pre><span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"n\">load_warehouse_config</span><span class=\"p\">(</span><span class=\"s2\">\"example_wh_config.json\"</span><span class=\"p\">)</span>\n<span class=\"n\">wh</span> <span class=\"o\">=</span> <span class=\"n\">Warehouse</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"o\">=</span><span class=\"n\">config</span><span class=\"p\">)</span>\n<span class=\"n\">wh</span><span class=\"o\">.</span><span class=\"n\">print_info</span><span class=\"p\">()</span> <span class=\"c1\"># Formatted print of the Warehouse structure</span>\n</pre>\n<p>The output of <code>print_info</code> above would show which tables and columns\nare part of the <code>Warehouse</code> and which fields they support. It also lists\nall of the metrics and dimensions at the <code>Warehouse</code> and <code>DataSource</code> levels.</p>\n<p><a></a></p>\n<h3>Reports</h3>\n<blockquote>\n<p><strong>Note</strong>: the test data in this sample database is not meant to mimic any\nreal world example. The numbers are just made up for testing.</p>\n</blockquote>\n<p><strong>Example:</strong> Get sales, leads, and revenue by partner:</p>\n<pre><span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">wh</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span>\n    <span class=\"n\">metrics</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"sales\"</span><span class=\"p\">,</span> <span class=\"s2\">\"leads\"</span><span class=\"p\">,</span> <span class=\"s2\">\"revenue\"</span><span class=\"p\">],</span>\n    <span class=\"n\">dimensions</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"partner_name\"</span><span class=\"p\">]</span>\n<span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">df</span><span class=\"p\">)</span>\n<span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">              sales  leads  revenue</span>\n<span class=\"sd\">partner_name</span>\n<span class=\"sd\">Partner A        11      4    165.0</span>\n<span class=\"sd\">Partner B         2      2     19.0</span>\n<span class=\"sd\">Partner C         5      1    118.5</span>\n<span class=\"sd\">\"\"\"</span>\n</pre>\n<p><strong>Example:</strong> Let's limit to Partner A and break down by its campaigns:</p>\n<pre><span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">wh</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span>\n    <span class=\"n\">metrics</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"sales\"</span><span class=\"p\">,</span> <span class=\"s2\">\"leads\"</span><span class=\"p\">,</span> <span class=\"s2\">\"revenue\"</span><span class=\"p\">],</span>\n    <span class=\"n\">dimensions</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"campaign_name\"</span><span class=\"p\">],</span>\n    <span class=\"n\">criteria</span><span class=\"o\">=</span><span class=\"p\">[(</span><span class=\"s2\">\"partner_name\"</span><span class=\"p\">,</span> <span class=\"s2\">\"=\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Partner A\"</span><span class=\"p\">)]</span>\n<span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">df</span><span class=\"p\">)</span>\n<span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">               sales  leads  revenue</span>\n<span class=\"sd\">campaign_name</span>\n<span class=\"sd\">Campaign 1A        5      2       83</span>\n<span class=\"sd\">Campaign 2A        6      2       82</span>\n<span class=\"sd\">\"\"\"</span>\n</pre>\n<p><strong>Example:</strong> The output below shows rollups at the campaign level within each\npartner, and also a totals rollup at the partner and campaign level.</p>\n<blockquote>\n<p>Note: the output contains a special character to mark DataFrame rollup rows\nthat were added to the result. The\n<a href=\"https://zillion.readthedocs.io/en/latest/zillion.report.html#zillion.report.ReportResult\" rel=\"nofollow\">ReportResult</a>\nobject contains some helper attributes to automatically access or filter\nrollups, as well as a <code>df_display</code> attribute that returns the result with\nfriendlier display values substituted for special characters. The\nunder-the-hood special character is left here for illustration, but may not\nrender the same in all scenarios.</p>\n</blockquote>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">zillion.core</span> <span class=\"kn\">import</span> <span class=\"n\">RollupTypes</span>\n\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">wh</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span>\n    <span class=\"n\">metrics</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"sales\"</span><span class=\"p\">,</span> <span class=\"s2\">\"leads\"</span><span class=\"p\">,</span> <span class=\"s2\">\"revenue\"</span><span class=\"p\">],</span>\n    <span class=\"n\">dimensions</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"partner_name\"</span><span class=\"p\">,</span> <span class=\"s2\">\"campaign_name\"</span><span class=\"p\">],</span>\n    <span class=\"n\">rollup</span><span class=\"o\">=</span><span class=\"n\">RollupTypes</span><span class=\"o\">.</span><span class=\"n\">ALL</span>\n<span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">df</span><span class=\"p\">)</span>\n<span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">                            sales  leads  revenue</span>\n<span class=\"sd\">partner_name campaign_name</span>\n<span class=\"sd\">Partner A    Campaign 1A      5.0    2.0     83.0</span>\n<span class=\"sd\">             Campaign 2A      6.0    2.0     82.0</span>\n<span class=\"sd\">             \udbff\udfff               11.0    4.0    165.0</span>\n<span class=\"sd\">Partner B    Campaign 1B      1.0    1.0      6.0</span>\n<span class=\"sd\">             Campaign 2B      1.0    1.0     13.0</span>\n<span class=\"sd\">             \udbff\udfff                2.0    2.0     19.0</span>\n<span class=\"sd\">Partner C    Campaign 1C      5.0    1.0    118.5</span>\n<span class=\"sd\">             \udbff\udfff                5.0    1.0    118.5</span>\n<span class=\"sd\">\udbff\udfff            \udbff\udfff               18.0    7.0    302.5</span>\n<span class=\"sd\">\"\"\"</span>\n</pre>\n<p><strong>Example:</strong> Save a report spec (just a spec, not the data):</p>\n<pre><span class=\"n\">spec_id</span> <span class=\"o\">=</span> <span class=\"n\">wh</span><span class=\"o\">.</span><span class=\"n\">save_report</span><span class=\"p\">(</span>\n    <span class=\"n\">metrics</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"sales\"</span><span class=\"p\">,</span> <span class=\"s2\">\"leads\"</span><span class=\"p\">,</span> <span class=\"s2\">\"revenue\"</span><span class=\"p\">],</span>\n    <span class=\"n\">dimensions</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"partner_name\"</span><span class=\"p\">]</span>\n<span class=\"p\">)</span>\n</pre>\n<p><strong>Example:</strong> Load and run a report from a spec ID:</p>\n<pre><span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">wh</span><span class=\"o\">.</span><span class=\"n\">execute_id</span><span class=\"p\">(</span><span class=\"n\">spec_id</span><span class=\"p\">)</span>\n</pre>\n<blockquote>\n<p>Note: The ZILLION_CONFIG environment var can point to a yaml config file.\nThe database used to store Zillion report specs can be configured by setting\nthe ZILLION_DB_URL value in your Zillion config to a valid database connection\nstring. By default a SQLite DB in /tmp is used. See this <a href=\"https://github.com/totalhack/zillion/blob/master/tests/sample_config.yaml\" rel=\"nofollow\">sample\nconfig</a>.</p>\n</blockquote>\n<p><strong>Example:</strong> Unsupported Grain</p>\n<p>If you attempt an impossible report, you will get an\n<code>UnsupportedGrainException</code>. The report below is impossible because it\nattempts to break down the leads metric by a dimension that only exists\nin a child table. Generally speaking, child tables can join back up to\nparents to find dimensions, but not the other way around.</p>\n<pre><span class=\"c1\"># Fails with UnsupportedGrainException</span>\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">wh</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span>\n    <span class=\"n\">metrics</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"leads\"</span><span class=\"p\">],</span>\n    <span class=\"n\">dimensions</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"sale_id\"</span><span class=\"p\">]</span>\n<span class=\"p\">)</span>\n</pre>\n<h2><a></a>\nAdvanced Topics</h2>\n<p><a></a></p>\n<h3>FormulaMetrics</h3>\n<p>In our example above our config included a formula-based metric called \"rpl\",\nwhich is simply revenue / leads. FormulaMetrics combine other metrics and/or\ndimensions to calculate a new metric at the Combined Layer of querying. The\nsyntax must match your Combined Layer database, which is SQLite in our example.</p>\n<pre><code>{\n    \"name\": \"rpl\",\n    \"aggregation\": \"MEAN\",\n    \"rounding\": 2,\n    \"formula\": \"{revenue}/{leads}\"\n}\n</code></pre>\n<p><a></a></p>\n<h3>DataSource Formulas</h3>\n<p>Our example also includes a metric \"sales\" whose value is calculated via\nformula at the DataSource Layer of querying. Note the following in the\n<code>fields</code> list for the \"id\" param in the \"main.sales\" table. These formulas are\nin the syntax of the particular <code>DataSource</code> database technology, which also\nhappens to be SQLite in our example.</p>\n<pre><code>\"fields\": [\n    \"sale_id\",\n    {\"name\":\"sales\", \"ds_formula\": \"COUNT(DISTINCT sales.id)\"}\n]\n</code></pre>\n<p><a></a></p>\n<h3>Type Conversions</h3>\n<p>Our example also automatically created a handful of dimensions from the\n\"created_at\" columns of the leads and sales tables. Support for type\nconversions is limited, but for date/datetime type columns in supported\n<code>DataSource</code> technologies you can get a variety of dimensions for free this\nway.</p>\n<p>The output of <code>wh.print_info</code> will show the added dimensions, which are\nprefixed with \"lead_\" or \"sale_\" as specified by the optional\n<code>type_conversion_prefix</code> in the config for each table. Some examples include\nsale_hour, sale_day_name, sale_day_of_month, sale_month, sale_year, etc.</p>\n<p><a></a></p>\n<h3>Config Variables</h3>\n<p>If you'd like to avoid putting sensitive connection information directly in\nyour <code>DataSource</code> configs you can leverage config variables. In your <code>Zillion</code>\nyaml config you can specify a <code>DATASOURCE_CONTEXTS</code> section as follows:</p>\n<pre><code>DATASOURCE_CONTEXTS:\n  my_ds_name:\n    user: user123\n    pass: goodpassword\n    host: 127.0.0.1\n    schema: reporting\n</code></pre>\n<p>Then when your <code>DataSource</code> config for the datasource named \"my_ds_name\" is\nread, it can use this context to populate variables in your connection url:</p>\n<pre><code>    \"datasources\": {\n        \"my_ds_name\": {\n            \"url\": \"mysql+pymysql://{user}:{pass}@{host}/{schema}\"\n            ...\n        }\n    }\n</code></pre>\n<p><a></a></p>\n<h3>DataSource Priority</h3>\n<p>On <code>Warehouse</code> init you can specify a default priority order for datasources\nby name. This will come into play when a report could be satisfied by multiple\ndatasources.  <code>DataSources</code> earlier in the list will be higher priority. This\nwould be useful if you wanted to favor a set of faster, aggregate tables that\nare grouped in a <code>DataSource</code>.</p>\n<pre><span class=\"n\">wh</span> <span class=\"o\">=</span> <span class=\"n\">Warehouse</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"o\">=</span><span class=\"n\">config</span><span class=\"p\">,</span> <span class=\"n\">ds_priority</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"aggr_ds\"</span><span class=\"p\">,</span> <span class=\"s2\">\"raw_ds\"</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">])</span>\n</pre>\n<p><a></a></p>\n<h3>AdHocMetrics</h3>\n<p>You may also define metrics \"adhoc\" with each report request. Below is an\nexample that creates a revenue-per-lead metric on the fly. These only exist\nwithin the scope of the report, and the name can not conflict with any existing\nfields:</p>\n<pre><span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">wh</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span>\n    <span class=\"n\">metrics</span><span class=\"o\">=</span><span class=\"p\">[</span>\n        <span class=\"s2\">\"leads\"</span><span class=\"p\">,</span>\n        <span class=\"p\">{</span><span class=\"s2\">\"formula\"</span><span class=\"p\">:</span> <span class=\"s2\">\"</span><span class=\"si\">{revenue}</span><span class=\"s2\">/</span><span class=\"si\">{leads}</span><span class=\"s2\">\"</span><span class=\"p\">,</span> <span class=\"s2\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"my_rpl\"</span><span class=\"p\">}</span>\n    <span class=\"p\">],</span>\n    <span class=\"n\">dimensions</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"partner_name\"</span><span class=\"p\">]</span>\n<span class=\"p\">)</span>\n</pre>\n<h2><a></a>\nSupported DataSources</h2>\n<p><code>Zillion's</code> goal is to support any database technology that SQLAlchemy\nsupports. That said the support and testing levels in <code>Zillion</code> vary at the\nmoment. In particular, the ability to do type conversions, database\nreflection, and kill running queries all require some database specific code\nfor support. The following list summarizes support:</p>\n<ul>\n<li>SQLite: supported and tested</li>\n<li>MySQL: supported and <em>moderately</em> tested</li>\n<li>PostgreSQL: supported and <em>lightly</em> tested</li>\n<li>MSSQL: not tested</li>\n<li>Oracle: not tested</li>\n<li>BigQuery, Redshift, Snowflake, etc: not tested</li>\n</ul>\n<p>Note that this is different than the database support for the Combined Layer\ndatabase. Currently only SQLite is supported there, though it is planned to\nmake this more generic such that any SQLAlchemy supported database could be\nused.</p>\n<h2><a></a>\nDocumentation</h2>\n<p>More thorough documentation can be found <a href=\"https://zillion.readthedocs.io/en/latest/\" rel=\"nofollow\">here</a>.\nYou can supplement your knowledge by perusing the <a href=\"https://github.com/totalhack/zillion/tree/master/tests\" rel=\"nofollow\">tests</a> directory\nor the <a href=\"https://zillion.readthedocs.io/en/latest/zillion.html\" rel=\"nofollow\">module reference</a>.</p>\n<h2><a></a>\nHow to Contribute</h2>\n<p>See the <a href=\"https://github.com/totalhack/zillion/blob/master/CONTRIBUTING.md\" rel=\"nofollow\">CONTRIBUTING</a> guide.</p>\n\n          </div>"}, "last_serial": 7175977, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "25e5138cf02053ca70a7a9cb3fd620ad", "sha256": "c2bb3ce20d3be2ed04eda41737cbaf0f77e6928c680b9166b7f1209131d90bb5"}, "downloads": -1, "filename": "zillion-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "25e5138cf02053ca70a7a9cb3fd620ad", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 28070, "upload_time": "2019-11-14T20:41:44", "upload_time_iso_8601": "2019-11-14T20:41:44.495372Z", "url": "https://files.pythonhosted.org/packages/a7/69/9fdf71a2a441fddae0dc8c7ebb1d78d7b5703f20ca31c483e7a8e593c631/zillion-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e2252db0235d13ffa891f59b484fece9", "sha256": "10bd0de5193575cc090aee1516509cf4f98f22ef545fa70bab08ac15e3c195fb"}, "downloads": -1, "filename": "zillion-0.1.0.tar.gz", "has_sig": false, "md5_digest": "e2252db0235d13ffa891f59b484fece9", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 25690, "upload_time": "2019-11-14T20:41:46", "upload_time_iso_8601": "2019-11-14T20:41:46.621495Z", "url": "https://files.pythonhosted.org/packages/39/ce/38d994bb3d824d3395b877ca73ce71bc38e66d7b0c1a77e0809a9bcd5aaf/zillion-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "12898a17aaf7c13c0886399c18784201", "sha256": "0a3b34ae37e9846d7e90644339cb01833e6df1f3a3d95798e6fba262eb9988cd"}, "downloads": -1, "filename": "zillion-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "12898a17aaf7c13c0886399c18784201", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 39135, "upload_time": "2020-03-31T00:34:45", "upload_time_iso_8601": "2020-03-31T00:34:45.643918Z", "url": "https://files.pythonhosted.org/packages/c1/52/fe387ea62399be0f3493da778cee1791170658a7d04f873239a84888bb3f/zillion-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "46075c6f29c6318cd9af5b5bc1cb3767", "sha256": "50efd3c8ae4b0442a262cef5fe26fe35a1876a978d82c71db23fb5142edffe57"}, "downloads": -1, "filename": "zillion-0.2.0.tar.gz", "has_sig": false, "md5_digest": "46075c6f29c6318cd9af5b5bc1cb3767", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 35671, "upload_time": "2020-03-31T00:34:47", "upload_time_iso_8601": "2020-03-31T00:34:47.078998Z", "url": "https://files.pythonhosted.org/packages/9d/69/d2b0f032a57bbee102253140c895ae6530ecf082238e4c347b3e3475d51a/zillion-0.2.0.tar.gz", "yanked": false}], "0.2.10": [{"comment_text": "", "digests": {"md5": "2a043b44735173d32fc0f82a5aa6bfce", "sha256": "41ed01fec474dc63ce638a8e7cf57afc36714816b87e587cf22ca64eff33bc26"}, "downloads": -1, "filename": "zillion-0.2.10-py3-none-any.whl", "has_sig": false, "md5_digest": "2a043b44735173d32fc0f82a5aa6bfce", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 41074, "upload_time": "2020-04-14T22:38:20", "upload_time_iso_8601": "2020-04-14T22:38:20.364001Z", "url": "https://files.pythonhosted.org/packages/bb/13/8b66869e662d3f5ece0a3eb40fed03145fa4ebd1c3e5a3e25fb80acc3daf/zillion-0.2.10-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cdb9ca9794556fde3c975a06fe2f8a2d", "sha256": "c07d3bc1c366ba28a9079cba1ed48ecc29b19324af964a0bdd749ec58309127b"}, "downloads": -1, "filename": "zillion-0.2.10.tar.gz", "has_sig": false, "md5_digest": "cdb9ca9794556fde3c975a06fe2f8a2d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 37471, "upload_time": "2020-04-14T22:38:22", "upload_time_iso_8601": "2020-04-14T22:38:22.126281Z", "url": "https://files.pythonhosted.org/packages/68/56/8012380ca0824842b9649b97551a54613696745ce1eca74e66f405911720/zillion-0.2.10.tar.gz", "yanked": false}], "0.2.14": [{"comment_text": "", "digests": {"md5": "ecc3a030c02d8115e6289d879a17ebba", "sha256": "33e4a8ccdf0d83edb4d1e1d790b58d93dc252a756173437e90de592a034653cc"}, "downloads": -1, "filename": "zillion-0.2.14-py3-none-any.whl", "has_sig": false, "md5_digest": "ecc3a030c02d8115e6289d879a17ebba", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 57862, "upload_time": "2020-05-02T17:46:05", "upload_time_iso_8601": "2020-05-02T17:46:05.728968Z", "url": "https://files.pythonhosted.org/packages/af/ab/b3335de627796eab01ac6179b5634719105bb72f725725d7af14aac95bca/zillion-0.2.14-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1d76e49156bd39921845667cdd061908", "sha256": "3fb46015b9bda1a29bf64c3d5bd8353c85224de4e5baa3c1946be339254c5665"}, "downloads": -1, "filename": "zillion-0.2.14.tar.gz", "has_sig": false, "md5_digest": "1d76e49156bd39921845667cdd061908", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 53936, "upload_time": "2020-05-02T17:46:07", "upload_time_iso_8601": "2020-05-02T17:46:07.118029Z", "url": "https://files.pythonhosted.org/packages/d0/1d/077c838b61855953b1081322077792494f4ebdd51e7bece8320f13581492/zillion-0.2.14.tar.gz", "yanked": false}], "0.2.15": [{"comment_text": "", "digests": {"md5": "0699af01749f65dfd557dc55a8c409f8", "sha256": "d6d45279e8c63049e99b2b6c4c37477df7db584bee236ecd07f52de17fca903c"}, "downloads": -1, "filename": "zillion-0.2.15-py3-none-any.whl", "has_sig": false, "md5_digest": "0699af01749f65dfd557dc55a8c409f8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 64786, "upload_time": "2020-05-05T21:27:10", "upload_time_iso_8601": "2020-05-05T21:27:10.673533Z", "url": "https://files.pythonhosted.org/packages/7a/81/5a5289918769e3408da9b0e6400c71db319648c49db0c23c8f426447472a/zillion-0.2.15-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ef12c8647a678e0d57701a70d6a5d510", "sha256": "628c95ddb1246db06790fafc29d7a78fd17220aa1668a1e0e0bc9abeac4af79a"}, "downloads": -1, "filename": "zillion-0.2.15.tar.gz", "has_sig": false, "md5_digest": "ef12c8647a678e0d57701a70d6a5d510", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 68409, "upload_time": "2020-05-05T21:27:12", "upload_time_iso_8601": "2020-05-05T21:27:12.187120Z", "url": "https://files.pythonhosted.org/packages/53/1c/80ae47ef423933c96ee368d9754b8da4afca05927efb95e43c74b58c386d/zillion-0.2.15.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "ad5c7dab7d04924cf40399fa3c7ea7de", "sha256": "40349db6a6aa3a9e42cabbbbd327cb1e47bd7b8637601d5554ffc72a4d8ca9fb"}, "downloads": -1, "filename": "zillion-0.2.2-py3-none-any.whl", "has_sig": false, "md5_digest": "ad5c7dab7d04924cf40399fa3c7ea7de", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 39491, "upload_time": "2020-04-02T19:44:58", "upload_time_iso_8601": "2020-04-02T19:44:58.755403Z", "url": "https://files.pythonhosted.org/packages/29/83/c220be1d804d28406e50aac86b6939dcbd211c919839e04eeb30ff3c43f6/zillion-0.2.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f9a30b2544890624428a37b249de046c", "sha256": "cc252d80d2e749216d298b131360ce428d095d22031da4c36614f48b3ac8c727"}, "downloads": -1, "filename": "zillion-0.2.2.tar.gz", "has_sig": false, "md5_digest": "f9a30b2544890624428a37b249de046c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 35949, "upload_time": "2020-04-02T19:45:00", "upload_time_iso_8601": "2020-04-02T19:45:00.055842Z", "url": "https://files.pythonhosted.org/packages/a4/88/1fd67c754fc0cf5946e26e5afd8a062237a3b7ebc24c087ffc6410be43e0/zillion-0.2.2.tar.gz", "yanked": false}], "0.2.3": [{"comment_text": "", "digests": {"md5": "b82304bf56c774889ade720347f2f178", "sha256": "58b602737c89b68de3f0188a60af129218a70433a2e414adc662e3c38dec781a"}, "downloads": -1, "filename": "zillion-0.2.3-py3-none-any.whl", "has_sig": false, "md5_digest": "b82304bf56c774889ade720347f2f178", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 39936, "upload_time": "2020-04-04T16:45:30", "upload_time_iso_8601": "2020-04-04T16:45:30.685738Z", "url": "https://files.pythonhosted.org/packages/d4/f0/eafd37347fc04252bcd44867c6fea66b8376c40b93bdb4bc05782bafc65f/zillion-0.2.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d6eb04a2d7fc408de89b70978d76f1f6", "sha256": "e6bb7c5a400dadf21611c78509f0cac58568da222e1143247438c50060927c3e"}, "downloads": -1, "filename": "zillion-0.2.3.tar.gz", "has_sig": false, "md5_digest": "d6eb04a2d7fc408de89b70978d76f1f6", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 36378, "upload_time": "2020-04-04T16:45:31", "upload_time_iso_8601": "2020-04-04T16:45:31.770659Z", "url": "https://files.pythonhosted.org/packages/d2/7e/86eaad76999fc73fd50a4eaf673f8902ae2405d21c75009ab37d21070cf1/zillion-0.2.3.tar.gz", "yanked": false}], "0.2.5": [{"comment_text": "", "digests": {"md5": "d1935b6c7cbf9a0878a15649c3deb5a0", "sha256": "b06e97d3a56a0abc13fab4945208242859b8b875a4a2249c82a03aa66220dee2"}, "downloads": -1, "filename": "zillion-0.2.5-py3-none-any.whl", "has_sig": false, "md5_digest": "d1935b6c7cbf9a0878a15649c3deb5a0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 40245, "upload_time": "2020-04-06T17:46:56", "upload_time_iso_8601": "2020-04-06T17:46:56.397035Z", "url": "https://files.pythonhosted.org/packages/6b/95/5770170ff34b41294d960edafbc57d3e4fd6d19e5d5c49d5fa75ed22a2d1/zillion-0.2.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "de19b3bddd823b2d96e895d6306f0d06", "sha256": "57007d699e8f3479035601c64154277e42c13a1d4aa753171097224ccf2a4ed6"}, "downloads": -1, "filename": "zillion-0.2.5.tar.gz", "has_sig": false, "md5_digest": "de19b3bddd823b2d96e895d6306f0d06", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 36646, "upload_time": "2020-04-06T17:46:57", "upload_time_iso_8601": "2020-04-06T17:46:57.799691Z", "url": "https://files.pythonhosted.org/packages/95/52/550825bd510aa5426b4e775d036b9221bfa44e524b0cca82d9dc269fb624/zillion-0.2.5.tar.gz", "yanked": false}], "0.2.6": [{"comment_text": "", "digests": {"md5": "a943ae9f116b33e77e6dd341624abc19", "sha256": "5ea7dad3d44e5a3b7998f7a1220752a12bf31fbe698a66031f618f88b95d0bba"}, "downloads": -1, "filename": "zillion-0.2.6-py3-none-any.whl", "has_sig": false, "md5_digest": "a943ae9f116b33e77e6dd341624abc19", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 40318, "upload_time": "2020-04-07T14:50:36", "upload_time_iso_8601": "2020-04-07T14:50:36.718802Z", "url": "https://files.pythonhosted.org/packages/33/ce/74a0256b3393997089ab3c29b665a69f0ad668eaf0bed4d1d48e5c539cad/zillion-0.2.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4691bb734c2cb02f2dcd1fc585c9164a", "sha256": "d2dab70a74c1f07bca3ed78cd81ae1b5c488282bd87bf3881311e1dc466283d7"}, "downloads": -1, "filename": "zillion-0.2.6.tar.gz", "has_sig": false, "md5_digest": "4691bb734c2cb02f2dcd1fc585c9164a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 36721, "upload_time": "2020-04-07T14:50:38", "upload_time_iso_8601": "2020-04-07T14:50:38.053390Z", "url": "https://files.pythonhosted.org/packages/f8/57/62ee0799dd23257b1db6c2b4d11052c6d77662f5291752ba4abb11ff91d4/zillion-0.2.6.tar.gz", "yanked": false}], "0.2.7": [{"comment_text": "", "digests": {"md5": "4bc95ad5d341441f57e6f80787380809", "sha256": "d21abbe6d8228536e72cff43ca36c51c817fca26a16fd959280a167010b14c8b"}, "downloads": -1, "filename": "zillion-0.2.7-py3-none-any.whl", "has_sig": false, "md5_digest": "4bc95ad5d341441f57e6f80787380809", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 40455, "upload_time": "2020-04-07T22:03:02", "upload_time_iso_8601": "2020-04-07T22:03:02.048174Z", "url": "https://files.pythonhosted.org/packages/8d/e0/b99d4095b4180f51d04bbbd88c155bc4d74fb938f57e6b52595389316192/zillion-0.2.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "105f29d779f582aa9b9ccfba880e5652", "sha256": "e1806be37bfb688366b2471783587972aedd505d74e38c50ee1524e4f5ffc57e"}, "downloads": -1, "filename": "zillion-0.2.7.tar.gz", "has_sig": false, "md5_digest": "105f29d779f582aa9b9ccfba880e5652", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 36839, "upload_time": "2020-04-07T22:03:03", "upload_time_iso_8601": "2020-04-07T22:03:03.242239Z", "url": "https://files.pythonhosted.org/packages/cf/80/5f596398891f5a267941463ef86d3d34adf24bb47bf2650b9581e6df6c65/zillion-0.2.7.tar.gz", "yanked": false}], "0.2.8": [{"comment_text": "", "digests": {"md5": "58d27bf7b1e286543f2c6f3885734fe5", "sha256": "31a237d6a2c02f612043954f68128e1403d03890309aba525b9f4a93ed97f2ca"}, "downloads": -1, "filename": "zillion-0.2.8-py3-none-any.whl", "has_sig": false, "md5_digest": "58d27bf7b1e286543f2c6f3885734fe5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 40684, "upload_time": "2020-04-08T15:54:39", "upload_time_iso_8601": "2020-04-08T15:54:39.235566Z", "url": "https://files.pythonhosted.org/packages/df/b6/18f1546309ec0f2c898bbeb40fd0f197400a8e59621197c173b01919766f/zillion-0.2.8-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b3c13856a95a9c5e6638343fd6efaf6b", "sha256": "00c97348eb2b17b0354acc85bfbe0f56635b553073b1ba43c99d7a7ed885fc4b"}, "downloads": -1, "filename": "zillion-0.2.8.tar.gz", "has_sig": false, "md5_digest": "b3c13856a95a9c5e6638343fd6efaf6b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 37042, "upload_time": "2020-04-08T15:54:40", "upload_time_iso_8601": "2020-04-08T15:54:40.645733Z", "url": "https://files.pythonhosted.org/packages/cf/24/f731bdc5fc94eb9c9389c9e18c78295f56b666f447d94f01a025c9b040e6/zillion-0.2.8.tar.gz", "yanked": false}], "0.2.9": [{"comment_text": "", "digests": {"md5": "419d72894d17b62c1e709fdfa6bd3fbb", "sha256": "986c27f474be67650468e2152d80374e372a8f5ef6539a657f828ece308bd801"}, "downloads": -1, "filename": "zillion-0.2.9-py3-none-any.whl", "has_sig": false, "md5_digest": "419d72894d17b62c1e709fdfa6bd3fbb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 40984, "upload_time": "2020-04-13T19:29:23", "upload_time_iso_8601": "2020-04-13T19:29:23.163661Z", "url": "https://files.pythonhosted.org/packages/1d/60/084d2493faa5958bacf8d1eff330a372c494d4e75573002a72d8ebb440ee/zillion-0.2.9-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3e1c9d69915c916e02a8f46623365bc3", "sha256": "ed72fc99697dc26ec096333f1d27a69788be25151355fd707e774f2470596685"}, "downloads": -1, "filename": "zillion-0.2.9.tar.gz", "has_sig": false, "md5_digest": "3e1c9d69915c916e02a8f46623365bc3", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 37381, "upload_time": "2020-04-13T19:29:24", "upload_time_iso_8601": "2020-04-13T19:29:24.349151Z", "url": "https://files.pythonhosted.org/packages/ad/ac/46bbef166c87d269a566acd77934f9abb7ef20339f2076d292837f8ae834/zillion-0.2.9.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "0699af01749f65dfd557dc55a8c409f8", "sha256": "d6d45279e8c63049e99b2b6c4c37477df7db584bee236ecd07f52de17fca903c"}, "downloads": -1, "filename": "zillion-0.2.15-py3-none-any.whl", "has_sig": false, "md5_digest": "0699af01749f65dfd557dc55a8c409f8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 64786, "upload_time": "2020-05-05T21:27:10", "upload_time_iso_8601": "2020-05-05T21:27:10.673533Z", "url": "https://files.pythonhosted.org/packages/7a/81/5a5289918769e3408da9b0e6400c71db319648c49db0c23c8f426447472a/zillion-0.2.15-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ef12c8647a678e0d57701a70d6a5d510", "sha256": "628c95ddb1246db06790fafc29d7a78fd17220aa1668a1e0e0bc9abeac4af79a"}, "downloads": -1, "filename": "zillion-0.2.15.tar.gz", "has_sig": false, "md5_digest": "ef12c8647a678e0d57701a70d6a5d510", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 68409, "upload_time": "2020-05-05T21:27:12", "upload_time_iso_8601": "2020-05-05T21:27:12.187120Z", "url": "https://files.pythonhosted.org/packages/53/1c/80ae47ef423933c96ee368d9754b8da4afca05927efb95e43c74b58c386d/zillion-0.2.15.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:16:15 2020"}