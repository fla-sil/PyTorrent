{"info": {"author": "Steven Mirabito", "author_email": "smirabito@csh.rit.edu", "bugtrack_url": null, "classifiers": ["Natural Language :: English", "Operating System :: POSIX :: Linux", "Programming Language :: Python :: 3"], "description": "cshpy\r\n=====\r\n\r\nA collection of Python 3 utilities and wrappers for services run by [Computer Science House](http://csh.rit.edu/) at RIT.\r\n\r\n## Installation\r\n\r\n    $ pip install cshpy3\r\n\r\n(or just download the source)\r\n\r\n## Basic Usage\r\n```python\r\n#!/usr/bin/python\r\nfrom csh.cshldap import LDAP\r\n\r\n# Creates a connection to CSH's LDAP server as an object with some helper functions\r\n# You can also omit the username and password to bind with a Kerberos ticket\r\nldap = LDAP('<user>','<password>')\r\n\r\n# Returns a list of results, in this case of users whose uid starts with 'duck'.\r\n# All CSH LDAP fields are included in a similar way.\r\nldap.search(uid='duck*')\r\n\r\n# This will return users whose common names (cn) start with 'Chris'\r\nldap.search(cn='Chris')\r\n\r\n# This will return users whose uid starts with 'user', and cn starts with 'Name'\r\nldap.search(uid='user*', cn='Name*')\r\n\r\n# Returns a dict of a user's attributes. Performs a search, and then grabs the first result.\r\n# Are you feelin' lucky?\r\nldap.member('uidValue')\r\n\r\n# Equivalent to search(uid='*')\r\nldap.members()\r\n\r\n# You may optionally include a search string.\r\n# Equivalent to search(uid='username')\r\nldap.members('test')\r\n```\r\n\r\n## Functions\r\n\r\n### search()\r\n\r\nSearch returns a list of tuples containing a string and a dictionary.\r\nThe first element of each tuple is the Distinguished Name (dn) of the entry.\r\nThis is the path to the entry in ldap. The second element of each tuple is a\r\ndictionary of attributes as keys.\r\n\r\nSpecific tweaks for CSH include the insertion of two fields, `groups` and `committee`.\r\nIf a member is on eboard, `committee` will have the name of their committee. Otherwise,\r\nthis field will not be present.\r\n`groups` will contain a list of all the groups a member belongs to.\r\n\r\nSo to be clear the return looks like this: `[('dn',{attributes})]`\r\n\r\nYou may optionally specify a different base than the default. `search(base=...)`\r\n\r\n####Word of caution: Not all results are guaranteed to have the same attribute fields\r\nin their dictionary. Do not depend on all users having a `twitterName` for example.\r\n\r\n### modify(uid, attr1=val1, attr2=val2)\r\n\r\nGiven a uid, and attribute values, modifies those values in ldap.\r\nYou may optionally specify a base other than Users.\r\n\r\n### member(uid)\r\n\r\nReturns a dict of attributes for the user. Equivalent to `search(uid=uid)[0][1]`.\r\n\r\n### members()\r\n\r\nReturns a list of users. Shorthand for `search(uid='*')`, or some variant *\r\n\r\n### group(cn)\r\nSearches groups by common name, returns a list of users in that group.\r\n\r\n### getGroups(dn)\r\nReturns a list of cns for groups the given member is a part of.\r\n\r\n### rtps()\r\n\r\nReturns a list of rtps. Shorthand for `group('rtp')`\r\n\r\n### drinkAdmins()\r\n\r\nReturns a list of drink admins. Shorthand for `group('drink')`\r\n\r\n### eboard()\r\n\r\nReturns a list of eboard members. Shorthand for `group('eboard')`", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "csh", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "cshpy3", "package_url": "https://pypi.org/project/cshpy3/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/cshpy3/", "project_urls": null, "release_url": "https://pypi.org/project/cshpy3/0.3.0/", "requires_dist": null, "requires_python": null, "summary": "A collection of Python 3 utilities and wrappers for services run by Computer Science House at RIT", "version": "0.3.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            cshpy\n<br>=====\n<br>\n<br>A collection of Python 3 utilities and wrappers for services run by [Computer Science House](http://csh.rit.edu/) at RIT.\n<br>\n<br>## Installation\n<br>\n<br>    $ pip install cshpy3\n<br>\n<br>(or just download the source)\n<br>\n<br>## Basic Usage\n<br>```python\n<br>#!/usr/bin/python\n<br>from csh.cshldap import LDAP\n<br>\n<br># Creates a connection to CSH's LDAP server as an object with some helper functions\n<br># You can also omit the username and password to bind with a Kerberos ticket\n<br>ldap = LDAP('&lt;user&gt;','&lt;password&gt;')\n<br>\n<br># Returns a list of results, in this case of users whose uid starts with 'duck'.\n<br># All CSH LDAP fields are included in a similar way.\n<br>ldap.search(uid='duck*')\n<br>\n<br># This will return users whose common names (cn) start with 'Chris'\n<br>ldap.search(cn='Chris')\n<br>\n<br># This will return users whose uid starts with 'user', and cn starts with 'Name'\n<br>ldap.search(uid='user*', cn='Name*')\n<br>\n<br># Returns a dict of a user's attributes. Performs a search, and then grabs the first result.\n<br># Are you feelin' lucky?\n<br>ldap.member('uidValue')\n<br>\n<br># Equivalent to search(uid='*')\n<br>ldap.members()\n<br>\n<br># You may optionally include a search string.\n<br># Equivalent to search(uid='username')\n<br>ldap.members('test')\n<br>```\n<br>\n<br>## Functions\n<br>\n<br>### search()\n<br>\n<br>Search returns a list of tuples containing a string and a dictionary.\n<br>The first element of each tuple is the Distinguished Name (dn) of the entry.\n<br>This is the path to the entry in ldap. The second element of each tuple is a\n<br>dictionary of attributes as keys.\n<br>\n<br>Specific tweaks for CSH include the insertion of two fields, `groups` and `committee`.\n<br>If a member is on eboard, `committee` will have the name of their committee. Otherwise,\n<br>this field will not be present.\n<br>`groups` will contain a list of all the groups a member belongs to.\n<br>\n<br>So to be clear the return looks like this: `[('dn',{attributes})]`\n<br>\n<br>You may optionally specify a different base than the default. `search(base=...)`\n<br>\n<br>####Word of caution: Not all results are guaranteed to have the same attribute fields\n<br>in their dictionary. Do not depend on all users having a `twitterName` for example.\n<br>\n<br>### modify(uid, attr1=val1, attr2=val2)\n<br>\n<br>Given a uid, and attribute values, modifies those values in ldap.\n<br>You may optionally specify a base other than Users.\n<br>\n<br>### member(uid)\n<br>\n<br>Returns a dict of attributes for the user. Equivalent to `search(uid=uid)[0][1]`.\n<br>\n<br>### members()\n<br>\n<br>Returns a list of users. Shorthand for `search(uid='*')`, or some variant *\n<br>\n<br>### group(cn)\n<br>Searches groups by common name, returns a list of users in that group.\n<br>\n<br>### getGroups(dn)\n<br>Returns a list of cns for groups the given member is a part of.\n<br>\n<br>### rtps()\n<br>\n<br>Returns a list of rtps. Shorthand for `group('rtp')`\n<br>\n<br>### drinkAdmins()\n<br>\n<br>Returns a list of drink admins. Shorthand for `group('drink')`\n<br>\n<br>### eboard()\n<br>\n<br>Returns a list of eboard members. Shorthand for `group('eboard')`\n          </div>"}, "last_serial": 1897863, "releases": {"0.0.1.dev21": [], "0.3.0": [], "0.3.0.0a1.dev21": [{"comment_text": "", "digests": {"md5": "36786a81e1b15a4259ebc422f3314120", "sha256": "49da7f123d3287f429738fbda25f0ecc740e95ea4dfc90c8d691df1199b22e25"}, "downloads": -1, "filename": "cshpy3-0.3.0.0a1.dev21-py3-none-any.whl", "has_sig": false, "md5_digest": "36786a81e1b15a4259ebc422f3314120", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 10745, "upload_time": "2016-01-10T16:51:43", "upload_time_iso_8601": "2016-01-10T16:51:43.846968Z", "url": "https://files.pythonhosted.org/packages/db/2b/a69c3d7d8bb5988066f9366f786a4db3e4a6f497e593381ac0b490897f83/cshpy3-0.3.0.0a1.dev21-py3-none-any.whl", "yanked": false}]}, "urls": [], "timestamp": "Fri May  8 00:41:49 2020"}