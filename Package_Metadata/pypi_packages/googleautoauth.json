{"info": {"author": "Dustin Oprea", "author_email": "dustin@randomingenuity.com", "bugtrack_url": null, "classifiers": [], "description": "Overview\n========\n\nThe Google API OAuth authorization process is very complex when running from command-line applications:\n\n1. Developer: Request a URL from the Google client-tools.\n2. Developer: Present the URL to the user and have them open it in a browser.\n3. User: Logs-in.\n4. User: Acknowledge that the tool will be able to access user's data.\n5. Google: Authorization portal provides a code/token.\n6. User: Provides the code to the tool at the command-line.\n7. Developer: Does a final authorization with Google using the token.\n\nThe tool must also periodically renew its authorization (whenever the expiration timestamp is reached).\n\nThis tool eliminates most of the steps:\n\n1. Developer: Provide the developer's client-identity information.\n2. Us: Create a temporary webserver on an available port.\n3. Us: Build a URL that takes the local webserver as the redirect URI.\n4. Us: Open the Google authentication portal in the default web browser.\n5. User: Acknowledges the request in the browser.\n6. Google: Authorize and redirect to the local, temporary webserver (passes the authorization token as an argument). Since Google does not need to talk directly to the webserver (the browser just redirects to a *localhost* URL), firewalls do not matter.\n7. Us: The temporary webserver receives and records the token.\n8. Us: The webserver is terminated and the authorization object records the token.\n\nNotice that now only one step needs to be implemented by the developer and only one step needs to be performed by the user.\n\nThe interactive flow is only necessary before the authorization file is initially created. All further requests will be done in the background.\n\n\nImplementation Requirements\n===========================\n\n- An interactive browser (e.g. Chrome, Lynx, etc..) is available and can be opened during install/setup. The user will have to manually close this when finished.\n- An authorization token can be stored on the filesystem.\n\n\nUsage\n=====\n\nFlow\n----\n\nExamples are for the YouTube API.\n\nBuild your client-identity::\n\n    client_id = 'abc'\n    client_secret = 'def'\n\n    cc = googleautoauth.authorize.build_client_credentials(client_id, client_secret)\n\nCreate a `ClientManager` object::\n\n    service_name = 'youtube'\n    service_version = 'v3'\n\n    scopes = [\n        'https://www.googleapis.com/auth/youtube.readonly',\n    ]\n\n    # If this is `None` or omitted, the value will either be taken from `GAA_GOOGLE_API_AUTHORIZATION_REPO_PATH` or default to '~/.googleautoauth/<hash>', where hash is calculated from the client, service, and scope info.\n    filepath = None\n\n    cm = googleautoauth.client_manager.ClientManager(\n            service_name,\n            service_version,\n            cc,\n            scopes,\n            filepath=filepath)\n\nExample usage::\n\n    # This will open the Google authorization portal in the browser if the\n    # authorization file doesn't already exist.\n    client = cm.get_client()\n\n    playlists = client.playlists()\n\n    request = \\\n        playlists.list(\n            mine=True,\n            part='contentDetails')\n\n    result = request.execute()\n    # result['kind'] == 'youtube#playlistListResponse'\n\nThe `ClientManager` object can be cached but the client object returned by `cm.get_client()` can not. This call will automatically renew the API authorization as required.\n\n\nCommand-Line Tool\n-----------------\n\nA command-line tool (`gaa_authorize`) is provided to pre-create an authorization, for convenience. This can be used to ensure that no interactive authoriation is triggered from your program flow.\n\nThe tool can also be used to get a URL (-u) that can be used to manually get a token and to then manually register it locally (-t).\n\nExample usage::\n\n    $ gaa_authorize \"service name\" \"service version\" \"(client ID)\" \"(client secret)\" --scope \"(scope 1)\" --scope \"(scope 2...)\" -u\n    https://accounts.google.com/o/oauth2/auth?scope=https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fyoutube.readonly&redirect_uri=urn%3Aietf%3Awg%3Aoauth%3A2.0%3Aoob&response_type=code&client_id=872980721285-bk2f9bk1r1j6tmo5k9ndbia4ef6nmi80.apps.googleusercontent.com&access_type=offline\n\n    $ gaa_authorize \"service name\" \"service version\" \"(client ID)\" \"(client secret)\" --scope \"(scope 1)\" --scope \"(scope 2...)\" -t 4/zXaFbTbevyn3zEizMiRdY0GVb3BM7XBUqbGdJhi8Fh8\n\n\nNotes\n=====\n\n- By default, the first available open port is used for the webserver (which is then passed to Google in the redirect-URL). You may use a specific port by setting it into `GAA_WEBSERVER_PORT`.\n\n\nTesting\n=======\n\nTo run the tests::\n\n    $ ./test.sh\n\nThe tests will require user interaction with the browser.", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/dsoprea/python-googleautoauth", "keywords": "google oauth oauth2", "license": "", "maintainer": "", "maintainer_email": "", "name": "googleautoauth", "package_url": "https://pypi.org/project/googleautoauth/", "platform": "", "project_url": "https://pypi.org/project/googleautoauth/", "project_urls": {"Homepage": "https://github.com/dsoprea/python-googleautoauth"}, "release_url": "https://pypi.org/project/googleautoauth/0.2.10/", "requires_dist": null, "requires_python": "", "summary": "Library to streamline Google authentication from the command-line.", "version": "0.2.10", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"overview\">\n<h2>Overview</h2>\n<p>The Google API OAuth authorization process is very complex when running from command-line applications:</p>\n<ol>\n<li>Developer: Request a URL from the Google client-tools.</li>\n<li>Developer: Present the URL to the user and have them open it in a browser.</li>\n<li>User: Logs-in.</li>\n<li>User: Acknowledge that the tool will be able to access user\u2019s data.</li>\n<li>Google: Authorization portal provides a code/token.</li>\n<li>User: Provides the code to the tool at the command-line.</li>\n<li>Developer: Does a final authorization with Google using the token.</li>\n</ol>\n<p>The tool must also periodically renew its authorization (whenever the expiration timestamp is reached).</p>\n<p>This tool eliminates most of the steps:</p>\n<ol>\n<li>Developer: Provide the developer\u2019s client-identity information.</li>\n<li>Us: Create a temporary webserver on an available port.</li>\n<li>Us: Build a URL that takes the local webserver as the redirect URI.</li>\n<li>Us: Open the Google authentication portal in the default web browser.</li>\n<li>User: Acknowledges the request in the browser.</li>\n<li>Google: Authorize and redirect to the local, temporary webserver (passes the authorization token as an argument). Since Google does not need to talk directly to the webserver (the browser just redirects to a <em>localhost</em> URL), firewalls do not matter.</li>\n<li>Us: The temporary webserver receives and records the token.</li>\n<li>Us: The webserver is terminated and the authorization object records the token.</li>\n</ol>\n<p>Notice that now only one step needs to be implemented by the developer and only one step needs to be performed by the user.</p>\n<p>The interactive flow is only necessary before the authorization file is initially created. All further requests will be done in the background.</p>\n</div>\n<div id=\"implementation-requirements\">\n<h2>Implementation Requirements</h2>\n<ul>\n<li>An interactive browser (e.g. Chrome, Lynx, etc..) is available and can be opened during install/setup. The user will have to manually close this when finished.</li>\n<li>An authorization token can be stored on the filesystem.</li>\n</ul>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<div id=\"flow\">\n<h3>Flow</h3>\n<p>Examples are for the YouTube API.</p>\n<p>Build your client-identity:</p>\n<pre>client_id = 'abc'\nclient_secret = 'def'\n\ncc = googleautoauth.authorize.build_client_credentials(client_id, client_secret)\n</pre>\n<p>Create a <cite>ClientManager</cite> object:</p>\n<pre>service_name = 'youtube'\nservice_version = 'v3'\n\nscopes = [\n    'https://www.googleapis.com/auth/youtube.readonly',\n]\n\n# If this is `None` or omitted, the value will either be taken from `GAA_GOOGLE_API_AUTHORIZATION_REPO_PATH` or default to '~/.googleautoauth/&lt;hash&gt;', where hash is calculated from the client, service, and scope info.\nfilepath = None\n\ncm = googleautoauth.client_manager.ClientManager(\n        service_name,\n        service_version,\n        cc,\n        scopes,\n        filepath=filepath)\n</pre>\n<p>Example usage:</p>\n<pre># This will open the Google authorization portal in the browser if the\n# authorization file doesn't already exist.\nclient = cm.get_client()\n\nplaylists = client.playlists()\n\nrequest = \\\n    playlists.list(\n        mine=True,\n        part='contentDetails')\n\nresult = request.execute()\n# result['kind'] == 'youtube#playlistListResponse'\n</pre>\n<p>The <cite>ClientManager</cite> object can be cached but the client object returned by <cite>cm.get_client()</cite> can not. This call will automatically renew the API authorization as required.</p>\n</div>\n<div id=\"command-line-tool\">\n<h3>Command-Line Tool</h3>\n<p>A command-line tool (<cite>gaa_authorize</cite>) is provided to pre-create an authorization, for convenience. This can be used to ensure that no interactive authoriation is triggered from your program flow.</p>\n<p>The tool can also be used to get a URL (-u) that can be used to manually get a token and to then manually register it locally (-t).</p>\n<p>Example usage:</p>\n<pre>$ gaa_authorize \"service name\" \"service version\" \"(client ID)\" \"(client secret)\" --scope \"(scope 1)\" --scope \"(scope 2...)\" -u\nhttps://accounts.google.com/o/oauth2/auth?scope=https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fyoutube.readonly&amp;redirect_uri=urn%3Aietf%3Awg%3Aoauth%3A2.0%3Aoob&amp;response_type=code&amp;client_id=872980721285-bk2f9bk1r1j6tmo5k9ndbia4ef6nmi80.apps.googleusercontent.com&amp;access_type=offline\n\n$ gaa_authorize \"service name\" \"service version\" \"(client ID)\" \"(client secret)\" --scope \"(scope 1)\" --scope \"(scope 2...)\" -t 4/zXaFbTbevyn3zEizMiRdY0GVb3BM7XBUqbGdJhi8Fh8\n</pre>\n</div>\n</div>\n<div id=\"notes\">\n<h2>Notes</h2>\n<ul>\n<li>By default, the first available open port is used for the webserver (which is then passed to Google in the redirect-URL). You may use a specific port by setting it into <cite>GAA_WEBSERVER_PORT</cite>.</li>\n</ul>\n</div>\n<div id=\"testing\">\n<h2>Testing</h2>\n<p>To run the tests:</p>\n<pre>$ ./test.sh\n</pre>\n<p>The tests will require user interaction with the browser.</p>\n</div>\n\n          </div>"}, "last_serial": 3709288, "releases": {"0.2.0": [{"comment_text": "", "digests": {"md5": "dbb434ef412db16b0a688578d85f2ea2", "sha256": "9d66ab51cd295e7fc8160642140b1849d015d12e1681a5e186a6758462475d58"}, "downloads": -1, "filename": "googleautoauth-0.2.0.tar.gz", "has_sig": false, "md5_digest": "dbb434ef412db16b0a688578d85f2ea2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6715, "upload_time": "2018-01-01T10:02:14", "upload_time_iso_8601": "2018-01-01T10:02:14.470834Z", "url": "https://files.pythonhosted.org/packages/c2/ae/582fb0388f59d0fde87a9d43ad3054cccf27fdde7b4fdcd268c6c223d469/googleautoauth-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "80169714cd693aa6802eabe2edfce85b", "sha256": "ea75bfb8015d40af36c542ed359cfb6a41ac818837456db83f3fe083dadaba3a"}, "downloads": -1, "filename": "googleautoauth-0.2.1.tar.gz", "has_sig": false, "md5_digest": "80169714cd693aa6802eabe2edfce85b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6718, "upload_time": "2018-01-01T10:04:19", "upload_time_iso_8601": "2018-01-01T10:04:19.962494Z", "url": "https://files.pythonhosted.org/packages/57/6e/37e43839214b4f751e64c824a21d25e3fcda0ce07d2b3d928f991ed5aa8f/googleautoauth-0.2.1.tar.gz", "yanked": false}], "0.2.10": [{"comment_text": "", "digests": {"md5": "ed5ece9aa15db68451f64755c26155cd", "sha256": "a8ba147e8f76913234a999bf4cea20ebac524c3e5e3aca6b28e9fde596a3ebdd"}, "downloads": -1, "filename": "googleautoauth-0.2.10.tar.gz", "has_sig": false, "md5_digest": "ed5ece9aa15db68451f64755c26155cd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11417, "upload_time": "2018-03-27T06:35:35", "upload_time_iso_8601": "2018-03-27T06:35:35.103324Z", "url": "https://files.pythonhosted.org/packages/47/f8/d80a793bdba0bf586937832ffb23133f4016dde589741da75ad50877eee5/googleautoauth-0.2.10.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "75a52e2a5fbbecc2a712cb3c3b9bcb45", "sha256": "09cef45b45a3582c978afb85582f0e6df86ae5ca50e43d65ba2492a4f74bbfa5"}, "downloads": -1, "filename": "googleautoauth-0.2.2.tar.gz", "has_sig": false, "md5_digest": "75a52e2a5fbbecc2a712cb3c3b9bcb45", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6830, "upload_time": "2018-01-01T15:22:48", "upload_time_iso_8601": "2018-01-01T15:22:48.028824Z", "url": "https://files.pythonhosted.org/packages/54/af/01c4cb46e5ba3be9bf6fc0c0d0e38b33c50bc56f8fd78f7c51c78447b472/googleautoauth-0.2.2.tar.gz", "yanked": false}], "0.2.3": [{"comment_text": "", "digests": {"md5": "e35ceda2056299666a259197a4a7d81c", "sha256": "b0dcf5dbb08f1f76e7e96c1a1ab657292755dafe71b2e0d65ce59e3ae1bbe348"}, "downloads": -1, "filename": "googleautoauth-0.2.3.tar.gz", "has_sig": false, "md5_digest": "e35ceda2056299666a259197a4a7d81c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7194, "upload_time": "2018-01-01T18:50:30", "upload_time_iso_8601": "2018-01-01T18:50:30.068739Z", "url": "https://files.pythonhosted.org/packages/4a/1a/87d006b7d3239ace4def98d7cc05293a961837f92f20d6b8c35b17253875/googleautoauth-0.2.3.tar.gz", "yanked": false}], "0.2.4": [{"comment_text": "", "digests": {"md5": "70728dc94ddd8e0d57db31b529353edd", "sha256": "a5e5060d83c91058bf252ba0d7ed515ce0f326ba70e9e8de1feed40d80d397b9"}, "downloads": -1, "filename": "googleautoauth-0.2.4.tar.gz", "has_sig": false, "md5_digest": "70728dc94ddd8e0d57db31b529353edd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7906, "upload_time": "2018-01-01T20:29:18", "upload_time_iso_8601": "2018-01-01T20:29:18.863398Z", "url": "https://files.pythonhosted.org/packages/17/ae/69f52a28ad95a4c91a31cac68cb5323dbf7592d83c39313309cea1778b3b/googleautoauth-0.2.4.tar.gz", "yanked": false}], "0.2.5": [{"comment_text": "", "digests": {"md5": "66c1d65098bd8dbadeccc7d4108f77ce", "sha256": "2d977de414f1e8c6fdb581c2996891357d646e7ba167e4a276fe2c3e6a5ac966"}, "downloads": -1, "filename": "googleautoauth-0.2.5.tar.gz", "has_sig": false, "md5_digest": "66c1d65098bd8dbadeccc7d4108f77ce", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8350, "upload_time": "2018-01-02T00:44:53", "upload_time_iso_8601": "2018-01-02T00:44:53.158519Z", "url": "https://files.pythonhosted.org/packages/06/7e/afa6fb9b7b8d2b708779caad5b272718ca4d9ae125dbb578309a855a41fe/googleautoauth-0.2.5.tar.gz", "yanked": false}], "0.2.6": [{"comment_text": "", "digests": {"md5": "25b4bf74e876d44caf7f98df1deb0d64", "sha256": "ad57ea66649789b65f3dfe7227e7732b24c0a8a671eec920d140c774aca57b72"}, "downloads": -1, "filename": "googleautoauth-0.2.6.tar.gz", "has_sig": false, "md5_digest": "25b4bf74e876d44caf7f98df1deb0d64", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8519, "upload_time": "2018-01-02T05:03:58", "upload_time_iso_8601": "2018-01-02T05:03:58.367068Z", "url": "https://files.pythonhosted.org/packages/97/6b/0d9f8dfc8d1b54f77bf0379279b83f1cf7f996b1a5d82d9ca466b2fc9ddb/googleautoauth-0.2.6.tar.gz", "yanked": false}], "0.2.7": [{"comment_text": "", "digests": {"md5": "25de76b4186b70bb5ef4e09cf5a354a1", "sha256": "d0d6c91b18ce908f6832e2fc31c05032400896adc59a62118534f7d32ba8aa96"}, "downloads": -1, "filename": "googleautoauth-0.2.7.tar.gz", "has_sig": false, "md5_digest": "25de76b4186b70bb5ef4e09cf5a354a1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10375, "upload_time": "2018-01-02T10:13:35", "upload_time_iso_8601": "2018-01-02T10:13:35.912323Z", "url": "https://files.pythonhosted.org/packages/3d/be/d35220c2a212d9fb7a41f8f522045cd9c738737c687ac418359d2f25ab52/googleautoauth-0.2.7.tar.gz", "yanked": false}], "0.2.8": [{"comment_text": "", "digests": {"md5": "e9f68f49110c5738f24e34b71e9a27d4", "sha256": "ddc2c88afd36eeac245b8af9d6ffdbceb9ff1876a69f43e010ad3e532d79a92b"}, "downloads": -1, "filename": "googleautoauth-0.2.8.tar.gz", "has_sig": false, "md5_digest": "e9f68f49110c5738f24e34b71e9a27d4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11540, "upload_time": "2018-01-02T18:53:34", "upload_time_iso_8601": "2018-01-02T18:53:34.213810Z", "url": "https://files.pythonhosted.org/packages/8e/ef/0c6a6accf8ff7833429baf49bdcca3942e82d467252ceaf0507aaf694945/googleautoauth-0.2.8.tar.gz", "yanked": false}], "0.2.9": [{"comment_text": "", "digests": {"md5": "1ab54d28e62a3d4422016aa50ebca4a8", "sha256": "5949951966b09aa37a4dec669e302d3bf7586d7a81c9fa1d5e1f799feade4a7a"}, "downloads": -1, "filename": "googleautoauth-0.2.9.tar.gz", "has_sig": false, "md5_digest": "1ab54d28e62a3d4422016aa50ebca4a8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11945, "upload_time": "2018-01-03T05:03:33", "upload_time_iso_8601": "2018-01-03T05:03:33.597918Z", "url": "https://files.pythonhosted.org/packages/c8/db/84f19ac79a40c23d62dea2408a59bc4053f001bbb17d0b536d6e0eefff23/googleautoauth-0.2.9.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ed5ece9aa15db68451f64755c26155cd", "sha256": "a8ba147e8f76913234a999bf4cea20ebac524c3e5e3aca6b28e9fde596a3ebdd"}, "downloads": -1, "filename": "googleautoauth-0.2.10.tar.gz", "has_sig": false, "md5_digest": "ed5ece9aa15db68451f64755c26155cd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11417, "upload_time": "2018-03-27T06:35:35", "upload_time_iso_8601": "2018-03-27T06:35:35.103324Z", "url": "https://files.pythonhosted.org/packages/47/f8/d80a793bdba0bf586937832ffb23133f4016dde589741da75ad50877eee5/googleautoauth-0.2.10.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:55:46 2020"}