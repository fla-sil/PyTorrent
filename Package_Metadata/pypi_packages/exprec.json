{"info": {"author": "Martin Nordstrom", "author_email": "martin.nordstrom87@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6"], "description": "Exprec\n======\n\nExprec records your experiments so you can compare different runs and easily reproduce results. \n\n* Track your experiments for experiment comparison and reproducability\n* Minimum setup: only two lines of code required\n* Framework agnostic - works with any machine learning/deep learning framework\n* Experiments are saved locally - nothing is saved in the cloud\n\n\n![Dashboard](https://user-images.githubusercontent.com/176676/48298763-1f26c880-e506-11e8-9846-59455764604c.gif)\n\n\nInstallation\n------------\n\n```bash\npip install exprec\n```\n\n\nUsage\n-----\n\n### Minimal example\n\n```python\nfrom exprec import Experiment\n\nwith Experiment() as experiment:\n    # YOUR CODE HERE\n```\n\nAn experiment is recorded in the `with` statement. This includes recording the terminal output, the source code used and the packages that are installed at the time the experiment runs. You can also add parameters, scalars and images to the experiment (see below). \n\n\n### Dashboard\n\nRun `exprec` in your terminal to start the dashboard. `exprec` has to be run from the same folder as you started your python script. \n\nNow visit http://localhost:8080/ in your browser to see the dashboard. If the client and the exprec server run on different machines, set the flag `--host=0.0.0.0` when starting `exprec`. This allows any client with access to the server to see the dashboard. \n\n\n### More code examples\n\n```python\nfrom exprec import Experiment\n\nwith Experiment(title='My experiment', tags=['tag1', 'tag2']) as experiment:\n    experiment.set_parameter('test_parameter', 5)\n\n    for i in range(10):\n        experiment.add_scalar('2x', 2*i, step=i)\n        experiment.add_scalar('3x', 3*i, step=i)\n\n    with experiment.open('filename.txt', mode='w') as fp:\n        fp.write('test\\n')\n        # This creates a file in the experiment's folder (`.exprec/<experiment-id>/files/filename.txt`). \n\n    raise ValueError('Invalid value')\n    # The experiment will finish with status 'failed'. The exception is also logged. \n```\n\n\nExamples\n--------\n\nScripts under `examples/` demonstrate how to use this package. \n\n\nAPI\n---\n\n### Experiment\n\n```python\nExperiment(title='', tags=[], verbose=True, exceptions_to_ignore=['KeyboardInterrupt'], name='')\n```\n\n#### set_parameter\n\n```python\nExperiment.set_parameter(name, value)\n```\nSets the parameter to the given value.\n\nOnly one value can be recorded per parameter. You can overwrite a previously set parameter.\n\n#### add_scalar\n\n```python\nExperiment.add_scalar(name, value, step=None)\n```\nRecords the scalar's value at a given step.\n\n#### add_image\n\n```python\nExperiment.add_image(name, image, step)\n```\nAdds an image at a given step.\n```\nArgs:\n    name (str): The name of the image\n    image: The image to save. Should either be a Pillow image, or a numpy array which can be converted to a Pillow image.\n    step (int)\n```\n\n#### open\n\n```python\nExperiment.open(filename, mode='r', uuid=None)\n```\nOpens a file in the experiment's folder. \n```\nArgs:\n    filename (str): A filename or path to a filename\n    mode (str): The mode in which the file is opened. Supports the same modes as Python's built-in `open()` function.\n    uuid (str, None): A previous experiment's id. If given, it will look for the filename in the previous experiment's\n        saved files. Only supports 'r' mode when a uuid is given.\nReturns:\n    A file object\n```\n\n\nWhy \"Exprec\"?\n-------------\n\nExprec is short for Experiment recorder. \n\n\nLicense\n-------\n\nMIT License\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/martno/exprec/", "keywords": "", "license": "MIT license", "maintainer": "", "maintainer_email": "", "name": "exprec", "package_url": "https://pypi.org/project/exprec/", "platform": "", "project_url": "https://pypi.org/project/exprec/", "project_urls": {"Homepage": "https://github.com/martno/exprec/"}, "release_url": "https://pypi.org/project/exprec/0.1.1/", "requires_dist": ["Flask (>=0.12.2)", "attrs (>=17.4.0)", "bokeh (==0.12.15)", "humanize (>=0.5.1)", "pandas (>=0.22.0)", "GitPython (>=2.1.10)", "colorhash (>=1.0.2)", "markdown (>=2.6.11)", "psutil (>=5.4.6)", "Pillow (>=5.1.0)", "Jinja2 (>=2.10)"], "requires_python": "", "summary": "Exprec records your experiments so you can compare different runs and easily reproduce results.", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Exprec</h1>\n<p>Exprec records your experiments so you can compare different runs and easily reproduce results.</p>\n<ul>\n<li>Track your experiments for experiment comparison and reproducability</li>\n<li>Minimum setup: only two lines of code required</li>\n<li>Framework agnostic - works with any machine learning/deep learning framework</li>\n<li>Experiments are saved locally - nothing is saved in the cloud</li>\n</ul>\n<p><img alt=\"Dashboard\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f50cc6e631e5f5dd92c2d86995bb74031de9f7ee/68747470733a2f2f757365722d696d616765732e67697468756275736572636f6e74656e742e636f6d2f3137363637362f34383239383736332d31663236633838302d653530362d313165382d393834362d3539343535373634363034632e676966\"></p>\n<h2>Installation</h2>\n<pre>pip install exprec\n</pre>\n<h2>Usage</h2>\n<h3>Minimal example</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">exprec</span> <span class=\"kn\">import</span> <span class=\"n\">Experiment</span>\n\n<span class=\"k\">with</span> <span class=\"n\">Experiment</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">experiment</span><span class=\"p\">:</span>\n    <span class=\"c1\"># YOUR CODE HERE</span>\n</pre>\n<p>An experiment is recorded in the <code>with</code> statement. This includes recording the terminal output, the source code used and the packages that are installed at the time the experiment runs. You can also add parameters, scalars and images to the experiment (see below).</p>\n<h3>Dashboard</h3>\n<p>Run <code>exprec</code> in your terminal to start the dashboard. <code>exprec</code> has to be run from the same folder as you started your python script.</p>\n<p>Now visit <a href=\"http://localhost:8080/\" rel=\"nofollow\">http://localhost:8080/</a> in your browser to see the dashboard. If the client and the exprec server run on different machines, set the flag <code>--host=0.0.0.0</code> when starting <code>exprec</code>. This allows any client with access to the server to see the dashboard.</p>\n<h3>More code examples</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">exprec</span> <span class=\"kn\">import</span> <span class=\"n\">Experiment</span>\n\n<span class=\"k\">with</span> <span class=\"n\">Experiment</span><span class=\"p\">(</span><span class=\"n\">title</span><span class=\"o\">=</span><span class=\"s1\">'My experiment'</span><span class=\"p\">,</span> <span class=\"n\">tags</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'tag1'</span><span class=\"p\">,</span> <span class=\"s1\">'tag2'</span><span class=\"p\">])</span> <span class=\"k\">as</span> <span class=\"n\">experiment</span><span class=\"p\">:</span>\n    <span class=\"n\">experiment</span><span class=\"o\">.</span><span class=\"n\">set_parameter</span><span class=\"p\">(</span><span class=\"s1\">'test_parameter'</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">)</span>\n\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">):</span>\n        <span class=\"n\">experiment</span><span class=\"o\">.</span><span class=\"n\">add_scalar</span><span class=\"p\">(</span><span class=\"s1\">'2x'</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">step</span><span class=\"o\">=</span><span class=\"n\">i</span><span class=\"p\">)</span>\n        <span class=\"n\">experiment</span><span class=\"o\">.</span><span class=\"n\">add_scalar</span><span class=\"p\">(</span><span class=\"s1\">'3x'</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"o\">*</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">step</span><span class=\"o\">=</span><span class=\"n\">i</span><span class=\"p\">)</span>\n\n    <span class=\"k\">with</span> <span class=\"n\">experiment</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"s1\">'filename.txt'</span><span class=\"p\">,</span> <span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"s1\">'w'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">fp</span><span class=\"p\">:</span>\n        <span class=\"n\">fp</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"s1\">'test</span><span class=\"se\">\\n</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n        <span class=\"c1\"># This creates a file in the experiment's folder (`.exprec/&lt;experiment-id&gt;/files/filename.txt`). </span>\n\n    <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s1\">'Invalid value'</span><span class=\"p\">)</span>\n    <span class=\"c1\"># The experiment will finish with status 'failed'. The exception is also logged. </span>\n</pre>\n<h2>Examples</h2>\n<p>Scripts under <code>examples/</code> demonstrate how to use this package.</p>\n<h2>API</h2>\n<h3>Experiment</h3>\n<pre><span class=\"n\">Experiment</span><span class=\"p\">(</span><span class=\"n\">title</span><span class=\"o\">=</span><span class=\"s1\">''</span><span class=\"p\">,</span> <span class=\"n\">tags</span><span class=\"o\">=</span><span class=\"p\">[],</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">exceptions_to_ignore</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'KeyboardInterrupt'</span><span class=\"p\">],</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">''</span><span class=\"p\">)</span>\n</pre>\n<h4>set_parameter</h4>\n<pre><span class=\"n\">Experiment</span><span class=\"o\">.</span><span class=\"n\">set_parameter</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">)</span>\n</pre>\n<p>Sets the parameter to the given value.</p>\n<p>Only one value can be recorded per parameter. You can overwrite a previously set parameter.</p>\n<h4>add_scalar</h4>\n<pre><span class=\"n\">Experiment</span><span class=\"o\">.</span><span class=\"n\">add_scalar</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">step</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n</pre>\n<p>Records the scalar's value at a given step.</p>\n<h4>add_image</h4>\n<pre><span class=\"n\">Experiment</span><span class=\"o\">.</span><span class=\"n\">add_image</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">image</span><span class=\"p\">,</span> <span class=\"n\">step</span><span class=\"p\">)</span>\n</pre>\n<p>Adds an image at a given step.</p>\n<pre><code>Args:\n    name (str): The name of the image\n    image: The image to save. Should either be a Pillow image, or a numpy array which can be converted to a Pillow image.\n    step (int)\n</code></pre>\n<h4>open</h4>\n<pre><span class=\"n\">Experiment</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"p\">,</span> <span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"s1\">'r'</span><span class=\"p\">,</span> <span class=\"n\">uuid</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n</pre>\n<p>Opens a file in the experiment's folder.</p>\n<pre><code>Args:\n    filename (str): A filename or path to a filename\n    mode (str): The mode in which the file is opened. Supports the same modes as Python's built-in `open()` function.\n    uuid (str, None): A previous experiment's id. If given, it will look for the filename in the previous experiment's\n        saved files. Only supports 'r' mode when a uuid is given.\nReturns:\n    A file object\n</code></pre>\n<h2>Why \"Exprec\"?</h2>\n<p>Exprec is short for Experiment recorder.</p>\n<h2>License</h2>\n<p>MIT License</p>\n\n          </div>"}, "last_serial": 4499370, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "d0b6a9b80d8ae7d476caf46dbd0ee573", "sha256": "30d65760f903b1b998f79e326be95e82011a90956044e2ff4913616b2df4c8df"}, "downloads": -1, "filename": "exprec-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "d0b6a9b80d8ae7d476caf46dbd0ee573", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 29692, "upload_time": "2018-11-18T09:10:13", "upload_time_iso_8601": "2018-11-18T09:10:13.621849Z", "url": "https://files.pythonhosted.org/packages/b0/43/ff0f986def5e6ce5d6f312ae33285db50af317c33e69b01144b12ff350ae/exprec-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b20d678402771531e0c9aa7eeef221ae", "sha256": "ecff810092292fb5264634cabfea50677c722052723c42695164e7fa711ba064"}, "downloads": -1, "filename": "exprec-0.1.0.tar.gz", "has_sig": false, "md5_digest": "b20d678402771531e0c9aa7eeef221ae", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25429, "upload_time": "2018-11-18T09:10:15", "upload_time_iso_8601": "2018-11-18T09:10:15.833385Z", "url": "https://files.pythonhosted.org/packages/ac/e8/74d589d78ee3aa4e841e9b9a4295d5d8768493732d4da8525d7580859740/exprec-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "e51c60ebf30c36e3f64866d9da5ca910", "sha256": "99b55b6be6ab1701812fd85ab5872941f7b9e5e2139437072be1cde7d508fb51"}, "downloads": -1, "filename": "exprec-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "e51c60ebf30c36e3f64866d9da5ca910", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 29683, "upload_time": "2018-11-18T09:16:30", "upload_time_iso_8601": "2018-11-18T09:16:30.946264Z", "url": "https://files.pythonhosted.org/packages/8f/ed/11176bf74ff24eb90172408d019999a5f06c772a1fcddeda6484a59bc9f6/exprec-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "eba3cbfd33e579befae64f60a0d16d84", "sha256": "21213df80c0cf9325665f47152890409ceebc3bc30a6ebe77dea801cdb644a39"}, "downloads": -1, "filename": "exprec-0.1.1.tar.gz", "has_sig": false, "md5_digest": "eba3cbfd33e579befae64f60a0d16d84", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25433, "upload_time": "2018-11-18T09:16:33", "upload_time_iso_8601": "2018-11-18T09:16:33.228148Z", "url": "https://files.pythonhosted.org/packages/7c/4e/15ba401963c38973691a92b71f5d67e194c2ef2e6bb16e2efb87b57e16b2/exprec-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e51c60ebf30c36e3f64866d9da5ca910", "sha256": "99b55b6be6ab1701812fd85ab5872941f7b9e5e2139437072be1cde7d508fb51"}, "downloads": -1, "filename": "exprec-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "e51c60ebf30c36e3f64866d9da5ca910", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 29683, "upload_time": "2018-11-18T09:16:30", "upload_time_iso_8601": "2018-11-18T09:16:30.946264Z", "url": "https://files.pythonhosted.org/packages/8f/ed/11176bf74ff24eb90172408d019999a5f06c772a1fcddeda6484a59bc9f6/exprec-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "eba3cbfd33e579befae64f60a0d16d84", "sha256": "21213df80c0cf9325665f47152890409ceebc3bc30a6ebe77dea801cdb644a39"}, "downloads": -1, "filename": "exprec-0.1.1.tar.gz", "has_sig": false, "md5_digest": "eba3cbfd33e579befae64f60a0d16d84", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25433, "upload_time": "2018-11-18T09:16:33", "upload_time_iso_8601": "2018-11-18T09:16:33.228148Z", "url": "https://files.pythonhosted.org/packages/7c/4e/15ba401963c38973691a92b71f5d67e194c2ef2e6bb16e2efb87b57e16b2/exprec-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:44:35 2020"}