{"info": {"author": "Auston Bunsen, Igor Guerrero", "author_email": "auston.bunsen@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "Intended Audience :: Developers", "Intended Audience :: Financial and Insurance Industry", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Operating System :: POSIX", "Programming Language :: Python :: 2.6", "Topic :: Office/Business :: Financial"], "description": "Paython\n=========\n\nTrying to make it easy to accept payments in Python. So far, we're Paython.\n\nCurrently - you can just import the gateway needed from gateways & auth/settle/capture (sale)/void/credit once you instantiate with the proper credentials.\n\nSupported Gateways\n==================\n\n* Stripe\n* Authorize.net\n* Innovative Gateway Solutions (Intuit)\n* First Data Global Gateway (formerly Linkpoint?)\n* PlugnPay\n* Samurai\n\nUsage\n===========================\nIt's super simple to start:\n\nImporting what you need\n\n```py\n    from paython import CreditCard, AuthorizeNet\n```\n\nSetting up a credit card\n\n```py\n    credit_card = CreditCard(\n        number = '4111111111111111',\n        exp_mo = '02',\n        exp_yr = '2012',\n        first_name = 'John',\n        last_name = 'Doe',\n        cvv = '911',\n        strict = False\n    )\n```\n\nChecking to see if it's valid\n\n```py\n    if not credit_card.is_valid(): return 'houston, we have a problem' # checks card number + expiration date\n```\n\nSetting up customer data to charge, not all fields are required.\n\n```py\n    customer_data = dict(\n        address='123 Main St', \n        address2='Apt 1', \n        city='Pleasantville', \n        state='IA', \n        zipcode='54321', \n        country='US', \n        phone='654-369-9589', \n        email='john@localwoodshop.com', \n        ip='127.0.0.1')\n```\n\nTrying to authorize against gateway, options include debug output or test credentials\n\n```py\n    api = AuthorizeNet(username='test', password='testpassword', debug=True, test=True)\n    gateway_response = api.auth(amount='0.05', credit_card=credit_card, billing_info=customer_data, shipping_info=None)\n```\n\nKeep in mind, if you authorize, you need to settle \n\n```py\n    api = AuthorizeNet(username='test', password='testpassword', debug=True, test=True)\n    gateway_response = api.settle(amount='0.05', trans_id='2156729380')\n```\n\nOR, you can capture instead\n\n```py\n    api = AuthorizeNet(username='test', password='testpassword', debug=True, test=True)\n    gateway_response = api.capture(amount='0.05', credit_card=credit_card, billing_info=customer_data, shipping_info=None)\n```\n\n\nThis is the standard paython response.\n\n```py\n    gateway_response = {\n        'response_text': 'This transaction has been approved.',\n        'cvv_response': 'P',\n        'response_code': '1',\n        'trans_type': 'auth_only',\n        'amount': '0.05',\n        'avs_response': 'Y',\n        'response_reason_code': '1',\n        'trans_id': '2156729380',\n        'alt_trans_id': '',\n        'auth_code': 'IL2UW7',\n        'approved': True,\n        'response_time': '0.55'\n    }\n```\n\nInstall Requirements\n===========================\n\nYou need pip::\n\n    pip install -r requirements.txt\n\nRun Tests\n=========\n\nJust run::\n\n    nosetests\n\nOr with stats::\n\n    nosetests --quiet --with-coverage --cover-package paython\n\nWhen initializing a gateway, debug will output request params, xml & response text or xml. test will use the test gateway endpoint, if there is one & will raise an error otherwise (NoTestEndpointError).", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/abunsen/Paython", "keywords": "payments gateways creditcards processing", "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "paython", "package_url": "https://pypi.org/project/paython/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/paython/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/abunsen/Paython"}, "release_url": "https://pypi.org/project/paython/0.0.3/", "requires_dist": null, "requires_python": null, "summary": "Trying to make it easy to accept payments in Python.", "version": "0.0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            Paython<br>=========<br><br>Trying to make it easy to accept payments in Python. So far, we're Paython.<br><br>Currently - you can just import the gateway needed from gateways &amp; auth/settle/capture (sale)/void/credit once you instantiate with the proper credentials.<br><br>Supported Gateways<br>==================<br><br>* Stripe<br>* Authorize.net<br>* Innovative Gateway Solutions (Intuit)<br>* First Data Global Gateway (formerly Linkpoint?)<br>* PlugnPay<br>* Samurai<br><br>Usage<br>===========================<br>It's super simple to start:<br><br>Importing what you need<br><br>```py<br>    from paython import CreditCard, AuthorizeNet<br>```<br><br>Setting up a credit card<br><br>```py<br>    credit_card = CreditCard(<br>        number = '4111111111111111',<br>        exp_mo = '02',<br>        exp_yr = '2012',<br>        first_name = 'John',<br>        last_name = 'Doe',<br>        cvv = '911',<br>        strict = False<br>    )<br>```<br><br>Checking to see if it's valid<br><br>```py<br>    if not credit_card.is_valid(): return 'houston, we have a problem' # checks card number + expiration date<br>```<br><br>Setting up customer data to charge, not all fields are required.<br><br>```py<br>    customer_data = dict(<br>        address='123 Main St', <br>        address2='Apt 1', <br>        city='Pleasantville', <br>        state='IA', <br>        zipcode='54321', <br>        country='US', <br>        phone='654-369-9589', <br>        email='john@localwoodshop.com', <br>        ip='127.0.0.1')<br>```<br><br>Trying to authorize against gateway, options include debug output or test credentials<br><br>```py<br>    api = AuthorizeNet(username='test', password='testpassword', debug=True, test=True)<br>    gateway_response = api.auth(amount='0.05', credit_card=credit_card, billing_info=customer_data, shipping_info=None)<br>```<br><br>Keep in mind, if you authorize, you need to settle <br><br>```py<br>    api = AuthorizeNet(username='test', password='testpassword', debug=True, test=True)<br>    gateway_response = api.settle(amount='0.05', trans_id='2156729380')<br>```<br><br>OR, you can capture instead<br><br>```py<br>    api = AuthorizeNet(username='test', password='testpassword', debug=True, test=True)<br>    gateway_response = api.capture(amount='0.05', credit_card=credit_card, billing_info=customer_data, shipping_info=None)<br>```<br><br><br>This is the standard paython response.<br><br>```py<br>    gateway_response = {<br>        'response_text': 'This transaction has been approved.',<br>        'cvv_response': 'P',<br>        'response_code': '1',<br>        'trans_type': 'auth_only',<br>        'amount': '0.05',<br>        'avs_response': 'Y',<br>        'response_reason_code': '1',<br>        'trans_id': '2156729380',<br>        'alt_trans_id': '',<br>        'auth_code': 'IL2UW7',<br>        'approved': True,<br>        'response_time': '0.55'<br>    }<br>```<br><br>Install Requirements<br>===========================<br><br>You need pip::<br><br>    pip install -r requirements.txt<br><br>Run Tests<br>=========<br><br>Just run::<br><br>    nosetests<br><br>Or with stats::<br><br>    nosetests --quiet --with-coverage --cover-package paython<br><br>When initializing a gateway, debug will output request params, xml &amp; response text or xml. test will use the test gateway endpoint, if there is one &amp; will raise an error otherwise (NoTestEndpointError).\n          </div>"}, "last_serial": 796079, "releases": {"0.0.3": [{"comment_text": "", "digests": {"md5": "90042bbb92be85be94bedc9f56ef2bfc", "sha256": "017cbb272fedb56341a02d7a56b9e61db94b69cd178cb7f398b0ca341c3a4c63"}, "downloads": -1, "filename": "paython-0.0.3.tar.gz", "has_sig": false, "md5_digest": "90042bbb92be85be94bedc9f56ef2bfc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23791, "upload_time": "2012-09-24T09:25:09", "upload_time_iso_8601": "2012-09-24T09:25:09.825502Z", "url": "https://files.pythonhosted.org/packages/4a/e6/c7f2517cf71149f639ae5d72fb184fb333a5d1360af68089b0748d116653/paython-0.0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "90042bbb92be85be94bedc9f56ef2bfc", "sha256": "017cbb272fedb56341a02d7a56b9e61db94b69cd178cb7f398b0ca341c3a4c63"}, "downloads": -1, "filename": "paython-0.0.3.tar.gz", "has_sig": false, "md5_digest": "90042bbb92be85be94bedc9f56ef2bfc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23791, "upload_time": "2012-09-24T09:25:09", "upload_time_iso_8601": "2012-09-24T09:25:09.825502Z", "url": "https://files.pythonhosted.org/packages/4a/e6/c7f2517cf71149f639ae5d72fb184fb333a5d1360af68089b0748d116653/paython-0.0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:57:39 2020"}