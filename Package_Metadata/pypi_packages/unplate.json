{"info": {"author": "Quelklef", "author_email": "", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# unplate\nA minimal Python templating engine for people who don't like templating engines.\n\n## What?\n\nThink \"templating engine\", but instead of _interfacing with_ Python, Unplate is rather _embedded within_ Python.\n\nUnplate is on PyPI: `python3 -m pip install unplate`.\n\n### Example: Template Literal\n\nThe simplest type of template is a _template literal_. It is denoted with `unplate.template(my_template)`, where the template is written in comments. Interpolation of Python expressions is supported with `{{ double braces }}`.\n\n```python\nimport unplate\n\n# These first few lines are magic that's required for Unplate to work\nif unplate.true:\n  exec(unplate.compile(__file__), globals(), locals())\nelse:\n\n  def make_namecard(name):\n    \"\"\" Simple template example. Return an ASCII-art namecard. \"\"\"\n    greeting = unplate.template(\n      # /------------------------\\\n      # |   Hello, my name is:   |\n      # |  {{ name.ljust(20) }}  |\n      # \\------------------------/\n    )\n    return greeting\n```\n\nThe above code is functionally equivalent to the following:\n\n```python\ndef make_namecard(name):\n  greeting = (\n\"\"\"/------------------------\\\\\n|   Hello, my name is:   |\n|   \"\"\" + str(name.ljust(20)) + \"\"\"   |\n\\\\------------------------/\n\"\"\")\n  return greeting\n```\n\nNote that the above code is not exactly what is generated by Unplate, but is a fair replacement for illustrations' sake.\n\n### Example: Template Builders\n\nTemplates may also contain logic, e.g. for-loops. These are supported by \"template builders\" which are opened with `[unplate.begin(template_name)]` and closed with `[unplate.end]`. Python statements can interpolated into template builders by beginning the line with `>>>`. Dedentation must be explicitly denoted, using `<<<`.\n\n```python\nimport unplate\nif unplate.true:\n  exec(unplate.compile(__file__), globals(), locals())\nelse:\n\n  [unplate.begin(my_template)]\n  # One line\n  # Two line\n  # >>> for color in ['red', 'blue']:\n    # >>> capitalized = color.capitalize()\n    # {{ capitalized }} line\n  # <<<\n  [unplate.end]\n```\n\ngives the following result in `my_template`:\n\n```text\nOne line\nTwo line\nRed line\nBlue line\n\n```\n\n(Note the trailing newline)\n\n## Why?\n\nEssentially, because I got frustrated.\n\nAcross the board, my experiences with templating engines has been the same. They look fantastic at the beginning, but always turn out to have pretty severely limited functionality or questionable design decisions.\n\nFor instance:\n\n1. [Liquid has no `not` operator](https://github.com/Shopify/liquid/issues/138). What the hell? So you can't say `{% if not post.is_hidden %}`. You can instead say `{% unless post.is_hidden %}`, but that only works if you're trying to negate the _entire_ condition---expressing something like `if post.is_published and not post.is_hidden` isn't possible without resorting to tricks like:\n   -  [nesting `if` and `unless`](https://github.com/Shopify/liquid/issues/138#issuecomment-8529289)\n   -  [writing it as `post.is_published and post.is_hidden != true`](https://github.com/Shopify/liquid/issues/138#issuecomment-429072341)\n   -  [using four statements to negate a variable](https://github.com/Shopify/liquid/issues/138#issuecomment-428742512).\n2. On a similar line, Liquid has no support for nesting experessions with parentheses: [\"You cannot change the order of operations using parentheses \u2014 parentheses are invalid characters in Liquid [...]\"](https://shopify.github.io/liquid/basics/operators/#order-of-operations). You can't write `{% if (A or B) and C %}`.\n3. By default, Jinja2 templates fail silently on an undefined variable: [\"If a variable or attribute does not exist [...] the default behavior is to evaluate to an empty string if printed or iterated over, and to fail for every other operation\"](https://jinja.palletsprojects.com/en/2.11.x/templates/#variables). I actually understand this choice, but only for use in production (generally better to serve something incomplete than nothing at all). For development, though, it makes no sense. To their credit, [the behavior can be changed](https://stackoverflow.com/q/3983581/4608364).\n4. [Jinja2 doesn't/didn't support a templating interhiting from a template inheriting from a template](https://stackoverflow.com/q/1976651/4608364). Again to their credit, this now [seems to be supported as of 2.11](https://jinja.palletsprojects.com/en/2.11.x/templates/#nesting-extends).\n5. [Recursion in Jinja2 is really awkward](https://jinja.palletsprojects.com/en/2.11.x/templates/#for) (scroll to \"It is also possible to use loops recursively\").\n6. I once was building a blog rendered with Liquid and wanted to compare the dates of two posts. However, the date objects themselves could not be compared. I was able to do it by formatting both dates to `YYYY-MM-DD` and using lexicographical string comparison on those results. It worked, but it was ugly, and ridiculous that I had to go through such a hoop in order to tell if one date came after another or not.\n\nSo, in my experience, templating engines tend to have limited functionality and doing anything even kinda difficult requires weird tricks. But usually the host language---the programming language rendering the template---already _has_ all this functionality. Mainstream languages generally have a `not` operator, yell at you upon referencing an undefined variable, support clean recursion, and can compare dates! So why, I figured, are we doing all this work to _re_-implement this functionality, poorly, in the templating language, when we already _have_ it [1]?\n\nThis is the idea of Unplate. Instead of separating ourselves from the host language, integrate into it. This way, we get all the functionality of that language for free. No need to reimplement anything.\n\nI'd also like to note that although I'm picking on Liquid and Jinja2, these issues don't seem to be limited to just these two engines. I spent quite a while looking for a suitable templating engine to use for my personal website, rejecting engine after engine for problems similar to these, before settling on Jinja2 as \"least bad\". Unplate is my attempt to create a genuine solution.\n\n[1]: The answer, I think, is actually simple: what we gain is agnosticism to the host language; Jinja2 and Liquid can both, in theory, be rendered via multiple different programming languages. This is the main disadvantage of using Unplate---it's Python-only---but one that I posit is not actually much of a problem in most situations.\n\n### What about separation of data and display?\n\nSurely the situation isn't this way for no reason. I think probably the reason that templating engines do this---separate themselves so much from the host language---is in the name of _separation of data and display_: you should process your data in one area, and display it in another. This is perfectly reasonable, and valid!\n\nHowever, need it be so painful?\n\nI say no! With Unplate, you still _can_ separate data and display: just keep your template logic to a minimum. Unplate does make it easier to break this rule, but it's still possible---and encouraged---to follow it.\n\n## How?\n\nLong story short, being really naughty. Unplate abuses the extremely dynamic nature of Python (in particular, the existence of `exec`) in order to work.\n\nWe'll look at a short example.\n\n```python\nimport unplate\nif unplate.true:\n  exec(unplate.compile(__file__), globals(), locals()\nelse:\n  # art by Linda Ball from https://www.asciiart.eu/animals/dogs\n  ascii_dog = unplate.template(\n    #    __    __\n    # o-''))_____\\\\\n    # \"--__/ * * * )\n    # c_c__/-c____/ \n  )\n```\n\nThe first thing to note is that `unplate.true` always evaluates to `True`. Thus, the code in the `else:` block never gets executed.\n\nInstead, `unplate.compile(__file__)` reads your source code, turns all the Unplate comments into functional Python code, and returns this Python code. This is then passed to `exec`, which executes it.\n\nIn this case, the result of `unplate.compile(__file__)` will look something like this:\n\n```\nimport unplate\nif False:\n  exec(unplate.compile(__file__), globals(), locals()\nelse:\n  # art by Linda Ball from https://www.asciiart.eu/animals/dogs\n  ascii_dog = (\n\"\"\"   __    __\no-''))_____\\\\\n\"--__/ * * * )\nc_c__/-c____/ \n\"\"\")\n```\n\nTwo changes have been made. Firstly, `unplate.true` has been replaced with `False`. This is to prevent an infinite recursion of calls to `unplate.compile`. Secondly, the template has been transformed into a native Python multiline string. This code is now executed, doing what you wanted---making an ascii dog!\n\nThis, in short, is how Unplate works. Template builders are, of course, somewhat more complex---but they rely on the same principles.\n\nUnplate attempts to preserve line numbers---this is why the string literal is surrounded by some awkward parentheses---but column numbers for code within templates is not necessarily preserved.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/quelklef/unplate", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "unplate", "package_url": "https://pypi.org/project/unplate/", "platform": "", "project_url": "https://pypi.org/project/unplate/", "project_urls": {"Homepage": "https://github.com/quelklef/unplate"}, "release_url": "https://pypi.org/project/unplate/0.2.8/", "requires_dist": null, "requires_python": ">=3.6", "summary": "A templating language embedded into Python", "version": "0.2.8", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>unplate</h1>\n<p>A minimal Python templating engine for people who don't like templating engines.</p>\n<h2>What?</h2>\n<p>Think \"templating engine\", but instead of <em>interfacing with</em> Python, Unplate is rather <em>embedded within</em> Python.</p>\n<p>Unplate is on PyPI: <code>python3 -m pip install unplate</code>.</p>\n<h3>Example: Template Literal</h3>\n<p>The simplest type of template is a <em>template literal</em>. It is denoted with <code>unplate.template(my_template)</code>, where the template is written in comments. Interpolation of Python expressions is supported with <code>{{ double braces }}</code>.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">unplate</span>\n\n<span class=\"c1\"># These first few lines are magic that's required for Unplate to work</span>\n<span class=\"k\">if</span> <span class=\"n\">unplate</span><span class=\"o\">.</span><span class=\"n\">true</span><span class=\"p\">:</span>\n  <span class=\"n\">exec</span><span class=\"p\">(</span><span class=\"n\">unplate</span><span class=\"o\">.</span><span class=\"n\">compile</span><span class=\"p\">(</span><span class=\"vm\">__file__</span><span class=\"p\">),</span> <span class=\"nb\">globals</span><span class=\"p\">(),</span> <span class=\"nb\">locals</span><span class=\"p\">())</span>\n<span class=\"k\">else</span><span class=\"p\">:</span>\n\n  <span class=\"k\">def</span> <span class=\"nf\">make_namecard</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\" Simple template example. Return an ASCII-art namecard. \"\"\"</span>\n    <span class=\"n\">greeting</span> <span class=\"o\">=</span> <span class=\"n\">unplate</span><span class=\"o\">.</span><span class=\"n\">template</span><span class=\"p\">(</span>\n      <span class=\"c1\"># /------------------------\\</span>\n      <span class=\"c1\"># |   Hello, my name is:   |</span>\n      <span class=\"c1\"># |  {{ name.ljust(20) }}  |</span>\n      <span class=\"c1\"># \\------------------------/</span>\n    <span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">greeting</span>\n</pre>\n<p>The above code is functionally equivalent to the following:</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">make_namecard</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">):</span>\n  <span class=\"n\">greeting</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n<span class=\"sd\">\"\"\"/------------------------\\\\</span>\n<span class=\"sd\">|   Hello, my name is:   |</span>\n<span class=\"sd\">|   \"\"\"</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">.</span><span class=\"n\">ljust</span><span class=\"p\">(</span><span class=\"mi\">20</span><span class=\"p\">))</span> <span class=\"o\">+</span> <span class=\"s2\">\"\"\"   |</span>\n<span class=\"se\">\\\\</span><span class=\"s2\">------------------------/</span>\n<span class=\"s2\">\"\"\"</span><span class=\"p\">)</span>\n  <span class=\"k\">return</span> <span class=\"n\">greeting</span>\n</pre>\n<p>Note that the above code is not exactly what is generated by Unplate, but is a fair replacement for illustrations' sake.</p>\n<h3>Example: Template Builders</h3>\n<p>Templates may also contain logic, e.g. for-loops. These are supported by \"template builders\" which are opened with <code>[unplate.begin(template_name)]</code> and closed with <code>[unplate.end]</code>. Python statements can interpolated into template builders by beginning the line with <code>&gt;&gt;&gt;</code>. Dedentation must be explicitly denoted, using <code>&lt;&lt;&lt;</code>.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">unplate</span>\n<span class=\"k\">if</span> <span class=\"n\">unplate</span><span class=\"o\">.</span><span class=\"n\">true</span><span class=\"p\">:</span>\n  <span class=\"n\">exec</span><span class=\"p\">(</span><span class=\"n\">unplate</span><span class=\"o\">.</span><span class=\"n\">compile</span><span class=\"p\">(</span><span class=\"vm\">__file__</span><span class=\"p\">),</span> <span class=\"nb\">globals</span><span class=\"p\">(),</span> <span class=\"nb\">locals</span><span class=\"p\">())</span>\n<span class=\"k\">else</span><span class=\"p\">:</span>\n\n  <span class=\"p\">[</span><span class=\"n\">unplate</span><span class=\"o\">.</span><span class=\"n\">begin</span><span class=\"p\">(</span><span class=\"n\">my_template</span><span class=\"p\">)]</span>\n  <span class=\"c1\"># One line</span>\n  <span class=\"c1\"># Two line</span>\n  <span class=\"c1\"># &gt;&gt;&gt; for color in ['red', 'blue']:</span>\n    <span class=\"c1\"># &gt;&gt;&gt; capitalized = color.capitalize()</span>\n    <span class=\"c1\"># {{ capitalized }} line</span>\n  <span class=\"c1\"># &lt;&lt;&lt;</span>\n  <span class=\"p\">[</span><span class=\"n\">unplate</span><span class=\"o\">.</span><span class=\"n\">end</span><span class=\"p\">]</span>\n</pre>\n<p>gives the following result in <code>my_template</code>:</p>\n<pre>One line\nTwo line\nRed line\nBlue line\n</pre>\n<p>(Note the trailing newline)</p>\n<h2>Why?</h2>\n<p>Essentially, because I got frustrated.</p>\n<p>Across the board, my experiences with templating engines has been the same. They look fantastic at the beginning, but always turn out to have pretty severely limited functionality or questionable design decisions.</p>\n<p>For instance:</p>\n<ol>\n<li><a href=\"https://github.com/Shopify/liquid/issues/138\" rel=\"nofollow\">Liquid has no <code>not</code> operator</a>. What the hell? So you can't say <code>{% if not post.is_hidden %}</code>. You can instead say <code>{% unless post.is_hidden %}</code>, but that only works if you're trying to negate the <em>entire</em> condition---expressing something like <code>if post.is_published and not post.is_hidden</code> isn't possible without resorting to tricks like:\n<ul>\n<li><a href=\"https://github.com/Shopify/liquid/issues/138#issuecomment-8529289\" rel=\"nofollow\">nesting <code>if</code> and <code>unless</code></a></li>\n<li><a href=\"https://github.com/Shopify/liquid/issues/138#issuecomment-429072341\" rel=\"nofollow\">writing it as <code>post.is_published and post.is_hidden != true</code></a></li>\n<li><a href=\"https://github.com/Shopify/liquid/issues/138#issuecomment-428742512\" rel=\"nofollow\">using four statements to negate a variable</a>.</li>\n</ul>\n</li>\n<li>On a similar line, Liquid has no support for nesting experessions with parentheses: <a href=\"https://shopify.github.io/liquid/basics/operators/#order-of-operations\" rel=\"nofollow\">\"You cannot change the order of operations using parentheses \u2014 parentheses are invalid characters in Liquid [...]\"</a>. You can't write <code>{% if (A or B) and C %}</code>.</li>\n<li>By default, Jinja2 templates fail silently on an undefined variable: <a href=\"https://jinja.palletsprojects.com/en/2.11.x/templates/#variables\" rel=\"nofollow\">\"If a variable or attribute does not exist [...] the default behavior is to evaluate to an empty string if printed or iterated over, and to fail for every other operation\"</a>. I actually understand this choice, but only for use in production (generally better to serve something incomplete than nothing at all). For development, though, it makes no sense. To their credit, <a href=\"https://stackoverflow.com/q/3983581/4608364\" rel=\"nofollow\">the behavior can be changed</a>.</li>\n<li><a href=\"https://stackoverflow.com/q/1976651/4608364\" rel=\"nofollow\">Jinja2 doesn't/didn't support a templating interhiting from a template inheriting from a template</a>. Again to their credit, this now <a href=\"https://jinja.palletsprojects.com/en/2.11.x/templates/#nesting-extends\" rel=\"nofollow\">seems to be supported as of 2.11</a>.</li>\n<li><a href=\"https://jinja.palletsprojects.com/en/2.11.x/templates/#for\" rel=\"nofollow\">Recursion in Jinja2 is really awkward</a> (scroll to \"It is also possible to use loops recursively\").</li>\n<li>I once was building a blog rendered with Liquid and wanted to compare the dates of two posts. However, the date objects themselves could not be compared. I was able to do it by formatting both dates to <code>YYYY-MM-DD</code> and using lexicographical string comparison on those results. It worked, but it was ugly, and ridiculous that I had to go through such a hoop in order to tell if one date came after another or not.</li>\n</ol>\n<p>So, in my experience, templating engines tend to have limited functionality and doing anything even kinda difficult requires weird tricks. But usually the host language---the programming language rendering the template---already <em>has</em> all this functionality. Mainstream languages generally have a <code>not</code> operator, yell at you upon referencing an undefined variable, support clean recursion, and can compare dates! So why, I figured, are we doing all this work to <em>re</em>-implement this functionality, poorly, in the templating language, when we already <em>have</em> it [1]?</p>\n<p>This is the idea of Unplate. Instead of separating ourselves from the host language, integrate into it. This way, we get all the functionality of that language for free. No need to reimplement anything.</p>\n<p>I'd also like to note that although I'm picking on Liquid and Jinja2, these issues don't seem to be limited to just these two engines. I spent quite a while looking for a suitable templating engine to use for my personal website, rejecting engine after engine for problems similar to these, before settling on Jinja2 as \"least bad\". Unplate is my attempt to create a genuine solution.</p>\n<p>[1]: The answer, I think, is actually simple: what we gain is agnosticism to the host language; Jinja2 and Liquid can both, in theory, be rendered via multiple different programming languages. This is the main disadvantage of using Unplate---it's Python-only---but one that I posit is not actually much of a problem in most situations.</p>\n<h3>What about separation of data and display?</h3>\n<p>Surely the situation isn't this way for no reason. I think probably the reason that templating engines do this---separate themselves so much from the host language---is in the name of <em>separation of data and display</em>: you should process your data in one area, and display it in another. This is perfectly reasonable, and valid!</p>\n<p>However, need it be so painful?</p>\n<p>I say no! With Unplate, you still <em>can</em> separate data and display: just keep your template logic to a minimum. Unplate does make it easier to break this rule, but it's still possible---and encouraged---to follow it.</p>\n<h2>How?</h2>\n<p>Long story short, being really naughty. Unplate abuses the extremely dynamic nature of Python (in particular, the existence of <code>exec</code>) in order to work.</p>\n<p>We'll look at a short example.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">unplate</span>\n<span class=\"k\">if</span> <span class=\"n\">unplate</span><span class=\"o\">.</span><span class=\"n\">true</span><span class=\"p\">:</span>\n  <span class=\"n\">exec</span><span class=\"p\">(</span><span class=\"n\">unplate</span><span class=\"o\">.</span><span class=\"n\">compile</span><span class=\"p\">(</span><span class=\"vm\">__file__</span><span class=\"p\">),</span> <span class=\"nb\">globals</span><span class=\"p\">(),</span> <span class=\"nb\">locals</span><span class=\"p\">()</span>\n<span class=\"k\">else</span><span class=\"p\">:</span>\n  <span class=\"c1\"># art by Linda Ball from https://www.asciiart.eu/animals/dogs</span>\n  <span class=\"n\">ascii_dog</span> <span class=\"o\">=</span> <span class=\"n\">unplate</span><span class=\"o\">.</span><span class=\"n\">template</span><span class=\"p\">(</span>\n    <span class=\"c1\">#    __    __</span>\n    <span class=\"c1\"># o-''))_____\\\\</span>\n    <span class=\"c1\"># \"--__/ * * * )</span>\n    <span class=\"c1\"># c_c__/-c____/ </span>\n  <span class=\"p\">)</span>\n</pre>\n<p>The first thing to note is that <code>unplate.true</code> always evaluates to <code>True</code>. Thus, the code in the <code>else:</code> block never gets executed.</p>\n<p>Instead, <code>unplate.compile(__file__)</code> reads your source code, turns all the Unplate comments into functional Python code, and returns this Python code. This is then passed to <code>exec</code>, which executes it.</p>\n<p>In this case, the result of <code>unplate.compile(__file__)</code> will look something like this:</p>\n<pre><code>import unplate\nif False:\n  exec(unplate.compile(__file__), globals(), locals()\nelse:\n  # art by Linda Ball from https://www.asciiart.eu/animals/dogs\n  ascii_dog = (\n\"\"\"   __    __\no-''))_____\\\\\n\"--__/ * * * )\nc_c__/-c____/ \n\"\"\")\n</code></pre>\n<p>Two changes have been made. Firstly, <code>unplate.true</code> has been replaced with <code>False</code>. This is to prevent an infinite recursion of calls to <code>unplate.compile</code>. Secondly, the template has been transformed into a native Python multiline string. This code is now executed, doing what you wanted---making an ascii dog!</p>\n<p>This, in short, is how Unplate works. Template builders are, of course, somewhat more complex---but they rely on the same principles.</p>\n<p>Unplate attempts to preserve line numbers---this is why the string literal is surrounded by some awkward parentheses---but column numbers for code within templates is not necessarily preserved.</p>\n\n          </div>"}, "last_serial": 6914659, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "728fa2d71d4efe019932500b8de6fc65", "sha256": "bbbed36a5122d569e22660b28248d4ee6119e569485eb15df0a7168ce3494171"}, "downloads": -1, "filename": "unplate-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "728fa2d71d4efe019932500b8de6fc65", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 10811, "upload_time": "2020-03-02T07:38:09", "upload_time_iso_8601": "2020-03-02T07:38:09.959900Z", "url": "https://files.pythonhosted.org/packages/a4/58/42cebff935df251fbf70d4e76ab5eb34491637125f73b33f5858e8e54ae4/unplate-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "001b88360a8f3f9ea7f5f62fe7684351", "sha256": "21a85c71702fd18d9547a2aadf236dff9802797c9cba55ee9de972de015622b8"}, "downloads": -1, "filename": "unplate-0.0.1.tar.gz", "has_sig": false, "md5_digest": "001b88360a8f3f9ea7f5f62fe7684351", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 9015, "upload_time": "2020-03-02T07:38:12", "upload_time_iso_8601": "2020-03-02T07:38:12.513601Z", "url": "https://files.pythonhosted.org/packages/04/e2/5c14f146dec51895e6764122da397bb207c930b13a33a43f71410924362c/unplate-0.0.1.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "bd15fb347f27e58d48d36e8a27e1c058", "sha256": "640531b886c785916dd7c3b854837d53a3f52bc097a6d48627b24cb8b160d907"}, "downloads": -1, "filename": "unplate-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "bd15fb347f27e58d48d36e8a27e1c058", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 12838, "upload_time": "2020-03-05T23:21:10", "upload_time_iso_8601": "2020-03-05T23:21:10.255052Z", "url": "https://files.pythonhosted.org/packages/53/c4/b253352bd17b25ee1568e5002432b25526eff23e2a934ef90978e3a49b51/unplate-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "18f5ad77d5dd203f75b6710038b1bd13", "sha256": "1e6718d37748827970063bd3dbf3c16e40e597b6ac362ab9ac747c834a4b96a0"}, "downloads": -1, "filename": "unplate-0.1.0.tar.gz", "has_sig": false, "md5_digest": "18f5ad77d5dd203f75b6710038b1bd13", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 10659, "upload_time": "2020-03-05T23:21:11", "upload_time_iso_8601": "2020-03-05T23:21:11.495541Z", "url": "https://files.pythonhosted.org/packages/9e/c3/a94fb191a439a47b06b1b62aa2eccdc27cf7480b21f3f5d5d1b4ed044827/unplate-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "9df4bc136982a6550e35a96a0ee7b6b1", "sha256": "5380cc45e1e89e9ce27340c70f6a3eccb555fb8580982b553532a47361b78535"}, "downloads": -1, "filename": "unplate-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "9df4bc136982a6550e35a96a0ee7b6b1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 12855, "upload_time": "2020-03-06T19:12:06", "upload_time_iso_8601": "2020-03-06T19:12:06.976652Z", "url": "https://files.pythonhosted.org/packages/ce/db/9666587b710ccea17ed10312a7087e1e4634531900c5ec1be4610cadb756/unplate-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8f432e8c6aae0014b2c41172c52aa213", "sha256": "21e829763ecbee57bac62243c530392576d7631616abe144d9beb8e6ddc7962d"}, "downloads": -1, "filename": "unplate-0.2.0.tar.gz", "has_sig": false, "md5_digest": "8f432e8c6aae0014b2c41172c52aa213", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 10676, "upload_time": "2020-03-06T19:12:08", "upload_time_iso_8601": "2020-03-06T19:12:08.602817Z", "url": "https://files.pythonhosted.org/packages/04/63/5f2686535050125b34e3d4be91a2109b523121452b1ffa12483ac25c8bca/unplate-0.2.0.tar.gz", "yanked": false}], "0.2.3": [{"comment_text": "", "digests": {"md5": "e15b25e96b44eda63699716712d59aa6", "sha256": "bb9c11d05befccfd2c35a1ab7ea352ebd911b8a498cac1af401094db639e00ec"}, "downloads": -1, "filename": "unplate-0.2.3-py3-none-any.whl", "has_sig": false, "md5_digest": "e15b25e96b44eda63699716712d59aa6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 13136, "upload_time": "2020-03-06T23:28:12", "upload_time_iso_8601": "2020-03-06T23:28:12.720754Z", "url": "https://files.pythonhosted.org/packages/bd/af/f908f10a309a78ecd22973e91cb67d4c3dc78be231a6500e1439ffd15f42/unplate-0.2.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "47047c04ed75ddd5cf2db45645da14f6", "sha256": "71cfef359e2da1c2c16d319fb4860d02d5a6aa4ea67d465c5e8573f8be868eae"}, "downloads": -1, "filename": "unplate-0.2.3.tar.gz", "has_sig": false, "md5_digest": "47047c04ed75ddd5cf2db45645da14f6", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 10929, "upload_time": "2020-03-06T23:28:14", "upload_time_iso_8601": "2020-03-06T23:28:14.208466Z", "url": "https://files.pythonhosted.org/packages/46/df/7b3120eb54c79f4972c3fdab13103679f0048e9760f4ce445731e38cc8fc/unplate-0.2.3.tar.gz", "yanked": false}], "0.2.4": [{"comment_text": "", "digests": {"md5": "844c032cb1dc74c3f4467f6a9d170840", "sha256": "009553333b80ee7a2361d26258a22e29012793cdf711aea9f9ea0e12011051de"}, "downloads": -1, "filename": "unplate-0.2.4-py3-none-any.whl", "has_sig": false, "md5_digest": "844c032cb1dc74c3f4467f6a9d170840", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 13393, "upload_time": "2020-03-06T23:43:29", "upload_time_iso_8601": "2020-03-06T23:43:29.766426Z", "url": "https://files.pythonhosted.org/packages/a5/39/6d226a8b457f46fb0863b3a2718ecdb4aa4b94e007c81ba7eb958c8f62da/unplate-0.2.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "27a0a8be3231db0c0334194e0dc6ab00", "sha256": "d89568b183d5afd83127dc146e5b01455f1e27c0877baa60359d8a9828f60f89"}, "downloads": -1, "filename": "unplate-0.2.4.tar.gz", "has_sig": false, "md5_digest": "27a0a8be3231db0c0334194e0dc6ab00", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 11165, "upload_time": "2020-03-06T23:43:31", "upload_time_iso_8601": "2020-03-06T23:43:31.350005Z", "url": "https://files.pythonhosted.org/packages/00/be/64bdcc98381ade2269967e38852cf99598c9801935d57ef6cd143f15b2e7/unplate-0.2.4.tar.gz", "yanked": false}], "0.2.6": [{"comment_text": "", "digests": {"md5": "afc924f1da267a023ec495c623bea12c", "sha256": "7acdae87d2c8067acacac2aad166ce18bbbd55e5318aebe692683bb82c8bf98f"}, "downloads": -1, "filename": "unplate-0.2.6-py3-none-any.whl", "has_sig": false, "md5_digest": "afc924f1da267a023ec495c623bea12c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 13572, "upload_time": "2020-03-07T00:18:40", "upload_time_iso_8601": "2020-03-07T00:18:40.311650Z", "url": "https://files.pythonhosted.org/packages/ba/d5/0cda378be9254752573e75f7ffa2b704fe2de0fb8a99fb0aca61d9631e34/unplate-0.2.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3623d744abae3966894bae8a666d9331", "sha256": "85803037dc84569244122bb76d58433fef96fb03dbb2682a4a5008491b32c3d8"}, "downloads": -1, "filename": "unplate-0.2.6.tar.gz", "has_sig": false, "md5_digest": "3623d744abae3966894bae8a666d9331", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 11322, "upload_time": "2020-03-07T00:18:41", "upload_time_iso_8601": "2020-03-07T00:18:41.977475Z", "url": "https://files.pythonhosted.org/packages/78/7c/33a5c9db316e83882a15762bab3c4bc2da13e83e9472448d4940a2862caa/unplate-0.2.6.tar.gz", "yanked": false}], "0.2.7": [{"comment_text": "", "digests": {"md5": "6d34223bf7cf876919ddc2f278278c64", "sha256": "c3dfd277a45a1c9e36454f4ba7e5389a95d8c424ba00d77027867c06dcc16acd"}, "downloads": -1, "filename": "unplate-0.2.7-py3-none-any.whl", "has_sig": false, "md5_digest": "6d34223bf7cf876919ddc2f278278c64", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 14092, "upload_time": "2020-03-29T03:13:25", "upload_time_iso_8601": "2020-03-29T03:13:25.595172Z", "url": "https://files.pythonhosted.org/packages/0a/20/917812c039ffb90f00a1460c4b7c068cc61c9e22f4faae4ec18157b826c3/unplate-0.2.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "455403309941a28b62352935e7b65ba3", "sha256": "335814386fcc9196ebbab002d64c0dc96ebf0a86c3f337d43e819f93b644a31b"}, "downloads": -1, "filename": "unplate-0.2.7.tar.gz", "has_sig": false, "md5_digest": "455403309941a28b62352935e7b65ba3", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 11802, "upload_time": "2020-03-29T03:13:27", "upload_time_iso_8601": "2020-03-29T03:13:27.080012Z", "url": "https://files.pythonhosted.org/packages/81/81/e8252436e28125ccb1c15dcecddebcfc91f90ee93eae6237f30b123367bc/unplate-0.2.7.tar.gz", "yanked": false}], "0.2.8": [{"comment_text": "", "digests": {"md5": "ad299d8a4466d027adfd2f3b5f37ce1d", "sha256": "5aab6dfde2bea36fa0ad58d6f5661f042db955cab5a57bd6ce16f1fe4b77a9b4"}, "downloads": -1, "filename": "unplate-0.2.8-py3-none-any.whl", "has_sig": false, "md5_digest": "ad299d8a4466d027adfd2f3b5f37ce1d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 13975, "upload_time": "2020-03-30T18:06:32", "upload_time_iso_8601": "2020-03-30T18:06:32.246209Z", "url": "https://files.pythonhosted.org/packages/a5/bb/1a3534844ea571f2bd1008ead4930f20d0d5cf33b226c31cdb994dee9c3c/unplate-0.2.8-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "41a8f37b04c6ce8cb4f2b8e448b25227", "sha256": "a0291f46f83d14def7c22159a4ea6a695b7ed308d90b853f6ab5fca1b4d02b04"}, "downloads": -1, "filename": "unplate-0.2.8.tar.gz", "has_sig": false, "md5_digest": "41a8f37b04c6ce8cb4f2b8e448b25227", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 11768, "upload_time": "2020-03-30T18:06:33", "upload_time_iso_8601": "2020-03-30T18:06:33.272308Z", "url": "https://files.pythonhosted.org/packages/ce/01/a7aa6fe2730e2eaba82891b554fcfc4527c9e94772fb406a31550623cd96/unplate-0.2.8.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ad299d8a4466d027adfd2f3b5f37ce1d", "sha256": "5aab6dfde2bea36fa0ad58d6f5661f042db955cab5a57bd6ce16f1fe4b77a9b4"}, "downloads": -1, "filename": "unplate-0.2.8-py3-none-any.whl", "has_sig": false, "md5_digest": "ad299d8a4466d027adfd2f3b5f37ce1d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 13975, "upload_time": "2020-03-30T18:06:32", "upload_time_iso_8601": "2020-03-30T18:06:32.246209Z", "url": "https://files.pythonhosted.org/packages/a5/bb/1a3534844ea571f2bd1008ead4930f20d0d5cf33b226c31cdb994dee9c3c/unplate-0.2.8-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "41a8f37b04c6ce8cb4f2b8e448b25227", "sha256": "a0291f46f83d14def7c22159a4ea6a695b7ed308d90b853f6ab5fca1b4d02b04"}, "downloads": -1, "filename": "unplate-0.2.8.tar.gz", "has_sig": false, "md5_digest": "41a8f37b04c6ce8cb4f2b8e448b25227", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 11768, "upload_time": "2020-03-30T18:06:33", "upload_time_iso_8601": "2020-03-30T18:06:33.272308Z", "url": "https://files.pythonhosted.org/packages/ce/01/a7aa6fe2730e2eaba82891b554fcfc4527c9e94772fb406a31550623cd96/unplate-0.2.8.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:40:07 2020"}