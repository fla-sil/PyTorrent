{"info": {"author": "Starcat LLC", "author_email": "adam@starcat.io", "bugtrack_url": null, "classifiers": [], "description": "\n# hackeeg-client-python\nPython client software for [HackEEG TI ADS1299 Arduino shield](https://github.com/starcat-io/hackeeg-shield)\n\n## Python Client Software\n\nThe Python client software is designed to run on a laptop computer. There is a `hackeeg` driver Python module for communicating with the Arduino over the USB serial port, a command line client (`hackeeg_shell` wrapper and `hackeeg_shell.py` Python client), and a demonstration and performance testing script (`hackeeg_test.py`). \n\nThe `hackeeg_shell.py` and `hackeeg_test.py` programs set the Arduino driver to JSON Lines mode, and communicate with it that way. They issue JSON Lines commands to the Arduino, and recieve JSON Lines or MessagePack data in response.\n\nUsing Python 3.6.5 on a 2017 Retina Macbook Pro, connected to an Arduino Due configured to use the SPI DMA included in the driver, and using the MessagePack mode, the `hackeeg_test.py` program can read and transfer 8 channels of 24-bit resolution data at 16,384 samples per second, the maximum rate of the ADS1299 chip.\n\nThe Python client software requires the [PySerial](https://github.com/pyserial/pyserial) module.\n\n## General Operation\n\nThe ADS129x chips are configured by reading and writing registers. See the chip datasheet for more information about configuring the ADS129x and reading data from it.\n\nIf the host program (the program that reads data from the driver) does not pull data from the serial or USB interface fast enough, the driver will block on sending when the serial or USB buffers fill up. This will cause the driver to lose samples. \n\nThe driver uses the Arduino Native port for serial communication, because it is capable of 2 megabits per second or more.\n\n\nIn most applications, the Python 3 usage will go something like this:\n\n```python\n#!/usr/bin/env python\n\nSERIAL_PORT_PATH=\"/dev/cu.usbmodem14434401\"  # your actual path to the Arduino Native serial port device goes here\nimport sys\nimport hackeeg\nfrom hackeeg import ads1299\n\nhackeeg = hackeeg.HackEEGBoard(SERIAL_PORT_PATH)\nhackeeg.connect()\nhackeeg.sdatac()\nhackeeg.reset()\nhackeeg.blink_board_led()\nhackeeg.disable_all_channels()\nsample_mode = ads1299.HIGH_RES_250_SPS | ads1299.CONFIG1_const\nhackeeg.wreg(ads1299.CONFIG1, sample_mode)\ntest_signal_mode = ads1299.INT_TEST_4HZ | ads1299.CONFIG2_const\nhackeeg.wreg(ads1299.CONFIG2, test_signal_mode)\nhackeeg.enable_channel(7)\nhackeeg.wreg(ads1299.CH7SET, ads1299.TEST_SIGNAL | ads1299.GAIN_1X)\nhackeeg.rreg(ads1299.CH5SET)\n\n# Unipolar mode - setting SRB1 bit sends mid-supply voltage to the N inputs\nhackeeg.wreg(ads1299.MISC1, ads1299.SRB1)\n# add channels into bias generation\nhackeeg.wreg(ads1299.BIAS_SENSP, ads1299.BIAS8P)\nhackeeg.rdatac()\nhackeeg.start()\n\nwhile True:\n    result = hackeeg.read_response()\n    status_code = result.get('STATUS_CODE')\n    status_text = result.get('STATUS_TEXT')\n    data = result.get(hackeeg.DataKey)\n    if data:\n        decoded_data = result.get(hackeeg.DecodedDataKey)\n        if decoded_data:\n            timestamp = decoded_data.get('timestamp')\n            ads_gpio = decoded_data.get('ads_gpio')\n            loff_statp = decoded_data.get('loff_statp')\n            loff_statn = decoded_data.get('loff_statn')\n            channel_data = decoded_data.get('channel_data')\n            print(f\"timestamp:{timestamp} | gpio:{ads_gpio} loff_statp:{loff_statp} loff_statn:{loff_statn} |   \",\n                  end='')\n            for channel_number, sample in enumerate(channel_data):\n                print(f\"{channel_number + 1}:{sample} \", end='')\n            print()\n        else:\n            print(data)\n        sys.stdout.flush()\n```\n\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/starcat-io/hackeeg-client-python", "keywords": "", "license": "Apache 2.0", "maintainer": "", "maintainer_email": "", "name": "hackeeg", "package_url": "https://pypi.org/project/hackeeg/", "platform": "", "project_url": "https://pypi.org/project/hackeeg/", "project_urls": {"Homepage": "http://github.com/starcat-io/hackeeg-client-python"}, "release_url": "https://pypi.org/project/hackeeg/0.1.6/", "requires_dist": ["pyserial", "bitstring", "numpy", "jsonlines", "msgpack", "autopep8", "gnureadline", "pylsl"], "requires_python": "", "summary": "Python client library for HackEEG Arduino Due shield", "version": "0.1.6", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>hackeeg-client-python</h1>\n<p>Python client software for <a href=\"https://github.com/starcat-io/hackeeg-shield\" rel=\"nofollow\">HackEEG TI ADS1299 Arduino shield</a></p>\n<h2>Python Client Software</h2>\n<p>The Python client software is designed to run on a laptop computer. There is a <code>hackeeg</code> driver Python module for communicating with the Arduino over the USB serial port, a command line client (<code>hackeeg_shell</code> wrapper and <code>hackeeg_shell.py</code> Python client), and a demonstration and performance testing script (<code>hackeeg_test.py</code>).</p>\n<p>The <code>hackeeg_shell.py</code> and <code>hackeeg_test.py</code> programs set the Arduino driver to JSON Lines mode, and communicate with it that way. They issue JSON Lines commands to the Arduino, and recieve JSON Lines or MessagePack data in response.</p>\n<p>Using Python 3.6.5 on a 2017 Retina Macbook Pro, connected to an Arduino Due configured to use the SPI DMA included in the driver, and using the MessagePack mode, the <code>hackeeg_test.py</code> program can read and transfer 8 channels of 24-bit resolution data at 16,384 samples per second, the maximum rate of the ADS1299 chip.</p>\n<p>The Python client software requires the <a href=\"https://github.com/pyserial/pyserial\" rel=\"nofollow\">PySerial</a> module.</p>\n<h2>General Operation</h2>\n<p>The ADS129x chips are configured by reading and writing registers. See the chip datasheet for more information about configuring the ADS129x and reading data from it.</p>\n<p>If the host program (the program that reads data from the driver) does not pull data from the serial or USB interface fast enough, the driver will block on sending when the serial or USB buffers fill up. This will cause the driver to lose samples.</p>\n<p>The driver uses the Arduino Native port for serial communication, because it is capable of 2 megabits per second or more.</p>\n<p>In most applications, the Python 3 usage will go something like this:</p>\n<pre><span class=\"ch\">#!/usr/bin/env python</span>\n\n<span class=\"n\">SERIAL_PORT_PATH</span><span class=\"o\">=</span><span class=\"s2\">\"/dev/cu.usbmodem14434401\"</span>  <span class=\"c1\"># your actual path to the Arduino Native serial port device goes here</span>\n<span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n<span class=\"kn\">import</span> <span class=\"nn\">hackeeg</span>\n<span class=\"kn\">from</span> <span class=\"nn\">hackeeg</span> <span class=\"kn\">import</span> <span class=\"n\">ads1299</span>\n\n<span class=\"n\">hackeeg</span> <span class=\"o\">=</span> <span class=\"n\">hackeeg</span><span class=\"o\">.</span><span class=\"n\">HackEEGBoard</span><span class=\"p\">(</span><span class=\"n\">SERIAL_PORT_PATH</span><span class=\"p\">)</span>\n<span class=\"n\">hackeeg</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">()</span>\n<span class=\"n\">hackeeg</span><span class=\"o\">.</span><span class=\"n\">sdatac</span><span class=\"p\">()</span>\n<span class=\"n\">hackeeg</span><span class=\"o\">.</span><span class=\"n\">reset</span><span class=\"p\">()</span>\n<span class=\"n\">hackeeg</span><span class=\"o\">.</span><span class=\"n\">blink_board_led</span><span class=\"p\">()</span>\n<span class=\"n\">hackeeg</span><span class=\"o\">.</span><span class=\"n\">disable_all_channels</span><span class=\"p\">()</span>\n<span class=\"n\">sample_mode</span> <span class=\"o\">=</span> <span class=\"n\">ads1299</span><span class=\"o\">.</span><span class=\"n\">HIGH_RES_250_SPS</span> <span class=\"o\">|</span> <span class=\"n\">ads1299</span><span class=\"o\">.</span><span class=\"n\">CONFIG1_const</span>\n<span class=\"n\">hackeeg</span><span class=\"o\">.</span><span class=\"n\">wreg</span><span class=\"p\">(</span><span class=\"n\">ads1299</span><span class=\"o\">.</span><span class=\"n\">CONFIG1</span><span class=\"p\">,</span> <span class=\"n\">sample_mode</span><span class=\"p\">)</span>\n<span class=\"n\">test_signal_mode</span> <span class=\"o\">=</span> <span class=\"n\">ads1299</span><span class=\"o\">.</span><span class=\"n\">INT_TEST_4HZ</span> <span class=\"o\">|</span> <span class=\"n\">ads1299</span><span class=\"o\">.</span><span class=\"n\">CONFIG2_const</span>\n<span class=\"n\">hackeeg</span><span class=\"o\">.</span><span class=\"n\">wreg</span><span class=\"p\">(</span><span class=\"n\">ads1299</span><span class=\"o\">.</span><span class=\"n\">CONFIG2</span><span class=\"p\">,</span> <span class=\"n\">test_signal_mode</span><span class=\"p\">)</span>\n<span class=\"n\">hackeeg</span><span class=\"o\">.</span><span class=\"n\">enable_channel</span><span class=\"p\">(</span><span class=\"mi\">7</span><span class=\"p\">)</span>\n<span class=\"n\">hackeeg</span><span class=\"o\">.</span><span class=\"n\">wreg</span><span class=\"p\">(</span><span class=\"n\">ads1299</span><span class=\"o\">.</span><span class=\"n\">CH7SET</span><span class=\"p\">,</span> <span class=\"n\">ads1299</span><span class=\"o\">.</span><span class=\"n\">TEST_SIGNAL</span> <span class=\"o\">|</span> <span class=\"n\">ads1299</span><span class=\"o\">.</span><span class=\"n\">GAIN_1X</span><span class=\"p\">)</span>\n<span class=\"n\">hackeeg</span><span class=\"o\">.</span><span class=\"n\">rreg</span><span class=\"p\">(</span><span class=\"n\">ads1299</span><span class=\"o\">.</span><span class=\"n\">CH5SET</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Unipolar mode - setting SRB1 bit sends mid-supply voltage to the N inputs</span>\n<span class=\"n\">hackeeg</span><span class=\"o\">.</span><span class=\"n\">wreg</span><span class=\"p\">(</span><span class=\"n\">ads1299</span><span class=\"o\">.</span><span class=\"n\">MISC1</span><span class=\"p\">,</span> <span class=\"n\">ads1299</span><span class=\"o\">.</span><span class=\"n\">SRB1</span><span class=\"p\">)</span>\n<span class=\"c1\"># add channels into bias generation</span>\n<span class=\"n\">hackeeg</span><span class=\"o\">.</span><span class=\"n\">wreg</span><span class=\"p\">(</span><span class=\"n\">ads1299</span><span class=\"o\">.</span><span class=\"n\">BIAS_SENSP</span><span class=\"p\">,</span> <span class=\"n\">ads1299</span><span class=\"o\">.</span><span class=\"n\">BIAS8P</span><span class=\"p\">)</span>\n<span class=\"n\">hackeeg</span><span class=\"o\">.</span><span class=\"n\">rdatac</span><span class=\"p\">()</span>\n<span class=\"n\">hackeeg</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n\n<span class=\"k\">while</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n    <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">hackeeg</span><span class=\"o\">.</span><span class=\"n\">read_response</span><span class=\"p\">()</span>\n    <span class=\"n\">status_code</span> <span class=\"o\">=</span> <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'STATUS_CODE'</span><span class=\"p\">)</span>\n    <span class=\"n\">status_text</span> <span class=\"o\">=</span> <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'STATUS_TEXT'</span><span class=\"p\">)</span>\n    <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">hackeeg</span><span class=\"o\">.</span><span class=\"n\">DataKey</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">data</span><span class=\"p\">:</span>\n        <span class=\"n\">decoded_data</span> <span class=\"o\">=</span> <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">hackeeg</span><span class=\"o\">.</span><span class=\"n\">DecodedDataKey</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">decoded_data</span><span class=\"p\">:</span>\n            <span class=\"n\">timestamp</span> <span class=\"o\">=</span> <span class=\"n\">decoded_data</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'timestamp'</span><span class=\"p\">)</span>\n            <span class=\"n\">ads_gpio</span> <span class=\"o\">=</span> <span class=\"n\">decoded_data</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'ads_gpio'</span><span class=\"p\">)</span>\n            <span class=\"n\">loff_statp</span> <span class=\"o\">=</span> <span class=\"n\">decoded_data</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'loff_statp'</span><span class=\"p\">)</span>\n            <span class=\"n\">loff_statn</span> <span class=\"o\">=</span> <span class=\"n\">decoded_data</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'loff_statn'</span><span class=\"p\">)</span>\n            <span class=\"n\">channel_data</span> <span class=\"o\">=</span> <span class=\"n\">decoded_data</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'channel_data'</span><span class=\"p\">)</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"timestamp:</span><span class=\"si\">{</span><span class=\"n\">timestamp</span><span class=\"si\">}</span><span class=\"s2\"> | gpio:</span><span class=\"si\">{</span><span class=\"n\">ads_gpio</span><span class=\"si\">}</span><span class=\"s2\"> loff_statp:</span><span class=\"si\">{</span><span class=\"n\">loff_statp</span><span class=\"si\">}</span><span class=\"s2\"> loff_statn:</span><span class=\"si\">{</span><span class=\"n\">loff_statn</span><span class=\"si\">}</span><span class=\"s2\"> |   \"</span><span class=\"p\">,</span>\n                  <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s1\">''</span><span class=\"p\">)</span>\n            <span class=\"k\">for</span> <span class=\"n\">channel_number</span><span class=\"p\">,</span> <span class=\"n\">sample</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">channel_data</span><span class=\"p\">):</span>\n                <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"</span><span class=\"si\">{</span><span class=\"n\">channel_number</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"si\">}</span><span class=\"s2\">:</span><span class=\"si\">{</span><span class=\"n\">sample</span><span class=\"si\">}</span><span class=\"s2\"> \"</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s1\">''</span><span class=\"p\">)</span>\n            <span class=\"nb\">print</span><span class=\"p\">()</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n        <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">stdout</span><span class=\"o\">.</span><span class=\"n\">flush</span><span class=\"p\">()</span>\n</pre>\n\n          </div>"}, "last_serial": 6448065, "releases": {"0.1.5": [{"comment_text": "", "digests": {"md5": "77cf6f972dedf80ffe8350979756ffcc", "sha256": "6b8cdb8dc47bd51d8c71fac55ffb04059e87c5d07fc17a4e83fe352e5772511b"}, "downloads": -1, "filename": "hackeeg-0.1.5-py3-none-any.whl", "has_sig": false, "md5_digest": "77cf6f972dedf80ffe8350979756ffcc", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 20911, "upload_time": "2019-12-28T03:23:21", "upload_time_iso_8601": "2019-12-28T03:23:21.905655Z", "url": "https://files.pythonhosted.org/packages/61/3a/770941281ecc9bd1e81ca480220952f439f881651649bde127b8e2596afd/hackeeg-0.1.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4b1caf58c7400a7bcd73692956b35e31", "sha256": "cc382e007a2da902623bc202fce8f10c6458ea60546aa77e847bd110deaa535e"}, "downloads": -1, "filename": "hackeeg-0.1.5.tar.gz", "has_sig": false, "md5_digest": "4b1caf58c7400a7bcd73692956b35e31", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13588, "upload_time": "2019-12-28T03:23:24", "upload_time_iso_8601": "2019-12-28T03:23:24.547440Z", "url": "https://files.pythonhosted.org/packages/1f/28/2da843b9cef050c2f455a8db1bb017830c2febff3b6bb9ccb8c0a94e6e36/hackeeg-0.1.5.tar.gz", "yanked": false}], "0.1.6": [{"comment_text": "", "digests": {"md5": "6acdb5d98094ea6e5d87515f58a42e5d", "sha256": "6724120407bbec5296f712dbf446492a7a1fa32130b3ef90e90a714e1330ad02"}, "downloads": -1, "filename": "hackeeg-0.1.6-py3-none-any.whl", "has_sig": false, "md5_digest": "6acdb5d98094ea6e5d87515f58a42e5d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 22782, "upload_time": "2020-01-14T00:30:57", "upload_time_iso_8601": "2020-01-14T00:30:57.729764Z", "url": "https://files.pythonhosted.org/packages/8b/2f/d524055dbcbd5354b479b48169a70619de6df177f3d8d19c84a83f757d29/hackeeg-0.1.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "53890e36c220e716ac7e62e6a6b93b77", "sha256": "ab0cfd7d156cc730e82f178de10b1ba16c40b4a215e6bc85952e01bdfe59abf5"}, "downloads": -1, "filename": "hackeeg-0.1.6.tar.gz", "has_sig": false, "md5_digest": "53890e36c220e716ac7e62e6a6b93b77", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15333, "upload_time": "2020-01-14T00:30:59", "upload_time_iso_8601": "2020-01-14T00:30:59.702256Z", "url": "https://files.pythonhosted.org/packages/65/a4/8c773523fbac77ebbd2a8ef04f0f726057dabd13eb23688b3cfd02240251/hackeeg-0.1.6.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "6acdb5d98094ea6e5d87515f58a42e5d", "sha256": "6724120407bbec5296f712dbf446492a7a1fa32130b3ef90e90a714e1330ad02"}, "downloads": -1, "filename": "hackeeg-0.1.6-py3-none-any.whl", "has_sig": false, "md5_digest": "6acdb5d98094ea6e5d87515f58a42e5d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 22782, "upload_time": "2020-01-14T00:30:57", "upload_time_iso_8601": "2020-01-14T00:30:57.729764Z", "url": "https://files.pythonhosted.org/packages/8b/2f/d524055dbcbd5354b479b48169a70619de6df177f3d8d19c84a83f757d29/hackeeg-0.1.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "53890e36c220e716ac7e62e6a6b93b77", "sha256": "ab0cfd7d156cc730e82f178de10b1ba16c40b4a215e6bc85952e01bdfe59abf5"}, "downloads": -1, "filename": "hackeeg-0.1.6.tar.gz", "has_sig": false, "md5_digest": "53890e36c220e716ac7e62e6a6b93b77", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15333, "upload_time": "2020-01-14T00:30:59", "upload_time_iso_8601": "2020-01-14T00:30:59.702256Z", "url": "https://files.pythonhosted.org/packages/65/a4/8c773523fbac77ebbd2a8ef04f0f726057dabd13eb23688b3cfd02240251/hackeeg-0.1.6.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:52:51 2020"}