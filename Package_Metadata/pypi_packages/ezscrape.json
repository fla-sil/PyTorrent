{"info": {"author": "Eric Ziethen", "author_email": "ericziethen@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "Operating System :: OS Independent", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: Implementation :: CPython", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "<table>\n    <tr>\n        <td>License</td>\n        <td><img src='https://img.shields.io/pypi/l/ezscrape.svg'></td>\n        <td>Version</td>\n        <td><img src='https://img.shields.io/pypi/v/ezscrape.svg'></td>\n    </tr>\n    <tr>\n        <td>Travis CI</td>\n        <td><img src='https://travis-ci.org/ericziethen/ezscrape.svg?branch=master'></td>\n        <td>Coverage</td>\n        <td><img src='https://codecov.io/gh/ericziethen/ezscrape/branch/master/graph/badge.svg'></td>\n    </tr>\n    <tr>\n        <td>Wheel</td>\n        <td><img src='https://img.shields.io/pypi/wheel/ezscrape.svg'></td>\n        <td>Implementation</td>\n        <td><img src='https://img.shields.io/pypi/implementation/ezscrape.svg'></td>\n    </tr>\n    <tr>\n        <td>Status</td>\n        <td><img src='https://img.shields.io/pypi/status/ezscrape.svg'></td>\n        <td>Downloads</td>\n        <td><img src='https://img.shields.io/pypi/dm/ezscrape.svg'></td>\n    </tr>\n    <tr>\n        <td>Supported versions</td>\n        <td><img src='https://img.shields.io/pypi/pyversions/ezscrape.svg'></td>\n    </tr>\n</table>\n\n# ezscrape\n\nezscrape provides a boilerplate for simple scraping tasks.\n\nIt provide generic access to scraping functionality without exposing the user directly the the underlying libraries used (e.g. requests, selenium) when using the scraping functionality.\nThe used scraper is chosen based on the specified config parameters and will prefer the most flexibe / least resource intensive ones if possible.\n\nThe exceptions of the underlying modules are handled and converted into the status of the result object.\n\n# Setup Requirements\n## Setup Chrome and Webdriver\n\nFor some websites selenium will be used for scraping (e.g. requests doesn't support javascript)\n\nFor that purpose the following environment variables need to be set otherwise an exception will be raised when the code is using selenium.\n\n1. The Chrome Executable\n\n    *CHROME_EXEC_PATH*\n\n2. The Chrome Webdriver Executable\n\n    *CHROME_WEBDRIVER_PATH*\n\n# Usage\n\n1. The basic concept of a simple scrape is\n2. Create the Scrape Config with a Url\n3. Optional - set additional parameters on the scrape config\n4. Scrape with the given Config\n5. Check the Return Object if the Scrape was succesfull\n6. Get the HTML from the Return Object\n\n\n## Scrape a simple HTML Page\n\n~~~\n\nimport ezscrape.scraping.scraper as scraper\nfrom ezscrape.scraping.core import ScrapeConfig\nfrom ezscrape.scraping.core import ScrapeStatus\n\nresult = scraper.scrape_url(ScrapeConfig('http://www.website.com'))\n\nif result.status == ScrapeStatus.SUCCESS:\n    html = result.first_page.html\nelse:\n    print(result.error_msg)\n\n~~~\n\n## Scrape a Page with Multiple Pages\n\n~~~\n\nimport ezscrape.scraping.scraper as scraper\nfrom ezscrape.scraping.core import ScrapeConfig\nfrom ezscrape.scraping.core import WaitForXpathElem\nfrom ezscrape.scraping.core import ScrapeStatus\n\nconfig = ScrapeConfig('http://www.website.com')\n# Add contition to wait until Element with \"title='id'\" is loaded\"\nconfig.wait_for_elem_list.append(WaitForXpathElem(R'''//a[@title='id']'''))\n\nresult = scraper.scrape_url(config)\n\nfor page in result:\n    if page.status == ScrapeStatus.SUCCESS:\n        html = page.html\n    else:\n        print(result.error_msg)\n~~~\n\n## Scrape a Page and wait until an Element is Loaded\n\n~~~\n\nimport ezscrape.scraping.scraper as scraper\nfrom ezscrape.scraping.core import ScrapeConfig\nfrom ezscrape.scraping.core import WaitForXpathElem\nfrom ezscrape.scraping.core import ScrapeStatus\n\n\nconfig = ScrapeConfig('http://www.website.com')\n# Add contition to wait until Element with \"title='id'\" is loaded\"\nconfig.wait_for_elem_list.append(WaitForXpathElem(R'''//a[@title='id']'''))\n\nresult = scraper.scrape_url(config)\n\nif result.status == ScrapeStatus.SUCCESS:\n    html = result.first_page.html\nelse:\n    print(result.error_msg)\n\n~~~\n\n# Scrape Config\n\nezscrape.scraping.core.ScrapeConfig\n\nThe url is specified when creating the object.\n\n~~~\nfrom ezscrape.scraping.core import ScrapeConfig\n\nconfig = ScrapeConfig('http://some-url.com') \n~~~\n\nAdditional parameters can be specified\n\n| Option                          | Purpose                                  | Type                                     | Default           | Example Use Case                         |\n|---------------------------------|------------------------------------------|------------------------------------------|-------------------|------------------------------------------|\n| ScrapeConfig.url                | The URL used for the request             | str                                      | N/A               | Required for all Requests                |\n| ScrapeConfig.request_timeout    | The timeout in seconds of the request    | long                                     | 15                | Wait longer before timeout in a slow Network environment. |\n| ScrapeConfig.page_load_wait     | Time ti wait until a page is loaded completely before it times out | int                                      | 5.0               | Specify a longer time if the page loads dynamic elements slowly |\n| ScrapeConfig.proxy_http         | HTTP Proxy to use                        | str                                      | N/A               | Send the request through an HTTP proxy (Proxy needs to support the Target protocol i.e. HTTP/HTTPS) |\n| ScrapeConfig.proxy_https        | HTTPS Proxy to use                       | str                                      | N/A               | Send the request through an HTTPS proxy (Proxy needs to support the Target protocol i.e. HTTP/HTTPS) |\n| ScrapeConfig.useragent          | Custom Useragent to use                  | str                                      | Internally Chosen | User want to scrape with a custom Useragent |\n| ScrapeConfig.max_pages          | Maximum Pages to collect if \"next_button\" specifies  | int                                      | 15                | User only wants to return 3 Pages max even if more pages available |\n| ScrapeConfig.next_button        | Add a button element that needs to be loaded and clicked for ultiple pages | ezscrape.scraping.core.WaitForPageElem<br><br>or one of the subtypes e.g.<br><br>ezscrape.scraping.core.WaitForXpathElem | N/A               | User wants to return multiple pages if the next page links are generated with Javascript |\n| ScrapeConfig.wait_for_elem_list | A list of Elements that need to be loaded on the page before returning the scrape result | List of <br>ezscrape.scraping.core.WaitForPageElem<br><br>or one of the subtypes e.g.<br><br>ezscrape.scraping.core.WaitForXpathElem | N/A               | User is interested in multiple elements of a Javascript/Ajax page and needs to wait for all to load completely. |\n\n# Scrape Status\n\nThe following statuses are supported in ezscrape.scraping.core.ScrapeStatus\n\n| Status                   | Meaning                 |\n|--------------------------|-------------------------|\n| ScrapeStatus.SUCCESS     | Scrape Succesfull       |\n| ScrapeStatus.TIMEOUT     | A timeout error occured |\n| ScrapeStatus.PROXY_ERROR | A proxy error occured   |\n| ScrapeStatus.ERROR       | A generic error occured |\n\nFor non Success cases, additional error details are given in the [ScrapeResult](#scrape-result) object\n\n# Scrape Result\n\nThe following attributes are available in ezscrape.scraping.core.ScrapeResults\n\n| Attribute              | Purpose                                  | Type                                |\n|------------------------|------------------------------------------|-------------------------------------|\n| ScrapeResult.url       | The url Scraped                          | str                                 |\n| ScrapeResult.caller_ip | The caller IP.<br><br>This is not set for all cases. But where it is it should be reliable e.g. if Scraped through proxy, the proxy IP should be shown) | str                                 |\n| ScrapeResult.status    | The overall status of the Scrape         | ezscrape.scraping.core.ScrapeStatus |\n| ScrapeResult.error_msg | The error message if the result is not SUCCESS | str                                 |\n| request_time_ms        | The combined scrape time of all pages scraped | float                               |\n| first_page             | The ScrapePage scraped (first if multiple pages) | ezscrape.scraping.core.ScrapePage   |\n\n# Scrape Page\n\nThe following attributes are available in ezscrape.scraping.core.ScrapePage\n\n| Attribute       | Purpose                                  | Type                                |\n|-----------------|------------------------------------------|-------------------------------------|\n| html            | The HTML content scraped                 | str                                 |\n| request_time_ms | the scrape duration for this page        | float                               |\n| status          | The scrape status for this page<br><br>ScrapePage doesn't have it's own error message. For details check ScrapeResult.error_msg | ezscrape.scraping.core.ScrapeStatus |\n\n## Contributing\nPull requests are welcome. For major changes, please open an issue first to discuss what you would like to change.\n\nPlease make sure to update tests as appropriate.\n\n## License\n[GPLv3](https://choosealicense.com/licenses/gpl-3.0/)\n\n  [1]: # Scrape Result\n  [2]: # Scrape Result\n\n\n", "description_content_type": "text/markdown; charset=UTF-8", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ericziethen/ezscrape", "keywords": "", "license": "GNU GPLv3", "maintainer": "", "maintainer_email": "", "name": "ezscrape", "package_url": "https://pypi.org/project/ezscrape/", "platform": "any", "project_url": "https://pypi.org/project/ezscrape/", "project_urls": {"Homepage": "https://github.com/ericziethen/ezscrape"}, "release_url": "https://pypi.org/project/ezscrape/0.4/", "requires_dist": ["fake-useragent (>=0.1.11)", "requests (>=2.21.0)", "selenium (>=3.141.0)"], "requires_python": ">=3.7", "summary": "Collection of Scraping tools", "version": "0.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <table>\n    <tr>\n        <td>License</td>\n        <td><img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/254e612b778994ba4909309fa51761e8af5b96db/68747470733a2f2f696d672e736869656c64732e696f2f707970692f6c2f657a7363726170652e737667\"></td>\n        <td>Version</td>\n        <td><img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/cb48c43c974d0bae9b86dc3cad4727aee9bce08a/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f657a7363726170652e737667\"></td>\n    </tr>\n    <tr>\n        <td>Travis CI</td>\n        <td><img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/530322a007e8ad4e09738f32e7754943055372c9/68747470733a2f2f7472617669732d63692e6f72672f657269637a69657468656e2f657a7363726170652e7376673f6272616e63683d6d6173746572\"></td>\n        <td>Coverage</td>\n        <td><img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/009c6b98f9a64a88a48ea1667caa4e95cb768d5b/68747470733a2f2f636f6465636f762e696f2f67682f657269637a69657468656e2f657a7363726170652f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></td>\n    </tr>\n    <tr>\n        <td>Wheel</td>\n        <td><img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c225bc9755a53a7b636934fe166b210eacd56c20/68747470733a2f2f696d672e736869656c64732e696f2f707970692f776865656c2f657a7363726170652e737667\"></td>\n        <td>Implementation</td>\n        <td><img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ac2d934f073038d0d2825b5da5feaf1995e4e58a/68747470733a2f2f696d672e736869656c64732e696f2f707970692f696d706c656d656e746174696f6e2f657a7363726170652e737667\"></td>\n    </tr>\n    <tr>\n        <td>Status</td>\n        <td><img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8abc94d3c441a74121e4dc7d584076aaacba0014/68747470733a2f2f696d672e736869656c64732e696f2f707970692f7374617475732f657a7363726170652e737667\"></td>\n        <td>Downloads</td>\n        <td><img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/83ae391b34dd65f023e9bb5c0b4cdf01fc994b80/68747470733a2f2f696d672e736869656c64732e696f2f707970692f646d2f657a7363726170652e737667\"></td>\n    </tr>\n    <tr>\n        <td>Supported versions</td>\n        <td><img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d4a0824ffd2ae2b088f653ef0f3591b40907a304/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f657a7363726170652e737667\"></td>\n    </tr>\n</table>\n<h1>ezscrape</h1>\n<p>ezscrape provides a boilerplate for simple scraping tasks.</p>\n<p>It provide generic access to scraping functionality without exposing the user directly the the underlying libraries used (e.g. requests, selenium) when using the scraping functionality.\nThe used scraper is chosen based on the specified config parameters and will prefer the most flexibe / least resource intensive ones if possible.</p>\n<p>The exceptions of the underlying modules are handled and converted into the status of the result object.</p>\n<h1>Setup Requirements</h1>\n<h2>Setup Chrome and Webdriver</h2>\n<p>For some websites selenium will be used for scraping (e.g. requests doesn't support javascript)</p>\n<p>For that purpose the following environment variables need to be set otherwise an exception will be raised when the code is using selenium.</p>\n<ol>\n<li>\n<p>The Chrome Executable</p>\n<p><em>CHROME_EXEC_PATH</em></p>\n</li>\n<li>\n<p>The Chrome Webdriver Executable</p>\n<p><em>CHROME_WEBDRIVER_PATH</em></p>\n</li>\n</ol>\n<h1>Usage</h1>\n<ol>\n<li>The basic concept of a simple scrape is</li>\n<li>Create the Scrape Config with a Url</li>\n<li>Optional - set additional parameters on the scrape config</li>\n<li>Scrape with the given Config</li>\n<li>Check the Return Object if the Scrape was succesfull</li>\n<li>Get the HTML from the Return Object</li>\n</ol>\n<h2>Scrape a simple HTML Page</h2>\n<pre><code>\nimport ezscrape.scraping.scraper as scraper\nfrom ezscrape.scraping.core import ScrapeConfig\nfrom ezscrape.scraping.core import ScrapeStatus\n\nresult = scraper.scrape_url(ScrapeConfig('http://www.website.com'))\n\nif result.status == ScrapeStatus.SUCCESS:\n    html = result.first_page.html\nelse:\n    print(result.error_msg)\n\n</code></pre>\n<h2>Scrape a Page with Multiple Pages</h2>\n<pre><code>\nimport ezscrape.scraping.scraper as scraper\nfrom ezscrape.scraping.core import ScrapeConfig\nfrom ezscrape.scraping.core import WaitForXpathElem\nfrom ezscrape.scraping.core import ScrapeStatus\n\nconfig = ScrapeConfig('http://www.website.com')\n# Add contition to wait until Element with \"title='id'\" is loaded\"\nconfig.wait_for_elem_list.append(WaitForXpathElem(R'''//a[@title='id']'''))\n\nresult = scraper.scrape_url(config)\n\nfor page in result:\n    if page.status == ScrapeStatus.SUCCESS:\n        html = page.html\n    else:\n        print(result.error_msg)\n</code></pre>\n<h2>Scrape a Page and wait until an Element is Loaded</h2>\n<pre><code>\nimport ezscrape.scraping.scraper as scraper\nfrom ezscrape.scraping.core import ScrapeConfig\nfrom ezscrape.scraping.core import WaitForXpathElem\nfrom ezscrape.scraping.core import ScrapeStatus\n\n\nconfig = ScrapeConfig('http://www.website.com')\n# Add contition to wait until Element with \"title='id'\" is loaded\"\nconfig.wait_for_elem_list.append(WaitForXpathElem(R'''//a[@title='id']'''))\n\nresult = scraper.scrape_url(config)\n\nif result.status == ScrapeStatus.SUCCESS:\n    html = result.first_page.html\nelse:\n    print(result.error_msg)\n\n</code></pre>\n<h1>Scrape Config</h1>\n<p>ezscrape.scraping.core.ScrapeConfig</p>\n<p>The url is specified when creating the object.</p>\n<pre><code>from ezscrape.scraping.core import ScrapeConfig\n\nconfig = ScrapeConfig('http://some-url.com') \n</code></pre>\n<p>Additional parameters can be specified</p>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Purpose</th>\n<th>Type</th>\n<th>Default</th>\n<th>Example Use Case</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ScrapeConfig.url</td>\n<td>The URL used for the request</td>\n<td>str</td>\n<td>N/A</td>\n<td>Required for all Requests</td>\n</tr>\n<tr>\n<td>ScrapeConfig.request_timeout</td>\n<td>The timeout in seconds of the request</td>\n<td>long</td>\n<td>15</td>\n<td>Wait longer before timeout in a slow Network environment.</td>\n</tr>\n<tr>\n<td>ScrapeConfig.page_load_wait</td>\n<td>Time ti wait until a page is loaded completely before it times out</td>\n<td>int</td>\n<td>5.0</td>\n<td>Specify a longer time if the page loads dynamic elements slowly</td>\n</tr>\n<tr>\n<td>ScrapeConfig.proxy_http</td>\n<td>HTTP Proxy to use</td>\n<td>str</td>\n<td>N/A</td>\n<td>Send the request through an HTTP proxy (Proxy needs to support the Target protocol i.e. HTTP/HTTPS)</td>\n</tr>\n<tr>\n<td>ScrapeConfig.proxy_https</td>\n<td>HTTPS Proxy to use</td>\n<td>str</td>\n<td>N/A</td>\n<td>Send the request through an HTTPS proxy (Proxy needs to support the Target protocol i.e. HTTP/HTTPS)</td>\n</tr>\n<tr>\n<td>ScrapeConfig.useragent</td>\n<td>Custom Useragent to use</td>\n<td>str</td>\n<td>Internally Chosen</td>\n<td>User want to scrape with a custom Useragent</td>\n</tr>\n<tr>\n<td>ScrapeConfig.max_pages</td>\n<td>Maximum Pages to collect if \"next_button\" specifies</td>\n<td>int</td>\n<td>15</td>\n<td>User only wants to return 3 Pages max even if more pages available</td>\n</tr>\n<tr>\n<td>ScrapeConfig.next_button</td>\n<td>Add a button element that needs to be loaded and clicked for ultiple pages</td>\n<td>ezscrape.scraping.core.WaitForPageElem<br><br>or one of the subtypes e.g.<br><br>ezscrape.scraping.core.WaitForXpathElem</td>\n<td>N/A</td>\n<td>User wants to return multiple pages if the next page links are generated with Javascript</td>\n</tr>\n<tr>\n<td>ScrapeConfig.wait_for_elem_list</td>\n<td>A list of Elements that need to be loaded on the page before returning the scrape result</td>\n<td>List of <br>ezscrape.scraping.core.WaitForPageElem<br><br>or one of the subtypes e.g.<br><br>ezscrape.scraping.core.WaitForXpathElem</td>\n<td>N/A</td>\n<td>User is interested in multiple elements of a Javascript/Ajax page and needs to wait for all to load completely.</td>\n</tr></tbody></table>\n<h1>Scrape Status</h1>\n<p>The following statuses are supported in ezscrape.scraping.core.ScrapeStatus</p>\n<table>\n<thead>\n<tr>\n<th>Status</th>\n<th>Meaning</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ScrapeStatus.SUCCESS</td>\n<td>Scrape Succesfull</td>\n</tr>\n<tr>\n<td>ScrapeStatus.TIMEOUT</td>\n<td>A timeout error occured</td>\n</tr>\n<tr>\n<td>ScrapeStatus.PROXY_ERROR</td>\n<td>A proxy error occured</td>\n</tr>\n<tr>\n<td>ScrapeStatus.ERROR</td>\n<td>A generic error occured</td>\n</tr></tbody></table>\n<p>For non Success cases, additional error details are given in the <a href=\"#scrape-result\" rel=\"nofollow\">ScrapeResult</a> object</p>\n<h1>Scrape Result</h1>\n<p>The following attributes are available in ezscrape.scraping.core.ScrapeResults</p>\n<table>\n<thead>\n<tr>\n<th>Attribute</th>\n<th>Purpose</th>\n<th>Type</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ScrapeResult.url</td>\n<td>The url Scraped</td>\n<td>str</td>\n</tr>\n<tr>\n<td>ScrapeResult.caller_ip</td>\n<td>The caller IP.<br><br>This is not set for all cases. But where it is it should be reliable e.g. if Scraped through proxy, the proxy IP should be shown)</td>\n<td>str</td>\n</tr>\n<tr>\n<td>ScrapeResult.status</td>\n<td>The overall status of the Scrape</td>\n<td>ezscrape.scraping.core.ScrapeStatus</td>\n</tr>\n<tr>\n<td>ScrapeResult.error_msg</td>\n<td>The error message if the result is not SUCCESS</td>\n<td>str</td>\n</tr>\n<tr>\n<td>request_time_ms</td>\n<td>The combined scrape time of all pages scraped</td>\n<td>float</td>\n</tr>\n<tr>\n<td>first_page</td>\n<td>The ScrapePage scraped (first if multiple pages)</td>\n<td>ezscrape.scraping.core.ScrapePage</td>\n</tr></tbody></table>\n<h1>Scrape Page</h1>\n<p>The following attributes are available in ezscrape.scraping.core.ScrapePage</p>\n<table>\n<thead>\n<tr>\n<th>Attribute</th>\n<th>Purpose</th>\n<th>Type</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>html</td>\n<td>The HTML content scraped</td>\n<td>str</td>\n</tr>\n<tr>\n<td>request_time_ms</td>\n<td>the scrape duration for this page</td>\n<td>float</td>\n</tr>\n<tr>\n<td>status</td>\n<td>The scrape status for this page<br><br>ScrapePage doesn't have it's own error message. For details check ScrapeResult.error_msg</td>\n<td>ezscrape.scraping.core.ScrapeStatus</td>\n</tr></tbody></table>\n<h2>Contributing</h2>\n<p>Pull requests are welcome. For major changes, please open an issue first to discuss what you would like to change.</p>\n<p>Please make sure to update tests as appropriate.</p>\n<h2>License</h2>\n<p><a href=\"https://choosealicense.com/licenses/gpl-3.0/\" rel=\"nofollow\">GPLv3</a></p>\n<p>[1]: # Scrape Result\n[2]: # Scrape Result</p>\n\n          </div>"}, "last_serial": 7008372, "releases": {"0.2": [{"comment_text": "", "digests": {"md5": "4c55e60d14b02bd39e94b83135e5db0d", "sha256": "f1c16c378a91462faf6e197695607a56b85f2f4a28421886d3d98671d767ebda"}, "downloads": -1, "filename": "ezscrape-0.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "4c55e60d14b02bd39e94b83135e5db0d", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">= 3.7", "size": 23587, "upload_time": "2019-07-24T04:35:18", "upload_time_iso_8601": "2019-07-24T04:35:18.457196Z", "url": "https://files.pythonhosted.org/packages/6e/1c/528ec0a0976aea64b9654bc30843769fb4f86bd4dbdec6faac27b610ca4d/ezscrape-0.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4c49f479d543472608416ad1cf897bd7", "sha256": "defe06444efadb4be71c4fb019ee18f58ce55aa79af65c28ec29bc0c004b5e09"}, "downloads": -1, "filename": "ezscrape-0.2.tar.gz", "has_sig": false, "md5_digest": "4c49f479d543472608416ad1cf897bd7", "packagetype": "sdist", "python_version": "source", "requires_python": ">= 3.7", "size": 22111, "upload_time": "2019-07-24T04:35:20", "upload_time_iso_8601": "2019-07-24T04:35:20.574482Z", "url": "https://files.pythonhosted.org/packages/63/d1/552dabec209ddf8756976b9a732448700f4fb0c8fbf957dacda8ecf5449b/ezscrape-0.2.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "464df57d42be8f24434bb1364f3b0cd2", "sha256": "9b3d9a2d7c576890d8994f682d11cae3c25b735b6a2006cb1d7cbdade667f3f9"}, "downloads": -1, "filename": "ezscrape-0.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "464df57d42be8f24434bb1364f3b0cd2", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">= 3.7", "size": 26087, "upload_time": "2019-07-26T03:45:38", "upload_time_iso_8601": "2019-07-26T03:45:38.257870Z", "url": "https://files.pythonhosted.org/packages/7c/24/37586c437e57dff4f877960962c8c7ba207b8a09b0980b1ccd4f53f917df/ezscrape-0.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "801b6dd9db60304da73e1472afeef029", "sha256": "3144116b5e4c089b08808bd8746461e85884002a3154611a1f0f56f0212e26c5"}, "downloads": -1, "filename": "ezscrape-0.3.tar.gz", "has_sig": false, "md5_digest": "801b6dd9db60304da73e1472afeef029", "packagetype": "sdist", "python_version": "source", "requires_python": ">= 3.7", "size": 25617, "upload_time": "2019-07-26T03:45:39", "upload_time_iso_8601": "2019-07-26T03:45:39.769231Z", "url": "https://files.pythonhosted.org/packages/21/2c/1561ee38b0972ad9d270366f548e1449ff3e4d32729774fbeeac1d8f6281/ezscrape-0.3.tar.gz", "yanked": false}], "0.4": [{"comment_text": "", "digests": {"md5": "b583e87b086527fc275a4aa38cf64ca3", "sha256": "2397c23dc08e72f0cf7e67b21c1156ae64ddd569b83127d6b5d0b43400c97ed2"}, "downloads": -1, "filename": "ezscrape-0.4-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "b583e87b086527fc275a4aa38cf64ca3", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.7", "size": 26103, "upload_time": "2020-04-13T08:12:38", "upload_time_iso_8601": "2020-04-13T08:12:38.688162Z", "url": "https://files.pythonhosted.org/packages/cd/bb/5c21c91cda33b5cde96cdb7f7b2103fa27a7d9af68c9e32487b3b3303591/ezscrape-0.4-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "66c136f503941758d163913be31136b8", "sha256": "ee60cf1ee4f28315d729b7554e41c311ebf66a39a39d45610f1726374ebcdea4"}, "downloads": -1, "filename": "ezscrape-0.4.tar.gz", "has_sig": false, "md5_digest": "66c136f503941758d163913be31136b8", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 26202, "upload_time": "2020-04-13T08:12:39", "upload_time_iso_8601": "2020-04-13T08:12:39.962598Z", "url": "https://files.pythonhosted.org/packages/a1/e2/59cbfb6e533db865cfa39f6ec3a8dadfa0e99ab07003f67ebce46313d9a3/ezscrape-0.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b583e87b086527fc275a4aa38cf64ca3", "sha256": "2397c23dc08e72f0cf7e67b21c1156ae64ddd569b83127d6b5d0b43400c97ed2"}, "downloads": -1, "filename": "ezscrape-0.4-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "b583e87b086527fc275a4aa38cf64ca3", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.7", "size": 26103, "upload_time": "2020-04-13T08:12:38", "upload_time_iso_8601": "2020-04-13T08:12:38.688162Z", "url": "https://files.pythonhosted.org/packages/cd/bb/5c21c91cda33b5cde96cdb7f7b2103fa27a7d9af68c9e32487b3b3303591/ezscrape-0.4-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "66c136f503941758d163913be31136b8", "sha256": "ee60cf1ee4f28315d729b7554e41c311ebf66a39a39d45610f1726374ebcdea4"}, "downloads": -1, "filename": "ezscrape-0.4.tar.gz", "has_sig": false, "md5_digest": "66c136f503941758d163913be31136b8", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 26202, "upload_time": "2020-04-13T08:12:39", "upload_time_iso_8601": "2020-04-13T08:12:39.962598Z", "url": "https://files.pythonhosted.org/packages/a1/e2/59cbfb6e533db865cfa39f6ec3a8dadfa0e99ab07003f67ebce46313d9a3/ezscrape-0.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:44:20 2020"}