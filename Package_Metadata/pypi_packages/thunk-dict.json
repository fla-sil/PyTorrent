{"info": {"author": "kevalii", "author_email": "alexrankine@college.harvard.edu", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# thunk-dict\n\nDictionaries that enable the lazy evaluation and memoization of callable entries. thunk-dict is meant to serve as a convenient wrapper the lazy evaluation of potentially computationally expensive calls.\n\n## Use case\n\nBecause Python eagerly evaluates expressions, it is not possible include calls to functions within a dictionary without evaluating those calls first. To mimic lazy evaluation, one may turn to tricks like:\n\n```python\ndictionary = {\n  \"key1\": computationally_expensive_function\n}\n\n# Call the function later on\nresult = dictionary[\"key1\"]()\n```\n\nor alternatively, if you also wanted to pass in arguments later on,\n\n```python\ndictionary = {\n  \"key1\": lambda *args, **kwargs: computationally_expensive_function(*args, **kwargs)\n}\n\n# Call the function later on\nresult = dictionary[\"key1\"](\"blah\", parameter=100)\n```\n\nHowever, this approach suffers from two issues:\n\n1. It complicates the typing of your dictionaries and its entries and creates boilerplate (as in the second example).\n2. Reaccess requires the computationally expensive functions to be called again (i.e. the call isn't memoized)\n\nthunk-dict attempts to resolve both of these issues.\n\n```python\nfrom thunk_dict import ThunkDict\ndictionary = ThunkDict({\n  \"key1\": computationally_expensive_function\n})\n\n# Get result from call via simple access\nresult = dictionary[\"key1\"]\n\n# Subsequent accesses use the memoized result.\n```\n\nFor noncallable entries, thunk-dict works just like a regular dict. thunk-dict also features the same API as regular Python dictionaries, meaning you don't have to sacrifice anything by using its wrapper.\n\n## Features\n1. Convenient thunk-like behavior in dictionaries\n2. Works for any objects that register with dict\n3. Very low overhead\n\n## Installation\n\nFrom PyPi\n```bash\npip install thunk-dict\n```\n\nFrom source distribution\n```bash\ngit clone https://github.com/kevalii/thunk-dict.git\ncd https://github.com/kevalii/thunk-dict.git\npip install .\n```\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/kevalii/thunk-dict", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "thunk-dict", "package_url": "https://pypi.org/project/thunk-dict/", "platform": "", "project_url": "https://pypi.org/project/thunk-dict/", "project_urls": {"Homepage": "https://github.com/kevalii/thunk-dict"}, "release_url": "https://pypi.org/project/thunk-dict/0.1.1/", "requires_dist": null, "requires_python": "", "summary": "Memoized dictionaries", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>thunk-dict</h1>\n<p>Dictionaries that enable the lazy evaluation and memoization of callable entries. thunk-dict is meant to serve as a convenient wrapper the lazy evaluation of potentially computationally expensive calls.</p>\n<h2>Use case</h2>\n<p>Because Python eagerly evaluates expressions, it is not possible include calls to functions within a dictionary without evaluating those calls first. To mimic lazy evaluation, one may turn to tricks like:</p>\n<pre><span class=\"n\">dictionary</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"s2\">\"key1\"</span><span class=\"p\">:</span> <span class=\"n\">computationally_expensive_function</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># Call the function later on</span>\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">dictionary</span><span class=\"p\">[</span><span class=\"s2\">\"key1\"</span><span class=\"p\">]()</span>\n</pre>\n<p>or alternatively, if you also wanted to pass in arguments later on,</p>\n<pre><span class=\"n\">dictionary</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"s2\">\"key1\"</span><span class=\"p\">:</span> <span class=\"k\">lambda</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">computationally_expensive_function</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># Call the function later on</span>\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">dictionary</span><span class=\"p\">[</span><span class=\"s2\">\"key1\"</span><span class=\"p\">](</span><span class=\"s2\">\"blah\"</span><span class=\"p\">,</span> <span class=\"n\">parameter</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">)</span>\n</pre>\n<p>However, this approach suffers from two issues:</p>\n<ol>\n<li>It complicates the typing of your dictionaries and its entries and creates boilerplate (as in the second example).</li>\n<li>Reaccess requires the computationally expensive functions to be called again (i.e. the call isn't memoized)</li>\n</ol>\n<p>thunk-dict attempts to resolve both of these issues.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">thunk_dict</span> <span class=\"kn\">import</span> <span class=\"n\">ThunkDict</span>\n<span class=\"n\">dictionary</span> <span class=\"o\">=</span> <span class=\"n\">ThunkDict</span><span class=\"p\">({</span>\n  <span class=\"s2\">\"key1\"</span><span class=\"p\">:</span> <span class=\"n\">computationally_expensive_function</span>\n<span class=\"p\">})</span>\n\n<span class=\"c1\"># Get result from call via simple access</span>\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">dictionary</span><span class=\"p\">[</span><span class=\"s2\">\"key1\"</span><span class=\"p\">]</span>\n\n<span class=\"c1\"># Subsequent accesses use the memoized result.</span>\n</pre>\n<p>For noncallable entries, thunk-dict works just like a regular dict. thunk-dict also features the same API as regular Python dictionaries, meaning you don't have to sacrifice anything by using its wrapper.</p>\n<h2>Features</h2>\n<ol>\n<li>Convenient thunk-like behavior in dictionaries</li>\n<li>Works for any objects that register with dict</li>\n<li>Very low overhead</li>\n</ol>\n<h2>Installation</h2>\n<p>From PyPi</p>\n<pre>pip install thunk-dict\n</pre>\n<p>From source distribution</p>\n<pre>git clone https://github.com/kevalii/thunk-dict.git\n<span class=\"nb\">cd</span> https://github.com/kevalii/thunk-dict.git\npip install .\n</pre>\n\n          </div>"}, "last_serial": 5559752, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "48872aa0c41779f9a0c3f886ef9567e9", "sha256": "017a5018bea264802d970eca174fa268426cddd527e7cd41cbda4071757730c2"}, "downloads": -1, "filename": "thunk_dict-0.1-py2-none-any.whl", "has_sig": false, "md5_digest": "48872aa0c41779f9a0c3f886ef9567e9", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 2825, "upload_time": "2019-07-20T04:25:42", "upload_time_iso_8601": "2019-07-20T04:25:42.952940Z", "url": "https://files.pythonhosted.org/packages/18/45/6f3e995d59db938889b4fb81e01ffabb5525e1bf9918ddbb256e36329b2f/thunk_dict-0.1-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b1aaa572843320b64991dac9a4c14d97", "sha256": "46ac689c5457ee6ff8b5db255011f5581519a8033a584a9d7ae9b2d4e47dfc55"}, "downloads": -1, "filename": "thunk_dict-0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "b1aaa572843320b64991dac9a4c14d97", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 2826, "upload_time": "2019-07-20T04:25:45", "upload_time_iso_8601": "2019-07-20T04:25:45.098551Z", "url": "https://files.pythonhosted.org/packages/6d/d3/a4becb811cfb94a9144a2e2cb4ee400015bcf2632a2f5d4a98788b8c418f/thunk_dict-0.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a0cca615e375b1c46685d28e85bfd048", "sha256": "ea9ad13f5dc8d716b01709b6ae3c370443b2a96d63ff637e288dcc5540a1037e"}, "downloads": -1, "filename": "thunk_dict-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "a0cca615e375b1c46685d28e85bfd048", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 3024, "upload_time": "2019-07-20T04:25:46", "upload_time_iso_8601": "2019-07-20T04:25:46.507543Z", "url": "https://files.pythonhosted.org/packages/cd/dc/518ee0686a202867255af61463acbb938f699cbe2144cbe3b24cb49d27ef/thunk_dict-0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "89e3adcc7cb0179eea40fe96fc5723f7", "sha256": "c7f0c743a24414543bb46ee677675687c9e79f455214d50c396c455f98489c0a"}, "downloads": -1, "filename": "thunk_dict-0.1.tar.gz", "has_sig": false, "md5_digest": "89e3adcc7cb0179eea40fe96fc5723f7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2469, "upload_time": "2019-07-20T04:25:47", "upload_time_iso_8601": "2019-07-20T04:25:47.821199Z", "url": "https://files.pythonhosted.org/packages/8a/4e/001a7ed413129f9c75fbe4328c9ea32bcacb59a2e988bfc5e6c31ee0f4c6/thunk_dict-0.1.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "516cdcafce42fe8ad292ce090f798937", "sha256": "c7bf022ae5b86cf9850753885afd064bf02729b26dfbcfe957b99ad2915bae3a"}, "downloads": -1, "filename": "thunk_dict-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "516cdcafce42fe8ad292ce090f798937", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 3899, "upload_time": "2019-07-20T04:39:45", "upload_time_iso_8601": "2019-07-20T04:39:45.868703Z", "url": "https://files.pythonhosted.org/packages/de/f0/c72bc948fe0619995266a6e91f909ea998ea0f8df6142443f5c1d847f3cf/thunk_dict-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c9bacef5ba8312acfbded203f1e8f801", "sha256": "fb2c60db3adbdef50fa7d6df2ba0a6cf2418a39a441e68f74ba8b18ea0a0008a"}, "downloads": -1, "filename": "thunk_dict-0.1.1.tar.gz", "has_sig": false, "md5_digest": "c9bacef5ba8312acfbded203f1e8f801", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2846, "upload_time": "2019-07-20T04:39:47", "upload_time_iso_8601": "2019-07-20T04:39:47.237887Z", "url": "https://files.pythonhosted.org/packages/1a/01/127f0dd557d6ad9b71d9fa3ab0b1fbfa5d6ee8228839b0d7fb0b95495ed0/thunk_dict-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "516cdcafce42fe8ad292ce090f798937", "sha256": "c7bf022ae5b86cf9850753885afd064bf02729b26dfbcfe957b99ad2915bae3a"}, "downloads": -1, "filename": "thunk_dict-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "516cdcafce42fe8ad292ce090f798937", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 3899, "upload_time": "2019-07-20T04:39:45", "upload_time_iso_8601": "2019-07-20T04:39:45.868703Z", "url": "https://files.pythonhosted.org/packages/de/f0/c72bc948fe0619995266a6e91f909ea998ea0f8df6142443f5c1d847f3cf/thunk_dict-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c9bacef5ba8312acfbded203f1e8f801", "sha256": "fb2c60db3adbdef50fa7d6df2ba0a6cf2418a39a441e68f74ba8b18ea0a0008a"}, "downloads": -1, "filename": "thunk_dict-0.1.1.tar.gz", "has_sig": false, "md5_digest": "c9bacef5ba8312acfbded203f1e8f801", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2846, "upload_time": "2019-07-20T04:39:47", "upload_time_iso_8601": "2019-07-20T04:39:47.237887Z", "url": "https://files.pythonhosted.org/packages/1a/01/127f0dd557d6ad9b71d9fa3ab0b1fbfa5d6ee8228839b0d7fb0b95495ed0/thunk_dict-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:53:34 2020"}