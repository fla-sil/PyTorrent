{"info": {"author": "Matthias Bussonnier", "author_email": "bussonniermatthias@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License"], "description": "warn\n====\n\nBetter warnings.\n\nSee the full `documentation <https://carreau.github.io/warn>`__.\n\nThe Python standard `warning\nmodule <https://docs.python.org/3/library/warnings.html>`__ is extremely\ngood, and I believe underutilized; Though it missed a few functionality;\nin particular it allows filtering only on the code that triggered/called\na deprecated functions, but have no ability to filter depending on the\nmodule that emitted the warning.\n\nThis is an attempt to fix that.\n\nToo long didn't read:\n---------------------\n\nExplicit is better than implicit:\n\n::\n\n    from warn import patch\n    patch()\n\n    # use the warning module as usual\n\nThough the ``warnings.filterwarning`` function has now gained the\n``emodule`` keyword parameter to filer by the module that emitted the\nwarning; example:\n\n::\n\n    import warnings\n    warnings.filter('default', category=DeprecationWarnings, emodule='matplotlib\\.pyplot.*')\n\nAll warnings from ``matplotlib.pyplot`` and its submodule will now be\nshow by default, regardless of whether you trigger them directly, via\npandas, seaborn, your own code...\n\nWarning emitter, warning caller.\n--------------------------------\n\nPython warnings are a beautiful relative simple piece of code which is\nextremely powerful in the right hands once you learned how to use it.\n\nIt allows you to determine a posteriori whether you want a particular\npiece of code to trigger an exception, display a message to the user or\nsimply do nothing.\n\nIt is difficult to show the full power of the waring with a simple piece\nof code, but in large code base, and once you start having several layer\nof dependency a parsimonious usage of warning , and in particular\n``DeprecationWarning`` can make a large difference.\n\nCaller, vs Emitter\n~~~~~~~~~~~~~~~~~~\n\nLet's clear up some vocabulary first, to differentiate the warning\n\"Caller\" from the warning \"Emitter\"\n\n.. code:: python\n\n    # file emitter.py\n\n    def public_api(param1, deprecated_parameter=None)::\n\n        if deprecated_parameter:\n            return _deprecated_function(param1, deprecated_parameter):\n        else:\n            return normal_buisnell_logic(param1)\n\n\n    def _deprecated_function(param1, deprecated_parameter):\n        import warningsA\n        # warning emitted here\n        warnings.warn('using `deprecated_parameter` is deprecated ',\n                DeprecationWarning,\n                stacklevel=3)\n\n.. code:: python\n\n    # file caller.py\n    from emitter import public_api\n    public_api(1, True)  # warning triggered here.\n\nyou can now do something like\n\n.. code:: python\n\n    from warn import path\n    patch()\n\n    import warnings\n    warnings.filter('default', category=DeprecationWarnings, emodule='emitter.*')\n    import emitter\n    emitter.bar() # will log the warning !\n\nChange this to \"error\" in your test-suite, and filter by all your\ndependencies !\n\nThe Python built-in module allow you to filter warning by caller\n(assuming the emitter have set the ``stacklevel`` options right, which\nis not always obvious to do). This is extremely useful when you are\ndeveloping the caller; but not that much when you are developing the\nemitter.\n\nIt is common for a caller to actually have many underlying library the\ncan trigger warnings, or for a developer to only care about a subset of\nthe emitter warnings.\n\nMany libraries are going around this limitation by sub-classing\nWarnings; two example are\n`Matplolib <https://github.com/matplotlib/matplotlib/blob/d158587a3cd50df3835d3d65a159c08b37b17f43/lib/matplotlib/cbook.py#L36-L47>`__\nand\n`sympy <https://github.com/sympy/sympy/blob/deeb5ac6789f97abd4846e03e9f2b2fced384262/sympy/utilities/exceptions.py>`__\nin order to selectively enable them. Still this only give a coarse way\nof filtering warnings, and it required to know where the warnings are\ndefined in order to import and filter for them.\n\nBecause of Python default choice to filter out deprecation warnings,\nthis also forced either inherit ``UserWarning`` (choice of matplotlib),\nwhich removes the semantic meaning of ``DeprecationWarning`` offered by\nPython or to inject a custom filter in the warnings filter module on\nimport (choice of Sympy), which can lead to surprising behavior.\n\nAvailability on Python 2\n------------------------\n\nI don't know if if works on Python 2; I don't really have the time to\ninvestigate; I don't particularly care a lot; but feel free to send a PR\nthat ads support if necessary I would be happy to merge it.\n\nlimitations\n-----------\n\nThis does not work on packages that either :\n\n-  Got and keep a reference on ``warnings.warn`` before ``patch()`` have\n   been called; that is to say things of the form:\n   ``from warnings iport warn``\n\n-  Cannot work on C-extensions (aka won't filter on ``numpy``) ; Both of\n   the above are technically possible with Assembly Patching which I'm\n   not confortable with.\n\nThe Ugly\n--------\n\nAs Warnings filters *have to be 5 tuples with specific types* this works\nby shoving dummy instances in the filters list and using this as keys\nfor a proxy to lookup real filter keys. So worse case scenario the\nfilter you insert with this module will just be no-op. But you will\nincur a performance penalty if you use this, especially if your codebase\ntriggers a lot of warnings.\n\nGet the upstream\n----------------\n\nI'd **love** feedback and have a nicer API to deal with warnings at\nCPython level in order to provide custom filters, and custom filters\nfunctions.\n\nApart\u00e9\n======\n\nGood Deprecation Warnings.\n--------------------------\n\nA good warning and in particular Deprecation warning is extremely\nhelpful and can make the difference for the adoption of an API. Take the\nfollowing fiction example:\n\n.. code:: python\n\n    >>> import warnings\n\n    >>> warnings.simplefilter('default')\n\n    >>> from quezetraste import frobulate, constribule\n\n    >>> frobulate('HI', 3)\n    DeprecationWarning: The 'frobulate' function is deprecated.\n\n    >>> contribule('Hi', 3)\n\n    DeprecationWarning: The 'constribule(message, recipient_id)' function of the\n                        'quezetraste' package is deprecated since version 7.3. It\n                        haz been replaced by 'Recipient(id).send(message)' which\n                        was available since 7.2. See http://url.to/documentation/#1337\n\nTurn the DeprecationWarnings into error in your test-suite!\n-----------------------------------------------------------\n\nAt least make them visible; at best once you fixed a deprecation warning\nturn **this specific one** into an error to not reproduce it.\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Carreau/warn", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "warn", "package_url": "https://pypi.org/project/warn/", "platform": "", "project_url": "https://pypi.org/project/warn/", "project_urls": {"Homepage": "https://github.com/Carreau/warn"}, "release_url": "https://pypi.org/project/warn/0.1.0/", "requires_dist": null, "requires_python": "~=3.3", "summary": "A more flexible warning module. ", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"warn\">\n<h2>warn</h2>\n<p>Better warnings.</p>\n<p>See the full <a href=\"https://carreau.github.io/warn\" rel=\"nofollow\">documentation</a>.</p>\n<p>The Python standard <a href=\"https://docs.python.org/3/library/warnings.html\" rel=\"nofollow\">warning\nmodule</a> is extremely\ngood, and I believe underutilized; Though it missed a few functionality;\nin particular it allows filtering only on the code that triggered/called\na deprecated functions, but have no ability to filter depending on the\nmodule that emitted the warning.</p>\n<p>This is an attempt to fix that.</p>\n<div id=\"too-long-didn-t-read\">\n<h3>Too long didn\u2019t read:</h3>\n<p>Explicit is better than implicit:</p>\n<pre>from warn import patch\npatch()\n\n# use the warning module as usual\n</pre>\n<p>Though the <tt>warnings.filterwarning</tt> function has now gained the\n<tt>emodule</tt> keyword parameter to filer by the module that emitted the\nwarning; example:</p>\n<pre>import warnings\nwarnings.filter('default', category=DeprecationWarnings, emodule='matplotlib\\.pyplot.*')\n</pre>\n<p>All warnings from <tt>matplotlib.pyplot</tt> and its submodule will now be\nshow by default, regardless of whether you trigger them directly, via\npandas, seaborn, your own code\u2026</p>\n</div>\n<div id=\"warning-emitter-warning-caller\">\n<h3>Warning emitter, warning caller.</h3>\n<p>Python warnings are a beautiful relative simple piece of code which is\nextremely powerful in the right hands once you learned how to use it.</p>\n<p>It allows you to determine a posteriori whether you want a particular\npiece of code to trigger an exception, display a message to the user or\nsimply do nothing.</p>\n<p>It is difficult to show the full power of the waring with a simple piece\nof code, but in large code base, and once you start having several layer\nof dependency a parsimonious usage of warning , and in particular\n<tt>DeprecationWarning</tt> can make a large difference.</p>\n<div id=\"caller-vs-emitter\">\n<h4>Caller, vs Emitter</h4>\n<p>Let\u2019s clear up some vocabulary first, to differentiate the warning\n\u201cCaller\u201d from the warning \u201cEmitter\u201d</p>\n<pre><span class=\"c1\"># file emitter.py</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">public_api</span><span class=\"p\">(</span><span class=\"n\">param1</span><span class=\"p\">,</span> <span class=\"n\">deprecated_parameter</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)::</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">deprecated_parameter</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">_deprecated_function</span><span class=\"p\">(</span><span class=\"n\">param1</span><span class=\"p\">,</span> <span class=\"n\">deprecated_parameter</span><span class=\"p\">):</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">normal_buisnell_logic</span><span class=\"p\">(</span><span class=\"n\">param1</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">_deprecated_function</span><span class=\"p\">(</span><span class=\"n\">param1</span><span class=\"p\">,</span> <span class=\"n\">deprecated_parameter</span><span class=\"p\">):</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">warningsA</span>\n    <span class=\"c1\"># warning emitted here</span>\n    <span class=\"n\">warnings</span><span class=\"o\">.</span><span class=\"n\">warn</span><span class=\"p\">(</span><span class=\"s1\">'using `deprecated_parameter` is deprecated '</span><span class=\"p\">,</span>\n            <span class=\"ne\">DeprecationWarning</span><span class=\"p\">,</span>\n            <span class=\"n\">stacklevel</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n</pre>\n<pre><span class=\"c1\"># file caller.py</span>\n<span class=\"kn\">from</span> <span class=\"nn\">emitter</span> <span class=\"kn\">import</span> <span class=\"n\">public_api</span>\n<span class=\"n\">public_api</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">)</span>  <span class=\"c1\"># warning triggered here.</span>\n</pre>\n<p>you can now do something like</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">warn</span> <span class=\"kn\">import</span> <span class=\"n\">path</span>\n<span class=\"n\">patch</span><span class=\"p\">()</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">warnings</span>\n<span class=\"n\">warnings</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"s1\">'default'</span><span class=\"p\">,</span> <span class=\"n\">category</span><span class=\"o\">=</span><span class=\"n\">DeprecationWarnings</span><span class=\"p\">,</span> <span class=\"n\">emodule</span><span class=\"o\">=</span><span class=\"s1\">'emitter.*'</span><span class=\"p\">)</span>\n<span class=\"kn\">import</span> <span class=\"nn\">emitter</span>\n<span class=\"n\">emitter</span><span class=\"o\">.</span><span class=\"n\">bar</span><span class=\"p\">()</span> <span class=\"c1\"># will log the warning !</span>\n</pre>\n<p>Change this to \u201cerror\u201d in your test-suite, and filter by all your\ndependencies !</p>\n<p>The Python built-in module allow you to filter warning by caller\n(assuming the emitter have set the <tt>stacklevel</tt> options right, which\nis not always obvious to do). This is extremely useful when you are\ndeveloping the caller; but not that much when you are developing the\nemitter.</p>\n<p>It is common for a caller to actually have many underlying library the\ncan trigger warnings, or for a developer to only care about a subset of\nthe emitter warnings.</p>\n<p>Many libraries are going around this limitation by sub-classing\nWarnings; two example are\n<a href=\"https://github.com/matplotlib/matplotlib/blob/d158587a3cd50df3835d3d65a159c08b37b17f43/lib/matplotlib/cbook.py#L36-L47\" rel=\"nofollow\">Matplolib</a>\nand\n<a href=\"https://github.com/sympy/sympy/blob/deeb5ac6789f97abd4846e03e9f2b2fced384262/sympy/utilities/exceptions.py\" rel=\"nofollow\">sympy</a>\nin order to selectively enable them. Still this only give a coarse way\nof filtering warnings, and it required to know where the warnings are\ndefined in order to import and filter for them.</p>\n<p>Because of Python default choice to filter out deprecation warnings,\nthis also forced either inherit <tt>UserWarning</tt> (choice of matplotlib),\nwhich removes the semantic meaning of <tt>DeprecationWarning</tt> offered by\nPython or to inject a custom filter in the warnings filter module on\nimport (choice of Sympy), which can lead to surprising behavior.</p>\n</div>\n</div>\n<div id=\"availability-on-python-2\">\n<h3>Availability on Python 2</h3>\n<p>I don\u2019t know if if works on Python 2; I don\u2019t really have the time to\ninvestigate; I don\u2019t particularly care a lot; but feel free to send a PR\nthat ads support if necessary I would be happy to merge it.</p>\n</div>\n<div id=\"limitations\">\n<h3>limitations</h3>\n<p>This does not work on packages that either :</p>\n<ul>\n<li>Got and keep a reference on <tt>warnings.warn</tt> before <tt>patch()</tt> have\nbeen called; that is to say things of the form:\n<tt>from warnings iport warn</tt></li>\n<li>Cannot work on C-extensions (aka won\u2019t filter on <tt>numpy</tt>) ; Both of\nthe above are technically possible with Assembly Patching which I\u2019m\nnot confortable with.</li>\n</ul>\n</div>\n<div id=\"the-ugly\">\n<h3>The Ugly</h3>\n<p>As Warnings filters <em>have to be 5 tuples with specific types</em> this works\nby shoving dummy instances in the filters list and using this as keys\nfor a proxy to lookup real filter keys. So worse case scenario the\nfilter you insert with this module will just be no-op. But you will\nincur a performance penalty if you use this, especially if your codebase\ntriggers a lot of warnings.</p>\n</div>\n<div id=\"get-the-upstream\">\n<h3>Get the upstream</h3>\n<p>I\u2019d <strong>love</strong> feedback and have a nicer API to deal with warnings at\nCPython level in order to provide custom filters, and custom filters\nfunctions.</p>\n</div>\n</div>\n<div id=\"aparte\">\n<h2>Apart\u00e9</h2>\n<div id=\"good-deprecation-warnings\">\n<h3>Good Deprecation Warnings.</h3>\n<p>A good warning and in particular Deprecation warning is extremely\nhelpful and can make the difference for the adoption of an API. Take the\nfollowing fiction example:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">warnings</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">warnings</span><span class=\"o\">.</span><span class=\"n\">simplefilter</span><span class=\"p\">(</span><span class=\"s1\">'default'</span><span class=\"p\">)</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">quezetraste</span> <span class=\"kn\">import</span> <span class=\"n\">frobulate</span><span class=\"p\">,</span> <span class=\"n\">constribule</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">frobulate</span><span class=\"p\">(</span><span class=\"s1\">'HI'</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"ne\">DeprecationWarning</span><span class=\"p\">:</span> <span class=\"n\">The</span> <span class=\"s1\">'frobulate'</span> <span class=\"n\">function</span> <span class=\"ow\">is</span> <span class=\"n\">deprecated</span><span class=\"o\">.</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">contribule</span><span class=\"p\">(</span><span class=\"s1\">'Hi'</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n\n<span class=\"ne\">DeprecationWarning</span><span class=\"p\">:</span> <span class=\"n\">The</span> <span class=\"s1\">'constribule(message, recipient_id)'</span> <span class=\"n\">function</span> <span class=\"n\">of</span> <span class=\"n\">the</span>\n                    <span class=\"s1\">'quezetraste'</span> <span class=\"n\">package</span> <span class=\"ow\">is</span> <span class=\"n\">deprecated</span> <span class=\"n\">since</span> <span class=\"n\">version</span> <span class=\"mf\">7.3</span><span class=\"o\">.</span> <span class=\"n\">It</span>\n                    <span class=\"n\">haz</span> <span class=\"n\">been</span> <span class=\"n\">replaced</span> <span class=\"n\">by</span> <span class=\"s1\">'Recipient(id).send(message)'</span> <span class=\"n\">which</span>\n                    <span class=\"n\">was</span> <span class=\"n\">available</span> <span class=\"n\">since</span> <span class=\"mf\">7.2</span><span class=\"o\">.</span> <span class=\"n\">See</span> <span class=\"n\">http</span><span class=\"p\">:</span><span class=\"o\">//</span><span class=\"n\">url</span><span class=\"o\">.</span><span class=\"n\">to</span><span class=\"o\">/</span><span class=\"n\">documentation</span><span class=\"o\">/</span><span class=\"c1\">#1337</span>\n</pre>\n</div>\n<div id=\"turn-the-deprecationwarnings-into-error-in-your-test-suite\">\n<h3>Turn the DeprecationWarnings into error in your test-suite!</h3>\n<p>At least make them visible; at best once you fixed a deprecation warning\nturn <strong>this specific one</strong> into an error to not reproduce it.</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 2324652, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "e50eec36dfdd72bd0f592565ed0730f9", "sha256": "3c6c75e90ee426ab402ff5eff80d6fa061b1c8ffab4c58817cd6dddf10f2ae44"}, "downloads": -1, "filename": "warn-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "e50eec36dfdd72bd0f592565ed0730f9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">3", "size": 14904, "upload_time": "2016-08-27T00:34:55", "upload_time_iso_8601": "2016-08-27T00:34:55.158952Z", "url": "https://files.pythonhosted.org/packages/46/57/0ad7aceae59194e778a9fff9b05923b8a7990ad153b829f316d58708adc4/warn-0.0.1-py3-none-any.whl", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "b2a4edddf402c8c0bebb0146415b3294", "sha256": "12d7b9728cea836a5835a3014ee5dca6b881928aa3c6825c1c7aff2ad1470181"}, "downloads": -1, "filename": "warn-0.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "b2a4edddf402c8c0bebb0146415b3294", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": "~=3.3", "size": 23622, "upload_time": "2016-09-04T23:24:35", "upload_time_iso_8601": "2016-09-04T23:24:35.986809Z", "url": "https://files.pythonhosted.org/packages/00/73/8f83635cecd46458d6fbffc6e6a3906babd0c79ab96fa72624bc0580c9a0/warn-0.1.0-py2.py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b2a4edddf402c8c0bebb0146415b3294", "sha256": "12d7b9728cea836a5835a3014ee5dca6b881928aa3c6825c1c7aff2ad1470181"}, "downloads": -1, "filename": "warn-0.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "b2a4edddf402c8c0bebb0146415b3294", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": "~=3.3", "size": 23622, "upload_time": "2016-09-04T23:24:35", "upload_time_iso_8601": "2016-09-04T23:24:35.986809Z", "url": "https://files.pythonhosted.org/packages/00/73/8f83635cecd46458d6fbffc6e6a3906babd0c79ab96fa72624bc0580c9a0/warn-0.1.0-py2.py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 03:32:23 2020"}