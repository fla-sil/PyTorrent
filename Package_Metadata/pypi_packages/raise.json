{"info": {"author": "Alexander Kozhevnikov", "author_email": "mentalisttraceur@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 6 - Mature", "Operating System :: OS Independent", "Programming Language :: Python :: 2", "Programming Language :: Python :: 3"], "description": "Python ``raise`` as a Function\n==============================\n\nRaise exceptions with a function instead of a statement.\n\nProvides a minimal, clean and portable interface for raising\nexceptions with all the advantages of functions over syntax.\n\n\nWhy\n---\n\nI want to be able to work with exceptions in a way that is:\n\n1. *Intuitive* to use and see in code.\n2. *Generic* and *flexible*, empowering *reuse* and *composition*.\n3. *Portable* to all versions of Python I might want to use.\n\nIn my code, I've often found myself writing interfaces that combine\nthe intuitive nature of Python 3's ``raise`` and ``with_traceback``,\nthe generic and flexible pattern of raising exceptions in other\ncoroutines or threads of execution as exemplified by the ``throw``\nmethod on Python generators, and the inherently portable and\npowerfully reusable and composable form of a basic function.\n\nThe interface provided by this module, the function signature taking\nan ``exception`` (either an instance *or* a type) and an optional\n``traceback`` instance, is what I found myself arriving at that met all\nof these criteria. It has served me well in code that I've worked on,\nand I'm submitting it to the world in the hope that others will either\nfind it useful and build upon it or point out flaws in my approach.\n\nIf you have a more specific \"why\" question, I recorded my reasons for a\nlot of the specific choices here in the `Design Decisions`_ section.\n\n\nVersioning\n----------\n\nThis library's version numbers follow the `SemVer 2.0.0 specification\n<https://semver.org/spec/v2.0.0.html>`_.\n\nThe current version number is available in the variable ``__version__``\nas is normal for Python modules.\n\n\nInstallation\n------------\n\n::\n\n    pip install raise\n\n**If** you need or want to get it *manually*, or you need\nthe \"no traceback\" variant, see the `Advanced/Manual\nInstallation`_ section for suggestions/tips.\n\n\nUsage\n-----\n\nImport the ``raise_`` function from the ``raise_`` module:\n\n.. code:: python\n\n    from raise_ import raise_\n\nThen you can raise things as you'd expect:\n\n1. Raising an exception:\n\n   .. code:: python\n\n       raise_(Exception('foo'))\n\n   (You can also pass an exception type instead of an\n   instance as the first argument to ``raise_``.)\n\n2. Raising an exception with a traceback:\n\n   .. code:: python\n\n       raise_(Exception('foo'), my_traceback_object)\n\n\nPortability\n-----------\n\nPortable to all releases of both Python 3 and Python 2.\n\n(The oldest tested is 2.5, but it will likely work on all\nPython 2 versions and probably on even earlier versions.)\n\nFor implementations of Python that do not support raising with a custom\ntraceback, a \"no traceback\" variant can be installed manually.\n\n\nAdvanced/Manual Installation\n----------------------------\n\nThere are three recommended ways of installing this manually, depending\non your needs:\n\n1. If it does **not** need to be imported by different incompatible\n   Python versions, then you can just take either ``raise_3.py`` or\n   ``raise_2.py`` and save it as ``raise_.py``.\n\n2. If you're using a Python implementation that does not support raising\n   exceptions with a custom traceback, take the ``raise_no_traceback.py``\n   file and save it as ``raise_.py``.\n\n2. If you need the same file to be importable into more than one of the\n   above, combine the files you need either into one ``raise_.py`` file\n   or into one ``raise_`` directory with an ``__init__.py``.\n\nThat way you can always do ``from raise_ import raise_`` and it'll\njust work, without version-detecting boilerplate or the file names\n(which are an implementation detail) leaking into your other code.\n\nYou are of course welcome to just copy-paste the tiny ``raise_`` function\ndefinition into your code, just keep in mind the compatibility issues\ninvolved: your code will only work without modification on Python\nversions compatible with the version you chose, and Python 2's version\ncauses a SyntaxError in Python 3, which is uncatchable unless you import\nit from another file or wrap that function definition in an ``exec``.\n\n\nDesign Decisions\n----------------\n\n* Allowing ``exception`` to be either an instance or a type, because\n  it is sometimes useful and is *very* ingrained in Python.\n\n* Not currently implementing an equivalent to\n  Python 3's ``except ... from ...`` syntax.\n\n  Ultimately, this syntax just assigns one exception\n  as an attribute on another exception.\n\n  This strikes me as *complecting* two different jobs together:\n  raising an exception instance and *initializing* an\n  exception instance with a ``__cause__`` attribute.\n\n  I note that generators' ``throw`` method does not have support\n  for a separe \"from\"/\"cause\" argument either. Perhaps it should,\n  but then everything implementing this interface would have to\n  implement extra logic to handle that extra argument.\n\n  Instead I would advocate for a separate interface for setting the\n  ``__cause__`` or ``__context__`` attributes on exceptions.\n\n* Not using the convention of taking separate ``type`` and ``value``\n  arguments because it seems like a counter-intuitive and\n  inappropriate convention for *raising* an exception.\n  (It is a good pattern for functions that *receive* exceptions.)\n  \n  Python 3 dropped support for separate ``type`` and ``value``\n  from the ``raise`` statement, so it seems enough people\n  responsible for the language agree with this assessment.\n\n  Also fully/properly supporting all semantics/variations that ``raise``\n  allowed before Python 3 would bloat the code excessively.\n\n* Not supporting Python 3's behavior of using the exception's\n  ``__traceback__`` attribute as the traceback to raise with\n  by default if no traceback is specified.\n\n  Not trying to emulate it in Python 2 and intentionally suppressing\n  it in Python 3 by always calling ``.with_traceback`` and using\n  ``None`` as the default traceback argument, because:\n\n  1. When an insufficiently careful coder (almost all of us almost all\n     of the time) has code work one way on one platform, they assume\n     it will work that way consistently on other platforms.\n\n  2. Not suppressing this behavior requires more code and complicating\n     the interface - some other default value for the traceback\n     argument besides ``None`` is needed instead (``...``, also known\n     as ``Ellipsis``, is a good candidate).\n\n  3. Emulating Python 3's behavior on Python 2, would create extra\n     potential for **wrong** behavior: any ``except`` that catches\n     an exception without updating the ``__traceback__`` before\n     passing it to code that relies on it will result in really\n     misleading gaps in the traceback.\n\n  4. Emulating Python 3's behavior on the \"no traceback\" Python\n     implementations has similar problems, except worse: some\n     of those Python implementations don't even have a way of\n     adding attributes to native exceptions, so the would be\n     more code to achieve it and more edge cases to consider.\n\n  5. If it differs across implementations, people will make mistakes.\n     Simplicity and consistency that covers most cases is valuable.\n     Portable correctness is a priority goal here. Gracefully\n     degrading in this case would risk correctness and debugging.\n\n* Using different implementation files for Python 3+, Python 2-,\n  and \"no traceback\" Python implementations because:\n\n  1. nesting code in `exec` makes the code less readable and\n     harder to consciously and programmmatically verify,\n\n  2. I wanted the implementations for each version of the language\n     to be *independently* reusable from a mere copy-paste,\n\n  3. not conditionally picking the implementation\n     means less code surface area for bugs, *and*\n\n  4. it allows for cleaner packages and installs.\n\n* Not providing a single file which can be imported on some permutation\n  of Python 3+, Python 2-, and \"no traceback\" Python implementations -\n  for now - because the need for each permutation seems improbable,\n  neither permutation is particularly more likely, and it is fairly\n  easy for a developer to combine the files as needed if it comes up.\n\n* Using an affirmative result from ``issubtype`` to decide whether to\n  call ``exception`` to construct an instance, even though this\n  forces calling ``isinstance`` first to avoid a spurious ``TypeError``, \n  because otherwise arbitrary callables would work for ``exception``,\n  instead of only exceptions.\n\n  This might seem useful in a \"why not leave it in?\" way, but then\n  it would be inconsistent with that not working for ``traceback``.\n\n  If someone really wants function arguments to accept arbitrary\n  callables that will be called when they are used, that is a\n  generic feature that can be easily implemented separately, as\n  a wrapper for ``raise_``, or in a generic way that may already\n  exist in a functional programming or lazy evaluation library.\n\n* To aid portability of code to Python implementations that do not\n  support specifying a custom traceback when raising, allowing\n  ``traceback`` to be silently accepted but ignored helps writing code\n  that portably follows \"progressive enhancement\" or \"graceful\n  degradation\" practices: tracebacks are properly used where possible,\n  but ignored where not.\n\n  This is **not** always the wisest choice: some features and behavior\n  are relied on for security, correctness, or debugging, and in those\n  cases the inability to fulfill the contract of an interface must not\n  be silently hidden.\n\n  Because of this, the \"no traceback\" variant is \"opt-in\": if you're\n  using it, you deliberately included it into your project, or a\n  dependency of yours did.\n\n* Nulling out *both* arguments in the ``finally`` inside of ``raise_``\n  to alleviate the potential for reference cycles being made by the\n  traceback, which references all locals in each stack frame.\n\n  ``traceback`` is obvious: it will cyclically reference itself.\n\n  ``exception`` **might** reference ``traceback`` either directly or\n  indirectly, and we have no way to know for sure that it doesn't.\n\n* Not nulling out the arguments to ``raise_`` in the \"no traceback\"\n  variant because the reference cycle depends on having a reference\n  to the traceback data within the call stack itself.\n\n  Also, Python implementations that need the \"no traceback\" variant\n  tend to be diversely incompatible: even ``try``-``finally`` does\n  not work in all of them.\n\n  So it seems like the \"no traceback\" variant doesn't need this fix,\n  and it is a safer bet to not mess with it until a need is found.\n\n\nScope\n-----\n\nThis package provides the *bare minimum* needed to support the\n\"``raise`` as a function\" approach *portably* and *correctly*.\n\nIn particular, Python syntax for raising an exception with\na custom traceback is simply incompatible between Python 3\nand Python 2, and the only way around it is **both**\n\n1. ``exec`` *or* separate files for ``import``, and\n2. catching syntax errors *or* version checking.\n\nSo code belongs in here if it protects users from having to code\nworkarounds at least approximately that bad, for problems that\ncannot be better solved by a different design or library.\n\nEverything beyond that is probably out-of-scope.", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/mentalisttraceur/python-raise", "keywords": "", "license": "0BSD", "maintainer": "", "maintainer_email": "", "name": "raise", "package_url": "https://pypi.org/project/raise/", "platform": "", "project_url": "https://pypi.org/project/raise/", "project_urls": {"Homepage": "https://github.com/mentalisttraceur/python-raise"}, "release_url": "https://pypi.org/project/raise/1.1.1.post3/", "requires_dist": null, "requires_python": "", "summary": "Raise exceptions with a function instead of a statement.", "version": "1.1.1.post3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Raise exceptions with a function instead of a statement.</p>\n<p>Provides a minimal, clean and portable interface for raising\nexceptions with all the advantages of functions over syntax.</p>\n<div id=\"why\">\n<h2>Why</h2>\n<p>I want to be able to work with exceptions in a way that is:</p>\n<ol>\n<li><em>Intuitive</em> to use and see in code.</li>\n<li><em>Generic</em> and <em>flexible</em>, empowering <em>reuse</em> and <em>composition</em>.</li>\n<li><em>Portable</em> to all versions of Python I might want to use.</li>\n</ol>\n<p>In my code, I\u2019ve often found myself writing interfaces that combine\nthe intuitive nature of Python 3\u2019s <tt>raise</tt> and <tt>with_traceback</tt>,\nthe generic and flexible pattern of raising exceptions in other\ncoroutines or threads of execution as exemplified by the <tt>throw</tt>\nmethod on Python generators, and the inherently portable and\npowerfully reusable and composable form of a basic function.</p>\n<p>The interface provided by this module, the function signature taking\nan <tt>exception</tt> (either an instance <em>or</em> a type) and an optional\n<tt>traceback</tt> instance, is what I found myself arriving at that met all\nof these criteria. It has served me well in code that I\u2019ve worked on,\nand I\u2019m submitting it to the world in the hope that others will either\nfind it useful and build upon it or point out flaws in my approach.</p>\n<p>If you have a more specific \u201cwhy\u201d question, I recorded my reasons for a\nlot of the specific choices here in the <a href=\"#design-decisions\" rel=\"nofollow\">Design Decisions</a> section.</p>\n</div>\n<div id=\"versioning\">\n<h2>Versioning</h2>\n<p>This library\u2019s version numbers follow the <a href=\"https://semver.org/spec/v2.0.0.html\" rel=\"nofollow\">SemVer 2.0.0 specification</a>.</p>\n<p>The current version number is available in the variable <tt>__version__</tt>\nas is normal for Python modules.</p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<pre>pip install raise\n</pre>\n<p><strong>If</strong> you need or want to get it <em>manually</em>, or you need\nthe \u201cno traceback\u201d variant, see the <a href=\"#advanced-manual-installation\" rel=\"nofollow\">Advanced/Manual\nInstallation</a> section for suggestions/tips.</p>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>Import the <tt>raise_</tt> function from the <tt>raise_</tt> module:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">raise_</span> <span class=\"kn\">import</span> <span class=\"n\">raise_</span>\n</pre>\n<p>Then you can raise things as you\u2019d expect:</p>\n<ol>\n<li><p>Raising an exception:</p>\n<pre><span class=\"n\">raise_</span><span class=\"p\">(</span><span class=\"ne\">Exception</span><span class=\"p\">(</span><span class=\"s1\">'foo'</span><span class=\"p\">))</span>\n</pre>\n<p>(You can also pass an exception type instead of an\ninstance as the first argument to <tt>raise_</tt>.)</p>\n</li>\n<li><p>Raising an exception with a traceback:</p>\n<pre><span class=\"n\">raise_</span><span class=\"p\">(</span><span class=\"ne\">Exception</span><span class=\"p\">(</span><span class=\"s1\">'foo'</span><span class=\"p\">),</span> <span class=\"n\">my_traceback_object</span><span class=\"p\">)</span>\n</pre>\n</li>\n</ol>\n</div>\n<div id=\"portability\">\n<h2>Portability</h2>\n<p>Portable to all releases of both Python 3 and Python 2.</p>\n<p>(The oldest tested is 2.5, but it will likely work on all\nPython 2 versions and probably on even earlier versions.)</p>\n<p>For implementations of Python that do not support raising with a custom\ntraceback, a \u201cno traceback\u201d variant can be installed manually.</p>\n</div>\n<div id=\"advanced-manual-installation\">\n<h2>Advanced/Manual Installation</h2>\n<p>There are three recommended ways of installing this manually, depending\non your needs:</p>\n<ol>\n<li>If it does <strong>not</strong> need to be imported by different incompatible\nPython versions, then you can just take either <tt>raise_3.py</tt> or\n<tt>raise_2.py</tt> and save it as <tt>raise_.py</tt>.</li>\n<li>If you\u2019re using a Python implementation that does not support raising\nexceptions with a custom traceback, take the <tt>raise_no_traceback.py</tt>\nfile and save it as <tt>raise_.py</tt>.</li>\n</ol>\n<ol>\n<li>If you need the same file to be importable into more than one of the\nabove, combine the files you need either into one <tt>raise_.py</tt> file\nor into one <tt>raise_</tt> directory with an <tt>__init__.py</tt>.</li>\n</ol>\n<p>That way you can always do <tt>from raise_ import raise_</tt> and it\u2019ll\njust work, without version-detecting boilerplate or the file names\n(which are an implementation detail) leaking into your other code.</p>\n<p>You are of course welcome to just copy-paste the tiny <tt>raise_</tt> function\ndefinition into your code, just keep in mind the compatibility issues\ninvolved: your code will only work without modification on Python\nversions compatible with the version you chose, and Python 2\u2019s version\ncauses a SyntaxError in Python 3, which is uncatchable unless you import\nit from another file or wrap that function definition in an <tt>exec</tt>.</p>\n</div>\n<div id=\"design-decisions\">\n<h2>Design Decisions</h2>\n<ul>\n<li><p>Allowing <tt>exception</tt> to be either an instance or a type, because\nit is sometimes useful and is <em>very</em> ingrained in Python.</p>\n</li>\n<li><p>Not currently implementing an equivalent to\nPython 3\u2019s <tt>except ... from ...</tt> syntax.</p>\n<p>Ultimately, this syntax just assigns one exception\nas an attribute on another exception.</p>\n<p>This strikes me as <em>complecting</em> two different jobs together:\nraising an exception instance and <em>initializing</em> an\nexception instance with a <tt>__cause__</tt> attribute.</p>\n<p>I note that generators\u2019 <tt>throw</tt> method does not have support\nfor a separe \u201cfrom\u201d/\u201dcause\u201d argument either. Perhaps it should,\nbut then everything implementing this interface would have to\nimplement extra logic to handle that extra argument.</p>\n<p>Instead I would advocate for a separate interface for setting the\n<tt>__cause__</tt> or <tt>__context__</tt> attributes on exceptions.</p>\n</li>\n<li><p>Not using the convention of taking separate <tt>type</tt> and <tt>value</tt>\narguments because it seems like a counter-intuitive and\ninappropriate convention for <em>raising</em> an exception.\n(It is a good pattern for functions that <em>receive</em> exceptions.)</p>\n<p>Python 3 dropped support for separate <tt>type</tt> and <tt>value</tt>\nfrom the <tt>raise</tt> statement, so it seems enough people\nresponsible for the language agree with this assessment.</p>\n<p>Also fully/properly supporting all semantics/variations that <tt>raise</tt>\nallowed before Python 3 would bloat the code excessively.</p>\n</li>\n<li><p>Not supporting Python 3\u2019s behavior of using the exception\u2019s\n<tt>__traceback__</tt> attribute as the traceback to raise with\nby default if no traceback is specified.</p>\n<p>Not trying to emulate it in Python 2 and intentionally suppressing\nit in Python 3 by always calling <tt>.with_traceback</tt> and using\n<tt>None</tt> as the default traceback argument, because:</p>\n<ol>\n<li>When an insufficiently careful coder (almost all of us almost all\nof the time) has code work one way on one platform, they assume\nit will work that way consistently on other platforms.</li>\n<li>Not suppressing this behavior requires more code and complicating\nthe interface - some other default value for the traceback\nargument besides <tt>None</tt> is needed instead (<tt>...</tt>, also known\nas <tt>Ellipsis</tt>, is a good candidate).</li>\n<li>Emulating Python 3\u2019s behavior on Python 2, would create extra\npotential for <strong>wrong</strong> behavior: any <tt>except</tt> that catches\nan exception without updating the <tt>__traceback__</tt> before\npassing it to code that relies on it will result in really\nmisleading gaps in the traceback.</li>\n<li>Emulating Python 3\u2019s behavior on the \u201cno traceback\u201d Python\nimplementations has similar problems, except worse: some\nof those Python implementations don\u2019t even have a way of\nadding attributes to native exceptions, so the would be\nmore code to achieve it and more edge cases to consider.</li>\n<li>If it differs across implementations, people will make mistakes.\nSimplicity and consistency that covers most cases is valuable.\nPortable correctness is a priority goal here. Gracefully\ndegrading in this case would risk correctness and debugging.</li>\n</ol>\n</li>\n<li><p>Using different implementation files for Python 3+, Python 2-,\nand \u201cno traceback\u201d Python implementations because:</p>\n<ol>\n<li>nesting code in <cite>exec</cite> makes the code less readable and\nharder to consciously and programmmatically verify,</li>\n<li>I wanted the implementations for each version of the language\nto be <em>independently</em> reusable from a mere copy-paste,</li>\n<li>not conditionally picking the implementation\nmeans less code surface area for bugs, <em>and</em></li>\n<li>it allows for cleaner packages and installs.</li>\n</ol>\n</li>\n<li><p>Not providing a single file which can be imported on some permutation\nof Python 3+, Python 2-, and \u201cno traceback\u201d Python implementations -\nfor now - because the need for each permutation seems improbable,\nneither permutation is particularly more likely, and it is fairly\neasy for a developer to combine the files as needed if it comes up.</p>\n</li>\n<li><p>Using an affirmative result from <tt>issubtype</tt> to decide whether to\ncall <tt>exception</tt> to construct an instance, even though this\nforces calling <tt>isinstance</tt> first to avoid a spurious <tt>TypeError</tt>,\nbecause otherwise arbitrary callables would work for <tt>exception</tt>,\ninstead of only exceptions.</p>\n<p>This might seem useful in a \u201cwhy not leave it in?\u201d way, but then\nit would be inconsistent with that not working for <tt>traceback</tt>.</p>\n<p>If someone really wants function arguments to accept arbitrary\ncallables that will be called when they are used, that is a\ngeneric feature that can be easily implemented separately, as\na wrapper for <tt>raise_</tt>, or in a generic way that may already\nexist in a functional programming or lazy evaluation library.</p>\n</li>\n<li><p>To aid portability of code to Python implementations that do not\nsupport specifying a custom traceback when raising, allowing\n<tt>traceback</tt> to be silently accepted but ignored helps writing code\nthat portably follows \u201cprogressive enhancement\u201d or \u201cgraceful\ndegradation\u201d practices: tracebacks are properly used where possible,\nbut ignored where not.</p>\n<p>This is <strong>not</strong> always the wisest choice: some features and behavior\nare relied on for security, correctness, or debugging, and in those\ncases the inability to fulfill the contract of an interface must not\nbe silently hidden.</p>\n<p>Because of this, the \u201cno traceback\u201d variant is \u201copt-in\u201d: if you\u2019re\nusing it, you deliberately included it into your project, or a\ndependency of yours did.</p>\n</li>\n<li><p>Nulling out <em>both</em> arguments in the <tt>finally</tt> inside of <tt>raise_</tt>\nto alleviate the potential for reference cycles being made by the\ntraceback, which references all locals in each stack frame.</p>\n<p><tt>traceback</tt> is obvious: it will cyclically reference itself.</p>\n<p><tt>exception</tt> <strong>might</strong> reference <tt>traceback</tt> either directly or\nindirectly, and we have no way to know for sure that it doesn\u2019t.</p>\n</li>\n<li><p>Not nulling out the arguments to <tt>raise_</tt> in the \u201cno traceback\u201d\nvariant because the reference cycle depends on having a reference\nto the traceback data within the call stack itself.</p>\n<p>Also, Python implementations that need the \u201cno traceback\u201d variant\ntend to be diversely incompatible: even <tt>try</tt>-<tt>finally</tt> does\nnot work in all of them.</p>\n<p>So it seems like the \u201cno traceback\u201d variant doesn\u2019t need this fix,\nand it is a safer bet to not mess with it until a need is found.</p>\n</li>\n</ul>\n</div>\n<div id=\"scope\">\n<h2>Scope</h2>\n<p>This package provides the <em>bare minimum</em> needed to support the\n\u201c<tt>raise</tt> as a function\u201d approach <em>portably</em> and <em>correctly</em>.</p>\n<p>In particular, Python syntax for raising an exception with\na custom traceback is simply incompatible between Python 3\nand Python 2, and the only way around it is <strong>both</strong></p>\n<ol>\n<li><tt>exec</tt> <em>or</em> separate files for <tt>import</tt>, and</li>\n<li>catching syntax errors <em>or</em> version checking.</li>\n</ol>\n<p>So code belongs in here if it protects users from having to code\nworkarounds at least approximately that bad, for problems that\ncannot be better solved by a different design or library.</p>\n<p>Everything beyond that is probably out-of-scope.</p>\n</div>\n\n          </div>"}, "last_serial": 7076145, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "6fb2b7553de8f1c261eba76a519be999", "sha256": "5f20f6ace1e777e8c2bf0569d28d085f12ba43a7dce027795357021e7caf3176"}, "downloads": -1, "filename": "raise-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "6fb2b7553de8f1c261eba76a519be999", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 12886, "upload_time": "2018-03-19T12:25:19", "upload_time_iso_8601": "2018-03-19T12:25:19.880142Z", "url": "https://files.pythonhosted.org/packages/5b/7b/d411150ce57cdf53a563d64d14f7c40c09809cba9cf44ef3a6783a3c3f9a/raise-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1ea941a175679e5f1fff555cb2b3632f", "sha256": "a8a8c16cbeb6f11dfb44c4e89547ebf3746c8823326d0be360389a9d3cea4329"}, "downloads": -1, "filename": "raise-1.0.0.tar.gz", "has_sig": false, "md5_digest": "1ea941a175679e5f1fff555cb2b3632f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7253, "upload_time": "2018-03-19T12:25:22", "upload_time_iso_8601": "2018-03-19T12:25:22.076426Z", "url": "https://files.pythonhosted.org/packages/17/60/9ab6f25c4681ad8431cc5ce449cb1aa1e46fdb6f90a2a98c0e82fd1f24e3/raise-1.0.0.tar.gz", "yanked": false}], "1.0.0.post1": [{"comment_text": "", "digests": {"md5": "52f3dc06144e62301f8eba309f036fda", "sha256": "0480868e9ed4175a933deb814d42a3b6a5dbc13a820baa9e9e6b85cb51144109"}, "downloads": -1, "filename": "raise-1.0.0.post1-py3-none-any.whl", "has_sig": false, "md5_digest": "52f3dc06144e62301f8eba309f036fda", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 12977, "upload_time": "2018-03-19T18:32:49", "upload_time_iso_8601": "2018-03-19T18:32:49.370687Z", "url": "https://files.pythonhosted.org/packages/2f/32/6f84e7dfb783289b06dae47454accbbad43328d64d0f66a52f527161cc2a/raise-1.0.0.post1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "251b173e75a78e4eed24357503331b21", "sha256": "36a89fe8d7404fba562f4b180e76950069d902177c66af8de66589b523c43dc3"}, "downloads": -1, "filename": "raise-1.0.0.post1.tar.gz", "has_sig": false, "md5_digest": "251b173e75a78e4eed24357503331b21", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7307, "upload_time": "2018-03-19T18:32:53", "upload_time_iso_8601": "2018-03-19T18:32:53.148816Z", "url": "https://files.pythonhosted.org/packages/d8/64/e549765f2da39a526e455e8b325df6d5c3d9009d47cea39249d5fb0697da/raise-1.0.0.post1.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "971b18141d023b3f5c98e9cc5fcf7bb7", "sha256": "5023020062ee16d72fbb557c7e89ffca39412f52fe78a0a4009cefe0a99c503e"}, "downloads": -1, "filename": "raise-1.0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "971b18141d023b3f5c98e9cc5fcf7bb7", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 12907, "upload_time": "2018-04-25T06:35:07", "upload_time_iso_8601": "2018-04-25T06:35:07.649347Z", "url": "https://files.pythonhosted.org/packages/72/67/8592b38695bc1f284a647a85de4bfb9ef10cde8133bc73c4841883df455a/raise-1.0.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5b68ae3e81b7654a398d6ff2e9b642d1", "sha256": "5987be62164609d1b42a9acb9bfb78ccd3b916e17eeda37e75435e6c6bb1795a"}, "downloads": -1, "filename": "raise-1.0.1.tar.gz", "has_sig": false, "md5_digest": "5b68ae3e81b7654a398d6ff2e9b642d1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7369, "upload_time": "2018-04-25T06:35:09", "upload_time_iso_8601": "2018-04-25T06:35:09.990466Z", "url": "https://files.pythonhosted.org/packages/71/67/4e87bfd0e130348431fcf506995e4927bd8353cb788be3c3a497bfb71969/raise-1.0.1.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "dffd043e3df8f646a6c8e62404215764", "sha256": "2dc7122064b1566522ab107664d3ca4c84d3417f48a77a3818c2b5a994e85ff0"}, "downloads": -1, "filename": "raise-1.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "dffd043e3df8f646a6c8e62404215764", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 12919, "upload_time": "2018-04-25T07:22:15", "upload_time_iso_8601": "2018-04-25T07:22:15.198271Z", "url": "https://files.pythonhosted.org/packages/c8/b0/18a6df05d1237f555616f24d44e817ad311e73d904a235098b1e0d3e5da3/raise-1.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "96f0595f496b211ccecafcd26ba6a7af", "sha256": "5e417344b43c8ceacafee3c478ce2718d295add4b39432539f1f1d3c94b3c33b"}, "downloads": -1, "filename": "raise-1.1.0.tar.gz", "has_sig": false, "md5_digest": "96f0595f496b211ccecafcd26ba6a7af", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7358, "upload_time": "2018-04-25T07:22:17", "upload_time_iso_8601": "2018-04-25T07:22:17.217558Z", "url": "https://files.pythonhosted.org/packages/6a/80/ae3ce29ed831ab5ecafdae0b9f8511ac8407106694f39485893c465d8f9e/raise-1.1.0.tar.gz", "yanked": false}], "1.1.0.post1": [{"comment_text": "", "digests": {"md5": "c8d34d899dcce17e31a7faa9372db577", "sha256": "adc5ee65254894d4ae4dec6a41ff4f21a31ded1c43ad90d1d706f9244e54c07a"}, "downloads": -1, "filename": "raise-1.1.0.post1-py3-none-any.whl", "has_sig": false, "md5_digest": "c8d34d899dcce17e31a7faa9372db577", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 13615, "upload_time": "2019-02-18T06:44:12", "upload_time_iso_8601": "2019-02-18T06:44:12.931320Z", "url": "https://files.pythonhosted.org/packages/ce/e3/e2db68b0552528c539ea33eef03f7bd9753b9dd32c2f1a8cbf1d94ab3918/raise-1.1.0.post1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6ff199576a57ee1cb88f229a4195bb3e", "sha256": "a42a3ecee8748b8c66ecec30c4617376af1875f6a6658d19dc4c1523f34df0eb"}, "downloads": -1, "filename": "raise-1.1.0.post1.tar.gz", "has_sig": false, "md5_digest": "6ff199576a57ee1cb88f229a4195bb3e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7778, "upload_time": "2019-02-18T06:44:15", "upload_time_iso_8601": "2019-02-18T06:44:15.344904Z", "url": "https://files.pythonhosted.org/packages/49/0a/9534e95e88c51c025b075efea9e642c1ec0f32f87729c70b15dbc9cf66e5/raise-1.1.0.post1.tar.gz", "yanked": false}], "1.1.0.post2": [{"comment_text": "", "digests": {"md5": "2ece2afc475ece79a7d17cc0ec6dec56", "sha256": "d51186d886b8301bed200c132b6ad1a1f45eae13a52ad30efc0128114eac071d"}, "downloads": -1, "filename": "raise-1.1.0.post2-py3-none-any.whl", "has_sig": false, "md5_digest": "2ece2afc475ece79a7d17cc0ec6dec56", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 13623, "upload_time": "2019-02-18T06:57:30", "upload_time_iso_8601": "2019-02-18T06:57:30.249906Z", "url": "https://files.pythonhosted.org/packages/e4/af/009b4abc8d43c6c6b387ade1b4ec59714775b387012176a461734dcdb379/raise-1.1.0.post2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c6d2b55c599869c5f58d56ac799d1e20", "sha256": "4879df1cc21b518f0a43f49f9a6f73d7f8c820f7009a1b9e10344d8c402f9511"}, "downloads": -1, "filename": "raise-1.1.0.post2.tar.gz", "has_sig": false, "md5_digest": "c6d2b55c599869c5f58d56ac799d1e20", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7772, "upload_time": "2019-02-18T06:57:32", "upload_time_iso_8601": "2019-02-18T06:57:32.354786Z", "url": "https://files.pythonhosted.org/packages/d5/51/5c905d0cbe1e9b4096f28c9644f12c572928fe44f9f415e809fe0144fadb/raise-1.1.0.post2.tar.gz", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "76cbd9b981cf41a044562648356eded4", "sha256": "f4dd2f2d28705d210c7d4bd09872233af93b0925fe0db504835d3d7c7eecd015"}, "downloads": -1, "filename": "raise-1.1.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "76cbd9b981cf41a044562648356eded4", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 14024, "upload_time": "2019-02-24T07:27:12", "upload_time_iso_8601": "2019-02-24T07:27:12.650597Z", "url": "https://files.pythonhosted.org/packages/3f/b2/78b09e154f718514f9b5c382fd064a5bd7e36bd45f25c1c94316085ae4c4/raise-1.1.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "212f2f51c5825f03fb64aed1936df877", "sha256": "c8257e97134fc69263346c6224028b86a83dc1a2ff8a3b719edbd476c8ddb9d6"}, "downloads": -1, "filename": "raise-1.1.1.tar.gz", "has_sig": false, "md5_digest": "212f2f51c5825f03fb64aed1936df877", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8064, "upload_time": "2019-02-24T07:12:27", "upload_time_iso_8601": "2019-02-24T07:12:27.427331Z", "url": "https://files.pythonhosted.org/packages/29/a4/5ee57b4c9f848976c2ec541d94c8a8b59c13663f1f1d412ddc0d5775c92f/raise-1.1.1.tar.gz", "yanked": false}], "1.1.1.post1": [{"comment_text": "", "digests": {"md5": "7699a2e8a13c11a4429f46ee75d1d621", "sha256": "3b38d18859ecdac212ea72148ad0d4b0f0114a8a1c53f3d398fd4952ce4b12f3"}, "downloads": -1, "filename": "raise-1.1.1.post1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "7699a2e8a13c11a4429f46ee75d1d621", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 9317, "upload_time": "2020-02-25T08:05:51", "upload_time_iso_8601": "2020-02-25T08:05:51.907766Z", "url": "https://files.pythonhosted.org/packages/9e/9c/216aeca897265da49c5a4a1125c01f9cb0dd4fe8b6c3395f5955d1da07c9/raise-1.1.1.post1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "69f3ce867b2bfe1bb87f783d1383effc", "sha256": "a76df6394081049ff75ec7a880740e10b420b5b65fdc36eef6c19b61aa5c4e1f"}, "downloads": -1, "filename": "raise-1.1.1.post1.tar.gz", "has_sig": false, "md5_digest": "69f3ce867b2bfe1bb87f783d1383effc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8321, "upload_time": "2020-02-25T08:05:54", "upload_time_iso_8601": "2020-02-25T08:05:54.067245Z", "url": "https://files.pythonhosted.org/packages/12/80/0f5e4c1c00983e589f0660ccc0cb49d3d598f62ed8962f2fabd51b5b63b9/raise-1.1.1.post1.tar.gz", "yanked": false}], "1.1.1.post2": [{"comment_text": "", "digests": {"md5": "4eefa41653bceb34ddb88ce3cf99c847", "sha256": "983fadc747193fec617afc162bf61ee95cfbff0520e90b301dc9351983367638"}, "downloads": -1, "filename": "raise-1.1.1.post2-py2-none-any.whl", "has_sig": false, "md5_digest": "4eefa41653bceb34ddb88ce3cf99c847", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 7139, "upload_time": "2020-04-22T11:38:30", "upload_time_iso_8601": "2020-04-22T11:38:30.246593Z", "url": "https://files.pythonhosted.org/packages/16/d0/3d613f15116fd0fdad3092d7fbfe1ba9fd551bac6a73285727fad847ea07/raise-1.1.1.post2-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6e8f817059fa1f40fe384bc0698500bb", "sha256": "f48aa2ede583816a5bfb5d1d9c052e04fbfbbf77f8035be9273696348fc69a82"}, "downloads": -1, "filename": "raise-1.1.1.post2-py3-none-any.whl", "has_sig": false, "md5_digest": "6e8f817059fa1f40fe384bc0698500bb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7180, "upload_time": "2020-04-22T12:09:42", "upload_time_iso_8601": "2020-04-22T12:09:42.715129Z", "url": "https://files.pythonhosted.org/packages/f9/b3/f79ba4280bbd6f2ad3874e3751d8fdf3b8c808f23128b2a07f64880878d4/raise-1.1.1.post2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f895a46d44f5cdce728a22bfe7e9f21b", "sha256": "2b343fbfbe1e6dbb3357eea3b2c364d23844f36541cf5285404a4c13ba5e68b9"}, "downloads": -1, "filename": "raise-1.1.1.post2.tar.gz", "has_sig": false, "md5_digest": "f895a46d44f5cdce728a22bfe7e9f21b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7991, "upload_time": "2020-04-22T11:33:29", "upload_time_iso_8601": "2020-04-22T11:33:29.447813Z", "url": "https://files.pythonhosted.org/packages/67/9f/03624ab068b2ae14f42d146520fe4ac32187edcce2c9cc460bcb9af44bff/raise-1.1.1.post2.tar.gz", "yanked": false}], "1.1.1.post3": [{"comment_text": "", "digests": {"md5": "15e18d24ce764730e538ba8842df8828", "sha256": "bfc9a1a20bd3bea4bec55d90d95d871043bb40181171c5ef09accc3f97659e8c"}, "downloads": -1, "filename": "raise-1.1.1.post3-py2-none-any.whl", "has_sig": false, "md5_digest": "15e18d24ce764730e538ba8842df8828", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 7120, "upload_time": "2020-04-22T12:29:00", "upload_time_iso_8601": "2020-04-22T12:29:00.404645Z", "url": "https://files.pythonhosted.org/packages/b5/b4/5d049e5a65375a012e575629fcf8bb21a7ebf3322a8a7b2c0e1ef59be61b/raise-1.1.1.post3-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ae5a8aeeb02a669fe7d6281b7adb08bb", "sha256": "913577775726a9d4b736e41649c4ec2c4f46dee27e0e8bd64c92c466c5b71f4f"}, "downloads": -1, "filename": "raise-1.1.1.post3-py3-none-any.whl", "has_sig": false, "md5_digest": "ae5a8aeeb02a669fe7d6281b7adb08bb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7162, "upload_time": "2020-04-22T12:29:01", "upload_time_iso_8601": "2020-04-22T12:29:01.673157Z", "url": "https://files.pythonhosted.org/packages/8b/65/60591d8f984b95a1e1e80f006eb5b80256274162e164cadff9a6f7c51a7e/raise-1.1.1.post3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9d2c301cb40fadc4b43ae52490a8dc3e", "sha256": "16098dc38ff102468011fce9918dcd0d537c5ce9ce0805589541112a00aec375"}, "downloads": -1, "filename": "raise-1.1.1.post3.tar.gz", "has_sig": false, "md5_digest": "9d2c301cb40fadc4b43ae52490a8dc3e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8028, "upload_time": "2020-04-22T12:24:06", "upload_time_iso_8601": "2020-04-22T12:24:06.396958Z", "url": "https://files.pythonhosted.org/packages/1b/53/17016f2f48c4b2d0f196c95713eb5bf7ce088ab983453e94d7105e20b613/raise-1.1.1.post3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "15e18d24ce764730e538ba8842df8828", "sha256": "bfc9a1a20bd3bea4bec55d90d95d871043bb40181171c5ef09accc3f97659e8c"}, "downloads": -1, "filename": "raise-1.1.1.post3-py2-none-any.whl", "has_sig": false, "md5_digest": "15e18d24ce764730e538ba8842df8828", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 7120, "upload_time": "2020-04-22T12:29:00", "upload_time_iso_8601": "2020-04-22T12:29:00.404645Z", "url": "https://files.pythonhosted.org/packages/b5/b4/5d049e5a65375a012e575629fcf8bb21a7ebf3322a8a7b2c0e1ef59be61b/raise-1.1.1.post3-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ae5a8aeeb02a669fe7d6281b7adb08bb", "sha256": "913577775726a9d4b736e41649c4ec2c4f46dee27e0e8bd64c92c466c5b71f4f"}, "downloads": -1, "filename": "raise-1.1.1.post3-py3-none-any.whl", "has_sig": false, "md5_digest": "ae5a8aeeb02a669fe7d6281b7adb08bb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7162, "upload_time": "2020-04-22T12:29:01", "upload_time_iso_8601": "2020-04-22T12:29:01.673157Z", "url": "https://files.pythonhosted.org/packages/8b/65/60591d8f984b95a1e1e80f006eb5b80256274162e164cadff9a6f7c51a7e/raise-1.1.1.post3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9d2c301cb40fadc4b43ae52490a8dc3e", "sha256": "16098dc38ff102468011fce9918dcd0d537c5ce9ce0805589541112a00aec375"}, "downloads": -1, "filename": "raise-1.1.1.post3.tar.gz", "has_sig": false, "md5_digest": "9d2c301cb40fadc4b43ae52490a8dc3e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8028, "upload_time": "2020-04-22T12:24:06", "upload_time_iso_8601": "2020-04-22T12:24:06.396958Z", "url": "https://files.pythonhosted.org/packages/1b/53/17016f2f48c4b2d0f196c95713eb5bf7ce088ab983453e94d7105e20b613/raise-1.1.1.post3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:07:48 2020"}