{"info": {"author": "Blizzard Entertainment", "author_email": "HeroesReplays@blizzard.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Console", "Intended Audience :: Developers", "Intended Audience :: End Users/Desktop", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Topic :: Games/Entertainment :: Real Time Strategy", "Topic :: Software Development :: Libraries", "Topic :: System :: Archiving", "Topic :: Utilities"], "description": "# heroprotocol\n\nheroprotocol is a [Python](https://www.python.org/downloads/) library/module to decode Heroes of the Storm replay\nfiles into Python data structures.\n\nThe tool is available as a [PyPI Package](https://pypi.org/project/heroprotocol/) or as source code.\n\nCurrently heroprotocol can decode these structures and events:\n\n* Replay header\n* Game details\n* Replay init data\n* Game events\n* Message events\n* Tracker events\n\nheroprotocol can be used as a base-build-specific library to decode binary blobs, or it can be run as a standalone tool\nto pretty print information from supported replay files.\n\nNote that heroprotocol does not expose game balance information or provide any kind of high level analysis of replays;\nit's meant to be just the first tool in the chain for your data mining application.\n\n## Supported Versions\n\nheroprotocol supports all Hereos of the Storm replay files that were written with retail and PTR versions of the game.\n\n## Requirements\n\nA working installation of Python 3.x is required.\n\n## Installation\n\nEither install/update using pip:\n\n```bash\npython -m pip install --upgrade heroprotocol\n```\n\nOr clone the repository and run from source:\n\n```bash\ngit clone https://github.com/Blizzard/heroprotocol.git\n```\n\n## Example Usage\n\n```bash\npython -m heroprotocol --[tracker-event-option] \"<replayFileName>\" > output.txt\n```\n\nIf you want the output shown directly in the terminal, leave out the `> output.txt`.\n\n```bash\npython -m heroprotocol --details \"Blackheart's Bay.StormReplay\"\n```\n\n## Command Line Arguments\n\n```plain\n-h, --help          Show the options that are available.\n\nTracker Events:\n--gameevents        Print all game events including coordinates\n--messageevents     Print message events such as ping events\n--trackerevents     Print tracker events such as units killed, game stat events,\n                    score result event\n--attributeevents   Print attribute events, a table of attrid, namespace, and attribute values\n--header            Print protocol header including build id and elapsedGameLoops\n--details           Print protocol details, e.g. teamId, player names and chosen heroes,\n                    player region, game result, observer status\n--initdata          Print protocol initdata, e.g. interface settings for every player\n\nOutput Options:\n--stats             Output stats about the active tracker event to the STDERR stream\n--json              Use JSON syntax for output\n```\n\n## Tracker Events\n\nSome notes on tracker events:\n\n* Convert unit tag index, recycle pairs into unit tags (as seen in game events) with protocol.unit_tag (index, recycle)\n* Interpret the NNet.Replay.Tracker.SUnitPositionsEvent events like this:\n\n```python\nunitIndex = event['m_firstUnitIndex']\nfor i in range(0, len(event['m_items']), 3):\n    unitIndex += event['m_items'][i + 0]\n    x = event['m_items'][i + 1] * 4\n    y = event['m_items'][i + 2] * 4\n    # unit identified by unitIndex at the current event['_gameloop'] time\n    # is at approximate position (x, y)\n```\n\n* Only units that have inflicted or taken damage are mentioned in unit position events, and they occur periodically with a limit of 256 units mentioned per event.\n* NNet.Replay.Tracker.SUnitInitEvent events appear for units under construction. When complete you'll see a NNet.Replay.Tracker.SUnitDoneEvent with the same unit tag.\n* NNet.Replay.Tracker.SUnitBornEvent events appear for units that are created fully constructed.\n* You may receive a NNet.Replay.Tracker.SUnitDiedEvent after either a UnitInit or UnitBorn event for the corresponding unit tag.\n* In NNet.Replay.Tracker.SPlayerStatsEvent, m_scoreValueFoodUsed and m_scoreValueFoodMade are in fixed point (divide by 4096 for integer values). All other values are in integers.\n* There's a known issue where revived units are not tracked, and placeholder units track death but not birth.\n\n## Reporting Bugs\n\nPlease report bugs at the [Heroes of the Storm Bug Report Forum](https://us.forums.blizzard.com/en/heroes/c/bug-report).\n\n## Acknowledgements\n\nThe standalone tool uses [mpyq](https://github.com/eagleflo/mpyq) by [Aku Kotkavuo](https://github.com/eagleflo) to read\nmopaq files.\n\nThank you to Garrett, Kyle, LordGita, JAGdPixel, Seriousnes, and Aviad-Skywalker for bringing HOTSLogs back.\n\nThank you to [Christian Clauss](https://github.com/cclauss) and [Jingbei Li](https://github.com/petronny) for contributions to the Python 3 update.\n\nThank you to MGatner, healingbrew, casualMLG, and others for submitting issues and feedback.\n\nThank you to David Joerg and Graylin Kim of [GGTracker](http://www.ggtracker.com) for design feedback and beta-testing of\nthe s2protocol library that heroprotocol is based upon.\n\nThanks to Ben Barrett of [HOTSLogs](http://www.hotslogs.com) for early feedback on and beta-testing of the heroprotocol\nlibrary.\n\n## License\n\nCopyright \u00c2\u00a9 2015-2020 Blizzard Entertainment\n\nOpen sourced under the MIT license. See the included [LICENSE](LICENSE) file for more information.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Blizzard/heroprotocol", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "heroprotocol", "package_url": "https://pypi.org/project/heroprotocol/", "platform": "", "project_url": "https://pypi.org/project/heroprotocol/", "project_urls": {"Homepage": "https://github.com/Blizzard/heroprotocol"}, "release_url": "https://pypi.org/project/heroprotocol/2.50.0.79155/", "requires_dist": ["mpyq (>=0.2.5)"], "requires_python": ">=2.7", "summary": "Python library to decode Heroes of the Storm replays", "version": "2.50.0.79155", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>heroprotocol</h1>\n<p>heroprotocol is a <a href=\"https://www.python.org/downloads/\" rel=\"nofollow\">Python</a> library/module to decode Heroes of the Storm replay\nfiles into Python data structures.</p>\n<p>The tool is available as a <a href=\"https://pypi.org/project/heroprotocol/\" rel=\"nofollow\">PyPI Package</a> or as source code.</p>\n<p>Currently heroprotocol can decode these structures and events:</p>\n<ul>\n<li>Replay header</li>\n<li>Game details</li>\n<li>Replay init data</li>\n<li>Game events</li>\n<li>Message events</li>\n<li>Tracker events</li>\n</ul>\n<p>heroprotocol can be used as a base-build-specific library to decode binary blobs, or it can be run as a standalone tool\nto pretty print information from supported replay files.</p>\n<p>Note that heroprotocol does not expose game balance information or provide any kind of high level analysis of replays;\nit's meant to be just the first tool in the chain for your data mining application.</p>\n<h2>Supported Versions</h2>\n<p>heroprotocol supports all Hereos of the Storm replay files that were written with retail and PTR versions of the game.</p>\n<h2>Requirements</h2>\n<p>A working installation of Python 3.x is required.</p>\n<h2>Installation</h2>\n<p>Either install/update using pip:</p>\n<pre>python -m pip install --upgrade heroprotocol\n</pre>\n<p>Or clone the repository and run from source:</p>\n<pre>git clone https://github.com/Blizzard/heroprotocol.git\n</pre>\n<h2>Example Usage</h2>\n<pre>python -m heroprotocol --<span class=\"o\">[</span>tracker-event-option<span class=\"o\">]</span> <span class=\"s2\">\"&lt;replayFileName&gt;\"</span> &gt; output.txt\n</pre>\n<p>If you want the output shown directly in the terminal, leave out the <code>&gt; output.txt</code>.</p>\n<pre>python -m heroprotocol --details <span class=\"s2\">\"Blackheart's Bay.StormReplay\"</span>\n</pre>\n<h2>Command Line Arguments</h2>\n<pre>-h, --help          Show the options that are available.\n\nTracker Events:\n--gameevents        Print all game events including coordinates\n--messageevents     Print message events such as ping events\n--trackerevents     Print tracker events such as units killed, game stat events,\n                    score result event\n--attributeevents   Print attribute events, a table of attrid, namespace, and attribute values\n--header            Print protocol header including build id and elapsedGameLoops\n--details           Print protocol details, e.g. teamId, player names and chosen heroes,\n                    player region, game result, observer status\n--initdata          Print protocol initdata, e.g. interface settings for every player\n\nOutput Options:\n--stats             Output stats about the active tracker event to the STDERR stream\n--json              Use JSON syntax for output\n</pre>\n<h2>Tracker Events</h2>\n<p>Some notes on tracker events:</p>\n<ul>\n<li>Convert unit tag index, recycle pairs into unit tags (as seen in game events) with protocol.unit_tag (index, recycle)</li>\n<li>Interpret the NNet.Replay.Tracker.SUnitPositionsEvent events like this:</li>\n</ul>\n<pre><span class=\"n\">unitIndex</span> <span class=\"o\">=</span> <span class=\"n\">event</span><span class=\"p\">[</span><span class=\"s1\">'m_firstUnitIndex'</span><span class=\"p\">]</span>\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"p\">[</span><span class=\"s1\">'m_items'</span><span class=\"p\">]),</span> <span class=\"mi\">3</span><span class=\"p\">):</span>\n    <span class=\"n\">unitIndex</span> <span class=\"o\">+=</span> <span class=\"n\">event</span><span class=\"p\">[</span><span class=\"s1\">'m_items'</span><span class=\"p\">][</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">0</span><span class=\"p\">]</span>\n    <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">event</span><span class=\"p\">[</span><span class=\"s1\">'m_items'</span><span class=\"p\">][</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"mi\">4</span>\n    <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">event</span><span class=\"p\">[</span><span class=\"s1\">'m_items'</span><span class=\"p\">][</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"mi\">4</span>\n    <span class=\"c1\"># unit identified by unitIndex at the current event['_gameloop'] time</span>\n    <span class=\"c1\"># is at approximate position (x, y)</span>\n</pre>\n<ul>\n<li>Only units that have inflicted or taken damage are mentioned in unit position events, and they occur periodically with a limit of 256 units mentioned per event.</li>\n<li>NNet.Replay.Tracker.SUnitInitEvent events appear for units under construction. When complete you'll see a NNet.Replay.Tracker.SUnitDoneEvent with the same unit tag.</li>\n<li>NNet.Replay.Tracker.SUnitBornEvent events appear for units that are created fully constructed.</li>\n<li>You may receive a NNet.Replay.Tracker.SUnitDiedEvent after either a UnitInit or UnitBorn event for the corresponding unit tag.</li>\n<li>In NNet.Replay.Tracker.SPlayerStatsEvent, m_scoreValueFoodUsed and m_scoreValueFoodMade are in fixed point (divide by 4096 for integer values). All other values are in integers.</li>\n<li>There's a known issue where revived units are not tracked, and placeholder units track death but not birth.</li>\n</ul>\n<h2>Reporting Bugs</h2>\n<p>Please report bugs at the <a href=\"https://us.forums.blizzard.com/en/heroes/c/bug-report\" rel=\"nofollow\">Heroes of the Storm Bug Report Forum</a>.</p>\n<h2>Acknowledgements</h2>\n<p>The standalone tool uses <a href=\"https://github.com/eagleflo/mpyq\" rel=\"nofollow\">mpyq</a> by <a href=\"https://github.com/eagleflo\" rel=\"nofollow\">Aku Kotkavuo</a> to read\nmopaq files.</p>\n<p>Thank you to Garrett, Kyle, LordGita, JAGdPixel, Seriousnes, and Aviad-Skywalker for bringing HOTSLogs back.</p>\n<p>Thank you to <a href=\"https://github.com/cclauss\" rel=\"nofollow\">Christian Clauss</a> and <a href=\"https://github.com/petronny\" rel=\"nofollow\">Jingbei Li</a> for contributions to the Python 3 update.</p>\n<p>Thank you to MGatner, healingbrew, casualMLG, and others for submitting issues and feedback.</p>\n<p>Thank you to David Joerg and Graylin Kim of <a href=\"http://www.ggtracker.com\" rel=\"nofollow\">GGTracker</a> for design feedback and beta-testing of\nthe s2protocol library that heroprotocol is based upon.</p>\n<p>Thanks to Ben Barrett of <a href=\"http://www.hotslogs.com\" rel=\"nofollow\">HOTSLogs</a> for early feedback on and beta-testing of the heroprotocol\nlibrary.</p>\n<h2>License</h2>\n<p>Copyright \u00c2\u00a9 2015-2020 Blizzard Entertainment</p>\n<p>Open sourced under the MIT license. See the included <a href=\"LICENSE\" rel=\"nofollow\">LICENSE</a> file for more information.</p>\n\n          </div>"}, "last_serial": 7043860, "releases": {"2.50.0.79033": [{"comment_text": "", "digests": {"md5": "8ccf43e5f3427a6596ba45d1bb132a66", "sha256": "65cc1b91c4055372cd66ce2c098e4a8a9f5fc741d271ab65dbe9ac25413306a2"}, "downloads": -1, "filename": "heroprotocol-2.50.0.79033-py3-none-any.whl", "has_sig": false, "md5_digest": "8ccf43e5f3427a6596ba45d1bb132a66", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 2207212, "upload_time": "2020-04-14T17:32:17", "upload_time_iso_8601": "2020-04-14T17:32:17.631124Z", "url": "https://files.pythonhosted.org/packages/67/8a/693277547d3fb6cf6ef2c0cfbe49e89b1f52f2055d67a7f0fa2c2c93be2a/heroprotocol-2.50.0.79033-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "098c0aec0b0b0fbef121d135ddc9522b", "sha256": "dec895b522eb3876816e575e47b5ac8f0ddafd3fe880b068f8690bd544a70c83"}, "downloads": -1, "filename": "heroprotocol-2.50.0.79033.tar.gz", "has_sig": false, "md5_digest": "098c0aec0b0b0fbef121d135ddc9522b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 162507, "upload_time": "2020-04-14T17:32:19", "upload_time_iso_8601": "2020-04-14T17:32:19.972507Z", "url": "https://files.pythonhosted.org/packages/94/65/fd080fcab587621effbc7b8048b1999a2c5f59dec26d6ff558975c130e8c/heroprotocol-2.50.0.79033.tar.gz", "yanked": false}], "2.50.0.79155": [{"comment_text": "", "digests": {"md5": "b44f066fc9a5fb7acf4f6d7c9f2dc894", "sha256": "420b0123880d1f65f540d0a6b07877c43ef6294769e86401341e4e7702fda674"}, "downloads": -1, "filename": "heroprotocol-2.50.0.79155-py3-none-any.whl", "has_sig": false, "md5_digest": "b44f066fc9a5fb7acf4f6d7c9f2dc894", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2.7", "size": 2203370, "upload_time": "2020-04-17T20:22:27", "upload_time_iso_8601": "2020-04-17T20:22:27.323345Z", "url": "https://files.pythonhosted.org/packages/aa/cf/fc1d07e65e8ff6132e816f5703d5bf47068498bdf3ccb79774bdd797e016/heroprotocol-2.50.0.79155-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "65df87568dd0901ae21716ba68b1ffee", "sha256": "83535b58c279feae1eac45807e8e36e9be8bbed0625bc270908351d7c0af3daa"}, "downloads": -1, "filename": "heroprotocol-2.50.0.79155.tar.gz", "has_sig": false, "md5_digest": "65df87568dd0901ae21716ba68b1ffee", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 161501, "upload_time": "2020-04-17T20:22:28", "upload_time_iso_8601": "2020-04-17T20:22:28.960144Z", "url": "https://files.pythonhosted.org/packages/c5/1f/90965b19f3c9a820c8dc9bd34b1b3c83224bc6096518e068eea0a2f3fc62/heroprotocol-2.50.0.79155.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b44f066fc9a5fb7acf4f6d7c9f2dc894", "sha256": "420b0123880d1f65f540d0a6b07877c43ef6294769e86401341e4e7702fda674"}, "downloads": -1, "filename": "heroprotocol-2.50.0.79155-py3-none-any.whl", "has_sig": false, "md5_digest": "b44f066fc9a5fb7acf4f6d7c9f2dc894", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2.7", "size": 2203370, "upload_time": "2020-04-17T20:22:27", "upload_time_iso_8601": "2020-04-17T20:22:27.323345Z", "url": "https://files.pythonhosted.org/packages/aa/cf/fc1d07e65e8ff6132e816f5703d5bf47068498bdf3ccb79774bdd797e016/heroprotocol-2.50.0.79155-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "65df87568dd0901ae21716ba68b1ffee", "sha256": "83535b58c279feae1eac45807e8e36e9be8bbed0625bc270908351d7c0af3daa"}, "downloads": -1, "filename": "heroprotocol-2.50.0.79155.tar.gz", "has_sig": false, "md5_digest": "65df87568dd0901ae21716ba68b1ffee", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 161501, "upload_time": "2020-04-17T20:22:28", "upload_time_iso_8601": "2020-04-17T20:22:28.960144Z", "url": "https://files.pythonhosted.org/packages/c5/1f/90965b19f3c9a820c8dc9bd34b1b3c83224bc6096518e068eea0a2f3fc62/heroprotocol-2.50.0.79155.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:51:30 2020"}