{"info": {"author": "Kirill Borisov", "author_email": "lensvol@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "License :: OSI Approved :: BSD License", "Topic :: Utilities"], "description": "pypiece\n=======\n\nWrapper around pip for use with flaky connections.\n\nBasic idea behind it is that default behaviour of `pip` to download all packages at once\nand compile them can get pretty frustrating in situations, where single error in \ndownloading or installing a package can result in repeating whole process all\nover again.\n\n`pypiece` tries to get around that by trying to download and install each package\nseparately, by calling `pip` for each line of requirements.txt. In the end it\noutputs list of successfully installed packages and ones that failed.\n\nUsage\n-----\n\n    pypiece < requirements file > < -- PIP options >\n\nAvailable options:\n  \n - `--pip` - specify pip binary to use\n -  `--retries <N>` - try to reinstall failing package _N_ times (default: 3).\n -  `--venv <name>` - install to virtualenvwrapper created virtual environment _name_.\n\npip arguments\n-------------\nIf `--` is found in command line, then all arguments\nafter it will be passed unchanged to `pip` executable on every call.\n\nFor example: \n\n    pypiece requirements.txt -- -i https://my.pypi.repo\n\nLast line is equivalent to: \n\n    pip install -r requirements.txt -i https://my.pypi.repo\n\nExamples\n--------\n\nTry to install every package found in _requirements.txt_ one by one:\n\n    pypiece requirements.txt\n\nInstall requirements using `pip` from virtualenv _test_:\n\n    pypiece --venv test requirements.txt\n\nInstall requirements using specified `pip` binary:\n\n    pypiece --pip my_env/bin/pip requirements.txt\n\nFeedback\n--------\n\nSend your bug reports and suggestions to [lensvol@gmail.com][1]\n\n\n  [1]: mailto:lensvol@gmail.com", "description_content_type": null, "docs_url": null, "download_url": null, "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/lensvol/pypiece", "keywords": "pip", "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "pypiece", "package_url": "https://pypi.org/project/pypiece/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/pypiece/", "project_urls": {"Homepage": "https://github.com/lensvol/pypiece"}, "release_url": "https://pypi.org/project/pypiece/0.1.3.1/", "requires_dist": null, "requires_python": null, "summary": "Wrapper around pip for flakey connections.", "version": "0.1.3.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Wrapper around pip for use with flaky connections.</p>\n<p>Basic idea behind it is that default behaviour of <cite>pip</cite> to download all packages at once\nand compile them can get pretty frustrating in situations, where single error in\ndownloading or installing a package can result in repeating whole process all\nover again.</p>\n<p><cite>pypiece</cite> tries to get around that by trying to download and install each package\nseparately, by calling <cite>pip</cite> for each line of requirements.txt. In the end it\noutputs list of successfully installed packages and ones that failed.</p>\n<div id=\"usage\">\n<h2>Usage</h2>\n<blockquote>\npypiece &lt; requirements file &gt; &lt; \u2013 PIP options &gt;</blockquote>\n<p>Available options:</p>\n<blockquote>\n<ul>\n<li><cite>\u2013pip</cite> - specify pip binary to use</li>\n<li><cite>\u2013retries &lt;N&gt;</cite> - try to reinstall failing package _N_ times (default: 3).</li>\n<li><cite>\u2013venv &lt;name&gt;</cite> - install to virtualenvwrapper created virtual environment _name_.</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"pip-arguments\">\n<h2>pip arguments</h2>\n<p>If <cite>\u2013</cite> is found in command line, then all arguments\nafter it will be passed unchanged to <cite>pip</cite> executable on every call.</p>\n<p>For example:</p>\n<blockquote>\npypiece requirements.txt \u2013 -i <a href=\"https://my.pypi.repo\" rel=\"nofollow\">https://my.pypi.repo</a></blockquote>\n<p>Last line is equivalent to:</p>\n<blockquote>\npip install -r requirements.txt -i <a href=\"https://my.pypi.repo\" rel=\"nofollow\">https://my.pypi.repo</a></blockquote>\n</div>\n<div id=\"examples\">\n<h2>Examples</h2>\n<p>Try to install every package found in _requirements.txt_ one by one:</p>\n<blockquote>\npypiece requirements.txt</blockquote>\n<p>Install requirements using <cite>pip</cite> from virtualenv _test_:</p>\n<blockquote>\npypiece \u2013venv test requirements.txt</blockquote>\n<p>Install requirements using specified <cite>pip</cite> binary:</p>\n<blockquote>\npypiece \u2013pip my_env/bin/pip requirements.txt</blockquote>\n</div>\n<div id=\"feedback\">\n<h2>Feedback</h2>\n<p>Send your bug reports and suggestions to [<a href=\"mailto:lensvol%40gmail.com\">lensvol<span>@</span>gmail<span>.</span>com</a>][1]</p>\n<blockquote>\n[1]: <a href=\"mailto:lensvol%40gmail.com\">mailto:lensvol<span>@</span>gmail<span>.</span>com</a></blockquote>\n</div>\n\n          </div>"}, "last_serial": 1207685, "releases": {"0.1.3": [{"comment_text": "", "digests": {"md5": "1049cc3d3918cb7ac772dac540cc40ac", "sha256": "2b286c83df5f0f10b0592ca69779f3d0ff7a9d00c1f9650180c1092490c3a9ec"}, "downloads": -1, "filename": "pypiece-0.1.3.tar.gz", "has_sig": false, "md5_digest": "1049cc3d3918cb7ac772dac540cc40ac", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3381, "upload_time": "2014-08-17T14:59:59", "upload_time_iso_8601": "2014-08-17T14:59:59.858836Z", "url": "https://files.pythonhosted.org/packages/fa/de/d68d813651d27e145cd85cea7cc8fae5e00665ec58711e53a08ec4101d38/pypiece-0.1.3.tar.gz", "yanked": false}], "0.1.3.1": [{"comment_text": "", "digests": {"md5": "4a3a896ffc7d5dfb78ccd1c4fce27e5a", "sha256": "8224b9cb4c4a87411d815d2d192f793dd47d92a46b367fcab4b97ca79b85c4e9"}, "downloads": -1, "filename": "pypiece-0.1.3.1.tar.gz", "has_sig": false, "md5_digest": "4a3a896ffc7d5dfb78ccd1c4fce27e5a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3428, "upload_time": "2014-08-30T19:38:11", "upload_time_iso_8601": "2014-08-30T19:38:11.472308Z", "url": "https://files.pythonhosted.org/packages/36/ae/602ecee557560827b69e69111865181b2e74e9843e7697d7651477318ffc/pypiece-0.1.3.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4a3a896ffc7d5dfb78ccd1c4fce27e5a", "sha256": "8224b9cb4c4a87411d815d2d192f793dd47d92a46b367fcab4b97ca79b85c4e9"}, "downloads": -1, "filename": "pypiece-0.1.3.1.tar.gz", "has_sig": false, "md5_digest": "4a3a896ffc7d5dfb78ccd1c4fce27e5a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3428, "upload_time": "2014-08-30T19:38:11", "upload_time_iso_8601": "2014-08-30T19:38:11.472308Z", "url": "https://files.pythonhosted.org/packages/36/ae/602ecee557560827b69e69111865181b2e74e9843e7697d7651477318ffc/pypiece-0.1.3.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:59:34 2020"}