{"info": {"author": "wqking", "author_email": "wqking@NOSPAMoutlook.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: Apache Software License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# eventpy -- Python library for event dispatcher and callback list\n\neventpy is a Python event library that provides tools that enable your application components to communicate with each other by dispatching events and listening for them. With eventpy you can easily implement signal/slot mechanism, or observer pattern.  \nThis library is the Python version rewritten from the C++ library [eventpp](https://github.com/wqking/eventpp), both are developed by the same developer.\n\n## Facts and features\n\n- **Powerful**\n  - Supports synchronous event dispatching and asynchronous event queue.\n  - Configurable and extensible with policies.\n- **Robust**\n  - Supports nested event. During the process of handling an event, a listener can safely dispatch event and append/prepend/insert/remove other listeners.\n  - Thread safety. Supports multi-threading.\n  - Well tested. Backed by unit tests.\n- **Flexible and easy to use**\n  - Listeners and events can be of any type and do not need to be inherited from any base class.\n  - Requires Python 3. Tested with Python 3.7 and Cython.\n\n## License\n\nApache License, Version 2.0  \n\n## Version 0.0.1\n\neventpy is currently usable and stable.\n\n## Source code\n\n[https://github.com/wqking/eventpy](https://github.com/wqking/eventpy)\n\n## Quick start\n\n### Install\n\n`pip install eventpy`\n\n### Package\n\n`eventpy`\n\n### Using CallbackList\n```python\n# create a CallbackList\ncallbackList = CallbackList()\ncallbackList.append(lambda s, b : print(\"Got callback 1, s is %s b is %d\" % (s, b)))\ndef anotherCallback(s, b) :\n\tprint(\"Got callback 2, s is %s b is %d\" % (s, b))\ncallbackList.append(anotherCallback)\n# Invoke the callback list\ncallbackList(\"Hello world\", True)\n```\n\n### Using EventDispatcher\n```python\n# create an EventDispatcher\ndispatcher = EventDispatcher()\n\ndispatcher.appendListener(3, lambda s, b : print(\"Got event 3, s is %s b is %d\" % (s, b)))\ndispatcher.appendListener(5, lambda s, b : print(\"Got event 5, s is %s b is %d\" % (s, b)))\ndispatcher.appendListener(5, lambda s, b : print(\"Got another event 5, s is %s b is %d\" % (s, b)))\n\n# Dispatch the events, the first argument is always the event type.\ndispatcher.dispatch(3, \"Hello\", True)\ndispatcher.dispatch(5, \"World\", False)\n```\n\n### Using EventQueue\n```python\n# create an EventQueue\nqueue = eventqueue.EventQueue()\nqueue.appendListener(3, lambda s, n : print(\"Got event 3, s is %s n is %d\" % (s, n)))\nqueue.appendListener(5, lambda s, n : print(\"Got event 5, s is %s n is %d\" % (s, n)))\nqueue.appendListener(5, lambda s, n : print(\"Got another event 5, s is %s n is %d\" % (s, n)))\n\n# Enqueue the events, the first argument is always the event type.\n# The listeners are not triggered during enqueue.\nqueue.enqueue(3, \"Hello\", 38)\nqueue.enqueue(5, \"World\", 58)\n\n# Process the event queue, dispatch all queued events.\nqueue.process();\n```\n\n## Documentations\n\n* [Overview](https://github.com/wqking/eventpy/tree/master/doc/introduction.md)\n* [Tutorials of CallbackList](https://github.com/wqking/eventpy/tree/master/doc/tutorial_callbacklist.md)\n* [Tutorials of EventDispatcher](https://github.com/wqking/eventpy/tree/master/doc/tutorial_eventdispatcher.md)\n* [Tutorials of EventQueue](https://github.com/wqking/eventpy/tree/master/doc/tutorial_eventqueue.md)\n* [Class CallbackList](https://github.com/wqking/eventpy/tree/master/doc/callbacklist.md)\n* [Class EventDispatcher](https://github.com/wqking/eventpy/tree/master/doc/eventdispatcher.md)\n* [Class EventQueue](https://github.com/wqking/eventpy/tree/master/doc/eventqueue.md)\n* [Policies -- configure eventpy](https://github.com/wqking/eventpy/tree/master/doc/policies.md)\n* There are runnable tutorials in the unit tests.\n\n## Run the unit tests\n\nGo to the root folder of eventpy, run `python -m pytest`\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/wqking/eventpy", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "eventpy", "package_url": "https://pypi.org/project/eventpy/", "platform": "any", "project_url": "https://pypi.org/project/eventpy/", "project_urls": {"Homepage": "https://github.com/wqking/eventpy"}, "release_url": "https://pypi.org/project/eventpy/0.0.1/", "requires_dist": null, "requires_python": ">=3.6", "summary": "eventpy is a Python event library that provides tools that enable your application components to communicate with each other by dispatching events and listening for them. With eventpy you can easily implement signal/slot mechanism, or observer pattern.", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>eventpy -- Python library for event dispatcher and callback list</h1>\n<p>eventpy is a Python event library that provides tools that enable your application components to communicate with each other by dispatching events and listening for them. With eventpy you can easily implement signal/slot mechanism, or observer pattern.<br>\nThis library is the Python version rewritten from the C++ library <a href=\"https://github.com/wqking/eventpp\" rel=\"nofollow\">eventpp</a>, both are developed by the same developer.</p>\n<h2>Facts and features</h2>\n<ul>\n<li><strong>Powerful</strong>\n<ul>\n<li>Supports synchronous event dispatching and asynchronous event queue.</li>\n<li>Configurable and extensible with policies.</li>\n</ul>\n</li>\n<li><strong>Robust</strong>\n<ul>\n<li>Supports nested event. During the process of handling an event, a listener can safely dispatch event and append/prepend/insert/remove other listeners.</li>\n<li>Thread safety. Supports multi-threading.</li>\n<li>Well tested. Backed by unit tests.</li>\n</ul>\n</li>\n<li><strong>Flexible and easy to use</strong>\n<ul>\n<li>Listeners and events can be of any type and do not need to be inherited from any base class.</li>\n<li>Requires Python 3. Tested with Python 3.7 and Cython.</li>\n</ul>\n</li>\n</ul>\n<h2>License</h2>\n<p>Apache License, Version 2.0</p>\n<h2>Version 0.0.1</h2>\n<p>eventpy is currently usable and stable.</p>\n<h2>Source code</h2>\n<p><a href=\"https://github.com/wqking/eventpy\" rel=\"nofollow\">https://github.com/wqking/eventpy</a></p>\n<h2>Quick start</h2>\n<h3>Install</h3>\n<p><code>pip install eventpy</code></p>\n<h3>Package</h3>\n<p><code>eventpy</code></p>\n<h3>Using CallbackList</h3>\n<pre><span class=\"c1\"># create a CallbackList</span>\n<span class=\"n\">callbackList</span> <span class=\"o\">=</span> <span class=\"n\">CallbackList</span><span class=\"p\">()</span>\n<span class=\"n\">callbackList</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">b</span> <span class=\"p\">:</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Got callback 1, s is </span><span class=\"si\">%s</span><span class=\"s2\"> b is </span><span class=\"si\">%d</span><span class=\"s2\">\"</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">)))</span>\n<span class=\"k\">def</span> <span class=\"nf\">anotherCallback</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"p\">:</span>\n\t<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Got callback 2, s is </span><span class=\"si\">%s</span><span class=\"s2\"> b is </span><span class=\"si\">%d</span><span class=\"s2\">\"</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">))</span>\n<span class=\"n\">callbackList</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">anotherCallback</span><span class=\"p\">)</span>\n<span class=\"c1\"># Invoke the callback list</span>\n<span class=\"n\">callbackList</span><span class=\"p\">(</span><span class=\"s2\">\"Hello world\"</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<h3>Using EventDispatcher</h3>\n<pre><span class=\"c1\"># create an EventDispatcher</span>\n<span class=\"n\">dispatcher</span> <span class=\"o\">=</span> <span class=\"n\">EventDispatcher</span><span class=\"p\">()</span>\n\n<span class=\"n\">dispatcher</span><span class=\"o\">.</span><span class=\"n\">appendListener</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"k\">lambda</span> <span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">b</span> <span class=\"p\">:</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Got event 3, s is </span><span class=\"si\">%s</span><span class=\"s2\"> b is </span><span class=\"si\">%d</span><span class=\"s2\">\"</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">)))</span>\n<span class=\"n\">dispatcher</span><span class=\"o\">.</span><span class=\"n\">appendListener</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"k\">lambda</span> <span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">b</span> <span class=\"p\">:</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Got event 5, s is </span><span class=\"si\">%s</span><span class=\"s2\"> b is </span><span class=\"si\">%d</span><span class=\"s2\">\"</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">)))</span>\n<span class=\"n\">dispatcher</span><span class=\"o\">.</span><span class=\"n\">appendListener</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"k\">lambda</span> <span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">b</span> <span class=\"p\">:</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Got another event 5, s is </span><span class=\"si\">%s</span><span class=\"s2\"> b is </span><span class=\"si\">%d</span><span class=\"s2\">\"</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">)))</span>\n\n<span class=\"c1\"># Dispatch the events, the first argument is always the event type.</span>\n<span class=\"n\">dispatcher</span><span class=\"o\">.</span><span class=\"n\">dispatch</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"s2\">\"Hello\"</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">dispatcher</span><span class=\"o\">.</span><span class=\"n\">dispatch</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"s2\">\"World\"</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">)</span>\n</pre>\n<h3>Using EventQueue</h3>\n<pre><span class=\"c1\"># create an EventQueue</span>\n<span class=\"n\">queue</span> <span class=\"o\">=</span> <span class=\"n\">eventqueue</span><span class=\"o\">.</span><span class=\"n\">EventQueue</span><span class=\"p\">()</span>\n<span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"n\">appendListener</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"k\">lambda</span> <span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">n</span> <span class=\"p\">:</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Got event 3, s is </span><span class=\"si\">%s</span><span class=\"s2\"> n is </span><span class=\"si\">%d</span><span class=\"s2\">\"</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">)))</span>\n<span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"n\">appendListener</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"k\">lambda</span> <span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">n</span> <span class=\"p\">:</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Got event 5, s is </span><span class=\"si\">%s</span><span class=\"s2\"> n is </span><span class=\"si\">%d</span><span class=\"s2\">\"</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">)))</span>\n<span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"n\">appendListener</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"k\">lambda</span> <span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">n</span> <span class=\"p\">:</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Got another event 5, s is </span><span class=\"si\">%s</span><span class=\"s2\"> n is </span><span class=\"si\">%d</span><span class=\"s2\">\"</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">)))</span>\n\n<span class=\"c1\"># Enqueue the events, the first argument is always the event type.</span>\n<span class=\"c1\"># The listeners are not triggered during enqueue.</span>\n<span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"n\">enqueue</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"s2\">\"Hello\"</span><span class=\"p\">,</span> <span class=\"mi\">38</span><span class=\"p\">)</span>\n<span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"n\">enqueue</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"s2\">\"World\"</span><span class=\"p\">,</span> <span class=\"mi\">58</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Process the event queue, dispatch all queued events.</span>\n<span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"n\">process</span><span class=\"p\">();</span>\n</pre>\n<h2>Documentations</h2>\n<ul>\n<li><a href=\"https://github.com/wqking/eventpy/tree/master/doc/introduction.md\" rel=\"nofollow\">Overview</a></li>\n<li><a href=\"https://github.com/wqking/eventpy/tree/master/doc/tutorial_callbacklist.md\" rel=\"nofollow\">Tutorials of CallbackList</a></li>\n<li><a href=\"https://github.com/wqking/eventpy/tree/master/doc/tutorial_eventdispatcher.md\" rel=\"nofollow\">Tutorials of EventDispatcher</a></li>\n<li><a href=\"https://github.com/wqking/eventpy/tree/master/doc/tutorial_eventqueue.md\" rel=\"nofollow\">Tutorials of EventQueue</a></li>\n<li><a href=\"https://github.com/wqking/eventpy/tree/master/doc/callbacklist.md\" rel=\"nofollow\">Class CallbackList</a></li>\n<li><a href=\"https://github.com/wqking/eventpy/tree/master/doc/eventdispatcher.md\" rel=\"nofollow\">Class EventDispatcher</a></li>\n<li><a href=\"https://github.com/wqking/eventpy/tree/master/doc/eventqueue.md\" rel=\"nofollow\">Class EventQueue</a></li>\n<li><a href=\"https://github.com/wqking/eventpy/tree/master/doc/policies.md\" rel=\"nofollow\">Policies -- configure eventpy</a></li>\n<li>There are runnable tutorials in the unit tests.</li>\n</ul>\n<h2>Run the unit tests</h2>\n<p>Go to the root folder of eventpy, run <code>python -m pytest</code></p>\n\n          </div>"}, "last_serial": 6635494, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "0558afcfd72f867f6b6bebe41fd0c33d", "sha256": "0ae66551adadd2dbae96445a864bbc6fec8df599a04b3807b243f27401dd910d"}, "downloads": -1, "filename": "eventpy-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "0558afcfd72f867f6b6bebe41fd0c33d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 11513, "upload_time": "2020-02-15T07:03:10", "upload_time_iso_8601": "2020-02-15T07:03:10.788715Z", "url": "https://files.pythonhosted.org/packages/ef/63/b0e681046fa0c7f2b1bdc0a853695aaf3464b8b772ba32b15953b4ff34c4/eventpy-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "30a1f5bfeae0a5a93ce32f01616cb919", "sha256": "40ecdc2db438fc7504820197d49748c17ab8e24bbd9f03db71b2dda596364f50"}, "downloads": -1, "filename": "eventpy-0.0.1.tar.gz", "has_sig": false, "md5_digest": "30a1f5bfeae0a5a93ce32f01616cb919", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 7008, "upload_time": "2020-02-15T07:05:42", "upload_time_iso_8601": "2020-02-15T07:05:42.687046Z", "url": "https://files.pythonhosted.org/packages/92/37/9b2ab8cb9a5e5c92502053966631f854108f3dd72e431a5c8a22cf1a18a4/eventpy-0.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "0558afcfd72f867f6b6bebe41fd0c33d", "sha256": "0ae66551adadd2dbae96445a864bbc6fec8df599a04b3807b243f27401dd910d"}, "downloads": -1, "filename": "eventpy-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "0558afcfd72f867f6b6bebe41fd0c33d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 11513, "upload_time": "2020-02-15T07:03:10", "upload_time_iso_8601": "2020-02-15T07:03:10.788715Z", "url": "https://files.pythonhosted.org/packages/ef/63/b0e681046fa0c7f2b1bdc0a853695aaf3464b8b772ba32b15953b4ff34c4/eventpy-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "30a1f5bfeae0a5a93ce32f01616cb919", "sha256": "40ecdc2db438fc7504820197d49748c17ab8e24bbd9f03db71b2dda596364f50"}, "downloads": -1, "filename": "eventpy-0.0.1.tar.gz", "has_sig": false, "md5_digest": "30a1f5bfeae0a5a93ce32f01616cb919", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 7008, "upload_time": "2020-02-15T07:05:42", "upload_time_iso_8601": "2020-02-15T07:05:42.687046Z", "url": "https://files.pythonhosted.org/packages/92/37/9b2ab8cb9a5e5c92502053966631f854108f3dd72e431a5c8a22cf1a18a4/eventpy-0.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:45:12 2020"}