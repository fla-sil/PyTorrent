{"info": {"author": "Rob Miller", "author_email": "robm@openplans.org", "bugtrack_url": null, "classifiers": ["Framework :: Buildout", "Intended Audience :: Developers", "Topic :: Software Development :: Build Tools", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "========================\ntopp.recipes.cfgtemplate\n========================\n\nThis is a zc.buildout recipe that provides support for template\nsubstitution within the buildout.cfg file.  When this recipe is loaded\nin a buildout.cfg file, it will search the buildout configuration for\nany instances of the the template syntax, i.e. any text enclosed by\n{{double-curly-braces}}.  If substitutions are found, the\nconfiguration will be altered directly in memory, and any subsequent\nrecipes will be run with the substituted values.\n\nThe template substitution values come from a separate config file,\nspecified in the topp.recipes.cfgtemplate configuration, defaulting to\n\"cfgsubs.cfg\".  If the substitution file does not exist, or if it is\nmissing any values required by the buildout.cfg file, then the user\nwill be interactively prompted to enter the requested information, and\nthe substitution file will be created or amended with the provided\nvalues.\n\nThe idea is that you'll create a templatized buildout.cfg file and\nstore it in a revision control system (RCS).  The templatized values\nwould represent information that is not suitable for storage in the\nRCS, such as port numbers, passwords, database connection strings, or\nanything else that is either sensitive or likely to vary from\ndeployment to deployment.  The first time this buildout.cfg file is\nused in a new location, the user will interactively provide these\nvalues, which would then be stored in the substitution file, which is\nleft out of the RCS, or (if desired) is stored in a more secure\nrepository elsewhere.\n\nChange history\n**************\n\n${0.1.0 or \"0.0.0\"} (xxxx-xx-xx)\n==================\n\n - Created recipe with ZopeSkel [${Rob Miller or \"\"}].\n\nDetailed Documentation\n**********************\n\nSupported options\n=================\n\nThe recipe supports the following options:\n\n.. Note to recipe author!\n   ----------------------\n   For each option the recipe uses you shoud include a description\n   about the purpose of the option, the format and semantics of the\n   values it accepts, whether it is mandatory or optional and what the\n   default value is if it is omitted.\n\noption1\n    Description for ``option1``...\n\noption2\n    Description for ``option2``...\n\n\nExample usage\n=============\n\n.. Note to recipe author!\n   ----------------------\n   zc.buildout provides a nice testing environment which makes it\n   relatively easy to write doctests that both demonstrate the use of\n   the recipe and test it.\n   You can find examples of recipe doctests from the PyPI, e.g.\n   \n     http://pypi.python.org/pypi/zc.recipe.egg\n\n   The PyPI page for zc.buildout contains documentation about the test\n   environment.\n\n     http://pypi.python.org/pypi/zc.buildout#testing-support\n\n   Below is a skeleton doctest that you can start with when building\n   your own tests.\n\nWe'll start by creating a buildout that uses the recipe::\n\n    >>> write('buildout.cfg',\n    ... \"\"\"\n    ... [buildout]\n    ... parts = test1\n    ...\n    ... [test1]\n    ... recipe = topp.recipes.cfgtemplate\n    ... option1 = %(foo)s\n    ... option2 = %(bar)s\n    ... \"\"\" % { 'foo' : 'value1', 'bar' : 'value2'})\n\nRunning the buildout gives us::\n\n    >>> print system(buildout)\n    Upgraded:\n    ...\n    Installing test1.\n    Unused options for test1: 'option2' 'option1'.\n\n\n\nContributors\n************\n\n${Rob Miller or \"\"}, Author\n\n\nDownload\n********", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://topp.openplans.org/", "keywords": "buildout", "license": "GPLv3", "maintainer": null, "maintainer_email": null, "name": "topp.recipes.cfgtemplate", "package_url": "https://pypi.org/project/topp.recipes.cfgtemplate/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/topp.recipes.cfgtemplate/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://topp.openplans.org/"}, "release_url": "https://pypi.org/project/topp.recipes.cfgtemplate/0.1.0/", "requires_dist": null, "requires_python": null, "summary": "Provides template substitution for other recipe configurations in the same buildout.cfg file.", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            ========================<br>topp.recipes.cfgtemplate<br>========================<br><br>This is a zc.buildout recipe that provides support for template<br>substitution within the buildout.cfg file.  When this recipe is loaded<br>in a buildout.cfg file, it will search the buildout configuration for<br>any instances of the the template syntax, i.e. any text enclosed by<br>{{double-curly-braces}}.  If substitutions are found, the<br>configuration will be altered directly in memory, and any subsequent<br>recipes will be run with the substituted values.<br><br>The template substitution values come from a separate config file,<br>specified in the topp.recipes.cfgtemplate configuration, defaulting to<br>\"cfgsubs.cfg\".  If the substitution file does not exist, or if it is<br>missing any values required by the buildout.cfg file, then the user<br>will be interactively prompted to enter the requested information, and<br>the substitution file will be created or amended with the provided<br>values.<br><br>The idea is that you'll create a templatized buildout.cfg file and<br>store it in a revision control system (RCS).  The templatized values<br>would represent information that is not suitable for storage in the<br>RCS, such as port numbers, passwords, database connection strings, or<br>anything else that is either sensitive or likely to vary from<br>deployment to deployment.  The first time this buildout.cfg file is<br>used in a new location, the user will interactively provide these<br>values, which would then be stored in the substitution file, which is<br>left out of the RCS, or (if desired) is stored in a more secure<br>repository elsewhere.<br><br>Change history<br>**************<br><br>${0.1.0 or \"0.0.0\"} (xxxx-xx-xx)<br>==================<br><br> - Created recipe with ZopeSkel [${Rob Miller or \"\"}].<br><br>Detailed Documentation<br>**********************<br><br>Supported options<br>=================<br><br>The recipe supports the following options:<br><br>.. Note to recipe author!<br>   ----------------------<br>   For each option the recipe uses you shoud include a description<br>   about the purpose of the option, the format and semantics of the<br>   values it accepts, whether it is mandatory or optional and what the<br>   default value is if it is omitted.<br><br>option1<br>    Description for ``option1``...<br><br>option2<br>    Description for ``option2``...<br><br><br>Example usage<br>=============<br><br>.. Note to recipe author!<br>   ----------------------<br>   zc.buildout provides a nice testing environment which makes it<br>   relatively easy to write doctests that both demonstrate the use of<br>   the recipe and test it.<br>   You can find examples of recipe doctests from the PyPI, e.g.<br>   <br>     http://pypi.python.org/pypi/zc.recipe.egg<br><br>   The PyPI page for zc.buildout contains documentation about the test<br>   environment.<br><br>     http://pypi.python.org/pypi/zc.buildout#testing-support<br><br>   Below is a skeleton doctest that you can start with when building<br>   your own tests.<br><br>We'll start by creating a buildout that uses the recipe::<br><br>    &gt;&gt;&gt; write('buildout.cfg',<br>    ... \"\"\"<br>    ... [buildout]<br>    ... parts = test1<br>    ...<br>    ... [test1]<br>    ... recipe = topp.recipes.cfgtemplate<br>    ... option1 = %(foo)s<br>    ... option2 = %(bar)s<br>    ... \"\"\" % { 'foo' : 'value1', 'bar' : 'value2'})<br><br>Running the buildout gives us::<br><br>    &gt;&gt;&gt; print system(buildout)<br>    Upgraded:<br>    ...<br>    Installing test1.<br>    Unused options for test1: 'option2' 'option1'.<br><br><br><br>Contributors<br>************<br><br>${Rob Miller or \"\"}, Author<br><br><br>Download<br>********\n          </div>"}, "last_serial": 800801, "releases": {"0.1.0": [], "0.1.0dev-r19466": [{"comment_text": "", "digests": {"md5": "9c9b9cc35bfc848ee756400397e48839", "sha256": "493cd14f3e1a4ac82292b155d61e6a52a90144cf877d1546032586d9c6b43be7"}, "downloads": -1, "filename": "topp.recipes.cfgtemplate-0.1.0dev-r19466.tar.gz", "has_sig": false, "md5_digest": "9c9b9cc35bfc848ee756400397e48839", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6394, "upload_time": "2008-07-26T06:20:33", "upload_time_iso_8601": "2008-07-26T06:20:33Z", "url": "https://files.pythonhosted.org/packages/c8/98/0f8667265e442ce22323da6d2ef5030668a6daa83cbef4adeb9d9ce56784/topp.recipes.cfgtemplate-0.1.0dev-r19466.tar.gz", "yanked": false}], "0.1.0dev-r19469": [{"comment_text": "", "digests": {"md5": "d40949aca6d47eee0f757580be4baf08", "sha256": "db5848e49154611ff0b63fffb3f302e8c52f2b51353821081c5425fdd3da33e0"}, "downloads": -1, "filename": "topp.recipes.cfgtemplate-0.1.0dev-r19469.tar.gz", "has_sig": false, "md5_digest": "d40949aca6d47eee0f757580be4baf08", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6512, "upload_time": "2008-07-26T07:45:31", "upload_time_iso_8601": "2008-07-26T07:45:31Z", "url": "https://files.pythonhosted.org/packages/97/a0/23f336cf821bd577a09ef09a7b00b34e2e24f5353cc127b2a5e2f8207e62/topp.recipes.cfgtemplate-0.1.0dev-r19469.tar.gz", "yanked": false}]}, "urls": [], "timestamp": "Fri May  8 03:50:46 2020"}