{"info": {"author": "Adam Spiers", "author_email": "git@adamspiers.org", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Console", "Environment :: Web Environment", "Framework :: Flask", "Intended Audience :: Developers", "License :: OSI Approved :: GNU General Public License v2 or later (GPLv2+)", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Software Development :: Version Control", "Topic :: Utilities"], "description": "|Code Climate|\n\ngit-deps\n========\n\n``git-deps`` is a tool for performing automatic analysis of dependencies\nbetween commits in a `git <http://git-scm.com/>`__ repository. Here\u2019s a\nscreencast demonstration:\n\n|YouTube screencast|\n\nI also spoke about the tool in `episode #32 of the GitMinutes\npodcast <http://episodes.gitminutes.com/2015/03/gitminutes-32-adam-spiers-on-git-deps.html>`__.\n\nBackground theory\n-----------------\n\nIt is fairly clear that two git commits within a single repo can be\nconsidered \u201cindependent\u201d from each other in a certain sense, if they do\nnot change the same files, or if they do not change overlapping parts of\nthe same file(s).\n\nIn contrast, when a commit changes a line, it is \u201cdependent\u201d on not only\nthe commit which last changed that line, but also any commits which were\nresponsible for providing the surrounding lines of context, because\nwithout those previous versions of the line and its context, the\ncommit\u2019s diff might not cleanly apply (depending on how it\u2019s being\napplied, of course). So all dependencies of a commit can be\nprogrammatically inferred by running git-blame on the lines the commit\nchanges, plus however many lines of context make sense for the use case\nof this particular dependency analysis.\n\nTherefore the dependency calculation is impacted by a \u201cfuzz\u201d factor\nparameter (c.f.\n`patch(1) <http://en.wikipedia.org/wiki/Patch_(Unix)>`__), i.e.\u00a0the\nnumber of lines of context which are considered necessary for the\ncommit\u2019s diff to cleanly apply.\n\nAs with many dependency relationships, these dependencies form edges in\na DAG (directed acyclic graph) whose nodes correspond to commits. Note\nthat a node can only depend on a subset of its ancestors.\n\nMotivation\n----------\n\nSometimes it is useful to understand the nature of parts of this DAG, as\nits nature will impact the success or failure of operations including\nmerge, rebase, cherry-pick etc.\n\nUse case 1: porting between branches\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nFor example when porting a commit \u201cA\u201d between git branches via\n``git cherry-pick``, it can be useful to programmatically determine in\nadvance the minimum number of other dependent commits which would also\nneed to be cherry-picked to provide the context for commit \u201cA\u201d to\ncleanly apply. Here\u2019s a quick demo!\n\n|YouTube porting screencast|\n\nUse case 2: splitting a patch series\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nLarge patch series or pull requests can be quite daunting for project\nmaintainers, since they are hard to conquer in one sitting. For this\nreason it\u2019s generally best to keep the number of commits in any\nsubmission reasonably small. However during normal hacking, you might\naccumulate a large number of patches before you start to contemplate\nsubmitting any of them upstream. In this case, ``git-deps`` can help you\ndetermine how to break them up into smaller chunks. Simply run\n\n::\n\n    git deps -e $upstream_branch -s\n\nand then create a graph starting from the head of your local development\nbranch, recursively expanding all the dependencies. This will allow you\nto untangle things and expose subgraphs which can be cleanly split off\ninto separate patch series or pull requests for submission.\n\nUse case 3: aiding collaborative communication\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nAnother use case might be to better understand levels of specialism /\ncross-functionality within an agile team. If I author a commit which\nmodifies (say) lines 34-37 and 102-109 of a file, the authors of the\ndependent commits forms a list which indicates the group of people I\nshould potentially consider asking to review my commit, since I\u2019m\neffectively changing \u201ctheir\u201d code. Monitoring those relationships over\ntime might shed some light on how agile teams should best coordinate\nefforts on shared code bases.\n\nCaveat\n~~~~~~\n\nNote the dependency graph is likely to be semantically incomplete; for\nexample it would not auto-detect dependencies between a commit A which\nchanges code and another commit B which changes documentation or tests\nto reflect the code changes in commit A. (Although of course it\u2019s\nusually best practice to logically group such changes together in a\nsingle commit.) But this should not stop it from being useful.\n\nOther uses\n~~~~~~~~~~\n\nI\u2019m sure there are other use cases I haven\u2019t yet thought of. If you have\nany good ideas, `please submit them <CONTRIBUTING.md>`__!\n\nNon-use cases\n~~~~~~~~~~~~~\n\nAt first I thought that ``git-deps`` might provide a useful way to\nprogrammatically predict whether operations such as merge / rebase /\ncherry-pick would succeed, but actually it\u2019s probably cheaper and more\nreliable simply to perform the operation and then roll back.\n\nInstallation\n------------\n\nPlease see `the ``INSTALL.md`` file <INSTALL.md>`__.\n\nUsage\n-----\n\nThe tool is not yet fully documented, but usage is fairly\nself-explanatory if you run ``git deps -h``.\n\nCurrently you should run it from the root (i.e.\u00a0top directory) of the\ngit repository you want to examine; this is a `known\nlimitation <https://github.com/aspiers/git-deps/issues/27>`__.\n\nBy default it will output all dependencies of the given commit-ish(s),\none per line. With ``--recurse``, it will traverse dependencies of\ndependencies, and so on until it cannot find any more. In recursion\nmode, two SHA1s are output per line, indicating that the first depends\non the second.\n\nWeb UI for visualizing and navigating the dependency graph\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nIf you run with the ``--serve`` option then it will start a lightweight\nwebserver and output a URL you can connect to for dynamically\nvisualizing and navigating the dependency graph.\n\nOptionally choose a commit-ish (the form defaults to ``master``), click\nthe ``Submit`` button, and you should see a graph appear with one node\nper commit. By hovering the mouse over a node you will see more details,\nand a little ``+`` icon will appear which can be clicked to calculate\ndependencies of that commit, further growing the dependency tree. You\ncan zoom in and out with the mousewheel, and drag the background to pan\naround.\n\nIf you set up a MIME handler for the ``gitfile://`` protocol during\nsetup, `as documented <INSTALL.md>`__ you will be able to double-click\non nodes to launch a viewer to inspect individual commits in more\ndetail.\n\nDevelopment / support / feedback\n--------------------------------\n\nPlease see `the CONTRIBUTING file <CONTRIBUTING.md>`__.\n\nHistory\n-------\n\nThis tool was born from experiences at\n`SUSEcon <http://www.susecon.com/>`__ 2013, when I attempted to help a\ncolleague backport a bugfix in `OpenStack <http://www.openstack.org/>`__\n`Nova <http://docs.openstack.org/developer/nova/>`__ from the ``master``\nbranch to a stable release branch. At first sight it looked like it\nwould only require a trivial ``git cherry-pick``, but that immediately\nrevealed conflicts due to related code having changed in ``master``\nsince the release was made. I manually found the underlying commit which\nthe bugfix required by using ``git blame``, and tried another\n``cherry-pick``. The same thing happened again. Very soon I found myself\nin a quagmire of dependencies between commits, with no idea whether the\nend was in sight.\n\nIn coffee breaks during the ensuing openSUSE conference at the same\nvenue, I feverishly hacked together a prototype and it seemed to work.\nThen normal life intervened, and no progress was made for another year.\n\nThanks to SUSE\u2019s generous `Hack Week <https://hackweek.suse.com/>`__\npolicy, I had the luxury of being able to spending some of early January\n2015 working to bring this tool to the next level. I submitted a `Hack\nWeek project page <https://hackweek.suse.com/11/projects/366>`__ and\n`announced my intentions on the ``git`` mailing\nlist <http://article.gmane.org/gmane.comp.version-control.git/262000>`__.\n\nAgain in May 2018 I took advantage of another Hack Week to package\n``git-deps`` properly as a Python module in order to improve the\ninstallation process. This was in preparation for demonstrating the\nsoftware at `a Meetup\nevent <https://www.meetup.com/londongit/events/248694943/>`__ of the\n`Git London User Group <https://www.meetup.com/londongit/>`__.\n\nLicense\n-------\n\nReleased under `GPL version 2 <COPYING>`__ in order to be consistent\nwith ```git``\\ \u2019s\nlicense <https://github.com/git/git/blob/master/COPYING>`__, but I\u2019m\nopen to the idea of dual-licensing if there\u2019s a convincing reason.\n\n.. |Code Climate| image:: https://codeclimate.com/github/aspiers/git-deps/badges/gpa.svg\n   :target: https://codeclimate.com/github/aspiers/git-deps\n.. |YouTube screencast| image:: ./images/youtube-thumbnail.png\n   :target: http://youtu.be/irQ5gMMz-gE\n.. |YouTube porting screencast| image:: ./images/youtube-porting-thumbnail.png\n   :target: http://youtu.be/DVksJMXxVIM", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/aspiers/git-deps", "keywords": "", "license": "GPL-2+", "maintainer": "", "maintainer_email": "", "name": "git-deps", "package_url": "https://pypi.org/project/git-deps/", "platform": "", "project_url": "https://pypi.org/project/git-deps/", "project_urls": {"Homepage": "https://github.com/aspiers/git-deps"}, "release_url": "https://pypi.org/project/git-deps/1.0.1/", "requires_dist": null, "requires_python": "", "summary": "automatically detect dependencies between git commits", "version": "1.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://codeclimate.com/github/aspiers/git-deps\" rel=\"nofollow\"><img alt=\"Code Climate\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6e68c8b4041c65d906152116267090cfd6f524d1/68747470733a2f2f636f6465636c696d6174652e636f6d2f6769746875622f617370696572732f6769742d646570732f6261646765732f6770612e737667\"></a></p>\n<div id=\"git-deps\">\n<h2>git-deps</h2>\n<p><tt><span class=\"pre\">git-deps</span></tt> is a tool for performing automatic analysis of dependencies\nbetween commits in a <a href=\"http://git-scm.com/\" rel=\"nofollow\">git</a> repository. Here\u2019s a\nscreencast demonstration:</p>\n<p><a href=\"http://youtu.be/irQ5gMMz-gE\" rel=\"nofollow\"><img alt=\"YouTube screencast\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/255e249fd40ae3be0d8f68bca7a37d16fa902432/2e2f696d616765732f796f75747562652d7468756d626e61696c2e706e67\"></a></p>\n<p>I also spoke about the tool in <a href=\"http://episodes.gitminutes.com/2015/03/gitminutes-32-adam-spiers-on-git-deps.html\" rel=\"nofollow\">episode #32 of the GitMinutes\npodcast</a>.</p>\n<div id=\"background-theory\">\n<h3>Background theory</h3>\n<p>It is fairly clear that two git commits within a single repo can be\nconsidered \u201cindependent\u201d from each other in a certain sense, if they do\nnot change the same files, or if they do not change overlapping parts of\nthe same file(s).</p>\n<p>In contrast, when a commit changes a line, it is \u201cdependent\u201d on not only\nthe commit which last changed that line, but also any commits which were\nresponsible for providing the surrounding lines of context, because\nwithout those previous versions of the line and its context, the\ncommit\u2019s diff might not cleanly apply (depending on how it\u2019s being\napplied, of course). So all dependencies of a commit can be\nprogrammatically inferred by running git-blame on the lines the commit\nchanges, plus however many lines of context make sense for the use case\nof this particular dependency analysis.</p>\n<p>Therefore the dependency calculation is impacted by a \u201cfuzz\u201d factor\nparameter (c.f.\n<a href=\"http://en.wikipedia.org/wiki/Patch_(Unix)\" rel=\"nofollow\">patch(1)</a>), i.e.\u00a0the\nnumber of lines of context which are considered necessary for the\ncommit\u2019s diff to cleanly apply.</p>\n<p>As with many dependency relationships, these dependencies form edges in\na DAG (directed acyclic graph) whose nodes correspond to commits. Note\nthat a node can only depend on a subset of its ancestors.</p>\n</div>\n<div id=\"motivation\">\n<h3>Motivation</h3>\n<p>Sometimes it is useful to understand the nature of parts of this DAG, as\nits nature will impact the success or failure of operations including\nmerge, rebase, cherry-pick etc.</p>\n<div id=\"use-case-1-porting-between-branches\">\n<h4>Use case 1: porting between branches</h4>\n<p>For example when porting a commit \u201cA\u201d between git branches via\n<tt>git <span class=\"pre\">cherry-pick</span></tt>, it can be useful to programmatically determine in\nadvance the minimum number of other dependent commits which would also\nneed to be cherry-picked to provide the context for commit \u201cA\u201d to\ncleanly apply. Here\u2019s a quick demo!</p>\n<p><a href=\"http://youtu.be/DVksJMXxVIM\" rel=\"nofollow\"><img alt=\"YouTube porting screencast\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9c80b46521f5de34e73caa8c58308e0abc386370/2e2f696d616765732f796f75747562652d706f7274696e672d7468756d626e61696c2e706e67\"></a></p>\n</div>\n<div id=\"use-case-2-splitting-a-patch-series\">\n<h4>Use case 2: splitting a patch series</h4>\n<p>Large patch series or pull requests can be quite daunting for project\nmaintainers, since they are hard to conquer in one sitting. For this\nreason it\u2019s generally best to keep the number of commits in any\nsubmission reasonably small. However during normal hacking, you might\naccumulate a large number of patches before you start to contemplate\nsubmitting any of them upstream. In this case, <tt><span class=\"pre\">git-deps</span></tt> can help you\ndetermine how to break them up into smaller chunks. Simply run</p>\n<pre>git deps -e $upstream_branch -s\n</pre>\n<p>and then create a graph starting from the head of your local development\nbranch, recursively expanding all the dependencies. This will allow you\nto untangle things and expose subgraphs which can be cleanly split off\ninto separate patch series or pull requests for submission.</p>\n</div>\n<div id=\"use-case-3-aiding-collaborative-communication\">\n<h4>Use case 3: aiding collaborative communication</h4>\n<p>Another use case might be to better understand levels of specialism /\ncross-functionality within an agile team. If I author a commit which\nmodifies (say) lines 34-37 and 102-109 of a file, the authors of the\ndependent commits forms a list which indicates the group of people I\nshould potentially consider asking to review my commit, since I\u2019m\neffectively changing \u201ctheir\u201d code. Monitoring those relationships over\ntime might shed some light on how agile teams should best coordinate\nefforts on shared code bases.</p>\n</div>\n<div id=\"caveat\">\n<h4>Caveat</h4>\n<p>Note the dependency graph is likely to be semantically incomplete; for\nexample it would not auto-detect dependencies between a commit A which\nchanges code and another commit B which changes documentation or tests\nto reflect the code changes in commit A. (Although of course it\u2019s\nusually best practice to logically group such changes together in a\nsingle commit.) But this should not stop it from being useful.</p>\n</div>\n<div id=\"other-uses\">\n<h4>Other uses</h4>\n<p>I\u2019m sure there are other use cases I haven\u2019t yet thought of. If you have\nany good ideas, <a href=\"CONTRIBUTING.md\" rel=\"nofollow\">please submit them</a>!</p>\n</div>\n<div id=\"non-use-cases\">\n<h4>Non-use cases</h4>\n<p>At first I thought that <tt><span class=\"pre\">git-deps</span></tt> might provide a useful way to\nprogrammatically predict whether operations such as merge / rebase /\ncherry-pick would succeed, but actually it\u2019s probably cheaper and more\nreliable simply to perform the operation and then roll back.</p>\n</div>\n</div>\n<div id=\"installation\">\n<h3>Installation</h3>\n<p>Please see <cite>the ``INSTALL.md`</cite> file &lt;INSTALL.md&gt;`__.</p>\n</div>\n<div id=\"usage\">\n<h3>Usage</h3>\n<p>The tool is not yet fully documented, but usage is fairly\nself-explanatory if you run <tt>git deps <span class=\"pre\">-h</span></tt>.</p>\n<p>Currently you should run it from the root (i.e.\u00a0top directory) of the\ngit repository you want to examine; this is a <a href=\"https://github.com/aspiers/git-deps/issues/27\" rel=\"nofollow\">known\nlimitation</a>.</p>\n<p>By default it will output all dependencies of the given commit-ish(s),\none per line. With <tt><span class=\"pre\">--recurse</span></tt>, it will traverse dependencies of\ndependencies, and so on until it cannot find any more. In recursion\nmode, two SHA1s are output per line, indicating that the first depends\non the second.</p>\n<div id=\"web-ui-for-visualizing-and-navigating-the-dependency-graph\">\n<h4>Web UI for visualizing and navigating the dependency graph</h4>\n<p>If you run with the <tt><span class=\"pre\">--serve</span></tt> option then it will start a lightweight\nwebserver and output a URL you can connect to for dynamically\nvisualizing and navigating the dependency graph.</p>\n<p>Optionally choose a commit-ish (the form defaults to <tt>master</tt>), click\nthe <tt>Submit</tt> button, and you should see a graph appear with one node\nper commit. By hovering the mouse over a node you will see more details,\nand a little <tt>+</tt> icon will appear which can be clicked to calculate\ndependencies of that commit, further growing the dependency tree. You\ncan zoom in and out with the mousewheel, and drag the background to pan\naround.</p>\n<p>If you set up a MIME handler for the <tt><span class=\"pre\">gitfile://</span></tt> protocol during\nsetup, <a href=\"INSTALL.md\" rel=\"nofollow\">as documented</a> you will be able to double-click\non nodes to launch a viewer to inspect individual commits in more\ndetail.</p>\n</div>\n</div>\n<div id=\"development-support-feedback\">\n<h3>Development / support / feedback</h3>\n<p>Please see <a href=\"CONTRIBUTING.md\" rel=\"nofollow\">the CONTRIBUTING file</a>.</p>\n</div>\n<div id=\"history\">\n<h3>History</h3>\n<p>This tool was born from experiences at\n<a href=\"http://www.susecon.com/\" rel=\"nofollow\">SUSEcon</a> 2013, when I attempted to help a\ncolleague backport a bugfix in <a href=\"http://www.openstack.org/\" rel=\"nofollow\">OpenStack</a>\n<a href=\"http://docs.openstack.org/developer/nova/\" rel=\"nofollow\">Nova</a> from the <tt>master</tt>\nbranch to a stable release branch. At first sight it looked like it\nwould only require a trivial <tt>git <span class=\"pre\">cherry-pick</span></tt>, but that immediately\nrevealed conflicts due to related code having changed in <tt>master</tt>\nsince the release was made. I manually found the underlying commit which\nthe bugfix required by using <tt>git blame</tt>, and tried another\n<tt><span class=\"pre\">cherry-pick</span></tt>. The same thing happened again. Very soon I found myself\nin a quagmire of dependencies between commits, with no idea whether the\nend was in sight.</p>\n<p>In coffee breaks during the ensuing openSUSE conference at the same\nvenue, I feverishly hacked together a prototype and it seemed to work.\nThen normal life intervened, and no progress was made for another year.</p>\n<p>Thanks to SUSE\u2019s generous <a href=\"https://hackweek.suse.com/\" rel=\"nofollow\">Hack Week</a>\npolicy, I had the luxury of being able to spending some of early January\n2015 working to bring this tool to the next level. I submitted a <a href=\"https://hackweek.suse.com/11/projects/366\" rel=\"nofollow\">Hack\nWeek project page</a> and\n<cite>announced my intentions on the ``git`</cite> mailing\nlist &lt;<a href=\"http://article.gmane.org/gmane.comp.version-control.git/262000\" rel=\"nofollow\">http://article.gmane.org/gmane.comp.version-control.git/262000</a>&gt;`__.</p>\n<p>Again in May 2018 I took advantage of another Hack Week to package\n<tt><span class=\"pre\">git-deps</span></tt> properly as a Python module in order to improve the\ninstallation process. This was in preparation for demonstrating the\nsoftware at <a href=\"https://www.meetup.com/londongit/events/248694943/\" rel=\"nofollow\">a Meetup\nevent</a> of the\n<a href=\"https://www.meetup.com/londongit/\" rel=\"nofollow\">Git London User Group</a>.</p>\n</div>\n<div id=\"license\">\n<h3>License</h3>\n<p>Released under <a href=\"COPYING\" rel=\"nofollow\">GPL version 2</a> in order to be consistent\nwith <tt>`git</tt>\u2019s\nlicense &lt;<a href=\"https://github.com/git/git/blob/master/COPYING\" rel=\"nofollow\">https://github.com/git/git/blob/master/COPYING</a>&gt;`__, but I\u2019m\nopen to the idea of dual-licensing if there\u2019s a convincing reason.</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 3870410, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "4961957c125ad4a2eb778a0113deda86", "sha256": "979151c82fd2e08bdef60f34a0fc0919534883e9e29ac3eee2ff63b593532d4d"}, "downloads": -1, "filename": "git-deps-1.0.0.tar.gz", "has_sig": false, "md5_digest": "4961957c125ad4a2eb778a0113deda86", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5356894, "upload_time": "2018-05-16T16:44:00", "upload_time_iso_8601": "2018-05-16T16:44:00.539188Z", "url": "https://files.pythonhosted.org/packages/77/1a/925137bf7617273296924387c60ca1120e10a13587e6adcdcab7ca9df3af/git-deps-1.0.0.tar.gz", "yanked": false}], "1.0.0rc1": [{"comment_text": "", "digests": {"md5": "44b8b7bffd86219eda94a56f1f6d5324", "sha256": "3c5be4ac9b6ddd8a34ffc12ccc6a0f63d6b8f327c6bef3f9b65aa197d9b7667e"}, "downloads": -1, "filename": "git-deps-1.0.0rc1.tar.gz", "has_sig": false, "md5_digest": "44b8b7bffd86219eda94a56f1f6d5324", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12483136, "upload_time": "2018-05-16T14:06:00", "upload_time_iso_8601": "2018-05-16T14:06:00.923781Z", "url": "https://files.pythonhosted.org/packages/15/1e/1da15cccd932612518dd38c16f458f5a78fc3b77ad12896f2255fc0be820/git-deps-1.0.0rc1.tar.gz", "yanked": false}], "1.0.0rc2": [{"comment_text": "", "digests": {"md5": "ae98794af22e671b6a339377005402d8", "sha256": "b994106739bd128f07bfdc72d97057ffb0357cc5492a13bf5f6f16f2ec29fb9b"}, "downloads": -1, "filename": "git-deps-1.0.0rc2.tar.gz", "has_sig": false, "md5_digest": "ae98794af22e671b6a339377005402d8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12483622, "upload_time": "2018-05-16T15:26:47", "upload_time_iso_8601": "2018-05-16T15:26:47.105524Z", "url": "https://files.pythonhosted.org/packages/3c/31/946b8b1d984361cc79c383cfc52dc8bdc3ae68e59de15991a5c2340ef624/git-deps-1.0.0rc2.tar.gz", "yanked": false}], "1.0.0rc3": [{"comment_text": "", "digests": {"md5": "925bd2cbdbc6e4138bd8de4de3de9947", "sha256": "b72639b6d55c86738696d587892ca40686d2e23dc814fe0bc8d685adba528608"}, "downloads": -1, "filename": "git-deps-1.0.0rc3.tar.gz", "has_sig": false, "md5_digest": "925bd2cbdbc6e4138bd8de4de3de9947", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12483214, "upload_time": "2018-05-16T15:43:43", "upload_time_iso_8601": "2018-05-16T15:43:43.379682Z", "url": "https://files.pythonhosted.org/packages/49/af/8255a957cc502dce9b4fb19e97198ffb479a6273d68bc2c7f3d9944623c8/git-deps-1.0.0rc3.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "36a3e6e97f332ec0a94e98455759bb4d", "sha256": "0b02e7a42da7e9931432d8b2f611e8f80d5ff61a0c2d5b0dfdb3c8e3b02442b7"}, "downloads": -1, "filename": "git-deps-1.0.1.tar.gz", "has_sig": false, "md5_digest": "36a3e6e97f332ec0a94e98455759bb4d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5710328, "upload_time": "2018-05-16T23:12:06", "upload_time_iso_8601": "2018-05-16T23:12:06.888746Z", "url": "https://files.pythonhosted.org/packages/6d/02/b90cfd102dcd6bddaccbaed0b55d7d39cea8fa602c465fb8f35216028ea1/git-deps-1.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "36a3e6e97f332ec0a94e98455759bb4d", "sha256": "0b02e7a42da7e9931432d8b2f611e8f80d5ff61a0c2d5b0dfdb3c8e3b02442b7"}, "downloads": -1, "filename": "git-deps-1.0.1.tar.gz", "has_sig": false, "md5_digest": "36a3e6e97f332ec0a94e98455759bb4d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5710328, "upload_time": "2018-05-16T23:12:06", "upload_time_iso_8601": "2018-05-16T23:12:06.888746Z", "url": "https://files.pythonhosted.org/packages/6d/02/b90cfd102dcd6bddaccbaed0b55d7d39cea8fa602c465fb8f35216028ea1/git-deps-1.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:57:07 2020"}