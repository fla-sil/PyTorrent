{"info": {"author": "Zope Community", "author_email": "zope-dev@zope.org", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Framework :: Zope3", "Intended Audience :: Developers", "License :: OSI Approved :: Zope Public License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy", "Topic :: Internet :: WWW/HTTP"], "description": "This package provides a very simple vocabulary implementation using CSV\nfiles. The advantage of CSV files is that they provide an external point to\nspecify data, which allows a non-developer to adjust the data themselves.\n\nDetailed Documentation\n**********************\n\n==============\nCSV Vocabulary\n==============\n\nThis package provides a very simple vocabulary implementation using CSV\nfiles. The advantage of CSV files is that they provide an external point to\nspecify data, which allows a non-developer to adjust the data themselves.\n\n  >>> import z3c.csvvocabulary\n\n  >>> import os.path\n  >>> path = os.path.dirname(z3c.csvvocabulary.__file__)\n\nCSV Vocabulary\n--------------\n\nThe CSV Vocabulary implementation is really just a function that creates a\nsimple vocabulary with titled terms. There is a ``sample.csv`` file in the\n``data`` directory of the ``testing`` sub-package, so let's create a\nvocabulary from that:\n\n  >>> csvfile = os.path.join(path, 'testing', 'data', 'sample.csv')\n\n  >>> samples = z3c.csvvocabulary.CSVVocabulary(csvfile)\n  >>> samples\n  <zope.schema.vocabulary.SimpleVocabulary object at ...>\n\n  >>> sorted([term.value for term in samples])\n  ['value1', 'value2', 'value3', 'value4', 'value5']\n\nLet's now look at a term:\n\n  >>> term1 = samples.getTerm('value1')\n  >>> term1\n  <zope.schema.vocabulary.SimpleTerm object at ...>\n\nAs you can see, the vocabulary automatically prefixes the value:\n\n  >>> term1.value\n  'value1'\n\n  >>> term1.token\n  'value1'\n\n  >>> term1.title\n  u'sample-value1'\n\nWhile it looks like the title is the wrong unicode string, it is really an\nI18n message:\n\n  >>> type(term1.title)\n  <type 'zope.i18nmessageid.message.Message'>\n\n  >>> term1.title.default\n  u'Title 1'\n\n  >>> term1.title.domain\n  'zope'\n\nOf course, it is not always acceptable to make 'zope' the domain of the\nmessage. You can specify the message factory when initializing the vocabulary:\n\n  >>> from zope.i18nmessageid import MessageFactory\n  >>> exampleDomain = MessageFactory(u'example')\n\n  >>> samples = z3c.csvvocabulary.CSVVocabulary(csvfile, exampleDomain)\n  >>> term1 = samples.getTerm(u'value1')\n  >>> term1.title.domain\n  'example'\n\nThe vocabulary is designed to work with small data sets, typically choices in\nuser interfaces. All terms are created upon initialization, so the vocabulary\ndoes not detect updates in the csv file or loads the data when needed. But as\nI said, this is totally okay.\n\n\nEncoding\n````````\n\nBy default the vocabulary expects the csv file to be latin1 encoded.\n\n  >>> csvfile = os.path.join(path, 'testing', 'data', 'utf-8.csv')\n  >>> wrongEncoding = z3c.csvvocabulary.CSVVocabulary(csvfile)\n  >>> wrongEncoding.getTerm('ae').title.default\n  u'\\xc3\\xa4'\n\nIf you csv file has a different encoding you can specify it explicitly:\n\n  >>> utf8Encoded = z3c.csvvocabulary.CSVVocabulary(csvfile, encoding='utf-8')\n  >>> term = utf8Encoded.getTerm('ae')\n  >>> term.title.default\n  u'\\xe4'\n\n\nCSV Message String Extraction\n-----------------------------\n\nThere is a simple function in ``i18nextract.py`` that extracts all message\nstrings from the CSV files in a particular sub-tree. Here we just want to make\nsure that the function completes and some dummy data from the testing package\nwill be used:\n\n  >>> basedir = os.path.dirname(z3c.__file__)\n\n  >>> catalog = z3c.csvvocabulary.csvStrings(path, basedir)\n  >>> pprint(catalog)\n  {u'sample-value1': [('...sample.csv', 1)],\n   u'sample-value2': [('...sample.csv', 2)],\n   u'sample-value3': [('...sample.csv', 3)],\n   u'sample-value4': [('...sample.csv', 4)],\n   u'sample-value5': [('...sample.csv', 5)],\n   u'utf-8-ae': [('...utf-8.csv', 1)],\n   u'utf-8-oe': [('...utf-8.csv', 2)]}\n\n==============\nChange History\n==============\n\n2.0.0 (2013-02-19)\n------------------\n\n- Add Python 3.3 support.\n\n- Drop Python 2.4 and 2.5 support.\n\n\n1.1.0 (2010/01/11)\n------------------\n\n* enocding of csv file can now be specified ``CSVVocabulary(csvfile,\n  encoding='utf-8')`` [fRiSi]\n\n1.0.0\n-----\n\n* initial release", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://pypi.python.org/pypi/z3c.csvvocabulary", "keywords": "zope3 vocabulary csv", "license": "ZPL 2.1", "maintainer": null, "maintainer_email": null, "name": "z3c.csvvocabulary", "package_url": "https://pypi.org/project/z3c.csvvocabulary/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/z3c.csvvocabulary/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://pypi.python.org/pypi/z3c.csvvocabulary"}, "release_url": "https://pypi.org/project/z3c.csvvocabulary/2.0.0/", "requires_dist": null, "requires_python": null, "summary": "A package to create vocabularies based on CSV files.", "version": "2.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>This package provides a very simple vocabulary implementation using CSV\nfiles. The advantage of CSV files is that they provide an external point to\nspecify data, which allows a non-developer to adjust the data themselves.</p>\n<div id=\"detailed-documentation\">\n<h2>Detailed Documentation</h2>\n<div id=\"csv-vocabulary\">\n<h3>CSV Vocabulary</h3>\n<p>This package provides a very simple vocabulary implementation using CSV\nfiles. The advantage of CSV files is that they provide an external point to\nspecify data, which allows a non-developer to adjust the data themselves.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; import z3c.csvvocabulary\n</pre>\n<pre>&gt;&gt;&gt; import os.path\n&gt;&gt;&gt; path = os.path.dirname(z3c.csvvocabulary.__file__)\n</pre>\n</blockquote>\n<div id=\"id1\">\n<h4>CSV Vocabulary</h4>\n<p>The CSV Vocabulary implementation is really just a function that creates a\nsimple vocabulary with titled terms. There is a <tt>sample.csv</tt> file in the\n<tt>data</tt> directory of the <tt>testing</tt> sub-package, so let\u2019s create a\nvocabulary from that:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; csvfile = os.path.join(path, 'testing', 'data', 'sample.csv')\n</pre>\n<pre>&gt;&gt;&gt; samples = z3c.csvvocabulary.CSVVocabulary(csvfile)\n&gt;&gt;&gt; samples\n&lt;zope.schema.vocabulary.SimpleVocabulary object at ...&gt;\n</pre>\n<pre>&gt;&gt;&gt; sorted([term.value for term in samples])\n['value1', 'value2', 'value3', 'value4', 'value5']\n</pre>\n</blockquote>\n<p>Let\u2019s now look at a term:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; term1 = samples.getTerm('value1')\n&gt;&gt;&gt; term1\n&lt;zope.schema.vocabulary.SimpleTerm object at ...&gt;\n</pre>\n</blockquote>\n<p>As you can see, the vocabulary automatically prefixes the value:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; term1.value\n'value1'\n</pre>\n<pre>&gt;&gt;&gt; term1.token\n'value1'\n</pre>\n<pre>&gt;&gt;&gt; term1.title\nu'sample-value1'\n</pre>\n</blockquote>\n<p>While it looks like the title is the wrong unicode string, it is really an\nI18n message:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; type(term1.title)\n&lt;type 'zope.i18nmessageid.message.Message'&gt;\n</pre>\n<pre>&gt;&gt;&gt; term1.title.default\nu'Title 1'\n</pre>\n<pre>&gt;&gt;&gt; term1.title.domain\n'zope'\n</pre>\n</blockquote>\n<p>Of course, it is not always acceptable to make \u2018zope\u2019 the domain of the\nmessage. You can specify the message factory when initializing the vocabulary:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; from zope.i18nmessageid import MessageFactory\n&gt;&gt;&gt; exampleDomain = MessageFactory(u'example')\n</pre>\n<pre>&gt;&gt;&gt; samples = z3c.csvvocabulary.CSVVocabulary(csvfile, exampleDomain)\n&gt;&gt;&gt; term1 = samples.getTerm(u'value1')\n&gt;&gt;&gt; term1.title.domain\n'example'\n</pre>\n</blockquote>\n<p>The vocabulary is designed to work with small data sets, typically choices in\nuser interfaces. All terms are created upon initialization, so the vocabulary\ndoes not detect updates in the csv file or loads the data when needed. But as\nI said, this is totally okay.</p>\n<div id=\"encoding\">\n<h5>Encoding</h5>\n<p>By default the vocabulary expects the csv file to be latin1 encoded.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; csvfile = os.path.join(path, 'testing', 'data', 'utf-8.csv')\n&gt;&gt;&gt; wrongEncoding = z3c.csvvocabulary.CSVVocabulary(csvfile)\n&gt;&gt;&gt; wrongEncoding.getTerm('ae').title.default\nu'\\xc3\\xa4'\n</pre>\n</blockquote>\n<p>If you csv file has a different encoding you can specify it explicitly:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; utf8Encoded = z3c.csvvocabulary.CSVVocabulary(csvfile, encoding='utf-8')\n&gt;&gt;&gt; term = utf8Encoded.getTerm('ae')\n&gt;&gt;&gt; term.title.default\nu'\\xe4'\n</pre>\n</blockquote>\n</div>\n</div>\n<div id=\"csv-message-string-extraction\">\n<h4>CSV Message String Extraction</h4>\n<p>There is a simple function in <tt>i18nextract.py</tt> that extracts all message\nstrings from the CSV files in a particular sub-tree. Here we just want to make\nsure that the function completes and some dummy data from the testing package\nwill be used:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; basedir = os.path.dirname(z3c.__file__)\n</pre>\n<pre>&gt;&gt;&gt; catalog = z3c.csvvocabulary.csvStrings(path, basedir)\n&gt;&gt;&gt; pprint(catalog)\n{u'sample-value1': [('...sample.csv', 1)],\n u'sample-value2': [('...sample.csv', 2)],\n u'sample-value3': [('...sample.csv', 3)],\n u'sample-value4': [('...sample.csv', 4)],\n u'sample-value5': [('...sample.csv', 5)],\n u'utf-8-ae': [('...utf-8.csv', 1)],\n u'utf-8-oe': [('...utf-8.csv', 2)]}\n</pre>\n</blockquote>\n</div>\n</div>\n<div id=\"change-history\">\n<h3>Change History</h3>\n<div id=\"id2\">\n<h4>2.0.0 (2013-02-19)</h4>\n<ul>\n<li>Add Python 3.3 support.</li>\n<li>Drop Python 2.4 and 2.5 support.</li>\n</ul>\n</div>\n<div id=\"id3\">\n<h4>1.1.0 (2010/01/11)</h4>\n<ul>\n<li>enocding of csv file can now be specified <tt>CSVVocabulary(csvfile,\n<span class=\"pre\">encoding='utf-8')</span></tt> [fRiSi]</li>\n</ul>\n</div>\n<div id=\"id4\">\n<h4>1.0.0</h4>\n<ul>\n<li>initial release</li>\n</ul>\n</div>\n</div>\n</div>\n\n          </div>"}, "last_serial": 802007, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "b69c97ff5a17d4d427063f90ff2bb527", "sha256": "b357281cc15467474eb6e3629783709e28d550d3617815ca4062245bb75c5f96"}, "downloads": -1, "filename": "z3c.csvvocabulary-1.0.0-py2.4.egg", "has_sig": false, "md5_digest": "b69c97ff5a17d4d427063f90ff2bb527", "packagetype": "bdist_egg", "python_version": "2.4", "requires_python": null, "size": 10819, "upload_time": "2007-05-22T16:59:58", "upload_time_iso_8601": "2007-05-22T16:59:58Z", "url": "https://files.pythonhosted.org/packages/fc/18/d3f22a957cb1a006d49e919a620cd204882ed6f6ba45c2caaeee009e8cfd/z3c.csvvocabulary-1.0.0-py2.4.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "28769266863e3cd00e35ed692f6f1e85", "sha256": "82b4687097a81448a5ba074f66271922d3b0388501e0477f8227e2ec57424db1"}, "downloads": -1, "filename": "z3c.csvvocabulary-1.0.0.tar.gz", "has_sig": false, "md5_digest": "28769266863e3cd00e35ed692f6f1e85", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5416, "upload_time": "2007-05-22T16:59:48", "upload_time_iso_8601": "2007-05-22T16:59:48Z", "url": "https://files.pythonhosted.org/packages/01/2a/2e1de9068692f32a6fb427df646ea3d346f4bb59c5d685445863c95a97b5/z3c.csvvocabulary-1.0.0.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "06131ba480718319b51607051b5f33a9", "sha256": "574391898da64a6e67444b4b306095709df14a34aa9b8859219e6831d756f8ad"}, "downloads": -1, "filename": "z3c.csvvocabulary-1.1.0-py2.4.egg", "has_sig": false, "md5_digest": "06131ba480718319b51607051b5f33a9", "packagetype": "bdist_egg", "python_version": "2.4", "requires_python": null, "size": 11441, "upload_time": "2010-01-11T17:17:21", "upload_time_iso_8601": "2010-01-11T17:17:21.036333Z", "url": "https://files.pythonhosted.org/packages/ec/27/3e417041bd4a2bf19bec6419a630aecf733c2970f4b4f89c8315767f6c00/z3c.csvvocabulary-1.1.0-py2.4.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "31fdc2724be8b03734b1a67d90173073", "sha256": "92ebe6e12b0d92153ee9385027b477b4fc18fddf92e2d0544c3c7cfa89340dab"}, "downloads": -1, "filename": "z3c.csvvocabulary-1.1.0.tar.gz", "has_sig": false, "md5_digest": "31fdc2724be8b03734b1a67d90173073", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5944, "upload_time": "2010-01-11T17:17:20", "upload_time_iso_8601": "2010-01-11T17:17:20.831993Z", "url": "https://files.pythonhosted.org/packages/f8/1c/b737e5fbed28d9229463935f8fcaf54d500d328ff0fd172a5e36e93d2969/z3c.csvvocabulary-1.1.0.tar.gz", "yanked": false}], "2.0.0": [{"comment_text": "", "digests": {"md5": "8076b89fb5f2abe6816e2748ca4e6bc8", "sha256": "8c81f4dd8bb5af4f6c6a18bdcb9625eef97ec0cd98414dfde4890abbeb641574"}, "downloads": -1, "filename": "z3c.csvvocabulary-2.0.0.zip", "has_sig": false, "md5_digest": "8076b89fb5f2abe6816e2748ca4e6bc8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18285, "upload_time": "2013-02-20T03:41:33", "upload_time_iso_8601": "2013-02-20T03:41:33.565210Z", "url": "https://files.pythonhosted.org/packages/62/63/e6d4946c2587670dbd8af3b82176be38599e3c8f8371fa91b145acb21636/z3c.csvvocabulary-2.0.0.zip", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "8076b89fb5f2abe6816e2748ca4e6bc8", "sha256": "8c81f4dd8bb5af4f6c6a18bdcb9625eef97ec0cd98414dfde4890abbeb641574"}, "downloads": -1, "filename": "z3c.csvvocabulary-2.0.0.zip", "has_sig": false, "md5_digest": "8076b89fb5f2abe6816e2748ca4e6bc8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18285, "upload_time": "2013-02-20T03:41:33", "upload_time_iso_8601": "2013-02-20T03:41:33.565210Z", "url": "https://files.pythonhosted.org/packages/62/63/e6d4946c2587670dbd8af3b82176be38599e3c8f8371fa91b145acb21636/z3c.csvvocabulary-2.0.0.zip", "yanked": false}], "timestamp": "Fri May  8 03:21:07 2020"}