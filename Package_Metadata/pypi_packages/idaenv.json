{"info": {"author": "", "author_email": "", "bugtrack_url": null, "classifiers": ["Natural Language :: English", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 3"], "description": "# idaenv - IDAPython Plugin Management\n\nidaenv is a plugin manager for the IDA Pro disassembler. It bridges the gap\nbetween IDA Pro and the greater Python ecosystem of setuptools/virtualenv.\n\nMost Python packages are distributed using setuptools (or perhaps distutils) and\nthe PyPi package repository. However IDA Pro expects extensions to be standalone\nfiles placed in a specific directory. Using idaenv, you can install Python\npackages into a virtual environment using setuptools (or pip), run a single\n\"update\" command, and immediately use plugins, processor modules, or loaders\ncontained in the package.\n\n## Usage\n\nIf you're using IDA 7.3 or earlier, initialize a Python 2 virtual environment\nand activate it:\n\n    $ virtualenv -p python2 ida\n    $ ./ida/bin/activate\n\nIf you're using IDA 7.4 or later, it is recommended to use\n[venv](https://docs.python.org/3/library/venv.html), which is included in the\nstandard library.\n\n    $ python3 -m venv ida\n    $ ./ida/bin/activate\n\nIt is still possible to use virtualenv with Python 3, however you will encounter\nan exception when starting IDA 7.4 due to a longstanding\n[issue](https://github.com/pypa/virtualenv/issues/737) in virtualenv.\n\nOnce virtual environment is activated, install idaenv:\n\n    $ pip install idaenv\n\nUpdate the IDAUSR environment variable to include the idaenv plugin directory:\n\n    $ export IDAUSR=$HOME/.idapro:$( idaenv prefix )\n\nInstall some idaenv compatible extensions using setup.py or pip. Then use the\nidaenv \"update\" command:\n\n    $ pip install ...\n    $ idaenv update\n    Writing wrapper to '/home/me/.virtualenvs/cpy2/ida/plugins/keypatch_keypatch_f265c7.py'...\n    Writing wrapper to '/home/me/.virtualenvs/cpy2/ida/plugins/uemu_uemu_791c39.py'...\n      Updated:\n        - keypatch.keypatch\n        - uemu.uemu\n\n    ... TODO include output ...\n\nTo see what plugins are installed, use the \"ls\" or \"status\" command.\n\n    $ idaenv ls\n    Plugins:\n      Active:\n        - keypatch.keypatch\n        - uemu.uemu\n\n## Mechanism\n\nidaenv takes inspiration from the established `console_scripts` mechanism in\nPython. It generates and manages small wrapper scripts that import from an\ninstalled package and then export the interface expected by IDA Pro. For\nexample, plugin wrappers use the following template:\n\n```python\nfrom %(module)s import %(attr)s\n\ndef PLUGIN_ENTRY():\n    return %(attr)s()\n```\n\n## Packaging\n\nIn order for idaenv to know where plugins are located inside of a package, they\nhave to be called out in `setup.py` using \"entry points\". For example, the\ndeclaration for a traditional plugin that consists of just a single file (like\nthe excellent keypatch) might look like:\n\n```python\nfrom setuptools import setup\n\n\nsetup(name='keypatch',\n      version=\"0.0\",\n      py_modules=[\"keypatch\"],\n      install_requires=[\n          \"keystone-engine\"\n      ],\n      zip_safe=False,\n      entry_points={\n          \"idapython_plugins\": [\n              \"keypatch=keypatch:Keypatch_Plugin_t\",\n          ]\n      })\n```\n\nThe structure of the entry points dictionary is described in detail by the\n[setuptools documentation](https://setuptools.readthedocs.io/en/latest/setuptools.html#dynamic-discovery-of-services-and-plugins).\nThe general structure is:\n\n```python\n{\n    \"entry_point_group\": [\n        \"plugin_name=module.submodule:PluginClass.plugin_method\n    ]\n}\n```\n\nidaenv supports the following entry point groups:\n\n- `idapython_plugins`\n- `idapython_procs`\n- `idapython_loaders`\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "idaenv", "package_url": "https://pypi.org/project/idaenv/", "platform": "", "project_url": "https://pypi.org/project/idaenv/", "project_urls": null, "release_url": "https://pypi.org/project/idaenv/0.4.0/", "requires_dist": null, "requires_python": "", "summary": "IDA Pro plugin manager.", "version": "0.4.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>idaenv - IDAPython Plugin Management</h1>\n<p>idaenv is a plugin manager for the IDA Pro disassembler. It bridges the gap\nbetween IDA Pro and the greater Python ecosystem of setuptools/virtualenv.</p>\n<p>Most Python packages are distributed using setuptools (or perhaps distutils) and\nthe PyPi package repository. However IDA Pro expects extensions to be standalone\nfiles placed in a specific directory. Using idaenv, you can install Python\npackages into a virtual environment using setuptools (or pip), run a single\n\"update\" command, and immediately use plugins, processor modules, or loaders\ncontained in the package.</p>\n<h2>Usage</h2>\n<p>If you're using IDA 7.3 or earlier, initialize a Python 2 virtual environment\nand activate it:</p>\n<pre><code>$ virtualenv -p python2 ida\n$ ./ida/bin/activate\n</code></pre>\n<p>If you're using IDA 7.4 or later, it is recommended to use\n<a href=\"https://docs.python.org/3/library/venv.html\" rel=\"nofollow\">venv</a>, which is included in the\nstandard library.</p>\n<pre><code>$ python3 -m venv ida\n$ ./ida/bin/activate\n</code></pre>\n<p>It is still possible to use virtualenv with Python 3, however you will encounter\nan exception when starting IDA 7.4 due to a longstanding\n<a href=\"https://github.com/pypa/virtualenv/issues/737\" rel=\"nofollow\">issue</a> in virtualenv.</p>\n<p>Once virtual environment is activated, install idaenv:</p>\n<pre><code>$ pip install idaenv\n</code></pre>\n<p>Update the IDAUSR environment variable to include the idaenv plugin directory:</p>\n<pre><code>$ export IDAUSR=$HOME/.idapro:$( idaenv prefix )\n</code></pre>\n<p>Install some idaenv compatible extensions using setup.py or pip. Then use the\nidaenv \"update\" command:</p>\n<pre><code>$ pip install ...\n$ idaenv update\nWriting wrapper to '/home/me/.virtualenvs/cpy2/ida/plugins/keypatch_keypatch_f265c7.py'...\nWriting wrapper to '/home/me/.virtualenvs/cpy2/ida/plugins/uemu_uemu_791c39.py'...\n  Updated:\n    - keypatch.keypatch\n    - uemu.uemu\n\n... TODO include output ...\n</code></pre>\n<p>To see what plugins are installed, use the \"ls\" or \"status\" command.</p>\n<pre><code>$ idaenv ls\nPlugins:\n  Active:\n    - keypatch.keypatch\n    - uemu.uemu\n</code></pre>\n<h2>Mechanism</h2>\n<p>idaenv takes inspiration from the established <code>console_scripts</code> mechanism in\nPython. It generates and manages small wrapper scripts that import from an\ninstalled package and then export the interface expected by IDA Pro. For\nexample, plugin wrappers use the following template:</p>\n<pre><span class=\"kn\">from</span> <span class=\"o\">%</span><span class=\"p\">(</span><span class=\"n\">module</span><span class=\"p\">)</span><span class=\"n\">s</span> <span class=\"kn\">import</span> <span class=\"o\">%</span><span class=\"p\">(</span><span class=\"n\">attr</span><span class=\"p\">)</span><span class=\"n\">s</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">PLUGIN_ENTRY</span><span class=\"p\">():</span>\n    <span class=\"k\">return</span> <span class=\"o\">%</span><span class=\"p\">(</span><span class=\"n\">attr</span><span class=\"p\">)</span><span class=\"n\">s</span><span class=\"p\">()</span>\n</pre>\n<h2>Packaging</h2>\n<p>In order for idaenv to know where plugins are located inside of a package, they\nhave to be called out in <code>setup.py</code> using \"entry points\". For example, the\ndeclaration for a traditional plugin that consists of just a single file (like\nthe excellent keypatch) might look like:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">setuptools</span> <span class=\"kn\">import</span> <span class=\"n\">setup</span>\n\n\n<span class=\"n\">setup</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'keypatch'</span><span class=\"p\">,</span>\n      <span class=\"n\">version</span><span class=\"o\">=</span><span class=\"s2\">\"0.0\"</span><span class=\"p\">,</span>\n      <span class=\"n\">py_modules</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"keypatch\"</span><span class=\"p\">],</span>\n      <span class=\"n\">install_requires</span><span class=\"o\">=</span><span class=\"p\">[</span>\n          <span class=\"s2\">\"keystone-engine\"</span>\n      <span class=\"p\">],</span>\n      <span class=\"n\">zip_safe</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n      <span class=\"n\">entry_points</span><span class=\"o\">=</span><span class=\"p\">{</span>\n          <span class=\"s2\">\"idapython_plugins\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n              <span class=\"s2\">\"keypatch=keypatch:Keypatch_Plugin_t\"</span><span class=\"p\">,</span>\n          <span class=\"p\">]</span>\n      <span class=\"p\">})</span>\n</pre>\n<p>The structure of the entry points dictionary is described in detail by the\n<a href=\"https://setuptools.readthedocs.io/en/latest/setuptools.html#dynamic-discovery-of-services-and-plugins\" rel=\"nofollow\">setuptools documentation</a>.\nThe general structure is:</p>\n<pre><span class=\"p\">{</span>\n    <span class=\"s2\">\"entry_point_group\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n        <span class=\"s2\">\"plugin_name=module.submodule:PluginClass.plugin_method</span>\n    <span class=\"p\">]</span>\n<span class=\"p\">}</span>\n</pre>\n<p>idaenv supports the following entry point groups:</p>\n<ul>\n<li><code>idapython_plugins</code></li>\n<li><code>idapython_procs</code></li>\n<li><code>idapython_loaders</code></li>\n</ul>\n\n          </div>"}, "last_serial": 6295008, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "9a5a07c5dc508a2c39148d3844dc4bac", "sha256": "d5dcdbc0d7c60361dae275b98fbfb69e92e344257c057880a143f06ea118f700"}, "downloads": -1, "filename": "idaenv-0.1.tar.gz", "has_sig": false, "md5_digest": "9a5a07c5dc508a2c39148d3844dc4bac", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5105, "upload_time": "2018-07-03T17:45:59", "upload_time_iso_8601": "2018-07-03T17:45:59.132417Z", "url": "https://files.pythonhosted.org/packages/a1/df/869f4563e9764c5b686e57f3502845c1da90eb23f3ad287abc245c75c56e/idaenv-0.1.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "79c070a73c818c78b13b504715e1260b", "sha256": "5820ec9dfca0f118537d80c8c149a5110d70dbc6f302c1b7f3333f43a885ebc0"}, "downloads": -1, "filename": "idaenv-0.2.0.tar.gz", "has_sig": false, "md5_digest": "79c070a73c818c78b13b504715e1260b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5251, "upload_time": "2018-07-03T20:19:03", "upload_time_iso_8601": "2018-07-03T20:19:03.710660Z", "url": "https://files.pythonhosted.org/packages/22/66/8b1635311f9e8722030cf24bc1451d348b5f101a7e841e543804129d0f33/idaenv-0.2.0.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "ec9ab90f8a0083118e39cbe8d103225c", "sha256": "de115d905fdb0c5583570407fe0028156c065299b327a1979378d96184018fe1"}, "downloads": -1, "filename": "idaenv-0.4.0-py3-none-any.whl", "has_sig": false, "md5_digest": "ec9ab90f8a0083118e39cbe8d103225c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7629, "upload_time": "2019-12-13T19:40:11", "upload_time_iso_8601": "2019-12-13T19:40:11.773347Z", "url": "https://files.pythonhosted.org/packages/81/f4/cd3887d037f20425d3a15eecb9d520c1b1288b47494be34448b63c23fbea/idaenv-0.4.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "67ca083c49fee8b404dc9d712c59c893", "sha256": "85655525881d0b4f0d17c841dd62506cf7036ecbbe03d4147f0cd64b352f6c73"}, "downloads": -1, "filename": "idaenv-0.4.0.tar.gz", "has_sig": false, "md5_digest": "67ca083c49fee8b404dc9d712c59c893", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6642, "upload_time": "2019-12-13T19:40:12", "upload_time_iso_8601": "2019-12-13T19:40:12.975355Z", "url": "https://files.pythonhosted.org/packages/4e/11/a34a4023642b9ae537ea9adc4a9b3b6e8de0aca204abbe2a9ef0fb600b37/idaenv-0.4.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ec9ab90f8a0083118e39cbe8d103225c", "sha256": "de115d905fdb0c5583570407fe0028156c065299b327a1979378d96184018fe1"}, "downloads": -1, "filename": "idaenv-0.4.0-py3-none-any.whl", "has_sig": false, "md5_digest": "ec9ab90f8a0083118e39cbe8d103225c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7629, "upload_time": "2019-12-13T19:40:11", "upload_time_iso_8601": "2019-12-13T19:40:11.773347Z", "url": "https://files.pythonhosted.org/packages/81/f4/cd3887d037f20425d3a15eecb9d520c1b1288b47494be34448b63c23fbea/idaenv-0.4.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "67ca083c49fee8b404dc9d712c59c893", "sha256": "85655525881d0b4f0d17c841dd62506cf7036ecbbe03d4147f0cd64b352f6c73"}, "downloads": -1, "filename": "idaenv-0.4.0.tar.gz", "has_sig": false, "md5_digest": "67ca083c49fee8b404dc9d712c59c893", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6642, "upload_time": "2019-12-13T19:40:12", "upload_time_iso_8601": "2019-12-13T19:40:12.975355Z", "url": "https://files.pythonhosted.org/packages/4e/11/a34a4023642b9ae537ea9adc4a9b3b6e8de0aca204abbe2a9ef0fb600b37/idaenv-0.4.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:48:57 2020"}