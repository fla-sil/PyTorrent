{"info": {"author": "Ayoub Malek, Vanessa Sochat", "author_email": "superkogito@gmail.com, vsochat@stanford.edu", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: Unix", "Programming Language :: Python", "Programming Language :: Python :: 3.7", "Topic :: Scientific/Engineering", "Topic :: Software Development"], "description": "<div style=\"text-align:center\"><img src=\"https://raw.githubusercontent.com/urlstechie/urlchecker-python/master/docs/urlstechie.png\"/></div>\n\n[![Build Status](https://travis-ci.com/urlstechie/urlchecker-python.svg?branch=master)](https://travis-ci.com/urlstechie/urlchecker-python) [![Documentation Status](https://readthedocs.org/projects/urlchecker-python/badge/?version=latest)](https://urlchecker-python.readthedocs.io/en/latest/?badge=latest) [![codecov](https://codecov.io/gh/urlstechie/urlchecker-python/branch/master/graph/badge.svg)](https://codecov.io/gh/urlstechie/urlchecker-python) [![Python](https://img.shields.io/badge/python-3.5%20%7C%203.6%20%7C%203.7-blue)](https://www.python.org/doc/versions/) [![CodeFactor](https://www.codefactor.io/repository/github/urlstechie/urlchecker-python/badge)](https://www.codefactor.io/repository/github/urlstechie/urlchecker-python) ![PyPI](https://img.shields.io/pypi/v/urlchecker) [![Downloads](https://pepy.tech/badge/urlchecker)](https://pepy.tech/project/urlchecker) [![License](https://img.shields.io/badge/license-MIT-brightgreen)](https://github.com/urlstechie/urlchecker-python/blob/master/LICENSE)\n\n\n# urlchecker-python\n\nThis is a python module to collect urls over static files (code and documentation)\nand then test for and report broken links. If you are interesting in using\nthis as a GitHub action, see [urlchecker-action](https://github.com/urlstechie/urlchecker-action). There are also container\nbases available on [quay.io/urlstechie/urlchecker](https://quay.io/repository/urlstechie/urlchecker?tab=tags).\n\n## Module Documentation\n\nA detailed documentation of the code is available under [urlchecker-python.readthedocs.io](https://urlchecker-python.readthedocs.io/en/latest/)\n\n## Usage\n\n### Install\n\nYou can install the urlchecker from [pypi](https://pypi.org/project/urlchecker):\n\n```bash\npip install urlchecker\n```\n\nor install from the repository directly:\n\n```bash\ngit clone https://github.com/urlstechie/urlchecker-python.git\ncd urlchecker-python\npython setup.py install\n```\n\nInstallation will place a binary, `urlchecker` in your Python path.\n\n```bash\n$ which urlchecker\n/home/vanessa/anaconda3/bin/urlchecker\n```\n\n\n### Check Local Folder\n\nYour most likely use case will be to check a local directory with static files (documentation or code)\nfor files. In this case, you can use urlchecker check:\n\n```bash\n$ urlchecker check --help\nusage: urlchecker check [-h] [-b BRANCH] [--subfolder SUBFOLDER] [--cleanup]\n                        [--force-pass] [--no-print] [--file-types FILE_TYPES]\n                        [--files FILES]\n                        [--white-listed-urls WHITE_LISTED_URLS]\n                        [--white-listed-patterns WHITE_LISTED_PATTERNS]\n                        [--white-listed-files WHITE_LISTED_FILES]\n                        [--save SAVE] [--retry-count RETRY_COUNT]\n                        [--timeout TIMEOUT]\n                        path\n\npositional arguments:\n  path                  the local path or GitHub repository to clone and check\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -b BRANCH, --branch BRANCH\n                        if cloning, specify a branch to use (defaults to\n                        master)\n  --subfolder SUBFOLDER\n                        relative subfolder path within path (if not specified,\n                        we use root)\n  --cleanup             remove root folder after checking (defaults to False,\n                        no cleaup)\n  --force-pass          force successful pass (return code 0) regardless of\n                        result\n  --no-print            Skip printing results to the screen (defaults to\n                        printing to console).\n  --file-types FILE_TYPES\n                        comma separated list of file extensions to check\n                        (defaults to .md,.py)\n  --files FILES         comma separated list of exact files or patterns to\n                        check.\n  --white-listed-urls WHITE_LISTED_URLS\n                        comma separated list of white listed urls (no spaces)\n  --white-listed-patterns WHITE_LISTED_PATTERNS\n                        comma separated list of white listed patterns for urls\n                        (no spaces)\n  --white-listed-files WHITE_LISTED_FILES\n                        comma separated list of white listed files and\n                        patterns for files (no spaces)\n  --save SAVE           Path to a csv file to save results to.\n  --retry-count RETRY_COUNT\n                        retry count upon failure (defaults to 2, one retry).\n  --timeout TIMEOUT     timeout (seconds) to provide to the requests library\n                        (defaults to 5)\n```\n\nYou have a lot of flexibility to define patterns of urls or files to skip,\nalong with the number of retries or timeout (seconds). The most basic usage will\ncheck an entire directory. Let's clone and check the directory of one of the\nmaintainers:\n\n```bash\ngit clone https://github.com/SuperKogito/SuperKogito.github.io.git\ncd SuperKogito.github.io\nurlchecker check .\n\n$ urlchecker check .\n  original path: .\n     final path: /tmp/SuperKogito.github.io\n      subfolder: None\n         branch: master\n        cleanup: False\n     file types: ['.md', '.py']\n      print all: True\n url whitetlist: []\n   url patterns: []\n  file patterns: []\n     force pass: False\n    retry count: 2\n        timeout: 5\n\n /tmp/SuperKogito.github.io/README.md\n ------------------------------------\nhttps://travis-ci.com/SuperKogito/SuperKogito.github.io\nhttps://www.python.org/download/releases/3.0/\nhttps://superkogito.github.io/blog/diabetesML2.html\nhttps://superkogito.github.io/blog/Cryptography.html\nhttp://www.sphinx-doc.org/en/master/\nhttps://github.com/\nhttps://superkogito.github.io/blog/SignalFraming.html\nhttps://superkogito.github.io/blog/VoiceBasedGenderRecognition.html\nhttps://travis-ci.com/SuperKogito/SuperKogito.github.io.svg?branch=master\nhttps://superkogito.github.io/blog/SpectralLeakageWindowing.html\nhttps://superkogito.github.io/blog/Intro.html\nhttps://github.com/SuperKogito/SuperKogito.github.io/workflows/Check%20URLs/badge.svg\nhttps://superkogito.github.io/blog/diabetesML1.html\nhttps://superkogito.github.io/blog/AuthenticatedEncryption.html\nhttps://superKogito.github.io/blog/ffmpegpipe.html\nhttps://superkogito.github.io/blog/Encryption.html\nhttps://superkogito.github.io/blog/NaiveVad.html\n\n /tmp/SuperKogito.github.io/_project/src/postprocessing.py\n ---------------------------------------------------------\nNo urls found.\n...\n\nhttps://github.com/marsbroshok/VAD-python/blob/d74033aa08fbbbcdbd491f6e52a1dfdbbb388eea/vad.py#L64\nhttps://github.com/fgnt/pb_chime5\nhttps://ai.facebook.com/blog/wav2vec-state-of-the-art-speech-recognition-through-self-supervision/\nhttps://corplinguistics.wordpress.com/tag/mandarin/\nhttp://www.cs.tut.fi/~tuomasv/papers/ijcnn_paper_valenti_extended.pdf\nhttp://shachi.org/resources\nhttps://conference.scipy.org/proceedings/scipy2015/pdfs/brian_mcfee.pdf\nhttps://www.dlology.com/blog/simple-speech-keyword-detecting-with-depthwise-separable-convolutions/\nhttps://stackoverflow.com/questions/49197916/how-to-profile-cpu-usage-of-a-python-script\n\n\nDone. All URLS passed.\n```\n\n### Check GitHub Repository\n\nBut wouldn't it be easier to not have to clone the repository first?\nOf course! We can specify a GitHub url instead, and add `--cleanup`\nif we want to clean up the folder after.\n\n```bash\nurlchecker check https://github.com/SuperKogito/SuperKogito.github.io.git\n```\n\nIf you specify any arguments for a white list (or any kind of expected list) make\nsure that you provide a comma separated list *without any spaces*\n\n```\nurlchecker check --white-listed-files=README.md,_config.yml\n```\n\n### Save Results\n\nIf you want to save your results to file, perhaps for some kind of record or\nother data analysis, you can provide the `--save` argument:\n\n```bash\n$ urlchecker check --save results.csv .\n  original path: .\n     final path: /home/vanessa/Desktop/Code/urlstechie/urlchecker-test-repo\n      subfolder: None\n         branch: master\n        cleanup: False\n     file types: ['.md', '.py']\n      print all: True\n url whitetlist: []\n   url patterns: []\n  file patterns: []\n     force pass: False\n    retry count: 2\n           save: results.csv\n        timeout: 5\n\n /home/vanessa/Desktop/Code/urlstechie/urlchecker-test-repo/README.md \n --------------------------------------------------------------------\nNo urls found.\n\n /home/vanessa/Desktop/Code/urlstechie/urlchecker-test-repo/test_files/sample_test_file.py \n -----------------------------------------------------------------------------------------\nhttps://github.com/SuperKogito/URLs-checker/README.md\nhttps://github.com/SuperKogito/URLs-checker/README.md\nhttps://www.google.com/\nhttps://github.com/SuperKogito\n\n /home/vanessa/Desktop/Code/urlstechie/urlchecker-test-repo/test_files/sample_test_file.md \n -----------------------------------------------------------------------------------------\nhttps://github.com/SuperKogito/URLs-checker/blob/master/README.md\nhttps://github.com/SuperKogito/Voice-based-gender-recognition/issues\nhttps://github.com/SuperKogito/spafe/issues/7\nhttps://github.com/SuperKogito/URLs-checker\nhttps://github.com/SuperKogito/URLs-checker/issues\nhttps://github.com/SuperKogito/spafe/issues/4\nhttps://github.com/SuperKogito/URLs-checker/issues/2\nhttps://github.com/SuperKogito/URLs-checker/issues/2\nhttps://github.com/SuperKogito/Voice-based-gender-recognition/issues/1\nhttps://github.com/SuperKogito/spafe/issues/6\nhttps://github.com/SuperKogito/spafe/issues\n...\n\nSaving results to /home/vanessa/Desktop/Code/urlstechie/urlchecker-test-repo/results.csv\n\n\nDone. All URLS passed.\n```\n\nThe file that you save to will include a comma separated value tabular listing\nof the urls, and their result. The result options are \"passed\" and \"failed\"\nand the default header is `URL,RESULT`. All of these defaults are exposed\nif you want to change them (e.g., using a tab separator or a different header)\nif you call the function from within Python. Here is an example of the default file\nproduced, which should satisfy most use cases:\n\n```\nURL,RESULT\nhttps://github.com/SuperKogito,passed\nhttps://www.google.com/,passed\nhttps://github.com/SuperKogito/Voice-based-gender-recognition/issues,passed\nhttps://github.com/SuperKogito/Voice-based-gender-recognition,passed\nhttps://github.com/SuperKogito/spafe/issues/4,passed\nhttps://github.com/SuperKogito/Voice-based-gender-recognition/issues/2,passed\nhttps://github.com/SuperKogito/spafe/issues/5,passed\nhttps://github.com/SuperKogito/URLs-checker/blob/master/README.md,passed\nhttps://img.shields.io/,passed\nhttps://github.com/SuperKogito/spafe/,passed\nhttps://github.com/SuperKogito/spafe/issues/3,passed\nhttps://www.google.com/,passed\nhttps://github.com/SuperKogito,passed\nhttps://github.com/SuperKogito/spafe/issues/8,passed\nhttps://github.com/SuperKogito/spafe/issues/7,passed\nhttps://github.com/SuperKogito/Voice-based-gender-recognition/issues/1,passed\nhttps://github.com/SuperKogito/spafe/issues,passed\nhttps://github.com/SuperKogito/URLs-checker/issues,passed\nhttps://github.com/SuperKogito/spafe/issues/2,passed\nhttps://github.com/SuperKogito/URLs-checker,passed\nhttps://github.com/SuperKogito/spafe/issues/6,passed\nhttps://github.com/SuperKogito/spafe/issues/1,passed\nhttps://github.com/SuperKogito/URLs-checker/README.md,failed\nhttps://github.com/SuperKogito/URLs-checker/issues/3,failed\nhttps://none.html,failed\nhttps://github.com/SuperKogito/URLs-checker/issues/2,failed\nhttps://github.com/SuperKogito/URLs-checker/README.md,failed\nhttps://github.com/SuperKogito/URLs-checker/issues/1,failed\nhttps://github.com/SuperKogito/URLs-checker/issues/4,failed\n```\n\n\n### Usage from Python\n\n#### Checking a Path\n\nIf you want to check a list of urls outside of the provided client, this is fairly easy to do!\nLet's say we have a path, our present working directory, and we want to check\n.py and .md files (the default)\n\n```python\nfrom urlchecker.core.check import UrlChecker\nimport os\n\npath = os.getcwd()\nchecker = UrlChecker(path)    \n# UrlChecker:/home/vanessa/Desktop/Code/urlstechie/urlchecker-python\n```\n\nAnd of course you can provide more substantial arguments to derive the original\nfile list:\n\n```python\nchecker = UrlChecker(\n    path=path,\n    file_types=[\".md\", \".py\", \".rst\"],\n    include_patterns=[],\n    white_listed_files=[\"README.md\", \"LICENSE\"],\n    print_all=True,\n)\n```\nI can then run the checker like this:\n\n```python\nchecker.run()\n```\n\nOr with more customization of white listing urls:\n\n```python\nchecker.run(\n    white_listed_urls=white_listed_urls,\n    white_listed_patterns=white_listed_patterns,\n    retry_count=3,\n    timeout=5,\n)\n```\n\nYou'll get the results object returned, which is also available at `checker.results`,\na simple dictionary with \"passed\" and \"failed\" keys to show passes and fails across\nall files.\n\n```python\n{'passed': ['https://github.com/SuperKogito/spafe/issues/4',\n  'http://shachi.org/resources',\n  'https://superkogito.github.io/blog/SpectralLeakageWindowing.html',\n  'https://superkogito.github.io/figures/fig4.html',\n  'https://github.com/urlstechie/urlchecker-test-repo',\n  'https://www.google.com/',\n  ...\n  'https://github.com/SuperKogito',\n  'https://img.shields.io/',\n  'https://www.google.com/',\n  'https://docs.python.org/2'],\n 'failed': ['https://github.com/urlstechie/urlschecker-python/tree/master',\n  'https://github.com/SuperKogito/Voice-based-gender-recognition,passed',\n  'https://github.com/SuperKogito/URLs-checker/README.md',\n   ...\n  'https://superkogito.github.io/tables',\n  'https://github.com/SuperKogito/URLs-checker/issues/2',\n  'https://github.com/SuperKogito/URLs-checker/README.md',\n  'https://github.com/SuperKogito/URLs-checker/issues/4',\n  'https://github.com/SuperKogito/URLs-checker/issues/3',\n  'https://github.com/SuperKogito/URLs-checker/issues/1',\n  'https://none.html']}\n```\n\nYou can look at `checker.checks`, which is a dictionary of result objects,\norganized by the filename:\n\n```python\nfor file_name, result in checker.checks.items(): \n    print() \n    print(result) \n    print(\"Total Results: %s \" % result.count) \n    print(\"Total Failed: %s\" % len(result.failed)) \n    print(\"Total Passed: %s\" % len(result.passed)) \n\n...\n\nUrlCheck:/home/vanessa/Desktop/Code/urlstechie/urlchecker-python/tests/test_files/sample_test_file.md\nTotal Results: 26 \nTotal Failed: 6\nTotal Passed: 20\n\nUrlCheck:/home/vanessa/Desktop/Code/urlstechie/urlchecker-python/.pytest_cache/README.md\nTotal Results: 1 \nTotal Failed: 0\nTotal Passed: 1\n\nUrlCheck:/home/vanessa/Desktop/Code/urlstechie/urlchecker-python/.eggs/pytest_runner-5.2-py3.7.egg/ptr.py\nTotal Results: 0 \nTotal Failed: 0\nTotal Passed: 0\n\nUrlCheck:/home/vanessa/Desktop/Code/urlstechie/urlchecker-python/docs/source/conf.py\nTotal Results: 3 \nTotal Failed: 0\nTotal Passed: 3\n```\n\nFor any result object, you can print the list of passed, falied, white listed,\nor all the urls.\n\n```python\nresult.all                                                                                                                                                                       \n['https://www.sphinx-doc.org/en/master/usage/configuration.html',\n 'https://docs.python.org/3',\n 'https://docs.python.org/2']\n\nresult.failed                                                                                                                                                                    \n[]\n\nresult.white_listed\n[]\n\nresult.passed                                                                                                                                                                    \n['https://www.sphinx-doc.org/en/master/usage/configuration.html',\n 'https://docs.python.org/3',\n 'https://docs.python.org/2']\n\nresult.count\n3\n```\n\n\n#### Checking a List of URls\n\nIf you start with a list of urls you want to check, you can do that too!\n\n```python\nfrom urlchecker.core.urlproc import UrlCheckResult\n\nurls = ['https://www.github.com', \"https://github.com\", \"https://banana-pudding-doesnt-exist.com\"]\n\n# Instantiate an empty checker to extract urls\nchecker = UrlCheckResult()\nFile name None is undefined or does not exist, skipping extraction.\n```\n\nIf you provied a file name, the urls would be extracted for you.\n\n```python\nchecker = UrlCheckResult(\n    file_name=file_name,\n    white_listed_patterns=white_listed_patterns,\n    white_listed_urls=white_listed_urls,\n    print_all=self.print_all,\n)\n```\n\nor you can provide all the parameters without the filename:\n\n```python\nchecker = UrlCheckResult(\n    white_listed_patterns=white_listed_patterns,\n    white_listed_urls=white_listed_urls,\n    print_all=self.print_all,\n)\n```\n\nIf you don't provide the file_name to check urls, you can give the urls\nyou defined previously directly to the `check_urls` function:\n\n\n```python\nchecker.check_urls(urls)\n\nhttps://www.github.com\nhttps://github.com\nHTTPSConnectionPool(host='banana-pudding-doesnt-exist.com', port=443): Max retries exceeded with url: / (Caused by NewConnectionError('<urllib3.connection.VerifiedHTTPSConnection object at 0x7f989abdfa10>: Failed to establish a new connection: [Errno -2] Name or service not known'))\nhttps://banana-pudding-doesnt-exist.com\n```\n\nAnd of course you can specify a timeout and retry:\n\n```python\nchecker.check_urls(urls, retry_count=retry_count, timeout=timeout)\n```\n\nAfter you run the checker you can get all the urls, the passed,\nand failed sets:\n\n```python\nchecker.failed                                                                                                                                                                   \n['https://banana-pudding-doesnt-exist.com']\n\nchecker.passed                                                                                                                                                                   \n['https://www.github.com', 'https://github.com']\n\nchecker.all                                                                                                                                                                      \n['https://www.github.com',\n 'https://github.com',\n 'https://banana-pudding-doesnt-exist.com']\n\nchecker.all                                                                                                                                                                      \n['https://www.github.com',\n 'https://github.com',\n 'https://banana-pudding-doesnt-exist.com']\n\nchecker.count                                                                                                                                                                    \n3\n```\n\nIf you have any questions, please don't hesitate to [open an issue](https://github.com/urlstechie/urlchecker-python).\n\n### Docker\n\nA Docker container is provided if you want to build a base container with urlchecker,\nmeaning that you don't need to install it on your host. You can build the container as\nfollows:\n\n```bash\ndocker build -t urlchecker .\n```\n\nAnd then the entrypoint will expose the urlchecker.\n\n```bash\ndocker run -it urlschecker\n```\n\n## Development\n\n### Organization\n\nThe module is organized as follows:\n\n```\n\u251c\u2500\u2500 client              # command line client\n\u251c\u2500\u2500 main                # functions for supported integrations (e.g., GitHub)\n\u251c\u2500\u2500 core                # core file and url processing tools\n\u2514\u2500\u2500 version.py          # package and versioning\n```\n\nIn the \"client\" folder, for example, the commands that are exposed for the client\n(e.g., check) would named accordingly, e.g., `client/check.py`.\nFunctions for Github are be provided in `main/github.py`. This organization should\nbe fairly straight forward to always find what you are looking for.\n\n## Support\n\nIf you need help, or want to suggest a project for the organization,\nplease [open an issue](https://github.com/urlstechie/urlchecker-python)", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://www.github.com/urlstechie/urlchecker-python", "keywords": "urls,static checking,checking,validation", "license": "LICENSE", "maintainer": "Ayoub Malek, Vanessa Sochat", "maintainer_email": "superkogito@gmail.com, vsochat@stanford.edu", "name": "urlchecker", "package_url": "https://pypi.org/project/urlchecker/", "platform": "", "project_url": "https://pypi.org/project/urlchecker/", "project_urls": {"Homepage": "http://www.github.com/urlstechie/urlchecker-python"}, "release_url": "https://pypi.org/project/urlchecker/0.0.20/", "requires_dist": null, "requires_python": "", "summary": "tool to collect and validate urls over static files (code and documentation)", "version": "0.0.20", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div><img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9e48ce31ebae557458f461b7923965d36abc93e1/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f75726c737465636869652f75726c636865636b65722d707974686f6e2f6d61737465722f646f63732f75726c737465636869652e706e67\"></div>\n<p><a href=\"https://travis-ci.com/urlstechie/urlchecker-python\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ddfcbf4eb04a99c377eb76b4eb4af8f1a6c93373/68747470733a2f2f7472617669732d63692e636f6d2f75726c737465636869652f75726c636865636b65722d707974686f6e2e7376673f6272616e63683d6d6173746572\"></a> <a href=\"https://urlchecker-python.readthedocs.io/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c819e5947b34adc3b7cb39a1b14ac7a9dfa93fcf/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f75726c636865636b65722d707974686f6e2f62616467652f3f76657273696f6e3d6c6174657374\"></a> <a href=\"https://codecov.io/gh/urlstechie/urlchecker-python\" rel=\"nofollow\"><img alt=\"codecov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3c8492de97acb08827796b4a4906f9ee74a2cd84/68747470733a2f2f636f6465636f762e696f2f67682f75726c737465636869652f75726c636865636b65722d707974686f6e2f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a> <a href=\"https://www.python.org/doc/versions/\" rel=\"nofollow\"><img alt=\"Python\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/db80a7c333ab02952105106cf6266762c5fcf5c6/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f707974686f6e2d332e35253230253743253230332e36253230253743253230332e372d626c7565\"></a> <a href=\"https://www.codefactor.io/repository/github/urlstechie/urlchecker-python\" rel=\"nofollow\"><img alt=\"CodeFactor\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/54154860ad348f1dc28b186774b0bdb1cd84e9d8/68747470733a2f2f7777772e636f6465666163746f722e696f2f7265706f7369746f72792f6769746875622f75726c737465636869652f75726c636865636b65722d707974686f6e2f6261646765\"></a> <img alt=\"PyPI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2ddb4a73eab9d8d271ba3173f142ec8bac22fab2/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f75726c636865636b6572\"> <a href=\"https://pepy.tech/project/urlchecker\" rel=\"nofollow\"><img alt=\"Downloads\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4af6162643bedc97480feffe443a7883d2fdec75/68747470733a2f2f706570792e746563682f62616467652f75726c636865636b6572\"></a> <a href=\"https://github.com/urlstechie/urlchecker-python/blob/master/LICENSE\" rel=\"nofollow\"><img alt=\"License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/818f9db6af4f8b43bd92223d443446855b0e8c13/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d627269676874677265656e\"></a></p>\n<h1>urlchecker-python</h1>\n<p>This is a python module to collect urls over static files (code and documentation)\nand then test for and report broken links. If you are interesting in using\nthis as a GitHub action, see <a href=\"https://github.com/urlstechie/urlchecker-action\" rel=\"nofollow\">urlchecker-action</a>. There are also container\nbases available on <a href=\"https://quay.io/repository/urlstechie/urlchecker?tab=tags\" rel=\"nofollow\">quay.io/urlstechie/urlchecker</a>.</p>\n<h2>Module Documentation</h2>\n<p>A detailed documentation of the code is available under <a href=\"https://urlchecker-python.readthedocs.io/en/latest/\" rel=\"nofollow\">urlchecker-python.readthedocs.io</a></p>\n<h2>Usage</h2>\n<h3>Install</h3>\n<p>You can install the urlchecker from <a href=\"https://pypi.org/project/urlchecker\" rel=\"nofollow\">pypi</a>:</p>\n<pre>pip install urlchecker\n</pre>\n<p>or install from the repository directly:</p>\n<pre>git clone https://github.com/urlstechie/urlchecker-python.git\n<span class=\"nb\">cd</span> urlchecker-python\npython setup.py install\n</pre>\n<p>Installation will place a binary, <code>urlchecker</code> in your Python path.</p>\n<pre>$ which urlchecker\n/home/vanessa/anaconda3/bin/urlchecker\n</pre>\n<h3>Check Local Folder</h3>\n<p>Your most likely use case will be to check a local directory with static files (documentation or code)\nfor files. In this case, you can use urlchecker check:</p>\n<pre>$ urlchecker check --help\nusage: urlchecker check <span class=\"o\">[</span>-h<span class=\"o\">]</span> <span class=\"o\">[</span>-b BRANCH<span class=\"o\">]</span> <span class=\"o\">[</span>--subfolder SUBFOLDER<span class=\"o\">]</span> <span class=\"o\">[</span>--cleanup<span class=\"o\">]</span>\n                        <span class=\"o\">[</span>--force-pass<span class=\"o\">]</span> <span class=\"o\">[</span>--no-print<span class=\"o\">]</span> <span class=\"o\">[</span>--file-types FILE_TYPES<span class=\"o\">]</span>\n                        <span class=\"o\">[</span>--files FILES<span class=\"o\">]</span>\n                        <span class=\"o\">[</span>--white-listed-urls WHITE_LISTED_URLS<span class=\"o\">]</span>\n                        <span class=\"o\">[</span>--white-listed-patterns WHITE_LISTED_PATTERNS<span class=\"o\">]</span>\n                        <span class=\"o\">[</span>--white-listed-files WHITE_LISTED_FILES<span class=\"o\">]</span>\n                        <span class=\"o\">[</span>--save SAVE<span class=\"o\">]</span> <span class=\"o\">[</span>--retry-count RETRY_COUNT<span class=\"o\">]</span>\n                        <span class=\"o\">[</span>--timeout TIMEOUT<span class=\"o\">]</span>\n                        path\n\npositional arguments:\n  path                  the <span class=\"nb\">local</span> path or GitHub repository to clone and check\n\noptional arguments:\n  -h, --help            show this <span class=\"nb\">help</span> message and <span class=\"nb\">exit</span>\n  -b BRANCH, --branch BRANCH\n                        <span class=\"k\">if</span> cloning, specify a branch to use <span class=\"o\">(</span>defaults to\n                        master<span class=\"o\">)</span>\n  --subfolder SUBFOLDER\n                        relative subfolder path within path <span class=\"o\">(</span><span class=\"k\">if</span> not specified,\n                        we use root<span class=\"o\">)</span>\n  --cleanup             remove root folder after checking <span class=\"o\">(</span>defaults to False,\n                        no cleaup<span class=\"o\">)</span>\n  --force-pass          force successful pass <span class=\"o\">(</span><span class=\"k\">return</span> code <span class=\"m\">0</span><span class=\"o\">)</span> regardless of\n                        result\n  --no-print            Skip printing results to the screen <span class=\"o\">(</span>defaults to\n                        printing to console<span class=\"o\">)</span>.\n  --file-types FILE_TYPES\n                        comma separated list of file extensions to check\n                        <span class=\"o\">(</span>defaults to .md,.py<span class=\"o\">)</span>\n  --files FILES         comma separated list of exact files or patterns to\n                        check.\n  --white-listed-urls WHITE_LISTED_URLS\n                        comma separated list of white listed urls <span class=\"o\">(</span>no spaces<span class=\"o\">)</span>\n  --white-listed-patterns WHITE_LISTED_PATTERNS\n                        comma separated list of white listed patterns <span class=\"k\">for</span> urls\n                        <span class=\"o\">(</span>no spaces<span class=\"o\">)</span>\n  --white-listed-files WHITE_LISTED_FILES\n                        comma separated list of white listed files and\n                        patterns <span class=\"k\">for</span> files <span class=\"o\">(</span>no spaces<span class=\"o\">)</span>\n  --save SAVE           Path to a csv file to save results to.\n  --retry-count RETRY_COUNT\n                        retry count upon failure <span class=\"o\">(</span>defaults to <span class=\"m\">2</span>, one retry<span class=\"o\">)</span>.\n  --timeout TIMEOUT     timeout <span class=\"o\">(</span>seconds<span class=\"o\">)</span> to provide to the requests library\n                        <span class=\"o\">(</span>defaults to <span class=\"m\">5</span><span class=\"o\">)</span>\n</pre>\n<p>You have a lot of flexibility to define patterns of urls or files to skip,\nalong with the number of retries or timeout (seconds). The most basic usage will\ncheck an entire directory. Let's clone and check the directory of one of the\nmaintainers:</p>\n<pre>git clone https://github.com/SuperKogito/SuperKogito.github.io.git\n<span class=\"nb\">cd</span> SuperKogito.github.io\nurlchecker check .\n\n$ urlchecker check .\n  original path: .\n     final path: /tmp/SuperKogito.github.io\n      subfolder: None\n         branch: master\n        cleanup: False\n     file types: <span class=\"o\">[</span><span class=\"s1\">'.md'</span>, <span class=\"s1\">'.py'</span><span class=\"o\">]</span>\n      print all: True\n url whitetlist: <span class=\"o\">[]</span>\n   url patterns: <span class=\"o\">[]</span>\n  file patterns: <span class=\"o\">[]</span>\n     force pass: False\n    retry count: <span class=\"m\">2</span>\n        timeout: <span class=\"m\">5</span>\n\n /tmp/SuperKogito.github.io/README.md\n ------------------------------------\nhttps://travis-ci.com/SuperKogito/SuperKogito.github.io\nhttps://www.python.org/download/releases/3.0/\nhttps://superkogito.github.io/blog/diabetesML2.html\nhttps://superkogito.github.io/blog/Cryptography.html\nhttp://www.sphinx-doc.org/en/master/\nhttps://github.com/\nhttps://superkogito.github.io/blog/SignalFraming.html\nhttps://superkogito.github.io/blog/VoiceBasedGenderRecognition.html\nhttps://travis-ci.com/SuperKogito/SuperKogito.github.io.svg?branch<span class=\"o\">=</span>master\nhttps://superkogito.github.io/blog/SpectralLeakageWindowing.html\nhttps://superkogito.github.io/blog/Intro.html\nhttps://github.com/SuperKogito/SuperKogito.github.io/workflows/Check%20URLs/badge.svg\nhttps://superkogito.github.io/blog/diabetesML1.html\nhttps://superkogito.github.io/blog/AuthenticatedEncryption.html\nhttps://superKogito.github.io/blog/ffmpegpipe.html\nhttps://superkogito.github.io/blog/Encryption.html\nhttps://superkogito.github.io/blog/NaiveVad.html\n\n /tmp/SuperKogito.github.io/_project/src/postprocessing.py\n ---------------------------------------------------------\nNo urls found.\n...\n\nhttps://github.com/marsbroshok/VAD-python/blob/d74033aa08fbbbcdbd491f6e52a1dfdbbb388eea/vad.py#L64\nhttps://github.com/fgnt/pb_chime5\nhttps://ai.facebook.com/blog/wav2vec-state-of-the-art-speech-recognition-through-self-supervision/\nhttps://corplinguistics.wordpress.com/tag/mandarin/\nhttp://www.cs.tut.fi/~tuomasv/papers/ijcnn_paper_valenti_extended.pdf\nhttp://shachi.org/resources\nhttps://conference.scipy.org/proceedings/scipy2015/pdfs/brian_mcfee.pdf\nhttps://www.dlology.com/blog/simple-speech-keyword-detecting-with-depthwise-separable-convolutions/\nhttps://stackoverflow.com/questions/49197916/how-to-profile-cpu-usage-of-a-python-script\n\n\nDone. All URLS passed.\n</pre>\n<h3>Check GitHub Repository</h3>\n<p>But wouldn't it be easier to not have to clone the repository first?\nOf course! We can specify a GitHub url instead, and add <code>--cleanup</code>\nif we want to clean up the folder after.</p>\n<pre>urlchecker check https://github.com/SuperKogito/SuperKogito.github.io.git\n</pre>\n<p>If you specify any arguments for a white list (or any kind of expected list) make\nsure that you provide a comma separated list <em>without any spaces</em></p>\n<pre><code>urlchecker check --white-listed-files=README.md,_config.yml\n</code></pre>\n<h3>Save Results</h3>\n<p>If you want to save your results to file, perhaps for some kind of record or\nother data analysis, you can provide the <code>--save</code> argument:</p>\n<pre>$ urlchecker check --save results.csv .\n  original path: .\n     final path: /home/vanessa/Desktop/Code/urlstechie/urlchecker-test-repo\n      subfolder: None\n         branch: master\n        cleanup: False\n     file types: <span class=\"o\">[</span><span class=\"s1\">'.md'</span>, <span class=\"s1\">'.py'</span><span class=\"o\">]</span>\n      print all: True\n url whitetlist: <span class=\"o\">[]</span>\n   url patterns: <span class=\"o\">[]</span>\n  file patterns: <span class=\"o\">[]</span>\n     force pass: False\n    retry count: <span class=\"m\">2</span>\n           save: results.csv\n        timeout: <span class=\"m\">5</span>\n\n /home/vanessa/Desktop/Code/urlstechie/urlchecker-test-repo/README.md \n --------------------------------------------------------------------\nNo urls found.\n\n /home/vanessa/Desktop/Code/urlstechie/urlchecker-test-repo/test_files/sample_test_file.py \n -----------------------------------------------------------------------------------------\nhttps://github.com/SuperKogito/URLs-checker/README.md\nhttps://github.com/SuperKogito/URLs-checker/README.md\nhttps://www.google.com/\nhttps://github.com/SuperKogito\n\n /home/vanessa/Desktop/Code/urlstechie/urlchecker-test-repo/test_files/sample_test_file.md \n -----------------------------------------------------------------------------------------\nhttps://github.com/SuperKogito/URLs-checker/blob/master/README.md\nhttps://github.com/SuperKogito/Voice-based-gender-recognition/issues\nhttps://github.com/SuperKogito/spafe/issues/7\nhttps://github.com/SuperKogito/URLs-checker\nhttps://github.com/SuperKogito/URLs-checker/issues\nhttps://github.com/SuperKogito/spafe/issues/4\nhttps://github.com/SuperKogito/URLs-checker/issues/2\nhttps://github.com/SuperKogito/URLs-checker/issues/2\nhttps://github.com/SuperKogito/Voice-based-gender-recognition/issues/1\nhttps://github.com/SuperKogito/spafe/issues/6\nhttps://github.com/SuperKogito/spafe/issues\n...\n\nSaving results to /home/vanessa/Desktop/Code/urlstechie/urlchecker-test-repo/results.csv\n\n\nDone. All URLS passed.\n</pre>\n<p>The file that you save to will include a comma separated value tabular listing\nof the urls, and their result. The result options are \"passed\" and \"failed\"\nand the default header is <code>URL,RESULT</code>. All of these defaults are exposed\nif you want to change them (e.g., using a tab separator or a different header)\nif you call the function from within Python. Here is an example of the default file\nproduced, which should satisfy most use cases:</p>\n<pre><code>URL,RESULT\nhttps://github.com/SuperKogito,passed\nhttps://www.google.com/,passed\nhttps://github.com/SuperKogito/Voice-based-gender-recognition/issues,passed\nhttps://github.com/SuperKogito/Voice-based-gender-recognition,passed\nhttps://github.com/SuperKogito/spafe/issues/4,passed\nhttps://github.com/SuperKogito/Voice-based-gender-recognition/issues/2,passed\nhttps://github.com/SuperKogito/spafe/issues/5,passed\nhttps://github.com/SuperKogito/URLs-checker/blob/master/README.md,passed\nhttps://img.shields.io/,passed\nhttps://github.com/SuperKogito/spafe/,passed\nhttps://github.com/SuperKogito/spafe/issues/3,passed\nhttps://www.google.com/,passed\nhttps://github.com/SuperKogito,passed\nhttps://github.com/SuperKogito/spafe/issues/8,passed\nhttps://github.com/SuperKogito/spafe/issues/7,passed\nhttps://github.com/SuperKogito/Voice-based-gender-recognition/issues/1,passed\nhttps://github.com/SuperKogito/spafe/issues,passed\nhttps://github.com/SuperKogito/URLs-checker/issues,passed\nhttps://github.com/SuperKogito/spafe/issues/2,passed\nhttps://github.com/SuperKogito/URLs-checker,passed\nhttps://github.com/SuperKogito/spafe/issues/6,passed\nhttps://github.com/SuperKogito/spafe/issues/1,passed\nhttps://github.com/SuperKogito/URLs-checker/README.md,failed\nhttps://github.com/SuperKogito/URLs-checker/issues/3,failed\nhttps://none.html,failed\nhttps://github.com/SuperKogito/URLs-checker/issues/2,failed\nhttps://github.com/SuperKogito/URLs-checker/README.md,failed\nhttps://github.com/SuperKogito/URLs-checker/issues/1,failed\nhttps://github.com/SuperKogito/URLs-checker/issues/4,failed\n</code></pre>\n<h3>Usage from Python</h3>\n<h4>Checking a Path</h4>\n<p>If you want to check a list of urls outside of the provided client, this is fairly easy to do!\nLet's say we have a path, our present working directory, and we want to check\n.py and .md files (the default)</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">urlchecker.core.check</span> <span class=\"kn\">import</span> <span class=\"n\">UrlChecker</span>\n<span class=\"kn\">import</span> <span class=\"nn\">os</span>\n\n<span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">getcwd</span><span class=\"p\">()</span>\n<span class=\"n\">checker</span> <span class=\"o\">=</span> <span class=\"n\">UrlChecker</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">)</span>    \n<span class=\"c1\"># UrlChecker:/home/vanessa/Desktop/Code/urlstechie/urlchecker-python</span>\n</pre>\n<p>And of course you can provide more substantial arguments to derive the original\nfile list:</p>\n<pre><span class=\"n\">checker</span> <span class=\"o\">=</span> <span class=\"n\">UrlChecker</span><span class=\"p\">(</span>\n    <span class=\"n\">path</span><span class=\"o\">=</span><span class=\"n\">path</span><span class=\"p\">,</span>\n    <span class=\"n\">file_types</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\".md\"</span><span class=\"p\">,</span> <span class=\"s2\">\".py\"</span><span class=\"p\">,</span> <span class=\"s2\">\".rst\"</span><span class=\"p\">],</span>\n    <span class=\"n\">include_patterns</span><span class=\"o\">=</span><span class=\"p\">[],</span>\n    <span class=\"n\">white_listed_files</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"README.md\"</span><span class=\"p\">,</span> <span class=\"s2\">\"LICENSE\"</span><span class=\"p\">],</span>\n    <span class=\"n\">print_all</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n</pre>\n<p>I can then run the checker like this:</p>\n<pre><span class=\"n\">checker</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n</pre>\n<p>Or with more customization of white listing urls:</p>\n<pre><span class=\"n\">checker</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span>\n    <span class=\"n\">white_listed_urls</span><span class=\"o\">=</span><span class=\"n\">white_listed_urls</span><span class=\"p\">,</span>\n    <span class=\"n\">white_listed_patterns</span><span class=\"o\">=</span><span class=\"n\">white_listed_patterns</span><span class=\"p\">,</span>\n    <span class=\"n\">retry_count</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">,</span>\n    <span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n</pre>\n<p>You'll get the results object returned, which is also available at <code>checker.results</code>,\na simple dictionary with \"passed\" and \"failed\" keys to show passes and fails across\nall files.</p>\n<pre><span class=\"p\">{</span><span class=\"s1\">'passed'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'https://github.com/SuperKogito/spafe/issues/4'</span><span class=\"p\">,</span>\n  <span class=\"s1\">'http://shachi.org/resources'</span><span class=\"p\">,</span>\n  <span class=\"s1\">'https://superkogito.github.io/blog/SpectralLeakageWindowing.html'</span><span class=\"p\">,</span>\n  <span class=\"s1\">'https://superkogito.github.io/figures/fig4.html'</span><span class=\"p\">,</span>\n  <span class=\"s1\">'https://github.com/urlstechie/urlchecker-test-repo'</span><span class=\"p\">,</span>\n  <span class=\"s1\">'https://www.google.com/'</span><span class=\"p\">,</span>\n  <span class=\"o\">...</span>\n  <span class=\"s1\">'https://github.com/SuperKogito'</span><span class=\"p\">,</span>\n  <span class=\"s1\">'https://img.shields.io/'</span><span class=\"p\">,</span>\n  <span class=\"s1\">'https://www.google.com/'</span><span class=\"p\">,</span>\n  <span class=\"s1\">'https://docs.python.org/2'</span><span class=\"p\">],</span>\n <span class=\"s1\">'failed'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'https://github.com/urlstechie/urlschecker-python/tree/master'</span><span class=\"p\">,</span>\n  <span class=\"s1\">'https://github.com/SuperKogito/Voice-based-gender-recognition,passed'</span><span class=\"p\">,</span>\n  <span class=\"s1\">'https://github.com/SuperKogito/URLs-checker/README.md'</span><span class=\"p\">,</span>\n   <span class=\"o\">...</span>\n  <span class=\"s1\">'https://superkogito.github.io/tables'</span><span class=\"p\">,</span>\n  <span class=\"s1\">'https://github.com/SuperKogito/URLs-checker/issues/2'</span><span class=\"p\">,</span>\n  <span class=\"s1\">'https://github.com/SuperKogito/URLs-checker/README.md'</span><span class=\"p\">,</span>\n  <span class=\"s1\">'https://github.com/SuperKogito/URLs-checker/issues/4'</span><span class=\"p\">,</span>\n  <span class=\"s1\">'https://github.com/SuperKogito/URLs-checker/issues/3'</span><span class=\"p\">,</span>\n  <span class=\"s1\">'https://github.com/SuperKogito/URLs-checker/issues/1'</span><span class=\"p\">,</span>\n  <span class=\"s1\">'https://none.html'</span><span class=\"p\">]}</span>\n</pre>\n<p>You can look at <code>checker.checks</code>, which is a dictionary of result objects,\norganized by the filename:</p>\n<pre><span class=\"k\">for</span> <span class=\"n\">file_name</span><span class=\"p\">,</span> <span class=\"n\">result</span> <span class=\"ow\">in</span> <span class=\"n\">checker</span><span class=\"o\">.</span><span class=\"n\">checks</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span> \n    <span class=\"nb\">print</span><span class=\"p\">()</span> \n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span> \n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Total Results: </span><span class=\"si\">%s</span><span class=\"s2\"> \"</span> <span class=\"o\">%</span> <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">)</span> \n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Total Failed: </span><span class=\"si\">%s</span><span class=\"s2\">\"</span> <span class=\"o\">%</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">failed</span><span class=\"p\">))</span> \n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Total Passed: </span><span class=\"si\">%s</span><span class=\"s2\">\"</span> <span class=\"o\">%</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">passed</span><span class=\"p\">))</span> \n\n<span class=\"o\">...</span>\n\n<span class=\"n\">UrlCheck</span><span class=\"p\">:</span><span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">vanessa</span><span class=\"o\">/</span><span class=\"n\">Desktop</span><span class=\"o\">/</span><span class=\"n\">Code</span><span class=\"o\">/</span><span class=\"n\">urlstechie</span><span class=\"o\">/</span><span class=\"n\">urlchecker</span><span class=\"o\">-</span><span class=\"n\">python</span><span class=\"o\">/</span><span class=\"n\">tests</span><span class=\"o\">/</span><span class=\"n\">test_files</span><span class=\"o\">/</span><span class=\"n\">sample_test_file</span><span class=\"o\">.</span><span class=\"n\">md</span>\n<span class=\"n\">Total</span> <span class=\"n\">Results</span><span class=\"p\">:</span> <span class=\"mi\">26</span> \n<span class=\"n\">Total</span> <span class=\"n\">Failed</span><span class=\"p\">:</span> <span class=\"mi\">6</span>\n<span class=\"n\">Total</span> <span class=\"n\">Passed</span><span class=\"p\">:</span> <span class=\"mi\">20</span>\n\n<span class=\"n\">UrlCheck</span><span class=\"p\">:</span><span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">vanessa</span><span class=\"o\">/</span><span class=\"n\">Desktop</span><span class=\"o\">/</span><span class=\"n\">Code</span><span class=\"o\">/</span><span class=\"n\">urlstechie</span><span class=\"o\">/</span><span class=\"n\">urlchecker</span><span class=\"o\">-</span><span class=\"n\">python</span><span class=\"o\">/.</span><span class=\"n\">pytest_cache</span><span class=\"o\">/</span><span class=\"n\">README</span><span class=\"o\">.</span><span class=\"n\">md</span>\n<span class=\"n\">Total</span> <span class=\"n\">Results</span><span class=\"p\">:</span> <span class=\"mi\">1</span> \n<span class=\"n\">Total</span> <span class=\"n\">Failed</span><span class=\"p\">:</span> <span class=\"mi\">0</span>\n<span class=\"n\">Total</span> <span class=\"n\">Passed</span><span class=\"p\">:</span> <span class=\"mi\">1</span>\n\n<span class=\"n\">UrlCheck</span><span class=\"p\">:</span><span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">vanessa</span><span class=\"o\">/</span><span class=\"n\">Desktop</span><span class=\"o\">/</span><span class=\"n\">Code</span><span class=\"o\">/</span><span class=\"n\">urlstechie</span><span class=\"o\">/</span><span class=\"n\">urlchecker</span><span class=\"o\">-</span><span class=\"n\">python</span><span class=\"o\">/.</span><span class=\"n\">eggs</span><span class=\"o\">/</span><span class=\"n\">pytest_runner</span><span class=\"o\">-</span><span class=\"mf\">5.2</span><span class=\"o\">-</span><span class=\"n\">py3</span><span class=\"o\">.</span><span class=\"mf\">7.</span><span class=\"n\">egg</span><span class=\"o\">/</span><span class=\"n\">ptr</span><span class=\"o\">.</span><span class=\"n\">py</span>\n<span class=\"n\">Total</span> <span class=\"n\">Results</span><span class=\"p\">:</span> <span class=\"mi\">0</span> \n<span class=\"n\">Total</span> <span class=\"n\">Failed</span><span class=\"p\">:</span> <span class=\"mi\">0</span>\n<span class=\"n\">Total</span> <span class=\"n\">Passed</span><span class=\"p\">:</span> <span class=\"mi\">0</span>\n\n<span class=\"n\">UrlCheck</span><span class=\"p\">:</span><span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">vanessa</span><span class=\"o\">/</span><span class=\"n\">Desktop</span><span class=\"o\">/</span><span class=\"n\">Code</span><span class=\"o\">/</span><span class=\"n\">urlstechie</span><span class=\"o\">/</span><span class=\"n\">urlchecker</span><span class=\"o\">-</span><span class=\"n\">python</span><span class=\"o\">/</span><span class=\"n\">docs</span><span class=\"o\">/</span><span class=\"n\">source</span><span class=\"o\">/</span><span class=\"n\">conf</span><span class=\"o\">.</span><span class=\"n\">py</span>\n<span class=\"n\">Total</span> <span class=\"n\">Results</span><span class=\"p\">:</span> <span class=\"mi\">3</span> \n<span class=\"n\">Total</span> <span class=\"n\">Failed</span><span class=\"p\">:</span> <span class=\"mi\">0</span>\n<span class=\"n\">Total</span> <span class=\"n\">Passed</span><span class=\"p\">:</span> <span class=\"mi\">3</span>\n</pre>\n<p>For any result object, you can print the list of passed, falied, white listed,\nor all the urls.</p>\n<pre><span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">all</span>                                                                                                                                                                       \n<span class=\"p\">[</span><span class=\"s1\">'https://www.sphinx-doc.org/en/master/usage/configuration.html'</span><span class=\"p\">,</span>\n <span class=\"s1\">'https://docs.python.org/3'</span><span class=\"p\">,</span>\n <span class=\"s1\">'https://docs.python.org/2'</span><span class=\"p\">]</span>\n\n<span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">failed</span>                                                                                                                                                                    \n<span class=\"p\">[]</span>\n\n<span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">white_listed</span>\n<span class=\"p\">[]</span>\n\n<span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">passed</span>                                                                                                                                                                    \n<span class=\"p\">[</span><span class=\"s1\">'https://www.sphinx-doc.org/en/master/usage/configuration.html'</span><span class=\"p\">,</span>\n <span class=\"s1\">'https://docs.python.org/3'</span><span class=\"p\">,</span>\n <span class=\"s1\">'https://docs.python.org/2'</span><span class=\"p\">]</span>\n\n<span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">count</span>\n<span class=\"mi\">3</span>\n</pre>\n<h4>Checking a List of URls</h4>\n<p>If you start with a list of urls you want to check, you can do that too!</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">urlchecker.core.urlproc</span> <span class=\"kn\">import</span> <span class=\"n\">UrlCheckResult</span>\n\n<span class=\"n\">urls</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'https://www.github.com'</span><span class=\"p\">,</span> <span class=\"s2\">\"https://github.com\"</span><span class=\"p\">,</span> <span class=\"s2\">\"https://banana-pudding-doesnt-exist.com\"</span><span class=\"p\">]</span>\n\n<span class=\"c1\"># Instantiate an empty checker to extract urls</span>\n<span class=\"n\">checker</span> <span class=\"o\">=</span> <span class=\"n\">UrlCheckResult</span><span class=\"p\">()</span>\n<span class=\"n\">File</span> <span class=\"n\">name</span> <span class=\"kc\">None</span> <span class=\"ow\">is</span> <span class=\"n\">undefined</span> <span class=\"ow\">or</span> <span class=\"n\">does</span> <span class=\"ow\">not</span> <span class=\"n\">exist</span><span class=\"p\">,</span> <span class=\"n\">skipping</span> <span class=\"n\">extraction</span><span class=\"o\">.</span>\n</pre>\n<p>If you provied a file name, the urls would be extracted for you.</p>\n<pre><span class=\"n\">checker</span> <span class=\"o\">=</span> <span class=\"n\">UrlCheckResult</span><span class=\"p\">(</span>\n    <span class=\"n\">file_name</span><span class=\"o\">=</span><span class=\"n\">file_name</span><span class=\"p\">,</span>\n    <span class=\"n\">white_listed_patterns</span><span class=\"o\">=</span><span class=\"n\">white_listed_patterns</span><span class=\"p\">,</span>\n    <span class=\"n\">white_listed_urls</span><span class=\"o\">=</span><span class=\"n\">white_listed_urls</span><span class=\"p\">,</span>\n    <span class=\"n\">print_all</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">print_all</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n</pre>\n<p>or you can provide all the parameters without the filename:</p>\n<pre><span class=\"n\">checker</span> <span class=\"o\">=</span> <span class=\"n\">UrlCheckResult</span><span class=\"p\">(</span>\n    <span class=\"n\">white_listed_patterns</span><span class=\"o\">=</span><span class=\"n\">white_listed_patterns</span><span class=\"p\">,</span>\n    <span class=\"n\">white_listed_urls</span><span class=\"o\">=</span><span class=\"n\">white_listed_urls</span><span class=\"p\">,</span>\n    <span class=\"n\">print_all</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">print_all</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n</pre>\n<p>If you don't provide the file_name to check urls, you can give the urls\nyou defined previously directly to the <code>check_urls</code> function:</p>\n<pre><span class=\"n\">checker</span><span class=\"o\">.</span><span class=\"n\">check_urls</span><span class=\"p\">(</span><span class=\"n\">urls</span><span class=\"p\">)</span>\n\n<span class=\"n\">https</span><span class=\"p\">:</span><span class=\"o\">//</span><span class=\"n\">www</span><span class=\"o\">.</span><span class=\"n\">github</span><span class=\"o\">.</span><span class=\"n\">com</span>\n<span class=\"n\">https</span><span class=\"p\">:</span><span class=\"o\">//</span><span class=\"n\">github</span><span class=\"o\">.</span><span class=\"n\">com</span>\n<span class=\"n\">HTTPSConnectionPool</span><span class=\"p\">(</span><span class=\"n\">host</span><span class=\"o\">=</span><span class=\"s1\">'banana-pudding-doesnt-exist.com'</span><span class=\"p\">,</span> <span class=\"n\">port</span><span class=\"o\">=</span><span class=\"mi\">443</span><span class=\"p\">):</span> <span class=\"n\">Max</span> <span class=\"n\">retries</span> <span class=\"n\">exceeded</span> <span class=\"k\">with</span> <span class=\"n\">url</span><span class=\"p\">:</span> <span class=\"o\">/</span> <span class=\"p\">(</span><span class=\"n\">Caused</span> <span class=\"n\">by</span> <span class=\"n\">NewConnectionError</span><span class=\"p\">(</span><span class=\"s1\">'&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x7f989abdfa10&gt;: Failed to establish a new connection: [Errno -2] Name or service not known'</span><span class=\"p\">))</span>\n<span class=\"n\">https</span><span class=\"p\">:</span><span class=\"o\">//</span><span class=\"n\">banana</span><span class=\"o\">-</span><span class=\"n\">pudding</span><span class=\"o\">-</span><span class=\"n\">doesnt</span><span class=\"o\">-</span><span class=\"n\">exist</span><span class=\"o\">.</span><span class=\"n\">com</span>\n</pre>\n<p>And of course you can specify a timeout and retry:</p>\n<pre><span class=\"n\">checker</span><span class=\"o\">.</span><span class=\"n\">check_urls</span><span class=\"p\">(</span><span class=\"n\">urls</span><span class=\"p\">,</span> <span class=\"n\">retry_count</span><span class=\"o\">=</span><span class=\"n\">retry_count</span><span class=\"p\">,</span> <span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"n\">timeout</span><span class=\"p\">)</span>\n</pre>\n<p>After you run the checker you can get all the urls, the passed,\nand failed sets:</p>\n<pre><span class=\"n\">checker</span><span class=\"o\">.</span><span class=\"n\">failed</span>                                                                                                                                                                   \n<span class=\"p\">[</span><span class=\"s1\">'https://banana-pudding-doesnt-exist.com'</span><span class=\"p\">]</span>\n\n<span class=\"n\">checker</span><span class=\"o\">.</span><span class=\"n\">passed</span>                                                                                                                                                                   \n<span class=\"p\">[</span><span class=\"s1\">'https://www.github.com'</span><span class=\"p\">,</span> <span class=\"s1\">'https://github.com'</span><span class=\"p\">]</span>\n\n<span class=\"n\">checker</span><span class=\"o\">.</span><span class=\"n\">all</span>                                                                                                                                                                      \n<span class=\"p\">[</span><span class=\"s1\">'https://www.github.com'</span><span class=\"p\">,</span>\n <span class=\"s1\">'https://github.com'</span><span class=\"p\">,</span>\n <span class=\"s1\">'https://banana-pudding-doesnt-exist.com'</span><span class=\"p\">]</span>\n\n<span class=\"n\">checker</span><span class=\"o\">.</span><span class=\"n\">all</span>                                                                                                                                                                      \n<span class=\"p\">[</span><span class=\"s1\">'https://www.github.com'</span><span class=\"p\">,</span>\n <span class=\"s1\">'https://github.com'</span><span class=\"p\">,</span>\n <span class=\"s1\">'https://banana-pudding-doesnt-exist.com'</span><span class=\"p\">]</span>\n\n<span class=\"n\">checker</span><span class=\"o\">.</span><span class=\"n\">count</span>                                                                                                                                                                    \n<span class=\"mi\">3</span>\n</pre>\n<p>If you have any questions, please don't hesitate to <a href=\"https://github.com/urlstechie/urlchecker-python\" rel=\"nofollow\">open an issue</a>.</p>\n<h3>Docker</h3>\n<p>A Docker container is provided if you want to build a base container with urlchecker,\nmeaning that you don't need to install it on your host. You can build the container as\nfollows:</p>\n<pre>docker build -t urlchecker .\n</pre>\n<p>And then the entrypoint will expose the urlchecker.</p>\n<pre>docker run -it urlschecker\n</pre>\n<h2>Development</h2>\n<h3>Organization</h3>\n<p>The module is organized as follows:</p>\n<pre><code>\u251c\u2500\u2500 client              # command line client\n\u251c\u2500\u2500 main                # functions for supported integrations (e.g., GitHub)\n\u251c\u2500\u2500 core                # core file and url processing tools\n\u2514\u2500\u2500 version.py          # package and versioning\n</code></pre>\n<p>In the \"client\" folder, for example, the commands that are exposed for the client\n(e.g., check) would named accordingly, e.g., <code>client/check.py</code>.\nFunctions for Github are be provided in <code>main/github.py</code>. This organization should\nbe fairly straight forward to always find what you are looking for.</p>\n<h2>Support</h2>\n<p>If you need help, or want to suggest a project for the organization,\nplease <a href=\"https://github.com/urlstechie/urlchecker-python\" rel=\"nofollow\">open an issue</a></p>\n\n          </div>"}, "last_serial": 7071344, "releases": {"0.0.0": [{"comment_text": "", "digests": {"md5": "c17542e4259ac4efb1799ad0ffe7cdf0", "sha256": "92e3c9c563d069994627300a9bc92aa8d667e12ba8b708a6cf77414237ea813b"}, "downloads": -1, "filename": "urlchecker-0.0.0-py3.7.egg", "has_sig": false, "md5_digest": "c17542e4259ac4efb1799ad0ffe7cdf0", "packagetype": "bdist_egg", "python_version": "3.7", "requires_python": null, "size": 39957, "upload_time": "2020-03-20T22:15:31", "upload_time_iso_8601": "2020-03-20T22:15:31.547847Z", "url": "https://files.pythonhosted.org/packages/fe/90/1198a63af7c82a4ee22c930384f667d0d7400de7921333213dae8809da38/urlchecker-0.0.0-py3.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "2417b2d11a7cb96e28318351ff458ccf", "sha256": "b9da5d9cbfe472956080833f47d2aea90eb7859cd646a08076e26f3a43c88532"}, "downloads": -1, "filename": "urlchecker-0.0.0.tar.gz", "has_sig": false, "md5_digest": "2417b2d11a7cb96e28318351ff458ccf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17551, "upload_time": "2020-03-20T22:15:33", "upload_time_iso_8601": "2020-03-20T22:15:33.561061Z", "url": "https://files.pythonhosted.org/packages/5f/8c/7fce6c01c5dc2c00cfbd05e1be17fefbca3c345190cf1cea057847dcac1e/urlchecker-0.0.0.tar.gz", "yanked": false}], "0.0.1": [{"comment_text": "", "digests": {"md5": "f7454966d909d9e7064e11d386a15296", "sha256": "fdee31be4766a803ce60e464fc08b57431f8fd98c66483c4e34427354123973d"}, "downloads": -1, "filename": "urlchecker-0.0.1.tar.gz", "has_sig": false, "md5_digest": "f7454966d909d9e7064e11d386a15296", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17488, "upload_time": "2020-03-20T23:34:01", "upload_time_iso_8601": "2020-03-20T23:34:01.649067Z", "url": "https://files.pythonhosted.org/packages/0c/c2/bd07ea5c468a82ea69e072f853e2b03984e7ab8de5e2d1b52c50cc68ed6b/urlchecker-0.0.1.tar.gz", "yanked": false}], "0.0.11": [{"comment_text": "", "digests": {"md5": "cdac7d5e77be626857fe8341ba8c7ac8", "sha256": "e5774e9cd41c4acc7275f222651551d0b15e2da3165d270792b119a1caefac88"}, "downloads": -1, "filename": "urlchecker-0.0.11.tar.gz", "has_sig": false, "md5_digest": "cdac7d5e77be626857fe8341ba8c7ac8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17636, "upload_time": "2020-03-21T21:43:13", "upload_time_iso_8601": "2020-03-21T21:43:13.837515Z", "url": "https://files.pythonhosted.org/packages/38/13/8199ad92af76684b737dbcc784e9321a26a5102644a4cb887f7f05977071/urlchecker-0.0.11.tar.gz", "yanked": false}], "0.0.12": [{"comment_text": "", "digests": {"md5": "31e4b3546c4260981b4733824a39fda2", "sha256": "6e8731f30916852ecf7fefee1c40048239cefb18b24d83bf1204314e00ae0885"}, "downloads": -1, "filename": "urlchecker-0.0.12.tar.gz", "has_sig": false, "md5_digest": "31e4b3546c4260981b4733824a39fda2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20258, "upload_time": "2020-03-25T22:23:06", "upload_time_iso_8601": "2020-03-25T22:23:06.529960Z", "url": "https://files.pythonhosted.org/packages/9a/1b/746ee917f7cfc628ac746998621956c95e243ae14e2ad4ba190eae93b326/urlchecker-0.0.12.tar.gz", "yanked": false}], "0.0.13": [{"comment_text": "", "digests": {"md5": "567995464ac7b36baad93391e8d6bf4a", "sha256": "90c8f50c8032615619350ea83930adf57ee5b07fc0101ae5865aae4031077364"}, "downloads": -1, "filename": "urlchecker-0.0.13-py3-none-any.whl", "has_sig": false, "md5_digest": "567995464ac7b36baad93391e8d6bf4a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 23605, "upload_time": "2020-04-05T12:59:05", "upload_time_iso_8601": "2020-04-05T12:59:05.798934Z", "url": "https://files.pythonhosted.org/packages/2b/bb/eae94b789b884ff6f35885c3a20985c102534afb8a7939ec79b8cdaf528f/urlchecker-0.0.13-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d464c8f84aacfdf2aae56bfc1bcf75e4", "sha256": "9a887fcc0c999bc1a4157fcb140984f46c3fad597a027aaab607365b4106f84c"}, "downloads": -1, "filename": "urlchecker-0.0.13.tar.gz", "has_sig": false, "md5_digest": "d464c8f84aacfdf2aae56bfc1bcf75e4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20255, "upload_time": "2020-03-26T15:41:35", "upload_time_iso_8601": "2020-03-26T15:41:35.209726Z", "url": "https://files.pythonhosted.org/packages/7b/ed/946b6a444d3a6b5af45c37ff32a4d8362947cb55837e008de663ddc938c5/urlchecker-0.0.13.tar.gz", "yanked": false}], "0.0.15": [{"comment_text": "", "digests": {"md5": "07875f850ea28df8bc8b312d1b090f5f", "sha256": "e284bd4f9ef4f3390be804cd52f62f68f50fa9fa0e5e89613ede11236e56ae2a"}, "downloads": -1, "filename": "urlchecker-0.0.15.tar.gz", "has_sig": false, "md5_digest": "07875f850ea28df8bc8b312d1b090f5f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20217, "upload_time": "2020-04-05T17:02:02", "upload_time_iso_8601": "2020-04-05T17:02:02.057062Z", "url": "https://files.pythonhosted.org/packages/1d/a9/f069bc957e828fb010466012fcbfbd9a82726766f6aec64d5fd3bdfc4206/urlchecker-0.0.15.tar.gz", "yanked": false}], "0.0.16": [{"comment_text": "", "digests": {"md5": "765f822683740ebb6876aea0176a2b53", "sha256": "8bac09f44fdd645c1447e8674e226ff9bd08917264bccc4a921a0c8394deeec4"}, "downloads": -1, "filename": "urlchecker-0.0.16.tar.gz", "has_sig": false, "md5_digest": "765f822683740ebb6876aea0176a2b53", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20519, "upload_time": "2020-04-10T20:14:39", "upload_time_iso_8601": "2020-04-10T20:14:39.392871Z", "url": "https://files.pythonhosted.org/packages/b2/1f/88970c242b157a0e0c118cf35623c15acdace797d7ab758c5ada9495bcde/urlchecker-0.0.16.tar.gz", "yanked": false}], "0.0.17": [{"comment_text": "", "digests": {"md5": "48ddabdfb9c6954e3f1ff84b2c0d1588", "sha256": "b3136b186a6ef3aca34808f7e1786e14ec8aecf4aeb60e2639dca89a2cdde387"}, "downloads": -1, "filename": "urlchecker-0.0.17.tar.gz", "has_sig": false, "md5_digest": "48ddabdfb9c6954e3f1ff84b2c0d1588", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20530, "upload_time": "2020-04-10T21:04:24", "upload_time_iso_8601": "2020-04-10T21:04:24.126071Z", "url": "https://files.pythonhosted.org/packages/a6/9d/b7db3549c0ce9e9965af94c06a2236ba017920f3ead059311c3a94931aa0/urlchecker-0.0.17.tar.gz", "yanked": false}], "0.0.18": [{"comment_text": "", "digests": {"md5": "9707f11bb2516a4c5b78d928ea64da06", "sha256": "0ba47ec2214b85e942fe821cc315f588cbc9cd21b4d01b99ef9c66b3d07b9044"}, "downloads": -1, "filename": "urlchecker-0.0.18.tar.gz", "has_sig": false, "md5_digest": "9707f11bb2516a4c5b78d928ea64da06", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24729, "upload_time": "2020-04-12T20:09:09", "upload_time_iso_8601": "2020-04-12T20:09:09.977524Z", "url": "https://files.pythonhosted.org/packages/8f/ed/d13a9fbd7d4924d242f715f13254141403002fbfd2459e234916a43450a8/urlchecker-0.0.18.tar.gz", "yanked": false}], "0.0.19": [{"comment_text": "", "digests": {"md5": "0037179b2eb5f4962627d1084741029d", "sha256": "69bfad916667df10c4980f8475c95cbfd41982e0d7216594843475ea4ed1e38d"}, "downloads": -1, "filename": "urlchecker-0.0.19.tar.gz", "has_sig": false, "md5_digest": "0037179b2eb5f4962627d1084741029d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25017, "upload_time": "2020-04-17T15:57:33", "upload_time_iso_8601": "2020-04-17T15:57:33.233774Z", "url": "https://files.pythonhosted.org/packages/2f/58/d4dc5cb7ac89a361c852553c82c4a07abc41732369a908d34f3f6912f4ab/urlchecker-0.0.19.tar.gz", "yanked": false}], "0.0.20": [{"comment_text": "", "digests": {"md5": "db1876b96227cf6c33a9e2d531c1cee8", "sha256": "6d8adbc335d6043bcfcb60b5cd8013730185fbc3aecdefffab994ba1ae61536a"}, "downloads": -1, "filename": "urlchecker-0.0.20.tar.gz", "has_sig": false, "md5_digest": "db1876b96227cf6c33a9e2d531c1cee8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25226, "upload_time": "2020-04-21T21:28:49", "upload_time_iso_8601": "2020-04-21T21:28:49.014325Z", "url": "https://files.pythonhosted.org/packages/58/86/f4262e7dc0423edd3c86eabee3d1d7314a49ff0b2bf3aab8fd20565ad4cb/urlchecker-0.0.20.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "db1876b96227cf6c33a9e2d531c1cee8", "sha256": "6d8adbc335d6043bcfcb60b5cd8013730185fbc3aecdefffab994ba1ae61536a"}, "downloads": -1, "filename": "urlchecker-0.0.20.tar.gz", "has_sig": false, "md5_digest": "db1876b96227cf6c33a9e2d531c1cee8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25226, "upload_time": "2020-04-21T21:28:49", "upload_time_iso_8601": "2020-04-21T21:28:49.014325Z", "url": "https://files.pythonhosted.org/packages/58/86/f4262e7dc0423edd3c86eabee3d1d7314a49ff0b2bf3aab8fd20565ad4cb/urlchecker-0.0.20.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:39:27 2020"}