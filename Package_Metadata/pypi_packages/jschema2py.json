{"info": {"author": "Jacopo De Luca", "author_email": "jacopo.delu@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3"], "description": "# JSchema2py #\nJSchema2py is able to generate python classes starting from JSONSchema and provides the automatic support for types\nand constraints checking.\n\n## Installation\nThe package can be installed through pip:\n\n    $ pip install jschema2py\n\nor downloaded from [GitHub](https://github.com/jacopodl/jschema2py).\n\n## Examples\nFor example, given the following schema:\n```json\n{\n  \"title\": \"UserInfo\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"name\": {\n      \"type\": \"string\",\n      \"pattern\": \"^[^a-z0-9]\"\n    },\n    \"userName\": {\n      \"type\": \"string\"\n    },\n    \"age\": {\n      \"type\": \"integer\",\n      \"minimum\": 0,\n      \"maximum\": 100\n    }\n  }\n}\n```\njschema2py can easily convert it into python class in this way (Assume here that the schema is stored into variable \ncalled schema):\n```python\nfrom jschema2py import build_class\nUserInfo = build_class(schema)\nuser = UserInfo()\nuser.name = \"Jacopo\"\nuser.userName = \"JDL\"\nuser.age = 24\nprint(user)\n```\nvalidation will be performed on the object manipulation:\n```python\nuser.name = \"jacopo\" # raise ConstraintError (pattern: ^[^a-z0-9])\nuser.age = \"24\" # raise TypeError\n```\nThe object can be serialized into a JSON document:\n```python\njsdoc = str(user)\n```\n### Accessing generated classes\nIf one of the property of the schema refers to another object, you can access the class that represents the referred \nobject by using method get_class:\n```json\n{\n  \"title\": \"Nested\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"inner\": {\n      \"title\": \"Inner\",\n      \"type\": \"object\",\n      \"properties\": {\n        \"string\": {\n          \"type\": \"string\",\n          \"default\": \"I'm inner!\"\n        }\n      }\n    }\n  }\n}\n```\n```python\nfrom jschema2py import build_class\nNested = build_class(schema)\nnested = Nested()\nnested.inner = nested.get_class(\"inner\")() # Gets the class associated with the property \"inner\" \nprint(nested.inner.string)\n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/jacopodl/jschema2py", "keywords": "jschema2py,json,schema,jsonschema,library,python3", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "jschema2py", "package_url": "https://pypi.org/project/jschema2py/", "platform": "", "project_url": "https://pypi.org/project/jschema2py/", "project_urls": {"Homepage": "https://github.com/jacopodl/jschema2py"}, "release_url": "https://pypi.org/project/jschema2py/0.1.0/", "requires_dist": null, "requires_python": "", "summary": "jsonschema to python class converter", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>JSchema2py</h1>\n<p>JSchema2py is able to generate python classes starting from JSONSchema and provides the automatic support for types\nand constraints checking.</p>\n<h2>Installation</h2>\n<p>The package can be installed through pip:</p>\n<pre><code>$ pip install jschema2py\n</code></pre>\n<p>or downloaded from <a href=\"https://github.com/jacopodl/jschema2py\" rel=\"nofollow\">GitHub</a>.</p>\n<h2>Examples</h2>\n<p>For example, given the following schema:</p>\n<pre><span class=\"p\">{</span>\n  <span class=\"nt\">\"title\"</span><span class=\"p\">:</span> <span class=\"s2\">\"UserInfo\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"object\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"properties\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"nt\">\"name\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n      <span class=\"nt\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"string\"</span><span class=\"p\">,</span>\n      <span class=\"nt\">\"pattern\"</span><span class=\"p\">:</span> <span class=\"s2\">\"^[^a-z0-9]\"</span>\n    <span class=\"p\">},</span>\n    <span class=\"nt\">\"userName\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n      <span class=\"nt\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"string\"</span>\n    <span class=\"p\">},</span>\n    <span class=\"nt\">\"age\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n      <span class=\"nt\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"integer\"</span><span class=\"p\">,</span>\n      <span class=\"nt\">\"minimum\"</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n      <span class=\"nt\">\"maximum\"</span><span class=\"p\">:</span> <span class=\"mi\">100</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n<p>jschema2py can easily convert it into python class in this way (Assume here that the schema is stored into variable\ncalled schema):</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">jschema2py</span> <span class=\"kn\">import</span> <span class=\"n\">build_class</span>\n<span class=\"n\">UserInfo</span> <span class=\"o\">=</span> <span class=\"n\">build_class</span><span class=\"p\">(</span><span class=\"n\">schema</span><span class=\"p\">)</span>\n<span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"n\">UserInfo</span><span class=\"p\">()</span>\n<span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s2\">\"Jacopo\"</span>\n<span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">userName</span> <span class=\"o\">=</span> <span class=\"s2\">\"JDL\"</span>\n<span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">age</span> <span class=\"o\">=</span> <span class=\"mi\">24</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"p\">)</span>\n</pre>\n<p>validation will be performed on the object manipulation:</p>\n<pre><span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s2\">\"jacopo\"</span> <span class=\"c1\"># raise ConstraintError (pattern: ^[^a-z0-9])</span>\n<span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">age</span> <span class=\"o\">=</span> <span class=\"s2\">\"24\"</span> <span class=\"c1\"># raise TypeError</span>\n</pre>\n<p>The object can be serialized into a JSON document:</p>\n<pre><span class=\"n\">jsdoc</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"p\">)</span>\n</pre>\n<h3>Accessing generated classes</h3>\n<p>If one of the property of the schema refers to another object, you can access the class that represents the referred\nobject by using method get_class:</p>\n<pre><span class=\"p\">{</span>\n  <span class=\"nt\">\"title\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Nested\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"object\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"properties\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"nt\">\"inner\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n      <span class=\"nt\">\"title\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Inner\"</span><span class=\"p\">,</span>\n      <span class=\"nt\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"object\"</span><span class=\"p\">,</span>\n      <span class=\"nt\">\"properties\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"nt\">\"string\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n          <span class=\"nt\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"string\"</span><span class=\"p\">,</span>\n          <span class=\"nt\">\"default\"</span><span class=\"p\">:</span> <span class=\"s2\">\"I'm inner!\"</span>\n        <span class=\"p\">}</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">jschema2py</span> <span class=\"kn\">import</span> <span class=\"n\">build_class</span>\n<span class=\"n\">Nested</span> <span class=\"o\">=</span> <span class=\"n\">build_class</span><span class=\"p\">(</span><span class=\"n\">schema</span><span class=\"p\">)</span>\n<span class=\"n\">nested</span> <span class=\"o\">=</span> <span class=\"n\">Nested</span><span class=\"p\">()</span>\n<span class=\"n\">nested</span><span class=\"o\">.</span><span class=\"n\">inner</span> <span class=\"o\">=</span> <span class=\"n\">nested</span><span class=\"o\">.</span><span class=\"n\">get_class</span><span class=\"p\">(</span><span class=\"s2\">\"inner\"</span><span class=\"p\">)()</span> <span class=\"c1\"># Gets the class associated with the property \"inner\" </span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">nested</span><span class=\"o\">.</span><span class=\"n\">inner</span><span class=\"o\">.</span><span class=\"n\">string</span><span class=\"p\">)</span>\n</pre>\n\n          </div>"}, "last_serial": 4061160, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "388fe423bf7f55bf88b29b8bc9b2ff59", "sha256": "859f9720bf11024d3fe30e736bf38487616627a7a98d4ca4f6591d0221728302"}, "downloads": -1, "filename": "jschema2py-0.1.0.tar.gz", "has_sig": false, "md5_digest": "388fe423bf7f55bf88b29b8bc9b2ff59", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6249, "upload_time": "2018-07-14T12:57:32", "upload_time_iso_8601": "2018-07-14T12:57:32.952835Z", "url": "https://files.pythonhosted.org/packages/86/63/0b291fc527149cf4c67d16074aa5d4e422b010f62542e095be2376473f20/jschema2py-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "388fe423bf7f55bf88b29b8bc9b2ff59", "sha256": "859f9720bf11024d3fe30e736bf38487616627a7a98d4ca4f6591d0221728302"}, "downloads": -1, "filename": "jschema2py-0.1.0.tar.gz", "has_sig": false, "md5_digest": "388fe423bf7f55bf88b29b8bc9b2ff59", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6249, "upload_time": "2018-07-14T12:57:32", "upload_time_iso_8601": "2018-07-14T12:57:32.952835Z", "url": "https://files.pythonhosted.org/packages/86/63/0b291fc527149cf4c67d16074aa5d4e422b010f62542e095be2376473f20/jschema2py-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:52:02 2020"}