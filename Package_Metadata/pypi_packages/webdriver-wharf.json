{"info": {"author": "Sean Myers", "author_email": "sean.myers@redhat.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Console", "Intended Audience :: System Administrators", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Topic :: System :: Systems Administration", "Topic :: Utilities"], "description": "webdriver-wharf\n===============\n\nA docker-based warehouse of Selenium servers running chrome and firefox,\nready to be checked out for use by Selenium WebDriver clients.\n\nConfiguration is done entirely with environment variables (detailed below),\nwhich should make it trivial to use something other than systemd to manage\nthe wharf service, should systemd be unavailable.\n\nsystemd example config\n======================\n\n/etc/systemd/system/webdriver-wharf.service\n-------------------------------------------\n\n```\n[Unit]\nDescription=WebDriver Wharf\nAfter=docker.service\n\n[Service]\nType=simple\nExecStart=/usr/bin/webdriver-wharf\nEnvironmentFile=/etc/default/webdriver-wharf\n\n[Install]\nWantedBy=multi-user.target\n```\n\nNote that on RPM-bases systems, `EnvironmentFile` should probably be\n`/etc/sysconfig/webdriver-wharf`\n\nEnvironment Variables\n=====================\n\nWEBDRIVER_WHARF_IMAGE\n---------------------\n\nThe name of the docker image to spawn in the wharf pool.\n\nDefaults to `cfmeqe/sel_ff_chrome`, but can be any docker image that exposes a selenium\nserver on port 4444 and a VNC server on port 5999 (display :99). The `sel_ff_chrome`\nimage also exposes nginx's json-based file browser on port 80.\n\nWEBDRIVER_WHARF_POOL_SIZE\n-------------------------\n\nNumber of containers to keep in the active pool, ready for checkout.\n\nDefaults to 4\n\nWEBDRIVER_WHARF_MAX_CHECKOUT_TIME\n---------------------------------\n\nMaximum time, in seconds, a container can be checked out before it is reaped.\n\nDefaults to 3600, set to 0 for no max checkout time (probably a bad idea)\n\nWEBDRIVER_WHARF_IMAGE_PULL_INTERVAL\n-----------------------------------\n\nInterval, in seconds, of how often wharf will check for updates to the docker image.\n\nDefaults to one hour (3600 seconds)\n\nWEBDRIVER_WHARF_REBALANCE_INTERVAL\n----------------------------------\n\nInterval, in seconds, of how often wharf will rebalance the active container pool.\n\nFrequent rebalancing should not be necessary, and indicates a wharf bug.\n\nDefaults to six hours (21600 seconds)\n\nWEBDRIVER_WHARF_LOG_LEVEL\n-------------------------\n\nLoglevel for wharf's console spam. Must be one of python's builtin loglevels:\n'DEBUG', 'INFO', 'WARNING', 'ERROR', 'CRITICAL'\n\nDefaults to 'INFO', which offers a running commentary on the starting, stopping,\nand destruction of containers\n\nWEBDRIVER_WHARF_LISTEN_HOST\n---------------------------\n\nHost address to bind to.\n\nDefaults to 0.0.0.0 (all interfaces)\n\nWEBDRIVER_WHARF_LISTEN_PORT\n---------------------------\n\nHost port (TCP) to bind to.\n\nDefaults to 4899\n\nWEBDRIVER_WHARF_START_TIMEOUT\n-----------------------------\n\nHow long, in seconds, wharf will wait when starting a container before deciding\nthe container has failed to start.\n\nDefaults to 60\n\nWEBDRIVER_WHARF_DB_URL\n----------------------\n\nDatabase URL that wharf should connect to for container tracking.\n\nBy default, wharf creates and maintains its own SQLite database in sane locations,\nthough not necessarily the \"correct\" one according to the Filesystem Hierarchy Standard\n\nIf set, this value is passed directly to sqlalchemy with no further processing.\nSee [the sqlalchemy docs](http://docs.sqlalchemy.org/en/rel_1_0/core/engines.html#database-urls)\nfor information regarding the construction of URLs. When using other database engines,\nwharf takes no responsibility for installing the correct driver, needs the ability to\ncreate tables, and most importantly *has not been tested with that engine*.\n\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "setup\ndistutils", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "webdriver-wharf", "package_url": "https://pypi.org/project/webdriver-wharf/", "platform": "", "project_url": "https://pypi.org/project/webdriver-wharf/", "project_urls": null, "release_url": "https://pypi.org/project/webdriver-wharf/0.4.0/", "requires_dist": null, "requires_python": "", "summary": "A docker-based warehouse of Selenium servers running chrome and firefox", "version": "0.4.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            webdriver-wharf<br>===============<br><br>A docker-based warehouse of Selenium servers running chrome and firefox,<br>ready to be checked out for use by Selenium WebDriver clients.<br><br>Configuration is done entirely with environment variables (detailed below),<br>which should make it trivial to use something other than systemd to manage<br>the wharf service, should systemd be unavailable.<br><br>systemd example config<br>======================<br><br>/etc/systemd/system/webdriver-wharf.service<br>-------------------------------------------<br><br>```<br>[Unit]<br>Description=WebDriver Wharf<br>After=docker.service<br><br>[Service]<br>Type=simple<br>ExecStart=/usr/bin/webdriver-wharf<br>EnvironmentFile=/etc/default/webdriver-wharf<br><br>[Install]<br>WantedBy=multi-user.target<br>```<br><br>Note that on RPM-bases systems, `EnvironmentFile` should probably be<br>`/etc/sysconfig/webdriver-wharf`<br><br>Environment Variables<br>=====================<br><br>WEBDRIVER_WHARF_IMAGE<br>---------------------<br><br>The name of the docker image to spawn in the wharf pool.<br><br>Defaults to `cfmeqe/sel_ff_chrome`, but can be any docker image that exposes a selenium<br>server on port 4444 and a VNC server on port 5999 (display :99). The `sel_ff_chrome`<br>image also exposes nginx's json-based file browser on port 80.<br><br>WEBDRIVER_WHARF_POOL_SIZE<br>-------------------------<br><br>Number of containers to keep in the active pool, ready for checkout.<br><br>Defaults to 4<br><br>WEBDRIVER_WHARF_MAX_CHECKOUT_TIME<br>---------------------------------<br><br>Maximum time, in seconds, a container can be checked out before it is reaped.<br><br>Defaults to 3600, set to 0 for no max checkout time (probably a bad idea)<br><br>WEBDRIVER_WHARF_IMAGE_PULL_INTERVAL<br>-----------------------------------<br><br>Interval, in seconds, of how often wharf will check for updates to the docker image.<br><br>Defaults to one hour (3600 seconds)<br><br>WEBDRIVER_WHARF_REBALANCE_INTERVAL<br>----------------------------------<br><br>Interval, in seconds, of how often wharf will rebalance the active container pool.<br><br>Frequent rebalancing should not be necessary, and indicates a wharf bug.<br><br>Defaults to six hours (21600 seconds)<br><br>WEBDRIVER_WHARF_LOG_LEVEL<br>-------------------------<br><br>Loglevel for wharf's console spam. Must be one of python's builtin loglevels:<br>'DEBUG', 'INFO', 'WARNING', 'ERROR', 'CRITICAL'<br><br>Defaults to 'INFO', which offers a running commentary on the starting, stopping,<br>and destruction of containers<br><br>WEBDRIVER_WHARF_LISTEN_HOST<br>---------------------------<br><br>Host address to bind to.<br><br>Defaults to 0.0.0.0 (all interfaces)<br><br>WEBDRIVER_WHARF_LISTEN_PORT<br>---------------------------<br><br>Host port (TCP) to bind to.<br><br>Defaults to 4899<br><br>WEBDRIVER_WHARF_START_TIMEOUT<br>-----------------------------<br><br>How long, in seconds, wharf will wait when starting a container before deciding<br>the container has failed to start.<br><br>Defaults to 60<br><br>WEBDRIVER_WHARF_DB_URL<br>----------------------<br><br>Database URL that wharf should connect to for container tracking.<br><br>By default, wharf creates and maintains its own SQLite database in sane locations,<br>though not necessarily the \"correct\" one according to the Filesystem Hierarchy Standard<br><br>If set, this value is passed directly to sqlalchemy with no further processing.<br>See [the sqlalchemy docs](http://docs.sqlalchemy.org/en/rel_1_0/core/engines.html#database-urls)<br>for information regarding the construction of URLs. When using other database engines,<br>wharf takes no responsibility for installing the correct driver, needs the ability to<br>create tables, and most importantly *has not been tested with that engine*.<br><br>\n          </div>"}, "last_serial": 2908926, "releases": {"0.4.0": [{"comment_text": "", "digests": {"md5": "34b8e3a7905c311dd63d6a4c92f15001", "sha256": "c375028d1933a0641cb96f3e75c46e11828688afda2e3829225115d20c454840"}, "downloads": -1, "filename": "webdriver-wharf-0.4.0.tar.gz", "has_sig": false, "md5_digest": "34b8e3a7905c311dd63d6a4c92f15001", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13779, "upload_time": "2017-05-30T09:59:55", "upload_time_iso_8601": "2017-05-30T09:59:55.616547Z", "url": "https://files.pythonhosted.org/packages/cc/da/f6ffd2ab9786cf5c63ce6ca4b3e4e58e31694955979264acc15d61fe7cef/webdriver-wharf-0.4.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "34b8e3a7905c311dd63d6a4c92f15001", "sha256": "c375028d1933a0641cb96f3e75c46e11828688afda2e3829225115d20c454840"}, "downloads": -1, "filename": "webdriver-wharf-0.4.0.tar.gz", "has_sig": false, "md5_digest": "34b8e3a7905c311dd63d6a4c92f15001", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13779, "upload_time": "2017-05-30T09:59:55", "upload_time_iso_8601": "2017-05-30T09:59:55.616547Z", "url": "https://files.pythonhosted.org/packages/cc/da/f6ffd2ab9786cf5c63ce6ca4b3e4e58e31694955979264acc15d61fe7cef/webdriver-wharf-0.4.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:31:12 2020"}