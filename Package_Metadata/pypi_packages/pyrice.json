{"info": {"author": "Pierre Larmande, Quan Do", "author_email": "pierre.larmande@ird.fr, dohongquan1612@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6"], "description": "\n# PyRice - a Python package for query rice gene information\n\n## Install from source:\n\n- Clone project from Github:\n  ```\n  git clone https://github.com/SouthGreenPlatform/PyRice.git\n  ```\n## Install from PyPI\n\n- Use pip to install package PyRice (the newest version)\n    ```\n    pip install pyrice\n    ```\n\n- Now there are 1 versions available (should use the latest version):\n    - Version 0.1.8: Addition of crawling JavaScript data with Selenium.\n        * If you want to use Selenium, please follow these steps:\n            + Please check carefully the current version of Chrome on your computer before downloading\n            + Download the [Chrome driver](https://chromedriver.chromium.org/downloads).\n            + After downloading, fill the file path lead to Chrome driver before querying:\n                ```py\n                from pyrice import utils\n                utils.chrome_path = \"the path of your Chrome driver\"\n                ```\n    - Version 0.1.5: Crawl data without Selenium (unsupported).\n\n- To see demo of package: [Demo_PyRice.ipynb](https://github.com/SouthGreenPlatform/PyRice/blob/master/Demo_PyRice.ipynb)\n\n\n ## Instruction \n\n### Example of system search_gene\n\n```python\nfrom pyrice.multi_query import MultiQuery\n\nquery = MultiQuery()\nresult = query.search_on_chromosome(chro=\"chr01\", start_pos=\"1\", end_pos=\"20000\",\n                                    number_process = 4, dbs=\"all\", save_path=\"./result/\")\nprint(\"Output database:\", result)\n```\n```bash\nOutput database:\n{'OsNippo01g010050': {\n    'msu7Name': {'LOC_Os01g01010'},\n    'raprepName': {'Os01g0100100'},\n    'contig': 'chr01', 'fmin': 2982,\n    'fmax': 10815},\n'OsNippo01g010150': {\n    'msu7Name': {'LOC_Os01g01019'},\n    'raprepName': {'Os01g0100200'},\n    'contig': 'chr01',\n    'fmin': 11217,\n    'fmax': 12435},\n...\n'OsNippo01g010300': {\n    'msu7Name': {'LOC_Os01g01040'},\n    'raprepName': {'Os01g0100500'},\n    'contig': 'chr01',\n    'fmin': 16398,\n    'fmax': 20144}\n}\n```\n\n### Example of system query_by_chromosome\n\n```python\nfrom pyrice.multi_query import MultiQuery\n\nquery = MultiQuery()\nresult = query.query_by_chromosome(chro=\"chr01\", start_pos=\"1\", end_pos=\"20000\", \n                                   number_process = 4, multi_processing=True,\n                                   multi_threading=True, dbs=\"all\")\n\nquery.save(result, save_path=\"./result/\",\n           format=[\"csv\", \"html\", \"json\", \"pkl\"], hyper_link=False)\nprint(\"Output database:\", result)\n```\n```bash\nOutput database:\n{'OsNippo01g010050': {\n    'rapdb': {\n        'Locus_ID': 'Os01g0100100',\n        'Description': 'RabGAP/TBC domain containing protein.',\n            'Oryzabase Gene Name Synonym(s)': 'Molecular Function: Rab GTPase activator activity (GO:0005097)',\n            ...},\n        'gramene': {\n            '_id': 'Os01g0100100',\n            'name': 'Os01g0100100',\n            'biotype': 'protein_coding',\n            ...},\n        ...},\n    'OsNippo01g010150': {\n        'rapdb': {...},\n        'gramene': {...},\n        ...},\n    ...\n}\n```\n\n### Example of system query_by_ids\n```python\nfrom pyrice.multi_query import MultiQuery\n\nquery = MultiQuery()\nresult = query.query_by_ids(ids=[\"Os08g0164400\", \"Os07g0586200\"],\n                            locs=[\"LOC_Os10g01006\", \"LOC_Os07g39750\"],\n                            irics=[\"OsNippo01g010050\", \"OsNippo01g010300\"],\n                            number_process = 4, multi_processing=True, multi_threading=True, dbs=\"all\")\nquery.save(result, save_path = \"./result/\",\n\t       format=[\"csv\", \"html\", \"json\", \"pkl\"], hyper_link=False)   \nprint(\"Output database:\",result)   \n```\n```bash\nOutput database:\n{'OsNippo01g010050': {\n        'rapdb': {\n            'Locus_ID': 'Os01g0100100',\n            'Description': 'RabGAP/TBC domain containing protein.',\n            'Position': '',\n            ...},\n        'ic4r': {\n            'Anther_Normal': {'expression_value': '0.699962'},\n            'Anther_WT': {'expression_value': '13.9268'},\n            ...},\n        ...},\n    'OsNippo01g010300': {\n        'rapdb': {...},\n        'ic4r': {...},\n        ...},\n    ...\n}            \n```\n### Example of system query_new_database\n```python\nfrom pyrice.multi_query import MultiQuery\n\nquery = MultiQuery()\nresult = query.query_new_database(atts=['AT4G32150'], number_process= 4,\n                                  multi_processing=True,multi_threading=True,dbs=['planteome'])\nquery.save(result, save_path=\"./result/\",\n           format=[\"csv\", \"html\", \"json\", \"pkl\"], hyper_link=False) \nprint(\"Output database:\",result)                          \n```\n```bash\nOutput database:\n{'AT4G32150':\n    {'planteome':{\n        'service': '/api/search/annotation', \n        'status': 'success',\n        'arguments': {},\n        'comments': ['Results found for: annotation; queries: ; filters: '],\n        'data': [{...}]\n        ...\n   }\n   ...\n}\n```\n### Example of Build Dictinary Module\n```py\nfrom pyrice.build_dictionary import update_gene_dictionary, update_rapdb_oryzabase\n\nupdate_gene_dictionary()\nupdate_local_database(rapdb_url, oryzabase_url)\n```\n\n### Example of Search Module\n**You have to save file as .pkl and re-load it again to use search function.**\n\n```python\nfrom pyrice import utils \nimport pandas as pd\n\ndf1 = pd.read_pickle(\"./result1/data/db.pkl\")\ndf2 = pd.read_pickle(\"./result2/data/db.pkl\")\ndf = pd.concat([df1,df2])\nresult = utils.search(df,\"Amino acid \")\n```\n\n### Example of SQL Query\nYou can execute a SQL query over a pandas dataframe.\nYou have to install package [Pandasql](<https://pypi.org/project/pandasql/>). The variable name is same with the table name in SQL query.\nNext, follow the code below to run SQL query:\n```python\nimport pandas as pd\nfrom pandasql import sqldf\n\ndata = pd.read_pickle(\"./result/data/db.pkl\")\ndata = data.astype(str)\nsql = \"SELECT * FROM data WHERE `oryzabase.CGSNL Gene Symbol` = 'TLP27' or `gramene.system_name` = 'oryza_sativa'\"\npysqldf = lambda q: sqldf(q, globals())\nprint(pysqldf(sql))\n```\n**The variable name must be same with the table name in SQL query.**\n\n## List of supported databases\n\nDatabase_name: keywords\n\n* [Oryzabase](https://shigen.nig.ac.jp/rice/oryzabase/) : oryzabase\n* [RapDB](https://rapdb.dna.affrc.go.jp) : rapdb\n* [Gramene](http://www.gramene.org) : gramene\n* [IC4R](http://expression.ic4r.org) : ic4r\n* [SNP-Seek](https://snp-seek.irri.org) : snpseek\n* [Funricegene](https://funricegenes.github.io) : funricegene_genekeywords, funricegene_faminfo, funricegene_geneinfo\n* [MSU](http://rice.plantbiology.msu.edu) : msu\n* [EMBL-EBI Expression Atlas](https://www.ebi.ac.uk/gxa/home) : embl_ebi\n* [GWAS-ATLAS](https://bigd.big.ac.cn/gwas/#) : gwas_atlas\n* [Planteome](http://planteome.org) : planteome\n\n**Keywords are value of arguments in query module.**\n\n## List of exception\n\n* Server Exception\n\n    Throw when server response code is not 200.\n\n    Throw with the corresponding server response code.\n* Internet Connection Exceptioin\n\n    Throw requests.exceptions.RequestException\n\n    *requests* module exception.\n* Timeout Exception\n\n    Throw requests.exceptions.Timeout\n\n    *requests* module exception.\n* Database Exception\n\n    Throw when database description is not found.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/SouthGreenPlatform/PyRice", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "pyrice", "package_url": "https://pypi.org/project/pyrice/", "platform": "", "project_url": "https://pypi.org/project/pyrice/", "project_urls": {"Homepage": "https://github.com/SouthGreenPlatform/PyRice"}, "release_url": "https://pypi.org/project/pyrice/0.1.8/", "requires_dist": ["selenium"], "requires_python": "", "summary": "PyRice: a Python package for functional analysis of rice genes", "version": "0.1.8", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>PyRice - a Python package for query rice gene information</h1>\n<h2>Install from source:</h2>\n<ul>\n<li>Clone project from Github:\n<pre><code>git clone https://github.com/SouthGreenPlatform/PyRice.git\n</code></pre>\n</li>\n</ul>\n<h2>Install from PyPI</h2>\n<ul>\n<li>\n<p>Use pip to install package PyRice (the newest version)</p>\n<pre><code>pip install pyrice\n</code></pre>\n</li>\n<li>\n<p>Now there are 1 versions available (should use the latest version):</p>\n<ul>\n<li>Version 0.1.8: Addition of crawling JavaScript data with Selenium.\n<ul>\n<li>If you want to use Selenium, please follow these steps:\n<ul>\n<li>Please check carefully the current version of Chrome on your computer before downloading</li>\n<li>Download the <a href=\"https://chromedriver.chromium.org/downloads\" rel=\"nofollow\">Chrome driver</a>.</li>\n<li>After downloading, fill the file path lead to Chrome driver before querying:\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pyrice</span> <span class=\"kn\">import</span> <span class=\"n\">utils</span>\n<span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">chrome_path</span> <span class=\"o\">=</span> <span class=\"s2\">\"the path of your Chrome driver\"</span>\n</pre>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Version 0.1.5: Crawl data without Selenium (unsupported).</li>\n</ul>\n</li>\n<li>\n<p>To see demo of package: <a href=\"https://github.com/SouthGreenPlatform/PyRice/blob/master/Demo_PyRice.ipynb\" rel=\"nofollow\">Demo_PyRice.ipynb</a></p>\n</li>\n</ul>\n<h2>Instruction</h2>\n<h3>Example of system search_gene</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pyrice.multi_query</span> <span class=\"kn\">import</span> <span class=\"n\">MultiQuery</span>\n\n<span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"n\">MultiQuery</span><span class=\"p\">()</span>\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">query</span><span class=\"o\">.</span><span class=\"n\">search_on_chromosome</span><span class=\"p\">(</span><span class=\"n\">chro</span><span class=\"o\">=</span><span class=\"s2\">\"chr01\"</span><span class=\"p\">,</span> <span class=\"n\">start_pos</span><span class=\"o\">=</span><span class=\"s2\">\"1\"</span><span class=\"p\">,</span> <span class=\"n\">end_pos</span><span class=\"o\">=</span><span class=\"s2\">\"20000\"</span><span class=\"p\">,</span>\n                                    <span class=\"n\">number_process</span> <span class=\"o\">=</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">dbs</span><span class=\"o\">=</span><span class=\"s2\">\"all\"</span><span class=\"p\">,</span> <span class=\"n\">save_path</span><span class=\"o\">=</span><span class=\"s2\">\"./result/\"</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Output database:\"</span><span class=\"p\">,</span> <span class=\"n\">result</span><span class=\"p\">)</span>\n</pre>\n<pre>Output database:\n<span class=\"o\">{</span><span class=\"s1\">'OsNippo01g010050'</span>: <span class=\"o\">{</span>\n    <span class=\"s1\">'msu7Name'</span>: <span class=\"o\">{</span><span class=\"s1\">'LOC_Os01g01010'</span><span class=\"o\">}</span>,\n    <span class=\"s1\">'raprepName'</span>: <span class=\"o\">{</span><span class=\"s1\">'Os01g0100100'</span><span class=\"o\">}</span>,\n    <span class=\"s1\">'contig'</span>: <span class=\"s1\">'chr01'</span>, <span class=\"s1\">'fmin'</span>: <span class=\"m\">2982</span>,\n    <span class=\"s1\">'fmax'</span>: <span class=\"m\">10815</span><span class=\"o\">}</span>,\n<span class=\"s1\">'OsNippo01g010150'</span>: <span class=\"o\">{</span>\n    <span class=\"s1\">'msu7Name'</span>: <span class=\"o\">{</span><span class=\"s1\">'LOC_Os01g01019'</span><span class=\"o\">}</span>,\n    <span class=\"s1\">'raprepName'</span>: <span class=\"o\">{</span><span class=\"s1\">'Os01g0100200'</span><span class=\"o\">}</span>,\n    <span class=\"s1\">'contig'</span>: <span class=\"s1\">'chr01'</span>,\n    <span class=\"s1\">'fmin'</span>: <span class=\"m\">11217</span>,\n    <span class=\"s1\">'fmax'</span>: <span class=\"m\">12435</span><span class=\"o\">}</span>,\n...\n<span class=\"s1\">'OsNippo01g010300'</span>: <span class=\"o\">{</span>\n    <span class=\"s1\">'msu7Name'</span>: <span class=\"o\">{</span><span class=\"s1\">'LOC_Os01g01040'</span><span class=\"o\">}</span>,\n    <span class=\"s1\">'raprepName'</span>: <span class=\"o\">{</span><span class=\"s1\">'Os01g0100500'</span><span class=\"o\">}</span>,\n    <span class=\"s1\">'contig'</span>: <span class=\"s1\">'chr01'</span>,\n    <span class=\"s1\">'fmin'</span>: <span class=\"m\">16398</span>,\n    <span class=\"s1\">'fmax'</span>: <span class=\"m\">20144</span><span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre>\n<h3>Example of system query_by_chromosome</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pyrice.multi_query</span> <span class=\"kn\">import</span> <span class=\"n\">MultiQuery</span>\n\n<span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"n\">MultiQuery</span><span class=\"p\">()</span>\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">query</span><span class=\"o\">.</span><span class=\"n\">query_by_chromosome</span><span class=\"p\">(</span><span class=\"n\">chro</span><span class=\"o\">=</span><span class=\"s2\">\"chr01\"</span><span class=\"p\">,</span> <span class=\"n\">start_pos</span><span class=\"o\">=</span><span class=\"s2\">\"1\"</span><span class=\"p\">,</span> <span class=\"n\">end_pos</span><span class=\"o\">=</span><span class=\"s2\">\"20000\"</span><span class=\"p\">,</span> \n                                   <span class=\"n\">number_process</span> <span class=\"o\">=</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">multi_processing</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                                   <span class=\"n\">multi_threading</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">dbs</span><span class=\"o\">=</span><span class=\"s2\">\"all\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">query</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">,</span> <span class=\"n\">save_path</span><span class=\"o\">=</span><span class=\"s2\">\"./result/\"</span><span class=\"p\">,</span>\n           <span class=\"nb\">format</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"csv\"</span><span class=\"p\">,</span> <span class=\"s2\">\"html\"</span><span class=\"p\">,</span> <span class=\"s2\">\"json\"</span><span class=\"p\">,</span> <span class=\"s2\">\"pkl\"</span><span class=\"p\">],</span> <span class=\"n\">hyper_link</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Output database:\"</span><span class=\"p\">,</span> <span class=\"n\">result</span><span class=\"p\">)</span>\n</pre>\n<pre>Output database:\n<span class=\"o\">{</span><span class=\"s1\">'OsNippo01g010050'</span>: <span class=\"o\">{</span>\n    <span class=\"s1\">'rapdb'</span>: <span class=\"o\">{</span>\n        <span class=\"s1\">'Locus_ID'</span>: <span class=\"s1\">'Os01g0100100'</span>,\n        <span class=\"s1\">'Description'</span>: <span class=\"s1\">'RabGAP/TBC domain containing protein.'</span>,\n            <span class=\"s1\">'Oryzabase Gene Name Synonym(s)'</span>: <span class=\"s1\">'Molecular Function: Rab GTPase activator activity (GO:0005097)'</span>,\n            ...<span class=\"o\">}</span>,\n        <span class=\"s1\">'gramene'</span>: <span class=\"o\">{</span>\n            <span class=\"s1\">'_id'</span>: <span class=\"s1\">'Os01g0100100'</span>,\n            <span class=\"s1\">'name'</span>: <span class=\"s1\">'Os01g0100100'</span>,\n            <span class=\"s1\">'biotype'</span>: <span class=\"s1\">'protein_coding'</span>,\n            ...<span class=\"o\">}</span>,\n        ...<span class=\"o\">}</span>,\n    <span class=\"s1\">'OsNippo01g010150'</span>: <span class=\"o\">{</span>\n        <span class=\"s1\">'rapdb'</span>: <span class=\"o\">{</span>...<span class=\"o\">}</span>,\n        <span class=\"s1\">'gramene'</span>: <span class=\"o\">{</span>...<span class=\"o\">}</span>,\n        ...<span class=\"o\">}</span>,\n    ...\n<span class=\"o\">}</span>\n</pre>\n<h3>Example of system query_by_ids</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pyrice.multi_query</span> <span class=\"kn\">import</span> <span class=\"n\">MultiQuery</span>\n\n<span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"n\">MultiQuery</span><span class=\"p\">()</span>\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">query</span><span class=\"o\">.</span><span class=\"n\">query_by_ids</span><span class=\"p\">(</span><span class=\"n\">ids</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"Os08g0164400\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Os07g0586200\"</span><span class=\"p\">],</span>\n                            <span class=\"n\">locs</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"LOC_Os10g01006\"</span><span class=\"p\">,</span> <span class=\"s2\">\"LOC_Os07g39750\"</span><span class=\"p\">],</span>\n                            <span class=\"n\">irics</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"OsNippo01g010050\"</span><span class=\"p\">,</span> <span class=\"s2\">\"OsNippo01g010300\"</span><span class=\"p\">],</span>\n                            <span class=\"n\">number_process</span> <span class=\"o\">=</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">multi_processing</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">multi_threading</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">dbs</span><span class=\"o\">=</span><span class=\"s2\">\"all\"</span><span class=\"p\">)</span>\n<span class=\"n\">query</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">,</span> <span class=\"n\">save_path</span> <span class=\"o\">=</span> <span class=\"s2\">\"./result/\"</span><span class=\"p\">,</span>\n\t       <span class=\"nb\">format</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"csv\"</span><span class=\"p\">,</span> <span class=\"s2\">\"html\"</span><span class=\"p\">,</span> <span class=\"s2\">\"json\"</span><span class=\"p\">,</span> <span class=\"s2\">\"pkl\"</span><span class=\"p\">],</span> <span class=\"n\">hyper_link</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>   \n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Output database:\"</span><span class=\"p\">,</span><span class=\"n\">result</span><span class=\"p\">)</span>   \n</pre>\n<pre>Output database:\n<span class=\"o\">{</span><span class=\"s1\">'OsNippo01g010050'</span>: <span class=\"o\">{</span>\n        <span class=\"s1\">'rapdb'</span>: <span class=\"o\">{</span>\n            <span class=\"s1\">'Locus_ID'</span>: <span class=\"s1\">'Os01g0100100'</span>,\n            <span class=\"s1\">'Description'</span>: <span class=\"s1\">'RabGAP/TBC domain containing protein.'</span>,\n            <span class=\"s1\">'Position'</span>: <span class=\"s1\">''</span>,\n            ...<span class=\"o\">}</span>,\n        <span class=\"s1\">'ic4r'</span>: <span class=\"o\">{</span>\n            <span class=\"s1\">'Anther_Normal'</span>: <span class=\"o\">{</span><span class=\"s1\">'expression_value'</span>: <span class=\"s1\">'0.699962'</span><span class=\"o\">}</span>,\n            <span class=\"s1\">'Anther_WT'</span>: <span class=\"o\">{</span><span class=\"s1\">'expression_value'</span>: <span class=\"s1\">'13.9268'</span><span class=\"o\">}</span>,\n            ...<span class=\"o\">}</span>,\n        ...<span class=\"o\">}</span>,\n    <span class=\"s1\">'OsNippo01g010300'</span>: <span class=\"o\">{</span>\n        <span class=\"s1\">'rapdb'</span>: <span class=\"o\">{</span>...<span class=\"o\">}</span>,\n        <span class=\"s1\">'ic4r'</span>: <span class=\"o\">{</span>...<span class=\"o\">}</span>,\n        ...<span class=\"o\">}</span>,\n    ...\n<span class=\"o\">}</span>            \n</pre>\n<h3>Example of system query_new_database</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pyrice.multi_query</span> <span class=\"kn\">import</span> <span class=\"n\">MultiQuery</span>\n\n<span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"n\">MultiQuery</span><span class=\"p\">()</span>\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">query</span><span class=\"o\">.</span><span class=\"n\">query_new_database</span><span class=\"p\">(</span><span class=\"n\">atts</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'AT4G32150'</span><span class=\"p\">],</span> <span class=\"n\">number_process</span><span class=\"o\">=</span> <span class=\"mi\">4</span><span class=\"p\">,</span>\n                                  <span class=\"n\">multi_processing</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span><span class=\"n\">multi_threading</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span><span class=\"n\">dbs</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'planteome'</span><span class=\"p\">])</span>\n<span class=\"n\">query</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">,</span> <span class=\"n\">save_path</span><span class=\"o\">=</span><span class=\"s2\">\"./result/\"</span><span class=\"p\">,</span>\n           <span class=\"nb\">format</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"csv\"</span><span class=\"p\">,</span> <span class=\"s2\">\"html\"</span><span class=\"p\">,</span> <span class=\"s2\">\"json\"</span><span class=\"p\">,</span> <span class=\"s2\">\"pkl\"</span><span class=\"p\">],</span> <span class=\"n\">hyper_link</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span> \n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Output database:\"</span><span class=\"p\">,</span><span class=\"n\">result</span><span class=\"p\">)</span>                          \n</pre>\n<pre>Output database:\n<span class=\"o\">{</span><span class=\"s1\">'AT4G32150'</span>:\n    <span class=\"o\">{</span><span class=\"s1\">'planteome'</span>:<span class=\"o\">{</span>\n        <span class=\"s1\">'service'</span>: <span class=\"s1\">'/api/search/annotation'</span>, \n        <span class=\"s1\">'status'</span>: <span class=\"s1\">'success'</span>,\n        <span class=\"s1\">'arguments'</span>: <span class=\"o\">{}</span>,\n        <span class=\"s1\">'comments'</span>: <span class=\"o\">[</span><span class=\"s1\">'Results found for: annotation; queries: ; filters: '</span><span class=\"o\">]</span>,\n        <span class=\"s1\">'data'</span>: <span class=\"o\">[{</span>...<span class=\"o\">}]</span>\n        ...\n   <span class=\"o\">}</span>\n   ...\n<span class=\"o\">}</span>\n</pre>\n<h3>Example of Build Dictinary Module</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pyrice.build_dictionary</span> <span class=\"kn\">import</span> <span class=\"n\">update_gene_dictionary</span><span class=\"p\">,</span> <span class=\"n\">update_rapdb_oryzabase</span>\n\n<span class=\"n\">update_gene_dictionary</span><span class=\"p\">()</span>\n<span class=\"n\">update_local_database</span><span class=\"p\">(</span><span class=\"n\">rapdb_url</span><span class=\"p\">,</span> <span class=\"n\">oryzabase_url</span><span class=\"p\">)</span>\n</pre>\n<h3>Example of Search Module</h3>\n<p><strong>You have to save file as .pkl and re-load it again to use search function.</strong></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pyrice</span> <span class=\"kn\">import</span> <span class=\"n\">utils</span> \n<span class=\"kn\">import</span> <span class=\"nn\">pandas</span> <span class=\"k\">as</span> <span class=\"nn\">pd</span>\n\n<span class=\"n\">df1</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">read_pickle</span><span class=\"p\">(</span><span class=\"s2\">\"./result1/data/db.pkl\"</span><span class=\"p\">)</span>\n<span class=\"n\">df2</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">read_pickle</span><span class=\"p\">(</span><span class=\"s2\">\"./result2/data/db.pkl\"</span><span class=\"p\">)</span>\n<span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">concat</span><span class=\"p\">([</span><span class=\"n\">df1</span><span class=\"p\">,</span><span class=\"n\">df2</span><span class=\"p\">])</span>\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">search</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">,</span><span class=\"s2\">\"Amino acid \"</span><span class=\"p\">)</span>\n</pre>\n<h3>Example of SQL Query</h3>\n<p>You can execute a SQL query over a pandas dataframe.\nYou have to install package <a href=\"https://pypi.org/project/pandasql/\" rel=\"nofollow\">Pandasql</a>. The variable name is same with the table name in SQL query.\nNext, follow the code below to run SQL query:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pandas</span> <span class=\"k\">as</span> <span class=\"nn\">pd</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pandasql</span> <span class=\"kn\">import</span> <span class=\"n\">sqldf</span>\n\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">read_pickle</span><span class=\"p\">(</span><span class=\"s2\">\"./result/data/db.pkl\"</span><span class=\"p\">)</span>\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">)</span>\n<span class=\"n\">sql</span> <span class=\"o\">=</span> <span class=\"s2\">\"SELECT * FROM data WHERE `oryzabase.CGSNL Gene Symbol` = 'TLP27' or `gramene.system_name` = 'oryza_sativa'\"</span>\n<span class=\"n\">pysqldf</span> <span class=\"o\">=</span> <span class=\"k\">lambda</span> <span class=\"n\">q</span><span class=\"p\">:</span> <span class=\"n\">sqldf</span><span class=\"p\">(</span><span class=\"n\">q</span><span class=\"p\">,</span> <span class=\"nb\">globals</span><span class=\"p\">())</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">pysqldf</span><span class=\"p\">(</span><span class=\"n\">sql</span><span class=\"p\">))</span>\n</pre>\n<p><strong>The variable name must be same with the table name in SQL query.</strong></p>\n<h2>List of supported databases</h2>\n<p>Database_name: keywords</p>\n<ul>\n<li><a href=\"https://shigen.nig.ac.jp/rice/oryzabase/\" rel=\"nofollow\">Oryzabase</a> : oryzabase</li>\n<li><a href=\"https://rapdb.dna.affrc.go.jp\" rel=\"nofollow\">RapDB</a> : rapdb</li>\n<li><a href=\"http://www.gramene.org\" rel=\"nofollow\">Gramene</a> : gramene</li>\n<li><a href=\"http://expression.ic4r.org\" rel=\"nofollow\">IC4R</a> : ic4r</li>\n<li><a href=\"https://snp-seek.irri.org\" rel=\"nofollow\">SNP-Seek</a> : snpseek</li>\n<li><a href=\"https://funricegenes.github.io\" rel=\"nofollow\">Funricegene</a> : funricegene_genekeywords, funricegene_faminfo, funricegene_geneinfo</li>\n<li><a href=\"http://rice.plantbiology.msu.edu\" rel=\"nofollow\">MSU</a> : msu</li>\n<li><a href=\"https://www.ebi.ac.uk/gxa/home\" rel=\"nofollow\">EMBL-EBI Expression Atlas</a> : embl_ebi</li>\n<li><a href=\"https://bigd.big.ac.cn/gwas/#\" rel=\"nofollow\">GWAS-ATLAS</a> : gwas_atlas</li>\n<li><a href=\"http://planteome.org\" rel=\"nofollow\">Planteome</a> : planteome</li>\n</ul>\n<p><strong>Keywords are value of arguments in query module.</strong></p>\n<h2>List of exception</h2>\n<ul>\n<li>\n<p>Server Exception</p>\n<p>Throw when server response code is not 200.</p>\n<p>Throw with the corresponding server response code.</p>\n</li>\n<li>\n<p>Internet Connection Exceptioin</p>\n<p>Throw requests.exceptions.RequestException</p>\n<p><em>requests</em> module exception.</p>\n</li>\n<li>\n<p>Timeout Exception</p>\n<p>Throw requests.exceptions.Timeout</p>\n<p><em>requests</em> module exception.</p>\n</li>\n<li>\n<p>Database Exception</p>\n<p>Throw when database description is not found.</p>\n</li>\n</ul>\n\n          </div>"}, "last_serial": 6770411, "releases": {"0.1.5": [{"comment_text": "", "digests": {"md5": "715f491fc63ae5b9be7ae2f11fdd4e61", "sha256": "ca078a43cba5d6766f20839d7a002af62990507ae5c761d00453dbedc30a7883"}, "downloads": -1, "filename": "pyrice-0.1.5-py3-none-any.whl", "has_sig": false, "md5_digest": "715f491fc63ae5b9be7ae2f11fdd4e61", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6970050, "upload_time": "2019-10-14T14:58:24", "upload_time_iso_8601": "2019-10-14T14:58:24.223088Z", "url": "https://files.pythonhosted.org/packages/99/7c/ae8985eb1bd93ca21bf4b1615d22ef14d76c7f96ff5b4605a4f1a3ca9a0c/pyrice-0.1.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b64622bac5ab8d8d8bbb0fba1ff52c00", "sha256": "3d5f3138f45a534ae28afbeccaf32519af4e704c9a1ca0be073381581d6a0126"}, "downloads": -1, "filename": "pyrice-0.1.5.tar.gz", "has_sig": false, "md5_digest": "b64622bac5ab8d8d8bbb0fba1ff52c00", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6921175, "upload_time": "2019-10-14T14:58:40", "upload_time_iso_8601": "2019-10-14T14:58:40.749097Z", "url": "https://files.pythonhosted.org/packages/da/72/c3bda82e920ccd07e1b85a313f8c7b8f26d0dbed84a4f8d35b2c4eb261e3/pyrice-0.1.5.tar.gz", "yanked": false}], "0.1.7": [{"comment_text": "", "digests": {"md5": "e2ff46f2bf600eb95b5a7e8250805450", "sha256": "f244cc6f239b09b3aedc7edea36d35f14980bb713214ff4c819286438f8bf35a"}, "downloads": -1, "filename": "pyrice-0.1.7-py3-none-any.whl", "has_sig": false, "md5_digest": "e2ff46f2bf600eb95b5a7e8250805450", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7054564, "upload_time": "2020-01-14T09:32:51", "upload_time_iso_8601": "2020-01-14T09:32:51.777150Z", "url": "https://files.pythonhosted.org/packages/62/b9/11027f6aeba4ef32021c6a286fcee5098144f1ac753802eb373e90455bb6/pyrice-0.1.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7661eb4fbb546104de23ec275aa10ef3", "sha256": "5e962bcabb32ac118fe88ae79c5692eb9e865cc9893325fb5c55f56dc853d555"}, "downloads": -1, "filename": "pyrice-0.1.7.tar.gz", "has_sig": false, "md5_digest": "7661eb4fbb546104de23ec275aa10ef3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7005299, "upload_time": "2020-01-14T09:35:29", "upload_time_iso_8601": "2020-01-14T09:35:29.639526Z", "url": "https://files.pythonhosted.org/packages/4e/da/96406181ae51c8a3950a484086700318003bc397261f57c17c25e39fba62/pyrice-0.1.7.tar.gz", "yanked": false}], "0.1.8": [{"comment_text": "", "digests": {"md5": "6a440f86e331e6dc7a43d066b767859a", "sha256": "2cf61e9c78df8341d30c004aea8d5802991f2a41fa7c7afb1165337d9d1d8854"}, "downloads": -1, "filename": "pyrice-0.1.8-py3-none-any.whl", "has_sig": false, "md5_digest": "6a440f86e331e6dc7a43d066b767859a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9727469, "upload_time": "2020-03-08T05:01:29", "upload_time_iso_8601": "2020-03-08T05:01:29.714559Z", "url": "https://files.pythonhosted.org/packages/09/91/3c5f482b76ab03322ee5e2290be57fc8116d83547000c22ede53b55c2bfb/pyrice-0.1.8-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "988a4a36ea8461f90df6646431bccdfd", "sha256": "57d810e002e05e287735e49c6a69368ac4e9725367c646e738f3cdc0adb9dc52"}, "downloads": -1, "filename": "pyrice-0.1.8.tar.gz", "has_sig": false, "md5_digest": "988a4a36ea8461f90df6646431bccdfd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9630086, "upload_time": "2020-03-08T05:02:21", "upload_time_iso_8601": "2020-03-08T05:02:21.459046Z", "url": "https://files.pythonhosted.org/packages/d1/6c/1dc764239503c2f3f1296fe800eeed8157dbc35e39dd743d31a431f46f16/pyrice-0.1.8.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "6a440f86e331e6dc7a43d066b767859a", "sha256": "2cf61e9c78df8341d30c004aea8d5802991f2a41fa7c7afb1165337d9d1d8854"}, "downloads": -1, "filename": "pyrice-0.1.8-py3-none-any.whl", "has_sig": false, "md5_digest": "6a440f86e331e6dc7a43d066b767859a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9727469, "upload_time": "2020-03-08T05:01:29", "upload_time_iso_8601": "2020-03-08T05:01:29.714559Z", "url": "https://files.pythonhosted.org/packages/09/91/3c5f482b76ab03322ee5e2290be57fc8116d83547000c22ede53b55c2bfb/pyrice-0.1.8-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "988a4a36ea8461f90df6646431bccdfd", "sha256": "57d810e002e05e287735e49c6a69368ac4e9725367c646e738f3cdc0adb9dc52"}, "downloads": -1, "filename": "pyrice-0.1.8.tar.gz", "has_sig": false, "md5_digest": "988a4a36ea8461f90df6646431bccdfd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9630086, "upload_time": "2020-03-08T05:02:21", "upload_time_iso_8601": "2020-03-08T05:02:21.459046Z", "url": "https://files.pythonhosted.org/packages/d1/6c/1dc764239503c2f3f1296fe800eeed8157dbc35e39dd743d31a431f46f16/pyrice-0.1.8.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:57:47 2020"}