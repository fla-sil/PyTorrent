{"info": {"author": "Sergey Shilin", "author_email": "shilinshtein@gmail.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# Byter\nPython reader/writer for binary objects\n\n## Installation\n\n```\npip install -U byter\n```\n\n## Usage Example\n\n```python\nwith open(\"/path/to/binary/file\", \"rb\") as data:\n    has_data = read_bool(data)\n    year = read_short(data)\n    month = read_short(data)\n    width = read_float(data)\n    height = read_float(data)\n    text = read_string(data, 70)\n    array = read_array(data, 3, 'unsigned_short')\n\nprint(\"has_data:\", has_data)\nprint(\"year:\", year)\nprint(\"month:\", month)\nprint(\"width:\", width)\nprint(\"height:\", height)\nprint(\"text:\": text)\nprint(\"array:\", array)\n\n>> has_data: True\n   year: 2019\n   month: 9\n   width: 1280.0\n   height: 1024.0\n   text: \"Hello World!\"\n   array: [13, 4, 16]\n```\n\n## Types allowed to read/write\n\n| C Type | Python type | Size in bytes |\n| --- | --- | --- |\n| char | string of length 1 | 1 |\n| signed char | integer | 1 |\n| unsigned char | integer | 1 |\n| bool | boolean | 1 |\n| short | integer | 2 |\n| unsigned short | integer | 2 |\n| int | integer | 4 |\n| unsigned int | integer | 4 |\n| long | integer | 4 |\n| unsigned long | integer | 4 |\n| long long | integer | 8 |\n| unsigned long long | integer | 8 |\n| float | float | 4 |\n| double | float | 8 |\n| char[] | string | |\n\n## Methodes allowed\n\nFor each C type from the table in the previous section, there is a `read_` and a `write_` function that performs a reading/writing of a specified number of bytes from the binary object. For example,\n\n```python\na = read_unsigned_long(data)\n```\n\nwill read 4 consequent bytes from the binary source `data`.\n\nHowever, to read an array of chars (string) the method is\n\n```python\ns = read_string(data, s_len)\n```\n\nIt is also possible to read an array of bytes using the following method:\n\n```python\narr = read_array(data, size, 'unsigned_short')\n```\n\nThis will read a sequence of length `size` of unsigned ints, `size  * 2` bytes in total (`short` type is of 2 bytes).\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/sergeyshilin/byter", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "byter", "package_url": "https://pypi.org/project/byter/", "platform": "", "project_url": "https://pypi.org/project/byter/", "project_urls": {"Homepage": "https://github.com/sergeyshilin/byter"}, "release_url": "https://pypi.org/project/byter/0.0.2/", "requires_dist": null, "requires_python": ">=3.6", "summary": "Python binary object reader/writer", "version": "0.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Byter</h1>\n<p>Python reader/writer for binary objects</p>\n<h2>Installation</h2>\n<pre><code>pip install -U byter\n</code></pre>\n<h2>Usage Example</h2>\n<pre><span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s2\">\"/path/to/binary/file\"</span><span class=\"p\">,</span> <span class=\"s2\">\"rb\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">data</span><span class=\"p\">:</span>\n    <span class=\"n\">has_data</span> <span class=\"o\">=</span> <span class=\"n\">read_bool</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n    <span class=\"n\">year</span> <span class=\"o\">=</span> <span class=\"n\">read_short</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n    <span class=\"n\">month</span> <span class=\"o\">=</span> <span class=\"n\">read_short</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n    <span class=\"n\">width</span> <span class=\"o\">=</span> <span class=\"n\">read_float</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n    <span class=\"n\">height</span> <span class=\"o\">=</span> <span class=\"n\">read_float</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n    <span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"n\">read_string</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"mi\">70</span><span class=\"p\">)</span>\n    <span class=\"n\">array</span> <span class=\"o\">=</span> <span class=\"n\">read_array</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"s1\">'unsigned_short'</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"has_data:\"</span><span class=\"p\">,</span> <span class=\"n\">has_data</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"year:\"</span><span class=\"p\">,</span> <span class=\"n\">year</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"month:\"</span><span class=\"p\">,</span> <span class=\"n\">month</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"width:\"</span><span class=\"p\">,</span> <span class=\"n\">width</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"height:\"</span><span class=\"p\">,</span> <span class=\"n\">height</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"text:\"</span><span class=\"p\">:</span> <span class=\"n\">text</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"array:\"</span><span class=\"p\">,</span> <span class=\"n\">array</span><span class=\"p\">)</span>\n\n<span class=\"o\">&gt;&gt;</span> <span class=\"n\">has_data</span><span class=\"p\">:</span> <span class=\"kc\">True</span>\n   <span class=\"n\">year</span><span class=\"p\">:</span> <span class=\"mi\">2019</span>\n   <span class=\"n\">month</span><span class=\"p\">:</span> <span class=\"mi\">9</span>\n   <span class=\"n\">width</span><span class=\"p\">:</span> <span class=\"mf\">1280.0</span>\n   <span class=\"n\">height</span><span class=\"p\">:</span> <span class=\"mf\">1024.0</span>\n   <span class=\"n\">text</span><span class=\"p\">:</span> <span class=\"s2\">\"Hello World!\"</span>\n   <span class=\"n\">array</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">13</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">16</span><span class=\"p\">]</span>\n</pre>\n<h2>Types allowed to read/write</h2>\n<table>\n<thead>\n<tr>\n<th>C Type</th>\n<th>Python type</th>\n<th>Size in bytes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>char</td>\n<td>string of length 1</td>\n<td>1</td>\n</tr>\n<tr>\n<td>signed char</td>\n<td>integer</td>\n<td>1</td>\n</tr>\n<tr>\n<td>unsigned char</td>\n<td>integer</td>\n<td>1</td>\n</tr>\n<tr>\n<td>bool</td>\n<td>boolean</td>\n<td>1</td>\n</tr>\n<tr>\n<td>short</td>\n<td>integer</td>\n<td>2</td>\n</tr>\n<tr>\n<td>unsigned short</td>\n<td>integer</td>\n<td>2</td>\n</tr>\n<tr>\n<td>int</td>\n<td>integer</td>\n<td>4</td>\n</tr>\n<tr>\n<td>unsigned int</td>\n<td>integer</td>\n<td>4</td>\n</tr>\n<tr>\n<td>long</td>\n<td>integer</td>\n<td>4</td>\n</tr>\n<tr>\n<td>unsigned long</td>\n<td>integer</td>\n<td>4</td>\n</tr>\n<tr>\n<td>long long</td>\n<td>integer</td>\n<td>8</td>\n</tr>\n<tr>\n<td>unsigned long long</td>\n<td>integer</td>\n<td>8</td>\n</tr>\n<tr>\n<td>float</td>\n<td>float</td>\n<td>4</td>\n</tr>\n<tr>\n<td>double</td>\n<td>float</td>\n<td>8</td>\n</tr>\n<tr>\n<td>char[]</td>\n<td>string</td>\n<td></td>\n</tr></tbody></table>\n<h2>Methodes allowed</h2>\n<p>For each C type from the table in the previous section, there is a <code>read_</code> and a <code>write_</code> function that performs a reading/writing of a specified number of bytes from the binary object. For example,</p>\n<pre><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">read_unsigned_long</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n</pre>\n<p>will read 4 consequent bytes from the binary source <code>data</code>.</p>\n<p>However, to read an array of chars (string) the method is</p>\n<pre><span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">read_string</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">s_len</span><span class=\"p\">)</span>\n</pre>\n<p>It is also possible to read an array of bytes using the following method:</p>\n<pre><span class=\"n\">arr</span> <span class=\"o\">=</span> <span class=\"n\">read_array</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"p\">,</span> <span class=\"s1\">'unsigned_short'</span><span class=\"p\">)</span>\n</pre>\n<p>This will read a sequence of length <code>size</code> of unsigned ints, <code>size * 2</code> bytes in total (<code>short</code> type is of 2 bytes).</p>\n\n          </div>"}, "last_serial": 6685941, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "3141c5a429f7e469f0343fb6bfdca67f", "sha256": "e2cf23f793f0252dbd6fa77efe7b776e477d86e5f9165e59f42c24e889c42fa6"}, "downloads": -1, "filename": "byter-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "3141c5a429f7e469f0343fb6bfdca67f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 16277, "upload_time": "2019-10-08T14:50:08", "upload_time_iso_8601": "2019-10-08T14:50:08.058648Z", "url": "https://files.pythonhosted.org/packages/d3/80/13d353b4db1b51e4ba14d846dd04b6c780b673b251db0ca84cdb2d453387/byter-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "55958369c150d5c7d66c709975af224b", "sha256": "9de8fc8e6eb163049bc1988e7f26df882ec94420c5010d1147c4a12f2508be01"}, "downloads": -1, "filename": "byter-0.0.1.tar.gz", "has_sig": false, "md5_digest": "55958369c150d5c7d66c709975af224b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 3199, "upload_time": "2019-10-08T14:50:13", "upload_time_iso_8601": "2019-10-08T14:50:13.154785Z", "url": "https://files.pythonhosted.org/packages/b1/a0/91e2bf17ae5642c10f5d6a73a549596bb6e6e04f0c546aad8136fa9a7c46/byter-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "ed1eedac10289ccca7498f19cf850bda", "sha256": "7e351bedfc60d4c2072b6680adc759fc3c4be088d5072f513cd4f75c39741fcd"}, "downloads": -1, "filename": "byter-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "ed1eedac10289ccca7498f19cf850bda", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 9134, "upload_time": "2020-02-24T01:14:40", "upload_time_iso_8601": "2020-02-24T01:14:40.418914Z", "url": "https://files.pythonhosted.org/packages/94/6f/1402d7d432a1d0d3ca77e2bbdc00ba625442ce7f08516b1448fa527aa4ac/byter-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b6ba2b79bf763cdb81ceab6fbfc626fd", "sha256": "4331d01f175ba399110f1efcfd4f09bf341c768b5ae9128de88ccb5506ff5a44"}, "downloads": -1, "filename": "byter-0.0.2.tar.gz", "has_sig": false, "md5_digest": "b6ba2b79bf763cdb81ceab6fbfc626fd", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 4320, "upload_time": "2020-02-24T01:14:41", "upload_time_iso_8601": "2020-02-24T01:14:41.663235Z", "url": "https://files.pythonhosted.org/packages/5d/76/ec9a6acc63f7c37a98966bb13fc566e56ce933fd15020569951c944f03d3/byter-0.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ed1eedac10289ccca7498f19cf850bda", "sha256": "7e351bedfc60d4c2072b6680adc759fc3c4be088d5072f513cd4f75c39741fcd"}, "downloads": -1, "filename": "byter-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "ed1eedac10289ccca7498f19cf850bda", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 9134, "upload_time": "2020-02-24T01:14:40", "upload_time_iso_8601": "2020-02-24T01:14:40.418914Z", "url": "https://files.pythonhosted.org/packages/94/6f/1402d7d432a1d0d3ca77e2bbdc00ba625442ce7f08516b1448fa527aa4ac/byter-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b6ba2b79bf763cdb81ceab6fbfc626fd", "sha256": "4331d01f175ba399110f1efcfd4f09bf341c768b5ae9128de88ccb5506ff5a44"}, "downloads": -1, "filename": "byter-0.0.2.tar.gz", "has_sig": false, "md5_digest": "b6ba2b79bf763cdb81ceab6fbfc626fd", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 4320, "upload_time": "2020-02-24T01:14:41", "upload_time_iso_8601": "2020-02-24T01:14:41.663235Z", "url": "https://files.pythonhosted.org/packages/5d/76/ec9a6acc63f7c37a98966bb13fc566e56ce933fd15020569951c944f03d3/byter-0.0.2.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:35:51 2020"}