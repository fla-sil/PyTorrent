{"info": {"author": "Alper Nebi Yasak", "author_email": "alpernebiyasak@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Topic :: Software Development :: Libraries"], "description": "=================\nGit-Annex-Adapter\n=================\nThis package lets you interact with git-annex_ from within Python.\nNecessary commands are executed using ``subprocess`` and use their\nbatch versions whenever possible.\n\n.. _git-annex: https://git-annex.branchable.com/\n\nI'm developing this as needed, so feel free to ask if there's any\nfunctionality you want me to implement.\n\nRequirements\n------------\n- Python 3\n- git-annex 6.20170101 (or later)\n- pygit2 0.24 (or later)\n\nUsage\n-----\nTo create a git-annex repository from scratch::\n\n    >>> from pygit2 import init_repository\n    >>> from git_annex_adapter import init_annex\n\n    >>> init_repository('/path/to/repo')\n    pygit2.Repository('/path/to/repo/.git/')\n\n    >>> init_annex('/path/to/repo')\n    git_annex_adapter.repo.GitAnnexRepo(/path/to/repo/.git/)\n\nTo wrap an existing git-annex repository::\n\n    >>> from git_annex_adapter.repo import GitAnnexRepo\n    >>> repo = GitAnnexRepo('/tmp/repo')\n\nThe GitAnnexRepo is a subclass of pygit2.Repository. Git-annex specific\nfunctionality is accessed via the ``annex`` property of it, which is\na mapping object from git-annex keys to ``AnnexedFile`` objects::\n\n    >>> for key in repo.annex:\n    ...     print(key)\n    SHA256E-s3--2c26...\n    SHA256E-s3--baa5...\n    SHA256E-s3--fcde...\n\n    >>> key = 'SHA256E-s3--2c26...'\n    >>> repo.annex[key]\n    git_annex_adapter.repo.AnnexedFile('SHA256E-s3--2c26...')\n\nYou can also get a tree representation of any git tree-ish object with\nannexed file entries replaced with ``AnnexedFile`` objects::\n\n    >>> tree = repo.annex.get_file_tree() # treeish='HEAD'\n    >>> tree\n    git_annex_adapter.repo.AnnexedFileTree(4d7f...)\n\n    >>> set(tree)\n    {'foo', 'bar', 'baz', 'README', 'directory'}\n\n    >>> tree['foo']\n    git_annex_adapter.repo.AnnexedFile(SHA256E-s3--2c26...)\n\n    >>> tree['directory']\n    git_annex_adapter.repo.AnnexedFileTree(8b54...)\n\n    >>> tree['directory/file'] # or tree['directory']['file']\n    <pygit2.Blob object at 0x...>\n\nThe ``AnnexedFile`` objects can be used to access and manipulate\ninformation about a file.\n\nThe ``metadata`` property of the ``AnnexedFile`` is a mutable mapping\nobject from fields to sets of values::\n\n    >>> foo = tree['foo']\n    >>> for field, values in foo.metadata:\n    ...     print('{}: {}'.format(field, values))\n    author: {'me'}\n    numbers: {'1', '2', '3'}\n\n    >>> foo.metadata['numbers'] |= {'0'}\n    >>> foo.metadata['numbers'] -= {'3'}\n    >>> foo.metadata['numbers']\n    {'0', '2'}\n\n    >>> del foo.metadata['author']\n    >>> 'author' in foo.metadata\n    False\n\n    >>> foo.metadata['lastchanged']\n    '2017-07-19@15-00-00'\n\nCalling Processes\n-----------------\n\nIf you need low-level access to the git-annex processes, you can do it\nvia the classes included in ``process`` module::\n\n    >>> from git_annex_adapter.process import ...\n\nSubclasses of ``GitAnnexBatchProcess`` return relevant output (usually\none line or a dict object) whenever called with a line of input.\nFor example, ``git-annex metadata --batch --json``::\n\n    >>> proc = GitAnnexMetadataBatchJsonProcess('/path/to/repo')\n    >>> proc(file='foo')\n    {..., 'key':'SHA256E-s3--2c26...', 'fields': ...}\n\n    >>> proc(file='foo', fields={'numbers': ['1', '2', '3']})\n    {..., 'key': ..., 'fields': {'numbers': ['1', '2', '3'], ...}}\n\nSubclasses of ``GitAnnexRunner`` call a single program with\ndifferent arguments. They return a ``subprocess.CompletedProcess``\nwhen called, which captures stdout and stderr. For example, to run\n``git-annex version``::\n\n    >>> runner = GitAnnexVersionRunner('/path/to/repo')\n    >>> runner(raw=True)\n    CompletedProcess(..., stdout='6.20170101', stderr='')\n\n    >>> print(runner().stdout)\n    git-annex version: 6.20170101\n    ...\n\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/alpernebbi/git-annex-adapter", "keywords": "git-annex metadata", "license": "GPL3+", "maintainer": "", "maintainer_email": "", "name": "git-annex-adapter", "package_url": "https://pypi.org/project/git-annex-adapter/", "platform": "", "project_url": "https://pypi.org/project/git-annex-adapter/", "project_urls": {"Homepage": "https://github.com/alpernebbi/git-annex-adapter"}, "release_url": "https://pypi.org/project/git-annex-adapter/0.2.1/", "requires_dist": ["pygit2"], "requires_python": "", "summary": "Call git-annex commands from Python", "version": "0.2.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>This package lets you interact with <a href=\"https://git-annex.branchable.com/\" rel=\"nofollow\">git-annex</a> from within Python.\nNecessary commands are executed using <tt>subprocess</tt> and use their\nbatch versions whenever possible.</p>\n<p>I\u2019m developing this as needed, so feel free to ask if there\u2019s any\nfunctionality you want me to implement.</p>\n<div id=\"requirements\">\n<h2>Requirements</h2>\n<ul>\n<li>Python 3</li>\n<li>git-annex 6.20170101 (or later)</li>\n<li>pygit2 0.24 (or later)</li>\n</ul>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>To create a git-annex repository from scratch:</p>\n<pre>&gt;&gt;&gt; from pygit2 import init_repository\n&gt;&gt;&gt; from git_annex_adapter import init_annex\n\n&gt;&gt;&gt; init_repository('/path/to/repo')\npygit2.Repository('/path/to/repo/.git/')\n\n&gt;&gt;&gt; init_annex('/path/to/repo')\ngit_annex_adapter.repo.GitAnnexRepo(/path/to/repo/.git/)\n</pre>\n<p>To wrap an existing git-annex repository:</p>\n<pre>&gt;&gt;&gt; from git_annex_adapter.repo import GitAnnexRepo\n&gt;&gt;&gt; repo = GitAnnexRepo('/tmp/repo')\n</pre>\n<p>The GitAnnexRepo is a subclass of pygit2.Repository. Git-annex specific\nfunctionality is accessed via the <tt>annex</tt> property of it, which is\na mapping object from git-annex keys to <tt>AnnexedFile</tt> objects:</p>\n<pre>&gt;&gt;&gt; for key in repo.annex:\n...     print(key)\nSHA256E-s3--2c26...\nSHA256E-s3--baa5...\nSHA256E-s3--fcde...\n\n&gt;&gt;&gt; key = 'SHA256E-s3--2c26...'\n&gt;&gt;&gt; repo.annex[key]\ngit_annex_adapter.repo.AnnexedFile('SHA256E-s3--2c26...')\n</pre>\n<p>You can also get a tree representation of any git tree-ish object with\nannexed file entries replaced with <tt>AnnexedFile</tt> objects:</p>\n<pre>&gt;&gt;&gt; tree = repo.annex.get_file_tree() # treeish='HEAD'\n&gt;&gt;&gt; tree\ngit_annex_adapter.repo.AnnexedFileTree(4d7f...)\n\n&gt;&gt;&gt; set(tree)\n{'foo', 'bar', 'baz', 'README', 'directory'}\n\n&gt;&gt;&gt; tree['foo']\ngit_annex_adapter.repo.AnnexedFile(SHA256E-s3--2c26...)\n\n&gt;&gt;&gt; tree['directory']\ngit_annex_adapter.repo.AnnexedFileTree(8b54...)\n\n&gt;&gt;&gt; tree['directory/file'] # or tree['directory']['file']\n&lt;pygit2.Blob object at 0x...&gt;\n</pre>\n<p>The <tt>AnnexedFile</tt> objects can be used to access and manipulate\ninformation about a file.</p>\n<p>The <tt>metadata</tt> property of the <tt>AnnexedFile</tt> is a mutable mapping\nobject from fields to sets of values:</p>\n<pre>&gt;&gt;&gt; foo = tree['foo']\n&gt;&gt;&gt; for field, values in foo.metadata:\n...     print('{}: {}'.format(field, values))\nauthor: {'me'}\nnumbers: {'1', '2', '3'}\n\n&gt;&gt;&gt; foo.metadata['numbers'] |= {'0'}\n&gt;&gt;&gt; foo.metadata['numbers'] -= {'3'}\n&gt;&gt;&gt; foo.metadata['numbers']\n{'0', '2'}\n\n&gt;&gt;&gt; del foo.metadata['author']\n&gt;&gt;&gt; 'author' in foo.metadata\nFalse\n\n&gt;&gt;&gt; foo.metadata['lastchanged']\n'2017-07-19@15-00-00'\n</pre>\n</div>\n<div id=\"calling-processes\">\n<h2>Calling Processes</h2>\n<p>If you need low-level access to the git-annex processes, you can do it\nvia the classes included in <tt>process</tt> module:</p>\n<pre>&gt;&gt;&gt; from git_annex_adapter.process import ...\n</pre>\n<p>Subclasses of <tt>GitAnnexBatchProcess</tt> return relevant output (usually\none line or a dict object) whenever called with a line of input.\nFor example, <tt><span class=\"pre\">git-annex</span> metadata <span class=\"pre\">--batch</span> <span class=\"pre\">--json</span></tt>:</p>\n<pre>&gt;&gt;&gt; proc = GitAnnexMetadataBatchJsonProcess('/path/to/repo')\n&gt;&gt;&gt; proc(file='foo')\n{..., 'key':'SHA256E-s3--2c26...', 'fields': ...}\n\n&gt;&gt;&gt; proc(file='foo', fields={'numbers': ['1', '2', '3']})\n{..., 'key': ..., 'fields': {'numbers': ['1', '2', '3'], ...}}\n</pre>\n<p>Subclasses of <tt>GitAnnexRunner</tt> call a single program with\ndifferent arguments. They return a <tt>subprocess.CompletedProcess</tt>\nwhen called, which captures stdout and stderr. For example, to run\n<tt><span class=\"pre\">git-annex</span> version</tt>:</p>\n<pre>&gt;&gt;&gt; runner = GitAnnexVersionRunner('/path/to/repo')\n&gt;&gt;&gt; runner(raw=True)\nCompletedProcess(..., stdout='6.20170101', stderr='')\n\n&gt;&gt;&gt; print(runner().stdout)\ngit-annex version: 6.20170101\n...\n</pre>\n</div>\n\n          </div>"}, "last_serial": 4612192, "releases": {"0.2.0": [{"comment_text": "", "digests": {"md5": "5471e19b6b2043116ed3059f9a6fc002", "sha256": "7cf972c44fe72e04dbdf40896fab4a120ba84b3110b2cf2dcd22728a0d5d95c1"}, "downloads": -1, "filename": "git_annex_adapter-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "5471e19b6b2043116ed3059f9a6fc002", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 14867, "upload_time": "2017-08-23T20:28:56", "upload_time_iso_8601": "2017-08-23T20:28:56.304206Z", "url": "https://files.pythonhosted.org/packages/1d/10/2376f7a7005c6340cd620e211313116901944e0f595a798f51f405d74a97/git_annex_adapter-0.2.0-py3-none-any.whl", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "0eba2d376d794842d779ad1fdd2e1a1f", "sha256": "5a7a6bcd350e59b67b2ef1ac28c3fe95029f6245cabdfb57c6688aaafdd3734b"}, "downloads": -1, "filename": "git_annex_adapter-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "0eba2d376d794842d779ad1fdd2e1a1f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 24899, "upload_time": "2018-12-18T13:21:14", "upload_time_iso_8601": "2018-12-18T13:21:14.041020Z", "url": "https://files.pythonhosted.org/packages/55/3d/48bd197d4a93f5679d4d421c4f55ae6ba1c2b6e6dae48b00f92c9f53639d/git_annex_adapter-0.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a379cef28180b227855128d684cf0e26", "sha256": "c132f7e53596a3efcabb5bc7bc582be6bc49f37be44eb4ec9e2163160dae3d20"}, "downloads": -1, "filename": "git-annex-adapter-0.2.1.tar.gz", "has_sig": false, "md5_digest": "a379cef28180b227855128d684cf0e26", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11687, "upload_time": "2018-12-18T13:21:15", "upload_time_iso_8601": "2018-12-18T13:21:15.613348Z", "url": "https://files.pythonhosted.org/packages/11/d5/262e2335de70e0d8b63a2137ae787198a1afcd3ac856e1565316e162dfa2/git-annex-adapter-0.2.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "0eba2d376d794842d779ad1fdd2e1a1f", "sha256": "5a7a6bcd350e59b67b2ef1ac28c3fe95029f6245cabdfb57c6688aaafdd3734b"}, "downloads": -1, "filename": "git_annex_adapter-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "0eba2d376d794842d779ad1fdd2e1a1f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 24899, "upload_time": "2018-12-18T13:21:14", "upload_time_iso_8601": "2018-12-18T13:21:14.041020Z", "url": "https://files.pythonhosted.org/packages/55/3d/48bd197d4a93f5679d4d421c4f55ae6ba1c2b6e6dae48b00f92c9f53639d/git_annex_adapter-0.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a379cef28180b227855128d684cf0e26", "sha256": "c132f7e53596a3efcabb5bc7bc582be6bc49f37be44eb4ec9e2163160dae3d20"}, "downloads": -1, "filename": "git-annex-adapter-0.2.1.tar.gz", "has_sig": false, "md5_digest": "a379cef28180b227855128d684cf0e26", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11687, "upload_time": "2018-12-18T13:21:15", "upload_time_iso_8601": "2018-12-18T13:21:15.613348Z", "url": "https://files.pythonhosted.org/packages/11/d5/262e2335de70e0d8b63a2137ae787198a1afcd3ac856e1565316e162dfa2/git-annex-adapter-0.2.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:57:11 2020"}