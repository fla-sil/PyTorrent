{"info": {"author": "Alexandre Decan", "author_email": "", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "Intended Audience :: Education", "Intended Audience :: Information Technology", "Intended Audience :: Science/Research", "License :: OSI Approved :: GNU Lesser General Public License v3 (LGPLv3)", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: 3 :: Only", "Topic :: Scientific/Engineering :: Mathematics"], "description": "# portion - data structure and operations for intervals\n\n[![Travis](https://travis-ci.org/AlexandreDecan/portion.svg?branch=master)](https://travis-ci.org/AlexandreDecan/portion)\n[![Coverage Status](https://coveralls.io/repos/github/AlexandreDecan/portion/badge.svg?branch=master)](https://coveralls.io/github/AlexandreDecan/portion?branch=master)\n[![License](https://badgen.net/pypi/license/portion)](https://github.com/AlexandreDecan/portion/blob/master/LICENSE.txt)\n[![PyPI](https://badgen.net/pypi/v/portion)](https://pypi.org/project/portion)\n[![Commits](https://badgen.net/github/last-commit/AlexandreDecan/portion)](https://github.com/AlexandreDecan/portion/commits/)\n\n\nThe `portion` library (formerly distributed as `python-intervals`) provides data structure and operations for intervals in Python 3.5+.\n\n - Support intervals of any (comparable) objects.\n - Closed or open, finite or (semi-)infinite intervals.\n - Interval sets (union of atomic intervals) are supported.\n - Automatic simplification of intervals.\n - Support comparison, transformation, intersection, union, complement, difference and containment.\n - Provide test for emptiness, atomicity, overlap and adjacency.\n - Discrete iterations on the values of an interval.\n - Dict-like structure to map intervals to data.\n - Import and export intervals to strings and to Python built-in data types.\n - Heavily tested with high code coverage.\n\n**Latest release:**\n - `portion`: 2.0.1 on 2020-03-15 ([documentation](https://github.com/AlexandreDecan/portion/blob/2.0.0/README.md), [changes](https://github.com/AlexandreDecan/portion/blob/2.0.0/CHANGELOG.md)).\n - `python-intervals`: 1.10.0 on 2019-09-26 ([documentation](https://github.com/AlexandreDecan/portion/blob/1.10.0/README.md), [changes](https://github.com/AlexandreDecan/portion/blob/1.10.0/README.md#changelog)).\n\n Note that `python-intervals` will no longer receive updates since it has been replaced by `portion`.\n\n\n## Table of contents\n\n  * [Installation](#installation)\n  * [Documentation & usage](#documentation--usage)\n      * [Interval creation](#interval-creation)\n      * [Interval bounds & attributes](#interval-bounds--attributes)\n      * [Interval operations](#interval-operations)\n      * [Comparison operators](#comparison-operators)\n      * [Interval transformation](#interval-transformation)\n      * [Discrete iteration](#discrete-iteration)\n      * [Map intervals to data](#map-intervals-to-data)\n      * [Import & export intervals to strings](#import--export-intervals-to-strings)\n      * [Import & export intervals to Python built-in data types](#import--export-intervals-to-python-built-in-data-types)\n  * [Changelog](#changelog)\n  * [Contributions](#contributions)\n  * [License](#license)\n\n\n## Installation\n\nYou can use `pip` to install it, as usual: `pip install portion`.\n\nThis will install the latest available version from [PyPI](https://pypi.org/project/portion).\nPre-releases are available from the *master* branch on [GitHub](https://github.com/AlexandreDecan/portion)\nand can be installed with `pip install git+https://github.com/AlexandreDecan/portion`.\n\nThe test environment can be installed with `pip install portion[test]` and relies on [pytest](https://docs.pytest.org/en/latest/).\n\n\n## Documentation & usage\n\n### Interval creation\n\nAssuming this library is imported using `import portion as P`, intervals can be easily\ncreated using one of the following helpers:\n\n```python\n>>> P.open(1, 2)\n(1,2)\n>>> P.closed(1, 2)\n[1,2]\n>>> P.openclosed(1, 2)\n(1,2]\n>>> P.closedopen(1, 2)\n[1,2)\n>>> P.singleton(1)\n[1]\n>>> P.empty()\n()\n\n```\n\nThe bounds of an interval can be any arbitrary values, as long as they are comparable:\n\n```python\n>>> P.closed(1.2, 2.4)\n[1.2,2.4]\n>>> P.closed('a', 'z')\n['a','z']\n>>> import datetime\n>>> P.closed(datetime.date(2011, 3, 15), datetime.date(2013, 10, 10))\n[datetime.date(2011, 3, 15),datetime.date(2013, 10, 10)]\n\n```\n\n\nInfinite and semi-infinite intervals are supported using `P.inf` and `-P.inf` as upper or lower bounds.\nThese two objects support comparison with any other object.\nWhen infinities are used as a lower or upper bound, the corresponding boundary is automatically converted to an open one.\n\n```python\n>>> P.inf > 'a', P.inf > 0, P.inf > True\n(True, True, True)\n>>> P.openclosed(-P.inf, 0)\n(-inf,0]\n>>> P.closed(-P.inf, P.inf)  # Automatically converted to an open interval\n(-inf,+inf)\n\n```\n\nEmpty intervals always resolve to `(P.inf, -P.inf)`, regardless of the provided bounds:\n\n```python\n>>> P.empty() == P.open(P.inf, -P.inf)\nTrue\n>>> P.closed(4, 3) == P.open(P.inf, -P.inf)\nTrue\n>>> P.openclosed('a', 'a') == P.open(P.inf, -P.inf)\nTrue\n\n```\n\nIntervals created with this library are `Interval` instances.\nAn `Interval` instance is a disjunction of atomic intervals each representing a single interval (e.g. `[1,2]`).\nIntervals can be iterated to access the underlying atomic intervals, sorted by their lower and upper bounds.\n\n```python\n>>> list(P.open(10, 11) | P.closed(0, 1) | P.closed(20, 21))\n[[0,1], (10,11), [20,21]]\n\n```\n\nAtomic intervals can also be retrieved by position:\n\n```python\n>>> (P.open(10, 11) | P.closed(0, 1) | P.closed(20, 21))[0]\n[0,1]\n>>> (P.open(10, 11) | P.closed(0, 1) | P.closed(20, 21))[-2]\n(10,11)\n\n```\n\nFor convenience, intervals are automatically simplified:\n\n```python\n>>> P.closed(0, 2) | P.closed(2, 4)\n[0,4]\n>>> P.closed(1, 2) | P.closed(3, 4) | P.closed(2, 3)\n[1,4]\n>>> P.empty() | P.closed(0, 1)\n[0,1]\n>>> P.closed(1, 2) | P.closed(2, 3) | P.closed(4, 5)\n[1,3] | [4,5]\n\n```\n\nNote that discrete intervals are **not** supported by `portion` (but they can be simulated though).\nFor example, combining `[0,1]` with `[2,3]` will **not** result in `[0,3]` even if there is\nno integer between `1` and `2`.\n\n\n\n[&uparrow; back to top](#table-of-contents)\n### Interval bounds & attributes\n\n\nAn `Interval` defines the following properties:\n\n - `i.empty` is `True` if and only if the interval is empty.\n   ```python\n   >>> P.closed(0, 1).empty\n   False\n   >>> P.closed(0, 0).empty\n   False\n   >>> P.openclosed(0, 0).empty\n   True\n   >>> P.empty().empty\n   True\n\n   ```\n\n - `i.atomic` is `True` if and only if the interval is a disjunction of a single (possibly empty) interval.\n   ```python\n   >>> P.closed(0, 2).atomic\n   True\n   >>> (P.closed(0, 1) | P.closed(1, 2)).atomic\n   True\n   >>> (P.closed(0, 1) | P.closed(2, 3)).atomic\n   False\n\n   ```\n\n - `i.enclosure` refers to the smallest atomic interval that includes the current one.\n   ```python\n   >>> (P.closed(0, 1) | P.open(2, 3)).enclosure\n   [0,3)\n\n   ```\n\nThe left and right boundaries, and the lower and upper bounds of an interval can be respectively accessed\nwith its `left`, `right`, `lower` and `upper` attributes.\nThe `left` and `right` bounds are either `P.CLOSED` or `P.OPEN`.\nBy definition, `P.CLOSED == ~P.OPEN` and vice-versa.\n\n```python\n>> P.CLOSED, P.OPEN\nCLOSED, OPEN\n>>> x = P.closedopen(0, 1)\n>>> x.left, x.lower, x.upper, x.right\n(CLOSED, 0, 1, OPEN)\n\n```\n\nIf the interval is not atomic, then `left` and `lower` refer to the lower bound of its enclosure,\nwhile `right` and `upper` refer to the upper bound of its enclosure:\n\n```python\n>>> x = P.open(0, 1) | P.closed(3, 4)\n>>> x.left, x.lower, x.upper, x.right\n(OPEN, 0, 4, CLOSED)\n\n```\n\nOne can easily check for some interval properties based on the bounds of an interval:\n\n```python\n>>> x = P.openclosed(-P.inf, 0)\n>>> # Check that interval is left/right closed\n>>> x.left == P.CLOSED, x.right == P.CLOSED\n(False, True)\n>>> # Check that interval is left/right bounded\n>>> x.lower == -P.inf, x.upper == P.inf\n(True, False)\n>>> # Check for singleton\n>>> x.lower == x.upper\nFalse\n\n```\n\n\n\n[&uparrow; back to top](#table-of-contents)\n### Interval operations\n\n`Interval` instances support the following operations:\n\n - `i.intersection(other)` and `i & other` return the intersection of two intervals.\n   ```python\n   >>> P.closed(0, 2) & P.closed(1, 3)\n   [1,2]\n   >>> P.closed(0, 4) & P.open(2, 3)\n   (2,3)\n   >>> P.closed(0, 2) & P.closed(2, 3)\n   [2]\n   >>> P.closed(0, 2) & P.closed(3, 4)\n   ()\n\n   ```\n\n - `i.union(other)` and `i | other` return the union of two intervals.\n   ```python\n   >>> P.closed(0, 1) | P.closed(1, 2)\n   [0,2]\n   >>> P.closed(0, 1) | P.closed(2, 3)\n   [0,1] | [2,3]\n\n   ```\n\n - `i.complement(other)` and `~i` return the complement of the interval.\n   ```python\n   >>> ~P.closed(0, 1)\n   (-inf,0) | (1,+inf)\n   >>> ~(P.open(-P.inf, 0) | P.open(1, P.inf))\n   [0,1]\n   >>> ~P.open(-P.inf, P.inf)\n   ()\n\n   ```\n\n - `i.difference(other)` and `i - other` return the difference between `i` and `other`.\n   ```python\n   >>> P.closed(0,2) - P.closed(1,2)\n   [0,1)\n   >>> P.closed(0, 4) - P.closed(1, 2)\n   [0,1) | (2,4]\n\n   ```\n\n - `i.contains(other)` and `other in i` hold if given item is contained in the interval.\n It supports intervals and arbitrary comparable values.\n   ```python\n   >>> 2 in P.closed(0, 2)\n   True\n   >>> 2 in P.open(0, 2)\n   False\n   >>> P.open(0, 1) in P.closed(0, 2)\n   True\n\n   ```\n\n - `i.adjacent(other)` tests if the two intervals are adjacent.\n Two intervals are adjacent if their intersection is empty, and their union is an atomic interval.\n   ```python\n   >>> P.closed(0, 1).adjacent(P.openclosed(1, 2))\n   True\n   >>> P.closed(0, 1).adjacent(P.closed(1, 2))\n   False\n   >>> (P.closed(0, 1) | P.closed(2, 3)).adjacent(P.open(1, 2) | P.open(3, 4))\n   True\n   >>> P.closed(0, 1).adjacent(P.open(1, 2) | P.open(10, 11))\n   False\n\n   ```\n\n - `i.overlaps(other)` tests if there is an overlap between two intervals.\n   ```python\n   >>> P.closed(1, 2).overlaps(P.closed(2, 3))\n   True\n   >>> P.closed(1, 2).overlaps(P.open(2, 3))\n   False\n\n   ```\n\n\n\n[&uparrow; back to top](#table-of-contents)\n### Comparison operators\n\nEquality between intervals can be checked with the classical `==` operator:\n\n```python\n>>> P.closed(0, 2) == P.closed(0, 1) | P.closed(1, 2)\nTrue\n>>> P.closed(0, 2) == P.open(0, 2)\nFalse\n\n```\n\nMoreover, intervals are comparable using e.g. `>`, `>=`, `<` or `<=`.\nThese comparison operators have a different behaviour than the usual ones.\nFor instance, `a < b` holds if `a` is entirely on the left of the lower bound of `b` and `a > b` holds if `a` is entirely\non the right of the upper bound of `b`.\n\n```python\n>>> P.closed(0, 1) < P.closed(2, 3)\nTrue\n>>> P.closed(0, 1) < P.closed(1, 2)\nFalse\n\n```\n\nSimilarly, `a <= b` holds if `a` is entirely on the left of the upper bound of `b`, and `a >= b`\nholds if `a` is entirely on the right of the lower bound of `b`.\n\n```python\n>>> P.closed(0, 1) <= P.closed(2, 3)\nTrue\n>>> P.closed(0, 2) <= P.closed(1, 3)\nTrue\n>>> P.closed(0, 3) <= P.closed(1, 2)\nFalse\n\n```\n\nIntervals can also be compared with single values. If `i` is an interval and `x` a value, then\n`x < i` holds if `x` is on the left of the lower bound of `i` and `x <= i` holds if `x` is on the\nleft of the upper bound of `i`.\n\n```python\n>>> 5 < P.closed(0, 10)\nFalse\n>>> 5 <= P.closed(0, 10)\nTrue\n>>> P.closed(0, 10) < 5\nFalse\n>>> P.closed(0, 10) <= 5\nTrue\n\n```\n\nThis behaviour is similar to the one that could be obtained by first converting `x` to a\nsingleton interval (except for infinities since they resolve to empty intervals).\n\nNote that all these semantics differ from classical comparison operators.\nAs a consequence, some intervals are never comparable in the classical sense, as illustrated hereafter:\n\n```python\n>>> P.closed(0, 4) <= P.closed(1, 2) or P.closed(0, 4) >= P.closed(1, 2)\nFalse\n>>> P.closed(0, 4) < P.closed(1, 2) or P.closed(0, 4) > P.closed(1, 2)\nFalse\n>>> P.empty() < P.empty()\nTrue\n>>> P.empty() < P.closed(0, 1) and P.empty() > P.closed(0, 1)\nTrue\n\n```\n\nFinally, intervals are hashable as long as their bounds are hashable (and we have defined a hash value for `P.inf` and `-P.inf`).\n\n\n\n[&uparrow; back to top](#table-of-contents)\n### Interval transformation\n\nIntervals are immutable but provide a `replace` method to create a new interval based on the\ncurrent one. This method accepts four optional parameters `left`, `lower`, `upper`, and `right`:\n\n```python\n>>> i = P.closed(0, 2)\n>>> i.replace(P.OPEN, -1, 3, P.CLOSED)\n(-1,3]\n>>> i.replace(lower=1, right=P.OPEN)\n[1,2)\n\n```\n\nFunctions can be passed instead of values. If a function is passed, it is called with the current corresponding\nvalue except if the corresponding bound is an infinity and parameter `ignore_inf` if set to `False`.\n\n```python\n>>> P.closed(0, 2).replace(upper=lambda x: 2 * x)\n[0,4]\n>>> i = P.closedopen(0, P.inf)\n>>> i.replace(upper=lambda x: 10)  # No change, infinity is ignored\n[0,+inf)\n>>> i.replace(upper=lambda x: 10, ignore_inf=False)  # Infinity is not ignored\n[0,10)\n\n```\n\nWhen `replace` is applied on an interval that is not atomic, it is extended and/or restricted such that\nits enclosure satisfies the new bounds.\n\n```python\n>>> i = P.openclosed(0, 1) | P.closed(5, 10)\n>>> i.replace(P.CLOSED, -1, 8, P.OPEN)\n[-1,1] | [5,8)\n>>> i.replace(lower=4)\n(4,10]\n\n```\n\nTo apply an arbitrary transformation on an interval, intervals expose an `apply` method.\nThis method accepts a function that will be applied on each of the underlying atomic intervals to perform the desired transformation.\nThe function is expected to return either an `Interval`, or a 4-uple `(left, lower, upper, right)`.\n\n```python\n>>> i = P.closed(2, 3) | P.open(4, 5)\n>>> # Increment bound values\n>>> i.apply(lambda x: (x.left, x.lower + 1, x.upper + 1, x.right))\n[3,4] | (5,6)\n>>> # Invert bounds\n>>> i.apply(lambda x: (~x.left, x.lower, x.upper, ~x.right))\n(2,3) | [4,5]\n\n```\n\nThe `apply` method is very powerful when used in combination with `replace`.\nBecause the latter allows functions to be passed as parameters and can ignore infinities, it can be\nconveniently used to transform intervals in presence of infinities.\n\n```python\n>>> i = P.openclosed(-P.inf, 0) | P.closed(3, 4) | P.closedopen(8, P.inf)\n>>> # Increment bound values\n>>> i.apply(lambda x: x.replace(upper=lambda v: v + 1))\n(-inf,1] | [3,5] | [8,+inf)\n>>> # Intervals are still automatically simplified\n>>> i.apply(lambda x: x.replace(lower=lambda v: v * 2))\n(-inf,0] | [16,+inf)\n>>> # Invert bounds\n>>> i.apply(lambda x: x.replace(left=lambda v: ~v, right=lambda v: ~v))\n(-inf,0) | (3,4) | (8,+inf)\n>>> # Replace infinities with -10 and 10\n>>> conv = lambda v: -10 if v == -P.inf else (10 if v == P.inf else v)\n>>> i.apply(lambda x: x.replace(lower=conv, upper=conv, ignore_inf=False))\n(-10,0] | [3,4] | [8,10)\n\n```\n\n\n[&uparrow; back to top](#table-of-contents)\n### Discrete iteration\n\nThe `iterate` function takes an interval, and returns a generator to iterate over\nthe values of an interval. Obviously, as intervals are continuous, it is required to specify the\n `step` between consecutive values. The iteration then starts from the lower bound and ends on the upper one,\ngiven they are not excluded by the interval:\n\n```python\n>>> list(P.iterate(P.closed(0, 3), step=1))\n[0, 1, 2, 3]\n>>> list(P.iterate(P.closed(0, 3), step=2))\n[0, 2]\n>>> list(P.iterate(P.open(0, 3), step=2))\n[2]\n\n```\n\nWhen an interval is not atomic, `iterate` consecutively iterates on all underlying atomic\nintervals, starting from each lower bound and ending on each upper one:\n\n```python\n>>> list(P.iterate(P.singleton(0) | P.singleton(3) | P.singleton(5), step=2))  # Won't be [0]\n[0, 3, 5]\n>>> list(P.iterate(P.closed(0, 2) | P.closed(4, 6), step=3))  # Won't be [0, 6]\n[0, 4]\n\n```\n\nBy default, the iteration always starts on the lower bound of each underlying atomic interval.\nThe `base` parameter can be used to change this behaviour, by specifying how the initial value to start\nthe iteration from must be computed. This parameter accepts a callable that is called with the lower\nbound of each underlying atomic interval, and that returns the initial value to start the iteration from.\nIt can be helpful to deal with (semi-)infinite intervals, or to *align* the generated values of the iterator:\n\n```python\n>>> # Align on integers\n>>> list(P.iterate(P.closed(0.3, 4.9), step=1, base=int))\n[1, 2, 3, 4]\n>>> # Restrict values of a (semi-)infinite interval\n>>> list(P.iterate(P.openclosed(-P.inf, 2), step=1, base=lambda x: max(0, x)))\n[0, 1, 2]\n\n```\n\nThe `base` parameter can be used to change how `iterate` applies on unions of atomic interval, by\nspecifying a function that returns a single value, as illustrated next:\n\n```python\n>>> base = lambda x: 0\n>>> list(P.iterate(P.singleton(0) | P.singleton(3) | P.singleton(5), step=2, base=base))\n[0]\n>>> list(P.iterate(P.closed(0, 2) | P.closed(4, 6), step=3, base=base))\n[0, 6]\n\n```\n\nNotice that defining `base` such that it returns a single value can be extremely inefficient in\nterms of performance when the intervals are \"far apart\" each other (i.e., when the *gaps* between\natomic intervals are large).\n\nFinally, iteration can be performed in reverse order by specifying `reverse=True`.\n\n```python\n>>> list(P.iterate(P.closed(0, 3), step=-1, reverse=True))  # Mind step=-1\n[3, 2, 1, 0]\n>>> list(P.iterate(P.closed(0, 3), step=-2, reverse=True))  # Mind step=-2\n[3, 1]\n\n```\n\nAgain, this library does not make any assumption about the objects being used in an interval, as long as they\nare comparable. However, it is not always possible to provide a meaningful value for `step` (e.g., what would\nbe the step between two consecutive characters?). In these cases, a callable can be passed instead of a value.\nThis callable will be called with the current value, and is expected to return the next possible value.\n\n```python\n>>> list(P.iterate(P.closed('a', 'd'), step=lambda d: chr(ord(d) + 1)))\n['a', 'b', 'c', 'd']\n>>> # Since we reversed the order, we changed plus to minus in step.\n>>> list(P.iterate(P.closed('a', 'd'), step=lambda d: chr(ord(d) - 1), reverse=True))\n['d', 'c', 'b', 'a']\n\n```\n\n\n\n[&uparrow; back to top](#table-of-contents)\n### Map intervals to data\n\nThe library provides an `IntervalDict` class, a `dict`-like data structure to store and query data\nalong with intervals. Any value can be stored in such data structure as long as it supports\nequality.\n\n\n```python\n>>> d = P.IntervalDict()\n>>> d[P.closed(0, 3)] = 'banana'\n>>> d[4] = 'apple'\n>>> d\n{[0,3]: 'banana', [4]: 'apple'}\n\n```\n\nWhen a value is defined for an interval that overlaps an existing one, it is automatically updated\nto take the new value into account:\n\n```python\n>>> d[P.closed(2, 4)] = 'orange'\n>>> d\n{[0,2): 'banana', [2,4]: 'orange'}\n\n```\n\nAn `IntervalDict` can be queried using single values or intervals. If a single value is used as a\nkey, its behaviour corresponds to the one of a classical `dict`:\n\n```python\n>>> d[2]\n'orange'\n>>> d[5]  # Key does not exist\nTraceback (most recent call last):\n ...\nKeyError: 5\n>>> d.get(5, default=0)\n0\n\n```\n\nWhen an interval is used as a key, a new `IntervalDict` containing the values\nfor that interval is returned:\n\n```python\n>>> d[~P.empty()]  # Get all values, similar to d.copy()\n{[0,2): 'banana', [2,4]: 'orange'}\n>>> d[P.closed(1, 3)]\n{[1,2): 'banana', [2,3]: 'orange'}\n>>> d[P.closed(-2, 1)]\n{[0,1]: 'banana'}\n>>> d[P.closed(-2, -1)]\n{}\n\n```\n\nBy using `.get`, a default value (defaulting to `None`) can be specified.\nThis value is used to \"fill the gaps\" if the queried interval is not completely\ncovered by the `IntervalDict`:\n\n```python\n>>> d.get(P.closed(-2, 1), default='peach')\n{[-2,0): 'peach', [0,1]: 'banana'}\n>>> d.get(P.closed(-2, -1), default='peach')\n{[-2,-1]: 'peach'}\n>>> d.get(P.singleton(1), default='peach')  # Key is covered, default is not used\n{[1]: 'banana'}\n\n```\n\nFor convenience, an `IntervalDict` provides a way to look for specific data values.\nThe `.find` method always returns a (possibly empty) `Interval` instance for which given\nvalue is defined:\n\n```python\n>>> d.find('banana')\n[0,2)\n>>> d.find('orange')\n[2,4]\n>>> d.find('carrot')\n()\n\n```\n\nThe active domain of an `IntervalDict` can be retrieved with its `.domain` method.\nThis method always returns a single `Interval` instance, where `.keys` returns a list\nof disjoint intervals, one for each stored value.\n\n```python\n>>> d.domain()\n[0,4]\n>>> d.keys()\n[[0,2), [2,4]]\n>>> d.values()\n['banana', 'orange']\n>>> d.items()\n[([0,2), 'banana'), ([2,4], 'orange')]\n\n```\n\nTwo `IntervalDict` instances can be combined together using the `.combine` method.\nThis method returns a new `IntervalDict` whose keys and values are taken from the two\nsource `IntervalDict`. Values corresponding to non-intersecting keys are simply copied,\nwhile values corresponding to intersecting keys are combined together using the provided\nfunction, as illustrated hereafter:\n\n```python\n>>> d1 = P.IntervalDict({P.closed(0, 2): 'banana'})\n>>> d2 = P.IntervalDict({P.closed(1, 3): 'orange'})\n>>> concat = lambda x, y: x + '/' + y\n>>> d1.combine(d2, how=concat)\n{[0,1): 'banana', [1,2]: 'banana/orange', (2,3]: 'orange'}\n\n```\n\nResulting keys always correspond to an outer join. Other joins can be easily simulated\nby querying the resulting `IntervalDict` as follows:\n\n```python\n>>> d = d1.combine(d2, how=concat)\n>>> d[d1.domain()]  # Left join\n{[0,1): 'banana', [1,2]: 'banana/orange'}\n>>> d[d2.domain()]  # Right join\n{[1,2]: 'banana/orange', (2,3]: 'orange'}\n>>> d[d1.domain() & d2.domain()]  # Inner join\n{[1,2]: 'banana/orange'}\n\n```\n\nFinally, similarly to a `dict`, an `IntervalDict` also supports `len`, `in` and `del`, and defines\n`.clear`, `.copy`, `.update`, `.pop`, `.popitem`, and `.setdefault`.\n\n\n[&uparrow; back to top](#table-of-contents)\n### Import & export intervals to strings\n\nIntervals can be exported to string, either using `repr` (as illustrated above) or with the `to_string` function.\n\n```python\n>>> P.to_string(P.closedopen(0, 1))\n'[0,1)'\n\n```\n\nThe way string representations are built can be easily parametrized using the various parameters supported by\n`to_string`:\n\n```python\n>>> params = {\n...   'disj': ' or ',\n...   'sep': ' - ',\n...   'left_closed': '<',\n...   'right_closed': '>',\n...   'left_open': '..',\n...   'right_open': '..',\n...   'pinf': '+oo',\n...   'ninf': '-oo',\n...   'conv': lambda v: '\"{}\"'.format(v),\n... }\n>>> x = P.openclosed(0, 1) | P.closed(2, P.inf)\n>>> P.to_string(x, **params)\n'..\"0\" - \"1\"> or <\"2\" - +oo..'\n\n```\n\nSimilarly, intervals can be created from a string using the `from_string` function.\nA conversion function (`conv` parameter) has to be provided to convert a bound (as string) to a value.\n\n```python\n>>> P.from_string('[0, 1]', conv=int) == P.closed(0, 1)\nTrue\n>>> P.from_string('[1.2]', conv=float) == P.singleton(1.2)\nTrue\n>>> converter = lambda s: datetime.datetime.strptime(s, '%Y/%m/%d')\n>>> P.from_string('[2011/03/15, 2013/10/10]', conv=converter)\n[datetime.datetime(2011, 3, 15, 0, 0),datetime.datetime(2013, 10, 10, 0, 0)]\n\n```\n\nSimilarly to `to_string`, function `from_string` can be parametrized to deal with more elaborated inputs.\nNotice that as `from_string` expects regular expression patterns, we need to escape some characters.\n\n```python\n>>> s = '..\"0\" - \"1\"> or <\"2\" - +oo..'\n>>> params = {\n...   'disj': ' or ',\n...   'sep': ' - ',\n...   'left_closed': '<',\n...   'right_closed': '>',\n...   'left_open': r'\\.\\.',  # from_string expects regular expression patterns\n...   'right_open': r'\\.\\.',  # from_string expects regular expression patterns\n...   'pinf': r'\\+oo',  # from_string expects regular expression patterns\n...   'ninf': '-oo',\n...   'conv': lambda v: int(v[1:-1]),\n... }\n>>> P.from_string(s, **params)\n(0,1] | [2,+inf)\n\n```\n\nWhen a bound contains a comma or has a representation that cannot be automatically parsed with `from_string`,\nthe `bound` parameter can be used to specify the regular expression that should be used to match its representation.\n\n```python\n>>> s = '[(0, 1), (2, 3)]'  # Bounds are expected to be tuples\n>>> P.from_string(s, conv=eval, bound=r'\\(.+?\\)')\n[(0, 1),(2, 3)]\n\n```\n\n\n[&uparrow; back to top](#table-of-contents)\n### Import & export intervals to Python built-in data types\n\nIntervals can also be exported to a list of 4-uples with `to_data`, e.g., to support JSON serialization.\n`P.CLOSED` and `P.OPEN` are represented by Boolean values `True` (inclusive) and `False` (exclusive).\n\n```python\n>>> P.to_data(P.openclosed(0, 2))\n[(False, 0, 2, True)]\n\n```\n\nThe values used to represent positive and negative infinities can be specified with\n`pinf` and `ninf`. They default to `float('inf')` and `float('-inf')` respectively.\n\n```python\n>>> x = P.openclosed(0, 1) | P.closedopen(2, P.inf)\n>>> P.to_data(x)\n[(False, 0, 1, True), (True, 2, inf, False)]\n\n```\n\nThe function to convert bounds can be specified with the `conv` parameter.\n\n```python\n>>> x = P.closedopen(datetime.date(2011, 3, 15), datetime.date(2013, 10, 10))\n>>> P.to_data(x, conv=lambda v: (v.year, v.month, v.day))\n[(True, (2011, 3, 15), (2013, 10, 10), False)]\n\n```\n\nIntervals can be imported from such a list of 4-tuples with `from_data`.\nThe same set of parameters can be used to specify how bounds and infinities are converted.\n\n```python\n>>> x = [(True, (2011, 3, 15), (2013, 10, 10), False)]\n>>> P.from_data(x, conv=lambda v: datetime.date(*v))\n[datetime.date(2011, 3, 15),datetime.date(2013, 10, 10))\n\n```\n\n[&uparrow; back to top](#table-of-contents)\n## Changelog\n\nThis library adheres to a [semantic versioning](https://semver.org) scheme.\nSee [CHANGELOG.md](https://github.com/AlexandreDecan/portion/blob/master/CHANGELOG.md) for the list of changes.\n\n\n\n## Contributions\n\nContributions are very welcome!\nFeel free to report bugs or suggest new features using GitHub issues and/or pull requests.\n\n\n\n## License\n\nDistributed under [LGPLv3 - GNU Lesser General Public License, version 3](https://github.com/AlexandreDecan/portion/blob/master/LICENSE.txt).\n\nYou can refer to this library using:\n\n```\n@software{portion,\n  author = {Decan, Alexandre},\n  title = {portion: Python data structure and operations for intervals},\n  url = {https://github.com/AlexandreDecan/portion},\n}\n```\n\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/AlexandreDecan/portion", "keywords": "interval operation range math", "license": "LGPLv3", "maintainer": "", "maintainer_email": "", "name": "portion", "package_url": "https://pypi.org/project/portion/", "platform": "", "project_url": "https://pypi.org/project/portion/", "project_urls": {"Homepage": "https://github.com/AlexandreDecan/portion"}, "release_url": "https://pypi.org/project/portion/2.0.1/", "requires_dist": ["pytest (~=5.0.1) ; extra == 'test'", "coverage (~=5.0.3) ; extra == 'travis'", "coveralls (~=1.11.1) ; extra == 'travis'"], "requires_python": "~=3.5", "summary": "Python data structure and operations for intervals", "version": "2.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>portion - data structure and operations for intervals</h1>\n<p><a href=\"https://travis-ci.org/AlexandreDecan/portion\" rel=\"nofollow\"><img alt=\"Travis\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/06e14a4a521c7c57f04c988f813db02c90b721fb/68747470733a2f2f7472617669732d63692e6f72672f416c6578616e647265446563616e2f706f7274696f6e2e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://coveralls.io/github/AlexandreDecan/portion?branch=master\" rel=\"nofollow\"><img alt=\"Coverage Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/091b8f01c21165e33847b2b06280ac0677f303e7/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f416c6578616e647265446563616e2f706f7274696f6e2f62616467652e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://github.com/AlexandreDecan/portion/blob/master/LICENSE.txt\" rel=\"nofollow\"><img alt=\"License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a839bcfb4459f30a6a2cf3d74ea2544073204088/68747470733a2f2f62616467656e2e6e65742f707970692f6c6963656e73652f706f7274696f6e\"></a>\n<a href=\"https://pypi.org/project/portion\" rel=\"nofollow\"><img alt=\"PyPI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9562d88bdcfeead6ea93a3b9d964c14eb5ac0d0a/68747470733a2f2f62616467656e2e6e65742f707970692f762f706f7274696f6e\"></a>\n<a href=\"https://github.com/AlexandreDecan/portion/commits/\" rel=\"nofollow\"><img alt=\"Commits\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/019ea38cfb178b5dc7a0f0d4826f1053552f79c8/68747470733a2f2f62616467656e2e6e65742f6769746875622f6c6173742d636f6d6d69742f416c6578616e647265446563616e2f706f7274696f6e\"></a></p>\n<p>The <code>portion</code> library (formerly distributed as <code>python-intervals</code>) provides data structure and operations for intervals in Python 3.5+.</p>\n<ul>\n<li>Support intervals of any (comparable) objects.</li>\n<li>Closed or open, finite or (semi-)infinite intervals.</li>\n<li>Interval sets (union of atomic intervals) are supported.</li>\n<li>Automatic simplification of intervals.</li>\n<li>Support comparison, transformation, intersection, union, complement, difference and containment.</li>\n<li>Provide test for emptiness, atomicity, overlap and adjacency.</li>\n<li>Discrete iterations on the values of an interval.</li>\n<li>Dict-like structure to map intervals to data.</li>\n<li>Import and export intervals to strings and to Python built-in data types.</li>\n<li>Heavily tested with high code coverage.</li>\n</ul>\n<p><strong>Latest release:</strong></p>\n<ul>\n<li><code>portion</code>: 2.0.1 on 2020-03-15 (<a href=\"https://github.com/AlexandreDecan/portion/blob/2.0.0/README.md\" rel=\"nofollow\">documentation</a>, <a href=\"https://github.com/AlexandreDecan/portion/blob/2.0.0/CHANGELOG.md\" rel=\"nofollow\">changes</a>).</li>\n<li><code>python-intervals</code>: 1.10.0 on 2019-09-26 (<a href=\"https://github.com/AlexandreDecan/portion/blob/1.10.0/README.md\" rel=\"nofollow\">documentation</a>, <a href=\"https://github.com/AlexandreDecan/portion/blob/1.10.0/README.md#changelog\" rel=\"nofollow\">changes</a>).</li>\n</ul>\n<p>Note that <code>python-intervals</code> will no longer receive updates since it has been replaced by <code>portion</code>.</p>\n<h2>Table of contents</h2>\n<ul>\n<li><a href=\"#installation\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"#documentation--usage\" rel=\"nofollow\">Documentation &amp; usage</a>\n<ul>\n<li><a href=\"#interval-creation\" rel=\"nofollow\">Interval creation</a></li>\n<li><a href=\"#interval-bounds--attributes\" rel=\"nofollow\">Interval bounds &amp; attributes</a></li>\n<li><a href=\"#interval-operations\" rel=\"nofollow\">Interval operations</a></li>\n<li><a href=\"#comparison-operators\" rel=\"nofollow\">Comparison operators</a></li>\n<li><a href=\"#interval-transformation\" rel=\"nofollow\">Interval transformation</a></li>\n<li><a href=\"#discrete-iteration\" rel=\"nofollow\">Discrete iteration</a></li>\n<li><a href=\"#map-intervals-to-data\" rel=\"nofollow\">Map intervals to data</a></li>\n<li><a href=\"#import--export-intervals-to-strings\" rel=\"nofollow\">Import &amp; export intervals to strings</a></li>\n<li><a href=\"#import--export-intervals-to-python-built-in-data-types\" rel=\"nofollow\">Import &amp; export intervals to Python built-in data types</a></li>\n</ul>\n</li>\n<li><a href=\"#changelog\" rel=\"nofollow\">Changelog</a></li>\n<li><a href=\"#contributions\" rel=\"nofollow\">Contributions</a></li>\n<li><a href=\"#license\" rel=\"nofollow\">License</a></li>\n</ul>\n<h2>Installation</h2>\n<p>You can use <code>pip</code> to install it, as usual: <code>pip install portion</code>.</p>\n<p>This will install the latest available version from <a href=\"https://pypi.org/project/portion\" rel=\"nofollow\">PyPI</a>.\nPre-releases are available from the <em>master</em> branch on <a href=\"https://github.com/AlexandreDecan/portion\" rel=\"nofollow\">GitHub</a>\nand can be installed with <code>pip install git+https://github.com/AlexandreDecan/portion</code>.</p>\n<p>The test environment can be installed with <code>pip install portion[test]</code> and relies on <a href=\"https://docs.pytest.org/en/latest/\" rel=\"nofollow\">pytest</a>.</p>\n<h2>Documentation &amp; usage</h2>\n<h3>Interval creation</h3>\n<p>Assuming this library is imported using <code>import portion as P</code>, intervals can be easily\ncreated using one of the following helpers:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">closed</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">openclosed</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">closedopen</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">singleton</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">empty</span><span class=\"p\">()</span>\n<span class=\"p\">()</span>\n</pre>\n<p>The bounds of an interval can be any arbitrary values, as long as they are comparable:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">closed</span><span class=\"p\">(</span><span class=\"mf\">1.2</span><span class=\"p\">,</span> <span class=\"mf\">2.4</span><span class=\"p\">)</span>\n<span class=\"p\">[</span><span class=\"mf\">1.2</span><span class=\"p\">,</span><span class=\"mf\">2.4</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">closed</span><span class=\"p\">(</span><span class=\"s1\">'a'</span><span class=\"p\">,</span> <span class=\"s1\">'z'</span><span class=\"p\">)</span>\n<span class=\"p\">[</span><span class=\"s1\">'a'</span><span class=\"p\">,</span><span class=\"s1\">'z'</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">datetime</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">closed</span><span class=\"p\">(</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">2011</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">),</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">2013</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">))</span>\n<span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">2011</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">),</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">2013</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)]</span>\n</pre>\n<p>Infinite and semi-infinite intervals are supported using <code>P.inf</code> and <code>-P.inf</code> as upper or lower bounds.\nThese two objects support comparison with any other object.\nWhen infinities are used as a lower or upper bound, the corresponding boundary is automatically converted to an open one.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">inf</span> <span class=\"o\">&gt;</span> <span class=\"s1\">'a'</span><span class=\"p\">,</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">inf</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">inf</span> <span class=\"o\">&gt;</span> <span class=\"kc\">True</span>\n<span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">openclosed</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">inf</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">inf</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">closed</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">inf</span><span class=\"p\">,</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">inf</span><span class=\"p\">)</span>  <span class=\"c1\"># Automatically converted to an open interval</span>\n<span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">inf</span><span class=\"p\">,</span><span class=\"o\">+</span><span class=\"n\">inf</span><span class=\"p\">)</span>\n</pre>\n<p>Empty intervals always resolve to <code>(P.inf, -P.inf)</code>, regardless of the provided bounds:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">empty</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">inf</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">inf</span><span class=\"p\">)</span>\n<span class=\"kc\">True</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">closed</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">inf</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">inf</span><span class=\"p\">)</span>\n<span class=\"kc\">True</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">openclosed</span><span class=\"p\">(</span><span class=\"s1\">'a'</span><span class=\"p\">,</span> <span class=\"s1\">'a'</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">inf</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">inf</span><span class=\"p\">)</span>\n<span class=\"kc\">True</span>\n</pre>\n<p>Intervals created with this library are <code>Interval</code> instances.\nAn <code>Interval</code> instance is a disjunction of atomic intervals each representing a single interval (e.g. <code>[1,2]</code>).\nIntervals can be iterated to access the underlying atomic intervals, sorted by their lower and upper bounds.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">)</span> <span class=\"o\">|</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">closed</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">|</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">closed</span><span class=\"p\">(</span><span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"mi\">21</span><span class=\"p\">))</span>\n<span class=\"p\">[[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span><span class=\"mi\">11</span><span class=\"p\">),</span> <span class=\"p\">[</span><span class=\"mi\">20</span><span class=\"p\">,</span><span class=\"mi\">21</span><span class=\"p\">]]</span>\n</pre>\n<p>Atomic intervals can also be retrieved by position:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"p\">(</span><span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">)</span> <span class=\"o\">|</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">closed</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">|</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">closed</span><span class=\"p\">(</span><span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"mi\">21</span><span class=\"p\">))[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"p\">(</span><span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">)</span> <span class=\"o\">|</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">closed</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">|</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">closed</span><span class=\"p\">(</span><span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"mi\">21</span><span class=\"p\">))[</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n<span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span><span class=\"mi\">11</span><span class=\"p\">)</span>\n</pre>\n<p>For convenience, intervals are automatically simplified:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">closed</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"o\">|</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">closed</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">closed</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"o\">|</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">closed</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)</span> <span class=\"o\">|</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">closed</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">empty</span><span class=\"p\">()</span> <span class=\"o\">|</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">closed</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">closed</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"o\">|</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">closed</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span> <span class=\"o\">|</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">closed</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">]</span>\n</pre>\n<p>Note that discrete intervals are <strong>not</strong> supported by <code>portion</code> (but they can be simulated though).\nFor example, combining <code>[0,1]</code> with <code>[2,3]</code> will <strong>not</strong> result in <code>[0,3]</code> even if there is\nno integer between <code>1</code> and <code>2</code>.</p>\n<p><a href=\"#table-of-contents\" rel=\"nofollow\">\u2191 back to top</a></p>\n<h3>Interval bounds &amp; attributes</h3>\n<p>An <code>Interval</code> defines the following properties:</p>\n<ul>\n<li>\n<p><code>i.empty</code> is <code>True</code> if and only if the interval is empty.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">closed</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">empty</span>\n<span class=\"kc\">False</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">closed</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">empty</span>\n<span class=\"kc\">False</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">openclosed</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">empty</span>\n<span class=\"kc\">True</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">empty</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">empty</span>\n<span class=\"kc\">True</span>\n</pre>\n</li>\n<li>\n<p><code>i.atomic</code> is <code>True</code> if and only if the interval is a disjunction of a single (possibly empty) interval.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">closed</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">atomic</span>\n<span class=\"kc\">True</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"p\">(</span><span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">closed</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">|</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">closed</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">atomic</span>\n<span class=\"kc\">True</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"p\">(</span><span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">closed</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">|</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">closed</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">atomic</span>\n<span class=\"kc\">False</span>\n</pre>\n</li>\n<li>\n<p><code>i.enclosure</code> refers to the smallest atomic interval that includes the current one.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"p\">(</span><span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">closed</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">|</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">enclosure</span>\n<span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n</pre>\n</li>\n</ul>\n<p>The left and right boundaries, and the lower and upper bounds of an interval can be respectively accessed\nwith its <code>left</code>, <code>right</code>, <code>lower</code> and <code>upper</code> attributes.\nThe <code>left</code> and <code>right</code> bounds are either <code>P.CLOSED</code> or <code>P.OPEN</code>.\nBy definition, <code>P.CLOSED == ~P.OPEN</code> and vice-versa.</p>\n<pre><span class=\"o\">&gt;&gt;</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">CLOSED</span><span class=\"p\">,</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">OPEN</span>\n<span class=\"n\">CLOSED</span><span class=\"p\">,</span> <span class=\"n\">OPEN</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">closedopen</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">left</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">upper</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">right</span>\n<span class=\"p\">(</span><span class=\"n\">CLOSED</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">OPEN</span><span class=\"p\">)</span>\n</pre>\n<p>If the interval is not atomic, then <code>left</code> and <code>lower</code> refer to the lower bound of its enclosure,\nwhile <code>right</code> and <code>upper</code> refer to the upper bound of its enclosure:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">|</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">closed</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">left</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">upper</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">right</span>\n<span class=\"p\">(</span><span class=\"n\">OPEN</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">CLOSED</span><span class=\"p\">)</span>\n</pre>\n<p>One can easily check for some interval properties based on the bounds of an interval:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">openclosed</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">inf</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># Check that interval is left/right closed</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">left</span> <span class=\"o\">==</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">CLOSED</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">right</span> <span class=\"o\">==</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">CLOSED</span>\n<span class=\"p\">(</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># Check that interval is left/right bounded</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">lower</span> <span class=\"o\">==</span> <span class=\"o\">-</span><span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">inf</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">upper</span> <span class=\"o\">==</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">inf</span>\n<span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># Check for singleton</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">lower</span> <span class=\"o\">==</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">upper</span>\n<span class=\"kc\">False</span>\n</pre>\n<p><a href=\"#table-of-contents\" rel=\"nofollow\">\u2191 back to top</a></p>\n<h3>Interval operations</h3>\n<p><code>Interval</code> instances support the following operations:</p>\n<ul>\n<li>\n<p><code>i.intersection(other)</code> and <code>i &amp; other</code> return the intersection of two intervals.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">closed</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"o\">&amp;</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">closed</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">closed</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)</span> <span class=\"o\">&amp;</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">closed</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"o\">&amp;</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">closed</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">closed</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"o\">&amp;</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">closed</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"p\">()</span>\n</pre>\n</li>\n<li>\n<p><code>i.union(other)</code> and <code>i | other</code> return the union of two intervals.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">closed</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">|</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">closed</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">closed</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">|</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">closed</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">]</span>\n</pre>\n</li>\n<li>\n<p><code>i.complement(other)</code> and <code>~i</code> return the complement of the interval.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"o\">~</span><span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">closed</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">inf</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"o\">|</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"o\">+</span><span class=\"n\">inf</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"o\">~</span><span class=\"p\">(</span><span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">inf</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"o\">|</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">inf</span><span class=\"p\">))</span>\n<span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"o\">~</span><span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">inf</span><span class=\"p\">,</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">inf</span><span class=\"p\">)</span>\n<span class=\"p\">()</span>\n</pre>\n</li>\n<li>\n<p><code>i.difference(other)</code> and <code>i - other</code> return the difference between <code>i</code> and <code>other</code>.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">closed</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">closed</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">closed</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">closed</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">|</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">]</span>\n</pre>\n</li>\n<li>\n<p><code>i.contains(other)</code> and <code>other in i</code> hold if given item is contained in the interval.\nIt supports intervals and arbitrary comparable values.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"mi\">2</span> <span class=\"ow\">in</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">closed</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"kc\">True</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"mi\">2</span> <span class=\"ow\">in</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"kc\">False</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"ow\">in</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">closed</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"kc\">True</span>\n</pre>\n</li>\n<li>\n<p><code>i.adjacent(other)</code> tests if the two intervals are adjacent.\nTwo intervals are adjacent if their intersection is empty, and their union is an atomic interval.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">closed</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">adjacent</span><span class=\"p\">(</span><span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">openclosed</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">))</span>\n<span class=\"kc\">True</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">closed</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">adjacent</span><span class=\"p\">(</span><span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">closed</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">))</span>\n<span class=\"kc\">False</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"p\">(</span><span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">closed</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">|</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">closed</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">adjacent</span><span class=\"p\">(</span><span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"o\">|</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">))</span>\n<span class=\"kc\">True</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">closed</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">adjacent</span><span class=\"p\">(</span><span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"o\">|</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">))</span>\n<span class=\"kc\">False</span>\n</pre>\n</li>\n<li>\n<p><code>i.overlaps(other)</code> tests if there is an overlap between two intervals.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">closed</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">overlaps</span><span class=\"p\">(</span><span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">closed</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"kc\">True</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">closed</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">overlaps</span><span class=\"p\">(</span><span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"kc\">False</span>\n</pre>\n</li>\n</ul>\n<p><a href=\"#table-of-contents\" rel=\"nofollow\">\u2191 back to top</a></p>\n<h3>Comparison operators</h3>\n<p>Equality between intervals can be checked with the classical <code>==</code> operator:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">closed</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">closed</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">|</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">closed</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"kc\">True</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">closed</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"kc\">False</span>\n</pre>\n<p>Moreover, intervals are comparable using e.g. <code>&gt;</code>, <code>&gt;=</code>, <code>&lt;</code> or <code>&lt;=</code>.\nThese comparison operators have a different behaviour than the usual ones.\nFor instance, <code>a &lt; b</code> holds if <code>a</code> is entirely on the left of the lower bound of <code>b</code> and <code>a &gt; b</code> holds if <code>a</code> is entirely\non the right of the upper bound of <code>b</code>.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">closed</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">&lt;</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">closed</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"kc\">True</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">closed</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">&lt;</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">closed</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"kc\">False</span>\n</pre>\n<p>Similarly, <code>a &lt;= b</code> holds if <code>a</code> is entirely on the left of the upper bound of <code>b</code>, and <code>a &gt;= b</code>\nholds if <code>a</code> is entirely on the right of the lower bound of <code>b</code>.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">closed</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">&lt;=</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">closed</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"kc\">True</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">closed</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"o\">&lt;=</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">closed</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"kc\">True</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">closed</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span> <span class=\"o\">&lt;=</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">closed</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"kc\">False</span>\n</pre>\n<p>Intervals can also be compared with single values. If <code>i</code> is an interval and <code>x</code> a value, then\n<code>x &lt; i</code> holds if <code>x</code> is on the left of the lower bound of <code>i</code> and <code>x &lt;= i</code> holds if <code>x</code> is on the\nleft of the upper bound of <code>i</code>.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"mi\">5</span> <span class=\"o\">&lt;</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">closed</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"kc\">False</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"mi\">5</span> <span class=\"o\">&lt;=</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">closed</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"kc\">True</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">closed</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)</span> <span class=\"o\">&lt;</span> <span class=\"mi\">5</span>\n<span class=\"kc\">False</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">closed</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">5</span>\n<span class=\"kc\">True</span>\n</pre>\n<p>This behaviour is similar to the one that could be obtained by first converting <code>x</code> to a\nsingleton interval (except for infinities since they resolve to empty intervals).</p>\n<p>Note that all these semantics differ from classical comparison operators.\nAs a consequence, some intervals are never comparable in the classical sense, as illustrated hereafter:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">closed</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)</span> <span class=\"o\">&lt;=</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">closed</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"ow\">or</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">closed</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)</span> <span class=\"o\">&gt;=</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">closed</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"kc\">False</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">closed</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)</span> <span class=\"o\">&lt;</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">closed</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"ow\">or</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">closed</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">closed</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"kc\">False</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">empty</span><span class=\"p\">()</span> <span class=\"o\">&lt;</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">empty</span><span class=\"p\">()</span>\n<span class=\"kc\">True</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">empty</span><span class=\"p\">()</span> <span class=\"o\">&lt;</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">closed</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">empty</span><span class=\"p\">()</span> <span class=\"o\">&gt;</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">closed</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"kc\">True</span>\n</pre>\n<p>Finally, intervals are hashable as long as their bounds are hashable (and we have defined a hash value for <code>P.inf</code> and <code>-P.inf</code>).</p>\n<p><a href=\"#table-of-contents\" rel=\"nofollow\">\u2191 back to top</a></p>\n<h3>Interval transformation</h3>\n<p>Intervals are immutable but provide a <code>replace</code> method to create a new interval based on the\ncurrent one. This method accepts four optional parameters <code>left</code>, <code>lower</code>, <code>upper</code>, and <code>right</code>:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">closed</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">i</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">OPEN</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">CLOSED</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">i</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"n\">lower</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">OPEN</span><span class=\"p\">)</span>\n<span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n</pre>\n<p>Functions can be passed instead of values. If a function is passed, it is called with the current corresponding\nvalue except if the corresponding bound is an infinity and parameter <code>ignore_inf</code> if set to <code>False</code>.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">closed</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"n\">upper</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">closedopen</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">inf</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">i</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"n\">upper</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"p\">)</span>  <span class=\"c1\"># No change, infinity is ignored</span>\n<span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"o\">+</span><span class=\"n\">inf</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">i</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"n\">upper</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">ignore_inf</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>  <span class=\"c1\"># Infinity is not ignored</span>\n<span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n</pre>\n<p>When <code>replace</code> is applied on an interval that is not atomic, it is extended and/or restricted such that\nits enclosure satisfies the new bounds.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">openclosed</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">|</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">closed</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">i</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">CLOSED</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">OPEN</span><span class=\"p\">)</span>\n<span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">8</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">i</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"n\">lower</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">10</span><span class=\"p\">]</span>\n</pre>\n<p>To apply an arbitrary transformation on an interval, intervals expose an <code>apply</code> method.\nThis method accepts a function that will be applied on each of the underlying atomic intervals to perform the desired transformation.\nThe function is expected to return either an <code>Interval</code>, or a 4-uple <code>(left, lower, upper, right)</code>.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">closed</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span> <span class=\"o\">|</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># Increment bound values</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">i</span><span class=\"o\">.</span><span class=\"n\">apply</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">left</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">lower</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">upper</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">right</span><span class=\"p\">))</span>\n<span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">6</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># Invert bounds</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">i</span><span class=\"o\">.</span><span class=\"n\">apply</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"o\">~</span><span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">left</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">upper</span><span class=\"p\">,</span> <span class=\"o\">~</span><span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">right</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">)</span> <span class=\"o\">|</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">]</span>\n</pre>\n<p>The <code>apply</code> method is very powerful when used in combination with <code>replace</code>.\nBecause the latter allows functions to be passed as parameters and can ignore infinities, it can be\nconveniently used to transform intervals in presence of infinities.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">openclosed</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">inf</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"o\">|</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">closed</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)</span> <span class=\"o\">|</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">closedopen</span><span class=\"p\">(</span><span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">inf</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># Increment bound values</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">i</span><span class=\"o\">.</span><span class=\"n\">apply</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"n\">upper</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">v</span><span class=\"p\">:</span> <span class=\"n\">v</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">inf</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"p\">[</span><span class=\"mi\">8</span><span class=\"p\">,</span><span class=\"o\">+</span><span class=\"n\">inf</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># Intervals are still automatically simplified</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">i</span><span class=\"o\">.</span><span class=\"n\">apply</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"n\">lower</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">v</span><span class=\"p\">:</span> <span class=\"n\">v</span> <span class=\"o\">*</span> <span class=\"mi\">2</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">inf</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"p\">[</span><span class=\"mi\">16</span><span class=\"p\">,</span><span class=\"o\">+</span><span class=\"n\">inf</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># Invert bounds</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">i</span><span class=\"o\">.</span><span class=\"n\">apply</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"n\">left</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">v</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">v</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">v</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">inf</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"o\">|</span> <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">)</span> <span class=\"o\">|</span> <span class=\"p\">(</span><span class=\"mi\">8</span><span class=\"p\">,</span><span class=\"o\">+</span><span class=\"n\">inf</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># Replace infinities with -10 and 10</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">conv</span> <span class=\"o\">=</span> <span class=\"k\">lambda</span> <span class=\"n\">v</span><span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"mi\">10</span> <span class=\"k\">if</span> <span class=\"n\">v</span> <span class=\"o\">==</span> <span class=\"o\">-</span><span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">inf</span> <span class=\"k\">else</span> <span class=\"p\">(</span><span class=\"mi\">10</span> <span class=\"k\">if</span> <span class=\"n\">v</span> <span class=\"o\">==</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">inf</span> <span class=\"k\">else</span> <span class=\"n\">v</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">i</span><span class=\"o\">.</span><span class=\"n\">apply</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"n\">lower</span><span class=\"o\">=</span><span class=\"n\">conv</span><span class=\"p\">,</span> <span class=\"n\">upper</span><span class=\"o\">=</span><span class=\"n\">conv</span><span class=\"p\">,</span> <span class=\"n\">ignore_inf</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">10</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"p\">[</span><span class=\"mi\">8</span><span class=\"p\">,</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n</pre>\n<p><a href=\"#table-of-contents\" rel=\"nofollow\">\u2191 back to top</a></p>\n<h3>Discrete iteration</h3>\n<p>The <code>iterate</code> function takes an interval, and returns a generator to iterate over\nthe values of an interval. Obviously, as intervals are continuous, it is required to specify the\n<code>step</code> between consecutive values. The iteration then starts from the lower bound and ends on the upper one,\ngiven they are not excluded by the interval:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">iterate</span><span class=\"p\">(</span><span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">closed</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"n\">step</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">))</span>\n<span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">iterate</span><span class=\"p\">(</span><span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">closed</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"n\">step</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">))</span>\n<span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">iterate</span><span class=\"p\">(</span><span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"n\">step</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">))</span>\n<span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n</pre>\n<p>When an interval is not atomic, <code>iterate</code> consecutively iterates on all underlying atomic\nintervals, starting from each lower bound and ending on each upper one:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">iterate</span><span class=\"p\">(</span><span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">singleton</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"o\">|</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">singleton</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span> <span class=\"o\">|</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">singleton</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">),</span> <span class=\"n\">step</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">))</span>  <span class=\"c1\"># Won't be [0]</span>\n<span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">iterate</span><span class=\"p\">(</span><span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">closed</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"o\">|</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">closed</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">),</span> <span class=\"n\">step</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">))</span>  <span class=\"c1\"># Won't be [0, 6]</span>\n<span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]</span>\n</pre>\n<p>By default, the iteration always starts on the lower bound of each underlying atomic interval.\nThe <code>base</code> parameter can be used to change this behaviour, by specifying how the initial value to start\nthe iteration from must be computed. This parameter accepts a callable that is called with the lower\nbound of each underlying atomic interval, and that returns the initial value to start the iteration from.\nIt can be helpful to deal with (semi-)infinite intervals, or to <em>align</em> the generated values of the iterator:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># Align on integers</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">iterate</span><span class=\"p\">(</span><span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">closed</span><span class=\"p\">(</span><span class=\"mf\">0.3</span><span class=\"p\">,</span> <span class=\"mf\">4.9</span><span class=\"p\">),</span> <span class=\"n\">step</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">base</span><span class=\"o\">=</span><span class=\"nb\">int</span><span class=\"p\">))</span>\n<span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># Restrict values of a (semi-)infinite interval</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">iterate</span><span class=\"p\">(</span><span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">openclosed</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">inf</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"n\">step</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">base</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">max</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)))</span>\n<span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span>\n</pre>\n<p>The <code>base</code> parameter can be used to change how <code>iterate</code> applies on unions of atomic interval, by\nspecifying a function that returns a single value, as illustrated next:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">base</span> <span class=\"o\">=</span> <span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"mi\">0</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">iterate</span><span class=\"p\">(</span><span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">singleton</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"o\">|</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">singleton</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span> <span class=\"o\">|</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">singleton</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">),</span> <span class=\"n\">step</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">base</span><span class=\"o\">=</span><span class=\"n\">base</span><span class=\"p\">))</span>\n<span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">iterate</span><span class=\"p\">(</span><span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">closed</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"o\">|</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">closed</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">),</span> <span class=\"n\">step</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">base</span><span class=\"o\">=</span><span class=\"n\">base</span><span class=\"p\">))</span>\n<span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">]</span>\n</pre>\n<p>Notice that defining <code>base</code> such that it returns a single value can be extremely inefficient in\nterms of performance when the intervals are \"far apart\" each other (i.e., when the <em>gaps</em> between\natomic intervals are large).</p>\n<p>Finally, iteration can be performed in reverse order by specifying <code>reverse=True</code>.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">iterate</span><span class=\"p\">(</span><span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">closed</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"n\">step</span><span class=\"o\">=-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">reverse</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">))</span>  <span class=\"c1\"># Mind step=-1</span>\n<span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">iterate</span><span class=\"p\">(</span><span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">closed</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"n\">step</span><span class=\"o\">=-</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">reverse</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">))</span>  <span class=\"c1\"># Mind step=-2</span>\n<span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n</pre>\n<p>Again, this library does not make any assumption about the objects being used in an interval, as long as they\nare comparable. However, it is not always possible to provide a meaningful value for <code>step</code> (e.g., what would\nbe the step between two consecutive characters?). In these cases, a callable can be passed instead of a value.\nThis callable will be called with the current value, and is expected to return the next possible value.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">iterate</span><span class=\"p\">(</span><span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">closed</span><span class=\"p\">(</span><span class=\"s1\">'a'</span><span class=\"p\">,</span> <span class=\"s1\">'d'</span><span class=\"p\">),</span> <span class=\"n\">step</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">d</span><span class=\"p\">:</span> <span class=\"nb\">chr</span><span class=\"p\">(</span><span class=\"nb\">ord</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)))</span>\n<span class=\"p\">[</span><span class=\"s1\">'a'</span><span class=\"p\">,</span> <span class=\"s1\">'b'</span><span class=\"p\">,</span> <span class=\"s1\">'c'</span><span class=\"p\">,</span> <span class=\"s1\">'d'</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># Since we reversed the order, we changed plus to minus in step.</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">iterate</span><span class=\"p\">(</span><span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">closed</span><span class=\"p\">(</span><span class=\"s1\">'a'</span><span class=\"p\">,</span> <span class=\"s1\">'d'</span><span class=\"p\">),</span> <span class=\"n\">step</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">d</span><span class=\"p\">:</span> <span class=\"nb\">chr</span><span class=\"p\">(</span><span class=\"nb\">ord</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"n\">reverse</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">))</span>\n<span class=\"p\">[</span><span class=\"s1\">'d'</span><span class=\"p\">,</span> <span class=\"s1\">'c'</span><span class=\"p\">,</span> <span class=\"s1\">'b'</span><span class=\"p\">,</span> <span class=\"s1\">'a'</span><span class=\"p\">]</span>\n</pre>\n<p><a href=\"#table-of-contents\" rel=\"nofollow\">\u2191 back to top</a></p>\n<h3>Map intervals to data</h3>\n<p>The library provides an <code>IntervalDict</code> class, a <code>dict</code>-like data structure to store and query data\nalong with intervals. Any value can be stored in such data structure as long as it supports\nequality.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">IntervalDict</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">closed</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)]</span> <span class=\"o\">=</span> <span class=\"s1\">'banana'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">d</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'apple'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">d</span>\n<span class=\"p\">{[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">]:</span> <span class=\"s1\">'banana'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]:</span> <span class=\"s1\">'apple'</span><span class=\"p\">}</span>\n</pre>\n<p>When a value is defined for an interval that overlaps an existing one, it is automatically updated\nto take the new value into account:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">closed</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)]</span> <span class=\"o\">=</span> <span class=\"s1\">'orange'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">d</span>\n<span class=\"p\">{[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">):</span> <span class=\"s1\">'banana'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">]:</span> <span class=\"s1\">'orange'</span><span class=\"p\">}</span>\n</pre>\n<p>An <code>IntervalDict</code> can be queried using single values or intervals. If a single value is used as a\nkey, its behaviour corresponds to the one of a classical <code>dict</code>:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">d</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n<span class=\"s1\">'orange'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">d</span><span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">]</span>  <span class=\"c1\"># Key does not exist</span>\n<span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">):</span>\n <span class=\"o\">...</span>\n<span class=\"ne\">KeyError</span><span class=\"p\">:</span> <span class=\"mi\">5</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"mi\">0</span>\n</pre>\n<p>When an interval is used as a key, a new <code>IntervalDict</code> containing the values\nfor that interval is returned:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">d</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">empty</span><span class=\"p\">()]</span>  <span class=\"c1\"># Get all values, similar to d.copy()</span>\n<span class=\"p\">{[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">):</span> <span class=\"s1\">'banana'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">]:</span> <span class=\"s1\">'orange'</span><span class=\"p\">}</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">closed</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)]</span>\n<span class=\"p\">{[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">):</span> <span class=\"s1\">'banana'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">]:</span> <span class=\"s1\">'orange'</span><span class=\"p\">}</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">closed</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)]</span>\n<span class=\"p\">{[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">]:</span> <span class=\"s1\">'banana'</span><span class=\"p\">}</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">closed</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)]</span>\n<span class=\"p\">{}</span>\n</pre>\n<p>By using <code>.get</code>, a default value (defaulting to <code>None</code>) can be specified.\nThis value is used to \"fill the gaps\" if the queried interval is not completely\ncovered by the <code>IntervalDict</code>:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">closed</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"s1\">'peach'</span><span class=\"p\">)</span>\n<span class=\"p\">{[</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">):</span> <span class=\"s1\">'peach'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">]:</span> <span class=\"s1\">'banana'</span><span class=\"p\">}</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">closed</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"s1\">'peach'</span><span class=\"p\">)</span>\n<span class=\"p\">{[</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]:</span> <span class=\"s1\">'peach'</span><span class=\"p\">}</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">singleton</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"s1\">'peach'</span><span class=\"p\">)</span>  <span class=\"c1\"># Key is covered, default is not used</span>\n<span class=\"p\">{[</span><span class=\"mi\">1</span><span class=\"p\">]:</span> <span class=\"s1\">'banana'</span><span class=\"p\">}</span>\n</pre>\n<p>For convenience, an <code>IntervalDict</code> provides a way to look for specific data values.\nThe <code>.find</code> method always returns a (possibly empty) <code>Interval</code> instance for which given\nvalue is defined:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">find</span><span class=\"p\">(</span><span class=\"s1\">'banana'</span><span class=\"p\">)</span>\n<span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">find</span><span class=\"p\">(</span><span class=\"s1\">'orange'</span><span class=\"p\">)</span>\n<span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">find</span><span class=\"p\">(</span><span class=\"s1\">'carrot'</span><span class=\"p\">)</span>\n<span class=\"p\">()</span>\n</pre>\n<p>The active domain of an <code>IntervalDict</code> can be retrieved with its <code>.domain</code> method.\nThis method always returns a single <code>Interval</code> instance, where <code>.keys</code> returns a list\nof disjoint intervals, one for each stored value.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">domain</span><span class=\"p\">()</span>\n<span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">()</span>\n<span class=\"p\">[[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">]]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">()</span>\n<span class=\"p\">[</span><span class=\"s1\">'banana'</span><span class=\"p\">,</span> <span class=\"s1\">'orange'</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">()</span>\n<span class=\"p\">[([</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"s1\">'banana'</span><span class=\"p\">),</span> <span class=\"p\">([</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">],</span> <span class=\"s1\">'orange'</span><span class=\"p\">)]</span>\n</pre>\n<p>Two <code>IntervalDict</code> instances can be combined together using the <code>.combine</code> method.\nThis method returns a new <code>IntervalDict</code> whose keys and values are taken from the two\nsource <code>IntervalDict</code>. Values corresponding to non-intersecting keys are simply copied,\nwhile values corresponding to intersecting keys are combined together using the provided\nfunction, as illustrated hereafter:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">d1</span> <span class=\"o\">=</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">IntervalDict</span><span class=\"p\">({</span><span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">closed</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">):</span> <span class=\"s1\">'banana'</span><span class=\"p\">})</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">d2</span> <span class=\"o\">=</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">IntervalDict</span><span class=\"p\">({</span><span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">closed</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">):</span> <span class=\"s1\">'orange'</span><span class=\"p\">})</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">concat</span> <span class=\"o\">=</span> <span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"s1\">'/'</span> <span class=\"o\">+</span> <span class=\"n\">y</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">d1</span><span class=\"o\">.</span><span class=\"n\">combine</span><span class=\"p\">(</span><span class=\"n\">d2</span><span class=\"p\">,</span> <span class=\"n\">how</span><span class=\"o\">=</span><span class=\"n\">concat</span><span class=\"p\">)</span>\n<span class=\"p\">{[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">):</span> <span class=\"s1\">'banana'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">]:</span> <span class=\"s1\">'banana/orange'</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">]:</span> <span class=\"s1\">'orange'</span><span class=\"p\">}</span>\n</pre>\n<p>Resulting keys always correspond to an outer join. Other joins can be easily simulated\nby querying the resulting <code>IntervalDict</code> as follows:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"n\">d1</span><span class=\"o\">.</span><span class=\"n\">combine</span><span class=\"p\">(</span><span class=\"n\">d2</span><span class=\"p\">,</span> <span class=\"n\">how</span><span class=\"o\">=</span><span class=\"n\">concat</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">d1</span><span class=\"o\">.</span><span class=\"n\">domain</span><span class=\"p\">()]</span>  <span class=\"c1\"># Left join</span>\n<span class=\"p\">{[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">):</span> <span class=\"s1\">'banana'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">]:</span> <span class=\"s1\">'banana/orange'</span><span class=\"p\">}</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">d2</span><span class=\"o\">.</span><span class=\"n\">domain</span><span class=\"p\">()]</span>  <span class=\"c1\"># Right join</span>\n<span class=\"p\">{[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">]:</span> <span class=\"s1\">'banana/orange'</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">]:</span> <span class=\"s1\">'orange'</span><span class=\"p\">}</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">d1</span><span class=\"o\">.</span><span class=\"n\">domain</span><span class=\"p\">()</span> <span class=\"o\">&amp;</span> <span class=\"n\">d2</span><span class=\"o\">.</span><span class=\"n\">domain</span><span class=\"p\">()]</span>  <span class=\"c1\"># Inner join</span>\n<span class=\"p\">{[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">]:</span> <span class=\"s1\">'banana/orange'</span><span class=\"p\">}</span>\n</pre>\n<p>Finally, similarly to a <code>dict</code>, an <code>IntervalDict</code> also supports <code>len</code>, <code>in</code> and <code>del</code>, and defines\n<code>.clear</code>, <code>.copy</code>, <code>.update</code>, <code>.pop</code>, <code>.popitem</code>, and <code>.setdefault</code>.</p>\n<p><a href=\"#table-of-contents\" rel=\"nofollow\">\u2191 back to top</a></p>\n<h3>Import &amp; export intervals to strings</h3>\n<p>Intervals can be exported to string, either using <code>repr</code> (as illustrated above) or with the <code>to_string</code> function.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">to_string</span><span class=\"p\">(</span><span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">closedopen</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n<span class=\"s1\">'[0,1)'</span>\n</pre>\n<p>The way string representations are built can be easily parametrized using the various parameters supported by\n<code>to_string</code>:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">params</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n<span class=\"o\">...</span>   <span class=\"s1\">'disj'</span><span class=\"p\">:</span> <span class=\"s1\">' or '</span><span class=\"p\">,</span>\n<span class=\"o\">...</span>   <span class=\"s1\">'sep'</span><span class=\"p\">:</span> <span class=\"s1\">' - '</span><span class=\"p\">,</span>\n<span class=\"o\">...</span>   <span class=\"s1\">'left_closed'</span><span class=\"p\">:</span> <span class=\"s1\">'&lt;'</span><span class=\"p\">,</span>\n<span class=\"o\">...</span>   <span class=\"s1\">'right_closed'</span><span class=\"p\">:</span> <span class=\"s1\">'&gt;'</span><span class=\"p\">,</span>\n<span class=\"o\">...</span>   <span class=\"s1\">'left_open'</span><span class=\"p\">:</span> <span class=\"s1\">'..'</span><span class=\"p\">,</span>\n<span class=\"o\">...</span>   <span class=\"s1\">'right_open'</span><span class=\"p\">:</span> <span class=\"s1\">'..'</span><span class=\"p\">,</span>\n<span class=\"o\">...</span>   <span class=\"s1\">'pinf'</span><span class=\"p\">:</span> <span class=\"s1\">'+oo'</span><span class=\"p\">,</span>\n<span class=\"o\">...</span>   <span class=\"s1\">'ninf'</span><span class=\"p\">:</span> <span class=\"s1\">'-oo'</span><span class=\"p\">,</span>\n<span class=\"o\">...</span>   <span class=\"s1\">'conv'</span><span class=\"p\">:</span> <span class=\"k\">lambda</span> <span class=\"n\">v</span><span class=\"p\">:</span> <span class=\"s1\">'\"</span><span class=\"si\">{}</span><span class=\"s1\">\"'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">),</span>\n<span class=\"o\">...</span> <span class=\"p\">}</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">openclosed</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">|</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">closed</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">inf</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">to_string</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">params</span><span class=\"p\">)</span>\n<span class=\"s1\">'..\"0\" - \"1\"&gt; or &lt;\"2\" - +oo..'</span>\n</pre>\n<p>Similarly, intervals can be created from a string using the <code>from_string</code> function.\nA conversion function (<code>conv</code> parameter) has to be provided to convert a bound (as string) to a value.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">from_string</span><span class=\"p\">(</span><span class=\"s1\">'[0, 1]'</span><span class=\"p\">,</span> <span class=\"n\">conv</span><span class=\"o\">=</span><span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">closed</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"kc\">True</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">from_string</span><span class=\"p\">(</span><span class=\"s1\">'[1.2]'</span><span class=\"p\">,</span> <span class=\"n\">conv</span><span class=\"o\">=</span><span class=\"nb\">float</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">singleton</span><span class=\"p\">(</span><span class=\"mf\">1.2</span><span class=\"p\">)</span>\n<span class=\"kc\">True</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">converter</span> <span class=\"o\">=</span> <span class=\"k\">lambda</span> <span class=\"n\">s</span><span class=\"p\">:</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">strptime</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"s1\">'%Y/%m/</span><span class=\"si\">%d</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">from_string</span><span class=\"p\">(</span><span class=\"s1\">'[2011/03/15, 2013/10/10]'</span><span class=\"p\">,</span> <span class=\"n\">conv</span><span class=\"o\">=</span><span class=\"n\">converter</span><span class=\"p\">)</span>\n<span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">(</span><span class=\"mi\">2011</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">(</span><span class=\"mi\">2013</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)]</span>\n</pre>\n<p>Similarly to <code>to_string</code>, function <code>from_string</code> can be parametrized to deal with more elaborated inputs.\nNotice that as <code>from_string</code> expects regular expression patterns, we need to escape some characters.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"s1\">'..\"0\" - \"1\"&gt; or &lt;\"2\" - +oo..'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">params</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n<span class=\"o\">...</span>   <span class=\"s1\">'disj'</span><span class=\"p\">:</span> <span class=\"s1\">' or '</span><span class=\"p\">,</span>\n<span class=\"o\">...</span>   <span class=\"s1\">'sep'</span><span class=\"p\">:</span> <span class=\"s1\">' - '</span><span class=\"p\">,</span>\n<span class=\"o\">...</span>   <span class=\"s1\">'left_closed'</span><span class=\"p\">:</span> <span class=\"s1\">'&lt;'</span><span class=\"p\">,</span>\n<span class=\"o\">...</span>   <span class=\"s1\">'right_closed'</span><span class=\"p\">:</span> <span class=\"s1\">'&gt;'</span><span class=\"p\">,</span>\n<span class=\"o\">...</span>   <span class=\"s1\">'left_open'</span><span class=\"p\">:</span> <span class=\"sa\">r</span><span class=\"s1\">'\\.\\.'</span><span class=\"p\">,</span>  <span class=\"c1\"># from_string expects regular expression patterns</span>\n<span class=\"o\">...</span>   <span class=\"s1\">'right_open'</span><span class=\"p\">:</span> <span class=\"sa\">r</span><span class=\"s1\">'\\.\\.'</span><span class=\"p\">,</span>  <span class=\"c1\"># from_string expects regular expression patterns</span>\n<span class=\"o\">...</span>   <span class=\"s1\">'pinf'</span><span class=\"p\">:</span> <span class=\"sa\">r</span><span class=\"s1\">'\\+oo'</span><span class=\"p\">,</span>  <span class=\"c1\"># from_string expects regular expression patterns</span>\n<span class=\"o\">...</span>   <span class=\"s1\">'ninf'</span><span class=\"p\">:</span> <span class=\"s1\">'-oo'</span><span class=\"p\">,</span>\n<span class=\"o\">...</span>   <span class=\"s1\">'conv'</span><span class=\"p\">:</span> <span class=\"k\">lambda</span> <span class=\"n\">v</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]),</span>\n<span class=\"o\">...</span> <span class=\"p\">}</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">from_string</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">params</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"o\">+</span><span class=\"n\">inf</span><span class=\"p\">)</span>\n</pre>\n<p>When a bound contains a comma or has a representation that cannot be automatically parsed with <code>from_string</code>,\nthe <code>bound</code> parameter can be used to specify the regular expression that should be used to match its representation.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"s1\">'[(0, 1), (2, 3)]'</span>  <span class=\"c1\"># Bounds are expected to be tuples</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">from_string</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">conv</span><span class=\"o\">=</span><span class=\"nb\">eval</span><span class=\"p\">,</span> <span class=\"n\">bound</span><span class=\"o\">=</span><span class=\"sa\">r</span><span class=\"s1\">'\\(.+?\\)'</span><span class=\"p\">)</span>\n<span class=\"p\">[(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)]</span>\n</pre>\n<p><a href=\"#table-of-contents\" rel=\"nofollow\">\u2191 back to top</a></p>\n<h3>Import &amp; export intervals to Python built-in data types</h3>\n<p>Intervals can also be exported to a list of 4-uples with <code>to_data</code>, e.g., to support JSON serialization.\n<code>P.CLOSED</code> and <code>P.OPEN</code> are represented by Boolean values <code>True</code> (inclusive) and <code>False</code> (exclusive).</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">to_data</span><span class=\"p\">(</span><span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">openclosed</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">))</span>\n<span class=\"p\">[(</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">)]</span>\n</pre>\n<p>The values used to represent positive and negative infinities can be specified with\n<code>pinf</code> and <code>ninf</code>. They default to <code>float('inf')</code> and <code>float('-inf')</code> respectively.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">openclosed</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">|</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">closedopen</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">inf</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">to_data</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"p\">[(</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">inf</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">)]</span>\n</pre>\n<p>The function to convert bounds can be specified with the <code>conv</code> parameter.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">closedopen</span><span class=\"p\">(</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">2011</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">),</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">2013</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">))</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">to_data</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">conv</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">v</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"n\">v</span><span class=\"o\">.</span><span class=\"n\">year</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"o\">.</span><span class=\"n\">month</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"o\">.</span><span class=\"n\">day</span><span class=\"p\">))</span>\n<span class=\"p\">[(</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"mi\">2011</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">2013</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">),</span> <span class=\"kc\">False</span><span class=\"p\">)]</span>\n</pre>\n<p>Intervals can be imported from such a list of 4-tuples with <code>from_data</code>.\nThe same set of parameters can be used to specify how bounds and infinities are converted.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"mi\">2011</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">2013</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">),</span> <span class=\"kc\">False</span><span class=\"p\">)]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">from_data</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">conv</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">v</span><span class=\"p\">:</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">v</span><span class=\"p\">))</span>\n<span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">2011</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">),</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">2013</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">))</span>\n</pre>\n<p><a href=\"#table-of-contents\" rel=\"nofollow\">\u2191 back to top</a></p>\n<h2>Changelog</h2>\n<p>This library adheres to a <a href=\"https://semver.org\" rel=\"nofollow\">semantic versioning</a> scheme.\nSee <a href=\"https://github.com/AlexandreDecan/portion/blob/master/CHANGELOG.md\" rel=\"nofollow\">CHANGELOG.md</a> for the list of changes.</p>\n<h2>Contributions</h2>\n<p>Contributions are very welcome!\nFeel free to report bugs or suggest new features using GitHub issues and/or pull requests.</p>\n<h2>License</h2>\n<p>Distributed under <a href=\"https://github.com/AlexandreDecan/portion/blob/master/LICENSE.txt\" rel=\"nofollow\">LGPLv3 - GNU Lesser General Public License, version 3</a>.</p>\n<p>You can refer to this library using:</p>\n<pre><code>@software{portion,\n  author = {Decan, Alexandre},\n  title = {portion: Python data structure and operations for intervals},\n  url = {https://github.com/AlexandreDecan/portion},\n}\n</code></pre>\n\n          </div>"}, "last_serial": 6814968, "releases": {"2.0.0": [{"comment_text": "", "digests": {"md5": "f33e4008c7440295588e271f26a70952", "sha256": "9cc1b6433057c61e947aa69aa227ddca1744d1359e808ddeafe70a10a7abb53d"}, "downloads": -1, "filename": "portion-2.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "f33e4008c7440295588e271f26a70952", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": "~=3.5", "size": 22096, "upload_time": "2020-03-06T12:57:45", "upload_time_iso_8601": "2020-03-06T12:57:45.879177Z", "url": "https://files.pythonhosted.org/packages/ac/63/d7219b567f515cea4b07d2decde1f46fd64244d4f69dddc3ab4e67b0349d/portion-2.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "aeba6c2f999b7c5c3ac22a9cc0438b47", "sha256": "64c86f2029cf1a917fb7055962a025183fdac8512a8e32abfff1ce7de4b70ed3"}, "downloads": -1, "filename": "portion-2.0.0.tar.gz", "has_sig": false, "md5_digest": "aeba6c2f999b7c5c3ac22a9cc0438b47", "packagetype": "sdist", "python_version": "source", "requires_python": "~=3.5", "size": 40554, "upload_time": "2020-03-06T12:57:47", "upload_time_iso_8601": "2020-03-06T12:57:47.681772Z", "url": "https://files.pythonhosted.org/packages/55/7f/25d9a3fef75997bb2452d4d707b944873cb25d287b0146a94be287a9a286/portion-2.0.0.tar.gz", "yanked": false}], "2.0.0rc1": [{"comment_text": "", "digests": {"md5": "7b1ff33c56ba15659a4b610f68beba81", "sha256": "c05f095eed30c06c829ece4e4c549d542d07bd36c6a2426ed278d0a485b7d555"}, "downloads": -1, "filename": "portion-2.0.0rc1-py3-none-any.whl", "has_sig": false, "md5_digest": "7b1ff33c56ba15659a4b610f68beba81", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": "~=3.5", "size": 22138, "upload_time": "2020-03-06T11:10:39", "upload_time_iso_8601": "2020-03-06T11:10:39.714297Z", "url": "https://files.pythonhosted.org/packages/bf/cb/fd60eb20e68f4166c97f864cdfe9c2f4c5d1e9721494dee59d003dec7666/portion-2.0.0rc1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "de1ac7bbeb2b377a3a66ca764d6004b6", "sha256": "79a1b15bf99a7fb6c2c68960f28ae839ace317566ac2fc3e34ce1f0558b9f1ed"}, "downloads": -1, "filename": "portion-2.0.0rc1.tar.gz", "has_sig": false, "md5_digest": "de1ac7bbeb2b377a3a66ca764d6004b6", "packagetype": "sdist", "python_version": "source", "requires_python": "~=3.5", "size": 44114, "upload_time": "2020-03-06T11:10:42", "upload_time_iso_8601": "2020-03-06T11:10:42.674151Z", "url": "https://files.pythonhosted.org/packages/63/3a/0ee8a76c17e55fa743a7e07b4ff71323665a97535cfdb03af10ee99edf9b/portion-2.0.0rc1.tar.gz", "yanked": false}], "2.0.1": [{"comment_text": "", "digests": {"md5": "138be0536847d712e6160afe962b56d6", "sha256": "9a1bfc47d4f8fee86698e413a5808db4c95a9326247774e91908050ec420df40"}, "downloads": -1, "filename": "portion-2.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "138be0536847d712e6160afe962b56d6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": "~=3.5", "size": 22159, "upload_time": "2020-03-15T09:17:56", "upload_time_iso_8601": "2020-03-15T09:17:56.278228Z", "url": "https://files.pythonhosted.org/packages/86/31/bff77077ea2359a4339ca3330a86c64d81e3584d927b1323cb94448402d6/portion-2.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f501a6cbbd30cf07dccd74c6edcfe2a3", "sha256": "337d55a97dab6170eee13777ad354be9f2f6000c58a670b1947984a442aa6614"}, "downloads": -1, "filename": "portion-2.0.1.tar.gz", "has_sig": false, "md5_digest": "f501a6cbbd30cf07dccd74c6edcfe2a3", "packagetype": "sdist", "python_version": "source", "requires_python": "~=3.5", "size": 40808, "upload_time": "2020-03-15T09:17:58", "upload_time_iso_8601": "2020-03-15T09:17:58.247229Z", "url": "https://files.pythonhosted.org/packages/08/03/ea3568230a3777a6265dc22dfd8c8a0864cddc1885aaa7137b2a1dfa9773/portion-2.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "138be0536847d712e6160afe962b56d6", "sha256": "9a1bfc47d4f8fee86698e413a5808db4c95a9326247774e91908050ec420df40"}, "downloads": -1, "filename": "portion-2.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "138be0536847d712e6160afe962b56d6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": "~=3.5", "size": 22159, "upload_time": "2020-03-15T09:17:56", "upload_time_iso_8601": "2020-03-15T09:17:56.278228Z", "url": "https://files.pythonhosted.org/packages/86/31/bff77077ea2359a4339ca3330a86c64d81e3584d927b1323cb94448402d6/portion-2.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f501a6cbbd30cf07dccd74c6edcfe2a3", "sha256": "337d55a97dab6170eee13777ad354be9f2f6000c58a670b1947984a442aa6614"}, "downloads": -1, "filename": "portion-2.0.1.tar.gz", "has_sig": false, "md5_digest": "f501a6cbbd30cf07dccd74c6edcfe2a3", "packagetype": "sdist", "python_version": "source", "requires_python": "~=3.5", "size": 40808, "upload_time": "2020-03-15T09:17:58", "upload_time_iso_8601": "2020-03-15T09:17:58.247229Z", "url": "https://files.pythonhosted.org/packages/08/03/ea3568230a3777a6265dc22dfd8c8a0864cddc1885aaa7137b2a1dfa9773/portion-2.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:51:26 2020"}