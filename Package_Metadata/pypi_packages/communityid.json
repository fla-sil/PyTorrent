{"info": {"author": "Christian Kreibich", "author_email": "christian@corelight.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "pycommunityid\n=============\n\nThis package provides a Python implementation of the open\n[Community ID](https://github.com/corelight/community-id-spec)\nflow hashing standard.\n\nIt supports Python versions 2.7+ and 3+.\n\nInstallation\n------------\n\nThis package is available [on PyPI](https://pypi.org/project/communityid/), therefore:\n\n    pip install communityid\n\nUsage\n-----\n\nThe API breaks the computation into two steps: (1) creation of a flow\ntuple object, (2) computation of the Community ID string on this\nobject. It supports various input types in order to accommodate\nnetwork byte order representations of flow endpoints, high-level ASCII,\nand ipaddress objects.\n\nHere's what it looks like:\n\n    import communityid\n\n    cid = communityid.CommunityID()\n    tpl = communityid.FlowTuple.make_tcp('127.0.0.1', '10.0.0.1', 1234, 80)\n\n    print(cid.calc(tpl))\n\nThis will print \"1:mgRgpIZSu0KHDp/QrtcWZpkJpMU=\".\n\nThe package includes three sample applications:\n\n- [community-id](https://github.com/corelight/pycommunityid/blob/master/scripts/community-id),\n  which calculates the ID directly for given flow tuples. It supports\n  a small but growing list of parsers. Example:\n\n      $ community-id tcp 10.0.0.1 10.0.0.2 10 20\n      1:9j2Dzwrw7T9E+IZi4b4IVT66HBI=\n\n- [community-id-pcap](https://github.com/corelight/pycommunityid/blob/master/scripts/community-id-pcap),\n  which iterates over a pcap via dpkt and renders\n  Community ID values for each suitable packet in the trace. This\n  exercices the package's \"low-level\" API, using flow tuple values as\n  you'd encounter them in a typical network monitor.\n\n- [community-id-tcpdump](https://github.com/corelight/pycommunityid/blob/master/scripts/community-id-tcpdump),\n  which takes tcpdump output on stdin and\n  augments it with Community ID values on stdout. This exercices the\n  package's \"high-level\" API, using ASCII representations of tuple\n  values.\n\nThe package also contains a comprehensive testsuite that can serve as\nreference values to verify the correctness of other\nimplementations. See the contents of the testing/ directory for\ndetails.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/corelight/pycommunityid", "keywords": "", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "communityid", "package_url": "https://pypi.org/project/communityid/", "platform": "", "project_url": "https://pypi.org/project/communityid/", "project_urls": {"Homepage": "https://github.com/corelight/pycommunityid"}, "release_url": "https://pypi.org/project/communityid/1.1/", "requires_dist": null, "requires_python": "", "summary": "Community ID flow hashing", "version": "1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>pycommunityid</h1>\n<p>This package provides a Python implementation of the open\n<a href=\"https://github.com/corelight/community-id-spec\" rel=\"nofollow\">Community ID</a>\nflow hashing standard.</p>\n<p>It supports Python versions 2.7+ and 3+.</p>\n<h2>Installation</h2>\n<p>This package is available <a href=\"https://pypi.org/project/communityid/\" rel=\"nofollow\">on PyPI</a>, therefore:</p>\n<pre><code>pip install communityid\n</code></pre>\n<h2>Usage</h2>\n<p>The API breaks the computation into two steps: (1) creation of a flow\ntuple object, (2) computation of the Community ID string on this\nobject. It supports various input types in order to accommodate\nnetwork byte order representations of flow endpoints, high-level ASCII,\nand ipaddress objects.</p>\n<p>Here's what it looks like:</p>\n<pre><code>import communityid\n\ncid = communityid.CommunityID()\ntpl = communityid.FlowTuple.make_tcp('127.0.0.1', '10.0.0.1', 1234, 80)\n\nprint(cid.calc(tpl))\n</code></pre>\n<p>This will print \"1:mgRgpIZSu0KHDp/QrtcWZpkJpMU=\".</p>\n<p>The package includes three sample applications:</p>\n<ul>\n<li>\n<p><a href=\"https://github.com/corelight/pycommunityid/blob/master/scripts/community-id\" rel=\"nofollow\">community-id</a>,\nwhich calculates the ID directly for given flow tuples. It supports\na small but growing list of parsers. Example:</p>\n<pre><code>$ community-id tcp 10.0.0.1 10.0.0.2 10 20\n1:9j2Dzwrw7T9E+IZi4b4IVT66HBI=\n</code></pre>\n</li>\n<li>\n<p><a href=\"https://github.com/corelight/pycommunityid/blob/master/scripts/community-id-pcap\" rel=\"nofollow\">community-id-pcap</a>,\nwhich iterates over a pcap via dpkt and renders\nCommunity ID values for each suitable packet in the trace. This\nexercices the package's \"low-level\" API, using flow tuple values as\nyou'd encounter them in a typical network monitor.</p>\n</li>\n<li>\n<p><a href=\"https://github.com/corelight/pycommunityid/blob/master/scripts/community-id-tcpdump\" rel=\"nofollow\">community-id-tcpdump</a>,\nwhich takes tcpdump output on stdin and\naugments it with Community ID values on stdout. This exercices the\npackage's \"high-level\" API, using ASCII representations of tuple\nvalues.</p>\n</li>\n</ul>\n<p>The package also contains a comprehensive testsuite that can serve as\nreference values to verify the correctness of other\nimplementations. See the contents of the testing/ directory for\ndetails.</p>\n\n          </div>"}, "last_serial": 5570370, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "78dc0e0f5078ed94816ae7e07059b8c8", "sha256": "058e531769b8d81e7cb07f73b9ded5530b17421c836c632b1fbe013225d6f540"}, "downloads": -1, "filename": "communityid-1.0-py2-none-any.whl", "has_sig": false, "md5_digest": "78dc0e0f5078ed94816ae7e07059b8c8", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 12521, "upload_time": "2019-07-19T06:14:03", "upload_time_iso_8601": "2019-07-19T06:14:03.355636Z", "url": "https://files.pythonhosted.org/packages/ca/1e/cad01ef5c173d0a7082692766fa703a206a535740215fe28f863720e1746/communityid-1.0-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0eb7da04b04ece04f388959ba4c269bf", "sha256": "506d20f61db9b7bd47d742288ab7a6cbeeb1cfa63aab5b930f8a784b7b7aacc3"}, "downloads": -1, "filename": "communityid-1.0.tar.gz", "has_sig": false, "md5_digest": "0eb7da04b04ece04f388959ba4c269bf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9431, "upload_time": "2019-07-19T06:14:05", "upload_time_iso_8601": "2019-07-19T06:14:05.733090Z", "url": "https://files.pythonhosted.org/packages/15/8d/613c695c6ed0eed79c2eff95f12438d4c725c2de5ed298e103dd9649dc41/communityid-1.0.tar.gz", "yanked": false}], "1.1": [{"comment_text": "", "digests": {"md5": "044a62ed30cbdee7c42800ced4de3215", "sha256": "781f5fa10877b27ca475fbc65b5f3d1003d8fdead567a2ff8bd605fe79decb6b"}, "downloads": -1, "filename": "communityid-1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "044a62ed30cbdee7c42800ced4de3215", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 12591, "upload_time": "2019-07-23T04:27:13", "upload_time_iso_8601": "2019-07-23T04:27:13.808221Z", "url": "https://files.pythonhosted.org/packages/25/8a/edcb8f7e6fc3e58145182c178fb20ec5c87002a0d298946419f968eed716/communityid-1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cc0e5df1863312f83a7b5353f27b34ba", "sha256": "f7b6a396f39b6ce5cbfb9a95d89869b1bae836bcb7e08a5c0b7cfff6edfc7500"}, "downloads": -1, "filename": "communityid-1.1.tar.gz", "has_sig": false, "md5_digest": "cc0e5df1863312f83a7b5353f27b34ba", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9431, "upload_time": "2019-07-23T04:27:15", "upload_time_iso_8601": "2019-07-23T04:27:15.273726Z", "url": "https://files.pythonhosted.org/packages/df/2b/c6977620b1413420ae19f6166dada5a24f22da1c8b2f4c3152ae072e7f2e/communityid-1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "044a62ed30cbdee7c42800ced4de3215", "sha256": "781f5fa10877b27ca475fbc65b5f3d1003d8fdead567a2ff8bd605fe79decb6b"}, "downloads": -1, "filename": "communityid-1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "044a62ed30cbdee7c42800ced4de3215", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 12591, "upload_time": "2019-07-23T04:27:13", "upload_time_iso_8601": "2019-07-23T04:27:13.808221Z", "url": "https://files.pythonhosted.org/packages/25/8a/edcb8f7e6fc3e58145182c178fb20ec5c87002a0d298946419f968eed716/communityid-1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cc0e5df1863312f83a7b5353f27b34ba", "sha256": "f7b6a396f39b6ce5cbfb9a95d89869b1bae836bcb7e08a5c0b7cfff6edfc7500"}, "downloads": -1, "filename": "communityid-1.1.tar.gz", "has_sig": false, "md5_digest": "cc0e5df1863312f83a7b5353f27b34ba", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9431, "upload_time": "2019-07-23T04:27:15", "upload_time_iso_8601": "2019-07-23T04:27:15.273726Z", "url": "https://files.pythonhosted.org/packages/df/2b/c6977620b1413420ae19f6166dada5a24f22da1c8b2f4c3152ae072e7f2e/communityid-1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:44:19 2020"}