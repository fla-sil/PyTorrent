{"info": {"author": "Anton Bobrov", "author_email": "baverman@gmail.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6"], "description": "Hisser\n======\n\n|travis| |coverage| |pyver|\n\n.. |travis| image:: https://travis-ci.org/baverman/hisser.svg?branch=master\n   :target: https://travis-ci.org/baverman/hisser\n\n.. |coverage| image:: https://img.shields.io/badge/coverage-100%25-brightgreen.svg\n\n.. |pyver| image:: https://img.shields.io/badge/python-3.5%2C_3.6-blue.svg\n\n\nTime series database, backend for graphite, fast alternative to carbon + whisper.\n\nFeatures:\n\n* Low disk usage (IOPS) for metric store, it depends from actual data\n  volumes instead of a number of metrics (in case of whisper). Hisser\n  was designed to process million of metrics.\n\n* Fast queries. Optimized query parsing and response rendering (~3x\n  boost comparing with vanilla graphite-web).\n\n* Tag support.\n\n* Drop-in replacement for whisper + carbon.\n\n* 100% test coverage.\n\n\n.. contents:: **Table of Contents**\n\n\nConfiguration\n-------------\n\nDefault options and documentation for them can be read in\n`default config`_.\n\n.. _default config: hisser/defaults.py\n\nYou can create custom configuration file and use ``--config`` cli option or\nuse ``HISSER_*`` environment variables to override default values.\nFor example ``HISSER_DATA_DIR`` will set ``DATA_DIR`` configuration\nparameter.\n\n\nRun\n---\n\nSimplest way is to use official `docker image`::\n\n   docker run --rm -u $(id -u):$(id -g) -p 2003:2003 -p 8080:8080 -v /path/to/data:/data baverman/graphite-hisser\n\nPort `2003` is a graphite protocol. `8080` is graphite API, you can point\ngrafana to it. In production you don't need 8080 port accessible from\nexternal network. In this case you should use separate docker network\nand map 2003 port only or use ``--network host`` and specify ``GRAPHITE_BIND=127.0.0.1:8080``\nenvvar.\n\nIMPORTANT! To use tag support with grafana you need grafana 5.x and set graphite\nversion ``1.1.x`` in storage settings.\n\nNote: for grafana you can use tiny `grafana image`_.\n\n.. _docker image: https://hub.docker.com/r/baverman/graphite-hisser/\n.. _grafana image: https://hub.docker.com/r/baverman/grafana/\n\n\nInternals\n---------\n\nHisser is a very simple metric storage. All heavy work is done by `lmdb`_.\nMetrics are organized into blocks (lmdb databases). Each block\ncontains all metrics and their data for particular amount of time. Blocks\nwith same resolution are grouped under corresponding directory:\n\nExample data layout:\n\n::\n\n   data_dir/\n   \u251c\u2500\u2500 300  # resolution (1 data point every 5-minute)\n   \u2502\u00a0\u00a0 \u251c\u2500\u2500 1533990300.519.hdb   # timestamp-of-block-start.number-of-points.hdb\n   \u2502\u00a0\u00a0 \u251c\u2500\u2500 1534621800.191.hdb\n   \u2502\u00a0\u00a0 \u251c\u2500\u2500 1534679100.48.hdb\n   \u2502\u00a0\u00a0 \u2514\u2500\u2500 blocks.state         # lock file\n   \u251c\u2500\u2500 60   # resolution (1 data point every minute)\n   \u2502\u00a0\u00a0 \u251c\u2500\u2500 1534621920.700.hdb\n   \u2502\u00a0\u00a0 \u251c\u2500\u2500 1534663920.320.hdb\n   \u2502\u00a0\u00a0 \u251c\u2500\u2500 1534683120.160.hdb\n   \u2502\u00a0\u00a0 \u251c\u2500\u2500 1534692720.40.hdb\n   \u2502\u00a0\u00a0 \u251c\u2500\u2500 1534695120.11.hdb\n   \u2502\u00a0\u00a0 \u251c\u2500\u2500 1534695900.6.hdb\n   \u2502\u00a0\u00a0 \u2514\u2500\u2500 blocks.state\n   \u2514\u2500\u2500 metric.index       # metric name and tag index\n\n\nThis layout allows to dump data from memory buffer very efficiently (whisper\nneeds one io-operation per metric and can kneel a host with several hundreds of\nmetrics).\n\nIf points in memory exceed ``BUFFER_FLUSH_SIZE`` or ``BUFFER_MAX_POINTS`` it will be\nflushed into separate block::\n\n   +----------+----------+----------+\n   |  block1  |  block2  |  block3  |  resolution 60\n   +----------+----------+----------+\n\nFrom time to time small blocks are merged into greater one::\n\n   +---------------------+----------+\n   |       block12       |  block3  |  resolution 60\n   +---------------------+----------+\n\nAnd from time to time big blocks are downsampled into blocks with lower\nresolution::\n\n   +---------------------+----------+\n   |       block12       |  block3  |  resolution 60\n   +---------------------+----------+\n              |\n              v\n        +----------+\n        | block12' |  resolution 300\n        +----------+\n\nYes, it is very simple.\n\n.. _lmdb: http://www.lmdb.tech/doc/\n\n\nFAQ\n---\n\n1. But there is a better alternative to whisper. InfluxDB!\n\n   Yes, InfluxDB is a way better than whisper. But is has some drawbacks\n   comparing to hisser.\n\n   * Requires more data space.\n   * Consumes more IOPS, memory and CPU.\n   * Needs manual retention configuration.\n   * Slower to query.\n   * Implicit metric grouping can lead to confusing graphs in grafana.\n     You have to limit groups to explicit tag values or do ``group by\n     $tag``.\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/baverman/hisser", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "hisser", "package_url": "https://pypi.org/project/hisser/", "platform": "", "project_url": "https://pypi.org/project/hisser/", "project_urls": {"Homepage": "https://github.com/baverman/hisser"}, "release_url": "https://pypi.org/project/hisser/0.10.1/", "requires_dist": null, "requires_python": "", "summary": "Fast TSDB backend for graphite", "version": "0.10.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://travis-ci.org/baverman/hisser\" rel=\"nofollow\"><img alt=\"travis\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/905f43d2c90616a9307283331a5a7fa1f8cb92e3/68747470733a2f2f7472617669732d63692e6f72672f62617665726d616e2f6869737365722e7376673f6272616e63683d6d6173746572\"></a> <img alt=\"coverage\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2bdee873cc103def8843888436f081cc6be1dcdb/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f7665726167652d3130302532352d627269676874677265656e2e737667\"> <img alt=\"pyver\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ac088f45dc9aa427f9ba5a8b053d7e60731fd08b/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f707974686f6e2d332e352532435f332e362d626c75652e737667\"></p>\n<p>Time series database, backend for graphite, fast alternative to carbon + whisper.</p>\n<p>Features:</p>\n<ul>\n<li>Low disk usage (IOPS) for metric store, it depends from actual data\nvolumes instead of a number of metrics (in case of whisper). Hisser\nwas designed to process million of metrics.</li>\n<li>Fast queries. Optimized query parsing and response rendering (~3x\nboost comparing with vanilla graphite-web).</li>\n<li>Tag support.</li>\n<li>Drop-in replacement for whisper + carbon.</li>\n<li>100% test coverage.</li>\n</ul>\n<div id=\"table-of-contents\">\n<p><strong>Table of Contents</strong></p>\n<ul>\n<li><a href=\"#configuration\" id=\"id1\" rel=\"nofollow\">Configuration</a></li>\n<li><a href=\"#run\" id=\"id2\" rel=\"nofollow\">Run</a></li>\n<li><a href=\"#internals\" id=\"id3\" rel=\"nofollow\">Internals</a></li>\n<li><a href=\"#faq\" id=\"id4\" rel=\"nofollow\">FAQ</a></li>\n</ul>\n</div>\n<div id=\"configuration\">\n<h2><a href=\"#id1\" rel=\"nofollow\">Configuration</a></h2>\n<p>Default options and documentation for them can be read in\n<a href=\"hisser/defaults.py\" rel=\"nofollow\">default config</a>.</p>\n<p>You can create custom configuration file and use <tt><span class=\"pre\">--config</span></tt> cli option or\nuse <tt>HISSER_*</tt> environment variables to override default values.\nFor example <tt>HISSER_DATA_DIR</tt> will set <tt>DATA_DIR</tt> configuration\nparameter.</p>\n</div>\n<div id=\"run\">\n<h2><a href=\"#id2\" rel=\"nofollow\">Run</a></h2>\n<p>Simplest way is to use official <cite>docker image</cite>:</p>\n<pre>docker run --rm -u $(id -u):$(id -g) -p 2003:2003 -p 8080:8080 -v /path/to/data:/data baverman/graphite-hisser\n</pre>\n<p>Port <cite>2003</cite> is a graphite protocol. <cite>8080</cite> is graphite API, you can point\ngrafana to it. In production you don\u2019t need 8080 port accessible from\nexternal network. In this case you should use separate docker network\nand map 2003 port only or use <tt><span class=\"pre\">--network</span> host</tt> and specify <tt>GRAPHITE_BIND=127.0.0.1:8080</tt>\nenvvar.</p>\n<p>IMPORTANT! To use tag support with grafana you need grafana 5.x and set graphite\nversion <tt>1.1.x</tt> in storage settings.</p>\n<p>Note: for grafana you can use tiny <a href=\"https://hub.docker.com/r/baverman/grafana/\" rel=\"nofollow\">grafana image</a>.</p>\n</div>\n<div id=\"internals\">\n<h2><a href=\"#id3\" rel=\"nofollow\">Internals</a></h2>\n<p>Hisser is a very simple metric storage. All heavy work is done by <a href=\"http://www.lmdb.tech/doc/\" rel=\"nofollow\">lmdb</a>.\nMetrics are organized into blocks (lmdb databases). Each block\ncontains all metrics and their data for particular amount of time. Blocks\nwith same resolution are grouped under corresponding directory:</p>\n<p>Example data layout:</p>\n<pre>data_dir/\n\u251c\u2500\u2500 300  # resolution (1 data point every 5-minute)\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 1533990300.519.hdb   # timestamp-of-block-start.number-of-points.hdb\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 1534621800.191.hdb\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 1534679100.48.hdb\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 blocks.state         # lock file\n\u251c\u2500\u2500 60   # resolution (1 data point every minute)\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 1534621920.700.hdb\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 1534663920.320.hdb\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 1534683120.160.hdb\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 1534692720.40.hdb\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 1534695120.11.hdb\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 1534695900.6.hdb\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 blocks.state\n\u2514\u2500\u2500 metric.index       # metric name and tag index\n</pre>\n<p>This layout allows to dump data from memory buffer very efficiently (whisper\nneeds one io-operation per metric and can kneel a host with several hundreds of\nmetrics).</p>\n<p>If points in memory exceed <tt>BUFFER_FLUSH_SIZE</tt> or <tt>BUFFER_MAX_POINTS</tt> it will be\nflushed into separate block:</p>\n<pre>+----------+----------+----------+\n|  block1  |  block2  |  block3  |  resolution 60\n+----------+----------+----------+\n</pre>\n<p>From time to time small blocks are merged into greater one:</p>\n<pre>+---------------------+----------+\n|       block12       |  block3  |  resolution 60\n+---------------------+----------+\n</pre>\n<p>And from time to time big blocks are downsampled into blocks with lower\nresolution:</p>\n<pre>+---------------------+----------+\n|       block12       |  block3  |  resolution 60\n+---------------------+----------+\n           |\n           v\n     +----------+\n     | block12' |  resolution 300\n     +----------+\n</pre>\n<p>Yes, it is very simple.</p>\n</div>\n<div id=\"faq\">\n<h2><a href=\"#id4\" rel=\"nofollow\">FAQ</a></h2>\n<ol>\n<li><p>But there is a better alternative to whisper. InfluxDB!</p>\n<p>Yes, InfluxDB is a way better than whisper. But is has some drawbacks\ncomparing to hisser.</p>\n<ul>\n<li>Requires more data space.</li>\n<li>Consumes more IOPS, memory and CPU.</li>\n<li>Needs manual retention configuration.</li>\n<li>Slower to query.</li>\n<li>Implicit metric grouping can lead to confusing graphs in grafana.\nYou have to limit groups to explicit tag values or do <tt>group by\n$tag</tt>.</li>\n</ul>\n</li>\n</ol>\n</div>\n\n          </div>"}, "last_serial": 4187088, "releases": {"0.10": [{"comment_text": "", "digests": {"md5": "db0070897a5c4fdb0846a07ef02b00b0", "sha256": "c5a484cb74e1c0f0fc51023ab5fbb7afb47ca5083485c8c4ccc0e526b5bee0f8"}, "downloads": -1, "filename": "hisser-0.10.tar.gz", "has_sig": false, "md5_digest": "db0070897a5c4fdb0846a07ef02b00b0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18557, "upload_time": "2018-08-19T19:07:12", "upload_time_iso_8601": "2018-08-19T19:07:12.629583Z", "url": "https://files.pythonhosted.org/packages/d3/fc/5fefdb2c3195fe5f19934456cb796c4eb01ac5de16567b0f3abd7e4bb8ce/hisser-0.10.tar.gz", "yanked": false}], "0.10.1": [{"comment_text": "", "digests": {"md5": "e72c8a62f61deee2fdc10c3998d9e2d8", "sha256": "a461fcb415a432746ec113a3277bfc5ecb33cc8450b93e88770d4ab5f11b2204"}, "downloads": -1, "filename": "hisser-0.10.1.tar.gz", "has_sig": false, "md5_digest": "e72c8a62f61deee2fdc10c3998d9e2d8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18592, "upload_time": "2018-08-20T05:05:45", "upload_time_iso_8601": "2018-08-20T05:05:45.315600Z", "url": "https://files.pythonhosted.org/packages/74/2a/2c98798853788e432ce5f7ad7e1af7c0459b6f85286d10817a50727cf17f/hisser-0.10.1.tar.gz", "yanked": false}], "0.9": [{"comment_text": "", "digests": {"md5": "fcd14573f37bcf864c000314160bf618", "sha256": "cd3876dbb5d9fb5e138802abdfd10d706a0789535f4611077fdd236734029b76"}, "downloads": -1, "filename": "hisser-0.9.tar.gz", "has_sig": false, "md5_digest": "fcd14573f37bcf864c000314160bf618", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16397, "upload_time": "2018-08-12T20:36:39", "upload_time_iso_8601": "2018-08-12T20:36:39.511369Z", "url": "https://files.pythonhosted.org/packages/1f/ed/d6b32e73b87a13c6410f39a6d18ce54d573840d6b995786ef9e6366848ed/hisser-0.9.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e72c8a62f61deee2fdc10c3998d9e2d8", "sha256": "a461fcb415a432746ec113a3277bfc5ecb33cc8450b93e88770d4ab5f11b2204"}, "downloads": -1, "filename": "hisser-0.10.1.tar.gz", "has_sig": false, "md5_digest": "e72c8a62f61deee2fdc10c3998d9e2d8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18592, "upload_time": "2018-08-20T05:05:45", "upload_time_iso_8601": "2018-08-20T05:05:45.315600Z", "url": "https://files.pythonhosted.org/packages/74/2a/2c98798853788e432ce5f7ad7e1af7c0459b6f85286d10817a50727cf17f/hisser-0.10.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:51:06 2020"}