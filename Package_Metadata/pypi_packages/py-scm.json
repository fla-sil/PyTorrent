{"info": {"author": "Zen Chien", "author_email": "jixing.jian@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: Text Processing :: Linguistic"], "description": "This is a python library supporting statechart (in scxml format) originated by David Harel.\nFeatures like hierarchical states, parallel states, and history are ready for you to command.\nYou won't find another lib as easy and flexible to use as SCM.\n\nJust take a look and run scm_tutorial.py please.\nThe code is listed here:\n\n.. code:: python\n\n    from scm import StateMachineManager\n\n    client_scxml = \"\"\"\n    <scxml> \n        <state id='appear'> \n            <transition event='born' ontransit='say_hello' target='live'/> \n        </state> \n        <parallel id='live'> \n                <transition event='hp_zero' target='dead'/> \n                <state id='eat'> \n                </state> \n                <state id='move'> \n                </state> \n        </parallel> \n        <final id='dead'/>\n        </scxml> \n    \"\"\"\n\n    class Life:\n        def __init__(self):\n            self.mach_ = StateMachineManager.instance().getMach('the life')\n            self.mach_.set_do_exit_state_on_destroy(True)\n            self.mach_.register_state_slot(\"appear\", self.onentry_appear, self.onexit_appear)\n            self.mach_.register_state_slot(\"live\", self.onentry_live, self.onexit_live)\n            self.mach_.register_state_slot(\"eat\", self.onentry_eat, self.onexit_eat)\n            self.mach_.register_state_slot(\"move\", self.onentry_move, self.onexit_move)\n            self.mach_.register_state_slot(\"dead\", self.onentry_dead, self.onexit_dead)\n            self.mach_.register_action_slot('say_hello', self.say_hello)\n            self.mach_.StartEngine()\n            \n        def test(self):\n            self.mach_.enqueEvent(\"born\")\n            #self.mach_.frame_move(0) # state change to 'live'\n            StateMachineManager.instance().pumpMachEvents()\n            self.mach_.enqueEvent(\"hp_zero\")\n            #self.mach_.frame_move(0) # state change to 'dead'\n            StateMachineManager.instance().pumpMachEvents()\n            \n        def onentry_appear(self):\n            print(\"come to exist\")\n        \n        def onexit_appear(self):\n            print(\"we are going to...\")\n        \n        def onentry_live(self):\n            print(\"start living\")\n        \n        def onexit_live(self):\n            print(\"no longer live\")\n        \n        def onentry_eat(self):\n            print(\"start eating\")\n        \n        def onexit_eat(self):\n            print(\"stop eating\")\n        \n        def onentry_move(self):\n            print(\"start moving\")\n        \n        def onexit_move(self):\n            print(\"stop moving\")\n        \n        def onentry_dead(self):\n            print(\"end\")\n        \n        def onexit_dead(self):\n            assert (0 and \"should not exit final state\");\n            print(\"no, this won't get called.\")\n        \n        def say_hello(self):\n            print(\"\\n*** Hello, World! ***\\n\")\n            \n    if __name__ == '__main__':\n        StateMachineManager.instance().set_scxml(\"the life\", client_scxml)\n        life = Life()\n        life.test()\n        StateMachineManager.instance().pumpMachEvents()\n\n    \n\nThe output you should see\n\n::\n\n    come to exist\n    we are going to...\n\n    *** Hello, World! ***\n\n    start living\n    start eating\n    start moving\n    stop eating\n    stop moving\n    no longer live\n    end\n\nSimply\n\n1. you load the scxml from external file or from a string defined in your code.\n2. you connect these **onentry_** **onexit_**, etc. slots\n3. you start the engine, call the framemove in main loop.\n\nDone.\n\nIt's that easy!\n\nRead the tutorials at:\n\n- (English) http://zen747.blogspot.tw/2017/07/a-scm-framework-tutorial-statechart.html\n- (Traditional Chinese) http://zen747.blogspot.tw/2017/07/scm-framework.html", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/zen747/pyscm", "keywords": "statecharts,state-machine,scxml,david-harel", "license": "Apache License 2.0", "maintainer": "", "maintainer_email": "", "name": "py-scm", "package_url": "https://pypi.org/project/py-scm/", "platform": "", "project_url": "https://pypi.org/project/py-scm/", "project_urls": {"Homepage": "https://github.com/zen747/pyscm"}, "release_url": "https://pypi.org/project/py-scm/1.0.2/", "requires_dist": null, "requires_python": ">=3.6", "summary": "A python state machine framework based on statecharts (scxml)", "version": "1.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>This is a python library supporting statechart (in scxml format) originated by David Harel.\nFeatures like hierarchical states, parallel states, and history are ready for you to command.\nYou won\u2019t find another lib as easy and flexible to use as SCM.</p>\n<p>Just take a look and run scm_tutorial.py please.\nThe code is listed here:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">scm</span> <span class=\"kn\">import</span> <span class=\"n\">StateMachineManager</span>\n\n<span class=\"n\">client_scxml</span> <span class=\"o\">=</span> <span class=\"s2\">\"\"\"\n&lt;scxml&gt;\n    &lt;state id='appear'&gt;\n        &lt;transition event='born' ontransit='say_hello' target='live'/&gt;\n    &lt;/state&gt;\n    &lt;parallel id='live'&gt;\n            &lt;transition event='hp_zero' target='dead'/&gt;\n            &lt;state id='eat'&gt;\n            &lt;/state&gt;\n            &lt;state id='move'&gt;\n            &lt;/state&gt;\n    &lt;/parallel&gt;\n    &lt;final id='dead'/&gt;\n    &lt;/scxml&gt;\n\"\"\"</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Life</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">mach_</span> <span class=\"o\">=</span> <span class=\"n\">StateMachineManager</span><span class=\"o\">.</span><span class=\"n\">instance</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">getMach</span><span class=\"p\">(</span><span class=\"s1\">'the life'</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">mach_</span><span class=\"o\">.</span><span class=\"n\">set_do_exit_state_on_destroy</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">mach_</span><span class=\"o\">.</span><span class=\"n\">register_state_slot</span><span class=\"p\">(</span><span class=\"s2\">\"appear\"</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">onentry_appear</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">onexit_appear</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">mach_</span><span class=\"o\">.</span><span class=\"n\">register_state_slot</span><span class=\"p\">(</span><span class=\"s2\">\"live\"</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">onentry_live</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">onexit_live</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">mach_</span><span class=\"o\">.</span><span class=\"n\">register_state_slot</span><span class=\"p\">(</span><span class=\"s2\">\"eat\"</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">onentry_eat</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">onexit_eat</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">mach_</span><span class=\"o\">.</span><span class=\"n\">register_state_slot</span><span class=\"p\">(</span><span class=\"s2\">\"move\"</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">onentry_move</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">onexit_move</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">mach_</span><span class=\"o\">.</span><span class=\"n\">register_state_slot</span><span class=\"p\">(</span><span class=\"s2\">\"dead\"</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">onentry_dead</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">onexit_dead</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">mach_</span><span class=\"o\">.</span><span class=\"n\">register_action_slot</span><span class=\"p\">(</span><span class=\"s1\">'say_hello'</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">say_hello</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">mach_</span><span class=\"o\">.</span><span class=\"n\">StartEngine</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">test</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">mach_</span><span class=\"o\">.</span><span class=\"n\">enqueEvent</span><span class=\"p\">(</span><span class=\"s2\">\"born\"</span><span class=\"p\">)</span>\n        <span class=\"c1\">#self.mach_.frame_move(0) # state change to 'live'</span>\n        <span class=\"n\">StateMachineManager</span><span class=\"o\">.</span><span class=\"n\">instance</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">pumpMachEvents</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">mach_</span><span class=\"o\">.</span><span class=\"n\">enqueEvent</span><span class=\"p\">(</span><span class=\"s2\">\"hp_zero\"</span><span class=\"p\">)</span>\n        <span class=\"c1\">#self.mach_.frame_move(0) # state change to 'dead'</span>\n        <span class=\"n\">StateMachineManager</span><span class=\"o\">.</span><span class=\"n\">instance</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">pumpMachEvents</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">onentry_appear</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"come to exist\"</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">onexit_appear</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"we are going to...\"</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">onentry_live</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"start living\"</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">onexit_live</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"no longer live\"</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">onentry_eat</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"start eating\"</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">onexit_eat</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"stop eating\"</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">onentry_move</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"start moving\"</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">onexit_move</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"stop moving\"</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">onentry_dead</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"end\"</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">onexit_dead</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">assert</span> <span class=\"p\">(</span><span class=\"mi\">0</span> <span class=\"ow\">and</span> <span class=\"s2\">\"should not exit final state\"</span><span class=\"p\">);</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"no, this won't get called.\"</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">say_hello</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"</span><span class=\"se\">\\n</span><span class=\"s2\">*** Hello, World! ***</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"n\">StateMachineManager</span><span class=\"o\">.</span><span class=\"n\">instance</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">set_scxml</span><span class=\"p\">(</span><span class=\"s2\">\"the life\"</span><span class=\"p\">,</span> <span class=\"n\">client_scxml</span><span class=\"p\">)</span>\n    <span class=\"n\">life</span> <span class=\"o\">=</span> <span class=\"n\">Life</span><span class=\"p\">()</span>\n    <span class=\"n\">life</span><span class=\"o\">.</span><span class=\"n\">test</span><span class=\"p\">()</span>\n    <span class=\"n\">StateMachineManager</span><span class=\"o\">.</span><span class=\"n\">instance</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">pumpMachEvents</span><span class=\"p\">()</span>\n</pre>\n<p>The output you should see</p>\n<pre>come to exist\nwe are going to...\n\n*** Hello, World! ***\n\nstart living\nstart eating\nstart moving\nstop eating\nstop moving\nno longer live\nend\n</pre>\n<p>Simply</p>\n<ol>\n<li>you load the scxml from external file or from a string defined in your code.</li>\n<li>you connect these <strong>onentry_</strong> <strong>onexit_</strong>, etc. slots</li>\n<li>you start the engine, call the framemove in main loop.</li>\n</ol>\n<p>Done.</p>\n<p>It\u2019s that easy!</p>\n<p>Read the tutorials at:</p>\n<ul>\n<li>(English) <a href=\"http://zen747.blogspot.tw/2017/07/a-scm-framework-tutorial-statechart.html\" rel=\"nofollow\">http://zen747.blogspot.tw/2017/07/a-scm-framework-tutorial-statechart.html</a></li>\n<li>(Traditional Chinese) <a href=\"http://zen747.blogspot.tw/2017/07/scm-framework.html\" rel=\"nofollow\">http://zen747.blogspot.tw/2017/07/scm-framework.html</a></li>\n</ul>\n\n          </div>"}, "last_serial": 6096785, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "bebbcf837d06359b2cd79b0eea25daf0", "sha256": "1c2a3845d449eeee6b5d2a4ff0609104718b1689f15fb85a7f317d3fc205d0f8"}, "downloads": -1, "filename": "py_scm-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "bebbcf837d06359b2cd79b0eea25daf0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 14978, "upload_time": "2019-03-10T13:37:22", "upload_time_iso_8601": "2019-03-10T13:37:22.320488Z", "url": "https://files.pythonhosted.org/packages/f9/f8/7f44d3345f43990f89ea49a7e954663d2836e963a66ac77f96a82f0c3c55/py_scm-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3615d75751580107aa0239d1deaf85a9", "sha256": "eebb464061a07a07c52342cb565b73d8a396af98a4d3cf200efd495decec5330"}, "downloads": -1, "filename": "py-scm-1.0.0.tar.gz", "has_sig": false, "md5_digest": "3615d75751580107aa0239d1deaf85a9", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 15238, "upload_time": "2019-03-10T13:37:24", "upload_time_iso_8601": "2019-03-10T13:37:24.709317Z", "url": "https://files.pythonhosted.org/packages/2c/e0/a716aa41571d8efcde0441a0e5d85cc221dfa97b672bfced3a15354699de/py-scm-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "ec6a05857f1b42b58e4e7a67f54c6c65", "sha256": "92828379398efb336c3a855d36fe11052525ec28e04f2bbde458c3fbb5a97ac8"}, "downloads": -1, "filename": "py_scm-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "ec6a05857f1b42b58e4e7a67f54c6c65", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 15115, "upload_time": "2019-05-13T03:01:02", "upload_time_iso_8601": "2019-05-13T03:01:02.240488Z", "url": "https://files.pythonhosted.org/packages/fc/4b/0ef80b30e699245613bb94c677bddd4b9189c13e5e442c0d97860769632a/py_scm-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8146096e229df14acd897f908c8c7893", "sha256": "1a088b354c82841d233f7a5dcadf0b91d4954f26c1409c1f0a357ca88376f7c2"}, "downloads": -1, "filename": "py-scm-1.0.1.tar.gz", "has_sig": false, "md5_digest": "8146096e229df14acd897f908c8c7893", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 15638, "upload_time": "2019-05-13T03:01:03", "upload_time_iso_8601": "2019-05-13T03:01:03.787865Z", "url": "https://files.pythonhosted.org/packages/ea/88/644a9c880a110e40fb5bee4250bcc21d4df73fbb16967bf6c34419e13928/py-scm-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "0794da5c1ab89ea058711caf0a3dfa6c", "sha256": "13b64ed0b448d96ef703c2c91b0c78ddf61a441bdb81775ed83ee3030c4548cd"}, "downloads": -1, "filename": "py-scm-1.0.2.tar.gz", "has_sig": false, "md5_digest": "0794da5c1ab89ea058711caf0a3dfa6c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 15707, "upload_time": "2019-11-08T01:42:56", "upload_time_iso_8601": "2019-11-08T01:42:56.808285Z", "url": "https://files.pythonhosted.org/packages/c8/f4/0a6af64fa2e55edae745b5e841f5f49dfb630d0d248a4f22092b87888c5f/py-scm-1.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "0794da5c1ab89ea058711caf0a3dfa6c", "sha256": "13b64ed0b448d96ef703c2c91b0c78ddf61a441bdb81775ed83ee3030c4548cd"}, "downloads": -1, "filename": "py-scm-1.0.2.tar.gz", "has_sig": false, "md5_digest": "0794da5c1ab89ea058711caf0a3dfa6c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 15707, "upload_time": "2019-11-08T01:42:56", "upload_time_iso_8601": "2019-11-08T01:42:56.808285Z", "url": "https://files.pythonhosted.org/packages/c8/f4/0a6af64fa2e55edae745b5e841f5f49dfb630d0d248a4f22092b87888c5f/py-scm-1.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:57:15 2020"}