{"info": {"author": "Saul Shanabrook", "author_email": "UNKNOWN", "bugtrack_url": null, "classifiers": [], "description": "# dc-campaign-finance-scraper\n\n## Install\n```bash\n$ pip install dc-campaign-finance-scraper\nDownloading/unpacking dc-campaign-finance-scraper\n...\n```\n\n## CLI Usage\n\nThe easiest way to get data out from the scraper is to use the CLI. Once you\nit installed, you should be able to run the `dc-campaign-finance-scraper`\ncommand\n\n```bash\n$ dc-campaign-finance-scraper --help\nUsage: dc-campaign-finance-scraper [OPTIONS] COMMAND [ARGS]...\n\nOptions:\n  --log / --no-log      Print log of all HTTP requests  [default: False]\n  --cache / --no-cache  Cache all requests to file.  [default: True]\n  --help                Show this message and exit.\n\nCommands:\n  committees_dup  Checks to see if any committees are duplicated in multiple\n                  race\n  records         List of records\n```\n\nTo get a list of records of all contributions or expenditures, use the `records`\nsubcommand.\n\n```bash\n$ Usage: dc-campaign-finance-scraper records [OPTIONS]\n\n  A list all transactions for all campaigns, between FROM-DATE and TO-DATE.\n\n  Also, if specified, only those for the elction in ELECTION-YEAR and\n  running for the office OFFICE.\n\n  Either the expenses of the campaign or the contributions of the campaign,\n  based on REPORT-TYPE.\n\nOptions:\n  --office [Mayor|Council Chairman|Council At-Large|Council Ward 1|Council Ward 2|Council Ward 3|Council Ward 4|Council Ward 5|Council Ward 6|Council Ward 7|Council Ward 8|US Representative|Democratic National Committeeman|Democratic National Committeewoman|Alternate Democratic National Committeeman|Alternate Democratic National Committeewoman|At-Large DC Democratic State Committee|Ward 1 DC Democratic State Committee |Ward 2 DC Democratic State Committee|Ward 3 DC Democratic State Committee|Ward 4 DC Democratic State Committee|Ward 5 DC Democratic State Committee|Ward 6 DC Democratic State Committee|Ward 7 DC Democratic State Committee|Ward 8 DC Democratic State Committee|Democratic Delegates|Democratic Delegates Alternates|Republican Delegates|Republican Delegates Alternates|Republican National Committeeman|Republican National Committeewoman|At-Large DC Republican Committee Official|Ward 1 of the DC Republican Committee|Ward 2 of the DC Republican Committee|Ward 3 of the DC Republican Committee|Ward 4 of the DC Republican Committee|Ward 5 of the DC Republican Committee|Ward 6 of the DC Republican Committee|Ward 7 of the DC Republican Committee|Ward 8 of the DC Republican Committee|Other Political Party|Non Supporting|Supporting|US Senator|School Board Ward 1|School Board Ward 2|School Board Ward 3|School Board Ward 4|School Board Ward 5|School Board Ward 6|School Board Ward 7|School Board Ward 8|School Board At-Large|Attorney General]\n  --election-year INTEGER RANGE\n  --report-type [exp|con]         exp -> expenses, con -> contributions\n                                  [default: con]\n  --from-date TEXT                First date of records.  [default:\n                                  01/01/1999]\n  --to-date TEXT                  Last date of records. Future dates are\n                                  allowed.  [default: 01/01/9999]\n  --format [json|xls|yaml|csv|tsv|html|xlsx|ods]\n                                  Format of out output.\n  --help                          Show this message and exit.\n```\nAlthough the `records` command can be run without any arguments, this\nwill return every record in the system, and will take a long time.\n\nIf you don't specify a `format` it will default to a text based table\nlike output.\n\nHowever, for something more interesting, let's try finding all the mayoral\ndonation in 2014, for the election in 2014.\n\n```bash\n$ dc-campaign-finance-scraper records --office Mayor --election-year 2014 --from-date 01/01/2014 --to-date 01/01/2015\nCommittee Name                            |Candidate Name |Contributor                                  |Address                                 |city                        |state|Zip  |Contributor Type       |Contribution Type|Employer Name                                     |Employer Address                                                 |Amount     |Date of Receipt|Office|Election Year\n------------------------------------------|---------------|---------------------------------------------|----------------------------------------|----------------------------|-----|-----|-----------------------|-----------------|--------------------------------------------------|-----------------------------------------------------------------|-----------|---------------|------|-------------\nBruce Majors, Libertarian for Mayor       |Bruce Majors   |Rufer, Chris                                 |724 Main                                |Woodland                    |CA   |95695|Individual             |Check            |Retired                                           | CA                                                              |$2,000.00  |3/3/2014       |Mayor |2014\nBruce Majors, Libertarian for Mayor       |Bruce Majors   |Majors, Mary                                 |11 Redbud                               |Shelbyville                 |TN   |37160|Individual             |Check            |Retired                                           | TN                                                              |$300.00    |2/27/2014      |Mayor |2014\nBruce Majors, Libertarian for Mayor       |Bruce Majors   |Majors, Bruce                                |1200 23rd Street, NW. #711              |Washington                  |DC   |20037|Candidate              |Check            |                                                  |                                                                 |$1,500.00  |3/1/2014       |Mayor |2014\nBruce Majors, Libertarian for Mayor       |Bruce Majors   |Snead, Edward                                |111 redbud                              |Georgetown                  |TX   |67676|Individual             |Check            |                                                  |                                                                 |$1,000.00  |4/8/2014       |Mayor |2014\nBruce Majors, Libertarian for Mayor       |Bruce Majors   |Delhomme, Laura                              |1515 North Couthouse                    |Arlington                   |VA   |22203|Individual             |Check            |CKI                                               | 1515 North Couthouse, VA 22201                                  |$150.00    |6/7/2014       |Mayor |2014\nBruce Majors, Libertarian for Mayor       |Bruce Majors   |Palmer, Tom                                  |1735                                    |17th Street NW              |DC   |20009|Individual             |CASH             |Atlas Foundation                                  | 1201 L Street NW, Washington, DC 20005                          |$25.00     |6/8/2014       |Mayor |2014\nBruce Majors, Libertarian for Mayor       |Bruce Majors   |Majors, Bruce                                |1200 23rd Street, NW. #711              |Washington                  |DC   |20037|Candidate              |Check            |                                                  |                                                                 |$500.00    |6/1/2014       |Mayor |2014\nCarlos Allen For Mayor                    |Carlos Allen   |Sewell, Anthony                              |507 Louise Avenue                       |Linthicum Heights           |MD   |21090|Individual             |Credit Card      |                                                  |                                                                 |$100.00    |2/5/2014       |Mayor |2014\nCarlos Allen For Mayor                    |Carlos Allen   |Brooks, Karen                                |9709 Manteo Ct                          |Ft Washington               |MD   |20744|Individual             |Credit Card      |                                                  |                                                                 |$15.00     |2/25/2014      |Mayor |2014\nCarlos Allen For Mayor                    |Carlos Allen   |Alsbrook, Darrell                            |2470                                    |LakeMeadow Ln               |GA   |30017|Individual             |Credit Card      |                                                  |                                                                 |$20.00     |3/4/2014       |Mayor |2014\n...\n```\n\n*Notice* Behind the scenes, all the records between the `from-date`\nand `to-date` are requested from the server, and only filtered locally.\nAlso, because office and election year are not included in the source\nrecord set, it is neccesary to try to guess them from the committee\nname and date of donation. What this ends up meaning is that\na whole lot of HTTP requests must happen if you request the whole\ndate range, which will in turn, take a while.\n\n## API Usage\n\nFeel free to access the pythonn api. Take a look at the functions in\n[dc_campaign_finance-scraper/scraper.py](dc_campaign_finance-scraper/scraper.py).\n\n\n## Release instructions\n1. `pip install -e .` to make sure it works\n2. Bump version in `./setup.py`\n3. Commit and create tag for version prefixed with \"v\"\n4. `pip install wheel`\n5. `python setup.py sdist bdist_wheel upload`\n\n\n## Developing locally with Docker\n\n```bash\nfig build python\nfig run fig run python dc-campaign-finance-scraper --help\nfig run fig run python test\n```\n\n## How did I do it?\n### Manual Process\n1. Go to\n   [www.ocf.dc.gov/serv/download.asp](http://www.ocf.dc.gov/serv/download.asp)\n   ![Screenshot of unfilled in serv/download.asp](http://f.cl.ly/items/3J2k2O05223Y1K2T0C43/District%20of%20Columbia%20%20Office%20of%20Campaign%20Finance%20%20Contribution%20%20%20Expenditure%20Search.png)\n2. Fill in `From Date`, `To Date`, and `Payment Type`.\n   ![Screenshot of filled in serv/download.asp](http://f.cl.ly/items/0T3N0O1I1W0A1t2W1t3N/District%20of%20Columbia%20%20Office%20of%20Campaign%20Finance%20%20Contribution%20%20%20Expenditure%20Search%20filled%20in.png)\n3. Click `Submit` and it sends a `POST` to\n   [www.ocf.dc.gov/serv/download.asp](http://www.ocf.dc.gov/serv/download.asp)\n   and displays the entered form.\n   ![Screenshot of submitted form](http://f.cl.ly/items/0Z3k1P2W0l1G2P080o2K/District%20of%20Columbia%20%20Office%20of%20Campaign%20Finance%20%20Contribution%20%20%20Expenditure%20Search%20submitted.png)\n4. Click `Click here to download the CSV File` and it sends a `POST` to\n   [www.ocf.dc.gov/serv/download_conexp.asp](http://www.ocf.dc.gov/serv/download_conexp.asp)\n5. Returns `POST` with CSV text.\n\n### Automation\n#### Selenium\nAt first I tried using\n[Selenium with Python](http://selenium-python.readthedocs.org) to fill in\nthe forms and click the buttons. This will actually run a real(ish) browser\nand execute all the the JS and simulate user input. This worked, but\nit couldn't really handle the returned CSV text from step 5. In a browser\nthis opens in a new window and downloads to your computer, but the\n[PhantomJS driver for Selenium and Python](http://www.realpython.com/blog/python/headless-selenium-testing-with-python-and-phantomjs/)\nwasn't really working for that new window. I might have been able to get\nit to work eventually, but it prompted me to search for a different approach.\n\n#### Requests\nI then started experimenting with\n[Requests for Python](http://docs.python-requests.org/en/latest) to just\ncall the to just make the actual HTTP calls, instead of pretending to be a\nhuman and filling in the form. This was 1) faster 2) less verbose 3) easier\nto understand.\n\n##### Chrome Dev Tools\nI fired up my Chrome Dev Tools and looked at what requests\nwere being made. So I tried to figure out in step 4, what request was actually being sent,\nso that I could replay it programatically. However, since that opened\nin a new window, the Dev Tools didn't save the request.\n![GIF of clicking on download button and it downloading in chrome](http://zippy.gfycat.com/PinkAccomplishedBuffalo.gif)\nIt [isn't possible](http://stackoverflow.com/a/13747562) with chrome\nto open a new window with Dev Tools already open.\n\n##### Chrome Net Internals\nI then tried [chrome://net-internals/#events](chrome://net-internals/#events)\nto see the actual HTTP request being processed. I could see it was sending\na `POST` to`/serv/download_conexp.asp`\nand the returned CSV. However it didn't show the `POST` data or the\ncookies.\n![chrome net internals events showing POST](http://f.cl.ly/items/050P46040W3o2t30431M/Screen%20Shot%202014-06-15%20at%2012.54.33%20PM.png)\n\n##### Charles\nFor that I found [Charles](http://www.charlesproxy.com/)\n(`brew cask install charles`) which provides a HTTP proxy to run your web\ntraffic through and then you can inspect every request.\n\n#### Cookie\nI checked the `POST` headers for the request and tried making it myself.\nI got a response of\n\n```html\n    <script language=\"javascript\">\n        alert(\"Your Session is expired. Please try again\");\n        opener.location.href=\"/serv/download.asp\";\n        window.close();\n    </script>\n```\n\nI found that it was setting a cookie when I requested\n`/serv/download.asp`. I first tried it with a cookie I got  from the browser\nand IT WORKED! I got back the CSV.\n\nSo I began using\n[Requests Sessions](http://docs.python-requests.org/en/latest/user/advanced/#session-objects)\nto first `GET` at `/serv/download.asp` to get a session cookie and then\n`POST` to `/serv/download_conexp.asp` with that cookie. That didn't work,\nI got the `Your Session is expired. Please try again` response.\nSo then I tried doing step 3, sending a `POST` to `/serv/download.asp` and then\nthe identical post to `/serve/download_conexp.asp`, thinking maybe the server\nchecked to see if I submitted the form before letting me download. It worked!\nHowever the next day when I tried again I go the\n`Your Session is expired. Please try again`. Very weird. I tried getting a\ncookie from the my chrome session and using that and it forked. So something\nabout how I get my session on chrome is different from how I get my session\non Requests. I needed to figure out what the difference was.\n\nThen I tried it again and it worked. So who knows. Maybe their site is weird.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/codefordc/dc-campaign-finance-scraper", "keywords": null, "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "dc-campaign-finance-scrapers", "package_url": "https://pypi.org/project/dc-campaign-finance-scrapers/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/dc-campaign-finance-scrapers/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://github.com/codefordc/dc-campaign-finance-scraper"}, "release_url": "https://pypi.org/project/dc-campaign-finance-scrapers/0.5.1/", "requires_dist": null, "requires_python": null, "summary": "Provides data from http://www.ocf.dc.gov/serv/download.asp in a nicer way", "version": "0.5.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            # dc-campaign-finance-scraper<br><br>## Install<br>```bash<br>$ pip install dc-campaign-finance-scraper<br>Downloading/unpacking dc-campaign-finance-scraper<br>...<br>```<br><br>## CLI Usage<br><br>The easiest way to get data out from the scraper is to use the CLI. Once you<br>it installed, you should be able to run the `dc-campaign-finance-scraper`<br>command<br><br>```bash<br>$ dc-campaign-finance-scraper --help<br>Usage: dc-campaign-finance-scraper [OPTIONS] COMMAND [ARGS]...<br><br>Options:<br>  --log / --no-log      Print log of all HTTP requests  [default: False]<br>  --cache / --no-cache  Cache all requests to file.  [default: True]<br>  --help                Show this message and exit.<br><br>Commands:<br>  committees_dup  Checks to see if any committees are duplicated in multiple<br>                  race<br>  records         List of records<br>```<br><br>To get a list of records of all contributions or expenditures, use the `records`<br>subcommand.<br><br>```bash<br>$ Usage: dc-campaign-finance-scraper records [OPTIONS]<br><br>  A list all transactions for all campaigns, between FROM-DATE and TO-DATE.<br><br>  Also, if specified, only those for the elction in ELECTION-YEAR and<br>  running for the office OFFICE.<br><br>  Either the expenses of the campaign or the contributions of the campaign,<br>  based on REPORT-TYPE.<br><br>Options:<br>  --office [Mayor|Council Chairman|Council At-Large|Council Ward 1|Council Ward 2|Council Ward 3|Council Ward 4|Council Ward 5|Council Ward 6|Council Ward 7|Council Ward 8|US Representative|Democratic National Committeeman|Democratic National Committeewoman|Alternate Democratic National Committeeman|Alternate Democratic National Committeewoman|At-Large DC Democratic State Committee|Ward 1 DC Democratic State Committee |Ward 2 DC Democratic State Committee|Ward 3 DC Democratic State Committee|Ward 4 DC Democratic State Committee|Ward 5 DC Democratic State Committee|Ward 6 DC Democratic State Committee|Ward 7 DC Democratic State Committee|Ward 8 DC Democratic State Committee|Democratic Delegates|Democratic Delegates Alternates|Republican Delegates|Republican Delegates Alternates|Republican National Committeeman|Republican National Committeewoman|At-Large DC Republican Committee Official|Ward 1 of the DC Republican Committee|Ward 2 of the DC Republican Committee|Ward 3 of the DC Republican Committee|Ward 4 of the DC Republican Committee|Ward 5 of the DC Republican Committee|Ward 6 of the DC Republican Committee|Ward 7 of the DC Republican Committee|Ward 8 of the DC Republican Committee|Other Political Party|Non Supporting|Supporting|US Senator|School Board Ward 1|School Board Ward 2|School Board Ward 3|School Board Ward 4|School Board Ward 5|School Board Ward 6|School Board Ward 7|School Board Ward 8|School Board At-Large|Attorney General]<br>  --election-year INTEGER RANGE<br>  --report-type [exp|con]         exp -&gt; expenses, con -&gt; contributions<br>                                  [default: con]<br>  --from-date TEXT                First date of records.  [default:<br>                                  01/01/1999]<br>  --to-date TEXT                  Last date of records. Future dates are<br>                                  allowed.  [default: 01/01/9999]<br>  --format [json|xls|yaml|csv|tsv|html|xlsx|ods]<br>                                  Format of out output.<br>  --help                          Show this message and exit.<br>```<br>Although the `records` command can be run without any arguments, this<br>will return every record in the system, and will take a long time.<br><br>If you don't specify a `format` it will default to a text based table<br>like output.<br><br>However, for something more interesting, let's try finding all the mayoral<br>donation in 2014, for the election in 2014.<br><br>```bash<br>$ dc-campaign-finance-scraper records --office Mayor --election-year 2014 --from-date 01/01/2014 --to-date 01/01/2015<br>Committee Name                            |Candidate Name |Contributor                                  |Address                                 |city                        |state|Zip  |Contributor Type       |Contribution Type|Employer Name                                     |Employer Address                                                 |Amount     |Date of Receipt|Office|Election Year<br>------------------------------------------|---------------|---------------------------------------------|----------------------------------------|----------------------------|-----|-----|-----------------------|-----------------|--------------------------------------------------|-----------------------------------------------------------------|-----------|---------------|------|-------------<br>Bruce Majors, Libertarian for Mayor       |Bruce Majors   |Rufer, Chris                                 |724 Main                                |Woodland                    |CA   |95695|Individual             |Check            |Retired                                           | CA                                                              |$2,000.00  |3/3/2014       |Mayor |2014<br>Bruce Majors, Libertarian for Mayor       |Bruce Majors   |Majors, Mary                                 |11 Redbud                               |Shelbyville                 |TN   |37160|Individual             |Check            |Retired                                           | TN                                                              |$300.00    |2/27/2014      |Mayor |2014<br>Bruce Majors, Libertarian for Mayor       |Bruce Majors   |Majors, Bruce                                |1200 23rd Street, NW. #711              |Washington                  |DC   |20037|Candidate              |Check            |                                                  |                                                                 |$1,500.00  |3/1/2014       |Mayor |2014<br>Bruce Majors, Libertarian for Mayor       |Bruce Majors   |Snead, Edward                                |111 redbud                              |Georgetown                  |TX   |67676|Individual             |Check            |                                                  |                                                                 |$1,000.00  |4/8/2014       |Mayor |2014<br>Bruce Majors, Libertarian for Mayor       |Bruce Majors   |Delhomme, Laura                              |1515 North Couthouse                    |Arlington                   |VA   |22203|Individual             |Check            |CKI                                               | 1515 North Couthouse, VA 22201                                  |$150.00    |6/7/2014       |Mayor |2014<br>Bruce Majors, Libertarian for Mayor       |Bruce Majors   |Palmer, Tom                                  |1735                                    |17th Street NW              |DC   |20009|Individual             |CASH             |Atlas Foundation                                  | 1201 L Street NW, Washington, DC 20005                          |$25.00     |6/8/2014       |Mayor |2014<br>Bruce Majors, Libertarian for Mayor       |Bruce Majors   |Majors, Bruce                                |1200 23rd Street, NW. #711              |Washington                  |DC   |20037|Candidate              |Check            |                                                  |                                                                 |$500.00    |6/1/2014       |Mayor |2014<br>Carlos Allen For Mayor                    |Carlos Allen   |Sewell, Anthony                              |507 Louise Avenue                       |Linthicum Heights           |MD   |21090|Individual             |Credit Card      |                                                  |                                                                 |$100.00    |2/5/2014       |Mayor |2014<br>Carlos Allen For Mayor                    |Carlos Allen   |Brooks, Karen                                |9709 Manteo Ct                          |Ft Washington               |MD   |20744|Individual             |Credit Card      |                                                  |                                                                 |$15.00     |2/25/2014      |Mayor |2014<br>Carlos Allen For Mayor                    |Carlos Allen   |Alsbrook, Darrell                            |2470                                    |LakeMeadow Ln               |GA   |30017|Individual             |Credit Card      |                                                  |                                                                 |$20.00     |3/4/2014       |Mayor |2014<br>...<br>```<br><br>*Notice* Behind the scenes, all the records between the `from-date`<br>and `to-date` are requested from the server, and only filtered locally.<br>Also, because office and election year are not included in the source<br>record set, it is neccesary to try to guess them from the committee<br>name and date of donation. What this ends up meaning is that<br>a whole lot of HTTP requests must happen if you request the whole<br>date range, which will in turn, take a while.<br><br>## API Usage<br><br>Feel free to access the pythonn api. Take a look at the functions in<br>[dc_campaign_finance-scraper/scraper.py](dc_campaign_finance-scraper/scraper.py).<br><br><br>## Release instructions<br>1. `pip install -e .` to make sure it works<br>2. Bump version in `./setup.py`<br>3. Commit and create tag for version prefixed with \"v\"<br>4. `pip install wheel`<br>5. `python setup.py sdist bdist_wheel upload`<br><br><br>## Developing locally with Docker<br><br>```bash<br>fig build python<br>fig run fig run python dc-campaign-finance-scraper --help<br>fig run fig run python test<br>```<br><br>## How did I do it?<br>### Manual Process<br>1. Go to<br>   [www.ocf.dc.gov/serv/download.asp](http://www.ocf.dc.gov/serv/download.asp)<br>   ![Screenshot of unfilled in serv/download.asp](http://f.cl.ly/items/3J2k2O05223Y1K2T0C43/District%20of%20Columbia%20%20Office%20of%20Campaign%20Finance%20%20Contribution%20%20%20Expenditure%20Search.png)<br>2. Fill in `From Date`, `To Date`, and `Payment Type`.<br>   ![Screenshot of filled in serv/download.asp](http://f.cl.ly/items/0T3N0O1I1W0A1t2W1t3N/District%20of%20Columbia%20%20Office%20of%20Campaign%20Finance%20%20Contribution%20%20%20Expenditure%20Search%20filled%20in.png)<br>3. Click `Submit` and it sends a `POST` to<br>   [www.ocf.dc.gov/serv/download.asp](http://www.ocf.dc.gov/serv/download.asp)<br>   and displays the entered form.<br>   ![Screenshot of submitted form](http://f.cl.ly/items/0Z3k1P2W0l1G2P080o2K/District%20of%20Columbia%20%20Office%20of%20Campaign%20Finance%20%20Contribution%20%20%20Expenditure%20Search%20submitted.png)<br>4. Click `Click here to download the CSV File` and it sends a `POST` to<br>   [www.ocf.dc.gov/serv/download_conexp.asp](http://www.ocf.dc.gov/serv/download_conexp.asp)<br>5. Returns `POST` with CSV text.<br><br>### Automation<br>#### Selenium<br>At first I tried using<br>[Selenium with Python](http://selenium-python.readthedocs.org) to fill in<br>the forms and click the buttons. This will actually run a real(ish) browser<br>and execute all the the JS and simulate user input. This worked, but<br>it couldn't really handle the returned CSV text from step 5. In a browser<br>this opens in a new window and downloads to your computer, but the<br>[PhantomJS driver for Selenium and Python](http://www.realpython.com/blog/python/headless-selenium-testing-with-python-and-phantomjs/)<br>wasn't really working for that new window. I might have been able to get<br>it to work eventually, but it prompted me to search for a different approach.<br><br>#### Requests<br>I then started experimenting with<br>[Requests for Python](http://docs.python-requests.org/en/latest) to just<br>call the to just make the actual HTTP calls, instead of pretending to be a<br>human and filling in the form. This was 1) faster 2) less verbose 3) easier<br>to understand.<br><br>##### Chrome Dev Tools<br>I fired up my Chrome Dev Tools and looked at what requests<br>were being made. So I tried to figure out in step 4, what request was actually being sent,<br>so that I could replay it programatically. However, since that opened<br>in a new window, the Dev Tools didn't save the request.<br>![GIF of clicking on download button and it downloading in chrome](http://zippy.gfycat.com/PinkAccomplishedBuffalo.gif)<br>It [isn't possible](http://stackoverflow.com/a/13747562) with chrome<br>to open a new window with Dev Tools already open.<br><br>##### Chrome Net Internals<br>I then tried [chrome://net-internals/#events](chrome://net-internals/#events)<br>to see the actual HTTP request being processed. I could see it was sending<br>a `POST` to`/serv/download_conexp.asp`<br>and the returned CSV. However it didn't show the `POST` data or the<br>cookies.<br>![chrome net internals events showing POST](http://f.cl.ly/items/050P46040W3o2t30431M/Screen%20Shot%202014-06-15%20at%2012.54.33%20PM.png)<br><br>##### Charles<br>For that I found [Charles](http://www.charlesproxy.com/)<br>(`brew cask install charles`) which provides a HTTP proxy to run your web<br>traffic through and then you can inspect every request.<br><br>#### Cookie<br>I checked the `POST` headers for the request and tried making it myself.<br>I got a response of<br><br>```html<br>    &lt;script language=\"javascript\"&gt;<br>        alert(\"Your Session is expired. Please try again\");<br>        opener.location.href=\"/serv/download.asp\";<br>        window.close();<br>    &lt;/script&gt;<br>```<br><br>I found that it was setting a cookie when I requested<br>`/serv/download.asp`. I first tried it with a cookie I got  from the browser<br>and IT WORKED! I got back the CSV.<br><br>So I began using<br>[Requests Sessions](http://docs.python-requests.org/en/latest/user/advanced/#session-objects)<br>to first `GET` at `/serv/download.asp` to get a session cookie and then<br>`POST` to `/serv/download_conexp.asp` with that cookie. That didn't work,<br>I got the `Your Session is expired. Please try again` response.<br>So then I tried doing step 3, sending a `POST` to `/serv/download.asp` and then<br>the identical post to `/serve/download_conexp.asp`, thinking maybe the server<br>checked to see if I submitted the form before letting me download. It worked!<br>However the next day when I tried again I go the<br>`Your Session is expired. Please try again`. Very weird. I tried getting a<br>cookie from the my chrome session and using that and it forked. So something<br>about how I get my session on chrome is different from how I get my session<br>on Requests. I needed to figure out what the difference was.<br><br>Then I tried it again and it worked. So who knows. Maybe their site is weird.\n          </div>"}, "last_serial": 1168373, "releases": {"0.5.1": [{"comment_text": "", "digests": {"md5": "5dbe5bbf58e9747feff575a664107444", "sha256": "e2e3d134dae2832d064ffc1bf18c43ee625fd73ade1a6a6af60d9a0f9c0fa052"}, "downloads": -1, "filename": "dc_campaign_finance_scrapers-0.5.1-py27-none-any.whl", "has_sig": false, "md5_digest": "5dbe5bbf58e9747feff575a664107444", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 17841, "upload_time": "2014-07-24T20:41:38", "upload_time_iso_8601": "2014-07-24T20:41:38.154786Z", "url": "https://files.pythonhosted.org/packages/62/8d/7ba42fc5d35ec8deb1430442ae15606c6916227063bfe1f8ae8cbc26f920/dc_campaign_finance_scrapers-0.5.1-py27-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4d66c4fab987631a81ae7510124f7d67", "sha256": "c3471fb9583c0163e67855afd814dc26168643cfd9d5b7537443829457fe81db"}, "downloads": -1, "filename": "dc-campaign-finance-scrapers-0.5.1.tar.gz", "has_sig": false, "md5_digest": "4d66c4fab987631a81ae7510124f7d67", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10836, "upload_time": "2014-07-24T20:41:35", "upload_time_iso_8601": "2014-07-24T20:41:35.295725Z", "url": "https://files.pythonhosted.org/packages/2d/e7/c13ac7b8ea398347c1c6619e106a6c467dbdbecb8d62e3b83fb510d17f16/dc-campaign-finance-scrapers-0.5.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "5dbe5bbf58e9747feff575a664107444", "sha256": "e2e3d134dae2832d064ffc1bf18c43ee625fd73ade1a6a6af60d9a0f9c0fa052"}, "downloads": -1, "filename": "dc_campaign_finance_scrapers-0.5.1-py27-none-any.whl", "has_sig": false, "md5_digest": "5dbe5bbf58e9747feff575a664107444", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 17841, "upload_time": "2014-07-24T20:41:38", "upload_time_iso_8601": "2014-07-24T20:41:38.154786Z", "url": "https://files.pythonhosted.org/packages/62/8d/7ba42fc5d35ec8deb1430442ae15606c6916227063bfe1f8ae8cbc26f920/dc_campaign_finance_scrapers-0.5.1-py27-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4d66c4fab987631a81ae7510124f7d67", "sha256": "c3471fb9583c0163e67855afd814dc26168643cfd9d5b7537443829457fe81db"}, "downloads": -1, "filename": "dc-campaign-finance-scrapers-0.5.1.tar.gz", "has_sig": false, "md5_digest": "4d66c4fab987631a81ae7510124f7d67", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10836, "upload_time": "2014-07-24T20:41:35", "upload_time_iso_8601": "2014-07-24T20:41:35.295725Z", "url": "https://files.pythonhosted.org/packages/2d/e7/c13ac7b8ea398347c1c6619e106a6c467dbdbecb8d62e3b83fb510d17f16/dc-campaign-finance-scrapers-0.5.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:39:50 2020"}