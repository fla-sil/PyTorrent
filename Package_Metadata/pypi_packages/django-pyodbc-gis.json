{"info": {"author": "Mark Hepburn", "author_email": "mark@condense.com.au", "bugtrack_url": null, "classifiers": ["Development Status :: 1 - Planning", "License :: OSI Approved :: BSD License", "Topic :: Database"], "description": "This driver implements basic GIS (geodjango) support for Microsoft SQL\nServer, built on top of `django-pyodbc-azure`_.\n\n.. _django-pyodbc-azure: https://github.com/michiya/django-pyodbc-azure\n\nIt should be considered very alpha-quality at this stage!  Feedback,\nissues, and patches are all very welcome.\n\n======================================\n Supported and unsupported operations\n======================================\n\nMost `possible operations`_ are supported.  The primary exceptions are\nthose that include the boundary itself, and convenience operations\nsuch as ``left``/``right``, ``overlaps_above``, etc.\n\n.. _possible operations: https://docs.djangoproject.com/en/dev/ref/contrib/gis/geoquerysets/\n\nThe following spatial lookups are **not** supported:\n\n* bounding-box related: ``contains_properly``, ``covered_by``, ``covers``\n* specialist positional: ``left``, ``right``, ``overlaps_left``,\n  ``overlaps_right``, ``overlaps_above``, ``overlaps_below``,\n  ``strictly_above``, ``strictly_below``\n* miscellaneous: ``dwithin``, ``exact``, ``relate``, ``same_as``\n\nThe following spatial aggregate operations are **not** supported:\n\n* ``extent3d`` and ``make_line``\n\nIn addition, for performance reasons not all geometry operations have\na corresponding geography analogue.  The following operations are\n**not** available on geography types:\n\n* ``bbcontains``, ``bboverlaps``, ``contained``, ``crosses``, ``touches``\n\n===========================\n Limitations of SQL Server\n===========================\n\nSQL Server is OGC compliant, but  does fall short of the functionality\nprovided by PostGIS_ and `Oracle Spatial`_.  In particular, all of the\nboundary inclusion operations are missing: for example, `contains`_ is\nsupported, but not `covers`_.\n\n.. _PostGIS: http://postgis.net/\n.. _Oracle Spatial: http://www.oracle.com/technetwork/database/options/spatialandgraph/overview/index.html\n.. _contains: https://docs.djangoproject.com/en/dev/ref/contrib/gis/geoquerysets/#contains\n.. _covers: https://docs.djangoproject.com/en/dev/ref/contrib/gis/geoquerysets/#covers\n\nType information is also slightly different in SQL Server.  Instead of\nkeeping the geometry type (Point, Polygon, etc) in the column's\nmetadata, it is a property of the *instance* (and hence so is the\ndimensionality), and similarly for the SRID.  This means you can in\ntheory store geometries of different types and SRIDs in the same\ncolumn; this driver creates a constraint to check the type, but\nnothing else.  It also means that introspection is rather fragile.\n\nGeometries cannot be transformed to a different SRID (such as with\n`ST_Transform`_ in PostGIS).\n\n.. _ST_Transform: http://postgis.org/docs/ST_Transform.html\n\n=================\n Admin Interface\n=================\n\nThe admin interface works.  This is worth noting here simply because\nthe interface has to be pretend to be MySQL in order to run!  There\nare some hard-coded checks for MySQL in the framework, and the\nlimitations (with respect to introspection) of SQL Server are actually\nsimilar enough that this works for SQL Server too.\n\n========================\n Installation and Setup\n========================\n\nThe only direct dependency is `django-pyodbc-azure`_.  If you are on\nlinux this will require installing freetds_ and odbcinst_.  You will\nalso need to configure_ it (the most important is ``odbcinst.ini``).\n\n.. _django-pyodbc-azure: https://github.com/michiya/django-pyodbc-azure\n.. _freetds: http://www.freetds.org/\n.. _odbcinst: http://www.unixodbc.org/\n.. _configure: http://www.unixodbc.org/doc/FreeTDS.html\n\nTo use the driver, your Django database configuration section should\nlook something like this: ::\n\n    DATABASES = {\n        'default': {\n            'NAME': 'dbname',\n            'ENGINE': 'django_pyodbc_gis',\n            'HOST': '127.0.0.1,1433',\n            'USER': 'django',\n            'PASSWORD': 'pwd123',\n            'OPTIONS': {\n                'host_is_server': True,\n                # 'dsn': 'mssql',\n                'extra_params': 'TDS_Version=8.0'\n            }\n        }\n    }\n\nYou have two options regarding specifying the host connection details;\nif you have configured a DSN you may omit the ``HOST`` key and use the\n``dsn`` key in ``OPTIONS`` to specify it.  If not, you will probably\nneed to specify the TDS version in ``extra_params`` (if you get error\nmessages about unicode_ you may well have gotten this wrong)\n\n.. _unicode: http://www.seanelavelle.com/2011/07/30/pyodbc-and-freetds-unicode-ntext-problem-solved/\n\n======\n TODO\n======\n\n* extended operations (gml, geojson, etc.  Further investigation: SQL\n  Server only supports GML, but treats it as an instance method\n  where-as geodjango assumes it is a function.  This might remain on\n  the back-burner for now)\n* Check inspectdb support\n* Test suite!\n  * Test against 2008, 2005 as well", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://www.github.com/condense/django-pyodbc-gis", "keywords": "django mssql gis", "license": "BSD", "maintainer": null, "maintainer_email": null, "name": "django-pyodbc-gis", "package_url": "https://pypi.org/project/django-pyodbc-gis/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/django-pyodbc-gis/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://www.github.com/condense/django-pyodbc-gis"}, "release_url": "https://pypi.org/project/django-pyodbc-gis/0.0.7/", "requires_dist": null, "requires_python": null, "summary": "GIS support for SQL Server, on top of django-pyodbc-azure", "version": "0.0.7", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>This driver implements basic GIS (geodjango) support for Microsoft SQL\nServer, built on top of <a href=\"https://github.com/michiya/django-pyodbc-azure\" rel=\"nofollow\">django-pyodbc-azure</a>.</p>\n<p>It should be considered very alpha-quality at this stage!  Feedback,\nissues, and patches are all very welcome.</p>\n<div id=\"supported-and-unsupported-operations\">\n<h2>Supported and unsupported operations</h2>\n<p>Most <a href=\"https://docs.djangoproject.com/en/dev/ref/contrib/gis/geoquerysets/\" rel=\"nofollow\">possible operations</a> are supported.  The primary exceptions are\nthose that include the boundary itself, and convenience operations\nsuch as <tt>left</tt>/<tt>right</tt>, <tt>overlaps_above</tt>, etc.</p>\n<p>The following spatial lookups are <strong>not</strong> supported:</p>\n<ul>\n<li>bounding-box related: <tt>contains_properly</tt>, <tt>covered_by</tt>, <tt>covers</tt></li>\n<li>specialist positional: <tt>left</tt>, <tt>right</tt>, <tt>overlaps_left</tt>,\n<tt>overlaps_right</tt>, <tt>overlaps_above</tt>, <tt>overlaps_below</tt>,\n<tt>strictly_above</tt>, <tt>strictly_below</tt></li>\n<li>miscellaneous: <tt>dwithin</tt>, <tt>exact</tt>, <tt>relate</tt>, <tt>same_as</tt></li>\n</ul>\n<p>The following spatial aggregate operations are <strong>not</strong> supported:</p>\n<ul>\n<li><tt>extent3d</tt> and <tt>make_line</tt></li>\n</ul>\n<p>In addition, for performance reasons not all geometry operations have\na corresponding geography analogue.  The following operations are\n<strong>not</strong> available on geography types:</p>\n<ul>\n<li><tt>bbcontains</tt>, <tt>bboverlaps</tt>, <tt>contained</tt>, <tt>crosses</tt>, <tt>touches</tt></li>\n</ul>\n</div>\n<div id=\"limitations-of-sql-server\">\n<h2>Limitations of SQL Server</h2>\n<p>SQL Server is OGC compliant, but  does fall short of the functionality\nprovided by <a href=\"http://postgis.net/\" rel=\"nofollow\">PostGIS</a> and <a href=\"http://www.oracle.com/technetwork/database/options/spatialandgraph/overview/index.html\" rel=\"nofollow\">Oracle Spatial</a>.  In particular, all of the\nboundary inclusion operations are missing: for example, <a href=\"https://docs.djangoproject.com/en/dev/ref/contrib/gis/geoquerysets/#contains\" rel=\"nofollow\">contains</a> is\nsupported, but not <a href=\"https://docs.djangoproject.com/en/dev/ref/contrib/gis/geoquerysets/#covers\" rel=\"nofollow\">covers</a>.</p>\n<p>Type information is also slightly different in SQL Server.  Instead of\nkeeping the geometry type (Point, Polygon, etc) in the column\u2019s\nmetadata, it is a property of the <em>instance</em> (and hence so is the\ndimensionality), and similarly for the SRID.  This means you can in\ntheory store geometries of different types and SRIDs in the same\ncolumn; this driver creates a constraint to check the type, but\nnothing else.  It also means that introspection is rather fragile.</p>\n<p>Geometries cannot be transformed to a different SRID (such as with\n<a href=\"http://postgis.org/docs/ST_Transform.html\" rel=\"nofollow\">ST_Transform</a> in PostGIS).</p>\n</div>\n<div id=\"admin-interface\">\n<h2>Admin Interface</h2>\n<p>The admin interface works.  This is worth noting here simply because\nthe interface has to be pretend to be MySQL in order to run!  There\nare some hard-coded checks for MySQL in the framework, and the\nlimitations (with respect to introspection) of SQL Server are actually\nsimilar enough that this works for SQL Server too.</p>\n</div>\n<div id=\"installation-and-setup\">\n<h2>Installation and Setup</h2>\n<p>The only direct dependency is <a href=\"https://github.com/michiya/django-pyodbc-azure\" rel=\"nofollow\">django-pyodbc-azure</a>.  If you are on\nlinux this will require installing <a href=\"http://www.freetds.org/\" rel=\"nofollow\">freetds</a> and <a href=\"http://www.unixodbc.org/\" rel=\"nofollow\">odbcinst</a>.  You will\nalso need to <a href=\"http://www.unixodbc.org/doc/FreeTDS.html\" rel=\"nofollow\">configure</a> it (the most important is <tt>odbcinst.ini</tt>).</p>\n<p>To use the driver, your Django database configuration section should\nlook something like this:</p>\n<pre>DATABASES = {\n    'default': {\n        'NAME': 'dbname',\n        'ENGINE': 'django_pyodbc_gis',\n        'HOST': '127.0.0.1,1433',\n        'USER': 'django',\n        'PASSWORD': 'pwd123',\n        'OPTIONS': {\n            'host_is_server': True,\n            # 'dsn': 'mssql',\n            'extra_params': 'TDS_Version=8.0'\n        }\n    }\n}\n</pre>\n<p>You have two options regarding specifying the host connection details;\nif you have configured a DSN you may omit the <tt>HOST</tt> key and use the\n<tt>dsn</tt> key in <tt>OPTIONS</tt> to specify it.  If not, you will probably\nneed to specify the TDS version in <tt>extra_params</tt> (if you get error\nmessages about <a href=\"http://www.seanelavelle.com/2011/07/30/pyodbc-and-freetds-unicode-ntext-problem-solved/\" rel=\"nofollow\">unicode</a> you may well have gotten this wrong)</p>\n</div>\n<div id=\"todo\">\n<h2>TODO</h2>\n<ul>\n<li>extended operations (gml, geojson, etc.  Further investigation: SQL\nServer only supports GML, but treats it as an instance method\nwhere-as geodjango assumes it is a function.  This might remain on\nthe back-burner for now)</li>\n<li>Check inspectdb support</li>\n<li>Test suite!\n* Test against 2008, 2005 as well</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 972127, "releases": {"0.0.3": [{"comment_text": "", "digests": {"md5": "98b057507e37b23b233936ffca25de09", "sha256": "44b1b7e39dde762459c8469708dc68cebf025b4b417cfb91d2e26075cb41f059"}, "downloads": -1, "filename": "django-pyodbc-gis-0.0.3.tar.bz2", "has_sig": false, "md5_digest": "98b057507e37b23b233936ffca25de09", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7420, "upload_time": "2014-01-11T02:50:57", "upload_time_iso_8601": "2014-01-11T02:50:57.164434Z", "url": "https://files.pythonhosted.org/packages/fe/e4/915b03fda857c0add95c1a8e520670c8654c433c106518a447a3728921f1/django-pyodbc-gis-0.0.3.tar.bz2", "yanked": false}, {"comment_text": "", "digests": {"md5": "d01eca447fabd892041555a62fb9b373", "sha256": "404db2a701bea2998a3cbde1b3fd62039777192a3cb1eab16b07d63369f5e831"}, "downloads": -1, "filename": "django-pyodbc-gis-0.0.3.zip", "has_sig": false, "md5_digest": "d01eca447fabd892041555a62fb9b373", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11981, "upload_time": "2014-01-11T02:50:59", "upload_time_iso_8601": "2014-01-11T02:50:59.666633Z", "url": "https://files.pythonhosted.org/packages/87/41/95b04d573b13cf7953e1173f3dcbceada5946bb1cd04f8228e1c78485861/django-pyodbc-gis-0.0.3.zip", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "63ec7bcaebe252aebd151a54cb8d2208", "sha256": "a0404611ee8b9615fc7ebdbbbc22351434805b4225f5dc1ce27e2e71a9258495"}, "downloads": -1, "filename": "django-pyodbc-gis-0.0.5.tar.bz2", "has_sig": false, "md5_digest": "63ec7bcaebe252aebd151a54cb8d2208", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8103, "upload_time": "2014-01-15T06:45:28", "upload_time_iso_8601": "2014-01-15T06:45:28.055369Z", "url": "https://files.pythonhosted.org/packages/75/71/66efddccceb6263c13226cc81a918de4eec599f6b04efaf68cf4a39a2d52/django-pyodbc-gis-0.0.5.tar.bz2", "yanked": false}, {"comment_text": "", "digests": {"md5": "5b14d4b855b31681f21d1552c1b595f7", "sha256": "bc349d2d05deb61f5c05e7c19fced6587d3a997d860cd2c5118652e66259e9d6"}, "downloads": -1, "filename": "django-pyodbc-gis-0.0.5.zip", "has_sig": false, "md5_digest": "5b14d4b855b31681f21d1552c1b595f7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13020, "upload_time": "2014-01-15T06:45:31", "upload_time_iso_8601": "2014-01-15T06:45:31.096625Z", "url": "https://files.pythonhosted.org/packages/4d/fd/fd3be566890482409fb662b11ce92a54100176bf1ccdded6c48a7549b3bc/django-pyodbc-gis-0.0.5.zip", "yanked": false}], "0.0.6": [{"comment_text": "", "digests": {"md5": "bc83d3cad5993f6756743d659909cb93", "sha256": "6b6672aca41f0f371ce68689d44f33d33b761e1317e85a30643d04d17491d98d"}, "downloads": -1, "filename": "django-pyodbc-gis-0.0.6.tar.bz2", "has_sig": false, "md5_digest": "bc83d3cad5993f6756743d659909cb93", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8393, "upload_time": "2014-01-16T12:10:52", "upload_time_iso_8601": "2014-01-16T12:10:52.947975Z", "url": "https://files.pythonhosted.org/packages/c4/a0/3cd244e8fa8e77930c24571498a828560b18511a9e783f99bcad92bacac0/django-pyodbc-gis-0.0.6.tar.bz2", "yanked": false}, {"comment_text": "", "digests": {"md5": "6b4095e48ef45c18e19da3296dd07353", "sha256": "cdbb12fe3d115976bf471b82c23554c964eaa6858c335f7932bdf47369cea32e"}, "downloads": -1, "filename": "django-pyodbc-gis-0.0.6.zip", "has_sig": false, "md5_digest": "6b4095e48ef45c18e19da3296dd07353", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13516, "upload_time": "2014-01-16T12:10:56", "upload_time_iso_8601": "2014-01-16T12:10:56.668487Z", "url": "https://files.pythonhosted.org/packages/04/bb/983297f6b94debe0dc9b6a2f181a709997b470552cad54c8efd40d487ab4/django-pyodbc-gis-0.0.6.zip", "yanked": false}], "0.0.7": [{"comment_text": "", "digests": {"md5": "268d960c3187d18f4b138ad3e22da4dc", "sha256": "a7d4ddf05bd55b2b4b9f6868999cba4f88b949da551acea7c7ca5dbd1c905f6a"}, "downloads": -1, "filename": "django-pyodbc-gis-0.0.7.tar.bz2", "has_sig": false, "md5_digest": "268d960c3187d18f4b138ad3e22da4dc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9013, "upload_time": "2014-01-17T03:19:23", "upload_time_iso_8601": "2014-01-17T03:19:23.034820Z", "url": "https://files.pythonhosted.org/packages/eb/20/9b77f01e9865bf5f4574a2422cc5df72b92a0902d618807970dadb319275/django-pyodbc-gis-0.0.7.tar.bz2", "yanked": false}, {"comment_text": "", "digests": {"md5": "2f7763efae4e8415c0b78ee320ea4758", "sha256": "3a0d28bfb437788dd018cb32c958d7f41a0e4cc6bc4bb39ce1ccc53b83d90825"}, "downloads": -1, "filename": "django-pyodbc-gis-0.0.7.zip", "has_sig": false, "md5_digest": "2f7763efae4e8415c0b78ee320ea4758", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15991, "upload_time": "2014-01-17T03:19:26", "upload_time_iso_8601": "2014-01-17T03:19:26.170999Z", "url": "https://files.pythonhosted.org/packages/59/d3/6622c5c9a65d69feae7b280f994e847014d95615ea116c5cedfea272ed27/django-pyodbc-gis-0.0.7.zip", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "268d960c3187d18f4b138ad3e22da4dc", "sha256": "a7d4ddf05bd55b2b4b9f6868999cba4f88b949da551acea7c7ca5dbd1c905f6a"}, "downloads": -1, "filename": "django-pyodbc-gis-0.0.7.tar.bz2", "has_sig": false, "md5_digest": "268d960c3187d18f4b138ad3e22da4dc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9013, "upload_time": "2014-01-17T03:19:23", "upload_time_iso_8601": "2014-01-17T03:19:23.034820Z", "url": "https://files.pythonhosted.org/packages/eb/20/9b77f01e9865bf5f4574a2422cc5df72b92a0902d618807970dadb319275/django-pyodbc-gis-0.0.7.tar.bz2", "yanked": false}, {"comment_text": "", "digests": {"md5": "2f7763efae4e8415c0b78ee320ea4758", "sha256": "3a0d28bfb437788dd018cb32c958d7f41a0e4cc6bc4bb39ce1ccc53b83d90825"}, "downloads": -1, "filename": "django-pyodbc-gis-0.0.7.zip", "has_sig": false, "md5_digest": "2f7763efae4e8415c0b78ee320ea4758", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15991, "upload_time": "2014-01-17T03:19:26", "upload_time_iso_8601": "2014-01-17T03:19:26.170999Z", "url": "https://files.pythonhosted.org/packages/59/d3/6622c5c9a65d69feae7b280f994e847014d95615ea116c5cedfea272ed27/django-pyodbc-gis-0.0.7.zip", "yanked": false}], "timestamp": "Fri May  8 00:54:33 2020"}