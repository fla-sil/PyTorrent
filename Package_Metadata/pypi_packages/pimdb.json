{"info": {"author": "Thomas Aglassinger", "author_email": "roskakori@users.sourceforge.net", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Console", "Intended Audience :: Developers", "Intended Audience :: Science/Research", "License :: OSI Approved :: BSD License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: 3 :: Only", "Topic :: Scientific/Engineering :: Information Analysis", "Topic :: Software Development"], "description": "# pimdb\n\nPimdb is a python package and command line utility to maintain a local copy of\nthe essential parts of the\n[Internet Movie Database](https://imdb.com) (IMDb) based in the TSV files\navailable from [IMDb datasets](https://www.imdb.com/interfaces/).\n\n\n## License\n\nThe [IMDb datasets](https://www.imdb.com/interfaces/) are only available for\npersonal and non-commercial use. For details refer to the previous link.\n\nPimdb is open source and distributed under the\n[BSD license](https://opensource.org/licenses/BSD-3-Clause). The source\ncode is available from https://github.com/roskakori/pimdb.\n\n\n## Installation\n\nPimdb is available from [PyPI](https://pypi.org/project/pimdb/) and can be\ninstalled using:\n\n```bash\n$ pip install pimdb\n```\n\n\n## Quick start\n\n\n### Downloading datasets\n\nTo download the current IMDb datsets to the current folder, run:\n\n```bash\npimdb download all\n```\n\n(This downloads about 1 GB of data and might take a couple of minutes).\n\n\n### Transferring datasets into tables\n\nTo import them in a local SQLite database `pimdb.db` located in the current\nfolder, run:\n\n```bash\npimdb transfer all\n```\n\n(This will take a while. On a reasonably modern laptop with a local database\nyou can expect about 2 hours).\n\nThe resulting database contains one tables for each dataset. The table names\nare PascalCase variants of the dataset name. For example, the date from the\ndataset `title.basics` are stored in the table `TitleBasics`. The column names\nin the table match the names from the datasets, for example\n`TitleBasics.primaryTitle`. A short description of all the datasets and\ncolumns can be found at the download page for the\n[IMDb datasets](https://www.imdb.com/interfaces/).\n\nOptionally you can specify a different database using the `--database` option\nwith an\n[SQLAlchemy engine configuration](https://docs.sqlalchemy.org/en/13/core/engines.html).\n\n\n### Querying tables\n\nTo query the tables, you can use any database tool that supports SQLite, for\nexample the freely available and platform independent community edition of\n[DBeaver](https://dbeaver.io/) or the\n[command line shell for SQLite](https://sqlite.org/cli.html).\n\nFor simple queries you can also use `pimdb` and look at the result as\nUTF-8 encoded TSV. For example, here are the details of the top 10 oldest\npeople alive according to IMDb:\n\n```bash\npimdb query \"select * from NameBasics where birthYear is not null and deathYear is null order by birthYear limit 10\" >oldest_people_alive.tsv\n```\n\nYou can also run an SQL statement stored in a file:\n\n```bash\npimdb query --file some.sql\n```\n\n\n### Building normalized tables\n\nThe tables so far are almost verbatim copies of the IMDb datasets with the\nexception that possible duplicate rows have been removed. This data model\nalready allows to perform several kinds of queries quite easily and\nefficiently.\n\nHowever, the IMDb datasets do not offer a simple way to query N:M relations.\nFor example, the column `NameBasics.knownForTitles` contains a comma separated\nlist of tconsts like \"tt2076794,tt0116514,tt0118577,tt0086491\".\n\nTo perform such queries efficiently you can build strictly normalized tables\nderived from the dataset tables by running:\n\n```bash\npimdb build\n```\nIf you did specify a `--database` for the `transfer` command before, you have to\nspecify the same value for `build` in order to find the source data. These tables\ngenerally use snake_case names for both tables and columns, for example\n`title_allias.is_original`.\n\n\n## Querying normalized tables\n\nN:M relations are stored in tables using the naming template `some_to_other`,\nfor example `name_to_known_for_title`. These relation tables contain only the\nnumeric ID's to the respective actual data and a numeric column `ordering` to\nremember the sort order of the comma separated list in the IMDb dataset column.\n\nFor example, here is an SQL query to list the titles Alan Smithee is known\nfor:\n\n```sql\nselect\n    title.primary_title,\n    title.start_year\nfrom\n    name_to_known_for_title\n    join name on\n        name.id = name_to_known_for_title.name_id\n    join title on\n        title.id = name_to_known_for_title.title_id\nwhere\n    name.primary_name = 'Alan Smithee'\n```\n\nFor more information on which tables are available on how they are related\nread the chapter about the\n[pimdb data model](https://pimdb.readthedocs.io/en/latest/datamodel.html).\n\n\n## Where to go from here\n\nPimdb's [online documentation](https://pimdb.readthedocs.io/) describes all\naspects in further detail. You might find the following chapters of particular\ninterest:\n\n* [Usage](https://pimdb.readthedocs.io/en/latest/usage.html): all command line\n  options explained\n* [Data model](https://pimdb.readthedocs.io/en/latest/datamodel.html):\n  available tables and example SQL queries\n* [Contributing](https://pimdb.readthedocs.io/en/latest/contributing.html):\n  obtaining the source code and building the project locally\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/roskakori/pimdb", "keywords": "", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "pimdb", "package_url": "https://pypi.org/project/pimdb/", "platform": "", "project_url": "https://pypi.org/project/pimdb/", "project_urls": {"Documentation": "https://pimdb.readthedocs.io/", "Homepage": "https://github.com/roskakori/pimdb", "Issue Tracker": "https://github.com/roskakori/pimdb/issues"}, "release_url": "https://pypi.org/project/pimdb/0.2.3/", "requires_dist": ["requests", "sqlalchemy (>=1.3)", "psycopg2-binary (>=2.5) ; extra == 'postgres'"], "requires_python": ">=3.6", "summary": "build a database from IMDb datasets", "version": "0.2.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>pimdb</h1>\n<p>Pimdb is a python package and command line utility to maintain a local copy of\nthe essential parts of the\n<a href=\"https://imdb.com\" rel=\"nofollow\">Internet Movie Database</a> (IMDb) based in the TSV files\navailable from <a href=\"https://www.imdb.com/interfaces/\" rel=\"nofollow\">IMDb datasets</a>.</p>\n<h2>License</h2>\n<p>The <a href=\"https://www.imdb.com/interfaces/\" rel=\"nofollow\">IMDb datasets</a> are only available for\npersonal and non-commercial use. For details refer to the previous link.</p>\n<p>Pimdb is open source and distributed under the\n<a href=\"https://opensource.org/licenses/BSD-3-Clause\" rel=\"nofollow\">BSD license</a>. The source\ncode is available from <a href=\"https://github.com/roskakori/pimdb\" rel=\"nofollow\">https://github.com/roskakori/pimdb</a>.</p>\n<h2>Installation</h2>\n<p>Pimdb is available from <a href=\"https://pypi.org/project/pimdb/\" rel=\"nofollow\">PyPI</a> and can be\ninstalled using:</p>\n<pre>$ pip install pimdb\n</pre>\n<h2>Quick start</h2>\n<h3>Downloading datasets</h3>\n<p>To download the current IMDb datsets to the current folder, run:</p>\n<pre>pimdb download all\n</pre>\n<p>(This downloads about 1 GB of data and might take a couple of minutes).</p>\n<h3>Transferring datasets into tables</h3>\n<p>To import them in a local SQLite database <code>pimdb.db</code> located in the current\nfolder, run:</p>\n<pre>pimdb transfer all\n</pre>\n<p>(This will take a while. On a reasonably modern laptop with a local database\nyou can expect about 2 hours).</p>\n<p>The resulting database contains one tables for each dataset. The table names\nare PascalCase variants of the dataset name. For example, the date from the\ndataset <code>title.basics</code> are stored in the table <code>TitleBasics</code>. The column names\nin the table match the names from the datasets, for example\n<code>TitleBasics.primaryTitle</code>. A short description of all the datasets and\ncolumns can be found at the download page for the\n<a href=\"https://www.imdb.com/interfaces/\" rel=\"nofollow\">IMDb datasets</a>.</p>\n<p>Optionally you can specify a different database using the <code>--database</code> option\nwith an\n<a href=\"https://docs.sqlalchemy.org/en/13/core/engines.html\" rel=\"nofollow\">SQLAlchemy engine configuration</a>.</p>\n<h3>Querying tables</h3>\n<p>To query the tables, you can use any database tool that supports SQLite, for\nexample the freely available and platform independent community edition of\n<a href=\"https://dbeaver.io/\" rel=\"nofollow\">DBeaver</a> or the\n<a href=\"https://sqlite.org/cli.html\" rel=\"nofollow\">command line shell for SQLite</a>.</p>\n<p>For simple queries you can also use <code>pimdb</code> and look at the result as\nUTF-8 encoded TSV. For example, here are the details of the top 10 oldest\npeople alive according to IMDb:</p>\n<pre>pimdb query <span class=\"s2\">\"select * from NameBasics where birthYear is not null and deathYear is null order by birthYear limit 10\"</span> &gt;oldest_people_alive.tsv\n</pre>\n<p>You can also run an SQL statement stored in a file:</p>\n<pre>pimdb query --file some.sql\n</pre>\n<h3>Building normalized tables</h3>\n<p>The tables so far are almost verbatim copies of the IMDb datasets with the\nexception that possible duplicate rows have been removed. This data model\nalready allows to perform several kinds of queries quite easily and\nefficiently.</p>\n<p>However, the IMDb datasets do not offer a simple way to query N:M relations.\nFor example, the column <code>NameBasics.knownForTitles</code> contains a comma separated\nlist of tconsts like \"tt2076794,tt0116514,tt0118577,tt0086491\".</p>\n<p>To perform such queries efficiently you can build strictly normalized tables\nderived from the dataset tables by running:</p>\n<pre>pimdb build\n</pre>\n<p>If you did specify a <code>--database</code> for the <code>transfer</code> command before, you have to\nspecify the same value for <code>build</code> in order to find the source data. These tables\ngenerally use snake_case names for both tables and columns, for example\n<code>title_allias.is_original</code>.</p>\n<h2>Querying normalized tables</h2>\n<p>N:M relations are stored in tables using the naming template <code>some_to_other</code>,\nfor example <code>name_to_known_for_title</code>. These relation tables contain only the\nnumeric ID's to the respective actual data and a numeric column <code>ordering</code> to\nremember the sort order of the comma separated list in the IMDb dataset column.</p>\n<p>For example, here is an SQL query to list the titles Alan Smithee is known\nfor:</p>\n<pre><span class=\"k\">select</span>\n    <span class=\"n\">title</span><span class=\"p\">.</span><span class=\"n\">primary_title</span><span class=\"p\">,</span>\n    <span class=\"n\">title</span><span class=\"p\">.</span><span class=\"n\">start_year</span>\n<span class=\"k\">from</span>\n    <span class=\"n\">name_to_known_for_title</span>\n    <span class=\"k\">join</span> <span class=\"n\">name</span> <span class=\"k\">on</span>\n        <span class=\"n\">name</span><span class=\"p\">.</span><span class=\"n\">id</span> <span class=\"o\">=</span> <span class=\"n\">name_to_known_for_title</span><span class=\"p\">.</span><span class=\"n\">name_id</span>\n    <span class=\"k\">join</span> <span class=\"n\">title</span> <span class=\"k\">on</span>\n        <span class=\"n\">title</span><span class=\"p\">.</span><span class=\"n\">id</span> <span class=\"o\">=</span> <span class=\"n\">name_to_known_for_title</span><span class=\"p\">.</span><span class=\"n\">title_id</span>\n<span class=\"k\">where</span>\n    <span class=\"n\">name</span><span class=\"p\">.</span><span class=\"n\">primary_name</span> <span class=\"o\">=</span> <span class=\"s1\">'Alan Smithee'</span>\n</pre>\n<p>For more information on which tables are available on how they are related\nread the chapter about the\n<a href=\"https://pimdb.readthedocs.io/en/latest/datamodel.html\" rel=\"nofollow\">pimdb data model</a>.</p>\n<h2>Where to go from here</h2>\n<p>Pimdb's <a href=\"https://pimdb.readthedocs.io/\" rel=\"nofollow\">online documentation</a> describes all\naspects in further detail. You might find the following chapters of particular\ninterest:</p>\n<ul>\n<li><a href=\"https://pimdb.readthedocs.io/en/latest/usage.html\" rel=\"nofollow\">Usage</a>: all command line\noptions explained</li>\n<li><a href=\"https://pimdb.readthedocs.io/en/latest/datamodel.html\" rel=\"nofollow\">Data model</a>:\navailable tables and example SQL queries</li>\n<li><a href=\"https://pimdb.readthedocs.io/en/latest/contributing.html\" rel=\"nofollow\">Contributing</a>:\nobtaining the source code and building the project locally</li>\n</ul>\n\n          </div>"}, "last_serial": 7152201, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "8e02383e8953da417a30e29dec90ada3", "sha256": "1f11ca612504d5f864c4b8bd92c5acfac5baaa7b840e28700cf5d27cdf3d6e1f"}, "downloads": -1, "filename": "pimdb-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "8e02383e8953da417a30e29dec90ada3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 18070, "upload_time": "2020-04-11T14:51:43", "upload_time_iso_8601": "2020-04-11T14:51:43.504854Z", "url": "https://files.pythonhosted.org/packages/5d/32/84c209b1a5dda438b8c6530a8da7598259697c20e60807a813b07ff54884/pimdb-0.1.0-py3-none-any.whl", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "efeb1dc1e0ee9ddc5c5b7b2a1d287f4c", "sha256": "918d8df20e0f12af9dac25414155e28bd3415240a549e9136567c64f1c6bb599"}, "downloads": -1, "filename": "pimdb-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "efeb1dc1e0ee9ddc5c5b7b2a1d287f4c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 18624, "upload_time": "2020-04-13T19:12:20", "upload_time_iso_8601": "2020-04-13T19:12:20.800324Z", "url": "https://files.pythonhosted.org/packages/d9/59/7631c4b8c92b318939e0bd55a0766f64598d5d10eeaf295238b1f30429c8/pimdb-0.1.1-py3-none-any.whl", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "67a063bec9629b6df1f54a16d9a58d00", "sha256": "aacd9da6b71b423983abe0ea825dc79f3c691bca5a3894eab9e11cd6125a4453"}, "downloads": -1, "filename": "pimdb-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "67a063bec9629b6df1f54a16d9a58d00", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 18983, "upload_time": "2020-04-14T21:01:10", "upload_time_iso_8601": "2020-04-14T21:01:10.522803Z", "url": "https://files.pythonhosted.org/packages/c0/a7/c931d148e515b1c3861f4a083fe7d9feee325b7d763be36978f82f4ac426/pimdb-0.1.2-py3-none-any.whl", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "dfcbe06cdc390de0d8342ff9b3ed7546", "sha256": "1016de050ac11dabad0a307c8cfb790ea487a527552e1490984e0b545eaa7db1"}, "downloads": -1, "filename": "pimdb-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "dfcbe06cdc390de0d8342ff9b3ed7546", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 20799, "upload_time": "2020-04-16T19:57:10", "upload_time_iso_8601": "2020-04-16T19:57:10.028986Z", "url": "https://files.pythonhosted.org/packages/3e/bf/0e534f09535244da34756c0413ccff6a1f4e8437ed1c6b18b20aadd1e921/pimdb-0.2.0-py3-none-any.whl", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "69d5c069483e00663a7c1c03304c8bb0", "sha256": "5787bd68bb37a8bbc050c36058e135e6bcfffd2cd1bf102597c6b0816c9c754e"}, "downloads": -1, "filename": "pimdb-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "69d5c069483e00663a7c1c03304c8bb0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 22893, "upload_time": "2020-04-18T16:56:48", "upload_time_iso_8601": "2020-04-18T16:56:48.820878Z", "url": "https://files.pythonhosted.org/packages/51/d8/74e4ff5c6cac065b5baff581b85da091a949880d423e8c3e748121dcb525/pimdb-0.2.1-py3-none-any.whl", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "9e2e2b7b9a6bfa64d5816cc8b56569a9", "sha256": "1edd1c6d417122f4f4bfda065d462eb1335ad2961bb03a716822cccfae006095"}, "downloads": -1, "filename": "pimdb-0.2.2-py3-none-any.whl", "has_sig": false, "md5_digest": "9e2e2b7b9a6bfa64d5816cc8b56569a9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 23175, "upload_time": "2020-04-26T20:11:04", "upload_time_iso_8601": "2020-04-26T20:11:04.734725Z", "url": "https://files.pythonhosted.org/packages/ff/0d/27983131ed677ec36d2d48200a16b0dadee19040f6b2d34b73ff90af782d/pimdb-0.2.2-py3-none-any.whl", "yanked": false}], "0.2.3": [{"comment_text": "", "digests": {"md5": "c00a1790e047797817a08aad6ba9c662", "sha256": "c5b44e2c5a8d7e69d800c952cd40c3af198f3420d53f634ff6ffbf876a25657f"}, "downloads": -1, "filename": "pimdb-0.2.3-py3-none-any.whl", "has_sig": false, "md5_digest": "c00a1790e047797817a08aad6ba9c662", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 23302, "upload_time": "2020-05-02T16:10:31", "upload_time_iso_8601": "2020-05-02T16:10:31.246429Z", "url": "https://files.pythonhosted.org/packages/1c/09/441110070b9be766d558994b4e0197e97110cd8a87a9c09b05292109c583/pimdb-0.2.3-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c00a1790e047797817a08aad6ba9c662", "sha256": "c5b44e2c5a8d7e69d800c952cd40c3af198f3420d53f634ff6ffbf876a25657f"}, "downloads": -1, "filename": "pimdb-0.2.3-py3-none-any.whl", "has_sig": false, "md5_digest": "c00a1790e047797817a08aad6ba9c662", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 23302, "upload_time": "2020-05-02T16:10:31", "upload_time_iso_8601": "2020-05-02T16:10:31.246429Z", "url": "https://files.pythonhosted.org/packages/1c/09/441110070b9be766d558994b4e0197e97110cd8a87a9c09b05292109c583/pimdb-0.2.3-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 02:54:39 2020"}