{"info": {"author": "toddkarin", "author_email": "pvtools.lbl@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# vocmax\nCalculate the maximum sting size for a photovoltaic installation. The method is consistent with the NEC 2017 690.7 standard.  \n\n# Summary\nOne key design decision for photovoltaic (PV) power plants is to select the string size, the number of PV modules connected in series. Longer strings tend to lower total system costs, but the string size must still meet relevant electrical standards to ensure that the maximum system voltage remains less than the design voltage. Conventional methods calculate string size using the temperature coefficient of open-circuit voltage (Voc) assuming that the coldest-expected temperature occurs simultaneously with a full-sun irradiance of 1000 W/m^2. Here, we demonstrate that this traditional method is unnecessarily conservative, resulting in a string size that is ~10% shorter than necessary to maintain system voltage within limits. Instead, we suggest to calculate string size by modeling Voc over time using historical weather data, a method in compliance with the 2017 National Electric Code. We demonstrate that this site-specific modeling procedure is in close agreement with data from field measurements. Furthermore, we perform a comprehensive sensitivity and uncertainty analysis to identify an appropriate safety factor for this method. By using site-specific modeling instead of conventional methods, the levelized cost of electricity is reduced by up to ~1.2%, an impressive improvement attainable just by reorganizing strings. The method is provided as an easy-to-use [web tool](https://pvtools.lbl.gov/string-length-calculator) and an open-source Python package (vocmax) for the PV community. \n\n# Files\n- **example_vocmax_calculation.py** - Script for calculating maximum string length. Start here!\n- **vocmax/main.py** - vocmax main functions.\n- **vocmax/NSRDB_sample/** - an example set of NSRDB data files for running sample calculation. You may want to download your own for the location of interest.\n- **vocmax05_compress_database.py** - Script used to compress NSRDB csv files into a python pickle.\n\n\n# Install\n\nThe vocmax library can be installed with pip:\n```bash\npip install vocmax\n```\n\nThis package depends on the following packages:\n- pvlib\n- pandas\n- numpy\n- pvfactors (for bifacial modeling)\n- matplotlib\n\n# Examples\n\n\n## Full Example String Size calculation\n\nThe following code runs a standard string size calculation. This file is saved in the repository as 'example_vocmax_calculation.py'.\n\n\n```python\n\"\"\"\nThis script shows an example calculation for calculating the maximum\nstring length allowed in a particular location.\n\nThe method proceeds in the following steps\n\n- Choose module parameters\n- Choose racking method\n- Set maximum allowable string voltage.\n- Import weather data\n- Run the calculation\n- Plot.\n\"\"\"\n\nimport numpy as np\nimport matplotlib\nmatplotlib.use('TkAgg')\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport vocmax\nimport time\n\n# ------------------------------------------------------------------------------\n# Choose Module Parameters\n# ------------------------------------------------------------------------------\n\n# Option 1. If the module is in the CEC database, then can retreive parameters.\n\"\"\"\ncec_modules = vocmax.cec_modules\ncec_parameters = cec_modules['Jinko_Solar_JKM175M_72'].to_dict()\nsapm_parameters = vocmax.calculate_sapm_module_parameters(cec_parameters)\n# Calculate extra module parameters for your information:\nmodule = {**sapm_parameters, **cec_parameters}\nmodule['aoi_model'] = 'ashrae'\nmodule['ashrae_iam_param'] = 0.05\nmodule['is_bifacial'] = False\nmodule['efficiency'] = 0.18\n\"\"\"\n# Option 2. Or can build a dictionary of parameters manually. Note that in order\n# to calculate MPP, it is necessary to include the CEC parameters: alpha_sc,\n# a_ref, I_L_ref, I_o_ref, R_sh_ref, R_s, and Adjust.\nmodule = {\n    # Number of cells in series in each module.\n    'cells_in_series': 60,\n    # Open circuit voltage at reference conditions, in Volts.\n    'Voco': 37.2,\n    # Temperature coefficient of Voc, in Volt/C\n    'Bvoco': -0.127,\n    # Short circuit current, in Amp\n    'Isco': 8.09,\n    # Short circuit current temperature coefficient, in Amp/C\n    'alpha_sc': 0.0036,\n    # Module efficiency, unitless\n    'efficiency': 0.15,\n    # Diode Ideality Factor, unitless\n    'n_diode': 1.2,\n    # Fracion of diffuse irradiance used by the module.\n    'FD': 1,\n    # Whether the module is bifacial\n    'is_bifacial': True,\n    # Ratio of backside to frontside efficiency for bifacial modules. Only used if 'is_bifacial'==True\n    'bifaciality_factor': 0.7,\n    # AOI loss model\n    'aoi_model':'ashrae',\n    # AOI loss model parameter.\n    'ashrae_iam_param': 0.05\n    }\n\n\nis_cec_module = 'a_ref' in module\nprint('\\n** Module parameters **')\nprint(pd.Series(module))\n\n# ------------------------------------------------------------------------------\n# Choose Racking Method\n# ------------------------------------------------------------------------------\n\n# Racking parameters for single axis tracking (fixed tilt parameters are below).\nracking_parameters = {\n    # Racking type, can be 'single_axis' or 'fixed_tilt'\n    'racking_type': 'single_axis',\n    # The tilt of the axis of rotation with respect to horizontal, in degrees\n    'axis_tilt': 0,\n    # Compass direction along which the axis of rotation lies. Measured in\n    # degrees East of North\n    'axis_azimuth': 0,\n    # Maximum rotation angle of the one-axis tracker from its horizontal\n    # position, in degrees.\n    'max_angle': 90,\n    # Controls whether the tracker has the capability to \u201cbacktrack\u201d to avoid\n    # row-to-row shading. False denotes no backtrack capability. True denotes\n    # backtrack capability.\n    'backtrack': True,\n    # A value denoting the ground coverage ratio of a tracker system which\n    # utilizes backtracking; i.e. the ratio between the PV array surface area\n    # to total ground area.\n    'gcr': 2.0 / 7.0,\n    # Bifacial model can be 'proportional' or 'pvfactors'\n    'bifacial_model': 'proportional',\n    # Proportionality factor determining the backside irradiance as a fraction\n    # of the frontside irradiance. Only used if 'bifacial_model' is\n    # 'proportional'.\n    'backside_irradiance_fraction': 0.2,\n    # Ground albedo\n    'albedo': 0.25\n}\n\n# Example racking parameters for fixed tilt (only use one racking_parameters,\n# comment the other one out!)\n\"\"\"\nracking_parameters = {\n    'racking_type': 'fixed_tilt',\n    # Tilt of modules from horizontal.\n    'surface_tilt': 30,\n    # 180 degrees orients the modules towards the South.\n    'surface_azimuth': 180,\n    # Ground albedo\n    'albedo':0.25\n}\n\"\"\"\n\n# Additionally, here is an example set of racking parameters for full bifacial\n# modeling. Make sure 'is_bifacial' is True in the module parameters. Full\n# bifacial modeling takes about 10 minutes depending on the exact configuration.\n# See documentation for pvfactors for additional description of parameters.\n\"\"\"\nracking_parameters = {\n    # Racking type, can be 'single_axis' or 'fixed_tilt'\n    'racking_type': 'single_axis',\n    # The tilt of the axis of rotation with respect to horizontal, in degrees\n    'axis_tilt': 0,\n    # Compass direction along which the axis of rotation lies. Measured in\n    # degrees East of North\n    'axis_azimuth': 0,\n    # Maximum rotation angle of the one-axis tracker from its horizontal\n    # position, in degrees.\n    'max_angle': 90,\n    # Controls whether the tracker has the capability to \u201cbacktrack\u201d to avoid\n    # row-to-row shading. False denotes no backtrack capability. True denotes\n    # backtrack capability.\n    'backtrack': True,\n    # A value denoting the ground coverage ratio of a tracker system which\n    # utilizes backtracking; i.e. the ratio between the PV array surface area\n    # to total ground area.\n    'gcr': 2.0 / 7.0,\n    # Ground albedo\n    'albedo':0.25,\n    # bifacial model can be 'pfvactors' or 'simple'\n    'bifacial_model': 'pvfactors',\n    # number of pv rows\n    'n_pvrows': 3,\n    # Index of row to use backside irradiance for\n    'index_observed_pvrow': 1,\n    # height of pvrows (measured at center / torque tube)\n    'pvrow_height': 1,\n    # width of pvrows\n    'pvrow_width': 1,\n    # azimuth angle of rotation axis\n    'axis_azimuth': 0.,\n    # pv row front surface reflectivity\n    'rho_front_pvrow': 0.01,\n    # pv row back surface reflectivity\n    'rho_back_pvrow': 0.03,\n    # Horizon band angle.\n    'horizon_band_angle': 15,\n    'run_parallel_calculations': True,\n    'n_workers_for_parallel_calcs': -1,\n}\n\"\"\"\n\n# Sandia thermal model can be a string for using default coefficients or the\n# parameters can be set manually. Parameters are described in [1].\n#\n# [1] D.L. King, W.E. Boyson, J.A. Kratochvill. Photovoltaic Array Performance\n# Model. Sand2004-3535 (2004).\n\nthermal_model = {\n    'named_model': 'open_rack_cell_glassback',\n    # Temperature of open circuit modules is higher, specify whether to include\n    # this effect.\n    'open_circuit_rise': True\n     }\n# Or can set thermal model coefficients manually:\n\"\"\"\nthermal_model = {\n    'named_model': 'explicit',\n    'a':-3.56,\n    'b':-0.075,\n    'deltaT':3,\n    'open_circuit_rise':True\n}\n\"\"\"\n\nprint('\\n** Racking parameters **')\nprint(pd.Series(racking_parameters))\n\n# ------------------------------------------------------------------------------\n# Max string length\n# ------------------------------------------------------------------------------\n\n# Max allowable string voltage, for determining string length. Typically this\n# number is determined by the inverter.\nstring_design_voltage = 1500\n\n# ------------------------------------------------------------------------------\n# Import weather data\n# ------------------------------------------------------------------------------\n\n# Get the weather data.\nprint(\"\\nImporting weather data...\")\n\n# Define the lat, lon of the location (this location is preloaded and does not\n# require an API key)\nlat, lon = 37.876, -122.247\n# Get an NSRDB api key for any point but the preloaded one (this api key will\n# not work, you need to get your own which will look like it.)\napi_key = 'BP2hICfC0ZQ2PT6h4xaU3vc4GAadf39fasdsPbZN'\n# Get weather data (takes a few minutes, result is cached for quick second calls).\nweather, info = vocmax.get_weather_data(lat,lon,api_key=api_key)\n\n# Option 2: Get weather data from a series of NSRDB csv files.\n\"\"\"\nweather_data_directory = 'vocmax/NSRDB_sample'\nweather, info = vocmax.import_nsrdb_sequence(weather_data_directory)\n\"\"\"\n\n# Make sure that the weather data has the correct fields for pvlib.\nweather = weather.rename(columns={'DNI':'dni','DHI':'dhi','GHI':'ghi',\n                     'Temperature':'temp_air',\n                     'Wind Speed':'wind_speed'})\n\n# ------------------------------------------------------------------------------\n# Simulate system\n# ------------------------------------------------------------------------------\n\n# Run the calculation.\nprint('Running Simulation...')\nt0 = time.time()\ndf = vocmax.simulate_system(weather,\n                               info,\n                               module,\n                               racking_parameters,\n                               thermal_model)\nprint('Simulation time: {:1.2f}'.format(time.time()-t0))\n# Calculate max power voltage, only possible if using CEC database for module parameters.\nif is_cec_module:\n    _, df['v_mp'], _ = vocmax.sapm_mpp(df['effective_irradiance'],\n                          df['temp_cell'],\n                          module)\n\n# ------------------------------------------------------------------------------\n# Calculate String Size\n# ------------------------------------------------------------------------------\n\n# Get ASHRAE design temperature:\nashrae = vocmax.ashrae_get_data_at_loc(lat,lon)\n\n# Look up weather data uncertainty safety factor at the point of interest.\ntemperature_error = vocmax.get_nsrdb_temperature_error(info['Latitude'],info['Longitude'])\n\n# Calculate weather data safety factor using module Voc temperature coefficient\nBeta_Voco_fraction = np.abs(module['Bvoco'])/module['Voco']\nweather_data_safety_factor = temperature_error*Beta_Voco_fraction\n\n# Calculate propensity for extreme temperature fluctuations.\nextreme_cold_delta_T = vocmax.calculate_mean_yearly_min_temp(df.index,df['temp_air']) - df['temp_air'].min()\n\n# Compute safety factor for extreme cold temperatures\nextreme_cold_safety_factor = extreme_cold_delta_T*Beta_Voco_fraction\n\n# Add up different contributions to obtain an overall safety factor\nsafety_factor = weather_data_safety_factor + 0.016\nprint('Total Safety Factor: {:1.1%}'.format(safety_factor))\n\n# Calculate string length.\nvoc_summary = vocmax.make_voc_summary(df, info, module,\n                                string_design_voltage=string_design_voltage,\n                                safety_factor=safety_factor)\n\nprint('Simulation complete.')\n\n# Make a csv file for saving simulation parameters\nsummary_text = vocmax.make_simulation_summary(df, info,\n                                                 module,\n                                                 racking_parameters,\n                                                 thermal_model,\n                                                 string_design_voltage,\n                                                 safety_factor)\n\n# Save the summary csv to file.\nsummary_file = 'out.csv'\nwith open(summary_file,'w') as f:\n    f.write(summary_text)\n\nprint('\\n** Voc Results **')\nprint(voc_summary[[ 'max_module_voltage', 'safety_factor','string_length',\n                 'Cell Temperature', 'POA Irradiance']].to_string())\n\n# Calculate some IV curves if we are using CEC database.\nif is_cec_module:\n    irradiance_list = [200,400,600,800,1000]\n    iv_curve = []\n    for e in irradiance_list:\n        ret = vocmax.calculate_iv_curve(e, 25, cec_parameters)\n        ret['effective_irradiance'] = e\n        iv_curve.append(ret)\n\n\n# ------------------------------------------------------------------------------\n# Plot results\n# ------------------------------------------------------------------------------\n\npd.plotting.register_matplotlib_converters(explicit=True)\nfig_width = 6\nfig_height = 4\n\nmax_pos = np.argmax(np.array(df['v_oc']))\nplot_width = 300\n\n# Plot Voc vs. time\nplt.figure(0,figsize=(fig_width,fig_height))\nplt.clf()\nplt.plot(df.index[max_pos-plot_width:max_pos+plot_width],\n         df['v_oc'][max_pos-plot_width:max_pos+plot_width])\nylims = np.array(plt.ylim())\nplt.plot([ df.index[max_pos],df.index[max_pos]] , ylims)\nplt.ylabel('Voc (V)')\nplt.show()\n\n# Plot Irradiance vs. time\nplt.figure(11,figsize=(fig_width,fig_height))\nplt.clf()\nplt.plot(df.index[max_pos-plot_width:max_pos+plot_width],\n         df['effective_irradiance'][max_pos-plot_width:max_pos+plot_width])\nylims = np.array(plt.ylim())\nplt.plot([ df.index[max_pos],df.index[max_pos]] , ylims)\nplt.ylabel('POA Irradiance')\nplt.show()\n\n# Plot Voc histogram\nplt.figure(1,figsize=(fig_width,fig_height))\nplt.clf()\nvoc_hist_x, voc_hist_y = vocmax.make_voc_histogram(df,info)\n\nplt.plot(voc_hist_x, voc_hist_y)\nplt.xlabel('Voc (Volts)')\nplt.ylabel('hrs/year')\n\nfor key in voc_summary.index:\n    plt.plot(voc_summary['max_module_voltage'][key] * np.array([1,1]), [0,10],\n             label=key)\nplt.show()\nplt.legend()\n\n\n# Plot IV curve\nif is_cec_module:\n    plt.figure(3)\n    plt.clf()\n    for j in range(len(iv_curve)):\n        plt.plot(iv_curve[j]['v'], iv_curve[j]['i'])\n\n    plt.xlabel('Voltage (V)')\n    plt.ylabel('Current (A)')\n    plt.grid()\n\n# Scatter plot of Temperature/Irradiance where Voc is highest.\nplt.figure(5)\nplt.clf()\ncax = df['v_oc']>np.percentile(df['v_oc'],99.9)\nplt.plot(df.loc[:,'effective_irradiance'], df.loc[:,'temp_cell'],'.',\n         label='all data')\nplt.plot(df.loc[cax,'effective_irradiance'], df.loc[cax,'temp_cell'],'.',\n         label='Voc>P99.9')\nplt.xlabel('POA Irradiance (W/m^2)')\nplt.ylabel('Cell Temperature (C)')\nplt.legend()\n# plt.xlim([0,1000])\nplt.show()\n\n\n\n\n```\n\n\n\n\n\n## Set module parameters\nModule parameters are set using a dictionary. \n```python\nsapm_parameters = {'cells_in_series': 96,\n                   'n_diode': 1.2,\n                   'Voco': 69.7015,\n                   'Bvoco': -0.159,\n                   'FD': 1}\n```\n\n## Get weather data\n\nThe following code will download weather data from the [national solar radiation database (NSRDB)](https://nsrdb.nrel.gov/) for the lat/lon coordinate.\n```python\nimport vocmax\n# Define the lat, lon of the location and the year (this one is preloaded)\nlat, lon = 37.876, -122.247\n\n# You must request an NSRDB api key from the link above\napi_key = 'apsdofijasdpafkjweo21u09u1082h8h2d2d' # not a real key -- get your own!\n\nweather, info = vocmax.get_weather_data(lat,lon,api_key=api_key)\n```\n\nAnother possibility is to download data directly from the NSRDB map viewer.\n\n\n## Get NSRDB safety factor\nThe safety factor to use depends on location, here is how to look it up.\n```python\nimport vocmax\n\n# Define the lat, long of the location\nlat, lon = 37.876, -91\n\n# Find the max temperature error for the location\ntemperature_error = vocmax.get_nsrdb_temperature_error(lat,lon)\n\n# Temperature coefficient of Voc divided by Voco in 1/C.\ntemperature_coefficient_of_voc = 0.0035\n\n# Find the safety factor\nsafety_factor = temperature_error*temperature_coefficient_of_voc\n\nprint('Safety Factor for NSRDB weather data: {:.2%}'.format(safety_factor))\n```\n\n## Load ASHRAE data\n\nDue to copyright, the ASHRAE design conditions filemust be purchased separately, directly from ASHRAE. \nThe weather data viewer DVD, version 6.0 is available at: https://www.techstreet.com/ashrae/standards/weather-data-viewer-dvd-version-6-0?ashrae_auth_token=12ce7b1d-2e2e-472b-b689-8065208f2e36&product_id=1949790\n\nWithin this DVD is a file titled \"2017DesignConditions_s.xlsx\" One way to load this file is to place it in the current directory. \n\nAn exmaple of loading the ASHRAE dataset is\n\n```python\nimport vocmax\nashrae = vocmax.ashrae_get_design_conditions()\n```\n\n\n# Todo\n\n- Change the voc summary to be Vmax rather than Voc.\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/toddkarin/vocmax", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "vocmax", "package_url": "https://pypi.org/project/vocmax/", "platform": "", "project_url": "https://pypi.org/project/vocmax/", "project_urls": {"Homepage": "https://github.com/toddkarin/vocmax"}, "release_url": "https://pypi.org/project/vocmax/0.0.12/", "requires_dist": ["numpy", "pandas", "pvlib", "matplotlib", "tqdm", "pvfactors"], "requires_python": "", "summary": "Calculate the maximum module open circuit voltage to find the maximum solar PV string length", "version": "0.0.12", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>vocmax</h1>\n<p>Calculate the maximum sting size for a photovoltaic installation. The method is consistent with the NEC 2017 690.7 standard.</p>\n<h1>Summary</h1>\n<p>One key design decision for photovoltaic (PV) power plants is to select the string size, the number of PV modules connected in series. Longer strings tend to lower total system costs, but the string size must still meet relevant electrical standards to ensure that the maximum system voltage remains less than the design voltage. Conventional methods calculate string size using the temperature coefficient of open-circuit voltage (Voc) assuming that the coldest-expected temperature occurs simultaneously with a full-sun irradiance of 1000 W/m^2. Here, we demonstrate that this traditional method is unnecessarily conservative, resulting in a string size that is ~10% shorter than necessary to maintain system voltage within limits. Instead, we suggest to calculate string size by modeling Voc over time using historical weather data, a method in compliance with the 2017 National Electric Code. We demonstrate that this site-specific modeling procedure is in close agreement with data from field measurements. Furthermore, we perform a comprehensive sensitivity and uncertainty analysis to identify an appropriate safety factor for this method. By using site-specific modeling instead of conventional methods, the levelized cost of electricity is reduced by up to ~1.2%, an impressive improvement attainable just by reorganizing strings. The method is provided as an easy-to-use <a href=\"https://pvtools.lbl.gov/string-length-calculator\" rel=\"nofollow\">web tool</a> and an open-source Python package (vocmax) for the PV community.</p>\n<h1>Files</h1>\n<ul>\n<li><strong>example_vocmax_calculation.py</strong> - Script for calculating maximum string length. Start here!</li>\n<li><strong>vocmax/main.py</strong> - vocmax main functions.</li>\n<li><strong>vocmax/NSRDB_sample/</strong> - an example set of NSRDB data files for running sample calculation. You may want to download your own for the location of interest.</li>\n<li><strong>vocmax05_compress_database.py</strong> - Script used to compress NSRDB csv files into a python pickle.</li>\n</ul>\n<h1>Install</h1>\n<p>The vocmax library can be installed with pip:</p>\n<pre>pip install vocmax\n</pre>\n<p>This package depends on the following packages:</p>\n<ul>\n<li>pvlib</li>\n<li>pandas</li>\n<li>numpy</li>\n<li>pvfactors (for bifacial modeling)</li>\n<li>matplotlib</li>\n</ul>\n<h1>Examples</h1>\n<h2>Full Example String Size calculation</h2>\n<p>The following code runs a standard string size calculation. This file is saved in the repository as 'example_vocmax_calculation.py'.</p>\n<pre><span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">This script shows an example calculation for calculating the maximum</span>\n<span class=\"sd\">string length allowed in a particular location.</span>\n\n<span class=\"sd\">The method proceeds in the following steps</span>\n\n<span class=\"sd\">- Choose module parameters</span>\n<span class=\"sd\">- Choose racking method</span>\n<span class=\"sd\">- Set maximum allowable string voltage.</span>\n<span class=\"sd\">- Import weather data</span>\n<span class=\"sd\">- Run the calculation</span>\n<span class=\"sd\">- Plot.</span>\n<span class=\"sd\">\"\"\"</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">import</span> <span class=\"nn\">matplotlib</span>\n<span class=\"n\">matplotlib</span><span class=\"o\">.</span><span class=\"n\">use</span><span class=\"p\">(</span><span class=\"s1\">'TkAgg'</span><span class=\"p\">)</span>\n<span class=\"kn\">import</span> <span class=\"nn\">matplotlib.pyplot</span> <span class=\"k\">as</span> <span class=\"nn\">plt</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pandas</span> <span class=\"k\">as</span> <span class=\"nn\">pd</span>\n<span class=\"kn\">import</span> <span class=\"nn\">vocmax</span>\n<span class=\"kn\">import</span> <span class=\"nn\">time</span>\n\n<span class=\"c1\"># ------------------------------------------------------------------------------</span>\n<span class=\"c1\"># Choose Module Parameters</span>\n<span class=\"c1\"># ------------------------------------------------------------------------------</span>\n\n<span class=\"c1\"># Option 1. If the module is in the CEC database, then can retreive parameters.</span>\n<span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">cec_modules = vocmax.cec_modules</span>\n<span class=\"sd\">cec_parameters = cec_modules['Jinko_Solar_JKM175M_72'].to_dict()</span>\n<span class=\"sd\">sapm_parameters = vocmax.calculate_sapm_module_parameters(cec_parameters)</span>\n<span class=\"sd\"># Calculate extra module parameters for your information:</span>\n<span class=\"sd\">module = {**sapm_parameters, **cec_parameters}</span>\n<span class=\"sd\">module['aoi_model'] = 'ashrae'</span>\n<span class=\"sd\">module['ashrae_iam_param'] = 0.05</span>\n<span class=\"sd\">module['is_bifacial'] = False</span>\n<span class=\"sd\">module['efficiency'] = 0.18</span>\n<span class=\"sd\">\"\"\"</span>\n<span class=\"c1\"># Option 2. Or can build a dictionary of parameters manually. Note that in order</span>\n<span class=\"c1\"># to calculate MPP, it is necessary to include the CEC parameters: alpha_sc,</span>\n<span class=\"c1\"># a_ref, I_L_ref, I_o_ref, R_sh_ref, R_s, and Adjust.</span>\n<span class=\"n\">module</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"c1\"># Number of cells in series in each module.</span>\n    <span class=\"s1\">'cells_in_series'</span><span class=\"p\">:</span> <span class=\"mi\">60</span><span class=\"p\">,</span>\n    <span class=\"c1\"># Open circuit voltage at reference conditions, in Volts.</span>\n    <span class=\"s1\">'Voco'</span><span class=\"p\">:</span> <span class=\"mf\">37.2</span><span class=\"p\">,</span>\n    <span class=\"c1\"># Temperature coefficient of Voc, in Volt/C</span>\n    <span class=\"s1\">'Bvoco'</span><span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"mf\">0.127</span><span class=\"p\">,</span>\n    <span class=\"c1\"># Short circuit current, in Amp</span>\n    <span class=\"s1\">'Isco'</span><span class=\"p\">:</span> <span class=\"mf\">8.09</span><span class=\"p\">,</span>\n    <span class=\"c1\"># Short circuit current temperature coefficient, in Amp/C</span>\n    <span class=\"s1\">'alpha_sc'</span><span class=\"p\">:</span> <span class=\"mf\">0.0036</span><span class=\"p\">,</span>\n    <span class=\"c1\"># Module efficiency, unitless</span>\n    <span class=\"s1\">'efficiency'</span><span class=\"p\">:</span> <span class=\"mf\">0.15</span><span class=\"p\">,</span>\n    <span class=\"c1\"># Diode Ideality Factor, unitless</span>\n    <span class=\"s1\">'n_diode'</span><span class=\"p\">:</span> <span class=\"mf\">1.2</span><span class=\"p\">,</span>\n    <span class=\"c1\"># Fracion of diffuse irradiance used by the module.</span>\n    <span class=\"s1\">'FD'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n    <span class=\"c1\"># Whether the module is bifacial</span>\n    <span class=\"s1\">'is_bifacial'</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n    <span class=\"c1\"># Ratio of backside to frontside efficiency for bifacial modules. Only used if 'is_bifacial'==True</span>\n    <span class=\"s1\">'bifaciality_factor'</span><span class=\"p\">:</span> <span class=\"mf\">0.7</span><span class=\"p\">,</span>\n    <span class=\"c1\"># AOI loss model</span>\n    <span class=\"s1\">'aoi_model'</span><span class=\"p\">:</span><span class=\"s1\">'ashrae'</span><span class=\"p\">,</span>\n    <span class=\"c1\"># AOI loss model parameter.</span>\n    <span class=\"s1\">'ashrae_iam_param'</span><span class=\"p\">:</span> <span class=\"mf\">0.05</span>\n    <span class=\"p\">}</span>\n\n\n<span class=\"n\">is_cec_module</span> <span class=\"o\">=</span> <span class=\"s1\">'a_ref'</span> <span class=\"ow\">in</span> <span class=\"n\">module</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'</span><span class=\"se\">\\n</span><span class=\"s1\">** Module parameters **'</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">(</span><span class=\"n\">module</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># ------------------------------------------------------------------------------</span>\n<span class=\"c1\"># Choose Racking Method</span>\n<span class=\"c1\"># ------------------------------------------------------------------------------</span>\n\n<span class=\"c1\"># Racking parameters for single axis tracking (fixed tilt parameters are below).</span>\n<span class=\"n\">racking_parameters</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"c1\"># Racking type, can be 'single_axis' or 'fixed_tilt'</span>\n    <span class=\"s1\">'racking_type'</span><span class=\"p\">:</span> <span class=\"s1\">'single_axis'</span><span class=\"p\">,</span>\n    <span class=\"c1\"># The tilt of the axis of rotation with respect to horizontal, in degrees</span>\n    <span class=\"s1\">'axis_tilt'</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n    <span class=\"c1\"># Compass direction along which the axis of rotation lies. Measured in</span>\n    <span class=\"c1\"># degrees East of North</span>\n    <span class=\"s1\">'axis_azimuth'</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n    <span class=\"c1\"># Maximum rotation angle of the one-axis tracker from its horizontal</span>\n    <span class=\"c1\"># position, in degrees.</span>\n    <span class=\"s1\">'max_angle'</span><span class=\"p\">:</span> <span class=\"mi\">90</span><span class=\"p\">,</span>\n    <span class=\"c1\"># Controls whether the tracker has the capability to \u201cbacktrack\u201d to avoid</span>\n    <span class=\"c1\"># row-to-row shading. False denotes no backtrack capability. True denotes</span>\n    <span class=\"c1\"># backtrack capability.</span>\n    <span class=\"s1\">'backtrack'</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n    <span class=\"c1\"># A value denoting the ground coverage ratio of a tracker system which</span>\n    <span class=\"c1\"># utilizes backtracking; i.e. the ratio between the PV array surface area</span>\n    <span class=\"c1\"># to total ground area.</span>\n    <span class=\"s1\">'gcr'</span><span class=\"p\">:</span> <span class=\"mf\">2.0</span> <span class=\"o\">/</span> <span class=\"mf\">7.0</span><span class=\"p\">,</span>\n    <span class=\"c1\"># Bifacial model can be 'proportional' or 'pvfactors'</span>\n    <span class=\"s1\">'bifacial_model'</span><span class=\"p\">:</span> <span class=\"s1\">'proportional'</span><span class=\"p\">,</span>\n    <span class=\"c1\"># Proportionality factor determining the backside irradiance as a fraction</span>\n    <span class=\"c1\"># of the frontside irradiance. Only used if 'bifacial_model' is</span>\n    <span class=\"c1\"># 'proportional'.</span>\n    <span class=\"s1\">'backside_irradiance_fraction'</span><span class=\"p\">:</span> <span class=\"mf\">0.2</span><span class=\"p\">,</span>\n    <span class=\"c1\"># Ground albedo</span>\n    <span class=\"s1\">'albedo'</span><span class=\"p\">:</span> <span class=\"mf\">0.25</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># Example racking parameters for fixed tilt (only use one racking_parameters,</span>\n<span class=\"c1\"># comment the other one out!)</span>\n<span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">racking_parameters = {</span>\n<span class=\"sd\">    'racking_type': 'fixed_tilt',</span>\n<span class=\"sd\">    # Tilt of modules from horizontal.</span>\n<span class=\"sd\">    'surface_tilt': 30,</span>\n<span class=\"sd\">    # 180 degrees orients the modules towards the South.</span>\n<span class=\"sd\">    'surface_azimuth': 180,</span>\n<span class=\"sd\">    # Ground albedo</span>\n<span class=\"sd\">    'albedo':0.25</span>\n<span class=\"sd\">}</span>\n<span class=\"sd\">\"\"\"</span>\n\n<span class=\"c1\"># Additionally, here is an example set of racking parameters for full bifacial</span>\n<span class=\"c1\"># modeling. Make sure 'is_bifacial' is True in the module parameters. Full</span>\n<span class=\"c1\"># bifacial modeling takes about 10 minutes depending on the exact configuration.</span>\n<span class=\"c1\"># See documentation for pvfactors for additional description of parameters.</span>\n<span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">racking_parameters = {</span>\n<span class=\"sd\">    # Racking type, can be 'single_axis' or 'fixed_tilt'</span>\n<span class=\"sd\">    'racking_type': 'single_axis',</span>\n<span class=\"sd\">    # The tilt of the axis of rotation with respect to horizontal, in degrees</span>\n<span class=\"sd\">    'axis_tilt': 0,</span>\n<span class=\"sd\">    # Compass direction along which the axis of rotation lies. Measured in</span>\n<span class=\"sd\">    # degrees East of North</span>\n<span class=\"sd\">    'axis_azimuth': 0,</span>\n<span class=\"sd\">    # Maximum rotation angle of the one-axis tracker from its horizontal</span>\n<span class=\"sd\">    # position, in degrees.</span>\n<span class=\"sd\">    'max_angle': 90,</span>\n<span class=\"sd\">    # Controls whether the tracker has the capability to \u201cbacktrack\u201d to avoid</span>\n<span class=\"sd\">    # row-to-row shading. False denotes no backtrack capability. True denotes</span>\n<span class=\"sd\">    # backtrack capability.</span>\n<span class=\"sd\">    'backtrack': True,</span>\n<span class=\"sd\">    # A value denoting the ground coverage ratio of a tracker system which</span>\n<span class=\"sd\">    # utilizes backtracking; i.e. the ratio between the PV array surface area</span>\n<span class=\"sd\">    # to total ground area.</span>\n<span class=\"sd\">    'gcr': 2.0 / 7.0,</span>\n<span class=\"sd\">    # Ground albedo</span>\n<span class=\"sd\">    'albedo':0.25,</span>\n<span class=\"sd\">    # bifacial model can be 'pfvactors' or 'simple'</span>\n<span class=\"sd\">    'bifacial_model': 'pvfactors',</span>\n<span class=\"sd\">    # number of pv rows</span>\n<span class=\"sd\">    'n_pvrows': 3,</span>\n<span class=\"sd\">    # Index of row to use backside irradiance for</span>\n<span class=\"sd\">    'index_observed_pvrow': 1,</span>\n<span class=\"sd\">    # height of pvrows (measured at center / torque tube)</span>\n<span class=\"sd\">    'pvrow_height': 1,</span>\n<span class=\"sd\">    # width of pvrows</span>\n<span class=\"sd\">    'pvrow_width': 1,</span>\n<span class=\"sd\">    # azimuth angle of rotation axis</span>\n<span class=\"sd\">    'axis_azimuth': 0.,</span>\n<span class=\"sd\">    # pv row front surface reflectivity</span>\n<span class=\"sd\">    'rho_front_pvrow': 0.01,</span>\n<span class=\"sd\">    # pv row back surface reflectivity</span>\n<span class=\"sd\">    'rho_back_pvrow': 0.03,</span>\n<span class=\"sd\">    # Horizon band angle.</span>\n<span class=\"sd\">    'horizon_band_angle': 15,</span>\n<span class=\"sd\">    'run_parallel_calculations': True,</span>\n<span class=\"sd\">    'n_workers_for_parallel_calcs': -1,</span>\n<span class=\"sd\">}</span>\n<span class=\"sd\">\"\"\"</span>\n\n<span class=\"c1\"># Sandia thermal model can be a string for using default coefficients or the</span>\n<span class=\"c1\"># parameters can be set manually. Parameters are described in [1].</span>\n<span class=\"c1\">#</span>\n<span class=\"c1\"># [1] D.L. King, W.E. Boyson, J.A. Kratochvill. Photovoltaic Array Performance</span>\n<span class=\"c1\"># Model. Sand2004-3535 (2004).</span>\n\n<span class=\"n\">thermal_model</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'named_model'</span><span class=\"p\">:</span> <span class=\"s1\">'open_rack_cell_glassback'</span><span class=\"p\">,</span>\n    <span class=\"c1\"># Temperature of open circuit modules is higher, specify whether to include</span>\n    <span class=\"c1\"># this effect.</span>\n    <span class=\"s1\">'open_circuit_rise'</span><span class=\"p\">:</span> <span class=\"kc\">True</span>\n     <span class=\"p\">}</span>\n<span class=\"c1\"># Or can set thermal model coefficients manually:</span>\n<span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">thermal_model = {</span>\n<span class=\"sd\">    'named_model': 'explicit',</span>\n<span class=\"sd\">    'a':-3.56,</span>\n<span class=\"sd\">    'b':-0.075,</span>\n<span class=\"sd\">    'deltaT':3,</span>\n<span class=\"sd\">    'open_circuit_rise':True</span>\n<span class=\"sd\">}</span>\n<span class=\"sd\">\"\"\"</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'</span><span class=\"se\">\\n</span><span class=\"s1\">** Racking parameters **'</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">(</span><span class=\"n\">racking_parameters</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># ------------------------------------------------------------------------------</span>\n<span class=\"c1\"># Max string length</span>\n<span class=\"c1\"># ------------------------------------------------------------------------------</span>\n\n<span class=\"c1\"># Max allowable string voltage, for determining string length. Typically this</span>\n<span class=\"c1\"># number is determined by the inverter.</span>\n<span class=\"n\">string_design_voltage</span> <span class=\"o\">=</span> <span class=\"mi\">1500</span>\n\n<span class=\"c1\"># ------------------------------------------------------------------------------</span>\n<span class=\"c1\"># Import weather data</span>\n<span class=\"c1\"># ------------------------------------------------------------------------------</span>\n\n<span class=\"c1\"># Get the weather data.</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"</span><span class=\"se\">\\n</span><span class=\"s2\">Importing weather data...\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Define the lat, lon of the location (this location is preloaded and does not</span>\n<span class=\"c1\"># require an API key)</span>\n<span class=\"n\">lat</span><span class=\"p\">,</span> <span class=\"n\">lon</span> <span class=\"o\">=</span> <span class=\"mf\">37.876</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">122.247</span>\n<span class=\"c1\"># Get an NSRDB api key for any point but the preloaded one (this api key will</span>\n<span class=\"c1\"># not work, you need to get your own which will look like it.)</span>\n<span class=\"n\">api_key</span> <span class=\"o\">=</span> <span class=\"s1\">'BP2hICfC0ZQ2PT6h4xaU3vc4GAadf39fasdsPbZN'</span>\n<span class=\"c1\"># Get weather data (takes a few minutes, result is cached for quick second calls).</span>\n<span class=\"n\">weather</span><span class=\"p\">,</span> <span class=\"n\">info</span> <span class=\"o\">=</span> <span class=\"n\">vocmax</span><span class=\"o\">.</span><span class=\"n\">get_weather_data</span><span class=\"p\">(</span><span class=\"n\">lat</span><span class=\"p\">,</span><span class=\"n\">lon</span><span class=\"p\">,</span><span class=\"n\">api_key</span><span class=\"o\">=</span><span class=\"n\">api_key</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Option 2: Get weather data from a series of NSRDB csv files.</span>\n<span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">weather_data_directory = 'vocmax/NSRDB_sample'</span>\n<span class=\"sd\">weather, info = vocmax.import_nsrdb_sequence(weather_data_directory)</span>\n<span class=\"sd\">\"\"\"</span>\n\n<span class=\"c1\"># Make sure that the weather data has the correct fields for pvlib.</span>\n<span class=\"n\">weather</span> <span class=\"o\">=</span> <span class=\"n\">weather</span><span class=\"o\">.</span><span class=\"n\">rename</span><span class=\"p\">(</span><span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'DNI'</span><span class=\"p\">:</span><span class=\"s1\">'dni'</span><span class=\"p\">,</span><span class=\"s1\">'DHI'</span><span class=\"p\">:</span><span class=\"s1\">'dhi'</span><span class=\"p\">,</span><span class=\"s1\">'GHI'</span><span class=\"p\">:</span><span class=\"s1\">'ghi'</span><span class=\"p\">,</span>\n                     <span class=\"s1\">'Temperature'</span><span class=\"p\">:</span><span class=\"s1\">'temp_air'</span><span class=\"p\">,</span>\n                     <span class=\"s1\">'Wind Speed'</span><span class=\"p\">:</span><span class=\"s1\">'wind_speed'</span><span class=\"p\">})</span>\n\n<span class=\"c1\"># ------------------------------------------------------------------------------</span>\n<span class=\"c1\"># Simulate system</span>\n<span class=\"c1\"># ------------------------------------------------------------------------------</span>\n\n<span class=\"c1\"># Run the calculation.</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Running Simulation...'</span><span class=\"p\">)</span>\n<span class=\"n\">t0</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span>\n<span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">vocmax</span><span class=\"o\">.</span><span class=\"n\">simulate_system</span><span class=\"p\">(</span><span class=\"n\">weather</span><span class=\"p\">,</span>\n                               <span class=\"n\">info</span><span class=\"p\">,</span>\n                               <span class=\"n\">module</span><span class=\"p\">,</span>\n                               <span class=\"n\">racking_parameters</span><span class=\"p\">,</span>\n                               <span class=\"n\">thermal_model</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Simulation time: </span><span class=\"si\">{:1.2f}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span><span class=\"o\">-</span><span class=\"n\">t0</span><span class=\"p\">))</span>\n<span class=\"c1\"># Calculate max power voltage, only possible if using CEC database for module parameters.</span>\n<span class=\"k\">if</span> <span class=\"n\">is_cec_module</span><span class=\"p\">:</span>\n    <span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">df</span><span class=\"p\">[</span><span class=\"s1\">'v_mp'</span><span class=\"p\">],</span> <span class=\"n\">_</span> <span class=\"o\">=</span> <span class=\"n\">vocmax</span><span class=\"o\">.</span><span class=\"n\">sapm_mpp</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">[</span><span class=\"s1\">'effective_irradiance'</span><span class=\"p\">],</span>\n                          <span class=\"n\">df</span><span class=\"p\">[</span><span class=\"s1\">'temp_cell'</span><span class=\"p\">],</span>\n                          <span class=\"n\">module</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># ------------------------------------------------------------------------------</span>\n<span class=\"c1\"># Calculate String Size</span>\n<span class=\"c1\"># ------------------------------------------------------------------------------</span>\n\n<span class=\"c1\"># Get ASHRAE design temperature:</span>\n<span class=\"n\">ashrae</span> <span class=\"o\">=</span> <span class=\"n\">vocmax</span><span class=\"o\">.</span><span class=\"n\">ashrae_get_data_at_loc</span><span class=\"p\">(</span><span class=\"n\">lat</span><span class=\"p\">,</span><span class=\"n\">lon</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Look up weather data uncertainty safety factor at the point of interest.</span>\n<span class=\"n\">temperature_error</span> <span class=\"o\">=</span> <span class=\"n\">vocmax</span><span class=\"o\">.</span><span class=\"n\">get_nsrdb_temperature_error</span><span class=\"p\">(</span><span class=\"n\">info</span><span class=\"p\">[</span><span class=\"s1\">'Latitude'</span><span class=\"p\">],</span><span class=\"n\">info</span><span class=\"p\">[</span><span class=\"s1\">'Longitude'</span><span class=\"p\">])</span>\n\n<span class=\"c1\"># Calculate weather data safety factor using module Voc temperature coefficient</span>\n<span class=\"n\">Beta_Voco_fraction</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">abs</span><span class=\"p\">(</span><span class=\"n\">module</span><span class=\"p\">[</span><span class=\"s1\">'Bvoco'</span><span class=\"p\">])</span><span class=\"o\">/</span><span class=\"n\">module</span><span class=\"p\">[</span><span class=\"s1\">'Voco'</span><span class=\"p\">]</span>\n<span class=\"n\">weather_data_safety_factor</span> <span class=\"o\">=</span> <span class=\"n\">temperature_error</span><span class=\"o\">*</span><span class=\"n\">Beta_Voco_fraction</span>\n\n<span class=\"c1\"># Calculate propensity for extreme temperature fluctuations.</span>\n<span class=\"n\">extreme_cold_delta_T</span> <span class=\"o\">=</span> <span class=\"n\">vocmax</span><span class=\"o\">.</span><span class=\"n\">calculate_mean_yearly_min_temp</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">,</span><span class=\"n\">df</span><span class=\"p\">[</span><span class=\"s1\">'temp_air'</span><span class=\"p\">])</span> <span class=\"o\">-</span> <span class=\"n\">df</span><span class=\"p\">[</span><span class=\"s1\">'temp_air'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">min</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Compute safety factor for extreme cold temperatures</span>\n<span class=\"n\">extreme_cold_safety_factor</span> <span class=\"o\">=</span> <span class=\"n\">extreme_cold_delta_T</span><span class=\"o\">*</span><span class=\"n\">Beta_Voco_fraction</span>\n\n<span class=\"c1\"># Add up different contributions to obtain an overall safety factor</span>\n<span class=\"n\">safety_factor</span> <span class=\"o\">=</span> <span class=\"n\">weather_data_safety_factor</span> <span class=\"o\">+</span> <span class=\"mf\">0.016</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Total Safety Factor: </span><span class=\"si\">{:1.1%}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">safety_factor</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># Calculate string length.</span>\n<span class=\"n\">voc_summary</span> <span class=\"o\">=</span> <span class=\"n\">vocmax</span><span class=\"o\">.</span><span class=\"n\">make_voc_summary</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">,</span> <span class=\"n\">info</span><span class=\"p\">,</span> <span class=\"n\">module</span><span class=\"p\">,</span>\n                                <span class=\"n\">string_design_voltage</span><span class=\"o\">=</span><span class=\"n\">string_design_voltage</span><span class=\"p\">,</span>\n                                <span class=\"n\">safety_factor</span><span class=\"o\">=</span><span class=\"n\">safety_factor</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Simulation complete.'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Make a csv file for saving simulation parameters</span>\n<span class=\"n\">summary_text</span> <span class=\"o\">=</span> <span class=\"n\">vocmax</span><span class=\"o\">.</span><span class=\"n\">make_simulation_summary</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">,</span> <span class=\"n\">info</span><span class=\"p\">,</span>\n                                                 <span class=\"n\">module</span><span class=\"p\">,</span>\n                                                 <span class=\"n\">racking_parameters</span><span class=\"p\">,</span>\n                                                 <span class=\"n\">thermal_model</span><span class=\"p\">,</span>\n                                                 <span class=\"n\">string_design_voltage</span><span class=\"p\">,</span>\n                                                 <span class=\"n\">safety_factor</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Save the summary csv to file.</span>\n<span class=\"n\">summary_file</span> <span class=\"o\">=</span> <span class=\"s1\">'out.csv'</span>\n<span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">summary_file</span><span class=\"p\">,</span><span class=\"s1\">'w'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n    <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">summary_text</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'</span><span class=\"se\">\\n</span><span class=\"s1\">** Voc Results **'</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">voc_summary</span><span class=\"p\">[[</span> <span class=\"s1\">'max_module_voltage'</span><span class=\"p\">,</span> <span class=\"s1\">'safety_factor'</span><span class=\"p\">,</span><span class=\"s1\">'string_length'</span><span class=\"p\">,</span>\n                 <span class=\"s1\">'Cell Temperature'</span><span class=\"p\">,</span> <span class=\"s1\">'POA Irradiance'</span><span class=\"p\">]]</span><span class=\"o\">.</span><span class=\"n\">to_string</span><span class=\"p\">())</span>\n\n<span class=\"c1\"># Calculate some IV curves if we are using CEC database.</span>\n<span class=\"k\">if</span> <span class=\"n\">is_cec_module</span><span class=\"p\">:</span>\n    <span class=\"n\">irradiance_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">200</span><span class=\"p\">,</span><span class=\"mi\">400</span><span class=\"p\">,</span><span class=\"mi\">600</span><span class=\"p\">,</span><span class=\"mi\">800</span><span class=\"p\">,</span><span class=\"mi\">1000</span><span class=\"p\">]</span>\n    <span class=\"n\">iv_curve</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">for</span> <span class=\"n\">e</span> <span class=\"ow\">in</span> <span class=\"n\">irradiance_list</span><span class=\"p\">:</span>\n        <span class=\"n\">ret</span> <span class=\"o\">=</span> <span class=\"n\">vocmax</span><span class=\"o\">.</span><span class=\"n\">calculate_iv_curve</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"mi\">25</span><span class=\"p\">,</span> <span class=\"n\">cec_parameters</span><span class=\"p\">)</span>\n        <span class=\"n\">ret</span><span class=\"p\">[</span><span class=\"s1\">'effective_irradiance'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">e</span>\n        <span class=\"n\">iv_curve</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">ret</span><span class=\"p\">)</span>\n\n\n<span class=\"c1\"># ------------------------------------------------------------------------------</span>\n<span class=\"c1\"># Plot results</span>\n<span class=\"c1\"># ------------------------------------------------------------------------------</span>\n\n<span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">plotting</span><span class=\"o\">.</span><span class=\"n\">register_matplotlib_converters</span><span class=\"p\">(</span><span class=\"n\">explicit</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">fig_width</span> <span class=\"o\">=</span> <span class=\"mi\">6</span>\n<span class=\"n\">fig_height</span> <span class=\"o\">=</span> <span class=\"mi\">4</span>\n\n<span class=\"n\">max_pos</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">argmax</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">[</span><span class=\"s1\">'v_oc'</span><span class=\"p\">]))</span>\n<span class=\"n\">plot_width</span> <span class=\"o\">=</span> <span class=\"mi\">300</span>\n\n<span class=\"c1\"># Plot Voc vs. time</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">figure</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"n\">figsize</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"n\">fig_width</span><span class=\"p\">,</span><span class=\"n\">fig_height</span><span class=\"p\">))</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">clf</span><span class=\"p\">()</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">[</span><span class=\"n\">max_pos</span><span class=\"o\">-</span><span class=\"n\">plot_width</span><span class=\"p\">:</span><span class=\"n\">max_pos</span><span class=\"o\">+</span><span class=\"n\">plot_width</span><span class=\"p\">],</span>\n         <span class=\"n\">df</span><span class=\"p\">[</span><span class=\"s1\">'v_oc'</span><span class=\"p\">][</span><span class=\"n\">max_pos</span><span class=\"o\">-</span><span class=\"n\">plot_width</span><span class=\"p\">:</span><span class=\"n\">max_pos</span><span class=\"o\">+</span><span class=\"n\">plot_width</span><span class=\"p\">])</span>\n<span class=\"n\">ylims</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">ylim</span><span class=\"p\">())</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">([</span> <span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">[</span><span class=\"n\">max_pos</span><span class=\"p\">],</span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">[</span><span class=\"n\">max_pos</span><span class=\"p\">]]</span> <span class=\"p\">,</span> <span class=\"n\">ylims</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">ylabel</span><span class=\"p\">(</span><span class=\"s1\">'Voc (V)'</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Plot Irradiance vs. time</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">figure</span><span class=\"p\">(</span><span class=\"mi\">11</span><span class=\"p\">,</span><span class=\"n\">figsize</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"n\">fig_width</span><span class=\"p\">,</span><span class=\"n\">fig_height</span><span class=\"p\">))</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">clf</span><span class=\"p\">()</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">[</span><span class=\"n\">max_pos</span><span class=\"o\">-</span><span class=\"n\">plot_width</span><span class=\"p\">:</span><span class=\"n\">max_pos</span><span class=\"o\">+</span><span class=\"n\">plot_width</span><span class=\"p\">],</span>\n         <span class=\"n\">df</span><span class=\"p\">[</span><span class=\"s1\">'effective_irradiance'</span><span class=\"p\">][</span><span class=\"n\">max_pos</span><span class=\"o\">-</span><span class=\"n\">plot_width</span><span class=\"p\">:</span><span class=\"n\">max_pos</span><span class=\"o\">+</span><span class=\"n\">plot_width</span><span class=\"p\">])</span>\n<span class=\"n\">ylims</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">ylim</span><span class=\"p\">())</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">([</span> <span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">[</span><span class=\"n\">max_pos</span><span class=\"p\">],</span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">[</span><span class=\"n\">max_pos</span><span class=\"p\">]]</span> <span class=\"p\">,</span> <span class=\"n\">ylims</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">ylabel</span><span class=\"p\">(</span><span class=\"s1\">'POA Irradiance'</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Plot Voc histogram</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">figure</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"n\">figsize</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"n\">fig_width</span><span class=\"p\">,</span><span class=\"n\">fig_height</span><span class=\"p\">))</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">clf</span><span class=\"p\">()</span>\n<span class=\"n\">voc_hist_x</span><span class=\"p\">,</span> <span class=\"n\">voc_hist_y</span> <span class=\"o\">=</span> <span class=\"n\">vocmax</span><span class=\"o\">.</span><span class=\"n\">make_voc_histogram</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">,</span><span class=\"n\">info</span><span class=\"p\">)</span>\n\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">voc_hist_x</span><span class=\"p\">,</span> <span class=\"n\">voc_hist_y</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">xlabel</span><span class=\"p\">(</span><span class=\"s1\">'Voc (Volts)'</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">ylabel</span><span class=\"p\">(</span><span class=\"s1\">'hrs/year'</span><span class=\"p\">)</span>\n\n<span class=\"k\">for</span> <span class=\"n\">key</span> <span class=\"ow\">in</span> <span class=\"n\">voc_summary</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">:</span>\n    <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">voc_summary</span><span class=\"p\">[</span><span class=\"s1\">'max_module_voltage'</span><span class=\"p\">][</span><span class=\"n\">key</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">]),</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">10</span><span class=\"p\">],</span>\n             <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"n\">key</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">legend</span><span class=\"p\">()</span>\n\n\n<span class=\"c1\"># Plot IV curve</span>\n<span class=\"k\">if</span> <span class=\"n\">is_cec_module</span><span class=\"p\">:</span>\n    <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">figure</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n    <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">clf</span><span class=\"p\">()</span>\n    <span class=\"k\">for</span> <span class=\"n\">j</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">iv_curve</span><span class=\"p\">)):</span>\n        <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">iv_curve</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">][</span><span class=\"s1\">'v'</span><span class=\"p\">],</span> <span class=\"n\">iv_curve</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">][</span><span class=\"s1\">'i'</span><span class=\"p\">])</span>\n\n    <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">xlabel</span><span class=\"p\">(</span><span class=\"s1\">'Voltage (V)'</span><span class=\"p\">)</span>\n    <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">ylabel</span><span class=\"p\">(</span><span class=\"s1\">'Current (A)'</span><span class=\"p\">)</span>\n    <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">grid</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Scatter plot of Temperature/Irradiance where Voc is highest.</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">figure</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">clf</span><span class=\"p\">()</span>\n<span class=\"n\">cax</span> <span class=\"o\">=</span> <span class=\"n\">df</span><span class=\"p\">[</span><span class=\"s1\">'v_oc'</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">percentile</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">[</span><span class=\"s1\">'v_oc'</span><span class=\"p\">],</span><span class=\"mf\">99.9</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">loc</span><span class=\"p\">[:,</span><span class=\"s1\">'effective_irradiance'</span><span class=\"p\">],</span> <span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">loc</span><span class=\"p\">[:,</span><span class=\"s1\">'temp_cell'</span><span class=\"p\">],</span><span class=\"s1\">'.'</span><span class=\"p\">,</span>\n         <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s1\">'all data'</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">loc</span><span class=\"p\">[</span><span class=\"n\">cax</span><span class=\"p\">,</span><span class=\"s1\">'effective_irradiance'</span><span class=\"p\">],</span> <span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">loc</span><span class=\"p\">[</span><span class=\"n\">cax</span><span class=\"p\">,</span><span class=\"s1\">'temp_cell'</span><span class=\"p\">],</span><span class=\"s1\">'.'</span><span class=\"p\">,</span>\n         <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s1\">'Voc&gt;P99.9'</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">xlabel</span><span class=\"p\">(</span><span class=\"s1\">'POA Irradiance (W/m^2)'</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">ylabel</span><span class=\"p\">(</span><span class=\"s1\">'Cell Temperature (C)'</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">legend</span><span class=\"p\">()</span>\n<span class=\"c1\"># plt.xlim([0,1000])</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n</pre>\n<h2>Set module parameters</h2>\n<p>Module parameters are set using a dictionary.</p>\n<pre><span class=\"n\">sapm_parameters</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'cells_in_series'</span><span class=\"p\">:</span> <span class=\"mi\">96</span><span class=\"p\">,</span>\n                   <span class=\"s1\">'n_diode'</span><span class=\"p\">:</span> <span class=\"mf\">1.2</span><span class=\"p\">,</span>\n                   <span class=\"s1\">'Voco'</span><span class=\"p\">:</span> <span class=\"mf\">69.7015</span><span class=\"p\">,</span>\n                   <span class=\"s1\">'Bvoco'</span><span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"mf\">0.159</span><span class=\"p\">,</span>\n                   <span class=\"s1\">'FD'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">}</span>\n</pre>\n<h2>Get weather data</h2>\n<p>The following code will download weather data from the <a href=\"https://nsrdb.nrel.gov/\" rel=\"nofollow\">national solar radiation database (NSRDB)</a> for the lat/lon coordinate.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">vocmax</span>\n<span class=\"c1\"># Define the lat, lon of the location and the year (this one is preloaded)</span>\n<span class=\"n\">lat</span><span class=\"p\">,</span> <span class=\"n\">lon</span> <span class=\"o\">=</span> <span class=\"mf\">37.876</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">122.247</span>\n\n<span class=\"c1\"># You must request an NSRDB api key from the link above</span>\n<span class=\"n\">api_key</span> <span class=\"o\">=</span> <span class=\"s1\">'apsdofijasdpafkjweo21u09u1082h8h2d2d'</span> <span class=\"c1\"># not a real key -- get your own!</span>\n\n<span class=\"n\">weather</span><span class=\"p\">,</span> <span class=\"n\">info</span> <span class=\"o\">=</span> <span class=\"n\">vocmax</span><span class=\"o\">.</span><span class=\"n\">get_weather_data</span><span class=\"p\">(</span><span class=\"n\">lat</span><span class=\"p\">,</span><span class=\"n\">lon</span><span class=\"p\">,</span><span class=\"n\">api_key</span><span class=\"o\">=</span><span class=\"n\">api_key</span><span class=\"p\">)</span>\n</pre>\n<p>Another possibility is to download data directly from the NSRDB map viewer.</p>\n<h2>Get NSRDB safety factor</h2>\n<p>The safety factor to use depends on location, here is how to look it up.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">vocmax</span>\n\n<span class=\"c1\"># Define the lat, long of the location</span>\n<span class=\"n\">lat</span><span class=\"p\">,</span> <span class=\"n\">lon</span> <span class=\"o\">=</span> <span class=\"mf\">37.876</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">91</span>\n\n<span class=\"c1\"># Find the max temperature error for the location</span>\n<span class=\"n\">temperature_error</span> <span class=\"o\">=</span> <span class=\"n\">vocmax</span><span class=\"o\">.</span><span class=\"n\">get_nsrdb_temperature_error</span><span class=\"p\">(</span><span class=\"n\">lat</span><span class=\"p\">,</span><span class=\"n\">lon</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Temperature coefficient of Voc divided by Voco in 1/C.</span>\n<span class=\"n\">temperature_coefficient_of_voc</span> <span class=\"o\">=</span> <span class=\"mf\">0.0035</span>\n\n<span class=\"c1\"># Find the safety factor</span>\n<span class=\"n\">safety_factor</span> <span class=\"o\">=</span> <span class=\"n\">temperature_error</span><span class=\"o\">*</span><span class=\"n\">temperature_coefficient_of_voc</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Safety Factor for NSRDB weather data: </span><span class=\"si\">{:.2%}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">safety_factor</span><span class=\"p\">))</span>\n</pre>\n<h2>Load ASHRAE data</h2>\n<p>Due to copyright, the ASHRAE design conditions filemust be purchased separately, directly from ASHRAE.\nThe weather data viewer DVD, version 6.0 is available at: <a href=\"https://www.techstreet.com/ashrae/standards/weather-data-viewer-dvd-version-6-0?ashrae_auth_token=12ce7b1d-2e2e-472b-b689-8065208f2e36&amp;product_id=1949790\" rel=\"nofollow\">https://www.techstreet.com/ashrae/standards/weather-data-viewer-dvd-version-6-0?ashrae_auth_token=12ce7b1d-2e2e-472b-b689-8065208f2e36&amp;product_id=1949790</a></p>\n<p>Within this DVD is a file titled \"2017DesignConditions_s.xlsx\" One way to load this file is to place it in the current directory.</p>\n<p>An exmaple of loading the ASHRAE dataset is</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">vocmax</span>\n<span class=\"n\">ashrae</span> <span class=\"o\">=</span> <span class=\"n\">vocmax</span><span class=\"o\">.</span><span class=\"n\">ashrae_get_design_conditions</span><span class=\"p\">()</span>\n</pre>\n<h1>Todo</h1>\n<ul>\n<li>Change the voc summary to be Vmax rather than Voc.</li>\n</ul>\n\n          </div>"}, "last_serial": 6447946, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "8d8f45ef094274d9aa18e22f35194159", "sha256": "18c3f231579c13d87779e53bb6f53cdcbfaa989c5a9dfe37747a5e0af8ce9d65"}, "downloads": -1, "filename": "vocmax-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "8d8f45ef094274d9aa18e22f35194159", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 12411, "upload_time": "2019-08-06T21:41:30", "upload_time_iso_8601": "2019-08-06T21:41:30.837261Z", "url": "https://files.pythonhosted.org/packages/b6/36/12de07d0bfce4469f5f007dc0344fb36843ae9ba933443f43b26d87b5a83/vocmax-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d3f4211ec6128797a0e1a1ca867a809c", "sha256": "5e707ceab6f40a34e23ded10fa1aa1b7510cfaf5704b83a54a0ce28bc4f782b5"}, "downloads": -1, "filename": "vocmax-0.0.1.tar.gz", "has_sig": false, "md5_digest": "d3f4211ec6128797a0e1a1ca867a809c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11726, "upload_time": "2019-08-06T21:41:33", "upload_time_iso_8601": "2019-08-06T21:41:33.620998Z", "url": "https://files.pythonhosted.org/packages/a6/a1/fedb526707c39e629cc7bc8fca36b3ebeccc9459ada57e63b94f146c3f52/vocmax-0.0.1.tar.gz", "yanked": false}], "0.0.10": [{"comment_text": "", "digests": {"md5": "31dff35acb0894705b5eb4b5f2afa09d", "sha256": "2a0bf287b024ecc448ac0fd4bed956e9f06179e47934bfb6e7810670995e9c90"}, "downloads": -1, "filename": "vocmax-0.0.10-py3-none-any.whl", "has_sig": false, "md5_digest": "31dff35acb0894705b5eb4b5f2afa09d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 336748, "upload_time": "2019-12-19T03:45:26", "upload_time_iso_8601": "2019-12-19T03:45:26.565469Z", "url": "https://files.pythonhosted.org/packages/89/9d/bb784baee6daa3f8b50ef491ca4121a5b6658ad3ebb0f8522ff5ebf9be06/vocmax-0.0.10-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c0cfb69bd64757d6b90e24667860093c", "sha256": "da69ca6f7e1bc6e5d69ebbae7395ceb3825eb16c40719dcd08b94df9f27748b1"}, "downloads": -1, "filename": "vocmax-0.0.10.tar.gz", "has_sig": false, "md5_digest": "c0cfb69bd64757d6b90e24667860093c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 99381, "upload_time": "2019-12-19T03:45:29", "upload_time_iso_8601": "2019-12-19T03:45:29.042988Z", "url": "https://files.pythonhosted.org/packages/99/ca/c8fe5648fb3bd9b98742031b1d4a3ee2d850920afb1490c78c03266e37e7/vocmax-0.0.10.tar.gz", "yanked": false}], "0.0.11": [{"comment_text": "", "digests": {"md5": "4c20cc6cbc0eaff2b3bd89f5bb7306e6", "sha256": "b0432fb250c41fd3875e0dc934a75d01bfef5dd8f99f77ef5d75bf6bf2d9437c"}, "downloads": -1, "filename": "vocmax-0.0.11-py3-none-any.whl", "has_sig": false, "md5_digest": "4c20cc6cbc0eaff2b3bd89f5bb7306e6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 337049, "upload_time": "2020-01-13T19:07:09", "upload_time_iso_8601": "2020-01-13T19:07:09.317336Z", "url": "https://files.pythonhosted.org/packages/56/88/2095bf2859e324a77b6e8663eca321d21c6afaa634e5f0c86fe3e3190ebf/vocmax-0.0.11-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "397c1da7feb8d39e270879f36d01ce31", "sha256": "c7538ca505ecdaf7aa89cc70f07a536770168b939a6cf0c39fefbb9fb8ffea39"}, "downloads": -1, "filename": "vocmax-0.0.11.tar.gz", "has_sig": false, "md5_digest": "397c1da7feb8d39e270879f36d01ce31", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 99969, "upload_time": "2020-01-13T19:07:12", "upload_time_iso_8601": "2020-01-13T19:07:12.371137Z", "url": "https://files.pythonhosted.org/packages/e8/17/6c1443589e9d2485b1e8d0a8bc4e9d23d6dc7de342d4783f19552a893188/vocmax-0.0.11.tar.gz", "yanked": false}], "0.0.12": [{"comment_text": "", "digests": {"md5": "ac4e34489effd182a3dc0c6f7bcf714c", "sha256": "42266391841f1360c279acfc5de6d6133c0522db652329f450d887b9dfad2519"}, "downloads": -1, "filename": "vocmax-0.0.12-py3-none-any.whl", "has_sig": false, "md5_digest": "ac4e34489effd182a3dc0c6f7bcf714c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 337074, "upload_time": "2020-01-13T23:43:49", "upload_time_iso_8601": "2020-01-13T23:43:49.228539Z", "url": "https://files.pythonhosted.org/packages/3c/f4/c8b5e80dec94fdc567b6588f4f51f0210c676e3b5038b821f64eaceb2524/vocmax-0.0.12-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "39901a0fe4f9c9d6f891f8112530109b", "sha256": "7f53d8b7af6f39fe5d988e6ee9549f0812f075b2dd5e3d93f569a259612783aa"}, "downloads": -1, "filename": "vocmax-0.0.12.tar.gz", "has_sig": false, "md5_digest": "39901a0fe4f9c9d6f891f8112530109b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 99982, "upload_time": "2020-01-13T23:43:55", "upload_time_iso_8601": "2020-01-13T23:43:55.922431Z", "url": "https://files.pythonhosted.org/packages/a0/c9/bcddce9fc2f1d0f38366e70083ba234b3831d932662dc2ab493e5b72e42b/vocmax-0.0.12.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "42750394fdffd145912e4771618dee3d", "sha256": "126d45f507ae065c71acded77a0cfae971198bab0a56fa0a33678f7ea94144c2"}, "downloads": -1, "filename": "vocmax-0.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "42750394fdffd145912e4771618dee3d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 27797, "upload_time": "2019-10-02T19:30:41", "upload_time_iso_8601": "2019-10-02T19:30:41.759890Z", "url": "https://files.pythonhosted.org/packages/75/72/31c6e4ed20f0979cdcaae48fb8910d7e5289ce7e3f3e11582532ab1204e3/vocmax-0.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3b8f9b65ee0a70b25499dcc4be290c11", "sha256": "2a67734f8bab90ac549948b1356e6905cba78c32f8db99f3d2deb2606aa67c72"}, "downloads": -1, "filename": "vocmax-0.0.4.tar.gz", "has_sig": false, "md5_digest": "3b8f9b65ee0a70b25499dcc4be290c11", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29084, "upload_time": "2019-10-02T19:30:43", "upload_time_iso_8601": "2019-10-02T19:30:43.851168Z", "url": "https://files.pythonhosted.org/packages/93/d6/a0c164be8f8eb76d6334a9b036785d58b9274f41fe8598e94a9fd0684d98/vocmax-0.0.4.tar.gz", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "98540bd5fe24448dda2423e6849dc343", "sha256": "8548fae9175c4f2eafc1f88ae771edf8abcae769f45f4f2684437082886405a4"}, "downloads": -1, "filename": "vocmax-0.0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "98540bd5fe24448dda2423e6849dc343", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 27812, "upload_time": "2019-10-02T21:29:46", "upload_time_iso_8601": "2019-10-02T21:29:46.624235Z", "url": "https://files.pythonhosted.org/packages/2d/5d/3197bcb48dd4a4cb706ebe7a7b8bbc5f26fc5311c5fc94bf18963768566d/vocmax-0.0.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c8560af6a3a988edc3c07ce7d571de95", "sha256": "c59b620dd53342e2208dd4f94a9018d2f77ae986cbe3748cd4e89bc29fe5c8c6"}, "downloads": -1, "filename": "vocmax-0.0.5.tar.gz", "has_sig": false, "md5_digest": "c8560af6a3a988edc3c07ce7d571de95", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29103, "upload_time": "2019-10-02T21:29:48", "upload_time_iso_8601": "2019-10-02T21:29:48.307137Z", "url": "https://files.pythonhosted.org/packages/95/15/4ef96e8a22bd91d4502750f4be47505f2ee746e06b9f2086c0b0c3c42015/vocmax-0.0.5.tar.gz", "yanked": false}], "0.0.6": [{"comment_text": "", "digests": {"md5": "966fc4dfe0775e4eae77b93fa886e41f", "sha256": "ab74353fc27df7b21dd7e8e28ce6eeb4be91a7a6a581c4220dea6b3bdb289900"}, "downloads": -1, "filename": "vocmax-0.0.6-py3-none-any.whl", "has_sig": false, "md5_digest": "966fc4dfe0775e4eae77b93fa886e41f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 167183, "upload_time": "2019-10-02T22:57:40", "upload_time_iso_8601": "2019-10-02T22:57:40.809690Z", "url": "https://files.pythonhosted.org/packages/16/87/6ab1338330863c86bef31b9d0e3b904bca2bae1c0d139a7494ae07442190/vocmax-0.0.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "93c09b8fdc7a3fc075e6dc84beb844a0", "sha256": "b0177ea243c6943cb444b17a70e7a15e7db25f60c087010f810bfe486b92aba7"}, "downloads": -1, "filename": "vocmax-0.0.6.tar.gz", "has_sig": false, "md5_digest": "93c09b8fdc7a3fc075e6dc84beb844a0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 171887, "upload_time": "2019-10-02T22:57:45", "upload_time_iso_8601": "2019-10-02T22:57:45.870479Z", "url": "https://files.pythonhosted.org/packages/8b/05/8319e90e0ec9c5380a3569735867762785b7f4e23c320e43601c72b57f4e/vocmax-0.0.6.tar.gz", "yanked": false}], "0.0.8": [{"comment_text": "", "digests": {"md5": "e89c0766eb1dff1fa3d3d9f4984f0a17", "sha256": "a66a511767d7a363e2118c8a4b9ddc6f055bc3ae5565023f444054ac4544a39f"}, "downloads": -1, "filename": "vocmax-0.0.8-py3-none-any.whl", "has_sig": false, "md5_digest": "e89c0766eb1dff1fa3d3d9f4984f0a17", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 272729, "upload_time": "2019-12-13T16:49:15", "upload_time_iso_8601": "2019-12-13T16:49:15.109666Z", "url": "https://files.pythonhosted.org/packages/06/76/296966007575b4fabedcb47057453a79759c9ff19387fc15f04658465de3/vocmax-0.0.8-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "78bd35d6e1e605e6aa29db4678498a3d", "sha256": "ebf583dd0d3af8f5ef9cace627c6ff562020baaf654da58c9c66a507cf3bc0fb"}, "downloads": -1, "filename": "vocmax-0.0.8.tar.gz", "has_sig": false, "md5_digest": "78bd35d6e1e605e6aa29db4678498a3d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 278623, "upload_time": "2019-12-13T16:49:18", "upload_time_iso_8601": "2019-12-13T16:49:18.390782Z", "url": "https://files.pythonhosted.org/packages/6d/e6/cc77518cb88c62beafd4d7df28b91818eeaac6a8e43759e2e96a10d67b04/vocmax-0.0.8.tar.gz", "yanked": false}], "0.0.9": [{"comment_text": "", "digests": {"md5": "cd16f62418b5fe1f5d4cf6a134fc1faa", "sha256": "5830ab65d0403c23ac7ec9ee561222653c96313e488c092c2ee65ca98082d63b"}, "downloads": -1, "filename": "vocmax-0.0.9-py3-none-any.whl", "has_sig": false, "md5_digest": "cd16f62418b5fe1f5d4cf6a134fc1faa", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 336497, "upload_time": "2019-12-19T03:13:12", "upload_time_iso_8601": "2019-12-19T03:13:12.473011Z", "url": "https://files.pythonhosted.org/packages/ce/bb/a71137540a78400e3981b3b4aff882e0f6cdd389729448c7c09a4b03f155/vocmax-0.0.9-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "71229747b8f7d991cb5caad6c36188b8", "sha256": "f97da6d02fb946c409d4abf67244b9b7bfefad0bf58a1a2fb5bb5566db103c13"}, "downloads": -1, "filename": "vocmax-0.0.9.tar.gz", "has_sig": false, "md5_digest": "71229747b8f7d991cb5caad6c36188b8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 99087, "upload_time": "2019-12-19T03:13:14", "upload_time_iso_8601": "2019-12-19T03:13:14.952756Z", "url": "https://files.pythonhosted.org/packages/dd/f7/3ced6977de6cf98c80beac875bb2def7325237ccc148be12f6858b9a20e3/vocmax-0.0.9.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ac4e34489effd182a3dc0c6f7bcf714c", "sha256": "42266391841f1360c279acfc5de6d6133c0522db652329f450d887b9dfad2519"}, "downloads": -1, "filename": "vocmax-0.0.12-py3-none-any.whl", "has_sig": false, "md5_digest": "ac4e34489effd182a3dc0c6f7bcf714c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 337074, "upload_time": "2020-01-13T23:43:49", "upload_time_iso_8601": "2020-01-13T23:43:49.228539Z", "url": "https://files.pythonhosted.org/packages/3c/f4/c8b5e80dec94fdc567b6588f4f51f0210c676e3b5038b821f64eaceb2524/vocmax-0.0.12-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "39901a0fe4f9c9d6f891f8112530109b", "sha256": "7f53d8b7af6f39fe5d988e6ee9549f0812f075b2dd5e3d93f569a259612783aa"}, "downloads": -1, "filename": "vocmax-0.0.12.tar.gz", "has_sig": false, "md5_digest": "39901a0fe4f9c9d6f891f8112530109b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 99982, "upload_time": "2020-01-13T23:43:55", "upload_time_iso_8601": "2020-01-13T23:43:55.922431Z", "url": "https://files.pythonhosted.org/packages/a0/c9/bcddce9fc2f1d0f38366e70083ba234b3831d932662dc2ab493e5b72e42b/vocmax-0.0.12.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:34:36 2020"}