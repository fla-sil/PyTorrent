{"info": {"author": "", "author_email": "", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "Programming Language :: Python", "Topic :: System :: Emulators"], "description": "# amitools - various AmigaOS tools for other platforms\n\n- written by Christian Vogelgsang <chris@vogelgsang.org>\n- under the GNU Public License V2\n\n## Introduction\n\n`amitools` is a collection of Python 3 tools that I've written to work with\n*Amiga OS* binaries and files on Mac OS X and all other *nix-like platforms\nsupporting Python. Windows might work as\nwell, but is heavily untested. However, patches are welcome.\n\nI focus with my tools on classic Amiga setups, i.e. a 680x0 based system with\nAmiga OS 1.x - 3.x running on it. However, this is an open project, so you can\nprovide other Amiga support, too.\n\nThe tools are mostly developer-oriented, so a background in Amiga programming\nwill be very helpful.\n\n## Prerequisites\n\n- Python >= ```3.4```\n- pip\n\n### Optional Packages\n\n- [lhafile - FS Edition][1]: required to use ```.lha``` file scanner\n- [cython][7]: (version >= **0.25**) required to rebuild the native module\n\n### Install pip\n\nFirst make sure to have the Python package installer ```pip```:\n\n#### macOS\n\nOn macOS you have multiple ways of installing ```pip```:\n\n#### System Python\n\n```bash\nsudo easy_install pip\n```\n\n#### Homebrew Package Manager\n\nWith the [Homebrew][3] package manager (```pip``` is included in the ```python3``` package):\n\n```bash\nbrew install python\n```\n\n#### Linux/Ubuntu\n\nOn Linux Ubuntu use the provided packages ```python-pip```\n\n```bash\nsudo apt-get install python-pip\n```\n\n#### Centos\n\nTo get pip run:\n\n```bash\ncurl \"https://bootstrap.pypa.io/get-pip.py\" -o \"get-pip.py\"\npython get-pip.py\n```\n\n#### Windows with Visual Studio\n\n- Install the latest native Windows Python >= 3.4 from [python.org][6]\n- There is a special Edition for Visual Studio available that allows\n  to compile Python 3.x modules: Install [VCpython3][5]\n- Open the Command Shell of the Compiler and run\n\n```bash\ncd C:\\Python3x\\Scripts\npip install amitools\n```\n\n#### Windows with MSYS2\n\n- (I use the mingw gcc compiler here to build the extension)\n- On Windows with [MSYS2][4] (use x86_64 version if possible):\n  - Install with exe installer\n  - Initial update is done with: (Open shell first)\n\n```bash\npacman -Sy\npacman --needed -S bash pacman msys2-runtime\n```\n\n- Now close shell and re-open a new dev shell (```MinGW-w64 Win64 Shell```)\n\n```bash\npacman -Su\npacman -S mingw-w64-x86_64-python2-pip mingw-w64-x86_64-gcc git make\n```\n\n[1]: https://github.com/FrodeSolheim/lhafile\n[2]: https://www.macports.org\n[3]: https://brew.sh\n[4]: https://github.com/msys2/msys2/wiki\n[5]: https://www.microsoft.com/en-gb/download/details.aspx?id=44266\n[6]: https://www.python.org\n[7]: https://cython.org\n\n## Installation\n\n### The Easy Way for Users\n\n```bash\npip install amitools\n```\n\nNote:\n\n- on Linux/macOS may use ``sudo`` to install for all users\n- requires a host C compiler to compile the extension.\n\n### Developers\n\n- Follow this route if you want to hack around with the amitools codebase\n- Clone the Git repo: [amitools@git](https://github.com/cnvogelg/amitools)\n- Ensure to have Cython (version >= **0.25**) installed:\n\n```bash\nsudo pip install cython\n```\n\nYou have multiple variants to install the tools with Python's `setuptools`:\n\n- **Global Install** is available for all users of your system and needs root privileges\n\n```bash\nsudo python setup.py install\n```\n\n- **User Install** is available for your user only but does not require special privileges\n\n```bash\npython setup.py install --user\n```\n\n- **Developer Setup** only links this code into your installation and allows\n   you to change/develop the code and test it immediately. (I prefer user install here)\n\n```bash\npython setup.py develop --user\n```\n\n- **Run In Place** allows you to run the binaries directly from the `bin` directory\n   without any installation. You need `make` only to build the native library\n   of vamos:\n\n```bash\npython setup.py build_ext -i\n```\n\nor if you have installed `GNU make` simply use:\n\n```bash\nmake\n```\n\n## Contents\n\nThe new Documentation of `amitools` is hosted on [readthedocs][8]\n\n### Tools\n\n- [vamos](docs/vamos.md) **V)irtual AM)iga OS**\n\n  vamos allows you to run command line (CLI) Amiga programs on your host\n  Mac or PC. vamos is an API level Amiga OS Emulator that replaces exec\n  and dos calls with its own implementation and maps all file access to\n  your local file system.\n\n- [xdftool][9]\n\n  Create and modify ADF or HDF disk image files.\n\n- [xdfscan][10]\n\n  Scan directory trees for ADF or HDF disk image files and verify the contents.\n\n- [rdbtool][11]\n\n  Create or modify disk images with Rigid Disk Block (RDB)\n\n- [romtool][12]\n\n  A tool to inspect, dissect, and build Amiga Kickstart ROM images to be\n  used with emulators, run with soft kickers or burned into flash ROMs.\n\n- hunktool\n\n  The hunktool uses amitools' hunk library to load a hunk-based amiga\n  binary. Currently, its main purpose is to display the contents of the\n  files in various formats.\n\n  You can load hunk-based binaries, libraries, and object files. Even\n  overlayed binary files are supporte.\n\n- typetool\n\n  This little tool is a companion for vamos. It allows you to dump and get\n  further information on the API C structure of AmigaOS used in vamos.\n\n- fdtool\n\n  This tool reads the fd (function description) files Commodore supplied for\n  all of their libraries and dumps their contents in different formats\n  including a code structure used in vamos.\n\n  You can query functions and find their jump table offset.\n\n[8]: https://amitools.readthedocs.io/\n[9]: https://amitools.readthedocs.io/en/latest/tools/xdftool.html\n[10]: https://amitools.readthedocs.io/en/latest/tools/xdfscan.html\n[11]: https://amitools.readthedocs.io/en/latest/tools/rdbtool.html\n[12]: https://amitools.readthedocs.io/en/latest/tools/romtool.html\n\n### Python Libraries\n\n- Hunk library ```amitools.binfmt.hunk```\n\n  This library allows to read Amiga OS loadSeg()able binaries and represent\n  them in a python structure. You could query all items found there,\n  retrieve the code, data, and bss segments and even relocate them to target\n  addresses\n\n- ELF library ```amitools.binfmt.elf```\n\n  This library allows to read a subset of the ELF format mainly used in\n  AROS m68k.\n\n- .fd File Parser ```amitools.fd```\n\n  Parse function descriptions shipped by Commodore to describe the Amiga APIs\n\n- OFS and FFS File System Tools ```amitools.fs```\n\n  Create or modify Amiga's OFS and FFS file system structures\n\n- File Scanners ```amitools.scan```\n\n  I've written some scanners that walk through file trees and retrieve the\n  file data for further processing. I support file trees on the file system,\n  in lha archives or in adf/hdf disk images", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/cnvogelg/amitools", "keywords": "", "license": "License :: OSI Approved :: GNU General Public License v2 (GPLv2)", "maintainer": "Christian Vogelgsang", "maintainer_email": "chris@vogelgsang.org", "name": "amitools", "package_url": "https://pypi.org/project/amitools/", "platform": "", "project_url": "https://pypi.org/project/amitools/", "project_urls": {"Homepage": "http://github.com/cnvogelg/amitools"}, "release_url": "https://pypi.org/project/amitools/0.4.0/", "requires_dist": null, "requires_python": "~=3.4", "summary": "A package to support development with classic Amiga m68k systems", "version": "0.4.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>amitools - various AmigaOS tools for other platforms</h1>\n<ul>\n<li>written by Christian Vogelgsang <a href=\"mailto:chris@vogelgsang.org\">chris@vogelgsang.org</a></li>\n<li>under the GNU Public License V2</li>\n</ul>\n<h2>Introduction</h2>\n<p><code>amitools</code> is a collection of Python 3 tools that I've written to work with\n<em>Amiga OS</em> binaries and files on Mac OS X and all other *nix-like platforms\nsupporting Python. Windows might work as\nwell, but is heavily untested. However, patches are welcome.</p>\n<p>I focus with my tools on classic Amiga setups, i.e. a 680x0 based system with\nAmiga OS 1.x - 3.x running on it. However, this is an open project, so you can\nprovide other Amiga support, too.</p>\n<p>The tools are mostly developer-oriented, so a background in Amiga programming\nwill be very helpful.</p>\n<h2>Prerequisites</h2>\n<ul>\n<li>Python &gt;= <code>3.4</code></li>\n<li>pip</li>\n</ul>\n<h3>Optional Packages</h3>\n<ul>\n<li><a href=\"https://github.com/FrodeSolheim/lhafile\" rel=\"nofollow\">lhafile - FS Edition</a>: required to use <code>.lha</code> file scanner</li>\n<li><a href=\"https://cython.org\" rel=\"nofollow\">cython</a>: (version &gt;= <strong>0.25</strong>) required to rebuild the native module</li>\n</ul>\n<h3>Install pip</h3>\n<p>First make sure to have the Python package installer <code>pip</code>:</p>\n<h4>macOS</h4>\n<p>On macOS you have multiple ways of installing <code>pip</code>:</p>\n<h4>System Python</h4>\n<pre>sudo easy_install pip\n</pre>\n<h4>Homebrew Package Manager</h4>\n<p>With the <a href=\"https://brew.sh\" rel=\"nofollow\">Homebrew</a> package manager (<code>pip</code> is included in the <code>python3</code> package):</p>\n<pre>brew install python\n</pre>\n<h4>Linux/Ubuntu</h4>\n<p>On Linux Ubuntu use the provided packages <code>python-pip</code></p>\n<pre>sudo apt-get install python-pip\n</pre>\n<h4>Centos</h4>\n<p>To get pip run:</p>\n<pre>curl <span class=\"s2\">\"https://bootstrap.pypa.io/get-pip.py\"</span> -o <span class=\"s2\">\"get-pip.py\"</span>\npython get-pip.py\n</pre>\n<h4>Windows with Visual Studio</h4>\n<ul>\n<li>Install the latest native Windows Python &gt;= 3.4 from <a href=\"https://www.python.org\" rel=\"nofollow\">python.org</a></li>\n<li>There is a special Edition for Visual Studio available that allows\nto compile Python 3.x modules: Install <a href=\"https://www.microsoft.com/en-gb/download/details.aspx?id=44266\" rel=\"nofollow\">VCpython3</a></li>\n<li>Open the Command Shell of the Compiler and run</li>\n</ul>\n<pre><span class=\"nb\">cd</span> C:<span class=\"se\">\\P</span>ython3x<span class=\"se\">\\S</span>cripts\npip install amitools\n</pre>\n<h4>Windows with MSYS2</h4>\n<ul>\n<li>(I use the mingw gcc compiler here to build the extension)</li>\n<li>On Windows with <a href=\"https://github.com/msys2/msys2/wiki\" rel=\"nofollow\">MSYS2</a> (use x86_64 version if possible):\n<ul>\n<li>Install with exe installer</li>\n<li>Initial update is done with: (Open shell first)</li>\n</ul>\n</li>\n</ul>\n<pre>pacman -Sy\npacman --needed -S bash pacman msys2-runtime\n</pre>\n<ul>\n<li>Now close shell and re-open a new dev shell (<code>MinGW-w64 Win64 Shell</code>)</li>\n</ul>\n<pre>pacman -Su\npacman -S mingw-w64-x86_64-python2-pip mingw-w64-x86_64-gcc git make\n</pre>\n<h2>Installation</h2>\n<h3>The Easy Way for Users</h3>\n<pre>pip install amitools\n</pre>\n<p>Note:</p>\n<ul>\n<li>on Linux/macOS may use <code>sudo</code> to install for all users</li>\n<li>requires a host C compiler to compile the extension.</li>\n</ul>\n<h3>Developers</h3>\n<ul>\n<li>Follow this route if you want to hack around with the amitools codebase</li>\n<li>Clone the Git repo: <a href=\"https://github.com/cnvogelg/amitools\" rel=\"nofollow\">amitools@git</a></li>\n<li>Ensure to have Cython (version &gt;= <strong>0.25</strong>) installed:</li>\n</ul>\n<pre>sudo pip install cython\n</pre>\n<p>You have multiple variants to install the tools with Python's <code>setuptools</code>:</p>\n<ul>\n<li><strong>Global Install</strong> is available for all users of your system and needs root privileges</li>\n</ul>\n<pre>sudo python setup.py install\n</pre>\n<ul>\n<li><strong>User Install</strong> is available for your user only but does not require special privileges</li>\n</ul>\n<pre>python setup.py install --user\n</pre>\n<ul>\n<li><strong>Developer Setup</strong> only links this code into your installation and allows\nyou to change/develop the code and test it immediately. (I prefer user install here)</li>\n</ul>\n<pre>python setup.py develop --user\n</pre>\n<ul>\n<li><strong>Run In Place</strong> allows you to run the binaries directly from the <code>bin</code> directory\nwithout any installation. You need <code>make</code> only to build the native library\nof vamos:</li>\n</ul>\n<pre>python setup.py build_ext -i\n</pre>\n<p>or if you have installed <code>GNU make</code> simply use:</p>\n<pre>make\n</pre>\n<h2>Contents</h2>\n<p>The new Documentation of <code>amitools</code> is hosted on <a href=\"https://amitools.readthedocs.io/\" rel=\"nofollow\">readthedocs</a></p>\n<h3>Tools</h3>\n<ul>\n<li>\n<p><a href=\"docs/vamos.md\" rel=\"nofollow\">vamos</a> <strong>V)irtual AM)iga OS</strong></p>\n<p>vamos allows you to run command line (CLI) Amiga programs on your host\nMac or PC. vamos is an API level Amiga OS Emulator that replaces exec\nand dos calls with its own implementation and maps all file access to\nyour local file system.</p>\n</li>\n<li>\n<p><a href=\"https://amitools.readthedocs.io/en/latest/tools/xdftool.html\" rel=\"nofollow\">xdftool</a></p>\n<p>Create and modify ADF or HDF disk image files.</p>\n</li>\n<li>\n<p><a href=\"https://amitools.readthedocs.io/en/latest/tools/xdfscan.html\" rel=\"nofollow\">xdfscan</a></p>\n<p>Scan directory trees for ADF or HDF disk image files and verify the contents.</p>\n</li>\n<li>\n<p><a href=\"https://amitools.readthedocs.io/en/latest/tools/rdbtool.html\" rel=\"nofollow\">rdbtool</a></p>\n<p>Create or modify disk images with Rigid Disk Block (RDB)</p>\n</li>\n<li>\n<p><a href=\"https://amitools.readthedocs.io/en/latest/tools/romtool.html\" rel=\"nofollow\">romtool</a></p>\n<p>A tool to inspect, dissect, and build Amiga Kickstart ROM images to be\nused with emulators, run with soft kickers or burned into flash ROMs.</p>\n</li>\n<li>\n<p>hunktool</p>\n<p>The hunktool uses amitools' hunk library to load a hunk-based amiga\nbinary. Currently, its main purpose is to display the contents of the\nfiles in various formats.</p>\n<p>You can load hunk-based binaries, libraries, and object files. Even\noverlayed binary files are supporte.</p>\n</li>\n<li>\n<p>typetool</p>\n<p>This little tool is a companion for vamos. It allows you to dump and get\nfurther information on the API C structure of AmigaOS used in vamos.</p>\n</li>\n<li>\n<p>fdtool</p>\n<p>This tool reads the fd (function description) files Commodore supplied for\nall of their libraries and dumps their contents in different formats\nincluding a code structure used in vamos.</p>\n<p>You can query functions and find their jump table offset.</p>\n</li>\n</ul>\n<h3>Python Libraries</h3>\n<ul>\n<li>\n<p>Hunk library <code>amitools.binfmt.hunk</code></p>\n<p>This library allows to read Amiga OS loadSeg()able binaries and represent\nthem in a python structure. You could query all items found there,\nretrieve the code, data, and bss segments and even relocate them to target\naddresses</p>\n</li>\n<li>\n<p>ELF library <code>amitools.binfmt.elf</code></p>\n<p>This library allows to read a subset of the ELF format mainly used in\nAROS m68k.</p>\n</li>\n<li>\n<p>.fd File Parser <code>amitools.fd</code></p>\n<p>Parse function descriptions shipped by Commodore to describe the Amiga APIs</p>\n</li>\n<li>\n<p>OFS and FFS File System Tools <code>amitools.fs</code></p>\n<p>Create or modify Amiga's OFS and FFS file system structures</p>\n</li>\n<li>\n<p>File Scanners <code>amitools.scan</code></p>\n<p>I've written some scanners that walk through file trees and retrieve the\nfile data for further processing. I support file trees on the file system,\nin lha archives or in adf/hdf disk images</p>\n</li>\n</ul>\n\n          </div>"}, "last_serial": 6366578, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "55552f2885390b39eb07a055c8a0fa31", "sha256": "09a1f65b159043a08d34f3ccd57e8851849605a17648703c0f83649c751defd4"}, "downloads": -1, "filename": "amitools-0.1.0.tar.gz", "has_sig": false, "md5_digest": "55552f2885390b39eb07a055c8a0fa31", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 478293, "upload_time": "2017-08-03T18:29:55", "upload_time_iso_8601": "2017-08-03T18:29:55.725274Z", "url": "https://files.pythonhosted.org/packages/3b/f5/c486d4c4540e1f01fb1dd93c372fbd2c110b06207cdd3868fa64a9022f23/amitools-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "6b2df097f87d2f899675edc1e8fc1403", "sha256": "2774593b391ad56bdcb66f7d744a3ef6b1e45add8b50d5951ad9f6fdda4e96de"}, "downloads": -1, "filename": "amitools-0.2.0.zip", "has_sig": false, "md5_digest": "6b2df097f87d2f899675edc1e8fc1403", "packagetype": "sdist", "python_version": "source", "requires_python": "~=2.7", "size": 895666, "upload_time": "2019-06-27T18:39:12", "upload_time_iso_8601": "2019-06-27T18:39:12.239614Z", "url": "https://files.pythonhosted.org/packages/ed/9e/57df8246280a9bd310a1705d76ba421f83620a0bd01c025fce4c947c39fc/amitools-0.2.0.zip", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "cff23b4df3f25184ce1b07ff5a89844e", "sha256": "b976d27b13e32ec2cdf2d99aa29d2be1fa5609cfc9ce33beca4d13c286d451c9"}, "downloads": -1, "filename": "amitools-0.3.0.zip", "has_sig": false, "md5_digest": "cff23b4df3f25184ce1b07ff5a89844e", "packagetype": "sdist", "python_version": "source", "requires_python": "~=2.7", "size": 897952, "upload_time": "2019-11-01T19:57:04", "upload_time_iso_8601": "2019-11-01T19:57:04.918781Z", "url": "https://files.pythonhosted.org/packages/59/bf/8ff56c37fbafa1969e950e96060c2f5fd993428282e2da1c7d265736b8d8/amitools-0.3.0.zip", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "41b31a771c0ba6e447c60a570327980a", "sha256": "420c7304e6927b0f38788bfac1754d15873cafd975778077f7d963f320f8b12b"}, "downloads": -1, "filename": "amitools-0.4.0.zip", "has_sig": false, "md5_digest": "41b31a771c0ba6e447c60a570327980a", "packagetype": "sdist", "python_version": "source", "requires_python": "~=3.4", "size": 984929, "upload_time": "2019-12-27T19:55:03", "upload_time_iso_8601": "2019-12-27T19:55:03.052654Z", "url": "https://files.pythonhosted.org/packages/1c/1a/64e5d06188a993ec56e088a6e02f52a5d3033d74f084aff2e4c5f488c4c5/amitools-0.4.0.zip", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "41b31a771c0ba6e447c60a570327980a", "sha256": "420c7304e6927b0f38788bfac1754d15873cafd975778077f7d963f320f8b12b"}, "downloads": -1, "filename": "amitools-0.4.0.zip", "has_sig": false, "md5_digest": "41b31a771c0ba6e447c60a570327980a", "packagetype": "sdist", "python_version": "source", "requires_python": "~=3.4", "size": 984929, "upload_time": "2019-12-27T19:55:03", "upload_time_iso_8601": "2019-12-27T19:55:03.052654Z", "url": "https://files.pythonhosted.org/packages/1c/1a/64e5d06188a993ec56e088a6e02f52a5d3033d74f084aff2e4c5f488c4c5/amitools-0.4.0.zip", "yanked": false}], "timestamp": "Thu May  7 18:18:21 2020"}