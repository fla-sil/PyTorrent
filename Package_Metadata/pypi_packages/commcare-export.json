{"info": {"author": "Dimagi", "author_email": "information@dimagi.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Console", "Intended Audience :: Developers", "Intended Audience :: End Users/Desktop", "Intended Audience :: Healthcare Industry", "Intended Audience :: Science/Research", "Intended Audience :: System Administrators", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3", "Topic :: Database", "Topic :: Software Development :: Interpreters", "Topic :: System :: Archiving", "Topic :: System :: Distributed Computing"], "description": "CommCare Export\n===============\n\nhttps://github.com/dimagi/commcare-export\n\n|Build Status| |Test coverage| |PyPI version|\n\nA command-line tool (and Python library) to generate customized exports from the `CommCareHQ <https://www.commcarehq.org>`__ `REST\nAPI <https://wiki.commcarehq.org/display/commcarepublic/Data+APIs>`__.\n\n-  `User documentation <https://wiki.commcarehq.org/display/commcarepublic/CommCare+Data+Export+Tool>`__\n-  `Changelog <https://github.com/dimagi/commcare-export/releases>`__\n\nInstallation & Quick Start\n--------------------------\n\n0a. Install Python and ``pip``. This tool is `tested with Python 2.7, and 3.3 <https://travis-ci.org/dimagi/commcare-export>`__.\n\n0b. Sign up for CommCareHQ at https://www.commcarehq.org/register/user if you have not already.\n\n1. Install CommCare Export via ``pip``\n\n::\n\n    $ pip install commcare-export\n\n2. Visit the CommCareHQ Exchange and add the `Simple CommCare Demo/Tutorial\" <https://www.commcarehq.org/exchange/611422532c7ab89d22cca54d57ae89aa/info/>`__ app\nto a new project space.\n\n3. Visit the Release Manager, make a build, click the star to release it.\n\n4. Visit CloudCare and fill out a bunch of forms.\n\n5. Try out the example queries in the ``examples/`` directory, providing your project name on the command line:\n\n::\n\n    $ commcare-export \\\n         --query examples/demo-registration.xlsx \\\n         --project YOUR_PROJECT \\\n         --output-format markdown\n\n    $ commcare-export \\\n         --query examples/demo-registration.json \\\n         --project YOUR_PROJECT \\\n         --output-format markdown\n\n    $ commcare-export \\\n         --query examples/demo-deliveries.xlsx \\\n         --project YOUR_PROJECT \\\n         --output-format markdown\n\n    $ commcare-export \\\n         --query examples/demo-deliveries.json \\\n         --project YOUR_PROJECT \\\n         --output-format markdown\n\nYou'll see the tables printed out. Change to ``--output-format sql --output URL_TO_YOUR_DB --since DATE`` to sync all forms submitted since that date.\n\nAll examples are present in Excel and also equivalent JSON.\n\nCommand-line Usage\n------------------\n\nThe basic usage of the command-line tool is with a saved Excel or JSON query (see how to write these, below)\n\n::\n\n    $ commcare-export --commcare-hq <URL or alias like \"local\" or \"prod\"> \\\n                      --username <username> \\\n                      --project <project> \\\n                      --version <api version, defaults to latest known> \\\n                      --query <excel file, json file, or raw json> \\\n                      --output-format <csv, xls, xlsx, json, markdown, sql> \\\n                      --output <file name or SQL database URL>\n\nSee ``commcare-export --help`` for the full list of options.\n\nThere are example query files for the CommCare Demo App (available on the CommCareHq Exchange) in the ``examples/`` directory.\n\n``--output``\n\nCommCare Export uses SQLAlachemy's `create\\_engine <http://docs.sqlalchemy.org/en/latest/core/engines.html>`__ to establish a database connection. This is based\noff of the `RFC-1738 <https://www.ietf.org/rfc/rfc1738.txt>`__ protocol. Some common examples:\n\n::\n\n    # Postgres\n    postgresql+psycopg2://scott:tiger@localhost/mydatabase\n\n    # MySQL\n    mysql+pymysql://scott:tiger@localhost/mydatabase\n\n    # MSSQL\n    mssql+pyodbc://scott:tiger@localhost/mydatabases?driver=ODBC+Driver+17+for+SQL+Server\n\nExcel Queries\n-------------\n\nAn excel query is any ``.xlsx`` workbook. Each sheet in the workbook represents one table you wish to create. There are two grouping of columns to configure the\ntable:\n\n-  **Data Source**: Set this to ``form`` to export form data, or ``case`` for case data.\n-  **Filter Name** / *Filter Value*: These columns are paired up to filter the input cases or forms.\n-  **Field**: The destination in your SQL database for the value.\n-  **Source Field**: The particular field from the form you wish to extract. This can be any JSON path.\n\nJSON Queries\n------------\n\nJSON queries are a described in the table below. You build a JSON object that represents the query you have in mind. A good way to get started is to work from\nthe examples, or you could make an excel query and run the tool with ``--dump-query`` to see the resulting JSON query.\n\nPython Library Usage\n--------------------\n\nAs a library, the various ``commcare_export`` modules make it easy to\n\n-  Interact with the CommCareHQ REST API\n-  Execute \"Minilinq\" queries against the API (a very simple query language, described below)\n-  Load and save JSON representations of Minilinq queries\n-  Compile Excel configurations to Minilinq queries\n\nTo directly access the CommCareHq REST API:\n\n.. code:: python\n\n    >>> import getpass\n    >>> from commcare_export.commcare_hq_client import CommCareHqClient\n    >>> api_client = CommCareHqClient('http://commcarehq.org', project='your_project').authenticated('your_username', getpass.getpass())\n    >>> forms = api_client.iterate('form', {'app_id': \"whatever\"})\n    >>> [ (form['received_on'], form['form.gender']) for form in forms ]\n\nTo issue a ``minilinq`` query against it, and then print out that query in a JSON serialization:\n\n.. code:: python\n\n    import getpass\n    import json\n    from commcare_export.minilinq import *\n    from commcare_export.commcare_hq_client import CommCareHqClient\n    from commcare_export.commcare_minilinq import CommCareHqEnv\n    from commcare_export.env import BuiltInEnv\n\n    api_client = CommCareHqClient(\n        url=\"http://www.commcarehq.org\",\n        project='your_project',\n        version='0.5'\n    )\n     \n    api_client = api_client.authenticated(username='username', password='password', mode='digest')\n\n    source = Map(\n       source=Apply(\n           Reference(\"api_data\"),\n           Literal(\"form\"),\n           Literal({\"filter\": {\"term\": {\"app_id\": \"whatever\"}}})\n       ),\n       body=List([\n           Reference(\"received_on\"),\n           Reference(\"form.gender\"),\n       ])\n    )\n\n    query = Emit(\n       'demo-table',\n       [\n           Literal('Received On'),\n           Literal('Gender')\n       ],\n       source\n    )\n\n    print json.dumps(query.to_jvalue(), indent=2)\n\n    results = query.eval(BuiltInEnv() | CommCareHqEnv(api_client) | JsonPathEnv())\n\n    if len(list(env.emitted_tables())) > 0:\n        # with writers.Excel2007TableWriter(\"excel-output.xlsx\") as writer:\n        with writers.StreamingMarkdownTableWriter(sys.stdout) as writer:\n            for table in env.emitted_tables():\n                writer.write_table(table)\n\nWhich will output JSON equivalent to this:\n\n.. code:: javascript\n\n    {\n        \"Emit\": {\n            \"headings\": [\n                {\n                    \"Lit\": \"Received On\"\n                },\n                {\n                    \"Lit\": \"Gender\"\n                }\n            ],\n            \"source\": {\n                \"Map\": {\n                    \"body\": {\n                        \"List\": [\n                            {\n                                \"Ref\": \"received_on\"\n                            },\n                            {\n                                \"Ref\": \"form.gender\"\n                            }\n                        ]\n                    },\n                    \"name\": None,\n                    \"source\": {\n                        \"Apply\": {\n                            \"args\": [\n                                {\n                                    \"Lit\": \"form\"\n                                },\n                                {\n                                    \"Lit\": {\n                                        \"filter\": {\n                                            \"term\": {\n                                                \"app_id\": \"whatever\"\n                                            }\n                                        }\n                                    }\n                                }\n                            ],\n                            \"fn\": {\n                                \"Ref\": \"api_data\"\n                            }\n                        }\n                    }\n                }\n            },\n            \"table\": \"demo-table\"\n        }\n    }\n\nMiniLinq Reference\n------------------\n\nThe abstract syntax can be directly inspected in the ``commcare_export.minilinq`` module. Note that the choice between functions and primitives is deliberately\nchosen to expose the structure of the MiniLinq for possible optimization, and to restrict the overall language.\n\nHere is a description of the astract syntax and semantics\n\n+----------------------------------+--------------------------------------------------------+-------------------------------------+\n| Python                           | JSON                                                   | Which is evaluates to               |\n+==================================+========================================================+=====================================+\n| ``Literal(v)``                   | ``{\"Lit\": v}``                                         | Just ``v``                          |\n+----------------------------------+--------------------------------------------------------+-------------------------------------+\n| ``Reference(x)``                 | ``{\"Ref\": x}``                                         | Whatever ``x`` resolves to in the   |\n|                                  |                                                        | environment                         |\n+----------------------------------+--------------------------------------------------------+-------------------------------------+\n| ``List([a, b, c, ...])``         | ``{\"List\": [a, b, c, ...}``                            | The list of what ``a``, ``b``,      |\n|                                  |                                                        | ``c`` evaluate to                   |\n+----------------------------------+--------------------------------------------------------+-------------------------------------+\n| ``Map(source, name, body)``      | ``{\"Map\": {\"source\": ..., \"name\": ..., \"body\": ...}``  | Evals ``body`` for each elem in     |\n|                                  |                                                        | ``source``. If ``name`` is          |\n|                                  |                                                        | provided, the elem will be bound to |\n|                                  |                                                        | it, otherwise it will replace the   |\n|                                  |                                                        | whole env.                          |\n+----------------------------------+--------------------------------------------------------+-------------------------------------+\n| ``FlatMap(source, name, body)``  | ``{\"FlatMap\": {\"source\" ... etc}}``                    | Flattens after mapping, like nested |\n|                                  |                                                        | list comprehensions                 |\n+----------------------------------+--------------------------------------------------------+-------------------------------------+\n| ``Filter(source, name, body)``   | etc                                                    |                                     |\n+----------------------------------+--------------------------------------------------------+-------------------------------------+\n| ``Bind(value, name, body)``      | etc                                                    | Binds the result of ``value`` to    |\n|                                  |                                                        | ``name`` when evaluating ``body``   |\n+----------------------------------+--------------------------------------------------------+-------------------------------------+\n| ``Emit(table, headings, rows)``  | etc                                                    | Emits ``table`` with ``headings``   |\n|                                  |                                                        | and ``rows``. Note that ``table``   |\n|                                  |                                                        | is a string, ``headings`` is a list |\n|                                  |                                                        | of expressions, and ``rows`` is a   |\n|                                  |                                                        | list of lists of expressions. See   |\n|                                  |                                                        | explanation below for emitted       |\n|                                  |                                                        | output.                             |\n+----------------------------------+--------------------------------------------------------+-------------------------------------+\n| ``Apply(fn, args)``              | etc                                                    | Evaluates ``fn`` to a function, and |\n|                                  |                                                        | all of ``args``, then applies the   |\n|                                  |                                                        | function to the args.               |\n+----------------------------------+--------------------------------------------------------+-------------------------------------+\n\nBuilt in functions like ``api_data`` and basic arithmetic and comparison are provided via the environment, referred to be name using ``Ref``, and utilized via\n``Apply``.\n\nList of builtin functions:\n\n+------------------------------------+----------------------------------------------------------------------------------+------------------------------------+\n| Function                           | Description                                                                      | Example Usage                      |\n+====================================+==================================================================================+====================================+\n| ``+, -, *, //, /, >, <, >=, <=``   | Standard Math                                                                    |                                    |\n+------------------------------------+----------------------------------------------------------------------------------+------------------------------------+\n| len                                | Length                                                                           |                                    |\n+------------------------------------+----------------------------------------------------------------------------------+------------------------------------+\n| bool                               | Bool                                                                             |                                    |\n+------------------------------------+----------------------------------------------------------------------------------+------------------------------------+\n| str2bool                           | Convert string to boolean. True values are 'true', 't', '1' (case insensitive)   |                                    |\n+------------------------------------+----------------------------------------------------------------------------------+------------------------------------+\n| str2date                           | Convert string to date                                                           |                                    |\n+------------------------------------+----------------------------------------------------------------------------------+------------------------------------+\n| bool2int                           | Convert boolean to integer (0, 1)                                                |                                    |\n+------------------------------------+----------------------------------------------------------------------------------+------------------------------------+\n| str2num                            | Parse string as a number                                                         |                                    |\n+------------------------------------+----------------------------------------------------------------------------------+------------------------------------+\n| selected-at                        | Returns the Nth word in a string. N is zero-indexed.                             | selected-at(3) - return 4th word   |\n+------------------------------------+----------------------------------------------------------------------------------+------------------------------------+\n| selected                           | Returns True if the given word is in the value.                                  | selected(fever)                    |\n+------------------------------------+----------------------------------------------------------------------------------+------------------------------------+\n| count-selected                     | Count the number of words                                                        |                                    |\n+------------------------------------+----------------------------------------------------------------------------------+------------------------------------+\n| template                           | Render a string template (not robust)                                            | template({} on {}, state, date)    |\n+------------------------------------+----------------------------------------------------------------------------------+------------------------------------+\n| attachment\\_url                    | Convert an attachment name into it's download URL                                |                                    |\n+------------------------------------+----------------------------------------------------------------------------------+------------------------------------+\n\nOutput Formats\n--------------\n\nYour MiniLinq may define multiple tables with headings in addition to their body rows by using ``Emit`` expressions, or may simply return the results of a\nsingle query.\n\nIf your MiniLinq does not contain any ``Emit`` expressions, then the results of the expression will be printed to standard output as pretty-printed JSON.\n\nIf your MiniLinq *does* contain ``Emit`` expressions, then there are many formats available, selected via the ``--output-format <format>`` option, and it can be\ndirected to a file with the ``--output <file>`` command-line option.\n\n-  ``csv``: Each table will be a CSV file within a Zip archive.\n-  ``xls``: Each table will be a sheet in an old-format Excel spreadsheet.\n-  ``xlsx``: Each table will be a sheet in a new-format Excel spreadsheet.\n-  ``json``: The tables will each be a member of a JSON dictionary, printed to standard output\n-  ``markdown``: The tables will be streamed to standard output in Markdown format (very handy for debugging your queries)\n-  ``sql``: All data will be idempotently \"upserted\" into the SQL database you specify, including creating the needed tables and columns.\n\nDependencies\n------------\n\nRequired dependencies will be automatically installed via pip. But since you may not care about all export formats, the various dependencies there are optional.\nHere is how you might install them:\n\n::\n\n    # To export \"xlsx\"\n    $ pip install openpyxl\n\n    # To export \"xls\"\n    $ pip install xlwt\n\n    # To sync with a SQL database\n    $ pip install SQLAlchemy alembic psycopg2 pymysql pyodbc\n\nContributing\n------------\n\n0. Sign up for github, if you have not already, at https://github.com.\n\n1. Fork the repository at https://github.com/dimagi/commcare-export.\n\n2. Clone your fork, install into a ``virtualenv``, and start a feature branch\n\n::\n\n    $ mkvirtualenv commcare-export\n    $ git clone git@github.com:dimagi/commcare-export.git\n    $ cd commcare-export\n    $ pip install -e .\n    $ git checkout -b my-super-duper-feature\n\n3. Make your edits.\n\n4. Make sure the tests pass. The best way to test for all versions is to sign up for https://travis-ci.org and turn on automatic continuous testing for your\nfork.\n\n::\n\n    $ py.test\n    =============== test session starts ===============\n    platform darwin -- Python 2.7.3 -- pytest-2.3.4\n    collected 17 items\n\n    tests/test_commcare_minilinq.py .\n    tests/test_excel_query.py ....\n    tests/test_minilinq.py ........\n    tests/test_repeatable_iterator.py .\n    tests/test_writers.py ...\n\n    ============ 17 passed in 2.09 seconds ============\n\n5. Push the feature branch up\n\n::\n\n    $ git push -u origin my-super-duper-feature\n\n6. Visit https://github.com/dimagi/commcare-export and submit a pull request.\n\n7. Accept our gratitude for contributing: Thanks!\n\nRelease process\n---------------\n\n1. Create a tag for the release\n\n::\n\n    $ git tag -a \"X.YY.0\" -m \"Release X.YY.0\"\n    $ git push --tags\n\n2. Create the source distribution\n\n::\n\n    $ python setup.py sdist\n\nEnsure that the archive (``dist/commcare-export-X.YY.0.tar.gz``) has the correct version number (matching the tag name).\n\n3. Upload to pypi\n\n::\n\n    $ pip install twine\n    $ twine upload dist/commcare-export-X.YY.0.tar.gz\n\n4. Verify upload\n\nhttps://pypi.python.org/pypi/commcare-export\n\n5. Create a release on github\n\nhttps://github.com/dimagi/commcare-export/releases\n\nTesting databases\n-----------------\n\nSupported databases are PostgreSQL, MySQL, MSSQL\n\nPostgresql\n==========\n\n::\n\n    $ docker pull postgres 9.6\n    $ docker run --name ccexport-postgres -p 5432:5432 -d postgres:9.6\n\nMySQL\n=====\n\n::\n\n    $ docker pull mysql\n    $ docker run --name ccexport-mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=pw -e MYSQL_USER=travis -e MYSQL_PASSWORD='' -d mysql\n\n    # create travis user\n    $ docker run -it --link ccexport-mysql:mysql --rm mysql sh -c 'exec mysql -h\"$MYSQL_PORT_3306_TCP_ADDR\" -P\"$MYSQL_PORT_3306_TCP_PORT\" -uroot -p\"$MYSQL_ENV_MYSQL_ROOT_PASSWORD\"'\n    mysql> CREATE USER 'travis'@'%';\n    mysql> GRANT ALL PRIVILEGES ON *.* TO 'travis'@'%';\n\nMSSQL\n=====\n\n::\n\n    $ docker pull microsoft/mssql-server-linux:2017-latest\n    $ docker run -e \"ACCEPT_EULA=Y\" -e \"MSSQL_SA_PASSWORD=Password@123\" -p 1433:1433 --name mssql1 -d microsoft/mssql-server-linux:2017-latest\n\n    # install driver\n    $ curl https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add -\n    $ echo \"deb [arch=amd64] https://packages.microsoft.com/ubuntu/16.04/prod xenial main\" | sudo tee /etc/apt/sources.list.d/mssql-release.list\n\n    $ sudo apt-get update -qq\n    $ sudo ACCEPT_EULA=Y apt-get install msodbcsql17\n    $ odbcinst -q -d\n\n.. |Build Status| image:: https://travis-ci.org/dimagi/commcare-export.png\n   :target: https://travis-ci.org/dimagi/commcare-export\n.. |Test coverage| image:: https://coveralls.io/repos/dimagi/commcare-export/badge.png?branch=master\n   :target: https://coveralls.io/r/dimagi/commcare-export\n.. |PyPI version| image:: https://badge.fury.io/py/commcare-export.svg\n   :target: https://badge.fury.io/py/commcare-export", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/dimagi/commcare-export", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "commcare-export", "package_url": "https://pypi.org/project/commcare-export/", "platform": "", "project_url": "https://pypi.org/project/commcare-export/", "project_urls": {"Homepage": "https://github.com/dimagi/commcare-export"}, "release_url": "https://pypi.org/project/commcare-export/1.2.1/", "requires_dist": null, "requires_python": "", "summary": "A command-line tool (and Python library) to extract data from CommCareHQ into a SQL database or Excel workbook", "version": "1.2.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"commcare-export\">\n<h2>CommCare Export</h2>\n<p><a href=\"https://github.com/dimagi/commcare-export\" rel=\"nofollow\">https://github.com/dimagi/commcare-export</a></p>\n<p><a href=\"https://travis-ci.org/dimagi/commcare-export\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b13c8a5120cba560f628446713b136310ee10f55/68747470733a2f2f7472617669732d63692e6f72672f64696d6167692f636f6d6d636172652d6578706f72742e706e67\"></a> <a href=\"https://coveralls.io/r/dimagi/commcare-export\" rel=\"nofollow\"><img alt=\"Test coverage\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/806d4ec11a9a164624a2b3a592369dd953d95816/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f64696d6167692f636f6d6d636172652d6578706f72742f62616467652e706e673f6272616e63683d6d6173746572\"></a> <a href=\"https://badge.fury.io/py/commcare-export\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/63b977f9a2c874d21272c44f1d474612917085c5/68747470733a2f2f62616467652e667572792e696f2f70792f636f6d6d636172652d6578706f72742e737667\"></a></p>\n<p>A command-line tool (and Python library) to generate customized exports from the <a href=\"https://www.commcarehq.org\" rel=\"nofollow\">CommCareHQ</a> <a href=\"https://wiki.commcarehq.org/display/commcarepublic/Data+APIs\" rel=\"nofollow\">REST\nAPI</a>.</p>\n<ul>\n<li><a href=\"https://wiki.commcarehq.org/display/commcarepublic/CommCare+Data+Export+Tool\" rel=\"nofollow\">User documentation</a></li>\n<li><a href=\"https://github.com/dimagi/commcare-export/releases\" rel=\"nofollow\">Changelog</a></li>\n</ul>\n<div id=\"installation-quick-start\">\n<h3>Installation &amp; Quick Start</h3>\n<p>0a. Install Python and <tt>pip</tt>. This tool is <a href=\"https://travis-ci.org/dimagi/commcare-export\" rel=\"nofollow\">tested with Python 2.7, and 3.3</a>.</p>\n<p>0b. Sign up for CommCareHQ at <a href=\"https://www.commcarehq.org/register/user\" rel=\"nofollow\">https://www.commcarehq.org/register/user</a> if you have not already.</p>\n<ol>\n<li>Install CommCare Export via <tt>pip</tt></li>\n</ol>\n<pre>$ pip install commcare-export\n</pre>\n<p>2. Visit the CommCareHQ Exchange and add the <a href=\"https://www.commcarehq.org/exchange/611422532c7ab89d22cca54d57ae89aa/info/\" rel=\"nofollow\">Simple CommCare Demo/Tutorial\u201d</a> app\nto a new project space.</p>\n<ol>\n<li>Visit the Release Manager, make a build, click the star to release it.</li>\n<li>Visit CloudCare and fill out a bunch of forms.</li>\n<li>Try out the example queries in the <tt>examples/</tt> directory, providing your project name on the command line:</li>\n</ol>\n<pre>$ commcare-export \\\n     --query examples/demo-registration.xlsx \\\n     --project YOUR_PROJECT \\\n     --output-format markdown\n\n$ commcare-export \\\n     --query examples/demo-registration.json \\\n     --project YOUR_PROJECT \\\n     --output-format markdown\n\n$ commcare-export \\\n     --query examples/demo-deliveries.xlsx \\\n     --project YOUR_PROJECT \\\n     --output-format markdown\n\n$ commcare-export \\\n     --query examples/demo-deliveries.json \\\n     --project YOUR_PROJECT \\\n     --output-format markdown\n</pre>\n<p>You\u2019ll see the tables printed out. Change to <tt><span class=\"pre\">--output-format</span> sql <span class=\"pre\">--output</span> URL_TO_YOUR_DB <span class=\"pre\">--since</span> DATE</tt> to sync all forms submitted since that date.</p>\n<p>All examples are present in Excel and also equivalent JSON.</p>\n</div>\n<div id=\"command-line-usage\">\n<h3>Command-line Usage</h3>\n<p>The basic usage of the command-line tool is with a saved Excel or JSON query (see how to write these, below)</p>\n<pre>$ commcare-export --commcare-hq &lt;URL or alias like \"local\" or \"prod\"&gt; \\\n                  --username &lt;username&gt; \\\n                  --project &lt;project&gt; \\\n                  --version &lt;api version, defaults to latest known&gt; \\\n                  --query &lt;excel file, json file, or raw json&gt; \\\n                  --output-format &lt;csv, xls, xlsx, json, markdown, sql&gt; \\\n                  --output &lt;file name or SQL database URL&gt;\n</pre>\n<p>See <tt><span class=\"pre\">commcare-export</span> <span class=\"pre\">--help</span></tt> for the full list of options.</p>\n<p>There are example query files for the CommCare Demo App (available on the CommCareHq Exchange) in the <tt>examples/</tt> directory.</p>\n<p><tt><span class=\"pre\">--output</span></tt></p>\n<p>CommCare Export uses SQLAlachemy\u2019s <a href=\"http://docs.sqlalchemy.org/en/latest/core/engines.html\" rel=\"nofollow\">create_engine</a> to establish a database connection. This is based\noff of the <a href=\"https://www.ietf.org/rfc/rfc1738.txt\" rel=\"nofollow\">RFC-1738</a> protocol. Some common examples:</p>\n<pre># Postgres\npostgresql+psycopg2://scott:tiger@localhost/mydatabase\n\n# MySQL\nmysql+pymysql://scott:tiger@localhost/mydatabase\n\n# MSSQL\nmssql+pyodbc://scott:tiger@localhost/mydatabases?driver=ODBC+Driver+17+for+SQL+Server\n</pre>\n</div>\n<div id=\"excel-queries\">\n<h3>Excel Queries</h3>\n<p>An excel query is any <tt>.xlsx</tt> workbook. Each sheet in the workbook represents one table you wish to create. There are two grouping of columns to configure the\ntable:</p>\n<ul>\n<li><strong>Data Source</strong>: Set this to <tt>form</tt> to export form data, or <tt>case</tt> for case data.</li>\n<li><strong>Filter Name</strong> / <em>Filter Value</em>: These columns are paired up to filter the input cases or forms.</li>\n<li><strong>Field</strong>: The destination in your SQL database for the value.</li>\n<li><strong>Source Field</strong>: The particular field from the form you wish to extract. This can be any JSON path.</li>\n</ul>\n</div>\n<div id=\"json-queries\">\n<h3>JSON Queries</h3>\n<p>JSON queries are a described in the table below. You build a JSON object that represents the query you have in mind. A good way to get started is to work from\nthe examples, or you could make an excel query and run the tool with <tt><span class=\"pre\">--dump-query</span></tt> to see the resulting JSON query.</p>\n</div>\n<div id=\"python-library-usage\">\n<h3>Python Library Usage</h3>\n<p>As a library, the various <tt>commcare_export</tt> modules make it easy to</p>\n<ul>\n<li>Interact with the CommCareHQ REST API</li>\n<li>Execute \u201cMinilinq\u201d queries against the API (a very simple query language, described below)</li>\n<li>Load and save JSON representations of Minilinq queries</li>\n<li>Compile Excel configurations to Minilinq queries</li>\n</ul>\n<p>To directly access the CommCareHq REST API:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">getpass</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">commcare_export.commcare_hq_client</span> <span class=\"kn\">import</span> <span class=\"n\">CommCareHqClient</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">api_client</span> <span class=\"o\">=</span> <span class=\"n\">CommCareHqClient</span><span class=\"p\">(</span><span class=\"s1\">'http://commcarehq.org'</span><span class=\"p\">,</span> <span class=\"n\">project</span><span class=\"o\">=</span><span class=\"s1\">'your_project'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">authenticated</span><span class=\"p\">(</span><span class=\"s1\">'your_username'</span><span class=\"p\">,</span> <span class=\"n\">getpass</span><span class=\"o\">.</span><span class=\"n\">getpass</span><span class=\"p\">())</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">forms</span> <span class=\"o\">=</span> <span class=\"n\">api_client</span><span class=\"o\">.</span><span class=\"n\">iterate</span><span class=\"p\">(</span><span class=\"s1\">'form'</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">'app_id'</span><span class=\"p\">:</span> <span class=\"s2\">\"whatever\"</span><span class=\"p\">})</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"p\">[</span> <span class=\"p\">(</span><span class=\"n\">form</span><span class=\"p\">[</span><span class=\"s1\">'received_on'</span><span class=\"p\">],</span> <span class=\"n\">form</span><span class=\"p\">[</span><span class=\"s1\">'form.gender'</span><span class=\"p\">])</span> <span class=\"k\">for</span> <span class=\"n\">form</span> <span class=\"ow\">in</span> <span class=\"n\">forms</span> <span class=\"p\">]</span>\n</pre>\n<p>To issue a <tt>minilinq</tt> query against it, and then print out that query in a JSON serialization:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">getpass</span>\n<span class=\"kn\">import</span> <span class=\"nn\">json</span>\n<span class=\"kn\">from</span> <span class=\"nn\">commcare_export.minilinq</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">commcare_export.commcare_hq_client</span> <span class=\"kn\">import</span> <span class=\"n\">CommCareHqClient</span>\n<span class=\"kn\">from</span> <span class=\"nn\">commcare_export.commcare_minilinq</span> <span class=\"kn\">import</span> <span class=\"n\">CommCareHqEnv</span>\n<span class=\"kn\">from</span> <span class=\"nn\">commcare_export.env</span> <span class=\"kn\">import</span> <span class=\"n\">BuiltInEnv</span>\n\n<span class=\"n\">api_client</span> <span class=\"o\">=</span> <span class=\"n\">CommCareHqClient</span><span class=\"p\">(</span>\n    <span class=\"n\">url</span><span class=\"o\">=</span><span class=\"s2\">\"http://www.commcarehq.org\"</span><span class=\"p\">,</span>\n    <span class=\"n\">project</span><span class=\"o\">=</span><span class=\"s1\">'your_project'</span><span class=\"p\">,</span>\n    <span class=\"n\">version</span><span class=\"o\">=</span><span class=\"s1\">'0.5'</span>\n<span class=\"p\">)</span>\n\n<span class=\"n\">api_client</span> <span class=\"o\">=</span> <span class=\"n\">api_client</span><span class=\"o\">.</span><span class=\"n\">authenticated</span><span class=\"p\">(</span><span class=\"n\">username</span><span class=\"o\">=</span><span class=\"s1\">'username'</span><span class=\"p\">,</span> <span class=\"n\">password</span><span class=\"o\">=</span><span class=\"s1\">'password'</span><span class=\"p\">,</span> <span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"s1\">'digest'</span><span class=\"p\">)</span>\n\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"n\">Map</span><span class=\"p\">(</span>\n   <span class=\"n\">source</span><span class=\"o\">=</span><span class=\"n\">Apply</span><span class=\"p\">(</span>\n       <span class=\"n\">Reference</span><span class=\"p\">(</span><span class=\"s2\">\"api_data\"</span><span class=\"p\">),</span>\n       <span class=\"n\">Literal</span><span class=\"p\">(</span><span class=\"s2\">\"form\"</span><span class=\"p\">),</span>\n       <span class=\"n\">Literal</span><span class=\"p\">({</span><span class=\"s2\">\"filter\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s2\">\"term\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s2\">\"app_id\"</span><span class=\"p\">:</span> <span class=\"s2\">\"whatever\"</span><span class=\"p\">}}})</span>\n   <span class=\"p\">),</span>\n   <span class=\"n\">body</span><span class=\"o\">=</span><span class=\"n\">List</span><span class=\"p\">([</span>\n       <span class=\"n\">Reference</span><span class=\"p\">(</span><span class=\"s2\">\"received_on\"</span><span class=\"p\">),</span>\n       <span class=\"n\">Reference</span><span class=\"p\">(</span><span class=\"s2\">\"form.gender\"</span><span class=\"p\">),</span>\n   <span class=\"p\">])</span>\n<span class=\"p\">)</span>\n\n<span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"n\">Emit</span><span class=\"p\">(</span>\n   <span class=\"s1\">'demo-table'</span><span class=\"p\">,</span>\n   <span class=\"p\">[</span>\n       <span class=\"n\">Literal</span><span class=\"p\">(</span><span class=\"s1\">'Received On'</span><span class=\"p\">),</span>\n       <span class=\"n\">Literal</span><span class=\"p\">(</span><span class=\"s1\">'Gender'</span><span class=\"p\">)</span>\n   <span class=\"p\">],</span>\n   <span class=\"n\">source</span>\n<span class=\"p\">)</span>\n\n<span class=\"nb\">print</span> <span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">dumps</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"o\">.</span><span class=\"n\">to_jvalue</span><span class=\"p\">(),</span> <span class=\"n\">indent</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n\n<span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"n\">query</span><span class=\"o\">.</span><span class=\"n\">eval</span><span class=\"p\">(</span><span class=\"n\">BuiltInEnv</span><span class=\"p\">()</span> <span class=\"o\">|</span> <span class=\"n\">CommCareHqEnv</span><span class=\"p\">(</span><span class=\"n\">api_client</span><span class=\"p\">)</span> <span class=\"o\">|</span> <span class=\"n\">JsonPathEnv</span><span class=\"p\">())</span>\n\n<span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">emitted_tables</span><span class=\"p\">()))</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n    <span class=\"c1\"># with writers.Excel2007TableWriter(\"excel-output.xlsx\") as writer:</span>\n    <span class=\"k\">with</span> <span class=\"n\">writers</span><span class=\"o\">.</span><span class=\"n\">StreamingMarkdownTableWriter</span><span class=\"p\">(</span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">stdout</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">writer</span><span class=\"p\">:</span>\n        <span class=\"k\">for</span> <span class=\"n\">table</span> <span class=\"ow\">in</span> <span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">emitted_tables</span><span class=\"p\">():</span>\n            <span class=\"n\">writer</span><span class=\"o\">.</span><span class=\"n\">write_table</span><span class=\"p\">(</span><span class=\"n\">table</span><span class=\"p\">)</span>\n</pre>\n<p>Which will output JSON equivalent to this:</p>\n<pre><span class=\"p\">{</span>\n    <span class=\"s2\">\"Emit\"</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n        <span class=\"s2\">\"headings\"</span><span class=\"o\">:</span> <span class=\"p\">[</span>\n            <span class=\"p\">{</span>\n                <span class=\"s2\">\"Lit\"</span><span class=\"o\">:</span> <span class=\"s2\">\"Received On\"</span>\n            <span class=\"p\">},</span>\n            <span class=\"p\">{</span>\n                <span class=\"s2\">\"Lit\"</span><span class=\"o\">:</span> <span class=\"s2\">\"Gender\"</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">],</span>\n        <span class=\"s2\">\"source\"</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n            <span class=\"s2\">\"Map\"</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n                <span class=\"s2\">\"body\"</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n                    <span class=\"s2\">\"List\"</span><span class=\"o\">:</span> <span class=\"p\">[</span>\n                        <span class=\"p\">{</span>\n                            <span class=\"s2\">\"Ref\"</span><span class=\"o\">:</span> <span class=\"s2\">\"received_on\"</span>\n                        <span class=\"p\">},</span>\n                        <span class=\"p\">{</span>\n                            <span class=\"s2\">\"Ref\"</span><span class=\"o\">:</span> <span class=\"s2\">\"form.gender\"</span>\n                        <span class=\"p\">}</span>\n                    <span class=\"p\">]</span>\n                <span class=\"p\">},</span>\n                <span class=\"s2\">\"name\"</span><span class=\"o\">:</span> <span class=\"nx\">None</span><span class=\"p\">,</span>\n                <span class=\"s2\">\"source\"</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n                    <span class=\"s2\">\"Apply\"</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n                        <span class=\"s2\">\"args\"</span><span class=\"o\">:</span> <span class=\"p\">[</span>\n                            <span class=\"p\">{</span>\n                                <span class=\"s2\">\"Lit\"</span><span class=\"o\">:</span> <span class=\"s2\">\"form\"</span>\n                            <span class=\"p\">},</span>\n                            <span class=\"p\">{</span>\n                                <span class=\"s2\">\"Lit\"</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n                                    <span class=\"s2\">\"filter\"</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n                                        <span class=\"s2\">\"term\"</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n                                            <span class=\"s2\">\"app_id\"</span><span class=\"o\">:</span> <span class=\"s2\">\"whatever\"</span>\n                                        <span class=\"p\">}</span>\n                                    <span class=\"p\">}</span>\n                                <span class=\"p\">}</span>\n                            <span class=\"p\">}</span>\n                        <span class=\"p\">],</span>\n                        <span class=\"s2\">\"fn\"</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n                            <span class=\"s2\">\"Ref\"</span><span class=\"o\">:</span> <span class=\"s2\">\"api_data\"</span>\n                        <span class=\"p\">}</span>\n                    <span class=\"p\">}</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">},</span>\n        <span class=\"s2\">\"table\"</span><span class=\"o\">:</span> <span class=\"s2\">\"demo-table\"</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n</div>\n<div id=\"minilinq-reference\">\n<h3>MiniLinq Reference</h3>\n<p>The abstract syntax can be directly inspected in the <tt>commcare_export.minilinq</tt> module. Note that the choice between functions and primitives is deliberately\nchosen to expose the structure of the MiniLinq for possible optimization, and to restrict the overall language.</p>\n<p>Here is a description of the astract syntax and semantics</p>\n<table>\n<colgroup>\n<col>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Python</th>\n<th>JSON</th>\n<th>Which is evaluates to</th>\n</tr>\n</thead>\n<tbody>\n<tr><td><tt>Literal(v)</tt></td>\n<td><tt>{\"Lit\": v}</tt></td>\n<td>Just <tt>v</tt></td>\n</tr>\n<tr><td><tt>Reference(x)</tt></td>\n<td><tt>{\"Ref\": x}</tt></td>\n<td>Whatever <tt>x</tt> resolves to in the\nenvironment</td>\n</tr>\n<tr><td><tt><span class=\"pre\">List([a,</span> b, c, <span class=\"pre\">...])</span></tt></td>\n<td><tt>{\"List\": [a, b, c, <span class=\"pre\">...}</span></tt></td>\n<td>The list of what <tt>a</tt>, <tt>b</tt>,\n<tt>c</tt> evaluate to</td>\n</tr>\n<tr><td><tt>Map(source, name, body)</tt></td>\n<td><tt>{\"Map\": {\"source\": <span class=\"pre\">...,</span> \"name\": <span class=\"pre\">...,</span> \"body\": <span class=\"pre\">...}</span></tt></td>\n<td>Evals <tt>body</tt> for each elem in\n<tt>source</tt>. If <tt>name</tt> is\nprovided, the elem will be bound to\nit, otherwise it will replace the\nwhole env.</td>\n</tr>\n<tr><td><tt>FlatMap(source, name, body)</tt></td>\n<td><tt>{\"FlatMap\": {\"source\" ... etc}}</tt></td>\n<td>Flattens after mapping, like nested\nlist comprehensions</td>\n</tr>\n<tr><td><tt>Filter(source, name, body)</tt></td>\n<td>etc</td>\n<td>\u00a0</td>\n</tr>\n<tr><td><tt>Bind(value, name, body)</tt></td>\n<td>etc</td>\n<td>Binds the result of <tt>value</tt> to\n<tt>name</tt> when evaluating <tt>body</tt></td>\n</tr>\n<tr><td><tt>Emit(table, headings, rows)</tt></td>\n<td>etc</td>\n<td>Emits <tt>table</tt> with <tt>headings</tt>\nand <tt>rows</tt>. Note that <tt>table</tt>\nis a string, <tt>headings</tt> is a list\nof expressions, and <tt>rows</tt> is a\nlist of lists of expressions. See\nexplanation below for emitted\noutput.</td>\n</tr>\n<tr><td><tt>Apply(fn, args)</tt></td>\n<td>etc</td>\n<td>Evaluates <tt>fn</tt> to a function, and\nall of <tt>args</tt>, then applies the\nfunction to the args.</td>\n</tr>\n</tbody>\n</table>\n<p>Built in functions like <tt>api_data</tt> and basic arithmetic and comparison are provided via the environment, referred to be name using <tt>Ref</tt>, and utilized via\n<tt>Apply</tt>.</p>\n<p>List of builtin functions:</p>\n<table>\n<colgroup>\n<col>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Function</th>\n<th>Description</th>\n<th>Example Usage</th>\n</tr>\n</thead>\n<tbody>\n<tr><td><tt>+, <span class=\"pre\">-,</span> *, //, /, &gt;, &lt;, &gt;=, &lt;=</tt></td>\n<td>Standard Math</td>\n<td>\u00a0</td>\n</tr>\n<tr><td>len</td>\n<td>Length</td>\n<td>\u00a0</td>\n</tr>\n<tr><td>bool</td>\n<td>Bool</td>\n<td>\u00a0</td>\n</tr>\n<tr><td>str2bool</td>\n<td>Convert string to boolean. True values are \u2018true\u2019, \u2018t\u2019, \u20181\u2019 (case insensitive)</td>\n<td>\u00a0</td>\n</tr>\n<tr><td>str2date</td>\n<td>Convert string to date</td>\n<td>\u00a0</td>\n</tr>\n<tr><td>bool2int</td>\n<td>Convert boolean to integer (0, 1)</td>\n<td>\u00a0</td>\n</tr>\n<tr><td>str2num</td>\n<td>Parse string as a number</td>\n<td>\u00a0</td>\n</tr>\n<tr><td>selected-at</td>\n<td>Returns the Nth word in a string. N is zero-indexed.</td>\n<td>selected-at(3) - return 4th word</td>\n</tr>\n<tr><td>selected</td>\n<td>Returns True if the given word is in the value.</td>\n<td>selected(fever)</td>\n</tr>\n<tr><td>count-selected</td>\n<td>Count the number of words</td>\n<td>\u00a0</td>\n</tr>\n<tr><td>template</td>\n<td>Render a string template (not robust)</td>\n<td>template({} on {}, state, date)</td>\n</tr>\n<tr><td>attachment_url</td>\n<td>Convert an attachment name into it\u2019s download URL</td>\n<td>\u00a0</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div id=\"output-formats\">\n<h3>Output Formats</h3>\n<p>Your MiniLinq may define multiple tables with headings in addition to their body rows by using <tt>Emit</tt> expressions, or may simply return the results of a\nsingle query.</p>\n<p>If your MiniLinq does not contain any <tt>Emit</tt> expressions, then the results of the expression will be printed to standard output as pretty-printed JSON.</p>\n<p>If your MiniLinq <em>does</em> contain <tt>Emit</tt> expressions, then there are many formats available, selected via the <tt><span class=\"pre\">--output-format</span> &lt;format&gt;</tt> option, and it can be\ndirected to a file with the <tt><span class=\"pre\">--output</span> &lt;file&gt;</tt> command-line option.</p>\n<ul>\n<li><tt>csv</tt>: Each table will be a CSV file within a Zip archive.</li>\n<li><tt>xls</tt>: Each table will be a sheet in an old-format Excel spreadsheet.</li>\n<li><tt>xlsx</tt>: Each table will be a sheet in a new-format Excel spreadsheet.</li>\n<li><tt>json</tt>: The tables will each be a member of a JSON dictionary, printed to standard output</li>\n<li><tt>markdown</tt>: The tables will be streamed to standard output in Markdown format (very handy for debugging your queries)</li>\n<li><tt>sql</tt>: All data will be idempotently \u201cupserted\u201d into the SQL database you specify, including creating the needed tables and columns.</li>\n</ul>\n</div>\n<div id=\"dependencies\">\n<h3>Dependencies</h3>\n<p>Required dependencies will be automatically installed via pip. But since you may not care about all export formats, the various dependencies there are optional.\nHere is how you might install them:</p>\n<pre># To export \"xlsx\"\n$ pip install openpyxl\n\n# To export \"xls\"\n$ pip install xlwt\n\n# To sync with a SQL database\n$ pip install SQLAlchemy alembic psycopg2 pymysql pyodbc\n</pre>\n</div>\n<div id=\"contributing\">\n<h3>Contributing</h3>\n<ol>\n<li>Sign up for github, if you have not already, at <a href=\"https://github.com\" rel=\"nofollow\">https://github.com</a>.</li>\n<li>Fork the repository at <a href=\"https://github.com/dimagi/commcare-export\" rel=\"nofollow\">https://github.com/dimagi/commcare-export</a>.</li>\n<li>Clone your fork, install into a <tt>virtualenv</tt>, and start a feature branch</li>\n</ol>\n<pre>$ mkvirtualenv commcare-export\n$ git clone git@github.com:dimagi/commcare-export.git\n$ cd commcare-export\n$ pip install -e .\n$ git checkout -b my-super-duper-feature\n</pre>\n<ol>\n<li>Make your edits.</li>\n</ol>\n<p>4. Make sure the tests pass. The best way to test for all versions is to sign up for <a href=\"https://travis-ci.org\" rel=\"nofollow\">https://travis-ci.org</a> and turn on automatic continuous testing for your\nfork.</p>\n<pre>$ py.test\n=============== test session starts ===============\nplatform darwin -- Python 2.7.3 -- pytest-2.3.4\ncollected 17 items\n\ntests/test_commcare_minilinq.py .\ntests/test_excel_query.py ....\ntests/test_minilinq.py ........\ntests/test_repeatable_iterator.py .\ntests/test_writers.py ...\n\n============ 17 passed in 2.09 seconds ============\n</pre>\n<ol>\n<li>Push the feature branch up</li>\n</ol>\n<pre>$ git push -u origin my-super-duper-feature\n</pre>\n<ol>\n<li>Visit <a href=\"https://github.com/dimagi/commcare-export\" rel=\"nofollow\">https://github.com/dimagi/commcare-export</a> and submit a pull request.</li>\n<li>Accept our gratitude for contributing: Thanks!</li>\n</ol>\n</div>\n<div id=\"release-process\">\n<h3>Release process</h3>\n<ol>\n<li>Create a tag for the release</li>\n</ol>\n<pre>$ git tag -a \"X.YY.0\" -m \"Release X.YY.0\"\n$ git push --tags\n</pre>\n<ol>\n<li>Create the source distribution</li>\n</ol>\n<pre>$ python setup.py sdist\n</pre>\n<p>Ensure that the archive (<tt><span class=\"pre\">dist/commcare-export-X.YY.0.tar.gz</span></tt>) has the correct version number (matching the tag name).</p>\n<ol>\n<li>Upload to pypi</li>\n</ol>\n<pre>$ pip install twine\n$ twine upload dist/commcare-export-X.YY.0.tar.gz\n</pre>\n<ol>\n<li>Verify upload</li>\n</ol>\n<p><a href=\"https://pypi.python.org/pypi/commcare-export\" rel=\"nofollow\">https://pypi.python.org/pypi/commcare-export</a></p>\n<ol>\n<li>Create a release on github</li>\n</ol>\n<p><a href=\"https://github.com/dimagi/commcare-export/releases\" rel=\"nofollow\">https://github.com/dimagi/commcare-export/releases</a></p>\n</div>\n<div id=\"testing-databases\">\n<h3>Testing databases</h3>\n<p>Supported databases are PostgreSQL, MySQL, MSSQL</p>\n</div>\n</div>\n<div id=\"postgresql\">\n<h2>Postgresql</h2>\n<pre>$ docker pull postgres 9.6\n$ docker run --name ccexport-postgres -p 5432:5432 -d postgres:9.6\n</pre>\n</div>\n<div id=\"mysql\">\n<h2>MySQL</h2>\n<pre>$ docker pull mysql\n$ docker run --name ccexport-mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=pw -e MYSQL_USER=travis -e MYSQL_PASSWORD='' -d mysql\n\n# create travis user\n$ docker run -it --link ccexport-mysql:mysql --rm mysql sh -c 'exec mysql -h\"$MYSQL_PORT_3306_TCP_ADDR\" -P\"$MYSQL_PORT_3306_TCP_PORT\" -uroot -p\"$MYSQL_ENV_MYSQL_ROOT_PASSWORD\"'\nmysql&gt; CREATE USER 'travis'@'%';\nmysql&gt; GRANT ALL PRIVILEGES ON *.* TO 'travis'@'%';\n</pre>\n</div>\n<div id=\"mssql\">\n<h2>MSSQL</h2>\n<pre>$ docker pull microsoft/mssql-server-linux:2017-latest\n$ docker run -e \"ACCEPT_EULA=Y\" -e \"MSSQL_SA_PASSWORD=Password@123\" -p 1433:1433 --name mssql1 -d microsoft/mssql-server-linux:2017-latest\n\n# install driver\n$ curl https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add -\n$ echo \"deb [arch=amd64] https://packages.microsoft.com/ubuntu/16.04/prod xenial main\" | sudo tee /etc/apt/sources.list.d/mssql-release.list\n\n$ sudo apt-get update -qq\n$ sudo ACCEPT_EULA=Y apt-get install msodbcsql17\n$ odbcinst -q -d\n</pre>\n</div>\n\n          </div>"}, "last_serial": 5720981, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "4b06b8909a441a9b5f8d072191b199e2", "sha256": "559bf53bbb4527ef77dc44211f210e48cd430d9539c0faf8037c172198d31720"}, "downloads": -1, "filename": "commcare-export-0.1.tar.gz", "has_sig": false, "md5_digest": "4b06b8909a441a9b5f8d072191b199e2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18779, "upload_time": "2013-03-22T18:50:23", "upload_time_iso_8601": "2013-03-22T18:50:23.703669Z", "url": "https://files.pythonhosted.org/packages/01/96/92483c4a9e6b898853eff2f95fa5259d13bee8ea3227657388f52f340c94/commcare-export-0.1.tar.gz", "yanked": false}], "0.10.0": [{"comment_text": "", "digests": {"md5": "0217c0684a06a9c7664338a57f515370", "sha256": "d020032f0221478d8033337c90601dc91efac20a9af71320a40d47d2990c5afd"}, "downloads": -1, "filename": "commcare-export-0.10.0.tar.gz", "has_sig": false, "md5_digest": "0217c0684a06a9c7664338a57f515370", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21688, "upload_time": "2013-04-23T17:40:46", "upload_time_iso_8601": "2013-04-23T17:40:46.583624Z", "url": "https://files.pythonhosted.org/packages/19/00/289ba8bd4933f3143f041c891d90630c6ec003fa247ea966228a45e7ba3e/commcare-export-0.10.0.tar.gz", "yanked": false}], "0.10.1": [{"comment_text": "", "digests": {"md5": "3ffde8dec7c74865987b13c6d72a9122", "sha256": "fbd2500b09f5d12e3dc4db8683a4a34cfa853139a223a05e4fe55a0f9858cdf4"}, "downloads": -1, "filename": "commcare-export-0.10.1.tar.gz", "has_sig": false, "md5_digest": "3ffde8dec7c74865987b13c6d72a9122", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21684, "upload_time": "2013-05-27T21:24:18", "upload_time_iso_8601": "2013-05-27T21:24:18.195245Z", "url": "https://files.pythonhosted.org/packages/bb/22/24674972fb88cd795a2b8d923fe167d29480fc5d1e8e9e13c8857e8ba94c/commcare-export-0.10.1.tar.gz", "yanked": false}], "0.10.2": [{"comment_text": "", "digests": {"md5": "7536c8d0d07dfe7150df7bbf4fd49f4a", "sha256": "caa2c97371b15bce19d38289336210ebac481a864671cd5d3b1ea705eb22561a"}, "downloads": -1, "filename": "commcare-export-0.10.2.tar.gz", "has_sig": false, "md5_digest": "7536c8d0d07dfe7150df7bbf4fd49f4a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21713, "upload_time": "2013-06-02T17:51:47", "upload_time_iso_8601": "2013-06-02T17:51:47.384185Z", "url": "https://files.pythonhosted.org/packages/99/7d/e7ddce209095ee6e267c7e3c74a503d0b7ac95176a1a14e1689437d9451e/commcare-export-0.10.2.tar.gz", "yanked": false}], "0.10.3": [{"comment_text": "", "digests": {"md5": "d9ecca3a303eccd431fc2f58b98eaf01", "sha256": "5000b9fec9612403f93c96cd20ee5817b99bf33845f2aad9e5e40c3cba3b5c71"}, "downloads": -1, "filename": "commcare-export-0.10.3.tar.gz", "has_sig": false, "md5_digest": "d9ecca3a303eccd431fc2f58b98eaf01", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21762, "upload_time": "2013-06-04T17:26:15", "upload_time_iso_8601": "2013-06-04T17:26:15.061520Z", "url": "https://files.pythonhosted.org/packages/df/89/7e0dc8bae105b215c88d5e4089c3ad655e7bc8ba002f5fb1114c0943eed0/commcare-export-0.10.3.tar.gz", "yanked": false}], "0.10.4": [{"comment_text": "", "digests": {"md5": "5283edd3d3d4cdd3d83d41027fac2859", "sha256": "0fd8084a3da59e88c92cc9ab703242359462ec243546ff482f33bd3808b77379"}, "downloads": -1, "filename": "commcare-export-0.10.4.tar.gz", "has_sig": false, "md5_digest": "5283edd3d3d4cdd3d83d41027fac2859", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21811, "upload_time": "2013-06-07T15:45:45", "upload_time_iso_8601": "2013-06-07T15:45:45.451872Z", "url": "https://files.pythonhosted.org/packages/ce/43/50d295f25631e561f2d2724714ae83bfa8ab32e155501df344ab03db692a/commcare-export-0.10.4.tar.gz", "yanked": false}], "0.10.5": [{"comment_text": "", "digests": {"md5": "34b8840e6032362ab973344e2d124750", "sha256": "e1d265b66c4356848d7765c38f83ad7bcd1b49bdbe196486863913caa107d57b"}, "downloads": -1, "filename": "commcare-export-0.10.5.tar.gz", "has_sig": false, "md5_digest": "34b8840e6032362ab973344e2d124750", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21974, "upload_time": "2013-06-13T20:14:48", "upload_time_iso_8601": "2013-06-13T20:14:48.864416Z", "url": "https://files.pythonhosted.org/packages/e0/37/3d51f1d06399c7b66401403f37bd0b7538cb6e6dbac15a06876570cd8e23/commcare-export-0.10.5.tar.gz", "yanked": false}], "0.10.6": [{"comment_text": "", "digests": {"md5": "789a9f40dbde2141d6509eff2c3df0fa", "sha256": "38831daf8c7334ddd42e8c5097a4abd90619f9d2e7ee3fc0951aef29ac20a0a4"}, "downloads": -1, "filename": "commcare-export-0.10.6.tar.gz", "has_sig": false, "md5_digest": "789a9f40dbde2141d6509eff2c3df0fa", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22093, "upload_time": "2013-06-14T18:38:12", "upload_time_iso_8601": "2013-06-14T18:38:12.858376Z", "url": "https://files.pythonhosted.org/packages/e6/f2/a297ecb101e7129052a824f0354aaed10a4392a5cb765a15f3e70c188516/commcare-export-0.10.6.tar.gz", "yanked": false}], "0.11.0": [{"comment_text": "", "digests": {"md5": "0cddddb854ff313c94899760f2112f5f", "sha256": "b7683583bac1fe8efed141d2ea361e0a2a44f86812f283c08f878e9f694e5037"}, "downloads": -1, "filename": "commcare-export-0.11.0.tar.gz", "has_sig": false, "md5_digest": "0cddddb854ff313c94899760f2112f5f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22340, "upload_time": "2013-06-17T16:55:15", "upload_time_iso_8601": "2013-06-17T16:55:15.200169Z", "url": "https://files.pythonhosted.org/packages/d8/44/11779feafeff9481b16ad2d0261c13a6353b8d482463a05b831f19546aae/commcare-export-0.11.0.tar.gz", "yanked": false}], "0.11.1": [{"comment_text": "", "digests": {"md5": "79b91c3536d50616e6848877d9d8fa19", "sha256": "c71eb44ed3c20fcbe1030fe22339ec0688fbf3dfc66df22b1f028489e85e8d3d"}, "downloads": -1, "filename": "commcare-export-0.11.1.tar.gz", "has_sig": false, "md5_digest": "79b91c3536d50616e6848877d9d8fa19", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22370, "upload_time": "2013-06-28T14:57:36", "upload_time_iso_8601": "2013-06-28T14:57:36.544375Z", "url": "https://files.pythonhosted.org/packages/32/74/15121a0cbee587bf38d6fc104cd900bed967f2cc86d79f34866b3c61c0fc/commcare-export-0.11.1.tar.gz", "yanked": false}], "0.11.2": [{"comment_text": "", "digests": {"md5": "de97a37cac0266c61980800314dbff0e", "sha256": "3f11e8950c15627e12f3b718efd62cb8ab53f5f8d57f6f52252febd5ad33496f"}, "downloads": -1, "filename": "commcare-export-0.11.2.tar.gz", "has_sig": false, "md5_digest": "de97a37cac0266c61980800314dbff0e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22263, "upload_time": "2013-07-09T16:16:16", "upload_time_iso_8601": "2013-07-09T16:16:16.966153Z", "url": "https://files.pythonhosted.org/packages/58/69/3cb2fff3efdd23401dae0863b81027029c3111e4f1c175bd5c6caf591118/commcare-export-0.11.2.tar.gz", "yanked": false}], "0.11.3": [{"comment_text": "", "digests": {"md5": "7875f7acf5623d5cf91594d8792214f8", "sha256": "d56b0aeb4960fba9f6b1da319791e87b39417a4a0c32f1cd24ec8caefda77ec9"}, "downloads": -1, "filename": "commcare-export-0.11.3.tar.gz", "has_sig": false, "md5_digest": "7875f7acf5623d5cf91594d8792214f8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23282, "upload_time": "2013-09-24T16:00:24", "upload_time_iso_8601": "2013-09-24T16:00:24.781872Z", "url": "https://files.pythonhosted.org/packages/fb/25/661c043122d3c96ff4dd8168774db0010aaa7f1b2a7ec9f39727c8f3f640/commcare-export-0.11.3.tar.gz", "yanked": false}], "0.11.4": [{"comment_text": "", "digests": {"md5": "b6e223f0a44051cecd41ceae5c2d9127", "sha256": "9f63e23eb996f91a343cda6f2498a7316cc363b306d5d935658425ce93037f8c"}, "downloads": -1, "filename": "commcare-export-0.11.4.tar.gz", "has_sig": false, "md5_digest": "b6e223f0a44051cecd41ceae5c2d9127", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23274, "upload_time": "2013-09-24T21:42:04", "upload_time_iso_8601": "2013-09-24T21:42:04.368718Z", "url": "https://files.pythonhosted.org/packages/31/cb/813d14b19bae24bab3e6345ab59f0e0e241c9e055c4f9e171faafabe8835/commcare-export-0.11.4.tar.gz", "yanked": false}], "0.11.5": [{"comment_text": "", "digests": {"md5": "dafab6af08de69a336f81c6fbbe5d0ab", "sha256": "b81bbf0921d310f0cf6e66ea43342beafa689d18e60156949c805a9bb7d8d756"}, "downloads": -1, "filename": "commcare-export-0.11.5.tar.gz", "has_sig": false, "md5_digest": "dafab6af08de69a336f81c6fbbe5d0ab", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23600, "upload_time": "2013-10-03T17:14:09", "upload_time_iso_8601": "2013-10-03T17:14:09.587297Z", "url": "https://files.pythonhosted.org/packages/89/69/f6ac47522680cba96f871b09758be917126e010504b439f5e1ba8a030102/commcare-export-0.11.5.tar.gz", "yanked": false}], "0.11.6": [{"comment_text": "", "digests": {"md5": "64446dcfc726a8e7652329e7cff49780", "sha256": "50c4f680ddd966cce0f57a8bfaa03949b3e656140cf19b2e71a2145ea5743913"}, "downloads": -1, "filename": "commcare-export-0.11.6.tar.gz", "has_sig": false, "md5_digest": "64446dcfc726a8e7652329e7cff49780", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23268, "upload_time": "2014-04-10T08:23:23", "upload_time_iso_8601": "2014-04-10T08:23:23.747557Z", "url": "https://files.pythonhosted.org/packages/d0/01/79ece5cfac7e42da7360b6fee1a4d998bc9354c3ff1ddb04c8c88ba8f8d1/commcare-export-0.11.6.tar.gz", "yanked": false}], "0.11.7": [{"comment_text": "", "digests": {"md5": "bed920645f79f21b9d52062446ae1c75", "sha256": "37d969e4688022eae87d8ca1f21336a74070884dca1fd0c821e664aaff162159"}, "downloads": -1, "filename": "commcare-export-0.11.7.tar.gz", "has_sig": false, "md5_digest": "bed920645f79f21b9d52062446ae1c75", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23354, "upload_time": "2014-07-08T09:23:19", "upload_time_iso_8601": "2014-07-08T09:23:19.513979Z", "url": "https://files.pythonhosted.org/packages/52/f0/b78d526a4f83e4197a73279eb6ec8285545a29ecfb2d63460fd019baf0ec/commcare-export-0.11.7.tar.gz", "yanked": false}], "0.11.8": [{"comment_text": "", "digests": {"md5": "956b28bc52d95ff2cc111e8fb12a1b52", "sha256": "c0b21cf0f7b5e78bdd6c6168e2deba3b9962e0e3bf98459f99726f847452f8e6"}, "downloads": -1, "filename": "commcare-export-0.11.8.tar.gz", "has_sig": false, "md5_digest": "956b28bc52d95ff2cc111e8fb12a1b52", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24890, "upload_time": "2015-03-09T13:11:48", "upload_time_iso_8601": "2015-03-09T13:11:48.505653Z", "url": "https://files.pythonhosted.org/packages/2c/02/b133547e3d94a7d6f3aefd93e2f2393e73749d6ff7e181c068968926579e/commcare-export-0.11.8.tar.gz", "yanked": false}], "0.12.0": [{"comment_text": "", "digests": {"md5": "1d6570e61fca4be85ac4d5a1fcbcb8f2", "sha256": "dc75432e1f98d6a910a8b30ceb34ff59e45ac95548eb99073e45f548bfb2f8f6"}, "downloads": -1, "filename": "commcare-export-0.12.0.tar.gz", "has_sig": false, "md5_digest": "1d6570e61fca4be85ac4d5a1fcbcb8f2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29472, "upload_time": "2015-06-30T10:00:27", "upload_time_iso_8601": "2015-06-30T10:00:27.099791Z", "url": "https://files.pythonhosted.org/packages/1f/78/40aaa7c33c4fd4bdf4c037777a4511698cfc8342b1e036c42cb1b3e5f2e3/commcare-export-0.12.0.tar.gz", "yanked": false}], "0.12.1": [{"comment_text": "", "digests": {"md5": "c05271859bd54c29f1323a8794b66193", "sha256": "1e5169ceca2f018deef2b548a8640a8b116cf22aeb9b85c9d01c78c546cd09f8"}, "downloads": -1, "filename": "commcare-export-0.12.1.tar.gz", "has_sig": false, "md5_digest": "c05271859bd54c29f1323a8794b66193", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29580, "upload_time": "2015-07-02T08:38:26", "upload_time_iso_8601": "2015-07-02T08:38:26.255275Z", "url": "https://files.pythonhosted.org/packages/ae/be/8cd11322f4162c40ac0ea87bfea0ace9aeca6f57a9835f78bf93327682c9/commcare-export-0.12.1.tar.gz", "yanked": false}], "0.12.2": [{"comment_text": "", "digests": {"md5": "1faa4a5498fcd5c847053f0392df5231", "sha256": "580d20ca2386b6dd48df505dc0c89a839baf0fcb4f4d1a254ca78812812efefb"}, "downloads": -1, "filename": "commcare-export-0.12.2.tar.gz", "has_sig": false, "md5_digest": "1faa4a5498fcd5c847053f0392df5231", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29665, "upload_time": "2015-07-13T15:15:11", "upload_time_iso_8601": "2015-07-13T15:15:11.910377Z", "url": "https://files.pythonhosted.org/packages/cf/ba/700433ce772cb05865bd8ed1e84eafaa41710b0d04864e4d2872cd1e4a5a/commcare-export-0.12.2.tar.gz", "yanked": false}], "0.12.4": [{"comment_text": "", "digests": {"md5": "919fffc79d806f35231b1fb7b12f3620", "sha256": "265a8ae20bcfddf6839235ea478fd2edea0d4d621e661081fcc1f6e0344efc84"}, "downloads": -1, "filename": "commcare-export-0.12.4.tar.gz", "has_sig": false, "md5_digest": "919fffc79d806f35231b1fb7b12f3620", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20574, "upload_time": "2016-11-03T07:33:03", "upload_time_iso_8601": "2016-11-03T07:33:03.533016Z", "url": "https://files.pythonhosted.org/packages/20/fc/79c2212686daaa72b817378d5e9503697d42622bdc9190a29327e2434b9f/commcare-export-0.12.4.tar.gz", "yanked": false}], "0.12.5": [{"comment_text": "", "digests": {"md5": "fae9be27b621953dabf57170057cec48", "sha256": "404b205f29e38d6e645434d31b8e913fcb3f3e3f936c5b18cbb04921562c3f0d"}, "downloads": -1, "filename": "commcare-export-0.12.5.tar.gz", "has_sig": false, "md5_digest": "fae9be27b621953dabf57170057cec48", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30599, "upload_time": "2016-11-11T08:54:12", "upload_time_iso_8601": "2016-11-11T08:54:12.271671Z", "url": "https://files.pythonhosted.org/packages/38/5f/e1814955593c25402138202e18266c841008709a0d165418d0fdc7ce6f55/commcare-export-0.12.5.tar.gz", "yanked": false}], "0.12.6": [{"comment_text": "", "digests": {"md5": "3b5a2c801edabcccd4891d766e286c93", "sha256": "6e8a063de0f933bad1bed912bfef8663d937bd01944572f57b64d9b93f45d2aa"}, "downloads": -1, "filename": "commcare-export-0.12.6.tar.gz", "has_sig": false, "md5_digest": "3b5a2c801edabcccd4891d766e286c93", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30752, "upload_time": "2016-11-29T08:34:02", "upload_time_iso_8601": "2016-11-29T08:34:02.808670Z", "url": "https://files.pythonhosted.org/packages/fd/ad/a495b3e0ab2813f824fa0cadca4c0afd1afe16b5b0985524b0b4f148ec45/commcare-export-0.12.6.tar.gz", "yanked": false}], "0.12.7": [{"comment_text": "", "digests": {"md5": "f3ce04fc970c0d5aaa27e1b3924ceb39", "sha256": "62ecf8ea85b9bbbbd59a35e3c23e92277d90037b3cf5d276dea77e2927d56397"}, "downloads": -1, "filename": "commcare-export-0.12.7.tar.gz", "has_sig": false, "md5_digest": "f3ce04fc970c0d5aaa27e1b3924ceb39", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30837, "upload_time": "2016-12-06T15:58:54", "upload_time_iso_8601": "2016-12-06T15:58:54.426599Z", "url": "https://files.pythonhosted.org/packages/38/83/b06c263e7cbf5058d571cc8bd893e56768105dfd2bad1921f5c23461aa44/commcare-export-0.12.7.tar.gz", "yanked": false}], "0.12.8": [{"comment_text": "", "digests": {"md5": "5cebcbdd045fa0a27c1961113a440459", "sha256": "cc35336023befaeb739847642ad31668c5ae45a2b740635a3094d08f331b5a82"}, "downloads": -1, "filename": "commcare-export-0.12.8.tar.gz", "has_sig": false, "md5_digest": "5cebcbdd045fa0a27c1961113a440459", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30891, "upload_time": "2017-05-23T11:27:12", "upload_time_iso_8601": "2017-05-23T11:27:12.916091Z", "url": "https://files.pythonhosted.org/packages/e7/c7/2dc52651b4634afeb4286cbc5a5939ea09c905d65c3e8f60bc4e8d7c5991/commcare-export-0.12.8.tar.gz", "yanked": false}], "0.12.9": [{"comment_text": "", "digests": {"md5": "e1ab440c493da4655cbca5b45293b30c", "sha256": "5ddf2dcefc3a8804401a84fb1ea4f098f248d48f2c2c4e475975bae90754bac5"}, "downloads": -1, "filename": "commcare-export-0.12.9.tar.gz", "has_sig": false, "md5_digest": "e1ab440c493da4655cbca5b45293b30c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30965, "upload_time": "2017-06-26T11:35:05", "upload_time_iso_8601": "2017-06-26T11:35:05.947563Z", "url": "https://files.pythonhosted.org/packages/db/16/1e1221c029ae70b030b096d7db0c4ed731e09dfa0bfe2e98c9c407cb2a93/commcare-export-0.12.9.tar.gz", "yanked": false}], "0.13.1": [{"comment_text": "", "digests": {"md5": "013c52ee385bb94b0e1800a6a4e6bed8", "sha256": "1ee0ee62e4ebdccd31022ae5fccbcfc487b6a3c02ca6afab8c90dceacaabebdc"}, "downloads": -1, "filename": "commcare-export-0.13.1.tar.gz", "has_sig": false, "md5_digest": "013c52ee385bb94b0e1800a6a4e6bed8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 31951, "upload_time": "2017-07-04T15:25:45", "upload_time_iso_8601": "2017-07-04T15:25:45.816357Z", "url": "https://files.pythonhosted.org/packages/c4/01/c860764df5ae6e6c87982a5025ec0e654a6f4f87c5b945aab75bf1daf797/commcare-export-0.13.1.tar.gz", "yanked": false}], "0.13.2": [{"comment_text": "", "digests": {"md5": "2d7d95c037a2cd445aa0542d807d4959", "sha256": "3f1de0fc8d9da8327b11fcb3aadc6aec61f4514753f571b07beb44f60a484e1a"}, "downloads": -1, "filename": "commcare-export-0.13.2.tar.gz", "has_sig": false, "md5_digest": "2d7d95c037a2cd445aa0542d807d4959", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 32308, "upload_time": "2017-07-12T13:24:30", "upload_time_iso_8601": "2017-07-12T13:24:30.237871Z", "url": "https://files.pythonhosted.org/packages/67/1c/f45aaa4d2644a14ef0eb36be81bdeb831a464e03414cf2b3a6168decaca0/commcare-export-0.13.2.tar.gz", "yanked": false}], "0.13.3": [{"comment_text": "", "digests": {"md5": "1a97bf3ed0ab1b6986e242eb878bbd57", "sha256": "2b638192f433b0903819cc056e5c6561f565426c384351fb0bb620e9ba996816"}, "downloads": -1, "filename": "commcare-export-0.13.3.tar.gz", "has_sig": false, "md5_digest": "1a97bf3ed0ab1b6986e242eb878bbd57", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 32685, "upload_time": "2017-08-02T08:35:01", "upload_time_iso_8601": "2017-08-02T08:35:01.495390Z", "url": "https://files.pythonhosted.org/packages/10/54/c81a72fdf435721691bfc0c0b423c2072e85458e6a1c6730912189b692e8/commcare-export-0.13.3.tar.gz", "yanked": false}], "0.14.0": [{"comment_text": "", "digests": {"md5": "f9cddbcde649445b106fd263ede23bf9", "sha256": "7dda81cdd07c783552c257605ddeb142dd75a04d49626a1320212e64219d2ab6"}, "downloads": -1, "filename": "commcare-export-0.14.0.tar.gz", "has_sig": false, "md5_digest": "f9cddbcde649445b106fd263ede23bf9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 96565, "upload_time": "2017-08-07T11:14:33", "upload_time_iso_8601": "2017-08-07T11:14:33.164190Z", "url": "https://files.pythonhosted.org/packages/33/79/3948540e7d00653613425e259e1e159ce157d2931bc1a3be13f0b816926b/commcare-export-0.14.0.tar.gz", "yanked": false}], "0.15.0": [{"comment_text": "", "digests": {"md5": "e7d40016c5f289abf7d6377626491806", "sha256": "852ca8224ae9570fc3f2e26c0013c50f0f5830eb40a2681894e0300a0bdeff27"}, "downloads": -1, "filename": "commcare-export-0.15.0.tar.gz", "has_sig": false, "md5_digest": "e7d40016c5f289abf7d6377626491806", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 97005, "upload_time": "2017-08-16T16:03:20", "upload_time_iso_8601": "2017-08-16T16:03:20.106250Z", "url": "https://files.pythonhosted.org/packages/ed/99/73a6a251558cef46a63dd0fd8f48b891cffbda79815038819fd7e612dcb8/commcare-export-0.15.0.tar.gz", "yanked": false}], "0.15.1": [{"comment_text": "", "digests": {"md5": "fc8be65ef779d055f0c9d62d0e6d9c23", "sha256": "78be3612e6978fbc7a52d3b79568571c7ed169b3c9344282b77ee921b765f86c"}, "downloads": -1, "filename": "commcare-export-0.15.1.tar.gz", "has_sig": false, "md5_digest": "fc8be65ef779d055f0c9d62d0e6d9c23", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 97121, "upload_time": "2017-09-05T11:02:52", "upload_time_iso_8601": "2017-09-05T11:02:52.438650Z", "url": "https://files.pythonhosted.org/packages/d8/53/0b4a52179a2fe415110936e825877be97060c6fb4dfe3d0c79fa081e4237/commcare-export-0.15.1.tar.gz", "yanked": false}], "0.15.2": [{"comment_text": "", "digests": {"md5": "a7cea8e6fad930d762f0500a564c8a51", "sha256": "e011e2eb6d6c6f2c987e4a5d1a7f9efd3f750e49b3e739ffcfcd0edfb407d757"}, "downloads": -1, "filename": "commcare-export-0.15.2.tar.gz", "has_sig": false, "md5_digest": "a7cea8e6fad930d762f0500a564c8a51", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 97106, "upload_time": "2017-09-05T14:58:28", "upload_time_iso_8601": "2017-09-05T14:58:28.292840Z", "url": "https://files.pythonhosted.org/packages/c4/7e/84e23bd238b72534447ad11d2f63f1f5d93c2c9bc1026e03d09645b9bfeb/commcare-export-0.15.2.tar.gz", "yanked": false}], "0.16.0": [{"comment_text": "", "digests": {"md5": "81b53d0ddf4c0a128453f784c7a4eb16", "sha256": "bd120ef06e5bd9c28bc64a940ce070a864cff000598db0ca7628796d4b2f2803"}, "downloads": -1, "filename": "commcare-export-0.16.0.tar.gz", "has_sig": false, "md5_digest": "81b53d0ddf4c0a128453f784c7a4eb16", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 97796, "upload_time": "2017-09-20T11:08:30", "upload_time_iso_8601": "2017-09-20T11:08:30.059468Z", "url": "https://files.pythonhosted.org/packages/a3/7f/70a26263eca65104a6573b93515498cae29b1b09412d4ea1c8aca4e8ab4f/commcare-export-0.16.0.tar.gz", "yanked": false}], "0.17.0": [{"comment_text": "", "digests": {"md5": "535fc9f6e696739aca4d1a6bb67879b4", "sha256": "cd941dfa710343deafba81b08e1cac76b261562d12c740d33ad225da828d822d"}, "downloads": -1, "filename": "commcare-export-0.17.0.tar.gz", "has_sig": false, "md5_digest": "535fc9f6e696739aca4d1a6bb67879b4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 97951, "upload_time": "2017-11-23T12:24:03", "upload_time_iso_8601": "2017-11-23T12:24:03.575072Z", "url": "https://files.pythonhosted.org/packages/82/a6/726fc6d49d51a391593184f52bd128d1b76640565c5de5557c87cee11127/commcare-export-0.17.0.tar.gz", "yanked": false}], "0.18.0": [{"comment_text": "", "digests": {"md5": "7021072efa3d7f610f536e64f13286eb", "sha256": "7871d760f3b2fbab494bafa67af75f30c7b027253f0c6a36a5279e9f31852d4e"}, "downloads": -1, "filename": "commcare-export-0.18.0.tar.gz", "has_sig": false, "md5_digest": "7021072efa3d7f610f536e64f13286eb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 98071, "upload_time": "2017-12-04T09:08:13", "upload_time_iso_8601": "2017-12-04T09:08:13.171957Z", "url": "https://files.pythonhosted.org/packages/34/c8/7e7b143730c41d070716636d86e84aea7613d3d2b08adfcda49b0a8a4cea/commcare-export-0.18.0.tar.gz", "yanked": false}], "0.18.1": [{"comment_text": "", "digests": {"md5": "77b550e48ad397bccc658f5696fdbe81", "sha256": "c777e7dc3855647770f0c7b6059b8558f2b8954dcde5e61c183f7dbfa00e643e"}, "downloads": -1, "filename": "commcare-export-0.18.1.tar.gz", "has_sig": false, "md5_digest": "77b550e48ad397bccc658f5696fdbe81", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 98074, "upload_time": "2017-12-08T14:56:24", "upload_time_iso_8601": "2017-12-08T14:56:24.866898Z", "url": "https://files.pythonhosted.org/packages/2f/e9/ee5f79cb9f920e1d9eae5d03cf7594d2fd4eef6bb3cd22b8a5853892e01c/commcare-export-0.18.1.tar.gz", "yanked": false}], "0.19.0": [{"comment_text": "", "digests": {"md5": "f4baca45e286f72d0cad50a4fe541df6", "sha256": "94198fa6543d7dc74bff6c7617b7ac0914ba124efd050d585cb71c6085c97d8a"}, "downloads": -1, "filename": "commcare-export-0.19.0.tar.gz", "has_sig": false, "md5_digest": "f4baca45e286f72d0cad50a4fe541df6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 99633, "upload_time": "2018-01-22T07:52:37", "upload_time_iso_8601": "2018-01-22T07:52:37.788852Z", "url": "https://files.pythonhosted.org/packages/6b/9d/7b4d2d3c0e3a47fcaa59762bd4d2635a0f9f2c767029ff8331f8e2a5055b/commcare-export-0.19.0.tar.gz", "yanked": false}], "0.19.1": [{"comment_text": "", "digests": {"md5": "8c7f1087accef12add608e2e1c9a8fce", "sha256": "96d9f4ac3759d86a3e27128fb3dc274747495abd2a1293b029eb4c4a200308bd"}, "downloads": -1, "filename": "commcare-export-0.19.1.tar.gz", "has_sig": false, "md5_digest": "8c7f1087accef12add608e2e1c9a8fce", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 100248, "upload_time": "2018-01-25T10:58:22", "upload_time_iso_8601": "2018-01-25T10:58:22.623576Z", "url": "https://files.pythonhosted.org/packages/af/90/a5aaaf66d212ce544354bb50f3ae673da82ccf8813bbebee16f0b1794ec6/commcare-export-0.19.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "448ade87841af5b4f7c958b02f93418f", "sha256": "5c9207d6a83465f396eacb9721f2fb1bfd8d9da63e22a88d4ccd1646ebb871e3"}, "downloads": -1, "filename": "commcare-export-0.2.tar.gz", "has_sig": false, "md5_digest": "448ade87841af5b4f7c958b02f93418f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19469, "upload_time": "2013-03-26T15:10:28", "upload_time_iso_8601": "2013-03-26T15:10:28.517822Z", "url": "https://files.pythonhosted.org/packages/7a/eb/882877aede288c49d9bc33f045389f7147cc0c7efa4de710ed75b36f99ee/commcare-export-0.2.tar.gz", "yanked": false}], "0.20.2": [{"comment_text": "", "digests": {"md5": "55885887dbb0418723a3887af7ad962d", "sha256": "d1130c0caa8a72575db64b8a1d4413d994d9265fb76ac5138da82bc832390fc3"}, "downloads": -1, "filename": "commcare-export-0.20.2.tar.gz", "has_sig": false, "md5_digest": "55885887dbb0418723a3887af7ad962d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 100425, "upload_time": "2018-05-04T13:31:08", "upload_time_iso_8601": "2018-05-04T13:31:08.375917Z", "url": "https://files.pythonhosted.org/packages/e7/8d/e028c95d4d3b2cbfea60b51897116b5d5a321ae7fb11db732c5480260081/commcare-export-0.20.2.tar.gz", "yanked": false}], "0.21.2": [{"comment_text": "", "digests": {"md5": "c9499370e20dd211123f8c8dd77ac64e", "sha256": "33daf3b338bcca454b206d7f5bc36288c8d07082968d8ff387a3842b68a4f81b"}, "downloads": -1, "filename": "commcare-export-0.21.2.tar.gz", "has_sig": false, "md5_digest": "c9499370e20dd211123f8c8dd77ac64e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 101734, "upload_time": "2018-05-17T09:07:51", "upload_time_iso_8601": "2018-05-17T09:07:51.861450Z", "url": "https://files.pythonhosted.org/packages/87/86/bc016ef315c4d26a4fe1806cc06d468006ab18c525ce260bc66185f2037d/commcare-export-0.21.2.tar.gz", "yanked": false}], "0.21.3": [{"comment_text": "", "digests": {"md5": "d13741e6c7a6cc362b1316f150b621f1", "sha256": "75a352e663f9a40af967bcd32b12228e66942cde816de19f9e82e160350c2744"}, "downloads": -1, "filename": "commcare-export-0.21.3.tar.gz", "has_sig": false, "md5_digest": "d13741e6c7a6cc362b1316f150b621f1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 101497, "upload_time": "2018-05-30T15:22:09", "upload_time_iso_8601": "2018-05-30T15:22:09.235468Z", "url": "https://files.pythonhosted.org/packages/2c/28/a77a30e625966d0fa45e8c04bbf37cfa76901dc5e138aadde5a067a0dc9d/commcare-export-0.21.3.tar.gz", "yanked": false}], "0.22.0": [{"comment_text": "", "digests": {"md5": "173e1d34d0d800cebfec5ecfb50d36f6", "sha256": "003521e63ceccffb8d7d630d51872041c816ac7f788fd6ab34051150adfa5ed0"}, "downloads": -1, "filename": "commcare-export-0.22.0.tar.gz", "has_sig": false, "md5_digest": "173e1d34d0d800cebfec5ecfb50d36f6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 102023, "upload_time": "2018-05-31T13:43:07", "upload_time_iso_8601": "2018-05-31T13:43:07.842451Z", "url": "https://files.pythonhosted.org/packages/46/8f/7098df08e560d3931dc8206510c1d8648355532d703e50402a7da04e7fb8/commcare-export-0.22.0.tar.gz", "yanked": false}], "0.22.1": [{"comment_text": "", "digests": {"md5": "b0551d8789970fc318536bb461674ed0", "sha256": "3c9a130f57e45f5ac58064dc5b15b76cbcde77ff5a5e71723547a497e37f7620"}, "downloads": -1, "filename": "commcare-export-0.22.1.tar.gz", "has_sig": false, "md5_digest": "b0551d8789970fc318536bb461674ed0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 102036, "upload_time": "2018-07-02T07:53:50", "upload_time_iso_8601": "2018-07-02T07:53:50.554393Z", "url": "https://files.pythonhosted.org/packages/cc/6b/0a2e4a973862dff1a3b7e38c463f4b71a1d540ea8dd755c5762dbbe35d29/commcare-export-0.22.1.tar.gz", "yanked": false}], "0.22.3": [{"comment_text": "", "digests": {"md5": "5762a765fc45cb8d6286e1b9cccd851f", "sha256": "456e21e6ae9e6d3857c174c23c12f872c03d1b1c5a1e95f5efd633956b641f68"}, "downloads": -1, "filename": "commcare-export-0.22.3.tar.gz", "has_sig": false, "md5_digest": "5762a765fc45cb8d6286e1b9cccd851f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 104031, "upload_time": "2018-07-12T14:04:17", "upload_time_iso_8601": "2018-07-12T14:04:17.977736Z", "url": "https://files.pythonhosted.org/packages/8d/07/cca41dc2fa98ba7c161f68f4a8ed8e4076a86c97abef52a5e6671d7b6c1e/commcare-export-0.22.3.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "4acbe1e0abcae12024d91e8dd6c258ff", "sha256": "9353fc2e7bf9624fbc74cb6c39c3977c7e006dbc6875c3f109c70a9c56121aac"}, "downloads": -1, "filename": "commcare-export-0.3.tar.gz", "has_sig": false, "md5_digest": "4acbe1e0abcae12024d91e8dd6c258ff", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20024, "upload_time": "2013-03-26T20:55:09", "upload_time_iso_8601": "2013-03-26T20:55:09.587781Z", "url": "https://files.pythonhosted.org/packages/e1/df/4ce9c98e262b9c9f0309f22a04d3292bf16c7fcd062b17bc78ed48f33718/commcare-export-0.3.tar.gz", "yanked": false}], "0.4": [{"comment_text": "", "digests": {"md5": "8a5d03ab387950dc9d2c4e02f36b6fba", "sha256": "eb32d42f1f97f68f1d6675d460ff87a7fe32c65ac8e30c7e8dc966d137208ed1"}, "downloads": -1, "filename": "commcare-export-0.4.tar.gz", "has_sig": false, "md5_digest": "8a5d03ab387950dc9d2c4e02f36b6fba", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20729, "upload_time": "2013-03-27T19:07:50", "upload_time_iso_8601": "2013-03-27T19:07:50.364436Z", "url": "https://files.pythonhosted.org/packages/9c/b0/8d17db2fcbbf2ab80889c2365a5e9448f053d4f8f2c8c90c53ea195e19a0/commcare-export-0.4.tar.gz", "yanked": false}], "0.5": [{"comment_text": "", "digests": {"md5": "cbe75ffe40d96dc5722cdad56f64f99b", "sha256": "0e8731febbb2fd4b9228e1ffb856896a280b944eb9f2737963d549ad56f7c80d"}, "downloads": -1, "filename": "commcare-export-0.5.tar.gz", "has_sig": false, "md5_digest": "cbe75ffe40d96dc5722cdad56f64f99b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20796, "upload_time": "2013-03-27T20:25:44", "upload_time_iso_8601": "2013-03-27T20:25:44.855914Z", "url": "https://files.pythonhosted.org/packages/57/00/6f7820cdc7198bc5d25b4c69fd2d0c2920639b6850713fc9b7e1d0da6b2e/commcare-export-0.5.tar.gz", "yanked": false}], "0.6": [{"comment_text": "", "digests": {"md5": "05fb9155a324e7c776672abfa6daf277", "sha256": "71182937a8ae2b49cb4ff90e569d6961e794cd2a22edbf7cda1bd2de1fc5eb55"}, "downloads": -1, "filename": "commcare-export-0.6.tar.gz", "has_sig": false, "md5_digest": "05fb9155a324e7c776672abfa6daf277", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21023, "upload_time": "2013-03-28T20:14:30", "upload_time_iso_8601": "2013-03-28T20:14:30.184914Z", "url": "https://files.pythonhosted.org/packages/8f/16/ef6c0f4e23de2a598bcdc0057be4bdc5bd57c0690f24c36b73de0baeb77b/commcare-export-0.6.tar.gz", "yanked": false}], "0.7": [{"comment_text": "", "digests": {"md5": "7e43b98f9360e12c9cabc54258e5242a", "sha256": "37dd858fefe60145be9ddb940999353dbd68651b9d74763d2fefb794e735bb78"}, "downloads": -1, "filename": "commcare-export-0.7.tar.gz", "has_sig": false, "md5_digest": "7e43b98f9360e12c9cabc54258e5242a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21059, "upload_time": "2013-03-29T16:22:12", "upload_time_iso_8601": "2013-03-29T16:22:12.746837Z", "url": "https://files.pythonhosted.org/packages/03/c2/e13fa25272546fe61492ad667ebe263c7c3087382c90fc5c568c45a81673/commcare-export-0.7.tar.gz", "yanked": false}], "0.8": [{"comment_text": "", "digests": {"md5": "d5a12d212e0b7efe3fee970f53b9b025", "sha256": "6f30fb45ac33a701fb9bed4b050ff4eb1f6f24120881450927ef0f9c4718bb8c"}, "downloads": -1, "filename": "commcare-export-0.8.tar.gz", "has_sig": false, "md5_digest": "d5a12d212e0b7efe3fee970f53b9b025", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21585, "upload_time": "2013-03-29T18:06:34", "upload_time_iso_8601": "2013-03-29T18:06:34.088980Z", "url": "https://files.pythonhosted.org/packages/67/1e/0c6bd8c3824cbc4f3014decd4641dfc8c1a04c20904d3ea9f5047de0aee9/commcare-export-0.8.tar.gz", "yanked": false}], "0.9": [{"comment_text": "", "digests": {"md5": "6f748195762c86a894bd88af18a282bb", "sha256": "a60a81c64dfd39c5abaa8ebe5d99e2de3ddcd2b58f727bac89ff59c9431a408a"}, "downloads": -1, "filename": "commcare-export-0.9.tar.gz", "has_sig": false, "md5_digest": "6f748195762c86a894bd88af18a282bb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21623, "upload_time": "2013-04-19T19:29:34", "upload_time_iso_8601": "2013-04-19T19:29:34.135766Z", "url": "https://files.pythonhosted.org/packages/80/54/0b97bbfabf7a018b6d154bbf970fa9f54a9f98d370bd47d67ea4d782492b/commcare-export-0.9.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "77145465091969f24cdea6f46149b2c8", "sha256": "2ad1ffe2434b9d62e2584f869d9f46303c5d9999f400b2d28d3422edd7f0fbd9"}, "downloads": -1, "filename": "commcare_export-1.0.0-py2-none-any.whl", "has_sig": true, "md5_digest": "77145465091969f24cdea6f46149b2c8", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 138711, "upload_time": "2018-09-04T13:05:00", "upload_time_iso_8601": "2018-09-04T13:05:00.788854Z", "url": "https://files.pythonhosted.org/packages/32/28/28b6b5dc9ce1123b8f78cca4ba3d77c9ca29aca6feb2c8ad185aad4b8aa1/commcare_export-1.0.0-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2bc887bf8e075516cd5843a1499e4141", "sha256": "15029c8cdfbe623b34225ee0d3bd0270e57e364b44b3edd4ad62da858e3125c6"}, "downloads": -1, "filename": "commcare-export-1.0.0.tar.gz", "has_sig": true, "md5_digest": "2bc887bf8e075516cd5843a1499e4141", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 109896, "upload_time": "2018-09-04T13:05:17", "upload_time_iso_8601": "2018-09-04T13:05:17.404420Z", "url": "https://files.pythonhosted.org/packages/31/06/66dbbdbf352612bd8155e57760b51c2e29e0fa2fa54be6f08790d55b960b/commcare-export-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "ddf84a1203a0304d0b1ce116e4f72511", "sha256": "0c3d2bae1273f8a84fa683174c920372dcd77181e50101b4f288020770a03e6f"}, "downloads": -1, "filename": "commcare-export-1.0.1.tar.gz", "has_sig": true, "md5_digest": "ddf84a1203a0304d0b1ce116e4f72511", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 109920, "upload_time": "2018-10-08T11:09:20", "upload_time_iso_8601": "2018-10-08T11:09:20.097389Z", "url": "https://files.pythonhosted.org/packages/98/de/291b9823f391297a82607a7084249a4c63aaae051085641f6e3e1c65c47b/commcare-export-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "3313e250a0d158645d05fe39691c80c2", "sha256": "c9567d320938c4625df9a35b38896879eea3ec204c6fcd672b9adc6ac5db74ee"}, "downloads": -1, "filename": "commcare-export-1.0.2.tar.gz", "has_sig": true, "md5_digest": "3313e250a0d158645d05fe39691c80c2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 109930, "upload_time": "2018-10-11T12:13:48", "upload_time_iso_8601": "2018-10-11T12:13:48.120341Z", "url": "https://files.pythonhosted.org/packages/58/6b/6e261c8517b23a6580c79777dd0ed6032102db239c8c349c279e65de8de6/commcare-export-1.0.2.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "7184859905ed92de8bcde614d2746bea", "sha256": "e0a84ad6eeb57283239f96dc1e46e780b89be9a7ea1967014e0b69fbe4095f85"}, "downloads": -1, "filename": "commcare-export-1.1.0.tar.gz", "has_sig": false, "md5_digest": "7184859905ed92de8bcde614d2746bea", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 121765, "upload_time": "2018-12-24T22:17:06", "upload_time_iso_8601": "2018-12-24T22:17:06.750261Z", "url": "https://files.pythonhosted.org/packages/02/45/46c8b7d3c382f638e66d4fe4375fa054251e83ddde65445e5dae7322f306/commcare-export-1.1.0.tar.gz", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "e1ebdc214f46f1fe50352b83ace18874", "sha256": "4f74b2895552dd48452578dfad324126f2d18910f64c1cb66031887793c545f2"}, "downloads": -1, "filename": "commcare-export-1.1.1.tar.gz", "has_sig": true, "md5_digest": "e1ebdc214f46f1fe50352b83ace18874", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 110486, "upload_time": "2019-02-05T10:39:22", "upload_time_iso_8601": "2019-02-05T10:39:22.370512Z", "url": "https://files.pythonhosted.org/packages/b7/d2/f0e85798d935cc9c3b51d12d62f4f844da87e26c15752823c56b8ad55260/commcare-export-1.1.1.tar.gz", "yanked": false}], "1.2.0": [{"comment_text": "", "digests": {"md5": "3309e101a708346541f9f82e306f9bfb", "sha256": "2f4d2d5e4943f6d2b9e5741a0b350533696d5d1d12370373c5dd60d82fcef4e7"}, "downloads": -1, "filename": "commcare_export-1.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "3309e101a708346541f9f82e306f9bfb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 134133, "upload_time": "2019-07-10T15:01:11", "upload_time_iso_8601": "2019-07-10T15:01:11.826118Z", "url": "https://files.pythonhosted.org/packages/95/ae/a969146f048a365b800a5dba5377692c5cdf0df7010f5d75c43e06f5a736/commcare_export-1.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5d41eaac159cac2a4a243adad20e60d5", "sha256": "3d2af663b4607eab1aec19fced966d05b31fcea967de1d9f47f6581bcbbcc476"}, "downloads": -1, "filename": "commcare-export-1.2.0.tar.gz", "has_sig": false, "md5_digest": "5d41eaac159cac2a4a243adad20e60d5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 112476, "upload_time": "2019-07-10T15:01:02", "upload_time_iso_8601": "2019-07-10T15:01:02.852193Z", "url": "https://files.pythonhosted.org/packages/fc/86/a7d658304602db19940bd74afd4365d0fc3f6754344a0ea3df21c1279822/commcare-export-1.2.0.tar.gz", "yanked": false}], "1.2.1": [{"comment_text": "", "digests": {"md5": "89f42adc7292adfcbe834304f56598b6", "sha256": "ec4aa594222c290449a6a752d4c4270210ca05d454cb721216d70c836f807206"}, "downloads": -1, "filename": "commcare-export-1.2.1.tar.gz", "has_sig": false, "md5_digest": "89f42adc7292adfcbe834304f56598b6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 120528, "upload_time": "2019-08-23T14:12:32", "upload_time_iso_8601": "2019-08-23T14:12:32.846472Z", "url": "https://files.pythonhosted.org/packages/a2/f2/8cc479d992761ed31009eae3ec6a840a44afc22bd5feb93ab71b836cb571/commcare-export-1.2.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "89f42adc7292adfcbe834304f56598b6", "sha256": "ec4aa594222c290449a6a752d4c4270210ca05d454cb721216d70c836f807206"}, "downloads": -1, "filename": "commcare-export-1.2.1.tar.gz", "has_sig": false, "md5_digest": "89f42adc7292adfcbe834304f56598b6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 120528, "upload_time": "2019-08-23T14:12:32", "upload_time_iso_8601": "2019-08-23T14:12:32.846472Z", "url": "https://files.pythonhosted.org/packages/a2/f2/8cc479d992761ed31009eae3ec6a840a44afc22bd5feb93ab71b836cb571/commcare-export-1.2.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:44:23 2020"}