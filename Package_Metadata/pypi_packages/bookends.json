{"info": {"author": "Tom Berry", "author_email": "tberry860@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "A simple syntax for piping in Python.\n\nCompare:\n\n.. code-block:: python\n\n  from bookends import _\n  from toolz.curried import map\n\n  l = _| [3, 2, 1] | map(lambda n: n*2) | sorted |_   # [2, 4, 6]\n\nwith:\n\n.. code-block:: python\n\n  l = sorted(map(lambda n: n*2, [3, 2, 1]))\n\n  l = sorted([n*2 for n in [3, 2, 1]])\n\n  l = []\n  for n in [3, 2, 1]:\n      l.append(n*2)\n  l.sort()\n  \nFor an extended comparison, see `example.py <https://github.com/berrytj/bookends/blob/master/example.py>`_.\n\n\nTo install:\n\n.. code-block:: python\n\n  pip install bookends\n\n\nTo use:\n\n.. code-block:: python\n\n  from bookends import _\n\n\nFor similar tools, see:\n\n- `from fn import F <https://github.com/kachayev/fn.py>`_\n- `from toolz import thread_first, thread_last <http://toolz.readthedocs.org/en/latest/api.html?highlight=thread_first#toolz.functoolz.thread_first>`_, `pipe <http://toolz.readthedocs.org/en/latest/api.html#toolz.functoolz.pipe>`_\n- `Clojure's -> and ->> <http://clojure.github.io/clojure/clojure.core-api.html#clojure.core/-%3e>`_\n- `Underscore's chain <http://underscorejs.org/#chain>`_\n- Unix |\n\n\nNote: for multiline usage, wrap the expression in parens.\n\n.. code-block:: python\n\n  import csv\n  from StringIO import StringIO\n\n  (_| '40,5,10\\n20,6,9\\n41,10,10\\n'\n    | StringIO\n    | csv.reader\n    | sorted\n    |_)\n\n  # [['20', '6', '9'], ['40', '5', '10'], ['41', '10', '10']]\n            \n\nWrap lone lambdas in parens as well.\n\n.. code-block:: python\n  \n  (_| ['addition', 'multiplication']\n    | (lambda l: l + ['exponentiation', 'tetration'])\n    | ', '.join\n    |_)\n\n  # 'addition, multiplication, exponentiation, tetration'\n\n\nYou can use partial or `curried <http://toolz.readthedocs.org/en/latest/curry.html>`_ functions.\n\n.. code-block:: python\n  \n  from functools import partial\n  from toolz.curried import drop\n\n  (_| ['ca', 'tx', 'ny']\n    | partial(map, lambda state: state.upper())\n    | drop(1)\n    | list\n    |_)\n\n  # ['TX', 'NY']\n\n\nAnd/or use `threading <http://toolz.readthedocs.org/en/latest/api.html#toolz.functoolz.thread_last>`_ syntax, by putting each function and its arguments into a tuple.\n\n.. code-block:: python\n  \n  from toolz import drop\n\n  (_| ['ca', 'tx', 'ny']\n    | (map, lambda state: state.upper())\n    | (drop, 1)\n    | list\n    |_)\n\n  # ['TX', 'NY']\n\n\nIf you don't like the underscore, import the bookend as B.\n\n.. code-block:: python\n  \n  from bookends import B\n\n  (B| ['ca', 'tx', 'ny']\n    | (map, lambda state: state.upper())\n    | (drop, 1)\n    | list\n    |B)\n\n\nTo stop in the debugger before each function call, put a :code:`step` into the pipe.\n\n.. code-block:: python\n  \n  from bookends import step\n\n  (_| [3, 2, 1]\n    | (map, lambda x: x*2)\n    | step               # <==\n    | sorted\n    | sum\n    |_)\n\n\nTo call off the stepping, drop in an :code:`endstep`.\n\n.. code-block:: python\n  \n  from bookends import step, endstep\n\n  (_| [3, 2, 1]\n    | (map, lambda x: x*2)\n    | step               # <==\n    | sorted\n    | endstep            # <==\n    | sum\n    |_)\n\n\nTo print each function and its output, drop in a :code:`verbose`.\n\n.. code-block:: python\n  \n  from bookends import verbose\n\n  (_| [3, 2, 1]\n    | verbose            # <==\n    | (map, lambda x: x*2)\n    | sorted\n    | sum\n    |_)\n\n\nYou can easily add these options while debugging by tacking on their first letter to the initial bookend.\n\n.. code-block:: python\n  \n  (_.sv| [3, 2, 1]       # <== Turn on step and verbose (_.s, _.v, and _.vs work too).\n    | (map, lambda x: x*2)\n    | sorted\n    | sum\n    |_)\n\n\nDrop in a function that won't affect the operand by decorating it with passthrough.\n\n.. code-block:: python\n\n  from bookends import passthrough\n\n  @passthrough\n  def log(operand):\n    log.info('Operand was {}.'.format(operand))\n  \n  (_| [3, 2, 1]\n    | (map, lambda x: x*2)\n    | log                # <==\n    | sorted\n    |_)\n\n\nPlays nice with `Kachayev's _ <https://github.com/kachayev/fn.py>`_.\n\n.. code-block:: python\n  \n  from fn import _ as __\n\n  _| [1, 2, 3] | __ + [4, 5] |_\n\n  # [1, 2, 3, 4, 5]\n\n\nHere's a simplified version of the source:\n\n.. code-block:: python\n\n  class Bookend():\n    def __or__(self, operand):\n      return Pipe(operand)\n\n\n  class Pipe():\n    def __init__(self, operand):\n      self.operand = operand\n\n    def __or__(self, f):\n      if isinstance(f, Bookend):\n        return self.operand\n      else:\n        self.operand = f(self.operand)\n        return self\n\n\n  _ = Bookend()\n\n\nContact: `@bzrry <https://twitter.com/bzrry>`_.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/berrytj/bookends", "keywords": "functional pipe", "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "bookends", "package_url": "https://pypi.org/project/bookends/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/bookends/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://github.com/berrytj/bookends"}, "release_url": "https://pypi.org/project/bookends/0.0.5/", "requires_dist": null, "requires_python": null, "summary": "A simple piping syntax", "version": "0.0.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>A simple syntax for piping in Python.</p>\n<p>Compare:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">bookends</span> <span class=\"kn\">import</span> <span class=\"n\">_</span>\n<span class=\"kn\">from</span> <span class=\"nn\">toolz.curried</span> <span class=\"kn\">import</span> <span class=\"nb\">map</span>\n\n<span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"n\">_</span><span class=\"o\">|</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">n</span><span class=\"p\">:</span> <span class=\"n\">n</span><span class=\"o\">*</span><span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"o\">|</span> <span class=\"nb\">sorted</span> <span class=\"o\">|</span><span class=\"n\">_</span>   <span class=\"c1\"># [2, 4, 6]</span>\n</pre>\n<p>with:</p>\n<pre><span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">n</span><span class=\"p\">:</span> <span class=\"n\">n</span><span class=\"o\">*</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]))</span>\n\n<span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"nb\">sorted</span><span class=\"p\">([</span><span class=\"n\">n</span><span class=\"o\">*</span><span class=\"mi\">2</span> <span class=\"k\">for</span> <span class=\"n\">n</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]])</span>\n\n<span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"k\">for</span> <span class=\"n\">n</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]:</span>\n    <span class=\"n\">l</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"o\">*</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">l</span><span class=\"o\">.</span><span class=\"n\">sort</span><span class=\"p\">()</span>\n</pre>\n<p>For an extended comparison, see <a href=\"https://github.com/berrytj/bookends/blob/master/example.py\" rel=\"nofollow\">example.py</a>.</p>\n<p>To install:</p>\n<pre><span class=\"n\">pip</span> <span class=\"n\">install</span> <span class=\"n\">bookends</span>\n</pre>\n<p>To use:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">bookends</span> <span class=\"kn\">import</span> <span class=\"n\">_</span>\n</pre>\n<p>For similar tools, see:</p>\n<ul>\n<li><a href=\"https://github.com/kachayev/fn.py\" rel=\"nofollow\">from fn import F</a></li>\n<li><a href=\"http://toolz.readthedocs.org/en/latest/api.html?highlight=thread_first#toolz.functoolz.thread_first\" rel=\"nofollow\">from toolz import thread_first, thread_last</a>, <a href=\"http://toolz.readthedocs.org/en/latest/api.html#toolz.functoolz.pipe\" rel=\"nofollow\">pipe</a></li>\n<li><a href=\"http://clojure.github.io/clojure/clojure.core-api.html#clojure.core/-%3e\" rel=\"nofollow\">Clojure\u2019s -&gt; and -&gt;&gt;</a></li>\n<li><a href=\"http://underscorejs.org/#chain\" rel=\"nofollow\">Underscore\u2019s chain</a></li>\n<li>Unix |</li>\n</ul>\n<p>Note: for multiline usage, wrap the expression in parens.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">csv</span>\n<span class=\"kn\">from</span> <span class=\"nn\">StringIO</span> <span class=\"kn\">import</span> <span class=\"n\">StringIO</span>\n\n<span class=\"p\">(</span><span class=\"n\">_</span><span class=\"o\">|</span> <span class=\"s1\">'40,5,10</span><span class=\"se\">\\n</span><span class=\"s1\">20,6,9</span><span class=\"se\">\\n</span><span class=\"s1\">41,10,10</span><span class=\"se\">\\n</span><span class=\"s1\">'</span>\n  <span class=\"o\">|</span> <span class=\"n\">StringIO</span>\n  <span class=\"o\">|</span> <span class=\"n\">csv</span><span class=\"o\">.</span><span class=\"n\">reader</span>\n  <span class=\"o\">|</span> <span class=\"nb\">sorted</span>\n  <span class=\"o\">|</span><span class=\"n\">_</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># [['20', '6', '9'], ['40', '5', '10'], ['41', '10', '10']]</span>\n</pre>\n<p>Wrap lone lambdas in parens as well.</p>\n<pre><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"o\">|</span> <span class=\"p\">[</span><span class=\"s1\">'addition'</span><span class=\"p\">,</span> <span class=\"s1\">'multiplication'</span><span class=\"p\">]</span>\n  <span class=\"o\">|</span> <span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">l</span><span class=\"p\">:</span> <span class=\"n\">l</span> <span class=\"o\">+</span> <span class=\"p\">[</span><span class=\"s1\">'exponentiation'</span><span class=\"p\">,</span> <span class=\"s1\">'tetration'</span><span class=\"p\">])</span>\n  <span class=\"o\">|</span> <span class=\"s1\">', '</span><span class=\"o\">.</span><span class=\"n\">join</span>\n  <span class=\"o\">|</span><span class=\"n\">_</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># 'addition, multiplication, exponentiation, tetration'</span>\n</pre>\n<p>You can use partial or <a href=\"http://toolz.readthedocs.org/en/latest/curry.html\" rel=\"nofollow\">curried</a> functions.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">functools</span> <span class=\"kn\">import</span> <span class=\"n\">partial</span>\n<span class=\"kn\">from</span> <span class=\"nn\">toolz.curried</span> <span class=\"kn\">import</span> <span class=\"n\">drop</span>\n\n<span class=\"p\">(</span><span class=\"n\">_</span><span class=\"o\">|</span> <span class=\"p\">[</span><span class=\"s1\">'ca'</span><span class=\"p\">,</span> <span class=\"s1\">'tx'</span><span class=\"p\">,</span> <span class=\"s1\">'ny'</span><span class=\"p\">]</span>\n  <span class=\"o\">|</span> <span class=\"n\">partial</span><span class=\"p\">(</span><span class=\"nb\">map</span><span class=\"p\">,</span> <span class=\"k\">lambda</span> <span class=\"n\">state</span><span class=\"p\">:</span> <span class=\"n\">state</span><span class=\"o\">.</span><span class=\"n\">upper</span><span class=\"p\">())</span>\n  <span class=\"o\">|</span> <span class=\"n\">drop</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n  <span class=\"o\">|</span> <span class=\"nb\">list</span>\n  <span class=\"o\">|</span><span class=\"n\">_</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># ['TX', 'NY']</span>\n</pre>\n<p>And/or use <a href=\"http://toolz.readthedocs.org/en/latest/api.html#toolz.functoolz.thread_last\" rel=\"nofollow\">threading</a> syntax, by putting each function and its arguments into a tuple.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">toolz</span> <span class=\"kn\">import</span> <span class=\"n\">drop</span>\n\n<span class=\"p\">(</span><span class=\"n\">_</span><span class=\"o\">|</span> <span class=\"p\">[</span><span class=\"s1\">'ca'</span><span class=\"p\">,</span> <span class=\"s1\">'tx'</span><span class=\"p\">,</span> <span class=\"s1\">'ny'</span><span class=\"p\">]</span>\n  <span class=\"o\">|</span> <span class=\"p\">(</span><span class=\"nb\">map</span><span class=\"p\">,</span> <span class=\"k\">lambda</span> <span class=\"n\">state</span><span class=\"p\">:</span> <span class=\"n\">state</span><span class=\"o\">.</span><span class=\"n\">upper</span><span class=\"p\">())</span>\n  <span class=\"o\">|</span> <span class=\"p\">(</span><span class=\"n\">drop</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n  <span class=\"o\">|</span> <span class=\"nb\">list</span>\n  <span class=\"o\">|</span><span class=\"n\">_</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># ['TX', 'NY']</span>\n</pre>\n<p>If you don\u2019t like the underscore, import the bookend as B.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">bookends</span> <span class=\"kn\">import</span> <span class=\"n\">B</span>\n\n<span class=\"p\">(</span><span class=\"n\">B</span><span class=\"o\">|</span> <span class=\"p\">[</span><span class=\"s1\">'ca'</span><span class=\"p\">,</span> <span class=\"s1\">'tx'</span><span class=\"p\">,</span> <span class=\"s1\">'ny'</span><span class=\"p\">]</span>\n  <span class=\"o\">|</span> <span class=\"p\">(</span><span class=\"nb\">map</span><span class=\"p\">,</span> <span class=\"k\">lambda</span> <span class=\"n\">state</span><span class=\"p\">:</span> <span class=\"n\">state</span><span class=\"o\">.</span><span class=\"n\">upper</span><span class=\"p\">())</span>\n  <span class=\"o\">|</span> <span class=\"p\">(</span><span class=\"n\">drop</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n  <span class=\"o\">|</span> <span class=\"nb\">list</span>\n  <span class=\"o\">|</span><span class=\"n\">B</span><span class=\"p\">)</span>\n</pre>\n<p>To stop in the debugger before each function call, put a <code>step</code> into the pipe.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">bookends</span> <span class=\"kn\">import</span> <span class=\"n\">step</span>\n\n<span class=\"p\">(</span><span class=\"n\">_</span><span class=\"o\">|</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n  <span class=\"o\">|</span> <span class=\"p\">(</span><span class=\"nb\">map</span><span class=\"p\">,</span> <span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"o\">*</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n  <span class=\"o\">|</span> <span class=\"n\">step</span>               <span class=\"c1\"># &lt;==</span>\n  <span class=\"o\">|</span> <span class=\"nb\">sorted</span>\n  <span class=\"o\">|</span> <span class=\"nb\">sum</span>\n  <span class=\"o\">|</span><span class=\"n\">_</span><span class=\"p\">)</span>\n</pre>\n<p>To call off the stepping, drop in an <code>endstep</code>.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">bookends</span> <span class=\"kn\">import</span> <span class=\"n\">step</span><span class=\"p\">,</span> <span class=\"n\">endstep</span>\n\n<span class=\"p\">(</span><span class=\"n\">_</span><span class=\"o\">|</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n  <span class=\"o\">|</span> <span class=\"p\">(</span><span class=\"nb\">map</span><span class=\"p\">,</span> <span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"o\">*</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n  <span class=\"o\">|</span> <span class=\"n\">step</span>               <span class=\"c1\"># &lt;==</span>\n  <span class=\"o\">|</span> <span class=\"nb\">sorted</span>\n  <span class=\"o\">|</span> <span class=\"n\">endstep</span>            <span class=\"c1\"># &lt;==</span>\n  <span class=\"o\">|</span> <span class=\"nb\">sum</span>\n  <span class=\"o\">|</span><span class=\"n\">_</span><span class=\"p\">)</span>\n</pre>\n<p>To print each function and its output, drop in a <code>verbose</code>.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">bookends</span> <span class=\"kn\">import</span> <span class=\"n\">verbose</span>\n\n<span class=\"p\">(</span><span class=\"n\">_</span><span class=\"o\">|</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n  <span class=\"o\">|</span> <span class=\"n\">verbose</span>            <span class=\"c1\"># &lt;==</span>\n  <span class=\"o\">|</span> <span class=\"p\">(</span><span class=\"nb\">map</span><span class=\"p\">,</span> <span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"o\">*</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n  <span class=\"o\">|</span> <span class=\"nb\">sorted</span>\n  <span class=\"o\">|</span> <span class=\"nb\">sum</span>\n  <span class=\"o\">|</span><span class=\"n\">_</span><span class=\"p\">)</span>\n</pre>\n<p>You can easily add these options while debugging by tacking on their first letter to the initial bookend.</p>\n<pre><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"o\">.</span><span class=\"n\">sv</span><span class=\"o\">|</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>       <span class=\"c1\"># &lt;== Turn on step and verbose (_.s, _.v, and _.vs work too).</span>\n  <span class=\"o\">|</span> <span class=\"p\">(</span><span class=\"nb\">map</span><span class=\"p\">,</span> <span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"o\">*</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n  <span class=\"o\">|</span> <span class=\"nb\">sorted</span>\n  <span class=\"o\">|</span> <span class=\"nb\">sum</span>\n  <span class=\"o\">|</span><span class=\"n\">_</span><span class=\"p\">)</span>\n</pre>\n<p>Drop in a function that won\u2019t affect the operand by decorating it with passthrough.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">bookends</span> <span class=\"kn\">import</span> <span class=\"n\">passthrough</span>\n\n<span class=\"nd\">@passthrough</span>\n<span class=\"k\">def</span> <span class=\"nf\">log</span><span class=\"p\">(</span><span class=\"n\">operand</span><span class=\"p\">):</span>\n  <span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s1\">'Operand was </span><span class=\"si\">{}</span><span class=\"s1\">.'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">operand</span><span class=\"p\">))</span>\n\n<span class=\"p\">(</span><span class=\"n\">_</span><span class=\"o\">|</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n  <span class=\"o\">|</span> <span class=\"p\">(</span><span class=\"nb\">map</span><span class=\"p\">,</span> <span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"o\">*</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n  <span class=\"o\">|</span> <span class=\"n\">log</span>                <span class=\"c1\"># &lt;==</span>\n  <span class=\"o\">|</span> <span class=\"nb\">sorted</span>\n  <span class=\"o\">|</span><span class=\"n\">_</span><span class=\"p\">)</span>\n</pre>\n<p>Plays nice with <a href=\"https://github.com/kachayev/fn.py\" rel=\"nofollow\">Kachayev\u2019s _</a>.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">fn</span> <span class=\"kn\">import</span> <span class=\"n\">_</span> <span class=\"k\">as</span> <span class=\"n\">__</span>\n\n<span class=\"n\">_</span><span class=\"o\">|</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"n\">__</span> <span class=\"o\">+</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">]</span> <span class=\"o\">|</span><span class=\"n\">_</span>\n\n<span class=\"c1\"># [1, 2, 3, 4, 5]</span>\n</pre>\n<p>Here\u2019s a simplified version of the source:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">Bookend</span><span class=\"p\">():</span>\n  <span class=\"k\">def</span> <span class=\"fm\">__or__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">operand</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">Pipe</span><span class=\"p\">(</span><span class=\"n\">operand</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Pipe</span><span class=\"p\">():</span>\n  <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">operand</span><span class=\"p\">):</span>\n    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">operand</span> <span class=\"o\">=</span> <span class=\"n\">operand</span>\n\n  <span class=\"k\">def</span> <span class=\"fm\">__or__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">f</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"n\">Bookend</span><span class=\"p\">):</span>\n      <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">operand</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n      <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">operand</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">operand</span><span class=\"p\">)</span>\n      <span class=\"k\">return</span> <span class=\"bp\">self</span>\n\n\n<span class=\"n\">_</span> <span class=\"o\">=</span> <span class=\"n\">Bookend</span><span class=\"p\">()</span>\n</pre>\n<p>Contact: <a href=\"https://twitter.com/bzrry\" rel=\"nofollow\">@bzrry</a>.</p>\n\n          </div>"}, "last_serial": 1190694, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "c6d65b6bacb81022711e6dd3310967e8", "sha256": "8e73da3cc08ccfbbe00a870837e7a4745e5fc3596c54e4ec433779c16e15944d"}, "downloads": -1, "filename": "bookends-0.0.1.tar.gz", "has_sig": false, "md5_digest": "c6d65b6bacb81022711e6dd3310967e8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2321, "upload_time": "2014-08-02T22:44:38", "upload_time_iso_8601": "2014-08-02T22:44:38.533285Z", "url": "https://files.pythonhosted.org/packages/7f/f5/33ed35b79f9df2f1ba07327cb02dda605c98d93e1278f08672cbe972420a/bookends-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "0ce4c55046709976b7e9283ebe21b185", "sha256": "105c2462ba5bbf64818d39bbd223ba05acb06ffff3abcb88d531ccf1bb366ee7"}, "downloads": -1, "filename": "bookends-0.0.2.tar.gz", "has_sig": false, "md5_digest": "0ce4c55046709976b7e9283ebe21b185", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2408, "upload_time": "2014-08-03T18:13:09", "upload_time_iso_8601": "2014-08-03T18:13:09.126354Z", "url": "https://files.pythonhosted.org/packages/86/ae/5d0ff5fd6e35e221d5dcf8d36d341c9c778e2222dfe4862b3336877ba3d5/bookends-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "b10cd5162a1820d2b75fbb4ddbdfd6da", "sha256": "ac998423535b1bd063f8049d351a39302380082c0a8fac6867c697f92f3520dc"}, "downloads": -1, "filename": "bookends-0.0.3.tar.gz", "has_sig": false, "md5_digest": "b10cd5162a1820d2b75fbb4ddbdfd6da", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4771, "upload_time": "2014-08-13T20:34:29", "upload_time_iso_8601": "2014-08-13T20:34:29.243446Z", "url": "https://files.pythonhosted.org/packages/f5/6f/3698bebbf3a9e39e4bc80cfa82fe726b6c7d6d92acbb32753b3e08fba4f2/bookends-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "52ad2e20bd883cac5901825858ceb6df", "sha256": "0fcf2390a432e8407369bb206394e423db185df0437a7f92975ed2e3716b0c12"}, "downloads": -1, "filename": "bookends-0.0.4.tar.gz", "has_sig": false, "md5_digest": "52ad2e20bd883cac5901825858ceb6df", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4787, "upload_time": "2014-08-13T20:41:18", "upload_time_iso_8601": "2014-08-13T20:41:18.448596Z", "url": "https://files.pythonhosted.org/packages/63/81/fa6353ada0629f78081b1904df6607901f58aad9267b8e5a2364aea4c840/bookends-0.0.4.tar.gz", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "8ca5bd1b0db6c85cadb2ca947b333189", "sha256": "bd74153e6a55714a00d007e0872cbc9fb4781de648e4acb0812baa10e23bbcd5"}, "downloads": -1, "filename": "bookends-0.0.5.tar.gz", "has_sig": false, "md5_digest": "8ca5bd1b0db6c85cadb2ca947b333189", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4779, "upload_time": "2014-08-14T17:25:19", "upload_time_iso_8601": "2014-08-14T17:25:19.875903Z", "url": "https://files.pythonhosted.org/packages/e1/76/12863e1aee582ac25704d3f95bcdbb125d70eb7d4504cde0f6fa075ae621/bookends-0.0.5.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "8ca5bd1b0db6c85cadb2ca947b333189", "sha256": "bd74153e6a55714a00d007e0872cbc9fb4781de648e4acb0812baa10e23bbcd5"}, "downloads": -1, "filename": "bookends-0.0.5.tar.gz", "has_sig": false, "md5_digest": "8ca5bd1b0db6c85cadb2ca947b333189", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4779, "upload_time": "2014-08-14T17:25:19", "upload_time_iso_8601": "2014-08-14T17:25:19.875903Z", "url": "https://files.pythonhosted.org/packages/e1/76/12863e1aee582ac25704d3f95bcdbb125d70eb7d4504cde0f6fa075ae621/bookends-0.0.5.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:36:44 2020"}