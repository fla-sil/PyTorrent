{"info": {"author": "Oleksandr Semeniuta", "author_email": "oleksandr.semeniuta@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "# EPypes \n\nEPypes (for *event-driven piplines*) is a Python library for developing data processing algorithms in a form of computational graphs and their integration with distributed systems based on publish-subscribe communication. The initial use case of EPypes is computer vision alogorithms development, although it is suitable for any algorithm that can be expressed as a directed acyclic graph. \n\nEPypes facilitates flexibility of algorithm prototyping, as well as provides a structured approach to managing algorithm logic and exposing the developed pipelines as a part of on-line publish-subscribe systems. Currently, ZeroMQ middleware is supported, with data serialization based on Protocol Buffers.\n\n## Modules\n\nThe most important modules include:\n\n * `compgraph`, `graph` -- primitives for construction and execution of computational graphs\n * `pipeline`, `node` -- primitives for extendind computational graphs with additional functionality, specifically the reactive behavior\n * `zeromq` -- adapters to ZeroMQ middleware\n * `reactivevision` -- functionality for creation of reactive computer vision components\n\n## Installation and requirements\n\nThe core dependencies for the EPypes codebase include `pyzmq`, `protobuf`, and `networkx>=2.0`. They are listed in the `requirements.txt` file, and can be installed in one of the following ways:\n\n```bash\n# using pip\n$ pip install -r requirements.txt\n\n# using conda\n$ while read requirement; do conda install --yes $requirement -c conda-forge; done < requirements.txt\n```\n\n## Usage examples\n\nThe example below demostrates construction and execution of a computational graph. The demonstrated algorithm accepts a BGR image, converts it to grayscale, blurs the grayscale, and feeds the blurred image to the Canny edge detector.\n\n```python\nimport cv2\nfrom epypes.compgraph import CompGraph\nfrom epypes.compgraph import CompGraphRunner\n\ndef grayscale(im):\n    return cv2.cvtColor(im, cv2.COLOR_BGR2GRAY)\n\ndef gaussian_blur(im, kernel_size):\n    return cv2.GaussianBlur(im, (kernel_size, kernel_size), 0)\n\nif __name__ == '__main__':\n\n    func_dict = {\n        'grayscale': grayscale,\n        'canny': cv2.Canny,\n        'blur': gaussian_blur\n    }\n\n    func_io = {\n        'grayscale': ('image', 'image_gray'),\n        'blur': (('image_gray', 'blur_kernel'), 'image_blurred'),\n        'canny': (('image_blurred', 'canny_lo', 'canny_hi'), 'edges'),\n    }\n\n    hparams = {\n        'blur_kernel': 11,\n        'canny_lo': 70,\n        'canny_hi': 200\n    }\n\n    cg = CompGraph(func_dict, func_io)\n    runner = CompGraphRunner(cg, hparams)\n\n    im = cv2.imread('my_image.jpg', cv2.IMREAD_COLOR)\n    runner.run(image=im)\n```\n\nFor more complex computational graphs examples, refer to the following Jupyter notebooks:\n\n * [Simple lane lines detection (Udacity CarND project)](https://github.com/semeniuta/CarND-LaneLines-P1/blob/master/P1_1_Pipeline_demo.ipynb)\n * [More advanced lane lines detection (Udacity CarND project)](https://github.com/semeniuta/CarND-Advanced-Lane-Lines/blob/master/7_pipeline_prototyping_3.ipynb)\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "", "license": "BSD license", "maintainer": "", "maintainer_email": "", "name": "epypes", "package_url": "https://pypi.org/project/epypes/", "platform": "", "project_url": "https://pypi.org/project/epypes/", "project_urls": null, "release_url": "https://pypi.org/project/epypes/0.1.1/", "requires_dist": ["pyzmq", "protobuf", "networkx (>=2.0)"], "requires_python": "", "summary": "", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>EPypes</h1>\n<p>EPypes (for <em>event-driven piplines</em>) is a Python library for developing data processing algorithms in a form of computational graphs and their integration with distributed systems based on publish-subscribe communication. The initial use case of EPypes is computer vision alogorithms development, although it is suitable for any algorithm that can be expressed as a directed acyclic graph.</p>\n<p>EPypes facilitates flexibility of algorithm prototyping, as well as provides a structured approach to managing algorithm logic and exposing the developed pipelines as a part of on-line publish-subscribe systems. Currently, ZeroMQ middleware is supported, with data serialization based on Protocol Buffers.</p>\n<h2>Modules</h2>\n<p>The most important modules include:</p>\n<ul>\n<li><code>compgraph</code>, <code>graph</code> -- primitives for construction and execution of computational graphs</li>\n<li><code>pipeline</code>, <code>node</code> -- primitives for extendind computational graphs with additional functionality, specifically the reactive behavior</li>\n<li><code>zeromq</code> -- adapters to ZeroMQ middleware</li>\n<li><code>reactivevision</code> -- functionality for creation of reactive computer vision components</li>\n</ul>\n<h2>Installation and requirements</h2>\n<p>The core dependencies for the EPypes codebase include <code>pyzmq</code>, <code>protobuf</code>, and <code>networkx&gt;=2.0</code>. They are listed in the <code>requirements.txt</code> file, and can be installed in one of the following ways:</p>\n<pre><span class=\"c1\"># using pip</span>\n$ pip install -r requirements.txt\n\n<span class=\"c1\"># using conda</span>\n$ <span class=\"k\">while</span> <span class=\"nb\">read</span> requirement<span class=\"p\">;</span> <span class=\"k\">do</span> conda install --yes <span class=\"nv\">$requirement</span> -c conda-forge<span class=\"p\">;</span> <span class=\"k\">done</span> &lt; requirements.txt\n</pre>\n<h2>Usage examples</h2>\n<p>The example below demostrates construction and execution of a computational graph. The demonstrated algorithm accepts a BGR image, converts it to grayscale, blurs the grayscale, and feeds the blurred image to the Canny edge detector.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">cv2</span>\n<span class=\"kn\">from</span> <span class=\"nn\">epypes.compgraph</span> <span class=\"kn\">import</span> <span class=\"n\">CompGraph</span>\n<span class=\"kn\">from</span> <span class=\"nn\">epypes.compgraph</span> <span class=\"kn\">import</span> <span class=\"n\">CompGraphRunner</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">grayscale</span><span class=\"p\">(</span><span class=\"n\">im</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">cv2</span><span class=\"o\">.</span><span class=\"n\">cvtColor</span><span class=\"p\">(</span><span class=\"n\">im</span><span class=\"p\">,</span> <span class=\"n\">cv2</span><span class=\"o\">.</span><span class=\"n\">COLOR_BGR2GRAY</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">gaussian_blur</span><span class=\"p\">(</span><span class=\"n\">im</span><span class=\"p\">,</span> <span class=\"n\">kernel_size</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">cv2</span><span class=\"o\">.</span><span class=\"n\">GaussianBlur</span><span class=\"p\">(</span><span class=\"n\">im</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">kernel_size</span><span class=\"p\">,</span> <span class=\"n\">kernel_size</span><span class=\"p\">),</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n\n    <span class=\"n\">func_dict</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'grayscale'</span><span class=\"p\">:</span> <span class=\"n\">grayscale</span><span class=\"p\">,</span>\n        <span class=\"s1\">'canny'</span><span class=\"p\">:</span> <span class=\"n\">cv2</span><span class=\"o\">.</span><span class=\"n\">Canny</span><span class=\"p\">,</span>\n        <span class=\"s1\">'blur'</span><span class=\"p\">:</span> <span class=\"n\">gaussian_blur</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"n\">func_io</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'grayscale'</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"s1\">'image'</span><span class=\"p\">,</span> <span class=\"s1\">'image_gray'</span><span class=\"p\">),</span>\n        <span class=\"s1\">'blur'</span><span class=\"p\">:</span> <span class=\"p\">((</span><span class=\"s1\">'image_gray'</span><span class=\"p\">,</span> <span class=\"s1\">'blur_kernel'</span><span class=\"p\">),</span> <span class=\"s1\">'image_blurred'</span><span class=\"p\">),</span>\n        <span class=\"s1\">'canny'</span><span class=\"p\">:</span> <span class=\"p\">((</span><span class=\"s1\">'image_blurred'</span><span class=\"p\">,</span> <span class=\"s1\">'canny_lo'</span><span class=\"p\">,</span> <span class=\"s1\">'canny_hi'</span><span class=\"p\">),</span> <span class=\"s1\">'edges'</span><span class=\"p\">),</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"n\">hparams</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'blur_kernel'</span><span class=\"p\">:</span> <span class=\"mi\">11</span><span class=\"p\">,</span>\n        <span class=\"s1\">'canny_lo'</span><span class=\"p\">:</span> <span class=\"mi\">70</span><span class=\"p\">,</span>\n        <span class=\"s1\">'canny_hi'</span><span class=\"p\">:</span> <span class=\"mi\">200</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"n\">cg</span> <span class=\"o\">=</span> <span class=\"n\">CompGraph</span><span class=\"p\">(</span><span class=\"n\">func_dict</span><span class=\"p\">,</span> <span class=\"n\">func_io</span><span class=\"p\">)</span>\n    <span class=\"n\">runner</span> <span class=\"o\">=</span> <span class=\"n\">CompGraphRunner</span><span class=\"p\">(</span><span class=\"n\">cg</span><span class=\"p\">,</span> <span class=\"n\">hparams</span><span class=\"p\">)</span>\n\n    <span class=\"n\">im</span> <span class=\"o\">=</span> <span class=\"n\">cv2</span><span class=\"o\">.</span><span class=\"n\">imread</span><span class=\"p\">(</span><span class=\"s1\">'my_image.jpg'</span><span class=\"p\">,</span> <span class=\"n\">cv2</span><span class=\"o\">.</span><span class=\"n\">IMREAD_COLOR</span><span class=\"p\">)</span>\n    <span class=\"n\">runner</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">image</span><span class=\"o\">=</span><span class=\"n\">im</span><span class=\"p\">)</span>\n</pre>\n<p>For more complex computational graphs examples, refer to the following Jupyter notebooks:</p>\n<ul>\n<li><a href=\"https://github.com/semeniuta/CarND-LaneLines-P1/blob/master/P1_1_Pipeline_demo.ipynb\" rel=\"nofollow\">Simple lane lines detection (Udacity CarND project)</a></li>\n<li><a href=\"https://github.com/semeniuta/CarND-Advanced-Lane-Lines/blob/master/7_pipeline_prototyping_3.ipynb\" rel=\"nofollow\">More advanced lane lines detection (Udacity CarND project)</a></li>\n</ul>\n\n          </div>"}, "last_serial": 7150798, "releases": {"0.1.1": [{"comment_text": "", "digests": {"md5": "cd47e5fc6800cf5bf7fb12ac42b4ca83", "sha256": "9834ef3823ba41a150cf296020b9828508c57468ebe26ab423b9051d015f96b8"}, "downloads": -1, "filename": "epypes-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "cd47e5fc6800cf5bf7fb12ac42b4ca83", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 22728, "upload_time": "2020-05-02T10:34:19", "upload_time_iso_8601": "2020-05-02T10:34:19.900854Z", "url": "https://files.pythonhosted.org/packages/92/4c/92389ca7529d1c40d0148d6a80f38954d7172a56672bf930e2dca8280969/epypes-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "550c2886a37fe19df7139c166053dea2", "sha256": "463b5a9a4b149656cc813d512f59ff944b76878e2eff5d1f20ec76896fc43927"}, "downloads": -1, "filename": "epypes-0.1.1.tar.gz", "has_sig": false, "md5_digest": "550c2886a37fe19df7139c166053dea2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13150, "upload_time": "2020-05-02T10:34:22", "upload_time_iso_8601": "2020-05-02T10:34:22.053772Z", "url": "https://files.pythonhosted.org/packages/99/8d/bf9d72d8f5e124dc3584f11aa5929b0742cef07d7020528047cee5556162/epypes-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "cd47e5fc6800cf5bf7fb12ac42b4ca83", "sha256": "9834ef3823ba41a150cf296020b9828508c57468ebe26ab423b9051d015f96b8"}, "downloads": -1, "filename": "epypes-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "cd47e5fc6800cf5bf7fb12ac42b4ca83", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 22728, "upload_time": "2020-05-02T10:34:19", "upload_time_iso_8601": "2020-05-02T10:34:19.900854Z", "url": "https://files.pythonhosted.org/packages/92/4c/92389ca7529d1c40d0148d6a80f38954d7172a56672bf930e2dca8280969/epypes-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "550c2886a37fe19df7139c166053dea2", "sha256": "463b5a9a4b149656cc813d512f59ff944b76878e2eff5d1f20ec76896fc43927"}, "downloads": -1, "filename": "epypes-0.1.1.tar.gz", "has_sig": false, "md5_digest": "550c2886a37fe19df7139c166053dea2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13150, "upload_time": "2020-05-02T10:34:22", "upload_time_iso_8601": "2020-05-02T10:34:22.053772Z", "url": "https://files.pythonhosted.org/packages/99/8d/bf9d72d8f5e124dc3584f11aa5929b0742cef07d7020528047cee5556162/epypes-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:45:53 2020"}