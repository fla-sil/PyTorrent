{"info": {"author": "Kai Lautaportti", "author_email": "kai.lautaportti@hexagonit.fi", "bugtrack_url": null, "classifiers": ["Framework :: Buildout", "Framework :: Buildout :: Recipe", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.2", "Programming Language :: Python :: 3.3", "Topic :: Software Development :: Build Tools", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "********************************************\nRecipe for compiling and installing software\n********************************************\n\n.. contents::\n\nThe recipe provides the means to compile and install source distributions\nusing ``configure`` and ``make`` and other similar tools. It is inspired by\nthe zc.recipe.cmmi_ recipe but provides more control over the build process.\n\nRepository: http://github.com/hexagonit/hexagonit.recipe.cmmi\n\nClone URL: git clone git://github.com/hexagonit/hexagonit.recipe.cmmi.git\n\nIssue tracker: http://github.com/hexagonit/hexagonit.recipe.cmmi/issues\n\nSupported Python versions: 2.6, 2.7, 3.2, 3.3\n\nSupported zc.buildout versions: 1.x, 2.x\n\nTravis build: |travis|\n\n.. |travis| image:: https://api.travis-ci.org/hexagonit/hexagonit.recipe.cmmi.png\n\n.. _zc.recipe.cmmi : http://pypi.python.org/pypi/zc.recipe.cmmi\n\nChange History\n**************\n\n2.0 (2013-04-07)\n================\n\n  - Dropped support for Python 2.4/2.5. Use the 1.x versions for those.\n    Currently supported versions are Python 2.6, 2.7, 3.2 and 3.3. [dokai]\n\n  - Python 3.2/3.3 support. [dokai, mmariani]\n\n  - Tox support.\n    https://github.com/hexagonit/hexagonit.recipe.cmmi/pull/7\n    [msabramo]\n\n  - Travis CI integration. https://travis-ci.org/hexagonit/hexagonit.recipe.cmmi\n    See https://github.com/hexagonit/hexagonit.recipe.cmmi/pull/7\n    [msabramo]\n\n  - Automatically clean up a left-over compile directory from a previously\n    failed run. See https://github.com/hexagonit/hexagonit.recipe.cmmi/pull/9\n    [desaintmartin]\n\n\n1.6 (2012-06-28)\n================\n\n  - Relicensed under the `3-clause BSD license <http://en.wikipedia.org/wiki/BSD_licenses#3-clause_license_.28.22New_BSD_License.22_or_.22Modified_BSD_License.22.29>`_.\n    [dokai]\n\n\n1.5.1 (2012-05-21)\n==================\n\n  - PEP8 / Pyflakes cleanup.\n    [dokai]\n\n  - Quote ``--prefix`` paths to support whitespace characters in\n    the path. Closes https://github.com/hexagonit/hexagonit.recipe.cmmi/pull/4\n    [galpin]\n\n  - Fixed importing of the hook scripts on Windows. Closes\n    https://github.com/hexagonit/hexagonit.recipe.cmmi/pull/6\n    [grzn]\n\n\n1.5.0 (2010-12-17)\n==================\n\n  - Refactored the environment variable handling logic. Python versions prior\n    to 2.6 have an issue clearing the environment variables using\n    ``os.environ.clear()`` (See http://bugs.python.org/issue3227). [dokai]\n\n    Instead of modifying ``os.environ`` directly we use the ``subprocess``\n    module to run the commands in child processes which are given an explicit\n    environment which is a copy of the current ``os.environ`` augmented with\n    the per-part overrides. As a result, ``os.environ`` is no longer modified\n    by this recipe.\n\n    The `Python hook scripts`_ are passed the augmented environment dictionary\n    as a third parameter.\n\n    .. warning:: Existing hook scripts accepting only two parameters\n                 continue to work but they do not have access to the modified\n                 environment variables. To fix this they should be refactored\n                 to accept the third parameter.\n\n    See https://github.com/hexagonit/hexagonit.recipe.cmmi/issues/issue/1/#issue/1/comment/605362\n    for details.\n\n\n1.4.0 (2010-08-27)\n==================\n\n  - Added support for passing options to ``make`` with the new\n    ``make-options`` option. See the `Installing a package without an autoconf\n    like system`_ section below for an example. [dokai]\n\n  - The ``--prefix`` parameter will be automatically given to the configure\n    command if and only if\n\n      - the ``configure-command`` is not used to specify a custom configure command and\n\n      - ``--prefix`` is not given explicitly in the ``configure-options`` option.\n\n    [dokai]\n\n  - Removed the ``is_build_dir()`` heuristic.\n\n    Previously the recipe inspected the contents of the downloaded package to\n    determine if it contained the necessary files for building the package (it\n    checked if files named ``configure`` or ``Makefile.PL`` existed) and gave\n    an error message if they were missing. However, the recipe is useful for\n    building many different kinds of software packages and checking for\n    particular files limited its use severely.\n\n    Now the recipe omits any checks for particular files in the downloaded\n    package. It is recommended that you use the ``md5sum`` option in your part\n    configuration to assert that you are downloading the package you expect\n    to. [dokai]\n\n\n1.3.1 (2010-08-23)\n==================\n\n - Refactored the ``is_build_dir()`` helper method to make it easier to test\n   and override in customized recipes. [dokai]\n\n - Fixed the handling of the working directory so that it is restored to the\n   state before executing the recipe regardless whether the recipe was\n   successful or not. Thanks to Jonathan Ballet for the report and preliminary\n   patch. [dokai]\n\n - Fixed http://github.com/hexagonit/hexagonit.recipe.cmmi/issues#issue/1\n   Environment variables defined in one part will no longer leak to other\n   subsequent parts. [dokai]\n\n\n1.3.0 (2009-09-20)\n==================\n\n  - Added new options ``environment-section`` and ``environment`` to control\n    environment variables before executing the recipe.\n\n  - Added a new option, ``prefix``, to override the installation prefix.\n    Defaults to the previously hardcoded value of the part location.\n\n\n1.2.0\n=====\n\n  - Added new ``configure-command`` option to control the command used to\n    generate the ``Makefile``. This makes it possible to build slightly\n    different packages, e.g. Perl projects where Makefile.PL replaces the\n    configure script.\n\n\n1.1.1\n=====\n\n  - Don't try to execute hooks if the option is an empty string. This\n    will make it possible to disable hooks when extending existing\n    parts.\n\n\n1.1.0\n=====\n\n - Added new option ``path`` to allow building and installing local\n   source trees. The ``path`` option is mutually exclusive with\n   ``url``.\n\n\n1.0.1\n=====\n\n - Fixed a bug with 'keep-compile-dir' option. The location of the\n   compilation directory was not available through the\n   ``options['compile-directory']`` option as documented.\n\n\n1.0.0\n=====\n\n - Initial public release.\n\nDetailed Documentation\n**********************\n\nSupported options\n=================\n\n``url``\n\n    URL to the package that will be downloaded and extracted. The\n    supported package formats are .tar.gz, .tar.bz2, and .zip. The\n    value must be a full URL,\n    e.g. http://python.org/ftp/python/2.4.4/Python-2.4.4.tgz. The\n    ``path`` option can not be used at the same time with ``url``.\n\n``path``\n\n    Path to a local directory containing the source code to be built\n    and installed. The directory must contain the ``configure``\n    script. The ``url`` option can not be used at the same time with\n    ``path``.\n\n``prefix``\n\n    Custom installation prefix passed to the ``--prefix`` option of the\n    ``configure`` script. Defaults to the location of the part. Note that this\n    is a convenience shortcut which assumes that the default ``configure``\n    command is used to configure the package. If the ``configure-command``\n    option is used to define a custom configure command no automatic\n    ``--prefix`` injection takes place. You can also set the ``--prefix``\n    parameter explicitly in ``configure-options``.\n\n``md5sum``\n\n    MD5 checksum for the package file. If available the MD5\n    checksum of the downloaded package will be compared to this value\n    and if the values do not match the execution of the recipe will\n    fail.\n\n``make-binary``\n\n    Path to the ``make`` program. Defaults to 'make' which\n    should work on any system that has the ``make`` program available\n    in the system ``PATH``.\n\n``make-options``\n\n    Extra ``KEY=VALUE`` options included in the invocation of the ``make``\n    program. Multiple options can be given on separate lines to increase\n    readability.\n\n``make-targets``\n\n    Targets for the ``make`` command. Defaults to 'install'\n    which will be enough to install most software packages. You only\n    need to use this if you want to build alternate targets. Each\n    target must be given on a separate line.\n\n``configure-command``\n\n    Name of the configure command that will be run to generate the Makefile.\n    This defaults to ``./configure`` which is fine for packages that come with\n    a configure script. You may wish to change this when compiling packages\n    with a different set up. See the ``Compiling a Perl package`` section for\n    an example.\n\n``configure-options``\n\n    Extra options to be given to the ``configure`` script. By default\n    only the ``--prefix`` option is passed which is set to the part\n    directory. Each option must be given on a separate line.\n\n``patch-binary``\n\n    Path to the ``patch`` program. Defaults to 'patch' which should\n    work on any system that has the ``patch`` program available in the\n    system ``PATH``.\n\n``patch-options``\n\n    Options passed to the ``patch`` program. Defaults to ``-p0``.\n\n``patches``\n\n    List of patch files to the applied to the extracted source. Each\n    file should be given on a separate line.\n\n.. _Python hook scripts:\n\n``pre-configure-hook``\n\n    Custom python script that will be executed before running the\n    ``configure`` script. The format of the options is::\n\n        /path/to/the/module.py:name_of_callable\n\n    where the first part is a filesystem path to the python module and the\n    second part is the name of the callable in the module that will be called.\n    The callable will be passed three parameters in the following order:\n\n        1. The ``options`` dictionary from the recipe.\n\n        2. The global ``buildout`` dictionary.\n\n        3. A dictionary containing the current ``os.environ`` augmented with\n           the part specific overrides.\n\n    The callable is not expected to return anything.\n\n    .. note:: The ``os.environ`` is not modified so if the hook script is\n              interested in the environment variable overrides defined for the\n              part it needs to read them from the dictionary that is passed in\n              as the third parameter instead of accessing ``os.environ``\n              directly.\n\n``pre-make-hook``\n\n    Custom python script that will be executed before running\n    ``make``. The format and semantics are the same as with the\n    ``pre-configure-hook`` option.\n\n``post-make-hook``\n\n    Custom python script that will be executed after running\n    ``make``. The format and semantics are the same as with the\n    ``pre-configure-hook`` option.\n\n``keep-compile-dir``\n\n    Switch to optionally keep the temporary directory where the\n    package was compiled. This is mostly useful for other recipes that\n    use this recipe to compile a software but wish to do some\n    additional steps not handled by this recipe. The location of the\n    compile directory is stored in ``options['compile-directory']``.\n    Accepted values are ``true`` or ``false``, defaults to ``false``.\n\n``environment-section``\n\n    Name of a section that provides environment variables that will be used to\n    augment the variables read from ``os.environ`` before executing the\n    recipe.\n\n    This recipe does not modify ``os.environ`` directly. External commands\n    run as part of the recipe (e.g. make, configure, etc.) get an augmented\n    environment when they are forked. Python hook scripts are passed the\n    augmented as a parameter.\n\n    The values of the environment variables may contain references to other\n    existing environment variables (including themselves) in the form of\n    Python string interpolation variables using the dictionary notation. These\n    references will be expanded using values from ``os.environ``. This can be\n    used, for example, to append to the ``PATH`` variable, e.g.::\n\n        [component]\n        recipe = hexagonit.recipe.cmmi\n        environment-section =\n            environment\n\n        [environment]\n        PATH = %(PATH)s:${buildout:directory}/bin\n\n``environment``\n\n  A sequence of ``KEY=VALUE`` pairs separated by newlines that define\n  additional environment variables used to update ``os.environ`` before\n  executing the recipe.\n\n  The semantics of this option are the same as ``environment-section``. If\n  both ``environment-section`` and ``environment`` are provided the values from\n  the former will be overridden by the latter allowing per-part customization.\n\nAdditionally, the recipe honors the ``download-cache`` option set\nin the ``[buildout]`` section and stores the downloaded files under\nit. If the value is not set a directory called ``downloads`` will be\ncreated in the root of the buildout and the ``download-cache``\noption set accordingly.\n\nThe recipe will first check if there is a local copy of the package\nbefore downloading it from the net. Files can be shared among\ndifferent buildouts by setting the ``download-cache`` to the same\nlocation.\n\nExample usage\n=============\n\nWe'll use a simple tarball to demonstrate the recipe.\n\n    >>> import os.path\n    >>> src = join(os.path.dirname(__file__), 'testdata')\n    >>> ls(src)\n    - Foo-Bar-0.0.0.tar.gz\n    - haproxy-1.4.8-dummy.tar.gz\n    - package-0.0.0.tar.gz\n\nThe package contains a dummy ``configure`` script that will simply\necho the options it was called with and create a ``Makefile`` that\nwill do the same.\n\nLet's create a buildout to build and install the package.\n\n    >>> write('buildout.cfg',\n    ... \"\"\"\n    ... [buildout]\n    ... newest = false\n    ... parts = package\n    ...\n    ... [package]\n    ... recipe = hexagonit.recipe.cmmi\n    ... url = file://%s/package-0.0.0.tar.gz\n    ... \"\"\" % src)\n\nThis will download, extract and build our demo package with the\ndefault build options.\n\n    >>> print(system(buildout))\n    Installing package.\n    package: Extracting package to /sample_buildout/parts/package__compile__\n    configure --prefix=/sample_buildout/parts/package\n    building package\n    installing package\n\nAs we can see the configure script was called with the ``--prefix``\noption by default followed by calls to ``make`` and ``make install``.\n\nInstalling a Perl package\n=========================\n\nThe recipe can be used to install packages that use a slightly different build\nprocess. Perl packages often come with a ``Makefile.PL`` script that performs\nthe same task as a ``configure`` script and generates a ``Makefile``.\n\nWe can build and install such a package by overriding the ``configure-command``\noption. The following example builds a Foo::Bar perl module and installs it in\na custom location within the buildout::\n\n    >>> write('buildout.cfg',\n    ... \"\"\"\n    ... [buildout]\n    ... newest = false\n    ... parts = foobar\n    ... perl_lib = ${buildout:directory}/perl_lib\n    ...\n    ... [foobar]\n    ... recipe = hexagonit.recipe.cmmi\n    ... configure-command = perl -I${buildout:perl_lib}/lib/perl5 Makefile.PL INSTALL_BASE=${buildout:perl_lib}\n    ... url = file://%s/Foo-Bar-0.0.0.tar.gz\n    ... \"\"\" % src)\n\n    >>> print(system(buildout))\n    Uninstalling package.\n    Installing foobar.\n    foobar: Extracting package to /sample_buildout/parts/foobar__compile__\n    building package\n    installing package\n\n.. _Installing a package without an autoconf like system:\n\nInstalling a package without an ``autoconf`` like system\n========================================================\n\nSome packages do not use a configuration mechanism and simply provide a\n``Makefile`` for building. It is common in these cases that the build process\nis controlled entirely by direct options to ``make``. We can build such a\npackage by faking a configure command that does nothing and passing the\nappropriate options to ``make``. The ``true`` utility found in most shell\nenvironments is a good candidate for this although anything that returns a\nzero exit code would do.\n\nWe are using a dummy \"HAProxy\" package as an example of a package with only a\nMakefile and using explicit ``make`` options to control the build process.\n\n    >>> write('buildout.cfg',\n    ... \"\"\"\n    ... [buildout]\n    ... newest = false\n    ... parts = haproxy\n    ...\n    ... [haproxy]\n    ... recipe = hexagonit.recipe.cmmi\n    ... configure-command = true\n    ... make-options =\n    ...     TARGET=linux26\n    ...     CPU=i686\n    ...     USE_PCRE=1\n    ... url = file://%s/haproxy-1.4.8-dummy.tar.gz\n    ... \"\"\" % src)\n\n    >>> print(system(buildout))\n    Uninstalling foobar.\n    Installing haproxy.\n    haproxy: Extracting package to /sample_buildout/parts/haproxy__compile__\n    Building HAProxy 1.4.8 (dummy package)\n    TARGET: linux26\n    CPU: i686\n    USE_PCRE: 1\n    Installing haproxy\n\nInstalling checkouts\n====================\n\nSometimes instead of downloading and building an existing tarball we need to\nwork with code that is already available on the filesystem, for example an SVN\ncheckout.\n\nInstead of providing the ``url`` option we will provide a ``path`` option to\nthe directory containing the source code.\n\nLet's demonstrate this by first unpacking our test package to the filesystem\nand building that.\n\n    >>> checkout_dir = tmpdir('checkout')\n    >>> import setuptools.archive_util\n    >>> setuptools.archive_util.unpack_archive('%s/package-0.0.0.tar.gz' % src,\n    ...                                        checkout_dir)\n    >>> ls(checkout_dir)\n    d package-0.0.0\n\n    >>> write('buildout.cfg',\n    ... \"\"\"\n    ... [buildout]\n    ... newest = false\n    ... parts = package\n    ...\n    ... [package]\n    ... recipe = hexagonit.recipe.cmmi\n    ... path = %s/package-0.0.0\n    ... \"\"\" % checkout_dir)\n\n    >>> print(system(buildout))\n    Uninstalling haproxy.\n    Installing package.\n    package: Using local source directory: /checkout/package-0.0.0\n    configure --prefix=/sample_buildout/parts/package\n    building package\n    installing package\n\nSince using the ``path`` implies that the source code has been acquired\noutside of the control of the recipe also the responsibility of managing it is\noutside of the recipe.\n\nDepending on the software you may need to manually run ``make clean`` etc.\nbetween buildout runs if you make changes to the code. Also, the\n``keep-compile-dir`` has no effect when ``path`` is used.\n\n\nAdvanced configuration\n======================\n\nThe above options are enough to build most packages. However, in some cases it\nis not enough and we need to control the build process more. Let's try again\nwith a new buildout and provide more options.\n\n    >>> write('buildout.cfg',\n    ... \"\"\"\n    ... [buildout]\n    ... newest = false\n    ... parts = package\n    ...\n    ... [build-environment]\n    ... CFLAGS = -I/sw/include\n    ... LDFLAGS = -I/sw/lib\n    ...\n    ... [package]\n    ... recipe = hexagonit.recipe.cmmi\n    ... url = file://%(src)s/package-0.0.0.tar.gz\n    ... md5sum = 6b94295c042a91ea3203857326bc9209\n    ... prefix = /somewhere/else\n    ... environment-section = build-environment\n    ... environment =\n    ...     LDFLAGS=-L/sw/lib -L/some/extra/lib\n    ... configure-options =\n    ...     --with-threads\n    ...     --without-foobar\n    ... make-targets =\n    ...     install\n    ...     install-lib\n    ... patches =\n    ...     patches/configure.patch\n    ...     patches/Makefile.dist.patch\n    ... \"\"\" % dict(src=src))\n\nThis configuration uses custom configure options, an environment section,\nper-part customization to the environment, custom prefix, multiple make\ntargets and also patches the source code before the scripts are run.\n\n    >>> print(system(buildout))\n    Uninstalling package.\n    Installing package.\n    package: [ENV] CFLAGS = -I/sw/include\n    package: [ENV] LDFLAGS = -L/sw/lib -L/some/extra/lib\n    package: Extracting package to /sample_buildout/parts/package__compile__\n    package: Applying patches\n    patching file configure\n    patching file Makefile.dist\n    patched-configure --prefix=/somewhere/else --with-threads --without-foobar\n    building patched package\n    installing patched package\n    installing patched package-lib\n\n\nCustomizing the build process\n=============================\n\nSometimes even the above is not enough and you need to be able to control the\nprocess in even more detail. One such use case would be to perform dynamic\nsubstitutions on the source code (possible based on information from the\nbuildout) which cannot be done with static patches or to simply run arbitrary\ncommands.\n\nThe recipe allows you to write custom python scripts that hook into the build\nprocess. You can define a script to be run:\n\n - before the configure script is executed (pre-configure-hook)\n - before the make process is executed (pre-make-hook)\n - after the make process is finished (post-make-hook)\n\nEach option needs to contain the following information\n\n  /full/path/to/the/python/module.py:name_of_callable\n\nwhere the callable object (here name_of_callable) is expected to take three\nparameters:\n\n    1. The ``options`` dictionary from the recipe.\n\n    2. The global ``buildout`` dictionary.\n\n    3. A dictionary containing the current ``os.environ`` augmented with\n       the part specific overrides.\n\nThese parameters should provide the callable all the necessary information to\nperform any part specific customization to the build process.\n\nLet's create a simple python script to demonstrate the functionality. You can\nnaturally have separate modules for each hook or simply use just one or two\nhooks. Here we use just a single module.\n\n    >>> hooks = tmpdir('hooks')\n    >>> write(hooks, 'customhandlers.py',\n    ... \"\"\"\n    ... import logging\n    ... log = logging.getLogger('hook')\n    ...\n    ... def preconfigure(options, buildout, environment):\n    ...     log.info('This is pre-configure-hook!')\n    ...\n    ... def premake(options, buildout, environment):\n    ...     log.info('This is pre-make-hook!')\n    ...\n    ... def postmake(options, buildout, environment):\n    ...     log.info('This is post-make-hook!')\n    ...\n    ... \"\"\")\n\nand a new buildout to try it out\n\n    >>> write('buildout.cfg',\n    ... \"\"\"\n    ... [buildout]\n    ... newest = false\n    ... parts = package\n    ...\n    ... [package]\n    ... recipe = hexagonit.recipe.cmmi\n    ... url = file://%(src)s/package-0.0.0.tar.gz\n    ... pre-configure-hook = %(module)s:preconfigure\n    ... pre-make-hook = %(module)s:premake\n    ... post-make-hook = %(module)s:postmake\n    ... \"\"\" % dict(src=src, module='%s/customhandlers.py' % hooks))\n\n    >>> print(system(buildout))\n    Uninstalling package.\n    Installing package.\n    package: Extracting package to /sample_buildout/parts/package__compile__\n    package: Executing pre-configure-hook\n    hook: This is pre-configure-hook!\n    configure --prefix=/sample_buildout/parts/package\n    package: Executing pre-make-hook\n    hook: This is pre-make-hook!\n    building package\n    installing package\n    package: Executing post-make-hook\n    hook: This is post-make-hook!\n\nFor even more specific needs you can write your own recipe that uses\n``hexagonit.recipe.cmmi`` and set the ``keep-compile-dir`` option to ``true``.\nYou can then continue from where this recipe finished by reading the location\nof the compile directory from ``options['compile-directory']`` from your own\nrecipe.\n\n\nContributors\n************\n\n* Kai Lautaportti (dokai), Author\n* C\u00e9dric de Saint Martin (desaintmartin)\n* Marc Abramowitz (msabramo)\n* Nicolas Dumazet (nicdumz)\n* Guy Rozendorn (grzn)\n* Marco Mariani (mmariani)\n* galpin\n\nDownload\n***********************", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/hexagonit/hexagonit.recipe.cmmi", "keywords": "development buildout recipe", "license": "BSD", "maintainer": null, "maintainer_email": null, "name": "hexagonit.recipe.cmmi", "package_url": "https://pypi.org/project/hexagonit.recipe.cmmi/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/hexagonit.recipe.cmmi/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://github.com/hexagonit/hexagonit.recipe.cmmi"}, "release_url": "https://pypi.org/project/hexagonit.recipe.cmmi/2.0/", "requires_dist": null, "requires_python": null, "summary": "zc.buildout recipe for compiling and installing source distributions.", "version": "2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"contents\">\n<p>Contents</p>\n<ul>\n<li><a href=\"#change-history\" id=\"id14\" rel=\"nofollow\">Change History</a><ul>\n<li><a href=\"#id1\" id=\"id15\" rel=\"nofollow\">2.0 (2013-04-07)</a></li>\n<li><a href=\"#id2\" id=\"id16\" rel=\"nofollow\">1.6 (2012-06-28)</a></li>\n<li><a href=\"#id3\" id=\"id17\" rel=\"nofollow\">1.5.1 (2012-05-21)</a></li>\n<li><a href=\"#id4\" id=\"id18\" rel=\"nofollow\">1.5.0 (2010-12-17)</a></li>\n<li><a href=\"#id5\" id=\"id19\" rel=\"nofollow\">1.4.0 (2010-08-27)</a></li>\n<li><a href=\"#id6\" id=\"id20\" rel=\"nofollow\">1.3.1 (2010-08-23)</a></li>\n<li><a href=\"#id7\" id=\"id21\" rel=\"nofollow\">1.3.0 (2009-09-20)</a></li>\n<li><a href=\"#id8\" id=\"id22\" rel=\"nofollow\">1.2.0</a></li>\n<li><a href=\"#id9\" id=\"id23\" rel=\"nofollow\">1.1.1</a></li>\n<li><a href=\"#id10\" id=\"id24\" rel=\"nofollow\">1.1.0</a></li>\n<li><a href=\"#id11\" id=\"id25\" rel=\"nofollow\">1.0.1</a></li>\n<li><a href=\"#id12\" id=\"id26\" rel=\"nofollow\">1.0.0</a></li>\n</ul>\n</li>\n<li><a href=\"#detailed-documentation\" id=\"id27\" rel=\"nofollow\">Detailed Documentation</a><ul>\n<li><a href=\"#supported-options\" id=\"id28\" rel=\"nofollow\">Supported options</a></li>\n<li><a href=\"#example-usage\" id=\"id29\" rel=\"nofollow\">Example usage</a></li>\n<li><a href=\"#installing-a-perl-package\" id=\"id30\" rel=\"nofollow\">Installing a Perl package</a></li>\n<li><a href=\"#id13\" id=\"id31\" rel=\"nofollow\">Installing a package without an <tt>autoconf</tt> like system</a></li>\n<li><a href=\"#installing-checkouts\" id=\"id32\" rel=\"nofollow\">Installing checkouts</a></li>\n<li><a href=\"#advanced-configuration\" id=\"id33\" rel=\"nofollow\">Advanced configuration</a></li>\n<li><a href=\"#customizing-the-build-process\" id=\"id34\" rel=\"nofollow\">Customizing the build process</a></li>\n</ul>\n</li>\n<li><a href=\"#contributors\" id=\"id35\" rel=\"nofollow\">Contributors</a></li>\n<li><a href=\"#download\" id=\"id36\" rel=\"nofollow\">Download</a></li>\n</ul>\n</div>\n<p>The recipe provides the means to compile and install source distributions\nusing <tt>configure</tt> and <tt>make</tt> and other similar tools. It is inspired by\nthe <a href=\"http://pypi.python.org/pypi/zc.recipe.cmmi\" rel=\"nofollow\">zc.recipe.cmmi</a> recipe but provides more control over the build process.</p>\n<p>Repository: <a href=\"http://github.com/hexagonit/hexagonit.recipe.cmmi\" rel=\"nofollow\">http://github.com/hexagonit/hexagonit.recipe.cmmi</a></p>\n<p>Clone URL: git clone git://github.com/hexagonit/hexagonit.recipe.cmmi.git</p>\n<p>Issue tracker: <a href=\"http://github.com/hexagonit/hexagonit.recipe.cmmi/issues\" rel=\"nofollow\">http://github.com/hexagonit/hexagonit.recipe.cmmi/issues</a></p>\n<p>Supported Python versions: 2.6, 2.7, 3.2, 3.3</p>\n<p>Supported zc.buildout versions: 1.x, 2.x</p>\n<p>Travis build: <img alt=\"travis\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0ff8aa7a7cd03102b480baa23d1c066376e2421f/68747470733a2f2f6170692e7472617669732d63692e6f72672f68657861676f6e69742f68657861676f6e69742e7265636970652e636d6d692e706e67\"></p>\n<div id=\"change-history\">\n<h2><a href=\"#id14\" rel=\"nofollow\">Change History</a></h2>\n<div id=\"id1\">\n<h3><a href=\"#id15\" rel=\"nofollow\">2.0 (2013-04-07)</a></h3>\n<blockquote>\n<ul>\n<li>Dropped support for Python 2.4/2.5. Use the 1.x versions for those.\nCurrently supported versions are Python 2.6, 2.7, 3.2 and 3.3. [dokai]</li>\n<li>Python 3.2/3.3 support. [dokai, mmariani]</li>\n<li>Tox support.\n<a href=\"https://github.com/hexagonit/hexagonit.recipe.cmmi/pull/7\" rel=\"nofollow\">https://github.com/hexagonit/hexagonit.recipe.cmmi/pull/7</a>\n[msabramo]</li>\n<li>Travis CI integration. <a href=\"https://travis-ci.org/hexagonit/hexagonit.recipe.cmmi\" rel=\"nofollow\">https://travis-ci.org/hexagonit/hexagonit.recipe.cmmi</a>\nSee <a href=\"https://github.com/hexagonit/hexagonit.recipe.cmmi/pull/7\" rel=\"nofollow\">https://github.com/hexagonit/hexagonit.recipe.cmmi/pull/7</a>\n[msabramo]</li>\n<li>Automatically clean up a left-over compile directory from a previously\nfailed run. See <a href=\"https://github.com/hexagonit/hexagonit.recipe.cmmi/pull/9\" rel=\"nofollow\">https://github.com/hexagonit/hexagonit.recipe.cmmi/pull/9</a>\n[desaintmartin]</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"id2\">\n<h3><a href=\"#id16\" rel=\"nofollow\">1.6 (2012-06-28)</a></h3>\n<blockquote>\n<ul>\n<li>Relicensed under the <a href=\"http://en.wikipedia.org/wiki/BSD_licenses#3-clause_license_.28.22New_BSD_License.22_or_.22Modified_BSD_License.22.29\" rel=\"nofollow\">3-clause BSD license</a>.\n[dokai]</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"id3\">\n<h3><a href=\"#id17\" rel=\"nofollow\">1.5.1 (2012-05-21)</a></h3>\n<blockquote>\n<ul>\n<li>PEP8 / Pyflakes cleanup.\n[dokai]</li>\n<li>Quote <tt><span class=\"pre\">--prefix</span></tt> paths to support whitespace characters in\nthe path. Closes <a href=\"https://github.com/hexagonit/hexagonit.recipe.cmmi/pull/4\" rel=\"nofollow\">https://github.com/hexagonit/hexagonit.recipe.cmmi/pull/4</a>\n[galpin]</li>\n<li>Fixed importing of the hook scripts on Windows. Closes\n<a href=\"https://github.com/hexagonit/hexagonit.recipe.cmmi/pull/6\" rel=\"nofollow\">https://github.com/hexagonit/hexagonit.recipe.cmmi/pull/6</a>\n[grzn]</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"id4\">\n<h3><a href=\"#id18\" rel=\"nofollow\">1.5.0 (2010-12-17)</a></h3>\n<blockquote>\n<ul>\n<li><p>Refactored the environment variable handling logic. Python versions prior\nto 2.6 have an issue clearing the environment variables using\n<tt>os.environ.clear()</tt> (See <a href=\"http://bugs.python.org/issue3227\" rel=\"nofollow\">http://bugs.python.org/issue3227</a>). [dokai]</p>\n<p>Instead of modifying <tt>os.environ</tt> directly we use the <tt>subprocess</tt>\nmodule to run the commands in child processes which are given an explicit\nenvironment which is a copy of the current <tt>os.environ</tt> augmented with\nthe per-part overrides. As a result, <tt>os.environ</tt> is no longer modified\nby this recipe.</p>\n<p>The <a href=\"#python-hook-scripts\" rel=\"nofollow\">Python hook scripts</a> are passed the augmented environment dictionary\nas a third parameter.</p>\n<div>\n<p>Warning</p>\n<p>Existing hook scripts accepting only two parameters\ncontinue to work but they do not have access to the modified\nenvironment variables. To fix this they should be refactored\nto accept the third parameter.</p>\n</div>\n<p>See <a href=\"https://github.com/hexagonit/hexagonit.recipe.cmmi/issues/issue/1/#issue/1/comment/605362\" rel=\"nofollow\">https://github.com/hexagonit/hexagonit.recipe.cmmi/issues/issue/1/#issue/1/comment/605362</a>\nfor details.</p>\n</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"id5\">\n<h3><a href=\"#id19\" rel=\"nofollow\">1.4.0 (2010-08-27)</a></h3>\n<blockquote>\n<ul>\n<li><p>Added support for passing options to <tt>make</tt> with the new\n<tt><span class=\"pre\">make-options</span></tt> option. See the <a href=\"#installing-a-package-without-an-autoconf-like-system\" rel=\"nofollow\">Installing a package without an autoconf\nlike system</a> section below for an example. [dokai]</p>\n</li>\n<li><p>The <tt><span class=\"pre\">--prefix</span></tt> parameter will be automatically given to the configure\ncommand if and only if</p>\n<blockquote>\n<ul>\n<li>the <tt><span class=\"pre\">configure-command</span></tt> is not used to specify a custom configure command and</li>\n<li><tt><span class=\"pre\">--prefix</span></tt> is not given explicitly in the <tt><span class=\"pre\">configure-options</span></tt> option.</li>\n</ul>\n</blockquote>\n<p>[dokai]</p>\n</li>\n<li><p>Removed the <tt>is_build_dir()</tt> heuristic.</p>\n<p>Previously the recipe inspected the contents of the downloaded package to\ndetermine if it contained the necessary files for building the package (it\nchecked if files named <tt>configure</tt> or <tt>Makefile.PL</tt> existed) and gave\nan error message if they were missing. However, the recipe is useful for\nbuilding many different kinds of software packages and checking for\nparticular files limited its use severely.</p>\n<p>Now the recipe omits any checks for particular files in the downloaded\npackage. It is recommended that you use the <tt>md5sum</tt> option in your part\nconfiguration to assert that you are downloading the package you expect\nto. [dokai]</p>\n</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"id6\">\n<h3><a href=\"#id20\" rel=\"nofollow\">1.3.1 (2010-08-23)</a></h3>\n<blockquote>\n<ul>\n<li>Refactored the <tt>is_build_dir()</tt> helper method to make it easier to test\nand override in customized recipes. [dokai]</li>\n<li>Fixed the handling of the working directory so that it is restored to the\nstate before executing the recipe regardless whether the recipe was\nsuccessful or not. Thanks to Jonathan Ballet for the report and preliminary\npatch. [dokai]</li>\n<li>Fixed <a href=\"http://github.com/hexagonit/hexagonit.recipe.cmmi/issues#issue/1\" rel=\"nofollow\">http://github.com/hexagonit/hexagonit.recipe.cmmi/issues#issue/1</a>\nEnvironment variables defined in one part will no longer leak to other\nsubsequent parts. [dokai]</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"id7\">\n<h3><a href=\"#id21\" rel=\"nofollow\">1.3.0 (2009-09-20)</a></h3>\n<blockquote>\n<ul>\n<li>Added new options <tt><span class=\"pre\">environment-section</span></tt> and <tt>environment</tt> to control\nenvironment variables before executing the recipe.</li>\n<li>Added a new option, <tt>prefix</tt>, to override the installation prefix.\nDefaults to the previously hardcoded value of the part location.</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"id8\">\n<h3><a href=\"#id22\" rel=\"nofollow\">1.2.0</a></h3>\n<blockquote>\n<ul>\n<li>Added new <tt><span class=\"pre\">configure-command</span></tt> option to control the command used to\ngenerate the <tt>Makefile</tt>. This makes it possible to build slightly\ndifferent packages, e.g. Perl projects where Makefile.PL replaces the\nconfigure script.</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"id9\">\n<h3><a href=\"#id23\" rel=\"nofollow\">1.1.1</a></h3>\n<blockquote>\n<ul>\n<li>Don\u2019t try to execute hooks if the option is an empty string. This\nwill make it possible to disable hooks when extending existing\nparts.</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"id10\">\n<h3><a href=\"#id24\" rel=\"nofollow\">1.1.0</a></h3>\n<blockquote>\n<ul>\n<li>Added new option <tt>path</tt> to allow building and installing local\nsource trees. The <tt>path</tt> option is mutually exclusive with\n<tt>url</tt>.</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"id11\">\n<h3><a href=\"#id25\" rel=\"nofollow\">1.0.1</a></h3>\n<blockquote>\n<ul>\n<li>Fixed a bug with \u2018keep-compile-dir\u2019 option. The location of the\ncompilation directory was not available through the\n<tt><span class=\"pre\">options['compile-directory']</span></tt> option as documented.</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"id12\">\n<h3><a href=\"#id26\" rel=\"nofollow\">1.0.0</a></h3>\n<blockquote>\n<ul>\n<li>Initial public release.</li>\n</ul>\n</blockquote>\n</div>\n</div>\n<div id=\"detailed-documentation\">\n<h2><a href=\"#id27\" rel=\"nofollow\">Detailed Documentation</a></h2>\n<div id=\"supported-options\">\n<h3><a href=\"#id28\" rel=\"nofollow\">Supported options</a></h3>\n<p><tt>url</tt></p>\n<blockquote>\nURL to the package that will be downloaded and extracted. The\nsupported package formats are .tar.gz, .tar.bz2, and .zip. The\nvalue must be a full URL,\ne.g. <a href=\"http://python.org/ftp/python/2.4.4/Python-2.4.4.tgz\" rel=\"nofollow\">http://python.org/ftp/python/2.4.4/Python-2.4.4.tgz</a>. The\n<tt>path</tt> option can not be used at the same time with <tt>url</tt>.</blockquote>\n<p><tt>path</tt></p>\n<blockquote>\nPath to a local directory containing the source code to be built\nand installed. The directory must contain the <tt>configure</tt>\nscript. The <tt>url</tt> option can not be used at the same time with\n<tt>path</tt>.</blockquote>\n<p><tt>prefix</tt></p>\n<blockquote>\nCustom installation prefix passed to the <tt><span class=\"pre\">--prefix</span></tt> option of the\n<tt>configure</tt> script. Defaults to the location of the part. Note that this\nis a convenience shortcut which assumes that the default <tt>configure</tt>\ncommand is used to configure the package. If the <tt><span class=\"pre\">configure-command</span></tt>\noption is used to define a custom configure command no automatic\n<tt><span class=\"pre\">--prefix</span></tt> injection takes place. You can also set the <tt><span class=\"pre\">--prefix</span></tt>\nparameter explicitly in <tt><span class=\"pre\">configure-options</span></tt>.</blockquote>\n<p><tt>md5sum</tt></p>\n<blockquote>\nMD5 checksum for the package file. If available the MD5\nchecksum of the downloaded package will be compared to this value\nand if the values do not match the execution of the recipe will\nfail.</blockquote>\n<p><tt><span class=\"pre\">make-binary</span></tt></p>\n<blockquote>\nPath to the <tt>make</tt> program. Defaults to \u2018make\u2019 which\nshould work on any system that has the <tt>make</tt> program available\nin the system <tt>PATH</tt>.</blockquote>\n<p><tt><span class=\"pre\">make-options</span></tt></p>\n<blockquote>\nExtra <tt>KEY=VALUE</tt> options included in the invocation of the <tt>make</tt>\nprogram. Multiple options can be given on separate lines to increase\nreadability.</blockquote>\n<p><tt><span class=\"pre\">make-targets</span></tt></p>\n<blockquote>\nTargets for the <tt>make</tt> command. Defaults to \u2018install\u2019\nwhich will be enough to install most software packages. You only\nneed to use this if you want to build alternate targets. Each\ntarget must be given on a separate line.</blockquote>\n<p><tt><span class=\"pre\">configure-command</span></tt></p>\n<blockquote>\nName of the configure command that will be run to generate the Makefile.\nThis defaults to <tt>./configure</tt> which is fine for packages that come with\na configure script. You may wish to change this when compiling packages\nwith a different set up. See the <tt>Compiling a Perl package</tt> section for\nan example.</blockquote>\n<p><tt><span class=\"pre\">configure-options</span></tt></p>\n<blockquote>\nExtra options to be given to the <tt>configure</tt> script. By default\nonly the <tt><span class=\"pre\">--prefix</span></tt> option is passed which is set to the part\ndirectory. Each option must be given on a separate line.</blockquote>\n<p><tt><span class=\"pre\">patch-binary</span></tt></p>\n<blockquote>\nPath to the <tt>patch</tt> program. Defaults to \u2018patch\u2019 which should\nwork on any system that has the <tt>patch</tt> program available in the\nsystem <tt>PATH</tt>.</blockquote>\n<p><tt><span class=\"pre\">patch-options</span></tt></p>\n<blockquote>\nOptions passed to the <tt>patch</tt> program. Defaults to <tt><span class=\"pre\">-p0</span></tt>.</blockquote>\n<p><tt>patches</tt></p>\n<blockquote>\nList of patch files to the applied to the extracted source. Each\nfile should be given on a separate line.</blockquote>\n<p id=\"python-hook-scripts\"><tt><span class=\"pre\">pre-configure-hook</span></tt></p>\n<blockquote>\n<p>Custom python script that will be executed before running the\n<tt>configure</tt> script. The format of the options is:</p>\n<pre>/path/to/the/module.py:name_of_callable\n</pre>\n<p>where the first part is a filesystem path to the python module and the\nsecond part is the name of the callable in the module that will be called.\nThe callable will be passed three parameters in the following order:</p>\n<blockquote>\n<ol>\n<li>The <tt>options</tt> dictionary from the recipe.</li>\n<li>The global <tt>buildout</tt> dictionary.</li>\n<li>A dictionary containing the current <tt>os.environ</tt> augmented with\nthe part specific overrides.</li>\n</ol>\n</blockquote>\n<p>The callable is not expected to return anything.</p>\n<div>\n<p>Note</p>\n<p>The <tt>os.environ</tt> is not modified so if the hook script is\ninterested in the environment variable overrides defined for the\npart it needs to read them from the dictionary that is passed in\nas the third parameter instead of accessing <tt>os.environ</tt>\ndirectly.</p>\n</div>\n</blockquote>\n<p><tt><span class=\"pre\">pre-make-hook</span></tt></p>\n<blockquote>\nCustom python script that will be executed before running\n<tt>make</tt>. The format and semantics are the same as with the\n<tt><span class=\"pre\">pre-configure-hook</span></tt> option.</blockquote>\n<p><tt><span class=\"pre\">post-make-hook</span></tt></p>\n<blockquote>\nCustom python script that will be executed after running\n<tt>make</tt>. The format and semantics are the same as with the\n<tt><span class=\"pre\">pre-configure-hook</span></tt> option.</blockquote>\n<p><tt><span class=\"pre\">keep-compile-dir</span></tt></p>\n<blockquote>\nSwitch to optionally keep the temporary directory where the\npackage was compiled. This is mostly useful for other recipes that\nuse this recipe to compile a software but wish to do some\nadditional steps not handled by this recipe. The location of the\ncompile directory is stored in <tt><span class=\"pre\">options['compile-directory']</span></tt>.\nAccepted values are <tt>true</tt> or <tt>false</tt>, defaults to <tt>false</tt>.</blockquote>\n<p><tt><span class=\"pre\">environment-section</span></tt></p>\n<blockquote>\n<p>Name of a section that provides environment variables that will be used to\naugment the variables read from <tt>os.environ</tt> before executing the\nrecipe.</p>\n<p>This recipe does not modify <tt>os.environ</tt> directly. External commands\nrun as part of the recipe (e.g. make, configure, etc.) get an augmented\nenvironment when they are forked. Python hook scripts are passed the\naugmented as a parameter.</p>\n<p>The values of the environment variables may contain references to other\nexisting environment variables (including themselves) in the form of\nPython string interpolation variables using the dictionary notation. These\nreferences will be expanded using values from <tt>os.environ</tt>. This can be\nused, for example, to append to the <tt>PATH</tt> variable, e.g.:</p>\n<pre>[component]\nrecipe = hexagonit.recipe.cmmi\nenvironment-section =\n    environment\n\n[environment]\nPATH = %(PATH)s:${buildout:directory}/bin\n</pre>\n</blockquote>\n<p><tt>environment</tt></p>\n<blockquote>\n<p>A sequence of <tt>KEY=VALUE</tt> pairs separated by newlines that define\nadditional environment variables used to update <tt>os.environ</tt> before\nexecuting the recipe.</p>\n<p>The semantics of this option are the same as <tt><span class=\"pre\">environment-section</span></tt>. If\nboth <tt><span class=\"pre\">environment-section</span></tt> and <tt>environment</tt> are provided the values from\nthe former will be overridden by the latter allowing per-part customization.</p>\n</blockquote>\n<p>Additionally, the recipe honors the <tt><span class=\"pre\">download-cache</span></tt> option set\nin the <tt>[buildout]</tt> section and stores the downloaded files under\nit. If the value is not set a directory called <tt>downloads</tt> will be\ncreated in the root of the buildout and the <tt><span class=\"pre\">download-cache</span></tt>\noption set accordingly.</p>\n<p>The recipe will first check if there is a local copy of the package\nbefore downloading it from the net. Files can be shared among\ndifferent buildouts by setting the <tt><span class=\"pre\">download-cache</span></tt> to the same\nlocation.</p>\n</div>\n<div id=\"example-usage\">\n<h3><a href=\"#id29\" rel=\"nofollow\">Example usage</a></h3>\n<p>We\u2019ll use a simple tarball to demonstrate the recipe.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; import os.path\n&gt;&gt;&gt; src = join(os.path.dirname(__file__), 'testdata')\n&gt;&gt;&gt; ls(src)\n- Foo-Bar-0.0.0.tar.gz\n- haproxy-1.4.8-dummy.tar.gz\n- package-0.0.0.tar.gz\n</pre>\n</blockquote>\n<p>The package contains a dummy <tt>configure</tt> script that will simply\necho the options it was called with and create a <tt>Makefile</tt> that\nwill do the same.</p>\n<p>Let\u2019s create a buildout to build and install the package.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; write('buildout.cfg',\n... \"\"\"\n... [buildout]\n... newest = false\n... parts = package\n...\n... [package]\n... recipe = hexagonit.recipe.cmmi\n... url = file://%s/package-0.0.0.tar.gz\n... \"\"\" % src)\n</pre>\n</blockquote>\n<p>This will download, extract and build our demo package with the\ndefault build options.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; print(system(buildout))\nInstalling package.\npackage: Extracting package to /sample_buildout/parts/package__compile__\nconfigure --prefix=/sample_buildout/parts/package\nbuilding package\ninstalling package\n</pre>\n</blockquote>\n<p>As we can see the configure script was called with the <tt><span class=\"pre\">--prefix</span></tt>\noption by default followed by calls to <tt>make</tt> and <tt>make install</tt>.</p>\n</div>\n<div id=\"installing-a-perl-package\">\n<h3><a href=\"#id30\" rel=\"nofollow\">Installing a Perl package</a></h3>\n<p>The recipe can be used to install packages that use a slightly different build\nprocess. Perl packages often come with a <tt>Makefile.PL</tt> script that performs\nthe same task as a <tt>configure</tt> script and generates a <tt>Makefile</tt>.</p>\n<p>We can build and install such a package by overriding the <tt><span class=\"pre\">configure-command</span></tt>\noption. The following example builds a Foo::Bar perl module and installs it in\na custom location within the buildout:</p>\n<pre>&gt;&gt;&gt; write('buildout.cfg',\n... \"\"\"\n... [buildout]\n... newest = false\n... parts = foobar\n... perl_lib = ${buildout:directory}/perl_lib\n...\n... [foobar]\n... recipe = hexagonit.recipe.cmmi\n... configure-command = perl -I${buildout:perl_lib}/lib/perl5 Makefile.PL INSTALL_BASE=${buildout:perl_lib}\n... url = file://%s/Foo-Bar-0.0.0.tar.gz\n... \"\"\" % src)\n\n&gt;&gt;&gt; print(system(buildout))\nUninstalling package.\nInstalling foobar.\nfoobar: Extracting package to /sample_buildout/parts/foobar__compile__\nbuilding package\ninstalling package\n</pre>\n</div>\n<div id=\"id13\">\n<span id=\"installing-a-package-without-an-autoconf-like-system\"></span><h3><a href=\"#id31\" rel=\"nofollow\">Installing a package without an <tt>autoconf</tt> like system</a></h3>\n<p>Some packages do not use a configuration mechanism and simply provide a\n<tt>Makefile</tt> for building. It is common in these cases that the build process\nis controlled entirely by direct options to <tt>make</tt>. We can build such a\npackage by faking a configure command that does nothing and passing the\nappropriate options to <tt>make</tt>. The <tt>true</tt> utility found in most shell\nenvironments is a good candidate for this although anything that returns a\nzero exit code would do.</p>\n<p>We are using a dummy \u201cHAProxy\u201d package as an example of a package with only a\nMakefile and using explicit <tt>make</tt> options to control the build process.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; write('buildout.cfg',\n... \"\"\"\n... [buildout]\n... newest = false\n... parts = haproxy\n...\n... [haproxy]\n... recipe = hexagonit.recipe.cmmi\n... configure-command = true\n... make-options =\n...     TARGET=linux26\n...     CPU=i686\n...     USE_PCRE=1\n... url = file://%s/haproxy-1.4.8-dummy.tar.gz\n... \"\"\" % src)\n</pre>\n<pre>&gt;&gt;&gt; print(system(buildout))\nUninstalling foobar.\nInstalling haproxy.\nhaproxy: Extracting package to /sample_buildout/parts/haproxy__compile__\nBuilding HAProxy 1.4.8 (dummy package)\nTARGET: linux26\nCPU: i686\nUSE_PCRE: 1\nInstalling haproxy\n</pre>\n</blockquote>\n</div>\n<div id=\"installing-checkouts\">\n<h3><a href=\"#id32\" rel=\"nofollow\">Installing checkouts</a></h3>\n<p>Sometimes instead of downloading and building an existing tarball we need to\nwork with code that is already available on the filesystem, for example an SVN\ncheckout.</p>\n<p>Instead of providing the <tt>url</tt> option we will provide a <tt>path</tt> option to\nthe directory containing the source code.</p>\n<p>Let\u2019s demonstrate this by first unpacking our test package to the filesystem\nand building that.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; checkout_dir = tmpdir('checkout')\n&gt;&gt;&gt; import setuptools.archive_util\n&gt;&gt;&gt; setuptools.archive_util.unpack_archive('%s/package-0.0.0.tar.gz' % src,\n...                                        checkout_dir)\n&gt;&gt;&gt; ls(checkout_dir)\nd package-0.0.0\n</pre>\n<pre>&gt;&gt;&gt; write('buildout.cfg',\n... \"\"\"\n... [buildout]\n... newest = false\n... parts = package\n...\n... [package]\n... recipe = hexagonit.recipe.cmmi\n... path = %s/package-0.0.0\n... \"\"\" % checkout_dir)\n</pre>\n<pre>&gt;&gt;&gt; print(system(buildout))\nUninstalling haproxy.\nInstalling package.\npackage: Using local source directory: /checkout/package-0.0.0\nconfigure --prefix=/sample_buildout/parts/package\nbuilding package\ninstalling package\n</pre>\n</blockquote>\n<p>Since using the <tt>path</tt> implies that the source code has been acquired\noutside of the control of the recipe also the responsibility of managing it is\noutside of the recipe.</p>\n<p>Depending on the software you may need to manually run <tt>make clean</tt> etc.\nbetween buildout runs if you make changes to the code. Also, the\n<tt><span class=\"pre\">keep-compile-dir</span></tt> has no effect when <tt>path</tt> is used.</p>\n</div>\n<div id=\"advanced-configuration\">\n<h3><a href=\"#id33\" rel=\"nofollow\">Advanced configuration</a></h3>\n<p>The above options are enough to build most packages. However, in some cases it\nis not enough and we need to control the build process more. Let\u2019s try again\nwith a new buildout and provide more options.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; write('buildout.cfg',\n... \"\"\"\n... [buildout]\n... newest = false\n... parts = package\n...\n... [build-environment]\n... CFLAGS = -I/sw/include\n... LDFLAGS = -I/sw/lib\n...\n... [package]\n... recipe = hexagonit.recipe.cmmi\n... url = file://%(src)s/package-0.0.0.tar.gz\n... md5sum = 6b94295c042a91ea3203857326bc9209\n... prefix = /somewhere/else\n... environment-section = build-environment\n... environment =\n...     LDFLAGS=-L/sw/lib -L/some/extra/lib\n... configure-options =\n...     --with-threads\n...     --without-foobar\n... make-targets =\n...     install\n...     install-lib\n... patches =\n...     patches/configure.patch\n...     patches/Makefile.dist.patch\n... \"\"\" % dict(src=src))\n</pre>\n</blockquote>\n<p>This configuration uses custom configure options, an environment section,\nper-part customization to the environment, custom prefix, multiple make\ntargets and also patches the source code before the scripts are run.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; print(system(buildout))\nUninstalling package.\nInstalling package.\npackage: [ENV] CFLAGS = -I/sw/include\npackage: [ENV] LDFLAGS = -L/sw/lib -L/some/extra/lib\npackage: Extracting package to /sample_buildout/parts/package__compile__\npackage: Applying patches\npatching file configure\npatching file Makefile.dist\npatched-configure --prefix=/somewhere/else --with-threads --without-foobar\nbuilding patched package\ninstalling patched package\ninstalling patched package-lib\n</pre>\n</blockquote>\n</div>\n<div id=\"customizing-the-build-process\">\n<h3><a href=\"#id34\" rel=\"nofollow\">Customizing the build process</a></h3>\n<p>Sometimes even the above is not enough and you need to be able to control the\nprocess in even more detail. One such use case would be to perform dynamic\nsubstitutions on the source code (possible based on information from the\nbuildout) which cannot be done with static patches or to simply run arbitrary\ncommands.</p>\n<p>The recipe allows you to write custom python scripts that hook into the build\nprocess. You can define a script to be run:</p>\n<blockquote>\n<ul>\n<li>before the configure script is executed (pre-configure-hook)</li>\n<li>before the make process is executed (pre-make-hook)</li>\n<li>after the make process is finished (post-make-hook)</li>\n</ul>\n</blockquote>\n<p>Each option needs to contain the following information</p>\n<blockquote>\n/full/path/to/the/python/module.py:name_of_callable</blockquote>\n<p>where the callable object (here name_of_callable) is expected to take three\nparameters:</p>\n<blockquote>\n<ol>\n<li>The <tt>options</tt> dictionary from the recipe.</li>\n<li>The global <tt>buildout</tt> dictionary.</li>\n<li>A dictionary containing the current <tt>os.environ</tt> augmented with\nthe part specific overrides.</li>\n</ol>\n</blockquote>\n<p>These parameters should provide the callable all the necessary information to\nperform any part specific customization to the build process.</p>\n<p>Let\u2019s create a simple python script to demonstrate the functionality. You can\nnaturally have separate modules for each hook or simply use just one or two\nhooks. Here we use just a single module.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; hooks = tmpdir('hooks')\n&gt;&gt;&gt; write(hooks, 'customhandlers.py',\n... \"\"\"\n... import logging\n... log = logging.getLogger('hook')\n...\n... def preconfigure(options, buildout, environment):\n...     log.info('This is pre-configure-hook!')\n...\n... def premake(options, buildout, environment):\n...     log.info('This is pre-make-hook!')\n...\n... def postmake(options, buildout, environment):\n...     log.info('This is post-make-hook!')\n...\n... \"\"\")\n</pre>\n</blockquote>\n<p>and a new buildout to try it out</p>\n<blockquote>\n<pre>&gt;&gt;&gt; write('buildout.cfg',\n... \"\"\"\n... [buildout]\n... newest = false\n... parts = package\n...\n... [package]\n... recipe = hexagonit.recipe.cmmi\n... url = file://%(src)s/package-0.0.0.tar.gz\n... pre-configure-hook = %(module)s:preconfigure\n... pre-make-hook = %(module)s:premake\n... post-make-hook = %(module)s:postmake\n... \"\"\" % dict(src=src, module='%s/customhandlers.py' % hooks))\n</pre>\n<pre>&gt;&gt;&gt; print(system(buildout))\nUninstalling package.\nInstalling package.\npackage: Extracting package to /sample_buildout/parts/package__compile__\npackage: Executing pre-configure-hook\nhook: This is pre-configure-hook!\nconfigure --prefix=/sample_buildout/parts/package\npackage: Executing pre-make-hook\nhook: This is pre-make-hook!\nbuilding package\ninstalling package\npackage: Executing post-make-hook\nhook: This is post-make-hook!\n</pre>\n</blockquote>\n<p>For even more specific needs you can write your own recipe that uses\n<tt>hexagonit.recipe.cmmi</tt> and set the <tt><span class=\"pre\">keep-compile-dir</span></tt> option to <tt>true</tt>.\nYou can then continue from where this recipe finished by reading the location\nof the compile directory from <tt><span class=\"pre\">options['compile-directory']</span></tt> from your own\nrecipe.</p>\n</div>\n</div>\n<div id=\"contributors\">\n<h2><a href=\"#id35\" rel=\"nofollow\">Contributors</a></h2>\n<ul>\n<li>Kai Lautaportti (dokai), Author</li>\n<li>C\u00e9dric de Saint Martin (desaintmartin)</li>\n<li>Marc Abramowitz (msabramo)</li>\n<li>Nicolas Dumazet (nicdumz)</li>\n<li>Guy Rozendorn (grzn)</li>\n<li>Marco Mariani (mmariani)</li>\n<li>galpin</li>\n</ul>\n</div>\n<div id=\"download\">\n<h2><a href=\"#id36\" rel=\"nofollow\">Download</a></h2>\n</div>\n\n          </div>"}, "last_serial": 887015, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "d3139873ba7b2843ed5fa820541f732c", "sha256": "9f5b80f8a5a842c2f2a3f7b8826c4cafaa361aa082bd4862434ffaa36733ef32"}, "downloads": -1, "filename": "hexagonit.recipe.cmmi-1.0.0-py2.4.egg", "has_sig": false, "md5_digest": "d3139873ba7b2843ed5fa820541f732c", "packagetype": "bdist_egg", "python_version": "2.4", "requires_python": null, "size": 14786, "upload_time": "2007-08-04T19:11:55", "upload_time_iso_8601": "2007-08-04T19:11:55Z", "url": "https://files.pythonhosted.org/packages/e5/5c/b8433ebb3fa363275655be3c7885ca843c48eee0dea9d9ef38b3d7845bb6/hexagonit.recipe.cmmi-1.0.0-py2.4.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "5790782f8796d8e5cbbba52c1ce819fc", "sha256": "c5ce2244d3332d6e836192a0e2b59f98fd2aedeae391a4a528017c98904e361f"}, "downloads": -1, "filename": "hexagonit.recipe.cmmi-1.0.0.tar.gz", "has_sig": false, "md5_digest": "5790782f8796d8e5cbbba52c1ce819fc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7916, "upload_time": "2007-08-04T19:11:54", "upload_time_iso_8601": "2007-08-04T19:11:54Z", "url": "https://files.pythonhosted.org/packages/c9/1e/12ceca61c33299e62ed339e457eb7b1833be17c3dfcb518c83dd113a169a/hexagonit.recipe.cmmi-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "48538641cc5132382ade100605456706", "sha256": "9f740ef67a43db2ade3dc0cc608b3034d11ca6cd1832e9747c556de719affea9"}, "downloads": -1, "filename": "hexagonit.recipe.cmmi-1.0.1-py2.4.egg", "has_sig": false, "md5_digest": "48538641cc5132382ade100605456706", "packagetype": "bdist_egg", "python_version": "2.4", "requires_python": null, "size": 15079, "upload_time": "2007-08-05T20:58:54", "upload_time_iso_8601": "2007-08-05T20:58:54Z", "url": "https://files.pythonhosted.org/packages/31/db/db69bc39443950f8e6833de65f339e263d4bd378ab8de038de546d1b7898/hexagonit.recipe.cmmi-1.0.1-py2.4.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "f3237c342eb98e54af319a83a5d8def5", "sha256": "539f7c321b847e4e715737b8a4e900cc4f3a1747a7a3a54228034b358261afd2"}, "downloads": -1, "filename": "hexagonit.recipe.cmmi-1.0.1.tar.gz", "has_sig": false, "md5_digest": "f3237c342eb98e54af319a83a5d8def5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8147, "upload_time": "2007-08-05T20:58:53", "upload_time_iso_8601": "2007-08-05T20:58:53Z", "url": "https://files.pythonhosted.org/packages/2f/fa/14eec7b9c0dcaf0db8244872c96ec294e7dcf024e3831940d4e9d061b72f/hexagonit.recipe.cmmi-1.0.1.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "89aa99664b702e961ecedc28fa32fa82", "sha256": "5d31eac4de3b1a1bfbae62fba22d4e004913bccde8ac50d3a783ddf761fd736b"}, "downloads": -1, "filename": "hexagonit.recipe.cmmi-1.1.0-py2.4.egg", "has_sig": false, "md5_digest": "89aa99664b702e961ecedc28fa32fa82", "packagetype": "bdist_egg", "python_version": "2.4", "requires_python": null, "size": 16317, "upload_time": "2007-08-09T16:27:57", "upload_time_iso_8601": "2007-08-09T16:27:57Z", "url": "https://files.pythonhosted.org/packages/fd/ab/8951c117ce7ffd41780561ed7c71c881a950c131f78e53def5159d7bea8c/hexagonit.recipe.cmmi-1.1.0-py2.4.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "a5f5fe5f0b847a856f3193a0cf22b343", "sha256": "e8fb756c2481fb014595aabdb1b5a2ee3306cf187ddafabeb03fecd5c8088fc4"}, "downloads": -1, "filename": "hexagonit.recipe.cmmi-1.1.0.tar.gz", "has_sig": false, "md5_digest": "a5f5fe5f0b847a856f3193a0cf22b343", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8878, "upload_time": "2007-08-09T16:27:56", "upload_time_iso_8601": "2007-08-09T16:27:56Z", "url": "https://files.pythonhosted.org/packages/59/80/52a6fbd71329a2a50947fe64dcd6b299749329b3fce8e9294bb913bd9a4e/hexagonit.recipe.cmmi-1.1.0.tar.gz", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "66850cb64e9ce708a2315276af5d6904", "sha256": "d8331ea38c28e386bf5019a42827e58dfb44119b486baedc8a264b063f2d743b"}, "downloads": -1, "filename": "hexagonit.recipe.cmmi-1.1.1-py2.4.egg", "has_sig": false, "md5_digest": "66850cb64e9ce708a2315276af5d6904", "packagetype": "bdist_egg", "python_version": "2.4", "requires_python": null, "size": 16561, "upload_time": "2007-10-13T11:00:37", "upload_time_iso_8601": "2007-10-13T11:00:37Z", "url": "https://files.pythonhosted.org/packages/ec/c2/b2deeea9c12a10690494eadd970b768024779b107dce418e2b08a8afe5c8/hexagonit.recipe.cmmi-1.1.1-py2.4.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "9d53f9fa868870578ffc4375804b1e04", "sha256": "9e7a86a023558b0e859eca5b3b30aa18633b4d5b5e3364d6bb249db7b76567ce"}, "downloads": -1, "filename": "hexagonit.recipe.cmmi-1.1.1.tar.gz", "has_sig": false, "md5_digest": "9d53f9fa868870578ffc4375804b1e04", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9111, "upload_time": "2007-10-13T11:00:36", "upload_time_iso_8601": "2007-10-13T11:00:36Z", "url": "https://files.pythonhosted.org/packages/21/81/d86185120838b4c02fc697f9c5b4c9d747aba082771be4326870e3cc27f2/hexagonit.recipe.cmmi-1.1.1.tar.gz", "yanked": false}], "1.2.0": [{"comment_text": "", "digests": {"md5": "a9e4c4edb70d3d0f34210d7e62780b5c", "sha256": "e88861aa2baff1e267ce525613f0a4587e4c4f79e4a0fbbd1575682cf305fd9f"}, "downloads": -1, "filename": "hexagonit.recipe.cmmi-1.2.0.tar.gz", "has_sig": false, "md5_digest": "a9e4c4edb70d3d0f34210d7e62780b5c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10432, "upload_time": "2009-08-05T15:54:17", "upload_time_iso_8601": "2009-08-05T15:54:17.476143Z", "url": "https://files.pythonhosted.org/packages/29/c8/37ace733a275f52cf71faafe16b4cad9390704f92b88b309d0377a715cfe/hexagonit.recipe.cmmi-1.2.0.tar.gz", "yanked": false}], "1.3.0": [{"comment_text": "", "digests": {"md5": "cbbc55bbb43d59d5cbf8d628388ff41e", "sha256": "58b4744a1747264de2579889f6a4dab07b59bb9c686bc803c4ae80635d0e520a"}, "downloads": -1, "filename": "hexagonit.recipe.cmmi-1.3.0.tar.gz", "has_sig": false, "md5_digest": "cbbc55bbb43d59d5cbf8d628388ff41e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11495, "upload_time": "2009-09-20T15:30:44", "upload_time_iso_8601": "2009-09-20T15:30:44.730366Z", "url": "https://files.pythonhosted.org/packages/09/b3/bf718783b29cbb8b2bac5db2364c4cb60bd1b3012ac5a179ecf18046c846/hexagonit.recipe.cmmi-1.3.0.tar.gz", "yanked": false}], "1.3.1": [{"comment_text": "", "digests": {"md5": "09b20dd606774aa7992bebd61c8fc0ea", "sha256": "720560aa95083fa18a24a4ebdc1b2996d128c885a271b7d624245180661cbfa5"}, "downloads": -1, "filename": "hexagonit.recipe.cmmi-1.3.1.tar.gz", "has_sig": false, "md5_digest": "09b20dd606774aa7992bebd61c8fc0ea", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14833, "upload_time": "2010-08-23T15:24:32", "upload_time_iso_8601": "2010-08-23T15:24:32.442574Z", "url": "https://files.pythonhosted.org/packages/bc/90/facb2565613b62a74a7f14d5f2fc0f9fdd56f93b9b1c58607a98acecd420/hexagonit.recipe.cmmi-1.3.1.tar.gz", "yanked": false}], "1.4.0": [{"comment_text": "", "digests": {"md5": "2ba9d20389fa69766a08b398b51bf655", "sha256": "db44f8e452262600e58f68e77e611f5cbd493d28bc79da275535ec278fa52569"}, "downloads": -1, "filename": "hexagonit.recipe.cmmi-1.4.0.tar.gz", "has_sig": false, "md5_digest": "2ba9d20389fa69766a08b398b51bf655", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21984, "upload_time": "2010-08-27T13:23:36", "upload_time_iso_8601": "2010-08-27T13:23:36.393879Z", "url": "https://files.pythonhosted.org/packages/60/98/d226d3d0d545faf567c03e16cc9eda4374a14cbe7dbb1bec1dc02c6af4a1/hexagonit.recipe.cmmi-1.4.0.tar.gz", "yanked": false}], "1.5.0": [{"comment_text": "", "digests": {"md5": "ae9dc2fc8dd98a3dd6fb90f95602a3a6", "sha256": "cfc010f522fee4d0cd8e4a1567be43e7a6f89590233f6dd2525e44e94db34eb9"}, "downloads": -1, "filename": "hexagonit.recipe.cmmi-1.5.0.tar.gz", "has_sig": false, "md5_digest": "ae9dc2fc8dd98a3dd6fb90f95602a3a6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24764, "upload_time": "2010-12-17T09:20:39", "upload_time_iso_8601": "2010-12-17T09:20:39.004421Z", "url": "https://files.pythonhosted.org/packages/75/be/dcd670ef8146d284362c1b630abb367783da4d77efe95f95748c6ec2252a/hexagonit.recipe.cmmi-1.5.0.tar.gz", "yanked": false}], "1.5.1": [{"comment_text": "", "digests": {"md5": "bab0e1f8cfb807e321717eac5a8ba884", "sha256": "9a436dca612d3a4ad158fd0d3ab24ee6dc8e7fe948e7311b836ba65909077746"}, "downloads": -1, "filename": "hexagonit.recipe.cmmi-1.5.1.zip", "has_sig": false, "md5_digest": "bab0e1f8cfb807e321717eac5a8ba884", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 32766, "upload_time": "2012-05-21T22:01:05", "upload_time_iso_8601": "2012-05-21T22:01:05.177985Z", "url": "https://files.pythonhosted.org/packages/39/23/ffb7745349294b521e88906b9649772c50be93c1b6f374e3325adbd78892/hexagonit.recipe.cmmi-1.5.1.zip", "yanked": false}], "1.6": [{"comment_text": "", "digests": {"md5": "c9447d487c75c7cbcb2f3b418558ed38", "sha256": "60db8f1b191793a338753e1a9d236c5ad7001d675f32f9d120a7526cf953863b"}, "downloads": -1, "filename": "hexagonit.recipe.cmmi-1.6.zip", "has_sig": false, "md5_digest": "c9447d487c75c7cbcb2f3b418558ed38", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 33888, "upload_time": "2012-06-28T08:30:55", "upload_time_iso_8601": "2012-06-28T08:30:55.256467Z", "url": "https://files.pythonhosted.org/packages/fb/bd/6115654e8470d60257c0968b018993fd5fa6c7c2f5fd4c4cae4f445c150d/hexagonit.recipe.cmmi-1.6.zip", "yanked": false}], "2.0": [{"comment_text": "", "digests": {"md5": "df2289c758c2052326a7d133bfc57989", "sha256": "ae0e4deb1e415ec3eaac760ff4f13c4a6711b7456cbb45fc26d66bc6ec380318"}, "downloads": -1, "filename": "hexagonit.recipe.cmmi-2.0.tar.gz", "has_sig": false, "md5_digest": "df2289c758c2052326a7d133bfc57989", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 36240, "upload_time": "2013-04-07T17:26:05", "upload_time_iso_8601": "2013-04-07T17:26:05.535456Z", "url": "https://files.pythonhosted.org/packages/15/a5/6bc64eed480d4893d0f449fd831e51f87fafef60635c7bbb1d7d5cf7317d/hexagonit.recipe.cmmi-2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "df2289c758c2052326a7d133bfc57989", "sha256": "ae0e4deb1e415ec3eaac760ff4f13c4a6711b7456cbb45fc26d66bc6ec380318"}, "downloads": -1, "filename": "hexagonit.recipe.cmmi-2.0.tar.gz", "has_sig": false, "md5_digest": "df2289c758c2052326a7d133bfc57989", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 36240, "upload_time": "2013-04-07T17:26:05", "upload_time_iso_8601": "2013-04-07T17:26:05.535456Z", "url": "https://files.pythonhosted.org/packages/15/a5/6bc64eed480d4893d0f449fd831e51f87fafef60635c7bbb1d7d5cf7317d/hexagonit.recipe.cmmi-2.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:51:29 2020"}