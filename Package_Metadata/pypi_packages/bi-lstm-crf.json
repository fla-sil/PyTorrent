{"info": {"author": "Dasheng Ji", "author_email": "jidasheng@qq.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "A PyTorch implementation of the BI-LSTM-CRF model.\n\n# Features:\n- Compared with [PyTorch BI-LSTM-CRF tutorial][1], following improvements are performed:\n    - Full support for mini-batch computation\n    - Full vectorized implementation. Specially, removing all loops in \"score sentence\" algorithm, which dramatically improve training performance\n    - CUDA supported\n    - Very simple APIs for [CRF module](#CRF)\n        - START/STOP tags are automatically added in CRF\n        - A inner Linear Layer is included which transform from feature space to tag space\n- Specialized for NLP sequence tagging tasks\n- Easy to train your own sequence tagging models\n- MIT License\n\n# Installation\n- dependencies\n    - Python 3\n    - [PyTorch][5]\n- install\n    ```sh\n    $ pip install bi-lstm-crf\n    ```\n\n# Training\n### corpus\n- prepare your corpus in the specified [structure and format][2]\n- there is also a sample corpus in [`bi_lstm_crf/app/sample_corpus`][3]\n\n### training\n```sh\n$ python -m bi_lstm_crf corpus_dir --model_dir \"model_xxx\"\n```\n- more [options][4]\n- [detail of model_dir][7]\n\n### training curve\n```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# the training losses are saved in the model_dir\ndf = pd.read_csv(\".../model_dir/loss.csv\")\ndf[[\"train_loss\", \"val_loss\"]].ffill().plot(grid=True)\nplt.show()\n```\n\n# Prediction\n```python\nfrom bi_lstm_crf.app import WordsTagger\n\nmodel = WordsTagger(model_dir=\"xxx\")\ntags, sequences = model([\"\u5e02\u9886\u5bfc\u5230\u6210\u90fd...\"])  # CHAR-based model\nprint(tags)  \n# [[\"B\", \"B\", \"I\", \"B\", \"B-LOC\", \"I-LOC\", \"I-LOC\", \"I-LOC\", \"I-LOC\", \"B\", \"I\", \"B\", \"I\"]]\nprint(sequences)\n# [['\u5e02', '\u9886\u5bfc', '\u5230', ('\u6210\u90fd', 'LOC'), ...]]\n\n# model([[\"\u5e02\", \"\u9886\u5bfc\", \"\u5230\", \"\u6210\u90fd\", ...]])  # WORD-based model\n```\n\n# <a id=\"CRF\">CRF Module\nThe CRF module can be easily embeded into other models:\n```python\nfrom bi_lstm_crf import CRF\n\n# a BERT-CRF model for sequence tagging\nclass BertCrf(nn.Module):\n    def __init__(self, ...):\n        ...\n        self.bert = BERT(...)\n        self.crf = CRF(in_features, num_tags)\n\n    def loss(self, xs, tags):\n        features, = self.bert(xs)\n        masks = xs.gt(0)\n        loss = self.crf.loss(features, tags, masks)\n        return loss\n\n    def forward(self, xs):\n        features, = self.bert(xs)\n        masks = xs.gt(0)\n        scores, tag_seq = self.crf(features, masks)\n        return scores, tag_seq\n```\n\n# References\n1. [Zhiheng Huang, Wei Xu, and Kai Yu. 2015. Bidirectional LSTM-CRF Models for Sequence Tagging][6]. arXiv:1508.01991.\n2. PyTorch tutorial [ADVANCED: MAKING DYNAMIC DECISIONS AND THE BI-LSTM CRF][1]\n\n[1]:https://pytorch.org/tutorials/beginner/nlp/advanced_tutorial.html\n[2]:https://github.com/jidasheng/bi-lstm-crf/wiki/corpus-structure-and-format\n[3]:https://github.com/jidasheng/bi-lstm-crf/tree/master/bi_lstm_crf/app/sample_corpus\n[4]:https://github.com/jidasheng/bi-lstm-crf/wiki/training-options\n[5]:https://pytorch.org/\n[6]:https://arxiv.org/abs/1508.01991\n[7]:https://github.com/jidasheng/bi-lstm-crf/wiki/details-of-model_dir", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/jidasheng/bi-lstm-crf", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "bi-lstm-crf", "package_url": "https://pypi.org/project/bi-lstm-crf/", "platform": "", "project_url": "https://pypi.org/project/bi-lstm-crf/", "project_urls": {"Homepage": "https://github.com/jidasheng/bi-lstm-crf"}, "release_url": "https://pypi.org/project/bi-lstm-crf/0.2.0/", "requires_dist": null, "requires_python": "", "summary": "A PyTorch implementation of the BI-LSTM-CRF model", "version": "0.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>A PyTorch implementation of the BI-LSTM-CRF model.</p>\n<h1>Features:</h1>\n<ul>\n<li>Compared with <a href=\"https://pytorch.org/tutorials/beginner/nlp/advanced_tutorial.html\" rel=\"nofollow\">PyTorch BI-LSTM-CRF tutorial</a>, following improvements are performed:\n<ul>\n<li>Full support for mini-batch computation</li>\n<li>Full vectorized implementation. Specially, removing all loops in \"score sentence\" algorithm, which dramatically improve training performance</li>\n<li>CUDA supported</li>\n<li>Very simple APIs for <a href=\"#CRF\" rel=\"nofollow\">CRF module</a>\n<ul>\n<li>START/STOP tags are automatically added in CRF</li>\n<li>A inner Linear Layer is included which transform from feature space to tag space</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Specialized for NLP sequence tagging tasks</li>\n<li>Easy to train your own sequence tagging models</li>\n<li>MIT License</li>\n</ul>\n<h1>Installation</h1>\n<ul>\n<li>dependencies\n<ul>\n<li>Python 3</li>\n<li><a href=\"https://pytorch.org/\" rel=\"nofollow\">PyTorch</a></li>\n</ul>\n</li>\n<li>install\n<pre>$ pip install bi-lstm-crf\n</pre>\n</li>\n</ul>\n<h1>Training</h1>\n<h3>corpus</h3>\n<ul>\n<li>prepare your corpus in the specified <a href=\"https://github.com/jidasheng/bi-lstm-crf/wiki/corpus-structure-and-format\" rel=\"nofollow\">structure and format</a></li>\n<li>there is also a sample corpus in <a href=\"https://github.com/jidasheng/bi-lstm-crf/tree/master/bi_lstm_crf/app/sample_corpus\" rel=\"nofollow\"><code>bi_lstm_crf/app/sample_corpus</code></a></li>\n</ul>\n<h3>training</h3>\n<pre>$ python -m bi_lstm_crf corpus_dir --model_dir <span class=\"s2\">\"model_xxx\"</span>\n</pre>\n<ul>\n<li>more <a href=\"https://github.com/jidasheng/bi-lstm-crf/wiki/training-options\" rel=\"nofollow\">options</a></li>\n<li><a href=\"https://github.com/jidasheng/bi-lstm-crf/wiki/details-of-model_dir\" rel=\"nofollow\">detail of model_dir</a></li>\n</ul>\n<h3>training curve</h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pandas</span> <span class=\"k\">as</span> <span class=\"nn\">pd</span>\n<span class=\"kn\">import</span> <span class=\"nn\">matplotlib.pyplot</span> <span class=\"k\">as</span> <span class=\"nn\">plt</span>\n\n<span class=\"c1\"># the training losses are saved in the model_dir</span>\n<span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">read_csv</span><span class=\"p\">(</span><span class=\"s2\">\".../model_dir/loss.csv\"</span><span class=\"p\">)</span>\n<span class=\"n\">df</span><span class=\"p\">[[</span><span class=\"s2\">\"train_loss\"</span><span class=\"p\">,</span> <span class=\"s2\">\"val_loss\"</span><span class=\"p\">]]</span><span class=\"o\">.</span><span class=\"n\">ffill</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">grid</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n</pre>\n<h1>Prediction</h1>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">bi_lstm_crf.app</span> <span class=\"kn\">import</span> <span class=\"n\">WordsTagger</span>\n\n<span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">WordsTagger</span><span class=\"p\">(</span><span class=\"n\">model_dir</span><span class=\"o\">=</span><span class=\"s2\">\"xxx\"</span><span class=\"p\">)</span>\n<span class=\"n\">tags</span><span class=\"p\">,</span> <span class=\"n\">sequences</span> <span class=\"o\">=</span> <span class=\"n\">model</span><span class=\"p\">([</span><span class=\"s2\">\"\u5e02\u9886\u5bfc\u5230\u6210\u90fd...\"</span><span class=\"p\">])</span>  <span class=\"c1\"># CHAR-based model</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">tags</span><span class=\"p\">)</span>  \n<span class=\"c1\"># [[\"B\", \"B\", \"I\", \"B\", \"B-LOC\", \"I-LOC\", \"I-LOC\", \"I-LOC\", \"I-LOC\", \"B\", \"I\", \"B\", \"I\"]]</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">sequences</span><span class=\"p\">)</span>\n<span class=\"c1\"># [['\u5e02', '\u9886\u5bfc', '\u5230', ('\u6210\u90fd', 'LOC'), ...]]</span>\n\n<span class=\"c1\"># model([[\"\u5e02\", \"\u9886\u5bfc\", \"\u5230\", \"\u6210\u90fd\", ...]])  # WORD-based model</span>\n</pre>\n<h1><a id=\"CRF\">CRF Module</a></h1><a id=\"CRF\">\n<p>The CRF module can be easily embeded into other models:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">bi_lstm_crf</span> <span class=\"kn\">import</span> <span class=\"n\">CRF</span>\n\n<span class=\"c1\"># a BERT-CRF model for sequence tagging</span>\n<span class=\"k\">class</span> <span class=\"nc\">BertCrf</span><span class=\"p\">(</span><span class=\"n\">nn</span><span class=\"o\">.</span><span class=\"n\">Module</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">):</span>\n        <span class=\"o\">...</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">bert</span> <span class=\"o\">=</span> <span class=\"n\">BERT</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">crf</span> <span class=\"o\">=</span> <span class=\"n\">CRF</span><span class=\"p\">(</span><span class=\"n\">in_features</span><span class=\"p\">,</span> <span class=\"n\">num_tags</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">loss</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">xs</span><span class=\"p\">,</span> <span class=\"n\">tags</span><span class=\"p\">):</span>\n        <span class=\"n\">features</span><span class=\"p\">,</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">bert</span><span class=\"p\">(</span><span class=\"n\">xs</span><span class=\"p\">)</span>\n        <span class=\"n\">masks</span> <span class=\"o\">=</span> <span class=\"n\">xs</span><span class=\"o\">.</span><span class=\"n\">gt</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n        <span class=\"n\">loss</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">crf</span><span class=\"o\">.</span><span class=\"n\">loss</span><span class=\"p\">(</span><span class=\"n\">features</span><span class=\"p\">,</span> <span class=\"n\">tags</span><span class=\"p\">,</span> <span class=\"n\">masks</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">loss</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">forward</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">xs</span><span class=\"p\">):</span>\n        <span class=\"n\">features</span><span class=\"p\">,</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">bert</span><span class=\"p\">(</span><span class=\"n\">xs</span><span class=\"p\">)</span>\n        <span class=\"n\">masks</span> <span class=\"o\">=</span> <span class=\"n\">xs</span><span class=\"o\">.</span><span class=\"n\">gt</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n        <span class=\"n\">scores</span><span class=\"p\">,</span> <span class=\"n\">tag_seq</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">crf</span><span class=\"p\">(</span><span class=\"n\">features</span><span class=\"p\">,</span> <span class=\"n\">masks</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">scores</span><span class=\"p\">,</span> <span class=\"n\">tag_seq</span>\n</pre>\n<h1>References</h1>\n</a><ol><a id=\"CRF\">\n</a><li><a id=\"CRF\"></a><a href=\"https://arxiv.org/abs/1508.01991\" rel=\"nofollow\">Zhiheng Huang, Wei Xu, and Kai Yu. 2015. Bidirectional LSTM-CRF Models for Sequence Tagging</a>. arXiv:1508.01991.</li>\n<li>PyTorch tutorial <a href=\"https://pytorch.org/tutorials/beginner/nlp/advanced_tutorial.html\" rel=\"nofollow\">ADVANCED: MAKING DYNAMIC DECISIONS AND THE BI-LSTM CRF</a></li>\n</ol>\n\n          </div>"}, "last_serial": 7104612, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "5f6face6e5fadf02243d6ad06d8212f9", "sha256": "5c0995777326df7666df7b1919ef8702c1c623d14bfb98d6cb2338c766891767"}, "downloads": -1, "filename": "bi-lstm-crf-0.1.0.tar.gz", "has_sig": false, "md5_digest": "5f6face6e5fadf02243d6ad06d8212f9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9127, "upload_time": "2019-12-03T08:16:33", "upload_time_iso_8601": "2019-12-03T08:16:33.720184Z", "url": "https://files.pythonhosted.org/packages/0c/62/726ac58dec87c10cdc38dd26c46df91c5a31bcef5f7e3d1b0fb3a40b6b09/bi-lstm-crf-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "142479f486ffb6fa2ce9396b512b6586", "sha256": "b4dcb66bc8087fc8332efabc6573c84e9e7a961f4fa77067387d2945e4766540"}, "downloads": -1, "filename": "bi-lstm-crf-0.1.1.tar.gz", "has_sig": false, "md5_digest": "142479f486ffb6fa2ce9396b512b6586", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9609, "upload_time": "2019-12-04T04:33:08", "upload_time_iso_8601": "2019-12-04T04:33:08.158959Z", "url": "https://files.pythonhosted.org/packages/bf/77/e1b01133fc18df387527dcb77c6ab0f6a9a03a6e258936e7f955c5d7495e/bi-lstm-crf-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "d931eee9febc756936e4fa656f979306", "sha256": "f6360096d41aaea3a580de2328c8c6f9fd37a9462f42db6c379229838caf8836"}, "downloads": -1, "filename": "bi-lstm-crf-0.1.2.tar.gz", "has_sig": false, "md5_digest": "d931eee9febc756936e4fa656f979306", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9790, "upload_time": "2019-12-06T02:38:00", "upload_time_iso_8601": "2019-12-06T02:38:00.335913Z", "url": "https://files.pythonhosted.org/packages/0d/c9/9b52bd25a29b824a8f1cbd4fa6646b975b3e695da08f8ba5d218d30ab53a/bi-lstm-crf-0.1.2.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "28e7ab951cb57fe4407d4c287a7a6738", "sha256": "cbe90e68066cc56e38f0b16ccafa292d6dc7f18d41d5363339aaa605cd877167"}, "downloads": -1, "filename": "bi-lstm-crf-0.2.0.tar.gz", "has_sig": false, "md5_digest": "28e7ab951cb57fe4407d4c287a7a6738", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11142, "upload_time": "2020-04-26T11:57:45", "upload_time_iso_8601": "2020-04-26T11:57:45.548095Z", "url": "https://files.pythonhosted.org/packages/13/f4/cf0aabd5d3af7c8815bbce11038f9a9ec5b5c2e5d2f1a311e51b138e2313/bi-lstm-crf-0.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "28e7ab951cb57fe4407d4c287a7a6738", "sha256": "cbe90e68066cc56e38f0b16ccafa292d6dc7f18d41d5363339aaa605cd877167"}, "downloads": -1, "filename": "bi-lstm-crf-0.2.0.tar.gz", "has_sig": false, "md5_digest": "28e7ab951cb57fe4407d4c287a7a6738", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11142, "upload_time": "2020-04-26T11:57:45", "upload_time_iso_8601": "2020-04-26T11:57:45.548095Z", "url": "https://files.pythonhosted.org/packages/13/f4/cf0aabd5d3af7c8815bbce11038f9a9ec5b5c2e5d2f1a311e51b138e2313/bi-lstm-crf-0.2.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:37:31 2020"}