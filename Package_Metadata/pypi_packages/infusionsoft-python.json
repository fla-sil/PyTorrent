{"info": {"author": "Yordy Gelvez", "author_email": "yordy.gelvez@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "# infusionsoft-python\n\nInfusionSoft API wrapper for Infusionsoft written in Python.\n\n## Installing\n```\npip install infusionsoft-python\n```\n\n## Usage\n```python\nfrom infusionsoft.client import Client\nclient = Client('CLIENT_ID', 'CLIENT_SECRET', 'OPTIONAL - access_token')\n```\nFirst time you will have to authorize your app to get the access_token. Follow these steps to do so:\n#### Get authorization url\n```python\nurl = client.oauth_access(\"REDIRECT_URL\")\n```\nFirst, you need to generate a url and direct admin's browser to this url.\nThere she will see an Infusionsoft branded authorisation window.\nWhen she clicks \"Authorize\", the browser will redirect the admin to the REDIRECT_URL that you have passed into this method.\nA GET parameter named 'code' will be passed along side this request. You will need this CODE and the initial REDIRECT_URL to get the token.\n\nCode sample using Flask:\n```python\n@app.route('/infusionsoft-auth', methods=['GET'])\ndef infusionsoft_auth():\n    client = Client('CLIENT_ID', 'CLIENT_SECRET')\n\n    code = request.args.get('code', None)\n    if not code:\n        url = client.oauth_access(\"127.0.0.1/infusionsoft-auth\")\n        return redirect(url, code=302)\n```\n\n#### Exchange the code for an access token\n```python\ntoken = client.exchange_code('REDIRECT_URL', 'CODE')\n```\nOnce you've got the CODE parameter back, you will need to exchange it for a token, before it expires.\nYou need to use the same REDIRECT_URL that you've use to redirect your admin during the previous step and the CODE\nthat you've received.\n\nThis will get you both REFRESH_TOKEN and ACCESS_TOKEN for your application. **You will need to save both of these.**\n\naccess_token is used to sign every request you make to Infusionsoft. However, it expires every 24 hours.\nrefresh_token is used to get a new access_token and will expire in 90 days. Unless you refresh it within that period.\n\nHere is the modified version of our Flask example:\n```python\n@app.route('/infusionsoft-auth', methods=['GET'])\ndef infusionsoft_auth():\n    client = Client('CLIENT_ID', 'CLIENT_SECRET')\n\n    code = request.args.get('code', None)\n    if not code:\n        url = client.oauth_access(\"127.0.0.1/infusionsoft-auth\")\n        return redirect(url, code=302)\n    else:\n        token = client.exchange_code(\"127.0.0.1/infusionsoft-auth\", code)\n        refresh_token = token.get('refresh_token')\n        access_token = token.get('access_token')\n        expiration_datetime = datetime.datetime.now() + datetime.timedelta(seconds=token.get('expires_in')) # This is the time when your access_token will expire exactly.\n```\n\n#### Set access token\nOnce you have an ACCESS_TOKEN you can start making requests. All you need to do is set it bore making a request.\n```python\nclient = Client('CLIENT_ID', 'CLIENT_SECRET')\nclient.set_token('ACCESS_TOKEN')\n\nlist_contacts = client.get_contacts()   # Sample request.\n```\nAlternatively, you can set it on initialization.\n```python\nclient = Client('CLIENT_ID', 'CLIENT_SECRET', 'ACCESS_TOKEN')\n\nlist_contacts = client.get_contacts()   # Sample request.\n```\n\n#### Refresh token\nBefore your ACCESS_TOKEN expires, it's a good idea to refresh it. You can put this task on cron, for example.\n```python\ntoken = client.refresh_token('REFRESH TOKEN')\n\nrefresh_token = token.get('refresh_token')\naccess_token = token.get('access_token')\nexpiration_datetime = datetime.datetime.now() + datetime.timedelta(seconds=token.get('expires_in')) # This is the time when your access_token will expire exactly.\n```\nPlease note that even if you ACCESS_TOKEN expired, you can still call this method.\nAs long as your REFESH_TOKEN is not expired (usually 90 days).\n\n\n#### Get Contacts\nhere you list the contacts, can receive limit, order, order_direction and offset.\nfor filter specific camps use this sintaxis: get_contacts(field=\"name\", order_direction=\"descending\")\n```python\nlist_contacts = client.get_contacts(order=\"id\", order_direction=\"descending\")\n```\n\n#### Retrieve Contacts\nhere you can retrieve a contact, send the ID and the optional_properties values\n```python\nretrieve_contact = client.retrieve_contact(166, optional_properties=\"custom_fields,preferred_name,opt_in_reason,notes\")\n```\n\n#### Create Contact\nhere you create a contact, you must to give a valid email or a phone number and that is send as a kwarg\ndata = {'email_addresses': [{'email': 'EMAIL@EMAIL.com', 'field': 'EMAIL1'}], 'given_name': 'NAME'}\n```python\ncreate_contact = client.create_contact(**data)\n```\n\n#### Delete Contact\nhere you delete a contact, is obligatory the id of the contact\n```python\ndelete_contact = client.delete_contact('ID')\n```\n\n#### Update Contact\ndata = {'email_addresses': [{'email': 'EMAIL@EMAIL.com', 'field': 'EMAIL1'}], 'given_name': 'NAME'}\n```python\nupdate_contact = client.update_contact('184', **data)\n```\n\n#### Get Campaign\nhere you list the campaigns, can receive limit and offset\n```python\nlist_campaigns = client.get_campaigns()\n```\n\n#### Retrieve Campaign\nhere you can retrieve a specific campaign, obligatory the id of the campaign\n```python\nretrieve_campaign = client.retrieve_campaign('ID')\n```\n\n#### Get Emails\nhere you can get all, can receive limit or offset\n```python\nlist_emails = client.get_emails()\n```\n\n#### Get Opportunities\nhere you can list the opportunities, can receive limit, order, and offset\n```python\nlist_opportunities = client.get_opportunities()\n```\n\n#### Get Opportunities Pipeline\nhere you can list the pipeline opportunities\n```python\nlist_all_opportunities = client.get_opportunities_pipeline()\n```\n\n#### Retrieve Opportunity\nhere you can retrieve a specific opportunity, obligatory send the id\n```python\nretrieve_opportunity = client.retrieve_opportunity('ID')\n```\n\n#### Create Opportunity\nhere you can create an opportunity, obligatory opportunity_title, contact, and stage\ndata = {\n    'contact': {\n        'id': '170'\n    },\n    'stage': {\n        'name': 'Stage Test',\n        'id': 10,\n        'details': {\n            'check_list_items': [\n                {'description': 'Test Opportunity'}\n            ]\n        }\n    },\n    'opportunity_title': 'OpportunityTitle'\n}\n```python\ncreate_opportunity = client.create_opportunity(**data)\n```\n\n#### Update Opportunity\nhere you can update an opportunity, obligatory send the id of the opportunity and the data to update\ndata = {\n    'contact': {\n        'id': '170'\n    },\n    'stage': {\n        'name': 'Stage Test',\n        'id': 10,\n        'details': {\n            'check_list_items': [\n                {'description': 'Test Opportunity'}\n            ]\n        }\n    },\n    'opportunity_title': 'OpportunityTitle'\n}\n```python\nupdate_opportunity = client.update_opportunity('ID', **data)\n```\n\n#### Get Products\nhere you can list the products\n```python\nget_products = client.get_products()\n```\n\n#### Retrieve Product\nhere you can retrieve a specific product, just send the id of the product\n```python\nretrieve_product = client.retrieve_product('ID')\n```\n\n#### Get Tasks\nhere you can list the tasks, can receive limit, offset\n```python\nget_tasks = client.get_tasks()\n```\n\n#### Create Task\nhere you can list the tasks, can receive limit, offset\ndata = {'title': 'TASK TITLE', \"contact\": {\"id\": 170}}\n```python\ncreate_task = client.create_task(**data)\n```\n\n#### Delete Task\nhere you can delete a tasks, obligatory send the id of the task\n```python\ndelete_task = client.delete_task('ID')\n```\n\n#### Update Task\nhere you can update a tasks, obligatory send the id of the task to update and the data\ndata = {'title': 'TASK TITLE', \"contact\": {\"id\": 170}}\n```python\nupdate_task = client.update_task('ID', **data)\n```\n\n#### Retrieve Task\nhere you can retrieve a tasks, obligatory send the id of the task\n```python\nretrieve_task = client.retrieve_task('ID')\n```\n\n#### Replace Task\nhere you can replace a task, obligatory send the id of the task\n```python\nreplace_task = client.replace_task('ID')\n```\n\n#### Get Orders\nhere you can get orders, can receive limit, offset\n```python\nget_orders = client.get_orders()\n```\n\n#### Retrieve Order\nhere you can retrieve an order, obligatory send the id of the order\n```python\nretrieve_order = client.retrieve_order('ID')\n```\n\n#### Get Hook Events\nhere you can list the hooks events, just call the method\n```python\nget_hook_events = client.get_hook_events()\n```\n\n#### Get Webhooks\nhere you can get all the hook subscriptions, just call the method\n```python\nget_hook_subscriptions = client.get_hook_subscriptions()\n```\n\n#### Verify Hook Subscription\nhere you can verify a hook subscription, send the id of the webhook to verify it\n```python\nverify_hook = client.verify_hook_subscription('ID')\n```\n\n#### Create Hook Subscription\nhere you can create a hook subscription, send the hook event and the url callback\n```python\ncreate_hook = client.create_hook_subscription(\"opportunity.add\", \"URL\")\n```\n\n#### Update Hook Subscription\nhere you can update a hook, send the hook id, event and url\n```python\nupdate_hook = petition.update_hook_subscription('ID', 'opportunity.delete', 'URL')\n```\n\n#### Delete Hook Subscription\nhere you can delete a hook subscription, is obligatory to send the hook id\n```python\ndelete_hook = petition.delete_hook_subscription('ID')\n```\n\n#### List All Tags\nHere you can get all available tags.\n```python\nall_tags = client.list_tags()\n```\n\n#### Apply Tag\nHere you can apply a tag to a contact.\n```python\nres = client.apply_tag('TAG_ID', 'CONTACT_ID')\n```\nOr to multiple contacts at the same time.\n```python\nres = client.apply_tag('TAG_ID', ['CONTACT1_ID', 'CONTACT2_ID', ...])\n```\nThe result will be a dict with contact IDs as keys and statuses as values.\n```python\n{'1': 'SUCCESS', '3': 'DUPLICATE'}\n```\n\n#### Remove Tag\nHere you can remove previously applied tag from a contact.\n```python\nall_tags = remove_tag.list_tags('TAG_ID', 'CONTACT_ID')\n```\n\n## Error Handling\nAll library errors are inherited from the base **InfusionsoftException**.\nYou can either catch that, or you can catch more specific exceptions. Here is an example:\n```python\nfrom infusionsoft.client import Client\nfrom infusionsoft.errors import InfusionsoftException, AuthError, TokenError, ConnectionError, DataError \n\n\ntry:\n    try:\n        try:\n            try:\n                try:\n                    client = Client('CLIENT_ID', 'CLIENT_SECRET', 'ACCESS_TOKEN')\n                    list_contacts = client.get_contacts()   # Sample request.\n                except DataError as e:\n                    print('Something is wrong with the data.')\n                    print(e)\n            except ConnectionError as e:\n                print('Something is wron with Infusionsoft connection.')\n                print(e)\n        except TokenError as e:\n            print('Something is wrong with one of the tokens.')\n            print(e)\n    except AuthError as e:\n        print('Authentication error.')\n        print(e)\nexcept InfusionsoftException as e:\n    print('Something went wrong with Infusionsoft.')\n    print(e)\n```\n\n## Requirements\n- requests\n\n## Tests\n```\ninfusionsoft/test.py\n```\n\n## TODO Endpoints\n- All Appointments Section\n- All File Section\n- All Tag Section\n\n## Contributing\nWe are always grateful for any kind of contribution including but not limited to bug reports, code enhancements, bug fixes, and even functionality suggestions.\n#### You can report any bug you find or suggest new functionality with a new [issue](https://github.com/GearPlug/infusionsoft-python/issues).\n#### If you want to add yourself some functionality to the wrapper:\n1. Fork it ( https://github.com/GearPlug/infusionsoft-python )\n2. Create your feature branch (git checkout -b my-new-feature)\n3. Commit your changes (git commit -am 'Adds my new feature')\n4. Push to the branch (git push origin my-new-feature)\n5. Create a new Pull Request", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/GearPlug/infusionsoft-python", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "infusionsoft-python", "package_url": "https://pypi.org/project/infusionsoft-python/", "platform": "", "project_url": "https://pypi.org/project/infusionsoft-python/", "project_urls": {"Homepage": "https://github.com/GearPlug/infusionsoft-python"}, "release_url": "https://pypi.org/project/infusionsoft-python/0.1.3/", "requires_dist": null, "requires_python": "", "summary": "API wrapper for Infusionsoft written in Python", "version": "0.1.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>infusionsoft-python</h1>\n<p>InfusionSoft API wrapper for Infusionsoft written in Python.</p>\n<h2>Installing</h2>\n<pre><code>pip install infusionsoft-python\n</code></pre>\n<h2>Usage</h2>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">infusionsoft.client</span> <span class=\"kn\">import</span> <span class=\"n\">Client</span>\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">Client</span><span class=\"p\">(</span><span class=\"s1\">'CLIENT_ID'</span><span class=\"p\">,</span> <span class=\"s1\">'CLIENT_SECRET'</span><span class=\"p\">,</span> <span class=\"s1\">'OPTIONAL - access_token'</span><span class=\"p\">)</span>\n</pre>\n<p>First time you will have to authorize your app to get the access_token. Follow these steps to do so:</p>\n<h4>Get authorization url</h4>\n<pre><span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">oauth_access</span><span class=\"p\">(</span><span class=\"s2\">\"REDIRECT_URL\"</span><span class=\"p\">)</span>\n</pre>\n<p>First, you need to generate a url and direct admin's browser to this url.\nThere she will see an Infusionsoft branded authorisation window.\nWhen she clicks \"Authorize\", the browser will redirect the admin to the REDIRECT_URL that you have passed into this method.\nA GET parameter named 'code' will be passed along side this request. You will need this CODE and the initial REDIRECT_URL to get the token.</p>\n<p>Code sample using Flask:</p>\n<pre><span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span><span class=\"p\">(</span><span class=\"s1\">'/infusionsoft-auth'</span><span class=\"p\">,</span> <span class=\"n\">methods</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'GET'</span><span class=\"p\">])</span>\n<span class=\"k\">def</span> <span class=\"nf\">infusionsoft_auth</span><span class=\"p\">():</span>\n    <span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">Client</span><span class=\"p\">(</span><span class=\"s1\">'CLIENT_ID'</span><span class=\"p\">,</span> <span class=\"s1\">'CLIENT_SECRET'</span><span class=\"p\">)</span>\n\n    <span class=\"n\">code</span> <span class=\"o\">=</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'code'</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">code</span><span class=\"p\">:</span>\n        <span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">oauth_access</span><span class=\"p\">(</span><span class=\"s2\">\"127.0.0.1/infusionsoft-auth\"</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">redirect</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"n\">code</span><span class=\"o\">=</span><span class=\"mi\">302</span><span class=\"p\">)</span>\n</pre>\n<h4>Exchange the code for an access token</h4>\n<pre><span class=\"n\">token</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">exchange_code</span><span class=\"p\">(</span><span class=\"s1\">'REDIRECT_URL'</span><span class=\"p\">,</span> <span class=\"s1\">'CODE'</span><span class=\"p\">)</span>\n</pre>\n<p>Once you've got the CODE parameter back, you will need to exchange it for a token, before it expires.\nYou need to use the same REDIRECT_URL that you've use to redirect your admin during the previous step and the CODE\nthat you've received.</p>\n<p>This will get you both REFRESH_TOKEN and ACCESS_TOKEN for your application. <strong>You will need to save both of these.</strong></p>\n<p>access_token is used to sign every request you make to Infusionsoft. However, it expires every 24 hours.\nrefresh_token is used to get a new access_token and will expire in 90 days. Unless you refresh it within that period.</p>\n<p>Here is the modified version of our Flask example:</p>\n<pre><span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span><span class=\"p\">(</span><span class=\"s1\">'/infusionsoft-auth'</span><span class=\"p\">,</span> <span class=\"n\">methods</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'GET'</span><span class=\"p\">])</span>\n<span class=\"k\">def</span> <span class=\"nf\">infusionsoft_auth</span><span class=\"p\">():</span>\n    <span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">Client</span><span class=\"p\">(</span><span class=\"s1\">'CLIENT_ID'</span><span class=\"p\">,</span> <span class=\"s1\">'CLIENT_SECRET'</span><span class=\"p\">)</span>\n\n    <span class=\"n\">code</span> <span class=\"o\">=</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'code'</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">code</span><span class=\"p\">:</span>\n        <span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">oauth_access</span><span class=\"p\">(</span><span class=\"s2\">\"127.0.0.1/infusionsoft-auth\"</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">redirect</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"n\">code</span><span class=\"o\">=</span><span class=\"mi\">302</span><span class=\"p\">)</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">token</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">exchange_code</span><span class=\"p\">(</span><span class=\"s2\">\"127.0.0.1/infusionsoft-auth\"</span><span class=\"p\">,</span> <span class=\"n\">code</span><span class=\"p\">)</span>\n        <span class=\"n\">refresh_token</span> <span class=\"o\">=</span> <span class=\"n\">token</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'refresh_token'</span><span class=\"p\">)</span>\n        <span class=\"n\">access_token</span> <span class=\"o\">=</span> <span class=\"n\">token</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'access_token'</span><span class=\"p\">)</span>\n        <span class=\"n\">expiration_datetime</span> <span class=\"o\">=</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">now</span><span class=\"p\">()</span> <span class=\"o\">+</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">timedelta</span><span class=\"p\">(</span><span class=\"n\">seconds</span><span class=\"o\">=</span><span class=\"n\">token</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'expires_in'</span><span class=\"p\">))</span> <span class=\"c1\"># This is the time when your access_token will expire exactly.</span>\n</pre>\n<h4>Set access token</h4>\n<p>Once you have an ACCESS_TOKEN you can start making requests. All you need to do is set it bore making a request.</p>\n<pre><span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">Client</span><span class=\"p\">(</span><span class=\"s1\">'CLIENT_ID'</span><span class=\"p\">,</span> <span class=\"s1\">'CLIENT_SECRET'</span><span class=\"p\">)</span>\n<span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">set_token</span><span class=\"p\">(</span><span class=\"s1\">'ACCESS_TOKEN'</span><span class=\"p\">)</span>\n\n<span class=\"n\">list_contacts</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get_contacts</span><span class=\"p\">()</span>   <span class=\"c1\"># Sample request.</span>\n</pre>\n<p>Alternatively, you can set it on initialization.</p>\n<pre><span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">Client</span><span class=\"p\">(</span><span class=\"s1\">'CLIENT_ID'</span><span class=\"p\">,</span> <span class=\"s1\">'CLIENT_SECRET'</span><span class=\"p\">,</span> <span class=\"s1\">'ACCESS_TOKEN'</span><span class=\"p\">)</span>\n\n<span class=\"n\">list_contacts</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get_contacts</span><span class=\"p\">()</span>   <span class=\"c1\"># Sample request.</span>\n</pre>\n<h4>Refresh token</h4>\n<p>Before your ACCESS_TOKEN expires, it's a good idea to refresh it. You can put this task on cron, for example.</p>\n<pre><span class=\"n\">token</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">refresh_token</span><span class=\"p\">(</span><span class=\"s1\">'REFRESH TOKEN'</span><span class=\"p\">)</span>\n\n<span class=\"n\">refresh_token</span> <span class=\"o\">=</span> <span class=\"n\">token</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'refresh_token'</span><span class=\"p\">)</span>\n<span class=\"n\">access_token</span> <span class=\"o\">=</span> <span class=\"n\">token</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'access_token'</span><span class=\"p\">)</span>\n<span class=\"n\">expiration_datetime</span> <span class=\"o\">=</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">now</span><span class=\"p\">()</span> <span class=\"o\">+</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">timedelta</span><span class=\"p\">(</span><span class=\"n\">seconds</span><span class=\"o\">=</span><span class=\"n\">token</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'expires_in'</span><span class=\"p\">))</span> <span class=\"c1\"># This is the time when your access_token will expire exactly.</span>\n</pre>\n<p>Please note that even if you ACCESS_TOKEN expired, you can still call this method.\nAs long as your REFESH_TOKEN is not expired (usually 90 days).</p>\n<h4>Get Contacts</h4>\n<p>here you list the contacts, can receive limit, order, order_direction and offset.\nfor filter specific camps use this sintaxis: get_contacts(field=\"name\", order_direction=\"descending\")</p>\n<pre><span class=\"n\">list_contacts</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get_contacts</span><span class=\"p\">(</span><span class=\"n\">order</span><span class=\"o\">=</span><span class=\"s2\">\"id\"</span><span class=\"p\">,</span> <span class=\"n\">order_direction</span><span class=\"o\">=</span><span class=\"s2\">\"descending\"</span><span class=\"p\">)</span>\n</pre>\n<h4>Retrieve Contacts</h4>\n<p>here you can retrieve a contact, send the ID and the optional_properties values</p>\n<pre><span class=\"n\">retrieve_contact</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">retrieve_contact</span><span class=\"p\">(</span><span class=\"mi\">166</span><span class=\"p\">,</span> <span class=\"n\">optional_properties</span><span class=\"o\">=</span><span class=\"s2\">\"custom_fields,preferred_name,opt_in_reason,notes\"</span><span class=\"p\">)</span>\n</pre>\n<h4>Create Contact</h4>\n<p>here you create a contact, you must to give a valid email or a phone number and that is send as a kwarg\ndata = {'email_addresses': [{'email': '<a href=\"mailto:EMAIL@EMAIL.com\">EMAIL@EMAIL.com</a>', 'field': 'EMAIL1'}], 'given_name': 'NAME'}</p>\n<pre><span class=\"n\">create_contact</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">create_contact</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">data</span><span class=\"p\">)</span>\n</pre>\n<h4>Delete Contact</h4>\n<p>here you delete a contact, is obligatory the id of the contact</p>\n<pre><span class=\"n\">delete_contact</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">delete_contact</span><span class=\"p\">(</span><span class=\"s1\">'ID'</span><span class=\"p\">)</span>\n</pre>\n<h4>Update Contact</h4>\n<p>data = {'email_addresses': [{'email': '<a href=\"mailto:EMAIL@EMAIL.com\">EMAIL@EMAIL.com</a>', 'field': 'EMAIL1'}], 'given_name': 'NAME'}</p>\n<pre><span class=\"n\">update_contact</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">update_contact</span><span class=\"p\">(</span><span class=\"s1\">'184'</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">data</span><span class=\"p\">)</span>\n</pre>\n<h4>Get Campaign</h4>\n<p>here you list the campaigns, can receive limit and offset</p>\n<pre><span class=\"n\">list_campaigns</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get_campaigns</span><span class=\"p\">()</span>\n</pre>\n<h4>Retrieve Campaign</h4>\n<p>here you can retrieve a specific campaign, obligatory the id of the campaign</p>\n<pre><span class=\"n\">retrieve_campaign</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">retrieve_campaign</span><span class=\"p\">(</span><span class=\"s1\">'ID'</span><span class=\"p\">)</span>\n</pre>\n<h4>Get Emails</h4>\n<p>here you can get all, can receive limit or offset</p>\n<pre><span class=\"n\">list_emails</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get_emails</span><span class=\"p\">()</span>\n</pre>\n<h4>Get Opportunities</h4>\n<p>here you can list the opportunities, can receive limit, order, and offset</p>\n<pre><span class=\"n\">list_opportunities</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get_opportunities</span><span class=\"p\">()</span>\n</pre>\n<h4>Get Opportunities Pipeline</h4>\n<p>here you can list the pipeline opportunities</p>\n<pre><span class=\"n\">list_all_opportunities</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get_opportunities_pipeline</span><span class=\"p\">()</span>\n</pre>\n<h4>Retrieve Opportunity</h4>\n<p>here you can retrieve a specific opportunity, obligatory send the id</p>\n<pre><span class=\"n\">retrieve_opportunity</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">retrieve_opportunity</span><span class=\"p\">(</span><span class=\"s1\">'ID'</span><span class=\"p\">)</span>\n</pre>\n<h4>Create Opportunity</h4>\n<p>here you can create an opportunity, obligatory opportunity_title, contact, and stage\ndata = {\n'contact': {\n'id': '170'\n},\n'stage': {\n'name': 'Stage Test',\n'id': 10,\n'details': {\n'check_list_items': [\n{'description': 'Test Opportunity'}\n]\n}\n},\n'opportunity_title': 'OpportunityTitle'\n}</p>\n<pre><span class=\"n\">create_opportunity</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">create_opportunity</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">data</span><span class=\"p\">)</span>\n</pre>\n<h4>Update Opportunity</h4>\n<p>here you can update an opportunity, obligatory send the id of the opportunity and the data to update\ndata = {\n'contact': {\n'id': '170'\n},\n'stage': {\n'name': 'Stage Test',\n'id': 10,\n'details': {\n'check_list_items': [\n{'description': 'Test Opportunity'}\n]\n}\n},\n'opportunity_title': 'OpportunityTitle'\n}</p>\n<pre><span class=\"n\">update_opportunity</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">update_opportunity</span><span class=\"p\">(</span><span class=\"s1\">'ID'</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">data</span><span class=\"p\">)</span>\n</pre>\n<h4>Get Products</h4>\n<p>here you can list the products</p>\n<pre><span class=\"n\">get_products</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get_products</span><span class=\"p\">()</span>\n</pre>\n<h4>Retrieve Product</h4>\n<p>here you can retrieve a specific product, just send the id of the product</p>\n<pre><span class=\"n\">retrieve_product</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">retrieve_product</span><span class=\"p\">(</span><span class=\"s1\">'ID'</span><span class=\"p\">)</span>\n</pre>\n<h4>Get Tasks</h4>\n<p>here you can list the tasks, can receive limit, offset</p>\n<pre><span class=\"n\">get_tasks</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get_tasks</span><span class=\"p\">()</span>\n</pre>\n<h4>Create Task</h4>\n<p>here you can list the tasks, can receive limit, offset\ndata = {'title': 'TASK TITLE', \"contact\": {\"id\": 170}}</p>\n<pre><span class=\"n\">create_task</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">create_task</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">data</span><span class=\"p\">)</span>\n</pre>\n<h4>Delete Task</h4>\n<p>here you can delete a tasks, obligatory send the id of the task</p>\n<pre><span class=\"n\">delete_task</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">delete_task</span><span class=\"p\">(</span><span class=\"s1\">'ID'</span><span class=\"p\">)</span>\n</pre>\n<h4>Update Task</h4>\n<p>here you can update a tasks, obligatory send the id of the task to update and the data\ndata = {'title': 'TASK TITLE', \"contact\": {\"id\": 170}}</p>\n<pre><span class=\"n\">update_task</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">update_task</span><span class=\"p\">(</span><span class=\"s1\">'ID'</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">data</span><span class=\"p\">)</span>\n</pre>\n<h4>Retrieve Task</h4>\n<p>here you can retrieve a tasks, obligatory send the id of the task</p>\n<pre><span class=\"n\">retrieve_task</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">retrieve_task</span><span class=\"p\">(</span><span class=\"s1\">'ID'</span><span class=\"p\">)</span>\n</pre>\n<h4>Replace Task</h4>\n<p>here you can replace a task, obligatory send the id of the task</p>\n<pre><span class=\"n\">replace_task</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">replace_task</span><span class=\"p\">(</span><span class=\"s1\">'ID'</span><span class=\"p\">)</span>\n</pre>\n<h4>Get Orders</h4>\n<p>here you can get orders, can receive limit, offset</p>\n<pre><span class=\"n\">get_orders</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get_orders</span><span class=\"p\">()</span>\n</pre>\n<h4>Retrieve Order</h4>\n<p>here you can retrieve an order, obligatory send the id of the order</p>\n<pre><span class=\"n\">retrieve_order</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">retrieve_order</span><span class=\"p\">(</span><span class=\"s1\">'ID'</span><span class=\"p\">)</span>\n</pre>\n<h4>Get Hook Events</h4>\n<p>here you can list the hooks events, just call the method</p>\n<pre><span class=\"n\">get_hook_events</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get_hook_events</span><span class=\"p\">()</span>\n</pre>\n<h4>Get Webhooks</h4>\n<p>here you can get all the hook subscriptions, just call the method</p>\n<pre><span class=\"n\">get_hook_subscriptions</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get_hook_subscriptions</span><span class=\"p\">()</span>\n</pre>\n<h4>Verify Hook Subscription</h4>\n<p>here you can verify a hook subscription, send the id of the webhook to verify it</p>\n<pre><span class=\"n\">verify_hook</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">verify_hook_subscription</span><span class=\"p\">(</span><span class=\"s1\">'ID'</span><span class=\"p\">)</span>\n</pre>\n<h4>Create Hook Subscription</h4>\n<p>here you can create a hook subscription, send the hook event and the url callback</p>\n<pre><span class=\"n\">create_hook</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">create_hook_subscription</span><span class=\"p\">(</span><span class=\"s2\">\"opportunity.add\"</span><span class=\"p\">,</span> <span class=\"s2\">\"URL\"</span><span class=\"p\">)</span>\n</pre>\n<h4>Update Hook Subscription</h4>\n<p>here you can update a hook, send the hook id, event and url</p>\n<pre><span class=\"n\">update_hook</span> <span class=\"o\">=</span> <span class=\"n\">petition</span><span class=\"o\">.</span><span class=\"n\">update_hook_subscription</span><span class=\"p\">(</span><span class=\"s1\">'ID'</span><span class=\"p\">,</span> <span class=\"s1\">'opportunity.delete'</span><span class=\"p\">,</span> <span class=\"s1\">'URL'</span><span class=\"p\">)</span>\n</pre>\n<h4>Delete Hook Subscription</h4>\n<p>here you can delete a hook subscription, is obligatory to send the hook id</p>\n<pre><span class=\"n\">delete_hook</span> <span class=\"o\">=</span> <span class=\"n\">petition</span><span class=\"o\">.</span><span class=\"n\">delete_hook_subscription</span><span class=\"p\">(</span><span class=\"s1\">'ID'</span><span class=\"p\">)</span>\n</pre>\n<h4>List All Tags</h4>\n<p>Here you can get all available tags.</p>\n<pre><span class=\"n\">all_tags</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">list_tags</span><span class=\"p\">()</span>\n</pre>\n<h4>Apply Tag</h4>\n<p>Here you can apply a tag to a contact.</p>\n<pre><span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">apply_tag</span><span class=\"p\">(</span><span class=\"s1\">'TAG_ID'</span><span class=\"p\">,</span> <span class=\"s1\">'CONTACT_ID'</span><span class=\"p\">)</span>\n</pre>\n<p>Or to multiple contacts at the same time.</p>\n<pre><span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">apply_tag</span><span class=\"p\">(</span><span class=\"s1\">'TAG_ID'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">'CONTACT1_ID'</span><span class=\"p\">,</span> <span class=\"s1\">'CONTACT2_ID'</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">])</span>\n</pre>\n<p>The result will be a dict with contact IDs as keys and statuses as values.</p>\n<pre><span class=\"p\">{</span><span class=\"s1\">'1'</span><span class=\"p\">:</span> <span class=\"s1\">'SUCCESS'</span><span class=\"p\">,</span> <span class=\"s1\">'3'</span><span class=\"p\">:</span> <span class=\"s1\">'DUPLICATE'</span><span class=\"p\">}</span>\n</pre>\n<h4>Remove Tag</h4>\n<p>Here you can remove previously applied tag from a contact.</p>\n<pre><span class=\"n\">all_tags</span> <span class=\"o\">=</span> <span class=\"n\">remove_tag</span><span class=\"o\">.</span><span class=\"n\">list_tags</span><span class=\"p\">(</span><span class=\"s1\">'TAG_ID'</span><span class=\"p\">,</span> <span class=\"s1\">'CONTACT_ID'</span><span class=\"p\">)</span>\n</pre>\n<h2>Error Handling</h2>\n<p>All library errors are inherited from the base <strong>InfusionsoftException</strong>.\nYou can either catch that, or you can catch more specific exceptions. Here is an example:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">infusionsoft.client</span> <span class=\"kn\">import</span> <span class=\"n\">Client</span>\n<span class=\"kn\">from</span> <span class=\"nn\">infusionsoft.errors</span> <span class=\"kn\">import</span> <span class=\"n\">InfusionsoftException</span><span class=\"p\">,</span> <span class=\"n\">AuthError</span><span class=\"p\">,</span> <span class=\"n\">TokenError</span><span class=\"p\">,</span> <span class=\"ne\">ConnectionError</span><span class=\"p\">,</span> <span class=\"n\">DataError</span> \n\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"k\">try</span><span class=\"p\">:</span>\n                    <span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">Client</span><span class=\"p\">(</span><span class=\"s1\">'CLIENT_ID'</span><span class=\"p\">,</span> <span class=\"s1\">'CLIENT_SECRET'</span><span class=\"p\">,</span> <span class=\"s1\">'ACCESS_TOKEN'</span><span class=\"p\">)</span>\n                    <span class=\"n\">list_contacts</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get_contacts</span><span class=\"p\">()</span>   <span class=\"c1\"># Sample request.</span>\n                <span class=\"k\">except</span> <span class=\"n\">DataError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n                    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Something is wrong with the data.'</span><span class=\"p\">)</span>\n                    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">)</span>\n            <span class=\"k\">except</span> <span class=\"ne\">ConnectionError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n                <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Something is wron with Infusionsoft connection.'</span><span class=\"p\">)</span>\n                <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">)</span>\n        <span class=\"k\">except</span> <span class=\"n\">TokenError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Something is wrong with one of the tokens.'</span><span class=\"p\">)</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">)</span>\n    <span class=\"k\">except</span> <span class=\"n\">AuthError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Authentication error.'</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">)</span>\n<span class=\"k\">except</span> <span class=\"n\">InfusionsoftException</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Something went wrong with Infusionsoft.'</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">)</span>\n</pre>\n<h2>Requirements</h2>\n<ul>\n<li>requests</li>\n</ul>\n<h2>Tests</h2>\n<pre><code>infusionsoft/test.py\n</code></pre>\n<h2>TODO Endpoints</h2>\n<ul>\n<li>All Appointments Section</li>\n<li>All File Section</li>\n<li>All Tag Section</li>\n</ul>\n<h2>Contributing</h2>\n<p>We are always grateful for any kind of contribution including but not limited to bug reports, code enhancements, bug fixes, and even functionality suggestions.</p>\n<h4>You can report any bug you find or suggest new functionality with a new <a href=\"https://github.com/GearPlug/infusionsoft-python/issues\" rel=\"nofollow\">issue</a>.</h4>\n<h4>If you want to add yourself some functionality to the wrapper:</h4>\n<ol>\n<li>Fork it ( <a href=\"https://github.com/GearPlug/infusionsoft-python\" rel=\"nofollow\">https://github.com/GearPlug/infusionsoft-python</a> )</li>\n<li>Create your feature branch (git checkout -b my-new-feature)</li>\n<li>Commit your changes (git commit -am 'Adds my new feature')</li>\n<li>Push to the branch (git push origin my-new-feature)</li>\n<li>Create a new Pull Request</li>\n</ol>\n\n          </div>"}, "last_serial": 5946835, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "de3a296123d3b6d39703ec5473c224fd", "sha256": "86cb03bc3ee1cc457a1b1bd548821540bf6737d8644a0ff380838b72faac213b"}, "downloads": -1, "filename": "infusionsoft-python-0.1.tar.gz", "has_sig": false, "md5_digest": "de3a296123d3b6d39703ec5473c224fd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6854, "upload_time": "2018-02-20T13:44:23", "upload_time_iso_8601": "2018-02-20T13:44:23.973739Z", "url": "https://files.pythonhosted.org/packages/40/3a/4c594d5446a61db6bcbf7cd278d7dca9628f75241a60017f963763b0486c/infusionsoft-python-0.1.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "baa8d12316baeb6af421808a55a442db", "sha256": "5c0f6e99196139490267c05113b1573477d7e2dce84f3ecc3cc2945697cd76f4"}, "downloads": -1, "filename": "infusionsoft-python-0.1.1.tar.gz", "has_sig": false, "md5_digest": "baa8d12316baeb6af421808a55a442db", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7934, "upload_time": "2018-02-26T14:23:15", "upload_time_iso_8601": "2018-02-26T14:23:15.121317Z", "url": "https://files.pythonhosted.org/packages/4d/41/a835bf0fb25218db6f83552d341a40ab5d54a016a870711ca091193236c1/infusionsoft-python-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "f9b32f2c73b113b4cceeec222140e4d9", "sha256": "c542745f571582bb03de9e898f6775e732fd83550f548fde36900ecea06d5c06"}, "downloads": -1, "filename": "infusionsoft-python-0.1.2.tar.gz", "has_sig": false, "md5_digest": "f9b32f2c73b113b4cceeec222140e4d9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8625, "upload_time": "2018-09-20T15:57:11", "upload_time_iso_8601": "2018-09-20T15:57:11.422059Z", "url": "https://files.pythonhosted.org/packages/81/9f/c594bad7f331fab40530e8b4a54f1b3b34d559558e33493bf2310a804e26/infusionsoft-python-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "ea6a499661bbfbccaad2be9fa2d6e579", "sha256": "57d21f3e2c5342fc7563311d288880ca2b38ba10b2ed33b94fb5aace0736ec51"}, "downloads": -1, "filename": "infusionsoft-python-0.1.3.tar.gz", "has_sig": false, "md5_digest": "ea6a499661bbfbccaad2be9fa2d6e579", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13311, "upload_time": "2019-10-08T21:52:04", "upload_time_iso_8601": "2019-10-08T21:52:04.749687Z", "url": "https://files.pythonhosted.org/packages/c3/e2/7643b4c16e6b58b6675fa724eccabafd4c307fec35c1fe8e07473f4fea0c/infusionsoft-python-0.1.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ea6a499661bbfbccaad2be9fa2d6e579", "sha256": "57d21f3e2c5342fc7563311d288880ca2b38ba10b2ed33b94fb5aace0736ec51"}, "downloads": -1, "filename": "infusionsoft-python-0.1.3.tar.gz", "has_sig": false, "md5_digest": "ea6a499661bbfbccaad2be9fa2d6e579", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13311, "upload_time": "2019-10-08T21:52:04", "upload_time_iso_8601": "2019-10-08T21:52:04.749687Z", "url": "https://files.pythonhosted.org/packages/c3/e2/7643b4c16e6b58b6675fa724eccabafd4c307fec35c1fe8e07473f4fea0c/infusionsoft-python-0.1.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:55:59 2020"}