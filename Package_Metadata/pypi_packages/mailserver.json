{"info": {"author": "Marc Fargas", "author_email": "telenieko@telenieko.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Framework :: Django", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Internet :: WWW/HTTP"], "description": "Develop Mailservices in Django\n==============================\n\nDjango Mailserver is an application that lets you develop\nmail services in your Django projects/applications in a manner\nthat handles messages as Django handles HTTP requests.\n\nThat project was initialy conceived as an improvement over\n`django-smtpd`_ by Denis Laprise, then became an almost full rewrite\nand when I thought I had gone through almost every line of code it\nseemed far much more like a fork than improvement.\n\nNOTE: that this is really alpha software, don't use it in a production\nenvironment unless you expect it to break everything ;)\n\n.. _django-smtpd:: http://code.google.com/p/django-smtpd/\n\nExample usage:\n==============\n\nFirst of all, you need to add \"mailserver\" in your INSTALLED_APPS, and\nyou'll want the settings::\n\n    ROOT_MAILCONF = 'myproject.mailbox' # Just like ROOT_URLCONF, but for\n                                        # resolving recipients.\n    MAILER_DAEMON_ADDRESS = 'postmaster@mydomain.com'\n\n``ROOT_MAILCONF`` is just like an URLCONF, but it matches e-mail addresses\ninstead of paths. An example ``myproject.mailbox`` ``mailbox.py`` file\nwould be::\n\n    from django_mailserver.mailbox import *\n\n    urlpatterns = patterns('',\n      (r'@bugs.example.com', include('myapp.mailbox')),\n    )\n\nNote, that when matching recipients, just as Django strips path elements\nas they get matches, ``mailserver`` strips already matched parts from\nthe addresses until it reaches the views.\n\nNow you can start you mail service! You can either to::\n\n    ./manage.py startmailapp <app_name>\n\nFrom your project directory to have a new app created with a sample mailbox.py\nfile in it, or you can create a new mailbox.py file in your existing application::\n\n    from django_mailserver.mailbox import *\n\n    urlpatterns = patterns('',\n      (r'^onedest', 'myapp.mailers.reply'),\n    )\n\nYou have it, your ``mailers.py`` file would be just like a ``views.py``::\n\n    from mailserver import EmailResponse\n\n    def reply(request):\n        print \"Got email %s, Reply!\" % request\n        return EmailResponse(\n                from_email=request.get_recipient_display(),\n                to=request['From'],\n                body=request.get_body(),\n                subject=\"Re: %s\" % request['Subject'])\n        \nYou get the idea, if you return an EmailResponse it gets ``send()``\nlater by the Handler. You can also return EmailIgnoreResponse among others.\n\nDelivering mails\n****************\n\nRight now the only possible way to deliver messages to this is through a\npipe transport to the ``./manage.py readmail`` command. Which is mostly\nintended for testing.\n\nFurther improvements should have a more performant pipe transport and a\nself-running SMTP server.\n\nTODO\n****\n\n**WARNING:** Django Mailserver is still under development. It is believed to\nbrake at any point ;) There are lots of things to do, like:\n\n    * Documentation\n    * More tests.\n    * Better URL parsing (i.e: includes work on domains, others on addreses).\n    * Handling address prefixes/suffixes\n    * Handling of error responses (ie: pipe transport should bring the\n      response status_code to the exit value of the process).", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/telenieko/django-mailserver", "keywords": null, "license": "BSD", "maintainer": null, "maintainer_email": null, "name": "mailserver", "package_url": "https://pypi.org/project/mailserver/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/mailserver/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://github.com/telenieko/django-mailserver"}, "release_url": "https://pypi.org/project/mailserver/0.1alpha1/", "requires_dist": null, "requires_python": null, "summary": "Create mail services in Django.", "version": "0.1alpha1", "yanked": false, "html_description": "<div class=\"project-description\">\n            Develop Mailservices in Django<br>==============================<br><br>Django Mailserver is an application that lets you develop<br>mail services in your Django projects/applications in a manner<br>that handles messages as Django handles HTTP requests.<br><br>That project was initialy conceived as an improvement over<br>`django-smtpd`_ by Denis Laprise, then became an almost full rewrite<br>and when I thought I had gone through almost every line of code it<br>seemed far much more like a fork than improvement.<br><br>NOTE: that this is really alpha software, don't use it in a production<br>environment unless you expect it to break everything ;)<br><br>.. _django-smtpd:: http://code.google.com/p/django-smtpd/<br><br>Example usage:<br>==============<br><br>First of all, you need to add \"mailserver\" in your INSTALLED_APPS, and<br>you'll want the settings::<br><br>    ROOT_MAILCONF = 'myproject.mailbox' # Just like ROOT_URLCONF, but for<br>                                        # resolving recipients.<br>    MAILER_DAEMON_ADDRESS = 'postmaster@mydomain.com'<br><br>``ROOT_MAILCONF`` is just like an URLCONF, but it matches e-mail addresses<br>instead of paths. An example ``myproject.mailbox`` ``mailbox.py`` file<br>would be::<br><br>    from django_mailserver.mailbox import *<br><br>    urlpatterns = patterns('',<br>      (r'@bugs.example.com', include('myapp.mailbox')),<br>    )<br><br>Note, that when matching recipients, just as Django strips path elements<br>as they get matches, ``mailserver`` strips already matched parts from<br>the addresses until it reaches the views.<br><br>Now you can start you mail service! You can either to::<br><br>    ./manage.py startmailapp &lt;app_name&gt;<br><br>From your project directory to have a new app created with a sample mailbox.py<br>file in it, or you can create a new mailbox.py file in your existing application::<br><br>    from django_mailserver.mailbox import *<br><br>    urlpatterns = patterns('',<br>      (r'^onedest', 'myapp.mailers.reply'),<br>    )<br><br>You have it, your ``mailers.py`` file would be just like a ``views.py``::<br><br>    from mailserver import EmailResponse<br><br>    def reply(request):<br>        print \"Got email %s, Reply!\" % request<br>        return EmailResponse(<br>                from_email=request.get_recipient_display(),<br>                to=request['From'],<br>                body=request.get_body(),<br>                subject=\"Re: %s\" % request['Subject'])<br>        <br>You get the idea, if you return an EmailResponse it gets ``send()``<br>later by the Handler. You can also return EmailIgnoreResponse among others.<br><br>Delivering mails<br>****************<br><br>Right now the only possible way to deliver messages to this is through a<br>pipe transport to the ``./manage.py readmail`` command. Which is mostly<br>intended for testing.<br><br>Further improvements should have a more performant pipe transport and a<br>self-running SMTP server.<br><br>TODO<br>****<br><br>**WARNING:** Django Mailserver is still under development. It is believed to<br>brake at any point ;) There are lots of things to do, like:<br><br>    * Documentation<br>    * More tests.<br>    * Better URL parsing (i.e: includes work on domains, others on addreses).<br>    * Handling address prefixes/suffixes<br>    * Handling of error responses (ie: pipe transport should bring the<br>      response status_code to the exit value of the process).\n          </div>"}, "last_serial": 794472, "releases": {"0.1alpha1": [{"comment_text": "", "digests": {"md5": "b388b38b6d4256f4d0cea4f8c0d6ec0a", "sha256": "f1f9adf5bca22346904109cd7260971e4f97d0a55be84e6221f0a162658db8f5"}, "downloads": -1, "filename": "mailserver-0.1alpha1.tar.gz", "has_sig": false, "md5_digest": "b388b38b6d4256f4d0cea4f8c0d6ec0a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9733, "upload_time": "2009-05-13T17:17:30", "upload_time_iso_8601": "2009-05-13T17:17:30.241469Z", "url": "https://files.pythonhosted.org/packages/fc/06/084a596d14e3930ea9d7fae4a23e296dfe3635b4b4797f8b2bac5f10b034/mailserver-0.1alpha1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b388b38b6d4256f4d0cea4f8c0d6ec0a", "sha256": "f1f9adf5bca22346904109cd7260971e4f97d0a55be84e6221f0a162658db8f5"}, "downloads": -1, "filename": "mailserver-0.1alpha1.tar.gz", "has_sig": false, "md5_digest": "b388b38b6d4256f4d0cea4f8c0d6ec0a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9733, "upload_time": "2009-05-13T17:17:30", "upload_time_iso_8601": "2009-05-13T17:17:30.241469Z", "url": "https://files.pythonhosted.org/packages/fc/06/084a596d14e3930ea9d7fae4a23e296dfe3635b4b4797f8b2bac5f10b034/mailserver-0.1alpha1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:41:53 2020"}