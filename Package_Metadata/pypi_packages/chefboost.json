{"info": {"author": "Sefik Ilkin Serengil", "author_email": "serengil@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# chefboost\n\n[![Downloads](https://pepy.tech/badge/chefboost)](https://pepy.tech/project/chefboost)\n\n<p align=\"center\"><img src=\"https://raw.githubusercontent.com/serengil/chefboost/master/icon/chefboost-icon-labeled-v2.png\" width=\"200\" height=\"220\"></p>\n\n**Chefboost** is a lightweight [gradient boosting](https://sefiks.com/2018/10/04/a-step-by-step-gradient-boosting-decision-tree-example/), [random forest](https://sefiks.com/2017/11/19/how-random-forests-can-keep-you-from-decision-tree/) and [adaboost](https://sefiks.com/2018/11/02/a-step-by-step-adaboost-example/) enabled decision tree framework including regular [ID3](https://sefiks.com/2017/11/20/a-step-by-step-id3-decision-tree-example/), [C4.5](https://sefiks.com/2018/05/13/a-step-by-step-c4-5-decision-tree-example/), [CART](https://sefiks.com/2018/08/27/a-step-by-step-cart-decision-tree-example/), [CHAID](https://sefiks.com/2020/03/18/a-step-by-step-chaid-decision-tree-example/) and [regression tree](https://sefiks.com/2018/08/28/a-step-by-step-regression-decision-tree-example/) algorithms **with categorical features support**. It is lightweight, you just need to write **a few lines of code** to build decision trees with Chefboost.\n\n# Installation\n\nThe easiest way to install Chefboost framework is to download it from [from PyPI](https://pypi.org/project/chefboost).\n\n```\npip install chefboost\n```\n\nInstallation guideline is captured as a video [here](https://youtu.be/YYF993HTHf8).\n\n# Usage\n\nBasically, you just need to pass the dataset as pandas data frame and tree configurations after importing Chefboost as illustrated below. You just need to put the target label to the right. Besides, chefboost handles both numeric and nominal features and target values in contrast to its alternatives.\n\n```python\nfrom chefboost import Chefboost as chef\nimport pandas as pd\n\ndf = pd.read_csv(\"dataset/golf.txt\")\n\nconfig = {'algorithm': 'ID3'}\nmodel = chef.fit(df, config)\n```\n\n# Outcomes\n\nBuilt decision trees are stored as python if statements in the `tests/outputs/rules` directory. A sample of decision rules is demonstrated below.\n\n```python\ndef findDecision(Outlook, Temperature, Humidity, Wind, Decision):\n   if Outlook == 'Rain':\n      if Wind == 'Weak':\n         return 'Yes'\n      elif Wind == 'Strong':\n         return 'No'\n      else:\n         return 'No'\n   elif Outlook == 'Sunny':\n      if Humidity == 'High':\n         return 'No'\n      elif Humidity == 'Normal':\n         return 'Yes'\n      else:\n         return 'Yes'\n   elif Outlook == 'Overcast':\n      return 'Yes'\n   else:\n      return 'Yes'\n ```\n\n# Testing for custom instances\n\nDecision rules will be stored in `outputs/rules/` folder when you build decision trees. You can run the built decision tree for new instances as illustrated below.\n\n```python\ntest_instance = ['Sunny', 'Hot', 'High', 'Weak']\nmodel = chef.fit(df, config)\nprediction = chef.predict(model, test_instance)\n```\n\nYou can consume built decision trees directly as well. In this way, you can restore already built decision trees and skip learning steps, or apply **transfer learning**. Loaded trees offer you findDecision method to test for new instances.\n\n```python\nmoduleName = \"outputs/rules/rules\" #this will load outputs/rules/rules.py\ntree = chef.restoreTree(moduleName)\nprediction = tree.findDecision(['Sunny', 'Hot', 'High', 'Weak'])\n```\n\n**tests/global-unit-test.py** will guide you how to build a different decision trees and make predictions.\n\n# Model save and restoration\n\nYou can save your trained models.\n\n```python\nmodel = chef.fit(df.copy(), config)\nchef.save_model(model, \"model.pkl\")\n```\n\nIn this way, you can use the same model later to just make predictions. This skips the training steps. Restoration requires to store .py and .pkl files under `outputs/rules`.\n\n```python\nmodel = chef.load_model(\"model.pkl\")\nprediction = chef.predict(model, ['Sunny',85,85,'Weak'])\n```\n\n# Sample configurations\n\nChefboost supports several decision tree, bagging and boosting algorithms. You just need to pass the configuration to use different algorithms.\n\n**Regular Decision Trees** [`ID3 Video`](https://youtu.be/Z93qE5eb6eg), [`C4.5 Video`](https://youtu.be/kjhQHmtDaAA), [`CART Video`](https://youtu.be/CSApBetgukM), [`CHAID Video`](https://youtu.be/dcnFuS4QILg), [`Regression Tree Video`](https://youtu.be/pCQ2RCa20Bg)\n\n```python\nconfig = {'algorithm': 'C4.5'} #ID3, C4.5, CART, CHAID or Regression\n```\n\n**Gradient Boosting** [`Video`](https://youtu.be/KFsnZKMKNAE)\n\n```python\nconfig = {'enableGBM': True, 'epochs': 7, 'learning_rate': 1}\n```\n\n**Random Forest** [`Video`](https://youtu.be/J7hDtV261PQ)\n\n```python\nconfig = {'enableRandomForest': True, 'num_of_trees': 5}\n```\n\n**Adaboost** [`Video`](https://youtu.be/Obj208F6e7k)\n\n```python\nconfig = {'enableAdaboost': True, 'num_of_weak_classifier': 4}\n```\n\n## Paralellism\n\nChefboost offers parallelism to speed model building up. Branches of a decision tree will be created in parallel in this way. You should pass enableParallelism argument as True in the configuration. Its default value is False.\n\n```python\nif __name__ == '__main__':\n   config = {'algorithm': 'C4.5', 'enableParallelism': True}\n   model = chef.fit(df, config)\n```\n\nNotice that you have to locate training step in an if block and it should check you are in main.\n\n## Feature Importance\n\nDecision trees are inherently interpretable and explainable algorithms. Still we can add some extra layers to explain the built models. Herein, [feature importance](https://sefiks.com/2020/04/06/feature-importance-in-decision-trees/) is one of the most common way to make transparent models.\n\n```python\nif __name__ == '__main__':\n   config = {'algorithm': 'C4.5', 'enableParallelism': True}\n   model = chef.fit(df, config)\n   fi = chef.feature_importance()\n   print(fi)\n```\n\nThis returns feature importance values in the pandas data frame format.\n\n| feature     | final_importance |\n| ---         | ---              |\n| Wind        | 0.609868         |\n| Humidity    | 0.265105         |\n| Temperature | 0.197528         |\n| Outlook     | -0.072501        |\n\n# Documentation\n\nThis YouTube [playlist](https://www.youtube.com/playlist?list=PLsS_1RYmYQQHp_xZObt76dpacY543GrJD) guides you how to use Chefboost step by step for different algorithms. You can also find the detailed documentations about these core algorithms [here](https://sefiks.com/tag/decision-tree/). \n\nBesides, you can enroll this online course - [**Decision Trees for Machine Learning From Scratch**](https://www.udemy.com/course/decision-trees-for-machine-learning/?referralCode=FDC9B836EC6DAA1A663A) and follow the curriculum if you wonder the theory of decision trees and how this framework is developed.\n\n# Support\n\nThere are many ways to support a project - starring\u2b50\ufe0f the GitHub repos is just one.\n\nYou can also support this project through Patreon.\n\n<a href=\"https://www.patreon.com/bePatron?u=31795557\"><img src=\"https://c5.patreon.com/external/logo/become_a_patron_button.png\"></img></a>\n\n# Licence\n\nChefboost is licensed under the MIT License - see [`LICENSE`](https://github.com/serengil/chefboost/blob/master/LICENSE) for more details.\n\n[Logo](https://thenounproject.com/term/chef/1932168/) is created by [Tang Ge](https://thenounproject.com/tang_ge/). Licensed under [Creative Commons: By Attribution 3.0 License](https://creativecommons.org/licenses/by/3.0/).\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/serengil/chefboost", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "chefboost", "package_url": "https://pypi.org/project/chefboost/", "platform": "", "project_url": "https://pypi.org/project/chefboost/", "project_urls": {"Homepage": "https://github.com/serengil/chefboost"}, "release_url": "https://pypi.org/project/chefboost/0.0.6/", "requires_dist": ["pandas (>=0.22.0)", "numpy (>=1.14.0)", "tqdm (>=4.30.0)"], "requires_python": ">=3.6", "summary": "Lightweight Decision Tree Framework Supporting GBM, Random Forest and Adaboost", "version": "0.0.6", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>chefboost</h1>\n<p><a href=\"https://pepy.tech/project/chefboost\" rel=\"nofollow\"><img alt=\"Downloads\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7a1a4828dc8867d73cbaee3749f8394be3c9a230/68747470733a2f2f706570792e746563682f62616467652f63686566626f6f7374\"></a></p>\n<p align=\"center\"><img height=\"220\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/34d7f6802b2d95d1b2d31bd14b125299959a9a11/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f736572656e67696c2f63686566626f6f73742f6d61737465722f69636f6e2f63686566626f6f73742d69636f6e2d6c6162656c65642d76322e706e67\" width=\"200\"></p>\n<p><strong>Chefboost</strong> is a lightweight <a href=\"https://sefiks.com/2018/10/04/a-step-by-step-gradient-boosting-decision-tree-example/\" rel=\"nofollow\">gradient boosting</a>, <a href=\"https://sefiks.com/2017/11/19/how-random-forests-can-keep-you-from-decision-tree/\" rel=\"nofollow\">random forest</a> and <a href=\"https://sefiks.com/2018/11/02/a-step-by-step-adaboost-example/\" rel=\"nofollow\">adaboost</a> enabled decision tree framework including regular <a href=\"https://sefiks.com/2017/11/20/a-step-by-step-id3-decision-tree-example/\" rel=\"nofollow\">ID3</a>, <a href=\"https://sefiks.com/2018/05/13/a-step-by-step-c4-5-decision-tree-example/\" rel=\"nofollow\">C4.5</a>, <a href=\"https://sefiks.com/2018/08/27/a-step-by-step-cart-decision-tree-example/\" rel=\"nofollow\">CART</a>, <a href=\"https://sefiks.com/2020/03/18/a-step-by-step-chaid-decision-tree-example/\" rel=\"nofollow\">CHAID</a> and <a href=\"https://sefiks.com/2018/08/28/a-step-by-step-regression-decision-tree-example/\" rel=\"nofollow\">regression tree</a> algorithms <strong>with categorical features support</strong>. It is lightweight, you just need to write <strong>a few lines of code</strong> to build decision trees with Chefboost.</p>\n<h1>Installation</h1>\n<p>The easiest way to install Chefboost framework is to download it from <a href=\"https://pypi.org/project/chefboost\" rel=\"nofollow\">from PyPI</a>.</p>\n<pre><code>pip install chefboost\n</code></pre>\n<p>Installation guideline is captured as a video <a href=\"https://youtu.be/YYF993HTHf8\" rel=\"nofollow\">here</a>.</p>\n<h1>Usage</h1>\n<p>Basically, you just need to pass the dataset as pandas data frame and tree configurations after importing Chefboost as illustrated below. You just need to put the target label to the right. Besides, chefboost handles both numeric and nominal features and target values in contrast to its alternatives.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">chefboost</span> <span class=\"kn\">import</span> <span class=\"n\">Chefboost</span> <span class=\"k\">as</span> <span class=\"n\">chef</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pandas</span> <span class=\"k\">as</span> <span class=\"nn\">pd</span>\n\n<span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">read_csv</span><span class=\"p\">(</span><span class=\"s2\">\"dataset/golf.txt\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'algorithm'</span><span class=\"p\">:</span> <span class=\"s1\">'ID3'</span><span class=\"p\">}</span>\n<span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">chef</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">,</span> <span class=\"n\">config</span><span class=\"p\">)</span>\n</pre>\n<h1>Outcomes</h1>\n<p>Built decision trees are stored as python if statements in the <code>tests/outputs/rules</code> directory. A sample of decision rules is demonstrated below.</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">findDecision</span><span class=\"p\">(</span><span class=\"n\">Outlook</span><span class=\"p\">,</span> <span class=\"n\">Temperature</span><span class=\"p\">,</span> <span class=\"n\">Humidity</span><span class=\"p\">,</span> <span class=\"n\">Wind</span><span class=\"p\">,</span> <span class=\"n\">Decision</span><span class=\"p\">):</span>\n   <span class=\"k\">if</span> <span class=\"n\">Outlook</span> <span class=\"o\">==</span> <span class=\"s1\">'Rain'</span><span class=\"p\">:</span>\n      <span class=\"k\">if</span> <span class=\"n\">Wind</span> <span class=\"o\">==</span> <span class=\"s1\">'Weak'</span><span class=\"p\">:</span>\n         <span class=\"k\">return</span> <span class=\"s1\">'Yes'</span>\n      <span class=\"k\">elif</span> <span class=\"n\">Wind</span> <span class=\"o\">==</span> <span class=\"s1\">'Strong'</span><span class=\"p\">:</span>\n         <span class=\"k\">return</span> <span class=\"s1\">'No'</span>\n      <span class=\"k\">else</span><span class=\"p\">:</span>\n         <span class=\"k\">return</span> <span class=\"s1\">'No'</span>\n   <span class=\"k\">elif</span> <span class=\"n\">Outlook</span> <span class=\"o\">==</span> <span class=\"s1\">'Sunny'</span><span class=\"p\">:</span>\n      <span class=\"k\">if</span> <span class=\"n\">Humidity</span> <span class=\"o\">==</span> <span class=\"s1\">'High'</span><span class=\"p\">:</span>\n         <span class=\"k\">return</span> <span class=\"s1\">'No'</span>\n      <span class=\"k\">elif</span> <span class=\"n\">Humidity</span> <span class=\"o\">==</span> <span class=\"s1\">'Normal'</span><span class=\"p\">:</span>\n         <span class=\"k\">return</span> <span class=\"s1\">'Yes'</span>\n      <span class=\"k\">else</span><span class=\"p\">:</span>\n         <span class=\"k\">return</span> <span class=\"s1\">'Yes'</span>\n   <span class=\"k\">elif</span> <span class=\"n\">Outlook</span> <span class=\"o\">==</span> <span class=\"s1\">'Overcast'</span><span class=\"p\">:</span>\n      <span class=\"k\">return</span> <span class=\"s1\">'Yes'</span>\n   <span class=\"k\">else</span><span class=\"p\">:</span>\n      <span class=\"k\">return</span> <span class=\"s1\">'Yes'</span>\n</pre>\n<h1>Testing for custom instances</h1>\n<p>Decision rules will be stored in <code>outputs/rules/</code> folder when you build decision trees. You can run the built decision tree for new instances as illustrated below.</p>\n<pre><span class=\"n\">test_instance</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'Sunny'</span><span class=\"p\">,</span> <span class=\"s1\">'Hot'</span><span class=\"p\">,</span> <span class=\"s1\">'High'</span><span class=\"p\">,</span> <span class=\"s1\">'Weak'</span><span class=\"p\">]</span>\n<span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">chef</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">,</span> <span class=\"n\">config</span><span class=\"p\">)</span>\n<span class=\"n\">prediction</span> <span class=\"o\">=</span> <span class=\"n\">chef</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">,</span> <span class=\"n\">test_instance</span><span class=\"p\">)</span>\n</pre>\n<p>You can consume built decision trees directly as well. In this way, you can restore already built decision trees and skip learning steps, or apply <strong>transfer learning</strong>. Loaded trees offer you findDecision method to test for new instances.</p>\n<pre><span class=\"n\">moduleName</span> <span class=\"o\">=</span> <span class=\"s2\">\"outputs/rules/rules\"</span> <span class=\"c1\">#this will load outputs/rules/rules.py</span>\n<span class=\"n\">tree</span> <span class=\"o\">=</span> <span class=\"n\">chef</span><span class=\"o\">.</span><span class=\"n\">restoreTree</span><span class=\"p\">(</span><span class=\"n\">moduleName</span><span class=\"p\">)</span>\n<span class=\"n\">prediction</span> <span class=\"o\">=</span> <span class=\"n\">tree</span><span class=\"o\">.</span><span class=\"n\">findDecision</span><span class=\"p\">([</span><span class=\"s1\">'Sunny'</span><span class=\"p\">,</span> <span class=\"s1\">'Hot'</span><span class=\"p\">,</span> <span class=\"s1\">'High'</span><span class=\"p\">,</span> <span class=\"s1\">'Weak'</span><span class=\"p\">])</span>\n</pre>\n<p><strong>tests/global-unit-test.py</strong> will guide you how to build a different decision trees and make predictions.</p>\n<h1>Model save and restoration</h1>\n<p>You can save your trained models.</p>\n<pre><span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">chef</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">(),</span> <span class=\"n\">config</span><span class=\"p\">)</span>\n<span class=\"n\">chef</span><span class=\"o\">.</span><span class=\"n\">save_model</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">,</span> <span class=\"s2\">\"model.pkl\"</span><span class=\"p\">)</span>\n</pre>\n<p>In this way, you can use the same model later to just make predictions. This skips the training steps. Restoration requires to store .py and .pkl files under <code>outputs/rules</code>.</p>\n<pre><span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">chef</span><span class=\"o\">.</span><span class=\"n\">load_model</span><span class=\"p\">(</span><span class=\"s2\">\"model.pkl\"</span><span class=\"p\">)</span>\n<span class=\"n\">prediction</span> <span class=\"o\">=</span> <span class=\"n\">chef</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">'Sunny'</span><span class=\"p\">,</span><span class=\"mi\">85</span><span class=\"p\">,</span><span class=\"mi\">85</span><span class=\"p\">,</span><span class=\"s1\">'Weak'</span><span class=\"p\">])</span>\n</pre>\n<h1>Sample configurations</h1>\n<p>Chefboost supports several decision tree, bagging and boosting algorithms. You just need to pass the configuration to use different algorithms.</p>\n<p><strong>Regular Decision Trees</strong> <a href=\"https://youtu.be/Z93qE5eb6eg\" rel=\"nofollow\"><code>ID3 Video</code></a>, <a href=\"https://youtu.be/kjhQHmtDaAA\" rel=\"nofollow\"><code>C4.5 Video</code></a>, <a href=\"https://youtu.be/CSApBetgukM\" rel=\"nofollow\"><code>CART Video</code></a>, <a href=\"https://youtu.be/dcnFuS4QILg\" rel=\"nofollow\"><code>CHAID Video</code></a>, <a href=\"https://youtu.be/pCQ2RCa20Bg\" rel=\"nofollow\"><code>Regression Tree Video</code></a></p>\n<pre><span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'algorithm'</span><span class=\"p\">:</span> <span class=\"s1\">'C4.5'</span><span class=\"p\">}</span> <span class=\"c1\">#ID3, C4.5, CART, CHAID or Regression</span>\n</pre>\n<p><strong>Gradient Boosting</strong> <a href=\"https://youtu.be/KFsnZKMKNAE\" rel=\"nofollow\"><code>Video</code></a></p>\n<pre><span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'enableGBM'</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"s1\">'epochs'</span><span class=\"p\">:</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"s1\">'learning_rate'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">}</span>\n</pre>\n<p><strong>Random Forest</strong> <a href=\"https://youtu.be/J7hDtV261PQ\" rel=\"nofollow\"><code>Video</code></a></p>\n<pre><span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'enableRandomForest'</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"s1\">'num_of_trees'</span><span class=\"p\">:</span> <span class=\"mi\">5</span><span class=\"p\">}</span>\n</pre>\n<p><strong>Adaboost</strong> <a href=\"https://youtu.be/Obj208F6e7k\" rel=\"nofollow\"><code>Video</code></a></p>\n<pre><span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'enableAdaboost'</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"s1\">'num_of_weak_classifier'</span><span class=\"p\">:</span> <span class=\"mi\">4</span><span class=\"p\">}</span>\n</pre>\n<h2>Paralellism</h2>\n<p>Chefboost offers parallelism to speed model building up. Branches of a decision tree will be created in parallel in this way. You should pass enableParallelism argument as True in the configuration. Its default value is False.</p>\n<pre><span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n   <span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'algorithm'</span><span class=\"p\">:</span> <span class=\"s1\">'C4.5'</span><span class=\"p\">,</span> <span class=\"s1\">'enableParallelism'</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">}</span>\n   <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">chef</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">,</span> <span class=\"n\">config</span><span class=\"p\">)</span>\n</pre>\n<p>Notice that you have to locate training step in an if block and it should check you are in main.</p>\n<h2>Feature Importance</h2>\n<p>Decision trees are inherently interpretable and explainable algorithms. Still we can add some extra layers to explain the built models. Herein, <a href=\"https://sefiks.com/2020/04/06/feature-importance-in-decision-trees/\" rel=\"nofollow\">feature importance</a> is one of the most common way to make transparent models.</p>\n<pre><span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n   <span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'algorithm'</span><span class=\"p\">:</span> <span class=\"s1\">'C4.5'</span><span class=\"p\">,</span> <span class=\"s1\">'enableParallelism'</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">}</span>\n   <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">chef</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">,</span> <span class=\"n\">config</span><span class=\"p\">)</span>\n   <span class=\"n\">fi</span> <span class=\"o\">=</span> <span class=\"n\">chef</span><span class=\"o\">.</span><span class=\"n\">feature_importance</span><span class=\"p\">()</span>\n   <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">fi</span><span class=\"p\">)</span>\n</pre>\n<p>This returns feature importance values in the pandas data frame format.</p>\n<table>\n<thead>\n<tr>\n<th>feature</th>\n<th>final_importance</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Wind</td>\n<td>0.609868</td>\n</tr>\n<tr>\n<td>Humidity</td>\n<td>0.265105</td>\n</tr>\n<tr>\n<td>Temperature</td>\n<td>0.197528</td>\n</tr>\n<tr>\n<td>Outlook</td>\n<td>-0.072501</td>\n</tr></tbody></table>\n<h1>Documentation</h1>\n<p>This YouTube <a href=\"https://www.youtube.com/playlist?list=PLsS_1RYmYQQHp_xZObt76dpacY543GrJD\" rel=\"nofollow\">playlist</a> guides you how to use Chefboost step by step for different algorithms. You can also find the detailed documentations about these core algorithms <a href=\"https://sefiks.com/tag/decision-tree/\" rel=\"nofollow\">here</a>.</p>\n<p>Besides, you can enroll this online course - <a href=\"https://www.udemy.com/course/decision-trees-for-machine-learning/?referralCode=FDC9B836EC6DAA1A663A\" rel=\"nofollow\"><strong>Decision Trees for Machine Learning From Scratch</strong></a> and follow the curriculum if you wonder the theory of decision trees and how this framework is developed.</p>\n<h1>Support</h1>\n<p>There are many ways to support a project - starring\u2b50\ufe0f the GitHub repos is just one.</p>\n<p>You can also support this project through Patreon.</p>\n<p><a href=\"https://www.patreon.com/bePatron?u=31795557\" rel=\"nofollow\"><img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/cf6b2799bdc4927927a79c4813b7b540815cd744/68747470733a2f2f63352e70617472656f6e2e636f6d2f65787465726e616c2f6c6f676f2f6265636f6d655f615f706174726f6e5f627574746f6e2e706e67\"></a></p>\n<h1>Licence</h1>\n<p>Chefboost is licensed under the MIT License - see <a href=\"https://github.com/serengil/chefboost/blob/master/LICENSE\" rel=\"nofollow\"><code>LICENSE</code></a> for more details.</p>\n<p><a href=\"https://thenounproject.com/term/chef/1932168/\" rel=\"nofollow\">Logo</a> is created by <a href=\"https://thenounproject.com/tang_ge/\" rel=\"nofollow\">Tang Ge</a>. Licensed under <a href=\"https://creativecommons.org/licenses/by/3.0/\" rel=\"nofollow\">Creative Commons: By Attribution 3.0 License</a>.</p>\n\n          </div>"}, "last_serial": 7110536, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "f11c7cf2768890d047a8f8da102b96b6", "sha256": "c9e9004697ae1529674acc895b6a558e3c42191af8e3545f0dd379e3673f6adc"}, "downloads": -1, "filename": "chefboost-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "f11c7cf2768890d047a8f8da102b96b6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 17916, "upload_time": "2020-01-06T13:27:52", "upload_time_iso_8601": "2020-01-06T13:27:52.319381Z", "url": "https://files.pythonhosted.org/packages/03/94/ff185c8f36702b4d95c2b8e23e204774dca8a61183e0d1816c99a4983c45/chefboost-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5b2bff167263b0ca7c16191774548f1e", "sha256": "7ad218d308f14fbe79592c2383de76f34c3e103cbd0ad3c03d797d3622cc0e2b"}, "downloads": -1, "filename": "chefboost-0.0.1.tar.gz", "has_sig": false, "md5_digest": "5b2bff167263b0ca7c16191774548f1e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 12982, "upload_time": "2020-01-06T13:27:54", "upload_time_iso_8601": "2020-01-06T13:27:54.796405Z", "url": "https://files.pythonhosted.org/packages/e1/a8/cf51eb3fb24f30b9225134aac1a7ac3077112c446ecc24cb8b309c567093/chefboost-0.0.1.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "d3ee32eba4dd4154ef8cd0396f2b8875", "sha256": "20001037321fcb5fdda2cd513b7606111433a8209b9f4311772b8abfb2817199"}, "downloads": -1, "filename": "chefboost-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "d3ee32eba4dd4154ef8cd0396f2b8875", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 19813, "upload_time": "2020-01-30T21:20:18", "upload_time_iso_8601": "2020-01-30T21:20:18.061956Z", "url": "https://files.pythonhosted.org/packages/11/74/99026299127cd1095bcf57e64668e4cc37358b1369c4d9e006333c893e1a/chefboost-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e69014a50d85bbb1284c20e2dc11f37e", "sha256": "76b9f760711a5b28a7722d6e81a73bbcb3322d7e49a7eb5f47e655e36dbd0329"}, "downloads": -1, "filename": "chefboost-0.0.3.tar.gz", "has_sig": false, "md5_digest": "e69014a50d85bbb1284c20e2dc11f37e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 14768, "upload_time": "2020-01-30T21:20:19", "upload_time_iso_8601": "2020-01-30T21:20:19.611053Z", "url": "https://files.pythonhosted.org/packages/74/27/719e46a4db26ba9e5d9d0474a749a040472d45a439688c8fac484a50710e/chefboost-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "8730251e9bc5c36e51d20dec7d56a4c8", "sha256": "fc9c9bba8f2b68c3537099bb79187cfe765d82a3aa3e7dd9caec2424de08d778"}, "downloads": -1, "filename": "chefboost-0.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "8730251e9bc5c36e51d20dec7d56a4c8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 20519, "upload_time": "2020-03-20T16:18:46", "upload_time_iso_8601": "2020-03-20T16:18:46.250782Z", "url": "https://files.pythonhosted.org/packages/2c/3b/719d5ebb64fd1c7d5bf491456a30a9eea048325b024103e3edec86ce79ef/chefboost-0.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5775ac0611bc96cba16c05d679b6ca9f", "sha256": "f6aec7aced5e57518c51eeaefaba3b008b0fdadcdc22b52f196a2b913d0de09a"}, "downloads": -1, "filename": "chefboost-0.0.4.tar.gz", "has_sig": false, "md5_digest": "5775ac0611bc96cba16c05d679b6ca9f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 15668, "upload_time": "2020-03-20T16:18:47", "upload_time_iso_8601": "2020-03-20T16:18:47.763692Z", "url": "https://files.pythonhosted.org/packages/b1/16/1033ef3317c4c07301e305d7db2cc1bbecaf9cbd25876c0841367a05838d/chefboost-0.0.4.tar.gz", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "e65c68d6c4b2241523cd23c65d567a43", "sha256": "0f9c369caba31ffa6277a5e2262585b9755ba340285fafb4371b3d0dbb968649"}, "downloads": -1, "filename": "chefboost-0.0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "e65c68d6c4b2241523cd23c65d567a43", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 20536, "upload_time": "2020-04-25T10:34:38", "upload_time_iso_8601": "2020-04-25T10:34:38.275696Z", "url": "https://files.pythonhosted.org/packages/1d/d7/689c1d055741e3d4927f702327b6ecbfab220c8ea0c89e588b7a44b211a4/chefboost-0.0.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6759abc2b53b6c6596704002a763bdd5", "sha256": "a67ecfa6aac22bfe8cb2ec327e10f7fbd72eed74d334045bb7c5aec36499737d"}, "downloads": -1, "filename": "chefboost-0.0.5.tar.gz", "has_sig": false, "md5_digest": "6759abc2b53b6c6596704002a763bdd5", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 15634, "upload_time": "2020-04-25T10:34:39", "upload_time_iso_8601": "2020-04-25T10:34:39.393809Z", "url": "https://files.pythonhosted.org/packages/28/b4/ac314925403ab206a61f9e837c2339c3d63ad2ab25c029eb898beda91213/chefboost-0.0.5.tar.gz", "yanked": false}], "0.0.6": [{"comment_text": "", "digests": {"md5": "09aa96d61ae5fef6f5bcf75314769e3e", "sha256": "6114a81cc6937ae10b7f92cca0a37e9cd0e1caba6596d7670cbceb675381c673"}, "downloads": -1, "filename": "chefboost-0.0.6-py3-none-any.whl", "has_sig": false, "md5_digest": "09aa96d61ae5fef6f5bcf75314769e3e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 22308, "upload_time": "2020-04-27T10:16:44", "upload_time_iso_8601": "2020-04-27T10:16:44.794803Z", "url": "https://files.pythonhosted.org/packages/91/68/aab59c29bf619090ff4f6868070a19639e29b1bc882d35d104f7ee5d19f6/chefboost-0.0.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2abd7957672cba6cab2896e6bb280828", "sha256": "064c42e203f1aee004c80850e1fc040f82e810ae14139a28d9164cfc9e6148b5"}, "downloads": -1, "filename": "chefboost-0.0.6.tar.gz", "has_sig": false, "md5_digest": "2abd7957672cba6cab2896e6bb280828", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 17590, "upload_time": "2020-04-27T10:16:46", "upload_time_iso_8601": "2020-04-27T10:16:46.085083Z", "url": "https://files.pythonhosted.org/packages/30/06/947404665160b4650d727243eaa1d2d69fc8105ce6f6bfe961a0ee0e212b/chefboost-0.0.6.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "09aa96d61ae5fef6f5bcf75314769e3e", "sha256": "6114a81cc6937ae10b7f92cca0a37e9cd0e1caba6596d7670cbceb675381c673"}, "downloads": -1, "filename": "chefboost-0.0.6-py3-none-any.whl", "has_sig": false, "md5_digest": "09aa96d61ae5fef6f5bcf75314769e3e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 22308, "upload_time": "2020-04-27T10:16:44", "upload_time_iso_8601": "2020-04-27T10:16:44.794803Z", "url": "https://files.pythonhosted.org/packages/91/68/aab59c29bf619090ff4f6868070a19639e29b1bc882d35d104f7ee5d19f6/chefboost-0.0.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2abd7957672cba6cab2896e6bb280828", "sha256": "064c42e203f1aee004c80850e1fc040f82e810ae14139a28d9164cfc9e6148b5"}, "downloads": -1, "filename": "chefboost-0.0.6.tar.gz", "has_sig": false, "md5_digest": "2abd7957672cba6cab2896e6bb280828", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 17590, "upload_time": "2020-04-27T10:16:46", "upload_time_iso_8601": "2020-04-27T10:16:46.085083Z", "url": "https://files.pythonhosted.org/packages/30/06/947404665160b4650d727243eaa1d2d69fc8105ce6f6bfe961a0ee0e212b/chefboost-0.0.6.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:19:41 2020"}