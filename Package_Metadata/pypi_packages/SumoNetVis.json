{"info": {"author": "Patrick Malcolm", "author_email": "patmalcolm91@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Scientific/Engineering"], "description": "# SumoNetVis\nA Python library for visualizing a Sumo network and trajectories with matplotlib or as an OBJ file.\n\n**Network and Trajectory Plotting**\n\n![Example plot of an intersection with trajectory colored by speed](Example_Plot.png)\n\n**Highly Customizable**\n\n![Example plot showing USA and EUR style lane markings](Line_Stripe_Styles_Animation.gif)\n\n**Trajectory Animation**\n\n![Example animation](Example_Animation.gif)\n\nBasic trajectory plotting from FCD outputs is built in, but it is also possible to plot custom data and graphics on\ntop of the network with the full flexibility and power of matplotlib and other compatible libraries, such as seaborn.\n\n3D geometry for a network can be generated and saved as a Wavefront-OBJ file.\n![Example_rendering of OBJ export of an intersection](Example_OBJ_Export.png)\n\n## Installation\nThis package can be installed via pip with the command ```pip install SumoNetVis```.\nYou can then import the library with:\n\n```python\nimport SumoNetVis\n```\n\n### Dependencies\n* shapely (>=1.7.0 for stop lines and OBJ export)\n* matplotlib\n* numpy\n\n## Usage\nTo plot a Sumo net file and trajectories, you can use the following code:\n\n```python\nimport SumoNetVis\nimport matplotlib.pyplot as plt\n# Plot Sumo Network\nnet = SumoNetVis.Net(\"path/to/yourfile.net.xml\")\nnet.plot()\n# Plot trajectories\ntrajectories = SumoNetVis.Trajectories(\"path/to/fcd-output.xml\")\ntrajectories[\"vehicle_id\"].assign_colors_speed()\ntrajectories[\"vehicle_id\"].plot()\n# Show figure\nplt.show()\n```\n\nthe ```Net.plot()``` function takes the following optional parameters:\n* ax: matplotlib Axes object (defaults to currently active Axes)\n* clip_to_limits: if True, only objects visible in the current view extents will be drawn\n* zoom_to_extents: auto-zoom to Net extents (defaults to True)\n* style: lane marking style to use (\"USA\" or \"EUR\")\n* stripe_width_scale: scale factor for lane marking widths (defaults to 1)\n* plot_stop_lines: whether to plot stop lines\n* lane_kwargs: dict of kwargs to pass to the lane plotting function (matplotlib.patches.Polygon()), for example alpha\n* lane_marking_kwargs: dict of kwargs to pass to the lane markings plotting function (matplotlib.lines.Line2D())\n* junction_kwargs: dict of kwargs to pass to the junction plotting function (matplotlib.patches.Polygon())\n\nAny kwargs passed directly to ```Net.plot()``` will be passed to each of the plotting functions. These will, however,\nbe overridden by any object-type-specific kwargs (```lane_kwargs```, etc.).\n\nTo plot all junctions at 50% opacity and all other objects at 80% opacity, for example, one can use:\n```python\nnet.plot(junction_kwargs={\"alpha\": 0.5}, alpha=0.8)\n```\n\nThe color scheme of junctions and various lane types can be customized by modifying entries in the global variable\n```COLOR_SCHEME```. For example, to plot bike lanes as dark green instead of dark red, do the following:\n```python\nSumoNetVis.COLOR_SCHEME[\"bicycle\"] = \"#006600\"\n```\nAny color specification supported by matplotlib can be given here, such as RGB and RGBA hex strings and float tuples, as\nwell as color names and abbreviations. See the matplotlib documentation for more detailed information.\n\n### Animation\nInstead of visualizing Trajectories as lines, an animation can be generated using the ```matplotlib.animation``` module.\n\n```python\nimport matplotlib.animation as animation\ntrajectories = SumoNetVis.Trajectories(\"path/to/fcd-output.xml\")\nfig, ax = plt.subplots()\na = animation.FuncAnimation(fig, trajectories.plot_points, frames=trajectories.timestep_range(), repeat=False,\n                            interval=1000*trajectories.timestep, fargs=(ax,), blit=True)\nplt.show()\n```\n\nThe plot settings for each vehicle can be customized and the color of each point can be animated, as shown in the\nfollowing example.\n\n```python\nfor trajectory in trajectories:\n        trajectory.assign_colors_speed()\n        trajectory.point_plot_kwargs[\"ms\"] = 8  # set marker size. Can set any kwargs taken by matplotlib.pyplot.plot().\n```\n\nIn order to animate the color of the points based on the assigned color scheme, an additional farg must be passed\nwhen creating the animation.\n\n```python\na = animation.FuncAnimation(fig, trajectories.plot_points, frames=trajectories.timestep_range(), repeat=False,\n                            interval=1000*trajectories.timestep, fargs=(ax, True), blit=True)\n```\n\n### Additional Files\nCurrently, polygons, POIs, and bus stops are supported. Sumo additional files can be loaded and plotted in one of\ntwo ways:\n\n**Load directly with Network**\n```python\nnet = SumoNetVis.Net(\"path/to/yourfile.net.xml\", additional_files=\"path/to/additionals_file.add.xml\")\n```\n\n**Load and handle additional files separately**\n```python\naddls = SumoNetVis.Additionals(\"path/to/additionals_file.add.xml\", reference_net=net)\naddls.plot()\n```\nThe ```reference_net``` argument is optional, and only necessary for bus stops and for POIs whose position is defined\nrelative to a lane in the network.\n\n#### Bus stop styles\nSeveral styles of bus stop are supported. The style can be changed using the function\n```SumoNetVis.set_bus_stop_style()```. See documentation for further details\n\n### OBJ Export\n\nThe Wavefront-OBJ format is a text-based file format. The ```Net.generate_obj_text()``` method generates the contents\nof this file for the given Sumo network. In order to save an OBJ file, do the following:\n\n```python\n# Save a network as an OBJ file\nwith open(\"model.obj\", \"w\") as f:\n    f.write(net.generate_obj_text())\n\n# Save bus stops and polygons from an additional file as an OBJ file\nwith open(\"busstops.obj\", \"w\") as f:\n    f.write(addls.generate_bus_stops_obj_text())\n```\n\nThe axis configuration in the generated file is Y-Forward, Z-Up. Check these settings if the orientation of the model\nis incorrect when importing the file into a 3D modelling program.\n\nEach type of object is defined with a corresponding material (i.e. all bike lanes have the same material, all sidewalks,\nand so on), making it easy to quickly set the desired material properties before rendering.\n\n## Documentation\nAPI documentation can be found [here](https://patmalcolm91.github.io/SumoNetVis/SumoNetVis.html)\n\n## Contribution\nIssues and pull requests are welcome.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://github.com/patmalcolm91/SumoNetVis/archive/v1.4.1.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/patmalcolm91/SumoNetVis", "keywords": "sumo,network,visualize,plot,matplotlib,traffic", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "SumoNetVis", "package_url": "https://pypi.org/project/SumoNetVis/", "platform": "", "project_url": "https://pypi.org/project/SumoNetVis/", "project_urls": {"Download": "https://github.com/patmalcolm91/SumoNetVis/archive/v1.4.1.tar.gz", "Homepage": "https://github.com/patmalcolm91/SumoNetVis"}, "release_url": "https://pypi.org/project/SumoNetVis/1.4.1/", "requires_dist": null, "requires_python": "", "summary": "A python library to render Sumo network files and trajectories with matplotlib or as an OBJ file.", "version": "1.4.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>SumoNetVis</h1>\n<p>A Python library for visualizing a Sumo network and trajectories with matplotlib or as an OBJ file.</p>\n<p><strong>Network and Trajectory Plotting</strong></p>\n<p><img alt=\"Example plot of an intersection with trajectory colored by speed\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/eaea38248f0b50d2f8a3fbdda05884e6b6f61552/4578616d706c655f506c6f742e706e67\"></p>\n<p><strong>Highly Customizable</strong></p>\n<p><img alt=\"Example plot showing USA and EUR style lane markings\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f3a36a95cdd599981071f20a3368687a3a4e7b80/4c696e655f5374726970655f5374796c65735f416e696d6174696f6e2e676966\"></p>\n<p><strong>Trajectory Animation</strong></p>\n<p><img alt=\"Example animation\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ebce6aa6e3f048ec37a37823b2010135a03739f0/4578616d706c655f416e696d6174696f6e2e676966\"></p>\n<p>Basic trajectory plotting from FCD outputs is built in, but it is also possible to plot custom data and graphics on\ntop of the network with the full flexibility and power of matplotlib and other compatible libraries, such as seaborn.</p>\n<p>3D geometry for a network can be generated and saved as a Wavefront-OBJ file.\n<img alt=\"Example_rendering of OBJ export of an intersection\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3114b0e3bb3f5cb20a42a9121b469441aa113879/4578616d706c655f4f424a5f4578706f72742e706e67\"></p>\n<h2>Installation</h2>\n<p>This package can be installed via pip with the command <code>pip install SumoNetVis</code>.\nYou can then import the library with:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">SumoNetVis</span>\n</pre>\n<h3>Dependencies</h3>\n<ul>\n<li>shapely (&gt;=1.7.0 for stop lines and OBJ export)</li>\n<li>matplotlib</li>\n<li>numpy</li>\n</ul>\n<h2>Usage</h2>\n<p>To plot a Sumo net file and trajectories, you can use the following code:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">SumoNetVis</span>\n<span class=\"kn\">import</span> <span class=\"nn\">matplotlib.pyplot</span> <span class=\"k\">as</span> <span class=\"nn\">plt</span>\n<span class=\"c1\"># Plot Sumo Network</span>\n<span class=\"n\">net</span> <span class=\"o\">=</span> <span class=\"n\">SumoNetVis</span><span class=\"o\">.</span><span class=\"n\">Net</span><span class=\"p\">(</span><span class=\"s2\">\"path/to/yourfile.net.xml\"</span><span class=\"p\">)</span>\n<span class=\"n\">net</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">()</span>\n<span class=\"c1\"># Plot trajectories</span>\n<span class=\"n\">trajectories</span> <span class=\"o\">=</span> <span class=\"n\">SumoNetVis</span><span class=\"o\">.</span><span class=\"n\">Trajectories</span><span class=\"p\">(</span><span class=\"s2\">\"path/to/fcd-output.xml\"</span><span class=\"p\">)</span>\n<span class=\"n\">trajectories</span><span class=\"p\">[</span><span class=\"s2\">\"vehicle_id\"</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">assign_colors_speed</span><span class=\"p\">()</span>\n<span class=\"n\">trajectories</span><span class=\"p\">[</span><span class=\"s2\">\"vehicle_id\"</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">()</span>\n<span class=\"c1\"># Show figure</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n</pre>\n<p>the <code>Net.plot()</code> function takes the following optional parameters:</p>\n<ul>\n<li>ax: matplotlib Axes object (defaults to currently active Axes)</li>\n<li>clip_to_limits: if True, only objects visible in the current view extents will be drawn</li>\n<li>zoom_to_extents: auto-zoom to Net extents (defaults to True)</li>\n<li>style: lane marking style to use (\"USA\" or \"EUR\")</li>\n<li>stripe_width_scale: scale factor for lane marking widths (defaults to 1)</li>\n<li>plot_stop_lines: whether to plot stop lines</li>\n<li>lane_kwargs: dict of kwargs to pass to the lane plotting function (matplotlib.patches.Polygon()), for example alpha</li>\n<li>lane_marking_kwargs: dict of kwargs to pass to the lane markings plotting function (matplotlib.lines.Line2D())</li>\n<li>junction_kwargs: dict of kwargs to pass to the junction plotting function (matplotlib.patches.Polygon())</li>\n</ul>\n<p>Any kwargs passed directly to <code>Net.plot()</code> will be passed to each of the plotting functions. These will, however,\nbe overridden by any object-type-specific kwargs (<code>lane_kwargs</code>, etc.).</p>\n<p>To plot all junctions at 50% opacity and all other objects at 80% opacity, for example, one can use:</p>\n<pre><span class=\"n\">net</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">junction_kwargs</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"alpha\"</span><span class=\"p\">:</span> <span class=\"mf\">0.5</span><span class=\"p\">},</span> <span class=\"n\">alpha</span><span class=\"o\">=</span><span class=\"mf\">0.8</span><span class=\"p\">)</span>\n</pre>\n<p>The color scheme of junctions and various lane types can be customized by modifying entries in the global variable\n<code>COLOR_SCHEME</code>. For example, to plot bike lanes as dark green instead of dark red, do the following:</p>\n<pre><span class=\"n\">SumoNetVis</span><span class=\"o\">.</span><span class=\"n\">COLOR_SCHEME</span><span class=\"p\">[</span><span class=\"s2\">\"bicycle\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">\"#006600\"</span>\n</pre>\n<p>Any color specification supported by matplotlib can be given here, such as RGB and RGBA hex strings and float tuples, as\nwell as color names and abbreviations. See the matplotlib documentation for more detailed information.</p>\n<h3>Animation</h3>\n<p>Instead of visualizing Trajectories as lines, an animation can be generated using the <code>matplotlib.animation</code> module.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">matplotlib.animation</span> <span class=\"k\">as</span> <span class=\"nn\">animation</span>\n<span class=\"n\">trajectories</span> <span class=\"o\">=</span> <span class=\"n\">SumoNetVis</span><span class=\"o\">.</span><span class=\"n\">Trajectories</span><span class=\"p\">(</span><span class=\"s2\">\"path/to/fcd-output.xml\"</span><span class=\"p\">)</span>\n<span class=\"n\">fig</span><span class=\"p\">,</span> <span class=\"n\">ax</span> <span class=\"o\">=</span> <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">subplots</span><span class=\"p\">()</span>\n<span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">animation</span><span class=\"o\">.</span><span class=\"n\">FuncAnimation</span><span class=\"p\">(</span><span class=\"n\">fig</span><span class=\"p\">,</span> <span class=\"n\">trajectories</span><span class=\"o\">.</span><span class=\"n\">plot_points</span><span class=\"p\">,</span> <span class=\"n\">frames</span><span class=\"o\">=</span><span class=\"n\">trajectories</span><span class=\"o\">.</span><span class=\"n\">timestep_range</span><span class=\"p\">(),</span> <span class=\"n\">repeat</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n                            <span class=\"n\">interval</span><span class=\"o\">=</span><span class=\"mi\">1000</span><span class=\"o\">*</span><span class=\"n\">trajectories</span><span class=\"o\">.</span><span class=\"n\">timestep</span><span class=\"p\">,</span> <span class=\"n\">fargs</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"n\">ax</span><span class=\"p\">,),</span> <span class=\"n\">blit</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n</pre>\n<p>The plot settings for each vehicle can be customized and the color of each point can be animated, as shown in the\nfollowing example.</p>\n<pre><span class=\"k\">for</span> <span class=\"n\">trajectory</span> <span class=\"ow\">in</span> <span class=\"n\">trajectories</span><span class=\"p\">:</span>\n        <span class=\"n\">trajectory</span><span class=\"o\">.</span><span class=\"n\">assign_colors_speed</span><span class=\"p\">()</span>\n        <span class=\"n\">trajectory</span><span class=\"o\">.</span><span class=\"n\">point_plot_kwargs</span><span class=\"p\">[</span><span class=\"s2\">\"ms\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">8</span>  <span class=\"c1\"># set marker size. Can set any kwargs taken by matplotlib.pyplot.plot().</span>\n</pre>\n<p>In order to animate the color of the points based on the assigned color scheme, an additional farg must be passed\nwhen creating the animation.</p>\n<pre><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">animation</span><span class=\"o\">.</span><span class=\"n\">FuncAnimation</span><span class=\"p\">(</span><span class=\"n\">fig</span><span class=\"p\">,</span> <span class=\"n\">trajectories</span><span class=\"o\">.</span><span class=\"n\">plot_points</span><span class=\"p\">,</span> <span class=\"n\">frames</span><span class=\"o\">=</span><span class=\"n\">trajectories</span><span class=\"o\">.</span><span class=\"n\">timestep_range</span><span class=\"p\">(),</span> <span class=\"n\">repeat</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n                            <span class=\"n\">interval</span><span class=\"o\">=</span><span class=\"mi\">1000</span><span class=\"o\">*</span><span class=\"n\">trajectories</span><span class=\"o\">.</span><span class=\"n\">timestep</span><span class=\"p\">,</span> <span class=\"n\">fargs</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"n\">ax</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">),</span> <span class=\"n\">blit</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<h3>Additional Files</h3>\n<p>Currently, polygons, POIs, and bus stops are supported. Sumo additional files can be loaded and plotted in one of\ntwo ways:</p>\n<p><strong>Load directly with Network</strong></p>\n<pre><span class=\"n\">net</span> <span class=\"o\">=</span> <span class=\"n\">SumoNetVis</span><span class=\"o\">.</span><span class=\"n\">Net</span><span class=\"p\">(</span><span class=\"s2\">\"path/to/yourfile.net.xml\"</span><span class=\"p\">,</span> <span class=\"n\">additional_files</span><span class=\"o\">=</span><span class=\"s2\">\"path/to/additionals_file.add.xml\"</span><span class=\"p\">)</span>\n</pre>\n<p><strong>Load and handle additional files separately</strong></p>\n<pre><span class=\"n\">addls</span> <span class=\"o\">=</span> <span class=\"n\">SumoNetVis</span><span class=\"o\">.</span><span class=\"n\">Additionals</span><span class=\"p\">(</span><span class=\"s2\">\"path/to/additionals_file.add.xml\"</span><span class=\"p\">,</span> <span class=\"n\">reference_net</span><span class=\"o\">=</span><span class=\"n\">net</span><span class=\"p\">)</span>\n<span class=\"n\">addls</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">()</span>\n</pre>\n<p>The <code>reference_net</code> argument is optional, and only necessary for bus stops and for POIs whose position is defined\nrelative to a lane in the network.</p>\n<h4>Bus stop styles</h4>\n<p>Several styles of bus stop are supported. The style can be changed using the function\n<code>SumoNetVis.set_bus_stop_style()</code>. See documentation for further details</p>\n<h3>OBJ Export</h3>\n<p>The Wavefront-OBJ format is a text-based file format. The <code>Net.generate_obj_text()</code> method generates the contents\nof this file for the given Sumo network. In order to save an OBJ file, do the following:</p>\n<pre><span class=\"c1\"># Save a network as an OBJ file</span>\n<span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s2\">\"model.obj\"</span><span class=\"p\">,</span> <span class=\"s2\">\"w\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n    <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">net</span><span class=\"o\">.</span><span class=\"n\">generate_obj_text</span><span class=\"p\">())</span>\n\n<span class=\"c1\"># Save bus stops and polygons from an additional file as an OBJ file</span>\n<span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s2\">\"busstops.obj\"</span><span class=\"p\">,</span> <span class=\"s2\">\"w\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n    <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">addls</span><span class=\"o\">.</span><span class=\"n\">generate_bus_stops_obj_text</span><span class=\"p\">())</span>\n</pre>\n<p>The axis configuration in the generated file is Y-Forward, Z-Up. Check these settings if the orientation of the model\nis incorrect when importing the file into a 3D modelling program.</p>\n<p>Each type of object is defined with a corresponding material (i.e. all bike lanes have the same material, all sidewalks,\nand so on), making it easy to quickly set the desired material properties before rendering.</p>\n<h2>Documentation</h2>\n<p>API documentation can be found <a href=\"https://patmalcolm91.github.io/SumoNetVis/SumoNetVis.html\" rel=\"nofollow\">here</a></p>\n<h2>Contribution</h2>\n<p>Issues and pull requests are welcome.</p>\n\n          </div>"}, "last_serial": 7190346, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "493495119341f828152ad48edaf239cf", "sha256": "b87e31fc548b095fcb791d959933970e63af276c27ebfbc2b4ca2d8349813f8b"}, "downloads": -1, "filename": "SumoNetVis-1.0.0.tar.gz", "has_sig": false, "md5_digest": "493495119341f828152ad48edaf239cf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6779, "upload_time": "2019-11-20T22:59:57", "upload_time_iso_8601": "2019-11-20T22:59:57.791752Z", "url": "https://files.pythonhosted.org/packages/d3/48/a5de962da28efd162dc442a7f555e681504b278987ec22185473b4fd2b58/SumoNetVis-1.0.0.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "5d45384d5d819588ae1ed285e6b7fbc9", "sha256": "908439f410b9e16ae0e8cd833b0e9098d9055413e49c028edd4247611e92a153"}, "downloads": -1, "filename": "SumoNetVis-1.1.0.tar.gz", "has_sig": false, "md5_digest": "5d45384d5d819588ae1ed285e6b7fbc9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8495, "upload_time": "2019-11-27T13:51:56", "upload_time_iso_8601": "2019-11-27T13:51:56.662370Z", "url": "https://files.pythonhosted.org/packages/c7/95/090634a5a60eee0c7e34134091e60fe54710a66a7e451dcb809b19295940/SumoNetVis-1.1.0.tar.gz", "yanked": false}], "1.2.0": [{"comment_text": "", "digests": {"md5": "5c1d3b998ae4ff31260dcb7881d8ca78", "sha256": "33183d1e478a4026912b978d673bf6a7bdf758fef87d1fd2a49b204cd5904d3a"}, "downloads": -1, "filename": "SumoNetVis-1.2.0.tar.gz", "has_sig": false, "md5_digest": "5c1d3b998ae4ff31260dcb7881d8ca78", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10692, "upload_time": "2020-02-05T17:06:56", "upload_time_iso_8601": "2020-02-05T17:06:56.973414Z", "url": "https://files.pythonhosted.org/packages/5c/23/20dc321e628c8ffaa7eb9a3a5b6ff44baa8cc47f27a41d93eaf1b9017f6e/SumoNetVis-1.2.0.tar.gz", "yanked": false}], "1.3.0": [{"comment_text": "", "digests": {"md5": "4b1d10fca1f954db6327b63b5c28f53f", "sha256": "46d03a2640c5a44b064d1db74c000a1170d6f2cd4426957dbc96817bd0a67831"}, "downloads": -1, "filename": "SumoNetVis-1.3.0.tar.gz", "has_sig": false, "md5_digest": "4b1d10fca1f954db6327b63b5c28f53f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13994, "upload_time": "2020-02-20T21:35:17", "upload_time_iso_8601": "2020-02-20T21:35:17.572168Z", "url": "https://files.pythonhosted.org/packages/41/37/bdee455b75115dad0befff2b15b1dfd138491d00e5d0dcb8b0ed29185a7a/SumoNetVis-1.3.0.tar.gz", "yanked": false}], "1.3.1": [{"comment_text": "", "digests": {"md5": "ea8010eea67a9c72059a9c51de6ebcde", "sha256": "942a6a34aa480fbd7719e6443dc2cc6ddf66afa58d81d04c7df5c5c297db3862"}, "downloads": -1, "filename": "SumoNetVis-1.3.1.tar.gz", "has_sig": false, "md5_digest": "ea8010eea67a9c72059a9c51de6ebcde", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15072, "upload_time": "2020-03-26T17:08:53", "upload_time_iso_8601": "2020-03-26T17:08:53.168698Z", "url": "https://files.pythonhosted.org/packages/12/b8/df02f96533a0d59869b66fa3549d644c1427ed8d068b3e942c6870d6d6f9/SumoNetVis-1.3.1.tar.gz", "yanked": false}], "1.4.0": [{"comment_text": "", "digests": {"md5": "28b6ce025b87b8041aaeebab1181383d", "sha256": "69c0653a8a9f2888ebeb3862f4a32637f7003ca17dadb5ebb84b77401a66b544"}, "downloads": -1, "filename": "SumoNetVis-1.4.0.tar.gz", "has_sig": false, "md5_digest": "28b6ce025b87b8041aaeebab1181383d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22981, "upload_time": "2020-05-04T18:30:19", "upload_time_iso_8601": "2020-05-04T18:30:19.703468Z", "url": "https://files.pythonhosted.org/packages/52/46/64e9b240f39f03ffd2342740f4a71693bae5a5ba70751322f405ec704787/SumoNetVis-1.4.0.tar.gz", "yanked": false}], "1.4.1": [{"comment_text": "", "digests": {"md5": "471b57ace2b5b1d59621b993c2f4a4ae", "sha256": "c59d646cfc9e24caaf21c040c9c60f79df2addacd6639955f005f918ac28731f"}, "downloads": -1, "filename": "SumoNetVis-1.4.1.tar.gz", "has_sig": false, "md5_digest": "471b57ace2b5b1d59621b993c2f4a4ae", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23010, "upload_time": "2020-05-07T17:23:43", "upload_time_iso_8601": "2020-05-07T17:23:43.757149Z", "url": "https://files.pythonhosted.org/packages/70/8d/1dde1b70867d9fad6410e2d5019d4821dac5b91a0f47ef7c6ceaaef002ad/SumoNetVis-1.4.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "471b57ace2b5b1d59621b993c2f4a4ae", "sha256": "c59d646cfc9e24caaf21c040c9c60f79df2addacd6639955f005f918ac28731f"}, "downloads": -1, "filename": "SumoNetVis-1.4.1.tar.gz", "has_sig": false, "md5_digest": "471b57ace2b5b1d59621b993c2f4a4ae", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23010, "upload_time": "2020-05-07T17:23:43", "upload_time_iso_8601": "2020-05-07T17:23:43.757149Z", "url": "https://files.pythonhosted.org/packages/70/8d/1dde1b70867d9fad6410e2d5019d4821dac5b91a0f47ef7c6ceaaef002ad/SumoNetVis-1.4.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:00:24 2020"}