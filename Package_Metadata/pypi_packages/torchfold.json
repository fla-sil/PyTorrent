{"info": {"author": "Illia Polosukhin, NEAR Inc", "author_email": "illia@near.ai", "bugtrack_url": null, "classifiers": [], "description": "# TorchFold\n\nBlog post: http://near.ai/articles/2017-09-06-PyTorch-Dynamic-Batching/\n\nAnalogous to [TensorFlow Fold](https://github.com/tensorflow/fold), implements dynamic batching with super simple interface.\nReplace every direct call in your computation to nn module with `f.add('function name', arguments)`.\nIt will construct an optimized version of computation and on `f.apply` will dynamically batch and execute the computation on given nn module.\n\n## Installation\nWe recommend using pip package manager:\n```\npip install torchfold\n```\n\n## Example\n\n```\n    f = torchfold.Fold()\n\n    def dfs(node):\n        if is_leaf(node):\n            return f.add('leaf', node)\n        else:\n            prev = f.add('init')\n            for child in children(node):\n                prev = f.add('child', prev, child)\n            return prev\n\n    class Model(nn.Module):\n        def __init__(self, ...):\n            ...\n\n        def leaf(self, leaf):\n            ...\n\n        def child(self, prev, child):\n            ...\n\n    res = dfs(my_tree)\n    model = Model(...)\n    f.apply(model, [[res]])\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "", "license": "Apache License, Version 2.0", "maintainer": "", "maintainer_email": "", "name": "torchfold", "package_url": "https://pypi.org/project/torchfold/", "platform": "", "project_url": "https://pypi.org/project/torchfold/", "project_urls": {"Blog Post": "http://near.ai/articles/2017-09-06-PyTorch-Dynamic-Batching/", "Source": "https://github.com/nearai/torchfold"}, "release_url": "https://pypi.org/project/torchfold/0.1.0/", "requires_dist": null, "requires_python": "", "summary": "Dynamic Batching with PyTorch", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>TorchFold</h1>\n<p>Blog post: <a href=\"http://near.ai/articles/2017-09-06-PyTorch-Dynamic-Batching/\" rel=\"nofollow\">http://near.ai/articles/2017-09-06-PyTorch-Dynamic-Batching/</a></p>\n<p>Analogous to <a href=\"https://github.com/tensorflow/fold\" rel=\"nofollow\">TensorFlow Fold</a>, implements dynamic batching with super simple interface.\nReplace every direct call in your computation to nn module with <code>f.add('function name', arguments)</code>.\nIt will construct an optimized version of computation and on <code>f.apply</code> will dynamically batch and execute the computation on given nn module.</p>\n<h2>Installation</h2>\n<p>We recommend using pip package manager:</p>\n<pre><code>pip install torchfold\n</code></pre>\n<h2>Example</h2>\n<pre><code>    f = torchfold.Fold()\n\n    def dfs(node):\n        if is_leaf(node):\n            return f.add('leaf', node)\n        else:\n            prev = f.add('init')\n            for child in children(node):\n                prev = f.add('child', prev, child)\n            return prev\n\n    class Model(nn.Module):\n        def __init__(self, ...):\n            ...\n\n        def leaf(self, leaf):\n            ...\n\n        def child(self, prev, child):\n            ...\n\n    res = dfs(my_tree)\n    model = Model(...)\n    f.apply(model, [[res]])\n</code></pre>\n\n          </div>"}, "last_serial": 3940981, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "7777910c57b940a96f0c591a90c1ca71", "sha256": "53721bbf32b61119f596b23d44061503497d5eb6fa67a3c1c82ba008842b3c26"}, "downloads": -1, "filename": "torchfold-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "7777910c57b940a96f0c591a90c1ca71", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5352, "upload_time": "2018-06-07T20:34:11", "upload_time_iso_8601": "2018-06-07T20:34:11.491071Z", "url": "https://files.pythonhosted.org/packages/c0/fb/2ff01af27b6fbe147a16be0e3f78007a3d03224d89ebcfa2441d838398bc/torchfold-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3ec270cac4e5f7b5219a5495d07b9a83", "sha256": "73605bdbbaa627735bb28c3f90d654896de248fa1a988e730182b68ddf4660a6"}, "downloads": -1, "filename": "torchfold-0.1.0.tar.gz", "has_sig": false, "md5_digest": "3ec270cac4e5f7b5219a5495d07b9a83", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4703, "upload_time": "2018-06-07T20:34:12", "upload_time_iso_8601": "2018-06-07T20:34:12.703972Z", "url": "https://files.pythonhosted.org/packages/12/80/4c88fea850af25cb66e5d07eff3b38411eaa09f94c5a3c4370a7316a9234/torchfold-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "7777910c57b940a96f0c591a90c1ca71", "sha256": "53721bbf32b61119f596b23d44061503497d5eb6fa67a3c1c82ba008842b3c26"}, "downloads": -1, "filename": "torchfold-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "7777910c57b940a96f0c591a90c1ca71", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5352, "upload_time": "2018-06-07T20:34:11", "upload_time_iso_8601": "2018-06-07T20:34:11.491071Z", "url": "https://files.pythonhosted.org/packages/c0/fb/2ff01af27b6fbe147a16be0e3f78007a3d03224d89ebcfa2441d838398bc/torchfold-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3ec270cac4e5f7b5219a5495d07b9a83", "sha256": "73605bdbbaa627735bb28c3f90d654896de248fa1a988e730182b68ddf4660a6"}, "downloads": -1, "filename": "torchfold-0.1.0.tar.gz", "has_sig": false, "md5_digest": "3ec270cac4e5f7b5219a5495d07b9a83", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4703, "upload_time": "2018-06-07T20:34:12", "upload_time_iso_8601": "2018-06-07T20:34:12.703972Z", "url": "https://files.pythonhosted.org/packages/12/80/4c88fea850af25cb66e5d07eff3b38411eaa09f94c5a3c4370a7316a9234/torchfold-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:50:30 2020"}