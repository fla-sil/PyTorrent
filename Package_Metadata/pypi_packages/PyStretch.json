{"info": {"author": "Jay Laura", "author_email": "jlaura@asu.edu", "bugtrack_url": null, "classifiers": [], "description": ".. contents::\n\n=================\nPyStretch\n=================\n\n\nPyStretch provides a python based image manipulation tool which is able to\nhandle images which are larger than a systems available RAM. This tools was\ndesigned to support planetary cartographic images and leverages the Geospatial\nData Abstraction Library (GDAL) to handle projection, transformation, and\ngeoreferencing information, as well as available supported data formats and\nimage arrays.\n\nFor more detailed documentation, with images, examples, etc, check out\nhttp://packages.python.org/PyStretch.\n\nIntroduction \n------------\n\nThe package author's goal is to provide an image processing toolset which allows\nfor persistent manipulation and analysis of large, spatially enabled raster\ndatasets, on machines which are traditionally RAM constrained. The RAM\nconstraint can be imposed either by a lack of memory or by the size of the\nraster for analysis. Additionally, this package allows for the systematic\nremoval spatially definable camera error.\n\nWhat about bugs or feature requests? \n------------------------------------\n\nWith any initial release, bugs are undoubtably present. To report a bug or\nrequest a feature, open a ticket at http://github.com/jlaura/PyStretch\n\nThe code can also be cloned and forked via git, if you are a github user.\n\n\nGetting started immediately - a super brief overview\n----------------------------------------------------\n\nThis package is intended to be run primarily from the pystretch.py script\nlocated in Python##/bin/. Ideally this directory is already added to your Path\nof your PYTHONPATH. If not, you either need to run the script from the bin\ndirectory or add that directroy to your PATH.\n\nFor help use:\n\n    python pystretch.py --help\n\nTypical usage often looks like this:\n\n    python pystretch.py <stretch> <optional segmentation> <input> <optional\n    output>\n\nor\n\n    python pystretch.py -l -t 5 input.tif -o output_image.tif\n\nThe code above performs a linear stretch <-l> by segmenting the image into 5\nhorizontal sections <-t 5> and writes to the output <output_image.tif>.\n\nNote that segmenting the image into 5 pieces will likely result in 6 total\nsections as the image is subdivided into 5 sections of equal size and one\n'remainder' section.\n\nFor a much more in depth look at the functionality checkout:\nhttp://packages.python.org/PyStretch\n\nPyStretch Test \n==============\n\nAs a means to both test the functionality of the script and show the results of\nthe different processing techniques users are encouraged to select a sample\nimage and run it through pystretch_test.py. This script takes a subsection of\nthe input image and processes it with all of the available processing techniques\nso that users can see some of the most common parameters. For example, the\nstandard deviation stretch is performed with sigma (n) values between 0\n(essentially a binary image with the threshold at the mean) and 3 (~98% of the\nhistogram maintained).\n\nTo run this test to both validate the input and assess the functionality of the\nscript use:\n\n    python pystretch_test.py -srcwin xorigin yorigin width height input_image\n\nFor example:\n\n    python pystretch_test.py -srcwin 0 0 250 250 myimage.jp2\n\nIf you do not know the pixel offset that you wish to test at, but do know the\ngeographic coordinates you can use:\n\n    python pystretch_test.py -projwin ulx uly lrx lry input_image\n\nKnown Issues \n--------------\n\n1. When reading against the intrinsic image block size rad and write times are\nquite long due to thrashing. This is a known issue with the way in which GDAL\nRasterIO works. It is therefore suggested that images be read in either the\nblock size or multiples of the block size.\n\nFor example, the block size on a GTiff is most often one scanline. Therefore,\nusing horizontal segments will read in multiples of the scanline and avoid Band\nThrashing. Reading the same image in the vertical direction can increase\nprocessing time threefold.\n\n2. The numpy implementation of ndarray.std(), which calculates the standard\ndeviation, creates an in memory copy of the array. Be aware of this when\ndeciding on image segmentation size. The standard deviation of the image or\nimage segment is only calculated when performing a standard deviation or\ngaussian stretch. In all other cases this calculation is omitted.\n\nAccessing classes via imports \n----------------------------------- \nIt is hoped that this package will provide a number of tools to leverage the segmentation and\nimage analysis algorithms in your own work. For this reason the majority of the\nfunctionality is importable.\n\nImports are intentionally left explicit. That is to say that the following will not work\n\n    import \\* \n    from pystretch.core import \\* will not work.\n\nInstead explicitly import the modules you want to use\n\n    from pystretch.core import ArrayConvert \n    from pystretch.linear import Linear\n    from pystretch.plot import Plot", "description_content_type": null, "docs_url": "https://pythonhosted.org/PyStretch/", "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://pypi.python.org/pypi/PyStretch/", "keywords": null, "license": "LICENSE.txt", "maintainer": null, "maintainer_email": null, "name": "PyStretch", "package_url": "https://pypi.org/project/PyStretch/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/PyStretch/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://pypi.python.org/pypi/PyStretch/"}, "release_url": "https://pypi.org/project/PyStretch/0.2.1/", "requires_dist": null, "requires_python": null, "summary": "Python image analysis and manipulation", "version": "0.2.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"contents\">\n<p>Contents</p>\n<ul>\n<li><a href=\"#pystretch\" id=\"id1\" rel=\"nofollow\">PyStretch</a><ul>\n<li><a href=\"#introduction\" id=\"id2\" rel=\"nofollow\">Introduction</a></li>\n<li><a href=\"#what-about-bugs-or-feature-requests\" id=\"id3\" rel=\"nofollow\">What about bugs or feature requests?</a></li>\n<li><a href=\"#getting-started-immediately-a-super-brief-overview\" id=\"id4\" rel=\"nofollow\">Getting started immediately - a super brief overview</a><ul>\n<li><a href=\"#pystretch-test\" id=\"id5\" rel=\"nofollow\">PyStretch Test</a></li>\n</ul>\n</li>\n<li><a href=\"#known-issues\" id=\"id6\" rel=\"nofollow\">Known Issues</a></li>\n<li><a href=\"#accessing-classes-via-imports\" id=\"id7\" rel=\"nofollow\">Accessing classes via imports</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<div id=\"pystretch\">\n<h2><a href=\"#id1\" rel=\"nofollow\">PyStretch</a></h2>\n<p>PyStretch provides a python based image manipulation tool which is able to\nhandle images which are larger than a systems available RAM. This tools was\ndesigned to support planetary cartographic images and leverages the Geospatial\nData Abstraction Library (GDAL) to handle projection, transformation, and\ngeoreferencing information, as well as available supported data formats and\nimage arrays.</p>\n<p>For more detailed documentation, with images, examples, etc, check out\n<a href=\"http://packages.python.org/PyStretch\" rel=\"nofollow\">http://packages.python.org/PyStretch</a>.</p>\n<div id=\"introduction\">\n<h3><a href=\"#id2\" rel=\"nofollow\">Introduction</a></h3>\n<p>The package author\u2019s goal is to provide an image processing toolset which allows\nfor persistent manipulation and analysis of large, spatially enabled raster\ndatasets, on machines which are traditionally RAM constrained. The RAM\nconstraint can be imposed either by a lack of memory or by the size of the\nraster for analysis. Additionally, this package allows for the systematic\nremoval spatially definable camera error.</p>\n</div>\n<div id=\"what-about-bugs-or-feature-requests\">\n<h3><a href=\"#id3\" rel=\"nofollow\">What about bugs or feature requests?</a></h3>\n<p>With any initial release, bugs are undoubtably present. To report a bug or\nrequest a feature, open a ticket at <a href=\"http://github.com/jlaura/PyStretch\" rel=\"nofollow\">http://github.com/jlaura/PyStretch</a></p>\n<p>The code can also be cloned and forked via git, if you are a github user.</p>\n</div>\n<div id=\"getting-started-immediately-a-super-brief-overview\">\n<h3><a href=\"#id4\" rel=\"nofollow\">Getting started immediately - a super brief overview</a></h3>\n<p>This package is intended to be run primarily from the pystretch.py script\nlocated in Python##/bin/. Ideally this directory is already added to your Path\nof your PYTHONPATH. If not, you either need to run the script from the bin\ndirectory or add that directroy to your PATH.</p>\n<p>For help use:</p>\n<blockquote>\npython pystretch.py \u2013help</blockquote>\n<p>Typical usage often looks like this:</p>\n<blockquote>\npython pystretch.py &lt;stretch&gt; &lt;optional segmentation&gt; &lt;input&gt; &lt;optional\noutput&gt;</blockquote>\n<p>or</p>\n<blockquote>\npython pystretch.py -l -t 5 input.tif -o output_image.tif</blockquote>\n<p>The code above performs a linear stretch &lt;-l&gt; by segmenting the image into 5\nhorizontal sections &lt;-t 5&gt; and writes to the output &lt;output_image.tif&gt;.</p>\n<p>Note that segmenting the image into 5 pieces will likely result in 6 total\nsections as the image is subdivided into 5 sections of equal size and one\n\u2018remainder\u2019 section.</p>\n<p>For a much more in depth look at the functionality checkout:\n<a href=\"http://packages.python.org/PyStretch\" rel=\"nofollow\">http://packages.python.org/PyStretch</a></p>\n<div id=\"pystretch-test\">\n<h4><a href=\"#id5\" rel=\"nofollow\">PyStretch Test</a></h4>\n<p>As a means to both test the functionality of the script and show the results of\nthe different processing techniques users are encouraged to select a sample\nimage and run it through pystretch_test.py. This script takes a subsection of\nthe input image and processes it with all of the available processing techniques\nso that users can see some of the most common parameters. For example, the\nstandard deviation stretch is performed with sigma (n) values between 0\n(essentially a binary image with the threshold at the mean) and 3 (~98% of the\nhistogram maintained).</p>\n<p>To run this test to both validate the input and assess the functionality of the\nscript use:</p>\n<blockquote>\npython pystretch_test.py -srcwin xorigin yorigin width height input_image</blockquote>\n<p>For example:</p>\n<blockquote>\npython pystretch_test.py -srcwin 0 0 250 250 myimage.jp2</blockquote>\n<p>If you do not know the pixel offset that you wish to test at, but do know the\ngeographic coordinates you can use:</p>\n<blockquote>\npython pystretch_test.py -projwin ulx uly lrx lry input_image</blockquote>\n</div>\n</div>\n<div id=\"known-issues\">\n<h3><a href=\"#id6\" rel=\"nofollow\">Known Issues</a></h3>\n<p>1. When reading against the intrinsic image block size rad and write times are\nquite long due to thrashing. This is a known issue with the way in which GDAL\nRasterIO works. It is therefore suggested that images be read in either the\nblock size or multiples of the block size.</p>\n<p>For example, the block size on a GTiff is most often one scanline. Therefore,\nusing horizontal segments will read in multiples of the scanline and avoid Band\nThrashing. Reading the same image in the vertical direction can increase\nprocessing time threefold.</p>\n<p>2. The numpy implementation of ndarray.std(), which calculates the standard\ndeviation, creates an in memory copy of the array. Be aware of this when\ndeciding on image segmentation size. The standard deviation of the image or\nimage segment is only calculated when performing a standard deviation or\ngaussian stretch. In all other cases this calculation is omitted.</p>\n</div>\n<div id=\"accessing-classes-via-imports\">\n<h3><a href=\"#id7\" rel=\"nofollow\">Accessing classes via imports</a></h3>\n<p>It is hoped that this package will provide a number of tools to leverage the segmentation and\nimage analysis algorithms in your own work. For this reason the majority of the\nfunctionality is importable.</p>\n<p>Imports are intentionally left explicit. That is to say that the following will not work</p>\n<blockquote>\nimport *\nfrom pystretch.core import * will not work.</blockquote>\n<p>Instead explicitly import the modules you want to use</p>\n<blockquote>\nfrom pystretch.core import ArrayConvert\nfrom pystretch.linear import Linear\nfrom pystretch.plot import Plot</blockquote>\n</div>\n</div>\n\n          </div>"}, "last_serial": 785376, "releases": {"0.1.1": [{"comment_text": "", "digests": {"md5": "1c96edce8bd98d3645dd865c512f6331", "sha256": "c06b5aeaa15d7f3ea2b41d4c3b5fae33758c69cab492aa9df7db63d3d44678f4"}, "downloads": -1, "filename": "PyStretch-0.1.1.tar.gz", "has_sig": false, "md5_digest": "1c96edce8bd98d3645dd865c512f6331", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14230, "upload_time": "2012-08-16T00:17:22", "upload_time_iso_8601": "2012-08-16T00:17:22.284505Z", "url": "https://files.pythonhosted.org/packages/ca/b9/71b56e6a881b3554892ad9dc0c4de7494c3f20882f2a2cfc9a579a31bd0d/PyStretch-0.1.1.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "014126091b94180a6278821216332f8c", "sha256": "a12113b8512c3f17a1565aa255a25e205e4e9383025fa621daec4be462bc41ad"}, "downloads": -1, "filename": "PyStretch-0.1.1.win32.exe", "has_sig": false, "md5_digest": "014126091b94180a6278821216332f8c", "packagetype": "bdist_wininst", "python_version": "any", "requires_python": null, "size": 217046, "upload_time": "2012-08-20T17:39:13", "upload_time_iso_8601": "2012-08-20T17:39:13.154390Z", "url": "https://files.pythonhosted.org/packages/58/12/916c59185a5dfb34e8bbb54055e6d38114a4634a8f623e0e0b1c930ac763/PyStretch-0.1.1.win32.exe", "yanked": false}, {"comment_text": "", "digests": {"md5": "3ce9cc7bacefa6a9e85d25be388533b9", "sha256": "f4f172e26f838ee7126e872e5debb51cc5f372ce42f5a06797f590737b7c3d46"}, "downloads": -1, "filename": "PyStretch-0.1.1.win-amd64.exe", "has_sig": false, "md5_digest": "3ce9cc7bacefa6a9e85d25be388533b9", "packagetype": "bdist_wininst", "python_version": "any", "requires_python": null, "size": 244701, "upload_time": "2012-08-20T18:08:09", "upload_time_iso_8601": "2012-08-20T18:08:09.294528Z", "url": "https://files.pythonhosted.org/packages/47/99/06b94c6aad9b82f65fa2c2a9d85801b7fabd981624d736056a1a70d52aec/PyStretch-0.1.1.win-amd64.exe", "yanked": false}], "0.1.2": [{"comment_text": "built for Darwin-10.8.0", "digests": {"md5": "6114a73d4bb0a3d5a2aa9a29fe18deab", "sha256": "8e4355964ff5a3a544fa13c994310d94fbde319106361ac33912bd81332e6ae2"}, "downloads": -1, "filename": "PyStretch-0.1.2.macosx-10.6-intel.tar.gz", "has_sig": false, "md5_digest": "6114a73d4bb0a3d5a2aa9a29fe18deab", "packagetype": "bdist_dumb", "python_version": "any", "requires_python": null, "size": 24654, "upload_time": "2012-09-05T00:24:29", "upload_time_iso_8601": "2012-09-05T00:24:29.589136Z", "url": "https://files.pythonhosted.org/packages/76/f8/e73280b7f46708827f0398ce4aa43ceb076e76cffdb773c61e8e94761788/PyStretch-0.1.2.macosx-10.6-intel.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "9eb3a71609f40bffcb015e05582fadc9", "sha256": "a4a867ff7f4fc8989ee207363a7a1f5b7009ede66ada4b93cd28ec5579f3e37e"}, "downloads": -1, "filename": "PyStretch-0.1.2.tar.gz", "has_sig": false, "md5_digest": "9eb3a71609f40bffcb015e05582fadc9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15689, "upload_time": "2012-08-22T21:10:59", "upload_time_iso_8601": "2012-08-22T21:10:59.616955Z", "url": "https://files.pythonhosted.org/packages/87/d8/7d120282c05b2efd552480301c0300294347937bdee6ed3c0e7a252343c2/PyStretch-0.1.2.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "f9743a5ddd49cb1b147310df959a97a9", "sha256": "945e951dd5cfec139aa00c524f0d1c10e258aab49be0e70aecf4b483960398bc"}, "downloads": -1, "filename": "PyStretch-0.1.2.win32.exe", "has_sig": false, "md5_digest": "f9743a5ddd49cb1b147310df959a97a9", "packagetype": "bdist_wininst", "python_version": "any", "requires_python": null, "size": 219142, "upload_time": "2012-08-22T21:12:32", "upload_time_iso_8601": "2012-08-22T21:12:32.915989Z", "url": "https://files.pythonhosted.org/packages/9d/49/05c9d7018b0dd73a17c292f60dad4b6746bac68ce23f231ffba35c18a8ce/PyStretch-0.1.2.win32.exe", "yanked": false}, {"comment_text": "", "digests": {"md5": "1c89cf36d4066144659ed15f25556d82", "sha256": "4422d70c542460bad62ed3d805694c98d0bf84fa2facd7e3eaf53fca009cbad5"}, "downloads": -1, "filename": "PyStretch-0.1.2.win-amd64.exe", "has_sig": false, "md5_digest": "1c89cf36d4066144659ed15f25556d82", "packagetype": "bdist_wininst", "python_version": "any", "requires_python": null, "size": 246790, "upload_time": "2012-08-22T21:12:06", "upload_time_iso_8601": "2012-08-22T21:12:06.944098Z", "url": "https://files.pythonhosted.org/packages/9e/8b/78fd1026145e7c1fd1f9e8f5876a4d6619fbd50efb23925b77c2a7fa5cd7/PyStretch-0.1.2.win-amd64.exe", "yanked": false}], "0.1.3": [{"comment_text": "built for Darwin-10.8.0", "digests": {"md5": "a3931640cf969057b2d5ea7f37f1ccfc", "sha256": "b846ca056c395478374f38123119316aac34d63b0abeaec395816b12f692c694"}, "downloads": -1, "filename": "PyStretch-0.1.3.macosx-10.6-intel.tar.gz", "has_sig": false, "md5_digest": "a3931640cf969057b2d5ea7f37f1ccfc", "packagetype": "bdist_dumb", "python_version": "any", "requires_python": null, "size": 24661, "upload_time": "2012-09-05T00:25:14", "upload_time_iso_8601": "2012-09-05T00:25:14.451412Z", "url": "https://files.pythonhosted.org/packages/9f/b9/c481080b146c1de0c5a0a6e9fe8a3da9b99c20102b3ed255e9bb2e5de1fb/PyStretch-0.1.3.macosx-10.6-intel.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "ada701ee75eb3b61e6d436f2c3431d27", "sha256": "c0547baa90b98b3e1fc42af0b3a2646a4a0d35d067cb2ca3fbe04273844320c7"}, "downloads": -1, "filename": "PyStretch-0.1.3.tar.gz", "has_sig": false, "md5_digest": "ada701ee75eb3b61e6d436f2c3431d27", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16394, "upload_time": "2012-09-05T00:25:13", "upload_time_iso_8601": "2012-09-05T00:25:13.245842Z", "url": "https://files.pythonhosted.org/packages/62/b9/fe4227fcf8ee6f270749ca875f8f18b34d7973297a7b220bfe58536ff41d/PyStretch-0.1.3.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "c7f7802b69a50380bc978aebaf331019", "sha256": "3b8123252b5622a8ca7902d8704269af8fb62b30e09bbcf4c41ccba04d44ba94"}, "downloads": -1, "filename": "PyStretch-0.2.tar.gz", "has_sig": false, "md5_digest": "c7f7802b69a50380bc978aebaf331019", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16307, "upload_time": "2013-02-04T16:37:12", "upload_time_iso_8601": "2013-02-04T16:37:12.152232Z", "url": "https://files.pythonhosted.org/packages/7e/44/d28663a73cd1568d4dfca6f558ba0c8d7e583e618a1c091bf000eabfe507/PyStretch-0.2.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "ff349b79b458b02c5f05391cda0cf45e", "sha256": "93f9d85108e70f46e6898d843569bdc06d2735121f61e40d485ab220b6e93675"}, "downloads": -1, "filename": "PyStretch-0.2.1.tar.gz", "has_sig": false, "md5_digest": "ff349b79b458b02c5f05391cda0cf45e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17712, "upload_time": "2013-02-04T19:02:57", "upload_time_iso_8601": "2013-02-04T19:02:57.681802Z", "url": "https://files.pythonhosted.org/packages/1b/a6/e4c053c0d4f29635bf8fd2aa8d25b48e4e402ccf62a4aaadadb243f1a037/PyStretch-0.2.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ff349b79b458b02c5f05391cda0cf45e", "sha256": "93f9d85108e70f46e6898d843569bdc06d2735121f61e40d485ab220b6e93675"}, "downloads": -1, "filename": "PyStretch-0.2.1.tar.gz", "has_sig": false, "md5_digest": "ff349b79b458b02c5f05391cda0cf45e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17712, "upload_time": "2013-02-04T19:02:57", "upload_time_iso_8601": "2013-02-04T19:02:57.681802Z", "url": "https://files.pythonhosted.org/packages/1b/a6/e4c053c0d4f29635bf8fd2aa8d25b48e4e402ccf62a4aaadadb243f1a037/PyStretch-0.2.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:55:53 2020"}