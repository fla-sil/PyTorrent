{"info": {"author": "K Raghu Prasad", "author_email": "raghuprasad-:-at-:-yahoo-:-dot-:-com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta"], "description": "PyBackend is a relational database backed object development framework written\r\nin python and released under GNU Library General Public License. It allows\r\nobject persistence through a relational database backend. You need not write SQL\r\nqueries within your class to store or retrieve object-attributes. If your data\r\nmodel allows you to think attributes of your objects as columns of certain\r\ntables in your backend database, then PyBackend is for you.\r\n\r\nPyBackend provides following functionalities:\r\n\r\n    *  It can store (as well as retrieve) attributes of objects in (from) a\r\nrelational database supporting atomic transactions.\r\n    * It allows you to map individual classes to corresponding databases. Hence\r\nan application can use multiple databases to populate its objects; all\r\ntransparent to the application programmer.\r\n    * It stores all information pertaining to the classes, attributes,\r\ndatabases, database authentication and number of connections per database etc.\r\nin a single text based configuration file.\r\n    * It frees the application programmer from the task of creating and managing\r\ndatabase connections. It creates such connections on demand. Maximum number of\r\ndatabase connections for each database can be specified as a configuration option.\r\n    * If your class interact with the database in more complex ways, you can\r\nexecute your queries directly too. In this case you need not manage any database\r\nconnections at all. You will get a handle to the correct database to which your\r\nclass is mapped.\r\n    * It can ensure atomic transactions even over multiple discrete operations;\r\nlike over multiple HTTP/XMLRPC requests. Though not used in normal object\r\nmanagement, this feature can be quite handy when you want to reserve a database\r\nconnection exclusively for a particular use, even in a multi threaded application.", "description_content_type": null, "docs_url": null, "download_url": "http://sourceforge.net/project/showfiles.php?group_id=66457&release_id=150845", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://pybackend.sourceforge.net", "keywords": "database, rdbms, persistence, persistent, framework, pybackend, backend, objstore, object store, object storage, persistent object", "license": "GNU LGPL", "maintainer": "K Raghu Prasad", "maintainer_email": "raghuprasad-:-at-:-yahoo-:-dot-:-com", "name": "PyBackend", "package_url": "https://pypi.org/project/PyBackend/", "platform": "Linux, *BSD, POSIX, Windows-*", "project_url": "https://pypi.org/project/PyBackend/", "project_urls": {"Download": "http://sourceforge.net/project/showfiles.php?group_id=66457&release_id=150845", "Homepage": "http://pybackend.sourceforge.net"}, "release_url": "https://pypi.org/project/PyBackend/0.1/", "requires_dist": null, "requires_python": null, "summary": "An RDBMS backed object development framework", "version": "0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            PyBackend is a relational database backed object development framework written\n<br>in python and released under GNU Library General Public License. It allows\n<br>object persistence through a relational database backend. You need not write SQL\n<br>queries within your class to store or retrieve object-attributes. If your data\n<br>model allows you to think attributes of your objects as columns of certain\n<br>tables in your backend database, then PyBackend is for you.\n<br>\n<br>PyBackend provides following functionalities:\n<br>\n<br>    *  It can store (as well as retrieve) attributes of objects in (from) a\n<br>relational database supporting atomic transactions.\n<br>    * It allows you to map individual classes to corresponding databases. Hence\n<br>an application can use multiple databases to populate its objects; all\n<br>transparent to the application programmer.\n<br>    * It stores all information pertaining to the classes, attributes,\n<br>databases, database authentication and number of connections per database etc.\n<br>in a single text based configuration file.\n<br>    * It frees the application programmer from the task of creating and managing\n<br>database connections. It creates such connections on demand. Maximum number of\n<br>database connections for each database can be specified as a configuration option.\n<br>    * If your class interact with the database in more complex ways, you can\n<br>execute your queries directly too. In this case you need not manage any database\n<br>connections at all. You will get a handle to the correct database to which your\n<br>class is mapped.\n<br>    * It can ensure atomic transactions even over multiple discrete operations;\n<br>like over multiple HTTP/XMLRPC requests. Though not used in normal object\n<br>management, this feature can be quite handy when you want to reserve a database\n<br>connection exclusively for a particular use, even in a multi threaded application.\n          </div>"}, "last_serial": 1322, "releases": {"0.1": []}, "urls": [], "timestamp": "Fri May  8 03:09:28 2020"}