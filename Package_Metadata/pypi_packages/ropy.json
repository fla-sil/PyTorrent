{"info": {"author": "Jesse Haviland", "author_email": "", "bugtrack_url": null, "classifiers": [], "description": "# ropy\nA robotics library for Python\n\n**Used in**\n\nJ. Haviland and P. Corke, \"Maximising  manipulability  during  resolved-rate  motion control,\" _arXiv preprint arXiv:2002.11901_, 2020.\n[[arxiv](https://arxiv.org/abs/2002.11901)] [[project website](https://jhavl.github.io/mmc)] [[video](https://youtu.be/zBGLPoPNZ10)]\n\n\n## Installing\n\nRequires Python \u2265 3.2. See [ropy-2.7](https://github.com/jhavl/ropy/tree/ropy-2.7) branch for Python 2.7 support.\n\n```shell script\ngit clone https://github.com/jhavl/ropy.git\ncd ropy\npip3 install -e .\n```\n\n## Usage\n\n### Arm-Type Robots\n\n```python\nimport ropy as rp\nimport numpy as np\n\n# Initialise a Franka-Emika Panda robot\npanda = rp.Panda()\n\n# Set the joint angles of the robot\nq0 = np.array([0,0,-1.2,0,0,-2,0])\npanda.q = q0\n\n# Calculate the Kinematic Jacobian (in the world frame) at joint angles q0\npanda.J0\n# or\npanda.jacob0(q0)\n\n# Calculate the forward kinematics of the robot at joint angles q0\npanda.T\n# or\npanda.fkine(q0)\n\n# Calculate the manipulability of the robot at joint angles q0\npanda.m\n# or\npanda.manip(q0)\n\n# Calculate the Kinematic Hessian (in the world frame) at joint angles q0\npanda.H0\n# or\npanda.hessian0(q0)\n\n# Print the Elementary Transform Sequence (ETS) of the robot\nprint(panda.ets)\n\n```\n\n### Manipulability Motion Control Example\nThis example implements Manipulability Motion Control from [this paper](https://arxiv.org/abs/2002.11901) within a position-based servoing scheme. We use the library [qpsolvers](https://pypi.org/project/qpsolvers/) to solve the optimisation function. However, you can use whichever solver you wish.\n\n```python\nimport ropy as rp\nimport numpy as np\nimport qpsolvers as qp\n\n# Initialise a Franka-Emika Panda Robot\npanda = rp.Panda()\n\n# The current joint angles of the Panda\n# You need to obtain these from however you interfave with your robot\n# eg. ROS messages, PyRep etc.\npanda.q = np.array([0, -3, 0, -2.3, 0, 2, 0])\n\n# The current pose of the robot\nwTe = panda.T\n\n# The desired pose of the robot\n# = Current pose offset 20cm in the x-axis\nwTep = np.copy(wTe)\nwTep[0,3] += 0.2\n\n# Gain term (lambda) for control minimisation\nY = 0.005\n\n# Quadratic component of objective function\nQ = Y * np.eye(7)\n\narrived = False\nwhile not arrived:\n\n    # The current joint angles of the Panda\n    # You need to obtain these from however you interfave with your robot\n    # eg. ROS messages, PyRep etc.\n    panda.q = np.array([0, -3, 0, -2.3, 0, 2, 0])\n\n    # The desired end-effecor spatial velocity\n    v, arrived = rp.p_servo(wTe, wTep)\n\n    # Form the equality constraints\n    # The kinematic Jacobian in the end-effecor frame\n    Aeq = panda.Je\n    beq = v.reshape((6,))\n\n    # Linear component of objective function: the manipulability Jacobian\n    c = -panda.Jm.reshape((7,))\n\n    # Solve for the joint velocities dq\n    dq = qp.solve_qp(Q, c, None, None, Aeq, beq)\n\n    # Send the joint velocities to the robot\n    # eg. ROS messages, PyRep etc.\n```\n\n### Resolved-Rate Motion Control Example\nThis example implements resolved-rate motion control within a position-based servoing scheme\n\n```python\nimport ropy as rp\nimport numpy as np\n\n# Initialise a Franka-Emika Panda Robot\npanda = rp.Panda()\n\n# The current joint angles of the Panda\n# You need to obtain these from however you interfave with your robot\n# eg. ROS messages, PyRep etc.\npanda.q = np.array([0, -3, 0, -2.3, 0, 2, 0])\n\n# The current pose of the robot\nwTe = panda.T\n\n# The desired pose of the robot\n# = Current pose offset 20cm in the x-axis\nwTep = np.copy(wTe)\nwTep[0,3] += 0.2\n\narrived = False\nwhile not arrived:\n\n    # The current joint angles of the Panda\n    # You need to obtain these from however you interfave with your robot\n    # eg. ROS messages, PyRep etc.\n    panda.q = np.array([0, -3, 0, -2.3, 0, 2, 0])\n\n    # The desired end-effecor spatial velocity\n    v, arrived = rp.p_servo(wTe, wTep)\n\n    # Solve for the joint velocities dq\n    # Perfrom the pseudoinverse of the manipulator Jacobian in the end-effector frame\n    dq = np.linalg.pinv(panda.Je) @ v\n\n    # Send the joint velocities to the robot\n    # eg. ROS messages, PyRep etc.\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/jhavl/ropy", "keywords": "robotics vision arm kinematics ros", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "ropy", "package_url": "https://pypi.org/project/ropy/", "platform": "", "project_url": "https://pypi.org/project/ropy/", "project_urls": {"Homepage": "https://github.com/jhavl/ropy"}, "release_url": "https://pypi.org/project/ropy/0.2.1/", "requires_dist": ["numpy", "transforms3d"], "requires_python": ">=3.2", "summary": "A Python library for robot control", "version": "0.2.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>ropy</h1>\n<p>A robotics library for Python</p>\n<p><strong>Used in</strong></p>\n<p>J. Haviland and P. Corke, \"Maximising  manipulability  during  resolved-rate  motion control,\" <em>arXiv preprint arXiv:2002.11901</em>, 2020.\n[<a href=\"https://arxiv.org/abs/2002.11901\" rel=\"nofollow\">arxiv</a>] [<a href=\"https://jhavl.github.io/mmc\" rel=\"nofollow\">project website</a>] [<a href=\"https://youtu.be/zBGLPoPNZ10\" rel=\"nofollow\">video</a>]</p>\n<h2>Installing</h2>\n<p>Requires Python \u2265 3.2. See <a href=\"https://github.com/jhavl/ropy/tree/ropy-2.7\" rel=\"nofollow\">ropy-2.7</a> branch for Python 2.7 support.</p>\n<pre>git clone https://github.com/jhavl/ropy.git\n<span class=\"nb\">cd</span> ropy\npip3 install -e .\n</pre>\n<h2>Usage</h2>\n<h3>Arm-Type Robots</h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">ropy</span> <span class=\"k\">as</span> <span class=\"nn\">rp</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n\n<span class=\"c1\"># Initialise a Franka-Emika Panda robot</span>\n<span class=\"n\">panda</span> <span class=\"o\">=</span> <span class=\"n\">rp</span><span class=\"o\">.</span><span class=\"n\">Panda</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Set the joint angles of the robot</span>\n<span class=\"n\">q0</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"o\">-</span><span class=\"mf\">1.2</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n<span class=\"n\">panda</span><span class=\"o\">.</span><span class=\"n\">q</span> <span class=\"o\">=</span> <span class=\"n\">q0</span>\n\n<span class=\"c1\"># Calculate the Kinematic Jacobian (in the world frame) at joint angles q0</span>\n<span class=\"n\">panda</span><span class=\"o\">.</span><span class=\"n\">J0</span>\n<span class=\"c1\"># or</span>\n<span class=\"n\">panda</span><span class=\"o\">.</span><span class=\"n\">jacob0</span><span class=\"p\">(</span><span class=\"n\">q0</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Calculate the forward kinematics of the robot at joint angles q0</span>\n<span class=\"n\">panda</span><span class=\"o\">.</span><span class=\"n\">T</span>\n<span class=\"c1\"># or</span>\n<span class=\"n\">panda</span><span class=\"o\">.</span><span class=\"n\">fkine</span><span class=\"p\">(</span><span class=\"n\">q0</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Calculate the manipulability of the robot at joint angles q0</span>\n<span class=\"n\">panda</span><span class=\"o\">.</span><span class=\"n\">m</span>\n<span class=\"c1\"># or</span>\n<span class=\"n\">panda</span><span class=\"o\">.</span><span class=\"n\">manip</span><span class=\"p\">(</span><span class=\"n\">q0</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Calculate the Kinematic Hessian (in the world frame) at joint angles q0</span>\n<span class=\"n\">panda</span><span class=\"o\">.</span><span class=\"n\">H0</span>\n<span class=\"c1\"># or</span>\n<span class=\"n\">panda</span><span class=\"o\">.</span><span class=\"n\">hessian0</span><span class=\"p\">(</span><span class=\"n\">q0</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Print the Elementary Transform Sequence (ETS) of the robot</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">panda</span><span class=\"o\">.</span><span class=\"n\">ets</span><span class=\"p\">)</span>\n</pre>\n<h3>Manipulability Motion Control Example</h3>\n<p>This example implements Manipulability Motion Control from <a href=\"https://arxiv.org/abs/2002.11901\" rel=\"nofollow\">this paper</a> within a position-based servoing scheme. We use the library <a href=\"https://pypi.org/project/qpsolvers/\" rel=\"nofollow\">qpsolvers</a> to solve the optimisation function. However, you can use whichever solver you wish.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">ropy</span> <span class=\"k\">as</span> <span class=\"nn\">rp</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">import</span> <span class=\"nn\">qpsolvers</span> <span class=\"k\">as</span> <span class=\"nn\">qp</span>\n\n<span class=\"c1\"># Initialise a Franka-Emika Panda Robot</span>\n<span class=\"n\">panda</span> <span class=\"o\">=</span> <span class=\"n\">rp</span><span class=\"o\">.</span><span class=\"n\">Panda</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># The current joint angles of the Panda</span>\n<span class=\"c1\"># You need to obtain these from however you interfave with your robot</span>\n<span class=\"c1\"># eg. ROS messages, PyRep etc.</span>\n<span class=\"n\">panda</span><span class=\"o\">.</span><span class=\"n\">q</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">2.3</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">])</span>\n\n<span class=\"c1\"># The current pose of the robot</span>\n<span class=\"n\">wTe</span> <span class=\"o\">=</span> <span class=\"n\">panda</span><span class=\"o\">.</span><span class=\"n\">T</span>\n\n<span class=\"c1\"># The desired pose of the robot</span>\n<span class=\"c1\"># = Current pose offset 20cm in the x-axis</span>\n<span class=\"n\">wTep</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">(</span><span class=\"n\">wTe</span><span class=\"p\">)</span>\n<span class=\"n\">wTep</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"mf\">0.2</span>\n\n<span class=\"c1\"># Gain term (lambda) for control minimisation</span>\n<span class=\"n\">Y</span> <span class=\"o\">=</span> <span class=\"mf\">0.005</span>\n\n<span class=\"c1\"># Quadratic component of objective function</span>\n<span class=\"n\">Q</span> <span class=\"o\">=</span> <span class=\"n\">Y</span> <span class=\"o\">*</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">eye</span><span class=\"p\">(</span><span class=\"mi\">7</span><span class=\"p\">)</span>\n\n<span class=\"n\">arrived</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n<span class=\"k\">while</span> <span class=\"ow\">not</span> <span class=\"n\">arrived</span><span class=\"p\">:</span>\n\n    <span class=\"c1\"># The current joint angles of the Panda</span>\n    <span class=\"c1\"># You need to obtain these from however you interfave with your robot</span>\n    <span class=\"c1\"># eg. ROS messages, PyRep etc.</span>\n    <span class=\"n\">panda</span><span class=\"o\">.</span><span class=\"n\">q</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">2.3</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">])</span>\n\n    <span class=\"c1\"># The desired end-effecor spatial velocity</span>\n    <span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">arrived</span> <span class=\"o\">=</span> <span class=\"n\">rp</span><span class=\"o\">.</span><span class=\"n\">p_servo</span><span class=\"p\">(</span><span class=\"n\">wTe</span><span class=\"p\">,</span> <span class=\"n\">wTep</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Form the equality constraints</span>\n    <span class=\"c1\"># The kinematic Jacobian in the end-effecor frame</span>\n    <span class=\"n\">Aeq</span> <span class=\"o\">=</span> <span class=\"n\">panda</span><span class=\"o\">.</span><span class=\"n\">Je</span>\n    <span class=\"n\">beq</span> <span class=\"o\">=</span> <span class=\"n\">v</span><span class=\"o\">.</span><span class=\"n\">reshape</span><span class=\"p\">((</span><span class=\"mi\">6</span><span class=\"p\">,))</span>\n\n    <span class=\"c1\"># Linear component of objective function: the manipulability Jacobian</span>\n    <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"n\">panda</span><span class=\"o\">.</span><span class=\"n\">Jm</span><span class=\"o\">.</span><span class=\"n\">reshape</span><span class=\"p\">((</span><span class=\"mi\">7</span><span class=\"p\">,))</span>\n\n    <span class=\"c1\"># Solve for the joint velocities dq</span>\n    <span class=\"n\">dq</span> <span class=\"o\">=</span> <span class=\"n\">qp</span><span class=\"o\">.</span><span class=\"n\">solve_qp</span><span class=\"p\">(</span><span class=\"n\">Q</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">Aeq</span><span class=\"p\">,</span> <span class=\"n\">beq</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Send the joint velocities to the robot</span>\n    <span class=\"c1\"># eg. ROS messages, PyRep etc.</span>\n</pre>\n<h3>Resolved-Rate Motion Control Example</h3>\n<p>This example implements resolved-rate motion control within a position-based servoing scheme</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">ropy</span> <span class=\"k\">as</span> <span class=\"nn\">rp</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n\n<span class=\"c1\"># Initialise a Franka-Emika Panda Robot</span>\n<span class=\"n\">panda</span> <span class=\"o\">=</span> <span class=\"n\">rp</span><span class=\"o\">.</span><span class=\"n\">Panda</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># The current joint angles of the Panda</span>\n<span class=\"c1\"># You need to obtain these from however you interfave with your robot</span>\n<span class=\"c1\"># eg. ROS messages, PyRep etc.</span>\n<span class=\"n\">panda</span><span class=\"o\">.</span><span class=\"n\">q</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">2.3</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">])</span>\n\n<span class=\"c1\"># The current pose of the robot</span>\n<span class=\"n\">wTe</span> <span class=\"o\">=</span> <span class=\"n\">panda</span><span class=\"o\">.</span><span class=\"n\">T</span>\n\n<span class=\"c1\"># The desired pose of the robot</span>\n<span class=\"c1\"># = Current pose offset 20cm in the x-axis</span>\n<span class=\"n\">wTep</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">(</span><span class=\"n\">wTe</span><span class=\"p\">)</span>\n<span class=\"n\">wTep</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"mf\">0.2</span>\n\n<span class=\"n\">arrived</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n<span class=\"k\">while</span> <span class=\"ow\">not</span> <span class=\"n\">arrived</span><span class=\"p\">:</span>\n\n    <span class=\"c1\"># The current joint angles of the Panda</span>\n    <span class=\"c1\"># You need to obtain these from however you interfave with your robot</span>\n    <span class=\"c1\"># eg. ROS messages, PyRep etc.</span>\n    <span class=\"n\">panda</span><span class=\"o\">.</span><span class=\"n\">q</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">2.3</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">])</span>\n\n    <span class=\"c1\"># The desired end-effecor spatial velocity</span>\n    <span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">arrived</span> <span class=\"o\">=</span> <span class=\"n\">rp</span><span class=\"o\">.</span><span class=\"n\">p_servo</span><span class=\"p\">(</span><span class=\"n\">wTe</span><span class=\"p\">,</span> <span class=\"n\">wTep</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Solve for the joint velocities dq</span>\n    <span class=\"c1\"># Perfrom the pseudoinverse of the manipulator Jacobian in the end-effector frame</span>\n    <span class=\"n\">dq</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">linalg</span><span class=\"o\">.</span><span class=\"n\">pinv</span><span class=\"p\">(</span><span class=\"n\">panda</span><span class=\"o\">.</span><span class=\"n\">Je</span><span class=\"p\">)</span> <span class=\"o\">@</span> <span class=\"n\">v</span>\n\n    <span class=\"c1\"># Send the joint velocities to the robot</span>\n    <span class=\"c1\"># eg. ROS messages, PyRep etc.</span>\n</pre>\n\n          </div>"}, "last_serial": 7116194, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "04e12d06364307bd88bd04195b985e1b", "sha256": "15608ed7f39419e206122984f8f5b28248f6a2de20b4749a5f729bd228d36ac9"}, "downloads": -1, "filename": "ropy-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "04e12d06364307bd88bd04195b985e1b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.2", "size": 22946, "upload_time": "2020-04-28T00:15:42", "upload_time_iso_8601": "2020-04-28T00:15:42.228940Z", "url": "https://files.pythonhosted.org/packages/be/d1/05fa958fbe8b4a74367dfd0e8d0fb5e414446da5ed35e82f4a0cf90c583e/ropy-0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d9ccf816796434bf1ca6cc1fe455e094", "sha256": "d7610a2dade0860aef36f6e9bfd3ce20f90d6579b95e2aa8be9507264cfd2614"}, "downloads": -1, "filename": "ropy-0.1.tar.gz", "has_sig": false, "md5_digest": "d9ccf816796434bf1ca6cc1fe455e094", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.2", "size": 14908, "upload_time": "2020-04-28T00:15:45", "upload_time_iso_8601": "2020-04-28T00:15:45.552601Z", "url": "https://files.pythonhosted.org/packages/4b/90/28770081dce71b800892c3bae8d05e3cef067aee28f3c08e4d30f9448024/ropy-0.1.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "240a40c3fe310c4a3af945f3c1a942e0", "sha256": "6d13a86bbddde057c4848d051e65fdfc850fde4db4f016102d170ffae9d61fd0"}, "downloads": -1, "filename": "ropy-0.1.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "240a40c3fe310c4a3af945f3c1a942e0", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7", "size": 24244, "upload_time": "2020-04-28T00:41:12", "upload_time_iso_8601": "2020-04-28T00:41:12.472785Z", "url": "https://files.pythonhosted.org/packages/9d/3d/e6dacf9b144473ef47decd8257d14d21fc3923abc5e87d0bd7d9074f39c9/ropy-0.1.1-py2.py3-none-any.whl", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "e80083d158c70ff2d1b6e308fa05fe69", "sha256": "e228b017b3c54c73656e60722b0393e131c7ff262459981c11feac70f51876c8"}, "downloads": -1, "filename": "ropy-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "e80083d158c70ff2d1b6e308fa05fe69", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.2", "size": 24242, "upload_time": "2020-04-28T00:44:32", "upload_time_iso_8601": "2020-04-28T00:44:32.537614Z", "url": "https://files.pythonhosted.org/packages/0e/ec/5e0d5623dd6beeda3756ba7466f8a3557b82df12e4abf1037098314d056d/ropy-0.2.1-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e80083d158c70ff2d1b6e308fa05fe69", "sha256": "e228b017b3c54c73656e60722b0393e131c7ff262459981c11feac70f51876c8"}, "downloads": -1, "filename": "ropy-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "e80083d158c70ff2d1b6e308fa05fe69", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.2", "size": 24242, "upload_time": "2020-04-28T00:44:32", "upload_time_iso_8601": "2020-04-28T00:44:32.537614Z", "url": "https://files.pythonhosted.org/packages/0e/ec/5e0d5623dd6beeda3756ba7466f8a3557b82df12e4abf1037098314d056d/ropy-0.2.1-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 03:01:18 2020"}