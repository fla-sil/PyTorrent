{"info": {"author": "Nelson Gonzabato", "author_email": "gonzabato@hotmail.com", "bugtrack_url": null, "classifiers": [], "description": "# pyfdc: A python interface to FoodDataCentral\n![Travis Build](https://travis-ci.com/Nelson-Gon/pyfdc.svg?branch=master)\n[![Maintenance](https://img.shields.io/badge/Maintained%3F-yes-green.svg)](https://GitHub.com/Nelson-Gon/pyfdc/graphs/commit-activity)\n[![PyPI version fury.io](https://badge.fury.io/py/pyfdc.svg)](https://pypi.python.org/pypi/pyfdc/)\n[![PyPI license](https://img.shields.io/pypi/l/pyfdc.svg)](https://pypi.python.org/pypi/pyfdc/)\n[![Project Status](http://www.repostatus.org/badges/latest/active.svg)](http://www.repostatus.org/#active) \n [![GitHub last commit](https://img.shields.io/github/last-commit/Nelson-Gon/pyfdc.svg)](https://github.com/Nelson-Gon/pyfdc/commits/master)\n[![made-with-python](https://img.shields.io/badge/Made%20with-Python-1f425f.svg)](https://www.python.org/)\n[![GitHub issues](https://img.shields.io/github/issues/Nelson-Gon/pyfdc.svg)](https://GitHub.com/Nelson-Gon/pyfdc/issues/)\n[![GitHub issues-closed](https://img.shields.io/github/issues-closed/Nelson-Gon/pyfdc.svg)](https://GitHub.com/Nelson-Gon/pyfdc/issues?q=is%3Aissue+is%3Aclosed)\n\n\n\n----\n\n**Installation**\n\nThe simplest way to install is as follows:\n\n```\npip install pyfdc\n\n```\n\nAlternatively,\n\n\nOpen the Terminal/CMD/Git bash/shell and enter\n\n```\n# You should use your default python interpreter\npython3.7 -m pip install git+https://github.com/Nelson-Gon/pyfdc.git\n\n```\n\nOtherwise:\n\n```\n# clone the repo\ngit clone https://www.github.com/Nelson-Gon/pyfdc.git\ncd pyfdc\npython3 setup.py install\n\n```\n---\n\n**Sample usage**\n\n```\nfrom pyfdc import *\n\n```\n\n**Set session api key**\n\nTo avoid providing an api key for each call, one can set a session api key as follows:\n\n```\n\nutils.set_api_key(\"my_api_key_here\")\n\n\n```\n\n\n**Key Features**\n\nThere are two key classes defined in `pyfdc`: \n\n1. `FoodSearch` implements the class for objects aimed at querying the database with a search term.\nTo get details about foods for a given search term, one can do the following:\n\n```\nmy_search = pyfdc.FoodSearch(search_phrase=\"nugget\")\nlist(my_search.get_food_info(target=\"fdcId\"))\n\n```\n\nThe above will result in the following output(truncated):\n\n```\n\n[[337348], [337394], [170725], [340673], [337347], [173721], [173722], [337346].....]]\n\n\n```\n\nTo get descriptions of the different results:\n\n\n```\n\nlist(my_search.get_food_info(target=\"description\"))\n\n\n```\n\nThis will result in the following result(truncated):\n\n```\n\n[['Chicken nuggets'], ['Turkey, nuggets'], [\"WENDY'S, Chicken Nuggets\"], ['Nutty Nuggets, Ralston Purina']]]\n\n\n```\n\nThe simplest way to find out all available `targets` is to simply call:\n\n```\n\nlist(my_search.get_food_info())\n\n\n```\n\n**This will throw an error showing what options are available.**:\n\n```\n\ntarget should be one of ['fdcId', 'description', 'scientificName', 'commonNames', 'additionalDescriptions', 'dataType', 'foodCode', 'gtinUpc', 'ndbNumber', 'publishedDate', 'brandOwner', 'ingredients', 'allHighlightFields', 'score']\n\n```\n\nFor more details, please see the documentation of each of these classes and the\nassociated documents.\n\nTo get a `DataFrame` from multiple target fields, we can use `get_multiple_details` as shown:\n\n```\nmy_search.get_multiple_details([\"fdcId\",\"foodCode\",\"description\"])\n     fdcId  foodCode                                        description\n0   337348  24198740                                    Chicken nuggets\n1   337394  24208000                                    Turkey, nuggets\n2   170725  57316200                           WENDY'S, Chicken Nuggets\n3   340673  24198735                      Nutty Nuggets, Ralston Purina\n4   337347  24198730                 Chicken nuggets, from school lunch\n5   173721  26100260            Salmon nuggets, breaded, frozen, heated\n6   173722  13120310      Salmon nuggets, cooked as purchased, unheated\n```\n\n2. `FoodDetails`\n\nThe `FoodSearch` class has an important advantage: it can allow us to obtain\nFoodDataCentral(fdcId) IDs using a simple search term. To get full details about a given \nfdcId, one can do the following:\n\n```\nmy_details = pyfdc.FoodDetails(fdc_id=504905)\nmy_details.get_food_details(\"ingredients\")\n\n```\n\nThis will give us the following output(truncated):\n\n```\n\nMECHANICALLY SEPARATED CHICKEN, CHICKEN BROTH,\n\n```\n\nTo get nutrient details, we can use the following which returns a list of all \nnutrient details. For brevity, only part of the first list item is shown.\n\n```\n\nlist(my_details.get_nutrients())\n\n[      id number                  name  rank unitName\n 0   1079    291  Fiber, total dietary  1200        g\n 1   1079    291  Fiber, total dietary  1200        g\n 2   1079    291  Fiber, total dietary  1200        g\n 3   1079    291  Fiber, total dietary  1200        g\n 4   1079    291  Fiber, total dietary  1200        g\n 5   1079    291  Fiber, total dietary  1200        g\n 6   1079    291  Fiber, total dietary  1200        g\n\n```\n\nTo return a merge of the above results, we can use `merge_food_nutrients` as follows:\n\n```\nmy_details.merge_nutrient_results()\n     number                          name  rank unitName\nid                                                      \n1079    291          Fiber, total dietary  1200        g\n1079    291          Fiber, total dietary  1200        g\n1079    291          Fiber, total dietary  1200        g\n1079    291          Fiber, total dietary  1200        g\n1079    291          Fiber, total dietary  1200        g\n     ...                           ...   ...      ...\n1258    606  Fatty acids, total saturated  9700        g\n1258    606  Fatty acids, total saturated  9700        g\n1258    606  Fatty acids, total saturated  9700        g\n1258    606  Fatty acids, total saturated  9700        g\n1258    606  Fatty acids, total saturated  9700        g\n[225 rows x 4 columns]\n\n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://github.com/Nelson-Gon/pyfdc/archive/v0.1.2.zip", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://www.github.com/Nelson-Gon/pyfdc", "keywords": "nutrition food agriculture rest api", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "pyfdc", "package_url": "https://pypi.org/project/pyfdc/", "platform": "", "project_url": "https://pypi.org/project/pyfdc/", "project_urls": {"Download": "https://github.com/Nelson-Gon/pyfdc/archive/v0.1.2.zip", "Homepage": "http://www.github.com/Nelson-Gon/pyfdc"}, "release_url": "https://pypi.org/project/pyfdc/0.1.2/", "requires_dist": null, "requires_python": ">=3.6", "summary": "A python interface to FoodDataCentral", "version": "0.1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>pyfdc: A python interface to FoodDataCentral</h1>\n<p><img alt=\"Travis Build\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5af586f73967bff58487fe3d617aab8377901080/68747470733a2f2f7472617669732d63692e636f6d2f4e656c736f6e2d476f6e2f70796664632e7376673f6272616e63683d6d6173746572\">\n<a href=\"https://GitHub.com/Nelson-Gon/pyfdc/graphs/commit-activity\" rel=\"nofollow\"><img alt=\"Maintenance\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/90bf1b2a4d99698c4dffbc494b9734690a777fec/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4d61696e7461696e65642533462d7965732d677265656e2e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/pyfdc/\" rel=\"nofollow\"><img alt=\"PyPI version fury.io\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f5834f9ef2a0efaad8ee9877bf96a5aae9486a50/68747470733a2f2f62616467652e667572792e696f2f70792f70796664632e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/pyfdc/\" rel=\"nofollow\"><img alt=\"PyPI license\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fd8191360a2a99067c1e0bc80e59ce185a2b9500/68747470733a2f2f696d672e736869656c64732e696f2f707970692f6c2f70796664632e737667\"></a>\n<a href=\"http://www.repostatus.org/#active\" rel=\"nofollow\"><img alt=\"Project Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/51adb09f202aea47725eca73a3fcf5e1ab47f2e9/687474703a2f2f7777772e7265706f7374617475732e6f72672f6261646765732f6c61746573742f6163746976652e737667\"></a>\n<a href=\"https://github.com/Nelson-Gon/pyfdc/commits/master\" rel=\"nofollow\"><img alt=\"GitHub last commit\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6b2d88ddba81ebe747236b51af46011914585e95/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6173742d636f6d6d69742f4e656c736f6e2d476f6e2f70796664632e737667\"></a>\n<a href=\"https://www.python.org/\" rel=\"nofollow\"><img alt=\"made-with-python\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/68a99107ffdf24c5fb2cc4bca38b7b662e501b97/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4d616465253230776974682d507974686f6e2d3166343235662e737667\"></a>\n<a href=\"https://GitHub.com/Nelson-Gon/pyfdc/issues/\" rel=\"nofollow\"><img alt=\"GitHub issues\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fb92396ea982c475030fb2a7a66277c363e8b8fa/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732f4e656c736f6e2d476f6e2f70796664632e737667\"></a>\n<a href=\"https://GitHub.com/Nelson-Gon/pyfdc/issues?q=is%3Aissue+is%3Aclosed\" rel=\"nofollow\"><img alt=\"GitHub issues-closed\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1c25046fb91bd3bc87b31fec180f1e7b5dcc9258/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732d636c6f7365642f4e656c736f6e2d476f6e2f70796664632e737667\"></a></p>\n<hr>\n<p><strong>Installation</strong></p>\n<p>The simplest way to install is as follows:</p>\n<pre><code>pip install pyfdc\n\n</code></pre>\n<p>Alternatively,</p>\n<p>Open the Terminal/CMD/Git bash/shell and enter</p>\n<pre><code># You should use your default python interpreter\npython3.7 -m pip install git+https://github.com/Nelson-Gon/pyfdc.git\n\n</code></pre>\n<p>Otherwise:</p>\n<pre><code># clone the repo\ngit clone https://www.github.com/Nelson-Gon/pyfdc.git\ncd pyfdc\npython3 setup.py install\n\n</code></pre>\n<hr>\n<p><strong>Sample usage</strong></p>\n<pre><code>from pyfdc import *\n\n</code></pre>\n<p><strong>Set session api key</strong></p>\n<p>To avoid providing an api key for each call, one can set a session api key as follows:</p>\n<pre><code>\nutils.set_api_key(\"my_api_key_here\")\n\n\n</code></pre>\n<p><strong>Key Features</strong></p>\n<p>There are two key classes defined in <code>pyfdc</code>:</p>\n<ol>\n<li><code>FoodSearch</code> implements the class for objects aimed at querying the database with a search term.\nTo get details about foods for a given search term, one can do the following:</li>\n</ol>\n<pre><code>my_search = pyfdc.FoodSearch(search_phrase=\"nugget\")\nlist(my_search.get_food_info(target=\"fdcId\"))\n\n</code></pre>\n<p>The above will result in the following output(truncated):</p>\n<pre><code>\n[[337348], [337394], [170725], [340673], [337347], [173721], [173722], [337346].....]]\n\n\n</code></pre>\n<p>To get descriptions of the different results:</p>\n<pre><code>\nlist(my_search.get_food_info(target=\"description\"))\n\n\n</code></pre>\n<p>This will result in the following result(truncated):</p>\n<pre><code>\n[['Chicken nuggets'], ['Turkey, nuggets'], [\"WENDY'S, Chicken Nuggets\"], ['Nutty Nuggets, Ralston Purina']]]\n\n\n</code></pre>\n<p>The simplest way to find out all available <code>targets</code> is to simply call:</p>\n<pre><code>\nlist(my_search.get_food_info())\n\n\n</code></pre>\n<p><strong>This will throw an error showing what options are available.</strong>:</p>\n<pre><code>\ntarget should be one of ['fdcId', 'description', 'scientificName', 'commonNames', 'additionalDescriptions', 'dataType', 'foodCode', 'gtinUpc', 'ndbNumber', 'publishedDate', 'brandOwner', 'ingredients', 'allHighlightFields', 'score']\n\n</code></pre>\n<p>For more details, please see the documentation of each of these classes and the\nassociated documents.</p>\n<p>To get a <code>DataFrame</code> from multiple target fields, we can use <code>get_multiple_details</code> as shown:</p>\n<pre><code>my_search.get_multiple_details([\"fdcId\",\"foodCode\",\"description\"])\n     fdcId  foodCode                                        description\n0   337348  24198740                                    Chicken nuggets\n1   337394  24208000                                    Turkey, nuggets\n2   170725  57316200                           WENDY'S, Chicken Nuggets\n3   340673  24198735                      Nutty Nuggets, Ralston Purina\n4   337347  24198730                 Chicken nuggets, from school lunch\n5   173721  26100260            Salmon nuggets, breaded, frozen, heated\n6   173722  13120310      Salmon nuggets, cooked as purchased, unheated\n</code></pre>\n<ol>\n<li><code>FoodDetails</code></li>\n</ol>\n<p>The <code>FoodSearch</code> class has an important advantage: it can allow us to obtain\nFoodDataCentral(fdcId) IDs using a simple search term. To get full details about a given\nfdcId, one can do the following:</p>\n<pre><code>my_details = pyfdc.FoodDetails(fdc_id=504905)\nmy_details.get_food_details(\"ingredients\")\n\n</code></pre>\n<p>This will give us the following output(truncated):</p>\n<pre><code>\nMECHANICALLY SEPARATED CHICKEN, CHICKEN BROTH,\n\n</code></pre>\n<p>To get nutrient details, we can use the following which returns a list of all\nnutrient details. For brevity, only part of the first list item is shown.</p>\n<pre><code>\nlist(my_details.get_nutrients())\n\n[      id number                  name  rank unitName\n 0   1079    291  Fiber, total dietary  1200        g\n 1   1079    291  Fiber, total dietary  1200        g\n 2   1079    291  Fiber, total dietary  1200        g\n 3   1079    291  Fiber, total dietary  1200        g\n 4   1079    291  Fiber, total dietary  1200        g\n 5   1079    291  Fiber, total dietary  1200        g\n 6   1079    291  Fiber, total dietary  1200        g\n\n</code></pre>\n<p>To return a merge of the above results, we can use <code>merge_food_nutrients</code> as follows:</p>\n<pre><code>my_details.merge_nutrient_results()\n     number                          name  rank unitName\nid                                                      \n1079    291          Fiber, total dietary  1200        g\n1079    291          Fiber, total dietary  1200        g\n1079    291          Fiber, total dietary  1200        g\n1079    291          Fiber, total dietary  1200        g\n1079    291          Fiber, total dietary  1200        g\n     ...                           ...   ...      ...\n1258    606  Fatty acids, total saturated  9700        g\n1258    606  Fatty acids, total saturated  9700        g\n1258    606  Fatty acids, total saturated  9700        g\n1258    606  Fatty acids, total saturated  9700        g\n1258    606  Fatty acids, total saturated  9700        g\n[225 rows x 4 columns]\n\n</code></pre>\n\n          </div>"}, "last_serial": 6668280, "releases": {"0.1.1": [{"comment_text": "", "digests": {"md5": "c295420b2516a1bd83be72e3bb1fef8d", "sha256": "1d8198030ce8dbe67eb9f6448448754c9548f344b2e9cdd1bb96559c5b0ffd5c"}, "downloads": -1, "filename": "pyfdc-0.1.1.tar.gz", "has_sig": false, "md5_digest": "c295420b2516a1bd83be72e3bb1fef8d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 6656, "upload_time": "2020-02-20T10:55:20", "upload_time_iso_8601": "2020-02-20T10:55:20.523170Z", "url": "https://files.pythonhosted.org/packages/d0/dc/0445e9c86394d2efa8b7020e80df4ab7366ee7aa3e922ff189b9f295516e/pyfdc-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "5d33b59db16d1591309f3c267d605d6f", "sha256": "38c57139773992a24b8068827ae28de477d999b5656df9490e36e583d19c700f"}, "downloads": -1, "filename": "pyfdc-0.1.2.tar.gz", "has_sig": false, "md5_digest": "5d33b59db16d1591309f3c267d605d6f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 7729, "upload_time": "2020-02-20T11:45:26", "upload_time_iso_8601": "2020-02-20T11:45:26.826687Z", "url": "https://files.pythonhosted.org/packages/61/a3/1ea35da7744c325d8682ae8b822af842f120abb7eb35e23e1ee36edf9155/pyfdc-0.1.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "5d33b59db16d1591309f3c267d605d6f", "sha256": "38c57139773992a24b8068827ae28de477d999b5656df9490e36e583d19c700f"}, "downloads": -1, "filename": "pyfdc-0.1.2.tar.gz", "has_sig": false, "md5_digest": "5d33b59db16d1591309f3c267d605d6f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 7729, "upload_time": "2020-02-20T11:45:26", "upload_time_iso_8601": "2020-02-20T11:45:26.826687Z", "url": "https://files.pythonhosted.org/packages/61/a3/1ea35da7744c325d8682ae8b822af842f120abb7eb35e23e1ee36edf9155/pyfdc-0.1.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:05:54 2020"}