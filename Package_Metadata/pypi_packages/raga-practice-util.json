{"info": {"author": "Ragavendran balakrishnan", "author_email": "ragbalak@redhat.com", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "License :: Freeware", "Operating System :: POSIX :: Linux", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.7"], "description": "# Raga_Practise_Util\nThis is a Python Packaging Helper Environment that helps beginner's in python get acquainted with the concepts of Building,Packages and Managing them. \nThis tutorial gives beginners a complete flow of how python packages are done in the industries.\n\nPlease do the following:\n\n1. Create a new git repository with git-init(1). Commit as desired. If you're\n   worried about losing any of the sample code that you're writing, create a new\n   GitHub repository, skim git-remote(1), and push your code to your new GitHub\n   repository.\n2. Within this git repository, create the following directory structure:\n\n       .\n       \u251c\u2500\u2500 my_package\n       \u2502\u00a0\u00a0 \u2514\u2500\u2500 tests.py\n       \u2514\u2500\u2500 setup.py\n\n3. Read the [unittest](https://docs.python.org/3.6/library/unittest.html)\n   documentation from the beginning through section 26.4.2.0. (That is, read\n   until section 26.4.2.1.) In addition, skim the list of methods exposed by\n   [`unittest.TestCase`](https://docs.python.org/3.6/library/unittest.html#unittest.TestCase).\n4. Create a test case in `tests.py`. Within this test case, create one test\n   method for each of the following assertions:\n\n   * '0.1' is equal to '0.1'\n   * '0.1' is less than '0.2'\n   * '0.2' is greater than '0.10'\n\n   Do not use the `assertTrue` method for these assertions. There are other,\n   more targeted methods, as mentioned in step 3. Verify that the tests pass.\n5. Read [packaging and distributing\n   projects](https://packaging.python.org/guides/distributing-packages-using-setuptools/).\n   Feel free to skim the \"setup() args\" section.\n6. Create a virtualenv using `python3 -m venv ...`, and activate it. Populate\n   your `setup.py` with just enough information to be valid. Install your\n   package into the virtualenv in \"editable mode,\" e.g. with `pip install\n   --editable .`. Change to an entirely different directory (e.g. with `cd ~`),\n   and verify that you can execute tests with `python -m unittest\n   my_package.tests`.\n7. Add\n   [`install_requires`](https://packaging.python.org/guides/distributing-packages-using-setuptools/#install-requires)\n   to `setup.py`, and depend on\n   [packaging](https://pypi.org/project/packaging/). Verify that `pip install\n   --editable .` pulls in the packaging library. You can verify this with `pip\n   freeze`.\n8. Add a new test case into the `tests.py` file.  Within this test case, create\n   one test method for each of the following assertions:\n\n   * Version('0.1') is equal to Version('0.1')\n   * Version('0.1') is less than Version('0.2')\n   * Version('0.2') is less than Version('0.10')\n\n   Do not use the `assertTrue` method for these assertions. There are other,\n   more targeted methods, as mentioned in step 3. Verify that the tests pass.\n9. Add `extras_require` to `setup.py`, and create a \"dev\" section that lists\n   \"pylint.\" See the [docs](http://setuptools.readthedocs.io/en/latest/setuptools.html#declaring-extras-optional-features-with-their-own-dependencies) for an\n   example of how to do this. Verify that `pip install --editable .[dev]` pulls\n   in pylint. You can verify this with `pip freeze`.\n10. Execute `pylint my_package`. Fix all warnings.\n11. Deactivate your virtualenv. Blow it away, e.g. with `rm -rf path/to/virtualenv`.\n    Create a new one. Install your Python package into this virtualenv. Verify that\n    you can move to a different directory and successfully execute the tests, e.g.\n    with `cd ~ && python -m unittest my_package.tests`.\n12. Once Done with managing the packages locally, The package can be distributed to the remote. This works by creating [aPypI](https://pypi.org/account/register/) account first. Install twine `pip install twine`. Setting up the Build files using `python setup.py sdist` and `pip install wheel` followed by `python setup.py bdist_wheel --universal`. Then run the upload by using `twine upload dist/*`. for more infor refer [docs](https://packaging.python.org/guides/distributing-packages-using-setuptools/#id77) \n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ragabala/Raga_Practise_Util", "keywords": "", "license": "TEST", "maintainer": "", "maintainer_email": "", "name": "raga-practice-util", "package_url": "https://pypi.org/project/raga-practice-util/", "platform": "", "project_url": "https://pypi.org/project/raga-practice-util/", "project_urls": {"Homepage": "https://github.com/ragabala/Raga_Practise_Util"}, "release_url": "https://pypi.org/project/raga-practice-util/0.0.1/", "requires_dist": ["packaging", "pylint; extra == 'dev'"], "requires_python": "", "summary": "This is a quick start helper project for helping beginners create a python unit test package distribution", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p># Raga_Practise_Util\nThis is a Python Packaging Helper Environment that helps beginner\u2019s in python get acquainted with the concepts of Building,Packages and Managing them.\nThis tutorial gives beginners a complete flow of how python packages are done in the industries.</p>\n<p>Please do the following:</p>\n<ol>\n<li><p>Create a new git repository with git-init(1). Commit as desired. If you\u2019re\nworried about losing any of the sample code that you\u2019re writing, create a new\nGitHub repository, skim git-remote(1), and push your code to your new GitHub\nrepository.</p>\n</li>\n<li><p>Within this git repository, create the following directory structure:</p>\n<blockquote>\n<p>.\n\u251c\u2500\u2500 my_package\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 tests.py\n\u2514\u2500\u2500 setup.py</p>\n</blockquote>\n</li>\n<li><p>Read the [unittest](<a href=\"https://docs.python.org/3.6/library/unittest.html\" rel=\"nofollow\">https://docs.python.org/3.6/library/unittest.html</a>)\ndocumentation from the beginning through section 26.4.2.0. (That is, read\nuntil section 26.4.2.1.) In addition, skim the list of methods exposed by\n[<cite>unittest.TestCase</cite>](<a href=\"https://docs.python.org/3.6/library/unittest.html#unittest.TestCase\" rel=\"nofollow\">https://docs.python.org/3.6/library/unittest.html#unittest.TestCase</a>).</p>\n</li>\n<li><p>Create a test case in <cite>tests.py</cite>. Within this test case, create one test\nmethod for each of the following assertions:</p>\n<ul>\n<li>\u20180.1\u2019 is equal to \u20180.1\u2019</li>\n<li>\u20180.1\u2019 is less than \u20180.2\u2019</li>\n<li>\u20180.2\u2019 is greater than \u20180.10\u2019</li>\n</ul>\n<p>Do not use the <cite>assertTrue</cite> method for these assertions. There are other,\nmore targeted methods, as mentioned in step 3. Verify that the tests pass.</p>\n</li>\n<li><p>Read [packaging and distributing\nprojects](<a href=\"https://packaging.python.org/guides/distributing-packages-using-setuptools/\" rel=\"nofollow\">https://packaging.python.org/guides/distributing-packages-using-setuptools/</a>).\nFeel free to skim the \u201csetup() args\u201d section.</p>\n</li>\n<li><p>Create a virtualenv using <cite>python3 -m venv \u2026</cite>, and activate it. Populate\nyour <cite>setup.py</cite> with just enough information to be valid. Install your\npackage into the virtualenv in \u201ceditable mode,\u201d e.g. with <cite>pip install\n\u2013editable .</cite>. Change to an entirely different directory (e.g. with <cite>cd ~</cite>),\nand verify that you can execute tests with <cite>python -m unittest\nmy_package.tests</cite>.</p>\n</li>\n<li><p>Add\n[<cite>install_requires</cite>](<a href=\"https://packaging.python.org/guides/distributing-packages-using-setuptools/#install-requires\" rel=\"nofollow\">https://packaging.python.org/guides/distributing-packages-using-setuptools/#install-requires</a>)\nto <cite>setup.py</cite>, and depend on\n[packaging](<a href=\"https://pypi.org/project/packaging/\" rel=\"nofollow\">https://pypi.org/project/packaging/</a>). Verify that <cite>pip install\n\u2013editable .</cite> pulls in the packaging library. You can verify this with <cite>pip\nfreeze</cite>.</p>\n</li>\n<li><p>Add a new test case into the <cite>tests.py</cite> file.  Within this test case, create\none test method for each of the following assertions:</p>\n<ul>\n<li>Version(\u20180.1\u2019) is equal to Version(\u20180.1\u2019)</li>\n<li>Version(\u20180.1\u2019) is less than Version(\u20180.2\u2019)</li>\n<li>Version(\u20180.2\u2019) is less than Version(\u20180.10\u2019)</li>\n</ul>\n<p>Do not use the <cite>assertTrue</cite> method for these assertions. There are other,\nmore targeted methods, as mentioned in step 3. Verify that the tests pass.</p>\n</li>\n<li><p>Add <cite>extras_require</cite> to <cite>setup.py</cite>, and create a \u201cdev\u201d section that lists\n\u201cpylint.\u201d See the [docs](<a href=\"http://setuptools.readthedocs.io/en/latest/setuptools.html#declaring-extras-optional-features-with-their-own-dependencies\" rel=\"nofollow\">http://setuptools.readthedocs.io/en/latest/setuptools.html#declaring-extras-optional-features-with-their-own-dependencies</a>) for an\nexample of how to do this. Verify that <cite>pip install \u2013editable .[dev]</cite> pulls\nin pylint. You can verify this with <cite>pip freeze</cite>.</p>\n</li>\n<li><p>Execute <cite>pylint my_package</cite>. Fix all warnings.</p>\n</li>\n<li><p>Deactivate your virtualenv. Blow it away, e.g. with <cite>rm -rf path/to/virtualenv</cite>.\nCreate a new one. Install your Python package into this virtualenv. Verify that\nyou can move to a different directory and successfully execute the tests, e.g.\nwith <cite>cd ~ &amp;&amp; python -m unittest my_package.tests</cite>.</p>\n</li>\n<li><p>Once Done with managing the packages locally, The package can be distributed to the remote. This works by creating [aPypI](<a href=\"https://pypi.org/account/register/\" rel=\"nofollow\">https://pypi.org/account/register/</a>) account first. Install twine <cite>pip install twine</cite>. Setting up the Build files using <cite>python setup.py sdist</cite> and <cite>pip install wheel</cite> followed by <cite>python setup.py bdist_wheel \u2013universal</cite>. Then run the upload by using <cite>twine upload dist/*</cite>. for more infor refer [docs](<a href=\"https://packaging.python.org/guides/distributing-packages-using-setuptools/#id77\" rel=\"nofollow\">https://packaging.python.org/guides/distributing-packages-using-setuptools/#id77</a>)</p>\n</li>\n</ol>\n\n          </div>"}, "last_serial": 3936472, "releases": {"0.0.0": [{"comment_text": "", "digests": {"md5": "e3f5ac8f662c4579aab2c3902b54c7fa", "sha256": "63cfb6b021be7232e4bfeff9d2066e1da7759c6955cb8f9b72da941d23b9773e"}, "downloads": -1, "filename": "raga_practice_util-0.0.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "e3f5ac8f662c4579aab2c3902b54c7fa", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 3727, "upload_time": "2018-06-06T15:17:36", "upload_time_iso_8601": "2018-06-06T15:17:36.519852Z", "url": "https://files.pythonhosted.org/packages/a2/7a/d629eccad29c90f7694022391b2d54a24f433779a556fab586155afaccb3/raga_practice_util-0.0.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4d641467c18c4449cfe5a9b71ead33e8", "sha256": "ef123a6f8c0fdca0646116048aab54565d57f606804d4497a4d679891e0428fd"}, "downloads": -1, "filename": "raga_practice_util-0.0.0.tar.gz", "has_sig": false, "md5_digest": "4d641467c18c4449cfe5a9b71ead33e8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2960, "upload_time": "2018-06-06T15:17:37", "upload_time_iso_8601": "2018-06-06T15:17:37.907277Z", "url": "https://files.pythonhosted.org/packages/6e/e1/c69bf9ef88225ee4a5b7a5e3508627267c39ae711f98d8341f575c870615/raga_practice_util-0.0.0.tar.gz", "yanked": false}], "0.0.1": [{"comment_text": "", "digests": {"md5": "b300dbeb5128b37ec6f43ab98c260432", "sha256": "5fa54025af9ab322ef48f4b7820b545298c840fc2fe178e5b8db81f17dbf6c6e"}, "downloads": -1, "filename": "raga_practice_util-0.0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "b300dbeb5128b37ec6f43ab98c260432", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 3762, "upload_time": "2018-06-06T15:34:55", "upload_time_iso_8601": "2018-06-06T15:34:55.965728Z", "url": "https://files.pythonhosted.org/packages/e8/a7/85c028c8b6d0899f38fab9e97794e4a5dabf1d35b8653ca061590065efce/raga_practice_util-0.0.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2effe0b865b756456df6fe6b1cc73a12", "sha256": "3245c31a31498074e09f4264d99d115bd6248769dbfdd60238ec8ee7624ca2a8"}, "downloads": -1, "filename": "raga_practice_util-0.0.1.tar.gz", "has_sig": false, "md5_digest": "2effe0b865b756456df6fe6b1cc73a12", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3016, "upload_time": "2018-06-06T15:34:57", "upload_time_iso_8601": "2018-06-06T15:34:57.714248Z", "url": "https://files.pythonhosted.org/packages/d2/b6/9a77e34782c2afa27fda6452ac88335b746ce450e81120593ba3eb851e80/raga_practice_util-0.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b300dbeb5128b37ec6f43ab98c260432", "sha256": "5fa54025af9ab322ef48f4b7820b545298c840fc2fe178e5b8db81f17dbf6c6e"}, "downloads": -1, "filename": "raga_practice_util-0.0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "b300dbeb5128b37ec6f43ab98c260432", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 3762, "upload_time": "2018-06-06T15:34:55", "upload_time_iso_8601": "2018-06-06T15:34:55.965728Z", "url": "https://files.pythonhosted.org/packages/e8/a7/85c028c8b6d0899f38fab9e97794e4a5dabf1d35b8653ca061590065efce/raga_practice_util-0.0.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2effe0b865b756456df6fe6b1cc73a12", "sha256": "3245c31a31498074e09f4264d99d115bd6248769dbfdd60238ec8ee7624ca2a8"}, "downloads": -1, "filename": "raga_practice_util-0.0.1.tar.gz", "has_sig": false, "md5_digest": "2effe0b865b756456df6fe6b1cc73a12", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3016, "upload_time": "2018-06-06T15:34:57", "upload_time_iso_8601": "2018-06-06T15:34:57.714248Z", "url": "https://files.pythonhosted.org/packages/d2/b6/9a77e34782c2afa27fda6452ac88335b746ce450e81120593ba3eb851e80/raga_practice_util-0.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:07:54 2020"}