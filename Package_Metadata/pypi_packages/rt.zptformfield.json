{"info": {"author": "RedTurtle Technology", "author_email": "sviluppoplone@redturtle.it", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Framework :: Plone", "Framework :: Plone :: 4.0", "Framework :: Plone :: 4.1", "Framework :: Plone :: 4.2", "Framework :: Plone :: 4.3", "Framework :: Zope2", "Intended Audience :: Developers", "Programming Language :: Python"], "description": "==============================================\nThis isn't the form library you're looking for\n==============================================\n\n95% you don't need this package: try some real Plone form libraries like:\n\n* `z3c.form`__\n* `collective.wtforms`__\n\n__ http://pythonhosted.org/z3c.form/\n__ https://github.com/collective/collective.wtforms\n\nMove along... move along...\n\n=========================================\nYour mind powers will not work on me, boy\n=========================================\n\nIf you really want to know what is this, keep reading.\n\n.. contents::\n   :local:\n\nIntroduction\n============\n\n**This is not a form library** for Plone, it's only a set of **ZPT macros** that you can use to \ncreate HTML form in the old way, keeping the Plone layout.\nFor this reason this product will not handle what to do when you submit the form, it's only focused onto\nrendering some advanced fields.\n\nThe nice thing is that you can use those macros with the old-way-TTW approach.\n\nField reference\n===============\n\nEvery field has some custom options you can/must configure, but some of them are globals:\n\n``fieldName`` (mandatory)\n    The name of the field, that is the name you will read from the request when sending the form \n``fieldLabel``\n    The label of the field\n``fieldHelp``\n    Additional explanation of the field\n``required``\n    Display the required UI information of the field. **Please note** that it's only a visual effect,\n    you are in charge of really handle the requirement.\n``cssFieldAdditionalClasses``\n    Additional CSS classes that will be appended to the div containing the whole field\n\nLines Field\n-----------\n\nThis field can be used to provide a list of elements (strings) for the submitted form.\nElements are loaded one at time from a text input.\n\n.. image:: http://blog.redturtle.it/pypi-images/rt.zptformfield/rt.zptformfield-0.1.0-lines01.png\n   :alt: Lines field\n   :align: center\n\nThe field name will be composed as \"*fieldName*:list\", so you will read a list of element directly from the request.\n\nAdditional parameters\n~~~~~~~~~~~~~~~~~~~~~\n\n``fieldType`` (default to \"text\")\n    The type of the HTML input field used to populate the list. You can change it to\n    HTML 5 new elements type to use some of the browser native features.\n``pattern``\n    The HTML 5 pattern attribute, for field validation. This regex is used to validate the field value before\n    adding it to the list\n``elements``\n    Existings elements to be used to populate the list. Provide a sequence of dicts with a \"title\" and \"value\"\n    couple\n\nHow to use\n~~~~~~~~~~\n\nCall the macro\n\n.. code-block:: xml\n\n    <tal:field define=\"fieldName string:test_lines_field;\n                       fieldLabel string:Testing lines field;\n                       fieldHelp string:Write something, then add it;\n                       \">\n        <metal:field-content use-macro=\"context/@@rt.zptformfield.lines/field\" />\n    </tal:field>\n\nYou need to include a JavaScript in your final HTML.\n\n.. code-block:: xml\n\n    <metal:head fill-slot=\"javascript_head_slot\">\n        <metal:field-content use-macro=\"context/@@rt.zptformfield.lines/javascript_helpers\" />\n    </metal:head>\n\nAutocomplete Lines Field\n------------------------\n\nThis field can be used to provide a list of elements (strings) for the submitted form.\nElements are selected by an autocomplete feature obtained through `jQueryUI Autocomplete`__;\nin Plone the easyest way to get this is by installing `collective.js.jqueryui`__.\n\n__ http://jqueryui.com/autocomplete/\n__ http://pypi.python.org/pypi/collective.js.jqueryui\n\n.. image:: http://blog.redturtle.it/pypi-images/rt.zptformfield/rt.zptformfield-0.1.0-autocomplete01.png\n   :alt: Autocomplete lines field\n   :align: center\n\nThe field name will be composed as \"*fieldName*:list\", so you will read a list of element directly from the request.\n\nAdditional parameters\n~~~~~~~~~~~~~~~~~~~~~\n\n``source`` (mandatory)\n    An URL that jQueryUI will call for getting selectable elements. This call must return a valid JSON sequence with\n    \"value\" and \"label\" elements.\n``elements``\n    Existings elements to be used to populate the list. Provide a sequence of dicts with a \"title\" and \"value\"\n    couple\n\nHow to use\n~~~~~~~~~~\n\nCall the macro\n\n.. code-block:: xml\n\n    <tal:field define=\"fieldName string:test_lines_field;\n                       source string:${portal_url}/@@rt.zptformfield.test.vocab;\n                       fieldLabel string:Testing autocomplete field;\n                       fieldHelp string:Write something and test the autocomplete feature;\n                       \">\n        <metal:field-content use-macro=\"context/@@rt.zptformfield.autocomplete_lines/field\" />\n    </tal:field>\n\nYou need to include a JavaScript in your final HTML.\n\n.. code-block:: xml\n\n    <metal:head fill-slot=\"javascript_head_slot\">\n        <metal:field-content use-macro=\"context/@@rt.zptformfield.autocomplete_lines/javascript_helpers\" />\n    </metal:head>\n\nTinyMCE Field\n-------------\n\nThis field render a textarea and trigger the default Plone WYSIWYG editor on the field (using the Products.TinyMCE features,\nversion 1.3 or better).\n\n.. image:: http://blog.redturtle.it/pypi-images/rt.zptformfield/rt.zptformfield-0.1.0-tinymce01.png\n   :alt: TinyMCE field\n   :align: center\n\nAdditional parameters\n~~~~~~~~~~~~~~~~~~~~~\n\n``rows``\n    Number of rows of the textarea\n``cols``\n    Number of columns of the textarea\n``configuration_method``\n    The view to be called for obtaining TinyMCE configuration. Do not use for loading the default ones\n``configuration_json``\n    Directly provide the JSON configuration. Do not use to load it from the \"*configuration_method*\"\n``value``\n    Default text in the field\n\nHow to use\n~~~~~~~~~~\n\nCall the macro\n\n.. code-block:: xml\n\n    <tal:field define=\"fieldName string:test_lines_field;\n                       fieldLabel string:Testing TinyMCE field;\n                       fieldHelp string:You can use the WYSIWYG editor below;\n                       rows python:15;\n                       value string:The cat is on the table;\n                       \">\n        <metal:field-content use-macro=\"context/@@rt.zptformfield.tinymce/field\" />\n    </tal:field>\n\nReference Field\n---------------\n\nThis field render a selection of a site content using the native `archetypes.referencebrowserwidget`__\nmachinery. The only problem is that the AJAX call **must** be called on a real Archetypes content that\nprovide a (not multivalued) reference field of a well know name (even if hidden and never used).\n\n__ https://pypi.python.org/pypi/archetypes.referencebrowserwidget/\n\n.. image:: http://blog.redturtle.it/pypi-images/rt.zptformfield/rt.zptformfield-0.1.0-reference01.png\n   :alt: Reference field\n   :align: center\n\nThe submitted data will be the uuid of the selected document.\n\nAdditional parameters\n~~~~~~~~~~~~~~~~~~~~~\n\n``startup_directory``\n    The directory where start browsing the site. Default is the current context.\n``context_helper``\n    The context of which call the ``refbrowserhelper`` view. Default is the current context.\n``fake_field_name`` (mandatory)\n    This field name will not be used in the form, but must be an existing Archetypes reference field name\n    on the context defined by \"context_helper\".\n``search_index``\n    The TextIndex to be used for the overlay search box. Default is Plone default \"SearchableText\".\n\nHow to use\n~~~~~~~~~~\n\nCall the macro\n\n.. code-block:: xml\n\n    <tal:field define=\"fieldName string:test_reference_field;\n                       fake_field_name string:foo_field;\n                       fieldLabel string:Testing reference browser field;\n                       fieldHelp string:Use the Plone reference browser feature.\n                       \">\n        <metal:field-content use-macro=\"context/@@rt.zptformfield.reference/field\" />\n    </tal:field>\n\nIn the example above we didn't provide ``context_helper`` parameter so it *must* be called on a Plone content\nthat behave the \"foo_field\" singlevalued reference field.\n\nYou need to include a JavaScript in your final HTML.\n\n.. code-block:: xml\n\n    <metal:head fill-slot=\"javascript_head_slot\">\n        <metal:field-content use-macro=\"context/@@rt.zptformfield.reference/javascript_helpers\" />\n    </metal:head>\n\nMultivalued Reference Field\n---------------------------\n\nThis is the same as the reference field above, but from the overlay displayed you will be able to select multiple\nelements.\n\n.. image:: http://blog.redturtle.it/pypi-images/rt.zptformfield/rt.zptformfield-0.1.0-multireference01.png\n   :alt: Reference field\n   :align: center\n\nThe submitted data will be the a uuid list of selected documents.\n\nAdditional parameters\n~~~~~~~~~~~~~~~~~~~~~\n\nSee \"Reference Field\"\n\nHow to use\n~~~~~~~~~~\n\nCall the macro\n\n.. code-block:: xml\n\n    <tal:field define=\"fieldName string:test_multivalued_reference_field;\n                       fake_field_name string:relatedItems;\n                       fieldLabel string:Testing multivalued reference browser field;\n                       fieldHelp string:Use the Plone reference browser feature.\n                       \">\n        <metal:field-content use-macro=\"context/@@rt.zptformfield.multivalued_reference/field\" />\n    </tal:field>\n\nIn the example above we didn't provide ``context_helper`` parameter so it *must* be called on a Plone content\nthat behave the \"relatedItems\" multivalued reference field (by default: all content types).\n\nYou need to include a JavaScript in your final HTML.\n\n.. code-block:: xml\n\n    <metal:head fill-slot=\"javascript_head_slot\">\n        <metal:field-content use-macro=\"context/@@rt.zptformfield.multivalued_reference/javascript_helpers\" />\n    </metal:head>\n\nCalendar Field\n--------------\n\nThis field can be used to submit a date (or date-time) using the Plone default calendar.\nDate can be filled by using a set of HTML select elements or with a popup calendar widget.\n\n.. image:: http://blog.redturtle.it/pypi-images/rt.zptformfield/rt.zptformfield-0.2.0-calendar01.png\n   :alt: Calendar field\n   :align: center\n\nThis field is based on Plone inner calendar support (JavaScript and ZPT macros) so you can't use this outside\nPlone.\n\nAdditional parameters\n~~~~~~~~~~~~~~~~~~~~~\n\n``value``\n    The date to be displayed (a `Zope DateTime`__ object). Default will not show any date.\n``show_hm``\n    Boolean value for showing the hours/minutes widget elements. Default will show them.\n``show_ymd``\n    Boolean value for showing the day widget elements. Default will show them.\n``starting_year``\n    Integer value for defining the first year to be used in the year combo box.\n``ending_year``\n    Integer value for defining the last year to be used in the year combo box.\n``future_years``\n    Integer value for defining how many years in the future (from current date) will be shown\n    in the calendar widget. Will be ignored if ``ending_year`` is provided.  \n``minute_step``\n    If minutes combobox is shown, define the interval between minutes values. Plone default is 5.\n``calendar_lang``\n    Language of the calendar popup UI. For an old and never fixed `Plone bug`__ the default is to\n    english language and not to the current language.\n    Change at your own risk. Also: *note* that this parameter is for the ``javascript_helpers``\n    macros (see example below)\n\n__ https://pypi.python.org/pypi/DateTime\n__ https://dev.plone.org/ticket/13189\n\n\nHow to use\n~~~~~~~~~~\n\nCall the macro\n\n.. code-block:: xml\n\n    <tal:field define=\"fieldName string:test_calendar_field;\n                       fieldLabel string:Testing Calendar field;\n                       fieldHelp string:The standard Plone calendar;\">\n        <metal:field-content use-macro=\"context/@@rt.zptformfield.calendar/field\" />\n    </tal:field>\n\nYou need to include a JavaScript in your final HTML. Another **warning** about the usage of\n``calendar_lang`` parameter: it's buggy.\n\n.. code-block:: xml\n\n    <metal:head fill-slot=\"javascript_head_slot\" tal:define=\"calendar_lang context/@@plone_portal_state/language;\">\n        <metal:field-content use-macro=\"context/@@rt.zptformfield.calendar/javascript_helpers\" />\n    </metal:head>\n\nFinally, the calendar popup needs some CSS styles:\n\n.. code-block:: xml\n\n    <metal:head fill-slot=\"style_slot\">\n        <link rel=\"stylesheet\" type=\"text/css\" href=\"jscalendar/calendar-system.css\"\n              tal:attributes=\"href string:$portal_url/jscalendar/calendar-system.css\" />\n    </metal:head>\n\nLive examples\n=============\n\nThis product contains a set of demo views for all fields. You must activate them by including the ``tests.zcml``\nfile.\n\n::\n\n    [instance]\n    eggs +=\n        ...\n        rt.zptformfield\n    \n    zcml +=\n        ...\n        rt.zptformfield:tests.zcml\n\nCheck `the code`__ for an updated list of examples.\n\n__ https://github.com/RedTurtle/rt.zptformfield/blob/master/src/rt/zptformfield/tests/configure.zcml\n\n=======\nAuthors\n=======\n\nThis product was developed by RedTurtle Technology team.\n\n.. image:: http://www.redturtle.it/redturtle_banner.png\n   :alt: RedTurtle Technology Site\n   :target: http://www.redturtle.it/\n\nChangelog\n=========\n\n0.2.1 (2015-09-08)\n------------------\n\n- Calendar popup UI language default to english\n  [keul]\n- Added a way to change calendar language, but added the\n  proper warning in the documentation\n  [keul]\n- Added the missing but needed ``calendar_formfield`` parameter.\n  Calendar JavaScript was not working.\n  [keul]\n\n0.2.0 (2014-10-09)\n------------------\n\n- Added the Calendar field support and example\n  [keul]\n\n0.1.0a1 (2013-12-18)\n--------------------\n\n- Initial release", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/RedTurtle/rt.zptformfield", "keywords": "plone zpt zope form macro", "license": "GPL", "maintainer": null, "maintainer_email": null, "name": "rt.zptformfield", "package_url": "https://pypi.org/project/rt.zptformfield/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/rt.zptformfield/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://github.com/RedTurtle/rt.zptformfield"}, "release_url": "https://pypi.org/project/rt.zptformfield/0.2.1/", "requires_dist": null, "requires_python": null, "summary": "Some ZPT macros for Zope/Plone HTML forms development", "version": "0.2.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"this-isn-t-the-form-library-you-re-looking-for\">\n<h2>This isn\u2019t the form library you\u2019re looking for</h2>\n<p>95% you don\u2019t need this package: try some real Plone form libraries like:</p>\n<ul>\n<li><a href=\"http://pythonhosted.org/z3c.form/\" rel=\"nofollow\">z3c.form</a></li>\n<li><a href=\"https://github.com/collective/collective.wtforms\" rel=\"nofollow\">collective.wtforms</a></li>\n</ul>\n<p>Move along\u2026 move along\u2026</p>\n</div>\n<div id=\"your-mind-powers-will-not-work-on-me-boy\">\n<h2>Your mind powers will not work on me, boy</h2>\n<p>If you really want to know what is this, keep reading.</p>\n<div id=\"contents\">\n<ul>\n<li><a href=\"#introduction\" id=\"id21\" rel=\"nofollow\">Introduction</a></li>\n<li><a href=\"#field-reference\" id=\"id22\" rel=\"nofollow\">Field reference</a><ul>\n<li><a href=\"#lines-field\" id=\"id23\" rel=\"nofollow\">Lines Field</a><ul>\n<li><a href=\"#additional-parameters\" id=\"id24\" rel=\"nofollow\">Additional parameters</a></li>\n<li><a href=\"#how-to-use\" id=\"id25\" rel=\"nofollow\">How to use</a></li>\n</ul>\n</li>\n<li><a href=\"#autocomplete-lines-field\" id=\"id26\" rel=\"nofollow\">Autocomplete Lines Field</a><ul>\n<li><a href=\"#id5\" id=\"id27\" rel=\"nofollow\">Additional parameters</a></li>\n<li><a href=\"#id6\" id=\"id28\" rel=\"nofollow\">How to use</a></li>\n</ul>\n</li>\n<li><a href=\"#tinymce-field\" id=\"id29\" rel=\"nofollow\">TinyMCE Field</a><ul>\n<li><a href=\"#id7\" id=\"id30\" rel=\"nofollow\">Additional parameters</a></li>\n<li><a href=\"#id8\" id=\"id31\" rel=\"nofollow\">How to use</a></li>\n</ul>\n</li>\n<li><a href=\"#reference-field\" id=\"id32\" rel=\"nofollow\">Reference Field</a><ul>\n<li><a href=\"#id10\" id=\"id33\" rel=\"nofollow\">Additional parameters</a></li>\n<li><a href=\"#id11\" id=\"id34\" rel=\"nofollow\">How to use</a></li>\n</ul>\n</li>\n<li><a href=\"#multivalued-reference-field\" id=\"id35\" rel=\"nofollow\">Multivalued Reference Field</a><ul>\n<li><a href=\"#id12\" id=\"id36\" rel=\"nofollow\">Additional parameters</a></li>\n<li><a href=\"#id13\" id=\"id37\" rel=\"nofollow\">How to use</a></li>\n</ul>\n</li>\n<li><a href=\"#calendar-field\" id=\"id38\" rel=\"nofollow\">Calendar Field</a><ul>\n<li><a href=\"#id14\" id=\"id39\" rel=\"nofollow\">Additional parameters</a></li>\n<li><a href=\"#id17\" id=\"id40\" rel=\"nofollow\">How to use</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#live-examples\" id=\"id41\" rel=\"nofollow\">Live examples</a></li>\n</ul>\n</div>\n<div id=\"introduction\">\n<h3><a href=\"#id21\" rel=\"nofollow\">Introduction</a></h3>\n<p><strong>This is not a form library</strong> for Plone, it\u2019s only a set of <strong>ZPT macros</strong> that you can use to\ncreate HTML form in the old way, keeping the Plone layout.\nFor this reason this product will not handle what to do when you submit the form, it\u2019s only focused onto\nrendering some advanced fields.</p>\n<p>The nice thing is that you can use those macros with the old-way-TTW approach.</p>\n</div>\n<div id=\"field-reference\">\n<h3><a href=\"#id22\" rel=\"nofollow\">Field reference</a></h3>\n<p>Every field has some custom options you can/must configure, but some of them are globals:</p>\n<dl>\n<dt><tt>fieldName</tt> (mandatory)</dt>\n<dd>The name of the field, that is the name you will read from the request when sending the form</dd>\n<dt><tt>fieldLabel</tt></dt>\n<dd>The label of the field</dd>\n<dt><tt>fieldHelp</tt></dt>\n<dd>Additional explanation of the field</dd>\n<dt><tt>required</tt></dt>\n<dd>Display the required UI information of the field. <strong>Please note</strong> that it\u2019s only a visual effect,\nyou are in charge of really handle the requirement.</dd>\n<dt><tt>cssFieldAdditionalClasses</tt></dt>\n<dd>Additional CSS classes that will be appended to the div containing the whole field</dd>\n</dl>\n<div id=\"lines-field\">\n<h4><a href=\"#id23\" rel=\"nofollow\">Lines Field</a></h4>\n<p>This field can be used to provide a list of elements (strings) for the submitted form.\nElements are loaded one at time from a text input.</p>\n<img alt=\"Lines field\" class=\"align-center\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f60dd7a0e2c03d5145b80b1c27108b487db74116/687474703a2f2f626c6f672e726564747572746c652e69742f707970692d696d616765732f72742e7a7074666f726d6669656c642f72742e7a7074666f726d6669656c642d302e312e302d6c696e657330312e706e67\">\n<p>The field name will be composed as \u201c<em>fieldName</em>:list\u201d, so you will read a list of element directly from the request.</p>\n<div id=\"additional-parameters\">\n<h5><a href=\"#id24\" rel=\"nofollow\">Additional parameters</a></h5>\n<dl>\n<dt><tt>fieldType</tt> (default to \u201ctext\u201d)</dt>\n<dd>The type of the HTML input field used to populate the list. You can change it to\nHTML 5 new elements type to use some of the browser native features.</dd>\n<dt><tt>pattern</tt></dt>\n<dd>The HTML 5 pattern attribute, for field validation. This regex is used to validate the field value before\nadding it to the list</dd>\n<dt><tt>elements</tt></dt>\n<dd>Existings elements to be used to populate the list. Provide a sequence of dicts with a \u201ctitle\u201d and \u201cvalue\u201d\ncouple</dd>\n</dl>\n</div>\n<div id=\"how-to-use\">\n<h5><a href=\"#id25\" rel=\"nofollow\">How to use</a></h5>\n<p>Call the macro</p>\n<pre><span class=\"nt\">&lt;tal:field</span> <span class=\"na\">define=</span><span class=\"s\">\"fieldName string:test_lines_field;\n                   fieldLabel string:Testing lines field;\n                   fieldHelp string:Write something, then add it;\n                   \"</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;metal:field-content</span> <span class=\"na\">use-macro=</span><span class=\"s\">\"context/@@rt.zptformfield.lines/field\"</span> <span class=\"nt\">/&gt;</span>\n<span class=\"nt\">&lt;/tal:field&gt;</span>\n</pre>\n<p>You need to include a JavaScript in your final HTML.</p>\n<pre><span class=\"nt\">&lt;metal:head</span> <span class=\"na\">fill-slot=</span><span class=\"s\">\"javascript_head_slot\"</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;metal:field-content</span> <span class=\"na\">use-macro=</span><span class=\"s\">\"context/@@rt.zptformfield.lines/javascript_helpers\"</span> <span class=\"nt\">/&gt;</span>\n<span class=\"nt\">&lt;/metal:head&gt;</span>\n</pre>\n</div>\n</div>\n<div id=\"autocomplete-lines-field\">\n<h4><a href=\"#id26\" rel=\"nofollow\">Autocomplete Lines Field</a></h4>\n<p>This field can be used to provide a list of elements (strings) for the submitted form.\nElements are selected by an autocomplete feature obtained through <a href=\"http://jqueryui.com/autocomplete/\" rel=\"nofollow\">jQueryUI Autocomplete</a>;\nin Plone the easyest way to get this is by installing <a href=\"http://pypi.python.org/pypi/collective.js.jqueryui\" rel=\"nofollow\">collective.js.jqueryui</a>.</p>\n<img alt=\"Autocomplete lines field\" class=\"align-center\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/be1e02b1485e37dac44d85de5f4643352e0de6f6/687474703a2f2f626c6f672e726564747572746c652e69742f707970692d696d616765732f72742e7a7074666f726d6669656c642f72742e7a7074666f726d6669656c642d302e312e302d6175746f636f6d706c65746530312e706e67\">\n<p>The field name will be composed as \u201c<em>fieldName</em>:list\u201d, so you will read a list of element directly from the request.</p>\n<div id=\"id5\">\n<h5><a href=\"#id27\" rel=\"nofollow\">Additional parameters</a></h5>\n<dl>\n<dt><tt>source</tt> (mandatory)</dt>\n<dd>An URL that jQueryUI will call for getting selectable elements. This call must return a valid JSON sequence with\n\u201cvalue\u201d and \u201clabel\u201d elements.</dd>\n<dt><tt>elements</tt></dt>\n<dd>Existings elements to be used to populate the list. Provide a sequence of dicts with a \u201ctitle\u201d and \u201cvalue\u201d\ncouple</dd>\n</dl>\n</div>\n<div id=\"id6\">\n<h5><a href=\"#id28\" rel=\"nofollow\">How to use</a></h5>\n<p>Call the macro</p>\n<pre><span class=\"nt\">&lt;tal:field</span> <span class=\"na\">define=</span><span class=\"s\">\"fieldName string:test_lines_field;\n                   source string:${portal_url}/@@rt.zptformfield.test.vocab;\n                   fieldLabel string:Testing autocomplete field;\n                   fieldHelp string:Write something and test the autocomplete feature;\n                   \"</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;metal:field-content</span> <span class=\"na\">use-macro=</span><span class=\"s\">\"context/@@rt.zptformfield.autocomplete_lines/field\"</span> <span class=\"nt\">/&gt;</span>\n<span class=\"nt\">&lt;/tal:field&gt;</span>\n</pre>\n<p>You need to include a JavaScript in your final HTML.</p>\n<pre><span class=\"nt\">&lt;metal:head</span> <span class=\"na\">fill-slot=</span><span class=\"s\">\"javascript_head_slot\"</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;metal:field-content</span> <span class=\"na\">use-macro=</span><span class=\"s\">\"context/@@rt.zptformfield.autocomplete_lines/javascript_helpers\"</span> <span class=\"nt\">/&gt;</span>\n<span class=\"nt\">&lt;/metal:head&gt;</span>\n</pre>\n</div>\n</div>\n<div id=\"tinymce-field\">\n<h4><a href=\"#id29\" rel=\"nofollow\">TinyMCE Field</a></h4>\n<p>This field render a textarea and trigger the default Plone WYSIWYG editor on the field (using the Products.TinyMCE features,\nversion 1.3 or better).</p>\n<img alt=\"TinyMCE field\" class=\"align-center\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6655347983595f87635b0343e2b43e5bb7065833/687474703a2f2f626c6f672e726564747572746c652e69742f707970692d696d616765732f72742e7a7074666f726d6669656c642f72742e7a7074666f726d6669656c642d302e312e302d74696e796d636530312e706e67\">\n<div id=\"id7\">\n<h5><a href=\"#id30\" rel=\"nofollow\">Additional parameters</a></h5>\n<dl>\n<dt><tt>rows</tt></dt>\n<dd>Number of rows of the textarea</dd>\n<dt><tt>cols</tt></dt>\n<dd>Number of columns of the textarea</dd>\n<dt><tt>configuration_method</tt></dt>\n<dd>The view to be called for obtaining TinyMCE configuration. Do not use for loading the default ones</dd>\n<dt><tt>configuration_json</tt></dt>\n<dd>Directly provide the JSON configuration. Do not use to load it from the \u201c<em>configuration_method</em>\u201d</dd>\n<dt><tt>value</tt></dt>\n<dd>Default text in the field</dd>\n</dl>\n</div>\n<div id=\"id8\">\n<h5><a href=\"#id31\" rel=\"nofollow\">How to use</a></h5>\n<p>Call the macro</p>\n<pre><span class=\"nt\">&lt;tal:field</span> <span class=\"na\">define=</span><span class=\"s\">\"fieldName string:test_lines_field;\n                   fieldLabel string:Testing TinyMCE field;\n                   fieldHelp string:You can use the WYSIWYG editor below;\n                   rows python:15;\n                   value string:The cat is on the table;\n                   \"</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;metal:field-content</span> <span class=\"na\">use-macro=</span><span class=\"s\">\"context/@@rt.zptformfield.tinymce/field\"</span> <span class=\"nt\">/&gt;</span>\n<span class=\"nt\">&lt;/tal:field&gt;</span>\n</pre>\n</div>\n</div>\n<div id=\"reference-field\">\n<h4><a href=\"#id32\" rel=\"nofollow\">Reference Field</a></h4>\n<p>This field render a selection of a site content using the native <a href=\"https://pypi.python.org/pypi/archetypes.referencebrowserwidget/\" rel=\"nofollow\">archetypes.referencebrowserwidget</a>\nmachinery. The only problem is that the AJAX call <strong>must</strong> be called on a real Archetypes content that\nprovide a (not multivalued) reference field of a well know name (even if hidden and never used).</p>\n<img alt=\"Reference field\" class=\"align-center\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/bd5335ea29d9af71bcf616e55e27c3ab0d00297b/687474703a2f2f626c6f672e726564747572746c652e69742f707970692d696d616765732f72742e7a7074666f726d6669656c642f72742e7a7074666f726d6669656c642d302e312e302d7265666572656e636530312e706e67\">\n<p>The submitted data will be the uuid of the selected document.</p>\n<div id=\"id10\">\n<h5><a href=\"#id33\" rel=\"nofollow\">Additional parameters</a></h5>\n<dl>\n<dt><tt>startup_directory</tt></dt>\n<dd>The directory where start browsing the site. Default is the current context.</dd>\n<dt><tt>context_helper</tt></dt>\n<dd>The context of which call the <tt>refbrowserhelper</tt> view. Default is the current context.</dd>\n<dt><tt>fake_field_name</tt> (mandatory)</dt>\n<dd>This field name will not be used in the form, but must be an existing Archetypes reference field name\non the context defined by \u201ccontext_helper\u201d.</dd>\n<dt><tt>search_index</tt></dt>\n<dd>The TextIndex to be used for the overlay search box. Default is Plone default \u201cSearchableText\u201d.</dd>\n</dl>\n</div>\n<div id=\"id11\">\n<h5><a href=\"#id34\" rel=\"nofollow\">How to use</a></h5>\n<p>Call the macro</p>\n<pre><span class=\"nt\">&lt;tal:field</span> <span class=\"na\">define=</span><span class=\"s\">\"fieldName string:test_reference_field;\n                   fake_field_name string:foo_field;\n                   fieldLabel string:Testing reference browser field;\n                   fieldHelp string:Use the Plone reference browser feature.\n                   \"</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;metal:field-content</span> <span class=\"na\">use-macro=</span><span class=\"s\">\"context/@@rt.zptformfield.reference/field\"</span> <span class=\"nt\">/&gt;</span>\n<span class=\"nt\">&lt;/tal:field&gt;</span>\n</pre>\n<p>In the example above we didn\u2019t provide <tt>context_helper</tt> parameter so it <em>must</em> be called on a Plone content\nthat behave the \u201cfoo_field\u201d singlevalued reference field.</p>\n<p>You need to include a JavaScript in your final HTML.</p>\n<pre><span class=\"nt\">&lt;metal:head</span> <span class=\"na\">fill-slot=</span><span class=\"s\">\"javascript_head_slot\"</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;metal:field-content</span> <span class=\"na\">use-macro=</span><span class=\"s\">\"context/@@rt.zptformfield.reference/javascript_helpers\"</span> <span class=\"nt\">/&gt;</span>\n<span class=\"nt\">&lt;/metal:head&gt;</span>\n</pre>\n</div>\n</div>\n<div id=\"multivalued-reference-field\">\n<h4><a href=\"#id35\" rel=\"nofollow\">Multivalued Reference Field</a></h4>\n<p>This is the same as the reference field above, but from the overlay displayed you will be able to select multiple\nelements.</p>\n<img alt=\"Reference field\" class=\"align-center\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/428173da221dd06854c0fc556f2e06dfe2e28fd8/687474703a2f2f626c6f672e726564747572746c652e69742f707970692d696d616765732f72742e7a7074666f726d6669656c642f72742e7a7074666f726d6669656c642d302e312e302d6d756c74697265666572656e636530312e706e67\">\n<p>The submitted data will be the a uuid list of selected documents.</p>\n<div id=\"id12\">\n<h5><a href=\"#id36\" rel=\"nofollow\">Additional parameters</a></h5>\n<p>See \u201cReference Field\u201d</p>\n</div>\n<div id=\"id13\">\n<h5><a href=\"#id37\" rel=\"nofollow\">How to use</a></h5>\n<p>Call the macro</p>\n<pre><span class=\"nt\">&lt;tal:field</span> <span class=\"na\">define=</span><span class=\"s\">\"fieldName string:test_multivalued_reference_field;\n                   fake_field_name string:relatedItems;\n                   fieldLabel string:Testing multivalued reference browser field;\n                   fieldHelp string:Use the Plone reference browser feature.\n                   \"</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;metal:field-content</span> <span class=\"na\">use-macro=</span><span class=\"s\">\"context/@@rt.zptformfield.multivalued_reference/field\"</span> <span class=\"nt\">/&gt;</span>\n<span class=\"nt\">&lt;/tal:field&gt;</span>\n</pre>\n<p>In the example above we didn\u2019t provide <tt>context_helper</tt> parameter so it <em>must</em> be called on a Plone content\nthat behave the \u201crelatedItems\u201d multivalued reference field (by default: all content types).</p>\n<p>You need to include a JavaScript in your final HTML.</p>\n<pre><span class=\"nt\">&lt;metal:head</span> <span class=\"na\">fill-slot=</span><span class=\"s\">\"javascript_head_slot\"</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;metal:field-content</span> <span class=\"na\">use-macro=</span><span class=\"s\">\"context/@@rt.zptformfield.multivalued_reference/javascript_helpers\"</span> <span class=\"nt\">/&gt;</span>\n<span class=\"nt\">&lt;/metal:head&gt;</span>\n</pre>\n</div>\n</div>\n<div id=\"calendar-field\">\n<h4><a href=\"#id38\" rel=\"nofollow\">Calendar Field</a></h4>\n<p>This field can be used to submit a date (or date-time) using the Plone default calendar.\nDate can be filled by using a set of HTML select elements or with a popup calendar widget.</p>\n<img alt=\"Calendar field\" class=\"align-center\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b887e79e35274374161969e007a436320600ec94/687474703a2f2f626c6f672e726564747572746c652e69742f707970692d696d616765732f72742e7a7074666f726d6669656c642f72742e7a7074666f726d6669656c642d302e322e302d63616c656e64617230312e706e67\">\n<p>This field is based on Plone inner calendar support (JavaScript and ZPT macros) so you can\u2019t use this outside\nPlone.</p>\n<div id=\"id14\">\n<h5><a href=\"#id39\" rel=\"nofollow\">Additional parameters</a></h5>\n<dl>\n<dt><tt>value</tt></dt>\n<dd>The date to be displayed (a <a href=\"https://pypi.python.org/pypi/DateTime\" rel=\"nofollow\">Zope DateTime</a> object). Default will not show any date.</dd>\n<dt><tt>show_hm</tt></dt>\n<dd>Boolean value for showing the hours/minutes widget elements. Default will show them.</dd>\n<dt><tt>show_ymd</tt></dt>\n<dd>Boolean value for showing the day widget elements. Default will show them.</dd>\n<dt><tt>starting_year</tt></dt>\n<dd>Integer value for defining the first year to be used in the year combo box.</dd>\n<dt><tt>ending_year</tt></dt>\n<dd>Integer value for defining the last year to be used in the year combo box.</dd>\n<dt><tt>future_years</tt></dt>\n<dd>Integer value for defining how many years in the future (from current date) will be shown\nin the calendar widget. Will be ignored if <tt>ending_year</tt> is provided.</dd>\n<dt><tt>minute_step</tt></dt>\n<dd>If minutes combobox is shown, define the interval between minutes values. Plone default is 5.</dd>\n<dt><tt>calendar_lang</tt></dt>\n<dd>Language of the calendar popup UI. For an old and never fixed <a href=\"https://dev.plone.org/ticket/13189\" rel=\"nofollow\">Plone bug</a> the default is to\nenglish language and not to the current language.\nChange at your own risk. Also: <em>note</em> that this parameter is for the <tt>javascript_helpers</tt>\nmacros (see example below)</dd>\n</dl>\n</div>\n<div id=\"id17\">\n<h5><a href=\"#id40\" rel=\"nofollow\">How to use</a></h5>\n<p>Call the macro</p>\n<pre><span class=\"nt\">&lt;tal:field</span> <span class=\"na\">define=</span><span class=\"s\">\"fieldName string:test_calendar_field;\n                   fieldLabel string:Testing Calendar field;\n                   fieldHelp string:The standard Plone calendar;\"</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;metal:field-content</span> <span class=\"na\">use-macro=</span><span class=\"s\">\"context/@@rt.zptformfield.calendar/field\"</span> <span class=\"nt\">/&gt;</span>\n<span class=\"nt\">&lt;/tal:field&gt;</span>\n</pre>\n<p>You need to include a JavaScript in your final HTML. Another <strong>warning</strong> about the usage of\n<tt>calendar_lang</tt> parameter: it\u2019s buggy.</p>\n<pre><span class=\"nt\">&lt;metal:head</span> <span class=\"na\">fill-slot=</span><span class=\"s\">\"javascript_head_slot\"</span> <span class=\"na\">tal:define=</span><span class=\"s\">\"calendar_lang context/@@plone_portal_state/language;\"</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;metal:field-content</span> <span class=\"na\">use-macro=</span><span class=\"s\">\"context/@@rt.zptformfield.calendar/javascript_helpers\"</span> <span class=\"nt\">/&gt;</span>\n<span class=\"nt\">&lt;/metal:head&gt;</span>\n</pre>\n<p>Finally, the calendar popup needs some CSS styles:</p>\n<pre><span class=\"nt\">&lt;metal:head</span> <span class=\"na\">fill-slot=</span><span class=\"s\">\"style_slot\"</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;link</span> <span class=\"na\">rel=</span><span class=\"s\">\"stylesheet\"</span> <span class=\"na\">type=</span><span class=\"s\">\"text/css\"</span> <span class=\"na\">href=</span><span class=\"s\">\"jscalendar/calendar-system.css\"</span>\n          <span class=\"na\">tal:attributes=</span><span class=\"s\">\"href string:$portal_url/jscalendar/calendar-system.css\"</span> <span class=\"nt\">/&gt;</span>\n<span class=\"nt\">&lt;/metal:head&gt;</span>\n</pre>\n</div>\n</div>\n</div>\n<div id=\"live-examples\">\n<h3><a href=\"#id41\" rel=\"nofollow\">Live examples</a></h3>\n<p>This product contains a set of demo views for all fields. You must activate them by including the <tt>tests.zcml</tt>\nfile.</p>\n<pre>[instance]\neggs +=\n    ...\n    rt.zptformfield\n\nzcml +=\n    ...\n    rt.zptformfield:tests.zcml\n</pre>\n<p>Check <a href=\"https://github.com/RedTurtle/rt.zptformfield/blob/master/src/rt/zptformfield/tests/configure.zcml\" rel=\"nofollow\">the code</a> for an updated list of examples.</p>\n</div>\n</div>\n<div id=\"authors\">\n<h2>Authors</h2>\n<p>This product was developed by RedTurtle Technology team.</p>\n<a href=\"http://www.redturtle.it/\" rel=\"nofollow\"><img alt=\"RedTurtle Technology Site\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6ea6aa086619f59e61ad184ae3739fda4ec31e20/687474703a2f2f7777772e726564747572746c652e69742f726564747572746c655f62616e6e65722e706e67\"></a>\n<div id=\"changelog\">\n<h3>Changelog</h3>\n<div id=\"id19\">\n<h4>0.2.1 (2015-09-08)</h4>\n<ul>\n<li>Calendar popup UI language default to english\n[keul]</li>\n<li>Added a way to change calendar language, but added the\nproper warning in the documentation\n[keul]</li>\n<li>Added the missing but needed <tt>calendar_formfield</tt> parameter.\nCalendar JavaScript was not working.\n[keul]</li>\n</ul>\n</div>\n<div id=\"id20\">\n<h4>0.2.0 (2014-10-09)</h4>\n<ul>\n<li>Added the Calendar field support and example\n[keul]</li>\n</ul>\n</div>\n<div id=\"a1-2013-12-18\">\n<h4>0.1.0a1 (2013-12-18)</h4>\n<ul>\n<li>Initial release</li>\n</ul>\n</div>\n</div>\n</div>\n\n          </div>"}, "last_serial": 1713430, "releases": {"0.1.0a1": [{"comment_text": "", "digests": {"md5": "97b829e248f0d7971d07da43780ab9a6", "sha256": "977c5c7c48eed7de81feb20d06439b5604078873fd4aa8ac539ba4ec4bd012a6"}, "downloads": -1, "filename": "rt.zptformfield-0.1.0a1.zip", "has_sig": false, "md5_digest": "97b829e248f0d7971d07da43780ab9a6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 40421, "upload_time": "2013-12-18T16:01:04", "upload_time_iso_8601": "2013-12-18T16:01:04.123345Z", "url": "https://files.pythonhosted.org/packages/d4/66/17040dcd6a4a184b0c5b77c42384157c68420e3e4650512d39111c4d5960/rt.zptformfield-0.1.0a1.zip", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "36047abf7c9e6068841064f162cd94e5", "sha256": "f88dd36c82fe3e7ef21d0e80870844e4985ea45870628c591808db0886b1077c"}, "downloads": -1, "filename": "rt.zptformfield-0.2.0.zip", "has_sig": false, "md5_digest": "36047abf7c9e6068841064f162cd94e5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 44140, "upload_time": "2014-10-09T13:03:04", "upload_time_iso_8601": "2014-10-09T13:03:04.137040Z", "url": "https://files.pythonhosted.org/packages/5f/28/7f4a2ae744efe6a3764d643e346b275cb3cefa291a84d8ce21c78c055f28/rt.zptformfield-0.2.0.zip", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "0d34bb150c27508ef7ecbe73a32b844f", "sha256": "8e8e9879b8163198151eb0ba398f0ef800b551a5ffa253748f3954f96f30415d"}, "downloads": -1, "filename": "rt.zptformfield-0.2.1.tar.gz", "has_sig": false, "md5_digest": "0d34bb150c27508ef7ecbe73a32b844f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22940, "upload_time": "2015-09-08T15:21:15", "upload_time_iso_8601": "2015-09-08T15:21:15.140423Z", "url": "https://files.pythonhosted.org/packages/ca/9d/0ae9bb0d4e781380e99dcaf7c75216457b3001999aaab2f8fb6e9dba0554/rt.zptformfield-0.2.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "0d34bb150c27508ef7ecbe73a32b844f", "sha256": "8e8e9879b8163198151eb0ba398f0ef800b551a5ffa253748f3954f96f30415d"}, "downloads": -1, "filename": "rt.zptformfield-0.2.1.tar.gz", "has_sig": false, "md5_digest": "0d34bb150c27508ef7ecbe73a32b844f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22940, "upload_time": "2015-09-08T15:21:15", "upload_time_iso_8601": "2015-09-08T15:21:15.140423Z", "url": "https://files.pythonhosted.org/packages/ca/9d/0ae9bb0d4e781380e99dcaf7c75216457b3001999aaab2f8fb6e9dba0554/rt.zptformfield-0.2.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:00:20 2020"}