{"info": {"author": "Jamie Scott", "author_email": "contact@jami.org.uk", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "Intended Audience :: System Administrators", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "# OpenVPN Management Interface Python API\n\n[![Build Status](https://travis-ci.org/Jamie-/openvpn-api.svg?branch=master)](https://travis-ci.org/Jamie-/openvpn-api)\n![PyPI](https://img.shields.io/pypi/v/openvpn-api.svg)\n\n## Summary\n\nA Python API for interacting with the OpenVPN management interface.\nCurrently a work in progress so support for client management interfaces and events is lacking.\n\nVery useful for extracting metrics and status from OpenVPN server management interfaces.\n\nThis project was inspired by the work of Marcus Furlong in creating [openvpn-monitor](https://github.com/furlongm/openvpn-monitor).\nIt also uses [openvpn-status](https://pypi.org/project/openvpn-status/) by Jiangge Zhang for parsing the output of the OpenVPN `status` command as there's no point reinventing the wheel when an excellent solution already exists.\n\nRelease notes can be found [here on GitHub](https://github.com/Jamie-/openvpn-api/releases).\n\n## Requirements\nThis project requires Python 3.6 or later.\n\n## Installation\n\n#### Via PyPI\n```\npip install openvpn-api\n```\n\n#### Via Source\n```\ngit clone https://github.com/Jamie-/openvpn-api.git\ncd openvpn-api\npython setup.py install\n```\n\n## Usage\n\n### Introduction\nCreate a `VPN` object for your management interface connection.\n```python\nimport openvpn_api.VPN\nv = openvpn_api.VPN('localhost', 7505)\n```\n\nThen you can either manage connection and disconnection yourself\n```python\nv.connect()\n# Do some stuff, e.g.\nprint(v.release)\nv.disconnect()\n```\nIf the connection is successful, `v.connect()` will return `True`.\nHowever, if the connection fails `v.connect()` will raise an `openvpn_api.errors.ConnectError` exception with the reason for the connection failure.\n\nOr use the connection context manager\n```python\nwith v.connection():\n    # Do some stuff, e.g.\n    print(v.release)\n```\n\nAfter initialising a VPN object, we can query specifics about it.\n\nWe can get the address we're communicating to the management interface on\n```python\n>>> v.mgmt_address\n'localhost:7505'\n```\n\nAnd also see if this is via TCP/IP or a Unix socket\n```python\n>>> v.type\n'ip'\n```\n\nor\n```python\n>>> v.type\n'socket'\n```\n\nThese are represented by the `VPNType` class as `VPNType.IP` or `VPNType.UNIX_SOCKET`\n```python\n>>> v.type\n'ip'\n>>> v.type == openvpn_api.VPNType.IP\nTrue\n```\n\n### Daemon Interaction\nAll the properties that get information about the OpenVPN service you're connected to are stateful.\nThe first time you call one of these methods it caches the information it needs so future calls are super fast.\nThe information cached is unlikely to change often, unlike the status and metrics we can also fetch which are likely to change very frequently.\n\nWe can fetch the release string for the version of OpenVPN we're using\n```python\n>>> v.release\n'OpenVPN 2.4.4 x86_64-pc-linux-gnu [SSL (OpenSSL)] [LZO] [LZ4] [EPOLL] [PKCS11] [MH/PKTINFO] [AEAD] built on Sep  5 2018'\n```\n\nOr just the version number\n```python\n>>> v.version\n'2.4.4'\n```\n\nWe can get more information about the service by looking at it's state which is returned as a State object\n```python\n>>> s = v.state\n>>> s\n<models.state.State object at 0x7f5eb549a630>\n```\n\nThe state cached by all 3 of these properties can be also be cleared and will be repopulated on the next call\n```python\nv.clear_cache()\n```\n\n#### Daemon State\nThe State object contains the following things:\n\nThe daemon's current mode, `client` or `server`\n```python\n>>> s.mode\n'server'\n```\n\nDate and time the daemon was started\n```python\n>>> s.up_since\ndatetime.datetime(2019, 6, 5, 23, 3, 21)\n```\n\nThe daemon's current state\n```python\n>>> s.state_name\n'CONNECTED'\n```\nWhich can be any of:\n* `CONNECTING` - OpenVPN's initial state.\n* `WAIT` - (Client only) Waiting for initial response from server.\n* `AUTH` - (Client only) Authenticating with server.\n* `GET_CONFIG` - (Client only) Downloading configuration options from server.\n* `ASSIGN_IP` - Assigning IP address to virtual network interface.\n* `ADD_ROUTES` - Adding routes to system.\n* `CONNECTED` - Initialization Sequence Completed.\n* `RECONNECTING` - A restart has occurred.\n* `EXITING` - A graceful exit is in progress.\n* `RESOLVE` - (Client only) DNS lookup\n* `TCP_CONNECT` - (Client only) Connecting to TCP server\n\nThe descriptive string - unclear from the OpenVPN documentation quite what this is, usually `SUCCESS` or the reason for disconnection if the state is `RECONNECTING` or `EXITING`\n```python\n>>> s.desc_string\n'SUCCESS'\n```\n\nThe daemon's local virtual (VPN internal) address, returned as a `netaddr.IPAddress` for ease of sorting, it can be easily converted to a string with `str()`\n```python\n>>> s.local_virtual_v4_addr\nIPAddress('10.0.0.1')\n>>> str(s.local_virtual_v4_addr)\n'10.0.0.1'\n```\n\nIf the daemon is in client mode, then `remote_addr` and `remote_port` will be populated with the address and port of the remote server\n```python\n>>> s.remote_addr\n'1.2.3.4'\n>>> s.remote_port\n1194\n```\n\nIf the daemon is in server mode, then `local_addr` and `local_port` will be populated with the address and port of the exposed server\n```python\n>>> s.local_addr\n'5.6.7.8'\n>>> s.local_port\n1194\n```\n\nIf the daemon is using IPv6 instead of, or in addition to, IPv4 then the there is also a field for the local virtual (VPN internal) v6 address\n```python\n>>> s.local_virtual_v6_addr\n'2001:db8:85a3::8a2e:370:7334'\n```\n\n#### Daemon Status\nThe daemon status is parsed from the management interface by `openvpn_status` an existing Python library for parsing the output from OpenVPN's status response.\nThe code for which can be found in it's GitHub repo: https://github.com/tonyseek/openvpn-status\n\nTherefore when we fetch the status from the OpenVPN daemon, it'll be returned using their models.\nFor more information see their docs: https://openvpn-status.readthedocs.io/en/latest/api.html\n\nUnlike the VPN state, the status is not stateful as it's output is highly likely to change between calls.\nEvery time the status is requested, the management interface is queried for the latest data.\n\nA brief example:\n```python\n>>> status = v.get_status()\n>>> status\n<openvpn_status.models.Status object at 0x7f5eb54a2d68>\n>>> status.client_list\nOrderedDict([('1.2.3.4:56789', <openvpn_status.models.Client object at 0x7f5eb54a2128>)])\n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Jamie-/openvpn-api", "keywords": "openvpn monitor management", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "openvpn-api", "package_url": "https://pypi.org/project/openvpn-api/", "platform": "", "project_url": "https://pypi.org/project/openvpn-api/", "project_urls": {"Bug Reports": "https://github.com/Jamie-/openvpn-api/issues", "Homepage": "https://github.com/Jamie-/openvpn-api", "Source": "https://github.com/Jamie-/openvpn-api"}, "release_url": "https://pypi.org/project/openvpn-api/0.2.0/", "requires_dist": null, "requires_python": ">=3.6", "summary": "A Python API for the OpenVPN management interface.", "version": "0.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>OpenVPN Management Interface Python API</h1>\n<p><a href=\"https://travis-ci.org/Jamie-/openvpn-api\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8abfa22aaa9664f1c0c8055268b5242240734d69/68747470733a2f2f7472617669732d63692e6f72672f4a616d69652d2f6f70656e76706e2d6170692e7376673f6272616e63683d6d6173746572\"></a>\n<img alt=\"PyPI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5c3843ee33a636e7a2e9d0f798c9b094ab6e5dbe/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f6f70656e76706e2d6170692e737667\"></p>\n<h2>Summary</h2>\n<p>A Python API for interacting with the OpenVPN management interface.\nCurrently a work in progress so support for client management interfaces and events is lacking.</p>\n<p>Very useful for extracting metrics and status from OpenVPN server management interfaces.</p>\n<p>This project was inspired by the work of Marcus Furlong in creating <a href=\"https://github.com/furlongm/openvpn-monitor\" rel=\"nofollow\">openvpn-monitor</a>.\nIt also uses <a href=\"https://pypi.org/project/openvpn-status/\" rel=\"nofollow\">openvpn-status</a> by Jiangge Zhang for parsing the output of the OpenVPN <code>status</code> command as there's no point reinventing the wheel when an excellent solution already exists.</p>\n<p>Release notes can be found <a href=\"https://github.com/Jamie-/openvpn-api/releases\" rel=\"nofollow\">here on GitHub</a>.</p>\n<h2>Requirements</h2>\n<p>This project requires Python 3.6 or later.</p>\n<h2>Installation</h2>\n<h4>Via PyPI</h4>\n<pre><code>pip install openvpn-api\n</code></pre>\n<h4>Via Source</h4>\n<pre><code>git clone https://github.com/Jamie-/openvpn-api.git\ncd openvpn-api\npython setup.py install\n</code></pre>\n<h2>Usage</h2>\n<h3>Introduction</h3>\n<p>Create a <code>VPN</code> object for your management interface connection.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">openvpn_api.VPN</span>\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"n\">openvpn_api</span><span class=\"o\">.</span><span class=\"n\">VPN</span><span class=\"p\">(</span><span class=\"s1\">'localhost'</span><span class=\"p\">,</span> <span class=\"mi\">7505</span><span class=\"p\">)</span>\n</pre>\n<p>Then you can either manage connection and disconnection yourself</p>\n<pre><span class=\"n\">v</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">()</span>\n<span class=\"c1\"># Do some stuff, e.g.</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"o\">.</span><span class=\"n\">release</span><span class=\"p\">)</span>\n<span class=\"n\">v</span><span class=\"o\">.</span><span class=\"n\">disconnect</span><span class=\"p\">()</span>\n</pre>\n<p>If the connection is successful, <code>v.connect()</code> will return <code>True</code>.\nHowever, if the connection fails <code>v.connect()</code> will raise an <code>openvpn_api.errors.ConnectError</code> exception with the reason for the connection failure.</p>\n<p>Or use the connection context manager</p>\n<pre><span class=\"k\">with</span> <span class=\"n\">v</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"p\">():</span>\n    <span class=\"c1\"># Do some stuff, e.g.</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"o\">.</span><span class=\"n\">release</span><span class=\"p\">)</span>\n</pre>\n<p>After initialising a VPN object, we can query specifics about it.</p>\n<p>We can get the address we're communicating to the management interface on</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">v</span><span class=\"o\">.</span><span class=\"n\">mgmt_address</span>\n<span class=\"s1\">'localhost:7505'</span>\n</pre>\n<p>And also see if this is via TCP/IP or a Unix socket</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">v</span><span class=\"o\">.</span><span class=\"n\">type</span>\n<span class=\"s1\">'ip'</span>\n</pre>\n<p>or</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">v</span><span class=\"o\">.</span><span class=\"n\">type</span>\n<span class=\"s1\">'socket'</span>\n</pre>\n<p>These are represented by the <code>VPNType</code> class as <code>VPNType.IP</code> or <code>VPNType.UNIX_SOCKET</code></p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">v</span><span class=\"o\">.</span><span class=\"n\">type</span>\n<span class=\"s1\">'ip'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">v</span><span class=\"o\">.</span><span class=\"n\">type</span> <span class=\"o\">==</span> <span class=\"n\">openvpn_api</span><span class=\"o\">.</span><span class=\"n\">VPNType</span><span class=\"o\">.</span><span class=\"n\">IP</span>\n<span class=\"kc\">True</span>\n</pre>\n<h3>Daemon Interaction</h3>\n<p>All the properties that get information about the OpenVPN service you're connected to are stateful.\nThe first time you call one of these methods it caches the information it needs so future calls are super fast.\nThe information cached is unlikely to change often, unlike the status and metrics we can also fetch which are likely to change very frequently.</p>\n<p>We can fetch the release string for the version of OpenVPN we're using</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">v</span><span class=\"o\">.</span><span class=\"n\">release</span>\n<span class=\"s1\">'OpenVPN 2.4.4 x86_64-pc-linux-gnu [SSL (OpenSSL)] [LZO] [LZ4] [EPOLL] [PKCS11] [MH/PKTINFO] [AEAD] built on Sep  5 2018'</span>\n</pre>\n<p>Or just the version number</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">v</span><span class=\"o\">.</span><span class=\"n\">version</span>\n<span class=\"s1\">'2.4.4'</span>\n</pre>\n<p>We can get more information about the service by looking at it's state which is returned as a State object</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">v</span><span class=\"o\">.</span><span class=\"n\">state</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">s</span>\n<span class=\"o\">&lt;</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">state</span><span class=\"o\">.</span><span class=\"n\">State</span> <span class=\"nb\">object</span> <span class=\"n\">at</span> <span class=\"mh\">0x7f5eb549a630</span><span class=\"o\">&gt;</span>\n</pre>\n<p>The state cached by all 3 of these properties can be also be cleared and will be repopulated on the next call</p>\n<pre><span class=\"n\">v</span><span class=\"o\">.</span><span class=\"n\">clear_cache</span><span class=\"p\">()</span>\n</pre>\n<h4>Daemon State</h4>\n<p>The State object contains the following things:</p>\n<p>The daemon's current mode, <code>client</code> or <code>server</code></p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">mode</span>\n<span class=\"s1\">'server'</span>\n</pre>\n<p>Date and time the daemon was started</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">up_since</span>\n<span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">(</span><span class=\"mi\">2019</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">23</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">21</span><span class=\"p\">)</span>\n</pre>\n<p>The daemon's current state</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">state_name</span>\n<span class=\"s1\">'CONNECTED'</span>\n</pre>\n<p>Which can be any of:</p>\n<ul>\n<li><code>CONNECTING</code> - OpenVPN's initial state.</li>\n<li><code>WAIT</code> - (Client only) Waiting for initial response from server.</li>\n<li><code>AUTH</code> - (Client only) Authenticating with server.</li>\n<li><code>GET_CONFIG</code> - (Client only) Downloading configuration options from server.</li>\n<li><code>ASSIGN_IP</code> - Assigning IP address to virtual network interface.</li>\n<li><code>ADD_ROUTES</code> - Adding routes to system.</li>\n<li><code>CONNECTED</code> - Initialization Sequence Completed.</li>\n<li><code>RECONNECTING</code> - A restart has occurred.</li>\n<li><code>EXITING</code> - A graceful exit is in progress.</li>\n<li><code>RESOLVE</code> - (Client only) DNS lookup</li>\n<li><code>TCP_CONNECT</code> - (Client only) Connecting to TCP server</li>\n</ul>\n<p>The descriptive string - unclear from the OpenVPN documentation quite what this is, usually <code>SUCCESS</code> or the reason for disconnection if the state is <code>RECONNECTING</code> or <code>EXITING</code></p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">desc_string</span>\n<span class=\"s1\">'SUCCESS'</span>\n</pre>\n<p>The daemon's local virtual (VPN internal) address, returned as a <code>netaddr.IPAddress</code> for ease of sorting, it can be easily converted to a string with <code>str()</code></p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">local_virtual_v4_addr</span>\n<span class=\"n\">IPAddress</span><span class=\"p\">(</span><span class=\"s1\">'10.0.0.1'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">local_virtual_v4_addr</span><span class=\"p\">)</span>\n<span class=\"s1\">'10.0.0.1'</span>\n</pre>\n<p>If the daemon is in client mode, then <code>remote_addr</code> and <code>remote_port</code> will be populated with the address and port of the remote server</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">remote_addr</span>\n<span class=\"s1\">'1.2.3.4'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">remote_port</span>\n<span class=\"mi\">1194</span>\n</pre>\n<p>If the daemon is in server mode, then <code>local_addr</code> and <code>local_port</code> will be populated with the address and port of the exposed server</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">local_addr</span>\n<span class=\"s1\">'5.6.7.8'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">local_port</span>\n<span class=\"mi\">1194</span>\n</pre>\n<p>If the daemon is using IPv6 instead of, or in addition to, IPv4 then the there is also a field for the local virtual (VPN internal) v6 address</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">local_virtual_v6_addr</span>\n<span class=\"s1\">'2001:db8:85a3::8a2e:370:7334'</span>\n</pre>\n<h4>Daemon Status</h4>\n<p>The daemon status is parsed from the management interface by <code>openvpn_status</code> an existing Python library for parsing the output from OpenVPN's status response.\nThe code for which can be found in it's GitHub repo: <a href=\"https://github.com/tonyseek/openvpn-status\" rel=\"nofollow\">https://github.com/tonyseek/openvpn-status</a></p>\n<p>Therefore when we fetch the status from the OpenVPN daemon, it'll be returned using their models.\nFor more information see their docs: <a href=\"https://openvpn-status.readthedocs.io/en/latest/api.html\" rel=\"nofollow\">https://openvpn-status.readthedocs.io/en/latest/api.html</a></p>\n<p>Unlike the VPN state, the status is not stateful as it's output is highly likely to change between calls.\nEvery time the status is requested, the management interface is queried for the latest data.</p>\n<p>A brief example:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">status</span> <span class=\"o\">=</span> <span class=\"n\">v</span><span class=\"o\">.</span><span class=\"n\">get_status</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">status</span>\n<span class=\"o\">&lt;</span><span class=\"n\">openvpn_status</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Status</span> <span class=\"nb\">object</span> <span class=\"n\">at</span> <span class=\"mh\">0x7f5eb54a2d68</span><span class=\"o\">&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">status</span><span class=\"o\">.</span><span class=\"n\">client_list</span>\n<span class=\"n\">OrderedDict</span><span class=\"p\">([(</span><span class=\"s1\">'1.2.3.4:56789'</span><span class=\"p\">,</span> <span class=\"o\">&lt;</span><span class=\"n\">openvpn_status</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Client</span> <span class=\"nb\">object</span> <span class=\"n\">at</span> <span class=\"mh\">0x7f5eb54a2128</span><span class=\"o\">&gt;</span><span class=\"p\">)])</span>\n</pre>\n\n          </div>"}, "last_serial": 7011603, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "ecb417b766e7a5f4a517677533cce255", "sha256": "160907b50e5505701349724448b4dcf9c5d6eeefaaeed7094fb53a8a0be517d9"}, "downloads": -1, "filename": "openvpn-api-0.1.0.tar.gz", "has_sig": false, "md5_digest": "ecb417b766e7a5f4a517677533cce255", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 8416, "upload_time": "2019-07-17T20:41:13", "upload_time_iso_8601": "2019-07-17T20:41:13.637017Z", "url": "https://files.pythonhosted.org/packages/8f/b2/5bcb049ed237bf182edd5448802fa352cc0f4ea1ed5be9a280c6564089bb/openvpn-api-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "91cf16fe6363495d66f4f2203023fd74", "sha256": "53392202781d35eef14d2e482a3d3bba5f450b6f12fd40e6316176dcd53322dd"}, "downloads": -1, "filename": "openvpn-api-0.1.1.tar.gz", "has_sig": false, "md5_digest": "91cf16fe6363495d66f4f2203023fd74", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 8660, "upload_time": "2019-07-17T22:10:12", "upload_time_iso_8601": "2019-07-17T22:10:12.011967Z", "url": "https://files.pythonhosted.org/packages/1b/02/1577979e3586d0fa2b65758bfaffb89e4b0e97e026fe4d097c24493356eb/openvpn-api-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "3bbb04e6ca2ae98f25d431a86408f083", "sha256": "1c87d3e24abdfdf9901472e7158b9ab19f29bf2240599acbbedd0c5e9cf570df"}, "downloads": -1, "filename": "openvpn-api-0.1.2.tar.gz", "has_sig": false, "md5_digest": "3bbb04e6ca2ae98f25d431a86408f083", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 8764, "upload_time": "2019-07-18T21:35:15", "upload_time_iso_8601": "2019-07-18T21:35:15.411058Z", "url": "https://files.pythonhosted.org/packages/5e/3b/156bfe27945e66a17b7792eaf1fcbd30c3c072da627a4bb02b669f4e5c7a/openvpn-api-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "487416b9687f7c2acc402cd8547c38fd", "sha256": "0eb22ea086ef63af88376c5bdf73eab35d1abe72432f50814505d8170162a026"}, "downloads": -1, "filename": "openvpn-api-0.1.3.tar.gz", "has_sig": false, "md5_digest": "487416b9687f7c2acc402cd8547c38fd", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 9490, "upload_time": "2019-12-14T20:45:52", "upload_time_iso_8601": "2019-12-14T20:45:52.685087Z", "url": "https://files.pythonhosted.org/packages/b0/47/3720cee159d644b31da2cae4ce49b3014e97fb14a05b9a859cb21900a7e4/openvpn-api-0.1.3.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "f2263e522577ab3958d5cb136e9a6e50", "sha256": "45de2bb0f937084935020cd3e5c9ee68774112ce7028d3dd3a5bc101ed83681c"}, "downloads": -1, "filename": "openvpn-api-0.2.0.tar.gz", "has_sig": false, "md5_digest": "f2263e522577ab3958d5cb136e9a6e50", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 9713, "upload_time": "2020-04-13T17:46:31", "upload_time_iso_8601": "2020-04-13T17:46:31.878963Z", "url": "https://files.pythonhosted.org/packages/25/de/8e7c9d18bf9bd96d56bdf880276b0c2e37b0033e013b68895144cd4e5c15/openvpn-api-0.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f2263e522577ab3958d5cb136e9a6e50", "sha256": "45de2bb0f937084935020cd3e5c9ee68774112ce7028d3dd3a5bc101ed83681c"}, "downloads": -1, "filename": "openvpn-api-0.2.0.tar.gz", "has_sig": false, "md5_digest": "f2263e522577ab3958d5cb136e9a6e50", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 9713, "upload_time": "2020-04-13T17:46:31", "upload_time_iso_8601": "2020-04-13T17:46:31.878963Z", "url": "https://files.pythonhosted.org/packages/25/de/8e7c9d18bf9bd96d56bdf880276b0c2e37b0033e013b68895144cd4e5c15/openvpn-api-0.2.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:02:17 2020"}