{"info": {"author": "Jeff Hammel", "author_email": "k0scist@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "redirector\n==========\n\n*Control redirects through WSGI middleware.*\n\nredirector is a piece of WSGI middleware that allows redirects to be\nmanaged within the scope of a python web service.  Traditionally,\nredirects are done via Apache or some other web server disparate from\nthe python application.  This leads to several undesirable\nconsequences:\n\n * there is no way of controlling redirects through the web\n * the web server must be restarted when redirects are changed\n\nBecause of this methodology of doing things, it discourages the\nstake-holders (the people that actually care about the redirects) from\nchanging the redirects themselves.  Because the redirects are not, in\ntheir mind, content, this leads to unmaintainable systems.  The goal\nof redirector is to bring the power to create redirects to any\nauthorized user.\n\n\nStatus\n------\n\nRedirector is largely in the conceptual stage.  While what redirector\ndoes now (regular expression redirects) is sufficient to reproduce\nApache's behavior, it is not enough to realize the vision of bringing\nredirects to the people for WSGI apps.  \n\nEven this documentation is thoroughly imcomplete.\n\n\nTODO\n----\n\nredirector needs several pieces to become what it should be:\n\nTypes of Redirects\n------------------\n\nCurrently, only regular expression redirects (a la Apache) are\nimplemented. Another possibility, probably more applicable, are\nsomething like glob redirects.  The reason that these are useful is\nthat they, with a carefully constructed rule system, can be seen to\nmatch each other.  In other words, you can see if the existing set of\nredirects is contradictory and if there are superfluous redirects.  It\nalso better matches how non-experts think about redirects.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://k0s.org/hg/redirector", "keywords": null, "license": "GPL", "maintainer": null, "maintainer_email": null, "name": "redirector", "package_url": "https://pypi.org/project/redirector/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/redirector/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://k0s.org/hg/redirector"}, "release_url": "https://pypi.org/project/redirector/0.1.1/", "requires_dist": null, "requires_python": null, "summary": "WSGI middleware/app for managing redirects", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><em>Control redirects through WSGI middleware.</em></p>\n<p>redirector is a piece of WSGI middleware that allows redirects to be\nmanaged within the scope of a python web service.  Traditionally,\nredirects are done via Apache or some other web server disparate from\nthe python application.  This leads to several undesirable\nconsequences:</p>\n<blockquote>\n<ul>\n<li>there is no way of controlling redirects through the web</li>\n<li>the web server must be restarted when redirects are changed</li>\n</ul>\n</blockquote>\n<p>Because of this methodology of doing things, it discourages the\nstake-holders (the people that actually care about the redirects) from\nchanging the redirects themselves.  Because the redirects are not, in\ntheir mind, content, this leads to unmaintainable systems.  The goal\nof redirector is to bring the power to create redirects to any\nauthorized user.</p>\n<div id=\"status\">\n<h2>Status</h2>\n<p>Redirector is largely in the conceptual stage.  While what redirector\ndoes now (regular expression redirects) is sufficient to reproduce\nApache\u2019s behavior, it is not enough to realize the vision of bringing\nredirects to the people for WSGI apps.</p>\n<p>Even this documentation is thoroughly imcomplete.</p>\n</div>\n<div id=\"todo\">\n<h2>TODO</h2>\n<p>redirector needs several pieces to become what it should be:</p>\n</div>\n<div id=\"types-of-redirects\">\n<h2>Types of Redirects</h2>\n<p>Currently, only regular expression redirects (a la Apache) are\nimplemented. Another possibility, probably more applicable, are\nsomething like glob redirects.  The reason that these are useful is\nthat they, with a carefully constructed rule system, can be seen to\nmatch each other.  In other words, you can see if the existing set of\nredirects is contradictory and if there are superfluous redirects.  It\nalso better matches how non-experts think about redirects.</p>\n</div>\n\n          </div>"}, "last_serial": 798650, "releases": {"0.1.1": [{"comment_text": "", "digests": {"md5": "09e7630b653cccacabb25c305982baea", "sha256": "5a24daac256564eec1f5d14a877cddb87886750fee1d701ec10bcfe7c695c993"}, "downloads": -1, "filename": "redirector-0.1.1.tar.gz", "has_sig": false, "md5_digest": "09e7630b653cccacabb25c305982baea", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4612, "upload_time": "2010-03-10T20:54:45", "upload_time_iso_8601": "2010-03-10T20:54:45.415059Z", "url": "https://files.pythonhosted.org/packages/31/db/ab8a4163e1f3f85828a2ce624ceb3c456f1c4b7d79426e5e2e5b4350aba5/redirector-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "09e7630b653cccacabb25c305982baea", "sha256": "5a24daac256564eec1f5d14a877cddb87886750fee1d701ec10bcfe7c695c993"}, "downloads": -1, "filename": "redirector-0.1.1.tar.gz", "has_sig": false, "md5_digest": "09e7630b653cccacabb25c305982baea", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4612, "upload_time": "2010-03-10T20:54:45", "upload_time_iso_8601": "2010-03-10T20:54:45.415059Z", "url": "https://files.pythonhosted.org/packages/31/db/ab8a4163e1f3f85828a2ce624ceb3c456f1c4b7d79426e5e2e5b4350aba5/redirector-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:05:55 2020"}