{"info": {"author": "Bruno Rocha", "author_email": "rochacbruno@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: ISC License (ISCL)", "Natural Language :: English", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5"], "description": "===============================\nBlinker Herald\n===============================\n\n.. image:: https://img.shields.io/pypi/v/blinker_herald.svg\n        :target: https://pypi.python.org/pypi/blinker_herald\n\n.. image:: https://img.shields.io/travis/rochacbruno/blinker_herald.svg\n        :target: https://travis-ci.org/SatelliteQE/blinker_herald\n\n.. image:: https://readthedocs.org/projects/blinker_herald/badge/?version=latest\n        :target: https://readthedocs.org/projects/blinker_herald/?badge=latest\n        :alt: Documentation Status\n\n.. image:: https://coveralls.io/repos/github/SatelliteQE/blinker_herald/badge.svg?branch=master\n        :target: https://coveralls.io/github/SatelliteQE/blinker_herald?branch=master\n        :alt: Coverage\n\n.. image:: docs/The_Herald.jpg\n        :scale: 50 %\n\nThe Blinker Herald includes helpers to easily emit signals using the excelent\n`blinker`_ library.\n\nDecorate a function or method with :code:`@blinker_herald.emit()`\nand **pre** and **post** signals will be automatically emitted to\nall connected handlers.\n\n* Free software: ISC license\n* Documentation: https://blinker_herald.readthedocs.org.\n\nFeatures\n--------\n\n* All the features provided by `blinker`_\n* `+` an easy decorator :code:`@emit()` to magically emit signals when your functions are called and before it returns a result.\n* A :code:`signals` namespace proxy to discover the signals in your project\n* Customizable for your needs\n\n\nUsage\n-----\nLet's say you have a class and wants to emit a signal for a specific method::\n\n    from blinker_herald import emit\n\n    class SomeClass(object):\n\n        @emit()\n        def do_something(self, arg1):\n            # here is were magically the 'pre' signal will be sent\n            return 'something done'\n            # here is were magically the 'post' signal will be sent\n\n\nusing :code:`@emit` decorator makes blinker_herald to emit a signal for that method\nand now you can connect handlers to capture that signals\n\nYou can capture **pre** signal to manipulate the object::\n\n    SomeClass.do_something.pre.connect\n    def handle_pre(sender, signal_emitter, **kwargs):\n        signal_emitter.foo = 'bar'\n        signal_emitter.do_another_thing()\n\nAnd you can also capture the **post** signal to log the results::\n\n    SomeClass.do_something.post.connect\n    def handle_post(sender, signal_emitter, result, **kwargs):\n        logger.info(\"The method {0} returned {1}\".format(sender, result))\n\n\nYou can also use the namespace proxy :code:`blinker_herald.signals` to connect\nhandlers to signals, the signal name is the prefix **pre** or **post**\nfollowed by **_** and the method name::\n\n    from blinker_herald import signals\n\n    @signals.pre_do_something.connect\n    def handle_pre(sender, signal_emitter, **kwargs):\n        ...\n\n\nIf you have a lot of subclasses emitting signals with the same name and you\nneed to capture only specific signals, you can specify that you want to listen\nto only one type of sender::\n\n    from blinker_herald import emit, signals, SENDER_CLASS\n    class BaseModel(object):\n        ...\n        @emit(sender=SENDER_CLASS)\n        def create(self, **kwargs):\n            new_instance = my_project.new(self, **kwargs)\n            return new_instance\n\n    class One(BaseModel):\n        pass\n\n    class Two(BaseModel):\n        pass\n\n.. note::\n   By default the sender is always the instance but you can use :code:`SENDER_CLASS`\n   to force the sender to be the **class** another options are **SENDER_CLASS_NAME**,\n   **SENDER_MODULE**, **SENDER_NAME** and you can also pass a string, an object\n   or a lambda receiving the **sender** instance e.g: :code:`@emit(sender=lambda self: self.get_sender())`\n\nUsing :code:`SENDER_CLASS` you can now connect to specific signal::\n\n    from blinker_herald import signals\n\n    @signals.post_create.connect_via(One)\n    def handle_post_only_for_one(sender, signal_emitter, result, **kwargs):\n        # sender is the class One (cls)\n        # signal the instance of the class One (self)\n        # result is the return of the method create\n\nThe above will handle the :code:`create` method signal for the class **One** but not for the class **Two**\n\n\nYou can also be more specific about the signal you want to connect using the\n**__** double underscore to provide method name::\n\n    from blinker_herald import signals\n\n    @signals.module_name__ClassName__post_method_name.connect\n    def handle_post(sender, signal_emitter, result, **kwargs):\n        ...\n\nThe above will connect to the **post** signal emitted by :code:`module_name.ClassName.method_name`\n\n.. note::\n  You don't have to use the pattern above if your project do not have a lot of\n  method name collisions, using only the method name will be just fine for most cases.\n\n\n\nCredits\n-------\n\nThis software was first created by SatelliteQE team to provide signals to\nRobottelo and Nailgun\n\n.. _blinker: http://pypi.python.org/pypi/blinker\n\n\n=======\nHistory\n=======\n\n0.1.0 (2016-05-28)\n------------------\n\n* First release on PyPI.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/SatelliteQE/blinker_herald", "keywords": "blinker_herald", "license": "ISCL", "maintainer": null, "maintainer_email": null, "name": "blinker_herald", "package_url": "https://pypi.org/project/blinker_herald/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/blinker_herald/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/SatelliteQE/blinker_herald"}, "release_url": "https://pypi.org/project/blinker_herald/0.2.0/", "requires_dist": null, "requires_python": null, "summary": "The Blinker Herald includes helpers to easily emit signals using Blinker. Decorate a function or method with @blinker_herald.emit() and pre and post signals will automatically be emitted to connected handlers.", "version": "0.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"blinker-herald\">\n<h2>Blinker Herald</h2>\n<a href=\"https://pypi.python.org/pypi/blinker_herald\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/v/blinker_herald.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c814ffeaefb0a19da0a2e35c6b6574df5d5a4f75/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f626c696e6b65725f686572616c642e737667\"></a>\n<a href=\"https://travis-ci.org/SatelliteQE/blinker_herald\" rel=\"nofollow\"><img alt=\"https://img.shields.io/travis/rochacbruno/blinker_herald.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e86a4ab0a5a5b14d858a3dd6a624b05b62935630/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f726f636861636272756e6f2f626c696e6b65725f686572616c642e737667\"></a>\n<a href=\"https://readthedocs.org/projects/blinker_herald/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2cf9e38999d0d3c79e10ce31373f33eb71e1a811/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f626c696e6b65725f686572616c642f62616467652f3f76657273696f6e3d6c6174657374\"></a>\n<a href=\"https://coveralls.io/github/SatelliteQE/blinker_herald?branch=master\" rel=\"nofollow\"><img alt=\"Coverage\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c6b41a178b750709dc0fd03f7e4cf04a225b619d/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f536174656c6c69746551452f626c696e6b65725f686572616c642f62616467652e7376673f6272616e63683d6d6173746572\"></a>\n<img alt=\"docs/The_Herald.jpg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5190216b3e0eacf6357457a27cd853d254206e21/646f63732f5468655f486572616c642e6a7067\">\n<p>The Blinker Herald includes helpers to easily emit signals using the excelent\n<a href=\"http://pypi.python.org/pypi/blinker\" rel=\"nofollow\">blinker</a> library.</p>\n<p>Decorate a function or method with <code>@blinker_herald.emit()</code>\nand <strong>pre</strong> and <strong>post</strong> signals will be automatically emitted to\nall connected handlers.</p>\n<ul>\n<li>Free software: ISC license</li>\n<li>Documentation: <a href=\"https://blinker_herald.readthedocs.org\" rel=\"nofollow\">https://blinker_herald.readthedocs.org</a>.</li>\n</ul>\n<div id=\"features\">\n<h3>Features</h3>\n<ul>\n<li>All the features provided by <a href=\"http://pypi.python.org/pypi/blinker\" rel=\"nofollow\">blinker</a></li>\n<li><cite>+</cite> an easy decorator <code>@emit()</code> to magically emit signals when your functions are called and before it returns a result.</li>\n<li>A <code>signals</code> namespace proxy to discover the signals in your project</li>\n<li>Customizable for your needs</li>\n</ul>\n</div>\n<div id=\"usage\">\n<h3>Usage</h3>\n<p>Let\u2019s say you have a class and wants to emit a signal for a specific method:</p>\n<pre>from blinker_herald import emit\n\nclass SomeClass(object):\n\n    @emit()\n    def do_something(self, arg1):\n        # here is were magically the 'pre' signal will be sent\n        return 'something done'\n        # here is were magically the 'post' signal will be sent\n</pre>\n<p>using <code>@emit</code> decorator makes blinker_herald to emit a signal for that method\nand now you can connect handlers to capture that signals</p>\n<p>You can capture <strong>pre</strong> signal to manipulate the object:</p>\n<pre>SomeClass.do_something.pre.connect\ndef handle_pre(sender, signal_emitter, **kwargs):\n    signal_emitter.foo = 'bar'\n    signal_emitter.do_another_thing()\n</pre>\n<p>And you can also capture the <strong>post</strong> signal to log the results:</p>\n<pre>SomeClass.do_something.post.connect\ndef handle_post(sender, signal_emitter, result, **kwargs):\n    logger.info(\"The method {0} returned {1}\".format(sender, result))\n</pre>\n<p>You can also use the namespace proxy <code>blinker_herald.signals</code> to connect\nhandlers to signals, the signal name is the prefix <strong>pre</strong> or <strong>post</strong>\nfollowed by <strong>_</strong> and the method name:</p>\n<pre>from blinker_herald import signals\n\n@signals.pre_do_something.connect\ndef handle_pre(sender, signal_emitter, **kwargs):\n    ...\n</pre>\n<p>If you have a lot of subclasses emitting signals with the same name and you\nneed to capture only specific signals, you can specify that you want to listen\nto only one type of sender:</p>\n<pre>from blinker_herald import emit, signals, SENDER_CLASS\nclass BaseModel(object):\n    ...\n    @emit(sender=SENDER_CLASS)\n    def create(self, **kwargs):\n        new_instance = my_project.new(self, **kwargs)\n        return new_instance\n\nclass One(BaseModel):\n    pass\n\nclass Two(BaseModel):\n    pass\n</pre>\n<div>\n<p>Note</p>\n<p>By default the sender is always the instance but you can use <code>SENDER_CLASS</code>\nto force the sender to be the <strong>class</strong> another options are <strong>SENDER_CLASS_NAME</strong>,\n<strong>SENDER_MODULE</strong>, <strong>SENDER_NAME</strong> and you can also pass a string, an object\nor a lambda receiving the <strong>sender</strong> instance e.g: <code>@emit(sender=lambda self: self.get_sender())</code></p>\n</div>\n<p>Using <code>SENDER_CLASS</code> you can now connect to specific signal:</p>\n<pre>from blinker_herald import signals\n\n@signals.post_create.connect_via(One)\ndef handle_post_only_for_one(sender, signal_emitter, result, **kwargs):\n    # sender is the class One (cls)\n    # signal the instance of the class One (self)\n    # result is the return of the method create\n</pre>\n<p>The above will handle the <code>create</code> method signal for the class <strong>One</strong> but not for the class <strong>Two</strong></p>\n<p>You can also be more specific about the signal you want to connect using the\n<strong>__</strong> double underscore to provide method name:</p>\n<pre>from blinker_herald import signals\n\n@signals.module_name__ClassName__post_method_name.connect\ndef handle_post(sender, signal_emitter, result, **kwargs):\n    ...\n</pre>\n<p>The above will connect to the <strong>post</strong> signal emitted by <code>module_name.ClassName.method_name</code></p>\n<div>\n<p>Note</p>\n<p>You don\u2019t have to use the pattern above if your project do not have a lot of\nmethod name collisions, using only the method name will be just fine for most cases.</p>\n</div>\n</div>\n<div id=\"credits\">\n<h3>Credits</h3>\n<p>This software was first created by SatelliteQE team to provide signals to\nRobottelo and Nailgun</p>\n</div>\n</div>\n<div id=\"history\">\n<h2>History</h2>\n<h2 id=\"id1\"><span class=\"section-subtitle\">0.1.0 (2016-05-28)</span></h2>\n<ul>\n<li>First release on PyPI.</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 2140689, "releases": {"0.0.0": [], "0.1.0": [{"comment_text": "", "digests": {"md5": "29d85d2abb1d5e022c1ec4d9e688baa0", "sha256": "3aae5c921ce67ef403ca4b57500b5e2070b56e80e2b1aef153970d7ed18493f2"}, "downloads": -1, "filename": "blinker_herald-0.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "29d85d2abb1d5e022c1ec4d9e688baa0", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 6584, "upload_time": "2016-05-28T19:58:50", "upload_time_iso_8601": "2016-05-28T19:58:50.358166Z", "url": "https://files.pythonhosted.org/packages/39/41/a2d0883331a05eac2843f980465e0a49ea99057b0e1b107c15fa09269dba/blinker_herald-0.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "96453d514c80e5418a7cae6ea73f90c4", "sha256": "4247bd92904bfb10251dcc360a2bbb34477f4e92748588d74880483c231e2967"}, "downloads": -1, "filename": "blinker_herald-0.1.0.tar.gz", "has_sig": false, "md5_digest": "96453d514c80e5418a7cae6ea73f90c4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 134275, "upload_time": "2016-05-28T19:58:45", "upload_time_iso_8601": "2016-05-28T19:58:45.506734Z", "url": "https://files.pythonhosted.org/packages/3c/2e/540a1669ebf5eaf3e781073dfc1ed86a8dafed6628aeb325f3b93f55896e/blinker_herald-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "11265eb654375e7a76f8ef322b22e757", "sha256": "2558c404a1ea0f62b99a167d0d8794bbc45fcd3b1e8d8bdfcab1dd1d2b1809f9"}, "downloads": -1, "filename": "blinker_herald-0.2.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "11265eb654375e7a76f8ef322b22e757", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 8310, "upload_time": "2016-05-30T12:31:54", "upload_time_iso_8601": "2016-05-30T12:31:54.227347Z", "url": "https://files.pythonhosted.org/packages/c5/01/ec44660f2a35b3e280e2d8334fff6396657feaa2e59f9675604be586bf96/blinker_herald-0.2.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bbe974b9fe5b5a381dcbb1ae63fc35fd", "sha256": "b1fd320aa594a5f0cd4cd2e07db97cdbbea00197fdcd38161c873864315351cd"}, "downloads": -1, "filename": "blinker_herald-0.2.0.tar.gz", "has_sig": false, "md5_digest": "bbe974b9fe5b5a381dcbb1ae63fc35fd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 42090, "upload_time": "2016-05-30T12:31:49", "upload_time_iso_8601": "2016-05-30T12:31:49.491925Z", "url": "https://files.pythonhosted.org/packages/98/fe/c3ef82a7d78ddcecff0cbae06433f0c0fd164910d5308af7594370ebfd11/blinker_herald-0.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "11265eb654375e7a76f8ef322b22e757", "sha256": "2558c404a1ea0f62b99a167d0d8794bbc45fcd3b1e8d8bdfcab1dd1d2b1809f9"}, "downloads": -1, "filename": "blinker_herald-0.2.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "11265eb654375e7a76f8ef322b22e757", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 8310, "upload_time": "2016-05-30T12:31:54", "upload_time_iso_8601": "2016-05-30T12:31:54.227347Z", "url": "https://files.pythonhosted.org/packages/c5/01/ec44660f2a35b3e280e2d8334fff6396657feaa2e59f9675604be586bf96/blinker_herald-0.2.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bbe974b9fe5b5a381dcbb1ae63fc35fd", "sha256": "b1fd320aa594a5f0cd4cd2e07db97cdbbea00197fdcd38161c873864315351cd"}, "downloads": -1, "filename": "blinker_herald-0.2.0.tar.gz", "has_sig": false, "md5_digest": "bbe974b9fe5b5a381dcbb1ae63fc35fd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 42090, "upload_time": "2016-05-30T12:31:49", "upload_time_iso_8601": "2016-05-30T12:31:49.491925Z", "url": "https://files.pythonhosted.org/packages/98/fe/c3ef82a7d78ddcecff0cbae06433f0c0fd164910d5308af7594370ebfd11/blinker_herald-0.2.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:37:05 2020"}