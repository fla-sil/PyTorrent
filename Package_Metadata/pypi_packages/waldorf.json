{"info": {"author": "SErAphLi, taibende", "author_email": "", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "License :: OSI Approved :: Apache Software License", "Operating System :: POSIX :: Linux", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy", "Topic :: Software Development :: Object Brokering", "Topic :: System :: Distributed Computing"], "description": "# ![Waldorf](docs/figures/WaldorfLogo.png)\n\nWaldorf is an efficient, parallel task execution framework written in Python.\nIt was developed for research into [reinforcement learning](https://en.wikipedia.org/wiki/Reinforcement_learning)\nalgorithms at [our startup company](http://www.levelup.ai/) in Beijing, China.\n\nWaldorf is based on the [Celery distributed task queue](https://github.com/celery/celery),\nand takes its name from [Waldorf salad](https://en.wikipedia.org/wiki/Waldorf_salad),\nwhich also has celery as an ingredient.\n\nIt can speed up algorithms such as [Monte Carlo Tree Search (MCTS)](https://en.wikipedia.org/wiki/Monte_Carlo_tree_search) by\nspreading concurrent sub-tasks, written as Python functions, across multiple\nmachines and automating the collection of outputs. Waldorf can also be used\nto implement MapReduce-style work-flows.\n\nAlthough Waldorf can be deployed on cloud servers, our emphasis at the moment\nis on utilizing the spare CPU capacity of a commodity PC cluster (e.g. normal\noffice workstations). Support for GPUs may be included in a future release.\n\n## Features\n\n1. Waldorf uses a master node to pass messages between a client and\nslave nodes.\n\n2. A client can create a task as a Python function on his or her local machine.\nWaldorf sends tasks to a network of slave machines for execution using the\nCelery task queue. When Celery is used on its own, tasks typically must be\ndefined in advance, but Waldorf allows tasks to be defined dynamically\nwithout any slave restarts required.\n\n3. Multiple clients can run their tasks simultaneously without conflict.\n\n4. Clients can adjust how many CPU cores are used on slave machines to\nperform calculations. This can be done dynamically from the Waldorf\nadministration webpage.\n\n![Screenshot of Waldorf admin webpage](docs/figures/waldorf_admin_webpage.png)\n\n## Basic Usage\n\nYou can use Waldorf on any task that requires parallel computing.\n\nOne of its many uses is to compute rollouts in an MCTS simulation (for\nexample, in game-playing AIs).\n\nHere is a simple illustration:\n\n```python\ndef rollout(args):\n    # Do one rollout\n    ...\n\ndef backup(result):\n    # Backup and handle result\n    ...\n\ndef mcts_search():\n    for _ in range(iter):\n        # Select action\n        action = select()\n        ...\n        # Submit rollout job to waldorf client\n        client.submit(rollout, args, callback=backup)\n        ...\n    # More code\n    ...\n```\n\nFor a more complex example, check out [the gym demo](example/gym_demo.py).\n\n## Quick Start\n\nInstall Waldorf using [the installation guide](docs/installation.md) and\ncheck out [the gym demo](example/gym_demo.py).\n\n## Disclaimer\n\nWaldorf is still research code, so it may be slightly lacking in terms of\ndocumentation and support. Any feedback is welcomed.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/levelupai/waldorf.git", "keywords": "", "license": "Apache", "maintainer": "", "maintainer_email": "", "name": "waldorf", "package_url": "https://pypi.org/project/waldorf/", "platform": "", "project_url": "https://pypi.org/project/waldorf/", "project_urls": {"Homepage": "https://github.com/levelupai/waldorf.git"}, "release_url": "https://pypi.org/project/waldorf/0.6.0.post1/", "requires_dist": ["virtualenv (>=16.5.0)", "psutil (>=5.6.2)", "aiohttp (==3.1.3)", "celery (>=4.3.0)", "python-socketio (>=4.0.1)", "tqdm (>=4.23.3)", "requests (>=2.21.0)", "redis (>=3.2.1)", "pycryptodome (>=3.8.1)", "pexpect (>=4.7.0)", "jsonpickle (>=1.1)", "tabulate (>=0.8.3)"], "requires_python": "", "summary": "Waldorf, a distribution computing package based on celery", "version": "0.6.0.post1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1><img alt=\"Waldorf\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/218965e9153fc1fa673ef44ac6f170aab8ac7c79/646f63732f666967757265732f57616c646f72664c6f676f2e706e67\"></h1>\n<p>Waldorf is an efficient, parallel task execution framework written in Python.\nIt was developed for research into <a href=\"https://en.wikipedia.org/wiki/Reinforcement_learning\" rel=\"nofollow\">reinforcement learning</a>\nalgorithms at <a href=\"http://www.levelup.ai/\" rel=\"nofollow\">our startup company</a> in Beijing, China.</p>\n<p>Waldorf is based on the <a href=\"https://github.com/celery/celery\" rel=\"nofollow\">Celery distributed task queue</a>,\nand takes its name from <a href=\"https://en.wikipedia.org/wiki/Waldorf_salad\" rel=\"nofollow\">Waldorf salad</a>,\nwhich also has celery as an ingredient.</p>\n<p>It can speed up algorithms such as <a href=\"https://en.wikipedia.org/wiki/Monte_Carlo_tree_search\" rel=\"nofollow\">Monte Carlo Tree Search (MCTS)</a> by\nspreading concurrent sub-tasks, written as Python functions, across multiple\nmachines and automating the collection of outputs. Waldorf can also be used\nto implement MapReduce-style work-flows.</p>\n<p>Although Waldorf can be deployed on cloud servers, our emphasis at the moment\nis on utilizing the spare CPU capacity of a commodity PC cluster (e.g. normal\noffice workstations). Support for GPUs may be included in a future release.</p>\n<h2>Features</h2>\n<ol>\n<li>\n<p>Waldorf uses a master node to pass messages between a client and\nslave nodes.</p>\n</li>\n<li>\n<p>A client can create a task as a Python function on his or her local machine.\nWaldorf sends tasks to a network of slave machines for execution using the\nCelery task queue. When Celery is used on its own, tasks typically must be\ndefined in advance, but Waldorf allows tasks to be defined dynamically\nwithout any slave restarts required.</p>\n</li>\n<li>\n<p>Multiple clients can run their tasks simultaneously without conflict.</p>\n</li>\n<li>\n<p>Clients can adjust how many CPU cores are used on slave machines to\nperform calculations. This can be done dynamically from the Waldorf\nadministration webpage.</p>\n</li>\n</ol>\n<p><img alt=\"Screenshot of Waldorf admin webpage\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fd223ba13ccfdb1fbfe6577a8abddc02f7069f97/646f63732f666967757265732f77616c646f72665f61646d696e5f776562706167652e706e67\"></p>\n<h2>Basic Usage</h2>\n<p>You can use Waldorf on any task that requires parallel computing.</p>\n<p>One of its many uses is to compute rollouts in an MCTS simulation (for\nexample, in game-playing AIs).</p>\n<p>Here is a simple illustration:</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">rollout</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">):</span>\n    <span class=\"c1\"># Do one rollout</span>\n    <span class=\"o\">...</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">backup</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">):</span>\n    <span class=\"c1\"># Backup and handle result</span>\n    <span class=\"o\">...</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">mcts_search</span><span class=\"p\">():</span>\n    <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">iter</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Select action</span>\n        <span class=\"n\">action</span> <span class=\"o\">=</span> <span class=\"n\">select</span><span class=\"p\">()</span>\n        <span class=\"o\">...</span>\n        <span class=\"c1\"># Submit rollout job to waldorf client</span>\n        <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">submit</span><span class=\"p\">(</span><span class=\"n\">rollout</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"n\">callback</span><span class=\"o\">=</span><span class=\"n\">backup</span><span class=\"p\">)</span>\n        <span class=\"o\">...</span>\n    <span class=\"c1\"># More code</span>\n    <span class=\"o\">...</span>\n</pre>\n<p>For a more complex example, check out <a href=\"example/gym_demo.py\" rel=\"nofollow\">the gym demo</a>.</p>\n<h2>Quick Start</h2>\n<p>Install Waldorf using <a href=\"docs/installation.md\" rel=\"nofollow\">the installation guide</a> and\ncheck out <a href=\"example/gym_demo.py\" rel=\"nofollow\">the gym demo</a>.</p>\n<h2>Disclaimer</h2>\n<p>Waldorf is still research code, so it may be slightly lacking in terms of\ndocumentation and support. Any feedback is welcomed.</p>\n\n          </div>"}, "last_serial": 5450504, "releases": {"0.6.0.post1": [{"comment_text": "", "digests": {"md5": "76b489345642879685697a093d1835ca", "sha256": "58ae08b9922f931875437d24f5eb677f0a4cac9f75cc0ec1c305887682844c22"}, "downloads": -1, "filename": "waldorf-0.6.0.post1-py3-none-any.whl", "has_sig": false, "md5_digest": "76b489345642879685697a093d1835ca", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 219319, "upload_time": "2019-06-26T09:05:46", "upload_time_iso_8601": "2019-06-26T09:05:46.113147Z", "url": "https://files.pythonhosted.org/packages/3a/a1/75896b08b74765c7d2038edad2659c9bdc337f54f2debbccbedbfa0b46dc/waldorf-0.6.0.post1-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "76b489345642879685697a093d1835ca", "sha256": "58ae08b9922f931875437d24f5eb677f0a4cac9f75cc0ec1c305887682844c22"}, "downloads": -1, "filename": "waldorf-0.6.0.post1-py3-none-any.whl", "has_sig": false, "md5_digest": "76b489345642879685697a093d1835ca", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 219319, "upload_time": "2019-06-26T09:05:46", "upload_time_iso_8601": "2019-06-26T09:05:46.113147Z", "url": "https://files.pythonhosted.org/packages/3a/a1/75896b08b74765c7d2038edad2659c9bdc337f54f2debbccbedbfa0b46dc/waldorf-0.6.0.post1-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 03:32:42 2020"}