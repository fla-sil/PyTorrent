{"info": {"author": "Adam Erispaha", "author_email": "aerispaha@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": "# swmmio\n*v0.4.2 (2020/05/06)*\n\n[![Build status](https://ci.appveyor.com/api/projects/status/qywujm5w2wm0y2tv/branch/master?svg=true)](https://ci.appveyor.com/project/aerispaha/swmmio/branch/master)\n[![Build Status](https://travis-ci.com/aerispaha/swmmio.svg?branch=master)](https://travis-ci.com/aerispaha/swmmio)\n\n![Kool Picture](docs/img/impact_of_option.png?raw=true \"Impact of Option\")\nSWMMIO is a set of python tools aiming to provide a means for version control and visualizing results from the EPA Stormwater Management Model (SWMM). Command line tools are also provided for running models individually and in parallel via Python's `multiprocessing` module. These tools are being developed specifically for the application of flood risk management, though most functionality is applicable to SWMM modeling in general.\n\n\n### Prerequisites\nSWMMIO functions primarily by interfacing with .inp and .rpt (input and report) files produced by SWMM. Functions within the `run_models` module rely on a SWMM5 engine which can be downloaded [here](https://www.epa.gov/water-research/storm-water-management-model-swmm).\n\n\n### Dependencies\n*  [pillow==6.0.0](https://python-pillow.org/)\n*  [numpy==1.16.4](https://numpy.org/)\n*  [pandas==0.24.2](https://github.com/pydata/pandas)\n*  [pyshp==2.1.0](https://github.com/GeospatialPython/pyshp)\n*  [geojson==2.4.1](https://pypi.org/project/geojson/)\n\n\n### Installation:\nBefore installation, it's recommended to first activate a [virtualenv](https://github.com/pypa/virtualenv) to not crowd your system's package library. If you don't use any of the dependencies listed above, this step is less important. SWMMIO can be installed via pip in your command line:\n\n```bash\npip install swmmio\n```\n\n### Basic Usage\nThe `swmmio.Model()` class provides the basic endpoint for interfacing with SWMM models. To get started, save a SWMM5 model (.inp) in a directory with its report file (.rpt). A few examples:   \n```python\nimport swmmio\n\n#instantiate a swmmio model object\nmymodel = swmmio.Model('/path/to/directory with swmm files')\n\n#Pandas dataframe with most useful data related to model nodes, conduits, and subcatchments\nnodes = mymodel.nodes()\nconduits = mymodel.conduits()\nsubs = mymodel.subcatchments()\n\n#enjoy all the Pandas functions\nnodes.head()\n```\n<table border=1 class=dataframe><thead><tr style=text-align:right><th><th>InvertElev<th>MaxDepth<th>SurchargeDepth<th>PondedArea<th>Type<th>AvgDepth<th>MaxNodeDepth<th>MaxHGL<th>MaxDay_depth<th>MaxHr_depth<th>HoursFlooded<th>MaxQ<th>MaxDay_flood<th>MaxHr_flood<th>TotalFloodVol<th>MaximumPondDepth<th>X<th>Y<th>coords<tr><th>Name<th><th><th><th><th><th><th><th><th><th><th><th><th><th><th><th><th><th><th><tbody><tr><th>S42A_10.N_4<td>13.506673<td>6.326977<td>5.0<td>110.0<td>JUNCTION<td>0.69<td>6.33<td>19.83<td>0<td>12:01<td>0.01<td>0.20<td>0.0<td>11:52<td>0.000<td>6.33<td>2689107.0<td>227816.000<td>[(2689107.0, 227816.0)]<tr><th>D70_ShunkStreet_Trunk_43<td>8.508413<td>2.493647<td>5.0<td>744.0<td>JUNCTION<td>0.04<td>0.23<td>8.74<td>0<td>12:14<td>NaN<td>NaN<td>NaN<td>NaN<td>NaN<td>NaN<td>2691329.5<td>223675.813<td>[(2691329.5, 223675.813)]<tr><th>TD61_1_2_90<td>5.150000<td>15.398008<td>0.0<td>0.0<td>JUNCTION<td>0.68<td>15.40<td>20.55<td>0<td>11:55<td>0.01<td>19.17<td>0.0<td>11:56<td>0.000<td>15.40<td>2698463.5<td>230905.720<td>[(2698463.5, 230905.72)]<tr><th>D66_36.D.7.C.1_19<td>19.320000<td>3.335760<td>5.0<td>6028.0<td>JUNCTION<td>0.57<td>3.38<td>22.70<td>0<td>12:00<td>0.49<td>6.45<td>0.0<td>11:51<td>0.008<td>3.38<td>2691999.0<td>230309.563<td>[(2691999.0, 230309.563)]</table>\n\n```python\n#write to a csv\nnodes.to_csv('/path/mynodes.csv')\n\n#calculate average and weighted average impervious\navg_imperviousness = subs.PercImperv.mean()\nweighted_avg_imp = (subs.Area * subs.PercImperv).sum() / len(subs)\n```\n\n### Generating Graphics\nCreate an image (.png) visualization of the model. By default, pipe stress and node flood duration is visualized if your model includes output data (a .rpt file should accompany the .inp).\n\n```python\nfrom swmmio.graphics import swmm_graphics as sg\nsg.draw_model(mymodel)\n```\n\n![Default Draw Output](docs/img/default_draw.png?raw=true \"Sewer Stress, Node Flooding\")\n\nUse pandas to calculate some interesting stats, and generate a image to highlight\nwhat's interesting or important for your project:\n\n```python\n#isolate nodes that have flooded for more than 30 minutes\nflooded_series = nodes.loc[nodes.HoursFlooded>0.5, 'TotalFloodVol']\nflood_vol = sum(flooded_series) #total flood volume (million gallons)\nflooded_count = len(flooded_series) #count of flooded nodes\n\n#highlight these nodes in a graphic\nnodes['draw_color'] = '#787882' #grey, default node color\nnodes.loc[nodes.HoursFlooded>0.5, 'draw_color'] = '#751167' #purple, flooded nodes\n\n#set the radius of flooded nodes as a function of HoursFlooded\nnodes.loc[nodes.HoursFlooded>1, 'draw_size'] = nodes.loc[nodes.HoursFlooded>1, 'HoursFlooded'] * 12\n\n#make the conduits grey, sized as function of their geometry\nconds['draw_color'] = '#787882'\nconds['draw_size'] = conds.Geom1\n\n#add an informative annotation, and draw:\nannotation = 'Flooded Volume: {}MG\\nFlooded Nodes:{}'.format(round(flood_vol), flooded_count)\nsg.draw_model(mymodel, annotation=annotation, file_path='flooded_anno_example.png')\n```\n![Flooded highlight](docs/img/flooded_anno_example.png?raw=true \"Node Flooding with annotation\")\n\n### Building Variations of Models\nStarting with a base SWMM model, other models can be created by inserting altered data into a new inp file. Useful for sensitivity analysis or varying boundary conditions, models can be created using a fairly simple loop, leveraging the `modify_model` package.\n\nFor example, climate change impacts can be investigated by creating a set of models with varying outfall Fixed Stage elevations:\n\n```python\nimport os, shutil\nimport swmmio\nfrom swmmio.utils.modify_model import replace_inp_section\n\n#initialize a baseline model object\nbaseline = swmmio.Model(r'path\\to\\baseline.inp')\nrise = 0.0 #set the starting sea level rise condition\n\n#create models up to 5ft of sea level rise.\nwhile rise <= 5:\n\n    #create a dataframe of the model's outfalls\n    outfalls = baseline.inp.outfalls\n\n    #create the Pandas logic to access the StageOrTimeseries column of  FIXED outfalls\n    slice_condition = outfalls.OutfallType == 'FIXED', 'StageOrTimeseries'\n\n    #add the current rise to the outfalls' stage elevation\n    outfalls.loc[slice_condition] = pd.to_numeric(outfalls.loc[slice_condition]) + rise\n    baseline.inp.outfalls = outfalls\n\n    #copy the base model into a new directory    \n    newdir = os.path.join(baseline.inp.dir, str(rise))\n    os.mkdir(newdir)\n    newfilepath = os.path.join(newdir, baseline.inp.name + \"_\" + str(rise) + '_SLR.inp')\n\n    #Overwrite the OUTFALLS section of the new model with the adjusted data\n    baseline.inp.save(newfilepath)\n\n    #increase sea level rise for the next loop\n    rise += 0.25\n\n```\n\n### Access Model Network\nThe `swmmio.Model` class returns a Networkx MultiDiGraph representation of the model via that `network` parameter:\n```python\n\n#access the model as a Networkx MutliDiGraph\nG = model.network\n\n#iterate through links\nfor u, v, key, data in model.network.edges(data=True, keys=True):\n\n        print (key, data['Geom1'])\n        # do stuff with the network\n```  \n\n### Running Models\nUsing the command line tool, individual SWMM5 models can be run by invoking the swmmio module in your shell as such:\n```\n$ python -m swmmio --run path/to/mymodel.inp\n```\nIf you have many models to run and would like to take advantage of your machine's cores, you can start a pool of simulations with the `--start_pool` (or `-sp`) command. After pointing `-sp` to one or more directories, swmmio will search for SWMM .inp files and add all them to a multiprocessing pool. By default, `-sp` leaves 4 of your machine's cores unused. This can be changed via the `-cores_left` argument.\n```\n$ #run all models in models in directories Model_Dir1 Model_Dir2\n$ python -m swmmio -sp Model_Dir1 Model_Dir2  \n\n$ #leave 1 core unused\n$ python -m swmmio -sp Model_Dir1 Model_Dir2  -cores_left=1\n```\n<div class=\"warning\">\n    <p class=\"first admonition-title\">Warning</p>\n    <p class=\"last\">Using all cores for simultaneous model runs can put your machine's CPU usage at 100% for extended periods of time. This probably puts stress on your hardware. Use at your own risk.</p>\n</div>\n\n\n\n### Flood Model Options Generation\nswmmio can take a set of independent storm flood relief (SFR) alternatives and combine them into every combination of potential infrastructure changes. This lays the ground work for identifying the most-efficient implementation sequence and investment level.\n\nConsider the simplified situaiton where a city is interested in solving a flooding issue by installing new relief sewers along Street A and/or Street B. Further, the city wants to decide whether they should be 1 or 2 blocks long. Engineers then decide to build SWMM models for 4 potential relief sewer options:\n*  A1 -> One block of relief sewer on Street A\n*  A2 -> Two blocks of relief sewer on Street A\n*  B1 -> One block of relief sewer on Street B\n*  B2 -> Two blocks of relief sewer on Street B\n\nTo be comprehensive, implementation scenarios should be modeled for combinations of these options; it may be more cost-effective, for example, to build relief sewers on one block of Street A and Street B in combination, rather than two blocks on either street independently.\n\nswmmio achieves this within the version_control module. The `create_combinations()` function builds models for every logical combinations of the segmented flood mitigation models. In the example above, models for the following scenarios will be created:\n*  A1 with B1\n*  A1 with B2\n*  A2 with B1\n*  A2 with B2\n\nFor the `create_combinations()` function to work, the model directory needs to be set up as follows:\n```\n\u00e2\u201d\u0153\u00e2\u201d\u20ac\u00e2\u201d\u20ac\u00e2\u201d\u20acBaseline\n        baseline.inp\n\u00e2\u201d\u0153\u00e2\u201d\u20ac\u00e2\u201d\u20ac\u00e2\u201d\u20acCombinations\n\u00e2\u201d\u201d\u00e2\u201d\u20ac\u00e2\u201d\u20ac\u00e2\u201d\u20acSegments\n    \u00e2\u201d\u0153\u00e2\u201d\u20ac\u00e2\u201d\u20ac\u00e2\u201d\u20acA\n    \u00e2\u201d\u201a   \u00e2\u201d\u0153\u00e2\u201d\u20ac\u00e2\u201d\u20ac\u00e2\u201d\u20acA1\n    \u00e2\u201d\u201a   \u00e2\u201d\u201a   A1.inp\n    \u00e2\u201d\u201a   \u00e2\u201d\u201d\u00e2\u201d\u20ac\u00e2\u201d\u20ac\u00e2\u201d\u20acA2\n    \u00e2\u201d\u201a       A2.inp\n    \u00e2\u201d\u201d\u00e2\u201d\u20ac\u00e2\u201d\u20ac\u00e2\u201d\u20acB\n        \u00e2\u201d\u0153\u00e2\u201d\u20ac\u00e2\u201d\u20ac\u00e2\u201d\u20acB1\n        \u00e2\u201d\u201a   B1.inp\n        \u00e2\u201d\u201d\u00e2\u201d\u20ac\u00e2\u201d\u20ac\u00e2\u201d\u20acB2\n            B2.inp\n```\nThe new models will be built and saved within the Combinations directory. `create_combinations()` needs to know where these directories are and optionally takes version_id and comments data:\n\n```python\n#load the version_control module\nfrom swmmio.version_control import version_control as vc\n\n#organize the folder structure\nbaseline_dir = r'path/to/Baseline/'\nsegments_dir = r'path/to/Segments/'\ntarget_dir = r'path/to/Combinations/'\n\n#generate flood mitigation options\nvc.create_combinations(\n    baseline_dir,\n    segments_dir,\n    target_dir,\n    version_id='initial',\n    comments='example flood model generation comments')\n```\n\nThe new models will be saved in subdirectories within the `target_dir`. New models (and their containing directory) will be named based on a concatenation of their parent models' names. It is recommended to keep parent model names as concise as possible such that child model names are manageable. After running `create_combinations()`, your project directory will look like this:\n```\n\u00e2\u201d\u0153\u00e2\u201d\u20ac\u00e2\u201d\u20ac\u00e2\u201d\u20acBaseline\n\u00e2\u201d\u0153\u00e2\u201d\u20ac\u00e2\u201d\u20ac\u00e2\u201d\u20acCombinations\n\u00e2\u201d\u201a   \u00e2\u201d\u0153\u00e2\u201d\u20ac\u00e2\u201d\u20ac\u00e2\u201d\u20acA1_B1\n\u00e2\u201d\u201a   \u00e2\u201d\u0153\u00e2\u201d\u20ac\u00e2\u201d\u20ac\u00e2\u201d\u20acA1_B2\n\u00e2\u201d\u201a   \u00e2\u201d\u0153\u00e2\u201d\u20ac\u00e2\u201d\u20ac\u00e2\u201d\u20acA2_B1\n\u00e2\u201d\u201a   \u00e2\u201d\u201d\u00e2\u201d\u20ac\u00e2\u201d\u20ac\u00e2\u201d\u20acA2_B2\n\u00e2\u201d\u201d\u00e2\u201d\u20ac\u00e2\u201d\u20ac\u00e2\u201d\u20acSegments\n    \u00e2\u201d\u0153\u00e2\u201d\u20ac\u00e2\u201d\u20ac\u00e2\u201d\u20acA\n    \u00e2\u201d\u201a   \u00e2\u201d\u0153\u00e2\u201d\u20ac\u00e2\u201d\u20ac\u00e2\u201d\u20acA1\n    \u00e2\u201d\u201a   \u00e2\u201d\u201d\u00e2\u201d\u20ac\u00e2\u201d\u20ac\u00e2\u201d\u20acA2\n    \u00e2\u201d\u201d\u00e2\u201d\u20ac\u00e2\u201d\u20ac\u00e2\u201d\u20acB\n        \u00e2\u201d\u0153\u00e2\u201d\u20ac\u00e2\u201d\u20ac\u00e2\u201d\u20acB1\n        \u00e2\u201d\u201d\u00e2\u201d\u20ac\u00e2\u201d\u20ac\u00e2\u201d\u20acB2\n\n```\n\n### SWMM Model Version Control\nTo add more segments to the model space, create a new segment directory and rerun the `create_combinations()` function. Optionally include a comment summarizing how the model space is changing:\n```python\nvc.create_combinations(\n    baseline_dir,\n    alternatives_dir,\n    target_dir,\n    version_id='addA3',\n    comments='added model A3 to the scope')\n```\nThe `create_combinations()` function can also be used to in the same way to propogate a change in an existing segment (parent) model to all of the children. Version information for each model is stored within a subdirectory called `vc` within each model directory. Each time a model is modified from the `create_combinations()` function, a new \"BuildInstructions\" file is generated summarizing the changes. BuildInstructions files outline how to recreate the model with respect to the baseline model.\n\n\nTO BE CONTINUED...\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/aerispaha/swmmio", "keywords": "", "license": "MIT License", "maintainer": "", "maintainer_email": "", "name": "swmmio", "package_url": "https://pypi.org/project/swmmio/", "platform": "OS Independent", "project_url": "https://pypi.org/project/swmmio/", "project_urls": {"Homepage": "https://github.com/aerispaha/swmmio"}, "release_url": "https://pypi.org/project/swmmio/0.4.2/", "requires_dist": ["Pillow (>=6.2.0)", "numpy (>=1.16.4)", "pandas (>=0.24.2)", "pyshp (==2.1.0)", "geojson (==2.4.1)", "networkx (>=2.4)", "pyyaml (>=3.12)"], "requires_python": "", "summary": "Tools for interacting with, editing, and visualizing EPA SWMM5 models", "version": "0.4.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>swmmio</h1>\n<p><em>v0.4.2 (2020/05/06)</em></p>\n<p><a href=\"https://ci.appveyor.com/project/aerispaha/swmmio/branch/master\" rel=\"nofollow\"><img alt=\"Build status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/899162b5197283a060724f4446c76b8dfc42b817/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f717977756a6d357732776d30793274762f6272616e63682f6d61737465723f7376673d74727565\"></a>\n<a href=\"https://travis-ci.com/aerispaha/swmmio\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fbb77114cf7897f3236212df1798f8ccc52a7d7e/68747470733a2f2f7472617669732d63692e636f6d2f6165726973706168612f73776d6d696f2e7376673f6272616e63683d6d6173746572\"></a></p>\n<p><img alt=\"Kool Picture\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f4d81a26c57f2166646baafed55c27e4151c68df/646f63732f696d672f696d706163745f6f665f6f7074696f6e2e706e673f7261773d74727565\">\nSWMMIO is a set of python tools aiming to provide a means for version control and visualizing results from the EPA Stormwater Management Model (SWMM). Command line tools are also provided for running models individually and in parallel via Python's <code>multiprocessing</code> module. These tools are being developed specifically for the application of flood risk management, though most functionality is applicable to SWMM modeling in general.</p>\n<h3>Prerequisites</h3>\n<p>SWMMIO functions primarily by interfacing with .inp and .rpt (input and report) files produced by SWMM. Functions within the <code>run_models</code> module rely on a SWMM5 engine which can be downloaded <a href=\"https://www.epa.gov/water-research/storm-water-management-model-swmm\" rel=\"nofollow\">here</a>.</p>\n<h3>Dependencies</h3>\n<ul>\n<li><a href=\"https://python-pillow.org/\" rel=\"nofollow\">pillow==6.0.0</a></li>\n<li><a href=\"https://numpy.org/\" rel=\"nofollow\">numpy==1.16.4</a></li>\n<li><a href=\"https://github.com/pydata/pandas\" rel=\"nofollow\">pandas==0.24.2</a></li>\n<li><a href=\"https://github.com/GeospatialPython/pyshp\" rel=\"nofollow\">pyshp==2.1.0</a></li>\n<li><a href=\"https://pypi.org/project/geojson/\" rel=\"nofollow\">geojson==2.4.1</a></li>\n</ul>\n<h3>Installation:</h3>\n<p>Before installation, it's recommended to first activate a <a href=\"https://github.com/pypa/virtualenv\" rel=\"nofollow\">virtualenv</a> to not crowd your system's package library. If you don't use any of the dependencies listed above, this step is less important. SWMMIO can be installed via pip in your command line:</p>\n<pre>pip install swmmio\n</pre>\n<h3>Basic Usage</h3>\n<p>The <code>swmmio.Model()</code> class provides the basic endpoint for interfacing with SWMM models. To get started, save a SWMM5 model (.inp) in a directory with its report file (.rpt). A few examples:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">swmmio</span>\n\n<span class=\"c1\">#instantiate a swmmio model object</span>\n<span class=\"n\">mymodel</span> <span class=\"o\">=</span> <span class=\"n\">swmmio</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">(</span><span class=\"s1\">'/path/to/directory with swmm files'</span><span class=\"p\">)</span>\n\n<span class=\"c1\">#Pandas dataframe with most useful data related to model nodes, conduits, and subcatchments</span>\n<span class=\"n\">nodes</span> <span class=\"o\">=</span> <span class=\"n\">mymodel</span><span class=\"o\">.</span><span class=\"n\">nodes</span><span class=\"p\">()</span>\n<span class=\"n\">conduits</span> <span class=\"o\">=</span> <span class=\"n\">mymodel</span><span class=\"o\">.</span><span class=\"n\">conduits</span><span class=\"p\">()</span>\n<span class=\"n\">subs</span> <span class=\"o\">=</span> <span class=\"n\">mymodel</span><span class=\"o\">.</span><span class=\"n\">subcatchments</span><span class=\"p\">()</span>\n\n<span class=\"c1\">#enjoy all the Pandas functions</span>\n<span class=\"n\">nodes</span><span class=\"o\">.</span><span class=\"n\">head</span><span class=\"p\">()</span>\n</pre>\n<table><thead><tr><th></th><th>InvertElev</th><th>MaxDepth</th><th>SurchargeDepth</th><th>PondedArea</th><th>Type</th><th>AvgDepth</th><th>MaxNodeDepth</th><th>MaxHGL</th><th>MaxDay_depth</th><th>MaxHr_depth</th><th>HoursFlooded</th><th>MaxQ</th><th>MaxDay_flood</th><th>MaxHr_flood</th><th>TotalFloodVol</th><th>MaximumPondDepth</th><th>X</th><th>Y</th><th>coords</th></tr><tr><th>Name</th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><th>S42A_10.N_4</th><td>13.506673</td><td>6.326977</td><td>5.0</td><td>110.0</td><td>JUNCTION</td><td>0.69</td><td>6.33</td><td>19.83</td><td>0</td><td>12:01</td><td>0.01</td><td>0.20</td><td>0.0</td><td>11:52</td><td>0.000</td><td>6.33</td><td>2689107.0</td><td>227816.000</td><td>[(2689107.0, 227816.0)]</td></tr><tr><th>D70_ShunkStreet_Trunk_43</th><td>8.508413</td><td>2.493647</td><td>5.0</td><td>744.0</td><td>JUNCTION</td><td>0.04</td><td>0.23</td><td>8.74</td><td>0</td><td>12:14</td><td>NaN</td><td>NaN</td><td>NaN</td><td>NaN</td><td>NaN</td><td>NaN</td><td>2691329.5</td><td>223675.813</td><td>[(2691329.5, 223675.813)]</td></tr><tr><th>TD61_1_2_90</th><td>5.150000</td><td>15.398008</td><td>0.0</td><td>0.0</td><td>JUNCTION</td><td>0.68</td><td>15.40</td><td>20.55</td><td>0</td><td>11:55</td><td>0.01</td><td>19.17</td><td>0.0</td><td>11:56</td><td>0.000</td><td>15.40</td><td>2698463.5</td><td>230905.720</td><td>[(2698463.5, 230905.72)]</td></tr><tr><th>D66_36.D.7.C.1_19</th><td>19.320000</td><td>3.335760</td><td>5.0</td><td>6028.0</td><td>JUNCTION</td><td>0.57</td><td>3.38</td><td>22.70</td><td>0</td><td>12:00</td><td>0.49</td><td>6.45</td><td>0.0</td><td>11:51</td><td>0.008</td><td>3.38</td><td>2691999.0</td><td>230309.563</td><td>[(2691999.0, 230309.563)]</td></tr></tbody></table>\n<pre><span class=\"c1\">#write to a csv</span>\n<span class=\"n\">nodes</span><span class=\"o\">.</span><span class=\"n\">to_csv</span><span class=\"p\">(</span><span class=\"s1\">'/path/mynodes.csv'</span><span class=\"p\">)</span>\n\n<span class=\"c1\">#calculate average and weighted average impervious</span>\n<span class=\"n\">avg_imperviousness</span> <span class=\"o\">=</span> <span class=\"n\">subs</span><span class=\"o\">.</span><span class=\"n\">PercImperv</span><span class=\"o\">.</span><span class=\"n\">mean</span><span class=\"p\">()</span>\n<span class=\"n\">weighted_avg_imp</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">subs</span><span class=\"o\">.</span><span class=\"n\">Area</span> <span class=\"o\">*</span> <span class=\"n\">subs</span><span class=\"o\">.</span><span class=\"n\">PercImperv</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">()</span> <span class=\"o\">/</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">subs</span><span class=\"p\">)</span>\n</pre>\n<h3>Generating Graphics</h3>\n<p>Create an image (.png) visualization of the model. By default, pipe stress and node flood duration is visualized if your model includes output data (a .rpt file should accompany the .inp).</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">swmmio.graphics</span> <span class=\"kn\">import</span> <span class=\"n\">swmm_graphics</span> <span class=\"k\">as</span> <span class=\"n\">sg</span>\n<span class=\"n\">sg</span><span class=\"o\">.</span><span class=\"n\">draw_model</span><span class=\"p\">(</span><span class=\"n\">mymodel</span><span class=\"p\">)</span>\n</pre>\n<p><img alt=\"Default Draw Output\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e035e8a8a7768c929148295cf8f7d87de99165a3/646f63732f696d672f64656661756c745f647261772e706e673f7261773d74727565\"></p>\n<p>Use pandas to calculate some interesting stats, and generate a image to highlight\nwhat's interesting or important for your project:</p>\n<pre><span class=\"c1\">#isolate nodes that have flooded for more than 30 minutes</span>\n<span class=\"n\">flooded_series</span> <span class=\"o\">=</span> <span class=\"n\">nodes</span><span class=\"o\">.</span><span class=\"n\">loc</span><span class=\"p\">[</span><span class=\"n\">nodes</span><span class=\"o\">.</span><span class=\"n\">HoursFlooded</span><span class=\"o\">&gt;</span><span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"s1\">'TotalFloodVol'</span><span class=\"p\">]</span>\n<span class=\"n\">flood_vol</span> <span class=\"o\">=</span> <span class=\"nb\">sum</span><span class=\"p\">(</span><span class=\"n\">flooded_series</span><span class=\"p\">)</span> <span class=\"c1\">#total flood volume (million gallons)</span>\n<span class=\"n\">flooded_count</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">flooded_series</span><span class=\"p\">)</span> <span class=\"c1\">#count of flooded nodes</span>\n\n<span class=\"c1\">#highlight these nodes in a graphic</span>\n<span class=\"n\">nodes</span><span class=\"p\">[</span><span class=\"s1\">'draw_color'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'#787882'</span> <span class=\"c1\">#grey, default node color</span>\n<span class=\"n\">nodes</span><span class=\"o\">.</span><span class=\"n\">loc</span><span class=\"p\">[</span><span class=\"n\">nodes</span><span class=\"o\">.</span><span class=\"n\">HoursFlooded</span><span class=\"o\">&gt;</span><span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"s1\">'draw_color'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'#751167'</span> <span class=\"c1\">#purple, flooded nodes</span>\n\n<span class=\"c1\">#set the radius of flooded nodes as a function of HoursFlooded</span>\n<span class=\"n\">nodes</span><span class=\"o\">.</span><span class=\"n\">loc</span><span class=\"p\">[</span><span class=\"n\">nodes</span><span class=\"o\">.</span><span class=\"n\">HoursFlooded</span><span class=\"o\">&gt;</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'draw_size'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">nodes</span><span class=\"o\">.</span><span class=\"n\">loc</span><span class=\"p\">[</span><span class=\"n\">nodes</span><span class=\"o\">.</span><span class=\"n\">HoursFlooded</span><span class=\"o\">&gt;</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'HoursFlooded'</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"mi\">12</span>\n\n<span class=\"c1\">#make the conduits grey, sized as function of their geometry</span>\n<span class=\"n\">conds</span><span class=\"p\">[</span><span class=\"s1\">'draw_color'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'#787882'</span>\n<span class=\"n\">conds</span><span class=\"p\">[</span><span class=\"s1\">'draw_size'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">conds</span><span class=\"o\">.</span><span class=\"n\">Geom1</span>\n\n<span class=\"c1\">#add an informative annotation, and draw:</span>\n<span class=\"n\">annotation</span> <span class=\"o\">=</span> <span class=\"s1\">'Flooded Volume: </span><span class=\"si\">{}</span><span class=\"s1\">MG</span><span class=\"se\">\\n</span><span class=\"s1\">Flooded Nodes:</span><span class=\"si\">{}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"nb\">round</span><span class=\"p\">(</span><span class=\"n\">flood_vol</span><span class=\"p\">),</span> <span class=\"n\">flooded_count</span><span class=\"p\">)</span>\n<span class=\"n\">sg</span><span class=\"o\">.</span><span class=\"n\">draw_model</span><span class=\"p\">(</span><span class=\"n\">mymodel</span><span class=\"p\">,</span> <span class=\"n\">annotation</span><span class=\"o\">=</span><span class=\"n\">annotation</span><span class=\"p\">,</span> <span class=\"n\">file_path</span><span class=\"o\">=</span><span class=\"s1\">'flooded_anno_example.png'</span><span class=\"p\">)</span>\n</pre>\n<p><img alt=\"Flooded highlight\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d27cf0094778fd9ad3c801e85f4c5d679da7cc1d/646f63732f696d672f666c6f6f6465645f616e6e6f5f6578616d706c652e706e673f7261773d74727565\"></p>\n<h3>Building Variations of Models</h3>\n<p>Starting with a base SWMM model, other models can be created by inserting altered data into a new inp file. Useful for sensitivity analysis or varying boundary conditions, models can be created using a fairly simple loop, leveraging the <code>modify_model</code> package.</p>\n<p>For example, climate change impacts can be investigated by creating a set of models with varying outfall Fixed Stage elevations:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">os</span><span class=\"o\">,</span> <span class=\"nn\">shutil</span>\n<span class=\"kn\">import</span> <span class=\"nn\">swmmio</span>\n<span class=\"kn\">from</span> <span class=\"nn\">swmmio.utils.modify_model</span> <span class=\"kn\">import</span> <span class=\"n\">replace_inp_section</span>\n\n<span class=\"c1\">#initialize a baseline model object</span>\n<span class=\"n\">baseline</span> <span class=\"o\">=</span> <span class=\"n\">swmmio</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s1\">'path\\to\\baseline.inp'</span><span class=\"p\">)</span>\n<span class=\"n\">rise</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span> <span class=\"c1\">#set the starting sea level rise condition</span>\n\n<span class=\"c1\">#create models up to 5ft of sea level rise.</span>\n<span class=\"k\">while</span> <span class=\"n\">rise</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">5</span><span class=\"p\">:</span>\n\n    <span class=\"c1\">#create a dataframe of the model's outfalls</span>\n    <span class=\"n\">outfalls</span> <span class=\"o\">=</span> <span class=\"n\">baseline</span><span class=\"o\">.</span><span class=\"n\">inp</span><span class=\"o\">.</span><span class=\"n\">outfalls</span>\n\n    <span class=\"c1\">#create the Pandas logic to access the StageOrTimeseries column of  FIXED outfalls</span>\n    <span class=\"n\">slice_condition</span> <span class=\"o\">=</span> <span class=\"n\">outfalls</span><span class=\"o\">.</span><span class=\"n\">OutfallType</span> <span class=\"o\">==</span> <span class=\"s1\">'FIXED'</span><span class=\"p\">,</span> <span class=\"s1\">'StageOrTimeseries'</span>\n\n    <span class=\"c1\">#add the current rise to the outfalls' stage elevation</span>\n    <span class=\"n\">outfalls</span><span class=\"o\">.</span><span class=\"n\">loc</span><span class=\"p\">[</span><span class=\"n\">slice_condition</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">to_numeric</span><span class=\"p\">(</span><span class=\"n\">outfalls</span><span class=\"o\">.</span><span class=\"n\">loc</span><span class=\"p\">[</span><span class=\"n\">slice_condition</span><span class=\"p\">])</span> <span class=\"o\">+</span> <span class=\"n\">rise</span>\n    <span class=\"n\">baseline</span><span class=\"o\">.</span><span class=\"n\">inp</span><span class=\"o\">.</span><span class=\"n\">outfalls</span> <span class=\"o\">=</span> <span class=\"n\">outfalls</span>\n\n    <span class=\"c1\">#copy the base model into a new directory    </span>\n    <span class=\"n\">newdir</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">baseline</span><span class=\"o\">.</span><span class=\"n\">inp</span><span class=\"o\">.</span><span class=\"n\">dir</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">rise</span><span class=\"p\">))</span>\n    <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">mkdir</span><span class=\"p\">(</span><span class=\"n\">newdir</span><span class=\"p\">)</span>\n    <span class=\"n\">newfilepath</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">newdir</span><span class=\"p\">,</span> <span class=\"n\">baseline</span><span class=\"o\">.</span><span class=\"n\">inp</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">+</span> <span class=\"s2\">\"_\"</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">rise</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s1\">'_SLR.inp'</span><span class=\"p\">)</span>\n\n    <span class=\"c1\">#Overwrite the OUTFALLS section of the new model with the adjusted data</span>\n    <span class=\"n\">baseline</span><span class=\"o\">.</span><span class=\"n\">inp</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">(</span><span class=\"n\">newfilepath</span><span class=\"p\">)</span>\n\n    <span class=\"c1\">#increase sea level rise for the next loop</span>\n    <span class=\"n\">rise</span> <span class=\"o\">+=</span> <span class=\"mf\">0.25</span>\n</pre>\n<h3>Access Model Network</h3>\n<p>The <code>swmmio.Model</code> class returns a Networkx MultiDiGraph representation of the model via that <code>network</code> parameter:</p>\n<pre><span class=\"c1\">#access the model as a Networkx MutliDiGraph</span>\n<span class=\"n\">G</span> <span class=\"o\">=</span> <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">network</span>\n\n<span class=\"c1\">#iterate through links</span>\n<span class=\"k\">for</span> <span class=\"n\">u</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">data</span> <span class=\"ow\">in</span> <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">network</span><span class=\"o\">.</span><span class=\"n\">edges</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">keys</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">):</span>\n\n        <span class=\"nb\">print</span> <span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s1\">'Geom1'</span><span class=\"p\">])</span>\n        <span class=\"c1\"># do stuff with the network</span>\n</pre>\n<h3>Running Models</h3>\n<p>Using the command line tool, individual SWMM5 models can be run by invoking the swmmio module in your shell as such:</p>\n<pre><code>$ python -m swmmio --run path/to/mymodel.inp\n</code></pre>\n<p>If you have many models to run and would like to take advantage of your machine's cores, you can start a pool of simulations with the <code>--start_pool</code> (or <code>-sp</code>) command. After pointing <code>-sp</code> to one or more directories, swmmio will search for SWMM .inp files and add all them to a multiprocessing pool. By default, <code>-sp</code> leaves 4 of your machine's cores unused. This can be changed via the <code>-cores_left</code> argument.</p>\n<pre><code>$ #run all models in models in directories Model_Dir1 Model_Dir2\n$ python -m swmmio -sp Model_Dir1 Model_Dir2  \n\n$ #leave 1 core unused\n$ python -m swmmio -sp Model_Dir1 Model_Dir2  -cores_left=1\n</code></pre>\n<div>\n    <p>Warning</p>\n    <p>Using all cores for simultaneous model runs can put your machine's CPU usage at 100% for extended periods of time. This probably puts stress on your hardware. Use at your own risk.</p>\n</div>\n<h3>Flood Model Options Generation</h3>\n<p>swmmio can take a set of independent storm flood relief (SFR) alternatives and combine them into every combination of potential infrastructure changes. This lays the ground work for identifying the most-efficient implementation sequence and investment level.</p>\n<p>Consider the simplified situaiton where a city is interested in solving a flooding issue by installing new relief sewers along Street A and/or Street B. Further, the city wants to decide whether they should be 1 or 2 blocks long. Engineers then decide to build SWMM models for 4 potential relief sewer options:</p>\n<ul>\n<li>A1 -&gt; One block of relief sewer on Street A</li>\n<li>A2 -&gt; Two blocks of relief sewer on Street A</li>\n<li>B1 -&gt; One block of relief sewer on Street B</li>\n<li>B2 -&gt; Two blocks of relief sewer on Street B</li>\n</ul>\n<p>To be comprehensive, implementation scenarios should be modeled for combinations of these options; it may be more cost-effective, for example, to build relief sewers on one block of Street A and Street B in combination, rather than two blocks on either street independently.</p>\n<p>swmmio achieves this within the version_control module. The <code>create_combinations()</code> function builds models for every logical combinations of the segmented flood mitigation models. In the example above, models for the following scenarios will be created:</p>\n<ul>\n<li>A1 with B1</li>\n<li>A1 with B2</li>\n<li>A2 with B1</li>\n<li>A2 with B2</li>\n</ul>\n<p>For the <code>create_combinations()</code> function to work, the model directory needs to be set up as follows:</p>\n<pre><code>\u00e2\u201d\u0153\u00e2\u201d\u20ac\u00e2\u201d\u20ac\u00e2\u201d\u20acBaseline\n        baseline.inp\n\u00e2\u201d\u0153\u00e2\u201d\u20ac\u00e2\u201d\u20ac\u00e2\u201d\u20acCombinations\n\u00e2\u201d\u201d\u00e2\u201d\u20ac\u00e2\u201d\u20ac\u00e2\u201d\u20acSegments\n    \u00e2\u201d\u0153\u00e2\u201d\u20ac\u00e2\u201d\u20ac\u00e2\u201d\u20acA\n    \u00e2\u201d\u201a   \u00e2\u201d\u0153\u00e2\u201d\u20ac\u00e2\u201d\u20ac\u00e2\u201d\u20acA1\n    \u00e2\u201d\u201a   \u00e2\u201d\u201a   A1.inp\n    \u00e2\u201d\u201a   \u00e2\u201d\u201d\u00e2\u201d\u20ac\u00e2\u201d\u20ac\u00e2\u201d\u20acA2\n    \u00e2\u201d\u201a       A2.inp\n    \u00e2\u201d\u201d\u00e2\u201d\u20ac\u00e2\u201d\u20ac\u00e2\u201d\u20acB\n        \u00e2\u201d\u0153\u00e2\u201d\u20ac\u00e2\u201d\u20ac\u00e2\u201d\u20acB1\n        \u00e2\u201d\u201a   B1.inp\n        \u00e2\u201d\u201d\u00e2\u201d\u20ac\u00e2\u201d\u20ac\u00e2\u201d\u20acB2\n            B2.inp\n</code></pre>\n<p>The new models will be built and saved within the Combinations directory. <code>create_combinations()</code> needs to know where these directories are and optionally takes version_id and comments data:</p>\n<pre><span class=\"c1\">#load the version_control module</span>\n<span class=\"kn\">from</span> <span class=\"nn\">swmmio.version_control</span> <span class=\"kn\">import</span> <span class=\"n\">version_control</span> <span class=\"k\">as</span> <span class=\"n\">vc</span>\n\n<span class=\"c1\">#organize the folder structure</span>\n<span class=\"n\">baseline_dir</span> <span class=\"o\">=</span> <span class=\"sa\">r</span><span class=\"s1\">'path/to/Baseline/'</span>\n<span class=\"n\">segments_dir</span> <span class=\"o\">=</span> <span class=\"sa\">r</span><span class=\"s1\">'path/to/Segments/'</span>\n<span class=\"n\">target_dir</span> <span class=\"o\">=</span> <span class=\"sa\">r</span><span class=\"s1\">'path/to/Combinations/'</span>\n\n<span class=\"c1\">#generate flood mitigation options</span>\n<span class=\"n\">vc</span><span class=\"o\">.</span><span class=\"n\">create_combinations</span><span class=\"p\">(</span>\n    <span class=\"n\">baseline_dir</span><span class=\"p\">,</span>\n    <span class=\"n\">segments_dir</span><span class=\"p\">,</span>\n    <span class=\"n\">target_dir</span><span class=\"p\">,</span>\n    <span class=\"n\">version_id</span><span class=\"o\">=</span><span class=\"s1\">'initial'</span><span class=\"p\">,</span>\n    <span class=\"n\">comments</span><span class=\"o\">=</span><span class=\"s1\">'example flood model generation comments'</span><span class=\"p\">)</span>\n</pre>\n<p>The new models will be saved in subdirectories within the <code>target_dir</code>. New models (and their containing directory) will be named based on a concatenation of their parent models' names. It is recommended to keep parent model names as concise as possible such that child model names are manageable. After running <code>create_combinations()</code>, your project directory will look like this:</p>\n<pre><code>\u00e2\u201d\u0153\u00e2\u201d\u20ac\u00e2\u201d\u20ac\u00e2\u201d\u20acBaseline\n\u00e2\u201d\u0153\u00e2\u201d\u20ac\u00e2\u201d\u20ac\u00e2\u201d\u20acCombinations\n\u00e2\u201d\u201a   \u00e2\u201d\u0153\u00e2\u201d\u20ac\u00e2\u201d\u20ac\u00e2\u201d\u20acA1_B1\n\u00e2\u201d\u201a   \u00e2\u201d\u0153\u00e2\u201d\u20ac\u00e2\u201d\u20ac\u00e2\u201d\u20acA1_B2\n\u00e2\u201d\u201a   \u00e2\u201d\u0153\u00e2\u201d\u20ac\u00e2\u201d\u20ac\u00e2\u201d\u20acA2_B1\n\u00e2\u201d\u201a   \u00e2\u201d\u201d\u00e2\u201d\u20ac\u00e2\u201d\u20ac\u00e2\u201d\u20acA2_B2\n\u00e2\u201d\u201d\u00e2\u201d\u20ac\u00e2\u201d\u20ac\u00e2\u201d\u20acSegments\n    \u00e2\u201d\u0153\u00e2\u201d\u20ac\u00e2\u201d\u20ac\u00e2\u201d\u20acA\n    \u00e2\u201d\u201a   \u00e2\u201d\u0153\u00e2\u201d\u20ac\u00e2\u201d\u20ac\u00e2\u201d\u20acA1\n    \u00e2\u201d\u201a   \u00e2\u201d\u201d\u00e2\u201d\u20ac\u00e2\u201d\u20ac\u00e2\u201d\u20acA2\n    \u00e2\u201d\u201d\u00e2\u201d\u20ac\u00e2\u201d\u20ac\u00e2\u201d\u20acB\n        \u00e2\u201d\u0153\u00e2\u201d\u20ac\u00e2\u201d\u20ac\u00e2\u201d\u20acB1\n        \u00e2\u201d\u201d\u00e2\u201d\u20ac\u00e2\u201d\u20ac\u00e2\u201d\u20acB2\n\n</code></pre>\n<h3>SWMM Model Version Control</h3>\n<p>To add more segments to the model space, create a new segment directory and rerun the <code>create_combinations()</code> function. Optionally include a comment summarizing how the model space is changing:</p>\n<pre><span class=\"n\">vc</span><span class=\"o\">.</span><span class=\"n\">create_combinations</span><span class=\"p\">(</span>\n    <span class=\"n\">baseline_dir</span><span class=\"p\">,</span>\n    <span class=\"n\">alternatives_dir</span><span class=\"p\">,</span>\n    <span class=\"n\">target_dir</span><span class=\"p\">,</span>\n    <span class=\"n\">version_id</span><span class=\"o\">=</span><span class=\"s1\">'addA3'</span><span class=\"p\">,</span>\n    <span class=\"n\">comments</span><span class=\"o\">=</span><span class=\"s1\">'added model A3 to the scope'</span><span class=\"p\">)</span>\n</pre>\n<p>The <code>create_combinations()</code> function can also be used to in the same way to propogate a change in an existing segment (parent) model to all of the children. Version information for each model is stored within a subdirectory called <code>vc</code> within each model directory. Each time a model is modified from the <code>create_combinations()</code> function, a new \"BuildInstructions\" file is generated summarizing the changes. BuildInstructions files outline how to recreate the model with respect to the baseline model.</p>\n<p>TO BE CONTINUED...</p>\n\n          </div>"}, "last_serial": 7182313, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "641cccf5e908cb1a70b4e0ecacc1b1c9", "sha256": "78e1f3c3730ca5d5910461d253f0d2d92b521ea6db15669b4a4a30f5c32bb121"}, "downloads": -1, "filename": "swmmio-0.1.0.zip", "has_sig": false, "md5_digest": "641cccf5e908cb1a70b4e0ecacc1b1c9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15593, "upload_time": "2016-09-06T19:45:09", "upload_time_iso_8601": "2016-09-06T19:45:09.771166Z", "url": "https://files.pythonhosted.org/packages/91/da/7eb8d20e60ec23ea4579a8fdb0e638a8a8dc54e70b18ff9b57c7cbb9ebc1/swmmio-0.1.0.zip", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "399132dfbb89edcce1af96fe2b085ddc", "sha256": "d8de4f02aa8ac9ef9118fbea2070a9d9b3ac8b68641f00fbee9614ab294dcc86"}, "downloads": -1, "filename": "swmmio-0.1.1.zip", "has_sig": false, "md5_digest": "399132dfbb89edcce1af96fe2b085ddc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15574, "upload_time": "2016-09-07T19:01:02", "upload_time_iso_8601": "2016-09-07T19:01:02.568804Z", "url": "https://files.pythonhosted.org/packages/ab/e1/bf619b558b48b4bb508369e0baafe2778e79b03f5bd48a3e37dd8acb3c72/swmmio-0.1.1.zip", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "d99526bec17e3e651da0c220709c8f6c", "sha256": "a0b1879111624ae147a11fb64b02102efa8d4f9c8b5ee2b0123a765ef651f2e5"}, "downloads": -1, "filename": "swmmio-0.1.2.zip", "has_sig": false, "md5_digest": "d99526bec17e3e651da0c220709c8f6c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17186, "upload_time": "2016-09-08T14:54:59", "upload_time_iso_8601": "2016-09-08T14:54:59.993428Z", "url": "https://files.pythonhosted.org/packages/fa/7d/15c8553cb0863102ffa7d0993e00b34ad36f77c3c2766decfdeb836cd458/swmmio-0.1.2.zip", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "62fd8a262f5788ddb2284b7c54c66ec5", "sha256": "cfb0cad6cba2bd32ab14c4f8c3b2d4a761091e63c05d89d40c6b57de45f3665a"}, "downloads": -1, "filename": "swmmio-0.1.3.zip", "has_sig": false, "md5_digest": "62fd8a262f5788ddb2284b7c54c66ec5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 75247, "upload_time": "2016-09-08T16:01:16", "upload_time_iso_8601": "2016-09-08T16:01:16.815218Z", "url": "https://files.pythonhosted.org/packages/58/4d/1e6ff4b4846410f47fdb581415dad5194049a6ebc3025270495b439d7d47/swmmio-0.1.3.zip", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "5c42101d3d621f3dfed751731a2b73e6", "sha256": "b22772400fde9a918bbb886ed7aff8f07542b6defca39f29038cc23aa60ddf2b"}, "downloads": -1, "filename": "swmmio-0.1.4.zip", "has_sig": false, "md5_digest": "5c42101d3d621f3dfed751731a2b73e6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 75193, "upload_time": "2016-09-09T15:29:45", "upload_time_iso_8601": "2016-09-09T15:29:45.249212Z", "url": "https://files.pythonhosted.org/packages/ae/49/bca2bb1b86e6381e30ec0cbc34899f156621edba03d8fca40e6cdd7b3374/swmmio-0.1.4.zip", "yanked": false}], "0.1.7": [{"comment_text": "", "digests": {"md5": "6f9bf75358af602105034ec499d2f360", "sha256": "a91574e3b73eb8e932fec55c340455a54be630e910eb932e2be111d65f8a09c9"}, "downloads": -1, "filename": "swmmio-0.1.7.tar.gz", "has_sig": false, "md5_digest": "6f9bf75358af602105034ec499d2f360", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 64015, "upload_time": "2016-12-02T02:34:20", "upload_time_iso_8601": "2016-12-02T02:34:20.005272Z", "url": "https://files.pythonhosted.org/packages/15/b8/a17d9ea2df5b99b25eab52a7b9fbbd47e6ed7fd8eba28b38dca1b076f1c8/swmmio-0.1.7.tar.gz", "yanked": false}], "0.1.8": [{"comment_text": "", "digests": {"md5": "a04995bb63a0afcae780ea0698c841c5", "sha256": "6b0e87a930ca5ed79a6f36eec5fef576ce3e20b3fdaacf9e2cae322da1eefd34"}, "downloads": -1, "filename": "swmmio-0.1.8.tar.gz", "has_sig": false, "md5_digest": "a04995bb63a0afcae780ea0698c841c5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 284014, "upload_time": "2016-12-07T00:31:08", "upload_time_iso_8601": "2016-12-07T00:31:08.066006Z", "url": "https://files.pythonhosted.org/packages/e1/6a/8837c93f67f993d86987c71dda772d0522a9bab43c4b0bce46b2b83190cf/swmmio-0.1.8.tar.gz", "yanked": false}], "0.1.9": [{"comment_text": "", "digests": {"md5": "49becc3371e949e28214d6a60fd5419b", "sha256": "356de1196b27cde941ad318d476a3792ed375926aa911b1d91fa5881a2be141e"}, "downloads": -1, "filename": "swmmio-0.1.9.tar.gz", "has_sig": false, "md5_digest": "49becc3371e949e28214d6a60fd5419b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 285369, "upload_time": "2017-01-05T00:07:43", "upload_time_iso_8601": "2017-01-05T00:07:43.074243Z", "url": "https://files.pythonhosted.org/packages/5a/42/c14912c53e473ea47656413175f8dc00c32c5452e0beaec46f3f7d95ec41/swmmio-0.1.9.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "44c18a8f59952c45c84e98ceb309fe0a", "sha256": "dff338bb8b719e6d92e100c808e7cbe6af39d2b6db08c974e5dbd6fdbf3145af"}, "downloads": -1, "filename": "swmmio-0.2.0.tar.gz", "has_sig": false, "md5_digest": "44c18a8f59952c45c84e98ceb309fe0a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 385545, "upload_time": "2017-02-06T18:22:38", "upload_time_iso_8601": "2017-02-06T18:22:38.683329Z", "url": "https://files.pythonhosted.org/packages/b4/69/ce075f63118cae1f536fb546418f7c8da1c5ce636b917045b7bd7577ed9a/swmmio-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "544d49cea1d154f210e748e3ef40d06e", "sha256": "6dc00af83ce45f14e94e6963bdf00e6d386c32cd3ed06863e2dd67fe3d8efc3d"}, "downloads": -1, "filename": "swmmio-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "544d49cea1d154f210e748e3ef40d06e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 188887, "upload_time": "2018-10-11T03:35:40", "upload_time_iso_8601": "2018-10-11T03:35:40.043000Z", "url": "https://files.pythonhosted.org/packages/56/30/efe8c2bbb701c9244fb64181ebdcc7ae9c6e3977e993b899ebc1353c2044/swmmio-0.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fc7716ae48c1c5fed3b0a7e613d2b685", "sha256": "f2512354b1816f4c2202e3a84971b3ba27453b64e0e7a7ff1f272f9785dd228e"}, "downloads": -1, "filename": "swmmio-0.2.1.tar.gz", "has_sig": false, "md5_digest": "fc7716ae48c1c5fed3b0a7e613d2b685", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 616342, "upload_time": "2018-10-11T03:35:41", "upload_time_iso_8601": "2018-10-11T03:35:41.882243Z", "url": "https://files.pythonhosted.org/packages/f3/e2/806dc4bab0a6b8afe9be447853ce532d673eb1074c6135d7ec2faa8c2237/swmmio-0.2.1.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "f057816b79a70955322a785ff0b80e17", "sha256": "05b8dd1e77c9a591fe100293ac490d6613bdcd2d2a0cc6aa0b331cf2d4a8c1bc"}, "downloads": -1, "filename": "swmmio-0.3.0.tar.gz", "has_sig": false, "md5_digest": "f057816b79a70955322a785ff0b80e17", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 617029, "upload_time": "2018-10-25T19:45:49", "upload_time_iso_8601": "2018-10-25T19:45:49.184891Z", "url": "https://files.pythonhosted.org/packages/50/69/006ec10b5bf9b0cd92ff9aa8983d8dad4b794eba1a60e63624f8d7169e36/swmmio-0.3.0.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "34f6c62b50c94974ee207f2b4b99b3c9", "sha256": "dbd04f0757e42f08c0267286d676f73fb933c69d92e86ce44ee6f7e0b530cab2"}, "downloads": -1, "filename": "swmmio-0.3.1.tar.gz", "has_sig": false, "md5_digest": "34f6c62b50c94974ee207f2b4b99b3c9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 616395, "upload_time": "2018-11-20T20:58:58", "upload_time_iso_8601": "2018-11-20T20:58:58.154212Z", "url": "https://files.pythonhosted.org/packages/34/1c/0e314e7dfd846647ee09663ae415c09b2725f80aed2499fa344d816402b8/swmmio-0.3.1.tar.gz", "yanked": false}], "0.3.2": [{"comment_text": "", "digests": {"md5": "5b68380d9543879e4b901d39c383eec2", "sha256": "d47ffd9089bb8371795bf81ff2d448cbdb0f1313f42bb245f97ea5d42af55d92"}, "downloads": -1, "filename": "swmmio-0.3.2.tar.gz", "has_sig": false, "md5_digest": "5b68380d9543879e4b901d39c383eec2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 620104, "upload_time": "2018-12-20T02:05:29", "upload_time_iso_8601": "2018-12-20T02:05:29.694778Z", "url": "https://files.pythonhosted.org/packages/69/9c/4b41c272d2d2e9b111bd270aaee678a63ae7cb083ffad4020d4e409a0b96/swmmio-0.3.2.tar.gz", "yanked": false}], "0.3.3": [{"comment_text": "", "digests": {"md5": "3ccb42c897245c64ac035d7e21d76726", "sha256": "da57a330a19218f91dbad2a2a04a8c65163ccc5b60ad389b921b86765e1a0d34"}, "downloads": -1, "filename": "swmmio-0.3.3.tar.gz", "has_sig": false, "md5_digest": "3ccb42c897245c64ac035d7e21d76726", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 624855, "upload_time": "2019-03-15T16:02:28", "upload_time_iso_8601": "2019-03-15T16:02:28.462565Z", "url": "https://files.pythonhosted.org/packages/b2/a3/b72ed3afff49a374cd6c06d33d3df0439bb1ae5002382ed8d05b48722fc8/swmmio-0.3.3.tar.gz", "yanked": false}], "0.3.4": [{"comment_text": "", "digests": {"md5": "c86f15cec64e159f922ed85b984ddbe4", "sha256": "1f74b0de842335b88e52a875fa5ff1b1fc25e28517c20a035077fd0c055b014d"}, "downloads": -1, "filename": "swmmio-0.3.4.tar.gz", "has_sig": false, "md5_digest": "c86f15cec64e159f922ed85b984ddbe4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 624824, "upload_time": "2019-03-15T16:24:59", "upload_time_iso_8601": "2019-03-15T16:24:59.492854Z", "url": "https://files.pythonhosted.org/packages/d7/d2/606ea6bd10716ec135da98fc743705f8da7e8828755cab0a62588cc70ad1/swmmio-0.3.4.tar.gz", "yanked": false}], "0.3.4.post1": [{"comment_text": "", "digests": {"md5": "7c776d61bf35a37cb8dffc23ebfde6be", "sha256": "17893c61792ea6c53a7c46371738fda6613860a4d454379a31197f562a5c1ea8"}, "downloads": -1, "filename": "swmmio-0.3.4.post1.tar.gz", "has_sig": false, "md5_digest": "7c776d61bf35a37cb8dffc23ebfde6be", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 625446, "upload_time": "2019-03-22T00:14:45", "upload_time_iso_8601": "2019-03-22T00:14:45.584215Z", "url": "https://files.pythonhosted.org/packages/70/9d/2293da57cbddef12acefb15a88926cd669076f3fdfa5ed13d15f2c474e50/swmmio-0.3.4.post1.tar.gz", "yanked": false}], "0.3.5": [{"comment_text": "", "digests": {"md5": "bbe0e161d4e93a774a11aea9568c7ae1", "sha256": "1879f2e1a7fd462aea2f6c3a8c44304eda3dea7e1c71004e8e717c009a230711"}, "downloads": -1, "filename": "swmmio-0.3.5-py3-none-any.whl", "has_sig": false, "md5_digest": "bbe0e161d4e93a774a11aea9568c7ae1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 243127, "upload_time": "2019-06-18T23:07:23", "upload_time_iso_8601": "2019-06-18T23:07:23.930065Z", "url": "https://files.pythonhosted.org/packages/e3/a0/780720ef0598624e0af8783580760a0ee3a0ebda0c83c72405784efbe535/swmmio-0.3.5-py3-none-any.whl", "yanked": false}], "0.3.6": [{"comment_text": "", "digests": {"md5": "063693dc8a4d249690b64d4f727e9759", "sha256": "4285fa3637ee07028db391f8bf2d32c628e57c02646fd21ee0710e15e9d5293f"}, "downloads": -1, "filename": "swmmio-0.3.6-py3-none-any.whl", "has_sig": false, "md5_digest": "063693dc8a4d249690b64d4f727e9759", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 237010, "upload_time": "2019-06-19T04:33:58", "upload_time_iso_8601": "2019-06-19T04:33:58.999075Z", "url": "https://files.pythonhosted.org/packages/8e/1d/42a7ddb338a88fc2b53296f185a68570bb4989d932a77da065604f24cc38/swmmio-0.3.6-py3-none-any.whl", "yanked": false}], "0.3.7": [{"comment_text": "", "digests": {"md5": "923981133581935816374d8327aade84", "sha256": "8a2c78e02a0a7e37577c7110a25b78d4c84884ed70cbd4c5cb9799fee73802f6"}, "downloads": -1, "filename": "swmmio-0.3.7-py3-none-any.whl", "has_sig": false, "md5_digest": "923981133581935816374d8327aade84", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 237495, "upload_time": "2019-10-25T21:35:30", "upload_time_iso_8601": "2019-10-25T21:35:30.732445Z", "url": "https://files.pythonhosted.org/packages/d2/bc/90a209279cf0af6c79f9f03249b49582f95f75444ba15e2422ed93763351/swmmio-0.3.7-py3-none-any.whl", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "98db12f44a309b41d3d39fb8cb0ce819", "sha256": "6b57fe03093d541846f5897be97bbb26b32a4a6d09ebe90c7324ac4c39516b6e"}, "downloads": -1, "filename": "swmmio-0.4.0-py3-none-any.whl", "has_sig": false, "md5_digest": "98db12f44a309b41d3d39fb8cb0ce819", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 244048, "upload_time": "2020-04-29T18:59:51", "upload_time_iso_8601": "2020-04-29T18:59:51.101539Z", "url": "https://files.pythonhosted.org/packages/90/4d/6fc016d6a9ece0daaa79ae2799c7e457225e226a2769b761188ae66a41e4/swmmio-0.4.0-py3-none-any.whl", "yanked": false}], "0.4.1": [{"comment_text": "", "digests": {"md5": "900f271a87d6303eb3c5977bbfd76992", "sha256": "fc78dc99b189f4cb10a5b429cddb7ff060909c8c00b2fd2d28472fdef341b999"}, "downloads": -1, "filename": "swmmio-0.4.1-py3-none-any.whl", "has_sig": false, "md5_digest": "900f271a87d6303eb3c5977bbfd76992", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 247177, "upload_time": "2020-05-05T17:05:24", "upload_time_iso_8601": "2020-05-05T17:05:24.933741Z", "url": "https://files.pythonhosted.org/packages/6f/5c/39788db3588a168e88ffb8dc8c7e362ddd3aaa388d862ff9f8f885f69c11/swmmio-0.4.1-py3-none-any.whl", "yanked": false}], "0.4.2": [{"comment_text": "", "digests": {"md5": "44f4609759f9bc4e07b24f9d5dbe9c32", "sha256": "543e49c9c4aaf282848f9a8aa116340ddce30651d311d5e65db142615057645e"}, "downloads": -1, "filename": "swmmio-0.4.2-py3-none-any.whl", "has_sig": false, "md5_digest": "44f4609759f9bc4e07b24f9d5dbe9c32", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 251039, "upload_time": "2020-05-06T18:36:21", "upload_time_iso_8601": "2020-05-06T18:36:21.782213Z", "url": "https://files.pythonhosted.org/packages/bc/4a/30f632b04ac16b5db1e40f526c81addca75040df474739a1127dcf992906/swmmio-0.4.2-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "44f4609759f9bc4e07b24f9d5dbe9c32", "sha256": "543e49c9c4aaf282848f9a8aa116340ddce30651d311d5e65db142615057645e"}, "downloads": -1, "filename": "swmmio-0.4.2-py3-none-any.whl", "has_sig": false, "md5_digest": "44f4609759f9bc4e07b24f9d5dbe9c32", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 251039, "upload_time": "2020-05-06T18:36:21", "upload_time_iso_8601": "2020-05-06T18:36:21.782213Z", "url": "https://files.pythonhosted.org/packages/bc/4a/30f632b04ac16b5db1e40f526c81addca75040df474739a1127dcf992906/swmmio-0.4.2-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 02:59:21 2020"}