{"info": {"author": "Stephen Bunn", "author_email": "stephen@bunn.io", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: ISC License (ISCL)", "Natural Language :: English", "Operating System :: MacOS :: MacOS X", "Operating System :: Microsoft :: Windows", "Operating System :: POSIX", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "File Config\n===========\n\n.. image:: https://badge.fury.io/py/file-config.svg\n   :target: https://pypi.org/project/file-config/\n   :alt: PyPI version\n\n.. image:: https://img.shields.io/pypi/pyversions/file-config.svg\n   :target: https://pypi.org/project/file-config/\n   :alt: Supported Versions\n\n.. image:: https://img.shields.io/badge/code%20style-black-000000.svg\n   :target: https://github.com/ambv/black\n   :alt: Code Style: Black\n\n.. image:: https://readthedocs.org/projects/file-config/badge/?version=latest\n   :target: https://file-config.readthedocs.io/en/latest/?badge=latest\n   :alt: Documentation Status\n\n.. image:: https://api.codacy.com/project/badge/Grade/05b5b7e17d0d471e84b9e32ec50b843a\n   :target: https://www.codacy.com/app/stephen-bunn/file-config?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=stephen-bunn/file-config&amp;utm_campaign=Badge_Grade\n   :alt: Codacy Grade\n\n.. image:: https://codecov.io/gh/stephen-bunn/file-config/branch/master/graph/badge.svg\n   :target: https://codecov.io/gh/stephen-bunn/file-config\n   :alt: Codecov\n\n.. image:: https://dev.azure.com/stephen-bunn/file-config/_apis/build/status/stephen-bunn.file-config?branchName=master\n   :target: https://dev.azure.com/stephen-bunn/file-config/_build?definitionId=1\n   :alt: Azure Pipelines\n\n\nAn `attr's <http://www.attrs.org/en/stable/>`_ like interface to building class representations of config files.\n\n- These configs can dumped and loaded from popular formats such as `JSON <http://www.json.org/>`_, `YAML <http://yaml.org/>`_, `TOML <https://github.com/toml-lang/toml>`_, `Message Pack <https://msgpack.org/index.html>`_, `INI <https://bit.ly/2DksT5u>`_, and `XML <https://www.w3.org/TR/xml/>`_.\n- Validation of the config's state is done through dynamically generated `JSONSchema <https://json-schema.org/>`_.\n- Inspired from Hynek's `environ-config <https://pypi.org/project/environ-config/>`_.\n\n.. code-block:: python\n\n   from typing import List\n   import file_config\n\n   @file_config.config(title=\"My Config\", description=\"A simple/sample config\")\n   class MyConfig(object):\n\n      @file_config.config(title=\"Config Group\", description=\"A independent nested config\")\n      class Group(object):\n         name = file_config.var(str)\n         type = file_config.var(str, default=\"config\")\n\n      name = file_config.var(str, min=1, max=24)\n      version = file_config.var(file_config.Regex(r\"^v\\d+$\"))\n      groups = file_config.var(List[Group], min=1)\n\n\n   my_config = MyConfig(\n      name=\"Sample Config\",\n      version=\"v12\",\n      groups=[\n         MyConfig.Group(name=\"Sample Group\")\n      ]\n   )\n\n   config_json = my_config.dumps_json()\n   # {\"name\":\"Sample Config\",\"version\":\"v12\",\"groups\":[{\"name\":\"Sample Group\",\"type\":\"config\"}]}\n   assert my_config == ModConfig.loads_json(config_json)\n\nInstall from `PyPi <https://pypi.org/project/file-config/>`_.\n\n.. code-block:: bash\n\n   pip install file-config\n   # or\n   pipenv install file-config\n\n\nDefine Configs\n--------------\n\nMaking config is straight-forward if you are familiar with attrs syntax.\nDecorate a class with the ``file_config.config`` decorator and the class is considered to be a config.\n\n.. code-block:: python\n\n   @file_config.config\n   class MyConfig(object):\n      pass\n\nYou can check if a variable is a config type or instance by using the ``file_config.utils.is_config_type`` or ``file_config.utils.is_config`` methods.\n\n.. code-block:: python\n\n   assert file_config.utils.is_config_type(MyConfig)\n   assert file_config.utils.is_config(my_config)\n\nThere are two optional attributes are available on the ``file_config.config`` method (both used for validation):\n\n- ``title`` - *Defines the title of the object in the resulting jsonschema*\n- ``description`` - *Defines the description of the object in the resulting jsonschema*\n\n\n.. code-block:: python\n\n   @file_config.config(title=\"My Config\", description=\"A simple/sample config\")\n   class MyConfig(object):\n      pass\n\n\n\nDefining Config Vars\n--------------------\n\nThe real meat of the config class comes from adding attributes to the config through the ``file_config.var`` method.\nAgain, if you're familiar with attrs syntax, this should be pretty straight-forward.\n\n.. code-block:: python\n\n   @file_config.config(title=\"My Config\", description=\"A simple/sample config\")\n   class MyConfig(object):\n\n      name = file_config.var()\n\n\nRequired\n~~~~~~~~\n\nIf no args are given the the ``var`` method then the config object only expects that the variable is ``required`` when validating.\nYou can disable the config exepecting the ``var`` to exist by setting ``required = False``...\n\n.. code-block:: python\n\n   name = file_config.var(required=False)\n\nType\n~~~~\n\nYou can specify the type of a ``var`` by using either builtin types or *most common* typing types.\nThis is accepted as either the first argument to the method or as the keyword ``type``.\n\n.. code-block:: python\n\n   name = file_config.var(type=str)\n   keywords = file_config.var(type=typing.List[str])\n\nCommonly you need to validate strings against regular expressions.\nSince this package is trying to stick as close as possible to Python's typing there is no builtin type to store regular expressions.\nTo do handle this a special method was created to store regular expressions in a ``typing`` type.\n\n.. code-block:: python\n\n   version = file_config.var(type=file_config.Regex(r\"^v\\d+$\"))\n\nNested configs are also possible to throw into the ``type`` keyword of the var.\nThese are serialized into nested objects in the jsonschema.\n\n.. code-block:: python\n\n   @file_config.config\n   class GroupContainer(object):\n\n      @file_config.config\n      class Group(object):\n         name = file_config.var(str)\n\n      name = file_config.var(str)\n      parent_group = file_config.var(Group)\n      children_groups = file_config.var(typing.List[Group])\n\n-----\n\nNote that types require to be json serializable.\nSo types that don't dump out to json (like ``typing.Dict[int, str]``) will fail in the ``file_config.build_schema`` step.\n\n.. code-block:: python\n\n   @file_config.config\n   class PackageConfig:\n      depends = file_config.var(type=typing.Dict[int, str])\n\n\n>>> file_config.build_schema(PackageConfig)\nTraceback (most recent call last):\n  File \"main.py\", line 21, in <module>\n    pprint(file_config.build_schema(PackageConfig))\n  File \"/home/stephen-bunn/Git/file-config/file_config/schema_builder.py\", line 278, in build_schema\n    return _build_config(config_cls, property_path=[])\n  File \"/home/stephen-bunn/Git/file-config/file_config/schema_builder.py\", line 261, in _build_config\n    var, property_path=property_path\n  File \"/home/stephen-bunn/Git/file-config/file_config/schema_builder.py\", line 218, in _build_var\n    _build_type(var.type, var, property_path=property_path + [var.name])\n  File \"/home/stephen-bunn/Git/file-config/file_config/schema_builder.py\", line 182, in _build_type\n    return builder(value, property_path=property_path)\n  File \"/home/stephen-bunn/Git/file-config/file_config/schema_builder.py\", line 160, in _build_object_type\n    f\"cannot serialize object with key of type {key_type!r}, \"\nValueError: cannot serialize object with key of type <class 'int'>, located in var 'depends'\n\nName\n~~~~\n\nThe ``name`` kwarg is used for specifying the name of the variable that should be used during serialization/deserialization.\nThis is useful for when you might need to use Python keywords as variables in your serialized configs but don't want to specify the keyword as a attribute of your config.\n\n.. code-block:: python\n\n   @file_config.config\n   class PackageConfig:\n      type_ = file_config.var(name=\"type\")\n\n\nTitle\n~~~~~\n\nThe ``title`` kwarg of a ``var`` is used in the built jsonschema as the varaible's title.\n\nDescription\n~~~~~~~~~~~\n\nSimilar to the ``title`` kwarg, the ``description`` kwarg of a ``var`` is simply used as the variable's description in the built jsonschema.\n\n\nSerialization / Deserialization\n-------------------------------\n\nTo keep api's consistent, serialization and deserialization methods are dynamically added to your config class.\nFor example, JSON serialization/deserialization is done through the following dynamically added methods:\n\n- ``dumps_json()`` - *Returns json serialization of the config instance*\n- ``dump_json(file_object)`` - *Writes json serialization of the config instance to the given file object*\n- ``loads_json(json_content)`` - *Builds a new config instance from the given json content*\n- ``load_json(file_object)`` - *Builds a new config instance from the result of reading the given json file object*\n\nThis changes for the different types of serialization desired.\nFor example, when dumping toml content the method name changes from ``dumps_json()`` to ``dumps_toml()``.\n\n**By default dictionary, JSON, and Pickle serialization is included.**\n\n\nDictionary\n~~~~~~~~~~\n\n*The dumping of dictionaries is a bit different than other serialization methods since a dictionary representation of a config instance is not a end result of serialization.*\n\nFor this reason, representing the config instance as dictionary is done through the ``file_config.to_dict(config_instance)`` method.\nLoading a new config instance from a dictionary is done through the ``file_config.from_dict(config_class, config_dictionary)`` method.\n\n>>> config_dict = file_config.to_dict(my_config)\nOrderedDict([('name', 'Sample Config'), ('version', 'v12'), ('groups', [OrderedDict([('name', 'Sample Group'), ('type', 'config')])])])\n>>> new_config = file_config.from_dict(MyConfig, config_dict)\nMyConfig(name='Sample Config', version='v12', groups=[MyConfig.Group(name='Sample Group', type='config')])\n\nJSON\n~~~~\n\n>>> json_content = my_config.dumps_json()\n\n.. code-block:: json\n\n   {\"name\":\"Sample Config\",\"version\":\"v12\",\"groups\":[{\"name\":\"Sample Group\",\"type\":\"config\"}]}\n\n>>> new_config = MyConfig.loads_json(json_content)\nMyConfig(name='Sample Config', version='v12', groups=[MyConfig.Group(name='Sample Group', type='config')])\n\n\nINI\n~~~\n\n**Unfortunately, INI cannot correctly serialize configs containing lists of mappings...** found in the ``groups`` var.\nYou should really be using TOML in this case, but for now INI can deal with any config that doesn't contain a list of mappings.\n\n*For example...*\n\n.. code-block:: python\n\n   @file_config.config\n   class INIConfig(object):\n\n      @file_config.config\n      class INIConfigGroup(object):\n         value = file_config.var()\n\n      name = file_config.var(str)\n      value = file_config.var(int)\n      groups = file_config.var(Dict[str, INIConfigGroup])\n\n   my_config = INIConfig(\n      name=\"My Config\",\n      value=-1,\n      groups={\"group-1\": INIConfig.INIConfigGroup(value=99)}\n   )\n\n>>> ini_content = my_config.dumps_ini()\n\n.. code-block:: ini\n\n   [INIConfig]\n   name = \"My Config\"\n   value = -1\n   [INIConfig:groups:group-1]\n   value = 99\n\n>>> new_config = INIConfig.loads_ini(ini_content)\nINIConfig(name='My Config', value=-1, groups={'group-1': INIConfig.INIConfigGroup(value=99)})\n\nPickle\n~~~~~~\n\n>>> pickle_content = my_config.dumps_pickle()\nb'\\x80\\x04\\x95\\x7f\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x8c\\x0bcollections\\x94\\x8c\\x0bOrderedDict\\x94\\x93\\x94)R\\x94(\\x8c\\x04name\\x94\\x8c\\rSample Config\\x94\\x8c\\x07version\\x94\\x8c\\x03v12\\x94\\x8c\\x06groups\\x94]\\x94h\\x02)R\\x94(h\\x04\\x8c\\x0cSample Group\\x94\\x8c\\x04type\\x94\\x8c\\x06config\\x94uau.'\n>>> new_config = MyConfig.loads_pickle(pickle_content)\nMyConfig(name='Sample Config', version='v12', groups=[MyConfig.Group(name='Sample Group', type='config')])\n\n-----\n\nYAML\n~~~~\n\nSerializing yaml requires ``pyyaml``, ``pipenv install file-config[pyyaml]``\n\n>>> yaml_content = my_config.dumps_yaml()\n\n.. code-block:: yaml\n\n   name: Sample Config\n   version: v12\n   groups:\n      - name: Sample Group\n   type: config\n\n>>> new_config = MyConfig.loads_yaml(yaml_content)\nMyConfig(name='Sample Config', version='v12', groups=[MyConfig.Group(name='Sample Group', type='config')])\n\nTOML\n~~~~\n\nSerializing toml requires ``tomlkit``, ``pipenv install file-config[tomlkit]``\n\n>>> toml_content = my_config.dumps_toml()\n\n.. code-block:: ini\n\n   name = \"Sample Config\"\n   version = \"v12\"\n   [[groups]]\n   name = \"Sample Group\"\n   type = \"config\"\n\n>>> new_config = MyConfig.loads_toml(toml_content)\nMyConfig(name='Sample Config', version='v12', groups=[MyConfig.Group(name='Sample Group', type='config')])\n\nMessage Pack\n~~~~~~~~~~~~\n\nSerializing message pack requires ``msgpack``, ``pipenv install file-config[msgpack]``\n\n>>> msgpack_content = my_config.dumps_msgpack()\n\n.. code-block:: python\n\n   b'\\x83\\xa4name\\xadSample Config\\xa7version\\xa3v12\\xa6groups\\x91\\x82\\xa4name\\xacSample Group\\xa4type\\xa6config'\n\n>>> new_config = MyConfig.loads_msgpack(msgpack_content)\nMyConfig(name='Sample Config', version='v12', groups=[MyConfig.Group(name='Sample Group', type='config')])\n\nXML\n~~~\n\nSerializing xml requires ``lxml``, ``pipenv install file-config[lxml]``\n\n>>> xml_content = my_config.dumps_xml(pretty=True, xml_declaration=True)\n\n.. code-block:: xml\n\n   <?xml version='1.0' encoding='UTF-8'?>\n   <MyConfig>\n      <name type=\"str\">Sample Config</name>\n      <version type=\"str\">v12</version>\n      <groups>\n         <groups>\n            <name type=\"str\">Sample Group</name>\n            <type type=\"str\">config</type>\n         </groups>\n      </groups>\n   </MyConfig>\n\n>>> new_config = MyConfig.loads_xml(xml_content)\nMyConfig(name='Sample Config', version='v12', groups=[MyConfig.Group(name='Sample Group', type='config')])\n\n-----\n\nIf during serialization you don't have the extra depedencies installed for the requested serialization type, a ``ModuleNotFoundError`` is raised that looks similar to the following:\n\n>>> my_config.dumps_toml()\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"/home/stephen-bunn/.virtualenvs/tempenv-4ada15392238b/lib/python3.6/site-packages/file_config/_file_config.py\", line 52, in _handle_dumps\n    return handler.dumps(to_dict(self))\n  File \"/home/stephen-bunn/.virtualenvs/tempenv-4ada15392238b/lib/python3.6/site-packages/file_config/handlers/_common.py\", line 49, in dumps\n    dumps_hook_name = f\"on_{self.imported}_dumps\"\n  File \"/home/stephen-bunn/.virtualenvs/tempenv-4ada15392238b/lib/python3.6/site-packages/file_config/handlers/_common.py\", line 13, in imported\n    self._imported = self._discover_import()\n  File \"/home/stephen-bunn/.virtualenvs/tempenv-4ada15392238b/lib/python3.6/site-packages/file_config/handlers/_common.py\", line 46, in _discover_import\n    raise ModuleNotFoundError(f\"no modules in {self.packages!r} found\")\nModuleNotFoundError: no modules in ('tomlkit',) found\nno modules in ('tomlkit',) found\n\nIn this case you should install ``tomlkit`` as an extra dependency using something similar to the following:\n\n.. code-block:: bash\n\n   pip install file-config[tomlkit]\n   # or\n   pipenv install file-config[tomlkit]\n\n\nValidation\n----------\n\nValidation is done through jsonschema and can be used to check a config instance using the ``validate`` method.\n\n>>> file_config.version = \"v12\"\n>>> file_config.validate(my_config)\nNone\n>>> my_config.version = \"12\"\n>>> file_config.validate(mod_config)\nTraceback (most recent call last):\n  File \"main.py\", line 61, in <module>\n    print(file_config.validate(my_config))\n  File \"/home/stephen-bunn/Git/file-config/file_config/_file_config.py\", line 313, in validate\n    to_dict(instance, dict_type=dict), build_schema(instance.__class__)\n  File \"/home/stephen-bunn/.local/share/virtualenvs/file-config-zZO-gwXq/lib/python3.6/site-packages/jsonschema/validators.py\", line 823, in validate\n    cls(schema, *args, **kwargs).validate(instance)\n  File \"/home/stephen-bunn/.local/share/virtualenvs/file-config-zZO-gwXq/lib/python3.6/site-packages/jsonschema/validators.py\", line 299, in validate\n    raise error\njsonschema.exceptions.ValidationError: '12' does not match '^v\\\\d+$'\nFailed validating 'pattern' in schema['properties']['version']:\n    {'$id': '#/properties/version', 'pattern': '^v\\\\d+$', 'type': 'string'}\nOn instance['version']:\n    '12'\n\nThe attribute types added config vars **do not** imply type checking when creating an instance of the class.\nAttribute types are used for generating the jsonschema for the config and validating the model.\nThis allows you to throw any data you need to throw around in the config class, but validate the config only when you need to.\n\nYou can get the jsonschema that is created to validate a config class through the ``build_schema`` method.\n\n>>> file_config.build_schema(ModConfig)\n\n.. code-block:: python\n\n   {'$id': 'MyConfig.json',\n   '$schema': 'http://json-schema.org/draft-07/schema#',\n   'description': 'A simple/sample config',\n   'properties': {'groups': {'$id': '#/properties/groups',\n                              'items': {'$id': '#/properties/groups/items',\n                                       'description': 'A independent nested '\n                                                      'config',\n                                       'properties': {'name': {'$id': '#/properties/groups/items/properties/name',\n                                                               'type': 'string'},\n                                                      'type': {'$id': '#/properties/groups/items/properties/type',\n                                                               'default': 'config',\n                                                               'type': 'string'}},\n                                       'required': ['name', 'type'],\n                                       'title': 'Config Group',\n                                       'type': 'object'},\n                              'minItems': 1,\n                              'type': 'array'},\n                  'name': {'$id': '#/properties/name',\n                           'maxLength': 24,\n                           'minLength': 1,\n                           'type': 'string'},\n                  'version': {'$id': '#/properties/version',\n                              'pattern': '^v\\\\d+$',\n                              'type': 'string'}},\n   'required': ['name', 'version', 'groups'],\n   'title': 'My Config',\n   'type': 'object'}\n\n\n\n", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/stephen-bunn/file-config", "keywords": "config,file,toml,json,yaml,msgpack,pickle,xml,ini,attrs", "license": "ISC License", "maintainer": "", "maintainer_email": "", "name": "file-config", "package_url": "https://pypi.org/project/file-config/", "platform": "any", "project_url": "https://pypi.org/project/file-config/", "project_urls": {"Homepage": "https://github.com/stephen-bunn/file-config"}, "release_url": "https://pypi.org/project/file-config/1.0.0/", "requires_dist": ["attrs", "jsonschema", "sphinx ; extra == 'docs'", "lxml ; extra == 'lxml'", "defusedxml ; extra == 'lxml'", "msgpack ; extra == 'msgpack'", "python-rapidjson ; extra == 'python_rapidjson'", "pytoml ; extra == 'pytoml'", "pyyaml ; extra == 'pyyaml'", "isort ; extra == 'test'", "flake8 ; extra == 'test'", "pytest ; extra == 'test'", "pytest-flake8 ; extra == 'test'", "pytest-sugar ; extra == 'test'", "pytest-xdist ; extra == 'test'", "pytest-cov ; extra == 'test'", "hypothesis ; extra == 'test'", "codecov ; extra == 'test'", "codacy-coverage ; extra == 'test'", "coverage ; extra == 'test'", "readme-renderer ; extra == 'test'", "check-manifest ; extra == 'test'", "python-rapidjson ; extra == 'test'", "ujson ; extra == 'test'", "toml ; extra == 'test'", "tomlkit ; extra == 'test'", "pytoml ; extra == 'test'", "pyyaml ; extra == 'test'", "msgpack ; extra == 'test'", "lxml ; extra == 'test'", "defusedxml ; extra == 'test'", "toml ; extra == 'toml'", "tomlkit ; extra == 'tomlkit'", "ujson ; extra == 'ujson'"], "requires_python": ">=3.6", "summary": "An attrs based configuration file abstraction", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://pypi.org/project/file-config/\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8fdc192e422eced3d2fa26552e43f779b1f90698/68747470733a2f2f62616467652e667572792e696f2f70792f66696c652d636f6e6669672e737667\"></a>\n<a href=\"https://pypi.org/project/file-config/\" rel=\"nofollow\"><img alt=\"Supported Versions\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f407d24939d13f5dc9b84c7db59af9b82a413eca/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f66696c652d636f6e6669672e737667\"></a>\n<a href=\"https://github.com/ambv/black\" rel=\"nofollow\"><img alt=\"Code Style: Black\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fbfdc7754183ecf079bc71ddeabaf88f6cbc5c00/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64652532307374796c652d626c61636b2d3030303030302e737667\"></a>\n<a href=\"https://file-config.readthedocs.io/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/61bc9c212311d5f287281d627554fce989fed989/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f66696c652d636f6e6669672f62616467652f3f76657273696f6e3d6c6174657374\"></a>\n<a href=\"https://www.codacy.com/app/stephen-bunn/file-config?utm_source=github.com&amp;amp;utm_medium=referral&amp;amp;utm_content=stephen-bunn/file-config&amp;amp;utm_campaign=Badge_Grade\" rel=\"nofollow\"><img alt=\"Codacy Grade\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d714638cea6da70831ff404fe54d4786f5732730/68747470733a2f2f6170692e636f646163792e636f6d2f70726f6a6563742f62616467652f47726164652f3035623562376531376430643437316538346239653332656335306238343361\"></a>\n<a href=\"https://codecov.io/gh/stephen-bunn/file-config\" rel=\"nofollow\"><img alt=\"Codecov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a5269960772a57bbf684e8edaeb81aacb45e8775/68747470733a2f2f636f6465636f762e696f2f67682f7374657068656e2d62756e6e2f66696c652d636f6e6669672f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a>\n<a href=\"https://dev.azure.com/stephen-bunn/file-config/_build?definitionId=1\" rel=\"nofollow\"><img alt=\"Azure Pipelines\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8821b9cbba2676a00859438c928e00f2eaaafc94/68747470733a2f2f6465762e617a7572652e636f6d2f7374657068656e2d62756e6e2f66696c652d636f6e6669672f5f617069732f6275696c642f7374617475732f7374657068656e2d62756e6e2e66696c652d636f6e6669673f6272616e63684e616d653d6d6173746572\"></a>\n<p>An <a href=\"http://www.attrs.org/en/stable/\" rel=\"nofollow\">attr\u2019s</a> like interface to building class representations of config files.</p>\n<ul>\n<li>These configs can dumped and loaded from popular formats such as <a href=\"http://www.json.org/\" rel=\"nofollow\">JSON</a>, <a href=\"http://yaml.org/\" rel=\"nofollow\">YAML</a>, <a href=\"https://github.com/toml-lang/toml\" rel=\"nofollow\">TOML</a>, <a href=\"https://msgpack.org/index.html\" rel=\"nofollow\">Message Pack</a>, <a href=\"https://bit.ly/2DksT5u\" rel=\"nofollow\">INI</a>, and <a href=\"https://www.w3.org/TR/xml/\" rel=\"nofollow\">XML</a>.</li>\n<li>Validation of the config\u2019s state is done through dynamically generated <a href=\"https://json-schema.org/\" rel=\"nofollow\">JSONSchema</a>.</li>\n<li>Inspired from Hynek\u2019s <a href=\"https://pypi.org/project/environ-config/\" rel=\"nofollow\">environ-config</a>.</li>\n</ul>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">List</span>\n<span class=\"kn\">import</span> <span class=\"nn\">file_config</span>\n\n<span class=\"nd\">@file_config</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"p\">(</span><span class=\"n\">title</span><span class=\"o\">=</span><span class=\"s2\">\"My Config\"</span><span class=\"p\">,</span> <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"s2\">\"A simple/sample config\"</span><span class=\"p\">)</span>\n<span class=\"k\">class</span> <span class=\"nc\">MyConfig</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n\n   <span class=\"nd\">@file_config</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"p\">(</span><span class=\"n\">title</span><span class=\"o\">=</span><span class=\"s2\">\"Config Group\"</span><span class=\"p\">,</span> <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"s2\">\"A independent nested config\"</span><span class=\"p\">)</span>\n   <span class=\"k\">class</span> <span class=\"nc\">Group</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n      <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">file_config</span><span class=\"o\">.</span><span class=\"n\">var</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">)</span>\n      <span class=\"nb\">type</span> <span class=\"o\">=</span> <span class=\"n\">file_config</span><span class=\"o\">.</span><span class=\"n\">var</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"s2\">\"config\"</span><span class=\"p\">)</span>\n\n   <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">file_config</span><span class=\"o\">.</span><span class=\"n\">var</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">min</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"nb\">max</span><span class=\"o\">=</span><span class=\"mi\">24</span><span class=\"p\">)</span>\n   <span class=\"n\">version</span> <span class=\"o\">=</span> <span class=\"n\">file_config</span><span class=\"o\">.</span><span class=\"n\">var</span><span class=\"p\">(</span><span class=\"n\">file_config</span><span class=\"o\">.</span><span class=\"n\">Regex</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s2\">\"^v\\d+$\"</span><span class=\"p\">))</span>\n   <span class=\"n\">groups</span> <span class=\"o\">=</span> <span class=\"n\">file_config</span><span class=\"o\">.</span><span class=\"n\">var</span><span class=\"p\">(</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Group</span><span class=\"p\">],</span> <span class=\"nb\">min</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n\n<span class=\"n\">my_config</span> <span class=\"o\">=</span> <span class=\"n\">MyConfig</span><span class=\"p\">(</span>\n   <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"Sample Config\"</span><span class=\"p\">,</span>\n   <span class=\"n\">version</span><span class=\"o\">=</span><span class=\"s2\">\"v12\"</span><span class=\"p\">,</span>\n   <span class=\"n\">groups</span><span class=\"o\">=</span><span class=\"p\">[</span>\n      <span class=\"n\">MyConfig</span><span class=\"o\">.</span><span class=\"n\">Group</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"Sample Group\"</span><span class=\"p\">)</span>\n   <span class=\"p\">]</span>\n<span class=\"p\">)</span>\n\n<span class=\"n\">config_json</span> <span class=\"o\">=</span> <span class=\"n\">my_config</span><span class=\"o\">.</span><span class=\"n\">dumps_json</span><span class=\"p\">()</span>\n<span class=\"c1\"># {\"name\":\"Sample Config\",\"version\":\"v12\",\"groups\":[{\"name\":\"Sample Group\",\"type\":\"config\"}]}</span>\n<span class=\"k\">assert</span> <span class=\"n\">my_config</span> <span class=\"o\">==</span> <span class=\"n\">ModConfig</span><span class=\"o\">.</span><span class=\"n\">loads_json</span><span class=\"p\">(</span><span class=\"n\">config_json</span><span class=\"p\">)</span>\n</pre>\n<p>Install from <a href=\"https://pypi.org/project/file-config/\" rel=\"nofollow\">PyPi</a>.</p>\n<pre>pip install file-config\n<span class=\"c1\"># or\n</span>pipenv install file-config\n</pre>\n<div id=\"define-configs\">\n<h2>Define Configs</h2>\n<p>Making config is straight-forward if you are familiar with attrs syntax.\nDecorate a class with the <tt>file_config.config</tt> decorator and the class is considered to be a config.</p>\n<pre><span class=\"nd\">@file_config</span><span class=\"o\">.</span><span class=\"n\">config</span>\n<span class=\"k\">class</span> <span class=\"nc\">MyConfig</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n   <span class=\"k\">pass</span>\n</pre>\n<p>You can check if a variable is a config type or instance by using the <tt>file_config.utils.is_config_type</tt> or <tt>file_config.utils.is_config</tt> methods.</p>\n<pre><span class=\"k\">assert</span> <span class=\"n\">file_config</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">is_config_type</span><span class=\"p\">(</span><span class=\"n\">MyConfig</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">file_config</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">is_config</span><span class=\"p\">(</span><span class=\"n\">my_config</span><span class=\"p\">)</span>\n</pre>\n<p>There are two optional attributes are available on the <tt>file_config.config</tt> method (both used for validation):</p>\n<ul>\n<li><tt>title</tt> - <em>Defines the title of the object in the resulting jsonschema</em></li>\n<li><tt>description</tt> - <em>Defines the description of the object in the resulting jsonschema</em></li>\n</ul>\n<pre><span class=\"nd\">@file_config</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"p\">(</span><span class=\"n\">title</span><span class=\"o\">=</span><span class=\"s2\">\"My Config\"</span><span class=\"p\">,</span> <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"s2\">\"A simple/sample config\"</span><span class=\"p\">)</span>\n<span class=\"k\">class</span> <span class=\"nc\">MyConfig</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n   <span class=\"k\">pass</span>\n</pre>\n</div>\n<div id=\"defining-config-vars\">\n<h2>Defining Config Vars</h2>\n<p>The real meat of the config class comes from adding attributes to the config through the <tt>file_config.var</tt> method.\nAgain, if you\u2019re familiar with attrs syntax, this should be pretty straight-forward.</p>\n<pre><span class=\"nd\">@file_config</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"p\">(</span><span class=\"n\">title</span><span class=\"o\">=</span><span class=\"s2\">\"My Config\"</span><span class=\"p\">,</span> <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"s2\">\"A simple/sample config\"</span><span class=\"p\">)</span>\n<span class=\"k\">class</span> <span class=\"nc\">MyConfig</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n\n   <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">file_config</span><span class=\"o\">.</span><span class=\"n\">var</span><span class=\"p\">()</span>\n</pre>\n<div id=\"required\">\n<h3>Required</h3>\n<p>If no args are given the the <tt>var</tt> method then the config object only expects that the variable is <tt>required</tt> when validating.\nYou can disable the config exepecting the <tt>var</tt> to exist by setting <tt>required = False</tt>\u2026</p>\n<pre><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">file_config</span><span class=\"o\">.</span><span class=\"n\">var</span><span class=\"p\">(</span><span class=\"n\">required</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"type\">\n<h3>Type</h3>\n<p>You can specify the type of a <tt>var</tt> by using either builtin types or <em>most common</em> typing types.\nThis is accepted as either the first argument to the method or as the keyword <tt>type</tt>.</p>\n<pre><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">file_config</span><span class=\"o\">.</span><span class=\"n\">var</span><span class=\"p\">(</span><span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"nb\">str</span><span class=\"p\">)</span>\n<span class=\"n\">keywords</span> <span class=\"o\">=</span> <span class=\"n\">file_config</span><span class=\"o\">.</span><span class=\"n\">var</span><span class=\"p\">(</span><span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">])</span>\n</pre>\n<p>Commonly you need to validate strings against regular expressions.\nSince this package is trying to stick as close as possible to Python\u2019s typing there is no builtin type to store regular expressions.\nTo do handle this a special method was created to store regular expressions in a <tt>typing</tt> type.</p>\n<pre><span class=\"n\">version</span> <span class=\"o\">=</span> <span class=\"n\">file_config</span><span class=\"o\">.</span><span class=\"n\">var</span><span class=\"p\">(</span><span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"n\">file_config</span><span class=\"o\">.</span><span class=\"n\">Regex</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s2\">\"^v\\d+$\"</span><span class=\"p\">))</span>\n</pre>\n<p>Nested configs are also possible to throw into the <tt>type</tt> keyword of the var.\nThese are serialized into nested objects in the jsonschema.</p>\n<pre><span class=\"nd\">@file_config</span><span class=\"o\">.</span><span class=\"n\">config</span>\n<span class=\"k\">class</span> <span class=\"nc\">GroupContainer</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n\n   <span class=\"nd\">@file_config</span><span class=\"o\">.</span><span class=\"n\">config</span>\n   <span class=\"k\">class</span> <span class=\"nc\">Group</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n      <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">file_config</span><span class=\"o\">.</span><span class=\"n\">var</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">)</span>\n\n   <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">file_config</span><span class=\"o\">.</span><span class=\"n\">var</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">)</span>\n   <span class=\"n\">parent_group</span> <span class=\"o\">=</span> <span class=\"n\">file_config</span><span class=\"o\">.</span><span class=\"n\">var</span><span class=\"p\">(</span><span class=\"n\">Group</span><span class=\"p\">)</span>\n   <span class=\"n\">children_groups</span> <span class=\"o\">=</span> <span class=\"n\">file_config</span><span class=\"o\">.</span><span class=\"n\">var</span><span class=\"p\">(</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Group</span><span class=\"p\">])</span>\n</pre>\n<hr class=\"docutils\">\n<p>Note that types require to be json serializable.\nSo types that don\u2019t dump out to json (like <tt>typing.Dict[int, str]</tt>) will fail in the <tt>file_config.build_schema</tt> step.</p>\n<pre><span class=\"nd\">@file_config</span><span class=\"o\">.</span><span class=\"n\">config</span>\n<span class=\"k\">class</span> <span class=\"nc\">PackageConfig</span><span class=\"p\">:</span>\n   <span class=\"n\">depends</span> <span class=\"o\">=</span> <span class=\"n\">file_config</span><span class=\"o\">.</span><span class=\"n\">var</span><span class=\"p\">(</span><span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">])</span>\n</pre>\n<pre>&gt;&gt;&gt; file_config.build_schema(PackageConfig)\nTraceback (most recent call last):\n  File \"main.py\", line 21, in &lt;module&gt;\n    pprint(file_config.build_schema(PackageConfig))\n  File \"/home/stephen-bunn/Git/file-config/file_config/schema_builder.py\", line 278, in build_schema\n    return _build_config(config_cls, property_path=[])\n  File \"/home/stephen-bunn/Git/file-config/file_config/schema_builder.py\", line 261, in _build_config\n    var, property_path=property_path\n  File \"/home/stephen-bunn/Git/file-config/file_config/schema_builder.py\", line 218, in _build_var\n    _build_type(var.type, var, property_path=property_path + [var.name])\n  File \"/home/stephen-bunn/Git/file-config/file_config/schema_builder.py\", line 182, in _build_type\n    return builder(value, property_path=property_path)\n  File \"/home/stephen-bunn/Git/file-config/file_config/schema_builder.py\", line 160, in _build_object_type\n    f\"cannot serialize object with key of type {key_type!r}, \"\nValueError: cannot serialize object with key of type &lt;class 'int'&gt;, located in var 'depends'\n</pre>\n</div>\n<div id=\"name\">\n<h3>Name</h3>\n<p>The <tt>name</tt> kwarg is used for specifying the name of the variable that should be used during serialization/deserialization.\nThis is useful for when you might need to use Python keywords as variables in your serialized configs but don\u2019t want to specify the keyword as a attribute of your config.</p>\n<pre><span class=\"nd\">@file_config</span><span class=\"o\">.</span><span class=\"n\">config</span>\n<span class=\"k\">class</span> <span class=\"nc\">PackageConfig</span><span class=\"p\">:</span>\n   <span class=\"n\">type_</span> <span class=\"o\">=</span> <span class=\"n\">file_config</span><span class=\"o\">.</span><span class=\"n\">var</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"type\"</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"title\">\n<h3>Title</h3>\n<p>The <tt>title</tt> kwarg of a <tt>var</tt> is used in the built jsonschema as the varaible\u2019s title.</p>\n</div>\n<div id=\"description\">\n<h3>Description</h3>\n<p>Similar to the <tt>title</tt> kwarg, the <tt>description</tt> kwarg of a <tt>var</tt> is simply used as the variable\u2019s description in the built jsonschema.</p>\n</div>\n</div>\n<div id=\"serialization-deserialization\">\n<h2>Serialization / Deserialization</h2>\n<p>To keep api\u2019s consistent, serialization and deserialization methods are dynamically added to your config class.\nFor example, JSON serialization/deserialization is done through the following dynamically added methods:</p>\n<ul>\n<li><tt>dumps_json()</tt> - <em>Returns json serialization of the config instance</em></li>\n<li><tt>dump_json(file_object)</tt> - <em>Writes json serialization of the config instance to the given file object</em></li>\n<li><tt>loads_json(json_content)</tt> - <em>Builds a new config instance from the given json content</em></li>\n<li><tt>load_json(file_object)</tt> - <em>Builds a new config instance from the result of reading the given json file object</em></li>\n</ul>\n<p>This changes for the different types of serialization desired.\nFor example, when dumping toml content the method name changes from <tt>dumps_json()</tt> to <tt>dumps_toml()</tt>.</p>\n<p><strong>By default dictionary, JSON, and Pickle serialization is included.</strong></p>\n<div id=\"dictionary\">\n<h3>Dictionary</h3>\n<p><em>The dumping of dictionaries is a bit different than other serialization methods since a dictionary representation of a config instance is not a end result of serialization.</em></p>\n<p>For this reason, representing the config instance as dictionary is done through the <tt>file_config.to_dict(config_instance)</tt> method.\nLoading a new config instance from a dictionary is done through the <tt>file_config.from_dict(config_class, config_dictionary)</tt> method.</p>\n<pre>&gt;&gt;&gt; config_dict = file_config.to_dict(my_config)\nOrderedDict([('name', 'Sample Config'), ('version', 'v12'), ('groups', [OrderedDict([('name', 'Sample Group'), ('type', 'config')])])])\n&gt;&gt;&gt; new_config = file_config.from_dict(MyConfig, config_dict)\nMyConfig(name='Sample Config', version='v12', groups=[MyConfig.Group(name='Sample Group', type='config')])\n</pre>\n</div>\n<div id=\"id1\">\n<h3>JSON</h3>\n<pre>&gt;&gt;&gt; json_content = my_config.dumps_json()\n</pre>\n<pre><span class=\"p\">{</span><span class=\"nt\">\"name\"</span><span class=\"p\">:</span><span class=\"s2\">\"Sample Config\"</span><span class=\"p\">,</span><span class=\"nt\">\"version\"</span><span class=\"p\">:</span><span class=\"s2\">\"v12\"</span><span class=\"p\">,</span><span class=\"nt\">\"groups\"</span><span class=\"p\">:[{</span><span class=\"nt\">\"name\"</span><span class=\"p\">:</span><span class=\"s2\">\"Sample Group\"</span><span class=\"p\">,</span><span class=\"nt\">\"type\"</span><span class=\"p\">:</span><span class=\"s2\">\"config\"</span><span class=\"p\">}]}</span>\n</pre>\n<pre>&gt;&gt;&gt; new_config = MyConfig.loads_json(json_content)\nMyConfig(name='Sample Config', version='v12', groups=[MyConfig.Group(name='Sample Group', type='config')])\n</pre>\n</div>\n<div id=\"id2\">\n<h3>INI</h3>\n<p><strong>Unfortunately, INI cannot correctly serialize configs containing lists of mappings\u2026</strong> found in the <tt>groups</tt> var.\nYou should really be using TOML in this case, but for now INI can deal with any config that doesn\u2019t contain a list of mappings.</p>\n<p><em>For example\u2026</em></p>\n<pre><span class=\"nd\">@file_config</span><span class=\"o\">.</span><span class=\"n\">config</span>\n<span class=\"k\">class</span> <span class=\"nc\">INIConfig</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n\n   <span class=\"nd\">@file_config</span><span class=\"o\">.</span><span class=\"n\">config</span>\n   <span class=\"k\">class</span> <span class=\"nc\">INIConfigGroup</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n      <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">file_config</span><span class=\"o\">.</span><span class=\"n\">var</span><span class=\"p\">()</span>\n\n   <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">file_config</span><span class=\"o\">.</span><span class=\"n\">var</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">)</span>\n   <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">file_config</span><span class=\"o\">.</span><span class=\"n\">var</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">)</span>\n   <span class=\"n\">groups</span> <span class=\"o\">=</span> <span class=\"n\">file_config</span><span class=\"o\">.</span><span class=\"n\">var</span><span class=\"p\">(</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">INIConfigGroup</span><span class=\"p\">])</span>\n\n<span class=\"n\">my_config</span> <span class=\"o\">=</span> <span class=\"n\">INIConfig</span><span class=\"p\">(</span>\n   <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"My Config\"</span><span class=\"p\">,</span>\n   <span class=\"n\">value</span><span class=\"o\">=-</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n   <span class=\"n\">groups</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"group-1\"</span><span class=\"p\">:</span> <span class=\"n\">INIConfig</span><span class=\"o\">.</span><span class=\"n\">INIConfigGroup</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">=</span><span class=\"mi\">99</span><span class=\"p\">)}</span>\n<span class=\"p\">)</span>\n</pre>\n<pre>&gt;&gt;&gt; ini_content = my_config.dumps_ini()\n</pre>\n<pre><span class=\"k\">[INIConfig]</span>\n<span class=\"na\">name</span> <span class=\"o\">=</span> <span class=\"s\">\"My Config\"</span>\n<span class=\"na\">value</span> <span class=\"o\">=</span> <span class=\"s\">-1</span>\n<span class=\"k\">[INIConfig:groups:group-1]</span>\n<span class=\"na\">value</span> <span class=\"o\">=</span> <span class=\"s\">99</span>\n</pre>\n<pre>&gt;&gt;&gt; new_config = INIConfig.loads_ini(ini_content)\nINIConfig(name='My Config', value=-1, groups={'group-1': INIConfig.INIConfigGroup(value=99)})\n</pre>\n</div>\n<div id=\"pickle\">\n<h3>Pickle</h3>\n<pre>&gt;&gt;&gt; pickle_content = my_config.dumps_pickle()\nb'\\x80\\x04\\x95\\x7f\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x8c\\x0bcollections\\x94\\x8c\\x0bOrderedDict\\x94\\x93\\x94)R\\x94(\\x8c\\x04name\\x94\\x8c\\rSample Config\\x94\\x8c\\x07version\\x94\\x8c\\x03v12\\x94\\x8c\\x06groups\\x94]\\x94h\\x02)R\\x94(h\\x04\\x8c\\x0cSample Group\\x94\\x8c\\x04type\\x94\\x8c\\x06config\\x94uau.'\n&gt;&gt;&gt; new_config = MyConfig.loads_pickle(pickle_content)\nMyConfig(name='Sample Config', version='v12', groups=[MyConfig.Group(name='Sample Group', type='config')])\n</pre>\n</div>\n<hr class=\"docutils\">\n<div id=\"id3\">\n<h3>YAML</h3>\n<p>Serializing yaml requires <tt>pyyaml</tt>, <tt>pipenv install <span class=\"pre\">file-config[pyyaml]</span></tt></p>\n<pre>&gt;&gt;&gt; yaml_content = my_config.dumps_yaml()\n</pre>\n<pre><span class=\"nt\">name</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">Sample Config</span>\n<span class=\"nt\">version</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">v12</span>\n<span class=\"nt\">groups</span><span class=\"p\">:</span>\n   <span class=\"p-Indicator\">-</span> <span class=\"nt\">name</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">Sample Group</span>\n<span class=\"nt\">type</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">config</span>\n</pre>\n<pre>&gt;&gt;&gt; new_config = MyConfig.loads_yaml(yaml_content)\nMyConfig(name='Sample Config', version='v12', groups=[MyConfig.Group(name='Sample Group', type='config')])\n</pre>\n</div>\n<div id=\"id4\">\n<h3>TOML</h3>\n<p>Serializing toml requires <tt>tomlkit</tt>, <tt>pipenv install <span class=\"pre\">file-config[tomlkit]</span></tt></p>\n<pre>&gt;&gt;&gt; toml_content = my_config.dumps_toml()\n</pre>\n<pre><span class=\"na\">name</span> <span class=\"o\">=</span> <span class=\"s\">\"Sample Config\"</span>\n<span class=\"na\">version</span> <span class=\"o\">=</span> <span class=\"s\">\"v12\"</span>\n<span class=\"k\">[[groups]]</span>\n<span class=\"na\">name</span> <span class=\"o\">=</span> <span class=\"s\">\"Sample Group\"</span>\n<span class=\"na\">type</span> <span class=\"o\">=</span> <span class=\"s\">\"config\"</span>\n</pre>\n<pre>&gt;&gt;&gt; new_config = MyConfig.loads_toml(toml_content)\nMyConfig(name='Sample Config', version='v12', groups=[MyConfig.Group(name='Sample Group', type='config')])\n</pre>\n</div>\n<div id=\"id5\">\n<h3>Message Pack</h3>\n<p>Serializing message pack requires <tt>msgpack</tt>, <tt>pipenv install <span class=\"pre\">file-config[msgpack]</span></tt></p>\n<pre>&gt;&gt;&gt; msgpack_content = my_config.dumps_msgpack()\n</pre>\n<pre><span class=\"sa\">b</span><span class=\"s1\">'</span><span class=\"se\">\\x83\\xa4</span><span class=\"s1\">name</span><span class=\"se\">\\xad</span><span class=\"s1\">Sample Config</span><span class=\"se\">\\xa7</span><span class=\"s1\">version</span><span class=\"se\">\\xa3</span><span class=\"s1\">v12</span><span class=\"se\">\\xa6</span><span class=\"s1\">groups</span><span class=\"se\">\\x91\\x82\\xa4</span><span class=\"s1\">name</span><span class=\"se\">\\xac</span><span class=\"s1\">Sample Group</span><span class=\"se\">\\xa4</span><span class=\"s1\">type</span><span class=\"se\">\\xa6</span><span class=\"s1\">config'</span>\n</pre>\n<pre>&gt;&gt;&gt; new_config = MyConfig.loads_msgpack(msgpack_content)\nMyConfig(name='Sample Config', version='v12', groups=[MyConfig.Group(name='Sample Group', type='config')])\n</pre>\n</div>\n<div id=\"id6\">\n<h3>XML</h3>\n<p>Serializing xml requires <tt>lxml</tt>, <tt>pipenv install <span class=\"pre\">file-config[lxml]</span></tt></p>\n<pre>&gt;&gt;&gt; xml_content = my_config.dumps_xml(pretty=True, xml_declaration=True)\n</pre>\n<pre><span class=\"cp\">&lt;?xml version='1.0' encoding='UTF-8'?&gt;</span>\n<span class=\"nt\">&lt;MyConfig&gt;</span>\n   <span class=\"nt\">&lt;name</span> <span class=\"na\">type=</span><span class=\"s\">\"str\"</span><span class=\"nt\">&gt;</span>Sample Config<span class=\"nt\">&lt;/name&gt;</span>\n   <span class=\"nt\">&lt;version</span> <span class=\"na\">type=</span><span class=\"s\">\"str\"</span><span class=\"nt\">&gt;</span>v12<span class=\"nt\">&lt;/version&gt;</span>\n   <span class=\"nt\">&lt;groups&gt;</span>\n      <span class=\"nt\">&lt;groups&gt;</span>\n         <span class=\"nt\">&lt;name</span> <span class=\"na\">type=</span><span class=\"s\">\"str\"</span><span class=\"nt\">&gt;</span>Sample Group<span class=\"nt\">&lt;/name&gt;</span>\n         <span class=\"nt\">&lt;type</span> <span class=\"na\">type=</span><span class=\"s\">\"str\"</span><span class=\"nt\">&gt;</span>config<span class=\"nt\">&lt;/type&gt;</span>\n      <span class=\"nt\">&lt;/groups&gt;</span>\n   <span class=\"nt\">&lt;/groups&gt;</span>\n<span class=\"nt\">&lt;/MyConfig&gt;</span>\n</pre>\n<pre>&gt;&gt;&gt; new_config = MyConfig.loads_xml(xml_content)\nMyConfig(name='Sample Config', version='v12', groups=[MyConfig.Group(name='Sample Group', type='config')])\n</pre>\n<hr class=\"docutils\">\n<p>If during serialization you don\u2019t have the extra depedencies installed for the requested serialization type, a <tt>ModuleNotFoundError</tt> is raised that looks similar to the following:</p>\n<pre>&gt;&gt;&gt; my_config.dumps_toml()\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\n  File \"/home/stephen-bunn/.virtualenvs/tempenv-4ada15392238b/lib/python3.6/site-packages/file_config/_file_config.py\", line 52, in _handle_dumps\n    return handler.dumps(to_dict(self))\n  File \"/home/stephen-bunn/.virtualenvs/tempenv-4ada15392238b/lib/python3.6/site-packages/file_config/handlers/_common.py\", line 49, in dumps\n    dumps_hook_name = f\"on_{self.imported}_dumps\"\n  File \"/home/stephen-bunn/.virtualenvs/tempenv-4ada15392238b/lib/python3.6/site-packages/file_config/handlers/_common.py\", line 13, in imported\n    self._imported = self._discover_import()\n  File \"/home/stephen-bunn/.virtualenvs/tempenv-4ada15392238b/lib/python3.6/site-packages/file_config/handlers/_common.py\", line 46, in _discover_import\n    raise ModuleNotFoundError(f\"no modules in {self.packages!r} found\")\nModuleNotFoundError: no modules in ('tomlkit',) found\nno modules in ('tomlkit',) found\n</pre>\n<p>In this case you should install <tt>tomlkit</tt> as an extra dependency using something similar to the following:</p>\n<pre>pip install file-config<span class=\"o\">[</span>tomlkit<span class=\"o\">]</span>\n<span class=\"c1\"># or\n</span>pipenv install file-config<span class=\"o\">[</span>tomlkit<span class=\"o\">]</span>\n</pre>\n</div>\n</div>\n<div id=\"validation\">\n<h2>Validation</h2>\n<p>Validation is done through jsonschema and can be used to check a config instance using the <tt>validate</tt> method.</p>\n<pre>&gt;&gt;&gt; file_config.version = \"v12\"\n&gt;&gt;&gt; file_config.validate(my_config)\nNone\n&gt;&gt;&gt; my_config.version = \"12\"\n&gt;&gt;&gt; file_config.validate(mod_config)\nTraceback (most recent call last):\n  File \"main.py\", line 61, in &lt;module&gt;\n    print(file_config.validate(my_config))\n  File \"/home/stephen-bunn/Git/file-config/file_config/_file_config.py\", line 313, in validate\n    to_dict(instance, dict_type=dict), build_schema(instance.__class__)\n  File \"/home/stephen-bunn/.local/share/virtualenvs/file-config-zZO-gwXq/lib/python3.6/site-packages/jsonschema/validators.py\", line 823, in validate\n    cls(schema, *args, **kwargs).validate(instance)\n  File \"/home/stephen-bunn/.local/share/virtualenvs/file-config-zZO-gwXq/lib/python3.6/site-packages/jsonschema/validators.py\", line 299, in validate\n    raise error\njsonschema.exceptions.ValidationError: '12' does not match '^v\\\\d+$'\nFailed validating 'pattern' in schema['properties']['version']:\n    {'$id': '#/properties/version', 'pattern': '^v\\\\d+$', 'type': 'string'}\nOn instance['version']:\n    '12'\n</pre>\n<p>The attribute types added config vars <strong>do not</strong> imply type checking when creating an instance of the class.\nAttribute types are used for generating the jsonschema for the config and validating the model.\nThis allows you to throw any data you need to throw around in the config class, but validate the config only when you need to.</p>\n<p>You can get the jsonschema that is created to validate a config class through the <tt>build_schema</tt> method.</p>\n<pre>&gt;&gt;&gt; file_config.build_schema(ModConfig)\n</pre>\n<pre><span class=\"p\">{</span><span class=\"s1\">'$id'</span><span class=\"p\">:</span> <span class=\"s1\">'MyConfig.json'</span><span class=\"p\">,</span>\n<span class=\"s1\">'$schema'</span><span class=\"p\">:</span> <span class=\"s1\">'http://json-schema.org/draft-07/schema#'</span><span class=\"p\">,</span>\n<span class=\"s1\">'description'</span><span class=\"p\">:</span> <span class=\"s1\">'A simple/sample config'</span><span class=\"p\">,</span>\n<span class=\"s1\">'properties'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'groups'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'$id'</span><span class=\"p\">:</span> <span class=\"s1\">'#/properties/groups'</span><span class=\"p\">,</span>\n                           <span class=\"s1\">'items'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'$id'</span><span class=\"p\">:</span> <span class=\"s1\">'#/properties/groups/items'</span><span class=\"p\">,</span>\n                                    <span class=\"s1\">'description'</span><span class=\"p\">:</span> <span class=\"s1\">'A independent nested '</span>\n                                                   <span class=\"s1\">'config'</span><span class=\"p\">,</span>\n                                    <span class=\"s1\">'properties'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'$id'</span><span class=\"p\">:</span> <span class=\"s1\">'#/properties/groups/items/properties/name'</span><span class=\"p\">,</span>\n                                                            <span class=\"s1\">'type'</span><span class=\"p\">:</span> <span class=\"s1\">'string'</span><span class=\"p\">},</span>\n                                                   <span class=\"s1\">'type'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'$id'</span><span class=\"p\">:</span> <span class=\"s1\">'#/properties/groups/items/properties/type'</span><span class=\"p\">,</span>\n                                                            <span class=\"s1\">'default'</span><span class=\"p\">:</span> <span class=\"s1\">'config'</span><span class=\"p\">,</span>\n                                                            <span class=\"s1\">'type'</span><span class=\"p\">:</span> <span class=\"s1\">'string'</span><span class=\"p\">}},</span>\n                                    <span class=\"s1\">'required'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'name'</span><span class=\"p\">,</span> <span class=\"s1\">'type'</span><span class=\"p\">],</span>\n                                    <span class=\"s1\">'title'</span><span class=\"p\">:</span> <span class=\"s1\">'Config Group'</span><span class=\"p\">,</span>\n                                    <span class=\"s1\">'type'</span><span class=\"p\">:</span> <span class=\"s1\">'object'</span><span class=\"p\">},</span>\n                           <span class=\"s1\">'minItems'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n                           <span class=\"s1\">'type'</span><span class=\"p\">:</span> <span class=\"s1\">'array'</span><span class=\"p\">},</span>\n               <span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'$id'</span><span class=\"p\">:</span> <span class=\"s1\">'#/properties/name'</span><span class=\"p\">,</span>\n                        <span class=\"s1\">'maxLength'</span><span class=\"p\">:</span> <span class=\"mi\">24</span><span class=\"p\">,</span>\n                        <span class=\"s1\">'minLength'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n                        <span class=\"s1\">'type'</span><span class=\"p\">:</span> <span class=\"s1\">'string'</span><span class=\"p\">},</span>\n               <span class=\"s1\">'version'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'$id'</span><span class=\"p\">:</span> <span class=\"s1\">'#/properties/version'</span><span class=\"p\">,</span>\n                           <span class=\"s1\">'pattern'</span><span class=\"p\">:</span> <span class=\"s1\">'^v</span><span class=\"se\">\\\\</span><span class=\"s1\">d+$'</span><span class=\"p\">,</span>\n                           <span class=\"s1\">'type'</span><span class=\"p\">:</span> <span class=\"s1\">'string'</span><span class=\"p\">}},</span>\n<span class=\"s1\">'required'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'name'</span><span class=\"p\">,</span> <span class=\"s1\">'version'</span><span class=\"p\">,</span> <span class=\"s1\">'groups'</span><span class=\"p\">],</span>\n<span class=\"s1\">'title'</span><span class=\"p\">:</span> <span class=\"s1\">'My Config'</span><span class=\"p\">,</span>\n<span class=\"s1\">'type'</span><span class=\"p\">:</span> <span class=\"s1\">'object'</span><span class=\"p\">}</span>\n</pre>\n</div>\n\n          </div>"}, "last_serial": 5941589, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "e32f8833db66e06d1e262b4b5a28cb49", "sha256": "d5850a57a85f9b78a624f14068db74428c504990f521ca0f52e1200b18418dbc"}, "downloads": -1, "filename": "file-config-0.0.1.tar.gz", "has_sig": false, "md5_digest": "e32f8833db66e06d1e262b4b5a28cb49", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 14565, "upload_time": "2018-10-02T15:15:02", "upload_time_iso_8601": "2018-10-02T15:15:02.282488Z", "url": "https://files.pythonhosted.org/packages/f4/ca/6b98a2b811970e545beddb4279aeb7a404fbf55dc2921c9fccded39ba41c/file-config-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "5af273f8f8f7f42378a73cbb2e5ca719", "sha256": "64a510592bb974cc663723fc77efa14763262f3c4172ac48db8713f5ac47c568"}, "downloads": -1, "filename": "file-config-0.0.2.tar.gz", "has_sig": false, "md5_digest": "5af273f8f8f7f42378a73cbb2e5ca719", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 14552, "upload_time": "2018-10-02T15:31:36", "upload_time_iso_8601": "2018-10-02T15:31:36.003161Z", "url": "https://files.pythonhosted.org/packages/26/a1/0088da5382d91ec1037a4543ffe18d3a845b64b4689e64e2fa30a9edfcbb/file-config-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "af3daeca8dbeac59351b57a19cc7fa39", "sha256": "d3c71f6ddb7718f6a61ea2bc1eea6ba0cbe3994acdba026235999d6f21fb5278"}, "downloads": -1, "filename": "file-config-0.0.3.tar.gz", "has_sig": false, "md5_digest": "af3daeca8dbeac59351b57a19cc7fa39", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 14578, "upload_time": "2018-10-02T15:41:43", "upload_time_iso_8601": "2018-10-02T15:41:43.092871Z", "url": "https://files.pythonhosted.org/packages/b6/71/edfb1acd6091ed30e4371347e1eada58220a80cdf27f36ba782114091e51/file-config-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "3fc0c2ec2ab2491bd12dadbcb875b30d", "sha256": "8b39e37899578657f6c3c35c4301980beaff154c762d16f44d268cf073d52f3a"}, "downloads": -1, "filename": "file-config-0.0.4.tar.gz", "has_sig": false, "md5_digest": "3fc0c2ec2ab2491bd12dadbcb875b30d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 16256, "upload_time": "2018-10-04T21:13:54", "upload_time_iso_8601": "2018-10-04T21:13:54.901916Z", "url": "https://files.pythonhosted.org/packages/9c/76/2e8860a047bb89a28115ce468bb105acc962fa77a53d7b982e45072b21fd/file-config-0.0.4.tar.gz", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "ead2244e2b0dede377a14d3ea333bffd", "sha256": "0b6a318f2842534bff69a74fcae25e9ef31dfc2b276b683d51058fa40d50e667"}, "downloads": -1, "filename": "file-config-0.0.5.tar.gz", "has_sig": false, "md5_digest": "ead2244e2b0dede377a14d3ea333bffd", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 16934, "upload_time": "2018-10-05T19:49:17", "upload_time_iso_8601": "2018-10-05T19:49:17.041357Z", "url": "https://files.pythonhosted.org/packages/db/65/0d2ca6a003733ca2f4e3721617146e932c3f433800dd2402881abcd0c216/file-config-0.0.5.tar.gz", "yanked": false}], "0.0.6": [{"comment_text": "", "digests": {"md5": "618af569a3237b9e5ed7017eaeb220db", "sha256": "9da1513093cbc699df95f5ef6a3d136d7a42443efff0292b0d28925a905571cf"}, "downloads": -1, "filename": "file-config-0.0.6.tar.gz", "has_sig": false, "md5_digest": "618af569a3237b9e5ed7017eaeb220db", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 17398, "upload_time": "2018-10-08T13:48:09", "upload_time_iso_8601": "2018-10-08T13:48:09.852753Z", "url": "https://files.pythonhosted.org/packages/32/f1/4132d961eec2f0f3d11c205554257289dd373a7983717fe4c07409ad1052/file-config-0.0.6.tar.gz", "yanked": false}], "0.0.7": [{"comment_text": "", "digests": {"md5": "3d08fe409ff30ef622778792e22edc61", "sha256": "c8e9fcd23c09618e232eeda46403df247b9e03b02c0680ed75d8401636db7be0"}, "downloads": -1, "filename": "file-config-0.0.7.tar.gz", "has_sig": false, "md5_digest": "3d08fe409ff30ef622778792e22edc61", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 22801, "upload_time": "2018-10-13T18:54:37", "upload_time_iso_8601": "2018-10-13T18:54:37.436408Z", "url": "https://files.pythonhosted.org/packages/34/c9/f750b05b1b4c79130cf6cc283184e69738a5ac762fffc08b5dc3be779515/file-config-0.0.7.tar.gz", "yanked": false}], "0.0.8": [{"comment_text": "", "digests": {"md5": "19c0951765a1c3f68c586fda4ba6771e", "sha256": "6d6882d0fb8b544865b43b5fd1ced7e384d148dc70c195cd8619b4138634c541"}, "downloads": -1, "filename": "file-config-0.0.8.tar.gz", "has_sig": false, "md5_digest": "19c0951765a1c3f68c586fda4ba6771e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 19064, "upload_time": "2018-10-16T19:01:20", "upload_time_iso_8601": "2018-10-16T19:01:20.779689Z", "url": "https://files.pythonhosted.org/packages/30/84/38e0c0c70db9618dccf62146dd2195086fd8aac4e1e9cef9c328d2ffd9e6/file-config-0.0.8.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "56ea31950e27ee92c2ac5953f91da8d1", "sha256": "5f394b18bc15b04372cb16a85763610327eef263bd58f82ba720bdf34fa0dceb"}, "downloads": -1, "filename": "file-config-0.1.0.tar.gz", "has_sig": false, "md5_digest": "56ea31950e27ee92c2ac5953f91da8d1", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 19501, "upload_time": "2018-10-26T14:57:57", "upload_time_iso_8601": "2018-10-26T14:57:57.690459Z", "url": "https://files.pythonhosted.org/packages/04/b8/1aefce8185e13a834a41c7d86ff319b563344b1803aa010727bfd248f4ef/file-config-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "b6a0edf994ad8e43f2897e74d95bba4c", "sha256": "d7da709d0d2ff23e8c78e0c085267997b3b1fb63d7d1e2bee1ffea1f90ca84b7"}, "downloads": -1, "filename": "file-config-0.2.0.tar.gz", "has_sig": false, "md5_digest": "b6a0edf994ad8e43f2897e74d95bba4c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 19773, "upload_time": "2018-11-07T15:55:59", "upload_time_iso_8601": "2018-11-07T15:55:59.324201Z", "url": "https://files.pythonhosted.org/packages/94/42/2894053d181d2eaba92f5f55416f125871ceb6c7679df4c305c0aee6069d/file-config-0.2.0.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "0870866653dd3d3b439b35f48f329efb", "sha256": "04cee6568c0d9e0587171b202a76f11d8cb64226bdeeabe4e3f5136b07160846"}, "downloads": -1, "filename": "file-config-0.3.0.tar.gz", "has_sig": false, "md5_digest": "0870866653dd3d3b439b35f48f329efb", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 48070, "upload_time": "2018-12-16T19:29:25", "upload_time_iso_8601": "2018-12-16T19:29:25.430608Z", "url": "https://files.pythonhosted.org/packages/72/da/caa780291e357016f0488541556b7df93b7b9c38ae37d39c508a345064f7/file-config-0.3.0.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "06ea0e18c92b1e0529592821fd060688", "sha256": "f3142e6730a44688bb3f707f74bd77b16f655cd75760a8cc3d3d181923386623"}, "downloads": -1, "filename": "file-config-0.3.1.tar.gz", "has_sig": false, "md5_digest": "06ea0e18c92b1e0529592821fd060688", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 48297, "upload_time": "2018-12-18T18:41:11", "upload_time_iso_8601": "2018-12-18T18:41:11.514811Z", "url": "https://files.pythonhosted.org/packages/13/ca/6a5fd85fed9fa3d511d8496b691999201cb7035d090c0d2d9bd408b69cba/file-config-0.3.1.tar.gz", "yanked": false}], "0.3.10": [{"comment_text": "", "digests": {"md5": "04f2f11a418d41317715bc9bb4891351", "sha256": "81d5962e3739df5feb71893a3103954769519baa7d7bd609380721768f30d952"}, "downloads": -1, "filename": "file_config-0.3.10-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "04f2f11a418d41317715bc9bb4891351", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6", "size": 32163, "upload_time": "2019-10-04T17:46:22", "upload_time_iso_8601": "2019-10-04T17:46:22.579612Z", "url": "https://files.pythonhosted.org/packages/e2/c4/02050d66458364c310c8f6c8eedb872ac24b5462010e2f78dce12ba3f60c/file_config-0.3.10-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c32ff5ca7486ba297bbeafde22439c45", "sha256": "d8d22bc720092c47e2d858093bd0ab7c147b62c11f5761cd6e27bc504405aae6"}, "downloads": -1, "filename": "file-config-0.3.10.tar.gz", "has_sig": false, "md5_digest": "c32ff5ca7486ba297bbeafde22439c45", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 51958, "upload_time": "2019-10-04T17:46:24", "upload_time_iso_8601": "2019-10-04T17:46:24.508051Z", "url": "https://files.pythonhosted.org/packages/d6/13/d372f01782e7cc868da52ca9d30c27809eb0d50bfbe1e12c8510ec56fc53/file-config-0.3.10.tar.gz", "yanked": false}], "0.3.2": [{"comment_text": "", "digests": {"md5": "33f1adae3fc4e8a87b20906af4374f91", "sha256": "e41021fbddc1670757cf965497164355f2016333708c3adaa0d671ac4c310943"}, "downloads": -1, "filename": "file_config-0.3.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "33f1adae3fc4e8a87b20906af4374f91", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6", "size": 31525, "upload_time": "2019-01-09T22:53:01", "upload_time_iso_8601": "2019-01-09T22:53:01.126713Z", "url": "https://files.pythonhosted.org/packages/c5/df/41e6d0a39605623d8a93e5c5d0192e15223546eac6895f4a0ce1c8ea150e/file_config-0.3.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a30fd37d4d00c2ecc4cf8e6a38d97608", "sha256": "4606b96efecf1dcba6439c68c10e2ff4e557bdd50c8b92fc0a8896bf3871f53c"}, "downloads": -1, "filename": "file-config-0.3.2.tar.gz", "has_sig": false, "md5_digest": "a30fd37d4d00c2ecc4cf8e6a38d97608", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 53278, "upload_time": "2019-01-09T22:53:02", "upload_time_iso_8601": "2019-01-09T22:53:02.965376Z", "url": "https://files.pythonhosted.org/packages/ec/da/c08a93cf4274a3b72393a5a01984852bb30b69ecea5d99af2ca61e014080/file-config-0.3.2.tar.gz", "yanked": false}], "0.3.3": [{"comment_text": "", "digests": {"md5": "07be6cef8d2b5a38cfa690f85f02f218", "sha256": "8cc670dbac5ccae905454a95c8ceaf0dffb6327b83be2302c1afdbea29b10667"}, "downloads": -1, "filename": "file_config-0.3.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "07be6cef8d2b5a38cfa690f85f02f218", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6", "size": 31554, "upload_time": "2019-01-10T16:24:46", "upload_time_iso_8601": "2019-01-10T16:24:46.331232Z", "url": "https://files.pythonhosted.org/packages/6a/34/4315a3a881581e206de92f23906497b45545047ce8b9fa8acdbdbfb5bfa8/file_config-0.3.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d10fbab314c728984db33a1f45d284cd", "sha256": "c20964513ed6a09964af8b64308e72476b39848f843645acd0922f5273136150"}, "downloads": -1, "filename": "file-config-0.3.3.tar.gz", "has_sig": false, "md5_digest": "d10fbab314c728984db33a1f45d284cd", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 53441, "upload_time": "2019-01-10T16:24:48", "upload_time_iso_8601": "2019-01-10T16:24:48.176307Z", "url": "https://files.pythonhosted.org/packages/aa/f8/4f447fec97f45a4ab57be9b5974b094f1283ecd78ddd95c1ab1b5697a5ba/file-config-0.3.3.tar.gz", "yanked": false}], "0.3.4": [{"comment_text": "", "digests": {"md5": "2c1496ad53ade4178d8e115ae2adef3d", "sha256": "e73406df66b32fe116ed1ae74f0efb4dfff319d5d9e61710bda85b33ca7c1e55"}, "downloads": -1, "filename": "file_config-0.3.4-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "2c1496ad53ade4178d8e115ae2adef3d", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6", "size": 31543, "upload_time": "2019-01-11T14:38:09", "upload_time_iso_8601": "2019-01-11T14:38:09.283402Z", "url": "https://files.pythonhosted.org/packages/1e/bc/b495ba31334097346d72c48515a40369c5a8865ee8d6f1cd1143bedc0948/file_config-0.3.4-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7abc4bb67b1b3cbcd50968c3ebc8cde3", "sha256": "5be453c3204eb6fde7c03c57ee3f646bbdcca6695c9806793f4a6a120d3f8c75"}, "downloads": -1, "filename": "file-config-0.3.4.tar.gz", "has_sig": false, "md5_digest": "7abc4bb67b1b3cbcd50968c3ebc8cde3", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 53324, "upload_time": "2019-01-11T14:38:10", "upload_time_iso_8601": "2019-01-11T14:38:10.981991Z", "url": "https://files.pythonhosted.org/packages/2c/b1/3d3eb4eb8e6b05775e4002cf47e8527e442c0f9a4c66e48557be5bd87ce0/file-config-0.3.4.tar.gz", "yanked": false}], "0.3.5": [{"comment_text": "", "digests": {"md5": "2d1a0c103793c740a82b487b880c3cc3", "sha256": "52eb573183b1df569121bf087539aa60d0b60b03b4b6eb597ea1b33e8ed5c41a"}, "downloads": -1, "filename": "file_config-0.3.5-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "2d1a0c103793c740a82b487b880c3cc3", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6", "size": 31542, "upload_time": "2019-02-16T00:53:33", "upload_time_iso_8601": "2019-02-16T00:53:33.299107Z", "url": "https://files.pythonhosted.org/packages/7e/5f/7edbfa79652b8ea67ec6d92964e475d12ef08251d3639f7090fa61e4a902/file_config-0.3.5-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "044ebe1b9c6d257d4ae2ac116db631e3", "sha256": "ae56a794b0a8b47ef8364682a45229ce3bfdc72fc0d807812d2e2098c0d7fa4b"}, "downloads": -1, "filename": "file-config-0.3.5.tar.gz", "has_sig": false, "md5_digest": "044ebe1b9c6d257d4ae2ac116db631e3", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 49805, "upload_time": "2019-02-16T00:53:35", "upload_time_iso_8601": "2019-02-16T00:53:35.195520Z", "url": "https://files.pythonhosted.org/packages/3b/12/efe52efe89d1dc19e2898b3342e8c33fb483c0168c9ed836b32c59c4893c/file-config-0.3.5.tar.gz", "yanked": false}], "0.3.6": [{"comment_text": "", "digests": {"md5": "20fa206b82ae5fbbd8c06e64c13f0231", "sha256": "d94cdc3bc63ae373db5882b32b07ace84a297a09dfbab55a78fb2925924a1d4d"}, "downloads": -1, "filename": "file_config-0.3.6-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "20fa206b82ae5fbbd8c06e64c13f0231", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6", "size": 31633, "upload_time": "2019-03-15T14:43:37", "upload_time_iso_8601": "2019-03-15T14:43:37.667015Z", "url": "https://files.pythonhosted.org/packages/06/42/3c4ad3a29dfd14575ac1302e4fc561d06e97ac8f725920ca6f6c3462ce9a/file_config-0.3.6-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f5ca99b99ea181504ad6eb820f25beb5", "sha256": "39e0586e42caa0a8a95bfdb01504ea8cddb4a9e6220670dbef80dde80090be30"}, "downloads": -1, "filename": "file-config-0.3.6.tar.gz", "has_sig": false, "md5_digest": "f5ca99b99ea181504ad6eb820f25beb5", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 53631, "upload_time": "2019-03-15T14:43:39", "upload_time_iso_8601": "2019-03-15T14:43:39.299123Z", "url": "https://files.pythonhosted.org/packages/e4/d2/943c16be58f075e67b890cad3b6f575e195842b590addff5ccc611995577/file-config-0.3.6.tar.gz", "yanked": false}], "0.3.7": [{"comment_text": "", "digests": {"md5": "e2e4d20444385bef7a1a84e13da823c0", "sha256": "6a3785505a1b6cc0e52026e9fd973d1b80bbc8e233678781abf35d0f6c8713c5"}, "downloads": -1, "filename": "file_config-0.3.7-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "e2e4d20444385bef7a1a84e13da823c0", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6", "size": 31731, "upload_time": "2019-03-22T19:40:17", "upload_time_iso_8601": "2019-03-22T19:40:17.901104Z", "url": "https://files.pythonhosted.org/packages/17/fe/b50e5ad623d0721b73251d194f97e19306de2b370e09453cc6f807db1436/file_config-0.3.7-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a541cfe08d55f93ea09a782a6e509840", "sha256": "8ff3bb6031f638beb2d81bb969e1ce047c9e05ed2884073986cb7d020c404668"}, "downloads": -1, "filename": "file-config-0.3.7.tar.gz", "has_sig": false, "md5_digest": "a541cfe08d55f93ea09a782a6e509840", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 54270, "upload_time": "2019-03-22T19:40:19", "upload_time_iso_8601": "2019-03-22T19:40:19.549522Z", "url": "https://files.pythonhosted.org/packages/e9/95/253aeb0c014a54f0b32048d397e8e48ddb0f2c59770fbb2493d5e7ec4c28/file-config-0.3.7.tar.gz", "yanked": false}], "0.3.8": [{"comment_text": "", "digests": {"md5": "162830e21b616f28aa7b4886586d2a14", "sha256": "1552ebe1560681b9baf2ec9781e5eac3f59e8d4062d2b968c75c983c96789400"}, "downloads": -1, "filename": "file_config-0.3.8-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "162830e21b616f28aa7b4886586d2a14", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6", "size": 32086, "upload_time": "2019-04-01T22:25:13", "upload_time_iso_8601": "2019-04-01T22:25:13.327980Z", "url": "https://files.pythonhosted.org/packages/3c/8a/c06661e6ebb590dde3ad7282a5ca176d8143dc939b656ebce427785c1b19/file_config-0.3.8-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f77ca5d3c8cb906e49a026a81d12094e", "sha256": "a086f1d19c6cf604c7f09d025903e155412bfdef430a8520fa57549a313ccf4c"}, "downloads": -1, "filename": "file-config-0.3.8.tar.gz", "has_sig": false, "md5_digest": "f77ca5d3c8cb906e49a026a81d12094e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 51670, "upload_time": "2019-04-01T22:25:15", "upload_time_iso_8601": "2019-04-01T22:25:15.141769Z", "url": "https://files.pythonhosted.org/packages/61/ff/9c7c9db11a509d3232dd2f02f88ce5e59e2de7e4ca7bad8bc1b2a87b97ad/file-config-0.3.8.tar.gz", "yanked": false}], "0.3.9": [{"comment_text": "", "digests": {"md5": "963b07173d9fc0e48ea7a1b38742144a", "sha256": "b52b9ce95518bb29c9a718e4f302b5a44d7470b17a0b4b0471937a20fc52b67d"}, "downloads": -1, "filename": "file_config-0.3.9-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "963b07173d9fc0e48ea7a1b38742144a", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6", "size": 32111, "upload_time": "2019-06-15T00:55:32", "upload_time_iso_8601": "2019-06-15T00:55:32.917402Z", "url": "https://files.pythonhosted.org/packages/47/8d/8b6d2a65bae94b1dc09f71dd364a09cae78517bbbd137b728950a65fa8da/file_config-0.3.9-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0810472ce9882c7fe58fcb4973a276c9", "sha256": "e490d715279e55990c6cd31afb9617cb39404a17ba934f91453bebed4215ffa9"}, "downloads": -1, "filename": "file-config-0.3.9.tar.gz", "has_sig": false, "md5_digest": "0810472ce9882c7fe58fcb4973a276c9", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 51787, "upload_time": "2019-06-15T00:55:35", "upload_time_iso_8601": "2019-06-15T00:55:35.200566Z", "url": "https://files.pythonhosted.org/packages/07/51/49444b407841d8ea597d8f49957d939d0201f5a88716a40b3355fb890f99/file-config-0.3.9.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "1db96aa65d1c73de69223bbd90a1d73f", "sha256": "7ca7cd7a52a29fb90ed633c50c153478ebce8b95d2ae5c4288b57eaeb91903e1"}, "downloads": -1, "filename": "file_config-1.0.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "1db96aa65d1c73de69223bbd90a1d73f", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6", "size": 32714, "upload_time": "2019-10-07T21:28:00", "upload_time_iso_8601": "2019-10-07T21:28:00.967463Z", "url": "https://files.pythonhosted.org/packages/3a/61/25346fcec233a43c98ef553959ad4e015d3497b8fbde276a39019fad248e/file_config-1.0.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7c098eac09cb20a85ac6f61086af4780", "sha256": "f139db8f0c2c633d343d80de17e180d86e221e5a4d1b44a0a0150c3f77756d38"}, "downloads": -1, "filename": "file-config-1.0.0.tar.gz", "has_sig": false, "md5_digest": "7c098eac09cb20a85ac6f61086af4780", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 52993, "upload_time": "2019-10-07T21:28:03", "upload_time_iso_8601": "2019-10-07T21:28:03.610782Z", "url": "https://files.pythonhosted.org/packages/8f/31/6743066cecab115882ccaad17699b7999e766cc78dbfba6b789fea7ac4e9/file-config-1.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "1db96aa65d1c73de69223bbd90a1d73f", "sha256": "7ca7cd7a52a29fb90ed633c50c153478ebce8b95d2ae5c4288b57eaeb91903e1"}, "downloads": -1, "filename": "file_config-1.0.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "1db96aa65d1c73de69223bbd90a1d73f", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6", "size": 32714, "upload_time": "2019-10-07T21:28:00", "upload_time_iso_8601": "2019-10-07T21:28:00.967463Z", "url": "https://files.pythonhosted.org/packages/3a/61/25346fcec233a43c98ef553959ad4e015d3497b8fbde276a39019fad248e/file_config-1.0.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7c098eac09cb20a85ac6f61086af4780", "sha256": "f139db8f0c2c633d343d80de17e180d86e221e5a4d1b44a0a0150c3f77756d38"}, "downloads": -1, "filename": "file-config-1.0.0.tar.gz", "has_sig": false, "md5_digest": "7c098eac09cb20a85ac6f61086af4780", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 52993, "upload_time": "2019-10-07T21:28:03", "upload_time_iso_8601": "2019-10-07T21:28:03.610782Z", "url": "https://files.pythonhosted.org/packages/8f/31/6743066cecab115882ccaad17699b7999e766cc78dbfba6b789fea7ac4e9/file-config-1.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:42:36 2020"}