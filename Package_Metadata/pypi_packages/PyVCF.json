{"info": {"author": "James Casbon and @jdoughertyii", "author_email": "casbon@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "Intended Audience :: Science/Research", "License :: OSI Approved :: BSD License", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Cython", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.2", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Topic :: Scientific/Engineering :: Bio-Informatics"], "description": "A VCFv4.0 and 4.1 parser for Python.\n\nOnline version of PyVCF documentation is available at http://pyvcf.rtfd.org/\n\nThe intent of this module is to mimic the ``csv`` module in the Python stdlib,\nas opposed to more flexible serialization formats like JSON or YAML.  ``vcf``\nwill attempt to parse the content of each record based on the data types\nspecified in the meta-information lines --  specifically the ##INFO and\n##FORMAT lines.  If these lines are missing or incomplete, it will check\nagainst the reserved types mentioned in the spec.  Failing that, it will just\nreturn strings.\n\nThere main interface is the class: ``Reader``.  It takes a file-like\nobject and acts as a reader::\n\n    >>> import vcf\n    >>> vcf_reader = vcf.Reader(open('vcf/test/example-4.0.vcf', 'r'))\n    >>> for record in vcf_reader:\n    ...     print record\n    Record(CHROM=20, POS=14370, REF=G, ALT=[A])\n    Record(CHROM=20, POS=17330, REF=T, ALT=[A])\n    Record(CHROM=20, POS=1110696, REF=A, ALT=[G, T])\n    Record(CHROM=20, POS=1230237, REF=T, ALT=[None])\n    Record(CHROM=20, POS=1234567, REF=GTCT, ALT=[G, GTACT])\n\n\nThis produces a great deal of information, but it is conveniently accessed.\nThe attributes of a Record are the 8 fixed fields from the VCF spec::\n\n    * ``Record.CHROM``\n    * ``Record.POS``\n    * ``Record.ID``\n    * ``Record.REF``\n    * ``Record.ALT``\n    * ``Record.QUAL``\n    * ``Record.FILTER``\n    * ``Record.INFO``\n\nplus attributes to handle genotype information:\n\n    * ``Record.FORMAT``\n    * ``Record.samples``\n    * ``Record.genotype``\n\n``samples`` and ``genotype``, not being the title of any column, are left lowercase.  The format\nof the fixed fields is from the spec.  Comma-separated lists in the VCF are\nconverted to lists.  In particular, one-entry VCF lists are converted to\none-entry Python lists (see, e.g., ``Record.ALT``).  Semicolon-delimited lists\nof key=value pairs are converted to Python dictionaries, with flags being given\na ``True`` value. Integers and floats are handled exactly as you'd expect::\n\n    >>> vcf_reader = vcf.Reader(open('vcf/test/example-4.0.vcf', 'r'))\n    >>> record = next(vcf_reader)\n    >>> print record.POS\n    14370\n    >>> print record.ALT\n    [A]\n    >>> print record.INFO['AF']\n    [0.5]\n\nThere are a number of convenience methods and properties for each ``Record`` allowing you to\nexamine properties of interest::\n\n    >>> print record.num_called, record.call_rate, record.num_unknown\n    3 1.0 0\n    >>> print record.num_hom_ref, record.num_het, record.num_hom_alt\n    1 1 1\n    >>> print record.nucl_diversity, record.aaf, record.heterozygosity\n    0.6 [0.5] 0.5\n    >>> print record.get_hets()\n    [Call(sample=NA00002, CallData(GT=1|0, GQ=48, DP=8, HQ=[51, 51]))]\n    >>> print record.is_snp, record.is_indel, record.is_transition, record.is_deletion\n    True False True False\n    >>> print record.var_type, record.var_subtype\n    snp ts\n    >>> print record.is_monomorphic\n    False\n\n``record.FORMAT`` will be a string specifying the format of the genotype\nfields.  In case the FORMAT column does not exist, ``record.FORMAT`` is\n``None``.  Finally, ``record.samples`` is a list of dictionaries containing the\nparsed sample column and ``record.genotype`` is a way of looking up genotypes\nby sample name::\n\n    >>> record = next(vcf_reader)\n    >>> for sample in record.samples:\n    ...     print sample['GT']\n    0|0\n    0|1\n    0/0\n    >>> print record.genotype('NA00001')['GT']\n    0|0\n\nThe genotypes are represented by ``Call`` objects, which have three attributes: the\ncorresponding Record ``site``, the sample name in ``sample`` and a dictionary of\ncall data in ``data``::\n\n     >>> call = record.genotype('NA00001')\n     >>> print call.site\n     Record(CHROM=20, POS=17330, REF=T, ALT=[A])\n     >>> print call.sample\n     NA00001\n     >>> print call.data\n     CallData(GT=0|0, GQ=49, DP=3, HQ=[58, 50])\n\nPlease note that as of release 0.4.0, attributes known to have single values (such as\n``DP`` and ``GQ`` above) are returned as values.  Other attributes are returned\nas lists (such as ``HQ`` above).\n\nThere are also a number of methods::\n\n    >>> print call.called, call.gt_type, call.gt_bases, call.phased\n    True 0 T|T True\n\nMetadata regarding the VCF file itself can be investigated through the\nfollowing attributes:\n\n    * ``Reader.metadata``\n    * ``Reader.infos``\n    * ``Reader.filters``\n    * ``Reader.formats``\n    * ``Reader.samples``\n\nFor example::\n\n    >>> vcf_reader.metadata['fileDate']\n    '20090805'\n    >>> vcf_reader.samples\n    ['NA00001', 'NA00002', 'NA00003']\n    >>> vcf_reader.filters\n    OrderedDict([('q10', Filter(id='q10', desc='Quality below 10')), ('s50', Filter(id='s50', desc='Less than 50% of samples have data'))])\n    >>> vcf_reader.infos['AA'].desc\n    'Ancestral Allele'\n\nALT records are actually classes, so that you can interrogate them::\n\n    >>> reader = vcf.Reader(open('vcf/test/example-4.1-bnd.vcf'))\n    >>> _ = next(reader); row = next(reader)\n    >>> print row\n    Record(CHROM=1, POS=2, REF=T, ALT=[T[2:3[])\n    >>> bnd = row.ALT[0]\n    >>> print bnd.withinMainAssembly, bnd.orientation, bnd.remoteOrientation, bnd.connectingSequence\n    True False True T\n\nThe Reader supports retrieval of records within designated regions for files\nwith tabix indexes via the fetch method. This requires the pysam module as a\ndependency. Pass in a chromosome, and, optionally, start and end coordinates,\nfor the regions of interest::\n\n    >>> vcf_reader = vcf.Reader(filename='vcf/test/tb.vcf.gz')\n    >>> # fetch all records on chromosome 20 from base 1110696 through 1230237\n    >>> for record in vcf_reader.fetch('20', 1110695, 1230237):  # doctest: +SKIP\n    ...     print record\n    Record(CHROM=20, POS=1110696, REF=A, ALT=[G, T])\n    Record(CHROM=20, POS=1230237, REF=T, ALT=[None])\n\nNote that the start and end coordinates are in the zero-based, half-open\ncoordinate system, similar to ``_Record.start`` and ``_Record.end``. The very\nfirst base of a chromosome is index 0, and the the region includes bases up\nto, but not including the base at the end coordinate. For example::\n\n    >>> # fetch all records on chromosome 4 from base 11 through 20\n    >>> vcf_reader.fetch('4', 10, 20)   # doctest: +SKIP\n\nwould include all records overlapping a 10 base pair region from the 11th base\nof through the 20th base (which is at index 19) of chromosome 4. It would not\ninclude the 21st base (at index 20). (See\nhttp://genomewiki.ucsc.edu/index.php/Coordinate_Transforms for more\ninformation on the zero-based, half-open coordinate system.)\n\nThe ``Writer`` class provides a way of writing a VCF file.  Currently, you must specify a\ntemplate ``Reader`` which provides the metadata::\n\n    >>> vcf_reader = vcf.Reader(filename='vcf/test/tb.vcf.gz')\n    >>> vcf_writer = vcf.Writer(open('/dev/null', 'w'), vcf_reader)\n    >>> for record in vcf_reader:\n    ...     vcf_writer.write_record(record)\n\nAn extensible script is available to filter vcf files in vcf_filter.py.  VCF filters\ndeclared by other packages will be available for use in this script.  Please\nsee :doc:`FILTERS` for full description.\n", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/jamescasbon/PyVCF", "keywords": "bioinformatics", "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "PyVCF", "package_url": "https://pypi.org/project/PyVCF/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/PyVCF/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/jamescasbon/PyVCF"}, "release_url": "https://pypi.org/project/PyVCF/0.6.8/", "requires_dist": null, "requires_python": null, "summary": "Variant Call Format (VCF) parser for Python", "version": "0.6.8", "yanked": false, "html_description": "<div class=\"project-description\">\n            A VCFv4.0 and 4.1 parser for Python.<br><br>Online version of PyVCF documentation is available at http://pyvcf.rtfd.org/<br><br>The intent of this module is to mimic the ``csv`` module in the Python stdlib,<br>as opposed to more flexible serialization formats like JSON or YAML.  ``vcf``<br>will attempt to parse the content of each record based on the data types<br>specified in the meta-information lines --  specifically the ##INFO and<br>##FORMAT lines.  If these lines are missing or incomplete, it will check<br>against the reserved types mentioned in the spec.  Failing that, it will just<br>return strings.<br><br>There main interface is the class: ``Reader``.  It takes a file-like<br>object and acts as a reader::<br><br>    &gt;&gt;&gt; import vcf<br>    &gt;&gt;&gt; vcf_reader = vcf.Reader(open('vcf/test/example-4.0.vcf', 'r'))<br>    &gt;&gt;&gt; for record in vcf_reader:<br>    ...     print record<br>    Record(CHROM=20, POS=14370, REF=G, ALT=[A])<br>    Record(CHROM=20, POS=17330, REF=T, ALT=[A])<br>    Record(CHROM=20, POS=1110696, REF=A, ALT=[G, T])<br>    Record(CHROM=20, POS=1230237, REF=T, ALT=[None])<br>    Record(CHROM=20, POS=1234567, REF=GTCT, ALT=[G, GTACT])<br><br><br>This produces a great deal of information, but it is conveniently accessed.<br>The attributes of a Record are the 8 fixed fields from the VCF spec::<br><br>    * ``Record.CHROM``<br>    * ``Record.POS``<br>    * ``Record.ID``<br>    * ``Record.REF``<br>    * ``Record.ALT``<br>    * ``Record.QUAL``<br>    * ``Record.FILTER``<br>    * ``Record.INFO``<br><br>plus attributes to handle genotype information:<br><br>    * ``Record.FORMAT``<br>    * ``Record.samples``<br>    * ``Record.genotype``<br><br>``samples`` and ``genotype``, not being the title of any column, are left lowercase.  The format<br>of the fixed fields is from the spec.  Comma-separated lists in the VCF are<br>converted to lists.  In particular, one-entry VCF lists are converted to<br>one-entry Python lists (see, e.g., ``Record.ALT``).  Semicolon-delimited lists<br>of key=value pairs are converted to Python dictionaries, with flags being given<br>a ``True`` value. Integers and floats are handled exactly as you'd expect::<br><br>    &gt;&gt;&gt; vcf_reader = vcf.Reader(open('vcf/test/example-4.0.vcf', 'r'))<br>    &gt;&gt;&gt; record = next(vcf_reader)<br>    &gt;&gt;&gt; print record.POS<br>    14370<br>    &gt;&gt;&gt; print record.ALT<br>    [A]<br>    &gt;&gt;&gt; print record.INFO['AF']<br>    [0.5]<br><br>There are a number of convenience methods and properties for each ``Record`` allowing you to<br>examine properties of interest::<br><br>    &gt;&gt;&gt; print record.num_called, record.call_rate, record.num_unknown<br>    3 1.0 0<br>    &gt;&gt;&gt; print record.num_hom_ref, record.num_het, record.num_hom_alt<br>    1 1 1<br>    &gt;&gt;&gt; print record.nucl_diversity, record.aaf, record.heterozygosity<br>    0.6 [0.5] 0.5<br>    &gt;&gt;&gt; print record.get_hets()<br>    [Call(sample=NA00002, CallData(GT=1|0, GQ=48, DP=8, HQ=[51, 51]))]<br>    &gt;&gt;&gt; print record.is_snp, record.is_indel, record.is_transition, record.is_deletion<br>    True False True False<br>    &gt;&gt;&gt; print record.var_type, record.var_subtype<br>    snp ts<br>    &gt;&gt;&gt; print record.is_monomorphic<br>    False<br><br>``record.FORMAT`` will be a string specifying the format of the genotype<br>fields.  In case the FORMAT column does not exist, ``record.FORMAT`` is<br>``None``.  Finally, ``record.samples`` is a list of dictionaries containing the<br>parsed sample column and ``record.genotype`` is a way of looking up genotypes<br>by sample name::<br><br>    &gt;&gt;&gt; record = next(vcf_reader)<br>    &gt;&gt;&gt; for sample in record.samples:<br>    ...     print sample['GT']<br>    0|0<br>    0|1<br>    0/0<br>    &gt;&gt;&gt; print record.genotype('NA00001')['GT']<br>    0|0<br><br>The genotypes are represented by ``Call`` objects, which have three attributes: the<br>corresponding Record ``site``, the sample name in ``sample`` and a dictionary of<br>call data in ``data``::<br><br>     &gt;&gt;&gt; call = record.genotype('NA00001')<br>     &gt;&gt;&gt; print call.site<br>     Record(CHROM=20, POS=17330, REF=T, ALT=[A])<br>     &gt;&gt;&gt; print call.sample<br>     NA00001<br>     &gt;&gt;&gt; print call.data<br>     CallData(GT=0|0, GQ=49, DP=3, HQ=[58, 50])<br><br>Please note that as of release 0.4.0, attributes known to have single values (such as<br>``DP`` and ``GQ`` above) are returned as values.  Other attributes are returned<br>as lists (such as ``HQ`` above).<br><br>There are also a number of methods::<br><br>    &gt;&gt;&gt; print call.called, call.gt_type, call.gt_bases, call.phased<br>    True 0 T|T True<br><br>Metadata regarding the VCF file itself can be investigated through the<br>following attributes:<br><br>    * ``Reader.metadata``<br>    * ``Reader.infos``<br>    * ``Reader.filters``<br>    * ``Reader.formats``<br>    * ``Reader.samples``<br><br>For example::<br><br>    &gt;&gt;&gt; vcf_reader.metadata['fileDate']<br>    '20090805'<br>    &gt;&gt;&gt; vcf_reader.samples<br>    ['NA00001', 'NA00002', 'NA00003']<br>    &gt;&gt;&gt; vcf_reader.filters<br>    OrderedDict([('q10', Filter(id='q10', desc='Quality below 10')), ('s50', Filter(id='s50', desc='Less than 50% of samples have data'))])<br>    &gt;&gt;&gt; vcf_reader.infos['AA'].desc<br>    'Ancestral Allele'<br><br>ALT records are actually classes, so that you can interrogate them::<br><br>    &gt;&gt;&gt; reader = vcf.Reader(open('vcf/test/example-4.1-bnd.vcf'))<br>    &gt;&gt;&gt; _ = next(reader); row = next(reader)<br>    &gt;&gt;&gt; print row<br>    Record(CHROM=1, POS=2, REF=T, ALT=[T[2:3[])<br>    &gt;&gt;&gt; bnd = row.ALT[0]<br>    &gt;&gt;&gt; print bnd.withinMainAssembly, bnd.orientation, bnd.remoteOrientation, bnd.connectingSequence<br>    True False True T<br><br>The Reader supports retrieval of records within designated regions for files<br>with tabix indexes via the fetch method. This requires the pysam module as a<br>dependency. Pass in a chromosome, and, optionally, start and end coordinates,<br>for the regions of interest::<br><br>    &gt;&gt;&gt; vcf_reader = vcf.Reader(filename='vcf/test/tb.vcf.gz')<br>    &gt;&gt;&gt; # fetch all records on chromosome 20 from base 1110696 through 1230237<br>    &gt;&gt;&gt; for record in vcf_reader.fetch('20', 1110695, 1230237):  # doctest: +SKIP<br>    ...     print record<br>    Record(CHROM=20, POS=1110696, REF=A, ALT=[G, T])<br>    Record(CHROM=20, POS=1230237, REF=T, ALT=[None])<br><br>Note that the start and end coordinates are in the zero-based, half-open<br>coordinate system, similar to ``_Record.start`` and ``_Record.end``. The very<br>first base of a chromosome is index 0, and the the region includes bases up<br>to, but not including the base at the end coordinate. For example::<br><br>    &gt;&gt;&gt; # fetch all records on chromosome 4 from base 11 through 20<br>    &gt;&gt;&gt; vcf_reader.fetch('4', 10, 20)   # doctest: +SKIP<br><br>would include all records overlapping a 10 base pair region from the 11th base<br>of through the 20th base (which is at index 19) of chromosome 4. It would not<br>include the 21st base (at index 20). (See<br>http://genomewiki.ucsc.edu/index.php/Coordinate_Transforms for more<br>information on the zero-based, half-open coordinate system.)<br><br>The ``Writer`` class provides a way of writing a VCF file.  Currently, you must specify a<br>template ``Reader`` which provides the metadata::<br><br>    &gt;&gt;&gt; vcf_reader = vcf.Reader(filename='vcf/test/tb.vcf.gz')<br>    &gt;&gt;&gt; vcf_writer = vcf.Writer(open('/dev/null', 'w'), vcf_reader)<br>    &gt;&gt;&gt; for record in vcf_reader:<br>    ...     vcf_writer.write_record(record)<br><br>An extensible script is available to filter vcf files in vcf_filter.py.  VCF filters<br>declared by other packages will be available for use in this script.  Please<br>see :doc:`FILTERS` for full description.<br>\n          </div>"}, "last_serial": 2014594, "releases": {"0.0.0": [{"comment_text": "", "digests": {"md5": "bd36055d7e1c8e43f0166f74101117f4", "sha256": "5fecb7e9a79309590570054a4ff48e132f7141890f0135d3d606a102f6c26a86"}, "downloads": -1, "filename": "PyVCF-0.0.0.tar.gz", "has_sig": false, "md5_digest": "bd36055d7e1c8e43f0166f74101117f4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6570, "upload_time": "2012-01-12T12:03:03", "upload_time_iso_8601": "2012-01-12T12:03:03.664827Z", "url": "https://files.pythonhosted.org/packages/49/5c/33f775739d6119c8797c4ef07a51e4852afcd7d6c09707b023c20244f3bc/PyVCF-0.0.0.tar.gz", "yanked": false}], "0.1": [{"comment_text": "", "digests": {"md5": "4e3934cd0e090ac39f74fa2100caeac1", "sha256": "7e14705b7095c2076f06bc48f3ffb8fcb370d720f01edb8090ef53212dfc19eb"}, "downloads": -1, "filename": "PyVCF-0.1.tar.gz", "has_sig": false, "md5_digest": "4e3934cd0e090ac39f74fa2100caeac1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8999, "upload_time": "2012-01-20T12:34:59", "upload_time_iso_8601": "2012-01-20T12:34:59.144580Z", "url": "https://files.pythonhosted.org/packages/31/41/a1cf5f741cffcf8a8e1c07af8c90603e171170c407e1bc70464ed2d88172/PyVCF-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "26679c3ed7eda9beef93e47fedaa067b", "sha256": "f161b693865814af67a82893d9fbbde569b0f7deb55d20d7c6ea8dfa262cc0d9"}, "downloads": -1, "filename": "PyVCF-0.2.tar.gz", "has_sig": false, "md5_digest": "26679c3ed7eda9beef93e47fedaa067b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11321, "upload_time": "2012-01-24T16:59:00", "upload_time_iso_8601": "2012-01-24T16:59:00.526433Z", "url": "https://files.pythonhosted.org/packages/6e/00/49093d8739ceca71fc218b8ae57c37b09502c59b25637141de6345dfffcd/PyVCF-0.2.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "00113b2aaaff96f829c1d57f5c0b8a3f", "sha256": "48cd4dd673e17c4bff7e813948c1305ce338e1e4abc4ab7d854d2d6f51ff7b6e"}, "downloads": -1, "filename": "PyVCF-0.2.1.tar.gz", "has_sig": false, "md5_digest": "00113b2aaaff96f829c1d57f5c0b8a3f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11323, "upload_time": "2012-01-24T17:21:09", "upload_time_iso_8601": "2012-01-24T17:21:09.365947Z", "url": "https://files.pythonhosted.org/packages/13/f7/cbbbd0ff8cccd90cbaa7e72a508b6affe39a92b0f86696be07882676a628/PyVCF-0.2.1.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "c84b7f796cd95152894335f3cd090870", "sha256": "59ce14a66a7516fe28fb16f649fe1898908c347ff282a6b8b9e800a0de1660b2"}, "downloads": -1, "filename": "PyVCF-0.3.0.tar.gz", "has_sig": false, "md5_digest": "c84b7f796cd95152894335f3cd090870", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13043, "upload_time": "2012-02-08T11:06:07", "upload_time_iso_8601": "2012-02-08T11:06:07.817121Z", "url": "https://files.pythonhosted.org/packages/a0/d0/25c1eb963b59b73379b40eff503b1fdcaf753b5e4fbe02b0241f5063f3ec/PyVCF-0.3.0.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "165224e91a38f5a6c0fa3d63b8258b58", "sha256": "a3d17c0264b015f7d986adb838d528c4dc7596b5329b5f7570feed7174f3801f"}, "downloads": -1, "filename": "PyVCF-0.4.0.tar.gz", "has_sig": false, "md5_digest": "165224e91a38f5a6c0fa3d63b8258b58", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17187, "upload_time": "2012-03-09T15:10:01", "upload_time_iso_8601": "2012-03-09T15:10:01.056876Z", "url": "https://files.pythonhosted.org/packages/fb/f0/12e236fee823a08eb8ce20d8137baef9a878bf88bd1fa1548662a6ec7ce2/PyVCF-0.4.0.tar.gz", "yanked": false}], "0.4.1": [{"comment_text": "", "digests": {"md5": "48cb5f4c9821d7e573f0377ae5d1c7b2", "sha256": "32c46203007cb17de678252de08ed321b99d3afdfefde3a114885294b532c227"}, "downloads": -1, "filename": "PyVCF-0.4.1.tar.gz", "has_sig": false, "md5_digest": "48cb5f4c9821d7e573f0377ae5d1c7b2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17310, "upload_time": "2012-03-14T14:26:39", "upload_time_iso_8601": "2012-03-14T14:26:39.502349Z", "url": "https://files.pythonhosted.org/packages/0c/bb/e79367aa17c2e1621cec8f236a7ca945dbc57c5c24fc1aa276a0b789acbe/PyVCF-0.4.1.tar.gz", "yanked": false}], "0.4.2": [{"comment_text": "", "digests": {"md5": "95c986be7653b466c9f03c8faefd398f", "sha256": "c0df7160519381abbf72e02265d540d09850ed5fb467c88c7d6214059966ac7c"}, "downloads": -1, "filename": "PyVCF-0.4.2.tar.gz", "has_sig": false, "md5_digest": "95c986be7653b466c9f03c8faefd398f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17288, "upload_time": "2012-03-14T14:37:37", "upload_time_iso_8601": "2012-03-14T14:37:37.846825Z", "url": "https://files.pythonhosted.org/packages/8c/58/bb35d3ec314dc948bba40b0c4d30ef2647bc785369139327bec6c0c0f33f/PyVCF-0.4.2.tar.gz", "yanked": false}], "0.4.3": [{"comment_text": "", "digests": {"md5": "b08d0d4f4054029a78a9a75c1b8fdb20", "sha256": "d711fd81ddc0cdc91552cca74e98ba00f10d48ebf912b84218caa1b73029ae20"}, "downloads": -1, "filename": "PyVCF-0.4.3.tar.gz", "has_sig": false, "md5_digest": "b08d0d4f4054029a78a9a75c1b8fdb20", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17290, "upload_time": "2012-04-04T01:09:35", "upload_time_iso_8601": "2012-04-04T01:09:35.688085Z", "url": "https://files.pythonhosted.org/packages/a2/48/96cec034b31c55c84deaa7d9e605fd6eb192f1f8890af6196dd6591e3c34/PyVCF-0.4.3.tar.gz", "yanked": false}], "0.4.4": [{"comment_text": "", "digests": {"md5": "d2930567613d6e1bcd81c94a4cb9898d", "sha256": "4576d8a46958fc51a0c100ee0c8aa768e6d8a7fb84706a97a1fbdebd97f49e70"}, "downloads": -1, "filename": "PyVCF-0.4.4.tar.gz", "has_sig": false, "md5_digest": "d2930567613d6e1bcd81c94a4cb9898d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19145, "upload_time": "2012-05-22T16:47:36", "upload_time_iso_8601": "2012-05-22T16:47:36.434331Z", "url": "https://files.pythonhosted.org/packages/e3/38/e1b52283c76ef5ef2fc4a5e005bfd308ff14be5483f09b2e5268bd06ae9d/PyVCF-0.4.4.tar.gz", "yanked": false}], "0.4.5": [{"comment_text": "", "digests": {"md5": "9122bdf9bbd8c503b8896fe29fa51a95", "sha256": "4c7367d3a55d7ba8c404241b12cbdf011b5fa7a95034a1c779489523292a2d47"}, "downloads": -1, "filename": "PyVCF-0.4.5.tar.gz", "has_sig": false, "md5_digest": "9122bdf9bbd8c503b8896fe29fa51a95", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19317, "upload_time": "2012-06-11T11:36:34", "upload_time_iso_8601": "2012-06-11T11:36:34.559751Z", "url": "https://files.pythonhosted.org/packages/8f/c4/e1c71b3e00d2c2a5149933558e088e3a42a27b94620f47f5b2cb861642a8/PyVCF-0.4.5.tar.gz", "yanked": false}], "0.4.6": [{"comment_text": "", "digests": {"md5": "f7921554d4543718dd142f69404e5330", "sha256": "6e41ba239b2644664bf4c64a2638ca4870afb144ff5891a1fd37ad2adad79e40"}, "downloads": -1, "filename": "PyVCF-0.4.6.tar.gz", "has_sig": false, "md5_digest": "f7921554d4543718dd142f69404e5330", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19233, "upload_time": "2012-06-12T10:47:19", "upload_time_iso_8601": "2012-06-12T10:47:19.101799Z", "url": "https://files.pythonhosted.org/packages/ca/25/bfe4a71b1f65d0bcd3e7353c26a35fce513bd8c0f5e1dfce9d42d2f37c27/PyVCF-0.4.6.tar.gz", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "4a23ffe94ae91e2906650fc9d4de5b10", "sha256": "51cc9ffea4f1e9ae2095d41abd371afe4581b4c7203094f7647e7a2a071e50c9"}, "downloads": -1, "filename": "PyVCF-0.5.0.tar.gz", "has_sig": false, "md5_digest": "4a23ffe94ae91e2906650fc9d4de5b10", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23741, "upload_time": "2012-06-27T10:38:08", "upload_time_iso_8601": "2012-06-27T10:38:08.922820Z", "url": "https://files.pythonhosted.org/packages/db/4c/b2c4f3f1eba4913dc531e0b5d27a1219f3edd767007f1a02f753207e1647/PyVCF-0.5.0.tar.gz", "yanked": false}], "0.6.0": [{"comment_text": "", "digests": {"md5": "b0a966bed43bb6371f3d652c01e4741e", "sha256": "d9ec3bbedb64fa35c2648a9c41fdefaedd3912ff597a436e073d27aeccf5de7c"}, "downloads": -1, "filename": "PyVCF-0.6.0.tar.gz", "has_sig": false, "md5_digest": "b0a966bed43bb6371f3d652c01e4741e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27103, "upload_time": "2012-07-03T12:11:03", "upload_time_iso_8601": "2012-07-03T12:11:03.488682Z", "url": "https://files.pythonhosted.org/packages/4e/ae/b43f6a7dca99957ebee1d0944213a6a1490595e04aa4ad95fb25c69dbcd9/PyVCF-0.6.0.tar.gz", "yanked": false}], "0.6.1": [{"comment_text": "", "digests": {"md5": "90612ab32907af518cf47fb4fa02b8ce", "sha256": "41e0369cc7852011f4fb277e2b5282439715d6edde2ee9cdde0e1262e78b2389"}, "downloads": -1, "filename": "PyVCF-0.6.1.tar.gz", "has_sig": false, "md5_digest": "90612ab32907af518cf47fb4fa02b8ce", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 26860, "upload_time": "2012-11-27T10:48:38", "upload_time_iso_8601": "2012-11-27T10:48:38.156882Z", "url": "https://files.pythonhosted.org/packages/6f/49/e46405959069b27ee605f7646e7ec7d5c220e981a11fa8a76f28bb5dee17/PyVCF-0.6.1.tar.gz", "yanked": false}], "0.6.2": [{"comment_text": "", "digests": {"md5": "c8d8546b7b4ecfa93bb07de99746a54e", "sha256": "aebd8dc67ea92d307976ae73ed0add8d9e1b6c7e09343decfa960e0e597f28b1"}, "downloads": -1, "filename": "PyVCF-0.6.2.tar.gz", "has_sig": false, "md5_digest": "c8d8546b7b4ecfa93bb07de99746a54e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 26970, "upload_time": "2012-12-06T21:08:32", "upload_time_iso_8601": "2012-12-06T21:08:32.925622Z", "url": "https://files.pythonhosted.org/packages/73/4b/2bbb1ee971de3d6b516ba4dc152027488fe6f15fc396620881750a9b51d0/PyVCF-0.6.2.tar.gz", "yanked": false}], "0.6.3": [{"comment_text": "", "digests": {"md5": "2d5c6efd92e0fcf1dd5c2aa49536af36", "sha256": "44b6f753472b2f9b2c5e3f08959d1f6532076fcf83223f3797256ac7b8ede60d"}, "downloads": -1, "filename": "PyVCF-0.6.3.tar.gz", "has_sig": false, "md5_digest": "2d5c6efd92e0fcf1dd5c2aa49536af36", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27311, "upload_time": "2013-01-16T11:41:23", "upload_time_iso_8601": "2013-01-16T11:41:23.528637Z", "url": "https://files.pythonhosted.org/packages/38/3a/a3b7a9b36cd2d8aedbe1335887c50441b942cb3e990def4b327f1ee21147/PyVCF-0.6.3.tar.gz", "yanked": false}], "0.6.4": [{"comment_text": "", "digests": {"md5": "fc9a0668076ebe45afdd8a0d74dc7711", "sha256": "10aef49ed2a4de7a64d51d92dd30441d350b24619f328d879cbd86611031b18a"}, "downloads": -1, "filename": "PyVCF-0.6.4.tar.gz", "has_sig": false, "md5_digest": "fc9a0668076ebe45afdd8a0d74dc7711", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29295, "upload_time": "2013-07-15T16:58:31", "upload_time_iso_8601": "2013-07-15T16:58:31.512336Z", "url": "https://files.pythonhosted.org/packages/30/db/fd30981c363499c9b51687b7d06e891937c3136073b5771b2e30c0453aae/PyVCF-0.6.4.tar.gz", "yanked": false}], "0.6.5": [{"comment_text": "", "digests": {"md5": "20c7739eb1184fdfb8b7304ea8b036d4", "sha256": "458b012fe69842acd49d87913f1eb068696c01b03aea7c04d6b8e14f13872c13"}, "downloads": -1, "filename": "PyVCF-0.6.5.tar.gz", "has_sig": false, "md5_digest": "20c7739eb1184fdfb8b7304ea8b036d4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30548, "upload_time": "2014-02-06T16:02:14", "upload_time_iso_8601": "2014-02-06T16:02:14.277698Z", "url": "https://files.pythonhosted.org/packages/10/a7/f97d71cf4b0a22a2adc55564b3dab6bf1a90ef6592ad2db0c5b8a58c5e0a/PyVCF-0.6.5.tar.gz", "yanked": false}], "0.6.6": [{"comment_text": "", "digests": {"md5": "551b49168a86b2ad3c9c2a6ca5790c2e", "sha256": "d0517b0ebd41a4064aa4cc6545617597d84ef7772c96713c170f39b68a997186"}, "downloads": -1, "filename": "PyVCF-0.6.6.tar.gz", "has_sig": false, "md5_digest": "551b49168a86b2ad3c9c2a6ca5790c2e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30596, "upload_time": "2014-02-10T10:55:27", "upload_time_iso_8601": "2014-02-10T10:55:27.118617Z", "url": "https://files.pythonhosted.org/packages/f7/b5/0c1763caa7502b71b43ef486211230fb6bfe30568b01594859150d5b2339/PyVCF-0.6.6.tar.gz", "yanked": false}], "0.6.7": [{"comment_text": "", "digests": {"md5": "51b57ce99e0c2f7be2a18d08d8f87734", "sha256": "998361f824f828f689e8e1043f795403c11e561d719cc85cdd17c3679fa9b4aa"}, "downloads": -1, "filename": "PyVCF-0.6.7.tar.gz", "has_sig": false, "md5_digest": "51b57ce99e0c2f7be2a18d08d8f87734", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 31403, "upload_time": "2014-02-21T10:17:31", "upload_time_iso_8601": "2014-02-21T10:17:31.471239Z", "url": "https://files.pythonhosted.org/packages/64/1b/7c393d0cd5b1de2bb025d6ef45f71a013258214ae3564ede54adbd74ad00/PyVCF-0.6.7.tar.gz", "yanked": false}], "0.6.8": [{"comment_text": "built for Linux-4.4.3-1-ARCH-x86_64-with-glibc2.3.4", "digests": {"md5": "4eeb9700b03d4ab234c58227fb5f0331", "sha256": "1b3c833dcf4cca830e8255e3ac0573d2e69f588f71f7a5efb2a92b45d7b70021"}, "downloads": -1, "filename": "PyVCF-0.6.8.linux-x86_64.tar.gz", "has_sig": false, "md5_digest": "4eeb9700b03d4ab234c58227fb5f0331", "packagetype": "bdist_dumb", "python_version": "3.5", "requires_python": null, "size": 1067874, "upload_time": "2016-03-18T16:19:25", "upload_time_iso_8601": "2016-03-18T16:19:25.664551Z", "url": "https://files.pythonhosted.org/packages/ca/d1/f1d394b0c2865d4c5d96856ffaa223b6013b3c1cbc74e0c2f2f4b34ea11f/PyVCF-0.6.8.linux-x86_64.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "3cc70aa59e62dab7b4a85bd5a9f2e714", "sha256": "e9d872513d179d229ab61da47a33f42726e9613784d1cb2bac3f8e2642f6f9d9"}, "downloads": -1, "filename": "PyVCF-0.6.8.tar.gz", "has_sig": false, "md5_digest": "3cc70aa59e62dab7b4a85bd5a9f2e714", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 34961, "upload_time": "2016-03-18T16:19:46", "upload_time_iso_8601": "2016-03-18T16:19:46.644249Z", "url": "https://files.pythonhosted.org/packages/20/b6/36bfb1760f6983788d916096193fc14c83cce512c7787c93380e09458c09/PyVCF-0.6.8.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "built for Linux-4.4.3-1-ARCH-x86_64-with-glibc2.3.4", "digests": {"md5": "4eeb9700b03d4ab234c58227fb5f0331", "sha256": "1b3c833dcf4cca830e8255e3ac0573d2e69f588f71f7a5efb2a92b45d7b70021"}, "downloads": -1, "filename": "PyVCF-0.6.8.linux-x86_64.tar.gz", "has_sig": false, "md5_digest": "4eeb9700b03d4ab234c58227fb5f0331", "packagetype": "bdist_dumb", "python_version": "3.5", "requires_python": null, "size": 1067874, "upload_time": "2016-03-18T16:19:25", "upload_time_iso_8601": "2016-03-18T16:19:25.664551Z", "url": "https://files.pythonhosted.org/packages/ca/d1/f1d394b0c2865d4c5d96856ffaa223b6013b3c1cbc74e0c2f2f4b34ea11f/PyVCF-0.6.8.linux-x86_64.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "3cc70aa59e62dab7b4a85bd5a9f2e714", "sha256": "e9d872513d179d229ab61da47a33f42726e9613784d1cb2bac3f8e2642f6f9d9"}, "downloads": -1, "filename": "PyVCF-0.6.8.tar.gz", "has_sig": false, "md5_digest": "3cc70aa59e62dab7b4a85bd5a9f2e714", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 34961, "upload_time": "2016-03-18T16:19:46", "upload_time_iso_8601": "2016-03-18T16:19:46.644249Z", "url": "https://files.pythonhosted.org/packages/20/b6/36bfb1760f6983788d916096193fc14c83cce512c7787c93380e09458c09/PyVCF-0.6.8.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:12:11 2020"}