{"info": {"author": "Christian Adam", "author_email": "kuchenrolle@googlemail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: Microsoft :: Windows", "Operating System :: POSIX", "Operating System :: Unix", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.1", "Programming Language :: Python :: 3.2", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Topic :: Utilities"], "description": "# redditquery\n\nAn offline information retrieval system for full-text search on reddit comments.\n\n\n## Getting Started\n\nOnce redditquery is set-up on your system (see Installation and Prerequisites), you can call the package from the command line like so (see Parameters):\n\n```shell\nuser@host:~ redditquery mode [-h] [-s [START]] [-e [END]] [-d [DIR]] [-n [NUM]]\n                   [-c [CORES]] [-m [MINFREQ]] [-p [PROGRESS]] [-f [FULLTEXT]]\n                   [-l [LEMMA]] [-a [ALL]]\n                   \n```\n\nAlterantively, you can use it from inside python to interact with it dynamically (see Examples).\n\n\n## Parameters\n\nredditquery's behaviour can be changed with various parameters. Specifying mode is obligatory:\n\n```\nmode:  1 Build Inverted Index (requires specifying -f and -l)\n       2 Query existing Inverted Index\n       3 Build Inverted Index and Query (requires specifying -f and -l)\n```\n\nIf the index is build, you will be required to specify the range of months to build the index on, by specifying the first and last month to be processed:\n\n```\n-s --start: first month to be downloaded as YYYY/MM\n-e --end:   last month to be downloaded as YYYY/MM\n```\n\nAll other parameters are optional, here is what they do and their defaults:\n\n```\n-d or --dir:      directory path to store data in (defaults to working dir)\n-c or --cores:    number of cores to use for downloading/decompressing monthly data (defaults to single-core)\n-m or --minfreq:  minimum frequeny to keep terms in index (defaults to 5)\n-n or --num:      number of results to show for each query (defaults to 10)\n-f or --fulltext: store/retrieve full text of reddit comments (defaults to only storing/retrieving comment ids)\n-a or --all:      return documents containing all query terms (defaults to documents containing any of the query terms)\n-l or --lemma:    lemmatize documents/queries\n-p or --progress: output progress information for download/processing (only single core, defaults to no progress shown)\n- h or --help:    show help file\n```\n\n\n## Examples\n\nBuild inverted index from reddit comments between december 2005 and march 2006 from the command line:\n\n```shell\nuser@host:~ redditquery 1 -s 2005/12 -e 2006/03\n```\n\nQuery inverted index that already exists in myDirectory with queries from myQueries.txt in the same directory:\n\n```shell\nuser@host:~ redditquery 2 -d path/to/myDirectory path/to/myDirectory/myQueries.txt\n```\n\nBuild and query the same index as above in one go from inside python:\n\n```python\n>>> import os\n>>> import sys\n>>> import pickle\n>>> from redditquery.database import DataBase\n>>> from redditquery.parse import Parser\n>>> from redditquery.index import InvertedIndex, QueryProcessor\n>>> from redditquery.reddit import RedditDownloader, DocumentGenerator\n\n>>> directory = \"myDirectory\"\n>>> queries = \"myDirectory/myQueries.txt\"\n>>> start = \"2005/12\"\n>>> end = \"2006/03\"\n>>> minimum_freq = 5\n>>> num_results = 10\n>>> \n>>> downloader = RedditDownloader(start = start, end = end, directory = directory, keep_compressed = False)\n>>> downloader.process_all_parallel()\n>>> \n>>> documents = DocumentGenerator(directory = os.path.join(directory, \"monthly_data\"), fulltext = False, lemmatize = False)\n>>> database = DataBase(database_file = os.path.join(directory,\"database.sql\"))\n>>> inverted_index = InvertedIndex(documents = documents, database = database, frequency_threshold = minimum_freq)\n>>> \n>>> processor = QueryProcessor(inverted_index = inverted_index, lemmatize = False)\n>>> with open(queries, \"r\") as queries:\n>>>     for query in queries:\n>>>     processor.query_index(query.strip(), num_results = num_results, fulltext = False, conjunctive = False)\n```\n\n### Prerequisites\n\nredditquery has two dependencies that are not part of the standard distribution, Pandas and Spacy. If you install this package using pip, the dependencies should be installed automatically. On Unix systems, you should also be able to install them separately using pip:\n\n```shell\nuser@host:~ pip install pandas\nuser@host:~ pip install spacy\n```\n\nAn alternative, especially for Windows users, is to use a conda distribution that should come shipped with pandas and add spacy like so and then install, still using pip:\n\n```shell\nuser@host:~ [source] activate <environment>\n(environment)user@host:~ conda install spacy\n(environment)user@host:~ pip install redditquery\n```\n\nLastly, you can clone the repository and use the setup.py to install the package manually:\n\n```shell\nuser@host:~ git clone https://github.com/kuchenrolle/redditquery.git\nuser@host:~ python setup.py install\n```\n\n\nIf you encounter any problems installing the dependencies, please consult the installation instructions for [Pandas](http://pandas.pydata.org/pandas-docs/stable/install.html) and [Spacy](https://spacy.io/docs/usage/).\n\n\n### Installation\n\nThis package is pip-installable:\n\n```shell\nuser@host:~ pip install redditquery\n```\n\nIf you're using conda, then first activate the target environment and then install. Alternatively, clone this repository to your local directory and install manually:\n\n```shell\nuser@host:~ git clone git@github.com:kuchenrolle/redditquery.git <path_to_destination_folder>\nuser@host:~ [source] activate <environment>\n(environment)user@host:~ python setup.py install\n```\n\n\n## Author\n\n**Christian Adam**\n\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE.txt](LICENSE.txt) file for details", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/kuchenrolle/redditquery", "keywords": "reddit", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "redditquery", "package_url": "https://pypi.org/project/redditquery/", "platform": "", "project_url": "https://pypi.org/project/redditquery/", "project_urls": {"Homepage": "https://github.com/kuchenrolle/redditquery"}, "release_url": "https://pypi.org/project/redditquery/0.1.1/", "requires_dist": null, "requires_python": "", "summary": "An offline information retrieval system for full-text search on reddit comments.", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            # redditquery<br><br>An offline information retrieval system for full-text search on reddit comments.<br><br><br>## Getting Started<br><br>Once redditquery is set-up on your system (see Installation and Prerequisites), you can call the package from the command line like so (see Parameters):<br><br>```shell<br>user@host:~ redditquery mode [-h] [-s [START]] [-e [END]] [-d [DIR]] [-n [NUM]]<br>                   [-c [CORES]] [-m [MINFREQ]] [-p [PROGRESS]] [-f [FULLTEXT]]<br>                   [-l [LEMMA]] [-a [ALL]]<br>                   <br>```<br><br>Alterantively, you can use it from inside python to interact with it dynamically (see Examples).<br><br><br>## Parameters<br><br>redditquery's behaviour can be changed with various parameters. Specifying mode is obligatory:<br><br>```<br>mode:  1 Build Inverted Index (requires specifying -f and -l)<br>       2 Query existing Inverted Index<br>       3 Build Inverted Index and Query (requires specifying -f and -l)<br>```<br><br>If the index is build, you will be required to specify the range of months to build the index on, by specifying the first and last month to be processed:<br><br>```<br>-s --start: first month to be downloaded as YYYY/MM<br>-e --end:   last month to be downloaded as YYYY/MM<br>```<br><br>All other parameters are optional, here is what they do and their defaults:<br><br>```<br>-d or --dir:      directory path to store data in (defaults to working dir)<br>-c or --cores:    number of cores to use for downloading/decompressing monthly data (defaults to single-core)<br>-m or --minfreq:  minimum frequeny to keep terms in index (defaults to 5)<br>-n or --num:      number of results to show for each query (defaults to 10)<br>-f or --fulltext: store/retrieve full text of reddit comments (defaults to only storing/retrieving comment ids)<br>-a or --all:      return documents containing all query terms (defaults to documents containing any of the query terms)<br>-l or --lemma:    lemmatize documents/queries<br>-p or --progress: output progress information for download/processing (only single core, defaults to no progress shown)<br>- h or --help:    show help file<br>```<br><br><br>## Examples<br><br>Build inverted index from reddit comments between december 2005 and march 2006 from the command line:<br><br>```shell<br>user@host:~ redditquery 1 -s 2005/12 -e 2006/03<br>```<br><br>Query inverted index that already exists in myDirectory with queries from myQueries.txt in the same directory:<br><br>```shell<br>user@host:~ redditquery 2 -d path/to/myDirectory path/to/myDirectory/myQueries.txt<br>```<br><br>Build and query the same index as above in one go from inside python:<br><br>```python<br>&gt;&gt;&gt; import os<br>&gt;&gt;&gt; import sys<br>&gt;&gt;&gt; import pickle<br>&gt;&gt;&gt; from redditquery.database import DataBase<br>&gt;&gt;&gt; from redditquery.parse import Parser<br>&gt;&gt;&gt; from redditquery.index import InvertedIndex, QueryProcessor<br>&gt;&gt;&gt; from redditquery.reddit import RedditDownloader, DocumentGenerator<br><br>&gt;&gt;&gt; directory = \"myDirectory\"<br>&gt;&gt;&gt; queries = \"myDirectory/myQueries.txt\"<br>&gt;&gt;&gt; start = \"2005/12\"<br>&gt;&gt;&gt; end = \"2006/03\"<br>&gt;&gt;&gt; minimum_freq = 5<br>&gt;&gt;&gt; num_results = 10<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; downloader = RedditDownloader(start = start, end = end, directory = directory, keep_compressed = False)<br>&gt;&gt;&gt; downloader.process_all_parallel()<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; documents = DocumentGenerator(directory = os.path.join(directory, \"monthly_data\"), fulltext = False, lemmatize = False)<br>&gt;&gt;&gt; database = DataBase(database_file = os.path.join(directory,\"database.sql\"))<br>&gt;&gt;&gt; inverted_index = InvertedIndex(documents = documents, database = database, frequency_threshold = minimum_freq)<br>&gt;&gt;&gt; <br>&gt;&gt;&gt; processor = QueryProcessor(inverted_index = inverted_index, lemmatize = False)<br>&gt;&gt;&gt; with open(queries, \"r\") as queries:<br>&gt;&gt;&gt;     for query in queries:<br>&gt;&gt;&gt;     processor.query_index(query.strip(), num_results = num_results, fulltext = False, conjunctive = False)<br>```<br><br>### Prerequisites<br><br>redditquery has two dependencies that are not part of the standard distribution, Pandas and Spacy. If you install this package using pip, the dependencies should be installed automatically. On Unix systems, you should also be able to install them separately using pip:<br><br>```shell<br>user@host:~ pip install pandas<br>user@host:~ pip install spacy<br>```<br><br>An alternative, especially for Windows users, is to use a conda distribution that should come shipped with pandas and add spacy like so and then install, still using pip:<br><br>```shell<br>user@host:~ [source] activate &lt;environment&gt;<br>(environment)user@host:~ conda install spacy<br>(environment)user@host:~ pip install redditquery<br>```<br><br>Lastly, you can clone the repository and use the setup.py to install the package manually:<br><br>```shell<br>user@host:~ git clone https://github.com/kuchenrolle/redditquery.git<br>user@host:~ python setup.py install<br>```<br><br><br>If you encounter any problems installing the dependencies, please consult the installation instructions for [Pandas](http://pandas.pydata.org/pandas-docs/stable/install.html) and [Spacy](https://spacy.io/docs/usage/).<br><br><br>### Installation<br><br>This package is pip-installable:<br><br>```shell<br>user@host:~ pip install redditquery<br>```<br><br>If you're using conda, then first activate the target environment and then install. Alternatively, clone this repository to your local directory and install manually:<br><br>```shell<br>user@host:~ git clone git@github.com:kuchenrolle/redditquery.git &lt;path_to_destination_folder&gt;<br>user@host:~ [source] activate &lt;environment&gt;<br>(environment)user@host:~ python setup.py install<br>```<br><br><br>## Author<br><br>**Christian Adam**<br><br><br>## License<br><br>This project is licensed under the MIT License - see the [LICENSE.txt](LICENSE.txt) file for details\n          </div>"}, "last_serial": 2764392, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "adc5f4227bead4a0b3be3e2f10a925ba", "sha256": "9f41afb4cd1ff27fbb0c4e347273217e2ff0ea33d334cadfd0307ac188894a79"}, "downloads": -1, "filename": "redditquery-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "adc5f4227bead4a0b3be3e2f10a925ba", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 16702, "upload_time": "2017-04-07T16:52:48", "upload_time_iso_8601": "2017-04-07T16:52:48.063022Z", "url": "https://files.pythonhosted.org/packages/a2/0e/9b5284be164905d3027a1352043bba1cb197c00359ba1c845d9d56432fb7/redditquery-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "106f11801f9deb85d78a5199b6a9ae45", "sha256": "ad2a13b28eef3f2ced751d8e7c39b3b137374cb8b71740581cd00a1f891c2bca"}, "downloads": -1, "filename": "redditquery-0.1.0.tar.gz", "has_sig": false, "md5_digest": "106f11801f9deb85d78a5199b6a9ae45", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14400, "upload_time": "2017-04-07T16:52:50", "upload_time_iso_8601": "2017-04-07T16:52:50.332981Z", "url": "https://files.pythonhosted.org/packages/d3/91/6c371239a8685c4872f0df4ad62e19e8419f6de2e309e47b05640b5a61e2/redditquery-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "542b63c837a417cd748110d065101060", "sha256": "e71085c90175e3d91e33afd79ca4f0c30ac06fb30a9793234b10c91f59e03894"}, "downloads": -1, "filename": "redditquery-0.1.1.tar.gz", "has_sig": false, "md5_digest": "542b63c837a417cd748110d065101060", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14865, "upload_time": "2017-04-09T19:21:11", "upload_time_iso_8601": "2017-04-09T19:21:11.108970Z", "url": "https://files.pythonhosted.org/packages/92/93/5652cfee546c0d33015d5f60f63e162b50e05b96f10d336a82ee8af37d4a/redditquery-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "542b63c837a417cd748110d065101060", "sha256": "e71085c90175e3d91e33afd79ca4f0c30ac06fb30a9793234b10c91f59e03894"}, "downloads": -1, "filename": "redditquery-0.1.1.tar.gz", "has_sig": false, "md5_digest": "542b63c837a417cd748110d065101060", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14865, "upload_time": "2017-04-09T19:21:11", "upload_time_iso_8601": "2017-04-09T19:21:11.108970Z", "url": "https://files.pythonhosted.org/packages/92/93/5652cfee546c0d33015d5f60f63e162b50e05b96f10d336a82ee8af37d4a/redditquery-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:05:57 2020"}