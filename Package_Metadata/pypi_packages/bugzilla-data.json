{"info": {"author": "John Dupuy", "author_email": "jdupuy@redhat.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: Console", "Intended Audience :: Developers", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.7", "Topic :: Utilities"], "description": "Bugzilla - Data\n===============\nA tool for visualizing Bugzilla data via component, product, assginee, qa_contact, etc.\nRight now, this tool generates bar charts of Bugzilla bugs.\nThe charts can be sorted according to e.g. bug component, assignee, qa_contact, etc.\nThe charts will automatically be sorted from highest to lowest. This is the image generated\nfrom the example query yaml (`conf/query.yaml`).\n\n![Alt text](images/example1.png?raw=true)\n\nGetting started\n---------------\n\nThe basics of using this tool is as simple as,\n1) Creating and activating a python 3 virtual environment\n2) `pip install -e .`\n3) Running `python scripts/make_plot.py`\n\nThe allowed parameters to `make_plot.py`  are:\n```\nusage: make_plot.py [-h] [-q QUERY] [-p PLOT] [-u URL] [--save] [--output]\n                  [--login] [--credential_file CREDENTIAL_FILE]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -q QUERY, --query QUERY\n                        Path to query yaml file (default: conf/query.yaml)\n  -p PLOT, --plot PLOT  Plot bar chart for BZs found via <query> sorted\n                        according to one of: [component, qa_contact,\n                        assigned_to, creator] (default: component)\n  -u URL, --url URL     Bugzilla URL (default: bugzilla.redhat.com)\n  --save                Save the plot (default: False)\n  --output              Output bugzilla data from query to stdout (default:\n                        False)\n  --login               Login to Bugzilla before making query. Required to use\n                        e.g. savedsearch and to get some hidden fields.\n                        (default: False)\n  --credential_file CREDENTIAL_FILE\n                        Path to credential yaml file (default:\n                        conf/credentials.yaml)\n\n```\nTo effectively use this tool, you must define meaningful queries in `conf/query.yaml`.\n\nYou can define\n any number of queries within you query file. Each simply must start with `- query:`.\n\n\n A simple example query which fetches `NEW` BZ's for Red Hat Cloudforms is provided,\n but these can be much more complicated. For example, you can fetch according to specific users\n who created/reported the BZ via\n ```yaml,\n - query:\n    product:\n        - Red Hat CloudForms Management Engine\n    status:\n        - ON_QA\n        - NEW\n        - POST\n        - CLOSED\n    include_fields:\n        - id\n        - summary\n        - component\n        - description\n        - status\n        - qa_contact\n        - creator\n        - assigned_to\n        - version\n    reporter:\n        - <email1>\n        - <email2>\n        - <email3>\n ```\n You can also search by `qa_contact` or `assigned_to` and then generate plots according to\n these users. More information about the queries can be found at:\n https://github.com/python-bugzilla/python-bugzilla,\nas this is the API that is used for bugzilla queries. Note that the `include_fields` list is\nnot necessary, and can be commented out if you run into attribute errors in the program call.\nIt can speed up your query if you're dealing with a large number of BZs, since `python-bugzilla`\nwill only fetch those specific fields.\n\n**Another neat feature** of `python-bugzilla` is the ability to login to Bugzilla and use\na search saved under your login rather than formulating your own query. To do so, create a\ncredentials file in `conf/credentials.yaml`, with the following content:\n```yaml,\n- login_info:\n    username: <your_bz_username>\n    password: <your_bz_password>\n```\nFor the query, you can have the following in `conf/query.yaml`:\n```yaml,\n- query:\n    savedsearch: My Bugs # just an example, can be the name of any search defined in your Bugzilla\n```\nThen run the script passing the `--login` so the script knows that a login is required.\n```\npython scripts/make_plot.py --login\n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/john-dupuy/bugzilla-data", "keywords": "bugzilla,plotting,data", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "bugzilla-data", "package_url": "https://pypi.org/project/bugzilla-data/", "platform": "", "project_url": "https://pypi.org/project/bugzilla-data/", "project_urls": {"Homepage": "https://github.com/john-dupuy/bugzilla-data"}, "release_url": "https://pypi.org/project/bugzilla-data/0.0.5/", "requires_dist": null, "requires_python": "", "summary": "Tools for plotting and gathering information about Bugzillas", "version": "0.0.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Bugzilla - Data</h1>\n<p>A tool for visualizing Bugzilla data via component, product, assginee, qa_contact, etc.\nRight now, this tool generates bar charts of Bugzilla bugs.\nThe charts can be sorted according to e.g. bug component, assignee, qa_contact, etc.\nThe charts will automatically be sorted from highest to lowest. This is the image generated\nfrom the example query yaml (<code>conf/query.yaml</code>).</p>\n<p><img alt=\"Alt text\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9d79a9492ebc4075009f3a907f828c038309bd0c/696d616765732f6578616d706c65312e706e673f7261773d74727565\"></p>\n<h2>Getting started</h2>\n<p>The basics of using this tool is as simple as,</p>\n<ol>\n<li>Creating and activating a python 3 virtual environment</li>\n<li><code>pip install -e .</code></li>\n<li>Running <code>python scripts/make_plot.py</code></li>\n</ol>\n<p>The allowed parameters to <code>make_plot.py</code>  are:</p>\n<pre><code>usage: make_plot.py [-h] [-q QUERY] [-p PLOT] [-u URL] [--save] [--output]\n                  [--login] [--credential_file CREDENTIAL_FILE]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -q QUERY, --query QUERY\n                        Path to query yaml file (default: conf/query.yaml)\n  -p PLOT, --plot PLOT  Plot bar chart for BZs found via &lt;query&gt; sorted\n                        according to one of: [component, qa_contact,\n                        assigned_to, creator] (default: component)\n  -u URL, --url URL     Bugzilla URL (default: bugzilla.redhat.com)\n  --save                Save the plot (default: False)\n  --output              Output bugzilla data from query to stdout (default:\n                        False)\n  --login               Login to Bugzilla before making query. Required to use\n                        e.g. savedsearch and to get some hidden fields.\n                        (default: False)\n  --credential_file CREDENTIAL_FILE\n                        Path to credential yaml file (default:\n                        conf/credentials.yaml)\n\n</code></pre>\n<p>To effectively use this tool, you must define meaningful queries in <code>conf/query.yaml</code>.</p>\n<p>You can define\nany number of queries within you query file. Each simply must start with <code>- query:</code>.</p>\n<p>A simple example query which fetches <code>NEW</code> BZ's for Red Hat Cloudforms is provided,\nbut these can be much more complicated. For example, you can fetch according to specific users\nwho created/reported the BZ via</p>\n<pre>- query:\n   product:\n       - Red Hat CloudForms Management Engine\n   status:\n       - ON_QA\n       - NEW\n       - POST\n       - CLOSED\n   include_fields:\n       - id\n       - summary\n       - component\n       - description\n       - status\n       - qa_contact\n       - creator\n       - assigned_to\n       - version\n   reporter:\n       - &lt;email1&gt;\n       - &lt;email2&gt;\n       - &lt;email3&gt;\n</pre>\n<p>You can also search by <code>qa_contact</code> or <code>assigned_to</code> and then generate plots according to\nthese users. More information about the queries can be found at:\n<a href=\"https://github.com/python-bugzilla/python-bugzilla\" rel=\"nofollow\">https://github.com/python-bugzilla/python-bugzilla</a>,\nas this is the API that is used for bugzilla queries. Note that the <code>include_fields</code> list is\nnot necessary, and can be commented out if you run into attribute errors in the program call.\nIt can speed up your query if you're dealing with a large number of BZs, since <code>python-bugzilla</code>\nwill only fetch those specific fields.</p>\n<p><strong>Another neat feature</strong> of <code>python-bugzilla</code> is the ability to login to Bugzilla and use\na search saved under your login rather than formulating your own query. To do so, create a\ncredentials file in <code>conf/credentials.yaml</code>, with the following content:</p>\n<pre>- login_info:\n    username: &lt;your_bz_username&gt;\n    password: &lt;your_bz_password&gt;\n</pre>\n<p>For the query, you can have the following in <code>conf/query.yaml</code>:</p>\n<pre>- query:\n    savedsearch: My Bugs # just an example, can be the name of any search defined in your Bugzilla\n</pre>\n<p>Then run the script passing the <code>--login</code> so the script knows that a login is required.</p>\n<pre><code>python scripts/make_plot.py --login\n</code></pre>\n\n          </div>"}, "last_serial": 5961547, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "74553ed5a4b3d3a4299c3b60ca7d3995", "sha256": "8b27a6631306fd5408616844db503cd8e97d7768502c4e66777b8560d5acc210"}, "downloads": -1, "filename": "bugzilla-data-0.0.1.tar.gz", "has_sig": false, "md5_digest": "74553ed5a4b3d3a4299c3b60ca7d3995", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 46542, "upload_time": "2019-10-07T13:13:12", "upload_time_iso_8601": "2019-10-07T13:13:12.241167Z", "url": "https://files.pythonhosted.org/packages/74/0a/1e775371a930ea3ab68e4cd4ab015acb095364f8c16a4050e7bb96693b79/bugzilla-data-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "dd5a365d50e0b2d51d3f6a0a215d9e1f", "sha256": "5da9943b25404c3a0b47d657d6458ae1ec31483882fd579532283dc18f3555d9"}, "downloads": -1, "filename": "bugzilla-data-0.0.2.tar.gz", "has_sig": false, "md5_digest": "dd5a365d50e0b2d51d3f6a0a215d9e1f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 46492, "upload_time": "2019-10-07T15:20:48", "upload_time_iso_8601": "2019-10-07T15:20:48.986799Z", "url": "https://files.pythonhosted.org/packages/7c/ab/4247024dd67b5d8a6d8795d669b6cf0615327e01ff622636d4cecc61a7d6/bugzilla-data-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "56f5979917581303bd69ea1e48435207", "sha256": "86b3c1956919a4f37bc92d11c834cc0ba0c5905dbbbdcd00ab08dc6b8a9ebdc7"}, "downloads": -1, "filename": "bugzilla-data-0.0.3.tar.gz", "has_sig": false, "md5_digest": "56f5979917581303bd69ea1e48435207", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 46917, "upload_time": "2019-10-08T18:37:19", "upload_time_iso_8601": "2019-10-08T18:37:19.226366Z", "url": "https://files.pythonhosted.org/packages/52/80/f08f3f453bf6fb8a3652b002275c225ecfcb92a536fb8e5a4db6dd06c180/bugzilla-data-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "edde39fdb0e838cded56325c5d424cbd", "sha256": "79c3270c700ce4c12075f31890ba0d056adb25ea73d6eac0ef2c456c57daf5ab"}, "downloads": -1, "filename": "bugzilla-data-0.0.4.tar.gz", "has_sig": false, "md5_digest": "edde39fdb0e838cded56325c5d424cbd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 46991, "upload_time": "2019-10-10T18:23:37", "upload_time_iso_8601": "2019-10-10T18:23:37.250871Z", "url": "https://files.pythonhosted.org/packages/b2/90/c5385449b3b2aa1f4fe7ac11a47a72a5baf338c97dd5271ffffd10a8ffe4/bugzilla-data-0.0.4.tar.gz", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "5c6036f8f123e9f41b265410e7654762", "sha256": "2e5b8c0ea9d16d828372672e5fdd1b1a740a8b004eb191ae42fb4f66b255df83"}, "downloads": -1, "filename": "bugzilla-data-0.0.5.tar.gz", "has_sig": false, "md5_digest": "5c6036f8f123e9f41b265410e7654762", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 47008, "upload_time": "2019-10-11T18:32:21", "upload_time_iso_8601": "2019-10-11T18:32:21.031273Z", "url": "https://files.pythonhosted.org/packages/a4/b7/9c07214d587ec7a55818c04352e2d1bd2c5341d94c766628026ec44eea82/bugzilla-data-0.0.5.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "5c6036f8f123e9f41b265410e7654762", "sha256": "2e5b8c0ea9d16d828372672e5fdd1b1a740a8b004eb191ae42fb4f66b255df83"}, "downloads": -1, "filename": "bugzilla-data-0.0.5.tar.gz", "has_sig": false, "md5_digest": "5c6036f8f123e9f41b265410e7654762", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 47008, "upload_time": "2019-10-11T18:32:21", "upload_time_iso_8601": "2019-10-11T18:32:21.031273Z", "url": "https://files.pythonhosted.org/packages/a4/b7/9c07214d587ec7a55818c04352e2d1bd2c5341d94c766628026ec44eea82/bugzilla-data-0.0.5.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:36:05 2020"}