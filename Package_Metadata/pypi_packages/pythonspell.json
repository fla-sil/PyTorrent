{"info": {"author": "Aidan Smith", "author_email": "100023755@mvla.net", "bugtrack_url": null, "classifiers": [], "description": "pyspell\n=======\n\nDescription\n-----------\n\nThis package is intended as a lightweight, efficient, and customizable\nspelling corrector. By using the Damerau-Levenshtein distance and a\ncached BK tree, the code narrows down possible typos and ranks them\nbased on their ordering in an dictionary.txt file.\n\nUsage\n-----\n\nChecker\n~~~~~~~\n\nThe Checker class is the root of all of the spellchecking, and should be\nused under most circumstances. To load the cached BK tree (or generate a\nnew one, should the need present itself), call the load method. It takes\ntwo paramters, a wordlist and a pickling location (defaults to\nbktree.pickle in the root directory). If there is no cache present at\nthe given location, it will generate one. ### Methods:\n\n.. code:: python\n\n    Checker.repickle()\n\nThis should be called following dictionary modifications not made with\nthe inbuilt updateDict function. The tree must be recalculated on\nchange.\n\n.. code:: python\n\n    Checker.load()\n\nLoads the BK tree and sets up the dictionary.\n\n.. code:: python\n\n    Checker.check(word,returnNum,returnType,repeat,forcePrecision)\n\nChecks for a word or list of words. word:list or str returnNum: The\nnumber of arguments to return; 0 is all of the items found within the\ntolerance of the tree. 1 will return only the best element of the list,\nas defined by the order of the given dictionary. returnType: \"pairings\",\n\"rankings\", or \"words\" (default) - Pairings returns an array of each\nitem and its ranking in the dictionary (in tuple form). I.e:\n[(cow,16),(frog,11)] - Rankings returns an array of *just the rankings*\nbased on the dictionary. - Words returns words in respect to.\n\nrepeat: This is primarily a speed saving option. In situations involving\nextremely heavy programs or dictionaries, this should be set to False.\nIt allows the tolerance to increase recursively until at least one match\nis found for unknown words. forcePrecision: A manual way to change the\ntolerance. The internal mechanism is almost always sufficient, and this\nshould seldom be changed from its default, False. This method returns a\nString, an Array, or None.\n\n.. code:: python\n\n    Checker.updateDict(word,priority,pickle)\n\nInserts a word,dictionary, or list into a chosen point in the wordlist.\nWord can be a dictionary with the keys of the intended words and each\nkey have a location attribute for where to insert it into the list.\nLists will be inserted in reverse chronological order for priority.\nStrings are simply inserted. Priority defines where to put an item in\nthe dictionary, with -1 (default) being at the very end. (low priority)\nPickle defaults to true, and repickles it after the word(s) is added.\nThis should be set to false if you intend to call repickle later, after\nfurther modifications.\n\nExample of base code:\n\n.. code:: python\n\n    from pyspell.checker import *\n    check=Checker(\"./pyspell/data/wordlist.txt\",\"./pyspell/data/bktree.pickle\"); \n    check.load(); \n    print(check.check(\"grat\")) # --> great \n    print(check.check(\"diiffficult\"))  # ---> difficult\n\n(example.py)", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/AidanJSmith", "keywords": "spelling corrector autocorrect", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "pythonspell", "package_url": "https://pypi.org/project/pythonspell/", "platform": "", "project_url": "https://pypi.org/project/pythonspell/", "project_urls": {"Homepage": "https://github.com/AidanJSmith"}, "release_url": "https://pypi.org/project/pythonspell/1.0/", "requires_dist": null, "requires_python": "", "summary": "A simple python spellchecker built on BK Trees and Damerau Levenshtein distance", "version": "1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"description\">\n<h2>Description</h2>\n<p>This package is intended as a lightweight, efficient, and customizable\nspelling corrector. By using the Damerau-Levenshtein distance and a\ncached BK tree, the code narrows down possible typos and ranks them\nbased on their ordering in an dictionary.txt file.</p>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<h2 id=\"checker\"><span class=\"section-subtitle\">Checker</span></h2>\n<p>The Checker class is the root of all of the spellchecking, and should be\nused under most circumstances. To load the cached BK tree (or generate a\nnew one, should the need present itself), call the load method. It takes\ntwo paramters, a wordlist and a pickling location (defaults to\nbktree.pickle in the root directory). If there is no cache present at\nthe given location, it will generate one. ### Methods:</p>\n<pre><span class=\"n\">Checker</span><span class=\"o\">.</span><span class=\"n\">repickle</span><span class=\"p\">()</span>\n</pre>\n<p>This should be called following dictionary modifications not made with\nthe inbuilt updateDict function. The tree must be recalculated on\nchange.</p>\n<pre><span class=\"n\">Checker</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">()</span>\n</pre>\n<p>Loads the BK tree and sets up the dictionary.</p>\n<pre><span class=\"n\">Checker</span><span class=\"o\">.</span><span class=\"n\">check</span><span class=\"p\">(</span><span class=\"n\">word</span><span class=\"p\">,</span><span class=\"n\">returnNum</span><span class=\"p\">,</span><span class=\"n\">returnType</span><span class=\"p\">,</span><span class=\"n\">repeat</span><span class=\"p\">,</span><span class=\"n\">forcePrecision</span><span class=\"p\">)</span>\n</pre>\n<p>Checks for a word or list of words. word:list or str returnNum: The\nnumber of arguments to return; 0 is all of the items found within the\ntolerance of the tree. 1 will return only the best element of the list,\nas defined by the order of the given dictionary. returnType: \u201cpairings\u201d,\n\u201crankings\u201d, or \u201cwords\u201d (default) - Pairings returns an array of each\nitem and its ranking in the dictionary (in tuple form). I.e:\n[(cow,16),(frog,11)] - Rankings returns an array of <em>just the rankings</em>\nbased on the dictionary. - Words returns words in respect to.</p>\n<p>repeat: This is primarily a speed saving option. In situations involving\nextremely heavy programs or dictionaries, this should be set to False.\nIt allows the tolerance to increase recursively until at least one match\nis found for unknown words. forcePrecision: A manual way to change the\ntolerance. The internal mechanism is almost always sufficient, and this\nshould seldom be changed from its default, False. This method returns a\nString, an Array, or None.</p>\n<pre><span class=\"n\">Checker</span><span class=\"o\">.</span><span class=\"n\">updateDict</span><span class=\"p\">(</span><span class=\"n\">word</span><span class=\"p\">,</span><span class=\"n\">priority</span><span class=\"p\">,</span><span class=\"n\">pickle</span><span class=\"p\">)</span>\n</pre>\n<p>Inserts a word,dictionary, or list into a chosen point in the wordlist.\nWord can be a dictionary with the keys of the intended words and each\nkey have a location attribute for where to insert it into the list.\nLists will be inserted in reverse chronological order for priority.\nStrings are simply inserted. Priority defines where to put an item in\nthe dictionary, with -1 (default) being at the very end. (low priority)\nPickle defaults to true, and repickles it after the word(s) is added.\nThis should be set to false if you intend to call repickle later, after\nfurther modifications.</p>\n<p>Example of base code:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pyspell.checker</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"n\">check</span><span class=\"o\">=</span><span class=\"n\">Checker</span><span class=\"p\">(</span><span class=\"s2\">\"./pyspell/data/wordlist.txt\"</span><span class=\"p\">,</span><span class=\"s2\">\"./pyspell/data/bktree.pickle\"</span><span class=\"p\">);</span>\n<span class=\"n\">check</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">();</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">check</span><span class=\"o\">.</span><span class=\"n\">check</span><span class=\"p\">(</span><span class=\"s2\">\"grat\"</span><span class=\"p\">))</span> <span class=\"c1\"># --&gt; great</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">check</span><span class=\"o\">.</span><span class=\"n\">check</span><span class=\"p\">(</span><span class=\"s2\">\"diiffficult\"</span><span class=\"p\">))</span>  <span class=\"c1\"># ---&gt; difficult</span>\n</pre>\n<p>(example.py)</p>\n</div>\n\n          </div>"}, "last_serial": 6981096, "releases": {"0.6": [{"comment_text": "", "digests": {"md5": "44ece5886b8ee57599a528f6bfffa586", "sha256": "d32840a09a1b5a7a77dfaf934d9381fbc9c46e26b73da8ecb248534c7595c4aa"}, "downloads": -1, "filename": "pythonspell-0.6.tar.gz", "has_sig": false, "md5_digest": "44ece5886b8ee57599a528f6bfffa586", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4811, "upload_time": "2020-04-08T20:49:59", "upload_time_iso_8601": "2020-04-08T20:49:59.130504Z", "url": "https://files.pythonhosted.org/packages/1d/2e/daa943b15a4cafac403605feaaaf44622d9ea0a9b53b54b307df6e636fcb/pythonspell-0.6.tar.gz", "yanked": false}], "0.61": [{"comment_text": "", "digests": {"md5": "30f1cbbbea0b769883c6c5c485220dc9", "sha256": "85048972d7a64540f43504a63475c234ef2bb6c6ec4876b97cdbf80ca041085b"}, "downloads": -1, "filename": "pythonspell-0.61.tar.gz", "has_sig": false, "md5_digest": "30f1cbbbea0b769883c6c5c485220dc9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4842, "upload_time": "2020-04-08T20:52:49", "upload_time_iso_8601": "2020-04-08T20:52:49.063423Z", "url": "https://files.pythonhosted.org/packages/c6/ee/2bd844d33b6349776a522ad7276b384b4b0b57e407593baf291478027bca/pythonspell-0.61.tar.gz", "yanked": false}], "0.7": [{"comment_text": "", "digests": {"md5": "35492a959057b03954c9286bcaa83dd8", "sha256": "8859f4f11c77321513bd4b95e24541e904b75c9af3c85502f75ca50c08326b09"}, "downloads": -1, "filename": "pythonspell-0.7.tar.gz", "has_sig": false, "md5_digest": "35492a959057b03954c9286bcaa83dd8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5135, "upload_time": "2020-04-08T20:54:37", "upload_time_iso_8601": "2020-04-08T20:54:37.865299Z", "url": "https://files.pythonhosted.org/packages/57/36/6b97f0899e239919c24cf99bdf3af0960a4351891d6d92a273fdfb78c778/pythonspell-0.7.tar.gz", "yanked": false}], "1.0": [{"comment_text": "", "digests": {"md5": "7dc89db10d7d99f37aa0e5185fc66e73", "sha256": "62f34d31b92ea4a533ce1e8704c6dc2ef1a1ca4132fd6895164b2d0a50202b60"}, "downloads": -1, "filename": "pythonspell-1.0.tar.gz", "has_sig": false, "md5_digest": "7dc89db10d7d99f37aa0e5185fc66e73", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5127, "upload_time": "2020-04-08T21:00:08", "upload_time_iso_8601": "2020-04-08T21:00:08.304296Z", "url": "https://files.pythonhosted.org/packages/91/db/9b43e5d0e74b5d997814e2fe2fe86f31b0e1ddae867e4b3f1c6bf4ce2f3f/pythonspell-1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "7dc89db10d7d99f37aa0e5185fc66e73", "sha256": "62f34d31b92ea4a533ce1e8704c6dc2ef1a1ca4132fd6895164b2d0a50202b60"}, "downloads": -1, "filename": "pythonspell-1.0.tar.gz", "has_sig": false, "md5_digest": "7dc89db10d7d99f37aa0e5185fc66e73", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5127, "upload_time": "2020-04-08T21:00:08", "upload_time_iso_8601": "2020-04-08T21:00:08.304296Z", "url": "https://files.pythonhosted.org/packages/91/db/9b43e5d0e74b5d997814e2fe2fe86f31b0e1ddae867e4b3f1c6bf4ce2f3f/pythonspell-1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:15:15 2020"}