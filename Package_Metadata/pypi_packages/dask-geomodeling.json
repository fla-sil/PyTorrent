{"info": {"author": "Casper van der Wel", "author_email": "casper.vanderwel@nelen-schuurmans.nl", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python :: 3 :: Only", "Topic :: Scientific/Engineering :: GIS"], "description": "dask-geomodeling\n==========================================\n\n.. image:: https://readthedocs.org/projects/dask-geomodeling/badge/?version=latest\n     :target: https://dask-geomodeling.readthedocs.io/en/latest/?badge=latest\n\n.. image:: https://travis-ci.com/nens/dask-geomodeling.svg?branch=master\n    :target: https://travis-ci.com/nens/dask-geomodeling\n\n.. image:: https://ci.appveyor.com/api/projects/status/aopxohgl23llkeq8?svg=true\n    :target: https://ci.appveyor.com/project/reinout/dask-geomodeling\n\n.. image:: https://badge.fury.io/py/dask-geomodeling.svg\n    :target: https://badge.fury.io/py/dask-geomodeling\n\n.. image:: https://anaconda.org/conda-forge/dask-geomodeling/badges/version.svg\n    :target: https://anaconda.org/conda-forge/dask-geomodeling\n\nDask-geomodeling is a collection of classes that are to be stacked together to\ncreate configurations for on-the-fly operations on geographical maps. By\ngenerating `Dask <https://dask.pydata.org/>`_ compute graphs, these operation\nmay be parallelized and (intermediate) results may be cached.\n\nMultiple Block instances together make a view. Each Block has the ``get_data``\nmethod that fetches the data in one go, as well as a ``get_compute_graph``\nmethod that creates a graph to compute the data later.\n\n`Read the docs <https://dask-geomodeling.readthedocs.org/>`_ for further information.\n\n\nChangelog of dask-geomodeling\n===================================================\n\n\n2.2.7 (2020-04-30)\n------------------\n\n- Accept list and dict values in GeometryFileSink / to_file.\n\n- Fix bug in ParseTextColumn that added columns in duplicate when outputting\n  into the input column.\n\n\n2.2.6 (2020-04-28)\n------------------\n\n- Fixed bug in `FillNoData` block.\n\n- Fixed bug in `AggregateRasterAboveThreshold` (introduced in #37) (#44).\n\n\n2.2.4 (2020-03-25)\n------------------\n\n- Allow up to 1E-7 in the GeoTransform 'tilt' terms to account for possible\n  float32 imprecision.\n\n- Handle Nones in geometry.field_operations.Classify and ClassifyFromColumns.\n\n- Validate if labels are unique in geometry.field_operations.Classify and\n  ClassifyFromColumns.\n  \n  - Added raster.spatial.Place.\n\n\n2.2.3 (2020-02-28)\n------------------\n\n-  Fix AggregateRaster: it now returns NaN for no data pixels (#37)\n\n\n2.2.2 (2020-02-13)\n------------------\n\n- Added GeometryWKTSource.\n\n- Updated all docstrings.\n\n- Renamed the 'location' parameter of raster.misc.Step to 'value'.\n\n\n2.2.1 (2020-02-04)\n------------------\n\n- Suppressed \"invalid value encountered in greater than\" warning in\n  ClassifyFromColumns.\n\n- Compatibility fixes for pandas 1.0.0.\n\n- Implemented raster.RasterizeWKT\n\n\n2.2.0 (2019-12-20)\n------------------\n\n- utils.get_crs now leaves EPSG codes instead of converting them to their Proj4\n  representation.\n\n- Implemented GeometryFileSink that writes ESRI Shapefile, GeoJSON, GML, and\n  geopackage.\n\n- Added a .to_file() method to all GeometryBlocks.\n\n- Added dry_run parameter (for validation) to .to_file().\n\n- Start using google docstring convention.\n\n- Several minor doc fixes.\n\n- Fix setting of the .crs property in the GeometryFileSource.\n\n- Fixed serialization of raster.Classify.\n\n\n2.1.1 (2019-12-06)\n------------------\n\n- Fix empty response of TemporalAggregate and Cumulative.\n\n- Fix elementwise raster blocks in case of empty datasets.\n\n\n2.1.0 (2019-11-15)\n------------------\n\n- Added RasterFileSource.close_dataset to close the GDAL file handle.\n\n- Run unittests on windows.\n\n- Adapt safe_abspath and safe_file_url functions: they now automatically\n  interpret the geomodeling.root config instead of the 'start' kwarg.\n\n- Added a geomodeling.strict-file-paths that defaults to False. This changes\n  the default behaviour of all blocks that handle file paths: by default, the\n  path is not required to be in geomodeling.root.\n\n- Added installation instructions for windows.\n\n- Improved the ipyleaflet plugin so that it can deal with multiple notebook\n  servers on the same machine. The parameter 'hostname' was replaced by 'url'.\n\n\n2.0.4 (2019-11-01)\n------------------\n\n- Fixed propagation of the 'extent' and 'geometry' attributes through the\n  raster.Clip. Both now return the intersection of the store and mask rasters.\n\n- The MemorySource and elementwise blocks now return None for 'extent' and\n  'geometry' if they are empty.\n\n- Preserve functionality of the geometry.Difference block with geopandas 0.6.\n  When taking the difference of a geometry with a missing geometry (A - None),\n  geopandas < 0.6 returned A as result, while >= 0.6 returns None as result.\n\n- Added default values for RasterFileSource's time parameters.\n\n- Implemented the 'columns' attribute for GeometryFileSource.\n\n- Fixed the projection attribute of elementwise raster blocks in case one of\n  the arguments is a number and not a Block instance.\n\n- Implemented the geo_transform attribute of elementwise raster blocks.\n\n- Added an ipyleaflet plugin for visualizing RasterBlocks in jupyter notebook.\n\n- Changed the default geomodeling.root setting to the current working directory\n\n\n2.0.3 (2019-10-08)\n------------------\n\n- Added documentation.\n\n- Fixed MemorySource incase of a request outside of the data boundary.\n\n- Fixed multiple bugs in Reclassify and added some tests. The 'from' dtype can\n  now be boolean or integer, and the 'to' dtype integer or float. The returned\n  dtype is now decided by numpy (int64 or float64).\n\n\n2.0.2 (2019-09-04)\n------------------\n\n- Clean up the .check() method for RasterBlocks.\n\n- Added a Travisfile testing with against versions since 2017 on Linux and OSX.\n\n- Took some python 3.5 compatibility measures.\n\n- Added fix in ParseText block for pandas 0.23.\n\n- Changed underscores in config to dashes for dask 0.18 compatibility.\n\n- Constrained dask to >= 0.18, numpy to >= 1.12, pandas to >= 0.19,\n  geopandas to >= 0.4, scipy to >= 0.19.\n\n- Removed the explicit (py)gdal dependency.\n\n\n2.0.1 (2019-08-30)\n------------------\n\n- Renamed the package to dask-geomodeling.\n\n- Integrated the settings with dask.config.\n\n- Added BSD 3-Clause license.\n\n\n2.0.0 (2019-08-27)\n------------------\n\n- Remove raster-store dependency.\n\n- Removed RasterStoreSource, ThreediResultSource, Result, Interpolate,\n  DeprecatedInterpolate, GeoInterface, and GroupTemporal geoblocks.\n\n- Removed all django blocks GeoDjangoSource, AddDjangoFields, GeoDjangoSink.\n\n- Simplified tokenization of Block objects.\n\n- Implemented construct_multiple to construct multiple blocks at once.\n\n- Implemented MemorySource and GeoTIFFSource as new raster sources.\n\n- Add `Cumulative` geoblock for performing temporal cumulatives.\n\n\n1.2.13 (2019-08-20)\n-------------------\n\n- Add `TemporalAggregate` geoblock for performing temporal aggregates on\n  raster data.\n\n- Fix raster math geoblocks to not have byte-sized integers 'wrap around'\n  when they are added. All integer-types are now at least int32 and all float\n  types at least float32.\n\n\n1.2.12 (2019-07-30)\n-------------------\n\n- Made GeoDjangoSource backwards compatible with existing graph definitions.\n\n- Fix Interpolate wrapper.\n\n\n1.2.11 (2019-07-19)\n-------------------\n\n- Added new parameter `filters` to GeoDjangoSource.\n\n\n1.2.10 (2019-07-05)\n-------------------\n\n- Classify block return single series with dtype of `labels`\n  if `labels` are floats or integers.\n\n\n1.2.9 (2019-06-29)\n------------------\n\n- Fix bug introduced in tokenization fix.\n\n\n1.2.8 (2019-06-29)\n------------------\n\n- Skip tokenization if a block was already tokenized.\n\n\n1.2.7 (2019-06-28)\n------------------\n\n- Implemented AggregateRasterAboveThreshold.\n\n\n1.2.6 (2019-06-27)\n------------------\n\n- Fix in `ParseTextColumn` for empty column `description`.\n\n- Fix empty dataset case in ClassifyFromColumns.\n\n\n1.2.5 (2019-06-26)\n------------------\n\n- Skip (costly) call to tokenize() when constructing without validation. If a\n  graph was supplied that was generated by geoblocks, the token should be\n  present in the name. If the name has incorrect format, a warning is emitted\n  and tokenize() is called after all.\n\n- Deal with empty datasets in ClassifyFromColumns.\n\n\n1.2.4 (2019-06-21)\n------------------\n\n- Updated ParseTextColumn: allow spaces in values.\n\n\n1.2.3 (2019-06-21)\n------------------\n\n- Rasterize geoblock has a limit of 10000 geometries.\n\n- Implemented Choose geoblock for Series.\n\n- Added the block key in the exception message when construction failed.\n\n- Added caching to get_compute_graph to speedup graph generation.\n\n- Improved the documentation.\n\n\n1.2.2 (2019-06-13)\n------------------\n\n- Fix tokenization of a geoblock when constructing with validate=False.\n\n- The raster requests generated in AggregateRaster have their bbox now snapped\n  to (0, 0) for better reproducibility.\n\n\n1.2.1 (2019-06-12)\n------------------\n\n- Fix bug in geoblocks.geometry.constructive.Buffer that was introduced in 1.2.\n\n\n1.2 (2019-06-12)\n----------------\n\n- Extend geometry.field_operations.Classify for classification outside of\n  the bins. For example, you can now supply 2 bins and 3 labels.\n\n- Implemented geometry.field_operations.ClassifyFromColumns that takes its bins\n  from columns in a GeometryBlock, so that classification can differ per\n  feature.\n\n- Extend geometry.base.SetSeriesBlock to setting constant values.\n\n- Implemented geometry.field_operations.Interp.\n\n- Implemented geometry.text.ParseTextColumn that parses a text column into\n  multiple value columns.\n\n- AddDjangoFields converts columns to Categorical dtype automatically if the\n  data is of 'object' dtype (e.g. strings). This makes the memory footprint of\n  large text fields much smaller.\n\n- Make validation of a graph optional when constructing.\n\n- Use dask.get in construct and compute as to not doubly construct/compute.\n\n- Fix bug in geoblocks.geometry.constructive.Buffer that changed the compute\n  graph inplace, prohibiting 2 computations of the same graph.\n\n\n1.1 (2019-06-03)\n----------------\n\n- GeoDjangoSink returns a dataframe with the 'saved' column indicating whether\n  the save succeeded. IntegrityErrors result in saved=False.\n\n- Added projection argument to `GeometryTiler`. The GeometryTiler only accepts\n  requests that have a projection equal to the tiling projection.\n\n- Raise a RuntimeError if the amount of returned geometries by GeoDjangoSource\n  exceeds the GEOMETRY_LIMIT setting.\n\n- Added `auto_pixel_size`  argument to geometry.AggregateRaster. If this\n  is False, the process raises a RuntimeError when the required raster exceeds\n  the `max_size` argument.\n\n- If `max_size` in the geometry.AggregateRaster is None, it defaults to\n  the global RASTER_LIMIT setting.\n\n- Remove the index_field_name argument in GeoDjangoSource, instead obtain it\n  automatically from model._meta.pk.name. The index can be added as a normal\n  column by including it in 'fields'.\n\n- Change the default behaviour of 'fields' in GeoDjangoSource: if not given, no\n  extra fields are included. Also start and end field names are not included.\n\n- Added the 'columns' attribute to all geometry blocks except for\n  the GeometryFileSource.\n\n- Added tests for SetSeriesBlock and GetSeriesBlock.\n\n- Added check that column exist in GetSeriesBlock, AddDjangoFields and\n  GeoDjangoSink.\n\n- Implemented Round geoblock for Series.\n\n- Fixed AggregateRaster when aggregating in a different projection than the\n  request projection.\n\n- Allow GeometryTiler to tile in a different projection than the request\n  geometry is using.\n\n\n1.0 (2019-05-09)\n----------------\n\n- Improved GeoDjangoSink docstring + fixed bug.\n\n- Bug fix in GeoInterface for handling `inf` values.\n\n- Added `Area` Geoblock for area calculation in Geometry blocks.\n\n- Added MergeGeometryBlocks for `merge` operation between GeoDataFrames.\n\n- Added `GeometryBlock.__getitem__ `and `GeometryBlock.set`, getting single\n  columns from and setting multiple columns to a GeometryBlock. Corresponding\n  geoblocks are geometry.GetSeriesBlock and geometry.SetSeriesBlock.\n\n- Added basic operations for `add`,`sub`,`mul`,`div`,`truediv`,`floordiv`,\n  `mod`, `eq`,`neq`,`ge`,`gt`,`le`,`lt`, `and`, `or`, `xor` and `not`\n  operation in SeriesBlocks.\n\n- Documented the request and response protocol for GeometryBlock.\n\n- Added a tokenizer for shapely geometries, so that GeometryBlock request\n  hashes are deterministic.\n\n- Added a tokenizer for datetime and timedelta objects.\n\n- Added geopandas dependency.\n\n- Removed GeoJSONSource and implemented GeometryFileSource. This new reader has\n  no simplify and intersect functions.\n\n- Implemented geometry.set_operations.Intersection.\n\n- Implemented geometry.constructive.Simplify.\n\n- Adjusted the MockGeometry test class.\n\n- Reimplemented utils.rasterize_geoseries and fixed raster.Rasterize.\n\n- Reimplemented geometry.AggregateRaster.\n\n- Fixed time requests for 3Di Result geoblocks that are outside the range of\n  the dataset\n\n- Implemented geometry.GeoDjangoSource.\n\n- Implemented geometry.GeoDjangoSink.\n\n- Added support for overlapping geometries when aggregating.\n\n- Increased performance of GeoSeries coordinate transformations.\n\n- Fixed inconsistent naming of the extent-type geometry response.\n\n- Consistently return an empty geodataframe in case there are no geometries.\n\n- Implemented geometry.Difference.\n\n- Implemented geometry.Classify.\n\n- Implemented percentile statistic for geometry.AggregateRaster.\n\n- Implemented geometry.GeometryTiler.\n\n- Explicitly set the result column name for AggregateRaster (default: 'agg').\n\n- Implemented count statistic for geometry.AggregateRaster.\n\n- Implemented geometry.AddDjangoFields.\n\n- Added temporal filtering for Django geometry sources.\n\n- Allow boolean masks in raster.Clip.\n\n- Implemented raster.IsData.\n\n- Implemented geometry.Where and geometry.Mask.\n\n- Extended raster.Rasterize to rasterize float, int and bool properties.\n\n- Fixed bug in Rasterize that set 'min_size' wrong.\n\n\n0.6 (2019-01-18)\n----------------\n\n- Coerce the geo_transform to a list of floats in the raster.Interpolate,\n  preventing TypeErrors in case it consists of decimal.Decimal objects.\n\n\n0.5 (2019-01-14)\n----------------\n\n- Adapted path URLs to absolute paths in RasterStoreSource, GeoJSONSource, and\n  ThreediResultSource. They still accept paths relative to the one stored in\n  settings.\n\n\n0.4 (2019-01-11)\n----------------\n\n- The `'store_resolution'` result field of `GeoInterface` now returns the\n  resolution as integer (in milliseconds) and not as datetime.timedelta.\n\n- Added metadata fields to Optimizer geoblocks.\n\n- Propagate the union of the geometries in a Group (and Optimizer) block.\n\n- Propagate the intersection of the geometries in elementwise blocks.\n\n- Implement the projection metadata field for all blocks.\n\n- Fixed the Shift geoblock by storing the time shift in milliseconds instead of\n  a datetime.timedelta, which is not JSON-serializable.\n\n\n0.3 (2018-12-12)\n----------------\n\n- Added geoblocks.raster.Classify.\n\n- Let the raster.Interpolate block accept the (deprecated) `layout` kwarg.\n\n\n0.2 (2018-11-20)\n----------------\n\n- Renamed ThreediResultSource `path` property to `hdf5_path` and fixed it.\n\n\n0.1 (2018-11-19)\n----------------\n\n- Initial project structure created.\n\n- Copied graphs.py, tokenize.py, wrappers.py, results.py, interfaces.py,\n  and relevant tests and factories from raster-store.\n\n- Wrappers are renamed into 'geoblocks', which are al subclasses of `Block`. The\n  wrappers were restructured into submodules core, raster, geometry, and interfaces.\n\n- The new geoblocks.Block baseclass now provides the infrastructure for\n  a) describing a relational block graph and b) generating compute graphs from a\n  request for usage in parallelized computations.\n\n- Each element in a relational block graph or compute graph is hashed using the\n  `tokenize` module from `dask` which is able to generate unique and deterministic\n  tokens (hashes).\n\n- Blocks are saved to a new json format (version 2).\n\n- Every block supports the attributes `period`, `timedelta`, `extent`,\n  `dtype`, `fillvalue`, `geometry`, and `geo_transform`.\n\n- The `check` method is implemented on every block and refreshes the\n  primitives (`stores.Store` / `results.Grid`).\n\n- `geoblocks.raster.sources.RasterStoreSource` should now be wrapped around a\n  `raster_store.stores.Store` in order to include it as a datasource inside a graph.\n\n- Reformatted the code using black code formatter.\n\n- Implemented `GroupTemporal` as replacement for multi-store Lizard objects.\n\n- Adapted `GeoInterface` to mimic now deprecated lizard_nxt.raster.Raster.\n\n- Fixed issue with ciso8601 2.*\n\n- Bumped raster-store dependency to 4.0.0.", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/nens/dask-geomodeling", "keywords": "dask", "license": "BSD 3-Clause License", "maintainer": "", "maintainer_email": "", "name": "dask-geomodeling", "package_url": "https://pypi.org/project/dask-geomodeling/", "platform": "", "project_url": "https://pypi.org/project/dask-geomodeling/", "project_urls": {"Homepage": "https://github.com/nens/dask-geomodeling"}, "release_url": "https://pypi.org/project/dask-geomodeling/2.2.7/", "requires_dist": null, "requires_python": ">=3.5", "summary": "On-the-fly operations on geographical maps.", "version": "2.2.7", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"dask-geomodeling\">\n<h2>dask-geomodeling</h2>\n<a href=\"https://dask-geomodeling.readthedocs.io/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"https://readthedocs.org/projects/dask-geomodeling/badge/?version=latest\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9e9317e6afae3e843f62183072a4aa5c13b86fef/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f6461736b2d67656f6d6f64656c696e672f62616467652f3f76657273696f6e3d6c6174657374\"></a>\n<a href=\"https://travis-ci.com/nens/dask-geomodeling\" rel=\"nofollow\"><img alt=\"https://travis-ci.com/nens/dask-geomodeling.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6d0c651fc62ac5be11e0874b0b062a6f21add78d/68747470733a2f2f7472617669732d63692e636f6d2f6e656e732f6461736b2d67656f6d6f64656c696e672e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://ci.appveyor.com/project/reinout/dask-geomodeling\" rel=\"nofollow\"><img alt=\"https://ci.appveyor.com/api/projects/status/aopxohgl23llkeq8?svg=true\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/bded9e37d9d8a4c128e432c200bcb771ca18a73a/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f616f70786f68676c32336c6c6b6571383f7376673d74727565\"></a>\n<a href=\"https://badge.fury.io/py/dask-geomodeling\" rel=\"nofollow\"><img alt=\"https://badge.fury.io/py/dask-geomodeling.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/dc094498d89ddecdd2582e8ea27a65c82d1cf034/68747470733a2f2f62616467652e667572792e696f2f70792f6461736b2d67656f6d6f64656c696e672e737667\"></a>\n<a href=\"https://anaconda.org/conda-forge/dask-geomodeling\" rel=\"nofollow\"><img alt=\"https://anaconda.org/conda-forge/dask-geomodeling/badges/version.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2c67cc72d25915c9235d417fc16c8da03b63e6c7/68747470733a2f2f616e61636f6e64612e6f72672f636f6e64612d666f7267652f6461736b2d67656f6d6f64656c696e672f6261646765732f76657273696f6e2e737667\"></a>\n<p>Dask-geomodeling is a collection of classes that are to be stacked together to\ncreate configurations for on-the-fly operations on geographical maps. By\ngenerating <a href=\"https://dask.pydata.org/\" rel=\"nofollow\">Dask</a> compute graphs, these operation\nmay be parallelized and (intermediate) results may be cached.</p>\n<p>Multiple Block instances together make a view. Each Block has the <tt>get_data</tt>\nmethod that fetches the data in one go, as well as a <tt>get_compute_graph</tt>\nmethod that creates a graph to compute the data later.</p>\n<p><a href=\"https://dask-geomodeling.readthedocs.org/\" rel=\"nofollow\">Read the docs</a> for further information.</p>\n</div>\n<div id=\"changelog-of-dask-geomodeling\">\n<h2>Changelog of dask-geomodeling</h2>\n<div id=\"id1\">\n<h3>2.2.7 (2020-04-30)</h3>\n<ul>\n<li>Accept list and dict values in GeometryFileSink / to_file.</li>\n<li>Fix bug in ParseTextColumn that added columns in duplicate when outputting\ninto the input column.</li>\n</ul>\n</div>\n<div id=\"id2\">\n<h3>2.2.6 (2020-04-28)</h3>\n<ul>\n<li>Fixed bug in <cite>FillNoData</cite> block.</li>\n<li>Fixed bug in <cite>AggregateRasterAboveThreshold</cite> (introduced in #37) (#44).</li>\n</ul>\n</div>\n<div id=\"id3\">\n<h3>2.2.4 (2020-03-25)</h3>\n<ul>\n<li>Allow up to 1E-7 in the GeoTransform \u2018tilt\u2019 terms to account for possible\nfloat32 imprecision.</li>\n<li>Handle Nones in geometry.field_operations.Classify and ClassifyFromColumns.</li>\n<li>Validate if labels are unique in geometry.field_operations.Classify and\nClassifyFromColumns.<ul>\n<li>Added raster.spatial.Place.</li>\n</ul>\n</li>\n</ul>\n</div>\n<div id=\"id4\">\n<h3>2.2.3 (2020-02-28)</h3>\n<ul>\n<li>Fix AggregateRaster: it now returns NaN for no data pixels (#37)</li>\n</ul>\n</div>\n<div id=\"id5\">\n<h3>2.2.2 (2020-02-13)</h3>\n<ul>\n<li>Added GeometryWKTSource.</li>\n<li>Updated all docstrings.</li>\n<li>Renamed the \u2018location\u2019 parameter of raster.misc.Step to \u2018value\u2019.</li>\n</ul>\n</div>\n<div id=\"id6\">\n<h3>2.2.1 (2020-02-04)</h3>\n<ul>\n<li>Suppressed \u201cinvalid value encountered in greater than\u201d warning in\nClassifyFromColumns.</li>\n<li>Compatibility fixes for pandas 1.0.0.</li>\n<li>Implemented raster.RasterizeWKT</li>\n</ul>\n</div>\n<div id=\"id7\">\n<h3>2.2.0 (2019-12-20)</h3>\n<ul>\n<li>utils.get_crs now leaves EPSG codes instead of converting them to their Proj4\nrepresentation.</li>\n<li>Implemented GeometryFileSink that writes ESRI Shapefile, GeoJSON, GML, and\ngeopackage.</li>\n<li>Added a .to_file() method to all GeometryBlocks.</li>\n<li>Added dry_run parameter (for validation) to .to_file().</li>\n<li>Start using google docstring convention.</li>\n<li>Several minor doc fixes.</li>\n<li>Fix setting of the .crs property in the GeometryFileSource.</li>\n<li>Fixed serialization of raster.Classify.</li>\n</ul>\n</div>\n<div id=\"id8\">\n<h3>2.1.1 (2019-12-06)</h3>\n<ul>\n<li>Fix empty response of TemporalAggregate and Cumulative.</li>\n<li>Fix elementwise raster blocks in case of empty datasets.</li>\n</ul>\n</div>\n<div id=\"id9\">\n<h3>2.1.0 (2019-11-15)</h3>\n<ul>\n<li>Added RasterFileSource.close_dataset to close the GDAL file handle.</li>\n<li>Run unittests on windows.</li>\n<li>Adapt safe_abspath and safe_file_url functions: they now automatically\ninterpret the geomodeling.root config instead of the \u2018start\u2019 kwarg.</li>\n<li>Added a geomodeling.strict-file-paths that defaults to False. This changes\nthe default behaviour of all blocks that handle file paths: by default, the\npath is not required to be in geomodeling.root.</li>\n<li>Added installation instructions for windows.</li>\n<li>Improved the ipyleaflet plugin so that it can deal with multiple notebook\nservers on the same machine. The parameter \u2018hostname\u2019 was replaced by \u2018url\u2019.</li>\n</ul>\n</div>\n<div id=\"id10\">\n<h3>2.0.4 (2019-11-01)</h3>\n<ul>\n<li>Fixed propagation of the \u2018extent\u2019 and \u2018geometry\u2019 attributes through the\nraster.Clip. Both now return the intersection of the store and mask rasters.</li>\n<li>The MemorySource and elementwise blocks now return None for \u2018extent\u2019 and\n\u2018geometry\u2019 if they are empty.</li>\n<li>Preserve functionality of the geometry.Difference block with geopandas 0.6.\nWhen taking the difference of a geometry with a missing geometry (A - None),\ngeopandas &lt; 0.6 returned A as result, while &gt;= 0.6 returns None as result.</li>\n<li>Added default values for RasterFileSource\u2019s time parameters.</li>\n<li>Implemented the \u2018columns\u2019 attribute for GeometryFileSource.</li>\n<li>Fixed the projection attribute of elementwise raster blocks in case one of\nthe arguments is a number and not a Block instance.</li>\n<li>Implemented the geo_transform attribute of elementwise raster blocks.</li>\n<li>Added an ipyleaflet plugin for visualizing RasterBlocks in jupyter notebook.</li>\n<li>Changed the default geomodeling.root setting to the current working directory</li>\n</ul>\n</div>\n<div id=\"id11\">\n<h3>2.0.3 (2019-10-08)</h3>\n<ul>\n<li>Added documentation.</li>\n<li>Fixed MemorySource incase of a request outside of the data boundary.</li>\n<li>Fixed multiple bugs in Reclassify and added some tests. The \u2018from\u2019 dtype can\nnow be boolean or integer, and the \u2018to\u2019 dtype integer or float. The returned\ndtype is now decided by numpy (int64 or float64).</li>\n</ul>\n</div>\n<div id=\"id12\">\n<h3>2.0.2 (2019-09-04)</h3>\n<ul>\n<li>Clean up the .check() method for RasterBlocks.</li>\n<li>Added a Travisfile testing with against versions since 2017 on Linux and OSX.</li>\n<li>Took some python 3.5 compatibility measures.</li>\n<li>Added fix in ParseText block for pandas 0.23.</li>\n<li>Changed underscores in config to dashes for dask 0.18 compatibility.</li>\n<li>Constrained dask to &gt;= 0.18, numpy to &gt;= 1.12, pandas to &gt;= 0.19,\ngeopandas to &gt;= 0.4, scipy to &gt;= 0.19.</li>\n<li>Removed the explicit (py)gdal dependency.</li>\n</ul>\n</div>\n<div id=\"id13\">\n<h3>2.0.1 (2019-08-30)</h3>\n<ul>\n<li>Renamed the package to dask-geomodeling.</li>\n<li>Integrated the settings with dask.config.</li>\n<li>Added BSD 3-Clause license.</li>\n</ul>\n</div>\n<div id=\"id14\">\n<h3>2.0.0 (2019-08-27)</h3>\n<ul>\n<li>Remove raster-store dependency.</li>\n<li>Removed RasterStoreSource, ThreediResultSource, Result, Interpolate,\nDeprecatedInterpolate, GeoInterface, and GroupTemporal geoblocks.</li>\n<li>Removed all django blocks GeoDjangoSource, AddDjangoFields, GeoDjangoSink.</li>\n<li>Simplified tokenization of Block objects.</li>\n<li>Implemented construct_multiple to construct multiple blocks at once.</li>\n<li>Implemented MemorySource and GeoTIFFSource as new raster sources.</li>\n<li>Add <cite>Cumulative</cite> geoblock for performing temporal cumulatives.</li>\n</ul>\n</div>\n<div id=\"id15\">\n<h3>1.2.13 (2019-08-20)</h3>\n<ul>\n<li>Add <cite>TemporalAggregate</cite> geoblock for performing temporal aggregates on\nraster data.</li>\n<li>Fix raster math geoblocks to not have byte-sized integers \u2018wrap around\u2019\nwhen they are added. All integer-types are now at least int32 and all float\ntypes at least float32.</li>\n</ul>\n</div>\n<div id=\"id16\">\n<h3>1.2.12 (2019-07-30)</h3>\n<ul>\n<li>Made GeoDjangoSource backwards compatible with existing graph definitions.</li>\n<li>Fix Interpolate wrapper.</li>\n</ul>\n</div>\n<div id=\"id17\">\n<h3>1.2.11 (2019-07-19)</h3>\n<ul>\n<li>Added new parameter <cite>filters</cite> to GeoDjangoSource.</li>\n</ul>\n</div>\n<div id=\"id18\">\n<h3>1.2.10 (2019-07-05)</h3>\n<ul>\n<li>Classify block return single series with dtype of <cite>labels</cite>\nif <cite>labels</cite> are floats or integers.</li>\n</ul>\n</div>\n<div id=\"id19\">\n<h3>1.2.9 (2019-06-29)</h3>\n<ul>\n<li>Fix bug introduced in tokenization fix.</li>\n</ul>\n</div>\n<div id=\"id20\">\n<h3>1.2.8 (2019-06-29)</h3>\n<ul>\n<li>Skip tokenization if a block was already tokenized.</li>\n</ul>\n</div>\n<div id=\"id21\">\n<h3>1.2.7 (2019-06-28)</h3>\n<ul>\n<li>Implemented AggregateRasterAboveThreshold.</li>\n</ul>\n</div>\n<div id=\"id22\">\n<h3>1.2.6 (2019-06-27)</h3>\n<ul>\n<li>Fix in <cite>ParseTextColumn</cite> for empty column <cite>description</cite>.</li>\n<li>Fix empty dataset case in ClassifyFromColumns.</li>\n</ul>\n</div>\n<div id=\"id23\">\n<h3>1.2.5 (2019-06-26)</h3>\n<ul>\n<li>Skip (costly) call to tokenize() when constructing without validation. If a\ngraph was supplied that was generated by geoblocks, the token should be\npresent in the name. If the name has incorrect format, a warning is emitted\nand tokenize() is called after all.</li>\n<li>Deal with empty datasets in ClassifyFromColumns.</li>\n</ul>\n</div>\n<div id=\"id24\">\n<h3>1.2.4 (2019-06-21)</h3>\n<ul>\n<li>Updated ParseTextColumn: allow spaces in values.</li>\n</ul>\n</div>\n<div id=\"id25\">\n<h3>1.2.3 (2019-06-21)</h3>\n<ul>\n<li>Rasterize geoblock has a limit of 10000 geometries.</li>\n<li>Implemented Choose geoblock for Series.</li>\n<li>Added the block key in the exception message when construction failed.</li>\n<li>Added caching to get_compute_graph to speedup graph generation.</li>\n<li>Improved the documentation.</li>\n</ul>\n</div>\n<div id=\"id26\">\n<h3>1.2.2 (2019-06-13)</h3>\n<ul>\n<li>Fix tokenization of a geoblock when constructing with validate=False.</li>\n<li>The raster requests generated in AggregateRaster have their bbox now snapped\nto (0, 0) for better reproducibility.</li>\n</ul>\n</div>\n<div id=\"id27\">\n<h3>1.2.1 (2019-06-12)</h3>\n<ul>\n<li>Fix bug in geoblocks.geometry.constructive.Buffer that was introduced in 1.2.</li>\n</ul>\n</div>\n<div id=\"id28\">\n<h3>1.2 (2019-06-12)</h3>\n<ul>\n<li>Extend geometry.field_operations.Classify for classification outside of\nthe bins. For example, you can now supply 2 bins and 3 labels.</li>\n<li>Implemented geometry.field_operations.ClassifyFromColumns that takes its bins\nfrom columns in a GeometryBlock, so that classification can differ per\nfeature.</li>\n<li>Extend geometry.base.SetSeriesBlock to setting constant values.</li>\n<li>Implemented geometry.field_operations.Interp.</li>\n<li>Implemented geometry.text.ParseTextColumn that parses a text column into\nmultiple value columns.</li>\n<li>AddDjangoFields converts columns to Categorical dtype automatically if the\ndata is of \u2018object\u2019 dtype (e.g. strings). This makes the memory footprint of\nlarge text fields much smaller.</li>\n<li>Make validation of a graph optional when constructing.</li>\n<li>Use dask.get in construct and compute as to not doubly construct/compute.</li>\n<li>Fix bug in geoblocks.geometry.constructive.Buffer that changed the compute\ngraph inplace, prohibiting 2 computations of the same graph.</li>\n</ul>\n</div>\n<div id=\"id29\">\n<h3>1.1 (2019-06-03)</h3>\n<ul>\n<li>GeoDjangoSink returns a dataframe with the \u2018saved\u2019 column indicating whether\nthe save succeeded. IntegrityErrors result in saved=False.</li>\n<li>Added projection argument to <cite>GeometryTiler</cite>. The GeometryTiler only accepts\nrequests that have a projection equal to the tiling projection.</li>\n<li>Raise a RuntimeError if the amount of returned geometries by GeoDjangoSource\nexceeds the GEOMETRY_LIMIT setting.</li>\n<li>Added <cite>auto_pixel_size</cite>  argument to geometry.AggregateRaster. If this\nis False, the process raises a RuntimeError when the required raster exceeds\nthe <cite>max_size</cite> argument.</li>\n<li>If <cite>max_size</cite> in the geometry.AggregateRaster is None, it defaults to\nthe global RASTER_LIMIT setting.</li>\n<li>Remove the index_field_name argument in GeoDjangoSource, instead obtain it\nautomatically from model._meta.pk.name. The index can be added as a normal\ncolumn by including it in \u2018fields\u2019.</li>\n<li>Change the default behaviour of \u2018fields\u2019 in GeoDjangoSource: if not given, no\nextra fields are included. Also start and end field names are not included.</li>\n<li>Added the \u2018columns\u2019 attribute to all geometry blocks except for\nthe GeometryFileSource.</li>\n<li>Added tests for SetSeriesBlock and GetSeriesBlock.</li>\n<li>Added check that column exist in GetSeriesBlock, AddDjangoFields and\nGeoDjangoSink.</li>\n<li>Implemented Round geoblock for Series.</li>\n<li>Fixed AggregateRaster when aggregating in a different projection than the\nrequest projection.</li>\n<li>Allow GeometryTiler to tile in a different projection than the request\ngeometry is using.</li>\n</ul>\n</div>\n<div id=\"id30\">\n<h3>1.0 (2019-05-09)</h3>\n<ul>\n<li>Improved GeoDjangoSink docstring + fixed bug.</li>\n<li>Bug fix in GeoInterface for handling <cite>inf</cite> values.</li>\n<li>Added <cite>Area</cite> Geoblock for area calculation in Geometry blocks.</li>\n<li>Added MergeGeometryBlocks for <cite>merge</cite> operation between GeoDataFrames.</li>\n<li>Added <cite>GeometryBlock.__getitem__ `and `GeometryBlock.set</cite>, getting single\ncolumns from and setting multiple columns to a GeometryBlock. Corresponding\ngeoblocks are geometry.GetSeriesBlock and geometry.SetSeriesBlock.</li>\n<li>Added basic operations for <cite>add</cite>,`sub`,`mul`,`div`,`truediv`,`floordiv`,\n<cite>mod</cite>, <cite>eq</cite>,`neq`,`ge`,`gt`,`le`,`lt`, <cite>and</cite>, <cite>or</cite>, <cite>xor</cite> and <cite>not</cite>\noperation in SeriesBlocks.</li>\n<li>Documented the request and response protocol for GeometryBlock.</li>\n<li>Added a tokenizer for shapely geometries, so that GeometryBlock request\nhashes are deterministic.</li>\n<li>Added a tokenizer for datetime and timedelta objects.</li>\n<li>Added geopandas dependency.</li>\n<li>Removed GeoJSONSource and implemented GeometryFileSource. This new reader has\nno simplify and intersect functions.</li>\n<li>Implemented geometry.set_operations.Intersection.</li>\n<li>Implemented geometry.constructive.Simplify.</li>\n<li>Adjusted the MockGeometry test class.</li>\n<li>Reimplemented utils.rasterize_geoseries and fixed raster.Rasterize.</li>\n<li>Reimplemented geometry.AggregateRaster.</li>\n<li>Fixed time requests for 3Di Result geoblocks that are outside the range of\nthe dataset</li>\n<li>Implemented geometry.GeoDjangoSource.</li>\n<li>Implemented geometry.GeoDjangoSink.</li>\n<li>Added support for overlapping geometries when aggregating.</li>\n<li>Increased performance of GeoSeries coordinate transformations.</li>\n<li>Fixed inconsistent naming of the extent-type geometry response.</li>\n<li>Consistently return an empty geodataframe in case there are no geometries.</li>\n<li>Implemented geometry.Difference.</li>\n<li>Implemented geometry.Classify.</li>\n<li>Implemented percentile statistic for geometry.AggregateRaster.</li>\n<li>Implemented geometry.GeometryTiler.</li>\n<li>Explicitly set the result column name for AggregateRaster (default: \u2018agg\u2019).</li>\n<li>Implemented count statistic for geometry.AggregateRaster.</li>\n<li>Implemented geometry.AddDjangoFields.</li>\n<li>Added temporal filtering for Django geometry sources.</li>\n<li>Allow boolean masks in raster.Clip.</li>\n<li>Implemented raster.IsData.</li>\n<li>Implemented geometry.Where and geometry.Mask.</li>\n<li>Extended raster.Rasterize to rasterize float, int and bool properties.</li>\n<li>Fixed bug in Rasterize that set \u2018min_size\u2019 wrong.</li>\n</ul>\n</div>\n<div id=\"id31\">\n<h3>0.6 (2019-01-18)</h3>\n<ul>\n<li>Coerce the geo_transform to a list of floats in the raster.Interpolate,\npreventing TypeErrors in case it consists of decimal.Decimal objects.</li>\n</ul>\n</div>\n<div id=\"id32\">\n<h3>0.5 (2019-01-14)</h3>\n<ul>\n<li>Adapted path URLs to absolute paths in RasterStoreSource, GeoJSONSource, and\nThreediResultSource. They still accept paths relative to the one stored in\nsettings.</li>\n</ul>\n</div>\n<div id=\"id33\">\n<h3>0.4 (2019-01-11)</h3>\n<ul>\n<li>The <cite>\u2018store_resolution\u2019</cite> result field of <cite>GeoInterface</cite> now returns the\nresolution as integer (in milliseconds) and not as datetime.timedelta.</li>\n<li>Added metadata fields to Optimizer geoblocks.</li>\n<li>Propagate the union of the geometries in a Group (and Optimizer) block.</li>\n<li>Propagate the intersection of the geometries in elementwise blocks.</li>\n<li>Implement the projection metadata field for all blocks.</li>\n<li>Fixed the Shift geoblock by storing the time shift in milliseconds instead of\na datetime.timedelta, which is not JSON-serializable.</li>\n</ul>\n</div>\n<div id=\"id34\">\n<h3>0.3 (2018-12-12)</h3>\n<ul>\n<li>Added geoblocks.raster.Classify.</li>\n<li>Let the raster.Interpolate block accept the (deprecated) <cite>layout</cite> kwarg.</li>\n</ul>\n</div>\n<div id=\"id35\">\n<h3>0.2 (2018-11-20)</h3>\n<ul>\n<li>Renamed ThreediResultSource <cite>path</cite> property to <cite>hdf5_path</cite> and fixed it.</li>\n</ul>\n</div>\n<div id=\"id36\">\n<h3>0.1 (2018-11-19)</h3>\n<ul>\n<li>Initial project structure created.</li>\n<li>Copied graphs.py, tokenize.py, wrappers.py, results.py, interfaces.py,\nand relevant tests and factories from raster-store.</li>\n<li>Wrappers are renamed into \u2018geoblocks\u2019, which are al subclasses of <cite>Block</cite>. The\nwrappers were restructured into submodules core, raster, geometry, and interfaces.</li>\n<li>The new geoblocks.Block baseclass now provides the infrastructure for\na) describing a relational block graph and b) generating compute graphs from a\nrequest for usage in parallelized computations.</li>\n<li>Each element in a relational block graph or compute graph is hashed using the\n<cite>tokenize</cite> module from <cite>dask</cite> which is able to generate unique and deterministic\ntokens (hashes).</li>\n<li>Blocks are saved to a new json format (version 2).</li>\n<li>Every block supports the attributes <cite>period</cite>, <cite>timedelta</cite>, <cite>extent</cite>,\n<cite>dtype</cite>, <cite>fillvalue</cite>, <cite>geometry</cite>, and <cite>geo_transform</cite>.</li>\n<li>The <cite>check</cite> method is implemented on every block and refreshes the\nprimitives (<cite>stores.Store</cite> / <cite>results.Grid</cite>).</li>\n<li><cite>geoblocks.raster.sources.RasterStoreSource</cite> should now be wrapped around a\n<cite>raster_store.stores.Store</cite> in order to include it as a datasource inside a graph.</li>\n<li>Reformatted the code using black code formatter.</li>\n<li>Implemented <cite>GroupTemporal</cite> as replacement for multi-store Lizard objects.</li>\n<li>Adapted <cite>GeoInterface</cite> to mimic now deprecated lizard_nxt.raster.Raster.</li>\n<li>Fixed issue with ciso8601 2.*</li>\n<li>Bumped raster-store dependency to 4.0.0.</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 7135916, "releases": {"2.0.1": [{"comment_text": "", "digests": {"md5": "10fbb8485e49190f554bb8dda08eed6c", "sha256": "da7f1450ba8ac87f61006b49aba8f341d742ca940fdb4d36ed4b783d694bfc7f"}, "downloads": -1, "filename": "dask-geomodeling-2.0.1.tar.gz", "has_sig": false, "md5_digest": "10fbb8485e49190f554bb8dda08eed6c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 69580, "upload_time": "2019-08-30T09:23:21", "upload_time_iso_8601": "2019-08-30T09:23:21.309424Z", "url": "https://files.pythonhosted.org/packages/23/82/b66a162ea0a92849aa6094e492f903e955512ad4dde429cc517d960d4576/dask-geomodeling-2.0.1.tar.gz", "yanked": false}], "2.0.2": [{"comment_text": "", "digests": {"md5": "f538141ac5707647c8bfed5d47dad6c9", "sha256": "50ac4a6df27beea93cc025a67dffdfb601233305c2b2533261de4de06da0533a"}, "downloads": -1, "filename": "dask-geomodeling-2.0.2.tar.gz", "has_sig": false, "md5_digest": "f538141ac5707647c8bfed5d47dad6c9", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 69980, "upload_time": "2019-09-04T12:31:34", "upload_time_iso_8601": "2019-09-04T12:31:34.315979Z", "url": "https://files.pythonhosted.org/packages/71/6c/f37fc137c73d4e616ebab01af604268d28fa27edf8f3e7bf89414dba42fc/dask-geomodeling-2.0.2.tar.gz", "yanked": false}], "2.0.3": [{"comment_text": "", "digests": {"md5": "b840f7272be810e5a2db95a1096cf41d", "sha256": "351573864867c2050ee8fc1431f94880f9493d8a24c86720938f1a79e4757f03"}, "downloads": -1, "filename": "dask-geomodeling-2.0.3.tar.gz", "has_sig": false, "md5_digest": "b840f7272be810e5a2db95a1096cf41d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 65548, "upload_time": "2019-10-08T13:15:54", "upload_time_iso_8601": "2019-10-08T13:15:54.961593Z", "url": "https://files.pythonhosted.org/packages/05/67/588a4db66e19ee3432438f54275a0e5d6932658b91f361559750941a47fe/dask-geomodeling-2.0.3.tar.gz", "yanked": false}], "2.0.4": [{"comment_text": "", "digests": {"md5": "449ad029bf596868f3c97321063ad0cc", "sha256": "3792cc554d312fd59b17a1dbecbed9c8a571b74d28a1431beeb649c122ea6f7b"}, "downloads": -1, "filename": "dask-geomodeling-2.0.4.tar.gz", "has_sig": false, "md5_digest": "449ad029bf596868f3c97321063ad0cc", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 68763, "upload_time": "2019-11-01T08:32:45", "upload_time_iso_8601": "2019-11-01T08:32:45.412399Z", "url": "https://files.pythonhosted.org/packages/2a/8e/a7cb302b88fa816b54d46486b94dd0a3b616d39465dede78c764286cbd21/dask-geomodeling-2.0.4.tar.gz", "yanked": false}], "2.1.0": [{"comment_text": "", "digests": {"md5": "98dcc4663a185477f0c5dddb891ff64a", "sha256": "305a686bb4676dc2da3d4ea5d8972ce1b5f257fda141202c2c3278b1d49e69ce"}, "downloads": -1, "filename": "dask-geomodeling-2.1.0.tar.gz", "has_sig": false, "md5_digest": "98dcc4663a185477f0c5dddb891ff64a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 69734, "upload_time": "2019-11-15T12:45:40", "upload_time_iso_8601": "2019-11-15T12:45:40.177311Z", "url": "https://files.pythonhosted.org/packages/ac/d9/126f8e216688949c98b57cd989c08c9082825ad86885e945eed32da58315/dask-geomodeling-2.1.0.tar.gz", "yanked": false}], "2.1.1": [{"comment_text": "", "digests": {"md5": "528f1a492bad5ed4dda0622c016b037e", "sha256": "780f97fb056de6b81f7d41a49e7bd13c18b2e1603ba6ec1332e0a918ad3a71fc"}, "downloads": -1, "filename": "dask-geomodeling-2.1.1.tar.gz", "has_sig": false, "md5_digest": "528f1a492bad5ed4dda0622c016b037e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 69874, "upload_time": "2019-12-06T15:31:51", "upload_time_iso_8601": "2019-12-06T15:31:51.248675Z", "url": "https://files.pythonhosted.org/packages/4d/89/8f22d17b51cbd3d57428625e0b5d1e779220cad13811d1987eb55bbad912/dask-geomodeling-2.1.1.tar.gz", "yanked": false}], "2.2.0": [{"comment_text": "", "digests": {"md5": "bf216f8439e6a41404496dd252304338", "sha256": "0c3869c7c9bb7bce6f0c9457390dd0f273db62e23825d1402c34d46c75cc76df"}, "downloads": -1, "filename": "dask-geomodeling-2.2.0.tar.gz", "has_sig": false, "md5_digest": "bf216f8439e6a41404496dd252304338", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 73524, "upload_time": "2019-12-20T14:17:19", "upload_time_iso_8601": "2019-12-20T14:17:19.430044Z", "url": "https://files.pythonhosted.org/packages/79/0f/500d6a9836756e2d98428518bcada41b04627993c6e442dbd232f1f578af/dask-geomodeling-2.2.0.tar.gz", "yanked": false}], "2.2.1": [{"comment_text": "", "digests": {"md5": "b8ccf9d4afb073e40599b3e13b319dbd", "sha256": "e6a8b23401e56268b10962dd66a8d10b91b1690ab8baff0690ffe3f71d7a5637"}, "downloads": -1, "filename": "dask-geomodeling-2.2.1.tar.gz", "has_sig": false, "md5_digest": "b8ccf9d4afb073e40599b3e13b319dbd", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 74501, "upload_time": "2020-02-04T14:29:18", "upload_time_iso_8601": "2020-02-04T14:29:18.306102Z", "url": "https://files.pythonhosted.org/packages/bf/60/bce4de3c8c182030bac039f51849e90d1a93cd29871f0052d1acec52551f/dask-geomodeling-2.2.1.tar.gz", "yanked": false}], "2.2.2": [{"comment_text": "", "digests": {"md5": "7c3b37bf2da860f704c7eca5dcc123b6", "sha256": "c1fc2f95190b8e1fa898a59028d69841a5cabda0c28e2b96d29e499d043a5196"}, "downloads": -1, "filename": "dask-geomodeling-2.2.2.tar.gz", "has_sig": false, "md5_digest": "7c3b37bf2da860f704c7eca5dcc123b6", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 78415, "upload_time": "2020-02-13T12:49:52", "upload_time_iso_8601": "2020-02-13T12:49:52.746885Z", "url": "https://files.pythonhosted.org/packages/d2/de/50e42a226e8f671cdfb90033e219a97f3c5f17e7eeb2ff8d80021a897716/dask-geomodeling-2.2.2.tar.gz", "yanked": false}], "2.2.3": [{"comment_text": "", "digests": {"md5": "68d9e91e4a44aa6a60bd8de0d474a34a", "sha256": "d782147252500b428c429c8cb2bbf04cc1914db332e41f325be0487d0a7b1d41"}, "downloads": -1, "filename": "dask-geomodeling-2.2.3.tar.gz", "has_sig": false, "md5_digest": "68d9e91e4a44aa6a60bd8de0d474a34a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 78573, "upload_time": "2020-02-28T13:50:15", "upload_time_iso_8601": "2020-02-28T13:50:15.986269Z", "url": "https://files.pythonhosted.org/packages/aa/bb/e68e61f7ec20a8d1efcc2a73a49531adb30742c091f6fe0d9afaf5a42da5/dask-geomodeling-2.2.3.tar.gz", "yanked": false}], "2.2.4": [{"comment_text": "", "digests": {"md5": "5daf518f50393d8ca1120e68474094d6", "sha256": "819f58cd15e27d9fc1c932c33d81be4c54d631ee94fa093144e450f5db7d85e8"}, "downloads": -1, "filename": "dask-geomodeling-2.2.4.tar.gz", "has_sig": false, "md5_digest": "5daf518f50393d8ca1120e68474094d6", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 81432, "upload_time": "2020-03-25T12:42:38", "upload_time_iso_8601": "2020-03-25T12:42:38.223785Z", "url": "https://files.pythonhosted.org/packages/fa/cc/143deabc7320622e1fe22700cc1911ccb143ccaa1ce205b2f2ac0c89e55f/dask-geomodeling-2.2.4.tar.gz", "yanked": false}], "2.2.6": [{"comment_text": "", "digests": {"md5": "116d11e3240c5dd8bafb6475e40e447c", "sha256": "d7e239586d0f02a9ed5a1de056b069eccbe7cda5336fc6a5f46ed8ea75197640"}, "downloads": -1, "filename": "dask-geomodeling-2.2.6.tar.gz", "has_sig": false, "md5_digest": "116d11e3240c5dd8bafb6475e40e447c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 81603, "upload_time": "2020-04-28T10:09:40", "upload_time_iso_8601": "2020-04-28T10:09:40.935534Z", "url": "https://files.pythonhosted.org/packages/77/81/bdc2b69010bd2fb245edcd4bcdd2692803fd4eaff6806c1427e4f85b7efe/dask-geomodeling-2.2.6.tar.gz", "yanked": false}], "2.2.7": [{"comment_text": "", "digests": {"md5": "5258d545ceca8eb0fc55736608d81e32", "sha256": "7a327c3db2e30f5aa1a0b6198260fb5dbc01d80044abb080dfcc852e061c3690"}, "downloads": -1, "filename": "dask-geomodeling-2.2.7.tar.gz", "has_sig": false, "md5_digest": "5258d545ceca8eb0fc55736608d81e32", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 81960, "upload_time": "2020-04-30T08:52:42", "upload_time_iso_8601": "2020-04-30T08:52:42.355395Z", "url": "https://files.pythonhosted.org/packages/b1/e0/d02533febdd2ce71754a64d27878a440e385cb1ffd605e522f7be45c5e8a/dask-geomodeling-2.2.7.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "5258d545ceca8eb0fc55736608d81e32", "sha256": "7a327c3db2e30f5aa1a0b6198260fb5dbc01d80044abb080dfcc852e061c3690"}, "downloads": -1, "filename": "dask-geomodeling-2.2.7.tar.gz", "has_sig": false, "md5_digest": "5258d545ceca8eb0fc55736608d81e32", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 81960, "upload_time": "2020-04-30T08:52:42", "upload_time_iso_8601": "2020-04-30T08:52:42.355395Z", "url": "https://files.pythonhosted.org/packages/b1/e0/d02533febdd2ce71754a64d27878a440e385cb1ffd605e522f7be45c5e8a/dask-geomodeling-2.2.7.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:40:33 2020"}