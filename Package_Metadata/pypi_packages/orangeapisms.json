{"info": {"author": "renaud gaudin", "author_email": "rgaudin@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: CC0 1.0 Universal (CC0 1.0) Public Domain Dedication", "License :: Public Domain", "Programming Language :: Python", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.5"], "description": "orangeapisms\n=========================\n\n.. image:: https://img.shields.io/pypi/v/orangeapisms.svg\n   :target: https://pypi.python.org/pypi/orangeapisms\n.. image:: https://api.travis-ci.org/rgaudin/django-orangeapisms.svg\n   :target: https://travis-ci.org/rgaudin/django-orangeapisms\n\nDjango app to add support for Orange API SMS-MO and SMS-MT (with DR)\n\nInstall\n--------\n\n* `pip install orangeapisms`\n* Edit your `settings.py` file and add: \n\n.. code-block:: python\n\n    INSTALLED_APPS = list(INSTALLED_APPS) + ['orangeapisms', 'django_forms_bootstrap']\n\n* Configure your `orangeapi.json` file (place it next to your `settings.py` file): \n\n.. code-block:: json\n\n    {\n        \"handler_module\": \"myapp.orange_handler\",\n        \"use_db\": true,\n        \"sender_address\": \"+22300000000\",\n        \"sender_name\": \"POTUS\",\n        \"client_id\": \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\n        \"client_secret\": \"xxxxxxxxxxxxxxxx\",\n        \"enable_tester\": true,\n        \"default_sender_name\": \"sender_address\"\n    }\n\n* Setup Database with `./manage.py migrate`\n\nThat's it ! Test it by accessing `/oapi/` and playing with the tester.\n\n:**client_id**:          Your Client ID (mandatory)\n:**client_secret**:      Your Client Secret (mandatory)\n:**handler_module**:     python path to your module handling messages (mandatory)\n:use_db:                 whether to store SMS in DB (SMSMessage Model)\n:smsmt_url:              URL of your API (might change depending on your plan)\n:oauth_url:              OAuth URL for Orange API\n:sender_address:         Your subscribed phone number\n:sender_name:            Your custom sender name (can be number or string)\n:enable_tester:          To enable tester & logs WebUI on /oapi/\n:default_sender_name:    What to use as default sender name\n:send_async:             whether to deffer SMS sending to celery\n:celery_module:          python path to your celery tasks module\n:country:                ISO 3166-1 code for your country (used for balance checking)\n:fix_msisdn:             whether to fix SMS-MT destination without prefix\n:country_prefix:         MSISDN numeric prefix for your country (to fix SMS-MT without prefix)\n\n\nUsage\n--------\n\nAfter installation (previous step), you are able to send & receive individual SMS.\nTo automatically process incoming SMS, you will have to customise the *handler module* which you specified in `ORANGE_API['handler_module']`.\n\nThe module would call three different functions based on events:\n\n* `smsmo(message)` on an incoming SMS-MO\n* `smsmt(message)` on an outgoing (sent by you) SMS-MT\n* `smsdr(message)` on an incoming delivery-receipt notification. The passed message is the SMS-MT which received the DR. \n\n\n\n**Sample handler module:**\n\n.. code-block:: python\n\n    import datetime\n    import logging    \n\n    from orangeapisms.utils import send_sms\n    from myapp.models import UserModel    \n\n    logger = logging.getLogger(__name__)    \n    \n\n    def handle_smsmo(message):\n        logger.info(\"Received an SMS-MO: {}\".format(message))    \n\n        def register_user(message, keyword, text):\n            # break-down the formatted SMS into variables\n            try:\n                name, sex, dob = text.split()\n            except:\n                return message.reply('Invalid format')    \n\n            # valid user entries\n            if sex not in ['m', 'f']:\n                return message.reply('Unable to understand sex')    \n\n            # reuse input into different data structure\n            try:\n                d = dob.split('-')\n                birthdate = datetime.datetime(d[3], d[2], d[1])\n            except:\n                return message.reply('Unable to understand date of birth')    \n\n            # make use of the data including message metadata\n            user = UserModel.objects.create(\n                name=name, sex=sex, dob=birthdate,\n                phone=message.sender_address)    \n\n            return message.reply(\"Congratulations, you're registered as #{}\"\n                                 .format(user.id))    \n\n        def broadcast_to_users(message, keyword, text):\n            # loop on all Users in DB\n            for user in UserModel.objects.all():\n                # send a custom message to that user\n                send_sms(user.phone, \"Hey {u}, {c}\".format(u=user.name, c=text))    \n\n        keywords = {\n            'register': register_user,\n            'broadcast': broadcast_to_users,\n        }    \n\n        # find the proper keyword\n        keyword, text = message.content.split(' ', 1)\n        if keyword in keywords.keys():\n            return keywords.get(keyword)(message, keyword, text.strip().lower())    \n\n        # fallback on error\n        return message.reply('Unknown request')    \n    \n\n    def handle_smsmt(message):\n        logger.info(\"Sent an SMS-MT: {}\".format(message))    \n    \n\n    def handle_smsdr(message):\n        logger.info(\"Received an SMS-DR: {}\".format(message))\n\nUsing a broker to send SMS-MT\n-----------------------------\n\nBy default, SMS-MT are sent synchronously meaning your request is stalled until the API call is complete.\n\nIf you need to send multiple SMS-MT while not blocking the request thread, you will want to defer sending to a broker.\n\nThis library integrates easily with `celery` so you can do just that in a breeze.\n\nTo use Asynchronous SMS-MT sending, you will need to :\n\n* Install and configure celery onto your project (see instructions bellow if needed)\n* Edit your `settings.py` to include the following options\n\n.. code-block:: python\n\n    # wether to send asynchronously or not\n    'send_async': True,\n    # python path of your celery module containing the task\n    'celery_module': 'myproject.celery'\n\n* Add a custom task to your celery module\n\n.. code-block:: python\n\n\t@app.task()\n\tdef submit_sms_mt_request_task(payload, message):\n\t    from orangeapisms.utils import do_submit_sms_mt_request\n\t    return do_submit_sms_mt_request(payload, message)\n\nThat's it. Now every SMS-MT will be deferred to celery and processed by your broker.\n\nLaunch a `celery` worker to test it!\n\nBasic celery configuration\n--------------------------\n\nIf you are not familiar with celery and want to quickly test the async feature, follow this steps:\n\n* Install redis on your computer and start it\n\n.. code-block:: bash\n\n    sudo apt-get install redis\n    service redis start\n\n* Install celery and redis with ```pip install celery redis```\n\n* Add the celery configuration to your `settings.py`:\n\n.. code-block:: python\n\n    BROKER_URL = 'redis://localhost:6379/0'\n    CELERY_RESULT_BACKEND = 'redis://localhost:6379/0'\n\n* Create a module in your project for `celery`:\n\n.. code-block:: python\n\n    import os    \n\n    from celery import Celery    \n\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')\n    app = Celery('project')\n    app.config_from_object('django.conf:settings')    \n    \n\n    @app.task()\n    def submit_sms_mt_request_task(payload, message):\n        from orangeapisms.utils import do_submit_sms_mt_request\n        return do_submit_sms_mt_request(payload, message)\n\n* Launch a worker\n\n.. code-block:: python\n\n    celery -A project worker -l info", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/rgaudin/django-orangeapisms", "keywords": "orange api sms", "license": "Public Domain", "maintainer": null, "maintainer_email": null, "name": "orangeapisms", "package_url": "https://pypi.org/project/orangeapisms/", "platform": "any", "project_url": "https://pypi.org/project/orangeapisms/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://github.com/rgaudin/django-orangeapisms"}, "release_url": "https://pypi.org/project/orangeapisms/0.28/", "requires_dist": null, "requires_python": null, "summary": "Django app to add support for Orange API SMS-MO, SMS-MT/DR", "version": "0.28", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://pypi.python.org/pypi/orangeapisms\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/v/orangeapisms.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/68790262a4b716d093513ce72714625602530748/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f6f72616e6765617069736d732e737667\"></a>\n<a href=\"https://travis-ci.org/rgaudin/django-orangeapisms\" rel=\"nofollow\"><img alt=\"https://api.travis-ci.org/rgaudin/django-orangeapisms.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5813be4dcbc4d88cf9c076ad1bfd9366c0981ab5/68747470733a2f2f6170692e7472617669732d63692e6f72672f7267617564696e2f646a616e676f2d6f72616e6765617069736d732e737667\"></a>\n<p>Django app to add support for Orange API SMS-MO and SMS-MT (with DR)</p>\n<div id=\"install\">\n<h2>Install</h2>\n<ul>\n<li><cite>pip install orangeapisms</cite></li>\n<li>Edit your <cite>settings.py</cite> file and add:</li>\n</ul>\n<pre><span class=\"n\">INSTALLED_APPS</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">INSTALLED_APPS</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"p\">[</span><span class=\"s1\">'orangeapisms'</span><span class=\"p\">,</span> <span class=\"s1\">'django_forms_bootstrap'</span><span class=\"p\">]</span>\n</pre>\n<ul>\n<li>Configure your <cite>orangeapi.json</cite> file (place it next to your <cite>settings.py</cite> file):</li>\n</ul>\n<pre><span class=\"p\">{</span>\n    <span class=\"nt\">\"handler_module\"</span><span class=\"p\">:</span> <span class=\"s2\">\"myapp.orange_handler\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"use_db\"</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"sender_address\"</span><span class=\"p\">:</span> <span class=\"s2\">\"+22300000000\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"sender_name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"POTUS\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"client_id\"</span><span class=\"p\">:</span> <span class=\"s2\">\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"client_secret\"</span><span class=\"p\">:</span> <span class=\"s2\">\"xxxxxxxxxxxxxxxx\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"enable_tester\"</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"default_sender_name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"sender_address\"</span>\n<span class=\"p\">}</span>\n</pre>\n<ul>\n<li>Setup Database with <cite>./manage.py migrate</cite></li>\n</ul>\n<p>That\u2019s it ! Test it by accessing <cite>/oapi/</cite> and playing with the tester.</p>\n<table>\n<col>\n<col>\n<tbody>\n<tr><th><strong>client_id</strong>:</th><td>Your Client ID (mandatory)</td>\n</tr>\n<tr><th><strong>client_secret</strong>:</th><td>Your Client Secret (mandatory)</td>\n</tr>\n<tr><th><strong>handler_module</strong>:</th><td>python path to your module handling messages (mandatory)</td>\n</tr>\n<tr><th>use_db:</th><td>whether to store SMS in DB (SMSMessage Model)</td>\n</tr>\n<tr><th>smsmt_url:</th><td>URL of your API (might change depending on your plan)</td>\n</tr>\n<tr><th>oauth_url:</th><td>OAuth URL for Orange API</td>\n</tr>\n<tr><th>sender_address:</th><td>Your subscribed phone number</td>\n</tr>\n<tr><th>sender_name:</th><td>Your custom sender name (can be number or string)</td>\n</tr>\n<tr><th>enable_tester:</th><td>To enable tester &amp; logs WebUI on /oapi/</td>\n</tr>\n<tr><th>default_sender_name:</th></tr>\n<tr><td>\u00a0</td><td>What to use as default sender name</td>\n</tr>\n<tr><th>send_async:</th><td>whether to deffer SMS sending to celery</td>\n</tr>\n<tr><th>celery_module:</th><td>python path to your celery tasks module</td>\n</tr>\n<tr><th>country:</th><td>ISO 3166-1 code for your country (used for balance checking)</td>\n</tr>\n<tr><th>fix_msisdn:</th><td>whether to fix SMS-MT destination without prefix</td>\n</tr>\n<tr><th>country_prefix:</th><td>MSISDN numeric prefix for your country (to fix SMS-MT without prefix)</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>After installation (previous step), you are able to send &amp; receive individual SMS.\nTo automatically process incoming SMS, you will have to customise the <em>handler module</em> which you specified in <cite>ORANGE_API[\u2018handler_module\u2019]</cite>.</p>\n<p>The module would call three different functions based on events:</p>\n<ul>\n<li><cite>smsmo(message)</cite> on an incoming SMS-MO</li>\n<li><cite>smsmt(message)</cite> on an outgoing (sent by you) SMS-MT</li>\n<li><cite>smsdr(message)</cite> on an incoming delivery-receipt notification. The passed message is the SMS-MT which received the DR.</li>\n</ul>\n<p><strong>Sample handler module:</strong></p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">datetime</span>\n<span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">orangeapisms.utils</span> <span class=\"kn\">import</span> <span class=\"n\">send_sms</span>\n<span class=\"kn\">from</span> <span class=\"nn\">myapp.models</span> <span class=\"kn\">import</span> <span class=\"n\">UserModel</span>\n\n<span class=\"n\">logger</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">getLogger</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">handle_smsmo</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"p\">):</span>\n    <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">\"Received an SMS-MO: </span><span class=\"si\">{}</span><span class=\"s2\">\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"p\">))</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">register_user</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"p\">,</span> <span class=\"n\">keyword</span><span class=\"p\">,</span> <span class=\"n\">text</span><span class=\"p\">):</span>\n        <span class=\"c1\"># break-down the formatted SMS into variables</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">sex</span><span class=\"p\">,</span> <span class=\"n\">dob</span> <span class=\"o\">=</span> <span class=\"n\">text</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">()</span>\n        <span class=\"k\">except</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">message</span><span class=\"o\">.</span><span class=\"n\">reply</span><span class=\"p\">(</span><span class=\"s1\">'Invalid format'</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># valid user entries</span>\n        <span class=\"k\">if</span> <span class=\"n\">sex</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"s1\">'m'</span><span class=\"p\">,</span> <span class=\"s1\">'f'</span><span class=\"p\">]:</span>\n            <span class=\"k\">return</span> <span class=\"n\">message</span><span class=\"o\">.</span><span class=\"n\">reply</span><span class=\"p\">(</span><span class=\"s1\">'Unable to understand sex'</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># reuse input into different data structure</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"n\">dob</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s1\">'-'</span><span class=\"p\">)</span>\n            <span class=\"n\">birthdate</span> <span class=\"o\">=</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"n\">d</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"n\">d</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n        <span class=\"k\">except</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">message</span><span class=\"o\">.</span><span class=\"n\">reply</span><span class=\"p\">(</span><span class=\"s1\">'Unable to understand date of birth'</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># make use of the data including message metadata</span>\n        <span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"n\">UserModel</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span>\n            <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">sex</span><span class=\"o\">=</span><span class=\"n\">sex</span><span class=\"p\">,</span> <span class=\"n\">dob</span><span class=\"o\">=</span><span class=\"n\">birthdate</span><span class=\"p\">,</span>\n            <span class=\"n\">phone</span><span class=\"o\">=</span><span class=\"n\">message</span><span class=\"o\">.</span><span class=\"n\">sender_address</span><span class=\"p\">)</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">message</span><span class=\"o\">.</span><span class=\"n\">reply</span><span class=\"p\">(</span><span class=\"s2\">\"Congratulations, you're registered as #</span><span class=\"si\">{}</span><span class=\"s2\">\"</span>\n                             <span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">))</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">broadcast_to_users</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"p\">,</span> <span class=\"n\">keyword</span><span class=\"p\">,</span> <span class=\"n\">text</span><span class=\"p\">):</span>\n        <span class=\"c1\"># loop on all Users in DB</span>\n        <span class=\"k\">for</span> <span class=\"n\">user</span> <span class=\"ow\">in</span> <span class=\"n\">UserModel</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">():</span>\n            <span class=\"c1\"># send a custom message to that user</span>\n            <span class=\"n\">send_sms</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">phone</span><span class=\"p\">,</span> <span class=\"s2\">\"Hey </span><span class=\"si\">{u}</span><span class=\"s2\">, </span><span class=\"si\">{c}</span><span class=\"s2\">\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">u</span><span class=\"o\">=</span><span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"o\">=</span><span class=\"n\">text</span><span class=\"p\">))</span>\n\n    <span class=\"n\">keywords</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'register'</span><span class=\"p\">:</span> <span class=\"n\">register_user</span><span class=\"p\">,</span>\n        <span class=\"s1\">'broadcast'</span><span class=\"p\">:</span> <span class=\"n\">broadcast_to_users</span><span class=\"p\">,</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"c1\"># find the proper keyword</span>\n    <span class=\"n\">keyword</span><span class=\"p\">,</span> <span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"n\">message</span><span class=\"o\">.</span><span class=\"n\">content</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s1\">' '</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">keyword</span> <span class=\"ow\">in</span> <span class=\"n\">keywords</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">():</span>\n        <span class=\"k\">return</span> <span class=\"n\">keywords</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">keyword</span><span class=\"p\">)(</span><span class=\"n\">message</span><span class=\"p\">,</span> <span class=\"n\">keyword</span><span class=\"p\">,</span> <span class=\"n\">text</span><span class=\"o\">.</span><span class=\"n\">strip</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">())</span>\n\n    <span class=\"c1\"># fallback on error</span>\n    <span class=\"k\">return</span> <span class=\"n\">message</span><span class=\"o\">.</span><span class=\"n\">reply</span><span class=\"p\">(</span><span class=\"s1\">'Unknown request'</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">handle_smsmt</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"p\">):</span>\n    <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">\"Sent an SMS-MT: </span><span class=\"si\">{}</span><span class=\"s2\">\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"p\">))</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">handle_smsdr</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"p\">):</span>\n    <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">\"Received an SMS-DR: </span><span class=\"si\">{}</span><span class=\"s2\">\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"p\">))</span>\n</pre>\n</div>\n<div id=\"using-a-broker-to-send-sms-mt\">\n<h2>Using a broker to send SMS-MT</h2>\n<p>By default, SMS-MT are sent synchronously meaning your request is stalled until the API call is complete.</p>\n<p>If you need to send multiple SMS-MT while not blocking the request thread, you will want to defer sending to a broker.</p>\n<p>This library integrates easily with <cite>celery</cite> so you can do just that in a breeze.</p>\n<p>To use Asynchronous SMS-MT sending, you will need to :</p>\n<ul>\n<li>Install and configure celery onto your project (see instructions bellow if needed)</li>\n<li>Edit your <cite>settings.py</cite> to include the following options</li>\n</ul>\n<pre><span class=\"c1\"># wether to send asynchronously or not</span>\n<span class=\"s1\">'send_async'</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n<span class=\"c1\"># python path of your celery module containing the task</span>\n<span class=\"s1\">'celery_module'</span><span class=\"p\">:</span> <span class=\"s1\">'myproject.celery'</span>\n</pre>\n<ul>\n<li>Add a custom task to your celery module</li>\n</ul>\n<pre><span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">task</span><span class=\"p\">()</span>\n<span class=\"k\">def</span> <span class=\"nf\">submit_sms_mt_request_task</span><span class=\"p\">(</span><span class=\"n\">payload</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"p\">):</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">orangeapisms.utils</span> <span class=\"kn\">import</span> <span class=\"n\">do_submit_sms_mt_request</span>\n    <span class=\"k\">return</span> <span class=\"n\">do_submit_sms_mt_request</span><span class=\"p\">(</span><span class=\"n\">payload</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"p\">)</span>\n</pre>\n<p>That\u2019s it. Now every SMS-MT will be deferred to celery and processed by your broker.</p>\n<p>Launch a <cite>celery</cite> worker to test it!</p>\n</div>\n<div id=\"basic-celery-configuration\">\n<h2>Basic celery configuration</h2>\n<p>If you are not familiar with celery and want to quickly test the async feature, follow this steps:</p>\n<ul>\n<li>Install redis on your computer and start it</li>\n</ul>\n<pre>sudo apt-get install redis\nservice redis start\n</pre>\n<ul>\n<li>Install celery and redis with <tt>`pip install celery redis`</tt></li>\n<li>Add the celery configuration to your <cite>settings.py</cite>:</li>\n</ul>\n<pre><span class=\"n\">BROKER_URL</span> <span class=\"o\">=</span> <span class=\"s1\">'redis://localhost:6379/0'</span>\n<span class=\"n\">CELERY_RESULT_BACKEND</span> <span class=\"o\">=</span> <span class=\"s1\">'redis://localhost:6379/0'</span>\n</pre>\n<ul>\n<li>Create a module in your project for <cite>celery</cite>:</li>\n</ul>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">celery</span> <span class=\"kn\">import</span> <span class=\"n\">Celery</span>\n\n<span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"o\">.</span><span class=\"n\">setdefault</span><span class=\"p\">(</span><span class=\"s1\">'DJANGO_SETTINGS_MODULE'</span><span class=\"p\">,</span> <span class=\"s1\">'project.settings'</span><span class=\"p\">)</span>\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">Celery</span><span class=\"p\">(</span><span class=\"s1\">'project'</span><span class=\"p\">)</span>\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">config_from_object</span><span class=\"p\">(</span><span class=\"s1\">'django.conf:settings'</span><span class=\"p\">)</span>\n\n\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">task</span><span class=\"p\">()</span>\n<span class=\"k\">def</span> <span class=\"nf\">submit_sms_mt_request_task</span><span class=\"p\">(</span><span class=\"n\">payload</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"p\">):</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">orangeapisms.utils</span> <span class=\"kn\">import</span> <span class=\"n\">do_submit_sms_mt_request</span>\n    <span class=\"k\">return</span> <span class=\"n\">do_submit_sms_mt_request</span><span class=\"p\">(</span><span class=\"n\">payload</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li>Launch a worker</li>\n</ul>\n<pre><span class=\"n\">celery</span> <span class=\"o\">-</span><span class=\"n\">A</span> <span class=\"n\">project</span> <span class=\"n\">worker</span> <span class=\"o\">-</span><span class=\"n\">l</span> <span class=\"n\">info</span>\n</pre>\n</div>\n\n          </div>"}, "last_serial": 2493448, "releases": {"0.28": [{"comment_text": "", "digests": {"md5": "200a3f047c0a305762a5a7660d212553", "sha256": "c9aa5f4a117bbecaec2d0fd4a994556327ebe0e4dd6aa0b85b810cadc3b9ceb7"}, "downloads": -1, "filename": "orangeapisms-0.28.tar.gz", "has_sig": false, "md5_digest": "200a3f047c0a305762a5a7660d212553", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17791, "upload_time": "2016-12-01T10:44:29", "upload_time_iso_8601": "2016-12-01T10:44:29.721979Z", "url": "https://files.pythonhosted.org/packages/c4/5a/f3b7863dd50eb1042ae5899972146e3cefe6869d65f64ba85916d8e3b802/orangeapisms-0.28.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "200a3f047c0a305762a5a7660d212553", "sha256": "c9aa5f4a117bbecaec2d0fd4a994556327ebe0e4dd6aa0b85b810cadc3b9ceb7"}, "downloads": -1, "filename": "orangeapisms-0.28.tar.gz", "has_sig": false, "md5_digest": "200a3f047c0a305762a5a7660d212553", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17791, "upload_time": "2016-12-01T10:44:29", "upload_time_iso_8601": "2016-12-01T10:44:29.721979Z", "url": "https://files.pythonhosted.org/packages/c4/5a/f3b7863dd50eb1042ae5899972146e3cefe6869d65f64ba85916d8e3b802/orangeapisms-0.28.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:01:49 2020"}