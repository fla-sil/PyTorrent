{"info": {"author": "Savino Piccolomo", "author_email": "piccolomo@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "Intended Audience :: End Users/Desktop", "License :: OSI Approved :: MIT License", "Programming Language :: Python", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Topic :: Software Development :: Libraries", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "The package **plotext** allows to plot data directly on terminal. \n\n\nBasic Example\n=============\n\nHere is a basic example of plotting data on terminal using the *plotext* package\n\n![example](https://user-images.githubusercontent.com/56689657/73862927-2dfa4900-4837-11ea-926a-4718821368ea.png)\nEach data point is represented by a character (in this case a blue \u2022).\nThe column and row numbers are displayed respectively on the *x* and *y* axis; the two equations at the end of the plot allow the user to convert the column/row numbers in the correspondent real *x/y* coordinates of the original data; the uncertainties are due to the terminal pixel dimension correspondent to one character.\n\n\n\nInstallation\n============\n\nTo install the latest version of the *plotext* package use the following command:\n```\nsudo -H pip install plotext\n```\n\n\n\nHow to Use\n==========\n\nTo import the package in python 3 use the command:\n```\nimport plotext.plot as plx\n```\nTo plot a scatter plot of data you could use a command like this:\n```\nplx.scatter(x, y)\n```\nwhere x and y are the lists of data for respectively the *x* and *y* coordinates; optionally, a single *y* list could be provided.  \n\nTo plot data points connected by straight lines use instead:\n```\nplx.plot(x, y)\n```\nIn order to show the final result just add:\n```\nplx.show()\n```\nIn the following we provide examples on how to use the *scatter* function with additional options; the same options could be used for the *plot* function.\n\n\n\nPlot Dimensions\n===============\n\nIf no dimension settings are provided, the plot will automatically cover the entire terminal canvas. To manually set the plot canvas dimension, use a command like this:\n```\nplx.scatter(x, y, cols=90, rows=30)\n```\nwhich would set the width of the plot to 90 characters and the height to 30 characters. If only one of the two dimensions are provided, the other will automatically be set to the highest value allowed by the the terminal size. If one of the dimensions provided is bigger then the maximum allowed by the canvas size, it will automatically be reset to its highest value allowed by the the terminal size.\n\nAn alternative way to set the canvas dimension is to use the following equivalent commands:\n```\nplx.scatter(x, y)\nplx.set_cols(90)\nplx.set_rows(30)\n```\nYou can access the value set for *cols* and *rows* respectively with the following commands:\n```\nplx.get_cols()\nplx.get_rows()\n```\nYou can access the terminal size with the command:\n```\nplx.get_terminal_size()\n```\nwhich returns the width and height of the terminal canvas.\n\n\n\n\nPoint Style\n===========\n\nIn order to chose whatever or not to show each data point use a command like this:\n```\nplx.scatter(x, y, point=True)\n```\nwhere the default value is True for the *scatter* function and *False* for the *plot* function. Alternatively after the *scatter* function with:\n```\nplx.set_point(True)\n```\nYou can access the value set for the option *point* with the following command:\n```\nplx.get_point()\n```\nIn order to change the marker used for each data point use a command like this:\n```\nplx.scatter(x, y, point_marker='*')\n```\nwhere only single characters are allowed; the default value is \u2022. Alternatively after the *scatter* function with:\n```\nplx.set_point_marker('*')\n```\nYou can access the value set for the option *point_marker* with the following command:\n```\nplx.get_point_marker()\n```\nIn order to change the color of the point marker use a command like this:\n```\nplx.scatter(x, y, point_color='red')\n```\nor, alternatively after the *scatter* function with:\n```\nplx.set_point_color('red')\n```\nTo access the available color codes use the commands:\n```\nplx.get_colors()\n```\nYou can access the value set for the option *point_color* with the following command:\n```\nplx.get_point_color()\n```\n\n\n\nLine Style\n==========\n\nIn order to chose whatever or not to plot lines between the data points use a command like this:\n```\nplx.scatter(x, y, line=True)\n```\nthe default value is False for the *scatter* function and True for the *plot* function. Alternatively after the *scatter* function with:\n```\nplx.set_line(True)\n```\nYou can access the value set for the option *line* with the following command:\n```\nplx.get_line()\n```\nIn order to change the marker used to draw the lines use a command like this:\n```\nplx.scatter(x, y, line_marker='*')\n```\nwhere only single characters are allowed; the default value is \u2022. Alternatively after the *scatter* function with:\n```\nplx.set_line_marker('*')\n```\nYou can access the value set for the option *line_marker* with the following command:\n```\nplx.get_line_marker()\n```\nIn order to change the color of the marker used for the lines use a command like this:\n```\nplx.scatter(x, y, line_color='red')\n```\nor, alternatively after the *scatter* function with:\n```\nplx.set_line_color('red')\n```\nTo access the available color codes use the commands:\n```\nplx.get_colors()\n```\nYou can access the value set for the option *line_color* with the following command:\n```\nplx.get_line_color()\n```\n\n\n\nPlot Axes\n=========\n\nYou could chose whatever or not to show the *x* and *y* axes with a command like this:\n```\nplx.scatter(x, y, axes=[True, False])\n```\nwhich would show the *x* axis while hiding the *y* axis.\n\nAlternatively you could use one of the following formats:\n```\nplx.scatter(x, y, axes=True)\nplx.scatter(x, y, axes=False)\n```\nwhich would add, in the first case, and remove, in the second, both axes.\n\nAlternatively the same options could be provided outside the *scatter* function, in this way:\n```\nplx.scatter(x, y)\nplx.set_axes([True, False])\n```\nYou can access the value set for the option *axes* with the following command:\n```\nplx.get_axes()\n```\nIn order to change the axes color (including axes ticks and equations, when present) use a command like this:\n```\nplx.scatter(x, y, axes_color='blue')\nplx.scatter(x, y, axes_color='igreen')\n```\nwhich would set the color of the axes to blue, in the first case, and inverted green in the second.\n\nTo access the available color codes use the following command:\n```\nplx.get_colors()\n```\nYou can access the value set for the option *axes_color* with the following command:\n```\nplx.get_axes_color()\n```\n\n\nAxes Ticks\n==========\n\nYou could chose whatever or not to show the *x* and *y* axes numerical ticks with commands like these:\n```\nplx.scatter(x, y, ticks=[True, False])\nplx.scatter(x, y, ticks=True)\nplx.scatter(x, y, ticks=False)\n```\nor, alternatively after the *scatter* function with a command like this:\n```\nplx.set_ticks([True, False])\n```\nYou can access the value set for the option *ticks* with the following command:\n```\nplx.get_ticks()\n```\nIn order to set the spacing between *x* and *y* ticks use a command like this:\n```\nplx.scatter(x, y, spacing=5)\nplx.scatter(x, y, spacing=[5, 8])\n```\nwhere only positive integers are allowed; a list of two numbers would set the spacing of the *x* and *y* ticks independently. Alternatively after the *scatter* function with:\n```\nplx.set_spacing([True, False])\n```\nYou can access the value set for the option *spacing* with the following command:\n```\nplx.get_spacing()\n```\n\n\nEquations\n=========\n\nIn order to chose whatever or not to show the equations at the end of the plot use a command like this:\n```\nplx.scatter(x, y, equations=True)\nplx.scatter(x, y, equations=False)\n```\nor, alternatively after the *scatter* function with:\n```\nplx.set_equations(False)\n```\nYou can access the value set for the option *equations* with the following command:\n```\nplx.get_equations()\n```\nIn order to set the number of decimal points in the equations use a command like this:\n```\nplx.scatter(x, y, decimals=4)\n```\nwhere only positive integers are allowed.\n\nYou can access the value set for the option *decimals* with the following command:\n```\nplx.get_decimals()\n```\nIn order to manually determine the real *x* coordinate from the plot column coordinates use a command like this:\n```\nplx.get_x_from_xaxis(50)\n```\nIn order to manually determine the real *y* coordinate from the plot row coordinates use a command like this:\n```\nplx.get_y_from_yaxis(20)\n```\n\n\n\nPlot Limits\n===========\n\nYou could define the plot limits with a command like this:\n```\nplx.scatter(x, y, xlim=[0, 100], ylim=[-1, 1])\n```\nwhich would sets the limits on the *x* axis between 0 and 90 and the limits on the *y* axis between -1 and 1. Note that if one of the limits is *None*, that limit would be set automatically.\n\nAlternatively the plot limits could be set outside the *scatter* function, in this way:\n```\nplx.scatter(x, y)\nplx.set_xlim([0, 100])\nplx.set_ylim([-1, 1])\n```\nYou can access the plot limit values with the following commands:\n```\nplx.get_xlim()\nplx.get_ylim()\n```\n\n\n\nPlot Data\n=========\n\nIn order to access the data being plotted you could use the following command:\n```\nplx.get_data()\n```\nwhich would return the *x* and *y* list provided in the *scatter* or *plot* function. \n\nIn order to access the length of the data list being plotted you could use the following command:\n```\nplx.get_length()\n```\n\n\n\nShow Options\n============\n\nIn order to clean the terminal before plotting the data (useful, for example, when continuously plotting data) use a command like this after the *scatter* or *plot* function:\n```\nplx.show(clear=True)\n```\nYou can access the value set for the option *clear* with the following command:\n```\nplx.get_clear()\n```\nWhen continuously plotting data it may be useful to add a sleeping time between plots in order to minimize undesired screen flashing. Use a command like this:\n```\nplx.show(sleep=0.01)\nplx.show(sleep=False)\n```\nwhere the unit is seconds.\n\nYou can access the value set for the option *sleep* with the following command:\n```\nplx.get_sleep()\n```\n\n\nPackage Version\n===============\nIn order to check the installed version of the package use a command like this:\n```\nplx.get_version()\n\n```\n\nFurther Documentation\n=====================\n\nThe full documentation of any of the functions shown above could be accessed using commands like these:\n```\nprint(plx.scatter.__doc__)\nprint(plx.plot.__doc__)\nprint(plx.clear.__doc__)\n```\n\n\nCredits\n=======\n- Author: Savino Piccolomo\n- e-mail: piccolomo@gmail.com\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/piccolomo/plotext", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "plotext", "package_url": "https://pypi.org/project/plotext/", "platform": "", "project_url": "https://pypi.org/project/plotext/", "project_urls": {"Homepage": "https://github.com/piccolomo/plotext"}, "release_url": "https://pypi.org/project/plotext/0.1.16/", "requires_dist": ["numpy"], "requires_python": ">=3.5", "summary": "plotext plots data directly on terminal", "version": "0.1.16", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>The package <strong>plotext</strong> allows to plot data directly on terminal.</p>\n<h1>Basic Example</h1>\n<p>Here is a basic example of plotting data on terminal using the <em>plotext</em> package</p>\n<p><img alt=\"example\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9b86b9cbe10625cb875bdfb815a9d6b6ce9bf64e/68747470733a2f2f757365722d696d616765732e67697468756275736572636f6e74656e742e636f6d2f35363638393635372f37333836323932372d32646661343930302d343833372d313165612d393236612d3437313838323133363865612e706e67\">\nEach data point is represented by a character (in this case a blue \u2022).\nThe column and row numbers are displayed respectively on the <em>x</em> and <em>y</em> axis; the two equations at the end of the plot allow the user to convert the column/row numbers in the correspondent real <em>x/y</em> coordinates of the original data; the uncertainties are due to the terminal pixel dimension correspondent to one character.</p>\n<h1>Installation</h1>\n<p>To install the latest version of the <em>plotext</em> package use the following command:</p>\n<pre><code>sudo -H pip install plotext\n</code></pre>\n<h1>How to Use</h1>\n<p>To import the package in python 3 use the command:</p>\n<pre><code>import plotext.plot as plx\n</code></pre>\n<p>To plot a scatter plot of data you could use a command like this:</p>\n<pre><code>plx.scatter(x, y)\n</code></pre>\n<p>where x and y are the lists of data for respectively the <em>x</em> and <em>y</em> coordinates; optionally, a single <em>y</em> list could be provided.</p>\n<p>To plot data points connected by straight lines use instead:</p>\n<pre><code>plx.plot(x, y)\n</code></pre>\n<p>In order to show the final result just add:</p>\n<pre><code>plx.show()\n</code></pre>\n<p>In the following we provide examples on how to use the <em>scatter</em> function with additional options; the same options could be used for the <em>plot</em> function.</p>\n<h1>Plot Dimensions</h1>\n<p>If no dimension settings are provided, the plot will automatically cover the entire terminal canvas. To manually set the plot canvas dimension, use a command like this:</p>\n<pre><code>plx.scatter(x, y, cols=90, rows=30)\n</code></pre>\n<p>which would set the width of the plot to 90 characters and the height to 30 characters. If only one of the two dimensions are provided, the other will automatically be set to the highest value allowed by the the terminal size. If one of the dimensions provided is bigger then the maximum allowed by the canvas size, it will automatically be reset to its highest value allowed by the the terminal size.</p>\n<p>An alternative way to set the canvas dimension is to use the following equivalent commands:</p>\n<pre><code>plx.scatter(x, y)\nplx.set_cols(90)\nplx.set_rows(30)\n</code></pre>\n<p>You can access the value set for <em>cols</em> and <em>rows</em> respectively with the following commands:</p>\n<pre><code>plx.get_cols()\nplx.get_rows()\n</code></pre>\n<p>You can access the terminal size with the command:</p>\n<pre><code>plx.get_terminal_size()\n</code></pre>\n<p>which returns the width and height of the terminal canvas.</p>\n<h1>Point Style</h1>\n<p>In order to chose whatever or not to show each data point use a command like this:</p>\n<pre><code>plx.scatter(x, y, point=True)\n</code></pre>\n<p>where the default value is True for the <em>scatter</em> function and <em>False</em> for the <em>plot</em> function. Alternatively after the <em>scatter</em> function with:</p>\n<pre><code>plx.set_point(True)\n</code></pre>\n<p>You can access the value set for the option <em>point</em> with the following command:</p>\n<pre><code>plx.get_point()\n</code></pre>\n<p>In order to change the marker used for each data point use a command like this:</p>\n<pre><code>plx.scatter(x, y, point_marker='*')\n</code></pre>\n<p>where only single characters are allowed; the default value is \u2022. Alternatively after the <em>scatter</em> function with:</p>\n<pre><code>plx.set_point_marker('*')\n</code></pre>\n<p>You can access the value set for the option <em>point_marker</em> with the following command:</p>\n<pre><code>plx.get_point_marker()\n</code></pre>\n<p>In order to change the color of the point marker use a command like this:</p>\n<pre><code>plx.scatter(x, y, point_color='red')\n</code></pre>\n<p>or, alternatively after the <em>scatter</em> function with:</p>\n<pre><code>plx.set_point_color('red')\n</code></pre>\n<p>To access the available color codes use the commands:</p>\n<pre><code>plx.get_colors()\n</code></pre>\n<p>You can access the value set for the option <em>point_color</em> with the following command:</p>\n<pre><code>plx.get_point_color()\n</code></pre>\n<h1>Line Style</h1>\n<p>In order to chose whatever or not to plot lines between the data points use a command like this:</p>\n<pre><code>plx.scatter(x, y, line=True)\n</code></pre>\n<p>the default value is False for the <em>scatter</em> function and True for the <em>plot</em> function. Alternatively after the <em>scatter</em> function with:</p>\n<pre><code>plx.set_line(True)\n</code></pre>\n<p>You can access the value set for the option <em>line</em> with the following command:</p>\n<pre><code>plx.get_line()\n</code></pre>\n<p>In order to change the marker used to draw the lines use a command like this:</p>\n<pre><code>plx.scatter(x, y, line_marker='*')\n</code></pre>\n<p>where only single characters are allowed; the default value is \u2022. Alternatively after the <em>scatter</em> function with:</p>\n<pre><code>plx.set_line_marker('*')\n</code></pre>\n<p>You can access the value set for the option <em>line_marker</em> with the following command:</p>\n<pre><code>plx.get_line_marker()\n</code></pre>\n<p>In order to change the color of the marker used for the lines use a command like this:</p>\n<pre><code>plx.scatter(x, y, line_color='red')\n</code></pre>\n<p>or, alternatively after the <em>scatter</em> function with:</p>\n<pre><code>plx.set_line_color('red')\n</code></pre>\n<p>To access the available color codes use the commands:</p>\n<pre><code>plx.get_colors()\n</code></pre>\n<p>You can access the value set for the option <em>line_color</em> with the following command:</p>\n<pre><code>plx.get_line_color()\n</code></pre>\n<h1>Plot Axes</h1>\n<p>You could chose whatever or not to show the <em>x</em> and <em>y</em> axes with a command like this:</p>\n<pre><code>plx.scatter(x, y, axes=[True, False])\n</code></pre>\n<p>which would show the <em>x</em> axis while hiding the <em>y</em> axis.</p>\n<p>Alternatively you could use one of the following formats:</p>\n<pre><code>plx.scatter(x, y, axes=True)\nplx.scatter(x, y, axes=False)\n</code></pre>\n<p>which would add, in the first case, and remove, in the second, both axes.</p>\n<p>Alternatively the same options could be provided outside the <em>scatter</em> function, in this way:</p>\n<pre><code>plx.scatter(x, y)\nplx.set_axes([True, False])\n</code></pre>\n<p>You can access the value set for the option <em>axes</em> with the following command:</p>\n<pre><code>plx.get_axes()\n</code></pre>\n<p>In order to change the axes color (including axes ticks and equations, when present) use a command like this:</p>\n<pre><code>plx.scatter(x, y, axes_color='blue')\nplx.scatter(x, y, axes_color='igreen')\n</code></pre>\n<p>which would set the color of the axes to blue, in the first case, and inverted green in the second.</p>\n<p>To access the available color codes use the following command:</p>\n<pre><code>plx.get_colors()\n</code></pre>\n<p>You can access the value set for the option <em>axes_color</em> with the following command:</p>\n<pre><code>plx.get_axes_color()\n</code></pre>\n<h1>Axes Ticks</h1>\n<p>You could chose whatever or not to show the <em>x</em> and <em>y</em> axes numerical ticks with commands like these:</p>\n<pre><code>plx.scatter(x, y, ticks=[True, False])\nplx.scatter(x, y, ticks=True)\nplx.scatter(x, y, ticks=False)\n</code></pre>\n<p>or, alternatively after the <em>scatter</em> function with a command like this:</p>\n<pre><code>plx.set_ticks([True, False])\n</code></pre>\n<p>You can access the value set for the option <em>ticks</em> with the following command:</p>\n<pre><code>plx.get_ticks()\n</code></pre>\n<p>In order to set the spacing between <em>x</em> and <em>y</em> ticks use a command like this:</p>\n<pre><code>plx.scatter(x, y, spacing=5)\nplx.scatter(x, y, spacing=[5, 8])\n</code></pre>\n<p>where only positive integers are allowed; a list of two numbers would set the spacing of the <em>x</em> and <em>y</em> ticks independently. Alternatively after the <em>scatter</em> function with:</p>\n<pre><code>plx.set_spacing([True, False])\n</code></pre>\n<p>You can access the value set for the option <em>spacing</em> with the following command:</p>\n<pre><code>plx.get_spacing()\n</code></pre>\n<h1>Equations</h1>\n<p>In order to chose whatever or not to show the equations at the end of the plot use a command like this:</p>\n<pre><code>plx.scatter(x, y, equations=True)\nplx.scatter(x, y, equations=False)\n</code></pre>\n<p>or, alternatively after the <em>scatter</em> function with:</p>\n<pre><code>plx.set_equations(False)\n</code></pre>\n<p>You can access the value set for the option <em>equations</em> with the following command:</p>\n<pre><code>plx.get_equations()\n</code></pre>\n<p>In order to set the number of decimal points in the equations use a command like this:</p>\n<pre><code>plx.scatter(x, y, decimals=4)\n</code></pre>\n<p>where only positive integers are allowed.</p>\n<p>You can access the value set for the option <em>decimals</em> with the following command:</p>\n<pre><code>plx.get_decimals()\n</code></pre>\n<p>In order to manually determine the real <em>x</em> coordinate from the plot column coordinates use a command like this:</p>\n<pre><code>plx.get_x_from_xaxis(50)\n</code></pre>\n<p>In order to manually determine the real <em>y</em> coordinate from the plot row coordinates use a command like this:</p>\n<pre><code>plx.get_y_from_yaxis(20)\n</code></pre>\n<h1>Plot Limits</h1>\n<p>You could define the plot limits with a command like this:</p>\n<pre><code>plx.scatter(x, y, xlim=[0, 100], ylim=[-1, 1])\n</code></pre>\n<p>which would sets the limits on the <em>x</em> axis between 0 and 90 and the limits on the <em>y</em> axis between -1 and 1. Note that if one of the limits is <em>None</em>, that limit would be set automatically.</p>\n<p>Alternatively the plot limits could be set outside the <em>scatter</em> function, in this way:</p>\n<pre><code>plx.scatter(x, y)\nplx.set_xlim([0, 100])\nplx.set_ylim([-1, 1])\n</code></pre>\n<p>You can access the plot limit values with the following commands:</p>\n<pre><code>plx.get_xlim()\nplx.get_ylim()\n</code></pre>\n<h1>Plot Data</h1>\n<p>In order to access the data being plotted you could use the following command:</p>\n<pre><code>plx.get_data()\n</code></pre>\n<p>which would return the <em>x</em> and <em>y</em> list provided in the <em>scatter</em> or <em>plot</em> function.</p>\n<p>In order to access the length of the data list being plotted you could use the following command:</p>\n<pre><code>plx.get_length()\n</code></pre>\n<h1>Show Options</h1>\n<p>In order to clean the terminal before plotting the data (useful, for example, when continuously plotting data) use a command like this after the <em>scatter</em> or <em>plot</em> function:</p>\n<pre><code>plx.show(clear=True)\n</code></pre>\n<p>You can access the value set for the option <em>clear</em> with the following command:</p>\n<pre><code>plx.get_clear()\n</code></pre>\n<p>When continuously plotting data it may be useful to add a sleeping time between plots in order to minimize undesired screen flashing. Use a command like this:</p>\n<pre><code>plx.show(sleep=0.01)\nplx.show(sleep=False)\n</code></pre>\n<p>where the unit is seconds.</p>\n<p>You can access the value set for the option <em>sleep</em> with the following command:</p>\n<pre><code>plx.get_sleep()\n</code></pre>\n<h1>Package Version</h1>\n<p>In order to check the installed version of the package use a command like this:</p>\n<pre><code>plx.get_version()\n\n</code></pre>\n<h1>Further Documentation</h1>\n<p>The full documentation of any of the functions shown above could be accessed using commands like these:</p>\n<pre><code>print(plx.scatter.__doc__)\nprint(plx.plot.__doc__)\nprint(plx.clear.__doc__)\n</code></pre>\n<h1>Credits</h1>\n<ul>\n<li>Author: Savino Piccolomo</li>\n<li>e-mail: <a href=\"mailto:piccolomo@gmail.com\">piccolomo@gmail.com</a></li>\n</ul>\n\n          </div>"}, "last_serial": 7160045, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "a11a301a2d34286bc79efd7204c399f3", "sha256": "522f6136c03a7e8cecd9f61069e2ecaa85929e2e03db7c6fb5560651411f156f"}, "downloads": -1, "filename": "plotext-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "a11a301a2d34286bc79efd7204c399f3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 7975, "upload_time": "2019-10-20T15:52:47", "upload_time_iso_8601": "2019-10-20T15:52:47.698046Z", "url": "https://files.pythonhosted.org/packages/12/86/dc43c1792ad7134e9189058db8586cda21945a59bc0c1dd6299c344aa5a5/plotext-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3ba4db5021b8113bd661f328ad6a628f", "sha256": "d179e963d41511e6fc81aabdbef0f4d6f25c494fd41db30c37e9ff37876cd4fa"}, "downloads": -1, "filename": "plotext-0.1.0.tar.gz", "has_sig": false, "md5_digest": "3ba4db5021b8113bd661f328ad6a628f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 6881, "upload_time": "2019-10-20T15:52:49", "upload_time_iso_8601": "2019-10-20T15:52:49.203886Z", "url": "https://files.pythonhosted.org/packages/19/89/864ef00610107f9c2dcef9d414f1aaceadf10b9b7e70ef95e07d037097b1/plotext-0.1.0.tar.gz", "yanked": false}], "0.1.13": [{"comment_text": "", "digests": {"md5": "519fbd0e8cc880171bc517abf20a2d0d", "sha256": "6dba4b1da037ca235960e67ef67a2644a9dd750f0173e180ff0533e9058636d4"}, "downloads": -1, "filename": "plotext-0.1.13-py3-none-any.whl", "has_sig": false, "md5_digest": "519fbd0e8cc880171bc517abf20a2d0d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 10392, "upload_time": "2020-02-05T16:53:09", "upload_time_iso_8601": "2020-02-05T16:53:09.530975Z", "url": "https://files.pythonhosted.org/packages/8c/8a/b248906628075086a0131d490b51bacfcffcfdb53fcc1eb7e830d7b127e4/plotext-0.1.13-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1418adccb30b36ff6e43f173e7d6badf", "sha256": "0d838d31503515f566c989997c597d59c3f69c17172a2b2ff7e9ee4decdce14e"}, "downloads": -1, "filename": "plotext-0.1.13.tar.gz", "has_sig": false, "md5_digest": "1418adccb30b36ff6e43f173e7d6badf", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 12394, "upload_time": "2020-02-05T16:53:10", "upload_time_iso_8601": "2020-02-05T16:53:10.689534Z", "url": "https://files.pythonhosted.org/packages/f7/d6/c64c882f628ad1b67f9581755d7f6bdcfce90b1a5b618547d5d48f019e81/plotext-0.1.13.tar.gz", "yanked": false}], "0.1.14": [{"comment_text": "", "digests": {"md5": "5804319719295a6472b4f1958de378fc", "sha256": "880e1af50e51ab5d617e9d0024da6d47591e23e37096d751bd613b43418a3a38"}, "downloads": -1, "filename": "plotext-0.1.14-py3-none-any.whl", "has_sig": false, "md5_digest": "5804319719295a6472b4f1958de378fc", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 16283, "upload_time": "2020-05-03T17:43:51", "upload_time_iso_8601": "2020-05-03T17:43:51.306813Z", "url": "https://files.pythonhosted.org/packages/5c/70/e4b068a40d0c08372ebb2d10d2263c2ac0b0004958b5862d7497f62d712c/plotext-0.1.14-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "66cf08210c1f0d9819e240b7c01feb06", "sha256": "6ca90df75aab7012514f1d71b8075b48cec16eb8b20c752d720df624958784c2"}, "downloads": -1, "filename": "plotext-0.1.14.tar.gz", "has_sig": false, "md5_digest": "66cf08210c1f0d9819e240b7c01feb06", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 13081, "upload_time": "2020-05-03T17:43:53", "upload_time_iso_8601": "2020-05-03T17:43:53.160290Z", "url": "https://files.pythonhosted.org/packages/66/b1/c49efebc64821d6ad6372697e2344209005f1489d36ab9cac8d577e38f6a/plotext-0.1.14.tar.gz", "yanked": false}], "0.1.15": [{"comment_text": "", "digests": {"md5": "1803820292fb0215193dfbd606fecae6", "sha256": "31590c8ac22af2d6835f2570a74891300f22bad623cda1c20a2a12331bff1232"}, "downloads": -1, "filename": "plotext-0.1.15-py3-none-any.whl", "has_sig": false, "md5_digest": "1803820292fb0215193dfbd606fecae6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 16519, "upload_time": "2020-05-03T19:23:49", "upload_time_iso_8601": "2020-05-03T19:23:49.573499Z", "url": "https://files.pythonhosted.org/packages/bd/8f/a6d2238cbeb243beaa72f8d8df45ccfc7370f7d02d557551e47d3a12d2f5/plotext-0.1.15-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "16e7f25af7f741573cdc6c8c418a09b3", "sha256": "11e5ee75d3a03d5d9ccf802111b28b08fe5663f9700abaffdd085ce40fe498fa"}, "downloads": -1, "filename": "plotext-0.1.15.tar.gz", "has_sig": false, "md5_digest": "16e7f25af7f741573cdc6c8c418a09b3", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 13295, "upload_time": "2020-05-03T19:23:51", "upload_time_iso_8601": "2020-05-03T19:23:51.366032Z", "url": "https://files.pythonhosted.org/packages/15/31/0575b6547f978ad14384fa853e8a4561d4ec3fae0689b3917ed6705ac500/plotext-0.1.15.tar.gz", "yanked": false}], "0.1.16": [{"comment_text": "", "digests": {"md5": "f4f58d58d7a8c2ca75327692d7a39f28", "sha256": "f5840b3d93de608065b25d58a2d2b63d4ae395a53b4c4ad66ae09caa1f3296b4"}, "downloads": -1, "filename": "plotext-0.1.16-py3-none-any.whl", "has_sig": false, "md5_digest": "f4f58d58d7a8c2ca75327692d7a39f28", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 16578, "upload_time": "2020-05-03T22:08:46", "upload_time_iso_8601": "2020-05-03T22:08:46.518316Z", "url": "https://files.pythonhosted.org/packages/46/3a/2b0604fcca3e8b219d1ab904682e4dee65a2db89b8bf5e38e550e9c616ff/plotext-0.1.16-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a49cbf46535c932f299291084c3269aa", "sha256": "7f0825ad26c4380373211a735e10fcdf92ad209ffe050948fcfe868c7e39244f"}, "downloads": -1, "filename": "plotext-0.1.16.tar.gz", "has_sig": false, "md5_digest": "a49cbf46535c932f299291084c3269aa", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 13409, "upload_time": "2020-05-03T22:08:47", "upload_time_iso_8601": "2020-05-03T22:08:47.870107Z", "url": "https://files.pythonhosted.org/packages/b2/08/00caa9976afc8ccf550b03dc243a5fb2ed4482b90bb9d1b2ff50f2e5f229/plotext-0.1.16.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "3c41660e4cffea0eac8d1db0e222a4ba", "sha256": "cd2ed87691baa7afb4ecd3f7ee6a279bfda530125096556a3259d9daff833c7f"}, "downloads": -1, "filename": "plotext-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "3c41660e4cffea0eac8d1db0e222a4ba", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 7965, "upload_time": "2019-10-20T20:45:38", "upload_time_iso_8601": "2019-10-20T20:45:38.472571Z", "url": "https://files.pythonhosted.org/packages/4c/66/40c9fe2644e5ff9f02bc18ecade2c2d7e5666f815214174d80124b3e9463/plotext-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5d92a783c266589f45a92d64fd771ca6", "sha256": "57e60f7122fb1303d8e05465c000fccb4565567fd283feb7c5d8d4e3f112b532"}, "downloads": -1, "filename": "plotext-0.1.2.tar.gz", "has_sig": false, "md5_digest": "5d92a783c266589f45a92d64fd771ca6", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 6862, "upload_time": "2019-10-20T20:45:40", "upload_time_iso_8601": "2019-10-20T20:45:40.643038Z", "url": "https://files.pythonhosted.org/packages/8e/af/4deb656ba61448fd817aac06d1515682794cc49af8c1b7c41fe9b8ed1c6a/plotext-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "faea2a4704b7dedf6a466201ee343194", "sha256": "3351f525ccf36ebe86a2e5887ff7194cbbd3ee7f5fb49e0fb4e23a73a57b0e0e"}, "downloads": -1, "filename": "plotext-0.1.3-py3-none-any.whl", "has_sig": false, "md5_digest": "faea2a4704b7dedf6a466201ee343194", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 10643, "upload_time": "2020-01-19T12:43:24", "upload_time_iso_8601": "2020-01-19T12:43:24.870765Z", "url": "https://files.pythonhosted.org/packages/21/79/3bf54a1cf41185dc3aedb4e9406aecefb21573962232b3bc2678058f0fa7/plotext-0.1.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "55d8c0f16a15c75b4f4895031fcdca65", "sha256": "ff1d63a42159bede86137eed660c336e14f8b0ae7b0c48c95232da0980988b7b"}, "downloads": -1, "filename": "plotext-0.1.3.tar.gz", "has_sig": false, "md5_digest": "55d8c0f16a15c75b4f4895031fcdca65", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 13041, "upload_time": "2020-01-19T12:43:26", "upload_time_iso_8601": "2020-01-19T12:43:26.557913Z", "url": "https://files.pythonhosted.org/packages/d7/8b/5cb4a0e896ff0468b56d1c65e7e6d8369872b90d1f5fd7120840e70f24c8/plotext-0.1.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f4f58d58d7a8c2ca75327692d7a39f28", "sha256": "f5840b3d93de608065b25d58a2d2b63d4ae395a53b4c4ad66ae09caa1f3296b4"}, "downloads": -1, "filename": "plotext-0.1.16-py3-none-any.whl", "has_sig": false, "md5_digest": "f4f58d58d7a8c2ca75327692d7a39f28", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 16578, "upload_time": "2020-05-03T22:08:46", "upload_time_iso_8601": "2020-05-03T22:08:46.518316Z", "url": "https://files.pythonhosted.org/packages/46/3a/2b0604fcca3e8b219d1ab904682e4dee65a2db89b8bf5e38e550e9c616ff/plotext-0.1.16-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a49cbf46535c932f299291084c3269aa", "sha256": "7f0825ad26c4380373211a735e10fcdf92ad209ffe050948fcfe868c7e39244f"}, "downloads": -1, "filename": "plotext-0.1.16.tar.gz", "has_sig": false, "md5_digest": "a49cbf46535c932f299291084c3269aa", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 13409, "upload_time": "2020-05-03T22:08:47", "upload_time_iso_8601": "2020-05-03T22:08:47.870107Z", "url": "https://files.pythonhosted.org/packages/b2/08/00caa9976afc8ccf550b03dc243a5fb2ed4482b90bb9d1b2ff50f2e5f229/plotext-0.1.16.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:52:37 2020"}