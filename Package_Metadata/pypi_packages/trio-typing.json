{"info": {"author": "Joshua Oreman", "author_email": "oremanj@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Framework :: Trio", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "License :: OSI Approved :: MIT License", "Operating System :: MacOS :: MacOS X", "Operating System :: Microsoft :: Windows", "Operating System :: POSIX :: BSD", "Operating System :: POSIX :: Linux", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3 :: Only", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy"], "description": ".. image:: https://img.shields.io/pypi/v/trio-typing.svg\n   :target: https://pypi.org/project/trio-typing\n   :alt: Latest PyPI version\n\n.. image:: https://travis-ci.org/python-trio/trio-typing.svg?branch=master\n   :target: https://travis-ci.org/python-trio/trio-typing\n   :alt: Automated test status\n\n.. image:: https://img.shields.io/badge/code%20style-black-000000.svg\n   :target: https://github.com/ambv/black\n   :alt: Code style: black\n\n.. image:: http://www.mypy-lang.org/static/mypy_badge.svg\n   :target: http://www.mypy-lang.org/\n   :alt: Checked with mypy\n\ntrio-typing: static typing for Trio and related projects\n========================================================\n\nThis repository provides:\n\n* PEP 561 typing stubs packages for the Trio project packages:\n\n  * `trio <https://github.com/python-trio/trio>`__ (``trio-stubs``)\n\n  * `outcome <https://github.com/python-trio/outcome>`__ (``outcome-stubs``)\n\n  * `async_generator <https://github.com/python-trio/async_generator>`__\n    (``async_generator-stubs``)\n\n* A package ``trio_typing`` containing types that Trio programs often want\n  to refer to (``AsyncGenerator[Y, S]`` and ``TaskStatus[T]``) and a mypy\n  plugin that smooths over some limitations in the basic type hints.\n  (``Nursery`` is exported publicly by mainline Trio as of version 0.12.0.)\n\n\nSupported platforms\n~~~~~~~~~~~~~~~~~~~\n\nTo **type-check** code that uses ``trio-typing``, you need CPython 3.5.2\nor later.  (Mypy requires 3.5.2+, and its dependency ``typed-ast``\ndoesn't support PyPy.)  We test on Linux using the latest releases\nfrom the 3.5, 3.6, and 3.7 branches, as well as 3.8-dev nightly. We're\nnot knowingly doing anything OS-specific, so other OSes should work\ntoo.\n\nYou can **run** code that uses ``trio-typing`` on any platform\nsupported by Trio, includng PyPy and CPython 3.5.0 and 3.5.1.\n\nType checkers other than Mypy are not supported, but might work.\nExperience reports and patches to add support are welcome.\n\n\nQuickstart\n~~~~~~~~~~\n\nInstall with::\n\n    pip install -U trio-typing\n\nEnable the plugin in your ``mypy.ini`` (optional, but recommended)::\n\n    [mypy]\n    plugins = trio_typing.plugin\n\nStart running mypy on your Trio code! You may want to import some typing\nnames from ``trio_typing``, like ``TaskStatus``; see below\nfor more details.\n\n\nWhat's in the box?\n~~~~~~~~~~~~~~~~~~\n\nThe stubs packages provide types for all public non-deprecated APIs of\n``trio``, ``outcome``, and ``async_generator``, as of the release date\nof the corresponding ``trio-typing`` distribution. You don't need to\nexplicitly configure these; just say ``import trio`` (for example)\nand mypy will know to look in ``trio-stubs`` for the type information.\n\nThe ``trio_typing`` package provides:\n\n* ``TaskStatus[T]``, the type of the object passed as the ``task_status``\n  argument to a task started with ``nursery.start()``. The type parameter\n  ``T`` is the type of the value the task provides to be returned from\n  ``nursery.start()``. This is implemented as an ABC, and the actual\n  private types inside Trio are registered as virtual subclasses\n  of it. So, you can't instantiate ``trio_typing.TaskStatus``, but\n  ``isinstance(task_status, trio_typing.TaskStatus)`` where ``task_status``\n  is a Trio task status object does return True.\n\n* (Previous versions of ``trio_typing`` provided an analogous ABC for\n  ``Nursery``, but the actual class is available as ``trio.Nursery`` as of\n  Trio 0.12.0; you should use that instead.)\n\n* A backport of ``typing.AsyncGenerator[YieldT, SendT]`` to Python 3.5.\n  (``YieldT`` is the type of values yielded by the generator, and\n  ``SendT`` is the type of values it accepts as an argument to ``asend()``.)\n  This is an abstract class describing the async generator interface:\n  ``AsyncIterator`` plus ``asend``, ``athrow``, ``aclose``, and the\n  ``ag_*`` introspection attributes. On 3.6+, ``trio_typing.AsyncGenerator``\n  is just a reexport of ``typing.AsyncGenerator``.\n\n* ``CompatAsyncGenerator[YieldT, SendT, ReturnT]``,\n  a name for the otherwise-anonymous concrete async generator type\n  returned by ``@async_generator`` functions. It is a subtype of\n  ``AsyncGenerator[YieldT, SendT]`` and provides the same methods.\n  (Native async generators don't have a ``ReturnT``; it is only relevant\n  in determining the return type of ``await async_generator.yield_from_()``.)\n\n* A few types that are only useful with the mypy plugin: ``YieldType[T]``,\n  ``SendType[T]``, and the decorator ``@takes_callable_and_args``.\n\nThe ``trio_typing.plugin`` mypy plugin provides:\n\n* Argument type checking for functions decorated with\n  ``@asynccontextmanager`` (either the one in ``async_generator`` or the\n  one in 3.7+ ``contextlib``) and ``@async_generator``\n\n* Inference of more specific ``trio.open_file()`` and ``trio.Path.open()``\n  return types based on constant ``mode`` and ``buffering`` arguments, so\n  ``await trio.open_file(\"foo\", \"rb\", 0)`` returns an unbuffered async\n  file object in binary mode and ``await trio.open_file(\"bar\")`` returns\n  an async file object in text mode\n\n* Signature checking for ``task_status.started()`` with no arguments,\n  so it raises an error if the ``task_status`` object is not of type\n  ``TaskStatus[None]``\n\n* Boilerplate reduction for functions that take parameters ``(fn, *args)``\n  and ultimately invoke ``fn(*args)``: just write::\n\n      from mypy_extensions import VarArg\n\n      @trio_typing.takes_callable_and_args\n      def start_soon(\n          async_fn: Callable[[VarArg()], Awaitable[T]],\n          *args: Any,\n          other_keywords: str = are_ok_too,\n      ):\n          # your implementation here\n\n  ``start_soon(async_fn, *args)`` will raise an error if ``async_fn(*args)``\n  would do so. You can also make the callable take some non-splatted\n  arguments; the ``*args`` get inserted at whatever position in the\n  argument list you write ``VarArg()``.\n\n  The above example will always fail when the plugin is not being\n  used. If you want to always pass in such cases, you can use a union::\n\n      @trio_typing.takes_callable_and_args\n      def start_soon(\n          async_fn: Union[\n              Callable[..., Awaitable[T]],\n              Callable[[VarArg()], Awaitable[T]],\n          ],\n          *args: Any,\n          other_keywords: str = are_ok_too,\n      ):\n          # your implementation here\n\n  Without the plugin, this type-checks fine (and allows inference of\n  ``T``), since any callable will match the ``Callable[...,\n  Awaitable[T]]`` option. With the plugin, the entire union will be\n  replaced with specific argument types.\n\n  Note: due to mypy limitations, we only support a maximum of 5\n  positional arguments, and keyword arguments can't be passed in this way;\n  ``nursery.start_soon(functools.partial(...))`` will pass the type checker\n  but won't be able to actually check the argument types.\n\n* Mostly-full support for type checking ``@async_generator`` functions.\n  You write the decorated function as if it returned a union of its actual\n  return type, its yield type wrapped in ``YieldType[]``, and its send\n  type wrapped in ``SendType[]``::\n\n      from trio_typing import YieldType, SendType\n      @async_generator\n      async def sleep_and_sqrt() -> Union[None, SendType[int], YieldType[float]]:\n          next_yield = 0.0\n          while True:\n              amount = await yield_(next_yield)  # amount is an int\n              if amount < 0:\n                  return None\n              await trio.sleep(amount)\n              next_yield = math.sqrt(amount)\n\n      # prints: CompatAsyncGenerator[float, int, None]\n      reveal_type(sleep_and_sqrt())\n\n  Calls to ``yield_`` and ``yield_from_`` inside an ``@async_generator``\n  function are type-checked based on these declarations. If you leave\n  off *either* the yield type or send type, the missing one is assumed\n  to be ``None``; if you leave off *both* (writing just\n  ``async def sleep_and_sqrt() -> None:``, like you would if you weren't\n  using the plugin), they're both assumed to be ``Any``.\n\n  Note the explicit ``return None``; mypy won't accept ``return`` or\n  falling off the end of the function, unless you run it with\n  ``--no-warn-no-return``.\n\n\nLimitations\n~~~~~~~~~~~\n\n* Calls to variadic Trio functions like ``trio.run()``,\n  ``nursery.start_soon()``, and so on, only can type-check up to five\n  positional arguments. (This number could be increased easily, but\n  only at the cost of slower typechecking for everyone; mypy's current\n  architecture requires that we generate overload sets initially for\n  every arity we want to be able to use.) You can work around this with\n  a ``# type: ignore`` comment.\n\n* ``outcome.capture()`` and ``outcome.acapture()`` currently don't typecheck\n  their arguments at all.\n\n\nRunning the tests\n~~~~~~~~~~~~~~~~~\n\n``trio-typing`` comes with a fairly extensive testsuite; it doesn't test all\nthe mechanical parts of the stubs, but does exercise most of the interesting\nplugin behavior. You can run it after installing, with::\n\n    pytest -p trio_typing._tests.datadriven --pyargs trio_typing\n\n\nLicense\n~~~~~~~\n\nYour choice of MIT or Apache 2.0.\n\n\n", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/python-trio/trio-typing", "keywords": "async,trio,mypy", "license": "MIT -or- Apache License 2.0", "maintainer": "", "maintainer_email": "", "name": "trio-typing", "package_url": "https://pypi.org/project/trio-typing/", "platform": "", "project_url": "https://pypi.org/project/trio-typing/", "project_urls": {"Homepage": "https://github.com/python-trio/trio-typing"}, "release_url": "https://pypi.org/project/trio-typing/0.4.0/", "requires_dist": ["trio (>=0.12.1)", "typing-extensions (>=3.7.4)", "mypy-extensions (>=0.4.2)", "mypy (>=0.750) ; implementation_name == \"cpython\""], "requires_python": "", "summary": "Static type checking support for Trio and related projects", "version": "0.4.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://pypi.org/project/trio-typing\" rel=\"nofollow\"><img alt=\"Latest PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4e92cb344d30e67e4b003e43fc1c5029a7aaa79b/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f7472696f2d747970696e672e737667\"></a>\n<a href=\"https://travis-ci.org/python-trio/trio-typing\" rel=\"nofollow\"><img alt=\"Automated test status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6fce69bb37a46f2c9e39cb720a3dbe5d52e9b76c/68747470733a2f2f7472617669732d63692e6f72672f707974686f6e2d7472696f2f7472696f2d747970696e672e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://github.com/ambv/black\" rel=\"nofollow\"><img alt=\"Code style: black\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fbfdc7754183ecf079bc71ddeabaf88f6cbc5c00/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64652532307374796c652d626c61636b2d3030303030302e737667\"></a>\n<a href=\"http://www.mypy-lang.org/\" rel=\"nofollow\"><img alt=\"Checked with mypy\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d0db8f5dcbf5f340f278004d5db3d16b4cdf33ba/687474703a2f2f7777772e6d7970792d6c616e672e6f72672f7374617469632f6d7970795f62616467652e737667\"></a>\n<div id=\"trio-typing-static-typing-for-trio-and-related-projects\">\n<h2>trio-typing: static typing for Trio and related projects</h2>\n<p>This repository provides:</p>\n<ul>\n<li>PEP 561 typing stubs packages for the Trio project packages:<ul>\n<li><a href=\"https://github.com/python-trio/trio\" rel=\"nofollow\">trio</a> (<tt><span class=\"pre\">trio-stubs</span></tt>)</li>\n<li><a href=\"https://github.com/python-trio/outcome\" rel=\"nofollow\">outcome</a> (<tt><span class=\"pre\">outcome-stubs</span></tt>)</li>\n<li><a href=\"https://github.com/python-trio/async_generator\" rel=\"nofollow\">async_generator</a>\n(<tt><span class=\"pre\">async_generator-stubs</span></tt>)</li>\n</ul>\n</li>\n<li>A package <tt>trio_typing</tt> containing types that Trio programs often want\nto refer to (<tt>AsyncGenerator[Y, S]</tt> and <tt>TaskStatus[T]</tt>) and a mypy\nplugin that smooths over some limitations in the basic type hints.\n(<tt>Nursery</tt> is exported publicly by mainline Trio as of version 0.12.0.)</li>\n</ul>\n<div id=\"supported-platforms\">\n<h3>Supported platforms</h3>\n<p>To <strong>type-check</strong> code that uses <tt><span class=\"pre\">trio-typing</span></tt>, you need CPython 3.5.2\nor later.  (Mypy requires 3.5.2+, and its dependency <tt><span class=\"pre\">typed-ast</span></tt>\ndoesn\u2019t support PyPy.)  We test on Linux using the latest releases\nfrom the 3.5, 3.6, and 3.7 branches, as well as 3.8-dev nightly. We\u2019re\nnot knowingly doing anything OS-specific, so other OSes should work\ntoo.</p>\n<p>You can <strong>run</strong> code that uses <tt><span class=\"pre\">trio-typing</span></tt> on any platform\nsupported by Trio, includng PyPy and CPython 3.5.0 and 3.5.1.</p>\n<p>Type checkers other than Mypy are not supported, but might work.\nExperience reports and patches to add support are welcome.</p>\n</div>\n<div id=\"quickstart\">\n<h3>Quickstart</h3>\n<p>Install with:</p>\n<pre>pip install -U trio-typing\n</pre>\n<p>Enable the plugin in your <tt>mypy.ini</tt> (optional, but recommended):</p>\n<pre>[mypy]\nplugins = trio_typing.plugin\n</pre>\n<p>Start running mypy on your Trio code! You may want to import some typing\nnames from <tt>trio_typing</tt>, like <tt>TaskStatus</tt>; see below\nfor more details.</p>\n</div>\n<div id=\"what-s-in-the-box\">\n<h3>What\u2019s in the box?</h3>\n<p>The stubs packages provide types for all public non-deprecated APIs of\n<tt>trio</tt>, <tt>outcome</tt>, and <tt>async_generator</tt>, as of the release date\nof the corresponding <tt><span class=\"pre\">trio-typing</span></tt> distribution. You don\u2019t need to\nexplicitly configure these; just say <tt>import trio</tt> (for example)\nand mypy will know to look in <tt><span class=\"pre\">trio-stubs</span></tt> for the type information.</p>\n<p>The <tt>trio_typing</tt> package provides:</p>\n<ul>\n<li><tt>TaskStatus[T]</tt>, the type of the object passed as the <tt>task_status</tt>\nargument to a task started with <tt>nursery.start()</tt>. The type parameter\n<tt>T</tt> is the type of the value the task provides to be returned from\n<tt>nursery.start()</tt>. This is implemented as an ABC, and the actual\nprivate types inside Trio are registered as virtual subclasses\nof it. So, you can\u2019t instantiate <tt>trio_typing.TaskStatus</tt>, but\n<tt>isinstance(task_status, trio_typing.TaskStatus)</tt> where <tt>task_status</tt>\nis a Trio task status object does return True.</li>\n<li>(Previous versions of <tt>trio_typing</tt> provided an analogous ABC for\n<tt>Nursery</tt>, but the actual class is available as <tt>trio.Nursery</tt> as of\nTrio 0.12.0; you should use that instead.)</li>\n<li>A backport of <tt>typing.AsyncGenerator[YieldT, SendT]</tt> to Python 3.5.\n(<tt>YieldT</tt> is the type of values yielded by the generator, and\n<tt>SendT</tt> is the type of values it accepts as an argument to <tt>asend()</tt>.)\nThis is an abstract class describing the async generator interface:\n<tt>AsyncIterator</tt> plus <tt>asend</tt>, <tt>athrow</tt>, <tt>aclose</tt>, and the\n<tt>ag_*</tt> introspection attributes. On 3.6+, <tt>trio_typing.AsyncGenerator</tt>\nis just a reexport of <tt>typing.AsyncGenerator</tt>.</li>\n<li><tt>CompatAsyncGenerator[YieldT, SendT, ReturnT]</tt>,\na name for the otherwise-anonymous concrete async generator type\nreturned by <tt>@async_generator</tt> functions. It is a subtype of\n<tt>AsyncGenerator[YieldT, SendT]</tt> and provides the same methods.\n(Native async generators don\u2019t have a <tt>ReturnT</tt>; it is only relevant\nin determining the return type of <tt>await async_generator.yield_from_()</tt>.)</li>\n<li>A few types that are only useful with the mypy plugin: <tt>YieldType[T]</tt>,\n<tt>SendType[T]</tt>, and the decorator <tt>@takes_callable_and_args</tt>.</li>\n</ul>\n<p>The <tt>trio_typing.plugin</tt> mypy plugin provides:</p>\n<ul>\n<li><p>Argument type checking for functions decorated with\n<tt>@asynccontextmanager</tt> (either the one in <tt>async_generator</tt> or the\none in 3.7+ <tt>contextlib</tt>) and <tt>@async_generator</tt></p>\n</li>\n<li><p>Inference of more specific <tt>trio.open_file()</tt> and <tt>trio.Path.open()</tt>\nreturn types based on constant <tt>mode</tt> and <tt>buffering</tt> arguments, so\n<tt>await <span class=\"pre\">trio.open_file(\"foo\",</span> \"rb\", 0)</tt> returns an unbuffered async\nfile object in binary mode and <tt>await <span class=\"pre\">trio.open_file(\"bar\")</span></tt> returns\nan async file object in text mode</p>\n</li>\n<li><p>Signature checking for <tt>task_status.started()</tt> with no arguments,\nso it raises an error if the <tt>task_status</tt> object is not of type\n<tt>TaskStatus[None]</tt></p>\n</li>\n<li><p>Boilerplate reduction for functions that take parameters <tt>(fn, *args)</tt>\nand ultimately invoke <tt><span class=\"pre\">fn(*args)</span></tt>: just write:</p>\n<pre>from mypy_extensions import VarArg\n\n@trio_typing.takes_callable_and_args\ndef start_soon(\n    async_fn: Callable[[VarArg()], Awaitable[T]],\n    *args: Any,\n    other_keywords: str = are_ok_too,\n):\n    # your implementation here\n</pre>\n<p><tt>start_soon(async_fn, *args)</tt> will raise an error if <tt><span class=\"pre\">async_fn(*args)</span></tt>\nwould do so. You can also make the callable take some non-splatted\narguments; the <tt>*args</tt> get inserted at whatever position in the\nargument list you write <tt>VarArg()</tt>.</p>\n<p>The above example will always fail when the plugin is not being\nused. If you want to always pass in such cases, you can use a union:</p>\n<pre>@trio_typing.takes_callable_and_args\ndef start_soon(\n    async_fn: Union[\n        Callable[..., Awaitable[T]],\n        Callable[[VarArg()], Awaitable[T]],\n    ],\n    *args: Any,\n    other_keywords: str = are_ok_too,\n):\n    # your implementation here\n</pre>\n<p>Without the plugin, this type-checks fine (and allows inference of\n<tt>T</tt>), since any callable will match the <tt><span class=\"pre\">Callable[...,</span>\nAwaitable[T]]</tt> option. With the plugin, the entire union will be\nreplaced with specific argument types.</p>\n<p>Note: due to mypy limitations, we only support a maximum of 5\npositional arguments, and keyword arguments can\u2019t be passed in this way;\n<tt><span class=\"pre\">nursery.start_soon(functools.partial(...))</span></tt> will pass the type checker\nbut won\u2019t be able to actually check the argument types.</p>\n</li>\n<li><p>Mostly-full support for type checking <tt>@async_generator</tt> functions.\nYou write the decorated function as if it returned a union of its actual\nreturn type, its yield type wrapped in <tt>YieldType[]</tt>, and its send\ntype wrapped in <tt>SendType[]</tt>:</p>\n<pre>from trio_typing import YieldType, SendType\n@async_generator\nasync def sleep_and_sqrt() -&gt; Union[None, SendType[int], YieldType[float]]:\n    next_yield = 0.0\n    while True:\n        amount = await yield_(next_yield)  # amount is an int\n        if amount &lt; 0:\n            return None\n        await trio.sleep(amount)\n        next_yield = math.sqrt(amount)\n\n# prints: CompatAsyncGenerator[float, int, None]\nreveal_type(sleep_and_sqrt())\n</pre>\n<p>Calls to <tt>yield_</tt> and <tt>yield_from_</tt> inside an <tt>@async_generator</tt>\nfunction are type-checked based on these declarations. If you leave\noff <em>either</em> the yield type or send type, the missing one is assumed\nto be <tt>None</tt>; if you leave off <em>both</em> (writing just\n<tt>async def sleep_and_sqrt() <span class=\"pre\">-&gt;</span> None:</tt>, like you would if you weren\u2019t\nusing the plugin), they\u2019re both assumed to be <tt>Any</tt>.</p>\n<p>Note the explicit <tt>return None</tt>; mypy won\u2019t accept <tt>return</tt> or\nfalling off the end of the function, unless you run it with\n<tt><span class=\"pre\">--no-warn-no-return</span></tt>.</p>\n</li>\n</ul>\n</div>\n<div id=\"limitations\">\n<h3>Limitations</h3>\n<ul>\n<li>Calls to variadic Trio functions like <tt>trio.run()</tt>,\n<tt>nursery.start_soon()</tt>, and so on, only can type-check up to five\npositional arguments. (This number could be increased easily, but\nonly at the cost of slower typechecking for everyone; mypy\u2019s current\narchitecture requires that we generate overload sets initially for\nevery arity we want to be able to use.) You can work around this with\na <tt># type: ignore</tt> comment.</li>\n<li><tt>outcome.capture()</tt> and <tt>outcome.acapture()</tt> currently don\u2019t typecheck\ntheir arguments at all.</li>\n</ul>\n</div>\n<div id=\"running-the-tests\">\n<h3>Running the tests</h3>\n<p><tt><span class=\"pre\">trio-typing</span></tt> comes with a fairly extensive testsuite; it doesn\u2019t test all\nthe mechanical parts of the stubs, but does exercise most of the interesting\nplugin behavior. You can run it after installing, with:</p>\n<pre>pytest -p trio_typing._tests.datadriven --pyargs trio_typing\n</pre>\n</div>\n<div id=\"license\">\n<h3>License</h3>\n<p>Your choice of MIT or Apache 2.0.</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 6283037, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "e8df0fd425255bc95b89d291dd76edc9", "sha256": "e8f6dcf2783fe1399cb30930ca0c1c63beb14b3499c7baead54db6e775afee55"}, "downloads": -1, "filename": "trio_typing-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "e8df0fd425255bc95b89d291dd76edc9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 37417, "upload_time": "2019-02-11T00:29:25", "upload_time_iso_8601": "2019-02-11T00:29:25.655744Z", "url": "https://files.pythonhosted.org/packages/a2/80/dac6c6cb34608fac9c1cc2e4011205bf7709135c30ccfe18a1187ce73060/trio_typing-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "53c7c43e30dfbc0d5ab3c46cc60d7854", "sha256": "27500e3d4672798233091e59824c4ca456ab4e30d4b33c311bd6cc9201aaeb82"}, "downloads": -1, "filename": "trio-typing-0.1.0.tar.gz", "has_sig": false, "md5_digest": "53c7c43e30dfbc0d5ab3c46cc60d7854", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 31255, "upload_time": "2019-02-11T00:29:27", "upload_time_iso_8601": "2019-02-11T00:29:27.522140Z", "url": "https://files.pythonhosted.org/packages/42/03/95358219b76c25dd3100a3a5fb5ac9d889ac20c8f6ddc14249c6797f20d0/trio-typing-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "7d6a91e0f6832fb2114478bc6c01b921", "sha256": "ba25d019626c5e00bb2e665cedc302afe94517fe71ebcbaecdc02a87083628f3"}, "downloads": -1, "filename": "trio_typing-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "7d6a91e0f6832fb2114478bc6c01b921", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 39609, "upload_time": "2019-02-19T06:17:00", "upload_time_iso_8601": "2019-02-19T06:17:00.596499Z", "url": "https://files.pythonhosted.org/packages/9d/0b/a4eca15c316fbaef489758a0f47387ae9ec1fc36d3fce94b6f389d5b1d5b/trio_typing-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1deff6411ebc001bc1d7070e087b92eb", "sha256": "bdbba505d2ae5582438721109647a09e6f8a502b10093046c41ae7c79a560050"}, "downloads": -1, "filename": "trio-typing-0.2.0.tar.gz", "has_sig": false, "md5_digest": "1deff6411ebc001bc1d7070e087b92eb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 34679, "upload_time": "2019-02-19T06:17:02", "upload_time_iso_8601": "2019-02-19T06:17:02.609882Z", "url": "https://files.pythonhosted.org/packages/3b/61/76628a84c75a77969b2c762f1b4dc445704254f21575e1e1fed8562e319d/trio-typing-0.2.0.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "616645fb06f47fcc9d3549385a59eb42", "sha256": "33fd8acd4f2dadf1ebb443504a890ae138c2e5b0ebde93474a04c4c1a00c73d6"}, "downloads": -1, "filename": "trio_typing-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "616645fb06f47fcc9d3549385a59eb42", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 40894, "upload_time": "2019-10-17T03:54:47", "upload_time_iso_8601": "2019-10-17T03:54:47.337168Z", "url": "https://files.pythonhosted.org/packages/63/e6/321586c195b2dc659ebd4be1c90814f608255083153ca156d8f5d370c8d8/trio_typing-0.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2d6eafc9d63afd866e6a1c1b974a9a47", "sha256": "d242fcab48437be1500b55b13973fbca93cf78ff6b940ba71b87c618248d6bfa"}, "downloads": -1, "filename": "trio-typing-0.3.0.tar.gz", "has_sig": false, "md5_digest": "2d6eafc9d63afd866e6a1c1b974a9a47", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 35866, "upload_time": "2019-10-17T03:54:50", "upload_time_iso_8601": "2019-10-17T03:54:50.169998Z", "url": "https://files.pythonhosted.org/packages/2c/49/2e970217f1740fdb57a8bbb5d4cdd5a5d71a9047b75976ca68f094720368/trio-typing-0.3.0.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "b027a11aa2bfe2f2fb6fb4b02fba0ab3", "sha256": "3e869b3e62c9077f0ca5f27c17924af1f6ce875cb214455376733ff13b5f7b81"}, "downloads": -1, "filename": "trio_typing-0.4.0-py3-none-any.whl", "has_sig": false, "md5_digest": "b027a11aa2bfe2f2fb6fb4b02fba0ab3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 41058, "upload_time": "2019-12-12T07:59:56", "upload_time_iso_8601": "2019-12-12T07:59:56.922924Z", "url": "https://files.pythonhosted.org/packages/9e/5f/f1435a8522bcb764e3cac82f2e05746199bc837709b18bbe08ffb0398949/trio_typing-0.4.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "aed8ec05bbb7ed196c4c7896e03e0b4c", "sha256": "e4d8cc244686682acb314644667fbeb4c3fe1141ee1140a80431271d7532902d"}, "downloads": -1, "filename": "trio-typing-0.4.0.tar.gz", "has_sig": false, "md5_digest": "aed8ec05bbb7ed196c4c7896e03e0b4c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 36063, "upload_time": "2019-12-12T07:59:58", "upload_time_iso_8601": "2019-12-12T07:59:58.491253Z", "url": "https://files.pythonhosted.org/packages/bc/06/dc576ebfd8a0224b009653d0072e3567933485f35885cd6fc8f2e80a3682/trio-typing-0.4.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b027a11aa2bfe2f2fb6fb4b02fba0ab3", "sha256": "3e869b3e62c9077f0ca5f27c17924af1f6ce875cb214455376733ff13b5f7b81"}, "downloads": -1, "filename": "trio_typing-0.4.0-py3-none-any.whl", "has_sig": false, "md5_digest": "b027a11aa2bfe2f2fb6fb4b02fba0ab3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 41058, "upload_time": "2019-12-12T07:59:56", "upload_time_iso_8601": "2019-12-12T07:59:56.922924Z", "url": "https://files.pythonhosted.org/packages/9e/5f/f1435a8522bcb764e3cac82f2e05746199bc837709b18bbe08ffb0398949/trio_typing-0.4.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "aed8ec05bbb7ed196c4c7896e03e0b4c", "sha256": "e4d8cc244686682acb314644667fbeb4c3fe1141ee1140a80431271d7532902d"}, "downloads": -1, "filename": "trio-typing-0.4.0.tar.gz", "has_sig": false, "md5_digest": "aed8ec05bbb7ed196c4c7896e03e0b4c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 36063, "upload_time": "2019-12-12T07:59:58", "upload_time_iso_8601": "2019-12-12T07:59:58.491253Z", "url": "https://files.pythonhosted.org/packages/bc/06/dc576ebfd8a0224b009653d0072e3567933485f35885cd6fc8f2e80a3682/trio-typing-0.4.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:47:03 2020"}