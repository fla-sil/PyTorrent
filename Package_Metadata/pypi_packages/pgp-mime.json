{"info": {"author": "W. Trevor King", "author_email": "wking@tremily.us", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: GNU General Public License (GPL)", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Topic :: Communications :: Email", "Topic :: Security :: Cryptography", "Topic :: Software Development"], "description": "Python module and tools for constructing and sending PGP/MIME email.\n\nThe ``pgp_mime`` module makes it easy to construct and dispatch signed\nand/or encrypted email using PGP_ and :RFC:`3156`.  It uses GnuPG_\n(via `gpgme-tool`_) to perform the cryptography.\n\nInstallation\n============\n\nPackages\n--------\n\nGentoo\n~~~~~~\n\nI've packaged ``pgp-mime`` for Gentoo_.  You need layman_ and\nmy `wtk overlay`_.  Install with::\n\n  # emerge -av app-portage/layman\n  # layman --add wtk\n  # emerge -av dev-python/pgp-mime\n\nDependencies\n------------\n\n``pgp-mime`` is a simple package with no external dependencies outside\nthe Python 3 standard library.  There are a number of GnuPG_ wrappers\nfor python `out there`__, but none of them seem mature/stable enough\nto be worth installing.  Instead, we use the `pyassuan`_ module to\ntalk to `gpgme-tool`_ over pipes or sockets.  If this isn't working\nfor you, you need only replace the ``pgp_mime.crypt`` module to handle\nthe cryptography.\n\n__ wrappers_\n\nInstalling by hand\n------------------\n\n``pgp-mime`` is available as a Git_ repository::\n\n  $ git clone git://tremily.us/pgp-mime.git\n\nSee the homepage_ for details.  To install the checkout, run the\nstandard::\n\n  $ python setup.py install\n\nUsage\n=====\n\nPgp-mime has grown up as I've become more experienced with Python.\nThe current interface is much simpler, and there are lots of\ndocstrings showing you how to use each function.\n\nIf you're looking for a higher level example, pgp-mime includes a\ncommand line script ``send-pgp-mime.py`` that allows you to send\nsigned and/or encrypted email from the command line.  I recommend you\nuse ``gpg2`` with my `wrappers and pinentry program`_ to allow easy\npinentry from the command line.  Here's how you could mail signed\ngrades to your class::\n\n  $ FROM=\"From: Rincewind <rincewind@uu.edu>\"\n  $ head -n2 grades\n  Twoflower <tf@isa.ae.cw>|9\n  Eric Thursley <et@pseudopolis.net>|10\n  $ while read LINE; do\n      STUDENT=$(echo \"$LINE\" | cut -d '|' -f 1)\n      GRADE=$(echo \"$LINE\" | cut -d '|' -f 2)\n      HEAD=$(echo -e \"$FROM\\nTo: $STUDENT\\nSubject: Grades\")\n      BODY=$(echo -e \"$STUDENT,\\n\\nYou got a $GRADE.\\n\\nGood job.\")\n      send-pgp-mime.py -H <(echo \"$HEAD\") -B <(echo \"$BODY\") --mode sign\n    done < grades\n\nIf you can convince your students to get PGP keys, you could also\nencrypt their grades by changing ``--mode sign`` to ``--mode\nsign-encrypt``.\n\nOf course, if you're interested in working with students and grades,\nyou might also be interested in my `pygrader`_ package, which uses\npgp-mime under the hood.\n\nConfiguring the SMTP connection\n-------------------------------\n\nPgp-mime supports two methods for sending messages (via\n``pgp_mime.mail``).  It can either call your system's ``sendmail``\nequivalent, or connect directly to an SMTP_ server using ``smtplib``.\nSince I imagine SMTP will be more common, you can easily configure\nyour SMTP connection via ``~/.config/smtplib.conf``::\n\n  [smtp]\n  host: smtp.mail.uu.edu\n  port: 587\n  starttls: yes\n  username: rincewind\n  password: 7ugg@g3\n\nAll of these fields are optional.  ``host`` defaults to ``localhost``\nand ``port`` defaults to 25.  If ``username`` is not given, we do not\nattempt to login to the SMTP server after connecting.\n\nIf ``starttls`` is ``no`` or not given, the SMTP transaction occurs in\nplain text (although the underlying emails will still be encrypted).\nHowever, if you set a ``username`` (to login), pgp-mime will require a\nSTARTTLS_ to protect your password from sniffing.\n\nTesting\n=======\n\nRun the internal unit tests using nose_::\n\n  $ nosetests --with-doctest --doctest-tests pgp_mime\n\nIf a Python-3-version of ``nosetests`` is not the default on your\nsystem, you may need to try something like::\n\n  $ nosetests-3.2 --with-doctest --doctest-tests pgp_mime\n\nLicence\n=======\n\nThis project is distributed under the `GNU General Public License\nVersion 3`_ or greater.\n\nAuthor\n======\n\nW. Trevor King\nwking@tremily.us\n\n.. _PGP: http://en.wikipedia.org/wiki/Pretty_Good_Privacy\n.. _Gentoo: http://www.gentoo.org/\n.. _layman: http://layman.sourceforge.net/\n.. _wtk overlay: http://blog.tremily.us/posts/Gentoo_overlay/\n.. _wrappers: http://wiki.python.org/moin/GnuPrivacyGuard\n.. _pyassuan: http://blog.tremily.us/posts/pyassuan/\n.. _gpgme-tool:\n  http://git.gnupg.org/cgi-bin/gitweb.cgi?p=gpgme.git;a=blob;f=src/gpgme-tool.c;hb=HEAD\n.. _Git: http://git-scm.com/\n.. _homepage: http://blog.tremily.us/posts/pgp-mime/\n.. _wrappers and pinentry program: http://blog.tremily.us/posts/gpg-agent/\n.. _pygrader: http://blog.tremily.us/posts/pygrader/\n.. _SMTP: http://en.wikipedia.org/wiki/Simple_Mail_Transfer_Protocol\n.. _STARTTLS: http://en.wikipedia.org/wiki/STARTTLS\n.. _GnuPG: http://www.gnupg.org/\n.. _nose: http://readthedocs.org/docs/nose/en/latest/\n.. _GNU General Public License Version 3: http://www.gnu.org/licenses/gpl.html", "description_content_type": null, "docs_url": null, "download_url": "http://git.tremily.us/?p=pgp-mime.git;a=snapshot;h=v0.3;sf=tgz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://blog.tremily.us/posts/pgp-mime/", "keywords": null, "license": "GNU General Public License (GPL)", "maintainer": null, "maintainer_email": null, "name": "pgp-mime", "package_url": "https://pypi.org/project/pgp-mime/", "platform": "all", "project_url": "https://pypi.org/project/pgp-mime/", "project_urls": {"Download": "http://git.tremily.us/?p=pgp-mime.git;a=snapshot;h=v0.3;sf=tgz", "Homepage": "http://blog.tremily.us/posts/pgp-mime/"}, "release_url": "https://pypi.org/project/pgp-mime/0.3/", "requires_dist": null, "requires_python": null, "summary": "Tools for dealing with Pretty Good Privacy (PGP) and email.", "version": "0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Python module and tools for constructing and sending PGP/MIME email.</p>\n<p>The <tt>pgp_mime</tt> module makes it easy to construct and dispatch signed\nand/or encrypted email using <a href=\"http://en.wikipedia.org/wiki/Pretty_Good_Privacy\" rel=\"nofollow\">PGP</a> and <a href=\"http://tools.ietf.org/html/rfc3156.html\" rel=\"nofollow\">RFC 3156</a>.  It uses <a href=\"http://www.gnupg.org/\" rel=\"nofollow\">GnuPG</a>\n(via <a href=\"http://git.gnupg.org/cgi-bin/gitweb.cgi?p=gpgme.git;a=blob;f=src/gpgme-tool.c;hb=HEAD\" rel=\"nofollow\">gpgme-tool</a>) to perform the cryptography.</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<div id=\"packages\">\n<h3>Packages</h3>\n<h3 id=\"gentoo\"><span class=\"section-subtitle\">Gentoo</span></h3>\n<p>I\u2019ve packaged <tt><span class=\"pre\">pgp-mime</span></tt> for <a href=\"http://www.gentoo.org/\" rel=\"nofollow\">Gentoo</a>.  You need <a href=\"http://layman.sourceforge.net/\" rel=\"nofollow\">layman</a> and\nmy <a href=\"http://blog.tremily.us/posts/Gentoo_overlay/\" rel=\"nofollow\">wtk overlay</a>.  Install with:</p>\n<pre># emerge -av app-portage/layman\n# layman --add wtk\n# emerge -av dev-python/pgp-mime\n</pre>\n</div>\n<div id=\"dependencies\">\n<h3>Dependencies</h3>\n<p><tt><span class=\"pre\">pgp-mime</span></tt> is a simple package with no external dependencies outside\nthe Python 3 standard library.  There are a number of <a href=\"http://www.gnupg.org/\" rel=\"nofollow\">GnuPG</a> wrappers\nfor python <a href=\"http://wiki.python.org/moin/GnuPrivacyGuard\" rel=\"nofollow\">out there</a>, but none of them seem mature/stable enough\nto be worth installing.  Instead, we use the <a href=\"http://blog.tremily.us/posts/pyassuan/\" rel=\"nofollow\">pyassuan</a> module to\ntalk to <a href=\"http://git.gnupg.org/cgi-bin/gitweb.cgi?p=gpgme.git;a=blob;f=src/gpgme-tool.c;hb=HEAD\" rel=\"nofollow\">gpgme-tool</a> over pipes or sockets.  If this isn\u2019t working\nfor you, you need only replace the <tt>pgp_mime.crypt</tt> module to handle\nthe cryptography.</p>\n</div>\n<div id=\"installing-by-hand\">\n<h3>Installing by hand</h3>\n<p><tt><span class=\"pre\">pgp-mime</span></tt> is available as a <a href=\"http://git-scm.com/\" rel=\"nofollow\">Git</a> repository:</p>\n<pre>$ git clone git://tremily.us/pgp-mime.git\n</pre>\n<p>See the <a href=\"http://blog.tremily.us/posts/pgp-mime/\" rel=\"nofollow\">homepage</a> for details.  To install the checkout, run the\nstandard:</p>\n<pre>$ python setup.py install\n</pre>\n</div>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>Pgp-mime has grown up as I\u2019ve become more experienced with Python.\nThe current interface is much simpler, and there are lots of\ndocstrings showing you how to use each function.</p>\n<p>If you\u2019re looking for a higher level example, pgp-mime includes a\ncommand line script <tt><span class=\"pre\">send-pgp-mime.py</span></tt> that allows you to send\nsigned and/or encrypted email from the command line.  I recommend you\nuse <tt>gpg2</tt> with my <a href=\"http://blog.tremily.us/posts/gpg-agent/\" rel=\"nofollow\">wrappers and pinentry program</a> to allow easy\npinentry from the command line.  Here\u2019s how you could mail signed\ngrades to your class:</p>\n<pre>$ FROM=\"From: Rincewind &lt;rincewind@uu.edu&gt;\"\n$ head -n2 grades\nTwoflower &lt;tf@isa.ae.cw&gt;|9\nEric Thursley &lt;et@pseudopolis.net&gt;|10\n$ while read LINE; do\n    STUDENT=$(echo \"$LINE\" | cut -d '|' -f 1)\n    GRADE=$(echo \"$LINE\" | cut -d '|' -f 2)\n    HEAD=$(echo -e \"$FROM\\nTo: $STUDENT\\nSubject: Grades\")\n    BODY=$(echo -e \"$STUDENT,\\n\\nYou got a $GRADE.\\n\\nGood job.\")\n    send-pgp-mime.py -H &lt;(echo \"$HEAD\") -B &lt;(echo \"$BODY\") --mode sign\n  done &lt; grades\n</pre>\n<p>If you can convince your students to get PGP keys, you could also\nencrypt their grades by changing <tt><span class=\"pre\">--mode</span> sign</tt> to <tt><span class=\"pre\">--mode</span>\n<span class=\"pre\">sign-encrypt</span></tt>.</p>\n<p>Of course, if you\u2019re interested in working with students and grades,\nyou might also be interested in my <a href=\"http://blog.tremily.us/posts/pygrader/\" rel=\"nofollow\">pygrader</a> package, which uses\npgp-mime under the hood.</p>\n<div id=\"configuring-the-smtp-connection\">\n<h3>Configuring the SMTP connection</h3>\n<p>Pgp-mime supports two methods for sending messages (via\n<tt>pgp_mime.mail</tt>).  It can either call your system\u2019s <tt>sendmail</tt>\nequivalent, or connect directly to an <a href=\"http://en.wikipedia.org/wiki/Simple_Mail_Transfer_Protocol\" rel=\"nofollow\">SMTP</a> server using <tt>smtplib</tt>.\nSince I imagine SMTP will be more common, you can easily configure\nyour SMTP connection via <tt><span class=\"pre\">~/.config/smtplib.conf</span></tt>:</p>\n<pre>[smtp]\nhost: smtp.mail.uu.edu\nport: 587\nstarttls: yes\nusername: rincewind\npassword: 7ugg@g3\n</pre>\n<p>All of these fields are optional.  <tt>host</tt> defaults to <tt>localhost</tt>\nand <tt>port</tt> defaults to 25.  If <tt>username</tt> is not given, we do not\nattempt to login to the SMTP server after connecting.</p>\n<p>If <tt>starttls</tt> is <tt>no</tt> or not given, the SMTP transaction occurs in\nplain text (although the underlying emails will still be encrypted).\nHowever, if you set a <tt>username</tt> (to login), pgp-mime will require a\n<a href=\"http://en.wikipedia.org/wiki/STARTTLS\" rel=\"nofollow\">STARTTLS</a> to protect your password from sniffing.</p>\n</div>\n</div>\n<div id=\"testing\">\n<h2>Testing</h2>\n<p>Run the internal unit tests using <a href=\"http://readthedocs.org/docs/nose/en/latest/\" rel=\"nofollow\">nose</a>:</p>\n<pre>$ nosetests --with-doctest --doctest-tests pgp_mime\n</pre>\n<p>If a Python-3-version of <tt>nosetests</tt> is not the default on your\nsystem, you may need to try something like:</p>\n<pre>$ nosetests-3.2 --with-doctest --doctest-tests pgp_mime\n</pre>\n</div>\n<div id=\"licence\">\n<h2>Licence</h2>\n<p>This project is distributed under the <a href=\"http://www.gnu.org/licenses/gpl.html\" rel=\"nofollow\">GNU General Public License\nVersion 3</a> or greater.</p>\n</div>\n<div id=\"author\">\n<h2>Author</h2>\n<p>W. Trevor King\n<a href=\"mailto:wking%40tremily.us\">wking<span>@</span>tremily<span>.</span>us</a></p>\n</div>\n\n          </div>"}, "last_serial": 408546, "releases": {"0.2": [], "0.3": []}, "urls": [], "timestamp": "Fri May  8 02:55:44 2020"}