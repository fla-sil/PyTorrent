{"info": {"author": "Darko Poljak", "author_email": "darko.poljak@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Operating System :: OS Independent", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "AnderssonTree Package\n=====================\n\nAbstract\n========\n\nThis package provides Andersson Tree implementation written in pure Python.\n\nSources of Algorithms\n---------------------\n\n    http://en.wikipedia.org/wiki/Andersson_tree\n    http://user.it.uu.se/~arnea/abs/simp.html\n    http://eternallyconfuzzled.com/tuts/datastructures/jsw_tut_andersson.aspx\n\n    Some concepts are inspired by bintrees package at\n    http://bitbucket.org/mozman/bintrees, although this implementation does not\n    support dict, heap, set compatibility.\n\nConstructor\n~~~~~~~~~~~\n\n    * AnderssonTree() -> new empty tree;\n    * AnderssonTree(mapping) -> new tree initialized from a mapping (requires only an items() method)\n    * AnderssonTree(seq) -> new tree initialized from seq [(k1, v1), (k2, v2), ... (kn, vn)]\n\nMethods\n~~~~~~~\n\n    * __contains__(k) -> True if T has a key k, else False\n    * __delitem__(y) <==> del T[y]\n    * __getitem__(y) <==> T[y]\n    * __iter__() <==> iter(T) <==> keys()\n    * __len__() <==> len(T)\n    * __repr__() <==> repr(T)\n    * __reversed__() <==> reversed(T), reversed keys\n    * __setitem__(k, v) <==> T[k] = v\n    * __copy__() <==> copy()\n    * clear() -> None, remove all items from T\n    * copy() -> a shallow copy of T, tree structure, i.e. key insertion order is preserved\n    * dump([order]) -> None, dumps tree according to order\n    * get(k) -> T[k] if k in T, else None\n    * insert(k, v) -> None, insert node with key k and value v, replace value if key exists\n    * is_empty() -> True if len(T) == 0\n    * iter_items([, reverse]) -> generator for (k, v) items of T\n    * keys([reverse]) -> generator for keys of T\n    * remove(key) -> None, remove item by key\n    * remove_items(keys) -> None, remove items by keys\n    * root() -> root node\n    * traverse(f, [order]) -> visit all nodes of tree according to order and call f(node) for each node\n    * update(E) -> None.  Update T from dict/iterable E\n    * values([reverse]) -> generator for values of T\n\nOrder values\n~~~~~~~~~~~~\n\n    * ORDER_INFIX_LEFT_RIGHT - infix order, left child first, then right\n    * ORDER_INFIX_RIGHT_LEFT - infix order, right child first, then left\n    * ORDER_PREFIX_LEFT_RIGHT - prefix order, left child first, then right\n    * ORDER_PREFIX_RIGHT_LEFT - prefix order, right child first, then left\n    * ORDER_POSTFIX_LEFT_RIGHT - postfix order, left child first, then right\n    * ORDER_POSTFIX_RIGHT_LEFT - postfix order, right child first, then left\n\nInstallation\n============\n\nfrom source::\n\n    python setup.py install\n\nor from PyPI::\n\n    pip install anderssontree\n\nDocumentation\n=============\n\nthis README.rst, code itself, docstrings\n\nanderssontree can be found on github.com at:\n\nhttps://github.com/darko-poljak/andersontree\n\nTested With\n===========\n\nPython2.7.5, Python3.3.2", "description_content_type": null, "docs_url": null, "download_url": "https://github.com/darko-poljak/anderssontree", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/darko-poljak/anderssontree", "keywords": "AA Tree,Andersson Tree", "license": "GPLv3", "maintainer": null, "maintainer_email": null, "name": "anderssontree", "package_url": "https://pypi.org/project/anderssontree/", "platform": "OS Independent", "project_url": "https://pypi.org/project/anderssontree/", "project_urls": {"Download": "https://github.com/darko-poljak/anderssontree", "Homepage": "https://github.com/darko-poljak/anderssontree"}, "release_url": "https://pypi.org/project/anderssontree/0.1.0/", "requires_dist": null, "requires_python": null, "summary": "Package provides Andersson Tree implementation in pure Python.", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"anderssontree-package\">\n<h2>AnderssonTree Package</h2>\n</div>\n<div id=\"abstract\">\n<h2>Abstract</h2>\n<p>This package provides Andersson Tree implementation written in pure Python.</p>\n<div id=\"sources-of-algorithms\">\n<h3>Sources of Algorithms</h3>\n<blockquote>\n<p><a href=\"http://en.wikipedia.org/wiki/Andersson_tree\" rel=\"nofollow\">http://en.wikipedia.org/wiki/Andersson_tree</a>\n<a href=\"http://user.it.uu.se/~arnea/abs/simp.html\" rel=\"nofollow\">http://user.it.uu.se/~arnea/abs/simp.html</a>\n<a href=\"http://eternallyconfuzzled.com/tuts/datastructures/jsw_tut_andersson.aspx\" rel=\"nofollow\">http://eternallyconfuzzled.com/tuts/datastructures/jsw_tut_andersson.aspx</a></p>\n<p>Some concepts are inspired by bintrees package at\n<a href=\"http://bitbucket.org/mozman/bintrees\" rel=\"nofollow\">http://bitbucket.org/mozman/bintrees</a>, although this implementation does not\nsupport dict, heap, set compatibility.</p>\n</blockquote>\n<div id=\"constructor\">\n<h4>Constructor</h4>\n<blockquote>\n<ul>\n<li>AnderssonTree() -&gt; new empty tree;</li>\n<li>AnderssonTree(mapping) -&gt; new tree initialized from a mapping (requires only an items() method)</li>\n<li>AnderssonTree(seq) -&gt; new tree initialized from seq [(k1, v1), (k2, v2), \u2026 (kn, vn)]</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"methods\">\n<h4>Methods</h4>\n<blockquote>\n<ul>\n<li>__contains__(k) -&gt; True if T has a key k, else False</li>\n<li>__delitem__(y) &lt;==&gt; del T[y]</li>\n<li>__getitem__(y) &lt;==&gt; T[y]</li>\n<li>__iter__() &lt;==&gt; iter(T) &lt;==&gt; keys()</li>\n<li>__len__() &lt;==&gt; len(T)</li>\n<li>__repr__() &lt;==&gt; repr(T)</li>\n<li>__reversed__() &lt;==&gt; reversed(T), reversed keys</li>\n<li>__setitem__(k, v) &lt;==&gt; T[k] = v</li>\n<li>__copy__() &lt;==&gt; copy()</li>\n<li>clear() -&gt; None, remove all items from T</li>\n<li>copy() -&gt; a shallow copy of T, tree structure, i.e. key insertion order is preserved</li>\n<li>dump([order]) -&gt; None, dumps tree according to order</li>\n<li>get(k) -&gt; T[k] if k in T, else None</li>\n<li>insert(k, v) -&gt; None, insert node with key k and value v, replace value if key exists</li>\n<li>is_empty() -&gt; True if len(T) == 0</li>\n<li>iter_items([, reverse]) -&gt; generator for (k, v) items of T</li>\n<li>keys([reverse]) -&gt; generator for keys of T</li>\n<li>remove(key) -&gt; None, remove item by key</li>\n<li>remove_items(keys) -&gt; None, remove items by keys</li>\n<li>root() -&gt; root node</li>\n<li>traverse(f, [order]) -&gt; visit all nodes of tree according to order and call f(node) for each node</li>\n<li>update(E) -&gt; None.  Update T from dict/iterable E</li>\n<li>values([reverse]) -&gt; generator for values of T</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"order-values\">\n<h4>Order values</h4>\n<blockquote>\n<ul>\n<li>ORDER_INFIX_LEFT_RIGHT - infix order, left child first, then right</li>\n<li>ORDER_INFIX_RIGHT_LEFT - infix order, right child first, then left</li>\n<li>ORDER_PREFIX_LEFT_RIGHT - prefix order, left child first, then right</li>\n<li>ORDER_PREFIX_RIGHT_LEFT - prefix order, right child first, then left</li>\n<li>ORDER_POSTFIX_LEFT_RIGHT - postfix order, left child first, then right</li>\n<li>ORDER_POSTFIX_RIGHT_LEFT - postfix order, right child first, then left</li>\n</ul>\n</blockquote>\n</div>\n</div>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>from source:</p>\n<pre>python setup.py install\n</pre>\n<p>or from PyPI:</p>\n<pre>pip install anderssontree\n</pre>\n</div>\n<div id=\"documentation\">\n<h2>Documentation</h2>\n<p>this README.rst, code itself, docstrings</p>\n<p>anderssontree can be found on github.com at:</p>\n<p><a href=\"https://github.com/darko-poljak/andersontree\" rel=\"nofollow\">https://github.com/darko-poljak/andersontree</a></p>\n</div>\n<div id=\"tested-with\">\n<h2>Tested With</h2>\n<p>Python2.7.5, Python3.3.2</p>\n</div>\n\n          </div>"}, "last_serial": 897906, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "d12c49b56e8d9a2b77cb80c1067152ee", "sha256": "eec88c9dbb684556e862afabbd9865c4d1e2ef64d78d99be4b3cb44d0b37c5ee"}, "downloads": -1, "filename": "anderssontree-0.1.0-py2.7.egg", "has_sig": false, "md5_digest": "d12c49b56e8d9a2b77cb80c1067152ee", "packagetype": "bdist_egg", "python_version": "2.7", "requires_python": null, "size": 12027, "upload_time": "2013-10-18T19:52:13", "upload_time_iso_8601": "2013-10-18T19:52:13.449065Z", "url": "https://files.pythonhosted.org/packages/d0/6c/bb8df2085248cf0d97fcde83555c76b0cb3e32a0c1cab75696ceb9645487/anderssontree-0.1.0-py2.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "866678e9d53d43049d9ea4aa604b2a9a", "sha256": "c72541b82823743c1bbbef6712cc7899eeb00c2de6a462b08a9c638e8ff8cb1f"}, "downloads": -1, "filename": "anderssontree-0.1.0-py3.3.egg", "has_sig": false, "md5_digest": "866678e9d53d43049d9ea4aa604b2a9a", "packagetype": "bdist_egg", "python_version": "3.3", "requires_python": null, "size": 12482, "upload_time": "2013-10-18T19:53:04", "upload_time_iso_8601": "2013-10-18T19:53:04.524908Z", "url": "https://files.pythonhosted.org/packages/64/04/1e8c5a6637e6d0752f82d543c57cdfb008a10058c96d12d8321cfed02d6b/anderssontree-0.1.0-py3.3.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "bbbb81b5bcc05c06bccc33c34ff002af", "sha256": "852f17805d544fffa48ed7736c474ab1f8bf92b6bb800d6625755261986002c1"}, "downloads": -1, "filename": "anderssontree-0.1.0.tar.gz", "has_sig": false, "md5_digest": "bbbb81b5bcc05c06bccc33c34ff002af", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7590, "upload_time": "2013-10-18T17:44:57", "upload_time_iso_8601": "2013-10-18T17:44:57.464275Z", "url": "https://files.pythonhosted.org/packages/69/8f/d83c26ebeb5c43ae7ce31fb74dd3fa73246e9649df83b7ebd419e4cebfaa/anderssontree-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d12c49b56e8d9a2b77cb80c1067152ee", "sha256": "eec88c9dbb684556e862afabbd9865c4d1e2ef64d78d99be4b3cb44d0b37c5ee"}, "downloads": -1, "filename": "anderssontree-0.1.0-py2.7.egg", "has_sig": false, "md5_digest": "d12c49b56e8d9a2b77cb80c1067152ee", "packagetype": "bdist_egg", "python_version": "2.7", "requires_python": null, "size": 12027, "upload_time": "2013-10-18T19:52:13", "upload_time_iso_8601": "2013-10-18T19:52:13.449065Z", "url": "https://files.pythonhosted.org/packages/d0/6c/bb8df2085248cf0d97fcde83555c76b0cb3e32a0c1cab75696ceb9645487/anderssontree-0.1.0-py2.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "866678e9d53d43049d9ea4aa604b2a9a", "sha256": "c72541b82823743c1bbbef6712cc7899eeb00c2de6a462b08a9c638e8ff8cb1f"}, "downloads": -1, "filename": "anderssontree-0.1.0-py3.3.egg", "has_sig": false, "md5_digest": "866678e9d53d43049d9ea4aa604b2a9a", "packagetype": "bdist_egg", "python_version": "3.3", "requires_python": null, "size": 12482, "upload_time": "2013-10-18T19:53:04", "upload_time_iso_8601": "2013-10-18T19:53:04.524908Z", "url": "https://files.pythonhosted.org/packages/64/04/1e8c5a6637e6d0752f82d543c57cdfb008a10058c96d12d8321cfed02d6b/anderssontree-0.1.0-py3.3.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "bbbb81b5bcc05c06bccc33c34ff002af", "sha256": "852f17805d544fffa48ed7736c474ab1f8bf92b6bb800d6625755261986002c1"}, "downloads": -1, "filename": "anderssontree-0.1.0.tar.gz", "has_sig": false, "md5_digest": "bbbb81b5bcc05c06bccc33c34ff002af", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7590, "upload_time": "2013-10-18T17:44:57", "upload_time_iso_8601": "2013-10-18T17:44:57.464275Z", "url": "https://files.pythonhosted.org/packages/69/8f/d83c26ebeb5c43ae7ce31fb74dd3fa73246e9649df83b7ebd419e4cebfaa/anderssontree-0.1.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:18:14 2020"}