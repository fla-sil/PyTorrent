{"info": {"author": "Zope Corporation and Contributors", "author_email": "zope-dev@zope.org", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Web Environment", "Framework :: Zope3", "Intended Audience :: Developers", "License :: OSI Approved :: Zope Public License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Internet :: WWW/HTTP"], "description": "This Zope 3 package provides an XML-RPC introspection mechanism.\n\n\nDetailed Documentation\n======================\n\n\n====================\nXMLRPC Introspection\n====================\n\nWhat's introspection now ?\n--------------------------\n\nThis Zope 3 package provides an xmlrpcintrospection mechanism,\nas defined here:\n\n    http://xmlrpc-c.sourceforge.net/xmlrpc-howto/xmlrpc-howto-api-introspection.html\n\nIt registers three new xmlrpc methods:\n\n    - `listMethods()`: Lists all xmlrpc methods (ie views) registered for the\n      current object\n\n    - `methodHelp(method_name)`: Returns the method documentation of the given\n      method.\n\n    - `methodSignature(method_name)`: Returns the method documentation of the\n      given method.\n\n\nHow do I use it ?\n-----------------\n\nBasically, if you want to add introspection into your XMLRPCView, you just\nhave to add a decorator for each method of the view, that specifies the return\ntype of the method and the argument types.\n\nThe decorator is called `xmlrpccallable`\n\n  >>> from zope.app.xmlrpcintrospection.xmlrpcintrospection import xmlrpccallable\n  >>> from zope.app.publisher.xmlrpc import XMLRPCView\n  >>> class MySuperXMLRPCView(XMLRPCView):\n  ...     @xmlrpccallable(str, str, str, str)\n  ...     def myMethod(self, a, b, c):\n  ...         \"\"\" my help \"\"\"\n  ...         return '%s %s, %s, lalalala, you and me, lalalala' % (a, b, c)\n\n`myMethod()` will then be introspectable. (find a full examples below, grep\nfor (*))\n\n\nHow does it works ?\n-------------------\n\nIt is based on introspection mechanisms provided by the apidoc package.\n\n***** ripped form xmlrpc doctests *****\n\nLet's write a view that returns a folder listing:\n\n  >>> class FolderListing:\n  ...     def contents(self):\n  ...         return list(self.context.keys())\n\nNow we'll register it as a view:\n\n  >>> from zope.configuration import xmlconfig\n  >>> ignored = xmlconfig.string(\"\"\"\n  ... <configure\n  ...     xmlns=\"http://namespaces.zope.org/zope\"\n  ...     xmlns:xmlrpc=\"http://namespaces.zope.org/xmlrpc\"\n  ...     >\n  ...   <!-- We only need to do this include in this example,\n  ...        Normally the include has already been done for us. -->\n  ...   <include package=\"zope.app.publisher.xmlrpc\" file=\"meta.zcml\" />\n  ...\n  ...   <xmlrpc:view\n  ...       for=\"zope.site.interfaces.IFolder\"\n  ...       methods=\"contents\"\n  ...       class=\"zope.app.xmlrpcintrospection.README.FolderListing\"\n  ...       permission=\"zope.ManageContent\"\n  ...       />\n  ... </configure>\n  ... \"\"\")\n\nNow, we'll add some items to the root folder:\n\n  >>> print http(r\"\"\"\n  ... POST /@@contents.html HTTP/1.1\n  ... Authorization: Basic bWdyOm1ncnB3\n  ... Content-Length: 73\n  ... Content-Type: application/x-www-form-urlencoded\n  ...\n  ... type_name=BrowserAdd__zope.site.folder.Folder&new_value=f1\"\"\")\n  HTTP/1.1 303 See Other\n  ...\n\n  >>> print http(r\"\"\"\n  ... POST /@@contents.html HTTP/1.1\n  ... Authorization: Basic bWdyOm1ncnB3\n  ... Content-Length: 73\n  ... Content-Type: application/x-www-form-urlencoded\n  ...\n  ... type_name=BrowserAdd__zope.site.folder.Folder&new_value=f2\"\"\")\n  HTTP/1.1 303 See Other\n  ...\n\nAnd call our xmlrpc method:\n\n  >>> print http(r\"\"\"\n  ... POST / HTTP/1.0\n  ... Authorization: Basic bWdyOm1ncnB3\n  ... Content-Length: 102\n  ... Content-Type: text/xml\n  ...\n  ... <?xml version='1.0'?>\n  ... <methodCall>\n  ... <methodName>contents</methodName>\n  ... <params>\n  ... </params>\n  ... </methodCall>\n  ... \"\"\")\n  HTTP/1.0 200 OK\n  ...\n  <?xml version='1.0'?>\n  <methodResponse>\n  <params>\n  <param>\n  <value><array><data>\n  <value><string>f1</string></value>\n  <value><string>f2</string></value>\n  </data></array></value>\n  </param>\n  </params>\n  </methodResponse>\n  <BLANKLINE>\n\n***** end of ripped form xmlrpc doctests *****\n\nNow we want to provide to that view introspection.\nLet's add three new xmlrcp methods, that published\nthe introspection api.\n\n  >>> ignored = xmlconfig.string(\"\"\"\n  ... <configure\n  ...     xmlns=\"http://namespaces.zope.org/zope\"\n  ...     xmlns:xmlrpc=\"http://namespaces.zope.org/xmlrpc\"\n  ...     >\n  ...   <!-- We only need to do this include in this example,\n  ...        Normally the include has already been done for us. -->\n  ...   <include package=\"zope.app.publisher.xmlrpc\" file=\"meta.zcml\" />\n  ...   <xmlrpc:view\n  ...     for=\"zope.interface.Interface\"\n  ...     methods=\"listMethods  methodHelp methodSignature\"\n  ...     class=\"zope.app.xmlrpcintrospection.xmlrpcintrospection.XMLRPCIntrospection\"\n  ...     permission=\"zope.Public\"\n  ...     />\n  ... </configure>\n  ... \"\"\")\n\nThey are linked to XMLRPCIntrospection class, that actually\n knows how to lookup to all interfaces\n\nAnd call our xmlrpc method, that should list the content method:\n\n  >>> print http(r\"\"\"\n  ... POST / HTTP/1.0\n  ... Content-Type: text/xml\n  ...\n  ... <?xml version='1.0'?>\n  ... <methodCall>\n  ... <methodName>listMethods</methodName>\n  ... <params>\n  ... </params>\n  ... </methodCall>\n  ... \"\"\", handle_errors=False)\n  HTTP/1.0 200 OK\n  ...\n  <?xml version='1.0'?>\n  <methodResponse>\n  ...\n  <value><string>contents</string></value>\n  ...\n  </methodResponse>\n  <BLANKLINE>\n\nLet's try to add another method, to se if it gets listed...\n\n  >>> class FolderListing2:\n  ...     def contents2(self):\n  ...         return list(self.context.keys())\n  >>> from zope.configuration import xmlconfig\n  >>> ignored = xmlconfig.string(\"\"\"\n  ... <configure\n  ...     xmlns=\"http://namespaces.zope.org/zope\"\n  ...     xmlns:xmlrpc=\"http://namespaces.zope.org/xmlrpc\"\n  ...     >\n  ...   <!-- We only need to do this include in this example,\n  ...        Normally the include has already been done for us. -->\n  ...   <include package=\"zope.app.publisher.xmlrpc\" file=\"meta.zcml\" />\n  ...\n  ...   <xmlrpc:view\n  ...       for=\"zope.site.interfaces.IFolder\"\n  ...       methods=\"contents2\"\n  ...       class=\"zope.app.xmlrpcintrospection.README.FolderListing2\"\n  ...       permission=\"zope.ManageContent\"\n  ...       />\n  ... </configure>\n  ... \"\"\")\n  >>> print http(r\"\"\"\n  ... POST / HTTP/1.0\n  ... Content-Type: text/xml\n  ...\n  ... <?xml version='1.0'?>\n  ... <methodCall>\n  ... <methodName>listMethods</methodName>\n  ... <params>\n  ... </params>\n  ... </methodCall>\n  ... \"\"\", handle_errors=False)\n  HTTP/1.0 200 OK\n  ...\n  <?xml version='1.0'?>\n  <methodResponse>\n  ...\n  <value><string>contents</string></value>\n  <value><string>contents2</string></value>\n  ...\n  </methodResponse>\n  <BLANKLINE>\n\nNo we want to test methodHelp and methodSignature, to check that it returns,\n\n    - The method doc\n\n    - The list of attributes\n\nIn RPC, the list of attributes has to be return in an array of type:\n\n[return type, param1 type, param2 type]\n\nSince in Python we cannot have a static type for the method return type,\nwe introduce here a new mechanism based on a decorator, that let the xmlrpcview\ndeveloper add his own signature.\n\nIf the signature is not given, a defaut list is returned:\n\n[None, None, None...]\n\nThe decorator append to the function objet two new parameters,\nto get back the signature.\n\n  >>> from zope.app.xmlrpcintrospection.xmlrpcintrospection import xmlrpccallable\n  >>> class JacksonFiveRPC:\n  ...     @xmlrpccallable(str, str, str, str)\n  ...     def says(self, a, b, c):\n  ...         return '%s %s, %s, lalalala, you and me, lalalala' % (a, b, c)\n\nLet's try to get back the signature:\n\n  >>> JacksonFiveRPC().says.return_type\n  <type 'str'>\n  >>> JacksonFiveRPC().says.parameters_types\n  (<type 'str'>, <type 'str'>, <type 'str'>)\n\nThe method is still callable as needed:\n\n  >>> JacksonFiveRPC().says('a', 'b', 'c')\n  'a b, c, lalalala, you and me, lalalala'\n\nLet's try out decorated and not decorated methods signatures (*):\n\n  >>> class JacksonFiveRPC:\n  ...     @xmlrpccallable(str, str, str, str)\n  ...     def says(self, a, b, c):\n  ...         return '%s %s, %s, lalalala, you and me, lalalala' % (a, b, c)\n  ...     def says_not_decorated(self, a, b, c):\n  ...         return '%s %s, %s, lalalala, you and me, lalalala' % (a, b, c)\n  >>> from zope.configuration import xmlconfig\n  >>> ignored = xmlconfig.string(\"\"\"\n  ... <configure\n  ...     xmlns=\"http://namespaces.zope.org/zope\"\n  ...     xmlns:xmlrpc=\"http://namespaces.zope.org/xmlrpc\"\n  ...     >\n  ...   <!-- We only need to do this include in this example,\n  ...        Normally the include has already been done for us. -->\n  ...   <include package=\"zope.app.publisher.xmlrpc\" file=\"meta.zcml\" />\n  ...\n  ...   <xmlrpc:view\n  ...       for=\"zope.site.folder.IFolder\"\n  ...       methods=\"says says_not_decorated\"\n  ...       class=\"zope.app.xmlrpcintrospection.README.JacksonFiveRPC\"\n  ...       permission=\"zope.ManageContent\"\n  ...       />\n  ... </configure>\n  ... \"\"\")\n\nNow let's try to get the signature for `says()`:\n\n  >>> print http(r\"\"\"\n  ... POST / HTTP/1.0\n  ... Content-Type: text/xml\n  ...\n  ... <?xml version='1.0'?>\n  ... <methodCall>\n  ... <methodName>methodSignature</methodName>\n  ... <params>\n  ... <param>\n  ... <value>says</value>\n  ... </param>\n  ... </params>\n  ... </methodCall>\n  ... \"\"\", handle_errors=False)\n  HTTP/1.0 200 OK\n  ...\n  <?xml version='1.0'?>\n  <methodResponse>\n  <params>\n  <param>\n  <value><array><data>\n  <value><array><data>\n  <value><string>str</string></value>\n  <value><string>str</string></value>\n  <value><string>str</string></value>\n  <value><string>str</string></value>\n  </data></array></value>\n  </data></array></value>\n  </param>\n  </params>\n  </methodResponse>\n  <BLANKLINE>\n\nNow let's try to get the signature for says_not_decorated()`:\n\n  >>> print http(r\"\"\"\n  ... POST / HTTP/1.0\n  ... Content-Type: text/xml\n  ...\n  ... <?xml version='1.0'?>\n  ... <methodCall>\n  ... <methodName>methodSignature</methodName>\n  ... <params>\n  ... <param>\n  ... <value>says_not_decorated</value>\n  ... </param>\n  ... </params>\n  ... </methodCall>\n  ... \"\"\", handle_errors=False)\n  HTTP/1.0 200 OK\n  ...\n  <?xml version='1.0'?>\n  <methodResponse>\n  <params>\n  <param>\n  <value><array><data>\n  <value><array><data>\n  <value><string>undef</string></value>\n  <value><string>undef</string></value>\n  <value><string>undef</string></value>\n  <value><string>undef</string></value>\n  </data></array></value>\n  </data></array></value>\n  </param>\n  </params>\n  </methodResponse>\n  <BLANKLINE>\n\nLast, but not least, the method help:\n\n  >>> class JacksonFiveRPCDocumented:\n  ...     @xmlrpccallable(str, str, str, str)\n  ...     def says(self, a, b, c):\n  ...         \"\"\" this is the help for\n  ...             says()\n  ...         \"\"\"\n  ...         return '%s %s, %s, lalalala, you and me, lalalala' % (a, b, c)\n  ...     def says_not_documented(self, a, b, c):\n  ...         return '%s %s, %s, lalalala, you and me, lalalala' % (a, b, c)\n  >>> from zope.configuration import xmlconfig\n  >>> ignored = xmlconfig.string(\"\"\"\n  ... <configure\n  ...     xmlns=\"http://namespaces.zope.org/zope\"\n  ...     xmlns:xmlrpc=\"http://namespaces.zope.org/xmlrpc\"\n  ...     >\n  ...   <!-- We only need to do this include in this example,\n  ...        Normally the include has already been done for us. -->\n  ...   <include package=\"zope.app.publisher.xmlrpc\" file=\"meta.zcml\" />\n  ...\n  ...   <xmlrpc:view\n  ...       for=\"zope.site.folder.IFolder\"\n  ...       methods=\"says says_not_documented\"\n  ...       class=\"zope.app.xmlrpcintrospection.README.JacksonFiveRPCDocumented\"\n  ...       permission=\"zope.ManageContent\"\n  ...       />\n  ... </configure>\n  ... \"\"\")\n  >>> print http(r\"\"\"\n  ... POST / HTTP/1.0\n  ... Content-Type: text/xml\n  ...\n  ... <?xml version='1.0'?>\n  ... <methodCall>\n  ... <methodName>methodHelp</methodName>\n  ... <params>\n  ... <param>\n  ... <value>says</value>\n  ... </param>\n  ... </params>\n  ... </methodCall>\n  ... \"\"\", handle_errors=False)\n  HTTP/1.0 200 OK\n  ...\n  <?xml version='1.0'?>\n  <methodResponse>\n  <params>\n  <param>\n  <value><string> this is the help for\n               says()\n           </string></value>\n  </param>\n  </params>\n  </methodResponse>\n  <BLANKLINE>\n  >>> print http(r\"\"\"\n  ... POST / HTTP/1.0\n  ... Content-Type: text/xml\n  ...\n  ... <?xml version='1.0'?>\n  ... <methodCall>\n  ... <methodName>methodHelp</methodName>\n  ... <params>\n  ... <param>\n  ... <value>says_not_documented</value>\n  ... </param>\n  ... </params>\n  ... </methodCall>\n  ... \"\"\", handle_errors=False)\n  HTTP/1.0 200 OK\n  ...\n  <?xml version='1.0'?>\n  <methodResponse>\n  <params>\n  <param>\n  <value><string>undef</string></value>\n  </param>\n  </params>\n  </methodResponse>\n  <BLANKLINE>\n\n\n\n=======\nCHANGES\n=======\n\n3.5.1 (2010-02-06)\n------------------\n\n- Fix test by including zope.login\n- Include ftesting.zcml from zope.app.securitypolicy.browser.tests\n- Include meta.zcml from zope.securitypolicy \n\n3.5.0 (2009-02-01)\n------------------\n\n- Update ``zope.app.folder`` with ``zope.site``.\n\n3.4.0 (2007-11-03)\n------------------\n\n- Initial release independent of the main Zope tree.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://pypi.python.org/pypi/zope.app.xmlrpcintrospection", "keywords": "zope3 xmlrpcintrospection site local component", "license": "ZPL 2.1", "maintainer": null, "maintainer_email": null, "name": "zope.app.xmlrpcintrospection", "package_url": "https://pypi.org/project/zope.app.xmlrpcintrospection/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/zope.app.xmlrpcintrospection/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://pypi.python.org/pypi/zope.app.xmlrpcintrospection"}, "release_url": "https://pypi.org/project/zope.app.xmlrpcintrospection/3.5.1/", "requires_dist": null, "requires_python": null, "summary": "XML-RPC Method Introspection Support for Zope 3", "version": "3.5.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>This Zope 3 package provides an XML-RPC introspection mechanism.</p>\n<div id=\"detailed-documentation\">\n<h2>Detailed Documentation</h2>\n<div id=\"xmlrpc-introspection\">\n<h3>XMLRPC Introspection</h3>\n<div id=\"what-s-introspection-now\">\n<h4>What\u2019s introspection now ?</h4>\n<p>This Zope 3 package provides an xmlrpcintrospection mechanism,\nas defined here:</p>\n<blockquote>\n<a href=\"http://xmlrpc-c.sourceforge.net/xmlrpc-howto/xmlrpc-howto-api-introspection.html\" rel=\"nofollow\">http://xmlrpc-c.sourceforge.net/xmlrpc-howto/xmlrpc-howto-api-introspection.html</a></blockquote>\n<p>It registers three new xmlrpc methods:</p>\n<blockquote>\n<ul>\n<li><cite>listMethods()</cite>: Lists all xmlrpc methods (ie views) registered for the\ncurrent object</li>\n<li><cite>methodHelp(method_name)</cite>: Returns the method documentation of the given\nmethod.</li>\n<li><cite>methodSignature(method_name)</cite>: Returns the method documentation of the\ngiven method.</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"how-do-i-use-it\">\n<h4>How do I use it ?</h4>\n<p>Basically, if you want to add introspection into your XMLRPCView, you just\nhave to add a decorator for each method of the view, that specifies the return\ntype of the method and the argument types.</p>\n<p>The decorator is called <cite>xmlrpccallable</cite></p>\n<blockquote>\n<pre>&gt;&gt;&gt; from zope.app.xmlrpcintrospection.xmlrpcintrospection import xmlrpccallable\n&gt;&gt;&gt; from zope.app.publisher.xmlrpc import XMLRPCView\n&gt;&gt;&gt; class MySuperXMLRPCView(XMLRPCView):\n...     @xmlrpccallable(str, str, str, str)\n...     def myMethod(self, a, b, c):\n...         \"\"\" my help \"\"\"\n...         return '%s %s, %s, lalalala, you and me, lalalala' % (a, b, c)\n</pre>\n</blockquote>\n<p><cite>myMethod()</cite> will then be introspectable. (find a full examples below, grep\nfor (*))</p>\n</div>\n<div id=\"how-does-it-works\">\n<h4>How does it works ?</h4>\n<p>It is based on introspection mechanisms provided by the apidoc package.</p>\n<p><strong>*</strong> ripped form xmlrpc doctests <strong>*</strong></p>\n<p>Let\u2019s write a view that returns a folder listing:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; class FolderListing:\n...     def contents(self):\n...         return list(self.context.keys())\n</pre>\n</blockquote>\n<p>Now we\u2019ll register it as a view:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; from zope.configuration import xmlconfig\n&gt;&gt;&gt; ignored = xmlconfig.string(\"\"\"\n... &lt;configure\n...     xmlns=\"http://namespaces.zope.org/zope\"\n...     xmlns:xmlrpc=\"http://namespaces.zope.org/xmlrpc\"\n...     &gt;\n...   &lt;!-- We only need to do this include in this example,\n...        Normally the include has already been done for us. --&gt;\n...   &lt;include package=\"zope.app.publisher.xmlrpc\" file=\"meta.zcml\" /&gt;\n...\n...   &lt;xmlrpc:view\n...       for=\"zope.site.interfaces.IFolder\"\n...       methods=\"contents\"\n...       class=\"zope.app.xmlrpcintrospection.README.FolderListing\"\n...       permission=\"zope.ManageContent\"\n...       /&gt;\n... &lt;/configure&gt;\n... \"\"\")\n</pre>\n</blockquote>\n<p>Now, we\u2019ll add some items to the root folder:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; print http(r\"\"\"\n... POST /@@contents.html HTTP/1.1\n... Authorization: Basic bWdyOm1ncnB3\n... Content-Length: 73\n... Content-Type: application/x-www-form-urlencoded\n...\n... type_name=BrowserAdd__zope.site.folder.Folder&amp;new_value=f1\"\"\")\nHTTP/1.1 303 See Other\n...\n</pre>\n<pre>&gt;&gt;&gt; print http(r\"\"\"\n... POST /@@contents.html HTTP/1.1\n... Authorization: Basic bWdyOm1ncnB3\n... Content-Length: 73\n... Content-Type: application/x-www-form-urlencoded\n...\n... type_name=BrowserAdd__zope.site.folder.Folder&amp;new_value=f2\"\"\")\nHTTP/1.1 303 See Other\n...\n</pre>\n</blockquote>\n<p>And call our xmlrpc method:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; print http(r\"\"\"\n... POST / HTTP/1.0\n... Authorization: Basic bWdyOm1ncnB3\n... Content-Length: 102\n... Content-Type: text/xml\n...\n... &lt;?xml version='1.0'?&gt;\n... &lt;methodCall&gt;\n... &lt;methodName&gt;contents&lt;/methodName&gt;\n... &lt;params&gt;\n... &lt;/params&gt;\n... &lt;/methodCall&gt;\n... \"\"\")\nHTTP/1.0 200 OK\n...\n&lt;?xml version='1.0'?&gt;\n&lt;methodResponse&gt;\n&lt;params&gt;\n&lt;param&gt;\n&lt;value&gt;&lt;array&gt;&lt;data&gt;\n&lt;value&gt;&lt;string&gt;f1&lt;/string&gt;&lt;/value&gt;\n&lt;value&gt;&lt;string&gt;f2&lt;/string&gt;&lt;/value&gt;\n&lt;/data&gt;&lt;/array&gt;&lt;/value&gt;\n&lt;/param&gt;\n&lt;/params&gt;\n&lt;/methodResponse&gt;\n&lt;BLANKLINE&gt;\n</pre>\n</blockquote>\n<p><strong>*</strong> end of ripped form xmlrpc doctests <strong>*</strong></p>\n<p>Now we want to provide to that view introspection.\nLet\u2019s add three new xmlrcp methods, that published\nthe introspection api.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; ignored = xmlconfig.string(\"\"\"\n... &lt;configure\n...     xmlns=\"http://namespaces.zope.org/zope\"\n...     xmlns:xmlrpc=\"http://namespaces.zope.org/xmlrpc\"\n...     &gt;\n...   &lt;!-- We only need to do this include in this example,\n...        Normally the include has already been done for us. --&gt;\n...   &lt;include package=\"zope.app.publisher.xmlrpc\" file=\"meta.zcml\" /&gt;\n...   &lt;xmlrpc:view\n...     for=\"zope.interface.Interface\"\n...     methods=\"listMethods  methodHelp methodSignature\"\n...     class=\"zope.app.xmlrpcintrospection.xmlrpcintrospection.XMLRPCIntrospection\"\n...     permission=\"zope.Public\"\n...     /&gt;\n... &lt;/configure&gt;\n... \"\"\")\n</pre>\n</blockquote>\n<dl>\n<dt>They are linked to XMLRPCIntrospection class, that actually</dt>\n<dd>knows how to lookup to all interfaces</dd>\n</dl>\n<p>And call our xmlrpc method, that should list the content method:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; print http(r\"\"\"\n... POST / HTTP/1.0\n... Content-Type: text/xml\n...\n... &lt;?xml version='1.0'?&gt;\n... &lt;methodCall&gt;\n... &lt;methodName&gt;listMethods&lt;/methodName&gt;\n... &lt;params&gt;\n... &lt;/params&gt;\n... &lt;/methodCall&gt;\n... \"\"\", handle_errors=False)\nHTTP/1.0 200 OK\n...\n&lt;?xml version='1.0'?&gt;\n&lt;methodResponse&gt;\n...\n&lt;value&gt;&lt;string&gt;contents&lt;/string&gt;&lt;/value&gt;\n...\n&lt;/methodResponse&gt;\n&lt;BLANKLINE&gt;\n</pre>\n</blockquote>\n<p>Let\u2019s try to add another method, to se if it gets listed\u2026</p>\n<blockquote>\n<pre>&gt;&gt;&gt; class FolderListing2:\n...     def contents2(self):\n...         return list(self.context.keys())\n&gt;&gt;&gt; from zope.configuration import xmlconfig\n&gt;&gt;&gt; ignored = xmlconfig.string(\"\"\"\n... &lt;configure\n...     xmlns=\"http://namespaces.zope.org/zope\"\n...     xmlns:xmlrpc=\"http://namespaces.zope.org/xmlrpc\"\n...     &gt;\n...   &lt;!-- We only need to do this include in this example,\n...        Normally the include has already been done for us. --&gt;\n...   &lt;include package=\"zope.app.publisher.xmlrpc\" file=\"meta.zcml\" /&gt;\n...\n...   &lt;xmlrpc:view\n...       for=\"zope.site.interfaces.IFolder\"\n...       methods=\"contents2\"\n...       class=\"zope.app.xmlrpcintrospection.README.FolderListing2\"\n...       permission=\"zope.ManageContent\"\n...       /&gt;\n... &lt;/configure&gt;\n... \"\"\")\n&gt;&gt;&gt; print http(r\"\"\"\n... POST / HTTP/1.0\n... Content-Type: text/xml\n...\n... &lt;?xml version='1.0'?&gt;\n... &lt;methodCall&gt;\n... &lt;methodName&gt;listMethods&lt;/methodName&gt;\n... &lt;params&gt;\n... &lt;/params&gt;\n... &lt;/methodCall&gt;\n... \"\"\", handle_errors=False)\nHTTP/1.0 200 OK\n...\n&lt;?xml version='1.0'?&gt;\n&lt;methodResponse&gt;\n...\n&lt;value&gt;&lt;string&gt;contents&lt;/string&gt;&lt;/value&gt;\n&lt;value&gt;&lt;string&gt;contents2&lt;/string&gt;&lt;/value&gt;\n...\n&lt;/methodResponse&gt;\n&lt;BLANKLINE&gt;\n</pre>\n</blockquote>\n<p>No we want to test methodHelp and methodSignature, to check that it returns,</p>\n<blockquote>\n<ul>\n<li>The method doc</li>\n<li>The list of attributes</li>\n</ul>\n</blockquote>\n<p>In RPC, the list of attributes has to be return in an array of type:</p>\n<p>[return type, param1 type, param2 type]</p>\n<p>Since in Python we cannot have a static type for the method return type,\nwe introduce here a new mechanism based on a decorator, that let the xmlrpcview\ndeveloper add his own signature.</p>\n<p>If the signature is not given, a defaut list is returned:</p>\n<p>[None, None, None\u2026]</p>\n<p>The decorator append to the function objet two new parameters,\nto get back the signature.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; from zope.app.xmlrpcintrospection.xmlrpcintrospection import xmlrpccallable\n&gt;&gt;&gt; class JacksonFiveRPC:\n...     @xmlrpccallable(str, str, str, str)\n...     def says(self, a, b, c):\n...         return '%s %s, %s, lalalala, you and me, lalalala' % (a, b, c)\n</pre>\n</blockquote>\n<p>Let\u2019s try to get back the signature:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; JacksonFiveRPC().says.return_type\n&lt;type 'str'&gt;\n&gt;&gt;&gt; JacksonFiveRPC().says.parameters_types\n(&lt;type 'str'&gt;, &lt;type 'str'&gt;, &lt;type 'str'&gt;)\n</pre>\n</blockquote>\n<p>The method is still callable as needed:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; JacksonFiveRPC().says('a', 'b', 'c')\n'a b, c, lalalala, you and me, lalalala'\n</pre>\n</blockquote>\n<p>Let\u2019s try out decorated and not decorated methods signatures (*):</p>\n<blockquote>\n<pre>&gt;&gt;&gt; class JacksonFiveRPC:\n...     @xmlrpccallable(str, str, str, str)\n...     def says(self, a, b, c):\n...         return '%s %s, %s, lalalala, you and me, lalalala' % (a, b, c)\n...     def says_not_decorated(self, a, b, c):\n...         return '%s %s, %s, lalalala, you and me, lalalala' % (a, b, c)\n&gt;&gt;&gt; from zope.configuration import xmlconfig\n&gt;&gt;&gt; ignored = xmlconfig.string(\"\"\"\n... &lt;configure\n...     xmlns=\"http://namespaces.zope.org/zope\"\n...     xmlns:xmlrpc=\"http://namespaces.zope.org/xmlrpc\"\n...     &gt;\n...   &lt;!-- We only need to do this include in this example,\n...        Normally the include has already been done for us. --&gt;\n...   &lt;include package=\"zope.app.publisher.xmlrpc\" file=\"meta.zcml\" /&gt;\n...\n...   &lt;xmlrpc:view\n...       for=\"zope.site.folder.IFolder\"\n...       methods=\"says says_not_decorated\"\n...       class=\"zope.app.xmlrpcintrospection.README.JacksonFiveRPC\"\n...       permission=\"zope.ManageContent\"\n...       /&gt;\n... &lt;/configure&gt;\n... \"\"\")\n</pre>\n</blockquote>\n<p>Now let\u2019s try to get the signature for <cite>says()</cite>:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; print http(r\"\"\"\n... POST / HTTP/1.0\n... Content-Type: text/xml\n...\n... &lt;?xml version='1.0'?&gt;\n... &lt;methodCall&gt;\n... &lt;methodName&gt;methodSignature&lt;/methodName&gt;\n... &lt;params&gt;\n... &lt;param&gt;\n... &lt;value&gt;says&lt;/value&gt;\n... &lt;/param&gt;\n... &lt;/params&gt;\n... &lt;/methodCall&gt;\n... \"\"\", handle_errors=False)\nHTTP/1.0 200 OK\n...\n&lt;?xml version='1.0'?&gt;\n&lt;methodResponse&gt;\n&lt;params&gt;\n&lt;param&gt;\n&lt;value&gt;&lt;array&gt;&lt;data&gt;\n&lt;value&gt;&lt;array&gt;&lt;data&gt;\n&lt;value&gt;&lt;string&gt;str&lt;/string&gt;&lt;/value&gt;\n&lt;value&gt;&lt;string&gt;str&lt;/string&gt;&lt;/value&gt;\n&lt;value&gt;&lt;string&gt;str&lt;/string&gt;&lt;/value&gt;\n&lt;value&gt;&lt;string&gt;str&lt;/string&gt;&lt;/value&gt;\n&lt;/data&gt;&lt;/array&gt;&lt;/value&gt;\n&lt;/data&gt;&lt;/array&gt;&lt;/value&gt;\n&lt;/param&gt;\n&lt;/params&gt;\n&lt;/methodResponse&gt;\n&lt;BLANKLINE&gt;\n</pre>\n</blockquote>\n<p>Now let\u2019s try to get the signature for says_not_decorated()`:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; print http(r\"\"\"\n... POST / HTTP/1.0\n... Content-Type: text/xml\n...\n... &lt;?xml version='1.0'?&gt;\n... &lt;methodCall&gt;\n... &lt;methodName&gt;methodSignature&lt;/methodName&gt;\n... &lt;params&gt;\n... &lt;param&gt;\n... &lt;value&gt;says_not_decorated&lt;/value&gt;\n... &lt;/param&gt;\n... &lt;/params&gt;\n... &lt;/methodCall&gt;\n... \"\"\", handle_errors=False)\nHTTP/1.0 200 OK\n...\n&lt;?xml version='1.0'?&gt;\n&lt;methodResponse&gt;\n&lt;params&gt;\n&lt;param&gt;\n&lt;value&gt;&lt;array&gt;&lt;data&gt;\n&lt;value&gt;&lt;array&gt;&lt;data&gt;\n&lt;value&gt;&lt;string&gt;undef&lt;/string&gt;&lt;/value&gt;\n&lt;value&gt;&lt;string&gt;undef&lt;/string&gt;&lt;/value&gt;\n&lt;value&gt;&lt;string&gt;undef&lt;/string&gt;&lt;/value&gt;\n&lt;value&gt;&lt;string&gt;undef&lt;/string&gt;&lt;/value&gt;\n&lt;/data&gt;&lt;/array&gt;&lt;/value&gt;\n&lt;/data&gt;&lt;/array&gt;&lt;/value&gt;\n&lt;/param&gt;\n&lt;/params&gt;\n&lt;/methodResponse&gt;\n&lt;BLANKLINE&gt;\n</pre>\n</blockquote>\n<p>Last, but not least, the method help:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; class JacksonFiveRPCDocumented:\n...     @xmlrpccallable(str, str, str, str)\n...     def says(self, a, b, c):\n...         \"\"\" this is the help for\n...             says()\n...         \"\"\"\n...         return '%s %s, %s, lalalala, you and me, lalalala' % (a, b, c)\n...     def says_not_documented(self, a, b, c):\n...         return '%s %s, %s, lalalala, you and me, lalalala' % (a, b, c)\n&gt;&gt;&gt; from zope.configuration import xmlconfig\n&gt;&gt;&gt; ignored = xmlconfig.string(\"\"\"\n... &lt;configure\n...     xmlns=\"http://namespaces.zope.org/zope\"\n...     xmlns:xmlrpc=\"http://namespaces.zope.org/xmlrpc\"\n...     &gt;\n...   &lt;!-- We only need to do this include in this example,\n...        Normally the include has already been done for us. --&gt;\n...   &lt;include package=\"zope.app.publisher.xmlrpc\" file=\"meta.zcml\" /&gt;\n...\n...   &lt;xmlrpc:view\n...       for=\"zope.site.folder.IFolder\"\n...       methods=\"says says_not_documented\"\n...       class=\"zope.app.xmlrpcintrospection.README.JacksonFiveRPCDocumented\"\n...       permission=\"zope.ManageContent\"\n...       /&gt;\n... &lt;/configure&gt;\n... \"\"\")\n&gt;&gt;&gt; print http(r\"\"\"\n... POST / HTTP/1.0\n... Content-Type: text/xml\n...\n... &lt;?xml version='1.0'?&gt;\n... &lt;methodCall&gt;\n... &lt;methodName&gt;methodHelp&lt;/methodName&gt;\n... &lt;params&gt;\n... &lt;param&gt;\n... &lt;value&gt;says&lt;/value&gt;\n... &lt;/param&gt;\n... &lt;/params&gt;\n... &lt;/methodCall&gt;\n... \"\"\", handle_errors=False)\nHTTP/1.0 200 OK\n...\n&lt;?xml version='1.0'?&gt;\n&lt;methodResponse&gt;\n&lt;params&gt;\n&lt;param&gt;\n&lt;value&gt;&lt;string&gt; this is the help for\n             says()\n         &lt;/string&gt;&lt;/value&gt;\n&lt;/param&gt;\n&lt;/params&gt;\n&lt;/methodResponse&gt;\n&lt;BLANKLINE&gt;\n&gt;&gt;&gt; print http(r\"\"\"\n... POST / HTTP/1.0\n... Content-Type: text/xml\n...\n... &lt;?xml version='1.0'?&gt;\n... &lt;methodCall&gt;\n... &lt;methodName&gt;methodHelp&lt;/methodName&gt;\n... &lt;params&gt;\n... &lt;param&gt;\n... &lt;value&gt;says_not_documented&lt;/value&gt;\n... &lt;/param&gt;\n... &lt;/params&gt;\n... &lt;/methodCall&gt;\n... \"\"\", handle_errors=False)\nHTTP/1.0 200 OK\n...\n&lt;?xml version='1.0'?&gt;\n&lt;methodResponse&gt;\n&lt;params&gt;\n&lt;param&gt;\n&lt;value&gt;&lt;string&gt;undef&lt;/string&gt;&lt;/value&gt;\n&lt;/param&gt;\n&lt;/params&gt;\n&lt;/methodResponse&gt;\n&lt;BLANKLINE&gt;\n</pre>\n</blockquote>\n</div>\n</div>\n<div id=\"changes\">\n<h3>CHANGES</h3>\n<div id=\"id1\">\n<h4>3.5.1 (2010-02-06)</h4>\n<ul>\n<li>Fix test by including zope.login</li>\n<li>Include ftesting.zcml from zope.app.securitypolicy.browser.tests</li>\n<li>Include meta.zcml from zope.securitypolicy</li>\n</ul>\n</div>\n<div id=\"id2\">\n<h4>3.5.0 (2009-02-01)</h4>\n<ul>\n<li>Update <tt>zope.app.folder</tt> with <tt>zope.site</tt>.</li>\n</ul>\n</div>\n<div id=\"id3\">\n<h4>3.4.0 (2007-11-03)</h4>\n<ul>\n<li>Initial release independent of the main Zope tree.</li>\n</ul>\n</div>\n</div>\n</div>\n\n          </div>"}, "last_serial": 805080, "releases": {"3.4.0": [{"comment_text": "", "digests": {"md5": "4589b14688814caa01457848a12aee96", "sha256": "dfffa9894ffc4b696ed1f10f5bf96996e4fee34809d8fb77f1b5511ca87cb9af"}, "downloads": -1, "filename": "zope.app.xmlrpcintrospection-3.4.0.tar.gz", "has_sig": false, "md5_digest": "4589b14688814caa01457848a12aee96", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12426, "upload_time": "2007-11-04T20:43:11", "upload_time_iso_8601": "2007-11-04T20:43:11Z", "url": "https://files.pythonhosted.org/packages/ba/3b/d4181cc10734dafa70fb3aa8b845fc313c5926134dabba19a9df4c7c3e9c/zope.app.xmlrpcintrospection-3.4.0.tar.gz", "yanked": false}], "3.5.0": [{"comment_text": "", "digests": {"md5": "2864239ae890bc37715a63683f5df41c", "sha256": "df6288d0a7f26d03c7b5b694072023257d781a55112a356ec9013315f86c5e5b"}, "downloads": -1, "filename": "zope.app.xmlrpcintrospection-3.5.0.tar.gz", "has_sig": false, "md5_digest": "2864239ae890bc37715a63683f5df41c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12167, "upload_time": "2009-02-01T19:38:47", "upload_time_iso_8601": "2009-02-01T19:38:47Z", "url": "https://files.pythonhosted.org/packages/9d/82/d0d108ec73b5ebc6e8591000c9210adde7cd031c40620ab55365857abe97/zope.app.xmlrpcintrospection-3.5.0.tar.gz", "yanked": false}], "3.5.0dev": [], "3.5.1": [{"comment_text": "", "digests": {"md5": "8cf0e7fc13ece3743f96f92d05682d74", "sha256": "fead926e3f1f7f39bc62f5906634d143973d00b7b34f24e691cc2b5bfe7870a6"}, "downloads": -1, "filename": "zope.app.xmlrpcintrospection-3.5.1.tar.gz", "has_sig": false, "md5_digest": "8cf0e7fc13ece3743f96f92d05682d74", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10269, "upload_time": "2010-02-06T04:07:06", "upload_time_iso_8601": "2010-02-06T04:07:06.334458Z", "url": "https://files.pythonhosted.org/packages/4c/b9/ec4ad5e62eca449af19c9bb3fb3ef1e0de05a260f0a60e1ca59c9e5e2878/zope.app.xmlrpcintrospection-3.5.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "8cf0e7fc13ece3743f96f92d05682d74", "sha256": "fead926e3f1f7f39bc62f5906634d143973d00b7b34f24e691cc2b5bfe7870a6"}, "downloads": -1, "filename": "zope.app.xmlrpcintrospection-3.5.1.tar.gz", "has_sig": false, "md5_digest": "8cf0e7fc13ece3743f96f92d05682d74", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10269, "upload_time": "2010-02-06T04:07:06", "upload_time_iso_8601": "2010-02-06T04:07:06.334458Z", "url": "https://files.pythonhosted.org/packages/4c/b9/ec4ad5e62eca449af19c9bb3fb3ef1e0de05a260f0a60e1ca59c9e5e2878/zope.app.xmlrpcintrospection-3.5.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:14:14 2020"}