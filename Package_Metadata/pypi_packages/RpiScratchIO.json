{"info": {"author": "W. H. Bell", "author_email": "whbqcd1@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: POSIX :: Linux", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Topic :: Home Automation", "Topic :: Software Development", "Topic :: System :: Hardware"], "description": "============\nRpiScratchIO\n============\n\nRpiScratchIO is a package that provides additional IO functionality to \nScratch, running on a local Raspberry Pi or on a remote Raspberry Pi or \nother computer.  The package uses the scratchpy client interface to connect \nto a Scratch server process.  The package can be used by running the \nRpiScratchIO script or via::\n\n    #!/usr/bin/env python\n\n    import time\n    import RpiScratchIO\n    from RpiScratchIO import ScratchIO\n    s = ScratchIO.ScratchIO(\"myConfig.cfg\")\n    try:\n      while 1:\n        time.sleep(1000)\n\n    except KeyboardInterrupt:\n      s.cleanup()\n\n\nConfiguration file\n==================\n\nThe configuration file is read using ConfigParser.  The file has three \nsections, e.g.::\n\n    # Unique device name and class.  If the device name is a GPIO\n    # BCM id, then no class name is needed.\n    [DeviceTypes]\n    GPIO23 =\n    ADC = MCP3008()\n    Motor = HBRIDGE()\n    file = FileConnection()\n\n    # The connection mapping for each device.  Simple GPIO devices do\n    # not need a mapping.  The unique device name must be defined in \n    # the DeviceTypes section before the DeviceConnections section.\n    [DeviceConnections]\n    ADC = SPI0\n    MOTOR = GPIO12,GPIO13,GPIO02\n    file = file.txt\n\n    # Used to connect to the Scratch server.  Set the host name to\n    # localhost to use the local Scratch server or choose an IP of\n    # another Scratch server.\n    [ScratchConnection]\n    host = localhost\n    port = 42001\n\nDeviceTypes\n-----------\n\n* The name used before the equals sign must be unique.  It is the name\n  that Scratch will use to refer to the device.\n\n* The text to the right of the equals sign should correspond to a class\n  instantiation.  The string is interpreted as Python, where the default\n  arguments are passed to the class constructor.  This means that\n  Additional arguments can be included inside the constructor call and\n  import statements can be used to include other Python classes.\n\n* In the case of a device name that is a GPIO BCM number (e.g. GPIO23),\n  no object needs to be assigned since a SimpleGpio object is assgined\n  by default.\n\nDeviceConnections\n-----------------\n\n* The DeviceConnections section must be after the DeviceTypes section.\n\n* The device connections define the physical wiring of the components\n  or the connection between file names within Scratch and physicial\n  file names on disk.\n\n* The device name on the left of the equals sign must be declared in the\n  DeviceTypes before it is used here.\n\n* The text to the right of the equals can be a single BCM pin reference,\n  a list of BCM pin references separated by commas or buses.  Valid bus\n  names are I2C0, I2C1, SPI0, SPI1, UART0.\n\nStarting Scratch\n================\n\n* Scratch must be started before the ScratchIO object is instantiated.\n\n* Remote sensors must be enabled by selecting the **Sensors** tool palette.\n  Then right click on **sensor value**. Then select \n  *enable remote sensor connections*.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://pypi.python.org/pypi/RpiScratchIO/", "keywords": "Raspberry Pi GPIO Scratch", "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "RpiScratchIO", "package_url": "https://pypi.org/project/RpiScratchIO/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/RpiScratchIO/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://pypi.python.org/pypi/RpiScratchIO/"}, "release_url": "https://pypi.org/project/RpiScratchIO/0.1.7/", "requires_dist": null, "requires_python": null, "summary": "Easy expansion of Raspberry Pi I/O within Scratch", "version": "0.1.7", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>RpiScratchIO is a package that provides additional IO functionality to\nScratch, running on a local Raspberry Pi or on a remote Raspberry Pi or\nother computer.  The package uses the scratchpy client interface to connect\nto a Scratch server process.  The package can be used by running the\nRpiScratchIO script or via:</p>\n<pre>#!/usr/bin/env python\n\nimport time\nimport RpiScratchIO\nfrom RpiScratchIO import ScratchIO\ns = ScratchIO.ScratchIO(\"myConfig.cfg\")\ntry:\n  while 1:\n    time.sleep(1000)\n\nexcept KeyboardInterrupt:\n  s.cleanup()\n</pre>\n<div id=\"configuration-file\">\n<h2>Configuration file</h2>\n<p>The configuration file is read using ConfigParser.  The file has three\nsections, e.g.:</p>\n<pre># Unique device name and class.  If the device name is a GPIO\n# BCM id, then no class name is needed.\n[DeviceTypes]\nGPIO23 =\nADC = MCP3008()\nMotor = HBRIDGE()\nfile = FileConnection()\n\n# The connection mapping for each device.  Simple GPIO devices do\n# not need a mapping.  The unique device name must be defined in\n# the DeviceTypes section before the DeviceConnections section.\n[DeviceConnections]\nADC = SPI0\nMOTOR = GPIO12,GPIO13,GPIO02\nfile = file.txt\n\n# Used to connect to the Scratch server.  Set the host name to\n# localhost to use the local Scratch server or choose an IP of\n# another Scratch server.\n[ScratchConnection]\nhost = localhost\nport = 42001\n</pre>\n<div id=\"devicetypes\">\n<h3>DeviceTypes</h3>\n<ul>\n<li>The name used before the equals sign must be unique.  It is the name\nthat Scratch will use to refer to the device.</li>\n<li>The text to the right of the equals sign should correspond to a class\ninstantiation.  The string is interpreted as Python, where the default\narguments are passed to the class constructor.  This means that\nAdditional arguments can be included inside the constructor call and\nimport statements can be used to include other Python classes.</li>\n<li>In the case of a device name that is a GPIO BCM number (e.g. GPIO23),\nno object needs to be assigned since a SimpleGpio object is assgined\nby default.</li>\n</ul>\n</div>\n<div id=\"deviceconnections\">\n<h3>DeviceConnections</h3>\n<ul>\n<li>The DeviceConnections section must be after the DeviceTypes section.</li>\n<li>The device connections define the physical wiring of the components\nor the connection between file names within Scratch and physicial\nfile names on disk.</li>\n<li>The device name on the left of the equals sign must be declared in the\nDeviceTypes before it is used here.</li>\n<li>The text to the right of the equals can be a single BCM pin reference,\na list of BCM pin references separated by commas or buses.  Valid bus\nnames are I2C0, I2C1, SPI0, SPI1, UART0.</li>\n</ul>\n</div>\n</div>\n<div id=\"starting-scratch\">\n<h2>Starting Scratch</h2>\n<ul>\n<li>Scratch must be started before the ScratchIO object is instantiated.</li>\n<li>Remote sensors must be enabled by selecting the <strong>Sensors</strong> tool palette.\nThen right click on <strong>sensor value</strong>. Then select\n<em>enable remote sensor connections</em>.</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 1068829, "releases": {"0.1.4": [{"comment_text": "", "digests": {"md5": "7a9debc4ac30c207f07822796c74fe93", "sha256": "41b1f38f38b37fb213b698c2b741ebe40f8caa6a1aef331608991e33d7099a8b"}, "downloads": -1, "filename": "RpiScratchIO-0.1.4.tar.gz", "has_sig": false, "md5_digest": "7a9debc4ac30c207f07822796c74fe93", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11044, "upload_time": "2014-02-03T11:38:12", "upload_time_iso_8601": "2014-02-03T11:38:12.167696Z", "url": "https://files.pythonhosted.org/packages/9a/ee/75081f07bd3e9ffc0a23b14babe4b043da1834474304268f6f1a2ae866a4/RpiScratchIO-0.1.4.tar.gz", "yanked": false}], "0.1.5": [{"comment_text": "", "digests": {"md5": "b58485990c1b4b5c412e343bafe876f8", "sha256": "b9467b3043a4ba253ac064f43fdfc872b049b8b13f258791f024f128863af470"}, "downloads": -1, "filename": "RpiScratchIO-0.1.5.tar.gz", "has_sig": false, "md5_digest": "b58485990c1b4b5c412e343bafe876f8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12145, "upload_time": "2014-03-30T13:36:41", "upload_time_iso_8601": "2014-03-30T13:36:41.026873Z", "url": "https://files.pythonhosted.org/packages/f2/b0/084f51d633005528d3d7da2b1864c747b420c3755329239176c9ce7ffe81/RpiScratchIO-0.1.5.tar.gz", "yanked": false}], "0.1.6": [{"comment_text": "", "digests": {"md5": "ccb328bf4e80e52a42900ced53e7f4a5", "sha256": "6580d7e2d588688b5995bce8727f319245efd28583c2ec911c63b9da8da4b63e"}, "downloads": -1, "filename": "RpiScratchIO-0.1.6.tar.gz", "has_sig": false, "md5_digest": "ccb328bf4e80e52a42900ced53e7f4a5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10887, "upload_time": "2014-04-22T22:27:01", "upload_time_iso_8601": "2014-04-22T22:27:01.266791Z", "url": "https://files.pythonhosted.org/packages/f4/15/8c4c00485b36f4ef9bcc76adb27434f84101510699198315ae152edd4ecd/RpiScratchIO-0.1.6.tar.gz", "yanked": false}], "0.1.7": [{"comment_text": "", "digests": {"md5": "41c39ce32daa9c01d99766d11fd7a275", "sha256": "355e9f4904240c58f62d20f86f6a70ae8a4ac233444c5b4873e2312007cf15b8"}, "downloads": -1, "filename": "RpiScratchIO-0.1.7.tar.gz", "has_sig": false, "md5_digest": "41c39ce32daa9c01d99766d11fd7a275", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12461, "upload_time": "2014-04-23T06:58:44", "upload_time_iso_8601": "2014-04-23T06:58:44.070832Z", "url": "https://files.pythonhosted.org/packages/bf/0b/3ebef7c3441ffcc7c69f3d48bde150eb5c75ebe2b0ea1b9ff0c756287872/RpiScratchIO-0.1.7.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "41c39ce32daa9c01d99766d11fd7a275", "sha256": "355e9f4904240c58f62d20f86f6a70ae8a4ac233444c5b4873e2312007cf15b8"}, "downloads": -1, "filename": "RpiScratchIO-0.1.7.tar.gz", "has_sig": false, "md5_digest": "41c39ce32daa9c01d99766d11fd7a275", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12461, "upload_time": "2014-04-23T06:58:44", "upload_time_iso_8601": "2014-04-23T06:58:44.070832Z", "url": "https://files.pythonhosted.org/packages/bf/0b/3ebef7c3441ffcc7c69f3d48bde150eb5c75ebe2b0ea1b9ff0c756287872/RpiScratchIO-0.1.7.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:00:54 2020"}