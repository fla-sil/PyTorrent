{"info": {"author": "kaelzhang", "author_email": "", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: Implementation :: PyPy", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "[![Build Status](https://travis-ci.org/kaelzhang/gaia.svg?branch=master)](https://travis-ci.org/kaelzhang/gaia)\n[![Coverage](https://codecov.io/gh/kaelzhang/gaia/branch/master/graph/badge.svg)](https://codecov.io/gh/kaelzhang/gaia)\n\n# gaia\n\nGaia, the very framework to make [gRPC](https://grpc.io) services. Gaia defines a definitely intuitive way to write gRPC services.\n\n- **Handle Custom Errors** `gRPC` does NOT provide an formal way to handle errors, even lack of documentation, while `gaia` will do it for you.\n- **Manage `.proto` files** `gaia` allows us to share proto files between server and clients. `gaia` shares `gPRC` protobuf files by wrapping them into an npm package and publishing the npm tarball to npm registry.\n- **Eggjs compatible plugins** `gaia` supports to use [egg plugins](https://github.com/search?q=topic%3Aegg-plugin&type=Repositories) to extend your applications.\n- **Restful API service made easy** `gaia` provides a convenient way to define restful API routings upon the existing gRPC services.\n\n`gaia` supports both [**proto2**](https://developers.google.com/protocol-buffers/docs/proto) and [**proto3**](https://developers.google.com/protocol-buffers/docs/proto3).\n\n## Install\n\n```sh\n$ npm i gaia\n```\n\n## Table of Contents\n\n- [APIs](#apis)\n  - [Client](#new-clientroot-clientconfig)\n  - [Server](#new-serverroot-serverconfig)\n- [How gaia makes `.proto` files sharable and portable?](#how-gaia-makes-proto-files-sharable-and-portable)\n  - [Create the client of `hello`](#create-the-client-of-hello)\n  - [Import `.proto` files from `hello`](#import-proto-files-from-hello)\n  - [More about `includeDirs`](#more-about-includedirs)\n- [How to Write a `gaia` Server](#how-to-write-a-gaia-server)\n  - [Packages and name resolution](#packages-and-name-resolution)\n  - [`this` object of the controller methods](#this-object-of-the-controller-methods)\n    - [Reusing other controllers](#reusing-other-controllers)\n    - [Using external services](#using-external-services)\n    - [Using plugins](#using-plugins)\n\n## Synopsis\n\n```js\nconst {\n  Server,\n  Client,\n  resolvePackage\n} = require('gaia')\n\nconst root = path.join(__dirname, 'example', 'hello')\n```\n\nTo make better understanding the usage of `gaia`, **the example below is based on the demo in the\n[`example/hello`](https://github.com/kaelzhang/gaia/tree/master/example/hello) directory**.\n\nStart server:\n\n```js\nnew Server(root).listen(50051)\n```\n\nRun client:\n\n```js\nconst {\n  // service Greeter\n  Greeter\n} = new Client(root).connect('localhost:50051')\n\nconst run = async () => {\n  const {message} = await Greeter.sayHello({name: 'world'})\n\n  console.log(message)\n}\n\nrun()\n// Hello world\n```\n\n# APIs\n\n## new Client(root)\n\nCreates the gaia client.\n\n- **root** `path` the root path to load the client from\n\n### client.connect(host):\n\nConnects to the gRPC server and returns the service methods\n\n- **host** `string` the server host to connect to which includes the server hostname and port and whose pattern is `<hostname>:<port>`\n\n## new Server(root, serverConfig?)\n\n- **root** `path` the root path to load the server from\n- **serverConfig?** `ServerConfig={}` server configurations\n\n```ts\ninterface ServerConfig {\n  // Defines where to load controllers\n  controller_root?: string = 'controller'\n  plugins?: Array<Plugin>\n  services?: Services\n}\n\ninterface Package {\n  // The root path of the package\n  path?: string\n  // The package name of the package\n  package?: string\n\n  // Either path or package should be defined.\n}\n\ninterface Plugin extends Package {\n  // Configurations for the plugin\n  config: object\n}\n\ninterface Service extends Package {\n  // the host param of `client.connect(host)`\n  host: string\n}\n\ninterface Services {\n  [name: string]: Service\n}\n```\n\n### server.listen(port): this\n\n- **port** `number` the port which gRPC server will listen to.\n\nStart the gaia server.\n\n### server.kill()\n\nForcibly shut down the gRPC server\n\n### await server.close()\n\nGracefully shut down the server\n\n## resolvePackage(id: string): string\n\n- **id** `string` package id\n\nReturns the root path of the package\n\n```js\nnew Client(resolvePackage('foo')).connect(host)\n```\n\n## How `gaia` makes `.proto` files sharable and portable?\n\n`gaia` takes full advantage of npm packages to share proto files.\n\nA minimun `gaia` service portable, as well as service `hello` or package `hello`, could be:\n\n```\n/path/to/hello/\n  |-- proto/\n  |       |-- hello.proto\n  |-- package.json\n```\n\nAnd in `proto/hello.proto`:\n\n```protobuf\nsyntax = \"proto3\";\n\nservice Greeter {\n  rpc SayHello (HelloRequest) returns (HelloReply) {}\n}\n\nmessage HelloRequest {\n  string name = 1;\n}\n\nmessage HelloReply {\n  string message = 1;\n}\n```\n\npackage.json\n\n```js\n{\n  \"name\": \"hello\",\n  \"gaia\": {\n    ...\n  }\n}\n```\n\nThe the **optional** field `\"gaia\"` of package.json follows the schema:\n\n```ts\ninterface FieldGaia {\n  // Tells `gaia` which properties of error should be\n  // - collected, serialized and transmitted to the clients.\n  // - or deseriialized from server\n  // `errorProps` defaults to `['code', 'message']`\n\n  // if the server throws an `error`, by default, gaia will collect\n  // - `error.code`,\n  // - `error.message`\n  // and send them to its clients, while other properties will be omitted.\n  errorProps?: Array<string> = ['code', 'message']\n  // Specifies where to load proto files.\n  // `protoPath` should be a relative path to `root`\n  protoPath?: string = 'proto'\n  // Proto filenames inside `protoPath`.\n  // If not specified, gaia will search all `*.proto` files inside `protoPath`.\n  protos?: Array<string> | string = '*.proto'\n\n  // See section #import-proto-files-from-hello below\n  protoDependencies?: Array<string> = []\n}\n```\n\nApparently, package `hello` has everything we need to create a client agent for service `hello`.\n\nAnd package `hello` is language-independent which only contains proto files and client configurations.\n\n### Create the client of `hello`\n\nAssume that we have a new project `foo`, and we `npm install hello`.\n\n```\n/path/to/foo/\n  |-- proto/\n  |        |-- foo.proto\n  |-- node_modules/\n  |              |-- hello/\n  |-- package.json\n```\n\nThen if the `hello` service is already running on port `8000`, we could create a hello client by following lines:\n\n```js\nconst {Client} = require('gaia')\nconst {Greeter} = new Client('/path/to/foo/node_modules/hello').connect('localhost:8000')\n```\n\n### Import `.proto` files from `hello`\n\nSince project `foo`, as we introduced above, has a dependency `hello`, we could import `.proto` files from package `hello`.\n\nin `/path/to/foo/proto/foo.proto`:\n\n```protobuf\nsyntax = \"proto3\";\n\n// We could install a package and import things from it\n// as well as we do in JavaScript es modules. Oh yeah! \ud83d\ude06\nimport \"hello/proto/hello.proto\"\n\nservice FooGreeter {\n  // We could reuse message types from package `hello`\n  rpc SayHello (HelloRequest) returns (HelloReply) {}\n}\n```\n\nIn order to do that, we need to declare that `hello` is a `gaia` dependency of `foo` by adding some fields in package.json:\n\n```js\n{\n  \"name\": \"foo\",\n  \"gaia\": {\n    // So that we could import .proto files from package `hello`\n    \"protoDependencies\": [\n      // We have to add \"hello\" here.\n      \"hello\"\n    ]\n  },\n  \"dependencies\": {\n    // This is generated by `npm install`\n    \"hello\": \"^1.0.0\"\n  }\n}\n```\n\nAnd `gaia` will manage the [`--proto_path`](https://developers.google.com/protocol-buffers/docs/proto3#importing-definitions)s ([includeDirs](https://www.npmjs.com/package/@grpc/proto-loader)) for you, so that gRPC Protobuf Loader will know where to search and import `.proto` files\n\n### More about `includeDirs`\n\n`gaia` recursively parses the `protoDependencies` of project `foo`, and its `protoDependency`'s `protoDependencies` to generate the `options.includeDirs` option for [`@grpc/proto-loader`](https://www.npmjs.com/package/@grpc/proto-loader)\n\n## How to Write a `gaia` Server\n\nTake the project `hello` which introduced above for example.\n\nSince we define a `Greeter` service in `hello.proto`, we must implement the corresponding controller by ourselves.\n\nService controllers should be defined in directory `/path/to/hello/controller` which can be changed with by config `controller_root`.\n\nWe must provide a `Greeter.js` in that directory.\n\n```\n/path/to/hello/\n  |-- controller/\n  |            |-- Greeter.js\n```\n\nin [`Greeter.js`](example/hello/controller/Greeter.js), there should be an async/sync method named `SayHello` in `exports` because we defined a `SayHello` rpc method in service `Greeter`\n\n```js\nexports.sayHello = ({name}) => ({\n  message: `Hello ${name}`\n})\n```\n\n### Packages and name resolution\n\nFirst the innermost package scope is searched, then the next-innermost, and so on, and at last the service name.\n\nAssume that we have the following protocol buffer.\n\n```proto\npackage foo.bar;\n\nservice Baz {\n  rpc Quux (Req) returns (Res) {}\n}\n```\n\nThen in directory `controller_root`, we need to create a JavaScript file `foo/bar/Baz.js` whose `exports` has a `Quux` method.\n\n### `this` object of the controller methods\n\nThere are several properties could be access by `this` object of the controller methods.\n\n#### Reusing other controllers\n\nWe could access other controller methods by\n\n```js\nthis.controller[namespace0][namespace1]...[serviceName][methodName]\n```\n\nFor example, we could access the `Quux` method by\n\n```js\nexports.OtherMethodsOfSomeService = async function (request) {\n  const data = await this.controller.foo.bar.Baz.Quux(request)\n  // ...\n  return something\n}\n```\n\n#### Using external services\n\nIf we provide `serverConfig.services` for server\n\n```js\nnew Server('/path/to/service/foo', {\n  ...otherConfig,\n  services: {\n    hello: {\n      // 'hello' is a gaia server\n      package: 'hello'\n    }\n  }\n})\n.listen(port)\n```\n\nThen, client of the service `'hello'` could be accessed from the service controller of foo by:\n\n```js\nexports.Quux = async function ({name}) {\n  const {message} = await this.service.hello.SayHello({name})\n  return {\n    property: message\n  }\n}\n```\n\n#### Using plugins\n\n\n\n## License\n\n[MIT](LICENSE)\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/kaelzhang/gaia", "keywords": "gaia grpc framework server client", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "gaia.py", "package_url": "https://pypi.org/project/gaia.py/", "platform": "", "project_url": "https://pypi.org/project/gaia.py/", "project_urls": {"Homepage": "https://github.com/kaelzhang/gaia"}, "release_url": "https://pypi.org/project/gaia.py/0.1.0/", "requires_dist": null, "requires_python": ">=3.7", "summary": "Gaia, the very framework to make gRPC services", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://travis-ci.org/kaelzhang/gaia\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/42862bf02037c84f7768db0ee62a78df66e97e71/68747470733a2f2f7472617669732d63692e6f72672f6b61656c7a68616e672f676169612e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://codecov.io/gh/kaelzhang/gaia\" rel=\"nofollow\"><img alt=\"Coverage\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/548c44317466cde0819904be4894007a41e04596/68747470733a2f2f636f6465636f762e696f2f67682f6b61656c7a68616e672f676169612f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a></p>\n<h1>gaia</h1>\n<p>Gaia, the very framework to make <a href=\"https://grpc.io\" rel=\"nofollow\">gRPC</a> services. Gaia defines a definitely intuitive way to write gRPC services.</p>\n<ul>\n<li><strong>Handle Custom Errors</strong> <code>gRPC</code> does NOT provide an formal way to handle errors, even lack of documentation, while <code>gaia</code> will do it for you.</li>\n<li><strong>Manage <code>.proto</code> files</strong> <code>gaia</code> allows us to share proto files between server and clients. <code>gaia</code> shares <code>gPRC</code> protobuf files by wrapping them into an npm package and publishing the npm tarball to npm registry.</li>\n<li><strong>Eggjs compatible plugins</strong> <code>gaia</code> supports to use <a href=\"https://github.com/search?q=topic%3Aegg-plugin&amp;type=Repositories\" rel=\"nofollow\">egg plugins</a> to extend your applications.</li>\n<li><strong>Restful API service made easy</strong> <code>gaia</code> provides a convenient way to define restful API routings upon the existing gRPC services.</li>\n</ul>\n<p><code>gaia</code> supports both <a href=\"https://developers.google.com/protocol-buffers/docs/proto\" rel=\"nofollow\"><strong>proto2</strong></a> and <a href=\"https://developers.google.com/protocol-buffers/docs/proto3\" rel=\"nofollow\"><strong>proto3</strong></a>.</p>\n<h2>Install</h2>\n<pre>$ npm i gaia\n</pre>\n<h2>Table of Contents</h2>\n<ul>\n<li><a href=\"#apis\" rel=\"nofollow\">APIs</a>\n<ul>\n<li><a href=\"#new-clientroot-clientconfig\" rel=\"nofollow\">Client</a></li>\n<li><a href=\"#new-serverroot-serverconfig\" rel=\"nofollow\">Server</a></li>\n</ul>\n</li>\n<li><a href=\"#how-gaia-makes-proto-files-sharable-and-portable\" rel=\"nofollow\">How gaia makes <code>.proto</code> files sharable and portable?</a>\n<ul>\n<li><a href=\"#create-the-client-of-hello\" rel=\"nofollow\">Create the client of <code>hello</code></a></li>\n<li><a href=\"#import-proto-files-from-hello\" rel=\"nofollow\">Import <code>.proto</code> files from <code>hello</code></a></li>\n<li><a href=\"#more-about-includedirs\" rel=\"nofollow\">More about <code>includeDirs</code></a></li>\n</ul>\n</li>\n<li><a href=\"#how-to-write-a-gaia-server\" rel=\"nofollow\">How to Write a <code>gaia</code> Server</a>\n<ul>\n<li><a href=\"#packages-and-name-resolution\" rel=\"nofollow\">Packages and name resolution</a></li>\n<li><a href=\"#this-object-of-the-controller-methods\" rel=\"nofollow\"><code>this</code> object of the controller methods</a>\n<ul>\n<li><a href=\"#reusing-other-controllers\" rel=\"nofollow\">Reusing other controllers</a></li>\n<li><a href=\"#using-external-services\" rel=\"nofollow\">Using external services</a></li>\n<li><a href=\"#using-plugins\" rel=\"nofollow\">Using plugins</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2>Synopsis</h2>\n<pre><span class=\"kr\">const</span> <span class=\"p\">{</span>\n  <span class=\"nx\">Server</span><span class=\"p\">,</span>\n  <span class=\"nx\">Client</span><span class=\"p\">,</span>\n  <span class=\"nx\">resolvePackage</span>\n<span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'gaia'</span><span class=\"p\">)</span>\n\n<span class=\"kr\">const</span> <span class=\"nx\">root</span> <span class=\"o\">=</span> <span class=\"nx\">path</span><span class=\"p\">.</span><span class=\"nx\">join</span><span class=\"p\">(</span><span class=\"nx\">__dirname</span><span class=\"p\">,</span> <span class=\"s1\">'example'</span><span class=\"p\">,</span> <span class=\"s1\">'hello'</span><span class=\"p\">)</span>\n</pre>\n<p>To make better understanding the usage of <code>gaia</code>, <strong>the example below is based on the demo in the\n<a href=\"https://github.com/kaelzhang/gaia/tree/master/example/hello\" rel=\"nofollow\"><code>example/hello</code></a> directory</strong>.</p>\n<p>Start server:</p>\n<pre><span class=\"k\">new</span> <span class=\"nx\">Server</span><span class=\"p\">(</span><span class=\"nx\">root</span><span class=\"p\">).</span><span class=\"nx\">listen</span><span class=\"p\">(</span><span class=\"mi\">50051</span><span class=\"p\">)</span>\n</pre>\n<p>Run client:</p>\n<pre><span class=\"kr\">const</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// service Greeter</span>\n  <span class=\"nx\">Greeter</span>\n<span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Client</span><span class=\"p\">(</span><span class=\"nx\">root</span><span class=\"p\">).</span><span class=\"nx\">connect</span><span class=\"p\">(</span><span class=\"s1\">'localhost:50051'</span><span class=\"p\">)</span>\n\n<span class=\"kr\">const</span> <span class=\"nx\">run</span> <span class=\"o\">=</span> <span class=\"nx\">async</span> <span class=\"p\">()</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"kr\">const</span> <span class=\"p\">{</span><span class=\"nx\">message</span><span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nx\">await</span> <span class=\"nx\">Greeter</span><span class=\"p\">.</span><span class=\"nx\">sayHello</span><span class=\"p\">({</span><span class=\"nx\">name</span><span class=\"o\">:</span> <span class=\"s1\">'world'</span><span class=\"p\">})</span>\n\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">message</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n\n<span class=\"nx\">run</span><span class=\"p\">()</span>\n<span class=\"c1\">// Hello world</span>\n</pre>\n<h1>APIs</h1>\n<h2>new Client(root)</h2>\n<p>Creates the gaia client.</p>\n<ul>\n<li><strong>root</strong> <code>path</code> the root path to load the client from</li>\n</ul>\n<h3>client.connect(host):</h3>\n<p>Connects to the gRPC server and returns the service methods</p>\n<ul>\n<li><strong>host</strong> <code>string</code> the server host to connect to which includes the server hostname and port and whose pattern is <code>&lt;hostname&gt;:&lt;port&gt;</code></li>\n</ul>\n<h2>new Server(root, serverConfig?)</h2>\n<ul>\n<li><strong>root</strong> <code>path</code> the root path to load the server from</li>\n<li><strong>serverConfig?</strong> <code>ServerConfig={}</code> server configurations</li>\n</ul>\n<pre><span class=\"kr\">interface</span> <span class=\"nx\">ServerConfig</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// Defines where to load controllers</span>\n  <span class=\"nx\">controller_root?</span>: <span class=\"kt\">string</span> <span class=\"o\">=</span> <span class=\"s1\">'controller'</span>\n  <span class=\"nx\">plugins?</span>: <span class=\"kt\">Array</span><span class=\"o\">&lt;</span><span class=\"nx\">Plugin</span><span class=\"o\">&gt;</span>\n  <span class=\"nx\">services?</span>: <span class=\"kt\">Services</span>\n<span class=\"p\">}</span>\n\n<span class=\"kr\">interface</span> <span class=\"nx\">Package</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// The root path of the package</span>\n  <span class=\"nx\">path?</span>: <span class=\"kt\">string</span>\n  <span class=\"c1\">// The package name of the package</span>\n  <span class=\"kr\">package</span><span class=\"o\">?:</span> <span class=\"kt\">string</span>\n\n  <span class=\"c1\">// Either path or package should be defined.</span>\n<span class=\"p\">}</span>\n\n<span class=\"kr\">interface</span> <span class=\"nx\">Plugin</span> <span class=\"kr\">extends</span> <span class=\"nx\">Package</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// Configurations for the plugin</span>\n  <span class=\"nx\">config</span>: <span class=\"kt\">object</span>\n<span class=\"p\">}</span>\n\n<span class=\"kr\">interface</span> <span class=\"nx\">Service</span> <span class=\"kr\">extends</span> <span class=\"nx\">Package</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// the host param of `client.connect(host)`</span>\n  <span class=\"nx\">host</span>: <span class=\"kt\">string</span>\n<span class=\"p\">}</span>\n\n<span class=\"kr\">interface</span> <span class=\"nx\">Services</span> <span class=\"p\">{</span>\n  <span class=\"p\">[</span><span class=\"nx\">name</span>: <span class=\"kt\">string</span><span class=\"p\">]</span><span class=\"o\">:</span> <span class=\"nx\">Service</span>\n<span class=\"p\">}</span>\n</pre>\n<h3>server.listen(port): this</h3>\n<ul>\n<li><strong>port</strong> <code>number</code> the port which gRPC server will listen to.</li>\n</ul>\n<p>Start the gaia server.</p>\n<h3>server.kill()</h3>\n<p>Forcibly shut down the gRPC server</p>\n<h3>await server.close()</h3>\n<p>Gracefully shut down the server</p>\n<h2>resolvePackage(id: string): string</h2>\n<ul>\n<li><strong>id</strong> <code>string</code> package id</li>\n</ul>\n<p>Returns the root path of the package</p>\n<pre><span class=\"k\">new</span> <span class=\"nx\">Client</span><span class=\"p\">(</span><span class=\"nx\">resolvePackage</span><span class=\"p\">(</span><span class=\"s1\">'foo'</span><span class=\"p\">)).</span><span class=\"nx\">connect</span><span class=\"p\">(</span><span class=\"nx\">host</span><span class=\"p\">)</span>\n</pre>\n<h2>How <code>gaia</code> makes <code>.proto</code> files sharable and portable?</h2>\n<p><code>gaia</code> takes full advantage of npm packages to share proto files.</p>\n<p>A minimun <code>gaia</code> service portable, as well as service <code>hello</code> or package <code>hello</code>, could be:</p>\n<pre><code>/path/to/hello/\n  |-- proto/\n  |       |-- hello.proto\n  |-- package.json\n</code></pre>\n<p>And in <code>proto/hello.proto</code>:</p>\n<pre><span class=\"na\">syntax</span> <span class=\"o\">=</span> <span class=\"s\">\"proto3\"</span><span class=\"p\">;</span>\n\n<span class=\"kd\">service</span> <span class=\"n\">Greeter</span> <span class=\"p\">{</span>\n  <span class=\"k\">rpc</span> <span class=\"n\">SayHello</span> <span class=\"p\">(</span><span class=\"n\">HelloRequest</span><span class=\"p\">)</span> <span class=\"k\">returns</span> <span class=\"p\">(</span><span class=\"n\">HelloReply</span><span class=\"p\">)</span> <span class=\"p\">{}</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">message</span> <span class=\"nc\">HelloRequest</span> <span class=\"p\">{</span>\n  <span class=\"kt\">string</span> <span class=\"na\">name</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">message</span> <span class=\"nc\">HelloReply</span> <span class=\"p\">{</span>\n  <span class=\"kt\">string</span> <span class=\"kd\">message</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre>\n<p>package.json</p>\n<pre><span class=\"p\">{</span>\n  <span class=\"s2\">\"name\"</span><span class=\"o\">:</span> <span class=\"s2\">\"hello\"</span><span class=\"p\">,</span>\n  <span class=\"s2\">\"gaia\"</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n    <span class=\"p\">...</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n<p>The the <strong>optional</strong> field <code>\"gaia\"</code> of package.json follows the schema:</p>\n<pre><span class=\"kr\">interface</span> <span class=\"nx\">FieldGaia</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// Tells `gaia` which properties of error should be</span>\n  <span class=\"c1\">// - collected, serialized and transmitted to the clients.</span>\n  <span class=\"c1\">// - or deseriialized from server</span>\n  <span class=\"c1\">// `errorProps` defaults to `['code', 'message']`</span>\n\n  <span class=\"c1\">// if the server throws an `error`, by default, gaia will collect</span>\n  <span class=\"c1\">// - `error.code`,</span>\n  <span class=\"c1\">// - `error.message`</span>\n  <span class=\"c1\">// and send them to its clients, while other properties will be omitted.</span>\n  <span class=\"nx\">errorProps?</span>: <span class=\"kt\">Array</span><span class=\"o\">&lt;</span><span class=\"kt\">string</span><span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'code'</span><span class=\"p\">,</span> <span class=\"s1\">'message'</span><span class=\"p\">]</span>\n  <span class=\"c1\">// Specifies where to load proto files.</span>\n  <span class=\"c1\">// `protoPath` should be a relative path to `root`</span>\n  <span class=\"nx\">protoPath?</span>: <span class=\"kt\">string</span> <span class=\"o\">=</span> <span class=\"s1\">'proto'</span>\n  <span class=\"c1\">// Proto filenames inside `protoPath`.</span>\n  <span class=\"c1\">// If not specified, gaia will search all `*.proto` files inside `protoPath`.</span>\n  <span class=\"nx\">protos?</span>: <span class=\"kt\">Array</span><span class=\"o\">&lt;</span><span class=\"kt\">string</span><span class=\"o\">&gt;</span> <span class=\"o\">|</span> <span class=\"kt\">string</span> <span class=\"o\">=</span> <span class=\"s1\">'*.proto'</span>\n\n  <span class=\"c1\">// See section #import-proto-files-from-hello below</span>\n  <span class=\"nx\">protoDependencies?</span>: <span class=\"kt\">Array</span><span class=\"o\">&lt;</span><span class=\"kt\">string</span><span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"p\">}</span>\n</pre>\n<p>Apparently, package <code>hello</code> has everything we need to create a client agent for service <code>hello</code>.</p>\n<p>And package <code>hello</code> is language-independent which only contains proto files and client configurations.</p>\n<h3>Create the client of <code>hello</code></h3>\n<p>Assume that we have a new project <code>foo</code>, and we <code>npm install hello</code>.</p>\n<pre><code>/path/to/foo/\n  |-- proto/\n  |        |-- foo.proto\n  |-- node_modules/\n  |              |-- hello/\n  |-- package.json\n</code></pre>\n<p>Then if the <code>hello</code> service is already running on port <code>8000</code>, we could create a hello client by following lines:</p>\n<pre><span class=\"kr\">const</span> <span class=\"p\">{</span><span class=\"nx\">Client</span><span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'gaia'</span><span class=\"p\">)</span>\n<span class=\"kr\">const</span> <span class=\"p\">{</span><span class=\"nx\">Greeter</span><span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Client</span><span class=\"p\">(</span><span class=\"s1\">'/path/to/foo/node_modules/hello'</span><span class=\"p\">).</span><span class=\"nx\">connect</span><span class=\"p\">(</span><span class=\"s1\">'localhost:8000'</span><span class=\"p\">)</span>\n</pre>\n<h3>Import <code>.proto</code> files from <code>hello</code></h3>\n<p>Since project <code>foo</code>, as we introduced above, has a dependency <code>hello</code>, we could import <code>.proto</code> files from package <code>hello</code>.</p>\n<p>in <code>/path/to/foo/proto/foo.proto</code>:</p>\n<pre><span class=\"na\">syntax</span> <span class=\"o\">=</span> <span class=\"s\">\"proto3\"</span><span class=\"p\">;</span>\n\n<span class=\"c1\">// We could install a package and import things from it</span>\n<span class=\"c1\">// as well as we do in JavaScript es modules. Oh yeah! \ud83d\ude06</span>\n<span class=\"k\">import</span> <span class=\"s\">\"hello/proto/hello.proto\"</span>\n\n<span class=\"kd\">service</span> <span class=\"n\">FooGreeter</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// We could reuse message types from package `hello`</span>\n  <span class=\"k\">rpc</span> <span class=\"n\">SayHello</span> <span class=\"p\">(</span><span class=\"n\">HelloRequest</span><span class=\"p\">)</span> <span class=\"k\">returns</span> <span class=\"p\">(</span><span class=\"n\">HelloReply</span><span class=\"p\">)</span> <span class=\"p\">{}</span>\n<span class=\"p\">}</span>\n</pre>\n<p>In order to do that, we need to declare that <code>hello</code> is a <code>gaia</code> dependency of <code>foo</code> by adding some fields in package.json:</p>\n<pre><span class=\"p\">{</span>\n  <span class=\"s2\">\"name\"</span><span class=\"o\">:</span> <span class=\"s2\">\"foo\"</span><span class=\"p\">,</span>\n  <span class=\"s2\">\"gaia\"</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// So that we could import .proto files from package `hello`</span>\n    <span class=\"s2\">\"protoDependencies\"</span><span class=\"o\">:</span> <span class=\"p\">[</span>\n      <span class=\"c1\">// We have to add \"hello\" here.</span>\n      <span class=\"s2\">\"hello\"</span>\n    <span class=\"p\">]</span>\n  <span class=\"p\">},</span>\n  <span class=\"s2\">\"dependencies\"</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// This is generated by `npm install`</span>\n    <span class=\"s2\">\"hello\"</span><span class=\"o\">:</span> <span class=\"s2\">\"^1.0.0\"</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n<p>And <code>gaia</code> will manage the <a href=\"https://developers.google.com/protocol-buffers/docs/proto3#importing-definitions\" rel=\"nofollow\"><code>--proto_path</code></a>s (<a href=\"https://www.npmjs.com/package/@grpc/proto-loader\" rel=\"nofollow\">includeDirs</a>) for you, so that gRPC Protobuf Loader will know where to search and import <code>.proto</code> files</p>\n<h3>More about <code>includeDirs</code></h3>\n<p><code>gaia</code> recursively parses the <code>protoDependencies</code> of project <code>foo</code>, and its <code>protoDependency</code>'s <code>protoDependencies</code> to generate the <code>options.includeDirs</code> option for <a href=\"https://www.npmjs.com/package/@grpc/proto-loader\" rel=\"nofollow\"><code>@grpc/proto-loader</code></a></p>\n<h2>How to Write a <code>gaia</code> Server</h2>\n<p>Take the project <code>hello</code> which introduced above for example.</p>\n<p>Since we define a <code>Greeter</code> service in <code>hello.proto</code>, we must implement the corresponding controller by ourselves.</p>\n<p>Service controllers should be defined in directory <code>/path/to/hello/controller</code> which can be changed with by config <code>controller_root</code>.</p>\n<p>We must provide a <code>Greeter.js</code> in that directory.</p>\n<pre><code>/path/to/hello/\n  |-- controller/\n  |            |-- Greeter.js\n</code></pre>\n<p>in <a href=\"example/hello/controller/Greeter.js\" rel=\"nofollow\"><code>Greeter.js</code></a>, there should be an async/sync method named <code>SayHello</code> in <code>exports</code> because we defined a <code>SayHello</code> rpc method in service <code>Greeter</code></p>\n<pre><span class=\"nx\">exports</span><span class=\"p\">.</span><span class=\"nx\">sayHello</span> <span class=\"o\">=</span> <span class=\"p\">({</span><span class=\"nx\">name</span><span class=\"p\">})</span> <span class=\"p\">=&gt;</span> <span class=\"p\">({</span>\n  <span class=\"nx\">message</span><span class=\"o\">:</span> <span class=\"sb\">`Hello </span><span class=\"si\">${</span><span class=\"nx\">name</span><span class=\"si\">}</span><span class=\"sb\">`</span>\n<span class=\"p\">})</span>\n</pre>\n<h3>Packages and name resolution</h3>\n<p>First the innermost package scope is searched, then the next-innermost, and so on, and at last the service name.</p>\n<p>Assume that we have the following protocol buffer.</p>\n<pre><span class=\"kn\">package</span> <span class=\"nn\">foo</span><span class=\"o\">.</span><span class=\"n\">bar</span><span class=\"p\">;</span>\n\n<span class=\"kd\">service</span> <span class=\"n\">Baz</span> <span class=\"p\">{</span>\n  <span class=\"k\">rpc</span> <span class=\"n\">Quux</span> <span class=\"p\">(</span><span class=\"n\">Req</span><span class=\"p\">)</span> <span class=\"k\">returns</span> <span class=\"p\">(</span><span class=\"n\">Res</span><span class=\"p\">)</span> <span class=\"p\">{}</span>\n<span class=\"p\">}</span>\n</pre>\n<p>Then in directory <code>controller_root</code>, we need to create a JavaScript file <code>foo/bar/Baz.js</code> whose <code>exports</code> has a <code>Quux</code> method.</p>\n<h3><code>this</code> object of the controller methods</h3>\n<p>There are several properties could be access by <code>this</code> object of the controller methods.</p>\n<h4>Reusing other controllers</h4>\n<p>We could access other controller methods by</p>\n<pre><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">controller</span><span class=\"p\">[</span><span class=\"nx\">namespace0</span><span class=\"p\">][</span><span class=\"nx\">namespace1</span><span class=\"p\">]...[</span><span class=\"nx\">serviceName</span><span class=\"p\">][</span><span class=\"nx\">methodName</span><span class=\"p\">]</span>\n</pre>\n<p>For example, we could access the <code>Quux</code> method by</p>\n<pre><span class=\"nx\">exports</span><span class=\"p\">.</span><span class=\"nx\">OtherMethodsOfSomeService</span> <span class=\"o\">=</span> <span class=\"nx\">async</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">request</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"kr\">const</span> <span class=\"nx\">data</span> <span class=\"o\">=</span> <span class=\"nx\">await</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">controller</span><span class=\"p\">.</span><span class=\"nx\">foo</span><span class=\"p\">.</span><span class=\"nx\">bar</span><span class=\"p\">.</span><span class=\"nx\">Baz</span><span class=\"p\">.</span><span class=\"nx\">Quux</span><span class=\"p\">(</span><span class=\"nx\">request</span><span class=\"p\">)</span>\n  <span class=\"c1\">// ...</span>\n  <span class=\"k\">return</span> <span class=\"nx\">something</span>\n<span class=\"p\">}</span>\n</pre>\n<h4>Using external services</h4>\n<p>If we provide <code>serverConfig.services</code> for server</p>\n<pre><span class=\"k\">new</span> <span class=\"nx\">Server</span><span class=\"p\">(</span><span class=\"s1\">'/path/to/service/foo'</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n  <span class=\"p\">...</span><span class=\"nx\">otherConfig</span><span class=\"p\">,</span>\n  <span class=\"nx\">services</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n    <span class=\"nx\">hello</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n      <span class=\"c1\">// 'hello' is a gaia server</span>\n      <span class=\"kr\">package</span><span class=\"o\">:</span> <span class=\"s1\">'hello'</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">})</span>\n<span class=\"p\">.</span><span class=\"nx\">listen</span><span class=\"p\">(</span><span class=\"nx\">port</span><span class=\"p\">)</span>\n</pre>\n<p>Then, client of the service <code>'hello'</code> could be accessed from the service controller of foo by:</p>\n<pre><span class=\"nx\">exports</span><span class=\"p\">.</span><span class=\"nx\">Quux</span> <span class=\"o\">=</span> <span class=\"nx\">async</span> <span class=\"kd\">function</span> <span class=\"p\">({</span><span class=\"nx\">name</span><span class=\"p\">})</span> <span class=\"p\">{</span>\n  <span class=\"kr\">const</span> <span class=\"p\">{</span><span class=\"nx\">message</span><span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nx\">await</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">service</span><span class=\"p\">.</span><span class=\"nx\">hello</span><span class=\"p\">.</span><span class=\"nx\">SayHello</span><span class=\"p\">({</span><span class=\"nx\">name</span><span class=\"p\">})</span>\n  <span class=\"k\">return</span> <span class=\"p\">{</span>\n    <span class=\"nx\">property</span><span class=\"o\">:</span> <span class=\"nx\">message</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n<h4>Using plugins</h4>\n<h2>License</h2>\n<p><a href=\"LICENSE\" rel=\"nofollow\">MIT</a></p>\n\n          </div>"}, "last_serial": 6716848, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "b787bc134a2e00d05ab021cf1e6d4cc8", "sha256": "15fd8cfa6675bcc077c25fb03e770ed4c647be8f340a5da81b73f135cbd7c9b6"}, "downloads": -1, "filename": "gaia.py-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "b787bc134a2e00d05ab021cf1e6d4cc8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 6911, "upload_time": "2020-02-28T12:02:16", "upload_time_iso_8601": "2020-02-28T12:02:16.582773Z", "url": "https://files.pythonhosted.org/packages/f2/d8/b0440ed8f5a9f37faf041072a9ac9ed3ad262c5f52ce470be074200c99ad/gaia.py-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7b3b90b047b484606b61e37a83943da6", "sha256": "ecb8586d10d2e8e07d46f02305632dae8f03f92afd2cfd8ac5fbeeee14003977"}, "downloads": -1, "filename": "gaia.py-0.1.0.tar.gz", "has_sig": false, "md5_digest": "7b3b90b047b484606b61e37a83943da6", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 7788, "upload_time": "2020-02-28T12:02:19", "upload_time_iso_8601": "2020-02-28T12:02:19.546448Z", "url": "https://files.pythonhosted.org/packages/d3/84/d82a5b449ac3b07ae8be2122047baa52fa99c4a0d2d4fbfd823da73211b6/gaia.py-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b787bc134a2e00d05ab021cf1e6d4cc8", "sha256": "15fd8cfa6675bcc077c25fb03e770ed4c647be8f340a5da81b73f135cbd7c9b6"}, "downloads": -1, "filename": "gaia.py-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "b787bc134a2e00d05ab021cf1e6d4cc8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 6911, "upload_time": "2020-02-28T12:02:16", "upload_time_iso_8601": "2020-02-28T12:02:16.582773Z", "url": "https://files.pythonhosted.org/packages/f2/d8/b0440ed8f5a9f37faf041072a9ac9ed3ad262c5f52ce470be074200c99ad/gaia.py-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7b3b90b047b484606b61e37a83943da6", "sha256": "ecb8586d10d2e8e07d46f02305632dae8f03f92afd2cfd8ac5fbeeee14003977"}, "downloads": -1, "filename": "gaia.py-0.1.0.tar.gz", "has_sig": false, "md5_digest": "7b3b90b047b484606b61e37a83943da6", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 7788, "upload_time": "2020-02-28T12:02:19", "upload_time_iso_8601": "2020-02-28T12:02:19.546448Z", "url": "https://files.pythonhosted.org/packages/d3/84/d82a5b449ac3b07ae8be2122047baa52fa99c4a0d2d4fbfd823da73211b6/gaia.py-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:59:21 2020"}