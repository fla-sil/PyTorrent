{"info": {"author": "Uber Product Security", "author_email": "UNKNOWN", "bugtrack_url": null, "classifiers": ["Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Topic :: Internet :: WWW/HTTP", "Topic :: Software Development :: Libraries"], "description": ".. role:: python(code)\n   :language: python\n\n==\nh1\n==\n\n.. image:: https://img.shields.io/pypi/pyversions/h1.svg\n.. image:: https://img.shields.io/pypi/v/h1.svg\n    :target: https://pypi.python.org/pypi/h1\n\n\nA HackerOne API client for Python. The API closely maps to the REST API that HackerOne provides.\nDocumentation for their API is `available here <https://api.hackerone.com/docs/v1>`_.\n\n=======\nLicense\n=======\n\nMIT\n\n============\nInstallation\n============\n\nFor installation via pip:\n\n.. code-block:: bash\n\n    pip install h1\n\nFor development, In the project root run:\n\n.. code-block:: bash\n\n    virtualenv env\n    source env/bin/activate\n    make bootstrap\n\nThe manual approach should work as well:\n\n.. code-block:: bash\n\n    python setup.py install\n\n========\nExamples\n========\n\n-----------------------\nInitializing the Client\n-----------------------\n\n.. code-block:: python\n\n    >>> from h1.client import HackerOneClient\n    >>> from h1.models import Report\n    >>> c = HackerOneClient(\"YOUR-API-TOKEN-IDENTIFIER\", \"YOUR-API-TOKEN\")\n\n-------------------------------------------\nGetting all reports created in the last day\n-------------------------------------------\n\n:python:`HackerOneClient.find_resources()` allows you to specify a resource to find (only :python:`Report` is\nsupported for now) and some criteria to filter on. The only *required* filter is :python:`program`, which\nmust be set to the target HackerOne program's name. Any additional filters may be passed as kwargs,\nand everything in `HackerOne's filter documentation <https://api.hackerone.com/docs/v1#/reports/query>`_\nshould be supported.\n\nFor example, here's how we'd get all reports created in the past 24 hours:\n\n.. code-block:: python\n\n    >>> import datetime as dt\n    >>> day_ago = dt.datetime.now() - dt.timedelta(days=1)\n    >>> listing = c.find_resources(Report, program=[\"test-program\"], created_at__gt=day_ago)\n    >>> len(listing)\n    3\n    >>> listing[0].title\n    u'This is a test report!'\n\n-----------------------------------------\nGetting all resolved reports in a program\n-----------------------------------------\n\nSimilarly, if we filter on :python:`state` we can get all the :python:`resolved` reports:\n\n.. code-block:: python\n\n    >>> resolved_listing = c.find_resources(Report, program=[\"test-program\"], state=[\"resolved\"])\n    >>> resolved_listing[0].title\n\n-------------------------------\nGetting a specific report by ID\n-------------------------------\n\n:python:`HackerOneClient.get_resource()` allows you to pass a resource type (again, currently just :python:`Report`,)\nand an ID to fetch:\n\n.. code-block:: python\n\n    >>> report = c.get_resource(Report, 110306)\n    >>> report.title\n    u'Test RCE SQLi'\n    >>> report.state\n    u'not-applicable'\n\n------------------------------\nTallying report counts by user\n------------------------------\n\nHere's an example of using the client to figure out who your most prolific reporters are:\n\n.. code-block:: python\n\n    >>> from collections import Counter\n    >>> reporter_count = Counter()\n    >>> all_reports = c.find_resources(Report, program=[\"test-program\"])\n    >>> for report in all_reports:\n    ...     reporter_count[report.reporter] += 1\n    ...\n    >>> print(reporter_count)\n    Counter({<User - bestreporter>: 21, <User - another_reporter>: 12, <User - r3p0rt3r>: 2, <User - newbie>: 1})\n\n=============\nRunning Tests\n=============\n\n.. code-block:: bash\n\n    virtualenv env\n    source env/bin/activate\n    make bootstrap\n    make test", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/uber-common/h1-python", "keywords": null, "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "h1", "package_url": "https://pypi.org/project/h1/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/h1/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/uber-common/h1-python"}, "release_url": "https://pypi.org/project/h1/1.4.2/", "requires_dist": null, "requires_python": null, "summary": "A HackerOne API client for Python", "version": "1.4.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"h1\">\n<h2>h1</h2>\n<img alt=\"https://img.shields.io/pypi/pyversions/h1.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/431212bdf04bc14f025c369d8cc5ce3443ae16b8/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f68312e737667\">\n<a href=\"https://pypi.python.org/pypi/h1\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/v/h1.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f9c97b564802e9ae8ca6da439f273f46876880b4/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f68312e737667\"></a>\n<p>A HackerOne API client for Python. The API closely maps to the REST API that HackerOne provides.\nDocumentation for their API is <a href=\"https://api.hackerone.com/docs/v1\" rel=\"nofollow\">available here</a>.</p>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>MIT</p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>For installation via pip:</p>\n<pre>pip install h1\n</pre>\n<p>For development, In the project root run:</p>\n<pre>virtualenv env\n<span class=\"nb\">source</span> env/bin/activate\nmake bootstrap\n</pre>\n<p>The manual approach should work as well:</p>\n<pre>python setup.py install\n</pre>\n</div>\n<div id=\"examples\">\n<h2>Examples</h2>\n<div id=\"initializing-the-client\">\n<h3>Initializing the Client</h3>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">h1.client</span> <span class=\"kn\">import</span> <span class=\"n\">HackerOneClient</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">h1.models</span> <span class=\"kn\">import</span> <span class=\"n\">Report</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">HackerOneClient</span><span class=\"p\">(</span><span class=\"s2\">\"YOUR-API-TOKEN-IDENTIFIER\"</span><span class=\"p\">,</span> <span class=\"s2\">\"YOUR-API-TOKEN\"</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"getting-all-reports-created-in-the-last-day\">\n<h3>Getting all reports created in the last day</h3>\n<p><code class=\"python\"><span class=\"n\">HackerOneClient</span><span class=\"o\">.</span><span class=\"n\">find_resources</span><span class=\"p\">()</span></code> allows you to specify a resource to find (only <code class=\"python\"><span class=\"n\">Report</span></code> is\nsupported for now) and some criteria to filter on. The only <em>required</em> filter is <code class=\"python\"><span class=\"n\">program</span></code>, which\nmust be set to the target HackerOne program\u2019s name. Any additional filters may be passed as kwargs,\nand everything in <a href=\"https://api.hackerone.com/docs/v1#/reports/query\" rel=\"nofollow\">HackerOne\u2019s filter documentation</a>\nshould be supported.</p>\n<p>For example, here\u2019s how we\u2019d get all reports created in the past 24 hours:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">datetime</span> <span class=\"k\">as</span> <span class=\"nn\">dt</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">day_ago</span> <span class=\"o\">=</span> <span class=\"n\">dt</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">now</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"n\">dt</span><span class=\"o\">.</span><span class=\"n\">timedelta</span><span class=\"p\">(</span><span class=\"n\">days</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">listing</span> <span class=\"o\">=</span> <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">find_resources</span><span class=\"p\">(</span><span class=\"n\">Report</span><span class=\"p\">,</span> <span class=\"n\">program</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"test-program\"</span><span class=\"p\">],</span> <span class=\"n\">created_at__gt</span><span class=\"o\">=</span><span class=\"n\">day_ago</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">listing</span><span class=\"p\">)</span>\n<span class=\"mi\">3</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">listing</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">title</span>\n<span class=\"sa\">u</span><span class=\"s1\">'This is a test report!'</span>\n</pre>\n</div>\n<div id=\"getting-all-resolved-reports-in-a-program\">\n<h3>Getting all resolved reports in a program</h3>\n<p>Similarly, if we filter on <code class=\"python\"><span class=\"n\">state</span></code> we can get all the <code class=\"python\"><span class=\"n\">resolved</span></code> reports:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">resolved_listing</span> <span class=\"o\">=</span> <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">find_resources</span><span class=\"p\">(</span><span class=\"n\">Report</span><span class=\"p\">,</span> <span class=\"n\">program</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"test-program\"</span><span class=\"p\">],</span> <span class=\"n\">state</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"resolved\"</span><span class=\"p\">])</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">resolved_listing</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">title</span>\n</pre>\n</div>\n<div id=\"getting-a-specific-report-by-id\">\n<h3>Getting a specific report by ID</h3>\n<p><code class=\"python\"><span class=\"n\">HackerOneClient</span><span class=\"o\">.</span><span class=\"n\">get_resource</span><span class=\"p\">()</span></code> allows you to pass a resource type (again, currently just <code class=\"python\"><span class=\"n\">Report</span></code>,)\nand an ID to fetch:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">report</span> <span class=\"o\">=</span> <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">get_resource</span><span class=\"p\">(</span><span class=\"n\">Report</span><span class=\"p\">,</span> <span class=\"mi\">110306</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">report</span><span class=\"o\">.</span><span class=\"n\">title</span>\n<span class=\"sa\">u</span><span class=\"s1\">'Test RCE SQLi'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">report</span><span class=\"o\">.</span><span class=\"n\">state</span>\n<span class=\"sa\">u</span><span class=\"s1\">'not-applicable'</span>\n</pre>\n</div>\n<div id=\"tallying-report-counts-by-user\">\n<h3>Tallying report counts by user</h3>\n<p>Here\u2019s an example of using the client to figure out who your most prolific reporters are:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">collections</span> <span class=\"kn\">import</span> <span class=\"n\">Counter</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">reporter_count</span> <span class=\"o\">=</span> <span class=\"n\">Counter</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">all_reports</span> <span class=\"o\">=</span> <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">find_resources</span><span class=\"p\">(</span><span class=\"n\">Report</span><span class=\"p\">,</span> <span class=\"n\">program</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"test-program\"</span><span class=\"p\">])</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">for</span> <span class=\"n\">report</span> <span class=\"ow\">in</span> <span class=\"n\">all_reports</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>     <span class=\"n\">reporter_count</span><span class=\"p\">[</span><span class=\"n\">report</span><span class=\"o\">.</span><span class=\"n\">reporter</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n<span class=\"o\">...</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">reporter_count</span><span class=\"p\">)</span>\n<span class=\"n\">Counter</span><span class=\"p\">({</span><span class=\"o\">&lt;</span><span class=\"n\">User</span> <span class=\"o\">-</span> <span class=\"n\">bestreporter</span><span class=\"o\">&gt;</span><span class=\"p\">:</span> <span class=\"mi\">21</span><span class=\"p\">,</span> <span class=\"o\">&lt;</span><span class=\"n\">User</span> <span class=\"o\">-</span> <span class=\"n\">another_reporter</span><span class=\"o\">&gt;</span><span class=\"p\">:</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"o\">&lt;</span><span class=\"n\">User</span> <span class=\"o\">-</span> <span class=\"n\">r3p0rt3r</span><span class=\"o\">&gt;</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"o\">&lt;</span><span class=\"n\">User</span> <span class=\"o\">-</span> <span class=\"n\">newbie</span><span class=\"o\">&gt;</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">})</span>\n</pre>\n</div>\n</div>\n<div id=\"running-tests\">\n<h2>Running Tests</h2>\n<pre>virtualenv env\n<span class=\"nb\">source</span> env/bin/activate\nmake bootstrap\nmake <span class=\"nb\">test</span>\n</pre>\n</div>\n\n          </div>"}, "last_serial": 2572642, "releases": {"1.3.0": [{"comment_text": "", "digests": {"md5": "e077b4273449332a5a407002f87ab643", "sha256": "778d76412007d3011093987c74ff8b360dd2130470da6c13261c99c25b1b5716"}, "downloads": -1, "filename": "h1-1.3.0.tar.gz", "has_sig": false, "md5_digest": "e077b4273449332a5a407002f87ab643", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17436, "upload_time": "2016-08-12T00:54:15", "upload_time_iso_8601": "2016-08-12T00:54:15.056949Z", "url": "https://files.pythonhosted.org/packages/65/86/aac079320c026c292c1011f573a289c4231753d8e9a04bba64ed720f7da8/h1-1.3.0.tar.gz", "yanked": false}], "1.4.0": [{"comment_text": "", "digests": {"md5": "ecc04c0baf455d1f504cb1c6a13588c1", "sha256": "834676f16cba0659cce0acbc634d4c63091cd82d826ab6bfb6685fdf9b5651a3"}, "downloads": -1, "filename": "h1-1.4.0.tar.gz", "has_sig": false, "md5_digest": "ecc04c0baf455d1f504cb1c6a13588c1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17484, "upload_time": "2016-08-15T23:17:36", "upload_time_iso_8601": "2016-08-15T23:17:36.303268Z", "url": "https://files.pythonhosted.org/packages/d6/ac/66b7d05dc18dbbef0a9b67b6cac70620dc16e9e32538fd546f65ae439f5d/h1-1.4.0.tar.gz", "yanked": false}], "1.4.1": [{"comment_text": "", "digests": {"md5": "ab3405feb524fd3023f6432999cc5bb9", "sha256": "050a022f40fc333758dc20fa66b030ea3d94f896bf9f5629430a9b9cf3309ff3"}, "downloads": -1, "filename": "h1-1.4.1.tar.gz", "has_sig": false, "md5_digest": "ab3405feb524fd3023f6432999cc5bb9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17678, "upload_time": "2016-12-14T21:32:30", "upload_time_iso_8601": "2016-12-14T21:32:30.440791Z", "url": "https://files.pythonhosted.org/packages/75/d1/8d23f94732d14385543ed55fdaf2ec811d7bd016f8ecaa6aea59847ddd2f/h1-1.4.1.tar.gz", "yanked": false}], "1.4.2": [{"comment_text": "", "digests": {"md5": "2075ada523b0880ca785a7219da5d5aa", "sha256": "48c531f756e441d5782f4b62e658b060da8808004d0da2e3690afe057088beb8"}, "downloads": -1, "filename": "h1-1.4.2.tar.gz", "has_sig": false, "md5_digest": "2075ada523b0880ca785a7219da5d5aa", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17699, "upload_time": "2017-01-13T19:07:07", "upload_time_iso_8601": "2017-01-13T19:07:07.116420Z", "url": "https://files.pythonhosted.org/packages/e5/ef/99c2c6e306317f51a0ccac73d8650c99eddc59b8f36520e80cb673a17299/h1-1.4.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "2075ada523b0880ca785a7219da5d5aa", "sha256": "48c531f756e441d5782f4b62e658b060da8808004d0da2e3690afe057088beb8"}, "downloads": -1, "filename": "h1-1.4.2.tar.gz", "has_sig": false, "md5_digest": "2075ada523b0880ca785a7219da5d5aa", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17699, "upload_time": "2017-01-13T19:07:07", "upload_time_iso_8601": "2017-01-13T19:07:07.116420Z", "url": "https://files.pythonhosted.org/packages/e5/ef/99c2c6e306317f51a0ccac73d8650c99eddc59b8f36520e80cb673a17299/h1-1.4.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:52:57 2020"}