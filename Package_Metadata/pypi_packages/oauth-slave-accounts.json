{"info": {"author": "Jean Ribes", "author_email": "jean@ribes.me", "bugtrack_url": null, "classifiers": ["Environment :: Web Environment", "Framework :: Django", "Intended Audience :: Developers", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Topic :: Internet :: WWW/HTTP", "Topic :: Internet :: WWW/HTTP :: Dynamic Content"], "description": "Ressource Server Utilities\n==========================\n\nIf you've read RFCs on OAuth or (more likely) the **django-oauth-toolkit** docs, you know that a *Ressource Server* sorts\nof delegates user authentication to the *Authorization Server*.\n\nBut the current implementation in *Django OAuth Toolkit* only copies the username from the *Authorization Server* in its\ndatabase. This implies that all users have no special permissions, i.e. you lose administrator rights when you access\nthe *Ressource Server* !\n\nThe class FullUserOAuthBackend aims to fix this by fetching the full user model from the *Authorization Server* after\nyou've accessed the *Ressource Server*.\n\nInstallation\n------------\n`pip install oauth-slave-accounts`\n\nSetup\n-----\nAuthorization Server\n~~~~~~~~~~~~~~~~~~~~\nYou need to create an endpoint that exposes user data in a json manner (or further override my methods), the easiest being\na DjangoRestFramework ModelViewset.\nThe current implementation uses the user's Authorization token as `lookup_field`.\n\n.. code:: python\n\n    class UserViewSet(viewset.ReadOnlyModelViewSet):\n        queryset = User.objects.all()\n        serializer_class = UserSerializer\n        permission_classes = [ServerServerPermission]\n        def get_object(self):\n            return  AccessToken.objects.get(token=self.kwargs.get('pk')).user\n..\n\n **pro tip:** you should exclude the password from the serializer, because its confidential even if salted, and furthermore its useability probably depends on the `SECRET_KEY`\n\nRessource Server\n~~~~~~~~~~~~~~~~\nSubclass `ressource_server_utils.backend.FullUserOAuthBackend` and override the following :\n * property fetch_url : a string that describes your *Authorization Server*'s endpoint to get User data e.g. `http://auth.srv/user/{}/`\n * property UserSerializer : a DjangoRestFramework Serializer that defines how to parse your *Authorization Server*'s response\n * And optionnally\n    - method get_auth_token()\n    - method refresh_auth_token()", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "", "license": "BSD License", "maintainer": "", "maintainer_email": "", "name": "oauth-slave-accounts", "package_url": "https://pypi.org/project/oauth-slave-accounts/", "platform": "", "project_url": "https://pypi.org/project/oauth-slave-accounts/", "project_urls": null, "release_url": "https://pypi.org/project/oauth-slave-accounts/0.1.1/", "requires_dist": null, "requires_python": "", "summary": "Custom Django Oauth backend for Ressource Servers to download full user data fom Authorization Server", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>If you\u2019ve read RFCs on OAuth or (more likely) the <strong>django-oauth-toolkit</strong> docs, you know that a <em>Ressource Server</em> sorts\nof delegates user authentication to the <em>Authorization Server</em>.</p>\n<p>But the current implementation in <em>Django OAuth Toolkit</em> only copies the username from the <em>Authorization Server</em> in its\ndatabase. This implies that all users have no special permissions, i.e. you lose administrator rights when you access\nthe <em>Ressource Server</em> !</p>\n<p>The class FullUserOAuthBackend aims to fix this by fetching the full user model from the <em>Authorization Server</em> after\nyou\u2019ve accessed the <em>Ressource Server</em>.</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p><cite>pip install oauth-slave-accounts</cite></p>\n</div>\n<div id=\"setup\">\n<h2>Setup</h2>\n<div id=\"authorization-server\">\n<h3>Authorization Server</h3>\n<p>You need to create an endpoint that exposes user data in a json manner (or further override my methods), the easiest being\na DjangoRestFramework ModelViewset.\nThe current implementation uses the user\u2019s Authorization token as <cite>lookup_field</cite>.</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">UserViewSet</span><span class=\"p\">(</span><span class=\"n\">viewset</span><span class=\"o\">.</span><span class=\"n\">ReadOnlyModelViewSet</span><span class=\"p\">):</span>\n    <span class=\"n\">queryset</span> <span class=\"o\">=</span> <span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span>\n    <span class=\"n\">serializer_class</span> <span class=\"o\">=</span> <span class=\"n\">UserSerializer</span>\n    <span class=\"n\">permission_classes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">ServerServerPermission</span><span class=\"p\">]</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_object</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span>  <span class=\"n\">AccessToken</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">token</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'pk'</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">user</span>\n</pre>\n<blockquote>\n<strong>pro tip:</strong> you should exclude the password from the serializer, because its confidential even if salted, and furthermore its useability probably depends on the <cite>SECRET_KEY</cite></blockquote>\n</div>\n<div id=\"ressource-server\">\n<h3>Ressource Server</h3>\n<dl>\n<dt>Subclass <cite>ressource_server_utils.backend.FullUserOAuthBackend</cite> and override the following :</dt>\n<dd><ul>\n<li>property fetch_url : a string that describes your <em>Authorization Server</em>\u2019s endpoint to get User data e.g. <cite>http://auth.srv/user/{}/</cite></li>\n<li>property UserSerializer : a DjangoRestFramework Serializer that defines how to parse your <em>Authorization Server</em>\u2019s response</li>\n<li><dl>\n<dt>And optionnally</dt>\n<dd><ul>\n<li>method get_auth_token()</li>\n<li>method refresh_auth_token()</li>\n</ul>\n</dd>\n</dl>\n</li>\n</ul>\n</dd>\n</dl>\n</div>\n</div>\n\n          </div>"}, "last_serial": 4159351, "releases": {"0.1.1": [{"comment_text": "", "digests": {"md5": "14c853d14b293f1b40c2763757b1a813", "sha256": "c0361fa155935f94b286eac526b2b0ddad8ca5a5416a0246209595716150d924"}, "downloads": -1, "filename": "oauth-slave-accounts-0.1.1.tar.gz", "has_sig": false, "md5_digest": "14c853d14b293f1b40c2763757b1a813", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3792, "upload_time": "2018-08-11T09:50:10", "upload_time_iso_8601": "2018-08-11T09:50:10.756927Z", "url": "https://files.pythonhosted.org/packages/e9/c8/dba0f137b8fde29884d0e81381c2b39d4fd0a533d8399b13f8c298b0e4b9/oauth-slave-accounts-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "14c853d14b293f1b40c2763757b1a813", "sha256": "c0361fa155935f94b286eac526b2b0ddad8ca5a5416a0246209595716150d924"}, "downloads": -1, "filename": "oauth-slave-accounts-0.1.1.tar.gz", "has_sig": false, "md5_digest": "14c853d14b293f1b40c2763757b1a813", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3792, "upload_time": "2018-08-11T09:50:10", "upload_time_iso_8601": "2018-08-11T09:50:10.756927Z", "url": "https://files.pythonhosted.org/packages/e9/c8/dba0f137b8fde29884d0e81381c2b39d4fd0a533d8399b13f8c298b0e4b9/oauth-slave-accounts-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:43:52 2020"}