{"info": {"author": "Peter J. A. Cock", "author_email": "p.j.a.cock@googlemail.com", "bugtrack_url": null, "classifiers": ["Framework :: Flake8", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: Software Development :: Quality Assurance"], "description": "flake8-black\n============\n\n.. image:: https://img.shields.io/pypi/v/flake8-black.svg\n   :alt: Released on the Python Package Index (PyPI)\n   :target: https://pypi.python.org/pypi/flake8-black\n.. image:: https://img.shields.io/conda/vn/conda-forge/flake8-black.svg\n   :alt: Released on Conda\n   :target: https://anaconda.org/conda-forge/flake8-black\n.. image:: https://img.shields.io/travis/peterjc/flake8-black/master.svg\n   :alt: Testing with TravisCI\n   :target: https://travis-ci.org/peterjc/flake8-black/branches\n.. image:: https://img.shields.io/pypi/dm/flake8-black.svg\n   :alt: PyPI downloads\n   :target: https://pypistats.org/packages/flake8-black\n.. image:: https://img.shields.io/badge/code%20style-black-000000.svg\n   :alt: Code style: black\n   :target: https://github.com/python/black\n\nIntroduction\n------------\n\nThis is an MIT licensed `flake8 <https://gitlab.com/pycqa/flake8>`_ plugin\nfor validating Python code style with the command line code formatting tool\n`black <https://github.com/python/black>`_. It is available to install from\nthe Python Package Index (PyPI):\n\n- https://pypi.python.org/pypi/flake8-black\n\nBlack, *\"The Uncompromising Code Formatter\"*, is normally run to edit your\nPython code in place to match their coding style, a strict subset of the\n`PEP 8 style guide <https://www.python.org/dev/peps/pep-0008/>`_.\n\nThe point of this plugin is to be able to run ``black --check ...`` from\nwithin the ``flake8`` plugin ecosystem. You might use this via a ``git``\npre-commit hook, or as part of your continuous integration testing.\n\nFlake8 Validation codes\n-----------------------\n\nEarly versions of flake8 assumed a single character prefix for the validation\ncodes, which became problematic with collisions in the plugin ecosystem. Since\nv3.0, flake8 has supported longer prefixes, therefore this plugin uses ``BLK``\nas its prefix.\n\n====== =======================================================================\nCode   Description (*and notes*)\n------ -----------------------------------------------------------------------\nBLK100 Black would make changes.\nBLK9## Internal error (*various, listed below*):\nBLK900 Failed to load file: ...\nBLK901 Invalid input.\nBLK997 Invalid TOML file: ...\nBLK998 Could not access flake8 line length setting (*no longer used*).\nBLK999 Unexpected exception.\n====== =======================================================================\n\nNote that if your Python code has a syntax error, ``black --check ...`` would\nreport this as an error. Likewise ``flake8 ...`` will by default report the\nsyntax error, but importantly it does not seem to then call the plugins, so\nyou will *not* get an additional ``BLK`` error.\n\n\nInstallation\n------------\n\nPython 3.6 or later is required to run ``black``, so that is recommended, but\n``black`` can be used on Python code written for older versions of Python.\n\nYou can install ``flake8-black`` using ``pip``, which should install ``flake8``\nand ``black`` as well if not already present::\n\n    $ pip install flake8-black\n\nAlternatively, if you are using the Anaconda packaging system, the following\ncommand will install the plugin with its dependencies::\n\n    $ conda install -c conda-forge flake8-black\n\nThe new validator should be automatically included when using ``flake8`` which\nmay now report additional validation codes starting with ``BLK`` (as defined\nabove). For example::\n\n    $ flake8 example.py\n\nYou can request only the ``BLK`` codes be shown using::\n\n    $ flake8 --select BLK example.py\n\n\nConfiguration\n-------------\n\nWe assume you are familiar with `flake8 configuration\n<http://flake8.pycqa.org/en/latest/user/configuration.html>`_ and\n`black configuration\n<https://black.readthedocs.io/en/stable/pyproject_toml.html>`_.\n\nWe recommend using the following settings in your ``flake8`` configuration,\nfor example in your ``.flake8``, ``setup.cfg``, or ``tox.ini`` file::\n\n    [flake8]\n    # Recommend matching the black line length (default 88),\n    # rather than using the flake8 default of 79:\n    max-line-length = 88\n    extend-ignore =\n        # See https://github.com/PyCQA/pycodestyle/issues/373\n        E203,\n\nNote currently ``pycodestyle`` gives false positives on the spaces ``black``\nuses for slices, which ``flake8`` reports as ``E203: whitespace before ':'``.\nUntil `pyflakes issue 373 <https://github.com/PyCQA/pycodestyle/issues/373>`_\nis fixed, and ``flake8`` is updated, we suggest disabling this style check.\n\nSeparately ``pyproject.toml`` is used for ``black`` configuration - if this\nfile is found, the plugin will look at the following ``black`` settings:\n\n* ``target_version``\n* ``skip_string_normalization``\n* ``line_length``\n\nYou can specify a particular path for the ``pyproject.toml`` file (e.g.\nglobal development settings) using ``--black-config FILENAME`` at the\ncommand line, or using ``black-config = FILENAME`` in your ``flake8``\nconfiguration file.\n\nIgnoring validation codes\n-------------------------\n\nUsing the flake8 no-quality-assurance pragma comment is not recommended\n(e.g. adding ``# noqa: BLK100`` to the first line black would change).\nInstead use the black pragma comments ``# fmt: off`` at the start, and\n``# fmt: on`` at the end, of any region of your code which should not be\nchanged. Or, exlude the entire file by name (see below).\n\n\nIgnoring files\n--------------\n\nThe plugin does *NOT* currently consider the ``black`` settings ``include``\nand ``exclude``, so if you have certain Python files which you do not use\nwith ``black`` and have told it to ignore, you will *also* need to tell\n``flake8`` to ignore them (e.g. using ``exclude`` or ``per-file-ignores``).\n\n\nVersion History\n---------------\n\n======= ============ ===========================================================\nVersion Release date   Changes\n------- ------------ -----------------------------------------------------------\nv0.1.1  2019-08-26   - Option to use a (global) black configuration file,\n                       contribution from\n                       `Tomasz Grining <https://github.com/098799>`_.\n                     - New ``BLK997`` if can't parse ``pyproject.toml`` file.\n                     - Logs configuration files, use ``-v`` or ``--verbose``.\n                     - Fixed flake8 \"builtins\" parameter warning.\n                     - Now requires black 19.3b0 or later.\nv0.1.0  2019-06-03   - Uses main black settings from ``pyproject.toml``,\n                       contribution from `Alex <https://github.com/ADKosm>`_.\n                     - WARNING: Now ignores flake8 ``max-line-length`` setting.\nv0.0.4  2019-03-15   - Supports black 19.3b0 which changed a function call.\nv0.0.3  2019-02-21   - Bug fix when ``W292 no newline at end of file`` applies,\n                       contribution from\n                       `Sapphire Becker <https://github.com/sapphire-janrain>`_.\nv0.0.2  2019-02-15   - Document syntax error behaviour (no BLK error reported).\nv0.0.1  2019-01-10   - Initial public release.\n                     - Passes flake8 ``max-line-length`` setting to black.\n======= ============ ===========================================================\n\n\nDevelopers\n----------\n\nThis plugin is on GitHub at https://github.com/peterjc/flake8-black\n\nTo make a new release once tested locally and on TravisCI::\n\n    $ git tag vX.Y.Z\n    $ python setup.py sdist --formats=gztar\n    $ twine upload dist/flake8-black-X.Y.Z.tar.gz\n    $ git push origin master --tags\n\nThe PyPI upload should trigger an automated pull request updating the\n`flake8-black conda-forge recipe\n<https://github.com/conda-forge/flake8-black-feedstock/blob/master/recipe/meta.yaml>`_.", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/peterjc/flake8-black", "keywords": "PEP8", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "flake8-black", "package_url": "https://pypi.org/project/flake8-black/", "platform": "", "project_url": "https://pypi.org/project/flake8-black/", "project_urls": {"Homepage": "https://github.com/peterjc/flake8-black"}, "release_url": "https://pypi.org/project/flake8-black/0.1.1/", "requires_dist": null, "requires_python": "", "summary": "flake8 plugin to call black as a code style validator", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://pypi.python.org/pypi/flake8-black\" rel=\"nofollow\"><img alt=\"Released on the Python Package Index (PyPI)\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d2c495e68ba70f325f26744efbc91990a03d1302/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f666c616b65382d626c61636b2e737667\"></a>\n<a href=\"https://anaconda.org/conda-forge/flake8-black\" rel=\"nofollow\"><img alt=\"Released on Conda\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/615c9a88e62a9e1f6d22965efc93a101f6c5187a/68747470733a2f2f696d672e736869656c64732e696f2f636f6e64612f766e2f636f6e64612d666f7267652f666c616b65382d626c61636b2e737667\"></a>\n<a href=\"https://travis-ci.org/peterjc/flake8-black/branches\" rel=\"nofollow\"><img alt=\"Testing with TravisCI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9de391381135fa92b8b87cb00b869f7909d336e9/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f70657465726a632f666c616b65382d626c61636b2f6d61737465722e737667\"></a>\n<a href=\"https://pypistats.org/packages/flake8-black\" rel=\"nofollow\"><img alt=\"PyPI downloads\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/627d75efe326c2d740ff1455e69d8c54276e26b7/68747470733a2f2f696d672e736869656c64732e696f2f707970692f646d2f666c616b65382d626c61636b2e737667\"></a>\n<a href=\"https://github.com/python/black\" rel=\"nofollow\"><img alt=\"Code style: black\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fbfdc7754183ecf079bc71ddeabaf88f6cbc5c00/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64652532307374796c652d626c61636b2d3030303030302e737667\"></a>\n<div id=\"introduction\">\n<h2>Introduction</h2>\n<p>This is an MIT licensed <a href=\"https://gitlab.com/pycqa/flake8\" rel=\"nofollow\">flake8</a> plugin\nfor validating Python code style with the command line code formatting tool\n<a href=\"https://github.com/python/black\" rel=\"nofollow\">black</a>. It is available to install from\nthe Python Package Index (PyPI):</p>\n<ul>\n<li><a href=\"https://pypi.python.org/pypi/flake8-black\" rel=\"nofollow\">https://pypi.python.org/pypi/flake8-black</a></li>\n</ul>\n<p>Black, <em>\u201cThe Uncompromising Code Formatter\u201d</em>, is normally run to edit your\nPython code in place to match their coding style, a strict subset of the\n<a href=\"https://www.python.org/dev/peps/pep-0008/\" rel=\"nofollow\">PEP 8 style guide</a>.</p>\n<p>The point of this plugin is to be able to run <tt>black <span class=\"pre\">--check</span> ...</tt> from\nwithin the <tt>flake8</tt> plugin ecosystem. You might use this via a <tt>git</tt>\npre-commit hook, or as part of your continuous integration testing.</p>\n</div>\n<div id=\"flake8-validation-codes\">\n<h2>Flake8 Validation codes</h2>\n<p>Early versions of flake8 assumed a single character prefix for the validation\ncodes, which became problematic with collisions in the plugin ecosystem. Since\nv3.0, flake8 has supported longer prefixes, therefore this plugin uses <tt>BLK</tt>\nas its prefix.</p>\n<table>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<tbody>\n<tr><td>Code</td>\n<td>Description (<em>and notes</em>)</td>\n</tr>\n<tr><td>BLK100</td>\n<td>Black would make changes.</td>\n</tr>\n<tr><td>BLK9##</td>\n<td>Internal error (<em>various, listed below</em>):</td>\n</tr>\n<tr><td>BLK900</td>\n<td>Failed to load file: \u2026</td>\n</tr>\n<tr><td>BLK901</td>\n<td>Invalid input.</td>\n</tr>\n<tr><td>BLK997</td>\n<td>Invalid TOML file: \u2026</td>\n</tr>\n<tr><td>BLK998</td>\n<td>Could not access flake8 line length setting (<em>no longer used</em>).</td>\n</tr>\n<tr><td>BLK999</td>\n<td>Unexpected exception.</td>\n</tr>\n</tbody>\n</table>\n<p>Note that if your Python code has a syntax error, <tt>black <span class=\"pre\">--check</span> ...</tt> would\nreport this as an error. Likewise <tt>flake8 ...</tt> will by default report the\nsyntax error, but importantly it does not seem to then call the plugins, so\nyou will <em>not</em> get an additional <tt>BLK</tt> error.</p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Python 3.6 or later is required to run <tt>black</tt>, so that is recommended, but\n<tt>black</tt> can be used on Python code written for older versions of Python.</p>\n<p>You can install <tt><span class=\"pre\">flake8-black</span></tt> using <tt>pip</tt>, which should install <tt>flake8</tt>\nand <tt>black</tt> as well if not already present:</p>\n<pre>$ pip install flake8-black\n</pre>\n<p>Alternatively, if you are using the Anaconda packaging system, the following\ncommand will install the plugin with its dependencies:</p>\n<pre>$ conda install -c conda-forge flake8-black\n</pre>\n<p>The new validator should be automatically included when using <tt>flake8</tt> which\nmay now report additional validation codes starting with <tt>BLK</tt> (as defined\nabove). For example:</p>\n<pre>$ flake8 example.py\n</pre>\n<p>You can request only the <tt>BLK</tt> codes be shown using:</p>\n<pre>$ flake8 --select BLK example.py\n</pre>\n</div>\n<div id=\"configuration\">\n<h2>Configuration</h2>\n<p>We assume you are familiar with <a href=\"http://flake8.pycqa.org/en/latest/user/configuration.html\" rel=\"nofollow\">flake8 configuration</a> and\n<a href=\"https://black.readthedocs.io/en/stable/pyproject_toml.html\" rel=\"nofollow\">black configuration</a>.</p>\n<p>We recommend using the following settings in your <tt>flake8</tt> configuration,\nfor example in your <tt>.flake8</tt>, <tt>setup.cfg</tt>, or <tt>tox.ini</tt> file:</p>\n<pre>[flake8]\n# Recommend matching the black line length (default 88),\n# rather than using the flake8 default of 79:\nmax-line-length = 88\nextend-ignore =\n    # See https://github.com/PyCQA/pycodestyle/issues/373\n    E203,\n</pre>\n<p>Note currently <tt>pycodestyle</tt> gives false positives on the spaces <tt>black</tt>\nuses for slices, which <tt>flake8</tt> reports as <tt>E203: whitespace before ':'</tt>.\nUntil <a href=\"https://github.com/PyCQA/pycodestyle/issues/373\" rel=\"nofollow\">pyflakes issue 373</a>\nis fixed, and <tt>flake8</tt> is updated, we suggest disabling this style check.</p>\n<p>Separately <tt>pyproject.toml</tt> is used for <tt>black</tt> configuration - if this\nfile is found, the plugin will look at the following <tt>black</tt> settings:</p>\n<ul>\n<li><tt>target_version</tt></li>\n<li><tt>skip_string_normalization</tt></li>\n<li><tt>line_length</tt></li>\n</ul>\n<p>You can specify a particular path for the <tt>pyproject.toml</tt> file (e.g.\nglobal development settings) using <tt><span class=\"pre\">--black-config</span> FILENAME</tt> at the\ncommand line, or using <tt><span class=\"pre\">black-config</span> = FILENAME</tt> in your <tt>flake8</tt>\nconfiguration file.</p>\n</div>\n<div id=\"ignoring-validation-codes\">\n<h2>Ignoring validation codes</h2>\n<p>Using the flake8 no-quality-assurance pragma comment is not recommended\n(e.g. adding <tt># noqa: BLK100</tt> to the first line black would change).\nInstead use the black pragma comments <tt># fmt: off</tt> at the start, and\n<tt># fmt: on</tt> at the end, of any region of your code which should not be\nchanged. Or, exlude the entire file by name (see below).</p>\n</div>\n<div id=\"ignoring-files\">\n<h2>Ignoring files</h2>\n<p>The plugin does <em>NOT</em> currently consider the <tt>black</tt> settings <tt>include</tt>\nand <tt>exclude</tt>, so if you have certain Python files which you do not use\nwith <tt>black</tt> and have told it to ignore, you will <em>also</em> need to tell\n<tt>flake8</tt> to ignore them (e.g. using <tt>exclude</tt> or <tt><span class=\"pre\">per-file-ignores</span></tt>).</p>\n</div>\n<div id=\"version-history\">\n<h2>Version History</h2>\n<table>\n<colgroup>\n<col>\n<col>\n<col>\n</colgroup>\n<tbody>\n<tr><td>Version</td>\n<td>Release date</td>\n<td>Changes</td>\n</tr>\n<tr><td>v0.1.1</td>\n<td>2019-08-26</td>\n<td><ul>\n<li>Option to use a (global) black configuration file,\ncontribution from\n<a href=\"https://github.com/098799\" rel=\"nofollow\">Tomasz Grining</a>.</li>\n<li>New <tt>BLK997</tt> if can\u2019t parse <tt>pyproject.toml</tt> file.</li>\n<li>Logs configuration files, use <tt><span class=\"pre\">-v</span></tt> or <tt><span class=\"pre\">--verbose</span></tt>.</li>\n<li>Fixed flake8 \u201cbuiltins\u201d parameter warning.</li>\n<li>Now requires black 19.3b0 or later.</li>\n</ul>\n</td>\n</tr>\n<tr><td>v0.1.0</td>\n<td>2019-06-03</td>\n<td><ul>\n<li>Uses main black settings from <tt>pyproject.toml</tt>,\ncontribution from <a href=\"https://github.com/ADKosm\" rel=\"nofollow\">Alex</a>.</li>\n<li>WARNING: Now ignores flake8 <tt><span class=\"pre\">max-line-length</span></tt> setting.</li>\n</ul>\n</td>\n</tr>\n<tr><td>v0.0.4</td>\n<td>2019-03-15</td>\n<td><ul>\n<li>Supports black 19.3b0 which changed a function call.</li>\n</ul>\n</td>\n</tr>\n<tr><td>v0.0.3</td>\n<td>2019-02-21</td>\n<td><ul>\n<li>Bug fix when <tt>W292 no newline at end of file</tt> applies,\ncontribution from\n<a href=\"https://github.com/sapphire-janrain\" rel=\"nofollow\">Sapphire Becker</a>.</li>\n</ul>\n</td>\n</tr>\n<tr><td>v0.0.2</td>\n<td>2019-02-15</td>\n<td><ul>\n<li>Document syntax error behaviour (no BLK error reported).</li>\n</ul>\n</td>\n</tr>\n<tr><td>v0.0.1</td>\n<td>2019-01-10</td>\n<td><ul>\n<li>Initial public release.</li>\n<li>Passes flake8 <tt><span class=\"pre\">max-line-length</span></tt> setting to black.</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div id=\"developers\">\n<h2>Developers</h2>\n<p>This plugin is on GitHub at <a href=\"https://github.com/peterjc/flake8-black\" rel=\"nofollow\">https://github.com/peterjc/flake8-black</a></p>\n<p>To make a new release once tested locally and on TravisCI:</p>\n<pre>$ git tag vX.Y.Z\n$ python setup.py sdist --formats=gztar\n$ twine upload dist/flake8-black-X.Y.Z.tar.gz\n$ git push origin master --tags\n</pre>\n<p>The PyPI upload should trigger an automated pull request updating the\n<a href=\"https://github.com/conda-forge/flake8-black-feedstock/blob/master/recipe/meta.yaml\" rel=\"nofollow\">flake8-black conda-forge recipe</a>.</p>\n</div>\n\n          </div>"}, "last_serial": 5730772, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "e1bb38a296422c938e4528cd145a5290", "sha256": "23d206c02f71255c4f31aabab7cc2a9ed7f8aed32589b147d5497f334dfd65fa"}, "downloads": -1, "filename": "flake8-black-0.0.1.tar.gz", "has_sig": false, "md5_digest": "e1bb38a296422c938e4528cd145a5290", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5623, "upload_time": "2019-01-10T14:51:17", "upload_time_iso_8601": "2019-01-10T14:51:17.425899Z", "url": "https://files.pythonhosted.org/packages/35/a4/e5d92ab2074f1d15f5313b41d94198c8820d98ecc5acda2488894b499324/flake8-black-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "dc6e58aed5df7349de18663ae147e731", "sha256": "c09289370462597e04f0c0ac497016e7af72027f43d1a50006c392aee6e83ef8"}, "downloads": -1, "filename": "flake8-black-0.0.2.tar.gz", "has_sig": false, "md5_digest": "dc6e58aed5df7349de18663ae147e731", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5822, "upload_time": "2019-02-15T11:36:53", "upload_time_iso_8601": "2019-02-15T11:36:53.577788Z", "url": "https://files.pythonhosted.org/packages/51/5e/79e300e60125b907c1c3e7c4e5b983f81a84bad889a7e33a5a17560331b1/flake8-black-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "1ce3ec910952cf821639e89454972e63", "sha256": "be751bdf8111285aa644f10176d4b88a0c2d71a87cb3090d442ff89c625931c1"}, "downloads": -1, "filename": "flake8-black-0.0.3.tar.gz", "has_sig": false, "md5_digest": "1ce3ec910952cf821639e89454972e63", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5899, "upload_time": "2019-02-21T19:19:02", "upload_time_iso_8601": "2019-02-21T19:19:02.644041Z", "url": "https://files.pythonhosted.org/packages/ed/05/f39549d17defbd5cd77164bff75e2f2f2e6ca1456ed44e9877b365461332/flake8-black-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "f28e7a3a45e388390bc98db751c3d709", "sha256": "c5f02ac7ec9c0851ebf79159d298340adc0e9777097a97f2cac4bac09e2cdbeb"}, "downloads": -1, "filename": "flake8-black-0.0.4.tar.gz", "has_sig": false, "md5_digest": "f28e7a3a45e388390bc98db751c3d709", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6014, "upload_time": "2019-03-15T19:44:32", "upload_time_iso_8601": "2019-03-15T19:44:32.680509Z", "url": "https://files.pythonhosted.org/packages/7a/92/73d7267a6d886eb530dbc258bf9fe0f19b1cf2cbd17daedebf49e139653c/flake8-black-0.0.4.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "8403092a2f21f90bfde0c56fb8507d51", "sha256": "6b5fe2a609fa750170da8d5b1ed7c11029bceaff025660be7f19307ec6fa0c35"}, "downloads": -1, "filename": "flake8-black-0.1.0.tar.gz", "has_sig": false, "md5_digest": "8403092a2f21f90bfde0c56fb8507d51", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6933, "upload_time": "2019-06-03T14:38:06", "upload_time_iso_8601": "2019-06-03T14:38:06.831126Z", "url": "https://files.pythonhosted.org/packages/2f/70/668695b45f45257b4370eb324a60a868e6eaef8e99b0ac5d858116365232/flake8-black-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "3ad4ba47a8a74aea4ff8d964c92887ef", "sha256": "56f85aaa5a83f06a3f61e680e3b50f156b5e557ebdcb964d823d86f4c108b0c8"}, "downloads": -1, "filename": "flake8-black-0.1.1.tar.gz", "has_sig": false, "md5_digest": "3ad4ba47a8a74aea4ff8d964c92887ef", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8293, "upload_time": "2019-08-26T13:09:53", "upload_time_iso_8601": "2019-08-26T13:09:53.736556Z", "url": "https://files.pythonhosted.org/packages/b6/a8/78f2eb3062fb052509bf6ba0d9643ea31562d52d6947096f1e0009ba5f46/flake8-black-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "3ad4ba47a8a74aea4ff8d964c92887ef", "sha256": "56f85aaa5a83f06a3f61e680e3b50f156b5e557ebdcb964d823d86f4c108b0c8"}, "downloads": -1, "filename": "flake8-black-0.1.1.tar.gz", "has_sig": false, "md5_digest": "3ad4ba47a8a74aea4ff8d964c92887ef", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8293, "upload_time": "2019-08-26T13:09:53", "upload_time_iso_8601": "2019-08-26T13:09:53.736556Z", "url": "https://files.pythonhosted.org/packages/b6/a8/78f2eb3062fb052509bf6ba0d9643ea31562d52d6947096f1e0009ba5f46/flake8-black-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:41:58 2020"}