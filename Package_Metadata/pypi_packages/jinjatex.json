{"info": {"author": "Alexander Dietm\u00fcller", "author_email": "", "bugtrack_url": null, "classifiers": [], "description": "Jinjatex\n========\n\nA wrapper of `Jinja2 <https://github.com/pallets/jinja>`_ for easy\nrendering of `.tex` files of all sorts.\n\n\nInstallation\n------------\n\n.. code-block:: bash\n\n    pip install jinjatex\n\nUsage\n-----\n\nThe main `Jinjatex` class provides wrappers to compile tex templates\nwith jinja. Tex is not included, so make sure the binaries are available.\n\nTemplate Syntax\n^^^^^^^^^^^^^^^\n\nThe jinja template syntax is changed a little to not interference with latex\ncommands:\n\n.. code-block:: none\n    \n    ((( This is a variable )))\n    ((= This is a comment. =))\n    ((* This is a block *))\n    \n    ((= Example =))\n    ((* for value in somelist *))\n        ((( value )))\n    ((* endfor *))\n\nPython Bindings\n^^^^^^^^^^^^^^^\n\n.. code-block:: python\n\n    from jinjatex import Jinjatex\n\n    from textwrap import dedent\n\n    # Example 1: Compile string templates\n\n    template_string = dedent(r\"\"\"\n        % Example Template\n        \\documentclass{article}\n\n        \\begin{document}\n        Hi ((( name )))!\n\n        The document will be compiled multiple times, until\n        all references etc. are resolved, like this one: \\ref{somelabel}\n\n        \\section{Somesection}\n        \\label{somelabel}\n\n        Some more content.\n\n        \\end{document}\n        \"\"\")\n\n    tex = Jinjatex()\n\n    # Return rendered template only\n    tex.render(template_string)\n    # Compile .tex and return content of .pdf, default engine is pdflatex\n    with open('result.pdf', 'wb') as file:\n        file.write(tex.compile(template_string))\n\n\n    # Example 2: Jinja options and other tex compilers\n    # Assuming a template 'mytemplate.tex' exists in mypackage/tex_templates\n\n    from jinja2 import PackageLoader, StrictUndefined\n\n    tex = Jinjatex(tex_engine='xelatex',\n                   loader=PackageLoader('mypackage', 'tex_templates'),\n                   trim_blocks=True,\n                   undefined=StrictUndefined)\n\n    tex.render_template('mytemplate.tex')\n    with open('result.pdf', 'wb') as file:\n        file.write(tex.compile_template('mytemplate.tex'))", "description_content_type": null, "docs_url": null, "download_url": "https://github.com/NotSpecial/jinjatex/releases/tag/0.2", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/NotSpecial/jinjatex", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "jinjatex", "package_url": "https://pypi.org/project/jinjatex/", "platform": "", "project_url": "https://pypi.org/project/jinjatex/", "project_urls": {"Download": "https://github.com/NotSpecial/jinjatex/releases/tag/0.2", "Homepage": "https://github.com/NotSpecial/jinjatex"}, "release_url": "https://pypi.org/project/jinjatex/0.2/", "requires_dist": null, "requires_python": "", "summary": "A wrapper to easily use Jinja2 for tex-templates.", "version": "0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            Jinjatex<br>========<br><br>A wrapper of `Jinja2 &lt;https://github.com/pallets/jinja&gt;`_ for easy<br>rendering of `.tex` files of all sorts.<br><br><br>Installation<br>------------<br><br>.. code-block:: bash<br><br>    pip install jinjatex<br><br>Usage<br>-----<br><br>The main `Jinjatex` class provides wrappers to compile tex templates<br>with jinja. Tex is not included, so make sure the binaries are available.<br><br>Template Syntax<br>^^^^^^^^^^^^^^^<br><br>The jinja template syntax is changed a little to not interference with latex<br>commands:<br><br>.. code-block:: none<br>    <br>    ((( This is a variable )))<br>    ((= This is a comment. =))<br>    ((* This is a block *))<br>    <br>    ((= Example =))<br>    ((* for value in somelist *))<br>        ((( value )))<br>    ((* endfor *))<br><br>Python Bindings<br>^^^^^^^^^^^^^^^<br><br>.. code-block:: python<br><br>    from jinjatex import Jinjatex<br><br>    from textwrap import dedent<br><br>    # Example 1: Compile string templates<br><br>    template_string = dedent(r\"\"\"<br>        % Example Template<br>        \\documentclass{article}<br><br>        \\begin{document}<br>        Hi ((( name )))!<br><br>        The document will be compiled multiple times, until<br>        all references etc. are resolved, like this one: \\ref{somelabel}<br><br>        \\section{Somesection}<br>        \\label{somelabel}<br><br>        Some more content.<br><br>        \\end{document}<br>        \"\"\")<br><br>    tex = Jinjatex()<br><br>    # Return rendered template only<br>    tex.render(template_string)<br>    # Compile .tex and return content of .pdf, default engine is pdflatex<br>    with open('result.pdf', 'wb') as file:<br>        file.write(tex.compile(template_string))<br><br><br>    # Example 2: Jinja options and other tex compilers<br>    # Assuming a template 'mytemplate.tex' exists in mypackage/tex_templates<br><br>    from jinja2 import PackageLoader, StrictUndefined<br><br>    tex = Jinjatex(tex_engine='xelatex',<br>                   loader=PackageLoader('mypackage', 'tex_templates'),<br>                   trim_blocks=True,<br>                   undefined=StrictUndefined)<br><br>    tex.render_template('mytemplate.tex')<br>    with open('result.pdf', 'wb') as file:<br>        file.write(tex.compile_template('mytemplate.tex'))\n          </div>"}, "last_serial": 3157645, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "7680a3cef1ba9f6f61a0a7cfb3223e8d", "sha256": "e5018fb21610dc3feabc99195e202e41ff05e75bff618b1786d59fce39da5ce7"}, "downloads": -1, "filename": "jinjatex-0.1.tar.gz", "has_sig": false, "md5_digest": "7680a3cef1ba9f6f61a0a7cfb3223e8d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3360, "upload_time": "2017-07-31T21:17:03", "upload_time_iso_8601": "2017-07-31T21:17:03.653762Z", "url": "https://files.pythonhosted.org/packages/98/26/e809225437cfec09e22c88caeb27bd08753f9dc8d93cb05261e116f3a1e6/jinjatex-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "51e67692b197936943218ea84173c344", "sha256": "242723331cdfc8280343aed3d146754feeee487a14f1e4ee853ebf1610cda5b4"}, "downloads": -1, "filename": "jinjatex-0.2.tar.gz", "has_sig": false, "md5_digest": "51e67692b197936943218ea84173c344", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3618, "upload_time": "2017-09-07T22:27:28", "upload_time_iso_8601": "2017-09-07T22:27:28.294851Z", "url": "https://files.pythonhosted.org/packages/79/42/24d0e4b53fc7e2490e2ec7ceac0f77b4ad27dc02f0276e033e00a9020a06/jinjatex-0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "51e67692b197936943218ea84173c344", "sha256": "242723331cdfc8280343aed3d146754feeee487a14f1e4ee853ebf1610cda5b4"}, "downloads": -1, "filename": "jinjatex-0.2.tar.gz", "has_sig": false, "md5_digest": "51e67692b197936943218ea84173c344", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3618, "upload_time": "2017-09-07T22:27:28", "upload_time_iso_8601": "2017-09-07T22:27:28.294851Z", "url": "https://files.pythonhosted.org/packages/79/42/24d0e4b53fc7e2490e2ec7ceac0f77b4ad27dc02f0276e033e00a9020a06/jinjatex-0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:52:36 2020"}