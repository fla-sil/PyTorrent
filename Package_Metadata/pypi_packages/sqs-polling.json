{"info": {"author": "Kenta Onishi", "author_email": "ohke.develop@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "# sqs-polling\n`sqs-polling` is simple AWS SQS daemon. The following is all.\n- Polls SQS at regular intervals.\n- Receives messages and executes your callback.\n- If your callback function returns True, deletes the message.\n\n## Installation\n```\n$ pip install sqs-polling\n```\n\n## Usage\nThe key function is `sqs_polling`, please check its interface.\n\nThe simplest usage is below.\n```python\nfrom sqs_polling import sqs_polling\n\n\ndef your_callback(message, greeting):\n    print(greeting + message[\"name\"])\n    return True\n\n\nyour_queue_url=\"https://sqs.your-region.amazonaws.com/XXXXXXXXXXXX/your-sqs\",\nsqs_polling(queue_url=your_queue_url, callback=your_callback, callback_args={\"greeting\": \"Hello, \"})\n```\n\n### Callback\nYour callback function must return 1 bool value.\nIf True, deletes the processed message.\nIf False, the message is remaining in your SQS and reprocessed after `visibility_timeout` seconds. It is recommended to return False if message processing fails.\n\n## Configuration\n\n### AWS account profile\nIn the example above, explicit AWS account profiles is omitted.\n\nIf explicit authentication is required, you can access SQS by setting additional profiles in `aws_profile_dict` argument.\n\n```python\nyour_aws_profile = {\n    \"region_name\": \"your-region\",\n    \"aws_access_key_id\": \"XXXXXXXXXXXXXXXXXXXX\",\n    \"aws_secret_access_key\": \"YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY\",\n}\n\nsqs_polling(queue_url=your_queue_url, callback=your_callback, aws_profile_dict=your_aws_profile)\n```\n\n### Polling\nThe arguments related to polling settings are as follows.\n\n- `extract_body`: Whether to extract the message body. (default: True)\n  - The `body` here refers to `$.Messages.Body` JSON element of SQS messages.\n- `interval_seconds`: Message reception interval seconds. (default: 1.0)\n- `visibility_timeout`: Message visibility timeout seconds. (default: 300)\n\n### Concurrency\n`sqs-polling` can process messages in parallel using threads or processes. It can be controlled by the following arguments.\n\n- `max_workers`: Max number of concurrent threads or processes. (default: 1)\n- `process_worker`: If this is True, processes is used instead of threads. (default: False) \n\n```python\n# Parallel processing with up to 64 threads.\nsqs_polling(queue_url=your_queue_url, callback=your_callback, max_workers=64)\n\n# Parallel processing with up to 4 processes.\nsqs_polling(queue_url=your_queue_url, callback=your_callback, process_worker=True, max_workers=4)\n```\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ohke/sqs-polling", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "sqs-polling", "package_url": "https://pypi.org/project/sqs-polling/", "platform": "", "project_url": "https://pypi.org/project/sqs-polling/", "project_urls": {"Homepage": "https://github.com/ohke/sqs-polling"}, "release_url": "https://pypi.org/project/sqs-polling/0.1.0/", "requires_dist": ["boto3"], "requires_python": "~=3.5", "summary": "Polls AWS SQS messages and executes your callback.", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>sqs-polling</h1>\n<p><code>sqs-polling</code> is simple AWS SQS daemon. The following is all.</p>\n<ul>\n<li>Polls SQS at regular intervals.</li>\n<li>Receives messages and executes your callback.</li>\n<li>If your callback function returns True, deletes the message.</li>\n</ul>\n<h2>Installation</h2>\n<pre><code>$ pip install sqs-polling\n</code></pre>\n<h2>Usage</h2>\n<p>The key function is <code>sqs_polling</code>, please check its interface.</p>\n<p>The simplest usage is below.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">sqs_polling</span> <span class=\"kn\">import</span> <span class=\"n\">sqs_polling</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">your_callback</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"p\">,</span> <span class=\"n\">greeting</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">greeting</span> <span class=\"o\">+</span> <span class=\"n\">message</span><span class=\"p\">[</span><span class=\"s2\">\"name\"</span><span class=\"p\">])</span>\n    <span class=\"k\">return</span> <span class=\"kc\">True</span>\n\n\n<span class=\"n\">your_queue_url</span><span class=\"o\">=</span><span class=\"s2\">\"https://sqs.your-region.amazonaws.com/XXXXXXXXXXXX/your-sqs\"</span><span class=\"p\">,</span>\n<span class=\"n\">sqs_polling</span><span class=\"p\">(</span><span class=\"n\">queue_url</span><span class=\"o\">=</span><span class=\"n\">your_queue_url</span><span class=\"p\">,</span> <span class=\"n\">callback</span><span class=\"o\">=</span><span class=\"n\">your_callback</span><span class=\"p\">,</span> <span class=\"n\">callback_args</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"greeting\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Hello, \"</span><span class=\"p\">})</span>\n</pre>\n<h3>Callback</h3>\n<p>Your callback function must return 1 bool value.\nIf True, deletes the processed message.\nIf False, the message is remaining in your SQS and reprocessed after <code>visibility_timeout</code> seconds. It is recommended to return False if message processing fails.</p>\n<h2>Configuration</h2>\n<h3>AWS account profile</h3>\n<p>In the example above, explicit AWS account profiles is omitted.</p>\n<p>If explicit authentication is required, you can access SQS by setting additional profiles in <code>aws_profile_dict</code> argument.</p>\n<pre><span class=\"n\">your_aws_profile</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">\"region_name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"your-region\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"aws_access_key_id\"</span><span class=\"p\">:</span> <span class=\"s2\">\"XXXXXXXXXXXXXXXXXXXX\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"aws_secret_access_key\"</span><span class=\"p\">:</span> <span class=\"s2\">\"YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY\"</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">sqs_polling</span><span class=\"p\">(</span><span class=\"n\">queue_url</span><span class=\"o\">=</span><span class=\"n\">your_queue_url</span><span class=\"p\">,</span> <span class=\"n\">callback</span><span class=\"o\">=</span><span class=\"n\">your_callback</span><span class=\"p\">,</span> <span class=\"n\">aws_profile_dict</span><span class=\"o\">=</span><span class=\"n\">your_aws_profile</span><span class=\"p\">)</span>\n</pre>\n<h3>Polling</h3>\n<p>The arguments related to polling settings are as follows.</p>\n<ul>\n<li><code>extract_body</code>: Whether to extract the message body. (default: True)\n<ul>\n<li>The <code>body</code> here refers to <code>$.Messages.Body</code> JSON element of SQS messages.</li>\n</ul>\n</li>\n<li><code>interval_seconds</code>: Message reception interval seconds. (default: 1.0)</li>\n<li><code>visibility_timeout</code>: Message visibility timeout seconds. (default: 300)</li>\n</ul>\n<h3>Concurrency</h3>\n<p><code>sqs-polling</code> can process messages in parallel using threads or processes. It can be controlled by the following arguments.</p>\n<ul>\n<li><code>max_workers</code>: Max number of concurrent threads or processes. (default: 1)</li>\n<li><code>process_worker</code>: If this is True, processes is used instead of threads. (default: False)</li>\n</ul>\n<pre><span class=\"c1\"># Parallel processing with up to 64 threads.</span>\n<span class=\"n\">sqs_polling</span><span class=\"p\">(</span><span class=\"n\">queue_url</span><span class=\"o\">=</span><span class=\"n\">your_queue_url</span><span class=\"p\">,</span> <span class=\"n\">callback</span><span class=\"o\">=</span><span class=\"n\">your_callback</span><span class=\"p\">,</span> <span class=\"n\">max_workers</span><span class=\"o\">=</span><span class=\"mi\">64</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Parallel processing with up to 4 processes.</span>\n<span class=\"n\">sqs_polling</span><span class=\"p\">(</span><span class=\"n\">queue_url</span><span class=\"o\">=</span><span class=\"n\">your_queue_url</span><span class=\"p\">,</span> <span class=\"n\">callback</span><span class=\"o\">=</span><span class=\"n\">your_callback</span><span class=\"p\">,</span> <span class=\"n\">process_worker</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">max_workers</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n</pre>\n\n          </div>"}, "last_serial": 6023339, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "812e8174565e4ae94773bd17946a26fa", "sha256": "9855305d92520aa283abc62d909a8bd45473e18db12b242db4d1686a25628841"}, "downloads": -1, "filename": "sqs_polling-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "812e8174565e4ae94773bd17946a26fa", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": "~=3.5", "size": 5670, "upload_time": "2019-10-24T11:55:12", "upload_time_iso_8601": "2019-10-24T11:55:12.465346Z", "url": "https://files.pythonhosted.org/packages/4c/15/b31ad964a85fb88a0a26d388dae5585eb8c1f12e227f28286b17c03aca1b/sqs_polling-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1ad3ab1cb0e7d01941bd4357e24d8e22", "sha256": "0c3c6f40255fc3d1a94e51b736ffc50f669db72d0e1ec9f5feba1cee2cae2985"}, "downloads": -1, "filename": "sqs-polling-0.1.0.tar.gz", "has_sig": false, "md5_digest": "1ad3ab1cb0e7d01941bd4357e24d8e22", "packagetype": "sdist", "python_version": "source", "requires_python": "~=3.5", "size": 4811, "upload_time": "2019-10-24T11:55:14", "upload_time_iso_8601": "2019-10-24T11:55:14.074659Z", "url": "https://files.pythonhosted.org/packages/78/c1/dcefd372e9df04c69f53ace45f0a7746b01a0b39278d4cfadd8bafa26f72/sqs-polling-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "812e8174565e4ae94773bd17946a26fa", "sha256": "9855305d92520aa283abc62d909a8bd45473e18db12b242db4d1686a25628841"}, "downloads": -1, "filename": "sqs_polling-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "812e8174565e4ae94773bd17946a26fa", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": "~=3.5", "size": 5670, "upload_time": "2019-10-24T11:55:12", "upload_time_iso_8601": "2019-10-24T11:55:12.465346Z", "url": "https://files.pythonhosted.org/packages/4c/15/b31ad964a85fb88a0a26d388dae5585eb8c1f12e227f28286b17c03aca1b/sqs_polling-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1ad3ab1cb0e7d01941bd4357e24d8e22", "sha256": "0c3c6f40255fc3d1a94e51b736ffc50f669db72d0e1ec9f5feba1cee2cae2985"}, "downloads": -1, "filename": "sqs-polling-0.1.0.tar.gz", "has_sig": false, "md5_digest": "1ad3ab1cb0e7d01941bd4357e24d8e22", "packagetype": "sdist", "python_version": "source", "requires_python": "~=3.5", "size": 4811, "upload_time": "2019-10-24T11:55:14", "upload_time_iso_8601": "2019-10-24T11:55:14.074659Z", "url": "https://files.pythonhosted.org/packages/78/c1/dcefd372e9df04c69f53ace45f0a7746b01a0b39278d4cfadd8bafa26f72/sqs-polling-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:03:28 2020"}