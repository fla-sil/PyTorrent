{"info": {"author": "Bernardo J.B. Schmitt", "author_email": "bernardo.jb.schmitt@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.5", "Topic :: Scientific/Engineering", "Topic :: Scientific/Engineering :: Human Machine Interfaces", "Topic :: Scientific/Engineering :: Information Analysis", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "AMFM_decompy\n=============\n\nversion 1.0.9.1\n\nThis python package provides the tools necessary for decomposing the voiced part of a speech signal into its modulated components, aka AM-FM decomposition. This designation is used due the fact that, in this method, the signal is modeled as a sum of amplitude- and frequency-modulated components.\n\nThe goal is to overcome the drawbacks from Fourier-alike techniques, e.g. SFFT, wavelets, etc, which are limited in the time-frequency analysis by the so-called Heisenberg-Gabor inequality.\n\nThe algorithms here implemented are the QHM (Quasi-Harmonic Model), and its upgrades, aQHM (adaptive Quasi-Harmonic Model) and eaQHM (extended adaptive Quasi-Harmonic Model). Their formulation can be found at references [2-4].\n\nSince that the tools mentioned above require a fundamental frequency reference, the package also includes the pitch tracker YAAPT (Yet Another Algorithm for Pitch Tracking) [1], which is extremely robust for both high quality and telephone speech.\n\nThe study of AM-FM decomposition algorithms was the theme from my Master Thesis. The original YAAPT program in MATLAB is provided for free by its authors, while the QHM algorithms I implemented by myself also in MATLAB. I'm porting them now to python because:\n\n* the python language is easier to share, read and understand, making it a  better way to distribute the codes;\n* is more resourceful than MATLAB (has different data structures, scripting  options, etc), which will be useful for me in future studies;\n* the computational performance from its numeric and scientific packages (numpy  and scipy) is equivalent to MATLAB;\n* python is free-to-use, while MATLAB is a proprietary software;\n\nEvaluations and future expansions\n=============\n\nAs for the algorithms computational performance, I optimized the YAAPT code, so my pyhton version runs now about twice as fast as the original MATLAB one. However, the QHM algorithms still run as fast as their counterparts in MATLAB. That's because the main bottleneck of both versions are the matrix dot and least-squares operations. Since numpy and MATLAB are already optimized to perform these tasks using internal Fortran functions, as far as I investigated there's no way to speed them up using Cython, for example. Nevertheless, recently I have read about numba, which could be applied to improve the AMFM_decompy performance substantially. Therefore, I may run some tests using it.\n\nIn [1] the YAAPT is compared with well-known pitch trackers like the YIN and the RAPT, and presents the best results. In fact, so far I've been using it, the algorithm has been proved to be indeed very robust. It must be emphasized that I merely translated the code, so I only have an average knowledge about its theoretical formulation. For deep questions concerning it, I would advise to contact the original authors.\n\nThe QHM-like algorithms present some stability problems concerning small magnitude modulated components, which are already documented at [2,3]. In my python code I implemented a workaround to this problem, but it is still a sub-optimal solution.\n\nActually, I dedicated a chapter in my Master Thesis to a deeper study about this problem and came up with a better solution. Unfortunately, due stupid bureaucratic issues, I don't know if and when my work will be defended and published (to be short, the deadline was expired because me and my advisor needed more time to correct and improve the thesis text. Then we required a prorrogation, but the lecturers board declined it. So, basically, I was expelled from the post-gradute program with a finished and working thesis). Anyway, I'm still trying to figure out do now with my work and as soon as find a solution, I'll add my own contributions to this package.\n\nIMPORTANT - Considerations about version 1.0.7 and later versions\n=============\n\nIn the latest release of the original YAAPT MATLAB source code (YAAPT v4.0) the default values from the following parameters have been altered:\n\n* `frame_length` parameter changed from 25 ms to 35 ms;\n* `nccf_thresh1` parameter changed from 0.25 to 0.3;\n\nMoreover, a new parameter called `frame_lengtht` was added (please pay atention to the extra \"t\" at the end), which name is quite similar to `frame_length`. In order to avoid confusion between them, an alternative (and preferred) alias for `frame_lengtht` called `tda_frame_length` was used in pYAAPT.py. Nevertheless, both inputs (`frame_lengtht` and `tda_frame_length`) are accepted.\n\nDue these modifications, if you were running AMFM_decompy 1.0.6 or earlier versions with their default settings, you may obtain slightly different results from the ones obtained by running AMFM_decompy 1.0.7. and later versions with the new default parameters.\n\nTherefore, if you really need to obtain exactly the same results from previous versions, you must provide the old parameter values to the yaapt function. For example, a 1.0.6 or earlier code like\n\n`pitch = pYAAPT.yaapt(signal)`\n\nshould be rewritten in the 1.0.7 and later versions as\n\n`pitch = pYAAPT.yaapt(signal, **{'frame_length': 25.0, 'nccf_thresh1': 0.25, 'tda_frame_length': 25.0})`\n\nInstallation\n=============\n\nThe pypi page https://pypi.python.org/pypi/AMFM_decompy/1.0.9.1 is recommended for a quick installation. But you can also copy all directories here and then run\n\n```python setup.py install```\n\nin command line. After that, run the test script by typing\n\n`AMFM_test.py`\n\nto check if everything is ok (it can take couple of minutes to calculate the results). This script is a example about how to use the package.\n\nI've tested the installation script and the package itself in Linux and Windows systems (but not in iOS) and everything went fine. So, if a problem comes up, it must be probably something about python not finding the files paths.\n\nHow to use\n=============\n\nCheck the AMFM_decompy pdf documentation included in the docs folder or the online documentation at http://bjbschmitt.github.io/AMFM_decompy. The amfm_decompy folder contains the sample.wav file that is used to ilustrate the package's code examples.\n\nCredits and Publications\n=============\n\nThe original MATLAB YAAPT program was written by Hongbing Hu and Stephen A.Zahorian from the Speech Communication Laboratory of the State University of New York at Binghamton.\n\nIt is available at http://www.ws.binghamton.edu/zahorian as free software. Further information about the program can be found at\n\n   [1] Stephen A. Zahorian, and Hongbing Hu, \"A spectral/temporal method for robust fundamental frequency tracking,\" J. Acosut. Soc. Am. 123(6), June 2008.\n\nThe QHM algorithm and its upgrades are formulated and presented in the following publications:\n\n   [2] Y. Pantazis, , PhD Thesis, University of Creta, 2010.\n\n   [3] Y. Pantazis, O. Rosec and Y. Stylianou, , IEEE Transactions on Audio, Speech and Language Processing, vol. 19, n 2, 2011.\n\n   [4] G. P. Kafentzis, Y. Pantazis, O. Rosec and Y. Stylianou, , in IEEE International Conference on Acoustics, Speech and Signal Processing (ICASSP), 2012.\n\nCopyright and contact\n=============\n\nThe AMFM_decompy is free to use, share and modify under the terms of the MIT license.\n\nQuestions, comments, suggestions, and contributions are welcome. Please contact me at\n\nbernardo.jb.schmitt@gmail.com.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/bjbschmitt/AMFM_decompy/", "keywords": "Python,speech,pitch,QHM,YAAPT,modulated components,AM-FM decomposition", "license": "LICENSE.txt", "maintainer": "", "maintainer_email": "", "name": "AMFM-decompy", "package_url": "https://pypi.org/project/AMFM-decompy/", "platform": "", "project_url": "https://pypi.org/project/AMFM-decompy/", "project_urls": {"Homepage": "https://github.com/bjbschmitt/AMFM_decompy/"}, "release_url": "https://pypi.org/project/AMFM-decompy/1.0.9.1/", "requires_dist": null, "requires_python": "", "summary": "Package containing the tools necessary for decomposing a speech signal into its modulated components, aka AM-FM decomposition.", "version": "1.0.9.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>AMFM_decompy</h1>\n<p>version 1.0.9.1</p>\n<p>This python package provides the tools necessary for decomposing the voiced part of a speech signal into its modulated components, aka AM-FM decomposition. This designation is used due the fact that, in this method, the signal is modeled as a sum of amplitude- and frequency-modulated components.</p>\n<p>The goal is to overcome the drawbacks from Fourier-alike techniques, e.g. SFFT, wavelets, etc, which are limited in the time-frequency analysis by the so-called Heisenberg-Gabor inequality.</p>\n<p>The algorithms here implemented are the QHM (Quasi-Harmonic Model), and its upgrades, aQHM (adaptive Quasi-Harmonic Model) and eaQHM (extended adaptive Quasi-Harmonic Model). Their formulation can be found at references [2-4].</p>\n<p>Since that the tools mentioned above require a fundamental frequency reference, the package also includes the pitch tracker YAAPT (Yet Another Algorithm for Pitch Tracking) [1], which is extremely robust for both high quality and telephone speech.</p>\n<p>The study of AM-FM decomposition algorithms was the theme from my Master Thesis. The original YAAPT program in MATLAB is provided for free by its authors, while the QHM algorithms I implemented by myself also in MATLAB. I'm porting them now to python because:</p>\n<ul>\n<li>the python language is easier to share, read and understand, making it a  better way to distribute the codes;</li>\n<li>is more resourceful than MATLAB (has different data structures, scripting  options, etc), which will be useful for me in future studies;</li>\n<li>the computational performance from its numeric and scientific packages (numpy  and scipy) is equivalent to MATLAB;</li>\n<li>python is free-to-use, while MATLAB is a proprietary software;</li>\n</ul>\n<h1>Evaluations and future expansions</h1>\n<p>As for the algorithms computational performance, I optimized the YAAPT code, so my pyhton version runs now about twice as fast as the original MATLAB one. However, the QHM algorithms still run as fast as their counterparts in MATLAB. That's because the main bottleneck of both versions are the matrix dot and least-squares operations. Since numpy and MATLAB are already optimized to perform these tasks using internal Fortran functions, as far as I investigated there's no way to speed them up using Cython, for example. Nevertheless, recently I have read about numba, which could be applied to improve the AMFM_decompy performance substantially. Therefore, I may run some tests using it.</p>\n<p>In [1] the YAAPT is compared with well-known pitch trackers like the YIN and the RAPT, and presents the best results. In fact, so far I've been using it, the algorithm has been proved to be indeed very robust. It must be emphasized that I merely translated the code, so I only have an average knowledge about its theoretical formulation. For deep questions concerning it, I would advise to contact the original authors.</p>\n<p>The QHM-like algorithms present some stability problems concerning small magnitude modulated components, which are already documented at [2,3]. In my python code I implemented a workaround to this problem, but it is still a sub-optimal solution.</p>\n<p>Actually, I dedicated a chapter in my Master Thesis to a deeper study about this problem and came up with a better solution. Unfortunately, due stupid bureaucratic issues, I don't know if and when my work will be defended and published (to be short, the deadline was expired because me and my advisor needed more time to correct and improve the thesis text. Then we required a prorrogation, but the lecturers board declined it. So, basically, I was expelled from the post-gradute program with a finished and working thesis). Anyway, I'm still trying to figure out do now with my work and as soon as find a solution, I'll add my own contributions to this package.</p>\n<h1>IMPORTANT - Considerations about version 1.0.7 and later versions</h1>\n<p>In the latest release of the original YAAPT MATLAB source code (YAAPT v4.0) the default values from the following parameters have been altered:</p>\n<ul>\n<li><code>frame_length</code> parameter changed from 25 ms to 35 ms;</li>\n<li><code>nccf_thresh1</code> parameter changed from 0.25 to 0.3;</li>\n</ul>\n<p>Moreover, a new parameter called <code>frame_lengtht</code> was added (please pay atention to the extra \"t\" at the end), which name is quite similar to <code>frame_length</code>. In order to avoid confusion between them, an alternative (and preferred) alias for <code>frame_lengtht</code> called <code>tda_frame_length</code> was used in pYAAPT.py. Nevertheless, both inputs (<code>frame_lengtht</code> and <code>tda_frame_length</code>) are accepted.</p>\n<p>Due these modifications, if you were running AMFM_decompy 1.0.6 or earlier versions with their default settings, you may obtain slightly different results from the ones obtained by running AMFM_decompy 1.0.7. and later versions with the new default parameters.</p>\n<p>Therefore, if you really need to obtain exactly the same results from previous versions, you must provide the old parameter values to the yaapt function. For example, a 1.0.6 or earlier code like</p>\n<p><code>pitch = pYAAPT.yaapt(signal)</code></p>\n<p>should be rewritten in the 1.0.7 and later versions as</p>\n<p><code>pitch = pYAAPT.yaapt(signal, **{'frame_length': 25.0, 'nccf_thresh1': 0.25, 'tda_frame_length': 25.0})</code></p>\n<h1>Installation</h1>\n<p>The pypi page <a href=\"https://pypi.python.org/pypi/AMFM_decompy/1.0.9.1\" rel=\"nofollow\">https://pypi.python.org/pypi/AMFM_decompy/1.0.9.1</a> is recommended for a quick installation. But you can also copy all directories here and then run</p>\n<p><code>python setup.py install</code></p>\n<p>in command line. After that, run the test script by typing</p>\n<p><code>AMFM_test.py</code></p>\n<p>to check if everything is ok (it can take couple of minutes to calculate the results). This script is a example about how to use the package.</p>\n<p>I've tested the installation script and the package itself in Linux and Windows systems (but not in iOS) and everything went fine. So, if a problem comes up, it must be probably something about python not finding the files paths.</p>\n<h1>How to use</h1>\n<p>Check the AMFM_decompy pdf documentation included in the docs folder or the online documentation at <a href=\"http://bjbschmitt.github.io/AMFM_decompy\" rel=\"nofollow\">http://bjbschmitt.github.io/AMFM_decompy</a>. The amfm_decompy folder contains the sample.wav file that is used to ilustrate the package's code examples.</p>\n<h1>Credits and Publications</h1>\n<p>The original MATLAB YAAPT program was written by Hongbing Hu and Stephen A.Zahorian from the Speech Communication Laboratory of the State University of New York at Binghamton.</p>\n<p>It is available at <a href=\"http://www.ws.binghamton.edu/zahorian\" rel=\"nofollow\">http://www.ws.binghamton.edu/zahorian</a> as free software. Further information about the program can be found at</p>\n<p>[1] Stephen A. Zahorian, and Hongbing Hu, \"A spectral/temporal method for robust fundamental frequency tracking,\" J. Acosut. Soc. Am. 123(6), June 2008.</p>\n<p>The QHM algorithm and its upgrades are formulated and presented in the following publications:</p>\n<p>[2] Y. Pantazis, , PhD Thesis, University of Creta, 2010.</p>\n<p>[3] Y. Pantazis, O. Rosec and Y. Stylianou, , IEEE Transactions on Audio, Speech and Language Processing, vol. 19, n 2, 2011.</p>\n<p>[4] G. P. Kafentzis, Y. Pantazis, O. Rosec and Y. Stylianou, , in IEEE International Conference on Acoustics, Speech and Signal Processing (ICASSP), 2012.</p>\n<h1>Copyright and contact</h1>\n<p>The AMFM_decompy is free to use, share and modify under the terms of the MIT license.</p>\n<p>Questions, comments, suggestions, and contributions are welcome. Please contact me at</p>\n<p><a href=\"mailto:bernardo.jb.schmitt@gmail.com\">bernardo.jb.schmitt@gmail.com</a>.</p>\n\n          </div>"}, "last_serial": 6789775, "releases": {"1.0.4": [{"comment_text": "", "digests": {"md5": "ba04b9a44e30d7b6ceb39eb42fbfe878", "sha256": "a127c1ef36f94a8a09a0f52b5a51c0933740d36f0fefd10984d3876d9a4a961e"}, "downloads": -1, "filename": "AMFM_decompy-1.0.4_.tar.gz", "has_sig": false, "md5_digest": "ba04b9a44e30d7b6ceb39eb42fbfe878", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1123744, "upload_time": "2016-09-23T19:20:15", "upload_time_iso_8601": "2016-09-23T19:20:15.571702Z", "url": "https://files.pythonhosted.org/packages/bc/78/461bf168f9896ba2ee8b235620aade59f01d253f337a0591496488f21abb/AMFM_decompy-1.0.4_.tar.gz", "yanked": false}], "1.0.5-1": [{"comment_text": "", "digests": {"md5": "a9ad472510f75d03db28a62f8ad8fb30", "sha256": "82362fa8205b65dfa0836b92689e22b54530cb21014398c71c9c8f6e0d549398"}, "downloads": -1, "filename": "AMFM_decompy-1.0.5.1.tar.gz", "has_sig": false, "md5_digest": "a9ad472510f75d03db28a62f8ad8fb30", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 604992, "upload_time": "2016-09-26T20:23:40", "upload_time_iso_8601": "2016-09-26T20:23:40.535339Z", "url": "https://files.pythonhosted.org/packages/21/85/8b2024ebf6d59b0109182acbec50968b5c7c1dda406454ad1590413d5d1d/AMFM_decompy-1.0.5.1.tar.gz", "yanked": false}], "1.0.6": [{"comment_text": "", "digests": {"md5": "3d57ee56df11ef89f5424c619c54359a", "sha256": "311bbe1cf1f2fc49b716a6c984e8a5f541bedaf76d55f62b79ff9ab9dc6407cd"}, "downloads": -1, "filename": "AMFM_decompy-1.0.6.tar.gz", "has_sig": false, "md5_digest": "3d57ee56df11ef89f5424c619c54359a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 605026, "upload_time": "2017-01-23T18:34:10", "upload_time_iso_8601": "2017-01-23T18:34:10.461395Z", "url": "https://files.pythonhosted.org/packages/1d/fa/2020dc91c6428c6c64da57298b72f7ac01137bf789aa7f0a77fd2ab326a3/AMFM_decompy-1.0.6.tar.gz", "yanked": false}], "1.0.6.1": [{"comment_text": "", "digests": {"md5": "e7b460f5ff7c7460bb7a634f4c97e95b", "sha256": "863500d80a7182df766da15c32b78a117418bdbc5be9a5b5fb15c8bc9a36cf61"}, "downloads": -1, "filename": "AMFM_decompy-1.0.6.1.tar.gz", "has_sig": false, "md5_digest": "e7b460f5ff7c7460bb7a634f4c97e95b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 605103, "upload_time": "2017-03-13T17:26:36", "upload_time_iso_8601": "2017-03-13T17:26:36.199839Z", "url": "https://files.pythonhosted.org/packages/da/3b/4badcaa298adaa135e3cda2bbc3aac40cff5386003aea9c9291cc2276c12/AMFM_decompy-1.0.6.1.tar.gz", "yanked": false}], "1.0.7": [{"comment_text": "", "digests": {"md5": "ab9e64360d3ffb08390e8f324754ae21", "sha256": "1ba9942f0421bdf4fcd43e4992d2d48f5044663bf8e8acdb98a16b7e4dbc7dd5"}, "downloads": -1, "filename": "AMFM_decompy-1.0.7.tar.gz", "has_sig": false, "md5_digest": "ab9e64360d3ffb08390e8f324754ae21", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 741881, "upload_time": "2017-07-28T03:04:12", "upload_time_iso_8601": "2017-07-28T03:04:12.286488Z", "url": "https://files.pythonhosted.org/packages/7d/cc/3f434a6e08b362975862453b8b28f70b5d57b0ebebf2054888b44adc6be1/AMFM_decompy-1.0.7.tar.gz", "yanked": false}], "1.0.8": [{"comment_text": "", "digests": {"md5": "95e809796c72842f0ce6190cbcf8c77e", "sha256": "f2584c3ea71e1a415444e8274d66279107e5dbfa38338a4e3db2db47a2f10b62"}, "downloads": -1, "filename": "AMFM_decompy-1.0.8.tar.gz", "has_sig": false, "md5_digest": "95e809796c72842f0ce6190cbcf8c77e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 739753, "upload_time": "2018-06-22T02:31:18", "upload_time_iso_8601": "2018-06-22T02:31:18.968084Z", "url": "https://files.pythonhosted.org/packages/76/e4/0ee668be5460dd7febf540549207bd35f292b4e230f264bc123750839e81/AMFM_decompy-1.0.8.tar.gz", "yanked": false}], "1.0.8.1": [{"comment_text": "", "digests": {"md5": "bde1a6424729e40f48322f11e5552382", "sha256": "eb700fb31250f699d9c13cf03940644dfccef31fa9f798fba1091b0168414d19"}, "downloads": -1, "filename": "AMFM_decompy-1.0.8.1.tar.gz", "has_sig": false, "md5_digest": "bde1a6424729e40f48322f11e5552382", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 739851, "upload_time": "2018-07-09T20:41:21", "upload_time_iso_8601": "2018-07-09T20:41:21.434140Z", "url": "https://files.pythonhosted.org/packages/81/13/d8e107563199974936848db475bf3afed373fa6ad3516d35de580aec87ba/AMFM_decompy-1.0.8.1.tar.gz", "yanked": false}], "1.0.9": [{"comment_text": "", "digests": {"md5": "5d8446f1f53a700b6943008aa8ccb306", "sha256": "75f667520779bcf44304f61071bbeab3ca06b2a8e4a0dbd4bd11891176c51c3b"}, "downloads": -1, "filename": "AMFM_decompy-1.0.9.tar.gz", "has_sig": false, "md5_digest": "5d8446f1f53a700b6943008aa8ccb306", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 743094, "upload_time": "2020-02-21T04:04:55", "upload_time_iso_8601": "2020-02-21T04:04:55.070620Z", "url": "https://files.pythonhosted.org/packages/d3/7e/eec21776bf97d8b75474c2691e1f42d4a661e9230f38b28caa4a570e4585/AMFM_decompy-1.0.9.tar.gz", "yanked": false}], "1.0.9.1": [{"comment_text": "", "digests": {"md5": "7804ae97969ca61cc5297df482884e37", "sha256": "6a96bcc0f16992735b733c62ce864df713799369680c708b6d42b4b9aa18525c"}, "downloads": -1, "filename": "AMFM_decompy-1.0.9.1.tar.gz", "has_sig": false, "md5_digest": "7804ae97969ca61cc5297df482884e37", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 743258, "upload_time": "2020-03-11T05:30:40", "upload_time_iso_8601": "2020-03-11T05:30:40.372584Z", "url": "https://files.pythonhosted.org/packages/d5/c4/4510b56366825ede44e15cd98f9e211fff3172ed7ee2fc79dd9c0f927b37/AMFM_decompy-1.0.9.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "7804ae97969ca61cc5297df482884e37", "sha256": "6a96bcc0f16992735b733c62ce864df713799369680c708b6d42b4b9aa18525c"}, "downloads": -1, "filename": "AMFM_decompy-1.0.9.1.tar.gz", "has_sig": false, "md5_digest": "7804ae97969ca61cc5297df482884e37", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 743258, "upload_time": "2020-03-11T05:30:40", "upload_time_iso_8601": "2020-03-11T05:30:40.372584Z", "url": "https://files.pythonhosted.org/packages/d5/c4/4510b56366825ede44e15cd98f9e211fff3172ed7ee2fc79dd9c0f927b37/AMFM_decompy-1.0.9.1.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:18:22 2020"}