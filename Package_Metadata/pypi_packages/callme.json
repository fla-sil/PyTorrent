{"info": {"author": "Christian Haintz", "author_email": "christian.haintz@orangelabs.at", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: System :: Networking"], "description": "================================================================\nCallme - A python RPC module based on AMQP\n================================================================\n\nIntroduction\n------------\n``Callme`` provides an easy way to do RPC over AMQP (``Callme`` is the\nsuccessor of ``QAM`` <http://packages.python.org/qam>).\n\n**Key Features:**\n\n- Easy to use;\n- Uses AMQP as transport protocol;\n- Support timeouts;\n- SSL support;\n- Supports remote exceptions;\n- OpenSource BSD-licensed;\n- Designed to support broker-side permission system.\n\n\nGetting started with callme\n---------------------------\nA simple RPC Server which provides an add method::\n\n    import callme\n\n    def add(a, b):\n        return a + b\n\n    server = callme.Server(server_id='fooserver',\n                           amqp_host='localhost')\n\n    server.register_function(add, 'add')\n    server.start()\n\nand a client which uses **fooserver** to add **1 + 1** and finally prints the\nresult::\n\n    import callme\n\n    proxy = callme.Proxy(amqp_host='localhost')\n\n    print proxy.use_server('fooserver').add(1, 1)\n\nThere are optional parameters to fit different needs which are explained in depth\nin the Server and Proxy Documentation.\n\nExamples are provided in the *examples* directory in the package.\n\nMultithreading\n--------------\nThe ``Proxy`` is not thread-safe, you must instantiate one Proxy per thread.\n\nThe ``Server`` is also not thread-safe as well. Instantiate one Server per\nthread.\n\nEven if the Server is not thread-safe itself, it has the capability to use\nmulti-threading. For each RPC Call a worker thread is started which\nsignificantly improves the call speed if multiple clients are calling\nthe server simultaneously. To activate multi-threading on the server pass\n``threading=True`` to the Server class.\n\n\nPermissions\n-----------\nIt is possible to control the access to a RPC Server by the Broker. We use\nRabbitMQ as example because this is the broker we used for testing and\ndevelopment. To get the highest security out of the permission system it is\nrecommended using separate vhost only for callme communication (if you\nhave other amqp messages on your system on the same broker).  \n\nFor a more in depth explanation why these permissions look how they are see \n``Exchange Design``.\n\n\nLimit Server Permissions\n++++++++++++++++++++++++\nTo limit one server to only accept RPC Calls to its server_id and send result\nback to clients we use these permissions. Assumption the RPC server has its own\nuser called *carl* on the rabbitmq broker.\n\n``rabbitmqctl set_permissions carl \"server_fooserver_.*\" \"server_fooserver_.*|client_.*_ex_.*\" \"server_fooserver_.*\"``\n\n\nLimit Client (Proxy) Permissions\n++++++++++++++++++++++++++++++++\nTo limit the Proxy to the server with the server_id *fooserver* (no other\nserver can then be reached with this user) we use these permissions. Assumption\nthe RPC proxy has its own user called *olivia* on the rabbitmq broker.\n\n``rabbitmqctl set_permissions olivia \"client_olivia_.*\" \"client_olivia_.*|server_fooserver_ex\" \"client_olivia_.*\"``\n\nTo give the client access to another RPC server with server_id *barserver* we\nset the following permissions:\n\n``rabbitmqctl set_permissions olivia \"client_olivia_.*\" \"client_olivia_.*|server_fooserver_ex|server_barserver_ex\" \"client_olivia_.*\"``\n\nTo give the client access to all RPC servers set the permission as follows:\n\n``rabbitmqctl set_permissions olivia \"client_olivia_.*\" \"client_olivia_.*|server_.*_ex\" \"client_olivia_.*\"``\n\n\nArchitecture\n------------\nCallme uses kombu for communication between Proxy and Server. Callme transfers\ninstances of the ``RpcResponse`` and ``RpcRequest`` to execute remote procedure\ncalls (RPC). The instances of these classes are pickled by kombu and then\ntransferred to the server or proxy.\n\n\nExchange Design\n---------------\nEvery Proxy creates a Exchange and a Queue bound to the Exchange which has\nthe form ``client_<amqp_user>_ex_<uid>`` and ``client_<amqp_user>_queue_<uid>``.\n``<uid>`` is generated on creation of the Proxy. All Queues and Exchanges are\nauto-deleted and non-durable.\n\nClient Exchange and Queue are declared and bound by the client and server\nExchange and Queue are declared and bound by the server.\n\n\nThe Exchange and Queue Design::\n\n\t                                   Time                                   \n\t                                     |                                  \n\t------------------------------       |       ----------------------------                           \n\t|          Proxy             |       v       |          Server          |\n\t|       User: olivia         |               |        User: carl        |\n\t|       ------------         |               |        ----------        |\n\t|                            |               |                          |\n\t|         --- RPC Call--------------------------> server_fooserver_ex   |                                      \n\t|                            |               |        (Exchange)        |\n\t|                            |               |            |             |      \n\t|                            |               |            |             |\n\t|                            |               |            |             |\n\t|                            |               |            v             |\n\t|                            |               |                          |\n\t|                            |               |   server_fooserver_queue |                    \n\t|                            |               |         (Queue)          |                 \n\t|                            |               |            |             |                 \n\t|                            |               |            /             |             \n\t| client_olivia_ex_<uid>  <----- RPC Result --------------              |                                                         \n\t|        (Exchange)          |               |                          |                 \n\t|            |               |               |                          |          \n\t|            |               |               |                          |             \n\t|            v               |               |                          |                  \n\t| client_olivia_queue_<uid>  |               |                          |                 \n\t|         (Queue)            |               |                          |                          \n\t|____________________________|               |__________________________|      \n\n\nLogging\n-------\nAt the moment there are two loggers present with the names *callme.proxy*\nand *callme.server*. Both are mostly used for debugging at the moment.\n\n\nBug Tracker\n-----------\nIf you find any issues please report them on https://github.com/ceelian/callme/issues.\n\n\nGetting callme\n--------------\nYou can get the python package on the `Python Package Index`_.\n\n.. _`Python Package Index`: http://pypi.python.org/pypi/callme\n\nThe git repository is available at `github.com callme`_.\n\n.. _`github.com callme`: https://github.com/ceelian/callme\n\n\nInstallation\n------------\n``callme`` can be installed via the Python Package Index or from source.\n\nUsing ``easy_install`` to install ``callme``::\n\n    $ easy_install callme\n\nUsing ``pip`` to install ``callme``::\n\n    $ pip install callme\n\nIf you have downloaded a source tarball you can install it as follows::\n\n    $ python setup.py build\n    $ python setup.py install\n\n\nSupported by\n------------\nWingware - The Python IDE (http://wingware.com).\n\n\nContributing\n------------\nWe are welcome everyone who wants to contribute to ``callme``.\nDevelopment of callme happens at https://github.com/ceelian/callme.\n\n\nContributors (chronological order)\n----------------------------------\n- mkisto (https://github.com/mkisto)\n- carletes (https://github.com/carletes)\n- skudriashev (https://github.com/skudriashev)\n- venkat-tenmiles (https://github.com/venkat-tenmiles)\n- femtotrader (https://github.com/femtotrader)\n\n\nLicense\n-------\nCallme is released under the BSD License.\nThe full license text is in the root folder of the callme Package.", "description_content_type": null, "docs_url": "https://pythonhosted.org/callme/", "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://packages.python.org/callme", "keywords": "amqp rpc", "license": "BSD", "maintainer": null, "maintainer_email": null, "name": "callme", "package_url": "https://pypi.org/project/callme/", "platform": "any", "project_url": "https://pypi.org/project/callme/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://packages.python.org/callme"}, "release_url": "https://pypi.org/project/callme/0.2.0/", "requires_dist": null, "requires_python": null, "summary": "Python AMQP RPC module", "version": "0.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"introduction\">\n<h2>Introduction</h2>\n<p><tt>Callme</tt> provides an easy way to do RPC over AMQP (<tt>Callme</tt> is the\nsuccessor of <tt>QAM</tt> &lt;<a href=\"http://packages.python.org/qam\" rel=\"nofollow\">http://packages.python.org/qam</a>&gt;).</p>\n<p><strong>Key Features:</strong></p>\n<ul>\n<li>Easy to use;</li>\n<li>Uses AMQP as transport protocol;</li>\n<li>Support timeouts;</li>\n<li>SSL support;</li>\n<li>Supports remote exceptions;</li>\n<li>OpenSource BSD-licensed;</li>\n<li>Designed to support broker-side permission system.</li>\n</ul>\n</div>\n<div id=\"getting-started-with-callme\">\n<h2>Getting started with callme</h2>\n<p>A simple RPC Server which provides an add method:</p>\n<pre>import callme\n\ndef add(a, b):\n    return a + b\n\nserver = callme.Server(server_id='fooserver',\n                       amqp_host='localhost')\n\nserver.register_function(add, 'add')\nserver.start()\n</pre>\n<p>and a client which uses <strong>fooserver</strong> to add <strong>1 + 1</strong> and finally prints the\nresult:</p>\n<pre>import callme\n\nproxy = callme.Proxy(amqp_host='localhost')\n\nprint proxy.use_server('fooserver').add(1, 1)\n</pre>\n<p>There are optional parameters to fit different needs which are explained in depth\nin the Server and Proxy Documentation.</p>\n<p>Examples are provided in the <em>examples</em> directory in the package.</p>\n</div>\n<div id=\"multithreading\">\n<h2>Multithreading</h2>\n<p>The <tt>Proxy</tt> is not thread-safe, you must instantiate one Proxy per thread.</p>\n<p>The <tt>Server</tt> is also not thread-safe as well. Instantiate one Server per\nthread.</p>\n<p>Even if the Server is not thread-safe itself, it has the capability to use\nmulti-threading. For each RPC Call a worker thread is started which\nsignificantly improves the call speed if multiple clients are calling\nthe server simultaneously. To activate multi-threading on the server pass\n<tt>threading=True</tt> to the Server class.</p>\n</div>\n<div id=\"permissions\">\n<h2>Permissions</h2>\n<p>It is possible to control the access to a RPC Server by the Broker. We use\nRabbitMQ as example because this is the broker we used for testing and\ndevelopment. To get the highest security out of the permission system it is\nrecommended using separate vhost only for callme communication (if you\nhave other amqp messages on your system on the same broker).</p>\n<p>For a more in depth explanation why these permissions look how they are see\n<tt>Exchange Design</tt>.</p>\n<div id=\"limit-server-permissions\">\n<h3>Limit Server Permissions</h3>\n<p>To limit one server to only accept RPC Calls to its server_id and send result\nback to clients we use these permissions. Assumption the RPC server has its own\nuser called <em>carl</em> on the rabbitmq broker.</p>\n<p><tt>rabbitmqctl set_permissions carl <span class=\"pre\">\"server_fooserver_.*\"</span> <span class=\"pre\">\"server_fooserver_.*|client_.*_ex_.*\"</span> <span class=\"pre\">\"server_fooserver_.*\"</span></tt></p>\n</div>\n<div id=\"limit-client-proxy-permissions\">\n<h3>Limit Client (Proxy) Permissions</h3>\n<p>To limit the Proxy to the server with the server_id <em>fooserver</em> (no other\nserver can then be reached with this user) we use these permissions. Assumption\nthe RPC proxy has its own user called <em>olivia</em> on the rabbitmq broker.</p>\n<p><tt>rabbitmqctl set_permissions olivia <span class=\"pre\">\"client_olivia_.*\"</span> <span class=\"pre\">\"client_olivia_.*|server_fooserver_ex\"</span> <span class=\"pre\">\"client_olivia_.*\"</span></tt></p>\n<p>To give the client access to another RPC server with server_id <em>barserver</em> we\nset the following permissions:</p>\n<p><tt>rabbitmqctl set_permissions olivia <span class=\"pre\">\"client_olivia_.*\"</span> <span class=\"pre\">\"client_olivia_.*|server_fooserver_ex|server_barserver_ex\"</span> <span class=\"pre\">\"client_olivia_.*\"</span></tt></p>\n<p>To give the client access to all RPC servers set the permission as follows:</p>\n<p><tt>rabbitmqctl set_permissions olivia <span class=\"pre\">\"client_olivia_.*\"</span> <span class=\"pre\">\"client_olivia_.*|server_.*_ex\"</span> <span class=\"pre\">\"client_olivia_.*\"</span></tt></p>\n</div>\n</div>\n<div id=\"architecture\">\n<h2>Architecture</h2>\n<p>Callme uses kombu for communication between Proxy and Server. Callme transfers\ninstances of the <tt>RpcResponse</tt> and <tt>RpcRequest</tt> to execute remote procedure\ncalls (RPC). The instances of these classes are pickled by kombu and then\ntransferred to the server or proxy.</p>\n</div>\n<div id=\"exchange-design\">\n<h2>Exchange Design</h2>\n<p>Every Proxy creates a Exchange and a Queue bound to the Exchange which has\nthe form <tt>client_&lt;amqp_user&gt;_ex_&lt;uid&gt;</tt> and <tt>client_&lt;amqp_user&gt;_queue_&lt;uid&gt;</tt>.\n<tt>&lt;uid&gt;</tt> is generated on creation of the Proxy. All Queues and Exchanges are\nauto-deleted and non-durable.</p>\n<p>Client Exchange and Queue are declared and bound by the client and server\nExchange and Queue are declared and bound by the server.</p>\n<p>The Exchange and Queue Design:</p>\n<pre>                                   Time\n                                     |\n------------------------------       |       ----------------------------\n|          Proxy             |       v       |          Server          |\n|       User: olivia         |               |        User: carl        |\n|       ------------         |               |        ----------        |\n|                            |               |                          |\n|         --- RPC Call--------------------------&gt; server_fooserver_ex   |\n|                            |               |        (Exchange)        |\n|                            |               |            |             |\n|                            |               |            |             |\n|                            |               |            |             |\n|                            |               |            v             |\n|                            |               |                          |\n|                            |               |   server_fooserver_queue |\n|                            |               |         (Queue)          |\n|                            |               |            |             |\n|                            |               |            /             |\n| client_olivia_ex_&lt;uid&gt;  &lt;----- RPC Result --------------              |\n|        (Exchange)          |               |                          |\n|            |               |               |                          |\n|            |               |               |                          |\n|            v               |               |                          |\n| client_olivia_queue_&lt;uid&gt;  |               |                          |\n|         (Queue)            |               |                          |\n|____________________________|               |__________________________|\n</pre>\n</div>\n<div id=\"logging\">\n<h2>Logging</h2>\n<p>At the moment there are two loggers present with the names <em>callme.proxy</em>\nand <em>callme.server</em>. Both are mostly used for debugging at the moment.</p>\n</div>\n<div id=\"bug-tracker\">\n<h2>Bug Tracker</h2>\n<p>If you find any issues please report them on <a href=\"https://github.com/ceelian/callme/issues\" rel=\"nofollow\">https://github.com/ceelian/callme/issues</a>.</p>\n</div>\n<div id=\"getting-callme\">\n<h2>Getting callme</h2>\n<p>You can get the python package on the <a href=\"http://pypi.python.org/pypi/callme\" rel=\"nofollow\">Python Package Index</a>.</p>\n<p>The git repository is available at <a href=\"https://github.com/ceelian/callme\" rel=\"nofollow\">github.com callme</a>.</p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p><tt>callme</tt> can be installed via the Python Package Index or from source.</p>\n<p>Using <tt>easy_install</tt> to install <tt>callme</tt>:</p>\n<pre>$ easy_install callme\n</pre>\n<p>Using <tt>pip</tt> to install <tt>callme</tt>:</p>\n<pre>$ pip install callme\n</pre>\n<p>If you have downloaded a source tarball you can install it as follows:</p>\n<pre>$ python setup.py build\n$ python setup.py install\n</pre>\n</div>\n<div id=\"supported-by\">\n<h2>Supported by</h2>\n<p>Wingware - The Python IDE (<a href=\"http://wingware.com\" rel=\"nofollow\">http://wingware.com</a>).</p>\n</div>\n<div id=\"contributing\">\n<h2>Contributing</h2>\n<p>We are welcome everyone who wants to contribute to <tt>callme</tt>.\nDevelopment of callme happens at <a href=\"https://github.com/ceelian/callme\" rel=\"nofollow\">https://github.com/ceelian/callme</a>.</p>\n</div>\n<div id=\"contributors-chronological-order\">\n<h2>Contributors (chronological order)</h2>\n<ul>\n<li>mkisto (<a href=\"https://github.com/mkisto\" rel=\"nofollow\">https://github.com/mkisto</a>)</li>\n<li>carletes (<a href=\"https://github.com/carletes\" rel=\"nofollow\">https://github.com/carletes</a>)</li>\n<li>skudriashev (<a href=\"https://github.com/skudriashev\" rel=\"nofollow\">https://github.com/skudriashev</a>)</li>\n<li>venkat-tenmiles (<a href=\"https://github.com/venkat-tenmiles\" rel=\"nofollow\">https://github.com/venkat-tenmiles</a>)</li>\n<li>femtotrader (<a href=\"https://github.com/femtotrader\" rel=\"nofollow\">https://github.com/femtotrader</a>)</li>\n</ul>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>Callme is released under the BSD License.\nThe full license text is in the root folder of the callme Package.</p>\n</div>\n\n          </div>"}, "last_serial": 1155587, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "15da3a3cc7f53ee7a0922fef80e6e717", "sha256": "4b00f3d9af28620cbca1cde65d28d043d10a44f905c267e9302b32c2fbb5ae34"}, "downloads": -1, "filename": "callme-0.1.0.tar.gz", "has_sig": false, "md5_digest": "15da3a3cc7f53ee7a0922fef80e6e717", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17686, "upload_time": "2011-08-10T16:17:25", "upload_time_iso_8601": "2011-08-10T16:17:25.597467Z", "url": "https://files.pythonhosted.org/packages/b9/4f/2321531900ce0eeb9c796222b72243f93acd9fd6f4c958dd9996f1e9497d/callme-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "d2bf019f875e676970f1125b8b0a0484", "sha256": "67ce62514b3ec8c0acd5f0a3c0199ce123caa603559282ee419eae5178509163"}, "downloads": -1, "filename": "callme-0.2.0.tar.gz", "has_sig": false, "md5_digest": "d2bf019f875e676970f1125b8b0a0484", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18918, "upload_time": "2014-07-12T11:55:06", "upload_time_iso_8601": "2014-07-12T11:55:06.827609Z", "url": "https://files.pythonhosted.org/packages/a2/65/6748d557444a2ab3bca023c94d4e9be9863940b62aeb51776077ed553f33/callme-0.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d2bf019f875e676970f1125b8b0a0484", "sha256": "67ce62514b3ec8c0acd5f0a3c0199ce123caa603559282ee419eae5178509163"}, "downloads": -1, "filename": "callme-0.2.0.tar.gz", "has_sig": false, "md5_digest": "d2bf019f875e676970f1125b8b0a0484", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18918, "upload_time": "2014-07-12T11:55:06", "upload_time_iso_8601": "2014-07-12T11:55:06.827609Z", "url": "https://files.pythonhosted.org/packages/a2/65/6748d557444a2ab3bca023c94d4e9be9863940b62aeb51776077ed553f33/callme-0.2.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:35:37 2020"}