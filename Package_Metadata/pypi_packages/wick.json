{"info": {"author": "Joshua Skelton", "author_email": "joshua.skelton@gmail.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "# [![wick](https://raw.githubusercontent.com/joshuaskelly/wick/master/.media/logo.svg?sanitize=true)](https://github.com/JoshuaSkelly/wick)\n\n# wick\n\n[![Python 3.6](https://img.shields.io/badge/python-3.6-blue.svg)]() [![PyPI version](https://badge.fury.io/py/wick.svg)](https://pypi.python.org/pypi/wick) [![Build Status](https://travis-ci.org/joshuaskelly/twitch-observer.svg?branch=master)](https://travis-ci.org/joshuaskelly/twitch-observer)\n\nwick is a Python command line tool that automatically generates file I/O source code for working with binary data.\n\n## Why?\nI was working on a project that involved reverse engineering file formats and I found that most data structures tend to be composed of several simpler data structures. I also noticed that the simpler structures were all very boilerplate. So I created this tool to write the simple structures for me, and I can do the more interesting work of composing them into the larger structure.\n\n## Supported Target Languages\n- C#\n- JavaScript\n- Python\n\n## Installation\n\n```shell\n$ pip install wick\n```\n\n## Usage\n\n```shell\n$ wick example.h Python\n```\n\n## What _exactly_ does it do?\n\nLet's walk through a concrete example.\n\nSay we have binary data that is a sequence of records that are represented by a string name and an integer id. First we create a record.h file that contains a C struct representation of this data:\n\n```C\n// record.h\n\n// Simple Record\nstruct Record {\n    // Record name\n    char name[64];\n\n    // Record id.\n    unsigned char id;\n};\n```\n\nThen we run `wick` on the file:\n\n```shell\n$ wick record.h Python\n```\n\nWhich will then create a record.py file whose contents look like:\n\n```python\n# record.py\nimport struct\n\n\nclass Record:\n    \"\"\"Simple Record object\n\n    Attributes:\n        name: Record name\n\n        id: Record id.\n    \"\"\"\n\n    format = '<64sB'\n    size = struct.calcsize(format)\n\n    __slots__ = (\n        'name',\n        'id'\n    )\n\n    def __init__(self,\n                 name,\n                 id):\n        self.name = name.split(b'\\x00')[0].decode('ascii') if type(name) is bytes else name\n        self.id = id\n\n    @classmethod\n    def write(cls, file, record):\n        record_data = struct.pack(cls.format,\n                                  record.name.encode('ascii'),\n                                  record.id)\n\n        file.write(record_data)\n\n    @classmethod\n    def read(cls, file):\n        record_data = file.read(cls.size)\n        record_struct = struct.unpack(cls.format, record_data)\n\n        return Record(*record_struct)\n\n```\n\nThen we can import this code into Python and _do work_.\n\n### Read Data\n```python\nwith open(path, 'rb') as file:\n    rec = Record.read(file)\n```\n\n### Write Data\n```python\nwith open(path, 'wb') as file:\n    rec = Record(b'name', 0)\n    Record.write(file, rec)\n```\n\n### Unpack Lots of Data\n```python\nimport struct\n\n# Assuming the file only contains Record data\nwith open(path, 'rb') as file:\n    recs = [Record(*chunk) for chunk in struct.iter_unpack(Record.format, file.read())]\n```\n\n## Contributing\nHave a bug fix or a new feature you'd like to see in wick? Send it our way! Please make sure you create an issue that addresses your fix/feature so we can discuss the contribution.\n\n1. Fork this repo!\n2. Create your feature branch: `git checkout -b features/add-javascript-code-generator`\n3. Commit your changes: `git commit -m 'Implemented Javascript code generator'`\n4. Push the branch: `git push origin add-javascript-code-generator`\n5. Submit a pull request.\n6. Create an [issue](https://github.com/joshuaskelly/wick/issues/new).\n\n## License\nMIT\n\nSee the [license](./LICENSE) document for the full text.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/JoshuaSkelly/wick", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "wick", "package_url": "https://pypi.org/project/wick/", "platform": "", "project_url": "https://pypi.org/project/wick/", "project_urls": {"Homepage": "https://github.com/JoshuaSkelly/wick"}, "release_url": "https://pypi.org/project/wick/1.1.0/", "requires_dist": null, "requires_python": "", "summary": "", "version": "1.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1><a href=\"https://github.com/JoshuaSkelly/wick\" rel=\"nofollow\"><img alt=\"wick\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7befe9d553b85cba8d0fbb71e2ab8fe01f6d35cd/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f6a6f73687561736b656c6c792f7769636b2f6d61737465722f2e6d656469612f6c6f676f2e7376673f73616e6974697a653d74727565\"></a></h1>\n<h1>wick</h1>\n<p><a href=\"\" rel=\"nofollow\"><img alt=\"Python 3.6\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/01419d339114693587408dd14856677a4789006a/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f707974686f6e2d332e362d626c75652e737667\"></a> <a href=\"https://pypi.python.org/pypi/wick\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9ac4316ad4c5a9dee8082f8b1216f1954458c85e/68747470733a2f2f62616467652e667572792e696f2f70792f7769636b2e737667\"></a> <a href=\"https://travis-ci.org/joshuaskelly/twitch-observer\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b10208c91f0c7b65ae006e277342177edb76ed3d/68747470733a2f2f7472617669732d63692e6f72672f6a6f73687561736b656c6c792f7477697463682d6f627365727665722e7376673f6272616e63683d6d6173746572\"></a></p>\n<p>wick is a Python command line tool that automatically generates file I/O source code for working with binary data.</p>\n<h2>Why?</h2>\n<p>I was working on a project that involved reverse engineering file formats and I found that most data structures tend to be composed of several simpler data structures. I also noticed that the simpler structures were all very boilerplate. So I created this tool to write the simple structures for me, and I can do the more interesting work of composing them into the larger structure.</p>\n<h2>Supported Target Languages</h2>\n<ul>\n<li>C#</li>\n<li>JavaScript</li>\n<li>Python</li>\n</ul>\n<h2>Installation</h2>\n<pre>$ pip install wick\n</pre>\n<h2>Usage</h2>\n<pre>$ wick example.h Python\n</pre>\n<h2>What <em>exactly</em> does it do?</h2>\n<p>Let's walk through a concrete example.</p>\n<p>Say we have binary data that is a sequence of records that are represented by a string name and an integer id. First we create a record.h file that contains a C struct representation of this data:</p>\n<pre><span class=\"c1\">// record.h</span>\n\n<span class=\"c1\">// Simple Record</span>\n<span class=\"k\">struct</span> <span class=\"n\">Record</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// Record name</span>\n    <span class=\"kt\">char</span> <span class=\"n\">name</span><span class=\"p\">[</span><span class=\"mi\">64</span><span class=\"p\">];</span>\n\n    <span class=\"c1\">// Record id.</span>\n    <span class=\"kt\">unsigned</span> <span class=\"kt\">char</span> <span class=\"n\">id</span><span class=\"p\">;</span>\n<span class=\"p\">};</span>\n</pre>\n<p>Then we run <code>wick</code> on the file:</p>\n<pre>$ wick record.h Python\n</pre>\n<p>Which will then create a record.py file whose contents look like:</p>\n<pre><span class=\"c1\"># record.py</span>\n<span class=\"kn\">import</span> <span class=\"nn\">struct</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Record</span><span class=\"p\">:</span>\n    <span class=\"sd\">\"\"\"Simple Record object</span>\n\n<span class=\"sd\">    Attributes:</span>\n<span class=\"sd\">        name: Record name</span>\n\n<span class=\"sd\">        id: Record id.</span>\n<span class=\"sd\">    \"\"\"</span>\n\n    <span class=\"nb\">format</span> <span class=\"o\">=</span> <span class=\"s1\">'&lt;64sB'</span>\n    <span class=\"n\">size</span> <span class=\"o\">=</span> <span class=\"n\">struct</span><span class=\"o\">.</span><span class=\"n\">calcsize</span><span class=\"p\">(</span><span class=\"nb\">format</span><span class=\"p\">)</span>\n\n    <span class=\"vm\">__slots__</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n        <span class=\"s1\">'name'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'id'</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span>\n                 <span class=\"n\">name</span><span class=\"p\">,</span>\n                 <span class=\"nb\">id</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s1\">'</span><span class=\"se\">\\x00</span><span class=\"s1\">'</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">decode</span><span class=\"p\">(</span><span class=\"s1\">'ascii'</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span> <span class=\"ow\">is</span> <span class=\"nb\">bytes</span> <span class=\"k\">else</span> <span class=\"n\">name</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">id</span> <span class=\"o\">=</span> <span class=\"nb\">id</span>\n\n    <span class=\"nd\">@classmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">write</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">file</span><span class=\"p\">,</span> <span class=\"n\">record</span><span class=\"p\">):</span>\n        <span class=\"n\">record_data</span> <span class=\"o\">=</span> <span class=\"n\">struct</span><span class=\"o\">.</span><span class=\"n\">pack</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">,</span>\n                                  <span class=\"n\">record</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"o\">.</span><span class=\"n\">encode</span><span class=\"p\">(</span><span class=\"s1\">'ascii'</span><span class=\"p\">),</span>\n                                  <span class=\"n\">record</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">)</span>\n\n        <span class=\"n\">file</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">record_data</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@classmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">read</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">file</span><span class=\"p\">):</span>\n        <span class=\"n\">record_data</span> <span class=\"o\">=</span> <span class=\"n\">file</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"o\">.</span><span class=\"n\">size</span><span class=\"p\">)</span>\n        <span class=\"n\">record_struct</span> <span class=\"o\">=</span> <span class=\"n\">struct</span><span class=\"o\">.</span><span class=\"n\">unpack</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">,</span> <span class=\"n\">record_data</span><span class=\"p\">)</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">Record</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">record_struct</span><span class=\"p\">)</span>\n</pre>\n<p>Then we can import this code into Python and <em>do work</em>.</p>\n<h3>Read Data</h3>\n<pre><span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"s1\">'rb'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">file</span><span class=\"p\">:</span>\n    <span class=\"n\">rec</span> <span class=\"o\">=</span> <span class=\"n\">Record</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">file</span><span class=\"p\">)</span>\n</pre>\n<h3>Write Data</h3>\n<pre><span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"s1\">'wb'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">file</span><span class=\"p\">:</span>\n    <span class=\"n\">rec</span> <span class=\"o\">=</span> <span class=\"n\">Record</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s1\">'name'</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n    <span class=\"n\">Record</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">file</span><span class=\"p\">,</span> <span class=\"n\">rec</span><span class=\"p\">)</span>\n</pre>\n<h3>Unpack Lots of Data</h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">struct</span>\n\n<span class=\"c1\"># Assuming the file only contains Record data</span>\n<span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"s1\">'rb'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">file</span><span class=\"p\">:</span>\n    <span class=\"n\">recs</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">Record</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">chunk</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">chunk</span> <span class=\"ow\">in</span> <span class=\"n\">struct</span><span class=\"o\">.</span><span class=\"n\">iter_unpack</span><span class=\"p\">(</span><span class=\"n\">Record</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">,</span> <span class=\"n\">file</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">())]</span>\n</pre>\n<h2>Contributing</h2>\n<p>Have a bug fix or a new feature you'd like to see in wick? Send it our way! Please make sure you create an issue that addresses your fix/feature so we can discuss the contribution.</p>\n<ol>\n<li>Fork this repo!</li>\n<li>Create your feature branch: <code>git checkout -b features/add-javascript-code-generator</code></li>\n<li>Commit your changes: <code>git commit -m 'Implemented Javascript code generator'</code></li>\n<li>Push the branch: <code>git push origin add-javascript-code-generator</code></li>\n<li>Submit a pull request.</li>\n<li>Create an <a href=\"https://github.com/joshuaskelly/wick/issues/new\" rel=\"nofollow\">issue</a>.</li>\n</ol>\n<h2>License</h2>\n<p>MIT</p>\n<p>See the <a href=\"./LICENSE\" rel=\"nofollow\">license</a> document for the full text.</p>\n\n          </div>"}, "last_serial": 4207569, "releases": {"0.6.1": [{"comment_text": "", "digests": {"md5": "71bf2ff62e6d80327bdd43e5ade04a60", "sha256": "8b88a8b84595586296c4b9c3b84044050bb0548273451509ac0148890a7284ab"}, "downloads": -1, "filename": "wick-0.6.1.tar.gz", "has_sig": false, "md5_digest": "71bf2ff62e6d80327bdd43e5ade04a60", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15218, "upload_time": "2018-08-21T19:49:56", "upload_time_iso_8601": "2018-08-21T19:49:56.001062Z", "url": "https://files.pythonhosted.org/packages/ba/6e/f4d3d25e3491a4df03b6cef9ee66036bf76ab21443ab0e7f9d2f227d9859/wick-0.6.1.tar.gz", "yanked": false}], "0.6.2": [{"comment_text": "", "digests": {"md5": "e9945c2ac260a7bdff38e14b6c1ea92d", "sha256": "23020630a21858639916c4aa3777813541a3c80a23b35761657b617f5f3e1d8d"}, "downloads": -1, "filename": "wick-0.6.2.tar.gz", "has_sig": false, "md5_digest": "e9945c2ac260a7bdff38e14b6c1ea92d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15281, "upload_time": "2018-08-21T19:56:57", "upload_time_iso_8601": "2018-08-21T19:56:57.913307Z", "url": "https://files.pythonhosted.org/packages/db/66/f20baf241c6388d762922bb465415d84a85fd58fdcc0277b8180f57ab58e/wick-0.6.2.tar.gz", "yanked": false}], "0.6.3": [{"comment_text": "", "digests": {"md5": "b8f24313db536d5d7274a54d09ccb5a6", "sha256": "41ab32e6ffb62ede7dbea25a6d62298bcfa95cb260f221553dbb3ae42421f92b"}, "downloads": -1, "filename": "wick-0.6.3.tar.gz", "has_sig": false, "md5_digest": "b8f24313db536d5d7274a54d09ccb5a6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15278, "upload_time": "2018-08-21T20:06:05", "upload_time_iso_8601": "2018-08-21T20:06:05.709299Z", "url": "https://files.pythonhosted.org/packages/1c/c7/9c3f9e47ddea4d6eb9aaf6d6e5769fbe3bf05c6210c47e3379a1624474d1/wick-0.6.3.tar.gz", "yanked": false}], "0.6.4": [{"comment_text": "", "digests": {"md5": "8339b5b22a1217f93e502a95384b1c51", "sha256": "10920826add4815c4de4e9f66edd3c276cf59f99d12cace7932b64ef914f1957"}, "downloads": -1, "filename": "wick-0.6.4.tar.gz", "has_sig": false, "md5_digest": "8339b5b22a1217f93e502a95384b1c51", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15344, "upload_time": "2018-08-21T20:29:20", "upload_time_iso_8601": "2018-08-21T20:29:20.632860Z", "url": "https://files.pythonhosted.org/packages/2a/c4/0e979d71d41f3f89904f037f016a4bd436f8585817f7cdca6a2010285de0/wick-0.6.4.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "ad37816df8f54c0cd3e17649ee91d1e2", "sha256": "fe4773baee9535b9480122b2f3f1055764be2578086c84c85c9f7a611553796a"}, "downloads": -1, "filename": "wick-1.0.0.tar.gz", "has_sig": false, "md5_digest": "ad37816df8f54c0cd3e17649ee91d1e2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17854, "upload_time": "2018-08-23T21:08:19", "upload_time_iso_8601": "2018-08-23T21:08:19.945857Z", "url": "https://files.pythonhosted.org/packages/7c/db/11fddda79cc7042b20d7be30106ba48d1f122f9fa39c87bb2cf059024e83/wick-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "aca35311625b30cb272565ddc79b92c8", "sha256": "983f8f0afd1beaae8a9e71d38614e9b7d164a4ea8c27ba1910eaa8521502f912"}, "downloads": -1, "filename": "wick-1.0.1.tar.gz", "has_sig": false, "md5_digest": "aca35311625b30cb272565ddc79b92c8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18279, "upload_time": "2018-08-24T03:29:55", "upload_time_iso_8601": "2018-08-24T03:29:55.969594Z", "url": "https://files.pythonhosted.org/packages/68/d0/2c138b689724be4d8dbf346230543a26feaca5e0a556edf2e98d46bbc649/wick-1.0.1.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "be4af7d9e7541703c0372dbece4e2e52", "sha256": "17e1616947a0b4c68311d85909ed2b62f24bd6ec6367a985df34fa9db94ce0f9"}, "downloads": -1, "filename": "wick-1.1.0.tar.gz", "has_sig": false, "md5_digest": "be4af7d9e7541703c0372dbece4e2e52", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19551, "upload_time": "2018-08-26T03:48:30", "upload_time_iso_8601": "2018-08-26T03:48:30.727686Z", "url": "https://files.pythonhosted.org/packages/ef/99/53bc63b4300e61f28115b4db7b53558436ec629c8aba8ee8d45966d7a4f2/wick-1.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "be4af7d9e7541703c0372dbece4e2e52", "sha256": "17e1616947a0b4c68311d85909ed2b62f24bd6ec6367a985df34fa9db94ce0f9"}, "downloads": -1, "filename": "wick-1.1.0.tar.gz", "has_sig": false, "md5_digest": "be4af7d9e7541703c0372dbece4e2e52", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19551, "upload_time": "2018-08-26T03:48:30", "upload_time_iso_8601": "2018-08-26T03:48:30.727686Z", "url": "https://files.pythonhosted.org/packages/ef/99/53bc63b4300e61f28115b4db7b53558436ec629c8aba8ee8d45966d7a4f2/wick-1.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:29:29 2020"}