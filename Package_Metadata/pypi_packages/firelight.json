{"info": {"author": "Roman Remme", "author_email": "roman.remme@iwr.uni-heidelberg.de", "bugtrack_url": null, "classifiers": ["Intended Audience :: Science/Research", "License :: OSI Approved :: Apache Software License", "Programming Language :: Python :: 3"], "description": "# Firelight\n\n[![Documentation Status](https://readthedocs.org/projects/firelight/badge/?version=latest)](https://firelight.readthedocs.io/en/latest/?badge=latest)\n[![Conda Version](https://img.shields.io/conda/vn/conda-forge/firelight.svg)](https://anaconda.org/conda-forge/firelight)\n[![PyPI version](https://badge.fury.io/py/firelight.svg)](https://badge.fury.io/py/firelight)\n\nFirelight is a visualization library for pytorch. \nIts core object is a **visualizer**, which can be called passing some states (such as `inputs`, `target`, \n`prediction`) returning a visualization of the data. What exactly that visualization shows, is specified in a yaml\nconfiguration file.\n\nWhy you will like firelight initially:\n- Neat image grids, lining up inputs, targets and predictions,\n- Colorful images: Automatic scaling for RGB, matplotlib colormaps for grayscale data, randomly colored label images,\n- Many available visualizers.\n\nWhy you will keep using firelight:\n- Everything in one config file,\n- Easily write your own visualizers,\n- Generality in dimensions: All visualizers usable with data of arbitrary dimension.\n\n## Installation\n\n### From source (to get the most recent version)\nOn python 3.6+:\n\n```bash\n# Clone the repository\ngit clone https://github.com/inferno-pytorch/firelight\ncd firelight/\n# Install\npython setup.py install\n```\n### Using conda\n\nFirelight is available on conda-forge for python > 3.6 and all operating systems:\n```bash\nconda install -c pytorch -c conda-forge firelight\n```\n\n### Using pip\n\nIn an environment with [scikit-learn](https://scikit-learn.org/stable/install.html) installed:\n```bash\npip install firelight\n```\n\n## Example\n\n- Run the example `firelight/examples/example_data.py`\n\nConfig file `example_config_0.yml`:\n\n```yaml\nRowVisualizer: # stack the outputs of child visualizers as rows of an image grid\n  input_mapping:\n    global: [B: ':3', D: '0:9:3'] # Show only 3 samples in each batch ('B'), and some slices along depth ('D').\n    prediction: [C: '0']  # Show only the first channel of the prediction\n\n  pad_value: [0.2, 0.6, 1.0] # RGB color of separating lines\n  pad_width: {B: 6, H: 0, W: 0, rest: 3} # Padding for batch ('B'), height ('H'), width ('W') and other dimensions.\n\n  visualizers:\n    # First row: Ground truth\n    - IdentityVisualizer:\n        input: 'target' # show the target\n\n    # Second row: Raw input\n    - IdentityVisualizer:\n        input: ['input', C: '0'] # Show the first channel ('C') of the input.\n        cmap: viridis  # Name of a matplotlib colormap.\n\n    # Third row: Prediction with segmentation boarders on top.\n    - OverlayVisualizer:\n        visualizers:\n          - CrackedEdgeVisualizer: # Show borders of target segmentation\n              input: 'target'\n              width: 2\n              opacity: 0.7 # Make output only partially opaque.\n          - IdentityVisualizer: # prediction\n              input: 'prediction'\n              cmap: Spectral\n\n    # Fourth row: Foreground probability, calculated by sigmoid on prediction\n    - IdentityVisualizer:\n        input_mapping: # the input to the visualizer can also be specified as a dict under the key 'input mapping'.\n          tensor: ['prediction', pre: 'sigmoid'] # Apply sigmoid function from torch.nn.functional before visualize.\n        value_range: [0, 1] # Scale such that 0 is white and 1 is black. If not specified, whole range is used.\n\n    # Fifth row: Visualize where norm of prediction is smaller than 2\n    - ThresholdVisualizer:\n        input_mapping:\n          tensor:\n            NormVisualizer: # Use the output of NormVisualizer as the input to ThresholdVisualizer\n              input: 'prediction'\n              colorize: False\n        threshold: 2\n        mode: 'smaller'\n```\n\nPython code:\n\n```python\nfrom firelight import get_visualizer\nimport matplotlib.pyplot as plt\n\n# Load the visualizer, passing the path to the config file. This happens only once, at the start of training.\nvisualizer = get_visualizer('./configs/example_config_0.yml')\n\n# Get an example state dictionary, containing the input, target, prediction\nstates = get_example_states()\n\n# Call the visualizer\nimage_grid = visualizer(**states)\n\n# Log your image however you want\nplt.imsave('visualizations/example_visualization.jpg', image_grid.numpy())\n```\n\nResulting visualization: \n\n![Example Image Grid](https://raw.githubusercontent.com/inferno-pytorch/firelight/master/examples/example_visualization.png)\n\nMany more visualizers are available. Have a look at [visualizers.py](/firelight/visualizers/visualizers.py ) and [container_visualizers.py](/firelight/visualizers/container_visualizers.py) or, for a more condensed list, the imports in [config_parsing.py](/firelight/config_parsing.py).\n\n### With Inferno\nFirelight can be easily combined with a `TensorboardLogger` from [inferno](https://github.com/inferno-pytorch/inferno).\nSimply add an extra line at the start of your config specifying under which tag the visualizations should be logged, and\nadd a callback to your trainer with `get_visualization_callback` in `firelight/inferno_callback.py`\n\nConfig:\n```yaml\nfancy_visualization: # This will be the tag in tensorboard\n    RowVisualizer:\n      ...\n```\nPython:\n```python\nfrom inferno.trainers.basic import Trainer\nfrom inferno.trainers.callbacks.logging.tensorboard import TensorboardLogger\nfrom firelight.inferno_callback import get_visualization_callback\n\n# Build trainer and logger\ntrainer = Trainer(...)\nlogger = TensorboardLogger(...)\ntrainer.build_logger(logger, log_directory='path/to/logdir')\n\n# Register the visualization callback\ntrainer.register_callback(\n        get_visualization_callback(\n            config='path/to/visualization/config'\n        )\n    )\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/inferno-pytorch/firelight", "keywords": "", "license": "Apache Software License 2.0", "maintainer": "", "maintainer_email": "", "name": "firelight", "package_url": "https://pypi.org/project/firelight/", "platform": "", "project_url": "https://pypi.org/project/firelight/", "project_urls": {"Homepage": "https://github.com/inferno-pytorch/firelight"}, "release_url": "https://pypi.org/project/firelight/0.2.1/", "requires_dist": ["pyyaml (>=3.12)", "matplotlib", "numpy", "scikit-learn", "scikit-image", "torch"], "requires_python": "", "summary": "A visualization library for PyTorch tensors.", "version": "0.2.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Firelight</h1>\n<p><a href=\"https://firelight.readthedocs.io/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f1bcde5c0ae723e3b5041deed6bb589c6c17c0b2/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f666972656c696768742f62616467652f3f76657273696f6e3d6c6174657374\"></a>\n<a href=\"https://anaconda.org/conda-forge/firelight\" rel=\"nofollow\"><img alt=\"Conda Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/af8708287a05c707f6142aaae5be2ec8be4a6425/68747470733a2f2f696d672e736869656c64732e696f2f636f6e64612f766e2f636f6e64612d666f7267652f666972656c696768742e737667\"></a>\n<a href=\"https://badge.fury.io/py/firelight\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2af07c077b2562c6cbeacb515b777f8d9d029551/68747470733a2f2f62616467652e667572792e696f2f70792f666972656c696768742e737667\"></a></p>\n<p>Firelight is a visualization library for pytorch.\nIts core object is a <strong>visualizer</strong>, which can be called passing some states (such as <code>inputs</code>, <code>target</code>,\n<code>prediction</code>) returning a visualization of the data. What exactly that visualization shows, is specified in a yaml\nconfiguration file.</p>\n<p>Why you will like firelight initially:</p>\n<ul>\n<li>Neat image grids, lining up inputs, targets and predictions,</li>\n<li>Colorful images: Automatic scaling for RGB, matplotlib colormaps for grayscale data, randomly colored label images,</li>\n<li>Many available visualizers.</li>\n</ul>\n<p>Why you will keep using firelight:</p>\n<ul>\n<li>Everything in one config file,</li>\n<li>Easily write your own visualizers,</li>\n<li>Generality in dimensions: All visualizers usable with data of arbitrary dimension.</li>\n</ul>\n<h2>Installation</h2>\n<h3>From source (to get the most recent version)</h3>\n<p>On python 3.6+:</p>\n<pre><span class=\"c1\"># Clone the repository</span>\ngit clone https://github.com/inferno-pytorch/firelight\n<span class=\"nb\">cd</span> firelight/\n<span class=\"c1\"># Install</span>\npython setup.py install\n</pre>\n<h3>Using conda</h3>\n<p>Firelight is available on conda-forge for python &gt; 3.6 and all operating systems:</p>\n<pre>conda install -c pytorch -c conda-forge firelight\n</pre>\n<h3>Using pip</h3>\n<p>In an environment with <a href=\"https://scikit-learn.org/stable/install.html\" rel=\"nofollow\">scikit-learn</a> installed:</p>\n<pre>pip install firelight\n</pre>\n<h2>Example</h2>\n<ul>\n<li>Run the example <code>firelight/examples/example_data.py</code></li>\n</ul>\n<p>Config file <code>example_config_0.yml</code>:</p>\n<pre><span class=\"nt\">RowVisualizer</span><span class=\"p\">:</span> <span class=\"c1\"># stack the outputs of child visualizers as rows of an image grid</span>\n  <span class=\"nt\">input_mapping</span><span class=\"p\">:</span>\n    <span class=\"nt\">global</span><span class=\"p\">:</span> <span class=\"p p-Indicator\">[</span><span class=\"nv\">B</span><span class=\"p p-Indicator\">:</span> <span class=\"s\">':3'</span><span class=\"p p-Indicator\">,</span> <span class=\"nv\">D</span><span class=\"p p-Indicator\">:</span> <span class=\"s\">'0:9:3'</span><span class=\"p p-Indicator\">]</span> <span class=\"c1\"># Show only 3 samples in each batch ('B'), and some slices along depth ('D').</span>\n    <span class=\"nt\">prediction</span><span class=\"p\">:</span> <span class=\"p p-Indicator\">[</span><span class=\"nv\">C</span><span class=\"p p-Indicator\">:</span> <span class=\"s\">'0'</span><span class=\"p p-Indicator\">]</span>  <span class=\"c1\"># Show only the first channel of the prediction</span>\n\n  <span class=\"nt\">pad_value</span><span class=\"p\">:</span> <span class=\"p p-Indicator\">[</span><span class=\"nv\">0.2</span><span class=\"p p-Indicator\">,</span> <span class=\"nv\">0.6</span><span class=\"p p-Indicator\">,</span> <span class=\"nv\">1.0</span><span class=\"p p-Indicator\">]</span> <span class=\"c1\"># RGB color of separating lines</span>\n  <span class=\"nt\">pad_width</span><span class=\"p\">:</span> <span class=\"p p-Indicator\">{</span><span class=\"nt\">B</span><span class=\"p\">:</span> <span class=\"nv\">6</span><span class=\"p p-Indicator\">,</span><span class=\"nt\"> H</span><span class=\"p\">:</span> <span class=\"nv\">0</span><span class=\"p p-Indicator\">,</span><span class=\"nt\"> W</span><span class=\"p\">:</span> <span class=\"nv\">0</span><span class=\"p p-Indicator\">,</span><span class=\"nt\"> rest</span><span class=\"p\">:</span> <span class=\"nv\">3</span><span class=\"p p-Indicator\">}</span> <span class=\"c1\"># Padding for batch ('B'), height ('H'), width ('W') and other dimensions.</span>\n\n  <span class=\"nt\">visualizers</span><span class=\"p\">:</span>\n    <span class=\"c1\"># First row: Ground truth</span>\n    <span class=\"p p-Indicator\">-</span> <span class=\"nt\">IdentityVisualizer</span><span class=\"p\">:</span>\n        <span class=\"nt\">input</span><span class=\"p\">:</span> <span class=\"s\">'target'</span> <span class=\"c1\"># show the target</span>\n\n    <span class=\"c1\"># Second row: Raw input</span>\n    <span class=\"p p-Indicator\">-</span> <span class=\"nt\">IdentityVisualizer</span><span class=\"p\">:</span>\n        <span class=\"nt\">input</span><span class=\"p\">:</span> <span class=\"p p-Indicator\">[</span><span class=\"s\">'input'</span><span class=\"p p-Indicator\">,</span> <span class=\"nv\">C</span><span class=\"p p-Indicator\">:</span> <span class=\"s\">'0'</span><span class=\"p p-Indicator\">]</span> <span class=\"c1\"># Show the first channel ('C') of the input.</span>\n        <span class=\"nt\">cmap</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">viridis</span>  <span class=\"c1\"># Name of a matplotlib colormap.</span>\n\n    <span class=\"c1\"># Third row: Prediction with segmentation boarders on top.</span>\n    <span class=\"p p-Indicator\">-</span> <span class=\"nt\">OverlayVisualizer</span><span class=\"p\">:</span>\n        <span class=\"nt\">visualizers</span><span class=\"p\">:</span>\n          <span class=\"p p-Indicator\">-</span> <span class=\"nt\">CrackedEdgeVisualizer</span><span class=\"p\">:</span> <span class=\"c1\"># Show borders of target segmentation</span>\n              <span class=\"nt\">input</span><span class=\"p\">:</span> <span class=\"s\">'target'</span>\n              <span class=\"nt\">width</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">2</span>\n              <span class=\"nt\">opacity</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">0.7</span> <span class=\"c1\"># Make output only partially opaque.</span>\n          <span class=\"p p-Indicator\">-</span> <span class=\"nt\">IdentityVisualizer</span><span class=\"p\">:</span> <span class=\"c1\"># prediction</span>\n              <span class=\"nt\">input</span><span class=\"p\">:</span> <span class=\"s\">'prediction'</span>\n              <span class=\"nt\">cmap</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">Spectral</span>\n\n    <span class=\"c1\"># Fourth row: Foreground probability, calculated by sigmoid on prediction</span>\n    <span class=\"p p-Indicator\">-</span> <span class=\"nt\">IdentityVisualizer</span><span class=\"p\">:</span>\n        <span class=\"nt\">input_mapping</span><span class=\"p\">:</span> <span class=\"c1\"># the input to the visualizer can also be specified as a dict under the key 'input mapping'.</span>\n          <span class=\"nt\">tensor</span><span class=\"p\">:</span> <span class=\"p p-Indicator\">[</span><span class=\"s\">'prediction'</span><span class=\"p p-Indicator\">,</span> <span class=\"nv\">pre</span><span class=\"p p-Indicator\">:</span> <span class=\"s\">'sigmoid'</span><span class=\"p p-Indicator\">]</span> <span class=\"c1\"># Apply sigmoid function from torch.nn.functional before visualize.</span>\n        <span class=\"nt\">value_range</span><span class=\"p\">:</span> <span class=\"p p-Indicator\">[</span><span class=\"nv\">0</span><span class=\"p p-Indicator\">,</span> <span class=\"nv\">1</span><span class=\"p p-Indicator\">]</span> <span class=\"c1\"># Scale such that 0 is white and 1 is black. If not specified, whole range is used.</span>\n\n    <span class=\"c1\"># Fifth row: Visualize where norm of prediction is smaller than 2</span>\n    <span class=\"p p-Indicator\">-</span> <span class=\"nt\">ThresholdVisualizer</span><span class=\"p\">:</span>\n        <span class=\"nt\">input_mapping</span><span class=\"p\">:</span>\n          <span class=\"nt\">tensor</span><span class=\"p\">:</span>\n            <span class=\"nt\">NormVisualizer</span><span class=\"p\">:</span> <span class=\"c1\"># Use the output of NormVisualizer as the input to ThresholdVisualizer</span>\n              <span class=\"nt\">input</span><span class=\"p\">:</span> <span class=\"s\">'prediction'</span>\n              <span class=\"nt\">colorize</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">False</span>\n        <span class=\"nt\">threshold</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">2</span>\n        <span class=\"nt\">mode</span><span class=\"p\">:</span> <span class=\"s\">'smaller'</span>\n</pre>\n<p>Python code:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">firelight</span> <span class=\"kn\">import</span> <span class=\"n\">get_visualizer</span>\n<span class=\"kn\">import</span> <span class=\"nn\">matplotlib.pyplot</span> <span class=\"k\">as</span> <span class=\"nn\">plt</span>\n\n<span class=\"c1\"># Load the visualizer, passing the path to the config file. This happens only once, at the start of training.</span>\n<span class=\"n\">visualizer</span> <span class=\"o\">=</span> <span class=\"n\">get_visualizer</span><span class=\"p\">(</span><span class=\"s1\">'./configs/example_config_0.yml'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Get an example state dictionary, containing the input, target, prediction</span>\n<span class=\"n\">states</span> <span class=\"o\">=</span> <span class=\"n\">get_example_states</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Call the visualizer</span>\n<span class=\"n\">image_grid</span> <span class=\"o\">=</span> <span class=\"n\">visualizer</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">states</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Log your image however you want</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">imsave</span><span class=\"p\">(</span><span class=\"s1\">'visualizations/example_visualization.jpg'</span><span class=\"p\">,</span> <span class=\"n\">image_grid</span><span class=\"o\">.</span><span class=\"n\">numpy</span><span class=\"p\">())</span>\n</pre>\n<p>Resulting visualization:</p>\n<p><img alt=\"Example Image Grid\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c18cb5c8166da18bd4e11548d0f19adaebcb91e7/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f696e6665726e6f2d7079746f7263682f666972656c696768742f6d61737465722f6578616d706c65732f6578616d706c655f76697375616c697a6174696f6e2e706e67\"></p>\n<p>Many more visualizers are available. Have a look at <a href=\"/firelight/visualizers/visualizers.py\" rel=\"nofollow\">visualizers.py</a> and <a href=\"/firelight/visualizers/container_visualizers.py\" rel=\"nofollow\">container_visualizers.py</a> or, for a more condensed list, the imports in <a href=\"/firelight/config_parsing.py\" rel=\"nofollow\">config_parsing.py</a>.</p>\n<h3>With Inferno</h3>\n<p>Firelight can be easily combined with a <code>TensorboardLogger</code> from <a href=\"https://github.com/inferno-pytorch/inferno\" rel=\"nofollow\">inferno</a>.\nSimply add an extra line at the start of your config specifying under which tag the visualizations should be logged, and\nadd a callback to your trainer with <code>get_visualization_callback</code> in <code>firelight/inferno_callback.py</code></p>\n<p>Config:</p>\n<pre><span class=\"nt\">fancy_visualization</span><span class=\"p\">:</span> <span class=\"c1\"># This will be the tag in tensorboard</span>\n    <span class=\"nt\">RowVisualizer</span><span class=\"p\">:</span>\n      <span class=\"l l-Scalar l-Scalar-Plain\">...</span>\n</pre>\n<p>Python:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">inferno.trainers.basic</span> <span class=\"kn\">import</span> <span class=\"n\">Trainer</span>\n<span class=\"kn\">from</span> <span class=\"nn\">inferno.trainers.callbacks.logging.tensorboard</span> <span class=\"kn\">import</span> <span class=\"n\">TensorboardLogger</span>\n<span class=\"kn\">from</span> <span class=\"nn\">firelight.inferno_callback</span> <span class=\"kn\">import</span> <span class=\"n\">get_visualization_callback</span>\n\n<span class=\"c1\"># Build trainer and logger</span>\n<span class=\"n\">trainer</span> <span class=\"o\">=</span> <span class=\"n\">Trainer</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">)</span>\n<span class=\"n\">logger</span> <span class=\"o\">=</span> <span class=\"n\">TensorboardLogger</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">)</span>\n<span class=\"n\">trainer</span><span class=\"o\">.</span><span class=\"n\">build_logger</span><span class=\"p\">(</span><span class=\"n\">logger</span><span class=\"p\">,</span> <span class=\"n\">log_directory</span><span class=\"o\">=</span><span class=\"s1\">'path/to/logdir'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Register the visualization callback</span>\n<span class=\"n\">trainer</span><span class=\"o\">.</span><span class=\"n\">register_callback</span><span class=\"p\">(</span>\n        <span class=\"n\">get_visualization_callback</span><span class=\"p\">(</span>\n            <span class=\"n\">config</span><span class=\"o\">=</span><span class=\"s1\">'path/to/visualization/config'</span>\n        <span class=\"p\">)</span>\n    <span class=\"p\">)</span>\n</pre>\n\n          </div>"}, "last_serial": 6117959, "releases": {"0.2.0": [{"comment_text": "", "digests": {"md5": "6ca6437942f2c7beccc22e8dd03baf57", "sha256": "35bb00ef7b5c75b562a1b1d412396ed62b837fdcf42521d398acbf51155b2604"}, "downloads": -1, "filename": "firelight-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "6ca6437942f2c7beccc22e8dd03baf57", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 39301, "upload_time": "2019-11-11T16:05:09", "upload_time_iso_8601": "2019-11-11T16:05:09.585251Z", "url": "https://files.pythonhosted.org/packages/e1/f6/a88e50b1244f74c1d94a4e325d1a6c8af126515ef2157dccb5a517f45734/firelight-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2ff047c3d9be766d8deff532970d11a0", "sha256": "5e93689871f0d322b9d3b19a3fbb7051b79b7fd4ad54bcacbeb25c01e7410922"}, "downloads": -1, "filename": "firelight-0.2.0.tar.gz", "has_sig": false, "md5_digest": "2ff047c3d9be766d8deff532970d11a0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30734, "upload_time": "2019-11-11T16:05:12", "upload_time_iso_8601": "2019-11-11T16:05:12.060432Z", "url": "https://files.pythonhosted.org/packages/10/f1/038eded92fe8e422d4f77198e512fca9075b83d2ca380b25ccf72e2e0afe/firelight-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "95ca021f25f3f859d7bc2aec4b7c8881", "sha256": "6d8fd5c2f20623343ef06b8151ecd68bbeef72e279d3b8e135cdf2cee01ad12c"}, "downloads": -1, "filename": "firelight-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "95ca021f25f3f859d7bc2aec4b7c8881", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 41640, "upload_time": "2019-11-11T16:50:41", "upload_time_iso_8601": "2019-11-11T16:50:41.712727Z", "url": "https://files.pythonhosted.org/packages/39/f0/87bd00f58061dc14dc964e09745c5796cbdf30f5c85a1d2b7951c7e88cfa/firelight-0.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2cfc89ab4cb881ea2a29e79789f5993d", "sha256": "e2a97819946b82877e9b437364c935bd652a520f8ee207b18bee30a711bee5c6"}, "downloads": -1, "filename": "firelight-0.2.1.tar.gz", "has_sig": false, "md5_digest": "2cfc89ab4cb881ea2a29e79789f5993d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 33764, "upload_time": "2019-11-11T16:50:43", "upload_time_iso_8601": "2019-11-11T16:50:43.714489Z", "url": "https://files.pythonhosted.org/packages/c2/44/dfbe7c97c8e0f7d895986f472237044c28db06e38e41b5226e499937e78a/firelight-0.2.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "95ca021f25f3f859d7bc2aec4b7c8881", "sha256": "6d8fd5c2f20623343ef06b8151ecd68bbeef72e279d3b8e135cdf2cee01ad12c"}, "downloads": -1, "filename": "firelight-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "95ca021f25f3f859d7bc2aec4b7c8881", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 41640, "upload_time": "2019-11-11T16:50:41", "upload_time_iso_8601": "2019-11-11T16:50:41.712727Z", "url": "https://files.pythonhosted.org/packages/39/f0/87bd00f58061dc14dc964e09745c5796cbdf30f5c85a1d2b7951c7e88cfa/firelight-0.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2cfc89ab4cb881ea2a29e79789f5993d", "sha256": "e2a97819946b82877e9b437364c935bd652a520f8ee207b18bee30a711bee5c6"}, "downloads": -1, "filename": "firelight-0.2.1.tar.gz", "has_sig": false, "md5_digest": "2cfc89ab4cb881ea2a29e79789f5993d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 33764, "upload_time": "2019-11-11T16:50:43", "upload_time_iso_8601": "2019-11-11T16:50:43.714489Z", "url": "https://files.pythonhosted.org/packages/c2/44/dfbe7c97c8e0f7d895986f472237044c28db06e38e41b5226e499937e78a/firelight-0.2.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:42:13 2020"}