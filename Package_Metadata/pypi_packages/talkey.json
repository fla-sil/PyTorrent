{"info": {"author": "Nickolas Grigoriadis", "author_email": "nagrigoriadis@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: POSIX :: Linux", "Programming Language :: Python", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Topic :: Multimedia :: Sound/Audio :: Speech", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "######\ntalkey\n######\n\nSimple Text-To-Speech (TTS) interface library with multi-language and multi-engine support.\n\n.. image:: https://travis-ci.org/grigi/talkey.svg\n    :target: https://travis-ci.org/grigi/talkey?branch=master\n.. image:: https://coveralls.io/repos/grigi/talkey/badge.svg?branch=master&service=github\n    :target: https://coveralls.io/github/grigi/talkey?branch=master\n\nDocumentation: http://talkey.readthedocs.org/\n\nRationale\n=========\n\nI was really intrigued by the concept of jasper, a voice-controlled interface.\nI needed it to be multi-lingual like me, so this library is my attempt to make having the\nTTS engines multi-lingual. A lot of this code is inspired by the Jasper project.\n\nBasic Usage\n===========\n\nInstall from pypi:\n\n.. code-block:: shell\n\n    pip install talkey\n\nAt its simplest use case:\n\n.. code-block:: python\n\n    import talkey\n    tts = talkey.Talkey()\n    tts.say('Old McDonald had a farm')\n\nIf you get a ``talkey.base.TTSError: No supported languages`` error, it means that you don't have a supported TTS engine installed. Please see below.\n\nBy default it will try to locate and use the local instances of the following TTS engines:\n\n* Flite\n* SVOX Pico\n* Festival\n* eSpeak\n* mbrola via eSpeak\n\nInstalling one or more of those engines should allow the libary to function and generate speech.\n\nIt also supports the following networked TTS Engines:\n\n* MaryTTS (needs hosting)\n* Google TTS (cloud hosted)\n\n\nFor best results you should configure it:\n\n.. code-block:: python\n\n    import talkey\n    tts = talkey.Talkey(\n        # These languages are given better scoring by the language detector\n        # to minimise the chance of it detecting a short string completely incorrectly.\n        # Order is not important here\n        preferred_languages=['en', 'af', 'el', 'fr'],\n\n        # The factor by which preferred_languages gets their score increased, defaults to 80.0\n        preferred_factor=80.0,\n\n        # The order of preference of using a TTS engine for a given language.\n        # Note, that networked engines (Google, Mary) is disabled by default, and so is dummy\n        # default: ['google', 'mary', 'espeak', 'festival', 'pico', 'flite', 'dummy']\n        # This sets eSpeak as the preferred engine, the other engines may still be used\n        #  if eSpeak doesn't support a requested language.\n        engine_preference=['espeak'],\n\n        # Here you segment the configuration by engine\n        # Key is the engine SLUG, in this case ``espeak``\n        espeak={\n            # Specify the engine options:\n            'options': {\n                'enabled': True,\n            },\n\n            # Specify some default voice options\n            'defaults': {\n                    'words_per_minute': 150,\n                    'variant': 'f4',\n            },\n\n            # Here you specify language-specific voice options\n            # e.g. for english we prefer the mbrola en1 voice\n            'languages': {\n                'en': {\n                    'voice': 'english-mb-en1',\n                    'words_per_minute': 130\n                },\n            }\n        }\n    )\n    tts.say('Old McDonald had a farm')\n\nInstalling TTS engines\n======================\n\nUbuntu/Debian:\n--------------\n\nFor festival:\n\n.. code-block:: shell\n\n    sudo apt-get install festival\n\nFor flite:\n\n.. code-block:: shell\n\n    sudo apt-get install flite\n\nFor SVOX Pico:\n\n.. code-block:: shell\n\n    sudo apt-get install libttspico-utils\n\nFor eSpeak:\n\n.. code-block:: shell\n\n    sudo apt-get install espeak\n\nFor mbrola and en1 voice:\n\n.. code-block:: shell\n\n    sudo apt-get install mbrola-en1\n\nWindows:\n--------\n\nInstall eSpeak:\n\n    Go to http://espeak.sourceforge.net/download.html and download and install ``setup_espeak-<version>.exe``\n\nFor mbrola and its voices:\n\n    Go to http://espeak.sourceforge.net/mbrola.html and download and install ``MbrolaTools<version>.exe`` and follow directions to install voices from  http://www.tcts.fpms.ac.be/synthesis/mbrola/mbrcopybin.html\n\nFor google TTS:\n\n    install python package gTTS\n\n    Download ffmpeg from http://ffmpeg.zeranoe.com/builds/\n\n    Extract with 7Zip, and add the \\bin folder to the PATH.\n\n    e.g.:\n        extract to C:\\ffmpeg and add C:\\ffmpeg\\bin to the PATH\n\n    (In cmd.exe you should be able to just run ffmpeg and see it showing information, then it is working right)", "description_content_type": null, "docs_url": "https://pythonhosted.org/talkey/", "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/grigi/talkey", "keywords": null, "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "talkey", "package_url": "https://pypi.org/project/talkey/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/talkey/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/grigi/talkey"}, "release_url": "https://pypi.org/project/talkey/0.1.1/", "requires_dist": null, "requires_python": null, "summary": "Simple Test-To-Speech (TTS) interface library with multi-language and multi-engine support.", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Simple Text-To-Speech (TTS) interface library with multi-language and multi-engine support.</p>\n<a href=\"https://travis-ci.org/grigi/talkey?branch=master\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/grigi/talkey.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a7cb67cbca6957631da754f5d37f4e92c70fb38a/68747470733a2f2f7472617669732d63692e6f72672f67726967692f74616c6b65792e737667\"></a>\n<a href=\"https://coveralls.io/github/grigi/talkey?branch=master\" rel=\"nofollow\"><img alt=\"https://coveralls.io/repos/grigi/talkey/badge.svg?branch=master&amp;service=github\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a42ab46fba1c6c9f3215f36999fed352af459645/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f67726967692f74616c6b65792f62616467652e7376673f6272616e63683d6d617374657226736572766963653d676974687562\"></a>\n<p>Documentation: <a href=\"http://talkey.readthedocs.org/\" rel=\"nofollow\">http://talkey.readthedocs.org/</a></p>\n<div id=\"rationale\">\n<h2>Rationale</h2>\n<p>I was really intrigued by the concept of jasper, a voice-controlled interface.\nI needed it to be multi-lingual like me, so this library is my attempt to make having the\nTTS engines multi-lingual. A lot of this code is inspired by the Jasper project.</p>\n</div>\n<div id=\"basic-usage\">\n<h2>Basic Usage</h2>\n<p>Install from pypi:</p>\n<pre>pip install talkey\n</pre>\n<p>At its simplest use case:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">talkey</span>\n<span class=\"n\">tts</span> <span class=\"o\">=</span> <span class=\"n\">talkey</span><span class=\"o\">.</span><span class=\"n\">Talkey</span><span class=\"p\">()</span>\n<span class=\"n\">tts</span><span class=\"o\">.</span><span class=\"n\">say</span><span class=\"p\">(</span><span class=\"s1\">'Old McDonald had a farm'</span><span class=\"p\">)</span>\n</pre>\n<p>If you get a <tt>talkey.base.TTSError: No supported languages</tt> error, it means that you don\u2019t have a supported TTS engine installed. Please see below.</p>\n<p>By default it will try to locate and use the local instances of the following TTS engines:</p>\n<ul>\n<li>Flite</li>\n<li>SVOX Pico</li>\n<li>Festival</li>\n<li>eSpeak</li>\n<li>mbrola via eSpeak</li>\n</ul>\n<p>Installing one or more of those engines should allow the libary to function and generate speech.</p>\n<p>It also supports the following networked TTS Engines:</p>\n<ul>\n<li>MaryTTS (needs hosting)</li>\n<li>Google TTS (cloud hosted)</li>\n</ul>\n<p>For best results you should configure it:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">talkey</span>\n<span class=\"n\">tts</span> <span class=\"o\">=</span> <span class=\"n\">talkey</span><span class=\"o\">.</span><span class=\"n\">Talkey</span><span class=\"p\">(</span>\n    <span class=\"c1\"># These languages are given better scoring by the language detector</span>\n    <span class=\"c1\"># to minimise the chance of it detecting a short string completely incorrectly.</span>\n    <span class=\"c1\"># Order is not important here</span>\n    <span class=\"n\">preferred_languages</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'en'</span><span class=\"p\">,</span> <span class=\"s1\">'af'</span><span class=\"p\">,</span> <span class=\"s1\">'el'</span><span class=\"p\">,</span> <span class=\"s1\">'fr'</span><span class=\"p\">],</span>\n\n    <span class=\"c1\"># The factor by which preferred_languages gets their score increased, defaults to 80.0</span>\n    <span class=\"n\">preferred_factor</span><span class=\"o\">=</span><span class=\"mf\">80.0</span><span class=\"p\">,</span>\n\n    <span class=\"c1\"># The order of preference of using a TTS engine for a given language.</span>\n    <span class=\"c1\"># Note, that networked engines (Google, Mary) is disabled by default, and so is dummy</span>\n    <span class=\"c1\"># default: ['google', 'mary', 'espeak', 'festival', 'pico', 'flite', 'dummy']</span>\n    <span class=\"c1\"># This sets eSpeak as the preferred engine, the other engines may still be used</span>\n    <span class=\"c1\">#  if eSpeak doesn't support a requested language.</span>\n    <span class=\"n\">engine_preference</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'espeak'</span><span class=\"p\">],</span>\n\n    <span class=\"c1\"># Here you segment the configuration by engine</span>\n    <span class=\"c1\"># Key is the engine SLUG, in this case ``espeak``</span>\n    <span class=\"n\">espeak</span><span class=\"o\">=</span><span class=\"p\">{</span>\n        <span class=\"c1\"># Specify the engine options:</span>\n        <span class=\"s1\">'options'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"s1\">'enabled'</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"p\">},</span>\n\n        <span class=\"c1\"># Specify some default voice options</span>\n        <span class=\"s1\">'defaults'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n                <span class=\"s1\">'words_per_minute'</span><span class=\"p\">:</span> <span class=\"mi\">150</span><span class=\"p\">,</span>\n                <span class=\"s1\">'variant'</span><span class=\"p\">:</span> <span class=\"s1\">'f4'</span><span class=\"p\">,</span>\n        <span class=\"p\">},</span>\n\n        <span class=\"c1\"># Here you specify language-specific voice options</span>\n        <span class=\"c1\"># e.g. for english we prefer the mbrola en1 voice</span>\n        <span class=\"s1\">'languages'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"s1\">'en'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n                <span class=\"s1\">'voice'</span><span class=\"p\">:</span> <span class=\"s1\">'english-mb-en1'</span><span class=\"p\">,</span>\n                <span class=\"s1\">'words_per_minute'</span><span class=\"p\">:</span> <span class=\"mi\">130</span>\n            <span class=\"p\">},</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">)</span>\n<span class=\"n\">tts</span><span class=\"o\">.</span><span class=\"n\">say</span><span class=\"p\">(</span><span class=\"s1\">'Old McDonald had a farm'</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"installing-tts-engines\">\n<h2>Installing TTS engines</h2>\n<div id=\"ubuntu-debian\">\n<h3>Ubuntu/Debian:</h3>\n<p>For festival:</p>\n<pre>sudo apt-get install festival\n</pre>\n<p>For flite:</p>\n<pre>sudo apt-get install flite\n</pre>\n<p>For SVOX Pico:</p>\n<pre>sudo apt-get install libttspico-utils\n</pre>\n<p>For eSpeak:</p>\n<pre>sudo apt-get install espeak\n</pre>\n<p>For mbrola and en1 voice:</p>\n<pre>sudo apt-get install mbrola-en1\n</pre>\n</div>\n<div id=\"windows\">\n<h3>Windows:</h3>\n<p>Install eSpeak:</p>\n<blockquote>\nGo to <a href=\"http://espeak.sourceforge.net/download.html\" rel=\"nofollow\">http://espeak.sourceforge.net/download.html</a> and download and install <tt><span class=\"pre\">setup_espeak-&lt;version&gt;.exe</span></tt></blockquote>\n<p>For mbrola and its voices:</p>\n<blockquote>\nGo to <a href=\"http://espeak.sourceforge.net/mbrola.html\" rel=\"nofollow\">http://espeak.sourceforge.net/mbrola.html</a> and download and install <tt><span class=\"pre\">MbrolaTools&lt;version&gt;.exe</span></tt> and follow directions to install voices from  <a href=\"http://www.tcts.fpms.ac.be/synthesis/mbrola/mbrcopybin.html\" rel=\"nofollow\">http://www.tcts.fpms.ac.be/synthesis/mbrola/mbrcopybin.html</a></blockquote>\n<p>For google TTS:</p>\n<blockquote>\n<p>install python package gTTS</p>\n<p>Download ffmpeg from <a href=\"http://ffmpeg.zeranoe.com/builds/\" rel=\"nofollow\">http://ffmpeg.zeranoe.com/builds/</a></p>\n<p>Extract with 7Zip, and add the bin folder to the PATH.</p>\n<dl>\n<dt>e.g.:</dt>\n<dd>extract to C:ffmpeg and add C:ffmpegbin to the PATH</dd>\n</dl>\n<p>(In cmd.exe you should be able to just run ffmpeg and see it showing information, then it is working right)</p>\n</blockquote>\n</div>\n</div>\n\n          </div>"}, "last_serial": 1732183, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "9712ec80f849366b646321ad840018e3", "sha256": "5b4e2853a51ea0cc03926b84b72c43d1cc969c3a270b81cd37298f03da98ba67"}, "downloads": -1, "filename": "talkey-0.1.0.tar.gz", "has_sig": false, "md5_digest": "9712ec80f849366b646321ad840018e3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14039, "upload_time": "2015-09-21T13:28:08", "upload_time_iso_8601": "2015-09-21T13:28:08.531515Z", "url": "https://files.pythonhosted.org/packages/2f/9d/5c148a76b6faa2704fdbc198896580f115b6aaeba010f5c2286e05116e43/talkey-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "15a17f18345338e81e64c1338dcabfa5", "sha256": "bb94a90d22b0715f0bc2c57a98e3efedb615dae32f4b6608d61743841f45d561"}, "downloads": -1, "filename": "talkey-0.1.1.tar.gz", "has_sig": false, "md5_digest": "15a17f18345338e81e64c1338dcabfa5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15284, "upload_time": "2015-09-21T19:45:01", "upload_time_iso_8601": "2015-09-21T19:45:01.894445Z", "url": "https://files.pythonhosted.org/packages/58/6a/bd20b7f210d70bd6cf3dd78d34f90fa12c7d6afcf443313cf36991e02135/talkey-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "15a17f18345338e81e64c1338dcabfa5", "sha256": "bb94a90d22b0715f0bc2c57a98e3efedb615dae32f4b6608d61743841f45d561"}, "downloads": -1, "filename": "talkey-0.1.1.tar.gz", "has_sig": false, "md5_digest": "15a17f18345338e81e64c1338dcabfa5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15284, "upload_time": "2015-09-21T19:45:01", "upload_time_iso_8601": "2015-09-21T19:45:01.894445Z", "url": "https://files.pythonhosted.org/packages/58/6a/bd20b7f210d70bd6cf3dd78d34f90fa12c7d6afcf443313cf36991e02135/talkey-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:58:16 2020"}