{"info": {"author": "Vasily Sulatskov", "author_email": "redvasily@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Web Environment", "Framework :: Buildout", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "==========================================\nLighttpd config file creation for Buildout\n==========================================\n\nThis recipe for buildout generates Lighttpd configuration files. It's\nespecially well suited for using with Django (djangorecipe) in FastCGI mode.\n\nConfig file is generated from Jinja2 template. Recipe provides some custom\nJinja tests, specifically tailored for Lighttpd configuration files.\n\nVery little logic is hard coded in the python code, most of the work happens in\nthe template, so you can extend default template or even use your own.\n\n\nBasic usage\n===========\n\nBasic buildout.cfg::\n\n    [buildout]\n    parts = django lighty-conf\n\n    [django]\n    recipe = djangorecipe\n    project=lighttpdrecipetest\n    version = 1.1\n    fcgi = true\n    settings = settings\n    extra-paths = ${buildout:directory}/${django:project}\n    unzip = true\n    download-cache = dlcache\n\n    [lighty-conf]\n    recipe = lighttpdrecipe\n    host = example.com\n    redirect_from = www.example.com\n    media =\n        /favicon.ico => ${buildout:directory}/media/favicon.ico\n\nThis recipe will generate a following config file::\n\n    $HTTP[\"host\"] == \"example.com\" {\n        server.document-root = \"/var/sites/lighttpdrecipetest\"\n        server.follow-symlink = \"enable\"\n        dir-listing.activate = \"enable\"\n\n        fastcgi.server = (\n            \"/fcgi\" => (\n                (\n                    \"bin-path\" => \"/var/sites/lighttpdrecipetest/bin/django.fcgi\",\n                    \"socket\" => \"/tmp/example.com.socket\",\n                    \"check-local\" => \"disable\",\n                    \"max-procs\" => 4,\n                    \"min-procs\" => 4,\n                )\n            )\n        )\n\n        alias.url = (\n            \"/favicon.ico\" => \"/var/sites/lighttpdrecipetest/media/favicon.ico\",\n            \"/admin_media\" => \"/var/sites/lighttpdrecipetest/parts/django/django/contrib/admin/media/\",\n            \"/media\" => \"/var/sites/lighttpdrecipetest/media/\",\n        )\n\n        url.rewrite-once = (\n            \"^(/favicon.ico.*)$\" => \"/$1\",\n            \"^(/admin_media.*)$\" => \"/$1\",\n            \"^(/media/.*)$\" => \"/$1\",\n            \"^(/.*)$\" => \"/fcgi$1\",\n        )\n\n        $HTTP[\"url\"] =~ \"^/media/\" {\n            expire.url = ( \"\" => \"access 1 seconds\" )\n        }\n    }\n\n    $HTTP[\"host\"] == \"www.example.com\" {\n        url.redirect = ( \"^(/.*)\" => \"http://example.com$1\" )\n    }\n\nNow you just need to symlink this config to /etc/lighttpd/conf-available/ (or\nwhat your distribution uses) and you actually have a pretty high chance that it will work\non the very first attempt.\n\nSo just by writing several lines for lighttpdrecipe we configured Lighttpd to\nuse 4 fastcgi worker processes, set up rewrites and aliases for media files,\nDjango admin media files and favicon.ico. Also we set up a redirect from\nwww.example.com to example.com\n\nThat's exactly what I need most of the time, so perhaps that's what you need as well.\n\n\nRecipe options\n==============\n\nhost (required)\n    List of host names or regular expressions of the server we are setting up,\n    each on the separate line. At least one is required.\n\n    Recipe will try to guess if you provide simple host name or a regular expression\n    and depending on that will use corresponding match operator.\n\ntemplate (optional, default value is \"djangorecipe_fcgi.jinja\")\n    Template to use for config generation. Lighttpdrecipe sets up Jinja with\n    filesystem template loader. It searches for templates in the lighttpdrecipe\n    installation directory and in ${buildout:directory}, so you can provide\n    your own template and extend the default template\n\nredirect_from (optional)\n    List of hostnames (or regular expressions) to redirect from to our main\n    host. Use it if you want to redirect all your users to www or non-www\n    version of your site.\n\nredirect_to (optional, default value is the first line of the \"hosts\" option)\n    Primary domain where all users will be redirected to if they try to visit a\n    site listed in the redirect_from.\n    If \"redirect_from\" is specified and \"redirect_to\" is not specified and the \n    first \"hosts\" line looks like a regexp, then an exception will be thrown.\n\npriority (optional, default value is 11)\n    Generated config file will be named [priority]-[config_name].conf\n\nconfig_name (optional, default value is [redirect_to])\n    That's the second part of the generated config name. In the case of simple\n    hostname without explict redirect_to specified, config will be named like\n    11-example.com.conf\n\nprocesses (optional, default value is 4)\n    Number of fastcgi worker processes\n\nmedia_url (optional, default value is \"/media\")\n    Url to serve media files.\n\nmedia_root (optional, default value is ${buildout:directory} + \"/media\")\n    Media files location\n\ndir_listing (optional, default value is \"enable\")\n    Enable directory listing?\n\nsocket (optional, default value is [redirect_to] or ${django:project})\n    Config will use /tmp/{{ socket }}/socket for communications with lighttpd\n\nbin_path (optional, default value is ${buildout:bin-directory}/django.fcgi)\n    Script to start fast cgi processes. Default value works with Django recipe fcgi file\n\ndocument_root (optional, default value is ${buildout:directory})\n    Site document root\n\nfar_future_expiry (optional, default value is \"no\")\n    Set expiry of media files to the far future\n\nrewrite_admin_media (optional, default value is \"yes\")\n    Configure rewrite rule and alias for serving Django admin media files\n\nadmin_media_url (optional, default value is \"/admin_media\")\n    URL to serve Django admin media files. Default value matched Django default\n\nadmin_media_path (optional, default value is ${django:location}/django/contrib/admin/media/\")\n    Location of Django admin media files. Matches the location if Django admin\n    media files if djangorecipe is used\n\nmedia (optional, default value is \"\")\n    Pairs of /media_url => /path/to/my/media/on/the/server each on the separate line\n    Each line will create a rewrite rule and alias.url in the config\n\nexpiry_period (optional, default value depends on \"far_future_expiry\" option)\n    If \"far_future_expiry\" is set then expiry_period is set to \"12 months\", if\n    not set - \"1 seconds\".\n    If you provide explict \"expiry_period\" then your value is used.\n\nextra (optional)\n    Value of \"extra\" option (if given) in inserted verbatim near the end of\n    $HTTP[\"host\"] match section\n\n\nCustomizing template\n====================\n\nLighttpdrecipe uses Jinja2 template for config generation. Template context\nincludes all options specified for the recipe and additionally \"options\" and\n\"buildout\" variables. So you can access any variable from the buildout.cfg like\nthis {{ buildout.buildout.directory }} or {{ buildout.buildout['bin-directory'] }}.\n\nJinja environment is configured to use filesystem loader that looks for\ntemplates in the lighttpdrecipe installation directory and in the \n{{ buildout:directory }}, e.g. the main buildout directory. This allows you to\nuse your own template, overriding default values for variables or even\nwhole template blocks.\n\n\nCustom tests\n------------\n\nTwo additional tests are provided for the Jinja environment:\n\ntrue\n    this test for \"affirmative\" string, e.g.  one of the following (case\n    insensitive): 'yes', 'y', 'true', 'enable', 'enabled'.\n\n    Example usage::\n\n        {% if dir_listing is true %}\n            Dir_listing is enabled\n        {% endif %}\n\nsimple_host\n    Tests if the argument is a \"simple host name\", e.g. single line string\n    which consists of alphanumeric characters, hyphens and dots.\n\n    For example::\n\n        \"www.example.com\"\n\n    will pass the test, but::\n\n        \".*\\.example.com\" \n\n    or::\n\n        \"\"\"\n        a.example.com\n        b.example.com\n        \"\"\"\"\n\n    will not.\n\n    Example usage::\n\n        {% if host is simple_host %}\n            Output simple host condition\n        {% endif %}\n\n\nSpecifying different default option values\n------------------------------------------\n\nYou can easily specify different default option values by extending default template.\n\nHere's the example::\n\n    {%- extends \"djangorecipe_fcgi.jinja\" -%}\n\n    {%- set processes = processes or '2' -%}\n\nThis template will work just as the standard one but default value for \"processes\" will be '2'.\n\n\nUse the source\n--------------\n\nYou can do many other things by extending the template. To get the idea what's\ngoing on in the template look at the template source_.\n\n.. _source: http://github.com/redvasily/lighttpdrecipe/blob/master/lighttpdrecipe/djangorecipe_fcgi.jinja\n\n\nBugs\n====\n\nIf you find a bug please use the github tracker_.\n\n.. _tracker: http://github.com/redvasily/lighttpdrecipe/issues \n\n\nCustom templates\n================\n\nI don't expect my template to work for everyone, so if you find general\ninfrastructure of lighttpdrecipe and create another template which you can\nthink can be useful for someone else, please contact me at redvasily at\ngmail.com and I'll include your template in the lighttpdrecipe", "description_content_type": null, "docs_url": null, "download_url": "http://cloud.github.com/downloads/redvasily/lighttpdrecipe/", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/redvasily/lighttpdrecipe/tree/master/", "keywords": null, "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "lighttpdrecipe", "package_url": "https://pypi.org/project/lighttpdrecipe/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/lighttpdrecipe/", "project_urls": {"Download": "http://cloud.github.com/downloads/redvasily/lighttpdrecipe/", "Homepage": "http://github.com/redvasily/lighttpdrecipe/tree/master/"}, "release_url": "https://pypi.org/project/lighttpdrecipe/0.2.5/", "requires_dist": null, "requires_python": null, "summary": "Buildout recipe for generating Lighttpd configuration files", "version": "0.2.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>This recipe for buildout generates Lighttpd configuration files. It\u2019s\nespecially well suited for using with Django (djangorecipe) in FastCGI mode.</p>\n<p>Config file is generated from Jinja2 template. Recipe provides some custom\nJinja tests, specifically tailored for Lighttpd configuration files.</p>\n<p>Very little logic is hard coded in the python code, most of the work happens in\nthe template, so you can extend default template or even use your own.</p>\n<div id=\"basic-usage\">\n<h2>Basic usage</h2>\n<p>Basic buildout.cfg:</p>\n<pre>[buildout]\nparts = django lighty-conf\n\n[django]\nrecipe = djangorecipe\nproject=lighttpdrecipetest\nversion = 1.1\nfcgi = true\nsettings = settings\nextra-paths = ${buildout:directory}/${django:project}\nunzip = true\ndownload-cache = dlcache\n\n[lighty-conf]\nrecipe = lighttpdrecipe\nhost = example.com\nredirect_from = www.example.com\nmedia =\n    /favicon.ico =&gt; ${buildout:directory}/media/favicon.ico\n</pre>\n<p>This recipe will generate a following config file:</p>\n<pre>$HTTP[\"host\"] == \"example.com\" {\n    server.document-root = \"/var/sites/lighttpdrecipetest\"\n    server.follow-symlink = \"enable\"\n    dir-listing.activate = \"enable\"\n\n    fastcgi.server = (\n        \"/fcgi\" =&gt; (\n            (\n                \"bin-path\" =&gt; \"/var/sites/lighttpdrecipetest/bin/django.fcgi\",\n                \"socket\" =&gt; \"/tmp/example.com.socket\",\n                \"check-local\" =&gt; \"disable\",\n                \"max-procs\" =&gt; 4,\n                \"min-procs\" =&gt; 4,\n            )\n        )\n    )\n\n    alias.url = (\n        \"/favicon.ico\" =&gt; \"/var/sites/lighttpdrecipetest/media/favicon.ico\",\n        \"/admin_media\" =&gt; \"/var/sites/lighttpdrecipetest/parts/django/django/contrib/admin/media/\",\n        \"/media\" =&gt; \"/var/sites/lighttpdrecipetest/media/\",\n    )\n\n    url.rewrite-once = (\n        \"^(/favicon.ico.*)$\" =&gt; \"/$1\",\n        \"^(/admin_media.*)$\" =&gt; \"/$1\",\n        \"^(/media/.*)$\" =&gt; \"/$1\",\n        \"^(/.*)$\" =&gt; \"/fcgi$1\",\n    )\n\n    $HTTP[\"url\"] =~ \"^/media/\" {\n        expire.url = ( \"\" =&gt; \"access 1 seconds\" )\n    }\n}\n\n$HTTP[\"host\"] == \"www.example.com\" {\n    url.redirect = ( \"^(/.*)\" =&gt; \"http://example.com$1\" )\n}\n</pre>\n<p>Now you just need to symlink this config to /etc/lighttpd/conf-available/ (or\nwhat your distribution uses) and you actually have a pretty high chance that it will work\non the very first attempt.</p>\n<p>So just by writing several lines for lighttpdrecipe we configured Lighttpd to\nuse 4 fastcgi worker processes, set up rewrites and aliases for media files,\nDjango admin media files and favicon.ico. Also we set up a redirect from\nwww.example.com to example.com</p>\n<p>That\u2019s exactly what I need most of the time, so perhaps that\u2019s what you need as well.</p>\n</div>\n<div id=\"recipe-options\">\n<h2>Recipe options</h2>\n<dl>\n<dt>host (required)</dt>\n<dd><p>List of host names or regular expressions of the server we are setting up,\neach on the separate line. At least one is required.</p>\n<p>Recipe will try to guess if you provide simple host name or a regular expression\nand depending on that will use corresponding match operator.</p>\n</dd>\n<dt>template (optional, default value is \u201cdjangorecipe_fcgi.jinja\u201d)</dt>\n<dd>Template to use for config generation. Lighttpdrecipe sets up Jinja with\nfilesystem template loader. It searches for templates in the lighttpdrecipe\ninstallation directory and in ${buildout:directory}, so you can provide\nyour own template and extend the default template</dd>\n<dt>redirect_from (optional)</dt>\n<dd>List of hostnames (or regular expressions) to redirect from to our main\nhost. Use it if you want to redirect all your users to www or non-www\nversion of your site.</dd>\n<dt>redirect_to (optional, default value is the first line of the \u201chosts\u201d option)</dt>\n<dd>Primary domain where all users will be redirected to if they try to visit a\nsite listed in the redirect_from.\nIf \u201credirect_from\u201d is specified and \u201credirect_to\u201d is not specified and the\nfirst \u201chosts\u201d line looks like a regexp, then an exception will be thrown.</dd>\n<dt>priority (optional, default value is 11)</dt>\n<dd>Generated config file will be named [priority]-[config_name].conf</dd>\n<dt>config_name (optional, default value is [redirect_to])</dt>\n<dd>That\u2019s the second part of the generated config name. In the case of simple\nhostname without explict redirect_to specified, config will be named like\n11-example.com.conf</dd>\n<dt>processes (optional, default value is 4)</dt>\n<dd>Number of fastcgi worker processes</dd>\n<dt>media_url (optional, default value is \u201c/media\u201d)</dt>\n<dd>Url to serve media files.</dd>\n<dt>media_root (optional, default value is ${buildout:directory} + \u201c/media\u201d)</dt>\n<dd>Media files location</dd>\n<dt>dir_listing (optional, default value is \u201cenable\u201d)</dt>\n<dd>Enable directory listing?</dd>\n<dt>socket (optional, default value is [redirect_to] or ${django:project})</dt>\n<dd>Config will use /tmp/{{ socket }}/socket for communications with lighttpd</dd>\n<dt>bin_path (optional, default value is ${buildout:bin-directory}/django.fcgi)</dt>\n<dd>Script to start fast cgi processes. Default value works with Django recipe fcgi file</dd>\n<dt>document_root (optional, default value is ${buildout:directory})</dt>\n<dd>Site document root</dd>\n<dt>far_future_expiry (optional, default value is \u201cno\u201d)</dt>\n<dd>Set expiry of media files to the far future</dd>\n<dt>rewrite_admin_media (optional, default value is \u201cyes\u201d)</dt>\n<dd>Configure rewrite rule and alias for serving Django admin media files</dd>\n<dt>admin_media_url (optional, default value is \u201c/admin_media\u201d)</dt>\n<dd>URL to serve Django admin media files. Default value matched Django default</dd>\n<dt>admin_media_path (optional, default value is ${django:location}/django/contrib/admin/media/\u201d)</dt>\n<dd>Location of Django admin media files. Matches the location if Django admin\nmedia files if djangorecipe is used</dd>\n<dt>media (optional, default value is \u201c\u201d)</dt>\n<dd>Pairs of /media_url =&gt; /path/to/my/media/on/the/server each on the separate line\nEach line will create a rewrite rule and alias.url in the config</dd>\n<dt>expiry_period (optional, default value depends on \u201cfar_future_expiry\u201d option)</dt>\n<dd>If \u201cfar_future_expiry\u201d is set then expiry_period is set to \u201c12 months\u201d, if\nnot set - \u201c1 seconds\u201d.\nIf you provide explict \u201cexpiry_period\u201d then your value is used.</dd>\n<dt>extra (optional)</dt>\n<dd>Value of \u201cextra\u201d option (if given) in inserted verbatim near the end of\n$HTTP[\u201chost\u201d] match section</dd>\n</dl>\n</div>\n<div id=\"customizing-template\">\n<h2>Customizing template</h2>\n<p>Lighttpdrecipe uses Jinja2 template for config generation. Template context\nincludes all options specified for the recipe and additionally \u201coptions\u201d and\n\u201cbuildout\u201d variables. So you can access any variable from the buildout.cfg like\nthis {{ buildout.buildout.directory }} or {{ buildout.buildout[\u2018bin-directory\u2019] }}.</p>\n<p>Jinja environment is configured to use filesystem loader that looks for\ntemplates in the lighttpdrecipe installation directory and in the\n{{ buildout:directory }}, e.g. the main buildout directory. This allows you to\nuse your own template, overriding default values for variables or even\nwhole template blocks.</p>\n<div id=\"custom-tests\">\n<h3>Custom tests</h3>\n<p>Two additional tests are provided for the Jinja environment:</p>\n<dl>\n<dt>true</dt>\n<dd><p>this test for \u201caffirmative\u201d string, e.g.  one of the following (case\ninsensitive): \u2018yes\u2019, \u2018y\u2019, \u2018true\u2019, \u2018enable\u2019, \u2018enabled\u2019.</p>\n<p>Example usage:</p>\n<pre>{% if dir_listing is true %}\n    Dir_listing is enabled\n{% endif %}\n</pre>\n</dd>\n<dt>simple_host</dt>\n<dd><p>Tests if the argument is a \u201csimple host name\u201d, e.g. single line string\nwhich consists of alphanumeric characters, hyphens and dots.</p>\n<p>For example:</p>\n<pre>\"www.example.com\"\n</pre>\n<p>will pass the test, but:</p>\n<pre>\".*\\.example.com\"\n</pre>\n<p>or:</p>\n<pre>\"\"\"\na.example.com\nb.example.com\n\"\"\"\"\n</pre>\n<p>will not.</p>\n<p>Example usage:</p>\n<pre>{% if host is simple_host %}\n    Output simple host condition\n{% endif %}\n</pre>\n</dd>\n</dl>\n</div>\n<div id=\"specifying-different-default-option-values\">\n<h3>Specifying different default option values</h3>\n<p>You can easily specify different default option values by extending default template.</p>\n<p>Here\u2019s the example:</p>\n<pre>{%- extends \"djangorecipe_fcgi.jinja\" -%}\n\n{%- set processes = processes or '2' -%}\n</pre>\n<p>This template will work just as the standard one but default value for \u201cprocesses\u201d will be \u20182\u2019.</p>\n</div>\n<div id=\"use-the-source\">\n<h3>Use the source</h3>\n<p>You can do many other things by extending the template. To get the idea what\u2019s\ngoing on in the template look at the template <a href=\"http://github.com/redvasily/lighttpdrecipe/blob/master/lighttpdrecipe/djangorecipe_fcgi.jinja\" rel=\"nofollow\">source</a>.</p>\n</div>\n</div>\n<div id=\"bugs\">\n<h2>Bugs</h2>\n<p>If you find a bug please use the github <a href=\"http://github.com/redvasily/lighttpdrecipe/issues\" rel=\"nofollow\">tracker</a>.</p>\n</div>\n<div id=\"custom-templates\">\n<h2>Custom templates</h2>\n<p>I don\u2019t expect my template to work for everyone, so if you find general\ninfrastructure of lighttpdrecipe and create another template which you can\nthink can be useful for someone else, please contact me at redvasily at\ngmail.com and I\u2019ll include your template in the lighttpdrecipe</p>\n</div>\n\n          </div>"}, "last_serial": 803062, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "c3f9d305d848ff3c0a4457493443c7e4", "sha256": "a36fcf5b1f5ccfd087dd297e19183909f68bed4152e9a378da888656bff750f8"}, "downloads": -1, "filename": "lighttpdrecipe-0.1.tar.gz", "has_sig": false, "md5_digest": "c3f9d305d848ff3c0a4457493443c7e4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4348, "upload_time": "2009-08-31T20:13:16", "upload_time_iso_8601": "2009-08-31T20:13:16.117721Z", "url": "https://files.pythonhosted.org/packages/f5/47/95c254a257299be03825f30e7eac60717b835e1b4dcf26c94fc3de25fb6b/lighttpdrecipe-0.1.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "34dfa1a048c9cf2314af90987691765d", "sha256": "ef0ec19e16e1724b9ccac4fb8850843fe8a215fa46d438cfd52c3fd25e7058d4"}, "downloads": -1, "filename": "lighttpdrecipe-0.1.1.tar.gz", "has_sig": false, "md5_digest": "34dfa1a048c9cf2314af90987691765d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4364, "upload_time": "2009-09-02T10:39:02", "upload_time_iso_8601": "2009-09-02T10:39:02.196465Z", "url": "https://files.pythonhosted.org/packages/d8/ed/64ffb54957de3cc97924173c72eabd998cff2142f6999b9c9c248772cb16/lighttpdrecipe-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "e153bf121af56c2f26d6dca016066de9", "sha256": "830472ef4619404e2099245234c240dfb0b3a30845b2c3937d5a3b1368a2b57e"}, "downloads": -1, "filename": "lighttpdrecipe-0.1.2.tar.gz", "has_sig": false, "md5_digest": "e153bf121af56c2f26d6dca016066de9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4731, "upload_time": "2009-09-05T20:18:32", "upload_time_iso_8601": "2009-09-05T20:18:32.666603Z", "url": "https://files.pythonhosted.org/packages/b0/c4/57e7d698252059372a2a5a9511d96727343032cdc3b4beeb6c978a3a1488/lighttpdrecipe-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "b68d91b8e8a4974fb9ad39ccb1751d2c", "sha256": "c79c3ce24a70bbab6f6cdc2efbf400041601aebbeeff8ab4971105ab766df68b"}, "downloads": -1, "filename": "lighttpdrecipe-0.1.3.tar.gz", "has_sig": false, "md5_digest": "b68d91b8e8a4974fb9ad39ccb1751d2c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4738, "upload_time": "2009-09-08T19:41:43", "upload_time_iso_8601": "2009-09-08T19:41:43.923675Z", "url": "https://files.pythonhosted.org/packages/12/09/c1501272b6ad65b9bdbe199305422907ed2d12f6318c85f7bcfb4402f0fd/lighttpdrecipe-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "6386b762a96bd82826d5c82c09c2eadd", "sha256": "5b94279e53041fc495de300c3b3ef8530d44e6c71e0537645dc13440bd095bbe"}, "downloads": -1, "filename": "lighttpdrecipe-0.1.4.tar.gz", "has_sig": false, "md5_digest": "6386b762a96bd82826d5c82c09c2eadd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5103, "upload_time": "2009-09-11T18:46:37", "upload_time_iso_8601": "2009-09-11T18:46:37.796115Z", "url": "https://files.pythonhosted.org/packages/da/6d/368f5ec8916466aa427089c42f075d15a91a8b6a853127fdec7b08937e1b/lighttpdrecipe-0.1.4.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "dde76bc2223d85b1fe9ee5d4176c8311", "sha256": "9e46a8108ead970ccfbe9b74cee60310fb4565c47b73b47daeca145b37375b10"}, "downloads": -1, "filename": "lighttpdrecipe-0.2.tar.gz", "has_sig": false, "md5_digest": "dde76bc2223d85b1fe9ee5d4176c8311", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8130, "upload_time": "2009-09-12T18:33:14", "upload_time_iso_8601": "2009-09-12T18:33:14.632511Z", "url": "https://files.pythonhosted.org/packages/49/e1/b5b7533fd62f36d1a2edb4fb967789b11a624288ebdbda9134b4ac292b15/lighttpdrecipe-0.2.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "bfb388ada60eba050f774dbb12ef6a8b", "sha256": "485b10e1bae10ff92e592694bf2bb7855530940c6d2c155aeec6dd28d67ba398"}, "downloads": -1, "filename": "lighttpdrecipe-0.2.1.tar.gz", "has_sig": false, "md5_digest": "bfb388ada60eba050f774dbb12ef6a8b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8112, "upload_time": "2009-09-12T18:36:52", "upload_time_iso_8601": "2009-09-12T18:36:52.548916Z", "url": "https://files.pythonhosted.org/packages/c5/eb/36cc753f2172fec27c51e35950b23af8af04d149e5031d388236fd2cec9d/lighttpdrecipe-0.2.1.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "606aa80ee715215d69a83dc51f748293", "sha256": "cb1749a2b6caf5c408c436ca4a692e31be3a539463ad73e88cb5d99377d0fabd"}, "downloads": -1, "filename": "lighttpdrecipe-0.2.2.tar.gz", "has_sig": false, "md5_digest": "606aa80ee715215d69a83dc51f748293", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7416, "upload_time": "2009-10-11T06:27:51", "upload_time_iso_8601": "2009-10-11T06:27:51.907083Z", "url": "https://files.pythonhosted.org/packages/1a/51/c0222dcc4f7b71aa02c1389f7fde476d217160ac3b85d499697059f29851/lighttpdrecipe-0.2.2.tar.gz", "yanked": false}], "0.2.3": [{"comment_text": "", "digests": {"md5": "9b7374803cf66e4380605cfb19c7f911", "sha256": "9dbba3e1a368fbde2bbe519f1bdebcc39fccd7228a615059313ed7a1d981e67c"}, "downloads": -1, "filename": "lighttpdrecipe-0.2.3.tar.gz", "has_sig": false, "md5_digest": "9b7374803cf66e4380605cfb19c7f911", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8252, "upload_time": "2009-10-13T15:40:01", "upload_time_iso_8601": "2009-10-13T15:40:01.723806Z", "url": "https://files.pythonhosted.org/packages/d0/67/47a08c9979309504c2214eb48e0d3587226623c76700a2f10aef0b215cb2/lighttpdrecipe-0.2.3.tar.gz", "yanked": false}], "0.2.4": [{"comment_text": "", "digests": {"md5": "4f3d0a118579b914135cae3181b84fe7", "sha256": "e49a0d414aac0a9cbff5a785541890974a8d3d612209e1463c607b538de58358"}, "downloads": -1, "filename": "lighttpdrecipe-0.2.4.tar.gz", "has_sig": false, "md5_digest": "4f3d0a118579b914135cae3181b84fe7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8223, "upload_time": "2009-10-14T16:51:15", "upload_time_iso_8601": "2009-10-14T16:51:15.438044Z", "url": "https://files.pythonhosted.org/packages/d0/a7/42cbc2c8e0489814339ae8d79971b510c97a926f42951b3b9b00e1e55636/lighttpdrecipe-0.2.4.tar.gz", "yanked": false}], "0.2.5": [{"comment_text": "", "digests": {"md5": "33cbcf98aca677df125242b833c10bef", "sha256": "a03881c7d0b5460b5d81855c58810c89b6049066c21b5816f04b6f9520314097"}, "downloads": -1, "filename": "lighttpdrecipe-0.2.5.tar.gz", "has_sig": false, "md5_digest": "33cbcf98aca677df125242b833c10bef", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8226, "upload_time": "2010-03-01T11:29:52", "upload_time_iso_8601": "2010-03-01T11:29:52.217728Z", "url": "https://files.pythonhosted.org/packages/1f/61/81bceab1a1397bd56fac2b2a3055b39078d9795e20f69c24f912dc72689e/lighttpdrecipe-0.2.5.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "33cbcf98aca677df125242b833c10bef", "sha256": "a03881c7d0b5460b5d81855c58810c89b6049066c21b5816f04b6f9520314097"}, "downloads": -1, "filename": "lighttpdrecipe-0.2.5.tar.gz", "has_sig": false, "md5_digest": "33cbcf98aca677df125242b833c10bef", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8226, "upload_time": "2010-03-01T11:29:52", "upload_time_iso_8601": "2010-03-01T11:29:52.217728Z", "url": "https://files.pythonhosted.org/packages/1f/61/81bceab1a1397bd56fac2b2a3055b39078d9795e20f69c24f912dc72689e/lighttpdrecipe-0.2.5.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:45:58 2020"}