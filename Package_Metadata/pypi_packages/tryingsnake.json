{"info": {"author": "Maciej Szymkiewicz", "author_email": "matthew.szymkiewicz@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3"], "description": "TryingSnake\n===========\n\n[![Build\nStatus](https://travis-ci.org/zero323/tryingsnake.svg?branch=master)](https://travis-ci.org/zero323/tryingsnake)\n[![Coverage\nStatus](https://coveralls.io/repos/zero323/tryingsnake/badge.svg?branch=master&service=github)](https://coveralls.io/github/zero323/tryingsnake?branch=master)\n[![Code\nClimate](https://codeclimate.com/github/zero323/tryingsnake/badges/gpa.svg)](https://codeclimate.com/github/zero323/tryingsnake)\n[![PyPI\nversion](https://badge.fury.io/py/tryingsnake.svg)](https://badge.fury.io/py/tryingsnake)\n[![Conda Version](https://img.shields.io/conda/vn/conda-forge/tryingsnake.svg)](https://anaconda.org/conda-forge/tryingsnake)\n[![License\nMIT](https://img.shields.io/pypi/l/tryingsnake.svg)](https://github.com/zero323/tryingsnake/blob/master/LICENSE)\n\nA simple, `Try` implementation inspired by\n[scala.util.Try](https://www.scala-lang.org/api/current/scala/util/Try.html)\n\nExamples\n========\n\n-   Wrap functions with arguments:\n\n    ```python\n    >>> from tryingsnake import Try, Try_, Success, Failure\n    >>> from operator import add, truediv\n    >>> Try(add, 0, 1)\n    Success(1)\n    >>> Try(truediv, 1, 0)  # doctest:+ELLIPSIS\n    Failure(ZeroDivisionError(...))\n    ```\n\n-   Avoid sentinel values:\n\n    ```python\n    >>> def mean_1(xs):\n    ...     try:\n    ...         return sum(xs) / len(xs)\n    ...     except ZeroDivisionError as e:\n    ...         return float(\"inf\")  # What does it mean?\n    >>> mean_1([])\n    inf\n    ```\n\n    vs.\n\n    ```python\n    >>> def mean_2(xs):\n    ...     return sum(xs) / len(xs)\n    >>> Try(mean_2, [])  # doctest:+ELLIPSIS\n    Failure(ZeroDivisionError(...))\n    >>> Try(mean_2, [\"foo\", \"bar\"])  # doctest:+ELLIPSIS\n    Failure(TypeError(...))\n    ```\n\n-   Follow the happy path:\n\n    ```python\n    >>> def inc(x): return x + 1\n    >>> def inv(x): return 1. / x\n\n    >>> Success(1).map(inc).map(inv)\n    Success(0.5)\n\n    >>> Failure(Exception(\"e\")).map(inc).map(inv)  # doctest:+ELLIPSIS\n    Failure(Exception(...))\n\n    >>> Success(-1).map(inc).map(inv)  # doctest:+ELLIPSIS\n    Failure(ZeroDivisionError(...))\n    ```\n\n-   Recover:\n\n    ```python\n    >>> def get(url):\n    ...     if \"mirror\" in url:\n    ...         raise IOError(\"No address associated with hostname\")\n    ...     return url\n    >>> mirrors = [\"http://mirror1.example.com\", \"http://example.com\"]\n    >>> Try(get, mirrors[0]).recover(lambda _: get(mirrors[1]))\n    Success('http://example.com')\n    ```\n\n-   Let them fail:\n\n    ```python\n    >>> from operator import getitem\n    >>> Try(getitem, [], 0)  # doctest:+ELLIPSIS\n    Failure(IndexError(...))\n    >>> Try_.set_unhandled([IndexError])\n    >>> Try(getitem, [], 0)\n    Traceback (most recent call last):\n        ...\n    IndexError: list index out of range\n    ```\n\n-   Make things (relatively) simple:\n\n    ```python\n    >>> import math\n    >>> xs = [1.0, 0.0, \"-1\", -3, 2, 1 + 2j]\n    >>> sqrts = [Try(math.sqrt, x) for x in xs]\n    >>> [x.get() for x in sqrts if x.isSuccess]\n    [1.0, 0.0, 1.4142135623730951]\n    >>> def get_etype(e):\n    ...     return Try(lambda x: type(x).__name__, e)\n    >>> [x.recoverWith(get_etype).get() for x in sqrts if x.isFailure]\n    ['TypeError', 'ValueError', 'TypeError']\n    ```\n\n-   Inline exception handling:\n\n    ```python\n    >>> from tryingsnake.curried import Try\n    >>> map(Try(str.split), [\"foo bar\", None])  # doctest:+ELLIPSIS\n    <map at ...>\n    ```\n\n-   Decorate your functions:\n\n    ```python\n    >>> from tryingsnake.curried import Try as try_\n    >>> @try_\n    ... def scale_imag(x):\n    ...     return complex(x.real, x.imag * 2)\n    >>> [scale_imag(x) for x in [1 + 2j, \"3\", 42 + 0j]]\n    [Success((1+4j)), Failure(AttributeError(\"'str' object has no attribute 'real'\")), Success((42+0j))]\n    ```\n\n-   Wrap generator objects:\n\n    ```python\n    >>> def get_nth(xs, i):\n    ...     yield xs[i]\n    >>> xs = [1, 3, 5, 7]\n    >>> Try(get_nth(xs, 3))\n    Success(7)\n    >>> Try(get_nth(xs, 11))\n    Failure(IndexError('list index out of range'))\n    >>> def f():\n    ...     divisor = 1\n    ...     while True:\n    ...         divisor_ = yield 1 / divisor\n    ...         divisor = divisor_ if divisor_ is not None else 1\n    >>> g = f()\n    >>> next(g)  # Should be primed\n    1.0\n    >>> Try(g, 2)\n    Success(0.5)\n    >>> Try(g, 0)\n    Failure(ZeroDivisionError('division by zero'))\n    ```\n\nInstallation\n============\n\nThis package is available on PYPI:\n\n    pip install tryingsnake\n\nand conda-forge:\n\n    conda install -c conda-forge tryingsnake\n\n\nDependencies\n=======\n\n`tryingsnake` supports Python 3.6 or later and\nrequires no external dependencies.\n\nLicense\n=======\n\nMIT, See\n[LICENSE](https://github.com/zero323/tryingsnake/blob/master/LICENSE)\n\nFAQ\n===\n\n-   Q: Is this project production-ready?\n-   A: Sure, for some definition of production-ready. It is a toy project.\n    It has decent test coverage, stable API, and in general seems to do\n    what is expected to do. But it is not widely used, and the API design\n    and overall idea are rather unpythonic.\n-   Q: Why to use mixedCase method names instead of lowercase\n    recommended by PEP8?\n-   A: Mostly to make switching between Python and Scala code as\n    painless as possible.\n-   Q: What is the runtime cost?    \n    A: As of [0088286](https://github.com/zero323/tryingsnake/commit/00882862d655cd3d77ea730449f498883ed584d5) (releases 0.3 and 0.4 suffered from\n    severe performance regression caused by using `typing.Generic` as a base of\n    try. See [#18](https://github.com/zero323/tryingsnake/issues/18) for details)\n    rough numbers for simple tasks look as follows:\n\n    ```\n    Python 3.7.5 (default, Oct 27 2019, 15:43:29)\n    Type 'copyright', 'credits' or 'license' for more information\n    IPython 7.11.0 -- An enhanced Interactive Python. Type '?' for help.\n    In [1]: def identity(x): return x\n    In [2]: from tryingsnake import Try\n    In [3]: %timeit for i in range(1_000_000): identity(i)\n    59.8 ms \u00b1 683 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 10 loops each)\n\n    In [4]: %timeit for i in range(1_000_000): Try(identity, i)\n    408 ms \u00b1 4.14 ms per loop (mean \u00b1 std. dev. of 7 runs, 1 loop each)\n    ```\n\n    and execution time is dominated by the initializer:\n\n    ```\n    In [5]: import cProfile\n    In [6]: cProfile.run(\"for i in range(1_000_000): Try(identity, i)\")\n             4000003 function calls in 0.961 seconds\n\n       Ordered by: standard name\n\n       ncalls  tottime  percall  cumtime  percall filename:lineno(function)\n      1000000    0.078    0.000    0.078    0.000 <ipython-input-1-abafd771428d>:1(identity)\n            1    0.263    0.263    0.961    0.961 <string>:1(<module>)\n      1000000    0.094    0.000    0.094    0.000 __init__.py:234(__init__)\n      1000000    0.480    0.000    0.698    0.000 __init__.py:352(Try)\n      1000000    0.046    0.000    0.046    0.000 {built-in method builtins.callable}\n            1    0.000    0.000    0.961    0.961 {built-in method builtins.exec}\n            1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}\n    ```\n\n    This is quite a lot for simple functions so you should probably avoid it in such cases, where raw performance is important. It is still possible to amortize the cost in such cases, for example using composition:\n\n    ```python\n    from toolz.functoolz import compose\n    from tryingsnake import Try\n\n    Try(compose(str.split, str.lower, str.strip), \" Foo BAR FooBar \")\n    ```\n\n    Memory overhead (as measured by [memory-profiler](https://pypi.org/project/memory-profiler/)) looks as follows:\n\n    ```\n    Line #    Mem usage    Increment   Line Contents\n    ================================================\n     6     37.9 MiB     37.9 MiB   @profile\n     7                             def f():\n     8    155.5 MiB      0.8 MiB       [Try(identity, i) for i in range(1_000_000)]\n    ```\n\n    compared to:\n\n    ```\n    Line #    Mem usage    Increment   Line Contents\n    ================================================\n     6     37.9 MiB     37.9 MiB   @profile\n     7                             def f():\n     8     77.4 MiB      1.0 MiB       [identity(i) for i in range(1_000_000)]\n     ```", "description_content_type": "text/markdown", "docs_url": "https://pythonhosted.org/tryingsnake/", "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/zero323/tryingsnake", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "tryingsnake", "package_url": "https://pypi.org/project/tryingsnake/", "platform": "", "project_url": "https://pypi.org/project/tryingsnake/", "project_urls": {"Homepage": "https://github.com/zero323/tryingsnake"}, "release_url": "https://pypi.org/project/tryingsnake/0.5.0/", "requires_dist": null, "requires_python": "", "summary": "Exception handling, the functional way.", "version": "0.5.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>TryingSnake</h1>\n<p><a href=\"https://travis-ci.org/zero323/tryingsnake\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/31bd1c36efb2fc4513cda04bba1069c28560f728/68747470733a2f2f7472617669732d63692e6f72672f7a65726f3332332f747279696e67736e616b652e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://coveralls.io/github/zero323/tryingsnake?branch=master\" rel=\"nofollow\"><img alt=\"Coverage Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/431d838f6f35eb0c57935debdc6f6a727e6fe0ef/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f7a65726f3332332f747279696e67736e616b652f62616467652e7376673f6272616e63683d6d617374657226736572766963653d676974687562\"></a>\n<a href=\"https://codeclimate.com/github/zero323/tryingsnake\" rel=\"nofollow\"><img alt=\"Code Climate\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c52a4058f7b423ad678bccacdd32796ab9feef93/68747470733a2f2f636f6465636c696d6174652e636f6d2f6769746875622f7a65726f3332332f747279696e67736e616b652f6261646765732f6770612e737667\"></a>\n<a href=\"https://badge.fury.io/py/tryingsnake\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fa40b60b040a0779783a4f740a2d25cac4511ecb/68747470733a2f2f62616467652e667572792e696f2f70792f747279696e67736e616b652e737667\"></a>\n<a href=\"https://anaconda.org/conda-forge/tryingsnake\" rel=\"nofollow\"><img alt=\"Conda Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/843ce09d17681aff9dc32df00ae9f1e5765b597d/68747470733a2f2f696d672e736869656c64732e696f2f636f6e64612f766e2f636f6e64612d666f7267652f747279696e67736e616b652e737667\"></a>\n<a href=\"https://github.com/zero323/tryingsnake/blob/master/LICENSE\" rel=\"nofollow\"><img alt=\"License MIT\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0498b4d887c78933db51ec5e88c02384df561210/68747470733a2f2f696d672e736869656c64732e696f2f707970692f6c2f747279696e67736e616b652e737667\"></a></p>\n<p>A simple, <code>Try</code> implementation inspired by\n<a href=\"https://www.scala-lang.org/api/current/scala/util/Try.html\" rel=\"nofollow\">scala.util.Try</a></p>\n<h1>Examples</h1>\n<ul>\n<li>\n<p>Wrap functions with arguments:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">tryingsnake</span> <span class=\"kn\">import</span> <span class=\"n\">Try</span><span class=\"p\">,</span> <span class=\"n\">Try_</span><span class=\"p\">,</span> <span class=\"n\">Success</span><span class=\"p\">,</span> <span class=\"n\">Failure</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">operator</span> <span class=\"kn\">import</span> <span class=\"n\">add</span><span class=\"p\">,</span> <span class=\"n\">truediv</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Try</span><span class=\"p\">(</span><span class=\"n\">add</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">Success</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Try</span><span class=\"p\">(</span><span class=\"n\">truediv</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest:+ELLIPSIS</span>\n<span class=\"n\">Failure</span><span class=\"p\">(</span><span class=\"ne\">ZeroDivisionError</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">))</span>\n</pre>\n</li>\n<li>\n<p>Avoid sentinel values:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">def</span> <span class=\"nf\">mean_1</span><span class=\"p\">(</span><span class=\"n\">xs</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"k\">try</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>         <span class=\"k\">return</span> <span class=\"nb\">sum</span><span class=\"p\">(</span><span class=\"n\">xs</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">xs</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>     <span class=\"k\">except</span> <span class=\"ne\">ZeroDivisionError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>         <span class=\"k\">return</span> <span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"s2\">\"inf\"</span><span class=\"p\">)</span>  <span class=\"c1\"># What does it mean?</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">mean_1</span><span class=\"p\">([])</span>\n<span class=\"n\">inf</span>\n</pre>\n<p>vs.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">def</span> <span class=\"nf\">mean_2</span><span class=\"p\">(</span><span class=\"n\">xs</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"k\">return</span> <span class=\"nb\">sum</span><span class=\"p\">(</span><span class=\"n\">xs</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">xs</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Try</span><span class=\"p\">(</span><span class=\"n\">mean_2</span><span class=\"p\">,</span> <span class=\"p\">[])</span>  <span class=\"c1\"># doctest:+ELLIPSIS</span>\n<span class=\"n\">Failure</span><span class=\"p\">(</span><span class=\"ne\">ZeroDivisionError</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">))</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Try</span><span class=\"p\">(</span><span class=\"n\">mean_2</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s2\">\"foo\"</span><span class=\"p\">,</span> <span class=\"s2\">\"bar\"</span><span class=\"p\">])</span>  <span class=\"c1\"># doctest:+ELLIPSIS</span>\n<span class=\"n\">Failure</span><span class=\"p\">(</span><span class=\"ne\">TypeError</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">))</span>\n</pre>\n</li>\n<li>\n<p>Follow the happy path:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">def</span> <span class=\"nf\">inc</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">):</span> <span class=\"k\">return</span> <span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">def</span> <span class=\"nf\">inv</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">):</span> <span class=\"k\">return</span> <span class=\"mf\">1.</span> <span class=\"o\">/</span> <span class=\"n\">x</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Success</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"n\">inc</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"n\">inv</span><span class=\"p\">)</span>\n<span class=\"n\">Success</span><span class=\"p\">(</span><span class=\"mf\">0.5</span><span class=\"p\">)</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Failure</span><span class=\"p\">(</span><span class=\"ne\">Exception</span><span class=\"p\">(</span><span class=\"s2\">\"e\"</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"n\">inc</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"n\">inv</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest:+ELLIPSIS</span>\n<span class=\"n\">Failure</span><span class=\"p\">(</span><span class=\"ne\">Exception</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">))</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Success</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"n\">inc</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"n\">inv</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest:+ELLIPSIS</span>\n<span class=\"n\">Failure</span><span class=\"p\">(</span><span class=\"ne\">ZeroDivisionError</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">))</span>\n</pre>\n</li>\n<li>\n<p>Recover:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">def</span> <span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"k\">if</span> <span class=\"s2\">\"mirror\"</span> <span class=\"ow\">in</span> <span class=\"n\">url</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>         <span class=\"k\">raise</span> <span class=\"ne\">IOError</span><span class=\"p\">(</span><span class=\"s2\">\"No address associated with hostname\"</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>     <span class=\"k\">return</span> <span class=\"n\">url</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">mirrors</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">\"http://mirror1.example.com\"</span><span class=\"p\">,</span> <span class=\"s2\">\"http://example.com\"</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Try</span><span class=\"p\">(</span><span class=\"n\">get</span><span class=\"p\">,</span> <span class=\"n\">mirrors</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">recover</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">_</span><span class=\"p\">:</span> <span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">mirrors</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]))</span>\n<span class=\"n\">Success</span><span class=\"p\">(</span><span class=\"s1\">'http://example.com'</span><span class=\"p\">)</span>\n</pre>\n</li>\n<li>\n<p>Let them fail:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">operator</span> <span class=\"kn\">import</span> <span class=\"n\">getitem</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Try</span><span class=\"p\">(</span><span class=\"n\">getitem</span><span class=\"p\">,</span> <span class=\"p\">[],</span> <span class=\"mi\">0</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest:+ELLIPSIS</span>\n<span class=\"n\">Failure</span><span class=\"p\">(</span><span class=\"ne\">IndexError</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">))</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Try_</span><span class=\"o\">.</span><span class=\"n\">set_unhandled</span><span class=\"p\">([</span><span class=\"ne\">IndexError</span><span class=\"p\">])</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Try</span><span class=\"p\">(</span><span class=\"n\">getitem</span><span class=\"p\">,</span> <span class=\"p\">[],</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n<span class=\"ne\">IndexError</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"n\">index</span> <span class=\"n\">out</span> <span class=\"n\">of</span> <span class=\"nb\">range</span>\n</pre>\n</li>\n<li>\n<p>Make things (relatively) simple:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">math</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">xs</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"s2\">\"-1\"</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span> <span class=\"o\">+</span> <span class=\"mi\">2</span><span class=\"n\">j</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">sqrts</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">Try</span><span class=\"p\">(</span><span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">sqrt</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">xs</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"p\">[</span><span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">sqrts</span> <span class=\"k\">if</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">isSuccess</span><span class=\"p\">]</span>\n<span class=\"p\">[</span><span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mf\">1.4142135623730951</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">def</span> <span class=\"nf\">get_etype</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"k\">return</span> <span class=\"n\">Try</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"vm\">__name__</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"p\">[</span><span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">recoverWith</span><span class=\"p\">(</span><span class=\"n\">get_etype</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">sqrts</span> <span class=\"k\">if</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">isFailure</span><span class=\"p\">]</span>\n<span class=\"p\">[</span><span class=\"s1\">'TypeError'</span><span class=\"p\">,</span> <span class=\"s1\">'ValueError'</span><span class=\"p\">,</span> <span class=\"s1\">'TypeError'</span><span class=\"p\">]</span>\n</pre>\n</li>\n<li>\n<p>Inline exception handling:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">tryingsnake.curried</span> <span class=\"kn\">import</span> <span class=\"n\">Try</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"n\">Try</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">),</span> <span class=\"p\">[</span><span class=\"s2\">\"foo bar\"</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">])</span>  <span class=\"c1\"># doctest:+ELLIPSIS</span>\n<span class=\"o\">&lt;</span><span class=\"nb\">map</span> <span class=\"n\">at</span> <span class=\"o\">...&gt;</span>\n</pre>\n</li>\n<li>\n<p>Decorate your functions:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">tryingsnake.curried</span> <span class=\"kn\">import</span> <span class=\"n\">Try</span> <span class=\"k\">as</span> <span class=\"n\">try_</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nd\">@try_</span>\n<span class=\"o\">...</span> <span class=\"k\">def</span> <span class=\"nf\">scale_imag</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"k\">return</span> <span class=\"nb\">complex</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">real</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">imag</span> <span class=\"o\">*</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"p\">[</span><span class=\"n\">scale_imag</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"mi\">1</span> <span class=\"o\">+</span> <span class=\"mi\">2</span><span class=\"n\">j</span><span class=\"p\">,</span> <span class=\"s2\">\"3\"</span><span class=\"p\">,</span> <span class=\"mi\">42</span> <span class=\"o\">+</span> <span class=\"mi\">0</span><span class=\"n\">j</span><span class=\"p\">]]</span>\n<span class=\"p\">[</span><span class=\"n\">Success</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"o\">+</span><span class=\"mi\">4</span><span class=\"n\">j</span><span class=\"p\">)),</span> <span class=\"n\">Failure</span><span class=\"p\">(</span><span class=\"ne\">AttributeError</span><span class=\"p\">(</span><span class=\"s2\">\"'str' object has no attribute 'real'\"</span><span class=\"p\">)),</span> <span class=\"n\">Success</span><span class=\"p\">((</span><span class=\"mi\">42</span><span class=\"o\">+</span><span class=\"mi\">0</span><span class=\"n\">j</span><span class=\"p\">))]</span>\n</pre>\n</li>\n<li>\n<p>Wrap generator objects:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">def</span> <span class=\"nf\">get_nth</span><span class=\"p\">(</span><span class=\"n\">xs</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"k\">yield</span> <span class=\"n\">xs</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">xs</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Try</span><span class=\"p\">(</span><span class=\"n\">get_nth</span><span class=\"p\">(</span><span class=\"n\">xs</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"n\">Success</span><span class=\"p\">(</span><span class=\"mi\">7</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Try</span><span class=\"p\">(</span><span class=\"n\">get_nth</span><span class=\"p\">(</span><span class=\"n\">xs</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">))</span>\n<span class=\"n\">Failure</span><span class=\"p\">(</span><span class=\"ne\">IndexError</span><span class=\"p\">(</span><span class=\"s1\">'list index out of range'</span><span class=\"p\">))</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">def</span> <span class=\"nf\">f</span><span class=\"p\">():</span>\n<span class=\"o\">...</span>     <span class=\"n\">divisor</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n<span class=\"o\">...</span>     <span class=\"k\">while</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>         <span class=\"n\">divisor_</span> <span class=\"o\">=</span> <span class=\"k\">yield</span> <span class=\"mi\">1</span> <span class=\"o\">/</span> <span class=\"n\">divisor</span>\n<span class=\"o\">...</span>         <span class=\"n\">divisor</span> <span class=\"o\">=</span> <span class=\"n\">divisor_</span> <span class=\"k\">if</span> <span class=\"n\">divisor_</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span> <span class=\"k\">else</span> <span class=\"mi\">1</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">g</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">next</span><span class=\"p\">(</span><span class=\"n\">g</span><span class=\"p\">)</span>  <span class=\"c1\"># Should be primed</span>\n<span class=\"mf\">1.0</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Try</span><span class=\"p\">(</span><span class=\"n\">g</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">Success</span><span class=\"p\">(</span><span class=\"mf\">0.5</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Try</span><span class=\"p\">(</span><span class=\"n\">g</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">Failure</span><span class=\"p\">(</span><span class=\"ne\">ZeroDivisionError</span><span class=\"p\">(</span><span class=\"s1\">'division by zero'</span><span class=\"p\">))</span>\n</pre>\n</li>\n</ul>\n<h1>Installation</h1>\n<p>This package is available on PYPI:</p>\n<pre><code>pip install tryingsnake\n</code></pre>\n<p>and conda-forge:</p>\n<pre><code>conda install -c conda-forge tryingsnake\n</code></pre>\n<h1>Dependencies</h1>\n<p><code>tryingsnake</code> supports Python 3.6 or later and\nrequires no external dependencies.</p>\n<h1>License</h1>\n<p>MIT, See\n<a href=\"https://github.com/zero323/tryingsnake/blob/master/LICENSE\" rel=\"nofollow\">LICENSE</a></p>\n<h1>FAQ</h1>\n<ul>\n<li>\n<p>Q: Is this project production-ready?</p>\n</li>\n<li>\n<p>A: Sure, for some definition of production-ready. It is a toy project.\nIt has decent test coverage, stable API, and in general seems to do\nwhat is expected to do. But it is not widely used, and the API design\nand overall idea are rather unpythonic.</p>\n</li>\n<li>\n<p>Q: Why to use mixedCase method names instead of lowercase\nrecommended by PEP8?</p>\n</li>\n<li>\n<p>A: Mostly to make switching between Python and Scala code as\npainless as possible.</p>\n</li>\n<li>\n<p>Q: What is the runtime cost?<br>\nA: As of <a href=\"https://github.com/zero323/tryingsnake/commit/00882862d655cd3d77ea730449f498883ed584d5\" rel=\"nofollow\">0088286</a> (releases 0.3 and 0.4 suffered from\nsevere performance regression caused by using <code>typing.Generic</code> as a base of\ntry. See <a href=\"https://github.com/zero323/tryingsnake/issues/18\" rel=\"nofollow\">#18</a> for details)\nrough numbers for simple tasks look as follows:</p>\n<pre><code>Python 3.7.5 (default, Oct 27 2019, 15:43:29)\nType 'copyright', 'credits' or 'license' for more information\nIPython 7.11.0 -- An enhanced Interactive Python. Type '?' for help.\nIn [1]: def identity(x): return x\nIn [2]: from tryingsnake import Try\nIn [3]: %timeit for i in range(1_000_000): identity(i)\n59.8 ms \u00b1 683 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 10 loops each)\n\nIn [4]: %timeit for i in range(1_000_000): Try(identity, i)\n408 ms \u00b1 4.14 ms per loop (mean \u00b1 std. dev. of 7 runs, 1 loop each)\n</code></pre>\n<p>and execution time is dominated by the initializer:</p>\n<pre><code>In [5]: import cProfile\nIn [6]: cProfile.run(\"for i in range(1_000_000): Try(identity, i)\")\n         4000003 function calls in 0.961 seconds\n\n   Ordered by: standard name\n\n   ncalls  tottime  percall  cumtime  percall filename:lineno(function)\n  1000000    0.078    0.000    0.078    0.000 &lt;ipython-input-1-abafd771428d&gt;:1(identity)\n        1    0.263    0.263    0.961    0.961 &lt;string&gt;:1(&lt;module&gt;)\n  1000000    0.094    0.000    0.094    0.000 __init__.py:234(__init__)\n  1000000    0.480    0.000    0.698    0.000 __init__.py:352(Try)\n  1000000    0.046    0.000    0.046    0.000 {built-in method builtins.callable}\n        1    0.000    0.000    0.961    0.961 {built-in method builtins.exec}\n        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}\n</code></pre>\n<p>This is quite a lot for simple functions so you should probably avoid it in such cases, where raw performance is important. It is still possible to amortize the cost in such cases, for example using composition:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">toolz.functoolz</span> <span class=\"kn\">import</span> <span class=\"n\">compose</span>\n<span class=\"kn\">from</span> <span class=\"nn\">tryingsnake</span> <span class=\"kn\">import</span> <span class=\"n\">Try</span>\n\n<span class=\"n\">Try</span><span class=\"p\">(</span><span class=\"n\">compose</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"o\">.</span><span class=\"n\">strip</span><span class=\"p\">),</span> <span class=\"s2\">\" Foo BAR FooBar \"</span><span class=\"p\">)</span>\n</pre>\n<p>Memory overhead (as measured by <a href=\"https://pypi.org/project/memory-profiler/\" rel=\"nofollow\">memory-profiler</a>) looks as follows:</p>\n<pre><code>Line #    Mem usage    Increment   Line Contents\n================================================\n 6     37.9 MiB     37.9 MiB   @profile\n 7                             def f():\n 8    155.5 MiB      0.8 MiB       [Try(identity, i) for i in range(1_000_000)]\n</code></pre>\n<p>compared to:</p>\n<pre><code>Line #    Mem usage    Increment   Line Contents\n================================================\n 6     37.9 MiB     37.9 MiB   @profile\n 7                             def f():\n 8     77.4 MiB      1.0 MiB       [identity(i) for i in range(1_000_000)]\n</code></pre>\n</li>\n</ul>\n\n          </div>"}, "last_serial": 6369616, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "9c7a6cbcd9ea8b8886f03c8c3cd3f6fa", "sha256": "b2b926d9ff0c98c6dafc75acd8473b90c003f6fa3b0afa365e507ce9e208f706"}, "downloads": -1, "filename": "tryingsnake-0.1.0.tar.gz", "has_sig": false, "md5_digest": "9c7a6cbcd9ea8b8886f03c8c3cd3f6fa", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3109, "upload_time": "2015-10-30T11:36:34", "upload_time_iso_8601": "2015-10-30T11:36:34.953245Z", "url": "https://files.pythonhosted.org/packages/ea/a5/37496293b5a78aebfc44db8574fda4459f7883c716ba6c06294bf40fd83c/tryingsnake-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "fa82dd18c03a8169d49f677cc7237ab3", "sha256": "00493e224d48563be12662cb5ee7d14b0ae9c31a1c73a64390f286ccb6231fb0"}, "downloads": -1, "filename": "tryingsnake-0.2.0.tar.gz", "has_sig": false, "md5_digest": "fa82dd18c03a8169d49f677cc7237ab3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3614, "upload_time": "2015-10-31T17:15:07", "upload_time_iso_8601": "2015-10-31T17:15:07.833816Z", "url": "https://files.pythonhosted.org/packages/c4/b6/5120f1723d76b89f5dafebb3e5e0525689e604534489935dae64b5ca0f44/tryingsnake-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "7f319eb36976785abf2372b962fbc017", "sha256": "12856bda186df351a32bbdd61c7c4d0f24e7f493f82ac3481fc5042efca0e777"}, "downloads": -1, "filename": "tryingsnake-0.2.1.tar.gz", "has_sig": true, "md5_digest": "7f319eb36976785abf2372b962fbc017", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4901, "upload_time": "2015-10-31T18:15:49", "upload_time_iso_8601": "2015-10-31T18:15:49.572359Z", "url": "https://files.pythonhosted.org/packages/fb/c8/bb5c573cb7e130fadbd1905d0b64bb36c24404ce954a98b30f3e07c8e227/tryingsnake-0.2.1.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "980b37f5628be345143d5074efe37a52", "sha256": "17d9eb778bd5e200abd16388fb87c2356f096a2e9f2ca37f1db763324bf79d11"}, "downloads": -1, "filename": "tryingsnake-0.2.2.tar.gz", "has_sig": true, "md5_digest": "980b37f5628be345143d5074efe37a52", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4908, "upload_time": "2015-10-31T18:36:14", "upload_time_iso_8601": "2015-10-31T18:36:14.326339Z", "url": "https://files.pythonhosted.org/packages/d0/8d/ce9d5b25a97fd0cf0e789179e203aa991ea4fbc8e0ee40ac12126f9ef153/tryingsnake-0.2.2.tar.gz", "yanked": false}], "0.2.3": [{"comment_text": "", "digests": {"md5": "ab372ecce77ec313d82b754c0c2be0fa", "sha256": "a31b02248ed36d5841463c3f0482c2e200db4ce204a1ec0d08ce2a126e07958c"}, "downloads": -1, "filename": "tryingsnake-0.2.3.tar.gz", "has_sig": true, "md5_digest": "ab372ecce77ec313d82b754c0c2be0fa", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5041, "upload_time": "2015-11-01T02:44:50", "upload_time_iso_8601": "2015-11-01T02:44:50.829963Z", "url": "https://files.pythonhosted.org/packages/49/2d/72fc6be8d8c208cb9202804a94b63878ecf76fd15165ee8f6b17c7270a57/tryingsnake-0.2.3.tar.gz", "yanked": false}], "0.2.4": [{"comment_text": "", "digests": {"md5": "87f87ea3dc85503c067d5ecb239c1cb5", "sha256": "ba522b924efc1173159ab789e4451c279c70e475e3a611e043f8cab3a4198abc"}, "downloads": -1, "filename": "tryingsnake-0.2.4.tar.gz", "has_sig": true, "md5_digest": "87f87ea3dc85503c067d5ecb239c1cb5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5009, "upload_time": "2015-11-01T13:03:15", "upload_time_iso_8601": "2015-11-01T13:03:15.858079Z", "url": "https://files.pythonhosted.org/packages/c5/4e/fa07c0f5aa06a62abd35d86193a366d6f2b338870b5f0bd68541a4611c9a/tryingsnake-0.2.4.tar.gz", "yanked": false}], "0.2.5": [{"comment_text": "", "digests": {"md5": "53fffe10d97b1753a504d67aad9a7088", "sha256": "8c7c918e61b2c8310b5e7d91b08ee2100ea8bfc398e1845fa64664be5ae82ebd"}, "downloads": -1, "filename": "tryingsnake-0.2.5.tar.gz", "has_sig": true, "md5_digest": "53fffe10d97b1753a504d67aad9a7088", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5028, "upload_time": "2015-11-01T23:39:50", "upload_time_iso_8601": "2015-11-01T23:39:50.944124Z", "url": "https://files.pythonhosted.org/packages/51/ac/ddd24edc18d29f0f9f33947be426f6af6c802d166d736d28138f81d04773/tryingsnake-0.2.5.tar.gz", "yanked": false}], "0.2.6": [{"comment_text": "", "digests": {"md5": "38c08be8dad835b2326df0ae3080bde0", "sha256": "f60d3009e1ae0511f1f34998d10bf68a443a5d0d2cfb13c1e9c8ebd8c6d070c1"}, "downloads": -1, "filename": "tryingsnake-0.2.6.tar.gz", "has_sig": true, "md5_digest": "38c08be8dad835b2326df0ae3080bde0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5070, "upload_time": "2016-03-07T04:06:10", "upload_time_iso_8601": "2016-03-07T04:06:10.542241Z", "url": "https://files.pythonhosted.org/packages/32/ee/32778a245a5d46b7a605b9bedad0235e9efdefc1cc733b75847865ad9ff0/tryingsnake-0.2.6.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "49681b0652939cee713d2cb291d24431", "sha256": "d002ff30e6728b0b9ec22da1d79472db17d3d60c13c14265f400f706b116e77f"}, "downloads": -1, "filename": "tryingsnake-0.3.1.tar.gz", "has_sig": false, "md5_digest": "49681b0652939cee713d2cb291d24431", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6657, "upload_time": "2019-09-23T23:29:21", "upload_time_iso_8601": "2019-09-23T23:29:21.494775Z", "url": "https://files.pythonhosted.org/packages/94/4b/77f05ef5951746067fdf6988c2f91011c696f15c2032153c16189a9a4f9f/tryingsnake-0.3.1.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "5fb27e79f4b1fc5f60bbb9e59831ee02", "sha256": "573255bb90fa1f45ec358775abc0e366e0fff1a2fe27f899a8f15a01c20a63ef"}, "downloads": -1, "filename": "tryingsnake-0.4.0.tar.gz", "has_sig": false, "md5_digest": "5fb27e79f4b1fc5f60bbb9e59831ee02", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7591, "upload_time": "2019-12-27T21:03:12", "upload_time_iso_8601": "2019-12-27T21:03:12.743941Z", "url": "https://files.pythonhosted.org/packages/d0/17/1f440f11e647a4817ff3eb1e8cf049aebbb8866f9d202169464155f11851/tryingsnake-0.4.0.tar.gz", "yanked": false}], "0.4.0.dev0": [{"comment_text": "", "digests": {"md5": "c5f792e4d7b2a6c337a61b10e83da33a", "sha256": "c563d6118fbc513ecefe85cbf58dc08f4e5bee9fbe6a35878130a8040b2746b0"}, "downloads": -1, "filename": "tryingsnake-0.4.0.dev0.tar.gz", "has_sig": false, "md5_digest": "c5f792e4d7b2a6c337a61b10e83da33a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6895, "upload_time": "2019-12-26T23:16:11", "upload_time_iso_8601": "2019-12-26T23:16:11.402996Z", "url": "https://files.pythonhosted.org/packages/a8/15/4a62091f4d171050f54b90aad6cb9aa4d630d50d22241f0c27ba4c712005/tryingsnake-0.4.0.dev0.tar.gz", "yanked": false}], "0.4.0.dev1": [{"comment_text": "", "digests": {"md5": "985d765b297698165d2a44fa07526d0b", "sha256": "997c0997471c86f78149c02bf4024cbf82a9559472548ae393d9207a6f678405"}, "downloads": -1, "filename": "tryingsnake-0.4.0.dev1.tar.gz", "has_sig": false, "md5_digest": "985d765b297698165d2a44fa07526d0b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7596, "upload_time": "2019-12-27T11:55:49", "upload_time_iso_8601": "2019-12-27T11:55:49.021081Z", "url": "https://files.pythonhosted.org/packages/d4/2f/bdf3d65b2330aa367d22e083e76962d5a75ac09bc311c71312c4b530d765/tryingsnake-0.4.0.dev1.tar.gz", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "793bacca3e583879441ae95e865799e7", "sha256": "82618732359dc307188dc9de74ef417d2a7c82c689d604def193af6a3204f16f"}, "downloads": -1, "filename": "tryingsnake-0.5.0.tar.gz", "has_sig": false, "md5_digest": "793bacca3e583879441ae95e865799e7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12399, "upload_time": "2019-12-28T21:38:49", "upload_time_iso_8601": "2019-12-28T21:38:49.867858Z", "url": "https://files.pythonhosted.org/packages/8f/5b/b8cb613c213f36871c051d8a8d52b4727afa3531b4db764e2ebbd0ec5a5f/tryingsnake-0.5.0.tar.gz", "yanked": false}], "0.5.0.dev0": [{"comment_text": "", "digests": {"md5": "f09b93e71aa526a9ed736c38c8cf34ae", "sha256": "56332da3e465c869397a3275d581e5af176d76ec353c477c94d5f8b8c2c67c57"}, "downloads": -1, "filename": "tryingsnake-0.5.0.dev0.tar.gz", "has_sig": false, "md5_digest": "f09b93e71aa526a9ed736c38c8cf34ae", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12182, "upload_time": "2019-12-28T21:34:15", "upload_time_iso_8601": "2019-12-28T21:34:15.558844Z", "url": "https://files.pythonhosted.org/packages/34/93/a28c6a528fccf894f6ad8a4ca056889c7e2ee1bb5a17d4666d13b5acc3de/tryingsnake-0.5.0.dev0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "793bacca3e583879441ae95e865799e7", "sha256": "82618732359dc307188dc9de74ef417d2a7c82c689d604def193af6a3204f16f"}, "downloads": -1, "filename": "tryingsnake-0.5.0.tar.gz", "has_sig": false, "md5_digest": "793bacca3e583879441ae95e865799e7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12399, "upload_time": "2019-12-28T21:38:49", "upload_time_iso_8601": "2019-12-28T21:38:49.867858Z", "url": "https://files.pythonhosted.org/packages/8f/5b/b8cb613c213f36871c051d8a8d52b4727afa3531b4db764e2ebbd0ec5a5f/tryingsnake-0.5.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:46:29 2020"}