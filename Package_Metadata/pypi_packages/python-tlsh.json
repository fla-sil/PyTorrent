{"info": {"author": "Chun Cheng", "author_email": "", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python :: 3.6"], "description": "# TLSH - C++ extension for Python\n\n[TLSH (Trend Micro Locality Sensitive Hash)](https://github.com/trendmicro/tlsh) is a fuzzy matching library.\nGiven a byte stream with a minimum length of 50 bytes\nTLSH generates a hash value which can be used for similarity comparisons.\nSimilar objects will have similar hash values which allows for\nthe detection of similar objects by comparing their hash values.  Note that\nthe byte stream should have a sufficient amount of complexity.  For example,\na byte stream of identical bytes will not generate a hash value.\n\n## Usage\n\n```python\nimport tlsh\n\ntlsh.hash(data)\n```\n\n\nNote that in default mode the data must contain at least 50 bytes to generate a hash value and that\nit must have a certain amount of randomness.\nIf you use the \"conservative\" option, then the data must contain at least 256 characters.\nFor example, `tlsh.hash(str(os.urandom(256)))`, should always generate a hash.  \nTo get the hash value of a file, try `tlsh.hash(open(file, 'rb').read())`.\n\n```python\ntlsh.diff(h1, h2)\ntlsh.diffxlen(h1, h2)\n```\n\nThe `diffxlen` function removes the file length component of the tlsh header from\nthe comparison.  If a file with a repeating pattern is compared to a file\nwith only a single instance of the pattern, then the difference will be increased\nif the file lenght is included.  But by using the `diffxlen` function, the file\nlength will be removed from consideration.\n\n## Example\n```python\nimport tlsh\n\nh1 = tlsh.hash(data)\nh2 = tlsh.hash(similar_data)\nscore = tlsh.diff(h1, h2)\n\nh3 = tlsh.Tlsh()\nwith open('file', 'rb') as f:\n    for buf in iter(lambda: f.read(512), b''):\n        h3.update(buf)\n    h3.final()\nassert h3.diff(h) == 0\nscore = h3.diff(h1)\n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/trendmicro/tlsh", "keywords": "", "license": "Apache or BSD", "maintainer": "", "maintainer_email": "", "name": "python-tlsh", "package_url": "https://pypi.org/project/python-tlsh/", "platform": "", "project_url": "https://pypi.org/project/python-tlsh/", "project_urls": {"Homepage": "https://github.com/trendmicro/tlsh"}, "release_url": "https://pypi.org/project/python-tlsh/3.17.0/", "requires_dist": null, "requires_python": "", "summary": "TLSH (C++ Python extension)", "version": "3.17.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>TLSH - C++ extension for Python</h1>\n<p><a href=\"https://github.com/trendmicro/tlsh\" rel=\"nofollow\">TLSH (Trend Micro Locality Sensitive Hash)</a> is a fuzzy matching library.\nGiven a byte stream with a minimum length of 50 bytes\nTLSH generates a hash value which can be used for similarity comparisons.\nSimilar objects will have similar hash values which allows for\nthe detection of similar objects by comparing their hash values.  Note that\nthe byte stream should have a sufficient amount of complexity.  For example,\na byte stream of identical bytes will not generate a hash value.</p>\n<h2>Usage</h2>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">tlsh</span>\n\n<span class=\"n\">tlsh</span><span class=\"o\">.</span><span class=\"n\">hash</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n</pre>\n<p>Note that in default mode the data must contain at least 50 bytes to generate a hash value and that\nit must have a certain amount of randomness.\nIf you use the \"conservative\" option, then the data must contain at least 256 characters.\nFor example, <code>tlsh.hash(str(os.urandom(256)))</code>, should always generate a hash.<br>\nTo get the hash value of a file, try <code>tlsh.hash(open(file, 'rb').read())</code>.</p>\n<pre><span class=\"n\">tlsh</span><span class=\"o\">.</span><span class=\"n\">diff</span><span class=\"p\">(</span><span class=\"n\">h1</span><span class=\"p\">,</span> <span class=\"n\">h2</span><span class=\"p\">)</span>\n<span class=\"n\">tlsh</span><span class=\"o\">.</span><span class=\"n\">diffxlen</span><span class=\"p\">(</span><span class=\"n\">h1</span><span class=\"p\">,</span> <span class=\"n\">h2</span><span class=\"p\">)</span>\n</pre>\n<p>The <code>diffxlen</code> function removes the file length component of the tlsh header from\nthe comparison.  If a file with a repeating pattern is compared to a file\nwith only a single instance of the pattern, then the difference will be increased\nif the file lenght is included.  But by using the <code>diffxlen</code> function, the file\nlength will be removed from consideration.</p>\n<h2>Example</h2>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">tlsh</span>\n\n<span class=\"n\">h1</span> <span class=\"o\">=</span> <span class=\"n\">tlsh</span><span class=\"o\">.</span><span class=\"n\">hash</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n<span class=\"n\">h2</span> <span class=\"o\">=</span> <span class=\"n\">tlsh</span><span class=\"o\">.</span><span class=\"n\">hash</span><span class=\"p\">(</span><span class=\"n\">similar_data</span><span class=\"p\">)</span>\n<span class=\"n\">score</span> <span class=\"o\">=</span> <span class=\"n\">tlsh</span><span class=\"o\">.</span><span class=\"n\">diff</span><span class=\"p\">(</span><span class=\"n\">h1</span><span class=\"p\">,</span> <span class=\"n\">h2</span><span class=\"p\">)</span>\n\n<span class=\"n\">h3</span> <span class=\"o\">=</span> <span class=\"n\">tlsh</span><span class=\"o\">.</span><span class=\"n\">Tlsh</span><span class=\"p\">()</span>\n<span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'file'</span><span class=\"p\">,</span> <span class=\"s1\">'rb'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n    <span class=\"k\">for</span> <span class=\"n\">buf</span> <span class=\"ow\">in</span> <span class=\"nb\">iter</span><span class=\"p\">(</span><span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"mi\">512</span><span class=\"p\">),</span> <span class=\"sa\">b</span><span class=\"s1\">''</span><span class=\"p\">):</span>\n        <span class=\"n\">h3</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">buf</span><span class=\"p\">)</span>\n    <span class=\"n\">h3</span><span class=\"o\">.</span><span class=\"n\">final</span><span class=\"p\">()</span>\n<span class=\"k\">assert</span> <span class=\"n\">h3</span><span class=\"o\">.</span><span class=\"n\">diff</span><span class=\"p\">(</span><span class=\"n\">h</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span>\n<span class=\"n\">score</span> <span class=\"o\">=</span> <span class=\"n\">h3</span><span class=\"o\">.</span><span class=\"n\">diff</span><span class=\"p\">(</span><span class=\"n\">h1</span><span class=\"p\">)</span>\n</pre>\n\n          </div>"}, "last_serial": 6233734, "releases": {"3.17.0": [{"comment_text": "", "digests": {"md5": "a252c75f14f71981a8540481680480c9", "sha256": "daeab966d63fd87a5f3d341301b22952f28d72a06a4c71936123c4bb7fa5ae5a"}, "downloads": -1, "filename": "python-tlsh-3.17.0.tar.gz", "has_sig": false, "md5_digest": "a252c75f14f71981a8540481680480c9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 36246, "upload_time": "2019-12-03T08:43:10", "upload_time_iso_8601": "2019-12-03T08:43:10.474049Z", "url": "https://files.pythonhosted.org/packages/80/ee/c2adc0b259c23472b355065d3ee34785bb186264fbcde88cce3f0754ce48/python-tlsh-3.17.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a252c75f14f71981a8540481680480c9", "sha256": "daeab966d63fd87a5f3d341301b22952f28d72a06a4c71936123c4bb7fa5ae5a"}, "downloads": -1, "filename": "python-tlsh-3.17.0.tar.gz", "has_sig": false, "md5_digest": "a252c75f14f71981a8540481680480c9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 36246, "upload_time": "2019-12-03T08:43:10", "upload_time_iso_8601": "2019-12-03T08:43:10.474049Z", "url": "https://files.pythonhosted.org/packages/80/ee/c2adc0b259c23472b355065d3ee34785bb186264fbcde88cce3f0754ce48/python-tlsh-3.17.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:14:57 2020"}