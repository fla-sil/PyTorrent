{"info": {"author": "Curtis Jiang", "author_email": "", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "Intended Audience :: End Users/Desktop", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3 :: Only", "Topic :: Software Development :: Libraries :: Application Frameworks"], "description": "# Lazy Evaluation\n![build](https://travis-ci.org/jqqqqqqqqqq/python-lazy-async.svg?branch=master)\n![shields](https://img.shields.io/badge/python-3.7%2B-blue.svg?style=flat-square)\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg?style=flat-square)](https://opensource.org/licenses/MIT)\n\nLazy evaluate function/class method/class property. The target will be evaluated once and only once on first call\n, and concurrent calls will get the result immediately once the target is ready and gets the same exception when the target\nraises some exception.\n\n## Features\n\n- Implemented both sync and async version.\n\n- Lock free!!!! (thanks to asyncio.Future and concurrent.futures.Future, all the operations are atomic)\n\n- Assign will update cache immediately.\n\n- Async property must use sync setter and deleter for now, due to the limitation that python does not support await\nbefore assignment or `del`. `await setattr(foo, value)` is one possible workaround, but it introduces more obfuscation.\n\n## Installation\n\n```bash\npip install lazy-async\n```\n\n## Example\n\n```python\nimport asyncio\nfrom lazy_async import lazy, lazy_property, lazy_async, lazy_property_async\nfrom threading import Thread\nimport time\n\n\nclass ExampleClass:\n    def __init__(self):\n        self.sync_called = 0\n        self.async_called = 0\n        self.prop = 'nothing'\n\n    @lazy\n    def func1(self):\n        time.sleep(5)\n        self.sync_called += 1\n        return 'something'\n\n    @lazy_async\n    async def func2(self):\n        await asyncio.sleep(5)\n        self.async_called += 1\n        return 'something'\n\n    @lazy\n    def func3(self):\n        time.sleep(5)\n        raise ValueError('SomeException')\n\n    @lazy_async\n    async def func4(self):\n        await asyncio.sleep(5)\n        raise ValueError('SomeException')\n\n    @lazy_property\n    def func5(self):\n        time.sleep(5)\n        self.sync_called += 1\n        return self.prop\n\n    @func5.setter\n    def func5(self, value):\n        self.prop = value\n\n    @lazy_property_async\n    async def func6(self):\n        await asyncio.sleep(5)\n        self.async_called += 1\n        return self.prop\n\n    @func6.setter\n    def func6(self, value):\n        self.prop = value\n\ndef test_something_sync():\n    test_class = ExampleClass()\n    test1 = dict()\n\n    def start1():\n        test1[1] = test_class.func1()\n\n    def start2():\n        time.sleep(3)\n        test1[2] = test_class.func1()\n\n    def start3():\n        time.sleep(10)\n        test1[3] = test_class.func1()\n\n    Thread(target=start1).start()\n    Thread(target=start2).start()\n    Thread(target=start3).start()\n    time.sleep(1)\n    assert test1 == {}\n    time.sleep(3)\n    assert test1 == {}\n    time.sleep(2)\n    assert test1 == {1: 'something', 2: 'something'}\n    time.sleep(5)\n    assert test1 == {1: 'something', 2: 'something', 3: 'something'}\n\n\ndef test_something_async():\n    test2 = dict()\n    loop = asyncio.new_event_loop()\n    asyncio.set_event_loop(loop)\n    test_class = ExampleClass()\n\n    async def start1():\n        test2[1] = await test_class.func2()\n\n    async def start2():\n        await asyncio.sleep(3)\n        test2[2] = await test_class.func2()\n\n    async def start3():\n        await asyncio.sleep(10)\n        test2[3] = await test_class.func2()\n\n    async def assert1():\n        await asyncio.sleep(1)\n        assert test2 == {}\n        await asyncio.sleep(3)\n        assert test2 == {}\n        await asyncio.sleep(2)\n        assert test2 == {1: 'something', 2: 'something'}\n        await asyncio.sleep(5)\n        assert test2 == {1: 'something', 2: 'something', 3: 'something'}\n\n    loop.run_until_complete(asyncio.gather(start1(), start2(), start3(), assert1()))\n```\n\nSee unittest for more examples.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/jqqqqqqqqqq/", "keywords": "Lazy Evaluation,Decorator", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "lazy-async", "package_url": "https://pypi.org/project/lazy-async/", "platform": "", "project_url": "https://pypi.org/project/lazy-async/", "project_urls": {"Homepage": "https://github.com/jqqqqqqqqqq/"}, "release_url": "https://pypi.org/project/lazy-async/0.7/", "requires_dist": null, "requires_python": ">=3.7", "summary": "Lazy evaluation for function/method/property getter", "version": "0.7", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Lazy Evaluation</h1>\n<p><img alt=\"build\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/96714316f5291cf03e4f067c8e3943fbe45c24bb/68747470733a2f2f7472617669732d63692e6f72672f6a717171717171717171712f707974686f6e2d6c617a792d6173796e632e7376673f6272616e63683d6d6173746572\">\n<img alt=\"shields\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/73d30717f0a64a8ba5fb469abb609a7477323ac4/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f707974686f6e2d332e372532422d626c75652e7376673f7374796c653d666c61742d737175617265\">\n<a href=\"https://opensource.org/licenses/MIT\" rel=\"nofollow\"><img alt=\"License: MIT\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0ad268a0941cc3d473c881205ac205aed86a95c5/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d4d49542d79656c6c6f772e7376673f7374796c653d666c61742d737175617265\"></a></p>\n<p>Lazy evaluate function/class method/class property. The target will be evaluated once and only once on first call\n, and concurrent calls will get the result immediately once the target is ready and gets the same exception when the target\nraises some exception.</p>\n<h2>Features</h2>\n<ul>\n<li>\n<p>Implemented both sync and async version.</p>\n</li>\n<li>\n<p>Lock free!!!! (thanks to asyncio.Future and concurrent.futures.Future, all the operations are atomic)</p>\n</li>\n<li>\n<p>Assign will update cache immediately.</p>\n</li>\n<li>\n<p>Async property must use sync setter and deleter for now, due to the limitation that python does not support await\nbefore assignment or <code>del</code>. <code>await setattr(foo, value)</code> is one possible workaround, but it introduces more obfuscation.</p>\n</li>\n</ul>\n<h2>Installation</h2>\n<pre>pip install lazy-async\n</pre>\n<h2>Example</h2>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n<span class=\"kn\">from</span> <span class=\"nn\">lazy_async</span> <span class=\"kn\">import</span> <span class=\"n\">lazy</span><span class=\"p\">,</span> <span class=\"n\">lazy_property</span><span class=\"p\">,</span> <span class=\"n\">lazy_async</span><span class=\"p\">,</span> <span class=\"n\">lazy_property_async</span>\n<span class=\"kn\">from</span> <span class=\"nn\">threading</span> <span class=\"kn\">import</span> <span class=\"n\">Thread</span>\n<span class=\"kn\">import</span> <span class=\"nn\">time</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">ExampleClass</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">sync_called</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">async_called</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">prop</span> <span class=\"o\">=</span> <span class=\"s1\">'nothing'</span>\n\n    <span class=\"nd\">@lazy</span>\n    <span class=\"k\">def</span> <span class=\"nf\">func1</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">sync_called</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n        <span class=\"k\">return</span> <span class=\"s1\">'something'</span>\n\n    <span class=\"nd\">@lazy_async</span>\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">func2</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">async_called</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n        <span class=\"k\">return</span> <span class=\"s1\">'something'</span>\n\n    <span class=\"nd\">@lazy</span>\n    <span class=\"k\">def</span> <span class=\"nf\">func3</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s1\">'SomeException'</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@lazy_async</span>\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">func4</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s1\">'SomeException'</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@lazy_property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">func5</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">sync_called</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">prop</span>\n\n    <span class=\"nd\">@func5</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">func5</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">prop</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n\n    <span class=\"nd\">@lazy_property_async</span>\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">func6</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">async_called</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">prop</span>\n\n    <span class=\"nd\">@func6</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">func6</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">prop</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">test_something_sync</span><span class=\"p\">():</span>\n    <span class=\"n\">test_class</span> <span class=\"o\">=</span> <span class=\"n\">ExampleClass</span><span class=\"p\">()</span>\n    <span class=\"n\">test1</span> <span class=\"o\">=</span> <span class=\"nb\">dict</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">start1</span><span class=\"p\">():</span>\n        <span class=\"n\">test1</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">test_class</span><span class=\"o\">.</span><span class=\"n\">func1</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">start2</span><span class=\"p\">():</span>\n        <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n        <span class=\"n\">test1</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">test_class</span><span class=\"o\">.</span><span class=\"n\">func1</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">start3</span><span class=\"p\">():</span>\n        <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n        <span class=\"n\">test1</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">test_class</span><span class=\"o\">.</span><span class=\"n\">func1</span><span class=\"p\">()</span>\n\n    <span class=\"n\">Thread</span><span class=\"p\">(</span><span class=\"n\">target</span><span class=\"o\">=</span><span class=\"n\">start1</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n    <span class=\"n\">Thread</span><span class=\"p\">(</span><span class=\"n\">target</span><span class=\"o\">=</span><span class=\"n\">start2</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n    <span class=\"n\">Thread</span><span class=\"p\">(</span><span class=\"n\">target</span><span class=\"o\">=</span><span class=\"n\">start3</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n    <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"k\">assert</span> <span class=\"n\">test1</span> <span class=\"o\">==</span> <span class=\"p\">{}</span>\n    <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n    <span class=\"k\">assert</span> <span class=\"n\">test1</span> <span class=\"o\">==</span> <span class=\"p\">{}</span>\n    <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n    <span class=\"k\">assert</span> <span class=\"n\">test1</span> <span class=\"o\">==</span> <span class=\"p\">{</span><span class=\"mi\">1</span><span class=\"p\">:</span> <span class=\"s1\">'something'</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span> <span class=\"s1\">'something'</span><span class=\"p\">}</span>\n    <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n    <span class=\"k\">assert</span> <span class=\"n\">test1</span> <span class=\"o\">==</span> <span class=\"p\">{</span><span class=\"mi\">1</span><span class=\"p\">:</span> <span class=\"s1\">'something'</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span> <span class=\"s1\">'something'</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">:</span> <span class=\"s1\">'something'</span><span class=\"p\">}</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">test_something_async</span><span class=\"p\">():</span>\n    <span class=\"n\">test2</span> <span class=\"o\">=</span> <span class=\"nb\">dict</span><span class=\"p\">()</span>\n    <span class=\"n\">loop</span> <span class=\"o\">=</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">new_event_loop</span><span class=\"p\">()</span>\n    <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">set_event_loop</span><span class=\"p\">(</span><span class=\"n\">loop</span><span class=\"p\">)</span>\n    <span class=\"n\">test_class</span> <span class=\"o\">=</span> <span class=\"n\">ExampleClass</span><span class=\"p\">()</span>\n\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">start1</span><span class=\"p\">():</span>\n        <span class=\"n\">test2</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">test_class</span><span class=\"o\">.</span><span class=\"n\">func2</span><span class=\"p\">()</span>\n\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">start2</span><span class=\"p\">():</span>\n        <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n        <span class=\"n\">test2</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">test_class</span><span class=\"o\">.</span><span class=\"n\">func2</span><span class=\"p\">()</span>\n\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">start3</span><span class=\"p\">():</span>\n        <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n        <span class=\"n\">test2</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">test_class</span><span class=\"o\">.</span><span class=\"n\">func2</span><span class=\"p\">()</span>\n\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">assert1</span><span class=\"p\">():</span>\n        <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"k\">assert</span> <span class=\"n\">test2</span> <span class=\"o\">==</span> <span class=\"p\">{}</span>\n        <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n        <span class=\"k\">assert</span> <span class=\"n\">test2</span> <span class=\"o\">==</span> <span class=\"p\">{}</span>\n        <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n        <span class=\"k\">assert</span> <span class=\"n\">test2</span> <span class=\"o\">==</span> <span class=\"p\">{</span><span class=\"mi\">1</span><span class=\"p\">:</span> <span class=\"s1\">'something'</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span> <span class=\"s1\">'something'</span><span class=\"p\">}</span>\n        <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n        <span class=\"k\">assert</span> <span class=\"n\">test2</span> <span class=\"o\">==</span> <span class=\"p\">{</span><span class=\"mi\">1</span><span class=\"p\">:</span> <span class=\"s1\">'something'</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span> <span class=\"s1\">'something'</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">:</span> <span class=\"s1\">'something'</span><span class=\"p\">}</span>\n\n    <span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span><span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">gather</span><span class=\"p\">(</span><span class=\"n\">start1</span><span class=\"p\">(),</span> <span class=\"n\">start2</span><span class=\"p\">(),</span> <span class=\"n\">start3</span><span class=\"p\">(),</span> <span class=\"n\">assert1</span><span class=\"p\">()))</span>\n</pre>\n<p>See unittest for more examples.</p>\n\n          </div>"}, "last_serial": 6862399, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "0f28c5f60947c7c6d19ab283b632c1dc", "sha256": "e9e7a4ff96e6870bf254e508ea56d5ffa3d3ac0ed39388149a04128b0eb6a714"}, "downloads": -1, "filename": "lazy-async-0.1.tar.gz", "has_sig": false, "md5_digest": "0f28c5f60947c7c6d19ab283b632c1dc", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 2323, "upload_time": "2020-03-22T03:24:00", "upload_time_iso_8601": "2020-03-22T03:24:00.233506Z", "url": "https://files.pythonhosted.org/packages/9a/40/6539d03070b6712ec0c1e0bd6e23884abb883b2716b1022fa19094eca22d/lazy-async-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "ca6219764659aebac0880d86f35b1017", "sha256": "848f75ee1f4956c872d83841a9f91352e535491de8396ed468534f56de0a9278"}, "downloads": -1, "filename": "lazy-async-0.2.tar.gz", "has_sig": false, "md5_digest": "ca6219764659aebac0880d86f35b1017", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 2318, "upload_time": "2020-03-22T03:30:41", "upload_time_iso_8601": "2020-03-22T03:30:41.158791Z", "url": "https://files.pythonhosted.org/packages/8e/de/0f2cb929592c3d55a361a48cd576e9a8b8d2dee4b6db648ed00dc5194073/lazy-async-0.2.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "a93385e90c6c723a91a3a39e0a0ffd81", "sha256": "ed8a2249d9cdcbae9e13401a5154f6b3e997ca70bc75e34052d2b96f75570ea1"}, "downloads": -1, "filename": "lazy-async-0.3.tar.gz", "has_sig": false, "md5_digest": "a93385e90c6c723a91a3a39e0a0ffd81", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 2977, "upload_time": "2020-03-22T04:39:34", "upload_time_iso_8601": "2020-03-22T04:39:34.592556Z", "url": "https://files.pythonhosted.org/packages/95/f3/1b94afa476099a1cd367f71942c69ac30f7c417245594016900fa74e1284/lazy-async-0.3.tar.gz", "yanked": false}], "0.5": [{"comment_text": "", "digests": {"md5": "676638df83705bb45f98dde559376e31", "sha256": "9b1428ddedd7612fe103591563d903f362d180140eb9dd1a23b29e39527e30cb"}, "downloads": -1, "filename": "lazy-async-0.5.tar.gz", "has_sig": false, "md5_digest": "676638df83705bb45f98dde559376e31", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 3401, "upload_time": "2020-03-22T05:31:57", "upload_time_iso_8601": "2020-03-22T05:31:57.451155Z", "url": "https://files.pythonhosted.org/packages/19/65/602b4d2c1f1a8338dc449946a3d34b8b7f57d149d17b541a42739a14e451/lazy-async-0.5.tar.gz", "yanked": false}], "0.6": [{"comment_text": "", "digests": {"md5": "a74f51f1d9bf5824bfcd71fad316c19e", "sha256": "4e8f5569be4778b63b1276479b5abd73da582f306812797c099ac5f47466aaa4"}, "downloads": -1, "filename": "lazy-async-0.6.tar.gz", "has_sig": false, "md5_digest": "a74f51f1d9bf5824bfcd71fad316c19e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 3590, "upload_time": "2020-03-22T23:45:05", "upload_time_iso_8601": "2020-03-22T23:45:05.136375Z", "url": "https://files.pythonhosted.org/packages/cf/0a/e7f0d609948007ff819cd088e25b4f85f1039d1a08b1516e6281fbfef935/lazy-async-0.6.tar.gz", "yanked": false}], "0.7": [{"comment_text": "", "digests": {"md5": "e0d76b3037e8e367958f3e8d0cbf6fa5", "sha256": "6a52d0079d97922ac9289062bfb61ca67fbe22dddce0b2e7757c94ff2052b545"}, "downloads": -1, "filename": "lazy-async-0.7.tar.gz", "has_sig": false, "md5_digest": "e0d76b3037e8e367958f3e8d0cbf6fa5", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 3618, "upload_time": "2020-03-23T00:02:09", "upload_time_iso_8601": "2020-03-23T00:02:09.732118Z", "url": "https://files.pythonhosted.org/packages/69/a8/c1c973a9c9cdbf9c45db8aa0e440b175381255309d239ce1013d7913a667/lazy-async-0.7.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e0d76b3037e8e367958f3e8d0cbf6fa5", "sha256": "6a52d0079d97922ac9289062bfb61ca67fbe22dddce0b2e7757c94ff2052b545"}, "downloads": -1, "filename": "lazy-async-0.7.tar.gz", "has_sig": false, "md5_digest": "e0d76b3037e8e367958f3e8d0cbf6fa5", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 3618, "upload_time": "2020-03-23T00:02:09", "upload_time_iso_8601": "2020-03-23T00:02:09.732118Z", "url": "https://files.pythonhosted.org/packages/69/a8/c1c973a9c9cdbf9c45db8aa0e440b175381255309d239ce1013d7913a667/lazy-async-0.7.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:47:38 2020"}