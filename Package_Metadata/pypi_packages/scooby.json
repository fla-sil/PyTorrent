{"info": {"author": "Dieter Werthm\u00fcller & Bane Sullivan", "author_email": "info@pyvista.org", "bugtrack_url": null, "classifiers": ["Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python"], "description": "# Scooby\n\n![Build Status](https://github.com/banesullivan/scooby/workflows/Python%20package/badge.svg)\n[![PyPI Status](https://img.shields.io/pypi/v/scooby.svg?logo=python&logoColor=white)](https://pypi.org/project/scooby/)\n[![Conda Status](https://img.shields.io/conda/vn/conda-forge/scooby.svg)](https://anaconda.org/conda-forge/scooby)\n\nA Great Dane turned Python environment detective\n\nThis is a lightweight toolset to easily report your Python environment's\npackage versions and hardware resources.\n\n\nInstall from [PyPI](https://pypi.org/project/scooby/)\n\n```bash\npip install scooby\n```\n\nor from [conda-forge](https://anaconda.org/conda-forge/scooby/)\n\n```bash\nconda install -c conda-forge scooby\n```\n\n![Jupyter Notebook Formatting](https://github.com/banesullivan/scooby/raw/master/assets/jupyter.png)\n\nScooby has HTML formatting for Jupyter notebooks and rich text formatting for\njust about every other environment. We designed this module to be lightweight\nsuch that it could easily be added as a dependency to Python projects for\nenvironment reporting when debugging. Simply add `scooby` to your dependencies\nand implement a function to have `scooby` report on the aspects of the\nenvironment you care most about.\n\nIf `scooby` is unable to detect aspects of an environment that you'd like to\nknow, please share this with us as a feature requests or pull requests.\n\nThe scooby reporting is derived from the versioning-scripts created by [Dieter\nWerthm\u00fcller](https://github.com/prisae) for\n[empymod](https://empymod.github.io), [emg3d](https://empymod.github.io), and\nthe [SimPEG](https://github.com/simpeg/) framework. It was heavily inspired by\n`ipynbtools.py` from [qutip](https://github.com/qutip) and\n[`watermark.py`](https://github.com/rasbt/watermark). This package has been\naltered to create a lightweight implementation so that it can easily be used as\nan environment reporting tool in any Python library with minimal impact.\n\n## Usage\n\n### Generating Reports\n\nReports are rendered as html-tables in Jupyter notebooks as shown in the\nscreenshot above, and otherwise as plain text lists. If you do not output the\nreport object either at the end of a notebook cell or it is generated\nsomewhere in a vanilla Python script, you may have to print the report object:\n`print(scooby.Report())`, but note that this will only output the plain text\nrepresentation of the script.\n\n```py\n>>> import scooby\n>>> scooby.Report()\n```\n```\n--------------------------------------------------------------------------------\n  Date: Wed Feb 12 15:35:43 2020 W. Europe Standard Time\n\n                OS : Windows\n            CPU(s) : 16\n           Machine : AMD64\n      Architecture : 64bit\n               RAM : 31.9 GB\n       Environment : IPython\n\n  Python 3.7.6 | packaged by conda-forge | (default, Jan  7 2020, 21:48:41)\n  [MSC v.1916 64 bit (AMD64)]\n\n             numpy : 1.18.1\n             scipy : 1.3.1\n           IPython : 7.12.0\n        matplotlib : 3.0.3\n            scooby : 0.5.0\n\n  Intel(R) Math Kernel Library Version 2019.0.4 Product Build 20190411 for\n  Intel(R) 64 architecture applications\n--------------------------------------------------------------------------------\n```\n\nOn top of the default (optional) packages you can provide additional packages,\neither as strings or give already imported packages:\n```py\n>>> import pyvista\n>>> import scooby\n>>> scooby.Report(additional=[pyvista, 'vtk', 'no_version', 'does_not_exist'])\n```\n```\n--------------------------------------------------------------------------------\n  Date: Wed Feb 12 16:15:15 2020 W. Europe Standard Time\n\n                OS : Windows\n            CPU(s) : 16\n           Machine : AMD64\n      Architecture : 64bit\n               RAM : 31.9 GB\n       Environment : IPython\n\n  Python 3.7.6 | packaged by conda-forge | (default, Jan  7 2020, 21:48:41)\n  [MSC v.1916 64 bit (AMD64)]\n\n           pyvista : 0.23.1\n               vtk : 8.1.2\n        no_version : Version unknown\n    does_not_exist : Could not import\n             numpy : 1.18.1\n             scipy : 1.3.1\n           IPython : 7.12.0\n        matplotlib : 3.0.3\n            scooby : 0.5.0\n\n  Intel(R) Math Kernel Library Version 2019.0.4 Product Build 20190411 for\n  Intel(R) 64 architecture applications\n--------------------------------------------------------------------------------\n```\nAs can be seen, scooby reports if a package could not be imported or if the\nversion of a package could not be determined.\n\nOther useful parameters are\n\n- `ncol`: number of columns in the html-table;\n- `text_width`: text width of the plain-text version;\n- `sort`: list is sorted alphabetically if True.\n\nBesides `additional` there are two more lists, `core` and `optional`, which\ncan be used to provide package names. However, they are mostly useful for\npackage maintainers wanting to use scooby to create their reporting system.\nSee below:\n\n\n### Implementing scooby in your project\n\nYou can generate easily your own Report-instance using scooby:\n\n```py\nclass Report(scooby.Report):\n    def __init__(self, additional=None, ncol=3, text_width=80, sort=False):\n        \"\"\"Initiate a scooby.Report instance.\"\"\"\n\n        # Mandatory packages.\n        core = ['yourpackage', 'your_core_packages', 'e.g.', 'numpy', 'scooby']\n\n        # Optional packages.\n        optional = ['your_optional_packages', 'e.g.', 'matplotlib']\n\n        scooby.Report.__init__(self, additional=additional, core=core,\n                               optional=optional, ncol=ncol,\n                               text_width=text_width, sort=sort)\n```\n\nSo a user can use your Report:\n```py\n>>> import your_package\n>>> your_package.Report()\n```\n\nThe packages on the `core`-list are the mandatory ones for your project, while\nthe `optional`-list can be used for optional packages. Keep the\n`additional`-list free to allow your users to add packages to the list.\n\n### Implementing as a soft dependency\n\nIf you would like to implement `scooby`, but are hesitant to add another\ndependency to your package, here an easy way how you can use `scooby` as a soft\ndependency. Instead of `import scooby` use the following snippet:\n\n```py\n# Make scooby a soft dependency:\ntry:\n    from scooby import Report as ScoobyReport\nexcept ImportError:\n    class ScoobyReport:\n        def __init__(self, additional, core, optional, ncol, text_width, sort):\n            print('\\n  *ERROR*: `Report` requires `scooby`.'\n                  '\\n           Install it via `pip install scooby` or')\n                  '\\n           `conda install -c conda-forge scooby`.\\n')\n```\nand then include your own `Report`-function as above,\n\n```py\nclass Report(scooby.Report):\n    def __init__(self, additional=None, ncol=3, text_width=80, sort=False):\n        \"\"\"Initiate a scooby.Report instance.\"\"\"\n\n        # Mandatory packages.\n        core = ['yourpackage', 'your_core_packages', 'e.g.', 'numpy', 'scooby']\n\n        # Optional packages.\n        optional = ['your_optional_packages', 'e.g.', 'matplotlib']\n\n        scooby.Report.__init__(self, additional=additional, core=core,\n                               optional=optional, ncol=ncol,\n                               text_width=text_width, sort=sort)\n\n```\nIf a user has `scooby` installed, all works as expected. If `scooby` is not\ninstalled, it will just print the following message:\n\n```py\n>>> import your_package\n>>> your_package.Report()\n\n  *ERROR*: `Report` requires `scooby`\n           Install it via `pip install scooby` or\n           `conda install -c conda-forge scooby`.\n```\n\n### Solving Mysteries\n\nAre you struggling with the mystery of whether or not code is being executed in\nIPython, Jupyter, or normal Python? Try using some of Scooby's investigative\nfunctions to solve these kinds of mysteries:\n\n```py\nimport scooby\n\nif scooby.in_ipykernel():\n    # Do Jupyter/IPyKernel stuff\nelif scooby.in_ipython():\n    # Do IPython stuff\nelse:\n    # Do normal, boring Python stuff\n```\n\n### How does scooby gets the version number?\n\nA couple of locations are checked, and we are happy to implement more if\nneeded, just open an issue!\n\nCurrently, it looks in the following places:\n- `__version__`;\n- `version`;\n- lookup `VERSION_ATTRIBUTES`;\n- lookup `VERSION_METHODS`.\n\n`VERSION_ATTRIBUTES` is a dictionary of attributes for known python packages\nwith a non-standard place for the version, e.g. `VERSION_ATTRIBUTES['vtk'] =\n'VTK_VERSION'`. You can add other known places via\n```py\nscooby.knowledge.VERSION_ATTRIBUTES['a_module'] = 'Awesom_version_location'\n```\n\nSimilarly, `VERSION_METHODS` is a dictionary for methods to find the version,\nand you can add similarly your methods which will define the version of a\npackage.\n\n### Using scooby to get version information.\n\nIf you are just interested in the version of a package then you can use scooby\nas well. A few examples:\n\n```py\n>>> import scooby, numpy\n>>> scooby.get_version(numpy)\n('numpy', '1.16.4')\n>>> scooby.get_version('no_version')\n('no_version', 'Version unknown')\n>>> scooby.get_version('does_not_exist')\n('does_not_exist', 'Could not import')\n```\nAgain, modules can be provided as already loaded ones or as string.\n\n\n### Tracking Imports in a Session\n\nScooby has the ability to track all imported modules during a Python session\nsuch that *any* imported, non-standard lib package that is used in the session\nis reported by a `TrackedReport`. For instance, start a session by importing\nScooby and enabling tracking with the `track_imports()` function.\nThen *all* subsequent packages that are imported during the session will be\ntracked and Scooby can report their versions.\nOnce you are ready to generate a report, instantiate a `TrackedReport` object.\n\nIn the following example, we import a constant from `scipy` which will report\nthe versions of `scipy` and `numpy` as both packages are loaded in the session\n(note that `numpy` is internally loaded by `scipy`).\n\n```py\n>>> import scooby\n>>> scooby.track_imports()\n\n>>> from scipy.constants import mu_0 # a float value\n\n>>> scooby.TrackedReport()\n```\n```\n--------------------------------------------------------------------------------\n  Date: Thu Apr 16 15:33:11 2020 MDT\n\n                OS : Linux\n            CPU(s) : 8\n           Machine : x86_64\n      Architecture : 64bit\n               RAM : 62.7 GB\n       Environment : IPython\n\n  Python 3.7.7 (default, Mar 10 2020, 15:16:38)  [GCC 7.5.0]\n\n            scooby : 0.5.2\n             numpy : 1.18.1\n             scipy : 1.4.1\n--------------------------------------------------------------------------------\n```\n\n\n## Optional Requirements\n\nThe following is a list of optional requirements and their purpose:\n\n- `psutil`: report total RAM in GB\n- `mkl-services`: report Intel(R) Math Kernel Library version", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/banesullivan/scooby", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "scooby", "package_url": "https://pypi.org/project/scooby/", "platform": "", "project_url": "https://pypi.org/project/scooby/", "project_urls": {"Homepage": "https://github.com/banesullivan/scooby"}, "release_url": "https://pypi.org/project/scooby/0.5.4/", "requires_dist": null, "requires_python": "", "summary": "A Great Dane turned Python environment detective", "version": "0.5.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Scooby</h1>\n<p><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/18c39ed5bd9e3d9d4ff5bfdaed96e8bea217557d/68747470733a2f2f6769746875622e636f6d2f62616e6573756c6c6976616e2f73636f6f62792f776f726b666c6f77732f507974686f6e2532307061636b6167652f62616467652e737667\">\n<a href=\"https://pypi.org/project/scooby/\" rel=\"nofollow\"><img alt=\"PyPI Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ce47d674f51f85c03cc9e89b46717dedda44f2a6/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f73636f6f62792e7376673f6c6f676f3d707974686f6e266c6f676f436f6c6f723d7768697465\"></a>\n<a href=\"https://anaconda.org/conda-forge/scooby\" rel=\"nofollow\"><img alt=\"Conda Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3bbf176c758a08deae570a95a6bc0abebe6d02ce/68747470733a2f2f696d672e736869656c64732e696f2f636f6e64612f766e2f636f6e64612d666f7267652f73636f6f62792e737667\"></a></p>\n<p>A Great Dane turned Python environment detective</p>\n<p>This is a lightweight toolset to easily report your Python environment's\npackage versions and hardware resources.</p>\n<p>Install from <a href=\"https://pypi.org/project/scooby/\" rel=\"nofollow\">PyPI</a></p>\n<pre>pip install scooby\n</pre>\n<p>or from <a href=\"https://anaconda.org/conda-forge/scooby/\" rel=\"nofollow\">conda-forge</a></p>\n<pre>conda install -c conda-forge scooby\n</pre>\n<p><img alt=\"Jupyter Notebook Formatting\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a5085a831085d6a7866f5d0b166470b32063bfca/68747470733a2f2f6769746875622e636f6d2f62616e6573756c6c6976616e2f73636f6f62792f7261772f6d61737465722f6173736574732f6a7570797465722e706e67\"></p>\n<p>Scooby has HTML formatting for Jupyter notebooks and rich text formatting for\njust about every other environment. We designed this module to be lightweight\nsuch that it could easily be added as a dependency to Python projects for\nenvironment reporting when debugging. Simply add <code>scooby</code> to your dependencies\nand implement a function to have <code>scooby</code> report on the aspects of the\nenvironment you care most about.</p>\n<p>If <code>scooby</code> is unable to detect aspects of an environment that you'd like to\nknow, please share this with us as a feature requests or pull requests.</p>\n<p>The scooby reporting is derived from the versioning-scripts created by <a href=\"https://github.com/prisae\" rel=\"nofollow\">Dieter\nWerthm\u00fcller</a> for\n<a href=\"https://empymod.github.io\" rel=\"nofollow\">empymod</a>, <a href=\"https://empymod.github.io\" rel=\"nofollow\">emg3d</a>, and\nthe <a href=\"https://github.com/simpeg/\" rel=\"nofollow\">SimPEG</a> framework. It was heavily inspired by\n<code>ipynbtools.py</code> from <a href=\"https://github.com/qutip\" rel=\"nofollow\">qutip</a> and\n<a href=\"https://github.com/rasbt/watermark\" rel=\"nofollow\"><code>watermark.py</code></a>. This package has been\naltered to create a lightweight implementation so that it can easily be used as\nan environment reporting tool in any Python library with minimal impact.</p>\n<h2>Usage</h2>\n<h3>Generating Reports</h3>\n<p>Reports are rendered as html-tables in Jupyter notebooks as shown in the\nscreenshot above, and otherwise as plain text lists. If you do not output the\nreport object either at the end of a notebook cell or it is generated\nsomewhere in a vanilla Python script, you may have to print the report object:\n<code>print(scooby.Report())</code>, but note that this will only output the plain text\nrepresentation of the script.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">scooby</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">scooby</span><span class=\"o\">.</span><span class=\"n\">Report</span><span class=\"p\">()</span>\n</pre>\n<pre><code>--------------------------------------------------------------------------------\n  Date: Wed Feb 12 15:35:43 2020 W. Europe Standard Time\n\n                OS : Windows\n            CPU(s) : 16\n           Machine : AMD64\n      Architecture : 64bit\n               RAM : 31.9 GB\n       Environment : IPython\n\n  Python 3.7.6 | packaged by conda-forge | (default, Jan  7 2020, 21:48:41)\n  [MSC v.1916 64 bit (AMD64)]\n\n             numpy : 1.18.1\n             scipy : 1.3.1\n           IPython : 7.12.0\n        matplotlib : 3.0.3\n            scooby : 0.5.0\n\n  Intel(R) Math Kernel Library Version 2019.0.4 Product Build 20190411 for\n  Intel(R) 64 architecture applications\n--------------------------------------------------------------------------------\n</code></pre>\n<p>On top of the default (optional) packages you can provide additional packages,\neither as strings or give already imported packages:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">pyvista</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">scooby</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">scooby</span><span class=\"o\">.</span><span class=\"n\">Report</span><span class=\"p\">(</span><span class=\"n\">additional</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">pyvista</span><span class=\"p\">,</span> <span class=\"s1\">'vtk'</span><span class=\"p\">,</span> <span class=\"s1\">'no_version'</span><span class=\"p\">,</span> <span class=\"s1\">'does_not_exist'</span><span class=\"p\">])</span>\n</pre>\n<pre><code>--------------------------------------------------------------------------------\n  Date: Wed Feb 12 16:15:15 2020 W. Europe Standard Time\n\n                OS : Windows\n            CPU(s) : 16\n           Machine : AMD64\n      Architecture : 64bit\n               RAM : 31.9 GB\n       Environment : IPython\n\n  Python 3.7.6 | packaged by conda-forge | (default, Jan  7 2020, 21:48:41)\n  [MSC v.1916 64 bit (AMD64)]\n\n           pyvista : 0.23.1\n               vtk : 8.1.2\n        no_version : Version unknown\n    does_not_exist : Could not import\n             numpy : 1.18.1\n             scipy : 1.3.1\n           IPython : 7.12.0\n        matplotlib : 3.0.3\n            scooby : 0.5.0\n\n  Intel(R) Math Kernel Library Version 2019.0.4 Product Build 20190411 for\n  Intel(R) 64 architecture applications\n--------------------------------------------------------------------------------\n</code></pre>\n<p>As can be seen, scooby reports if a package could not be imported or if the\nversion of a package could not be determined.</p>\n<p>Other useful parameters are</p>\n<ul>\n<li><code>ncol</code>: number of columns in the html-table;</li>\n<li><code>text_width</code>: text width of the plain-text version;</li>\n<li><code>sort</code>: list is sorted alphabetically if True.</li>\n</ul>\n<p>Besides <code>additional</code> there are two more lists, <code>core</code> and <code>optional</code>, which\ncan be used to provide package names. However, they are mostly useful for\npackage maintainers wanting to use scooby to create their reporting system.\nSee below:</p>\n<h3>Implementing scooby in your project</h3>\n<p>You can generate easily your own Report-instance using scooby:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">Report</span><span class=\"p\">(</span><span class=\"n\">scooby</span><span class=\"o\">.</span><span class=\"n\">Report</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">additional</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">ncol</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">text_width</span><span class=\"o\">=</span><span class=\"mi\">80</span><span class=\"p\">,</span> <span class=\"n\">sort</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Initiate a scooby.Report instance.\"\"\"</span>\n\n        <span class=\"c1\"># Mandatory packages.</span>\n        <span class=\"n\">core</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'yourpackage'</span><span class=\"p\">,</span> <span class=\"s1\">'your_core_packages'</span><span class=\"p\">,</span> <span class=\"s1\">'e.g.'</span><span class=\"p\">,</span> <span class=\"s1\">'numpy'</span><span class=\"p\">,</span> <span class=\"s1\">'scooby'</span><span class=\"p\">]</span>\n\n        <span class=\"c1\"># Optional packages.</span>\n        <span class=\"n\">optional</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'your_optional_packages'</span><span class=\"p\">,</span> <span class=\"s1\">'e.g.'</span><span class=\"p\">,</span> <span class=\"s1\">'matplotlib'</span><span class=\"p\">]</span>\n\n        <span class=\"n\">scooby</span><span class=\"o\">.</span><span class=\"n\">Report</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">additional</span><span class=\"o\">=</span><span class=\"n\">additional</span><span class=\"p\">,</span> <span class=\"n\">core</span><span class=\"o\">=</span><span class=\"n\">core</span><span class=\"p\">,</span>\n                               <span class=\"n\">optional</span><span class=\"o\">=</span><span class=\"n\">optional</span><span class=\"p\">,</span> <span class=\"n\">ncol</span><span class=\"o\">=</span><span class=\"n\">ncol</span><span class=\"p\">,</span>\n                               <span class=\"n\">text_width</span><span class=\"o\">=</span><span class=\"n\">text_width</span><span class=\"p\">,</span> <span class=\"n\">sort</span><span class=\"o\">=</span><span class=\"n\">sort</span><span class=\"p\">)</span>\n</pre>\n<p>So a user can use your Report:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">your_package</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">your_package</span><span class=\"o\">.</span><span class=\"n\">Report</span><span class=\"p\">()</span>\n</pre>\n<p>The packages on the <code>core</code>-list are the mandatory ones for your project, while\nthe <code>optional</code>-list can be used for optional packages. Keep the\n<code>additional</code>-list free to allow your users to add packages to the list.</p>\n<h3>Implementing as a soft dependency</h3>\n<p>If you would like to implement <code>scooby</code>, but are hesitant to add another\ndependency to your package, here an easy way how you can use <code>scooby</code> as a soft\ndependency. Instead of <code>import scooby</code> use the following snippet:</p>\n<pre><span class=\"c1\"># Make scooby a soft dependency:</span>\n<span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">scooby</span> <span class=\"kn\">import</span> <span class=\"n\">Report</span> <span class=\"k\">as</span> <span class=\"n\">ScoobyReport</span>\n<span class=\"k\">except</span> <span class=\"ne\">ImportError</span><span class=\"p\">:</span>\n    <span class=\"k\">class</span> <span class=\"nc\">ScoobyReport</span><span class=\"p\">:</span>\n        <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">additional</span><span class=\"p\">,</span> <span class=\"n\">core</span><span class=\"p\">,</span> <span class=\"n\">optional</span><span class=\"p\">,</span> <span class=\"n\">ncol</span><span class=\"p\">,</span> <span class=\"n\">text_width</span><span class=\"p\">,</span> <span class=\"n\">sort</span><span class=\"p\">):</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'</span><span class=\"se\">\\n</span><span class=\"s1\">  *ERROR*: `Report` requires `scooby`.'</span>\n                  <span class=\"s1\">'</span><span class=\"se\">\\n</span><span class=\"s1\">           Install it via `pip install scooby` or'</span><span class=\"p\">)</span>\n                  <span class=\"s1\">'</span><span class=\"se\">\\n</span><span class=\"s1\">           `conda install -c conda-forge scooby`.</span><span class=\"se\">\\n</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n</pre>\n<p>and then include your own <code>Report</code>-function as above,</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">Report</span><span class=\"p\">(</span><span class=\"n\">scooby</span><span class=\"o\">.</span><span class=\"n\">Report</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">additional</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">ncol</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">text_width</span><span class=\"o\">=</span><span class=\"mi\">80</span><span class=\"p\">,</span> <span class=\"n\">sort</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Initiate a scooby.Report instance.\"\"\"</span>\n\n        <span class=\"c1\"># Mandatory packages.</span>\n        <span class=\"n\">core</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'yourpackage'</span><span class=\"p\">,</span> <span class=\"s1\">'your_core_packages'</span><span class=\"p\">,</span> <span class=\"s1\">'e.g.'</span><span class=\"p\">,</span> <span class=\"s1\">'numpy'</span><span class=\"p\">,</span> <span class=\"s1\">'scooby'</span><span class=\"p\">]</span>\n\n        <span class=\"c1\"># Optional packages.</span>\n        <span class=\"n\">optional</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'your_optional_packages'</span><span class=\"p\">,</span> <span class=\"s1\">'e.g.'</span><span class=\"p\">,</span> <span class=\"s1\">'matplotlib'</span><span class=\"p\">]</span>\n\n        <span class=\"n\">scooby</span><span class=\"o\">.</span><span class=\"n\">Report</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">additional</span><span class=\"o\">=</span><span class=\"n\">additional</span><span class=\"p\">,</span> <span class=\"n\">core</span><span class=\"o\">=</span><span class=\"n\">core</span><span class=\"p\">,</span>\n                               <span class=\"n\">optional</span><span class=\"o\">=</span><span class=\"n\">optional</span><span class=\"p\">,</span> <span class=\"n\">ncol</span><span class=\"o\">=</span><span class=\"n\">ncol</span><span class=\"p\">,</span>\n                               <span class=\"n\">text_width</span><span class=\"o\">=</span><span class=\"n\">text_width</span><span class=\"p\">,</span> <span class=\"n\">sort</span><span class=\"o\">=</span><span class=\"n\">sort</span><span class=\"p\">)</span>\n</pre>\n<p>If a user has <code>scooby</code> installed, all works as expected. If <code>scooby</code> is not\ninstalled, it will just print the following message:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">your_package</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">your_package</span><span class=\"o\">.</span><span class=\"n\">Report</span><span class=\"p\">()</span>\n\n  <span class=\"o\">*</span><span class=\"n\">ERROR</span><span class=\"o\">*</span><span class=\"p\">:</span> <span class=\"err\">`</span><span class=\"n\">Report</span><span class=\"err\">`</span> <span class=\"n\">requires</span> <span class=\"err\">`</span><span class=\"n\">scooby</span><span class=\"err\">`</span>\n           <span class=\"n\">Install</span> <span class=\"n\">it</span> <span class=\"n\">via</span> <span class=\"err\">`</span><span class=\"n\">pip</span> <span class=\"n\">install</span> <span class=\"n\">scooby</span><span class=\"err\">`</span> <span class=\"ow\">or</span>\n           <span class=\"err\">`</span><span class=\"n\">conda</span> <span class=\"n\">install</span> <span class=\"o\">-</span><span class=\"n\">c</span> <span class=\"n\">conda</span><span class=\"o\">-</span><span class=\"n\">forge</span> <span class=\"n\">scooby</span><span class=\"err\">`</span><span class=\"o\">.</span>\n</pre>\n<h3>Solving Mysteries</h3>\n<p>Are you struggling with the mystery of whether or not code is being executed in\nIPython, Jupyter, or normal Python? Try using some of Scooby's investigative\nfunctions to solve these kinds of mysteries:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">scooby</span>\n\n<span class=\"k\">if</span> <span class=\"n\">scooby</span><span class=\"o\">.</span><span class=\"n\">in_ipykernel</span><span class=\"p\">():</span>\n    <span class=\"c1\"># Do Jupyter/IPyKernel stuff</span>\n<span class=\"k\">elif</span> <span class=\"n\">scooby</span><span class=\"o\">.</span><span class=\"n\">in_ipython</span><span class=\"p\">():</span>\n    <span class=\"c1\"># Do IPython stuff</span>\n<span class=\"k\">else</span><span class=\"p\">:</span>\n    <span class=\"c1\"># Do normal, boring Python stuff</span>\n</pre>\n<h3>How does scooby gets the version number?</h3>\n<p>A couple of locations are checked, and we are happy to implement more if\nneeded, just open an issue!</p>\n<p>Currently, it looks in the following places:</p>\n<ul>\n<li><code>__version__</code>;</li>\n<li><code>version</code>;</li>\n<li>lookup <code>VERSION_ATTRIBUTES</code>;</li>\n<li>lookup <code>VERSION_METHODS</code>.</li>\n</ul>\n<p><code>VERSION_ATTRIBUTES</code> is a dictionary of attributes for known python packages\nwith a non-standard place for the version, e.g. <code>VERSION_ATTRIBUTES['vtk'] = 'VTK_VERSION'</code>. You can add other known places via</p>\n<pre><span class=\"n\">scooby</span><span class=\"o\">.</span><span class=\"n\">knowledge</span><span class=\"o\">.</span><span class=\"n\">VERSION_ATTRIBUTES</span><span class=\"p\">[</span><span class=\"s1\">'a_module'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'Awesom_version_location'</span>\n</pre>\n<p>Similarly, <code>VERSION_METHODS</code> is a dictionary for methods to find the version,\nand you can add similarly your methods which will define the version of a\npackage.</p>\n<h3>Using scooby to get version information.</h3>\n<p>If you are just interested in the version of a package then you can use scooby\nas well. A few examples:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">scooby</span><span class=\"o\">,</span> <span class=\"nn\">numpy</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">scooby</span><span class=\"o\">.</span><span class=\"n\">get_version</span><span class=\"p\">(</span><span class=\"n\">numpy</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"s1\">'numpy'</span><span class=\"p\">,</span> <span class=\"s1\">'1.16.4'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">scooby</span><span class=\"o\">.</span><span class=\"n\">get_version</span><span class=\"p\">(</span><span class=\"s1\">'no_version'</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"s1\">'no_version'</span><span class=\"p\">,</span> <span class=\"s1\">'Version unknown'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">scooby</span><span class=\"o\">.</span><span class=\"n\">get_version</span><span class=\"p\">(</span><span class=\"s1\">'does_not_exist'</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"s1\">'does_not_exist'</span><span class=\"p\">,</span> <span class=\"s1\">'Could not import'</span><span class=\"p\">)</span>\n</pre>\n<p>Again, modules can be provided as already loaded ones or as string.</p>\n<h3>Tracking Imports in a Session</h3>\n<p>Scooby has the ability to track all imported modules during a Python session\nsuch that <em>any</em> imported, non-standard lib package that is used in the session\nis reported by a <code>TrackedReport</code>. For instance, start a session by importing\nScooby and enabling tracking with the <code>track_imports()</code> function.\nThen <em>all</em> subsequent packages that are imported during the session will be\ntracked and Scooby can report their versions.\nOnce you are ready to generate a report, instantiate a <code>TrackedReport</code> object.</p>\n<p>In the following example, we import a constant from <code>scipy</code> which will report\nthe versions of <code>scipy</code> and <code>numpy</code> as both packages are loaded in the session\n(note that <code>numpy</code> is internally loaded by <code>scipy</code>).</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">scooby</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">scooby</span><span class=\"o\">.</span><span class=\"n\">track_imports</span><span class=\"p\">()</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">scipy.constants</span> <span class=\"kn\">import</span> <span class=\"n\">mu_0</span> <span class=\"c1\"># a float value</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">scooby</span><span class=\"o\">.</span><span class=\"n\">TrackedReport</span><span class=\"p\">()</span>\n</pre>\n<pre><code>--------------------------------------------------------------------------------\n  Date: Thu Apr 16 15:33:11 2020 MDT\n\n                OS : Linux\n            CPU(s) : 8\n           Machine : x86_64\n      Architecture : 64bit\n               RAM : 62.7 GB\n       Environment : IPython\n\n  Python 3.7.7 (default, Mar 10 2020, 15:16:38)  [GCC 7.5.0]\n\n            scooby : 0.5.2\n             numpy : 1.18.1\n             scipy : 1.4.1\n--------------------------------------------------------------------------------\n</code></pre>\n<h2>Optional Requirements</h2>\n<p>The following is a list of optional requirements and their purpose:</p>\n<ul>\n<li><code>psutil</code>: report total RAM in GB</li>\n<li><code>mkl-services</code>: report Intel(R) Math Kernel Library version</li>\n</ul>\n\n          </div>"}, "last_serial": 7125248, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "183b9317d31e977a84eb1d40774dd9e7", "sha256": "4cd1f2281c6ff6ac1f1b219811481d1a9869aceea590681bae8e223af9edb4ff"}, "downloads": -1, "filename": "scooby-0.0.1.tar.gz", "has_sig": false, "md5_digest": "183b9317d31e977a84eb1d40774dd9e7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5432, "upload_time": "2019-06-25T21:02:25", "upload_time_iso_8601": "2019-06-25T21:02:25.542838Z", "url": "https://files.pythonhosted.org/packages/ea/e2/7a0ca53b1fb6e5ff7301942d79e515eedf93c901a933e3ae07ba96603e59/scooby-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "41503298be253634a0ccccf8acd3fef5", "sha256": "f49307fef83fe25eb6b2cd0d2d55c030062722589d38237b303e2131ddb1d53b"}, "downloads": -1, "filename": "scooby-0.0.2.tar.gz", "has_sig": false, "md5_digest": "41503298be253634a0ccccf8acd3fef5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6393, "upload_time": "2019-06-25T23:11:15", "upload_time_iso_8601": "2019-06-25T23:11:15.517749Z", "url": "https://files.pythonhosted.org/packages/1e/4b/c071a62342c095622555aeaa037dd0f29c60c181478feb742ee824c05328/scooby-0.0.2.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "8674c3c9363f0a3eb4cd911e737232bc", "sha256": "a61b97a65dda9e48416fd75b8e422a07cea9ce5ff371fe05be5a8630abbd7959"}, "downloads": -1, "filename": "scooby-0.1.0.tar.gz", "has_sig": false, "md5_digest": "8674c3c9363f0a3eb4cd911e737232bc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7626, "upload_time": "2019-06-26T03:36:01", "upload_time_iso_8601": "2019-06-26T03:36:01.486930Z", "url": "https://files.pythonhosted.org/packages/5e/c8/b0b9f79e3cc651e5f65c31dd2a2816dbf35b61a360de81034a12a03258a7/scooby-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "b1dbb0fbf88e3e95ed5113b5ff7a1912", "sha256": "d41d4e94d333113bf76245586c2d6057005ea9df086b436bcb065c6e42384d15"}, "downloads": -1, "filename": "scooby-0.1.1.tar.gz", "has_sig": false, "md5_digest": "b1dbb0fbf88e3e95ed5113b5ff7a1912", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7842, "upload_time": "2019-06-26T04:30:33", "upload_time_iso_8601": "2019-06-26T04:30:33.174066Z", "url": "https://files.pythonhosted.org/packages/ca/c8/9746fb8e5e413aecc48c541644698aec8fb0921608969ca95f3d1a63d8ca/scooby-0.1.1.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "3d5c0c7c4f23f4727b17b32f1e77d9d5", "sha256": "77292820a5dff1f4db8c169e9a168290412c6980457016f30faaf255c7c5c51d"}, "downloads": -1, "filename": "scooby-0.2.0.tar.gz", "has_sig": false, "md5_digest": "3d5c0c7c4f23f4727b17b32f1e77d9d5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9624, "upload_time": "2019-06-27T00:39:08", "upload_time_iso_8601": "2019-06-27T00:39:08.611410Z", "url": "https://files.pythonhosted.org/packages/32/47/32629d328cbb183a1fcc225c72a952d5e8aae8c3239e8c3ee802780871b3/scooby-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "43867a41450cb0578837bedc0a5776ba", "sha256": "20f86074c21d6576d9a29100dc9ef9066b433d4c45b78e682d1acec781de01f2"}, "downloads": -1, "filename": "scooby-0.2.1.tar.gz", "has_sig": false, "md5_digest": "43867a41450cb0578837bedc0a5776ba", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9761, "upload_time": "2019-06-28T21:20:27", "upload_time_iso_8601": "2019-06-28T21:20:27.167759Z", "url": "https://files.pythonhosted.org/packages/b6/26/49236b21a86a37c24a1b035576c663458c0406615acd1c9f2259fd6a025b/scooby-0.2.1.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "08f3117a701417be882ef73ac5fc9129", "sha256": "7f45ec28907e108da65949f5f3bffffb50ce6ab50bc72cdb6f9be796654b8c78"}, "downloads": -1, "filename": "scooby-0.2.2.tar.gz", "has_sig": false, "md5_digest": "08f3117a701417be882ef73ac5fc9129", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10215, "upload_time": "2019-06-30T01:22:21", "upload_time_iso_8601": "2019-06-30T01:22:21.182811Z", "url": "https://files.pythonhosted.org/packages/1a/ca/1cbfa40a2e26bac141497dfe65020b971489bef88be8d4c41a4baf895e12/scooby-0.2.2.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "a7d7b517702ae1c6fe9db096b90f0e92", "sha256": "e8e62e6fa1cbe1220165ea3f575bf0985f282bad1dfd7dfc010b77a0fdbe8772"}, "downloads": -1, "filename": "scooby-0.3.0.tar.gz", "has_sig": false, "md5_digest": "a7d7b517702ae1c6fe9db096b90f0e92", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9651, "upload_time": "2019-06-30T19:03:36", "upload_time_iso_8601": "2019-06-30T19:03:36.388717Z", "url": "https://files.pythonhosted.org/packages/07/4a/06a3302cd39ccace5604ffdd8e960672e2c4fdaa09880fa83dbe589eca1c/scooby-0.3.0.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "bb27f27749bc867437e980109aaa10f0", "sha256": "bd3f83dd63566c581523587235fb0e6363424f93a8d71fe21a21e00f60ad52f2"}, "downloads": -1, "filename": "scooby-0.4.0.tar.gz", "has_sig": false, "md5_digest": "bb27f27749bc867437e980109aaa10f0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8746, "upload_time": "2019-07-01T15:41:48", "upload_time_iso_8601": "2019-07-01T15:41:48.615518Z", "url": "https://files.pythonhosted.org/packages/9e/8a/eaae634004ed66710dcba402d7a3ec6655f3ee0034bacdf7fe2deb6e0f9c/scooby-0.4.0.tar.gz", "yanked": false}], "0.4.1": [{"comment_text": "", "digests": {"md5": "fe4654439dbadde5a299aeb44fab2355", "sha256": "37d6e7522912683895d26b6825a69a222ac4462957554cf6cbd32815ec82b192"}, "downloads": -1, "filename": "scooby-0.4.1.tar.gz", "has_sig": false, "md5_digest": "fe4654439dbadde5a299aeb44fab2355", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11764, "upload_time": "2019-07-02T03:11:36", "upload_time_iso_8601": "2019-07-02T03:11:36.935131Z", "url": "https://files.pythonhosted.org/packages/1f/4b/3cea4ffa02e002efbb01bffa2e0e97506e2c8a291430573a504efa2acba0/scooby-0.4.1.tar.gz", "yanked": false}], "0.4.2": [{"comment_text": "", "digests": {"md5": "db58ab45ed12934518581ce0cfcf2c20", "sha256": "f820f3eb589a2f446907e7dcf54e33e6a50a2c55763d4b75c1f0c6f6db983ca8"}, "downloads": -1, "filename": "scooby-0.4.2.tar.gz", "has_sig": false, "md5_digest": "db58ab45ed12934518581ce0cfcf2c20", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11829, "upload_time": "2019-07-07T15:59:40", "upload_time_iso_8601": "2019-07-07T15:59:40.099193Z", "url": "https://files.pythonhosted.org/packages/9e/68/3fae049a08733ec3fe0f9751d6be5a140bc4a9bfc99f8f5e51c09f720572/scooby-0.4.2.tar.gz", "yanked": false}], "0.4.3": [{"comment_text": "", "digests": {"md5": "7199ee05ae9039407bdf4196419d6a00", "sha256": "44b9ae2ceeb4dfe2a375d27259609c8dce39cb3f9fbd6d02bd7fec69f1701a82"}, "downloads": -1, "filename": "scooby-0.4.3.tar.gz", "has_sig": false, "md5_digest": "7199ee05ae9039407bdf4196419d6a00", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11836, "upload_time": "2019-07-08T16:10:38", "upload_time_iso_8601": "2019-07-08T16:10:38.345533Z", "url": "https://files.pythonhosted.org/packages/f3/55/1323fa2eabe616990025dcd9be61bd5a415c2be724cb5969416ede7e0f1a/scooby-0.4.3.tar.gz", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "99403dc395ca539300091e835fd30526", "sha256": "21a87961b6610f0fd4922c302b0d87d34ab0837f0d85dd8ae064c7431847671d"}, "downloads": -1, "filename": "scooby-0.5.0.tar.gz", "has_sig": false, "md5_digest": "99403dc395ca539300091e835fd30526", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11304, "upload_time": "2019-12-23T21:52:29", "upload_time_iso_8601": "2019-12-23T21:52:29.377624Z", "url": "https://files.pythonhosted.org/packages/00/cc/3b7d955f896f06bd3143129702866ab7fe5ddfc3d1256c4fba3125378392/scooby-0.5.0.tar.gz", "yanked": false}], "0.5.1": [{"comment_text": "", "digests": {"md5": "37120e6aeb0696e48062d67bd8068d7c", "sha256": "dedeef3d4c5f08e885e2157e5b063a6493f58a961c8e179947e2f8cc9834ae40"}, "downloads": -1, "filename": "scooby-0.5.1.tar.gz", "has_sig": false, "md5_digest": "37120e6aeb0696e48062d67bd8068d7c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12425, "upload_time": "2020-02-05T18:14:38", "upload_time_iso_8601": "2020-02-05T18:14:38.238272Z", "url": "https://files.pythonhosted.org/packages/11/03/37349a1df8f76573dc018c39adf54ee5cbe9c5ae45796600214824048d0d/scooby-0.5.1.tar.gz", "yanked": false}], "0.5.2": [{"comment_text": "", "digests": {"md5": "cedcd3c586df746aee47a47e0127f832", "sha256": "2804b09fc69fc6499bb6300f120c46bdde60746cdc16dc06217d5c7dc3e7e207"}, "downloads": -1, "filename": "scooby-0.5.2.tar.gz", "has_sig": false, "md5_digest": "cedcd3c586df746aee47a47e0127f832", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12434, "upload_time": "2020-02-12T16:13:31", "upload_time_iso_8601": "2020-02-12T16:13:31.302481Z", "url": "https://files.pythonhosted.org/packages/93/ee/e5f0c9e6c6018982d1a2fa897704156f2353c792087277991b1d63851e47/scooby-0.5.2.tar.gz", "yanked": false}], "0.5.3": [{"comment_text": "", "digests": {"md5": "6bc4c1ee39c92eb115f9fbb73019aa16", "sha256": "0337d0e9e143bafeb12d5dcd63a7e99609b75a4f3925a736ee14116d397241bb"}, "downloads": -1, "filename": "scooby-0.5.3.tar.gz", "has_sig": false, "md5_digest": "6bc4c1ee39c92eb115f9fbb73019aa16", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12696, "upload_time": "2020-04-16T21:41:07", "upload_time_iso_8601": "2020-04-16T21:41:07.828220Z", "url": "https://files.pythonhosted.org/packages/30/8c/ffcd6ba2c96c9e599dcc97342072aef46dcd05aa6c33bba9e646fa82e63e/scooby-0.5.3.tar.gz", "yanked": false}], "0.5.4": [{"comment_text": "", "digests": {"md5": "d85f991fb860f08605c5f5c69c8a951c", "sha256": "9578339ed41a0c8346173cb9e55eb280e7d31325caf8fc9e22c3cfaa15342572"}, "downloads": -1, "filename": "scooby-0.5.4.tar.gz", "has_sig": false, "md5_digest": "d85f991fb860f08605c5f5c69c8a951c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15711, "upload_time": "2020-04-29T02:29:09", "upload_time_iso_8601": "2020-04-29T02:29:09.962691Z", "url": "https://files.pythonhosted.org/packages/88/8d/0a76d82331e36c6176a0b50e53d03eaae1d67bb2ee7542a42cb54e350fba/scooby-0.5.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d85f991fb860f08605c5f5c69c8a951c", "sha256": "9578339ed41a0c8346173cb9e55eb280e7d31325caf8fc9e22c3cfaa15342572"}, "downloads": -1, "filename": "scooby-0.5.4.tar.gz", "has_sig": false, "md5_digest": "d85f991fb860f08605c5f5c69c8a951c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15711, "upload_time": "2020-04-29T02:29:09", "upload_time_iso_8601": "2020-04-29T02:29:09.962691Z", "url": "https://files.pythonhosted.org/packages/88/8d/0a76d82331e36c6176a0b50e53d03eaae1d67bb2ee7542a42cb54e350fba/scooby-0.5.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:57:08 2020"}