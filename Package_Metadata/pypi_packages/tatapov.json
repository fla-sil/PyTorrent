{"info": {"author": "Zulko", "author_email": "", "bugtrack_url": null, "classifiers": [], "description": "Tatapov\n-------\n\n.. image:: https://travis-ci.org/Edinburgh-Genome-Foundry/tatapov.svg?branch=master\n   :target: https://travis-ci.org/Edinburgh-Genome-Foundry/tatapov\n   :alt: Travis CI build status\n\nTatapov is a Python library making accessible and easy to explore the DNA\noverhang misannealing data from the following paper\n(`available on arxiv <https://www.biorxiv.org/content/early/2018/05/15/322297>`_):\n\n*Optimization of Golden Gate assembly through application of ligation\nsequence-dependent fidelity and bias profiling*, Potapov Vladimir,\nJennifer L. Ong, Rebecca B. Kucera, Bradley W. Langhorst,\nKatharina Bilotti, John M. Pryor, Eric J. Cantor, Barry Canton,\nThomas F. Knight, Thomas C. Evans Jr., Gregory Lohman. May 2018,\nhttps://doi.org/10.1101/322297\n\n\nThe Supplementary Material of this paper provides tables of inter-overhang\nannealing data in various 4 conditions (01h or 18h icubations at 25C or 37C).\nTatapov provides these tables (it will download them automatically from Arxiv\non the first use) as Pandas dataframes, so that they are easy to manipulate.\n\nIt also provides simple methods to build and plot subsets of the data (plotting\nrequires Matplotlib installed). \n\nUsage Example\n-------------\n\n**Plotting**\n\n.. code:: python\n\n  import tatapov\n\n  # Get a subset of the data at 25C (1h incubation)\n  data = tatapov.annealing_data[\"25C\"][\"01h\"] # a pandas dataframe\n  overhangs = [\"ACGA\", \"AAAT\", \"AGAG\"]\n  subset = tatapov.data_subset(data, overhangs, add_reverse=True)\n\n  # Plot the data subset\n  ax, _ = tatapov.plot_data(subset, figwidth=5)\n  ax.figure.tight_layout()\n  ax.figure.savefig(\"example.png\")\n\n.. image:: https://i.imgur.com/MfLimEk.png\n\nIn the plot above, if you see anything else than the square pairs around the\ndiagonal, it means there is cross-talking between your overhangs (so risk of misannealing).\nIf one of these diagmonal square pairs appears lighter than the others, it means that\nthe corresponding overhang has weak self-annealing (risk of having no assembly).\n\n\n**Identifying weak self-annealing overhangs**\n\n.. code:: python\n\n    import tatapov\n\n    annealing_data = tatapov.annealing_data['37C']['01h']\n\n    # Compute a dictionary {overhang: self-annealing score in 0-1}\n    relative_self_annealing = tatapov.relative_self_annealings(annealing_data)\n\n    weak_self_annealing_overhangs = [\n        overhang\n        for overhang, self_annealing in relative_self_annealing.items()\n        if self_annealing < 0.4\n    ]\n\n**Identifying overhang pairs with significant cross-talking**\n\n.. code:: python\n\n    import tatapov\n\n    annealing_data = tatapov.annealing_data['37C']['01h']\n\n    # Compute a dictionary {overhang_pair: cross-talking score in 0-1}\n    cross_annealings = tatapov.cross_annealings(annealing_data)\n\n    high_cross_annealing_pairs = [\n        overhang_pair\n        for overhang_pair, cross_annealing in cross_annealings.items()\n        if cross_annealing > 0.08\n    ]\n\nInstallation\n-------------\n\nYou can install Tatapov through PIP\n\n.. code::\n\n    sudo pip install tatapov\n\nAlternatively, you can unzip the sources in a folder and type\n\n.. code::\n\n    sudo python setup.py install\n\nLicense = MIT\n--------------\n\nTatapov is an open-source software originally written at the Edinburgh Genome\nFoundry by `Zulko <https://github.com/Zulko>`_ and\n`released on Github <https://github.com/Edinburgh-Genome-Foundry/Primavera>`_\nunder the MIT licence (\u00a2 Edinburg Genome Foundry). Everyone is welcome\nto contribute !\n\nPlease contact us if there is any issue regarding copyright (there shouldn't be\nas the repository does not contain any data, and the paper data is free to\ndownload).\n\nMore biology software\n-----------------------\n\n.. image:: https://raw.githubusercontent.com/Edinburgh-Genome-Foundry/Edinburgh-Genome-Foundry.github.io/master/static/imgs/logos/egf-codon-horizontal.png\n :target: https://edinburgh-genome-foundry.github.io/\n\nTatapov is part of the `EGF Codons <https://edinburgh-genome-foundry.github.io/>`_ synthetic biology software suite for DNA design, manufacturing and validation.\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Edinburgh-Genome-Foundry/tatapov", "keywords": "overhang golden gate dna annealing mismatch potapov", "license": "see LICENSE.txt", "maintainer": "", "maintainer_email": "", "name": "tatapov", "package_url": "https://pypi.org/project/tatapov/", "platform": "", "project_url": "https://pypi.org/project/tatapov/", "project_urls": {"Homepage": "https://github.com/Edinburgh-Genome-Foundry/tatapov"}, "release_url": "https://pypi.org/project/tatapov/0.1.3/", "requires_dist": null, "requires_python": "", "summary": "Provides DNA overhang misannealing data (Potatov 2018).", "version": "0.1.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"tatapov\">\n<h2>Tatapov</h2>\n<a href=\"https://travis-ci.org/Edinburgh-Genome-Foundry/tatapov\" rel=\"nofollow\"><img alt=\"Travis CI build status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8febde2a05494833c71beb58e0b3c1e4306a53c6/68747470733a2f2f7472617669732d63692e6f72672f4564696e62757267682d47656e6f6d652d466f756e6472792f74617461706f762e7376673f6272616e63683d6d6173746572\"></a>\n<p>Tatapov is a Python library making accessible and easy to explore the DNA\noverhang misannealing data from the following paper\n(<a href=\"https://www.biorxiv.org/content/early/2018/05/15/322297\" rel=\"nofollow\">available on arxiv</a>):</p>\n<p><em>Optimization of Golden Gate assembly through application of ligation\nsequence-dependent fidelity and bias profiling</em>, Potapov Vladimir,\nJennifer L. Ong, Rebecca B. Kucera, Bradley W. Langhorst,\nKatharina Bilotti, John M. Pryor, Eric J. Cantor, Barry Canton,\nThomas F. Knight, Thomas C. Evans Jr., Gregory Lohman. May 2018,\n<a href=\"https://doi.org/10.1101/322297\" rel=\"nofollow\">https://doi.org/10.1101/322297</a></p>\n<p>The Supplementary Material of this paper provides tables of inter-overhang\nannealing data in various 4 conditions (01h or 18h icubations at 25C or 37C).\nTatapov provides these tables (it will download them automatically from Arxiv\non the first use) as Pandas dataframes, so that they are easy to manipulate.</p>\n<p>It also provides simple methods to build and plot subsets of the data (plotting\nrequires Matplotlib installed).</p>\n</div>\n<div id=\"usage-example\">\n<h2>Usage Example</h2>\n<p><strong>Plotting</strong></p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">tatapov</span>\n\n<span class=\"c1\"># Get a subset of the data at 25C (1h incubation)</span>\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">tatapov</span><span class=\"o\">.</span><span class=\"n\">annealing_data</span><span class=\"p\">[</span><span class=\"s2\">\"25C\"</span><span class=\"p\">][</span><span class=\"s2\">\"01h\"</span><span class=\"p\">]</span> <span class=\"c1\"># a pandas dataframe</span>\n<span class=\"n\">overhangs</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">\"ACGA\"</span><span class=\"p\">,</span> <span class=\"s2\">\"AAAT\"</span><span class=\"p\">,</span> <span class=\"s2\">\"AGAG\"</span><span class=\"p\">]</span>\n<span class=\"n\">subset</span> <span class=\"o\">=</span> <span class=\"n\">tatapov</span><span class=\"o\">.</span><span class=\"n\">data_subset</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">overhangs</span><span class=\"p\">,</span> <span class=\"n\">add_reverse</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Plot the data subset</span>\n<span class=\"n\">ax</span><span class=\"p\">,</span> <span class=\"n\">_</span> <span class=\"o\">=</span> <span class=\"n\">tatapov</span><span class=\"o\">.</span><span class=\"n\">plot_data</span><span class=\"p\">(</span><span class=\"n\">subset</span><span class=\"p\">,</span> <span class=\"n\">figwidth</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">figure</span><span class=\"o\">.</span><span class=\"n\">tight_layout</span><span class=\"p\">()</span>\n<span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">figure</span><span class=\"o\">.</span><span class=\"n\">savefig</span><span class=\"p\">(</span><span class=\"s2\">\"example.png\"</span><span class=\"p\">)</span>\n</pre>\n<img alt=\"https://i.imgur.com/MfLimEk.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4c6b350faf5e509aed2dca909ea7a5aa6b6b658f/68747470733a2f2f692e696d6775722e636f6d2f4d664c696d456b2e706e67\">\n<p>In the plot above, if you see anything else than the square pairs around the\ndiagonal, it means there is cross-talking between your overhangs (so risk of misannealing).\nIf one of these diagmonal square pairs appears lighter than the others, it means that\nthe corresponding overhang has weak self-annealing (risk of having no assembly).</p>\n<p><strong>Identifying weak self-annealing overhangs</strong></p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">tatapov</span>\n\n<span class=\"n\">annealing_data</span> <span class=\"o\">=</span> <span class=\"n\">tatapov</span><span class=\"o\">.</span><span class=\"n\">annealing_data</span><span class=\"p\">[</span><span class=\"s1\">'37C'</span><span class=\"p\">][</span><span class=\"s1\">'01h'</span><span class=\"p\">]</span>\n\n<span class=\"c1\"># Compute a dictionary {overhang: self-annealing score in 0-1}</span>\n<span class=\"n\">relative_self_annealing</span> <span class=\"o\">=</span> <span class=\"n\">tatapov</span><span class=\"o\">.</span><span class=\"n\">relative_self_annealings</span><span class=\"p\">(</span><span class=\"n\">annealing_data</span><span class=\"p\">)</span>\n\n<span class=\"n\">weak_self_annealing_overhangs</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"n\">overhang</span>\n    <span class=\"k\">for</span> <span class=\"n\">overhang</span><span class=\"p\">,</span> <span class=\"n\">self_annealing</span> <span class=\"ow\">in</span> <span class=\"n\">relative_self_annealing</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">()</span>\n    <span class=\"k\">if</span> <span class=\"n\">self_annealing</span> <span class=\"o\">&lt;</span> <span class=\"mf\">0.4</span>\n<span class=\"p\">]</span>\n</pre>\n<p><strong>Identifying overhang pairs with significant cross-talking</strong></p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">tatapov</span>\n\n<span class=\"n\">annealing_data</span> <span class=\"o\">=</span> <span class=\"n\">tatapov</span><span class=\"o\">.</span><span class=\"n\">annealing_data</span><span class=\"p\">[</span><span class=\"s1\">'37C'</span><span class=\"p\">][</span><span class=\"s1\">'01h'</span><span class=\"p\">]</span>\n\n<span class=\"c1\"># Compute a dictionary {overhang_pair: cross-talking score in 0-1}</span>\n<span class=\"n\">cross_annealings</span> <span class=\"o\">=</span> <span class=\"n\">tatapov</span><span class=\"o\">.</span><span class=\"n\">cross_annealings</span><span class=\"p\">(</span><span class=\"n\">annealing_data</span><span class=\"p\">)</span>\n\n<span class=\"n\">high_cross_annealing_pairs</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"n\">overhang_pair</span>\n    <span class=\"k\">for</span> <span class=\"n\">overhang_pair</span><span class=\"p\">,</span> <span class=\"n\">cross_annealing</span> <span class=\"ow\">in</span> <span class=\"n\">cross_annealings</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">()</span>\n    <span class=\"k\">if</span> <span class=\"n\">cross_annealing</span> <span class=\"o\">&gt;</span> <span class=\"mf\">0.08</span>\n<span class=\"p\">]</span>\n</pre>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>You can install Tatapov through PIP</p>\n<pre>sudo pip install tatapov\n</pre>\n<p>Alternatively, you can unzip the sources in a folder and type</p>\n<pre>sudo python setup.py install\n</pre>\n</div>\n<div id=\"license-mit\">\n<h2>License = MIT</h2>\n<p>Tatapov is an open-source software originally written at the Edinburgh Genome\nFoundry by <a href=\"https://github.com/Zulko\" rel=\"nofollow\">Zulko</a> and\n<a href=\"https://github.com/Edinburgh-Genome-Foundry/Primavera\" rel=\"nofollow\">released on Github</a>\nunder the MIT licence (\u00a2 Edinburg Genome Foundry). Everyone is welcome\nto contribute !</p>\n<p>Please contact us if there is any issue regarding copyright (there shouldn\u2019t be\nas the repository does not contain any data, and the paper data is free to\ndownload).</p>\n</div>\n<div id=\"more-biology-software\">\n<h2>More biology software</h2>\n<a href=\"https://edinburgh-genome-foundry.github.io/\" rel=\"nofollow\"><img alt=\"https://raw.githubusercontent.com/Edinburgh-Genome-Foundry/Edinburgh-Genome-Foundry.github.io/master/static/imgs/logos/egf-codon-horizontal.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4a74793b24e95adb6771b02753b469178ffd6600/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f4564696e62757267682d47656e6f6d652d466f756e6472792f4564696e62757267682d47656e6f6d652d466f756e6472792e6769746875622e696f2f6d61737465722f7374617469632f696d67732f6c6f676f732f6567662d636f646f6e2d686f72697a6f6e74616c2e706e67\"></a>\n<p>Tatapov is part of the <a href=\"https://edinburgh-genome-foundry.github.io/\" rel=\"nofollow\">EGF Codons</a> synthetic biology software suite for DNA design, manufacturing and validation.</p>\n</div>\n\n          </div>"}, "last_serial": 6551706, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "00d94fafdcad399c22a0b50a393a3da7", "sha256": "a00b08366247118d0da9c96678fff8e4141b6bc9aabe9d77656248dacdb2ba46"}, "downloads": -1, "filename": "tatapov-0.1.0.tar.gz", "has_sig": false, "md5_digest": "00d94fafdcad399c22a0b50a393a3da7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7953, "upload_time": "2018-09-25T20:37:39", "upload_time_iso_8601": "2018-09-25T20:37:39.648590Z", "url": "https://files.pythonhosted.org/packages/05/0e/c084c36713ddd73607266e28358df3f412436f6d56af41b520089dde46dd/tatapov-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "ba3266ce0b6e55f76182bd5c7d2561fd", "sha256": "b7cdc303133fa35bc6ee175e55e0fb71a6d787482e5332d014067a53ad260a9a"}, "downloads": -1, "filename": "tatapov-0.1.1.tar.gz", "has_sig": false, "md5_digest": "ba3266ce0b6e55f76182bd5c7d2561fd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9136, "upload_time": "2018-11-01T11:24:18", "upload_time_iso_8601": "2018-11-01T11:24:18.465166Z", "url": "https://files.pythonhosted.org/packages/72/5b/f5e28e1eaffe350f16e769eea71320da2d691fae0f93a262fe9338c5f1f2/tatapov-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "0352811c07a565a86cf8131909f0b05f", "sha256": "618bd9d7d4ad7c895b2006ad8d36542899342912652aafbfe19c00f8bf26b7d6"}, "downloads": -1, "filename": "tatapov-0.1.2.tar.gz", "has_sig": false, "md5_digest": "0352811c07a565a86cf8131909f0b05f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9156, "upload_time": "2019-02-27T16:17:50", "upload_time_iso_8601": "2019-02-27T16:17:50.383008Z", "url": "https://files.pythonhosted.org/packages/7f/31/85d6f9219a9e8462654d55c1f4dfff9ac66f8bb375718686d355df83e0a7/tatapov-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "ee464af1020ccac8310f9d38bcb0606a", "sha256": "00f4e782ea4c4c20a05e941a321ce124dcea873d648c26d533e27056714741e5"}, "downloads": -1, "filename": "tatapov-0.1.3.tar.gz", "has_sig": false, "md5_digest": "ee464af1020ccac8310f9d38bcb0606a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9175, "upload_time": "2020-01-31T20:41:21", "upload_time_iso_8601": "2020-01-31T20:41:21.507463Z", "url": "https://files.pythonhosted.org/packages/94/8e/ec6b30e2e8af8320053886b91a260e9fbfea902bfe9a1cc4c6d759f173c7/tatapov-0.1.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ee464af1020ccac8310f9d38bcb0606a", "sha256": "00f4e782ea4c4c20a05e941a321ce124dcea873d648c26d533e27056714741e5"}, "downloads": -1, "filename": "tatapov-0.1.3.tar.gz", "has_sig": false, "md5_digest": "ee464af1020ccac8310f9d38bcb0606a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9175, "upload_time": "2020-01-31T20:41:21", "upload_time_iso_8601": "2020-01-31T20:41:21.507463Z", "url": "https://files.pythonhosted.org/packages/94/8e/ec6b30e2e8af8320053886b91a260e9fbfea902bfe9a1cc4c6d759f173c7/tatapov-0.1.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:57:40 2020"}