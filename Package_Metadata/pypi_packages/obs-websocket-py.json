{"info": {"author": "Guillaume \"Elektordi\" Genty", "author_email": "elektordi@elektordi.net", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Plugins", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Topic :: Software Development :: Libraries"], "description": "obs-websocket-py\n================\n\nPython library to communicate with an\n`obs-websocket <https://github.com/Palakis/obs-websocket>`__ server.\n\n*Licensed under the MIT License*\n\nProject pages\n-------------\n\nGitHub project: https://github.com/Elektordi/obs-websocket-py\n\nPyPI package: https://pypi.org/project/obs-websocket-py/\n\nInstallation\n------------\n\nJust run ``pip install obs-websocket-py`` in your Python venv or\ndirectly on your system.\n\nFor manual install, git clone the github repo and copy the directory\n**obswebsocket** in your python project root.\n\n**Requires**: websocket-client (from pip)\n\nUsage\n-----\n\nSee python scripts in the\n`samples <https://github.com/Elektordi/obs-websocket-py/tree/master/samples>`__\ndirectory.\n\nOr take a look at the documentation below:\n\n*Output of ``pydoc obswebsocket.core.obsws``:*\n\n::\n\n    Help on class obsws in obswebsocket.core:\n\n    obswebsocket.core.obsws = class obsws\n     |  Core class for using obs-websocket-py\n     |  \n     |  Simple usage:\n     |      >>> import obswebsocket, obswebsocket.requests\n     |      >>> client = obswebsocket.obsws(\"localhost\", 4444, \"secret\")\n     |      >>> client.connect()\n     |      >>> client.call(obswebsocket.requests.GetVersion()).getObsWebsocketVersion()\n     |      u'4.1.0'\n     |      >>> client.disconnect()\n     |      \n     |  For advanced usage, including events callback, see the 'samples' directory.\n     |  \n     |  Methods defined here:\n     |  \n     |  __init__(self, host=None, port=4444, password='')\n     |      Construct a new obsws wrapper\n     |      \n     |      :param host: Hostname to connect to\n     |      :param port: TCP Port to connect to (Default is 4444)\n     |      :param password: Password for the websocket server (Leave this field empty if no auth enabled\n     |          on the server)\n     |  \n     |  call(self, obj)\n     |      Make a call to the OBS server through the Websocket.\n     |      \n     |      :param obj: Request (class from obswebsocket.requests module) to send to the server.\n     |      :return: Request object populated with response data.\n     |  \n     |  connect(self, host=None, port=None)\n     |      Connect to the websocket server\n     |      \n     |      :return: Nothing\n     |  \n     |  disconnect(self)\n     |      Disconnect from websocket server\n     |      \n     |      :return: Nothing\n     |  \n     |  reconnect(self)\n     |      Restart the connection to the websocket server\n     |      \n     |      :return: Nothing\n     |  \n     |  register(self, function, event=None)\n     |      Register a new hook in the websocket client\n     |      \n     |      :param function: Callback function pointer for the hook\n     |      :param event: Event (class from obswebsocket.events module) to trigger the hook on.\n     |          Default is None, which means trigger on all events.\n     |      :return: Nothing\n     |  \n     |  send(self, data)\n     |      Make a raw json call to the OBS server through the Websocket.\n     |      \n     |      :param obj: Request (python dict) to send to the server. Do not include field \"message-id\".\n     |      :return: Response (python dict) from the server.\n     |  \n     |  unregister(self, function, event=None)\n     |      Unregister a new hook in the websocket client\n     |      \n     |      :param function: Callback function pointer for the hook\n     |      :param event: Event (class from obswebsocket.events module) which triggered the hook on.\n     |          Default is None, which means unregister this function for all events.\n     |      :return: Nothing\n\nProblems?\n---------\n\nPlease check on `Github project\nissues <https://github.com/Elektordi/obs-websocket-py/issues>`__, and if\nnobody else have experienced it before, you can `file a new\nissue <https://github.com/Elektordi/obs-websocket-py/issues/new>`__.\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Elektordi/obs-websocket-py", "keywords": "obs", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "obs-websocket-py", "package_url": "https://pypi.org/project/obs-websocket-py/", "platform": "", "project_url": "https://pypi.org/project/obs-websocket-py/", "project_urls": {"Homepage": "https://github.com/Elektordi/obs-websocket-py"}, "release_url": "https://pypi.org/project/obs-websocket-py/0.5.1/", "requires_dist": null, "requires_python": "", "summary": "Python library to communicate with an obs-websocket server.", "version": "0.5.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Python library to communicate with an\n<a href=\"https://github.com/Palakis/obs-websocket\" rel=\"nofollow\">obs-websocket</a> server.</p>\n<p><em>Licensed under the MIT License</em></p>\n<div id=\"project-pages\">\n<h2>Project pages</h2>\n<p>GitHub project: <a href=\"https://github.com/Elektordi/obs-websocket-py\" rel=\"nofollow\">https://github.com/Elektordi/obs-websocket-py</a></p>\n<p>PyPI package: <a href=\"https://pypi.org/project/obs-websocket-py/\" rel=\"nofollow\">https://pypi.org/project/obs-websocket-py/</a></p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Just run <tt>pip install <span class=\"pre\">obs-websocket-py</span></tt> in your Python venv or\ndirectly on your system.</p>\n<p>For manual install, git clone the github repo and copy the directory\n<strong>obswebsocket</strong> in your python project root.</p>\n<p><strong>Requires</strong>: websocket-client (from pip)</p>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>See python scripts in the\n<a href=\"https://github.com/Elektordi/obs-websocket-py/tree/master/samples\" rel=\"nofollow\">samples</a>\ndirectory.</p>\n<p>Or take a look at the documentation below:</p>\n<p><em>Output of ``pydoc obswebsocket.core.obsws``:</em></p>\n<pre>Help on class obsws in obswebsocket.core:\n\nobswebsocket.core.obsws = class obsws\n |  Core class for using obs-websocket-py\n |\n |  Simple usage:\n |      &gt;&gt;&gt; import obswebsocket, obswebsocket.requests\n |      &gt;&gt;&gt; client = obswebsocket.obsws(\"localhost\", 4444, \"secret\")\n |      &gt;&gt;&gt; client.connect()\n |      &gt;&gt;&gt; client.call(obswebsocket.requests.GetVersion()).getObsWebsocketVersion()\n |      u'4.1.0'\n |      &gt;&gt;&gt; client.disconnect()\n |\n |  For advanced usage, including events callback, see the 'samples' directory.\n |\n |  Methods defined here:\n |\n |  __init__(self, host=None, port=4444, password='')\n |      Construct a new obsws wrapper\n |\n |      :param host: Hostname to connect to\n |      :param port: TCP Port to connect to (Default is 4444)\n |      :param password: Password for the websocket server (Leave this field empty if no auth enabled\n |          on the server)\n |\n |  call(self, obj)\n |      Make a call to the OBS server through the Websocket.\n |\n |      :param obj: Request (class from obswebsocket.requests module) to send to the server.\n |      :return: Request object populated with response data.\n |\n |  connect(self, host=None, port=None)\n |      Connect to the websocket server\n |\n |      :return: Nothing\n |\n |  disconnect(self)\n |      Disconnect from websocket server\n |\n |      :return: Nothing\n |\n |  reconnect(self)\n |      Restart the connection to the websocket server\n |\n |      :return: Nothing\n |\n |  register(self, function, event=None)\n |      Register a new hook in the websocket client\n |\n |      :param function: Callback function pointer for the hook\n |      :param event: Event (class from obswebsocket.events module) to trigger the hook on.\n |          Default is None, which means trigger on all events.\n |      :return: Nothing\n |\n |  send(self, data)\n |      Make a raw json call to the OBS server through the Websocket.\n |\n |      :param obj: Request (python dict) to send to the server. Do not include field \"message-id\".\n |      :return: Response (python dict) from the server.\n |\n |  unregister(self, function, event=None)\n |      Unregister a new hook in the websocket client\n |\n |      :param function: Callback function pointer for the hook\n |      :param event: Event (class from obswebsocket.events module) which triggered the hook on.\n |          Default is None, which means unregister this function for all events.\n |      :return: Nothing\n</pre>\n</div>\n<div id=\"problems\">\n<h2>Problems?</h2>\n<p>Please check on <a href=\"https://github.com/Elektordi/obs-websocket-py/issues\" rel=\"nofollow\">Github project\nissues</a>, and if\nnobody else have experienced it before, you can <a href=\"https://github.com/Elektordi/obs-websocket-py/issues/new\" rel=\"nofollow\">file a new\nissue</a>.</p>\n</div>\n\n          </div>"}, "last_serial": 6405033, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "c2b7726fcebd50e90db09df20a254cf8", "sha256": "7d4c3c1011914bba17d4c76dc7118688be7fc7df1201a28a81362dfbeb23bc5b"}, "downloads": -1, "filename": "obs-websocket-py-0.1.tar.gz", "has_sig": false, "md5_digest": "c2b7726fcebd50e90db09df20a254cf8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9010, "upload_time": "2017-06-24T21:18:58", "upload_time_iso_8601": "2017-06-24T21:18:58.699625Z", "url": "https://files.pythonhosted.org/packages/b3/27/409ffa7d41b3f74c684fa27e257db678afcc317ac0f5be4226794ae361f7/obs-websocket-py-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "b8e2a0c0809c122da38ba1e033d4f647", "sha256": "7dac0ac34ee4939600c06d8752ae39ddee311aebe715852f697f78849d3142c0"}, "downloads": -1, "filename": "obs-websocket-py-0.2.tar.gz", "has_sig": false, "md5_digest": "b8e2a0c0809c122da38ba1e033d4f647", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8979, "upload_time": "2017-07-28T20:17:41", "upload_time_iso_8601": "2017-07-28T20:17:41.119508Z", "url": "https://files.pythonhosted.org/packages/e1/3f/473c2c66e67687b3e2387fdcb4766f1b1631403a250fefa2b489f779f0b8/obs-websocket-py-0.2.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "31504bf12e94f61852c3cb9365ada230", "sha256": "2194ef5c493671357594a544bad0d0ddb4d5fab75160719d4bd6f2fdb1b4eea8"}, "downloads": -1, "filename": "obs-websocket-py-0.3.tar.gz", "has_sig": false, "md5_digest": "31504bf12e94f61852c3cb9365ada230", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6354, "upload_time": "2018-02-04T00:29:38", "upload_time_iso_8601": "2018-02-04T00:29:38.782323Z", "url": "https://files.pythonhosted.org/packages/2c/82/125306f049d7517f6cbae078fe0dc4cb82df08d5a2b1018b7bbd753eadc8/obs-websocket-py-0.3.tar.gz", "yanked": false}], "0.4": [{"comment_text": "", "digests": {"md5": "23fae4cb3f0a68cdd000b2f4afe6e01b", "sha256": "77a765c1383421a1b218c30553f424700d0624f89af2f6cb16852bd10b64f144"}, "downloads": -1, "filename": "obs_websocket_py-0.4-py2-none-any.whl", "has_sig": false, "md5_digest": "23fae4cb3f0a68cdd000b2f4afe6e01b", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 19823, "upload_time": "2018-11-01T23:35:34", "upload_time_iso_8601": "2018-11-01T23:35:34.489205Z", "url": "https://files.pythonhosted.org/packages/0d/fa/766d75be93e1bc51eb3c8cce5b807b8d798878d97df12f3bbee10a40ae0f/obs_websocket_py-0.4-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "84dc5626d3913d31fe1335ba3a4f1ac5", "sha256": "d7331ea327642e42f96cc18e7cc0cfb430ddf591fffb2f50d6a3ad60d5911e42"}, "downloads": -1, "filename": "obs-websocket-py-0.4.tar.gz", "has_sig": false, "md5_digest": "84dc5626d3913d31fe1335ba3a4f1ac5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18712, "upload_time": "2018-11-01T23:35:36", "upload_time_iso_8601": "2018-11-01T23:35:36.422134Z", "url": "https://files.pythonhosted.org/packages/32/10/e3214c3298c0ae0f536916d8add8e98aa39f4e26f9dbd8360cdab4f68041/obs-websocket-py-0.4.tar.gz", "yanked": false}], "0.5.1": [{"comment_text": "", "digests": {"md5": "235f35ae0e95bff39d206af26f2be7d9", "sha256": "52b9bb3f2504f66f135909b165133ca3a8f13f91bc8554dad8623169f75d688f"}, "downloads": -1, "filename": "obs-websocket-py-0.5.1.tar.gz", "has_sig": false, "md5_digest": "235f35ae0e95bff39d206af26f2be7d9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22538, "upload_time": "2020-01-06T22:08:42", "upload_time_iso_8601": "2020-01-06T22:08:42.443772Z", "url": "https://files.pythonhosted.org/packages/43/58/72ce602da586efc5e6ca2ee7c605f5a5e480bf035f048835c5ecdd4f87e2/obs-websocket-py-0.5.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "235f35ae0e95bff39d206af26f2be7d9", "sha256": "52b9bb3f2504f66f135909b165133ca3a8f13f91bc8554dad8623169f75d688f"}, "downloads": -1, "filename": "obs-websocket-py-0.5.1.tar.gz", "has_sig": false, "md5_digest": "235f35ae0e95bff39d206af26f2be7d9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22538, "upload_time": "2020-01-06T22:08:42", "upload_time_iso_8601": "2020-01-06T22:08:42.443772Z", "url": "https://files.pythonhosted.org/packages/43/58/72ce602da586efc5e6ca2ee7c605f5a5e480bf035f048835c5ecdd4f87e2/obs-websocket-py-0.5.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:43:45 2020"}