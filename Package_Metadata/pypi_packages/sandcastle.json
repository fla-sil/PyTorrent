{"info": {"author": "Red Hat", "author_email": "user-cont-team@redhat.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: POSIX :: Linux", "Programming Language :: Python", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Software Development", "Topic :: Utilities"], "description": "# Sandcastle [![Build Status](https://ci.centos.org/job/sandcastle-master/badge/icon)](https://ci.centos.org/job/sandcastle-master/)\n\nRun untrusted code in a castle (OpenShift pod), which stands in a sandbox.\n\n\n## Usage\n\nThe prerequisite is that you're logged in an OpenShift cluster:\n```\n$ oc status\n In project Local Project (myproject) on server https://localhost:8443\n```\n\nThe simplest use case is to invoke a command in a new openshift pod:\n\n```python\nfrom sandcastle import Sandcastle\n\ns = Sandcastle(\n    image_reference=\"docker.io/this-is-my/image:latest\",\n    k8s_namespace_name=\"myproject\"\n)\noutput = s.run(command=[\"ls\", \"-lha\"])\n```\n\nThese things will happen:\n\n* A new pod is created, using the image set in `image_reference`.\n* The library actively waits for the pod to finish.\n* If the pod terminates with a return code greater than 0, an exception is raised.\n* Output of the command is return from the `.run()` method.\n\n\n### Sharing data between sandbox and current pod\n\nThis library allows you to share volumes between the pod it is running in and between sandbox.\n\nThere is a dedicated class and an interface to access this functionality:\n* `VolumeSpec` class\n* `volume_mounts` kwarg of Sandcastle constructor\n\nAn example is worth of thousand words:\n```python\nfrom pathlib import Path\nfrom sandcastle import Sandcastle, VolumeSpec\n\n# the expectation is that volume assigned to PVC set\n# via env var SANDCASTLE_PVC is mounted in current pod at /path\nvs = VolumeSpec(path=\"/path\", pvc_from_env=\"SANDCASTLE_PVC\")\n\ns = Sandcastle(\n    image_reference=\"docker.io/this-is-my/image:latest\",\n    k8s_namespace_name=\"myproject\",\n    volume_mounts=[vs]\n)\ns.run()\ns.exec(command=[\"bash\", \"-c\", \"ls -lha /path\"])    # will be empty\ns.exec(command=[\"bash\", \"-c\", \"mkdir /path/dir\"])  # will create a dir\nassert Path(\"/path/dir\").is_dir()                  # should pass\n```\n\n#### Sharing data by copying them\n\nSandcastle is able to run the sandbox pod in a different namespace. This\nimproves security since it's trivial to lock networking of this project down -\nthe pod won't be able to access OpenShift API server nor any of your services\ndeployed in the cluster. For more info, check out [egress\nrules](https://blog.openshift.com/accessing-external-services-using-egress-router/)\nand [network\npolicy](https://docs.openshift.com/container-platform/3.6/admin_guide/managing_networking.html#admin-guide-networking-networkpolicy).\n\nWhen you set up this sandbox namespace, please make sure that service account\nof namespace your app is deployed in can manage pods in the sandbox namespace.\nThis command should help:\n```bash\n$ oc adm -n ${SANDBOX_NAMESPACE} policy add-role-to-user edit system:serviceaccount:${APP_NAMESPACE}:default\n```\n\nReal code:\n\n```python\nm_dir = MappedDir(\n    local_dir,             # share this dir\n    sandbox_mountpoint,    # make it available here\n    with_interim_pvc=True  # the data will be placed in a volume\n)\n\no = Sandcastle(\n    image_reference=container_image,\n    k8s_namespace_name=namespace,      # can be a different namespace\n    mapped_dir=m_dir,\n    working_dir=sandbox_mountpoint,\n)\no.run()\n# happy execing\no.exec(command=[\"ls\", \"-lha\", f\"{sandbox_mountpoint}/\"])\n```\n\n## Developing sandcastle\n\nIn order to develop this project (and run tests), there are several requirements which need to be met.\n\n1. Build container images using makefile target `make test-image-build`.\n\n2. An openshift cluster and be logged into it\n\n   Which means that running `oc status` should yield the cluster where you want\n   to run the tests.\n\n   The e2e test `test_from_pod` builds current codebase and runs the other e2e\n   tests in a pod: to verify the E2E functionality. This expects that the\n   openshift cluster is deployed in your current environment, meaning that\n   openshift can access your local container images in your dockerd. Otherwise the\n   image needs to be pushed somewhere so openshift can access it.\n\n3. In the default `oc cluster up` environment, the tests create sandbox pod\n   using the default service account which is assigned to every pod. This SA\n   doesn't have permissions to create nor delete pods (so the sandboxing would\n   not work). With this command, the SA is allowed to change any objects in the\n   namespace:\n   ```\n   oc adm policy add-role-to-user edit system:serviceaccount:myproject:default\n   ```\n\n4. Docker binary and docker daemon running. This is implied from the first point.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/packit-service/sandcastle", "keywords": "openshift,sandbox", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "sandcastle", "package_url": "https://pypi.org/project/sandcastle/", "platform": "", "project_url": "https://pypi.org/project/sandcastle/", "project_urls": {"Homepage": "https://github.com/packit-service/sandcastle"}, "release_url": "https://pypi.org/project/sandcastle/0.1.0/", "requires_dist": ["kubernetes (<9)"], "requires_python": ">=3.6", "summary": "Run untrusted commands in a sandbox.", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Sandcastle <a href=\"https://ci.centos.org/job/sandcastle-master/\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/bf7d6537245ba19e11d7cbf988e9d57262adee45/68747470733a2f2f63692e63656e746f732e6f72672f6a6f622f73616e64636173746c652d6d61737465722f62616467652f69636f6e\"></a></h1>\n<p>Run untrusted code in a castle (OpenShift pod), which stands in a sandbox.</p>\n<h2>Usage</h2>\n<p>The prerequisite is that you're logged in an OpenShift cluster:</p>\n<pre><code>$ oc status\n In project Local Project (myproject) on server https://localhost:8443\n</code></pre>\n<p>The simplest use case is to invoke a command in a new openshift pod:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">sandcastle</span> <span class=\"kn\">import</span> <span class=\"n\">Sandcastle</span>\n\n<span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">Sandcastle</span><span class=\"p\">(</span>\n    <span class=\"n\">image_reference</span><span class=\"o\">=</span><span class=\"s2\">\"docker.io/this-is-my/image:latest\"</span><span class=\"p\">,</span>\n    <span class=\"n\">k8s_namespace_name</span><span class=\"o\">=</span><span class=\"s2\">\"myproject\"</span>\n<span class=\"p\">)</span>\n<span class=\"n\">output</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">command</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"ls\"</span><span class=\"p\">,</span> <span class=\"s2\">\"-lha\"</span><span class=\"p\">])</span>\n</pre>\n<p>These things will happen:</p>\n<ul>\n<li>A new pod is created, using the image set in <code>image_reference</code>.</li>\n<li>The library actively waits for the pod to finish.</li>\n<li>If the pod terminates with a return code greater than 0, an exception is raised.</li>\n<li>Output of the command is return from the <code>.run()</code> method.</li>\n</ul>\n<h3>Sharing data between sandbox and current pod</h3>\n<p>This library allows you to share volumes between the pod it is running in and between sandbox.</p>\n<p>There is a dedicated class and an interface to access this functionality:</p>\n<ul>\n<li><code>VolumeSpec</code> class</li>\n<li><code>volume_mounts</code> kwarg of Sandcastle constructor</li>\n</ul>\n<p>An example is worth of thousand words:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pathlib</span> <span class=\"kn\">import</span> <span class=\"n\">Path</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sandcastle</span> <span class=\"kn\">import</span> <span class=\"n\">Sandcastle</span><span class=\"p\">,</span> <span class=\"n\">VolumeSpec</span>\n\n<span class=\"c1\"># the expectation is that volume assigned to PVC set</span>\n<span class=\"c1\"># via env var SANDCASTLE_PVC is mounted in current pod at /path</span>\n<span class=\"n\">vs</span> <span class=\"o\">=</span> <span class=\"n\">VolumeSpec</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"o\">=</span><span class=\"s2\">\"/path\"</span><span class=\"p\">,</span> <span class=\"n\">pvc_from_env</span><span class=\"o\">=</span><span class=\"s2\">\"SANDCASTLE_PVC\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">Sandcastle</span><span class=\"p\">(</span>\n    <span class=\"n\">image_reference</span><span class=\"o\">=</span><span class=\"s2\">\"docker.io/this-is-my/image:latest\"</span><span class=\"p\">,</span>\n    <span class=\"n\">k8s_namespace_name</span><span class=\"o\">=</span><span class=\"s2\">\"myproject\"</span><span class=\"p\">,</span>\n    <span class=\"n\">volume_mounts</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">vs</span><span class=\"p\">]</span>\n<span class=\"p\">)</span>\n<span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n<span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">exec</span><span class=\"p\">(</span><span class=\"n\">command</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"bash\"</span><span class=\"p\">,</span> <span class=\"s2\">\"-c\"</span><span class=\"p\">,</span> <span class=\"s2\">\"ls -lha /path\"</span><span class=\"p\">])</span>    <span class=\"c1\"># will be empty</span>\n<span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">exec</span><span class=\"p\">(</span><span class=\"n\">command</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"bash\"</span><span class=\"p\">,</span> <span class=\"s2\">\"-c\"</span><span class=\"p\">,</span> <span class=\"s2\">\"mkdir /path/dir\"</span><span class=\"p\">])</span>  <span class=\"c1\"># will create a dir</span>\n<span class=\"k\">assert</span> <span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"s2\">\"/path/dir\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">is_dir</span><span class=\"p\">()</span>                  <span class=\"c1\"># should pass</span>\n</pre>\n<h4>Sharing data by copying them</h4>\n<p>Sandcastle is able to run the sandbox pod in a different namespace. This\nimproves security since it's trivial to lock networking of this project down -\nthe pod won't be able to access OpenShift API server nor any of your services\ndeployed in the cluster. For more info, check out <a href=\"https://blog.openshift.com/accessing-external-services-using-egress-router/\" rel=\"nofollow\">egress\nrules</a>\nand <a href=\"https://docs.openshift.com/container-platform/3.6/admin_guide/managing_networking.html#admin-guide-networking-networkpolicy\" rel=\"nofollow\">network\npolicy</a>.</p>\n<p>When you set up this sandbox namespace, please make sure that service account\nof namespace your app is deployed in can manage pods in the sandbox namespace.\nThis command should help:</p>\n<pre>$ oc adm -n <span class=\"si\">${</span><span class=\"nv\">SANDBOX_NAMESPACE</span><span class=\"si\">}</span> policy add-role-to-user edit system:serviceaccount:<span class=\"si\">${</span><span class=\"nv\">APP_NAMESPACE</span><span class=\"si\">}</span>:default\n</pre>\n<p>Real code:</p>\n<pre><span class=\"n\">m_dir</span> <span class=\"o\">=</span> <span class=\"n\">MappedDir</span><span class=\"p\">(</span>\n    <span class=\"n\">local_dir</span><span class=\"p\">,</span>             <span class=\"c1\"># share this dir</span>\n    <span class=\"n\">sandbox_mountpoint</span><span class=\"p\">,</span>    <span class=\"c1\"># make it available here</span>\n    <span class=\"n\">with_interim_pvc</span><span class=\"o\">=</span><span class=\"kc\">True</span>  <span class=\"c1\"># the data will be placed in a volume</span>\n<span class=\"p\">)</span>\n\n<span class=\"n\">o</span> <span class=\"o\">=</span> <span class=\"n\">Sandcastle</span><span class=\"p\">(</span>\n    <span class=\"n\">image_reference</span><span class=\"o\">=</span><span class=\"n\">container_image</span><span class=\"p\">,</span>\n    <span class=\"n\">k8s_namespace_name</span><span class=\"o\">=</span><span class=\"n\">namespace</span><span class=\"p\">,</span>      <span class=\"c1\"># can be a different namespace</span>\n    <span class=\"n\">mapped_dir</span><span class=\"o\">=</span><span class=\"n\">m_dir</span><span class=\"p\">,</span>\n    <span class=\"n\">working_dir</span><span class=\"o\">=</span><span class=\"n\">sandbox_mountpoint</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n<span class=\"n\">o</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n<span class=\"c1\"># happy execing</span>\n<span class=\"n\">o</span><span class=\"o\">.</span><span class=\"n\">exec</span><span class=\"p\">(</span><span class=\"n\">command</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"ls\"</span><span class=\"p\">,</span> <span class=\"s2\">\"-lha\"</span><span class=\"p\">,</span> <span class=\"sa\">f</span><span class=\"s2\">\"</span><span class=\"si\">{</span><span class=\"n\">sandbox_mountpoint</span><span class=\"si\">}</span><span class=\"s2\">/\"</span><span class=\"p\">])</span>\n</pre>\n<h2>Developing sandcastle</h2>\n<p>In order to develop this project (and run tests), there are several requirements which need to be met.</p>\n<ol>\n<li>\n<p>Build container images using makefile target <code>make test-image-build</code>.</p>\n</li>\n<li>\n<p>An openshift cluster and be logged into it</p>\n<p>Which means that running <code>oc status</code> should yield the cluster where you want\nto run the tests.</p>\n<p>The e2e test <code>test_from_pod</code> builds current codebase and runs the other e2e\ntests in a pod: to verify the E2E functionality. This expects that the\nopenshift cluster is deployed in your current environment, meaning that\nopenshift can access your local container images in your dockerd. Otherwise the\nimage needs to be pushed somewhere so openshift can access it.</p>\n</li>\n<li>\n<p>In the default <code>oc cluster up</code> environment, the tests create sandbox pod\nusing the default service account which is assigned to every pod. This SA\ndoesn't have permissions to create nor delete pods (so the sandboxing would\nnot work). With this command, the SA is allowed to change any objects in the\nnamespace:</p>\n<pre><code>oc adm policy add-role-to-user edit system:serviceaccount:myproject:default\n</code></pre>\n</li>\n<li>\n<p>Docker binary and docker daemon running. This is implied from the first point.</p>\n</li>\n</ol>\n\n          </div>"}, "last_serial": 5487297, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "ad7348dd35c8ba54090e18db28728c66", "sha256": "ef4e2d64838d4d3e7ce4003c13cee7e0b3e1ff2771182e7011678ffada8c9e74"}, "downloads": -1, "filename": "sandcastle-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "ad7348dd35c8ba54090e18db28728c66", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 17025, "upload_time": "2019-07-04T15:33:25", "upload_time_iso_8601": "2019-07-04T15:33:25.625613Z", "url": "https://files.pythonhosted.org/packages/7c/7b/939c2f2a584c54b5887a64e243b35bec2548a9d6cfae1702c483f1415adb/sandcastle-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8ea7f64e3e44b8b83022e129773ce82a", "sha256": "71aea7b740b4f42acfd997d56fd4d408cc887437079c0f721ea92cb6d5eeb513"}, "downloads": -1, "filename": "sandcastle-0.1.0.tar.gz", "has_sig": false, "md5_digest": "8ea7f64e3e44b8b83022e129773ce82a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 24119, "upload_time": "2019-07-04T15:33:27", "upload_time_iso_8601": "2019-07-04T15:33:27.881160Z", "url": "https://files.pythonhosted.org/packages/67/f5/0be9a151a3aac5ace0d508c612943cce1dbae87614db4de107a164c4613f/sandcastle-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ad7348dd35c8ba54090e18db28728c66", "sha256": "ef4e2d64838d4d3e7ce4003c13cee7e0b3e1ff2771182e7011678ffada8c9e74"}, "downloads": -1, "filename": "sandcastle-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "ad7348dd35c8ba54090e18db28728c66", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 17025, "upload_time": "2019-07-04T15:33:25", "upload_time_iso_8601": "2019-07-04T15:33:25.625613Z", "url": "https://files.pythonhosted.org/packages/7c/7b/939c2f2a584c54b5887a64e243b35bec2548a9d6cfae1702c483f1415adb/sandcastle-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8ea7f64e3e44b8b83022e129773ce82a", "sha256": "71aea7b740b4f42acfd997d56fd4d408cc887437079c0f721ea92cb6d5eeb513"}, "downloads": -1, "filename": "sandcastle-0.1.0.tar.gz", "has_sig": false, "md5_digest": "8ea7f64e3e44b8b83022e129773ce82a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 24119, "upload_time": "2019-07-04T15:33:27", "upload_time_iso_8601": "2019-07-04T15:33:27.881160Z", "url": "https://files.pythonhosted.org/packages/67/f5/0be9a151a3aac5ace0d508c612943cce1dbae87614db4de107a164c4613f/sandcastle-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:58:51 2020"}