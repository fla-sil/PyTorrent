{"info": {"author": "Yoshida Shin", "author_email": "wbcchsyn@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Topic :: Software Development", "Topic :: Software Development :: Libraries", "Topic :: Software Development :: Libraries :: Python Modules"], "description": ".. -*- coding: utf-8 -*-\n\n==============\n thread_utils\n==============\n\nWrapper of threading module providing Actor, Future interface.\n\nThis module provides decorator to make function and method run in background\nthread, and thread pool class to pool worker threads. The caller thread can\nretrieve the return value or the unhandled exception in the background thread\nusing the future object. The finished threads are joined by garbage collection.\n\nRequirements\n============\n\n* Python 2.7 or 3.3 or 3.4.\n* Unix or Linux platforms which support python thread module.\n\nSetup\n=====\n\n* Install from pip\n  ::\n\n     $ sudo pip install thread_utils\n\n* Install from git.\n  ::\n\n    $ git clone https://github.com/wbcchsyn/python-thread_utils.git\n    $ cd python-thread_utils\n    $ sudo python setup.py install\n\nUsage\n=====\nThis module defines the following functions and classes.\n\n  thread_utils.actor(daemon=True)\n\n    Decorator to create a worker thread and to invoke the callable there.\n\n    The decorated callable returns a Future object immediately and invoked\n    callable starts to run in worker thread. If argument \\`daemon\\' is True,\n    the worker thread will be daemonic; otherwise not. Python program exits\n    when only daemon threads are left. i.e, the program never ends before all\n    non daemonic threads are finished.\n\n    In the following example, function sleep_sort print positive numbers in\n    asending order. The main thread will terminate soon, however workers\n    display numbers after that.\n    ::\n\n       \"\"\"\n       Print numbers in asending order using non daemonic workers.\n       The main thread will terminate soon and after that workers do each task.\n       \"\"\"\n\n       import thread_utils\n       import time\n\n       @thread_utils.actor(daemon=False)\n       def _sleep_print(n):\n           time.sleep(n)\n           print n\n\n       def sleep_sort(un_sorted_list):\n           \"\"\"\n           Print positive numbers in asending order.\n           \"\"\"\n\n           for i in un_sorted_list:\n               _sleep_print(i)\n\n       sleep_sort([3,1,4,2]) # Numbers are displayed in asending this order.\n\n\n    The decorated callable returns a Future object immediately; it monitors\n    invoked callable progress and stores the result. The foreground thread can\n    retrieve the result of invoked callable through the future object like\n    as follows.\n    ::\n\n       import thread_utils\n       import time\n\n       @thread_utils.actor(daemon=True)\n       def add(m, n):\n           time.sleep(m)\n           return m + n\n\n       future = add(3, 5)\n       print \"Task started\"\n       print future.receive() # Blocks for 3 seconds and display \"8\".\n\n    See `Future Objects`_ for more information abaout it.\n\n    This decorator doesn't affect to thread safty, so it depends only on the\n    invoked callable whether the decorated will be thread safe or not.\n\n  thread_utils.async(daemon=True)\n\n    Alias to thread_utils.actor\n\n  thread_utils.synchronized\n\n    Decorator to restrict from simultaneous access from 2 or more than 2\n    threads.\n\n    Decorated callable can be accessible from only one thread. If 2 or more\n    than 2 threads try calling at the same time, only the 1st thread starts\n    to run and the others are blocked. It is after the 1st thread finishes when\n    2nd threads starts to run.\n    ::\n\n       import thread_utils\n       import time\n\n       @thread_utils.synchronized\n       def foo():\n           time.sleep(1)\n\n       @thread_utils.async(daemon=False)\n       def create_worker():\n           print \"Worker is started.\"\n           foo()\n           print \"Worker is finished.\"\n\n\n       # Text \"Worker is started.\" will be printed 10 times at once.\n       # On the other hand \"Worker is finished.\" will be printed every second.\n       for i in xrange(10):\n           create_worker()\n\nFuture Objects\n--------------\n\nThis class monitors associated callable progress and stores its return value or\nunhandled exception. Future.is_finished() returns whether the invoked callable\nis finished or not. Future.receive(timeout=None) blocks until timeout or\ninvoked callable is finished and returns what the callable returns or raises\nits unhandled exception.\n\nIf the future object is generated by thread_utils.Pool.send method, and if the\ninvoked task is canceled before the task is started, this method raises\nCancelError.\n\nThe instance will be created by thread_utils.Pool.send method or callable\ndecorated by thread_utils.async.\n\nFuture.is_finished()\n\n  Return True if invoked callable is finished. Otherwise, return False.\n\nFuture.receive(timeout=None)\n\n  Block until timeout or invoked callable is finished and returns what the\n  callable returned or raises its unhandled exception.\n\n  When argument \\`timeout\\' is present and is not None, it shoule be int or\n  floating number. This method raises TimeoutError if task won't be finished\n  before timeout.\n\nPool Objects\n------------\n\nThis class pools worker threads and do tasks parallel using them.\n\n\\`send\\' method queues specified callable with the arguments and returns a\nFuture object immediately. The returned future object monitors the invoked\ncallable progress and stores the result.\n\nThe workers are reused for many times, so after using this object, kill method\nmust be called to join workers except for used in with statement.\n\nAll public methods of this class are thread safe.\n\nclass thread_utils.Pool(worker_size=1, loop_count=sys.maxint, daemon=True)\n\n  All arguments are optional. Argument \\`worker_size\\' specifies the number of\n  the worker thread. The object can do this number of tasks at the same time\n  parallel. Each worker will invoke callable \\`loop_count\\' times. After that,\n  the worker kill itself and a new worker is created.\n\n  If the argument \\`daemon\\' is True, the worker threads will be daemonic, or\n  not. Python program exits when only daemon threads are left.\n\n  This constructor is thread safe.\n\n  Pool.send(func, \\*args, \\*\\*kwargs)\n\n    Queue specified callable with the arguments and returns a Future object.\n\n    Argument \\`func \\' is a callable object invoked by workers, and \\*args and\n    \\*\\*kwargs are arguments to be passed to the callable.\n\n    The returned Future object monitors the progress of invoked callable and\n    stores the result. The result can be accessed through the Future instance.\n\n    See `Future Objects`_ for more detail abaout the return value.\n\n    This method raises DeadPoolError if called after kill method is called.\n\n  Pool.kill(force=False, block=False)\n\n    Set internal flag and make worker threads stop.\n\n    If the argument \\`force\\' is True, all queued tasks are canceled; the\n    workers will stop after their current task is finished. In this case, tasks\n    not started before this method is called will be left undone. If a Future\n    instance is related to canceled task and the receive method is called, it\n    will raise CancelError. The default value is False.\n\n    If the argument \\`block\\' is True, it blocks until all workers finished\n    their tasks. Otherwise, it returns immediately. The default is False.\n    If this method is called in a task with argument block is True, dead lock\n    will occur.\n\n    If \\`send\\' or \\`set_worker_size\\' is called after this methos is called,\n    it raises DeadPoolError.\n\n    This method can be called many times.\n    If argument force is True, cancel undone tasks then. If argument block\n    is True, it blocks until all workers done tasks.\n\n    If this class is used in \\`with\\' statement, this method is called when\n    block exited with default arguments, i.e. force=False and block=False.\n    Otherwise, this method must be called after finished using the object, or\n    the worker threads will not end till the program ends. (Or, if the workers\n    are daemonic, dead lock occurs and program will never ends.)\n\n  For example, the following program creates pool with worker_size = 3. so\n  display 3 messages every seconds. The Pool will be killed soon, but the\n  worker do all tasks to be sent.\n  ::\n\n     import thread_utils\n     import time\n\n     def message(msg):\n         time.sleep(1)\n         return msg\n\n     pool = thread_utils.Pool(worker_size=3)\n     futures = []\n     for i in xrange(7):\n         futures.append(pool.send(message, \"Message %d.\" % i))\n     pool.kill()\n\n     # First, sleep one second and \"Message 0\", \"Message 1\", \"Message 2\"\n     # will be displayed.\n     # After one second, Message 3 - 5 will be displayed.\n     # Finally, \"Message 6\" will be displayed and program will exit.\n     for f in futures:\n         print f.receive()\n\n  It is not necessary to call kill method if using with statement.\n  ::\n\n     import thread_utils\n     import time\n\n     def message(msg):\n         time.sleep(1)\n         return msg\n\n     pool = thread_utils.Pool(worker_size=3)\n     futures = []\n     with thread_utils.Pool(worker_size=3) as pool:\n         for i in xrange(7):\n             futures.append(pool.send(message, \"Message %d.\" % i))\n\n     for f in futures:\n         print f.receive()\n\n  Pool.cancel()\n\n    Cancel all tasks in the Queue.\n\n    Cancel all tasks without killing pool. This method can be called whenever,\n    Even after the pool is killed.\n\n    Tasks are dequeued when it is started to do and tasks being done are left\n    unchanged. So this method can be called from task. (Of corse, it can be\n    called from outsidde of the task, too.)\n\n  Pool.inspect()\n\n    Return tuple which indicate the instance status.\n\n    The return value is a tuple of 3 ints. The format is as follows.\n    (worker size, tasks currently being done, queued undone tasks)\n\n    The values are only indication.\n    Even the instance itself doesn't know the accurate values.\n\n  Pool.set_worker_size()\n\n    Change worker size.\n\n    This method set the worker size and return soon. The workers will\n    created soon when increasing,howeve, It could take some time when\n    decreasing because workers can't stop while doing a task.\n\n    This method raises DeadPoolError if called after kill method is called.\n\nDevelopment\n===========\n\nInstall requirements to developing and set pre-commit hook.\n\n::\n\n    $ git clone https://github.com/wbcchsyn/python-thread_utils.git\n    $ cd python-thread_utils\n    $ pip install -r dev_utils/requirements.txt\n    $ ln -s ../../dev_utils/pre-commit .git/hooks/pre-commit\n\nCHANGELOG\n=========\n\n1.0.0 (2015/12/08)\n------------------\n\n* Change the behavior when Pool.kill method called twice or more than twice.\n* Add Pool.inspect and Pool.cancel method.\n* Enable to change worker size of Pool instance after created.\n* Performance tuning.\n* Stop to support python2.6, 3.1 and 3.2.\n\n0.1.3 (2015/03/15)\n------------------\n\n* Bug Fix: Pool.kill method could raise Queue.Empty error.\n* Performance tuning.\n\n0.1.2 (2014/09/14)\n------------------\n\n* Create actor alias to async decorator.\n* Add optional arguments 'force' and 'block' to Pool.kill method.\n* Future.receive method raise DeadPoolError if the Pool is killed before task\n  is done.\n* Update documents.\n\n0.1.1 (2014/06/13)\n------------------\n\n* Delete unused files.\n\n0.1.0 (2014/06/12)\n------------------\n\n* First release.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/wbcchsyn/python-thread_utils", "keywords": null, "license": "Apache License 2.0", "maintainer": null, "maintainer_email": null, "name": "thread_utils", "package_url": "https://pypi.org/project/thread_utils/", "platform": "linux,unix", "project_url": "https://pypi.org/project/thread_utils/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/wbcchsyn/python-thread_utils"}, "release_url": "https://pypi.org/project/thread_utils/1.0.1/", "requires_dist": null, "requires_python": null, "summary": "Wrapper of threading module providing Actor interface.", "version": "1.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Wrapper of threading module providing Actor, Future interface.</p>\n<p>This module provides decorator to make function and method run in background\nthread, and thread pool class to pool worker threads. The caller thread can\nretrieve the return value or the unhandled exception in the background thread\nusing the future object. The finished threads are joined by garbage collection.</p>\n<div id=\"requirements\">\n<h2>Requirements</h2>\n<ul>\n<li>Python 2.7 or 3.3 or 3.4.</li>\n<li>Unix or Linux platforms which support python thread module.</li>\n</ul>\n</div>\n<div id=\"setup\">\n<h2>Setup</h2>\n<ul>\n<li><p>Install from pip</p>\n<pre>$ sudo pip install thread_utils\n</pre>\n</li>\n<li><p>Install from git.</p>\n<pre>$ git clone https://github.com/wbcchsyn/python-thread_utils.git\n$ cd python-thread_utils\n$ sudo python setup.py install\n</pre>\n</li>\n</ul>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>This module defines the following functions and classes.</p>\n<blockquote>\n<p>thread_utils.actor(daemon=True)</p>\n<blockquote>\n<p>Decorator to create a worker thread and to invoke the callable there.</p>\n<p>The decorated callable returns a Future object immediately and invoked\ncallable starts to run in worker thread. If argument `daemon\u2019 is True,\nthe worker thread will be daemonic; otherwise not. Python program exits\nwhen only daemon threads are left. i.e, the program never ends before all\nnon daemonic threads are finished.</p>\n<p>In the following example, function sleep_sort print positive numbers in\nasending order. The main thread will terminate soon, however workers\ndisplay numbers after that.</p>\n<pre>\"\"\"\nPrint numbers in asending order using non daemonic workers.\nThe main thread will terminate soon and after that workers do each task.\n\"\"\"\n\nimport thread_utils\nimport time\n\n@thread_utils.actor(daemon=False)\ndef _sleep_print(n):\n    time.sleep(n)\n    print n\n\ndef sleep_sort(un_sorted_list):\n    \"\"\"\n    Print positive numbers in asending order.\n    \"\"\"\n\n    for i in un_sorted_list:\n        _sleep_print(i)\n\nsleep_sort([3,1,4,2]) # Numbers are displayed in asending this order.\n</pre>\n<p>The decorated callable returns a Future object immediately; it monitors\ninvoked callable progress and stores the result. The foreground thread can\nretrieve the result of invoked callable through the future object like\nas follows.</p>\n<pre>import thread_utils\nimport time\n\n@thread_utils.actor(daemon=True)\ndef add(m, n):\n    time.sleep(m)\n    return m + n\n\nfuture = add(3, 5)\nprint \"Task started\"\nprint future.receive() # Blocks for 3 seconds and display \"8\".\n</pre>\n<p>See <a href=\"#future-objects\" rel=\"nofollow\">Future Objects</a> for more information abaout it.</p>\n<p>This decorator doesn\u2019t affect to thread safty, so it depends only on the\ninvoked callable whether the decorated will be thread safe or not.</p>\n</blockquote>\n<p>thread_utils.async(daemon=True)</p>\n<blockquote>\nAlias to thread_utils.actor</blockquote>\n<p>thread_utils.synchronized</p>\n<blockquote>\n<p>Decorator to restrict from simultaneous access from 2 or more than 2\nthreads.</p>\n<p>Decorated callable can be accessible from only one thread. If 2 or more\nthan 2 threads try calling at the same time, only the 1st thread starts\nto run and the others are blocked. It is after the 1st thread finishes when\n2nd threads starts to run.</p>\n<pre>import thread_utils\nimport time\n\n@thread_utils.synchronized\ndef foo():\n    time.sleep(1)\n\n@thread_utils.async(daemon=False)\ndef create_worker():\n    print \"Worker is started.\"\n    foo()\n    print \"Worker is finished.\"\n\n\n# Text \"Worker is started.\" will be printed 10 times at once.\n# On the other hand \"Worker is finished.\" will be printed every second.\nfor i in xrange(10):\n    create_worker()\n</pre>\n</blockquote>\n</blockquote>\n<div id=\"future-objects\">\n<h3>Future Objects</h3>\n<p>This class monitors associated callable progress and stores its return value or\nunhandled exception. Future.is_finished() returns whether the invoked callable\nis finished or not. Future.receive(timeout=None) blocks until timeout or\ninvoked callable is finished and returns what the callable returns or raises\nits unhandled exception.</p>\n<p>If the future object is generated by thread_utils.Pool.send method, and if the\ninvoked task is canceled before the task is started, this method raises\nCancelError.</p>\n<p>The instance will be created by thread_utils.Pool.send method or callable\ndecorated by thread_utils.async.</p>\n<p>Future.is_finished()</p>\n<blockquote>\nReturn True if invoked callable is finished. Otherwise, return False.</blockquote>\n<p>Future.receive(timeout=None)</p>\n<blockquote>\n<p>Block until timeout or invoked callable is finished and returns what the\ncallable returned or raises its unhandled exception.</p>\n<p>When argument `timeout\u2019 is present and is not None, it shoule be int or\nfloating number. This method raises TimeoutError if task won\u2019t be finished\nbefore timeout.</p>\n</blockquote>\n</div>\n<div id=\"pool-objects\">\n<h3>Pool Objects</h3>\n<p>This class pools worker threads and do tasks parallel using them.</p>\n<p>`send\u2019 method queues specified callable with the arguments and returns a\nFuture object immediately. The returned future object monitors the invoked\ncallable progress and stores the result.</p>\n<p>The workers are reused for many times, so after using this object, kill method\nmust be called to join workers except for used in with statement.</p>\n<p>All public methods of this class are thread safe.</p>\n<p>class thread_utils.Pool(worker_size=1, loop_count=sys.maxint, daemon=True)</p>\n<blockquote>\n<p>All arguments are optional. Argument `worker_size\u2019 specifies the number of\nthe worker thread. The object can do this number of tasks at the same time\nparallel. Each worker will invoke callable `loop_count\u2019 times. After that,\nthe worker kill itself and a new worker is created.</p>\n<p>If the argument `daemon\u2019 is True, the worker threads will be daemonic, or\nnot. Python program exits when only daemon threads are left.</p>\n<p>This constructor is thread safe.</p>\n<p>Pool.send(func, *args, **kwargs)</p>\n<blockquote>\n<p>Queue specified callable with the arguments and returns a Future object.</p>\n<p>Argument `func \u2018 is a callable object invoked by workers, and *args and\n**kwargs are arguments to be passed to the callable.</p>\n<p>The returned Future object monitors the progress of invoked callable and\nstores the result. The result can be accessed through the Future instance.</p>\n<p>See <a href=\"#future-objects\" rel=\"nofollow\">Future Objects</a> for more detail abaout the return value.</p>\n<p>This method raises DeadPoolError if called after kill method is called.</p>\n</blockquote>\n<p>Pool.kill(force=False, block=False)</p>\n<blockquote>\n<p>Set internal flag and make worker threads stop.</p>\n<p>If the argument `force\u2019 is True, all queued tasks are canceled; the\nworkers will stop after their current task is finished. In this case, tasks\nnot started before this method is called will be left undone. If a Future\ninstance is related to canceled task and the receive method is called, it\nwill raise CancelError. The default value is False.</p>\n<p>If the argument `block\u2019 is True, it blocks until all workers finished\ntheir tasks. Otherwise, it returns immediately. The default is False.\nIf this method is called in a task with argument block is True, dead lock\nwill occur.</p>\n<p>If `send\u2019 or `set_worker_size\u2019 is called after this methos is called,\nit raises DeadPoolError.</p>\n<p>This method can be called many times.\nIf argument force is True, cancel undone tasks then. If argument block\nis True, it blocks until all workers done tasks.</p>\n<p>If this class is used in `with\u2019 statement, this method is called when\nblock exited with default arguments, i.e. force=False and block=False.\nOtherwise, this method must be called after finished using the object, or\nthe worker threads will not end till the program ends. (Or, if the workers\nare daemonic, dead lock occurs and program will never ends.)</p>\n</blockquote>\n<p>For example, the following program creates pool with worker_size = 3. so\ndisplay 3 messages every seconds. The Pool will be killed soon, but the\nworker do all tasks to be sent.</p>\n<pre>import thread_utils\nimport time\n\ndef message(msg):\n    time.sleep(1)\n    return msg\n\npool = thread_utils.Pool(worker_size=3)\nfutures = []\nfor i in xrange(7):\n    futures.append(pool.send(message, \"Message %d.\" % i))\npool.kill()\n\n# First, sleep one second and \"Message 0\", \"Message 1\", \"Message 2\"\n# will be displayed.\n# After one second, Message 3 - 5 will be displayed.\n# Finally, \"Message 6\" will be displayed and program will exit.\nfor f in futures:\n    print f.receive()\n</pre>\n<p>It is not necessary to call kill method if using with statement.</p>\n<pre>import thread_utils\nimport time\n\ndef message(msg):\n    time.sleep(1)\n    return msg\n\npool = thread_utils.Pool(worker_size=3)\nfutures = []\nwith thread_utils.Pool(worker_size=3) as pool:\n    for i in xrange(7):\n        futures.append(pool.send(message, \"Message %d.\" % i))\n\nfor f in futures:\n    print f.receive()\n</pre>\n<p>Pool.cancel()</p>\n<blockquote>\n<p>Cancel all tasks in the Queue.</p>\n<p>Cancel all tasks without killing pool. This method can be called whenever,\nEven after the pool is killed.</p>\n<p>Tasks are dequeued when it is started to do and tasks being done are left\nunchanged. So this method can be called from task. (Of corse, it can be\ncalled from outsidde of the task, too.)</p>\n</blockquote>\n<p>Pool.inspect()</p>\n<blockquote>\n<p>Return tuple which indicate the instance status.</p>\n<p>The return value is a tuple of 3 ints. The format is as follows.\n(worker size, tasks currently being done, queued undone tasks)</p>\n<p>The values are only indication.\nEven the instance itself doesn\u2019t know the accurate values.</p>\n</blockquote>\n<p>Pool.set_worker_size()</p>\n<blockquote>\n<p>Change worker size.</p>\n<p>This method set the worker size and return soon. The workers will\ncreated soon when increasing,howeve, It could take some time when\ndecreasing because workers can\u2019t stop while doing a task.</p>\n<p>This method raises DeadPoolError if called after kill method is called.</p>\n</blockquote>\n</blockquote>\n</div>\n</div>\n<div id=\"development\">\n<h2>Development</h2>\n<p>Install requirements to developing and set pre-commit hook.</p>\n<pre>$ git clone https://github.com/wbcchsyn/python-thread_utils.git\n$ cd python-thread_utils\n$ pip install -r dev_utils/requirements.txt\n$ ln -s ../../dev_utils/pre-commit .git/hooks/pre-commit\n</pre>\n</div>\n<div id=\"changelog\">\n<h2>CHANGELOG</h2>\n<div id=\"id1\">\n<h3>1.0.0 (2015/12/08)</h3>\n<ul>\n<li>Change the behavior when Pool.kill method called twice or more than twice.</li>\n<li>Add Pool.inspect and Pool.cancel method.</li>\n<li>Enable to change worker size of Pool instance after created.</li>\n<li>Performance tuning.</li>\n<li>Stop to support python2.6, 3.1 and 3.2.</li>\n</ul>\n</div>\n<div id=\"id2\">\n<h3>0.1.3 (2015/03/15)</h3>\n<ul>\n<li>Bug Fix: Pool.kill method could raise Queue.Empty error.</li>\n<li>Performance tuning.</li>\n</ul>\n</div>\n<div id=\"id3\">\n<h3>0.1.2 (2014/09/14)</h3>\n<ul>\n<li>Create actor alias to async decorator.</li>\n<li>Add optional arguments \u2018force\u2019 and \u2018block\u2019 to Pool.kill method.</li>\n<li>Future.receive method raise DeadPoolError if the Pool is killed before task\nis done.</li>\n<li>Update documents.</li>\n</ul>\n</div>\n<div id=\"id4\">\n<h3>0.1.1 (2014/06/13)</h3>\n<ul>\n<li>Delete unused files.</li>\n</ul>\n</div>\n<div id=\"id5\">\n<h3>0.1.0 (2014/06/12)</h3>\n<ul>\n<li>First release.</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 1851586, "releases": {"0.0.1": [{"comment_text": "built for Darwin-13.0.0", "digests": {"md5": "e0987dcd7c3e21e7fe7efab6ea6c683e", "sha256": "0535de57155f1b6952a82dda005f04aeef8abb3c7eb3062c5a04e97e008a1e7b"}, "downloads": -1, "filename": "thread_utils-0.0.1.macosx-10.9-intel.tar.gz", "has_sig": false, "md5_digest": "e0987dcd7c3e21e7fe7efab6ea6c683e", "packagetype": "bdist_dumb", "python_version": "any", "requires_python": null, "size": 10101, "upload_time": "2013-12-10T12:14:48", "upload_time_iso_8601": "2013-12-10T12:14:48.522870Z", "url": "https://files.pythonhosted.org/packages/15/70/7c191c0ece2b995c9c0319fe1c0327ba6f65d7f0cc66537babfe60d52da2/thread_utils-0.0.1.macosx-10.9-intel.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "de026e62867a847a3b6941ec0d49436e", "sha256": "07e75676f701717edb6a7102106a5507aa076a2daa61a6507e22342a8096f1f9"}, "downloads": -1, "filename": "thread_utils-0.0.1-py2.7.egg", "has_sig": false, "md5_digest": "de026e62867a847a3b6941ec0d49436e", "packagetype": "bdist_egg", "python_version": "2.7", "requires_python": null, "size": 17875, "upload_time": "2013-12-10T12:14:50", "upload_time_iso_8601": "2013-12-10T12:14:50.504573Z", "url": "https://files.pythonhosted.org/packages/a2/d7/55738bb6140ecdaeefdfe5e19e91984906fae69821738a113ffd75dfefdd/thread_utils-0.0.1-py2.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "56a6e94364a60a8d0cff29c6042eba54", "sha256": "4f318255175c57ef9d4dc4d592cf0ecbb86e77288a3eddbfe1069f061a8b7c23"}, "downloads": -1, "filename": "thread_utils-0.0.1.tar.gz", "has_sig": false, "md5_digest": "56a6e94364a60a8d0cff29c6042eba54", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12469, "upload_time": "2013-12-10T12:14:45", "upload_time_iso_8601": "2013-12-10T12:14:45.815342Z", "url": "https://files.pythonhosted.org/packages/7a/9b/70bc364895fc7c0f708f478f0fdc058730371c5be796656bc1652812511a/thread_utils-0.0.1.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "de03c4042a72900e6284e18707e09b7a", "sha256": "410fdf85786dcc3e56e099c14feccf01692be2a68df87242e92f6da3d2a42a54"}, "downloads": -1, "filename": "thread_utils-0.1.0.tar.gz", "has_sig": false, "md5_digest": "de03c4042a72900e6284e18707e09b7a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11921, "upload_time": "2014-07-12T14:02:02", "upload_time_iso_8601": "2014-07-12T14:02:02.537619Z", "url": "https://files.pythonhosted.org/packages/5b/aa/f863ddb51ba88548d900cdf26c84d956665ae8d1ccf164bf8f9f242f2501/thread_utils-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "76a27ec68dd30d9e1ca1e465b253d857", "sha256": "8e91c167b910feee5219145dfc99617a2f5a9ccdd6e329c12e54a472d0421c41"}, "downloads": -1, "filename": "thread_utils-0.1.1.tar.gz", "has_sig": false, "md5_digest": "76a27ec68dd30d9e1ca1e465b253d857", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12759, "upload_time": "2014-07-12T17:28:23", "upload_time_iso_8601": "2014-07-12T17:28:23.303057Z", "url": "https://files.pythonhosted.org/packages/53/51/555b3fe14021fd1f478a5fd27ebb71e2eef488a9a09c91e4a54d3b224ba5/thread_utils-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "acdbc7d9d4af050893aec1a600aec33b", "sha256": "9b527041eea3b0e41915c688a327458f50e43342f89f7844d81df7283d715839"}, "downloads": -1, "filename": "thread_utils-0.1.2.tar.gz", "has_sig": false, "md5_digest": "acdbc7d9d4af050893aec1a600aec33b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15320, "upload_time": "2014-09-15T02:26:35", "upload_time_iso_8601": "2014-09-15T02:26:35.520014Z", "url": "https://files.pythonhosted.org/packages/1b/5c/f498ac03ca18f690bfbcced660e9258c56c76de7857eff7a4671fe400d5d/thread_utils-0.1.2.tar.gz", "yanked": false}], "0.1.3": [], "1.0.0": [{"comment_text": "", "digests": {"md5": "e54bfd3856348b7f79bdc38a76334211", "sha256": "4f2547b22bbb1e7a96f7ca877d3a479368a28513d7d9862b941ef7278dc34ee7"}, "downloads": -1, "filename": "thread_utils-1.0.0.tar.gz", "has_sig": false, "md5_digest": "e54bfd3856348b7f79bdc38a76334211", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17594, "upload_time": "2015-12-08T06:20:11", "upload_time_iso_8601": "2015-12-08T06:20:11.124190Z", "url": "https://files.pythonhosted.org/packages/a9/3f/32a2b80d65ec3d85dde5b5746f2d27ab79997440454d4d960e70fd71c9f2/thread_utils-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "af721c290436f78bbd506ab22dd06439", "sha256": "f68903fc022ec56c1961fc372ba921d7cc34a6fc090e46f45dd17fb96621d2f2"}, "downloads": -1, "filename": "thread_utils-1.0.1.tar.gz", "has_sig": false, "md5_digest": "af721c290436f78bbd506ab22dd06439", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17752, "upload_time": "2015-12-08T07:59:10", "upload_time_iso_8601": "2015-12-08T07:59:10.949213Z", "url": "https://files.pythonhosted.org/packages/9e/06/6089e7a75f5532ad1c9c1700ab305268c25f37c7e5de55e0436e7bc746ce/thread_utils-1.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "af721c290436f78bbd506ab22dd06439", "sha256": "f68903fc022ec56c1961fc372ba921d7cc34a6fc090e46f45dd17fb96621d2f2"}, "downloads": -1, "filename": "thread_utils-1.0.1.tar.gz", "has_sig": false, "md5_digest": "af721c290436f78bbd506ab22dd06439", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17752, "upload_time": "2015-12-08T07:59:10", "upload_time_iso_8601": "2015-12-08T07:59:10.949213Z", "url": "https://files.pythonhosted.org/packages/9e/06/6089e7a75f5532ad1c9c1700ab305268c25f37c7e5de55e0436e7bc746ce/thread_utils-1.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:53:45 2020"}