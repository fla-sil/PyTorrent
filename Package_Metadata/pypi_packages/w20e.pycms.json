{"info": {"author": "D.A.Dokter, H.Bouma", "author_email": "dokter@w20e.com, bouma@w20e.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Framework :: Pyramid", "Intended Audience :: Developers", "License :: Freely Distributable", "Programming Language :: Python", "Topic :: Internet :: WWW/HTTP :: Site Management", "Topic :: Software Development :: Libraries :: Application Frameworks"], "description": "w20e.pycms\n==========\n\nOnly fools and nerds create their own CMS nowadays. Hurray! Anyway, so\nhere it is, w20e.pycms. Using the Pyramid framework as its base,\nbuilding on top of good old Zope (and some Plone) concepts. The CMS is\ncreated using these main concepts:\n\n* ZODB as database\n* ZCML as configuration/glue language\n* small core\n* optional components (like search, catalog, sharing); just include what\n  you like\n\nThe CMS is a framework, not an out of the box app. What you'll need to\ndo is create your own Pyramid app, using the CMS as base. We've tried\nto make this as easy as possible: use w20e.pycms.sitemaker (to be\nfound on github or pypi) to obtain a paster template for your app. Run\npaster to create your app, and there you go...\n\n\nWhy?\n----\n\nw20e.pycms is Yet Another CMS, but without using the acronym.  Why,\nfor the flying spaghetti monsters sake another CMS? Well, you know how\nit goes. You use Plone for some years, find out that when your\nfavourite tool is a hammer, all problems have a rather strong tendency\ntowards nailishness... Then Pyramid comes along, giving you the best\nof Plone (ZODB, Zope Component Architecture, ZCML, Chameleon, etc.)\nfor creating lightweight apps. Then you need a Page with\nWYSIWYG... then you need search... sharing. Then you wake up with a\nbasic CMS in your hands. May as well share it so you can decide for\nyourself whether it is worth your while. I mean, you dont __have__ to\nuse it!\n\nAnyway, read on if you like...\n\nFor whom..?\n-----------\n\nw20e.pycms is not for the faint of heart, nor for people that cannot\nread Python code, hate programming, think that the use of XML for\nconfiguration is sooo 1990, are convinced that Windows 95 was the best\nOS ever or would preferrably use a rocket launcher to deal with vermin\nin the kitchen. It _is_ on the other hand, for those that rank\nfuckit.js among the best JS libraries ever, enjoy Terry Pratchett,\nlove buildout en ZCML and think that beer is so much more that just a\nbreakfast drink.\n\nFeatures\n--------\n\nOur little CMS gives you a framework to build your sites upon, if\nyou're not targeting the enterprise market. If you do, be gone (to the\nplone.org site)!\n\nPyCMS gives you:\n\n * ZODB for storing data\n * blobstorage\n * user & group management\n * search, using repoze.catalog (optional)\n * creating and maintaining pages\n * an easily extendable framework for new content types\n * a lot of ZCML configuration\n * CMS design based on (Twitter) Bootstrap\n\n\nGetting started\n---------------\n\nWe assume that you know how to use buildout, create virtual\nenvironments, like to use paster, etc. But this is only one way to get\nthings going...\n\nFirst, create a package for your project, requiring:\n\n  w20e.pycms\n\nThe easiest way to do so, is using our paster template\npycms_project. Install the w20e.pycms.sitemaker package (get it from\ngithub), something along these lines:\n\n  # virtualenv <env>\n  # cd <env>; ./bin/activate\n  # ./bin/easy_install w20e.pycms.sitemaker\n  # cd <wherever you'd like your app sources>\n  # paster create -t pycms_project <package name>\n\nIf you really want to do it by hand, create an __init__ file for your\nPyramid app like this:\n\n  from w20e.pycms import make_pycms_app\n\n\n  def main(global_config, **settings):\n\n    return make_pycms_app(__package__, **settings)\n\nand Bob might be your Uncle.\n\nSecondly, create a buildout and virtualenv for your stuff. Why not use\nw20e.buildoutskel? Install it using easy_install, and\n\n  # cd <whereever you want your buildout files>\n  # paster create -t buildout\n\nand answer <package name> to the project name question, and pycms to\nthe type question.\nYou now have a bunch of buildout files, almost ready to run your app!\n\nYou most likely will consider creating a buildout-my.cfg that extends\nbuildout-base.cfg, and adds some develop paths, like:\n\ndevelop =\n  <that path where your pycms app was created, and where the setup.py resides...>\n\nLast, run python bootstrap.py and then buildout with your config file.\n\nNow it's time to rev up the engine, and see what has happend. Run your\napp like so (within the buildout dir):\n\n  # ./bin/paster serve dvl.ini [--reload]\n\nDirect your favorite browser (most likely Lynx or Mosaic) to\nhttp://localhost:6543/ and sit back and relax!\n\n\nConfiguration\n\n-------------\n\nYou may or may not be totally satisfied with the result so far. If\nthis is utterly your idea of a superduper web app, good on ya! If not,\nread on...\n\n\n- Add the default management and public css / js files (if you want):\n\n add this to your configure.zcml:\n\n <include package=\"w20e.pycms\" file=\"public_resources.zcml\"/>\n <include package=\"w20e.pycms\" file=\"manage_resources.zcml\"/>\n\n- Include any other CSS and JS you like, using the pycms zcml directives:\n\n  <pycms:css\n    cssfile=\"your.css\"\n    csstarget=\"public\"\n    media=\"screen\"\n    />\n\n  <pycms:js\n    jsfile=\"your.js\"\n    jstarget=\"public\"\n    />\n\n- Override assets like favicon and robots.txt:\n\n  <asset\n    to_override=\"w20e.pycms:static/favicon.png\"\n    override_with=\"yourapp:static/favicon.png.png\"\n    />\n\n- Most likely you'll want to override the 'content' macro, that is\n  called to display a page. To do this, make your own pt file, make\n  that extend 'main.macros['master'], and let it fill the 'body' slot:\n\n<metal:define-macro define-macro=\"master\"\n                    metal:extend-macro=\"main.macros['master']\">\n\n  <html xmlns=\"http://www.w3.org/1999/xhtml\"\n      xml:lang=\"en\"\n      i18n:domain=\"w20e\"\n      xmlns:tal=\"http://xml.zope.org/namespaces/tal\"\n      >\n\n    <head/>\n\n    <body metal:fill-slot=\"body\">\n      Good morning Grommit...\n\n      <metal:define-slot define-slot=\"content\" />\n    </body>\n  </html>\n  </metal:define-macro>\n\nand add to your configure.zcml (always assuming you called your macro\nmain.pt):\n\n  <pycms:macro\n     name=\"body\"\n     ptfile=\"yourpackage:templates/main.pt\"\n     />\n\n\nUsing the CMS: core concepts\n----------------------------\n\nThe core CMS consists solely of pages. Pages are just things with\ntext. Nothing serious. You may want to create your own content types,\nactions, etc. Luckily that's not hard to do. Best way is to look at\nexisting code... Anyway, some examples here:\n\n\nActions\n-------\n\nYou can register actions with your content. The currently used setup\nmainly uses 'perspectives' or ways to look at your content. In the\nmanagement interface these are rendered as 'tabs'. Actions are\nconfigured using zcml. Use the action statment as follows:\n\n<pycms:action\n  name=\"users\"\n  target=\"./users\"\n  category=\"perspective\"\n  ctype=\"site\"\n/>\n\nctype is an optional filter.\n\n\nContent types\n-------------\n\nCreate your own content types if you wish. You can register an icon,\nand possible subtypes with your type using:\n\n  <pycms:ctype\n     name=\"your_type_id\"\n     factory=\".models.yourtype.YourType\"\n     subtypes=\"someothertype,someevenothertype\"\n     icon=\"/static/img/yourtype_icon.png\"\n     />\n\nYour actual model should extend either\n  w20e.pycms.models.base.BaseContent\nor\n  w20e.pycms.models.base.BaseFolder.\n\nYou may want to use w20e.forms (read: should) for your model. You can\neither create an xml form that describes your model, or if you insist\non doing things more Pythonic, create your form\nprogrammatically. Checkout out w20e.forms for details.\n\nA simple model looks like this:\n\nfrom w20e.pycms.models.base import BaseContent\n\n\nclass SomethingSimple(BaseContent):\n\n    \"\"\" Well, actually it's more like an 'object'... \"\"\"\n\n    def __init__(self, content_id, data=None):\n\n        BaseContent.__init__(self, content_id, data)\n\n    def base_id(self):\n\n        return self.__data__['title']\n\n    @property\n    def title(self):\n\n        return self.__data__['title']\n\nYou can configure how your form for editing and adding is\nfound. Default is that PyCMS looks for a file in <your package\nhome>/forms/<content type>.xml, so in this case:\n\n  <package home>/forms/somethingsimple.xml\n\nIf you want something completely different, configure an adapter for your\ncontent type that provides a form factory:\n\n  <adapter\n      factory=\".your.Factory\" \n      for=\".your.content.Type\" \n      provides=\"w20e.forms.interfaces.IFormFactory\" />\n\nAnd make sure it actually implements IFormFactory and can create a\nform (w20e.forms.interfaces.IForm).\n\n\nNatures\n-------\n\nAn alternative for defining content types is defining 'natures'. Let's\nface it: what is so special about an event? It is really just a page\nthing with a start- and end date and a location, isn't it? And what\nabout news? Isn't that not very much like a page too? If you agree,\nread on...\n\nA page can be not only a page, but it can also be news-ish, or\nevent-ish. That is it's nature. You can register natures like so:\n\n  <pycms:nature\n      name=\"event\"\n      interface=\"w20e.pycms_events.interfaces.IEvent\"\n      />\n\nThis will make the nature show up in the 'natures' dropdown menu. Now\neither you leave it like this, or you also modify the form for the\npage with an w20e.forms.interfaces.IFormModifier implementation:\n\n  <subscriber\n      for=\"w20e.pycms_events.interfaces.IEvent\"\n      factory=\"w20e.pycms_events.models.event.Event\"\n      provides=\"w20e.forms.interfaces.IFormModifier\"\n      />\n\nAnd create a class Event along these lines:\n\n  from zope.interface import implements\n  from w20e.forms.interfaces import IForm, IFormModifier\n  from w20e.forms.data.field import Field\n  from w20e.forms.model.fieldproperties import FieldProperties\n  from w20e.forms.rendering.control import Input\n  from w20e.forms.rendering.group import FlowGroup\n\n\n  class Event(object):\n\n      implements(IFormModifier)\n\n      def __init__(self, form):\n\n          self.form = form\n\n      def modify(self, form):\n\n          \"\"\" Add begin, end and location to form \"\"\"\n\n          form.data.addField(Field(\"start\"))\n          form.data.addField(Field(\"end\"))\n          form.data.addField(Field(\"location\"))\n\n          grp = FlowGroup(\"eventgroup\", label=\"Event\")\n          grp.addRenderable(Input(\"start\", \"Start of event\",\n                                  extra_classes=\"datetime\",\n                                  bind=\"start\"))\n          grp.addRenderable(Input(\"end\", \"End of event\", bind=\"end\"))\n          grp.addRenderable(Input(\"location\", \"Location\", bind=\"location\"))\n\n          form.view.addRenderable(grp, pos=-1)\n\nOr whatever you think should be added to the page form...\n\n\nrobots.txt\n----------\n\nThe default robots.txt allows all. Override as per your liking...\n\n\nSearch\n------\n\nWould you like search enabled for your site?\n\nAdd this to your configure.zcml:\n\n  <include package=\"w20e.pycms\" file=\"search.zcml\"/>\n\n\nSharing anyone?\n---------------\nWould you like search enabled for your site?\n\nAdd this to your configure.zcml:\n\n  <include package=\"w20e.pycms_sharing\"/>\n\nand this to your setup dependencies (don't forget to run buildout):\n\n  w20e.pycms_sharing\n\n\nSettings\n--------\n\npycms.acl.force_new = True|False\n        Force new version of ACL. All your security data will be lost\npycms.catalog.force_new = True|False\n        Force new version of catalog. All your entries will be lost, but you\n        can just run reindex-catalog and all is well again...\npycms.admin_user = <user>:<pwd>\n        Admin user and password, like so: pycms.admin_user = admin:pipo\npycms.admin_secret = <somesecret>\n        This secret may be used as URL parameter to obtain admin permission\n        Use it wisely!\npycms.minify_css = True|False\n        Minify CSS. Defaults to False\npycms.minify_js = True|False\n        Minify JS. Defaults to False\npycms.logged_in_redirect = <url>\npycms.rootclass = <full dotted classname>\n        Defaults to w20e.pycms.models.site.Site\npycms.roottitle = <string>\n        Defaults to \"Welcome\"\npycms.from_addr\n        Send email as ...\npycms.bcc_addr\n        Send also to bcc\npycms.after_add_redirect\n        Where to go after successfull add\npycms.cancel_add_redirect\n        Where to go after cancelled add\npycms.after_del_redirect\n        Where to go after delete\npycms.tempregister.timout = <int>\n        minimal amount of seconds before a temporary object might be removed\n\n\n1.1.2a\n------\n* json representation of pycms content types\n* upgrade jquery + jqueryui\n* small fixes\n\n1.1.1a\n------\n* initially created objects will have a temporary state, until they\nhave been completed\n* add_macros now within base view class, so it's easier to override\n* validation.js fixed for bootstrap class names\n\n1.0.2a\n======\n* Finally we have a serious (?) licence. Also updated some metadata.\n\n1.0.1a\n======\n* Enabled call to render viewlet through base view", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/wyldebeast-wunderliebe/w20e.pycms/", "keywords": "cms pyramid", "license": "beer-ware", "maintainer": null, "maintainer_email": null, "name": "w20e.pycms", "package_url": "https://pypi.org/project/w20e.pycms/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/w20e.pycms/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/wyldebeast-wunderliebe/w20e.pycms/"}, "release_url": "https://pypi.org/project/w20e.pycms/1.1.2b/", "requires_dist": null, "requires_python": null, "summary": "Pyramid CMS", "version": "1.1.2b", "yanked": false, "html_description": "<div class=\"project-description\">\n            w20e.pycms<br>==========<br><br>Only fools and nerds create their own CMS nowadays. Hurray! Anyway, so<br>here it is, w20e.pycms. Using the Pyramid framework as its base,<br>building on top of good old Zope (and some Plone) concepts. The CMS is<br>created using these main concepts:<br><br>* ZODB as database<br>* ZCML as configuration/glue language<br>* small core<br>* optional components (like search, catalog, sharing); just include what<br>  you like<br><br>The CMS is a framework, not an out of the box app. What you'll need to<br>do is create your own Pyramid app, using the CMS as base. We've tried<br>to make this as easy as possible: use w20e.pycms.sitemaker (to be<br>found on github or pypi) to obtain a paster template for your app. Run<br>paster to create your app, and there you go...<br><br><br>Why?<br>----<br><br>w20e.pycms is Yet Another CMS, but without using the acronym.  Why,<br>for the flying spaghetti monsters sake another CMS? Well, you know how<br>it goes. You use Plone for some years, find out that when your<br>favourite tool is a hammer, all problems have a rather strong tendency<br>towards nailishness... Then Pyramid comes along, giving you the best<br>of Plone (ZODB, Zope Component Architecture, ZCML, Chameleon, etc.)<br>for creating lightweight apps. Then you need a Page with<br>WYSIWYG... then you need search... sharing. Then you wake up with a<br>basic CMS in your hands. May as well share it so you can decide for<br>yourself whether it is worth your while. I mean, you dont __have__ to<br>use it!<br><br>Anyway, read on if you like...<br><br>For whom..?<br>-----------<br><br>w20e.pycms is not for the faint of heart, nor for people that cannot<br>read Python code, hate programming, think that the use of XML for<br>configuration is sooo 1990, are convinced that Windows 95 was the best<br>OS ever or would preferrably use a rocket launcher to deal with vermin<br>in the kitchen. It _is_ on the other hand, for those that rank<br>fuckit.js among the best JS libraries ever, enjoy Terry Pratchett,<br>love buildout en ZCML and think that beer is so much more that just a<br>breakfast drink.<br><br>Features<br>--------<br><br>Our little CMS gives you a framework to build your sites upon, if<br>you're not targeting the enterprise market. If you do, be gone (to the<br>plone.org site)!<br><br>PyCMS gives you:<br><br> * ZODB for storing data<br> * blobstorage<br> * user &amp; group management<br> * search, using repoze.catalog (optional)<br> * creating and maintaining pages<br> * an easily extendable framework for new content types<br> * a lot of ZCML configuration<br> * CMS design based on (Twitter) Bootstrap<br><br><br>Getting started<br>---------------<br><br>We assume that you know how to use buildout, create virtual<br>environments, like to use paster, etc. But this is only one way to get<br>things going...<br><br>First, create a package for your project, requiring:<br><br>  w20e.pycms<br><br>The easiest way to do so, is using our paster template<br>pycms_project. Install the w20e.pycms.sitemaker package (get it from<br>github), something along these lines:<br><br>  # virtualenv &lt;env&gt;<br>  # cd &lt;env&gt;; ./bin/activate<br>  # ./bin/easy_install w20e.pycms.sitemaker<br>  # cd &lt;wherever you'd like your app sources&gt;<br>  # paster create -t pycms_project &lt;package name&gt;<br><br>If you really want to do it by hand, create an __init__ file for your<br>Pyramid app like this:<br><br>  from w20e.pycms import make_pycms_app<br><br><br>  def main(global_config, **settings):<br><br>    return make_pycms_app(__package__, **settings)<br><br>and Bob might be your Uncle.<br><br>Secondly, create a buildout and virtualenv for your stuff. Why not use<br>w20e.buildoutskel? Install it using easy_install, and<br><br>  # cd &lt;whereever you want your buildout files&gt;<br>  # paster create -t buildout<br><br>and answer &lt;package name&gt; to the project name question, and pycms to<br>the type question.<br>You now have a bunch of buildout files, almost ready to run your app!<br><br>You most likely will consider creating a buildout-my.cfg that extends<br>buildout-base.cfg, and adds some develop paths, like:<br><br>develop =<br>  &lt;that path where your pycms app was created, and where the setup.py resides...&gt;<br><br>Last, run python bootstrap.py and then buildout with your config file.<br><br>Now it's time to rev up the engine, and see what has happend. Run your<br>app like so (within the buildout dir):<br><br>  # ./bin/paster serve dvl.ini [--reload]<br><br>Direct your favorite browser (most likely Lynx or Mosaic) to<br>http://localhost:6543/ and sit back and relax!<br><br><br>Configuration<br><br>-------------<br><br>You may or may not be totally satisfied with the result so far. If<br>this is utterly your idea of a superduper web app, good on ya! If not,<br>read on...<br><br><br>- Add the default management and public css / js files (if you want):<br><br> add this to your configure.zcml:<br><br> &lt;include package=\"w20e.pycms\" file=\"public_resources.zcml\"/&gt;<br> &lt;include package=\"w20e.pycms\" file=\"manage_resources.zcml\"/&gt;<br><br>- Include any other CSS and JS you like, using the pycms zcml directives:<br><br>  &lt;pycms:css<br>    cssfile=\"your.css\"<br>    csstarget=\"public\"<br>    media=\"screen\"<br>    /&gt;<br><br>  &lt;pycms:js<br>    jsfile=\"your.js\"<br>    jstarget=\"public\"<br>    /&gt;<br><br>- Override assets like favicon and robots.txt:<br><br>  &lt;asset<br>    to_override=\"w20e.pycms:static/favicon.png\"<br>    override_with=\"yourapp:static/favicon.png.png\"<br>    /&gt;<br><br>- Most likely you'll want to override the 'content' macro, that is<br>  called to display a page. To do this, make your own pt file, make<br>  that extend 'main.macros['master'], and let it fill the 'body' slot:<br><br>&lt;metal:define-macro define-macro=\"master\"<br>                    metal:extend-macro=\"main.macros['master']\"&gt;<br><br>  &lt;html xmlns=\"http://www.w3.org/1999/xhtml\"<br>      xml:lang=\"en\"<br>      i18n:domain=\"w20e\"<br>      xmlns:tal=\"http://xml.zope.org/namespaces/tal\"<br>      &gt;<br><br>    &lt;head/&gt;<br><br>    &lt;body metal:fill-slot=\"body\"&gt;<br>      Good morning Grommit...<br><br>      &lt;metal:define-slot define-slot=\"content\" /&gt;<br>    &lt;/body&gt;<br>  &lt;/html&gt;<br>  &lt;/metal:define-macro&gt;<br><br>and add to your configure.zcml (always assuming you called your macro<br>main.pt):<br><br>  &lt;pycms:macro<br>     name=\"body\"<br>     ptfile=\"yourpackage:templates/main.pt\"<br>     /&gt;<br><br><br>Using the CMS: core concepts<br>----------------------------<br><br>The core CMS consists solely of pages. Pages are just things with<br>text. Nothing serious. You may want to create your own content types,<br>actions, etc. Luckily that's not hard to do. Best way is to look at<br>existing code... Anyway, some examples here:<br><br><br>Actions<br>-------<br><br>You can register actions with your content. The currently used setup<br>mainly uses 'perspectives' or ways to look at your content. In the<br>management interface these are rendered as 'tabs'. Actions are<br>configured using zcml. Use the action statment as follows:<br><br>&lt;pycms:action<br>  name=\"users\"<br>  target=\"./users\"<br>  category=\"perspective\"<br>  ctype=\"site\"<br>/&gt;<br><br>ctype is an optional filter.<br><br><br>Content types<br>-------------<br><br>Create your own content types if you wish. You can register an icon,<br>and possible subtypes with your type using:<br><br>  &lt;pycms:ctype<br>     name=\"your_type_id\"<br>     factory=\".models.yourtype.YourType\"<br>     subtypes=\"someothertype,someevenothertype\"<br>     icon=\"/static/img/yourtype_icon.png\"<br>     /&gt;<br><br>Your actual model should extend either<br>  w20e.pycms.models.base.BaseContent<br>or<br>  w20e.pycms.models.base.BaseFolder.<br><br>You may want to use w20e.forms (read: should) for your model. You can<br>either create an xml form that describes your model, or if you insist<br>on doing things more Pythonic, create your form<br>programmatically. Checkout out w20e.forms for details.<br><br>A simple model looks like this:<br><br>from w20e.pycms.models.base import BaseContent<br><br><br>class SomethingSimple(BaseContent):<br><br>    \"\"\" Well, actually it's more like an 'object'... \"\"\"<br><br>    def __init__(self, content_id, data=None):<br><br>        BaseContent.__init__(self, content_id, data)<br><br>    def base_id(self):<br><br>        return self.__data__['title']<br><br>    @property<br>    def title(self):<br><br>        return self.__data__['title']<br><br>You can configure how your form for editing and adding is<br>found. Default is that PyCMS looks for a file in &lt;your package<br>home&gt;/forms/&lt;content type&gt;.xml, so in this case:<br><br>  &lt;package home&gt;/forms/somethingsimple.xml<br><br>If you want something completely different, configure an adapter for your<br>content type that provides a form factory:<br><br>  &lt;adapter<br>      factory=\".your.Factory\" <br>      for=\".your.content.Type\" <br>      provides=\"w20e.forms.interfaces.IFormFactory\" /&gt;<br><br>And make sure it actually implements IFormFactory and can create a<br>form (w20e.forms.interfaces.IForm).<br><br><br>Natures<br>-------<br><br>An alternative for defining content types is defining 'natures'. Let's<br>face it: what is so special about an event? It is really just a page<br>thing with a start- and end date and a location, isn't it? And what<br>about news? Isn't that not very much like a page too? If you agree,<br>read on...<br><br>A page can be not only a page, but it can also be news-ish, or<br>event-ish. That is it's nature. You can register natures like so:<br><br>  &lt;pycms:nature<br>      name=\"event\"<br>      interface=\"w20e.pycms_events.interfaces.IEvent\"<br>      /&gt;<br><br>This will make the nature show up in the 'natures' dropdown menu. Now<br>either you leave it like this, or you also modify the form for the<br>page with an w20e.forms.interfaces.IFormModifier implementation:<br><br>  &lt;subscriber<br>      for=\"w20e.pycms_events.interfaces.IEvent\"<br>      factory=\"w20e.pycms_events.models.event.Event\"<br>      provides=\"w20e.forms.interfaces.IFormModifier\"<br>      /&gt;<br><br>And create a class Event along these lines:<br><br>  from zope.interface import implements<br>  from w20e.forms.interfaces import IForm, IFormModifier<br>  from w20e.forms.data.field import Field<br>  from w20e.forms.model.fieldproperties import FieldProperties<br>  from w20e.forms.rendering.control import Input<br>  from w20e.forms.rendering.group import FlowGroup<br><br><br>  class Event(object):<br><br>      implements(IFormModifier)<br><br>      def __init__(self, form):<br><br>          self.form = form<br><br>      def modify(self, form):<br><br>          \"\"\" Add begin, end and location to form \"\"\"<br><br>          form.data.addField(Field(\"start\"))<br>          form.data.addField(Field(\"end\"))<br>          form.data.addField(Field(\"location\"))<br><br>          grp = FlowGroup(\"eventgroup\", label=\"Event\")<br>          grp.addRenderable(Input(\"start\", \"Start of event\",<br>                                  extra_classes=\"datetime\",<br>                                  bind=\"start\"))<br>          grp.addRenderable(Input(\"end\", \"End of event\", bind=\"end\"))<br>          grp.addRenderable(Input(\"location\", \"Location\", bind=\"location\"))<br><br>          form.view.addRenderable(grp, pos=-1)<br><br>Or whatever you think should be added to the page form...<br><br><br>robots.txt<br>----------<br><br>The default robots.txt allows all. Override as per your liking...<br><br><br>Search<br>------<br><br>Would you like search enabled for your site?<br><br>Add this to your configure.zcml:<br><br>  &lt;include package=\"w20e.pycms\" file=\"search.zcml\"/&gt;<br><br><br>Sharing anyone?<br>---------------<br>Would you like search enabled for your site?<br><br>Add this to your configure.zcml:<br><br>  &lt;include package=\"w20e.pycms_sharing\"/&gt;<br><br>and this to your setup dependencies (don't forget to run buildout):<br><br>  w20e.pycms_sharing<br><br><br>Settings<br>--------<br><br>pycms.acl.force_new = True|False<br>        Force new version of ACL. All your security data will be lost<br>pycms.catalog.force_new = True|False<br>        Force new version of catalog. All your entries will be lost, but you<br>        can just run reindex-catalog and all is well again...<br>pycms.admin_user = &lt;user&gt;:&lt;pwd&gt;<br>        Admin user and password, like so: pycms.admin_user = admin:pipo<br>pycms.admin_secret = &lt;somesecret&gt;<br>        This secret may be used as URL parameter to obtain admin permission<br>        Use it wisely!<br>pycms.minify_css = True|False<br>        Minify CSS. Defaults to False<br>pycms.minify_js = True|False<br>        Minify JS. Defaults to False<br>pycms.logged_in_redirect = &lt;url&gt;<br>pycms.rootclass = &lt;full dotted classname&gt;<br>        Defaults to w20e.pycms.models.site.Site<br>pycms.roottitle = &lt;string&gt;<br>        Defaults to \"Welcome\"<br>pycms.from_addr<br>        Send email as ...<br>pycms.bcc_addr<br>        Send also to bcc<br>pycms.after_add_redirect<br>        Where to go after successfull add<br>pycms.cancel_add_redirect<br>        Where to go after cancelled add<br>pycms.after_del_redirect<br>        Where to go after delete<br>pycms.tempregister.timout = &lt;int&gt;<br>        minimal amount of seconds before a temporary object might be removed<br><br><br>1.1.2a<br>------<br>* json representation of pycms content types<br>* upgrade jquery + jqueryui<br>* small fixes<br><br>1.1.1a<br>------<br>* initially created objects will have a temporary state, until they<br>have been completed<br>* add_macros now within base view class, so it's easier to override<br>* validation.js fixed for bootstrap class names<br><br>1.0.2a<br>======<br>* Finally we have a serious (?) licence. Also updated some metadata.<br><br>1.0.1a<br>======<br>* Enabled call to render viewlet through base view\n          </div>"}, "last_serial": 801484, "releases": {"1.0.0a": [{"comment_text": "", "digests": {"md5": "336635de2c3f3be659da6eee47c689f4", "sha256": "482e5291f0955eefe36f2a1d0eae04d62ed9719b6c2dfd487b309d117954de37"}, "downloads": -1, "filename": "w20e.pycms-1.0.0a.tar.gz", "has_sig": false, "md5_digest": "336635de2c3f3be659da6eee47c689f4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1374653, "upload_time": "2012-07-10T11:44:20", "upload_time_iso_8601": "2012-07-10T11:44:20.454150Z", "url": "https://files.pythonhosted.org/packages/fb/7c/b82f99fb0165659c1ad16a6c0f19e1e6ad50a730fe2f4f368567e8a710ed/w20e.pycms-1.0.0a.tar.gz", "yanked": false}], "1.0.1a": [{"comment_text": "", "digests": {"md5": "c096b63fc5c18b5d914c4100877e2c8c", "sha256": "53b70f0bad77dc46af8dfd99a94ce21d5b1442d30390af7eddc576b5414a5a4f"}, "downloads": -1, "filename": "w20e.pycms-1.0.1a-py2.7.egg", "has_sig": false, "md5_digest": "c096b63fc5c18b5d914c4100877e2c8c", "packagetype": "bdist_egg", "python_version": "2.7", "requires_python": null, "size": 1633662, "upload_time": "2012-07-24T12:07:48", "upload_time_iso_8601": "2012-07-24T12:07:48.836421Z", "url": "https://files.pythonhosted.org/packages/ce/86/fef90d5c9b96d80d06ad237fb855fad70a28232ea643a46d2c6e3606eb1a/w20e.pycms-1.0.1a-py2.7.egg", "yanked": false}], "1.0.2a": [{"comment_text": "", "digests": {"md5": "b0b63b9fe0594d947c9dedd691edc0da", "sha256": "88f3a8c33b239be4325958853b6de1fe97e24efc6e4e96f0f01a507c225ede5b"}, "downloads": -1, "filename": "w20e.pycms-1.0.2a-py2.7.egg", "has_sig": false, "md5_digest": "b0b63b9fe0594d947c9dedd691edc0da", "packagetype": "bdist_egg", "python_version": "2.7", "requires_python": null, "size": 1633813, "upload_time": "2012-07-25T16:03:51", "upload_time_iso_8601": "2012-07-25T16:03:51.900242Z", "url": "https://files.pythonhosted.org/packages/a5/6b/f503a41c67e4073181edea91d464d1480e59ea55a226d999cd52ef65a449/w20e.pycms-1.0.2a-py2.7.egg", "yanked": false}], "1.1.2b": [{"comment_text": "", "digests": {"md5": "fbfedb1cdae2f5841c1da2189d459a53", "sha256": "272b62e307553ba814c45aead38608ad64e3de03c8b2ea1e30b5b9399e4ffca9"}, "downloads": -1, "filename": "w20e.pycms-1.1.2b.tar.gz", "has_sig": false, "md5_digest": "fbfedb1cdae2f5841c1da2189d459a53", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1447854, "upload_time": "2013-02-05T11:46:12", "upload_time_iso_8601": "2013-02-05T11:46:12.056347Z", "url": "https://files.pythonhosted.org/packages/9c/de/552f4336fe3188d43075b57a5b3ff28a3ead89a1771ba7741080d32eae46/w20e.pycms-1.1.2b.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "fbfedb1cdae2f5841c1da2189d459a53", "sha256": "272b62e307553ba814c45aead38608ad64e3de03c8b2ea1e30b5b9399e4ffca9"}, "downloads": -1, "filename": "w20e.pycms-1.1.2b.tar.gz", "has_sig": false, "md5_digest": "fbfedb1cdae2f5841c1da2189d459a53", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1447854, "upload_time": "2013-02-05T11:46:12", "upload_time_iso_8601": "2013-02-05T11:46:12.056347Z", "url": "https://files.pythonhosted.org/packages/9c/de/552f4336fe3188d43075b57a5b3ff28a3ead89a1771ba7741080d32eae46/w20e.pycms-1.1.2b.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:33:25 2020"}