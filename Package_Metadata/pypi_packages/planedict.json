{"info": {"author": "Oleg Golovanov", "author_email": "golovanov.ov@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.2", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "PlaneDict\n---------\n\n|Version| |PyVersions| |Status| |Coverage| |License|\n\nPlaneDict is a dict-like class which represents built-in dict class\nas a 'plane' structure, i.e. path-value pairs. Path is a tuple of keys,\nvalue is a value which allows in built-in dict.\n\nSupported methods:\n    * native:\n        * __check_path__(self, path)\n    * overridden:\n        * __init__(self, seq=None, _factory=dict, \\**kwargs)\n        * __getitem__(self, path)\n        * __setitem__(self, path, value)\n        * __delitem__(self, path)\n        * __iter__(self)\n        * __len__(self)\n        * __repr__(self)\n        * get(self, key, default=None, stddict=False)\n    * inherited:\n        * clear(self)\n        * pop(self, key, default=<object object>)\n        * popitem(self)\n        * setdefault(self, key, default=None)\n        * update(\\*args, \\**kwds)\n        * __contains__(self, key)\n        * __eq__(self, other)\n        * __ne__(self, other)\n        * keys(self)\n        * iterkeys(self)\n        * values(self)\n        * itervalues(self)\n        * items(self)\n        * iteritems(self)\n\nInstallation\n------------\n::\n\n    $ pip install planedict\n\nNotes\n-----\n1. Constructor have _factory argument, it expects dict-like class (dict by default).\n   OrderedDict is useful to use.\n2. After removing value by path, if higher dicts will become\n   empty, they will be removed.\n3. get method has stddict parameter. If it's True then method will return\n   built-in dict, it will return PlaneDict object else.\n4. If PlaneDict object was passed to update method, it's a 'soft'\n   update, i.e. the intersecting values will be overridden and the new\n   values will be added.\n   If standard dict passed to update method, it works as a\n   standard update method.\n5. __check_path__ method takes a sequence of keys.\n   For example: __check_path__((1, [2, [3]], 4, (5, 6), (i for i in [7, 8])))\n   returns (1, 2, 3, 4, (5, 6), 7, 8). As you can see from the\n   example above, tuple is not unfold, because tuple can be\n   a key of dict. So if you want to get a single-key tuple,\n   you should do this:\n\n    .. code-block:: python\n\n        d[('key',),]\n\n    or\n\n    .. code-block:: python\n\n        path = 'key',\n        d[path,]\n\nSee examples.\n\n\nExamples\n--------\n\n.. code-block:: python\n\n    d = PlaneDict(\n        {\n            'key1': {\n                'key2': 'val2',\n                'key3': 'val3'\n            },\n            'key4': {\n                'key5': {\n                    'key6': 'val6'\n                }\n            }\n        }\n    )\n\n    >>> len(d)\n    3\n\n    >>> d['key4', 'key5', 'key6']\n    'val6'\n\n    >>> path = ['key1', 'key2', 'key10']\n    >>> d[path] = 1\n    >>> d[path]\n    1\n\n    >>> del d['key4', 'key5', 'key6']\n    >>> d\n    {'key1': {'key3': 'val3', 'key2': 'val2'}}\n\n    >>> list(d)\n    [('key1', 'key3'),\n     ('key1', 'key2'),\n     ('key4', 'key5', 'key6')]\n\n    >>> d.get('key1', stddict=True)\n    {'key3': 'val3', 'key2': 'val2'}\n    >>> d.get(('key1', 'key2'))\n    'val2'\n\n    >>> d.clear()\n    >>> print d\n    {}\n\n    >>> d.pop(['key4', 'key5', 'key6'], default=None)\n    'val6'\n    >>> d.pop(['key4', 'key5', 'key6'], default=None)\n    None\n\n    >>> d.popitem()\n    (('key1', 'key3'), 'val3')\n\n    >>> d.setdefault(['key1', 'key2'], default=None)\n    'val2'\n    >>> d.setdefault(['key1', 'key7', 'key8', 'key9'], default=None)\n    >>> d['key1']\n    {'key3': 'val3', 'key2': 'val2', 'key7': {'key8': {'key9': None}}}\n\n    >>> update = {'key1': {'key10': 'val10'}}\n    >>> d.update(PlaneDict(update))\n    >>> d\n    {'key1': {'key2': 'val2', 'key3': 'val3', 'key10': 'val10'}, 'key4': {'key5': {'key6': 'val6'}}}\n    >>> d.update(update)\n    >>> d\n    {'key1': {'key10': 'val10'}, 'key4': {'key5': {'key6': 'val6'}}}\n\n    >>> d.keys()\n    [('key1', 'key3'),\n     ('key1', 'key2'),\n     ('key4', 'key5', 'key6')]\n\n    >>> d.values()\n    ['val3', 'val2', 'val6']\n\n    >>> d.items()\n    [(('key1', 'key3'), 'val3'),\n     (('key1', 'key2'), 'val2'),\n     (('key4', 'key5', 'key6'), 'val6')]\n\n    >>> ['key1', 'key2'] in d\n    True\n    >>> ['key1', 'missed_key'] in d\n    False\n\n    >>> d == PlaneDict({'key1': {'key2': 'val2', 'key3': 'val3'}, 'key4': {'key5': {'key6': 'val6'}}})\n    True\n\n    >>> d == {'key1': {'key2': 'val2', 'key3': 'val3'}, 'key4': {'key5': {'key6': 'val6'}}}\n    False\n\nLicense\n-------\n\nMIT licensed. See the bundled `LICENSE <https://github.com/oleg-golovanov/planedict/blob/master/LICENSE>`_ file for more details.\n\n.. |Version| image:: https://img.shields.io/pypi/v/planedict.svg\n    :target: https://pypi.python.org/pypi/planedict\n.. |PyVersions| image:: https://img.shields.io/pypi/pyversions/planedict.svg\n    :target: https://pypi.python.org/pypi/planedict\n.. |Status| image:: https://img.shields.io/travis/oleg-golovanov/planedict.svg\n    :target: https://travis-ci.org/oleg-golovanov/planedict\n.. |Coverage| image:: https://img.shields.io/coveralls/oleg-golovanov/planedict.svg\n    :target: https://coveralls.io/github/oleg-golovanov/planedict\n.. |License| image:: https://img.shields.io/github/license/oleg-golovanov/planedict.svg\n    :target: https://github.com/oleg-golovanov/planedict/blob/master/LICENSE\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/oleg-golovanov/planedict", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "planedict", "package_url": "https://pypi.org/project/planedict/", "platform": "any", "project_url": "https://pypi.org/project/planedict/", "project_urls": {"Homepage": "https://github.com/oleg-golovanov/planedict"}, "release_url": "https://pypi.org/project/planedict/1.4.0/", "requires_dist": null, "requires_python": "", "summary": "PlaneDict is a dict-like class which represents built-in dict class as a 'plane' structure, i.e. pairs path-value. Path is a tuple of keys, value is value which allows in built-in dict.", "version": "1.4.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"planedict\">\n<h2>PlaneDict</h2>\n<p><a href=\"https://pypi.python.org/pypi/planedict\" rel=\"nofollow\"><img alt=\"Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0c3e0fbc728cc96b56fa907d82a30a327e9283e4/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f706c616e65646963742e737667\"></a> <a href=\"https://pypi.python.org/pypi/planedict\" rel=\"nofollow\"><img alt=\"PyVersions\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2048d93e14ed4624705da564bbc303adc87eb8cd/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f706c616e65646963742e737667\"></a> <a href=\"https://travis-ci.org/oleg-golovanov/planedict\" rel=\"nofollow\"><img alt=\"Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ae90e2583c1240681c9ae42eb3f7934aa6bd6f9e/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f6f6c65672d676f6c6f76616e6f762f706c616e65646963742e737667\"></a> <a href=\"https://coveralls.io/github/oleg-golovanov/planedict\" rel=\"nofollow\"><img alt=\"Coverage\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d2bc936095652fd3206aba17fc7de021abc5c72d/68747470733a2f2f696d672e736869656c64732e696f2f636f766572616c6c732f6f6c65672d676f6c6f76616e6f762f706c616e65646963742e737667\"></a> <a href=\"https://github.com/oleg-golovanov/planedict/blob/master/LICENSE\" rel=\"nofollow\"><img alt=\"License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/164790afac4e9aa4d8c96d44eccbbced055b6ec9/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f6f6c65672d676f6c6f76616e6f762f706c616e65646963742e737667\"></a></p>\n<p>PlaneDict is a dict-like class which represents built-in dict class\nas a \u2018plane\u2019 structure, i.e. path-value pairs. Path is a tuple of keys,\nvalue is a value which allows in built-in dict.</p>\n<dl>\n<dt>Supported methods:</dt>\n<dd><ul>\n<li><dl>\n<dt>native:</dt>\n<dd><ul>\n<li>__check_path__(self, path)</li>\n</ul>\n</dd>\n</dl>\n</li>\n<li><dl>\n<dt>overridden:</dt>\n<dd><ul>\n<li>__init__(self, seq=None, _factory=dict, **kwargs)</li>\n<li>__getitem__(self, path)</li>\n<li>__setitem__(self, path, value)</li>\n<li>__delitem__(self, path)</li>\n<li>__iter__(self)</li>\n<li>__len__(self)</li>\n<li>__repr__(self)</li>\n<li>get(self, key, default=None, stddict=False)</li>\n</ul>\n</dd>\n</dl>\n</li>\n<li><dl>\n<dt>inherited:</dt>\n<dd><ul>\n<li>clear(self)</li>\n<li>pop(self, key, default=&lt;object object&gt;)</li>\n<li>popitem(self)</li>\n<li>setdefault(self, key, default=None)</li>\n<li>update(*args, **kwds)</li>\n<li>__contains__(self, key)</li>\n<li>__eq__(self, other)</li>\n<li>__ne__(self, other)</li>\n<li>keys(self)</li>\n<li>iterkeys(self)</li>\n<li>values(self)</li>\n<li>itervalues(self)</li>\n<li>items(self)</li>\n<li>iteritems(self)</li>\n</ul>\n</dd>\n</dl>\n</li>\n</ul>\n</dd>\n</dl>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<pre>$ pip install planedict\n</pre>\n</div>\n<div id=\"notes\">\n<h2>Notes</h2>\n<ol>\n<li><p>Constructor have _factory argument, it expects dict-like class (dict by default).\nOrderedDict is useful to use.</p>\n</li>\n<li><p>After removing value by path, if higher dicts will become\nempty, they will be removed.</p>\n</li>\n<li><p>get method has stddict parameter. If it\u2019s True then method will return\nbuilt-in dict, it will return PlaneDict object else.</p>\n</li>\n<li><p>If PlaneDict object was passed to update method, it\u2019s a \u2018soft\u2019\nupdate, i.e. the intersecting values will be overridden and the new\nvalues will be added.\nIf standard dict passed to update method, it works as a\nstandard update method.</p>\n</li>\n<li><p>__check_path__ method takes a sequence of keys.\nFor example: __check_path__((1, [2, [3]], 4, (5, 6), (i for i in [7, 8])))\nreturns (1, 2, 3, 4, (5, 6), 7, 8). As you can see from the\nexample above, tuple is not unfold, because tuple can be\na key of dict. So if you want to get a single-key tuple,\nyou should do this:</p>\n<blockquote>\n<pre><span class=\"n\">d</span><span class=\"p\">[(</span><span class=\"s1\">'key'</span><span class=\"p\">,),]</span>\n</pre>\n<p>or</p>\n<pre><span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"s1\">'key'</span><span class=\"p\">,</span>\n<span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">path</span><span class=\"p\">,]</span>\n</pre>\n</blockquote>\n</li>\n</ol>\n<p>See examples.</p>\n</div>\n<div id=\"examples\">\n<h2>Examples</h2>\n<pre><span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"n\">PlaneDict</span><span class=\"p\">(</span>\n    <span class=\"p\">{</span>\n        <span class=\"s1\">'key1'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"s1\">'key2'</span><span class=\"p\">:</span> <span class=\"s1\">'val2'</span><span class=\"p\">,</span>\n            <span class=\"s1\">'key3'</span><span class=\"p\">:</span> <span class=\"s1\">'val3'</span>\n        <span class=\"p\">},</span>\n        <span class=\"s1\">'key4'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"s1\">'key5'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n                <span class=\"s1\">'key6'</span><span class=\"p\">:</span> <span class=\"s1\">'val6'</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">)</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">)</span>\n<span class=\"mi\">3</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">d</span><span class=\"p\">[</span><span class=\"s1\">'key4'</span><span class=\"p\">,</span> <span class=\"s1\">'key5'</span><span class=\"p\">,</span> <span class=\"s1\">'key6'</span><span class=\"p\">]</span>\n<span class=\"s1\">'val6'</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'key1'</span><span class=\"p\">,</span> <span class=\"s1\">'key2'</span><span class=\"p\">,</span> <span class=\"s1\">'key10'</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">path</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">d</span><span class=\"p\">[</span><span class=\"n\">path</span><span class=\"p\">]</span>\n<span class=\"mi\">1</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">del</span> <span class=\"n\">d</span><span class=\"p\">[</span><span class=\"s1\">'key4'</span><span class=\"p\">,</span> <span class=\"s1\">'key5'</span><span class=\"p\">,</span> <span class=\"s1\">'key6'</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">d</span>\n<span class=\"p\">{</span><span class=\"s1\">'key1'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'key3'</span><span class=\"p\">:</span> <span class=\"s1\">'val3'</span><span class=\"p\">,</span> <span class=\"s1\">'key2'</span><span class=\"p\">:</span> <span class=\"s1\">'val2'</span><span class=\"p\">}}</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">)</span>\n<span class=\"p\">[(</span><span class=\"s1\">'key1'</span><span class=\"p\">,</span> <span class=\"s1\">'key3'</span><span class=\"p\">),</span>\n <span class=\"p\">(</span><span class=\"s1\">'key1'</span><span class=\"p\">,</span> <span class=\"s1\">'key2'</span><span class=\"p\">),</span>\n <span class=\"p\">(</span><span class=\"s1\">'key4'</span><span class=\"p\">,</span> <span class=\"s1\">'key5'</span><span class=\"p\">,</span> <span class=\"s1\">'key6'</span><span class=\"p\">)]</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'key1'</span><span class=\"p\">,</span> <span class=\"n\">stddict</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"p\">{</span><span class=\"s1\">'key3'</span><span class=\"p\">:</span> <span class=\"s1\">'val3'</span><span class=\"p\">,</span> <span class=\"s1\">'key2'</span><span class=\"p\">:</span> <span class=\"s1\">'val2'</span><span class=\"p\">}</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">((</span><span class=\"s1\">'key1'</span><span class=\"p\">,</span> <span class=\"s1\">'key2'</span><span class=\"p\">))</span>\n<span class=\"s1\">'val2'</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">clear</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span> <span class=\"n\">d</span>\n<span class=\"p\">{}</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">([</span><span class=\"s1\">'key4'</span><span class=\"p\">,</span> <span class=\"s1\">'key5'</span><span class=\"p\">,</span> <span class=\"s1\">'key6'</span><span class=\"p\">],</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"s1\">'val6'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">([</span><span class=\"s1\">'key4'</span><span class=\"p\">,</span> <span class=\"s1\">'key5'</span><span class=\"p\">,</span> <span class=\"s1\">'key6'</span><span class=\"p\">],</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"kc\">None</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">popitem</span><span class=\"p\">()</span>\n<span class=\"p\">((</span><span class=\"s1\">'key1'</span><span class=\"p\">,</span> <span class=\"s1\">'key3'</span><span class=\"p\">),</span> <span class=\"s1\">'val3'</span><span class=\"p\">)</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">setdefault</span><span class=\"p\">([</span><span class=\"s1\">'key1'</span><span class=\"p\">,</span> <span class=\"s1\">'key2'</span><span class=\"p\">],</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"s1\">'val2'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">setdefault</span><span class=\"p\">([</span><span class=\"s1\">'key1'</span><span class=\"p\">,</span> <span class=\"s1\">'key7'</span><span class=\"p\">,</span> <span class=\"s1\">'key8'</span><span class=\"p\">,</span> <span class=\"s1\">'key9'</span><span class=\"p\">],</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">d</span><span class=\"p\">[</span><span class=\"s1\">'key1'</span><span class=\"p\">]</span>\n<span class=\"p\">{</span><span class=\"s1\">'key3'</span><span class=\"p\">:</span> <span class=\"s1\">'val3'</span><span class=\"p\">,</span> <span class=\"s1\">'key2'</span><span class=\"p\">:</span> <span class=\"s1\">'val2'</span><span class=\"p\">,</span> <span class=\"s1\">'key7'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'key8'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'key9'</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">}}}</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">update</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'key1'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'key10'</span><span class=\"p\">:</span> <span class=\"s1\">'val10'</span><span class=\"p\">}}</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">PlaneDict</span><span class=\"p\">(</span><span class=\"n\">update</span><span class=\"p\">))</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">d</span>\n<span class=\"p\">{</span><span class=\"s1\">'key1'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'key2'</span><span class=\"p\">:</span> <span class=\"s1\">'val2'</span><span class=\"p\">,</span> <span class=\"s1\">'key3'</span><span class=\"p\">:</span> <span class=\"s1\">'val3'</span><span class=\"p\">,</span> <span class=\"s1\">'key10'</span><span class=\"p\">:</span> <span class=\"s1\">'val10'</span><span class=\"p\">},</span> <span class=\"s1\">'key4'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'key5'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'key6'</span><span class=\"p\">:</span> <span class=\"s1\">'val6'</span><span class=\"p\">}}}</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">update</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">d</span>\n<span class=\"p\">{</span><span class=\"s1\">'key1'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'key10'</span><span class=\"p\">:</span> <span class=\"s1\">'val10'</span><span class=\"p\">},</span> <span class=\"s1\">'key4'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'key5'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'key6'</span><span class=\"p\">:</span> <span class=\"s1\">'val6'</span><span class=\"p\">}}}</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">()</span>\n<span class=\"p\">[(</span><span class=\"s1\">'key1'</span><span class=\"p\">,</span> <span class=\"s1\">'key3'</span><span class=\"p\">),</span>\n <span class=\"p\">(</span><span class=\"s1\">'key1'</span><span class=\"p\">,</span> <span class=\"s1\">'key2'</span><span class=\"p\">),</span>\n <span class=\"p\">(</span><span class=\"s1\">'key4'</span><span class=\"p\">,</span> <span class=\"s1\">'key5'</span><span class=\"p\">,</span> <span class=\"s1\">'key6'</span><span class=\"p\">)]</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">()</span>\n<span class=\"p\">[</span><span class=\"s1\">'val3'</span><span class=\"p\">,</span> <span class=\"s1\">'val2'</span><span class=\"p\">,</span> <span class=\"s1\">'val6'</span><span class=\"p\">]</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">()</span>\n<span class=\"p\">[((</span><span class=\"s1\">'key1'</span><span class=\"p\">,</span> <span class=\"s1\">'key3'</span><span class=\"p\">),</span> <span class=\"s1\">'val3'</span><span class=\"p\">),</span>\n <span class=\"p\">((</span><span class=\"s1\">'key1'</span><span class=\"p\">,</span> <span class=\"s1\">'key2'</span><span class=\"p\">),</span> <span class=\"s1\">'val2'</span><span class=\"p\">),</span>\n <span class=\"p\">((</span><span class=\"s1\">'key4'</span><span class=\"p\">,</span> <span class=\"s1\">'key5'</span><span class=\"p\">,</span> <span class=\"s1\">'key6'</span><span class=\"p\">),</span> <span class=\"s1\">'val6'</span><span class=\"p\">)]</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"p\">[</span><span class=\"s1\">'key1'</span><span class=\"p\">,</span> <span class=\"s1\">'key2'</span><span class=\"p\">]</span> <span class=\"ow\">in</span> <span class=\"n\">d</span>\n<span class=\"kc\">True</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"p\">[</span><span class=\"s1\">'key1'</span><span class=\"p\">,</span> <span class=\"s1\">'missed_key'</span><span class=\"p\">]</span> <span class=\"ow\">in</span> <span class=\"n\">d</span>\n<span class=\"kc\">False</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">d</span> <span class=\"o\">==</span> <span class=\"n\">PlaneDict</span><span class=\"p\">({</span><span class=\"s1\">'key1'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'key2'</span><span class=\"p\">:</span> <span class=\"s1\">'val2'</span><span class=\"p\">,</span> <span class=\"s1\">'key3'</span><span class=\"p\">:</span> <span class=\"s1\">'val3'</span><span class=\"p\">},</span> <span class=\"s1\">'key4'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'key5'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'key6'</span><span class=\"p\">:</span> <span class=\"s1\">'val6'</span><span class=\"p\">}}})</span>\n<span class=\"kc\">True</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">d</span> <span class=\"o\">==</span> <span class=\"p\">{</span><span class=\"s1\">'key1'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'key2'</span><span class=\"p\">:</span> <span class=\"s1\">'val2'</span><span class=\"p\">,</span> <span class=\"s1\">'key3'</span><span class=\"p\">:</span> <span class=\"s1\">'val3'</span><span class=\"p\">},</span> <span class=\"s1\">'key4'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'key5'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'key6'</span><span class=\"p\">:</span> <span class=\"s1\">'val6'</span><span class=\"p\">}}}</span>\n<span class=\"kc\">False</span>\n</pre>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>MIT licensed. See the bundled <a href=\"https://github.com/oleg-golovanov/planedict/blob/master/LICENSE\" rel=\"nofollow\">LICENSE</a> file for more details.</p>\n</div>\n\n          </div>"}, "last_serial": 3159271, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "07fa15acdfd33e64d767d12ade197512", "sha256": "f1d4480c89c1977ff51d2615310df8177521baaa90194c52118af8618a487bce"}, "downloads": -1, "filename": "planedict-1.0.0.tar.gz", "has_sig": false, "md5_digest": "07fa15acdfd33e64d767d12ade197512", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3678, "upload_time": "2014-08-08T21:03:56", "upload_time_iso_8601": "2014-08-08T21:03:56.934362Z", "url": "https://files.pythonhosted.org/packages/de/61/1bc58969e540e985018404486ae540c571805aa5ba65c2346b681f94feb3/planedict-1.0.0.tar.gz", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "ab1c39cda53ad8dedb46ac2b063f45a6", "sha256": "a5f039e693e4e4b5c1792ad270d6ab9fa573a8929ee595647d2a9bec65b9a9ea"}, "downloads": -1, "filename": "planedict-1.1.1.tar.gz", "has_sig": false, "md5_digest": "ab1c39cda53ad8dedb46ac2b063f45a6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3753, "upload_time": "2014-11-14T10:44:12", "upload_time_iso_8601": "2014-11-14T10:44:12.636769Z", "url": "https://files.pythonhosted.org/packages/67/8c/1d10850138fabd1462e0b6b22af9ecb285eacfe498ff99783a63dfca8def/planedict-1.1.1.tar.gz", "yanked": false}], "1.2.0": [{"comment_text": "", "digests": {"md5": "5f5cff2fac531115dffdd5fa6309f031", "sha256": "73035ef726a0171b665c3ae02132eca9393850cdc4705ad59df570c89aa96e21"}, "downloads": -1, "filename": "planedict-1.2.0.tar.gz", "has_sig": false, "md5_digest": "5f5cff2fac531115dffdd5fa6309f031", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4408, "upload_time": "2015-07-01T22:18:45", "upload_time_iso_8601": "2015-07-01T22:18:45.344736Z", "url": "https://files.pythonhosted.org/packages/f9/9a/e5b33e0499598d4278e627372ca55bd3040abfe83dec9cc308386d0aef13/planedict-1.2.0.tar.gz", "yanked": false}], "1.3.1": [{"comment_text": "", "digests": {"md5": "2582c9bfe1ac887e69c5d583710b2eca", "sha256": "5d312fd877d20d7a350aa1e26e982c9cd8c25ee63d62d5bce6fd3c5a363044b4"}, "downloads": -1, "filename": "planedict-1.3.1.tar.gz", "has_sig": false, "md5_digest": "2582c9bfe1ac887e69c5d583710b2eca", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4916, "upload_time": "2015-11-15T13:43:28", "upload_time_iso_8601": "2015-11-15T13:43:28.672874Z", "url": "https://files.pythonhosted.org/packages/ed/c9/f18adba0ba2dc399dd1765278d96fb66cac3b3b2ff22e9b18c6c5daf1b06/planedict-1.3.1.tar.gz", "yanked": false}], "1.4.0": [{"comment_text": "", "digests": {"md5": "d2114cd5f84008645ac880630073be31", "sha256": "5a9fa3befedb9de54d0186b81d73ee46194989197897e04d4c5ce650bed76257"}, "downloads": -1, "filename": "planedict-1.4.0.tar.gz", "has_sig": false, "md5_digest": "d2114cd5f84008645ac880630073be31", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4882, "upload_time": "2017-09-08T13:49:31", "upload_time_iso_8601": "2017-09-08T13:49:31.251745Z", "url": "https://files.pythonhosted.org/packages/f1/00/11f34181e4cdaf7e302a7d8af9de74567971beb0e3a4af03752746daf10e/planedict-1.4.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d2114cd5f84008645ac880630073be31", "sha256": "5a9fa3befedb9de54d0186b81d73ee46194989197897e04d4c5ce650bed76257"}, "downloads": -1, "filename": "planedict-1.4.0.tar.gz", "has_sig": false, "md5_digest": "d2114cd5f84008645ac880630073be31", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4882, "upload_time": "2017-09-08T13:49:31", "upload_time_iso_8601": "2017-09-08T13:49:31.251745Z", "url": "https://files.pythonhosted.org/packages/f1/00/11f34181e4cdaf7e302a7d8af9de74567971beb0e3a4af03752746daf10e/planedict-1.4.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:53:43 2020"}