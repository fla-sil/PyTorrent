{"info": {"author": "Benjamin Moran", "author_email": "benmoran56@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3", "Topic :: Utilities"], "description": "Chippy\n======\n**Chippy is a module for creating simple \"chiptune\" style audio waveforms**\n\nChippy is a pure Python module for creating various types of basic waveforms,\nsuch as Sine, Triangle, Saw, Square/Pulse, etc. It also does simple FM synthesis.\nUnder the hood are Python generators for each of these waveforms, which can give\nyou an endless stream of signed integers representing the waves. There are also\nmethods that will return a specific length of PCM data, with or without a standard\nRIFF header. Use it directly in your application, or save the waveforms to disk.\n\nChippy is not, however, an audio player. It simply creates the waveforms.\n\nInspired by Zach Denton's **Wavebender** http://github.com/zacharydenton/wavebender\n\nWhat's New\n----------\n**0.1.0** - First release! Everything should work fine, but bug reports or improvement\n            suggestions are most welcome. There isn't any documentation yet, but the\n            code should be pretty easy to understand.\n\n\n1) Compatibility\n----------------\nChippy is developed for Python 3. It will also work on Pypy3 and, being written in pure\nPython, should work on any compliant interpreter. Please let me know if you encounter any\nissues.\n\n2) Installation\n---------------\nNo installation is necessary. Chippy is a tiny library with no dependencies. Simply copy\nthe *chippy* directory into the top level of your project folder, and *import chippy*.\n\nIf you prefer, Chippy is also available on PyPI for easy installation via pip.\n\n3) Usage\n--------\nSeveral types of waveforms are supported: sine, saw, triange, square, and FM. If you just\nwant to make a byte string of raw PCM data, you can use the **<waveform>_pcm(length=1)** methods.\nThere is another set of methods for producing standard RIFF format wave data, ready to play:\n**<waveform>_riff(length=1)**. You can save this data to disk with the following methods:\n**save_wave(pcm_data, filename)** and **save_raw_pcm(pcm_data, filename)**. Here is a quick\nexample of usage:\n\n\n    import chippy\n\n    synth = chippy.Synthesizer(framerate=44100)\n\n    # Create a raw PCM Sine wave:\n    sine_wave = synth.Sine(length=2, frequency=220)\n    # Save it to disk with a RIFF wave header:\n    synth.save_wave(sine_wave, \"wavefile.wav\")\n\n    # Make an FM waveform with RIFF header:\n    fm_wave = synth.FM(carrier=440, modulator=220)\n\n\nMORE DOCUMENTATION TO COME!", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/benmoran56/chippy", "keywords": "audio synthesizer chiptune", "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "chippy", "package_url": "https://pypi.org/project/chippy/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/chippy/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/benmoran56/chippy"}, "release_url": "https://pypi.org/project/chippy/0.1.0/", "requires_dist": null, "requires_python": null, "summary": "A pure Python module for creating various chiptune style waveforms", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><strong>Chippy is a module for creating simple \u201cchiptune\u201d style audio waveforms</strong></p>\n<p>Chippy is a pure Python module for creating various types of basic waveforms,\nsuch as Sine, Triangle, Saw, Square/Pulse, etc. It also does simple FM synthesis.\nUnder the hood are Python generators for each of these waveforms, which can give\nyou an endless stream of signed integers representing the waves. There are also\nmethods that will return a specific length of PCM data, with or without a standard\nRIFF header. Use it directly in your application, or save the waveforms to disk.</p>\n<p>Chippy is not, however, an audio player. It simply creates the waveforms.</p>\n<p>Inspired by Zach Denton\u2019s <strong>Wavebender</strong> <a href=\"http://github.com/zacharydenton/wavebender\" rel=\"nofollow\">http://github.com/zacharydenton/wavebender</a></p>\n<div id=\"what-s-new\">\n<h2>What\u2019s New</h2>\n<dl>\n<dt><strong>0.1.0</strong> - First release! Everything should work fine, but bug reports or improvement</dt>\n<dd>suggestions are most welcome. There isn\u2019t any documentation yet, but the\ncode should be pretty easy to understand.</dd>\n</dl>\n</div>\n<div id=\"compatibility\">\n<h2>1) Compatibility</h2>\n<p>Chippy is developed for Python 3. It will also work on Pypy3 and, being written in pure\nPython, should work on any compliant interpreter. Please let me know if you encounter any\nissues.</p>\n</div>\n<div id=\"installation\">\n<h2>2) Installation</h2>\n<p>No installation is necessary. Chippy is a tiny library with no dependencies. Simply copy\nthe <em>chippy</em> directory into the top level of your project folder, and <em>import chippy</em>.</p>\n<p>If you prefer, Chippy is also available on PyPI for easy installation via pip.</p>\n</div>\n<div id=\"usage\">\n<h2>3) Usage</h2>\n<p>Several types of waveforms are supported: sine, saw, triange, square, and FM. If you just\nwant to make a byte string of raw PCM data, you can use the <strong>&lt;waveform&gt;_pcm(length=1)</strong> methods.\nThere is another set of methods for producing standard RIFF format wave data, ready to play:\n<strong>&lt;waveform&gt;_riff(length=1)</strong>. You can save this data to disk with the following methods:\n<strong>save_wave(pcm_data, filename)</strong> and <strong>save_raw_pcm(pcm_data, filename)</strong>. Here is a quick\nexample of usage:</p>\n<blockquote>\n<p>import chippy</p>\n<p>synth = chippy.Synthesizer(framerate=44100)</p>\n<p># Create a raw PCM Sine wave:\nsine_wave = synth.Sine(length=2, frequency=220)\n# Save it to disk with a RIFF wave header:\nsynth.save_wave(sine_wave, \u201cwavefile.wav\u201d)</p>\n<p># Make an FM waveform with RIFF header:\nfm_wave = synth.FM(carrier=440, modulator=220)</p>\n</blockquote>\n<p>MORE DOCUMENTATION TO COME!</p>\n</div>\n\n          </div>"}, "last_serial": 2295464, "releases": {"0.1.0": [{"comment_text": "built for Linux-4.7.1-1-ARCH-x86_64-with-glibc2.3.4", "digests": {"md5": "a09f402d5ca2f89df95d51d52b728098", "sha256": "f0afc58f443838061b9f24d9c39f103dd3dc9404bb943b0af7e11445ec0708bd"}, "downloads": -1, "filename": "chippy-0.1.0.linux-x86_64.tar.gz", "has_sig": false, "md5_digest": "a09f402d5ca2f89df95d51d52b728098", "packagetype": "bdist_dumb", "python_version": "any", "requires_python": null, "size": 8587, "upload_time": "2016-08-22T13:02:25", "upload_time_iso_8601": "2016-08-22T13:02:25.446174Z", "url": "https://files.pythonhosted.org/packages/a2/02/272d6b828853d842cf0f782f6aaab406385dac0274174cc7d0331b6f401f/chippy-0.1.0.linux-x86_64.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "754ff3b79cbb742dd3f7a95a225c408a", "sha256": "ed3033c62668d04c4d69c01e6ec051a65ce358ed21024c7b85dee947a0e2d17b"}, "downloads": -1, "filename": "chippy-0.1.0.tar.gz", "has_sig": false, "md5_digest": "754ff3b79cbb742dd3f7a95a225c408a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5016, "upload_time": "2016-08-22T13:02:17", "upload_time_iso_8601": "2016-08-22T13:02:17.626559Z", "url": "https://files.pythonhosted.org/packages/b6/76/93993ffeef292fe8a7b0381eefc1f6bbfb8e448f92cf465c07b86b2bc232/chippy-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "built for Linux-4.7.1-1-ARCH-x86_64-with-glibc2.3.4", "digests": {"md5": "a09f402d5ca2f89df95d51d52b728098", "sha256": "f0afc58f443838061b9f24d9c39f103dd3dc9404bb943b0af7e11445ec0708bd"}, "downloads": -1, "filename": "chippy-0.1.0.linux-x86_64.tar.gz", "has_sig": false, "md5_digest": "a09f402d5ca2f89df95d51d52b728098", "packagetype": "bdist_dumb", "python_version": "any", "requires_python": null, "size": 8587, "upload_time": "2016-08-22T13:02:25", "upload_time_iso_8601": "2016-08-22T13:02:25.446174Z", "url": "https://files.pythonhosted.org/packages/a2/02/272d6b828853d842cf0f782f6aaab406385dac0274174cc7d0331b6f401f/chippy-0.1.0.linux-x86_64.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "754ff3b79cbb742dd3f7a95a225c408a", "sha256": "ed3033c62668d04c4d69c01e6ec051a65ce358ed21024c7b85dee947a0e2d17b"}, "downloads": -1, "filename": "chippy-0.1.0.tar.gz", "has_sig": false, "md5_digest": "754ff3b79cbb742dd3f7a95a225c408a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5016, "upload_time": "2016-08-22T13:02:17", "upload_time_iso_8601": "2016-08-22T13:02:17.626559Z", "url": "https://files.pythonhosted.org/packages/b6/76/93993ffeef292fe8a7b0381eefc1f6bbfb8e448f92cf465c07b86b2bc232/chippy-0.1.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:19:32 2020"}