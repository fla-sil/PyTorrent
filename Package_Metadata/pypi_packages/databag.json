{"info": {"author": "Jeremy Kelley", "author_email": "jeremy@33ad.org", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Topic :: Database", "Topic :: Utilities"], "description": "\n<img src=\"https://github.com/nod/databag/raw/master/misc/dbag.png\" />\n\n# PUT YOUR DATA IN A BAG\n\nPretty simple library for splatting stuff to disk and getting it back out\nwith minimal fuss.\n\nIt's sort of a long term file based dictionary with enhanced range type\nfiltering.\n\n\n**updated for python3**\n\n## wait...\n\nYep - it's a nosql type, document oriented database wrapper on top of sqlite3.\n\n## features\n\n- Easy to use and quite efficient at accessing relatively large number of items\n  (not talking big data here, but a couple of thousand items works well)\n- Requires no other libs, everything is python batteries included.\n- Built on top of sqlite3 so it's fast and stable (which is included in Python\n  stdlib)\n- Easy to use - just create one and use it like a dictionary. Most dict methods\n  supported. Also can add to it like a set by not specifying a key.  One will\n  be created on the fly.\n- Pretty well tested\n- Ideal for running on small vm instances.  Doesn't require any other daemon to\n  provide data access\n- Core code is about 400 lines - very easy to understand.\n- Automatically compresses data with bz2 in cases that benefit from it\n- offers versioned records if you so choose\n- You can always query the data with native sqlite3 libs from other languages\n  if you need to.  It's just strings in the database.\n- Since the underlying datafile is sqlite3, multiple processes can work with\n  the same file (multiple read, write locks, etc)\n- Every object gets a ts object attached to it for convenience when it's saved.\n  This is accessed via `bag.when('key')`\n\n## versioning\n\nSimplified versioning is provided.  Just create your DataBag like:::\n\n```Python console\n>>> dbag = DataBag(versioned=True, fpath='/tmp/some.db')\n```\n\nand then you can do things like...\n\n```Python console\n>>> dbag['blah'] = 'blip'\n>>> dbag['blah'] = 'new blip'\n>>> dbag['blah'] = 'newer blip'\n>>> dbag.get('blah', version=-2)\nu'blip'\n>>> dbag.get('blah', version=-1)\nu'new blip'\n>>> dbag.get('blah')\nu'newer blip'\n>>> dbag['blah']\nu'newer blip'\n```\n\nThe default is to keep 10 versions but that can be set with the `history`\nparameter when initializing your bag.\n\nIf you don't specify an `fpath` argument, the database is only created in\nmemory.  \nBy specifying `fpath`, you specify the location of the file on the filesystem.\n\nA `bag.get(...)` method works much like a dictionary's `.get(...)` but with an\nadditional keyword argument of `version` that indicates how far back to go.\n\n## examples\n\n```Python console\n>>> from databag import DataBag\n>>> bag = DataBag() # will store sqlite db in memory\n>>> bag['xyz'] = 'some string' # will save in the db\n>>> s = bag['xyz'] # retrieves from db\n>>> s\n'some string'\n>>> 'xyz' in bag # True\nTrue\n>>> bag['abc'] = {'x':22, 'y':{'a':'blah'}} # works\n>>> bag['abc']\n{u'y': {u'a': u'blah'}, u'x': 22}\n>>> [k for k in bag]\n['abc', 'xyz']\n>>> bag.when('xyz')\ndatetime.datetime(2011, 12, 31, 2, 45, 47, 187621)\n>>> del bag['xyz']\n>>> 'xyz' in bag\nFalse\n>>> meh = DataBag(bag='other') # set name of storage table\n```\n\n## DictBag example\n\n```Python console\n>>> from databag import DictBag, Q\n>>> d = DictBag()\n>>> d.ensure_index(('name', 'age'))\n>>> person1 = {'name':'joe', 'age':23}\n>>> person2 = {'name':'sue', 'age':44}\n>>> d.add(person1)\n'fachVqv6RxsmCXAZgJMJ5p'\n>>> d.add(person2)\n'fpC7cAtx2ZQLadprQR7aa6'\n>>> d.find(Q('age')>40).next()\n(u'fpC7cAtx2ZQLadprQR7aa6', {u'age': 44, u'name': u'sue'})\n>>> age = Q('age')\n>>> [p for p in d.find(20 < age < 50) ]\n[(u'fachVqv6RxsmCXAZgJMJ5p', {u'age': 23, u'name': u'joe'}),\n    (u'fpC7cAtx2ZQLadprQR7aa6', {u'age': 44, u'name': u'sue'})]\n```\n\n\nThere's also some syntactic sugar that lets you also use a Q object directly\nif the key name is a proper symbol name in python.\n\n```\n>>> [p for p in d.find(20 < Q.age < 50) ]\n[(u'fachVqv6RxsmCXAZgJMJ5p', {u'age': 23, u'name': u'joe'}),\n    (u'fpC7cAtx2ZQLadprQR7aa6', {u'age': 44, u'name': u'sue'})]\n>>>\n```\n\n## Mongo Style Queries\n\n```Python console\n>>> d.find({'age':23})\n>>> d.find({'age':{\"$gt\":20}} )\n```\n\n## limitations\n\n- although a lot of the basic data types in python are supported for the values\n  (lists, dictionaries, tuples, ints, strings)... datetime objects can be saved\n  fine but they come out of the bag as an iso format string of the original\n  datetime.\n- when saving a dictionary, the keys must be a string in the dictionary.  If\n  they are not, they will be when coming back from the bag\n- if using versioning, be sure to instantiate your DataBag object with\n  versioning enabled and the same `history` size each time. Failure to do so\n  will cause interesting things to happen, in particular, your databag will act\n  unversioned and overwrite recent updates w/o cascading the historical change\n  to records.\n\n# DataBag ORM\n\nThere are times an ORM makes life a little easier.\n\n```python3\nfrom databag.orm.model import set_db_path, Model, Field, IntField, Q\n\nset_db_path(':memory:')\n\n# define one\nclass SomeThing(Model):\n    thingname = Field(str)\n    num = IntField()\n\n# make and save one\nmything = SomeThing(thingname='oobleck', num=23).save()\n\n# use one\nprint(mything.name)\n\n# get it from db again\nk = mything.key\nsamething = SomeThing.grab(k)\n\n# or search for it with the same syntax as DictBag, but get obj instead\notherthing = SomeThing.find_one(num=23) # just one\n\n# returns a generator, so list gets all of them\nthings = list(SomeThing.find(Q.num > 19))\n```\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/nod/databag", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "databag", "package_url": "https://pypi.org/project/databag/", "platform": "", "project_url": "https://pypi.org/project/databag/", "project_urls": {"Homepage": "https://github.com/nod/databag"}, "release_url": "https://pypi.org/project/databag/1.5.0/", "requires_dist": null, "requires_python": ">=3.6", "summary": "Put your data in a bag and get it back out again", "version": "1.5.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ae2a361134b8d10ab10507c40c4e63e549a416ad/68747470733a2f2f6769746875622e636f6d2f6e6f642f646174616261672f7261772f6d61737465722f6d6973632f646261672e706e67\">\n<h1>PUT YOUR DATA IN A BAG</h1>\n<p>Pretty simple library for splatting stuff to disk and getting it back out\nwith minimal fuss.</p>\n<p>It's sort of a long term file based dictionary with enhanced range type\nfiltering.</p>\n<p><strong>updated for python3</strong></p>\n<h2>wait...</h2>\n<p>Yep - it's a nosql type, document oriented database wrapper on top of sqlite3.</p>\n<h2>features</h2>\n<ul>\n<li>Easy to use and quite efficient at accessing relatively large number of items\n(not talking big data here, but a couple of thousand items works well)</li>\n<li>Requires no other libs, everything is python batteries included.</li>\n<li>Built on top of sqlite3 so it's fast and stable (which is included in Python\nstdlib)</li>\n<li>Easy to use - just create one and use it like a dictionary. Most dict methods\nsupported. Also can add to it like a set by not specifying a key.  One will\nbe created on the fly.</li>\n<li>Pretty well tested</li>\n<li>Ideal for running on small vm instances.  Doesn't require any other daemon to\nprovide data access</li>\n<li>Core code is about 400 lines - very easy to understand.</li>\n<li>Automatically compresses data with bz2 in cases that benefit from it</li>\n<li>offers versioned records if you so choose</li>\n<li>You can always query the data with native sqlite3 libs from other languages\nif you need to.  It's just strings in the database.</li>\n<li>Since the underlying datafile is sqlite3, multiple processes can work with\nthe same file (multiple read, write locks, etc)</li>\n<li>Every object gets a ts object attached to it for convenience when it's saved.\nThis is accessed via <code>bag.when('key')</code></li>\n</ul>\n<h2>versioning</h2>\n<p>Simplified versioning is provided.  Just create your DataBag like:::</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">dbag</span> <span class=\"o\">=</span> <span class=\"n\">DataBag</span><span class=\"p\">(</span><span class=\"n\">versioned</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">fpath</span><span class=\"o\">=</span><span class=\"s1\">'/tmp/some.db'</span><span class=\"p\">)</span>\n</pre>\n<p>and then you can do things like...</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">dbag</span><span class=\"p\">[</span><span class=\"s1\">'blah'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'blip'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">dbag</span><span class=\"p\">[</span><span class=\"s1\">'blah'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'new blip'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">dbag</span><span class=\"p\">[</span><span class=\"s1\">'blah'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'newer blip'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">dbag</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'blah'</span><span class=\"p\">,</span> <span class=\"n\">version</span><span class=\"o\">=-</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"sa\">u</span><span class=\"s1\">'blip'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">dbag</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'blah'</span><span class=\"p\">,</span> <span class=\"n\">version</span><span class=\"o\">=-</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"sa\">u</span><span class=\"s1\">'new blip'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">dbag</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'blah'</span><span class=\"p\">)</span>\n<span class=\"sa\">u</span><span class=\"s1\">'newer blip'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">dbag</span><span class=\"p\">[</span><span class=\"s1\">'blah'</span><span class=\"p\">]</span>\n<span class=\"sa\">u</span><span class=\"s1\">'newer blip'</span>\n</pre>\n<p>The default is to keep 10 versions but that can be set with the <code>history</code>\nparameter when initializing your bag.</p>\n<p>If you don't specify an <code>fpath</code> argument, the database is only created in\nmemory.<br>\nBy specifying <code>fpath</code>, you specify the location of the file on the filesystem.</p>\n<p>A <code>bag.get(...)</code> method works much like a dictionary's <code>.get(...)</code> but with an\nadditional keyword argument of <code>version</code> that indicates how far back to go.</p>\n<h2>examples</h2>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">databag</span> <span class=\"kn\">import</span> <span class=\"n\">DataBag</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">bag</span> <span class=\"o\">=</span> <span class=\"n\">DataBag</span><span class=\"p\">()</span> <span class=\"c1\"># will store sqlite db in memory</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">bag</span><span class=\"p\">[</span><span class=\"s1\">'xyz'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'some string'</span> <span class=\"c1\"># will save in the db</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">bag</span><span class=\"p\">[</span><span class=\"s1\">'xyz'</span><span class=\"p\">]</span> <span class=\"c1\"># retrieves from db</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">s</span>\n<span class=\"s1\">'some string'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"s1\">'xyz'</span> <span class=\"ow\">in</span> <span class=\"n\">bag</span> <span class=\"c1\"># True</span>\n<span class=\"kc\">True</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">bag</span><span class=\"p\">[</span><span class=\"s1\">'abc'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'x'</span><span class=\"p\">:</span><span class=\"mi\">22</span><span class=\"p\">,</span> <span class=\"s1\">'y'</span><span class=\"p\">:{</span><span class=\"s1\">'a'</span><span class=\"p\">:</span><span class=\"s1\">'blah'</span><span class=\"p\">}}</span> <span class=\"c1\"># works</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">bag</span><span class=\"p\">[</span><span class=\"s1\">'abc'</span><span class=\"p\">]</span>\n<span class=\"p\">{</span><span class=\"sa\">u</span><span class=\"s1\">'y'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"sa\">u</span><span class=\"s1\">'a'</span><span class=\"p\">:</span> <span class=\"sa\">u</span><span class=\"s1\">'blah'</span><span class=\"p\">},</span> <span class=\"sa\">u</span><span class=\"s1\">'x'</span><span class=\"p\">:</span> <span class=\"mi\">22</span><span class=\"p\">}</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"p\">[</span><span class=\"n\">k</span> <span class=\"k\">for</span> <span class=\"n\">k</span> <span class=\"ow\">in</span> <span class=\"n\">bag</span><span class=\"p\">]</span>\n<span class=\"p\">[</span><span class=\"s1\">'abc'</span><span class=\"p\">,</span> <span class=\"s1\">'xyz'</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">bag</span><span class=\"o\">.</span><span class=\"n\">when</span><span class=\"p\">(</span><span class=\"s1\">'xyz'</span><span class=\"p\">)</span>\n<span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">(</span><span class=\"mi\">2011</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">31</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">45</span><span class=\"p\">,</span> <span class=\"mi\">47</span><span class=\"p\">,</span> <span class=\"mi\">187621</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">del</span> <span class=\"n\">bag</span><span class=\"p\">[</span><span class=\"s1\">'xyz'</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"s1\">'xyz'</span> <span class=\"ow\">in</span> <span class=\"n\">bag</span>\n<span class=\"kc\">False</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">meh</span> <span class=\"o\">=</span> <span class=\"n\">DataBag</span><span class=\"p\">(</span><span class=\"n\">bag</span><span class=\"o\">=</span><span class=\"s1\">'other'</span><span class=\"p\">)</span> <span class=\"c1\"># set name of storage table</span>\n</pre>\n<h2>DictBag example</h2>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">databag</span> <span class=\"kn\">import</span> <span class=\"n\">DictBag</span><span class=\"p\">,</span> <span class=\"n\">Q</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"n\">DictBag</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">ensure_index</span><span class=\"p\">((</span><span class=\"s1\">'name'</span><span class=\"p\">,</span> <span class=\"s1\">'age'</span><span class=\"p\">))</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">person1</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'name'</span><span class=\"p\">:</span><span class=\"s1\">'joe'</span><span class=\"p\">,</span> <span class=\"s1\">'age'</span><span class=\"p\">:</span><span class=\"mi\">23</span><span class=\"p\">}</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">person2</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'name'</span><span class=\"p\">:</span><span class=\"s1\">'sue'</span><span class=\"p\">,</span> <span class=\"s1\">'age'</span><span class=\"p\">:</span><span class=\"mi\">44</span><span class=\"p\">}</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">person1</span><span class=\"p\">)</span>\n<span class=\"s1\">'fachVqv6RxsmCXAZgJMJ5p'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">person2</span><span class=\"p\">)</span>\n<span class=\"s1\">'fpC7cAtx2ZQLadprQR7aa6'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">find</span><span class=\"p\">(</span><span class=\"n\">Q</span><span class=\"p\">(</span><span class=\"s1\">'age'</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"mi\">40</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">next</span><span class=\"p\">()</span>\n<span class=\"p\">(</span><span class=\"sa\">u</span><span class=\"s1\">'fpC7cAtx2ZQLadprQR7aa6'</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"sa\">u</span><span class=\"s1\">'age'</span><span class=\"p\">:</span> <span class=\"mi\">44</span><span class=\"p\">,</span> <span class=\"sa\">u</span><span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"sa\">u</span><span class=\"s1\">'sue'</span><span class=\"p\">})</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">age</span> <span class=\"o\">=</span> <span class=\"n\">Q</span><span class=\"p\">(</span><span class=\"s1\">'age'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"p\">[</span><span class=\"n\">p</span> <span class=\"k\">for</span> <span class=\"n\">p</span> <span class=\"ow\">in</span> <span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">find</span><span class=\"p\">(</span><span class=\"mi\">20</span> <span class=\"o\">&lt;</span> <span class=\"n\">age</span> <span class=\"o\">&lt;</span> <span class=\"mi\">50</span><span class=\"p\">)</span> <span class=\"p\">]</span>\n<span class=\"p\">[(</span><span class=\"sa\">u</span><span class=\"s1\">'fachVqv6RxsmCXAZgJMJ5p'</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"sa\">u</span><span class=\"s1\">'age'</span><span class=\"p\">:</span> <span class=\"mi\">23</span><span class=\"p\">,</span> <span class=\"sa\">u</span><span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"sa\">u</span><span class=\"s1\">'joe'</span><span class=\"p\">}),</span>\n    <span class=\"p\">(</span><span class=\"sa\">u</span><span class=\"s1\">'fpC7cAtx2ZQLadprQR7aa6'</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"sa\">u</span><span class=\"s1\">'age'</span><span class=\"p\">:</span> <span class=\"mi\">44</span><span class=\"p\">,</span> <span class=\"sa\">u</span><span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"sa\">u</span><span class=\"s1\">'sue'</span><span class=\"p\">})]</span>\n</pre>\n<p>There's also some syntactic sugar that lets you also use a Q object directly\nif the key name is a proper symbol name in python.</p>\n<pre><code>&gt;&gt;&gt; [p for p in d.find(20 &lt; Q.age &lt; 50) ]\n[(u'fachVqv6RxsmCXAZgJMJ5p', {u'age': 23, u'name': u'joe'}),\n    (u'fpC7cAtx2ZQLadprQR7aa6', {u'age': 44, u'name': u'sue'})]\n&gt;&gt;&gt;\n</code></pre>\n<h2>Mongo Style Queries</h2>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">find</span><span class=\"p\">({</span><span class=\"s1\">'age'</span><span class=\"p\">:</span><span class=\"mi\">23</span><span class=\"p\">})</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">find</span><span class=\"p\">({</span><span class=\"s1\">'age'</span><span class=\"p\">:{</span><span class=\"s2\">\"$gt\"</span><span class=\"p\">:</span><span class=\"mi\">20</span><span class=\"p\">}}</span> <span class=\"p\">)</span>\n</pre>\n<h2>limitations</h2>\n<ul>\n<li>although a lot of the basic data types in python are supported for the values\n(lists, dictionaries, tuples, ints, strings)... datetime objects can be saved\nfine but they come out of the bag as an iso format string of the original\ndatetime.</li>\n<li>when saving a dictionary, the keys must be a string in the dictionary.  If\nthey are not, they will be when coming back from the bag</li>\n<li>if using versioning, be sure to instantiate your DataBag object with\nversioning enabled and the same <code>history</code> size each time. Failure to do so\nwill cause interesting things to happen, in particular, your databag will act\nunversioned and overwrite recent updates w/o cascading the historical change\nto records.</li>\n</ul>\n<h1>DataBag ORM</h1>\n<p>There are times an ORM makes life a little easier.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">databag.orm.model</span> <span class=\"kn\">import</span> <span class=\"n\">set_db_path</span><span class=\"p\">,</span> <span class=\"n\">Model</span><span class=\"p\">,</span> <span class=\"n\">Field</span><span class=\"p\">,</span> <span class=\"n\">IntField</span><span class=\"p\">,</span> <span class=\"n\">Q</span>\n\n<span class=\"n\">set_db_path</span><span class=\"p\">(</span><span class=\"s1\">':memory:'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># define one</span>\n<span class=\"k\">class</span> <span class=\"nc\">SomeThing</span><span class=\"p\">(</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">thingname</span> <span class=\"o\">=</span> <span class=\"n\">Field</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">)</span>\n    <span class=\"n\">num</span> <span class=\"o\">=</span> <span class=\"n\">IntField</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># make and save one</span>\n<span class=\"n\">mything</span> <span class=\"o\">=</span> <span class=\"n\">SomeThing</span><span class=\"p\">(</span><span class=\"n\">thingname</span><span class=\"o\">=</span><span class=\"s1\">'oobleck'</span><span class=\"p\">,</span> <span class=\"n\">num</span><span class=\"o\">=</span><span class=\"mi\">23</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># use one</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">mything</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># get it from db again</span>\n<span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"n\">mything</span><span class=\"o\">.</span><span class=\"n\">key</span>\n<span class=\"n\">samething</span> <span class=\"o\">=</span> <span class=\"n\">SomeThing</span><span class=\"o\">.</span><span class=\"n\">grab</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># or search for it with the same syntax as DictBag, but get obj instead</span>\n<span class=\"n\">otherthing</span> <span class=\"o\">=</span> <span class=\"n\">SomeThing</span><span class=\"o\">.</span><span class=\"n\">find_one</span><span class=\"p\">(</span><span class=\"n\">num</span><span class=\"o\">=</span><span class=\"mi\">23</span><span class=\"p\">)</span> <span class=\"c1\"># just one</span>\n\n<span class=\"c1\"># returns a generator, so list gets all of them</span>\n<span class=\"n\">things</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">SomeThing</span><span class=\"o\">.</span><span class=\"n\">find</span><span class=\"p\">(</span><span class=\"n\">Q</span><span class=\"o\">.</span><span class=\"n\">num</span> <span class=\"o\">&gt;</span> <span class=\"mi\">19</span><span class=\"p\">))</span>\n</pre>\n\n          </div>"}, "last_serial": 6370358, "releases": {"0.2-30-g69f6-mod": [{"comment_text": "", "digests": {"md5": "b03ae3cc8460ff5e0c97ef2c88a37736", "sha256": "fe2633670cb98a867208c935ca601240e553a9911293f27c81c23a42bcbc4fb1"}, "downloads": -1, "filename": "databag-0.2-30-g69f6-mod.tar.gz", "has_sig": false, "md5_digest": "b03ae3cc8460ff5e0c97ef2c88a37736", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5394, "upload_time": "2012-08-09T08:38:29", "upload_time_iso_8601": "2012-08-09T08:38:29.650797Z", "url": "https://files.pythonhosted.org/packages/97/50/72e2b58ac4fae6b6fee72c33729263b1eeff721aa231089c6f223c8078b8/databag-0.2-30-g69f6-mod.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "4f417ce902a2a07bfa22eca24c94c54f", "sha256": "68071be5a61213656ae9fa96fa18d6c2335bbf5ead13e618cb92f3c7f4860eaf"}, "downloads": -1, "filename": "databag-0.3.tar.gz", "has_sig": false, "md5_digest": "4f417ce902a2a07bfa22eca24c94c54f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5370, "upload_time": "2012-08-09T08:55:44", "upload_time_iso_8601": "2012-08-09T08:55:44.042753Z", "url": "https://files.pythonhosted.org/packages/54/3c/c4d60364d6aaa4e7e5e7ae6ee533ded367526ba46cc70bdac51cebe4301c/databag-0.3.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "8478f166bb3fc79ee0a0b1666ca390df", "sha256": "4c08c866d584a2499bf2048163be3fcd9682bacb7ffbe846c4be7776a2718b67"}, "downloads": -1, "filename": "databag-0.3.1.tar.gz", "has_sig": false, "md5_digest": "8478f166bb3fc79ee0a0b1666ca390df", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7398, "upload_time": "2012-08-09T09:01:15", "upload_time_iso_8601": "2012-08-09T09:01:15.826153Z", "url": "https://files.pythonhosted.org/packages/e1/56/5791f24c1c040c41284454d2bbccb7a4739dfa6ae7b2a60f96f7b4eb1180/databag-0.3.1.tar.gz", "yanked": false}], "0.3.2-mod": [{"comment_text": "", "digests": {"md5": "443176c97f4fcaa2c36c8e100f37cce1", "sha256": "9b533b2f2511384af01181607f94fb5f100426e9ec3617335954b101aec82488"}, "downloads": -1, "filename": "databag-0.3.2-mod.tar.gz", "has_sig": false, "md5_digest": "443176c97f4fcaa2c36c8e100f37cce1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7472, "upload_time": "2012-08-09T22:11:52", "upload_time_iso_8601": "2012-08-09T22:11:52.135575Z", "url": "https://files.pythonhosted.org/packages/04/65/ab8561bc0934cccec1e3c16af35cdf8c92e544163e51958a1b74e961da24/databag-0.3.2-mod.tar.gz", "yanked": false}], "1.0.0.0": [{"comment_text": "", "digests": {"md5": "b7f1f88d4aea0be79d18259cc5af7f18", "sha256": "f836e592b2a96e57a0155e89c04f8fc1e1bdbbec162f8674bf1d2b64023c95b1"}, "downloads": -1, "filename": "databag-1.0.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "b7f1f88d4aea0be79d18259cc5af7f18", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 10004, "upload_time": "2019-12-21T21:29:24", "upload_time_iso_8601": "2019-12-21T21:29:24.180243Z", "url": "https://files.pythonhosted.org/packages/73/2b/e32b191726078dda3c1fcbb39ffdd9b1e3d3fdbeed8fd2ce2d6610a4ae72/databag-1.0.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f92b8e4af2f5b7646b47051835f617a7", "sha256": "7d5882ec19b5df551c088574843b8541c6bd06f2947d0be13a4942ecb5c17373"}, "downloads": -1, "filename": "databag-1.0.0.0.tar.gz", "has_sig": false, "md5_digest": "f92b8e4af2f5b7646b47051835f617a7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 9733, "upload_time": "2019-12-21T21:29:25", "upload_time_iso_8601": "2019-12-21T21:29:25.820072Z", "url": "https://files.pythonhosted.org/packages/0f/9c/ab41e73bd86b8a6a2b016e440560f684171a310c2a656da963b8b22127e9/databag-1.0.0.0.tar.gz", "yanked": false}], "1.4.9": [{"comment_text": "", "digests": {"md5": "6888e1f07650bcfa2d655c58113742a4", "sha256": "b4657cf6b77236019469fa8a8434519e284c24b2de0f0eff2eb97570d6781c3c"}, "downloads": -1, "filename": "databag-1.4.9-py3-none-any.whl", "has_sig": false, "md5_digest": "6888e1f07650bcfa2d655c58113742a4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 12728, "upload_time": "2019-12-29T03:07:50", "upload_time_iso_8601": "2019-12-29T03:07:50.998140Z", "url": "https://files.pythonhosted.org/packages/55/f0/f4a3766dbdb1ddaccd3a26de66df99fce50fc1ba4b681cec504fff8775d6/databag-1.4.9-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a77e092c7b2c0b13e54bd94310e8dc16", "sha256": "160a9989590e3ffef8a76e871ed4444f5b0eb0398f8d8931e39a6efdf6b775be"}, "downloads": -1, "filename": "databag-1.4.9.tar.gz", "has_sig": false, "md5_digest": "a77e092c7b2c0b13e54bd94310e8dc16", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 13520, "upload_time": "2019-12-29T03:07:53", "upload_time_iso_8601": "2019-12-29T03:07:53.082637Z", "url": "https://files.pythonhosted.org/packages/7a/fb/b9b418d551243c53a9f63493c6d963f517cde7270fd1105780681d666e3b/databag-1.4.9.tar.gz", "yanked": false}], "1.5.0": [{"comment_text": "", "digests": {"md5": "8ec5b2485aff5e38a38a4d0482e83bfa", "sha256": "e800e52c41fc6fc971aa9eb83c7c973d5cc9878a6327bd87847217f57fc36bc5"}, "downloads": -1, "filename": "databag-1.5.0-py3-none-any.whl", "has_sig": false, "md5_digest": "8ec5b2485aff5e38a38a4d0482e83bfa", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 12726, "upload_time": "2019-12-29T03:05:09", "upload_time_iso_8601": "2019-12-29T03:05:09.292285Z", "url": "https://files.pythonhosted.org/packages/16/08/f333b6cbe2737feae05abe650a6e59d0e19dfe2021eda5c903b8632a9740/databag-1.5.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "176ee6a337af24f991d0e4fe60847a6e", "sha256": "b2065b4678f973146a2ea06913c967ea22a4f9ea2b1d5673916c6de685481976"}, "downloads": -1, "filename": "databag-1.5.0.tar.gz", "has_sig": false, "md5_digest": "176ee6a337af24f991d0e4fe60847a6e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 13514, "upload_time": "2019-12-29T03:05:10", "upload_time_iso_8601": "2019-12-29T03:05:10.943373Z", "url": "https://files.pythonhosted.org/packages/e2/a6/20c0a5bb9fef41e6b6db0ef12e7f95da507047c3ff023a70587e7e605f51/databag-1.5.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "8ec5b2485aff5e38a38a4d0482e83bfa", "sha256": "e800e52c41fc6fc971aa9eb83c7c973d5cc9878a6327bd87847217f57fc36bc5"}, "downloads": -1, "filename": "databag-1.5.0-py3-none-any.whl", "has_sig": false, "md5_digest": "8ec5b2485aff5e38a38a4d0482e83bfa", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 12726, "upload_time": "2019-12-29T03:05:09", "upload_time_iso_8601": "2019-12-29T03:05:09.292285Z", "url": "https://files.pythonhosted.org/packages/16/08/f333b6cbe2737feae05abe650a6e59d0e19dfe2021eda5c903b8632a9740/databag-1.5.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "176ee6a337af24f991d0e4fe60847a6e", "sha256": "b2065b4678f973146a2ea06913c967ea22a4f9ea2b1d5673916c6de685481976"}, "downloads": -1, "filename": "databag-1.5.0.tar.gz", "has_sig": false, "md5_digest": "176ee6a337af24f991d0e4fe60847a6e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 13514, "upload_time": "2019-12-29T03:05:10", "upload_time_iso_8601": "2019-12-29T03:05:10.943373Z", "url": "https://files.pythonhosted.org/packages/e2/a6/20c0a5bb9fef41e6b6db0ef12e7f95da507047c3ff023a70587e7e605f51/databag-1.5.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:40:31 2020"}