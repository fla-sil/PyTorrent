{"info": {"author": "Mark Blakeney", "author_email": "mark@irsaere.net", "bugtrack_url": null, "classifiers": ["Programming Language :: Python :: 3"], "description": "## WCCONTROL - Watts Clever Switch Control\n\nThis is a Raspberry Pi command line program and Python module to switch\non and off a Watts Clever RF Switch via a cheap 433 MHz transmitter\nmodule. I also have a [higher level program\n`wcscheduler`](https://github.com/bulletmark/wcscheduler) which imports\nthis module and can be used to schedule one or more switches on/off at\nspecified times and days of week.\n\nThe `wccontrol` module implements the protocol which was reverse\nengineered in the excellent posts\n[here](https://goughlui.com/2016/04/10/reverse-eng-watts-clever-easy-off-sockets-wsmart-box-es-aus1103/)\nand\n[here](https://goughlui.com/2016/04/13/reverse-eng-pt-2-watts-clever-easy-off-wsmart-box-es-aus1103/).\n\nThe latest version of this document and code is available at\nhttps://github.com/bulletmark/wccontrol.\n\n### Watts Clever Switch\n\nYou need one or more of these:\n\n![Watts Clever RF Switch](http://i.imgur.com/mILcB6m.jpg)\n\nOften this is purchased in a pack with 2, 3, or 4 such switches, and an\nIR (infra-red) receiver box which allows you to operate the remote\nswitches using a standard TV remote which talks IR to the receiver, then\nthe receiver talks RF 433 MHz to the switches. E.g the pack is:\n\n![Watts Clever Easy Off Pack](http://i.imgur.com/uqLBL8f.jpg)\n\nThe `wccontrol` module allows your Raspberry Pi to talk directly via RF\nto the switches. You do not need the IR receiver box at all (i.e. you do\nnot need the blue box in above image), neither to operate or initially\nprogram the switches. `wccontrol` can be used to fully program\nswitch group and addresses, and then to operate the switches on and off.\n\n### RF Transmitter\n\nYou also need a 433 MHz RF transmitter to connect to your Raspberry Pi.\n\n![RF Transmitter](http://i.imgur.com/UHoh3Px.jpg)\n\nRF modules like the above for Raspberry Pi and similar devices are\npurchased for only a few bucks on ebay etc, usually as a transmitter and\nreceiver pair. To use `wccontrol`, we only need the transmitter which is\nthe smaller board as shown above.\n\nThe transmitter has 3 pins which you directly connect to the RPi header\npins using push-on [female to female jumper\nwires](https://cdn.solarbotics.com/products/photos/0044041262b3ac74afe434653a898da2/45030-IMG_6230wht.jpg)\nas follows.\n\nTx pin | Description | Raspberry Pi GPIO header\n------ | ----------- | ------------------------\nLeft   | Data        | GPIO4 (board pin 7)\nMiddle | VCC         | 5V power (e.g. board pin 4)\nRight  | GND         | Ground  (e.g. board pin 6).\n\nYou can significantly increase the range of the transmitter by soldering\na 17.3 cm copper wire to the ANT pad in the corner of the PCB. Ideally,\norientate the wire parallel to the switches.\n\nNote that `wccontrol` uses GPIO4 by default to drive the transmitter but\nyou can easily set it to use any of the other Raspberry Pi GPIO pins by\npassing the `pin` argument.\n\n### Installation\n\nRequires Python 3.4 or later. Does not work with Python 2.\n\n`wccontrol` is [available on PyPI](https://pypi.org/project/wccontrol/)\nso install the usual way, e.g:\n\n```bash\npip3 install wccontrol\n```\n\nOr explicitly from [github](https://github.com/bulletmark/wccontrol):\n\n```bash\ngit clone https://github.com/bulletmark/wccontrol.git\ncd wccontrol\nsudo pip3 install .\n```\n\n#### Make GPIO Device Accessible\n\nTo be able to run this utility/module as your normal user you need to\ninstall a udev rule and assign yourself to the `gpio` group.\n\nAs root, create `gpio` group:\n\n    sudo groupadd -f -r gpio\n\nAdd your user to that group:\n\n    sudo usermod -aG gpio $USER\n\nInstall `gpio.rules` (execute one of the following lines depending if\nyou installed a local git clone, or from where `pip` installed to):\n\n    sudo cp gpio.rules /etc/udev/rules.d/99-gpio.rules\n    sudo cp env/share/wccontrol/gpio.rules /etc/udev/rules.d/99-gpio.rules\n    sudo cp /usr/share/wccontrol/gpio.rules /etc/udev/rules.d/99-gpio.rules\n    sudo cp /usr/local/share/wccontrol/gpio.rules /etc/udev/rules.d/99-gpio.rules\n\nReboot your RPi and log back in again.\n\n### Groups and Addresses\n\nBefore you can operate a switch on/off you must first program it to\nrespond to a specific _group_ and _address_.\n\nA _group_ is a number 0 to 1023. An _address_ is a number 0 to 7 within\na group that you allocate to specific switches. Address number 6 is\nspecial as it means \"all addresses in same group\", i.e. you can switch\nall devices together in the same group by using address 6. So there are\nactually only 7 unique addresses which you can use per group, 0->5 and\n7. Thus there are potentially 1024 x 7 individually addressable devices\nyou can control.\n\n#### Program Group and Address to Device\n\nE.g. say you want to assign your first switch as address 0 in group 0.\n\n1. Ensure power is applied to the switch.\n1. Ensure switch is OFF, i.e. press button to turn LED OFF.\n1. Press and hold the switch button until the LED fast flashes, then\n   slow flashes, then release.\n1. Execute the ON command `wccontrol 0 0 1` to program ON.\n1. Execute the OFF command `wccontrol 0 0 0` to program OFF.\n1. The LED will go OFF and the switch is now programmed.\n1. Test using `wccontrol 0 0 1` to confirm the switch goes ON then \n   `wccontrol 0 0 0` to confirm the switch goes OFF.\n1. Repeat the above steps for your other switches using a different group/address.\n\n### Example Commands to Switch On and Off\n\nSwitch group 0, device 2 to ON:\n\n    wccontrol 0 2 1\n\nSwitch group 0, device 2 to OFF:\n\n    wccontrol 0 2 0\n\nSwitch group 0, device 3 to ON:\n\n    wccontrol 0 3 1\n\nSwitch group 0, device 3 to OFF:\n\n    wccontrol 0 3 0\n\nSwitch both (i.e. all) devices in group 0 to ON:\n\n    wccontrol 0 6 1\n\nSwitch both (i.e. all) devices in group 0 to OFF:\n\n    wccontrol 0 6 0\n\n### Command Line Options\n\n```\nusage: wccontrol [-h] [-p PIN] [-r RETRIES] [-s BITSHORTGAP] [-l BITLONGGAP]\n                 [-m MSGGAP]\n                 group address {0,1}\n\nModule/program to set a Watts Clever Smart switch on or off.\n\npositional arguments:\n  group                 group, 0 to 1023\n  address               switch address to write to, 0 to 7 (6=all in same\n                        group)\n  {0,1}                 value 0=off, 1=on\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -p PIN, --pin PIN     RPi BCM GPIO pin to output (default: 4)\n  -r RETRIES, --retries RETRIES\n                        number of retries to send (default: 10)\n  -s BITSHORTGAP, --bitshortgap BITSHORTGAP\n                        inter bit short gap in microseconds (default: 406)\n  -l BITLONGGAP, --bitlonggap BITLONGGAP\n                        inter bit long gap in microseconds (default: 937)\n  -m MSGGAP, --msggap MSGGAP\n                        inter message gap in milliseconds (default: 20)\n```\n\n### Using as a Python Module\n\n```python\nimport wccontrol\nwccontrol.set(0, 2, 1)\n```\n\nSee the stub code in\n[`wccontrol.py`](https://github.com/bulletmark/wccontrol/blob/master/wccontrol.py)\nor my [scheduler\napplication](https://github.com/bulletmark/wcscheduler/blob/master/wcscheduler)\nfor more complete examples using the python module.\n\n### IFTTT Integration\n\nAnother example of how this module can be used is to call it from a tiny\nweb service application you can run on your Raspberry Pi and which can\nreceive [IFTTT](https://ifttt.com/discover) web-hook messages from the\ninternet to turn devices on and off. Usually you would just forward a\nport from your home firewall/router to the RPi. The web-hooks can be\ntriggered by the Google Assistant service. So you can say \"Hey Google,\nturn the Living Room lights on\" and it happens! Quite simple and cheap\nto implement given the hardware described here.\n\n<!-- vim: se ai syn=markdown: -->", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/bulletmark/wccontrol", "keywords": "RPi", "license": "GPLv3", "maintainer": "", "maintainer_email": "", "name": "wccontrol", "package_url": "https://pypi.org/project/wccontrol/", "platform": "", "project_url": "https://pypi.org/project/wccontrol/", "project_urls": {"Homepage": "https://github.com/bulletmark/wccontrol"}, "release_url": "https://pypi.org/project/wccontrol/1.13/", "requires_dist": null, "requires_python": ">=3.4", "summary": "Python module/program to control Watts Clever switch", "version": "1.13", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h2>WCCONTROL - Watts Clever Switch Control</h2>\n<p>This is a Raspberry Pi command line program and Python module to switch\non and off a Watts Clever RF Switch via a cheap 433 MHz transmitter\nmodule. I also have a <a href=\"https://github.com/bulletmark/wcscheduler\" rel=\"nofollow\">higher level program\n<code>wcscheduler</code></a> which imports\nthis module and can be used to schedule one or more switches on/off at\nspecified times and days of week.</p>\n<p>The <code>wccontrol</code> module implements the protocol which was reverse\nengineered in the excellent posts\n<a href=\"https://goughlui.com/2016/04/10/reverse-eng-watts-clever-easy-off-sockets-wsmart-box-es-aus1103/\" rel=\"nofollow\">here</a>\nand\n<a href=\"https://goughlui.com/2016/04/13/reverse-eng-pt-2-watts-clever-easy-off-wsmart-box-es-aus1103/\" rel=\"nofollow\">here</a>.</p>\n<p>The latest version of this document and code is available at\n<a href=\"https://github.com/bulletmark/wccontrol\" rel=\"nofollow\">https://github.com/bulletmark/wccontrol</a>.</p>\n<h3>Watts Clever Switch</h3>\n<p>You need one or more of these:</p>\n<p><img alt=\"Watts Clever RF Switch\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3c68186d8def6bfe6b4f7ec88a60959294354246/687474703a2f2f692e696d6775722e636f6d2f6d494c6342366d2e6a7067\"></p>\n<p>Often this is purchased in a pack with 2, 3, or 4 such switches, and an\nIR (infra-red) receiver box which allows you to operate the remote\nswitches using a standard TV remote which talks IR to the receiver, then\nthe receiver talks RF 433 MHz to the switches. E.g the pack is:</p>\n<p><img alt=\"Watts Clever Easy Off Pack\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b09ff34fbb02fe3100412716c8979ffc110526ab/687474703a2f2f692e696d6775722e636f6d2f75714c424c38662e6a7067\"></p>\n<p>The <code>wccontrol</code> module allows your Raspberry Pi to talk directly via RF\nto the switches. You do not need the IR receiver box at all (i.e. you do\nnot need the blue box in above image), neither to operate or initially\nprogram the switches. <code>wccontrol</code> can be used to fully program\nswitch group and addresses, and then to operate the switches on and off.</p>\n<h3>RF Transmitter</h3>\n<p>You also need a 433 MHz RF transmitter to connect to your Raspberry Pi.</p>\n<p><img alt=\"RF Transmitter\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1c37b1baba7cd729a43878e17a32c4db231fb68e/687474703a2f2f692e696d6775722e636f6d2f55486f683350782e6a7067\"></p>\n<p>RF modules like the above for Raspberry Pi and similar devices are\npurchased for only a few bucks on ebay etc, usually as a transmitter and\nreceiver pair. To use <code>wccontrol</code>, we only need the transmitter which is\nthe smaller board as shown above.</p>\n<p>The transmitter has 3 pins which you directly connect to the RPi header\npins using push-on <a href=\"https://cdn.solarbotics.com/products/photos/0044041262b3ac74afe434653a898da2/45030-IMG_6230wht.jpg\" rel=\"nofollow\">female to female jumper\nwires</a>\nas follows.</p>\n<table>\n<thead>\n<tr>\n<th>Tx pin</th>\n<th>Description</th>\n<th>Raspberry Pi GPIO header</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Left</td>\n<td>Data</td>\n<td>GPIO4 (board pin 7)</td>\n</tr>\n<tr>\n<td>Middle</td>\n<td>VCC</td>\n<td>5V power (e.g. board pin 4)</td>\n</tr>\n<tr>\n<td>Right</td>\n<td>GND</td>\n<td>Ground  (e.g. board pin 6).</td>\n</tr></tbody></table>\n<p>You can significantly increase the range of the transmitter by soldering\na 17.3 cm copper wire to the ANT pad in the corner of the PCB. Ideally,\norientate the wire parallel to the switches.</p>\n<p>Note that <code>wccontrol</code> uses GPIO4 by default to drive the transmitter but\nyou can easily set it to use any of the other Raspberry Pi GPIO pins by\npassing the <code>pin</code> argument.</p>\n<h3>Installation</h3>\n<p>Requires Python 3.4 or later. Does not work with Python 2.</p>\n<p><code>wccontrol</code> is <a href=\"https://pypi.org/project/wccontrol/\" rel=\"nofollow\">available on PyPI</a>\nso install the usual way, e.g:</p>\n<pre>pip3 install wccontrol\n</pre>\n<p>Or explicitly from <a href=\"https://github.com/bulletmark/wccontrol\" rel=\"nofollow\">github</a>:</p>\n<pre>git clone https://github.com/bulletmark/wccontrol.git\n<span class=\"nb\">cd</span> wccontrol\nsudo pip3 install .\n</pre>\n<h4>Make GPIO Device Accessible</h4>\n<p>To be able to run this utility/module as your normal user you need to\ninstall a udev rule and assign yourself to the <code>gpio</code> group.</p>\n<p>As root, create <code>gpio</code> group:</p>\n<pre><code>sudo groupadd -f -r gpio\n</code></pre>\n<p>Add your user to that group:</p>\n<pre><code>sudo usermod -aG gpio $USER\n</code></pre>\n<p>Install <code>gpio.rules</code> (execute one of the following lines depending if\nyou installed a local git clone, or from where <code>pip</code> installed to):</p>\n<pre><code>sudo cp gpio.rules /etc/udev/rules.d/99-gpio.rules\nsudo cp env/share/wccontrol/gpio.rules /etc/udev/rules.d/99-gpio.rules\nsudo cp /usr/share/wccontrol/gpio.rules /etc/udev/rules.d/99-gpio.rules\nsudo cp /usr/local/share/wccontrol/gpio.rules /etc/udev/rules.d/99-gpio.rules\n</code></pre>\n<p>Reboot your RPi and log back in again.</p>\n<h3>Groups and Addresses</h3>\n<p>Before you can operate a switch on/off you must first program it to\nrespond to a specific <em>group</em> and <em>address</em>.</p>\n<p>A <em>group</em> is a number 0 to 1023. An <em>address</em> is a number 0 to 7 within\na group that you allocate to specific switches. Address number 6 is\nspecial as it means \"all addresses in same group\", i.e. you can switch\nall devices together in the same group by using address 6. So there are\nactually only 7 unique addresses which you can use per group, 0-&gt;5 and\n7. Thus there are potentially 1024 x 7 individually addressable devices\nyou can control.</p>\n<h4>Program Group and Address to Device</h4>\n<p>E.g. say you want to assign your first switch as address 0 in group 0.</p>\n<ol>\n<li>Ensure power is applied to the switch.</li>\n<li>Ensure switch is OFF, i.e. press button to turn LED OFF.</li>\n<li>Press and hold the switch button until the LED fast flashes, then\nslow flashes, then release.</li>\n<li>Execute the ON command <code>wccontrol 0 0 1</code> to program ON.</li>\n<li>Execute the OFF command <code>wccontrol 0 0 0</code> to program OFF.</li>\n<li>The LED will go OFF and the switch is now programmed.</li>\n<li>Test using <code>wccontrol 0 0 1</code> to confirm the switch goes ON then\n<code>wccontrol 0 0 0</code> to confirm the switch goes OFF.</li>\n<li>Repeat the above steps for your other switches using a different group/address.</li>\n</ol>\n<h3>Example Commands to Switch On and Off</h3>\n<p>Switch group 0, device 2 to ON:</p>\n<pre><code>wccontrol 0 2 1\n</code></pre>\n<p>Switch group 0, device 2 to OFF:</p>\n<pre><code>wccontrol 0 2 0\n</code></pre>\n<p>Switch group 0, device 3 to ON:</p>\n<pre><code>wccontrol 0 3 1\n</code></pre>\n<p>Switch group 0, device 3 to OFF:</p>\n<pre><code>wccontrol 0 3 0\n</code></pre>\n<p>Switch both (i.e. all) devices in group 0 to ON:</p>\n<pre><code>wccontrol 0 6 1\n</code></pre>\n<p>Switch both (i.e. all) devices in group 0 to OFF:</p>\n<pre><code>wccontrol 0 6 0\n</code></pre>\n<h3>Command Line Options</h3>\n<pre><code>usage: wccontrol [-h] [-p PIN] [-r RETRIES] [-s BITSHORTGAP] [-l BITLONGGAP]\n                 [-m MSGGAP]\n                 group address {0,1}\n\nModule/program to set a Watts Clever Smart switch on or off.\n\npositional arguments:\n  group                 group, 0 to 1023\n  address               switch address to write to, 0 to 7 (6=all in same\n                        group)\n  {0,1}                 value 0=off, 1=on\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -p PIN, --pin PIN     RPi BCM GPIO pin to output (default: 4)\n  -r RETRIES, --retries RETRIES\n                        number of retries to send (default: 10)\n  -s BITSHORTGAP, --bitshortgap BITSHORTGAP\n                        inter bit short gap in microseconds (default: 406)\n  -l BITLONGGAP, --bitlonggap BITLONGGAP\n                        inter bit long gap in microseconds (default: 937)\n  -m MSGGAP, --msggap MSGGAP\n                        inter message gap in milliseconds (default: 20)\n</code></pre>\n<h3>Using as a Python Module</h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">wccontrol</span>\n<span class=\"n\">wccontrol</span><span class=\"o\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n</pre>\n<p>See the stub code in\n<a href=\"https://github.com/bulletmark/wccontrol/blob/master/wccontrol.py\" rel=\"nofollow\"><code>wccontrol.py</code></a>\nor my <a href=\"https://github.com/bulletmark/wcscheduler/blob/master/wcscheduler\" rel=\"nofollow\">scheduler\napplication</a>\nfor more complete examples using the python module.</p>\n<h3>IFTTT Integration</h3>\n<p>Another example of how this module can be used is to call it from a tiny\nweb service application you can run on your Raspberry Pi and which can\nreceive <a href=\"https://ifttt.com/discover\" rel=\"nofollow\">IFTTT</a> web-hook messages from the\ninternet to turn devices on and off. Usually you would just forward a\nport from your home firewall/router to the RPi. The web-hooks can be\ntriggered by the Google Assistant service. So you can say \"Hey Google,\nturn the Living Room lights on\" and it happens! Quite simple and cheap\nto implement given the hardware described here.</p>\n\n\n          </div>"}, "last_serial": 6149614, "releases": {"1.10": [{"comment_text": "", "digests": {"md5": "26945f28cd32cf81c1cf18e137e47b1e", "sha256": "f915c28cc38895333c7126e1f8a295938e520c3901b1aabefef5398724f8aa82"}, "downloads": -1, "filename": "wccontrol-1.10.tar.gz", "has_sig": false, "md5_digest": "26945f28cd32cf81c1cf18e137e47b1e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 6080, "upload_time": "2019-10-17T03:55:07", "upload_time_iso_8601": "2019-10-17T03:55:07.138635Z", "url": "https://files.pythonhosted.org/packages/0b/0b/c8b4a5796b4d6eed0bfaa06f76698c7a89cda7685e34594ca258728228d2/wccontrol-1.10.tar.gz", "yanked": false}], "1.13": [{"comment_text": "", "digests": {"md5": "8795fb3636116997a2664e6b5aecf789", "sha256": "8f304de3109e45051fa599b4e4ec9b5d52075d7309372224174f2380d3092310"}, "downloads": -1, "filename": "wccontrol-1.13.tar.gz", "has_sig": false, "md5_digest": "8795fb3636116997a2664e6b5aecf789", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 6580, "upload_time": "2019-11-17T06:19:28", "upload_time_iso_8601": "2019-11-17T06:19:28.359333Z", "url": "https://files.pythonhosted.org/packages/d8/40/74974a0d2ebb9efb3b6f7b9c8fd25f5f952f3e0fa848efeb476194771840/wccontrol-1.13.tar.gz", "yanked": false}], "1.9": [{"comment_text": "", "digests": {"md5": "23ba68938deac9fc91524054f225ffca", "sha256": "c082018adbb03ad97c0810179554b070cc3bc28d70ab7e698a493c3f695614bf"}, "downloads": -1, "filename": "wccontrol-1.9.tar.gz", "has_sig": false, "md5_digest": "23ba68938deac9fc91524054f225ffca", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 6061, "upload_time": "2019-08-28T02:10:22", "upload_time_iso_8601": "2019-08-28T02:10:22.157374Z", "url": "https://files.pythonhosted.org/packages/c9/1a/dd85feb5a9fd055fe093ac6ca1f49b143c23d35f862503561b4a86c542a9/wccontrol-1.9.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "8795fb3636116997a2664e6b5aecf789", "sha256": "8f304de3109e45051fa599b4e4ec9b5d52075d7309372224174f2380d3092310"}, "downloads": -1, "filename": "wccontrol-1.13.tar.gz", "has_sig": false, "md5_digest": "8795fb3636116997a2664e6b5aecf789", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 6580, "upload_time": "2019-11-17T06:19:28", "upload_time_iso_8601": "2019-11-17T06:19:28.359333Z", "url": "https://files.pythonhosted.org/packages/d8/40/74974a0d2ebb9efb3b6f7b9c8fd25f5f952f3e0fa848efeb476194771840/wccontrol-1.13.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:31:47 2020"}