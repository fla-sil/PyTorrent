{"info": {"author": "Calculation Consulting", "author_email": "info@calculationconsulting.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "Intended Audience :: Education", "Intended Audience :: Science/Research", "License :: OSI Approved :: Apache Software License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Scientific/Engineering :: Artificial Intelligence"], "description": "<meta name=\"image\" property=\"og:image\" content=\"https://github.com/CalculatedContent/PredictingTestAccuracies/blob/master/img/vgg-w_alphas.png\">\n\n## Weight Watcher  \n\n### the Stat Mech Edition\n\nCurrent Version: 0.2.7\n\n**Weight Watcher** analyzes the Fat Tails in the  weight matrices of Deep Neural Networks (DNNs).\n\nThis tool can predict the trends in the generalization accuracy of a series of DNNs, such as VGG11, VGG13, ...,\nor even the entire series of ResNet models--without needing a test set !\n\nThis relies upon recent research into the [Heavy (Fat) Tailed Self Regularization in DNNs](https://openreview.net/forum?id=SJeFNoRcFQ)\n\nThe tool lets one compute a averager capacity, or quality, metric for a series of  DNNs, trained on the same data, but with different hyperparameters, or even different but related architectures. For example, it can predict that VGG19_BN generalizes better than VGG19, and better than VGG16_BN, VGG16, etc.  \n\n\n\n### Types of Capacity Metrics:\nThere are 2 metrics availabe. The average **log Norm**, which is much faster but less accurate.\nThe average **weighted alpha** is more accurate but much slower because it needs to both compute the SVD of the layer weight matrices, and thenaa\nfit the singluar/eigenvalues to a power law.\n\n- log Norm (default, fast, less accurate)\n- weighted alpaha (slow, more accurate)\n\nHere is an example of the **Weighted Alpha** capacity metric for all the current pretrained VGG models.\n![alt text](https://github.com/CalculatedContent/PredictingTestAccuracies/blob/master/img/vgg-w_alphas.png)\n\nNotice: we *did not peek* at the ImageNet test data to build this plot.\n\n### Frameworks supported\n\n- Keras\n- PyTorch\n\n\n### Layers supported \n\n- Dense / Linear / Fully Connected (and Conv1D)\n- Conv2D\n\n\n\n## Installation\n\n```sh\npip install weightwatcher\n```\n\n## Usage\n\nWeight Watcher works with both Keras and pyTorch models.\n\n```python\nimport weightwatcher as ww\nwatcher = ww.WeightWatcher(model=model)\nresults = watcher.analyze()\n\nwatcher.get_summary()\nwatcher.print_results()\n```\n\n## Advanced Usage \n\nThe analyze function has several features described below\n\n```python\ndef analyze(self, model=None, layers=[], min_size=50, max_size=0,\n                compute_alphas=False, compute_lognorms=True,\n                plot=False):\n...\n```\n\nand in the [Demo Notebook](https://github.com/CalculatedContent/WeightWatcher/blob/master/WeightWatcher.ipynb)\n\n\n### weighted alpha (SLOW)\nPower Law fit, here with pyTorch example\n\n```python\nimport weightwatcher as ww\nimport torchvision.models as models\n\nmodel = models.vgg19_bn(pretrained=True)\nwatcher = ww.WeightWatcher(model=model)\nresults = watcher.analyze(alphas=True)\ndata.append({\"name\": \"vgg19bntorch\", \"summary\": watcher.get_summary()})\n\n\n### data:\n{'name': 'vgg19bntorch',\n  'summary': {'lognorm': 0.81850576,\n   'lognorm_compound': 0.9365272010550088,\n   'alpha': 2.9646726379493287,\n   'alpha_compound': 2.847975521455623,\n   'alpha_weighted': 1.1588882728052485,\n   'alpha_weighted_compound': 1.5002343912892515}},\n```\n\n\n#### Capacity Metrics (evarages over all layers):\n- lognorm:  average log norm, fast\n- alpha_weight:  average weighted alpha, slow\n\n- alpha:  average alpha, not weighted  (slow, not as useful)\n\nCompound averages: \n\n  Same as above, but averages are computed slightly differently. This will be desrcibed in an upcoming paper.\n\nResults are also provided for every layer; see [Demo Notebook](https://github.com/CalculatedContent/WeightWatcher/blob/master/WeightWatcher.ipynb)\n\n### Additional options\n\n#### filter by layer types \n\n```python\nresults = watcher.analyze(layers=ww.LAYER_TYPE.CONV1D|ww.LAYER_TYPE.DENSE)\n\n```\n\n#### filter by ids\n\n```python\nresults = watcher.analyze(layers=[20])\n```\n\n#### minimum, maximum size of weight matrix\n\nSets the minimum and maximum size of the weight matrices analyzed.\nSetting max is useful for a quick debugging.\n\n```python\nresults = watcher.analyze(min_size=50, max_size=500)\n```\n\n#### plots (for weight_alpha=True)\n\nCreate log-log plots for each layer weight matrix to observe how well\nthe power law fits work\n\n```python\nresults = watcher.analyze(compute_alphas=True, plot=True)\n```\n\n\n## Links\n\n[Demo Notebook](https://github.com/CalculatedContent/WeightWatcher/blob/master/WeightWatcher.ipynb)\n\n[Calculation Consulting homepage](https://calculationconsulting.com)\n\n[Calculated Content Blog](https://calculatedcontent.com)\n\n---\n\n[Implicit Self-Regularization in Deep Neural Networks: Evidence from Random Matrix Theory and Implications for Learning](https://arxiv.org/abs/1810.01075)\n\n[Traditional and Heavy Tailed Self Regularization in Neural Network Models](https://arxiv.org/abs/1901.08276)\n\nNotebook for above 2 papers (https://github.com/CalculatedContent/ImplicitSelfRegularization)\n\n[Recent talk (presented at NERSC Summer 2018)](https://www.youtube.com/watch?v=_Ni5UDrVwYU)\n\n---\n\n[Heavy-Tailed Universality Predicts Trends in Test Accuracies for Very Large Pre-Trained Deep Neural Networks](https://arxiv.org/abs/1901.08278)\n\nNotebook for paper (https://github.com/CalculatedContent/PredictingTestAccuracies)\n\n[Latest Talk (presented at UC Berkeley/ICSI 12/13/2018)](https://www.youtube.com/watch?v=6Zgul4oygMc)\n\n[ICML 2019 Theoretical Physics Workshop Paper](https://github.com/CalculatedContent/PredictingTestAccuracies/blob/master/ICMLPhysicsWorkshop/icml_prl_TPDLW2019_fin.pdf)\n\n---\n\n[KDD 2019 Workshop: Statistical Mechanics Methods for Discovering\nKnowledge from Production-Scale Neural Networks](https://www.stat.berkeley.edu/~mmahoney/talks/dnn_kdd19_fin.pdf)  (slides only, video coming soon)\n\n[Data Science at Home Podcast](https://podcast.datascienceathome.com/e/episode-70-validate-neural-networks-without-data-with-dr-charles-martin/)\n\n[Aggregate Intellect Podcast](https://aisc.ai.science/events/2019-11-06)\n\n---\n\n## Release\n\nPublishing to the PyPI repository:\n\n```sh\n# 1. Check in the latest code with the correct revision number (__version__ in __init__.py)\nvi weightwatcher/__init__.py # Increse release number, remove -dev to revision number\ngit commit\n# 2. Check out latest version from the repo in a fresh directory\ncd ~/temp/\ngit clone https://github.com/CalculatedContent/WeightWatcher\ncd WeightWatcher/\n# 3. Use the latest version of the tools\npython -m pip install --upgrade setuptools wheel twine\n# 4. Create the package\npython setup.py sdist bdist_wheel\n# 5. Test the package\ntwine check dist/*\n# 6. Upload the package to PyPI\ntwine upload dist/*\n# 7. Tag/Release in github by creating a new release (https://github.com/CalculatedContent/WeightWatcher/releases/new)\n```\n\n## License\n\n[Apache License 2.0](LICENSE.txt)\n\n#### Contributors\n\n[Charles H Martin, PhD](https://www.linkedin.com/in/charlesmartin14)\n[Calculation Consulting](https://calculationconsulting.com)\n\n[Serena Peng](https://www.linkedin.com/in/serenapeng)\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://calculationconsulting.com/", "keywords": "Deep Learning Keras Tensorflow pytorch CNN DNN Neural Networks", "license": "Apache License, Version 2.0", "maintainer": "Calculation Consulting", "maintainer_email": "info@calculationconsulting.com", "name": "WeightWatcher", "package_url": "https://pypi.org/project/WeightWatcher/", "platform": "", "project_url": "https://pypi.org/project/WeightWatcher/", "project_urls": {"Code": "https://github.com/calculatedcontent/weightwatcher", "Documentation": "https://calculationconsulting.com/", "Homepage": "https://calculationconsulting.com/", "Issue tracker": "https://github.com/calculatedcontent/weightwatcher/issues"}, "release_url": "https://pypi.org/project/WeightWatcher/0.2.7/", "requires_dist": ["numpy", "matplotlib", "powerlaw", "tensorflow", "keras", "sklearn", "pandas"], "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "summary": "Analyze weight matrices of Deep Neural Networks", "version": "0.2.7", "yanked": false, "html_description": "<div class=\"project-description\">\n            &lt;meta name=\"image\" property=\"og:image\" content=\"https://github.com/CalculatedContent/PredictingTestAccuracies/blob/master/img/vgg-w_alphas.png\"&gt;\n<h2>Weight Watcher</h2>\n<h3>the Stat Mech Edition</h3>\n<p>Current Version: 0.2.7</p>\n<p><strong>Weight Watcher</strong> analyzes the Fat Tails in the  weight matrices of Deep Neural Networks (DNNs).</p>\n<p>This tool can predict the trends in the generalization accuracy of a series of DNNs, such as VGG11, VGG13, ...,\nor even the entire series of ResNet models--without needing a test set !</p>\n<p>This relies upon recent research into the <a href=\"https://openreview.net/forum?id=SJeFNoRcFQ\" rel=\"nofollow\">Heavy (Fat) Tailed Self Regularization in DNNs</a></p>\n<p>The tool lets one compute a averager capacity, or quality, metric for a series of  DNNs, trained on the same data, but with different hyperparameters, or even different but related architectures. For example, it can predict that VGG19_BN generalizes better than VGG19, and better than VGG16_BN, VGG16, etc.</p>\n<h3>Types of Capacity Metrics:</h3>\n<p>There are 2 metrics availabe. The average <strong>log Norm</strong>, which is much faster but less accurate.\nThe average <strong>weighted alpha</strong> is more accurate but much slower because it needs to both compute the SVD of the layer weight matrices, and thenaa\nfit the singluar/eigenvalues to a power law.</p>\n<ul>\n<li>log Norm (default, fast, less accurate)</li>\n<li>weighted alpaha (slow, more accurate)</li>\n</ul>\n<p>Here is an example of the <strong>Weighted Alpha</strong> capacity metric for all the current pretrained VGG models.\n<img alt=\"alt text\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fb7852693a6715716501c53307d2ac771426482c/68747470733a2f2f6769746875622e636f6d2f43616c63756c61746564436f6e74656e742f50726564696374696e6754657374416363757261636965732f626c6f622f6d61737465722f696d672f7667672d775f616c706861732e706e67\"></p>\n<p>Notice: we <em>did not peek</em> at the ImageNet test data to build this plot.</p>\n<h3>Frameworks supported</h3>\n<ul>\n<li>Keras</li>\n<li>PyTorch</li>\n</ul>\n<h3>Layers supported</h3>\n<ul>\n<li>Dense / Linear / Fully Connected (and Conv1D)</li>\n<li>Conv2D</li>\n</ul>\n<h2>Installation</h2>\n<pre>pip install weightwatcher\n</pre>\n<h2>Usage</h2>\n<p>Weight Watcher works with both Keras and pyTorch models.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">weightwatcher</span> <span class=\"k\">as</span> <span class=\"nn\">ww</span>\n<span class=\"n\">watcher</span> <span class=\"o\">=</span> <span class=\"n\">ww</span><span class=\"o\">.</span><span class=\"n\">WeightWatcher</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"o\">=</span><span class=\"n\">model</span><span class=\"p\">)</span>\n<span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"n\">watcher</span><span class=\"o\">.</span><span class=\"n\">analyze</span><span class=\"p\">()</span>\n\n<span class=\"n\">watcher</span><span class=\"o\">.</span><span class=\"n\">get_summary</span><span class=\"p\">()</span>\n<span class=\"n\">watcher</span><span class=\"o\">.</span><span class=\"n\">print_results</span><span class=\"p\">()</span>\n</pre>\n<h2>Advanced Usage</h2>\n<p>The analyze function has several features described below</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">analyze</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">model</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">layers</span><span class=\"o\">=</span><span class=\"p\">[],</span> <span class=\"n\">min_size</span><span class=\"o\">=</span><span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"n\">max_size</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span>\n                <span class=\"n\">compute_alphas</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">compute_lognorms</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                <span class=\"n\">plot</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>\n</pre>\n<p>and in the <a href=\"https://github.com/CalculatedContent/WeightWatcher/blob/master/WeightWatcher.ipynb\" rel=\"nofollow\">Demo Notebook</a></p>\n<h3>weighted alpha (SLOW)</h3>\n<p>Power Law fit, here with pyTorch example</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">weightwatcher</span> <span class=\"k\">as</span> <span class=\"nn\">ww</span>\n<span class=\"kn\">import</span> <span class=\"nn\">torchvision.models</span> <span class=\"k\">as</span> <span class=\"nn\">models</span>\n\n<span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">vgg19_bn</span><span class=\"p\">(</span><span class=\"n\">pretrained</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">watcher</span> <span class=\"o\">=</span> <span class=\"n\">ww</span><span class=\"o\">.</span><span class=\"n\">WeightWatcher</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"o\">=</span><span class=\"n\">model</span><span class=\"p\">)</span>\n<span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"n\">watcher</span><span class=\"o\">.</span><span class=\"n\">analyze</span><span class=\"p\">(</span><span class=\"n\">alphas</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">({</span><span class=\"s2\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"vgg19bntorch\"</span><span class=\"p\">,</span> <span class=\"s2\">\"summary\"</span><span class=\"p\">:</span> <span class=\"n\">watcher</span><span class=\"o\">.</span><span class=\"n\">get_summary</span><span class=\"p\">()})</span>\n\n\n<span class=\"c1\">### data:</span>\n<span class=\"p\">{</span><span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'vgg19bntorch'</span><span class=\"p\">,</span>\n  <span class=\"s1\">'summary'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'lognorm'</span><span class=\"p\">:</span> <span class=\"mf\">0.81850576</span><span class=\"p\">,</span>\n   <span class=\"s1\">'lognorm_compound'</span><span class=\"p\">:</span> <span class=\"mf\">0.9365272010550088</span><span class=\"p\">,</span>\n   <span class=\"s1\">'alpha'</span><span class=\"p\">:</span> <span class=\"mf\">2.9646726379493287</span><span class=\"p\">,</span>\n   <span class=\"s1\">'alpha_compound'</span><span class=\"p\">:</span> <span class=\"mf\">2.847975521455623</span><span class=\"p\">,</span>\n   <span class=\"s1\">'alpha_weighted'</span><span class=\"p\">:</span> <span class=\"mf\">1.1588882728052485</span><span class=\"p\">,</span>\n   <span class=\"s1\">'alpha_weighted_compound'</span><span class=\"p\">:</span> <span class=\"mf\">1.5002343912892515</span><span class=\"p\">}},</span>\n</pre>\n<h4>Capacity Metrics (evarages over all layers):</h4>\n<ul>\n<li>\n<p>lognorm:  average log norm, fast</p>\n</li>\n<li>\n<p>alpha_weight:  average weighted alpha, slow</p>\n</li>\n<li>\n<p>alpha:  average alpha, not weighted  (slow, not as useful)</p>\n</li>\n</ul>\n<p>Compound averages:</p>\n<p>Same as above, but averages are computed slightly differently. This will be desrcibed in an upcoming paper.</p>\n<p>Results are also provided for every layer; see <a href=\"https://github.com/CalculatedContent/WeightWatcher/blob/master/WeightWatcher.ipynb\" rel=\"nofollow\">Demo Notebook</a></p>\n<h3>Additional options</h3>\n<h4>filter by layer types</h4>\n<pre><span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"n\">watcher</span><span class=\"o\">.</span><span class=\"n\">analyze</span><span class=\"p\">(</span><span class=\"n\">layers</span><span class=\"o\">=</span><span class=\"n\">ww</span><span class=\"o\">.</span><span class=\"n\">LAYER_TYPE</span><span class=\"o\">.</span><span class=\"n\">CONV1D</span><span class=\"o\">|</span><span class=\"n\">ww</span><span class=\"o\">.</span><span class=\"n\">LAYER_TYPE</span><span class=\"o\">.</span><span class=\"n\">DENSE</span><span class=\"p\">)</span>\n</pre>\n<h4>filter by ids</h4>\n<pre><span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"n\">watcher</span><span class=\"o\">.</span><span class=\"n\">analyze</span><span class=\"p\">(</span><span class=\"n\">layers</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">20</span><span class=\"p\">])</span>\n</pre>\n<h4>minimum, maximum size of weight matrix</h4>\n<p>Sets the minimum and maximum size of the weight matrices analyzed.\nSetting max is useful for a quick debugging.</p>\n<pre><span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"n\">watcher</span><span class=\"o\">.</span><span class=\"n\">analyze</span><span class=\"p\">(</span><span class=\"n\">min_size</span><span class=\"o\">=</span><span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"n\">max_size</span><span class=\"o\">=</span><span class=\"mi\">500</span><span class=\"p\">)</span>\n</pre>\n<h4>plots (for weight_alpha=True)</h4>\n<p>Create log-log plots for each layer weight matrix to observe how well\nthe power law fits work</p>\n<pre><span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"n\">watcher</span><span class=\"o\">.</span><span class=\"n\">analyze</span><span class=\"p\">(</span><span class=\"n\">compute_alphas</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">plot</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<h2>Links</h2>\n<p><a href=\"https://github.com/CalculatedContent/WeightWatcher/blob/master/WeightWatcher.ipynb\" rel=\"nofollow\">Demo Notebook</a></p>\n<p><a href=\"https://calculationconsulting.com\" rel=\"nofollow\">Calculation Consulting homepage</a></p>\n<p><a href=\"https://calculatedcontent.com\" rel=\"nofollow\">Calculated Content Blog</a></p>\n<hr>\n<p><a href=\"https://arxiv.org/abs/1810.01075\" rel=\"nofollow\">Implicit Self-Regularization in Deep Neural Networks: Evidence from Random Matrix Theory and Implications for Learning</a></p>\n<p><a href=\"https://arxiv.org/abs/1901.08276\" rel=\"nofollow\">Traditional and Heavy Tailed Self Regularization in Neural Network Models</a></p>\n<p>Notebook for above 2 papers (<a href=\"https://github.com/CalculatedContent/ImplicitSelfRegularization\" rel=\"nofollow\">https://github.com/CalculatedContent/ImplicitSelfRegularization</a>)</p>\n<p><a href=\"https://www.youtube.com/watch?v=_Ni5UDrVwYU\" rel=\"nofollow\">Recent talk (presented at NERSC Summer 2018)</a></p>\n<hr>\n<p><a href=\"https://arxiv.org/abs/1901.08278\" rel=\"nofollow\">Heavy-Tailed Universality Predicts Trends in Test Accuracies for Very Large Pre-Trained Deep Neural Networks</a></p>\n<p>Notebook for paper (<a href=\"https://github.com/CalculatedContent/PredictingTestAccuracies\" rel=\"nofollow\">https://github.com/CalculatedContent/PredictingTestAccuracies</a>)</p>\n<p><a href=\"https://www.youtube.com/watch?v=6Zgul4oygMc\" rel=\"nofollow\">Latest Talk (presented at UC Berkeley/ICSI 12/13/2018)</a></p>\n<p><a href=\"https://github.com/CalculatedContent/PredictingTestAccuracies/blob/master/ICMLPhysicsWorkshop/icml_prl_TPDLW2019_fin.pdf\" rel=\"nofollow\">ICML 2019 Theoretical Physics Workshop Paper</a></p>\n<hr>\n<p><a href=\"https://www.stat.berkeley.edu/%7Emmahoney/talks/dnn_kdd19_fin.pdf\" rel=\"nofollow\">KDD 2019 Workshop: Statistical Mechanics Methods for Discovering\nKnowledge from Production-Scale Neural Networks</a>  (slides only, video coming soon)</p>\n<p><a href=\"https://podcast.datascienceathome.com/e/episode-70-validate-neural-networks-without-data-with-dr-charles-martin/\" rel=\"nofollow\">Data Science at Home Podcast</a></p>\n<p><a href=\"https://aisc.ai.science/events/2019-11-06\" rel=\"nofollow\">Aggregate Intellect Podcast</a></p>\n<hr>\n<h2>Release</h2>\n<p>Publishing to the PyPI repository:</p>\n<pre><span class=\"c1\"># 1. Check in the latest code with the correct revision number (__version__ in __init__.py)</span>\nvi weightwatcher/__init__.py <span class=\"c1\"># Increse release number, remove -dev to revision number</span>\ngit commit\n<span class=\"c1\"># 2. Check out latest version from the repo in a fresh directory</span>\n<span class=\"nb\">cd</span> ~/temp/\ngit clone https://github.com/CalculatedContent/WeightWatcher\n<span class=\"nb\">cd</span> WeightWatcher/\n<span class=\"c1\"># 3. Use the latest version of the tools</span>\npython -m pip install --upgrade setuptools wheel twine\n<span class=\"c1\"># 4. Create the package</span>\npython setup.py sdist bdist_wheel\n<span class=\"c1\"># 5. Test the package</span>\ntwine check dist/*\n<span class=\"c1\"># 6. Upload the package to PyPI</span>\ntwine upload dist/*\n<span class=\"c1\"># 7. Tag/Release in github by creating a new release (https://github.com/CalculatedContent/WeightWatcher/releases/new)</span>\n</pre>\n<h2>License</h2>\n<p><a href=\"LICENSE.txt\" rel=\"nofollow\">Apache License 2.0</a></p>\n<h4>Contributors</h4>\n<p><a href=\"https://www.linkedin.com/in/charlesmartin14\" rel=\"nofollow\">Charles H Martin, PhD</a>\n<a href=\"https://calculationconsulting.com\" rel=\"nofollow\">Calculation Consulting</a></p>\n<p><a href=\"https://www.linkedin.com/in/serenapeng\" rel=\"nofollow\">Serena Peng</a></p>\n\n          </div>"}, "last_serial": 6464064, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "785fea77535dc70b76c76fffd8113b80", "sha256": "38311c864b8f9c1c68accc4026b721b2c64acd960936253098208768433904bc"}, "downloads": -1, "filename": "WeightWatcher-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "785fea77535dc70b76c76fffd8113b80", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 12685, "upload_time": "2018-11-28T22:28:07", "upload_time_iso_8601": "2018-11-28T22:28:07.977481Z", "url": "https://files.pythonhosted.org/packages/bf/3a/9d78e9d8a5c15c0f6db9bdf124fef786d5c2c836e0cb01563eb8ad06e874/WeightWatcher-0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "db8398dd425d9781750169a97802cfa2", "sha256": "b8e726c355572745199ab6228929f6b5caa0c56b0ebd522c44711dc51e91488a"}, "downloads": -1, "filename": "WeightWatcher-0.1.tar.gz", "has_sig": false, "md5_digest": "db8398dd425d9781750169a97802cfa2", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 176157, "upload_time": "2018-11-28T22:28:10", "upload_time_iso_8601": "2018-11-28T22:28:10.603894Z", "url": "https://files.pythonhosted.org/packages/5d/8f/48ec5682bff603ca8e8d7927952011dec858162ab557e056d9136b1ff22c/WeightWatcher-0.1.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "8a73d717dbf16af77d5fb3d72f4c522f", "sha256": "ba5a455bd27558a691118225e2f9f5df2c05c2fb59f0bec2b79d1264da9f7269"}, "downloads": -1, "filename": "WeightWatcher-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "8a73d717dbf16af77d5fb3d72f4c522f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 12895, "upload_time": "2018-11-28T23:44:57", "upload_time_iso_8601": "2018-11-28T23:44:57.771892Z", "url": "https://files.pythonhosted.org/packages/b1/a6/233097381d4426cc20201ac13b115814aced6c0068a36fa7bfa882c83301/WeightWatcher-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3604a435a05fdb931a0cdf80398cf470", "sha256": "1f7e76884c00e29e62de4193cd6042ff2c23f622970806c8f707659ec24d29e7"}, "downloads": -1, "filename": "WeightWatcher-0.1.1.tar.gz", "has_sig": false, "md5_digest": "3604a435a05fdb931a0cdf80398cf470", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 176456, "upload_time": "2018-11-28T23:45:01", "upload_time_iso_8601": "2018-11-28T23:45:01.050084Z", "url": "https://files.pythonhosted.org/packages/5a/50/bf479252ee110cc3ae851d60d4f54b5a459778681f5861f882fc49b1fe34/WeightWatcher-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "acff91d95e8a30ed174a37114ea4989c", "sha256": "68027aa06d7f8aa460d070e2602f3eb6aadc42346d154c39da89bfd6dd537e25"}, "downloads": -1, "filename": "WeightWatcher-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "acff91d95e8a30ed174a37114ea4989c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 16378, "upload_time": "2019-06-05T23:40:53", "upload_time_iso_8601": "2019-06-05T23:40:53.647322Z", "url": "https://files.pythonhosted.org/packages/6e/b4/5b09abc1713ffe8d3f0cad7bde7e678a5263019e1000355f433295133830/WeightWatcher-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e3cc4a1dd0e63cd74ae72598ed8709f0", "sha256": "0cb77eb64875d67792b498a4ec6c59834234dbea1eb6bc26cb2aa885e456911a"}, "downloads": -1, "filename": "WeightWatcher-0.1.2.tar.gz", "has_sig": false, "md5_digest": "e3cc4a1dd0e63cd74ae72598ed8709f0", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 93504, "upload_time": "2019-06-05T23:40:57", "upload_time_iso_8601": "2019-06-05T23:40:57.251654Z", "url": "https://files.pythonhosted.org/packages/5e/9c/7354258a1c77c713dee09d8c560ebe94a953876f97176b08629a23523c4e/WeightWatcher-0.1.2.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "71e53b6df0126782761dd816125973f8", "sha256": "c656fbc3596b3c21d1501298a1ecae3e712250c20f3e49ac9a5ba6a4ef3c1ab6"}, "downloads": -1, "filename": "WeightWatcher-0.2-py3.7.egg", "has_sig": false, "md5_digest": "71e53b6df0126782761dd816125973f8", "packagetype": "bdist_egg", "python_version": "3.7", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 34772, "upload_time": "2019-11-07T04:24:46", "upload_time_iso_8601": "2019-11-07T04:24:46.121205Z", "url": "https://files.pythonhosted.org/packages/98/17/29fc722521a7ad7e3347bb89a061f8167e22358736aabc7dff247d225f6e/WeightWatcher-0.2-py3.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "42dd05eeedfe9386e4f510e82a558ae9", "sha256": "ab0bd2cea16e041180a1d6e17c855bcb935734856a0f96873d1026f14515b2d2"}, "downloads": -1, "filename": "WeightWatcher-0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "42dd05eeedfe9386e4f510e82a558ae9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 22661, "upload_time": "2019-11-04T02:13:31", "upload_time_iso_8601": "2019-11-04T02:13:31.546568Z", "url": "https://files.pythonhosted.org/packages/a5/c2/d9f7024353c2f0260a22748348590d6bc3f47458ee0b50fe3b6bcc398657/WeightWatcher-0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "49ea5c95b6bbd965e6c338e46bf7c64d", "sha256": "2f19cd51853e317742ad7c4f8fa8a6932eb01029cd5fd865117557c8da677f9f"}, "downloads": -1, "filename": "WeightWatcher-0.2.tar.gz", "has_sig": false, "md5_digest": "49ea5c95b6bbd965e6c338e46bf7c64d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 27182, "upload_time": "2019-11-04T02:13:33", "upload_time_iso_8601": "2019-11-04T02:13:33.810541Z", "url": "https://files.pythonhosted.org/packages/2f/fd/d1fba00f978e917dfae54cc89acb9eb82910202dec106f3413dba756caae/WeightWatcher-0.2.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "5f94e8cfeed51b1b15b3908edddaefc0", "sha256": "6951f4d07d911c0efdbc1d59a43a11dd17b2f169ef652346c1a04701dc316931"}, "downloads": -1, "filename": "WeightWatcher-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "5f94e8cfeed51b1b15b3908edddaefc0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 22724, "upload_time": "2019-11-07T04:24:44", "upload_time_iso_8601": "2019-11-07T04:24:44.189007Z", "url": "https://files.pythonhosted.org/packages/66/f3/b1c4a08e196f001e438d142340070e6ca8fbe35b39fafa193985e23d4cc3/WeightWatcher-0.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fa721a33839557acdb63cc7bcb71e6e1", "sha256": "8af71ad3c771409e5bccb21973bff9ffe2b4e378da3e4884063df57cbbd3bb53"}, "downloads": -1, "filename": "WeightWatcher-0.2.1.tar.gz", "has_sig": false, "md5_digest": "fa721a33839557acdb63cc7bcb71e6e1", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 27241, "upload_time": "2019-11-07T04:24:47", "upload_time_iso_8601": "2019-11-07T04:24:47.958781Z", "url": "https://files.pythonhosted.org/packages/bb/0b/43a61f2ac9c5dcba80e78c7e547092456c020fa287073d849196028aa73c/WeightWatcher-0.2.1.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "af377800f7ce17546da2b6ec6abff8f6", "sha256": "95649c29cfb162e5942ae4c560b80ad4c53abce8f6556356b4ef17929cf22649"}, "downloads": -1, "filename": "WeightWatcher-0.2.2-py3-none-any.whl", "has_sig": false, "md5_digest": "af377800f7ce17546da2b6ec6abff8f6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 22791, "upload_time": "2019-12-28T16:37:47", "upload_time_iso_8601": "2019-12-28T16:37:47.797804Z", "url": "https://files.pythonhosted.org/packages/32/47/d01826d8d288de8efd54a7a78beb4bfda63932135865c4c0e2666ef4ee4e/WeightWatcher-0.2.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6ff76575de8e53e0c2908a1e9c2b2980", "sha256": "d2d0bc49673bec6060b9080052d5b21d481016c183ed1eab86643afce10a86e6"}, "downloads": -1, "filename": "WeightWatcher-0.2.2.tar.gz", "has_sig": false, "md5_digest": "6ff76575de8e53e0c2908a1e9c2b2980", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 167542, "upload_time": "2019-12-28T16:37:51", "upload_time_iso_8601": "2019-12-28T16:37:51.061631Z", "url": "https://files.pythonhosted.org/packages/50/a7/ff3d06df0f76b512e660df6995310f74a02237ec6b0d1d48c0655b487902/WeightWatcher-0.2.2.tar.gz", "yanked": false}], "0.2.3": [{"comment_text": "", "digests": {"md5": "9d64f07336d7f4fa2316b7109bb82221", "sha256": "43335b81d2a7a7444e95f89ed06e8093f806b368d50f49166a9b4e4196218919"}, "downloads": -1, "filename": "WeightWatcher-0.2.3-py3-none-any.whl", "has_sig": false, "md5_digest": "9d64f07336d7f4fa2316b7109bb82221", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 22971, "upload_time": "2020-01-09T06:14:45", "upload_time_iso_8601": "2020-01-09T06:14:45.274062Z", "url": "https://files.pythonhosted.org/packages/c2/e8/6945a7b6ba210ed10b3f7048dc2a8a77a3ff57b1ed3044317e30bf693961/WeightWatcher-0.2.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "76e30a1d1b709efa1fa4fd62717347ca", "sha256": "158f8f67f18ff546a6d9176a818f465286d6f755d85ee108188cc8bf3089e640"}, "downloads": -1, "filename": "WeightWatcher-0.2.3.tar.gz", "has_sig": false, "md5_digest": "76e30a1d1b709efa1fa4fd62717347ca", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 167715, "upload_time": "2020-01-09T06:14:48", "upload_time_iso_8601": "2020-01-09T06:14:48.853699Z", "url": "https://files.pythonhosted.org/packages/0b/95/ddff2862e82c6cfae13e5c2f5ef8917a374621836e3d31baac2cffbeb2b4/WeightWatcher-0.2.3.tar.gz", "yanked": false}], "0.2.4": [{"comment_text": "", "digests": {"md5": "e215b97df0808415a8f112cffd3c75b2", "sha256": "5255a872596c4dad8ba31f7b303b7ccdaf5a0541a4d47d0219e8484373827985"}, "downloads": -1, "filename": "WeightWatcher-0.2.4-py3-none-any.whl", "has_sig": false, "md5_digest": "e215b97df0808415a8f112cffd3c75b2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 22962, "upload_time": "2020-01-11T19:08:03", "upload_time_iso_8601": "2020-01-11T19:08:03.231594Z", "url": "https://files.pythonhosted.org/packages/a5/eb/3deabe5d03bacaa78046b2d270250f3244e1f2a4ad9a1b827b210315482c/WeightWatcher-0.2.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0eb25f43a398196df669d95c9a767f57", "sha256": "f74ea2ef092533d6d40c33071abe31d80ab0fe41ae213f5f18064acb88c8db4e"}, "downloads": -1, "filename": "WeightWatcher-0.2.4.tar.gz", "has_sig": false, "md5_digest": "0eb25f43a398196df669d95c9a767f57", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 167697, "upload_time": "2020-01-11T19:08:06", "upload_time_iso_8601": "2020-01-11T19:08:06.553650Z", "url": "https://files.pythonhosted.org/packages/c7/b3/f43a3ebf037e8594a91ea90b4ca9980e1c82bcfdd1ec1ddddc1c797eefaf/WeightWatcher-0.2.4.tar.gz", "yanked": false}], "0.2.5": [{"comment_text": "", "digests": {"md5": "9e181e46a76aee6c1999d0f5903a6fab", "sha256": "4be07451a18a9509222d775fa9d3743794f100c1c7baf263da073e2276f42ab1"}, "downloads": -1, "filename": "WeightWatcher-0.2.5-py3-none-any.whl", "has_sig": false, "md5_digest": "9e181e46a76aee6c1999d0f5903a6fab", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 22911, "upload_time": "2020-01-13T05:17:19", "upload_time_iso_8601": "2020-01-13T05:17:19.027191Z", "url": "https://files.pythonhosted.org/packages/ad/90/ca734b85da7d326631f7b54a84e27af7fc1aaa3e33e98d2248899e1824f1/WeightWatcher-0.2.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5698c975f42efc355878f8d5ed426f5a", "sha256": "56a5671e8c2012826a23bc925133fa050209ed05f478dd1322eb2942ba6fe6d8"}, "downloads": -1, "filename": "WeightWatcher-0.2.5.tar.gz", "has_sig": false, "md5_digest": "5698c975f42efc355878f8d5ed426f5a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 167655, "upload_time": "2020-01-13T05:17:22", "upload_time_iso_8601": "2020-01-13T05:17:22.210331Z", "url": "https://files.pythonhosted.org/packages/74/6b/9d38d4b9eab2e5d6dd60588247e08e5493f0b25b5eea8c84301722fd53e3/WeightWatcher-0.2.5.tar.gz", "yanked": false}], "0.2.6": [{"comment_text": "", "digests": {"md5": "4910b80ec657856bdc33179937f4fbe8", "sha256": "3c6a9bf9b89ef13f200172fefc8c35527fb99a4565483439e4fc918b07ee50c4"}, "downloads": -1, "filename": "WeightWatcher-0.2.6-py3-none-any.whl", "has_sig": false, "md5_digest": "4910b80ec657856bdc33179937f4fbe8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 22980, "upload_time": "2020-01-14T17:42:35", "upload_time_iso_8601": "2020-01-14T17:42:35.216626Z", "url": "https://files.pythonhosted.org/packages/af/31/44e1aaa7e6df09a3179db98987d2a5867501520301923111f1097947d7c3/WeightWatcher-0.2.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "92d7af7d7859d50d67e090ef067e61e8", "sha256": "d3c52b8467d3eed2f2d9a539055a6e00f6f10415fac5ca86b5981140f94643e2"}, "downloads": -1, "filename": "WeightWatcher-0.2.6.tar.gz", "has_sig": false, "md5_digest": "92d7af7d7859d50d67e090ef067e61e8", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 167722, "upload_time": "2020-01-14T17:42:37", "upload_time_iso_8601": "2020-01-14T17:42:37.217489Z", "url": "https://files.pythonhosted.org/packages/ac/9b/b7dc52779447241ce5dba1354e4bd4e5a56c31a980d90cd06185526ec36a/WeightWatcher-0.2.6.tar.gz", "yanked": false}], "0.2.7": [{"comment_text": "", "digests": {"md5": "d5ced28b443d33a2e4546eb5cb70f6b8", "sha256": "9c83bc1ea633f1339b6b3a36409ccd7cff6d6cff2c77df7e6767be4fc026ecf3"}, "downloads": -1, "filename": "WeightWatcher-0.2.7-py3-none-any.whl", "has_sig": false, "md5_digest": "d5ced28b443d33a2e4546eb5cb70f6b8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 23002, "upload_time": "2020-01-16T06:12:40", "upload_time_iso_8601": "2020-01-16T06:12:40.705837Z", "url": "https://files.pythonhosted.org/packages/92/34/ad4047b6449e14db4a1bd707ec4626945c977309969318b6d18b619ed82c/WeightWatcher-0.2.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "186381a7ec0567bd4e6e325b5c1fd9f0", "sha256": "2e02f76d32dd43ed93e63ce832ca381fabcda6f219b3a86f998a816a61c255b6"}, "downloads": -1, "filename": "WeightWatcher-0.2.7.tar.gz", "has_sig": false, "md5_digest": "186381a7ec0567bd4e6e325b5c1fd9f0", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 167758, "upload_time": "2020-01-16T06:12:43", "upload_time_iso_8601": "2020-01-16T06:12:43.930112Z", "url": "https://files.pythonhosted.org/packages/c7/e5/1a6391f5789d0eb32b99a92f2f648cefcd6bd786d5663b2cdeb7880e241d/WeightWatcher-0.2.7.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d5ced28b443d33a2e4546eb5cb70f6b8", "sha256": "9c83bc1ea633f1339b6b3a36409ccd7cff6d6cff2c77df7e6767be4fc026ecf3"}, "downloads": -1, "filename": "WeightWatcher-0.2.7-py3-none-any.whl", "has_sig": false, "md5_digest": "d5ced28b443d33a2e4546eb5cb70f6b8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 23002, "upload_time": "2020-01-16T06:12:40", "upload_time_iso_8601": "2020-01-16T06:12:40.705837Z", "url": "https://files.pythonhosted.org/packages/92/34/ad4047b6449e14db4a1bd707ec4626945c977309969318b6d18b619ed82c/WeightWatcher-0.2.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "186381a7ec0567bd4e6e325b5c1fd9f0", "sha256": "2e02f76d32dd43ed93e63ce832ca381fabcda6f219b3a86f998a816a61c255b6"}, "downloads": -1, "filename": "WeightWatcher-0.2.7.tar.gz", "has_sig": false, "md5_digest": "186381a7ec0567bd4e6e325b5c1fd9f0", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 167758, "upload_time": "2020-01-16T06:12:43", "upload_time_iso_8601": "2020-01-16T06:12:43.930112Z", "url": "https://files.pythonhosted.org/packages/c7/e5/1a6391f5789d0eb32b99a92f2f648cefcd6bd786d5663b2cdeb7880e241d/WeightWatcher-0.2.7.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:30:22 2020"}