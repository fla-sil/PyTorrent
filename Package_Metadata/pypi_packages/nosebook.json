{"info": {"author": "Nicholas Bollweg", "author_email": "nick.bollweg@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Framework :: IPython", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 3", "Topic :: Software Development :: Testing", "Topic :: Utilities"], "description": "nosebook\n========\n\n|Build Status| |PyPI| |BSD|\n\na `nose <http://nose.readthedocs.org/>`__ plugin for finding and running\nIPython 2/3 notebooks as nose tests.\n\nWhat it can't do in terms of ``setup`` and ``tearDown``, ``nosebook``\nmakes up for in simplicity: there is no ``%%nose`` magic, no metadata\nrequired: the notebook on disk is the \"gold master\".\n\nThis makes it ideal for decreasing the burden of keeping documentation\nup to date with tests by making a single set of notebooks into both\nrich, multi-format documentation and a simple part of your test suite.\n\n.. |Build Status| image:: https://travis-ci.org/bollwyvl/nosebook.svg?branch=master\n   :target: https://travis-ci.org/bollwyvl/nosebook\n.. |PyPI| image:: https://pypip.in/version/nosebook/badge.svg?style=flat\n   :target: https://pypi.python.org/pypi/nosebook\n.. |BSD| image:: https://pypip.in/license/nose-watcher/badge.svg\n   :target: ./LICENSE\n\nHow does it work?\n-----------------\n\nEach notebook found according to\n```nosebook-match`` <#nosebook-match>`__ is started with a fresh kernel,\nbased on the kernel specified in the notebook. If the kernel is not\ninstalled, no tests will be run and the error will be logged.\n\nEach ``code`` cell that matches\n```nosebook-match-cell`` <#nosebook-match-cell>`__ will be executed\nagainst the kernel in the order in which it appears in the notebook:\nother cells e.g. ``markdown``, ``raw``, are ignored.\n\nThe number and content of outputs has to **match exactly**, with the\nfollowing parts of each output stripped:\n\n-  execution/prompt numbers, i.e. ``[1]:``\n-  tracebacks\n\nNon-deterministic output, such as with ``_repr_`` methods that include\nthe memory location of the instance, will obviously not match every\ntime. You can use ```nosebook-scrub`` <#nosebook-scrub>`__ to rewrite or\nremove offending content.\n\nRelated work\n------------\n\n-  ```ipython_nose`` <http://github.com/taavi/ipython_nose>`__ allows\n   you to use a notebook as a nose runner, with traditional\n   ``test_whatever`` methods. You can sort of emulate this behavior with\n   ```nosebook-match-cell`` <#nosebook-match-cel>`__... as long as you\n   check in passing tests!\n\nConfiguring ``nosetests`` to use ``nosebook``\n---------------------------------------------\n\nThese options can be specified in your `nose config file <./.noserc>`__,\nor as long-form command line arguments, i.e. ``--with-nosebook``.\n\n``with-nosebook``\n^^^^^^^^^^^^^^^^^\n\n``nosetests`` will look for notebooks that seem like tests, as\nconfigured with ```nosebook-match`` <#nosebook-match>`__.\n\n*Default: False*\n\n.. code:: python\n\n    # Basic usage\n    !nosetests --with-nosebook\n\n``nosebook-match``\n^^^^^^^^^^^^^^^^^^\n\nA regular expression that tells nosebook what should be a testable\nnotebook.\n\n*Default: ``.*[Tt]est.*.ipynb$``*\n\n.. code:: python\n\n    # Run against all notebooks... probably not a good idea, but maybe a great idea\n    !nosetests --with-nosebook --nosebook-match .*.ipynb\n\n``nosebook-match-cell``\n^^^^^^^^^^^^^^^^^^^^^^^\n\nA regular expression that will be replaced throughout the expected\noutputs and generated outputs.\n\n*Default: None*\n\n.. code:: python\n\n    # will run cells where tests are defined... but you should probably run them, too\n    !nosetests --with-nosebook --nosebook-match .*Simple.* --nosebook-match-cell '(def|class).*[Tt]est'\n\n``nosebook-scrub``\n^^^^^^^^^^^^^^^^^^\n\nA regular expression that will be replaced throughout the expected\noutputs and generated outputs.\n\n*Default: None*\n\n.. code:: python\n\n    # you can't fail if you don't try\n    !nosetests --with-nosebook --nosebook-scrub .+\n\nFor multiple scrub values, you can pass a JSON-formatted list of regular\nexpressions or object of pattern-replacement pairs that will be\nreplaced. When passed in via the command line, you'll have to escape\nspecial characters: using a ``.noserc`` config file makes this easier.\n\n.. code:: python\n\n    # there are only 10 kinds of tests...\n    !nosetests --with-nosebook --nosebook-scrub='[\"0\", \"1\"]'\n\n.. code:: python\n\n    # 0 is equally good\n    !nosetests --with-nosebook --nosebook-scrub='{\"\\\\d+\": \"0\"}'\n\nContributing\n------------\n\n`Issues <https://github.com/bollwyvl/nosebook/issues>`__ and `pull\nrequests <https://github.com/bollwyvl/nosebook/pulls>`__ welcome!\n\nLicense\n-------\n\n``nosebook`` is released as free software under the `BSD 3-Clause\nlicense <./LICENSE>`__.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/bollwyvl/nosebook", "keywords": "IPython nose", "license": "BSD", "maintainer": null, "maintainer_email": null, "name": "nosebook", "package_url": "https://pypi.org/project/nosebook/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/nosebook/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://github.com/bollwyvl/nosebook"}, "release_url": "https://pypi.org/project/nosebook/0.4.0/", "requires_dist": null, "requires_python": null, "summary": "a nose plugin for IPython notebooks", "version": "0.4.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://travis-ci.org/bollwyvl/nosebook\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1fb4a746b2f327c9011002085ac3d6e828416288/68747470733a2f2f7472617669732d63692e6f72672f626f6c6c7779766c2f6e6f7365626f6f6b2e7376673f6272616e63683d6d6173746572\"></a> <a href=\"https://pypi.python.org/pypi/nosebook\" rel=\"nofollow\"><img alt=\"PyPI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/cfbb68a14a511eb8c5df42347b05e3525410b26a/68747470733a2f2f70797069702e696e2f76657273696f6e2f6e6f7365626f6f6b2f62616467652e7376673f7374796c653d666c6174\"></a> <a href=\"./LICENSE\" rel=\"nofollow\"><img alt=\"BSD\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2570f356bfaf8901bb9b7065038bc062e064a4d6/68747470733a2f2f70797069702e696e2f6c6963656e73652f6e6f73652d776174636865722f62616467652e737667\"></a></p>\n<p>a <a href=\"http://nose.readthedocs.org/\" rel=\"nofollow\">nose</a> plugin for finding and running\nIPython 2/3 notebooks as nose tests.</p>\n<p>What it can\u2019t do in terms of <tt>setup</tt> and <tt>tearDown</tt>, <tt>nosebook</tt>\nmakes up for in simplicity: there is no <tt>%%nose</tt> magic, no metadata\nrequired: the notebook on disk is the \u201cgold master\u201d.</p>\n<p>This makes it ideal for decreasing the burden of keeping documentation\nup to date with tests by making a single set of notebooks into both\nrich, multi-format documentation and a simple part of your test suite.</p>\n<div id=\"how-does-it-work\">\n<h2>How does it work?</h2>\n<p>Each notebook found according to\n<tt><span class=\"pre\">`nosebook-match</span></tt> &lt;#nosebook-match&gt;`__ is started with a fresh kernel,\nbased on the kernel specified in the notebook. If the kernel is not\ninstalled, no tests will be run and the error will be logged.</p>\n<p>Each <tt>code</tt> cell that matches\n<tt><span class=\"pre\">`nosebook-match-cell</span></tt> &lt;#nosebook-match-cell&gt;`__ will be executed\nagainst the kernel in the order in which it appears in the notebook:\nother cells e.g. <tt>markdown</tt>, <tt>raw</tt>, are ignored.</p>\n<p>The number and content of outputs has to <strong>match exactly</strong>, with the\nfollowing parts of each output stripped:</p>\n<ul>\n<li>execution/prompt numbers, i.e. <tt>[1]:</tt></li>\n<li>tracebacks</li>\n</ul>\n<p>Non-deterministic output, such as with <tt>_repr_</tt> methods that include\nthe memory location of the instance, will obviously not match every\ntime. You can use <tt><span class=\"pre\">`nosebook-scrub</span></tt> &lt;#nosebook-scrub&gt;`__ to rewrite or\nremove offending content.</p>\n</div>\n<div id=\"related-work\">\n<h2>Related work</h2>\n<ul>\n<li><tt>`ipython_nose</tt> &lt;<a href=\"http://github.com/taavi/ipython_nose\" rel=\"nofollow\">http://github.com/taavi/ipython_nose</a>&gt;`__ allows\nyou to use a notebook as a nose runner, with traditional\n<tt>test_whatever</tt> methods. You can sort of emulate this behavior with\n<tt><span class=\"pre\">`nosebook-match-cell</span></tt> &lt;#nosebook-match-cel&gt;`__\u2026 as long as you\ncheck in passing tests!</li>\n</ul>\n</div>\n<div id=\"configuring-nosetests-to-use-nosebook\">\n<h2>Configuring <tt>nosetests</tt> to use <tt>nosebook</tt></h2>\n<p>These options can be specified in your <a href=\"./.noserc\" rel=\"nofollow\">nose config file</a>,\nor as long-form command line arguments, i.e. <tt><span class=\"pre\">--with-nosebook</span></tt>.</p>\n<div id=\"with-nosebook\">\n<h3><tt><span class=\"pre\">with-nosebook</span></tt></h3>\n<p><tt>nosetests</tt> will look for notebooks that seem like tests, as\nconfigured with <tt><span class=\"pre\">`nosebook-match</span></tt> &lt;#nosebook-match&gt;`__.</p>\n<p><em>Default: False</em></p>\n<pre><span class=\"c1\"># Basic usage</span>\n<span class=\"err\">!</span><span class=\"n\">nosetests</span> <span class=\"o\">--</span><span class=\"k\">with</span><span class=\"o\">-</span><span class=\"n\">nosebook</span>\n</pre>\n</div>\n<div id=\"nosebook-match\">\n<h3><tt><span class=\"pre\">nosebook-match</span></tt></h3>\n<p>A regular expression that tells nosebook what should be a testable\nnotebook.</p>\n<p><em>Default: ``.*[Tt]est.</em>.ipynb$``*</p>\n<pre><span class=\"c1\"># Run against all notebooks... probably not a good idea, but maybe a great idea</span>\n<span class=\"err\">!</span><span class=\"n\">nosetests</span> <span class=\"o\">--</span><span class=\"k\">with</span><span class=\"o\">-</span><span class=\"n\">nosebook</span> <span class=\"o\">--</span><span class=\"n\">nosebook</span><span class=\"o\">-</span><span class=\"n\">match</span> <span class=\"o\">.*.</span><span class=\"n\">ipynb</span>\n</pre>\n</div>\n<div id=\"nosebook-match-cell\">\n<h3><tt><span class=\"pre\">nosebook-match-cell</span></tt></h3>\n<p>A regular expression that will be replaced throughout the expected\noutputs and generated outputs.</p>\n<p><em>Default: None</em></p>\n<pre><span class=\"c1\"># will run cells where tests are defined... but you should probably run them, too</span>\n<span class=\"err\">!</span><span class=\"n\">nosetests</span> <span class=\"o\">--</span><span class=\"k\">with</span><span class=\"o\">-</span><span class=\"n\">nosebook</span> <span class=\"o\">--</span><span class=\"n\">nosebook</span><span class=\"o\">-</span><span class=\"n\">match</span> <span class=\"o\">.*</span><span class=\"n\">Simple</span><span class=\"o\">.*</span> <span class=\"o\">--</span><span class=\"n\">nosebook</span><span class=\"o\">-</span><span class=\"n\">match</span><span class=\"o\">-</span><span class=\"n\">cell</span> <span class=\"s1\">'(def|class).*[Tt]est'</span>\n</pre>\n</div>\n<div id=\"nosebook-scrub\">\n<h3><tt><span class=\"pre\">nosebook-scrub</span></tt></h3>\n<p>A regular expression that will be replaced throughout the expected\noutputs and generated outputs.</p>\n<p><em>Default: None</em></p>\n<pre><span class=\"c1\"># you can't fail if you don't try</span>\n<span class=\"err\">!</span><span class=\"n\">nosetests</span> <span class=\"o\">--</span><span class=\"k\">with</span><span class=\"o\">-</span><span class=\"n\">nosebook</span> <span class=\"o\">--</span><span class=\"n\">nosebook</span><span class=\"o\">-</span><span class=\"n\">scrub</span> <span class=\"o\">.+</span>\n</pre>\n<p>For multiple scrub values, you can pass a JSON-formatted list of regular\nexpressions or object of pattern-replacement pairs that will be\nreplaced. When passed in via the command line, you\u2019ll have to escape\nspecial characters: using a <tt>.noserc</tt> config file makes this easier.</p>\n<pre><span class=\"c1\"># there are only 10 kinds of tests...</span>\n<span class=\"err\">!</span><span class=\"n\">nosetests</span> <span class=\"o\">--</span><span class=\"k\">with</span><span class=\"o\">-</span><span class=\"n\">nosebook</span> <span class=\"o\">--</span><span class=\"n\">nosebook</span><span class=\"o\">-</span><span class=\"n\">scrub</span><span class=\"o\">=</span><span class=\"s1\">'[\"0\", \"1\"]'</span>\n</pre>\n<pre><span class=\"c1\"># 0 is equally good</span>\n<span class=\"err\">!</span><span class=\"n\">nosetests</span> <span class=\"o\">--</span><span class=\"k\">with</span><span class=\"o\">-</span><span class=\"n\">nosebook</span> <span class=\"o\">--</span><span class=\"n\">nosebook</span><span class=\"o\">-</span><span class=\"n\">scrub</span><span class=\"o\">=</span><span class=\"s1\">'{\"</span><span class=\"se\">\\\\</span><span class=\"s1\">d+\": \"0\"}'</span>\n</pre>\n</div>\n</div>\n<div id=\"contributing\">\n<h2>Contributing</h2>\n<p><a href=\"https://github.com/bollwyvl/nosebook/issues\" rel=\"nofollow\">Issues</a> and <a href=\"https://github.com/bollwyvl/nosebook/pulls\" rel=\"nofollow\">pull\nrequests</a> welcome!</p>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p><tt>nosebook</tt> is released as free software under the <a href=\"./LICENSE\" rel=\"nofollow\">BSD 3-Clause\nlicense</a>.</p>\n</div>\n\n          </div>"}, "last_serial": 1520500, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "d364cfb23034d18675beedc3f0f07352", "sha256": "c679320a620e3b37b07f1631935282fe78965b131581c4b4315af24249af42b0"}, "downloads": -1, "filename": "nosebook-0.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "d364cfb23034d18675beedc3f0f07352", "packagetype": "bdist_wheel", "python_version": "3.4", "requires_python": null, "size": 5749, "upload_time": "2015-02-14T15:23:57", "upload_time_iso_8601": "2015-02-14T15:23:57.225197Z", "url": "https://files.pythonhosted.org/packages/fb/55/ad70b283881ba1caeb3cbb9b40d7563d99e59be0fb6de89d80c1dfc1474f/nosebook-0.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0973e26f5e620532d40a36165f6a1b1e", "sha256": "3b1c63ba3c06cb3c30411ac2a89ee0a57f3e770ac6e206d47e3220927a30fe41"}, "downloads": -1, "filename": "nosebook-0.1.0.tar.gz", "has_sig": false, "md5_digest": "0973e26f5e620532d40a36165f6a1b1e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5643, "upload_time": "2015-02-14T15:23:43", "upload_time_iso_8601": "2015-02-14T15:23:43.738930Z", "url": "https://files.pythonhosted.org/packages/59/58/fbdede6c28eaa37035d0a224c37d32bf99a98edb57979fe0d85780ae14a5/nosebook-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "e2824e8f54c0e67a552783b4c02145d7", "sha256": "55a1100604ed471e2723539b12947c101f4c1aaf754bda9a421ae24690ded0b8"}, "downloads": -1, "filename": "nosebook-0.2.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "e2824e8f54c0e67a552783b4c02145d7", "packagetype": "bdist_wheel", "python_version": "3.4", "requires_python": null, "size": 7643, "upload_time": "2015-02-14T22:33:40", "upload_time_iso_8601": "2015-02-14T22:33:40.015243Z", "url": "https://files.pythonhosted.org/packages/e6/2b/01b4e1cef3a3fc6038ba2ba21db04bcaeea4a14dfdd48952152de9346a14/nosebook-0.2.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1b615ab9b7e15d7aa0d386f5eac1c034", "sha256": "55528fc3a77d5430e587825bc72ced371dceb4202737af4bac646d05775c12b1"}, "downloads": -1, "filename": "nosebook-0.2.0.tar.gz", "has_sig": false, "md5_digest": "1b615ab9b7e15d7aa0d386f5eac1c034", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7342, "upload_time": "2015-02-14T22:33:31", "upload_time_iso_8601": "2015-02-14T22:33:31.048075Z", "url": "https://files.pythonhosted.org/packages/ed/15/ffbd0e2c74816e5e3ef4f69025e687101c582c1f60cfd73e9ef224efb907/nosebook-0.2.0.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "964ae6483e05d81cc1d1df675df0f27c", "sha256": "9000b5dc1988b72a4590bf3e78eec5a6169bcd83fa1406cb55c18e63a5cc19f0"}, "downloads": -1, "filename": "nosebook-0.3.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "964ae6483e05d81cc1d1df675df0f27c", "packagetype": "bdist_wheel", "python_version": "3.4", "requires_python": null, "size": 8187, "upload_time": "2015-04-21T13:53:27", "upload_time_iso_8601": "2015-04-21T13:53:27.249672Z", "url": "https://files.pythonhosted.org/packages/a2/62/ea936e8e736b9c7231573f8c8a0da0aa36acec22526ae855807e627fcf80/nosebook-0.3.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "055f4ec0fe8db3dac1e7c1f19489b1e9", "sha256": "acd5746218c5e805a8e5cf031d8e50820fc1f569855f5c72326526ec4077e704"}, "downloads": -1, "filename": "nosebook-0.3.0.tar.gz", "has_sig": false, "md5_digest": "055f4ec0fe8db3dac1e7c1f19489b1e9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8460, "upload_time": "2015-04-21T13:53:17", "upload_time_iso_8601": "2015-04-21T13:53:17.007593Z", "url": "https://files.pythonhosted.org/packages/26/47/8fa7958f3acf6aa2acaaaaa949d4f9d6d3029c16da60c9ec02d7e5e76a75/nosebook-0.3.0.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "f153313f5fddd9f0a4f9e5e4eb41287d", "sha256": "0dae949e62670425bbc477643afa6a80334521d90e8471b6eeced1c92dc35625"}, "downloads": -1, "filename": "nosebook-0.4.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "f153313f5fddd9f0a4f9e5e4eb41287d", "packagetype": "bdist_wheel", "python_version": "3.4", "requires_python": null, "size": 8979, "upload_time": "2015-04-25T04:59:43", "upload_time_iso_8601": "2015-04-25T04:59:43.472406Z", "url": "https://files.pythonhosted.org/packages/d5/78/e45864e6a61ff83ecfa5b772a8b8836683a0a326da6cfc887b2c62434619/nosebook-0.4.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "72fcb5546238816ecff6e19b2fd01de2", "sha256": "f1ceefe3eaae5c3c69ef4702a1318171b0a1d08ec8716f10306a0df6bc4876bd"}, "downloads": -1, "filename": "nosebook-0.4.0.tar.gz", "has_sig": false, "md5_digest": "72fcb5546238816ecff6e19b2fd01de2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9360, "upload_time": "2015-04-25T04:59:33", "upload_time_iso_8601": "2015-04-25T04:59:33.429306Z", "url": "https://files.pythonhosted.org/packages/05/5c/cf0416989ecbb237319049268f2ea62499099d7d4ee7488ab854f1d25ca2/nosebook-0.4.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f153313f5fddd9f0a4f9e5e4eb41287d", "sha256": "0dae949e62670425bbc477643afa6a80334521d90e8471b6eeced1c92dc35625"}, "downloads": -1, "filename": "nosebook-0.4.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "f153313f5fddd9f0a4f9e5e4eb41287d", "packagetype": "bdist_wheel", "python_version": "3.4", "requires_python": null, "size": 8979, "upload_time": "2015-04-25T04:59:43", "upload_time_iso_8601": "2015-04-25T04:59:43.472406Z", "url": "https://files.pythonhosted.org/packages/d5/78/e45864e6a61ff83ecfa5b772a8b8836683a0a326da6cfc887b2c62434619/nosebook-0.4.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "72fcb5546238816ecff6e19b2fd01de2", "sha256": "f1ceefe3eaae5c3c69ef4702a1318171b0a1d08ec8716f10306a0df6bc4876bd"}, "downloads": -1, "filename": "nosebook-0.4.0.tar.gz", "has_sig": false, "md5_digest": "72fcb5546238816ecff6e19b2fd01de2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9360, "upload_time": "2015-04-25T04:59:33", "upload_time_iso_8601": "2015-04-25T04:59:33.429306Z", "url": "https://files.pythonhosted.org/packages/05/5c/cf0416989ecbb237319049268f2ea62499099d7d4ee7488ab854f1d25ca2/nosebook-0.4.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:44:47 2020"}