{"info": {"author": "lonelyenvoy", "author_email": "petrinchor@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: 3.9", "Topic :: Software Development :: Libraries", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "# python-memoization\n\n[![Repository][repositorysvg]][repository] [![Build Status][travismaster]][travis] [![Codacy Badge][codacysvg]][codacy]\n[![Coverage Status][coverallssvg]][coveralls] [![Downloads][downloadssvg]][repository]\n<br>\n[![PRs welcome][prsvg]][pr] [![License][licensesvg]][license] [![Supports Python][pythonsvg]][python]\n\n\nA powerful caching library for Python, with TTL support and multiple algorithm options.\n\nIf you like this work, please [star](https://github.com/lonelyenvoy/python-memoization) it on GitHub.\n\n## Why choose this library?\n\nPerhaps you know about [```functools.lru_cache```](https://docs.python.org/3/library/functools.html#functools.lru_cache)\nin Python 3, and you may be wondering why I am reinventing the wheel.\n\nWell, actually not. This lib is based on ```functools```. Please find below the comparison with ```lru_cache```.\n\n|Features|```functools.lru_cache```|```memoization```|\n|--------|-------------------|-----------|\n|Configurable max size|\u2714\ufe0f|\u2714\ufe0f|\n|Thread safety|\u2714\ufe0f|\u2714\ufe0f|\n|Flexible argument typing (typed & untyped)|\u2714\ufe0f|Always typed|\n|Cache statistics|\u2714\ufe0f|\u2714\ufe0f|\n|LRU (Least Recently Used) as caching algorithm|\u2714\ufe0f|\u2714\ufe0f|\n|LFU (Least Frequently Used) as caching algorithm|No support|\u2714\ufe0f|\n|FIFO (First In First Out) as caching algorithm|No support|\u2714\ufe0f|\n|Extensibility for new caching algorithms|No support|\u2714\ufe0f|\n|TTL (Time-To-Live) support|No support|\u2714\ufe0f|\n|Support for unhashable arguments (dict, list, etc.)|No support|\u2714\ufe0f|\n|Partial cache clearing|No support|Pending implementation in v0.3.x|\n|Python version|3.2+|3.4+|\n\n```memoization``` solves some drawbacks of ```functools.lru_cache```:\n\n1. ```lru_cache``` does not support __unhashable types__, which means function arguments cannot contain dict or list.\n\n```python\n>>> from functools import lru_cache\n>>> @lru_cache()\n... def f(x): return x\n... \n>>> f([1, 2])  # unsupported\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nTypeError: unhashable type: 'list'\n```\n\n2. ```lru_cache``` is vulnerable to [__hash collision attack__](https://learncryptography.com/hash-functions/hash-collision-attack)\n   and can be hacked or compromised. In ```memoization```, caching is always typed, which means ```f(3)``` and \n   ```f(3.0)``` will be treated as different calls and cached separately. This prevents the attack from happening\n   (or at least makes it a lot harder).\n\n```python\n>>> hash((1,))\n3430019387558\n>>> hash(3430019387558.0)  # two different arguments have an identical hash value\n3430019387558\n```\n\n3. Unlike `lru_cache`, `memoization` is designed to be highly extensible, which make it easy for developers to add and integrate\n__any caching algorithms__ (beyond FIFO, LRU and LFU) into this library. See [Contributing Guidance](https://github.com/lonelyenvoy/python-memoization/blob/master/CONTRIBUTING.md) for further detail.\n\n\n## Installation\n\n```bash\npip install memoization\n```\n\n\n## Usage in 2 lines\n\n```python\nfrom memoization import cached\n\n@cached\ndef func(arg):\n    ...  # do something slow\n```\n\nSimple enough - the results of ```func()``` are cached. \nRepetitive calls to ```func()``` with the same arguments run ```func()``` only once, enhancing performance.\n\n\n## Advanced features\n\nConfigurable options include `ttl`, `max_size`, `algorithm` and `thread_safe`.\n\n### TTL (Time-To-Live)\n\n```python\n@cached(ttl=5)  # the cache expires after 5 seconds\ndef expensive_db_query(user_id):\n    ...\n```\n\nFor impure functions, TTL (in second) will be a solution. This will be useful when the function returns resources that is valid only for a short time, e.g. fetching something from databases.\n\n### Limited cache capacity\n\n```python\n@cached(max_size=128)  # the cache holds no more than 128 items\ndef get_a_very_large_object(filename):\n    ...\n```\n\nBy default, if you don't specify ```max_size```, the cache can hold unlimited number of items.\nWhen the cache is fully occupied, the former data will be overwritten by a certain algorithm described below.\n\n### Choosing your caching algorithm\n\n```python\nfrom memoization import cached, CachingAlgorithmFlag\n\n@cached(max_size=128, algorithm=CachingAlgorithmFlag.LFU)  # the cache overwrites items using the LFU algorithm\ndef func(arg):\n    ...\n```\n\nPossible values for ```algorithm``` are:\n\n- `CachingAlgorithmFlag.LRU`: _Least Recently Used_  (default)\n- `CachingAlgorithmFlag.LFU`: _Least Frequently Used_ \n- `CachingAlgorithmFlag.FIFO`: _First In First Out_ \n\nThis option is valid only when a ```max_size``` is explicitly specified.\n\n### Thread safe?\n\n```python\n@cached(thread_safe=False)\ndef func(arg):\n    ...\n```\n\n```thread_safe``` is ```True``` by default. Setting it to ```False``` enhances performance.\n\n### Order-independent cache key\n\nBy default, the following function calls will be treated differently and cached twice, which means the cache misses at the second call.\n\n```python\nfunc(a=1, b=1)\nfunc(b=1, a=1)\n```\n\nYou can avoid this behavior by passing an `order_independent` argument to the decorator, although it will slow down the performance a little bit. \n\n```python\n@cached(order_independent=True)\ndef func(**kwargs):\n    ...\n```\n\n\n### Knowing how well the cache is behaving\n\n```python\n>>> @cached\n... def f(x): return x\n... \n>>> f.cache_info()\nCacheInfo(hits=0, misses=0, current_size=0, max_size=None, algorithm=<CachingAlgorithmFlag.LRU: 2>, ttl=None, thread_safe=True, order_independent=False)\n```\n\nWith ```cache_info```, you can retrieve the number of ```hits``` and ```misses``` of the cache, and other information indicating the caching status.\n\n- `hits`: the number of cache hits\n- `misses`: the number of cache misses\n- `current_size`: the number of items that were cached\n- `max_size`: the maximum number of items that can be cached (user-specified)\n- `algorithm`: caching algorithm (user-specified)\n- `ttl`: Time-To-Live value (user-specified)\n- `thread_safe`: whether the cache is thread safe (user-specified)\n- `order_independent`: whether the cache is kwarg-order-independent (user-specified)\n\n### Other APIs\n\n- Access the original function ```f``` by ```f.__wrapped__```.\n- Clear the cache by ```f.cache_clear()```.\n\n\n## Contributing\n\nThis project welcomes contributions from anyone.\n- [Read Contributing Guidance](https://github.com/lonelyenvoy/python-memoization/blob/master/CONTRIBUTING.md) first.\n- [Submit bugs](https://github.com/lonelyenvoy/python-memoization/issues) and help me verify fixes.\n- [Submit pull requests](https://github.com/lonelyenvoy/python-memoization/pulls) for bug fixes and features and discuss existing proposals. Please make sure that your PR passes the tests in ```test.py```.\n- [See contributors](https://github.com/lonelyenvoy/python-memoization/blob/master/CONTRIBUTORS.md) of this project.\n\n\n## License\n\n[The MIT License](https://github.com/lonelyenvoy/python-memoization/blob/master/LICENSE)\n\n\n[pythonsvg]: https://img.shields.io/pypi/pyversions/memoization.svg\n[python]: https://www.python.org\n\n[travismaster]: https://travis-ci.org/lonelyenvoy/python-memoization.svg?branch=master\n[travis]: https://travis-ci.org/lonelyenvoy/python-memoization\n\n[coverallssvg]: https://coveralls.io/repos/github/lonelyenvoy/python-memoization/badge.svg?branch=master\n[coveralls]: https://coveralls.io/github/lonelyenvoy/python-memoization?branch=master\n\n[repositorysvg]: https://img.shields.io/pypi/v/memoization\n[repository]: https://pypi.org/project/memoization\n\n[downloadssvg]: https://img.shields.io/pypi/dm/memoization\n\n[prsvg]: https://img.shields.io/badge/pull_requests-welcome-blue.svg\n[pr]: https://github.com/lonelyenvoy/python-memoization#contributing\n\n[licensesvg]: https://img.shields.io/badge/license-MIT-blue.svg\n[license]: https://github.com/lonelyenvoy/python-memoization/blob/master/LICENSE\n\n[codacysvg]: https://api.codacy.com/project/badge/Grade/52c68fb9de6b4b149e77e8e173616db6\n[codacy]: https://www.codacy.com/manual/petrinchor/python-memoization?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=lonelyenvoy/python-memoization&amp;utm_campaign=Badge_Grade\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/lonelyenvoy/python-memoization", "keywords": "memoization memorization remember decorator cache caching function callablefunctional ttl limited capacity fast high-performance optimization", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "memoization", "package_url": "https://pypi.org/project/memoization/", "platform": "", "project_url": "https://pypi.org/project/memoization/", "project_urls": {"Homepage": "https://github.com/lonelyenvoy/python-memoization"}, "release_url": "https://pypi.org/project/memoization/0.2.3/", "requires_dist": null, "requires_python": ">=3, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, <4", "summary": "A powerful caching library for Python, with TTL support and multiple algorithm options. (https://github.com/lonelyenvoy/python-memoization)", "version": "0.2.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>python-memoization</h1>\n<p><a href=\"https://pypi.org/project/memoization\" rel=\"nofollow\"><img alt=\"Repository\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/24a12fa2371a84063a42cd91cdbea2ce08e17db0/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f6d656d6f697a6174696f6e\"></a> <a href=\"https://travis-ci.org/lonelyenvoy/python-memoization\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6c1029cb4d479426da9ccb46f9fd52318d2c64f1/68747470733a2f2f7472617669732d63692e6f72672f6c6f6e656c79656e766f792f707974686f6e2d6d656d6f697a6174696f6e2e7376673f6272616e63683d6d6173746572\"></a> <a href=\"https://www.codacy.com/manual/petrinchor/python-memoization?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=lonelyenvoy/python-memoization&amp;utm_campaign=Badge_Grade\" rel=\"nofollow\"><img alt=\"Codacy Badge\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8e4783db7788f74e030e5e9891c747c43279c4dc/68747470733a2f2f6170692e636f646163792e636f6d2f70726f6a6563742f62616467652f47726164652f3532633638666239646536623462313439653737653865313733363136646236\"></a>\n<a href=\"https://coveralls.io/github/lonelyenvoy/python-memoization?branch=master\" rel=\"nofollow\"><img alt=\"Coverage Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c3bdb7c87d92e51e7a662ba4849e2fdc500170f1/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f6c6f6e656c79656e766f792f707974686f6e2d6d656d6f697a6174696f6e2f62616467652e7376673f6272616e63683d6d6173746572\"></a> <a href=\"https://pypi.org/project/memoization\" rel=\"nofollow\"><img alt=\"Downloads\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/84a7fa7ec0f7451e0e4f12c513ab0d7879ee8fbd/68747470733a2f2f696d672e736869656c64732e696f2f707970692f646d2f6d656d6f697a6174696f6e\"></a>\n<br>\n<a href=\"https://github.com/lonelyenvoy/python-memoization#contributing\" rel=\"nofollow\"><img alt=\"PRs welcome\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/78b523db28b79b3ff18af64287bf42fff8058767/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f70756c6c5f72657175657374732d77656c636f6d652d626c75652e737667\"></a> <a href=\"https://github.com/lonelyenvoy/python-memoization/blob/master/LICENSE\" rel=\"nofollow\"><img alt=\"License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c88fab50b4a1dc0cd91faeb7ba5654d56e380260/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d626c75652e737667\"></a> <a href=\"https://www.python.org\" rel=\"nofollow\"><img alt=\"Supports Python\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5d4fdc63393e6c5280204be8132d2b150987eea6/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f6d656d6f697a6174696f6e2e737667\"></a></p>\n<p>A powerful caching library for Python, with TTL support and multiple algorithm options.</p>\n<p>If you like this work, please <a href=\"https://github.com/lonelyenvoy/python-memoization\" rel=\"nofollow\">star</a> it on GitHub.</p>\n<h2>Why choose this library?</h2>\n<p>Perhaps you know about <a href=\"https://docs.python.org/3/library/functools.html#functools.lru_cache\" rel=\"nofollow\"><code>functools.lru_cache</code></a>\nin Python 3, and you may be wondering why I am reinventing the wheel.</p>\n<p>Well, actually not. This lib is based on <code>functools</code>. Please find below the comparison with <code>lru_cache</code>.</p>\n<table>\n<thead>\n<tr>\n<th>Features</th>\n<th><code>functools.lru_cache</code></th>\n<th><code>memoization</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Configurable max size</td>\n<td>\u2714\ufe0f</td>\n<td>\u2714\ufe0f</td>\n</tr>\n<tr>\n<td>Thread safety</td>\n<td>\u2714\ufe0f</td>\n<td>\u2714\ufe0f</td>\n</tr>\n<tr>\n<td>Flexible argument typing (typed &amp; untyped)</td>\n<td>\u2714\ufe0f</td>\n<td>Always typed</td>\n</tr>\n<tr>\n<td>Cache statistics</td>\n<td>\u2714\ufe0f</td>\n<td>\u2714\ufe0f</td>\n</tr>\n<tr>\n<td>LRU (Least Recently Used) as caching algorithm</td>\n<td>\u2714\ufe0f</td>\n<td>\u2714\ufe0f</td>\n</tr>\n<tr>\n<td>LFU (Least Frequently Used) as caching algorithm</td>\n<td>No support</td>\n<td>\u2714\ufe0f</td>\n</tr>\n<tr>\n<td>FIFO (First In First Out) as caching algorithm</td>\n<td>No support</td>\n<td>\u2714\ufe0f</td>\n</tr>\n<tr>\n<td>Extensibility for new caching algorithms</td>\n<td>No support</td>\n<td>\u2714\ufe0f</td>\n</tr>\n<tr>\n<td>TTL (Time-To-Live) support</td>\n<td>No support</td>\n<td>\u2714\ufe0f</td>\n</tr>\n<tr>\n<td>Support for unhashable arguments (dict, list, etc.)</td>\n<td>No support</td>\n<td>\u2714\ufe0f</td>\n</tr>\n<tr>\n<td>Partial cache clearing</td>\n<td>No support</td>\n<td>Pending implementation in v0.3.x</td>\n</tr>\n<tr>\n<td>Python version</td>\n<td>3.2+</td>\n<td>3.4+</td>\n</tr></tbody></table>\n<p><code>memoization</code> solves some drawbacks of <code>functools.lru_cache</code>:</p>\n<ol>\n<li><code>lru_cache</code> does not support <strong>unhashable types</strong>, which means function arguments cannot contain dict or list.</li>\n</ol>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">functools</span> <span class=\"kn\">import</span> <span class=\"n\">lru_cache</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nd\">@lru_cache</span><span class=\"p\">()</span>\n<span class=\"o\">...</span> <span class=\"k\">def</span> <span class=\"nf\">f</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">):</span> <span class=\"k\">return</span> <span class=\"n\">x</span>\n<span class=\"o\">...</span> \n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">f</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">])</span>  <span class=\"c1\"># unsupported</span>\n<span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">):</span>\n  <span class=\"n\">File</span> <span class=\"s2\">\"&lt;stdin&gt;\"</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"o\">&lt;</span><span class=\"n\">module</span><span class=\"o\">&gt;</span>\n<span class=\"ne\">TypeError</span><span class=\"p\">:</span> <span class=\"n\">unhashable</span> <span class=\"nb\">type</span><span class=\"p\">:</span> <span class=\"s1\">'list'</span>\n</pre>\n<ol>\n<li><code>lru_cache</code> is vulnerable to <a href=\"https://learncryptography.com/hash-functions/hash-collision-attack\" rel=\"nofollow\"><strong>hash collision attack</strong></a>\nand can be hacked or compromised. In <code>memoization</code>, caching is always typed, which means <code>f(3)</code> and\n<code>f(3.0)</code> will be treated as different calls and cached separately. This prevents the attack from happening\n(or at least makes it a lot harder).</li>\n</ol>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">hash</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,))</span>\n<span class=\"mi\">3430019387558</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">hash</span><span class=\"p\">(</span><span class=\"mf\">3430019387558.0</span><span class=\"p\">)</span>  <span class=\"c1\"># two different arguments have an identical hash value</span>\n<span class=\"mi\">3430019387558</span>\n</pre>\n<ol>\n<li>Unlike <code>lru_cache</code>, <code>memoization</code> is designed to be highly extensible, which make it easy for developers to add and integrate\n<strong>any caching algorithms</strong> (beyond FIFO, LRU and LFU) into this library. See <a href=\"https://github.com/lonelyenvoy/python-memoization/blob/master/CONTRIBUTING.md\" rel=\"nofollow\">Contributing Guidance</a> for further detail.</li>\n</ol>\n<h2>Installation</h2>\n<pre>pip install memoization\n</pre>\n<h2>Usage in 2 lines</h2>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">memoization</span> <span class=\"kn\">import</span> <span class=\"n\">cached</span>\n\n<span class=\"nd\">@cached</span>\n<span class=\"k\">def</span> <span class=\"nf\">func</span><span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>  <span class=\"c1\"># do something slow</span>\n</pre>\n<p>Simple enough - the results of <code>func()</code> are cached.\nRepetitive calls to <code>func()</code> with the same arguments run <code>func()</code> only once, enhancing performance.</p>\n<h2>Advanced features</h2>\n<p>Configurable options include <code>ttl</code>, <code>max_size</code>, <code>algorithm</code> and <code>thread_safe</code>.</p>\n<h3>TTL (Time-To-Live)</h3>\n<pre><span class=\"nd\">@cached</span><span class=\"p\">(</span><span class=\"n\">ttl</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">)</span>  <span class=\"c1\"># the cache expires after 5 seconds</span>\n<span class=\"k\">def</span> <span class=\"nf\">expensive_db_query</span><span class=\"p\">(</span><span class=\"n\">user_id</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n</pre>\n<p>For impure functions, TTL (in second) will be a solution. This will be useful when the function returns resources that is valid only for a short time, e.g. fetching something from databases.</p>\n<h3>Limited cache capacity</h3>\n<pre><span class=\"nd\">@cached</span><span class=\"p\">(</span><span class=\"n\">max_size</span><span class=\"o\">=</span><span class=\"mi\">128</span><span class=\"p\">)</span>  <span class=\"c1\"># the cache holds no more than 128 items</span>\n<span class=\"k\">def</span> <span class=\"nf\">get_a_very_large_object</span><span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n</pre>\n<p>By default, if you don't specify <code>max_size</code>, the cache can hold unlimited number of items.\nWhen the cache is fully occupied, the former data will be overwritten by a certain algorithm described below.</p>\n<h3>Choosing your caching algorithm</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">memoization</span> <span class=\"kn\">import</span> <span class=\"n\">cached</span><span class=\"p\">,</span> <span class=\"n\">CachingAlgorithmFlag</span>\n\n<span class=\"nd\">@cached</span><span class=\"p\">(</span><span class=\"n\">max_size</span><span class=\"o\">=</span><span class=\"mi\">128</span><span class=\"p\">,</span> <span class=\"n\">algorithm</span><span class=\"o\">=</span><span class=\"n\">CachingAlgorithmFlag</span><span class=\"o\">.</span><span class=\"n\">LFU</span><span class=\"p\">)</span>  <span class=\"c1\"># the cache overwrites items using the LFU algorithm</span>\n<span class=\"k\">def</span> <span class=\"nf\">func</span><span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n</pre>\n<p>Possible values for <code>algorithm</code> are:</p>\n<ul>\n<li><code>CachingAlgorithmFlag.LRU</code>: <em>Least Recently Used</em>  (default)</li>\n<li><code>CachingAlgorithmFlag.LFU</code>: <em>Least Frequently Used</em></li>\n<li><code>CachingAlgorithmFlag.FIFO</code>: <em>First In First Out</em></li>\n</ul>\n<p>This option is valid only when a <code>max_size</code> is explicitly specified.</p>\n<h3>Thread safe?</h3>\n<pre><span class=\"nd\">@cached</span><span class=\"p\">(</span><span class=\"n\">thread_safe</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">func</span><span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n</pre>\n<p><code>thread_safe</code> is <code>True</code> by default. Setting it to <code>False</code> enhances performance.</p>\n<h3>Order-independent cache key</h3>\n<p>By default, the following function calls will be treated differently and cached twice, which means the cache misses at the second call.</p>\n<pre><span class=\"n\">func</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">func</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n</pre>\n<p>You can avoid this behavior by passing an <code>order_independent</code> argument to the decorator, although it will slow down the performance a little bit.</p>\n<pre><span class=\"nd\">@cached</span><span class=\"p\">(</span><span class=\"n\">order_independent</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">func</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n</pre>\n<h3>Knowing how well the cache is behaving</h3>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nd\">@cached</span>\n<span class=\"o\">...</span> <span class=\"k\">def</span> <span class=\"nf\">f</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">):</span> <span class=\"k\">return</span> <span class=\"n\">x</span>\n<span class=\"o\">...</span> \n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">cache_info</span><span class=\"p\">()</span>\n<span class=\"n\">CacheInfo</span><span class=\"p\">(</span><span class=\"n\">hits</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">misses</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">current_size</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">max_size</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">algorithm</span><span class=\"o\">=&lt;</span><span class=\"n\">CachingAlgorithmFlag</span><span class=\"o\">.</span><span class=\"n\">LRU</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"n\">ttl</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">thread_safe</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">order_independent</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n</pre>\n<p>With <code>cache_info</code>, you can retrieve the number of <code>hits</code> and <code>misses</code> of the cache, and other information indicating the caching status.</p>\n<ul>\n<li><code>hits</code>: the number of cache hits</li>\n<li><code>misses</code>: the number of cache misses</li>\n<li><code>current_size</code>: the number of items that were cached</li>\n<li><code>max_size</code>: the maximum number of items that can be cached (user-specified)</li>\n<li><code>algorithm</code>: caching algorithm (user-specified)</li>\n<li><code>ttl</code>: Time-To-Live value (user-specified)</li>\n<li><code>thread_safe</code>: whether the cache is thread safe (user-specified)</li>\n<li><code>order_independent</code>: whether the cache is kwarg-order-independent (user-specified)</li>\n</ul>\n<h3>Other APIs</h3>\n<ul>\n<li>Access the original function <code>f</code> by <code>f.__wrapped__</code>.</li>\n<li>Clear the cache by <code>f.cache_clear()</code>.</li>\n</ul>\n<h2>Contributing</h2>\n<p>This project welcomes contributions from anyone.</p>\n<ul>\n<li><a href=\"https://github.com/lonelyenvoy/python-memoization/blob/master/CONTRIBUTING.md\" rel=\"nofollow\">Read Contributing Guidance</a> first.</li>\n<li><a href=\"https://github.com/lonelyenvoy/python-memoization/issues\" rel=\"nofollow\">Submit bugs</a> and help me verify fixes.</li>\n<li><a href=\"https://github.com/lonelyenvoy/python-memoization/pulls\" rel=\"nofollow\">Submit pull requests</a> for bug fixes and features and discuss existing proposals. Please make sure that your PR passes the tests in <code>test.py</code>.</li>\n<li><a href=\"https://github.com/lonelyenvoy/python-memoization/blob/master/CONTRIBUTORS.md\" rel=\"nofollow\">See contributors</a> of this project.</li>\n</ul>\n<h2>License</h2>\n<p><a href=\"https://github.com/lonelyenvoy/python-memoization/blob/master/LICENSE\" rel=\"nofollow\">The MIT License</a></p>\n\n          </div>"}, "last_serial": 6703603, "releases": {"0.0.10": [{"comment_text": "", "digests": {"md5": "fc59f33778f289d67130ca296598fb4e", "sha256": "8505f40330ec128d571a717bd45fdca5e15fc1b9f57d573b681d918ff1bc1618"}, "downloads": -1, "filename": "memoization-0.0.10.tar.gz", "has_sig": false, "md5_digest": "fc59f33778f289d67130ca296598fb4e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3200, "upload_time": "2018-08-16T13:28:10", "upload_time_iso_8601": "2018-08-16T13:28:10.607837Z", "url": "https://files.pythonhosted.org/packages/9c/1b/68e687bf5b501bc3158f968c1b88e5148a4bfc6d289355d674b52905d7a2/memoization-0.0.10.tar.gz", "yanked": false}], "0.0.6": [{"comment_text": "", "digests": {"md5": "69c7a80c479e68c8bfffe1ed6a9cb7ed", "sha256": "38b0d8b592c420695b880a5afa01943c228ae497f34eb6fd40a2b703f959fe64"}, "downloads": -1, "filename": "memoization-0.0.6.tar.gz", "has_sig": false, "md5_digest": "69c7a80c479e68c8bfffe1ed6a9cb7ed", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 782, "upload_time": "2018-08-15T19:49:38", "upload_time_iso_8601": "2018-08-15T19:49:38.381082Z", "url": "https://files.pythonhosted.org/packages/07/81/8d7fcf215f4b36f89e12bdadd8a29d28b3763560b238db365831732564c3/memoization-0.0.6.tar.gz", "yanked": false}], "0.0.7": [{"comment_text": "", "digests": {"md5": "e7dd6a3e6dcfe3fb979c65a021b798bc", "sha256": "c611ed913efe2727ad6efb20a1c14d8da12d90eda2c89c7245a4ec22c05893bf"}, "downloads": -1, "filename": "memoization-0.0.7.tar.gz", "has_sig": false, "md5_digest": "e7dd6a3e6dcfe3fb979c65a021b798bc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 962, "upload_time": "2018-08-16T12:13:04", "upload_time_iso_8601": "2018-08-16T12:13:04.518695Z", "url": "https://files.pythonhosted.org/packages/5e/2e/0f721f7d24c53fdcb9c715186aeb65392727023d67ec3f58e3b092169e85/memoization-0.0.7.tar.gz", "yanked": false}], "0.0.9": [{"comment_text": "", "digests": {"md5": "492f4fc3eca27a73892597a1116d231d", "sha256": "21097958f3a33ff20134b45ced682727401310e7c57e9db96dfa622e4ea8e9c2"}, "downloads": -1, "filename": "memoization-0.0.9.tar.gz", "has_sig": false, "md5_digest": "492f4fc3eca27a73892597a1116d231d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 999, "upload_time": "2018-08-16T13:09:51", "upload_time_iso_8601": "2018-08-16T13:09:51.338317Z", "url": "https://files.pythonhosted.org/packages/a4/96/5316661fc585d542f2764acbfd829136a1b037810f6e5c745651043efaa9/memoization-0.0.9.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "deb9fb6384817a1a18768a4f62b71960", "sha256": "fb7116356b6183b3baae55aedc81f287200ad852be88730c3cca304844bd5793"}, "downloads": -1, "filename": "memoization-0.1.4-py3-none-any.whl", "has_sig": false, "md5_digest": "deb9fb6384817a1a18768a4f62b71960", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2.6, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, <4", "size": 25333, "upload_time": "2019-05-13T07:04:00", "upload_time_iso_8601": "2019-05-13T07:04:00.183908Z", "url": "https://files.pythonhosted.org/packages/08/fc/28e480593bb9fa3475f5bc9d4c2090e381aac1fb8fedf1c6678c9e7c10de/memoization-0.1.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c00887b545be063b5225a01851235a9b", "sha256": "bb141c5f950e32f6318ed50861876a4c47e551d816fd5b800af7e96ddb7c5615"}, "downloads": -1, "filename": "memoization-0.1.4.tar.gz", "has_sig": false, "md5_digest": "c00887b545be063b5225a01851235a9b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.6, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, <4", "size": 24076, "upload_time": "2019-05-13T07:04:02", "upload_time_iso_8601": "2019-05-13T07:04:02.160758Z", "url": "https://files.pythonhosted.org/packages/4b/60/023e8952dbebea9f6d6bdbbefcddf64303273969c12f64bdaa2f20551746/memoization-0.1.4.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "68f7d4417e5da23e800f5bd5bc353bcb", "sha256": "a1de1e2e2e83c0adf23d77b3e0f27d52a4bfae6b07950a969ba6a7c3bd35c591"}, "downloads": -1, "filename": "memoization-0.2.2-py3-none-any.whl", "has_sig": false, "md5_digest": "68f7d4417e5da23e800f5bd5bc353bcb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, <4", "size": 29609, "upload_time": "2020-01-11T17:16:39", "upload_time_iso_8601": "2020-01-11T17:16:39.790425Z", "url": "https://files.pythonhosted.org/packages/31/19/f74e5fbc70e4d9d7633b11f133676e10cf51478cab164d7afb2f5f1fbb6a/memoization-0.2.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "dfb3a124e05922f046d7cf8c4be63f62", "sha256": "dc595d6e929a1e05c197c1fd94abe36b8c3479ee3c80c76c4a46777cc9d3d626"}, "downloads": -1, "filename": "memoization-0.2.2.tar.gz", "has_sig": false, "md5_digest": "dfb3a124e05922f046d7cf8c4be63f62", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, <4", "size": 24209, "upload_time": "2020-01-11T17:16:41", "upload_time_iso_8601": "2020-01-11T17:16:41.545166Z", "url": "https://files.pythonhosted.org/packages/07/2c/4645c0ba62929a8c53e407c8ddc19b13a0f42854f72cb684624b63ac6c80/memoization-0.2.2.tar.gz", "yanked": false}], "0.2.3": [{"comment_text": "", "digests": {"md5": "3094f2f181be3ca036709c5d49b470f0", "sha256": "621d59ddb104a9496639b568d381474f821392b80d10b6e49f019b9c9fbd993b"}, "downloads": -1, "filename": "memoization-0.2.3-py3-none-any.whl", "has_sig": false, "md5_digest": "3094f2f181be3ca036709c5d49b470f0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, <4", "size": 30873, "upload_time": "2020-02-26T13:35:14", "upload_time_iso_8601": "2020-02-26T13:35:14.908448Z", "url": "https://files.pythonhosted.org/packages/f6/4f/70addf81a3a1293ccbfa2f2abc0e2554b5592b28c3cd5025984fa9555c7c/memoization-0.2.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7de5ccb216eccb41e956ad81bd55ae13", "sha256": "2d2950bfb3e74bce569b9a5c000173beb9f3ed3c3a4d7bef11b6520202dbd46a"}, "downloads": -1, "filename": "memoization-0.2.3.tar.gz", "has_sig": false, "md5_digest": "7de5ccb216eccb41e956ad81bd55ae13", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, <4", "size": 25187, "upload_time": "2020-02-26T13:35:16", "upload_time_iso_8601": "2020-02-26T13:35:16.900086Z", "url": "https://files.pythonhosted.org/packages/e1/74/bc6a22ec0b1a79175f81a7e0c708fc4d62a092b453870bc2c3e94a6a5df8/memoization-0.2.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "3094f2f181be3ca036709c5d49b470f0", "sha256": "621d59ddb104a9496639b568d381474f821392b80d10b6e49f019b9c9fbd993b"}, "downloads": -1, "filename": "memoization-0.2.3-py3-none-any.whl", "has_sig": false, "md5_digest": "3094f2f181be3ca036709c5d49b470f0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, <4", "size": 30873, "upload_time": "2020-02-26T13:35:14", "upload_time_iso_8601": "2020-02-26T13:35:14.908448Z", "url": "https://files.pythonhosted.org/packages/f6/4f/70addf81a3a1293ccbfa2f2abc0e2554b5592b28c3cd5025984fa9555c7c/memoization-0.2.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7de5ccb216eccb41e956ad81bd55ae13", "sha256": "2d2950bfb3e74bce569b9a5c000173beb9f3ed3c3a4d7bef11b6520202dbd46a"}, "downloads": -1, "filename": "memoization-0.2.3.tar.gz", "has_sig": false, "md5_digest": "7de5ccb216eccb41e956ad81bd55ae13", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, <4", "size": 25187, "upload_time": "2020-02-26T13:35:16", "upload_time_iso_8601": "2020-02-26T13:35:16.900086Z", "url": "https://files.pythonhosted.org/packages/e1/74/bc6a22ec0b1a79175f81a7e0c708fc4d62a092b453870bc2c3e94a6a5df8/memoization-0.2.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:56:20 2020"}