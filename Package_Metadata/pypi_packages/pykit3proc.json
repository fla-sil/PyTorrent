{"info": {"author": "Zhang Yanpo", "author_email": "drdr.xp@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: Implementation :: PyPy", "Topic :: Software Development :: Libraries"], "description": "<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n#   Table of Content\n\n- [Name](#name)\n- [Status](#status)\n- [Description](#description)\n- [Synopsis](#synopsis)\n- [Exceptions](#exceptions)\n  - [proc.CalledProcessError](#proccalledprocesserror)\n  - [proc.ProcError](#procprocerror)\n- [Methods](#methods)\n  - [proc.command](#proccommand)\n  - [proc.command_ex](#proccommand_ex)\n  - [proc.shell_script](#procshell_script)\n  - [proc.start_process](#procstart_process)\n- [Author](#author)\n- [Copyright and License](#copyright-and-license)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n[![Build Status](https://travis-ci.com/drmingdrmer/pykit3proc.svg?branch=master)](https://travis-ci.com/drmingdrmer/pykit3proc)\n\n#   Name\n\nproc\n\n#   Status\n\nThis library is considered production ready.\n\n#   Description\n\nUtility to create sub process.\n\n#   Synopsis\n\n```python\nfrom pykit import proc\n\n# execute a shell script\n\nreturncode, out, err = proc.shell_script('ls / | grep bin')\nprint returncode\nprint out\n# output:\n# > 0\n# > bin\n# > sbin\n\n# Or run a command directly.\n# Unlike the above snippet, following statement does not start an sh process.\n\nreturncode, out, err = proc.command('ls', 'a*', cwd='/usr/local')\n```\n\n```python\n# a.py\nimport sys\n\nwith open('foo', 'w') as f:\n    f.write(str(sys.argv))\n\n# b.py\nimport time\nfrom pykit import proc\n\nproc.start_daemon('python', './a.py', 'test')\ntime.sleep(1)\ntry:\n    with open('foo', 'r') as f:\n        print repr(f.read())\nexcept Exception as e:\n    print repr(e)\n```\n\n#   Exceptions\n\n##  proc.CalledProcessError\n\n**syntax**:\n`proc.CalledProcessError(returncode, out, err, cmd, arguments, options)`\n\nIt is sub class of `subprocess.CalledProcessError`.\n\nIt is raised if a sub process return code is not `0`.\nBesides `CalledProcessError.args`, extended from super class `Exception`, it has 6\nother attributes.\n\n**attributes**:\n<!-- TODO env -->\n\n-   `CalledProcessError.returncode`:   process exit code.\n-   `CalledProcessError.out`:          stdout in one string.\n-   `CalledProcessError.err`:          stderr in one string.\n-   `CalledProcessError.cmd`:          the command a process `exec()`.\n-   `CalledProcessError.arguments`:    tuple of command arguments.\n-   `CalledProcessError.options`:      other options passed to this process. Such as `close_fds`, `cwd` etc.\n\n##  proc.ProcError\n\nIt is an alias to `proc.CalledProcessError`.\n\n#   Methods\n\n##  proc.command\n\n**syntax**:\n`proc.command(cmd, *arguments, **options)`\n\nRun a `command` with arguments `arguments` in a subprocess.\nIt blocks until sub process exit.\n\n**arguments**:\n\n-   `cmd`:\n    The path of executable to run.\n\n-   `arguments`:\n    is tuple or list of arguments passed to `cmd`.\n\n-   `options`:\n    is a dictionary of additional options, which are same as `subprocess.Popen`.\n    But with some different default value for easy use:\n\n    -   `encoding`: by default is the system default encoding.\n\n    -   `env`: by default inherit from parent process.\n\n    It also accept the following additional options:\n\n    -   `check=False`: if `True`, raise `CalledProcessError` if returncode is not 0.\n        By default it is `False`.\n\n    -   `capture=True`: whether to capture stdin, stdout and stderr.\n        Otherwise inherit these fd from current process.\n\n    -   `inherit_env=True`: whether to inherit evironment vars from current process.\n\n    -   `input=None`: input to send to stdin, if it is not None.\n\n    -   `timeout=None`: seconds to wait for sub process to exit.\n        By default it is None, for waiting for ever.\n\n    -   `tty=False`: whether to create a speudo tty to run sub process so that\n        the sub process believes it is in a tty(just like controlled by a\n        human).\n\n\n**return**:\na 3 element tuple that contains:\n\n-   `returncode`:   sub process exit code in `int`.\n-   `out`:  sub process stdout in a single string.\n-   `err`:  sub process stderr in a single string.\n\n##  proc.command_ex\n\n**syntax**:\n`proc.command_ex(cmd, *arguments, **options)`\n\nIt is the same as `proc.command` except that if sub process exit code is not\n0, it raises exception `proc.CalledProcessError`.\n\nSee `proc.CalledProcessError`.\n\n**return**:\na 3 element tuple of `returncode`, `out` and `err`, or raise exception\n`proc.CalledProcessError`.\n\n##  proc.shell_script\n\n**syntax**:\n`proc.shell_script(script_str, **options)`\n\nIt is just a shortcut of:\n```\noptions['stdin'] = script_str\nreturn command('sh', **options)\n```\n\n##  proc.start_process\n\n**syntax**:\n`proc.start_process(cmd, target, env, *args)`\n\nCreate a child process and replace it with `cmd`.\nBesides `stdin`, `stdout` and `stderr`, all file\ndescriptors from parent process will be closed in\nthe child process. The parent process waits for\nthe child process until it is completed.\n\n**arguments**:\n\n-   `cmd`:\n    The path of executable to run.\n    Such as `sh`, `bash`, `python`.\n\n-   `target`:\n    The path of the script.\n\n-   `env`:\n    It is a dictionary to pass environment variables\n    to the child process.\n\n-   `*args`:\n    Type is `tuple` or `list`.\n    The arguments passed to the script.\n    Type of every element must be `str`.\n\n**return**:\nnothing\n\n#   Author\n\nZhang Yanpo (\u5f20\u708e\u6cfc) <drdr.xp@gmail.com>\n\n#   Copyright and License\n\nThe MIT License (MIT)\n\nCopyright (c) 2015 Zhang Yanpo (\u5f20\u708e\u6cfc) <drdr.xp@gmail.com>", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/drmingdrmer/pykit3proc", "keywords": "subprocess,popen", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "pykit3proc", "package_url": "https://pypi.org/project/pykit3proc/", "platform": "", "project_url": "https://pypi.org/project/pykit3proc/", "project_urls": {"Homepage": "https://github.com/drmingdrmer/pykit3proc"}, "release_url": "https://pypi.org/project/pykit3proc/0.2.0/", "requires_dist": null, "requires_python": ">=3.0", "summary": "easy to use `Popen`", "version": "0.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Table of Content</h1>\n<ul>\n<li><a href=\"#name\" rel=\"nofollow\">Name</a></li>\n<li><a href=\"#status\" rel=\"nofollow\">Status</a></li>\n<li><a href=\"#description\" rel=\"nofollow\">Description</a></li>\n<li><a href=\"#synopsis\" rel=\"nofollow\">Synopsis</a></li>\n<li><a href=\"#exceptions\" rel=\"nofollow\">Exceptions</a>\n<ul>\n<li><a href=\"#proccalledprocesserror\" rel=\"nofollow\">proc.CalledProcessError</a></li>\n<li><a href=\"#procprocerror\" rel=\"nofollow\">proc.ProcError</a></li>\n</ul>\n</li>\n<li><a href=\"#methods\" rel=\"nofollow\">Methods</a>\n<ul>\n<li><a href=\"#proccommand\" rel=\"nofollow\">proc.command</a></li>\n<li><a href=\"#proccommand_ex\" rel=\"nofollow\">proc.command_ex</a></li>\n<li><a href=\"#procshell_script\" rel=\"nofollow\">proc.shell_script</a></li>\n<li><a href=\"#procstart_process\" rel=\"nofollow\">proc.start_process</a></li>\n</ul>\n</li>\n<li><a href=\"#author\" rel=\"nofollow\">Author</a></li>\n<li><a href=\"#copyright-and-license\" rel=\"nofollow\">Copyright and License</a></li>\n</ul>\n\n<p><a href=\"https://travis-ci.com/drmingdrmer/pykit3proc\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/da6326a94623eb8a790dd59e724d0941e1dba9d9/68747470733a2f2f7472617669732d63692e636f6d2f64726d696e6764726d65722f70796b69743370726f632e7376673f6272616e63683d6d6173746572\"></a></p>\n<h1>Name</h1>\n<p>proc</p>\n<h1>Status</h1>\n<p>This library is considered production ready.</p>\n<h1>Description</h1>\n<p>Utility to create sub process.</p>\n<h1>Synopsis</h1>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pykit</span> <span class=\"kn\">import</span> <span class=\"n\">proc</span>\n\n<span class=\"c1\"># execute a shell script</span>\n\n<span class=\"n\">returncode</span><span class=\"p\">,</span> <span class=\"n\">out</span><span class=\"p\">,</span> <span class=\"n\">err</span> <span class=\"o\">=</span> <span class=\"n\">proc</span><span class=\"o\">.</span><span class=\"n\">shell_script</span><span class=\"p\">(</span><span class=\"s1\">'ls / | grep bin'</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span> <span class=\"n\">returncode</span>\n<span class=\"nb\">print</span> <span class=\"n\">out</span>\n<span class=\"c1\"># output:</span>\n<span class=\"c1\"># &gt; 0</span>\n<span class=\"c1\"># &gt; bin</span>\n<span class=\"c1\"># &gt; sbin</span>\n\n<span class=\"c1\"># Or run a command directly.</span>\n<span class=\"c1\"># Unlike the above snippet, following statement does not start an sh process.</span>\n\n<span class=\"n\">returncode</span><span class=\"p\">,</span> <span class=\"n\">out</span><span class=\"p\">,</span> <span class=\"n\">err</span> <span class=\"o\">=</span> <span class=\"n\">proc</span><span class=\"o\">.</span><span class=\"n\">command</span><span class=\"p\">(</span><span class=\"s1\">'ls'</span><span class=\"p\">,</span> <span class=\"s1\">'a*'</span><span class=\"p\">,</span> <span class=\"n\">cwd</span><span class=\"o\">=</span><span class=\"s1\">'/usr/local'</span><span class=\"p\">)</span>\n</pre>\n<pre><span class=\"c1\"># a.py</span>\n<span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n\n<span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'foo'</span><span class=\"p\">,</span> <span class=\"s1\">'w'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n    <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">argv</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># b.py</span>\n<span class=\"kn\">import</span> <span class=\"nn\">time</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pykit</span> <span class=\"kn\">import</span> <span class=\"n\">proc</span>\n\n<span class=\"n\">proc</span><span class=\"o\">.</span><span class=\"n\">start_daemon</span><span class=\"p\">(</span><span class=\"s1\">'python'</span><span class=\"p\">,</span> <span class=\"s1\">'./a.py'</span><span class=\"p\">,</span> <span class=\"s1\">'test'</span><span class=\"p\">)</span>\n<span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'foo'</span><span class=\"p\">,</span> <span class=\"s1\">'r'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span> <span class=\"nb\">repr</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">())</span>\n<span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span> <span class=\"nb\">repr</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">)</span>\n</pre>\n<h1>Exceptions</h1>\n<h2>proc.CalledProcessError</h2>\n<p><strong>syntax</strong>:\n<code>proc.CalledProcessError(returncode, out, err, cmd, arguments, options)</code></p>\n<p>It is sub class of <code>subprocess.CalledProcessError</code>.</p>\n<p>It is raised if a sub process return code is not <code>0</code>.\nBesides <code>CalledProcessError.args</code>, extended from super class <code>Exception</code>, it has 6\nother attributes.</p>\n<p><strong>attributes</strong>:</p>\n\n<ul>\n<li><code>CalledProcessError.returncode</code>:   process exit code.</li>\n<li><code>CalledProcessError.out</code>:          stdout in one string.</li>\n<li><code>CalledProcessError.err</code>:          stderr in one string.</li>\n<li><code>CalledProcessError.cmd</code>:          the command a process <code>exec()</code>.</li>\n<li><code>CalledProcessError.arguments</code>:    tuple of command arguments.</li>\n<li><code>CalledProcessError.options</code>:      other options passed to this process. Such as <code>close_fds</code>, <code>cwd</code> etc.</li>\n</ul>\n<h2>proc.ProcError</h2>\n<p>It is an alias to <code>proc.CalledProcessError</code>.</p>\n<h1>Methods</h1>\n<h2>proc.command</h2>\n<p><strong>syntax</strong>:\n<code>proc.command(cmd, *arguments, **options)</code></p>\n<p>Run a <code>command</code> with arguments <code>arguments</code> in a subprocess.\nIt blocks until sub process exit.</p>\n<p><strong>arguments</strong>:</p>\n<ul>\n<li>\n<p><code>cmd</code>:\nThe path of executable to run.</p>\n</li>\n<li>\n<p><code>arguments</code>:\nis tuple or list of arguments passed to <code>cmd</code>.</p>\n</li>\n<li>\n<p><code>options</code>:\nis a dictionary of additional options, which are same as <code>subprocess.Popen</code>.\nBut with some different default value for easy use:</p>\n<ul>\n<li>\n<p><code>encoding</code>: by default is the system default encoding.</p>\n</li>\n<li>\n<p><code>env</code>: by default inherit from parent process.</p>\n</li>\n</ul>\n<p>It also accept the following additional options:</p>\n<ul>\n<li>\n<p><code>check=False</code>: if <code>True</code>, raise <code>CalledProcessError</code> if returncode is not 0.\nBy default it is <code>False</code>.</p>\n</li>\n<li>\n<p><code>capture=True</code>: whether to capture stdin, stdout and stderr.\nOtherwise inherit these fd from current process.</p>\n</li>\n<li>\n<p><code>inherit_env=True</code>: whether to inherit evironment vars from current process.</p>\n</li>\n<li>\n<p><code>input=None</code>: input to send to stdin, if it is not None.</p>\n</li>\n<li>\n<p><code>timeout=None</code>: seconds to wait for sub process to exit.\nBy default it is None, for waiting for ever.</p>\n</li>\n<li>\n<p><code>tty=False</code>: whether to create a speudo tty to run sub process so that\nthe sub process believes it is in a tty(just like controlled by a\nhuman).</p>\n</li>\n</ul>\n</li>\n</ul>\n<p><strong>return</strong>:\na 3 element tuple that contains:</p>\n<ul>\n<li><code>returncode</code>:   sub process exit code in <code>int</code>.</li>\n<li><code>out</code>:  sub process stdout in a single string.</li>\n<li><code>err</code>:  sub process stderr in a single string.</li>\n</ul>\n<h2>proc.command_ex</h2>\n<p><strong>syntax</strong>:\n<code>proc.command_ex(cmd, *arguments, **options)</code></p>\n<p>It is the same as <code>proc.command</code> except that if sub process exit code is not\n0, it raises exception <code>proc.CalledProcessError</code>.</p>\n<p>See <code>proc.CalledProcessError</code>.</p>\n<p><strong>return</strong>:\na 3 element tuple of <code>returncode</code>, <code>out</code> and <code>err</code>, or raise exception\n<code>proc.CalledProcessError</code>.</p>\n<h2>proc.shell_script</h2>\n<p><strong>syntax</strong>:\n<code>proc.shell_script(script_str, **options)</code></p>\n<p>It is just a shortcut of:</p>\n<pre><code>options['stdin'] = script_str\nreturn command('sh', **options)\n</code></pre>\n<h2>proc.start_process</h2>\n<p><strong>syntax</strong>:\n<code>proc.start_process(cmd, target, env, *args)</code></p>\n<p>Create a child process and replace it with <code>cmd</code>.\nBesides <code>stdin</code>, <code>stdout</code> and <code>stderr</code>, all file\ndescriptors from parent process will be closed in\nthe child process. The parent process waits for\nthe child process until it is completed.</p>\n<p><strong>arguments</strong>:</p>\n<ul>\n<li>\n<p><code>cmd</code>:\nThe path of executable to run.\nSuch as <code>sh</code>, <code>bash</code>, <code>python</code>.</p>\n</li>\n<li>\n<p><code>target</code>:\nThe path of the script.</p>\n</li>\n<li>\n<p><code>env</code>:\nIt is a dictionary to pass environment variables\nto the child process.</p>\n</li>\n<li>\n<p><code>*args</code>:\nType is <code>tuple</code> or <code>list</code>.\nThe arguments passed to the script.\nType of every element must be <code>str</code>.</p>\n</li>\n</ul>\n<p><strong>return</strong>:\nnothing</p>\n<h1>Author</h1>\n<p>Zhang Yanpo (\u5f20\u708e\u6cfc) <a href=\"mailto:drdr.xp@gmail.com\">drdr.xp@gmail.com</a></p>\n<h1>Copyright and License</h1>\n<p>The MIT License (MIT)</p>\n<p>Copyright (c) 2015 Zhang Yanpo (\u5f20\u708e\u6cfc) <a href=\"mailto:drdr.xp@gmail.com\">drdr.xp@gmail.com</a></p>\n\n          </div>"}, "last_serial": 6748560, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "4e05d2f2a850131b797e1266b12244a5", "sha256": "bc3931f9f9898c1dd4f992d546ca45586150b191ff877a54bfbc90d0f202235f"}, "downloads": -1, "filename": "pykit3proc-0.1.0.tar.gz", "has_sig": false, "md5_digest": "4e05d2f2a850131b797e1266b12244a5", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.0", "size": 4737, "upload_time": "2020-03-03T07:36:37", "upload_time_iso_8601": "2020-03-03T07:36:37.598079Z", "url": "https://files.pythonhosted.org/packages/73/6b/7bfe86675a90139f697899cd864ed74c31940b06df445d2e879466ec943d/pykit3proc-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "2caad79fb0e002cad4a65df8c190261f", "sha256": "97ef8b52d4fd71d00bd54f760d9b0f34ba916623802d54b1b3148a193ae6c3d9"}, "downloads": -1, "filename": "pykit3proc-0.1.1.tar.gz", "has_sig": false, "md5_digest": "2caad79fb0e002cad4a65df8c190261f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.0", "size": 4788, "upload_time": "2020-03-03T07:51:24", "upload_time_iso_8601": "2020-03-03T07:51:24.101193Z", "url": "https://files.pythonhosted.org/packages/69/c5/ba89ae6669aba4ff1291d6101d88ccf49851d5df1fd2ad37848acdade8f1/pykit3proc-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "a216d561823da56be8c986feef2570f2", "sha256": "48659abb19d0ac8cc7055548847ecd83681643bc8f837334a223cd8ee76bc101"}, "downloads": -1, "filename": "pykit3proc-0.1.2.tar.gz", "has_sig": false, "md5_digest": "a216d561823da56be8c986feef2570f2", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.0", "size": 4783, "upload_time": "2020-03-04T05:04:24", "upload_time_iso_8601": "2020-03-04T05:04:24.815884Z", "url": "https://files.pythonhosted.org/packages/fa/00/6001fbce615bb7a14a8da49bf740eb13e0f1138f86b3c74b1b728baf68cf/pykit3proc-0.1.2.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "bc1a504640a1f4ac985fd85337db01b2", "sha256": "1a35d67c1e61869e45d91996be07960e15be08d421b89de296cf2c1f41b3e7b7"}, "downloads": -1, "filename": "pykit3proc-0.2.0.tar.gz", "has_sig": false, "md5_digest": "bc1a504640a1f4ac985fd85337db01b2", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.0", "size": 6013, "upload_time": "2020-03-04T15:31:19", "upload_time_iso_8601": "2020-03-04T15:31:19.003658Z", "url": "https://files.pythonhosted.org/packages/12/91/a6dd0bbb25c3a4df338c46d0243f31b717106308a792a50c4175d1a7b221/pykit3proc-0.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "bc1a504640a1f4ac985fd85337db01b2", "sha256": "1a35d67c1e61869e45d91996be07960e15be08d421b89de296cf2c1f41b3e7b7"}, "downloads": -1, "filename": "pykit3proc-0.2.0.tar.gz", "has_sig": false, "md5_digest": "bc1a504640a1f4ac985fd85337db01b2", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.0", "size": 6013, "upload_time": "2020-03-04T15:31:19", "upload_time_iso_8601": "2020-03-04T15:31:19.003658Z", "url": "https://files.pythonhosted.org/packages/12/91/a6dd0bbb25c3a4df338c46d0243f31b717106308a792a50c4175d1a7b221/pykit3proc-0.2.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:03:31 2020"}