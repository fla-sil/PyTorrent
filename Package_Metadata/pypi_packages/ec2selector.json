{"info": {"author": "RED Interactive Agency", "author_email": "geeks@ff0000.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Console", "Environment :: Web Environment", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Internet :: WWW/HTTP", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: Utilities"], "description": "ec2selector is a tool to select an EC2 AMI (Amazon Machine Image) from those \navailable on Amazon.\nThere are three basic ways in which you can use this tool.\n\n# Selecting an image knowing its ID\n\nIf you already know the image ID, you can use ec2selector to make sure that \nsuch an instance is still available on Amazon for a given region, e.g.:\n\n    from ec2selector import EC2Selector\n    EC2Selector().select(region_id='us-east-1', image_id='ami-ed16f984')\n\nwill return `Image:ami-ed16f984` if such an image exists on US East 1.\n\n# Selecting an image specifying a set of properties\n\nIf you don't know the image ID, you can specify a set of properties to match \none of the images available on Amazon. The properties you can filter on are:\n\n* name\n* owner_id\n* virtualization_type\n* image_type\n* architecture\n\nYou can also use the properties followed by '_contains' to specify a partial \nmatch. For instance, the following commands will return an AMI in US East,\nowned by the user 'alestic' with a 'machine' image at 64bit, and whose name \nincludes the string 'ubuntu-10':\n\n    from ec2selector import EC2Selector\n    EC2Selector().select(region_id='us-east-1', filters={\n        'name_contains': 'ubuntu-10', \n        'owner_id':'063491364108',     # corresponds to 'alestic'\n        'image_type': 'machine', \n        'virtualization_type':'paravirtual',\n        'architecture': 'x86_64', \n    })\n\n# Selecting an image with an interactive prompt\n\nFinally, if you do not specify enough filters to get exactly *one* image,\nyou will get an interactive shell to add more filters or pick one of the\navailable images. For instance, this is a prompt session:\n\n    >>> from ec2selector import EC2Selector\n    >>> EC2Selector().select()\n    \n    5 regions available\n    Please pick one of the available options:\n     [0] eu-west-1\n     [1] us-east-1\n     [2] ap-northeast-1\n     [3] us-west-1\n     [4] ap-southeast-1\n    \n    > 0\n    Loading list of available EC2 images for eu-west-1 with filters: None, might take a while...\n    1717 images available.\n    Please pick one of the available options:\n     [0] name\n     [1] owner_id\n     [2] architecture\n     [3] type\n     [4] virtualization_type\n     \n     > 2\n     Please pick one of the available options:\n      [0] x86_64\n      [1] i386\n\n     > 0\n     577 images available.\n     Please pick one of the available options:\n      [0] name\n      [1] owner_id\n      [2] architecture\n      [3] type\n      [4] virtualization_type\n\n     > 3\n     Please pick one of the available options:\n      [0] machine\n      [1] kernel\n      [2] ramdisk\n\n     > 0\n     519 images available.\n     Please pick one of the available options:\n      [0] name\n      [1] owner_id\n      [2] architecture\n      [3] type\n      [4] virtualization_type\n\n     > 4\n     Please pick one of the available options:\n      [0] hvm\n      [1] paravirtual\n\n     > 1\n     386 images available.\n     Please pick one of the available options:\n      [0] name\n      [1] owner_id\n      [2] architecture\n      [3] type\n      [4] virtualization_type\n\n     > 0\n     Please pick one of the available options:\n      [0] Ubuntu 10.10 64-bit Server Python Erlang Java\n      [1] RightImage_Ubuntu_8.04_x64_v5.5.9.1_EBS\n      ...\n      [383] ubuntu-9.10-karmic-server-amd64-20100121\n      [384] xarch-core-image\n      [385] radiant-0.9.1_64_0.2_ami-75d4e101\n\n     > 385\n     Image selected: radiant-0.9.1_64_0.2_ami-75d4e101\n     Image:ami-033d0977\n     \n# Requirements\n\nIn order to use `ec2selector` you need login credentials to Amazon EC2.\nYou can either pass these credentials to EC2Selector, e.g.:\n\n    from ec2selector import EC2Selector\n    EC2Selector().select(access_key='AKIA...', secret_key='xWD3...')\n\nor you can set them in environment variables, e.g.:\n\n    import os\n    os.environ['AWS_ACCESS_KEY_ID'] = 'AKIA...'\n    os.environ['AWS_SECRET_ACCESS_KEY'] = 'xWD3...'\n\nIf you don't specify them, the interactive prompt will ask for them.\n\n# Motivation\n\n`ec2selector` is based on [boto](https://github.com/boto/boto), a great Python \nlibrary to interact with Amazon EC2 instances. The only way to select an AMI \nwith boto is by specifying its image ID. `ec2selector` expands this behavior by\nletting you pick an image based on its attributes, not on its ID.\n\n# Installing\n\n    pip install ec2selector\n\n# Contributing\n\n1. fork and clone the project\n2. install the dependencies above\n3. run the tests with `python tests.py`\n4. hack at will\n5. commit and push\n6. send a pull request\n\n# License\n\nSee LICENSE.txt", "description_content_type": null, "docs_url": null, "download_url": "https://github.com/ff0000/ec2selector", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ff0000/ec2selector", "keywords": "amazon,ec2,ami,cloud,boto,red", "license": "MIT license", "maintainer": null, "maintainer_email": null, "name": "ec2selector", "package_url": "https://pypi.org/project/ec2selector/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/ec2selector/", "project_urls": {"Download": "https://github.com/ff0000/ec2selector", "Homepage": "https://github.com/ff0000/ec2selector"}, "release_url": "https://pypi.org/project/ec2selector/1.0.0/", "requires_dist": null, "requires_python": null, "summary": "Interactive prompt to select an AMI (Amazon Machine Image) from Amazon EC2", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            ec2selector is a tool to select an EC2 AMI (Amazon Machine Image) from those <br>available on Amazon.<br>There are three basic ways in which you can use this tool.<br><br># Selecting an image knowing its ID<br><br>If you already know the image ID, you can use ec2selector to make sure that <br>such an instance is still available on Amazon for a given region, e.g.:<br><br>    from ec2selector import EC2Selector<br>    EC2Selector().select(region_id='us-east-1', image_id='ami-ed16f984')<br><br>will return `Image:ami-ed16f984` if such an image exists on US East 1.<br><br># Selecting an image specifying a set of properties<br><br>If you don't know the image ID, you can specify a set of properties to match <br>one of the images available on Amazon. The properties you can filter on are:<br><br>* name<br>* owner_id<br>* virtualization_type<br>* image_type<br>* architecture<br><br>You can also use the properties followed by '_contains' to specify a partial <br>match. For instance, the following commands will return an AMI in US East,<br>owned by the user 'alestic' with a 'machine' image at 64bit, and whose name <br>includes the string 'ubuntu-10':<br><br>    from ec2selector import EC2Selector<br>    EC2Selector().select(region_id='us-east-1', filters={<br>        'name_contains': 'ubuntu-10', <br>        'owner_id':'063491364108',     # corresponds to 'alestic'<br>        'image_type': 'machine', <br>        'virtualization_type':'paravirtual',<br>        'architecture': 'x86_64', <br>    })<br><br># Selecting an image with an interactive prompt<br><br>Finally, if you do not specify enough filters to get exactly *one* image,<br>you will get an interactive shell to add more filters or pick one of the<br>available images. For instance, this is a prompt session:<br><br>    &gt;&gt;&gt; from ec2selector import EC2Selector<br>    &gt;&gt;&gt; EC2Selector().select()<br>    <br>    5 regions available<br>    Please pick one of the available options:<br>     [0] eu-west-1<br>     [1] us-east-1<br>     [2] ap-northeast-1<br>     [3] us-west-1<br>     [4] ap-southeast-1<br>    <br>    &gt; 0<br>    Loading list of available EC2 images for eu-west-1 with filters: None, might take a while...<br>    1717 images available.<br>    Please pick one of the available options:<br>     [0] name<br>     [1] owner_id<br>     [2] architecture<br>     [3] type<br>     [4] virtualization_type<br>     <br>     &gt; 2<br>     Please pick one of the available options:<br>      [0] x86_64<br>      [1] i386<br><br>     &gt; 0<br>     577 images available.<br>     Please pick one of the available options:<br>      [0] name<br>      [1] owner_id<br>      [2] architecture<br>      [3] type<br>      [4] virtualization_type<br><br>     &gt; 3<br>     Please pick one of the available options:<br>      [0] machine<br>      [1] kernel<br>      [2] ramdisk<br><br>     &gt; 0<br>     519 images available.<br>     Please pick one of the available options:<br>      [0] name<br>      [1] owner_id<br>      [2] architecture<br>      [3] type<br>      [4] virtualization_type<br><br>     &gt; 4<br>     Please pick one of the available options:<br>      [0] hvm<br>      [1] paravirtual<br><br>     &gt; 1<br>     386 images available.<br>     Please pick one of the available options:<br>      [0] name<br>      [1] owner_id<br>      [2] architecture<br>      [3] type<br>      [4] virtualization_type<br><br>     &gt; 0<br>     Please pick one of the available options:<br>      [0] Ubuntu 10.10 64-bit Server Python Erlang Java<br>      [1] RightImage_Ubuntu_8.04_x64_v5.5.9.1_EBS<br>      ...<br>      [383] ubuntu-9.10-karmic-server-amd64-20100121<br>      [384] xarch-core-image<br>      [385] radiant-0.9.1_64_0.2_ami-75d4e101<br><br>     &gt; 385<br>     Image selected: radiant-0.9.1_64_0.2_ami-75d4e101<br>     Image:ami-033d0977<br>     <br># Requirements<br><br>In order to use `ec2selector` you need login credentials to Amazon EC2.<br>You can either pass these credentials to EC2Selector, e.g.:<br><br>    from ec2selector import EC2Selector<br>    EC2Selector().select(access_key='AKIA...', secret_key='xWD3...')<br><br>or you can set them in environment variables, e.g.:<br><br>    import os<br>    os.environ['AWS_ACCESS_KEY_ID'] = 'AKIA...'<br>    os.environ['AWS_SECRET_ACCESS_KEY'] = 'xWD3...'<br><br>If you don't specify them, the interactive prompt will ask for them.<br><br># Motivation<br><br>`ec2selector` is based on [boto](https://github.com/boto/boto), a great Python <br>library to interact with Amazon EC2 instances. The only way to select an AMI <br>with boto is by specifying its image ID. `ec2selector` expands this behavior by<br>letting you pick an image based on its attributes, not on its ID.<br><br># Installing<br><br>    pip install ec2selector<br><br># Contributing<br><br>1. fork and clone the project<br>2. install the dependencies above<br>3. run the tests with `python tests.py`<br>4. hack at will<br>5. commit and push<br>6. send a pull request<br><br># License<br><br>See LICENSE.txt\n          </div>"}, "last_serial": 791534, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "13af92901dd61695950e733ec5dc4469", "sha256": "bb5bffcdac66851c8afd4e2d0d35dec126a9271dc62ab539d4ee642905bb8a7f"}, "downloads": -1, "filename": "ec2selector-0.0.1.tar.gz", "has_sig": false, "md5_digest": "13af92901dd61695950e733ec5dc4469", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6677, "upload_time": "2011-04-22T23:29:29", "upload_time_iso_8601": "2011-04-22T23:29:29.222811Z", "url": "https://files.pythonhosted.org/packages/c9/e2/5088c2fac589b191d0632fdee00692831d6b7530e6ec244b5bfa6a98c644/ec2selector-0.0.1.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "2403b7d2f83bcffe1b652589b9dce341", "sha256": "d3b54e7ea5d4357ba0e71ea6ba7d28b538854cef4fc08799afe272ae154c6b7a"}, "downloads": -1, "filename": "ec2selector-1.0.0.tar.gz", "has_sig": false, "md5_digest": "2403b7d2f83bcffe1b652589b9dce341", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6681, "upload_time": "2011-04-22T23:33:48", "upload_time_iso_8601": "2011-04-22T23:33:48.350547Z", "url": "https://files.pythonhosted.org/packages/bd/e5/15bc08e6db3572d5ec2267c3642f5b500333dc3c011bf5a5db148f927584/ec2selector-1.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "2403b7d2f83bcffe1b652589b9dce341", "sha256": "d3b54e7ea5d4357ba0e71ea6ba7d28b538854cef4fc08799afe272ae154c6b7a"}, "downloads": -1, "filename": "ec2selector-1.0.0.tar.gz", "has_sig": false, "md5_digest": "2403b7d2f83bcffe1b652589b9dce341", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6681, "upload_time": "2011-04-22T23:33:48", "upload_time_iso_8601": "2011-04-22T23:33:48.350547Z", "url": "https://files.pythonhosted.org/packages/bd/e5/15bc08e6db3572d5ec2267c3642f5b500333dc3c011bf5a5db148f927584/ec2selector-1.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:48:05 2020"}