{"info": {"author": "Ben Davis", "author_email": "bendavis78@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "=================\nDjango FormHelper\n=================\n\nDjango FormHelper is a collection of templates and templatetags to ease the \npain in building out web forms. It does this by breaking the form down into\nseparate re-usable and customizable components. This allows you to only \ncustomize the parts you want, and let the rest happen automatically.\n\n\nUsage\n=============\nAfter installing django-formhelper, add ``formhelper`` to your ``INSTALLED_APPS`` in your ``settings.py``.\n\nIn your template, you need to load ``formhelper``::\n\n    ...\n    {% load formhelper %}\n    ...\n\n\nTemplate Tags\n=============\n\n----------\nform_field\n----------\nRender out a single form field. Uses the template ``formhelper/includes/field.html``.  Example usage::\n\n    {% form_field contact_form first_name %}\n \nIf your form is in your view's context as the variable \"form\", you can omit the first argument::\n\n    {% form_field first_name %}\n\nOtherwise, you can use the \"with\" templatetag::\n\n    {% with my_form as form %}\n    ...\n    {% form_field first_name %}\n    ...\n    {% endwith %}\n\n\n--------\nform_row\n--------\nLike form_field, but renders out multiple fields.  Uses the template ``formhelper/includes/form_row.html``. Example usage::\n\n    {% form_row first_name middle_name last_name %}\n\n\n----------\nerror_list\n----------\nRender out the form error list as an unordered list.  Uses the template ``formhelper/includes/error_list.html``  Example usage::\n\n    {% error_list %}\n \nYou may also render out only non-field errors or only field-specific errors::\n\n    {% error_list non_field %}\n    ... or ...\n    {% error_list field %}\n \n-----------\nclass_names\n-----------\nRenders a list of useful class names for a field that includes the field name, the widget type, whether or not the field is requried, and whether or not the field has an error.\n\nFor example, if your field was a textinput named \"first_name\" and it was required::\n    \n    <div class=\"{% field|class_names %}\">\n\nwould result in::\n\n    <div class=\"first_name text-input required\">\n\nif the field has an error::\n\n    <div class=\"first_name text-input required error\">\n\n\n\nFormsets\n=========\n\nFor easy formset support, complete with javascript (similar to django-admin), simply include the formset template::\n\n    {% include \"formhelper/includes/formset.html\" %}\n\nThis assumes that your formset is in a context variable called \"formset\".  If not, you can use the \"with\" tag as described above.\n\n\nCustomizing\n===========\nYou may override any template within your own app's template directory. Just make sure your app comes before the formhelper app in the ``INSTALLED_APPS`` setting. \n\nThe following is a list of templates available:\n\n``formhelper/includes/form.html``\n\n``formhelper/includes/form_row.html``\n\n``formhelper/includes/field.html``\n\n``formhelper/includes/errorlist.html``\n\n``formhelper/includes/errorlist.html``\n", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/bendavis78", "keywords": "django forms", "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "django-formhelper", "package_url": "https://pypi.org/project/django-formhelper/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/django-formhelper/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://github.com/bendavis78"}, "release_url": "https://pypi.org/project/django-formhelper/0.2/", "requires_dist": null, "requires_python": null, "summary": "Django FormHelper is a collection of templates and templatetags to ease the pain in building out web forms", "version": "0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Django FormHelper is a collection of templates and templatetags to ease the\npain in building out web forms. It does this by breaking the form down into\nseparate re-usable and customizable components. This allows you to only\ncustomize the parts you want, and let the rest happen automatically.</p>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>After installing django-formhelper, add <tt>formhelper</tt> to your <tt>INSTALLED_APPS</tt> in your <tt>settings.py</tt>.</p>\n<p>In your template, you need to load <tt>formhelper</tt>:</p>\n<pre>...\n{% load formhelper %}\n...\n</pre>\n</div>\n<div id=\"template-tags\">\n<h2>Template Tags</h2>\n<div id=\"form-field\">\n<h3>form_field</h3>\n<p>Render out a single form field. Uses the template <tt>formhelper/includes/field.html</tt>.  Example usage:</p>\n<pre>{% form_field contact_form first_name %}\n</pre>\n<p>If your form is in your view\u2019s context as the variable \u201cform\u201d, you can omit the first argument:</p>\n<pre>{% form_field first_name %}\n</pre>\n<p>Otherwise, you can use the \u201cwith\u201d templatetag:</p>\n<pre>{% with my_form as form %}\n...\n{% form_field first_name %}\n...\n{% endwith %}\n</pre>\n</div>\n<div id=\"form-row\">\n<h3>form_row</h3>\n<p>Like form_field, but renders out multiple fields.  Uses the template <tt>formhelper/includes/form_row.html</tt>. Example usage:</p>\n<pre>{% form_row first_name middle_name last_name %}\n</pre>\n</div>\n<div id=\"error-list\">\n<h3>error_list</h3>\n<p>Render out the form error list as an unordered list.  Uses the template <tt>formhelper/includes/error_list.html</tt>  Example usage:</p>\n<pre>{% error_list %}\n</pre>\n<p>You may also render out only non-field errors or only field-specific errors:</p>\n<pre>{% error_list non_field %}\n... or ...\n{% error_list field %}\n</pre>\n</div>\n<div id=\"class-names\">\n<h3>class_names</h3>\n<p>Renders a list of useful class names for a field that includes the field name, the widget type, whether or not the field is requried, and whether or not the field has an error.</p>\n<p>For example, if your field was a textinput named \u201cfirst_name\u201d and it was required:</p>\n<pre>&lt;div class=\"{% field|class_names %}\"&gt;\n</pre>\n<p>would result in:</p>\n<pre>&lt;div class=\"first_name text-input required\"&gt;\n</pre>\n<p>if the field has an error:</p>\n<pre>&lt;div class=\"first_name text-input required error\"&gt;\n</pre>\n</div>\n</div>\n<div id=\"formsets\">\n<h2>Formsets</h2>\n<p>For easy formset support, complete with javascript (similar to django-admin), simply include the formset template:</p>\n<pre>{% include \"formhelper/includes/formset.html\" %}\n</pre>\n<p>This assumes that your formset is in a context variable called \u201cformset\u201d.  If not, you can use the \u201cwith\u201d tag as described above.</p>\n</div>\n<div id=\"customizing\">\n<h2>Customizing</h2>\n<p>You may override any template within your own app\u2019s template directory. Just make sure your app comes before the formhelper app in the <tt>INSTALLED_APPS</tt> setting.</p>\n<p>The following is a list of templates available:</p>\n<p><tt>formhelper/includes/form.html</tt></p>\n<p><tt>formhelper/includes/form_row.html</tt></p>\n<p><tt>formhelper/includes/field.html</tt></p>\n<p><tt>formhelper/includes/errorlist.html</tt></p>\n<p><tt>formhelper/includes/errorlist.html</tt></p>\n</div>\n\n          </div>"}, "last_serial": 1391248, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "20bf78306239bcfc1e9c5e0b4dbce1c4", "sha256": "9763cc69fa91a126e8974ec71264fbfd53fa8192f0493ce13c6d1b6b8eb97d71"}, "downloads": -1, "filename": "django-formhelper-0.1.tar.gz", "has_sig": false, "md5_digest": "20bf78306239bcfc1e9c5e0b4dbce1c4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8038, "upload_time": "2014-04-25T16:13:06", "upload_time_iso_8601": "2014-04-25T16:13:06.855510Z", "url": "https://files.pythonhosted.org/packages/7c/e0/647bbe46cfaeecb54ab7043725f888879e6a51d23d08a57e9eab64ecb72b/django-formhelper-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "219be58a7c4c0e043e08f7c102650102", "sha256": "0bbac7a525386aef206dacd33cc913af6fe239d2d68e723bc25fa790d8ad4d84"}, "downloads": -1, "filename": "django-formhelper-0.2.tar.gz", "has_sig": false, "md5_digest": "219be58a7c4c0e043e08f7c102650102", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9582, "upload_time": "2015-01-21T23:51:46", "upload_time_iso_8601": "2015-01-21T23:51:46.352614Z", "url": "https://files.pythonhosted.org/packages/30/d2/8b95db07a8afd528d95f03e660178c529eb6a53ea13e434ddfc41b22f862/django-formhelper-0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "219be58a7c4c0e043e08f7c102650102", "sha256": "0bbac7a525386aef206dacd33cc913af6fe239d2d68e723bc25fa790d8ad4d84"}, "downloads": -1, "filename": "django-formhelper-0.2.tar.gz", "has_sig": false, "md5_digest": "219be58a7c4c0e043e08f7c102650102", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9582, "upload_time": "2015-01-21T23:51:46", "upload_time_iso_8601": "2015-01-21T23:51:46.352614Z", "url": "https://files.pythonhosted.org/packages/30/d2/8b95db07a8afd528d95f03e660178c529eb6a53ea13e434ddfc41b22f862/django-formhelper-0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:36:02 2020"}