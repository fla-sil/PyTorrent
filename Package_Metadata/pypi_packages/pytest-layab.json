{"info": {"author": "Colin Bounouar", "author_email": "colin.bounouar.dev@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Software Development :: Build Tools"], "description": "<h2 align=\"center\">PyTest fixtures and assertions functions for layab</h2>\n\n<p align=\"center\">\n<a href=\"https://pypi.org/project/pytest-layab/\"><img alt=\"pypi version\" src=\"https://img.shields.io/pypi/v/pytest-layab\"></a>\n<a href=\"https://travis-ci.org/Colin-b/pytest_layab\"><img alt=\"Build status\" src=\"https://api.travis-ci.org/Colin-b/pytest_layab.svg?branch=develop\"></a>\n<a href=\"https://travis-ci.org/Colin-b/pytest_layab\"><img alt=\"Coverage\" src=\"https://img.shields.io/badge/coverage-100%25-brightgreen\"></a>\n<a href=\"https://github.com/psf/black\"><img alt=\"Code style: black\" src=\"https://img.shields.io/badge/code%20style-black-000000.svg\"></a>\n<a href=\"https://travis-ci.org/Colin-b/pytest_layab\"><img alt=\"Number of tests\" src=\"https://img.shields.io/badge/tests-18 passed-blue\"></a>\n<a href=\"https://pypi.org/project/pytest-layab/\"><img alt=\"Number of downloads\" src=\"https://img.shields.io/pypi/dm/pytest-layab\"></a>\n</p>\n\nProvide helper and mocks to ease test cases writing.\n\n## Service testing\n\nYou can have access to several REST API assertion functions\n\nIf you are using pytest you can import the following fixtures:\n * test_module_name (providing test module name, default to \"test\")\n * service_module_name (providing service module name, default to the folder containing server.py)\n * service_module (providing server, retrieved thanks to the service module name)\n * async_service_module (providing asynchronous_server)\n * app (providing flask app, default to application within service_module)\n\n### Sending a GET request\n\n```python\nfrom pytest_layab import *\n\n\ndef test_get(client):\n    response = client.get('/my_endpoint')\n```\n\n### Posting JSON\n\n```python\nfrom pytest_layab import *\n\n\ndef test_json_post(client):\n    response = post_json(client, '/my_endpoint', {\n        'my_key': 'my_value',\n    })\n```\n\n### Posting file\n\n```python\nfrom pytest_layab import *\n\n\ndef test_file_post(client):\n    response = post_file(client, '/my_endpoint', 'file_name', 'file/path')\n```\n\n### Posting non JSON\n\n```python\nfrom pytest_layab import *\n\n\ndef test_post(client):\n    response = client.post('/my_endpoint', 'data to be sent')\n```\n\n### Putting JSON\n\n```python\nfrom pytest_layab import *\n\n\ndef test_json_put(client):\n    response = put_json(client, '/my_endpoint', {\n        'my_key': 'my_value',\n    })\n```\n\n### Putting non JSON\n\n```python\nfrom pytest_layab import *\n\n\ndef test_put(client):\n    response = client.put('/my_endpoint', 'data to be sent')\n```\n\n### Sending a DELETE request\n\n```python\nfrom pytest_layab import *\n\n\ndef test_delete(client):\n    response = client.delete('/my_endpoint')\n```\n\n### Checking response code\n\n```python\nfrom pytest_layab import *\n\n\ndef test_200_ok(client):\n    response = None\n    assert response.status_code == 200\n\ndef test_201_created(client):\n    response = None\n    assert_201(response, '/my_new_location')\n\ndef test_202_accepted(client):\n    response = None\n    assert_202_regex(response, '/my_new_location/.*')\n\ndef test_204_no_content(client):\n    response = None\n    assert_204(response)\n\ndef test_303_see_other(client):\n    response = None\n    assert_303_regex(response, '/my_new_location/.*')\n```\n\n### Checking response JSON\n\n```python\nfrom pytest_layab import *\n\n\ndef test_json_exact_content(client):\n    response = None\n    assert response.json == {'expected_key': 'Expected 13 value'}\n```\n\n### Checking response Text\n\n```python\nimport re\n\nfrom pytest_layab import *\n\n\ndef test_text_exact_content(client):\n    response = None\n    assert response.get_data(as_text=True) == 'Expected 13 value'\n\ndef test_text_with_regular_expression(client):\n    response = None\n    assert re.match('Expected \\d\\d value', response.get_data(as_text=True))\n\ndef test_text_with_content_in_a_file(client):\n    response = None\n    assert_file(response, 'path/to/file/with/expected/content')\n```\n\n### Checking response bytes\n\n```python\nfrom pytest_layab import *\n\n\ndef test_bytes_with_content_in_a_file(client):\n    response = None\n    assert_file(response, 'path/to/file/with/expected/content')\n```\n\n## Basic Assertions\n\n```python\nfrom pytest_layab import *\n\n\ndef test_without_list_order():\n    assert_items_equal({'expected_key': ['First value', 'Second value']}, {'expected_key': ['Second value', 'First value']})\n```\n\n## Mocks\n\n### Date-Time\n\nYou can mock current date-time.\n\n```python\nimport module_where_datetime_is_used\n\n\nclass DateTimeMock:\n    @staticmethod\n    def utcnow():\n        class UTCDateTimeMock:\n            @staticmethod\n            def isoformat():\n                return \"2018-10-11T15:05:05.663979\"\n        return UTCDateTimeMock\n\n\ndef test_date_mock(monkeypatch):\n    monkeypatch.setattr(module_where_datetime_is_used, \"datetime\", DateTimeMock)\n```\n\n## How to install\n1. [python 3.6+](https://www.python.org/downloads/) must be installed\n2. Use pip to install module:\n```sh\npython -m pip install pytest_layab\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://pypi.org/project/pytest-layab/", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://colin-b.github.io/pytest_layab/", "keywords": "test,flask", "license": "MIT", "maintainer": "Colin Bounouar", "maintainer_email": "colin.bounouar.dev@gmail.com", "name": "pytest-layab", "package_url": "https://pypi.org/project/pytest-layab/", "platform": "Windows", "project_url": "https://pypi.org/project/pytest-layab/", "project_urls": {"Changelog": "https://github.com/Colin-b/pytest_layab/blob/master/CHANGELOG.md", "Download": "https://pypi.org/project/pytest-layab/", "GitHub": "https://github.com/Colin-b/pytest_layab", "Homepage": "https://colin-b.github.io/pytest_layab/", "Issues": "https://github.com/Colin-b/pytest_layab/issues"}, "release_url": "https://pypi.org/project/pytest-layab/1.3.0/", "requires_dist": ["pytest-flask (==0.15.*)", "pytest-cov (==2.*)"], "requires_python": ">=3.6", "summary": "Pytest fixtures for layab.", "version": "1.3.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h2>PyTest fixtures and assertions functions for layab</h2>\n<p align=\"center\">\n<a href=\"https://pypi.org/project/pytest-layab/\" rel=\"nofollow\"><img alt=\"pypi version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4e02a494ba89ded88504d9f1204c40e28d3f29f2/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f7079746573742d6c61796162\"></a>\n<a href=\"https://travis-ci.org/Colin-b/pytest_layab\" rel=\"nofollow\"><img alt=\"Build status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d2016e84f14c5e718ae79dee1e058bdb55a6e14c/68747470733a2f2f6170692e7472617669732d63692e6f72672f436f6c696e2d622f7079746573745f6c617961622e7376673f6272616e63683d646576656c6f70\"></a>\n<a href=\"https://travis-ci.org/Colin-b/pytest_layab\" rel=\"nofollow\"><img alt=\"Coverage\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0280f255d36847e3743058a68bedfb93626e993f/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f7665726167652d3130302532352d627269676874677265656e\"></a>\n<a href=\"https://github.com/psf/black\" rel=\"nofollow\"><img alt=\"Code style: black\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fbfdc7754183ecf079bc71ddeabaf88f6cbc5c00/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64652532307374796c652d626c61636b2d3030303030302e737667\"></a>\n<a href=\"https://travis-ci.org/Colin-b/pytest_layab\" rel=\"nofollow\"><img alt=\"Number of tests\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5c0b13ba96c5b6808a1d3bffba7380e880db5c0d/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f74657374732d3138207061737365642d626c7565\"></a>\n<a href=\"https://pypi.org/project/pytest-layab/\" rel=\"nofollow\"><img alt=\"Number of downloads\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d2df15fc08799f955f6fa55d72e850c3b67c92ec/68747470733a2f2f696d672e736869656c64732e696f2f707970692f646d2f7079746573742d6c61796162\"></a>\n</p>\n<p>Provide helper and mocks to ease test cases writing.</p>\n<h2>Service testing</h2>\n<p>You can have access to several REST API assertion functions</p>\n<p>If you are using pytest you can import the following fixtures:</p>\n<ul>\n<li>test_module_name (providing test module name, default to \"test\")</li>\n<li>service_module_name (providing service module name, default to the folder containing server.py)</li>\n<li>service_module (providing server, retrieved thanks to the service module name)</li>\n<li>async_service_module (providing asynchronous_server)</li>\n<li>app (providing flask app, default to application within service_module)</li>\n</ul>\n<h3>Sending a GET request</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pytest_layab</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">test_get</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"p\">):</span>\n    <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'/my_endpoint'</span><span class=\"p\">)</span>\n</pre>\n<h3>Posting JSON</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pytest_layab</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">test_json_post</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"p\">):</span>\n    <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">post_json</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"p\">,</span> <span class=\"s1\">'/my_endpoint'</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'my_key'</span><span class=\"p\">:</span> <span class=\"s1\">'my_value'</span><span class=\"p\">,</span>\n    <span class=\"p\">})</span>\n</pre>\n<h3>Posting file</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pytest_layab</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">test_file_post</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"p\">):</span>\n    <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">post_file</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"p\">,</span> <span class=\"s1\">'/my_endpoint'</span><span class=\"p\">,</span> <span class=\"s1\">'file_name'</span><span class=\"p\">,</span> <span class=\"s1\">'file/path'</span><span class=\"p\">)</span>\n</pre>\n<h3>Posting non JSON</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pytest_layab</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">test_post</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"p\">):</span>\n    <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">post</span><span class=\"p\">(</span><span class=\"s1\">'/my_endpoint'</span><span class=\"p\">,</span> <span class=\"s1\">'data to be sent'</span><span class=\"p\">)</span>\n</pre>\n<h3>Putting JSON</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pytest_layab</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">test_json_put</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"p\">):</span>\n    <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">put_json</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"p\">,</span> <span class=\"s1\">'/my_endpoint'</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'my_key'</span><span class=\"p\">:</span> <span class=\"s1\">'my_value'</span><span class=\"p\">,</span>\n    <span class=\"p\">})</span>\n</pre>\n<h3>Putting non JSON</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pytest_layab</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">test_put</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"p\">):</span>\n    <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">put</span><span class=\"p\">(</span><span class=\"s1\">'/my_endpoint'</span><span class=\"p\">,</span> <span class=\"s1\">'data to be sent'</span><span class=\"p\">)</span>\n</pre>\n<h3>Sending a DELETE request</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pytest_layab</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">test_delete</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"p\">):</span>\n    <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">(</span><span class=\"s1\">'/my_endpoint'</span><span class=\"p\">)</span>\n</pre>\n<h3>Checking response code</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pytest_layab</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">test_200_ok</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"p\">):</span>\n    <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n    <span class=\"k\">assert</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">status_code</span> <span class=\"o\">==</span> <span class=\"mi\">200</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">test_201_created</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"p\">):</span>\n    <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n    <span class=\"n\">assert_201</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"p\">,</span> <span class=\"s1\">'/my_new_location'</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">test_202_accepted</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"p\">):</span>\n    <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n    <span class=\"n\">assert_202_regex</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"p\">,</span> <span class=\"s1\">'/my_new_location/.*'</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">test_204_no_content</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"p\">):</span>\n    <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n    <span class=\"n\">assert_204</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">test_303_see_other</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"p\">):</span>\n    <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n    <span class=\"n\">assert_303_regex</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"p\">,</span> <span class=\"s1\">'/my_new_location/.*'</span><span class=\"p\">)</span>\n</pre>\n<h3>Checking response JSON</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pytest_layab</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">test_json_exact_content</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"p\">):</span>\n    <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n    <span class=\"k\">assert</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">json</span> <span class=\"o\">==</span> <span class=\"p\">{</span><span class=\"s1\">'expected_key'</span><span class=\"p\">:</span> <span class=\"s1\">'Expected 13 value'</span><span class=\"p\">}</span>\n</pre>\n<h3>Checking response Text</h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">re</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">pytest_layab</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">test_text_exact_content</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"p\">):</span>\n    <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n    <span class=\"k\">assert</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">get_data</span><span class=\"p\">(</span><span class=\"n\">as_text</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"s1\">'Expected 13 value'</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">test_text_with_regular_expression</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"p\">):</span>\n    <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n    <span class=\"k\">assert</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">match</span><span class=\"p\">(</span><span class=\"s1\">'Expected \\d\\d value'</span><span class=\"p\">,</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">get_data</span><span class=\"p\">(</span><span class=\"n\">as_text</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">))</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">test_text_with_content_in_a_file</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"p\">):</span>\n    <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n    <span class=\"n\">assert_file</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"p\">,</span> <span class=\"s1\">'path/to/file/with/expected/content'</span><span class=\"p\">)</span>\n</pre>\n<h3>Checking response bytes</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pytest_layab</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">test_bytes_with_content_in_a_file</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"p\">):</span>\n    <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n    <span class=\"n\">assert_file</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"p\">,</span> <span class=\"s1\">'path/to/file/with/expected/content'</span><span class=\"p\">)</span>\n</pre>\n<h2>Basic Assertions</h2>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pytest_layab</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">test_without_list_order</span><span class=\"p\">():</span>\n    <span class=\"n\">assert_items_equal</span><span class=\"p\">({</span><span class=\"s1\">'expected_key'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'First value'</span><span class=\"p\">,</span> <span class=\"s1\">'Second value'</span><span class=\"p\">]},</span> <span class=\"p\">{</span><span class=\"s1\">'expected_key'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'Second value'</span><span class=\"p\">,</span> <span class=\"s1\">'First value'</span><span class=\"p\">]})</span>\n</pre>\n<h2>Mocks</h2>\n<h3>Date-Time</h3>\n<p>You can mock current date-time.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">module_where_datetime_is_used</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">DateTimeMock</span><span class=\"p\">:</span>\n    <span class=\"nd\">@staticmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">utcnow</span><span class=\"p\">():</span>\n        <span class=\"k\">class</span> <span class=\"nc\">UTCDateTimeMock</span><span class=\"p\">:</span>\n            <span class=\"nd\">@staticmethod</span>\n            <span class=\"k\">def</span> <span class=\"nf\">isoformat</span><span class=\"p\">():</span>\n                <span class=\"k\">return</span> <span class=\"s2\">\"2018-10-11T15:05:05.663979\"</span>\n        <span class=\"k\">return</span> <span class=\"n\">UTCDateTimeMock</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">test_date_mock</span><span class=\"p\">(</span><span class=\"n\">monkeypatch</span><span class=\"p\">):</span>\n    <span class=\"n\">monkeypatch</span><span class=\"o\">.</span><span class=\"n\">setattr</span><span class=\"p\">(</span><span class=\"n\">module_where_datetime_is_used</span><span class=\"p\">,</span> <span class=\"s2\">\"datetime\"</span><span class=\"p\">,</span> <span class=\"n\">DateTimeMock</span><span class=\"p\">)</span>\n</pre>\n<h2>How to install</h2>\n<ol>\n<li><a href=\"https://www.python.org/downloads/\" rel=\"nofollow\">python 3.6+</a> must be installed</li>\n<li>Use pip to install module:</li>\n</ol>\n<pre>python -m pip install pytest_layab\n</pre>\n\n          </div>"}, "last_serial": 6231222, "releases": {"1.3.0": [{"comment_text": "", "digests": {"md5": "881fc5c14555913d83bbc7345a67e47e", "sha256": "02ca3a4bf20f0f615b00fabd35111a598c40e7800d78371ea7fb53febfee3039"}, "downloads": -1, "filename": "pytest_layab-1.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "881fc5c14555913d83bbc7345a67e47e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 6792, "upload_time": "2019-12-02T23:04:29", "upload_time_iso_8601": "2019-12-02T23:04:29.540213Z", "url": "https://files.pythonhosted.org/packages/70/7b/7aa6cc3145c23b66b6350c33a06d5667db36fe8069d7e6d471537ec6396a/pytest_layab-1.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "556198d33b16431c70b2b70fc5ca2c48", "sha256": "de306a55e2f30aa4e3183e05c4a4e44dab6f49bd7cb0c58b6a3c999306739238"}, "downloads": -1, "filename": "pytest_layab-1.3.0.tar.gz", "has_sig": false, "md5_digest": "556198d33b16431c70b2b70fc5ca2c48", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 5342, "upload_time": "2019-12-02T23:04:31", "upload_time_iso_8601": "2019-12-02T23:04:31.393352Z", "url": "https://files.pythonhosted.org/packages/d5/4f/057cbaf8c1c7f246551892cec8837b6dd89716a40a6061a974bb103be03e/pytest_layab-1.3.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "881fc5c14555913d83bbc7345a67e47e", "sha256": "02ca3a4bf20f0f615b00fabd35111a598c40e7800d78371ea7fb53febfee3039"}, "downloads": -1, "filename": "pytest_layab-1.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "881fc5c14555913d83bbc7345a67e47e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 6792, "upload_time": "2019-12-02T23:04:29", "upload_time_iso_8601": "2019-12-02T23:04:29.540213Z", "url": "https://files.pythonhosted.org/packages/70/7b/7aa6cc3145c23b66b6350c33a06d5667db36fe8069d7e6d471537ec6396a/pytest_layab-1.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "556198d33b16431c70b2b70fc5ca2c48", "sha256": "de306a55e2f30aa4e3183e05c4a4e44dab6f49bd7cb0c58b6a3c999306739238"}, "downloads": -1, "filename": "pytest_layab-1.3.0.tar.gz", "has_sig": false, "md5_digest": "556198d33b16431c70b2b70fc5ca2c48", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 5342, "upload_time": "2019-12-02T23:04:31", "upload_time_iso_8601": "2019-12-02T23:04:31.393352Z", "url": "https://files.pythonhosted.org/packages/d5/4f/057cbaf8c1c7f246551892cec8837b6dd89716a40a6061a974bb103be03e/pytest_layab-1.3.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:55:02 2020"}