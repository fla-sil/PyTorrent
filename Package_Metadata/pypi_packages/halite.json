{"info": {"author": "SaltStack Inc", "author_email": "info@saltstack.com", "bugtrack_url": null, "classifiers": [], "description": "======\nHalite\n======\n\n(Code-name) Halite is a Salt GUI. Status is pre-alpha. Contributions are\nvery welcome. Join us in #salt on Freenode or on the salt-users mailing\nlist.\n\nFor best results it is recommended to use Halite with the develop branch of Salt.\nHalite is, however, known to work with Salt version greater than ``Hydrogen``.\nTo install the develop branch of Salt:\n\n.. code-block:: bash\n\n  $ git clone -b develop https://github.com/saltstack/salt.git\n  $ cd salt && python setup.py install\n  $ salt-master --version\n  $ salt-master -l debug\n\nThis version of Halite is designed to work out of the box with SaltStack when\nthe PyPi package version of Halite is installed. The PyPi (PIP) version of Halite\nis a minified version tailored for this purpose. (https://pypi.python.org/pypi/halite)\nHalite makes use of the ``Bottle`` (WSGI) web framework. Servers that are tested and\nknown to work with Halite are ``paste``, ``cherrypy`` and ``gevent``.\n\nTo pip install Halite.\n\n.. code-block:: bash\n\n  $ pip install -U halite\n\nThis purpose of ths repository is to enable development of custom versions of the\nUI that could be deployed with different servers, different configurations, etc\nand also for development of future features for the Salt packaged version.\n\nFeatures\n========\n\nHighstate Consistency Check\n---------------------------\n\nHalite can poll for highstate consistency. This is similar to executing\n``salt \\* state.highstate test=True`` and checking for the results.\nPolling is turned ``OFF`` by default.\n\nTo switch polling on navigate to the preferences tab and check\n``highStateCheck.performCheck``. The poll timer can be adjusted using\n``highStateCheck.intervalSeconds`` and is set to 300 Seconds (5 minutes) by\ndefault. Once these settings are updated click ``Update`` and reload the page.\nThese options are depicted in the screenshot below.\n\n.. image:: screenshots/HighstatePollSettings.png\n\nHighstate consistency check results can be seen on the minion view. Minions\nthat have inconsistent state have a flag next to them as shown in the screenshot.\n\n.. image:: screenshots/MinionWithFlag.png\n\nThe ``Highstate`` subtab for each minion displays the state items that lack\nconsistency. All of the inconsistent items will be displayed here for easy\nvisualization. The screenshot below shows a message that might appear\nwhen highstate consistency is disturbed.\n\n.. image:: screenshots/HighstateSubtab.png\n\nThe cog icon that appears in the ``Monitor`` section can be clicked to perform\nhighstate consistency check. The on demand check only works in the\nscenario where polling is off. In the case where polling is switched on (as\ndiscussed above) the cog icon will appear to be spinning (and does not respond\nto clicks).\n\n.. image:: screenshots/HighstateCheckCog.png\n\nInstallation quickstart\n=======================\n\nThis section explains installation of the ``devlopment`` version of Halite.\nIf you are interested in installing Halite as an end user, please follow the\n`tutorial\n<http://docs.saltstack.com/topics/tutorials/halite.html>`_ instead.\n\n* Setup permissions for users who will use Halite\nFor example in master config:\n\n.. code-block:: bash\n\n  external_auth:\n    pam:\n      myusername:\n          - .*\n          - '@runner'\n          - '@wheel'\n\nHalite uses the runner ``manage.present`` to get the status of minions so runner\npermissions are required.  Currently Halite allows but does not require any\nwheel modules.\n\n* Clone the Halite repository::\n\n.. code-block:: bash\n\n  git clone https://github.com/saltstack/halite\n\n\n* Run halite/halite/server_bottle.py (use with -h option to get parameters)\n\nThe simplest approach is to run the server with it dynamically generating\nthe main web app load page (main.html) in coffescript mode, where the coffeescript\nis transpiled to javascript on the fly. In each case the appropriate server package\nmust be installed.\n\n.. code-block:: bash\n\n    $ ./server_bottle.py -d -C -l debug -s cherrypy\n\n    $ ./server_bottle.py -d -C -l debug -s paste\n\n    $ ./server_bottle.py -d -C -l debug -s gevent\n\n\n\n* Navigate html5 compliant browser to http://localhost:8080/app\n\n* Login\nThe default eauth method is 'pam'. To change go to the preferences page.\n\nDocumentation\n=============\n\nPreferences\n-----------\n\nThe navbar has a login form. Enter the eauth username and password to login to salt.\n\n.. image:: screenshots/LoggedOut.png\n\nOnce logged in, the navbar will display the username highlighted in blue and a logout button.\nTo logout click on the logout button.\n\n.. image:: screenshots/LoggedIn.png\n\n\n\nClick on the SaltStack logo to go to the preferences page\n\n.. image:: screenshots/Preferences.png\n\nOn this page one can change the eauth method to something other than 'pam' such\nas 'ldap'.\n\nCheck ``fetchGrains`` if you want grains data to be loaded when Halite loads.\nChecking ``preloadJobCache`` will fetch all previously completed, cached jobs.\n\nOnce all changes are made click ``Update`` and refresh the browser page.\n\nCommands\n----------\n\nTo navigate to the console view click on the 'console' tab.\n\n.. image:: screenshots/HomeConsole.png\n\nThis view has two sections. The ``Command`` section and the ``Monitor`` section.\nThe ``Command`` section is collapsed by default. Clicking on the downward chevron will\nexpand the ``Command`` section.\n\nThe top section of the Console view has controls for entering basic salt commands.\nThe target field will target minions with the command selected. There is ping button\nwith the bullhorn icon and the action menu has some preselected common commands.\n\nExpanded Commands\n-----------------\n\n.. image:: screenshots/CommandForm.png\n\nClick on the downward chevron button to expand the ``Command`` form with additional\nfields for entering any salt module function. To enter \"runner\" functions prepend\n\"runner.\" to the function name. For example, \"runner.manage.status\". To enter wheel\nfunctions prepend \"wheel.\" to the wheel function name. For example, \"wheel.config.values\".\nFor commands that require arguments enter them in the arguments fields. The number of argument\nfields equals the number of arguments accepted by the function.\n\nClick on the Execute button or press the Return key to execute the command.\n\nYou can choose the ``Target Format`` which will be used by the ``Target`` field to target minions.\n\nThere is a ping button with the bullhorn icon and the Macro menu has some preselected commands\nfor \"speed dial\".\n\nThere is also a history feature which appears as a book icon on the top right corner of the ``Command`` panel.\n\nChecking ``Live Doc Search`` will show the documentation related to the command being\nentered in the ``Function`` field. Un-check it to conserve screen real estate.\n\nMonitors\n---------\n\nThe bottom section of the console view has monitor view buttons. Each button will\nshow panels with the associated information.\n\n* Command Monitor\n\nShows panels, one per command that has been executed by this user on this console.\nClicking on the dropdown button will show the associated job ids that have been\nrun with this command and the  completion status via an icon.\nRed is fail, Green is success.\nClicking on the button on the panel will rerun the command.\n\n.. image:: screenshots/CommandMonitor.png\n\n* Job Monitor\n\nShows panels, one per job that has been run by any minion associated with this\nmaster. Clicking on the associated dropdown button with expand to show Result and Event data.\nSelecting the result button will show the returner and return data\nfor each minion targeted by the job.\n\n.. image:: screenshots/JobMonitor.png\n\nSelecting the Event button will show the events associated with the job.\n\n.. image:: screenshots/JobMonitorEvent.png\n\n* Minion Monitor\n\nShows panels, one per minion that have keys associated with this master. The minion\npanels have icons to show the up/down status of the minion and the grains status.\nSelecting dropdown buttons will show grains data as well as minion (not job) generated events.\n\n.. image:: screenshots/MinionMonitor.png\n\n\n\nWith the grains button selected one can see all the grains for the minion.\n\n.. image:: screenshots/MinionGrains.png\n\n\n\n\n* Event Monitor\n\nShows panels, one per event associated with this Master.\n\n.. image:: screenshots/EventMonitor.png\n\nMore details coming. TBD\n\n\nBrowser requirements\n--------------------\n\nSupport for ES5 and HTML5 is required. This means any modern browser or IE10+.\n\nServer requirements\n-------------------\n\n* The static media for this app is server-agnostic and may be served from any\n  web server at a configurable URL prefix.\n* This app uses the HTML5 history API.\n\nLibraries used\n--------------\n\nClient side web application requirements:\n\n* AngularJS framework (http://angularjs.org/)\n* Bootstrap layout CSS (http://twbs.github.io/bootstrap/)\n* AngularUI framework (http://angular-ui.github.io/)\n* Underscore JS module (http://underscorejs.org/\u200e)\n* Underscore string JS module (http://epeli.github.io/underscore.string/)\n* Font Awesome Bootstrap Icon Fonts  (http://fortawesome.github.io/Font-Awesome/)\n* CoffeeScript Python/Ruby like javascript transpiler (http://coffeescript.org/)\n* Karma Test Runner (http://karma-runner.github.io/0.8/index.html)\n* Jasmine unit test framework (http://pivotal.github.io/jasmine/)\n* Protractor E2E test framework for angular apps (https://github.com/angular/protractor)\n\nOptional dependencies:\n\n* Cherrypy web server (http://http://www.cherrypy.org/)\n* Paste web server (http://pythonpaste.org/)\n* Gevent web server(http://www.gevent.org/)\n\nFor nodejs testing:\n\n* Express javascript web server\n\n\nDeployment\n-------------\n\nThere are two approaches to deploying Halite.\n\n1) Use it from Salt.\nThe 0.17 release of salt will run halite automatically if the Halite package is\ninstalled. So for example after installing SaltStack one can install the Halite\npython package with\n\n.. code-block:: bash\n\n  $ pip install -U halite\n\nConfigure the master config for halite as follows.\n\n.. code-block:: bash\n\n  halite:\n      level: 'debug'\n      server: 'cherrypy'\n      host: '0.0.0.0'\n      port: '8080'\n      cors: False\n      tls: True\n      certpath: '/etc/pki/tls/certs/localhost.crt'\n      keypath: '/etc/pki/tls/certs/localhost.key'\n      pempath: '/etc/pki/tls/certs/localhost.pem'\n\nThe \"cherrypy\" and \"gevent\" servers require the certpath and keypath files to run tls/ssl.\nThe .crt file holds the public cert and the .key file holds the private key. Whereas\nthe \"paste\" server requires a single .pem file that contains both the cert and key.\nThis can be created simply by concatenating the .crt and .key files.\n\nIf you want to use a self signed cert you can create one using the Salt .tls module\n\n.. code-block:: bash\n\n  salt '*' tls.create_ca_signed_cert test localhost\n\nWhen using self signed certs, browsers will need approval before accepting the cert.\nIf the web application page has been cached with a non https version of the app then\nthe browser cache will have to be cleared before it will recognize and prompt to\naccept the self signed certificate.\n\nYou will also need to configure the eauth method to be used by users of the WUI.\nSee quickstart above for an example.\n\nInstall the appropriate http wsgi server selected in the master config above. In\nthis case its \"cherrypy\". The other tested servers are \"paste\" and \"gevent\". The server\nmust be multi-threaded, asynchronous, or multi-processing in order to support\nthe Server Sent Event streaming connnection used by the WUI.\n\nRestart the SaltStack Master and navigate your html5 compliant browser to\nhttps://localhost:8080/app or however you have configured your master above.\n\nIf you have problems look for \"Halite:\" in the saltstack master log output.\n\nCustomized Deployment\n====\n\nThe Halite github repository provides a skeleton framework for building your own custom\ndeployment. One can run the default bottle.py framwork form the command line thusly\n\n.. code-block:: bash\n\n  $ ./server_bottly.py -g\n  $ ./server_bottle.py -s cherrypy\n\n\nor from a python application\n\n.. code-block:: python\n\n  import halite\n\n  halite.start()\n\n\nThe full set of options is given by\n\n.. code-block:: bash\n\n  $ ./server_bottle.py -h\n  usage: server_bottle.py [-h] [-l {info,debug,critical,warning,error}]\n                        [-s SERVER] [-a HOST] [-p PORT] [-b BASE] [-x] [-t]\n                        [-c CERT] [-k KEY] [-e PEM] [-g] [-f LOAD] [-C] [-d]\n\n  Runs localhost web application wsgi service on given host address and port.\n  Default host:port is 0.0.0.0:8080. (0.0.0.0 is any interface on localhost)\n\n  optional arguments:\n    -h, --help            show this help message and exit\n    -l {info,debug,critical,warning,error}, --level {info,debug,critical,warning,error}\n                          Logging level.\n    -s SERVER, --server SERVER\n                          Web application WSGI server type.\n    -a HOST, --host HOST  Web application WSGI server ip host address.\n    -p PORT, --port PORT  Web application WSGI server ip port.\n    -b BASE, --base BASE  Base Url path prefix for client side web application.\n    -x, --cors            Enable CORS Cross Origin Resource Sharing on server.\n    -t, --tls             Use TLS/SSL (https).\n    -c CERT, --cert CERT  File path to tls/ssl cacert certificate file.\n    -k KEY, --key KEY     File path to tls/ssl private key file.\n    -e PEM, --pem PEM     File path to tls/ssl pem file with both cert and key.\n    -g, --gen             Generate web app load file. Default is 'app/main.html'\n                          or if provided the file specified by -f option.\n    -f LOAD, --load LOAD  Filepath to save generated web app load file upon -g\n                          option.\n    -C, --coffee          Upon -g option generate to load coffeescript.\n    -d, --devel           Development mode.\n\nThe http server provides two functions.\n\n1) Provide content delivery network for the base load of the web application static\ncontent such as html and javascript files.\n\n2) Provide dynamic rest api interface to salt/client/api.py module that is used by\nthe web application via ajax and SSE connections. Because SSE and CORS\n(Cross Origin Resource Sharing is not univesally supported even among HTML5 compliant\nbrowsers, a single server serves both the static content and the rest API).\nAn alternative approach would be to to use a web socket to stream the events.\nThis would not require CORS. This may bea future option for Halite.\n\nTo deploy with apache, modify server_bottle.startServer so it creates the app but\ndoes not call bottle.run on it but returns it to MOD_WSGI.\nSee (http://bottlepy.org/docs/dev/deployment.html) for other details in using bottle.py\nwith Apache and Mod_wsgi.\n\nTo do a custom deployment with some other framework like Django etc. would involve\nreplicating the endpoints from server_bottle.\n\nArchitecture\n-------------\n\nThe following diagram illustrates how the various pieces to Halite interact.\n\n.. image:: diagrams/HaliteArchitecture.png\n\nTesting\n-------\n\nTo run the karma jasmine ``unit test`` runner\n\n.. code-block:: bash\n\n  $ cd halite\n  $ karma start karma_unit.conf.js\n\nTo run the protractor ``e2e test`` runner first start up a web server. More information\nabout using protractor can be found on their website.\n\nMake sure that the end to end test is setup to login to Halite\n\n.. code-block:: bash\n  $ vim halite/test/spec-e2e/credentials.coffee\n\nIn that file change the following\n\n.. code-block:: coffeescript\n\n   login =\n       username: 'your_halite_username'\n       password: 'your_halite_password'\n\nNow you can run the tests using the following commands.\nMake sure you have the ``webdriver-manager`` started.\nMore info can be found on the `Protractor <https://github.com/angular/protractor>`_\nwebpage.\n\n.. code-block:: bash\n\n  $ cd halite\n  $ protractor protractor.conf.js\n\nTo run the ``functional`` tests make sure you have the Python ``webtest``\nand ``nose`` modules installed.\n\nEnter your credentials and the minion name in a new file called\n``halite/test/functional/config/override.conf``\n\n.. code-block:: python\n\n  [login]\n  username = your_user_name\n  password = your_password\n\n  [minions]\n  apache = minion_connected_to_this_master\n\nThe functional tests can be run via ``nose``.\n\n.. code-block:: bash\n\n  $ cd halite\n  $ nosetests\n\nYou might have to build the distribution (for development)\n\n.. code-block:: bash\n\n   $ cd halite\n   $ ./prep_dist.py\n\n\nSubtree can be fetched by running ``git subtree pull --prefix=halite/lattice lattice master --squash``\n\n.. ............................................................................\n.. _`halite`: https://github.com/saltstack/halite\n", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/saltstack/halite", "keywords": "Salt Stack client side web application,web server", "license": "Apache V2.0", "maintainer": null, "maintainer_email": null, "name": "halite", "package_url": "https://pypi.org/project/halite/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/halite/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/saltstack/halite"}, "release_url": "https://pypi.org/project/halite/0.1.17/", "requires_dist": null, "requires_python": null, "summary": "SaltStack Web UI", "version": "0.1.17", "yanked": false, "html_description": "<div class=\"project-description\">\n            ======<br>Halite<br>======<br><br>(Code-name) Halite is a Salt GUI. Status is pre-alpha. Contributions are<br>very welcome. Join us in #salt on Freenode or on the salt-users mailing<br>list.<br><br>For best results it is recommended to use Halite with the develop branch of Salt.<br>Halite is, however, known to work with Salt version greater than ``Hydrogen``.<br>To install the develop branch of Salt:<br><br>.. code-block:: bash<br><br>  $ git clone -b develop https://github.com/saltstack/salt.git<br>  $ cd salt &amp;&amp; python setup.py install<br>  $ salt-master --version<br>  $ salt-master -l debug<br><br>This version of Halite is designed to work out of the box with SaltStack when<br>the PyPi package version of Halite is installed. The PyPi (PIP) version of Halite<br>is a minified version tailored for this purpose. (https://pypi.python.org/pypi/halite)<br>Halite makes use of the ``Bottle`` (WSGI) web framework. Servers that are tested and<br>known to work with Halite are ``paste``, ``cherrypy`` and ``gevent``.<br><br>To pip install Halite.<br><br>.. code-block:: bash<br><br>  $ pip install -U halite<br><br>This purpose of ths repository is to enable development of custom versions of the<br>UI that could be deployed with different servers, different configurations, etc<br>and also for development of future features for the Salt packaged version.<br><br>Features<br>========<br><br>Highstate Consistency Check<br>---------------------------<br><br>Halite can poll for highstate consistency. This is similar to executing<br>``salt \\* state.highstate test=True`` and checking for the results.<br>Polling is turned ``OFF`` by default.<br><br>To switch polling on navigate to the preferences tab and check<br>``highStateCheck.performCheck``. The poll timer can be adjusted using<br>``highStateCheck.intervalSeconds`` and is set to 300 Seconds (5 minutes) by<br>default. Once these settings are updated click ``Update`` and reload the page.<br>These options are depicted in the screenshot below.<br><br>.. image:: screenshots/HighstatePollSettings.png<br><br>Highstate consistency check results can be seen on the minion view. Minions<br>that have inconsistent state have a flag next to them as shown in the screenshot.<br><br>.. image:: screenshots/MinionWithFlag.png<br><br>The ``Highstate`` subtab for each minion displays the state items that lack<br>consistency. All of the inconsistent items will be displayed here for easy<br>visualization. The screenshot below shows a message that might appear<br>when highstate consistency is disturbed.<br><br>.. image:: screenshots/HighstateSubtab.png<br><br>The cog icon that appears in the ``Monitor`` section can be clicked to perform<br>highstate consistency check. The on demand check only works in the<br>scenario where polling is off. In the case where polling is switched on (as<br>discussed above) the cog icon will appear to be spinning (and does not respond<br>to clicks).<br><br>.. image:: screenshots/HighstateCheckCog.png<br><br>Installation quickstart<br>=======================<br><br>This section explains installation of the ``devlopment`` version of Halite.<br>If you are interested in installing Halite as an end user, please follow the<br>`tutorial<br>&lt;http://docs.saltstack.com/topics/tutorials/halite.html&gt;`_ instead.<br><br>* Setup permissions for users who will use Halite<br>For example in master config:<br><br>.. code-block:: bash<br><br>  external_auth:<br>    pam:<br>      myusername:<br>          - .*<br>          - '@runner'<br>          - '@wheel'<br><br>Halite uses the runner ``manage.present`` to get the status of minions so runner<br>permissions are required.  Currently Halite allows but does not require any<br>wheel modules.<br><br>* Clone the Halite repository::<br><br>.. code-block:: bash<br><br>  git clone https://github.com/saltstack/halite<br><br><br>* Run halite/halite/server_bottle.py (use with -h option to get parameters)<br><br>The simplest approach is to run the server with it dynamically generating<br>the main web app load page (main.html) in coffescript mode, where the coffeescript<br>is transpiled to javascript on the fly. In each case the appropriate server package<br>must be installed.<br><br>.. code-block:: bash<br><br>    $ ./server_bottle.py -d -C -l debug -s cherrypy<br><br>    $ ./server_bottle.py -d -C -l debug -s paste<br><br>    $ ./server_bottle.py -d -C -l debug -s gevent<br><br><br><br>* Navigate html5 compliant browser to http://localhost:8080/app<br><br>* Login<br>The default eauth method is 'pam'. To change go to the preferences page.<br><br>Documentation<br>=============<br><br>Preferences<br>-----------<br><br>The navbar has a login form. Enter the eauth username and password to login to salt.<br><br>.. image:: screenshots/LoggedOut.png<br><br>Once logged in, the navbar will display the username highlighted in blue and a logout button.<br>To logout click on the logout button.<br><br>.. image:: screenshots/LoggedIn.png<br><br><br><br>Click on the SaltStack logo to go to the preferences page<br><br>.. image:: screenshots/Preferences.png<br><br>On this page one can change the eauth method to something other than 'pam' such<br>as 'ldap'.<br><br>Check ``fetchGrains`` if you want grains data to be loaded when Halite loads.<br>Checking ``preloadJobCache`` will fetch all previously completed, cached jobs.<br><br>Once all changes are made click ``Update`` and refresh the browser page.<br><br>Commands<br>----------<br><br>To navigate to the console view click on the 'console' tab.<br><br>.. image:: screenshots/HomeConsole.png<br><br>This view has two sections. The ``Command`` section and the ``Monitor`` section.<br>The ``Command`` section is collapsed by default. Clicking on the downward chevron will<br>expand the ``Command`` section.<br><br>The top section of the Console view has controls for entering basic salt commands.<br>The target field will target minions with the command selected. There is ping button<br>with the bullhorn icon and the action menu has some preselected common commands.<br><br>Expanded Commands<br>-----------------<br><br>.. image:: screenshots/CommandForm.png<br><br>Click on the downward chevron button to expand the ``Command`` form with additional<br>fields for entering any salt module function. To enter \"runner\" functions prepend<br>\"runner.\" to the function name. For example, \"runner.manage.status\". To enter wheel<br>functions prepend \"wheel.\" to the wheel function name. For example, \"wheel.config.values\".<br>For commands that require arguments enter them in the arguments fields. The number of argument<br>fields equals the number of arguments accepted by the function.<br><br>Click on the Execute button or press the Return key to execute the command.<br><br>You can choose the ``Target Format`` which will be used by the ``Target`` field to target minions.<br><br>There is a ping button with the bullhorn icon and the Macro menu has some preselected commands<br>for \"speed dial\".<br><br>There is also a history feature which appears as a book icon on the top right corner of the ``Command`` panel.<br><br>Checking ``Live Doc Search`` will show the documentation related to the command being<br>entered in the ``Function`` field. Un-check it to conserve screen real estate.<br><br>Monitors<br>---------<br><br>The bottom section of the console view has monitor view buttons. Each button will<br>show panels with the associated information.<br><br>* Command Monitor<br><br>Shows panels, one per command that has been executed by this user on this console.<br>Clicking on the dropdown button will show the associated job ids that have been<br>run with this command and the  completion status via an icon.<br>Red is fail, Green is success.<br>Clicking on the button on the panel will rerun the command.<br><br>.. image:: screenshots/CommandMonitor.png<br><br>* Job Monitor<br><br>Shows panels, one per job that has been run by any minion associated with this<br>master. Clicking on the associated dropdown button with expand to show Result and Event data.<br>Selecting the result button will show the returner and return data<br>for each minion targeted by the job.<br><br>.. image:: screenshots/JobMonitor.png<br><br>Selecting the Event button will show the events associated with the job.<br><br>.. image:: screenshots/JobMonitorEvent.png<br><br>* Minion Monitor<br><br>Shows panels, one per minion that have keys associated with this master. The minion<br>panels have icons to show the up/down status of the minion and the grains status.<br>Selecting dropdown buttons will show grains data as well as minion (not job) generated events.<br><br>.. image:: screenshots/MinionMonitor.png<br><br><br><br>With the grains button selected one can see all the grains for the minion.<br><br>.. image:: screenshots/MinionGrains.png<br><br><br><br><br>* Event Monitor<br><br>Shows panels, one per event associated with this Master.<br><br>.. image:: screenshots/EventMonitor.png<br><br>More details coming. TBD<br><br><br>Browser requirements<br>--------------------<br><br>Support for ES5 and HTML5 is required. This means any modern browser or IE10+.<br><br>Server requirements<br>-------------------<br><br>* The static media for this app is server-agnostic and may be served from any<br>  web server at a configurable URL prefix.<br>* This app uses the HTML5 history API.<br><br>Libraries used<br>--------------<br><br>Client side web application requirements:<br><br>* AngularJS framework (http://angularjs.org/)<br>* Bootstrap layout CSS (http://twbs.github.io/bootstrap/)<br>* AngularUI framework (http://angular-ui.github.io/)<br>* Underscore JS module (http://underscorejs.org/\u200e)<br>* Underscore string JS module (http://epeli.github.io/underscore.string/)<br>* Font Awesome Bootstrap Icon Fonts  (http://fortawesome.github.io/Font-Awesome/)<br>* CoffeeScript Python/Ruby like javascript transpiler (http://coffeescript.org/)<br>* Karma Test Runner (http://karma-runner.github.io/0.8/index.html)<br>* Jasmine unit test framework (http://pivotal.github.io/jasmine/)<br>* Protractor E2E test framework for angular apps (https://github.com/angular/protractor)<br><br>Optional dependencies:<br><br>* Cherrypy web server (http://http://www.cherrypy.org/)<br>* Paste web server (http://pythonpaste.org/)<br>* Gevent web server(http://www.gevent.org/)<br><br>For nodejs testing:<br><br>* Express javascript web server<br><br><br>Deployment<br>-------------<br><br>There are two approaches to deploying Halite.<br><br>1) Use it from Salt.<br>The 0.17 release of salt will run halite automatically if the Halite package is<br>installed. So for example after installing SaltStack one can install the Halite<br>python package with<br><br>.. code-block:: bash<br><br>  $ pip install -U halite<br><br>Configure the master config for halite as follows.<br><br>.. code-block:: bash<br><br>  halite:<br>      level: 'debug'<br>      server: 'cherrypy'<br>      host: '0.0.0.0'<br>      port: '8080'<br>      cors: False<br>      tls: True<br>      certpath: '/etc/pki/tls/certs/localhost.crt'<br>      keypath: '/etc/pki/tls/certs/localhost.key'<br>      pempath: '/etc/pki/tls/certs/localhost.pem'<br><br>The \"cherrypy\" and \"gevent\" servers require the certpath and keypath files to run tls/ssl.<br>The .crt file holds the public cert and the .key file holds the private key. Whereas<br>the \"paste\" server requires a single .pem file that contains both the cert and key.<br>This can be created simply by concatenating the .crt and .key files.<br><br>If you want to use a self signed cert you can create one using the Salt .tls module<br><br>.. code-block:: bash<br><br>  salt '*' tls.create_ca_signed_cert test localhost<br><br>When using self signed certs, browsers will need approval before accepting the cert.<br>If the web application page has been cached with a non https version of the app then<br>the browser cache will have to be cleared before it will recognize and prompt to<br>accept the self signed certificate.<br><br>You will also need to configure the eauth method to be used by users of the WUI.<br>See quickstart above for an example.<br><br>Install the appropriate http wsgi server selected in the master config above. In<br>this case its \"cherrypy\". The other tested servers are \"paste\" and \"gevent\". The server<br>must be multi-threaded, asynchronous, or multi-processing in order to support<br>the Server Sent Event streaming connnection used by the WUI.<br><br>Restart the SaltStack Master and navigate your html5 compliant browser to<br>https://localhost:8080/app or however you have configured your master above.<br><br>If you have problems look for \"Halite:\" in the saltstack master log output.<br><br>Customized Deployment<br>====<br><br>The Halite github repository provides a skeleton framework for building your own custom<br>deployment. One can run the default bottle.py framwork form the command line thusly<br><br>.. code-block:: bash<br><br>  $ ./server_bottly.py -g<br>  $ ./server_bottle.py -s cherrypy<br><br><br>or from a python application<br><br>.. code-block:: python<br><br>  import halite<br><br>  halite.start()<br><br><br>The full set of options is given by<br><br>.. code-block:: bash<br><br>  $ ./server_bottle.py -h<br>  usage: server_bottle.py [-h] [-l {info,debug,critical,warning,error}]<br>                        [-s SERVER] [-a HOST] [-p PORT] [-b BASE] [-x] [-t]<br>                        [-c CERT] [-k KEY] [-e PEM] [-g] [-f LOAD] [-C] [-d]<br><br>  Runs localhost web application wsgi service on given host address and port.<br>  Default host:port is 0.0.0.0:8080. (0.0.0.0 is any interface on localhost)<br><br>  optional arguments:<br>    -h, --help            show this help message and exit<br>    -l {info,debug,critical,warning,error}, --level {info,debug,critical,warning,error}<br>                          Logging level.<br>    -s SERVER, --server SERVER<br>                          Web application WSGI server type.<br>    -a HOST, --host HOST  Web application WSGI server ip host address.<br>    -p PORT, --port PORT  Web application WSGI server ip port.<br>    -b BASE, --base BASE  Base Url path prefix for client side web application.<br>    -x, --cors            Enable CORS Cross Origin Resource Sharing on server.<br>    -t, --tls             Use TLS/SSL (https).<br>    -c CERT, --cert CERT  File path to tls/ssl cacert certificate file.<br>    -k KEY, --key KEY     File path to tls/ssl private key file.<br>    -e PEM, --pem PEM     File path to tls/ssl pem file with both cert and key.<br>    -g, --gen             Generate web app load file. Default is 'app/main.html'<br>                          or if provided the file specified by -f option.<br>    -f LOAD, --load LOAD  Filepath to save generated web app load file upon -g<br>                          option.<br>    -C, --coffee          Upon -g option generate to load coffeescript.<br>    -d, --devel           Development mode.<br><br>The http server provides two functions.<br><br>1) Provide content delivery network for the base load of the web application static<br>content such as html and javascript files.<br><br>2) Provide dynamic rest api interface to salt/client/api.py module that is used by<br>the web application via ajax and SSE connections. Because SSE and CORS<br>(Cross Origin Resource Sharing is not univesally supported even among HTML5 compliant<br>browsers, a single server serves both the static content and the rest API).<br>An alternative approach would be to to use a web socket to stream the events.<br>This would not require CORS. This may bea future option for Halite.<br><br>To deploy with apache, modify server_bottle.startServer so it creates the app but<br>does not call bottle.run on it but returns it to MOD_WSGI.<br>See (http://bottlepy.org/docs/dev/deployment.html) for other details in using bottle.py<br>with Apache and Mod_wsgi.<br><br>To do a custom deployment with some other framework like Django etc. would involve<br>replicating the endpoints from server_bottle.<br><br>Architecture<br>-------------<br><br>The following diagram illustrates how the various pieces to Halite interact.<br><br>.. image:: diagrams/HaliteArchitecture.png<br><br>Testing<br>-------<br><br>To run the karma jasmine ``unit test`` runner<br><br>.. code-block:: bash<br><br>  $ cd halite<br>  $ karma start karma_unit.conf.js<br><br>To run the protractor ``e2e test`` runner first start up a web server. More information<br>about using protractor can be found on their website.<br><br>Make sure that the end to end test is setup to login to Halite<br><br>.. code-block:: bash<br>  $ vim halite/test/spec-e2e/credentials.coffee<br><br>In that file change the following<br><br>.. code-block:: coffeescript<br><br>   login =<br>       username: 'your_halite_username'<br>       password: 'your_halite_password'<br><br>Now you can run the tests using the following commands.<br>Make sure you have the ``webdriver-manager`` started.<br>More info can be found on the `Protractor &lt;https://github.com/angular/protractor&gt;`_<br>webpage.<br><br>.. code-block:: bash<br><br>  $ cd halite<br>  $ protractor protractor.conf.js<br><br>To run the ``functional`` tests make sure you have the Python ``webtest``<br>and ``nose`` modules installed.<br><br>Enter your credentials and the minion name in a new file called<br>``halite/test/functional/config/override.conf``<br><br>.. code-block:: python<br><br>  [login]<br>  username = your_user_name<br>  password = your_password<br><br>  [minions]<br>  apache = minion_connected_to_this_master<br><br>The functional tests can be run via ``nose``.<br><br>.. code-block:: bash<br><br>  $ cd halite<br>  $ nosetests<br><br>You might have to build the distribution (for development)<br><br>.. code-block:: bash<br><br>   $ cd halite<br>   $ ./prep_dist.py<br><br><br>Subtree can be fetched by running ``git subtree pull --prefix=halite/lattice lattice master --squash``<br><br>.. ............................................................................<br>.. _`halite`: https://github.com/saltstack/halite<br>\n          </div>"}, "last_serial": 2014643, "releases": {"0.0.3": [{"comment_text": "", "digests": {"md5": "b5934cbc891eff945edc10272269e138", "sha256": "fe448d4d599c8a48bcaec6551dce5f9ae0948106440d8f33eff5428f417cb164"}, "downloads": -1, "filename": "halite-0.0.3.tar.gz", "has_sig": false, "md5_digest": "b5934cbc891eff945edc10272269e138", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 390958, "upload_time": "2013-09-13T19:22:45", "upload_time_iso_8601": "2013-09-13T19:22:45.329298Z", "url": "https://files.pythonhosted.org/packages/cd/c5/5adbf973a6e004e8d804d2868c315d21ab6c12758ad8194b21bd4d5c2231/halite-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "81048e4d77fe30e7fb50dfcd60f3b9f8", "sha256": "8a6959380782b4c2aef30e4fdb8851894174000b8df36ba51701f6e364794a16"}, "downloads": -1, "filename": "halite-0.0.4.tar.gz", "has_sig": false, "md5_digest": "81048e4d77fe30e7fb50dfcd60f3b9f8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 390245, "upload_time": "2013-09-14T00:20:14", "upload_time_iso_8601": "2013-09-14T00:20:14.894258Z", "url": "https://files.pythonhosted.org/packages/8c/e6/024deb9df720b559cc6c08cc5371fd71979e980c5bd18e213b682739cf84/halite-0.0.4.tar.gz", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "95fddc1836e6f289faac3e11838bad6f", "sha256": "fcea0719485aa5a36c2adabff7ce1aec0b84aacda4febc97031cf77e6d2a272c"}, "downloads": -1, "filename": "halite-0.0.5.tar.gz", "has_sig": false, "md5_digest": "95fddc1836e6f289faac3e11838bad6f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 390809, "upload_time": "2013-09-16T16:58:27", "upload_time_iso_8601": "2013-09-16T16:58:27.219258Z", "url": "https://files.pythonhosted.org/packages/c3/20/0ecd014d6b7247e251ac5beea5a4b1ee9cee5e04a97e95a044806c946861/halite-0.0.5.tar.gz", "yanked": false}], "0.0.6": [{"comment_text": "", "digests": {"md5": "5d05dd076e12153129b5892a17bc4618", "sha256": "08f9aab5ab4a70bda52ebff34adcfcd94721f9d44340df4ff87139ed10633297"}, "downloads": -1, "filename": "halite-0.0.6.tar.gz", "has_sig": false, "md5_digest": "5d05dd076e12153129b5892a17bc4618", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 390931, "upload_time": "2013-09-16T19:03:40", "upload_time_iso_8601": "2013-09-16T19:03:40.394539Z", "url": "https://files.pythonhosted.org/packages/b1/9b/6486994f9444e1ef771e387da4f9cc7db1a8d8ebab671c39398708562c48/halite-0.0.6.tar.gz", "yanked": false}], "0.0.7": [{"comment_text": "", "digests": {"md5": "3ddeab9cfb3c3a28107d7cc9ed2b8c62", "sha256": "faf324d63a7d7d0159bbc078eb957699990f46258b8f3746ce14c964a72eefbd"}, "downloads": -1, "filename": "halite-0.0.7.tar.gz", "has_sig": false, "md5_digest": "3ddeab9cfb3c3a28107d7cc9ed2b8c62", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 392087, "upload_time": "2013-09-16T23:57:41", "upload_time_iso_8601": "2013-09-16T23:57:41.099471Z", "url": "https://files.pythonhosted.org/packages/0e/3a/accfedf5c0ed3772eaff1db75769859d96ce664898116a3df4cc20ad5301/halite-0.0.7.tar.gz", "yanked": false}], "0.0.8": [{"comment_text": "", "digests": {"md5": "c3348613593e8f2a42a2d1b9a40d4d69", "sha256": "4163cc72d0118915bc1ec19f52d7075a3eaff5fbbab1f1c056ae44dc9af49ddb"}, "downloads": -1, "filename": "halite-0.0.8.tar.gz", "has_sig": false, "md5_digest": "c3348613593e8f2a42a2d1b9a40d4d69", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 392066, "upload_time": "2013-09-17T00:33:53", "upload_time_iso_8601": "2013-09-17T00:33:53.050313Z", "url": "https://files.pythonhosted.org/packages/d5/b8/66c96afcc9ade81b7aaa07228aecae3e02b0cdd1aa2702ee12958932baaa/halite-0.0.8.tar.gz", "yanked": false}], "0.0.9": [{"comment_text": "", "digests": {"md5": "7f3d23f8b32a1938ab0844477f692eb3", "sha256": "789b74d967d2250e62415453966277dfd29df087f7c9cfb082674a0fc4e84b88"}, "downloads": -1, "filename": "halite-0.0.9.tar.gz", "has_sig": false, "md5_digest": "7f3d23f8b32a1938ab0844477f692eb3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 394542, "upload_time": "2013-09-18T17:58:00", "upload_time_iso_8601": "2013-09-18T17:58:00.420206Z", "url": "https://files.pythonhosted.org/packages/79/f8/72a00f16e9b3b8275b17af0da8ac49d40bdc113440811fc7e2c83ef77184/halite-0.0.9.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "4dc7e02e5e34d5e8206efe545ba850d7", "sha256": "29afa484ea479dc273eff9865f35b65ce26f82114f104446142bb8fa0cee8346"}, "downloads": -1, "filename": "halite-0.1.0.tar.gz", "has_sig": false, "md5_digest": "4dc7e02e5e34d5e8206efe545ba850d7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 390099, "upload_time": "2013-09-24T19:13:11", "upload_time_iso_8601": "2013-09-24T19:13:11.871653Z", "url": "https://files.pythonhosted.org/packages/eb/80/8acfba0e030ee647f13fc27e95da57e126882262c8f903ed4f5ea587938b/halite-0.1.0.tar.gz", "yanked": false}], "0.1.01": [{"comment_text": "", "digests": {"md5": "23645cf70287d6c492b5697f7e6db2df", "sha256": "3bc1822db04fc6ff996f0a926d4ef41480daf364d8add84d0120bb4a090df230"}, "downloads": -1, "filename": "halite-0.1.01.tar.gz", "has_sig": false, "md5_digest": "23645cf70287d6c492b5697f7e6db2df", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 393898, "upload_time": "2013-09-26T16:49:02", "upload_time_iso_8601": "2013-09-26T16:49:02.758353Z", "url": "https://files.pythonhosted.org/packages/62/34/17d4fb00a3410b3601b7f2fe921c72c496bc2480423cbf809d950938f211/halite-0.1.01.tar.gz", "yanked": false}], "0.1.02": [{"comment_text": "", "digests": {"md5": "95036f4ce98a7d86848345780fb4456c", "sha256": "aee5915db1f6892ba671c8bd6b016d10c896782a02a3e071f33eb36c4ccb4654"}, "downloads": -1, "filename": "halite-0.1.02.tar.gz", "has_sig": false, "md5_digest": "95036f4ce98a7d86848345780fb4456c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 394480, "upload_time": "2013-10-14T21:24:36", "upload_time_iso_8601": "2013-10-14T21:24:36.636829Z", "url": "https://files.pythonhosted.org/packages/80/8b/76b6152cb5700579500209f0ea202545bbbfde6897ec1a62342f7d4438f0/halite-0.1.02.tar.gz", "yanked": false}], "0.1.03": [{"comment_text": "", "digests": {"md5": "08460e778668a01b81f443bd6d7584c9", "sha256": "5e1757c814a6e91b324b1af196a9374442bba2d7d4de37feae64e4edbbc9d4e0"}, "downloads": -1, "filename": "halite-0.1.03.tar.gz", "has_sig": false, "md5_digest": "08460e778668a01b81f443bd6d7584c9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 395010, "upload_time": "2013-11-01T14:46:48", "upload_time_iso_8601": "2013-11-01T14:46:48.105774Z", "url": "https://files.pythonhosted.org/packages/19/b5/56b353bb575a482c59c85e20c8763bac53defc89226d434a8de4c45b7c2f/halite-0.1.03.tar.gz", "yanked": false}], "0.1.04": [{"comment_text": "", "digests": {"md5": "f8d3a552e49b05232925e6f25239aadc", "sha256": "1b95413df2947bd98bba22484dbdf908d9afd70f7429675cc1750f2b77176048"}, "downloads": -1, "filename": "halite-0.1.04.tar.gz", "has_sig": false, "md5_digest": "f8d3a552e49b05232925e6f25239aadc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 394945, "upload_time": "2013-11-01T18:58:05", "upload_time_iso_8601": "2013-11-01T18:58:05.822573Z", "url": "https://files.pythonhosted.org/packages/9c/38/3ae618ba2742d2805715d023a3f3578ec758d7e11784d0d9f01609083d01/halite-0.1.04.tar.gz", "yanked": false}], "0.1.05": [{"comment_text": "", "digests": {"md5": "e4dcedfc8775d9822eab495652cbbf91", "sha256": "b46df0cb1a84c890ba656eaa1f2c8d386466d0781f0f6e7897025c2f94cad80c"}, "downloads": -1, "filename": "halite-0.1.05.tar.gz", "has_sig": false, "md5_digest": "e4dcedfc8775d9822eab495652cbbf91", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 417020, "upload_time": "2013-11-18T21:01:30", "upload_time_iso_8601": "2013-11-18T21:01:30.585327Z", "url": "https://files.pythonhosted.org/packages/d7/ff/60595adc368e47c8c6fdeb4d9ee2a2a6e9b034a6fef5a07c1d3ee10e20b6/halite-0.1.05.tar.gz", "yanked": false}], "0.1.06": [{"comment_text": "", "digests": {"md5": "4158b0ef3a4d546109fedb8a84391ae4", "sha256": "0c1a33bce72f1582bdf25f34627e426a08c0bb46f999a57ed6afbd59871b9c26"}, "downloads": -1, "filename": "halite-0.1.06.tar.gz", "has_sig": false, "md5_digest": "4158b0ef3a4d546109fedb8a84391ae4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 419607, "upload_time": "2013-11-18T21:04:25", "upload_time_iso_8601": "2013-11-18T21:04:25.326130Z", "url": "https://files.pythonhosted.org/packages/d6/63/28b9fd4d1634bfc9ac015ca15527e8e10a41d48c73c9c91392990f6e06f8/halite-0.1.06.tar.gz", "yanked": false}], "0.1.07": [{"comment_text": "", "digests": {"md5": "2f783a0b59dabd39b8a86d9a419a0522", "sha256": "6feeb3c2d75c0138112a14665c6e902863be9eeee6339b42b3b440bc65f13548"}, "downloads": -1, "filename": "halite-0.1.07.tar.gz", "has_sig": false, "md5_digest": "2f783a0b59dabd39b8a86d9a419a0522", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 419650, "upload_time": "2013-11-18T21:11:25", "upload_time_iso_8601": "2013-11-18T21:11:25.530780Z", "url": "https://files.pythonhosted.org/packages/f7/d7/c06166fe7b49666ec89d84402293f38d51e1f253f98f8b31e5b4774c62ee/halite-0.1.07.tar.gz", "yanked": false}], "0.1.08": [{"comment_text": "", "digests": {"md5": "9ec53e3442275497f8f132bdae2bb996", "sha256": "4326ad3f8f419469309e4efa864da0058a483d9e1f86bdeaacfe7e9d23108745"}, "downloads": -1, "filename": "halite-0.1.08.tar.gz", "has_sig": false, "md5_digest": "9ec53e3442275497f8f132bdae2bb996", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 419878, "upload_time": "2013-11-27T17:08:45", "upload_time_iso_8601": "2013-11-27T17:08:45.459756Z", "url": "https://files.pythonhosted.org/packages/0a/5e/be37e4e9356cbeb031ba0d38bbd9f478fb72300950007c9d33bcc1327857/halite-0.1.08.tar.gz", "yanked": false}], "0.1.09": [{"comment_text": "", "digests": {"md5": "d1acbbb58f3f68ccb21b24a8946ffc2d", "sha256": "d9467e4b16bd6e73bb684b75b9bc957ca0e929fdec1dc5acae397d6831dae000"}, "downloads": -1, "filename": "halite-0.1.09.tar.gz", "has_sig": false, "md5_digest": "d1acbbb58f3f68ccb21b24a8946ffc2d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 421534, "upload_time": "2013-12-13T16:55:50", "upload_time_iso_8601": "2013-12-13T16:55:50.639128Z", "url": "https://files.pythonhosted.org/packages/93/34/8797fed54f382aa158d675cfb76cea3cb488517d2e0609d405d173b8e567/halite-0.1.09.tar.gz", "yanked": false}], "0.1.10": [{"comment_text": "", "digests": {"md5": "05377ada798710ffb241fb49b18d8290", "sha256": "a540a7b4cdd62b94ccf8e97babf1c89aeb9ca9e29a38f5551efaffcaf33e9b0d"}, "downloads": -1, "filename": "halite-0.1.10.tar.gz", "has_sig": false, "md5_digest": "05377ada798710ffb241fb49b18d8290", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 421682, "upload_time": "2013-12-13T21:46:17", "upload_time_iso_8601": "2013-12-13T21:46:17.565638Z", "url": "https://files.pythonhosted.org/packages/de/0f/35468627f24d296f9b2b4f49760721d6da97d235827ff7ae3def4fcc3ec3/halite-0.1.10.tar.gz", "yanked": false}], "0.1.11": [{"comment_text": "", "digests": {"md5": "9ed46d02bec37ce3bef79b9f851deea2", "sha256": "994ee2dc65b6fe6a7ef427d933c87d2b7a5a31bb2c7fb99044322a63e6fdc367"}, "downloads": -1, "filename": "halite-0.1.11.tar.gz", "has_sig": false, "md5_digest": "9ed46d02bec37ce3bef79b9f851deea2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 50788, "upload_time": "2013-12-16T17:39:53", "upload_time_iso_8601": "2013-12-16T17:39:53.446116Z", "url": "https://files.pythonhosted.org/packages/72/12/14dad6fb31444bf02abfff6fae9c3678e9a90f66e2e37f15ca40a04c006c/halite-0.1.11.tar.gz", "yanked": false}], "0.1.12": [{"comment_text": "", "digests": {"md5": "1f0fb3379cfd4a7ffab7fea8717b5fb5", "sha256": "3c356542c534f8231f5e416260f618f2c661a62203605300339603fa84748f41"}, "downloads": -1, "filename": "halite-0.1.12.tar.gz", "has_sig": false, "md5_digest": "1f0fb3379cfd4a7ffab7fea8717b5fb5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 421783, "upload_time": "2013-12-16T21:23:57", "upload_time_iso_8601": "2013-12-16T21:23:57.848633Z", "url": "https://files.pythonhosted.org/packages/c4/d5/3d4ee07a80959d67a6a44b07d4234395c00424e02db70f9dac8d35a464f9/halite-0.1.12.tar.gz", "yanked": false}], "0.1.13": [{"comment_text": "", "digests": {"md5": "b71f4e7c09e6a9bfd906fd10e8db2d94", "sha256": "38d0fe0bf8a3e5356ab72c0cfcc6e78a32ec280d72f4f15f0638acd3ceabd859"}, "downloads": -1, "filename": "halite-0.1.13.tar.gz", "has_sig": false, "md5_digest": "b71f4e7c09e6a9bfd906fd10e8db2d94", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 421910, "upload_time": "2013-12-17T20:54:22", "upload_time_iso_8601": "2013-12-17T20:54:22.662742Z", "url": "https://files.pythonhosted.org/packages/6d/59/fccaf0e80e4a53c5a507e760d63ca4b2ffbd61166c6a0ff5b173306184f8/halite-0.1.13.tar.gz", "yanked": false}], "0.1.14": [{"comment_text": "", "digests": {"md5": "d92abf8f9bf305c92536a2dfaf0b3dcb", "sha256": "ca24edf0a3ddf0ad9fd1a4f641c5f743da12d6b4c289da24e12db25fc3f46103"}, "downloads": -1, "filename": "halite-0.1.14.tar.gz", "has_sig": false, "md5_digest": "d92abf8f9bf305c92536a2dfaf0b3dcb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 422609, "upload_time": "2013-12-20T21:40:49", "upload_time_iso_8601": "2013-12-20T21:40:49.423284Z", "url": "https://files.pythonhosted.org/packages/04/f9/daadedb5f29353fb3a06c8d54c0b6982b6d396ce60ff499c80d43216aba4/halite-0.1.14.tar.gz", "yanked": false}], "0.1.15": [{"comment_text": "", "digests": {"md5": "1415ffeabb9759c350a7f52ed9c2aa2a", "sha256": "4543290a7cddd2751f796c01e118a151da424449fc419a4055dbbfa748dba3ae"}, "downloads": -1, "filename": "halite-0.1.15.tar.gz", "has_sig": false, "md5_digest": "1415ffeabb9759c350a7f52ed9c2aa2a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 422633, "upload_time": "2013-12-20T22:05:29", "upload_time_iso_8601": "2013-12-20T22:05:29.591341Z", "url": "https://files.pythonhosted.org/packages/ab/a1/b60ee5d87bc7a796976fa775afaf5b5bdf90894034e3030690a6e185b642/halite-0.1.15.tar.gz", "yanked": false}], "0.1.16": [{"comment_text": "", "digests": {"md5": "07372c85d8a6bcf77f5f704a22eb2818", "sha256": "d7d64b567e9bba1a00f8c262ffd5ae9a6255da4a5bf190590e382d34a7b54d1f"}, "downloads": -1, "filename": "halite-0.1.16.tar.gz", "has_sig": false, "md5_digest": "07372c85d8a6bcf77f5f704a22eb2818", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 431769, "upload_time": "2014-04-07T14:29:17", "upload_time_iso_8601": "2014-04-07T14:29:17.379740Z", "url": "https://files.pythonhosted.org/packages/e3/60/0f13d95bfd8d4694b792de44c611a2b275e490e82e1d3f36f5683c89a581/halite-0.1.16.tar.gz", "yanked": false}], "0.1.17": [{"comment_text": "", "digests": {"md5": "01fe3bf050205514f88dfb5977fa81e2", "sha256": "c758d581c88d6341f70385acf0ff0aa5c3adbedad84bdb8f8a3f7d1ce05953b1"}, "downloads": -1, "filename": "halite-0.1.17.tar.gz", "has_sig": false, "md5_digest": "01fe3bf050205514f88dfb5977fa81e2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 432338, "upload_time": "2014-05-14T14:43:05", "upload_time_iso_8601": "2014-05-14T14:43:05.883578Z", "url": "https://files.pythonhosted.org/packages/dc/77/0bdacfa7dfff7ce61265d5f371643a408e842c7f88f14e271d3e7c080087/halite-0.1.17.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "01fe3bf050205514f88dfb5977fa81e2", "sha256": "c758d581c88d6341f70385acf0ff0aa5c3adbedad84bdb8f8a3f7d1ce05953b1"}, "downloads": -1, "filename": "halite-0.1.17.tar.gz", "has_sig": false, "md5_digest": "01fe3bf050205514f88dfb5977fa81e2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 432338, "upload_time": "2014-05-14T14:43:05", "upload_time_iso_8601": "2014-05-14T14:43:05.883578Z", "url": "https://files.pythonhosted.org/packages/dc/77/0bdacfa7dfff7ce61265d5f371643a408e842c7f88f14e271d3e7c080087/halite-0.1.17.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:52:42 2020"}