{"info": {"author": "Pawe\u0142 Krawczyk", "author_email": "pawel.krawczyk@hush.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Framework :: Django :: 3.0", "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Topic :: Security"], "description": "[![builds.sr.ht status](https://builds.sr.ht/~kravietz/django-fast-common-passwords-validator.svg)](https://builds.sr.ht/~kravietz/django-fast-common-passwords-validator?)\n\n# FastCommonPasswordValidator\nA faster drop-in replacement for Django built-in\n[CommonPasswordValidator](https://docs.djangoproject.com/en/3.0/topics/auth/passwords/#enabling-password-validation).\nWith the default password list it has 4x lookup speed gain and 30% memory savings\nand these results will be even better with larger password lists.\n\nValidate whether the password is a listed common password. By default, will use built-in list of 20k\ncommon  passwords (lowercase and deduplicated) by\n[Royce Williams](https://gist.github.com/roycewilliams/281ce539915a947a23db17137d91aeb7). If called with\na file name, it will load passwords one-per-line and use for subsequent checks.\n\n## Why?\n\nThe original class loads a static list of 20k passwords into memory and scans through it each time it's called, which is...\nfar from being optimal. From Django maintainers point of view it has one advantage: it does not require \nany extra dependencies, which was the main reason that class was included into the default Django distribution\nwhile [this wasn't](https://github.com/django/django/pull/11840) and is available as an extra module.\n\n## Compiling your own password list\n\nInitialize a new Bloom filter from your data:\n\n```python\nfrom bloom_filter import BloomFilter\nimport pathlib\n\napprox_number_of_lines = 20_000 # or whatever your file has\nbloom = BloomFilter(max_elements=approx_number_of_lines, error_rate=0.001)\n\nwith pathlib.Path('mypasswords.txt').open() as f:\n    for line in f.readlines():\n        line = line.strip()\n        if len(line.strip()) > 0 and not line.startswith('#'):\n            bloom.add(line)\n\n# test if it works\n'password77' in bloom # should be True\n'PLWmV6Zh3viv' in bloom # should be False (but see on false positives below)\n```\nAnd dump it as a file using [pickle](https://docs.python.org/3/library/pickle.html) module:\n```python\nimport pickle\nwith open('myawesomepasswords.dat') as f:\n    pickle.dump(f, bloom)\n```\n\n## False positives\n\nBloom filter is a probabilistic structure. The filter is by default configured for 0.001 (0.1%) error rate which\nmeans on 1000 checks in will falsely report 1 password on average as \"common\" even if it was not in the original\nlist. In practical applications it's not really a hill to die on, and it might actually bump the respect for your\nprophetic skills among the users.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://git.sr.ht/~kravietz/django-fast-common-passwords-validator", "keywords": "django,password,validation", "license": "GPLv3", "maintainer": "", "maintainer_email": "", "name": "fast-password-validation", "package_url": "https://pypi.org/project/fast-password-validation/", "platform": "", "project_url": "https://pypi.org/project/fast-password-validation/", "project_urls": {"Homepage": "https://git.sr.ht/~kravietz/django-fast-common-passwords-validator"}, "release_url": "https://pypi.org/project/fast-password-validation/0.1.2/", "requires_dist": ["Django", "bloom-filter"], "requires_python": "", "summary": "Drop-in replacement for Django's CommonPasswordValidator with 4x speed and \u2153 memory usage", "version": "0.1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://builds.sr.ht/%7Ekravietz/django-fast-common-passwords-validator?\" rel=\"nofollow\"><img alt=\"builds.sr.ht status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/45c147e8a672703ffd8351a8e095c264f47e3d39/68747470733a2f2f6275696c64732e73722e68742f2537456b7261766965747a2f646a616e676f2d666173742d636f6d6d6f6e2d70617373776f7264732d76616c696461746f722e737667\"></a></p>\n<h1>FastCommonPasswordValidator</h1>\n<p>A faster drop-in replacement for Django built-in\n<a href=\"https://docs.djangoproject.com/en/3.0/topics/auth/passwords/#enabling-password-validation\" rel=\"nofollow\">CommonPasswordValidator</a>.\nWith the default password list it has 4x lookup speed gain and 30% memory savings\nand these results will be even better with larger password lists.</p>\n<p>Validate whether the password is a listed common password. By default, will use built-in list of 20k\ncommon  passwords (lowercase and deduplicated) by\n<a href=\"https://gist.github.com/roycewilliams/281ce539915a947a23db17137d91aeb7\" rel=\"nofollow\">Royce Williams</a>. If called with\na file name, it will load passwords one-per-line and use for subsequent checks.</p>\n<h2>Why?</h2>\n<p>The original class loads a static list of 20k passwords into memory and scans through it each time it's called, which is...\nfar from being optimal. From Django maintainers point of view it has one advantage: it does not require\nany extra dependencies, which was the main reason that class was included into the default Django distribution\nwhile <a href=\"https://github.com/django/django/pull/11840\" rel=\"nofollow\">this wasn't</a> and is available as an extra module.</p>\n<h2>Compiling your own password list</h2>\n<p>Initialize a new Bloom filter from your data:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">bloom_filter</span> <span class=\"kn\">import</span> <span class=\"n\">BloomFilter</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pathlib</span>\n\n<span class=\"n\">approx_number_of_lines</span> <span class=\"o\">=</span> <span class=\"mi\">20_000</span> <span class=\"c1\"># or whatever your file has</span>\n<span class=\"n\">bloom</span> <span class=\"o\">=</span> <span class=\"n\">BloomFilter</span><span class=\"p\">(</span><span class=\"n\">max_elements</span><span class=\"o\">=</span><span class=\"n\">approx_number_of_lines</span><span class=\"p\">,</span> <span class=\"n\">error_rate</span><span class=\"o\">=</span><span class=\"mf\">0.001</span><span class=\"p\">)</span>\n\n<span class=\"k\">with</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"s1\">'mypasswords.txt'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n    <span class=\"k\">for</span> <span class=\"n\">line</span> <span class=\"ow\">in</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">readlines</span><span class=\"p\">():</span>\n        <span class=\"n\">line</span> <span class=\"o\">=</span> <span class=\"n\">line</span><span class=\"o\">.</span><span class=\"n\">strip</span><span class=\"p\">()</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">line</span><span class=\"o\">.</span><span class=\"n\">strip</span><span class=\"p\">())</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"n\">line</span><span class=\"o\">.</span><span class=\"n\">startswith</span><span class=\"p\">(</span><span class=\"s1\">'#'</span><span class=\"p\">):</span>\n            <span class=\"n\">bloom</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">line</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># test if it works</span>\n<span class=\"s1\">'password77'</span> <span class=\"ow\">in</span> <span class=\"n\">bloom</span> <span class=\"c1\"># should be True</span>\n<span class=\"s1\">'PLWmV6Zh3viv'</span> <span class=\"ow\">in</span> <span class=\"n\">bloom</span> <span class=\"c1\"># should be False (but see on false positives below)</span>\n</pre>\n<p>And dump it as a file using <a href=\"https://docs.python.org/3/library/pickle.html\" rel=\"nofollow\">pickle</a> module:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pickle</span>\n<span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'myawesomepasswords.dat'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n    <span class=\"n\">pickle</span><span class=\"o\">.</span><span class=\"n\">dump</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"n\">bloom</span><span class=\"p\">)</span>\n</pre>\n<h2>False positives</h2>\n<p>Bloom filter is a probabilistic structure. The filter is by default configured for 0.001 (0.1%) error rate which\nmeans on 1000 checks in will falsely report 1 password on average as \"common\" even if it was not in the original\nlist. In practical applications it's not really a hill to die on, and it might actually bump the respect for your\nprophetic skills among the users.</p>\n\n          </div>"}, "last_serial": 6999550, "releases": {"0.1.1": [{"comment_text": "", "digests": {"md5": "02f56926cfc3a7525ba81e47071e1e91", "sha256": "277dec0eaa64ac3a099afe548c07d96409dba8bae0d4b00f78942e99149d30ff"}, "downloads": -1, "filename": "fast_password_validation-0.1.1.linux-x86_64.tar.gz", "has_sig": false, "md5_digest": "02f56926cfc3a7525ba81e47071e1e91", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 53293, "upload_time": "2020-04-06T23:57:27", "upload_time_iso_8601": "2020-04-06T23:57:27.078899Z", "url": "https://files.pythonhosted.org/packages/a2/a5/ef4e9468083c351e655bcc687f81a27e0b4b1ef6a6ab6ef8d0de0dfa6b1d/fast_password_validation-0.1.1.linux-x86_64.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "813a02700ea80091bf10b83434211c9a", "sha256": "07212b0d9f23f150aa2a5615e499d046edfc866b8c658c787f35f34530c008aa"}, "downloads": -1, "filename": "fast_password_validation-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "813a02700ea80091bf10b83434211c9a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 51470, "upload_time": "2020-04-06T23:57:24", "upload_time_iso_8601": "2020-04-06T23:57:24.719906Z", "url": "https://files.pythonhosted.org/packages/46/a9/406875bbee1464e12c4fcc82d3b1dde5a81ccbe4371364c4eac34b139f7b/fast_password_validation-0.1.1-py3-none-any.whl", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "40842a3fd865cbbb72264a6122612f4e", "sha256": "ac4be31959b217872f652cbb4070d24bec14390bf3cf0f762263fd90925fb8d9"}, "downloads": -1, "filename": "fast_password_validation-0.1.2.linux-x86_64.tar.gz", "has_sig": true, "md5_digest": "40842a3fd865cbbb72264a6122612f4e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 53332, "upload_time": "2020-04-11T13:34:01", "upload_time_iso_8601": "2020-04-11T13:34:01.663209Z", "url": "https://files.pythonhosted.org/packages/06/0a/1659063f92e58e825a2858e61679d3fbb5f39379f143e3b20e1b011c6a10/fast_password_validation-0.1.2.linux-x86_64.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "8131e4dfca4cef8d384ecdec7c24d9ae", "sha256": "06d66007363a5018d85c846b089fd07bb15c7328d637ac68afabc5fa21c64b94"}, "downloads": -1, "filename": "fast_password_validation-0.1.2-py3-none-any.whl", "has_sig": true, "md5_digest": "8131e4dfca4cef8d384ecdec7c24d9ae", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 51502, "upload_time": "2020-04-11T13:33:59", "upload_time_iso_8601": "2020-04-11T13:33:59.245051Z", "url": "https://files.pythonhosted.org/packages/62/2c/e637da082e3027bcd0370c0f1a10d0f3e6793ffc1a37d7d968ef5a078d0d/fast_password_validation-0.1.2-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "40842a3fd865cbbb72264a6122612f4e", "sha256": "ac4be31959b217872f652cbb4070d24bec14390bf3cf0f762263fd90925fb8d9"}, "downloads": -1, "filename": "fast_password_validation-0.1.2.linux-x86_64.tar.gz", "has_sig": true, "md5_digest": "40842a3fd865cbbb72264a6122612f4e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 53332, "upload_time": "2020-04-11T13:34:01", "upload_time_iso_8601": "2020-04-11T13:34:01.663209Z", "url": "https://files.pythonhosted.org/packages/06/0a/1659063f92e58e825a2858e61679d3fbb5f39379f143e3b20e1b011c6a10/fast_password_validation-0.1.2.linux-x86_64.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "8131e4dfca4cef8d384ecdec7c24d9ae", "sha256": "06d66007363a5018d85c846b089fd07bb15c7328d637ac68afabc5fa21c64b94"}, "downloads": -1, "filename": "fast_password_validation-0.1.2-py3-none-any.whl", "has_sig": true, "md5_digest": "8131e4dfca4cef8d384ecdec7c24d9ae", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 51502, "upload_time": "2020-04-11T13:33:59", "upload_time_iso_8601": "2020-04-11T13:33:59.245051Z", "url": "https://files.pythonhosted.org/packages/62/2c/e637da082e3027bcd0370c0f1a10d0f3e6793ffc1a37d7d968ef5a078d0d/fast_password_validation-0.1.2-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 00:43:27 2020"}