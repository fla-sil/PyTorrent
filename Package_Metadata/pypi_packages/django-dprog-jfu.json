{"info": {"author": "Z. Alem", "author_email": "alem@cidola.com", "bugtrack_url": null, "classifiers": ["Environment :: Web Environment", "Framework :: Django", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Topic :: Internet :: WWW/HTTP", "Topic :: Internet :: WWW/HTTP :: Dynamic Content"], "description": "Note: This project is forked from https://github.com/jpic/django-jfu. This fork aims to localize the project and keep it compatible with recent versions of Django. It also updates some rather obsolete dependencies.\n\n----------------------------------------------------\nDjango-JFU - A Django Library for jQuery File Upload \n----------------------------------------------------\n\nDjango-JFU is designed to simplify the tasks involved in integrating jQuery\nFile Upload (https://github.com/blueimp/jquery-file-upload) into Django.\nDjango-JFU assumes very little and leaves the model/view design up to the user. \n\nOther Django - jQuery File Upload implementations are full-featured but\ngenerally serve more as demonstrations than libraries for existing\napplications.\n\nIf you seek a tool to ease the integration of jQuery File Upload into your\nDjango application while still having a great degree of freedom, you may find\nthis package useful.\n\nDemo_\n\n.. _Demo: http://djfu-demo.cidola.com\n\nInstallation\n------------\n\n1. ``pip install django-jfu``.\n2. Add 'jfu' to ``INSTALLED_APPS`` in your project settings.py file.\n3. Run `python manage.py collectstatic`.\n\n\nUsage\n-----\n\nDjango-JFU provides simple customizable template tags and override-able\ntemplates that do the work of integrating the jQuery File Upload CSS and\nJavaScipt and the HTML implementation found in the jQuery File Upload demo.\n\nTo place the jQuery File Upload widget in a template, simply insert the\nfollowing within it::\n\n    {% load jfutags %}\n    {% jfu %}\n\nThen create a view that will handle the uploaded files. \nThe URL for the view is expected to be named **'jfu_upload'** by default,\nalthough this can be customized (see Customization below).\n\nHere is an example implementation:\n\nIn your ``urls.py`` file::\n\n    ...\n    url( r'upload/', views.upload, name = 'jfu_upload' ),\n\n    # You may optionally define a delete url as well\n    url( r'^delete/(?P<pk>\\d+)$', views.upload_delete, name = 'jfu_delete' ),\n\nIn your ``views.py`` file::\n\n    import os\n    from django.conf import settings\n    from django.core.urlresolvers import reverse\n    from django.views import generic\n    from django.views.decorators.http import require_POST\n    from jfu.http import upload_receive, UploadResponse, JFUResponse\n\n    from YOURAPP.models import YOURMODEL\n\n    @require_POST\n    def upload( request ):\n\n        # The assumption here is that jQuery File Upload\n        # has been configured to send files one at a time.\n        # If multiple files can be uploaded simulatenously,\n        # 'file' may be a list of files.\n        file = upload_receive( request )\n\n        instance = YOURMODEL( file = file )\n        instance.save()\n\n        basename = os.path.basename( instance.file.path )\n\n        file_dict = {\n            'name' : basename,\n            'size' : file.size,\n\n            'url': settings.MEDIA_URL + basename,\n            'thumbnailUrl': settings.MEDIA_URL + basename,\n\n            'deleteUrl': reverse('jfu_delete', kwargs = { 'pk': instance.pk }),\n            'deleteType': 'POST',\n        }\n\n        return UploadResponse( request, file_dict )\n\n    @require_POST\n    def upload_delete( request, pk ):\n        success = True\n        try:\n            instance = YOURMODEL.objects.get( pk = pk )\n            os.unlink( instance.file.path )\n            instance.delete()\n        except YOURMODEL.DoesNotExist:\n            success = False\n\n        return JFUResponse( request, success )\n\nCustomization\n-------------\n\nDjango-JFU is designed to be very customizable.  \n\nThe Django-JFU template tag optionally takes two arguments: the name of the\ntemplate to load and the name of the URL pointing to the upload-handling\nview.::\n\n    {% load jfutags %}\n    {% jfu 'your_fileuploader.html' 'your_uploader_URL_name' %}\n\nA custom template can extend from the master Django-JFU template\n`jfu/upload_form.html`.  There are several blocks which may be overriden for\nthe purpose of customization:\n\n* JS_OPTS - The options supplied to the jQuery File Upload ``fileupload`` function. \n* JS_INIT - The initializing JavaScript\n* FILE_INPUT - The file input for the upload form.\n\nThe blocks above are most-likely what you will want to override when seeking to\ncustomize. For instance, one would go about adding a few options to the\nfileupload function in this manner::\n\n    # your_fileuploader.html\n    {% extends 'jfu/upload_form.html' %}\n\n    {% block JS_OPTS %}\n    autoUpload: true,\n    maxNumberOfFiles: 5,\n    sequentialUploads: true,\n    {% endblock %}\n\nThere are several other blocks too:\n\n\nHTML Components\n===============\n\n* MODAL_GALLERY - The modal gallery\n* UPLOAD_FORM   - The file upload form used as target for the file upload widget.\n\n  * UPLOAD_FORM_LISTING - The table listing the files available for upload/download.\n  * UPLOAD_FORM_LINDICATOR - The loading indicator shown during file processing.\n  * UPLOAD_FORM_PROGRESS_BAR - The global progress information.\n  * UPLOAD_FORM_BUTTON_BAR - The fileupload-buttonbar contains buttons to add/delete files and start/cancel the upload.\n\n    * UPLOAD_FORM_BUTTON_BAR_CONTROL - Contains buttons to start/cancel the upload or delete files. \n    * UPLOAD_FORM_BUTTON_BAR_ADD     - Contains the file input used to add files.\n        * FILE_INPUT or UPLOAD_FORM_BUTTON_BAR_ADD_FILE_INPUT - Contains the file input.\n        * UPLOAD_FORM_BUTTON_BAR_ADD_EXTRA - An empty block allowing the addition of extra inputs.\n    * UPLOAD_FORM_BUTTON_BAR_EXTRA  - An empty block allowing the addition of extra components.\n\n  * UPLOAD_FORM_EXTRA - An empty block allowing the addition of extra components.\n\nCSS Components\n==============\n\n* CSS\n\n  * CSS_BOOTSTRAP \n  * CSS_BLUEIMP_GALLERY \n  * CSS_JQUERY_FILE_UPLOAD\n  * CSS_JQUERY_FILE_UPLOAD_UI\n  * CSS_HTML5_SHIM \n  * CSS_EXTRA \n\nJS Components\n=============\n\n* JS_TEMPLATES \n\n  * JS_DOWNLOAD_TEMPLATE \n\n    * JS_DOWNLOAD_TEMPLATE_DELETE \n    * JS_DOWNLOAD_TEMPLATE_DOWNLOAD  \n    * JS_DOWNLOAD_TEMPLATE_PREVIEW \n    * JS_DOWNLOAD_TEMPLATE_ERROR \n    * JS_DOWNLOAD_TEMPLATE_FSIZE \n\n  * JS_UPLOAD_TEMPLATE \n    * JS_UPLOAD_TEMPLATE_PREVIEW\n    * JS_UPLOAD_TEMPLATE_UPLOAD\n    * JS_UPLOAD_TEMPLATE_CONTROLS\n        * JS_UPLOAD_TEMPLATE_START\n        * JS_UPLOAD_TEMPLATE_CANCEL\n    * JS_UPLOAD_TEMPLATE_PROGRESSBAR\n\n* JS_SCRIPTS    \n\n  * JS_JQUERY \n  * JS_JQUERY_UI_WIDGET\n  * JS_TEMPLATES_PLUGIN\n  * JS_LOAD_IMAGE\n  * JS_CANVAS_TO_BLOB \n  * JS_BOOTSTRAP \n  * JS_BLUEIMP_GALLERY \n  * JS_BOOTSTRAP_IFRAME_TRANSPORT\n  * JS_JQUERY_FILE_UPLOAD\n  * JS_JQUERY_FILE_UPLOAD_FP\n  * JS_JQUERY_FILE_UPLOAD_IMAGE\n  * JS_JQUERY_FILE_UPLOAD_AUDIO\n  * JS_JQUERY_FILE_UPLOAD_VIDEO\n  * JS_JQUERY_FILE_UPLOAD_VALIDATE\n  * JS_JQUERY_FILEUPLOAD_UI \n  * JS_XDR_TRANSPORT \n  * JS_EXTRA\n\nThe included JavaScript and CSS can be updated or suppressed by overriding\nthese blocks ::\n\n    # your_fileuploader.html\n    {% extends 'jfu/upload_form.html' %}\n\n    {% block JS_JQUERY %}\n        <script src={{STATIC_URL}}/js/my.newer.jquery.js />\n    {% endblock %}\n\n    {% block CSS_BOOTSTRAP %}\n        {% comment %}\n        This is already included.\n        {% endcomment %}\n    {% endblock %}\n\nor by replacing the static files themselves.\n\nDemo\n----\nIf you have downloaded from the repository, a simple demo application has been\nincluded in the 'demo' directory. \nTo test it out, enter the 'demo' directory and run ::\n\n        ./setup && ./run\n\nNote that virtualenv is required for the demo to function.\n\nContribution\n------------           \nDjango-JFU is wholly open source and welcomes contributions of any kind. Feel\nfree to either extend it, report bugs, or provide suggestions for improvements.\nThe author of Django-JFU can be contacted at alem@cidola.com.\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://packages.python.org/jfu", "keywords": "django,jquery file upload,multi-upload", "license": "BSD License", "maintainer": "Philippe Docourt", "maintainer_email": "", "name": "django-dprog-jfu", "package_url": "https://pypi.org/project/django-dprog-jfu/", "platform": "", "project_url": "https://pypi.org/project/django-dprog-jfu/", "project_urls": {"Homepage": "http://packages.python.org/jfu"}, "release_url": "https://pypi.org/project/django-dprog-jfu/2.2.3/", "requires_dist": null, "requires_python": "", "summary": "A Django Library for jQuery File Upload.", "version": "2.2.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            Note: This project is forked from https://github.com/jpic/django-jfu. This fork aims to localize the project and keep it compatible with recent versions of Django. It also updates some rather obsolete dependencies.<br><br>----------------------------------------------------<br>Django-JFU - A Django Library for jQuery File Upload <br>----------------------------------------------------<br><br>Django-JFU is designed to simplify the tasks involved in integrating jQuery<br>File Upload (https://github.com/blueimp/jquery-file-upload) into Django.<br>Django-JFU assumes very little and leaves the model/view design up to the user. <br><br>Other Django - jQuery File Upload implementations are full-featured but<br>generally serve more as demonstrations than libraries for existing<br>applications.<br><br>If you seek a tool to ease the integration of jQuery File Upload into your<br>Django application while still having a great degree of freedom, you may find<br>this package useful.<br><br>Demo_<br><br>.. _Demo: http://djfu-demo.cidola.com<br><br>Installation<br>------------<br><br>1. ``pip install django-jfu``.<br>2. Add 'jfu' to ``INSTALLED_APPS`` in your project settings.py file.<br>3. Run `python manage.py collectstatic`.<br><br><br>Usage<br>-----<br><br>Django-JFU provides simple customizable template tags and override-able<br>templates that do the work of integrating the jQuery File Upload CSS and<br>JavaScipt and the HTML implementation found in the jQuery File Upload demo.<br><br>To place the jQuery File Upload widget in a template, simply insert the<br>following within it::<br><br>    {% load jfutags %}<br>    {% jfu %}<br><br>Then create a view that will handle the uploaded files. <br>The URL for the view is expected to be named **'jfu_upload'** by default,<br>although this can be customized (see Customization below).<br><br>Here is an example implementation:<br><br>In your ``urls.py`` file::<br><br>    ...<br>    url( r'upload/', views.upload, name = 'jfu_upload' ),<br><br>    # You may optionally define a delete url as well<br>    url( r'^delete/(?P&lt;pk&gt;\\d+)$', views.upload_delete, name = 'jfu_delete' ),<br><br>In your ``views.py`` file::<br><br>    import os<br>    from django.conf import settings<br>    from django.core.urlresolvers import reverse<br>    from django.views import generic<br>    from django.views.decorators.http import require_POST<br>    from jfu.http import upload_receive, UploadResponse, JFUResponse<br><br>    from YOURAPP.models import YOURMODEL<br><br>    @require_POST<br>    def upload( request ):<br><br>        # The assumption here is that jQuery File Upload<br>        # has been configured to send files one at a time.<br>        # If multiple files can be uploaded simulatenously,<br>        # 'file' may be a list of files.<br>        file = upload_receive( request )<br><br>        instance = YOURMODEL( file = file )<br>        instance.save()<br><br>        basename = os.path.basename( instance.file.path )<br><br>        file_dict = {<br>            'name' : basename,<br>            'size' : file.size,<br><br>            'url': settings.MEDIA_URL + basename,<br>            'thumbnailUrl': settings.MEDIA_URL + basename,<br><br>            'deleteUrl': reverse('jfu_delete', kwargs = { 'pk': instance.pk }),<br>            'deleteType': 'POST',<br>        }<br><br>        return UploadResponse( request, file_dict )<br><br>    @require_POST<br>    def upload_delete( request, pk ):<br>        success = True<br>        try:<br>            instance = YOURMODEL.objects.get( pk = pk )<br>            os.unlink( instance.file.path )<br>            instance.delete()<br>        except YOURMODEL.DoesNotExist:<br>            success = False<br><br>        return JFUResponse( request, success )<br><br>Customization<br>-------------<br><br>Django-JFU is designed to be very customizable.  <br><br>The Django-JFU template tag optionally takes two arguments: the name of the<br>template to load and the name of the URL pointing to the upload-handling<br>view.::<br><br>    {% load jfutags %}<br>    {% jfu 'your_fileuploader.html' 'your_uploader_URL_name' %}<br><br>A custom template can extend from the master Django-JFU template<br>`jfu/upload_form.html`.  There are several blocks which may be overriden for<br>the purpose of customization:<br><br>* JS_OPTS - The options supplied to the jQuery File Upload ``fileupload`` function. <br>* JS_INIT - The initializing JavaScript<br>* FILE_INPUT - The file input for the upload form.<br><br>The blocks above are most-likely what you will want to override when seeking to<br>customize. For instance, one would go about adding a few options to the<br>fileupload function in this manner::<br><br>    # your_fileuploader.html<br>    {% extends 'jfu/upload_form.html' %}<br><br>    {% block JS_OPTS %}<br>    autoUpload: true,<br>    maxNumberOfFiles: 5,<br>    sequentialUploads: true,<br>    {% endblock %}<br><br>There are several other blocks too:<br><br><br>HTML Components<br>===============<br><br>* MODAL_GALLERY - The modal gallery<br>* UPLOAD_FORM   - The file upload form used as target for the file upload widget.<br><br>  * UPLOAD_FORM_LISTING - The table listing the files available for upload/download.<br>  * UPLOAD_FORM_LINDICATOR - The loading indicator shown during file processing.<br>  * UPLOAD_FORM_PROGRESS_BAR - The global progress information.<br>  * UPLOAD_FORM_BUTTON_BAR - The fileupload-buttonbar contains buttons to add/delete files and start/cancel the upload.<br><br>    * UPLOAD_FORM_BUTTON_BAR_CONTROL - Contains buttons to start/cancel the upload or delete files. <br>    * UPLOAD_FORM_BUTTON_BAR_ADD     - Contains the file input used to add files.<br>        * FILE_INPUT or UPLOAD_FORM_BUTTON_BAR_ADD_FILE_INPUT - Contains the file input.<br>        * UPLOAD_FORM_BUTTON_BAR_ADD_EXTRA - An empty block allowing the addition of extra inputs.<br>    * UPLOAD_FORM_BUTTON_BAR_EXTRA  - An empty block allowing the addition of extra components.<br><br>  * UPLOAD_FORM_EXTRA - An empty block allowing the addition of extra components.<br><br>CSS Components<br>==============<br><br>* CSS<br><br>  * CSS_BOOTSTRAP <br>  * CSS_BLUEIMP_GALLERY <br>  * CSS_JQUERY_FILE_UPLOAD<br>  * CSS_JQUERY_FILE_UPLOAD_UI<br>  * CSS_HTML5_SHIM <br>  * CSS_EXTRA <br><br>JS Components<br>=============<br><br>* JS_TEMPLATES <br><br>  * JS_DOWNLOAD_TEMPLATE <br><br>    * JS_DOWNLOAD_TEMPLATE_DELETE <br>    * JS_DOWNLOAD_TEMPLATE_DOWNLOAD  <br>    * JS_DOWNLOAD_TEMPLATE_PREVIEW <br>    * JS_DOWNLOAD_TEMPLATE_ERROR <br>    * JS_DOWNLOAD_TEMPLATE_FSIZE <br><br>  * JS_UPLOAD_TEMPLATE <br>    * JS_UPLOAD_TEMPLATE_PREVIEW<br>    * JS_UPLOAD_TEMPLATE_UPLOAD<br>    * JS_UPLOAD_TEMPLATE_CONTROLS<br>        * JS_UPLOAD_TEMPLATE_START<br>        * JS_UPLOAD_TEMPLATE_CANCEL<br>    * JS_UPLOAD_TEMPLATE_PROGRESSBAR<br><br>* JS_SCRIPTS    <br><br>  * JS_JQUERY <br>  * JS_JQUERY_UI_WIDGET<br>  * JS_TEMPLATES_PLUGIN<br>  * JS_LOAD_IMAGE<br>  * JS_CANVAS_TO_BLOB <br>  * JS_BOOTSTRAP <br>  * JS_BLUEIMP_GALLERY <br>  * JS_BOOTSTRAP_IFRAME_TRANSPORT<br>  * JS_JQUERY_FILE_UPLOAD<br>  * JS_JQUERY_FILE_UPLOAD_FP<br>  * JS_JQUERY_FILE_UPLOAD_IMAGE<br>  * JS_JQUERY_FILE_UPLOAD_AUDIO<br>  * JS_JQUERY_FILE_UPLOAD_VIDEO<br>  * JS_JQUERY_FILE_UPLOAD_VALIDATE<br>  * JS_JQUERY_FILEUPLOAD_UI <br>  * JS_XDR_TRANSPORT <br>  * JS_EXTRA<br><br>The included JavaScript and CSS can be updated or suppressed by overriding<br>these blocks ::<br><br>    # your_fileuploader.html<br>    {% extends 'jfu/upload_form.html' %}<br><br>    {% block JS_JQUERY %}<br>        &lt;script src={{STATIC_URL}}/js/my.newer.jquery.js /&gt;<br>    {% endblock %}<br><br>    {% block CSS_BOOTSTRAP %}<br>        {% comment %}<br>        This is already included.<br>        {% endcomment %}<br>    {% endblock %}<br><br>or by replacing the static files themselves.<br><br>Demo<br>----<br>If you have downloaded from the repository, a simple demo application has been<br>included in the 'demo' directory. <br>To test it out, enter the 'demo' directory and run ::<br><br>        ./setup &amp;&amp; ./run<br><br>Note that virtualenv is required for the demo to function.<br><br>Contribution<br>------------           <br>Django-JFU is wholly open source and welcomes contributions of any kind. Feel<br>free to either extend it, report bugs, or provide suggestions for improvements.<br>The author of Django-JFU can be contacted at alem@cidola.com.<br><br><br>\n          </div>"}, "last_serial": 3842144, "releases": {"2.1.0": [{"comment_text": "", "digests": {"md5": "e1a78f00d1781d2cfe83034f0e86142f", "sha256": "fb06a8d253a0777a3588b08493ddbf740c244a0c5cae8dc86bf33cebf0942b64"}, "downloads": -1, "filename": "django_dprog_jfu-2.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "e1a78f00d1781d2cfe83034f0e86142f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 90997, "upload_time": "2018-05-06T20:13:56", "upload_time_iso_8601": "2018-05-06T20:13:56.950199Z", "url": "https://files.pythonhosted.org/packages/ce/11/3cb712a191c4d3b08c77272043fd840c4f399bf702b7eb15f9f86755775e/django_dprog_jfu-2.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "66ce78e1f06ed68a6d49c92f08c568a1", "sha256": "f09682056e899e76ce7aa5e61e68e6c24e75f940de42509de80501b7bfbce13f"}, "downloads": -1, "filename": "django-dprog-jfu-2.1.0.tar.gz", "has_sig": false, "md5_digest": "66ce78e1f06ed68a6d49c92f08c568a1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 78467, "upload_time": "2018-05-06T20:13:58", "upload_time_iso_8601": "2018-05-06T20:13:58.778859Z", "url": "https://files.pythonhosted.org/packages/cf/51/5c0e656d38581a2634f374143d7b50be5a2085ddeecb6284a81e57d8d16c/django-dprog-jfu-2.1.0.tar.gz", "yanked": false}], "2.2.0": [{"comment_text": "", "digests": {"md5": "b17afa0a0989818b62ebbd97aeead2c9", "sha256": "a135051359b503cf889fb71b11b2b0954235ddeefb1c8fcd87224369150c2ec0"}, "downloads": -1, "filename": "django_dprog_jfu-2.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "b17afa0a0989818b62ebbd97aeead2c9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 97897, "upload_time": "2018-05-07T20:26:41", "upload_time_iso_8601": "2018-05-07T20:26:41.857350Z", "url": "https://files.pythonhosted.org/packages/46/70/893806e15a213327e291754899801be571d35de7715b632caba01b259d96/django_dprog_jfu-2.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ef52ab2ebe64d8c1b1082628f33a36b7", "sha256": "0f52d2220e51e4290c21297193a7dd0465ccc354b55990be046bde32e1e000b2"}, "downloads": -1, "filename": "django-dprog-jfu-2.2.0.tar.gz", "has_sig": false, "md5_digest": "ef52ab2ebe64d8c1b1082628f33a36b7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 83951, "upload_time": "2018-05-07T20:26:44", "upload_time_iso_8601": "2018-05-07T20:26:44.308175Z", "url": "https://files.pythonhosted.org/packages/9b/8f/f776ce43c27f177f001bdebee20a085a02a65d39efb3a56e58ae17f2553c/django-dprog-jfu-2.2.0.tar.gz", "yanked": false}], "2.2.1": [{"comment_text": "", "digests": {"md5": "93b6095e97b28785d23647571b55b944", "sha256": "5984470f189d2bc59291196f06fecfebae97d40f6165c944b9146ee790aace04"}, "downloads": -1, "filename": "django_dprog_jfu-2.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "93b6095e97b28785d23647571b55b944", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 97894, "upload_time": "2018-05-07T20:32:46", "upload_time_iso_8601": "2018-05-07T20:32:46.982519Z", "url": "https://files.pythonhosted.org/packages/15/36/2005fb533405ac454cb74da5a55641279e7e2e1aa5ea648a4ad085da28e9/django_dprog_jfu-2.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b8ef73efe19948d4ea3e3ad7bca383ea", "sha256": "65af4d813bde06911f6678ec6f6393bcc8feb12adc70d107ec3be9dad6064280"}, "downloads": -1, "filename": "django-dprog-jfu-2.2.1.tar.gz", "has_sig": false, "md5_digest": "b8ef73efe19948d4ea3e3ad7bca383ea", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 83952, "upload_time": "2018-05-07T20:32:48", "upload_time_iso_8601": "2018-05-07T20:32:48.668350Z", "url": "https://files.pythonhosted.org/packages/46/2f/bb5736c07eca2dc7e5b6cb7017fa391725182bab10210e00e6abaae29e43/django-dprog-jfu-2.2.1.tar.gz", "yanked": false}], "2.2.2": [{"comment_text": "", "digests": {"md5": "9a0bbfc96dd1d45ed587cc4572950653", "sha256": "af435d1edd2f2036c5fef5ef81d9afd3a0a786fd34df834cdba61f1c0aba5214"}, "downloads": -1, "filename": "django_dprog_jfu-2.2.2-py3-none-any.whl", "has_sig": false, "md5_digest": "9a0bbfc96dd1d45ed587cc4572950653", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7205, "upload_time": "2018-05-07T20:56:16", "upload_time_iso_8601": "2018-05-07T20:56:16.933054Z", "url": "https://files.pythonhosted.org/packages/17/bc/0d5281e2047d081482c30517a0ad9c4eab79bb9515499fea6960b0b5d59f/django_dprog_jfu-2.2.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f528dfb8a831db0bddfc6664cc011006", "sha256": "8a26ebe5689873cc5e95065e2d8e7deed09cb261c05aa52016c1cc672dd1b61c"}, "downloads": -1, "filename": "django-dprog-jfu-2.2.2.tar.gz", "has_sig": false, "md5_digest": "f528dfb8a831db0bddfc6664cc011006", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 84969, "upload_time": "2018-05-07T20:56:18", "upload_time_iso_8601": "2018-05-07T20:56:18.149729Z", "url": "https://files.pythonhosted.org/packages/4c/a6/a01e2faf9960f2ad5273b820e163ff92dc521b15ad0a394e2c692e3fb7ef/django-dprog-jfu-2.2.2.tar.gz", "yanked": false}], "2.2.3": [{"comment_text": "", "digests": {"md5": "f1b82dd0bc966985b2e992a5bc4a3385", "sha256": "3bb92e4996b21a788dd3aa60a1c3e5ad9f4fd1d2fa2a6d7e68ac601ddadf0760"}, "downloads": -1, "filename": "django_dprog_jfu-2.2.3-py3-none-any.whl", "has_sig": false, "md5_digest": "f1b82dd0bc966985b2e992a5bc4a3385", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 99324, "upload_time": "2018-05-07T21:02:39", "upload_time_iso_8601": "2018-05-07T21:02:39.019936Z", "url": "https://files.pythonhosted.org/packages/f0/41/ea0e45ccb8b2372f3764c0fee7f2ff697bc5fc43f6562900616738898068/django_dprog_jfu-2.2.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a12ef55f28b44e608b05d9c3101135c2", "sha256": "481054a11f893ca0e21e50b2fc0a35955b82dee7d67450845dd17d5848224800"}, "downloads": -1, "filename": "django-dprog-jfu-2.2.3.tar.gz", "has_sig": false, "md5_digest": "a12ef55f28b44e608b05d9c3101135c2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 84979, "upload_time": "2018-05-07T21:02:40", "upload_time_iso_8601": "2018-05-07T21:02:40.669011Z", "url": "https://files.pythonhosted.org/packages/df/c4/bf4212239eba6aa3e404c9748527e6e7dae719c7bd1e3a7c70a20e677540/django-dprog-jfu-2.2.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f1b82dd0bc966985b2e992a5bc4a3385", "sha256": "3bb92e4996b21a788dd3aa60a1c3e5ad9f4fd1d2fa2a6d7e68ac601ddadf0760"}, "downloads": -1, "filename": "django_dprog_jfu-2.2.3-py3-none-any.whl", "has_sig": false, "md5_digest": "f1b82dd0bc966985b2e992a5bc4a3385", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 99324, "upload_time": "2018-05-07T21:02:39", "upload_time_iso_8601": "2018-05-07T21:02:39.019936Z", "url": "https://files.pythonhosted.org/packages/f0/41/ea0e45ccb8b2372f3764c0fee7f2ff697bc5fc43f6562900616738898068/django_dprog_jfu-2.2.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a12ef55f28b44e608b05d9c3101135c2", "sha256": "481054a11f893ca0e21e50b2fc0a35955b82dee7d67450845dd17d5848224800"}, "downloads": -1, "filename": "django-dprog-jfu-2.2.3.tar.gz", "has_sig": false, "md5_digest": "a12ef55f28b44e608b05d9c3101135c2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 84979, "upload_time": "2018-05-07T21:02:40", "upload_time_iso_8601": "2018-05-07T21:02:40.669011Z", "url": "https://files.pythonhosted.org/packages/df/c4/bf4212239eba6aa3e404c9748527e6e7dae719c7bd1e3a7c70a20e677540/django-dprog-jfu-2.2.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:36:31 2020"}