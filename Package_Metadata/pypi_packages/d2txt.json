{"info": {"author": "pastelmind", "author_email": "keepyourhonor@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3.6"], "description": "# d2txt\n\nd2txt is a command line program that converts tabbed text (*.TXT) files used by [Diablo 2] into TOML files and back. It is intended to be a [mod-making][mod] tool.\n\nd2txt requires Python 3.6 or higher.\n\nTo install d2txt, run the following command in your terminal:\n\n```\npip install d2txt\n```\n\n## Command Line Interface\n\nd2txt can \"decompile\" Diablo 2's tabbed TXT files to [TOML] files, and compile\nthem back to TXT files. TOML files are easier to view in code editors, generates\nmore readable diffs, and play nice with version control systems like Git.\n\nCall the script using the command line:\n\n```\nd2txt decompile <txt_path> <toml_path> [<txt_path> <toml_path>...]\nd2txt compile <toml_path> <txt_path> [<txt_path> <toml_path>...]\n```\n\nYou can specify multiple files as arguments to (de)compile all of them at once.\nThis is significantly faster than calling the script for each file.\n\nDiff logs for TXT files are horrendous. See example:\n\n```diff\n--- a/data/global/excel/skills.txt\n+++ b/data/global/excel/skills.txt\n@@ -67,7 +67,7 @@\n Teeth\t67\tnec\tteeth\t\t8\t\t\t\t\t\t\t\t\t\t\t\tteeth\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tnecromancer_bone_cast\t\t\t\t\t\t\t\t\t\t\t\t\t\t19\t17\t\t\t\t\tteeth\tteeth\tbonecast\t\t\t\t\t\t\t\t\t\t1\t1\t\tnone\t\t\t\t\t\t\t\t\t\t\t\tSC\tSC\txx\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t1\t\t\t\t\t\tnecromancer_bone_cast\t\t\t1\t20\t\t\t\t\t\t\t\t\t\t\t\t\t1\t\t\t\t\t\t1\t7\t6\t1\t1\t\t\t\t\t\t\t\t\t\t\"min(ln12,24)\"\t# missiles\tpar3\tactivation frame\t\t\t\t\t2\tnumber of missiles\t1\tadditional missiles/level\t0\tAcivation frame of teeth\t\t\t\t\t\t\t\t\t15\tdamage synergy\t1\t\t\t\t\t\t\t\t7\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmag\t4\t2\t2\t3\t4\t5\t8\t2\t3\t4\t5\t6\t(skill('Bone Wall'.blvl)+skill('Bone Prison'.blvl)+skill('Bone Spear'.blvl)+skill('Bone Spirit'.blvl))*par8\t\t\t\t\t\t\t\t256\t1000\n-Bone Armor\t68\tnec\tbone armor\t\t18\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbonearmor\t\t\t\tbonearmor\t(ln12 + (skill('Bone Wall'.blvl) + skill('Bone Prison'.blvl)) * par8)*256\tbonearmormax\t(ln12 + (skill('Bone Wall'.blvl) + skill('Bone Prison'.blvl)) * par8)*256\t\t\t\t\t\t\t\t\tabsorbdamage\t22\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tnecromancer_bonearmor\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t1\t3\t\tnone\t\t\t\t\t\t\t\t\t\t\t\tSC\tSC\txx\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t1\t\t\t\t\t\tnecromancer_bonearmor\t\t\t1\t20\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t1\t8\t11\t1\t1\t1\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t20\tdamage absorbed\t10\tadditional absorbed/level\t\t\t\t\t\t\t\t\t\t\t15\tabsorb synergy\t1\t\t\t\t\t\t\t\t8\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t256\t1000\n+Bone Armor\t68\tnec\tbone armor\t\t18\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbonearmor\t\t\t\tbonearmor\t(ln12 + (skill('Bone Wall'.blvl) + skill('Bone Prison'.blvl)) * par8)*256\tbonearmormax\t(ln12 + (skill('Bone Wall'.blvl) + skill('Bone Prison'.blvl)) * par8)*256\t\t\t\t\t\t\t\t\tabsorbdamage\t22\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tnecromancer_bonearmor\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t1\t3\t\tnone\t\t\t\t\t\t\t\t\t\t\t\tSC\tSC\txx\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t1\t\t\t\t\t\tnecromancer_bonearmor\t\t\t1\t20\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t1\t8\t11\t1\t1\t1\t\t1\t100\t\t\t\t\t\t\t\t\t\t\t\t\t\t20\tdamage absorbed\t10\tadditional absorbed/level\t\t\t\t\t\t\t\t\t\t\t15\tabsorb synergy\t1\t\t\t\t\t\t\t\t8\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t256\t1000\n Skeleton Mastery\t69\tnec\tskeleton mastery\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tskel_mastery\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t1\t0\t\tnone\t\t\t\t\t\t\t\t\t\t\t\tSC\tSC\txx\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t1\t20\t\t\t\t\tRaise Skeleton\t\t\t\t\t\t\t\t\t\t\t\t\t\t0\t8\t0\t0\t1\t\t\t\t\t\t1\t\t\t\t\t\t\t\t\t\t\t\t8\tadditional hit points/level\t2\tadditional damage per level\t5\thp% per level for revive\t10\tdmg% per level for revive\t\t\t\t\t\t\t\t\t1\t\t\t\t\t\t\t\t8\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t256\t1000\n```\n\nTOML files make your diff logs readable:\n\n```diff\n--- a/toml/skills.toml\n+++ b/toml/skills.toml\n@@ -3729,6 +3729,8 @@\n lvlmana = 1\n interrupt = 1\n InTown = 1\n+periodic = 1\n+perdelay = 100\n Param1 = 20\n '*Param1 Description' = 'damage absorbed'\n Param2 = 10\n```\n\n### Column Groups\n\nWhen decompiling TXT files, d2txt groups related columns into **column groups**.\nFor example, the columns named `MinDam`, `MinLevDam1`, `MinLevDam2`,\n`MinLevDam3`, `MinLevDam4`, and `MinLevDam5` in Skills.txt are joined into a\nsingle key named `--MinDam0-5`:\n\n```toml\n--MinDam0-5 = [100, 10, 15, 20, 25, 30]\n# Equivalent to:\nMinDam = 100\nMinLevDam1 = 10\nMinLevDam2 = 15\nMinLevDam3 = 20\nMinLevDam4 = 25\nMinLevDam5 = 30\n```\n\n### Notes\n\n- Each decompiled TOML file contains a list named `columns`, as well as a table\n  named `column_groups` at the top of the file. Do not touch these, as they are\n  used by `d2txt` to compile the TOML back to a TXT file.\n- d2txt warns if a TXT file contains duplicate column names (e.g. the unused\n  `mindam` and `maxdam` columns in **`Armor.txt`**). You must remove or rename\n  such columns.\n- While Diablo 2 treats column names in a case-insensitive manner, d2txt treats\n  them case-sensitively. Since this is how Python and TOML handles strings,\n  there are no plans to fix them.\n\n## API Usage\n\nd2txt can also be used programmatically to modify TXT files.\n\nUse the `d2txt.D2TXT` class to read and write to tabbed *.TXT files.\n\nTo read a TXT file, use `D2TXT.load_txt()`:\n\n```python\nfrom d2txt import D2TXT\n\nskills_txt = D2TXT.load_txt('./data/global/excel/Skills.txt')\n```\n\nA D2TXT object can be treated like a [sequence] of rows. Each row is a\ncollection of cells, which can be accessed by column name or index:\n\n```python\n# Fire Ball is in Row 49 of Skills.txt. Since Row 1 is the header row, and list\n# indexes in Python begin at zero, Fire Ball would be at index 49 - 2 = 47.\nfire_ball = skills_txt[47]\n\n# Better way to find Fire Ball (will raise StopIteration if none is found)\n# Not: If you want to do this a lot, consider building a dict() for fast lookups\nfire_ball = next(s for s in skills_txt if s['skill'] == 'Fire Ball')\n\n# Directly read and write each cell\nprint(skills_txt[47]['EType'])      # prints \"fire\"\nprint(fire_ball['EType'])           # prints \"fire\"\n\nskills_txt[47]['EType'] = 'ltng'    # Change damage element to lightning\nfire_ball['EType'] = 'ltng'         # Same as above\n\n# To \"erase\" a cell, set it to '', 0, or any falsy value.\nskills_txt[47]['EType'] = ''\n\n# Let's double Fire Ball's mana cost.\n# Each cell value is initially a string, but you can assign other values.\nfire_ball['mana'] = int(fire_ball['mana']) * 2\nfire_ball['lvlmana'] = int(fire_ball['lvlmana']) * 2\n\n# Let's triple Fire Ball's damage.\nfire_ball['EMin'] = int(fire_ball['EMin']) * 3\nfire_ball['EMax'] = int(fire_ball['EMax']) * 3\n\nfor i in range(1, 6):\n    # Uses Python 3.6 f-strings\n    fire_ball[f'EMinLev{i}'] = int(fire_ball[f'EMinLev{i}']) * 3\n    fire_ball[f'EMaxLev{i}'] = int(fire_ball[f'EMaxLev{i}']) * 3\n```\n\n*Note: Column names are case sensitive.*\n\nTo save the modified TXT file:\n\n```python\n# This will overwrite Skills.txt. You can save it to another file if you wish.\nD2TXT.to_txt('./data/global/excel/Skills.txt')\n```\n\nFor more examples, check out the scripts in the `/samples/` directory.\n\n### Notes\n\n- You cannot add, rename, or remove columns with D2TXT. This is an intentional\n  design choice that makes D2TXT faster than [`csv.DictReader`].\n\n[TOML]: https://github.com/toml-lang/toml\n[`csv.DictReader`]: https://docs.python.org/3/library/csv.html#csv.DictReader\n[mod]: https://en.wikipedia.org/wiki/Mod_(video_gaming)\n[Diablo 2]: http://blizzard.com/diablo2/\n[sequence]: https://docs.python.org/3/glossary.html#term-sequence\n\n## Development\n\nTo develop d2txt, you will want a good Python editor. I recommend [Visual Studio Code] with the [Microsoft Python extension](https://marketplace.visualstudio.com/items?itemName=ms-python.python).\n\nTo develop d2txt, clone this repository and create a [virtual environment]. Then run the following command to install development dependencies:\n\n```sh\n# For Windows\npython -m pip install -r requirements-dev.txt\n# For non-Windows\npip install -r requirements-dev.txt\n```\n\nTo run tests within VS Code, you must install d2txt in \"development\" mode:\n\n```sh\n# For Windows\nflit install --pth-file\n# For non-Windows\nflit install\n```\n\nd2txt uses the following tools for development.\n\n* [Flit] to build source distributions and wheels.\n* [Tox] to run tests.\n* [Black] and [isort] to format code.\n* [Pylint] to check code.\n\n[Black]: https://github.com/psf/black\n[Flit]: https://flit.readthedocs.io/\n[isort]: https://timothycrosley.github.io/isort/\n[Pylint]: https://www.pylint.org/\n[Tox]: https://tox.readthedocs.io/\n[virtual environment]: https://packaging.python.org/tutorials/installing-packages/#creating-virtual-environments\n[Visual Studio Code]: https://code.visualstudio.com/\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/pastelmind/d2txt", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "d2txt", "package_url": "https://pypi.org/project/d2txt/", "platform": "", "project_url": "https://pypi.org/project/d2txt/", "project_urls": {"Homepage": "https://github.com/pastelmind/d2txt"}, "release_url": "https://pypi.org/project/d2txt/0.4.0/", "requires_dist": ["qtoml >= 0.3.0, < 1", "toml >= 0.10.0, < 1"], "requires_python": ">= 3.6", "summary": "Parses Diablo II's TXT files and converts them to TOML files.", "version": "0.4.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>d2txt</h1>\n<p>d2txt is a command line program that converts tabbed text (*.TXT) files used by <a href=\"http://blizzard.com/diablo2/\" rel=\"nofollow\">Diablo 2</a> into TOML files and back. It is intended to be a <a href=\"https://en.wikipedia.org/wiki/Mod_(video_gaming)\" rel=\"nofollow\">mod-making</a> tool.</p>\n<p>d2txt requires Python 3.6 or higher.</p>\n<p>To install d2txt, run the following command in your terminal:</p>\n<pre><code>pip install d2txt\n</code></pre>\n<h2>Command Line Interface</h2>\n<p>d2txt can \"decompile\" Diablo 2's tabbed TXT files to <a href=\"https://github.com/toml-lang/toml\" rel=\"nofollow\">TOML</a> files, and compile\nthem back to TXT files. TOML files are easier to view in code editors, generates\nmore readable diffs, and play nice with version control systems like Git.</p>\n<p>Call the script using the command line:</p>\n<pre><code>d2txt decompile &lt;txt_path&gt; &lt;toml_path&gt; [&lt;txt_path&gt; &lt;toml_path&gt;...]\nd2txt compile &lt;toml_path&gt; &lt;txt_path&gt; [&lt;txt_path&gt; &lt;toml_path&gt;...]\n</code></pre>\n<p>You can specify multiple files as arguments to (de)compile all of them at once.\nThis is significantly faster than calling the script for each file.</p>\n<p>Diff logs for TXT files are horrendous. See example:</p>\n<pre><span class=\"gd\">--- a/data/global/excel/skills.txt</span>\n<span class=\"gi\">+++ b/data/global/excel/skills.txt</span>\n<span class=\"gu\">@@ -67,7 +67,7 @@</span>\n Teeth\t67\tnec\tteeth\t\t8\t\t\t\t\t\t\t\t\t\t\t\tteeth\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tnecromancer_bone_cast\t\t\t\t\t\t\t\t\t\t\t\t\t\t19\t17\t\t\t\t\tteeth\tteeth\tbonecast\t\t\t\t\t\t\t\t\t\t1\t1\t\tnone\t\t\t\t\t\t\t\t\t\t\t\tSC\tSC\txx\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t1\t\t\t\t\t\tnecromancer_bone_cast\t\t\t1\t20\t\t\t\t\t\t\t\t\t\t\t\t\t1\t\t\t\t\t\t1\t7\t6\t1\t1\t\t\t\t\t\t\t\t\t\t\"min(ln12,24)\"\t# missiles\tpar3\tactivation frame\t\t\t\t\t2\tnumber of missiles\t1\tadditional missiles/level\t0\tAcivation frame of teeth\t\t\t\t\t\t\t\t\t15\tdamage synergy\t1\t\t\t\t\t\t\t\t7\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmag\t4\t2\t2\t3\t4\t5\t8\t2\t3\t4\t5\t6\t(skill('Bone Wall'.blvl)+skill('Bone Prison'.blvl)+skill('Bone Spear'.blvl)+skill('Bone Spirit'.blvl))*par8\t\t\t\t\t\t\t\t256\t1000\n<span class=\"gd\">-Bone Armor\t68\tnec\tbone armor\t\t18\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbonearmor\t\t\t\tbonearmor\t(ln12 + (skill('Bone Wall'.blvl) + skill('Bone Prison'.blvl)) * par8)*256\tbonearmormax\t(ln12 + (skill('Bone Wall'.blvl) + skill('Bone Prison'.blvl)) * par8)*256\t\t\t\t\t\t\t\t\tabsorbdamage\t22\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tnecromancer_bonearmor\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t1\t3\t\tnone\t\t\t\t\t\t\t\t\t\t\t\tSC\tSC\txx\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t1\t\t\t\t\t\tnecromancer_bonearmor\t\t\t1\t20\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t1\t8\t11\t1\t1\t1\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t20\tdamage absorbed\t10\tadditional absorbed/level\t\t\t\t\t\t\t\t\t\t\t15\tabsorb synergy\t1\t\t\t\t\t\t\t\t8\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t256\t1000</span>\n<span class=\"gi\">+Bone Armor\t68\tnec\tbone armor\t\t18\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbonearmor\t\t\t\tbonearmor\t(ln12 + (skill('Bone Wall'.blvl) + skill('Bone Prison'.blvl)) * par8)*256\tbonearmormax\t(ln12 + (skill('Bone Wall'.blvl) + skill('Bone Prison'.blvl)) * par8)*256\t\t\t\t\t\t\t\t\tabsorbdamage\t22\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tnecromancer_bonearmor\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t1\t3\t\tnone\t\t\t\t\t\t\t\t\t\t\t\tSC\tSC\txx\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t1\t\t\t\t\t\tnecromancer_bonearmor\t\t\t1\t20\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t1\t8\t11\t1\t1\t1\t\t1\t100\t\t\t\t\t\t\t\t\t\t\t\t\t\t20\tdamage absorbed\t10\tadditional absorbed/level\t\t\t\t\t\t\t\t\t\t\t15\tabsorb synergy\t1\t\t\t\t\t\t\t\t8\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t256\t1000</span>\n Skeleton Mastery\t69\tnec\tskeleton mastery\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tskel_mastery\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t1\t0\t\tnone\t\t\t\t\t\t\t\t\t\t\t\tSC\tSC\txx\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t1\t20\t\t\t\t\tRaise Skeleton\t\t\t\t\t\t\t\t\t\t\t\t\t\t0\t8\t0\t0\t1\t\t\t\t\t\t1\t\t\t\t\t\t\t\t\t\t\t\t8\tadditional hit points/level\t2\tadditional damage per level\t5\thp% per level for revive\t10\tdmg% per level for revive\t\t\t\t\t\t\t\t\t1\t\t\t\t\t\t\t\t8\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t256\t1000\n</pre>\n<p>TOML files make your diff logs readable:</p>\n<pre><span class=\"gd\">--- a/toml/skills.toml</span>\n<span class=\"gi\">+++ b/toml/skills.toml</span>\n<span class=\"gu\">@@ -3729,6 +3729,8 @@</span>\n lvlmana = 1\n interrupt = 1\n InTown = 1\n<span class=\"gi\">+periodic = 1</span>\n<span class=\"gi\">+perdelay = 100</span>\n Param1 = 20\n '*Param1 Description' = 'damage absorbed'\n Param2 = 10\n</pre>\n<h3>Column Groups</h3>\n<p>When decompiling TXT files, d2txt groups related columns into <strong>column groups</strong>.\nFor example, the columns named <code>MinDam</code>, <code>MinLevDam1</code>, <code>MinLevDam2</code>,\n<code>MinLevDam3</code>, <code>MinLevDam4</code>, and <code>MinLevDam5</code> in Skills.txt are joined into a\nsingle key named <code>--MinDam0-5</code>:</p>\n<pre><span class=\"err\">--</span><span class=\"n\">MinDam0-5</span> <span class=\"o\">=</span> <span class=\"k\">[100, 10, 15, 20, 25, 30]</span>\n<span class=\"c1\"># Equivalent to:</span>\n<span class=\"n\">MinDam</span> <span class=\"o\">=</span> <span class=\"mi\">100</span>\n<span class=\"n\">MinLevDam1</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>\n<span class=\"n\">MinLevDam2</span> <span class=\"o\">=</span> <span class=\"mi\">15</span>\n<span class=\"n\">MinLevDam3</span> <span class=\"o\">=</span> <span class=\"mi\">20</span>\n<span class=\"n\">MinLevDam4</span> <span class=\"o\">=</span> <span class=\"mi\">25</span>\n<span class=\"n\">MinLevDam5</span> <span class=\"o\">=</span> <span class=\"mi\">30</span>\n</pre>\n<h3>Notes</h3>\n<ul>\n<li>Each decompiled TOML file contains a list named <code>columns</code>, as well as a table\nnamed <code>column_groups</code> at the top of the file. Do not touch these, as they are\nused by <code>d2txt</code> to compile the TOML back to a TXT file.</li>\n<li>d2txt warns if a TXT file contains duplicate column names (e.g. the unused\n<code>mindam</code> and <code>maxdam</code> columns in <strong><code>Armor.txt</code></strong>). You must remove or rename\nsuch columns.</li>\n<li>While Diablo 2 treats column names in a case-insensitive manner, d2txt treats\nthem case-sensitively. Since this is how Python and TOML handles strings,\nthere are no plans to fix them.</li>\n</ul>\n<h2>API Usage</h2>\n<p>d2txt can also be used programmatically to modify TXT files.</p>\n<p>Use the <code>d2txt.D2TXT</code> class to read and write to tabbed *.TXT files.</p>\n<p>To read a TXT file, use <code>D2TXT.load_txt()</code>:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">d2txt</span> <span class=\"kn\">import</span> <span class=\"n\">D2TXT</span>\n\n<span class=\"n\">skills_txt</span> <span class=\"o\">=</span> <span class=\"n\">D2TXT</span><span class=\"o\">.</span><span class=\"n\">load_txt</span><span class=\"p\">(</span><span class=\"s1\">'./data/global/excel/Skills.txt'</span><span class=\"p\">)</span>\n</pre>\n<p>A D2TXT object can be treated like a <a href=\"https://docs.python.org/3/glossary.html#term-sequence\" rel=\"nofollow\">sequence</a> of rows. Each row is a\ncollection of cells, which can be accessed by column name or index:</p>\n<pre><span class=\"c1\"># Fire Ball is in Row 49 of Skills.txt. Since Row 1 is the header row, and list</span>\n<span class=\"c1\"># indexes in Python begin at zero, Fire Ball would be at index 49 - 2 = 47.</span>\n<span class=\"n\">fire_ball</span> <span class=\"o\">=</span> <span class=\"n\">skills_txt</span><span class=\"p\">[</span><span class=\"mi\">47</span><span class=\"p\">]</span>\n\n<span class=\"c1\"># Better way to find Fire Ball (will raise StopIteration if none is found)</span>\n<span class=\"c1\"># Not: If you want to do this a lot, consider building a dict() for fast lookups</span>\n<span class=\"n\">fire_ball</span> <span class=\"o\">=</span> <span class=\"nb\">next</span><span class=\"p\">(</span><span class=\"n\">s</span> <span class=\"k\">for</span> <span class=\"n\">s</span> <span class=\"ow\">in</span> <span class=\"n\">skills_txt</span> <span class=\"k\">if</span> <span class=\"n\">s</span><span class=\"p\">[</span><span class=\"s1\">'skill'</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s1\">'Fire Ball'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Directly read and write each cell</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">skills_txt</span><span class=\"p\">[</span><span class=\"mi\">47</span><span class=\"p\">][</span><span class=\"s1\">'EType'</span><span class=\"p\">])</span>      <span class=\"c1\"># prints \"fire\"</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">fire_ball</span><span class=\"p\">[</span><span class=\"s1\">'EType'</span><span class=\"p\">])</span>           <span class=\"c1\"># prints \"fire\"</span>\n\n<span class=\"n\">skills_txt</span><span class=\"p\">[</span><span class=\"mi\">47</span><span class=\"p\">][</span><span class=\"s1\">'EType'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'ltng'</span>    <span class=\"c1\"># Change damage element to lightning</span>\n<span class=\"n\">fire_ball</span><span class=\"p\">[</span><span class=\"s1\">'EType'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'ltng'</span>         <span class=\"c1\"># Same as above</span>\n\n<span class=\"c1\"># To \"erase\" a cell, set it to '', 0, or any falsy value.</span>\n<span class=\"n\">skills_txt</span><span class=\"p\">[</span><span class=\"mi\">47</span><span class=\"p\">][</span><span class=\"s1\">'EType'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">''</span>\n\n<span class=\"c1\"># Let's double Fire Ball's mana cost.</span>\n<span class=\"c1\"># Each cell value is initially a string, but you can assign other values.</span>\n<span class=\"n\">fire_ball</span><span class=\"p\">[</span><span class=\"s1\">'mana'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">fire_ball</span><span class=\"p\">[</span><span class=\"s1\">'mana'</span><span class=\"p\">])</span> <span class=\"o\">*</span> <span class=\"mi\">2</span>\n<span class=\"n\">fire_ball</span><span class=\"p\">[</span><span class=\"s1\">'lvlmana'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">fire_ball</span><span class=\"p\">[</span><span class=\"s1\">'lvlmana'</span><span class=\"p\">])</span> <span class=\"o\">*</span> <span class=\"mi\">2</span>\n\n<span class=\"c1\"># Let's triple Fire Ball's damage.</span>\n<span class=\"n\">fire_ball</span><span class=\"p\">[</span><span class=\"s1\">'EMin'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">fire_ball</span><span class=\"p\">[</span><span class=\"s1\">'EMin'</span><span class=\"p\">])</span> <span class=\"o\">*</span> <span class=\"mi\">3</span>\n<span class=\"n\">fire_ball</span><span class=\"p\">[</span><span class=\"s1\">'EMax'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">fire_ball</span><span class=\"p\">[</span><span class=\"s1\">'EMax'</span><span class=\"p\">])</span> <span class=\"o\">*</span> <span class=\"mi\">3</span>\n\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">):</span>\n    <span class=\"c1\"># Uses Python 3.6 f-strings</span>\n    <span class=\"n\">fire_ball</span><span class=\"p\">[</span><span class=\"sa\">f</span><span class=\"s1\">'EMinLev</span><span class=\"si\">{</span><span class=\"n\">i</span><span class=\"si\">}</span><span class=\"s1\">'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">fire_ball</span><span class=\"p\">[</span><span class=\"sa\">f</span><span class=\"s1\">'EMinLev</span><span class=\"si\">{</span><span class=\"n\">i</span><span class=\"si\">}</span><span class=\"s1\">'</span><span class=\"p\">])</span> <span class=\"o\">*</span> <span class=\"mi\">3</span>\n    <span class=\"n\">fire_ball</span><span class=\"p\">[</span><span class=\"sa\">f</span><span class=\"s1\">'EMaxLev</span><span class=\"si\">{</span><span class=\"n\">i</span><span class=\"si\">}</span><span class=\"s1\">'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">fire_ball</span><span class=\"p\">[</span><span class=\"sa\">f</span><span class=\"s1\">'EMaxLev</span><span class=\"si\">{</span><span class=\"n\">i</span><span class=\"si\">}</span><span class=\"s1\">'</span><span class=\"p\">])</span> <span class=\"o\">*</span> <span class=\"mi\">3</span>\n</pre>\n<p><em>Note: Column names are case sensitive.</em></p>\n<p>To save the modified TXT file:</p>\n<pre><span class=\"c1\"># This will overwrite Skills.txt. You can save it to another file if you wish.</span>\n<span class=\"n\">D2TXT</span><span class=\"o\">.</span><span class=\"n\">to_txt</span><span class=\"p\">(</span><span class=\"s1\">'./data/global/excel/Skills.txt'</span><span class=\"p\">)</span>\n</pre>\n<p>For more examples, check out the scripts in the <code>/samples/</code> directory.</p>\n<h3>Notes</h3>\n<ul>\n<li>You cannot add, rename, or remove columns with D2TXT. This is an intentional\ndesign choice that makes D2TXT faster than <a href=\"https://docs.python.org/3/library/csv.html#csv.DictReader\" rel=\"nofollow\"><code>csv.DictReader</code></a>.</li>\n</ul>\n<h2>Development</h2>\n<p>To develop d2txt, you will want a good Python editor. I recommend <a href=\"https://code.visualstudio.com/\" rel=\"nofollow\">Visual Studio Code</a> with the <a href=\"https://marketplace.visualstudio.com/items?itemName=ms-python.python\" rel=\"nofollow\">Microsoft Python extension</a>.</p>\n<p>To develop d2txt, clone this repository and create a <a href=\"https://packaging.python.org/tutorials/installing-packages/#creating-virtual-environments\" rel=\"nofollow\">virtual environment</a>. Then run the following command to install development dependencies:</p>\n<pre><span class=\"c1\"># For Windows</span>\npython -m pip install -r requirements-dev.txt\n<span class=\"c1\"># For non-Windows</span>\npip install -r requirements-dev.txt\n</pre>\n<p>To run tests within VS Code, you must install d2txt in \"development\" mode:</p>\n<pre><span class=\"c1\"># For Windows</span>\nflit install --pth-file\n<span class=\"c1\"># For non-Windows</span>\nflit install\n</pre>\n<p>d2txt uses the following tools for development.</p>\n<ul>\n<li><a href=\"https://flit.readthedocs.io/\" rel=\"nofollow\">Flit</a> to build source distributions and wheels.</li>\n<li><a href=\"https://tox.readthedocs.io/\" rel=\"nofollow\">Tox</a> to run tests.</li>\n<li><a href=\"https://github.com/psf/black\" rel=\"nofollow\">Black</a> and <a href=\"https://timothycrosley.github.io/isort/\" rel=\"nofollow\">isort</a> to format code.</li>\n<li><a href=\"https://www.pylint.org/\" rel=\"nofollow\">Pylint</a> to check code.</li>\n</ul>\n\n          </div>"}, "last_serial": 6805587, "releases": {"0.4.0": [{"comment_text": "", "digests": {"md5": "cbca5988c0a18f86d79929587c0396e4", "sha256": "531ca70ffb6f4645c2c42806bd02c0a28b6a4371a7be17ce98589d5d3aff4dc3"}, "downloads": -1, "filename": "d2txt-0.4.0-py3-none-any.whl", "has_sig": false, "md5_digest": "cbca5988c0a18f86d79929587c0396e4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">= 3.6", "size": 16591, "upload_time": "2020-03-13T12:28:55", "upload_time_iso_8601": "2020-03-13T12:28:55.454437Z", "url": "https://files.pythonhosted.org/packages/c7/0e/46bb2f9b2797f450c3afbd439e56c528870af5e100eb61cc58099bdfe6a6/d2txt-0.4.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "824d3a2b04706bc6fdf2f7b1f4e4a610", "sha256": "3902b59b88f51b9292cd1b3af3c9a5c1eef10dfe48594f75f07fa173c431db03"}, "downloads": -1, "filename": "d2txt-0.4.0.tar.gz", "has_sig": false, "md5_digest": "824d3a2b04706bc6fdf2f7b1f4e4a610", "packagetype": "sdist", "python_version": "source", "requires_python": ">= 3.6", "size": 20605, "upload_time": "2020-03-13T12:28:57", "upload_time_iso_8601": "2020-03-13T12:28:57.358646Z", "url": "https://files.pythonhosted.org/packages/35/48/7fdcfb71f9b4ceccd38ef7b2b0cc5f77cb17c3b75ac65723af2a378eb0ba/d2txt-0.4.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "cbca5988c0a18f86d79929587c0396e4", "sha256": "531ca70ffb6f4645c2c42806bd02c0a28b6a4371a7be17ce98589d5d3aff4dc3"}, "downloads": -1, "filename": "d2txt-0.4.0-py3-none-any.whl", "has_sig": false, "md5_digest": "cbca5988c0a18f86d79929587c0396e4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">= 3.6", "size": 16591, "upload_time": "2020-03-13T12:28:55", "upload_time_iso_8601": "2020-03-13T12:28:55.454437Z", "url": "https://files.pythonhosted.org/packages/c7/0e/46bb2f9b2797f450c3afbd439e56c528870af5e100eb61cc58099bdfe6a6/d2txt-0.4.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "824d3a2b04706bc6fdf2f7b1f4e4a610", "sha256": "3902b59b88f51b9292cd1b3af3c9a5c1eef10dfe48594f75f07fa173c431db03"}, "downloads": -1, "filename": "d2txt-0.4.0.tar.gz", "has_sig": false, "md5_digest": "824d3a2b04706bc6fdf2f7b1f4e4a610", "packagetype": "sdist", "python_version": "source", "requires_python": ">= 3.6", "size": 20605, "upload_time": "2020-03-13T12:28:57", "upload_time_iso_8601": "2020-03-13T12:28:57.358646Z", "url": "https://files.pythonhosted.org/packages/35/48/7fdcfb71f9b4ceccd38ef7b2b0cc5f77cb17c3b75ac65723af2a378eb0ba/d2txt-0.4.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:40:59 2020"}