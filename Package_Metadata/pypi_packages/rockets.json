{"info": {"author": "Daniel Nachbaur", "author_email": "bbp-open-source@googlegroups.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "License :: OSI Approved :: GNU Lesser General Public License v3 (LGPLv3)", "Operating System :: OS Independent", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Software Development :: Libraries", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "# Rockets Python Client\n\n> A small client for [Rockets](../README.md) using [JSON-RPC](https://www.jsonrpc.org) as\n> communication contract over a [WebSocket](https://developer.mozilla.org/en-US/docs/Web/API/WebSocket).\n\n[![Travis CI](https://img.shields.io/travis/BlueBrain/Rockets/master.svg?style=flat-square)](https://travis-ci.org/BlueBrain/Rockets)\n[![Updates](https://pyup.io/repos/github/BlueBrain/Rockets/shield.svg)](https://pyup.io/repos/github/BlueBrain/Rockets/)\n[![Latest version](https://img.shields.io/pypi/v/rockets.svg)](https://pypi.org/project/rockets/)\n[![Python versions](https://img.shields.io/pypi/pyversions/rockets.svg)](https://pypi.org/project/rockets/)\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/ambv/black)\n[![Language grade: Python](https://img.shields.io/lgtm/grade/python/g/BlueBrain/Rockets.svg?logo=lgtm&logoWidth=18)](https://lgtm.com/projects/g/BlueBrain/Rockets/context:python)\n\n\n# Table of Contents\n\n* [Installation](#installation)\n* [Usage](#usage)\n    * [Connection](#connection)\n    * [Notifications](#notifications)\n    * [Requests](#requests)\n    * [Batching](#batching)\n\n\n### Installation\n----------------\nYou can install this package from [PyPI](https://pypi.org/):\n```bash\npip install rockets\n```\n\n### Usage\n---------\n\n#### `Client` vs. `AsyncClient`\nRockets provides two types of clients to support asychronous and synchronous usage.\n\nThe `AsyncClient` exposes all of its functionality as `async` functions, hence an `asyncio`\n[event loop](https://docs.python.org/3/library/asyncio-eventloop.html) is needed to complete pending\nexecution via `await` or `run_until_complete()`.\n\nFor simplicity, a synchronous `Client` is provided which automagically executes in a synchronous,\nblocking fashion.\n\n#### Connection\nCreate a client and connect:\n```py\nfrom rockets import Client\n\n# client does not connect during __init__;\n# either explicit or automatically on any notify/request/send\nclient = Client('myhost:8080')\n\nclient.connect()\nprint(client.connected())\n```\n\nClose the connection with the socket cleanly:\n```py\nfrom rockets import Client\n\nclient = Client('myhost:8080')\n\nclient.connect()\nclient.disconnect()\nprint(client.connected())\n```\n\n\n#### Server messages\nListen to server notifications:\n```py\nfrom rockets import Client\n\nclient = Client('myhost:8080')\n\nclient.notifications.subscribe(lambda msg: print(\"Got message:\", msg.data))\n```\n\n**NOTE**: The notification object is of type `Notification`.\n\nListen to any server message:\n```py\nfrom rockets import Client\n\nclient = Client('myhost:8080')\n\nclient.ws_observable.subscribe(lambda msg: print(\"Got message:\", msg))\n```\n\n\n#### Notifications\nSend notifications to the server:\n```py\nfrom rockets import Client\n\nclient = Client('myhost:8080')\n\nclient.notify('mymethod', {'ping': True})\n```\n\n\n#### Requests\nMake a synchronous, blocking request:\n```py\nfrom rockets import Client\n\nclient = Client('myhost:8080')\n\nresponse = client.request('mymethod', {'ping': True})\nprint(response)\n```\n\nHandle a request error:\n```py\nfrom rockets import Client, RequestError\n\nclient = Client('myhost:8080')\n\ntry:\n    client.request('mymethod')\nexcept RequestError as err:\n    print(err.code, err.message)\n```\n\n**NOTE**: Any error that may occur will be a `RequestError`.\n\n\n#### Asynchronous requests\nMake an asynchronous request, using the `AsyncClient` and `asyncio`:\n```py\nimport asyncio\nfrom rockets import AsyncClient\n\nclient = AsyncClient('myhost:8080')\n\nrequest_task = client.async_request('mymethod', {'ping': True})\nasyncio.get_event_loop().run_until_complete(request_task)\nprint(request_task.result())\n```\n\nAlternatively, you can use `add_done_callback()` from the returned `RequestTask` which is called\nonce the request has finished:\n\n```py\nimport asyncio\nfrom rockets import AsyncClient\n\nclient = AsyncClient('myhost:8080')\n\nrequest_task = client.async_request('mymethod', {'ping': True})\nrequest_task.add_done_callback(lambda task: print(task.result()))\nasyncio.get_event_loop().run_until_complete(request_task)\n```\n\nIf the `RequestTask` is not needed, i.e. no `cancel()` or `add_progress_callback()` is desired, use\nthe `request()` coroutine:\n\n```py\nimport asyncio\nfrom rockets import AsyncClient\n\nclient = AsyncClient('myhost:8080')\n\ncoro = client.request('mymethod', {'ping': True})\nresult = asyncio.get_event_loop().run_until_complete(coro)\nprint(result)\n```\n\nIf you are already in an `async` function or in a Jupyter notebook cell, you may use `await` to\nexecute an asynchronous request:\n```py\n# Inside a notebook cell here\nimport asyncio\nfrom rockets import AsyncClient\n\nclient = AsyncClient('myhost:8080')\n\nresult = await client.request('mymethod', {'ping': True})\nprint(result)\n```\n\nCancel a request:\n```py\nfrom rockets import AsyncClient\n\nclient = AsyncClient('myhost:8080')\n\nrequest_task = client.async_request('mymethod')\nrequest_task.cancel()\n```\n\nGet progress updates for a request:\n```py\nfrom rockets import AsyncClient\n\nclient = AsyncClient('myhost:8080')\n\nrequest_task = client.async_request('mymethod')\nrequest_task.add_progress_callback(lambda progress: print(progress))\n```\n\n**NOTE**: The progress object is of type `RequestProgress`.\n\n#### Batching\nMake a batch request:\n```py\nfrom rockets import Client, Request, Notification\n\nclient = Client('myhost:8080')\n\nrequest = Request('myrequest')\nnotification = Notification('mynotify')\nresponses = client.batch([request, notification])\n\nfor response in responses:\n    print(response)\n```\n\nCancel a batch request:\n```py\nfrom rockets import AsyncClient\n\nclient = AsyncClient('myhost:8080')\n\nrequest = Request('myrequest')\nnotification = Notification('mynotify')\nrequest_task = client.async_batch([request, notification])\nrequest_task.cancel()\n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/BlueBrain/Rockets", "keywords": "rockets,websocket,json-rpc,bbp,BlueBrain", "license": "LGPLv3", "maintainer": "", "maintainer_email": "", "name": "rockets", "package_url": "https://pypi.org/project/rockets/", "platform": "", "project_url": "https://pypi.org/project/rockets/", "project_urls": {"Homepage": "https://github.com/BlueBrain/Rockets"}, "release_url": "https://pypi.org/project/rockets/1.0.2/", "requires_dist": null, "requires_python": "", "summary": "Rockets python client", "version": "1.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Rockets Python Client</h1>\n<blockquote>\n<p>A small client for <a href=\"../README.md\" rel=\"nofollow\">Rockets</a> using <a href=\"https://www.jsonrpc.org\" rel=\"nofollow\">JSON-RPC</a> as\ncommunication contract over a <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WebSocket\" rel=\"nofollow\">WebSocket</a>.</p>\n</blockquote>\n<p><a href=\"https://travis-ci.org/BlueBrain/Rockets\" rel=\"nofollow\"><img alt=\"Travis CI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3aa6819cde4ab5a24fc32dcd587a601a1222e1ee/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f426c7565427261696e2f526f636b6574732f6d61737465722e7376673f7374796c653d666c61742d737175617265\"></a>\n<a href=\"https://pyup.io/repos/github/BlueBrain/Rockets/\" rel=\"nofollow\"><img alt=\"Updates\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5850fb69a728c9a1b65a12506842d1c4a8b1a4f5/68747470733a2f2f707975702e696f2f7265706f732f6769746875622f426c7565427261696e2f526f636b6574732f736869656c642e737667\"></a>\n<a href=\"https://pypi.org/project/rockets/\" rel=\"nofollow\"><img alt=\"Latest version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a5a2150eb15cc43ca3c8a594401a9ac23b98d523/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f726f636b6574732e737667\"></a>\n<a href=\"https://pypi.org/project/rockets/\" rel=\"nofollow\"><img alt=\"Python versions\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/33476a1e858cc4b040932fda48fc37f9284b9ca1/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f726f636b6574732e737667\"></a>\n<a href=\"https://github.com/ambv/black\" rel=\"nofollow\"><img alt=\"Code style: black\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fbfdc7754183ecf079bc71ddeabaf88f6cbc5c00/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64652532307374796c652d626c61636b2d3030303030302e737667\"></a>\n<a href=\"https://lgtm.com/projects/g/BlueBrain/Rockets/context:python\" rel=\"nofollow\"><img alt=\"Language grade: Python\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6772b37a29378431106f1000d13b6c956588089c/68747470733a2f2f696d672e736869656c64732e696f2f6c67746d2f67726164652f707974686f6e2f672f426c7565427261696e2f526f636b6574732e7376673f6c6f676f3d6c67746d266c6f676f57696474683d3138\"></a></p>\n<h1>Table of Contents</h1>\n<ul>\n<li><a href=\"#installation\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"#usage\" rel=\"nofollow\">Usage</a>\n<ul>\n<li><a href=\"#connection\" rel=\"nofollow\">Connection</a></li>\n<li><a href=\"#notifications\" rel=\"nofollow\">Notifications</a></li>\n<li><a href=\"#requests\" rel=\"nofollow\">Requests</a></li>\n<li><a href=\"#batching\" rel=\"nofollow\">Batching</a></li>\n</ul>\n</li>\n</ul>\n<h3>Installation</h3>\n<hr>\n<p>You can install this package from <a href=\"https://pypi.org/\" rel=\"nofollow\">PyPI</a>:</p>\n<pre>pip install rockets\n</pre>\n<h3>Usage</h3>\n<hr>\n<h4><code>Client</code> vs. <code>AsyncClient</code></h4>\n<p>Rockets provides two types of clients to support asychronous and synchronous usage.</p>\n<p>The <code>AsyncClient</code> exposes all of its functionality as <code>async</code> functions, hence an <code>asyncio</code>\n<a href=\"https://docs.python.org/3/library/asyncio-eventloop.html\" rel=\"nofollow\">event loop</a> is needed to complete pending\nexecution via <code>await</code> or <code>run_until_complete()</code>.</p>\n<p>For simplicity, a synchronous <code>Client</code> is provided which automagically executes in a synchronous,\nblocking fashion.</p>\n<h4>Connection</h4>\n<p>Create a client and connect:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">rockets</span> <span class=\"kn\">import</span> <span class=\"n\">Client</span>\n\n<span class=\"c1\"># client does not connect during __init__;</span>\n<span class=\"c1\"># either explicit or automatically on any notify/request/send</span>\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">Client</span><span class=\"p\">(</span><span class=\"s1\">'myhost:8080'</span><span class=\"p\">)</span>\n\n<span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">connected</span><span class=\"p\">())</span>\n</pre>\n<p>Close the connection with the socket cleanly:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">rockets</span> <span class=\"kn\">import</span> <span class=\"n\">Client</span>\n\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">Client</span><span class=\"p\">(</span><span class=\"s1\">'myhost:8080'</span><span class=\"p\">)</span>\n\n<span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">()</span>\n<span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">disconnect</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">connected</span><span class=\"p\">())</span>\n</pre>\n<h4>Server messages</h4>\n<p>Listen to server notifications:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">rockets</span> <span class=\"kn\">import</span> <span class=\"n\">Client</span>\n\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">Client</span><span class=\"p\">(</span><span class=\"s1\">'myhost:8080'</span><span class=\"p\">)</span>\n\n<span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">notifications</span><span class=\"o\">.</span><span class=\"n\">subscribe</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">msg</span><span class=\"p\">:</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Got message:\"</span><span class=\"p\">,</span> <span class=\"n\">msg</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">))</span>\n</pre>\n<p><strong>NOTE</strong>: The notification object is of type <code>Notification</code>.</p>\n<p>Listen to any server message:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">rockets</span> <span class=\"kn\">import</span> <span class=\"n\">Client</span>\n\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">Client</span><span class=\"p\">(</span><span class=\"s1\">'myhost:8080'</span><span class=\"p\">)</span>\n\n<span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">ws_observable</span><span class=\"o\">.</span><span class=\"n\">subscribe</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">msg</span><span class=\"p\">:</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Got message:\"</span><span class=\"p\">,</span> <span class=\"n\">msg</span><span class=\"p\">))</span>\n</pre>\n<h4>Notifications</h4>\n<p>Send notifications to the server:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">rockets</span> <span class=\"kn\">import</span> <span class=\"n\">Client</span>\n\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">Client</span><span class=\"p\">(</span><span class=\"s1\">'myhost:8080'</span><span class=\"p\">)</span>\n\n<span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">notify</span><span class=\"p\">(</span><span class=\"s1\">'mymethod'</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">'ping'</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">})</span>\n</pre>\n<h4>Requests</h4>\n<p>Make a synchronous, blocking request:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">rockets</span> <span class=\"kn\">import</span> <span class=\"n\">Client</span>\n\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">Client</span><span class=\"p\">(</span><span class=\"s1\">'myhost:8080'</span><span class=\"p\">)</span>\n\n<span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"p\">(</span><span class=\"s1\">'mymethod'</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">'ping'</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">})</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"p\">)</span>\n</pre>\n<p>Handle a request error:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">rockets</span> <span class=\"kn\">import</span> <span class=\"n\">Client</span><span class=\"p\">,</span> <span class=\"n\">RequestError</span>\n\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">Client</span><span class=\"p\">(</span><span class=\"s1\">'myhost:8080'</span><span class=\"p\">)</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"p\">(</span><span class=\"s1\">'mymethod'</span><span class=\"p\">)</span>\n<span class=\"k\">except</span> <span class=\"n\">RequestError</span> <span class=\"k\">as</span> <span class=\"n\">err</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">err</span><span class=\"o\">.</span><span class=\"n\">code</span><span class=\"p\">,</span> <span class=\"n\">err</span><span class=\"o\">.</span><span class=\"n\">message</span><span class=\"p\">)</span>\n</pre>\n<p><strong>NOTE</strong>: Any error that may occur will be a <code>RequestError</code>.</p>\n<h4>Asynchronous requests</h4>\n<p>Make an asynchronous request, using the <code>AsyncClient</code> and <code>asyncio</code>:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n<span class=\"kn\">from</span> <span class=\"nn\">rockets</span> <span class=\"kn\">import</span> <span class=\"n\">AsyncClient</span>\n\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">AsyncClient</span><span class=\"p\">(</span><span class=\"s1\">'myhost:8080'</span><span class=\"p\">)</span>\n\n<span class=\"n\">request_task</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">async_request</span><span class=\"p\">(</span><span class=\"s1\">'mymethod'</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">'ping'</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">})</span>\n<span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">get_event_loop</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span><span class=\"n\">request_task</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">request_task</span><span class=\"o\">.</span><span class=\"n\">result</span><span class=\"p\">())</span>\n</pre>\n<p>Alternatively, you can use <code>add_done_callback()</code> from the returned <code>RequestTask</code> which is called\nonce the request has finished:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n<span class=\"kn\">from</span> <span class=\"nn\">rockets</span> <span class=\"kn\">import</span> <span class=\"n\">AsyncClient</span>\n\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">AsyncClient</span><span class=\"p\">(</span><span class=\"s1\">'myhost:8080'</span><span class=\"p\">)</span>\n\n<span class=\"n\">request_task</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">async_request</span><span class=\"p\">(</span><span class=\"s1\">'mymethod'</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">'ping'</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">})</span>\n<span class=\"n\">request_task</span><span class=\"o\">.</span><span class=\"n\">add_done_callback</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">task</span><span class=\"p\">:</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">task</span><span class=\"o\">.</span><span class=\"n\">result</span><span class=\"p\">()))</span>\n<span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">get_event_loop</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span><span class=\"n\">request_task</span><span class=\"p\">)</span>\n</pre>\n<p>If the <code>RequestTask</code> is not needed, i.e. no <code>cancel()</code> or <code>add_progress_callback()</code> is desired, use\nthe <code>request()</code> coroutine:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n<span class=\"kn\">from</span> <span class=\"nn\">rockets</span> <span class=\"kn\">import</span> <span class=\"n\">AsyncClient</span>\n\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">AsyncClient</span><span class=\"p\">(</span><span class=\"s1\">'myhost:8080'</span><span class=\"p\">)</span>\n\n<span class=\"n\">coro</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"p\">(</span><span class=\"s1\">'mymethod'</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">'ping'</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">})</span>\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">get_event_loop</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span><span class=\"n\">coro</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span>\n</pre>\n<p>If you are already in an <code>async</code> function or in a Jupyter notebook cell, you may use <code>await</code> to\nexecute an asynchronous request:</p>\n<pre><span class=\"c1\"># Inside a notebook cell here</span>\n<span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n<span class=\"kn\">from</span> <span class=\"nn\">rockets</span> <span class=\"kn\">import</span> <span class=\"n\">AsyncClient</span>\n\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">AsyncClient</span><span class=\"p\">(</span><span class=\"s1\">'myhost:8080'</span><span class=\"p\">)</span>\n\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"p\">(</span><span class=\"s1\">'mymethod'</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">'ping'</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">})</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span>\n</pre>\n<p>Cancel a request:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">rockets</span> <span class=\"kn\">import</span> <span class=\"n\">AsyncClient</span>\n\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">AsyncClient</span><span class=\"p\">(</span><span class=\"s1\">'myhost:8080'</span><span class=\"p\">)</span>\n\n<span class=\"n\">request_task</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">async_request</span><span class=\"p\">(</span><span class=\"s1\">'mymethod'</span><span class=\"p\">)</span>\n<span class=\"n\">request_task</span><span class=\"o\">.</span><span class=\"n\">cancel</span><span class=\"p\">()</span>\n</pre>\n<p>Get progress updates for a request:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">rockets</span> <span class=\"kn\">import</span> <span class=\"n\">AsyncClient</span>\n\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">AsyncClient</span><span class=\"p\">(</span><span class=\"s1\">'myhost:8080'</span><span class=\"p\">)</span>\n\n<span class=\"n\">request_task</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">async_request</span><span class=\"p\">(</span><span class=\"s1\">'mymethod'</span><span class=\"p\">)</span>\n<span class=\"n\">request_task</span><span class=\"o\">.</span><span class=\"n\">add_progress_callback</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">progress</span><span class=\"p\">:</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">progress</span><span class=\"p\">))</span>\n</pre>\n<p><strong>NOTE</strong>: The progress object is of type <code>RequestProgress</code>.</p>\n<h4>Batching</h4>\n<p>Make a batch request:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">rockets</span> <span class=\"kn\">import</span> <span class=\"n\">Client</span><span class=\"p\">,</span> <span class=\"n\">Request</span><span class=\"p\">,</span> <span class=\"n\">Notification</span>\n\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">Client</span><span class=\"p\">(</span><span class=\"s1\">'myhost:8080'</span><span class=\"p\">)</span>\n\n<span class=\"n\">request</span> <span class=\"o\">=</span> <span class=\"n\">Request</span><span class=\"p\">(</span><span class=\"s1\">'myrequest'</span><span class=\"p\">)</span>\n<span class=\"n\">notification</span> <span class=\"o\">=</span> <span class=\"n\">Notification</span><span class=\"p\">(</span><span class=\"s1\">'mynotify'</span><span class=\"p\">)</span>\n<span class=\"n\">responses</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">batch</span><span class=\"p\">([</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">notification</span><span class=\"p\">])</span>\n\n<span class=\"k\">for</span> <span class=\"n\">response</span> <span class=\"ow\">in</span> <span class=\"n\">responses</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"p\">)</span>\n</pre>\n<p>Cancel a batch request:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">rockets</span> <span class=\"kn\">import</span> <span class=\"n\">AsyncClient</span>\n\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">AsyncClient</span><span class=\"p\">(</span><span class=\"s1\">'myhost:8080'</span><span class=\"p\">)</span>\n\n<span class=\"n\">request</span> <span class=\"o\">=</span> <span class=\"n\">Request</span><span class=\"p\">(</span><span class=\"s1\">'myrequest'</span><span class=\"p\">)</span>\n<span class=\"n\">notification</span> <span class=\"o\">=</span> <span class=\"n\">Notification</span><span class=\"p\">(</span><span class=\"s1\">'mynotify'</span><span class=\"p\">)</span>\n<span class=\"n\">request_task</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">async_batch</span><span class=\"p\">([</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">notification</span><span class=\"p\">])</span>\n<span class=\"n\">request_task</span><span class=\"o\">.</span><span class=\"n\">cancel</span><span class=\"p\">()</span>\n</pre>\n\n          </div>"}, "last_serial": 5771761, "releases": {"0.1.0.dev0": [{"comment_text": "", "digests": {"md5": "2df1dddb23167362abb6f1210c7cdb43", "sha256": "dcf1cdabd82dd151ad3ee36145e884855456575947e8213a2fda9f2bfab9d618"}, "downloads": -1, "filename": "rockets-0.1.0.dev0.tar.gz", "has_sig": false, "md5_digest": "2df1dddb23167362abb6f1210c7cdb43", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11369, "upload_time": "2018-10-11T13:19:05", "upload_time_iso_8601": "2018-10-11T13:19:05.248720Z", "url": "https://files.pythonhosted.org/packages/b9/77/ac1913eb2f83b3746e064727fe012cb80bd5e2b96c978a7083c9785ae49a/rockets-0.1.0.dev0.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "032a05f217a612f7ea0a083d9f36f4e2", "sha256": "433e64b3a9ec3f2231fc7dc67f9727955a710d5bfb02e0a3a98b57d9315e4cad"}, "downloads": -1, "filename": "rockets-1.0.0.tar.gz", "has_sig": false, "md5_digest": "032a05f217a612f7ea0a083d9f36f4e2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11864, "upload_time": "2019-01-18T10:35:22", "upload_time_iso_8601": "2019-01-18T10:35:22.030803Z", "url": "https://files.pythonhosted.org/packages/eb/7d/e656ca67e6a0456dab333784fdc99ff3a1547fee5baedbb3c493124e0cb1/rockets-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "f073fe82f3df172229b3bb69aec1f3f9", "sha256": "18025e7e9656144f1a7a1d59d697abc8520f55646c0c4e83dad5db34f3f87fcd"}, "downloads": -1, "filename": "rockets-1.0.1.tar.gz", "has_sig": false, "md5_digest": "f073fe82f3df172229b3bb69aec1f3f9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11042, "upload_time": "2019-01-18T15:16:47", "upload_time_iso_8601": "2019-01-18T15:16:47.586992Z", "url": "https://files.pythonhosted.org/packages/e2/a5/967877cb4568d3cde21f1387aafbdd20dcae837e0a4a7bcde55f3f44a988/rockets-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "8f166d30cf1a4f660c13bf1b73cd4ad6", "sha256": "ce387adec8c6c983173a466ac2184c4e92c4cce3acbf538f9ca5cbaee333d86d"}, "downloads": -1, "filename": "rockets-1.0.2.tar.gz", "has_sig": false, "md5_digest": "8f166d30cf1a4f660c13bf1b73cd4ad6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11842, "upload_time": "2019-07-31T12:56:27", "upload_time_iso_8601": "2019-07-31T12:56:27.187178Z", "url": "https://files.pythonhosted.org/packages/f0/ec/561ec49e2ef7e089c5d3088aa48ef2554e3c5d7d5074452d727c06d91596/rockets-1.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "8f166d30cf1a4f660c13bf1b73cd4ad6", "sha256": "ce387adec8c6c983173a466ac2184c4e92c4cce3acbf538f9ca5cbaee333d86d"}, "downloads": -1, "filename": "rockets-1.0.2.tar.gz", "has_sig": false, "md5_digest": "8f166d30cf1a4f660c13bf1b73cd4ad6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11842, "upload_time": "2019-07-31T12:56:27", "upload_time_iso_8601": "2019-07-31T12:56:27.187178Z", "url": "https://files.pythonhosted.org/packages/f0/ec/561ec49e2ef7e089c5d3088aa48ef2554e3c5d7d5074452d727c06d91596/rockets-1.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:01:33 2020"}