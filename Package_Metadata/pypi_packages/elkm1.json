{"info": {"author": "Glenn Waters", "author_email": "gwwaters+elkm1@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6"], "description": "# Python ElkM1 library\n\nLibrary for interacting with ElkM1 alarm/automation panel.\n\nhttps://github.com/gwww/elkm1\n\n## Requirements\n\n- Python 3.5 (or higher)\n\n## Description\n\nThis package is created as a library to interact with an ElkM1 alarm/automation\npattern. The motivation to write this was to use with the Home Assistant\nautomation platform. The library can be used for writing other ElkM1 integration\napplications. The IO with the panel is asynchronous over TCP or over the\nserial port (serial port not implemented yet).\n\n## Installation\n\n```bash\n    $ pip install elkm1\n```\n\n## Overview\n\nConnect to the Elk panel:\n\n```python\n    from elkm1 import Elk\n\n    elk = Elk({'url': 'elk://192.168.1.100'})\n    elk.loop.run_until_complete(elk.connect())\n    elk.run()\n```\n\nThe above will connect to the Elk panel at IP address 192.168.1.100. the `elk://`\nprefix specifies that the connect is plaintext. Alternatively, `elks://` will \nconnect over TLS. In this case a userid and password must be specified\nand the call to `Elk` would be:\n\n```python\n    elk = Elk({'url': 'elks://192.168.1.100',\n                  'userid': 'testuser', 'password': 'testpass'})\n```\n\nThe `Elk` object supports the concept of `Elements`. An `Element`\nis the base class representation of `Zones`, `Lights`, etc. So, for\nexample there is a list of zones: `elk.zones` and each zone can be\naccessed by `elk.zones[index]`. Each element has a `__str__`\nrepresentation so that it is easy to print its contents.\n\nAll `Elements` are referenced starting at 0. Even though the Elk panel\nrefers to, for example, zones 1-208, the library references them\nas zones 0-207. All translation from base 0 to 1 and vice-versa is\nhandled internally in the `elkm1.message` module.\n\nAfter creating the `Elk` object and connecting to the panel the \nlibrary code will synchronize all the elements to the data from the Elk panel.\n\nMany Elk messages are handled by the library, caching their contents. When a\nmessage causes a change to an attribute of an `Element`,\ncallbacks are called so that user use of the library can be notified\nof changing elements. The following user code shows registering a callback:\n\n```python\n    def call_me(attribute, value):\n       print(attribute_that_changed, new_value)\n\n    for zone_number in range(Max.ZONES.value):\n      elk.zones[zone_number].add_callback(call_me)\n```\n\nThe library encodes, decodes, and processes messages to/from the\nElk panel. All the encoding and decoding is done in `elkm1.message` module.\n\nMessages received are handled with callbacks. The library \ninternally registers callbacks so that decoded messages \ncan be used to update an `Element`. The user of the\nlibrary may also register callbacks. Any particular message\nmay have multiple callbacks.\n\nWhen the message is received it is decoded \nand some validation is done. The message handler is called\nwith the fields of from the decoded message. Each type of \nmessage has parameters that match the message type. All handler parameters\nare named parameters.\n\nHere is an example of a message handler being registered and how it is called:\n\n```python\n    def zone_status_change_handler(zone_number, zone_status):\n      print(zone_number, zone_status)\n\n    add_message_handler('ZC', zone_status_change_handler)\n```\n\nThe above code registers a callback for 'ZC' (Elk zone status change)\nmessages. When a ZC message is received the handler functions are called\nwith the zone_number and zone_status.\n\n## Utilities\n\nThe `bin` directory of the library has one utility program and\na couple of example uses of the library.\n\n### `mkdoc`\n\nThe utility `mkdoc` creates a Markdown table of the list of Elk\nmessages with a check mark for those messages have encoders/decoders\nand an X for those messages are not planned to be implemented.\nThere are no parameters to `mkdoc`. It outputs to stdout.\nThe data for the report comes from the ElkM1 library code mostly.\nA couple of things are hard coded in the mkdoc script, notably\nthe \"no plans to implement\" list.\n\n### `simple`\n\nThe `simple` Python script is a trivial use of the ElkM1 library.\nIt connects to the panel, syncs to internal memory, and\ncontinues listening for any messages from the panel.\n\n### `elk`\n\nThe `elk` Python script is a bit of a command interpretor. It can run in\ntwo modes. Non-interactive mode is the default. Just run the `elk` command.\nThe non-interactive mode is similar to `simple` except there are a\ncouple of message handlers (`timeout` and `unknown` handlers).\n\nThe `elk` can also be run in interactive mode by invoking it by\n`elk -i`. In this mode is uses curses (full screen use of the terminal)\nthat has a command line and an output window. `TAB` switches between\nthe command line and output windows. In the output window the arrow keys\nand scrollwheel scroll the contents of the window.\n\nIn the command line there are a\nnumber of commands. Start with `help`. Then `help <command>` for \ndetails on each command. In general there are commands to dump the internal\nstate of elements and to invoke any of the encoders to send a message \nto the Elk panel.\n\nFor example, `light <4, 8, 12-14` would invoke the `__str__` method\nfor the light element to print the cached info for lights 0-3, 8, and 12-14.\n\nAnother example would be `pf 3` which issues the pf (Turn light off)\ncommand for light number 3 (light 4 on the panel -- remember 0\nversus 1 base).\n\nAll of the commands that send messages to the panel are automatically\ndiscovered and are all the XX_encode functions in the ``elkm1.message``\nmodule. The docstring and the XX_encode's parameters are shown as part\nof the help.\n\n## Development\n\nThis project uses `pipenv` for development dependencies. If needed,\ninstall it using `pip install pipenv`.\n\nTo get started developing:\n\n```\ngit clone https://github.com/gwww/elkm1.git\ncd elkm1\npipenv install -e . --dev\npipenv shell\nmake test # to ensure everything installed properly\n```", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/gwww/elkm1", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "elkm1", "package_url": "https://pypi.org/project/elkm1/", "platform": "", "project_url": "https://pypi.org/project/elkm1/", "project_urls": {"Homepage": "https://github.com/gwww/elkm1"}, "release_url": "https://pypi.org/project/elkm1/0.5.0/", "requires_dist": null, "requires_python": ">=3.5", "summary": "Library for interacting with ElkM1 alarm/automation panel.", "version": "0.5.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            # Python ElkM1 library<br><br>Library for interacting with ElkM1 alarm/automation panel.<br><br>https://github.com/gwww/elkm1<br><br>## Requirements<br><br>- Python 3.5 (or higher)<br><br>## Description<br><br>This package is created as a library to interact with an ElkM1 alarm/automation<br>pattern. The motivation to write this was to use with the Home Assistant<br>automation platform. The library can be used for writing other ElkM1 integration<br>applications. The IO with the panel is asynchronous over TCP or over the<br>serial port (serial port not implemented yet).<br><br>## Installation<br><br>```bash<br>    $ pip install elkm1<br>```<br><br>## Overview<br><br>Connect to the Elk panel:<br><br>```python<br>    from elkm1 import Elk<br><br>    elk = Elk({'url': 'elk://192.168.1.100'})<br>    elk.loop.run_until_complete(elk.connect())<br>    elk.run()<br>```<br><br>The above will connect to the Elk panel at IP address 192.168.1.100. the `elk://`<br>prefix specifies that the connect is plaintext. Alternatively, `elks://` will <br>connect over TLS. In this case a userid and password must be specified<br>and the call to `Elk` would be:<br><br>```python<br>    elk = Elk({'url': 'elks://192.168.1.100',<br>                  'userid': 'testuser', 'password': 'testpass'})<br>```<br><br>The `Elk` object supports the concept of `Elements`. An `Element`<br>is the base class representation of `Zones`, `Lights`, etc. So, for<br>example there is a list of zones: `elk.zones` and each zone can be<br>accessed by `elk.zones[index]`. Each element has a `__str__`<br>representation so that it is easy to print its contents.<br><br>All `Elements` are referenced starting at 0. Even though the Elk panel<br>refers to, for example, zones 1-208, the library references them<br>as zones 0-207. All translation from base 0 to 1 and vice-versa is<br>handled internally in the `elkm1.message` module.<br><br>After creating the `Elk` object and connecting to the panel the <br>library code will synchronize all the elements to the data from the Elk panel.<br><br>Many Elk messages are handled by the library, caching their contents. When a<br>message causes a change to an attribute of an `Element`,<br>callbacks are called so that user use of the library can be notified<br>of changing elements. The following user code shows registering a callback:<br><br>```python<br>    def call_me(attribute, value):<br>       print(attribute_that_changed, new_value)<br><br>    for zone_number in range(Max.ZONES.value):<br>      elk.zones[zone_number].add_callback(call_me)<br>```<br><br>The library encodes, decodes, and processes messages to/from the<br>Elk panel. All the encoding and decoding is done in `elkm1.message` module.<br><br>Messages received are handled with callbacks. The library <br>internally registers callbacks so that decoded messages <br>can be used to update an `Element`. The user of the<br>library may also register callbacks. Any particular message<br>may have multiple callbacks.<br><br>When the message is received it is decoded <br>and some validation is done. The message handler is called<br>with the fields of from the decoded message. Each type of <br>message has parameters that match the message type. All handler parameters<br>are named parameters.<br><br>Here is an example of a message handler being registered and how it is called:<br><br>```python<br>    def zone_status_change_handler(zone_number, zone_status):<br>      print(zone_number, zone_status)<br><br>    add_message_handler('ZC', zone_status_change_handler)<br>```<br><br>The above code registers a callback for 'ZC' (Elk zone status change)<br>messages. When a ZC message is received the handler functions are called<br>with the zone_number and zone_status.<br><br>## Utilities<br><br>The `bin` directory of the library has one utility program and<br>a couple of example uses of the library.<br><br>### `mkdoc`<br><br>The utility `mkdoc` creates a Markdown table of the list of Elk<br>messages with a check mark for those messages have encoders/decoders<br>and an X for those messages are not planned to be implemented.<br>There are no parameters to `mkdoc`. It outputs to stdout.<br>The data for the report comes from the ElkM1 library code mostly.<br>A couple of things are hard coded in the mkdoc script, notably<br>the \"no plans to implement\" list.<br><br>### `simple`<br><br>The `simple` Python script is a trivial use of the ElkM1 library.<br>It connects to the panel, syncs to internal memory, and<br>continues listening for any messages from the panel.<br><br>### `elk`<br><br>The `elk` Python script is a bit of a command interpretor. It can run in<br>two modes. Non-interactive mode is the default. Just run the `elk` command.<br>The non-interactive mode is similar to `simple` except there are a<br>couple of message handlers (`timeout` and `unknown` handlers).<br><br>The `elk` can also be run in interactive mode by invoking it by<br>`elk -i`. In this mode is uses curses (full screen use of the terminal)<br>that has a command line and an output window. `TAB` switches between<br>the command line and output windows. In the output window the arrow keys<br>and scrollwheel scroll the contents of the window.<br><br>In the command line there are a<br>number of commands. Start with `help`. Then `help &lt;command&gt;` for <br>details on each command. In general there are commands to dump the internal<br>state of elements and to invoke any of the encoders to send a message <br>to the Elk panel.<br><br>For example, `light &lt;4, 8, 12-14` would invoke the `__str__` method<br>for the light element to print the cached info for lights 0-3, 8, and 12-14.<br><br>Another example would be `pf 3` which issues the pf (Turn light off)<br>command for light number 3 (light 4 on the panel -- remember 0<br>versus 1 base).<br><br>All of the commands that send messages to the panel are automatically<br>discovered and are all the XX_encode functions in the ``elkm1.message``<br>module. The docstring and the XX_encode's parameters are shown as part<br>of the help.<br><br>## Development<br><br>This project uses `pipenv` for development dependencies. If needed,<br>install it using `pip install pipenv`.<br><br>To get started developing:<br><br>```<br>git clone https://github.com/gwww/elkm1.git<br>cd elkm1<br>pipenv install -e . --dev<br>pipenv shell<br>make test # to ensure everything installed properly<br>```\n          </div>"}, "last_serial": 4194618, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "eed57cc635d3b72d8ed810f27b61ea2c", "sha256": "99d88a90053b72a54b22e3304e64254aea65d1ceae9c34e6e360307196e4e16a"}, "downloads": -1, "filename": "elkm1-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "eed57cc635d3b72d8ed810f27b61ea2c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 20286, "upload_time": "2018-04-08T16:06:16", "upload_time_iso_8601": "2018-04-08T16:06:16.575086Z", "url": "https://files.pythonhosted.org/packages/07/a1/365b861725d4da77607322369b9792fc24857505fc0b8c947e96fb231da3/elkm1-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1ec2c1b6de5d42287a405c80d72168ec", "sha256": "70ce4f5bc1cc75c83f0fd7a2d47068f2a8686cc6ab598064ee6b88f2c77d803e"}, "downloads": -1, "filename": "elkm1-0.1.0.tar.gz", "has_sig": false, "md5_digest": "1ec2c1b6de5d42287a405c80d72168ec", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 19903, "upload_time": "2018-04-08T16:06:17", "upload_time_iso_8601": "2018-04-08T16:06:17.689510Z", "url": "https://files.pythonhosted.org/packages/46/54/94acf33924a63678e32f1b4444a4525725701643b4b4075d4b6c36371dd6/elkm1-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "32a967345193fb266654cc822ba06c9e", "sha256": "f1e90c7d20c9ed6b803eb32f9bdf704a16fcdd061e2850f648ef467a65e385f6"}, "downloads": -1, "filename": "elkm1-0.1.1.tar.gz", "has_sig": false, "md5_digest": "32a967345193fb266654cc822ba06c9e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 23901, "upload_time": "2018-04-09T00:54:50", "upload_time_iso_8601": "2018-04-09T00:54:50.371285Z", "url": "https://files.pythonhosted.org/packages/05/45/d4dfbeb397a16ab28a28c684e4b7708519c5098407844e4ab1ed7ebe4569/elkm1-0.1.1.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "84770b91a904cf33a957bda244954127", "sha256": "3a6a57ae6de5bfc3bab5f473e97f269e0736127dfc64b2ccfc1635befcdeb833"}, "downloads": -1, "filename": "elkm1-0.2.0.tar.gz", "has_sig": false, "md5_digest": "84770b91a904cf33a957bda244954127", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 24424, "upload_time": "2018-04-13T18:14:24", "upload_time_iso_8601": "2018-04-13T18:14:24.946046Z", "url": "https://files.pythonhosted.org/packages/e5/9b/e3679b332d4b3c3301945bf6561fcbe69d5924b830ce89993f045846c70c/elkm1-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "b5d28017553b3e0d16e8da96795baccc", "sha256": "83ae67b07e1384507f12b74d57f9fad357fbd6d00eada77f8d6f37151c0137ae"}, "downloads": -1, "filename": "elkm1-0.2.1.tar.gz", "has_sig": false, "md5_digest": "b5d28017553b3e0d16e8da96795baccc", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 29913, "upload_time": "2018-04-13T20:33:15", "upload_time_iso_8601": "2018-04-13T20:33:15.088056Z", "url": "https://files.pythonhosted.org/packages/2e/73/3cb746e0e233f40c1a59f5214e1ff02de7f54ad9166574258e54f8788689/elkm1-0.2.1.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "1463fd6b2439a4b62dec80e51c522986", "sha256": "48fde036cf0b33cd2b537cfa1f5758486045acef5ca0e9bfd24309d72698cd3c"}, "downloads": -1, "filename": "elkm1-0.3.0.tar.gz", "has_sig": false, "md5_digest": "1463fd6b2439a4b62dec80e51c522986", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 25876, "upload_time": "2018-04-17T22:15:50", "upload_time_iso_8601": "2018-04-17T22:15:50.444297Z", "url": "https://files.pythonhosted.org/packages/f6/71/1261b065ed743e2216ed9ff46a626f0b4f908e2866904710c4943272ee70/elkm1-0.3.0.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "9f602859e902cb19122b18bb771a78c8", "sha256": "bb4762e3359ba3206b5c01e967149e4220cdef141c2ab3ee22fcddef431de882"}, "downloads": -1, "filename": "elkm1-0.3.1.tar.gz", "has_sig": false, "md5_digest": "9f602859e902cb19122b18bb771a78c8", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 31363, "upload_time": "2018-04-17T23:57:50", "upload_time_iso_8601": "2018-04-17T23:57:50.457973Z", "url": "https://files.pythonhosted.org/packages/eb/0f/3983cd4d793901b2499c8f7cafa38ab8f9c0a939235c9edf1f940c60cff8/elkm1-0.3.1.tar.gz", "yanked": false}], "0.3.2": [{"comment_text": "", "digests": {"md5": "ae7a2018edf31facca5598c9725d5f79", "sha256": "7590e840a00eb297966e13f189be4da7464f0102d010e607af11efbc0ea9d65c"}, "downloads": -1, "filename": "elkm1-0.3.2.tar.gz", "has_sig": false, "md5_digest": "ae7a2018edf31facca5598c9725d5f79", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 31702, "upload_time": "2018-04-18T01:28:14", "upload_time_iso_8601": "2018-04-18T01:28:14.535974Z", "url": "https://files.pythonhosted.org/packages/11/84/be3968a0fab082d5d5dd1b82900781a342681c9d8d9400c43e2e3adf9240/elkm1-0.3.2.tar.gz", "yanked": false}], "0.3.3": [{"comment_text": "", "digests": {"md5": "3e5005c10d8b829aff4c61eef65ca4c0", "sha256": "2ec681cd214827b40aba264b6e775308e4c9eee6992ad30c93db7bf9180423de"}, "downloads": -1, "filename": "elkm1-0.3.3.tar.gz", "has_sig": false, "md5_digest": "3e5005c10d8b829aff4c61eef65ca4c0", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 26333, "upload_time": "2018-04-19T23:43:09", "upload_time_iso_8601": "2018-04-19T23:43:09.163866Z", "url": "https://files.pythonhosted.org/packages/d1/d1/70f12842378e713fddbaa2afc12f82414c2553972c36d3b9dd13e80ef896/elkm1-0.3.3.tar.gz", "yanked": false}], "0.3.5": [{"comment_text": "", "digests": {"md5": "77e6c78898b81628e3bdd8f54edafe99", "sha256": "3cfd70155a7cbd77cede4c1085a27088376c77eb6b3736f166f1362a9b1d9723"}, "downloads": -1, "filename": "elkm1-0.3.5.tar.gz", "has_sig": false, "md5_digest": "77e6c78898b81628e3bdd8f54edafe99", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 26511, "upload_time": "2018-04-22T01:38:38", "upload_time_iso_8601": "2018-04-22T01:38:38.423693Z", "url": "https://files.pythonhosted.org/packages/59/2c/5265d99991abbbc12c0dc231e5bece28bc5c791df75eec2d3743b0942aaf/elkm1-0.3.5.tar.gz", "yanked": false}], "0.3.6": [{"comment_text": "", "digests": {"md5": "e9169b12203878293b5b2868118ca124", "sha256": "a2df25579497da6957b06e2d10142aa06a91da9df9313fec251e44662af27b9e"}, "downloads": -1, "filename": "elkm1-0.3.6.tar.gz", "has_sig": false, "md5_digest": "e9169b12203878293b5b2868118ca124", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 26667, "upload_time": "2018-04-25T01:42:25", "upload_time_iso_8601": "2018-04-25T01:42:25.161979Z", "url": "https://files.pythonhosted.org/packages/30/0e/aa73f6a5ac9156307ec8a2736439536c3ddc54043bf1e0f78b8417a545df/elkm1-0.3.6.tar.gz", "yanked": false}], "0.3.7": [{"comment_text": "", "digests": {"md5": "5c7a20b4809dfe27c26f27a60496f339", "sha256": "4748a36d534a4100e24324f61a0968d85b65073d694d5cc83738d253d3de3459"}, "downloads": -1, "filename": "elkm1-0.3.7.tar.gz", "has_sig": false, "md5_digest": "5c7a20b4809dfe27c26f27a60496f339", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 29221, "upload_time": "2018-04-29T21:07:00", "upload_time_iso_8601": "2018-04-29T21:07:00.906501Z", "url": "https://files.pythonhosted.org/packages/93/a6/7fdcfa9050fc1c4afefd05d25d70a94277adc6fe374d7706791099bfcb1d/elkm1-0.3.7.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "d9512496c5babc8f71de23f58f831c2d", "sha256": "91a45ea67df870536536ea23dad4c125092edfc981b4e5628f285a33456becc4"}, "downloads": -1, "filename": "elkm1-0.4.0.tar.gz", "has_sig": false, "md5_digest": "d9512496c5babc8f71de23f58f831c2d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 29348, "upload_time": "2018-05-02T12:36:28", "upload_time_iso_8601": "2018-05-02T12:36:28.527123Z", "url": "https://files.pythonhosted.org/packages/86/0f/7cefe6b5208c3f840b0e40adfeb667c46afd53058915ca843a5a90b6417c/elkm1-0.4.0.tar.gz", "yanked": false}], "0.4.1": [{"comment_text": "", "digests": {"md5": "193ef19811dd76b691c0a1b62b814b22", "sha256": "8c4d672a62e439750ca1ace382a8e5708ec360c33419fda5792ffa818ba5c245"}, "downloads": -1, "filename": "elkm1-0.4.1.tar.gz", "has_sig": false, "md5_digest": "193ef19811dd76b691c0a1b62b814b22", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 29374, "upload_time": "2018-05-03T19:53:01", "upload_time_iso_8601": "2018-05-03T19:53:01.299506Z", "url": "https://files.pythonhosted.org/packages/a6/1c/1f3cbb1fe262153ade1f9b37ea801af016e8442225471f2198534b1a3983/elkm1-0.4.1.tar.gz", "yanked": false}], "0.4.2": [{"comment_text": "", "digests": {"md5": "614ff21cb246b6182315f95e39bf4dff", "sha256": "809ebcf5b13df46bebbdc763e5fd528c15a1d8db218b6da0be569a15b6c54ce4"}, "downloads": -1, "filename": "elkm1-0.4.2.tar.gz", "has_sig": false, "md5_digest": "614ff21cb246b6182315f95e39bf4dff", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 29559, "upload_time": "2018-05-13T14:42:14", "upload_time_iso_8601": "2018-05-13T14:42:14.822597Z", "url": "https://files.pythonhosted.org/packages/4f/0d/78f24a23f28e432d7dc19cdbf30c2e542a36c567e9b2f63bd49239ba4813/elkm1-0.4.2.tar.gz", "yanked": false}], "0.4.3": [{"comment_text": "", "digests": {"md5": "dc8eef69311ecf085158997d0df3aa56", "sha256": "433bc72b5b104555a168c397cb782356376d582283f5dac99da41d09cd3c6d3a"}, "downloads": -1, "filename": "elkm1-0.4.3.tar.gz", "has_sig": false, "md5_digest": "dc8eef69311ecf085158997d0df3aa56", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 28113, "upload_time": "2018-05-13T14:50:19", "upload_time_iso_8601": "2018-05-13T14:50:19.810738Z", "url": "https://files.pythonhosted.org/packages/2f/4f/e3ea5dffd48c591b9713023de26ab51c88c5a06f7c566fd762479759b772/elkm1-0.4.3.tar.gz", "yanked": false}], "0.4.5": [{"comment_text": "", "digests": {"md5": "72a4812b4281d2ece836482cb10fea49", "sha256": "4c003958e3695c219cbea6446a4cd495847b8296705de0415db537b5d13a1194"}, "downloads": -1, "filename": "elkm1-0.4.5.tar.gz", "has_sig": false, "md5_digest": "72a4812b4281d2ece836482cb10fea49", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 28309, "upload_time": "2018-06-04T00:16:56", "upload_time_iso_8601": "2018-06-04T00:16:56.940176Z", "url": "https://files.pythonhosted.org/packages/f9/04/ca01f6529795d36f7ca7c93274d7de38a81085fdc7ae8292d89221d76420/elkm1-0.4.5.tar.gz", "yanked": false}], "0.4.6": [{"comment_text": "", "digests": {"md5": "44c5ce667cc3d6bce4ede9070ca11e16", "sha256": "ee1170078d8a43d65b6719a1283dc780108e1de98f6b7c870ab9b8b8908087ba"}, "downloads": -1, "filename": "elkm1-0.4.6.tar.gz", "has_sig": false, "md5_digest": "44c5ce667cc3d6bce4ede9070ca11e16", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 28316, "upload_time": "2018-06-04T00:54:27", "upload_time_iso_8601": "2018-06-04T00:54:27.055710Z", "url": "https://files.pythonhosted.org/packages/5d/0a/3251c1d41ef76e7af6a2d8a3c1cda6ca3ad203306d93d5c1be965c4dcb9b/elkm1-0.4.6.tar.gz", "yanked": false}], "0.4.7": [{"comment_text": "", "digests": {"md5": "b355eef8fa9d5e88ca0304ab62f63217", "sha256": "5caacaf972ec87a6a281ffdc44710855d0e68c3e883274897cf9fe619d7c4f7d"}, "downloads": -1, "filename": "elkm1-0.4.7.tar.gz", "has_sig": false, "md5_digest": "b355eef8fa9d5e88ca0304ab62f63217", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 28629, "upload_time": "2018-07-02T17:54:25", "upload_time_iso_8601": "2018-07-02T17:54:25.297108Z", "url": "https://files.pythonhosted.org/packages/bc/91/d2d8b101ff8cf8c18f641ea398951538113b05fe79c601074ce16f3757be/elkm1-0.4.7.tar.gz", "yanked": false}], "0.4.8": [{"comment_text": "", "digests": {"md5": "b72e7764600d4a22c19424725a045099", "sha256": "40159007d277851597c820759a181aa4fea33dda344a7019d9ec67d869fa4b6a"}, "downloads": -1, "filename": "elkm1-0.4.8.tar.gz", "has_sig": false, "md5_digest": "b72e7764600d4a22c19424725a045099", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 28671, "upload_time": "2018-08-17T02:48:42", "upload_time_iso_8601": "2018-08-17T02:48:42.390297Z", "url": "https://files.pythonhosted.org/packages/96/89/eb0eea92325921133f0799c8e297dc0605ff639bc4084ea23461efb47de0/elkm1-0.4.8.tar.gz", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "fdb3702aba2eb66bec75e3fa4defcc6b", "sha256": "801817b3dca294b839766f33d1a9f9cc507ecee68babade40fc5f1e2ebd58e57"}, "downloads": -1, "filename": "elkm1-0.5.0.tar.gz", "has_sig": false, "md5_digest": "fdb3702aba2eb66bec75e3fa4defcc6b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 28706, "upload_time": "2018-08-22T01:12:59", "upload_time_iso_8601": "2018-08-22T01:12:59.192893Z", "url": "https://files.pythonhosted.org/packages/a0/80/7c98ccbe8e7283da160b181576a8da888f8e939f147e42526e1a1a5c43f2/elkm1-0.5.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "fdb3702aba2eb66bec75e3fa4defcc6b", "sha256": "801817b3dca294b839766f33d1a9f9cc507ecee68babade40fc5f1e2ebd58e57"}, "downloads": -1, "filename": "elkm1-0.5.0.tar.gz", "has_sig": false, "md5_digest": "fdb3702aba2eb66bec75e3fa4defcc6b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 28706, "upload_time": "2018-08-22T01:12:59", "upload_time_iso_8601": "2018-08-22T01:12:59.192893Z", "url": "https://files.pythonhosted.org/packages/a0/80/7c98ccbe8e7283da160b181576a8da888f8e939f147e42526e1a1a5c43f2/elkm1-0.5.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:46:48 2020"}