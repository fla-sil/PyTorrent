{"info": {"author": "Luis Pedro Coelho", "author_email": "luis@luispedro.org", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Software Development :: Libraries"], "description": "# Disk-based hashtable\n\n[![Travis](https://api.travis-ci.org/luispedro/diskhash.png)](https://travis-ci.org/luispedro/diskhash)\n[![License: MIT](https://img.shields.io/badge/License-MIT-blue.svg)](https://opensource.org/licenses/MIT)\n\n\nA simple disk-based hash table (i.e., persistent hash table).\n\nIt is a hashtable implemented on memory-mapped disk, so that it can be loaded\nwith a single `mmap()` system call and used in memory directly (being as fast\nas an in-memory hashtable once it is loaded from disk).\n\nThe code is in C, wrappers are provided for Python, Haskell, and C++. The\nwrappers follow similar APIs with variations to accommodate the language\nspecificity. They all use the same underlying code, so you can open a hashtable\ncreated in C from Haskell, modify it within your Haskell code, and later open\nthe result in Python.\n\nCross-language functionality will only work for simple types where you can\ncontrol their binary representation (64-bit integers, for example).\n\nReading does not touch the disk representation at all and, thus, can be done on\ntop of read-only files or using multiple threads (and different processes will\nshare the memory: the operating system does that for you). Writing or modifying\nvalues is, however, not thread-safe.\n\n## Examples\n\nThe following examples all create a hashtable to store longs (`int64_t`), then\nset the value associated with the key `\"key\"` to 9. In the current API, the\nmaximum size of the keys needs to be pre-specified, which is the value `15`\nbelow.\n\n### Raw C\n\n```c\n#include <stdio.h>\n#include <inttypes.h>\n#include \"diskhash.h\"\n\nint main(void) {\n    HashTableOpts opts;\n    opts.key_maxlen = 15;\n    opts.object_datalen = sizeof(int64_t);\n    char* err = NULL;\n    HashTable* ht = dht_open(\"testing.dht\", opts, O_RDWR|O_CREAT, &err);\n    if (!ht) {\n        if (!err) err = \"Unknown error\";\n        fprintf(stderr, \"Failed opening hash table: %s.\\n\", err);\n        return 1;\n    }\n    long i = 9;\n    dht_insert(ht, \"key\", &i);\n    \n    long* val = (long*) dht_lookup(ht, \"key\");\n    printf(\"Looked up value: %l\\n\", *val);\n\n    dht_free(ht);\n    return 0;\n}\n```\n\nThe C API relies on error codes and error strings (the `&err` argument above).\nThe header file has [decent\ndocumentation](https://github.com/luispedro/diskhash/blob/master/src/diskhash.h).\n\n### Haskell\n\nIn Haskell, you have different types/functions for read-write and read-only\nhashtables. Read-write operations are `IO` operations, read-only hashtables are\npure.\n\nRead write example:\n\n```haskell\nimport Data.DiskHash\nimport Data.Int\nmain = do\n    ht <- htOpenRW \"testing.dht\" 15\n    htInsertRW ht \"key\" (9 :: Int64)\n    val <- htLookupRW \"key\" ht\n    print val\n```\n\nRead only example (`htLookupRO` is pure in this case):\n\n```haskell\nimport Data.DiskHash\nimport Data.Int\nmain = do\n    ht <- htOpenRO \"testing.dht\" 15\n    let val :: Int64\n        val = htLookupRO \"key\" ht\n    print val\n```\n\n\n### Python\n\nPython's interface is based on the [struct\nmodule](https://docs.python.org/3/library/struct.html). For example, `'ll'`\nrefers to a pair of 64-bit ints (_longs_):\n\n```python\nimport diskhash\ntb = diskhash.StructHash(\"testing.dht\", 15, 'll', 'rw')\ntb.insert(\"key\", 1, 2)\nprint(tb.lookup(\"key\"))\n```\n\nThe Python interface is currently Python 3 only. Patches to extend it to 2.7\nare welcome, but it's not a priority.\n\n\n### C++\n\nIn C++, a simple wrapper is defined, which provides a modicum of type-safety.\nYou use the `DiskHash<T>` template. Additionally, errors are reported through\nexceptions (both `std::bad_alloc` and `std::runtime_error` can be thrown) and\nnot return codes.\n\n```c++\n#include <iostream>\n#include <string>\n\n#include <diskhash.hpp>\n\nint main() {\n    const int key_maxlen = 15;\n    dht::DiskHash<uint64_t> ht(\"testing.dht\", key_maxlen, dht::DHOpenRW);\n    std::string line;\n    uint64_t ix = 0;\n    while (std::getline(std::cine, line)) {\n        if (line.length() > key_maxlen) {\n            std::cerr << \"Key too long: '\" << line << \"'. Aborting.\\n\";\n            return 2;\n        }\n        const bool inserted = ht.insert(line.c_str(), ix);\n        if (!inserted) {\n            std::cerr  << \"Found repeated key '\" << line << \"' (ignored).\\n\";\n        }\n        ++ix;\n    }\n    return 0;\n}\n```\n\n## Stability\n\nThis is _beta_ software. It is good enough that I am using it, but the API can\nchange in the future with little warning. The binary format is versioned (the\nmagic string encodes its version, so changes can be detected and you will get\nan error message in the future rather than some silent misbehaviour.\n\n[Automated unit testing](https://travis-ci.org/luispedro/diskhash) ensures that\nbasic mistakes will not go uncaught.\n\n## Limitations\n\n- You must specify the maximum key size. This can be worked around either by\n  pre-hashing the keys (with a strong hash) or using multiple hash tables for\n  different key sizes. Neither is currently implemented in diskhash.\n\n- You cannot delete objects. This was not a necessity for my uses, so it was\n  not implemented. A simple implementation could be done by marking objects as\n  \"deleted\" in place and recompacting when the hash table size changes or with\n  an explicit `dht_gc()` call. It may also be important to add functionality to\n  shrink hashtables so as to not waste disk space.\n\n- The algorithm is a rather na\u00efve implementation of linear addression. It would\n  not be hard to switch to [robin hood\n  hashing](https://www.sebastiansylvan.com/post/robin-hood-hashing-should-be-your-default-hash-table-implementation/)\n  and this may indeed happen in the near future.\n\nLicense: MIT", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/luispedro/diskhash", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "diskhash", "package_url": "https://pypi.org/project/diskhash/", "platform": "Any", "project_url": "https://pypi.org/project/diskhash/", "project_urls": {"Homepage": "https://github.com/luispedro/diskhash"}, "release_url": "https://pypi.org/project/diskhash/0.4.2/", "requires_dist": null, "requires_python": "", "summary": "Disk-based hashtable", "version": "0.4.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Disk-based hashtable</h1>\n<p><a href=\"https://travis-ci.org/luispedro/diskhash\" rel=\"nofollow\"><img alt=\"Travis\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0e53174470a4f8a4f422dee3f13c66e0809b3dbc/68747470733a2f2f6170692e7472617669732d63692e6f72672f6c756973706564726f2f6469736b686173682e706e67\"></a>\n<a href=\"https://opensource.org/licenses/MIT\" rel=\"nofollow\"><img alt=\"License: MIT\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4150014b4dfdd7b565fa18de88e9bb1b8ccd7c08/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d4d49542d626c75652e737667\"></a></p>\n<p>A simple disk-based hash table (i.e., persistent hash table).</p>\n<p>It is a hashtable implemented on memory-mapped disk, so that it can be loaded\nwith a single <code>mmap()</code> system call and used in memory directly (being as fast\nas an in-memory hashtable once it is loaded from disk).</p>\n<p>The code is in C, wrappers are provided for Python, Haskell, and C++. The\nwrappers follow similar APIs with variations to accommodate the language\nspecificity. They all use the same underlying code, so you can open a hashtable\ncreated in C from Haskell, modify it within your Haskell code, and later open\nthe result in Python.</p>\n<p>Cross-language functionality will only work for simple types where you can\ncontrol their binary representation (64-bit integers, for example).</p>\n<p>Reading does not touch the disk representation at all and, thus, can be done on\ntop of read-only files or using multiple threads (and different processes will\nshare the memory: the operating system does that for you). Writing or modifying\nvalues is, however, not thread-safe.</p>\n<h2>Examples</h2>\n<p>The following examples all create a hashtable to store longs (<code>int64_t</code>), then\nset the value associated with the key <code>\"key\"</code> to 9. In the current API, the\nmaximum size of the keys needs to be pre-specified, which is the value <code>15</code>\nbelow.</p>\n<h3>Raw C</h3>\n<pre><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;stdio.h&gt;</span><span class=\"cp\"></span>\n<span class=\"cp\">#include</span> <span class=\"cpf\">&lt;inttypes.h&gt;</span><span class=\"cp\"></span>\n<span class=\"cp\">#include</span> <span class=\"cpf\">\"diskhash.h\"</span><span class=\"cp\"></span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"n\">HashTableOpts</span> <span class=\"n\">opts</span><span class=\"p\">;</span>\n    <span class=\"n\">opts</span><span class=\"p\">.</span><span class=\"n\">key_maxlen</span> <span class=\"o\">=</span> <span class=\"mi\">15</span><span class=\"p\">;</span>\n    <span class=\"n\">opts</span><span class=\"p\">.</span><span class=\"n\">object_datalen</span> <span class=\"o\">=</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"kt\">int64_t</span><span class=\"p\">);</span>\n    <span class=\"kt\">char</span><span class=\"o\">*</span> <span class=\"n\">err</span> <span class=\"o\">=</span> <span class=\"nb\">NULL</span><span class=\"p\">;</span>\n    <span class=\"n\">HashTable</span><span class=\"o\">*</span> <span class=\"n\">ht</span> <span class=\"o\">=</span> <span class=\"n\">dht_open</span><span class=\"p\">(</span><span class=\"s\">\"testing.dht\"</span><span class=\"p\">,</span> <span class=\"n\">opts</span><span class=\"p\">,</span> <span class=\"n\">O_RDWR</span><span class=\"o\">|</span><span class=\"n\">O_CREAT</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">err</span><span class=\"p\">);</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">ht</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">err</span><span class=\"p\">)</span> <span class=\"n\">err</span> <span class=\"o\">=</span> <span class=\"s\">\"Unknown error\"</span><span class=\"p\">;</span>\n        <span class=\"n\">fprintf</span><span class=\"p\">(</span><span class=\"n\">stderr</span><span class=\"p\">,</span> <span class=\"s\">\"Failed opening hash table: %s.</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span> <span class=\"n\">err</span><span class=\"p\">);</span>\n        <span class=\"k\">return</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"kt\">long</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">9</span><span class=\"p\">;</span>\n    <span class=\"n\">dht_insert</span><span class=\"p\">(</span><span class=\"n\">ht</span><span class=\"p\">,</span> <span class=\"s\">\"key\"</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">i</span><span class=\"p\">);</span>\n    \n    <span class=\"kt\">long</span><span class=\"o\">*</span> <span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"kt\">long</span><span class=\"o\">*</span><span class=\"p\">)</span> <span class=\"n\">dht_lookup</span><span class=\"p\">(</span><span class=\"n\">ht</span><span class=\"p\">,</span> <span class=\"s\">\"key\"</span><span class=\"p\">);</span>\n    <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">\"Looked up value: %l</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">val</span><span class=\"p\">);</span>\n\n    <span class=\"n\">dht_free</span><span class=\"p\">(</span><span class=\"n\">ht</span><span class=\"p\">);</span>\n    <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre>\n<p>The C API relies on error codes and error strings (the <code>&amp;err</code> argument above).\nThe header file has <a href=\"https://github.com/luispedro/diskhash/blob/master/src/diskhash.h\" rel=\"nofollow\">decent\ndocumentation</a>.</p>\n<h3>Haskell</h3>\n<p>In Haskell, you have different types/functions for read-write and read-only\nhashtables. Read-write operations are <code>IO</code> operations, read-only hashtables are\npure.</p>\n<p>Read write example:</p>\n<pre><span class=\"kr\">import</span> <span class=\"nn\">Data.DiskHash</span>\n<span class=\"kr\">import</span> <span class=\"nn\">Data.Int</span>\n<span class=\"nf\">main</span> <span class=\"ow\">=</span> <span class=\"kr\">do</span>\n    <span class=\"n\">ht</span> <span class=\"ow\">&lt;-</span> <span class=\"n\">htOpenRW</span> <span class=\"s\">\"testing.dht\"</span> <span class=\"mi\">15</span>\n    <span class=\"n\">htInsertRW</span> <span class=\"n\">ht</span> <span class=\"s\">\"key\"</span> <span class=\"p\">(</span><span class=\"mi\">9</span> <span class=\"ow\">::</span> <span class=\"kt\">Int64</span><span class=\"p\">)</span>\n    <span class=\"n\">val</span> <span class=\"ow\">&lt;-</span> <span class=\"n\">htLookupRW</span> <span class=\"s\">\"key\"</span> <span class=\"n\">ht</span>\n    <span class=\"n\">print</span> <span class=\"n\">val</span>\n</pre>\n<p>Read only example (<code>htLookupRO</code> is pure in this case):</p>\n<pre><span class=\"kr\">import</span> <span class=\"nn\">Data.DiskHash</span>\n<span class=\"kr\">import</span> <span class=\"nn\">Data.Int</span>\n<span class=\"nf\">main</span> <span class=\"ow\">=</span> <span class=\"kr\">do</span>\n    <span class=\"n\">ht</span> <span class=\"ow\">&lt;-</span> <span class=\"n\">htOpenRO</span> <span class=\"s\">\"testing.dht\"</span> <span class=\"mi\">15</span>\n    <span class=\"kr\">let</span> <span class=\"n\">val</span> <span class=\"ow\">::</span> <span class=\"kt\">Int64</span>\n        <span class=\"n\">val</span> <span class=\"ow\">=</span> <span class=\"n\">htLookupRO</span> <span class=\"s\">\"key\"</span> <span class=\"n\">ht</span>\n    <span class=\"n\">print</span> <span class=\"n\">val</span>\n</pre>\n<h3>Python</h3>\n<p>Python's interface is based on the <a href=\"https://docs.python.org/3/library/struct.html\" rel=\"nofollow\">struct\nmodule</a>. For example, <code>'ll'</code>\nrefers to a pair of 64-bit ints (<em>longs</em>):</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">diskhash</span>\n<span class=\"n\">tb</span> <span class=\"o\">=</span> <span class=\"n\">diskhash</span><span class=\"o\">.</span><span class=\"n\">StructHash</span><span class=\"p\">(</span><span class=\"s2\">\"testing.dht\"</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"s1\">'ll'</span><span class=\"p\">,</span> <span class=\"s1\">'rw'</span><span class=\"p\">)</span>\n<span class=\"n\">tb</span><span class=\"o\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"s2\">\"key\"</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">tb</span><span class=\"o\">.</span><span class=\"n\">lookup</span><span class=\"p\">(</span><span class=\"s2\">\"key\"</span><span class=\"p\">))</span>\n</pre>\n<p>The Python interface is currently Python 3 only. Patches to extend it to 2.7\nare welcome, but it's not a priority.</p>\n<h3>C++</h3>\n<p>In C++, a simple wrapper is defined, which provides a modicum of type-safety.\nYou use the <code>DiskHash&lt;T&gt;</code> template. Additionally, errors are reported through\nexceptions (both <code>std::bad_alloc</code> and <code>std::runtime_error</code> can be thrown) and\nnot return codes.</p>\n<pre><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;iostream&gt;</span><span class=\"cp\"></span>\n<span class=\"cp\">#include</span> <span class=\"cpf\">&lt;string&gt;</span><span class=\"cp\"></span>\n\n<span class=\"cp\">#include</span> <span class=\"cpf\">&lt;diskhash.hpp&gt;</span><span class=\"cp\"></span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">key_maxlen</span> <span class=\"o\">=</span> <span class=\"mi\">15</span><span class=\"p\">;</span>\n    <span class=\"n\">dht</span><span class=\"o\">::</span><span class=\"n\">DiskHash</span><span class=\"o\">&lt;</span><span class=\"kt\">uint64_t</span><span class=\"o\">&gt;</span> <span class=\"n\">ht</span><span class=\"p\">(</span><span class=\"s\">\"testing.dht\"</span><span class=\"p\">,</span> <span class=\"n\">key_maxlen</span><span class=\"p\">,</span> <span class=\"n\">dht</span><span class=\"o\">::</span><span class=\"n\">DHOpenRW</span><span class=\"p\">);</span>\n    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span> <span class=\"n\">line</span><span class=\"p\">;</span>\n    <span class=\"kt\">uint64_t</span> <span class=\"n\">ix</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">getline</span><span class=\"p\">(</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cine</span><span class=\"p\">,</span> <span class=\"n\">line</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">line</span><span class=\"p\">.</span><span class=\"n\">length</span><span class=\"p\">()</span> <span class=\"o\">&gt;</span> <span class=\"n\">key_maxlen</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cerr</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\"Key too long: '\"</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">line</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\"'. Aborting.</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">;</span>\n            <span class=\"k\">return</span> <span class=\"mi\">2</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">const</span> <span class=\"kt\">bool</span> <span class=\"n\">inserted</span> <span class=\"o\">=</span> <span class=\"n\">ht</span><span class=\"p\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"n\">line</span><span class=\"p\">.</span><span class=\"n\">c_str</span><span class=\"p\">(),</span> <span class=\"n\">ix</span><span class=\"p\">);</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">inserted</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cerr</span>  <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\"Found repeated key '\"</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">line</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\"' (ignored).</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"o\">++</span><span class=\"n\">ix</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre>\n<h2>Stability</h2>\n<p>This is <em>beta</em> software. It is good enough that I am using it, but the API can\nchange in the future with little warning. The binary format is versioned (the\nmagic string encodes its version, so changes can be detected and you will get\nan error message in the future rather than some silent misbehaviour.</p>\n<p><a href=\"https://travis-ci.org/luispedro/diskhash\" rel=\"nofollow\">Automated unit testing</a> ensures that\nbasic mistakes will not go uncaught.</p>\n<h2>Limitations</h2>\n<ul>\n<li>\n<p>You must specify the maximum key size. This can be worked around either by\npre-hashing the keys (with a strong hash) or using multiple hash tables for\ndifferent key sizes. Neither is currently implemented in diskhash.</p>\n</li>\n<li>\n<p>You cannot delete objects. This was not a necessity for my uses, so it was\nnot implemented. A simple implementation could be done by marking objects as\n\"deleted\" in place and recompacting when the hash table size changes or with\nan explicit <code>dht_gc()</code> call. It may also be important to add functionality to\nshrink hashtables so as to not waste disk space.</p>\n</li>\n<li>\n<p>The algorithm is a rather na\u00efve implementation of linear addression. It would\nnot be hard to switch to <a href=\"https://www.sebastiansylvan.com/post/robin-hood-hashing-should-be-your-default-hash-table-implementation/\" rel=\"nofollow\">robin hood\nhashing</a>\nand this may indeed happen in the near future.</p>\n</li>\n</ul>\n<p>License: MIT</p>\n\n          </div>"}, "last_serial": 6117499, "releases": {"0.0": [{"comment_text": "", "digests": {"md5": "181ebb87395ff5a6afec489edc8b6b7e", "sha256": "ea0dab0c1105e319bed0f9efc8a091d716bc9ae65e33463c14eaecc30f5a680d"}, "downloads": -1, "filename": "diskhash-0.0.tar.gz", "has_sig": false, "md5_digest": "181ebb87395ff5a6afec489edc8b6b7e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12366, "upload_time": "2017-06-26T11:52:14", "upload_time_iso_8601": "2017-06-26T11:52:14.609075Z", "url": "https://files.pythonhosted.org/packages/7a/c4/1886751c936bfb5a829d2b4496276f1790996994a37ac36959b015b893c3/diskhash-0.0.tar.gz", "yanked": false}], "0.1": [{"comment_text": "", "digests": {"md5": "0e85ceada1877ec709c1f804dba13e72", "sha256": "28f02eba67b7a3a035bee8e1e5d7d6cbaefd13b5d7105fec2437922810760524"}, "downloads": -1, "filename": "diskhash-0.1.tar.gz", "has_sig": false, "md5_digest": "0e85ceada1877ec709c1f804dba13e72", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13673, "upload_time": "2017-09-07T17:39:05", "upload_time_iso_8601": "2017-09-07T17:39:05.646487Z", "url": "https://files.pythonhosted.org/packages/e0/1f/719e9cb17800d581758e2d8a449ccd525ef59483edf0f4a415c2bc3f18f4/diskhash-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "29c4fd393e45ffc41f03fed7a988c395", "sha256": "928765ac86f6e2ba25ab98ca176a7d9ab7db32bd15f4d7ad6c043f0939cc5e35"}, "downloads": -1, "filename": "diskhash-0.2.tar.gz", "has_sig": false, "md5_digest": "29c4fd393e45ffc41f03fed7a988c395", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14037, "upload_time": "2017-10-05T19:00:33", "upload_time_iso_8601": "2017-10-05T19:00:33.166553Z", "url": "https://files.pythonhosted.org/packages/b2/5f/a11fbf960a20be7d49ae2bc2915b4bf0618cd0bb477f9afb8461fd005a9c/diskhash-0.2.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "6733a0a7075b3dfc9863e1f08f1f6ad8", "sha256": "002e5f1c0656770e7dd2b55b38b07bc27a3b5daae172f206baea1f1c7cd5206e"}, "downloads": -1, "filename": "diskhash-0.2.1.tar.gz", "has_sig": false, "md5_digest": "6733a0a7075b3dfc9863e1f08f1f6ad8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14248, "upload_time": "2017-10-13T09:33:19", "upload_time_iso_8601": "2017-10-13T09:33:19.010469Z", "url": "https://files.pythonhosted.org/packages/77/7e/4ab51713941a6d9a20150d4affe3588364374f929c71fe9da1c4f45dbd6c/diskhash-0.2.1.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "d02d53227c04fc1910cb1dd59ed260a8", "sha256": "488100384f046bdc5c791626437ddc511b65866f5819c14cd227f257bdb95c9c"}, "downloads": -1, "filename": "diskhash-0.2.2.tar.gz", "has_sig": false, "md5_digest": "d02d53227c04fc1910cb1dd59ed260a8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14447, "upload_time": "2017-10-23T07:37:05", "upload_time_iso_8601": "2017-10-23T07:37:05.610316Z", "url": "https://files.pythonhosted.org/packages/76/f2/6473ca2e99a604d49de621e07ac343a675484cbc06d28a26f56853d57864/diskhash-0.2.2.tar.gz", "yanked": false}], "0.2.3": [{"comment_text": "", "digests": {"md5": "7c0dec078783643d46b5c86c55834e4b", "sha256": "3dc6e4fb29eaf11f17dc2c2996628d50a17964c64a9efa9762b9bb456e2d3d1a"}, "downloads": -1, "filename": "diskhash-0.2.3.tar.gz", "has_sig": false, "md5_digest": "7c0dec078783643d46b5c86c55834e4b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14357, "upload_time": "2017-10-24T17:07:35", "upload_time_iso_8601": "2017-10-24T17:07:35.339365Z", "url": "https://files.pythonhosted.org/packages/eb/9a/210309c826967cb75a7412f35d8e58e4cf2b502af0efff60d5e4d22654e8/diskhash-0.2.3.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "e34e1721fee06400432275d48d07f9f0", "sha256": "d1d02f8fbdeaef5e58f4f6370c5d127d58c00fc6fab7c4bbb1efed104a8aff11"}, "downloads": -1, "filename": "diskhash-0.3.0.tar.gz", "has_sig": false, "md5_digest": "e34e1721fee06400432275d48d07f9f0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14616, "upload_time": "2017-11-09T14:00:05", "upload_time_iso_8601": "2017-11-09T14:00:05.047780Z", "url": "https://files.pythonhosted.org/packages/ef/38/cd0ddba69f8b81e259914d37a5108292cc4851b51fff0f55314bc8f86d08/diskhash-0.3.0.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "c4a97dfd09a8ebe9b0287582f63db35d", "sha256": "a07792fa283822588b6053586a755ac2c94bbd00a0dcfdc70abd2d8046916c4e"}, "downloads": -1, "filename": "diskhash-0.3.1.tar.gz", "has_sig": false, "md5_digest": "c4a97dfd09a8ebe9b0287582f63db35d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18072, "upload_time": "2017-11-09T14:14:22", "upload_time_iso_8601": "2017-11-09T14:14:22.759354Z", "url": "https://files.pythonhosted.org/packages/55/ee/4de0075b466255a1d7965f96fdbff662a34d1f83bc1cf691b8639b47964e/diskhash-0.3.1.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "f6a2b4832d5dae4f05c0d0b1a6fe6e7e", "sha256": "f59622ec007b9c91f94c7257b9ae365dc0ad9f01a134c6d3af19b0a56e67da6f"}, "downloads": -1, "filename": "diskhash-0.4.0.tar.gz", "has_sig": false, "md5_digest": "f6a2b4832d5dae4f05c0d0b1a6fe6e7e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18572, "upload_time": "2017-11-27T18:12:30", "upload_time_iso_8601": "2017-11-27T18:12:30.004856Z", "url": "https://files.pythonhosted.org/packages/1e/a4/672ea698c480c44025dd6f82ea2fe1482814d18cc33f0ddac97f8972b860/diskhash-0.4.0.tar.gz", "yanked": false}], "0.4.1": [{"comment_text": "", "digests": {"md5": "5b9e09e57518c7b149e53b5ac88dca2f", "sha256": "8dc22fd19703822e224256ae6ce6e5d5f5bb311fc8fdf6d54993f4fe58e21ace"}, "downloads": -1, "filename": "diskhash-0.4.1.tar.gz", "has_sig": false, "md5_digest": "5b9e09e57518c7b149e53b5ac88dca2f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20738, "upload_time": "2019-11-05T09:11:06", "upload_time_iso_8601": "2019-11-05T09:11:06.334627Z", "url": "https://files.pythonhosted.org/packages/38/fc/d3ecd8c9dd3d51a9af1e0139c2a962cb621e933468a152f131e272ddddd1/diskhash-0.4.1.tar.gz", "yanked": false}], "0.4.2": [{"comment_text": "", "digests": {"md5": "4246990398130d9851e927481bbe8ffb", "sha256": "189a828317da4983df5169bc9513a61a500798d35b1e3a30b42883af8a799088"}, "downloads": -1, "filename": "diskhash-0.4.2.tar.gz", "has_sig": false, "md5_digest": "4246990398130d9851e927481bbe8ffb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20779, "upload_time": "2019-11-11T15:17:31", "upload_time_iso_8601": "2019-11-11T15:17:31.862439Z", "url": "https://files.pythonhosted.org/packages/1f/35/3c82bc7f82103290d8b4da8908ad836724059bcaf2205ebe7831f16f0be7/diskhash-0.4.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4246990398130d9851e927481bbe8ffb", "sha256": "189a828317da4983df5169bc9513a61a500798d35b1e3a30b42883af8a799088"}, "downloads": -1, "filename": "diskhash-0.4.2.tar.gz", "has_sig": false, "md5_digest": "4246990398130d9851e927481bbe8ffb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20779, "upload_time": "2019-11-11T15:17:31", "upload_time_iso_8601": "2019-11-11T15:17:31.862439Z", "url": "https://files.pythonhosted.org/packages/1f/35/3c82bc7f82103290d8b4da8908ad836724059bcaf2205ebe7831f16f0be7/diskhash-0.4.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:38:08 2020"}