{"info": {"author": "Lin Xiao", "author_email": "lin.xiao@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "# Accelerated Bregman Proximal Gradient Methods\n\nA Python package of accelerated first-order algorithms for solving relatively-smooth convex optimization problems\n\n    minimize { f(x) + P(x) | x in C }\n\nwith a reference function h(x), where C is a closed convex set and\n\n* h(x) is convex and essentially smooth on C;\n* f(x) is convex and differentiable, and L-smooth relative to h(x), that is, f(x)-L*h(x) is convex;\n* P(x) is convex and closed (lower semi-continuous).\n\n### Implemented algorithms in [HRX2018](https://arxiv.org/abs/1808.03045):\n\n* BPG(Bregman proximal gradient) method with line search option\n* ABPG (Accelerated BPG) method\n* ABPG-expo (ABPG with exponent adaption)\n* ABPG-gain (ABPG with gain adaption)\n* ABDA (Accelerated Bregman dual averaging) method\n\nAdditional algorithms for solving D-Optimal Experiment Design problems:\n\n* D_opt_FW (basic Frank-Wolfe method)\n* D_opt_FW_away (Frank-Wolfe method with away steps)\n\n## Install\n\nClone or fork from GitHub. Or install from PyPI:\n\n    pip install accbpg\n\n## Usage\n\nExample: generate a random instance of D-optimal design problem and solve it using two different methods.\n\n```python\nimport accbpg\n\n# generate a random instance of D-optimal design problem of size 80 by 200\nf, h, L, x0 = accbpg.D_opt_design(80, 200)\n\n# solve the problem instance using BPG with line search\nx1, F1, G1, T1 = accbpg.BPG(f, h, L, x0, maxitrs=1000, verbskip=100)\n\n# solve it again using ABPG with gamma=2\nx2, F2, G2, T2 = accbpg.ABPG(f, h, L, x0, gamma=2, maxitrs=1000, verbskip=100)\n\n# solve it again using adaptive variant of ABPG with gamma=2\nx3, F3, G3, _, _, T3 = accbpg.ABPG_gain(f, h, L, x0, gamma=2, maxitrs=1000, verbskip=100)\n```\n\nD-optimal experiment design problems can be constructed from files (LIBSVM format) directly using\n\n```python\nf, h, L, X0 = accbpg.D_opt_libsvm(filename)\n```\n\nAll algorithms can work with customized functions f(x) and h(x), and an example is given in [this Python file](accbpg/ex_LR_L2L1Linf.py).\n\n### Additional examples\n\n* A complete example with visualization is given in this [Jupyter Notebook](ipynb/ex_Dopt_random.ipynb).\n\n* All examples in [HRX2018](https://arxiv.org/abs/1808.03045) can be found in the [ipynb](ipynb/) directory.\n\n* Comparisons with the Frank-Wolfe method can be found in [ipynb/ABPGvsFW](ipynb/ABPGvsFW/).\n\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Microsoft/accbpg", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "accbpg", "package_url": "https://pypi.org/project/accbpg/", "platform": "", "project_url": "https://pypi.org/project/accbpg/", "project_urls": {"Homepage": "https://github.com/Microsoft/accbpg"}, "release_url": "https://pypi.org/project/accbpg/0.2/", "requires_dist": ["numpy", "scipy"], "requires_python": "", "summary": "Accelerated Bregman proximal gradient (ABPG) methods", "version": "0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Accelerated Bregman Proximal Gradient Methods</h1>\n<p>A Python package of accelerated first-order algorithms for solving relatively-smooth convex optimization problems</p>\n<pre><code>minimize { f(x) + P(x) | x in C }\n</code></pre>\n<p>with a reference function h(x), where C is a closed convex set and</p>\n<ul>\n<li>h(x) is convex and essentially smooth on C;</li>\n<li>f(x) is convex and differentiable, and L-smooth relative to h(x), that is, f(x)-L*h(x) is convex;</li>\n<li>P(x) is convex and closed (lower semi-continuous).</li>\n</ul>\n<h3>Implemented algorithms in <a href=\"https://arxiv.org/abs/1808.03045\" rel=\"nofollow\">HRX2018</a>:</h3>\n<ul>\n<li>BPG(Bregman proximal gradient) method with line search option</li>\n<li>ABPG (Accelerated BPG) method</li>\n<li>ABPG-expo (ABPG with exponent adaption)</li>\n<li>ABPG-gain (ABPG with gain adaption)</li>\n<li>ABDA (Accelerated Bregman dual averaging) method</li>\n</ul>\n<p>Additional algorithms for solving D-Optimal Experiment Design problems:</p>\n<ul>\n<li>D_opt_FW (basic Frank-Wolfe method)</li>\n<li>D_opt_FW_away (Frank-Wolfe method with away steps)</li>\n</ul>\n<h2>Install</h2>\n<p>Clone or fork from GitHub. Or install from PyPI:</p>\n<pre><code>pip install accbpg\n</code></pre>\n<h2>Usage</h2>\n<p>Example: generate a random instance of D-optimal design problem and solve it using two different methods.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">accbpg</span>\n\n<span class=\"c1\"># generate a random instance of D-optimal design problem of size 80 by 200</span>\n<span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"n\">h</span><span class=\"p\">,</span> <span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"n\">x0</span> <span class=\"o\">=</span> <span class=\"n\">accbpg</span><span class=\"o\">.</span><span class=\"n\">D_opt_design</span><span class=\"p\">(</span><span class=\"mi\">80</span><span class=\"p\">,</span> <span class=\"mi\">200</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># solve the problem instance using BPG with line search</span>\n<span class=\"n\">x1</span><span class=\"p\">,</span> <span class=\"n\">F1</span><span class=\"p\">,</span> <span class=\"n\">G1</span><span class=\"p\">,</span> <span class=\"n\">T1</span> <span class=\"o\">=</span> <span class=\"n\">accbpg</span><span class=\"o\">.</span><span class=\"n\">BPG</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"n\">h</span><span class=\"p\">,</span> <span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"n\">x0</span><span class=\"p\">,</span> <span class=\"n\">maxitrs</span><span class=\"o\">=</span><span class=\"mi\">1000</span><span class=\"p\">,</span> <span class=\"n\">verbskip</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># solve it again using ABPG with gamma=2</span>\n<span class=\"n\">x2</span><span class=\"p\">,</span> <span class=\"n\">F2</span><span class=\"p\">,</span> <span class=\"n\">G2</span><span class=\"p\">,</span> <span class=\"n\">T2</span> <span class=\"o\">=</span> <span class=\"n\">accbpg</span><span class=\"o\">.</span><span class=\"n\">ABPG</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"n\">h</span><span class=\"p\">,</span> <span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"n\">x0</span><span class=\"p\">,</span> <span class=\"n\">gamma</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">maxitrs</span><span class=\"o\">=</span><span class=\"mi\">1000</span><span class=\"p\">,</span> <span class=\"n\">verbskip</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># solve it again using adaptive variant of ABPG with gamma=2</span>\n<span class=\"n\">x3</span><span class=\"p\">,</span> <span class=\"n\">F3</span><span class=\"p\">,</span> <span class=\"n\">G3</span><span class=\"p\">,</span> <span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">T3</span> <span class=\"o\">=</span> <span class=\"n\">accbpg</span><span class=\"o\">.</span><span class=\"n\">ABPG_gain</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"n\">h</span><span class=\"p\">,</span> <span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"n\">x0</span><span class=\"p\">,</span> <span class=\"n\">gamma</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">maxitrs</span><span class=\"o\">=</span><span class=\"mi\">1000</span><span class=\"p\">,</span> <span class=\"n\">verbskip</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">)</span>\n</pre>\n<p>D-optimal experiment design problems can be constructed from files (LIBSVM format) directly using</p>\n<pre><span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"n\">h</span><span class=\"p\">,</span> <span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"n\">X0</span> <span class=\"o\">=</span> <span class=\"n\">accbpg</span><span class=\"o\">.</span><span class=\"n\">D_opt_libsvm</span><span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"p\">)</span>\n</pre>\n<p>All algorithms can work with customized functions f(x) and h(x), and an example is given in <a href=\"accbpg/ex_LR_L2L1Linf.py\" rel=\"nofollow\">this Python file</a>.</p>\n<h3>Additional examples</h3>\n<ul>\n<li>\n<p>A complete example with visualization is given in this <a href=\"ipynb/ex_Dopt_random.ipynb\" rel=\"nofollow\">Jupyter Notebook</a>.</p>\n</li>\n<li>\n<p>All examples in <a href=\"https://arxiv.org/abs/1808.03045\" rel=\"nofollow\">HRX2018</a> can be found in the <a href=\"ipynb/\" rel=\"nofollow\">ipynb</a> directory.</p>\n</li>\n<li>\n<p>Comparisons with the Frank-Wolfe method can be found in <a href=\"ipynb/ABPGvsFW/\" rel=\"nofollow\">ipynb/ABPGvsFW</a>.</p>\n</li>\n</ul>\n\n          </div>"}, "last_serial": 7086751, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "f87201ec84c29d2d6e4a8f7df5f0253d", "sha256": "d3f5bad00d00b142a05eb4dfb3cebf9fb43b0bc14d6d425131f0189c86b49045"}, "downloads": -1, "filename": "accbpg-0.1.tar.gz", "has_sig": false, "md5_digest": "f87201ec84c29d2d6e4a8f7df5f0253d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11231, "upload_time": "2018-08-12T17:56:43", "upload_time_iso_8601": "2018-08-12T17:56:43.521922Z", "url": "https://files.pythonhosted.org/packages/22/87/f20896f715a24d5e6b565d2bae30b30926d7541c9b607d0ff920393baa2e/accbpg-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "17aa88795efdf9113991eec144cab4ca", "sha256": "3acfbb9ea9c7a11166e6a48a5dbafe0f31f7de8c79e1c3acb6916df103962086"}, "downloads": -1, "filename": "accbpg-0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "17aa88795efdf9113991eec144cab4ca", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 18286, "upload_time": "2020-04-23T19:24:45", "upload_time_iso_8601": "2020-04-23T19:24:45.289984Z", "url": "https://files.pythonhosted.org/packages/31/7c/bdd2adaf52dedf76bd809b303414ea821827260ebefebd7a815ca3d1a724/accbpg-0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bb4916527bff465bf904f7af7937e567", "sha256": "e0681dc59393df908ed5f210abae4482f5969639f67f5ee9b207ca6797b9e0ba"}, "downloads": -1, "filename": "accbpg-0.2.tar.gz", "has_sig": false, "md5_digest": "bb4916527bff465bf904f7af7937e567", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15069, "upload_time": "2020-04-23T19:24:46", "upload_time_iso_8601": "2020-04-23T19:24:46.284553Z", "url": "https://files.pythonhosted.org/packages/1f/0c/c6d891139e70bdf34e6166d5f595f176b661589138681f392ca9edf5942e/accbpg-0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "17aa88795efdf9113991eec144cab4ca", "sha256": "3acfbb9ea9c7a11166e6a48a5dbafe0f31f7de8c79e1c3acb6916df103962086"}, "downloads": -1, "filename": "accbpg-0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "17aa88795efdf9113991eec144cab4ca", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 18286, "upload_time": "2020-04-23T19:24:45", "upload_time_iso_8601": "2020-04-23T19:24:45.289984Z", "url": "https://files.pythonhosted.org/packages/31/7c/bdd2adaf52dedf76bd809b303414ea821827260ebefebd7a815ca3d1a724/accbpg-0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bb4916527bff465bf904f7af7937e567", "sha256": "e0681dc59393df908ed5f210abae4482f5969639f67f5ee9b207ca6797b9e0ba"}, "downloads": -1, "filename": "accbpg-0.2.tar.gz", "has_sig": false, "md5_digest": "bb4916527bff465bf904f7af7937e567", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15069, "upload_time": "2020-04-23T19:24:46", "upload_time_iso_8601": "2020-04-23T19:24:46.284553Z", "url": "https://files.pythonhosted.org/packages/1f/0c/c6d891139e70bdf34e6166d5f595f176b661589138681f392ca9edf5942e/accbpg-0.2.tar.gz", "yanked": false}], "timestamp": "Thu May  7 16:24:52 2020"}