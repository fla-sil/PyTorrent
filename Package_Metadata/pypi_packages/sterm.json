{"info": {"author": "Ralf Stemmer", "author_email": "ralf.stemmer@gmx.net", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Console", "Intended Audience :: Developers", "Intended Audience :: Education", "Intended Audience :: End Users/Desktop", "Intended Audience :: Science/Research", "Intended Audience :: System Administrators", "License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Operating System :: POSIX :: Linux", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Communications", "Topic :: Scientific/Engineering", "Topic :: Software Development :: Debuggers", "Topic :: Software Development :: Embedded Systems", "Topic :: System :: Logging", "Topic :: System :: Monitoring", "Topic :: Terminals", "Topic :: Terminals :: Serial", "Topic :: Utilities"], "description": "<h3 align=\"center\">sterm</h3>\n\n<div align=\"center\">\n  Status: Active - License: GPL v3\n</div>\n\n---\n\n<p align=\"center\"> sterm is a minimal serial terminal that focus on being easy to use. - This client just does its job.\n    <br/>\n</p>\n\n\n## \ud83d\udcdd Table of Contents\n- [About](#about)\n- [Getting Started](#getting_started)\n- [Usage](#usage)\n- [Built Using](#built_using)\n- [Acknowledgments](#acknowledgement)\n\n\n## \ud83e\uddd0 About <a name = \"about\"></a>\n\n**sterm** is a minimal serial terminal that focus on being easy to use and not sucking. - This client simply works.\nIt has inline input and supports Unicode (utf-8).\nEach character typed gets directly send to the connected device without buffering.\nIt writes whatever it receives to *stdout* so that also Unicode and ANSI escape sequences work as expected.\n\n### Core Use-Cases\n\n*Ideal for debugging:*<br/>\nWith the ``--binary`` option, the received data will be output byte wise as hexadecimal numbers.\n\n*Ideal for a remote Linux shell:*<br/>\nWith the ``--noecho`` option, each character typed gets directly send to the connected device without buffering and echoing.\nThis makes the Linux console usage seamlessly like using telnet or ssh.\n\n### Core Features\n\n- Inline input\n- No line buffering\n- Unicode support\n- ANSI Escape Sequences supported\n- No GUI\n\n\n## \ud83c\udfc1 Getting Started <a name = \"getting_started\"></a>\n\nThere are two ways to install _sterm_.\nDirectly using `pip` or from the cloned repository.\n\n### Installation using pip\n\n```bash\npip install sterm\n```\n\n### Installation from Repository\n\n```bash\n# Download\ngit clone https://github.com/rstemmer/sterm.git\ncd sterm\n\n# Dependencies\npip install pyserial\n\n# Install Package\npip install .\n\n```\n\n\n## \ud83c\udf88 Usage <a name=\"usage\"></a>\n\n*sterm* has three interfaces:\n\n1. Configuration files\n2. The command line interface\n3. Escape commands\n\n### Configuration via files\n\nTODO - Not yet implemented.\n\n### Command Line Arguments\n\n```bash\nsterm [-h] [--noecho] [--escape character] [--binary] [-b BAUDRATE] [-f FORMAT] [-w logfile] DEVICE\n```\n\nWhen a command line argument is contradictory to a setting in the configuration files, the command line argument has higher priority.\n\n  * __-h__: Print help.\n  * __-n__: Enable _noecho_ mode. _Default_ is echoing each entered key to _stdout_.\n  * __--escape__: Define an alternative escape character. _Default_ is escape (\"\\e\").\n  * __--binary__: Print hexadecimal values instead of Unicode characters. (Only applied on output, input will still be UTF-8)\n  * __-b__: Baudrate. _Default:_ 115200 baud.\n  * __-f__: Configuration-triple: xyz with x = bytelength in bits {5,6,7,8}; y = parity {N,E,O}; z = stopbits {1,2}. _Default:_ \"8N1\" - _8_ data bits, _no_ parity bits and _1_ stop bit.\n  * __-w__: Write received data into a file.\n\n_DEVICE_ is the path to the serial terminal.\nFor example _/dev/ttyS0_, _/dev/ttyUSB0_, _/dev/ttyUART0_, _/dev/ttyACM0_, _/dev/pts/42_.\n\nFor details read the man-page.\n\n### Escape commands\n\nThe following strings can be entered while _sterm_ is running.\nJust hit the escape-key and then enter the commands.\nThey get not send to the device.\nInstead they are interpreted by _sterm_.\nThe preceded escape character can be defined with --escape.\nDefault is the escape key (\"\\e\").\n\n  * __exit__: quit sterm\n  * __version__: print version\n\n### Examples\n\nSend _ping_ to UART0 and exit:\n```\nsterm /dev/ttyUART0\nping\npong\n^[exit\n```\n\nSend _hello_ to a serial device with 9600 baud, 7 data bits, even parity, and 2 stop bits. Then exit:\n```\nsterm -b 9600 -f 7E2 /dev/ttyS0\nhello\nworld\n^[exit\n```\n\nConnecting to a Linux device\n```\nsterm --noecho --escape _ /dev/ttyUSB0\n~# whoami\nroot\n~# _exit\n```\n\nCommunicating with two _sterm_ instances via a pseudo terminal for testing:\n![A picture that demonstrates the possibility of receiving ANSI escape sequences and unicode charaters](/stermscreenshot.png?raw=true \"Testrun showing some capabilities of sterm\")\n\n\n## \u26cf\ufe0f Building and Testing <a name = \"built_using\"></a>\n\n### Testing\n\nTo test _sterm_ from the sources, just call the `test.py` script.\nIt runs the command line interface of _sterm_.\n\nYou can use `socat` to create a virtual serial connection with two endings, so that you can use two `sterm` processes to communicate with each other:\n\n```bash\nsocat -d -d pty,raw,echo=0 pty,raw,echo=0\n```\n\n### Building a new Package\n\nTo build a new package from the source code, just execute the `pkg-make.sh` script.\nMake sure to update the version number in the `sterm/cli.py` file.\nThis version number, as well as the README.md file gets read by the setup.py file.\n\n```bash\nvim sterm/cli.py\n./pkg-make.sh\n```\n\n\n## \ud83c\udf89 Acknowledgements <a name = \"acknowledgement\"></a>\n\n- [@kylelobo](https://github.com/kylelobo) for [this README template](https://github.com/kylelobo/The-Documentation-Compendium)\n- [The pyserial project](https://github.com/pyserial/pyserial) that is the base of _sterm_\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/rstemmer/sterm", "keywords": "serial-communication serial-terminal terminal uart rs232 monitoring tty pyserial serial", "license": "GPL", "maintainer": "", "maintainer_email": "", "name": "sterm", "package_url": "https://pypi.org/project/sterm/", "platform": "", "project_url": "https://pypi.org/project/sterm/", "project_urls": {"Documentation": "https://github.com/rstemmer/sterm", "Homepage": "https://github.com/rstemmer/sterm", "Source": "https://github.com/rstemmer/sterm", "Tracker": "https://github.com/rstemmer/sterm/issues"}, "release_url": "https://pypi.org/project/sterm/6.0.1/", "requires_dist": ["pyserial"], "requires_python": ">=3.4", "summary": "A minimal serial / UART command line terminal that focus on being easy to use.", "version": "6.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h3>sterm</h3>\n<div>\n  Status: Active - License: GPL v3\n</div>\n<hr>\n<p align=\"center\"> sterm is a minimal serial terminal that focus on being easy to use. - This client just does its job.\n    <br>\n</p>\n<h2>\ud83d\udcdd Table of Contents</h2>\n<ul>\n<li><a href=\"#about\" rel=\"nofollow\">About</a></li>\n<li><a href=\"#getting_started\" rel=\"nofollow\">Getting Started</a></li>\n<li><a href=\"#usage\" rel=\"nofollow\">Usage</a></li>\n<li><a href=\"#built_using\" rel=\"nofollow\">Built Using</a></li>\n<li><a href=\"#acknowledgement\" rel=\"nofollow\">Acknowledgments</a></li>\n</ul>\n<h2>\ud83e\uddd0 About <a></a></h2>\n<p><strong>sterm</strong> is a minimal serial terminal that focus on being easy to use and not sucking. - This client simply works.\nIt has inline input and supports Unicode (utf-8).\nEach character typed gets directly send to the connected device without buffering.\nIt writes whatever it receives to <em>stdout</em> so that also Unicode and ANSI escape sequences work as expected.</p>\n<h3>Core Use-Cases</h3>\n<p><em>Ideal for debugging:</em><br>\nWith the <code>--binary</code> option, the received data will be output byte wise as hexadecimal numbers.</p>\n<p><em>Ideal for a remote Linux shell:</em><br>\nWith the <code>--noecho</code> option, each character typed gets directly send to the connected device without buffering and echoing.\nThis makes the Linux console usage seamlessly like using telnet or ssh.</p>\n<h3>Core Features</h3>\n<ul>\n<li>Inline input</li>\n<li>No line buffering</li>\n<li>Unicode support</li>\n<li>ANSI Escape Sequences supported</li>\n<li>No GUI</li>\n</ul>\n<h2>\ud83c\udfc1 Getting Started <a></a></h2>\n<p>There are two ways to install <em>sterm</em>.\nDirectly using <code>pip</code> or from the cloned repository.</p>\n<h3>Installation using pip</h3>\n<pre>pip install sterm\n</pre>\n<h3>Installation from Repository</h3>\n<pre><span class=\"c1\"># Download</span>\ngit clone https://github.com/rstemmer/sterm.git\n<span class=\"nb\">cd</span> sterm\n\n<span class=\"c1\"># Dependencies</span>\npip install pyserial\n\n<span class=\"c1\"># Install Package</span>\npip install .\n</pre>\n<h2>\ud83c\udf88 Usage <a></a></h2>\n<p><em>sterm</em> has three interfaces:</p>\n<ol>\n<li>Configuration files</li>\n<li>The command line interface</li>\n<li>Escape commands</li>\n</ol>\n<h3>Configuration via files</h3>\n<p>TODO - Not yet implemented.</p>\n<h3>Command Line Arguments</h3>\n<pre>sterm <span class=\"o\">[</span>-h<span class=\"o\">]</span> <span class=\"o\">[</span>--noecho<span class=\"o\">]</span> <span class=\"o\">[</span>--escape character<span class=\"o\">]</span> <span class=\"o\">[</span>--binary<span class=\"o\">]</span> <span class=\"o\">[</span>-b BAUDRATE<span class=\"o\">]</span> <span class=\"o\">[</span>-f FORMAT<span class=\"o\">]</span> <span class=\"o\">[</span>-w logfile<span class=\"o\">]</span> DEVICE\n</pre>\n<p>When a command line argument is contradictory to a setting in the configuration files, the command line argument has higher priority.</p>\n<ul>\n<li><strong>-h</strong>: Print help.</li>\n<li><strong>-n</strong>: Enable <em>noecho</em> mode. <em>Default</em> is echoing each entered key to <em>stdout</em>.</li>\n<li><strong>--escape</strong>: Define an alternative escape character. <em>Default</em> is escape (\"\\e\").</li>\n<li><strong>--binary</strong>: Print hexadecimal values instead of Unicode characters. (Only applied on output, input will still be UTF-8)</li>\n<li><strong>-b</strong>: Baudrate. <em>Default:</em> 115200 baud.</li>\n<li><strong>-f</strong>: Configuration-triple: xyz with x = bytelength in bits {5,6,7,8}; y = parity {N,E,O}; z = stopbits {1,2}. <em>Default:</em> \"8N1\" - <em>8</em> data bits, <em>no</em> parity bits and <em>1</em> stop bit.</li>\n<li><strong>-w</strong>: Write received data into a file.</li>\n</ul>\n<p><em>DEVICE</em> is the path to the serial terminal.\nFor example <em>/dev/ttyS0</em>, <em>/dev/ttyUSB0</em>, <em>/dev/ttyUART0</em>, <em>/dev/ttyACM0</em>, <em>/dev/pts/42</em>.</p>\n<p>For details read the man-page.</p>\n<h3>Escape commands</h3>\n<p>The following strings can be entered while <em>sterm</em> is running.\nJust hit the escape-key and then enter the commands.\nThey get not send to the device.\nInstead they are interpreted by <em>sterm</em>.\nThe preceded escape character can be defined with --escape.\nDefault is the escape key (\"\\e\").</p>\n<ul>\n<li><strong>exit</strong>: quit sterm</li>\n<li><strong>version</strong>: print version</li>\n</ul>\n<h3>Examples</h3>\n<p>Send <em>ping</em> to UART0 and exit:</p>\n<pre><code>sterm /dev/ttyUART0\nping\npong\n^[exit\n</code></pre>\n<p>Send <em>hello</em> to a serial device with 9600 baud, 7 data bits, even parity, and 2 stop bits. Then exit:</p>\n<pre><code>sterm -b 9600 -f 7E2 /dev/ttyS0\nhello\nworld\n^[exit\n</code></pre>\n<p>Connecting to a Linux device</p>\n<pre><code>sterm --noecho --escape _ /dev/ttyUSB0\n~# whoami\nroot\n~# _exit\n</code></pre>\n<p>Communicating with two <em>sterm</em> instances via a pseudo terminal for testing:\n<img alt=\"A picture that demonstrates the possibility of receiving ANSI escape sequences and unicode charaters\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b661fd881de7b4059be78d39be6a47926da331a8/2f737465726d73637265656e73686f742e706e673f7261773d74727565\"></p>\n<h2>\u26cf\ufe0f Building and Testing <a></a></h2>\n<h3>Testing</h3>\n<p>To test <em>sterm</em> from the sources, just call the <code>test.py</code> script.\nIt runs the command line interface of <em>sterm</em>.</p>\n<p>You can use <code>socat</code> to create a virtual serial connection with two endings, so that you can use two <code>sterm</code> processes to communicate with each other:</p>\n<pre>socat -d -d pty,raw,echo<span class=\"o\">=</span><span class=\"m\">0</span> pty,raw,echo<span class=\"o\">=</span><span class=\"m\">0</span>\n</pre>\n<h3>Building a new Package</h3>\n<p>To build a new package from the source code, just execute the <code>pkg-make.sh</code> script.\nMake sure to update the version number in the <code>sterm/cli.py</code> file.\nThis version number, as well as the README.md file gets read by the setup.py file.</p>\n<pre>vim sterm/cli.py\n./pkg-make.sh\n</pre>\n<h2>\ud83c\udf89 Acknowledgements <a></a></h2>\n<ul>\n<li><a href=\"https://github.com/kylelobo\" rel=\"nofollow\">@kylelobo</a> for <a href=\"https://github.com/kylelobo/The-Documentation-Compendium\" rel=\"nofollow\">this README template</a></li>\n<li><a href=\"https://github.com/pyserial/pyserial\" rel=\"nofollow\">The pyserial project</a> that is the base of <em>sterm</em></li>\n</ul>\n\n          </div>"}, "last_serial": 6767031, "releases": {"6.0.0a5": [{"comment_text": "", "digests": {"md5": "409898b6cf521abb5256e01b830eee42", "sha256": "b6b04420687388b4ae422e7df19faa69035c9cdc1b155a7d14fcf7baacbd6594"}, "downloads": -1, "filename": "sterm-6.0.0a5-py3-none-any.whl", "has_sig": false, "md5_digest": "409898b6cf521abb5256e01b830eee42", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 29040, "upload_time": "2019-07-27T17:31:28", "upload_time_iso_8601": "2019-07-27T17:31:28.246113Z", "url": "https://files.pythonhosted.org/packages/92/ef/0cd5c960d5f59790c2365405015000548bd5aacfa3e198df6a899eff587a/sterm-6.0.0a5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f8ae3f1e305391a8c481e3b21de20f7f", "sha256": "5d2211dedabff4d2d39b1ed22b3c41b32609f2a67b7ef2bf33e7c845d168fe6c"}, "downloads": -1, "filename": "sterm-6.0.0a5.tar.gz", "has_sig": false, "md5_digest": "f8ae3f1e305391a8c481e3b21de20f7f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 11830, "upload_time": "2019-07-27T17:31:30", "upload_time_iso_8601": "2019-07-27T17:31:30.398620Z", "url": "https://files.pythonhosted.org/packages/7b/d2/d68d624479468d3a814c9d9c115e74b9f524c97fcf99eccdbe2ead63406e/sterm-6.0.0a5.tar.gz", "yanked": false}], "6.0.0a6": [{"comment_text": "", "digests": {"md5": "1774307b3dc531ff281e224a2e0c7bed", "sha256": "5415296a7af816cf6443c9b4af59c56f020fb8305b50910c003b323a7a5315de"}, "downloads": -1, "filename": "sterm-6.0.0a6-py3-none-any.whl", "has_sig": false, "md5_digest": "1774307b3dc531ff281e224a2e0c7bed", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 29114, "upload_time": "2019-07-28T13:58:13", "upload_time_iso_8601": "2019-07-28T13:58:13.119583Z", "url": "https://files.pythonhosted.org/packages/18/54/243dae9624fac95fbc59399ff0913db4e8d12ca2ff37f76fa60a7dd625ca/sterm-6.0.0a6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d9c227a8cc501376a622d4387476af48", "sha256": "836c383f48970d66129f24fd411de68a47a23da915cc3a85c395a2293900c7c7"}, "downloads": -1, "filename": "sterm-6.0.0a6.tar.gz", "has_sig": false, "md5_digest": "d9c227a8cc501376a622d4387476af48", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 12200, "upload_time": "2019-07-28T13:58:14", "upload_time_iso_8601": "2019-07-28T13:58:14.912374Z", "url": "https://files.pythonhosted.org/packages/05/70/aa723ff8ffea3b610f29643f7efbcab659d6d240178338556eb3b717be15/sterm-6.0.0a6.tar.gz", "yanked": false}], "6.0.1": [{"comment_text": "", "digests": {"md5": "020c61e0142d9c77083c459d4838c914", "sha256": "a8996a0eee7b65af9d360bd0e5e580e7effe06956a0d348dfa9e5ee94d3d39bd"}, "downloads": -1, "filename": "sterm-6.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "020c61e0142d9c77083c459d4838c914", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 26734, "upload_time": "2020-03-07T08:16:58", "upload_time_iso_8601": "2020-03-07T08:16:58.601208Z", "url": "https://files.pythonhosted.org/packages/0f/36/f5dbd7233d72126409ea18cb3415c8adf05304e80093a470651ebf48e903/sterm-6.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2f9e6ea4076f208357eae5bd8245c9f7", "sha256": "e3891d9756759294f3183a529f7abf67ecb2f7c9f496637f2309906289cf2319"}, "downloads": -1, "filename": "sterm-6.0.1.tar.gz", "has_sig": false, "md5_digest": "2f9e6ea4076f208357eae5bd8245c9f7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 14718, "upload_time": "2020-03-07T08:17:00", "upload_time_iso_8601": "2020-03-07T08:17:00.046799Z", "url": "https://files.pythonhosted.org/packages/6d/c4/7ca5149d507dedeb63060b1ddcb6d481048392f3f1001d5fe2e6c59b9b9d/sterm-6.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "020c61e0142d9c77083c459d4838c914", "sha256": "a8996a0eee7b65af9d360bd0e5e580e7effe06956a0d348dfa9e5ee94d3d39bd"}, "downloads": -1, "filename": "sterm-6.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "020c61e0142d9c77083c459d4838c914", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 26734, "upload_time": "2020-03-07T08:16:58", "upload_time_iso_8601": "2020-03-07T08:16:58.601208Z", "url": "https://files.pythonhosted.org/packages/0f/36/f5dbd7233d72126409ea18cb3415c8adf05304e80093a470651ebf48e903/sterm-6.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2f9e6ea4076f208357eae5bd8245c9f7", "sha256": "e3891d9756759294f3183a529f7abf67ecb2f7c9f496637f2309906289cf2319"}, "downloads": -1, "filename": "sterm-6.0.1.tar.gz", "has_sig": false, "md5_digest": "2f9e6ea4076f208357eae5bd8245c9f7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 14718, "upload_time": "2020-03-07T08:17:00", "upload_time_iso_8601": "2020-03-07T08:17:00.046799Z", "url": "https://files.pythonhosted.org/packages/6d/c4/7ca5149d507dedeb63060b1ddcb6d481048392f3f1001d5fe2e6c59b9b9d/sterm-6.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:02:00 2020"}