{"info": {"author": "Digium, Inc.", "author_email": "dlee@digium.com", "bugtrack_url": null, "classifiers": ["Development Status :: 1 - Planning", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "About\n-----\n\nThis package contains the Python client library for the Asterisk REST\nInterface. It builds upon the\n`Swagger.py <https://github.com/digium/swagger-py>`__ library, providing an\nimproved, Asterisk-specific API over the API generated by Swagger.py\n\nUsage\n-----\n\nInstall from source using the ``setup.py`` script.\n\n::\n\n    $ sudo ./setup.py install\n\n\nAPI\n===\n\nAn ARI client can be created simply by the ``ari.connect`` method. This will\ncreate a client based on the Swagger API downloaded from Asterisk.\n\nThe API is modeled into the Repository Pattern, as you would find in Domain\nDriven Design. Each Swagger Resource (a.k.a. API declaration) is mapped into a\nRepository object, which is provided as a field on the client\n(``client.channels``, ``client.bridges``).\n\nResponses from Asterisk are mapped into first-class objects, akin to Domain\nObjects in the Repository Pattern. These are provided both on the responses\nto RESTful API calls, and for fields from events received over the WebSocket.\n\nMaking REST calls\n=================\n\nEach Repository Object provides methods which invoke the non-instance specific\noperations of the associated Swagger resource (``bridges.list()``,\n``channels.get()``). Instance specific methods are also provided, which require\nidentity parameters to be passed along (``channels.get(channelId=id)``).\n\nInstance specific methods are also provided on the Domain Objects\n(``some_channel.hangup()``).\n\nRegistering event callbacks\n===========================\n\nAsterisk may send asyncronous messages over a WebSocket to indicate events of\ninterest to the application.\n\nThe ``Client`` object has an ``on_event`` method, which can be used to\nsubscribe for specific events from Asterisk.\n\nThe first-class objects also have 'on_event' methods, which can subscribe to\nStasis events relating to that object.\n\nObject lifetime\n===============\n\nThe Repository Objects exist for the lifetime of the client that owns them.\n\nDomain Objects are ephemeral, and not tied to the lifetime of the underlying\nobject in Asterisk. Pratically, this means that if you call\n``channels.get('1234')`` several times, you may get a different object back\nevery time.\n\nYou may hold onto an instance of a Domain Object, but you should consider it\nto be stale. The data contained in the object may be out of date, but the\nmethods on the object should still behave properly.\n\nIf you invoke a method on a stale Domain Object that no longer exists in\nAsterisk, you will get a HTTPError exception (404 Not Found).\n\nCaveats\n=======\n\nThe dynamic methods exposed by Repository and Domain objects are, effectively,\nremote procedure calls. The current implementation is synchronous, which means\nthat if anything were to happen to slow responses (slow network, packet loss,\nsystem load, etc.), then the entire application could be affected.\n\nExamples\n========\n\n.. code:: Python\n\n    import ari\n\n    client = ari.connect('http://localhost:8088/', 'hey', 'peekaboo')\n\n    def on_dtmf(channel, event):\n        digit = event['digit']\n        if digit == '#':\n            channel.play(media='sound:goodbye')\n            channel.continueInDialplan()\n        elif digit == '*':\n            channel.play(media='sound:asterisk-friend')\n        else:\n            channel.play(media='sound:digits/%s' % digit)\n\n\n    def on_start(channel, event):\n        channel.on_event('ChannelDtmfReceived', on_dtmf)\n        channel.answer()\n        channel.play(media='sound:hello-world')\n\n\n    client.on_channel_event('StasisStart', on_start)\n    client.run(apps=\"hello\")\n\n\n\nDevelopment\n-----------\n\nThe code is documented using `Sphinx <http://sphinx-doc.org/>`__, which\nallows `IntelliJ IDEA <http://confluence.jetbrains.net/display/PYH/>`__\nto do a better job at inferring types for autocompletion.\n\nTo keep things isolated, I also recommend installing (and using)\n`virtualenv <http://www.virtualenv.org/>`__.\n\n::\n\n    $ sudo pip install virtualenv\n    $ mkdir -p ~/virtualenv\n    $ virtualenv ~/virtualenv/ari\n    $ . ~/virtualenv/ari/bin/activate\n\n`Setuptools <http://pypi.python.org/pypi/setuptools>`__ is used for\nbuilding. `Nose <http://nose.readthedocs.org/en/latest/>`__ is used\nfor unit testing, with the `coverage\n<http://nedbatchelder.com/code/coverage/>`__ plugin installed to\ngenerated code coverage reports. Pass ``--with-coverage`` to generate\nthe code coverage report. HTML versions of the reports are put in\n``cover/index.html``.\n\n::\n\n    $ ./setup.py develop   # prep for development (install deps, launchers, etc.)\n    $ ./setup.py nosetests # run unit tests\n    $ ./setup.py bdist_egg # build distributable\n\nTODO\n====\n\n * Create asynchronous bindings that can be used with Twisted, Tornado, etc.\n\nLicense\n-------\n\nCopyright (c) 2013, Digium, Inc. All rights reserved.\n\nSwagger.py is licensed with a `BSD 3-Clause\nLicense <http://opensource.org/licenses/BSD-3-Clause>`__.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/asterisk/asterisk_rest_libraries", "keywords": null, "license": "BSD 3-Clause License", "maintainer": null, "maintainer_email": null, "name": "ari", "package_url": "https://pypi.org/project/ari/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/ari/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/asterisk/asterisk_rest_libraries"}, "release_url": "https://pypi.org/project/ari/0.1.3/", "requires_dist": null, "requires_python": null, "summary": "Library for accessing the Asterisk REST Interface", "version": "0.1.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"about\">\n<h2>About</h2>\n<p>This package contains the Python client library for the Asterisk REST\nInterface. It builds upon the\n<a href=\"https://github.com/digium/swagger-py\" rel=\"nofollow\">Swagger.py</a> library, providing an\nimproved, Asterisk-specific API over the API generated by Swagger.py</p>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>Install from source using the <tt>setup.py</tt> script.</p>\n<pre>$ sudo ./setup.py install\n</pre>\n<div id=\"api\">\n<h3>API</h3>\n<p>An ARI client can be created simply by the <tt>ari.connect</tt> method. This will\ncreate a client based on the Swagger API downloaded from Asterisk.</p>\n<p>The API is modeled into the Repository Pattern, as you would find in Domain\nDriven Design. Each Swagger Resource (a.k.a. API declaration) is mapped into a\nRepository object, which is provided as a field on the client\n(<tt>client.channels</tt>, <tt>client.bridges</tt>).</p>\n<p>Responses from Asterisk are mapped into first-class objects, akin to Domain\nObjects in the Repository Pattern. These are provided both on the responses\nto RESTful API calls, and for fields from events received over the WebSocket.</p>\n</div>\n<div id=\"making-rest-calls\">\n<h3>Making REST calls</h3>\n<p>Each Repository Object provides methods which invoke the non-instance specific\noperations of the associated Swagger resource (<tt>bridges.list()</tt>,\n<tt>channels.get()</tt>). Instance specific methods are also provided, which require\nidentity parameters to be passed along (<tt>channels.get(channelId=id)</tt>).</p>\n<p>Instance specific methods are also provided on the Domain Objects\n(<tt>some_channel.hangup()</tt>).</p>\n</div>\n<div id=\"registering-event-callbacks\">\n<h3>Registering event callbacks</h3>\n<p>Asterisk may send asyncronous messages over a WebSocket to indicate events of\ninterest to the application.</p>\n<p>The <tt>Client</tt> object has an <tt>on_event</tt> method, which can be used to\nsubscribe for specific events from Asterisk.</p>\n<p>The first-class objects also have \u2018on_event\u2019 methods, which can subscribe to\nStasis events relating to that object.</p>\n</div>\n<div id=\"object-lifetime\">\n<h3>Object lifetime</h3>\n<p>The Repository Objects exist for the lifetime of the client that owns them.</p>\n<p>Domain Objects are ephemeral, and not tied to the lifetime of the underlying\nobject in Asterisk. Pratically, this means that if you call\n<tt><span class=\"pre\">channels.get('1234')</span></tt> several times, you may get a different object back\nevery time.</p>\n<p>You may hold onto an instance of a Domain Object, but you should consider it\nto be stale. The data contained in the object may be out of date, but the\nmethods on the object should still behave properly.</p>\n<p>If you invoke a method on a stale Domain Object that no longer exists in\nAsterisk, you will get a HTTPError exception (404 Not Found).</p>\n</div>\n<div id=\"caveats\">\n<h3>Caveats</h3>\n<p>The dynamic methods exposed by Repository and Domain objects are, effectively,\nremote procedure calls. The current implementation is synchronous, which means\nthat if anything were to happen to slow responses (slow network, packet loss,\nsystem load, etc.), then the entire application could be affected.</p>\n</div>\n<div id=\"examples\">\n<h3>Examples</h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">ari</span>\n\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">ari</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"s1\">'http://localhost:8088/'</span><span class=\"p\">,</span> <span class=\"s1\">'hey'</span><span class=\"p\">,</span> <span class=\"s1\">'peekaboo'</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">on_dtmf</span><span class=\"p\">(</span><span class=\"n\">channel</span><span class=\"p\">,</span> <span class=\"n\">event</span><span class=\"p\">):</span>\n    <span class=\"n\">digit</span> <span class=\"o\">=</span> <span class=\"n\">event</span><span class=\"p\">[</span><span class=\"s1\">'digit'</span><span class=\"p\">]</span>\n    <span class=\"k\">if</span> <span class=\"n\">digit</span> <span class=\"o\">==</span> <span class=\"s1\">'#'</span><span class=\"p\">:</span>\n        <span class=\"n\">channel</span><span class=\"o\">.</span><span class=\"n\">play</span><span class=\"p\">(</span><span class=\"n\">media</span><span class=\"o\">=</span><span class=\"s1\">'sound:goodbye'</span><span class=\"p\">)</span>\n        <span class=\"n\">channel</span><span class=\"o\">.</span><span class=\"n\">continueInDialplan</span><span class=\"p\">()</span>\n    <span class=\"k\">elif</span> <span class=\"n\">digit</span> <span class=\"o\">==</span> <span class=\"s1\">'*'</span><span class=\"p\">:</span>\n        <span class=\"n\">channel</span><span class=\"o\">.</span><span class=\"n\">play</span><span class=\"p\">(</span><span class=\"n\">media</span><span class=\"o\">=</span><span class=\"s1\">'sound:asterisk-friend'</span><span class=\"p\">)</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">channel</span><span class=\"o\">.</span><span class=\"n\">play</span><span class=\"p\">(</span><span class=\"n\">media</span><span class=\"o\">=</span><span class=\"s1\">'sound:digits/</span><span class=\"si\">%s</span><span class=\"s1\">'</span> <span class=\"o\">%</span> <span class=\"n\">digit</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">on_start</span><span class=\"p\">(</span><span class=\"n\">channel</span><span class=\"p\">,</span> <span class=\"n\">event</span><span class=\"p\">):</span>\n    <span class=\"n\">channel</span><span class=\"o\">.</span><span class=\"n\">on_event</span><span class=\"p\">(</span><span class=\"s1\">'ChannelDtmfReceived'</span><span class=\"p\">,</span> <span class=\"n\">on_dtmf</span><span class=\"p\">)</span>\n    <span class=\"n\">channel</span><span class=\"o\">.</span><span class=\"n\">answer</span><span class=\"p\">()</span>\n    <span class=\"n\">channel</span><span class=\"o\">.</span><span class=\"n\">play</span><span class=\"p\">(</span><span class=\"n\">media</span><span class=\"o\">=</span><span class=\"s1\">'sound:hello-world'</span><span class=\"p\">)</span>\n\n\n<span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">on_channel_event</span><span class=\"p\">(</span><span class=\"s1\">'StasisStart'</span><span class=\"p\">,</span> <span class=\"n\">on_start</span><span class=\"p\">)</span>\n<span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">apps</span><span class=\"o\">=</span><span class=\"s2\">\"hello\"</span><span class=\"p\">)</span>\n</pre>\n</div>\n</div>\n<div id=\"development\">\n<h2>Development</h2>\n<p>The code is documented using <a href=\"http://sphinx-doc.org/\" rel=\"nofollow\">Sphinx</a>, which\nallows <a href=\"http://confluence.jetbrains.net/display/PYH/\" rel=\"nofollow\">IntelliJ IDEA</a>\nto do a better job at inferring types for autocompletion.</p>\n<p>To keep things isolated, I also recommend installing (and using)\n<a href=\"http://www.virtualenv.org/\" rel=\"nofollow\">virtualenv</a>.</p>\n<pre>$ sudo pip install virtualenv\n$ mkdir -p ~/virtualenv\n$ virtualenv ~/virtualenv/ari\n$ . ~/virtualenv/ari/bin/activate\n</pre>\n<p><a href=\"http://pypi.python.org/pypi/setuptools\" rel=\"nofollow\">Setuptools</a> is used for\nbuilding. <a href=\"http://nose.readthedocs.org/en/latest/\" rel=\"nofollow\">Nose</a> is used\nfor unit testing, with the <a href=\"http://nedbatchelder.com/code/coverage/\" rel=\"nofollow\">coverage</a> plugin installed to\ngenerated code coverage reports. Pass <tt><span class=\"pre\">--with-coverage</span></tt> to generate\nthe code coverage report. HTML versions of the reports are put in\n<tt>cover/index.html</tt>.</p>\n<pre>$ ./setup.py develop   # prep for development (install deps, launchers, etc.)\n$ ./setup.py nosetests # run unit tests\n$ ./setup.py bdist_egg # build distributable\n</pre>\n<div id=\"todo\">\n<h3>TODO</h3>\n<blockquote>\n<ul>\n<li>Create asynchronous bindings that can be used with Twisted, Tornado, etc.</li>\n</ul>\n</blockquote>\n</div>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>Copyright (c) 2013, Digium, Inc. All rights reserved.</p>\n<p>Swagger.py is licensed with a <a href=\"http://opensource.org/licenses/BSD-3-Clause\" rel=\"nofollow\">BSD 3-Clause\nLicense</a>.</p>\n</div>\n\n          </div>"}, "last_serial": 1217311, "releases": {"0.1.1": [{"comment_text": "", "digests": {"md5": "1b39bfd506a658028a1cccc1d0e7b670", "sha256": "f3d4c8606e20ce5f7522e55356525ef2b58e630ba88cc3eeaf7f3b0fb503b00c"}, "downloads": -1, "filename": "ari-0.1.1.tar.gz", "has_sig": false, "md5_digest": "1b39bfd506a658028a1cccc1d0e7b670", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9241, "upload_time": "2013-10-28T16:51:23", "upload_time_iso_8601": "2013-10-28T16:51:23.725459Z", "url": "https://files.pythonhosted.org/packages/28/7c/14a251619873747329cb2295f37755bfb8578b0b4c8eb60d3cf0529527fc/ari-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "f8a9b788e77c820ab8fe1e09efefa271", "sha256": "2e5002f079cb6ac26ffe81f459765c56b55e5138c886f6ac67ec7609b9291520"}, "downloads": -1, "filename": "ari-0.1.2.tar.gz", "has_sig": false, "md5_digest": "f8a9b788e77c820ab8fe1e09efefa271", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9679, "upload_time": "2014-08-12T12:51:20", "upload_time_iso_8601": "2014-08-12T12:51:20.186032Z", "url": "https://files.pythonhosted.org/packages/14/06/1778fc8a9968d8c29a7f725118e344dbf4034595b05cb071bcd1b0a184d2/ari-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "2670df69a77d369cb649d73377625e22", "sha256": "adf8bd4b2b984dfb8fdbb2a87e76da8b9e7984fdf3f5e72f49bc92d6c12a940e"}, "downloads": -1, "filename": "ari-0.1.3.tar.gz", "has_sig": false, "md5_digest": "2670df69a77d369cb649d73377625e22", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9953, "upload_time": "2014-09-08T18:55:14", "upload_time_iso_8601": "2014-09-08T18:55:14.631640Z", "url": "https://files.pythonhosted.org/packages/4f/93/0a285bb5bf042f15c0541e789f5a05cd2a4de2871cd8421520e7253dc3a2/ari-0.1.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "2670df69a77d369cb649d73377625e22", "sha256": "adf8bd4b2b984dfb8fdbb2a87e76da8b9e7984fdf3f5e72f49bc92d6c12a940e"}, "downloads": -1, "filename": "ari-0.1.3.tar.gz", "has_sig": false, "md5_digest": "2670df69a77d369cb649d73377625e22", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9953, "upload_time": "2014-09-08T18:55:14", "upload_time_iso_8601": "2014-09-08T18:55:14.631640Z", "url": "https://files.pythonhosted.org/packages/4f/93/0a285bb5bf042f15c0541e789f5a05cd2a4de2871cd8421520e7253dc3a2/ari-0.1.3.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:17:15 2020"}