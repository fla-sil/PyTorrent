{"info": {"author": "OpenStack", "author_email": "openstack-dev@lists.openstack.org", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "Intended Audience :: Information Technology", "Intended Audience :: System Administrators", "License :: OSI Approved :: Apache Software License", "Operating System :: POSIX :: Linux", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Topic :: Utilities"], "description": "Boartty\n=======\n\nBoartty is a console-based interface to the Storyboard task-tracking\nsystem.\n\nAs compared to the web interface, the main advantages are:\n\n * Workflow -- the interface is designed to support a workflow similar\n   to reading network news or mail.  In particular, it is designed to\n   deal with a large number of stories across a large number of\n   projects.\n\n * Offline Use -- Boartty syncs information about changes in\n   subscribed projects to a local database.  All review operations are\n   performed against that database and then synced back to Storyboard.\n\n * Speed -- user actions modify locally cached content and need not\n   wait for server interaction.\n\nInstallation\n------------\n\nSource\n~~~~~~\n\nWhen installing from source, it is recommended (but not required) to\ninstall Boartty in a virtualenv.  To set one up::\n\n  virtualenv boartty-env\n  source boartty-env/bin/activate\n\nTo install the latest version from the cheeseshop::\n\n  pip install boartty\n\nTo install from a git checkout::\n\n  pip install .\n\nBoartty uses a YAML based configuration file that it looks for at\n``~/.boartty.yaml``.  Several sample configuration files are included.\nYou can find them in the examples/ directory of the\n`source distribution <https://git.openstack.org/cgit/openstack/boartty/tree/examples>`_\nor the share/boartty/examples directory after installation.\n\nSelect one of the sample config files, copy it to ~/.boartty.yaml and\nedit as necessary.  Search for ``CHANGEME`` to find parameters that\nneed to be supplied.  The sample config files are as follows:\n\n**minimal-boartty.yaml**\n  Only contains the parameters required for Boartty to actually run.\n\n**reference-boartty.yaml**\n  An exhaustive list of all supported options with examples.\n\n**openstack-boartty.yaml**\n  A configuration designed for use with OpenStack's installation of\n  Gerrit.\n\nYou will need a Storyboard authentication token which you can generate\nor retrieve by navigating to ``Profile``, then ``Tokens`` (the \"key\"\nicon), or visiting the `/#!/profile/tokens` URI in your Storyboard\ninstallation.  Issue a new token if you have not done so before, and\ngive it a sufficiently long lifetime (for example, one decade).  Copy\nand paste the resulting token in your ``~/.boartty.yaml`` file.\n\nThe config file is designed to support multiple Storyboard instances.\nThe first one is used by default, but others can be specified by\nsupplying the name on the command line.\n\nUsage\n-----\n\nAfter installing Boartty, you should be able to run it by invoking\n``boartty``.  If you installed it in a virtualenv, you can invoke it\nwithout activating the virtualenv with ``/path/to/venv/bin/boartty``\nwhich you may wish to add to your shell aliases.  Use ``boartty\n--help`` to see a list of command line options available.\n\nOnce Boartty is running, you will need to start by subscribing to some\nprojects.  Use 'L' to list all of the projects and then 's' to\nsubscribe to the ones you are interested in.  Hit 'L' again to shrink\nthe list to your subscribed projects.\n\nIn general, pressing the F1 key will show help text on any screen, and\nESC will take you to the previous screen.\n\nBoartty works seamlessly offline or online.  All of the actions that\nit performs are first recorded in a local database (in\n``~/.boartty.db`` by default), and are then transmitted to Storyboard.\nIf Boartty is unable to contact Storyboard for any reason, it will\ncontinue to operate against the local database, and once it\nre-establishes contact, it will process any pending changes.\n\nThe status bar at the top of the screen displays the current number of\noutstanding tasks that Boartty must perform in order to be fully up to\ndate.  Some of these tasks are more complicated than others, and some\nof them will end up creating new tasks (for instance, one task may be\nto search for new stories in a project which will then produce 5 new\ntasks if there are 5 new stories).\n\nIf Boartty is offline, it will so indicate in the status bar.  It will\nretry requests if needed, and will switch between offline and online\nmode automatically.\n\nIf Boartty encounters an error, this will also be indicated in the\nstatus bar.  You may wish to examine ~/.boartty.log to see what the\nerror was.  In many cases, Boartty can continue after encountering an\nerror.  The error flag will be cleared when you leave the current\nscreen.\n\nTo select text (e.g., to copy to the clipboard), hold Shift while\nselecting the text.\n\nTerminal Integration\n--------------------\n\nIf you use rxvt-unicode, you can add something like the following to\n``.Xresources`` to make Storyboard URLs that are displayed in your\nterminal (perhaps in an email or irc client) clickable links that open\nin Boartty::\n\n  URxvt.perl-ext:           default,matcher\n  URxvt.url-launcher:       sensible-browser\n  URxvt.keysym.C-Delete:    perl:matcher:last\n  URxvt.keysym.M-Delete:    perl:matcher:list\n  URxvt.matcher.button:     1\n  URxvt.matcher.pattern.1:  https:\\/\\/storyboard.example.org/#!/story/(\\\\d+)[\\w]*\n  URxvt.matcher.launcher.1: boartty --open $0\n\nYou will want to adjust the pattern to match the Storyboard site you\nare interested in; multiple patterns may be added as needed.\n\nContributing\n------------\n\nFor information on how to contribute to Boartty, please see the\ncontents of the CONTRIBUTING.rst file.\n\nBugs\n----\n\nBugs are handled at: https://storyboard.openstack.org/", "description_content_type": null, "docs_url": null, "download_url": null, "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://www.openstack.org/", "keywords": "storyboard console urwid", "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "boartty", "package_url": "https://pypi.org/project/boartty/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/boartty/", "project_urls": {"Homepage": "http://www.openstack.org/"}, "release_url": "https://pypi.org/project/boartty/0.0.0/", "requires_dist": null, "requires_python": null, "summary": "Boardtty is a console-based interface to Storyboard.", "version": "0.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Boartty is a console-based interface to the Storyboard task-tracking\nsystem.</p>\n<p>As compared to the web interface, the main advantages are:</p>\n<blockquote>\n<ul>\n<li>Workflow \u2013 the interface is designed to support a workflow similar\nto reading network news or mail.  In particular, it is designed to\ndeal with a large number of stories across a large number of\nprojects.</li>\n<li>Offline Use \u2013 Boartty syncs information about changes in\nsubscribed projects to a local database.  All review operations are\nperformed against that database and then synced back to Storyboard.</li>\n<li>Speed \u2013 user actions modify locally cached content and need not\nwait for server interaction.</li>\n</ul>\n</blockquote>\n<div id=\"installation\">\n<h2>Installation</h2>\n<h2 id=\"source\"><span class=\"section-subtitle\">Source</span></h2>\n<p>When installing from source, it is recommended (but not required) to\ninstall Boartty in a virtualenv.  To set one up:</p>\n<pre>virtualenv boartty-env\nsource boartty-env/bin/activate\n</pre>\n<p>To install the latest version from the cheeseshop:</p>\n<pre>pip install boartty\n</pre>\n<p>To install from a git checkout:</p>\n<pre>pip install .\n</pre>\n<p>Boartty uses a YAML based configuration file that it looks for at\n<tt><span class=\"pre\">~/.boartty.yaml</span></tt>.  Several sample configuration files are included.\nYou can find them in the examples/ directory of the\n<a href=\"https://git.openstack.org/cgit/openstack/boartty/tree/examples\" rel=\"nofollow\">source distribution</a>\nor the share/boartty/examples directory after installation.</p>\n<p>Select one of the sample config files, copy it to ~/.boartty.yaml and\nedit as necessary.  Search for <tt>CHANGEME</tt> to find parameters that\nneed to be supplied.  The sample config files are as follows:</p>\n<dl>\n<dt><strong>minimal-boartty.yaml</strong></dt>\n<dd>Only contains the parameters required for Boartty to actually run.</dd>\n<dt><strong>reference-boartty.yaml</strong></dt>\n<dd>An exhaustive list of all supported options with examples.</dd>\n<dt><strong>openstack-boartty.yaml</strong></dt>\n<dd>A configuration designed for use with OpenStack\u2019s installation of\nGerrit.</dd>\n</dl>\n<p>You will need a Storyboard authentication token which you can generate\nor retrieve by navigating to <tt>Profile</tt>, then <tt>Tokens</tt> (the \u201ckey\u201d\nicon), or visiting the <cite>/#!/profile/tokens</cite> URI in your Storyboard\ninstallation.  Issue a new token if you have not done so before, and\ngive it a sufficiently long lifetime (for example, one decade).  Copy\nand paste the resulting token in your <tt><span class=\"pre\">~/.boartty.yaml</span></tt> file.</p>\n<p>The config file is designed to support multiple Storyboard instances.\nThe first one is used by default, but others can be specified by\nsupplying the name on the command line.</p>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>After installing Boartty, you should be able to run it by invoking\n<tt>boartty</tt>.  If you installed it in a virtualenv, you can invoke it\nwithout activating the virtualenv with <tt>/path/to/venv/bin/boartty</tt>\nwhich you may wish to add to your shell aliases.  Use <tt>boartty\n<span class=\"pre\">--help</span></tt> to see a list of command line options available.</p>\n<p>Once Boartty is running, you will need to start by subscribing to some\nprojects.  Use \u2018L\u2019 to list all of the projects and then \u2018s\u2019 to\nsubscribe to the ones you are interested in.  Hit \u2018L\u2019 again to shrink\nthe list to your subscribed projects.</p>\n<p>In general, pressing the F1 key will show help text on any screen, and\nESC will take you to the previous screen.</p>\n<p>Boartty works seamlessly offline or online.  All of the actions that\nit performs are first recorded in a local database (in\n<tt><span class=\"pre\">~/.boartty.db</span></tt> by default), and are then transmitted to Storyboard.\nIf Boartty is unable to contact Storyboard for any reason, it will\ncontinue to operate against the local database, and once it\nre-establishes contact, it will process any pending changes.</p>\n<p>The status bar at the top of the screen displays the current number of\noutstanding tasks that Boartty must perform in order to be fully up to\ndate.  Some of these tasks are more complicated than others, and some\nof them will end up creating new tasks (for instance, one task may be\nto search for new stories in a project which will then produce 5 new\ntasks if there are 5 new stories).</p>\n<p>If Boartty is offline, it will so indicate in the status bar.  It will\nretry requests if needed, and will switch between offline and online\nmode automatically.</p>\n<p>If Boartty encounters an error, this will also be indicated in the\nstatus bar.  You may wish to examine ~/.boartty.log to see what the\nerror was.  In many cases, Boartty can continue after encountering an\nerror.  The error flag will be cleared when you leave the current\nscreen.</p>\n<p>To select text (e.g., to copy to the clipboard), hold Shift while\nselecting the text.</p>\n</div>\n<div id=\"terminal-integration\">\n<h2>Terminal Integration</h2>\n<p>If you use rxvt-unicode, you can add something like the following to\n<tt>.Xresources</tt> to make Storyboard URLs that are displayed in your\nterminal (perhaps in an email or irc client) clickable links that open\nin Boartty:</p>\n<pre>URxvt.perl-ext:           default,matcher\nURxvt.url-launcher:       sensible-browser\nURxvt.keysym.C-Delete:    perl:matcher:last\nURxvt.keysym.M-Delete:    perl:matcher:list\nURxvt.matcher.button:     1\nURxvt.matcher.pattern.1:  https:\\/\\/storyboard.example.org/#!/story/(\\\\d+)[\\w]*\nURxvt.matcher.launcher.1: boartty --open $0\n</pre>\n<p>You will want to adjust the pattern to match the Storyboard site you\nare interested in; multiple patterns may be added as needed.</p>\n</div>\n<div id=\"contributing\">\n<h2>Contributing</h2>\n<p>For information on how to contribute to Boartty, please see the\ncontents of the CONTRIBUTING.rst file.</p>\n</div>\n<div id=\"bugs\">\n<h2>Bugs</h2>\n<p>Bugs are handled at: <a href=\"https://storyboard.openstack.org/\" rel=\"nofollow\">https://storyboard.openstack.org/</a></p>\n</div>\n\n          </div>"}, "last_serial": 2433320, "releases": {"0.0.0": []}, "urls": [], "timestamp": "Thu May  7 22:36:54 2020"}