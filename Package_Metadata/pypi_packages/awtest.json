{"info": {"author": "Alexander Whedon", "author_email": "alexander.whedon@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "# GapLearn\n\nGapLearn bridges gaps between other machine learning and deep learning tools. All models can be passed to the functions below regardless of the framework they were built upon (scikit-learn, tensorflow, xgboost, or even good ole numpy). \n\nMy first package objective is to bring transparency to the often black-boxy model training process by making by making robust post-mortem analysis of the hyperparameter and feature selection processes possible. The functions below also further automate some processes while still giving the user full control of the results.\n\nMany features are on their way. Unit tests and full documentation will be added shortly.\n\nThe source code is available on [GitHub](https://www.github.com/awhedon/gaplearn)\n\n## Installation\n\n```bash\npip install gaplearn\n```\n\nSee the latest version on [PyPI](https://pypi.org/project/gaplearn/)\n\n## Submodules\n\n### cv\n\nThe `cv` submodule will have these classes (sfs has been released):\n\n#### sfs\n**Description:**\n- This is a sequential feature selector that enables you to perform backwards elimination with any model (not just a linear regression).\n- At each step, the feature that has the lowest permutation importance is selected for removal. The permutation importance is measured as the decrease in accuracy by default, but the user can pass any custom scoring function.\n\n**Improvements on their way:**\n- Add forward selection and all subsets testing\n- Add more built-in scoring functions to for assessing feature permutation importance\n- Create custom permutation scoring method to remove `eli5` as a dependency\n- Enable a user to get the feature set that matches a certain criteria (\"has n features\", \"has score > x\")\n\n##### Methods\n**backwards_elimination(X, y, model = 'logit', params = {}, fit_function = None, predict_function = None, score_function = None, score_name = 'accuracy', cols = [], verbose = 0)**\n- Run the backwards elimination\n- **Params:**\n\t- X: (DataFrame or matrix) with independent variables\n\t- y: (iterable) dependent corresponding variable values\n\t- params: (dict) parameter set for model\n\t- model: (str or custom model type) if str ('logit' or 'rfc'), a corresponding sci-kit learn model will be used; if custom model type, the model you pass will be used\n\t- fit_function: (function) the function that will be used to train the model; the function must accept the parameters `model`, `X`, and `y`; if this value is not set, `backwards_elimination` will attempt to use your model's `fit` method\n\t- predict_function: (function) the function that will be used to make predictions with the model; the function must accept the parameters `model`, and `X`; if this value is not set, `backwards_elimination` will attempt to use your model's `predict` method\n\t- score_function: (function) the function that will be used to score the model and determine the feature permutation importance; the function must accept the parameters `y` and `preds`; if this value is not set, the accuracy will be used\n\t- score_name: (str) name of the score calculated by the `score_function`; 'accuracy' by default\n\n**Example:**\n```python\nimport pandas as pd\nfrom gaplearn.cv import sfs\n\n#### Perform a backwards elimination with sci-kit learn's random forest model ####\n\nX = pd.read_csv('X_classification.csv')\ny = pd.read_csv('y_classification.csv')\n\nfs_rfc = sfs()\n\nprint('The backwards elimination has been run: {}'.format(fs_rfc.be_complete))\n\nfs_rfc.backwards_elimination(X, y, model = 'rfc', params = {'n_jobs': -1})\n\n# Get the step-by-step summary\nsummary_rfc = fs_rfc.get_summary_be() # Alternatively, `summary_rfc = fs_rfc.summary_be`\n\n# Get the predictions and true values for each observation\nresults_rfc = fs_rfc.get_results_be() # Alternatively, `results_rfc = fs_rfc.results_be\n\n# Get the features used in the analysis\nfeatures_rfc = fs_rfc.features_be # Alternatives, `sorted(list(results_rfc['feature to remove']))\n\n# Identify which feature set can achieve at least 85% accuracy with the smallest number of features\nsummary_rfc[summary_rfc['overall accuracy'] > .85]\n\n#### Perform a more complex backwards elimination with sci-kit learn's naive bayes model ####\n\nfrom sklearn.linear_model import SGDRegressor\n\nmodel_sgd = SGDRegressor(loss = 'modified_huber', penalty = 'elasticnet')\n\nX = pd.read_csv('X_regression.csv')\ny = pd.read_csv('y_regression.csv')\n\nfs_nb = sfs()\n\ndef mse(y, preds):\n\tscore = sum([(preds[i] - y[i]) ** 2 for i in range(y.shape[0])]) / y.shape[0]\n\treturn score\n\ndef arbitrary_prediction(model, X):\n\tpreds = model.predict(X) + 1 # arbitrarily deciding to add 1 to the prediction (realistically, this would be a wrapper for model that don't have a `fit` method)\n\treturn preds\n\nfs_nb.backwards_elimination(X, y, model = model_sgd, predict_function = arbitrary_prediction, score_function = mse)\n\n# Get the step-by-step summary\nsummary_nb = fs_nb.get_summary_be() # Alternatively, `summary = fs_nb.summary_be`\n\n# Get the predictions and true values for each observation\nresults_nb = fs_nb.get_results_be() # Alternatively, `results = fs_nb.results_be\n\n# Get the features used in the analysis\nfeatures_nb = fs_nb.features_be # Alternatives, `sorted(list(results['feature to remove']))\n```\n\n#### param_search_cluster (in development)\n**Description:**\n- This is a hyperparameter grid/random search for clustering algorithms\n- Unlike other grid/random search algorithms, this one enables you to get the observation-by-observation results from each parameter set so that you can do deep post-mortem analysis of the grid/random search.\n\n#### param_search (in development)\n**Description:**\n- This is a hyperparameter grid/random search for both regression algorithms and classification algorithms\n- Unlike other grid/random search algorithms, this one enables you to get the observation-by-observation results from each parameter set so that you can do deep post-mortem analysis of the grid/random search.\n\n### data_eng\n\nThe `data_eng` submodule will have these classes (sfs has been released):\n\n#### distributed_sql (in development)\n**Description:**\n- This enables users to chunk multi-parameter sql queries and process them on multiple threads.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/awhedon/gaplearn", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "awtest", "package_url": "https://pypi.org/project/awtest/", "platform": "", "project_url": "https://pypi.org/project/awtest/", "project_urls": {"Homepage": "http://github.com/awhedon/gaplearn"}, "release_url": "https://pypi.org/project/awtest/1.4/", "requires_dist": null, "requires_python": "", "summary": "Bridging gaps between other machine learning and deep learning tools and making robust, post-mortem analysis possible.", "version": "1.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>GapLearn</h1>\n<p>GapLearn bridges gaps between other machine learning and deep learning tools. All models can be passed to the functions below regardless of the framework they were built upon (scikit-learn, tensorflow, xgboost, or even good ole numpy).</p>\n<p>My first package objective is to bring transparency to the often black-boxy model training process by making by making robust post-mortem analysis of the hyperparameter and feature selection processes possible. The functions below also further automate some processes while still giving the user full control of the results.</p>\n<p>Many features are on their way. Unit tests and full documentation will be added shortly.</p>\n<p>The source code is available on <a href=\"https://www.github.com/awhedon/gaplearn\" rel=\"nofollow\">GitHub</a></p>\n<h2>Installation</h2>\n<pre>pip install gaplearn\n</pre>\n<p>See the latest version on <a href=\"https://pypi.org/project/gaplearn/\" rel=\"nofollow\">PyPI</a></p>\n<h2>Submodules</h2>\n<h3>cv</h3>\n<p>The <code>cv</code> submodule will have these classes (sfs has been released):</p>\n<h4>sfs</h4>\n<p><strong>Description:</strong></p>\n<ul>\n<li>This is a sequential feature selector that enables you to perform backwards elimination with any model (not just a linear regression).</li>\n<li>At each step, the feature that has the lowest permutation importance is selected for removal. The permutation importance is measured as the decrease in accuracy by default, but the user can pass any custom scoring function.</li>\n</ul>\n<p><strong>Improvements on their way:</strong></p>\n<ul>\n<li>Add forward selection and all subsets testing</li>\n<li>Add more built-in scoring functions to for assessing feature permutation importance</li>\n<li>Create custom permutation scoring method to remove <code>eli5</code> as a dependency</li>\n<li>Enable a user to get the feature set that matches a certain criteria (\"has n features\", \"has score &gt; x\")</li>\n</ul>\n<h5>Methods</h5>\n<p><strong>backwards_elimination(X, y, model = 'logit', params = {}, fit_function = None, predict_function = None, score_function = None, score_name = 'accuracy', cols = [], verbose = 0)</strong></p>\n<ul>\n<li>Run the backwards elimination</li>\n<li><strong>Params:</strong>\n<ul>\n<li>X: (DataFrame or matrix) with independent variables</li>\n<li>y: (iterable) dependent corresponding variable values</li>\n<li>params: (dict) parameter set for model</li>\n<li>model: (str or custom model type) if str ('logit' or 'rfc'), a corresponding sci-kit learn model will be used; if custom model type, the model you pass will be used</li>\n<li>fit_function: (function) the function that will be used to train the model; the function must accept the parameters <code>model</code>, <code>X</code>, and <code>y</code>; if this value is not set, <code>backwards_elimination</code> will attempt to use your model's <code>fit</code> method</li>\n<li>predict_function: (function) the function that will be used to make predictions with the model; the function must accept the parameters <code>model</code>, and <code>X</code>; if this value is not set, <code>backwards_elimination</code> will attempt to use your model's <code>predict</code> method</li>\n<li>score_function: (function) the function that will be used to score the model and determine the feature permutation importance; the function must accept the parameters <code>y</code> and <code>preds</code>; if this value is not set, the accuracy will be used</li>\n<li>score_name: (str) name of the score calculated by the <code>score_function</code>; 'accuracy' by default</li>\n</ul>\n</li>\n</ul>\n<p><strong>Example:</strong></p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pandas</span> <span class=\"k\">as</span> <span class=\"nn\">pd</span>\n<span class=\"kn\">from</span> <span class=\"nn\">gaplearn.cv</span> <span class=\"kn\">import</span> <span class=\"n\">sfs</span>\n\n<span class=\"c1\">#### Perform a backwards elimination with sci-kit learn's random forest model ####</span>\n\n<span class=\"n\">X</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">read_csv</span><span class=\"p\">(</span><span class=\"s1\">'X_classification.csv'</span><span class=\"p\">)</span>\n<span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">read_csv</span><span class=\"p\">(</span><span class=\"s1\">'y_classification.csv'</span><span class=\"p\">)</span>\n\n<span class=\"n\">fs_rfc</span> <span class=\"o\">=</span> <span class=\"n\">sfs</span><span class=\"p\">()</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'The backwards elimination has been run: </span><span class=\"si\">{}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">fs_rfc</span><span class=\"o\">.</span><span class=\"n\">be_complete</span><span class=\"p\">))</span>\n\n<span class=\"n\">fs_rfc</span><span class=\"o\">.</span><span class=\"n\">backwards_elimination</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"s1\">'rfc'</span><span class=\"p\">,</span> <span class=\"n\">params</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'n_jobs'</span><span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">})</span>\n\n<span class=\"c1\"># Get the step-by-step summary</span>\n<span class=\"n\">summary_rfc</span> <span class=\"o\">=</span> <span class=\"n\">fs_rfc</span><span class=\"o\">.</span><span class=\"n\">get_summary_be</span><span class=\"p\">()</span> <span class=\"c1\"># Alternatively, `summary_rfc = fs_rfc.summary_be`</span>\n\n<span class=\"c1\"># Get the predictions and true values for each observation</span>\n<span class=\"n\">results_rfc</span> <span class=\"o\">=</span> <span class=\"n\">fs_rfc</span><span class=\"o\">.</span><span class=\"n\">get_results_be</span><span class=\"p\">()</span> <span class=\"c1\"># Alternatively, `results_rfc = fs_rfc.results_be</span>\n\n<span class=\"c1\"># Get the features used in the analysis</span>\n<span class=\"n\">features_rfc</span> <span class=\"o\">=</span> <span class=\"n\">fs_rfc</span><span class=\"o\">.</span><span class=\"n\">features_be</span> <span class=\"c1\"># Alternatives, `sorted(list(results_rfc['feature to remove']))</span>\n\n<span class=\"c1\"># Identify which feature set can achieve at least 85% accuracy with the smallest number of features</span>\n<span class=\"n\">summary_rfc</span><span class=\"p\">[</span><span class=\"n\">summary_rfc</span><span class=\"p\">[</span><span class=\"s1\">'overall accuracy'</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"o\">.</span><span class=\"mi\">85</span><span class=\"p\">]</span>\n\n<span class=\"c1\">#### Perform a more complex backwards elimination with sci-kit learn's naive bayes model ####</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.linear_model</span> <span class=\"kn\">import</span> <span class=\"n\">SGDRegressor</span>\n\n<span class=\"n\">model_sgd</span> <span class=\"o\">=</span> <span class=\"n\">SGDRegressor</span><span class=\"p\">(</span><span class=\"n\">loss</span> <span class=\"o\">=</span> <span class=\"s1\">'modified_huber'</span><span class=\"p\">,</span> <span class=\"n\">penalty</span> <span class=\"o\">=</span> <span class=\"s1\">'elasticnet'</span><span class=\"p\">)</span>\n\n<span class=\"n\">X</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">read_csv</span><span class=\"p\">(</span><span class=\"s1\">'X_regression.csv'</span><span class=\"p\">)</span>\n<span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">read_csv</span><span class=\"p\">(</span><span class=\"s1\">'y_regression.csv'</span><span class=\"p\">)</span>\n\n<span class=\"n\">fs_nb</span> <span class=\"o\">=</span> <span class=\"n\">sfs</span><span class=\"p\">()</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">mse</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">preds</span><span class=\"p\">):</span>\n\t<span class=\"n\">score</span> <span class=\"o\">=</span> <span class=\"nb\">sum</span><span class=\"p\">([(</span><span class=\"n\">preds</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">y</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span> <span class=\"o\">**</span> <span class=\"mi\">2</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])])</span> <span class=\"o\">/</span> <span class=\"n\">y</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n\t<span class=\"k\">return</span> <span class=\"n\">score</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">arbitrary_prediction</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">,</span> <span class=\"n\">X</span><span class=\"p\">):</span>\n\t<span class=\"n\">preds</span> <span class=\"o\">=</span> <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">1</span> <span class=\"c1\"># arbitrarily deciding to add 1 to the prediction (realistically, this would be a wrapper for model that don't have a `fit` method)</span>\n\t<span class=\"k\">return</span> <span class=\"n\">preds</span>\n\n<span class=\"n\">fs_nb</span><span class=\"o\">.</span><span class=\"n\">backwards_elimination</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">model_sgd</span><span class=\"p\">,</span> <span class=\"n\">predict_function</span> <span class=\"o\">=</span> <span class=\"n\">arbitrary_prediction</span><span class=\"p\">,</span> <span class=\"n\">score_function</span> <span class=\"o\">=</span> <span class=\"n\">mse</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Get the step-by-step summary</span>\n<span class=\"n\">summary_nb</span> <span class=\"o\">=</span> <span class=\"n\">fs_nb</span><span class=\"o\">.</span><span class=\"n\">get_summary_be</span><span class=\"p\">()</span> <span class=\"c1\"># Alternatively, `summary = fs_nb.summary_be`</span>\n\n<span class=\"c1\"># Get the predictions and true values for each observation</span>\n<span class=\"n\">results_nb</span> <span class=\"o\">=</span> <span class=\"n\">fs_nb</span><span class=\"o\">.</span><span class=\"n\">get_results_be</span><span class=\"p\">()</span> <span class=\"c1\"># Alternatively, `results = fs_nb.results_be</span>\n\n<span class=\"c1\"># Get the features used in the analysis</span>\n<span class=\"n\">features_nb</span> <span class=\"o\">=</span> <span class=\"n\">fs_nb</span><span class=\"o\">.</span><span class=\"n\">features_be</span> <span class=\"c1\"># Alternatives, `sorted(list(results['feature to remove']))</span>\n</pre>\n<h4>param_search_cluster (in development)</h4>\n<p><strong>Description:</strong></p>\n<ul>\n<li>This is a hyperparameter grid/random search for clustering algorithms</li>\n<li>Unlike other grid/random search algorithms, this one enables you to get the observation-by-observation results from each parameter set so that you can do deep post-mortem analysis of the grid/random search.</li>\n</ul>\n<h4>param_search (in development)</h4>\n<p><strong>Description:</strong></p>\n<ul>\n<li>This is a hyperparameter grid/random search for both regression algorithms and classification algorithms</li>\n<li>Unlike other grid/random search algorithms, this one enables you to get the observation-by-observation results from each parameter set so that you can do deep post-mortem analysis of the grid/random search.</li>\n</ul>\n<h3>data_eng</h3>\n<p>The <code>data_eng</code> submodule will have these classes (sfs has been released):</p>\n<h4>distributed_sql (in development)</h4>\n<p><strong>Description:</strong></p>\n<ul>\n<li>This enables users to chunk multi-parameter sql queries and process them on multiple threads.</li>\n</ul>\n\n          </div>"}, "last_serial": 5648195, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "a7954e8e947545d5bbe1f98a3f416f00", "sha256": "c96df4f87a1d87ff94a2c3c3fb626a5649def03c096705918906fd28806c4547"}, "downloads": -1, "filename": "awtest-0.1.tar.gz", "has_sig": false, "md5_digest": "a7954e8e947545d5bbe1f98a3f416f00", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4619, "upload_time": "2019-08-05T02:27:20", "upload_time_iso_8601": "2019-08-05T02:27:20.889010Z", "url": "https://files.pythonhosted.org/packages/de/bd/81715ffe0f59dfc4e4b9ff825aa2018cf5f430a81be67c38dbb389908d4b/awtest-0.1.tar.gz", "yanked": false}], "0.10": [{"comment_text": "", "digests": {"md5": "65720004288b651517736b235faf155b", "sha256": "7ea0511542988434cf65f5a7b07a51add9855a9b0c2fe3056624ef2894a292a2"}, "downloads": -1, "filename": "awtest-0.10.tar.gz", "has_sig": false, "md5_digest": "65720004288b651517736b235faf155b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4838, "upload_time": "2019-08-05T15:23:44", "upload_time_iso_8601": "2019-08-05T15:23:44.233693Z", "url": "https://files.pythonhosted.org/packages/9d/07/cd8b02c489660d07198722a641a59ab35db6b46a1fc7a569a5a7fb7282e2/awtest-0.10.tar.gz", "yanked": false}], "0.11": [{"comment_text": "", "digests": {"md5": "531de805d853548fc3cb7d8d68c1a8ad", "sha256": "22b246580c313d6b4c64fcb28f19398f16f8b155ae293f40f588e2af3f0dfed5"}, "downloads": -1, "filename": "awtest-0.11.tar.gz", "has_sig": false, "md5_digest": "531de805d853548fc3cb7d8d68c1a8ad", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4849, "upload_time": "2019-08-05T15:29:05", "upload_time_iso_8601": "2019-08-05T15:29:05.256219Z", "url": "https://files.pythonhosted.org/packages/9a/c9/f5bd5864d6a6ea8415ce85685f6004db94512c27da80088664bb95883409/awtest-0.11.tar.gz", "yanked": false}], "0.12": [{"comment_text": "", "digests": {"md5": "150561b43c123e950c9eed69f5d03eca", "sha256": "45ebb22f661876f77e9ca45799f1a40181a7f29e816683fa3816edf9542cef3f"}, "downloads": -1, "filename": "awtest-0.12.tar.gz", "has_sig": false, "md5_digest": "150561b43c123e950c9eed69f5d03eca", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4843, "upload_time": "2019-08-05T15:32:47", "upload_time_iso_8601": "2019-08-05T15:32:47.539261Z", "url": "https://files.pythonhosted.org/packages/14/15/035e5fd51cff74bcdb167ab160f619dfdcd5ecea273ab8442543f13ef34c/awtest-0.12.tar.gz", "yanked": false}], "0.13": [{"comment_text": "", "digests": {"md5": "348d50c6006ec969ddb3dde016992dc3", "sha256": "da84d0eb5e137a549de43eef53781bbae9cc9596201d3afb36077a68acda3bc3"}, "downloads": -1, "filename": "awtest-0.13.tar.gz", "has_sig": false, "md5_digest": "348d50c6006ec969ddb3dde016992dc3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4911, "upload_time": "2019-08-05T15:36:04", "upload_time_iso_8601": "2019-08-05T15:36:04.082108Z", "url": "https://files.pythonhosted.org/packages/e3/39/a4166eae2bca78e16c8e482f1c2fd623ef779fc94845fafb2c7a7cbf9578/awtest-0.13.tar.gz", "yanked": false}], "0.14": [{"comment_text": "", "digests": {"md5": "1edd40d8158765aceb5d52bb97a6db61", "sha256": "665b09e0001fca85d9818c4c3d2e72150772d05bed0523c3292a4c6365e453ab"}, "downloads": -1, "filename": "awtest-0.14.tar.gz", "has_sig": false, "md5_digest": "1edd40d8158765aceb5d52bb97a6db61", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4915, "upload_time": "2019-08-05T15:38:40", "upload_time_iso_8601": "2019-08-05T15:38:40.143667Z", "url": "https://files.pythonhosted.org/packages/68/e4/3e43b4816154b245a7e5e6f455abd00d63ca45674c10c7effa2d83b10d61/awtest-0.14.tar.gz", "yanked": false}], "0.15": [{"comment_text": "", "digests": {"md5": "ab6ecd868ed8a735bf84e81b8f7424e6", "sha256": "b43e6879cc35b359265c48acb385aa5483b386a1c04139f06bf9833a11b492fd"}, "downloads": -1, "filename": "awtest-0.15.tar.gz", "has_sig": false, "md5_digest": "ab6ecd868ed8a735bf84e81b8f7424e6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5512, "upload_time": "2019-08-05T23:36:41", "upload_time_iso_8601": "2019-08-05T23:36:41.959743Z", "url": "https://files.pythonhosted.org/packages/2d/d2/3bafa551e1ea350e2e9407d0544e5b2b694903236a911058c648cbe4ec3d/awtest-0.15.tar.gz", "yanked": false}], "0.16": [{"comment_text": "", "digests": {"md5": "415df65d7f4edd94420a98f40b743f71", "sha256": "bb945d6bfe81d9f4279d556bb3b731be95bd199232526eed649af42376dd3406"}, "downloads": -1, "filename": "awtest-0.16.tar.gz", "has_sig": false, "md5_digest": "415df65d7f4edd94420a98f40b743f71", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5515, "upload_time": "2019-08-05T23:38:42", "upload_time_iso_8601": "2019-08-05T23:38:42.515190Z", "url": "https://files.pythonhosted.org/packages/41/46/ba69e6ac2f26aadc5546efa55d61c57b436b8e8b029ec2e4cbce7a5afe66/awtest-0.16.tar.gz", "yanked": false}], "0.17": [{"comment_text": "", "digests": {"md5": "258d7248fb4c2156ccb73bdcc1d37730", "sha256": "302c5f5fd010690b542ddab678dbd61424a21c626a13f9c74f9c976a55177033"}, "downloads": -1, "filename": "awtest-0.17.tar.gz", "has_sig": false, "md5_digest": "258d7248fb4c2156ccb73bdcc1d37730", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5520, "upload_time": "2019-08-05T23:41:18", "upload_time_iso_8601": "2019-08-05T23:41:18.228007Z", "url": "https://files.pythonhosted.org/packages/12/54/03b6cdf57c76ff48ea9e0219738a1b1bbb098450e8bf8fc68f673662b979/awtest-0.17.tar.gz", "yanked": false}], "0.18": [{"comment_text": "", "digests": {"md5": "4c0a73ec32aded8f3d617721e510d1eb", "sha256": "2172fec15f335255d80978de002a3acfe0d8ac84514828ca9e3c43a44fc0387e"}, "downloads": -1, "filename": "awtest-0.18.tar.gz", "has_sig": false, "md5_digest": "4c0a73ec32aded8f3d617721e510d1eb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5544, "upload_time": "2019-08-05T23:44:15", "upload_time_iso_8601": "2019-08-05T23:44:15.990027Z", "url": "https://files.pythonhosted.org/packages/6f/9a/68222389c16719054023159006d2464da0084adad3d6b1b6cb596a4c4076/awtest-0.18.tar.gz", "yanked": false}], "0.19": [{"comment_text": "", "digests": {"md5": "98c81cc9748c62daedb35964fdeb76cf", "sha256": "e7d1b1f183bc7ccc1456a249eef65fe0e301bdd978e4b6e4f513206a25ebff16"}, "downloads": -1, "filename": "awtest-0.19.tar.gz", "has_sig": false, "md5_digest": "98c81cc9748c62daedb35964fdeb76cf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5560, "upload_time": "2019-08-05T23:45:51", "upload_time_iso_8601": "2019-08-05T23:45:51.868859Z", "url": "https://files.pythonhosted.org/packages/8e/8b/60c56be0c1c5792893fbe9db3c7e86f682220d29588b7bcc767678b4aba4/awtest-0.19.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "3865d81e8bb262515396e4577b669ddb", "sha256": "8cbf50e1a9c17521bd31ba541067c93004acbdb0cb234474d7da3d566ef0ef83"}, "downloads": -1, "filename": "awtest-0.2.tar.gz", "has_sig": false, "md5_digest": "3865d81e8bb262515396e4577b669ddb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4627, "upload_time": "2019-08-05T02:30:57", "upload_time_iso_8601": "2019-08-05T02:30:57.991672Z", "url": "https://files.pythonhosted.org/packages/5c/e2/15db968deac1147cace71f950c2de2a009ea5f5946f2ab963121b6e88c8c/awtest-0.2.tar.gz", "yanked": false}], "0.20": [{"comment_text": "", "digests": {"md5": "90b345aa8d2c7941fc6a305566fef9eb", "sha256": "087a640b15100f4b53f963897fcdab2b06bc051dfed942ba0da31c395e68c663"}, "downloads": -1, "filename": "awtest-0.20.tar.gz", "has_sig": false, "md5_digest": "90b345aa8d2c7941fc6a305566fef9eb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5555, "upload_time": "2019-08-05T23:47:10", "upload_time_iso_8601": "2019-08-05T23:47:10.300983Z", "url": "https://files.pythonhosted.org/packages/87/f3/e597dec7eefb20078cc581e2c9f8c96857cc9a024d042e1e2a4577dbb095/awtest-0.20.tar.gz", "yanked": false}], "0.21": [{"comment_text": "", "digests": {"md5": "000759b2eaa0a0620c1d4dd1e70a215f", "sha256": "c932b5733a3fc9198db5f8d2d6c1225531c7df485e1c298ce772baeda54e0a07"}, "downloads": -1, "filename": "awtest-0.21.tar.gz", "has_sig": false, "md5_digest": "000759b2eaa0a0620c1d4dd1e70a215f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5551, "upload_time": "2019-08-05T23:49:33", "upload_time_iso_8601": "2019-08-05T23:49:33.670983Z", "url": "https://files.pythonhosted.org/packages/0d/e4/35c41c18a56c500e75333750a23c5ea88900cff8f05f1880c12dd434d058/awtest-0.21.tar.gz", "yanked": false}], "0.22": [{"comment_text": "", "digests": {"md5": "27e05b57776969c99a685e8f9a08562d", "sha256": "512b0d7d33e1cd58965e35a1b53f49ae3a801e97da89d905cc2682f7aee06e63"}, "downloads": -1, "filename": "awtest-0.22.tar.gz", "has_sig": false, "md5_digest": "27e05b57776969c99a685e8f9a08562d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5551, "upload_time": "2019-08-05T23:51:18", "upload_time_iso_8601": "2019-08-05T23:51:18.593088Z", "url": "https://files.pythonhosted.org/packages/71/5a/88d40ed553104c30d9eb72a9f80b4c01cab1ccab57aa95f728fd0d6a3d56/awtest-0.22.tar.gz", "yanked": false}], "0.23": [{"comment_text": "", "digests": {"md5": "2d9930bd34b2a915eac68e277102a1b3", "sha256": "5449602558be8cd1fb9a95a66db7abbacf59f78e21f6f2aa37340aead0ee00eb"}, "downloads": -1, "filename": "awtest-0.23.tar.gz", "has_sig": false, "md5_digest": "2d9930bd34b2a915eac68e277102a1b3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5572, "upload_time": "2019-08-06T00:03:13", "upload_time_iso_8601": "2019-08-06T00:03:13.412061Z", "url": "https://files.pythonhosted.org/packages/10/0a/dff8583099b5239adf73615aec5adcdb9269ff20de6d7c77c4b2dc901451/awtest-0.23.tar.gz", "yanked": false}], "0.24": [{"comment_text": "", "digests": {"md5": "979dc42618994fbd29a160baf21387f4", "sha256": "3d835105e0c0dbf7dae75873e4b74db08d1183d235235e54ab503d4f709860cd"}, "downloads": -1, "filename": "awtest-0.24.tar.gz", "has_sig": false, "md5_digest": "979dc42618994fbd29a160baf21387f4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5672, "upload_time": "2019-08-06T00:23:15", "upload_time_iso_8601": "2019-08-06T00:23:15.745701Z", "url": "https://files.pythonhosted.org/packages/50/22/af4e9c2037f6dbbc4c49521ce601d512a08dfbbe52021f8e21e008e433c7/awtest-0.24.tar.gz", "yanked": false}], "0.25": [{"comment_text": "", "digests": {"md5": "3c2f461649d995a0c1c39f0f27c44058", "sha256": "5eead5bcfe6638b11449fc84efd27bcfa60177257af952f5427ab3bb64061e56"}, "downloads": -1, "filename": "awtest-0.25.tar.gz", "has_sig": false, "md5_digest": "3c2f461649d995a0c1c39f0f27c44058", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5674, "upload_time": "2019-08-06T00:25:48", "upload_time_iso_8601": "2019-08-06T00:25:48.140232Z", "url": "https://files.pythonhosted.org/packages/cb/87/ec26d2b9c42b13ecb12cf5dac16f6cb31c8597cfa39faa6c9ccce53e64ba/awtest-0.25.tar.gz", "yanked": false}], "0.26": [{"comment_text": "", "digests": {"md5": "94836e914fdce2d2a67bc3f70ebc2982", "sha256": "16f3449193381308c90ff9365d309c46dcab328b4952b612e95155edca322380"}, "downloads": -1, "filename": "awtest-0.26.tar.gz", "has_sig": false, "md5_digest": "94836e914fdce2d2a67bc3f70ebc2982", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6503, "upload_time": "2019-08-07T19:30:59", "upload_time_iso_8601": "2019-08-07T19:30:59.375634Z", "url": "https://files.pythonhosted.org/packages/67/b1/f06b103aa00554879693413986907f539dbdc21b4cca7a88ef5a2f482e5b/awtest-0.26.tar.gz", "yanked": false}], "0.27": [{"comment_text": "", "digests": {"md5": "cb4341aa432c23f174d69dee4c71a9f3", "sha256": "82b69287d87df170aecc6f6d6e9b41ee322babebcfc5a30e1c4730bcb70ef47d"}, "downloads": -1, "filename": "awtest-0.27.tar.gz", "has_sig": false, "md5_digest": "cb4341aa432c23f174d69dee4c71a9f3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6500, "upload_time": "2019-08-07T19:33:09", "upload_time_iso_8601": "2019-08-07T19:33:09.628256Z", "url": "https://files.pythonhosted.org/packages/dd/1d/6a4fa514b200dad3740e013d3f7c923d73c085f2db110068f80359ff013a/awtest-0.27.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "de1134beda805b6a231cc97642aac09a", "sha256": "88b7c3efb44ac0c53ccaa3e11f838a9beca5c00e1d796d75fec87448b1ed28ec"}, "downloads": -1, "filename": "awtest-0.3.tar.gz", "has_sig": false, "md5_digest": "de1134beda805b6a231cc97642aac09a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4843, "upload_time": "2019-08-05T15:07:12", "upload_time_iso_8601": "2019-08-05T15:07:12.316176Z", "url": "https://files.pythonhosted.org/packages/6c/bd/922d6c076b22db865f43047d5252a9b76a1201cbc86af03e7f65d85b9774/awtest-0.3.tar.gz", "yanked": false}], "0.4": [{"comment_text": "", "digests": {"md5": "e3b319aa3f3eff643dec36983cf12bd5", "sha256": "579d18197e4efd42b56f9edf04c54179c902f4b8cc3489845e67613c14739a4b"}, "downloads": -1, "filename": "awtest-0.4.tar.gz", "has_sig": false, "md5_digest": "e3b319aa3f3eff643dec36983cf12bd5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4888, "upload_time": "2019-08-05T15:12:13", "upload_time_iso_8601": "2019-08-05T15:12:13.711641Z", "url": "https://files.pythonhosted.org/packages/74/25/0ca335479c9dbffd745e6832e2ec5ae3fd661707c141a160738fed5d6482/awtest-0.4.tar.gz", "yanked": false}], "0.5": [{"comment_text": "", "digests": {"md5": "ddbd05f61897df7fc8e1521aa6042028", "sha256": "69711468b41f340dc97e05b0c8f4360d52844748025ab9a8ba97ec5451dece8e"}, "downloads": -1, "filename": "awtest-0.5.tar.gz", "has_sig": false, "md5_digest": "ddbd05f61897df7fc8e1521aa6042028", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4891, "upload_time": "2019-08-05T15:13:34", "upload_time_iso_8601": "2019-08-05T15:13:34.140605Z", "url": "https://files.pythonhosted.org/packages/32/58/243a4f9569b7e680f92ca4906525f8bc366c99e29ef6199e918ac73630bb/awtest-0.5.tar.gz", "yanked": false}], "0.6": [{"comment_text": "", "digests": {"md5": "cbf21e0cfd8cd7e65c48ea4cad7a9c89", "sha256": "c4a36d306ce2418430542d382b1226305defd4cfadf502dd386b2007d4e2a3d8"}, "downloads": -1, "filename": "awtest-0.6.tar.gz", "has_sig": false, "md5_digest": "cbf21e0cfd8cd7e65c48ea4cad7a9c89", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4705, "upload_time": "2019-08-05T02:25:07", "upload_time_iso_8601": "2019-08-05T02:25:07.152463Z", "url": "https://files.pythonhosted.org/packages/b6/15/586ce65f90214d36ba2c6652550cd63ff2a53615d2b0f3fef0d1902b2d1b/awtest-0.6.tar.gz", "yanked": false}], "0.7": [{"comment_text": "", "digests": {"md5": "b40068bcac0eef8f2a6339f334ca1375", "sha256": "b0ca1e6e609140289ceca1321464a91dd2268da8e142183d2303844d8fc67db1"}, "downloads": -1, "filename": "awtest-0.7.tar.gz", "has_sig": false, "md5_digest": "b40068bcac0eef8f2a6339f334ca1375", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4844, "upload_time": "2019-08-05T15:15:54", "upload_time_iso_8601": "2019-08-05T15:15:54.818039Z", "url": "https://files.pythonhosted.org/packages/a5/e1/abb4c273df55805c4fb9800aaedacac3ad8828e2e12c5f0e833e5b8df572/awtest-0.7.tar.gz", "yanked": false}], "0.8": [{"comment_text": "", "digests": {"md5": "3710422388e5160f86a29348fc527b15", "sha256": "aa27006db82c0b5ded4d8fc4cf817f2b3b7d44722eda50d57e66957998479c8c"}, "downloads": -1, "filename": "awtest-0.8.tar.gz", "has_sig": false, "md5_digest": "3710422388e5160f86a29348fc527b15", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4844, "upload_time": "2019-08-05T15:18:40", "upload_time_iso_8601": "2019-08-05T15:18:40.951663Z", "url": "https://files.pythonhosted.org/packages/2a/59/5c51dc3a3539b300d8a0291db96ac80506639e59e137ced44c46e85af41f/awtest-0.8.tar.gz", "yanked": false}], "0.9": [{"comment_text": "", "digests": {"md5": "30a39477e9104a8f3cdb190075efff97", "sha256": "186f46e94b262edb9a8ae61c1b99c6a572dc198043c6c76344dd1ba9bc858067"}, "downloads": -1, "filename": "awtest-0.9.tar.gz", "has_sig": false, "md5_digest": "30a39477e9104a8f3cdb190075efff97", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4845, "upload_time": "2019-08-05T15:21:19", "upload_time_iso_8601": "2019-08-05T15:21:19.642815Z", "url": "https://files.pythonhosted.org/packages/ab/7c/8b07a9ebba4bf5f483413ecca15ecdb222ffc0b9f45ea23d39ed546806f8/awtest-0.9.tar.gz", "yanked": false}], "1.0": [{"comment_text": "", "digests": {"md5": "cbaac834c8e3a593eadbb8f1bed3f482", "sha256": "02bb799a8b3ef3ad46633370a247b3f7d4fcaf9ad893a07de5566cddaeed3c6f"}, "downloads": -1, "filename": "awtest-1.0.tar.gz", "has_sig": false, "md5_digest": "cbaac834c8e3a593eadbb8f1bed3f482", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6497, "upload_time": "2019-08-07T19:34:18", "upload_time_iso_8601": "2019-08-07T19:34:18.505839Z", "url": "https://files.pythonhosted.org/packages/d8/0a/6353972ae1b55f47c351c18b1a5af71ec708daaf607ac6044017079a63cf/awtest-1.0.tar.gz", "yanked": false}], "1.1": [{"comment_text": "", "digests": {"md5": "ab9c8a296a8b627e5d2b73f3be1aea53", "sha256": "6bdcb10bb1d053f0dd74535eabd9de46863f74482f7b78ae6b41fe561265b89b"}, "downloads": -1, "filename": "awtest-1.1.tar.gz", "has_sig": false, "md5_digest": "ab9c8a296a8b627e5d2b73f3be1aea53", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6497, "upload_time": "2019-08-07T19:36:06", "upload_time_iso_8601": "2019-08-07T19:36:06.045565Z", "url": "https://files.pythonhosted.org/packages/27/7c/46f506945458e2bda41247d5a96a377c80d21df78d5a9334e15d75477c16/awtest-1.1.tar.gz", "yanked": false}], "1.2": [{"comment_text": "", "digests": {"md5": "e092d30b86fd163a30a419a0f0a59c52", "sha256": "e852a2c5b3b7f4f3be57789d7e1ae603040d9c6fd1eaa93844af5c274b0022ab"}, "downloads": -1, "filename": "awtest-1.2.tar.gz", "has_sig": false, "md5_digest": "e092d30b86fd163a30a419a0f0a59c52", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8400, "upload_time": "2019-08-08T04:46:29", "upload_time_iso_8601": "2019-08-08T04:46:29.713449Z", "url": "https://files.pythonhosted.org/packages/87/bb/fc1f19dde9cca1d407e5899819092f720cd0faefd7438c0cd26c48d04bde/awtest-1.2.tar.gz", "yanked": false}], "1.3": [{"comment_text": "", "digests": {"md5": "959c2011b271156204df6f6d7a626611", "sha256": "0f01edbd411cb5291ae01d5eb49d69030c7ab91cafdcebaade43037af5332096"}, "downloads": -1, "filename": "awtest-1.3.tar.gz", "has_sig": false, "md5_digest": "959c2011b271156204df6f6d7a626611", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10631, "upload_time": "2019-08-08T04:57:44", "upload_time_iso_8601": "2019-08-08T04:57:44.472122Z", "url": "https://files.pythonhosted.org/packages/ed/52/9dfdf915da4a459ce57d309169318838ae337fa8120fed71e022ab9432ba/awtest-1.3.tar.gz", "yanked": false}], "1.4": [{"comment_text": "", "digests": {"md5": "865ae70afa69ab050384654ae8df0ac0", "sha256": "4d40439ecb1f602c58a0fc4efb4fd31c6773d50ec52893c3bff596ca072133ad"}, "downloads": -1, "filename": "awtest-1.4.tar.gz", "has_sig": false, "md5_digest": "865ae70afa69ab050384654ae8df0ac0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10627, "upload_time": "2019-08-08T04:57:46", "upload_time_iso_8601": "2019-08-08T04:57:46.013185Z", "url": "https://files.pythonhosted.org/packages/e3/37/2c9b099f2c8eda6930498f0878abad33f2bc9d37f6a79d7f4bf97790b7c5/awtest-1.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "865ae70afa69ab050384654ae8df0ac0", "sha256": "4d40439ecb1f602c58a0fc4efb4fd31c6773d50ec52893c3bff596ca072133ad"}, "downloads": -1, "filename": "awtest-1.4.tar.gz", "has_sig": false, "md5_digest": "865ae70afa69ab050384654ae8df0ac0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10627, "upload_time": "2019-08-08T04:57:46", "upload_time_iso_8601": "2019-08-08T04:57:46.013185Z", "url": "https://files.pythonhosted.org/packages/e3/37/2c9b099f2c8eda6930498f0878abad33f2bc9d37f6a79d7f4bf97790b7c5/awtest-1.4.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:15:32 2020"}