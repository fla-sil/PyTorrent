{"info": {"author": "1533 Systems", "author_email": "info@1533.io", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": "# Driveline Python SDK\n\n\nAt the core of the Python SDK is the class `DrivelineClient`.\n\n```python\nimport asyncio\n\nfrom driveline import DrivelineClient, run_async\n\nasync def main():\n    async with DrivelineClient('ws://127.0.0.1:8080') as client:\n\n        # list all streams\n        async for stream_name in await client.list_streams('*'):\n            print('found stream:', stream_name)\n\n        # list all keys is the document store\n        async for key_name in await client.list_keys('*'):\n            print('found document with key', key_name)\n\n\n        # store a document in the document store\n        await client.store('key/1', dict(title='Welcome', body='Hello, world!'))\n\n        # load a key from the document store\n        future_record = await client.load('key/1')\n        record = await future_record\n        print('document associated with key/1 is:', record.record, 'id:', record.record_id)\n\n        # remove all records in the document store with keys matching 'key/...'\n        await client.removeMatches('key/*')\n\n        # run a live query against a stream. \n        # We want all records that have an odd index\n        def query_handler(res):\n            print('query returned record:', res.record, 'id:', res.record_id)\n        query = await client.continuous_query('SELECT * FROM STREAM my_stream where index % 1 == 1', query_handler)\n\n\n        # stop the query\n        await asyncio.sleep(10)\n        await client.cancel(query)\n\n        # quit\n        await client.close()\n\nif __name__ == '__main__':\n    run_async(main())\n```\n\n\n# DQL Driveline Query Language\n\n## Query syntax\n\n### Basic syntax\n\n```sql\nSELECT <selector> FROM STREAM <stream> [WHERE <expression>]\nSELECT * FROM STREAM stream_1\nSELECT * FROM STREAM stream_1 WHERE key=value\nSELECT time AS t,(2+3) AS five FROM STREAM stream_1 WHERE age BETWEEN 21 AND 25 OR name LIKE 'Joe%'\n```\n\n`DQL` supports standard `SQL` query syntax, excluding Joins and\nAggregates. This means `DQL` can be used for all forms of data filtering\nand partitioning of data over live streams.\n\n### KV query\n\n```sql\nSELECT <selector> FROM <string-key-name-expression> [WHERE <expression>]\nSELECT * FROM 'users/*' WHERE color='red'\n```\n\nMulti key query is a `DQL` extension that lets you subscribe to multiple\nevent streams, automatically subscribing to new streams as they form,\nbased on the stream name expression. Stream name expression use file-system/Pythong `Glob`,\nwith `?`, `*` and `**` serving as the wildcard match characters.\n\n### ECMAScript Object Notation (JavaScript extensions)\n\n```sql\nSELECT {time,name:user.name,phone_number:user.phone.mobile.number,original:{...*}} FROM stream\n```\n\nWith inputs of the form:\n\n```javascript\n{time:123, user: {name:'joe', phone: {mobile: {number:'1-800-123-4567'}}}}\n```\n\nResults in:\n\n```javascript\n{time:123,name:'joe',phone_number:'1-800-123-4567',original:{time:123,user:phone:{...}}}\n```\n\n## Operators\n\nThe following table summarizes all language operators in order of\nprecedence\n\n| Name                                      | Description         | Example                                               | Additional details                                                                                                |\n|:------------------------------------------|:--------------------|:------------------------------------------------------|:------------------------------------------------------------------------------------------------------------------|\n| `OR`                                      | extended logical OR | `SELECT * FROM STREAM stream WHERE a OR b`            | `if (a) return a; else return b;`                                                                                 |\n| `AND`                                     | logical AND         | `SELECT * FROM STREAM stream WHERE a AND b`           | `if (a && b) return true; else return false;`                                                                     |\n| `NOT`                                     | logical NOT         | `SELECT * FROM STREAM stream WHERE NOT a`             | `if (a) return false; else return true;`                                                                          |\n| `IS [NOT] NULL`                           | Null check          | `SELECT * FROM STREAM stream WHERE a IS NOT NULL`     | `if (null===a) return true; return false;`                                                                        |\n| `IN`                                      | Set lookup          | `SELECT * FROM STREAM stream WHERE a IN (1,2,3)`      | All values in paranthesis must be constants                                                                       |\n| `BETWEEN`                                 | Compare range       | `SELECT * FROM STREAM stream WHERE a BETWEEN b AND c` | `if (b<c) return (a>=b && a<=c); else return (a>=c && a<=b);`                                                     |\n| `=` `>=` `<=` `!=` `>` `<` `!<` `!>` `<>` | Compare             | `SELECT * FROM STREAM STREAM WHERE a <> b`            |                                                                                                                   |\n| `LIKE`                                    | Pattern match       | `SELECT * FROM STREAM stream WHERE a like '%b%'`      | `_` stands for single, `%` stands for multi-char match                                                            |\n| `+` `-`                                   | Unary plus/minus    | `SELECT * FROM STREAM stream WHERE -5 < +5`           |                                                                                                                   |\n| `+` `-`                                   | Addition            | `SELECT * FROM STREAM stream WHERE 1+2=3`             |                                                                                                                   |\n| `*` `/` `%`                               | Multiplicative      | `SELECT * FROM STREAM stream WHERE 3%2=1`             |                                                                                                                   |\n| `( exp )`                                 | Paranthesis         | `SELECT * FROM STREAM stream WHERE (1+2)*3=9`         |                                                                                                                   |\n| `true` `false` `null`                     | Constant            | `SELECT * FROM STREAM stream WHERE true != false`     |                                                                                                                   |\n| `-123.45e-1`                              | Numeric constant    |                                                       |                                                                                                                   |\n| `'hello'`                                 | String constant     |                                                       | `SELECT * FROM stream WHERE name='joe'`                                                                           |\n| `name`                                    | Identifier          | `SELECT name FROM STREAM stream`                      |                                                                                                                   |\n| `` `user name` ``                         | Identifier          | ``SELECT `user name` FROM STREAM stream``             | (backticks) Allows using identifier names that are otherwise invalid, e.g., contain invalid characters or symbols |\n\n\n## Built-in functions\n\n| Name        | Description                                         | Example                                                             |\n|:------------|:----------------------------------------------------|:--------------------------------------------------------------------|\n| ABS         | Absolute value `float=>float`                       | `SELECT ABS(-5) AS num FROM stream` `{num:5}`                       |\n| CEIL        | Rounded up value `float=>float`                     | `SELECT CEIL(4.5) AS num FROM stream` `{num:5}`                     |\n| FLOOR       | Rounded down value `float=>float`                   | `SELECT FLOOR(4.5) AS num FROM stream` `{num:4}`                    |\n| EXP         | Natural exponent `float=>float`                     | `SELECT EXP(1) AS num FROM stream` `{num:2.718281828459045}`        |\n| LN          | Natural logarithm `float=>float`                    | `SELECT LN(2) AS num FROM stream` `{num:0.6931471805599453}`        |\n| SQRT        | Square root `float=>float`                          | `SELECT SQRT(9) AS num FROM stream` `{num:3}`                       |\n| HASH        | Hash function `any=>uint64`                         | `SELECT HASH('abc') AS num FROM stream` `{num:4952883123889572249}` |\n| CHAR_LENGTH | Length of string `string->int32`                    | `SELECT CHAR_LENGTH('abc') AS num FROM stream` `{num:3}`            |\n| POSITION    | Index of substring in string `string,string->int32` | `SELECT POSITION('bc' IN 'abc') AS num FROM stream` `{num:2}`       |\n| LOCATE      | Index of substring in string `string,string->int32` | `SELECT LOCATE('bc', 'abc') AS num FROM stream` `{num:2}`           |\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/1533-systems/python3-sdk", "keywords": "driveline performance database streaming document", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "driveline", "package_url": "https://pypi.org/project/driveline/", "platform": "", "project_url": "https://pypi.org/project/driveline/", "project_urls": {"Homepage": "https://github.com/1533-systems/python3-sdk"}, "release_url": "https://pypi.org/project/driveline/0.14.1/", "requires_dist": ["websockets (~=7.0)", "cbor (~=1.0)"], "requires_python": ">=3.6.0", "summary": "Driveline client", "version": "0.14.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Driveline Python SDK</h1>\n<p>At the core of the Python SDK is the class <code>DrivelineClient</code>.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">driveline</span> <span class=\"kn\">import</span> <span class=\"n\">DrivelineClient</span><span class=\"p\">,</span> <span class=\"n\">run_async</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">DrivelineClient</span><span class=\"p\">(</span><span class=\"s1\">'ws://127.0.0.1:8080'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">client</span><span class=\"p\">:</span>\n\n        <span class=\"c1\"># list all streams</span>\n        <span class=\"k\">async</span> <span class=\"k\">for</span> <span class=\"n\">stream_name</span> <span class=\"ow\">in</span> <span class=\"k\">await</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">list_streams</span><span class=\"p\">(</span><span class=\"s1\">'*'</span><span class=\"p\">):</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'found stream:'</span><span class=\"p\">,</span> <span class=\"n\">stream_name</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># list all keys is the document store</span>\n        <span class=\"k\">async</span> <span class=\"k\">for</span> <span class=\"n\">key_name</span> <span class=\"ow\">in</span> <span class=\"k\">await</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">list_keys</span><span class=\"p\">(</span><span class=\"s1\">'*'</span><span class=\"p\">):</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'found document with key'</span><span class=\"p\">,</span> <span class=\"n\">key_name</span><span class=\"p\">)</span>\n\n\n        <span class=\"c1\"># store a document in the document store</span>\n        <span class=\"k\">await</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">store</span><span class=\"p\">(</span><span class=\"s1\">'key/1'</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">title</span><span class=\"o\">=</span><span class=\"s1\">'Welcome'</span><span class=\"p\">,</span> <span class=\"n\">body</span><span class=\"o\">=</span><span class=\"s1\">'Hello, world!'</span><span class=\"p\">))</span>\n\n        <span class=\"c1\"># load a key from the document store</span>\n        <span class=\"n\">future_record</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"s1\">'key/1'</span><span class=\"p\">)</span>\n        <span class=\"n\">record</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">future_record</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'document associated with key/1 is:'</span><span class=\"p\">,</span> <span class=\"n\">record</span><span class=\"o\">.</span><span class=\"n\">record</span><span class=\"p\">,</span> <span class=\"s1\">'id:'</span><span class=\"p\">,</span> <span class=\"n\">record</span><span class=\"o\">.</span><span class=\"n\">record_id</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># remove all records in the document store with keys matching 'key/...'</span>\n        <span class=\"k\">await</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">removeMatches</span><span class=\"p\">(</span><span class=\"s1\">'key/*'</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># run a live query against a stream. </span>\n        <span class=\"c1\"># We want all records that have an odd index</span>\n        <span class=\"k\">def</span> <span class=\"nf\">query_handler</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">):</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'query returned record:'</span><span class=\"p\">,</span> <span class=\"n\">res</span><span class=\"o\">.</span><span class=\"n\">record</span><span class=\"p\">,</span> <span class=\"s1\">'id:'</span><span class=\"p\">,</span> <span class=\"n\">res</span><span class=\"o\">.</span><span class=\"n\">record_id</span><span class=\"p\">)</span>\n        <span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">continuous_query</span><span class=\"p\">(</span><span class=\"s1\">'SELECT * FROM STREAM my_stream where index % 1 == 1'</span><span class=\"p\">,</span> <span class=\"n\">query_handler</span><span class=\"p\">)</span>\n\n\n        <span class=\"c1\"># stop the query</span>\n        <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n        <span class=\"k\">await</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">cancel</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># quit</span>\n        <span class=\"k\">await</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"n\">run_async</span><span class=\"p\">(</span><span class=\"n\">main</span><span class=\"p\">())</span>\n</pre>\n<h1>DQL Driveline Query Language</h1>\n<h2>Query syntax</h2>\n<h3>Basic syntax</h3>\n<pre><span class=\"k\">SELECT</span> <span class=\"o\">&lt;</span><span class=\"n\">selector</span><span class=\"o\">&gt;</span> <span class=\"k\">FROM</span> <span class=\"n\">STREAM</span> <span class=\"o\">&lt;</span><span class=\"n\">stream</span><span class=\"o\">&gt;</span> <span class=\"p\">[</span><span class=\"k\">WHERE</span> <span class=\"o\">&lt;</span><span class=\"n\">expression</span><span class=\"o\">&gt;</span><span class=\"p\">]</span>\n<span class=\"k\">SELECT</span> <span class=\"o\">*</span> <span class=\"k\">FROM</span> <span class=\"n\">STREAM</span> <span class=\"n\">stream_1</span>\n<span class=\"k\">SELECT</span> <span class=\"o\">*</span> <span class=\"k\">FROM</span> <span class=\"n\">STREAM</span> <span class=\"n\">stream_1</span> <span class=\"k\">WHERE</span> <span class=\"k\">key</span><span class=\"o\">=</span><span class=\"n\">value</span>\n<span class=\"k\">SELECT</span> <span class=\"k\">time</span> <span class=\"k\">AS</span> <span class=\"n\">t</span><span class=\"p\">,(</span><span class=\"mi\">2</span><span class=\"o\">+</span><span class=\"mi\">3</span><span class=\"p\">)</span> <span class=\"k\">AS</span> <span class=\"n\">five</span> <span class=\"k\">FROM</span> <span class=\"n\">STREAM</span> <span class=\"n\">stream_1</span> <span class=\"k\">WHERE</span> <span class=\"n\">age</span> <span class=\"k\">BETWEEN</span> <span class=\"mi\">21</span> <span class=\"k\">AND</span> <span class=\"mi\">25</span> <span class=\"k\">OR</span> <span class=\"n\">name</span> <span class=\"k\">LIKE</span> <span class=\"s1\">'Joe%'</span>\n</pre>\n<p><code>DQL</code> supports standard <code>SQL</code> query syntax, excluding Joins and\nAggregates. This means <code>DQL</code> can be used for all forms of data filtering\nand partitioning of data over live streams.</p>\n<h3>KV query</h3>\n<pre><span class=\"k\">SELECT</span> <span class=\"o\">&lt;</span><span class=\"n\">selector</span><span class=\"o\">&gt;</span> <span class=\"k\">FROM</span> <span class=\"o\">&lt;</span><span class=\"n\">string</span><span class=\"o\">-</span><span class=\"k\">key</span><span class=\"o\">-</span><span class=\"n\">name</span><span class=\"o\">-</span><span class=\"n\">expression</span><span class=\"o\">&gt;</span> <span class=\"p\">[</span><span class=\"k\">WHERE</span> <span class=\"o\">&lt;</span><span class=\"n\">expression</span><span class=\"o\">&gt;</span><span class=\"p\">]</span>\n<span class=\"k\">SELECT</span> <span class=\"o\">*</span> <span class=\"k\">FROM</span> <span class=\"s1\">'users/*'</span> <span class=\"k\">WHERE</span> <span class=\"n\">color</span><span class=\"o\">=</span><span class=\"s1\">'red'</span>\n</pre>\n<p>Multi key query is a <code>DQL</code> extension that lets you subscribe to multiple\nevent streams, automatically subscribing to new streams as they form,\nbased on the stream name expression. Stream name expression use file-system/Pythong <code>Glob</code>,\nwith <code>?</code>, <code>*</code> and <code>**</code> serving as the wildcard match characters.</p>\n<h3>ECMAScript Object Notation (JavaScript extensions)</h3>\n<pre><span class=\"k\">SELECT</span> <span class=\"err\">{</span><span class=\"k\">time</span><span class=\"p\">,</span><span class=\"n\">name</span><span class=\"p\">:</span><span class=\"k\">user</span><span class=\"p\">.</span><span class=\"n\">name</span><span class=\"p\">,</span><span class=\"n\">phone_number</span><span class=\"p\">:</span><span class=\"k\">user</span><span class=\"p\">.</span><span class=\"n\">phone</span><span class=\"p\">.</span><span class=\"n\">mobile</span><span class=\"p\">.</span><span class=\"nb\">number</span><span class=\"p\">,</span><span class=\"n\">original</span><span class=\"p\">:</span><span class=\"err\">{</span><span class=\"p\">...</span><span class=\"o\">*</span><span class=\"err\">}}</span> <span class=\"k\">FROM</span> <span class=\"n\">stream</span>\n</pre>\n<p>With inputs of the form:</p>\n<pre><span class=\"p\">{</span><span class=\"nx\">time</span><span class=\"o\">:</span><span class=\"mi\">123</span><span class=\"p\">,</span> <span class=\"nx\">user</span><span class=\"o\">:</span> <span class=\"p\">{</span><span class=\"nx\">name</span><span class=\"o\">:</span><span class=\"s1\">'joe'</span><span class=\"p\">,</span> <span class=\"nx\">phone</span><span class=\"o\">:</span> <span class=\"p\">{</span><span class=\"nx\">mobile</span><span class=\"o\">:</span> <span class=\"p\">{</span><span class=\"nx\">number</span><span class=\"o\">:</span><span class=\"s1\">'1-800-123-4567'</span><span class=\"p\">}}}}</span>\n</pre>\n<p>Results in:</p>\n<pre><span class=\"p\">{</span><span class=\"nx\">time</span><span class=\"o\">:</span><span class=\"mi\">123</span><span class=\"p\">,</span><span class=\"nx\">name</span><span class=\"o\">:</span><span class=\"s1\">'joe'</span><span class=\"p\">,</span><span class=\"nx\">phone_number</span><span class=\"o\">:</span><span class=\"s1\">'1-800-123-4567'</span><span class=\"p\">,</span><span class=\"nx\">original</span><span class=\"o\">:</span><span class=\"p\">{</span><span class=\"nx\">time</span><span class=\"o\">:</span><span class=\"mi\">123</span><span class=\"p\">,</span><span class=\"nx\">user</span><span class=\"o\">:</span><span class=\"nx\">phone</span><span class=\"o\">:</span><span class=\"p\">{...}}}</span>\n</pre>\n<h2>Operators</h2>\n<p>The following table summarizes all language operators in order of\nprecedence</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Name</th>\n<th align=\"left\">Description</th>\n<th align=\"left\">Example</th>\n<th align=\"left\">Additional details</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>OR</code></td>\n<td align=\"left\">extended logical OR</td>\n<td align=\"left\"><code>SELECT * FROM STREAM stream WHERE a OR b</code></td>\n<td align=\"left\"><code>if (a) return a; else return b;</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>AND</code></td>\n<td align=\"left\">logical AND</td>\n<td align=\"left\"><code>SELECT * FROM STREAM stream WHERE a AND b</code></td>\n<td align=\"left\"><code>if (a &amp;&amp; b) return true; else return false;</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>NOT</code></td>\n<td align=\"left\">logical NOT</td>\n<td align=\"left\"><code>SELECT * FROM STREAM stream WHERE NOT a</code></td>\n<td align=\"left\"><code>if (a) return false; else return true;</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>IS [NOT] NULL</code></td>\n<td align=\"left\">Null check</td>\n<td align=\"left\"><code>SELECT * FROM STREAM stream WHERE a IS NOT NULL</code></td>\n<td align=\"left\"><code>if (null===a) return true; return false;</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>IN</code></td>\n<td align=\"left\">Set lookup</td>\n<td align=\"left\"><code>SELECT * FROM STREAM stream WHERE a IN (1,2,3)</code></td>\n<td align=\"left\">All values in paranthesis must be constants</td>\n</tr>\n<tr>\n<td align=\"left\"><code>BETWEEN</code></td>\n<td align=\"left\">Compare range</td>\n<td align=\"left\"><code>SELECT * FROM STREAM stream WHERE a BETWEEN b AND c</code></td>\n<td align=\"left\"><code>if (b&lt;c) return (a&gt;=b &amp;&amp; a&lt;=c); else return (a&gt;=c &amp;&amp; a&lt;=b);</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>=</code> <code>&gt;=</code> <code>&lt;=</code> <code>!=</code> <code>&gt;</code> <code>&lt;</code> <code>!&lt;</code> <code>!&gt;</code> <code>&lt;&gt;</code></td>\n<td align=\"left\">Compare</td>\n<td align=\"left\"><code>SELECT * FROM STREAM STREAM WHERE a &lt;&gt; b</code></td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\"><code>LIKE</code></td>\n<td align=\"left\">Pattern match</td>\n<td align=\"left\"><code>SELECT * FROM STREAM stream WHERE a like '%b%'</code></td>\n<td align=\"left\"><code>_</code> stands for single, <code>%</code> stands for multi-char match</td>\n</tr>\n<tr>\n<td align=\"left\"><code>+</code> <code>-</code></td>\n<td align=\"left\">Unary plus/minus</td>\n<td align=\"left\"><code>SELECT * FROM STREAM stream WHERE -5 &lt; +5</code></td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\"><code>+</code> <code>-</code></td>\n<td align=\"left\">Addition</td>\n<td align=\"left\"><code>SELECT * FROM STREAM stream WHERE 1+2=3</code></td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\"><code>*</code> <code>/</code> <code>%</code></td>\n<td align=\"left\">Multiplicative</td>\n<td align=\"left\"><code>SELECT * FROM STREAM stream WHERE 3%2=1</code></td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\"><code>( exp )</code></td>\n<td align=\"left\">Paranthesis</td>\n<td align=\"left\"><code>SELECT * FROM STREAM stream WHERE (1+2)*3=9</code></td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\"><code>true</code> <code>false</code> <code>null</code></td>\n<td align=\"left\">Constant</td>\n<td align=\"left\"><code>SELECT * FROM STREAM stream WHERE true != false</code></td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\"><code>-123.45e-1</code></td>\n<td align=\"left\">Numeric constant</td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\"><code>'hello'</code></td>\n<td align=\"left\">String constant</td>\n<td align=\"left\"></td>\n<td align=\"left\"><code>SELECT * FROM stream WHERE name='joe'</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>name</code></td>\n<td align=\"left\">Identifier</td>\n<td align=\"left\"><code>SELECT name FROM STREAM stream</code></td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\"><code>`user name`</code></td>\n<td align=\"left\">Identifier</td>\n<td align=\"left\"><code>SELECT `user name` FROM STREAM stream</code></td>\n<td align=\"left\">(backticks) Allows using identifier names that are otherwise invalid, e.g., contain invalid characters or symbols</td>\n</tr></tbody></table>\n<h2>Built-in functions</h2>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Name</th>\n<th align=\"left\">Description</th>\n<th align=\"left\">Example</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">ABS</td>\n<td align=\"left\">Absolute value <code>float=&gt;float</code></td>\n<td align=\"left\"><code>SELECT ABS(-5) AS num FROM stream</code> <code>{num:5}</code></td>\n</tr>\n<tr>\n<td align=\"left\">CEIL</td>\n<td align=\"left\">Rounded up value <code>float=&gt;float</code></td>\n<td align=\"left\"><code>SELECT CEIL(4.5) AS num FROM stream</code> <code>{num:5}</code></td>\n</tr>\n<tr>\n<td align=\"left\">FLOOR</td>\n<td align=\"left\">Rounded down value <code>float=&gt;float</code></td>\n<td align=\"left\"><code>SELECT FLOOR(4.5) AS num FROM stream</code> <code>{num:4}</code></td>\n</tr>\n<tr>\n<td align=\"left\">EXP</td>\n<td align=\"left\">Natural exponent <code>float=&gt;float</code></td>\n<td align=\"left\"><code>SELECT EXP(1) AS num FROM stream</code> <code>{num:2.718281828459045}</code></td>\n</tr>\n<tr>\n<td align=\"left\">LN</td>\n<td align=\"left\">Natural logarithm <code>float=&gt;float</code></td>\n<td align=\"left\"><code>SELECT LN(2) AS num FROM stream</code> <code>{num:0.6931471805599453}</code></td>\n</tr>\n<tr>\n<td align=\"left\">SQRT</td>\n<td align=\"left\">Square root <code>float=&gt;float</code></td>\n<td align=\"left\"><code>SELECT SQRT(9) AS num FROM stream</code> <code>{num:3}</code></td>\n</tr>\n<tr>\n<td align=\"left\">HASH</td>\n<td align=\"left\">Hash function <code>any=&gt;uint64</code></td>\n<td align=\"left\"><code>SELECT HASH('abc') AS num FROM stream</code> <code>{num:4952883123889572249}</code></td>\n</tr>\n<tr>\n<td align=\"left\">CHAR_LENGTH</td>\n<td align=\"left\">Length of string <code>string-&gt;int32</code></td>\n<td align=\"left\"><code>SELECT CHAR_LENGTH('abc') AS num FROM stream</code> <code>{num:3}</code></td>\n</tr>\n<tr>\n<td align=\"left\">POSITION</td>\n<td align=\"left\">Index of substring in string <code>string,string-&gt;int32</code></td>\n<td align=\"left\"><code>SELECT POSITION('bc' IN 'abc') AS num FROM stream</code> <code>{num:2}</code></td>\n</tr>\n<tr>\n<td align=\"left\">LOCATE</td>\n<td align=\"left\">Index of substring in string <code>string,string-&gt;int32</code></td>\n<td align=\"left\"><code>SELECT LOCATE('bc', 'abc') AS num FROM stream</code> <code>{num:2}</code></td>\n</tr></tbody></table>\n\n          </div>"}, "last_serial": 4916885, "releases": {"0.14.0": [{"comment_text": "", "digests": {"md5": "823a86758dbaf4390b6dc5471396fbab", "sha256": "a74c410f9f06231dfd5bf0a55de2fcbbc0740f44fb6798fa015cb50f6495fc46"}, "downloads": -1, "filename": "driveline-0.14.0-py3-none-any.whl", "has_sig": false, "md5_digest": "823a86758dbaf4390b6dc5471396fbab", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 17267, "upload_time": "2019-02-20T21:38:32", "upload_time_iso_8601": "2019-02-20T21:38:32.645098Z", "url": "https://files.pythonhosted.org/packages/29/4a/4e12cfa29df11118848d64034ed6967adf63d0e08c974d85b9e199df013c/driveline-0.14.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b948ce5d4724a9f87e21506dd54f72b5", "sha256": "9d3124a0567e922f6ded9ad6b103e12e8a434d7665e06e5777d4525022dc669b"}, "downloads": -1, "filename": "driveline-0.14.0.tar.gz", "has_sig": false, "md5_digest": "b948ce5d4724a9f87e21506dd54f72b5", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 14387, "upload_time": "2019-02-20T21:38:34", "upload_time_iso_8601": "2019-02-20T21:38:34.771842Z", "url": "https://files.pythonhosted.org/packages/d1/a4/bfef861fd76ff3ffb14e1560aec53a4abda3d6071fbb785bb4446c8c0741/driveline-0.14.0.tar.gz", "yanked": false}], "0.14.1": [{"comment_text": "", "digests": {"md5": "4a511b0fa79e9d42e77d22626ce97d02", "sha256": "9da94b6b67147532b2dc015313aec4a759f90a734e95e0e1bcd38afffb21dc45"}, "downloads": -1, "filename": "driveline-0.14.1-py3-none-any.whl", "has_sig": false, "md5_digest": "4a511b0fa79e9d42e77d22626ce97d02", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 17282, "upload_time": "2019-03-08T20:00:31", "upload_time_iso_8601": "2019-03-08T20:00:31.574037Z", "url": "https://files.pythonhosted.org/packages/1a/10/02743ff8394b384c999d22e08558320452bb6477a2b998775920ade580b3/driveline-0.14.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d8efb567caac3b8b8c6a70e64854dcb4", "sha256": "dba906743f7971e7d00d90a1cfbe51edf9261a11b09286f63ed0d093b5164bdf"}, "downloads": -1, "filename": "driveline-0.14.1.tar.gz", "has_sig": false, "md5_digest": "d8efb567caac3b8b8c6a70e64854dcb4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 14427, "upload_time": "2019-03-08T20:00:32", "upload_time_iso_8601": "2019-03-08T20:00:32.827610Z", "url": "https://files.pythonhosted.org/packages/17/be/0b0a142707cc1479050267bb3bc74b03b28269fb83d3d44a07c81244dfee/driveline-0.14.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4a511b0fa79e9d42e77d22626ce97d02", "sha256": "9da94b6b67147532b2dc015313aec4a759f90a734e95e0e1bcd38afffb21dc45"}, "downloads": -1, "filename": "driveline-0.14.1-py3-none-any.whl", "has_sig": false, "md5_digest": "4a511b0fa79e9d42e77d22626ce97d02", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 17282, "upload_time": "2019-03-08T20:00:31", "upload_time_iso_8601": "2019-03-08T20:00:31.574037Z", "url": "https://files.pythonhosted.org/packages/1a/10/02743ff8394b384c999d22e08558320452bb6477a2b998775920ade580b3/driveline-0.14.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d8efb567caac3b8b8c6a70e64854dcb4", "sha256": "dba906743f7971e7d00d90a1cfbe51edf9261a11b09286f63ed0d093b5164bdf"}, "downloads": -1, "filename": "driveline-0.14.1.tar.gz", "has_sig": false, "md5_digest": "d8efb567caac3b8b8c6a70e64854dcb4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 14427, "upload_time": "2019-03-08T20:00:32", "upload_time_iso_8601": "2019-03-08T20:00:32.827610Z", "url": "https://files.pythonhosted.org/packages/17/be/0b0a142707cc1479050267bb3bc74b03b28269fb83d3d44a07c81244dfee/driveline-0.14.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:49:35 2020"}