{"info": {"author": "Lennart Regebro", "author_email": "regebro@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Operating System :: Unix", "Programming Language :: Python", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Topic :: Software Development :: Testing"], "description": "Spiny\n=====\n\nSpiny Norman is a Hedgehog.\n\nIt's also a package that will run your Python tests under multiple versions\nof Python.\n\n\"Hey hang on!\" I hear you say, \"There's already Tox!\" And you are right.\nSpiny is my attempt to look into the problem space tox covers to make\nsomething that is less complex, and fixes a couple of problems with Tox.\n\nMost notably, with Spiny, Python does not have to be on the path, it can\ninstall versions of Python other than the one your installed version of\nvirtualenv happens to support, and it does not always call setup.py.\nIt also will run the tests in parallel.\n\nMajor feature: For the common use case it needs no configuration.\n\nThere is no guarantee that Spiny's features will not end up in Tox.\n\n\nCommand line parameters\n-----------------------\n\nYou run Spiny from the root of the Python project that you want to test,\nie the direectory that has the ``setup.py`` file.\n\nThe command line parameters are:\n\n  usage: spiny [-h] [--version] [-c <filename>] [-e <environments>] [-v] [-q]\n               [<configvar> [<configvar> ...]]\n\n  Run tests under several Python versions.\n\n  positional arguments:\n    <configvar>           Override a config variable by \"section:variable=value\"\n                          Example: \"spiny:venv-dir=.venv\"\n\n  optional arguments:\n    -h, --help            Show this help message and exit.\n    --version             Show the version and exit.\n    -c <filename>, --config <filename>\n                          The config file to use. Defaults \"to spiny.cfg\".\n    -e <environments>, --envlist <environments>\n                          A list of environments to run, separated by commas.\n    -v, --verbose         Increases the output, -vv increases it even more.\n    -q, --quiet           Reduces output to only the run summary, -qq removes\n                          also that.\n\n\nVersion support\n---------------\n\nSpiny can be run under Python 2.6, 2.7, 3.3 and 3.4. It can also be run under\nPyPy, PyPy3 and Jython.\n\nIt can run tests under a much wider range of Python versions, this has been tested\nwith Python 2.4, 2.5, 3.1 and 3.2 in addition to the above Python versions.\n\nIronPython is supported in theory, but I can't get virtualenv working with\nIronPython. Other Python implementations are not tested. If one doesn't work,\nyou are welcome to raise an issue and I can look into it.\n\n\nConfiguration files\n-------------------\n\nSpiny does not typically need a configuration file. It will instead look at\nyour ``setup.py`` and find out what Python versions you module supports, and\nrun the tests with those versions.\n\nYou declare version support with classifiers, like this::\n\n  setup(\n      ...\n      classifiers=[\n          ...\n          \"Programming Language :: Python\",\n          \"Programming Language :: Python :: 2.6\",\n          \"Programming Language :: Python :: 2.7\",\n          \"Programming Language :: Python :: 3.3\",\n          \"Programming Language :: Python :: 3.4\",\n          \"Programming Language :: Python :: Implementation :: PyPy\",\n          ...\n          ],\n      ...\n  )\n\nWith these classifiers, Spiny will run the tests under Python 2.6, 2.7, 3.3,\n3.4 and also under PyPy.\n\nYou can configure Spiny explicitly on a configuration basis. You can add a\n``spiny.cfg`` located in the project root, or you can add the configuration\nto the projects ``setup.cfg``.\n\nYou can also have a personal configuration file in ``~/.config/spiny.cfg``\nwhose configuration options will be valid for all projects.\n\nUnder the ``[spiny]`` section the\nfollowing configuration options are supported:\n\n  * **environments**: A whitespace separated list of Python and Python versions.\n\n  * **venv-dir**: The name of the directory to install virtualenvs in.\n    Defaults to ``.venv``.\n\n  * **max-processes**: The maxiumum of concurrent processes to run tests with.\n    Defaults to the number of CPU's you have.\n\n  * **test-commands**: The commands used to run the tests. You can have\n    several lines of commands. Defaults to ``{envpython} setup.py test``. There\n    are a few variables that you can use in the commands that will be replaced:\n\n    * ``{envpython}`` will be replaced with the full path to the Python\n      executable in the virtualenv\n\n    * ``{basepython}`` will be replaced with the full path to the Python\n      executable the virtualenv is created from\n\n    * ``{envdir}`` will be replaced with the full path to the virtualenv\n      directory.\n\n    * ``{projectdir}`` will be replaced with the full path to the directory\n      of the Python project (ie, the current directory)\n\n  * **setup-commands**: The commands used to create the virtualenv. The default\n    for this varies, but it boils down to ``{envpython} -m virtualenv {envdir}``.\n\n  * **use-setup-py**: If requirements data from ``setup.py`` should be used to\n    gather requirements. This means ``setup.py`` needs to exist, and be\n    executable without side-effects. Defaults to ``true``.\n\n  * **use-requirements-txt**: If requirements data from ``requiremenets.txt``\n    should be used to gather requirements. Defaults to ``true``.\n\n  * **changedir**: A directory to change to before running the tests.\n    Variables from test-commands are usable.\n\n\nExample::\n\n  [spiny]\n  environments = python2.7\n                 python3.4\n                 pypy2.4\n\n  venv-dir = .venv\n\n  test-commands = {envpython} something.py magic\n                  {envpython} setup.py test\n\n  max-processes = 3\n\nThere is also a ``[pythons]`` section, which defines up the paths to the various\nexecutables, per environment::\n\n  [pythons]\n  python2.6 = /pythons/python26/bin/python\n  python2.7 = /pythons/python27/bin/python\n  python3.3 = /pythons/python33/bin/python3\n  python3.4 = /pythons/python34/bin/python3\n\nIf you don't configure this, the executables that are on the PATH will be used.\n\nThis doesn't make much sense to have in the projects ``spiny.cfg``,\nas each person who runs the tests are likely to have differing Python installs.\nHowever, this does make a lot of sense to have in the personal configuration file.\n\nYou can add the ``[pythons]`` section in your projects ``spiny.cfg``, but the\nusecase for that is very limited. Possibly if you are using custom Pythons in\nyour project.\n\n``max-processes`` also is reasonable in your personal file, if you for\nexample have very long-running tests, and you want to keep a CPU free, for\nexample for browing the web while the tests run. It also makes sense in a\nproject file if your tests use a lot of memory, to avoid running out of\nmemory.\n\n``environments`` and ``test-commands`` only make sense per configuration and\nnot in the personal file. However, no checks for this are done, so you can\nadd them there if you want to, but the results are unlikely to be practical.\n\n\nTodo\n----\n\nThings that needs doing:\n\n  * Make the tests run under itself.\n\n  * Figure out how to run coverage on things run by subprocesses.\n\n  * Add commands per environment, enabling things like a pep8 environment\n    that checks for pep8 compliance, etc.\n\n  * Windows support. Maybe.\n\n\nCHANGES\n=======\n\n0.6 (2017-04-12)\n----------------\n\n- Using /dev/null as stdin means the tests doesn't hang, but errors out.\n\n- No redirection of test output (or input) when only using one process.\n\n- It's not a library, so supporting Python 2 isn't needed.\n\n\n0.5 (2016-02-26)\n----------------\n\n- CTRL-C will now kill the program.\n\n- Renamed {envpath} to {envdir}, {python} to {envpython} and {project_dir} to\n  {projectdir}. Also added {basepython} to the Python version used to install\n  the virtual env.\n\n- Various changes to make custom commands more stable and flexible.\n\n- Added a changedir option to the config.\n\n- You can now run tests for Pythons that does not support any version\n  of virtualenv, such as Python 2.3 and earlier.\n\n- Gives a nice error message and exits with -1 if it doesn't know what\n  versions to use.\n\n- Dropped support for running Spiny with Python 2.6.\n\n- If using a system Python 3 the virtualenv will no longer install system\n  Python 2.\n\n- Spiny now supports having different requirements in setup.py for different\n  versions of Python.\n\n- Not finding an executable for a specific environment is no longer a fatal\n  error, so you don't have to have all the supported versions installed.\n\n\n0.4 (2014-11-01)\n----------------\n\n- Added support for requirements.txt.\n\n- Added parameters to skip executing setup.py.\n\n- Added a setup-commands parameter to override how the virtualenv is made.\n\n- The -e parameter now actually works.\n\n- The information about the python execs is now cached. This speeds up\n  startup, a lot, fetching the Python environments goes from around 5\n  seconds to less than a tenth.\n\n- A profile of each virtualenv is now saved in the virtualenv, containing\n  it's name, the full path of the Python exe, and the installed requirements.\n  A virtualenv will now only be updated if this has changed since the last run.\n  This also speeds up tests runs a lot in the typical case.\n\n\n0.3 (2014-10-30)\n----------------\n\n- Now runs under Python 3, PyPy, PyPy3, Jython.\n\n- All output is now through logging, which enables you to select verbosity.\n\n- Added --version, --verbose and --quiet options.\n\n- Now use subprocess32 under Python 2.\n\n- Will now run tests in parallell with multiprocessing. A 'max-processes'\n  option in the [spiny] section will allow you to cap the processes if\n  you don't want to max your computer. Otherwise it will use as many processes\n  as multiprocessing will report cpu's.\n\n\n0.2 (2014-10-27)\n----------------\n\n- Now prints a summary in the end.\n\n- Regard more virtualenv tests as failures.\n\n- Return 1 if not all tests succeeded.\n\n- Fall back to setup.cfg is there is no spiny config file.\n\n- Renamed spiny.conf to spiny.cfg for consistency.\n\n- Made the configuration file optional.\n\n- Spiny will now grep setup.py for Python version classifiers if no\n  environment configuration is found.\n\n- If both Python X and Python X.Y is given as environments, it will\n  skip the tests for Python X, seeing as it is fulfilled by Python X.Y.\n\n- The version specified in the [pythons] section now have preference.\n\n- Setting a config option from the command line now works even if the section\n  doesn't exist.\n\n- Spiny will now attempt to extract the test requirements and install them\n  into the virtualenv before running the tests, to avoid polluting the\n  project directory with .egg directories.\n\n\n0.1.1 (2014-10-18)\n------------------\n\n- Initial release", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/regebro/spiny/", "keywords": "development,tools,testing", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "spiny", "package_url": "https://pypi.org/project/spiny/", "platform": "", "project_url": "https://pypi.org/project/spiny/", "project_urls": {"Homepage": "https://github.com/regebro/spiny/"}, "release_url": "https://pypi.org/project/spiny/0.6/", "requires_dist": null, "requires_python": "", "summary": "Spiny will run your Python tests under multiple versions of Python", "version": "0.6", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"spiny\">\n<h2>Spiny</h2>\n<p>Spiny Norman is a Hedgehog.</p>\n<p>It\u2019s also a package that will run your Python tests under multiple versions\nof Python.</p>\n<p>\u201cHey hang on!\u201d I hear you say, \u201cThere\u2019s already Tox!\u201d And you are right.\nSpiny is my attempt to look into the problem space tox covers to make\nsomething that is less complex, and fixes a couple of problems with Tox.</p>\n<p>Most notably, with Spiny, Python does not have to be on the path, it can\ninstall versions of Python other than the one your installed version of\nvirtualenv happens to support, and it does not always call setup.py.\nIt also will run the tests in parallel.</p>\n<p>Major feature: For the common use case it needs no configuration.</p>\n<p>There is no guarantee that Spiny\u2019s features will not end up in Tox.</p>\n<div id=\"command-line-parameters\">\n<h3>Command line parameters</h3>\n<p>You run Spiny from the root of the Python project that you want to test,\nie the direectory that has the <tt>setup.py</tt> file.</p>\n<p>The command line parameters are:</p>\n<blockquote>\n<dl>\n<dt>usage: spiny [-h] [\u2013version] [-c &lt;filename&gt;] [-e &lt;environments&gt;] [-v] [-q]</dt>\n<dd>[&lt;configvar&gt; [&lt;configvar&gt; \u2026]]</dd>\n</dl>\n<p>Run tests under several Python versions.</p>\n<dl>\n<dt>positional arguments:</dt>\n<dd><dl>\n<dt>&lt;configvar&gt;           Override a config variable by \u201csection:variable=value\u201d</dt>\n<dd>Example: \u201cspiny:venv-dir=.venv\u201d</dd>\n</dl>\n</dd>\n<dt>optional arguments:</dt>\n<dd><table>\n<col>\n<col>\n<tbody>\n<tr><td>\n<kbd><span class=\"option\">-h</span>, <span class=\"option\">--help</span></kbd></td>\n<td>Show this help message and exit.</td></tr>\n<tr><td>\n<kbd><span class=\"option\">--version</span></kbd></td>\n<td>Show the version and exit.</td></tr>\n<tr><td>\n<kbd><span class=\"option\">-c <var>&lt;filename&gt;</var></span>, <span class=\"option\">--config <var>&lt;filename&gt;</var></span></kbd></td>\n</tr>\n<tr><td>\u00a0</td><td>The config file to use. Defaults \u201cto spiny.cfg\u201d.</td></tr>\n<tr><td>\n<kbd><span class=\"option\">-e <var>&lt;environments&gt;</var></span>, <span class=\"option\">--envlist <var>&lt;environments&gt;</var></span></kbd></td>\n</tr>\n<tr><td>\u00a0</td><td>A list of environments to run, separated by commas.</td></tr>\n<tr><td>\n<kbd><span class=\"option\">-v</span>, <span class=\"option\">--verbose</span></kbd></td>\n<td>Increases the output, -vv increases it even more.</td></tr>\n<tr><td>\n<kbd><span class=\"option\">-q</span>, <span class=\"option\">--quiet</span></kbd></td>\n<td>Reduces output to only the run summary, -qq removes\nalso that.</td></tr>\n</tbody>\n</table>\n</dd>\n</dl>\n</blockquote>\n</div>\n<div id=\"version-support\">\n<h3>Version support</h3>\n<p>Spiny can be run under Python 2.6, 2.7, 3.3 and 3.4. It can also be run under\nPyPy, PyPy3 and Jython.</p>\n<p>It can run tests under a much wider range of Python versions, this has been tested\nwith Python 2.4, 2.5, 3.1 and 3.2 in addition to the above Python versions.</p>\n<p>IronPython is supported in theory, but I can\u2019t get virtualenv working with\nIronPython. Other Python implementations are not tested. If one doesn\u2019t work,\nyou are welcome to raise an issue and I can look into it.</p>\n</div>\n<div id=\"configuration-files\">\n<h3>Configuration files</h3>\n<p>Spiny does not typically need a configuration file. It will instead look at\nyour <tt>setup.py</tt> and find out what Python versions you module supports, and\nrun the tests with those versions.</p>\n<p>You declare version support with classifiers, like this:</p>\n<pre>setup(\n    ...\n    classifiers=[\n        ...\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 2.6\",\n        \"Programming Language :: Python :: 2.7\",\n        \"Programming Language :: Python :: 3.3\",\n        \"Programming Language :: Python :: 3.4\",\n        \"Programming Language :: Python :: Implementation :: PyPy\",\n        ...\n        ],\n    ...\n)\n</pre>\n<p>With these classifiers, Spiny will run the tests under Python 2.6, 2.7, 3.3,\n3.4 and also under PyPy.</p>\n<p>You can configure Spiny explicitly on a configuration basis. You can add a\n<tt>spiny.cfg</tt> located in the project root, or you can add the configuration\nto the projects <tt>setup.cfg</tt>.</p>\n<p>You can also have a personal configuration file in <tt><span class=\"pre\">~/.config/spiny.cfg</span></tt>\nwhose configuration options will be valid for all projects.</p>\n<p>Under the <tt>[spiny]</tt> section the\nfollowing configuration options are supported:</p>\n<blockquote>\n<ul>\n<li><strong>environments</strong>: A whitespace separated list of Python and Python versions.</li>\n<li><strong>venv-dir</strong>: The name of the directory to install virtualenvs in.\nDefaults to <tt>.venv</tt>.</li>\n<li><strong>max-processes</strong>: The maxiumum of concurrent processes to run tests with.\nDefaults to the number of CPU\u2019s you have.</li>\n<li><strong>test-commands</strong>: The commands used to run the tests. You can have\nseveral lines of commands. Defaults to <tt>{envpython} setup.py test</tt>. There\nare a few variables that you can use in the commands that will be replaced:<ul>\n<li><tt>{envpython}</tt> will be replaced with the full path to the Python\nexecutable in the virtualenv</li>\n<li><tt>{basepython}</tt> will be replaced with the full path to the Python\nexecutable the virtualenv is created from</li>\n<li><tt>{envdir}</tt> will be replaced with the full path to the virtualenv\ndirectory.</li>\n<li><tt>{projectdir}</tt> will be replaced with the full path to the directory\nof the Python project (ie, the current directory)</li>\n</ul>\n</li>\n<li><strong>setup-commands</strong>: The commands used to create the virtualenv. The default\nfor this varies, but it boils down to <tt>{envpython} <span class=\"pre\">-m</span> virtualenv {envdir}</tt>.</li>\n<li><strong>use-setup-py</strong>: If requirements data from <tt>setup.py</tt> should be used to\ngather requirements. This means <tt>setup.py</tt> needs to exist, and be\nexecutable without side-effects. Defaults to <tt>true</tt>.</li>\n<li><strong>use-requirements-txt</strong>: If requirements data from <tt>requiremenets.txt</tt>\nshould be used to gather requirements. Defaults to <tt>true</tt>.</li>\n<li><strong>changedir</strong>: A directory to change to before running the tests.\nVariables from test-commands are usable.</li>\n</ul>\n</blockquote>\n<p>Example:</p>\n<pre>[spiny]\nenvironments = python2.7\n               python3.4\n               pypy2.4\n\nvenv-dir = .venv\n\ntest-commands = {envpython} something.py magic\n                {envpython} setup.py test\n\nmax-processes = 3\n</pre>\n<p>There is also a <tt>[pythons]</tt> section, which defines up the paths to the various\nexecutables, per environment:</p>\n<pre>[pythons]\npython2.6 = /pythons/python26/bin/python\npython2.7 = /pythons/python27/bin/python\npython3.3 = /pythons/python33/bin/python3\npython3.4 = /pythons/python34/bin/python3\n</pre>\n<p>If you don\u2019t configure this, the executables that are on the PATH will be used.</p>\n<p>This doesn\u2019t make much sense to have in the projects <tt>spiny.cfg</tt>,\nas each person who runs the tests are likely to have differing Python installs.\nHowever, this does make a lot of sense to have in the personal configuration file.</p>\n<p>You can add the <tt>[pythons]</tt> section in your projects <tt>spiny.cfg</tt>, but the\nusecase for that is very limited. Possibly if you are using custom Pythons in\nyour project.</p>\n<p><tt><span class=\"pre\">max-processes</span></tt> also is reasonable in your personal file, if you for\nexample have very long-running tests, and you want to keep a CPU free, for\nexample for browing the web while the tests run. It also makes sense in a\nproject file if your tests use a lot of memory, to avoid running out of\nmemory.</p>\n<p><tt>environments</tt> and <tt><span class=\"pre\">test-commands</span></tt> only make sense per configuration and\nnot in the personal file. However, no checks for this are done, so you can\nadd them there if you want to, but the results are unlikely to be practical.</p>\n</div>\n<div id=\"todo\">\n<h3>Todo</h3>\n<p>Things that needs doing:</p>\n<blockquote>\n<ul>\n<li>Make the tests run under itself.</li>\n<li>Figure out how to run coverage on things run by subprocesses.</li>\n<li>Add commands per environment, enabling things like a pep8 environment\nthat checks for pep8 compliance, etc.</li>\n<li>Windows support. Maybe.</li>\n</ul>\n</blockquote>\n</div>\n</div>\n<div id=\"changes\">\n<h2>CHANGES</h2>\n<div id=\"id1\">\n<h3>0.6 (2017-04-12)</h3>\n<ul>\n<li>Using /dev/null as stdin means the tests doesn\u2019t hang, but errors out.</li>\n<li>No redirection of test output (or input) when only using one process.</li>\n<li>It\u2019s not a library, so supporting Python 2 isn\u2019t needed.</li>\n</ul>\n</div>\n<div id=\"id2\">\n<h3>0.5 (2016-02-26)</h3>\n<ul>\n<li>CTRL-C will now kill the program.</li>\n<li>Renamed {envpath} to {envdir}, {python} to {envpython} and {project_dir} to\n{projectdir}. Also added {basepython} to the Python version used to install\nthe virtual env.</li>\n<li>Various changes to make custom commands more stable and flexible.</li>\n<li>Added a changedir option to the config.</li>\n<li>You can now run tests for Pythons that does not support any version\nof virtualenv, such as Python 2.3 and earlier.</li>\n<li>Gives a nice error message and exits with -1 if it doesn\u2019t know what\nversions to use.</li>\n<li>Dropped support for running Spiny with Python 2.6.</li>\n<li>If using a system Python 3 the virtualenv will no longer install system\nPython 2.</li>\n<li>Spiny now supports having different requirements in setup.py for different\nversions of Python.</li>\n<li>Not finding an executable for a specific environment is no longer a fatal\nerror, so you don\u2019t have to have all the supported versions installed.</li>\n</ul>\n</div>\n<div id=\"id3\">\n<h3>0.4 (2014-11-01)</h3>\n<ul>\n<li>Added support for requirements.txt.</li>\n<li>Added parameters to skip executing setup.py.</li>\n<li>Added a setup-commands parameter to override how the virtualenv is made.</li>\n<li>The -e parameter now actually works.</li>\n<li>The information about the python execs is now cached. This speeds up\nstartup, a lot, fetching the Python environments goes from around 5\nseconds to less than a tenth.</li>\n<li>A profile of each virtualenv is now saved in the virtualenv, containing\nit\u2019s name, the full path of the Python exe, and the installed requirements.\nA virtualenv will now only be updated if this has changed since the last run.\nThis also speeds up tests runs a lot in the typical case.</li>\n</ul>\n</div>\n<div id=\"id4\">\n<h3>0.3 (2014-10-30)</h3>\n<ul>\n<li>Now runs under Python 3, PyPy, PyPy3, Jython.</li>\n<li>All output is now through logging, which enables you to select verbosity.</li>\n<li>Added \u2013version, \u2013verbose and \u2013quiet options.</li>\n<li>Now use subprocess32 under Python 2.</li>\n<li>Will now run tests in parallell with multiprocessing. A \u2018max-processes\u2019\noption in the [spiny] section will allow you to cap the processes if\nyou don\u2019t want to max your computer. Otherwise it will use as many processes\nas multiprocessing will report cpu\u2019s.</li>\n</ul>\n</div>\n<div id=\"id5\">\n<h3>0.2 (2014-10-27)</h3>\n<ul>\n<li>Now prints a summary in the end.</li>\n<li>Regard more virtualenv tests as failures.</li>\n<li>Return 1 if not all tests succeeded.</li>\n<li>Fall back to setup.cfg is there is no spiny config file.</li>\n<li>Renamed spiny.conf to spiny.cfg for consistency.</li>\n<li>Made the configuration file optional.</li>\n<li>Spiny will now grep setup.py for Python version classifiers if no\nenvironment configuration is found.</li>\n<li>If both Python X and Python X.Y is given as environments, it will\nskip the tests for Python X, seeing as it is fulfilled by Python X.Y.</li>\n<li>The version specified in the [pythons] section now have preference.</li>\n<li>Setting a config option from the command line now works even if the section\ndoesn\u2019t exist.</li>\n<li>Spiny will now attempt to extract the test requirements and install them\ninto the virtualenv before running the tests, to avoid polluting the\nproject directory with .egg directories.</li>\n</ul>\n</div>\n<div id=\"id6\">\n<h3>0.1.1 (2014-10-18)</h3>\n<ul>\n<li>Initial release</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 2799975, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "b55764f13ed5b00d8bf5a6bfa599f6bc", "sha256": "b77ee4b424e8ebb4d6f4f7244130297a5f0785b3623bd190e64336662436cf16"}, "downloads": -1, "filename": "spiny-0.1.zip", "has_sig": false, "md5_digest": "b55764f13ed5b00d8bf5a6bfa599f6bc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11929, "upload_time": "2014-10-18T08:47:41", "upload_time_iso_8601": "2014-10-18T08:47:41.532899Z", "url": "https://files.pythonhosted.org/packages/21/17/bcb0379b358966d8dd70b0bac875a52023bddf297decec6d9fe06cd283f6/spiny-0.1.zip", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "86a5c97cdcdbcd314a9d69854eb655c6", "sha256": "258927750c8d68c9907c17522b744da537ed93237b73a7b50c48542b8026a020"}, "downloads": -1, "filename": "spiny-0.1.1.zip", "has_sig": false, "md5_digest": "86a5c97cdcdbcd314a9d69854eb655c6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14290, "upload_time": "2014-10-18T10:01:18", "upload_time_iso_8601": "2014-10-18T10:01:18.175659Z", "url": "https://files.pythonhosted.org/packages/8e/e1/4c069ccd603689c0b66e2d96e8455a4daac22cf828fb7af84f2a247545d8/spiny-0.1.1.zip", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "5b34e1ff1d2b31558dfe1e7dc3f0ed41", "sha256": "8e418d52ff4374e510b5dd77cefd5687603d29e1e848a3411b487b8f81d6930b"}, "downloads": -1, "filename": "spiny-0.2.zip", "has_sig": false, "md5_digest": "5b34e1ff1d2b31558dfe1e7dc3f0ed41", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17715, "upload_time": "2014-10-27T21:09:45", "upload_time_iso_8601": "2014-10-27T21:09:45.009011Z", "url": "https://files.pythonhosted.org/packages/53/be/f1fc7b9cbe337629f50a02529797db22cdf63bfb2f5d9dd4254fdc870add/spiny-0.2.zip", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "2c235e6e88646cdfbf2c20e4d884adf9", "sha256": "7b5980b407c2add0e9add1994a72a0462e470c92e8de33658d88bdc48ed7f28a"}, "downloads": -1, "filename": "spiny-0.3.zip", "has_sig": false, "md5_digest": "2c235e6e88646cdfbf2c20e4d884adf9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24144, "upload_time": "2014-10-30T13:05:41", "upload_time_iso_8601": "2014-10-30T13:05:41.407255Z", "url": "https://files.pythonhosted.org/packages/08/70/dfd7e4d7f6bef992969abffbcf5bc7c7a0bf8d6d1ed66e350bac4d75066b/spiny-0.3.zip", "yanked": false}], "0.4": [{"comment_text": "", "digests": {"md5": "48971dc5a00cb7c76943a146d134bde9", "sha256": "5d712ec3f66c0e83fb3260361b2b4ed78ca537826ed80d460c738e9e173afe7e"}, "downloads": -1, "filename": "spiny-0.4.zip", "has_sig": false, "md5_digest": "48971dc5a00cb7c76943a146d134bde9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 26394, "upload_time": "2014-11-01T20:42:54", "upload_time_iso_8601": "2014-11-01T20:42:54.795994Z", "url": "https://files.pythonhosted.org/packages/2b/b2/21872ec27ac89e20cbd91ae52166e72738f2f8039c8d6185504a77df67ee/spiny-0.4.zip", "yanked": false}], "0.5": [{"comment_text": "", "digests": {"md5": "94149e10e12e0b36684dc0dbc45a7005", "sha256": "17af0afe94a822fb2c31ebb01e311c9abcc0e99859dfde89f7c7a1a05803d99e"}, "downloads": -1, "filename": "spiny-0.5.zip", "has_sig": false, "md5_digest": "94149e10e12e0b36684dc0dbc45a7005", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28648, "upload_time": "2016-02-27T02:08:35", "upload_time_iso_8601": "2016-02-27T02:08:35.243407Z", "url": "https://files.pythonhosted.org/packages/40/c7/3446dd93bb2ce7976527def0501111af07e332b30406fc2808749476a33b/spiny-0.5.zip", "yanked": false}], "0.6": [{"comment_text": "", "digests": {"md5": "52e63c5804e6477afa7e5d00baae7b73", "sha256": "0f76aac20432fb4b11a7dbbf9020ea795fb172e24132c5ade4a4eb6292408148"}, "downloads": -1, "filename": "spiny-0.6.tar.gz", "has_sig": false, "md5_digest": "52e63c5804e6477afa7e5d00baae7b73", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16396, "upload_time": "2017-04-12T19:59:16", "upload_time_iso_8601": "2017-04-12T19:59:16.668699Z", "url": "https://files.pythonhosted.org/packages/ad/1f/228bdd24ba9b750b82e0fe225623daab41e1b70c659798554caeebc05f7d/spiny-0.6.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "52e63c5804e6477afa7e5d00baae7b73", "sha256": "0f76aac20432fb4b11a7dbbf9020ea795fb172e24132c5ade4a4eb6292408148"}, "downloads": -1, "filename": "spiny-0.6.tar.gz", "has_sig": false, "md5_digest": "52e63c5804e6477afa7e5d00baae7b73", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16396, "upload_time": "2017-04-12T19:59:16", "upload_time_iso_8601": "2017-04-12T19:59:16.668699Z", "url": "https://files.pythonhosted.org/packages/ad/1f/228bdd24ba9b750b82e0fe225623daab41e1b70c659798554caeebc05f7d/spiny-0.6.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:04:47 2020"}