{"info": {"author": "Daniel Ciumberic\u0103", "author_email": "ciumbi.ionut@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Topic :: Software Development", "Topic :: Utilities"], "description": "# vin-parser\nLibrary that provides functions to work with VIN strings.\n\n## Install\nvin-parser is available on PyPI and can be installed using pip.\n\n`$ pip install vin-parser`\n\n## Usage\nAll the public functions are exported to the package namespace. We'll alias it as vp in the following examples.\n\n`>>> import vin_parser as vp`\n<!--\nExample usage with some fakey VINS.\nShow wmi, vds for lowercase VINS\n-->\n\nThe functions `check_no`, `seq_no`, `wmi`, `vds` and `vis` return parts of the VIN string.\n```python3\n>>> vin = \"1GYFK63878R248711\"\n>>> vp.check_no(vin)\n'7'\n```\nFunction `check_no` returns the VIN check digit, i.e. position 9 in the VIN string. It returns for all VINs, even for those that don't use the check digit schema.\n\n```python3\n>>> vp.wmi(vin)\n'1GY'\n>>> vp.vds(vin)\n'FK6387'\n```\nLowercase VINs are accepted:\n```python3\n>>> vp.vis(vin.lower())\n'8R248711'\n```\n\n`check_valid`, `is_valid` and `small_manuf` are predicate functions, i.e. functions that return True or False.\n`check_valid` returns True if the VIN's check digit matches the computed value.\n`is_valid` returns True if the provided VIN is valid. Because the use of VIN check digit is not adopted worldwide, the check_valid test is not performed when verifing the validity of a VIN.\n\nFunctions `continent`, `country`, `year` and `manuf` parse the VIN and return the values. year returns a positive integer, while the others return a string with their name.\n```python3\n>>> vp.country(vin)\n'United States'\n>>> vp.year(vin)\n2008\n>>> vp.manuf(vin)\n'General Motors USA'\n```\n\nFunction `parse` calls all the other functions and returns the results in a dict if the provided VIN is valid.\nFunction `online_parse` queries the nhtsa api with the provided VIN. Empty values are removed from the response and the rest are returned in a python dict. No other transformations are performed on the keys or values.\nNote that, unlike `parse`, `online_parse` doesn't check if the VIN is valid before sending it to the remote server.\n\nThe `CHARS` constant is a sorted string with all the valid characters of a VIN: A to Z, 1 to 9 and 0, except for I, O and Q.\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/nighcoder/vin-parser", "keywords": "VIN,WMI,VDS,OBD", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "vin-parser", "package_url": "https://pypi.org/project/vin-parser/", "platform": "", "project_url": "https://pypi.org/project/vin-parser/", "project_urls": {"Homepage": "https://github.com/nighcoder/vin-parser"}, "release_url": "https://pypi.org/project/vin-parser/0.0.1/", "requires_dist": ["requests (==2.22.0)"], "requires_python": "", "summary": "This is vin-parser package description", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>vin-parser</h1>\n<p>Library that provides functions to work with VIN strings.</p>\n<h2>Install</h2>\n<p>vin-parser is available on PyPI and can be installed using pip.</p>\n<p><code>$ pip install vin-parser</code></p>\n<h2>Usage</h2>\n<p>All the public functions are exported to the package namespace. We'll alias it as vp in the following examples.</p>\n<p><code>&gt;&gt;&gt; import vin_parser as vp</code></p>\n\n<p>The functions <code>check_no</code>, <code>seq_no</code>, <code>wmi</code>, <code>vds</code> and <code>vis</code> return parts of the VIN string.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">vin</span> <span class=\"o\">=</span> <span class=\"s2\">\"1GYFK63878R248711\"</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">vp</span><span class=\"o\">.</span><span class=\"n\">check_no</span><span class=\"p\">(</span><span class=\"n\">vin</span><span class=\"p\">)</span>\n<span class=\"s1\">'7'</span>\n</pre>\n<p>Function <code>check_no</code> returns the VIN check digit, i.e. position 9 in the VIN string. It returns for all VINs, even for those that don't use the check digit schema.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">vp</span><span class=\"o\">.</span><span class=\"n\">wmi</span><span class=\"p\">(</span><span class=\"n\">vin</span><span class=\"p\">)</span>\n<span class=\"s1\">'1GY'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">vp</span><span class=\"o\">.</span><span class=\"n\">vds</span><span class=\"p\">(</span><span class=\"n\">vin</span><span class=\"p\">)</span>\n<span class=\"s1\">'FK6387'</span>\n</pre>\n<p>Lowercase VINs are accepted:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">vp</span><span class=\"o\">.</span><span class=\"n\">vis</span><span class=\"p\">(</span><span class=\"n\">vin</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">())</span>\n<span class=\"s1\">'8R248711'</span>\n</pre>\n<p><code>check_valid</code>, <code>is_valid</code> and <code>small_manuf</code> are predicate functions, i.e. functions that return True or False.\n<code>check_valid</code> returns True if the VIN's check digit matches the computed value.\n<code>is_valid</code> returns True if the provided VIN is valid. Because the use of VIN check digit is not adopted worldwide, the check_valid test is not performed when verifing the validity of a VIN.</p>\n<p>Functions <code>continent</code>, <code>country</code>, <code>year</code> and <code>manuf</code> parse the VIN and return the values. year returns a positive integer, while the others return a string with their name.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">vp</span><span class=\"o\">.</span><span class=\"n\">country</span><span class=\"p\">(</span><span class=\"n\">vin</span><span class=\"p\">)</span>\n<span class=\"s1\">'United States'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">vp</span><span class=\"o\">.</span><span class=\"n\">year</span><span class=\"p\">(</span><span class=\"n\">vin</span><span class=\"p\">)</span>\n<span class=\"mi\">2008</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">vp</span><span class=\"o\">.</span><span class=\"n\">manuf</span><span class=\"p\">(</span><span class=\"n\">vin</span><span class=\"p\">)</span>\n<span class=\"s1\">'General Motors USA'</span>\n</pre>\n<p>Function <code>parse</code> calls all the other functions and returns the results in a dict if the provided VIN is valid.\nFunction <code>online_parse</code> queries the nhtsa api with the provided VIN. Empty values are removed from the response and the rest are returned in a python dict. No other transformations are performed on the keys or values.\nNote that, unlike <code>parse</code>, <code>online_parse</code> doesn't check if the VIN is valid before sending it to the remote server.</p>\n<p>The <code>CHARS</code> constant is a sorted string with all the valid characters of a VIN: A to Z, 1 to 9 and 0, except for I, O and Q.</p>\n\n          </div>"}, "last_serial": 6265252, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "486f0bd1cf863618727cac0f0fe558ac", "sha256": "ce45ce0de447e5a1edb3400766dfde0816513ddca08e48c41b305e2669cc88d1"}, "downloads": -1, "filename": "vin_parser-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "486f0bd1cf863618727cac0f0fe558ac", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 11409, "upload_time": "2019-12-09T08:16:32", "upload_time_iso_8601": "2019-12-09T08:16:32.850165Z", "url": "https://files.pythonhosted.org/packages/e5/40/b15e3efe13279a6cc4607ed31f7564e7b094313f464769a2619c18aa80e3/vin_parser-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8b6ee3aaba25d23666c78e557a22d750", "sha256": "a6a2f783d1db8328abc22e71c75462f74a86c30fb0df41478ce5bb79149c1938"}, "downloads": -1, "filename": "vin-parser-0.0.1.tar.gz", "has_sig": false, "md5_digest": "8b6ee3aaba25d23666c78e557a22d750", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10954, "upload_time": "2019-12-09T08:16:35", "upload_time_iso_8601": "2019-12-09T08:16:35.286032Z", "url": "https://files.pythonhosted.org/packages/79/ac/10f1ecddcff819f8f2d8260d4b18243aa09eb30e2f3e63a474ae894ba85d/vin-parser-0.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "486f0bd1cf863618727cac0f0fe558ac", "sha256": "ce45ce0de447e5a1edb3400766dfde0816513ddca08e48c41b305e2669cc88d1"}, "downloads": -1, "filename": "vin_parser-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "486f0bd1cf863618727cac0f0fe558ac", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 11409, "upload_time": "2019-12-09T08:16:32", "upload_time_iso_8601": "2019-12-09T08:16:32.850165Z", "url": "https://files.pythonhosted.org/packages/e5/40/b15e3efe13279a6cc4607ed31f7564e7b094313f464769a2619c18aa80e3/vin_parser-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8b6ee3aaba25d23666c78e557a22d750", "sha256": "a6a2f783d1db8328abc22e71c75462f74a86c30fb0df41478ce5bb79149c1938"}, "downloads": -1, "filename": "vin-parser-0.0.1.tar.gz", "has_sig": false, "md5_digest": "8b6ee3aaba25d23666c78e557a22d750", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10954, "upload_time": "2019-12-09T08:16:35", "upload_time_iso_8601": "2019-12-09T08:16:35.286032Z", "url": "https://files.pythonhosted.org/packages/79/ac/10f1ecddcff819f8f2d8260d4b18243aa09eb30e2f3e63a474ae894ba85d/vin-parser-0.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:35:52 2020"}