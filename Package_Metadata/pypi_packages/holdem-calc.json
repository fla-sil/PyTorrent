{"info": {"author": "Enermis", "author_email": "roeland.matthijssens@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "Holdem Calculator\n=================\n\nThe Holdem Calculator library calculates the probability that a certain Texas Hold'em hand will win. This probability is approximated by running a Monte Carlo method or calculated exactly by simulating the set of all possible hands. The Holdem Calculator also shows how likely each set of hole cards is to make a certain poker hand. The default Monte Carlo simulations are generally accurate to the nearest percent. Accuracy can be improved by increasing the number of simulations that are run, but this will result in a longer running time.\n\nCommand Line Options\n--------------------\n\n\t-h, --help            show this help message and exit\n\t-b [card [card ...]], --board [card [card ...]]\n\t                      Add board cards\n\t-e, --exact           Find exact odds by enumerating every possible board\n\t-n N                  Run N Monte Carlo simulations\n\t-i INPUT, --input INPUT\n\t                      Read hole cards and boards from an input file.\n\t                      Commandline arguments for hole cards and board will be\n\t                      ignored\n\nUsage\n-----\nI've listed a few examples showing how to use the Holdem Calculator. Note that you can mix and match command line options to suit your needs. See the bottom example in this section to see how to use the multiprocess Holdem Calculator for faster computations.\n\n### Default use case:\n\n\t$ python holdem_calc.py Ad Kd Qc Qs\n\tWinning Percentages:\n\t(Ad, Kd) :  0.46148\n\t(Qc, Qs) :  0.53427\n\tTies:  0.00425\n\n\tPlayer1 Histogram:\n\tHigh Card :  0.17318\n\tPair :  0.42858\n\tTwo Pair :  0.23224\n\tThree of a Kind :  0.04573\n\tStraight :  0.02197\n\tFlush :  0.07181\n\tFull House :  0.02427\n\tFour of a Kind :  0.0014\n\tStraight Flush :  2e-05\n\tRoyal Flush :  0.0008\n\n\tPlayer2 Histogram:\n\tHigh Card :  0.0\n\tPair :  0.34864\n\tTwo Pair :  0.39275\n\tThree of a Kind :  0.12333\n\tStraight :  0.01545\n\tFlush :  0.02333\n\tFull House :  0.08706\n\tFour of a Kind :  0.00931\n\tStraight Flush :  9e-05\n\tRoyal Flush :  4e-05\n\n\n\tTime elapsed(seconds):  1.56669712067\n\n### Multiplayer use case:\n\n\t$ python holdem_calc.py As Ks Td Jd 4h 4c\n\tWinning Percentages:\n\t(As, Ks) :  0.38166\n\t(Td, Jd) :  0.33029\n\t(4h, 4c) :  0.2853\n\tTies:  0.00275\n\n\tPlayer1 Histogram:\n\tHigh Card :  0.16582\n\tPair :  0.4193\n\tTwo Pair :  0.2321\n\tThree of a Kind :  0.04763\n\tStraight :  0.02355\n\tFlush :  0.08369\n\tFull House :  0.02572\n\tFour of a Kind :  0.00146\n\tStraight Flush :  1e-05\n\tRoyal Flush :  0.00072\n\n\tPlayer2 Histogram:\n\tHigh Card :  0.13874\n\tPair :  0.38832\n\tTwo Pair :  0.22959\n\tThree of a Kind :  0.04561\n\tStraight :  0.0889\n\tFlush :  0.07811\n\tFull House :  0.02649\n\tFour of a Kind :  0.00162\n\tStraight Flush :  0.00195\n\tRoyal Flush :  0.00067\n\n\tPlayer3 Histogram:\n\tHigh Card :  0.0\n\tPair :  0.34242\n\tTwo Pair :  0.38102\n\tThree of a Kind :  0.12639\n\tStraight :  0.02482\n\tFlush :  0.02576\n\tFull House :  0.08957\n\tFour of a Kind :  0.00981\n\tStraight Flush :  0.00021\n\tRoyal Flush :  0.0\n\n\n\tTime elapsed(seconds):  2.0515730381\n\n### Exact calculation:\n\n\t$ python holdem_calc.py As Ac 7d 8d --exact\n\tWinning Percentages:\n\t(As, Ac) :  0.768322681019\n\t(7d, 8d) :  0.228739756492\n\tTies:  0.0029375624889\n\n\tPlayer1 Histogram:\n\tHigh Card :  0.0\n\tPair :  0.354008400378\n\tTwo Pair :  0.391353404536\n\tThree of a Kind :  0.122024476962\n\tStraight :  0.0131553742793\n\tFlush :  0.0226425915024\n\tFull House :  0.0875755706931\n\tFour of a Kind :  0.00912221194367\n\tStraight Flush :  6.5408946075e-05\n\tRoyal Flush :  5.25607602388e-05\n\n\tPlayer2 Histogram:\n\tHigh Card :  0.14545489586\n\tPair :  0.393180182958\n\tTwo Pair :  0.223752908362\n\tThree of a Kind :  0.0444173464525\n\tStraight :  0.0941649380017\n\tFlush :  0.0710019949729\n\tFull House :  0.0243624963791\n\tFour of a Kind :  0.00141330044198\n\tStraight Flush :  0.00225076855512\n\tRoyal Flush :  1.1680168942e-06\n\n\n\tTime elapsed(seconds):  19.6590108871\n\n### Board supplied:\n\n\t$ python holdem_calc.py As Ac 7d 8d -b 6d 9d 2h\n\tWinning Percentages:\n\t(As, Ac) :  0.437373737374\n\t(7d, 8d) :  0.562626262626\n\tTies:  0.0\n\n\tPlayer1 Histogram:\n\tHigh Card :  0.0\n\tPair :  0.518181818182\n\tTwo Pair :  0.384848484848\n\tThree of a Kind :  0.0686868686869\n\tStraight :  0.0\n\tFlush :  0.0\n\tFull House :  0.0272727272727\n\tFour of a Kind :  0.0010101010101\n\tStraight Flush :  0.0\n\tRoyal Flush :  0.0\n\n\tPlayer2 Histogram:\n\tHigh Card :  0.106060606061\n\tPair :  0.241414141414\n\tTwo Pair :  0.0787878787879\n\tThree of a Kind :  0.0131313131313\n\tStraight :  0.19696969697\n\tFlush :  0.275757575758\n\tFull House :  0.0\n\tFour of a Kind :  0.0\n\tStraight Flush :  0.0878787878788\n\tRoyal Flush :  0.0\n\n\n\tTime elapsed(seconds):  0.0137040615082\n\n### Input file supplied:\n\nIn order to calculate multiple hands in a single run, the user has the choice to allow Holdem Calculator to read from an input file. Each line of the input file should represent a single calculation. Hole cards and boards should be separated using a \"|\" divider.\n\n\t$ cat input_file\n\tAd As Td Jd\n\tAd As Td Jd | 8d 9d 2c\n\n\t$ python holdem_calc.py --input input_file --exact\n\tWinning Percentages:\n\t(Ad, As) :  0.791864061522\n\t(Td, Jd) :  0.203947429896\n\tTies:  0.00418850858259\n\n\tPlayer1 Histogram:\n\tHigh Card :  0.0\n\tPair :  0.358631411245\n\tTwo Pair :  0.393626365412\n\tThree of a Kind :  0.122320569245\n\tStraight :  0.0115435109653\n\tFlush :  0.0170863351368\n\tFull House :  0.0875755706931\n\tFour of a Kind :  0.00912221194367\n\tStraight Flush :  6.71609714163e-05\n\tRoyal Flush :  2.68643885665e-05\n\n\tPlayer2 Histogram:\n\tHigh Card :  0.1535743653\n\tPair :  0.406777067624\n\tTwo Pair :  0.22637510629\n\tThree of a Kind :  0.0449108335903\n\tStraight :  0.0865465478093\n\tFlush :  0.0543390659603\n\tFull House :  0.0243624963791\n\tFour of a Kind :  0.00141330044198\n\tStraight Flush :  0.0017000485895\n\tRoyal Flush :  1.1680168942e-06\n\n\t-----------------------------------\n\tWinning Percentages:\n\t(Ad, As) :  0.473737373737\n\t(Td, Jd) :  0.526262626263\n\tTies:  0.0\n\n\tPlayer1 Histogram:\n\tHigh Card :  0.0\n\tPair :  0.49696969697\n\tTwo Pair :  0.377777777778\n\tThree of a Kind :  0.0686868686869\n\tStraight :  0.0\n\tFlush :  0.0282828282828\n\tFull House :  0.0272727272727\n\tFour of a Kind :  0.0010101010101\n\tStraight Flush :  0.0\n\tRoyal Flush :  0.0\n\n\tPlayer2 Histogram:\n\tHigh Card :  0.121212121212\n\tPair :  0.256565656566\n\tTwo Pair :  0.0787878787879\n\tThree of a Kind :  0.0131313131313\n\tStraight :  0.20303030303\n\tFlush :  0.239393939394\n\tFull House :  0.0\n\tFour of a Kind :  0.0\n\tStraight Flush :  0.0878787878788\n\tRoyal Flush :  0.0\n\n\t-----------------------------------\n\n\tTime elapsed(seconds):  16.41842103\n\n### Unknown Hole Cards:\n\nCompute how likely a hand is to win against a random pair of hole cards. You can only specify one set of hole cards as unknown.\n**Note:** Performing calculations with unknown hole cards takes an excessively long time if community cards are not specified.\n\n\t$ python holdem_calc.py As Ks ? ? -b Ac 2h 6c\n\tWinning Percentages:\n\t(As, Ks) :  0.858660611667\n\t(?, ?) :  0.135034900345\n\tTies:  0.00630448798811\n\n\tPlayer1 Histogram:\n\tHigh Card :  0.0\n\tPair :  0.532839962997\n\tTwo Pair :  0.374653098982\n\tThree of a Kind :  0.0666049953747\n\tStraight :  0.0\n\tFlush :  0.0\n\tFull House :  0.0249768732655\n\tFour of a Kind :  0.000925069380204\n\tStraight Flush :  0.0\n\tRoyal Flush :  0.0\n\n\tPlayer2 Histogram:\n\tHigh Card :  0.241033835113\n\tPair :  0.470249208085\n\tTwo Pair :  0.185989403751\n\tThree of a Kind :  0.0336052476663\n\tStraight :  0.0185462394528\n\tFlush :  0.0378829927396\n\tFull House :  0.0121043926779\n\tFour of a Kind :  0.000543828665938\n\tStraight Flush :  3.9245367645e-05\n\tRoyal Flush :  5.60648109214e-06\n\n\n\tTime elapsed(seconds):  10.9187510014\n\n### Multiprocess Holdem Calculator:\nTakes the same command line options but utilizes multicore processors to increase the speed of computation.\n**Windows users:** Due to the process forking mechanism in Windows, parallel_holdem_calc might be slower than expected.\n\n\t$ python parallel_holdem_calc.py As Ah Td Jd --exact\n\tWinning Percentages:\n\t(As, Ah) :  0.781151594577\n\t(Td, Jd) :  0.215486268793\n\tTies:  0.00336213662994\n\n\tPlayer1 Histogram:\n\tHigh Card :  0.0\n\tPair :  0.355117432419\n\tTwo Pair :  0.391827619395\n\tThree of a Kind :  0.122154710846\n\tStraight :  0.0114418934955\n\tFlush :  0.022642007494\n\tFull House :  0.0875755706931\n\tFour of a Kind :  0.00912221194367\n\tStraight Flush :  6.65769629692e-05\n\tRoyal Flush :  5.19767517917e-05\n\n\tPlayer2 Histogram:\n\tHigh Card :  0.148343401639\n\tPair :  0.398811192405\n\tTwo Pair :  0.224704842131\n\tThree of a Kind :  0.0446024771302\n\tStraight :  0.0845083583289\n\tFlush :  0.071000826956\n\tFull House :  0.0243624963791\n\tFour of a Kind :  0.00141330044198\n\tStraight Flush :  0.00167435221783\n\tRoyal Flush :  0.000578752371074\n\n\n\tTime elapsed(seconds):  11.5955700874\n\n### Library Calls:\nIf you want to use Holdem Calculator as a library, you can import holdem_calc or parallel_holdem_calc and call calculate(). The order of arguments to calculate() are as follows:\n\n1. Board: These are the community cards supplied to the calculation. This is in the form of a list of strings, with each string representing a card. If you do not want to specify community cards, you can set board to be None. Example: [\"As\", \"Ks\", \"Jd\"]\n2. Exact: This is a boolean which is True if you want an exact calculation, and False if you want a Monte Carlo simulation.\n3. Number of Simulations: This is the number of iterations run in the Monte Carlo simulation. Note that this parameter is ignored if Exact is set to True. **This number must be positive, even if Exact is set to true.**\n4. Input File: The name of the input file you want Holdem Calculator to read from. Mark as None, if you do not wish to read from a file. **If Input File is set, library calls will not return anything.**\n5. Hole Cards: These are the hole cards for each of the players. This is in the form of a list of strings, with each string representing a card. Example: [\"As\", \"Ks\", \"Jd\", \"Td\"]\n6. Verbose: This is a boolean which is True if you want Holdem Calculator to print the results.\n\nCalls to calculate() return a list of floats. The first element in the list corresponds to the probability that a tie takes place. Each element after that corresponds to the probability one of the hole cards the user provides wins the hand. These probabilities occur in the order in which you list them.\n\n\n\t$ cat example.py\n\timport holdem_calc\n\timport parallel_holdem_calc\n\n\tprint holdem_calc.calculate([\"As\", \"Ks\", \"Jd\"], True, 1, None, [\"8s\", \"7s\", \"Qc\", \"Th\"], False)\n\tprint parallel_holdem_calc.calculate(None, True, 1, None, [\"8s\", \"7s\", \"Ad\", \"Ac\"], False)\n\n\t$ python example.py\n\t[0.00404040404040404, 0.36363636363636365, 0.6323232323232323]\n\t[0.0029375624889038396, 0.2287397564918379, 0.7683226810192583]\n\n## Copyright\n\nCopyright (c) 2013 Kevin Tseng. See [LICENSE](https://github.com/ktseng/holdem_calc/blob/master/LICENSE) for details.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/RoelandMatthijssens/holdem_calc", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "holdem-calc", "package_url": "https://pypi.org/project/holdem-calc/", "platform": "", "project_url": "https://pypi.org/project/holdem-calc/", "project_urls": {"Homepage": "https://github.com/RoelandMatthijssens/holdem_calc"}, "release_url": "https://pypi.org/project/holdem-calc/1.0.0/", "requires_dist": null, "requires_python": ">=3.6", "summary": "Holdem Calculator library", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Holdem Calculator</h1>\n<p>The Holdem Calculator library calculates the probability that a certain Texas Hold'em hand will win. This probability is approximated by running a Monte Carlo method or calculated exactly by simulating the set of all possible hands. The Holdem Calculator also shows how likely each set of hole cards is to make a certain poker hand. The default Monte Carlo simulations are generally accurate to the nearest percent. Accuracy can be improved by increasing the number of simulations that are run, but this will result in a longer running time.</p>\n<h2>Command Line Options</h2>\n<pre><code>-h, --help            show this help message and exit\n-b [card [card ...]], --board [card [card ...]]\n                      Add board cards\n-e, --exact           Find exact odds by enumerating every possible board\n-n N                  Run N Monte Carlo simulations\n-i INPUT, --input INPUT\n                      Read hole cards and boards from an input file.\n                      Commandline arguments for hole cards and board will be\n                      ignored\n</code></pre>\n<h2>Usage</h2>\n<p>I've listed a few examples showing how to use the Holdem Calculator. Note that you can mix and match command line options to suit your needs. See the bottom example in this section to see how to use the multiprocess Holdem Calculator for faster computations.</p>\n<h3>Default use case:</h3>\n<pre><code>$ python holdem_calc.py Ad Kd Qc Qs\nWinning Percentages:\n(Ad, Kd) :  0.46148\n(Qc, Qs) :  0.53427\nTies:  0.00425\n\nPlayer1 Histogram:\nHigh Card :  0.17318\nPair :  0.42858\nTwo Pair :  0.23224\nThree of a Kind :  0.04573\nStraight :  0.02197\nFlush :  0.07181\nFull House :  0.02427\nFour of a Kind :  0.0014\nStraight Flush :  2e-05\nRoyal Flush :  0.0008\n\nPlayer2 Histogram:\nHigh Card :  0.0\nPair :  0.34864\nTwo Pair :  0.39275\nThree of a Kind :  0.12333\nStraight :  0.01545\nFlush :  0.02333\nFull House :  0.08706\nFour of a Kind :  0.00931\nStraight Flush :  9e-05\nRoyal Flush :  4e-05\n\n\nTime elapsed(seconds):  1.56669712067\n</code></pre>\n<h3>Multiplayer use case:</h3>\n<pre><code>$ python holdem_calc.py As Ks Td Jd 4h 4c\nWinning Percentages:\n(As, Ks) :  0.38166\n(Td, Jd) :  0.33029\n(4h, 4c) :  0.2853\nTies:  0.00275\n\nPlayer1 Histogram:\nHigh Card :  0.16582\nPair :  0.4193\nTwo Pair :  0.2321\nThree of a Kind :  0.04763\nStraight :  0.02355\nFlush :  0.08369\nFull House :  0.02572\nFour of a Kind :  0.00146\nStraight Flush :  1e-05\nRoyal Flush :  0.00072\n\nPlayer2 Histogram:\nHigh Card :  0.13874\nPair :  0.38832\nTwo Pair :  0.22959\nThree of a Kind :  0.04561\nStraight :  0.0889\nFlush :  0.07811\nFull House :  0.02649\nFour of a Kind :  0.00162\nStraight Flush :  0.00195\nRoyal Flush :  0.00067\n\nPlayer3 Histogram:\nHigh Card :  0.0\nPair :  0.34242\nTwo Pair :  0.38102\nThree of a Kind :  0.12639\nStraight :  0.02482\nFlush :  0.02576\nFull House :  0.08957\nFour of a Kind :  0.00981\nStraight Flush :  0.00021\nRoyal Flush :  0.0\n\n\nTime elapsed(seconds):  2.0515730381\n</code></pre>\n<h3>Exact calculation:</h3>\n<pre><code>$ python holdem_calc.py As Ac 7d 8d --exact\nWinning Percentages:\n(As, Ac) :  0.768322681019\n(7d, 8d) :  0.228739756492\nTies:  0.0029375624889\n\nPlayer1 Histogram:\nHigh Card :  0.0\nPair :  0.354008400378\nTwo Pair :  0.391353404536\nThree of a Kind :  0.122024476962\nStraight :  0.0131553742793\nFlush :  0.0226425915024\nFull House :  0.0875755706931\nFour of a Kind :  0.00912221194367\nStraight Flush :  6.5408946075e-05\nRoyal Flush :  5.25607602388e-05\n\nPlayer2 Histogram:\nHigh Card :  0.14545489586\nPair :  0.393180182958\nTwo Pair :  0.223752908362\nThree of a Kind :  0.0444173464525\nStraight :  0.0941649380017\nFlush :  0.0710019949729\nFull House :  0.0243624963791\nFour of a Kind :  0.00141330044198\nStraight Flush :  0.00225076855512\nRoyal Flush :  1.1680168942e-06\n\n\nTime elapsed(seconds):  19.6590108871\n</code></pre>\n<h3>Board supplied:</h3>\n<pre><code>$ python holdem_calc.py As Ac 7d 8d -b 6d 9d 2h\nWinning Percentages:\n(As, Ac) :  0.437373737374\n(7d, 8d) :  0.562626262626\nTies:  0.0\n\nPlayer1 Histogram:\nHigh Card :  0.0\nPair :  0.518181818182\nTwo Pair :  0.384848484848\nThree of a Kind :  0.0686868686869\nStraight :  0.0\nFlush :  0.0\nFull House :  0.0272727272727\nFour of a Kind :  0.0010101010101\nStraight Flush :  0.0\nRoyal Flush :  0.0\n\nPlayer2 Histogram:\nHigh Card :  0.106060606061\nPair :  0.241414141414\nTwo Pair :  0.0787878787879\nThree of a Kind :  0.0131313131313\nStraight :  0.19696969697\nFlush :  0.275757575758\nFull House :  0.0\nFour of a Kind :  0.0\nStraight Flush :  0.0878787878788\nRoyal Flush :  0.0\n\n\nTime elapsed(seconds):  0.0137040615082\n</code></pre>\n<h3>Input file supplied:</h3>\n<p>In order to calculate multiple hands in a single run, the user has the choice to allow Holdem Calculator to read from an input file. Each line of the input file should represent a single calculation. Hole cards and boards should be separated using a \"|\" divider.</p>\n<pre><code>$ cat input_file\nAd As Td Jd\nAd As Td Jd | 8d 9d 2c\n\n$ python holdem_calc.py --input input_file --exact\nWinning Percentages:\n(Ad, As) :  0.791864061522\n(Td, Jd) :  0.203947429896\nTies:  0.00418850858259\n\nPlayer1 Histogram:\nHigh Card :  0.0\nPair :  0.358631411245\nTwo Pair :  0.393626365412\nThree of a Kind :  0.122320569245\nStraight :  0.0115435109653\nFlush :  0.0170863351368\nFull House :  0.0875755706931\nFour of a Kind :  0.00912221194367\nStraight Flush :  6.71609714163e-05\nRoyal Flush :  2.68643885665e-05\n\nPlayer2 Histogram:\nHigh Card :  0.1535743653\nPair :  0.406777067624\nTwo Pair :  0.22637510629\nThree of a Kind :  0.0449108335903\nStraight :  0.0865465478093\nFlush :  0.0543390659603\nFull House :  0.0243624963791\nFour of a Kind :  0.00141330044198\nStraight Flush :  0.0017000485895\nRoyal Flush :  1.1680168942e-06\n\n-----------------------------------\nWinning Percentages:\n(Ad, As) :  0.473737373737\n(Td, Jd) :  0.526262626263\nTies:  0.0\n\nPlayer1 Histogram:\nHigh Card :  0.0\nPair :  0.49696969697\nTwo Pair :  0.377777777778\nThree of a Kind :  0.0686868686869\nStraight :  0.0\nFlush :  0.0282828282828\nFull House :  0.0272727272727\nFour of a Kind :  0.0010101010101\nStraight Flush :  0.0\nRoyal Flush :  0.0\n\nPlayer2 Histogram:\nHigh Card :  0.121212121212\nPair :  0.256565656566\nTwo Pair :  0.0787878787879\nThree of a Kind :  0.0131313131313\nStraight :  0.20303030303\nFlush :  0.239393939394\nFull House :  0.0\nFour of a Kind :  0.0\nStraight Flush :  0.0878787878788\nRoyal Flush :  0.0\n\n-----------------------------------\n\nTime elapsed(seconds):  16.41842103\n</code></pre>\n<h3>Unknown Hole Cards:</h3>\n<p>Compute how likely a hand is to win against a random pair of hole cards. You can only specify one set of hole cards as unknown.\n<strong>Note:</strong> Performing calculations with unknown hole cards takes an excessively long time if community cards are not specified.</p>\n<pre><code>$ python holdem_calc.py As Ks ? ? -b Ac 2h 6c\nWinning Percentages:\n(As, Ks) :  0.858660611667\n(?, ?) :  0.135034900345\nTies:  0.00630448798811\n\nPlayer1 Histogram:\nHigh Card :  0.0\nPair :  0.532839962997\nTwo Pair :  0.374653098982\nThree of a Kind :  0.0666049953747\nStraight :  0.0\nFlush :  0.0\nFull House :  0.0249768732655\nFour of a Kind :  0.000925069380204\nStraight Flush :  0.0\nRoyal Flush :  0.0\n\nPlayer2 Histogram:\nHigh Card :  0.241033835113\nPair :  0.470249208085\nTwo Pair :  0.185989403751\nThree of a Kind :  0.0336052476663\nStraight :  0.0185462394528\nFlush :  0.0378829927396\nFull House :  0.0121043926779\nFour of a Kind :  0.000543828665938\nStraight Flush :  3.9245367645e-05\nRoyal Flush :  5.60648109214e-06\n\n\nTime elapsed(seconds):  10.9187510014\n</code></pre>\n<h3>Multiprocess Holdem Calculator:</h3>\n<p>Takes the same command line options but utilizes multicore processors to increase the speed of computation.\n<strong>Windows users:</strong> Due to the process forking mechanism in Windows, parallel_holdem_calc might be slower than expected.</p>\n<pre><code>$ python parallel_holdem_calc.py As Ah Td Jd --exact\nWinning Percentages:\n(As, Ah) :  0.781151594577\n(Td, Jd) :  0.215486268793\nTies:  0.00336213662994\n\nPlayer1 Histogram:\nHigh Card :  0.0\nPair :  0.355117432419\nTwo Pair :  0.391827619395\nThree of a Kind :  0.122154710846\nStraight :  0.0114418934955\nFlush :  0.022642007494\nFull House :  0.0875755706931\nFour of a Kind :  0.00912221194367\nStraight Flush :  6.65769629692e-05\nRoyal Flush :  5.19767517917e-05\n\nPlayer2 Histogram:\nHigh Card :  0.148343401639\nPair :  0.398811192405\nTwo Pair :  0.224704842131\nThree of a Kind :  0.0446024771302\nStraight :  0.0845083583289\nFlush :  0.071000826956\nFull House :  0.0243624963791\nFour of a Kind :  0.00141330044198\nStraight Flush :  0.00167435221783\nRoyal Flush :  0.000578752371074\n\n\nTime elapsed(seconds):  11.5955700874\n</code></pre>\n<h3>Library Calls:</h3>\n<p>If you want to use Holdem Calculator as a library, you can import holdem_calc or parallel_holdem_calc and call calculate(). The order of arguments to calculate() are as follows:</p>\n<ol>\n<li>Board: These are the community cards supplied to the calculation. This is in the form of a list of strings, with each string representing a card. If you do not want to specify community cards, you can set board to be None. Example: [\"As\", \"Ks\", \"Jd\"]</li>\n<li>Exact: This is a boolean which is True if you want an exact calculation, and False if you want a Monte Carlo simulation.</li>\n<li>Number of Simulations: This is the number of iterations run in the Monte Carlo simulation. Note that this parameter is ignored if Exact is set to True. <strong>This number must be positive, even if Exact is set to true.</strong></li>\n<li>Input File: The name of the input file you want Holdem Calculator to read from. Mark as None, if you do not wish to read from a file. <strong>If Input File is set, library calls will not return anything.</strong></li>\n<li>Hole Cards: These are the hole cards for each of the players. This is in the form of a list of strings, with each string representing a card. Example: [\"As\", \"Ks\", \"Jd\", \"Td\"]</li>\n<li>Verbose: This is a boolean which is True if you want Holdem Calculator to print the results.</li>\n</ol>\n<p>Calls to calculate() return a list of floats. The first element in the list corresponds to the probability that a tie takes place. Each element after that corresponds to the probability one of the hole cards the user provides wins the hand. These probabilities occur in the order in which you list them.</p>\n<pre><code>$ cat example.py\nimport holdem_calc\nimport parallel_holdem_calc\n\nprint holdem_calc.calculate([\"As\", \"Ks\", \"Jd\"], True, 1, None, [\"8s\", \"7s\", \"Qc\", \"Th\"], False)\nprint parallel_holdem_calc.calculate(None, True, 1, None, [\"8s\", \"7s\", \"Ad\", \"Ac\"], False)\n\n$ python example.py\n[0.00404040404040404, 0.36363636363636365, 0.6323232323232323]\n[0.0029375624889038396, 0.2287397564918379, 0.7683226810192583]\n</code></pre>\n<h2>Copyright</h2>\n<p>Copyright (c) 2013 Kevin Tseng. See <a href=\"https://github.com/ktseng/holdem_calc/blob/master/LICENSE\" rel=\"nofollow\">LICENSE</a> for details.</p>\n\n          </div>"}, "last_serial": 6372952, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "c93a59c622217c026573083492626827", "sha256": "b153aeaf57db68efb42b801d617823cddd07898af777a497309cc5874df6cfd1"}, "downloads": -1, "filename": "holdem_calc-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "c93a59c622217c026573083492626827", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 14366, "upload_time": "2019-12-29T23:07:00", "upload_time_iso_8601": "2019-12-29T23:07:00.521257Z", "url": "https://files.pythonhosted.org/packages/ec/c5/ea3ed2f22ff936a22d9f983ff590e72252e4d505c04fcc7f0358502476e9/holdem_calc-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "46fab1f2d4de43e725a69bb67d2f4500", "sha256": "28a124902c0b247b8651e326df680c488171325b212aeeb8809bed0d30d8f06a"}, "downloads": -1, "filename": "holdem_calc-1.0.0.tar.gz", "has_sig": false, "md5_digest": "46fab1f2d4de43e725a69bb67d2f4500", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 15265, "upload_time": "2019-12-29T23:07:02", "upload_time_iso_8601": "2019-12-29T23:07:02.890582Z", "url": "https://files.pythonhosted.org/packages/45/20/eeb82fb1d1470f32d97b386cef005a785c6c168b3057336cb29baf8eb736/holdem_calc-1.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c93a59c622217c026573083492626827", "sha256": "b153aeaf57db68efb42b801d617823cddd07898af777a497309cc5874df6cfd1"}, "downloads": -1, "filename": "holdem_calc-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "c93a59c622217c026573083492626827", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 14366, "upload_time": "2019-12-29T23:07:00", "upload_time_iso_8601": "2019-12-29T23:07:00.521257Z", "url": "https://files.pythonhosted.org/packages/ec/c5/ea3ed2f22ff936a22d9f983ff590e72252e4d505c04fcc7f0358502476e9/holdem_calc-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "46fab1f2d4de43e725a69bb67d2f4500", "sha256": "28a124902c0b247b8651e326df680c488171325b212aeeb8809bed0d30d8f06a"}, "downloads": -1, "filename": "holdem_calc-1.0.0.tar.gz", "has_sig": false, "md5_digest": "46fab1f2d4de43e725a69bb67d2f4500", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 15265, "upload_time": "2019-12-29T23:07:02", "upload_time_iso_8601": "2019-12-29T23:07:02.890582Z", "url": "https://files.pythonhosted.org/packages/45/20/eeb82fb1d1470f32d97b386cef005a785c6c168b3057336cb29baf8eb736/holdem_calc-1.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:50:50 2020"}