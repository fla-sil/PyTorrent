{"info": {"author": "fusionbox, inc.", "author_email": "programmers@fusionbox.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Framework :: Django", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Programming Language :: Python", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Topic :: Internet :: WWW/HTTP", "Topic :: Software Development :: Libraries"], "description": "===============\ndjango-json-tag\n===============\n\n.. image:: https://api.travis-ci.org/graingert/django-json-tag.png\n   :alt: Building Status\n   :target: https://travis-ci.org/graingert/django-json-tag\n\n\nA lightweight collection of JSON helpers for Django. Includes a template filter\nfor safely outputting JSON, views that encode and decode JSON, and a helper for\nwriting simple REST views.\n\nA special JSON encoder is used to serialize QuerySets and objects with\n``to_json`` methods.\n\n------\nFilter\n------\n\nYou can serialize an object in JSON using the ``|json`` filter. This is useful\nto generate safe JavaScript:\n\n.. code:: html\n\n  {% load json_tag %}\n  <script type=\"application/javascript\">\n    (function () {\n        var object_list = {{ object_list|json }};\n        // do something with object_list\n    })();\n  </script>\n\n``|json`` is safe to use anywhere in XML or XHTML except in a double quoted attribute. It's\nimportant to use this tag rather than dumping the output of ``json.dumps`` into\nHTML, because an attacker could output a closing tag and effect an XSS attack.\nFor example, if we output ``json.dumps(\"</script><script>console.log('xss');\n//\")`` in template like this:\n\n.. code:: html\n\n  <script>\n    var somedata = {{ somedata_as_json|safe }};\n  </script>\n\nWe get:\n\n.. code:: html\n\n  <script>\n    var somedata = \"</script>\n  <script>\n    console.log('xss'); //\";\n  </script>\n\nThis allows the attacker to inject their own JavaScript. The ``|json`` tag\nprevents this by encoding the closing ``</script>`` tag with JSON's unicode\nescapes. If we output ``{{ somedata|json }}``, we get:\n\n.. code:: html\n\n  <script>\n    var somedata = \"\\u0060xscript\\u0062x\\u0060xscript\\u0062xconsole.log(\\u0027xss\\u0027);//\";\n  </script>\n\njson_tag also escapes single quotes this allows you to write valid JS for tools like\neslint-plugin-html and for use in single quoted XML or XHTML attributes:\n\n.. code:: html\n\n  <script data-data='{{ extra|json }}'>\n    var somedata = JSON.parse('{{ somedata|json }}');\n  </script>\n\nIt also escapes ampersands in order to generate valid XML. For example, with the value\n``foo & bar``:\n\n.. code:: xml\n\n  <document><json>{{ value|json }}</json></document>\n  <!-- Results in valid XML:\n  <document><json>\"foo \\u0038x bar\"</json></document>\n  -->\n\n---\nTag\n---\n\nYou can also serialize multiple objects at the same time with the `{% json %}`\ntemplate tag.\n\nTo create an Array, use:\n\n.. code:: html\n\n  {% load json_tag %}\n  <script type=\"module\">\n    const [ham, spam, eggs] = {% json ham spam eggs %};\n    // do something with ham, spam and eggs.\n  </script>\n\nTo create an Object, use:\n\n.. code:: html\n\n  {% load json_tag %}\n  <script type=\"module\">\n    const { ham, spam, eggs } = {% json ham=user spam=author eggs=owner %};\n    // do something with ham, spam and eggs.\n  </script>\n\nIf you mix args and kwargs, however, you get an array-like object with\nnumeric properties from the args and string properties from the kwargs.\n\n.. code:: html\n\n  {% load json_tag %}\n  <script type=\"module\">\n    import assert from 'assert';\n    const x = {% json ham spam=author eggs=owner %};\n    const [ham] = Array.from(x);\n    const { spam, eggs, length } = x;\n    assert(length === 1);\n    const y = Array.prototype.map.call(x, v => v + 1);\n    assert.deepEqual(y, [ham+1]);\n    // do something with ham, spam and eggs.\n  </script>\n\n\nThe `length` property is populated from the number of args passed to\nallow use with Array methods like Array.prototype.map or Array.from.\nYou can override it, but it is likely to cause Array methods to fail:\n\n.. code:: html\n\n  {% load json_tag %}\n  <script type=\"module\">\n    import assert from 'assert';\n    const x = {% json ham spam=author eggs=owner length='banana'%};\n    const [ham] = Array.from(x);\n    assert(typeof ham === 'undefined');\n    const { spam, eggs, length } = x;\n    assert(length === 'banana');\n    const y = Array.prototype.map.call(x, v => v + 1);\n    assert.deepEqual(y, []);\n    // do something with spam and eggs.\n  </script>\n\n-----\nViews\n-----\n\n``JsonResponseMixin``\n=====================\n\n``JsonResponseMixin`` implements ``render_to_response`` method that serializes\nan object into a JSON response. Thus it is compatible with generic Django\nviews:\n\n.. code:: python\n\n    from django.db import models\n    from django.views.generic.detail import BaseDetailView\n    from json_tag.views import JsonResponseMixin\n\n    class Blog(models.Model):\n        title = models.CharField(max_length=255)\n        body = models.TextField()\n\n        def to_json(self):\n            return {\n                'title': self.title,\n                'body': self.body,\n            }\n\n    class BlogDetailView(JsonResponseMixin, BaseDetailView):\n        \"\"\"\n        Detail view returning object serialized in JSON\n        \"\"\"\n        model = Blog\n\n\n``JsonRequestMixin``\n====================\n\n``JsonRequestMixin`` gives access to the request data through ``data()`` method.\n\n.. code:: python\n\n    from django.views.generic.base import View\n    from json_tag.views import JsonRequestMixin:\n    from json_tag.http import JsonResponse\n\n    class EchoView(JsonRequestMixin, View):\n        def dispatch(self, *args, **kwargs):\n            return JsonResponse(self.data())\n\n\n``RestView``\n============\n\n``RestView`` is an abstract class. Subclasses should implement `auth()`, for\nhandling authentication, and at least one HTTP method.\n\n``RestView`` implements `OPTIONS` http method, and inherits from\n``JsonRequestMixin`` and ``JsonResponseMixin``.\n\n.. code:: python\n\n    from django.core.exceptions import PermissionDenied\n    from json_tag.views import RestView\n    from .utils import get_action\n\n    class CrazyRestView(RestView):\n        def auth(self, *args, **kwargs):\n            if not self.request.user.is_superuser:\n                raise PermissionDenied\n\n        def post(self, *args, **kwargs):\n            action = kwargs.pop('action')\n            action_func = get_action(action)\n            return self.render_to_response(action_func(self.data()))\n\n\nChangelog\n=========\n\n0.0.1 (2018-04-24)\n------------------\n\n- Rename module to json_tag\n\n\n0.0.0 (2018-04-24)\n------------------\n\nInitial release:\n\n- Extracted from django-argonauts\n- `{% json %}` tag\n- escape single quote\n- fix travis tests", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/graingert/django-json-tag", "keywords": "rest json views django helpers", "license": "", "maintainer": "Thomas Grainger", "maintainer_email": "django-json-tag@graingert.co.uk", "name": "django-json-tag", "package_url": "https://pypi.org/project/django-json-tag/", "platform": "", "project_url": "https://pypi.org/project/django-json-tag/", "project_urls": {"Homepage": "https://github.com/graingert/django-json-tag"}, "release_url": "https://pypi.org/project/django-json-tag/0.0.1/", "requires_dist": null, "requires_python": "", "summary": "A lightweight collection of JSON helpers for Django.", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://travis-ci.org/graingert/django-json-tag\" rel=\"nofollow\"><img alt=\"Building Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/edd6d8da45ca7c36b40b39649412752695842eff/68747470733a2f2f6170692e7472617669732d63692e6f72672f677261696e676572742f646a616e676f2d6a736f6e2d7461672e706e67\"></a>\n<p>A lightweight collection of JSON helpers for Django. Includes a template filter\nfor safely outputting JSON, views that encode and decode JSON, and a helper for\nwriting simple REST views.</p>\n<p>A special JSON encoder is used to serialize QuerySets and objects with\n<tt>to_json</tt> methods.</p>\n<div id=\"filter\">\n<h2>Filter</h2>\n<p>You can serialize an object in JSON using the <tt>|json</tt> filter. This is useful\nto generate safe JavaScript:</p>\n<pre>{% load json_tag %}\n<span class=\"p\">&lt;</span><span class=\"nt\">script</span> <span class=\"na\">type</span><span class=\"o\">=</span><span class=\"s\">\"application/javascript\"</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n      <span class=\"kd\">var</span> <span class=\"nx\">object_list</span> <span class=\"o\">=</span> <span class=\"p\">{{</span> <span class=\"nx\">object_list</span><span class=\"o\">|</span><span class=\"nx\">json</span> <span class=\"p\">}};</span>\n      <span class=\"c1\">// do something with object_list\n</span>  <span class=\"p\">})();</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\n</pre>\n<p><tt>|json</tt> is safe to use anywhere in XML or XHTML except in a double quoted attribute. It\u2019s\nimportant to use this tag rather than dumping the output of <tt>json.dumps</tt> into\nHTML, because an attacker could output a closing tag and effect an XSS attack.\nFor example, if we output <tt><span class=\"pre\">json.dumps(\"&lt;/script&gt;&lt;script&gt;console.log('xss');</span>\n<span class=\"pre\">//\")</span></tt> in template like this:</p>\n<pre><span class=\"p\">&lt;</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\n  <span class=\"kd\">var</span> <span class=\"nx\">somedata</span> <span class=\"o\">=</span> <span class=\"p\">{{</span> <span class=\"nx\">somedata_as_json</span><span class=\"o\">|</span><span class=\"nx\">safe</span> <span class=\"p\">}};</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\n</pre>\n<p>We get:</p>\n<pre><span class=\"p\">&lt;</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\n  <span class=\"kd\">var</span> <span class=\"nx\">somedata</span> <span class=\"o\">=</span> <span class=\"err\">\"</span><span class=\"p\">&lt;/</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">'xss'</span><span class=\"p\">);</span> <span class=\"c1\">//\";\n</span><span class=\"p\">&lt;/</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\n</pre>\n<p>This allows the attacker to inject their own JavaScript. The <tt>|json</tt> tag\nprevents this by encoding the closing <tt>&lt;/script&gt;</tt> tag with JSON\u2019s unicode\nescapes. If we output <tt>{{ somedata|json }}</tt>, we get:</p>\n<pre><span class=\"p\">&lt;</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\n  <span class=\"kd\">var</span> <span class=\"nx\">somedata</span> <span class=\"o\">=</span> <span class=\"s2\">\"\\u0060xscript\\u0062x\\u0060xscript\\u0062xconsole.log(\\u0027xss\\u0027);//\"</span><span class=\"p\">;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\n</pre>\n<p>json_tag also escapes single quotes this allows you to write valid JS for tools like\neslint-plugin-html and for use in single quoted XML or XHTML attributes:</p>\n<pre><span class=\"p\">&lt;</span><span class=\"nt\">script</span> <span class=\"na\">data-data</span><span class=\"o\">=</span><span class=\"s\">'{{ extra|json }}'</span><span class=\"p\">&gt;</span>\n  <span class=\"kd\">var</span> <span class=\"nx\">somedata</span> <span class=\"o\">=</span> <span class=\"nx\">JSON</span><span class=\"p\">.</span><span class=\"nx\">parse</span><span class=\"p\">(</span><span class=\"s1\">'{{ somedata|json }}'</span><span class=\"p\">);</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\n</pre>\n<p>It also escapes ampersands in order to generate valid XML. For example, with the value\n<tt>foo &amp; bar</tt>:</p>\n<pre><span class=\"nt\">&lt;document&gt;&lt;json&gt;</span>{{ value|json }}<span class=\"nt\">&lt;/json&gt;&lt;/document&gt;</span>\n<span class=\"c\">&lt;!-- Results in valid XML:\n&lt;document&gt;&lt;json&gt;\"foo \\u0038x bar\"&lt;/json&gt;&lt;/document&gt;\n--&gt;</span>\n</pre>\n</div>\n<div id=\"tag\">\n<h2>Tag</h2>\n<p>You can also serialize multiple objects at the same time with the <cite>{% json %}</cite>\ntemplate tag.</p>\n<p>To create an Array, use:</p>\n<pre>{% load json_tag %}\n<span class=\"p\">&lt;</span><span class=\"nt\">script</span> <span class=\"na\">type</span><span class=\"o\">=</span><span class=\"s\">\"module\"</span><span class=\"p\">&gt;</span>\n  <span class=\"kr\">const</span> <span class=\"p\">[</span><span class=\"nx\">ham</span><span class=\"p\">,</span> <span class=\"nx\">spam</span><span class=\"p\">,</span> <span class=\"nx\">eggs</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"o\">%</span> <span class=\"nx\">json</span> <span class=\"nx\">ham</span> <span class=\"nx\">spam</span> <span class=\"nx\">eggs</span> <span class=\"o\">%</span><span class=\"p\">};</span>\n  <span class=\"c1\">// do something with ham, spam and eggs.\n</span><span class=\"p\">&lt;/</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\n</pre>\n<p>To create an Object, use:</p>\n<pre>{% load json_tag %}\n<span class=\"p\">&lt;</span><span class=\"nt\">script</span> <span class=\"na\">type</span><span class=\"o\">=</span><span class=\"s\">\"module\"</span><span class=\"p\">&gt;</span>\n  <span class=\"kr\">const</span> <span class=\"p\">{</span> <span class=\"nx\">ham</span><span class=\"p\">,</span> <span class=\"nx\">spam</span><span class=\"p\">,</span> <span class=\"nx\">eggs</span> <span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"o\">%</span> <span class=\"nx\">json</span> <span class=\"nx\">ham</span><span class=\"o\">=</span><span class=\"nx\">user</span> <span class=\"nx\">spam</span><span class=\"o\">=</span><span class=\"nx\">author</span> <span class=\"nx\">eggs</span><span class=\"o\">=</span><span class=\"nx\">owner</span> <span class=\"o\">%</span><span class=\"p\">};</span>\n  <span class=\"c1\">// do something with ham, spam and eggs.\n</span><span class=\"p\">&lt;/</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\n</pre>\n<p>If you mix args and kwargs, however, you get an array-like object with\nnumeric properties from the args and string properties from the kwargs.</p>\n<pre>{% load json_tag %}\n<span class=\"p\">&lt;</span><span class=\"nt\">script</span> <span class=\"na\">type</span><span class=\"o\">=</span><span class=\"s\">\"module\"</span><span class=\"p\">&gt;</span>\n  <span class=\"kr\">import</span> <span class=\"nx\">assert</span> <span class=\"nx\">from</span> <span class=\"s1\">'assert'</span><span class=\"p\">;</span>\n  <span class=\"kr\">const</span> <span class=\"nx\">x</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"o\">%</span> <span class=\"nx\">json</span> <span class=\"nx\">ham</span> <span class=\"nx\">spam</span><span class=\"o\">=</span><span class=\"nx\">author</span> <span class=\"nx\">eggs</span><span class=\"o\">=</span><span class=\"nx\">owner</span> <span class=\"o\">%</span><span class=\"p\">};</span>\n  <span class=\"kr\">const</span> <span class=\"p\">[</span><span class=\"nx\">ham</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">Array</span><span class=\"p\">.</span><span class=\"nx\">from</span><span class=\"p\">(</span><span class=\"nx\">x</span><span class=\"p\">);</span>\n  <span class=\"kr\">const</span> <span class=\"p\">{</span> <span class=\"nx\">spam</span><span class=\"p\">,</span> <span class=\"nx\">eggs</span><span class=\"p\">,</span> <span class=\"nx\">length</span> <span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nx\">x</span><span class=\"p\">;</span>\n  <span class=\"nx\">assert</span><span class=\"p\">(</span><span class=\"nx\">length</span> <span class=\"o\">===</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n  <span class=\"kr\">const</span> <span class=\"nx\">y</span> <span class=\"o\">=</span> <span class=\"nb\">Array</span><span class=\"p\">.</span><span class=\"nx\">prototype</span><span class=\"p\">.</span><span class=\"nx\">map</span><span class=\"p\">.</span><span class=\"nx\">call</span><span class=\"p\">(</span><span class=\"nx\">x</span><span class=\"p\">,</span> <span class=\"nx\">v</span> <span class=\"p\">=&gt;</span> <span class=\"nx\">v</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n  <span class=\"nx\">assert</span><span class=\"p\">.</span><span class=\"nx\">deepEqual</span><span class=\"p\">(</span><span class=\"nx\">y</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"nx\">ham</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">]);</span>\n  <span class=\"c1\">// do something with ham, spam and eggs.\n</span><span class=\"p\">&lt;/</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\n</pre>\n<p>The <cite>length</cite> property is populated from the number of args passed to\nallow use with Array methods like Array.prototype.map or Array.from.\nYou can override it, but it is likely to cause Array methods to fail:</p>\n<pre>{% load json_tag %}\n<span class=\"p\">&lt;</span><span class=\"nt\">script</span> <span class=\"na\">type</span><span class=\"o\">=</span><span class=\"s\">\"module\"</span><span class=\"p\">&gt;</span>\n  <span class=\"kr\">import</span> <span class=\"nx\">assert</span> <span class=\"nx\">from</span> <span class=\"s1\">'assert'</span><span class=\"p\">;</span>\n  <span class=\"kr\">const</span> <span class=\"nx\">x</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"o\">%</span> <span class=\"nx\">json</span> <span class=\"nx\">ham</span> <span class=\"nx\">spam</span><span class=\"o\">=</span><span class=\"nx\">author</span> <span class=\"nx\">eggs</span><span class=\"o\">=</span><span class=\"nx\">owner</span> <span class=\"nx\">length</span><span class=\"o\">=</span><span class=\"s1\">'banana'</span><span class=\"o\">%</span><span class=\"p\">};</span>\n  <span class=\"kr\">const</span> <span class=\"p\">[</span><span class=\"nx\">ham</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">Array</span><span class=\"p\">.</span><span class=\"nx\">from</span><span class=\"p\">(</span><span class=\"nx\">x</span><span class=\"p\">);</span>\n  <span class=\"nx\">assert</span><span class=\"p\">(</span><span class=\"k\">typeof</span> <span class=\"nx\">ham</span> <span class=\"o\">===</span> <span class=\"s1\">'undefined'</span><span class=\"p\">);</span>\n  <span class=\"kr\">const</span> <span class=\"p\">{</span> <span class=\"nx\">spam</span><span class=\"p\">,</span> <span class=\"nx\">eggs</span><span class=\"p\">,</span> <span class=\"nx\">length</span> <span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nx\">x</span><span class=\"p\">;</span>\n  <span class=\"nx\">assert</span><span class=\"p\">(</span><span class=\"nx\">length</span> <span class=\"o\">===</span> <span class=\"s1\">'banana'</span><span class=\"p\">);</span>\n  <span class=\"kr\">const</span> <span class=\"nx\">y</span> <span class=\"o\">=</span> <span class=\"nb\">Array</span><span class=\"p\">.</span><span class=\"nx\">prototype</span><span class=\"p\">.</span><span class=\"nx\">map</span><span class=\"p\">.</span><span class=\"nx\">call</span><span class=\"p\">(</span><span class=\"nx\">x</span><span class=\"p\">,</span> <span class=\"nx\">v</span> <span class=\"p\">=&gt;</span> <span class=\"nx\">v</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n  <span class=\"nx\">assert</span><span class=\"p\">.</span><span class=\"nx\">deepEqual</span><span class=\"p\">(</span><span class=\"nx\">y</span><span class=\"p\">,</span> <span class=\"p\">[]);</span>\n  <span class=\"c1\">// do something with spam and eggs.\n</span><span class=\"p\">&lt;/</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\n</pre>\n</div>\n<div id=\"views\">\n<h2>Views</h2>\n<div id=\"jsonresponsemixin\">\n<h3><tt>JsonResponseMixin</tt></h3>\n<p><tt>JsonResponseMixin</tt> implements <tt>render_to_response</tt> method that serializes\nan object into a JSON response. Thus it is compatible with generic Django\nviews:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">django.db</span> <span class=\"kn\">import</span> <span class=\"n\">models</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.views.generic.detail</span> <span class=\"kn\">import</span> <span class=\"n\">BaseDetailView</span>\n<span class=\"kn\">from</span> <span class=\"nn\">json_tag.views</span> <span class=\"kn\">import</span> <span class=\"n\">JsonResponseMixin</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Blog</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">title</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">255</span><span class=\"p\">)</span>\n    <span class=\"n\">body</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">TextField</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">to_json</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"p\">{</span>\n            <span class=\"s1\">'title'</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">title</span><span class=\"p\">,</span>\n            <span class=\"s1\">'body'</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">body</span><span class=\"p\">,</span>\n        <span class=\"p\">}</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">BlogDetailView</span><span class=\"p\">(</span><span class=\"n\">JsonResponseMixin</span><span class=\"p\">,</span> <span class=\"n\">BaseDetailView</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"\n    Detail view returning object serialized in JSON\n    \"\"\"</span>\n    <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">Blog</span>\n</pre>\n</div>\n<div id=\"jsonrequestmixin\">\n<h3><tt>JsonRequestMixin</tt></h3>\n<p><tt>JsonRequestMixin</tt> gives access to the request data through <tt>data()</tt> method.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">django.views.generic.base</span> <span class=\"kn\">import</span> <span class=\"n\">View</span>\n<span class=\"kn\">from</span> <span class=\"nn\">json_tag.views</span> <span class=\"kn\">import</span> <span class=\"n\">JsonRequestMixin</span><span class=\"p\">:</span>\n<span class=\"kn\">from</span> <span class=\"nn\">json_tag.http</span> <span class=\"kn\">import</span> <span class=\"n\">JsonResponse</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">EchoView</span><span class=\"p\">(</span><span class=\"n\">JsonRequestMixin</span><span class=\"p\">,</span> <span class=\"n\">View</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">dispatch</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">JsonResponse</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">())</span>\n</pre>\n</div>\n<div id=\"restview\">\n<h3><tt>RestView</tt></h3>\n<p><tt>RestView</tt> is an abstract class. Subclasses should implement <cite>auth()</cite>, for\nhandling authentication, and at least one HTTP method.</p>\n<p><tt>RestView</tt> implements <cite>OPTIONS</cite> http method, and inherits from\n<tt>JsonRequestMixin</tt> and <tt>JsonResponseMixin</tt>.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">django.core.exceptions</span> <span class=\"kn\">import</span> <span class=\"n\">PermissionDenied</span>\n<span class=\"kn\">from</span> <span class=\"nn\">json_tag.views</span> <span class=\"kn\">import</span> <span class=\"n\">RestView</span>\n<span class=\"kn\">from</span> <span class=\"nn\">.utils</span> <span class=\"kn\">import</span> <span class=\"n\">get_action</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">CrazyRestView</span><span class=\"p\">(</span><span class=\"n\">RestView</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">auth</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">is_superuser</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"n\">PermissionDenied</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">post</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"n\">action</span> <span class=\"o\">=</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"s1\">'action'</span><span class=\"p\">)</span>\n        <span class=\"n\">action_func</span> <span class=\"o\">=</span> <span class=\"n\">get_action</span><span class=\"p\">(</span><span class=\"n\">action</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">render_to_response</span><span class=\"p\">(</span><span class=\"n\">action_func</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">()))</span>\n</pre>\n</div>\n<div id=\"changelog\">\n<h3>Changelog</h3>\n<div id=\"id1\">\n<h4>0.0.1 (2018-04-24)</h4>\n<ul>\n<li>Rename module to json_tag</li>\n</ul>\n</div>\n<div id=\"id2\">\n<h4>0.0.0 (2018-04-24)</h4>\n<p>Initial release:</p>\n<ul>\n<li>Extracted from django-argonauts</li>\n<li><cite>{% json %}</cite> tag</li>\n<li>escape single quote</li>\n<li>fix travis tests</li>\n</ul>\n</div>\n</div>\n</div>\n\n          </div>"}, "last_serial": 3802129, "releases": {"0.0.0": [{"comment_text": "", "digests": {"md5": "0ad63d26142c5f76e2182e8ce8f049d3", "sha256": "deefc405964247161cd34b65e3d58becc076811a2066256dadccb7733759c57c"}, "downloads": -1, "filename": "django_json_tag-0.0.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "0ad63d26142c5f76e2182e8ce8f049d3", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 12597, "upload_time": "2018-04-24T09:19:36", "upload_time_iso_8601": "2018-04-24T09:19:36.677825Z", "url": "https://files.pythonhosted.org/packages/7c/de/2efe06827ce187da59b7eb42f82ac0026de51b371d72b265d2a5aaa8eb1c/django_json_tag-0.0.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4bfa8c0692ed8094acb3742c6cf406d7", "sha256": "8b33cda8efb1ee3625098e01805c0427b47502107af16a96d56cf340fc3bfb77"}, "downloads": -1, "filename": "django-json-tag-0.0.0.tar.gz", "has_sig": false, "md5_digest": "4bfa8c0692ed8094acb3742c6cf406d7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9746, "upload_time": "2018-04-24T09:19:37", "upload_time_iso_8601": "2018-04-24T09:19:37.968052Z", "url": "https://files.pythonhosted.org/packages/38/4f/bffd58f497dedad76bbb71e230126aa8a9c5bb01321af94123b052c88353/django-json-tag-0.0.0.tar.gz", "yanked": false}], "0.0.1": [{"comment_text": "", "digests": {"md5": "8127d263a7a13b8c90f4ec5ac761710d", "sha256": "dd271c24889b9493cb31ac8cfdc657a7d595d61a99fb4e6ceb4123a5e80ea118"}, "downloads": -1, "filename": "django_json_tag-0.0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "8127d263a7a13b8c90f4ec5ac761710d", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 12591, "upload_time": "2018-04-24T10:08:41", "upload_time_iso_8601": "2018-04-24T10:08:41.854031Z", "url": "https://files.pythonhosted.org/packages/d0/c1/ebe801765a3003cda1dd40c507de968c6c4e467cb20c9830c8d16b9a1413/django_json_tag-0.0.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "dbc8a50f2a5a30f55b7e52dbc4b51245", "sha256": "8bda42214143415409e41777e6187ab6faee655fe046cdd0363c9f03d923305f"}, "downloads": -1, "filename": "django-json-tag-0.0.1.tar.gz", "has_sig": false, "md5_digest": "dbc8a50f2a5a30f55b7e52dbc4b51245", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9619, "upload_time": "2018-04-24T10:08:40", "upload_time_iso_8601": "2018-04-24T10:08:40.806331Z", "url": "https://files.pythonhosted.org/packages/8c/aa/ed44baf40aac58a6897f2eb4989a29541159e32548aaf560e8ca4a2aa704/django-json-tag-0.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "8127d263a7a13b8c90f4ec5ac761710d", "sha256": "dd271c24889b9493cb31ac8cfdc657a7d595d61a99fb4e6ceb4123a5e80ea118"}, "downloads": -1, "filename": "django_json_tag-0.0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "8127d263a7a13b8c90f4ec5ac761710d", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 12591, "upload_time": "2018-04-24T10:08:41", "upload_time_iso_8601": "2018-04-24T10:08:41.854031Z", "url": "https://files.pythonhosted.org/packages/d0/c1/ebe801765a3003cda1dd40c507de968c6c4e467cb20c9830c8d16b9a1413/django_json_tag-0.0.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "dbc8a50f2a5a30f55b7e52dbc4b51245", "sha256": "8bda42214143415409e41777e6187ab6faee655fe046cdd0363c9f03d923305f"}, "downloads": -1, "filename": "django-json-tag-0.0.1.tar.gz", "has_sig": false, "md5_digest": "dbc8a50f2a5a30f55b7e52dbc4b51245", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9619, "upload_time": "2018-04-24T10:08:40", "upload_time_iso_8601": "2018-04-24T10:08:40.806331Z", "url": "https://files.pythonhosted.org/packages/8c/aa/ed44baf40aac58a6897f2eb4989a29541159e32548aaf560e8ca4a2aa704/django-json-tag-0.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:35:28 2020"}