{"info": {"author": "Mark Vartanyan", "author_email": "kolypto@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python :: 2", "Programming Language :: Python :: 3", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "[![Build Status](https://api.travis-ci.org/kolypto/py-mailem.png?branch=master)](https://travis-ci.org/kolypto/py-mailem)\n[![Pythons](https://img.shields.io/badge/python-2.7%20%7C%203.4%E2%80%933.8%20%7C%20pypy-blue.svg)](.travis.yml)\n\n\n\n\n\n\n\nMail'Em\n=======\n\nSlim, flexible, yet full-featured e-mailing library.\n\n* Unicode\n* Easy attachments\n* Inline images\n* E-Mail templates\n* Tools for unit-tests\n* Made perfect once and for all. Simple and cute :)\n\nHere'a a full example:\n\n```python\nfrom mailem import Message, Postman, Attachment, ImageAttachment\nfrom mailem.connection import SMTPConnection\n\n# Create the message\nmessages = [\n    # Message with attachments\n    Message(\n        ['kolypto@gmail.com'],\n        u\"Mail'em test\",\n        u\"<b>yeah baby, it works!</b>\",\n        attachments = [\n            Attachment(u'test.txt', open('test.txt').read())\n        ]\n    ),\n    # Message with inline images (!)\n    Message(\n        ['kolypto@gmail.com'],\n        u\"Mail'em test with inline images\",\n        u\"Cute: <img src='cid:cute.jpg' />\",  # cid:<filename>\n        attachments = [\n            ImageAttachment('cute.jpg', open('cute.jpg').read(), 'inline')\n        ]\n    ),\n]\n\n# Initialize a postman with SMTP connection to GMail\npostman = Postman('user@gmail.com',\n                  SMTPConnection(\n                      'smtp.gmail.com', 587,\n                      'user@gmail.com', 'pass',\n                      tls=True\n                  ))\n\n# Send everything we have\nwith postman.connect() as c:\n    map(c.sendmail, messages)\n```\n\nAlso see [Template](#template).\n\n\n\nTable of Contents\n=================\n\n* <a href=\"#sending-messages\">Sending Messages</a>\n    * <a href=\"#message\">Message</a>\n        * <a href=\"#attachment\">Attachment</a>\n        * <a href=\"#imageattachment\">ImageAttachment</a>\n    * <a href=\"#postman\">Postman</a>\n        * <a href=\"#postmanconnect\">Postman.connect</a>\n        * <a href=\"#postmanloopback\">Postman.loopback</a>\n    * <a href=\"#connection\">Connection</a>\n        * <a href=\"#smtpconnection\">SMTPConnection</a>\n        * <a href=\"#loopbackconnection\">LoopbackConnection</a>\n* <a href=\"#templating\">Templating</a>\n    * <a href=\"#template\">Template</a>\n        * <a href=\"#templateset_renderer\">Template.set_renderer</a>\n        * <a href=\"#templatedefaults\">Template.defaults</a>\n        * <a href=\"#templatecall\">Template.call</a>\n        * <a href=\"#templatefrom_directory\">Template.from_directory</a>\n    * <a href=\"#templateregistry\">TemplateRegistry</a>\n        * <a href=\"#templateregistryadd\">TemplateRegistry.add</a>\n        * <a href=\"#templateregistryset_renderer\">TemplateRegistry.set_renderer</a>\n        * <a href=\"#templateregistrydefaults\">TemplateRegistry.defaults</a>\n        * <a href=\"#templateregistryget\">TemplateRegistry.get</a>\n        * <a href=\"#templateregistryfrom_directory\">TemplateRegistry.from_directory</a> \n\nSending Messages\n================\n\nMessage\n----------------------\n```python\nMessage(recipients, subject, html=None,\n        text=None, sender=None, cc=None,\n        bcc=None, attachments=None,\n        reply_to=None, date=None, headers=None)\n```\n\nConstruct a Message object.\n\nNotes:\n\n* Full unicode support, and Unicode is the default\n* You can provide `html` or `text` contents. If both are specified -- the message will have an 'alternative' container,\n  so the user will receive both HTML and plaintext. The client will choose which one to display.\n* E-Mail addresses, such as `recipients` and `sender`, can be specified in one of the following formats:\n\n    * `'user@example.com'`: Just an e-mail address\n    * `('user@example.com', u'Honored User')`: email address with name\n\nArguments:\n\n* `recipients`: List of recipients\n* `subject`: Message subject\n* `html`: Message body, HTML\n* `text`: Message body, Text\n* `sender`: Sender e-mail address. If not set explicitly, the default will be used on send\n* `cc`: CC list\n* `bcc`: BCC list\n* `attachments`: List of attachments\n* `reply_to`: Reply-to address\n* `date`: Send date\n* `headers`: Additional headers\n\n\n### Attachment\n```python\nAttachment(filename, data,\n           content_type='application/octet-stream',\n           disposition='attachment', headers=None)\n```\n\nFile attachment information.\n\nThis can be provided to the [`Message`](#message) object on construction.\n\n* `filename`: Filename of attachment\n* `data`: Raw file data\n* `content_type`: File mimetype\n* `disposition`: Content-Disposition: 'attachment', 'inline', ...\n* `headers`: Additional headers for the attachment\n\n\n### ImageAttachment\n```python\nImageAttachment(filename, data,\n                disposition='attachment', headers=None)\n```\n\nImage attachment.\n\n* It guesses the Content-Type from the data stream\n* Supports 'inline' images: images embedded in the email. Useful for templates.\n\n    Once an 'inline' image is created, its filename is used for 'Content-ID', which allows to reference it in the HTML body:\n\n    ```python\n    from mailem import Message, Attachment, ImageAttachment\n\n    msg = Message(\n        ['test@example.com'],\n        'Hello',\n        '<img src=\"cid:flowers.jpg\" />',  # Referenced with \"cid:<filename>\"\n        attachments=[\n            ImageAttachment('flowers.jpg', open('flowers.jpg').read(), 'inline')\n        ]\n    )\n    ```\n\nArguments:\n\n* `filename`: Image attachment filename. Will also become 'Content-ID' when inlined.\n* `data`: The raw file data\n\n\n\n\nPostman\n----------------------\n```python\nPostman(sender, connection)\n```\n\nPostman is the object you use to send messages through a configured Connection object.\n\nExample:\n\n```python\nfrom mailem import Message, Postman\nfrom mailem.connection import SMTPConnection\n\n# Construct the message\nmsg = Message(\n    ['kolypto@gmail.com'],\n    u\"Mail'em test\",\n    u\"<b>yeah baby, it works!</b>\"\n)\n\n# Create the postman (see SMTPConnection)\npostman = Postman('user@gmail.com',\n                  SMTPConnection(...))\n\n# Connect, and send the message\nwith postman.connect() as c:\n    c.sendmail(msg)\n```\n\n* `sender`: Default sender: e-mail or (name, email).\n    Is used for messages which do not specify the sender address explicitly.\n* `connection`: Connection object to use. See below.\n\n\n### Postman.connect\n```python\nconnect()\n```\n\nGet connected Postman context manager.\n\n\nReturns: `mailem.postman.ConnectedPostman` \n\n### Postman.loopback\n```python\nloopback()\n```\n\nGet a context manager which installs a LoopbackConnection on this postman.\n\nThis allows you to record outgoing messages by mocking a Postman.\nSee [`LoopbackConnection`](#loopbackconnection).\n\n\nReturns: `MockedPostman` Context manager which loops back outgoing messages\n\nConnection\n----------\n\nConnection object represents a connection to a service which can send e-mail messages for us.\n\n### SMTPConnection\n```python\nSMTPConnection(host, port, username,\n               password, local_hostname=None,\n               ssl=False, tls=False)\n```\n\nSMTP connection.\n\nSee [smtplib](https://docs.python.org/2/library/smtplib.html) for the list of exceptions that may occur.\n\nExample:\n\n```python\nfrom mailem import Postman\nfrom mailem.connection import SMTPConnection\n\npostman = Postman('user@gmail.com',\n              SMTPConnection(\n                  'smtp.gmail.com', 587,\n                  'user@gmail.com', 'pass',\n                  tls=True\n              ))\n\nwith postman.connect() as c:\n    c.sendmail(msg)\n```\n\nArguments:\n\n* `host`: SMTP server hostname\n* `port`: SMTP server port number.\n* `username`: User name to authenticate with\n* `password`: Password\n* `local_hostname`: FQDN of the local host for the HELO/EHLO command. When `None`, is detected automatically.\n* `ssl`: Use SSL protocol?\n* `tls`: Use TLS handshake?\n\n\n### LoopbackConnection\n```python\nLoopbackConnection()\n```\n\nLoopback connection allows to record all outgoing messages instead of sending them.\n\nYou can install it manually:\n\n```python\nfrom mailem import Postman\nfrom mailem.connection import LoopbackConnection\n\nlo = LoopbackConnection()\npostman = Postman('user@example.com', lo)\n#... send\nmessages = lo.get_messages()\n```\n\nor you can mock an existing Postman with `loopback()` helper:\n\n```python\nfrom mailem import Postman\nfrom mailem.connection import SMTPConnection\n\npostman = Postman('user@example.com',\n              SMTPConnection(...))\n\nwith postman.loopback() as lo:\n    # Send\n    with postman.connect() as c:  # mocked!\n        c.sendmail(msg)\n\n# Get\nsent_messages = lo.get_messages()\n```\n\nLoopback can be installed multiple times, and only top-level loopback will catch the messages:\n\n```python\nwith postman.loopback() as lo1:\n    with postman.loopback() as lo2:\n        with postman.connect() as c:\n            c.sendmail(msg)\n\nlen(lo1)  #-> 0\nlen(lo2)  #-> 1\n```\n\nAlso note that `LoopbackConnection` subclasses `list`, so all list methods, including iteration, is available.\n\n\n\n\n\nTemplating\n==========\n\nTemplate\n--------\n```python\nTemplate(subject=None, html=None,\n         text=None, attachments=None,\n         defaults=None)\n```\n\nA templated e-mail.\n\nBy default, the Template uses Python's `Template` renderer, which allows simple PHP-style substitution,\nbut this can be overridden using set_renderer().\n\nFirst, a template is defined:\n\n```python\nfrom mailem import Attachment\nfrom mailem.template import Template\n\nsignup = Template('Congrats $user, you've signed up!',\n    'Welcome to our website!<br><img src=\"cid:logo.jpg\" /> -- $domain',\n    attachments=[\n        Attachment('logo.jpg', open('logo.jpg').read(), 'inline'))\n    ],\n    defaults={'domain': 'localhost'}  # default template values\n)\n```\n\nNow, having the template, you render it to a [`Message`](#message) by calling it:\n\n```python\nmessage = signup(['user@gmail.com'], dict(user='Honored User',))\n```\n\nReady for sending! :)\n\n* `subject`: Message subject template\n* `html`: HTML message template, if any\n* `text`: Text message template, if any\n* `attachments`: Attachments for the template. Most probably, inline elements.\n* `defaults`: Default template values, if required. The user can override these later.\n\n\n### Template.set_renderer\n```python\nset_renderer(Renderer, **kwargs)\n```\n\nSet renderer to be used with this template.\n\nA Renderer is any class that can be constructed with a template string argument,\nand called with template values dict to render it.\n\nWhen no renderer was explicitly set, it defaults to PythonTemplateRenderer.\n\nSee [mailem/template/renderer.py](mailem/template/renderer.py): it's easy to implement renderers with custom behavior!\n\n* `Renderer`: Renderer class.\n* `**kwargs`: Additional arguments to renderer, if supported\n\n\n\n### Template.defaults\n```python\ndefaults(values)\n```\n\nSet default values.\n\nNew values will overwrite the previous.\n\n* `values`: Default template values\n\n\n\n### Template.__call__\n```python\n__call__(recipients, values, **kwargs)\n```\n\nCreate a `Message` object using the template values.\n\n* `recipients`: Message recipients list\n* `values`: Dictionary with template values\n* `**kwargs`: keyword arguments for the [`Message`](#message) constructor\n\nReturns: `Message` The rendered `Message` object\n\n### Template.from_directory\n```python\nfrom_directory(path,\n               subject_name='subject.txt',\n               html_name='index.htm',\n               text_name='index.txt',\n               inline_rex='^i-(.*)')\n```\n\nConvenience class method to import a directory as a template:\n\n* `subject.txt` is the subject string template\n* `index.htm` is the HTML template\n* `index.txt` is the plaintext template\n* All files matching the 'i-(*)' format are attached as 'inline', and hence can be referenced in the template:\n\n    E.g. file 'i-flower.jpg' can be inlined as `<img src=\"cid:flower.jpg\" />`.\n\n* All other files are just attachments.\n\nExample:\n\n```python\nsignup = Template.from_directory('templates/signup/')\n```\n\n* `path`: Path to the directory\n* `subject_name`: Subject template filename\n* `html_name`: Html template filename\n* `text_name`: Plaintext template filename\n* `inline_rex`: Regular expression to match files that should be inlined.\n\n    If the RegExp defines capture groups, group $1 will be used as the fact filename.\n\nReturns: `Template` Template\n\nTemplateRegistry\n----------------\n\n```python\nTemplateRegistry()\n```\n\nE-Mail template registry.\n\nSimply contains all your templates and allows to render these by name.\nUseful if you have multiple templates in your app and want to have them prepared.\n\nInitially, the registry is empty, and you add [`Template`](#template) objects one by one:\n\n```python\nfrom mailem.template import Template, TemplateRegistry\n\ntemplates = TemplateRegistry()\ntemplates.add('signup', Template(\n            'Congrats $user, you've signed up!',\n           'Welcome to our website!<br> -- $domain',\n))\ntemplates.defaults(dict(domain='example.com'))  # set defaults on all templates\n```\n\nAlternatively, you can use [`TemplateRegistry.from_directory()`](#templateregistryfrom_directory) to load templates\nfrom filesystem.\n\nNow, to render a template, you [`get()`](#templateregistryget) it by name:\n\n```python\nmsg = templates.get('signup')(['user@gmail.com'], dict(user='Honored User',))\n```\n\n\n\n### TemplateRegistry.add\n```python\nadd(name, template)\n```\n\nRegister a template\n\n\n* `template`: Template object\n\nReturns: `mailem.template.Template` The added template (in case you want to set something on it)\n\n### TemplateRegistry.set_renderer\n```python\nset_renderer(renderer, **kwargs)\n```\n\nSet renderer to be used with all templates.\n\nCan be called both before adding templates and after.\n\n* `renderer`: Renderer class to use\n* `**kwargs`: Additional arguments for the renderer\n\n\n\n### TemplateRegistry.defaults\n```python\ndefaults(values)\n```\n\nSet default values on all templates.\n\nNew values will overwrite the previous.\n\nCan be called both before adding templates and after.\n\n* `values`: Default template values\n\n\n\n### TemplateRegistry.get\n```python\nget(name)\n```\n\nGet a Template by name\n\n* `name`: Template name\n\nReturns: `mailem.template.Template` \n\n### TemplateRegistry.from_directory\n```python\nfrom_directory(path, **kwargs)\n```\n\nConvenience method to construct a template registry\nwith a directory where each template is in a subdirectory\n\n* `path`: Path to templates\n* `**kwargs`: Arguments to [Template.from_directory()](#templatefrom_directory), if required\n\nReturns: `mailem.template.registry.TemplateRegistry` \n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/kolypto/py-mailem", "keywords": "e-mail,mail,template", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "mailem", "package_url": "https://pypi.org/project/mailem/", "platform": "any", "project_url": "https://pypi.org/project/mailem/", "project_urls": {"Homepage": "https://github.com/kolypto/py-mailem"}, "release_url": "https://pypi.org/project/mailem/0.0.5/", "requires_dist": ["future"], "requires_python": "", "summary": "Slim, flexible, yet full-featured e-mailing library", "version": "0.0.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://travis-ci.org/kolypto/py-mailem\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6f325bf70b7df9a57b8a487fe3a24acda055dc27/68747470733a2f2f6170692e7472617669732d63692e6f72672f6b6f6c7970746f2f70792d6d61696c656d2e706e673f6272616e63683d6d6173746572\"></a>\n<a href=\".travis.yml\" rel=\"nofollow\"><img alt=\"Pythons\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/81acc19a53db7180d4b0d99410efccb7d771233b/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f707974686f6e2d322e37253230253743253230332e34254532253830253933332e38253230253743253230707970792d626c75652e737667\"></a></p>\n<h1>Mail'Em</h1>\n<p>Slim, flexible, yet full-featured e-mailing library.</p>\n<ul>\n<li>Unicode</li>\n<li>Easy attachments</li>\n<li>Inline images</li>\n<li>E-Mail templates</li>\n<li>Tools for unit-tests</li>\n<li>Made perfect once and for all. Simple and cute :)</li>\n</ul>\n<p>Here'a a full example:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">mailem</span> <span class=\"kn\">import</span> <span class=\"n\">Message</span><span class=\"p\">,</span> <span class=\"n\">Postman</span><span class=\"p\">,</span> <span class=\"n\">Attachment</span><span class=\"p\">,</span> <span class=\"n\">ImageAttachment</span>\n<span class=\"kn\">from</span> <span class=\"nn\">mailem.connection</span> <span class=\"kn\">import</span> <span class=\"n\">SMTPConnection</span>\n\n<span class=\"c1\"># Create the message</span>\n<span class=\"n\">messages</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"c1\"># Message with attachments</span>\n    <span class=\"n\">Message</span><span class=\"p\">(</span>\n        <span class=\"p\">[</span><span class=\"s1\">'kolypto@gmail.com'</span><span class=\"p\">],</span>\n        <span class=\"sa\">u</span><span class=\"s2\">\"Mail'em test\"</span><span class=\"p\">,</span>\n        <span class=\"sa\">u</span><span class=\"s2\">\"&lt;b&gt;yeah baby, it works!&lt;/b&gt;\"</span><span class=\"p\">,</span>\n        <span class=\"n\">attachments</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n            <span class=\"n\">Attachment</span><span class=\"p\">(</span><span class=\"sa\">u</span><span class=\"s1\">'test.txt'</span><span class=\"p\">,</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'test.txt'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">())</span>\n        <span class=\"p\">]</span>\n    <span class=\"p\">),</span>\n    <span class=\"c1\"># Message with inline images (!)</span>\n    <span class=\"n\">Message</span><span class=\"p\">(</span>\n        <span class=\"p\">[</span><span class=\"s1\">'kolypto@gmail.com'</span><span class=\"p\">],</span>\n        <span class=\"sa\">u</span><span class=\"s2\">\"Mail'em test with inline images\"</span><span class=\"p\">,</span>\n        <span class=\"sa\">u</span><span class=\"s2\">\"Cute: &lt;img src='cid:cute.jpg' /&gt;\"</span><span class=\"p\">,</span>  <span class=\"c1\"># cid:&lt;filename&gt;</span>\n        <span class=\"n\">attachments</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n            <span class=\"n\">ImageAttachment</span><span class=\"p\">(</span><span class=\"s1\">'cute.jpg'</span><span class=\"p\">,</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'cute.jpg'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(),</span> <span class=\"s1\">'inline'</span><span class=\"p\">)</span>\n        <span class=\"p\">]</span>\n    <span class=\"p\">),</span>\n<span class=\"p\">]</span>\n\n<span class=\"c1\"># Initialize a postman with SMTP connection to GMail</span>\n<span class=\"n\">postman</span> <span class=\"o\">=</span> <span class=\"n\">Postman</span><span class=\"p\">(</span><span class=\"s1\">'user@gmail.com'</span><span class=\"p\">,</span>\n                  <span class=\"n\">SMTPConnection</span><span class=\"p\">(</span>\n                      <span class=\"s1\">'smtp.gmail.com'</span><span class=\"p\">,</span> <span class=\"mi\">587</span><span class=\"p\">,</span>\n                      <span class=\"s1\">'user@gmail.com'</span><span class=\"p\">,</span> <span class=\"s1\">'pass'</span><span class=\"p\">,</span>\n                      <span class=\"n\">tls</span><span class=\"o\">=</span><span class=\"kc\">True</span>\n                  <span class=\"p\">))</span>\n\n<span class=\"c1\"># Send everything we have</span>\n<span class=\"k\">with</span> <span class=\"n\">postman</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">c</span><span class=\"p\">:</span>\n    <span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">sendmail</span><span class=\"p\">,</span> <span class=\"n\">messages</span><span class=\"p\">)</span>\n</pre>\n<p>Also see <a href=\"#template\" rel=\"nofollow\">Template</a>.</p>\n<h1>Table of Contents</h1>\n<ul>\n<li><a href=\"#sending-messages\" rel=\"nofollow\">Sending Messages</a>\n<ul>\n<li><a href=\"#message\" rel=\"nofollow\">Message</a>\n<ul>\n<li><a href=\"#attachment\" rel=\"nofollow\">Attachment</a></li>\n<li><a href=\"#imageattachment\" rel=\"nofollow\">ImageAttachment</a></li>\n</ul>\n</li>\n<li><a href=\"#postman\" rel=\"nofollow\">Postman</a>\n<ul>\n<li><a href=\"#postmanconnect\" rel=\"nofollow\">Postman.connect</a></li>\n<li><a href=\"#postmanloopback\" rel=\"nofollow\">Postman.loopback</a></li>\n</ul>\n</li>\n<li><a href=\"#connection\" rel=\"nofollow\">Connection</a>\n<ul>\n<li><a href=\"#smtpconnection\" rel=\"nofollow\">SMTPConnection</a></li>\n<li><a href=\"#loopbackconnection\" rel=\"nofollow\">LoopbackConnection</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#templating\" rel=\"nofollow\">Templating</a>\n<ul>\n<li><a href=\"#template\" rel=\"nofollow\">Template</a>\n<ul>\n<li><a href=\"#templateset_renderer\" rel=\"nofollow\">Template.set_renderer</a></li>\n<li><a href=\"#templatedefaults\" rel=\"nofollow\">Template.defaults</a></li>\n<li><a href=\"#templatecall\" rel=\"nofollow\">Template.call</a></li>\n<li><a href=\"#templatefrom_directory\" rel=\"nofollow\">Template.from_directory</a></li>\n</ul>\n</li>\n<li><a href=\"#templateregistry\" rel=\"nofollow\">TemplateRegistry</a>\n<ul>\n<li><a href=\"#templateregistryadd\" rel=\"nofollow\">TemplateRegistry.add</a></li>\n<li><a href=\"#templateregistryset_renderer\" rel=\"nofollow\">TemplateRegistry.set_renderer</a></li>\n<li><a href=\"#templateregistrydefaults\" rel=\"nofollow\">TemplateRegistry.defaults</a></li>\n<li><a href=\"#templateregistryget\" rel=\"nofollow\">TemplateRegistry.get</a></li>\n<li><a href=\"#templateregistryfrom_directory\" rel=\"nofollow\">TemplateRegistry.from_directory</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h1>Sending Messages</h1>\n<h2>Message</h2>\n<pre><span class=\"n\">Message</span><span class=\"p\">(</span><span class=\"n\">recipients</span><span class=\"p\">,</span> <span class=\"n\">subject</span><span class=\"p\">,</span> <span class=\"n\">html</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">text</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">sender</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">cc</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">bcc</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">attachments</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">reply_to</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">date</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">headers</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n</pre>\n<p>Construct a Message object.</p>\n<p>Notes:</p>\n<ul>\n<li>\n<p>Full unicode support, and Unicode is the default</p>\n</li>\n<li>\n<p>You can provide <code>html</code> or <code>text</code> contents. If both are specified -- the message will have an 'alternative' container,\nso the user will receive both HTML and plaintext. The client will choose which one to display.</p>\n</li>\n<li>\n<p>E-Mail addresses, such as <code>recipients</code> and <code>sender</code>, can be specified in one of the following formats:</p>\n<ul>\n<li><code>'user@example.com'</code>: Just an e-mail address</li>\n<li><code>('user@example.com', u'Honored User')</code>: email address with name</li>\n</ul>\n</li>\n</ul>\n<p>Arguments:</p>\n<ul>\n<li><code>recipients</code>: List of recipients</li>\n<li><code>subject</code>: Message subject</li>\n<li><code>html</code>: Message body, HTML</li>\n<li><code>text</code>: Message body, Text</li>\n<li><code>sender</code>: Sender e-mail address. If not set explicitly, the default will be used on send</li>\n<li><code>cc</code>: CC list</li>\n<li><code>bcc</code>: BCC list</li>\n<li><code>attachments</code>: List of attachments</li>\n<li><code>reply_to</code>: Reply-to address</li>\n<li><code>date</code>: Send date</li>\n<li><code>headers</code>: Additional headers</li>\n</ul>\n<h3>Attachment</h3>\n<pre><span class=\"n\">Attachment</span><span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">,</span>\n           <span class=\"n\">content_type</span><span class=\"o\">=</span><span class=\"s1\">'application/octet-stream'</span><span class=\"p\">,</span>\n           <span class=\"n\">disposition</span><span class=\"o\">=</span><span class=\"s1\">'attachment'</span><span class=\"p\">,</span> <span class=\"n\">headers</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n</pre>\n<p>File attachment information.</p>\n<p>This can be provided to the <a href=\"#message\" rel=\"nofollow\"><code>Message</code></a> object on construction.</p>\n<ul>\n<li><code>filename</code>: Filename of attachment</li>\n<li><code>data</code>: Raw file data</li>\n<li><code>content_type</code>: File mimetype</li>\n<li><code>disposition</code>: Content-Disposition: 'attachment', 'inline', ...</li>\n<li><code>headers</code>: Additional headers for the attachment</li>\n</ul>\n<h3>ImageAttachment</h3>\n<pre><span class=\"n\">ImageAttachment</span><span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">,</span>\n                <span class=\"n\">disposition</span><span class=\"o\">=</span><span class=\"s1\">'attachment'</span><span class=\"p\">,</span> <span class=\"n\">headers</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n</pre>\n<p>Image attachment.</p>\n<ul>\n<li>\n<p>It guesses the Content-Type from the data stream</p>\n</li>\n<li>\n<p>Supports 'inline' images: images embedded in the email. Useful for templates.</p>\n<p>Once an 'inline' image is created, its filename is used for 'Content-ID', which allows to reference it in the HTML body:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">mailem</span> <span class=\"kn\">import</span> <span class=\"n\">Message</span><span class=\"p\">,</span> <span class=\"n\">Attachment</span><span class=\"p\">,</span> <span class=\"n\">ImageAttachment</span>\n\n<span class=\"n\">msg</span> <span class=\"o\">=</span> <span class=\"n\">Message</span><span class=\"p\">(</span>\n    <span class=\"p\">[</span><span class=\"s1\">'test@example.com'</span><span class=\"p\">],</span>\n    <span class=\"s1\">'Hello'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'&lt;img src=\"cid:flowers.jpg\" /&gt;'</span><span class=\"p\">,</span>  <span class=\"c1\"># Referenced with \"cid:&lt;filename&gt;\"</span>\n    <span class=\"n\">attachments</span><span class=\"o\">=</span><span class=\"p\">[</span>\n        <span class=\"n\">ImageAttachment</span><span class=\"p\">(</span><span class=\"s1\">'flowers.jpg'</span><span class=\"p\">,</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'flowers.jpg'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(),</span> <span class=\"s1\">'inline'</span><span class=\"p\">)</span>\n    <span class=\"p\">]</span>\n<span class=\"p\">)</span>\n</pre>\n</li>\n</ul>\n<p>Arguments:</p>\n<ul>\n<li><code>filename</code>: Image attachment filename. Will also become 'Content-ID' when inlined.</li>\n<li><code>data</code>: The raw file data</li>\n</ul>\n<h2>Postman</h2>\n<pre><span class=\"n\">Postman</span><span class=\"p\">(</span><span class=\"n\">sender</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">)</span>\n</pre>\n<p>Postman is the object you use to send messages through a configured Connection object.</p>\n<p>Example:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">mailem</span> <span class=\"kn\">import</span> <span class=\"n\">Message</span><span class=\"p\">,</span> <span class=\"n\">Postman</span>\n<span class=\"kn\">from</span> <span class=\"nn\">mailem.connection</span> <span class=\"kn\">import</span> <span class=\"n\">SMTPConnection</span>\n\n<span class=\"c1\"># Construct the message</span>\n<span class=\"n\">msg</span> <span class=\"o\">=</span> <span class=\"n\">Message</span><span class=\"p\">(</span>\n    <span class=\"p\">[</span><span class=\"s1\">'kolypto@gmail.com'</span><span class=\"p\">],</span>\n    <span class=\"sa\">u</span><span class=\"s2\">\"Mail'em test\"</span><span class=\"p\">,</span>\n    <span class=\"sa\">u</span><span class=\"s2\">\"&lt;b&gt;yeah baby, it works!&lt;/b&gt;\"</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\"># Create the postman (see SMTPConnection)</span>\n<span class=\"n\">postman</span> <span class=\"o\">=</span> <span class=\"n\">Postman</span><span class=\"p\">(</span><span class=\"s1\">'user@gmail.com'</span><span class=\"p\">,</span>\n                  <span class=\"n\">SMTPConnection</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># Connect, and send the message</span>\n<span class=\"k\">with</span> <span class=\"n\">postman</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">c</span><span class=\"p\">:</span>\n    <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">sendmail</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li><code>sender</code>: Default sender: e-mail or (name, email).\nIs used for messages which do not specify the sender address explicitly.</li>\n<li><code>connection</code>: Connection object to use. See below.</li>\n</ul>\n<h3>Postman.connect</h3>\n<pre><span class=\"n\">connect</span><span class=\"p\">()</span>\n</pre>\n<p>Get connected Postman context manager.</p>\n<p>Returns: <code>mailem.postman.ConnectedPostman</code></p>\n<h3>Postman.loopback</h3>\n<pre><span class=\"n\">loopback</span><span class=\"p\">()</span>\n</pre>\n<p>Get a context manager which installs a LoopbackConnection on this postman.</p>\n<p>This allows you to record outgoing messages by mocking a Postman.\nSee <a href=\"#loopbackconnection\" rel=\"nofollow\"><code>LoopbackConnection</code></a>.</p>\n<p>Returns: <code>MockedPostman</code> Context manager which loops back outgoing messages</p>\n<h2>Connection</h2>\n<p>Connection object represents a connection to a service which can send e-mail messages for us.</p>\n<h3>SMTPConnection</h3>\n<pre><span class=\"n\">SMTPConnection</span><span class=\"p\">(</span><span class=\"n\">host</span><span class=\"p\">,</span> <span class=\"n\">port</span><span class=\"p\">,</span> <span class=\"n\">username</span><span class=\"p\">,</span>\n               <span class=\"n\">password</span><span class=\"p\">,</span> <span class=\"n\">local_hostname</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n               <span class=\"n\">ssl</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">tls</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n</pre>\n<p>SMTP connection.</p>\n<p>See <a href=\"https://docs.python.org/2/library/smtplib.html\" rel=\"nofollow\">smtplib</a> for the list of exceptions that may occur.</p>\n<p>Example:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">mailem</span> <span class=\"kn\">import</span> <span class=\"n\">Postman</span>\n<span class=\"kn\">from</span> <span class=\"nn\">mailem.connection</span> <span class=\"kn\">import</span> <span class=\"n\">SMTPConnection</span>\n\n<span class=\"n\">postman</span> <span class=\"o\">=</span> <span class=\"n\">Postman</span><span class=\"p\">(</span><span class=\"s1\">'user@gmail.com'</span><span class=\"p\">,</span>\n              <span class=\"n\">SMTPConnection</span><span class=\"p\">(</span>\n                  <span class=\"s1\">'smtp.gmail.com'</span><span class=\"p\">,</span> <span class=\"mi\">587</span><span class=\"p\">,</span>\n                  <span class=\"s1\">'user@gmail.com'</span><span class=\"p\">,</span> <span class=\"s1\">'pass'</span><span class=\"p\">,</span>\n                  <span class=\"n\">tls</span><span class=\"o\">=</span><span class=\"kc\">True</span>\n              <span class=\"p\">))</span>\n\n<span class=\"k\">with</span> <span class=\"n\">postman</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">c</span><span class=\"p\">:</span>\n    <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">sendmail</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">)</span>\n</pre>\n<p>Arguments:</p>\n<ul>\n<li><code>host</code>: SMTP server hostname</li>\n<li><code>port</code>: SMTP server port number.</li>\n<li><code>username</code>: User name to authenticate with</li>\n<li><code>password</code>: Password</li>\n<li><code>local_hostname</code>: FQDN of the local host for the HELO/EHLO command. When <code>None</code>, is detected automatically.</li>\n<li><code>ssl</code>: Use SSL protocol?</li>\n<li><code>tls</code>: Use TLS handshake?</li>\n</ul>\n<h3>LoopbackConnection</h3>\n<pre><span class=\"n\">LoopbackConnection</span><span class=\"p\">()</span>\n</pre>\n<p>Loopback connection allows to record all outgoing messages instead of sending them.</p>\n<p>You can install it manually:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">mailem</span> <span class=\"kn\">import</span> <span class=\"n\">Postman</span>\n<span class=\"kn\">from</span> <span class=\"nn\">mailem.connection</span> <span class=\"kn\">import</span> <span class=\"n\">LoopbackConnection</span>\n\n<span class=\"n\">lo</span> <span class=\"o\">=</span> <span class=\"n\">LoopbackConnection</span><span class=\"p\">()</span>\n<span class=\"n\">postman</span> <span class=\"o\">=</span> <span class=\"n\">Postman</span><span class=\"p\">(</span><span class=\"s1\">'user@example.com'</span><span class=\"p\">,</span> <span class=\"n\">lo</span><span class=\"p\">)</span>\n<span class=\"c1\">#... send</span>\n<span class=\"n\">messages</span> <span class=\"o\">=</span> <span class=\"n\">lo</span><span class=\"o\">.</span><span class=\"n\">get_messages</span><span class=\"p\">()</span>\n</pre>\n<p>or you can mock an existing Postman with <code>loopback()</code> helper:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">mailem</span> <span class=\"kn\">import</span> <span class=\"n\">Postman</span>\n<span class=\"kn\">from</span> <span class=\"nn\">mailem.connection</span> <span class=\"kn\">import</span> <span class=\"n\">SMTPConnection</span>\n\n<span class=\"n\">postman</span> <span class=\"o\">=</span> <span class=\"n\">Postman</span><span class=\"p\">(</span><span class=\"s1\">'user@example.com'</span><span class=\"p\">,</span>\n              <span class=\"n\">SMTPConnection</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">))</span>\n\n<span class=\"k\">with</span> <span class=\"n\">postman</span><span class=\"o\">.</span><span class=\"n\">loopback</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">lo</span><span class=\"p\">:</span>\n    <span class=\"c1\"># Send</span>\n    <span class=\"k\">with</span> <span class=\"n\">postman</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">c</span><span class=\"p\">:</span>  <span class=\"c1\"># mocked!</span>\n        <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">sendmail</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Get</span>\n<span class=\"n\">sent_messages</span> <span class=\"o\">=</span> <span class=\"n\">lo</span><span class=\"o\">.</span><span class=\"n\">get_messages</span><span class=\"p\">()</span>\n</pre>\n<p>Loopback can be installed multiple times, and only top-level loopback will catch the messages:</p>\n<pre><span class=\"k\">with</span> <span class=\"n\">postman</span><span class=\"o\">.</span><span class=\"n\">loopback</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">lo1</span><span class=\"p\">:</span>\n    <span class=\"k\">with</span> <span class=\"n\">postman</span><span class=\"o\">.</span><span class=\"n\">loopback</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">lo2</span><span class=\"p\">:</span>\n        <span class=\"k\">with</span> <span class=\"n\">postman</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">c</span><span class=\"p\">:</span>\n            <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">sendmail</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">)</span>\n\n<span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">lo1</span><span class=\"p\">)</span>  <span class=\"c1\">#-&gt; 0</span>\n<span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">lo2</span><span class=\"p\">)</span>  <span class=\"c1\">#-&gt; 1</span>\n</pre>\n<p>Also note that <code>LoopbackConnection</code> subclasses <code>list</code>, so all list methods, including iteration, is available.</p>\n<h1>Templating</h1>\n<h2>Template</h2>\n<pre><span class=\"n\">Template</span><span class=\"p\">(</span><span class=\"n\">subject</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">html</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n         <span class=\"n\">text</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">attachments</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n         <span class=\"n\">defaults</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n</pre>\n<p>A templated e-mail.</p>\n<p>By default, the Template uses Python's <code>Template</code> renderer, which allows simple PHP-style substitution,\nbut this can be overridden using set_renderer().</p>\n<p>First, a template is defined:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">mailem</span> <span class=\"kn\">import</span> <span class=\"n\">Attachment</span>\n<span class=\"kn\">from</span> <span class=\"nn\">mailem.template</span> <span class=\"kn\">import</span> <span class=\"n\">Template</span>\n\n<span class=\"n\">signup</span> <span class=\"o\">=</span> <span class=\"n\">Template</span><span class=\"p\">(</span><span class=\"s1\">'Congrats $user, you'</span><span class=\"n\">ve</span> <span class=\"n\">signed</span> <span class=\"n\">up</span><span class=\"err\">!</span><span class=\"s1\">',</span>\n    <span class=\"s1\">'Welcome to our website!&lt;br&gt;&lt;img src=\"cid:logo.jpg\" /&gt; -- $domain'</span><span class=\"p\">,</span>\n    <span class=\"n\">attachments</span><span class=\"o\">=</span><span class=\"p\">[</span>\n        <span class=\"n\">Attachment</span><span class=\"p\">(</span><span class=\"s1\">'logo.jpg'</span><span class=\"p\">,</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'logo.jpg'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(),</span> <span class=\"s1\">'inline'</span><span class=\"p\">))</span>\n    <span class=\"p\">],</span>\n    <span class=\"n\">defaults</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'domain'</span><span class=\"p\">:</span> <span class=\"s1\">'localhost'</span><span class=\"p\">}</span>  <span class=\"c1\"># default template values</span>\n<span class=\"p\">)</span>\n</pre>\n<p>Now, having the template, you render it to a <a href=\"#message\" rel=\"nofollow\"><code>Message</code></a> by calling it:</p>\n<pre><span class=\"n\">message</span> <span class=\"o\">=</span> <span class=\"n\">signup</span><span class=\"p\">([</span><span class=\"s1\">'user@gmail.com'</span><span class=\"p\">],</span> <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"o\">=</span><span class=\"s1\">'Honored User'</span><span class=\"p\">,))</span>\n</pre>\n<p>Ready for sending! :)</p>\n<ul>\n<li><code>subject</code>: Message subject template</li>\n<li><code>html</code>: HTML message template, if any</li>\n<li><code>text</code>: Text message template, if any</li>\n<li><code>attachments</code>: Attachments for the template. Most probably, inline elements.</li>\n<li><code>defaults</code>: Default template values, if required. The user can override these later.</li>\n</ul>\n<h3>Template.set_renderer</h3>\n<pre><span class=\"n\">set_renderer</span><span class=\"p\">(</span><span class=\"n\">Renderer</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n</pre>\n<p>Set renderer to be used with this template.</p>\n<p>A Renderer is any class that can be constructed with a template string argument,\nand called with template values dict to render it.</p>\n<p>When no renderer was explicitly set, it defaults to PythonTemplateRenderer.</p>\n<p>See <a href=\"mailem/template/renderer.py\" rel=\"nofollow\">mailem/template/renderer.py</a>: it's easy to implement renderers with custom behavior!</p>\n<ul>\n<li><code>Renderer</code>: Renderer class.</li>\n<li><code>**kwargs</code>: Additional arguments to renderer, if supported</li>\n</ul>\n<h3>Template.defaults</h3>\n<pre><span class=\"n\">defaults</span><span class=\"p\">(</span><span class=\"n\">values</span><span class=\"p\">)</span>\n</pre>\n<p>Set default values.</p>\n<p>New values will overwrite the previous.</p>\n<ul>\n<li><code>values</code>: Default template values</li>\n</ul>\n<h3>Template.<strong>call</strong></h3>\n<pre><span class=\"fm\">__call__</span><span class=\"p\">(</span><span class=\"n\">recipients</span><span class=\"p\">,</span> <span class=\"n\">values</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n</pre>\n<p>Create a <code>Message</code> object using the template values.</p>\n<ul>\n<li><code>recipients</code>: Message recipients list</li>\n<li><code>values</code>: Dictionary with template values</li>\n<li><code>**kwargs</code>: keyword arguments for the <a href=\"#message\" rel=\"nofollow\"><code>Message</code></a> constructor</li>\n</ul>\n<p>Returns: <code>Message</code> The rendered <code>Message</code> object</p>\n<h3>Template.from_directory</h3>\n<pre><span class=\"n\">from_directory</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">,</span>\n               <span class=\"n\">subject_name</span><span class=\"o\">=</span><span class=\"s1\">'subject.txt'</span><span class=\"p\">,</span>\n               <span class=\"n\">html_name</span><span class=\"o\">=</span><span class=\"s1\">'index.htm'</span><span class=\"p\">,</span>\n               <span class=\"n\">text_name</span><span class=\"o\">=</span><span class=\"s1\">'index.txt'</span><span class=\"p\">,</span>\n               <span class=\"n\">inline_rex</span><span class=\"o\">=</span><span class=\"s1\">'^i-(.*)'</span><span class=\"p\">)</span>\n</pre>\n<p>Convenience class method to import a directory as a template:</p>\n<ul>\n<li>\n<p><code>subject.txt</code> is the subject string template</p>\n</li>\n<li>\n<p><code>index.htm</code> is the HTML template</p>\n</li>\n<li>\n<p><code>index.txt</code> is the plaintext template</p>\n</li>\n<li>\n<p>All files matching the 'i-(*)' format are attached as 'inline', and hence can be referenced in the template:</p>\n<p>E.g. file 'i-flower.jpg' can be inlined as <code>&lt;img src=\"cid:flower.jpg\" /&gt;</code>.</p>\n</li>\n<li>\n<p>All other files are just attachments.</p>\n</li>\n</ul>\n<p>Example:</p>\n<pre><span class=\"n\">signup</span> <span class=\"o\">=</span> <span class=\"n\">Template</span><span class=\"o\">.</span><span class=\"n\">from_directory</span><span class=\"p\">(</span><span class=\"s1\">'templates/signup/'</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li>\n<p><code>path</code>: Path to the directory</p>\n</li>\n<li>\n<p><code>subject_name</code>: Subject template filename</p>\n</li>\n<li>\n<p><code>html_name</code>: Html template filename</p>\n</li>\n<li>\n<p><code>text_name</code>: Plaintext template filename</p>\n</li>\n<li>\n<p><code>inline_rex</code>: Regular expression to match files that should be inlined.</p>\n<p>If the RegExp defines capture groups, group $1 will be used as the fact filename.</p>\n</li>\n</ul>\n<p>Returns: <code>Template</code> Template</p>\n<h2>TemplateRegistry</h2>\n<pre><span class=\"n\">TemplateRegistry</span><span class=\"p\">()</span>\n</pre>\n<p>E-Mail template registry.</p>\n<p>Simply contains all your templates and allows to render these by name.\nUseful if you have multiple templates in your app and want to have them prepared.</p>\n<p>Initially, the registry is empty, and you add <a href=\"#template\" rel=\"nofollow\"><code>Template</code></a> objects one by one:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">mailem.template</span> <span class=\"kn\">import</span> <span class=\"n\">Template</span><span class=\"p\">,</span> <span class=\"n\">TemplateRegistry</span>\n\n<span class=\"n\">templates</span> <span class=\"o\">=</span> <span class=\"n\">TemplateRegistry</span><span class=\"p\">()</span>\n<span class=\"n\">templates</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"s1\">'signup'</span><span class=\"p\">,</span> <span class=\"n\">Template</span><span class=\"p\">(</span>\n            <span class=\"s1\">'Congrats $user, you'</span><span class=\"n\">ve</span> <span class=\"n\">signed</span> <span class=\"n\">up</span><span class=\"err\">!</span><span class=\"s1\">',</span>\n           <span class=\"s1\">'Welcome to our website!&lt;br&gt; -- $domain'</span><span class=\"p\">,</span>\n<span class=\"p\">))</span>\n<span class=\"n\">templates</span><span class=\"o\">.</span><span class=\"n\">defaults</span><span class=\"p\">(</span><span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">domain</span><span class=\"o\">=</span><span class=\"s1\">'example.com'</span><span class=\"p\">))</span>  <span class=\"c1\"># set defaults on all templates</span>\n</pre>\n<p>Alternatively, you can use <a href=\"#templateregistryfrom_directory\" rel=\"nofollow\"><code>TemplateRegistry.from_directory()</code></a> to load templates\nfrom filesystem.</p>\n<p>Now, to render a template, you <a href=\"#templateregistryget\" rel=\"nofollow\"><code>get()</code></a> it by name:</p>\n<pre><span class=\"n\">msg</span> <span class=\"o\">=</span> <span class=\"n\">templates</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'signup'</span><span class=\"p\">)([</span><span class=\"s1\">'user@gmail.com'</span><span class=\"p\">],</span> <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"o\">=</span><span class=\"s1\">'Honored User'</span><span class=\"p\">,))</span>\n</pre>\n<h3>TemplateRegistry.add</h3>\n<pre><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">template</span><span class=\"p\">)</span>\n</pre>\n<p>Register a template</p>\n<ul>\n<li><code>template</code>: Template object</li>\n</ul>\n<p>Returns: <code>mailem.template.Template</code> The added template (in case you want to set something on it)</p>\n<h3>TemplateRegistry.set_renderer</h3>\n<pre><span class=\"n\">set_renderer</span><span class=\"p\">(</span><span class=\"n\">renderer</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n</pre>\n<p>Set renderer to be used with all templates.</p>\n<p>Can be called both before adding templates and after.</p>\n<ul>\n<li><code>renderer</code>: Renderer class to use</li>\n<li><code>**kwargs</code>: Additional arguments for the renderer</li>\n</ul>\n<h3>TemplateRegistry.defaults</h3>\n<pre><span class=\"n\">defaults</span><span class=\"p\">(</span><span class=\"n\">values</span><span class=\"p\">)</span>\n</pre>\n<p>Set default values on all templates.</p>\n<p>New values will overwrite the previous.</p>\n<p>Can be called both before adding templates and after.</p>\n<ul>\n<li><code>values</code>: Default template values</li>\n</ul>\n<h3>TemplateRegistry.get</h3>\n<pre><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span>\n</pre>\n<p>Get a Template by name</p>\n<ul>\n<li><code>name</code>: Template name</li>\n</ul>\n<p>Returns: <code>mailem.template.Template</code></p>\n<h3>TemplateRegistry.from_directory</h3>\n<pre><span class=\"n\">from_directory</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n</pre>\n<p>Convenience method to construct a template registry\nwith a directory where each template is in a subdirectory</p>\n<ul>\n<li><code>path</code>: Path to templates</li>\n<li><code>**kwargs</code>: Arguments to <a href=\"#templatefrom_directory\" rel=\"nofollow\">Template.from_directory()</a>, if required</li>\n</ul>\n<p>Returns: <code>mailem.template.registry.TemplateRegistry</code></p>\n\n          </div>"}, "last_serial": 6320461, "releases": {"0.0.1-0": [{"comment_text": "", "digests": {"md5": "56020db6df4953291c3541b21b99c72b", "sha256": "dbd9d269730af209aef4408b0803341d8ad9e784612cabd9091e87338970195c"}, "downloads": -1, "filename": "mailem-0.0.1_0-py2-none-any.whl", "has_sig": false, "md5_digest": "56020db6df4953291c3541b21b99c72b", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 20364, "upload_time": "2014-08-14T14:58:33", "upload_time_iso_8601": "2014-08-14T14:58:33.094261Z", "url": "https://files.pythonhosted.org/packages/a1/9a/95af77ed338127c2c793a9df5e1fb1bb78432b4551423e35584e4440be3e/mailem-0.0.1_0-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a8ec19843dff1d2cef46d9e3d5de5353", "sha256": "4b1f436aa6d8c5022bdc2dc7dec6e9a057644510894abce400b7315a4cecc1c7"}, "downloads": -1, "filename": "mailem-0.0.1-0.tar.gz", "has_sig": false, "md5_digest": "a8ec19843dff1d2cef46d9e3d5de5353", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15790, "upload_time": "2014-08-14T14:58:30", "upload_time_iso_8601": "2014-08-14T14:58:30.705483Z", "url": "https://files.pythonhosted.org/packages/1c/c0/179629c44d6904c1cbd224769d7222d7449e65878984f722e7fc13fc0339/mailem-0.0.1-0.tar.gz", "yanked": false}], "0.0.2-0": [{"comment_text": "", "digests": {"md5": "8e1da4648251d8246d0033a83ba47c70", "sha256": "8babe897f25dbc1b4ecc528d8b0fece6c1973d99157c785bc1c483f0a0dc02c9"}, "downloads": -1, "filename": "mailem-0.0.2_0-py2-none-any.whl", "has_sig": false, "md5_digest": "8e1da4648251d8246d0033a83ba47c70", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 23381, "upload_time": "2014-08-15T15:25:36", "upload_time_iso_8601": "2014-08-15T15:25:36.589175Z", "url": "https://files.pythonhosted.org/packages/5d/f5/b957f3c604ed3c1787d33ab526fe04af2177a2b0009deef5f434dc8ee81c/mailem-0.0.2_0-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "46a85b6805f40abe8e2fc92f9beea911", "sha256": "89e9fe68877c02cd8a52fc6948601e1b221c03495609fd388f79d7f77f2c14f1"}, "downloads": -1, "filename": "mailem-0.0.2-0.tar.gz", "has_sig": false, "md5_digest": "46a85b6805f40abe8e2fc92f9beea911", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19151, "upload_time": "2014-08-15T15:25:33", "upload_time_iso_8601": "2014-08-15T15:25:33.876096Z", "url": "https://files.pythonhosted.org/packages/4e/40/15e818e3e76603ad9470babaa0b284086bb5e7833332a6527ab721cec2d6/mailem-0.0.2-0.tar.gz", "yanked": false}], "0.0.3-0": [{"comment_text": "", "digests": {"md5": "b8da5c0d4eb1b31519ee061b35db3f88", "sha256": "e2d26ecbe0c6bce3685c28ce4679b946becfb294b964eccc2f62cacfff4e283e"}, "downloads": -1, "filename": "mailem-0.0.3_0-py2-none-any.whl", "has_sig": false, "md5_digest": "b8da5c0d4eb1b31519ee061b35db3f88", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 23967, "upload_time": "2014-08-15T16:01:33", "upload_time_iso_8601": "2014-08-15T16:01:33.020825Z", "url": "https://files.pythonhosted.org/packages/63/04/10ae2a3dcc87b5c61a83b901fe3d97b5e78b6d271b21ed739b38f40c00b6/mailem-0.0.3_0-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "054e2a9cf5a05ee25cb691593a1b4c6b", "sha256": "ec4da8aa86f05ee115117f6e099aea84b7470dffccad2875db77c3007eae4884"}, "downloads": -1, "filename": "mailem-0.0.3-0.tar.gz", "has_sig": false, "md5_digest": "054e2a9cf5a05ee25cb691593a1b4c6b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19797, "upload_time": "2014-08-15T16:01:29", "upload_time_iso_8601": "2014-08-15T16:01:29.451465Z", "url": "https://files.pythonhosted.org/packages/6e/83/d120edab2d0f3b97ffd2d64bd5e0e2e8005ef660534f6cb46674d260ee24/mailem-0.0.3-0.tar.gz", "yanked": false}], "0.0.3-1": [{"comment_text": "", "digests": {"md5": "fa98071966a1e253d6824384c5b05f48", "sha256": "e504851c64830f0815517cba94629c182eabba9e6780bd997bbb148ca65c4929"}, "downloads": -1, "filename": "mailem-0.0.3_1-py2-none-any.whl", "has_sig": false, "md5_digest": "fa98071966a1e253d6824384c5b05f48", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 23971, "upload_time": "2014-08-15T16:11:01", "upload_time_iso_8601": "2014-08-15T16:11:01.755422Z", "url": "https://files.pythonhosted.org/packages/33/c2/7241d82d74be94e41ac299b5c74783491809169f827a477164905fc5125a/mailem-0.0.3_1-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "af9aa6b889fd27fd79da27927befbd0e", "sha256": "ec93920a51cdbc63b225a933d9de2456a0d1b1b6598fe5f86cd873385c7bd6b6"}, "downloads": -1, "filename": "mailem-0.0.3-1.tar.gz", "has_sig": false, "md5_digest": "af9aa6b889fd27fd79da27927befbd0e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19796, "upload_time": "2014-08-15T16:10:58", "upload_time_iso_8601": "2014-08-15T16:10:58.569951Z", "url": "https://files.pythonhosted.org/packages/24/53/4246fffaa8d6781b00fa75a21a20e13e662e533647a41903f714f699297a/mailem-0.0.3-1.tar.gz", "yanked": false}], "0.0.4.post0": [{"comment_text": "", "digests": {"md5": "5f906ef763d278273c45788ed6af50fb", "sha256": "3465d2485ab68947643aae0de3abdedca0d03db0205ea08353f82b8e1e4676a5"}, "downloads": -1, "filename": "mailem-0.0.4.post0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "5f906ef763d278273c45788ed6af50fb", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 19632, "upload_time": "2019-01-09T12:41:24", "upload_time_iso_8601": "2019-01-09T12:41:24.146210Z", "url": "https://files.pythonhosted.org/packages/5d/66/e75b11b9689d8ad45ccafa2bf8ac5f9d9269975b98c4cfd399c8629a9372/mailem-0.0.4.post0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d5b41de80b6e39dc570f85479bee40af", "sha256": "45be11ec41012a01109f304284c0a94ea7039a54ec68308082d17c65b9ee3b4b"}, "downloads": -1, "filename": "mailem-0.0.4.post0.tar.gz", "has_sig": false, "md5_digest": "d5b41de80b6e39dc570f85479bee40af", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19579, "upload_time": "2019-01-09T12:41:26", "upload_time_iso_8601": "2019-01-09T12:41:26.195216Z", "url": "https://files.pythonhosted.org/packages/1b/ef/20304d6b5e167e532953a7a482c6f3fbf066b739755bef8fc3d327fa2791/mailem-0.0.4.post0.tar.gz", "yanked": false}], "0.0.4.post1": [{"comment_text": "", "digests": {"md5": "caac06f52ccda2e5a12eacd44049920a", "sha256": "0f051ee431784f24c806b4cff3c0ae7e933693ed55e43842c11692289210aed4"}, "downloads": -1, "filename": "mailem-0.0.4.post1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "caac06f52ccda2e5a12eacd44049920a", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 19668, "upload_time": "2019-02-11T12:08:29", "upload_time_iso_8601": "2019-02-11T12:08:29.678781Z", "url": "https://files.pythonhosted.org/packages/de/0d/b1cd3e51e1232a5efd17be798cef9d39c10cd783e92263b269b518227aeb/mailem-0.0.4.post1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "09c62318cfb4da05381cb28b76fea5d8", "sha256": "2a6ce8b1d584e0a65324542539827fb03f4a50b24f649570a9b3e7fb887eba6d"}, "downloads": -1, "filename": "mailem-0.0.4.post1.tar.gz", "has_sig": false, "md5_digest": "09c62318cfb4da05381cb28b76fea5d8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19619, "upload_time": "2019-02-11T12:08:31", "upload_time_iso_8601": "2019-02-11T12:08:31.616933Z", "url": "https://files.pythonhosted.org/packages/e5/96/ea0e83b11b1111e786e60faff40fb2346bda90b798a70c74c996ce23bf45/mailem-0.0.4.post1.tar.gz", "yanked": false}], "0.0.4.post2": [{"comment_text": "", "digests": {"md5": "0bf083a3f728ab34e3998ef6e065e360", "sha256": "4caf037ed0ff0ba89e1877b5b0829043d08c1e91f97f5e404e1cfcc880fc33b5"}, "downloads": -1, "filename": "mailem-0.0.4.post2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "0bf083a3f728ab34e3998ef6e065e360", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 23924, "upload_time": "2019-02-27T12:44:57", "upload_time_iso_8601": "2019-02-27T12:44:57.706781Z", "url": "https://files.pythonhosted.org/packages/ed/2d/ced28e062fd123324781255b58fc230ed43bcb71e55f1cdfd51247c56429/mailem-0.0.4.post2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e1dea5296719e9114b13b9e030c98963", "sha256": "b718ba5ccd0f95e3eba4474b07b24c2758d94e0719fa4da165b83a41d16d0d3b"}, "downloads": -1, "filename": "mailem-0.0.4.post2.tar.gz", "has_sig": false, "md5_digest": "e1dea5296719e9114b13b9e030c98963", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24623, "upload_time": "2019-02-27T12:44:59", "upload_time_iso_8601": "2019-02-27T12:44:59.608138Z", "url": "https://files.pythonhosted.org/packages/2c/dd/3174ed12528eb715915349771605ee1653aa783b0b8567924867cabca4be/mailem-0.0.4.post2.tar.gz", "yanked": false}], "0.0.4.post3": [{"comment_text": "", "digests": {"md5": "c6a545ec8f06accb5d8ebcfd15e65b84", "sha256": "277dc9c50a9e812be0c03083b8b9acd395b954e7153224033777168ad155d338"}, "downloads": -1, "filename": "mailem-0.0.4.post3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "c6a545ec8f06accb5d8ebcfd15e65b84", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 24381, "upload_time": "2019-02-28T22:18:41", "upload_time_iso_8601": "2019-02-28T22:18:41.465502Z", "url": "https://files.pythonhosted.org/packages/60/21/7ee2de88f89d76d74173b4047535614b9cf65311172fce5bd6212a516332/mailem-0.0.4.post3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "583a72dd054a7b67d9c1fac1cd70c7e4", "sha256": "faa8bbd3e188153cbebe39abcc084b39f9ce8355b6a129e49ea8532be42e38f2"}, "downloads": -1, "filename": "mailem-0.0.4.post3.tar.gz", "has_sig": false, "md5_digest": "583a72dd054a7b67d9c1fac1cd70c7e4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25241, "upload_time": "2019-02-28T22:18:43", "upload_time_iso_8601": "2019-02-28T22:18:43.132227Z", "url": "https://files.pythonhosted.org/packages/ab/bf/7d2ac19acac12a36835f80838ca24a364b4c8900ce69836e29ffc7615881/mailem-0.0.4.post3.tar.gz", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "052baae317f38028446bc72c14780433", "sha256": "bb6bd7e711eaad3205edd2156256b826b1a6eb185edf5e89ae93aaca2d400fb6"}, "downloads": -1, "filename": "mailem-0.0.5-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "052baae317f38028446bc72c14780433", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 24376, "upload_time": "2019-12-17T20:52:26", "upload_time_iso_8601": "2019-12-17T20:52:26.889593Z", "url": "https://files.pythonhosted.org/packages/c0/3d/2bbdbd95628a1a19bc9c0b268eb2f17e8eac7b36d44ff24fb2b47943d4ea/mailem-0.0.5-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "143775608630ab049e37edc904d1bddb", "sha256": "c01e12755275cbc277a70bbce42c5b2ff06a2e9b4189a88b419f11570751b9ea"}, "downloads": -1, "filename": "mailem-0.0.5.tar.gz", "has_sig": false, "md5_digest": "143775608630ab049e37edc904d1bddb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23050, "upload_time": "2019-12-17T20:52:28", "upload_time_iso_8601": "2019-12-17T20:52:28.525760Z", "url": "https://files.pythonhosted.org/packages/2d/e2/98773ea3a7c0e882d8f6e8d70559339269d2783c72ef71f2aa250ccd976a/mailem-0.0.5.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "052baae317f38028446bc72c14780433", "sha256": "bb6bd7e711eaad3205edd2156256b826b1a6eb185edf5e89ae93aaca2d400fb6"}, "downloads": -1, "filename": "mailem-0.0.5-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "052baae317f38028446bc72c14780433", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 24376, "upload_time": "2019-12-17T20:52:26", "upload_time_iso_8601": "2019-12-17T20:52:26.889593Z", "url": "https://files.pythonhosted.org/packages/c0/3d/2bbdbd95628a1a19bc9c0b268eb2f17e8eac7b36d44ff24fb2b47943d4ea/mailem-0.0.5-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "143775608630ab049e37edc904d1bddb", "sha256": "c01e12755275cbc277a70bbce42c5b2ff06a2e9b4189a88b419f11570751b9ea"}, "downloads": -1, "filename": "mailem-0.0.5.tar.gz", "has_sig": false, "md5_digest": "143775608630ab049e37edc904d1bddb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23050, "upload_time": "2019-12-17T20:52:28", "upload_time_iso_8601": "2019-12-17T20:52:28.525760Z", "url": "https://files.pythonhosted.org/packages/2d/e2/98773ea3a7c0e882d8f6e8d70559339269d2783c72ef71f2aa250ccd976a/mailem-0.0.5.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:41:56 2020"}