{"info": {"author": "Giampaolo Spagoni", "author_email": "giampaolo.spagoni@infor.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# Create Full BOD Wrapper for Scripting\n\nThis Python package contains some functions to create a BOD wrapper after converting JSON data to XML\n\nyou can find the code to this file\n\n```\ncreateFullBOD.py\n```\n\n### def createRoot(root):\nthe root parameter should be verb+noun like SyncItemMaster.\nIt creates the root of the BOD\n\ncreateRoot('Syncemployee')\n```\n<Syncemployee xmlns=\"http://schema.infor.com/InforOAGIS/2\">\n</Syncemployee>\n```\n\n### def createApplArea(lid,compId):\nIt creates the ApplicationArea structure proving the LogicalID and ComponentID\n\ncreateApplArea('lid://infor.ln','erp')\n```\n    <ApplicationArea>\n        <Sender>\n        <LogicalID>lid://infor.ln</LogicalID>\n        <ComponentID>erp</ComponentID>\n        <ConfirmationCode>OnError</ConfirmationCode>\n        </Sender>\n        <CreationDateTime>2019-10-09T12:02:44:270Z</CreationDateTime>\n        <BODID>b3c8437e-ea8c-11e9-aad9-ca7d09e7940e</BODID>\n    </ApplicationArea>\n```\n\n### def createDataArea():\nit creates just the DataArea tag\n\n```\n    <DataArea></DataArea>\n```\n\n### def createVerb(verb,aev,locv,aexv):\nit creates the Verb structure of the BOD providing the VERB = [Sync|Process|Acknowldge|....] plus the AccountingEntity, Location and Action = [Add|Change|Replace]\n\ncreateVerb('Sync','AE','000','Add')\n```\n    <Sync>\n      <AccountingEntityID>AE</AccountingEntityID>\n      <LocationID>000</LocationID>\n      <ActionCriteria>\n        <ActionExpression actionCode=\"Add\" />\n      </ActionCriteria>\n    </Sync>\n```\n\n### def renameTag(xml, oldtag,newtag):\nGiving an XML, it replaces the oldtag within the XML with the newtag\n\nrenameTag(XML,'element','employee')\n\nFrom here:\n```\n  <element>\n    <empnum>1001</empnum>\n    <fullname>John Doe                                </fullname>\n    <dateofhire>2009-08-28</dateofhire>\n  </element>\n```\nTo here:\n```\n  <employee>\n    <empnum>1001</empnum>\n    <fullname>John Doe                                </fullname>\n    <dateofhire>2009-08-28</dateofhire>\n  </employee>\n```\n\n### def createFullBOD(verb,noun,lid,erp,ae,loc,action,body):\n\n- verb = Sync\n- noun = employee\n- lid  = lid://infor.ln.1\n- erp = erp\n- ae = AE\n- loc = 000\n- action = Add\n- body = see below\n\nthe body parameter should be the JSON data converted in XML\nif we consider as JSON this array\n\n```\n[\n\t{\n\t\t\"empnum\": 1001,\n\t\t\"fullname\": \"John Doe                                \",\n\t\t\"dateofhire\": \"2009-08-28\"\n\t},\n\t{\n\t\t\"empnum\": 1002,\n\t\t\"fullname\": \"Jane Doe                                \",\n\t\t\"dateofhire\": \"2009-08-28\"\n\t},\n\t{\n\t\t\"empnum\": 1003,\n\t\t\"fullname\": \"Tim Bone                                \",\n\t\t\"dateofhire\": \"2014-01-01\"\n\t}\n]\n```\n\nthe converted XML will be like this\n\n```\n<root>\n  <element>\n    <empnum>1001</empnum>\n    <fullname>John Doe                                </fullname>\n    <dateofhire>2009-08-28</dateofhire>\n  </element>\n  <element>\n    <empnum>1002</empnum>\n    <fullname>Jane Doe                                </fullname>\n    <dateofhire>2009-08-28</dateofhire>\n  </element>\n  <element>\n    <empnum>1003</empnum>\n    <fullname>Tim Bone                                </fullname>\n    <dateofhire>2014-01-01</dateofhire>\n  </element>\n</root>\n```\n\nif the JSON data has the format as above after the convert, you can invoke the function\n\ncreateFullBOD('Sync','employee','lid://infor.ln.1','erp','AE','000','Add', body)\n\nthe result will be\n\n```\n<Syncemployee \n  xmlns=\"http://schema.infor.com/InforOAGIS/2\">\n  <ApplicationArea>\n    <Sender>\n      <LogicalID>lid://infor.ln.1</LogicalID>\n      <ComponentID>erp</ComponentID>\n      <ConfirmationCode>OnError</ConfirmationCode>\n    </Sender>\n    <CreationDateTime>2019-10-09T12:28:50:088Z</CreationDateTime>\n    <BODID>5902f98a-ea90-11e9-bfec-427e59ba50c3</BODID>\n  </ApplicationArea>\n  <DataArea>\n    <Sync>\n      <AccountingEntityID>AE</AccountingEntityID>\n      <LocationID>000</LocationID>\n      <ActionCriteria>\n        <ActionExpression actionCode=\"Add\" />\n      </ActionCriteria>\n    </Sync>\n    <employee>\n      <empnum>1001</empnum>\n      <fullname>John Doe                                </fullname>\n      <dateofhire>2009-08-28</dateofhire>\n    </employee>\n    <employee>\n      <empnum>1002</empnum>\n      <fullname>Jane Doe                                </fullname>\n      <dateofhire>2009-08-28</dateofhire>\n    </employee>\n    <employee>\n      <empnum>1003</empnum>\n      <fullname>Tim Bone                                </fullname>\n      <dateofhire>2014-01-01</dateofhire>\n    </employee>\n  </DataArea>\n</Syncemployee>\n```\n\nContact: <giampaolo.spagoni@infor.com>\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/gspagoni/createFullBODWrapper", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "createFullBOD", "package_url": "https://pypi.org/project/createFullBOD/", "platform": "", "project_url": "https://pypi.org/project/createFullBOD/", "project_urls": {"Homepage": "https://github.com/gspagoni/createFullBODWrapper"}, "release_url": "https://pypi.org/project/createFullBOD/0.0.2/", "requires_dist": null, "requires_python": "", "summary": "create full structure of BOD dinamically", "version": "0.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Create Full BOD Wrapper for Scripting</h1>\n<p>This Python package contains some functions to create a BOD wrapper after converting JSON data to XML</p>\n<p>you can find the code to this file</p>\n<pre><code>createFullBOD.py\n</code></pre>\n<h3>def createRoot(root):</h3>\n<p>the root parameter should be verb+noun like SyncItemMaster.\nIt creates the root of the BOD</p>\n<p>createRoot('Syncemployee')</p>\n<pre><code>&lt;Syncemployee xmlns=\"http://schema.infor.com/InforOAGIS/2\"&gt;\n&lt;/Syncemployee&gt;\n</code></pre>\n<h3>def createApplArea(lid,compId):</h3>\n<p>It creates the ApplicationArea structure proving the LogicalID and ComponentID</p>\n<p>createApplArea('lid://infor.ln','erp')</p>\n<pre><code>    &lt;ApplicationArea&gt;\n        &lt;Sender&gt;\n        &lt;LogicalID&gt;lid://infor.ln&lt;/LogicalID&gt;\n        &lt;ComponentID&gt;erp&lt;/ComponentID&gt;\n        &lt;ConfirmationCode&gt;OnError&lt;/ConfirmationCode&gt;\n        &lt;/Sender&gt;\n        &lt;CreationDateTime&gt;2019-10-09T12:02:44:270Z&lt;/CreationDateTime&gt;\n        &lt;BODID&gt;b3c8437e-ea8c-11e9-aad9-ca7d09e7940e&lt;/BODID&gt;\n    &lt;/ApplicationArea&gt;\n</code></pre>\n<h3>def createDataArea():</h3>\n<p>it creates just the DataArea tag</p>\n<pre><code>    &lt;DataArea&gt;&lt;/DataArea&gt;\n</code></pre>\n<h3>def createVerb(verb,aev,locv,aexv):</h3>\n<p>it creates the Verb structure of the BOD providing the VERB = [Sync|Process|Acknowldge|....] plus the AccountingEntity, Location and Action = [Add|Change|Replace]</p>\n<p>createVerb('Sync','AE','000','Add')</p>\n<pre><code>    &lt;Sync&gt;\n      &lt;AccountingEntityID&gt;AE&lt;/AccountingEntityID&gt;\n      &lt;LocationID&gt;000&lt;/LocationID&gt;\n      &lt;ActionCriteria&gt;\n        &lt;ActionExpression actionCode=\"Add\" /&gt;\n      &lt;/ActionCriteria&gt;\n    &lt;/Sync&gt;\n</code></pre>\n<h3>def renameTag(xml, oldtag,newtag):</h3>\n<p>Giving an XML, it replaces the oldtag within the XML with the newtag</p>\n<p>renameTag(XML,'element','employee')</p>\n<p>From here:</p>\n<pre><code>  &lt;element&gt;\n    &lt;empnum&gt;1001&lt;/empnum&gt;\n    &lt;fullname&gt;John Doe                                &lt;/fullname&gt;\n    &lt;dateofhire&gt;2009-08-28&lt;/dateofhire&gt;\n  &lt;/element&gt;\n</code></pre>\n<p>To here:</p>\n<pre><code>  &lt;employee&gt;\n    &lt;empnum&gt;1001&lt;/empnum&gt;\n    &lt;fullname&gt;John Doe                                &lt;/fullname&gt;\n    &lt;dateofhire&gt;2009-08-28&lt;/dateofhire&gt;\n  &lt;/employee&gt;\n</code></pre>\n<h3>def createFullBOD(verb,noun,lid,erp,ae,loc,action,body):</h3>\n<ul>\n<li>verb = Sync</li>\n<li>noun = employee</li>\n<li>lid  = lid://infor.ln.1</li>\n<li>erp = erp</li>\n<li>ae = AE</li>\n<li>loc = 000</li>\n<li>action = Add</li>\n<li>body = see below</li>\n</ul>\n<p>the body parameter should be the JSON data converted in XML\nif we consider as JSON this array</p>\n<pre><code>[\n\t{\n\t\t\"empnum\": 1001,\n\t\t\"fullname\": \"John Doe                                \",\n\t\t\"dateofhire\": \"2009-08-28\"\n\t},\n\t{\n\t\t\"empnum\": 1002,\n\t\t\"fullname\": \"Jane Doe                                \",\n\t\t\"dateofhire\": \"2009-08-28\"\n\t},\n\t{\n\t\t\"empnum\": 1003,\n\t\t\"fullname\": \"Tim Bone                                \",\n\t\t\"dateofhire\": \"2014-01-01\"\n\t}\n]\n</code></pre>\n<p>the converted XML will be like this</p>\n<pre><code>&lt;root&gt;\n  &lt;element&gt;\n    &lt;empnum&gt;1001&lt;/empnum&gt;\n    &lt;fullname&gt;John Doe                                &lt;/fullname&gt;\n    &lt;dateofhire&gt;2009-08-28&lt;/dateofhire&gt;\n  &lt;/element&gt;\n  &lt;element&gt;\n    &lt;empnum&gt;1002&lt;/empnum&gt;\n    &lt;fullname&gt;Jane Doe                                &lt;/fullname&gt;\n    &lt;dateofhire&gt;2009-08-28&lt;/dateofhire&gt;\n  &lt;/element&gt;\n  &lt;element&gt;\n    &lt;empnum&gt;1003&lt;/empnum&gt;\n    &lt;fullname&gt;Tim Bone                                &lt;/fullname&gt;\n    &lt;dateofhire&gt;2014-01-01&lt;/dateofhire&gt;\n  &lt;/element&gt;\n&lt;/root&gt;\n</code></pre>\n<p>if the JSON data has the format as above after the convert, you can invoke the function</p>\n<p>createFullBOD('Sync','employee','lid://infor.ln.1','erp','AE','000','Add', body)</p>\n<p>the result will be</p>\n<pre><code>&lt;Syncemployee \n  xmlns=\"http://schema.infor.com/InforOAGIS/2\"&gt;\n  &lt;ApplicationArea&gt;\n    &lt;Sender&gt;\n      &lt;LogicalID&gt;lid://infor.ln.1&lt;/LogicalID&gt;\n      &lt;ComponentID&gt;erp&lt;/ComponentID&gt;\n      &lt;ConfirmationCode&gt;OnError&lt;/ConfirmationCode&gt;\n    &lt;/Sender&gt;\n    &lt;CreationDateTime&gt;2019-10-09T12:28:50:088Z&lt;/CreationDateTime&gt;\n    &lt;BODID&gt;5902f98a-ea90-11e9-bfec-427e59ba50c3&lt;/BODID&gt;\n  &lt;/ApplicationArea&gt;\n  &lt;DataArea&gt;\n    &lt;Sync&gt;\n      &lt;AccountingEntityID&gt;AE&lt;/AccountingEntityID&gt;\n      &lt;LocationID&gt;000&lt;/LocationID&gt;\n      &lt;ActionCriteria&gt;\n        &lt;ActionExpression actionCode=\"Add\" /&gt;\n      &lt;/ActionCriteria&gt;\n    &lt;/Sync&gt;\n    &lt;employee&gt;\n      &lt;empnum&gt;1001&lt;/empnum&gt;\n      &lt;fullname&gt;John Doe                                &lt;/fullname&gt;\n      &lt;dateofhire&gt;2009-08-28&lt;/dateofhire&gt;\n    &lt;/employee&gt;\n    &lt;employee&gt;\n      &lt;empnum&gt;1002&lt;/empnum&gt;\n      &lt;fullname&gt;Jane Doe                                &lt;/fullname&gt;\n      &lt;dateofhire&gt;2009-08-28&lt;/dateofhire&gt;\n    &lt;/employee&gt;\n    &lt;employee&gt;\n      &lt;empnum&gt;1003&lt;/empnum&gt;\n      &lt;fullname&gt;Tim Bone                                &lt;/fullname&gt;\n      &lt;dateofhire&gt;2014-01-01&lt;/dateofhire&gt;\n    &lt;/employee&gt;\n  &lt;/DataArea&gt;\n&lt;/Syncemployee&gt;\n</code></pre>\n<p>Contact: <a href=\"mailto:giampaolo.spagoni@infor.com\">giampaolo.spagoni@infor.com</a></p>\n\n          </div>"}, "last_serial": 5949650, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "626e075d9039e965086fd33d49436490", "sha256": "e85fa5c38cb2323a43c61717c7584bc4c39a19e22bff17a68e6aa6eb87b23455"}, "downloads": -1, "filename": "createFullBOD-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "626e075d9039e965086fd33d49436490", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 1935, "upload_time": "2019-10-09T12:55:35", "upload_time_iso_8601": "2019-10-09T12:55:35.162783Z", "url": "https://files.pythonhosted.org/packages/04/e2/945d1faea3ba2eec0db78e978154ae2fba1872c0e5e2b958614dfd8294a8/createFullBOD-0.0.1-py3-none-any.whl", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "2a15e35b6decbb66dbdb33871c692d14", "sha256": "43ddb0ef42f912588024eae43f8411ffbc0fe03330987542a728404d485e26a8"}, "downloads": -1, "filename": "createFullBOD-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "2a15e35b6decbb66dbdb33871c692d14", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4228, "upload_time": "2019-10-09T13:01:01", "upload_time_iso_8601": "2019-10-09T13:01:01.126780Z", "url": "https://files.pythonhosted.org/packages/03/e3/9d64165ef09db8998f11b50b7558207a04c0a01861c7983715d3c03eb736/createFullBOD-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2935dc3a23b167547701ecd3771ca879", "sha256": "926a07923860b96b0dc0b1fd101acedd94a0528f309b61aaf7a1e631f496acce"}, "downloads": -1, "filename": "createFullBOD-0.0.2.tar.gz", "has_sig": false, "md5_digest": "2935dc3a23b167547701ecd3771ca879", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3386, "upload_time": "2019-10-09T13:01:02", "upload_time_iso_8601": "2019-10-09T13:01:02.778779Z", "url": "https://files.pythonhosted.org/packages/98/83/9b9db5ac3f3b17f2e7a1f064a27f7fad939bc85389cfbbb508e369ac112f/createFullBOD-0.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "2a15e35b6decbb66dbdb33871c692d14", "sha256": "43ddb0ef42f912588024eae43f8411ffbc0fe03330987542a728404d485e26a8"}, "downloads": -1, "filename": "createFullBOD-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "2a15e35b6decbb66dbdb33871c692d14", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4228, "upload_time": "2019-10-09T13:01:01", "upload_time_iso_8601": "2019-10-09T13:01:01.126780Z", "url": "https://files.pythonhosted.org/packages/03/e3/9d64165ef09db8998f11b50b7558207a04c0a01861c7983715d3c03eb736/createFullBOD-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2935dc3a23b167547701ecd3771ca879", "sha256": "926a07923860b96b0dc0b1fd101acedd94a0528f309b61aaf7a1e631f496acce"}, "downloads": -1, "filename": "createFullBOD-0.0.2.tar.gz", "has_sig": false, "md5_digest": "2935dc3a23b167547701ecd3771ca879", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3386, "upload_time": "2019-10-09T13:01:02", "upload_time_iso_8601": "2019-10-09T13:01:02.778779Z", "url": "https://files.pythonhosted.org/packages/98/83/9b9db5ac3f3b17f2e7a1f064a27f7fad939bc85389cfbbb508e369ac112f/createFullBOD-0.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:42:23 2020"}