{"info": {"author": "M. Kocher", "author_email": "michael.kocher@me.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "qpyson: Thin Commandline Tool to Explore, Transform, and Munge JSON using Python\n================================================================================\n\nThe JSON querying tool, [jq](https://stedolan.github.io/jq/), is a\nreally powerful tool. However, it\u2019s sometimes a bit involved and has a\nlearning curve that requires digging into the [jq\nmanual](https://stedolan.github.io/jq/manual/) and familiarizing\nyourself with a custom language.\n\n`qpyson` is a thin commandline tool to explore, transform, or munge JSON\nusing Python as the processing language.\n\nGoals\n-----\n\n-   Process (filter, map, general munging) of JSON files using Python\n-   Thin layer to process or apply transforms written in Python\n-   Provide Python function as a string to the commandline or define\n    Python functions in an external file\n-   Custom functions can be parameterized and configured from the\n    commandline\n-   Output results are emitted as JSON or in tabular form (using\n    [tabulate](https://pypi.org/project/tabulate/) for quick viewing\n    from the commandline\n\n### Non-Goals\n\n-   A replacement for `jq`\n-   No custom DSL for filtering or querying (use Python directly)\n-   Does not support streaming (JSON files are loaded into memory)\n\nInstallation\n------------\n\nRecommended to install using a\n[virtualenv](https://docs.python-guide.org/dev/virtualenvs/) or\n[conda](https://docs.conda.io/en/latest/) env to install.\n\n    pip install qpyson\n\nQuick Tour\n----------\n\nExample data from the Iris dataset.\n\n    head examples/iris.json\n\n    [\n      {\"sepalLength\": 5.1, \"sepalWidth\": 3.5, \"petalLength\": 1.4, \"petalWidth\": 0.2, \"species\": \"setosa\"},\n      {\"sepalLength\": 4.9, \"sepalWidth\": 3.0, \"petalLength\": 1.4, \"petalWidth\": 0.2, \"species\": \"setosa\"},\n      {\"sepalLength\": 4.7, \"sepalWidth\": 3.2, \"petalLength\": 1.3, \"petalWidth\": 0.2, \"species\": \"setosa\"},\n      {\"sepalLength\": 4.6, \"sepalWidth\": 3.1, \"petalLength\": 1.5, \"petalWidth\": 0.2, \"species\": \"setosa\"},\n      {\"sepalLength\": 5.0, \"sepalWidth\": 3.6, \"petalLength\": 1.4, \"petalWidth\": 0.2, \"species\": \"setosa\"},\n      {\"sepalLength\": 5.4, \"sepalWidth\": 3.9, \"petalLength\": 1.7, \"petalWidth\": 0.4, \"species\": \"setosa\"},\n      {\"sepalLength\": 4.6, \"sepalWidth\": 3.4, \"petalLength\": 1.4, \"petalWidth\": 0.3, \"species\": \"setosa\"},\n      {\"sepalLength\": 5.0, \"sepalWidth\": 3.4, \"petalLength\": 1.5, \"petalWidth\": 0.2, \"species\": \"setosa\"},\n      {\"sepalLength\": 4.4, \"sepalWidth\": 2.9, \"petalLength\": 1.4, \"petalWidth\": 0.2, \"species\": \"setosa\"},\n\nThe commandline tool takes a function written as commandline string or\nreferenced in an external file as well as the JSON file to be processed.\n\n    qpyson --help\n\n    qpyson: error: the following arguments are required: path_or_cmd, json_file\n    usage: qpyson [-f FUNCTION_NAME] [-n] [--indent INDENT] [-t]\n                  [--table-style TABLE_STYLE]\n                  [--log-level {CRITICAL,ERROR,WARNING,INFO,DEBUG,NOTSET}]\n                  [--help]\n                  path_or_cmd json_file\n\n    Util to use Python to process (e.g., filter, map) JSON files\n\n    positional arguments:\n      path_or_cmd           Path to python file, or python cmd\n      json_file             Path to JSON file\n\n    optional arguments:\n      -f FUNCTION_NAME, --function-name FUNCTION_NAME\n                            Function name (default: f)\n      -n, --no-pretty       (Non-table) Pretty print the output of dicts and list\n                            of dicts (default: False)\n      --indent INDENT       (Non-table) Pretty print indent spacing (default: 2)\n      -t, --print-table     Pretty print results (default: False)\n      --table-style TABLE_STYLE\n                            Table fmt style using Tabulate. See\n                            https://github.com/astanin/python-tabulate#table-\n                            format for available options (default: simple)\n      --log-level {CRITICAL,ERROR,WARNING,INFO,DEBUG,NOTSET}\n                            Log level (default: NOTSET)\n      --help                Show this help message and exit (default: False)\n\nWe can define a custom function to process the JSON dataset. By default\nthe function is named `f` and can be customized by `-f` or\n`--function-name` commandline argument.\n\n    qpyson \"def f(d): return d[0]\" examples/iris.json\n\n    {\n      \"sepalLength\": 5.1,\n      \"sepalWidth\": 3.5,\n      \"petalLength\": 1.4,\n      \"petalWidth\": 0.2,\n      \"species\": \"setosa\"\n    }\n\nWe can also write custom functions in a Python file.\n\n    cat examples/iris_explore.py\n\n    def f(d):\n        return d[0]\n\n\n    def f2(d, max_items: int = 10):\n        return d[:max_items]\n\n\n    def f3(d, max_items: int = 5):\n        return [x for x in d if x[\"species\"] == \"setosa\"][:max_items]\n\n\n    def f4(d, sort_field: str, sort_direction: str = \"asc\", max_items: int = 5):\n        reverse = not (sort_direction == \"asc\")\n        d.sort(key=lambda x: x[sort_field], reverse=reverse)\n        return d[:max_items]\n\n\n    def f0(d):\n        # Identity operator\n        return d\n\n\n    def first(d):\n        return d[0]\n\n\n    def p(d, field: str = \"sepalLength\"):\n        import pandas as pd\n\n        df = pd.DataFrame.from_dict(d)\n        sdf = df.describe()\n        return sdf.to_dict()[field]\n\nExecuting `--help` will show the output options.\n\n    qpyson examples/iris_explore.py examples/iris.json --help\n\n    usage: qpyson [-f FUNCTION_NAME] [-n] [--indent INDENT] [-t]\n                  [--table-style TABLE_STYLE]\n                  [--log-level {CRITICAL,ERROR,WARNING,INFO,DEBUG,NOTSET}]\n                  [--help]\n                  path_or_cmd json_file\n\n    Util to use Python to process (e.g., filter, map) JSON files\n\n    positional arguments:\n      path_or_cmd           Path to python file, or python cmd\n      json_file             Path to JSON file\n\n    optional arguments:\n      -f FUNCTION_NAME, --function-name FUNCTION_NAME\n                            Function name (default: f)\n      -n, --no-pretty       (Non-table) Pretty print the output of dicts and list\n                            of dicts (default: False)\n      --indent INDENT       (Non-table) Pretty print indent spacing (default: 2)\n      -t, --print-table     Pretty print results (default: False)\n      --table-style TABLE_STYLE\n                            Table fmt style using Tabulate. See\n                            https://github.com/astanin/python-tabulate#table-\n                            format for available options (default: simple)\n      --log-level {CRITICAL,ERROR,WARNING,INFO,DEBUG,NOTSET}\n                            Log level (default: NOTSET)\n      --help                Show this help message and exit (default: False)\n\nExecuting function `f`, yields:\n\n    qpyson examples/iris_explore.py examples/iris.json \n\n    {\n      \"sepalLength\": 5.1,\n      \"sepalWidth\": 3.5,\n      \"petalLength\": 1.4,\n      \"petalWidth\": 0.2,\n      \"species\": \"setosa\"\n    }\n\nThe output view can be changed to a table view using `--print-table` or\n`-t`.\n\n    qpyson examples/iris_explore.py examples/iris.json --print-table --table-style github\n\n    |   sepalLength |   sepalWidth |   petalLength |   petalWidth | species   |\n    |---------------|--------------|---------------|--------------|-----------|\n    |           5.1 |          3.5 |           1.4 |          0.2 | setosa    |\n\nA better example using function `f2` defined in `iris_explore.py`\n\n    qpyson examples/iris_explore.py examples/iris.json  --function-name f2 --print-table\n\n      sepalLength    sepalWidth    petalLength    petalWidth  species\n    -------------  ------------  -------------  ------------  ---------\n              5.1           3.5            1.4           0.2  setosa\n              4.9           3              1.4           0.2  setosa\n              4.7           3.2            1.3           0.2  setosa\n              4.6           3.1            1.5           0.2  setosa\n              5             3.6            1.4           0.2  setosa\n              5.4           3.9            1.7           0.4  setosa\n              4.6           3.4            1.4           0.3  setosa\n              5             3.4            1.5           0.2  setosa\n              4.4           2.9            1.4           0.2  setosa\n              4.9           3.1            1.5           0.1  setosa\n\nCustom functions can be defined with required or optional values (with\ndefaults) combined with Python 3 type annotations to generate\n\n    cat examples/iris.py\n\n    # More examples that demonstrate generating commandline arguments\n\n\n    def f(d, sort_field: str, sort_direction: str = \"asc\", max_items: int = 5):\n        reverse = not (sort_direction == \"asc\")\n        d.sort(key=lambda x: x[sort_field], reverse=reverse)\n        return d[:max_items]\n\n\n    def g(d, field: str = \"sepalLength\"):\n        import pandas as pd\n\n        df = pd.DataFrame.from_dict(d)\n        sdf = df.describe()\n        return sdf.to_dict()[field]\n\nAnd calling `--help` will show the custom function specific arguments\n(e.g., `--max_items` and `--sort_direction`)\n\n    qpyson examples/iris.py examples/iris.json --help\n\n    usage: qpyson [-f FUNCTION_NAME] [-n] [--indent INDENT] [-t]\n                  [--table-style TABLE_STYLE]\n                  [--log-level {CRITICAL,ERROR,WARNING,INFO,DEBUG,NOTSET}]\n                  [--help] [--sort_field SORT_FIELD]\n                  [--sort_direction SORT_DIRECTION] [--max_items MAX_ITEMS]\n                  path_or_cmd json_file\n\n    Util to use Python to process (e.g., filter, map) JSON files\n\n    positional arguments:\n      path_or_cmd           Path to python file, or python cmd\n      json_file             Path to JSON file\n\n    optional arguments:\n      -f FUNCTION_NAME, --function-name FUNCTION_NAME\n                            Function name (default: f)\n      -n, --no-pretty       (Non-table) Pretty print the output of dicts and list\n                            of dicts (default: False)\n      --indent INDENT       (Non-table) Pretty print indent spacing (default: 2)\n      -t, --print-table     Pretty print results (default: False)\n      --table-style TABLE_STYLE\n                            Table fmt style using Tabulate. See\n                            https://github.com/astanin/python-tabulate#table-\n                            format for available options (default: simple)\n      --log-level {CRITICAL,ERROR,WARNING,INFO,DEBUG,NOTSET}\n                            Log level (default: NOTSET)\n      --help                Show this help message and exit (default: False)\n      --sort_field SORT_FIELD\n                            sort_field type:<class 'str'> from custom func `f`\n                            (default: _empty)\n      --sort_direction SORT_DIRECTION\n                            sort_direction type:<class 'str'> from custom func `f`\n                            (default: asc)\n      --max_items MAX_ITEMS\n                            max_items type:<class 'int'> from custom func `f`\n                            (default: 5)\n\nAnd calling with custom options yields:\n\n    qpyson examples/iris.py examples/iris.json -t --max_items=3 --sort_direction=desc --sort_field sepalLength\n\n      sepalLength    sepalWidth    petalLength    petalWidth  species\n    -------------  ------------  -------------  ------------  ---------\n              7.9           3.8            6.4           2    virginica\n              7.7           3.8            6.7           2.2  virginica\n              7.7           2.6            6.9           2.3  virginica\n\nAnother Example calling pandas underneath the hood to get a quick\nsummary of the data.\n\n    qpyson examples/iris.py examples/iris.json -t -f g --field=sepalLength\n\n      count     mean       std    min    25%    50%    75%    max\n    -------  -------  --------  -----  -----  -----  -----  -----\n        150  5.84333  0.828066    4.3    5.1    5.8    6.4    7.9\n\nIt\u2019s also possible to create thin JSON munging tools for configuration\nof systems or tools that take JSON as input.\n\nFor example a JSON configuration template with defaults.\n\n    cat examples/config_template.json\n\n    {\n      \"alpha\":  1234,\n      \"beta\": null,\n      \"gamma\": 90.1234\n    }\n\nAnd a processing function, `f`.\n\n    cat examples/config_processor.py\n\n    def f(dx, alpha: float, beta: float, gamma: float):\n        \"\"\"Simple example of config munging\"\"\"\n\n        def _set(k, v):\n            if v:\n                dx[k] = v\n\n        items = [(\"alpha\", alpha), (\"beta\", beta), (\"gamma\", gamma)]\n\n        for name, value in items:\n            _set(name, value)\n\n        dx[\"_comment\"] = \"Configured with qpyson\"\n        return dx\n\nRunning `--help` will show the supported configuration options.\n\n    qpyson examples/config_processor.py examples/config_template.json --help\n\n    usage: qpyson [-f FUNCTION_NAME] [-n] [--indent INDENT] [-t]\n                  [--table-style TABLE_STYLE]\n                  [--log-level {CRITICAL,ERROR,WARNING,INFO,DEBUG,NOTSET}]\n                  [--help] [--alpha ALPHA] [--beta BETA] [--gamma GAMMA]\n                  path_or_cmd json_file\n\n    Util to use Python to process (e.g., filter, map) JSON files\n\n    positional arguments:\n      path_or_cmd           Path to python file, or python cmd\n      json_file             Path to JSON file\n\n    optional arguments:\n      -f FUNCTION_NAME, --function-name FUNCTION_NAME\n                            Function name (default: f)\n      -n, --no-pretty       (Non-table) Pretty print the output of dicts and list\n                            of dicts (default: False)\n      --indent INDENT       (Non-table) Pretty print indent spacing (default: 2)\n      -t, --print-table     Pretty print results (default: False)\n      --table-style TABLE_STYLE\n                            Table fmt style using Tabulate. See\n                            https://github.com/astanin/python-tabulate#table-\n                            format for available options (default: simple)\n      --log-level {CRITICAL,ERROR,WARNING,INFO,DEBUG,NOTSET}\n                            Log level (default: NOTSET)\n      --help                Show this help message and exit (default: False)\n      --alpha ALPHA         alpha type:<class 'float'> from custom func `f`\n                            (default: _empty)\n      --beta BETA           beta type:<class 'float'> from custom func `f`\n                            (default: _empty)\n      --gamma GAMMA         gamma type:<class 'float'> from custom func `f`\n                            (default: _empty)\n\nNow configuring `alpha`, `beta` and `gamma`.\n\n    qpyson examples/config_processor.py examples/config_template.json --alpha 1.23 --beta 2.34 --gamma 3.45\n\n    {\n      \"alpha\": 1.23,\n      \"beta\": 2.34,\n      \"gamma\": 3.45,\n      \"_comment\": \"Configured with qpyson\"\n    }\n\nTesting\n=======\n\nTesting is currently done using RMarkdown using the make target `doc`.\n\nThis should probably be ported to non-R based approach. However, this\ncurrent approach does keep the docs (e.g., README.md) up to date.\n\nRelated JQ-ish tools\n====================\n\n<https://github.com/dbohdan/structured-text-tools#json>\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/mpkocher/qpyson", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "qpyson", "package_url": "https://pypi.org/project/qpyson/", "platform": "", "project_url": "https://pypi.org/project/qpyson/", "project_urls": {"Homepage": "http://github.com/mpkocher/qpyson"}, "release_url": "https://pypi.org/project/qpyson/0.3.0/", "requires_dist": ["tabulate"], "requires_python": ">=3.6", "summary": "JQ-ish tool to query/munge JSON files using Python", "version": "0.3.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>qpyson: Thin Commandline Tool to Explore, Transform, and Munge JSON using Python</h1>\n<p>The JSON querying tool, <a href=\"https://stedolan.github.io/jq/\" rel=\"nofollow\">jq</a>, is a\nreally powerful tool. However, it\u2019s sometimes a bit involved and has a\nlearning curve that requires digging into the <a href=\"https://stedolan.github.io/jq/manual/\" rel=\"nofollow\">jq\nmanual</a> and familiarizing\nyourself with a custom language.</p>\n<p><code>qpyson</code> is a thin commandline tool to explore, transform, or munge JSON\nusing Python as the processing language.</p>\n<h2>Goals</h2>\n<ul>\n<li>Process (filter, map, general munging) of JSON files using Python</li>\n<li>Thin layer to process or apply transforms written in Python</li>\n<li>Provide Python function as a string to the commandline or define\nPython functions in an external file</li>\n<li>Custom functions can be parameterized and configured from the\ncommandline</li>\n<li>Output results are emitted as JSON or in tabular form (using\n<a href=\"https://pypi.org/project/tabulate/\" rel=\"nofollow\">tabulate</a> for quick viewing\nfrom the commandline</li>\n</ul>\n<h3>Non-Goals</h3>\n<ul>\n<li>A replacement for <code>jq</code></li>\n<li>No custom DSL for filtering or querying (use Python directly)</li>\n<li>Does not support streaming (JSON files are loaded into memory)</li>\n</ul>\n<h2>Installation</h2>\n<p>Recommended to install using a\n<a href=\"https://docs.python-guide.org/dev/virtualenvs/\" rel=\"nofollow\">virtualenv</a> or\n<a href=\"https://docs.conda.io/en/latest/\" rel=\"nofollow\">conda</a> env to install.</p>\n<pre><code>pip install qpyson\n</code></pre>\n<h2>Quick Tour</h2>\n<p>Example data from the Iris dataset.</p>\n<pre><code>head examples/iris.json\n\n[\n  {\"sepalLength\": 5.1, \"sepalWidth\": 3.5, \"petalLength\": 1.4, \"petalWidth\": 0.2, \"species\": \"setosa\"},\n  {\"sepalLength\": 4.9, \"sepalWidth\": 3.0, \"petalLength\": 1.4, \"petalWidth\": 0.2, \"species\": \"setosa\"},\n  {\"sepalLength\": 4.7, \"sepalWidth\": 3.2, \"petalLength\": 1.3, \"petalWidth\": 0.2, \"species\": \"setosa\"},\n  {\"sepalLength\": 4.6, \"sepalWidth\": 3.1, \"petalLength\": 1.5, \"petalWidth\": 0.2, \"species\": \"setosa\"},\n  {\"sepalLength\": 5.0, \"sepalWidth\": 3.6, \"petalLength\": 1.4, \"petalWidth\": 0.2, \"species\": \"setosa\"},\n  {\"sepalLength\": 5.4, \"sepalWidth\": 3.9, \"petalLength\": 1.7, \"petalWidth\": 0.4, \"species\": \"setosa\"},\n  {\"sepalLength\": 4.6, \"sepalWidth\": 3.4, \"petalLength\": 1.4, \"petalWidth\": 0.3, \"species\": \"setosa\"},\n  {\"sepalLength\": 5.0, \"sepalWidth\": 3.4, \"petalLength\": 1.5, \"petalWidth\": 0.2, \"species\": \"setosa\"},\n  {\"sepalLength\": 4.4, \"sepalWidth\": 2.9, \"petalLength\": 1.4, \"petalWidth\": 0.2, \"species\": \"setosa\"},\n</code></pre>\n<p>The commandline tool takes a function written as commandline string or\nreferenced in an external file as well as the JSON file to be processed.</p>\n<pre><code>qpyson --help\n\nqpyson: error: the following arguments are required: path_or_cmd, json_file\nusage: qpyson [-f FUNCTION_NAME] [-n] [--indent INDENT] [-t]\n              [--table-style TABLE_STYLE]\n              [--log-level {CRITICAL,ERROR,WARNING,INFO,DEBUG,NOTSET}]\n              [--help]\n              path_or_cmd json_file\n\nUtil to use Python to process (e.g., filter, map) JSON files\n\npositional arguments:\n  path_or_cmd           Path to python file, or python cmd\n  json_file             Path to JSON file\n\noptional arguments:\n  -f FUNCTION_NAME, --function-name FUNCTION_NAME\n                        Function name (default: f)\n  -n, --no-pretty       (Non-table) Pretty print the output of dicts and list\n                        of dicts (default: False)\n  --indent INDENT       (Non-table) Pretty print indent spacing (default: 2)\n  -t, --print-table     Pretty print results (default: False)\n  --table-style TABLE_STYLE\n                        Table fmt style using Tabulate. See\n                        https://github.com/astanin/python-tabulate#table-\n                        format for available options (default: simple)\n  --log-level {CRITICAL,ERROR,WARNING,INFO,DEBUG,NOTSET}\n                        Log level (default: NOTSET)\n  --help                Show this help message and exit (default: False)\n</code></pre>\n<p>We can define a custom function to process the JSON dataset. By default\nthe function is named <code>f</code> and can be customized by <code>-f</code> or\n<code>--function-name</code> commandline argument.</p>\n<pre><code>qpyson \"def f(d): return d[0]\" examples/iris.json\n\n{\n  \"sepalLength\": 5.1,\n  \"sepalWidth\": 3.5,\n  \"petalLength\": 1.4,\n  \"petalWidth\": 0.2,\n  \"species\": \"setosa\"\n}\n</code></pre>\n<p>We can also write custom functions in a Python file.</p>\n<pre><code>cat examples/iris_explore.py\n\ndef f(d):\n    return d[0]\n\n\ndef f2(d, max_items: int = 10):\n    return d[:max_items]\n\n\ndef f3(d, max_items: int = 5):\n    return [x for x in d if x[\"species\"] == \"setosa\"][:max_items]\n\n\ndef f4(d, sort_field: str, sort_direction: str = \"asc\", max_items: int = 5):\n    reverse = not (sort_direction == \"asc\")\n    d.sort(key=lambda x: x[sort_field], reverse=reverse)\n    return d[:max_items]\n\n\ndef f0(d):\n    # Identity operator\n    return d\n\n\ndef first(d):\n    return d[0]\n\n\ndef p(d, field: str = \"sepalLength\"):\n    import pandas as pd\n\n    df = pd.DataFrame.from_dict(d)\n    sdf = df.describe()\n    return sdf.to_dict()[field]\n</code></pre>\n<p>Executing <code>--help</code> will show the output options.</p>\n<pre><code>qpyson examples/iris_explore.py examples/iris.json --help\n\nusage: qpyson [-f FUNCTION_NAME] [-n] [--indent INDENT] [-t]\n              [--table-style TABLE_STYLE]\n              [--log-level {CRITICAL,ERROR,WARNING,INFO,DEBUG,NOTSET}]\n              [--help]\n              path_or_cmd json_file\n\nUtil to use Python to process (e.g., filter, map) JSON files\n\npositional arguments:\n  path_or_cmd           Path to python file, or python cmd\n  json_file             Path to JSON file\n\noptional arguments:\n  -f FUNCTION_NAME, --function-name FUNCTION_NAME\n                        Function name (default: f)\n  -n, --no-pretty       (Non-table) Pretty print the output of dicts and list\n                        of dicts (default: False)\n  --indent INDENT       (Non-table) Pretty print indent spacing (default: 2)\n  -t, --print-table     Pretty print results (default: False)\n  --table-style TABLE_STYLE\n                        Table fmt style using Tabulate. See\n                        https://github.com/astanin/python-tabulate#table-\n                        format for available options (default: simple)\n  --log-level {CRITICAL,ERROR,WARNING,INFO,DEBUG,NOTSET}\n                        Log level (default: NOTSET)\n  --help                Show this help message and exit (default: False)\n</code></pre>\n<p>Executing function <code>f</code>, yields:</p>\n<pre><code>qpyson examples/iris_explore.py examples/iris.json \n\n{\n  \"sepalLength\": 5.1,\n  \"sepalWidth\": 3.5,\n  \"petalLength\": 1.4,\n  \"petalWidth\": 0.2,\n  \"species\": \"setosa\"\n}\n</code></pre>\n<p>The output view can be changed to a table view using <code>--print-table</code> or\n<code>-t</code>.</p>\n<pre><code>qpyson examples/iris_explore.py examples/iris.json --print-table --table-style github\n\n|   sepalLength |   sepalWidth |   petalLength |   petalWidth | species   |\n|---------------|--------------|---------------|--------------|-----------|\n|           5.1 |          3.5 |           1.4 |          0.2 | setosa    |\n</code></pre>\n<p>A better example using function <code>f2</code> defined in <code>iris_explore.py</code></p>\n<pre><code>qpyson examples/iris_explore.py examples/iris.json  --function-name f2 --print-table\n\n  sepalLength    sepalWidth    petalLength    petalWidth  species\n-------------  ------------  -------------  ------------  ---------\n          5.1           3.5            1.4           0.2  setosa\n          4.9           3              1.4           0.2  setosa\n          4.7           3.2            1.3           0.2  setosa\n          4.6           3.1            1.5           0.2  setosa\n          5             3.6            1.4           0.2  setosa\n          5.4           3.9            1.7           0.4  setosa\n          4.6           3.4            1.4           0.3  setosa\n          5             3.4            1.5           0.2  setosa\n          4.4           2.9            1.4           0.2  setosa\n          4.9           3.1            1.5           0.1  setosa\n</code></pre>\n<p>Custom functions can be defined with required or optional values (with\ndefaults) combined with Python 3 type annotations to generate</p>\n<pre><code>cat examples/iris.py\n\n# More examples that demonstrate generating commandline arguments\n\n\ndef f(d, sort_field: str, sort_direction: str = \"asc\", max_items: int = 5):\n    reverse = not (sort_direction == \"asc\")\n    d.sort(key=lambda x: x[sort_field], reverse=reverse)\n    return d[:max_items]\n\n\ndef g(d, field: str = \"sepalLength\"):\n    import pandas as pd\n\n    df = pd.DataFrame.from_dict(d)\n    sdf = df.describe()\n    return sdf.to_dict()[field]\n</code></pre>\n<p>And calling <code>--help</code> will show the custom function specific arguments\n(e.g., <code>--max_items</code> and <code>--sort_direction</code>)</p>\n<pre><code>qpyson examples/iris.py examples/iris.json --help\n\nusage: qpyson [-f FUNCTION_NAME] [-n] [--indent INDENT] [-t]\n              [--table-style TABLE_STYLE]\n              [--log-level {CRITICAL,ERROR,WARNING,INFO,DEBUG,NOTSET}]\n              [--help] [--sort_field SORT_FIELD]\n              [--sort_direction SORT_DIRECTION] [--max_items MAX_ITEMS]\n              path_or_cmd json_file\n\nUtil to use Python to process (e.g., filter, map) JSON files\n\npositional arguments:\n  path_or_cmd           Path to python file, or python cmd\n  json_file             Path to JSON file\n\noptional arguments:\n  -f FUNCTION_NAME, --function-name FUNCTION_NAME\n                        Function name (default: f)\n  -n, --no-pretty       (Non-table) Pretty print the output of dicts and list\n                        of dicts (default: False)\n  --indent INDENT       (Non-table) Pretty print indent spacing (default: 2)\n  -t, --print-table     Pretty print results (default: False)\n  --table-style TABLE_STYLE\n                        Table fmt style using Tabulate. See\n                        https://github.com/astanin/python-tabulate#table-\n                        format for available options (default: simple)\n  --log-level {CRITICAL,ERROR,WARNING,INFO,DEBUG,NOTSET}\n                        Log level (default: NOTSET)\n  --help                Show this help message and exit (default: False)\n  --sort_field SORT_FIELD\n                        sort_field type:&lt;class 'str'&gt; from custom func `f`\n                        (default: _empty)\n  --sort_direction SORT_DIRECTION\n                        sort_direction type:&lt;class 'str'&gt; from custom func `f`\n                        (default: asc)\n  --max_items MAX_ITEMS\n                        max_items type:&lt;class 'int'&gt; from custom func `f`\n                        (default: 5)\n</code></pre>\n<p>And calling with custom options yields:</p>\n<pre><code>qpyson examples/iris.py examples/iris.json -t --max_items=3 --sort_direction=desc --sort_field sepalLength\n\n  sepalLength    sepalWidth    petalLength    petalWidth  species\n-------------  ------------  -------------  ------------  ---------\n          7.9           3.8            6.4           2    virginica\n          7.7           3.8            6.7           2.2  virginica\n          7.7           2.6            6.9           2.3  virginica\n</code></pre>\n<p>Another Example calling pandas underneath the hood to get a quick\nsummary of the data.</p>\n<pre><code>qpyson examples/iris.py examples/iris.json -t -f g --field=sepalLength\n\n  count     mean       std    min    25%    50%    75%    max\n-------  -------  --------  -----  -----  -----  -----  -----\n    150  5.84333  0.828066    4.3    5.1    5.8    6.4    7.9\n</code></pre>\n<p>It\u2019s also possible to create thin JSON munging tools for configuration\nof systems or tools that take JSON as input.</p>\n<p>For example a JSON configuration template with defaults.</p>\n<pre><code>cat examples/config_template.json\n\n{\n  \"alpha\":  1234,\n  \"beta\": null,\n  \"gamma\": 90.1234\n}\n</code></pre>\n<p>And a processing function, <code>f</code>.</p>\n<pre><code>cat examples/config_processor.py\n\ndef f(dx, alpha: float, beta: float, gamma: float):\n    \"\"\"Simple example of config munging\"\"\"\n\n    def _set(k, v):\n        if v:\n            dx[k] = v\n\n    items = [(\"alpha\", alpha), (\"beta\", beta), (\"gamma\", gamma)]\n\n    for name, value in items:\n        _set(name, value)\n\n    dx[\"_comment\"] = \"Configured with qpyson\"\n    return dx\n</code></pre>\n<p>Running <code>--help</code> will show the supported configuration options.</p>\n<pre><code>qpyson examples/config_processor.py examples/config_template.json --help\n\nusage: qpyson [-f FUNCTION_NAME] [-n] [--indent INDENT] [-t]\n              [--table-style TABLE_STYLE]\n              [--log-level {CRITICAL,ERROR,WARNING,INFO,DEBUG,NOTSET}]\n              [--help] [--alpha ALPHA] [--beta BETA] [--gamma GAMMA]\n              path_or_cmd json_file\n\nUtil to use Python to process (e.g., filter, map) JSON files\n\npositional arguments:\n  path_or_cmd           Path to python file, or python cmd\n  json_file             Path to JSON file\n\noptional arguments:\n  -f FUNCTION_NAME, --function-name FUNCTION_NAME\n                        Function name (default: f)\n  -n, --no-pretty       (Non-table) Pretty print the output of dicts and list\n                        of dicts (default: False)\n  --indent INDENT       (Non-table) Pretty print indent spacing (default: 2)\n  -t, --print-table     Pretty print results (default: False)\n  --table-style TABLE_STYLE\n                        Table fmt style using Tabulate. See\n                        https://github.com/astanin/python-tabulate#table-\n                        format for available options (default: simple)\n  --log-level {CRITICAL,ERROR,WARNING,INFO,DEBUG,NOTSET}\n                        Log level (default: NOTSET)\n  --help                Show this help message and exit (default: False)\n  --alpha ALPHA         alpha type:&lt;class 'float'&gt; from custom func `f`\n                        (default: _empty)\n  --beta BETA           beta type:&lt;class 'float'&gt; from custom func `f`\n                        (default: _empty)\n  --gamma GAMMA         gamma type:&lt;class 'float'&gt; from custom func `f`\n                        (default: _empty)\n</code></pre>\n<p>Now configuring <code>alpha</code>, <code>beta</code> and <code>gamma</code>.</p>\n<pre><code>qpyson examples/config_processor.py examples/config_template.json --alpha 1.23 --beta 2.34 --gamma 3.45\n\n{\n  \"alpha\": 1.23,\n  \"beta\": 2.34,\n  \"gamma\": 3.45,\n  \"_comment\": \"Configured with qpyson\"\n}\n</code></pre>\n<h1>Testing</h1>\n<p>Testing is currently done using RMarkdown using the make target <code>doc</code>.</p>\n<p>This should probably be ported to non-R based approach. However, this\ncurrent approach does keep the docs (e.g., README.md) up to date.</p>\n<h1>Related JQ-ish tools</h1>\n<p><a href=\"https://github.com/dbohdan/structured-text-tools#json\" rel=\"nofollow\">https://github.com/dbohdan/structured-text-tools#json</a></p>\n\n          </div>"}, "last_serial": 6491896, "releases": {"0.2.0": [{"comment_text": "", "digests": {"md5": "3923f6e4cc73fdbb92efeccfc0969153", "sha256": "1341a4029081175378a0420d45f56ee58764e4effd7e58caa0905ada3526e6d9"}, "downloads": -1, "filename": "qpyson-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "3923f6e4cc73fdbb92efeccfc0969153", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 8766, "upload_time": "2020-01-21T02:44:05", "upload_time_iso_8601": "2020-01-21T02:44:05.342800Z", "url": "https://files.pythonhosted.org/packages/56/5c/e4e00e93881253d784e4d7d1bf7149251ba09bc80120a7e44e0c53fedc4b/qpyson-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "84a4e5e32e2fcd8e57e21da0b120c136", "sha256": "3159f8d0084fdcb831d97d93ac6e7fe692ff2f0d36086c43af8cf7845de48146"}, "downloads": -1, "filename": "qpyson-0.2.0.tar.gz", "has_sig": false, "md5_digest": "84a4e5e32e2fcd8e57e21da0b120c136", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 9372, "upload_time": "2020-01-21T02:44:07", "upload_time_iso_8601": "2020-01-21T02:44:07.819862Z", "url": "https://files.pythonhosted.org/packages/78/76/6fc76b57a3f53c5afddb5db510371ed14d893131caf35515c8bf91301ce1/qpyson-0.2.0.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "d7273c9c165d4d20eb8428e380a9ec5f", "sha256": "c48fc0563f3da5ceb0904d38345511112d610ed5ecf115ef3a92faeda3e80ef1"}, "downloads": -1, "filename": "qpyson-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "d7273c9c165d4d20eb8428e380a9ec5f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 8903, "upload_time": "2020-01-21T03:32:33", "upload_time_iso_8601": "2020-01-21T03:32:33.328734Z", "url": "https://files.pythonhosted.org/packages/1e/1e/fe0ffed1cc45288dac68876d23e69ae5783082fa290ee9d6243c3c4c93e7/qpyson-0.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d08c806640602860b3f979bc23735bbc", "sha256": "6401dbc309921b3d1fcfeb8dec0805890a669a54cdd8d9dbb2ac2ce1c7954df3"}, "downloads": -1, "filename": "qpyson-0.3.0.tar.gz", "has_sig": false, "md5_digest": "d08c806640602860b3f979bc23735bbc", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 9640, "upload_time": "2020-01-21T03:32:34", "upload_time_iso_8601": "2020-01-21T03:32:34.629776Z", "url": "https://files.pythonhosted.org/packages/84/7a/86d9772592d55e16e053c5dc06bb8f09586cc6ce475bd8ad77ec7c16237e/qpyson-0.3.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d7273c9c165d4d20eb8428e380a9ec5f", "sha256": "c48fc0563f3da5ceb0904d38345511112d610ed5ecf115ef3a92faeda3e80ef1"}, "downloads": -1, "filename": "qpyson-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "d7273c9c165d4d20eb8428e380a9ec5f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 8903, "upload_time": "2020-01-21T03:32:33", "upload_time_iso_8601": "2020-01-21T03:32:33.328734Z", "url": "https://files.pythonhosted.org/packages/1e/1e/fe0ffed1cc45288dac68876d23e69ae5783082fa290ee9d6243c3c4c93e7/qpyson-0.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d08c806640602860b3f979bc23735bbc", "sha256": "6401dbc309921b3d1fcfeb8dec0805890a669a54cdd8d9dbb2ac2ce1c7954df3"}, "downloads": -1, "filename": "qpyson-0.3.0.tar.gz", "has_sig": false, "md5_digest": "d08c806640602860b3f979bc23735bbc", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 9640, "upload_time": "2020-01-21T03:32:34", "upload_time_iso_8601": "2020-01-21T03:32:34.629776Z", "url": "https://files.pythonhosted.org/packages/84/7a/86d9772592d55e16e053c5dc06bb8f09586cc6ce475bd8ad77ec7c16237e/qpyson-0.3.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:09:19 2020"}