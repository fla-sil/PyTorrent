{"info": {"author": "Raymond Penners", "author_email": "raymond.penners@intenct.nl", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Web Environment", "Framework :: Django", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.6", "Topic :: Software Development :: Libraries :: Application Frameworks", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "=============================\nWelcome to django-trackstats!\n=============================\n\n.. image:: https://badge.fury.io/py/django-trackstats.png\n   :target: http://badge.fury.io/py/django-trackstats\n\n.. image:: https://travis-ci.org/pennersr/django-trackstats.png\n   :target: http://travis-ci.org/pennersr/django-trackstats\n\n.. image:: https://img.shields.io/pypi/v/django-trackstats.svg\n   :target: https://pypi.python.org/pypi/django-trackstats\n\n.. image:: https://coveralls.io/repos/pennersr/django-trackstats/badge.png?branch=master\n   :alt: Coverage Status\n   :target: https://coveralls.io/r/pennersr/django-trackstats\n\n.. image:: https://pennersr.github.io/img/bitcoin-badge.svg\n   :target: https://blockchain.info/address/1AJXuBMPHkaDCNX2rwAy34bGgs7hmrePEr\n\nKeep track of your statistics.\n\nSource code\n  http://github.com/pennersr/django-trackstats\n\n\nUse Case\n========\n\n- You need an elegant solution for storing statistics in a generic and structural fashion.\n\n- You need to denormalize the results of various aggregated queries.\n\n- You require access to the stored statistics within your application layer.\n\nSo, the focus is purely on storing statistics for use within your application later\non. Other features, such as charting, reports, OLAP, query builders, slicing &\ndicing, integration with ``Datadog`` and the likes are all beyond scope.\n\n\nConcepts\n========\n\nThe following concepts are used:\n\nMetric\n  A piece of information to keep track of. For example, \"Order count\",\n  or \"Number of users signed up\".\n\nDomain\n  Metrics are organized in groups, each group is called a domain. For\n  example you can have a \"shopping\" domain with metrics such as \"Order\n  count\", \"Items sold\", \"Products viewed\", and a \"users\" domain with\n  \"Login count\", \"Signup count\". Or, in case you are tracking external\n  statistics from social networks, you may introduce a \"Twitter\"\n  domain, and metrics \"Followers count\".\n\nStatistic\n  Used to store the actual values by date, for a specific metric.\n\nPeriod\n  The time period for which the stored value holds. For example, you\n  can keep track of cumulative, all-time, numbers (`Period.LIFETIME`),\n  store incremental values on a daily basis (`Period.DAY`), or keep\n  track of a rolling count for the last 7 days (`Period.WEEK`).\n\nReference IDs\n  Domains and metrics must be assigned unique reference IDs (of type\n  string). Rationale: Having a human readable, non PK based, reference\n  is esential as soon as you are going to export statistics.\n\n\nUsage\n=====\n\nFirst, setup your domains::\n\n    from trackstats.models import Domain\n\n    Domain.objects.SHOPPING = Domain.objects.register(\n        ref='shopping',\n        name='Shopping')\n    Domain.objects.USERS = Domain.objects.register(\n        ref='users',\n        name='Users')\n    Domain.objects.TWITTER = Domain.objects.register(\n        ref='twitter',\n        name='Twitter')\n\nDefine a few metrics::\n\n    from trackstats.models import Domain, Metric\n\n    Metric.objects.SHOPPING_ORDER_COUNT = Metric.objects.register(\n        domain=Domain.objects.SHOPPING,\n        ref='order_count',\n        name='Number of orders sold')\n    Metric.objects.USERS_USER_COUNT = Metric.objects.register(\n        domain=Domain.objects.USERS,\n        ref='user_count',\n        name='Number of users signed up')\n    Metric.objects.TWITTER_FOLLOWER = Metric.objects.register(\n        # Matches Twitter API\n        ref='followers_count',\n        domain=Domain.objects.TWITTER)\n\nNow, let's store some one-off statistics::\n\n    from trackstats.models import StatisticByDate, Domain, Metric, Period\n\n    # All-time, cumulative, statistic\n    n = Order.objects.all().count()\n    StatisticByDate.objects.record(\n        metric=Metric.objects.SHOPPING_ORDER_COUNT,\n        value=n,\n        Period=Period.LIFETIME)\n\n    # Users signed up, at a specific date\n    dt = date.today()\n    n = User.objects.filter(\n        date_joined__day=dt.day,\n        date_joined__month=dt.month,\n        date_joined__year=dt.year).count()\n    StatisticByDate.objects.record(\n        metric=Metric.objects.USERS_USER_COUNT,\n        value=n,\n        Period=Period.DAY)\n\nCreating code to store statistics yourself can be a tedious job.\nLuckily, a few shortcuts are available to track statistics without\nhaving to write any code yourself.\n\nConsider you want to keep track of the number of comments created on a\ndaily basis::\n\n    from trackstats.trackers import CountObjectsByDateTracker\n\n    CountObjectsByDateTracker(\n        period=Period.DAY,\n        metric=Metric.objects.COMMENT_COUNT,\n        date_field='timestamp').track(Comment.objects.all())\n\nOr, in case you want to track the number of comments, per user, on a daily\nbasis::\n\n    CountObjectsByDateAndObjectTracker(\n        period=Period.DAY,\n        metric=Metric.objects.COMMENT_COUNT,\n        # comment.user points to a User\n        object_model=User,\n        object_field='user',\n        # Comment.timestamp is used for grouping\n        date_field='timestamp').track(Comment.objects.all())\n\n\nModels\n======\n\nThe `StatisticByDate` model represents statistics grouped by date --\nthe most common use case.\n\nAnother common use case is to group by both date and some other object\n(e.g. a user, category, site).  For this, use\n`StatisticByDateAndObject`. It uses a generic foreign key.\n\nIf you need to group in a different manner, e.g. by country, province\nand date, you can use the `AbstractStatistic` base class to build just\nthat.\n\n\nCross-Selling\n=============\n\nIf you like this, you may also like:\n\n- django-allauth: https://github.com/pennersr/django-allauth\n- netwell: https://github.com/pennersr/netwell\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/pennersr/django-trackstats", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "django-trackstats", "package_url": "https://pypi.org/project/django-trackstats/", "platform": "any", "project_url": "https://pypi.org/project/django-trackstats/", "project_urls": {"Homepage": "http://github.com/pennersr/django-trackstats"}, "release_url": "https://pypi.org/project/django-trackstats/0.5.0/", "requires_dist": null, "requires_python": "", "summary": "Statistics storage for Django", "version": "0.5.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"http://badge.fury.io/py/django-trackstats\" rel=\"nofollow\"><img alt=\"https://badge.fury.io/py/django-trackstats.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8bb1469fb68ea47e733b0749d53b7fb332d0593d/68747470733a2f2f62616467652e667572792e696f2f70792f646a616e676f2d747261636b73746174732e706e67\"></a>\n<a href=\"http://travis-ci.org/pennersr/django-trackstats\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/pennersr/django-trackstats.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f935830da559ba87b8cdd286ff23688e19dd2027/68747470733a2f2f7472617669732d63692e6f72672f70656e6e657273722f646a616e676f2d747261636b73746174732e706e67\"></a>\n<a href=\"https://pypi.python.org/pypi/django-trackstats\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/v/django-trackstats.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c501c2e69a2bb803cc9b7fd0a50862b8ec1911cd/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f646a616e676f2d747261636b73746174732e737667\"></a>\n<a href=\"https://coveralls.io/r/pennersr/django-trackstats\" rel=\"nofollow\"><img alt=\"Coverage Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/11c45ecbe42a7fc577c932821b56788e1445bb66/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f70656e6e657273722f646a616e676f2d747261636b73746174732f62616467652e706e673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://blockchain.info/address/1AJXuBMPHkaDCNX2rwAy34bGgs7hmrePEr\" rel=\"nofollow\"><img alt=\"https://pennersr.github.io/img/bitcoin-badge.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a6c9643eb8aea02a730ef53d949feb57834ae87a/68747470733a2f2f70656e6e657273722e6769746875622e696f2f696d672f626974636f696e2d62616467652e737667\"></a>\n<p>Keep track of your statistics.</p>\n<dl>\n<dt>Source code</dt>\n<dd><a href=\"http://github.com/pennersr/django-trackstats\" rel=\"nofollow\">http://github.com/pennersr/django-trackstats</a></dd>\n</dl>\n<div id=\"use-case\">\n<h2>Use Case</h2>\n<ul>\n<li>You need an elegant solution for storing statistics in a generic and structural fashion.</li>\n<li>You need to denormalize the results of various aggregated queries.</li>\n<li>You require access to the stored statistics within your application layer.</li>\n</ul>\n<p>So, the focus is purely on storing statistics for use within your application later\non. Other features, such as charting, reports, OLAP, query builders, slicing &amp;\ndicing, integration with <tt>Datadog</tt> and the likes are all beyond scope.</p>\n</div>\n<div id=\"concepts\">\n<h2>Concepts</h2>\n<p>The following concepts are used:</p>\n<dl>\n<dt>Metric</dt>\n<dd>A piece of information to keep track of. For example, \u201cOrder count\u201d,\nor \u201cNumber of users signed up\u201d.</dd>\n<dt>Domain</dt>\n<dd>Metrics are organized in groups, each group is called a domain. For\nexample you can have a \u201cshopping\u201d domain with metrics such as \u201cOrder\ncount\u201d, \u201cItems sold\u201d, \u201cProducts viewed\u201d, and a \u201cusers\u201d domain with\n\u201cLogin count\u201d, \u201cSignup count\u201d. Or, in case you are tracking external\nstatistics from social networks, you may introduce a \u201cTwitter\u201d\ndomain, and metrics \u201cFollowers count\u201d.</dd>\n<dt>Statistic</dt>\n<dd>Used to store the actual values by date, for a specific metric.</dd>\n<dt>Period</dt>\n<dd>The time period for which the stored value holds. For example, you\ncan keep track of cumulative, all-time, numbers (<cite>Period.LIFETIME</cite>),\nstore incremental values on a daily basis (<cite>Period.DAY</cite>), or keep\ntrack of a rolling count for the last 7 days (<cite>Period.WEEK</cite>).</dd>\n<dt>Reference IDs</dt>\n<dd>Domains and metrics must be assigned unique reference IDs (of type\nstring). Rationale: Having a human readable, non PK based, reference\nis esential as soon as you are going to export statistics.</dd>\n</dl>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>First, setup your domains:</p>\n<pre>from trackstats.models import Domain\n\nDomain.objects.SHOPPING = Domain.objects.register(\n    ref='shopping',\n    name='Shopping')\nDomain.objects.USERS = Domain.objects.register(\n    ref='users',\n    name='Users')\nDomain.objects.TWITTER = Domain.objects.register(\n    ref='twitter',\n    name='Twitter')\n</pre>\n<p>Define a few metrics:</p>\n<pre>from trackstats.models import Domain, Metric\n\nMetric.objects.SHOPPING_ORDER_COUNT = Metric.objects.register(\n    domain=Domain.objects.SHOPPING,\n    ref='order_count',\n    name='Number of orders sold')\nMetric.objects.USERS_USER_COUNT = Metric.objects.register(\n    domain=Domain.objects.USERS,\n    ref='user_count',\n    name='Number of users signed up')\nMetric.objects.TWITTER_FOLLOWER = Metric.objects.register(\n    # Matches Twitter API\n    ref='followers_count',\n    domain=Domain.objects.TWITTER)\n</pre>\n<p>Now, let\u2019s store some one-off statistics:</p>\n<pre>from trackstats.models import StatisticByDate, Domain, Metric, Period\n\n# All-time, cumulative, statistic\nn = Order.objects.all().count()\nStatisticByDate.objects.record(\n    metric=Metric.objects.SHOPPING_ORDER_COUNT,\n    value=n,\n    Period=Period.LIFETIME)\n\n# Users signed up, at a specific date\ndt = date.today()\nn = User.objects.filter(\n    date_joined__day=dt.day,\n    date_joined__month=dt.month,\n    date_joined__year=dt.year).count()\nStatisticByDate.objects.record(\n    metric=Metric.objects.USERS_USER_COUNT,\n    value=n,\n    Period=Period.DAY)\n</pre>\n<p>Creating code to store statistics yourself can be a tedious job.\nLuckily, a few shortcuts are available to track statistics without\nhaving to write any code yourself.</p>\n<p>Consider you want to keep track of the number of comments created on a\ndaily basis:</p>\n<pre>from trackstats.trackers import CountObjectsByDateTracker\n\nCountObjectsByDateTracker(\n    period=Period.DAY,\n    metric=Metric.objects.COMMENT_COUNT,\n    date_field='timestamp').track(Comment.objects.all())\n</pre>\n<p>Or, in case you want to track the number of comments, per user, on a daily\nbasis:</p>\n<pre>CountObjectsByDateAndObjectTracker(\n    period=Period.DAY,\n    metric=Metric.objects.COMMENT_COUNT,\n    # comment.user points to a User\n    object_model=User,\n    object_field='user',\n    # Comment.timestamp is used for grouping\n    date_field='timestamp').track(Comment.objects.all())\n</pre>\n</div>\n<div id=\"models\">\n<h2>Models</h2>\n<p>The <cite>StatisticByDate</cite> model represents statistics grouped by date \u2013\nthe most common use case.</p>\n<p>Another common use case is to group by both date and some other object\n(e.g. a user, category, site).  For this, use\n<cite>StatisticByDateAndObject</cite>. It uses a generic foreign key.</p>\n<p>If you need to group in a different manner, e.g. by country, province\nand date, you can use the <cite>AbstractStatistic</cite> base class to build just\nthat.</p>\n</div>\n<div id=\"cross-selling\">\n<h2>Cross-Selling</h2>\n<p>If you like this, you may also like:</p>\n<ul>\n<li>django-allauth: <a href=\"https://github.com/pennersr/django-allauth\" rel=\"nofollow\">https://github.com/pennersr/django-allauth</a></li>\n<li>netwell: <a href=\"https://github.com/pennersr/netwell\" rel=\"nofollow\">https://github.com/pennersr/netwell</a></li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 3516680, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "d630d6f786164ff1ed9cbcd2aba87084", "sha256": "251211ba27185affd680fefce00acbac82750361fa86c0f03dcee8f18545fef0"}, "downloads": -1, "filename": "django-trackstats-0.1.0.tar.gz", "has_sig": false, "md5_digest": "d630d6f786164ff1ed9cbcd2aba87084", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12524, "upload_time": "2016-02-02T21:16:52", "upload_time_iso_8601": "2016-02-02T21:16:52.964587Z", "url": "https://files.pythonhosted.org/packages/56/d8/c20f276cb8bdc3c200827f87602748903bcf28af8376939ce00c22ed5eba/django-trackstats-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "39fc004008c3ed7e84828187eae24f48", "sha256": "03ab2f54388dc7f2ad6944e695ce33064971b027c15e2d0326a7135ec27ebff2"}, "downloads": -1, "filename": "django-trackstats-0.2.0.tar.gz", "has_sig": false, "md5_digest": "39fc004008c3ed7e84828187eae24f48", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13249, "upload_time": "2016-02-03T23:09:04", "upload_time_iso_8601": "2016-02-03T23:09:04.897343Z", "url": "https://files.pythonhosted.org/packages/0b/e9/e743caea3507747e75b295a094947cf19c6909750888c0fea264be8332db/django-trackstats-0.2.0.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "97364464b1f0f7f6a012636dcef27da6", "sha256": "51e3125251b1c2194f0030bbf6f4657f3bb326000e2934ccfce8313e405d07ce"}, "downloads": -1, "filename": "django-trackstats-0.3.0.tar.gz", "has_sig": false, "md5_digest": "97364464b1f0f7f6a012636dcef27da6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13302, "upload_time": "2016-03-01T11:24:40", "upload_time_iso_8601": "2016-03-01T11:24:40.438573Z", "url": "https://files.pythonhosted.org/packages/cb/34/3fd00c803ac120ab1e596b5e92e74cacf59ebb0c3bc7a956b375a1ff69dd/django-trackstats-0.3.0.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "7c484c72b6d38a52b340d6edb6542cd5", "sha256": "86d17d54ef765b7c3736aa63a7255fedbe25cb23776b5aabe362ca6c962b8b4b"}, "downloads": -1, "filename": "django-trackstats-0.3.1.tar.gz", "has_sig": false, "md5_digest": "7c484c72b6d38a52b340d6edb6542cd5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13344, "upload_time": "2016-03-01T13:44:28", "upload_time_iso_8601": "2016-03-01T13:44:28.009747Z", "url": "https://files.pythonhosted.org/packages/9d/73/1307b024a61762424ec439f5261414f9329c5306344b4a29cdf4f729f8e6/django-trackstats-0.3.1.tar.gz", "yanked": false}], "0.3.2": [{"comment_text": "", "digests": {"md5": "319096e54bb259785885dcf71e0849db", "sha256": "9c49760f03b9dbe6d0d45dc93cac88e07888a842bdfae038035b28c550e1a72e"}, "downloads": -1, "filename": "django-trackstats-0.3.2.tar.gz", "has_sig": false, "md5_digest": "319096e54bb259785885dcf71e0849db", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13490, "upload_time": "2016-03-03T16:06:11", "upload_time_iso_8601": "2016-03-03T16:06:11.261830Z", "url": "https://files.pythonhosted.org/packages/f0/84/da654487672997c41bee78f055a06033b406e6bc69d283e3a06d939c1ea7/django-trackstats-0.3.2.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "559715f3d36e167fd693851a4b2485ce", "sha256": "b87b16dbf5b6cb4015c2dc6cbd913cc1654b9e2b596e3a7d9cf60b8b88e74f42"}, "downloads": -1, "filename": "django-trackstats-0.4.0.tar.gz", "has_sig": false, "md5_digest": "559715f3d36e167fd693851a4b2485ce", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13522, "upload_time": "2016-08-16T10:21:37", "upload_time_iso_8601": "2016-08-16T10:21:37.497312Z", "url": "https://files.pythonhosted.org/packages/03/5f/0bc89e02ebb67df242a820d64992f8d8fba3a07600f7d89e44e97d69c147/django-trackstats-0.4.0.tar.gz", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "b58f708031bef2e98a1544e1c6abb081", "sha256": "52345a76704a1fce81bd8f8b035c3af2e1723b153c7b46ac4478b7fece587dea"}, "downloads": -1, "filename": "django-trackstats-0.5.0.tar.gz", "has_sig": false, "md5_digest": "b58f708031bef2e98a1544e1c6abb081", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15265, "upload_time": "2018-01-24T09:23:12", "upload_time_iso_8601": "2018-01-24T09:23:12.046523Z", "url": "https://files.pythonhosted.org/packages/a2/a2/0f510aa043a1db57ac695ce5fd231c8af1f2a4fe02328d60f5a635fa2346/django-trackstats-0.5.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b58f708031bef2e98a1544e1c6abb081", "sha256": "52345a76704a1fce81bd8f8b035c3af2e1723b153c7b46ac4478b7fece587dea"}, "downloads": -1, "filename": "django-trackstats-0.5.0.tar.gz", "has_sig": false, "md5_digest": "b58f708031bef2e98a1544e1c6abb081", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15265, "upload_time": "2018-01-24T09:23:12", "upload_time_iso_8601": "2018-01-24T09:23:12.046523Z", "url": "https://files.pythonhosted.org/packages/a2/a2/0f510aa043a1db57ac695ce5fd231c8af1f2a4fe02328d60f5a635fa2346/django-trackstats-0.5.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:52:22 2020"}