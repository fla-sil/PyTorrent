{"info": {"author": "Giorgio Borelli", "author_email": "giorgio@giorgioborelli.it", "bugtrack_url": null, "classifiers": ["Intended Audience :: System Administrators", "License :: OSI Approved :: GNU General Public License (GPL)", "Programming Language :: Python", "Topic :: Internet", "Topic :: System :: Monitoring", "Topic :: Utilities"], "description": "Introduction\n============\n\ncollective.warmup has been created to warm up web application's caches upon\nstart and restart.\n\nIt works by reading a configuration file containing a list of urls that\nare then invoked.\n\ncollective.warmup is inspired by Gil Forcada's `warmup_plone.py`_ script.\n\n\nWhy not a simple bash script?\n-----------------------------\n\nWhile the basic use case is very simple,\ncollective.warmup offers the following extra features:\n\n* Verifies the correctness of the response body (e.g. contains a certain string)\n* Can operate in *crawl mode*,\n  following links in pages to warm up all related pages\n* Can filter out certain urls according to a general definition\n\n\nInstallation\n============\n\ncollective.warmup can be installed in two ways:\n\n* As a normal python package via pip\n* Inside a `buildout`_, with optional integration with `Plone`_\n\nDependencies\n------------\n\n* `lxml`_\n\n\nManual installation\n-------------------\n\nTo install it (using `virtualenv`_, on a GNU/Debian machine)::\n\n    $ sudo apt-get install build-essential python-dev python-lxml python-virtualenv libxml2-dev libxslt1-dev\n    $ virtualenv warmup && cd warmup && souce bin/activate\n    (warmup) $ pip install collective.warmup\n\nand launch it with::\n\n    (warmup) $ bin/warmup <path/file.ini>\n\n\nAlternative installation with buildout\n--------------------------------------\n\nTo integrate collective.warmup in a `buildout`_ with `Plone`_,\nadd this to your configuration::\n\n    [buildout]\n    ...\n    parts =\n        ...\n        warmup\n\n\n    [instance]\n    ...\n    eggs +=\n        collective.warmup\n\n\n    [instance]\n    environment-vars +=\n        WARMUP_BIN ${buildout:directory}/bin/warmup\n        WARMUP_INI ${buildout:directory}/warmup.ini\n        WARMUP_HEALTH_THRESHOLD 50000\n\n\n    [warmup]\n    recipe = zc.recipe.egg:scripts\n    eggs = collective.warmup\n\n\nAfter executing the buildout you will find the warmup script\nin the ``bin`` directory.\n\nIn this example, the script will be executed automatically\nby the `Zope`_ instance each time it is started.\n\n\nConfiguration file\n------------------\n\nThis is a sample ``warmup.ini`` configuration::\n\n    [warmup]\n    enabled = True\n    sleep = 2\n    base_url = http://localhost\n    logfile = /path/to/warmup.log\n\n    urls =\n        Home page\n\n\n    [config]\n    max_attempts = 2\n    base_path = mysite\n\n\n    [Home page]\n    path = ${config:base_path}/\n    max_attempts = ${config:max_attempts}\n    check_exists =\n        Welcome\n    check_not_exists =\n        p0wned by\n    follow_links = True\n    ignore_middle =\n        @@\n        ++theme++\n        #\n        ?\n    ignore_end =\n        .css\n        .js\n        .png\n        .jpg\n        .jpeg\n        .gif\n        .xml\n        RSS\n        .ico\n\n\nOptions\n-------\n\nGlobal [warmup]\n###############\n\nenable : ``True`` or ``False``\n    If ``False``, the script will do nothing when invoked.\n\nsleep : integer\n    The number of seconds the script waits between url retrievals.\n    Defaults to ``2``.\n\nbase_url : a valid URL (**don't forget the protocol!**)\n    The base URL to check\n    (all paths in the various URL sections are relative to this URL).\n\nlog_file : a filesystem path\n    The file where the logs will be written.\n\nurls : a list of sections (separated by newline)\n    The URLs that we want to check.\n    Each URL must have its own section in the configuration file (see below)\n    and we reference these sections here (do not put real URLs here!).\n    It also set an order for the checks (which are executed sequentially).\n\n\nURL section\n###########\n\nmax_attempts : integer\n    The maximum number of attempts to check the url.\n    Defaults to ``2``\n\npath : the path to check\n    The path will be added to the ``base_url`` parameter in order to retrieve\n    the page url\n\ncheck_exists : list of strings\n    A list of strings that must be present in the page\n\ncheck_not_exists : list of strings\n    A list of strings that must not be present in the page\n\nfollow_links : ``True`` or ``False``\n    If ``True`` the script will follow the links in the page and will\n    perform the same checks for each link.\n\nignore_middle : list of strings\n    If ``follow_links`` is ``True``, the links containing one of these strings\n    will be ignored\n\nignore_end : list of strings\n    If ``follow_links`` is ``True``, the links ending with one of these strings\n    will be ignored\n\n\nHealth check\n------------\nIn order not to mark backend healthy too early by the load-balancer, before proper\nwarmup, this package defines a browser view called ``@@health.check`` which can be\nused within your load-balancer probe mechanism. See bellow a Varnish configuration\nexample::\n\n    backend instance_1 {\n        .host = \"localhost\";\n        .port = \"8081\";\n        .probe = {\n             .url = \"/health.check\";\n             .interval = 5s;\n             .timeout = 1s;\n             .window = 5;\n             .threshold = 3;\n         }\n    }\n\nThis way Varnish will mark the Zope instance backend healthy when\nZODB cache-size is bigger than ``WARMUP_HEALTH_THRESHOLD``. If you do not define\nthe ``WARMUP_HEALTH_THRESHOLD`` environment variable, the Zope instance backend\nwill be marked healthy as soon as Zope will be able to handle requests.\n\n\nCredits\n-------\n\n.. image:: http://www.abstract.it/logo-abstract-readme\n   :alt: Abstract Website\n   :target: http://abstract-technology.com/\n\n\n\n.. _virtualenv: http://www.virtualenv.org/en/latest/\n.. _Plone: http://plone.org\n.. _warmup_plone.py: https://gist.github.com/gforcada/7040082\n.. _buildout: http://www.buildout.org\n.. _Zope: http://zope.org\n.. _lxml: http://pypi.python.org/pypi/lxml\n\nChangelog\n=========\n\n1.2 (2016-09-08)\n----------------\n- Check for write permissions within logfile and fallback\n  to a temporary file if can't write instead of sys.exit\n  [avoinea]\n\n- Add @@health.check browser view to be used with load-balancer\n  health-check in order not to mark backend healthy too early\n  before proper warmup.\n  [avoinea]\n\n- Avoid zombie processes. [jone]\n\n- Add zcml:condition for Plone 3 compatibility\n  [gborelli]\n\n\n1.1 (2014-07-18)\n----------------\n\n- Python 2.4 support\n  [gborelli]\n\n\n1.0 (2014-04-06)\n----------------\n\n- First release", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://svn.plone.org/svn/collective/", "keywords": "", "license": "GPL", "maintainer": "", "maintainer_email": "", "name": "collective.warmup", "package_url": "https://pypi.org/project/collective.warmup/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/collective.warmup/", "project_urls": {"Homepage": "http://svn.plone.org/svn/collective/"}, "release_url": "https://pypi.org/project/collective.warmup/1.2/", "requires_dist": null, "requires_python": "", "summary": "Collective Warmup", "version": "1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"introduction\">\n<h2>Introduction</h2>\n<p>collective.warmup has been created to warm up web application\u2019s caches upon\nstart and restart.</p>\n<p>It works by reading a configuration file containing a list of urls that\nare then invoked.</p>\n<p>collective.warmup is inspired by Gil Forcada\u2019s <a href=\"https://gist.github.com/gforcada/7040082\" rel=\"nofollow\">warmup_plone.py</a> script.</p>\n<div id=\"why-not-a-simple-bash-script\">\n<h3>Why not a simple bash script?</h3>\n<p>While the basic use case is very simple,\ncollective.warmup offers the following extra features:</p>\n<ul>\n<li>Verifies the correctness of the response body (e.g. contains a certain string)</li>\n<li>Can operate in <em>crawl mode</em>,\nfollowing links in pages to warm up all related pages</li>\n<li>Can filter out certain urls according to a general definition</li>\n</ul>\n</div>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>collective.warmup can be installed in two ways:</p>\n<ul>\n<li>As a normal python package via pip</li>\n<li>Inside a <a href=\"http://www.buildout.org\" rel=\"nofollow\">buildout</a>, with optional integration with <a href=\"http://plone.org\" rel=\"nofollow\">Plone</a></li>\n</ul>\n<div id=\"dependencies\">\n<h3>Dependencies</h3>\n<ul>\n<li><a href=\"http://pypi.python.org/pypi/lxml\" rel=\"nofollow\">lxml</a></li>\n</ul>\n</div>\n<div id=\"manual-installation\">\n<h3>Manual installation</h3>\n<p>To install it (using <a href=\"http://www.virtualenv.org/en/latest/\" rel=\"nofollow\">virtualenv</a>, on a GNU/Debian machine):</p>\n<pre>$ sudo apt-get install build-essential python-dev python-lxml python-virtualenv libxml2-dev libxslt1-dev\n$ virtualenv warmup &amp;&amp; cd warmup &amp;&amp; souce bin/activate\n(warmup) $ pip install collective.warmup\n</pre>\n<p>and launch it with:</p>\n<pre>(warmup) $ bin/warmup &lt;path/file.ini&gt;\n</pre>\n</div>\n<div id=\"alternative-installation-with-buildout\">\n<h3>Alternative installation with buildout</h3>\n<p>To integrate collective.warmup in a <a href=\"http://www.buildout.org\" rel=\"nofollow\">buildout</a> with <a href=\"http://plone.org\" rel=\"nofollow\">Plone</a>,\nadd this to your configuration:</p>\n<pre>[buildout]\n...\nparts =\n    ...\n    warmup\n\n\n[instance]\n...\neggs +=\n    collective.warmup\n\n\n[instance]\nenvironment-vars +=\n    WARMUP_BIN ${buildout:directory}/bin/warmup\n    WARMUP_INI ${buildout:directory}/warmup.ini\n    WARMUP_HEALTH_THRESHOLD 50000\n\n\n[warmup]\nrecipe = zc.recipe.egg:scripts\neggs = collective.warmup\n</pre>\n<p>After executing the buildout you will find the warmup script\nin the <tt>bin</tt> directory.</p>\n<p>In this example, the script will be executed automatically\nby the <a href=\"http://zope.org\" rel=\"nofollow\">Zope</a> instance each time it is started.</p>\n</div>\n<div id=\"configuration-file\">\n<h3>Configuration file</h3>\n<p>This is a sample <tt>warmup.ini</tt> configuration:</p>\n<pre>[warmup]\nenabled = True\nsleep = 2\nbase_url = http://localhost\nlogfile = /path/to/warmup.log\n\nurls =\n    Home page\n\n\n[config]\nmax_attempts = 2\nbase_path = mysite\n\n\n[Home page]\npath = ${config:base_path}/\nmax_attempts = ${config:max_attempts}\ncheck_exists =\n    Welcome\ncheck_not_exists =\n    p0wned by\nfollow_links = True\nignore_middle =\n    @@\n    ++theme++\n    #\n    ?\nignore_end =\n    .css\n    .js\n    .png\n    .jpg\n    .jpeg\n    .gif\n    .xml\n    RSS\n    .ico\n</pre>\n</div>\n<div id=\"options\">\n<h3>Options</h3>\n<div id=\"global-warmup\">\n<h4>Global [warmup]</h4>\n<dl>\n<dt>enable <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\"><tt>True</tt> or <tt>False</tt></span></dt>\n<dd>If <tt>False</tt>, the script will do nothing when invoked.</dd>\n<dt>sleep <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">integer</span></dt>\n<dd>The number of seconds the script waits between url retrievals.\nDefaults to <tt>2</tt>.</dd>\n<dt>base_url <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">a valid URL (<strong>don\u2019t forget the protocol!</strong>)</span></dt>\n<dd>The base URL to check\n(all paths in the various URL sections are relative to this URL).</dd>\n<dt>log_file <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">a filesystem path</span></dt>\n<dd>The file where the logs will be written.</dd>\n<dt>urls <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">a list of sections (separated by newline)</span></dt>\n<dd>The URLs that we want to check.\nEach URL must have its own section in the configuration file (see below)\nand we reference these sections here (do not put real URLs here!).\nIt also set an order for the checks (which are executed sequentially).</dd>\n</dl>\n</div>\n<div id=\"url-section\">\n<h4>URL section</h4>\n<dl>\n<dt>max_attempts <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">integer</span></dt>\n<dd>The maximum number of attempts to check the url.\nDefaults to <tt>2</tt></dd>\n<dt>path <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">the path to check</span></dt>\n<dd>The path will be added to the <tt>base_url</tt> parameter in order to retrieve\nthe page url</dd>\n<dt>check_exists <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">list of strings</span></dt>\n<dd>A list of strings that must be present in the page</dd>\n<dt>check_not_exists <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">list of strings</span></dt>\n<dd>A list of strings that must not be present in the page</dd>\n<dt>follow_links <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\"><tt>True</tt> or <tt>False</tt></span></dt>\n<dd>If <tt>True</tt> the script will follow the links in the page and will\nperform the same checks for each link.</dd>\n<dt>ignore_middle <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">list of strings</span></dt>\n<dd>If <tt>follow_links</tt> is <tt>True</tt>, the links containing one of these strings\nwill be ignored</dd>\n<dt>ignore_end <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">list of strings</span></dt>\n<dd>If <tt>follow_links</tt> is <tt>True</tt>, the links ending with one of these strings\nwill be ignored</dd>\n</dl>\n</div>\n</div>\n<div id=\"health-check\">\n<h3>Health check</h3>\n<p>In order not to mark backend healthy too early by the load-balancer, before proper\nwarmup, this package defines a browser view called <tt>@@health.check</tt> which can be\nused within your load-balancer probe mechanism. See bellow a Varnish configuration\nexample:</p>\n<pre>backend instance_1 {\n    .host = \"localhost\";\n    .port = \"8081\";\n    .probe = {\n         .url = \"/health.check\";\n         .interval = 5s;\n         .timeout = 1s;\n         .window = 5;\n         .threshold = 3;\n     }\n}\n</pre>\n<p>This way Varnish will mark the Zope instance backend healthy when\nZODB cache-size is bigger than <tt>WARMUP_HEALTH_THRESHOLD</tt>. If you do not define\nthe <tt>WARMUP_HEALTH_THRESHOLD</tt> environment variable, the Zope instance backend\nwill be marked healthy as soon as Zope will be able to handle requests.</p>\n</div>\n<div id=\"credits\">\n<h3>Credits</h3>\n<a href=\"http://abstract-technology.com/\" rel=\"nofollow\"><img alt=\"Abstract Website\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8d673b795940b83ef8160d1af1319b336ca7838c/687474703a2f2f7777772e61627374726163742e69742f6c6f676f2d61627374726163742d726561646d65\"></a>\n</div>\n</div>\n<div id=\"changelog\">\n<h2>Changelog</h2>\n<div id=\"id1\">\n<h3>1.2 (2016-09-08)</h3>\n<ul>\n<li>Check for write permissions within logfile and fallback\nto a temporary file if can\u2019t write instead of sys.exit\n[avoinea]</li>\n<li>Add @@health.check browser view to be used with load-balancer\nhealth-check in order not to mark backend healthy too early\nbefore proper warmup.\n[avoinea]</li>\n<li>Avoid zombie processes. [jone]</li>\n<li>Add zcml:condition for Plone 3 compatibility\n[gborelli]</li>\n</ul>\n</div>\n<div id=\"id2\">\n<h3>1.1 (2014-07-18)</h3>\n<ul>\n<li>Python 2.4 support\n[gborelli]</li>\n</ul>\n</div>\n<div id=\"id3\">\n<h3>1.0 (2014-04-06)</h3>\n<ul>\n<li>First release</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 2331994, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "1cf5223c06b1ea7d002ca385be6bdebb", "sha256": "d0250130efd4a5aed17820533e937109a457eb30d8dcfd30571f71257c529cdf"}, "downloads": -1, "filename": "collective.warmup-1.0.zip", "has_sig": false, "md5_digest": "1cf5223c06b1ea7d002ca385be6bdebb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28595, "upload_time": "2014-04-06T15:14:21", "upload_time_iso_8601": "2014-04-06T15:14:21.727507Z", "url": "https://files.pythonhosted.org/packages/ee/f8/4ddf2a57f61206634bc53edcb3a2b07bf0165e4168c371e3ec5a52af6ab1/collective.warmup-1.0.zip", "yanked": false}], "1.1": [{"comment_text": "", "digests": {"md5": "8695b893d24d894726d4578f6706e308", "sha256": "9857eef986ecb1dccccdcb8d3005faffa1d3ccb964a6542aa518afbdf3f2e658"}, "downloads": -1, "filename": "collective.warmup-1.1.zip", "has_sig": false, "md5_digest": "8695b893d24d894726d4578f6706e308", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28715, "upload_time": "2014-07-18T10:01:28", "upload_time_iso_8601": "2014-07-18T10:01:28.095095Z", "url": "https://files.pythonhosted.org/packages/3a/93/212c4bbb889e4e3874a96deb956167f9ac63a1be1bb9a7625043e8b2bbeb/collective.warmup-1.1.zip", "yanked": false}], "1.2": [{"comment_text": "", "digests": {"md5": "74f10698bff26564d8a562f0d3514393", "sha256": "b635cd75d00c5c1d81ae834a570161be35f3754c86bb9f78864bfc9d3cdbfaa5"}, "downloads": -1, "filename": "collective.warmup-1.2.tar.gz", "has_sig": false, "md5_digest": "74f10698bff26564d8a562f0d3514393", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23484, "upload_time": "2016-09-08T18:03:31", "upload_time_iso_8601": "2016-09-08T18:03:31.029673Z", "url": "https://files.pythonhosted.org/packages/86/7e/3b2fec3c51ff3c90a6f96546362fe71e016eb0e43216ce89244b1caeaa78/collective.warmup-1.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "74f10698bff26564d8a562f0d3514393", "sha256": "b635cd75d00c5c1d81ae834a570161be35f3754c86bb9f78864bfc9d3cdbfaa5"}, "downloads": -1, "filename": "collective.warmup-1.2.tar.gz", "has_sig": false, "md5_digest": "74f10698bff26564d8a562f0d3514393", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23484, "upload_time": "2016-09-08T18:03:31", "upload_time_iso_8601": "2016-09-08T18:03:31.029673Z", "url": "https://files.pythonhosted.org/packages/86/7e/3b2fec3c51ff3c90a6f96546362fe71e016eb0e43216ce89244b1caeaa78/collective.warmup-1.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:44:43 2020"}