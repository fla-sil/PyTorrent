{"info": {"author": "Andres Riancho", "author_email": "andres.riancho@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: GNU General Public License v2 (GPLv2)", "Natural Language :: English", "Operating System :: POSIX :: Linux", "Programming Language :: Python", "Programming Language :: Python :: 2.7", "Topic :: System :: Monitoring"], "description": "Sentinela\n=========\n\n.. image:: https://travis-ci.org/andresriancho/sentinela.png?branch=master\n   :alt: Build Status\n   :align: right\n   :target: https://travis-ci.org/andresriancho/sentinela\n\nSentinela is a highly configurable operating system watchdog which can\ntake actions based on pre-configured rules.\n\nThe initial motivation was to create a daemon that would monitor a set\nof log files and if no activity was present shutdown the operating\nsystem. This was extremely useful for making sure my ec2 instances were\nshut down after a specified idle time.\n\nGiven Sentinela's modular nature, you can also extend it to monitor\nnetwork traffic, processes, disk usage, etc. and run any actions such as\nsending an email, send a SNMP alert, etc.\n\nBasic configuration\n===================\n\nSentinela configured using the ``config/sentinela.cfg`` file, which\nallows you to enable rules which are going to be run.\n\nRules are defined in python code and are found in the ``rules/``\ndirectory. In most cases rules use two different types of modules: \\*\n``modules/monitors/``: Once every minute read from a resource and store\nit's status. When required return ``True`` to trigger an action. \\*\n``modules/actions/``: Actions will run a command, send an email or any\nother python defined code you can imagine.\n\nRunning Sentinela\n=================\n\nTo start sentinela you need to run: ``text sudo python sentinela.py``\n\nYou can monitor all sentinela actions by reading the\n``/var/log/sentinela.log`` file. A regular sentinela log file looks like\nthis:\n\n::\n\n    [2013-03-29 11:41:20,440][INFO] Successfully started\n    [2013-03-29 11:41:20,441][DEBUG] Imported rules.apache_shutdown\n    [2013-03-29 12:51:50,480][DEBUG] Sentinela is alive\n    ...\n    [2013-03-29 12:58:34,009][DEBUG] Going to execute command \"shutdown now -h\".\n\nCreating your own rules\n=======================\n\nIntroduction\n------------\n\nCreating your own rules is easy, lets say we want to create a rule that\nprints the name of the monitor to sentinela's log file when the\n``/var/log/apache2/access.log`` logfile is inactive during 10 minutes'.\nThe code will look like this:\n\n::\n\n    1: from modules.monitors.new_log_entries import NewLogEntries\n    2: from modules.actions.debug_print import DebugPrint\n    3: \n    4: apache_log = NewLogEntries('/var/log/apache2/access.log', 10)\n    5: debug_print = DebugPrint()\n    6:\n    7:\n    8: def call_every_minute():\n    9:     if apache_log.call_every_minute():\n    10:        debug_print.do(apache_log)\n\nSource Code Analysis\n--------------------\n\nCommon rules will have a monitor and an action, in this case they\n``NewLogEntries`` and ``DebugPrint`` (lines 1 and 2).\n\nBoth of them need to be instanciated at the module level (lines 4 and 5)\nin order to be able to keep state. If you create your monitor or action\ninstances inside the ``call_every_minute`` a new instance is going to be\ncreated each time and no state will be kept.\n\nMonitors and actions can have parameters, in this line 4 we see how the\n``NewLogEntries`` monitor takes two parameters:\n\n* The log file to monitor for changes \n* How many minutes of inactivity it will wait until returning ``True``\n\nThe ``call_every_minute`` function (line 8) needs to be defined for a\nrule to be valid. This function, as the name indicates, will be called\nevery minute by sentinela. You could define any actions to be run in\nthis context, but we decide to call the monitor's ``call_every_minute``\nmethod and based on it's return value call the action with the\n``apache_log`` instance as parameter.\n\n``apache_log.call_every_minute()`` will return ``True`` only if the file\npassed as parameter doesn't have any new entries in 10 minutes.\n\n``debug_print.do`` will print the name of the monitor passed as\nparameter.\n\nEnabling new rules\n------------------\n\nOnce you've created your own rule, you'll have to follow these steps to\nrun them:\n\n* Copy your ``.py`` file to the ``rules/`` directory in the sentinela installation\n* Update the ``config/sentinela.cfg`` to include your rule name (without the extension)\n* Restart the sentinela daemon\n\nExample rules\n-------------\n\nExample rules can be found in the\n`sentinela/rules <https://github.com/andresriancho/sentinela/tree/master/sentinela/rules>`_\ndirectory in this repository.\n\nTesting new rules\n-----------------\n\nIn order to test your new rules before deploying them you can follow\n`these\nsteps <https://github.com/andresriancho/sentinela/wiki/Testing-your-changes>`_.\n\nReporting bugs\n==============\n\nReport your issues and feature requests in `Sentinela's issue\ntracker <https://github.com/andresriancho/sentinela/issues>`_ and I'll\nbe more than glad to fix them.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/andresriancho/sentinela/", "keywords": null, "license": "GNU General Public License v2 (GPLv2)", "maintainer": null, "maintainer_email": null, "name": "sentinela", "package_url": "https://pypi.org/project/sentinela/", "platform": "Linux", "project_url": "https://pypi.org/project/sentinela/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/andresriancho/sentinela/"}, "release_url": "https://pypi.org/project/sentinela/0.2.2/", "requires_dist": null, "requires_python": null, "summary": "Sentinela is a highly configurable operating system watchdog which can take actions based on pre-configured rules.", "version": "0.2.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"sentinela\">\n<h2>Sentinela</h2>\n<a href=\"https://travis-ci.org/andresriancho/sentinela\" rel=\"nofollow\"><img alt=\"Build Status\" class=\"align-right\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/49cf6c14f7ebe046bb63fb28a4a65bdbb80365a7/68747470733a2f2f7472617669732d63692e6f72672f616e647265737269616e63686f2f73656e74696e656c612e706e673f6272616e63683d6d6173746572\"></a>\n<p>Sentinela is a highly configurable operating system watchdog which can\ntake actions based on pre-configured rules.</p>\n<p>The initial motivation was to create a daemon that would monitor a set\nof log files and if no activity was present shutdown the operating\nsystem. This was extremely useful for making sure my ec2 instances were\nshut down after a specified idle time.</p>\n<p>Given Sentinela\u2019s modular nature, you can also extend it to monitor\nnetwork traffic, processes, disk usage, etc. and run any actions such as\nsending an email, send a SNMP alert, etc.</p>\n</div>\n<div id=\"basic-configuration\">\n<h2>Basic configuration</h2>\n<p>Sentinela configured using the <tt>config/sentinela.cfg</tt> file, which\nallows you to enable rules which are going to be run.</p>\n<p>Rules are defined in python code and are found in the <tt>rules/</tt>\ndirectory. In most cases rules use two different types of modules: *\n<tt>modules/monitors/</tt>: Once every minute read from a resource and store\nit\u2019s status. When required return <tt>True</tt> to trigger an action. *\n<tt>modules/actions/</tt>: Actions will run a command, send an email or any\nother python defined code you can imagine.</p>\n</div>\n<div id=\"running-sentinela\">\n<h2>Running Sentinela</h2>\n<p>To start sentinela you need to run: <tt>text sudo python sentinela.py</tt></p>\n<p>You can monitor all sentinela actions by reading the\n<tt>/var/log/sentinela.log</tt> file. A regular sentinela log file looks like\nthis:</p>\n<pre>[2013-03-29 11:41:20,440][INFO] Successfully started\n[2013-03-29 11:41:20,441][DEBUG] Imported rules.apache_shutdown\n[2013-03-29 12:51:50,480][DEBUG] Sentinela is alive\n...\n[2013-03-29 12:58:34,009][DEBUG] Going to execute command \"shutdown now -h\".\n</pre>\n</div>\n<div id=\"creating-your-own-rules\">\n<h2>Creating your own rules</h2>\n<div id=\"introduction\">\n<h3>Introduction</h3>\n<p>Creating your own rules is easy, lets say we want to create a rule that\nprints the name of the monitor to sentinela\u2019s log file when the\n<tt>/var/log/apache2/access.log</tt> logfile is inactive during 10 minutes\u2019.\nThe code will look like this:</p>\n<pre>1: from modules.monitors.new_log_entries import NewLogEntries\n2: from modules.actions.debug_print import DebugPrint\n3:\n4: apache_log = NewLogEntries('/var/log/apache2/access.log', 10)\n5: debug_print = DebugPrint()\n6:\n7:\n8: def call_every_minute():\n9:     if apache_log.call_every_minute():\n10:        debug_print.do(apache_log)\n</pre>\n</div>\n<div id=\"source-code-analysis\">\n<h3>Source Code Analysis</h3>\n<p>Common rules will have a monitor and an action, in this case they\n<tt>NewLogEntries</tt> and <tt>DebugPrint</tt> (lines 1 and 2).</p>\n<p>Both of them need to be instanciated at the module level (lines 4 and 5)\nin order to be able to keep state. If you create your monitor or action\ninstances inside the <tt>call_every_minute</tt> a new instance is going to be\ncreated each time and no state will be kept.</p>\n<p>Monitors and actions can have parameters, in this line 4 we see how the\n<tt>NewLogEntries</tt> monitor takes two parameters:</p>\n<ul>\n<li>The log file to monitor for changes</li>\n<li>How many minutes of inactivity it will wait until returning <tt>True</tt></li>\n</ul>\n<p>The <tt>call_every_minute</tt> function (line 8) needs to be defined for a\nrule to be valid. This function, as the name indicates, will be called\nevery minute by sentinela. You could define any actions to be run in\nthis context, but we decide to call the monitor\u2019s <tt>call_every_minute</tt>\nmethod and based on it\u2019s return value call the action with the\n<tt>apache_log</tt> instance as parameter.</p>\n<p><tt>apache_log.call_every_minute()</tt> will return <tt>True</tt> only if the file\npassed as parameter doesn\u2019t have any new entries in 10 minutes.</p>\n<p><tt>debug_print.do</tt> will print the name of the monitor passed as\nparameter.</p>\n</div>\n<div id=\"enabling-new-rules\">\n<h3>Enabling new rules</h3>\n<p>Once you\u2019ve created your own rule, you\u2019ll have to follow these steps to\nrun them:</p>\n<ul>\n<li>Copy your <tt>.py</tt> file to the <tt>rules/</tt> directory in the sentinela installation</li>\n<li>Update the <tt>config/sentinela.cfg</tt> to include your rule name (without the extension)</li>\n<li>Restart the sentinela daemon</li>\n</ul>\n</div>\n<div id=\"example-rules\">\n<h3>Example rules</h3>\n<p>Example rules can be found in the\n<a href=\"https://github.com/andresriancho/sentinela/tree/master/sentinela/rules\" rel=\"nofollow\">sentinela/rules</a>\ndirectory in this repository.</p>\n</div>\n<div id=\"testing-new-rules\">\n<h3>Testing new rules</h3>\n<p>In order to test your new rules before deploying them you can follow\n<a href=\"https://github.com/andresriancho/sentinela/wiki/Testing-your-changes\" rel=\"nofollow\">these\nsteps</a>.</p>\n</div>\n</div>\n<div id=\"reporting-bugs\">\n<h2>Reporting bugs</h2>\n<p>Report your issues and feature requests in <a href=\"https://github.com/andresriancho/sentinela/issues\" rel=\"nofollow\">Sentinela\u2019s issue\ntracker</a> and I\u2019ll\nbe more than glad to fix them.</p>\n</div>\n\n          </div>"}, "last_serial": 799413, "releases": {"0.2.1": [{"comment_text": "", "digests": {"md5": "0f4f8a4fc5dad4e2a4ff6d03a35d3584", "sha256": "9b2198f22e989b06813b73e216b03cb4cbfa3c0f2726c0edfa88dbfd5fc21fa4"}, "downloads": -1, "filename": "sentinela-0.2.1.tar.gz", "has_sig": false, "md5_digest": "0f4f8a4fc5dad4e2a4ff6d03a35d3584", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8592, "upload_time": "2013-04-07T15:39:42", "upload_time_iso_8601": "2013-04-07T15:39:42.929178Z", "url": "https://files.pythonhosted.org/packages/64/78/ea586766ad20bdc6018f218b51ff223886deba61ee7cf9164f6e8d949ddf/sentinela-0.2.1.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "6049acc322d26d68e326b8623213d672", "sha256": "d588d485f7e06ed0173193965473f8650948ec95b12563a26f3f7e804a0c4596"}, "downloads": -1, "filename": "sentinela-0.2.2.tar.gz", "has_sig": false, "md5_digest": "6049acc322d26d68e326b8623213d672", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9121, "upload_time": "2013-04-07T16:00:15", "upload_time_iso_8601": "2013-04-07T16:00:15.890820Z", "url": "https://files.pythonhosted.org/packages/29/f6/9113301db69606de68680dbf97bd200eec319cd95df885c2556aeff5a1f6/sentinela-0.2.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "6049acc322d26d68e326b8623213d672", "sha256": "d588d485f7e06ed0173193965473f8650948ec95b12563a26f3f7e804a0c4596"}, "downloads": -1, "filename": "sentinela-0.2.2.tar.gz", "has_sig": false, "md5_digest": "6049acc322d26d68e326b8623213d672", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9121, "upload_time": "2013-04-07T16:00:15", "upload_time_iso_8601": "2013-04-07T16:00:15.890820Z", "url": "https://files.pythonhosted.org/packages/29/f6/9113301db69606de68680dbf97bd200eec319cd95df885c2556aeff5a1f6/sentinela-0.2.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:55:03 2020"}