{"info": {"author": "Mat\u011bj Fanta", "author_email": "fantamat93@gmail.com", "bugtrack_url": null, "classifiers": ["Operating System :: OS Independent", "Programming Language :: Python :: 3", "Topic :: Scientific/Engineering", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "# gtrain\n\n**Before you start using this package, please, read a part of README with heading Usage**\n\n\nProject that using abstraction of a model and data to define structures that can be used for learning. Model can bee learned by gtrain function to fit the data properly. By model, I mean an arbitrary neural network or some other structure that can be represented in TensorFlow. \n\nThis abstraction allows to implement almost everything you want without need to reimplementing learning algorithm all the time.\n\nFor example, it can easily handle various input lengths witch is not common in other implementations.\n\nHowever, it is necessary to define model from scratch in TensorFlow framework. On the other hand, this process is inevitable when you want to use some uncommon architecture.\n\n\n## Usage\n\nBelow, crucial concepts used by functions *gtrain* and *stran* are presented. Some of \n\nModel and Data describe methods of the classes that have to be overridden by their subclass.\n\nFinally, algorithm descriptions shows how the functions operate and use some of their parameters.\n\n### Model\n\n**build()**  The method that creates model's representation in TensorFlow. It also stores some placeholders that are returned by other methods of the model.\n\n**get_loss()**  Returns placeholder for a loss function.\n\n**get_placeholders()** Returns a list of placeholders for the input and output.\n\n**train_ended(session)** Executes after the training stops with session in which tre training was done.\n\n**name()** Returns a specific name for given object.\n\nFollowing methods are specific for the classification task, so in other cases, they can be implemented as some dummy functions, e.g., returning 1 all the time.\n\n**get_hits()**  Returns placeholder for a number of correctly classified samples.\n\n**get_counts()**  Returns placeholder for a number of samples passed into the model.\n\nIf you are familiar with TensorFlow sumarries then functions **get_train_summaries()** and **get_dev_summaries** allow you to add summaries into the training and validation steps, respectively.\n\n### Data\n\n**set_placeholders(placeholders_list)** It is called with an output from the method Model.get_placeholders() before training starts.\n\n**train_ended()**  Executes after the training stops.\n\n**get_dev_batches()** In validation stage, it returns a generator returning feed dictionaries for the tf.Session.run function. Each dictionary should have a value for each of previously obtained placeholders.\n\n**get_batches()** Similar to get_dev_batches but in the training stage.\n\n\n### *gtrain* - algorithm description\n\nBelow, a short description of the *gtrain* function is presented. The description aims to understanding of the synchronisation of the *gtrain* function and descendants of the Model and Data with respect to parameters *num_steps* and *evaluate_every*.  \n\nFor simplicity, the text between \\*\\*\\* describes what is happening in the place where it is located without using Python syntax.\n\n~~~\ndef gtrain(model, data, num_steps, evaluate_every):\n    model.build() # build model in newly created TF session\n    data.set_placeholders(model.get_placeholders())\n    for training_step in range(num_steps):\n        # train step\n        for feed_dict in data.get_batches():\n            ***Accumulate gradients, loss, and accuracy***\n        ***Apply gradients to the model by selected optimizer***\n        if training_step % evaluate_every == 0:\n            # evaluation step\n            for feed_dict in data.get_dev_batches():\n                ***Accumulate loss and accuracy***\n            ***Log validation loss and accuracy***\n            if ***Loss increses***:\n                ***Increment fails counter***\n    data.train_ended()\n    model.train_ended(***current session***)\n~~~\n\nThe accumulating procedure helps with memory requirements for large datasets. In addition, it allows the application of variable input size. It the such case, get batches functions returns a part of the batch with different sizes.\n\nPlease, be aware that parameter `num_steps` refers to the sum of application of optimizeri, i.e., how many times the weights are changed. So, if the data contains `batch_count` batches then training algorithm with `epoch` epochs has `num_steps = 100 * batch_count * epochs` and `evaluate_every = batch_count * epoch`.\n\n### *strain* - algorithm description\n\n~~~\ndef strain(model, data, num_steps, session=None):\n    if session is not None:\n        session = tf.Session()\n        with session.as_default()\n            model.build()\n            session.run(tf.global_variable_initializer())\n\n    data.set_placeholders(model.get_placeholders())\n\n    for _ in range(num_steps):\n        for feed_dict in data.get_batches():\n            ***Applie gradients with respect to data in feed_dict***\n    data.train_ended()\n    model.train_ended(session)\n    return session\n~~~\n\n\n## Examples\n\nThere are implemented examples of the subclasses of Model:\n\n* **FCNet** is representation of the multilayer perceptron.\n\n* **TextCNN** is convolutional nerual network for a text classification. Architecture of a type: convolution, over-all max pooling, additional fully connected layers.\n\nThere are also implementation of the subcasses of Data:\n\n* **AllData** in which the gradient is computed on all training samples each time.\n\n* **BatchData** in which the gradient application is conduct separately on subsets of training samples with specified size.\n\nExamples of applications gtrain function are included in a folder *example* in the github repository.\n\nArtificial dataset is used in the file **random_data_FC_net.py**. The gradient is computed on the whole data because the AllData subcalass of Data is used. The architecture of applied multilayer perceptron (MLP) is 2-3-3. The MLP is set to use MSE as loss function by setting \n\nThe second example located in the file **mnist_batch_data_FC_net.py**. This example applies data with batches that have a size 32 and teh architecture of applied NN is 784-30-20-10.\n\n## Module *utils*\n\nThe module *utils* presents some function that comes handy when applying trying procedure on classification task.\nFollowing list provide a short description of included functions for more informations see documentation.\n\n* **get_loss_and_accuracy** - retreave a loss and accuracy measures that were coomputed during the training and saved as a TensorFlow summary\n\n* **confmat** - computes confusion matrix of given two labels in either one-hot encoding representation or plain integer labels\n\n* **accuracy** - similar to confmat, but it computes accuracy.\n\n* **labels2probabilities** - transforms list of integer labels into one-hot encoding representation.\n\n* **save_weights** - saves list of numpy arrays\n\n* **load_weights** - loads list of numpy arrays saved by save_weights\n\n* **check_dir** - creates the whole directory path if not exists\n\n* **join_weights_and_biases** - joins two list of numpy arrays into one.\n\n* **get_class_vs_others_indexes** - generates indexes of given samples that contains samples with the same numbers from given class and all the others.\n\n\n## Module *statutils*\n\nRigorous statistical comparison of classifiers is complex task, because if more than two classifiers are present, more than one hypothesis is tested at the same time.\nProcedure of performance of statistical tests is described in an article with name \"Statistical comparisons of classifiers over multiple data sets\" published by Janez Dem\u0139\u02c7ar in 2006. Function *compere_classifiers* copies the process describe in this article.\n\nWARNING: This module requires to imoprt *scipy.stats*.\n\n**WARNING: Function *compere_classifiers* may require user input if it requires to find and input certain value in the statistical tables** \n\nExample for the usage of the function is presented in file *compere_classifiers.py* in example directory of the repository.\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/fantamat/gtrain", "keywords": "", "license": "Apache License 2.0", "maintainer": "", "maintainer_email": "", "name": "gtrain", "package_url": "https://pypi.org/project/gtrain/", "platform": "", "project_url": "https://pypi.org/project/gtrain/", "project_urls": {"Homepage": "https://github.com/fantamat/gtrain"}, "release_url": "https://pypi.org/project/gtrain/0.4.0/", "requires_dist": null, "requires_python": "", "summary": "Abstraction for general models in TensorFlow with implemented train function", "version": "0.4.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>gtrain</h1>\n<p><strong>Before you start using this package, please, read a part of README with heading Usage</strong></p>\n<p>Project that using abstraction of a model and data to define structures that can be used for learning. Model can bee learned by gtrain function to fit the data properly. By model, I mean an arbitrary neural network or some other structure that can be represented in TensorFlow.</p>\n<p>This abstraction allows to implement almost everything you want without need to reimplementing learning algorithm all the time.</p>\n<p>For example, it can easily handle various input lengths witch is not common in other implementations.</p>\n<p>However, it is necessary to define model from scratch in TensorFlow framework. On the other hand, this process is inevitable when you want to use some uncommon architecture.</p>\n<h2>Usage</h2>\n<p>Below, crucial concepts used by functions <em>gtrain</em> and <em>stran</em> are presented. Some of</p>\n<p>Model and Data describe methods of the classes that have to be overridden by their subclass.</p>\n<p>Finally, algorithm descriptions shows how the functions operate and use some of their parameters.</p>\n<h3>Model</h3>\n<p><strong>build()</strong>  The method that creates model's representation in TensorFlow. It also stores some placeholders that are returned by other methods of the model.</p>\n<p><strong>get_loss()</strong>  Returns placeholder for a loss function.</p>\n<p><strong>get_placeholders()</strong> Returns a list of placeholders for the input and output.</p>\n<p><strong>train_ended(session)</strong> Executes after the training stops with session in which tre training was done.</p>\n<p><strong>name()</strong> Returns a specific name for given object.</p>\n<p>Following methods are specific for the classification task, so in other cases, they can be implemented as some dummy functions, e.g., returning 1 all the time.</p>\n<p><strong>get_hits()</strong>  Returns placeholder for a number of correctly classified samples.</p>\n<p><strong>get_counts()</strong>  Returns placeholder for a number of samples passed into the model.</p>\n<p>If you are familiar with TensorFlow sumarries then functions <strong>get_train_summaries()</strong> and <strong>get_dev_summaries</strong> allow you to add summaries into the training and validation steps, respectively.</p>\n<h3>Data</h3>\n<p><strong>set_placeholders(placeholders_list)</strong> It is called with an output from the method Model.get_placeholders() before training starts.</p>\n<p><strong>train_ended()</strong>  Executes after the training stops.</p>\n<p><strong>get_dev_batches()</strong> In validation stage, it returns a generator returning feed dictionaries for the tf.Session.run function. Each dictionary should have a value for each of previously obtained placeholders.</p>\n<p><strong>get_batches()</strong> Similar to get_dev_batches but in the training stage.</p>\n<h3><em>gtrain</em> - algorithm description</h3>\n<p>Below, a short description of the <em>gtrain</em> function is presented. The description aims to understanding of the synchronisation of the <em>gtrain</em> function and descendants of the Model and Data with respect to parameters <em>num_steps</em> and <em>evaluate_every</em>.</p>\n<p>For simplicity, the text between *** describes what is happening in the place where it is located without using Python syntax.</p>\n<pre><code>def gtrain(model, data, num_steps, evaluate_every):\n    model.build() # build model in newly created TF session\n    data.set_placeholders(model.get_placeholders())\n    for training_step in range(num_steps):\n        # train step\n        for feed_dict in data.get_batches():\n            ***Accumulate gradients, loss, and accuracy***\n        ***Apply gradients to the model by selected optimizer***\n        if training_step % evaluate_every == 0:\n            # evaluation step\n            for feed_dict in data.get_dev_batches():\n                ***Accumulate loss and accuracy***\n            ***Log validation loss and accuracy***\n            if ***Loss increses***:\n                ***Increment fails counter***\n    data.train_ended()\n    model.train_ended(***current session***)\n</code></pre>\n<p>The accumulating procedure helps with memory requirements for large datasets. In addition, it allows the application of variable input size. It the such case, get batches functions returns a part of the batch with different sizes.</p>\n<p>Please, be aware that parameter <code>num_steps</code> refers to the sum of application of optimizeri, i.e., how many times the weights are changed. So, if the data contains <code>batch_count</code> batches then training algorithm with <code>epoch</code> epochs has <code>num_steps = 100 * batch_count * epochs</code> and <code>evaluate_every = batch_count * epoch</code>.</p>\n<h3><em>strain</em> - algorithm description</h3>\n<pre><code>def strain(model, data, num_steps, session=None):\n    if session is not None:\n        session = tf.Session()\n        with session.as_default()\n            model.build()\n            session.run(tf.global_variable_initializer())\n\n    data.set_placeholders(model.get_placeholders())\n\n    for _ in range(num_steps):\n        for feed_dict in data.get_batches():\n            ***Applie gradients with respect to data in feed_dict***\n    data.train_ended()\n    model.train_ended(session)\n    return session\n</code></pre>\n<h2>Examples</h2>\n<p>There are implemented examples of the subclasses of Model:</p>\n<ul>\n<li>\n<p><strong>FCNet</strong> is representation of the multilayer perceptron.</p>\n</li>\n<li>\n<p><strong>TextCNN</strong> is convolutional nerual network for a text classification. Architecture of a type: convolution, over-all max pooling, additional fully connected layers.</p>\n</li>\n</ul>\n<p>There are also implementation of the subcasses of Data:</p>\n<ul>\n<li>\n<p><strong>AllData</strong> in which the gradient is computed on all training samples each time.</p>\n</li>\n<li>\n<p><strong>BatchData</strong> in which the gradient application is conduct separately on subsets of training samples with specified size.</p>\n</li>\n</ul>\n<p>Examples of applications gtrain function are included in a folder <em>example</em> in the github repository.</p>\n<p>Artificial dataset is used in the file <strong>random_data_FC_net.py</strong>. The gradient is computed on the whole data because the AllData subcalass of Data is used. The architecture of applied multilayer perceptron (MLP) is 2-3-3. The MLP is set to use MSE as loss function by setting</p>\n<p>The second example located in the file <strong>mnist_batch_data_FC_net.py</strong>. This example applies data with batches that have a size 32 and teh architecture of applied NN is 784-30-20-10.</p>\n<h2>Module <em>utils</em></h2>\n<p>The module <em>utils</em> presents some function that comes handy when applying trying procedure on classification task.\nFollowing list provide a short description of included functions for more informations see documentation.</p>\n<ul>\n<li>\n<p><strong>get_loss_and_accuracy</strong> - retreave a loss and accuracy measures that were coomputed during the training and saved as a TensorFlow summary</p>\n</li>\n<li>\n<p><strong>confmat</strong> - computes confusion matrix of given two labels in either one-hot encoding representation or plain integer labels</p>\n</li>\n<li>\n<p><strong>accuracy</strong> - similar to confmat, but it computes accuracy.</p>\n</li>\n<li>\n<p><strong>labels2probabilities</strong> - transforms list of integer labels into one-hot encoding representation.</p>\n</li>\n<li>\n<p><strong>save_weights</strong> - saves list of numpy arrays</p>\n</li>\n<li>\n<p><strong>load_weights</strong> - loads list of numpy arrays saved by save_weights</p>\n</li>\n<li>\n<p><strong>check_dir</strong> - creates the whole directory path if not exists</p>\n</li>\n<li>\n<p><strong>join_weights_and_biases</strong> - joins two list of numpy arrays into one.</p>\n</li>\n<li>\n<p><strong>get_class_vs_others_indexes</strong> - generates indexes of given samples that contains samples with the same numbers from given class and all the others.</p>\n</li>\n</ul>\n<h2>Module <em>statutils</em></h2>\n<p>Rigorous statistical comparison of classifiers is complex task, because if more than two classifiers are present, more than one hypothesis is tested at the same time.\nProcedure of performance of statistical tests is described in an article with name \"Statistical comparisons of classifiers over multiple data sets\" published by Janez Dem\u0139\u02c7ar in 2006. Function <em>compere_classifiers</em> copies the process describe in this article.</p>\n<p>WARNING: This module requires to imoprt <em>scipy.stats</em>.</p>\n<p><strong>WARNING: Function <em>compere_classifiers</em> may require user input if it requires to find and input certain value in the statistical tables</strong></p>\n<p>Example for the usage of the function is presented in file <em>compere_classifiers.py</em> in example directory of the repository.</p>\n\n          </div>"}, "last_serial": 5259856, "releases": {"0.2.1": [{"comment_text": "", "digests": {"md5": "53b68e6201d0384d504e6fadb2a9d12c", "sha256": "bcf9ee3935ce670d2f55166911ab9e97d6b0e34481501f9d5b9005243a9225e4"}, "downloads": -1, "filename": "gtrain-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "53b68e6201d0384d504e6fadb2a9d12c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9061, "upload_time": "2019-03-14T07:45:08", "upload_time_iso_8601": "2019-03-14T07:45:08.041159Z", "url": "https://files.pythonhosted.org/packages/d4/b6/77a5c8cde6f9aa1819b8460049eea85fbf44753c1fd5e39c3bfa9f78f683/gtrain-0.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4a143b22adaaf19b15e6827accf8fdd3", "sha256": "97d8fa5c34defde43e50d3ff64d8dda91904a64e135376d071add5c84303dd76"}, "downloads": -1, "filename": "gtrain-0.2.1.tar.gz", "has_sig": false, "md5_digest": "4a143b22adaaf19b15e6827accf8fdd3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6997, "upload_time": "2019-03-14T07:45:09", "upload_time_iso_8601": "2019-03-14T07:45:09.290683Z", "url": "https://files.pythonhosted.org/packages/a6/71/3c8053264d38d86db0da2fc577d3d1f2caa40a1e1a4927baf61f21084954/gtrain-0.2.1.tar.gz", "yanked": false}], "0.2.10": [{"comment_text": "", "digests": {"md5": "ea5e5fd32a7e8f124f8ceded7bac84c5", "sha256": "ff70d73fd31c3f2e184dce062ae7c49dd7b0803ace6fc236c8f292dfbb94240a"}, "downloads": -1, "filename": "gtrain-0.2.10-py3-none-any.whl", "has_sig": false, "md5_digest": "ea5e5fd32a7e8f124f8ceded7bac84c5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 11454, "upload_time": "2019-04-16T12:23:22", "upload_time_iso_8601": "2019-04-16T12:23:22.099125Z", "url": "https://files.pythonhosted.org/packages/4f/45/44345bbcd31e03fb1d6f009694a198293c274a69091a71b3af61859064e9/gtrain-0.2.10-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d5d4323f9e010b3bc44380e69f2aed27", "sha256": "4e09b5b8b6cfd95d78ad57c644b0de036ecd6f08803e5fb74efd8243417e99f9"}, "downloads": -1, "filename": "gtrain-0.2.10.tar.gz", "has_sig": false, "md5_digest": "d5d4323f9e010b3bc44380e69f2aed27", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9041, "upload_time": "2019-04-16T12:23:23", "upload_time_iso_8601": "2019-04-16T12:23:23.411662Z", "url": "https://files.pythonhosted.org/packages/41/43/11d5492eacba5c80dbbdf14c045149430cd520d12de338b904de780c7e5d/gtrain-0.2.10.tar.gz", "yanked": false}], "0.2.11": [{"comment_text": "", "digests": {"md5": "6c319e574c697a76eb2a226e95bfba03", "sha256": "1644c99619b36bf5ee3467030e26ce04f03c42f892887c9e071838ca8196a6fd"}, "downloads": -1, "filename": "gtrain-0.2.11-py3-none-any.whl", "has_sig": false, "md5_digest": "6c319e574c697a76eb2a226e95bfba03", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 11453, "upload_time": "2019-04-18T20:44:12", "upload_time_iso_8601": "2019-04-18T20:44:12.396092Z", "url": "https://files.pythonhosted.org/packages/71/92/db7e78de0554f0ea5512c1b3f3f8bd1c467f60fe209f1742c60dc6757a28/gtrain-0.2.11-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b27696738ac2e9737bfdac01190f66a8", "sha256": "152ebbbe02d421a1b893954b21f621257ba2e03f59c45dbb57835f2c9b8fd2ed"}, "downloads": -1, "filename": "gtrain-0.2.11.tar.gz", "has_sig": false, "md5_digest": "b27696738ac2e9737bfdac01190f66a8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9037, "upload_time": "2019-04-18T20:44:14", "upload_time_iso_8601": "2019-04-18T20:44:14.083312Z", "url": "https://files.pythonhosted.org/packages/d8/9b/94d1b33167b6dab6f544607051a8b08b996a5fa317a07e21788cd1563d9b/gtrain-0.2.11.tar.gz", "yanked": false}], "0.2.12": [{"comment_text": "", "digests": {"md5": "c7f6fa3c07cd248eba7c4380a6774861", "sha256": "395308e89310faaa7fd20efb06aae7f9e7c63ad9a893fa74e01dd37e46012f80"}, "downloads": -1, "filename": "gtrain-0.2.12-py3-none-any.whl", "has_sig": false, "md5_digest": "c7f6fa3c07cd248eba7c4380a6774861", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 11474, "upload_time": "2019-04-23T07:38:26", "upload_time_iso_8601": "2019-04-23T07:38:26.914138Z", "url": "https://files.pythonhosted.org/packages/17/25/e98fd899442f2d4136edb2608ee9f762243055cef93b55c2a885a149f582/gtrain-0.2.12-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8fab9be94be48ad1bce7aa04c1b60d6f", "sha256": "d50f433e6d497c607953895f4ed165f8521af6b1538db48e1985f7d686dfb429"}, "downloads": -1, "filename": "gtrain-0.2.12.tar.gz", "has_sig": false, "md5_digest": "8fab9be94be48ad1bce7aa04c1b60d6f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9075, "upload_time": "2019-04-23T07:38:28", "upload_time_iso_8601": "2019-04-23T07:38:28.417337Z", "url": "https://files.pythonhosted.org/packages/3b/1d/6fe5b5db1b8815130f3da51fdbc39b25499bcd8105682a7799e9ec79a32d/gtrain-0.2.12.tar.gz", "yanked": false}], "0.2.13": [{"comment_text": "", "digests": {"md5": "e6ae109e0852364bdada72a173157389", "sha256": "89276a2607692630681cf37f8793f9943093386c674b3713a117058d9e189ff5"}, "downloads": -1, "filename": "gtrain-0.2.13-py3-none-any.whl", "has_sig": false, "md5_digest": "e6ae109e0852364bdada72a173157389", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 11496, "upload_time": "2019-04-23T08:21:36", "upload_time_iso_8601": "2019-04-23T08:21:36.509678Z", "url": "https://files.pythonhosted.org/packages/58/f1/2ae9338608a2a48fb7b230d8eae7a309f411cf0301357d9452065349cb20/gtrain-0.2.13-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2c28215d169ebb8e148b96e4fbd9616e", "sha256": "6341fc48570debe2623f51f9edae3e386d76932c259d5a5fa7b543000fbbe44d"}, "downloads": -1, "filename": "gtrain-0.2.13.tar.gz", "has_sig": false, "md5_digest": "2c28215d169ebb8e148b96e4fbd9616e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9091, "upload_time": "2019-04-23T08:21:37", "upload_time_iso_8601": "2019-04-23T08:21:37.986832Z", "url": "https://files.pythonhosted.org/packages/51/4c/c14bb67b77130d76ab4c27ed744d13544b266a6498d70d6ce37e5f2a6772/gtrain-0.2.13.tar.gz", "yanked": false}], "0.2.14": [{"comment_text": "", "digests": {"md5": "3a8ec0f72840e70e9b430d7be75bd535", "sha256": "8f7ee0cc350f9787eaa68d1793658b936fc90ec4c6c2cd4081678cf20a20268e"}, "downloads": -1, "filename": "gtrain-0.2.14-py3-none-any.whl", "has_sig": false, "md5_digest": "3a8ec0f72840e70e9b430d7be75bd535", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 12069, "upload_time": "2019-04-25T12:05:33", "upload_time_iso_8601": "2019-04-25T12:05:33.246251Z", "url": "https://files.pythonhosted.org/packages/82/32/a1f531bea30b9ea098cff590f9e005e0d23b9f954838aeff375c00e259ca/gtrain-0.2.14-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "818fec211744c59ba7dab23f90cb0878", "sha256": "0fc54512b3d642671e31ad6444beb58b5b6d197e7315e3be177429346247cd14"}, "downloads": -1, "filename": "gtrain-0.2.14.tar.gz", "has_sig": false, "md5_digest": "818fec211744c59ba7dab23f90cb0878", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9667, "upload_time": "2019-04-25T12:05:35", "upload_time_iso_8601": "2019-04-25T12:05:35.358780Z", "url": "https://files.pythonhosted.org/packages/85/f3/513b0d3a59e2fa532579cbd8c73bd483e5aaf2280aa1ab70622bffa18f57/gtrain-0.2.14.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "b09ac3d005df5e5ecc60e91bc4b9b2d5", "sha256": "850d2252ce8be4c4d29ca01830660375210474875e92eb8328b8a806f8f3c302"}, "downloads": -1, "filename": "gtrain-0.2.2-py3-none-any.whl", "has_sig": false, "md5_digest": "b09ac3d005df5e5ecc60e91bc4b9b2d5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9002, "upload_time": "2019-03-14T21:12:49", "upload_time_iso_8601": "2019-03-14T21:12:49.149273Z", "url": "https://files.pythonhosted.org/packages/6e/f6/02eeaf9cc09d35bebaf9cf4bfa01e9bcb8ac8df4a03712837f4628fdd592/gtrain-0.2.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e994ae58af3b3ddb466dd79368eb2f6c", "sha256": "86b71a97658d9471c4824efde7f04cce2b98b1390b064109879d52fe14125072"}, "downloads": -1, "filename": "gtrain-0.2.2.tar.gz", "has_sig": false, "md5_digest": "e994ae58af3b3ddb466dd79368eb2f6c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6887, "upload_time": "2019-03-14T21:12:50", "upload_time_iso_8601": "2019-03-14T21:12:50.586259Z", "url": "https://files.pythonhosted.org/packages/e4/7e/d29fdfd79a47a30037a92f1814d098f75ac67c76d2a2a4a11a861f047681/gtrain-0.2.2.tar.gz", "yanked": false}], "0.2.3": [{"comment_text": "", "digests": {"md5": "72dcd050f7b2209983cb3d4d0134d1ed", "sha256": "1915f20bdb723e8b618df006260f9051f417262fa9e33701ffecbdb0c02e8ad0"}, "downloads": -1, "filename": "gtrain-0.2.3-py3-none-any.whl", "has_sig": false, "md5_digest": "72dcd050f7b2209983cb3d4d0134d1ed", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9004, "upload_time": "2019-03-15T11:46:03", "upload_time_iso_8601": "2019-03-15T11:46:03.567855Z", "url": "https://files.pythonhosted.org/packages/96/c8/19ef50a1ac61f8487fbe6ddb06799530dbdfecd2d64602dc661b5a02751a/gtrain-0.2.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "796e0ea5a423a0bd3af486afc56b2a6c", "sha256": "58cb281ab3f4f30d198d0bb9ebca44f29f5cb51330bf822f6bfc1d1c9919be75"}, "downloads": -1, "filename": "gtrain-0.2.3.tar.gz", "has_sig": false, "md5_digest": "796e0ea5a423a0bd3af486afc56b2a6c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6883, "upload_time": "2019-03-15T11:46:04", "upload_time_iso_8601": "2019-03-15T11:46:04.968938Z", "url": "https://files.pythonhosted.org/packages/8a/3c/af6fd64d42afe34a6daf6dec84b37984bf36a70262f5dfea9c257f35cf1a/gtrain-0.2.3.tar.gz", "yanked": false}], "0.2.4": [{"comment_text": "", "digests": {"md5": "305e229122295488b94f7f3176036582", "sha256": "1da1f58ed11d7621e549cab3976910817c5e781ebbd9ac0c8f9b7a76a6949ff7"}, "downloads": -1, "filename": "gtrain-0.2.4-py3-none-any.whl", "has_sig": false, "md5_digest": "305e229122295488b94f7f3176036582", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9016, "upload_time": "2019-03-15T13:53:36", "upload_time_iso_8601": "2019-03-15T13:53:36.584620Z", "url": "https://files.pythonhosted.org/packages/0c/48/062b4d92c16dcac867e410394159b20a85f1724dad35a05a84b2c4ac0958/gtrain-0.2.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b03e77fb0206ee35e2338040959fe4fe", "sha256": "629e57808137e7a888de4cdb1a605d5069304c24929ced285f7442005b79b1a1"}, "downloads": -1, "filename": "gtrain-0.2.4.tar.gz", "has_sig": false, "md5_digest": "b03e77fb0206ee35e2338040959fe4fe", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6896, "upload_time": "2019-03-15T13:53:38", "upload_time_iso_8601": "2019-03-15T13:53:38.072749Z", "url": "https://files.pythonhosted.org/packages/a5/7f/c0f9a2cd9fba9b885df4ebb6065e54312268e1e1adefa3234802bb20046f/gtrain-0.2.4.tar.gz", "yanked": false}], "0.2.5": [{"comment_text": "", "digests": {"md5": "9a70c24d8cc4927ca94fccbce0f432fa", "sha256": "eb95d50059ead4e7f591ab8093d36d158048dfac1d24413ea9ec467012d10e50"}, "downloads": -1, "filename": "gtrain-0.2.5-py3-none-any.whl", "has_sig": false, "md5_digest": "9a70c24d8cc4927ca94fccbce0f432fa", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9182, "upload_time": "2019-04-02T19:43:44", "upload_time_iso_8601": "2019-04-02T19:43:44.713397Z", "url": "https://files.pythonhosted.org/packages/ad/61/71f2d49d20d82d15d8b6f552f2b53f353b2ba989a01d3fbc72c1fcefdccb/gtrain-0.2.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "48ca16c8d5d03d092219a3a8a16f568b", "sha256": "680347e02774196dd027b19e7d5989e54f53e6f9d875f758d1a7272c00d5fc61"}, "downloads": -1, "filename": "gtrain-0.2.5.tar.gz", "has_sig": false, "md5_digest": "48ca16c8d5d03d092219a3a8a16f568b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7112, "upload_time": "2019-04-02T19:43:46", "upload_time_iso_8601": "2019-04-02T19:43:46.187243Z", "url": "https://files.pythonhosted.org/packages/eb/74/77b4ad7f959395b5e4d847c45493b905637006a16834c4c0aa95c25ebdd0/gtrain-0.2.5.tar.gz", "yanked": false}], "0.2.6": [{"comment_text": "", "digests": {"md5": "41b44db440023e2b1d3041acfba871e3", "sha256": "81f468f7f2b8758eb56fdf8616eb5a7384b56a0b2cd3d4e79e16cfea524a6084"}, "downloads": -1, "filename": "gtrain-0.2.6-py3-none-any.whl", "has_sig": false, "md5_digest": "41b44db440023e2b1d3041acfba871e3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9379, "upload_time": "2019-04-07T18:05:59", "upload_time_iso_8601": "2019-04-07T18:05:59.235044Z", "url": "https://files.pythonhosted.org/packages/db/06/536c3c4f243572d18d5de1215a95220fecac7f1e9a74c3b6110344b4d511/gtrain-0.2.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "92f38569afb02d18b3ad123c0a6059c3", "sha256": "6cc1a1d1f9b3734076346d37ffd11881182ef2c7a79d3189ffbcaaf557ff959b"}, "downloads": -1, "filename": "gtrain-0.2.6.tar.gz", "has_sig": false, "md5_digest": "92f38569afb02d18b3ad123c0a6059c3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7289, "upload_time": "2019-04-07T18:06:00", "upload_time_iso_8601": "2019-04-07T18:06:00.748849Z", "url": "https://files.pythonhosted.org/packages/25/99/1d680a240fca24f68623065cdb761553cbb718f1871b93f23bdd6686dc87/gtrain-0.2.6.tar.gz", "yanked": false}], "0.2.7": [{"comment_text": "", "digests": {"md5": "b4e83a2894b0f4a2d814b5764f0c67a7", "sha256": "0b78bbc8fa1ea9258c93b1e256dc39422b25dbe5c871460c0bfa75cee9c04969"}, "downloads": -1, "filename": "gtrain-0.2.7-py3-none-any.whl", "has_sig": false, "md5_digest": "b4e83a2894b0f4a2d814b5764f0c67a7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9466, "upload_time": "2019-04-09T18:50:41", "upload_time_iso_8601": "2019-04-09T18:50:41.589861Z", "url": "https://files.pythonhosted.org/packages/e5/23/0965d6e0c6a54efa0c4343aeacb4a6b2592e3d8c61e300c564fa5a240eac/gtrain-0.2.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9c6a3a7f7f959076540212a9044a586d", "sha256": "adba5346ff8485012bb43a97aab0a488393693bf6610c3afcaad57eb90e875ec"}, "downloads": -1, "filename": "gtrain-0.2.7.tar.gz", "has_sig": false, "md5_digest": "9c6a3a7f7f959076540212a9044a586d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7366, "upload_time": "2019-04-09T18:50:43", "upload_time_iso_8601": "2019-04-09T18:50:43.105868Z", "url": "https://files.pythonhosted.org/packages/5b/ed/acc9abe18ad445610f0859361fb4d2bc8dd84c92f1bc527b2b4bb8aef2b7/gtrain-0.2.7.tar.gz", "yanked": false}], "0.2.8": [{"comment_text": "", "digests": {"md5": "50499eeed722b3972b7ac946ec7936ce", "sha256": "ff409e9cf83df5f5f9d99a10805c44d3a046c89e7af207833f4f79f01c7d27d2"}, "downloads": -1, "filename": "gtrain-0.2.8-py3-none-any.whl", "has_sig": false, "md5_digest": "50499eeed722b3972b7ac946ec7936ce", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 11244, "upload_time": "2019-04-12T14:54:33", "upload_time_iso_8601": "2019-04-12T14:54:33.855275Z", "url": "https://files.pythonhosted.org/packages/f4/36/0d5dd03016c81aa136bf97bc2ff5becf72881cacd6177b7f50026618ba72/gtrain-0.2.8-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4c5e149f1423842fca851e15c738165e", "sha256": "a71d8dc50f7282866374fe2ff02920e897b24830c00a381a0130385d3037cbcf"}, "downloads": -1, "filename": "gtrain-0.2.8.tar.gz", "has_sig": false, "md5_digest": "4c5e149f1423842fca851e15c738165e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8843, "upload_time": "2019-04-12T14:54:35", "upload_time_iso_8601": "2019-04-12T14:54:35.318127Z", "url": "https://files.pythonhosted.org/packages/90/65/0415a0c4ec32d963c95248ec104f4d2d9bde498c766d0bb89b6c6724f461/gtrain-0.2.8.tar.gz", "yanked": false}], "0.2.9": [{"comment_text": "", "digests": {"md5": "2a46ee7992a630834c940d75439b1f10", "sha256": "73402c9a219b60c2e122e4bf96d71c43331562b053872bd515204cf362518dd6"}, "downloads": -1, "filename": "gtrain-0.2.9-py3-none-any.whl", "has_sig": false, "md5_digest": "2a46ee7992a630834c940d75439b1f10", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 11445, "upload_time": "2019-04-16T09:29:58", "upload_time_iso_8601": "2019-04-16T09:29:58.509528Z", "url": "https://files.pythonhosted.org/packages/f9/fe/69b780a3f99b85fe7e43c5e6f40206b928acc850c4c64296f8b1c74859a3/gtrain-0.2.9-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0cf34e1da827f549496dc7aabea21d1f", "sha256": "2e26e79cd686f7022c8b86ee1bfa4c32152134a1d14dd630e47a60c629c3aa9c"}, "downloads": -1, "filename": "gtrain-0.2.9.tar.gz", "has_sig": false, "md5_digest": "0cf34e1da827f549496dc7aabea21d1f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9035, "upload_time": "2019-04-16T09:30:00", "upload_time_iso_8601": "2019-04-16T09:30:00.006426Z", "url": "https://files.pythonhosted.org/packages/63/d9/c5db65c7cc9a2a7ca53851b637c7984c8cdc659f054c2709ecf5e4a1eb0b/gtrain-0.2.9.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "4f6c33199f4af7719bf0aaabcba3e999", "sha256": "f8530ba0f5e66c495af9e0b0dda8453211869672aa4dffeff34505e2a360d8ef"}, "downloads": -1, "filename": "gtrain-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "4f6c33199f4af7719bf0aaabcba3e999", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 11959, "upload_time": "2019-05-04T21:56:53", "upload_time_iso_8601": "2019-05-04T21:56:53.658035Z", "url": "https://files.pythonhosted.org/packages/93/a4/2fd32ecb4e831e5f4f0cf395cee62f70c7624cd300ce0a9f4dece7e37c11/gtrain-0.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3d7f084a8ff39d540096906f75161908", "sha256": "5cc442e2ffadad1f6099f8075f896f572b27415b0c7563bfb75cb94262bdfe10"}, "downloads": -1, "filename": "gtrain-0.3.0.tar.gz", "has_sig": false, "md5_digest": "3d7f084a8ff39d540096906f75161908", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10208, "upload_time": "2019-05-04T21:56:55", "upload_time_iso_8601": "2019-05-04T21:56:55.023596Z", "url": "https://files.pythonhosted.org/packages/59/4a/731fcd389ac887cdabd5febaf45f2ded8399327ed0faca1e99043fb8b30c/gtrain-0.3.0.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "781b4cfd791afe9e6ada829491df57d8", "sha256": "b7474b92dc7b04ea79efe017299920f8da89c3bb509aa61d14fa6495fd78ed7e"}, "downloads": -1, "filename": "gtrain-0.4.0-py3-none-any.whl", "has_sig": false, "md5_digest": "781b4cfd791afe9e6ada829491df57d8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 14542, "upload_time": "2019-05-12T20:46:27", "upload_time_iso_8601": "2019-05-12T20:46:27.072836Z", "url": "https://files.pythonhosted.org/packages/41/77/1a8a97447785e3b069e9a45fdd9da44d6d18fa05d7a625bd6638589d78d0/gtrain-0.4.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "472ec790c2d2ae3b0dcaf9dc6329b6cd", "sha256": "02610a4aad30ad1c4b5198f9fa436e46c47f4ddf7bcc5d882813368f632c5541"}, "downloads": -1, "filename": "gtrain-0.4.0.tar.gz", "has_sig": false, "md5_digest": "472ec790c2d2ae3b0dcaf9dc6329b6cd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13027, "upload_time": "2019-05-12T20:46:28", "upload_time_iso_8601": "2019-05-12T20:46:28.735327Z", "url": "https://files.pythonhosted.org/packages/11/34/699df6c9e1b5bcd1fe20df4f0f8587c73d5c33c526ce20b71dd8c0e420ee/gtrain-0.4.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "781b4cfd791afe9e6ada829491df57d8", "sha256": "b7474b92dc7b04ea79efe017299920f8da89c3bb509aa61d14fa6495fd78ed7e"}, "downloads": -1, "filename": "gtrain-0.4.0-py3-none-any.whl", "has_sig": false, "md5_digest": "781b4cfd791afe9e6ada829491df57d8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 14542, "upload_time": "2019-05-12T20:46:27", "upload_time_iso_8601": "2019-05-12T20:46:27.072836Z", "url": "https://files.pythonhosted.org/packages/41/77/1a8a97447785e3b069e9a45fdd9da44d6d18fa05d7a625bd6638589d78d0/gtrain-0.4.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "472ec790c2d2ae3b0dcaf9dc6329b6cd", "sha256": "02610a4aad30ad1c4b5198f9fa436e46c47f4ddf7bcc5d882813368f632c5541"}, "downloads": -1, "filename": "gtrain-0.4.0.tar.gz", "has_sig": false, "md5_digest": "472ec790c2d2ae3b0dcaf9dc6329b6cd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13027, "upload_time": "2019-05-12T20:46:28", "upload_time_iso_8601": "2019-05-12T20:46:28.735327Z", "url": "https://files.pythonhosted.org/packages/11/34/699df6c9e1b5bcd1fe20df4f0f8587c73d5c33c526ce20b71dd8c0e420ee/gtrain-0.4.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:53:30 2020"}