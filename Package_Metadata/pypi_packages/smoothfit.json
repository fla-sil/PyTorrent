{"info": {"author": "Nico Schl\u00f6mer", "author_email": "", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Science/Research", "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Scientific/Engineering", "Topic :: Scientific/Engineering :: Mathematics"], "description": "<p align=\"center\">\n  <a href=\"https://github.com/nschloe/smoothfit\"><img alt=\"smoothfit\" src=\"https://nschloe.github.io/smoothfit/logo.svg\" width=\"60%\"></a>\n</p>\n\n[![CircleCI](https://img.shields.io/circleci/project/github/nschloe/smoothfit/master.svg?style=flat-square)](https://circleci.com/gh/nschloe/smoothfit)\n[![codecov](https://img.shields.io/codecov/c/github/nschloe/smoothfit.svg?style=flat-square)](https://codecov.io/gh/nschloe/smoothfit)\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg?style=flat-square)](https://github.com/psf/black)\n[![smooth](https://img.shields.io/badge/smooth-yes-8209ba.svg?style=flat-square)](https://github.com/nschloe/smoothfit)\n[![PyPi Version](https://img.shields.io/pypi/v/smoothfit.svg?style=flat-square)](https://pypi.org/project/smoothfit)\n[![GitHub stars](https://img.shields.io/github/stars/nschloe/smoothfit.svg?style=flat-square&logo=github&label=Stars&logoColor=white)](https://github.com/nschloe/smoothfit)\n[![PyPi downloads](https://img.shields.io/pypi/dm/smoothfit.svg?style=flat-square)](https://pypistats.org/packages/smoothfit)\n\nGiven experimental data, it is often desirable to produce a function whose values match\nthe data to some degree. This package implements a robust approach to data fitting based\non the minimization problem\n\n<img src=\"https://nschloe.github.io/smoothfit/eq0.png\" width=\"40%\">\n\n(A similar idea is used in for data smoothing in signal processing; see, e.g.,\nsection 8.3 in [this\ndocument](http://eeweb.poly.edu/iselesni/lecture_notes/least_squares/least_squares_SP.pdf).)\n\nUnlike [polynomial\nregression](https://en.wikipedia.org/wiki/Polynomial_regression) or\n[Gauss-Newton](https://en.wikipedia.org/wiki/Gauss%E2%80%93Newton_algorithm<Paste>),\nsmoothfit makes no assumptions about the function other than that it is smooth.\n\nThe generality of the approach makes it suitable for function whose domain is\nmultidimensional, too.\n\n### Pics or it didn't happen\n\n#### Runge's example\n\n<img src=\"https://nschloe.github.io/smoothfit/runge.svg\" width=\"60%\">\n\n```python\nimport matplotlib.pyplot as plt\nimport numpy\nimport smoothfit\n\na = -1.5\nb = +1.5\n\n# plot original function\nx = numpy.linspace(a, b, 201)\nplt.plot(x, 1 / (1 + 25 * x ** 2), \"-\", color=\"0.8\", label=\"1 / (1 + 25 * x**2)\")\n\n# 21 sample points\nx0 = numpy.linspace(-1.0, 1.0, 21)\ny0 = 1 / (1 + 25 * x0 ** 2)\nplt.plot(x0, y0, \"xk\")\n\nu = smoothfit.fit1d(x0, y0, a, b, 1000, degree=1, lmbda=1.0e-6)\nx = numpy.linspace(a, b, 201)\nvals = [u(xx) for xx in x]\nplt.plot(x, vals, \"-\", label=\"smooth fit\")\n\nplt.ylim(-0.1)\nplt.grid()\nplt.show()\n```\n\n[Runge's example function](https://en.wikipedia.org/wiki/Runge%27s_phenomenon) is a\ntough nut for classical polynomial regression.\n\nIf there is no noise in the input data, the parameter `lmbda` can be chosen quite small\nsuch that all data points are approximated well. Note that there are no oscillations\nin the output function `u`.\n\n\n#### Runge's example with noise\n\n<img src=\"https://nschloe.github.io/smoothfit/runge-noise-0001.svg\" width=\"95%\"> | <img src=\"https://nschloe.github.io/smoothfit/runge-noise-005.svg\" width=\"95%\"> | <img src=\"https://nschloe.github.io/smoothfit/runge-noise-02.svg\" width=\"95%\">\n:-------------------:|:------------------:|:----------:|\n`lmbda = 0.001`      |  `lmbda = 0.05`    |  `lmbda = 0.2`  |\n\n```python\nimport matplotlib.pyplot as plt\nimport numpy\nimport smoothfit\n\na = -1.5\nb = +1.5\n\n# plot original function\nx = numpy.linspace(a, b, 201)\nplt.plot(x, 1 / (1 + 25 * x ** 2), \"-\", color=\"0.8\", label=\"1 / (1 + 25 * x**2)\")\n\n# 21 sample points\nnumpy.random.seed(0)\nn = 51\nx0 = numpy.linspace(-1.0, 1.0, n)\ny0 = 1 / (1 + 25 * x0 ** 2)\ny0 += 1.0e-1 * (2 * numpy.random.rand(n) - 1)\nplt.plot(x0, y0, \"xk\")\n\nlmbda = 5.0e-2\nu = smoothfit.fit1d(x0, y0, a, b, 1000, degree=1, lmbda=lmbda)\nx = numpy.linspace(a, b, 201)\nvals = [u(xx) for xx in x]\nplt.plot(x, vals, \"-\", label=\"smooth fit\")\n\nplt.grid()\nplt.show()\n```\n\nIf the data is noisy, `lmbda` needs to be chosen more carefully. If too small, the\napproximation tries to resolve _all_ data points, resulting in many small oscillations.\nIf it's chosen too large, no details are resolved, not even those of the underlying\ndata.\n\n\n#### Few samples\n\n<img src=\"https://nschloe.github.io/smoothfit/smoothfit-samples.svg\" width=\"40%\">\n\n```python\nimport numpy\nimport smoothfit\n\nx0 = numpy.array([0.038, 0.194, 0.425, 0.626, 1.253, 2.500, 3.740])\ny0 = numpy.array([0.050, 0.127, 0.094, 0.2122, 0.2729, 0.2665, 0.3317])\nu = smoothfit.fit1d(x0, y0, 0, 4, 1000, degree=1, lmbda=1.0)\n```\nSome noisy example data taken from\n[Wikipedia](https://en.wikipedia.org/wiki/Gauss%E2%80%93Newton_algorithm#Example).\n\n\n#### A two-dimensional example\n\n<img src=\"https://nschloe.github.io/smoothfit/2d.png\" width=\"40%\">\n\n```python\nimport meshzoo\nimport numpy\nimport smoothfit \n\nn = 200\nnumpy.random.seed(123)\nx0 = numpy.random.rand(n, 2) - 0.5\ny0 = numpy.cos(numpy.pi * numpy.sqrt(x0.T[0] ** 2 + x0.T[1] ** 2))\n\n# create a triangle mesh for the square\npoints, cells = meshzoo.rectangle(-1.0, 1.0, -1.0, 1.0, 32, 32)\n\nu = smoothfit.fit2d(x0, y0, points, cells, lmbda=1.0e-4, solver=\"dense-direct\")\n\n# Write the function to a file\nfrom dolfin import XDMFFile\nxdmf = XDMFFile(\"temp.xdmf\")\nxdmf.write(u)\n```\n\nThis example approximates a function from _R<sup>2</sup>_ to _R_ (without noise in the\nsamples). Note that the absence of noise the data allows us to pick a rather small\n`lmbda` such that all sample points are approximated well.\n\n\n### Comparison with other approaches\n\n#### Polynomial fitting/regression\n\n<img src=\"https://nschloe.github.io/smoothfit/runge-polyfit.svg\" width=\"60%\">\n\nThe classical approach to data fitting is [polynomial\nregression](https://en.wikipedia.org/wiki/Polynomial_regression).  Polynomials are\nchosen because they are very simple, can be evaluated quickly, and [can be made to fit\nany function very closely](https://en.wikipedia.org/wiki/Stone\u2013Weierstrass_theorem).\n\nThere are, however, some fundamental problems:\n\n * Your data might not actually fit a polynomial of low degree.\n * [Runge's phenomenon](//en.wikipedia.org/wiki/Runge%27s_phenomenon).\n\nThis above plot highlights the problem with oscillations.\n\n\n#### Fourier smoothing\n\n<img src=\"https://nschloe.github.io/smoothfit/fourier.svg\" width=\"60%\">\n\nOne approach to data fitting with smoothing is to create a function with all data\npoints, and simply cut off the high frequencies after Fourier transformation.\n\nThis approach is fast, but only works for evenly spaced samples.\n\n```python\nimport matplotlib.pyplot as plt\nimport numpy\n\n\nnumpy.random.seed(0)\n\n# original function\nx0 = numpy.linspace(-1.0, 1.0, 1000)\ny0 = 1 / (1 + 25 * x0 ** 2)\nplt.plot(x0, y0, color=\"k\", alpha=0.2)\n\n# create sample points\nn = 51\nx1 = numpy.linspace(-1.0, 1.0, n)  # only works if samples are evenly spaced\ny1 = 1 / (1 + 25 * x1 ** 2) + 1.0e-1 * (2 * numpy.random.rand(x1.shape[0]) - 1)\nplt.plot(x1, y1, \"xk\")\n\n# Cut off the high frequencies in the transformed space and transform back\nX = numpy.fft.rfft(y1)\nX[5:] = 0.0\ny2 = numpy.fft.irfft(X, n)\n#\nplt.plot(x1, y2, \"-\", label=\"5 lowest frequencies\")\n\nplt.grid()\nplt.show()\n```\n\n### Testing\n\nTo run the smoothfit unit tests, check out this repository and type\n```\npytest\n```\n\n### License\n\nsmoothfit is published under the [GPLv3+ license](https://www.gnu.org/licenses/gpl-3.0.en.html).\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/nschloe/smoothfit", "keywords": "", "license": "GPLv3+", "maintainer": "", "maintainer_email": "", "name": "smoothfit", "package_url": "https://pypi.org/project/smoothfit/", "platform": "any", "project_url": "https://pypi.org/project/smoothfit/", "project_urls": {"Code": "https://github.com/nschloe/smoothfit", "Homepage": "https://github.com/nschloe/smoothfit", "Issues": "https://github.com/nschloe/smoothfit/issues"}, "release_url": "https://pypi.org/project/smoothfit/0.2.0/", "requires_dist": ["importlib-metadata", "numpy", "pykry", "scipy"], "requires_python": ">=3.6", "summary": "Smooth data fitting in N dimensions", "version": "0.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p align=\"center\">\n  <a href=\"https://github.com/nschloe/smoothfit\" rel=\"nofollow\"><img alt=\"smoothfit\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d37c70ac4e84baf98a81d977aa98c7ed0076acb1/68747470733a2f2f6e7363686c6f652e6769746875622e696f2f736d6f6f74686669742f6c6f676f2e737667\" width=\"60%\"></a>\n</p>\n<p><a href=\"https://circleci.com/gh/nschloe/smoothfit\" rel=\"nofollow\"><img alt=\"CircleCI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2ead2ec3694057e50c2963d04644779d3104dd8c/68747470733a2f2f696d672e736869656c64732e696f2f636972636c6563692f70726f6a6563742f6769746875622f6e7363686c6f652f736d6f6f74686669742f6d61737465722e7376673f7374796c653d666c61742d737175617265\"></a>\n<a href=\"https://codecov.io/gh/nschloe/smoothfit\" rel=\"nofollow\"><img alt=\"codecov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3de2e9ea893dd90e7d5849f71968f55413d98e95/68747470733a2f2f696d672e736869656c64732e696f2f636f6465636f762f632f6769746875622f6e7363686c6f652f736d6f6f74686669742e7376673f7374796c653d666c61742d737175617265\"></a>\n<a href=\"https://github.com/psf/black\" rel=\"nofollow\"><img alt=\"Code style: black\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1c326c58e924b9f3508f32a8ac6b3ee91f40b090/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64652532307374796c652d626c61636b2d3030303030302e7376673f7374796c653d666c61742d737175617265\"></a>\n<a href=\"https://github.com/nschloe/smoothfit\" rel=\"nofollow\"><img alt=\"smooth\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9212d8921b6ee71ac9fff30814144ee98bda1906/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f736d6f6f74682d7965732d3832303962612e7376673f7374796c653d666c61742d737175617265\"></a>\n<a href=\"https://pypi.org/project/smoothfit\" rel=\"nofollow\"><img alt=\"PyPi Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4272a56fc07aeed07de2d4a7fb314664f8325e35/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f736d6f6f74686669742e7376673f7374796c653d666c61742d737175617265\"></a>\n<a href=\"https://github.com/nschloe/smoothfit\" rel=\"nofollow\"><img alt=\"GitHub stars\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f57186bb6733457c6eeae969943f0bd27e2d0d93/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f73746172732f6e7363686c6f652f736d6f6f74686669742e7376673f7374796c653d666c61742d737175617265266c6f676f3d676974687562266c6162656c3d5374617273266c6f676f436f6c6f723d7768697465\"></a>\n<a href=\"https://pypistats.org/packages/smoothfit\" rel=\"nofollow\"><img alt=\"PyPi downloads\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/df364194edf71b23494ab2a4355c41b84b0c45fa/68747470733a2f2f696d672e736869656c64732e696f2f707970692f646d2f736d6f6f74686669742e7376673f7374796c653d666c61742d737175617265\"></a></p>\n<p>Given experimental data, it is often desirable to produce a function whose values match\nthe data to some degree. This package implements a robust approach to data fitting based\non the minimization problem</p>\n<img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f26e6a6c2d70d75e2695ccce62852cd1dac584be/68747470733a2f2f6e7363686c6f652e6769746875622e696f2f736d6f6f74686669742f6571302e706e67\" width=\"40%\">\n<p>(A similar idea is used in for data smoothing in signal processing; see, e.g.,\nsection 8.3 in <a href=\"http://eeweb.poly.edu/iselesni/lecture_notes/least_squares/least_squares_SP.pdf\" rel=\"nofollow\">this\ndocument</a>.)</p>\n<p>Unlike <a href=\"https://en.wikipedia.org/wiki/Polynomial_regression\" rel=\"nofollow\">polynomial\nregression</a> or\n<a href=\"https://en.wikipedia.org/wiki/Gauss%E2%80%93Newton_algorithm%3CPaste%3E\" rel=\"nofollow\">Gauss-Newton</a>,\nsmoothfit makes no assumptions about the function other than that it is smooth.</p>\n<p>The generality of the approach makes it suitable for function whose domain is\nmultidimensional, too.</p>\n<h3>Pics or it didn't happen</h3>\n<h4>Runge's example</h4>\n<img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ec9a8536a11b59e95a085b50561ce59b189b4a28/68747470733a2f2f6e7363686c6f652e6769746875622e696f2f736d6f6f74686669742f72756e67652e737667\" width=\"60%\">\n<pre><span class=\"kn\">import</span> <span class=\"nn\">matplotlib.pyplot</span> <span class=\"k\">as</span> <span class=\"nn\">plt</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span>\n<span class=\"kn\">import</span> <span class=\"nn\">smoothfit</span>\n\n<span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mf\">1.5</span>\n<span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"o\">+</span><span class=\"mf\">1.5</span>\n\n<span class=\"c1\"># plot original function</span>\n<span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">linspace</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"mi\">201</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"mi\">1</span> <span class=\"o\">/</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">+</span> <span class=\"mi\">25</span> <span class=\"o\">*</span> <span class=\"n\">x</span> <span class=\"o\">**</span> <span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"s2\">\"-\"</span><span class=\"p\">,</span> <span class=\"n\">color</span><span class=\"o\">=</span><span class=\"s2\">\"0.8\"</span><span class=\"p\">,</span> <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s2\">\"1 / (1 + 25 * x**2)\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># 21 sample points</span>\n<span class=\"n\">x0</span> <span class=\"o\">=</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">linspace</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"mi\">21</span><span class=\"p\">)</span>\n<span class=\"n\">y0</span> <span class=\"o\">=</span> <span class=\"mi\">1</span> <span class=\"o\">/</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">+</span> <span class=\"mi\">25</span> <span class=\"o\">*</span> <span class=\"n\">x0</span> <span class=\"o\">**</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">x0</span><span class=\"p\">,</span> <span class=\"n\">y0</span><span class=\"p\">,</span> <span class=\"s2\">\"xk\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">u</span> <span class=\"o\">=</span> <span class=\"n\">smoothfit</span><span class=\"o\">.</span><span class=\"n\">fit1d</span><span class=\"p\">(</span><span class=\"n\">x0</span><span class=\"p\">,</span> <span class=\"n\">y0</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"mi\">1000</span><span class=\"p\">,</span> <span class=\"n\">degree</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">lmbda</span><span class=\"o\">=</span><span class=\"mf\">1.0e-6</span><span class=\"p\">)</span>\n<span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">linspace</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"mi\">201</span><span class=\"p\">)</span>\n<span class=\"n\">vals</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">u</span><span class=\"p\">(</span><span class=\"n\">xx</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">xx</span> <span class=\"ow\">in</span> <span class=\"n\">x</span><span class=\"p\">]</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">vals</span><span class=\"p\">,</span> <span class=\"s2\">\"-\"</span><span class=\"p\">,</span> <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s2\">\"smooth fit\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">ylim</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mf\">0.1</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">grid</span><span class=\"p\">()</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n</pre>\n<p><a href=\"https://en.wikipedia.org/wiki/Runge%27s_phenomenon\" rel=\"nofollow\">Runge's example function</a> is a\ntough nut for classical polynomial regression.</p>\n<p>If there is no noise in the input data, the parameter <code>lmbda</code> can be chosen quite small\nsuch that all data points are approximated well. Note that there are no oscillations\nin the output function <code>u</code>.</p>\n<h4>Runge's example with noise</h4>\n<table>\n<thead>\n<tr>\n<th align=\"center\"><img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4746bcb0f3932ada591e20367f09c93c2c6e1415/68747470733a2f2f6e7363686c6f652e6769746875622e696f2f736d6f6f74686669742f72756e67652d6e6f6973652d303030312e737667\" width=\"95%\"></th>\n<th align=\"center\"><img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/430b82c3f80831b4ed385f928db703f142c8b617/68747470733a2f2f6e7363686c6f652e6769746875622e696f2f736d6f6f74686669742f72756e67652d6e6f6973652d3030352e737667\" width=\"95%\"></th>\n<th align=\"center\"><img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4f8d9661a0cd28f5d0246819e5998759cd19e6bc/68747470733a2f2f6e7363686c6f652e6769746875622e696f2f736d6f6f74686669742f72756e67652d6e6f6973652d30322e737667\" width=\"95%\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\"><code>lmbda = 0.001</code></td>\n<td align=\"center\"><code>lmbda = 0.05</code></td>\n<td align=\"center\"><code>lmbda = 0.2</code></td>\n</tr></tbody></table>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">matplotlib.pyplot</span> <span class=\"k\">as</span> <span class=\"nn\">plt</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span>\n<span class=\"kn\">import</span> <span class=\"nn\">smoothfit</span>\n\n<span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mf\">1.5</span>\n<span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"o\">+</span><span class=\"mf\">1.5</span>\n\n<span class=\"c1\"># plot original function</span>\n<span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">linspace</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"mi\">201</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"mi\">1</span> <span class=\"o\">/</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">+</span> <span class=\"mi\">25</span> <span class=\"o\">*</span> <span class=\"n\">x</span> <span class=\"o\">**</span> <span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"s2\">\"-\"</span><span class=\"p\">,</span> <span class=\"n\">color</span><span class=\"o\">=</span><span class=\"s2\">\"0.8\"</span><span class=\"p\">,</span> <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s2\">\"1 / (1 + 25 * x**2)\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># 21 sample points</span>\n<span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">seed</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"mi\">51</span>\n<span class=\"n\">x0</span> <span class=\"o\">=</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">linspace</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">)</span>\n<span class=\"n\">y0</span> <span class=\"o\">=</span> <span class=\"mi\">1</span> <span class=\"o\">/</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">+</span> <span class=\"mi\">25</span> <span class=\"o\">*</span> <span class=\"n\">x0</span> <span class=\"o\">**</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">y0</span> <span class=\"o\">+=</span> <span class=\"mf\">1.0e-1</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">rand</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">x0</span><span class=\"p\">,</span> <span class=\"n\">y0</span><span class=\"p\">,</span> <span class=\"s2\">\"xk\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">lmbda</span> <span class=\"o\">=</span> <span class=\"mf\">5.0e-2</span>\n<span class=\"n\">u</span> <span class=\"o\">=</span> <span class=\"n\">smoothfit</span><span class=\"o\">.</span><span class=\"n\">fit1d</span><span class=\"p\">(</span><span class=\"n\">x0</span><span class=\"p\">,</span> <span class=\"n\">y0</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"mi\">1000</span><span class=\"p\">,</span> <span class=\"n\">degree</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">lmbda</span><span class=\"o\">=</span><span class=\"n\">lmbda</span><span class=\"p\">)</span>\n<span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">linspace</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"mi\">201</span><span class=\"p\">)</span>\n<span class=\"n\">vals</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">u</span><span class=\"p\">(</span><span class=\"n\">xx</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">xx</span> <span class=\"ow\">in</span> <span class=\"n\">x</span><span class=\"p\">]</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">vals</span><span class=\"p\">,</span> <span class=\"s2\">\"-\"</span><span class=\"p\">,</span> <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s2\">\"smooth fit\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">grid</span><span class=\"p\">()</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n</pre>\n<p>If the data is noisy, <code>lmbda</code> needs to be chosen more carefully. If too small, the\napproximation tries to resolve <em>all</em> data points, resulting in many small oscillations.\nIf it's chosen too large, no details are resolved, not even those of the underlying\ndata.</p>\n<h4>Few samples</h4>\n<img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/cf43f4cc7ec2d253dbeb04c7fa52fa726572ae57/68747470733a2f2f6e7363686c6f652e6769746875622e696f2f736d6f6f74686669742f736d6f6f74686669742d73616d706c65732e737667\" width=\"40%\">\n<pre><span class=\"kn\">import</span> <span class=\"nn\">numpy</span>\n<span class=\"kn\">import</span> <span class=\"nn\">smoothfit</span>\n\n<span class=\"n\">x0</span> <span class=\"o\">=</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"mf\">0.038</span><span class=\"p\">,</span> <span class=\"mf\">0.194</span><span class=\"p\">,</span> <span class=\"mf\">0.425</span><span class=\"p\">,</span> <span class=\"mf\">0.626</span><span class=\"p\">,</span> <span class=\"mf\">1.253</span><span class=\"p\">,</span> <span class=\"mf\">2.500</span><span class=\"p\">,</span> <span class=\"mf\">3.740</span><span class=\"p\">])</span>\n<span class=\"n\">y0</span> <span class=\"o\">=</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"mf\">0.050</span><span class=\"p\">,</span> <span class=\"mf\">0.127</span><span class=\"p\">,</span> <span class=\"mf\">0.094</span><span class=\"p\">,</span> <span class=\"mf\">0.2122</span><span class=\"p\">,</span> <span class=\"mf\">0.2729</span><span class=\"p\">,</span> <span class=\"mf\">0.2665</span><span class=\"p\">,</span> <span class=\"mf\">0.3317</span><span class=\"p\">])</span>\n<span class=\"n\">u</span> <span class=\"o\">=</span> <span class=\"n\">smoothfit</span><span class=\"o\">.</span><span class=\"n\">fit1d</span><span class=\"p\">(</span><span class=\"n\">x0</span><span class=\"p\">,</span> <span class=\"n\">y0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">1000</span><span class=\"p\">,</span> <span class=\"n\">degree</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">lmbda</span><span class=\"o\">=</span><span class=\"mf\">1.0</span><span class=\"p\">)</span>\n</pre>\n<p>Some noisy example data taken from\n<a href=\"https://en.wikipedia.org/wiki/Gauss%E2%80%93Newton_algorithm#Example\" rel=\"nofollow\">Wikipedia</a>.</p>\n<h4>A two-dimensional example</h4>\n<img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/316800fda99239b46f664bcab3c9c4093fa997bd/68747470733a2f2f6e7363686c6f652e6769746875622e696f2f736d6f6f74686669742f32642e706e67\" width=\"40%\">\n<pre><span class=\"kn\">import</span> <span class=\"nn\">meshzoo</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span>\n<span class=\"kn\">import</span> <span class=\"nn\">smoothfit</span> \n\n<span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"mi\">200</span>\n<span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">seed</span><span class=\"p\">(</span><span class=\"mi\">123</span><span class=\"p\">)</span>\n<span class=\"n\">x0</span> <span class=\"o\">=</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">rand</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mf\">0.5</span>\n<span class=\"n\">y0</span> <span class=\"o\">=</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">cos</span><span class=\"p\">(</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">pi</span> <span class=\"o\">*</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">sqrt</span><span class=\"p\">(</span><span class=\"n\">x0</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">**</span> <span class=\"mi\">2</span> <span class=\"o\">+</span> <span class=\"n\">x0</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">**</span> <span class=\"mi\">2</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># create a triangle mesh for the square</span>\n<span class=\"n\">points</span><span class=\"p\">,</span> <span class=\"n\">cells</span> <span class=\"o\">=</span> <span class=\"n\">meshzoo</span><span class=\"o\">.</span><span class=\"n\">rectangle</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"mi\">32</span><span class=\"p\">,</span> <span class=\"mi\">32</span><span class=\"p\">)</span>\n\n<span class=\"n\">u</span> <span class=\"o\">=</span> <span class=\"n\">smoothfit</span><span class=\"o\">.</span><span class=\"n\">fit2d</span><span class=\"p\">(</span><span class=\"n\">x0</span><span class=\"p\">,</span> <span class=\"n\">y0</span><span class=\"p\">,</span> <span class=\"n\">points</span><span class=\"p\">,</span> <span class=\"n\">cells</span><span class=\"p\">,</span> <span class=\"n\">lmbda</span><span class=\"o\">=</span><span class=\"mf\">1.0e-4</span><span class=\"p\">,</span> <span class=\"n\">solver</span><span class=\"o\">=</span><span class=\"s2\">\"dense-direct\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Write the function to a file</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dolfin</span> <span class=\"kn\">import</span> <span class=\"n\">XDMFFile</span>\n<span class=\"n\">xdmf</span> <span class=\"o\">=</span> <span class=\"n\">XDMFFile</span><span class=\"p\">(</span><span class=\"s2\">\"temp.xdmf\"</span><span class=\"p\">)</span>\n<span class=\"n\">xdmf</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">u</span><span class=\"p\">)</span>\n</pre>\n<p>This example approximates a function from <em>R<sup>2</sup></em> to <em>R</em> (without noise in the\nsamples). Note that the absence of noise the data allows us to pick a rather small\n<code>lmbda</code> such that all sample points are approximated well.</p>\n<h3>Comparison with other approaches</h3>\n<h4>Polynomial fitting/regression</h4>\n<img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/acb563a3ffecc129c3f2ef45d75e9f02bceb1533/68747470733a2f2f6e7363686c6f652e6769746875622e696f2f736d6f6f74686669742f72756e67652d706f6c796669742e737667\" width=\"60%\">\n<p>The classical approach to data fitting is <a href=\"https://en.wikipedia.org/wiki/Polynomial_regression\" rel=\"nofollow\">polynomial\nregression</a>.  Polynomials are\nchosen because they are very simple, can be evaluated quickly, and <a href=\"https://en.wikipedia.org/wiki/Stone%E2%80%93Weierstrass_theorem\" rel=\"nofollow\">can be made to fit\nany function very closely</a>.</p>\n<p>There are, however, some fundamental problems:</p>\n<ul>\n<li>Your data might not actually fit a polynomial of low degree.</li>\n<li><a href=\"//en.wikipedia.org/wiki/Runge%27s_phenomenon\" rel=\"nofollow\">Runge's phenomenon</a>.</li>\n</ul>\n<p>This above plot highlights the problem with oscillations.</p>\n<h4>Fourier smoothing</h4>\n<img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9630200a2fc586a92d389b2a717fea535edfa7bb/68747470733a2f2f6e7363686c6f652e6769746875622e696f2f736d6f6f74686669742f666f75726965722e737667\" width=\"60%\">\n<p>One approach to data fitting with smoothing is to create a function with all data\npoints, and simply cut off the high frequencies after Fourier transformation.</p>\n<p>This approach is fast, but only works for evenly spaced samples.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">matplotlib.pyplot</span> <span class=\"k\">as</span> <span class=\"nn\">plt</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span>\n\n\n<span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">seed</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># original function</span>\n<span class=\"n\">x0</span> <span class=\"o\">=</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">linspace</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"mi\">1000</span><span class=\"p\">)</span>\n<span class=\"n\">y0</span> <span class=\"o\">=</span> <span class=\"mi\">1</span> <span class=\"o\">/</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">+</span> <span class=\"mi\">25</span> <span class=\"o\">*</span> <span class=\"n\">x0</span> <span class=\"o\">**</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">x0</span><span class=\"p\">,</span> <span class=\"n\">y0</span><span class=\"p\">,</span> <span class=\"n\">color</span><span class=\"o\">=</span><span class=\"s2\">\"k\"</span><span class=\"p\">,</span> <span class=\"n\">alpha</span><span class=\"o\">=</span><span class=\"mf\">0.2</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># create sample points</span>\n<span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"mi\">51</span>\n<span class=\"n\">x1</span> <span class=\"o\">=</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">linspace</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">)</span>  <span class=\"c1\"># only works if samples are evenly spaced</span>\n<span class=\"n\">y1</span> <span class=\"o\">=</span> <span class=\"mi\">1</span> <span class=\"o\">/</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">+</span> <span class=\"mi\">25</span> <span class=\"o\">*</span> <span class=\"n\">x1</span> <span class=\"o\">**</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mf\">1.0e-1</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">rand</span><span class=\"p\">(</span><span class=\"n\">x1</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">x1</span><span class=\"p\">,</span> <span class=\"n\">y1</span><span class=\"p\">,</span> <span class=\"s2\">\"xk\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Cut off the high frequencies in the transformed space and transform back</span>\n<span class=\"n\">X</span> <span class=\"o\">=</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">fft</span><span class=\"o\">.</span><span class=\"n\">rfft</span><span class=\"p\">(</span><span class=\"n\">y1</span><span class=\"p\">)</span>\n<span class=\"n\">X</span><span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">:]</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>\n<span class=\"n\">y2</span> <span class=\"o\">=</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">fft</span><span class=\"o\">.</span><span class=\"n\">irfft</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">)</span>\n<span class=\"c1\">#</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">x1</span><span class=\"p\">,</span> <span class=\"n\">y2</span><span class=\"p\">,</span> <span class=\"s2\">\"-\"</span><span class=\"p\">,</span> <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s2\">\"5 lowest frequencies\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">grid</span><span class=\"p\">()</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n</pre>\n<h3>Testing</h3>\n<p>To run the smoothfit unit tests, check out this repository and type</p>\n<pre><code>pytest\n</code></pre>\n<h3>License</h3>\n<p>smoothfit is published under the <a href=\"https://www.gnu.org/licenses/gpl-3.0.en.html\" rel=\"nofollow\">GPLv3+ license</a>.</p>\n\n          </div>"}, "last_serial": 6911890, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "12af743eb84150c5ddf01413f74b961c", "sha256": "8a4754262d3a3e2d6140189b9c4647cd55c6d38c287ae9d570f86162c8b514c5"}, "downloads": -1, "filename": "smoothfit-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "12af743eb84150c5ddf01413f74b961c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 7555, "upload_time": "2019-08-14T22:51:01", "upload_time_iso_8601": "2019-08-14T22:51:01.392836Z", "url": "https://files.pythonhosted.org/packages/f1/d8/ae65f0caac5e8da92d93d75c5e92580848c6c11dfc84d39d572c51f98cbc/smoothfit-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7662291049d383573ad33169f932b59c", "sha256": "bc5d73a9fc1ea8a70ea7b77372968924f6025df5e503dbb43675d386bb17bab7"}, "downloads": -1, "filename": "smoothfit-0.1.0.tar.gz", "has_sig": false, "md5_digest": "7662291049d383573ad33169f932b59c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 7968, "upload_time": "2019-08-14T22:51:04", "upload_time_iso_8601": "2019-08-14T22:51:04.211798Z", "url": "https://files.pythonhosted.org/packages/30/a3/ef3e2415ba0d9e464f174a561df185f688821e33e8fbd9d83a6d023561d9/smoothfit-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "e170fea6936d50322cb562e6b68788cd", "sha256": "20ff7af470d0df56abad2e0666ad5515519c8d2a6789ae537aae856d026c88b4"}, "downloads": -1, "filename": "smoothfit-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "e170fea6936d50322cb562e6b68788cd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 7548, "upload_time": "2019-08-15T09:41:07", "upload_time_iso_8601": "2019-08-15T09:41:07.372228Z", "url": "https://files.pythonhosted.org/packages/5b/e1/7e6a24ff731137380d33a60f9b04ab3201d0778b0886b2270a6a2986e0c6/smoothfit-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "65c01524b7274425bbad1ace840c3398", "sha256": "b50724f120741f211343f0f81c10095ce65ffbf3a51cd2f8bd1cc2325baff6c5"}, "downloads": -1, "filename": "smoothfit-0.1.1.tar.gz", "has_sig": false, "md5_digest": "65c01524b7274425bbad1ace840c3398", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 8060, "upload_time": "2019-08-15T09:41:09", "upload_time_iso_8601": "2019-08-15T09:41:09.275042Z", "url": "https://files.pythonhosted.org/packages/60/b3/045bb142299f7ada3f5097a018f6eebec393da0e0ef0be744a108c910924/smoothfit-0.1.1.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "26afa3a95e97c4cbfecf515ff7c6191d", "sha256": "505b67b5aa122744d36915903c3b4767365860caaac6d7f9d0e55ee52a617b01"}, "downloads": -1, "filename": "smoothfit-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "26afa3a95e97c4cbfecf515ff7c6191d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 7296, "upload_time": "2020-03-30T10:14:46", "upload_time_iso_8601": "2020-03-30T10:14:46.917242Z", "url": "https://files.pythonhosted.org/packages/c5/45/1806d3b8a12251fdd37f4c3cd21eff170d275022f31925226bfb34bbbb67/smoothfit-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e374e6fcb0bc1f9b99a0c7bea1853ddc", "sha256": "ee3636f59187c342e8b2810f650181e3dff1ff23edc6b0d3ee5d51dc83359215"}, "downloads": -1, "filename": "smoothfit-0.2.0.tar.gz", "has_sig": false, "md5_digest": "e374e6fcb0bc1f9b99a0c7bea1853ddc", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 9196, "upload_time": "2020-03-30T10:14:48", "upload_time_iso_8601": "2020-03-30T10:14:48.125904Z", "url": "https://files.pythonhosted.org/packages/2e/a4/f0ece9c1d6c3786b26d7b6b355023d96750b99b9d52d6f0384cdbd6856eb/smoothfit-0.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "26afa3a95e97c4cbfecf515ff7c6191d", "sha256": "505b67b5aa122744d36915903c3b4767365860caaac6d7f9d0e55ee52a617b01"}, "downloads": -1, "filename": "smoothfit-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "26afa3a95e97c4cbfecf515ff7c6191d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 7296, "upload_time": "2020-03-30T10:14:46", "upload_time_iso_8601": "2020-03-30T10:14:46.917242Z", "url": "https://files.pythonhosted.org/packages/c5/45/1806d3b8a12251fdd37f4c3cd21eff170d275022f31925226bfb34bbbb67/smoothfit-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e374e6fcb0bc1f9b99a0c7bea1853ddc", "sha256": "ee3636f59187c342e8b2810f650181e3dff1ff23edc6b0d3ee5d51dc83359215"}, "downloads": -1, "filename": "smoothfit-0.2.0.tar.gz", "has_sig": false, "md5_digest": "e374e6fcb0bc1f9b99a0c7bea1853ddc", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 9196, "upload_time": "2020-03-30T10:14:48", "upload_time_iso_8601": "2020-03-30T10:14:48.125904Z", "url": "https://files.pythonhosted.org/packages/2e/a4/f0ece9c1d6c3786b26d7b6b355023d96750b99b9d52d6f0384cdbd6856eb/smoothfit-0.2.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:07:49 2020"}