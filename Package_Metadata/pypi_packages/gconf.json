{"info": {"author": "Max von Tettenborn", "author_email": "max@vtettenborn.net", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# gconf\n\nManaging a config globally throughout a Python application\n\n## Overview\n\nWith gconf, yaml configuration files can be loaded on module-scope\nsuch that its values can be accessed from anywhere in a running application.\n\n## Usage\n\n### Loading yaml files\n\nOne or more yaml configuration files are loaded globally from path-like objects,\nusually in a program's main function.\nThe resulting configuration is an overlay of all loaded configurations\nwith those that were loaded later taking precedence.\n\nLoading a single config file:\n```python\ngconf.load('conf.yml')\n```\n\nLoading multiple config files at once:\n```python\ngconf.load('conf1.yml', 'conf2.yml')\n```\n\nLoading multiple config files one after the other:\n```python\ngconf.load('conf1.yml')\ngconf.load('conf2.yml')\n```\n\nThe two examples above produce an identical result.\nIn both cases `config2` takes precedence over `config1` and overrides its values.\n\nEach invocation of `load` returns a list of all paths that have actually been loaded.\n\nLoading the first config from a list of paths:\n```python\ngconf.load_first('conf1.yml', 'conf2.yml')\n```\n\nIf `conf1.yml` exists, it is loaded and `conf2.yml` is ignored.\nif `conf1.yml` does not exist, `conf2.yml` is loaded.\n\n`load_first` returns the path that has actually been loaded.\n\nAll loading functions raise a `FileNotFoundError` if no file is found.\nThis can be prevented by setting the keyword-argument `required=False`.\n\n\n### Manually adding values\n\nA dict can be added to the config from within the application.\nThis is equivalent to loading a config file with the same content\nand overrides values if they are already present or adds them if not.\n\n```python\ngconf.add({'parent': {'child': 'new child'}})\n```\n\nWarning: using this functionality, it is possible to the gconf module as a store for global variables.\nGlobal variables are a code smell and should not be used!\nPlease use the `gconf.add()` function only if you know exactly what you are doing.\n\n\n### Accessing config values\n\nThere are several ways of addressing the values that are stored in the config,\nall of them using the module-level `get` method.\n\nDot-notation\n```python\ngconf.get('parent.child.some value')\n```\n\nString arguments\n```python\ngconf.get('parent', 'child', 'some value')\n```\n\nA mix of both\n```python\ngconf.get('parent.child', 'some value')\n```\n\nTop-level item as dictionary\n```python\ngconf.get()['parent']['child']['some value']\n```\n\nSome intermediate item as dictionary\n```python\ngconf.get('parent')['child']['some value']\n```\n\nTo access list items, simply use their index in the path\n```python\ngconf.get('list.3')\n```\n\n#### Default value\n\nThe `get` method accepts a `default` argument, which is returned\nif the specified item does not exist:\n```python\ngconf.get('non-existing', default=default_value)\n```\nThis even works for falsey values like `False`, `None` or the empty string.\n\n### Errors\n\nIf an attempt is made at loading non-existing files and `required=True` (the default), an `FileNotFoundError` is raised.\n\nIf no `default` is provided, an attempt to access a non-existing item raises a `KeyError`.\n\n### Temporary override\n\nParts of the config can be temporarily overridden through a context manager.\nPass it a dictionary that overlays the existing one:\n```python\nwith gconf.override_conf({'parent': {'child': 'override_value'}}):\n    gconf.get('parent.child')  # => 'override_value'\ngconf.get('parent.child')  # => 'original_value'\n```\n\nTo temporarily remove parts of the config the `DELETED` constant can be used:\n```python\nwith gconf.override_conf({'parent': {'child': gconf.DELETED}}):\n    gconf.get('parent.child')  # => KeyError\ngconf.get('parent.child')  # => 'original_value'\n```\n\n### Resetting\n\nThe global gconf dict can be completely reset.\n\n```python\ngconf.reset()\n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://gitlab.com/max-tet/gconf", "keywords": "", "license": "LICENSE", "maintainer": "", "maintainer_email": "", "name": "gconf", "package_url": "https://pypi.org/project/gconf/", "platform": "", "project_url": "https://pypi.org/project/gconf/", "project_urls": {"Homepage": "https://gitlab.com/max-tet/gconf"}, "release_url": "https://pypi.org/project/gconf/0.6.5/", "requires_dist": null, "requires_python": "", "summary": "Managing a config globally throughout a Python application", "version": "0.6.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>gconf</h1>\n<p>Managing a config globally throughout a Python application</p>\n<h2>Overview</h2>\n<p>With gconf, yaml configuration files can be loaded on module-scope\nsuch that its values can be accessed from anywhere in a running application.</p>\n<h2>Usage</h2>\n<h3>Loading yaml files</h3>\n<p>One or more yaml configuration files are loaded globally from path-like objects,\nusually in a program's main function.\nThe resulting configuration is an overlay of all loaded configurations\nwith those that were loaded later taking precedence.</p>\n<p>Loading a single config file:</p>\n<pre><span class=\"n\">gconf</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"s1\">'conf.yml'</span><span class=\"p\">)</span>\n</pre>\n<p>Loading multiple config files at once:</p>\n<pre><span class=\"n\">gconf</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"s1\">'conf1.yml'</span><span class=\"p\">,</span> <span class=\"s1\">'conf2.yml'</span><span class=\"p\">)</span>\n</pre>\n<p>Loading multiple config files one after the other:</p>\n<pre><span class=\"n\">gconf</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"s1\">'conf1.yml'</span><span class=\"p\">)</span>\n<span class=\"n\">gconf</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"s1\">'conf2.yml'</span><span class=\"p\">)</span>\n</pre>\n<p>The two examples above produce an identical result.\nIn both cases <code>config2</code> takes precedence over <code>config1</code> and overrides its values.</p>\n<p>Each invocation of <code>load</code> returns a list of all paths that have actually been loaded.</p>\n<p>Loading the first config from a list of paths:</p>\n<pre><span class=\"n\">gconf</span><span class=\"o\">.</span><span class=\"n\">load_first</span><span class=\"p\">(</span><span class=\"s1\">'conf1.yml'</span><span class=\"p\">,</span> <span class=\"s1\">'conf2.yml'</span><span class=\"p\">)</span>\n</pre>\n<p>If <code>conf1.yml</code> exists, it is loaded and <code>conf2.yml</code> is ignored.\nif <code>conf1.yml</code> does not exist, <code>conf2.yml</code> is loaded.</p>\n<p><code>load_first</code> returns the path that has actually been loaded.</p>\n<p>All loading functions raise a <code>FileNotFoundError</code> if no file is found.\nThis can be prevented by setting the keyword-argument <code>required=False</code>.</p>\n<h3>Manually adding values</h3>\n<p>A dict can be added to the config from within the application.\nThis is equivalent to loading a config file with the same content\nand overrides values if they are already present or adds them if not.</p>\n<pre><span class=\"n\">gconf</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">({</span><span class=\"s1\">'parent'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'child'</span><span class=\"p\">:</span> <span class=\"s1\">'new child'</span><span class=\"p\">}})</span>\n</pre>\n<p>Warning: using this functionality, it is possible to the gconf module as a store for global variables.\nGlobal variables are a code smell and should not be used!\nPlease use the <code>gconf.add()</code> function only if you know exactly what you are doing.</p>\n<h3>Accessing config values</h3>\n<p>There are several ways of addressing the values that are stored in the config,\nall of them using the module-level <code>get</code> method.</p>\n<p>Dot-notation</p>\n<pre><span class=\"n\">gconf</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'parent.child.some value'</span><span class=\"p\">)</span>\n</pre>\n<p>String arguments</p>\n<pre><span class=\"n\">gconf</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'parent'</span><span class=\"p\">,</span> <span class=\"s1\">'child'</span><span class=\"p\">,</span> <span class=\"s1\">'some value'</span><span class=\"p\">)</span>\n</pre>\n<p>A mix of both</p>\n<pre><span class=\"n\">gconf</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'parent.child'</span><span class=\"p\">,</span> <span class=\"s1\">'some value'</span><span class=\"p\">)</span>\n</pre>\n<p>Top-level item as dictionary</p>\n<pre><span class=\"n\">gconf</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()[</span><span class=\"s1\">'parent'</span><span class=\"p\">][</span><span class=\"s1\">'child'</span><span class=\"p\">][</span><span class=\"s1\">'some value'</span><span class=\"p\">]</span>\n</pre>\n<p>Some intermediate item as dictionary</p>\n<pre><span class=\"n\">gconf</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'parent'</span><span class=\"p\">)[</span><span class=\"s1\">'child'</span><span class=\"p\">][</span><span class=\"s1\">'some value'</span><span class=\"p\">]</span>\n</pre>\n<p>To access list items, simply use their index in the path</p>\n<pre><span class=\"n\">gconf</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'list.3'</span><span class=\"p\">)</span>\n</pre>\n<h4>Default value</h4>\n<p>The <code>get</code> method accepts a <code>default</code> argument, which is returned\nif the specified item does not exist:</p>\n<pre><span class=\"n\">gconf</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'non-existing'</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"n\">default_value</span><span class=\"p\">)</span>\n</pre>\n<p>This even works for falsey values like <code>False</code>, <code>None</code> or the empty string.</p>\n<h3>Errors</h3>\n<p>If an attempt is made at loading non-existing files and <code>required=True</code> (the default), an <code>FileNotFoundError</code> is raised.</p>\n<p>If no <code>default</code> is provided, an attempt to access a non-existing item raises a <code>KeyError</code>.</p>\n<h3>Temporary override</h3>\n<p>Parts of the config can be temporarily overridden through a context manager.\nPass it a dictionary that overlays the existing one:</p>\n<pre><span class=\"k\">with</span> <span class=\"n\">gconf</span><span class=\"o\">.</span><span class=\"n\">override_conf</span><span class=\"p\">({</span><span class=\"s1\">'parent'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'child'</span><span class=\"p\">:</span> <span class=\"s1\">'override_value'</span><span class=\"p\">}}):</span>\n    <span class=\"n\">gconf</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'parent.child'</span><span class=\"p\">)</span>  <span class=\"c1\"># =&gt; 'override_value'</span>\n<span class=\"n\">gconf</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'parent.child'</span><span class=\"p\">)</span>  <span class=\"c1\"># =&gt; 'original_value'</span>\n</pre>\n<p>To temporarily remove parts of the config the <code>DELETED</code> constant can be used:</p>\n<pre><span class=\"k\">with</span> <span class=\"n\">gconf</span><span class=\"o\">.</span><span class=\"n\">override_conf</span><span class=\"p\">({</span><span class=\"s1\">'parent'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'child'</span><span class=\"p\">:</span> <span class=\"n\">gconf</span><span class=\"o\">.</span><span class=\"n\">DELETED</span><span class=\"p\">}}):</span>\n    <span class=\"n\">gconf</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'parent.child'</span><span class=\"p\">)</span>  <span class=\"c1\"># =&gt; KeyError</span>\n<span class=\"n\">gconf</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'parent.child'</span><span class=\"p\">)</span>  <span class=\"c1\"># =&gt; 'original_value'</span>\n</pre>\n<h3>Resetting</h3>\n<p>The global gconf dict can be completely reset.</p>\n<pre><span class=\"n\">gconf</span><span class=\"o\">.</span><span class=\"n\">reset</span><span class=\"p\">()</span>\n</pre>\n\n          </div>"}, "last_serial": 6978671, "releases": {"0.5.2": [{"comment_text": "", "digests": {"md5": "6acbb0bef77e521412f44fb26d9ef71c", "sha256": "a2f24bad951cfdb971e20c8a516b066f71dd04c88f59c17f2c0713bd56e5ea13"}, "downloads": -1, "filename": "gconf-0.5.2.tar.gz", "has_sig": false, "md5_digest": "6acbb0bef77e521412f44fb26d9ef71c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3970, "upload_time": "2019-03-13T17:16:39", "upload_time_iso_8601": "2019-03-13T17:16:39.945020Z", "url": "https://files.pythonhosted.org/packages/09/da/893e29c361d46d49d50d0083031faada0a0021aa1155e23dc5d4e6ff5c5a/gconf-0.5.2.tar.gz", "yanked": false}], "0.5.4": [{"comment_text": "", "digests": {"md5": "f1a13c90657742db8cc1992265fffef4", "sha256": "2f2da4c8d759789812f8bdfc4f708ab92dc23a2628cda412c387c41d71d8a7d4"}, "downloads": -1, "filename": "gconf-0.5.4.tar.gz", "has_sig": false, "md5_digest": "f1a13c90657742db8cc1992265fffef4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4601, "upload_time": "2019-03-14T16:50:50", "upload_time_iso_8601": "2019-03-14T16:50:50.435146Z", "url": "https://files.pythonhosted.org/packages/2f/69/052ba4e25770bbe2ea28ee7b20ed87042f1153183dbb7d383c095df6a7b3/gconf-0.5.4.tar.gz", "yanked": false}], "0.5.5": [{"comment_text": "", "digests": {"md5": "4018ce6d8a5cc275eae3d49c79f6d655", "sha256": "844cb3d48d6151eb8b1f6622bc432e159c7c9ccb577e6aa2930d44c233c0c008"}, "downloads": -1, "filename": "gconf-0.5.5.tar.gz", "has_sig": false, "md5_digest": "4018ce6d8a5cc275eae3d49c79f6d655", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4604, "upload_time": "2019-03-23T23:03:27", "upload_time_iso_8601": "2019-03-23T23:03:27.338278Z", "url": "https://files.pythonhosted.org/packages/cb/ac/05bcee409a74fa7ea87b8e4790ba01e3eb944276fa37426b7e2672f6b1ae/gconf-0.5.5.tar.gz", "yanked": false}], "0.6.0": [{"comment_text": "", "digests": {"md5": "fd26f3392ee6f83ab9c3966022b1a0b0", "sha256": "a88edb914994493d88d269470c3af80c8268d75ba9868956b465f9c2e898a88f"}, "downloads": -1, "filename": "gconf-0.6.0.tar.gz", "has_sig": false, "md5_digest": "fd26f3392ee6f83ab9c3966022b1a0b0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4659, "upload_time": "2019-04-11T09:17:47", "upload_time_iso_8601": "2019-04-11T09:17:47.633291Z", "url": "https://files.pythonhosted.org/packages/9b/21/52e2e16b15657b029d19d5ccdfafd1601408f1856137b9974272f4dc0247/gconf-0.6.0.tar.gz", "yanked": false}], "0.6.1": [{"comment_text": "", "digests": {"md5": "26077a8d70c3f69705cc5de1a0de81f0", "sha256": "5951a3568f958482fe1b112d5cd47e2fb8f45d6017cdb5177ec87e57d6eb81e7"}, "downloads": -1, "filename": "gconf-0.6.1.tar.gz", "has_sig": false, "md5_digest": "26077a8d70c3f69705cc5de1a0de81f0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4659, "upload_time": "2019-04-13T18:37:11", "upload_time_iso_8601": "2019-04-13T18:37:11.050023Z", "url": "https://files.pythonhosted.org/packages/29/69/50ddfa94d69e5e18e758d44bc1b2e2712d5626cc94685510d4e63c58e85e/gconf-0.6.1.tar.gz", "yanked": false}], "0.6.2": [{"comment_text": "", "digests": {"md5": "25b4e4b0227863e2d751e9f9202293da", "sha256": "3fb7974113209dbdc8200745df36134e9557746862239fd75230d2b02fda865b"}, "downloads": -1, "filename": "gconf-0.6.2.tar.gz", "has_sig": false, "md5_digest": "25b4e4b0227863e2d751e9f9202293da", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4719, "upload_time": "2019-04-27T09:00:34", "upload_time_iso_8601": "2019-04-27T09:00:34.734780Z", "url": "https://files.pythonhosted.org/packages/48/b4/a8064dec28979a3f2fc0cfa454882aeeb53dcbcdbe6e49351c6a6e255e3f/gconf-0.6.2.tar.gz", "yanked": false}], "0.6.3": [{"comment_text": "", "digests": {"md5": "148a20f58ae52ad066f5d6b6ca3fc857", "sha256": "72472b949c181102cc45b7c6ac06d33df9505e7dfbb322c44658997d657fd83f"}, "downloads": -1, "filename": "gconf-0.6.3.tar.gz", "has_sig": false, "md5_digest": "148a20f58ae52ad066f5d6b6ca3fc857", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4956, "upload_time": "2019-11-15T09:41:13", "upload_time_iso_8601": "2019-11-15T09:41:13.416166Z", "url": "https://files.pythonhosted.org/packages/6e/7e/efe7aa1ec10fa50862f9f19fd7d80fc0aa130b56ce67fad305c3f96511d3/gconf-0.6.3.tar.gz", "yanked": false}], "0.6.4": [{"comment_text": "", "digests": {"md5": "0b0ad83b8f1749110b5dbc230e0da232", "sha256": "92b12beaf172cff0866e9986ac8a83119b9556749d1e36aea05a4901aa155100"}, "downloads": -1, "filename": "gconf-0.6.4.tar.gz", "has_sig": false, "md5_digest": "0b0ad83b8f1749110b5dbc230e0da232", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5007, "upload_time": "2020-03-01T10:31:36", "upload_time_iso_8601": "2020-03-01T10:31:36.693894Z", "url": "https://files.pythonhosted.org/packages/a8/7c/ea02fbf8af47abdc48d8911d109e634bfdd68f835383517298a3675827ea/gconf-0.6.4.tar.gz", "yanked": false}], "0.6.5": [{"comment_text": "", "digests": {"md5": "287d7bc5bf814192dab8a16242360423", "sha256": "30772def35c62683f00e3de936d67d64fb63bfba46923f7f7546d443c49b26b2"}, "downloads": -1, "filename": "gconf-0.6.5.tar.gz", "has_sig": false, "md5_digest": "287d7bc5bf814192dab8a16242360423", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5129, "upload_time": "2020-04-08T15:31:52", "upload_time_iso_8601": "2020-04-08T15:31:52.607991Z", "url": "https://files.pythonhosted.org/packages/03/c5/ea1671cf24c9e81c2e4f2389273222210d8f3d662c300296afc2d979e494/gconf-0.6.5.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "287d7bc5bf814192dab8a16242360423", "sha256": "30772def35c62683f00e3de936d67d64fb63bfba46923f7f7546d443c49b26b2"}, "downloads": -1, "filename": "gconf-0.6.5.tar.gz", "has_sig": false, "md5_digest": "287d7bc5bf814192dab8a16242360423", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5129, "upload_time": "2020-04-08T15:31:52", "upload_time_iso_8601": "2020-04-08T15:31:52.607991Z", "url": "https://files.pythonhosted.org/packages/03/c5/ea1671cf24c9e81c2e4f2389273222210d8f3d662c300296afc2d979e494/gconf-0.6.5.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:58:47 2020"}