{"info": {"author": "Patrick Carroll", "author_email": "patrick@patrickomatic.com", "bugtrack_url": null, "classifiers": [], "description": ".. image:: http://pledgie.com/campaigns/14384.png?skin_name=chrome\n    :alt: Click here to lend your support to: django-url-imaging and make a donation at www.pledgie.com!\n    :target: http://www.pledgie.com/campaigns/14384\n\n\ndjango-url-imaging\n==================\n\ndjango-url-imaging provides URL-based image processing functionality for Django\nprojects.  It features a plugabble storage system with implementations for\nstoring images locally,  on `Amazon S3`_ or using the SCP utiltiy to copy them\nto another server.  \n\n\nOverview\n--------\n\nOnce installed and configured, django-url-imaging will allow you to embed\nthumbnails and other image transformations using nothing more than a specially\ncrafted URL.  As an example, if you configured django-url-imaging to listen\nfor requests on ``/thumbnails/`` and needed to have a resized copy of the \nimage at ``http://media.mydomain.com/foo.jpg``, you would just create a link\nlike: ::\n\n  <img src=\"/thumbnails/resize/50x50/media.mydomain.com/foo.jpg\" />\n\ndjango-url-imaging provides many different URL-based commands_ for image\nprocessing such as cropping, resizing, scaling, watermarking and `much more`_.\nFor more information on django-url-imaging, please check out the Wiki_.\n\n\nInstallation\n------------\n\n1. Download_ and install django-url-imaging using Distutils_:\n\n  ``$ sudo python setup.py install``\n\n2. Add the ``urlimaging`` app to ``INSTALLED_APPS``\n\n3. Include ``urlimaging.urls`` as a resource in your ``urls.py``:\n\n  ``(r'thumbnails/', include('urlimaging.urls')),``\n\n4. Finally, depending on if you want to use S3 or local file storage, configure the appropriate settings:\n\n\nConfiguration\n-------------\n\nDepending on how you plan to store your images, you will need to add one of the\nfollowing sets of properties to your ``settings.py`` file:\n\nAmazon S3\n~~~~~~~~~\n\n* ``IMAGE_STORAGE_BACKEND`` \u2013 This should be set to 'S3ImageStorage' to specify the S3 storage backend.\n\n* ``S3_BUCKET_NAME`` \u2013 The name of the bucket (which should already be created) on S3 where images will be stored.\n\n* ``AWS_ACCESS_KEY_ID`` \u2013 The AWS access key provided by Amazon.\n\n* ``AWS_SECRET_ACCESS_KEY`` \u2013 The AWS secret access key provided by Amazon.\n\n* ``S3_EXPIRES`` (optional) \u2013 The length of time which the S3-generated URL will be valid.\n\n\n\nLocal Image Storage\n~~~~~~~~~~~~~~~~~~~\n\n* ``IMAGE_STORAGE_BACKEND`` \u2013 This parameter should be set to 'LocalImageStorage' for the local image storage backend.\n\n* ``IMAGE_WHITELIST_FN`` \u2013 A function which takes a url as an argument and uses that to decide whether or not to allow it to be processed.  By default it is defined as ``lambda url: True`` which will allow for processing all images.  To restrict it to only process images in your ``MEDIA_URL``, set it to:\n\n  ``IMAGE_WHITELIST_FN = lambda url: settings.MEDIA_URL in url``\n\n* ``IMAGE_STORAGE_DIR`` (optional) \u2013 The full path to the directory where images should be stored if this is not set, the value is inherited from MEDIA_ROOT. This directory should be publicly accessible since the application doesn't serve images directly from it.\n\n* ``IMAGE_PATH_PREFIX`` (optional) - A path that is prepended to the path of the processed image.\n\nSCP\n~~~\n\nIf you'd like to use the ``scp`` command to copy the generated files to another UNIX-like server, configure the following options:\n\n* ``PROCESSED_MEDIA_URL`` - A URL where the images can be accessed once they are stored\n\n* ``SSH_MEDIA_USER`` - The username which has ssh access on the remote host\n\n* ``SSH_MEDIA_PATH`` - The path to where the images will be stored on the remote host\n\n* ``SSH_IDENTITY_FILE`` - If an identity file is required for access to the remote host, this is the path to that file.\n\n\nCustom django-admin commands\n----------------------------\n\ndjango-url-imaging adds the following custom command to the project's django-admin:\n\n* ``removeoldimages`` - Will remove any processed images which haven't been visited for a a predetermined time (defaults to a week).  It is recommended that this is added to a scheduling system such as ``cron`` to be run every couple of days.  \n\n\nAdditional Configuration\n------------------------\n\n* ``MEDIA_URL`` \u2013 If you're using the LocalImageStorage backend, setting this parameter gives the root url that serves images stored in the ``IMAGE_STORAGE_DIR``\n\n* ``FONT_PATH`` - The path to the font file to be used when using the watermark operation.  Defaults to ``/usr/share/fonts/truetype/freefont/FreeSansBold.ttf``\n\n* ``IMAGE_EXPIRATION_DAYS`` - The number of days before images which haven't been visited are deleted.  Defaults to ``7``.\n\n\n.. _Amazon S3: http://google.com\n.. _Download: http://github.com/patrickomatic/django-url-imaging/downloads\n.. _Distutils: http://docs.python.org/distutils/\n.. _configure: http://wiki.github.com/patrickomatic/django-url-imaging/installation\n.. _commands: http://wiki.github.com/patrickomatic/django-url-imaging/how-to-use\n.. _much more: http://wiki.github.com/patrickomatic/django-url-imaging/how-to-use\n.. _Wiki: http://wiki.github.com/patrickomatic/django-url-imaging/\n", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/patrickomatic/django-url-imaging", "keywords": null, "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "django-url-imaging", "package_url": "https://pypi.org/project/django-url-imaging/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/django-url-imaging/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/patrickomatic/django-url-imaging"}, "release_url": "https://pypi.org/project/django-url-imaging/0.4.1/", "requires_dist": null, "requires_python": null, "summary": "URL-based image processing for Django", "version": "0.4.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"http://www.pledgie.com/campaigns/14384\" rel=\"nofollow\"><img alt=\"Click here to lend your support to: django-url-imaging and make a donation at www.pledgie.com!\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2d4096ec774fce6f312d0d946254e299cc406223/687474703a2f2f706c65646769652e636f6d2f63616d706169676e732f31343338342e706e673f736b696e5f6e616d653d6368726f6d65\"></a>\n<div id=\"django-url-imaging\">\n<h2>django-url-imaging</h2>\n<p>django-url-imaging provides URL-based image processing functionality for Django\nprojects.  It features a plugabble storage system with implementations for\nstoring images locally,  on <a href=\"http://google.com\" rel=\"nofollow\">Amazon S3</a> or using the SCP utiltiy to copy them\nto another server.</p>\n<div id=\"overview\">\n<h3>Overview</h3>\n<p>Once installed and configured, django-url-imaging will allow you to embed\nthumbnails and other image transformations using nothing more than a specially\ncrafted URL.  As an example, if you configured django-url-imaging to listen\nfor requests on <tt>/thumbnails/</tt> and needed to have a resized copy of the\nimage at <tt><span class=\"pre\">http://media.mydomain.com/foo.jpg</span></tt>, you would just create a link\nlike:</p>\n<pre>&lt;img src=\"/thumbnails/resize/50x50/media.mydomain.com/foo.jpg\" /&gt;\n</pre>\n<p>django-url-imaging provides many different URL-based <a href=\"http://wiki.github.com/patrickomatic/django-url-imaging/how-to-use\" rel=\"nofollow\">commands</a> for image\nprocessing such as cropping, resizing, scaling, watermarking and <a href=\"http://wiki.github.com/patrickomatic/django-url-imaging/how-to-use\" rel=\"nofollow\">much more</a>.\nFor more information on django-url-imaging, please check out the <a href=\"http://wiki.github.com/patrickomatic/django-url-imaging/\" rel=\"nofollow\">Wiki</a>.</p>\n</div>\n<div id=\"installation\">\n<h3>Installation</h3>\n<ol>\n<li><a href=\"http://github.com/patrickomatic/django-url-imaging/downloads\" rel=\"nofollow\">Download</a> and install django-url-imaging using <a href=\"http://docs.python.org/distutils/\" rel=\"nofollow\">Distutils</a>:</li>\n</ol>\n<blockquote>\n<tt>$ sudo python setup.py install</tt></blockquote>\n<ol>\n<li>Add the <tt>urlimaging</tt> app to <tt>INSTALLED_APPS</tt></li>\n<li>Include <tt>urlimaging.urls</tt> as a resource in your <tt>urls.py</tt>:</li>\n</ol>\n<blockquote>\n<tt><span class=\"pre\">(r'thumbnails/',</span> <span class=\"pre\">include('urlimaging.urls')),</span></tt></blockquote>\n<ol>\n<li>Finally, depending on if you want to use S3 or local file storage, configure the appropriate settings:</li>\n</ol>\n</div>\n<div id=\"configuration\">\n<h3>Configuration</h3>\n<p>Depending on how you plan to store your images, you will need to add one of the\nfollowing sets of properties to your <tt>settings.py</tt> file:</p>\n<div id=\"amazon-s3\">\n<h4>Amazon S3</h4>\n<ul>\n<li><tt>IMAGE_STORAGE_BACKEND</tt> \u2013 This should be set to \u2018S3ImageStorage\u2019 to specify the S3 storage backend.</li>\n<li><tt>S3_BUCKET_NAME</tt> \u2013 The name of the bucket (which should already be created) on S3 where images will be stored.</li>\n<li><tt>AWS_ACCESS_KEY_ID</tt> \u2013 The AWS access key provided by Amazon.</li>\n<li><tt>AWS_SECRET_ACCESS_KEY</tt> \u2013 The AWS secret access key provided by Amazon.</li>\n<li><tt>S3_EXPIRES</tt> (optional) \u2013 The length of time which the S3-generated URL will be valid.</li>\n</ul>\n</div>\n<div id=\"local-image-storage\">\n<h4>Local Image Storage</h4>\n<ul>\n<li><p><tt>IMAGE_STORAGE_BACKEND</tt> \u2013 This parameter should be set to \u2018LocalImageStorage\u2019 for the local image storage backend.</p>\n</li>\n<li><p><tt>IMAGE_WHITELIST_FN</tt> \u2013 A function which takes a url as an argument and uses that to decide whether or not to allow it to be processed.  By default it is defined as <tt>lambda url: True</tt> which will allow for processing all images.  To restrict it to only process images in your <tt>MEDIA_URL</tt>, set it to:</p>\n<p><tt>IMAGE_WHITELIST_FN = lambda url: settings.MEDIA_URL in url</tt></p>\n</li>\n<li><p><tt>IMAGE_STORAGE_DIR</tt> (optional) \u2013 The full path to the directory where images should be stored if this is not set, the value is inherited from MEDIA_ROOT. This directory should be publicly accessible since the application doesn\u2019t serve images directly from it.</p>\n</li>\n<li><p><tt>IMAGE_PATH_PREFIX</tt> (optional) - A path that is prepended to the path of the processed image.</p>\n</li>\n</ul>\n</div>\n<div id=\"scp\">\n<h4>SCP</h4>\n<p>If you\u2019d like to use the <tt>scp</tt> command to copy the generated files to another UNIX-like server, configure the following options:</p>\n<ul>\n<li><tt>PROCESSED_MEDIA_URL</tt> - A URL where the images can be accessed once they are stored</li>\n<li><tt>SSH_MEDIA_USER</tt> - The username which has ssh access on the remote host</li>\n<li><tt>SSH_MEDIA_PATH</tt> - The path to where the images will be stored on the remote host</li>\n<li><tt>SSH_IDENTITY_FILE</tt> - If an identity file is required for access to the remote host, this is the path to that file.</li>\n</ul>\n</div>\n</div>\n<div id=\"custom-django-admin-commands\">\n<h3>Custom django-admin commands</h3>\n<p>django-url-imaging adds the following custom command to the project\u2019s django-admin:</p>\n<ul>\n<li><tt>removeoldimages</tt> - Will remove any processed images which haven\u2019t been visited for a a predetermined time (defaults to a week).  It is recommended that this is added to a scheduling system such as <tt>cron</tt> to be run every couple of days.</li>\n</ul>\n</div>\n<div id=\"additional-configuration\">\n<h3>Additional Configuration</h3>\n<ul>\n<li><tt>MEDIA_URL</tt> \u2013 If you\u2019re using the LocalImageStorage backend, setting this parameter gives the root url that serves images stored in the <tt>IMAGE_STORAGE_DIR</tt></li>\n<li><tt>FONT_PATH</tt> - The path to the font file to be used when using the watermark operation.  Defaults to <tt>/usr/share/fonts/truetype/freefont/FreeSansBold.ttf</tt></li>\n<li><tt>IMAGE_EXPIRATION_DAYS</tt> - The number of days before images which haven\u2019t been visited are deleted.  Defaults to <tt>7</tt>.</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 968240, "releases": {"0.2": [{"comment_text": "", "digests": {"md5": "884c1f16e75dde8770fc08d71c96a3c7", "sha256": "1473943075513de6d6ebac08d69e372d71a6b8185d4915df5720f7c4b1375474"}, "downloads": -1, "filename": "django-url-imaging-0.2.tar.gz", "has_sig": false, "md5_digest": "884c1f16e75dde8770fc08d71c96a3c7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10643, "upload_time": "2011-01-14T00:57:20", "upload_time_iso_8601": "2011-01-14T00:57:20.952318Z", "url": "https://files.pythonhosted.org/packages/e3/a0/1578043c54b87bc04c11d44ade15fbe6ba503275ce9c1f0985f87b1115cc/django-url-imaging-0.2.tar.gz", "yanked": false}], "0.3": [], "0.3.1": [{"comment_text": "", "digests": {"md5": "aea4a9d8e8f0a8df20f8c01f4091cbc4", "sha256": "85730e4f938b13b8328f44796289010409fa40067f1c532dc88549d280c91d88"}, "downloads": -1, "filename": "django-url-imaging-0.3.1.tar.gz", "has_sig": false, "md5_digest": "aea4a9d8e8f0a8df20f8c01f4091cbc4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12848, "upload_time": "2011-07-14T16:02:24", "upload_time_iso_8601": "2011-07-14T16:02:24.173842Z", "url": "https://files.pythonhosted.org/packages/aa/6f/ba3967179fe8b2711506a394b438e5359c900502fba1908cd3cfd3d460ad/django-url-imaging-0.3.1.tar.gz", "yanked": false}], "0.3.2": [{"comment_text": "built for Linux-3.2.0-45-generic-x86_64-with-glibc2.7", "digests": {"md5": "7b9a505e6c97c2357e24d4c29228c1fe", "sha256": "49e46e99c707b747753a30fdfa04ad6241146a601e82a1eca2ffe2c427dc7134"}, "downloads": -1, "filename": "django-url-imaging-0.3.2.linux-x86_64.tar.gz", "has_sig": false, "md5_digest": "7b9a505e6c97c2357e24d4c29228c1fe", "packagetype": "bdist_dumb", "python_version": "any", "requires_python": null, "size": 29719, "upload_time": "2013-05-31T20:50:07", "upload_time_iso_8601": "2013-05-31T20:50:07.793256Z", "url": "https://files.pythonhosted.org/packages/9b/13/2406594c8cc18c8ef008f7739cb85d5e099b112572ef4352f8652c3c88af/django-url-imaging-0.3.2.linux-x86_64.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "d6992fb7f95f4164dd9c442347de656f", "sha256": "41488dbbe8be18d5714788df404971b91408b4147d144b88f6e4be2e22fff90c"}, "downloads": -1, "filename": "django-url-imaging-0.3.2.tar.gz", "has_sig": false, "md5_digest": "d6992fb7f95f4164dd9c442347de656f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13259, "upload_time": "2013-05-31T20:50:00", "upload_time_iso_8601": "2013-05-31T20:50:00.616900Z", "url": "https://files.pythonhosted.org/packages/af/c2/3f592b102652601a2a61d54cf0d2863ffb5ee9329e469e83d442f09aca85/django-url-imaging-0.3.2.tar.gz", "yanked": false}], "0.3.3": [{"comment_text": "built for Linux-3.2.0-45-generic-x86_64-with-glibc2.7", "digests": {"md5": "674a1dd9f20b669c68f312f45b1dba09", "sha256": "8779579edfae30365d41e4f954ff92cef4a256fad608e63419079857b6317952"}, "downloads": -1, "filename": "django-url-imaging-0.3.3.linux-x86_64.tar.gz", "has_sig": false, "md5_digest": "674a1dd9f20b669c68f312f45b1dba09", "packagetype": "bdist_dumb", "python_version": "any", "requires_python": null, "size": 29744, "upload_time": "2013-06-04T14:41:21", "upload_time_iso_8601": "2013-06-04T14:41:21.067648Z", "url": "https://files.pythonhosted.org/packages/d1/52/516758daa844609301009af34c6e754d7564eafb42ba0d766fdd96d9202f/django-url-imaging-0.3.3.linux-x86_64.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "b2ac73161bbcc07621668b0aa8c73715", "sha256": "432ffa48bca5826bbab515b1e4d4db3c3b1a232e02d1ffdc0f2579629ebecd24"}, "downloads": -1, "filename": "django-url-imaging-0.3.3.tar.gz", "has_sig": false, "md5_digest": "b2ac73161bbcc07621668b0aa8c73715", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13279, "upload_time": "2013-06-04T14:41:09", "upload_time_iso_8601": "2013-06-04T14:41:09.917156Z", "url": "https://files.pythonhosted.org/packages/29/ac/3c47456f692958d8aa6df84e5b352a3e387c32d8082ae94b8650cb41a7a1/django-url-imaging-0.3.3.tar.gz", "yanked": false}], "0.4.1": [{"comment_text": "", "digests": {"md5": "19fa0a57b8ab9af90835dc456befad5a", "sha256": "69d2cc19f7154ae7e1fcf5abef5b18929b034f797d29541662afeeb993c85690"}, "downloads": -1, "filename": "django-url-imaging-0.4.1.tar.gz", "has_sig": false, "md5_digest": "19fa0a57b8ab9af90835dc456befad5a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13474, "upload_time": "2014-01-14T03:33:02", "upload_time_iso_8601": "2014-01-14T03:33:02.941442Z", "url": "https://files.pythonhosted.org/packages/7a/c2/1301a0002ff6b122eda2d94bb19911db16e4c47b31fc8ecb5deb9d7ce4a8/django-url-imaging-0.4.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "19fa0a57b8ab9af90835dc456befad5a", "sha256": "69d2cc19f7154ae7e1fcf5abef5b18929b034f797d29541662afeeb993c85690"}, "downloads": -1, "filename": "django-url-imaging-0.4.1.tar.gz", "has_sig": false, "md5_digest": "19fa0a57b8ab9af90835dc456befad5a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13474, "upload_time": "2014-01-14T03:33:02", "upload_time_iso_8601": "2014-01-14T03:33:02.941442Z", "url": "https://files.pythonhosted.org/packages/7a/c2/1301a0002ff6b122eda2d94bb19911db16e4c47b31fc8ecb5deb9d7ce4a8/django-url-imaging-0.4.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:52:11 2020"}