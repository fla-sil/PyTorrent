{"info": {"author": "Thea Flowers", "author_email": "theaflowers@google.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Operating System :: MacOS", "Operating System :: POSIX", "Operating System :: Unix", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "Talisman: HTTP security headers for Flask\n=========================================\n\n|Build Status| |Coverage Status| |PyPI Version|\n\nTalisman is a small Flask extension that handles setting HTTP headers\nthat can help protect against a few common web application security\nissues.\n\nThe default configuration:\n\n-  Forces all connects to ``https``, unless running with debug enabled.\n-  Enables `HTTP Strict Transport\n   Security <https://developer.mozilla.org/en-US/docs/Web/Security/HTTP_strict_transport_security>`_.\n-  Sets Flask's session cookie to ``secure``, so it will never be set if\n   your application is somehow accessed via a non-secure connection.\n-  Sets Flask's session cookie to ``httponly``, preventing JavaScript\n   from being able to access its content. CSRF via Ajax uses a separate\n   cookie and should be unaffected.\n-  Sets\n   `X-Frame-Options <https://developer.mozilla.org/en-US/docs/Web/HTTP/X-Frame-Options>`_\n   to ``SAMEORIGIN`` to avoid\n   `clickjacking <https://en.wikipedia.org/wiki/Clickjacking>`_.\n-  Sets `X-XSS-Protection\n   <http://msdn.microsoft.com/en-us/library/dd565647(v=vs.85).aspx>`_ to enable\n   a cross site scripting filter for IE/Chrome.\n-  Sets `X-Content-Type-Options\n   <https://msdn.microsoft.com/library/gg622941(v=vs.85).aspx>`_ to prevents\n   content type sniffing for IE >= 9.\n-  Sets `X-Download-Options\n   <https://msdn.microsoft.com/library/jj542450(v=vs.85).aspx>`_ to prevent\n   file downloads opening for IE >= 8.\n-  Sets a strict `Content Security\n   Policy <https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy>`__\n   of ``default-src: 'self'``. This is intended to almost completely\n   prevent Cross Site Scripting (XSS) attacks. This is probably the only\n   setting that you should reasonably change. See the\n   `Content Security Policy`_ section.\n-  Sets a strict `Referrer-Policy <https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referrer-Policy>`_\n   of ``strict-origin-when-cross-origin`` that governs which referrer information should be included with\n   requests made.\n\nIn addition to Talisman, you **should always use a cross-site request\nforgery (CSRF) library**. It's highly recommended to use\n`Flask-SeaSurf <https://flask-seasurf.readthedocs.org/en/latest/>`_,\nwhich is based on Django's excellent library.\n\nInstallation & Basic Usage\n--------------------------\n\nInstall via `pip <https://pypi.python.org/pypi/pip>`_:\n\n::\n\n    pip install flask-talisman\n\nAfter installing, wrap your Flask app with a ``Talisman``:\n\n.. code:: python\n\n    from flask import Flask\n    from flask_talisman import Talisman\n\n    app = Flask(__name__)\n    Talisman(app)\n\n\nThere is also a full `Example App <https://github.com/GoogleCloudPlatform/flask-talisman/blob/master/example_app>`_.\n\nOptions\n-------\n\n-  ``feature_policy``, default ``{}``, see the `Feature Policy` section.\n-  ``force_https``, default ``True``, forces all non-debug connects to\n   ``https``.\n-  ``force_https_permanent``, default ``False``, uses ``301`` instead of\n   ``302`` for ``https`` redirects.\n-  ``frame_options``, default ``SAMEORIGIN``, can be ``SAMEORIGIN``,\n   ``DENY``, or ``ALLOWFROM``.\n-  ``frame_options_allow_from``, default ``None``, a string indicating\n   the domains that are allowed to embed the site via iframe.\n-  ``strict_transport_security``, default ``True``, whether to send HSTS\n   headers.\n-  ``strict_transport_security_preload``, default ``False``, enables HSTS\n   preloading If you register your application with\n   `Google's HSTS preload list <https://hstspreload.appspot.com/>`_,\n   Firefox and Chrome will never load your site over a non-secure\n   connection.\n-  ``strict_transport_security_max_age``, default ``ONE_YEAR_IN_SECS``,\n   length of time the browser will respect the HSTS header.\n-  ``strict_transport_security_include_subdomains``, default ``True``,\n   whether subdomains should also use HSTS.\n-  ``content_security_policy``, default ``default-src: 'self'``, see the\n   `Content Security Policy`_ section.\n-  ``content_security_policy_nonce_in``, default ``[]``. Adds a per-request nonce\n    value to the flask request object and also to the specified CSP header section.\n    I.e. ['script-src', 'style-src']\n-  ``content_security_policy_report_only``, default ``False``, whether to set\n   the CSP header as \"report-only\" (as `Content-Security-Policy-Report-Only`)\n   to ease deployment by disabling the policy enforcement by the browser,\n   requires passing a value with the ``content_security_policy_report_uri``\n   parameter\n-  ``content_security_policy_report_uri``, default ``None``, a string\n   indicating the report URI used for `CSP violation reports\n   <https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Using_CSP_violation_reports>`_\n- ``legacy_content_security_policy_header``, default ``True``, Whether to add X-CSP header\n-  ``referrer_policy``, default ``strict-origin-when-cross-origin``, a string\n   that sets the Referrer Policy header to send a full URL when performing a same-origin\n   request, only send the origin of the document to an equally secure destination\n   (HTTPS->HTTPS), and send no header to a less secure destination (HTTPS->HTTP).\n-  ``session_cookie_secure``, default ``True``, set the session cookie\n   to ``secure``, preventing it from being sent over plain ``http``.\n-  ``session_cookie_http_only``, default ``True``, set the session\n   cookie to ``httponly``, preventing it from being read by JavaScript.\n-  ``force_file_save``, default ``False``, whether to set the\n   ``X-Download-Options`` header to ``noopen`` to prevent IE >= 8 to from\n   opening file downloads directly and only save them instead\n\nPer-view options\n~~~~~~~~~~~~~~~~\n\nSometimes you want to change the policy for a specific view. The\n``force_https``, ``frame_options``, ``frame_options_allow_from``, and\n``content_security_policy`` options can be changed on a per-view basis.\n\n.. code:: python\n\n    from flask import Flask\n    from flask_talisman import Talisman, ALLOW_FROM\n\n    app = Flask(__name__)\n    talisman = Talisman(app)\n\n    @app.route('/normal')\n    def normal():\n        return 'Normal'\n\n    @app.route('/embeddable')\n    @talisman(frame_options=ALLOW_FROM, frame_options_allow_from='*')\n    def embeddable():\n        return 'Embeddable'\n\nContent Security Policy\n-----------------------\n\nThe default content security policy is extremely strict and will\nprevent loading any resources that are not in the same domain as the\napplication. Most web applications will need to change this policy.\n\nA slightly more permissive policy is available at\n``flask_talisman.GOOGLE_CSP_POLICY``, which allows loading Google-hosted JS\nlibraries, fonts, and embeding media from YouTube and Maps.\n\nYou can and should create your own policy to suit your site's needs.\nHere's a few examples adapted from\n`MDN <https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Using_Content_Security_Policy>`_:\n\nExample 1\n~~~~~~~~~\n\nThis is the default policy. A web site administrator wants all content\nto come from the site's own origin (this excludes subdomains.)\n\n.. code:: python\n\n    csp = {\n        'default-src': '\\'self\\''\n    }\n    talisman = Talisman(app, content_security_policy=csp)\n\nExample 2\n~~~~~~~~~\n\nA web site administrator wants to allow content from a trusted domain\nand all its subdomains (it doesn't have to be the same domain that the\nCSP is set on.)\n\n.. code:: python\n\n    csp = {\n        'default-src': [\n            '\\'self\\'',\n            '*.trusted.com'\n        ]\n    }\n\nExample 3\n~~~~~~~~~\n\nA web site administrator wants to allow users of a web application to\ninclude images from any origin in their own content, but to restrict\naudio or video media to trusted providers, and all scripts only to a\nspecific server that hosts trusted code.\n\n.. code:: python\n\n    csp = {\n        'default-src': '\\'self\\'',\n        'img-src': '*',\n        'media-src': [\n            'media1.com',\n            'media2.com',\n        ],\n        'script-src': 'userscripts.example.com'\n    }\n\nIn this example content is only permitted from the document's origin\nwith the following exceptions:\n\n-  Images may loaded from anywhere (note the ``*`` wildcard).\n-  Media is only allowed from media1.com and media2.com (and not from\n   subdomains of those sites).\n-  Executable script is only allowed from userscripts.example.com.\n\nExample 4\n~~~~~~~~~\n\nA web site administrator for an online banking site wants to ensure that\nall its content is loaded using SSL, in order to prevent attackers from\neavesdropping on requests.\n\n.. code:: python\n\n    csp = {\n        'default-src': 'https://onlinebanking.jumbobank.com'\n    }\n\nThe server only permits access to documents being loaded specifically\nover HTTPS through the single origin onlinebanking.jumbobank.com.\n\nExample 5\n~~~~~~~~~\n\nA web site administrator of a web mail site wants to allow HTML in\nemail, as well as images loaded from anywhere, but not JavaScript or\nother potentially dangerous content.\n\n.. code:: python\n\n    csp = {\n        'default-src': [\n            '\\'self\\'',\n            '*.mailsite.com',\n        ],\n        'img-src': '*'\n    }\n\nNote that this example doesn't specify a ``script-src``; with the\nexample CSP, this site uses the setting specified by the ``default-src``\ndirective, which means that scripts can be loaded only from the\noriginating server.\n\nExample 6\n~~~~~~~~~\n\nA web site administrator wants to allow embedded scripts (which might\nbe generated dynamicially).\n\n.. code:: python\n\n    csp = {\n        'default-src': '\\'self\\'',\n        'script-src': '\\'self\\'',\n    }\n    talisman = Talisman(\n        app,\n        content_security_policy=csp,\n        content_security_policy_nonce_in=['script-src']\n    )\n\nThe nonce needs to be added to the script tag in the template:\n\n.. code:: html\n\n    <script nonce=\"{{ csp_nonce() }}\">\n        //...\n    </script>\n\nNote that the CSP directive (`script-src` in the example) to which the `nonce-...`\nsource should be added needs to be defined explicitly.\n\nExample 7\n~~~~~~~~~\n\nA web site adminstrator wants to override the CSP directives via an\nenvironment variable which doesn't support specifying the policy as\na Python dictionary, e.g.:\n\n.. code:: bash\n\n    export CSP_DIRECTIVES=\"default-src 'self'; image-src *\"\n    python app.py\n\nThen in the app code you can read the CSP directives from the environment:\n\n.. code:: python\n\n    import os\n    from flask_talisman import Talisman, DEFAULT_CSP_POLICY\n\n    talisman = Talisman(\n        app,\n        content_security_policy=os.environ.get(\"CSP_DIRECTIVES\", DEFAULT_CSP_POLICY),\n    )\n\nAs you can see above the policy can be defined simply just like the official\nspecification requires the HTTP header to be set: As a semicolon separated\nlist of individual CSP directives.\n\nFeature Policy\n--------------\n\nThe default feature policy is empty, as this is the default expected behaviour.\nNote that the Feature Policy is still a `draft https://wicg.github.io/feature-policy/`\nand supported in Chrome and Safari.\n\nGeolocation Example\n~~~~~~~~~~~~~~~~~~~\n\nDisable access to Geolocation interface.\n\n.. code:: python\n\n    feature_policy = {\n        'geolocation': '\\'none\\''\n    }\n    talisman = Talisman(app, feature_policy=feature_policy)\n\nDisclaimer\n----------\n\nThis is not an official Google product, experimental or otherwise.\n\nThere is no silver bullet for web application security. Talisman can\nhelp, but security is more than just setting a few headers. Any\npublic-facing web application should have a comprehensive approach to\nsecurity.\n\n\nContributing changes\n--------------------\n\n-  See `CONTRIBUTING.md`_\n\nLicensing\n---------\n\n- Apache 2.0 - See `LICENSE`_\n\n.. _LICENSE: https://github.com/GoogleCloudPlatform/flask-talisman/blob/master/LICENSE\n.. _CONTRIBUTING.md: https://github.com/GoogleCloudPlatform/flask-talisman/blob/master/CONTRIBUTING.md\n.. |Build Status| image:: https://travis-ci.org/GoogleCloudPlatform/flask-talisman.svg\n   :target: https://travis-ci.org/GoogleCloudPlatform/flask-talisman\n.. |Coverage Status| image:: https://coveralls.io/repos/GoogleCloudPlatform/flask-talisman/badge.svg\n   :target: https://coveralls.io/r/GoogleCloudPlatform/flask-talisman\n.. |PyPI Version| image:: https://img.shields.io/pypi/v/flask-talisman.svg\n   :target: https://pypi.python.org/pypi/flask-talisman\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/GoogleCloudPlatform/flask-talisman", "keywords": "flask security https xss", "license": "Apache Software License", "maintainer": "", "maintainer_email": "", "name": "flask-talisman", "package_url": "https://pypi.org/project/flask-talisman/", "platform": "", "project_url": "https://pypi.org/project/flask-talisman/", "project_urls": {"Homepage": "https://github.com/GoogleCloudPlatform/flask-talisman"}, "release_url": "https://pypi.org/project/flask-talisman/0.7.0/", "requires_dist": ["six (>=1.9.0)"], "requires_python": "", "summary": "HTTP security headers for Flask.", "version": "0.7.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://travis-ci.org/GoogleCloudPlatform/flask-talisman\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c46aad634a9386add8865a6bf6403800b9dc7185/68747470733a2f2f7472617669732d63692e6f72672f476f6f676c65436c6f7564506c6174666f726d2f666c61736b2d74616c69736d616e2e737667\"></a> <a href=\"https://coveralls.io/r/GoogleCloudPlatform/flask-talisman\" rel=\"nofollow\"><img alt=\"Coverage Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/55534246dc23532cfd4b68a1ab3578c51e3c3dd2/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f476f6f676c65436c6f7564506c6174666f726d2f666c61736b2d74616c69736d616e2f62616467652e737667\"></a> <a href=\"https://pypi.python.org/pypi/flask-talisman\" rel=\"nofollow\"><img alt=\"PyPI Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4470b4c50b944684d8c31d0c85963d5682dc7a58/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f666c61736b2d74616c69736d616e2e737667\"></a></p>\n<p>Talisman is a small Flask extension that handles setting HTTP headers\nthat can help protect against a few common web application security\nissues.</p>\n<p>The default configuration:</p>\n<ul>\n<li>Forces all connects to <tt>https</tt>, unless running with debug enabled.</li>\n<li>Enables <a href=\"https://developer.mozilla.org/en-US/docs/Web/Security/HTTP_strict_transport_security\" rel=\"nofollow\">HTTP Strict Transport\nSecurity</a>.</li>\n<li>Sets Flask\u2019s session cookie to <tt>secure</tt>, so it will never be set if\nyour application is somehow accessed via a non-secure connection.</li>\n<li>Sets Flask\u2019s session cookie to <tt>httponly</tt>, preventing JavaScript\nfrom being able to access its content. CSRF via Ajax uses a separate\ncookie and should be unaffected.</li>\n<li>Sets\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/X-Frame-Options\" rel=\"nofollow\">X-Frame-Options</a>\nto <tt>SAMEORIGIN</tt> to avoid\n<a href=\"https://en.wikipedia.org/wiki/Clickjacking\" rel=\"nofollow\">clickjacking</a>.</li>\n<li>Sets <a href=\"http://msdn.microsoft.com/en-us/library/dd565647(v=vs.85).aspx\" rel=\"nofollow\">X-XSS-Protection</a> to enable\na cross site scripting filter for IE/Chrome.</li>\n<li>Sets <a href=\"https://msdn.microsoft.com/library/gg622941(v=vs.85).aspx\" rel=\"nofollow\">X-Content-Type-Options</a> to prevents\ncontent type sniffing for IE &gt;= 9.</li>\n<li>Sets <a href=\"https://msdn.microsoft.com/library/jj542450(v=vs.85).aspx\" rel=\"nofollow\">X-Download-Options</a> to prevent\nfile downloads opening for IE &gt;= 8.</li>\n<li>Sets a strict <a href=\"https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\" rel=\"nofollow\">Content Security\nPolicy</a>\nof <tt><span class=\"pre\">default-src:</span> 'self'</tt>. This is intended to almost completely\nprevent Cross Site Scripting (XSS) attacks. This is probably the only\nsetting that you should reasonably change. See the\n<a href=\"#content-security-policy\" rel=\"nofollow\">Content Security Policy</a> section.</li>\n<li>Sets a strict <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referrer-Policy\" rel=\"nofollow\">Referrer-Policy</a>\nof <tt><span class=\"pre\">strict-origin-when-cross-origin</span></tt> that governs which referrer information should be included with\nrequests made.</li>\n</ul>\n<p>In addition to Talisman, you <strong>should always use a cross-site request\nforgery (CSRF) library</strong>. It\u2019s highly recommended to use\n<a href=\"https://flask-seasurf.readthedocs.org/en/latest/\" rel=\"nofollow\">Flask-SeaSurf</a>,\nwhich is based on Django\u2019s excellent library.</p>\n<div id=\"installation-basic-usage\">\n<h2>Installation &amp; Basic Usage</h2>\n<p>Install via <a href=\"https://pypi.python.org/pypi/pip\" rel=\"nofollow\">pip</a>:</p>\n<pre>pip install flask-talisman\n</pre>\n<p>After installing, wrap your Flask app with a <tt>Talisman</tt>:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">flask</span> <span class=\"kn\">import</span> <span class=\"n\">Flask</span>\n<span class=\"kn\">from</span> <span class=\"nn\">flask_talisman</span> <span class=\"kn\">import</span> <span class=\"n\">Talisman</span>\n\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">Flask</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n<span class=\"n\">Talisman</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"p\">)</span>\n</pre>\n<p>There is also a full <a href=\"https://github.com/GoogleCloudPlatform/flask-talisman/blob/master/example_app\" rel=\"nofollow\">Example App</a>.</p>\n</div>\n<div id=\"options\">\n<h2>Options</h2>\n<ul>\n<li><tt>feature_policy</tt>, default <tt>{}</tt>, see the <cite>Feature Policy</cite> section.</li>\n<li><tt>force_https</tt>, default <tt>True</tt>, forces all non-debug connects to\n<tt>https</tt>.</li>\n<li><tt>force_https_permanent</tt>, default <tt>False</tt>, uses <tt>301</tt> instead of\n<tt>302</tt> for <tt>https</tt> redirects.</li>\n<li><tt>frame_options</tt>, default <tt>SAMEORIGIN</tt>, can be <tt>SAMEORIGIN</tt>,\n<tt>DENY</tt>, or <tt>ALLOWFROM</tt>.</li>\n<li><tt>frame_options_allow_from</tt>, default <tt>None</tt>, a string indicating\nthe domains that are allowed to embed the site via iframe.</li>\n<li><tt>strict_transport_security</tt>, default <tt>True</tt>, whether to send HSTS\nheaders.</li>\n<li><tt>strict_transport_security_preload</tt>, default <tt>False</tt>, enables HSTS\npreloading If you register your application with\n<a href=\"https://hstspreload.appspot.com/\" rel=\"nofollow\">Google\u2019s HSTS preload list</a>,\nFirefox and Chrome will never load your site over a non-secure\nconnection.</li>\n<li><tt>strict_transport_security_max_age</tt>, default <tt>ONE_YEAR_IN_SECS</tt>,\nlength of time the browser will respect the HSTS header.</li>\n<li><tt>strict_transport_security_include_subdomains</tt>, default <tt>True</tt>,\nwhether subdomains should also use HSTS.</li>\n<li><tt>content_security_policy</tt>, default <tt><span class=\"pre\">default-src:</span> 'self'</tt>, see the\n<a href=\"#content-security-policy\" rel=\"nofollow\">Content Security Policy</a> section.</li>\n<li><dl>\n<dt><tt>content_security_policy_nonce_in</tt>, default <tt>[]</tt>. Adds a per-request nonce</dt>\n<dd>value to the flask request object and also to the specified CSP header section.\nI.e. [\u2018script-src\u2019, \u2018style-src\u2019]</dd>\n</dl>\n</li>\n<li><tt>content_security_policy_report_only</tt>, default <tt>False</tt>, whether to set\nthe CSP header as \u201creport-only\u201d (as <cite>Content-Security-Policy-Report-Only</cite>)\nto ease deployment by disabling the policy enforcement by the browser,\nrequires passing a value with the <tt>content_security_policy_report_uri</tt>\nparameter</li>\n<li><tt>content_security_policy_report_uri</tt>, default <tt>None</tt>, a string\nindicating the report URI used for <a href=\"https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Using_CSP_violation_reports\" rel=\"nofollow\">CSP violation reports</a></li>\n<li><tt>legacy_content_security_policy_header</tt>, default <tt>True</tt>, Whether to add X-CSP header</li>\n<li><tt>referrer_policy</tt>, default <tt><span class=\"pre\">strict-origin-when-cross-origin</span></tt>, a string\nthat sets the Referrer Policy header to send a full URL when performing a same-origin\nrequest, only send the origin of the document to an equally secure destination\n(HTTPS-&gt;HTTPS), and send no header to a less secure destination (HTTPS-&gt;HTTP).</li>\n<li><tt>session_cookie_secure</tt>, default <tt>True</tt>, set the session cookie\nto <tt>secure</tt>, preventing it from being sent over plain <tt>http</tt>.</li>\n<li><tt>session_cookie_http_only</tt>, default <tt>True</tt>, set the session\ncookie to <tt>httponly</tt>, preventing it from being read by JavaScript.</li>\n<li><tt>force_file_save</tt>, default <tt>False</tt>, whether to set the\n<tt><span class=\"pre\">X-Download-Options</span></tt> header to <tt>noopen</tt> to prevent IE &gt;= 8 to from\nopening file downloads directly and only save them instead</li>\n</ul>\n<div id=\"per-view-options\">\n<h3>Per-view options</h3>\n<p>Sometimes you want to change the policy for a specific view. The\n<tt>force_https</tt>, <tt>frame_options</tt>, <tt>frame_options_allow_from</tt>, and\n<tt>content_security_policy</tt> options can be changed on a per-view basis.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">flask</span> <span class=\"kn\">import</span> <span class=\"n\">Flask</span>\n<span class=\"kn\">from</span> <span class=\"nn\">flask_talisman</span> <span class=\"kn\">import</span> <span class=\"n\">Talisman</span><span class=\"p\">,</span> <span class=\"n\">ALLOW_FROM</span>\n\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">Flask</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n<span class=\"n\">talisman</span> <span class=\"o\">=</span> <span class=\"n\">Talisman</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span><span class=\"p\">(</span><span class=\"s1\">'/normal'</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">normal</span><span class=\"p\">():</span>\n    <span class=\"k\">return</span> <span class=\"s1\">'Normal'</span>\n\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span><span class=\"p\">(</span><span class=\"s1\">'/embeddable'</span><span class=\"p\">)</span>\n<span class=\"nd\">@talisman</span><span class=\"p\">(</span><span class=\"n\">frame_options</span><span class=\"o\">=</span><span class=\"n\">ALLOW_FROM</span><span class=\"p\">,</span> <span class=\"n\">frame_options_allow_from</span><span class=\"o\">=</span><span class=\"s1\">'*'</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">embeddable</span><span class=\"p\">():</span>\n    <span class=\"k\">return</span> <span class=\"s1\">'Embeddable'</span>\n</pre>\n</div>\n</div>\n<div id=\"content-security-policy\">\n<h2>Content Security Policy</h2>\n<p>The default content security policy is extremely strict and will\nprevent loading any resources that are not in the same domain as the\napplication. Most web applications will need to change this policy.</p>\n<p>A slightly more permissive policy is available at\n<tt>flask_talisman.GOOGLE_CSP_POLICY</tt>, which allows loading Google-hosted JS\nlibraries, fonts, and embeding media from YouTube and Maps.</p>\n<p>You can and should create your own policy to suit your site\u2019s needs.\nHere\u2019s a few examples adapted from\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Using_Content_Security_Policy\" rel=\"nofollow\">MDN</a>:</p>\n<div id=\"example-1\">\n<h3>Example 1</h3>\n<p>This is the default policy. A web site administrator wants all content\nto come from the site\u2019s own origin (this excludes subdomains.)</p>\n<pre><span class=\"n\">csp</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'default-src'</span><span class=\"p\">:</span> <span class=\"s1\">'</span><span class=\"se\">\\'</span><span class=\"s1\">self</span><span class=\"se\">\\'</span><span class=\"s1\">'</span>\n<span class=\"p\">}</span>\n<span class=\"n\">talisman</span> <span class=\"o\">=</span> <span class=\"n\">Talisman</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"p\">,</span> <span class=\"n\">content_security_policy</span><span class=\"o\">=</span><span class=\"n\">csp</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"example-2\">\n<h3>Example 2</h3>\n<p>A web site administrator wants to allow content from a trusted domain\nand all its subdomains (it doesn\u2019t have to be the same domain that the\nCSP is set on.)</p>\n<pre><span class=\"n\">csp</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'default-src'</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n        <span class=\"s1\">'</span><span class=\"se\">\\'</span><span class=\"s1\">self</span><span class=\"se\">\\'</span><span class=\"s1\">'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'*.trusted.com'</span>\n    <span class=\"p\">]</span>\n<span class=\"p\">}</span>\n</pre>\n</div>\n<div id=\"example-3\">\n<h3>Example 3</h3>\n<p>A web site administrator wants to allow users of a web application to\ninclude images from any origin in their own content, but to restrict\naudio or video media to trusted providers, and all scripts only to a\nspecific server that hosts trusted code.</p>\n<pre><span class=\"n\">csp</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'default-src'</span><span class=\"p\">:</span> <span class=\"s1\">'</span><span class=\"se\">\\'</span><span class=\"s1\">self</span><span class=\"se\">\\'</span><span class=\"s1\">'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'img-src'</span><span class=\"p\">:</span> <span class=\"s1\">'*'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'media-src'</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n        <span class=\"s1\">'media1.com'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'media2.com'</span><span class=\"p\">,</span>\n    <span class=\"p\">],</span>\n    <span class=\"s1\">'script-src'</span><span class=\"p\">:</span> <span class=\"s1\">'userscripts.example.com'</span>\n<span class=\"p\">}</span>\n</pre>\n<p>In this example content is only permitted from the document\u2019s origin\nwith the following exceptions:</p>\n<ul>\n<li>Images may loaded from anywhere (note the <tt>*</tt> wildcard).</li>\n<li>Media is only allowed from media1.com and media2.com (and not from\nsubdomains of those sites).</li>\n<li>Executable script is only allowed from userscripts.example.com.</li>\n</ul>\n</div>\n<div id=\"example-4\">\n<h3>Example 4</h3>\n<p>A web site administrator for an online banking site wants to ensure that\nall its content is loaded using SSL, in order to prevent attackers from\neavesdropping on requests.</p>\n<pre><span class=\"n\">csp</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'default-src'</span><span class=\"p\">:</span> <span class=\"s1\">'https://onlinebanking.jumbobank.com'</span>\n<span class=\"p\">}</span>\n</pre>\n<p>The server only permits access to documents being loaded specifically\nover HTTPS through the single origin onlinebanking.jumbobank.com.</p>\n</div>\n<div id=\"example-5\">\n<h3>Example 5</h3>\n<p>A web site administrator of a web mail site wants to allow HTML in\nemail, as well as images loaded from anywhere, but not JavaScript or\nother potentially dangerous content.</p>\n<pre><span class=\"n\">csp</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'default-src'</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n        <span class=\"s1\">'</span><span class=\"se\">\\'</span><span class=\"s1\">self</span><span class=\"se\">\\'</span><span class=\"s1\">'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'*.mailsite.com'</span><span class=\"p\">,</span>\n    <span class=\"p\">],</span>\n    <span class=\"s1\">'img-src'</span><span class=\"p\">:</span> <span class=\"s1\">'*'</span>\n<span class=\"p\">}</span>\n</pre>\n<p>Note that this example doesn\u2019t specify a <tt><span class=\"pre\">script-src</span></tt>; with the\nexample CSP, this site uses the setting specified by the <tt><span class=\"pre\">default-src</span></tt>\ndirective, which means that scripts can be loaded only from the\noriginating server.</p>\n</div>\n<div id=\"example-6\">\n<h3>Example 6</h3>\n<p>A web site administrator wants to allow embedded scripts (which might\nbe generated dynamicially).</p>\n<pre><span class=\"n\">csp</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'default-src'</span><span class=\"p\">:</span> <span class=\"s1\">'</span><span class=\"se\">\\'</span><span class=\"s1\">self</span><span class=\"se\">\\'</span><span class=\"s1\">'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'script-src'</span><span class=\"p\">:</span> <span class=\"s1\">'</span><span class=\"se\">\\'</span><span class=\"s1\">self</span><span class=\"se\">\\'</span><span class=\"s1\">'</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n<span class=\"n\">talisman</span> <span class=\"o\">=</span> <span class=\"n\">Talisman</span><span class=\"p\">(</span>\n    <span class=\"n\">app</span><span class=\"p\">,</span>\n    <span class=\"n\">content_security_policy</span><span class=\"o\">=</span><span class=\"n\">csp</span><span class=\"p\">,</span>\n    <span class=\"n\">content_security_policy_nonce_in</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'script-src'</span><span class=\"p\">]</span>\n<span class=\"p\">)</span>\n</pre>\n<p>The nonce needs to be added to the script tag in the template:</p>\n<pre><span class=\"p\">&lt;</span><span class=\"nt\">script</span> <span class=\"na\">nonce</span><span class=\"o\">=</span><span class=\"s\">\"{{ csp_nonce() }}\"</span><span class=\"p\">&gt;</span>\n    <span class=\"c1\">//...\n</span><span class=\"p\">&lt;/</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\n</pre>\n<p>Note that the CSP directive (<cite>script-src</cite> in the example) to which the <cite>nonce-\u2026</cite>\nsource should be added needs to be defined explicitly.</p>\n</div>\n<div id=\"example-7\">\n<h3>Example 7</h3>\n<p>A web site adminstrator wants to override the CSP directives via an\nenvironment variable which doesn\u2019t support specifying the policy as\na Python dictionary, e.g.:</p>\n<pre><span class=\"nb\">export</span> <span class=\"nv\">CSP_DIRECTIVES</span><span class=\"o\">=</span><span class=\"s2\">\"default-src 'self'; image-src *\"</span>\npython app.py\n</pre>\n<p>Then in the app code you can read the CSP directives from the environment:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">from</span> <span class=\"nn\">flask_talisman</span> <span class=\"kn\">import</span> <span class=\"n\">Talisman</span><span class=\"p\">,</span> <span class=\"n\">DEFAULT_CSP_POLICY</span>\n\n<span class=\"n\">talisman</span> <span class=\"o\">=</span> <span class=\"n\">Talisman</span><span class=\"p\">(</span>\n    <span class=\"n\">app</span><span class=\"p\">,</span>\n    <span class=\"n\">content_security_policy</span><span class=\"o\">=</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"CSP_DIRECTIVES\"</span><span class=\"p\">,</span> <span class=\"n\">DEFAULT_CSP_POLICY</span><span class=\"p\">),</span>\n<span class=\"p\">)</span>\n</pre>\n<p>As you can see above the policy can be defined simply just like the official\nspecification requires the HTTP header to be set: As a semicolon separated\nlist of individual CSP directives.</p>\n</div>\n</div>\n<div id=\"feature-policy\">\n<h2>Feature Policy</h2>\n<p>The default feature policy is empty, as this is the default expected behaviour.\nNote that the Feature Policy is still a <cite>draft https://wicg.github.io/feature-policy/</cite>\nand supported in Chrome and Safari.</p>\n<div id=\"geolocation-example\">\n<h3>Geolocation Example</h3>\n<p>Disable access to Geolocation interface.</p>\n<pre><span class=\"n\">feature_policy</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'geolocation'</span><span class=\"p\">:</span> <span class=\"s1\">'</span><span class=\"se\">\\'</span><span class=\"s1\">none</span><span class=\"se\">\\'</span><span class=\"s1\">'</span>\n<span class=\"p\">}</span>\n<span class=\"n\">talisman</span> <span class=\"o\">=</span> <span class=\"n\">Talisman</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"p\">,</span> <span class=\"n\">feature_policy</span><span class=\"o\">=</span><span class=\"n\">feature_policy</span><span class=\"p\">)</span>\n</pre>\n</div>\n</div>\n<div id=\"disclaimer\">\n<h2>Disclaimer</h2>\n<p>This is not an official Google product, experimental or otherwise.</p>\n<p>There is no silver bullet for web application security. Talisman can\nhelp, but security is more than just setting a few headers. Any\npublic-facing web application should have a comprehensive approach to\nsecurity.</p>\n</div>\n<div id=\"contributing-changes\">\n<h2>Contributing changes</h2>\n<ul>\n<li>See <a href=\"https://github.com/GoogleCloudPlatform/flask-talisman/blob/master/CONTRIBUTING.md\" rel=\"nofollow\">CONTRIBUTING.md</a></li>\n</ul>\n</div>\n<div id=\"licensing\">\n<h2>Licensing</h2>\n<ul>\n<li>Apache 2.0 - See <a href=\"https://github.com/GoogleCloudPlatform/flask-talisman/blob/master/LICENSE\" rel=\"nofollow\">LICENSE</a></li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 5328592, "releases": {"0.2.0": [{"comment_text": "", "digests": {"md5": "8834e51e2d8250ff0f6e78f2926b7557", "sha256": "ecf2f937616a47937544b7a8ccf5a34966ccfd6ebf17d2e45a010cfaafc82c62"}, "downloads": -1, "filename": "flask_talisman-0.2.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "8834e51e2d8250ff0f6e78f2926b7557", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 19804, "upload_time": "2016-12-08T18:41:48", "upload_time_iso_8601": "2016-12-08T18:41:48.765318Z", "url": "https://files.pythonhosted.org/packages/f7/59/5945456a5162a681ec4d2b6572d54604ceba03c302bbda2481db1617a119/flask_talisman-0.2.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1f4b4871676d5e52aeda996b33022d1e", "sha256": "58e447391c5613df9d7cbca5a968167d26130383108eba5f5c44f3732de52c1f"}, "downloads": -1, "filename": "flask-talisman-0.2.0.tar.gz", "has_sig": false, "md5_digest": "1f4b4871676d5e52aeda996b33022d1e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9519, "upload_time": "2016-12-08T18:41:50", "upload_time_iso_8601": "2016-12-08T18:41:50.969000Z", "url": "https://files.pythonhosted.org/packages/70/ec/c98683a317c078115deddb36b40c31b9232b265d5e66ae744e8faa327036/flask-talisman-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "ff718dd4d802d9bbf5336ed5da94c119", "sha256": "dff96aef7bf8dc4d505f5ee0fe3345bcce4669ed3b288f626d00e29bc00fc119"}, "downloads": -1, "filename": "flask_talisman-0.2.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "ff718dd4d802d9bbf5336ed5da94c119", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 19873, "upload_time": "2017-01-10T22:04:30", "upload_time_iso_8601": "2017-01-10T22:04:30.199530Z", "url": "https://files.pythonhosted.org/packages/99/6e/a08db536460f092858e6f7dcca881b72eac202ea34c3b4318c9f8e83a222/flask_talisman-0.2.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5a63f4c3e0776de6df5692d364ee94ac", "sha256": "9fb9aa9e9b905bc511f2346c579cd824bf7fc8562225ff20e8e7a142d883c754"}, "downloads": -1, "filename": "flask-talisman-0.2.1.tar.gz", "has_sig": false, "md5_digest": "5a63f4c3e0776de6df5692d364ee94ac", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9605, "upload_time": "2017-01-10T22:04:32", "upload_time_iso_8601": "2017-01-10T22:04:32.347650Z", "url": "https://files.pythonhosted.org/packages/46/4b/1e523f46e0a29b9f0f05f19c6d18c3872ba5c128a39a00c4d1b1d46f9178/flask-talisman-0.2.1.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "4768e2add82aca6f301782d22e4a5353", "sha256": "6190b632d04d1a8a2a0b97a0af1328f3c5df1757e6d3e4ed4037cf6a29824823"}, "downloads": -1, "filename": "flask_talisman-0.3.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "4768e2add82aca6f301782d22e4a5353", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 20026, "upload_time": "2017-03-02T21:55:31", "upload_time_iso_8601": "2017-03-02T21:55:31.146869Z", "url": "https://files.pythonhosted.org/packages/89/74/f69f3ecaef1a8fca4004d1f47c0d47c0fdfe049da8d7f5fe384a265d1943/flask_talisman-0.3.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a3cf83eaa0ba26c0f974ec04febcc726", "sha256": "bb25143b46c31a36786225d6752e8f5c9fbfc5a7c25e99d1b06e04d5b268c815"}, "downloads": -1, "filename": "flask-talisman-0.3.0.tar.gz", "has_sig": false, "md5_digest": "a3cf83eaa0ba26c0f974ec04febcc726", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9779, "upload_time": "2017-03-02T21:55:29", "upload_time_iso_8601": "2017-03-02T21:55:29.241117Z", "url": "https://files.pythonhosted.org/packages/b6/9e/3a5fe1e846e6ec9d000dd15bf1a2a0972ee61c48d70f24e532fb219c856c/flask-talisman-0.3.0.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "4af56b6b77cbcdbe5a03ea02b78ec538", "sha256": "d9b27e274f1311bd10fd7535e14e1af37e6c0b81213b9cc5867313375bb0380d"}, "downloads": -1, "filename": "flask_talisman-0.3.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "4af56b6b77cbcdbe5a03ea02b78ec538", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 19980, "upload_time": "2017-03-06T19:05:16", "upload_time_iso_8601": "2017-03-06T19:05:16.630402Z", "url": "https://files.pythonhosted.org/packages/6e/44/34fb1d49edfab30a93d88b8495fc901db32264612691b7bd5d8a30c20a41/flask_talisman-0.3.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "03966c66b26ab8f8964bfc17b429e69b", "sha256": "1f8bbec7af46a630b379c3d20c8d0e9d6a4024bfb9ce485f30299a0f0af1aa26"}, "downloads": -1, "filename": "flask-talisman-0.3.1.tar.gz", "has_sig": false, "md5_digest": "03966c66b26ab8f8964bfc17b429e69b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9730, "upload_time": "2017-03-06T19:05:14", "upload_time_iso_8601": "2017-03-06T19:05:14.491900Z", "url": "https://files.pythonhosted.org/packages/9a/13/65275029e70b82d236151e08cc3a73f7f32dfffe5fb4181622687507c177/flask-talisman-0.3.1.tar.gz", "yanked": false}], "0.3.2": [{"comment_text": "", "digests": {"md5": "e99d972075d2b2406273478a591b8bf4", "sha256": "9945b964f2cce36c036c3d04c665b47c5d05fc923927eae32362384b78e0f08b"}, "downloads": -1, "filename": "flask_talisman-0.3.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "e99d972075d2b2406273478a591b8bf4", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 20028, "upload_time": "2017-03-14T22:12:19", "upload_time_iso_8601": "2017-03-14T22:12:19.985566Z", "url": "https://files.pythonhosted.org/packages/39/f3/eaa9ae0cd5a4b3579a32ef06e33b9e2d1d78530a2e48ed70156721fda9ad/flask_talisman-0.3.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "65d8609c7c4b8336dee4ab183287b355", "sha256": "d7e0773910cfe2cadfa97b01d094fe6e70c5ea4d9f2fe5d3e81c589acf5a0133"}, "downloads": -1, "filename": "flask-talisman-0.3.2.tar.gz", "has_sig": false, "md5_digest": "65d8609c7c4b8336dee4ab183287b355", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9774, "upload_time": "2017-03-14T22:12:17", "upload_time_iso_8601": "2017-03-14T22:12:17.729105Z", "url": "https://files.pythonhosted.org/packages/38/24/33c4ee0a85eac55fa05a92e5477c563d603e362b5a3b6250563031f6b1d3/flask-talisman-0.3.2.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "dacd72acae6d0d9477f0a5857b0e0fb4", "sha256": "ef1c38c81af038b5a161e031349d143dbdf8465f41e0af46a168700b432ad472"}, "downloads": -1, "filename": "flask_talisman-0.4.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "dacd72acae6d0d9477f0a5857b0e0fb4", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 15527, "upload_time": "2017-09-13T19:34:59", "upload_time_iso_8601": "2017-09-13T19:34:59.574297Z", "url": "https://files.pythonhosted.org/packages/78/f3/cf701b846a77027c1a0a8f2cf3eb5fdcc87b9361729c285c9fb289f9667a/flask_talisman-0.4.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2e0500cc8b7dcab40130bbd37f24b4be", "sha256": "3ba3f7292bb75d152ea817a02600478c27ae5bdda24229b2248c0ac1d614ba72"}, "downloads": -1, "filename": "flask-talisman-0.4.0.tar.gz", "has_sig": false, "md5_digest": "2e0500cc8b7dcab40130bbd37f24b4be", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10089, "upload_time": "2017-09-13T19:35:01", "upload_time_iso_8601": "2017-09-13T19:35:01.527936Z", "url": "https://files.pythonhosted.org/packages/ad/9f/1bf427261d566d879aad9d845cdb66dd90fb6fa3f9fdbf3fa8b5e79606cf/flask-talisman-0.4.0.tar.gz", "yanked": false}], "0.4.1": [{"comment_text": "", "digests": {"md5": "21c78bf9ec8a62eefabc5a86e2f2a9e1", "sha256": "cbb795ce6ebd0af38cd81303ddce7fa8e33e2d6231309b3656741d29b1451406"}, "downloads": -1, "filename": "flask_talisman-0.4.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "21c78bf9ec8a62eefabc5a86e2f2a9e1", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 15595, "upload_time": "2018-01-25T03:37:23", "upload_time_iso_8601": "2018-01-25T03:37:23.797325Z", "url": "https://files.pythonhosted.org/packages/30/63/a8e706648efb1268794a21308cf10751ecf8f441ad7ce7cd07ada7c078f3/flask_talisman-0.4.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cbb6a1bfa349f6713fb816cdfea14d21", "sha256": "4ece34d11246b48a0b42313be8745f34d6629515349c4cf38663fce51955f55c"}, "downloads": -1, "filename": "flask-talisman-0.4.1.tar.gz", "has_sig": false, "md5_digest": "cbb6a1bfa349f6713fb816cdfea14d21", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10199, "upload_time": "2018-01-25T03:37:26", "upload_time_iso_8601": "2018-01-25T03:37:26.051493Z", "url": "https://files.pythonhosted.org/packages/7f/74/614302d7e58dc11a44838f6fe4f557424249781131099b02c38c352f36f4/flask-talisman-0.4.1.tar.gz", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "755b70e84b2c7c0c2c839fb76387233a", "sha256": "5d77780b2220012a6748e0b603cbbf7889a2833c4e77157794e13dddb183e347"}, "downloads": -1, "filename": "flask_talisman-0.5.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "755b70e84b2c7c0c2c839fb76387233a", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 16778, "upload_time": "2018-03-09T20:16:02", "upload_time_iso_8601": "2018-03-09T20:16:02.084350Z", "url": "https://files.pythonhosted.org/packages/19/ad/8dd9a3be6e49950ddeecd218b4350875f4d9e94e364f4e2d30e1b7788409/flask_talisman-0.5.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d18a2f02148735f6e6cf6e08eb85e19c", "sha256": "e4e3ccba66895e1f46d5b62a9cc0f273731da601bc92d2b9af908011298c0e2b"}, "downloads": -1, "filename": "flask-talisman-0.5.0.tar.gz", "has_sig": false, "md5_digest": "d18a2f02148735f6e6cf6e08eb85e19c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14308, "upload_time": "2018-03-09T20:16:03", "upload_time_iso_8601": "2018-03-09T20:16:03.552279Z", "url": "https://files.pythonhosted.org/packages/80/fb/aba24d703a8611deea7a00508243dd6f6a5e3512865a86ce40390096a4e6/flask-talisman-0.5.0.tar.gz", "yanked": false}], "0.5.1": [{"comment_text": "", "digests": {"md5": "1135e3c9561967ad149de80f98225797", "sha256": "b87228e9d1559e1b21d5fe277b8a27dfcd2693fb19eaa8fa02cacaaeafb167dd"}, "downloads": -1, "filename": "flask_talisman-0.5.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "1135e3c9561967ad149de80f98225797", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 11725, "upload_time": "2018-06-15T17:52:54", "upload_time_iso_8601": "2018-06-15T17:52:54.179031Z", "url": "https://files.pythonhosted.org/packages/cb/31/7dbd68c5e303804a77e2a3291f8ac0fd7b53436208aad15856405044737d/flask_talisman-0.5.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1df90c8868860e40737f815fbcb9d1c6", "sha256": "f39755e804edfc63e4ef30ee62d3b762283d5b40871f61b87f2dea39654f4fb7"}, "downloads": -1, "filename": "flask-talisman-0.5.1.tar.gz", "has_sig": false, "md5_digest": "1df90c8868860e40737f815fbcb9d1c6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14119, "upload_time": "2018-06-15T17:52:55", "upload_time_iso_8601": "2018-06-15T17:52:55.263268Z", "url": "https://files.pythonhosted.org/packages/5a/51/529d44d7c3ba055c43696d22c627151bc7f52a0dabeec5377f8e857fe6b9/flask-talisman-0.5.1.tar.gz", "yanked": false}], "0.6.0": [{"comment_text": "", "digests": {"md5": "02c34f0ebf0037036947be60b435847a", "sha256": "5a88c0ee2b0d509610ae74cbd7059d91228ad56ab3e955813428fe8e63a3e195"}, "downloads": -1, "filename": "flask_talisman-0.6.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "02c34f0ebf0037036947be60b435847a", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 12301, "upload_time": "2018-10-10T19:28:14", "upload_time_iso_8601": "2018-10-10T19:28:14.630278Z", "url": "https://files.pythonhosted.org/packages/52/0a/1136c696f5c9917fbfb07b1faa25186072b37b2a8c2ac573e25ab5258893/flask_talisman-0.6.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cdce663a951735430c79e773fcb678af", "sha256": "85c6688bcbc8de6c37b86bfb60db2da295ee1935c2ed27ca16396792ab45a3ef"}, "downloads": -1, "filename": "flask-talisman-0.6.0.tar.gz", "has_sig": false, "md5_digest": "cdce663a951735430c79e773fcb678af", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15162, "upload_time": "2018-10-10T19:28:16", "upload_time_iso_8601": "2018-10-10T19:28:16.058421Z", "url": "https://files.pythonhosted.org/packages/1f/0a/06a0f5af06978710833d1a49bc4a35c6ec7113bda5ec2d85c98c3557cdba/flask-talisman-0.6.0.tar.gz", "yanked": false}], "0.7.0": [{"comment_text": "", "digests": {"md5": "9775011ea48238af0880e021a6ea87ba", "sha256": "eaa754f4b771dfbe473843391d69643b79e3a38c865790011ac5e4179c68e3ec"}, "downloads": -1, "filename": "flask_talisman-0.7.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "9775011ea48238af0880e021a6ea87ba", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 12713, "upload_time": "2019-05-28T19:35:31", "upload_time_iso_8601": "2019-05-28T19:35:31.934536Z", "url": "https://files.pythonhosted.org/packages/88/cd/b4e2be50bfc53607e2359d12899a105a3b18ae68cb6a573d70c535ebeca5/flask_talisman-0.7.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "526ff6eed4b9c0a52d1e9486bc8ded90", "sha256": "468131464a249274ed226efc21b372518f442487e58918ccab8357eaa638fd1f"}, "downloads": -1, "filename": "flask-talisman-0.7.0.tar.gz", "has_sig": false, "md5_digest": "526ff6eed4b9c0a52d1e9486bc8ded90", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15983, "upload_time": "2019-05-28T19:35:33", "upload_time_iso_8601": "2019-05-28T19:35:33.730472Z", "url": "https://files.pythonhosted.org/packages/5c/71/c0c2692af832e4326bca7dee28efbb3cc37729558dbaf539e2c3c6f586b2/flask-talisman-0.7.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "9775011ea48238af0880e021a6ea87ba", "sha256": "eaa754f4b771dfbe473843391d69643b79e3a38c865790011ac5e4179c68e3ec"}, "downloads": -1, "filename": "flask_talisman-0.7.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "9775011ea48238af0880e021a6ea87ba", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 12713, "upload_time": "2019-05-28T19:35:31", "upload_time_iso_8601": "2019-05-28T19:35:31.934536Z", "url": "https://files.pythonhosted.org/packages/88/cd/b4e2be50bfc53607e2359d12899a105a3b18ae68cb6a573d70c535ebeca5/flask_talisman-0.7.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "526ff6eed4b9c0a52d1e9486bc8ded90", "sha256": "468131464a249274ed226efc21b372518f442487e58918ccab8357eaa638fd1f"}, "downloads": -1, "filename": "flask-talisman-0.7.0.tar.gz", "has_sig": false, "md5_digest": "526ff6eed4b9c0a52d1e9486bc8ded90", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15983, "upload_time": "2019-05-28T19:35:33", "upload_time_iso_8601": "2019-05-28T19:35:33.730472Z", "url": "https://files.pythonhosted.org/packages/5c/71/c0c2692af832e4326bca7dee28efbb3cc37729558dbaf539e2c3c6f586b2/flask-talisman-0.7.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 01:02:13 2020"}