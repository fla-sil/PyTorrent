{"info": {"author": "Jonathan D B Van Schenck", "author_email": "vanschej@oregonstate.edu", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# SeaTease\nA software emulator for the [`python-seabreeze`](https://github.com/ap--/python-seabreeze) : Python module for Ocean Optics spectrometers.\n\nThe purpose of this library is to create an all-software emulator of the `python-seabreeze`\nlibrary, so that developers (like the authors) who wish create packages which utilize\nseabreeze need not have a physical spectrometer on-hand to test their software.\n\nCurrently only parts of the `seabreeze.cseabreeze` backend and parts of the\n`seabreeze.spectrometers` modules are emulated (here as `seatease.cseatease` and\n`seatease.spectrometers` respectively), but more functionality is planned in\nlater versions. Additionally, the emulator currently assumes only a single USB2000-like\nspectrometer is connected (though this can be changed, see `seatease.cseatease._SeaTeaseAPI`).\n\nThis USB2000-like device is treated like it is constantly measuring a 500nm spectral feature\nwith constant photon flux, so changing the integration time will change the peak's appearent\nnumber of counts.\n\n# Installing\nTo install the current stable version:\n```bash\n $ pip3 install seatease\n```\n\n# Basic Use\nIt is highly advised that one references the [`python-seabreeze`](https://github.com/ap--/python-seabreeze)\ndocumentatation, as many of the quirks of `seatease` are intended so as to mimic the\nactual `python-seabreeze` package.\n\nAlso see the examples folder for slightly more details.\n\n## Frontend functionality\nThe main frontend functionality provided is the `seatease.spectrometers.Spectrometer`\nclass, which hosts all the main calls to the underlying (emulated) hardware device,\ninstances can be created three ways:\n```python\n# Get any spectrometer\nspec = seatease.spectrometers.Spectrometer.from_first_available()\n\n# Get a specific spectrometer\nspec = seatease.spectrometers.Spectrometer.from_serial_number(\"your-serial-number\")\n\n# List the devices, and instantiate one of them\ndev_list = seatease.spectrometers.list_devices()\nprint(dev_list) # Prints list of available devices\nspec = seatease.spectrometers.Spectrometer(dev_list[0])\n```\nWith the spectrometer instance, the exposed methods allow retrival of emulated\nhardware attributes:\n```python\n# Print wavelengths\nprint(spec.wavelengths())\n\n# Set integration time\nspec.integration_time_micros(10*1000) # 10 ms\n\n# Print intensities\nprint(spec.intensities())\n```\nHave fun!\n\n## Backend functionality\nAgain, the [Backend API](https://python-seabreeze.readthedocs.io/en/latest/backend_api.html)\nfor the `seabreeze.cseabreeze` package is helpful in understanding the following:\n\n### `SeaTeaseDevice`\nThe main backend functionality provided is the `seatease.cseatease.SeaTeaseDevice`\nclass, which hosts all the main calls to the underlying (emulated) hardware device.\nHowever, it cannot (or rather, should not when trying to faithfully emulate `seabreeze`)\nbe instantiated directly, but rather the instances are instantiated when the module is \nimported, and a reference to these instances are kept in the `seatease.cseatease.SeaTeaseAPI`\ninstances. So, to actually get a `SeaTeaseDevice` instance:\n```python\ndev_list = sb.cseatease.SeaTeaseAPI.list_devices()\nprint(dev_list) # Prints available devices\ndev = dev_list[0]\n```\n\n### `.f` Functionality\nAll the features of the device are stored as attributes of the `dev.f`, for example:\n```python\n# Get wavelengths\ndev.f.spectrometer.get_wavelengths()\n\n# Set integration time\ndev.f.spectrometer.set_integration_time_micros(100*1000) # 100 ms\n\n# Get intensities\ndev.f.spectrometer.get_intensities()\n```\n\n### `.features` Functionality\nAlternatively, the same attributes are exposed in dictionary form in `dev.features`\n```python\n# Get wavelengths\ndev.features[\"spectrometer\"][0].get_wavelengths()\n\n# Set integration time\ndev.features[\"spectrometer\"][0].set_integration_time_micros(100*1000) # 100 ms\n\n# Get intensities\ndev.features[\"spectrometer\"][0].get_intensities()\n```\n\n# Development\nWe are happy for any contributions from others! In particular, those with experience\nusing other Ocean Optics spectrometers (besides just the USB2000) with `python-seabreeze`\nwho can shed light on the expected features and functionality from those devices.\nAlso, just fleshing out the rest of the backend API.\n\nFor development, clone this directory, setup a python\nvirtual environment in the main directory and install:\n```bash\n $ python3 -m venv venv\n $ source venv/bin/activate\n (venv) $ python3 setup.py install\n```\nAfter making changes to the source, re-run that last line to re-install.\n\n## Using `venv` in Jupyter Lab\nIf you want to use jupyter lab to edit and test, add the venv kernel to jupyter's local\nfiles so that you can run the .ipynb files:\n```bash\n (venv) $ pip3 install ipykernel\n (venv) $ python3 -m ipykernel install --user --name=venv\n```\nTo remove the kernel when you are done:\n```bash\n (venv) $ jupyter kernelspec uninstall venv\n```\n\n## PyPI\nCreate the source files and upload:\n```bash\n (venv) $ python3 setup.py sdist bdist_wheel \n (venv) $ python3 -m twine upload dist/*\n```\nSee: [here](https://packaging.python.org/tutorials/packaging-projects/) for more details.\n\n# Acknowledgements\nThe authors would like to thank [Andreas Poehlmann](https://github.com/ap--) and collaborators for creating the original `python-seabreeze` package, which this library emulates in software. His package has been indispensable to our [research](http://sites.science.oregonstate.edu/~ostroveo/publications/index.html).\n\nThe authors would also like to thank Caylee Van Schenck for the excellent pun after which this\nlibrary is named.\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/jonathanvanschenck/seatease", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "seatease", "package_url": "https://pypi.org/project/seatease/", "platform": "", "project_url": "https://pypi.org/project/seatease/", "project_urls": {"Homepage": "https://github.com/jonathanvanschenck/seatease"}, "release_url": "https://pypi.org/project/seatease/0.3/", "requires_dist": ["numpy"], "requires_python": ">=3.6", "summary": "A software emulator for the `python-seabreeze` package", "version": "0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>SeaTease</h1>\n<p>A software emulator for the <a href=\"https://github.com/ap--/python-seabreeze\" rel=\"nofollow\"><code>python-seabreeze</code></a> : Python module for Ocean Optics spectrometers.</p>\n<p>The purpose of this library is to create an all-software emulator of the <code>python-seabreeze</code>\nlibrary, so that developers (like the authors) who wish create packages which utilize\nseabreeze need not have a physical spectrometer on-hand to test their software.</p>\n<p>Currently only parts of the <code>seabreeze.cseabreeze</code> backend and parts of the\n<code>seabreeze.spectrometers</code> modules are emulated (here as <code>seatease.cseatease</code> and\n<code>seatease.spectrometers</code> respectively), but more functionality is planned in\nlater versions. Additionally, the emulator currently assumes only a single USB2000-like\nspectrometer is connected (though this can be changed, see <code>seatease.cseatease._SeaTeaseAPI</code>).</p>\n<p>This USB2000-like device is treated like it is constantly measuring a 500nm spectral feature\nwith constant photon flux, so changing the integration time will change the peak's appearent\nnumber of counts.</p>\n<h1>Installing</h1>\n<p>To install the current stable version:</p>\n<pre> $ pip3 install seatease\n</pre>\n<h1>Basic Use</h1>\n<p>It is highly advised that one references the <a href=\"https://github.com/ap--/python-seabreeze\" rel=\"nofollow\"><code>python-seabreeze</code></a>\ndocumentatation, as many of the quirks of <code>seatease</code> are intended so as to mimic the\nactual <code>python-seabreeze</code> package.</p>\n<p>Also see the examples folder for slightly more details.</p>\n<h2>Frontend functionality</h2>\n<p>The main frontend functionality provided is the <code>seatease.spectrometers.Spectrometer</code>\nclass, which hosts all the main calls to the underlying (emulated) hardware device,\ninstances can be created three ways:</p>\n<pre><span class=\"c1\"># Get any spectrometer</span>\n<span class=\"n\">spec</span> <span class=\"o\">=</span> <span class=\"n\">seatease</span><span class=\"o\">.</span><span class=\"n\">spectrometers</span><span class=\"o\">.</span><span class=\"n\">Spectrometer</span><span class=\"o\">.</span><span class=\"n\">from_first_available</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Get a specific spectrometer</span>\n<span class=\"n\">spec</span> <span class=\"o\">=</span> <span class=\"n\">seatease</span><span class=\"o\">.</span><span class=\"n\">spectrometers</span><span class=\"o\">.</span><span class=\"n\">Spectrometer</span><span class=\"o\">.</span><span class=\"n\">from_serial_number</span><span class=\"p\">(</span><span class=\"s2\">\"your-serial-number\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># List the devices, and instantiate one of them</span>\n<span class=\"n\">dev_list</span> <span class=\"o\">=</span> <span class=\"n\">seatease</span><span class=\"o\">.</span><span class=\"n\">spectrometers</span><span class=\"o\">.</span><span class=\"n\">list_devices</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">dev_list</span><span class=\"p\">)</span> <span class=\"c1\"># Prints list of available devices</span>\n<span class=\"n\">spec</span> <span class=\"o\">=</span> <span class=\"n\">seatease</span><span class=\"o\">.</span><span class=\"n\">spectrometers</span><span class=\"o\">.</span><span class=\"n\">Spectrometer</span><span class=\"p\">(</span><span class=\"n\">dev_list</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n</pre>\n<p>With the spectrometer instance, the exposed methods allow retrival of emulated\nhardware attributes:</p>\n<pre><span class=\"c1\"># Print wavelengths</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">spec</span><span class=\"o\">.</span><span class=\"n\">wavelengths</span><span class=\"p\">())</span>\n\n<span class=\"c1\"># Set integration time</span>\n<span class=\"n\">spec</span><span class=\"o\">.</span><span class=\"n\">integration_time_micros</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"o\">*</span><span class=\"mi\">1000</span><span class=\"p\">)</span> <span class=\"c1\"># 10 ms</span>\n\n<span class=\"c1\"># Print intensities</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">spec</span><span class=\"o\">.</span><span class=\"n\">intensities</span><span class=\"p\">())</span>\n</pre>\n<p>Have fun!</p>\n<h2>Backend functionality</h2>\n<p>Again, the <a href=\"https://python-seabreeze.readthedocs.io/en/latest/backend_api.html\" rel=\"nofollow\">Backend API</a>\nfor the <code>seabreeze.cseabreeze</code> package is helpful in understanding the following:</p>\n<h3><code>SeaTeaseDevice</code></h3>\n<p>The main backend functionality provided is the <code>seatease.cseatease.SeaTeaseDevice</code>\nclass, which hosts all the main calls to the underlying (emulated) hardware device.\nHowever, it cannot (or rather, should not when trying to faithfully emulate <code>seabreeze</code>)\nbe instantiated directly, but rather the instances are instantiated when the module is\nimported, and a reference to these instances are kept in the <code>seatease.cseatease.SeaTeaseAPI</code>\ninstances. So, to actually get a <code>SeaTeaseDevice</code> instance:</p>\n<pre><span class=\"n\">dev_list</span> <span class=\"o\">=</span> <span class=\"n\">sb</span><span class=\"o\">.</span><span class=\"n\">cseatease</span><span class=\"o\">.</span><span class=\"n\">SeaTeaseAPI</span><span class=\"o\">.</span><span class=\"n\">list_devices</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">dev_list</span><span class=\"p\">)</span> <span class=\"c1\"># Prints available devices</span>\n<span class=\"n\">dev</span> <span class=\"o\">=</span> <span class=\"n\">dev_list</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n</pre>\n<h3><code>.f</code> Functionality</h3>\n<p>All the features of the device are stored as attributes of the <code>dev.f</code>, for example:</p>\n<pre><span class=\"c1\"># Get wavelengths</span>\n<span class=\"n\">dev</span><span class=\"o\">.</span><span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">spectrometer</span><span class=\"o\">.</span><span class=\"n\">get_wavelengths</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Set integration time</span>\n<span class=\"n\">dev</span><span class=\"o\">.</span><span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">spectrometer</span><span class=\"o\">.</span><span class=\"n\">set_integration_time_micros</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"o\">*</span><span class=\"mi\">1000</span><span class=\"p\">)</span> <span class=\"c1\"># 100 ms</span>\n\n<span class=\"c1\"># Get intensities</span>\n<span class=\"n\">dev</span><span class=\"o\">.</span><span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">spectrometer</span><span class=\"o\">.</span><span class=\"n\">get_intensities</span><span class=\"p\">()</span>\n</pre>\n<h3><code>.features</code> Functionality</h3>\n<p>Alternatively, the same attributes are exposed in dictionary form in <code>dev.features</code></p>\n<pre><span class=\"c1\"># Get wavelengths</span>\n<span class=\"n\">dev</span><span class=\"o\">.</span><span class=\"n\">features</span><span class=\"p\">[</span><span class=\"s2\">\"spectrometer\"</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">get_wavelengths</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Set integration time</span>\n<span class=\"n\">dev</span><span class=\"o\">.</span><span class=\"n\">features</span><span class=\"p\">[</span><span class=\"s2\">\"spectrometer\"</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">set_integration_time_micros</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"o\">*</span><span class=\"mi\">1000</span><span class=\"p\">)</span> <span class=\"c1\"># 100 ms</span>\n\n<span class=\"c1\"># Get intensities</span>\n<span class=\"n\">dev</span><span class=\"o\">.</span><span class=\"n\">features</span><span class=\"p\">[</span><span class=\"s2\">\"spectrometer\"</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">get_intensities</span><span class=\"p\">()</span>\n</pre>\n<h1>Development</h1>\n<p>We are happy for any contributions from others! In particular, those with experience\nusing other Ocean Optics spectrometers (besides just the USB2000) with <code>python-seabreeze</code>\nwho can shed light on the expected features and functionality from those devices.\nAlso, just fleshing out the rest of the backend API.</p>\n<p>For development, clone this directory, setup a python\nvirtual environment in the main directory and install:</p>\n<pre> $ python3 -m venv venv\n $ <span class=\"nb\">source</span> venv/bin/activate\n <span class=\"o\">(</span>venv<span class=\"o\">)</span> $ python3 setup.py install\n</pre>\n<p>After making changes to the source, re-run that last line to re-install.</p>\n<h2>Using <code>venv</code> in Jupyter Lab</h2>\n<p>If you want to use jupyter lab to edit and test, add the venv kernel to jupyter's local\nfiles so that you can run the .ipynb files:</p>\n<pre> <span class=\"o\">(</span>venv<span class=\"o\">)</span> $ pip3 install ipykernel\n <span class=\"o\">(</span>venv<span class=\"o\">)</span> $ python3 -m ipykernel install --user --name<span class=\"o\">=</span>venv\n</pre>\n<p>To remove the kernel when you are done:</p>\n<pre> <span class=\"o\">(</span>venv<span class=\"o\">)</span> $ jupyter kernelspec uninstall venv\n</pre>\n<h2>PyPI</h2>\n<p>Create the source files and upload:</p>\n<pre> <span class=\"o\">(</span>venv<span class=\"o\">)</span> $ python3 setup.py sdist bdist_wheel \n <span class=\"o\">(</span>venv<span class=\"o\">)</span> $ python3 -m twine upload dist/*\n</pre>\n<p>See: <a href=\"https://packaging.python.org/tutorials/packaging-projects/\" rel=\"nofollow\">here</a> for more details.</p>\n<h1>Acknowledgements</h1>\n<p>The authors would like to thank <a href=\"https://github.com/ap--\" rel=\"nofollow\">Andreas Poehlmann</a> and collaborators for creating the original <code>python-seabreeze</code> package, which this library emulates in software. His package has been indispensable to our <a href=\"http://sites.science.oregonstate.edu/%7Eostroveo/publications/index.html\" rel=\"nofollow\">research</a>.</p>\n<p>The authors would also like to thank Caylee Van Schenck for the excellent pun after which this\nlibrary is named.</p>\n\n          </div>"}, "last_serial": 6841038, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "5fd677f7c9237a52542f3877d81390db", "sha256": "b8f31947a71329cf0ac583cd599ac24e38e38f1a25c0fce45ea5e44df6e25f06"}, "downloads": -1, "filename": "seatease-0.1-py3.7.egg", "has_sig": false, "md5_digest": "5fd677f7c9237a52542f3877d81390db", "packagetype": "bdist_egg", "python_version": "3.7", "requires_python": ">=3.6", "size": 14731, "upload_time": "2020-03-19T02:51:39", "upload_time_iso_8601": "2020-03-19T02:51:39.448549Z", "url": "https://files.pythonhosted.org/packages/ff/22/eabd5c4e7395c3bcf27a803521b23b16438f0cc5d12d3367bbb1dd65b4aa/seatease-0.1-py3.7.egg", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "998a460debfc9c300de66b1a5daf74be", "sha256": "9597eaa182313717817c34c1d946478b73841100a58f30e8dbfaf533a6662615"}, "downloads": -1, "filename": "seatease-0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "998a460debfc9c300de66b1a5daf74be", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 9757, "upload_time": "2020-03-19T03:53:09", "upload_time_iso_8601": "2020-03-19T03:53:09.163248Z", "url": "https://files.pythonhosted.org/packages/f8/e1/4ec4d948a4259691670ebdfa40aa0f05859e549f08a406168efa1fea40c7/seatease-0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1d89a9dd958e529b4b502afcba0189d7", "sha256": "463637319e71ae1459824ca51329891e7400160573f6b17da08f1d7427bee473"}, "downloads": -1, "filename": "seatease-0.3.tar.gz", "has_sig": false, "md5_digest": "1d89a9dd958e529b4b502afcba0189d7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 8765, "upload_time": "2020-03-19T03:53:10", "upload_time_iso_8601": "2020-03-19T03:53:10.063318Z", "url": "https://files.pythonhosted.org/packages/3f/f2/299c620159e2a4e517d3b303ad509c787aafc9a412603b7a5aa9c4bf63a3/seatease-0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "998a460debfc9c300de66b1a5daf74be", "sha256": "9597eaa182313717817c34c1d946478b73841100a58f30e8dbfaf533a6662615"}, "downloads": -1, "filename": "seatease-0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "998a460debfc9c300de66b1a5daf74be", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 9757, "upload_time": "2020-03-19T03:53:09", "upload_time_iso_8601": "2020-03-19T03:53:09.163248Z", "url": "https://files.pythonhosted.org/packages/f8/e1/4ec4d948a4259691670ebdfa40aa0f05859e549f08a406168efa1fea40c7/seatease-0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1d89a9dd958e529b4b502afcba0189d7", "sha256": "463637319e71ae1459824ca51329891e7400160573f6b17da08f1d7427bee473"}, "downloads": -1, "filename": "seatease-0.3.tar.gz", "has_sig": false, "md5_digest": "1d89a9dd958e529b4b502afcba0189d7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 8765, "upload_time": "2020-03-19T03:53:10", "upload_time_iso_8601": "2020-03-19T03:53:10.063318Z", "url": "https://files.pythonhosted.org/packages/3f/f2/299c620159e2a4e517d3b303ad509c787aafc9a412603b7a5aa9c4bf63a3/seatease-0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:56:03 2020"}