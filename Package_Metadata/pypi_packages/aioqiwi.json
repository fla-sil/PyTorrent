{"info": {"author": "Martin Winks", "author_email": "cat@snejugal.ru", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "===========\n\ud83e\udd5d aioqiwi\n===========\n\n.. image:: https://img.shields.io/badge/Python%203.7-blue.svg\n    :target: https://www.python.org/\n    :alt: Python-version\n\n**Qiwi payments for humans(for healthy humans)**\n\nSupports most of `qiwi <https://qiwi.com>`_ apis: `qiwi-maps <https://github.com/QIWI-API/qiwi-map>`_, `bills <https://developer.qiwi.com/en/bill-payments/>`_, `wallet <https://developer.qiwi.com/en/qiwi-wallet-personal/>`_\n\n------------\nInstallation\n------------\n\n::\n\n    pip install aioqiwi\n\n---------------\n\ud83d\udd38 Dependencies\n---------------\n\n+------------+----------------------------+\n| Library    | Description                |\n+============+============================+\n|  aiohttp   | default http server        |\n+------------+----------------------------+\n|  pydantic  | schema validation          |\n+------------+----------------------------+\n\n\n**However aioqiwi is highly customizable. Example of switching json modules:**\n\n::\n\n    pip install orjson\n\n.. code-block:: python\n\n    from aioqiwi import Wallet\n    from aioqiwi.core.tooling import json\n\n    wallet = Wallet()\n    wallet.tools.json_module = json.JSONModule(\"orjson\")\n\n--------------------\n\ud83d\udd39 Dive-in Examples\n--------------------\n\n.. code:: python\n\n    import asyncio\n\n    from aioqiwi import Wallet\n\n    async def qiwi():\n        async with Wallet(\"TOKEN from https://qiwi.com/api\") as w:\n            w.phone_number = '+7878787878'  # phone number is not required by default, but some methods need it\n            balance = await w.balance()\n            print(\"ACCOUNTS:\")\n            for acc in balance.accounts:\n                print(acc.alias, acc.balance)\n\n    asyncio.run(qiwi())\n\n\n--------------------\n\ud83d\udce3 Handling updates\n--------------------\n\n**aioqiwi** provides user-friendly web-hooks handler\n\n\n.. code:: python\n\n    import asyncio\n    from aioqiwi.wallet import WebHook, Wallet\n\n    wallet = Wallet(\"...\")\n\n    @wallet.hm(lambda event: ...)\n    async def payments_handler(hook: WebHook):\n        print(f\"{hook.payment.account} sent you {event.payment}\")\n\n    @wallet.hm()\n    async def secret_payments_handler(event: WebHook):\n        await something(event.payment.commission.amount)\n\n    wallet.idle(port=8090)\n\nWhen you do `Wallet::idle`, aioqiwi adds connector closing to `aiohttp.web.Application::on_shutdown` to make sure connector closes, however if you want to avoid this behaviour pass `close_connector_ate=False` to `Wallet::idle`\n\n****************\nHandler manager\n****************\n\nHandler manager `QiwiClient.handler_manager` or `qiwi_client.hm` is responsible for event-handlers registering and filtering/delivering updates to them.\nThere're currently two event processing strategies:\n1. `core.handler.EventProcessStrategy.ORDERED` - sequential filter-check. has O(n) amplitude\n2. `core.handler.EventProcessStrategy.MILKSHAKE` - as receives update, will shuffle existing handlers list. has O(n) amplitude\n\n.. note::\n    Filters results are not currently cached.\n\n.. note::\n    Some users don't want mess with web-hooks, for those fellas aioqiwi has `history_polling` [wip] in `aioqiwi.contrib`. Different approach for dealing with payment events.\n    Find usage example in `examples/` directory.\n\n---------------------------------------------------\n\ud83d\udd25 Qiwi API p2p transactions(bills)\n---------------------------------------------------\n\n.. code:: python\n\n    import asyncio\n    from aioqiwi import QiwiKassa\n\n    async def test_kassa():\n        async with QiwiKassa(\"SECRET KEY from p2p.qiwi.com or kassa.qiwi.com\") as kassa:\n            sent_invoice = await kassa.new_bill(14.88, lifetime=44)\n            # setting lifetime to 44 ahead today [default is 10] 45 - is max\n            print(\"Url to pay:\", sent_invoice.pay_url)\n            await kassa.close()\n\n    asyncio.run(test_kassa())\n\n\n``sent_invoice.pay_url`` will redirect us to something like:\n\n.. image:: https://imbt.ga/gO8EzaFItB\n\n\n---------------------------\n\ud83d\udcb3 Handling bill payments\n---------------------------\n\n\n.. code:: python\n\n\n    from aioqiwi.kassa import QiwiKassa, Notification\n\n    kassa = QiwiKassa('PRIVATE_KEY')\n\n    @kassa.hm(lambda bill: bill.bill.amount.currency == 'RUB')\n    async def my_shiny_rubles_handler(bill_update: Notification):\n        # do something\n        pass\n\n    kassa.idle()\n\n\n--------------------\n\ud83d\uddfa QIWI terminals\n--------------------\n\n**aioqiwi** covers qiwi's `MAPS\n<https://developer.qiwi.com/ru/qiwi-map>`_ api in aioqiwi.terminals module\n\n---------------\nConnectors\n---------------\n\nQiwiClient.connector is responsible for making http requests. Current available request managers are located in `aioqiwi.core.connectors`\n\nDefault connector is `aioqiwi.core.connectors.asyncio`, but if it's no suit for you, you can easily switch to another\n\nExample:\n\n.. code:: python3\n\n    from aioqiwi import Wallet\n    from aioqiwi.core.connectors.aiohttp import AiohttpConnector\n\n    wallet = Wallet(\"auth\")\n    # switch with read-to-use connector-like instance implementing\n    wallet.connector = AiohttpConnector(timeout, {\"user-agent\": \"opeka/02\"})\n    # or switch with aioqiwi.core.connectors.abstract.Connector compatible class\n    wallet.connector = AiohttpConnector\n\n*******************\nHacking connector\n*******************\n\nYou can easily implement your own http client(connector), subclassing from `aioqiwi.core.connectors.abstract.AbstractConnector`. Take a look at \"out of the box\" `aiohttp` or `asyncio` sessions for the start.\n\n-----------------------\n\ud83d\udc7e Handling errors\n-----------------------\n\n******************\nAPI request error\n******************\n\nConsider we have a `aioqiwi.wallet.Wallet` instance with a named reference `wallet` to it.\nKnown error when we cannot ask server for more than 50 rows in `wallet.history`. To handle that error, we simply:\n\n.. code:: python\n\n    from aioqiwi.exceptions import AioqiwiError\n    from aioqiwi.errors import ErrorInfo\n\n    try:\n        await wallet.history(2 ** 6)  # pass rows=64, whilst constraint is 0<rows<51\n    except AioqiwiError as exc:\n        if exc.err:  # this feature is experimental\n            exc.err: ErrorInfo = exc.err  # cast to aioqiwi.Wallet's error info\n            print(exc.err.error_message)\n\n***************\nTimeoutError\n***************\n\nThis is slight different error and aioqiwi should not be really responsible for it. It's usually server-side error\nwhich makes exception that should be raised connector-specific. `asyncio.TimeoutError` is exception that is produced\nby `asyncio` connector. In `aiohttp` or other connectors it may differ.\n\n-----------------------------\n\u26cf return policies (types)\n-----------------------------\n\naioqiwi's server.BaseWebHookView and requests.Requests support \"return policy\", it means you can get response/update in the form that suits your needs.\nThere're currently 5 return policies.\n\n- NOTHING - returns nothing(note: None is python's implicit return), :note: returning nothing does not mean doing nothing, validation is done anyway\n- READ_DATA - raw return once stream is read\n- JSON - raw return once read data was deserialized\n- MODEL - complex return once json deserialized and new model instantiated\n- LIST_OF_MODELS - complex return once json deserialized as an iterable list with new instantiated models of json objects\n\n-------------------\n\u2753 HOW-TOs\n-------------------\n\nYou can find examples in ``examples/`` directory in github repository. For start examples above should be enough.\n\n\n---------------------------\n\ud83d\udd27 TODOs\n---------------------------\n\n- **Tests/CI/CD**\n- **Implement all qiwi wallet API methods**\n\n-----------------\nWork in progress\n-----------------\n\n- history_polling needs to be tested\n- implement wallet web-hook payment verification\n\n------------------------------------------\n\ud83d\udc26 Community\n------------------------------------------\n\n**My group**\n`\u2708\ufe0f Telegram\n<https://t.me/joinchat/B2cC_hSIAiYXxqKghdguCA>`_\n", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/uwinx/aioqiwi", "keywords": "asyncio,aiohttp,qiwi,api-client,aioqiwi", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "aioqiwi", "package_url": "https://pypi.org/project/aioqiwi/", "platform": "", "project_url": "https://pypi.org/project/aioqiwi/", "project_urls": {"Homepage": "https://github.com/uwinx/aioqiwi", "Repository": "https://github.com/uwinx/aioqiwi"}, "release_url": "https://pypi.org/project/aioqiwi/1.1.5/", "requires_dist": ["pydantic (>=1.4,<2.0)", "aiohttp (>=3.6.2,<4.0.0)"], "requires_python": ">=3.7,<4.0", "summary": "Convenient and asynchronous qiwi.com api-wrapper library", "version": "1.1.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://www.python.org/\" rel=\"nofollow\"><img alt=\"Python-version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/17571f47ba620a21d3d8b6cc4400372172d7def8/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f507974686f6e253230332e372d626c75652e737667\"></a>\n<p><strong>Qiwi payments for humans(for healthy humans)</strong></p>\n<p>Supports most of <a href=\"https://qiwi.com\" rel=\"nofollow\">qiwi</a> apis: <a href=\"https://github.com/QIWI-API/qiwi-map\" rel=\"nofollow\">qiwi-maps</a>, <a href=\"https://developer.qiwi.com/en/bill-payments/\" rel=\"nofollow\">bills</a>, <a href=\"https://developer.qiwi.com/en/qiwi-wallet-personal/\" rel=\"nofollow\">wallet</a></p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<pre>pip install aioqiwi\n</pre>\n</div>\n<div id=\"dependencies\">\n<h2>\ud83d\udd38 Dependencies</h2>\n<table>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Library</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>aiohttp</td>\n<td>default http server</td>\n</tr>\n<tr><td>pydantic</td>\n<td>schema validation</td>\n</tr>\n</tbody>\n</table>\n<p><strong>However aioqiwi is highly customizable. Example of switching json modules:</strong></p>\n<pre>pip install orjson\n</pre>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">aioqiwi</span> <span class=\"kn\">import</span> <span class=\"n\">Wallet</span>\n<span class=\"kn\">from</span> <span class=\"nn\">aioqiwi.core.tooling</span> <span class=\"kn\">import</span> <span class=\"n\">json</span>\n\n<span class=\"n\">wallet</span> <span class=\"o\">=</span> <span class=\"n\">Wallet</span><span class=\"p\">()</span>\n<span class=\"n\">wallet</span><span class=\"o\">.</span><span class=\"n\">tools</span><span class=\"o\">.</span><span class=\"n\">json_module</span> <span class=\"o\">=</span> <span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">JSONModule</span><span class=\"p\">(</span><span class=\"s2\">\"orjson\"</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"dive-in-examples\">\n<h2>\ud83d\udd39 Dive-in Examples</h2>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">aioqiwi</span> <span class=\"kn\">import</span> <span class=\"n\">Wallet</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">qiwi</span><span class=\"p\">():</span>\n    <span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">Wallet</span><span class=\"p\">(</span><span class=\"s2\">\"TOKEN from https://qiwi.com/api\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">w</span><span class=\"p\">:</span>\n        <span class=\"n\">w</span><span class=\"o\">.</span><span class=\"n\">phone_number</span> <span class=\"o\">=</span> <span class=\"s1\">'+7878787878'</span>  <span class=\"c1\"># phone number is not required by default, but some methods need it</span>\n        <span class=\"n\">balance</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">w</span><span class=\"o\">.</span><span class=\"n\">balance</span><span class=\"p\">()</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"ACCOUNTS:\"</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">acc</span> <span class=\"ow\">in</span> <span class=\"n\">balance</span><span class=\"o\">.</span><span class=\"n\">accounts</span><span class=\"p\">:</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">acc</span><span class=\"o\">.</span><span class=\"n\">alias</span><span class=\"p\">,</span> <span class=\"n\">acc</span><span class=\"o\">.</span><span class=\"n\">balance</span><span class=\"p\">)</span>\n\n<span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">qiwi</span><span class=\"p\">())</span>\n</pre>\n</div>\n<div id=\"handling-updates\">\n<h2>\ud83d\udce3 Handling updates</h2>\n<p><strong>aioqiwi</strong> provides user-friendly web-hooks handler</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n<span class=\"kn\">from</span> <span class=\"nn\">aioqiwi.wallet</span> <span class=\"kn\">import</span> <span class=\"n\">WebHook</span><span class=\"p\">,</span> <span class=\"n\">Wallet</span>\n\n<span class=\"n\">wallet</span> <span class=\"o\">=</span> <span class=\"n\">Wallet</span><span class=\"p\">(</span><span class=\"s2\">\"...\"</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@wallet</span><span class=\"o\">.</span><span class=\"n\">hm</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">event</span><span class=\"p\">:</span> <span class=\"o\">...</span><span class=\"p\">)</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">payments_handler</span><span class=\"p\">(</span><span class=\"n\">hook</span><span class=\"p\">:</span> <span class=\"n\">WebHook</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"</span><span class=\"si\">{</span><span class=\"n\">hook</span><span class=\"o\">.</span><span class=\"n\">payment</span><span class=\"o\">.</span><span class=\"n\">account</span><span class=\"si\">}</span><span class=\"s2\"> sent you </span><span class=\"si\">{</span><span class=\"n\">event</span><span class=\"o\">.</span><span class=\"n\">payment</span><span class=\"si\">}</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@wallet</span><span class=\"o\">.</span><span class=\"n\">hm</span><span class=\"p\">()</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">secret_payments_handler</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"p\">:</span> <span class=\"n\">WebHook</span><span class=\"p\">):</span>\n    <span class=\"k\">await</span> <span class=\"n\">something</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"o\">.</span><span class=\"n\">payment</span><span class=\"o\">.</span><span class=\"n\">commission</span><span class=\"o\">.</span><span class=\"n\">amount</span><span class=\"p\">)</span>\n\n<span class=\"n\">wallet</span><span class=\"o\">.</span><span class=\"n\">idle</span><span class=\"p\">(</span><span class=\"n\">port</span><span class=\"o\">=</span><span class=\"mi\">8090</span><span class=\"p\">)</span>\n</pre>\n<p>When you do <cite>Wallet::idle</cite>, aioqiwi adds connector closing to <cite>aiohttp.web.Application::on_shutdown</cite> to make sure connector closes, however if you want to avoid this behaviour pass <cite>close_connector_ate=False</cite> to <cite>Wallet::idle</cite></p>\n<div id=\"handler-manager\">\n<h3>Handler manager</h3>\n<p>Handler manager <cite>QiwiClient.handler_manager</cite> or <cite>qiwi_client.hm</cite> is responsible for event-handlers registering and filtering/delivering updates to them.\nThere\u2019re currently two event processing strategies:\n1. <cite>core.handler.EventProcessStrategy.ORDERED</cite> - sequential filter-check. has O(n) amplitude\n2. <cite>core.handler.EventProcessStrategy.MILKSHAKE</cite> - as receives update, will shuffle existing handlers list. has O(n) amplitude</p>\n<div>\n<p>Note</p>\n<p>Filters results are not currently cached.</p>\n</div>\n<div>\n<p>Note</p>\n<p>Some users don\u2019t want mess with web-hooks, for those fellas aioqiwi has <cite>history_polling</cite> [wip] in <cite>aioqiwi.contrib</cite>. Different approach for dealing with payment events.\nFind usage example in <cite>examples/</cite> directory.</p>\n</div>\n</div>\n</div>\n<div id=\"qiwi-api-p2p-transactions-bills\">\n<h2>\ud83d\udd25 Qiwi API p2p transactions(bills)</h2>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n<span class=\"kn\">from</span> <span class=\"nn\">aioqiwi</span> <span class=\"kn\">import</span> <span class=\"n\">QiwiKassa</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">test_kassa</span><span class=\"p\">():</span>\n    <span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">QiwiKassa</span><span class=\"p\">(</span><span class=\"s2\">\"SECRET KEY from p2p.qiwi.com or kassa.qiwi.com\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">kassa</span><span class=\"p\">:</span>\n        <span class=\"n\">sent_invoice</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">kassa</span><span class=\"o\">.</span><span class=\"n\">new_bill</span><span class=\"p\">(</span><span class=\"mf\">14.88</span><span class=\"p\">,</span> <span class=\"n\">lifetime</span><span class=\"o\">=</span><span class=\"mi\">44</span><span class=\"p\">)</span>\n        <span class=\"c1\"># setting lifetime to 44 ahead today [default is 10] 45 - is max</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Url to pay:\"</span><span class=\"p\">,</span> <span class=\"n\">sent_invoice</span><span class=\"o\">.</span><span class=\"n\">pay_url</span><span class=\"p\">)</span>\n        <span class=\"k\">await</span> <span class=\"n\">kassa</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n\n<span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">test_kassa</span><span class=\"p\">())</span>\n</pre>\n<p><tt>sent_invoice.pay_url</tt> will redirect us to something like:</p>\n<img alt=\"https://imbt.ga/gO8EzaFItB\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1723e0c59eeba3f911f7cb678f60e86b3f4dc426/68747470733a2f2f696d62742e67612f674f38457a6146497442\">\n</div>\n<div id=\"handling-bill-payments\">\n<h2>\ud83d\udcb3 Handling bill payments</h2>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">aioqiwi.kassa</span> <span class=\"kn\">import</span> <span class=\"n\">QiwiKassa</span><span class=\"p\">,</span> <span class=\"n\">Notification</span>\n\n<span class=\"n\">kassa</span> <span class=\"o\">=</span> <span class=\"n\">QiwiKassa</span><span class=\"p\">(</span><span class=\"s1\">'PRIVATE_KEY'</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@kassa</span><span class=\"o\">.</span><span class=\"n\">hm</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">bill</span><span class=\"p\">:</span> <span class=\"n\">bill</span><span class=\"o\">.</span><span class=\"n\">bill</span><span class=\"o\">.</span><span class=\"n\">amount</span><span class=\"o\">.</span><span class=\"n\">currency</span> <span class=\"o\">==</span> <span class=\"s1\">'RUB'</span><span class=\"p\">)</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">my_shiny_rubles_handler</span><span class=\"p\">(</span><span class=\"n\">bill_update</span><span class=\"p\">:</span> <span class=\"n\">Notification</span><span class=\"p\">):</span>\n    <span class=\"c1\"># do something</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"n\">kassa</span><span class=\"o\">.</span><span class=\"n\">idle</span><span class=\"p\">()</span>\n</pre>\n</div>\n<div id=\"qiwi-terminals\">\n<h2>\ud83d\uddfa QIWI terminals</h2>\n<p><strong>aioqiwi</strong> covers qiwi\u2019s <a href=\"https://developer.qiwi.com/ru/qiwi-map\" rel=\"nofollow\">MAPS</a> api in aioqiwi.terminals module</p>\n</div>\n<div id=\"connectors\">\n<h2>Connectors</h2>\n<p>QiwiClient.connector is responsible for making http requests. Current available request managers are located in <cite>aioqiwi.core.connectors</cite></p>\n<p>Default connector is <cite>aioqiwi.core.connectors.asyncio</cite>, but if it\u2019s no suit for you, you can easily switch to another</p>\n<p>Example:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">aioqiwi</span> <span class=\"kn\">import</span> <span class=\"n\">Wallet</span>\n<span class=\"kn\">from</span> <span class=\"nn\">aioqiwi.core.connectors.aiohttp</span> <span class=\"kn\">import</span> <span class=\"n\">AiohttpConnector</span>\n\n<span class=\"n\">wallet</span> <span class=\"o\">=</span> <span class=\"n\">Wallet</span><span class=\"p\">(</span><span class=\"s2\">\"auth\"</span><span class=\"p\">)</span>\n<span class=\"c1\"># switch with read-to-use connector-like instance implementing</span>\n<span class=\"n\">wallet</span><span class=\"o\">.</span><span class=\"n\">connector</span> <span class=\"o\">=</span> <span class=\"n\">AiohttpConnector</span><span class=\"p\">(</span><span class=\"n\">timeout</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s2\">\"user-agent\"</span><span class=\"p\">:</span> <span class=\"s2\">\"opeka/02\"</span><span class=\"p\">})</span>\n<span class=\"c1\"># or switch with aioqiwi.core.connectors.abstract.Connector compatible class</span>\n<span class=\"n\">wallet</span><span class=\"o\">.</span><span class=\"n\">connector</span> <span class=\"o\">=</span> <span class=\"n\">AiohttpConnector</span>\n</pre>\n<div id=\"hacking-connector\">\n<h3>Hacking connector</h3>\n<p>You can easily implement your own http client(connector), subclassing from <cite>aioqiwi.core.connectors.abstract.AbstractConnector</cite>. Take a look at \u201cout of the box\u201d <cite>aiohttp</cite> or <cite>asyncio</cite> sessions for the start.</p>\n</div>\n</div>\n<div id=\"handling-errors\">\n<h2>\ud83d\udc7e Handling errors</h2>\n<div id=\"api-request-error\">\n<h3>API request error</h3>\n<p>Consider we have a <cite>aioqiwi.wallet.Wallet</cite> instance with a named reference <cite>wallet</cite> to it.\nKnown error when we cannot ask server for more than 50 rows in <cite>wallet.history</cite>. To handle that error, we simply:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">aioqiwi.exceptions</span> <span class=\"kn\">import</span> <span class=\"n\">AioqiwiError</span>\n<span class=\"kn\">from</span> <span class=\"nn\">aioqiwi.errors</span> <span class=\"kn\">import</span> <span class=\"n\">ErrorInfo</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"k\">await</span> <span class=\"n\">wallet</span><span class=\"o\">.</span><span class=\"n\">history</span><span class=\"p\">(</span><span class=\"mi\">2</span> <span class=\"o\">**</span> <span class=\"mi\">6</span><span class=\"p\">)</span>  <span class=\"c1\"># pass rows=64, whilst constraint is 0&lt;rows&lt;51</span>\n<span class=\"k\">except</span> <span class=\"n\">AioqiwiError</span> <span class=\"k\">as</span> <span class=\"n\">exc</span><span class=\"p\">:</span>\n    <span class=\"k\">if</span> <span class=\"n\">exc</span><span class=\"o\">.</span><span class=\"n\">err</span><span class=\"p\">:</span>  <span class=\"c1\"># this feature is experimental</span>\n        <span class=\"n\">exc</span><span class=\"o\">.</span><span class=\"n\">err</span><span class=\"p\">:</span> <span class=\"n\">ErrorInfo</span> <span class=\"o\">=</span> <span class=\"n\">exc</span><span class=\"o\">.</span><span class=\"n\">err</span>  <span class=\"c1\"># cast to aioqiwi.Wallet's error info</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">exc</span><span class=\"o\">.</span><span class=\"n\">err</span><span class=\"o\">.</span><span class=\"n\">error_message</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"timeouterror\">\n<h3>TimeoutError</h3>\n<p>This is slight different error and aioqiwi should not be really responsible for it. It\u2019s usually server-side error\nwhich makes exception that should be raised connector-specific. <cite>asyncio.TimeoutError</cite> is exception that is produced\nby <cite>asyncio</cite> connector. In <cite>aiohttp</cite> or other connectors it may differ.</p>\n</div>\n</div>\n<div id=\"return-policies-types\">\n<h2>\u26cf return policies (types)</h2>\n<p>aioqiwi\u2019s server.BaseWebHookView and requests.Requests support \u201creturn policy\u201d, it means you can get response/update in the form that suits your needs.\nThere\u2019re currently 5 return policies.</p>\n<ul>\n<li>NOTHING - returns nothing(note: None is python\u2019s implicit return), :note: returning nothing does not mean doing nothing, validation is done anyway</li>\n<li>READ_DATA - raw return once stream is read</li>\n<li>JSON - raw return once read data was deserialized</li>\n<li>MODEL - complex return once json deserialized and new model instantiated</li>\n<li>LIST_OF_MODELS - complex return once json deserialized as an iterable list with new instantiated models of json objects</li>\n</ul>\n</div>\n<div id=\"how-tos\">\n<h2>\u2753 HOW-TOs</h2>\n<p>You can find examples in <tt>examples/</tt> directory in github repository. For start examples above should be enough.</p>\n</div>\n<div id=\"todos\">\n<h2>\ud83d\udd27 TODOs</h2>\n<ul>\n<li><strong>Tests/CI/CD</strong></li>\n<li><strong>Implement all qiwi wallet API methods</strong></li>\n</ul>\n</div>\n<div id=\"work-in-progress\">\n<h2>Work in progress</h2>\n<ul>\n<li>history_polling needs to be tested</li>\n<li>implement wallet web-hook payment verification</li>\n</ul>\n</div>\n<div id=\"community\">\n<h2>\ud83d\udc26 Community</h2>\n<p><strong>My group</strong>\n<a href=\"https://t.me/joinchat/B2cC_hSIAiYXxqKghdguCA\" rel=\"nofollow\">\u2708\ufe0f Telegram</a></p>\n</div>\n\n          </div>"}, "last_serial": 6958149, "releases": {"1.1.2": [{"comment_text": "", "digests": {"md5": "e6455198ce81324cf44069266bd98dcb", "sha256": "45155f608b9a99cb37c1fdda104a97bc53ceb04c370571b797d8793794926f61"}, "downloads": -1, "filename": "aioqiwi-1.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "e6455198ce81324cf44069266bd98dcb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7,<4.0", "size": 53757, "upload_time": "2020-04-05T22:37:28", "upload_time_iso_8601": "2020-04-05T22:37:28.212866Z", "url": "https://files.pythonhosted.org/packages/56/0f/9475b0710da2a98a6eca558e598ec440210cb5b62962cda705d51b10b09b/aioqiwi-1.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c1e9b38ea8e49a22e22cdd742e312566", "sha256": "3043508cef12a03f2e9fc7f0f883364395480aac357786c9964f04ef46c8f1e0"}, "downloads": -1, "filename": "aioqiwi-1.1.2.tar.gz", "has_sig": false, "md5_digest": "c1e9b38ea8e49a22e22cdd742e312566", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7,<4.0", "size": 40758, "upload_time": "2020-04-05T22:37:29", "upload_time_iso_8601": "2020-04-05T22:37:29.933606Z", "url": "https://files.pythonhosted.org/packages/64/78/1474f69fe7b8012208c5d830efe0dc6c7aca6be35bdce6ec61566db4cea3/aioqiwi-1.1.2.tar.gz", "yanked": false}], "1.1.3": [{"comment_text": "", "digests": {"md5": "259d40f896185c6dbaddde226f1877ab", "sha256": "4b2418af30a52ee5b714eb32b79bd4939b4a29f2c5486502d369fc2ef883e3e6"}, "downloads": -1, "filename": "aioqiwi-1.1.3-py3-none-any.whl", "has_sig": false, "md5_digest": "259d40f896185c6dbaddde226f1877ab", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7,<4.0", "size": 53748, "upload_time": "2020-04-05T22:41:02", "upload_time_iso_8601": "2020-04-05T22:41:02.124627Z", "url": "https://files.pythonhosted.org/packages/69/0c/cd15bc9a8b710079e0c0e3ab933a0040861988c667c3ec96c351b3b723e2/aioqiwi-1.1.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5d53e25a9e263f0f29db06dfe86ceaaf", "sha256": "5194a5110122885c8fb1eac45ce6d7a19078981da6ff5672a6ba40bec25c39d7"}, "downloads": -1, "filename": "aioqiwi-1.1.3.tar.gz", "has_sig": false, "md5_digest": "5d53e25a9e263f0f29db06dfe86ceaaf", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7,<4.0", "size": 40751, "upload_time": "2020-04-05T22:41:04", "upload_time_iso_8601": "2020-04-05T22:41:04.235434Z", "url": "https://files.pythonhosted.org/packages/76/67/2d45440138e8c8a41e320bdcf71bbc53136eecd2d3e047437554f4b61a19/aioqiwi-1.1.3.tar.gz", "yanked": false}], "1.1.4": [{"comment_text": "", "digests": {"md5": "8aa89019197c4070b25b027ae6d30996", "sha256": "69d6be62b8b0e69344a90bd39258a78e28c5a60c7fb38685828ed39bb942429d"}, "downloads": -1, "filename": "aioqiwi-1.1.4-py3-none-any.whl", "has_sig": false, "md5_digest": "8aa89019197c4070b25b027ae6d30996", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7,<4.0", "size": 53728, "upload_time": "2020-04-05T22:51:59", "upload_time_iso_8601": "2020-04-05T22:51:59.121388Z", "url": "https://files.pythonhosted.org/packages/fd/42/c392f2a35b415f1011ba5cc4abd09551866a8133c341c6bcc547da48848e/aioqiwi-1.1.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f9062b22870d84a839c00f0483699dcd", "sha256": "bc39015f604c9ec009d319be8bd2706aa3c7c4d9a3ba083ae36b1ea774f0bbd4"}, "downloads": -1, "filename": "aioqiwi-1.1.4.tar.gz", "has_sig": false, "md5_digest": "f9062b22870d84a839c00f0483699dcd", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7,<4.0", "size": 40733, "upload_time": "2020-04-05T22:52:01", "upload_time_iso_8601": "2020-04-05T22:52:01.247937Z", "url": "https://files.pythonhosted.org/packages/79/f3/e3636c941880a3b622f45376f846b18cbdf1238c67216859773bf7bcc647/aioqiwi-1.1.4.tar.gz", "yanked": false}], "1.1.5": [{"comment_text": "", "digests": {"md5": "986e4e0593b42f4d569528f2bb2fc56e", "sha256": "3a4aa94a8b3433483fe8d7cd062e0f6f45a87d4fdbeba42a80d7e0a1805d6824"}, "downloads": -1, "filename": "aioqiwi-1.1.5-py3-none-any.whl", "has_sig": false, "md5_digest": "986e4e0593b42f4d569528f2bb2fc56e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7,<4.0", "size": 53758, "upload_time": "2020-04-05T22:57:45", "upload_time_iso_8601": "2020-04-05T22:57:45.290126Z", "url": "https://files.pythonhosted.org/packages/6e/44/94fbc8318ad200f6d81fb1dd1548ac779ebbf67bf64627e6ed7dbc6b3e2f/aioqiwi-1.1.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2750f8d7d6afec03f0e7370db8299d11", "sha256": "5ebcadde0fca5d5e72f12336952fbb0f7664b3d8155f49a57ef7a021aff013d8"}, "downloads": -1, "filename": "aioqiwi-1.1.5.tar.gz", "has_sig": false, "md5_digest": "2750f8d7d6afec03f0e7370db8299d11", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7,<4.0", "size": 40768, "upload_time": "2020-04-05T22:57:47", "upload_time_iso_8601": "2020-04-05T22:57:47.344128Z", "url": "https://files.pythonhosted.org/packages/c8/9b/25bba32e650ca3b07ea4ab0052c26bd2789a0445635f32bd7df5c1f6e9cb/aioqiwi-1.1.5.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "986e4e0593b42f4d569528f2bb2fc56e", "sha256": "3a4aa94a8b3433483fe8d7cd062e0f6f45a87d4fdbeba42a80d7e0a1805d6824"}, "downloads": -1, "filename": "aioqiwi-1.1.5-py3-none-any.whl", "has_sig": false, "md5_digest": "986e4e0593b42f4d569528f2bb2fc56e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7,<4.0", "size": 53758, "upload_time": "2020-04-05T22:57:45", "upload_time_iso_8601": "2020-04-05T22:57:45.290126Z", "url": "https://files.pythonhosted.org/packages/6e/44/94fbc8318ad200f6d81fb1dd1548ac779ebbf67bf64627e6ed7dbc6b3e2f/aioqiwi-1.1.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2750f8d7d6afec03f0e7370db8299d11", "sha256": "5ebcadde0fca5d5e72f12336952fbb0f7664b3d8155f49a57ef7a021aff013d8"}, "downloads": -1, "filename": "aioqiwi-1.1.5.tar.gz", "has_sig": false, "md5_digest": "2750f8d7d6afec03f0e7370db8299d11", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7,<4.0", "size": 40768, "upload_time": "2020-04-05T22:57:47", "upload_time_iso_8601": "2020-04-05T22:57:47.344128Z", "url": "https://files.pythonhosted.org/packages/c8/9b/25bba32e650ca3b07ea4ab0052c26bd2789a0445635f32bd7df5c1f6e9cb/aioqiwi-1.1.5.tar.gz", "yanked": false}], "timestamp": "Thu May  7 16:20:54 2020"}