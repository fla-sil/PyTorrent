{"info": {"author": "GYUN Team", "author_email": "service@gomeholdings.com", "bugtrack_url": null, "classifiers": [], "description": "===============\nGYUN CLI \n===============\n\ngyun-cli is the command line interface for managing GYUN resources,\nwith it you can check, create, delete and operate all your resources,\nit supports Linux, Mac and Windows for now.\n\nThis CLI is licensed under\n`Apache Licence, Version 2.0 <http://www.apache.org/licenses/LICENSE-2.0.html>`_.\n  \n.. note::\n  Requires Python 2.6 or higher, for more information please see\n  `GYUN CLI Documentation <http://docs.qc.gyun.com/cli/>`_\n  \n\n-------------\nInstallation\n-------------\n\nInstall via `pip <http://www.pip-installer.org>`_ ::\n\n    $ pip install gyun-cli\n\nIf not installed in ``virtualenv``, maybe ``sudo`` is needed ::\n\n    $ sudo pip install gyun-cli\n\nUpgrade to the latest version ::\n\n    $ pip install --upgrade gyun-cli\n\n\n--------------------\nCommand Completion\n--------------------\n\ngyun-cli has auto-completion (only support Linux and Mac).\n\nIf auto-completion doesn't take effect, please activate it manually.::\n\n  $ source ~/.bash_profile\n\nIf still doesn't work, please input::\n\n  $ complete -C gyun_completer gyun\n\nand add this command into your login shell (such as ``~/.bash_profile``).\n\n-----------------\nGetting Started\n-----------------\n\nTo use gyun-cli, there must be a configuration file to configure your own\n``qy_access_key_id`` , ``qy_secret_access_key`` and ``zone`` , such as::\n\n  qy_access_key_id: 'GYUNACCESSKEYID'\n  qy_secret_access_key: 'GYUNSECRETACCESSKEYEXAMPLE'\n  zone: 'pek1'\n\naccess key can be applied for in `GYUN Console <http://console.qc.gyun.com/access_keys/>`_.\nzone is the Node ID where your resources are,\nand it can be checked in the switching node on the console,\nsuch as ``pek1``, ``pek2``, ``gd1``, ``ap1`` .\n\nThe configuration file is saved in ``~/.gyun/config.yaml`` by default,\nit also can be assigned by the parameter ``-f /path/to/config``\nwhen executing the command.\n\n\n----------------\nInput Parameters\n----------------\n\nFor iaas service, the parameters of gyun-cli only include ``int`` and ``string`` type.\nIf the parameters support the list passing,\nthe values shall be separated by *English comma* . For example::\n\n  gyun iaas describe-keypairs -k 'kp-bn2n77ow, kp-b2ivaf15' -L 2\n\nSometimes, the parameter needs to be string in JSON format, such as::\n\n  gyun iaas add-router-statics -r rtr-ba2nbge6 -s '[{\"static_type\":1,\"val1\":\"80\",\"val2\":\"192.168.99.2\",\"val3\":\"8000\"}]'\n\nFor qs service, the parameters include ``int``, ``string`` and ``list`` type.\nIf the parameters support the list passing,\nthe values shall be separated by *spaces*. For example::\n\n  gyun qs set-bucket-acl -b mybucket -A QS_ACL_EVERYONE,READ usr-wmTc0avW,FULL_CONTROL\n\n\n--------------\nCommand Output\n--------------\n\nThe returned result of Command is in JSON format.\nFor example, the returned result of describe-keypair of 'iaas' service.::\n\n  {\n    \"action\":\"DescribeKeyPairsResponse\",\n    \"total_count\":2,\n    \"keypair_set\":[\n      {\n        \"description\":null,\n        \"encrypt_method\":\"ssh-rsa\",\n        \"keypair_name\":\"kp 1\",\n        \"instance_ids\":[\n          \"i-ogbndull\"\n        ],\n        \"create_time\":\"2013-08-30T05:13:50Z\",\n        \"keypair_id\":\"kp-bn2n77ow\",\n        \"pub_key\":\"AAAAB3...\"\n      },\n      {\n        \"description\":null,\n        \"encrypt_method\":\"ssh-rsa\",\n        \"keypair_name\":\"kp 2\",\n        \"create_time\":\"2013-08-31T05:13:50Z\",\n        \"keypair_id\":\"kp-b2ivaf15\",\n        \"pub_key\":\"AAAAB3...\"\n      }\n    ],\n    \"ret_code\":0\n  }\n\nThe returned result of list-objects of 'qs' service.::\n\n  {\n    \"name\": \"mybucket\",\n    \"keys\": [\n      {\n        \"key\": \"myphoto.jpg\",\n        \"size\": 67540,\n        \"modified\": 1456226022,\n        \"mime_type\": \"image/jpeg\",\n        \"created\": \"2016-02-23T11:13:42.000Z\"\n      },\n      {\n        \"key\": \"mynote.txt\",\n        \"size\": 11,\n        \"modified\": 1456298679,\n        \"mime_type\": \"text/plain\",\n        \"created\": \"2016-02-24T06:49:23.000Z\"\n      }\n    ],\n    \"prefix\": \"\",\n    \"owner\": \"gyun\",\n    \"delimiter\": \"\",\n    \"limit\": 20,\n    \"marker\": \"mynote.txt\",\n    \"common_prefixes\": []\n  }\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://docs.qc.gyun.com", "keywords": "gyun iaas gomestor cli", "license": "", "maintainer": "", "maintainer_email": "", "name": "gyun-cli", "package_url": "https://pypi.org/project/gyun-cli/", "platform": "", "project_url": "https://pypi.org/project/gyun-cli/", "project_urls": {"Homepage": "http://docs.qc.gyun.com"}, "release_url": "https://pypi.org/project/gyun-cli/1.2/", "requires_dist": null, "requires_python": "", "summary": "Command Line Interface for GYUN.", "version": "1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>gyun-cli is the command line interface for managing GYUN resources,\nwith it you can check, create, delete and operate all your resources,\nit supports Linux, Mac and Windows for now.</p>\n<p>This CLI is licensed under\n<a href=\"http://www.apache.org/licenses/LICENSE-2.0.html\" rel=\"nofollow\">Apache Licence, Version 2.0</a>.</p>\n<div>\n<p>Note</p>\n<p>Requires Python 2.6 or higher, for more information please see\n<a href=\"http://docs.qc.gyun.com/cli/\" rel=\"nofollow\">GYUN CLI Documentation</a></p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Install via <a href=\"http://www.pip-installer.org\" rel=\"nofollow\">pip</a></p>\n<pre>$ pip install gyun-cli\n</pre>\n<p>If not installed in <tt>virtualenv</tt>, maybe <tt>sudo</tt> is needed</p>\n<pre>$ sudo pip install gyun-cli\n</pre>\n<p>Upgrade to the latest version</p>\n<pre>$ pip install --upgrade gyun-cli\n</pre>\n</div>\n<div id=\"command-completion\">\n<h2>Command Completion</h2>\n<p>gyun-cli has auto-completion (only support Linux and Mac).</p>\n<p>If auto-completion doesn\u2019t take effect, please activate it manually.:</p>\n<pre>$ source ~/.bash_profile\n</pre>\n<p>If still doesn\u2019t work, please input:</p>\n<pre>$ complete -C gyun_completer gyun\n</pre>\n<p>and add this command into your login shell (such as <tt><span class=\"pre\">~/.bash_profile</span></tt>).</p>\n</div>\n<div id=\"getting-started\">\n<h2>Getting Started</h2>\n<p>To use gyun-cli, there must be a configuration file to configure your own\n<tt>qy_access_key_id</tt> , <tt>qy_secret_access_key</tt> and <tt>zone</tt> , such as:</p>\n<pre>qy_access_key_id: 'GYUNACCESSKEYID'\nqy_secret_access_key: 'GYUNSECRETACCESSKEYEXAMPLE'\nzone: 'pek1'\n</pre>\n<p>access key can be applied for in <a href=\"http://console.qc.gyun.com/access_keys/\" rel=\"nofollow\">GYUN Console</a>.\nzone is the Node ID where your resources are,\nand it can be checked in the switching node on the console,\nsuch as <tt>pek1</tt>, <tt>pek2</tt>, <tt>gd1</tt>, <tt>ap1</tt> .</p>\n<p>The configuration file is saved in <tt><span class=\"pre\">~/.gyun/config.yaml</span></tt> by default,\nit also can be assigned by the parameter <tt><span class=\"pre\">-f</span> /path/to/config</tt>\nwhen executing the command.</p>\n</div>\n<div id=\"input-parameters\">\n<h2>Input Parameters</h2>\n<p>For iaas service, the parameters of gyun-cli only include <tt>int</tt> and <tt>string</tt> type.\nIf the parameters support the list passing,\nthe values shall be separated by <em>English comma</em> . For example:</p>\n<pre>gyun iaas describe-keypairs -k 'kp-bn2n77ow, kp-b2ivaf15' -L 2\n</pre>\n<p>Sometimes, the parameter needs to be string in JSON format, such as:</p>\n<pre>gyun iaas add-router-statics -r rtr-ba2nbge6 -s '[{\"static_type\":1,\"val1\":\"80\",\"val2\":\"192.168.99.2\",\"val3\":\"8000\"}]'\n</pre>\n<p>For qs service, the parameters include <tt>int</tt>, <tt>string</tt> and <tt>list</tt> type.\nIf the parameters support the list passing,\nthe values shall be separated by <em>spaces</em>. For example:</p>\n<pre>gyun qs set-bucket-acl -b mybucket -A QS_ACL_EVERYONE,READ usr-wmTc0avW,FULL_CONTROL\n</pre>\n</div>\n<div id=\"command-output\">\n<h2>Command Output</h2>\n<p>The returned result of Command is in JSON format.\nFor example, the returned result of describe-keypair of \u2018iaas\u2019 service.:</p>\n<pre>{\n  \"action\":\"DescribeKeyPairsResponse\",\n  \"total_count\":2,\n  \"keypair_set\":[\n    {\n      \"description\":null,\n      \"encrypt_method\":\"ssh-rsa\",\n      \"keypair_name\":\"kp 1\",\n      \"instance_ids\":[\n        \"i-ogbndull\"\n      ],\n      \"create_time\":\"2013-08-30T05:13:50Z\",\n      \"keypair_id\":\"kp-bn2n77ow\",\n      \"pub_key\":\"AAAAB3...\"\n    },\n    {\n      \"description\":null,\n      \"encrypt_method\":\"ssh-rsa\",\n      \"keypair_name\":\"kp 2\",\n      \"create_time\":\"2013-08-31T05:13:50Z\",\n      \"keypair_id\":\"kp-b2ivaf15\",\n      \"pub_key\":\"AAAAB3...\"\n    }\n  ],\n  \"ret_code\":0\n}\n</pre>\n<p>The returned result of list-objects of \u2018qs\u2019 service.:</p>\n<pre>{\n  \"name\": \"mybucket\",\n  \"keys\": [\n    {\n      \"key\": \"myphoto.jpg\",\n      \"size\": 67540,\n      \"modified\": 1456226022,\n      \"mime_type\": \"image/jpeg\",\n      \"created\": \"2016-02-23T11:13:42.000Z\"\n    },\n    {\n      \"key\": \"mynote.txt\",\n      \"size\": 11,\n      \"modified\": 1456298679,\n      \"mime_type\": \"text/plain\",\n      \"created\": \"2016-02-24T06:49:23.000Z\"\n    }\n  ],\n  \"prefix\": \"\",\n  \"owner\": \"gyun\",\n  \"delimiter\": \"\",\n  \"limit\": 20,\n  \"marker\": \"mynote.txt\",\n  \"common_prefixes\": []\n}\n</pre>\n</div>\n\n          </div>"}, "last_serial": 3169705, "releases": {"1.2": [{"comment_text": "", "digests": {"md5": "d63f2b5dab61c0c61680cc5bb43326a0", "sha256": "382b8b9e4ed30a8cf80721e4a9fa6eda13b535d2f22f7228b255d9f1397bbedc"}, "downloads": -1, "filename": "gyun-cli-1.2.tar.gz", "has_sig": false, "md5_digest": "d63f2b5dab61c0c61680cc5bb43326a0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 45890, "upload_time": "2017-09-13T05:26:45", "upload_time_iso_8601": "2017-09-13T05:26:45.885002Z", "url": "https://files.pythonhosted.org/packages/8e/f8/70e27c7f18fc09a2383aa783db6b2867d39066a8df8eb6dc94599d7b9611/gyun-cli-1.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d63f2b5dab61c0c61680cc5bb43326a0", "sha256": "382b8b9e4ed30a8cf80721e4a9fa6eda13b535d2f22f7228b255d9f1397bbedc"}, "downloads": -1, "filename": "gyun-cli-1.2.tar.gz", "has_sig": false, "md5_digest": "d63f2b5dab61c0c61680cc5bb43326a0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 45890, "upload_time": "2017-09-13T05:26:45", "upload_time_iso_8601": "2017-09-13T05:26:45.885002Z", "url": "https://files.pythonhosted.org/packages/8e/f8/70e27c7f18fc09a2383aa783db6b2867d39066a8df8eb6dc94599d7b9611/gyun-cli-1.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:52:57 2020"}