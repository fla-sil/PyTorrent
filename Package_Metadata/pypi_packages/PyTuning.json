{"info": {"author": "Mark Conway Wirt", "author_email": "markcwirt@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "Intended Audience :: End Users/Desktop", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Topic :: Multimedia :: Sound/Audio", "Topic :: Multimedia :: Sound/Audio :: Analysis", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "PyTuning\n========\n\n|build|\n\nPyTuning is a Python library intended for the exploration of musical scales\nand microtonalities. It can be used by developers who need ways of calculating,\nanalyzing, and manipulating musical scales, but it can also be used interactively.\n\nIt makes heavy use of the `SymPy <http://www.sympy.org/>`__ package, a pure-Python\ncomputer algebra system, which allows scales and scale degrees to be\nmanipulated symbolically, with no loss of precision. There is also an optional\ndependency on `Matplotlib <http://matplotlib.org/>`__ (and\n`Seaborn <http://seaborn.pydata.org/>`__) for some visualizations that have been\nincluded in the package.\n\nSome of the package's features include:\n\n* Creation of scales in a variety of ways (EDO, Euler-Fokker, Diatonic, Harmonic,\n  from generator intervals, etc.)\n* Ability to represent created scales in ways that are understood by external\n  software (Scala, Timidity, Fluidsynth, Yoshimi, Zynaddsubfx).\n* Some analysis functions (for example, PyTuning provides a framework for searching\n  for scale modes based upon defined metric functions and combinatorial analysis). Also\n  included are some number-theoretic functions, such as prime limits and odd limits.\n* Some scale visualizations.\n* Interactive use.\n\n\nAs a simple example, to create a 31-TET scale and then create a tuning table for\nthe timidity soft-synth:\n\n.. code:: python\n\n  scale = create_edo_scale(31)\n  tuning_table = create_timidity_tuning(scale, reference_note=69)\n\nThe design of PyTuning is purposefully simple so that non-computer professionals can\nuse it without much difficultly (musicians, musicologist, interested people of all\nstripes).\n\nIn scope this project is similar to the `Scala <http://www.huygens-fokker.org/scala/>`__\nsoftware package, with a few differences:\n\n* Scala is a mature, full-featured package that includes many, many scales\n  and functions for manipulating and analyzing those scales. This project\n  is much newer and less mature; its scope is currently much less (but\n  hopefully it will be easy to extend).\n* PyTuning is written in Python and relies on modern, well maintained dependencies.\n  Scala is written in Ada, and while this is an interesting choice, it probably\n  limits the population of users who *could* change or extend it should a need\n  arise.\n* Scala is mainly an application. PyTuning is a development library, but with\n  ways for non-programmers to use it interactively.\n* This package does *not* interact with sound cards or audio drivers, so one\n  can't play a scale directly. There are, however,\n  functions for exporting scales into other software packages so that music\n  and sound can be produced.\n\nInstallation\n------------\n\nPyTuning runs under Python 2.7.X and 3.X.\n\nThe easiest way to install PyTuning is via the Python Package Index, with\nwhich Pytuning is `registered <https://pypi.python.org/pypi/PyTuning/>`__:\n\n.. code:: bash\n\n  pip install pytuning\n\nThere are two hard dependencies for PyTuning: `SymPy <http://www.sympy.org/en/index.html>`__ and\n`NumPy <http://www.numpy.org/>`__. SymPy is a pure Python library and ``pip`` will handle\nits installation nicely. NumPy is a more complicated package and if installed via ``pip`` may\ninvolve much compilation; it would probably behoove you to install the package manually via\nwhatever mechanism your platform provides before ``pip`` installing the package .\n\nIf you are running the package interactively it is recommended that the Jupyter interactive\nshell be installed. This is discussed in the documentation under the notes on Interactive use.\n\nThe source-code is available on `GitHub <https://github.com/MarkCWirt/PyTuning>`__, where\nit can be cloned and installed.\n\nDocumentation\n-------------\n\nDocumentation for the package can be found on `Read the Docs <http://pytuning.readthedocs.io/>`__.\n\n\nRoadmap\n-------\n\nMore scales, more visualizations, more analysis functions. Pull requests are welcome!\n\n\n.. |build| image:: https://travis-ci.org/MarkCWirt/PyTuning.svg?branch=master\n   :target: https://travis-ci.org/MarkCWirt/PyTuning\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/MarkCWirt/PyTuning", "keywords": "Music Scales Tuning Microtonalities", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "PyTuning", "package_url": "https://pypi.org/project/PyTuning/", "platform": "Platform Independent", "project_url": "https://pypi.org/project/PyTuning/", "project_urls": {"Homepage": "https://github.com/MarkCWirt/PyTuning"}, "release_url": "https://pypi.org/project/PyTuning/0.7.2/", "requires_dist": null, "requires_python": "", "summary": "A Python package for the exploration of musical tunings.", "version": "0.7.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://travis-ci.org/MarkCWirt/PyTuning\" rel=\"nofollow\"><img alt=\"build\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/716883ea00ee2f414ea5b5b3f42d04f047e59c3e/68747470733a2f2f7472617669732d63692e6f72672f4d61726b43576972742f507954756e696e672e7376673f6272616e63683d6d6173746572\"></a></p>\n<p>PyTuning is a Python library intended for the exploration of musical scales\nand microtonalities. It can be used by developers who need ways of calculating,\nanalyzing, and manipulating musical scales, but it can also be used interactively.</p>\n<p>It makes heavy use of the <a href=\"http://www.sympy.org/\" rel=\"nofollow\">SymPy</a> package, a pure-Python\ncomputer algebra system, which allows scales and scale degrees to be\nmanipulated symbolically, with no loss of precision. There is also an optional\ndependency on <a href=\"http://matplotlib.org/\" rel=\"nofollow\">Matplotlib</a> (and\n<a href=\"http://seaborn.pydata.org/\" rel=\"nofollow\">Seaborn</a>) for some visualizations that have been\nincluded in the package.</p>\n<p>Some of the package\u2019s features include:</p>\n<ul>\n<li>Creation of scales in a variety of ways (EDO, Euler-Fokker, Diatonic, Harmonic,\nfrom generator intervals, etc.)</li>\n<li>Ability to represent created scales in ways that are understood by external\nsoftware (Scala, Timidity, Fluidsynth, Yoshimi, Zynaddsubfx).</li>\n<li>Some analysis functions (for example, PyTuning provides a framework for searching\nfor scale modes based upon defined metric functions and combinatorial analysis). Also\nincluded are some number-theoretic functions, such as prime limits and odd limits.</li>\n<li>Some scale visualizations.</li>\n<li>Interactive use.</li>\n</ul>\n<p>As a simple example, to create a 31-TET scale and then create a tuning table for\nthe timidity soft-synth:</p>\n<pre><span class=\"n\">scale</span> <span class=\"o\">=</span> <span class=\"n\">create_edo_scale</span><span class=\"p\">(</span><span class=\"mi\">31</span><span class=\"p\">)</span>\n<span class=\"n\">tuning_table</span> <span class=\"o\">=</span> <span class=\"n\">create_timidity_tuning</span><span class=\"p\">(</span><span class=\"n\">scale</span><span class=\"p\">,</span> <span class=\"n\">reference_note</span><span class=\"o\">=</span><span class=\"mi\">69</span><span class=\"p\">)</span>\n</pre>\n<p>The design of PyTuning is purposefully simple so that non-computer professionals can\nuse it without much difficultly (musicians, musicologist, interested people of all\nstripes).</p>\n<p>In scope this project is similar to the <a href=\"http://www.huygens-fokker.org/scala/\" rel=\"nofollow\">Scala</a>\nsoftware package, with a few differences:</p>\n<ul>\n<li>Scala is a mature, full-featured package that includes many, many scales\nand functions for manipulating and analyzing those scales. This project\nis much newer and less mature; its scope is currently much less (but\nhopefully it will be easy to extend).</li>\n<li>PyTuning is written in Python and relies on modern, well maintained dependencies.\nScala is written in Ada, and while this is an interesting choice, it probably\nlimits the population of users who <em>could</em> change or extend it should a need\narise.</li>\n<li>Scala is mainly an application. PyTuning is a development library, but with\nways for non-programmers to use it interactively.</li>\n<li>This package does <em>not</em> interact with sound cards or audio drivers, so one\ncan\u2019t play a scale directly. There are, however,\nfunctions for exporting scales into other software packages so that music\nand sound can be produced.</li>\n</ul>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>PyTuning runs under Python 2.7.X and 3.X.</p>\n<p>The easiest way to install PyTuning is via the Python Package Index, with\nwhich Pytuning is <a href=\"https://pypi.python.org/pypi/PyTuning/\" rel=\"nofollow\">registered</a>:</p>\n<pre>pip install pytuning\n</pre>\n<p>There are two hard dependencies for PyTuning: <a href=\"http://www.sympy.org/en/index.html\" rel=\"nofollow\">SymPy</a> and\n<a href=\"http://www.numpy.org/\" rel=\"nofollow\">NumPy</a>. SymPy is a pure Python library and <tt>pip</tt> will handle\nits installation nicely. NumPy is a more complicated package and if installed via <tt>pip</tt> may\ninvolve much compilation; it would probably behoove you to install the package manually via\nwhatever mechanism your platform provides before <tt>pip</tt> installing the package .</p>\n<p>If you are running the package interactively it is recommended that the Jupyter interactive\nshell be installed. This is discussed in the documentation under the notes on Interactive use.</p>\n<p>The source-code is available on <a href=\"https://github.com/MarkCWirt/PyTuning\" rel=\"nofollow\">GitHub</a>, where\nit can be cloned and installed.</p>\n</div>\n<div id=\"documentation\">\n<h2>Documentation</h2>\n<p>Documentation for the package can be found on <a href=\"http://pytuning.readthedocs.io/\" rel=\"nofollow\">Read the Docs</a>.</p>\n</div>\n<div id=\"roadmap\">\n<h2>Roadmap</h2>\n<p>More scales, more visualizations, more analysis functions. Pull requests are welcome!</p>\n</div>\n\n          </div>"}, "last_serial": 2686247, "releases": {"0.7.0": [{"comment_text": "", "digests": {"md5": "b79cd3b0efab04bcac40982d32557329", "sha256": "2352b319b7c721c091da4a3ebc29b06b235605dd1e0458cba371e7af18a01a16"}, "downloads": -1, "filename": "PyTuning-0.7.0.tar.gz", "has_sig": false, "md5_digest": "b79cd3b0efab04bcac40982d32557329", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1189776, "upload_time": "2016-12-02T00:13:10", "upload_time_iso_8601": "2016-12-02T00:13:10.842693Z", "url": "https://files.pythonhosted.org/packages/f2/d6/c1bd9f850f970c4a852d302319e1996a328fb4c8318883c28c476da0c727/PyTuning-0.7.0.tar.gz", "yanked": false}], "0.7.1": [{"comment_text": "", "digests": {"md5": "42ff7ee7d19eb131dae29701ddaef68d", "sha256": "a047ba97783f42225bf7b86ef0c4379dd0f185522c0d25b4721c56d723e2fa3a"}, "downloads": -1, "filename": "PyTuning-0.7.1.tar.gz", "has_sig": false, "md5_digest": "42ff7ee7d19eb131dae29701ddaef68d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1189930, "upload_time": "2016-12-02T21:35:31", "upload_time_iso_8601": "2016-12-02T21:35:31.067368Z", "url": "https://files.pythonhosted.org/packages/92/d4/a10c670a946300a3328144a7a13e59a4477c8f16b86fed8939485b9104e0/PyTuning-0.7.1.tar.gz", "yanked": false}], "0.7.2": [{"comment_text": "", "digests": {"md5": "35f0837a20bb22c501719364a8f0a7a4", "sha256": "50b16a339351c902fdcd1ffc038d25fd537959b316ec8621fe4f6009de4fa67f"}, "downloads": -1, "filename": "PyTuning-0.7.2.tar.gz", "has_sig": false, "md5_digest": "35f0837a20bb22c501719364a8f0a7a4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3224215, "upload_time": "2017-03-06T16:21:58", "upload_time_iso_8601": "2017-03-06T16:21:58.255277Z", "url": "https://files.pythonhosted.org/packages/da/23/388602ecbb0a0bdc94b91ec6a8572a0eff48d2aa4764ebaa94792887f008/PyTuning-0.7.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "35f0837a20bb22c501719364a8f0a7a4", "sha256": "50b16a339351c902fdcd1ffc038d25fd537959b316ec8621fe4f6009de4fa67f"}, "downloads": -1, "filename": "PyTuning-0.7.2.tar.gz", "has_sig": false, "md5_digest": "35f0837a20bb22c501719364a8f0a7a4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3224215, "upload_time": "2017-03-06T16:21:58", "upload_time_iso_8601": "2017-03-06T16:21:58.255277Z", "url": "https://files.pythonhosted.org/packages/da/23/388602ecbb0a0bdc94b91ec6a8572a0eff48d2aa4764ebaa94792887f008/PyTuning-0.7.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:12:55 2020"}