{"info": {"author": "Theodore Morin", "author_email": "morinted@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Software Development :: Libraries"], "description": "=================================================\nsimpler-fuzzyset - A fuzzy string set for python.\n=================================================\n\nForked from https://github.com/axiak/fuzzyset\n\n-  Removed levenshtein support\n-  No dependencies on install\n\nfuzzyset is a data structure that performs something akin to fulltext search\nagainst data to determine likely mispellings and approximate string matching.\n\nUsage\n-----\n\nThe usage is simple. Just add a string to the set, and ask for it later\nby using either ``.get`` or ``[]``::\n\n   >>> a = fuzzyset.FuzzySet()\n   >>> a.add(\"michael axiak\")\n   >>> a.get(\"micael asiak\")\n   [(0.8461538461538461, u'michael axiak')]\n\nThe result will be a list of ``(score, mached_value)`` tuples.\nThe score is between 0 and 1, with 1 being a perfect match.\n\nFor roughly 15% performance increase, there is also a Cython-implemented\nversion called ``cfuzzyset``. So you can write the following, akin to\n``cStringIO`` and ``cPickle``::\n\n    try:\n        from cfuzzyset import cFuzzySet as FuzzySet\n    except ImportError:\n        from fuzzyset import FuzzySet\n\nConstruction Arguments\n----------------------\n\n - iterable: An iterable that yields strings to initialize the data structure with\n - gram_size_lower: The lower bound of gram sizes to use, inclusive (see Theory of operation). Default: 2\n - gram_size_upper: The upper bound of gram sizes to use, inclusive (see Theory of operation). Default: 3\n - use_levenshtein: Whether or not to use the levenshtein distance to determine the match scoring. Default: True\n\nTheory of operation\n-------------------\n\nAdding to the data structure\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nFirst let's look at adding a string, 'michaelich' to an empty set. We first break apart the string into n-grams (strings of length\nn). So trigrams of 'michaelich' would look like::\n\n    '-mi'\n    'mic'\n    'ich'\n    'cha'\n    'hae'\n    'ael'\n    'eli'\n    'lic'\n    'ich'\n    'ch-'\n\nNote that fuzzyset will first normalize the string by removing non word characters except for spaces and commas and force\neverything to be lowercase.\n\nNext the fuzzyset essentially creates a reverse index on those grams. Maintaining a dictionary that says::\n\n     'mic' -> (1, 0)\n     'ich' -> (2, 0)\n     ...\n\nAnd there's a list that looks like::\n\n    [(3.31, 'michaelich')]\n\nNote that we maintain this reverse index for *all* grams from ``gram_size_lower`` to ``gram_size_upper`` in the constructor.\nThis becomes important in a second.\n\nRetrieving\n~~~~~~~~~~\n\nTo search the data structure, we take the n-grams of the query string and perform a reverse index look up. To illustrate,\nlet's consider looking up ``'michael'`` in our fictitious set containing ``'michaelich'`` where the ``gram_size_upper``\nand ``gram_size_lower`` parameters are default (3 and 2 respectively).\n\nWe begin by considering first all trigrams (the value of ``gram_size_upper``). Those grams are::\n\n   '-mi'\n   'mic'\n   'ich'\n   'cha'\n   'el-'\n\nThen we create a list of any element in the set that has *at least one* occurrence of a trigram listed above. Note that\nthis is just a dictionary lookup 5 times. For each of these matched elements, we compute the `cosine similarity`_ between\neach element and the query string. We then sort to get the most similar matched elements.\n\nIf ``use_levenshtein`` is false, then we return all top matched elements with the same cosine similarity.\n\nIf ``use_levenshtein`` is true, then we truncate the possible search space to 50, compute a score based on the levenshtein\ndistance (so that we handle transpositions), and return based on that.\n\nIn the event that none of the trigrams matched, we try the whole thing again with bigrams (note though that if there are no matches,\nthe failure to match will be quick). Bigram searching will always be slower because there will be a much larger set to order.\n\n.. _cosine similarity: http://en.wikipedia.org/wiki/Cosine_similarity\n\n\nInstall\n--------\n\n    ``easy_install fuzzyset``\n\n\nLicense\n-------\n\nBSD\n\nAuthor\n--------\n\nMike Axiak <mike@axiak.net>\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/morinted/fuzzyset/", "keywords": "fuzzyset fuzzy data structure", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "simplefuzzyset", "package_url": "https://pypi.org/project/simplefuzzyset/", "platform": "", "project_url": "https://pypi.org/project/simplefuzzyset/", "project_urls": {"Homepage": "https://github.com/morinted/fuzzyset/"}, "release_url": "https://pypi.org/project/simplefuzzyset/0.0.12/", "requires_dist": null, "requires_python": "", "summary": "A simpler python fuzzyset implementation.", "version": "0.0.12", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Forked from <a href=\"https://github.com/axiak/fuzzyset\" rel=\"nofollow\">https://github.com/axiak/fuzzyset</a></p>\n<ul>\n<li>Removed levenshtein support</li>\n<li>No dependencies on install</li>\n</ul>\n<p>fuzzyset is a data structure that performs something akin to fulltext search\nagainst data to determine likely mispellings and approximate string matching.</p>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>The usage is simple. Just add a string to the set, and ask for it later\nby using either <tt>.get</tt> or <tt>[]</tt>:</p>\n<pre>&gt;&gt;&gt; a = fuzzyset.FuzzySet()\n&gt;&gt;&gt; a.add(\"michael axiak\")\n&gt;&gt;&gt; a.get(\"micael asiak\")\n[(0.8461538461538461, u'michael axiak')]\n</pre>\n<p>The result will be a list of <tt>(score, mached_value)</tt> tuples.\nThe score is between 0 and 1, with 1 being a perfect match.</p>\n<p>For roughly 15% performance increase, there is also a Cython-implemented\nversion called <tt>cfuzzyset</tt>. So you can write the following, akin to\n<tt>cStringIO</tt> and <tt>cPickle</tt>:</p>\n<pre>try:\n    from cfuzzyset import cFuzzySet as FuzzySet\nexcept ImportError:\n    from fuzzyset import FuzzySet\n</pre>\n</div>\n<div id=\"construction-arguments\">\n<h2>Construction Arguments</h2>\n<blockquote>\n<ul>\n<li>iterable: An iterable that yields strings to initialize the data structure with</li>\n<li>gram_size_lower: The lower bound of gram sizes to use, inclusive (see Theory of operation). Default: 2</li>\n<li>gram_size_upper: The upper bound of gram sizes to use, inclusive (see Theory of operation). Default: 3</li>\n<li>use_levenshtein: Whether or not to use the levenshtein distance to determine the match scoring. Default: True</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"theory-of-operation\">\n<h2>Theory of operation</h2>\n<div id=\"adding-to-the-data-structure\">\n<h3>Adding to the data structure</h3>\n<p>First let\u2019s look at adding a string, \u2018michaelich\u2019 to an empty set. We first break apart the string into n-grams (strings of length\nn). So trigrams of \u2018michaelich\u2019 would look like:</p>\n<pre>'-mi'\n'mic'\n'ich'\n'cha'\n'hae'\n'ael'\n'eli'\n'lic'\n'ich'\n'ch-'\n</pre>\n<p>Note that fuzzyset will first normalize the string by removing non word characters except for spaces and commas and force\neverything to be lowercase.</p>\n<p>Next the fuzzyset essentially creates a reverse index on those grams. Maintaining a dictionary that says:</p>\n<pre>'mic' -&gt; (1, 0)\n'ich' -&gt; (2, 0)\n...\n</pre>\n<p>And there\u2019s a list that looks like:</p>\n<pre>[(3.31, 'michaelich')]\n</pre>\n<p>Note that we maintain this reverse index for <em>all</em> grams from <tt>gram_size_lower</tt> to <tt>gram_size_upper</tt> in the constructor.\nThis becomes important in a second.</p>\n</div>\n<div id=\"retrieving\">\n<h3>Retrieving</h3>\n<p>To search the data structure, we take the n-grams of the query string and perform a reverse index look up. To illustrate,\nlet\u2019s consider looking up <tt>'michael'</tt> in our fictitious set containing <tt>'michaelich'</tt> where the <tt>gram_size_upper</tt>\nand <tt>gram_size_lower</tt> parameters are default (3 and 2 respectively).</p>\n<p>We begin by considering first all trigrams (the value of <tt>gram_size_upper</tt>). Those grams are:</p>\n<pre>'-mi'\n'mic'\n'ich'\n'cha'\n'el-'\n</pre>\n<p>Then we create a list of any element in the set that has <em>at least one</em> occurrence of a trigram listed above. Note that\nthis is just a dictionary lookup 5 times. For each of these matched elements, we compute the <a href=\"http://en.wikipedia.org/wiki/Cosine_similarity\" rel=\"nofollow\">cosine similarity</a> between\neach element and the query string. We then sort to get the most similar matched elements.</p>\n<p>If <tt>use_levenshtein</tt> is false, then we return all top matched elements with the same cosine similarity.</p>\n<p>If <tt>use_levenshtein</tt> is true, then we truncate the possible search space to 50, compute a score based on the levenshtein\ndistance (so that we handle transpositions), and return based on that.</p>\n<p>In the event that none of the trigrams matched, we try the whole thing again with bigrams (note though that if there are no matches,\nthe failure to match will be quick). Bigram searching will always be slower because there will be a much larger set to order.</p>\n</div>\n</div>\n<div id=\"install\">\n<h2>Install</h2>\n<blockquote>\n<tt>easy_install fuzzyset</tt></blockquote>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>BSD</p>\n</div>\n<div id=\"author\">\n<h2>Author</h2>\n<p>Mike Axiak &lt;<a href=\"mailto:mike%40axiak.net\">mike<span>@</span>axiak<span>.</span>net</a>&gt;</p>\n</div>\n\n          </div>"}, "last_serial": 3902253, "releases": {"0.0.12": [{"comment_text": "", "digests": {"md5": "461072fe245bf76bd036077cab1e458a", "sha256": "c7f146e600ac9fb8d87a013439903f6bb8337ce902e740d25b8ed5f41b8f44da"}, "downloads": -1, "filename": "simplefuzzyset-0.0.12-py3-none-any.whl", "has_sig": false, "md5_digest": "461072fe245bf76bd036077cab1e458a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6994, "upload_time": "2018-05-26T23:16:28", "upload_time_iso_8601": "2018-05-26T23:16:28.082231Z", "url": "https://files.pythonhosted.org/packages/85/8e/d05f60a19b82edb7e40b8a8767f29b804f4212ea58e7d5c5432a85084936/simplefuzzyset-0.0.12-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a9caedd19fbd1873ccf7c0a7d32ed65d", "sha256": "9a1b30c38b6afb76c6600bdd66c1c1dc3d8505b082e9e3d466f60f40e8b7e1f2"}, "downloads": -1, "filename": "simplefuzzyset-0.0.12.tar.gz", "has_sig": false, "md5_digest": "a9caedd19fbd1873ccf7c0a7d32ed65d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 319927, "upload_time": "2018-05-26T23:16:29", "upload_time_iso_8601": "2018-05-26T23:16:29.711570Z", "url": "https://files.pythonhosted.org/packages/ce/bc/7e5d5eaa5566ade033cda9ff0eb51b0942ab2138288b445c469d2814cd2f/simplefuzzyset-0.0.12.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "461072fe245bf76bd036077cab1e458a", "sha256": "c7f146e600ac9fb8d87a013439903f6bb8337ce902e740d25b8ed5f41b8f44da"}, "downloads": -1, "filename": "simplefuzzyset-0.0.12-py3-none-any.whl", "has_sig": false, "md5_digest": "461072fe245bf76bd036077cab1e458a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6994, "upload_time": "2018-05-26T23:16:28", "upload_time_iso_8601": "2018-05-26T23:16:28.082231Z", "url": "https://files.pythonhosted.org/packages/85/8e/d05f60a19b82edb7e40b8a8767f29b804f4212ea58e7d5c5432a85084936/simplefuzzyset-0.0.12-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a9caedd19fbd1873ccf7c0a7d32ed65d", "sha256": "9a1b30c38b6afb76c6600bdd66c1c1dc3d8505b082e9e3d466f60f40e8b7e1f2"}, "downloads": -1, "filename": "simplefuzzyset-0.0.12.tar.gz", "has_sig": false, "md5_digest": "a9caedd19fbd1873ccf7c0a7d32ed65d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 319927, "upload_time": "2018-05-26T23:16:29", "upload_time_iso_8601": "2018-05-26T23:16:29.711570Z", "url": "https://files.pythonhosted.org/packages/ce/bc/7e5d5eaa5566ade033cda9ff0eb51b0942ab2138288b445c469d2814cd2f/simplefuzzyset-0.0.12.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:10:47 2020"}