{"info": {"author": "Peter Boin", "author_email": "peter.boin+cqparts@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "Intended Audience :: End Users/Desktop", "Intended Audience :: Manufacturing", "Intended Audience :: Science/Research", "License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Natural Language :: English", "Operating System :: MacOS", "Operating System :: POSIX", "Operating System :: Unix", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 3", "Topic :: Multimedia :: Graphics :: 3D Modeling", "Topic :: Multimedia :: Graphics :: 3D Rendering", "Topic :: Scientific/Engineering"], "description": ".. image:: https://fragmuffin.github.io/cqparts/media/logo/dark.svg\n    :align: center\n\n=====================\nWhat is `cqparts`?\n=====================\n\n``cqparts`` is CAD for Python programmers, short for \"``cadquery`` parts\".\n\nUsing ``cqparts`` you can wrap geometry made with ``cadquery`` to build complex\nand deeply parametric models.\n\nFull documentation at: https://fragmuffin.github.io/cqparts\n\n\nInstalling\n------------------\n\nPre-requisites\n^^^^^^^^^^^^^^^^^^\n\nYou'll need to fulfill the requirements of ``cadquery``, the simplest way to do\nthat is to install ``cadquery`` first by following the instructions here:\n\nhttp://dcowden.github.io/cadquery/installation.html\n\nPyPI\n^^^^^^^^^\n\nOnce ``cadquery`` is installed, install ``cqparts`` with::\n\n    pip install cqparts\n\n\n``cqparts_*`` Content Libraries\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nYou can also install content libraries with a similar ``pip install`` command.\n\nList available libraries with::\n\n    pip search cqparts_\n\nFor example, to install the ``cqparts_bearings`` content library, run::\n\n    pip install cqparts_bearings\n\n\nExample Usage\n-------------------\n\nHere is just one of the simplest examples to give you an idea of what this\nlibrary does.\n\nMore detailed examples found in\n`the official documentation for cqparts <https://fragmuffin.github.io/cqparts/doc>`_.\n\nWrapping a Cube\n^^^^^^^^^^^^^^^^^^\n\n.. image:: https://fragmuffin.github.io/cqparts/media/img/unit-cube.png\n\nA simple cube defined with ``cadquery`` alone::\n\n    # create unit cube solid\n    import cadquery\n    size = 10\n    cube = cadquery.Workplane('XY').box(size, size, size)\n\n    # display cube (optional)\n    from Helpers import show\n    show(cube)\n\nWrapping this in a ``cqparts.Part`` object can be done like this::\n\n    # create unit cube as cqparts.Part\n    import cadquery\n    import cqparts\n    from cqparts.params import PositiveFloat\n\n    class MyCube(cqparts.Part):\n        size = PositiveFloat(1, doc=\"cube size\")\n        def make(self):\n            return cadquery.Workplane('XY').box(self.size, self.size, self.size)\n\n    # create cube instance\n    cube = MyCube(size=10)\n\n    # display cube (optional)\n    from cqparts.display import display\n    display(cube)\n\nYou can see that under the bonnet (in the ``make`` function) the geometry is\ncreated with ``cadquery``, but the resulting ``MyCube`` class is instantiated\nmore intuitively, and more object orientated.\n\n\nCreating a Hierarchy\n^^^^^^^^^^^^^^^^^^^^^^\n\n``cqparts`` can also be used to create a deep hierarchy of *parts* and\n*assemblies* to build something deeply complicated and entirely parametric.\n\nA simple example of this is the\n`toy car tutorial <https://fragmuffin.github.io/cqparts/doc/tutorials/assembly.html>`_.\n\n.. image:: https://fragmuffin.github.io/cqparts/media/img/toy-car.png\n\n\n``cqparts`` Capabilities\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThe work done in ``cqparts_fasteners`` is a good example of how useful\n``cqparts`` wrapping can be; read about the ``Fastener`` class, how it works,\nand what can be done with it in the\n`cqparts_fasteners docs <https://fragmuffin.github.io/cqparts/doc/cqparts_fasteners/index.html>`_\n\n.. image:: https://fragmuffin.github.io/cqparts/media/img/nut-bolt-fastener.png\n\n\nContributing\n-----------------\n\nIssues, and Pull Requests are encouraged, and happily received, please read\n`CONTRIBUTING.md <https://github.com/fragmuffin/cqparts/blob/master/CONTRIBUTING.md>`_\nfor guidance on how to contribute.\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/fragmuffin/cqparts", "keywords": "cadquery,cad,3d,modeling", "license": "GPLv3", "maintainer": "", "maintainer_email": "", "name": "cqparts", "package_url": "https://pypi.org/project/cqparts/", "platform": "", "project_url": "https://pypi.org/project/cqparts/", "project_urls": {"Homepage": "https://github.com/fragmuffin/cqparts"}, "release_url": "https://pypi.org/project/cqparts/0.2.1/", "requires_dist": ["cadquery", "six", "numpy", "Jinja2", "tinydb", "requests"], "requires_python": "", "summary": "Hierarchical and deeply parametric models using cadquery", "version": "0.2.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <img alt=\"https://fragmuffin.github.io/cqparts/media/logo/dark.svg\" class=\"align-center\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d88930e5f1bdab06e1da9f1c0297fe78b7d7cc5f/68747470733a2f2f667261676d756666696e2e6769746875622e696f2f637170617274732f6d656469612f6c6f676f2f6461726b2e737667\">\n<div id=\"what-is-cqparts\">\n<h2>What is <cite>cqparts</cite>?</h2>\n<p><tt>cqparts</tt> is CAD for Python programmers, short for \u201c<tt>cadquery</tt> parts\u201d.</p>\n<p>Using <tt>cqparts</tt> you can wrap geometry made with <tt>cadquery</tt> to build complex\nand deeply parametric models.</p>\n<p>Full documentation at: <a href=\"https://fragmuffin.github.io/cqparts\" rel=\"nofollow\">https://fragmuffin.github.io/cqparts</a></p>\n<div id=\"installing\">\n<h3>Installing</h3>\n<div id=\"pre-requisites\">\n<h4>Pre-requisites</h4>\n<p>You\u2019ll need to fulfill the requirements of <tt>cadquery</tt>, the simplest way to do\nthat is to install <tt>cadquery</tt> first by following the instructions here:</p>\n<p><a href=\"http://dcowden.github.io/cadquery/installation.html\" rel=\"nofollow\">http://dcowden.github.io/cadquery/installation.html</a></p>\n</div>\n<div id=\"pypi\">\n<h4>PyPI</h4>\n<p>Once <tt>cadquery</tt> is installed, install <tt>cqparts</tt> with:</p>\n<pre>pip install cqparts\n</pre>\n</div>\n<div id=\"cqparts-content-libraries\">\n<h4><tt>cqparts_*</tt> Content Libraries</h4>\n<p>You can also install content libraries with a similar <tt>pip install</tt> command.</p>\n<p>List available libraries with:</p>\n<pre>pip search cqparts_\n</pre>\n<p>For example, to install the <tt>cqparts_bearings</tt> content library, run:</p>\n<pre>pip install cqparts_bearings\n</pre>\n</div>\n</div>\n<div id=\"example-usage\">\n<h3>Example Usage</h3>\n<p>Here is just one of the simplest examples to give you an idea of what this\nlibrary does.</p>\n<p>More detailed examples found in\n<a href=\"https://fragmuffin.github.io/cqparts/doc\" rel=\"nofollow\">the official documentation for cqparts</a>.</p>\n<div id=\"wrapping-a-cube\">\n<h4>Wrapping a Cube</h4>\n<img alt=\"https://fragmuffin.github.io/cqparts/media/img/unit-cube.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/034fbbe2eb0636b524ae914a6f13ec2507d93030/68747470733a2f2f667261676d756666696e2e6769746875622e696f2f637170617274732f6d656469612f696d672f756e69742d637562652e706e67\">\n<p>A simple cube defined with <tt>cadquery</tt> alone:</p>\n<pre># create unit cube solid\nimport cadquery\nsize = 10\ncube = cadquery.Workplane('XY').box(size, size, size)\n\n# display cube (optional)\nfrom Helpers import show\nshow(cube)\n</pre>\n<p>Wrapping this in a <tt>cqparts.Part</tt> object can be done like this:</p>\n<pre># create unit cube as cqparts.Part\nimport cadquery\nimport cqparts\nfrom cqparts.params import PositiveFloat\n\nclass MyCube(cqparts.Part):\n    size = PositiveFloat(1, doc=\"cube size\")\n    def make(self):\n        return cadquery.Workplane('XY').box(self.size, self.size, self.size)\n\n# create cube instance\ncube = MyCube(size=10)\n\n# display cube (optional)\nfrom cqparts.display import display\ndisplay(cube)\n</pre>\n<p>You can see that under the bonnet (in the <tt>make</tt> function) the geometry is\ncreated with <tt>cadquery</tt>, but the resulting <tt>MyCube</tt> class is instantiated\nmore intuitively, and more object orientated.</p>\n</div>\n<div id=\"creating-a-hierarchy\">\n<h4>Creating a Hierarchy</h4>\n<p><tt>cqparts</tt> can also be used to create a deep hierarchy of <em>parts</em> and\n<em>assemblies</em> to build something deeply complicated and entirely parametric.</p>\n<p>A simple example of this is the\n<a href=\"https://fragmuffin.github.io/cqparts/doc/tutorials/assembly.html\" rel=\"nofollow\">toy car tutorial</a>.</p>\n<img alt=\"https://fragmuffin.github.io/cqparts/media/img/toy-car.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/bda0bcd94c095308c8e2e296e5a6ab538bb64297/68747470733a2f2f667261676d756666696e2e6769746875622e696f2f637170617274732f6d656469612f696d672f746f792d6361722e706e67\">\n</div>\n<div id=\"cqparts-capabilities\">\n<h4><tt>cqparts</tt> Capabilities</h4>\n<p>The work done in <tt>cqparts_fasteners</tt> is a good example of how useful\n<tt>cqparts</tt> wrapping can be; read about the <tt>Fastener</tt> class, how it works,\nand what can be done with it in the\n<a href=\"https://fragmuffin.github.io/cqparts/doc/cqparts_fasteners/index.html\" rel=\"nofollow\">cqparts_fasteners docs</a></p>\n<img alt=\"https://fragmuffin.github.io/cqparts/media/img/nut-bolt-fastener.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4020a51277773aa32e3a7a1aae8a4c67477a2afb/68747470733a2f2f667261676d756666696e2e6769746875622e696f2f637170617274732f6d656469612f696d672f6e75742d626f6c742d66617374656e65722e706e67\">\n</div>\n</div>\n<div id=\"contributing\">\n<h3>Contributing</h3>\n<p>Issues, and Pull Requests are encouraged, and happily received, please read\n<a href=\"https://github.com/fragmuffin/cqparts/blob/master/CONTRIBUTING.md\" rel=\"nofollow\">CONTRIBUTING.md</a>\nfor guidance on how to contribute.</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 3912633, "releases": {"0.2.0": [{"comment_text": "", "digests": {"md5": "8e765ef7867816cdd5cfbb8a24b555ee", "sha256": "5f5b7db3e894d4f298bcbb5f5951dde31dfb5644d956d3bc9c2e369391fddf4a"}, "downloads": -1, "filename": "cqparts-0.2.0-py2-none-any.whl", "has_sig": false, "md5_digest": "8e765ef7867816cdd5cfbb8a24b555ee", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 59175, "upload_time": "2018-03-18T10:09:18", "upload_time_iso_8601": "2018-03-18T10:09:18.901361Z", "url": "https://files.pythonhosted.org/packages/07/7d/d7fa139068137daccca7fe0571ab13c8175304535754d140ad72878ac6bc/cqparts-0.2.0-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4545798912450592c9bf22bdf9aed952", "sha256": "d907625ec0d3f82012f8c7191cb71aa53c81d01ce32f19c58f19f44ad8543f74"}, "downloads": -1, "filename": "cqparts-0.2.0.tar.gz", "has_sig": false, "md5_digest": "4545798912450592c9bf22bdf9aed952", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 44766, "upload_time": "2018-03-18T10:09:21", "upload_time_iso_8601": "2018-03-18T10:09:21.557663Z", "url": "https://files.pythonhosted.org/packages/50/2e/b6b18507d44e569903d0e9e40ef0aed2b7360a2f1594bd1cd82ea47db292/cqparts-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "d1db3f2400ce8ad3c6baff92f9691527", "sha256": "277e67a1c9ee80d52ae4c827375e0e9d1d00302379beb30117f4049034faf412"}, "downloads": -1, "filename": "cqparts-0.2.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "d1db3f2400ce8ad3c6baff92f9691527", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 228721, "upload_time": "2018-05-30T12:21:35", "upload_time_iso_8601": "2018-05-30T12:21:35.981750Z", "url": "https://files.pythonhosted.org/packages/44/49/fefa7ddbbd2b349362600779afb2756d31ea77d3ac6a2c6f504b4b46f351/cqparts-0.2.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3f73637f617f3e286a4927d0b5d2eb24", "sha256": "dbb9fba045497aeeea53bfe7e2b9e975ce34053aca2d5ea1f659528144d18316"}, "downloads": -1, "filename": "cqparts-0.2.1.tar.gz", "has_sig": false, "md5_digest": "3f73637f617f3e286a4927d0b5d2eb24", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 210244, "upload_time": "2018-05-30T12:21:39", "upload_time_iso_8601": "2018-05-30T12:21:39.880415Z", "url": "https://files.pythonhosted.org/packages/b2/d1/40fac5099d9303e17a1ae9512a5cc96ef5e410570741bd0f034ff36fd68e/cqparts-0.2.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d1db3f2400ce8ad3c6baff92f9691527", "sha256": "277e67a1c9ee80d52ae4c827375e0e9d1d00302379beb30117f4049034faf412"}, "downloads": -1, "filename": "cqparts-0.2.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "d1db3f2400ce8ad3c6baff92f9691527", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 228721, "upload_time": "2018-05-30T12:21:35", "upload_time_iso_8601": "2018-05-30T12:21:35.981750Z", "url": "https://files.pythonhosted.org/packages/44/49/fefa7ddbbd2b349362600779afb2756d31ea77d3ac6a2c6f504b4b46f351/cqparts-0.2.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3f73637f617f3e286a4927d0b5d2eb24", "sha256": "dbb9fba045497aeeea53bfe7e2b9e975ce34053aca2d5ea1f659528144d18316"}, "downloads": -1, "filename": "cqparts-0.2.1.tar.gz", "has_sig": false, "md5_digest": "3f73637f617f3e286a4927d0b5d2eb24", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 210244, "upload_time": "2018-05-30T12:21:39", "upload_time_iso_8601": "2018-05-30T12:21:39.880415Z", "url": "https://files.pythonhosted.org/packages/b2/d1/40fac5099d9303e17a1ae9512a5cc96ef5e410570741bd0f034ff36fd68e/cqparts-0.2.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:42:31 2020"}