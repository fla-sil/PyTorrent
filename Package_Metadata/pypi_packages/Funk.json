{"info": {"author": "Michael Williamson", "author_email": "mike@zwobble.org", "bugtrack_url": null, "classifiers": [], "description": "Funk: A mocking framework for Python\n====================================\n\nFunk is a mocking framework for Python, influenced heavily by `JMock <http://www.jmock.org/>`_.\nFunk helps to test modules in isolation by allowing mock objects to be used in place of \"real\" objects.\nFunk is licensed under the 2-clause BSD licence.\n\nInstallation\n------------\n\n.. code-block:: sh\n\n    $ pip install funk\n\nExample\n-------\n\nSuppose we have an API for a file storage service.\nWe want to list the names of all files,\nbut the API limits the number of names it will return at a time.\nTherefore, we need to write some code that will keep making requests to the API\nuntil all names have been retrieved.\n\n.. code-block:: python\n\n    def fetch_names(file_storage):\n        has_more = True\n        token = None\n        names = []\n        \n        while has_more:\n            response = file_storage.names(token=token)\n            names += response.names\n            token = response.next_token\n            has_more = token is not None\n        \n        return names    \n        \n\n    import funk\n\n    @funk.with_mocks\n    def test_request_for_names_until_all_names_are_fetched(mocks):\n        file_storage = mocks.mock(FileStorage)\n        \n        mocks.allows(file_storage).names(token=None).returns(mocks.data(\n            next_token=\"<token 1>\",\n            names=[\"a\", \"b\"],\n        ))\n        mocks.allows(file_storage).names(token=\"<token 1>\").returns(mocks.data(\n            next_token=\"<token 2>\",\n            names=[\"c\", \"d\"],\n        ))\n        mocks.allows(file_storage).names(token=\"<token 2>\").returns(mocks.data(\n            next_token=None,\n            names=[\"e\"],\n        ))\n        \n        assert fetch_names(file_storage) == [\"a\", \"b\", \"c\", \"d\", \"e\"]\n\nBy using a mock object instead of a real instance of ``FileStorage``,\nwe can run our tests without a running instance of the file storage system.\nWe also avoid relying on the implementation of ``FileStorage``,\nmaking our tests more focused and less brittle.\n\nIf you're using pytest,\nthe easiest way to use Funk is as a fixture:\n\n.. code-block:: python\n\n    import funk\n    import pytest\n    \n    @pytest.yield_fixture\n    def mocks():\n        mocks = funk.Mocks()\n        yield mocks\n        mocks.verify()\n    \n    def test_request_for_names_until_all_names_are_fetched(mocks):\n        file_storage = mocks.mock(FileStorage)\n        ...\n\nUsage\n-----\n\nCreating a mock context\n^^^^^^^^^^^^^^^^^^^^^^^\n\nCreate an instance of ``Mocks`` to allow mock objects to be created.\nCall ``Mocks.verify()`` to assert that all expectations have been met.\n\n.. code-block:: python\n\n    import funk\n    \n    def test_case():\n        mocks = funk.Mocks()\n        ...\n        mocks.verify()\n\nUse the decorator ``funk.with_mocks`` to inject a ``mocks`` argument to a function.\n``verify()`` will be automatically invoked at the end of the function.\n\n.. code-block:: python\n\n    import funk\n    \n    @funk.with_mocks\n    def test_case(mocks):\n        ...\n\nIf using pytest, a fixture is the simplest way to use Funk:\n\n.. code-block:: python\n\n    import funk\n    import pytest\n    \n    @pytest.yield_fixture\n    def mocks():\n        mocks = funk.Mocks()\n        yield mocks\n        mocks.verify()\n    \n    def test_case(mocks):\n        ...\n\nCreating mock objects\n^^^^^^^^^^^^^^^^^^^^^\n\nCall ``Mocks.mock()`` to create a mock object.\n\n.. code-block:: python\n\n    file_storage = mocks.mock()\n\nIf the ``base`` argument is passed,\nonly methods on that type can be mocked:\n\n.. code-block:: python\n\n    file_storage = mocks.mock(FileStorage)\n\nThis can be useful to ensure that only existing methods are mocked,\nbut should be avoided if generating methods dynamically, such as by using ``__getattr__``.\n\nSet the ``name`` argument to set the name that should be used in assertion failure messages for the mock:\n\n.. code-block:: python\n\n    file_storage = mocks.mock(name=\"file_storage\")\n\nSetting expectations\n^^^^^^^^^^^^^^^^^^^^\n\nTo set up an expectation, use ``funk.allows()`` or ``funk.expects()``.\nFor convenience, these functions are also available on ``Mocks``.\n``funk.allows()`` will let the method be called any number of times, including none.\n``funk.expects()`` will ensure that the method is called exactly once.\nFor instance:\n\n.. code-block:: python\n\n    allows(file_storage).names\n\nThis allows the method ``file_storage.names`` to be called with any arguments\nany number of times.\nTo only allow calls with specific arguments, you can invoke ``.names`` as a method:\n\n.. code-block:: python\n\n    allows(file_storage).names(token=\"<token 1>\")\n\nThis will only allow calls with a matching ``token`` keyword argument,\nand no other arguments.\n\nYou can also use matchers from Precisely_ to match arguments:\n\n.. code-block:: python\n\n    from precisely import instance_of\n\n    allows(file_storage).names(token=instance_of(str))\n\n.. _Precisely: https://pypi.python.org/pypi/precisely\n\nIf more than one expectation is set up on the same method,\nthe first matching expectation is used.\nIf you need to enforce methods being called in a particular order,\nuse sequences.\n\nActions\n~~~~~~~\n\nBy default, a mocked method returns ``None``.\nUse ``returns()`` to return a different value:\n\n.. code-block:: python\n\n    allows(file_storage).names().returns([])\n\nUse ``raises()`` to raise an exception:\n\n.. code-block:: python\n\n    allows(file_storage).names().raises(Exception(\"Could not connect\"))\n\nSequences\n^^^^^^^^^\n\nA sequence object can be created using ``Mocks.sequence``.\nThe sequencing on objects can then be defined using ``in_sequence(sequence)`` when setting expectations.\nFor instance:\n\n.. code-block:: python\n\n    file_storage = mocks.mock(FileStorage)\n    file_ordering = mocks.sequence()\n\n    expects(file_storage).save(NAME_1, CONTENTS_1).in_sequence(file_ordering)\n    expects(file_storage).save(NAME_2, CONTENTS_2).in_sequence(file_ordering)\n", "description_content_type": "", "docs_url": "https://pythonhosted.org/Funk/", "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/mwilliamson/funk", "keywords": "mock", "license": "BSD License", "maintainer": "", "maintainer_email": "", "name": "Funk", "package_url": "https://pypi.org/project/Funk/", "platform": "", "project_url": "https://pypi.org/project/Funk/", "project_urls": {"Homepage": "https://github.com/mwilliamson/funk"}, "release_url": "https://pypi.org/project/Funk/0.5.0/", "requires_dist": null, "requires_python": "", "summary": "A mocking framework for Python", "version": "0.5.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Funk is a mocking framework for Python, influenced heavily by <a href=\"http://www.jmock.org/\" rel=\"nofollow\">JMock</a>.\nFunk helps to test modules in isolation by allowing mock objects to be used in place of \u201creal\u201d objects.\nFunk is licensed under the 2-clause BSD licence.</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<pre>$ pip install funk\n</pre>\n</div>\n<div id=\"example\">\n<h2>Example</h2>\n<p>Suppose we have an API for a file storage service.\nWe want to list the names of all files,\nbut the API limits the number of names it will return at a time.\nTherefore, we need to write some code that will keep making requests to the API\nuntil all names have been retrieved.</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">fetch_names</span><span class=\"p\">(</span><span class=\"n\">file_storage</span><span class=\"p\">):</span>\n    <span class=\"n\">has_more</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n    <span class=\"n\">token</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n    <span class=\"n\">names</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n    <span class=\"k\">while</span> <span class=\"n\">has_more</span><span class=\"p\">:</span>\n        <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">file_storage</span><span class=\"o\">.</span><span class=\"n\">names</span><span class=\"p\">(</span><span class=\"n\">token</span><span class=\"o\">=</span><span class=\"n\">token</span><span class=\"p\">)</span>\n        <span class=\"n\">names</span> <span class=\"o\">+=</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">names</span>\n        <span class=\"n\">token</span> <span class=\"o\">=</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">next_token</span>\n        <span class=\"n\">has_more</span> <span class=\"o\">=</span> <span class=\"n\">token</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">names</span>\n\n\n<span class=\"kn\">import</span> <span class=\"nn\">funk</span>\n\n<span class=\"nd\">@funk</span><span class=\"o\">.</span><span class=\"n\">with_mocks</span>\n<span class=\"k\">def</span> <span class=\"nf\">test_request_for_names_until_all_names_are_fetched</span><span class=\"p\">(</span><span class=\"n\">mocks</span><span class=\"p\">):</span>\n    <span class=\"n\">file_storage</span> <span class=\"o\">=</span> <span class=\"n\">mocks</span><span class=\"o\">.</span><span class=\"n\">mock</span><span class=\"p\">(</span><span class=\"n\">FileStorage</span><span class=\"p\">)</span>\n\n    <span class=\"n\">mocks</span><span class=\"o\">.</span><span class=\"n\">allows</span><span class=\"p\">(</span><span class=\"n\">file_storage</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">names</span><span class=\"p\">(</span><span class=\"n\">token</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">returns</span><span class=\"p\">(</span><span class=\"n\">mocks</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">(</span>\n        <span class=\"n\">next_token</span><span class=\"o\">=</span><span class=\"s2\">\"&lt;token 1&gt;\"</span><span class=\"p\">,</span>\n        <span class=\"n\">names</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"a\"</span><span class=\"p\">,</span> <span class=\"s2\">\"b\"</span><span class=\"p\">],</span>\n    <span class=\"p\">))</span>\n    <span class=\"n\">mocks</span><span class=\"o\">.</span><span class=\"n\">allows</span><span class=\"p\">(</span><span class=\"n\">file_storage</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">names</span><span class=\"p\">(</span><span class=\"n\">token</span><span class=\"o\">=</span><span class=\"s2\">\"&lt;token 1&gt;\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">returns</span><span class=\"p\">(</span><span class=\"n\">mocks</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">(</span>\n        <span class=\"n\">next_token</span><span class=\"o\">=</span><span class=\"s2\">\"&lt;token 2&gt;\"</span><span class=\"p\">,</span>\n        <span class=\"n\">names</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"c\"</span><span class=\"p\">,</span> <span class=\"s2\">\"d\"</span><span class=\"p\">],</span>\n    <span class=\"p\">))</span>\n    <span class=\"n\">mocks</span><span class=\"o\">.</span><span class=\"n\">allows</span><span class=\"p\">(</span><span class=\"n\">file_storage</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">names</span><span class=\"p\">(</span><span class=\"n\">token</span><span class=\"o\">=</span><span class=\"s2\">\"&lt;token 2&gt;\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">returns</span><span class=\"p\">(</span><span class=\"n\">mocks</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">(</span>\n        <span class=\"n\">next_token</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">names</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"e\"</span><span class=\"p\">],</span>\n    <span class=\"p\">))</span>\n\n    <span class=\"k\">assert</span> <span class=\"n\">fetch_names</span><span class=\"p\">(</span><span class=\"n\">file_storage</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"p\">[</span><span class=\"s2\">\"a\"</span><span class=\"p\">,</span> <span class=\"s2\">\"b\"</span><span class=\"p\">,</span> <span class=\"s2\">\"c\"</span><span class=\"p\">,</span> <span class=\"s2\">\"d\"</span><span class=\"p\">,</span> <span class=\"s2\">\"e\"</span><span class=\"p\">]</span>\n</pre>\n<p>By using a mock object instead of a real instance of <tt>FileStorage</tt>,\nwe can run our tests without a running instance of the file storage system.\nWe also avoid relying on the implementation of <tt>FileStorage</tt>,\nmaking our tests more focused and less brittle.</p>\n<p>If you\u2019re using pytest,\nthe easiest way to use Funk is as a fixture:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">funk</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pytest</span>\n\n<span class=\"nd\">@pytest</span><span class=\"o\">.</span><span class=\"n\">yield_fixture</span>\n<span class=\"k\">def</span> <span class=\"nf\">mocks</span><span class=\"p\">():</span>\n    <span class=\"n\">mocks</span> <span class=\"o\">=</span> <span class=\"n\">funk</span><span class=\"o\">.</span><span class=\"n\">Mocks</span><span class=\"p\">()</span>\n    <span class=\"k\">yield</span> <span class=\"n\">mocks</span>\n    <span class=\"n\">mocks</span><span class=\"o\">.</span><span class=\"n\">verify</span><span class=\"p\">()</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">test_request_for_names_until_all_names_are_fetched</span><span class=\"p\">(</span><span class=\"n\">mocks</span><span class=\"p\">):</span>\n    <span class=\"n\">file_storage</span> <span class=\"o\">=</span> <span class=\"n\">mocks</span><span class=\"o\">.</span><span class=\"n\">mock</span><span class=\"p\">(</span><span class=\"n\">FileStorage</span><span class=\"p\">)</span>\n    <span class=\"o\">...</span>\n</pre>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<div id=\"creating-a-mock-context\">\n<h3>Creating a mock context</h3>\n<p>Create an instance of <tt>Mocks</tt> to allow mock objects to be created.\nCall <tt>Mocks.verify()</tt> to assert that all expectations have been met.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">funk</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">test_case</span><span class=\"p\">():</span>\n    <span class=\"n\">mocks</span> <span class=\"o\">=</span> <span class=\"n\">funk</span><span class=\"o\">.</span><span class=\"n\">Mocks</span><span class=\"p\">()</span>\n    <span class=\"o\">...</span>\n    <span class=\"n\">mocks</span><span class=\"o\">.</span><span class=\"n\">verify</span><span class=\"p\">()</span>\n</pre>\n<p>Use the decorator <tt>funk.with_mocks</tt> to inject a <tt>mocks</tt> argument to a function.\n<tt>verify()</tt> will be automatically invoked at the end of the function.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">funk</span>\n\n<span class=\"nd\">@funk</span><span class=\"o\">.</span><span class=\"n\">with_mocks</span>\n<span class=\"k\">def</span> <span class=\"nf\">test_case</span><span class=\"p\">(</span><span class=\"n\">mocks</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n</pre>\n<p>If using pytest, a fixture is the simplest way to use Funk:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">funk</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pytest</span>\n\n<span class=\"nd\">@pytest</span><span class=\"o\">.</span><span class=\"n\">yield_fixture</span>\n<span class=\"k\">def</span> <span class=\"nf\">mocks</span><span class=\"p\">():</span>\n    <span class=\"n\">mocks</span> <span class=\"o\">=</span> <span class=\"n\">funk</span><span class=\"o\">.</span><span class=\"n\">Mocks</span><span class=\"p\">()</span>\n    <span class=\"k\">yield</span> <span class=\"n\">mocks</span>\n    <span class=\"n\">mocks</span><span class=\"o\">.</span><span class=\"n\">verify</span><span class=\"p\">()</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">test_case</span><span class=\"p\">(</span><span class=\"n\">mocks</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n</pre>\n</div>\n<div id=\"creating-mock-objects\">\n<h3>Creating mock objects</h3>\n<p>Call <tt>Mocks.mock()</tt> to create a mock object.</p>\n<pre><span class=\"n\">file_storage</span> <span class=\"o\">=</span> <span class=\"n\">mocks</span><span class=\"o\">.</span><span class=\"n\">mock</span><span class=\"p\">()</span>\n</pre>\n<p>If the <tt>base</tt> argument is passed,\nonly methods on that type can be mocked:</p>\n<pre><span class=\"n\">file_storage</span> <span class=\"o\">=</span> <span class=\"n\">mocks</span><span class=\"o\">.</span><span class=\"n\">mock</span><span class=\"p\">(</span><span class=\"n\">FileStorage</span><span class=\"p\">)</span>\n</pre>\n<p>This can be useful to ensure that only existing methods are mocked,\nbut should be avoided if generating methods dynamically, such as by using <tt>__getattr__</tt>.</p>\n<p>Set the <tt>name</tt> argument to set the name that should be used in assertion failure messages for the mock:</p>\n<pre><span class=\"n\">file_storage</span> <span class=\"o\">=</span> <span class=\"n\">mocks</span><span class=\"o\">.</span><span class=\"n\">mock</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"file_storage\"</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"setting-expectations\">\n<h3>Setting expectations</h3>\n<p>To set up an expectation, use <tt>funk.allows()</tt> or <tt>funk.expects()</tt>.\nFor convenience, these functions are also available on <tt>Mocks</tt>.\n<tt>funk.allows()</tt> will let the method be called any number of times, including none.\n<tt>funk.expects()</tt> will ensure that the method is called exactly once.\nFor instance:</p>\n<pre><span class=\"n\">allows</span><span class=\"p\">(</span><span class=\"n\">file_storage</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">names</span>\n</pre>\n<p>This allows the method <tt>file_storage.names</tt> to be called with any arguments\nany number of times.\nTo only allow calls with specific arguments, you can invoke <tt>.names</tt> as a method:</p>\n<pre><span class=\"n\">allows</span><span class=\"p\">(</span><span class=\"n\">file_storage</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">names</span><span class=\"p\">(</span><span class=\"n\">token</span><span class=\"o\">=</span><span class=\"s2\">\"&lt;token 1&gt;\"</span><span class=\"p\">)</span>\n</pre>\n<p>This will only allow calls with a matching <tt>token</tt> keyword argument,\nand no other arguments.</p>\n<p>You can also use matchers from <a href=\"https://pypi.python.org/pypi/precisely\" rel=\"nofollow\">Precisely</a> to match arguments:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">precisely</span> <span class=\"kn\">import</span> <span class=\"n\">instance_of</span>\n\n<span class=\"n\">allows</span><span class=\"p\">(</span><span class=\"n\">file_storage</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">names</span><span class=\"p\">(</span><span class=\"n\">token</span><span class=\"o\">=</span><span class=\"n\">instance_of</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">))</span>\n</pre>\n<p>If more than one expectation is set up on the same method,\nthe first matching expectation is used.\nIf you need to enforce methods being called in a particular order,\nuse sequences.</p>\n<div id=\"actions\">\n<h4>Actions</h4>\n<p>By default, a mocked method returns <tt>None</tt>.\nUse <tt>returns()</tt> to return a different value:</p>\n<pre><span class=\"n\">allows</span><span class=\"p\">(</span><span class=\"n\">file_storage</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">names</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">returns</span><span class=\"p\">([])</span>\n</pre>\n<p>Use <tt>raises()</tt> to raise an exception:</p>\n<pre><span class=\"n\">allows</span><span class=\"p\">(</span><span class=\"n\">file_storage</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">names</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">raises</span><span class=\"p\">(</span><span class=\"ne\">Exception</span><span class=\"p\">(</span><span class=\"s2\">\"Could not connect\"</span><span class=\"p\">))</span>\n</pre>\n</div>\n</div>\n<div id=\"sequences\">\n<h3>Sequences</h3>\n<p>A sequence object can be created using <tt>Mocks.sequence</tt>.\nThe sequencing on objects can then be defined using <tt>in_sequence(sequence)</tt> when setting expectations.\nFor instance:</p>\n<pre><span class=\"n\">file_storage</span> <span class=\"o\">=</span> <span class=\"n\">mocks</span><span class=\"o\">.</span><span class=\"n\">mock</span><span class=\"p\">(</span><span class=\"n\">FileStorage</span><span class=\"p\">)</span>\n<span class=\"n\">file_ordering</span> <span class=\"o\">=</span> <span class=\"n\">mocks</span><span class=\"o\">.</span><span class=\"n\">sequence</span><span class=\"p\">()</span>\n\n<span class=\"n\">expects</span><span class=\"p\">(</span><span class=\"n\">file_storage</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">(</span><span class=\"n\">NAME_1</span><span class=\"p\">,</span> <span class=\"n\">CONTENTS_1</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">in_sequence</span><span class=\"p\">(</span><span class=\"n\">file_ordering</span><span class=\"p\">)</span>\n<span class=\"n\">expects</span><span class=\"p\">(</span><span class=\"n\">file_storage</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">(</span><span class=\"n\">NAME_2</span><span class=\"p\">,</span> <span class=\"n\">CONTENTS_2</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">in_sequence</span><span class=\"p\">(</span><span class=\"n\">file_ordering</span><span class=\"p\">)</span>\n</pre>\n</div>\n</div>\n\n          </div>"}, "last_serial": 5552709, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "abcaa2e1cc5ac6118cc15a7522e7bea0", "sha256": "2b3dfbef8839a71f17f6263ab5d35888e9b7cf1da080a5c3babd805118eeef1a"}, "downloads": -1, "filename": "Funk-0.1.tar.gz", "has_sig": false, "md5_digest": "abcaa2e1cc5ac6118cc15a7522e7bea0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14999, "upload_time": "2009-09-28T19:34:38", "upload_time_iso_8601": "2009-09-28T19:34:38.928351Z", "url": "https://files.pythonhosted.org/packages/f7/48/d7d72ea73413b1853d46d487a3a28186d2802acf9611eccbed0029c80241/Funk-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "a3d568e400a99c2bce75ca016e1107c7", "sha256": "caf6a0f2cdcb270c1660e73a4ec686d696818d6a34cc082f995611071f81eb3b"}, "downloads": -1, "filename": "Funk-0.2.tar.gz", "has_sig": false, "md5_digest": "a3d568e400a99c2bce75ca016e1107c7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17399, "upload_time": "2009-10-19T16:48:03", "upload_time_iso_8601": "2009-10-19T16:48:03.027907Z", "url": "https://files.pythonhosted.org/packages/bc/7d/143f75faee0f39978ebfc7ae4f39649372ca91942bbffb0942ca134afae4/Funk-0.2.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "5b46bdf59253b9eb00dcab499385ffe6", "sha256": "16efab6cde81fdde698fa5518222958116e8b71a4fff2f34e0e56a9bf36b6517"}, "downloads": -1, "filename": "Funk-0.3.tar.gz", "has_sig": false, "md5_digest": "5b46bdf59253b9eb00dcab499385ffe6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22114, "upload_time": "2010-09-22T00:03:29", "upload_time_iso_8601": "2010-09-22T00:03:29.344903Z", "url": "https://files.pythonhosted.org/packages/6e/c6/94de3accff663140abbd28edfe69393359435cbdae0dc95bddfa21ba6a28/Funk-0.3.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "f0686785b7a10709025c2600dff92aa0", "sha256": "06a09e0c8ba0ce75e057a9ca487418f1cb3254db62ee0499a3d8e8ac05248fbf"}, "downloads": -1, "filename": "Funk-0.3.1.tar.gz", "has_sig": false, "md5_digest": "f0686785b7a10709025c2600dff92aa0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 220338, "upload_time": "2013-11-09T01:48:03", "upload_time_iso_8601": "2013-11-09T01:48:03.201896Z", "url": "https://files.pythonhosted.org/packages/b6/48/2253e5c5aaf71d95e7038dfc10539b83973cd6c376487ae2b340c2508a99/Funk-0.3.1.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "c8e12f5b8e0a313e7d18cd5ff5097d54", "sha256": "390581dc23a8cf16c816cf78c4958bbfee369c32ffe90917fa5f1a8ff886b0a4"}, "downloads": -1, "filename": "Funk-0.4.0.tar.gz", "has_sig": false, "md5_digest": "c8e12f5b8e0a313e7d18cd5ff5097d54", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 220012, "upload_time": "2014-01-14T22:15:51", "upload_time_iso_8601": "2014-01-14T22:15:51.566146Z", "url": "https://files.pythonhosted.org/packages/68/05/44e970041b28b8a85f1782b6ecc4dcd82fd4a31a90dc1737e4deea86d915/Funk-0.4.0.tar.gz", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "b8c94932c6fc7eaf4f27cd43fa3df6c2", "sha256": "62eeaa238b668171756e75b5bda8a02cea86e8d55c55f4d0417f52246d6f9101"}, "downloads": -1, "filename": "Funk-0.5.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "b8c94932c6fc7eaf4f27cd43fa3df6c2", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 10796, "upload_time": "2019-07-18T18:48:24", "upload_time_iso_8601": "2019-07-18T18:48:24.343034Z", "url": "https://files.pythonhosted.org/packages/b1/60/e8f3dbe06a3c858a131c6ee3ec11b7a10c313b0c2a64519d889aee8fe647/Funk-0.5.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "869335712359c1a33bc270604aabcf62", "sha256": "59e954b744dacc28785bd81abe11dd9957dc5a4774db949b573f2c3861cfe84c"}, "downloads": -1, "filename": "Funk-0.5.0.tar.gz", "has_sig": false, "md5_digest": "869335712359c1a33bc270604aabcf62", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22942, "upload_time": "2019-07-18T18:47:45", "upload_time_iso_8601": "2019-07-18T18:47:45.502874Z", "url": "https://files.pythonhosted.org/packages/8d/25/fbf23cd90e3fac6068d6dd60110108f174f9a0d9a142aa6d86d8e5a1be74/Funk-0.5.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b8c94932c6fc7eaf4f27cd43fa3df6c2", "sha256": "62eeaa238b668171756e75b5bda8a02cea86e8d55c55f4d0417f52246d6f9101"}, "downloads": -1, "filename": "Funk-0.5.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "b8c94932c6fc7eaf4f27cd43fa3df6c2", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 10796, "upload_time": "2019-07-18T18:48:24", "upload_time_iso_8601": "2019-07-18T18:48:24.343034Z", "url": "https://files.pythonhosted.org/packages/b1/60/e8f3dbe06a3c858a131c6ee3ec11b7a10c313b0c2a64519d889aee8fe647/Funk-0.5.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "869335712359c1a33bc270604aabcf62", "sha256": "59e954b744dacc28785bd81abe11dd9957dc5a4774db949b573f2c3861cfe84c"}, "downloads": -1, "filename": "Funk-0.5.0.tar.gz", "has_sig": false, "md5_digest": "869335712359c1a33bc270604aabcf62", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22942, "upload_time": "2019-07-18T18:47:45", "upload_time_iso_8601": "2019-07-18T18:47:45.502874Z", "url": "https://files.pythonhosted.org/packages/8d/25/fbf23cd90e3fac6068d6dd60110108f174f9a0d9a142aa6d86d8e5a1be74/Funk-0.5.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:59:39 2020"}