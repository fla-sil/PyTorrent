{"info": {"author": "Gary Wilson Jr.", "author_email": "gary@thegarywilson.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "Intended Audience :: System Administrators", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.2", "Topic :: System :: Archiving", "Topic :: System :: Software Distribution"], "description": "==============\npython-archive\n==============\n\nThis package provides a simple, pure-Python interface for handling various\narchive file formats.  Currently, archive extraction is the only supported\naction.  Supported file formats include:\n\n* Zip formats and equivalents: ``.zip``, ``.egg``, ``.jar``.\n* Tar and compressed tar formats: ``.tar``, ``.tar.gz``, ``.tgz``,\n  ``.tar.bz2``, ``.tz2``.\n\npython-archive is compatible and tested with Python versions 2.5, 2.6,\nand 3.2.\n\n\nExample usage\n=============\n\nUsing the ``Archive`` class::\n\n    from archive import Archive\n\n    a = Archive('files.tar.gz')\n    a.extract()\n\nUsing the ``extract`` convenience function::\n\n    from archive import extract\n    # Extract in current directory.\n    extract('files.tar.gz')\n    # Extract in directory 'unpack_dir'.\n    extract('files.tar.gz', 'unpack_dir')\n\nBy default, an ``archive.UnsafeArchive`` exception will be raised if any\nfile(s) in the archive would be unpacked outside of the target directory\n(e.g. the archive contains absolute paths or relative paths that navigate up\nand out of the target directory).  If you can trust the source of your archive\nfiles, then it's possible to override this behavior, e.g.::\n\n    extract('files.tar.gz', method='insecure')\n\n\nMore examples\n-------------\nPassing a file-like object is also supported::\n\n    f = open('files.tar.gz', 'rb')\n    Archive(f).extract()\n\nIf a file does not have the correct extension, or is not recognized correctly,\nyou may try explicitly specifying an extension (with leading period)::\n\n    Archive('files.wrongext', ext='.tar.gz').extract()\n    # or\n    extract('files.wrongext', ext='.tar.gz')\n\n\nSimilar tools\n=============\n\n* http://pypi.python.org/pypi/patool/ - portable command line archive file\n  manager.\n* http://pypi.python.org/pypi/gocept.download/ - zc.buildout recipe for\n  downloading and extracting an archive.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/gdub/python-archive", "keywords": null, "license": "MIT License", "maintainer": null, "maintainer_email": null, "name": "python-archive", "package_url": "https://pypi.org/project/python-archive/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/python-archive/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/gdub/python-archive"}, "release_url": "https://pypi.org/project/python-archive/0.2/", "requires_dist": null, "requires_python": null, "summary": "Simple library that provides a common interface for extracting zip and tar archives.", "version": "0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>This package provides a simple, pure-Python interface for handling various\narchive file formats.  Currently, archive extraction is the only supported\naction.  Supported file formats include:</p>\n<ul>\n<li>Zip formats and equivalents: <tt>.zip</tt>, <tt>.egg</tt>, <tt>.jar</tt>.</li>\n<li>Tar and compressed tar formats: <tt>.tar</tt>, <tt>.tar.gz</tt>, <tt>.tgz</tt>,\n<tt>.tar.bz2</tt>, <tt>.tz2</tt>.</li>\n</ul>\n<p>python-archive is compatible and tested with Python versions 2.5, 2.6,\nand 3.2.</p>\n<div id=\"example-usage\">\n<h2>Example usage</h2>\n<p>Using the <tt>Archive</tt> class:</p>\n<pre>from archive import Archive\n\na = Archive('files.tar.gz')\na.extract()\n</pre>\n<p>Using the <tt>extract</tt> convenience function:</p>\n<pre>from archive import extract\n# Extract in current directory.\nextract('files.tar.gz')\n# Extract in directory 'unpack_dir'.\nextract('files.tar.gz', 'unpack_dir')\n</pre>\n<p>By default, an <tt>archive.UnsafeArchive</tt> exception will be raised if any\nfile(s) in the archive would be unpacked outside of the target directory\n(e.g. the archive contains absolute paths or relative paths that navigate up\nand out of the target directory).  If you can trust the source of your archive\nfiles, then it\u2019s possible to override this behavior, e.g.:</p>\n<pre>extract('files.tar.gz', method='insecure')\n</pre>\n<div id=\"more-examples\">\n<h3>More examples</h3>\n<p>Passing a file-like object is also supported:</p>\n<pre>f = open('files.tar.gz', 'rb')\nArchive(f).extract()\n</pre>\n<p>If a file does not have the correct extension, or is not recognized correctly,\nyou may try explicitly specifying an extension (with leading period):</p>\n<pre>Archive('files.wrongext', ext='.tar.gz').extract()\n# or\nextract('files.wrongext', ext='.tar.gz')\n</pre>\n</div>\n</div>\n<div id=\"similar-tools\">\n<h2>Similar tools</h2>\n<ul>\n<li><a href=\"http://pypi.python.org/pypi/patool/\" rel=\"nofollow\">http://pypi.python.org/pypi/patool/</a> - portable command line archive file\nmanager.</li>\n<li><a href=\"http://pypi.python.org/pypi/gocept.download/\" rel=\"nofollow\">http://pypi.python.org/pypi/gocept.download/</a> - zc.buildout recipe for\ndownloading and extracting an archive.</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 761361, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "38a4dff72f39a34a443196057a8fdc3d", "sha256": "2dfa7a46a932dfa853a7371b764fefd069c926c8fa05eb020ddcef8451c2a8ce"}, "downloads": -1, "filename": "python-archive-0.1.tar.gz", "has_sig": false, "md5_digest": "38a4dff72f39a34a443196057a8fdc3d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5538, "upload_time": "2010-07-27T07:08:36", "upload_time_iso_8601": "2010-07-27T07:08:36.485111Z", "url": "https://files.pythonhosted.org/packages/24/09/4af5c921f0275abdaca47aa5394d4fc3b53f99c2b173e89c8bb6225e0538/python-archive-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "d2abf4c71fd28817b0a5d27ff874470d", "sha256": "0f19c7bdd39a5f09ef86e56c5b2d5beb4a0635292639ee869a2b25bd9a2f1161"}, "downloads": -1, "filename": "python-archive-0.2.tar.gz", "has_sig": false, "md5_digest": "d2abf4c71fd28817b0a5d27ff874470d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9176, "upload_time": "2012-07-12T08:40:54", "upload_time_iso_8601": "2012-07-12T08:40:54.789453Z", "url": "https://files.pythonhosted.org/packages/4b/17/560776b5c88c0c665b54db9d076e7334b70fee5100a1bb52b18b92f9e123/python-archive-0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d2abf4c71fd28817b0a5d27ff874470d", "sha256": "0f19c7bdd39a5f09ef86e56c5b2d5beb4a0635292639ee869a2b25bd9a2f1161"}, "downloads": -1, "filename": "python-archive-0.2.tar.gz", "has_sig": false, "md5_digest": "d2abf4c71fd28817b0a5d27ff874470d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9176, "upload_time": "2012-07-12T08:40:54", "upload_time_iso_8601": "2012-07-12T08:40:54.789453Z", "url": "https://files.pythonhosted.org/packages/4b/17/560776b5c88c0c665b54db9d076e7334b70fee5100a1bb52b18b92f9e123/python-archive-0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:54:16 2020"}