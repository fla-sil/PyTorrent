{"info": {"author": "Canary Health Inc", "author_email": "oss@canary.md", "bugtrack_url": null, "classifiers": ["Development Status :: 1 - Planning", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "License :: Public Domain", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python"], "description": "=============\nPyramid Nitro\n=============\n\n.. IMPORTANT::\n\n  This package is currently in the \"planning\" stage. In short, much of\n  the conceptual parts of the package exist in disparate locations:\n  this package was created to bring those concepts together.\n\n\nThe `pyramid_nitro` package adds dependencies, useful libraries,\nsensible default configurations, \"glue code\", and other goodies to a\n\"standard pyramid application\" that makes developing pyramid\napplications fast... *super* fast. In short, it's the \"batteries\nincluded\" *opinionated* version of Pyramid_. It draws it's inspiration\nfrom the TurboGears_ application framework.\n\n\nProject\n=======\n\n* Homepage: https://github.com/canaryhealth/pyramid_nitro\n* Bugs: https://github.com/canaryhealth/pyramid_nitro/issues\n\n\nTL;DR\n=====\n\n.. code-block:: bash\n\n  $ pip install pyramid_nitro\n  $ nitro \"myapp\" /path/to/myapp\n  $ cd /path/to/myapp\n  $ nitro etc/dev.ini\n  Starting subprocess with file monitor\n  completed configuration of myapp/0.1.0-b [env=dev]\n  Starting server in PID 18330.\n  serving on http://0.0.0.0:9000\n\n\nOverview\n========\n\nThe objectives of `pyramid_nitro` are three-fold:\n\n* Trivial to get a completely functional application going\n* Lots of out-of-the-box functionality, but nothing that can't be disabled\n* Support for infinite scalability when needed\n\nSome of the opinions made to achieve that is that you'll:\n\n* expose and document API endpoints with pyramid_controllers_ and pyramid_describe_\n* parse and serialize HTTP requests with pyramid_input_ and pyramid_output_\n* validate and sanitize data formats with pyramid_armor_\n* authenticate requests with SAML or models with (TODO: to be determined)\n* perform access control with pyramid_authz_\n* paginate response datasets with pyramid_pagination_\n* use SQLAlchemy_ for your ORM model\n* store ORM data in PostgreSQL_ and big data in MongoDB_\n* send message bus events over RabbitMQ_\n* schedule asynchronous and deferred jobs with pyramid_scheduler_\n* manage configurations with pyramid_iniherit_\n* generate JavaScript, CSS, and images with pyramid_webassets_, lessc_\n* enable sessions and caching with pyramid_beaker_\n* encrypt data with GPG keys\n* thoroughly implement unit/integration/system tests with pyramid_test_\n* think globally but act locally with i18n\n* use Apache_ to infinity-scale your server\n* depend on microservices, such as:\n\n  * indexing and searching with Solr_\n  * URL-shortening with pyramid_tinyurl_\n\n\n\n\n.. _Pyramid: http://www.pylonsproject.org/\n.. _TurboGears: http://www.turbogears.org/\n.. _pyramid_controllers: https://pypi.python.org/pypi/\n.. _pyramid_describe: https://pypi.python.org/pypi/pyramid_describe\n.. _pyramid_input: https://pypi.python.org/pypi/pyramid_input\n.. _pyramid_output: https://pypi.python.org/pypi/pyramid_output\n.. _pyramid_armor: https://pypi.python.org/pypi/pyramid_armor\n.. _pyramid_authz: https://pypi.python.org/pypi/pyramid_authz\n.. _pyramid_pagination: https://pypi.python.org/pypi/pyramid_pagination\n.. _pyramid_scheduler: https://pypi.python.org/pypi/pyramid_scheduler\n.. _pyramid_iniherit: https://pypi.python.org/pypi/pyramid_iniherit\n.. _pyramid_webassets: https://pypi.python.org/pypi/pyramid_webassets\n.. _pyramid_tinyurl: https://pypi.python.org/pypi/pyramid_tinyurl\n.. _pyramid_test: https://pypi.python.org/pypi/pyramid_test\n.. _lessc: https://pypi.python.org/pypi/lessc\n.. _pyramid_beaker: https://pypi.python.org/pypi/pyramid_beaker\n.. _SQLAlchemy: http://www.sqlalchemy.org/\n.. _PostgreSQL: https://www.postgresql.org/\n.. _MongoDB: https://www.mongodb.org/\n.. _RabbitMQ: https://www.rabbitmq.com/\n.. _Apache: https://httpd.apache.org/\n.. _Solr: https://lucene.apache.org/solr/", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/canaryhealth/pyramid_nitro", "keywords": "pyramid application turbo nitro velocity", "license": "MIT (http://opensource.org/licenses/MIT)", "maintainer": null, "maintainer_email": null, "name": "pyramid_nitro", "package_url": "https://pypi.org/project/pyramid_nitro/", "platform": "any", "project_url": "https://pypi.org/project/pyramid_nitro/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://github.com/canaryhealth/pyramid_nitro"}, "release_url": "https://pypi.org/project/pyramid_nitro/0.0.1/", "requires_dist": null, "requires_python": null, "summary": "The \"Batteries Included\" layer for a Pyramid application.", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div>\n<p>Important</p>\n<p>This package is currently in the \u201cplanning\u201d stage. In short, much of\nthe conceptual parts of the package exist in disparate locations:\nthis package was created to bring those concepts together.</p>\n</div>\n<p>The <cite>pyramid_nitro</cite> package adds dependencies, useful libraries,\nsensible default configurations, \u201cglue code\u201d, and other goodies to a\n\u201cstandard pyramid application\u201d that makes developing pyramid\napplications fast\u2026 <em>super</em> fast. In short, it\u2019s the \u201cbatteries\nincluded\u201d <em>opinionated</em> version of <a href=\"http://www.pylonsproject.org/\" rel=\"nofollow\">Pyramid</a>. It draws it\u2019s inspiration\nfrom the <a href=\"http://www.turbogears.org/\" rel=\"nofollow\">TurboGears</a> application framework.</p>\n<div id=\"project\">\n<h2>Project</h2>\n<ul>\n<li>Homepage: <a href=\"https://github.com/canaryhealth/pyramid_nitro\" rel=\"nofollow\">https://github.com/canaryhealth/pyramid_nitro</a></li>\n<li>Bugs: <a href=\"https://github.com/canaryhealth/pyramid_nitro/issues\" rel=\"nofollow\">https://github.com/canaryhealth/pyramid_nitro/issues</a></li>\n</ul>\n</div>\n<div id=\"tl-dr\">\n<h2>TL;DR</h2>\n<pre>$ pip install pyramid_nitro\n$ nitro <span class=\"s2\">\"myapp\"</span> /path/to/myapp\n$ <span class=\"nb\">cd</span> /path/to/myapp\n$ nitro etc/dev.ini\nStarting subprocess with file monitor\ncompleted configuration of myapp/0.1.0-b <span class=\"o\">[</span><span class=\"nv\">env</span><span class=\"o\">=</span>dev<span class=\"o\">]</span>\nStarting server in PID <span class=\"m\">18330</span>.\nserving on http://0.0.0.0:9000\n</pre>\n</div>\n<div id=\"overview\">\n<h2>Overview</h2>\n<p>The objectives of <cite>pyramid_nitro</cite> are three-fold:</p>\n<ul>\n<li>Trivial to get a completely functional application going</li>\n<li>Lots of out-of-the-box functionality, but nothing that can\u2019t be disabled</li>\n<li>Support for infinite scalability when needed</li>\n</ul>\n<p>Some of the opinions made to achieve that is that you\u2019ll:</p>\n<ul>\n<li>expose and document API endpoints with <a href=\"https://pypi.python.org/pypi/\" rel=\"nofollow\">pyramid_controllers</a> and <a href=\"https://pypi.python.org/pypi/pyramid_describe\" rel=\"nofollow\">pyramid_describe</a></li>\n<li>parse and serialize HTTP requests with <a href=\"https://pypi.python.org/pypi/pyramid_input\" rel=\"nofollow\">pyramid_input</a> and <a href=\"https://pypi.python.org/pypi/pyramid_output\" rel=\"nofollow\">pyramid_output</a></li>\n<li>validate and sanitize data formats with <a href=\"https://pypi.python.org/pypi/pyramid_armor\" rel=\"nofollow\">pyramid_armor</a></li>\n<li>authenticate requests with SAML or models with (TODO: to be determined)</li>\n<li>perform access control with <a href=\"https://pypi.python.org/pypi/pyramid_authz\" rel=\"nofollow\">pyramid_authz</a></li>\n<li>paginate response datasets with <a href=\"https://pypi.python.org/pypi/pyramid_pagination\" rel=\"nofollow\">pyramid_pagination</a></li>\n<li>use <a href=\"http://www.sqlalchemy.org/\" rel=\"nofollow\">SQLAlchemy</a> for your ORM model</li>\n<li>store ORM data in <a href=\"https://www.postgresql.org/\" rel=\"nofollow\">PostgreSQL</a> and big data in <a href=\"https://www.mongodb.org/\" rel=\"nofollow\">MongoDB</a></li>\n<li>send message bus events over <a href=\"https://www.rabbitmq.com/\" rel=\"nofollow\">RabbitMQ</a></li>\n<li>schedule asynchronous and deferred jobs with <a href=\"https://pypi.python.org/pypi/pyramid_scheduler\" rel=\"nofollow\">pyramid_scheduler</a></li>\n<li>manage configurations with <a href=\"https://pypi.python.org/pypi/pyramid_iniherit\" rel=\"nofollow\">pyramid_iniherit</a></li>\n<li>generate JavaScript, CSS, and images with <a href=\"https://pypi.python.org/pypi/pyramid_webassets\" rel=\"nofollow\">pyramid_webassets</a>, <a href=\"https://pypi.python.org/pypi/lessc\" rel=\"nofollow\">lessc</a></li>\n<li>enable sessions and caching with <a href=\"https://pypi.python.org/pypi/pyramid_beaker\" rel=\"nofollow\">pyramid_beaker</a></li>\n<li>encrypt data with GPG keys</li>\n<li>thoroughly implement unit/integration/system tests with <a href=\"https://pypi.python.org/pypi/pyramid_test\" rel=\"nofollow\">pyramid_test</a></li>\n<li>think globally but act locally with i18n</li>\n<li>use <a href=\"https://httpd.apache.org/\" rel=\"nofollow\">Apache</a> to infinity-scale your server</li>\n<li>depend on microservices, such as:<ul>\n<li>indexing and searching with <a href=\"https://lucene.apache.org/solr/\" rel=\"nofollow\">Solr</a></li>\n<li>URL-shortening with <a href=\"https://pypi.python.org/pypi/pyramid_tinyurl\" rel=\"nofollow\">pyramid_tinyurl</a></li>\n</ul>\n</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 2243056, "releases": {"0.0.1": []}, "urls": [], "timestamp": "Fri May  8 02:58:22 2020"}