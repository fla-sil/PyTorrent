{"info": {"author": "Taoufik Abbassid", "author_email": "abacidtaoufik@gmail.com", "bugtrack_url": null, "classifiers": ["Environment :: Web Environment", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": "# \u2b50 Nejma \u2b50\n\n\nNejma \u2b50 allows you to manage multiple realtime connections and send messages to groups or a user multiple tabs...\n\n\nTake a look at this example `nejma-chat`, a simple chat application built using `nejma` and `starlette`.\n\n\n## Installation\n\n```shell\n$ pip install nejma\n```\n\n## Getting started \n\nHere's an example of using `nejma` with websockets.\n\nFirst import Channel and channel_layer from nejma\n\n```python\nfrom nejma import Channel, channel_layer\n```\n\nCreate a channel on connect\n\n```python\nasync def on_connect(self, websocket, **kwargs):\n    await super().on_connect(websocket, **kwargs)\n\n    self.channel = Channel(send=websocket.send)\n\n```\n\nAdd groups, channels or send messages   \n\n```python\n    async def on_receive(self, websocket, data):\n    \t# Adds a channel to a giving group\n        self.channel_layer.add(group, self.channel)\n\n        # Removes a channel from a given group\n        self.channel_layer.remove(group, self.channel)\n\n        # Removes a channel from all the groups\n        self.channel_layer.remove_channel(self.channel)\n\n        # Reset all the groups\n        self.channel_layer.flush()\n\n        await self.channel_layer.group_send(group, \"Welcome !\")\n```\n\nFinnaly, remove the channel once the connection is closed \n\n```python\n    async def on_disconnect(self, websocket, close_code):\n        self.channel_layer.remove_channel(self.channel)\n```\n\n\n### Starlette\n---\n\nTo use `nejma` with `starlette`, simply import the WebSocketEndpoint from nejma\n\n```python\nfrom channels.ext.starlette import WebSocketEndpoint\n\n@app.websocket_route(\"/ws\")\nclass Chat(WebSocketEndpoint):\n    encoding = \"json\"\n\n    async def on_receive(self, websocket, data):\n        room_id = data['room_id']\n        message = data['message']\n        username = data['username']\n\n        if message.strip():\n            group = f\"group_{room_id}\"\n\n            self.channel_layer.add(group, self.channel)\n\n            payload = {\n                \"username\": username,\n                \"message\": message,\n                \"room_id\": room_id\n            }\n            await self.channel_layer.group_send(group, payload)\n```\n\n## Docs\n\nThe `ChannelLayer` class provided by `nejma` exposes the following methods :\n\n`add(group, channel)`\n\nAdds a channel to a giving group.\n\n```python\n\tself.channel_layer.add(group, self.channel)\n```\n\n`remove(group, channel)`\nRemoves a channel from a given group\n```python\nself.channel_layer.remove(group, self.channel)\n```\n\n`remove_channel(channel)`\nRemoves a channel from all the groups\n```python\nself.channel_layer.remove_channel(self.channel)\n```\n\n`flush()`\nReset all the groups\n```python\nself.channel_layer.flush()\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/taoufik07/nejma", "keywords": "", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "nejma", "package_url": "https://pypi.org/project/nejma/", "platform": "", "project_url": "https://pypi.org/project/nejma/", "project_urls": {"Homepage": "https://github.com/taoufik07/nejma"}, "release_url": "https://pypi.org/project/nejma/0.1.0/", "requires_dist": null, "requires_python": ">=3.6", "summary": "Talk realtime with groups", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>\u2b50 Nejma \u2b50</h1>\n<p>Nejma \u2b50 allows you to manage multiple realtime connections and send messages to groups or a user multiple tabs...</p>\n<p>Take a look at this example <code>nejma-chat</code>, a simple chat application built using <code>nejma</code> and <code>starlette</code>.</p>\n<h2>Installation</h2>\n<pre>$ pip install nejma\n</pre>\n<h2>Getting started</h2>\n<p>Here's an example of using <code>nejma</code> with websockets.</p>\n<p>First import Channel and channel_layer from nejma</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">nejma</span> <span class=\"kn\">import</span> <span class=\"n\">Channel</span><span class=\"p\">,</span> <span class=\"n\">channel_layer</span>\n</pre>\n<p>Create a channel on connect</p>\n<pre><span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">on_connect</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">websocket</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"k\">await</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">on_connect</span><span class=\"p\">(</span><span class=\"n\">websocket</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n\n    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">channel</span> <span class=\"o\">=</span> <span class=\"n\">Channel</span><span class=\"p\">(</span><span class=\"n\">send</span><span class=\"o\">=</span><span class=\"n\">websocket</span><span class=\"o\">.</span><span class=\"n\">send</span><span class=\"p\">)</span>\n</pre>\n<p>Add groups, channels or send messages</p>\n<pre>    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">on_receive</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">websocket</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">):</span>\n    \t<span class=\"c1\"># Adds a channel to a giving group</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">channel_layer</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">group</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">channel</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Removes a channel from a given group</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">channel_layer</span><span class=\"o\">.</span><span class=\"n\">remove</span><span class=\"p\">(</span><span class=\"n\">group</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">channel</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Removes a channel from all the groups</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">channel_layer</span><span class=\"o\">.</span><span class=\"n\">remove_channel</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">channel</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Reset all the groups</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">channel_layer</span><span class=\"o\">.</span><span class=\"n\">flush</span><span class=\"p\">()</span>\n\n        <span class=\"k\">await</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">channel_layer</span><span class=\"o\">.</span><span class=\"n\">group_send</span><span class=\"p\">(</span><span class=\"n\">group</span><span class=\"p\">,</span> <span class=\"s2\">\"Welcome !\"</span><span class=\"p\">)</span>\n</pre>\n<p>Finnaly, remove the channel once the connection is closed</p>\n<pre>    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">on_disconnect</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">websocket</span><span class=\"p\">,</span> <span class=\"n\">close_code</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">channel_layer</span><span class=\"o\">.</span><span class=\"n\">remove_channel</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">channel</span><span class=\"p\">)</span>\n</pre>\n<h3>Starlette</h3>\n<hr>\n<p>To use <code>nejma</code> with <code>starlette</code>, simply import the WebSocketEndpoint from nejma</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">channels.ext.starlette</span> <span class=\"kn\">import</span> <span class=\"n\">WebSocketEndpoint</span>\n\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">websocket_route</span><span class=\"p\">(</span><span class=\"s2\">\"/ws\"</span><span class=\"p\">)</span>\n<span class=\"k\">class</span> <span class=\"nc\">Chat</span><span class=\"p\">(</span><span class=\"n\">WebSocketEndpoint</span><span class=\"p\">):</span>\n    <span class=\"n\">encoding</span> <span class=\"o\">=</span> <span class=\"s2\">\"json\"</span>\n\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">on_receive</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">websocket</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">):</span>\n        <span class=\"n\">room_id</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s1\">'room_id'</span><span class=\"p\">]</span>\n        <span class=\"n\">message</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s1\">'message'</span><span class=\"p\">]</span>\n        <span class=\"n\">username</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s1\">'username'</span><span class=\"p\">]</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">message</span><span class=\"o\">.</span><span class=\"n\">strip</span><span class=\"p\">():</span>\n            <span class=\"n\">group</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"s2\">\"group_</span><span class=\"si\">{</span><span class=\"n\">room_id</span><span class=\"si\">}</span><span class=\"s2\">\"</span>\n\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">channel_layer</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">group</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">channel</span><span class=\"p\">)</span>\n\n            <span class=\"n\">payload</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n                <span class=\"s2\">\"username\"</span><span class=\"p\">:</span> <span class=\"n\">username</span><span class=\"p\">,</span>\n                <span class=\"s2\">\"message\"</span><span class=\"p\">:</span> <span class=\"n\">message</span><span class=\"p\">,</span>\n                <span class=\"s2\">\"room_id\"</span><span class=\"p\">:</span> <span class=\"n\">room_id</span>\n            <span class=\"p\">}</span>\n            <span class=\"k\">await</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">channel_layer</span><span class=\"o\">.</span><span class=\"n\">group_send</span><span class=\"p\">(</span><span class=\"n\">group</span><span class=\"p\">,</span> <span class=\"n\">payload</span><span class=\"p\">)</span>\n</pre>\n<h2>Docs</h2>\n<p>The <code>ChannelLayer</code> class provided by <code>nejma</code> exposes the following methods :</p>\n<p><code>add(group, channel)</code></p>\n<p>Adds a channel to a giving group.</p>\n<pre>\t<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">channel_layer</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">group</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">channel</span><span class=\"p\">)</span>\n</pre>\n<p><code>remove(group, channel)</code>\nRemoves a channel from a given group</p>\n<pre><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">channel_layer</span><span class=\"o\">.</span><span class=\"n\">remove</span><span class=\"p\">(</span><span class=\"n\">group</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">channel</span><span class=\"p\">)</span>\n</pre>\n<p><code>remove_channel(channel)</code>\nRemoves a channel from all the groups</p>\n<pre><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">channel_layer</span><span class=\"o\">.</span><span class=\"n\">remove_channel</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">channel</span><span class=\"p\">)</span>\n</pre>\n<p><code>flush()</code>\nReset all the groups</p>\n<pre><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">channel_layer</span><span class=\"o\">.</span><span class=\"n\">flush</span><span class=\"p\">()</span>\n</pre>\n\n          </div>"}, "last_serial": 4805623, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "aa7e23f8cbd53ae3cb4daf53f8e72fce", "sha256": "4553ad7fd79282325ba5f0ccc8ac980809dc32bbea420a7c1a37ef0c34161c9e"}, "downloads": -1, "filename": "nejma-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "aa7e23f8cbd53ae3cb4daf53f8e72fce", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 5108, "upload_time": "2019-02-11T11:56:51", "upload_time_iso_8601": "2019-02-11T11:56:51.145356Z", "url": "https://files.pythonhosted.org/packages/4c/a5/044bdc4d0fe562ef76c915c4d745b8913a88348847702c86a8a43bbeabe0/nejma-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "70927e1e378257b68f3d242a0ad4bdd5", "sha256": "21700901af1eac11ff04854c3cefb8ef1f7d6abd831c89347a1a326bb1deac9b"}, "downloads": -1, "filename": "nejma-0.1.0.tar.gz", "has_sig": false, "md5_digest": "70927e1e378257b68f3d242a0ad4bdd5", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 3274, "upload_time": "2019-02-11T11:56:53", "upload_time_iso_8601": "2019-02-11T11:56:53.121135Z", "url": "https://files.pythonhosted.org/packages/bf/85/c0a72b6c944b6349968575dd0fdcd602047ca105f171872156a4068febae/nejma-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "aa7e23f8cbd53ae3cb4daf53f8e72fce", "sha256": "4553ad7fd79282325ba5f0ccc8ac980809dc32bbea420a7c1a37ef0c34161c9e"}, "downloads": -1, "filename": "nejma-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "aa7e23f8cbd53ae3cb4daf53f8e72fce", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 5108, "upload_time": "2019-02-11T11:56:51", "upload_time_iso_8601": "2019-02-11T11:56:51.145356Z", "url": "https://files.pythonhosted.org/packages/4c/a5/044bdc4d0fe562ef76c915c4d745b8913a88348847702c86a8a43bbeabe0/nejma-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "70927e1e378257b68f3d242a0ad4bdd5", "sha256": "21700901af1eac11ff04854c3cefb8ef1f7d6abd831c89347a1a326bb1deac9b"}, "downloads": -1, "filename": "nejma-0.1.0.tar.gz", "has_sig": false, "md5_digest": "70927e1e378257b68f3d242a0ad4bdd5", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 3274, "upload_time": "2019-02-11T11:56:53", "upload_time_iso_8601": "2019-02-11T11:56:53.121135Z", "url": "https://files.pythonhosted.org/packages/bf/85/c0a72b6c944b6349968575dd0fdcd602047ca105f171872156a4068febae/nejma-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:46:34 2020"}