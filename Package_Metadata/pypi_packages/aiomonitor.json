{"info": {"author": "Nikolay Novik", "author_email": "nickolainovik@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Framework :: AsyncIO", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: POSIX", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6"], "description": "aiomonitor\n==========\n.. image:: https://travis-ci.com/aio-libs/aiomonitor.svg?branch=master\n    :target: https://travis-ci.com/aio-libs/aiomonitor\n.. image:: https://codecov.io/gh/aio-libs/aiomonitor/branch/master/graph/badge.svg\n    :target: https://codecov.io/gh/aio-libs/aiomonitor\n.. image:: https://api.codeclimate.com/v1/badges/d14af4cfb0c4ff52b1ef/maintainability\n   :target: https://codeclimate.com/github/aio-libs/aiomonitor/maintainability\n   :alt: Maintainability\n.. image:: https://img.shields.io/pypi/v/aiomonitor.svg\n    :target: https://pypi.python.org/pypi/aiomonitor\n.. image:: https://readthedocs.org/projects/aiomonitor/badge/?version=latest\n    :target: http://aiomonitor.readthedocs.io/en/latest/?badge=latest\n    :alt: Documentation Status\n.. image:: https://badges.gitter.im/Join%20Chat.svg\n    :target: https://gitter.im/aio-libs/Lobby\n    :alt: Chat on Gitter\n\n**aiomonitor** is Python 3.5+ module that adds monitor and cli capabilities\nfor asyncio_ application. Idea and code borrowed from curio_ project.\nTask monitor that runs concurrently to the asyncio_ loop (or fast drop in\nreplacement uvloop_) in a separate thread as result monitor will work even if\nevent loop is blocked for some reason.\n\nLibrary provides an python console using aioconsole_ module, it is possible\nto execute asynchronous command inside your running application. Extensible\nwith you own commands, in the style of the standard library's cmd_ module\n\n+--------------------------------------------------------------------------------------+\n| .. image:: https://raw.githubusercontent.com/aio-libs/aiomonitor/master/docs/tty.gif |\n+--------------------------------------------------------------------------------------+\n\nInstallation\n------------\nInstallation process is simple, just::\n\n    $ pip install aiomonitor\n\n\nExample\n-------\nMonitor has context manager interface:\n\n.. code:: python\n\n    import aiomonitor\n\n    loop = asyncio.get_event_loop()\n    with aiomonitor.start_monitor(loop=loop):\n        loop.run_forever()\n\nNow from separate terminal it is possible to connect to the application::\n\n    $ nc localhost 50101\n\nor using included python client::\n\n    $ python -m aiomonitor.cli\n\nTutorial\n--------\n\nLets create simple aiohttp_ application, and see how ``aiomonitor`` can\nintegrates with it.\n\n.. code:: python\n\n    import asyncio\n\n    import aiomonitor\n    from aiohttp import web\n\n    # Simple handler that returns response after 100s\n    async def simple(request):\n        loop = request.app.loop\n\n        print('Start sleeping')\n        await asyncio.sleep(100, loop=loop)\n        return web.Response(text=\"Simple answer\")\n\n    loop = asyncio.get_event_loop()\n    # create application and register route\n    app = web.Application(loop=loop)\n    app.router.add_get('/simple', simple)\n\n    # it is possible to pass dictionary with local variables\n    # to the python console environment\n    host, port = \"localhost\", 8090\n    locals_ = {\"port\": port, \"host\": host}\n    # init monitor just before run_app\n    with aiomonitor.start_monitor(loop=loop, locals=locals_):\n        # run application with built in aiohttp run_app function\n        web.run_app(app, port=port, host=host)\n\nLets save this code in file ``simple_srv.py``, so we can run it with command::\n\n    $ python simple_srv.py\n    ======== Running on http://localhost:8090 ========\n    (Press CTRL+C to quit)\n\nAnd now one can connect running application from separate terminal, with\n``nc`` command, immediately ``aiomonitor`` will respond with prompt::\n\n    $ nc localhost 50101\n    Asyncio Monitor: 1 tasks running\n    Type help for commands\n    monitor >>>\n\nNow you can type commands, for instance ``help``::\n\n    monitor >>> help\n    Commands:\n                 ps               : Show task table\n                 where taskid     : Show stack frames for a task\n                 cancel taskid    : Cancel an indicated task\n                 signal signame   : Send a Unix signal\n                 stacktrace       : Print a stack trace from the event loop thread\n                 console          : Switch to async Python REPL\n                 quit             : Leave the monitor\n\n``aiomonitor`` supports also async python console inside running event loop\nso you can explore state of your application::\n\n    monitor >>> console\n    Python 3.5.2 (default, Oct 11 2016, 05:05:28)\n    [GCC 4.2.1 Compatible Apple LLVM 8.0.0 (clang-800.0.38)] on darwin\n    Type \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n    ---\n    This console is running in an asyncio event loop.\n    It allows you to wait for coroutines using the 'await' syntax.\n    Try: await asyncio.sleep(1, result=3, loop=loop)\n    ---\n    >>> await asyncio.sleep(1, result=3, loop=loop)\n\nTo leave console type ``exit()``::\n\n    >>> exit()\n    monitor >>>\n\n\n``aiomonitor`` is very easy to extend with your own console commands.\n\n.. code:: python\n\n   class WebMonitor(aiomonitor.Monitor):\n       def do_hello(self, sin, sout, name=None):\n           \"\"\"Using the /hello GET interface\n\n           There is one optional argument, \"name\".  This name argument must be\n           provided with proper URL excape codes, like %20 for spaces.\n           \"\"\"\n           name = '' if name is None else '/' + name\n           r = requests.get('http://localhost:8090/hello' + name)\n           sout.write(r.text + '\\n')\n\n\nRequirements\n------------\n\n* Python_ 3.5+\n* aioconsole_\n* uvloop_ (optional)\n\n\n.. _PEP492: https://www.python.org/dev/peps/pep-0492/\n.. _Python: https://www.python.org\n.. _aioconsole: https://github.com/vxgmichel/aioconsole\n.. _aiohttp: https://github.com/KeepSafe/aiohttp\n.. _asyncio: http://docs.python.org/3.5/library/asyncio.html\n.. _curio: https://github.com/dabeaz/curio\n.. _uvloop: https://github.com/MagicStack/uvloop\n.. _cmd: http://docs.python.org/3/library/cmd.html\n\nCHANGES\n=======\n\n0.4.5 (2019-11-03)\n------------------\n\n* Fixed endless loop on EOF (thanks @apatrushev)\n\n\n0.4.4 (2019-03-23)\n------------------\n\n* Simplified python console start end #175\n\n* Added python 3.7 compatibility #176\n\n\n0.4.3 (2019-02-02)\n------------------\n\n* Reworked console server start/close logic #169\n\n\n0.4.2 (2019-01-13)\n------------------\n\n* Fixed issue with type annotations from 0.4.1 release #164\n\n\n0.4.1 (2019-01-10)\n------------------\n\n* Fixed Python 3.5 support #161 (thanks @bmerry)\n\n\n0.4.0 (2019-01-04)\n------------------\n\n* Added support for custom commands #133 (thanks @yggdr)\n\n* Fixed OptLocals being passed as the default value for \"locals\" #122 (thanks @agronholm)\n\n* Added an API inspired by the standard library's cmd module #135 (thanks @yggdr)\n\n* Correctly report the port running aioconsole #124 (thanks @bmerry)\n\n\n0.3.1 (2018-07-03)\n------------------\n\n* Added the stacktrace command #120 (thanks @agronholm)\n\n\n0.3.0 (2017-09-08)\n------------------\n\n* Added _locals_ parameter for passing environment to python REPL\n\n\n0.2.1 (2016-01-03)\n------------------\n\n* Fixed import in telnet cli in #12 (thanks @hellysmile)\n\n\n0.2.0 (2016-01-01)\n------------------\n\n* Added basic documentation\n\n* Most of methods of Monitor class are not not private api\n\n\n0.1.0 (2016-12-14)\n------------------\n\n* Added missed LICENSE file\n\n* Updated API, added start_monitor() function\n\n\n0.0.3 (2016-12-11)\n------------------\n\n* Fixed README.rst\n\n\n0.0.2 (2016-12-11)\n------------------\n\n* Tests more stable now\n\n* Added simple tutorial to README.rst\n\n\n0.0.1 (2016-12-10)\n------------------\n\n* Initial release.\n\n", "description_content_type": "", "docs_url": null, "download_url": "https://pypi.python.org/pypi/aiomonitor", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/aio-libs/aiomonitor", "keywords": "", "license": "Apache 2", "maintainer": "", "maintainer_email": "", "name": "aiomonitor", "package_url": "https://pypi.org/project/aiomonitor/", "platform": "POSIX", "project_url": "https://pypi.org/project/aiomonitor/", "project_urls": {"Download": "https://pypi.python.org/pypi/aiomonitor", "Homepage": "https://github.com/aio-libs/aiomonitor"}, "release_url": "https://pypi.org/project/aiomonitor/0.4.5/", "requires_dist": ["terminaltables", "aioconsole"], "requires_python": "", "summary": "aiomonitor adds monitor and python REPL capabilities for asyncio application", "version": "0.4.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"aiomonitor\">\n<h2>aiomonitor</h2>\n<a href=\"https://travis-ci.com/aio-libs/aiomonitor\" rel=\"nofollow\"><img alt=\"https://travis-ci.com/aio-libs/aiomonitor.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/82434f51c844b150441583c5b0bcd446ade6b1a3/68747470733a2f2f7472617669732d63692e636f6d2f61696f2d6c6962732f61696f6d6f6e69746f722e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://codecov.io/gh/aio-libs/aiomonitor\" rel=\"nofollow\"><img alt=\"https://codecov.io/gh/aio-libs/aiomonitor/branch/master/graph/badge.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fe7206e70ce75438b1dd7b63998bba54c7326ad5/68747470733a2f2f636f6465636f762e696f2f67682f61696f2d6c6962732f61696f6d6f6e69746f722f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a>\n<a href=\"https://codeclimate.com/github/aio-libs/aiomonitor/maintainability\" rel=\"nofollow\"><img alt=\"Maintainability\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/43c61df299a09ca80e6693a6fe543068e523abf8/68747470733a2f2f6170692e636f6465636c696d6174652e636f6d2f76312f6261646765732f64313461663463666230633466663532623165662f6d61696e7461696e6162696c697479\"></a>\n<a href=\"https://pypi.python.org/pypi/aiomonitor\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/v/aiomonitor.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e7f0c0769809d4630d0cc95cbcde14ee7e18587c/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f61696f6d6f6e69746f722e737667\"></a>\n<a href=\"http://aiomonitor.readthedocs.io/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5c760a22b1ae230f9b5195261836d80afb79e97f/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f61696f6d6f6e69746f722f62616467652f3f76657273696f6e3d6c6174657374\"></a>\n<a href=\"https://gitter.im/aio-libs/Lobby\" rel=\"nofollow\"><img alt=\"Chat on Gitter\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/454be82554a06af0fd3393415ef17b59d8550498/68747470733a2f2f6261646765732e6769747465722e696d2f4a6f696e253230436861742e737667\"></a>\n<p><strong>aiomonitor</strong> is Python 3.5+ module that adds monitor and cli capabilities\nfor <a href=\"http://docs.python.org/3.5/library/asyncio.html\" rel=\"nofollow\">asyncio</a> application. Idea and code borrowed from <a href=\"https://github.com/dabeaz/curio\" rel=\"nofollow\">curio</a> project.\nTask monitor that runs concurrently to the <a href=\"http://docs.python.org/3.5/library/asyncio.html\" rel=\"nofollow\">asyncio</a> loop (or fast drop in\nreplacement <a href=\"https://github.com/MagicStack/uvloop\" rel=\"nofollow\">uvloop</a>) in a separate thread as result monitor will work even if\nevent loop is blocked for some reason.</p>\n<p>Library provides an python console using <a href=\"https://github.com/vxgmichel/aioconsole\" rel=\"nofollow\">aioconsole</a> module, it is possible\nto execute asynchronous command inside your running application. Extensible\nwith you own commands, in the style of the standard library\u2019s <a href=\"http://docs.python.org/3/library/cmd.html\" rel=\"nofollow\">cmd</a> module</p>\n<table>\n<colgroup>\n<col>\n</colgroup>\n<tbody>\n<tr><td><img alt=\"https://raw.githubusercontent.com/aio-libs/aiomonitor/master/docs/tty.gif\" class=\"first last\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/cf1fc13008fa9edf21602be771d88872c12580e3/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f61696f2d6c6962732f61696f6d6f6e69746f722f6d61737465722f646f63732f7474792e676966\">\n</td>\n</tr>\n</tbody>\n</table>\n<div id=\"installation\">\n<h3>Installation</h3>\n<p>Installation process is simple, just:</p>\n<pre>$ pip install aiomonitor\n</pre>\n</div>\n<div id=\"example\">\n<h3>Example</h3>\n<p>Monitor has context manager interface:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">aiomonitor</span>\n\n<span class=\"n\">loop</span> <span class=\"o\">=</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">get_event_loop</span><span class=\"p\">()</span>\n<span class=\"k\">with</span> <span class=\"n\">aiomonitor</span><span class=\"o\">.</span><span class=\"n\">start_monitor</span><span class=\"p\">(</span><span class=\"n\">loop</span><span class=\"o\">=</span><span class=\"n\">loop</span><span class=\"p\">):</span>\n    <span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_forever</span><span class=\"p\">()</span>\n</pre>\n<p>Now from separate terminal it is possible to connect to the application:</p>\n<pre>$ nc localhost 50101\n</pre>\n<p>or using included python client:</p>\n<pre>$ python -m aiomonitor.cli\n</pre>\n</div>\n<div id=\"tutorial\">\n<h3>Tutorial</h3>\n<p>Lets create simple <a href=\"https://github.com/KeepSafe/aiohttp\" rel=\"nofollow\">aiohttp</a> application, and see how <tt>aiomonitor</tt> can\nintegrates with it.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">aiomonitor</span>\n<span class=\"kn\">from</span> <span class=\"nn\">aiohttp</span> <span class=\"kn\">import</span> <span class=\"n\">web</span>\n\n<span class=\"c1\"># Simple handler that returns response after 100s</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">simple</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"n\">loop</span> <span class=\"o\">=</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">loop</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Start sleeping'</span><span class=\"p\">)</span>\n    <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"n\">loop</span><span class=\"o\">=</span><span class=\"n\">loop</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">web</span><span class=\"o\">.</span><span class=\"n\">Response</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"o\">=</span><span class=\"s2\">\"Simple answer\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">loop</span> <span class=\"o\">=</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">get_event_loop</span><span class=\"p\">()</span>\n<span class=\"c1\"># create application and register route</span>\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">web</span><span class=\"o\">.</span><span class=\"n\">Application</span><span class=\"p\">(</span><span class=\"n\">loop</span><span class=\"o\">=</span><span class=\"n\">loop</span><span class=\"p\">)</span>\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">router</span><span class=\"o\">.</span><span class=\"n\">add_get</span><span class=\"p\">(</span><span class=\"s1\">'/simple'</span><span class=\"p\">,</span> <span class=\"n\">simple</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># it is possible to pass dictionary with local variables</span>\n<span class=\"c1\"># to the python console environment</span>\n<span class=\"n\">host</span><span class=\"p\">,</span> <span class=\"n\">port</span> <span class=\"o\">=</span> <span class=\"s2\">\"localhost\"</span><span class=\"p\">,</span> <span class=\"mi\">8090</span>\n<span class=\"n\">locals_</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">\"port\"</span><span class=\"p\">:</span> <span class=\"n\">port</span><span class=\"p\">,</span> <span class=\"s2\">\"host\"</span><span class=\"p\">:</span> <span class=\"n\">host</span><span class=\"p\">}</span>\n<span class=\"c1\"># init monitor just before run_app</span>\n<span class=\"k\">with</span> <span class=\"n\">aiomonitor</span><span class=\"o\">.</span><span class=\"n\">start_monitor</span><span class=\"p\">(</span><span class=\"n\">loop</span><span class=\"o\">=</span><span class=\"n\">loop</span><span class=\"p\">,</span> <span class=\"nb\">locals</span><span class=\"o\">=</span><span class=\"n\">locals_</span><span class=\"p\">):</span>\n    <span class=\"c1\"># run application with built in aiohttp run_app function</span>\n    <span class=\"n\">web</span><span class=\"o\">.</span><span class=\"n\">run_app</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"p\">,</span> <span class=\"n\">port</span><span class=\"o\">=</span><span class=\"n\">port</span><span class=\"p\">,</span> <span class=\"n\">host</span><span class=\"o\">=</span><span class=\"n\">host</span><span class=\"p\">)</span>\n</pre>\n<p>Lets save this code in file <tt>simple_srv.py</tt>, so we can run it with command:</p>\n<pre>$ python simple_srv.py\n======== Running on http://localhost:8090 ========\n(Press CTRL+C to quit)\n</pre>\n<p>And now one can connect running application from separate terminal, with\n<tt>nc</tt> command, immediately <tt>aiomonitor</tt> will respond with prompt:</p>\n<pre>$ nc localhost 50101\nAsyncio Monitor: 1 tasks running\nType help for commands\nmonitor &gt;&gt;&gt;\n</pre>\n<p>Now you can type commands, for instance <tt>help</tt>:</p>\n<pre>monitor &gt;&gt;&gt; help\nCommands:\n             ps               : Show task table\n             where taskid     : Show stack frames for a task\n             cancel taskid    : Cancel an indicated task\n             signal signame   : Send a Unix signal\n             stacktrace       : Print a stack trace from the event loop thread\n             console          : Switch to async Python REPL\n             quit             : Leave the monitor\n</pre>\n<p><tt>aiomonitor</tt> supports also async python console inside running event loop\nso you can explore state of your application:</p>\n<pre>monitor &gt;&gt;&gt; console\nPython 3.5.2 (default, Oct 11 2016, 05:05:28)\n[GCC 4.2.1 Compatible Apple LLVM 8.0.0 (clang-800.0.38)] on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n---\nThis console is running in an asyncio event loop.\nIt allows you to wait for coroutines using the 'await' syntax.\nTry: await asyncio.sleep(1, result=3, loop=loop)\n---\n&gt;&gt;&gt; await asyncio.sleep(1, result=3, loop=loop)\n</pre>\n<p>To leave console type <tt>exit()</tt>:</p>\n<pre>&gt;&gt;&gt; exit()\nmonitor &gt;&gt;&gt;\n</pre>\n<p><tt>aiomonitor</tt> is very easy to extend with your own console commands.</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">WebMonitor</span><span class=\"p\">(</span><span class=\"n\">aiomonitor</span><span class=\"o\">.</span><span class=\"n\">Monitor</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">do_hello</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">sin</span><span class=\"p\">,</span> <span class=\"n\">sout</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Using the /hello GET interface\n\n        There is one optional argument, \"name\".  This name argument must be\n        provided with proper URL excape codes, like %20 for spaces.\n        \"\"\"</span>\n        <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s1\">''</span> <span class=\"k\">if</span> <span class=\"n\">name</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span> <span class=\"k\">else</span> <span class=\"s1\">'/'</span> <span class=\"o\">+</span> <span class=\"n\">name</span>\n        <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'http://localhost:8090/hello'</span> <span class=\"o\">+</span> <span class=\"n\">name</span><span class=\"p\">)</span>\n        <span class=\"n\">sout</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">text</span> <span class=\"o\">+</span> <span class=\"s1\">'</span><span class=\"se\">\\n</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"requirements\">\n<h3>Requirements</h3>\n<ul>\n<li><a href=\"https://www.python.org\" rel=\"nofollow\">Python</a> 3.5+</li>\n<li><a href=\"https://github.com/vxgmichel/aioconsole\" rel=\"nofollow\">aioconsole</a></li>\n<li><a href=\"https://github.com/MagicStack/uvloop\" rel=\"nofollow\">uvloop</a> (optional)</li>\n</ul>\n</div>\n</div>\n<div id=\"changes\">\n<h2>CHANGES</h2>\n<div id=\"id1\">\n<h3>0.4.5 (2019-11-03)</h3>\n<ul>\n<li>Fixed endless loop on EOF (thanks @apatrushev)</li>\n</ul>\n</div>\n<div id=\"id2\">\n<h3>0.4.4 (2019-03-23)</h3>\n<ul>\n<li>Simplified python console start end #175</li>\n<li>Added python 3.7 compatibility #176</li>\n</ul>\n</div>\n<div id=\"id3\">\n<h3>0.4.3 (2019-02-02)</h3>\n<ul>\n<li>Reworked console server start/close logic #169</li>\n</ul>\n</div>\n<div id=\"id4\">\n<h3>0.4.2 (2019-01-13)</h3>\n<ul>\n<li>Fixed issue with type annotations from 0.4.1 release #164</li>\n</ul>\n</div>\n<div id=\"id5\">\n<h3>0.4.1 (2019-01-10)</h3>\n<ul>\n<li>Fixed Python 3.5 support #161 (thanks @bmerry)</li>\n</ul>\n</div>\n<div id=\"id6\">\n<h3>0.4.0 (2019-01-04)</h3>\n<ul>\n<li>Added support for custom commands #133 (thanks @yggdr)</li>\n<li>Fixed OptLocals being passed as the default value for \u201clocals\u201d #122 (thanks @agronholm)</li>\n<li>Added an API inspired by the standard library\u2019s cmd module #135 (thanks @yggdr)</li>\n<li>Correctly report the port running aioconsole #124 (thanks @bmerry)</li>\n</ul>\n</div>\n<div id=\"id7\">\n<h3>0.3.1 (2018-07-03)</h3>\n<ul>\n<li>Added the stacktrace command #120 (thanks @agronholm)</li>\n</ul>\n</div>\n<div id=\"id8\">\n<h3>0.3.0 (2017-09-08)</h3>\n<ul>\n<li>Added _locals_ parameter for passing environment to python REPL</li>\n</ul>\n</div>\n<div id=\"id9\">\n<h3>0.2.1 (2016-01-03)</h3>\n<ul>\n<li>Fixed import in telnet cli in #12 (thanks @hellysmile)</li>\n</ul>\n</div>\n<div id=\"id10\">\n<h3>0.2.0 (2016-01-01)</h3>\n<ul>\n<li>Added basic documentation</li>\n<li>Most of methods of Monitor class are not not private api</li>\n</ul>\n</div>\n<div id=\"id11\">\n<h3>0.1.0 (2016-12-14)</h3>\n<ul>\n<li>Added missed LICENSE file</li>\n<li>Updated API, added start_monitor() function</li>\n</ul>\n</div>\n<div id=\"id12\">\n<h3>0.0.3 (2016-12-11)</h3>\n<ul>\n<li>Fixed README.rst</li>\n</ul>\n</div>\n<div id=\"id13\">\n<h3>0.0.2 (2016-12-11)</h3>\n<ul>\n<li>Tests more stable now</li>\n<li>Added simple tutorial to README.rst</li>\n</ul>\n</div>\n<div id=\"id14\">\n<h3>0.0.1 (2016-12-10)</h3>\n<ul>\n<li>Initial release.</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 6072970, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "509530e2c6804e30b7c2ca227e4d6236", "sha256": "102669079dd672d983238ef0ef3da2d19d545012eaa23991bbf8131227cf8720"}, "downloads": -1, "filename": "aiomonitor-0.0.1.tar.gz", "has_sig": false, "md5_digest": "509530e2c6804e30b7c2ca227e4d6236", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5994, "upload_time": "2016-12-09T23:07:00", "upload_time_iso_8601": "2016-12-09T23:07:00.765095Z", "url": "https://files.pythonhosted.org/packages/f9/e5/fed2dc5ac31ca0c6f5a829e6acd223485912b11470c1cf9c4c2420d78dc4/aiomonitor-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "02ec5eecf5991c60d5b37ab31950cf06", "sha256": "1a25fed9d744e330d7f6134b35dc5cb3155efdc13b6306910cd3b3f9a3411fc5"}, "downloads": -1, "filename": "aiomonitor-0.0.2.tar.gz", "has_sig": false, "md5_digest": "02ec5eecf5991c60d5b37ab31950cf06", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6677, "upload_time": "2016-12-10T22:36:45", "upload_time_iso_8601": "2016-12-10T22:36:45.163288Z", "url": "https://files.pythonhosted.org/packages/87/2f/b8f017e427a27552c142ba360a95b1ad0544221c6ac91c7f2b1bbc8cdabe/aiomonitor-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "71e29bbc8f5882742bb4f0d75e79bdba", "sha256": "08666b59849c640e89d47dfdb4ec92542642b1ef5c9f966974600a80fe73add0"}, "downloads": -1, "filename": "aiomonitor-0.0.3.tar.gz", "has_sig": false, "md5_digest": "71e29bbc8f5882742bb4f0d75e79bdba", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6681, "upload_time": "2016-12-10T22:54:16", "upload_time_iso_8601": "2016-12-10T22:54:16.123235Z", "url": "https://files.pythonhosted.org/packages/f3/63/13c5e05ed981e9a24af75eb4d639d68a478a2a7cdb02ec1a312426ddfb14/aiomonitor-0.0.3.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "3ac415be70e4138f082732543f02debe", "sha256": "658041bcd65d1937665548d9b1f7cd060846c873dce62ed1411989f4510d3dab"}, "downloads": -1, "filename": "aiomonitor-0.1.0.tar.gz", "has_sig": false, "md5_digest": "3ac415be70e4138f082732543f02debe", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10990, "upload_time": "2016-12-14T19:57:59", "upload_time_iso_8601": "2016-12-14T19:57:59.551170Z", "url": "https://files.pythonhosted.org/packages/fc/cc/871a5c8fd3ae077cad1b3224309875dd975c198e654232e94fa1b5875302/aiomonitor-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "e45951a79de04f7a6949fbefb08ed568", "sha256": "f81db345475f12354b7eb03cf10ec3e311fd0350e8bea718740a7f550aaaca3a"}, "downloads": -1, "filename": "aiomonitor-0.2.0.tar.gz", "has_sig": false, "md5_digest": "e45951a79de04f7a6949fbefb08ed568", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12809, "upload_time": "2017-01-01T20:34:12", "upload_time_iso_8601": "2017-01-01T20:34:12.433945Z", "url": "https://files.pythonhosted.org/packages/0d/cd/2c720dde59577688aaf6538f5140488dc2a8f159e90cacad7cae517e7fef/aiomonitor-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "51fc96ddb91c45b19cbefb2ff8a358d4", "sha256": "410b502d9061889f861b138e60cf634cf71f4a5f2b4cd36beb1510e1da0ee36d"}, "downloads": -1, "filename": "aiomonitor-0.2.1.tar.gz", "has_sig": false, "md5_digest": "51fc96ddb91c45b19cbefb2ff8a358d4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13090, "upload_time": "2017-01-03T13:54:46", "upload_time_iso_8601": "2017-01-03T13:54:46.549178Z", "url": "https://files.pythonhosted.org/packages/6f/c5/436718e519e0a58c38a868afd07b430096f24097c10ab12caca23a6dab08/aiomonitor-0.2.1.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "446319b270c81f1d3839f89858b2fa40", "sha256": "f4f77a8f5de9e636cb1c5c1133fc6239813649a0175112bf7af58ebbf0fe077b"}, "downloads": -1, "filename": "aiomonitor-0.3.0.tar.gz", "has_sig": false, "md5_digest": "446319b270c81f1d3839f89858b2fa40", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11609, "upload_time": "2017-09-08T19:38:41", "upload_time_iso_8601": "2017-09-08T19:38:41.334491Z", "url": "https://files.pythonhosted.org/packages/9f/7a/f9b021cbf88ff66d1652006146d443cfa63ba8574cbf97d4d6ff4adfa766/aiomonitor-0.3.0.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "449c5868d494e14643441d1a6fcd25ea", "sha256": "1a396ea14a060561731081117dbfe02a9a209000c6152f66b3b3d3e0d0b8e0c3"}, "downloads": -1, "filename": "aiomonitor-0.3.1.tar.gz", "has_sig": false, "md5_digest": "449c5868d494e14643441d1a6fcd25ea", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14474, "upload_time": "2018-07-03T17:42:40", "upload_time_iso_8601": "2018-07-03T17:42:40.150141Z", "url": "https://files.pythonhosted.org/packages/4c/e4/6314fe522d0c17fd01e14297e3ec58d4f4d2cf7bf1089590e1d23bc7653b/aiomonitor-0.3.1.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "0e81e01a92646697fbc0124580d03649", "sha256": "8e8470a80b4380ad2ffa30d9a08fc29fa189176aa46feeb05a366c122a40e0c2"}, "downloads": -1, "filename": "aiomonitor-0.4.0.tar.gz", "has_sig": false, "md5_digest": "0e81e01a92646697fbc0124580d03649", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17038, "upload_time": "2019-01-05T08:21:00", "upload_time_iso_8601": "2019-01-05T08:21:00.903955Z", "url": "https://files.pythonhosted.org/packages/a8/d5/995c2be5ddac6ea6251c4d65a75b4875360ec46bc13f23e9860ad0759c4a/aiomonitor-0.4.0.tar.gz", "yanked": false}], "0.4.1": [{"comment_text": "", "digests": {"md5": "29ba62220f0428176bc4e28fafeb3546", "sha256": "73bbd8d803108237c29997d4d756f578ca8c81cf0899bf4d409a21143793578d"}, "downloads": -1, "filename": "aiomonitor-0.4.1.tar.gz", "has_sig": false, "md5_digest": "29ba62220f0428176bc4e28fafeb3546", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16443, "upload_time": "2019-01-10T22:43:37", "upload_time_iso_8601": "2019-01-10T22:43:37.028069Z", "url": "https://files.pythonhosted.org/packages/fe/df/3e01a3683c407edfb6659b0ff9bb9745403609f466861bea246a7962ba5b/aiomonitor-0.4.1.tar.gz", "yanked": false}], "0.4.2": [{"comment_text": "", "digests": {"md5": "85d316bdbaa553b5297bdaa8c871a513", "sha256": "b69b395b1962d5bf7e0f4faae3da8a229f15fdc8e6b54e5fd5498503c186ca68"}, "downloads": -1, "filename": "aiomonitor-0.4.2-py3-none-any.whl", "has_sig": false, "md5_digest": "85d316bdbaa553b5297bdaa8c871a513", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 15279, "upload_time": "2019-01-12T22:29:28", "upload_time_iso_8601": "2019-01-12T22:29:28.765974Z", "url": "https://files.pythonhosted.org/packages/27/a9/c0b57959a695fdaa543a2dcd5895b8bbef66558c75de67d1dd643982ae1d/aiomonitor-0.4.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "04eff1d4dfe9aaab35778cb595d4537a", "sha256": "968621fd0e4824d04a767349b14637f3d6b606f15534274fcdf0d5cc81249e4a"}, "downloads": -1, "filename": "aiomonitor-0.4.2.tar.gz", "has_sig": false, "md5_digest": "04eff1d4dfe9aaab35778cb595d4537a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16439, "upload_time": "2019-01-12T22:29:30", "upload_time_iso_8601": "2019-01-12T22:29:30.075296Z", "url": "https://files.pythonhosted.org/packages/bb/08/0c8a814991a76376db58c8b8a114c2e5d66e9fc46ff93781e624abf47942/aiomonitor-0.4.2.tar.gz", "yanked": false}], "0.4.3": [{"comment_text": "", "digests": {"md5": "53e57710df81ac9f5114788de270b83c", "sha256": "26cc6e74711ea0df68a2d5ddd389751801b939a446046a303d192fc8f1efcadf"}, "downloads": -1, "filename": "aiomonitor-0.4.3-py3-none-any.whl", "has_sig": false, "md5_digest": "53e57710df81ac9f5114788de270b83c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 15626, "upload_time": "2019-02-02T10:23:20", "upload_time_iso_8601": "2019-02-02T10:23:20.209471Z", "url": "https://files.pythonhosted.org/packages/75/da/510fa802731e83b8b640f9e61e620d61cfa2abb028fa48b2144610bec773/aiomonitor-0.4.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0f58ac68497a59d104ecb6ba369df784", "sha256": "37cd279c26e2c80b4e6ed9d23476c84c0b75fc3794617fceb6f341437b9af5fe"}, "downloads": -1, "filename": "aiomonitor-0.4.3.tar.gz", "has_sig": false, "md5_digest": "0f58ac68497a59d104ecb6ba369df784", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17492, "upload_time": "2019-02-02T10:23:21", "upload_time_iso_8601": "2019-02-02T10:23:21.329412Z", "url": "https://files.pythonhosted.org/packages/11/27/2d25a3318e57181e04d2694768f0e1e621b64606d8424076790caa29e401/aiomonitor-0.4.3.tar.gz", "yanked": false}], "0.4.4": [{"comment_text": "", "digests": {"md5": "af83dc624b72d8431d4e78c702ae6b84", "sha256": "92b99f3395a441870350cd956c63eb95cf57fa1bdd8ffcd8826cf01fe8e617cb"}, "downloads": -1, "filename": "aiomonitor-0.4.4-py3-none-any.whl", "has_sig": false, "md5_digest": "af83dc624b72d8431d4e78c702ae6b84", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 15668, "upload_time": "2019-03-23T19:41:57", "upload_time_iso_8601": "2019-03-23T19:41:57.398365Z", "url": "https://files.pythonhosted.org/packages/fd/e2/600e9847c6eea8ea59fcc9f8a6f9ca3d7e1d9a0e73f1605113cb9b53fccb/aiomonitor-0.4.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "38028c80adf5708ad5f7adadf0fdf404", "sha256": "c3e0d79cb637baa06ce50db8070e8db0798e16ea626606b703d9d0e3ca5b30ff"}, "downloads": -1, "filename": "aiomonitor-0.4.4.tar.gz", "has_sig": false, "md5_digest": "38028c80adf5708ad5f7adadf0fdf404", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17594, "upload_time": "2019-03-23T19:43:58", "upload_time_iso_8601": "2019-03-23T19:43:58.751505Z", "url": "https://files.pythonhosted.org/packages/fe/15/ac345a2a55ef106b466347c58ebc5f77ef491aea5a05f700e80a181cda47/aiomonitor-0.4.4.tar.gz", "yanked": false}], "0.4.5": [{"comment_text": "", "digests": {"md5": "5cf5a5992f7603addba44cd9b26ccedb", "sha256": "5c7ac38b2ee59cbad87162ef5c45d72c7b57b94c8a93e7f462184bf10f9ebccd"}, "downloads": -1, "filename": "aiomonitor-0.4.5-py3-none-any.whl", "has_sig": false, "md5_digest": "5cf5a5992f7603addba44cd9b26ccedb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 15716, "upload_time": "2019-11-04T03:30:26", "upload_time_iso_8601": "2019-11-04T03:30:26.845765Z", "url": "https://files.pythonhosted.org/packages/94/6d/95eb718f545c6d09aa19fa08b28b616203a77a68755b09c6f6b1202773b2/aiomonitor-0.4.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5f184e4b97ea161fc2d690aef604f997", "sha256": "6232c1ab14bf06cd7217845801c27340032f74e283bdaf32d01cdd3b7c673d0e"}, "downloads": -1, "filename": "aiomonitor-0.4.5.tar.gz", "has_sig": false, "md5_digest": "5f184e4b97ea161fc2d690aef604f997", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17676, "upload_time": "2019-11-04T03:30:28", "upload_time_iso_8601": "2019-11-04T03:30:28.448278Z", "url": "https://files.pythonhosted.org/packages/98/76/b62e9fbe267287527fb6f4b6774394d4f00650195774173bb0055a99ab3d/aiomonitor-0.4.5.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "5cf5a5992f7603addba44cd9b26ccedb", "sha256": "5c7ac38b2ee59cbad87162ef5c45d72c7b57b94c8a93e7f462184bf10f9ebccd"}, "downloads": -1, "filename": "aiomonitor-0.4.5-py3-none-any.whl", "has_sig": false, "md5_digest": "5cf5a5992f7603addba44cd9b26ccedb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 15716, "upload_time": "2019-11-04T03:30:26", "upload_time_iso_8601": "2019-11-04T03:30:26.845765Z", "url": "https://files.pythonhosted.org/packages/94/6d/95eb718f545c6d09aa19fa08b28b616203a77a68755b09c6f6b1202773b2/aiomonitor-0.4.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5f184e4b97ea161fc2d690aef604f997", "sha256": "6232c1ab14bf06cd7217845801c27340032f74e283bdaf32d01cdd3b7c673d0e"}, "downloads": -1, "filename": "aiomonitor-0.4.5.tar.gz", "has_sig": false, "md5_digest": "5f184e4b97ea161fc2d690aef604f997", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17676, "upload_time": "2019-11-04T03:30:28", "upload_time_iso_8601": "2019-11-04T03:30:28.448278Z", "url": "https://files.pythonhosted.org/packages/98/76/b62e9fbe267287527fb6f4b6774394d4f00650195774173bb0055a99ab3d/aiomonitor-0.4.5.tar.gz", "yanked": false}], "timestamp": "Thu May  7 16:21:03 2020"}