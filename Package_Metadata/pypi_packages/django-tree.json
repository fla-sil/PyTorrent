{"info": {"author": "Bertrand Bordage", "author_email": "bordage.bertrand@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Framework :: Django", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Topic :: Internet :: WWW/HTTP"], "description": "Django-tree\n===========\n\nFast and easy tree structures.\n\n.. image:: http://img.shields.io/pypi/v/django-tree.svg?style=flat-square\n   :target: https://pypi.python.org/pypi/django-tree\n\n.. image:: http://img.shields.io/travis/BertrandBordage/django-tree/master.svg?style=flat-square\n   :target: https://travis-ci.org/BertrandBordage/django-tree\n\n.. image:: http://img.shields.io/coveralls/BertrandBordage/django-tree/master.svg?style=flat-square\n   :target: https://coveralls.io/r/BertrandBordage/django-tree?branch=master\n\n**In alpha, it can\u2019t be used yet in production.**\n\nThis tool works in a very similar way to **django-mptt**\nand **django-treebeard**, however it\u2019s so different in conception\nthat it was better and faster to start from scratch\nthan to rewrite the existing solutions.\n\nCompared to these solutions, django-tree aims to have these advantages\n(some of them are already there):\n\n- less intrusive (no more inheriting issues\n  due to Model, Manager & Queryset subclasses)\n- easier to install\n- easier to use\n- more complete\n- minimalist (less code, less database fields)\n- bug-free\n- safe (most of the logic is written directly in database)\n- faster for all operations\n\nHowever, there is nothing groundbreaking here: this is only the result of\na proper use of the latest Django improvements, combined with a good knowledge\nof SQL.\n\n\nInstallation\n------------\n\nDjango-tree requires Django 1.8, 1.11 or 2.0 and Python 2 or 3.\nFor the moment, django-tree is only for PostgreSQL.\nIt will be adapted in the future for other databases.\n\nAfter installing the module, you need to add ``'tree',`` to your\n``INSTALLED_APPS``, then add a ``PathField`` to a model with a\n``ForeignKey('self')``, typically named ``parent`` (use the ``parent_field``\nargument of ``CreateTreeTrigger`` if the field has another name).\n``PathField`` stores ``Path`` objects which have methods to execute queries,\nsuch as getting all the descendants of the current object, its siblings, etc.\nTo call these methods more conveniently, you can add ``TreeModelMixin``\nto your model.  The inheriting order is not important, as the mixin methods\ndo not clash with Django.  If you have multiple ``PathField``\non the same model, you will have to specify the field name in the method\nyou\u2019re calling using ``path_field``.\n\nThis should give you a model like this:\n\n.. code:: python\n\n    from django.db.models import Model, CharField, ForeignKey, BooleanField\n    from tree.fields import PathField\n    from tree.models import TreeModelMixin\n\n    class YourModel(Model, TreeModelMixin):\n        name = CharField(max_length=30)\n        parent = ForeignKey('self', null=True, blank=True)\n        path = PathField()\n        public = BooleanField(default=False)\n\n        class Meta:\n            ordering = ('path',)\n\nThen you need to create the SQL trigger that will automatically update ``path``.\nTo do that, create a migration with a dependency\nto the latest django-tree migration and add a ``CreateTreeTrigger`` operation:\n\n.. code:: python\n\n    from django.db import migrations\n    from tree.operations import CreateTreeTrigger\n\n    class Migration(migrations.Migration):\n        dependencies = [\n            ('tree', '0001_initial'),\n        ]\n\n        operations = [\n            CreateTreeTrigger('your_app.YourModel'),\n        ]\n\nIf you already have data in ``YourModel``, you will need to add an operation\nfor allowing SQL ``NULL`` values before creating the trigger,\nthen rebuild the paths and revert the allowance of ``NULL`` values:\n\n.. code:: python\n\n    from django.db import migrations\n    from tree.fields import PathField\n    from tree.operations import CreateTreeTrigger, RebuildPaths\n\n    class Migration(migrations.Migration):\n        dependencies = [\n            ('tree', '0001_initial'),\n        ]\n\n        operations = [\n            migrations.AlterField('YourModel', 'path', PathField(null=True)),\n            CreateTreeTrigger('YourModel'),\n            RebuildPaths('YourModel', 'path'),\n            migrations.AlterField('YourModel', 'path', PathField()),\n        ]\n\nHowever, the model above is not ordered. The children of a same parent will be\nordered by primary key. You can specify how children are ordered using the\n``order_by`` argument of ``PathField``. If needed, you can add a field\nfor users to explicitly order these objects, typically a position field.\nExample model:\n\n.. code:: python\n\n    from django.db.models import (\n        Model, CharField, ForeignKey, IntegerField, BooleanField)\n    from tree.fields import PathField\n    from tree.models import TreeModelMixin\n\n    class YourModel(Model, TreeModelMixin):\n        name = CharField(max_length=30)\n        parent = ForeignKey('self', null=True, blank=True)\n        position = IntegerField(default=1)\n        path = PathField(order_by=['position', 'name'])\n        public = BooleanField(default=False)\n\n        class Meta:\n            ordering = ('path',)\n\nAnd the corresponding migration:\n\n.. code:: python\n\n    from django.db import models, migrations\n    from tree.operations import CreateTreeTrigger\n\n    class Migration(migrations.Migration):\n        dependencies = [\n            ('tree', '0001_initial'),\n        ]\n\n        operations = [\n            migrations.AddField('YourModel', 'position',\n                                models.IntegerField(default=1))\n            CreateTreeTrigger('YourModel'),\n        ]\n\nHere, the children of a same parent will be ordered by position, and then\nby name if the position is the same.\n\n.. note::\n\n    You can also use ``PathField`` without adding a ``CreateTreeTrigger``\n    operation. However, the field will not automatically be updated, you\n    will have to do it by yourself. In most cases this is not useful, so you\n    should not use ``PathField`` without ``CreateTreeTrigger`` unless you know\n    what you are doing.\n\n\nUsage\n-----\n\n``PathField`` is automatically filled thanks to ``CreateTreeTrigger``,\nyou don\u2019t need to set, modify, or even see its value once it is installed.\nBut you can use the ``Path`` object it stores or the more convenient\n``TreeModelMixin`` to get tree information about the current instance,\nor make complex queries on the whole tree structure.\nExample to show you most of the possibilities:\n\n.. code:: python\n\n    obj = YourModel.objects.all()[0]\n    obj.path.get_level()\n    obj.get_level()  # Shortcut for the previous method, if you use\n                     # `TreeModelMixin`. Same for other object methods below.\n    obj.is_root()\n    obj.is_leaf()\n    obj.get_children()\n    obj.get_children().filter(public=True)\n    obj.get_ancestors()\n    obj.get_ancestors(include_self=True)\n    obj.get_descendants(include_self=True)\n    obj.get_siblings()\n    obj.get_prev_sibling()  # Fetches the previous sibling.\n    obj.get_next_sibling()\n    # Same as `get_prev_sibling`, except that we get the first public one.\n    obj.get_prev_siblings().filter(public=True).first()\n    other = YourModel.objects.all()[1]\n    obj.is_ancestor_of(other)\n    obj.is_descendant_of(other, include_self=True)\n    YourModel.get_roots()\n\n    #\n    # Advanced usage\n    # Use the following methods only if you understand exactly what they mean.\n    #\n\n    YourModel.rebuild_paths()  # Rebuilds all paths of this field, useful only\n                               # if something is broken, which shouldn\u2019t happen.\n    YourModel.disable_tree_trigger()  # Disables the SQL trigger.\n    YourModel.enable_tree_trigger()   # Restores the SQL trigger.\n    with YourModel.disabled_tree_trigger():\n        # What happens inside this context manager is ignored\n        # by the SQL trigger.\n        # The trigger is restored after that, even if there an error occurred.\n        pass\n\nThere is also a bunch of less useful lookups and transforms\navailable. They will be documented with examples in the future.\n\n\nDifferences with MPTT and treebeard\n-----------------------------------\n\nLevel vs depth\n..............\n\ndjango-mptt and django-treebeard use two different names to designate almost\nthe same thing: MPTT uses level and treebeard uses depth.\nBoth are integers to show how much distant is a node from the top of the tree.\nThe only difference is that level should start by convention with 1 and depth\nshould start with 0.\n\nUnfortunately, **both MPTT and treebeard are wrong about the indexing**:\nMPTT starts its level with 0 and treebeard starts its depth with 1.\n\n**Django-tree finally fixes this issue by implementing a level starting by 1**,\nand no depth to avoid confusion. One name had to be chosen, and I find that\n\u201clevel\u201d represents more accurately the idea that we deal with an abstract tree,\nwhere all the node of the same level are on the same row.\nIn comparison, \u201cdepth\u201d sounds like we\u2019re actually digging a real root,\nand it gives the impression that a child of a root\ncan be at a different depth than a child of another root, like in real life.\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/BertrandBordage/django-tree", "keywords": "", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "django-tree", "package_url": "https://pypi.org/project/django-tree/", "platform": "", "project_url": "https://pypi.org/project/django-tree/", "project_urls": {"Homepage": "https://github.com/BertrandBordage/django-tree"}, "release_url": "https://pypi.org/project/django-tree/0.3.2/", "requires_dist": null, "requires_python": "", "summary": "Fast and easy tree structures.", "version": "0.3.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Fast and easy tree structures.</p>\n<a href=\"https://pypi.python.org/pypi/django-tree\" rel=\"nofollow\"><img alt=\"http://img.shields.io/pypi/v/django-tree.svg?style=flat-square\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ec3009153f328075f721807fc69f4bc88931ce40/687474703a2f2f696d672e736869656c64732e696f2f707970692f762f646a616e676f2d747265652e7376673f7374796c653d666c61742d737175617265\"></a>\n<a href=\"https://travis-ci.org/BertrandBordage/django-tree\" rel=\"nofollow\"><img alt=\"http://img.shields.io/travis/BertrandBordage/django-tree/master.svg?style=flat-square\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ed099a1208dc1a07f0535ee79ce99a5e34794269/687474703a2f2f696d672e736869656c64732e696f2f7472617669732f4265727472616e64426f72646167652f646a616e676f2d747265652f6d61737465722e7376673f7374796c653d666c61742d737175617265\"></a>\n<a href=\"https://coveralls.io/r/BertrandBordage/django-tree?branch=master\" rel=\"nofollow\"><img alt=\"http://img.shields.io/coveralls/BertrandBordage/django-tree/master.svg?style=flat-square\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/40d122af5e928d9076a6fa9fd69a0a61b0008295/687474703a2f2f696d672e736869656c64732e696f2f636f766572616c6c732f4265727472616e64426f72646167652f646a616e676f2d747265652f6d61737465722e7376673f7374796c653d666c61742d737175617265\"></a>\n<p><strong>In alpha, it can\u2019t be used yet in production.</strong></p>\n<p>This tool works in a very similar way to <strong>django-mptt</strong>\nand <strong>django-treebeard</strong>, however it\u2019s so different in conception\nthat it was better and faster to start from scratch\nthan to rewrite the existing solutions.</p>\n<p>Compared to these solutions, django-tree aims to have these advantages\n(some of them are already there):</p>\n<ul>\n<li>less intrusive (no more inheriting issues\ndue to Model, Manager &amp; Queryset subclasses)</li>\n<li>easier to install</li>\n<li>easier to use</li>\n<li>more complete</li>\n<li>minimalist (less code, less database fields)</li>\n<li>bug-free</li>\n<li>safe (most of the logic is written directly in database)</li>\n<li>faster for all operations</li>\n</ul>\n<p>However, there is nothing groundbreaking here: this is only the result of\na proper use of the latest Django improvements, combined with a good knowledge\nof SQL.</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Django-tree requires Django 1.8, 1.11 or 2.0 and Python 2 or 3.\nFor the moment, django-tree is only for PostgreSQL.\nIt will be adapted in the future for other databases.</p>\n<p>After installing the module, you need to add <tt>'tree',</tt> to your\n<tt>INSTALLED_APPS</tt>, then add a <tt>PathField</tt> to a model with a\n<tt><span class=\"pre\">ForeignKey('self')</span></tt>, typically named <tt>parent</tt> (use the <tt>parent_field</tt>\nargument of <tt>CreateTreeTrigger</tt> if the field has another name).\n<tt>PathField</tt> stores <tt>Path</tt> objects which have methods to execute queries,\nsuch as getting all the descendants of the current object, its siblings, etc.\nTo call these methods more conveniently, you can add <tt>TreeModelMixin</tt>\nto your model.  The inheriting order is not important, as the mixin methods\ndo not clash with Django.  If you have multiple <tt>PathField</tt>\non the same model, you will have to specify the field name in the method\nyou\u2019re calling using <tt>path_field</tt>.</p>\n<p>This should give you a model like this:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">django.db.models</span> <span class=\"kn\">import</span> <span class=\"n\">Model</span><span class=\"p\">,</span> <span class=\"n\">CharField</span><span class=\"p\">,</span> <span class=\"n\">ForeignKey</span><span class=\"p\">,</span> <span class=\"n\">BooleanField</span>\n<span class=\"kn\">from</span> <span class=\"nn\">tree.fields</span> <span class=\"kn\">import</span> <span class=\"n\">PathField</span>\n<span class=\"kn\">from</span> <span class=\"nn\">tree.models</span> <span class=\"kn\">import</span> <span class=\"n\">TreeModelMixin</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">YourModel</span><span class=\"p\">(</span><span class=\"n\">Model</span><span class=\"p\">,</span> <span class=\"n\">TreeModelMixin</span><span class=\"p\">):</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">30</span><span class=\"p\">)</span>\n    <span class=\"n\">parent</span> <span class=\"o\">=</span> <span class=\"n\">ForeignKey</span><span class=\"p\">(</span><span class=\"s1\">'self'</span><span class=\"p\">,</span> <span class=\"n\">null</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">blank</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"n\">PathField</span><span class=\"p\">()</span>\n    <span class=\"n\">public</span> <span class=\"o\">=</span> <span class=\"n\">BooleanField</span><span class=\"p\">(</span><span class=\"n\">default</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">ordering</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">'path'</span><span class=\"p\">,)</span>\n</pre>\n<p>Then you need to create the SQL trigger that will automatically update <tt>path</tt>.\nTo do that, create a migration with a dependency\nto the latest django-tree migration and add a <tt>CreateTreeTrigger</tt> operation:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">django.db</span> <span class=\"kn\">import</span> <span class=\"n\">migrations</span>\n<span class=\"kn\">from</span> <span class=\"nn\">tree.operations</span> <span class=\"kn\">import</span> <span class=\"n\">CreateTreeTrigger</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Migration</span><span class=\"p\">(</span><span class=\"n\">migrations</span><span class=\"o\">.</span><span class=\"n\">Migration</span><span class=\"p\">):</span>\n    <span class=\"n\">dependencies</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"p\">(</span><span class=\"s1\">'tree'</span><span class=\"p\">,</span> <span class=\"s1\">'0001_initial'</span><span class=\"p\">),</span>\n    <span class=\"p\">]</span>\n\n    <span class=\"n\">operations</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"n\">CreateTreeTrigger</span><span class=\"p\">(</span><span class=\"s1\">'your_app.YourModel'</span><span class=\"p\">),</span>\n    <span class=\"p\">]</span>\n</pre>\n<p>If you already have data in <tt>YourModel</tt>, you will need to add an operation\nfor allowing SQL <tt>NULL</tt> values before creating the trigger,\nthen rebuild the paths and revert the allowance of <tt>NULL</tt> values:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">django.db</span> <span class=\"kn\">import</span> <span class=\"n\">migrations</span>\n<span class=\"kn\">from</span> <span class=\"nn\">tree.fields</span> <span class=\"kn\">import</span> <span class=\"n\">PathField</span>\n<span class=\"kn\">from</span> <span class=\"nn\">tree.operations</span> <span class=\"kn\">import</span> <span class=\"n\">CreateTreeTrigger</span><span class=\"p\">,</span> <span class=\"n\">RebuildPaths</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Migration</span><span class=\"p\">(</span><span class=\"n\">migrations</span><span class=\"o\">.</span><span class=\"n\">Migration</span><span class=\"p\">):</span>\n    <span class=\"n\">dependencies</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"p\">(</span><span class=\"s1\">'tree'</span><span class=\"p\">,</span> <span class=\"s1\">'0001_initial'</span><span class=\"p\">),</span>\n    <span class=\"p\">]</span>\n\n    <span class=\"n\">operations</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"n\">migrations</span><span class=\"o\">.</span><span class=\"n\">AlterField</span><span class=\"p\">(</span><span class=\"s1\">'YourModel'</span><span class=\"p\">,</span> <span class=\"s1\">'path'</span><span class=\"p\">,</span> <span class=\"n\">PathField</span><span class=\"p\">(</span><span class=\"n\">null</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)),</span>\n        <span class=\"n\">CreateTreeTrigger</span><span class=\"p\">(</span><span class=\"s1\">'YourModel'</span><span class=\"p\">),</span>\n        <span class=\"n\">RebuildPaths</span><span class=\"p\">(</span><span class=\"s1\">'YourModel'</span><span class=\"p\">,</span> <span class=\"s1\">'path'</span><span class=\"p\">),</span>\n        <span class=\"n\">migrations</span><span class=\"o\">.</span><span class=\"n\">AlterField</span><span class=\"p\">(</span><span class=\"s1\">'YourModel'</span><span class=\"p\">,</span> <span class=\"s1\">'path'</span><span class=\"p\">,</span> <span class=\"n\">PathField</span><span class=\"p\">()),</span>\n    <span class=\"p\">]</span>\n</pre>\n<p>However, the model above is not ordered. The children of a same parent will be\nordered by primary key. You can specify how children are ordered using the\n<tt>order_by</tt> argument of <tt>PathField</tt>. If needed, you can add a field\nfor users to explicitly order these objects, typically a position field.\nExample model:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">django.db.models</span> <span class=\"kn\">import</span> <span class=\"p\">(</span>\n    <span class=\"n\">Model</span><span class=\"p\">,</span> <span class=\"n\">CharField</span><span class=\"p\">,</span> <span class=\"n\">ForeignKey</span><span class=\"p\">,</span> <span class=\"n\">IntegerField</span><span class=\"p\">,</span> <span class=\"n\">BooleanField</span><span class=\"p\">)</span>\n<span class=\"kn\">from</span> <span class=\"nn\">tree.fields</span> <span class=\"kn\">import</span> <span class=\"n\">PathField</span>\n<span class=\"kn\">from</span> <span class=\"nn\">tree.models</span> <span class=\"kn\">import</span> <span class=\"n\">TreeModelMixin</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">YourModel</span><span class=\"p\">(</span><span class=\"n\">Model</span><span class=\"p\">,</span> <span class=\"n\">TreeModelMixin</span><span class=\"p\">):</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">30</span><span class=\"p\">)</span>\n    <span class=\"n\">parent</span> <span class=\"o\">=</span> <span class=\"n\">ForeignKey</span><span class=\"p\">(</span><span class=\"s1\">'self'</span><span class=\"p\">,</span> <span class=\"n\">null</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">blank</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"n\">position</span> <span class=\"o\">=</span> <span class=\"n\">IntegerField</span><span class=\"p\">(</span><span class=\"n\">default</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"n\">PathField</span><span class=\"p\">(</span><span class=\"n\">order_by</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'position'</span><span class=\"p\">,</span> <span class=\"s1\">'name'</span><span class=\"p\">])</span>\n    <span class=\"n\">public</span> <span class=\"o\">=</span> <span class=\"n\">BooleanField</span><span class=\"p\">(</span><span class=\"n\">default</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">ordering</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">'path'</span><span class=\"p\">,)</span>\n</pre>\n<p>And the corresponding migration:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">django.db</span> <span class=\"kn\">import</span> <span class=\"n\">models</span><span class=\"p\">,</span> <span class=\"n\">migrations</span>\n<span class=\"kn\">from</span> <span class=\"nn\">tree.operations</span> <span class=\"kn\">import</span> <span class=\"n\">CreateTreeTrigger</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Migration</span><span class=\"p\">(</span><span class=\"n\">migrations</span><span class=\"o\">.</span><span class=\"n\">Migration</span><span class=\"p\">):</span>\n    <span class=\"n\">dependencies</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"p\">(</span><span class=\"s1\">'tree'</span><span class=\"p\">,</span> <span class=\"s1\">'0001_initial'</span><span class=\"p\">),</span>\n    <span class=\"p\">]</span>\n\n    <span class=\"n\">operations</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"n\">migrations</span><span class=\"o\">.</span><span class=\"n\">AddField</span><span class=\"p\">(</span><span class=\"s1\">'YourModel'</span><span class=\"p\">,</span> <span class=\"s1\">'position'</span><span class=\"p\">,</span>\n                            <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">IntegerField</span><span class=\"p\">(</span><span class=\"n\">default</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">))</span>\n        <span class=\"n\">CreateTreeTrigger</span><span class=\"p\">(</span><span class=\"s1\">'YourModel'</span><span class=\"p\">),</span>\n    <span class=\"p\">]</span>\n</pre>\n<p>Here, the children of a same parent will be ordered by position, and then\nby name if the position is the same.</p>\n<div>\n<p>Note</p>\n<p>You can also use <tt>PathField</tt> without adding a <tt>CreateTreeTrigger</tt>\noperation. However, the field will not automatically be updated, you\nwill have to do it by yourself. In most cases this is not useful, so you\nshould not use <tt>PathField</tt> without <tt>CreateTreeTrigger</tt> unless you know\nwhat you are doing.</p>\n</div>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p><tt>PathField</tt> is automatically filled thanks to <tt>CreateTreeTrigger</tt>,\nyou don\u2019t need to set, modify, or even see its value once it is installed.\nBut you can use the <tt>Path</tt> object it stores or the more convenient\n<tt>TreeModelMixin</tt> to get tree information about the current instance,\nor make complex queries on the whole tree structure.\nExample to show you most of the possibilities:</p>\n<pre><span class=\"n\">obj</span> <span class=\"o\">=</span> <span class=\"n\">YourModel</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">get_level</span><span class=\"p\">()</span>\n<span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">get_level</span><span class=\"p\">()</span>  <span class=\"c1\"># Shortcut for the previous method, if you use</span>\n                 <span class=\"c1\"># `TreeModelMixin`. Same for other object methods below.</span>\n<span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">is_root</span><span class=\"p\">()</span>\n<span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">is_leaf</span><span class=\"p\">()</span>\n<span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">get_children</span><span class=\"p\">()</span>\n<span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">get_children</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">public</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">get_ancestors</span><span class=\"p\">()</span>\n<span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">get_ancestors</span><span class=\"p\">(</span><span class=\"n\">include_self</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">get_descendants</span><span class=\"p\">(</span><span class=\"n\">include_self</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">get_siblings</span><span class=\"p\">()</span>\n<span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">get_prev_sibling</span><span class=\"p\">()</span>  <span class=\"c1\"># Fetches the previous sibling.</span>\n<span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">get_next_sibling</span><span class=\"p\">()</span>\n<span class=\"c1\"># Same as `get_prev_sibling`, except that we get the first public one.</span>\n<span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">get_prev_siblings</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">public</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">first</span><span class=\"p\">()</span>\n<span class=\"n\">other</span> <span class=\"o\">=</span> <span class=\"n\">YourModel</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">is_ancestor_of</span><span class=\"p\">(</span><span class=\"n\">other</span><span class=\"p\">)</span>\n<span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">is_descendant_of</span><span class=\"p\">(</span><span class=\"n\">other</span><span class=\"p\">,</span> <span class=\"n\">include_self</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">YourModel</span><span class=\"o\">.</span><span class=\"n\">get_roots</span><span class=\"p\">()</span>\n\n<span class=\"c1\">#</span>\n<span class=\"c1\"># Advanced usage</span>\n<span class=\"c1\"># Use the following methods only if you understand exactly what they mean.</span>\n<span class=\"c1\">#</span>\n\n<span class=\"n\">YourModel</span><span class=\"o\">.</span><span class=\"n\">rebuild_paths</span><span class=\"p\">()</span>  <span class=\"c1\"># Rebuilds all paths of this field, useful only</span>\n                           <span class=\"c1\"># if something is broken, which shouldn\u2019t happen.</span>\n<span class=\"n\">YourModel</span><span class=\"o\">.</span><span class=\"n\">disable_tree_trigger</span><span class=\"p\">()</span>  <span class=\"c1\"># Disables the SQL trigger.</span>\n<span class=\"n\">YourModel</span><span class=\"o\">.</span><span class=\"n\">enable_tree_trigger</span><span class=\"p\">()</span>   <span class=\"c1\"># Restores the SQL trigger.</span>\n<span class=\"k\">with</span> <span class=\"n\">YourModel</span><span class=\"o\">.</span><span class=\"n\">disabled_tree_trigger</span><span class=\"p\">():</span>\n    <span class=\"c1\"># What happens inside this context manager is ignored</span>\n    <span class=\"c1\"># by the SQL trigger.</span>\n    <span class=\"c1\"># The trigger is restored after that, even if there an error occurred.</span>\n    <span class=\"k\">pass</span>\n</pre>\n<p>There is also a bunch of less useful lookups and transforms\navailable. They will be documented with examples in the future.</p>\n</div>\n<div id=\"differences-with-mptt-and-treebeard\">\n<h2>Differences with MPTT and treebeard</h2>\n<h2 id=\"level-vs-depth\"><span class=\"section-subtitle\">Level vs depth</span></h2>\n<p>django-mptt and django-treebeard use two different names to designate almost\nthe same thing: MPTT uses level and treebeard uses depth.\nBoth are integers to show how much distant is a node from the top of the tree.\nThe only difference is that level should start by convention with 1 and depth\nshould start with 0.</p>\n<p>Unfortunately, <strong>both MPTT and treebeard are wrong about the indexing</strong>:\nMPTT starts its level with 0 and treebeard starts its depth with 1.</p>\n<p><strong>Django-tree finally fixes this issue by implementing a level starting by 1</strong>,\nand no depth to avoid confusion. One name had to be chosen, and I find that\n\u201clevel\u201d represents more accurately the idea that we deal with an abstract tree,\nwhere all the node of the same level are on the same row.\nIn comparison, \u201cdepth\u201d sounds like we\u2019re actually digging a real root,\nand it gives the impression that a child of a root\ncan be at a different depth than a child of another root, like in real life.</p>\n</div>\n\n          </div>"}, "last_serial": 3700906, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "6c6ef16028f70059c1bc7309f7d98253", "sha256": "734fc9ea7867bcdbb70c6aeb6ba8f9b2cf53debba4d9d4c47f2a23ca99d5a071"}, "downloads": -1, "filename": "django_tree-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "6c6ef16028f70059c1bc7309f7d98253", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 34028, "upload_time": "2018-03-23T16:24:35", "upload_time_iso_8601": "2018-03-23T16:24:35.230782Z", "url": "https://files.pythonhosted.org/packages/be/d8/882d45b4f32fbf0503d667eff6d0d30c172c1cf4fdc2c5bfffaab9d90bc6/django_tree-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "95a32e5bb6684444d8c189b15379a2f6", "sha256": "ca4f9e51101b33f3f7d3a799bbfe5152429ca7e1461a6ec84f64f601cda999dc"}, "downloads": -1, "filename": "django-tree-0.1.0.tar.gz", "has_sig": false, "md5_digest": "95a32e5bb6684444d8c189b15379a2f6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30244, "upload_time": "2018-03-23T16:24:33", "upload_time_iso_8601": "2018-03-23T16:24:33.170062Z", "url": "https://files.pythonhosted.org/packages/88/69/483b12abfb2638dd20aa5d205562103ac597e815ad8dcc1bfd165b91dac2/django-tree-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "1b283ae85b8cb6f36043de225b7f06ba", "sha256": "55a8c8746a37adafad23b3a937d07ac20d733ca5e1fbb980b08b78a2d0430940"}, "downloads": -1, "filename": "django_tree-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "1b283ae85b8cb6f36043de225b7f06ba", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 34023, "upload_time": "2018-03-23T16:35:56", "upload_time_iso_8601": "2018-03-23T16:35:56.749689Z", "url": "https://files.pythonhosted.org/packages/be/93/baa46270827b3e16c6538f0c9b32eed060a38e60d5183f0923c27a193bf6/django_tree-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "25c583c4eb48089c65c755cf176811f1", "sha256": "374d746254f21bb559a256c009cb5a922a742ba143628b0b64204c8eadf07db1"}, "downloads": -1, "filename": "django-tree-0.2.0.tar.gz", "has_sig": false, "md5_digest": "25c583c4eb48089c65c755cf176811f1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30248, "upload_time": "2018-03-23T16:35:54", "upload_time_iso_8601": "2018-03-23T16:35:54.774394Z", "url": "https://files.pythonhosted.org/packages/47/f9/dbddfc56ad1e61d9f5092417a096bf696db4f22f85d4ce66f1b84dc39492/django-tree-0.2.0.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "3c07fadcc75673e05415cf0e6daee627", "sha256": "802e7b152ddde9ad87c381a0353ee7b8bfb83c1b6ac0e758d0d93004e276021e"}, "downloads": -1, "filename": "django_tree-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "3c07fadcc75673e05415cf0e6daee627", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 35326, "upload_time": "2018-03-23T22:43:36", "upload_time_iso_8601": "2018-03-23T22:43:36.096725Z", "url": "https://files.pythonhosted.org/packages/ff/f5/e3fb2578c81d045fb925736ca74935d97c4a354b1b7b72e795ed3fae73e6/django_tree-0.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "82af1a47c03979466b8b98d84e52bd1d", "sha256": "0161a870ad579f6f364f493e7f03332084cbf4ef72cbb8d6f30f2985d81abb7f"}, "downloads": -1, "filename": "django-tree-0.3.0.tar.gz", "has_sig": false, "md5_digest": "82af1a47c03979466b8b98d84e52bd1d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 31149, "upload_time": "2018-03-23T22:43:34", "upload_time_iso_8601": "2018-03-23T22:43:34.018572Z", "url": "https://files.pythonhosted.org/packages/16/b1/638ae29224a26163a29b89dfc5cd7e96b3d28bc60cc6d63f3afc9de7f30c/django-tree-0.3.0.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "094d51b901dbeade4d57dd0bd76db626", "sha256": "8597c901661928c1fdc70fe9a03fec6e8639989ce896a57d02c98352737bd1af"}, "downloads": -1, "filename": "django_tree-0.3.1-py3-none-any.whl", "has_sig": false, "md5_digest": "094d51b901dbeade4d57dd0bd76db626", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 35384, "upload_time": "2018-03-24T02:28:43", "upload_time_iso_8601": "2018-03-24T02:28:43.387016Z", "url": "https://files.pythonhosted.org/packages/47/3e/e2b1e18d535a109a2853ab42468708c33fe4fedb39dfa2c0cab70c6a5e6c/django_tree-0.3.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "83c596d3666d0503490a363999667032", "sha256": "fa5b1794b21b33137f7a57fb8f0114a530d545d0a96fee9e8a28b16e81be88b6"}, "downloads": -1, "filename": "django-tree-0.3.1.tar.gz", "has_sig": false, "md5_digest": "83c596d3666d0503490a363999667032", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 31191, "upload_time": "2018-03-24T02:28:41", "upload_time_iso_8601": "2018-03-24T02:28:41.356106Z", "url": "https://files.pythonhosted.org/packages/e1/2c/a2c81b75656a6b7409ef1846d5e48f0ba520450b058419d2d39fa71adb6d/django-tree-0.3.1.tar.gz", "yanked": false}], "0.3.2": [{"comment_text": "", "digests": {"md5": "81d691959bb21017d65d6d796549411e", "sha256": "9df8d5b15a083ca457bcca2294d4241f8d0b41db6e18df9697a3c09c522ad9de"}, "downloads": -1, "filename": "django_tree-0.3.2-py3-none-any.whl", "has_sig": false, "md5_digest": "81d691959bb21017d65d6d796549411e", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 35587, "upload_time": "2018-03-24T04:30:41", "upload_time_iso_8601": "2018-03-24T04:30:41.644523Z", "url": "https://files.pythonhosted.org/packages/bd/f7/4e0a5bbe3bec1b27c7887b090b15a5d7209daec731b96c0d8130d220f072/django_tree-0.3.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "12ddb72e857bdd868d6a4adb42bfcd03", "sha256": "bd1528e9cedfb0b7d25b47a827ec4ff40741d510d387f17b2213f175b1377ec1"}, "downloads": -1, "filename": "django-tree-0.3.2.tar.gz", "has_sig": false, "md5_digest": "12ddb72e857bdd868d6a4adb42bfcd03", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 31390, "upload_time": "2018-03-24T04:30:39", "upload_time_iso_8601": "2018-03-24T04:30:39.463861Z", "url": "https://files.pythonhosted.org/packages/ce/da/4976a3f46dac026ef1dba74dfc9d2032e8b5ca904c74fcbbee7313705124/django-tree-0.3.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "81d691959bb21017d65d6d796549411e", "sha256": "9df8d5b15a083ca457bcca2294d4241f8d0b41db6e18df9697a3c09c522ad9de"}, "downloads": -1, "filename": "django_tree-0.3.2-py3-none-any.whl", "has_sig": false, "md5_digest": "81d691959bb21017d65d6d796549411e", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 35587, "upload_time": "2018-03-24T04:30:41", "upload_time_iso_8601": "2018-03-24T04:30:41.644523Z", "url": "https://files.pythonhosted.org/packages/bd/f7/4e0a5bbe3bec1b27c7887b090b15a5d7209daec731b96c0d8130d220f072/django_tree-0.3.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "12ddb72e857bdd868d6a4adb42bfcd03", "sha256": "bd1528e9cedfb0b7d25b47a827ec4ff40741d510d387f17b2213f175b1377ec1"}, "downloads": -1, "filename": "django-tree-0.3.2.tar.gz", "has_sig": false, "md5_digest": "12ddb72e857bdd868d6a4adb42bfcd03", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 31390, "upload_time": "2018-03-24T04:30:39", "upload_time_iso_8601": "2018-03-24T04:30:39.463861Z", "url": "https://files.pythonhosted.org/packages/ce/da/4976a3f46dac026ef1dba74dfc9d2032e8b5ca904c74fcbbee7313705124/django-tree-0.3.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:52:20 2020"}