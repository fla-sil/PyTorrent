{"info": {"author": "Pavel Revak", "author_email": "pavel.revak@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Topic :: Software Development :: Embedded Systems"], "description": "# PYSWD\n\nIs a python module for debugging microcontrollers with SWD using ST-Link/V2 (/V2-1) or V3 debugger.\n\nThis package also contain small command line tool.\n\n## Goal\n\nIs to create python module for access debugging interface on MCU with SWD interface.\n\nMain purpose of python module is to create automated functional and hardware tests from simple python scripts and without special firmware for microcontroller.\n\n## Compatibility\n\n### OS\nPYSWD will work on Linux, Mac and Windows.\n### Python\nPython 3.7+\n### Dependencies\n- [pyusb](https://github.com/walac/pyusb) - prefer latest version from github, especially on Windows platgorm\n- [libusb](https://github.com/libusb/libusb)\n\n## Installation:\n### from downloaded sources\n```\npip3 install .\n```\n### reinstall (upgrade):\n```\npip3 install --upgrade .\n```\n### install for editing\n```\npip3 install --editable .\n```\n### uninstall:\n```\npip3 uninstall pyswd\n```\n### using make\n```bash\nmake test\nmake install\nmake editable\nmake uninstall\n```\n\n## Python SWD module documentation\n\n### swd.Swd:\n`swd.Swd(swd_frequency=4000000, logger=None, serial_no='')`\n\n#### Arguments:\n- swd_frequency: SWD communication frequency\n- logger: logging interface (optional)\n- serial_no: serial number of connected USB ST-Link debugger (optional). Serial number can be also part from begin or end, if more devices are detected then it stops with error\n\n```Python\n>>> import swd\n>>> dev = swd.Swd()\n```\n\n### ST-Link version\nproperty with ST-Link version\n\n#### Return:\n  instance of StlinkVersion\n\n```Python\n>>> dev.get_version().str\n'ST-Link/V2 V2J27S6'\n```\n\n### Target voltage\nGet target voltage measured by ST-Link\n\n#### Return:\n  float target voltage in volts\n\n```Python\n>>> dev.get_target_voltage()\n3.21\n```\n\n### ID code\nGet MCU ID code\n\n#### Return:\n  32bit unsigned with ID code\n\n```Python\n>>> hex(dev.get_idcode())\n'0xbb11477'\n```\n\n### Get memory register\n`get_mem32(address)`\n\n#### Arguments:\n- address: address in memory, must be aligned to 32bits\n\n#### Return:\n  32bit unsigned data from memory\n\n```Python\n>>> hex(dev.get_mem32(0x08000000))\n'0x20001000'\n```\n\n### Set memory register\n`set_mem32(address, data)`\n\n#### Arguments:\n- address: address in memory, must be aligned to 32bits\n- data: 32bit unsigned data\n\n```Python\n>>> dev.set_mem32(0x20000200, 0x12345678)\n>>> hex(dev.get_mem32(0x20000200))\n'0x12345678'\n```\n\n### Read memory\n- `read_mem(address, size)` - automatically select read access\n- `read_mem8(address, size)` - read using 8 bit access\n- `read_mem16(address, size)` - read using 16 bit access\n- `read_mem32(address, size)` - read using 32 bit access\n\n#### Arguments:\n- address: address in memory\n- size: number of bytes to read from memory\n\n#### Return:\n  iterable of read data\n\n```Python\n>>> data = dev.read_mem(0x08000000, 16)\n>>> ' '.join(['%02x' % d for d in data])\n'00 10 00 20 45 00 00 08 41 00 00 08 41 00 00 08'\n```\n\n### Write memory\n- `write_mem(address, data)` - automatically select write access\n- `write_mem8(address, data)` - write using 8 bit access\n- `write_mem16(address, data)` - write using 16 bit access\n- `write_mem32(address, data)` - write using 32 bit access\n\n#### Arguments:\n- address: address in memory\n- data: list or iterable of bytes whic will be stored into memory\n\n```Python\n>>> dev.write_mem(0x20000100, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n>>> data = dev.read_mem(0x20000100, 15)\n>>> ' '.join(['%02x' % d for d in data])\n'01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f'\n```\n\n### Fill memory\n- `fill_mem(address, pattern, size)` - automatically select fill access\n- `fill_mem8(address, pattern, size)` - fill using 8 bit access\n- `fill_mem16(address, pattern, size)` - fill using 16 bit access\n- `fill_mem32(address, pattern, size)` - fill using 32 bit access\n\n#### Arguments:\n- address: address in memory\n- pattern: list or iterable of bytes whic will be stored into memory\n- size: number of bytes to fill memory\n\n```Python\n>>> dev.fill_mem(0x20000300, [5, 6, 7], 20)\n>>> data = dev.read_mem(0x20000300, 20)\n>>> ' '.join(['%02x' % d for d in data])\n'05 06 07 05 06 07 05 06 07 05 06 07 05 06 07 05 06 07 05 06'\n```\n\n### Read core register\n`get_reg(register)`\nOn CortexM platform this will work only if program is halted\n\n#### Arguments:\n- register: is numeric coded register (e.g. 0: R0, 1: R1, ...)\n\n#### Return:\n  32bit unsigned data\n\n```Python\n>>> hex(dev.get_reg(1))\n'0x0800012e'\n```\n\n### Read all core registers\n`get_reg_all()`\nOn CortexM platform this will work only if program is halted\n\n#### Return:\n  list of 32bit unsigned data for all registers\n\n```Python\n>>> dev.get_reg_all()\n[0,  0,  16942,  10,  100,  0,  0,  0,  0,  0,  0,  0,  10,  604502776,  134288075,  134284002,  1627389952,  604502776,  0,  0,  67125248]\n```\n\n### Write core register\n`get_reg(register)`\nOn CortexM platform this will work only if program is halted\n\n#### Arguments:\n- register: is numeric coded register (e.g. 0: R0, 1: R1, ...)\n- data: 32bit unsigned data\n\n```Python\n>>> dev.set_reg(1, 0x12345678)\n```\n\n### swd.CortexM:\n`swd.CortexM(swd)`\n\n#### Arguments:\n- swd: instance of Swd\n\n```Python\n>>> import swd\n>>> dev = swd.Swd()\n>>> cm = swd.CortexM(dev)\n```\n\n### Read core register\n`get_reg(register)`\nOn CortexM platform this will work only if program is halted\n\n#### Arguments:\n- register: name of register (e.g.: 'R0', 'R1', 'SP', 'PC', ...)\n\n#### Return:\n  32bit unsigned data\n\n```Python\n>>> hex(cm.get_reg('PC'))\n'0x0800012e'\n```\n\n### Write core register\n`set_reg(register)`\nOn CortexM platform this will work only if program is halted\n\n#### Arguments:\n- register: name of register (e.g.: 'R0', 'R1', 'SP', 'PC', ...)\n- data: 32bit unsigned data\n\n```Python\n>>> cm.set_reg('R2', 0x12345678)\n```\n\n### Read all core registers\n`get_reg_all()`\nOn CortexM platform this will work only if program is halted\n\n#### Return:\n  dictionary with register name as key and as value 32bit unsigned data for each register\n\n```Python\n>>> cm.get_reg_all()\n{'LR': 134288075,\n 'MSP': 604502776,\n 'PC': 134284002,\n 'PSP': 0,\n 'PSR': 1627389952,\n 'R0': 0,\n 'R1': 0,\n 'R10': 0,\n 'R11': 0,\n 'R12': 10,\n 'R2': 16942,\n 'R3': 10,\n 'R4': 100,\n 'R5': 0,\n 'R6': 0,\n 'R7': 0,\n 'R8': 0,\n 'R9': 0,\n 'SP': 604502776}\n```\n\n### Reset\n`reset()`\n\n```Python\n>>> cm.reset()\n```\n\n### Reset and halt\n`reset_halt()`\n\n```Python\n>>> cm.reset_halt()\n```\n\n### Halt core\n`halt()`\n\n```Python\n>>> cm.halt()\n```\n\n### step program\n`step()`\n\n```Python\n>>> cm.step()\n```\n\n### Run in debug mode\n`run()`\n\n```Python\n>>> cm.run()\n```\n\n### Disable debug mode and run\n`nodebug()`\n\n```Python\n>>> cm.nodebug()\n```\n\n### Check if MCU is halted\n`is_halted()`\n\n#### Return:\n  True if MCU is halted, or False if is running\n\n```Python\n>>> cm.is_halted()\nTrue\n```\n\n## Python application\nSimple tool for access MCU debugging features from command line. Is installed together with python module.\n\n```\n$ pyswd --help\n```\n### Usage:\n```\npyswd [-h] [-V] [-q] [-d] [-i] [-v] [-f FREQ] [action [action ...]]\n```\n### positional arguments:\n```\naction                actions will be processed sequentially\n```\n### Optional arguments:\n```\n-h, --help            show this help message and exit\n-V, --version         show program's version number and exit\n-q, --quite           quite output\n-d, --debug           increase debug output\n-i, --info            increase info output\n-v, --verbose         increase verbose output\n-f FREQ, --freq FREQ  set SWD frequency\n-s SERIAL, --serial SERIAL\n                        select ST-Link by serial number (enough is part of serial number: begin or end\n```\n### List of available actions:\n```\n  dump8:{addr}[:{size}]     print content of memory 8 bit register or dump\n  dump16:{addr}[:{size}]    print content of memory 16 bit register or dump\n  dump32:{addr}[:{size}]    print content of memory 32 bit register or dump\n  dump:{addr}[:{size}]      print content of memory 32 bit register or 8 bit dump\n\n  set8:{addr}:{data}[:{data}..]     set 8 bit memory\n  set16:{addr}:{data}[:{data}..]    set 16 bit memory\n  set32:{addr}:{data}[:{data}..]    set 32 bit memory\n  set:{addr}:{data}[:{data}..]      set 32 bit memory register or 8 bit memory area\n\n  fill8:{addr}:{size}:{pattern}     fill memory with 8 bit pattern\n\n  reg:all                   print all core register\n  reg:{reg}                 print content of core register\n  reg:{reg}:{data}          set core register\n\n  reset[:halt]              reset core or halt after reset\n  run[:nodebug]             run core\n  step[:{n}]                step core (n-times)\n  halt                      halt core\n\n  sleep:{seconds}           sleep (float) - insert delay between commands\n```\n(numerical values can be in different formats, like: 42, 0x2a, 0o52, 0b101010, 32K, 1M, ..)\n\n## License\nWhole project is under MIT license", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/pavelrevak/pyswd", "keywords": "SWD debugger STM32 STLINK CORTEX-M ARM", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "pyswd", "package_url": "https://pypi.org/project/pyswd/", "platform": "", "project_url": "https://pypi.org/project/pyswd/", "project_urls": {"Homepage": "https://github.com/pavelrevak/pyswd"}, "release_url": "https://pypi.org/project/pyswd/1.0.0/", "requires_dist": null, "requires_python": "", "summary": "Is a python module for debugging microcontrollers with SWD using ST-Link/V2 (/V2-1) or V3 debugger. This package also contain small command line tool.", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>PYSWD</h1>\n<p>Is a python module for debugging microcontrollers with SWD using ST-Link/V2 (/V2-1) or V3 debugger.</p>\n<p>This package also contain small command line tool.</p>\n<h2>Goal</h2>\n<p>Is to create python module for access debugging interface on MCU with SWD interface.</p>\n<p>Main purpose of python module is to create automated functional and hardware tests from simple python scripts and without special firmware for microcontroller.</p>\n<h2>Compatibility</h2>\n<h3>OS</h3>\n<p>PYSWD will work on Linux, Mac and Windows.</p>\n<h3>Python</h3>\n<p>Python 3.7+</p>\n<h3>Dependencies</h3>\n<ul>\n<li><a href=\"https://github.com/walac/pyusb\" rel=\"nofollow\">pyusb</a> - prefer latest version from github, especially on Windows platgorm</li>\n<li><a href=\"https://github.com/libusb/libusb\" rel=\"nofollow\">libusb</a></li>\n</ul>\n<h2>Installation:</h2>\n<h3>from downloaded sources</h3>\n<pre><code>pip3 install .\n</code></pre>\n<h3>reinstall (upgrade):</h3>\n<pre><code>pip3 install --upgrade .\n</code></pre>\n<h3>install for editing</h3>\n<pre><code>pip3 install --editable .\n</code></pre>\n<h3>uninstall:</h3>\n<pre><code>pip3 uninstall pyswd\n</code></pre>\n<h3>using make</h3>\n<pre>make <span class=\"nb\">test</span>\nmake install\nmake editable\nmake uninstall\n</pre>\n<h2>Python SWD module documentation</h2>\n<h3>swd.Swd:</h3>\n<p><code>swd.Swd(swd_frequency=4000000, logger=None, serial_no='')</code></p>\n<h4>Arguments:</h4>\n<ul>\n<li>swd_frequency: SWD communication frequency</li>\n<li>logger: logging interface (optional)</li>\n<li>serial_no: serial number of connected USB ST-Link debugger (optional). Serial number can be also part from begin or end, if more devices are detected then it stops with error</li>\n</ul>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">swd</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">dev</span> <span class=\"o\">=</span> <span class=\"n\">swd</span><span class=\"o\">.</span><span class=\"n\">Swd</span><span class=\"p\">()</span>\n</pre>\n<h3>ST-Link version</h3>\n<p>property with ST-Link version</p>\n<h4>Return:</h4>\n<p>instance of StlinkVersion</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">dev</span><span class=\"o\">.</span><span class=\"n\">get_version</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">str</span>\n<span class=\"s1\">'ST-Link/V2 V2J27S6'</span>\n</pre>\n<h3>Target voltage</h3>\n<p>Get target voltage measured by ST-Link</p>\n<h4>Return:</h4>\n<p>float target voltage in volts</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">dev</span><span class=\"o\">.</span><span class=\"n\">get_target_voltage</span><span class=\"p\">()</span>\n<span class=\"mf\">3.21</span>\n</pre>\n<h3>ID code</h3>\n<p>Get MCU ID code</p>\n<h4>Return:</h4>\n<p>32bit unsigned with ID code</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">hex</span><span class=\"p\">(</span><span class=\"n\">dev</span><span class=\"o\">.</span><span class=\"n\">get_idcode</span><span class=\"p\">())</span>\n<span class=\"s1\">'0xbb11477'</span>\n</pre>\n<h3>Get memory register</h3>\n<p><code>get_mem32(address)</code></p>\n<h4>Arguments:</h4>\n<ul>\n<li>address: address in memory, must be aligned to 32bits</li>\n</ul>\n<h4>Return:</h4>\n<p>32bit unsigned data from memory</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">hex</span><span class=\"p\">(</span><span class=\"n\">dev</span><span class=\"o\">.</span><span class=\"n\">get_mem32</span><span class=\"p\">(</span><span class=\"mh\">0x08000000</span><span class=\"p\">))</span>\n<span class=\"s1\">'0x20001000'</span>\n</pre>\n<h3>Set memory register</h3>\n<p><code>set_mem32(address, data)</code></p>\n<h4>Arguments:</h4>\n<ul>\n<li>address: address in memory, must be aligned to 32bits</li>\n<li>data: 32bit unsigned data</li>\n</ul>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">dev</span><span class=\"o\">.</span><span class=\"n\">set_mem32</span><span class=\"p\">(</span><span class=\"mh\">0x20000200</span><span class=\"p\">,</span> <span class=\"mh\">0x12345678</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">hex</span><span class=\"p\">(</span><span class=\"n\">dev</span><span class=\"o\">.</span><span class=\"n\">get_mem32</span><span class=\"p\">(</span><span class=\"mh\">0x20000200</span><span class=\"p\">))</span>\n<span class=\"s1\">'0x12345678'</span>\n</pre>\n<h3>Read memory</h3>\n<ul>\n<li><code>read_mem(address, size)</code> - automatically select read access</li>\n<li><code>read_mem8(address, size)</code> - read using 8 bit access</li>\n<li><code>read_mem16(address, size)</code> - read using 16 bit access</li>\n<li><code>read_mem32(address, size)</code> - read using 32 bit access</li>\n</ul>\n<h4>Arguments:</h4>\n<ul>\n<li>address: address in memory</li>\n<li>size: number of bytes to read from memory</li>\n</ul>\n<h4>Return:</h4>\n<p>iterable of read data</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">dev</span><span class=\"o\">.</span><span class=\"n\">read_mem</span><span class=\"p\">(</span><span class=\"mh\">0x08000000</span><span class=\"p\">,</span> <span class=\"mi\">16</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"s1\">' '</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">([</span><span class=\"s1\">'</span><span class=\"si\">%02x</span><span class=\"s1\">'</span> <span class=\"o\">%</span> <span class=\"n\">d</span> <span class=\"k\">for</span> <span class=\"n\">d</span> <span class=\"ow\">in</span> <span class=\"n\">data</span><span class=\"p\">])</span>\n<span class=\"s1\">'00 10 00 20 45 00 00 08 41 00 00 08 41 00 00 08'</span>\n</pre>\n<h3>Write memory</h3>\n<ul>\n<li><code>write_mem(address, data)</code> - automatically select write access</li>\n<li><code>write_mem8(address, data)</code> - write using 8 bit access</li>\n<li><code>write_mem16(address, data)</code> - write using 16 bit access</li>\n<li><code>write_mem32(address, data)</code> - write using 32 bit access</li>\n</ul>\n<h4>Arguments:</h4>\n<ul>\n<li>address: address in memory</li>\n<li>data: list or iterable of bytes whic will be stored into memory</li>\n</ul>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">dev</span><span class=\"o\">.</span><span class=\"n\">write_mem</span><span class=\"p\">(</span><span class=\"mh\">0x20000100</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">13</span><span class=\"p\">,</span> <span class=\"mi\">14</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">])</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">dev</span><span class=\"o\">.</span><span class=\"n\">read_mem</span><span class=\"p\">(</span><span class=\"mh\">0x20000100</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"s1\">' '</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">([</span><span class=\"s1\">'</span><span class=\"si\">%02x</span><span class=\"s1\">'</span> <span class=\"o\">%</span> <span class=\"n\">d</span> <span class=\"k\">for</span> <span class=\"n\">d</span> <span class=\"ow\">in</span> <span class=\"n\">data</span><span class=\"p\">])</span>\n<span class=\"s1\">'01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f'</span>\n</pre>\n<h3>Fill memory</h3>\n<ul>\n<li><code>fill_mem(address, pattern, size)</code> - automatically select fill access</li>\n<li><code>fill_mem8(address, pattern, size)</code> - fill using 8 bit access</li>\n<li><code>fill_mem16(address, pattern, size)</code> - fill using 16 bit access</li>\n<li><code>fill_mem32(address, pattern, size)</code> - fill using 32 bit access</li>\n</ul>\n<h4>Arguments:</h4>\n<ul>\n<li>address: address in memory</li>\n<li>pattern: list or iterable of bytes whic will be stored into memory</li>\n<li>size: number of bytes to fill memory</li>\n</ul>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">dev</span><span class=\"o\">.</span><span class=\"n\">fill_mem</span><span class=\"p\">(</span><span class=\"mh\">0x20000300</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">],</span> <span class=\"mi\">20</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">dev</span><span class=\"o\">.</span><span class=\"n\">read_mem</span><span class=\"p\">(</span><span class=\"mh\">0x20000300</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"s1\">' '</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">([</span><span class=\"s1\">'</span><span class=\"si\">%02x</span><span class=\"s1\">'</span> <span class=\"o\">%</span> <span class=\"n\">d</span> <span class=\"k\">for</span> <span class=\"n\">d</span> <span class=\"ow\">in</span> <span class=\"n\">data</span><span class=\"p\">])</span>\n<span class=\"s1\">'05 06 07 05 06 07 05 06 07 05 06 07 05 06 07 05 06 07 05 06'</span>\n</pre>\n<h3>Read core register</h3>\n<p><code>get_reg(register)</code>\nOn CortexM platform this will work only if program is halted</p>\n<h4>Arguments:</h4>\n<ul>\n<li>register: is numeric coded register (e.g. 0: R0, 1: R1, ...)</li>\n</ul>\n<h4>Return:</h4>\n<p>32bit unsigned data</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">hex</span><span class=\"p\">(</span><span class=\"n\">dev</span><span class=\"o\">.</span><span class=\"n\">get_reg</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">))</span>\n<span class=\"s1\">'0x0800012e'</span>\n</pre>\n<h3>Read all core registers</h3>\n<p><code>get_reg_all()</code>\nOn CortexM platform this will work only if program is halted</p>\n<h4>Return:</h4>\n<p>list of 32bit unsigned data for all registers</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">dev</span><span class=\"o\">.</span><span class=\"n\">get_reg_all</span><span class=\"p\">()</span>\n<span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span>  <span class=\"mi\">0</span><span class=\"p\">,</span>  <span class=\"mi\">16942</span><span class=\"p\">,</span>  <span class=\"mi\">10</span><span class=\"p\">,</span>  <span class=\"mi\">100</span><span class=\"p\">,</span>  <span class=\"mi\">0</span><span class=\"p\">,</span>  <span class=\"mi\">0</span><span class=\"p\">,</span>  <span class=\"mi\">0</span><span class=\"p\">,</span>  <span class=\"mi\">0</span><span class=\"p\">,</span>  <span class=\"mi\">0</span><span class=\"p\">,</span>  <span class=\"mi\">0</span><span class=\"p\">,</span>  <span class=\"mi\">0</span><span class=\"p\">,</span>  <span class=\"mi\">10</span><span class=\"p\">,</span>  <span class=\"mi\">604502776</span><span class=\"p\">,</span>  <span class=\"mi\">134288075</span><span class=\"p\">,</span>  <span class=\"mi\">134284002</span><span class=\"p\">,</span>  <span class=\"mi\">1627389952</span><span class=\"p\">,</span>  <span class=\"mi\">604502776</span><span class=\"p\">,</span>  <span class=\"mi\">0</span><span class=\"p\">,</span>  <span class=\"mi\">0</span><span class=\"p\">,</span>  <span class=\"mi\">67125248</span><span class=\"p\">]</span>\n</pre>\n<h3>Write core register</h3>\n<p><code>get_reg(register)</code>\nOn CortexM platform this will work only if program is halted</p>\n<h4>Arguments:</h4>\n<ul>\n<li>register: is numeric coded register (e.g. 0: R0, 1: R1, ...)</li>\n<li>data: 32bit unsigned data</li>\n</ul>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">dev</span><span class=\"o\">.</span><span class=\"n\">set_reg</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mh\">0x12345678</span><span class=\"p\">)</span>\n</pre>\n<h3>swd.CortexM:</h3>\n<p><code>swd.CortexM(swd)</code></p>\n<h4>Arguments:</h4>\n<ul>\n<li>swd: instance of Swd</li>\n</ul>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">swd</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">dev</span> <span class=\"o\">=</span> <span class=\"n\">swd</span><span class=\"o\">.</span><span class=\"n\">Swd</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cm</span> <span class=\"o\">=</span> <span class=\"n\">swd</span><span class=\"o\">.</span><span class=\"n\">CortexM</span><span class=\"p\">(</span><span class=\"n\">dev</span><span class=\"p\">)</span>\n</pre>\n<h3>Read core register</h3>\n<p><code>get_reg(register)</code>\nOn CortexM platform this will work only if program is halted</p>\n<h4>Arguments:</h4>\n<ul>\n<li>register: name of register (e.g.: 'R0', 'R1', 'SP', 'PC', ...)</li>\n</ul>\n<h4>Return:</h4>\n<p>32bit unsigned data</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">hex</span><span class=\"p\">(</span><span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">get_reg</span><span class=\"p\">(</span><span class=\"s1\">'PC'</span><span class=\"p\">))</span>\n<span class=\"s1\">'0x0800012e'</span>\n</pre>\n<h3>Write core register</h3>\n<p><code>set_reg(register)</code>\nOn CortexM platform this will work only if program is halted</p>\n<h4>Arguments:</h4>\n<ul>\n<li>register: name of register (e.g.: 'R0', 'R1', 'SP', 'PC', ...)</li>\n<li>data: 32bit unsigned data</li>\n</ul>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">set_reg</span><span class=\"p\">(</span><span class=\"s1\">'R2'</span><span class=\"p\">,</span> <span class=\"mh\">0x12345678</span><span class=\"p\">)</span>\n</pre>\n<h3>Read all core registers</h3>\n<p><code>get_reg_all()</code>\nOn CortexM platform this will work only if program is halted</p>\n<h4>Return:</h4>\n<p>dictionary with register name as key and as value 32bit unsigned data for each register</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">get_reg_all</span><span class=\"p\">()</span>\n<span class=\"p\">{</span><span class=\"s1\">'LR'</span><span class=\"p\">:</span> <span class=\"mi\">134288075</span><span class=\"p\">,</span>\n <span class=\"s1\">'MSP'</span><span class=\"p\">:</span> <span class=\"mi\">604502776</span><span class=\"p\">,</span>\n <span class=\"s1\">'PC'</span><span class=\"p\">:</span> <span class=\"mi\">134284002</span><span class=\"p\">,</span>\n <span class=\"s1\">'PSP'</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n <span class=\"s1\">'PSR'</span><span class=\"p\">:</span> <span class=\"mi\">1627389952</span><span class=\"p\">,</span>\n <span class=\"s1\">'R0'</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n <span class=\"s1\">'R1'</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n <span class=\"s1\">'R10'</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n <span class=\"s1\">'R11'</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n <span class=\"s1\">'R12'</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"p\">,</span>\n <span class=\"s1\">'R2'</span><span class=\"p\">:</span> <span class=\"mi\">16942</span><span class=\"p\">,</span>\n <span class=\"s1\">'R3'</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"p\">,</span>\n <span class=\"s1\">'R4'</span><span class=\"p\">:</span> <span class=\"mi\">100</span><span class=\"p\">,</span>\n <span class=\"s1\">'R5'</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n <span class=\"s1\">'R6'</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n <span class=\"s1\">'R7'</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n <span class=\"s1\">'R8'</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n <span class=\"s1\">'R9'</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n <span class=\"s1\">'SP'</span><span class=\"p\">:</span> <span class=\"mi\">604502776</span><span class=\"p\">}</span>\n</pre>\n<h3>Reset</h3>\n<p><code>reset()</code></p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">reset</span><span class=\"p\">()</span>\n</pre>\n<h3>Reset and halt</h3>\n<p><code>reset_halt()</code></p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">reset_halt</span><span class=\"p\">()</span>\n</pre>\n<h3>Halt core</h3>\n<p><code>halt()</code></p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">halt</span><span class=\"p\">()</span>\n</pre>\n<h3>step program</h3>\n<p><code>step()</code></p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">step</span><span class=\"p\">()</span>\n</pre>\n<h3>Run in debug mode</h3>\n<p><code>run()</code></p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n</pre>\n<h3>Disable debug mode and run</h3>\n<p><code>nodebug()</code></p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">nodebug</span><span class=\"p\">()</span>\n</pre>\n<h3>Check if MCU is halted</h3>\n<p><code>is_halted()</code></p>\n<h4>Return:</h4>\n<p>True if MCU is halted, or False if is running</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">is_halted</span><span class=\"p\">()</span>\n<span class=\"kc\">True</span>\n</pre>\n<h2>Python application</h2>\n<p>Simple tool for access MCU debugging features from command line. Is installed together with python module.</p>\n<pre><code>$ pyswd --help\n</code></pre>\n<h3>Usage:</h3>\n<pre><code>pyswd [-h] [-V] [-q] [-d] [-i] [-v] [-f FREQ] [action [action ...]]\n</code></pre>\n<h3>positional arguments:</h3>\n<pre><code>action                actions will be processed sequentially\n</code></pre>\n<h3>Optional arguments:</h3>\n<pre><code>-h, --help            show this help message and exit\n-V, --version         show program's version number and exit\n-q, --quite           quite output\n-d, --debug           increase debug output\n-i, --info            increase info output\n-v, --verbose         increase verbose output\n-f FREQ, --freq FREQ  set SWD frequency\n-s SERIAL, --serial SERIAL\n                        select ST-Link by serial number (enough is part of serial number: begin or end\n</code></pre>\n<h3>List of available actions:</h3>\n<pre><code>  dump8:{addr}[:{size}]     print content of memory 8 bit register or dump\n  dump16:{addr}[:{size}]    print content of memory 16 bit register or dump\n  dump32:{addr}[:{size}]    print content of memory 32 bit register or dump\n  dump:{addr}[:{size}]      print content of memory 32 bit register or 8 bit dump\n\n  set8:{addr}:{data}[:{data}..]     set 8 bit memory\n  set16:{addr}:{data}[:{data}..]    set 16 bit memory\n  set32:{addr}:{data}[:{data}..]    set 32 bit memory\n  set:{addr}:{data}[:{data}..]      set 32 bit memory register or 8 bit memory area\n\n  fill8:{addr}:{size}:{pattern}     fill memory with 8 bit pattern\n\n  reg:all                   print all core register\n  reg:{reg}                 print content of core register\n  reg:{reg}:{data}          set core register\n\n  reset[:halt]              reset core or halt after reset\n  run[:nodebug]             run core\n  step[:{n}]                step core (n-times)\n  halt                      halt core\n\n  sleep:{seconds}           sleep (float) - insert delay between commands\n</code></pre>\n<p>(numerical values can be in different formats, like: 42, 0x2a, 0o52, 0b101010, 32K, 1M, ..)</p>\n<h2>License</h2>\n<p>Whole project is under MIT license</p>\n\n          </div>"}, "last_serial": 6720635, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "0401787e70f4f8e6d38f880987758dbf", "sha256": "ab19e5536baaaa1b252961b09026f2d521a4ba6eabf0fcc2fd3ee3c7b9f0f0c5"}, "downloads": -1, "filename": "pyswd-1.0.0.tar.gz", "has_sig": false, "md5_digest": "0401787e70f4f8e6d38f880987758dbf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25410, "upload_time": "2020-02-28T21:40:33", "upload_time_iso_8601": "2020-02-28T21:40:33.084597Z", "url": "https://files.pythonhosted.org/packages/60/7e/ad4d0bf450f1018fa636b56a33109e0e147f287d37291d922d89e5251a98/pyswd-1.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "0401787e70f4f8e6d38f880987758dbf", "sha256": "ab19e5536baaaa1b252961b09026f2d521a4ba6eabf0fcc2fd3ee3c7b9f0f0c5"}, "downloads": -1, "filename": "pyswd-1.0.0.tar.gz", "has_sig": false, "md5_digest": "0401787e70f4f8e6d38f880987758dbf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25410, "upload_time": "2020-02-28T21:40:33", "upload_time_iso_8601": "2020-02-28T21:40:33.084597Z", "url": "https://files.pythonhosted.org/packages/60/7e/ad4d0bf450f1018fa636b56a33109e0e147f287d37291d922d89e5251a98/pyswd-1.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:55:47 2020"}