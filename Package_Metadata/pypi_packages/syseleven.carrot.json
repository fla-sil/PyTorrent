{"info": {"author": "Ask Solem", "author_email": "ask@celeryproject.org", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Framework :: Django", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Communications", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: System :: Distributed Computing"], "description": "##############################################\n carrot - AMQP Messaging Framework for Python\n##############################################\n\n:Version: 0.10.7\n\nStatus\n------\n\nCarrot is discontinued in favor of the new `Kombu`_ framework.\n\n* Kombu is ready, start to use it now!\n* Kombu comes with a Carrot compatible API, so it's easy to port your software.\n* Carrot will not be actively maintained, only critical bugs will be fixed.\n\nKombu links:\n\n    * Download: http://pypi.python.org/pypi/kombu\n    * Documentation: http://packages.python.org/kombu\n    * Development: http://github.com/ask/kombu\n\n.. _`Kombu`: http://pypi.python.org/pypi/kombu\n\n** ORIGINAL CARROT README CONTINUES BELOW **\n\nIntroduction\n------------\n\n`carrot` is an `AMQP`_ messaging queue framework. AMQP is the Advanced Message\nQueuing Protocol, an open standard protocol for message orientation, queuing,\nrouting, reliability and security.\n\nThe aim of `carrot` is to make messaging in Python as easy as possible by\nproviding a high-level interface for producing and consuming messages. At the\nsame time it is a goal to re-use what is already available as much as possible.\n\n`carrot` has pluggable messaging back-ends, so it is possible to support\nseveral messaging systems. Currently, there is support for `AMQP`_\n(`py-amqplib`_, `pika`_), `STOMP`_ (`python-stomp`_). There's also an\nin-memory backend for testing purposes, using the `Python queue module`_.\n\nSeveral AMQP message broker implementations exists, including `RabbitMQ`_,\n`ZeroMQ`_ and `Apache ActiveMQ`_. You'll need to have one of these installed,\npersonally we've been using `RabbitMQ`_.\n\nBefore you start playing with ``carrot``, you should probably read up on\nAMQP, and you could start with the excellent article about using RabbitMQ\nunder Python, `Rabbits and warrens`_. For more detailed information, you can\nrefer to the `Wikipedia article about AMQP`_.\n\n.. _`RabbitMQ`: http://www.rabbitmq.com/\n.. _`ZeroMQ`: http://www.zeromq.org/\n.. _`AMQP`: http://amqp.org\n.. _`STOMP`: http://stomp.codehaus.org\n.. _`python-stomp`: http://bitbucket.org/asksol/python-stomp\n.. _`Python Queue module`: http://docs.python.org/library/queue.html\n.. _`Apache ActiveMQ`: http://activemq.apache.org/\n.. _`Django`: http://www.djangoproject.com/\n.. _`Rabbits and warrens`: http://blogs.digitar.com/jjww/2009/01/rabbits-and-warrens/\n.. _`py-amqplib`: http://barryp.org/software/py-amqplib/\n.. _`pika`: http://github.com/tonyg/pika\n.. _`Wikipedia article about AMQP`: http://en.wikipedia.org/wiki/AMQP\n\nDocumentation\n-------------\n\nCarrot is using Sphinx, and the latest documentation is available at GitHub:\n\n    http://github.com/ask/carrot/\n\nInstallation\n============\n\nYou can install ``carrot`` either via the Python Package Index (PyPI)\nor from source.\n\nTo install using ``pip``,::\n\n    $ pip install carrot\n\n\nTo install using ``easy_install``,::\n\n    $ easy_install carrot\n\n\nIf you have downloaded a source tarball you can install it\nby doing the following,::\n\n    $ python setup.py build\n    # python setup.py install # as root\n\n\nTerminology\n===========\n\nThere are some concepts you should be familiar with before starting:\n\n    * Publishers\n\n        Publishers sends messages to an exchange.\n\n    * Exchanges\n\n        Messages are sent to exchanges. Exchanges are named and can be\n        configured to use one of several routing algorithms. The exchange\n        routes the messages to consumers by matching the routing key in the\n        message with the routing key the consumer provides when binding to\n        the exchange.\n\n    * Consumers\n\n        Consumers declares a queue, binds it to a exchange and receives\n        messages from it.\n\n    * Queues\n\n        Queues receive messages sent to exchanges. The queues are declared\n        by consumers.\n\n    * Routing keys\n\n        Every message has a routing key.  The interpretation of the routing\n        key depends on the exchange type. There are four default exchange\n        types defined by the AMQP standard, and vendors can define custom\n        types (so see your vendors manual for details).\n\n        These are the default exchange types defined by AMQP/0.8:\n\n            * Direct exchange\n\n                Matches if the routing key property of the message and\n                the ``routing_key`` attribute of the consumer are identical.\n\n            * Fan-out exchange\n\n                Always matches, even if the binding does not have a routing\n                key.\n\n            * Topic exchange\n\n                Matches the routing key property of the message by a primitive\n                pattern matching scheme. The message routing key then consists\n                of words separated by dots (``\".\"``, like domain names), and\n                two special characters are available; star (``\"*\"``) and hash\n                (``\"#\"``). The star matches any word, and the hash matches\n                zero or more words. For example ``\"*.stock.#\"`` matches the\n                routing keys ``\"usd.stock\"`` and ``\"eur.stock.db\"`` but not\n                ``\"stock.nasdaq\"``.\n\n\nExamples\n========\n\nCreating a connection\n---------------------\n\n    You can set up a connection by creating an instance of\n    ``carrot.messaging.BrokerConnection``, with the appropriate options for\n    your broker:\n\n    >>> from carrot.connection import BrokerConnection\n    >>> conn = BrokerConnection(hostname=\"localhost\", port=5672,\n    ...                           userid=\"guest\", password=\"guest\",\n    ...                           virtual_host=\"/\")\n\n\n    If you're using Django you can use the\n    ``carrot.connection.DjangoBrokerConnection`` class instead, which loads\n    the connection settings from your ``settings.py``::\n\n       BROKER_HOST = \"localhost\"\n       BROKER_PORT = 5672\n       BROKER_USER = \"guest\"\n       BROKER_PASSWORD = \"guest\"\n       BROKER_VHOST = \"/\"\n\n    Then create a connection by doing:\n\n        >>> from carrot.connection import DjangoBrokerConnection\n        >>> conn = DjangoBrokerConnection()\n\n\n\nReceiving messages using a Consumer\n-----------------------------------\n\nFirst we open up a Python shell and start a message consumer.\n\nThis consumer declares a queue named ``\"feed\"``, receiving messages with\nthe routing key ``\"importer\"`` from the ``\"feed\"`` exchange.\n\nThe example then uses the consumers ``wait()`` method to go into consume\nmode, where it continuously polls the queue for new messages, and when a\nmessage is received it passes the message to all registered callbacks.\n\n    >>> from carrot.messaging import Consumer\n    >>> consumer = Consumer(connection=conn, queue=\"feed\",\n    ...                     exchange=\"feed\", routing_key=\"importer\")\n    >>> def import_feed_callback(message_data, message):\n    ...     feed_url = message_data[\"import_feed\"]\n    ...     print(\"Got feed import message for: %s\" % feed_url)\n    ...     # something importing this feed url\n    ...     # import_feed(feed_url)\n    ...     message.ack()\n    >>> consumer.register_callback(import_feed_callback)\n    >>> consumer.wait() # Go into the consumer loop.\n\nSending messages using a Publisher\n----------------------------------\n\nThen we open up another Python shell to send some messages to the consumer\ndefined in the last section.\n\n    >>> from carrot.messaging import Publisher\n    >>> publisher = Publisher(connection=conn,\n    ...                       exchange=\"feed\", routing_key=\"importer\")\n    >>> publisher.send({\"import_feed\": \"http://cnn.com/rss/edition.rss\"})\n    >>> publisher.close()\n\n\nLook in the first Python shell again (where ``consumer.wait()`` is running),\nwhere the following text has been printed to the screen::\n\n   Got feed import message for: http://cnn.com/rss/edition.rss  \n\n\nSerialization of Data\n-----------------------\n\nBy default every message is encoded using `JSON`_, so sending\nPython data structures like dictionaries and lists works.\n`YAML`_, `msgpack`_ and Python's built-in ``pickle`` module is also supported,\nand if needed you can register any custom serialization scheme you\nwant to use.\n\n.. _`JSON`: http://www.json.org/\n.. _`YAML`: http://yaml.org/\n.. _`msgpack`: http://msgpack.sourceforge.net/\n\nEach option has its advantages and disadvantages.\n\n``json`` -- JSON is supported in many programming languages, is now\n    a standard part of Python (since 2.6), and is fairly fast to \n    decode using the modern Python libraries such as ``cjson or \n    ``simplejson``.\n    \n    The primary disadvantage to ``JSON`` is that it limits you to \n    the following data types: strings, unicode, floats, boolean, \n    dictionaries, and lists.  Decimals and dates are notably missing.\n    \n    Also, binary data will be transferred using base64 encoding, which\n    will cause the transferred data to be around 34% larger than an \n    encoding which supports native binary types. \n    \n    However, if your data fits inside the above constraints and \n    you need cross-language support, the default setting of ``JSON``\n    is probably your best choice. \n    \n``pickle`` -- If you have no desire to support any language other than\n    Python, then using the ``pickle`` encoding will gain you \n    the support of all built-in Python data types (except class instances), \n    smaller messages when sending binary files, and a slight speedup\n    over ``JSON`` processing.\n\n``yaml`` -- YAML has many of the same characteristics as ``json``, \n    except that it natively supports more data types (including dates, \n    recursive references, etc.)\n    \n    However, the Python libraries for YAML are a good bit slower\n    than the libraries for JSON. \n    \n    If you need a more expressive set of data types and need to maintain\n    cross-language compatibility, then ``YAML`` may be a better fit\n    than the above. \n\nTo instruct carrot to use an alternate serialization method, \nuse one of the following options.\n\n    1.  Set the serialization option on a per-Publisher basis: \n        \n            >>> from carrot.messaging import Publisher\n            >>> publisher = Publisher(connection=conn,\n            ...                       exchange=\"feed\", routing_key=\"importer\",\n            ...                       serializer=\"yaml\")\n\n    2.  Set the serialization option on a per-call basis\n\n            >>> from carrot.messaging import Publisher\n            >>> publisher = Publisher(connection=conn,\n            ...                       exchange=\"feed\", routing_key=\"importer\")\n            >>> publisher.send({\"import_feed\": \"http://cnn.com/rss/edition.rss\"}, \n            ...                serializer=\"pickle\")\n            >>> publisher.close()\n\nNote that ``Consumer``s do not need the serialization method specified in \ntheir code.  They can auto-detect the serialization method since we supply \nthe ``Content-type`` header as part of the AMQP message.\n\n\nSending raw data without Serialization\n---------------------------------------\n\nIn some cases, you don't need your message data to be serialized. If you\npass in a plain string or unicode object as your message, then carrot will\nnot waste cycles serializing/deserializing the data.\n\nYou can optionally specify a ``content_type`` and ``content_encoding``\nfor the raw data:\n\n    >>> from carrot.messaging import Publisher\n    >>> publisher = Publisher(connection=conn,\n    ...                       exchange=\"feed\",\n                              routing_key=\"import_pictures\")\n    >>> publisher.send(open('~/my_picture.jpg','rb').read(), \n                       content_type=\"image/jpeg\", \n                       content_encoding=\"binary\")\n    >>> publisher.close()\n    \nThe ``message`` object returned by the ``Consumer`` class will have a \n``content_type`` and ``content_encoding`` attribute. \n\n\nReceiving messages without a callback\n--------------------------------------\n\nYou can also poll the queue manually, by using the ``fetch`` method.\nThis method returns a ``Message`` object, from where you can get the\nmessage body, de-serialize the body to get the data, acknowledge, reject or\nre-queue the message.\n\n    >>> consumer = Consumer(connection=conn, queue=\"feed\",\n    ...                     exchange=\"feed\", routing_key=\"importer\")\n    >>> message = consumer.fetch()\n    >>> if message:\n    ...    message_data = message.payload\n    ...    message.ack()\n    ... else:\n    ...     # No messages waiting on the queue.\n    >>> consumer.close()\n\nSub-classing the messaging classes\n----------------------------------\n\nThe ``Consumer``, and ``Publisher`` classes can also be sub classed. Thus you\ncan define the above publisher and consumer like so:\n\n    >>> from carrot.messaging import Publisher, Consumer\n\n    >>> class FeedPublisher(Publisher):\n    ...     exchange = \"feed\"\n    ...     routing_key = \"importer\"\n    ...\n    ...     def import_feed(self, feed_url):\n    ...         return self.send({\"action\": \"import_feed\",\n    ...                           \"feed_url\": feed_url})\n\n    >>> class FeedConsumer(Consumer):\n    ...     queue = \"feed\"\n    ...     exchange = \"feed\"\n    ...     routing_key = \"importer\"\n    ...\n    ...     def receive(self, message_data, message):\n    ...         action = message_data[\"action\"]\n    ...         if action == \"import_feed\":\n    ...             # something importing this feed\n    ...             # import_feed(message_data[\"feed_url\"])\n                    message.ack()\n    ...         else:\n    ...             raise Exception(\"Unknown action: %s\" % action)\n\n    >>> publisher = FeedPublisher(connection=conn)\n    >>> publisher.import_feed(\"http://cnn.com/rss/edition.rss\")\n    >>> publisher.close()\n\n    >>> consumer = FeedConsumer(connection=conn)\n    >>> consumer.wait() # Go into the consumer loop.\n\nGetting Help\n============\n\nMailing list\n------------\n\nJoin the `carrot-users`_ mailing list.\n\n.. _`carrot-users`: http://groups.google.com/group/carrot-users/\n\nBug tracker\n===========\n\nIf you have any suggestions, bug reports or annoyances please report them\nto our issue tracker at http://github.com/ask/carrot/issues/\n\nContributing\n============\n\nDevelopment of ``carrot`` happens at Github: http://github.com/ask/carrot\n\nYou are highly encouraged to participate in the development. If you don't\nlike Github (for some reason) you're welcome to send regular patches.\n\nLicense\n=======\n\nThis software is licensed under the ``New BSD License``. See the ``LICENSE``\nfile in the top distribution directory for the full license text.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/syseleven/carrot/", "keywords": null, "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "syseleven.carrot", "package_url": "https://pypi.org/project/syseleven.carrot/", "platform": "any", "project_url": "https://pypi.org/project/syseleven.carrot/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/syseleven/carrot/"}, "release_url": "https://pypi.org/project/syseleven.carrot/0.10.999/", "requires_dist": null, "requires_python": null, "summary": "AMQP Messaging Framework for Python", "version": "0.10.999", "yanked": false, "html_description": "<div class=\"project-description\">\n            <table>\n<col>\n<col>\n<tbody>\n<tr><th>Version:</th>\n<td>0.10.7</td></tr>\n</tbody>\n</table>\n<div id=\"status\">\n<h2>Status</h2>\n<p>Carrot is discontinued in favor of the new <a href=\"http://pypi.python.org/pypi/kombu\" rel=\"nofollow\">Kombu</a> framework.</p>\n<ul>\n<li>Kombu is ready, start to use it now!</li>\n<li>Kombu comes with a Carrot compatible API, so it\u2019s easy to port your software.</li>\n<li>Carrot will not be actively maintained, only critical bugs will be fixed.</li>\n</ul>\n<p>Kombu links:</p>\n<blockquote>\n<ul>\n<li>Download: <a href=\"http://pypi.python.org/pypi/kombu\" rel=\"nofollow\">http://pypi.python.org/pypi/kombu</a></li>\n<li>Documentation: <a href=\"http://packages.python.org/kombu\" rel=\"nofollow\">http://packages.python.org/kombu</a></li>\n<li>Development: <a href=\"http://github.com/ask/kombu\" rel=\"nofollow\">http://github.com/ask/kombu</a></li>\n</ul>\n</blockquote>\n<p>** ORIGINAL CARROT README CONTINUES BELOW **</p>\n</div>\n<div id=\"introduction\">\n<h2>Introduction</h2>\n<p><cite>carrot</cite> is an <a href=\"http://amqp.org\" rel=\"nofollow\">AMQP</a> messaging queue framework. AMQP is the Advanced Message\nQueuing Protocol, an open standard protocol for message orientation, queuing,\nrouting, reliability and security.</p>\n<p>The aim of <cite>carrot</cite> is to make messaging in Python as easy as possible by\nproviding a high-level interface for producing and consuming messages. At the\nsame time it is a goal to re-use what is already available as much as possible.</p>\n<p><cite>carrot</cite> has pluggable messaging back-ends, so it is possible to support\nseveral messaging systems. Currently, there is support for <a href=\"http://amqp.org\" rel=\"nofollow\">AMQP</a>\n(<a href=\"http://barryp.org/software/py-amqplib/\" rel=\"nofollow\">py-amqplib</a>, <a href=\"http://github.com/tonyg/pika\" rel=\"nofollow\">pika</a>), <a href=\"http://stomp.codehaus.org\" rel=\"nofollow\">STOMP</a> (<a href=\"http://bitbucket.org/asksol/python-stomp\" rel=\"nofollow\">python-stomp</a>). There\u2019s also an\nin-memory backend for testing purposes, using the <a href=\"http://docs.python.org/library/queue.html\" rel=\"nofollow\">Python queue module</a>.</p>\n<p>Several AMQP message broker implementations exists, including <a href=\"http://www.rabbitmq.com/\" rel=\"nofollow\">RabbitMQ</a>,\n<a href=\"http://www.zeromq.org/\" rel=\"nofollow\">ZeroMQ</a> and <a href=\"http://activemq.apache.org/\" rel=\"nofollow\">Apache ActiveMQ</a>. You\u2019ll need to have one of these installed,\npersonally we\u2019ve been using <a href=\"http://www.rabbitmq.com/\" rel=\"nofollow\">RabbitMQ</a>.</p>\n<p>Before you start playing with <tt>carrot</tt>, you should probably read up on\nAMQP, and you could start with the excellent article about using RabbitMQ\nunder Python, <a href=\"http://blogs.digitar.com/jjww/2009/01/rabbits-and-warrens/\" rel=\"nofollow\">Rabbits and warrens</a>. For more detailed information, you can\nrefer to the <a href=\"http://en.wikipedia.org/wiki/AMQP\" rel=\"nofollow\">Wikipedia article about AMQP</a>.</p>\n</div>\n<div id=\"documentation\">\n<h2>Documentation</h2>\n<p>Carrot is using Sphinx, and the latest documentation is available at GitHub:</p>\n<blockquote>\n<a href=\"http://github.com/ask/carrot/\" rel=\"nofollow\">http://github.com/ask/carrot/</a></blockquote>\n<div id=\"installation\">\n<h3>Installation</h3>\n<p>You can install <tt>carrot</tt> either via the Python Package Index (PyPI)\nor from source.</p>\n<p>To install using <tt>pip</tt>,:</p>\n<pre>$ pip install carrot\n</pre>\n<p>To install using <tt>easy_install</tt>,:</p>\n<pre>$ easy_install carrot\n</pre>\n<p>If you have downloaded a source tarball you can install it\nby doing the following,:</p>\n<pre>$ python setup.py build\n# python setup.py install # as root\n</pre>\n</div>\n<div id=\"terminology\">\n<h3>Terminology</h3>\n<p>There are some concepts you should be familiar with before starting:</p>\n<blockquote>\n<ul>\n<li><p>Publishers</p>\n<blockquote>\n<p>Publishers sends messages to an exchange.</p>\n</blockquote>\n</li>\n<li><p>Exchanges</p>\n<blockquote>\n<p>Messages are sent to exchanges. Exchanges are named and can be\nconfigured to use one of several routing algorithms. The exchange\nroutes the messages to consumers by matching the routing key in the\nmessage with the routing key the consumer provides when binding to\nthe exchange.</p>\n</blockquote>\n</li>\n<li><p>Consumers</p>\n<blockquote>\n<p>Consumers declares a queue, binds it to a exchange and receives\nmessages from it.</p>\n</blockquote>\n</li>\n<li><p>Queues</p>\n<blockquote>\n<p>Queues receive messages sent to exchanges. The queues are declared\nby consumers.</p>\n</blockquote>\n</li>\n<li><p>Routing keys</p>\n<blockquote>\n<p>Every message has a routing key.  The interpretation of the routing\nkey depends on the exchange type. There are four default exchange\ntypes defined by the AMQP standard, and vendors can define custom\ntypes (so see your vendors manual for details).</p>\n<p>These are the default exchange types defined by AMQP/0.8:</p>\n<blockquote>\n<ul>\n<li><p>Direct exchange</p>\n<blockquote>\n<p>Matches if the routing key property of the message and\nthe <tt>routing_key</tt> attribute of the consumer are identical.</p>\n</blockquote>\n</li>\n<li><p>Fan-out exchange</p>\n<blockquote>\n<p>Always matches, even if the binding does not have a routing\nkey.</p>\n</blockquote>\n</li>\n<li><p>Topic exchange</p>\n<blockquote>\n<p>Matches the routing key property of the message by a primitive\npattern matching scheme. The message routing key then consists\nof words separated by dots (<tt>\".\"</tt>, like domain names), and\ntwo special characters are available; star (<tt>\"*\"</tt>) and hash\n(<tt>\"#\"</tt>). The star matches any word, and the hash matches\nzero or more words. For example <tt><span class=\"pre\">\"*.stock.#\"</span></tt> matches the\nrouting keys <tt>\"usd.stock\"</tt> and <tt>\"eur.stock.db\"</tt> but not\n<tt>\"stock.nasdaq\"</tt>.</p>\n</blockquote>\n</li>\n</ul>\n</blockquote>\n</blockquote>\n</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"examples\">\n<h3>Examples</h3>\n</div>\n</div>\n<div id=\"creating-a-connection\">\n<h2>Creating a connection</h2>\n<blockquote>\n<p>You can set up a connection by creating an instance of\n<tt>carrot.messaging.BrokerConnection</tt>, with the appropriate options for\nyour broker:</p>\n<pre>&gt;&gt;&gt; from carrot.connection import BrokerConnection\n&gt;&gt;&gt; conn = BrokerConnection(hostname=\"localhost\", port=5672,\n...                           userid=\"guest\", password=\"guest\",\n...                           virtual_host=\"/\")\n</pre>\n<p>If you\u2019re using Django you can use the\n<tt>carrot.connection.DjangoBrokerConnection</tt> class instead, which loads\nthe connection settings from your <tt>settings.py</tt>:</p>\n<pre>BROKER_HOST = \"localhost\"\nBROKER_PORT = 5672\nBROKER_USER = \"guest\"\nBROKER_PASSWORD = \"guest\"\nBROKER_VHOST = \"/\"\n</pre>\n<p>Then create a connection by doing:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; from carrot.connection import DjangoBrokerConnection\n&gt;&gt;&gt; conn = DjangoBrokerConnection()\n</pre>\n</blockquote>\n</blockquote>\n</div>\n<div id=\"receiving-messages-using-a-consumer\">\n<h2>Receiving messages using a Consumer</h2>\n<p>First we open up a Python shell and start a message consumer.</p>\n<p>This consumer declares a queue named <tt>\"feed\"</tt>, receiving messages with\nthe routing key <tt>\"importer\"</tt> from the <tt>\"feed\"</tt> exchange.</p>\n<p>The example then uses the consumers <tt>wait()</tt> method to go into consume\nmode, where it continuously polls the queue for new messages, and when a\nmessage is received it passes the message to all registered callbacks.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; from carrot.messaging import Consumer\n&gt;&gt;&gt; consumer = Consumer(connection=conn, queue=\"feed\",\n...                     exchange=\"feed\", routing_key=\"importer\")\n&gt;&gt;&gt; def import_feed_callback(message_data, message):\n...     feed_url = message_data[\"import_feed\"]\n...     print(\"Got feed import message for: %s\" % feed_url)\n...     # something importing this feed url\n...     # import_feed(feed_url)\n...     message.ack()\n&gt;&gt;&gt; consumer.register_callback(import_feed_callback)\n&gt;&gt;&gt; consumer.wait() # Go into the consumer loop.\n</pre>\n</blockquote>\n</div>\n<div id=\"sending-messages-using-a-publisher\">\n<h2>Sending messages using a Publisher</h2>\n<p>Then we open up another Python shell to send some messages to the consumer\ndefined in the last section.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; from carrot.messaging import Publisher\n&gt;&gt;&gt; publisher = Publisher(connection=conn,\n...                       exchange=\"feed\", routing_key=\"importer\")\n&gt;&gt;&gt; publisher.send({\"import_feed\": \"http://cnn.com/rss/edition.rss\"})\n&gt;&gt;&gt; publisher.close()\n</pre>\n</blockquote>\n<p>Look in the first Python shell again (where <tt>consumer.wait()</tt> is running),\nwhere the following text has been printed to the screen:</p>\n<pre>Got feed import message for: http://cnn.com/rss/edition.rss\n</pre>\n</div>\n<div id=\"serialization-of-data\">\n<h2>Serialization of Data</h2>\n<p>By default every message is encoded using <a href=\"http://www.json.org/\" rel=\"nofollow\">JSON</a>, so sending\nPython data structures like dictionaries and lists works.\n<a href=\"http://yaml.org/\" rel=\"nofollow\">YAML</a>, <a href=\"http://msgpack.sourceforge.net/\" rel=\"nofollow\">msgpack</a> and Python\u2019s built-in <tt>pickle</tt> module is also supported,\nand if needed you can register any custom serialization scheme you\nwant to use.</p>\n<p>Each option has its advantages and disadvantages.</p>\n<dl>\n<dt><tt>json</tt> \u2013 JSON is supported in many programming languages, is now</dt>\n<dd><p>a standard part of Python (since 2.6), and is fairly fast to\ndecode using the modern Python libraries such as <tt>cjson or\n``simplejson</tt>.</p>\n<p>The primary disadvantage to <tt>JSON</tt> is that it limits you to\nthe following data types: strings, unicode, floats, boolean,\ndictionaries, and lists.  Decimals and dates are notably missing.</p>\n<p>Also, binary data will be transferred using base64 encoding, which\nwill cause the transferred data to be around 34% larger than an\nencoding which supports native binary types.</p>\n<p>However, if your data fits inside the above constraints and\nyou need cross-language support, the default setting of <tt>JSON</tt>\nis probably your best choice.</p>\n</dd>\n<dt><tt>pickle</tt> \u2013 If you have no desire to support any language other than</dt>\n<dd>Python, then using the <tt>pickle</tt> encoding will gain you\nthe support of all built-in Python data types (except class instances),\nsmaller messages when sending binary files, and a slight speedup\nover <tt>JSON</tt> processing.</dd>\n<dt><tt>yaml</tt> \u2013 YAML has many of the same characteristics as <tt>json</tt>,</dt>\n<dd><p>except that it natively supports more data types (including dates,\nrecursive references, etc.)</p>\n<p>However, the Python libraries for YAML are a good bit slower\nthan the libraries for JSON.</p>\n<p>If you need a more expressive set of data types and need to maintain\ncross-language compatibility, then <tt>YAML</tt> may be a better fit\nthan the above.</p>\n</dd>\n</dl>\n<p>To instruct carrot to use an alternate serialization method,\nuse one of the following options.</p>\n<blockquote>\n<ol>\n<li><p>Set the serialization option on a per-Publisher basis:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; from carrot.messaging import Publisher\n&gt;&gt;&gt; publisher = Publisher(connection=conn,\n...                       exchange=\"feed\", routing_key=\"importer\",\n...                       serializer=\"yaml\")\n</pre>\n</blockquote>\n</li>\n<li><p>Set the serialization option on a per-call basis</p>\n<blockquote>\n<pre>&gt;&gt;&gt; from carrot.messaging import Publisher\n&gt;&gt;&gt; publisher = Publisher(connection=conn,\n...                       exchange=\"feed\", routing_key=\"importer\")\n&gt;&gt;&gt; publisher.send({\"import_feed\": \"http://cnn.com/rss/edition.rss\"},\n...                serializer=\"pickle\")\n&gt;&gt;&gt; publisher.close()\n</pre>\n</blockquote>\n</li>\n</ol>\n</blockquote>\n<p>Note that <tt><span class=\"pre\">Consumer``s</span> do not need the serialization method specified in\ntheir code.\u00a0 They can <span class=\"pre\">auto-detect</span> the serialization method since we supply\nthe <span class=\"pre\">``Content-type</span></tt> header as part of the AMQP message.</p>\n</div>\n<div id=\"sending-raw-data-without-serialization\">\n<h2>Sending raw data without Serialization</h2>\n<p>In some cases, you don\u2019t need your message data to be serialized. If you\npass in a plain string or unicode object as your message, then carrot will\nnot waste cycles serializing/deserializing the data.</p>\n<p>You can optionally specify a <tt>content_type</tt> and <tt>content_encoding</tt>\nfor the raw data:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; from carrot.messaging import Publisher\n&gt;&gt;&gt; publisher = Publisher(connection=conn,\n...                       exchange=\"feed\",\n                          routing_key=\"import_pictures\")\n&gt;&gt;&gt; publisher.send(open('~/my_picture.jpg','rb').read(),\n                   content_type=\"image/jpeg\",\n                   content_encoding=\"binary\")\n&gt;&gt;&gt; publisher.close()\n</pre>\n</blockquote>\n<p>The <tt>message</tt> object returned by the <tt>Consumer</tt> class will have a\n<tt>content_type</tt> and <tt>content_encoding</tt> attribute.</p>\n</div>\n<div id=\"receiving-messages-without-a-callback\">\n<h2>Receiving messages without a callback</h2>\n<p>You can also poll the queue manually, by using the <tt>fetch</tt> method.\nThis method returns a <tt>Message</tt> object, from where you can get the\nmessage body, de-serialize the body to get the data, acknowledge, reject or\nre-queue the message.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; consumer = Consumer(connection=conn, queue=\"feed\",\n...                     exchange=\"feed\", routing_key=\"importer\")\n&gt;&gt;&gt; message = consumer.fetch()\n&gt;&gt;&gt; if message:\n...    message_data = message.payload\n...    message.ack()\n... else:\n...     # No messages waiting on the queue.\n&gt;&gt;&gt; consumer.close()\n</pre>\n</blockquote>\n</div>\n<div id=\"sub-classing-the-messaging-classes\">\n<h2>Sub-classing the messaging classes</h2>\n<p>The <tt>Consumer</tt>, and <tt>Publisher</tt> classes can also be sub classed. Thus you\ncan define the above publisher and consumer like so:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; from carrot.messaging import Publisher, Consumer\n</pre>\n<pre>&gt;&gt;&gt; class FeedPublisher(Publisher):\n...     exchange = \"feed\"\n...     routing_key = \"importer\"\n...\n...     def import_feed(self, feed_url):\n...         return self.send({\"action\": \"import_feed\",\n...                           \"feed_url\": feed_url})\n</pre>\n<pre>&gt;&gt;&gt; class FeedConsumer(Consumer):\n...     queue = \"feed\"\n...     exchange = \"feed\"\n...     routing_key = \"importer\"\n...\n...     def receive(self, message_data, message):\n...         action = message_data[\"action\"]\n...         if action == \"import_feed\":\n...             # something importing this feed\n...             # import_feed(message_data[\"feed_url\"])\n                message.ack()\n...         else:\n...             raise Exception(\"Unknown action: %s\" % action)\n</pre>\n<pre>&gt;&gt;&gt; publisher = FeedPublisher(connection=conn)\n&gt;&gt;&gt; publisher.import_feed(\"http://cnn.com/rss/edition.rss\")\n&gt;&gt;&gt; publisher.close()\n</pre>\n<pre>&gt;&gt;&gt; consumer = FeedConsumer(connection=conn)\n&gt;&gt;&gt; consumer.wait() # Go into the consumer loop.\n</pre>\n</blockquote>\n<div id=\"getting-help\">\n<h3>Getting Help</h3>\n</div>\n</div>\n<div id=\"mailing-list\">\n<h2>Mailing list</h2>\n<p>Join the <a href=\"http://groups.google.com/group/carrot-users/\" rel=\"nofollow\">carrot-users</a> mailing list.</p>\n<div id=\"bug-tracker\">\n<h3>Bug tracker</h3>\n<p>If you have any suggestions, bug reports or annoyances please report them\nto our issue tracker at <a href=\"http://github.com/ask/carrot/issues/\" rel=\"nofollow\">http://github.com/ask/carrot/issues/</a></p>\n</div>\n<div id=\"contributing\">\n<h3>Contributing</h3>\n<p>Development of <tt>carrot</tt> happens at Github: <a href=\"http://github.com/ask/carrot\" rel=\"nofollow\">http://github.com/ask/carrot</a></p>\n<p>You are highly encouraged to participate in the development. If you don\u2019t\nlike Github (for some reason) you\u2019re welcome to send regular patches.</p>\n</div>\n<div id=\"license\">\n<h3>License</h3>\n<p>This software is licensed under the <tt>New BSD License</tt>. See the <tt>LICENSE</tt>\nfile in the top distribution directory for the full license text.</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 2449163, "releases": {"0.10.999": [{"comment_text": "", "digests": {"md5": "12aff44090c0395eee8a592235e4d35a", "sha256": "e6c678eba15d4dddc50ee6ec822ca38ada64df304b8183912e83d3adb7078c3d"}, "downloads": -1, "filename": "syseleven.carrot-0.10.999.tar.gz", "has_sig": false, "md5_digest": "12aff44090c0395eee8a592235e4d35a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 62522, "upload_time": "2016-11-08T15:03:51", "upload_time_iso_8601": "2016-11-08T15:03:51.838096Z", "url": "https://files.pythonhosted.org/packages/66/83/474c4fce6fcbb3e3aa00df27f94bde87f94a2c41f955aabf5a40870d2db3/syseleven.carrot-0.10.999.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "12aff44090c0395eee8a592235e4d35a", "sha256": "e6c678eba15d4dddc50ee6ec822ca38ada64df304b8183912e83d3adb7078c3d"}, "downloads": -1, "filename": "syseleven.carrot-0.10.999.tar.gz", "has_sig": false, "md5_digest": "12aff44090c0395eee8a592235e4d35a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 62522, "upload_time": "2016-11-08T15:03:51", "upload_time_iso_8601": "2016-11-08T15:03:51.838096Z", "url": "https://files.pythonhosted.org/packages/66/83/474c4fce6fcbb3e3aa00df27f94bde87f94a2c41f955aabf5a40870d2db3/syseleven.carrot-0.10.999.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:58:54 2020"}