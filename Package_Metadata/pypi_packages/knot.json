{"info": {"author": "Jaap Verloop", "author_email": "j.verloop@gmail.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "Knot\n****\n\n.. image:: https://badge.fury.io/py/knot.png\n  :target: http://badge.fury.io/py/knot\n\n.. image:: https://travis-ci.org/jaapverloop/knot.png?branch=master\n  :target: https://travis-ci.org/jaapverloop/knot\n\nKnot is a small do-it-yourself (DIY) dependency container for Python.\n\n\nGetting started\n===============\n\nUnlike other existing implementations, knot does not make use of introspection.\nTherefore, dependencies are manually defined in a straight forward manner. The\ncontainer acts as a central registry for providers and configuration settings.\n\n\nConfiguration settings\n----------------------\n\nThe container is just an ordinary dictionary with some additional methods. As a\nresult, it is very easy to assign or retrieve data from it. Probably the most\ncommon way to assign configuration settings is passing a dict to the\nconstructor.\n\n.. code-block:: python\n\n    from knot import Container\n\n    c = Container({'host': 'localhost', 'port': 6379})\n\nObviously it is also possible to add configuration settings to an existing\ncontainer.\n\n.. code-block:: python\n\n    c = Container()\n    c['host'] = 'localhost'\n    c['port'] = 6379\n\n\nProviders\n---------\n\nA provider creates and returns a particular value or object. It has the ability\nto utilize an injected container to retrieve the necessary configuration\nsettings and dependencies.\n\nThe container expects a provider to adhere to the following rules:\n\n1. It must be callable.\n2. It must accept the container as the only argument.\n3. It must return anything except ``None``.\n\nAssigning a provider to a container is easy.\n\n.. code-block:: python\n\n    def connection(c):\n        from redis import Redis\n        return Redis(host=c['host'], port=c['port'])\n\n    c.add_provider(connection, True)\n\nIt is also possible to use a decorator.\n\n.. code-block:: python\n\n    from knot import provider\n\n    @provider(c, True)\n    def connection(c):\n        from redis import Redis\n        return Redis(host=c['host'], port=c['port'])\n\nThe second argument in ``c.add_provider(connection, True)`` and in\n``@provider(c, True)`` indicates whether or not the return value of a provider\nmust be cached.\n\nRetrieve what you have defined.\n\n.. code-block:: python\n\n    conn = c.provide('connection')\n\nFor convenience, you can also use the shortcut.\n\n.. code-block:: python\n\n    conn = c('connection')\n\n\nServices\n--------\n\nA service is just a provider with the **cache** argument set to ``True``.\nBasically this means the return value is created only once.\n\n.. code-block:: python\n\n    def connection(c):\n        from redis import Redis\n        return Redis(host=c['host'], port=c['port'])\n\n    c.add_service(connection)\n\nOr with a decorator.\n\n.. code-block:: python\n\n    from knot import service\n\n    @service(c)\n    def connection(c):\n        from redis import Redis\n        return Redis(host=c['host'], port=c['port'])\n\n    conn1 = c('connection')\n    conn2 = c('connection')\n\n    print conn1 is conn2 # True\n\n\nFactories\n---------\n\nA factory is just a provider with the **cache** argument set to ``False``.\nBasically this means the return value is created on every call.\n\n.. code-block:: python\n\n    def urgent_job(c):\n        from somewhere import Job\n        connection = c('connection')\n        return Job(connection=connection, queue='urgent')\n\n    c.add_factory(urgent_job)\n\n    job1 = c('urgent_job')\n    job1.enqueue('send_activation_mail', username='johndoe')\n\n    job2 = c('urgent_job')\n    job2.enqueue('send_activation_mail', username='janedoe')\n\n    print job1 is job2 # False\n\nOr with a decorator.\n\n.. code-block:: python\n\n    from knot import @factory\n\n    @factory(c)\n    def urgent_job(c):\n        from somewhere import Job\n        connection = c('connection')\n        return Job(connection=connection, queue='urgent')\n\n\nInstallation\n============\n\nInstall Knot with the following command:\n\n.. code-block:: console\n\n  $ pip install knot\n\n\nTests\n=====\n\nTo run the tests, install **tox** first:\n\n.. code-block:: console\n\n  $ pip install tox\n\nThen, run the tests with the following command:\n\n.. code-block:: console\n\n  $ tox\n\n\nInspiration\n===========\n\nPimple (http://pimple.sensiolabs.org/)\n\n\nLicense\n=======\n\nMIT, see **LICENSE** for more details.", "description_content_type": null, "docs_url": null, "download_url": "https://github.com/jaapverloop/knot/tarball/0.3.0", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/jaapverloop/knot", "keywords": "dependency,container", "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "knot", "package_url": "https://pypi.org/project/knot/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/knot/", "project_urls": {"Download": "https://github.com/jaapverloop/knot/tarball/0.3.0", "Homepage": "https://github.com/jaapverloop/knot"}, "release_url": "https://pypi.org/project/knot/0.4.0/", "requires_dist": null, "requires_python": null, "summary": "A small do-it-yourself dependency container.", "version": "0.4.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"http://badge.fury.io/py/knot\" rel=\"nofollow\"><img alt=\"https://badge.fury.io/py/knot.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7c0f22a5a0b7f6b689d87c5e6f3094b7e300fef1/68747470733a2f2f62616467652e667572792e696f2f70792f6b6e6f742e706e67\"></a>\n<a href=\"https://travis-ci.org/jaapverloop/knot\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/jaapverloop/knot.png?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ae5cdeb77fe3d989b7253b29f3d55279e8d3446a/68747470733a2f2f7472617669732d63692e6f72672f6a6161707665726c6f6f702f6b6e6f742e706e673f6272616e63683d6d6173746572\"></a>\n<p>Knot is a small do-it-yourself (DIY) dependency container for Python.</p>\n<div id=\"getting-started\">\n<h2>Getting started</h2>\n<p>Unlike other existing implementations, knot does not make use of introspection.\nTherefore, dependencies are manually defined in a straight forward manner. The\ncontainer acts as a central registry for providers and configuration settings.</p>\n<div id=\"configuration-settings\">\n<h3>Configuration settings</h3>\n<p>The container is just an ordinary dictionary with some additional methods. As a\nresult, it is very easy to assign or retrieve data from it. Probably the most\ncommon way to assign configuration settings is passing a dict to the\nconstructor.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">knot</span> <span class=\"kn\">import</span> <span class=\"n\">Container</span>\n\n<span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">Container</span><span class=\"p\">({</span><span class=\"s1\">'host'</span><span class=\"p\">:</span> <span class=\"s1\">'localhost'</span><span class=\"p\">,</span> <span class=\"s1\">'port'</span><span class=\"p\">:</span> <span class=\"mi\">6379</span><span class=\"p\">})</span>\n</pre>\n<p>Obviously it is also possible to add configuration settings to an existing\ncontainer.</p>\n<pre><span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">Container</span><span class=\"p\">()</span>\n<span class=\"n\">c</span><span class=\"p\">[</span><span class=\"s1\">'host'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'localhost'</span>\n<span class=\"n\">c</span><span class=\"p\">[</span><span class=\"s1\">'port'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">6379</span>\n</pre>\n</div>\n<div id=\"providers\">\n<h3>Providers</h3>\n<p>A provider creates and returns a particular value or object. It has the ability\nto utilize an injected container to retrieve the necessary configuration\nsettings and dependencies.</p>\n<p>The container expects a provider to adhere to the following rules:</p>\n<ol>\n<li>It must be callable.</li>\n<li>It must accept the container as the only argument.</li>\n<li>It must return anything except <tt>None</tt>.</li>\n</ol>\n<p>Assigning a provider to a container is easy.</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">connection</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">):</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">redis</span> <span class=\"kn\">import</span> <span class=\"n\">Redis</span>\n    <span class=\"k\">return</span> <span class=\"n\">Redis</span><span class=\"p\">(</span><span class=\"n\">host</span><span class=\"o\">=</span><span class=\"n\">c</span><span class=\"p\">[</span><span class=\"s1\">'host'</span><span class=\"p\">],</span> <span class=\"n\">port</span><span class=\"o\">=</span><span class=\"n\">c</span><span class=\"p\">[</span><span class=\"s1\">'port'</span><span class=\"p\">])</span>\n\n<span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">add_provider</span><span class=\"p\">(</span><span class=\"n\">connection</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<p>It is also possible to use a decorator.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">knot</span> <span class=\"kn\">import</span> <span class=\"n\">provider</span>\n\n<span class=\"nd\">@provider</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">connection</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">):</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">redis</span> <span class=\"kn\">import</span> <span class=\"n\">Redis</span>\n    <span class=\"k\">return</span> <span class=\"n\">Redis</span><span class=\"p\">(</span><span class=\"n\">host</span><span class=\"o\">=</span><span class=\"n\">c</span><span class=\"p\">[</span><span class=\"s1\">'host'</span><span class=\"p\">],</span> <span class=\"n\">port</span><span class=\"o\">=</span><span class=\"n\">c</span><span class=\"p\">[</span><span class=\"s1\">'port'</span><span class=\"p\">])</span>\n</pre>\n<p>The second argument in <tt>c.add_provider(connection, True)</tt> and in\n<tt>@provider(c, True)</tt> indicates whether or not the return value of a provider\nmust be cached.</p>\n<p>Retrieve what you have defined.</p>\n<pre><span class=\"n\">conn</span> <span class=\"o\">=</span> <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">provide</span><span class=\"p\">(</span><span class=\"s1\">'connection'</span><span class=\"p\">)</span>\n</pre>\n<p>For convenience, you can also use the shortcut.</p>\n<pre><span class=\"n\">conn</span> <span class=\"o\">=</span> <span class=\"n\">c</span><span class=\"p\">(</span><span class=\"s1\">'connection'</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"services\">\n<h3>Services</h3>\n<p>A service is just a provider with the <strong>cache</strong> argument set to <tt>True</tt>.\nBasically this means the return value is created only once.</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">connection</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">):</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">redis</span> <span class=\"kn\">import</span> <span class=\"n\">Redis</span>\n    <span class=\"k\">return</span> <span class=\"n\">Redis</span><span class=\"p\">(</span><span class=\"n\">host</span><span class=\"o\">=</span><span class=\"n\">c</span><span class=\"p\">[</span><span class=\"s1\">'host'</span><span class=\"p\">],</span> <span class=\"n\">port</span><span class=\"o\">=</span><span class=\"n\">c</span><span class=\"p\">[</span><span class=\"s1\">'port'</span><span class=\"p\">])</span>\n\n<span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">add_service</span><span class=\"p\">(</span><span class=\"n\">connection</span><span class=\"p\">)</span>\n</pre>\n<p>Or with a decorator.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">knot</span> <span class=\"kn\">import</span> <span class=\"n\">service</span>\n\n<span class=\"nd\">@service</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">connection</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">):</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">redis</span> <span class=\"kn\">import</span> <span class=\"n\">Redis</span>\n    <span class=\"k\">return</span> <span class=\"n\">Redis</span><span class=\"p\">(</span><span class=\"n\">host</span><span class=\"o\">=</span><span class=\"n\">c</span><span class=\"p\">[</span><span class=\"s1\">'host'</span><span class=\"p\">],</span> <span class=\"n\">port</span><span class=\"o\">=</span><span class=\"n\">c</span><span class=\"p\">[</span><span class=\"s1\">'port'</span><span class=\"p\">])</span>\n\n<span class=\"n\">conn1</span> <span class=\"o\">=</span> <span class=\"n\">c</span><span class=\"p\">(</span><span class=\"s1\">'connection'</span><span class=\"p\">)</span>\n<span class=\"n\">conn2</span> <span class=\"o\">=</span> <span class=\"n\">c</span><span class=\"p\">(</span><span class=\"s1\">'connection'</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span> <span class=\"n\">conn1</span> <span class=\"ow\">is</span> <span class=\"n\">conn2</span> <span class=\"c1\"># True</span>\n</pre>\n</div>\n<div id=\"factories\">\n<h3>Factories</h3>\n<p>A factory is just a provider with the <strong>cache</strong> argument set to <tt>False</tt>.\nBasically this means the return value is created on every call.</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">urgent_job</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">):</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">somewhere</span> <span class=\"kn\">import</span> <span class=\"n\">Job</span>\n    <span class=\"n\">connection</span> <span class=\"o\">=</span> <span class=\"n\">c</span><span class=\"p\">(</span><span class=\"s1\">'connection'</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">Job</span><span class=\"p\">(</span><span class=\"n\">connection</span><span class=\"o\">=</span><span class=\"n\">connection</span><span class=\"p\">,</span> <span class=\"n\">queue</span><span class=\"o\">=</span><span class=\"s1\">'urgent'</span><span class=\"p\">)</span>\n\n<span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">add_factory</span><span class=\"p\">(</span><span class=\"n\">urgent_job</span><span class=\"p\">)</span>\n\n<span class=\"n\">job1</span> <span class=\"o\">=</span> <span class=\"n\">c</span><span class=\"p\">(</span><span class=\"s1\">'urgent_job'</span><span class=\"p\">)</span>\n<span class=\"n\">job1</span><span class=\"o\">.</span><span class=\"n\">enqueue</span><span class=\"p\">(</span><span class=\"s1\">'send_activation_mail'</span><span class=\"p\">,</span> <span class=\"n\">username</span><span class=\"o\">=</span><span class=\"s1\">'johndoe'</span><span class=\"p\">)</span>\n\n<span class=\"n\">job2</span> <span class=\"o\">=</span> <span class=\"n\">c</span><span class=\"p\">(</span><span class=\"s1\">'urgent_job'</span><span class=\"p\">)</span>\n<span class=\"n\">job2</span><span class=\"o\">.</span><span class=\"n\">enqueue</span><span class=\"p\">(</span><span class=\"s1\">'send_activation_mail'</span><span class=\"p\">,</span> <span class=\"n\">username</span><span class=\"o\">=</span><span class=\"s1\">'janedoe'</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span> <span class=\"n\">job1</span> <span class=\"ow\">is</span> <span class=\"n\">job2</span> <span class=\"c1\"># False</span>\n</pre>\n<p>Or with a decorator.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">knot</span> <span class=\"kn\">import</span> <span class=\"nd\">@factory</span>\n\n<span class=\"nd\">@factory</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">urgent_job</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">):</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">somewhere</span> <span class=\"kn\">import</span> <span class=\"n\">Job</span>\n    <span class=\"n\">connection</span> <span class=\"o\">=</span> <span class=\"n\">c</span><span class=\"p\">(</span><span class=\"s1\">'connection'</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">Job</span><span class=\"p\">(</span><span class=\"n\">connection</span><span class=\"o\">=</span><span class=\"n\">connection</span><span class=\"p\">,</span> <span class=\"n\">queue</span><span class=\"o\">=</span><span class=\"s1\">'urgent'</span><span class=\"p\">)</span>\n</pre>\n</div>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Install Knot with the following command:</p>\n<pre><span class=\"gp\">$</span> pip install knot\n</pre>\n</div>\n<div id=\"tests\">\n<h2>Tests</h2>\n<p>To run the tests, install <strong>tox</strong> first:</p>\n<pre><span class=\"gp\">$</span> pip install tox\n</pre>\n<p>Then, run the tests with the following command:</p>\n<pre><span class=\"gp\">$</span> tox\n</pre>\n</div>\n<div id=\"inspiration\">\n<h2>Inspiration</h2>\n<p>Pimple (<a href=\"http://pimple.sensiolabs.org/\" rel=\"nofollow\">http://pimple.sensiolabs.org/</a>)</p>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>MIT, see <strong>LICENSE</strong> for more details.</p>\n</div>\n\n          </div>"}, "last_serial": 2131114, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "1042ef14312fc209c39b6b3d7f087d7b", "sha256": "52867bf346324d1c35a3669fde947efbab59991dff16963eda1ba694d8234ffd"}, "downloads": -1, "filename": "knot-0.1.0.tar.gz", "has_sig": false, "md5_digest": "1042ef14312fc209c39b6b3d7f087d7b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3576, "upload_time": "2013-07-30T10:32:22", "upload_time_iso_8601": "2013-07-30T10:32:22.555086Z", "url": "https://files.pythonhosted.org/packages/46/92/a94d6dfa4750d6ed373a170e3052eac70bf22e56b9ce12c46551d709f220/knot-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "5ad30c583394eb456d8a783190531354", "sha256": "472824e5a553a08a96899e7443e1f2660abb1786e8e20cd1ff7f96e2bafdd1dc"}, "downloads": -1, "filename": "knot-0.2.0.tar.gz", "has_sig": false, "md5_digest": "5ad30c583394eb456d8a783190531354", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4053, "upload_time": "2013-09-19T21:32:45", "upload_time_iso_8601": "2013-09-19T21:32:45.830600Z", "url": "https://files.pythonhosted.org/packages/89/4b/c8d7e356802ac7c08e826078f5ace56b44cb37046bb8b20336e259fa0a56/knot-0.2.0.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "c24193485b41b9fc064a429a60fc25a2", "sha256": "ad91327b720367b0f6cb66578d350b4288d1511731b6d451e39188df45b837e2"}, "downloads": -1, "filename": "knot-0.3.0.tar.gz", "has_sig": false, "md5_digest": "c24193485b41b9fc064a429a60fc25a2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6060, "upload_time": "2014-03-20T22:56:54", "upload_time_iso_8601": "2014-03-20T22:56:54.452290Z", "url": "https://files.pythonhosted.org/packages/be/98/55ea70faf745fdf1879665776aff675dc13c303d9047e8a08a2cc5f020c1/knot-0.3.0.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "12a27dbae187790cce721066436f8ccb", "sha256": "89e0d8274dbdf1dc38ca80d1e26a1d371ce569afb9c470aba6e9184092b9b9a8"}, "downloads": -1, "filename": "knot-0.4.0.tar.gz", "has_sig": false, "md5_digest": "12a27dbae187790cce721066436f8ccb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6088, "upload_time": "2016-05-24T13:36:01", "upload_time_iso_8601": "2016-05-24T13:36:01.254413Z", "url": "https://files.pythonhosted.org/packages/b4/e7/9bfc9313a9e603c853f5eed7607677d364a597dc64d3bb3a705f164c507c/knot-0.4.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "12a27dbae187790cce721066436f8ccb", "sha256": "89e0d8274dbdf1dc38ca80d1e26a1d371ce569afb9c470aba6e9184092b9b9a8"}, "downloads": -1, "filename": "knot-0.4.0.tar.gz", "has_sig": false, "md5_digest": "12a27dbae187790cce721066436f8ccb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6088, "upload_time": "2016-05-24T13:36:01", "upload_time_iso_8601": "2016-05-24T13:36:01.254413Z", "url": "https://files.pythonhosted.org/packages/b4/e7/9bfc9313a9e603c853f5eed7607677d364a597dc64d3bb3a705f164c507c/knot-0.4.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:49:12 2020"}