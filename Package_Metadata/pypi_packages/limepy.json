{"info": {"author": "dirkmjk", "author_email": "info@dirkmjk.nl", "bugtrack_url": null, "classifiers": [], "description": "[LimeSurvey][limesurvey] is open-source survey software. Using pandas, the limepy package simplifies a number of tasks when working with LimeSurvey data:\n\n- Downloading survey data. This requires that LimeSurvey\u2019s RemoteControl 2 API is enabled, as explained [here][LSRC2].\n- Creating a list of al the questions in the survey, with metadata.\n- Summarising data, e.g. creating value counts for multi-column items such as multiple-choice questions; calculating averages for number arrays; or creating scores for a ranking question.\n- Printing answers to open-ended questions.\n- Printing the answers of an individual respondent.\n\nNote that limepy uses f-strings and therefore requires Python 3.6 or higher.\n\nUse at your own risk and please make sure to check the results.\n\n# How is it different\n\nThere are various python packages for managing the LimeSurvey RemoteControl 2 API. While limepy can help you download survey data, the emphasis is on processing and summarising the data.\n\n# Examples\n\n## Download survey data\n\nYou can download survey data with the RemoteControl 2 API (provided the api is enabled in your LimeSurvey installation).\n\nFor a one-off download, you can of course do this manually. However, you may want to use the api if you want to write a preliminary report based on the first responses, and then automatically update it as new responses come in.\n\n```python\nfrom pathlib import Path\nfrom limepy import download\n\ncsv = download.get_responses(base_url, user_name, password, user_id, sid)\npath = Path('../data/data.csv')\npath.write_text(csv)\n```\n\n## Create Survey object\n\nA Survey object contains the data and metadata of a survey. To create a Survey object, you need:\n\n- A csv containing the survey results. You can download it manually or use the api as described above. Make sure to set heading type to 'code' and reponse type to 'short'.\n- An .lss file containing the survey structure. You can download this manually.\n\n```python\nfrom limepy.wrangle import Survey, Question\nimport pandas as pd\n\ndf = pd.read_csv('../data/data.csv', sep=';')\nmy_structure = open('../data/structure.lss').read()\n\nmy_survey = Survey(df, my_structure)\n```\n\nNote: if you use a merged dataframe (for example, data from various versions of the same questionnaire), you should reset the index before creating a Survey object.\n\n## Get list of questions with metadata\n\n```python\nmy_survey.question_list\n```\n\n## Print results for individual respondent\n\nThe `respondent` method will return a string listing the answers of an individual respondent. You need the respondent\u2019s row index.\n\n```python\nmy_survey.respondent(26)\n```\n\n## Create a readable dataframe\n\nCreate a dataframe with full questions as column names and \u2018long\u2019 responses as values.\n\n```python\nmy_survey.readable_df\n```\n\n## Create a Question object\n\nA Question object can be used to summarise data. To create a Question oject, you need a Survey object and the question id (find it in the index of the question list).\n\n```python\nmy_question = Question(my_survey, 3154)\n```\n\nIf you want to use a subset of the respondents for your analysis (e.g., exclude respondents that do not meet certain criteria, or drop duplicates), the most practical approach is probably to create a subset first and use that to create your Survey object. However, you can also use a mask if you want to create a Question object for a subset of the respondents.\n\n```python\nmy_question = Question(my_survey, 3154, mask=pd.notnull(df.iloc[:, 8]))\n```\n\n## Summarise answers to a question\n\nFor many question types, limepy can summarise the results. \n- In many cases, this will return a dataframe containing value counts (as well as Percent and Valid Percent). \n- In case of a Numerical input question, the output will be a dataframe containing the results of the pandas DataFrame `describe` method. \n- In case of a Numbers array question, the average will be calculated for each option (but you must specify the method, i.e. 'mean' or 'median'). \n- In case of a Ranking question, the result will be a dataframe with scores calculated for each item. \n- If no method has been implemented for a question type, a dataframe will be returned which contains the columns associated with the question.\n\n```python\nmy_question.summary\n```\n\nTo show the metadata associated with a question:\n\n```python\nmy_question.metadata\n```\n\n## Write answers to an open-ended question\n\nThe `write_open_ended` method creates a string listing all the answers to the question. Optionally, you can specify a list of indices of columns that contain background information you want included in the output.\n\n```python\nmy_question.write_open_ended(background_column_indices=[9])\n```\n\nYou can also create a folder and store text files containing the answers to all open-ended questions in the survey.\n\n```python\nfrom pathlib import Path\n\nremove = ' _?:/()'\n\ndef include(row):\n    for string in ['free text', 'comment']:\n        if string in row.question_type:\n            return True\n    if row.other == 'Y':\n        return True\n    return False\n\nfor qid, row in my_survey.question_list.iterrows():\n    if include(row):\n        question = row.question\n        for char in remove:\n            question = question.replace(char, ' ')\n        question = question[:25]\n        path = Path('../data/open_ended') / f'{qid} {question}.md'\n        path.write_text(Question(sv, qid).write_open_ended(background_column_indices=[9]))\n```\n\n## Create report as html\n\n```python\ndef add_table(question, question_text=None):\n    \"\"\"Add table summarising question\"\"\"\n\n    if not question_text:\n        question_text = question.question\n    html = f\"<div class='tableHeader'>{question_text}</div>\\n\"\n    html += question.summary.to_html() + '\\n'\n    help_txt = question.metadata['help']\n    if help_txt:\n        html += f\"<div class='tableCaption'>{help_txt}</div>\"\n    return html\n\n\nhtml = \"\"\"<head>\n<title>Title</title>\n<link rel=\"stylesheet\" href=\"styles.css\">\n<meta charset=\"utf-8\">\n</head>\n<body>\n\"\"\"\n\nmy_question = Question(my_survey, 44)\nhtml += add_table(my_question)\n\nhtml += \"</body>\"\n```\n\n[limesurvey]:https://en.wikipedia.org/wiki/LimeSurvey\n[LSRC2]:https://manual.limesurvey.org/RemoteControl_2_API\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/DIRKMJK/limepy", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "limepy", "package_url": "https://pypi.org/project/limepy/", "platform": "", "project_url": "https://pypi.org/project/limepy/", "project_urls": {"Homepage": "https://github.com/DIRKMJK/limepy"}, "release_url": "https://pypi.org/project/limepy/0.1.5/", "requires_dist": ["pandas", "numpy", "requests", "xmltodict"], "requires_python": "", "summary": "Download, summarise and process LimeSurvey data", "version": "0.1.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://en.wikipedia.org/wiki/LimeSurvey\" rel=\"nofollow\">LimeSurvey</a> is open-source survey software. Using pandas, the limepy package simplifies a number of tasks when working with LimeSurvey data:</p>\n<ul>\n<li>Downloading survey data. This requires that LimeSurvey\u2019s RemoteControl 2 API is enabled, as explained <a href=\"https://manual.limesurvey.org/RemoteControl_2_API\" rel=\"nofollow\">here</a>.</li>\n<li>Creating a list of al the questions in the survey, with metadata.</li>\n<li>Summarising data, e.g. creating value counts for multi-column items such as multiple-choice questions; calculating averages for number arrays; or creating scores for a ranking question.</li>\n<li>Printing answers to open-ended questions.</li>\n<li>Printing the answers of an individual respondent.</li>\n</ul>\n<p>Note that limepy uses f-strings and therefore requires Python 3.6 or higher.</p>\n<p>Use at your own risk and please make sure to check the results.</p>\n<h1>How is it different</h1>\n<p>There are various python packages for managing the LimeSurvey RemoteControl 2 API. While limepy can help you download survey data, the emphasis is on processing and summarising the data.</p>\n<h1>Examples</h1>\n<h2>Download survey data</h2>\n<p>You can download survey data with the RemoteControl 2 API (provided the api is enabled in your LimeSurvey installation).</p>\n<p>For a one-off download, you can of course do this manually. However, you may want to use the api if you want to write a preliminary report based on the first responses, and then automatically update it as new responses come in.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pathlib</span> <span class=\"kn\">import</span> <span class=\"n\">Path</span>\n<span class=\"kn\">from</span> <span class=\"nn\">limepy</span> <span class=\"kn\">import</span> <span class=\"n\">download</span>\n\n<span class=\"n\">csv</span> <span class=\"o\">=</span> <span class=\"n\">download</span><span class=\"o\">.</span><span class=\"n\">get_responses</span><span class=\"p\">(</span><span class=\"n\">base_url</span><span class=\"p\">,</span> <span class=\"n\">user_name</span><span class=\"p\">,</span> <span class=\"n\">password</span><span class=\"p\">,</span> <span class=\"n\">user_id</span><span class=\"p\">,</span> <span class=\"n\">sid</span><span class=\"p\">)</span>\n<span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"s1\">'../data/data.csv'</span><span class=\"p\">)</span>\n<span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">write_text</span><span class=\"p\">(</span><span class=\"n\">csv</span><span class=\"p\">)</span>\n</pre>\n<h2>Create Survey object</h2>\n<p>A Survey object contains the data and metadata of a survey. To create a Survey object, you need:</p>\n<ul>\n<li>A csv containing the survey results. You can download it manually or use the api as described above. Make sure to set heading type to 'code' and reponse type to 'short'.</li>\n<li>An .lss file containing the survey structure. You can download this manually.</li>\n</ul>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">limepy.wrangle</span> <span class=\"kn\">import</span> <span class=\"n\">Survey</span><span class=\"p\">,</span> <span class=\"n\">Question</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pandas</span> <span class=\"k\">as</span> <span class=\"nn\">pd</span>\n\n<span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">read_csv</span><span class=\"p\">(</span><span class=\"s1\">'../data/data.csv'</span><span class=\"p\">,</span> <span class=\"n\">sep</span><span class=\"o\">=</span><span class=\"s1\">';'</span><span class=\"p\">)</span>\n<span class=\"n\">my_structure</span> <span class=\"o\">=</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'../data/structure.lss'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">()</span>\n\n<span class=\"n\">my_survey</span> <span class=\"o\">=</span> <span class=\"n\">Survey</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">,</span> <span class=\"n\">my_structure</span><span class=\"p\">)</span>\n</pre>\n<p>Note: if you use a merged dataframe (for example, data from various versions of the same questionnaire), you should reset the index before creating a Survey object.</p>\n<h2>Get list of questions with metadata</h2>\n<pre><span class=\"n\">my_survey</span><span class=\"o\">.</span><span class=\"n\">question_list</span>\n</pre>\n<h2>Print results for individual respondent</h2>\n<p>The <code>respondent</code> method will return a string listing the answers of an individual respondent. You need the respondent\u2019s row index.</p>\n<pre><span class=\"n\">my_survey</span><span class=\"o\">.</span><span class=\"n\">respondent</span><span class=\"p\">(</span><span class=\"mi\">26</span><span class=\"p\">)</span>\n</pre>\n<h2>Create a readable dataframe</h2>\n<p>Create a dataframe with full questions as column names and \u2018long\u2019 responses as values.</p>\n<pre><span class=\"n\">my_survey</span><span class=\"o\">.</span><span class=\"n\">readable_df</span>\n</pre>\n<h2>Create a Question object</h2>\n<p>A Question object can be used to summarise data. To create a Question oject, you need a Survey object and the question id (find it in the index of the question list).</p>\n<pre><span class=\"n\">my_question</span> <span class=\"o\">=</span> <span class=\"n\">Question</span><span class=\"p\">(</span><span class=\"n\">my_survey</span><span class=\"p\">,</span> <span class=\"mi\">3154</span><span class=\"p\">)</span>\n</pre>\n<p>If you want to use a subset of the respondents for your analysis (e.g., exclude respondents that do not meet certain criteria, or drop duplicates), the most practical approach is probably to create a subset first and use that to create your Survey object. However, you can also use a mask if you want to create a Question object for a subset of the respondents.</p>\n<pre><span class=\"n\">my_question</span> <span class=\"o\">=</span> <span class=\"n\">Question</span><span class=\"p\">(</span><span class=\"n\">my_survey</span><span class=\"p\">,</span> <span class=\"mi\">3154</span><span class=\"p\">,</span> <span class=\"n\">mask</span><span class=\"o\">=</span><span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">notnull</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">iloc</span><span class=\"p\">[:,</span> <span class=\"mi\">8</span><span class=\"p\">]))</span>\n</pre>\n<h2>Summarise answers to a question</h2>\n<p>For many question types, limepy can summarise the results.</p>\n<ul>\n<li>In many cases, this will return a dataframe containing value counts (as well as Percent and Valid Percent).</li>\n<li>In case of a Numerical input question, the output will be a dataframe containing the results of the pandas DataFrame <code>describe</code> method.</li>\n<li>In case of a Numbers array question, the average will be calculated for each option (but you must specify the method, i.e. 'mean' or 'median').</li>\n<li>In case of a Ranking question, the result will be a dataframe with scores calculated for each item.</li>\n<li>If no method has been implemented for a question type, a dataframe will be returned which contains the columns associated with the question.</li>\n</ul>\n<pre><span class=\"n\">my_question</span><span class=\"o\">.</span><span class=\"n\">summary</span>\n</pre>\n<p>To show the metadata associated with a question:</p>\n<pre><span class=\"n\">my_question</span><span class=\"o\">.</span><span class=\"n\">metadata</span>\n</pre>\n<h2>Write answers to an open-ended question</h2>\n<p>The <code>write_open_ended</code> method creates a string listing all the answers to the question. Optionally, you can specify a list of indices of columns that contain background information you want included in the output.</p>\n<pre><span class=\"n\">my_question</span><span class=\"o\">.</span><span class=\"n\">write_open_ended</span><span class=\"p\">(</span><span class=\"n\">background_column_indices</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">9</span><span class=\"p\">])</span>\n</pre>\n<p>You can also create a folder and store text files containing the answers to all open-ended questions in the survey.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pathlib</span> <span class=\"kn\">import</span> <span class=\"n\">Path</span>\n\n<span class=\"n\">remove</span> <span class=\"o\">=</span> <span class=\"s1\">' _?:/()'</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">include</span><span class=\"p\">(</span><span class=\"n\">row</span><span class=\"p\">):</span>\n    <span class=\"k\">for</span> <span class=\"n\">string</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"s1\">'free text'</span><span class=\"p\">,</span> <span class=\"s1\">'comment'</span><span class=\"p\">]:</span>\n        <span class=\"k\">if</span> <span class=\"n\">string</span> <span class=\"ow\">in</span> <span class=\"n\">row</span><span class=\"o\">.</span><span class=\"n\">question_type</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"kc\">True</span>\n    <span class=\"k\">if</span> <span class=\"n\">row</span><span class=\"o\">.</span><span class=\"n\">other</span> <span class=\"o\">==</span> <span class=\"s1\">'Y'</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span>\n    <span class=\"k\">return</span> <span class=\"kc\">False</span>\n\n<span class=\"k\">for</span> <span class=\"n\">qid</span><span class=\"p\">,</span> <span class=\"n\">row</span> <span class=\"ow\">in</span> <span class=\"n\">my_survey</span><span class=\"o\">.</span><span class=\"n\">question_list</span><span class=\"o\">.</span><span class=\"n\">iterrows</span><span class=\"p\">():</span>\n    <span class=\"k\">if</span> <span class=\"n\">include</span><span class=\"p\">(</span><span class=\"n\">row</span><span class=\"p\">):</span>\n        <span class=\"n\">question</span> <span class=\"o\">=</span> <span class=\"n\">row</span><span class=\"o\">.</span><span class=\"n\">question</span>\n        <span class=\"k\">for</span> <span class=\"n\">char</span> <span class=\"ow\">in</span> <span class=\"n\">remove</span><span class=\"p\">:</span>\n            <span class=\"n\">question</span> <span class=\"o\">=</span> <span class=\"n\">question</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"n\">char</span><span class=\"p\">,</span> <span class=\"s1\">' '</span><span class=\"p\">)</span>\n        <span class=\"n\">question</span> <span class=\"o\">=</span> <span class=\"n\">question</span><span class=\"p\">[:</span><span class=\"mi\">25</span><span class=\"p\">]</span>\n        <span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"s1\">'../data/open_ended'</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"sa\">f</span><span class=\"s1\">'</span><span class=\"si\">{</span><span class=\"n\">qid</span><span class=\"si\">}</span><span class=\"s1\"> </span><span class=\"si\">{</span><span class=\"n\">question</span><span class=\"si\">}</span><span class=\"s1\">.md'</span>\n        <span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">write_text</span><span class=\"p\">(</span><span class=\"n\">Question</span><span class=\"p\">(</span><span class=\"n\">sv</span><span class=\"p\">,</span> <span class=\"n\">qid</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">write_open_ended</span><span class=\"p\">(</span><span class=\"n\">background_column_indices</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">9</span><span class=\"p\">]))</span>\n</pre>\n<h2>Create report as html</h2>\n<pre><span class=\"k\">def</span> <span class=\"nf\">add_table</span><span class=\"p\">(</span><span class=\"n\">question</span><span class=\"p\">,</span> <span class=\"n\">question_text</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Add table summarising question\"\"\"</span>\n\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">question_text</span><span class=\"p\">:</span>\n        <span class=\"n\">question_text</span> <span class=\"o\">=</span> <span class=\"n\">question</span><span class=\"o\">.</span><span class=\"n\">question</span>\n    <span class=\"n\">html</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"s2\">\"&lt;div class='tableHeader'&gt;</span><span class=\"si\">{</span><span class=\"n\">question_text</span><span class=\"si\">}</span><span class=\"s2\">&lt;/div&gt;</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span>\n    <span class=\"n\">html</span> <span class=\"o\">+=</span> <span class=\"n\">question</span><span class=\"o\">.</span><span class=\"n\">summary</span><span class=\"o\">.</span><span class=\"n\">to_html</span><span class=\"p\">()</span> <span class=\"o\">+</span> <span class=\"s1\">'</span><span class=\"se\">\\n</span><span class=\"s1\">'</span>\n    <span class=\"n\">help_txt</span> <span class=\"o\">=</span> <span class=\"n\">question</span><span class=\"o\">.</span><span class=\"n\">metadata</span><span class=\"p\">[</span><span class=\"s1\">'help'</span><span class=\"p\">]</span>\n    <span class=\"k\">if</span> <span class=\"n\">help_txt</span><span class=\"p\">:</span>\n        <span class=\"n\">html</span> <span class=\"o\">+=</span> <span class=\"sa\">f</span><span class=\"s2\">\"&lt;div class='tableCaption'&gt;</span><span class=\"si\">{</span><span class=\"n\">help_txt</span><span class=\"si\">}</span><span class=\"s2\">&lt;/div&gt;\"</span>\n    <span class=\"k\">return</span> <span class=\"n\">html</span>\n\n\n<span class=\"n\">html</span> <span class=\"o\">=</span> <span class=\"s2\">\"\"\"&lt;head&gt;</span>\n<span class=\"s2\">&lt;title&gt;Title&lt;/title&gt;</span>\n<span class=\"s2\">&lt;link rel=\"stylesheet\" href=\"styles.css\"&gt;</span>\n<span class=\"s2\">&lt;meta charset=\"utf-8\"&gt;</span>\n<span class=\"s2\">&lt;/head&gt;</span>\n<span class=\"s2\">&lt;body&gt;</span>\n<span class=\"s2\">\"\"\"</span>\n\n<span class=\"n\">my_question</span> <span class=\"o\">=</span> <span class=\"n\">Question</span><span class=\"p\">(</span><span class=\"n\">my_survey</span><span class=\"p\">,</span> <span class=\"mi\">44</span><span class=\"p\">)</span>\n<span class=\"n\">html</span> <span class=\"o\">+=</span> <span class=\"n\">add_table</span><span class=\"p\">(</span><span class=\"n\">my_question</span><span class=\"p\">)</span>\n\n<span class=\"n\">html</span> <span class=\"o\">+=</span> <span class=\"s2\">\"&lt;/body&gt;\"</span>\n</pre>\n\n          </div>"}, "last_serial": 6602949, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "69d551700925c0682c419261aec84cef", "sha256": "1c2565fcbc7e7ad054fa9db57d493f6bb56b7d855074d37de4f478e624840750"}, "downloads": -1, "filename": "limepy-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "69d551700925c0682c419261aec84cef", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8906, "upload_time": "2019-01-08T19:19:33", "upload_time_iso_8601": "2019-01-08T19:19:33.056251Z", "url": "https://files.pythonhosted.org/packages/2f/67/a0fd13f85c2d15526a816faa7557a076dc01418195f14afbd860ad420b54/limepy-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fbf5331ae836fcf25b065d40ebf4ca99", "sha256": "06e021b4d3225a014546ff5a4b8848d63a28b15aba02d3ad14b6465734a2d586"}, "downloads": -1, "filename": "limepy-0.1.0.tar.gz", "has_sig": false, "md5_digest": "fbf5331ae836fcf25b065d40ebf4ca99", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8486, "upload_time": "2019-01-08T19:19:35", "upload_time_iso_8601": "2019-01-08T19:19:35.217465Z", "url": "https://files.pythonhosted.org/packages/96/a8/7f35ae444ad5ea9fdf89764bccbe1b478e2aa77c8d06dc29226253d3a836/limepy-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "12c3457bfbaf4cd803b80315a33d9cf7", "sha256": "8fb10bc58cf0c13046c534aa7b840644a62e3db38bd28eee4a96e724966a3bbf"}, "downloads": -1, "filename": "limepy-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "12c3457bfbaf4cd803b80315a33d9cf7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9000, "upload_time": "2019-02-17T07:53:18", "upload_time_iso_8601": "2019-02-17T07:53:18.941344Z", "url": "https://files.pythonhosted.org/packages/f2/73/9584319e34e9efe3954c8375a9542f8772426b1ae07abb0e82bf99a6664b/limepy-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "13c1c1b50a275721c0bb6daa90e8cd4c", "sha256": "4690169a7e3da58a369c0227d74056b97728917be602099f91c6d6a17aa56f40"}, "downloads": -1, "filename": "limepy-0.1.1.tar.gz", "has_sig": false, "md5_digest": "13c1c1b50a275721c0bb6daa90e8cd4c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8563, "upload_time": "2019-02-17T07:53:20", "upload_time_iso_8601": "2019-02-17T07:53:20.370493Z", "url": "https://files.pythonhosted.org/packages/eb/4d/ba96c7b6dc92fe8a31cea021157a2e19db1526a9f72aa3b455901a211951/limepy-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "b16d2573a5662c64dbcd72d144852122", "sha256": "ac24e585fccb30273afd6e5e2d91937a712a0bcf65981f1ead23f84a5072ebbc"}, "downloads": -1, "filename": "limepy-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "b16d2573a5662c64dbcd72d144852122", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9059, "upload_time": "2019-03-15T14:03:03", "upload_time_iso_8601": "2019-03-15T14:03:03.766631Z", "url": "https://files.pythonhosted.org/packages/7b/6d/da3cfc3d2cf5662ce8fc6af3fc3741beb21d94053217a43f3b5d99e7a861/limepy-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a8a73cfd3f8b96344388e2b7d0f4b8fd", "sha256": "95d4cbf41f04b4c72dae8d29f45f4ad3d598c08f92f2475c26b55ba55a3f38bf"}, "downloads": -1, "filename": "limepy-0.1.2.tar.gz", "has_sig": false, "md5_digest": "a8a73cfd3f8b96344388e2b7d0f4b8fd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8614, "upload_time": "2019-03-15T14:03:05", "upload_time_iso_8601": "2019-03-15T14:03:05.720141Z", "url": "https://files.pythonhosted.org/packages/88/87/b3ed01d8922e77cc6d336aca0be1abd774ce510ba8ddb2d477a06d32328f/limepy-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "d0907c653a97003712a4c46573d6f11c", "sha256": "a6800abcada2812ad19a23158b729492e27e01f3c3dfaa819ed6ae786a5e21d2"}, "downloads": -1, "filename": "limepy-0.1.3-py3-none-any.whl", "has_sig": false, "md5_digest": "d0907c653a97003712a4c46573d6f11c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9613, "upload_time": "2019-04-16T17:11:30", "upload_time_iso_8601": "2019-04-16T17:11:30.335228Z", "url": "https://files.pythonhosted.org/packages/4a/be/45a78bbef395e45be81e40f7be9ff69a4b45c26cb5fd98f2abcf0caf6110/limepy-0.1.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b10c739be4e081be1cbd9a4924477832", "sha256": "3ea4ac8913e90caaad1ff984db0c5fe5434ad516685a5b8ff1fe3b8dc6aa8bf8"}, "downloads": -1, "filename": "limepy-0.1.3.tar.gz", "has_sig": false, "md5_digest": "b10c739be4e081be1cbd9a4924477832", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9250, "upload_time": "2019-04-16T17:11:32", "upload_time_iso_8601": "2019-04-16T17:11:32.488954Z", "url": "https://files.pythonhosted.org/packages/c9/7a/93d1c72faa6c84c192973d063ffa2b4a608792f189b33f05e077a5b28363/limepy-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "6572c7184bc9434014e5ebce6b7592af", "sha256": "043aae7304d9f2ea87c03c63e8655506d20baeca3f778b89f77a166cac495925"}, "downloads": -1, "filename": "limepy-0.1.4-py3-none-any.whl", "has_sig": false, "md5_digest": "6572c7184bc9434014e5ebce6b7592af", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9650, "upload_time": "2019-12-25T14:08:12", "upload_time_iso_8601": "2019-12-25T14:08:12.170235Z", "url": "https://files.pythonhosted.org/packages/72/23/063eee9773c31ce965d72e9929ee83a68a1b6dce460dbfd59058aecfcb6d/limepy-0.1.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ebc6395cd31f7e38f7f08d10f8d05ad6", "sha256": "e35883f45976fa960314d24e859afcdb5a7d567eab22d7641e3f0f6f5d844c23"}, "downloads": -1, "filename": "limepy-0.1.4.tar.gz", "has_sig": false, "md5_digest": "ebc6395cd31f7e38f7f08d10f8d05ad6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9281, "upload_time": "2019-12-25T14:08:15", "upload_time_iso_8601": "2019-12-25T14:08:15.444695Z", "url": "https://files.pythonhosted.org/packages/c2/02/fbb6c27a57ce19c6f797c369f78cc1a1f104180587808e8c55d15b6c608f/limepy-0.1.4.tar.gz", "yanked": false}], "0.1.5": [{"comment_text": "", "digests": {"md5": "a3b10b54e55bab7e678c85d6378d89ab", "sha256": "90284abda7305bf5a783c54ee348afc6eb9874fd2fef6dbc741a1e28dac4fde9"}, "downloads": -1, "filename": "limepy-0.1.5-py3-none-any.whl", "has_sig": false, "md5_digest": "a3b10b54e55bab7e678c85d6378d89ab", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9686, "upload_time": "2020-02-10T14:53:57", "upload_time_iso_8601": "2020-02-10T14:53:57.622267Z", "url": "https://files.pythonhosted.org/packages/67/e9/43b22f346513f821eb571051d0ee6e3ec282883741bf66345964476fa83b/limepy-0.1.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "86afb7f0b68526e6e95009b8b82f0388", "sha256": "93f74ee4279a179163361e9a42ca483e3c313cb33a46bd314e642b3f8616df43"}, "downloads": -1, "filename": "limepy-0.1.5.tar.gz", "has_sig": false, "md5_digest": "86afb7f0b68526e6e95009b8b82f0388", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9316, "upload_time": "2020-02-10T14:54:01", "upload_time_iso_8601": "2020-02-10T14:54:01.846783Z", "url": "https://files.pythonhosted.org/packages/40/b5/9d7864961bf9bb09b25ee49e2d179fd9e6f55950ec69d3ecdc66ae0393f4/limepy-0.1.5.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a3b10b54e55bab7e678c85d6378d89ab", "sha256": "90284abda7305bf5a783c54ee348afc6eb9874fd2fef6dbc741a1e28dac4fde9"}, "downloads": -1, "filename": "limepy-0.1.5-py3-none-any.whl", "has_sig": false, "md5_digest": "a3b10b54e55bab7e678c85d6378d89ab", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9686, "upload_time": "2020-02-10T14:53:57", "upload_time_iso_8601": "2020-02-10T14:53:57.622267Z", "url": "https://files.pythonhosted.org/packages/67/e9/43b22f346513f821eb571051d0ee6e3ec282883741bf66345964476fa83b/limepy-0.1.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "86afb7f0b68526e6e95009b8b82f0388", "sha256": "93f74ee4279a179163361e9a42ca483e3c313cb33a46bd314e642b3f8616df43"}, "downloads": -1, "filename": "limepy-0.1.5.tar.gz", "has_sig": false, "md5_digest": "86afb7f0b68526e6e95009b8b82f0388", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9316, "upload_time": "2020-02-10T14:54:01", "upload_time_iso_8601": "2020-02-10T14:54:01.846783Z", "url": "https://files.pythonhosted.org/packages/40/b5/9d7864961bf9bb09b25ee49e2d179fd9e6f55950ec69d3ecdc66ae0393f4/limepy-0.1.5.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:45:52 2020"}