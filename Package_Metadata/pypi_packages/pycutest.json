{"info": {"author": "Jaroslav Fowkes and Lindon Roberts", "author_email": "jaroslav.fowkes@maths.ox.ac.uk", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Console", "Framework :: IPython", "Framework :: Jupyter", "Intended Audience :: Science/Research", "License :: OSI Approved :: GNU General Public License (GPL)", "Operating System :: MacOS", "Operating System :: Unix", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 3", "Topic :: Scientific/Engineering", "Topic :: Scientific/Engineering :: Mathematics"], "description": "================================================================================================================\nPyCUTEst: A Python interface to the CUTEst Optimization Test Environment |License| |Build Status| |PyPI Version|\n================================================================================================================\n\nPyCUTEst is a Python interface to `CUTEst <https://github.com/ralna/CUTEst>`_, a Fortran package for testing optimization software. It is based on the `interface originally developed for CUTEr <http://fides.fe.uni-lj.si/~arpadb/software-pycuter.html>`_ by `Prof. Arpad Buermen <http://www.fe.uni-lj.si/en/the_faculty/staff/alphabetically/55/>`_.\n\nFull details on how to use PyCUTEst are available in the `documentation <https://jfowkes.github.io/pycutest/>`_.\n\nRequirements\n------------\nPyCUTEst requires the following software to be installed:\n\n* Python 2.7 or Python 3 (http://www.python.org/)\n* CUTEst (see below)\n\nAdditionally, the following python packages should be installed (these will be installed automatically if using *pip*, see `Installation using pip`_):\n\n* NumPy 1.11 or higher (http://www.numpy.org/)\n* SciPy 0.18 or higher (http://www.scipy.org/)\n\n**Please Note:** Currently PyCUTEst only supports Mac and Linux. For Windows 10 users, PyCUTEst can be used through the `Windows Subsystem for Linux <https://docs.microsoft.com/en-us/windows/wsl/faq>`_, following the Linux installation instructions.\n\nInstalling CUTEst on Linux\n--------------------------\nThese instructions do not include installation of the MATLAB interface. You will need to install four packages: archdefs, SIFDecode, CUTEst and MASTSIF. To keep things simple, install all four packages in the same directory:\n\n .. code-block:: bash\n\n    $ mkdir cutest\n    $ cd cutest\n    $ git clone https://github.com/ralna/ARCHDefs ./archdefs\n    $ git clone https://github.com/ralna/SIFDecode ./sifdecode\n    $ git clone https://github.com/ralna/CUTEst ./cutest\n    $ git clone https://bitbucket.org/optrove/sif ./mastsif\n\nNote that :code:`mastsif` contains all the test problem definitions and \nis therefore quite large. If you're short on space you may want to copy \nonly the ``*.SIF`` files for the problems you wish to test on.\n\nNext set the following environment variables in your :code:`~/.bashrc` to point to the installation directories used above:\n\n .. code-block:: bash\n\n    # CUTEst\n    export ARCHDEFS=/path/to/cutest/archdefs/\n    export SIFDECODE=/path/to/cutest/sifdecode/\n    export MASTSIF=/path/to/cutest/mastsif/\n    export CUTEST=/path/to/cutest/cutest/\n    export MYARCH=\"pc64.lnx.gfo\"\n\nNow we are ready to install CUTEst in double precision (requires :code:`gfortran` and :code:`gcc`):\n\n .. code-block:: bash\n\n    $ cd ./cutest\n    $ ${ARCHDEFS}/install_optrove\n    Do you wish to install GALAHAD (Y/n)? N\n    Do you wish to install CUTEst (Y/n)? Y\n    Do you require the CUTEst-Matlab interface (y/N)? N\n    Select platform: 6 # PC with generic 64-bit processor\n    Select operating system: 3 # Linux\n    Would you like to review and modify the system commands (y/N)? N\n    Select fortran compiler: 5 # GNU gfortran compiler\n    Would you like to review and modify the fortran compiler settings (y/N)? N\n    Select C compiler: 2 # generic GCC\n    Would you like to review and modify the C compiler settings (y/N)? N\n    Would you like to compile SIFDecode (Y/n)? Y\n    Would you like to compile CUTEst (Y/n)? Y\n    CUTEst may be compiled in (S)ingle or (D)ouble precision or (B)oth.\n    Which precision do you require for the installed subset (D/s/b) ? D\n\nAnd CUTEst should run from here. To test that the installation works, issue the commands:\n\n .. code-block:: bash\n\n    $ cd $SIFDECODE/src ; make -f $SIFDECODE/makefiles/$MYARCH test\n    $ cd $CUTEST/src ; make -f $CUTEST/makefiles/$MYARCH test\n\n**Please Note:** *currently PyCUTEst only supports gfortran and uses the default version on your path (as returned by* :code:`gfortran -v` *). Please ensure this is the same version that you install CUTEst with above, this should be the case if you select the generic* :code:`GNU gfortran compiler` *as the fortran compiler in the installer above.*\n\nInstalling CUTEst on Mac\n------------------------\nFor simplicity, we recommend installing CUTEst using Homebrew as detailed below (but you can also install CUTEst manually by following the Linux installation instructions above). First it is important to ensure that you have the latest version of Xcode Command Line Tools installed (or the latest version of Xcode), please ensure this is the case by following `this guide <http://railsapps.github.io/xcode-command-line-tools.html>`__. Now install the Homebrew package manager:\n\n .. code-block:: bash\n\n    $ /usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n\nThen you can easily install CUTEst:\n\n .. code-block:: bash\n\n    $ brew tap optimizers/cutest\n    $ brew install cutest --without-single --with-matlab # if using Matlab interface\n    $ brew install mastsif  # if you want all the test problems\n    $ for f in \"archdefs\" \"mastsif\" \"sifdecode\" \"cutest\"; do \\\n    $   echo \". $(brew --prefix $f)/$f.bashrc\" >> ~/.bashrc; \\\n    $ done\n\nInstallation using pip\n----------------------\nFor easy installation, use `pip <http://www.pip-installer.org/>`_ as root:\n\n .. code-block:: bash\n\n    $ [sudo] pip install pycutest\n\nor alternatively *easy_install*:\n\n .. code-block:: bash\n\n    $ [sudo] easy_install pycutest\n\nIf you do not have root privileges or you want to install PyCUTEst for your private use, you can use:\n\n .. code-block:: bash\n\n    $ pip install --user pycutest\n\nwhich will install PyCUTEst in your home directory.\n\nNote that if an older install of PyCUTEst is present on your system you can use:\n\n .. code-block:: bash\n\n    $ [sudo] pip install --upgrade pycutest\n\nto upgrade PyCUTEst to the latest version.\n\nYou will then need to create a folder which will store all your compiled problems:\n\n .. code-block:: bash\n\n    $ mkdir pycutest_cache\n\nAnd set an environment variable to tell PyCUTEst about this directory, by adding to your :code:`~/.bashrc` file:\n\n .. code-block:: bash\n\n    export PYCUTEST_CACHE=\"/path/to/pycutest_cache\"\n    export PYTHONPATH=\"${PYCUTEST_CACHE}:${PYTHONPATH}\"\n\n\nManual installation\n-------------------\nAlternatively, you can download the source code from `Github <https://github.com/jfowkes/pycutest>`_ and unpack as follows:\n\n .. code-block:: bash\n\n    $ git clone https://github.com/jfowkes/pycutest\n    $ cd pycutest\n\nPyCUTEst is written in pure Python and requires no compilation. It can be installed using:\n\n .. code-block:: bash\n\n    $ [sudo] pip install .\n\nIf you do not have root privileges or you want to install PyCUTEst for your private use, you can use:\n\n .. code-block:: bash\n\n    $ pip install --user .\n\nwhich will install PyCUTEst in your home directory.\n\nDon't forget to set up your cache and associated environment variable (see above).\n\nTo upgrade PyCUTEst to the latest version, navigate to the top-level directory (i.e. the one containing :code:`setup.py`) and rerun the installation using :code:`pip`, as above:\n\n .. code-block:: bash\n\n    $ git pull\n    $ [sudo] pip install .  # with root privileges\n\nTesting\n-------\nIf you installed PyCUTEst manually, you can test your installation by running:\n\n .. code-block:: bash\n\n    $ python setup.py test\n\nUninstallation\n--------------\nIf PyCUTEst was installed using *pip* you can uninstall as follows:\n\n .. code-block:: bash\n\n    $ [sudo] pip uninstall pycutest\n\notherwise you have to remove the installed files by hand (located in your python site-packages directory).\n\nBugs\n----\nPlease report any bugs using GitHub's issue tracker.\n\nLicense\n-------\nThis algorithm is released under the GNU GPL license.\n\n.. |License| image::  https://img.shields.io/badge/License-GPL%20v3-blue.svg\n             :target: https://www.gnu.org/licenses/gpl-3.0\n             :alt: GNU GPL v3 License\n.. |Build Status| image::  https://travis-ci.org/jfowkes/pycutest.svg?branch=master\n                  :target: https://travis-ci.org/jfowkes/pycutest\n.. |PyPI Version| image:: https://img.shields.io/pypi/v/pycutest.svg\n                  :target: https://pypi.python.org/pypi/pycutest\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "https://github.com/jfowkes/pycutest/archive/v1.0.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/jfowkes/pycutest/", "keywords": "mathematics optimization", "license": "GNU GPL", "maintainer": "", "maintainer_email": "", "name": "pycutest", "package_url": "https://pypi.org/project/pycutest/", "platform": "", "project_url": "https://pypi.org/project/pycutest/", "project_urls": {"Download": "https://github.com/jfowkes/pycutest/archive/v1.0.tar.gz", "Homepage": "https://github.com/jfowkes/pycutest/"}, "release_url": "https://pypi.org/project/pycutest/1.0/", "requires_dist": ["numpy (>=1.11)", "scipy (>=0.17)"], "requires_python": "", "summary": "A Python wrapper to the CUTEst optimization test environment", "version": "1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>PyCUTEst is a Python interface to <a href=\"https://github.com/ralna/CUTEst\" rel=\"nofollow\">CUTEst</a>, a Fortran package for testing optimization software. It is based on the <a href=\"http://fides.fe.uni-lj.si/~arpadb/software-pycuter.html\" rel=\"nofollow\">interface originally developed for CUTEr</a> by <a href=\"http://www.fe.uni-lj.si/en/the_faculty/staff/alphabetically/55/\" rel=\"nofollow\">Prof. Arpad Buermen</a>.</p>\n<p>Full details on how to use PyCUTEst are available in the <a href=\"https://jfowkes.github.io/pycutest/\" rel=\"nofollow\">documentation</a>.</p>\n<div id=\"requirements\">\n<h2>Requirements</h2>\n<p>PyCUTEst requires the following software to be installed:</p>\n<ul>\n<li>Python 2.7 or Python 3 (<a href=\"http://www.python.org/\" rel=\"nofollow\">http://www.python.org/</a>)</li>\n<li>CUTEst (see below)</li>\n</ul>\n<p>Additionally, the following python packages should be installed (these will be installed automatically if using <em>pip</em>, see <a href=\"#installation-using-pip\" rel=\"nofollow\">Installation using pip</a>):</p>\n<ul>\n<li>NumPy 1.11 or higher (<a href=\"http://www.numpy.org/\" rel=\"nofollow\">http://www.numpy.org/</a>)</li>\n<li>SciPy 0.18 or higher (<a href=\"http://www.scipy.org/\" rel=\"nofollow\">http://www.scipy.org/</a>)</li>\n</ul>\n<p><strong>Please Note:</strong> Currently PyCUTEst only supports Mac and Linux. For Windows 10 users, PyCUTEst can be used through the <a href=\"https://docs.microsoft.com/en-us/windows/wsl/faq\" rel=\"nofollow\">Windows Subsystem for Linux</a>, following the Linux installation instructions.</p>\n</div>\n<div id=\"installing-cutest-on-linux\">\n<h2>Installing CUTEst on Linux</h2>\n<p>These instructions do not include installation of the MATLAB interface. You will need to install four packages: archdefs, SIFDecode, CUTEst and MASTSIF. To keep things simple, install all four packages in the same directory:</p>\n<blockquote>\n<pre>$ mkdir cutest\n$ <span class=\"nb\">cd</span> cutest\n$ git clone https://github.com/ralna/ARCHDefs ./archdefs\n$ git clone https://github.com/ralna/SIFDecode ./sifdecode\n$ git clone https://github.com/ralna/CUTEst ./cutest\n$ git clone https://bitbucket.org/optrove/sif ./mastsif\n</pre>\n</blockquote>\n<p>Note that <code>mastsif</code> contains all the test problem definitions and\nis therefore quite large. If you\u2019re short on space you may want to copy\nonly the <tt>*.SIF</tt> files for the problems you wish to test on.</p>\n<p>Next set the following environment variables in your <code>~/.bashrc</code> to point to the installation directories used above:</p>\n<blockquote>\n<pre><span class=\"c1\"># CUTEst\n</span><span class=\"nb\">export</span> <span class=\"nv\">ARCHDEFS</span><span class=\"o\">=</span>/path/to/cutest/archdefs/\n<span class=\"nb\">export</span> <span class=\"nv\">SIFDECODE</span><span class=\"o\">=</span>/path/to/cutest/sifdecode/\n<span class=\"nb\">export</span> <span class=\"nv\">MASTSIF</span><span class=\"o\">=</span>/path/to/cutest/mastsif/\n<span class=\"nb\">export</span> <span class=\"nv\">CUTEST</span><span class=\"o\">=</span>/path/to/cutest/cutest/\n<span class=\"nb\">export</span> <span class=\"nv\">MYARCH</span><span class=\"o\">=</span><span class=\"s2\">\"pc64.lnx.gfo\"</span>\n</pre>\n</blockquote>\n<p>Now we are ready to install CUTEst in double precision (requires <code>gfortran</code> and <code>gcc</code>):</p>\n<blockquote>\n<pre>$ <span class=\"nb\">cd</span> ./cutest\n$ <span class=\"si\">${</span><span class=\"nv\">ARCHDEFS</span><span class=\"si\">}</span>/install_optrove\nDo you wish to install GALAHAD <span class=\"o\">(</span>Y/n<span class=\"o\">)</span>? N\nDo you wish to install CUTEst <span class=\"o\">(</span>Y/n<span class=\"o\">)</span>? Y\nDo you require the CUTEst-Matlab interface <span class=\"o\">(</span>y/N<span class=\"o\">)</span>? N\nSelect platform: <span class=\"m\">6</span> <span class=\"c1\"># PC with generic 64-bit processor\n</span>Select operating system: <span class=\"m\">3</span> <span class=\"c1\"># Linux\n</span>Would you like to review and modify the system commands <span class=\"o\">(</span>y/N<span class=\"o\">)</span>? N\nSelect fortran compiler: <span class=\"m\">5</span> <span class=\"c1\"># GNU gfortran compiler\n</span>Would you like to review and modify the fortran compiler settings <span class=\"o\">(</span>y/N<span class=\"o\">)</span>? N\nSelect C compiler: <span class=\"m\">2</span> <span class=\"c1\"># generic GCC\n</span>Would you like to review and modify the C compiler settings <span class=\"o\">(</span>y/N<span class=\"o\">)</span>? N\nWould you like to compile SIFDecode <span class=\"o\">(</span>Y/n<span class=\"o\">)</span>? Y\nWould you like to compile CUTEst <span class=\"o\">(</span>Y/n<span class=\"o\">)</span>? Y\nCUTEst may be compiled in <span class=\"o\">(</span>S<span class=\"o\">)</span>ingle or <span class=\"o\">(</span>D<span class=\"o\">)</span>ouble precision or <span class=\"o\">(</span>B<span class=\"o\">)</span>oth.\nWhich precision <span class=\"k\">do</span> you require <span class=\"k\">for</span> the installed subset <span class=\"o\">(</span>D/s/b<span class=\"o\">)</span> ? D\n</pre>\n</blockquote>\n<p>And CUTEst should run from here. To test that the installation works, issue the commands:</p>\n<blockquote>\n<pre>$ <span class=\"nb\">cd</span> <span class=\"nv\">$SIFDECODE</span>/src <span class=\"p\">;</span> make -f <span class=\"nv\">$SIFDECODE</span>/makefiles/<span class=\"nv\">$MYARCH</span> <span class=\"nb\">test</span>\n$ <span class=\"nb\">cd</span> <span class=\"nv\">$CUTEST</span>/src <span class=\"p\">;</span> make -f <span class=\"nv\">$CUTEST</span>/makefiles/<span class=\"nv\">$MYARCH</span> <span class=\"nb\">test</span>\n</pre>\n</blockquote>\n<p><strong>Please Note:</strong> <em>currently PyCUTEst only supports gfortran and uses the default version on your path (as returned by</em> <code>gfortran -v</code> <em>). Please ensure this is the same version that you install CUTEst with above, this should be the case if you select the generic</em> <code>GNU gfortran compiler</code> <em>as the fortran compiler in the installer above.</em></p>\n</div>\n<div id=\"installing-cutest-on-mac\">\n<h2>Installing CUTEst on Mac</h2>\n<p>For simplicity, we recommend installing CUTEst using Homebrew as detailed below (but you can also install CUTEst manually by following the Linux installation instructions above). First it is important to ensure that you have the latest version of Xcode Command Line Tools installed (or the latest version of Xcode), please ensure this is the case by following <a href=\"http://railsapps.github.io/xcode-command-line-tools.html\" rel=\"nofollow\">this guide</a>. Now install the Homebrew package manager:</p>\n<blockquote>\n<pre>$ /usr/bin/ruby -e <span class=\"s2\">\"</span><span class=\"k\">$(</span>curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install<span class=\"k\">)</span><span class=\"s2\">\"</span>\n</pre>\n</blockquote>\n<p>Then you can easily install CUTEst:</p>\n<blockquote>\n<pre>$ brew tap optimizers/cutest\n$ brew install cutest --without-single --with-matlab <span class=\"c1\"># if using Matlab interface\n</span>$ brew install mastsif  <span class=\"c1\"># if you want all the test problems\n</span>$ <span class=\"k\">for</span> f in <span class=\"s2\">\"archdefs\"</span> <span class=\"s2\">\"mastsif\"</span> <span class=\"s2\">\"sifdecode\"</span> <span class=\"s2\">\"cutest\"</span><span class=\"p\">;</span> <span class=\"k\">do</span> <span class=\"se\">\\\n</span>$   <span class=\"nb\">echo</span> <span class=\"s2\">\". </span><span class=\"k\">$(</span>brew --prefix <span class=\"nv\">$f</span><span class=\"k\">)</span><span class=\"s2\">/</span><span class=\"nv\">$f</span><span class=\"s2\">.bashrc\"</span> &gt;&gt; ~/.bashrc<span class=\"p\">;</span> <span class=\"se\">\\\n</span>$ <span class=\"k\">done</span>\n</pre>\n</blockquote>\n</div>\n<div id=\"installation-using-pip\">\n<h2>Installation using pip</h2>\n<p>For easy installation, use <a href=\"http://www.pip-installer.org/\" rel=\"nofollow\">pip</a> as root:</p>\n<blockquote>\n<pre>$ <span class=\"o\">[</span>sudo<span class=\"o\">]</span> pip install pycutest\n</pre>\n</blockquote>\n<p>or alternatively <em>easy_install</em>:</p>\n<blockquote>\n<pre>$ <span class=\"o\">[</span>sudo<span class=\"o\">]</span> easy_install pycutest\n</pre>\n</blockquote>\n<p>If you do not have root privileges or you want to install PyCUTEst for your private use, you can use:</p>\n<blockquote>\n<pre>$ pip install --user pycutest\n</pre>\n</blockquote>\n<p>which will install PyCUTEst in your home directory.</p>\n<p>Note that if an older install of PyCUTEst is present on your system you can use:</p>\n<blockquote>\n<pre>$ <span class=\"o\">[</span>sudo<span class=\"o\">]</span> pip install --upgrade pycutest\n</pre>\n</blockquote>\n<p>to upgrade PyCUTEst to the latest version.</p>\n<p>You will then need to create a folder which will store all your compiled problems:</p>\n<blockquote>\n<pre>$ mkdir pycutest_cache\n</pre>\n</blockquote>\n<p>And set an environment variable to tell PyCUTEst about this directory, by adding to your <code>~/.bashrc</code> file:</p>\n<blockquote>\n<pre><span class=\"nb\">export</span> <span class=\"nv\">PYCUTEST_CACHE</span><span class=\"o\">=</span><span class=\"s2\">\"/path/to/pycutest_cache\"</span>\n<span class=\"nb\">export</span> <span class=\"nv\">PYTHONPATH</span><span class=\"o\">=</span><span class=\"s2\">\"</span><span class=\"si\">${</span><span class=\"nv\">PYCUTEST_CACHE</span><span class=\"si\">}</span><span class=\"s2\">:</span><span class=\"si\">${</span><span class=\"nv\">PYTHONPATH</span><span class=\"si\">}</span><span class=\"s2\">\"</span>\n</pre>\n</blockquote>\n</div>\n<div id=\"manual-installation\">\n<h2>Manual installation</h2>\n<p>Alternatively, you can download the source code from <a href=\"https://github.com/jfowkes/pycutest\" rel=\"nofollow\">Github</a> and unpack as follows:</p>\n<blockquote>\n<pre>$ git clone https://github.com/jfowkes/pycutest\n$ <span class=\"nb\">cd</span> pycutest\n</pre>\n</blockquote>\n<p>PyCUTEst is written in pure Python and requires no compilation. It can be installed using:</p>\n<blockquote>\n<pre>$ <span class=\"o\">[</span>sudo<span class=\"o\">]</span> pip install .\n</pre>\n</blockquote>\n<p>If you do not have root privileges or you want to install PyCUTEst for your private use, you can use:</p>\n<blockquote>\n<pre>$ pip install --user .\n</pre>\n</blockquote>\n<p>which will install PyCUTEst in your home directory.</p>\n<p>Don\u2019t forget to set up your cache and associated environment variable (see above).</p>\n<p>To upgrade PyCUTEst to the latest version, navigate to the top-level directory (i.e. the one containing <code>setup.py</code>) and rerun the installation using <code>pip</code>, as above:</p>\n<blockquote>\n<pre>$ git pull\n$ <span class=\"o\">[</span>sudo<span class=\"o\">]</span> pip install .  <span class=\"c1\"># with root privileges</span>\n</pre>\n</blockquote>\n</div>\n<div id=\"testing\">\n<h2>Testing</h2>\n<p>If you installed PyCUTEst manually, you can test your installation by running:</p>\n<blockquote>\n<pre>$ python setup.py <span class=\"nb\">test</span>\n</pre>\n</blockquote>\n</div>\n<div id=\"uninstallation\">\n<h2>Uninstallation</h2>\n<p>If PyCUTEst was installed using <em>pip</em> you can uninstall as follows:</p>\n<blockquote>\n<pre>$ <span class=\"o\">[</span>sudo<span class=\"o\">]</span> pip uninstall pycutest\n</pre>\n</blockquote>\n<p>otherwise you have to remove the installed files by hand (located in your python site-packages directory).</p>\n</div>\n<div id=\"bugs\">\n<h2>Bugs</h2>\n<p>Please report any bugs using GitHub\u2019s issue tracker.</p>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>This algorithm is released under the GNU GPL license.</p>\n</div>\n\n          </div>"}, "last_serial": 7072042, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "21dde811d74d46053891d6fab1d6aaed", "sha256": "8fc519ddfa374de85f2a72a970c6e784c194e676bf5029f165f1ae1a38185aad"}, "downloads": -1, "filename": "pycutest-0.1.tar.gz", "has_sig": false, "md5_digest": "21dde811d74d46053891d6fab1d6aaed", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 34361, "upload_time": "2018-09-06T11:52:33", "upload_time_iso_8601": "2018-09-06T11:52:33.492280Z", "url": "https://files.pythonhosted.org/packages/1e/fe/c512e47b8a494b6a68fff561b5f81277e384f24ecb826084f883b10ee556/pycutest-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "a6a32d871aa251c4e7b0026d48c5b645", "sha256": "ae8fdea178c62b116a04baa5da6f21d8cea41bf7a1d8878a9f0fd3c0c7101734"}, "downloads": -1, "filename": "pycutest-0.2.tar.gz", "has_sig": false, "md5_digest": "a6a32d871aa251c4e7b0026d48c5b645", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 36354, "upload_time": "2019-06-06T13:38:16", "upload_time_iso_8601": "2019-06-06T13:38:16.131985Z", "url": "https://files.pythonhosted.org/packages/2a/87/bfd5d0d2692fb346cfcf805172be3b57a1056f510317412a78dec15285f6/pycutest-0.2.tar.gz", "yanked": false}], "1.0": [{"comment_text": "", "digests": {"md5": "bb012486d817eb15602ec682233965f1", "sha256": "e4de9f4ebc745037da2db70b346305e69dcb52e2a146bc4e7e391de398cb761a"}, "downloads": -1, "filename": "pycutest-1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "bb012486d817eb15602ec682233965f1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 48308, "upload_time": "2020-04-21T22:26:43", "upload_time_iso_8601": "2020-04-21T22:26:43.459961Z", "url": "https://files.pythonhosted.org/packages/ae/5b/5e5afe232978d881823aab536cc5ffeffc0164501d5366cbd5275f678f8c/pycutest-1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4be837c36035a5af25e569b44a747246", "sha256": "7543dc796e3279a260a362c559807e4f099398f27656837a7aad68b58eb81fe6"}, "downloads": -1, "filename": "pycutest-1.0.tar.gz", "has_sig": false, "md5_digest": "4be837c36035a5af25e569b44a747246", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 36648, "upload_time": "2020-04-21T22:26:45", "upload_time_iso_8601": "2020-04-21T22:26:45.194237Z", "url": "https://files.pythonhosted.org/packages/62/cc/05c382a35d69c56d16b361ceb0f34883f732bf90ab5533520d63a5b7efab/pycutest-1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "bb012486d817eb15602ec682233965f1", "sha256": "e4de9f4ebc745037da2db70b346305e69dcb52e2a146bc4e7e391de398cb761a"}, "downloads": -1, "filename": "pycutest-1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "bb012486d817eb15602ec682233965f1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 48308, "upload_time": "2020-04-21T22:26:43", "upload_time_iso_8601": "2020-04-21T22:26:43.459961Z", "url": "https://files.pythonhosted.org/packages/ae/5b/5e5afe232978d881823aab536cc5ffeffc0164501d5366cbd5275f678f8c/pycutest-1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4be837c36035a5af25e569b44a747246", "sha256": "7543dc796e3279a260a362c559807e4f099398f27656837a7aad68b58eb81fe6"}, "downloads": -1, "filename": "pycutest-1.0.tar.gz", "has_sig": false, "md5_digest": "4be837c36035a5af25e569b44a747246", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 36648, "upload_time": "2020-04-21T22:26:45", "upload_time_iso_8601": "2020-04-21T22:26:45.194237Z", "url": "https://files.pythonhosted.org/packages/62/cc/05c382a35d69c56d16b361ceb0f34883f732bf90ab5533520d63a5b7efab/pycutest-1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:07:33 2020"}