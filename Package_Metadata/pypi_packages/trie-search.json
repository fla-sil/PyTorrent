{"info": {"author": "Tatsuya Nakamura", "author_email": "nkmrtty.com@gmail.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Topic :: Text Processing"], "description": "trie-search\n===========\n\nTrie-search is a package for text pattern search using\n`marisa-trie <https://github.com/pytries/marisa-trie>`__.\n\nInstallation\n------------\n\n::\n\n    $ pip install trie-search\n\nUsage\n-----\n\nCreate trie dictionary\n~~~~~~~~~~~~~~~~~~~~~~\n\nBefore using this package, you need to create trie dictionary, or\nprepare a list of patterns.\n\nThe following example simply creates trie dictionary of\n``marisa_trie.Trie`` from list of article titles in English version of\nWikipedia, and saves it to ``./example/triedict``.\n\n::\n\n    $ cd ./example\n    $ curl https://dumps.wikimedia.org/enwiki/latest/enwiki-latest-all-titles-in-ns0.gz | gzcat | python create_triedict.py\n\n**NOTICE** : This script will consume more than 2GB memory.\n\ntrie_search.TrieSearch\n~~~~~~~~~~~~~~~~~~~~~~\n\nCreate an instance, and load dictionary:\n\n.. code:: python\n\n    >>> import trie_search\n    >>> trie = trie_search.TrieSearch(filepath='./example/triedict')\n\nIf you have ``list`` or ``tuple`` object of patterns, you can create an\ninstance as follows:\n\n.. code:: python\n\n    >>> patterns = ['pattern1', 'pattern2', 'pattern3']\n    >>> trie = trie_search.TrieSearch(patterns)\n\nTrieSearch.search_all_patterns\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nSearch all patterns in an input text:\n\n.. code:: python\n\n    >>> text = ('in computer science , a trie , also called digital tree and '\n    ...         'sometimes radix tree or prefix tree ( as they can be searched '\n    ...         'by prefixes ) , is a kind of search tree - an ordered tree data '\n    ...         'structure that is used to store a dynamic set or associative array '\n    ...         'where the keys are usually strings .')\n    >>> for pattern, start_idx in trie.search_all_patterns(text):\n    ...     print pattern, start_idx\n    ...\n    in 0\n    computer 3\n    computer science 3\n    science 12\n    , 20\n    a 22\n    trie 24\n    , 29\n    also 31\n    called 36\n    digital 43\n    ... skipped ...\n    array 246\n    where 252\n    where the 252\n    the 258\n    the keys 258\n    keys 262\n    are 267\n    usually 271\n    strings 279 \n\n-  The text is the 1st sentence of https://en.wikipedia.org/wiki/Trie.\n   For normalization, remove capitalizations and add single white space\n   before/after symbols.\n-  ``search_all_patterns`` returns an iterator. Each searched pattern is\n   represented as a tuple ``(pattern_string, pattern_start_index)``. The\n   results are sorted by the start index. If you want to get the result\n   as a ``list`` object, use ``list`` function as follow:\n\n   .. code:: python\n\n       >>> patterns = list(trie.search_all_patterns(text))\n\nTrieSearch.search_longest_patterns\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nSearch longest patterns in an input text:\n\n.. code:: python\n\n    >>> for pattern, start_idx in sorted(trie.search_longest_patterns(text), key=lambda x: x[1]):\n    ...     print pattern, start_idx\n    ...\n    in 0\n    computer science 3\n    , 20\n    a 22\n    trie 24\n    , 29\n    also 31\n    called 36\n    digital tree 43\n    and 56\n    sometimes 60\n    radix tree 70\n    or 81\n    prefix tree 84\n    ( 96\n    as 98\n    they 101\n    can 106\n    be 110\n    by 122\n    prefixes 125\n    ) 134\n    , 136\n    is a 138\n    kind 143\n    of 148\n    search tree 151\n    - 163\n    an 165\n    ordered tree data structure 168\n    that 196\n    is 201\n    used to 204\n    store 212\n    a 218\n    dynamic set 220\n    or 232\n    associative array 235\n    where the 253\n    the keys 259\n    are 268\n    usually 272\n    strings 280\n\n-  ``search_all_patterns`` also returns an iterator. The result sorted\n   by the length of patterns. In the above example, the result is\n   re-sorted by the start index.\n\ntrie_search.RecordTrieSearch\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n``trie_search.RecordTrieSearch`` is a sub class of\n``marisa_trie.RecordTrie``, which maps unicode keys to data tuples.\n\nThe functions, ``search_all_patterns`` and ``search_longest_patterns``,\nare also implemented in ``trie_search.RecordTrieSearch``.\n\n\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/nkmrtty/trie-search", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "trie-search", "package_url": "https://pypi.org/project/trie-search/", "platform": "", "project_url": "https://pypi.org/project/trie-search/", "project_urls": {"Homepage": "https://github.com/nkmrtty/trie-search"}, "release_url": "https://pypi.org/project/trie-search/0.3.0/", "requires_dist": ["marisa-trie (==0.7.4)"], "requires_python": "", "summary": "Trie-search is a package for text pattern search using marisa-trie", "version": "0.3.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Trie-search is a package for text pattern search using\n<a href=\"https://github.com/pytries/marisa-trie\" rel=\"nofollow\">marisa-trie</a>.</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<pre>$ pip install trie-search\n</pre>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<div id=\"create-trie-dictionary\">\n<h3>Create trie dictionary</h3>\n<p>Before using this package, you need to create trie dictionary, or\nprepare a list of patterns.</p>\n<p>The following example simply creates trie dictionary of\n<tt>marisa_trie.Trie</tt> from list of article titles in English version of\nWikipedia, and saves it to <tt>./example/triedict</tt>.</p>\n<pre>$ cd ./example\n$ curl https://dumps.wikimedia.org/enwiki/latest/enwiki-latest-all-titles-in-ns0.gz | gzcat | python create_triedict.py\n</pre>\n<p><strong>NOTICE</strong> : This script will consume more than 2GB memory.</p>\n</div>\n<div id=\"trie-search-triesearch\">\n<h3>trie_search.TrieSearch</h3>\n<p>Create an instance, and load dictionary:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">trie_search</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">trie</span> <span class=\"o\">=</span> <span class=\"n\">trie_search</span><span class=\"o\">.</span><span class=\"n\">TrieSearch</span><span class=\"p\">(</span><span class=\"n\">filepath</span><span class=\"o\">=</span><span class=\"s1\">'./example/triedict'</span><span class=\"p\">)</span>\n</pre>\n<p>If you have <tt>list</tt> or <tt>tuple</tt> object of patterns, you can create an\ninstance as follows:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">patterns</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'pattern1'</span><span class=\"p\">,</span> <span class=\"s1\">'pattern2'</span><span class=\"p\">,</span> <span class=\"s1\">'pattern3'</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">trie</span> <span class=\"o\">=</span> <span class=\"n\">trie_search</span><span class=\"o\">.</span><span class=\"n\">TrieSearch</span><span class=\"p\">(</span><span class=\"n\">patterns</span><span class=\"p\">)</span>\n</pre>\n<div id=\"triesearch-search-all-patterns\">\n<h4>TrieSearch.search_all_patterns</h4>\n<p>Search all patterns in an input text:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">'in computer science , a trie , also called digital tree and '</span>\n<span class=\"o\">...</span>         <span class=\"s1\">'sometimes radix tree or prefix tree ( as they can be searched '</span>\n<span class=\"o\">...</span>         <span class=\"s1\">'by prefixes ) , is a kind of search tree - an ordered tree data '</span>\n<span class=\"o\">...</span>         <span class=\"s1\">'structure that is used to store a dynamic set or associative array '</span>\n<span class=\"o\">...</span>         <span class=\"s1\">'where the keys are usually strings .'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">for</span> <span class=\"n\">pattern</span><span class=\"p\">,</span> <span class=\"n\">start_idx</span> <span class=\"ow\">in</span> <span class=\"n\">trie</span><span class=\"o\">.</span><span class=\"n\">search_all_patterns</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"nb\">print</span> <span class=\"n\">pattern</span><span class=\"p\">,</span> <span class=\"n\">start_idx</span>\n<span class=\"o\">...</span>\n<span class=\"ow\">in</span> <span class=\"mi\">0</span>\n<span class=\"n\">computer</span> <span class=\"mi\">3</span>\n<span class=\"n\">computer</span> <span class=\"n\">science</span> <span class=\"mi\">3</span>\n<span class=\"n\">science</span> <span class=\"mi\">12</span>\n<span class=\"p\">,</span> <span class=\"mi\">20</span>\n<span class=\"n\">a</span> <span class=\"mi\">22</span>\n<span class=\"n\">trie</span> <span class=\"mi\">24</span>\n<span class=\"p\">,</span> <span class=\"mi\">29</span>\n<span class=\"n\">also</span> <span class=\"mi\">31</span>\n<span class=\"n\">called</span> <span class=\"mi\">36</span>\n<span class=\"n\">digital</span> <span class=\"mi\">43</span>\n<span class=\"o\">...</span> <span class=\"n\">skipped</span> <span class=\"o\">...</span>\n<span class=\"n\">array</span> <span class=\"mi\">246</span>\n<span class=\"n\">where</span> <span class=\"mi\">252</span>\n<span class=\"n\">where</span> <span class=\"n\">the</span> <span class=\"mi\">252</span>\n<span class=\"n\">the</span> <span class=\"mi\">258</span>\n<span class=\"n\">the</span> <span class=\"n\">keys</span> <span class=\"mi\">258</span>\n<span class=\"n\">keys</span> <span class=\"mi\">262</span>\n<span class=\"n\">are</span> <span class=\"mi\">267</span>\n<span class=\"n\">usually</span> <span class=\"mi\">271</span>\n<span class=\"n\">strings</span> <span class=\"mi\">279</span>\n</pre>\n<ul>\n<li><p>The text is the 1st sentence of <a href=\"https://en.wikipedia.org/wiki/Trie\" rel=\"nofollow\">https://en.wikipedia.org/wiki/Trie</a>.\nFor normalization, remove capitalizations and add single white space\nbefore/after symbols.</p>\n</li>\n<li><p><tt>search_all_patterns</tt> returns an iterator. Each searched pattern is\nrepresented as a tuple <tt>(pattern_string, pattern_start_index)</tt>. The\nresults are sorted by the start index. If you want to get the result\nas a <tt>list</tt> object, use <tt>list</tt> function as follow:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">patterns</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">trie</span><span class=\"o\">.</span><span class=\"n\">search_all_patterns</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">))</span>\n</pre>\n</li>\n</ul>\n</div>\n<div id=\"triesearch-search-longest-patterns\">\n<h4>TrieSearch.search_longest_patterns</h4>\n<p>Search longest patterns in an input text:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">for</span> <span class=\"n\">pattern</span><span class=\"p\">,</span> <span class=\"n\">start_idx</span> <span class=\"ow\">in</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">trie</span><span class=\"o\">.</span><span class=\"n\">search_longest_patterns</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">),</span> <span class=\"n\">key</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]):</span>\n<span class=\"o\">...</span>     <span class=\"nb\">print</span> <span class=\"n\">pattern</span><span class=\"p\">,</span> <span class=\"n\">start_idx</span>\n<span class=\"o\">...</span>\n<span class=\"ow\">in</span> <span class=\"mi\">0</span>\n<span class=\"n\">computer</span> <span class=\"n\">science</span> <span class=\"mi\">3</span>\n<span class=\"p\">,</span> <span class=\"mi\">20</span>\n<span class=\"n\">a</span> <span class=\"mi\">22</span>\n<span class=\"n\">trie</span> <span class=\"mi\">24</span>\n<span class=\"p\">,</span> <span class=\"mi\">29</span>\n<span class=\"n\">also</span> <span class=\"mi\">31</span>\n<span class=\"n\">called</span> <span class=\"mi\">36</span>\n<span class=\"n\">digital</span> <span class=\"n\">tree</span> <span class=\"mi\">43</span>\n<span class=\"ow\">and</span> <span class=\"mi\">56</span>\n<span class=\"n\">sometimes</span> <span class=\"mi\">60</span>\n<span class=\"n\">radix</span> <span class=\"n\">tree</span> <span class=\"mi\">70</span>\n<span class=\"ow\">or</span> <span class=\"mi\">81</span>\n<span class=\"n\">prefix</span> <span class=\"n\">tree</span> <span class=\"mi\">84</span>\n<span class=\"p\">(</span> <span class=\"mi\">96</span>\n<span class=\"k\">as</span> <span class=\"mi\">98</span>\n<span class=\"n\">they</span> <span class=\"mi\">101</span>\n<span class=\"n\">can</span> <span class=\"mi\">106</span>\n<span class=\"n\">be</span> <span class=\"mi\">110</span>\n<span class=\"n\">by</span> <span class=\"mi\">122</span>\n<span class=\"n\">prefixes</span> <span class=\"mi\">125</span>\n<span class=\"p\">)</span> <span class=\"mi\">134</span>\n<span class=\"p\">,</span> <span class=\"mi\">136</span>\n<span class=\"ow\">is</span> <span class=\"n\">a</span> <span class=\"mi\">138</span>\n<span class=\"n\">kind</span> <span class=\"mi\">143</span>\n<span class=\"n\">of</span> <span class=\"mi\">148</span>\n<span class=\"n\">search</span> <span class=\"n\">tree</span> <span class=\"mi\">151</span>\n<span class=\"o\">-</span> <span class=\"mi\">163</span>\n<span class=\"n\">an</span> <span class=\"mi\">165</span>\n<span class=\"n\">ordered</span> <span class=\"n\">tree</span> <span class=\"n\">data</span> <span class=\"n\">structure</span> <span class=\"mi\">168</span>\n<span class=\"n\">that</span> <span class=\"mi\">196</span>\n<span class=\"ow\">is</span> <span class=\"mi\">201</span>\n<span class=\"n\">used</span> <span class=\"n\">to</span> <span class=\"mi\">204</span>\n<span class=\"n\">store</span> <span class=\"mi\">212</span>\n<span class=\"n\">a</span> <span class=\"mi\">218</span>\n<span class=\"n\">dynamic</span> <span class=\"nb\">set</span> <span class=\"mi\">220</span>\n<span class=\"ow\">or</span> <span class=\"mi\">232</span>\n<span class=\"n\">associative</span> <span class=\"n\">array</span> <span class=\"mi\">235</span>\n<span class=\"n\">where</span> <span class=\"n\">the</span> <span class=\"mi\">253</span>\n<span class=\"n\">the</span> <span class=\"n\">keys</span> <span class=\"mi\">259</span>\n<span class=\"n\">are</span> <span class=\"mi\">268</span>\n<span class=\"n\">usually</span> <span class=\"mi\">272</span>\n<span class=\"n\">strings</span> <span class=\"mi\">280</span>\n</pre>\n<ul>\n<li><tt>search_all_patterns</tt> also returns an iterator. The result sorted\nby the length of patterns. In the above example, the result is\nre-sorted by the start index.</li>\n</ul>\n</div>\n</div>\n<div id=\"trie-search-recordtriesearch\">\n<h3>trie_search.RecordTrieSearch</h3>\n<p><tt>trie_search.RecordTrieSearch</tt> is a sub class of\n<tt>marisa_trie.RecordTrie</tt>, which maps unicode keys to data tuples.</p>\n<p>The functions, <tt>search_all_patterns</tt> and <tt>search_longest_patterns</tt>,\nare also implemented in <tt>trie_search.RecordTrieSearch</tt>.</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 3492956, "releases": {"0.1.4": [{"comment_text": "", "digests": {"md5": "c30cc6a2080df12f60ba6c7a61529338", "sha256": "b56e1238a4c3a02b469676db49d80d55fe53b1d1483fd1957d1850964a05d8cf"}, "downloads": -1, "filename": "trie_search-0.1.4-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "c30cc6a2080df12f60ba6c7a61529338", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 6413, "upload_time": "2017-02-06T09:49:04", "upload_time_iso_8601": "2017-02-06T09:49:04.056614Z", "url": "https://files.pythonhosted.org/packages/1c/9d/e691a4471923f74133966c5cb83c8651fd615fb4d805d2125b247c3202d3/trie_search-0.1.4-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e41f5f9b18152ba02c7a45d04f0f58bf", "sha256": "7cccee7d5611495fb064e2f0cb27291640ba3364c9e50391b8178f6d4c1fa11c"}, "downloads": -1, "filename": "trie-search-0.1.4.tar.gz", "has_sig": false, "md5_digest": "e41f5f9b18152ba02c7a45d04f0f58bf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4521, "upload_time": "2017-02-06T09:48:48", "upload_time_iso_8601": "2017-02-06T09:48:48.235702Z", "url": "https://files.pythonhosted.org/packages/28/dd/757855768aba667ba219ff4f9c944a763df98f81003b22c44f5e3f2aa500/trie-search-0.1.4.tar.gz", "yanked": false}], "0.1.5": [{"comment_text": "", "digests": {"md5": "001ebde065b929a0690280e2fa3f33ce", "sha256": "bfa48763d2fd89a141beb5652047140ff764d1bd356c5f68027ba34db11bccd0"}, "downloads": -1, "filename": "trie_search-0.1.5-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "001ebde065b929a0690280e2fa3f33ce", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 6410, "upload_time": "2017-02-15T07:57:05", "upload_time_iso_8601": "2017-02-15T07:57:05.842902Z", "url": "https://files.pythonhosted.org/packages/ee/4e/551ab20da1cb35113ba4a6a700d507d90e48c8a42d7f95d1c461951a10f6/trie_search-0.1.5-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7065df233af45ba8f1868ba3f18e3047", "sha256": "2ce3b7f2505520a15397bedd8d72b1f0e1ab77291ac6c4c1c74e543a631b60d4"}, "downloads": -1, "filename": "trie-search-0.1.5.tar.gz", "has_sig": false, "md5_digest": "7065df233af45ba8f1868ba3f18e3047", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4549, "upload_time": "2017-02-15T07:56:20", "upload_time_iso_8601": "2017-02-15T07:56:20.012921Z", "url": "https://files.pythonhosted.org/packages/f0/a9/8ba8b5fd7e5e00a23b9e79391a87f1d23ed8df139f7894bc2219e3ac1246/trie-search-0.1.5.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "53d1e548ce7181d569ddf80c2dacbc2b", "sha256": "38f905a4ebf2ea3fa8ac2b22f38e32d7e3a4f2be89463fcf22d8825d93b4a509"}, "downloads": -1, "filename": "trie_search-0.2.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "53d1e548ce7181d569ddf80c2dacbc2b", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 6594, "upload_time": "2017-02-16T05:37:18", "upload_time_iso_8601": "2017-02-16T05:37:18.764683Z", "url": "https://files.pythonhosted.org/packages/de/f7/82eb8c6a7de4a79d7ad7972f6e88ceb64b146145fb364d2315747b18e98b/trie_search-0.2.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f1993a6f7d36ed403beff92756557af1", "sha256": "a872c4a7f60212df9d4db39b53b6232368113c8b2e28bf1127792002493bedac"}, "downloads": -1, "filename": "trie-search-0.2.0.tar.gz", "has_sig": false, "md5_digest": "f1993a6f7d36ed403beff92756557af1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4681, "upload_time": "2017-02-16T05:37:21", "upload_time_iso_8601": "2017-02-16T05:37:21.387779Z", "url": "https://files.pythonhosted.org/packages/06/ed/cc9e081f940da1a3bd0380b928735c0c9a10ad9e42c155f54050b828d018/trie-search-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "69268288ee12ffdadf6cc901b12e7a41", "sha256": "f1fb5cad693a1a818a2d0c37acdcf0d89a742023ca0578824c72f90839e676c1"}, "downloads": -1, "filename": "trie_search-0.2.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "69268288ee12ffdadf6cc901b12e7a41", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 6599, "upload_time": "2017-02-16T09:54:24", "upload_time_iso_8601": "2017-02-16T09:54:24.556043Z", "url": "https://files.pythonhosted.org/packages/1e/2c/cd7ee42e5d7ff6371a266c61a69969f6305086a56208e9bda71972bb1b6c/trie_search-0.2.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "066c708de53f374cdbe691b561921790", "sha256": "b1dfdc9e2fc77680cc98ad03d25af452b238c392713de9ea6fc5f1a0ec78fb2b"}, "downloads": -1, "filename": "trie-search-0.2.1.tar.gz", "has_sig": false, "md5_digest": "066c708de53f374cdbe691b561921790", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4672, "upload_time": "2017-02-16T09:54:26", "upload_time_iso_8601": "2017-02-16T09:54:26.747279Z", "url": "https://files.pythonhosted.org/packages/e5/7f/39ecd1d0b1aa83d67b68a4feae044e4edb14b709c1b94bb9e1c8170af408/trie-search-0.2.1.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "988e9c1bea7eb6ccf69c006f598a220a", "sha256": "633da8586149426cef1fc743f7b119e5cf19e1e57d98bbef1f7eb87330c40d8a"}, "downloads": -1, "filename": "trie_search-0.2.2-py2-none-any.whl", "has_sig": false, "md5_digest": "988e9c1bea7eb6ccf69c006f598a220a", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 6589, "upload_time": "2017-10-25T02:47:07", "upload_time_iso_8601": "2017-10-25T02:47:07.014706Z", "url": "https://files.pythonhosted.org/packages/10/1e/8139b1d9b316848ea1ea3d2ae467f4e67a35de6d5bfb3688685ffa3bd945/trie_search-0.2.2-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fa996a7e7ac0e952ed1bbcc544cd88c4", "sha256": "0f7305ba779e2f5f6302be397f0b84ddca8b52ebce9d37c92a97a8d8b3b43c59"}, "downloads": -1, "filename": "trie-search-0.2.2.tar.gz", "has_sig": false, "md5_digest": "fa996a7e7ac0e952ed1bbcc544cd88c4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4676, "upload_time": "2017-10-25T02:47:08", "upload_time_iso_8601": "2017-10-25T02:47:08.702358Z", "url": "https://files.pythonhosted.org/packages/1b/ce/1603240077dc8f2c638ba931c25ea16072f886f841598a40f84b76f9cd97/trie-search-0.2.2.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "1cc98fc6fc69280fd162ecb2a44bc49e", "sha256": "37435dcb1bfd69776d58be3be34fe0e04d39cb9757b0f48f329112ebe64c9ef7"}, "downloads": -1, "filename": "trie_search-0.3.0-py2.7.egg", "has_sig": false, "md5_digest": "1cc98fc6fc69280fd162ecb2a44bc49e", "packagetype": "bdist_egg", "python_version": "2.7", "requires_python": null, "size": 6665, "upload_time": "2018-01-16T05:46:47", "upload_time_iso_8601": "2018-01-16T05:46:47.785057Z", "url": "https://files.pythonhosted.org/packages/6e/e6/9896cb19402dc2490a3e5505d5419bf89de99703bd16386c108944ab82c0/trie_search-0.3.0-py2.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "a8034376fc93abcc25c935dbbdb8aa81", "sha256": "e46f01ce6c2f2c610b822df3074a669a50b3967042dcfe7a91c91ed33b15e502"}, "downloads": -1, "filename": "trie_search-0.3.0-py2-none-any.whl", "has_sig": false, "md5_digest": "a8034376fc93abcc25c935dbbdb8aa81", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 6606, "upload_time": "2018-01-16T05:46:43", "upload_time_iso_8601": "2018-01-16T05:46:43.960064Z", "url": "https://files.pythonhosted.org/packages/ea/42/74d14b4911e623eb82687a39e53d6a8ab05fdf730d18da18d908576cc30c/trie_search-0.3.0-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7d5157d23bcb5a11f650578c9b29a861", "sha256": "eeeec95c0f320129382e71bc1da02e9945198608f1996b08249665ec09e512a6"}, "downloads": -1, "filename": "trie_search-0.3.0-py3.5.egg", "has_sig": false, "md5_digest": "7d5157d23bcb5a11f650578c9b29a861", "packagetype": "bdist_egg", "python_version": "3.5", "requires_python": null, "size": 6897, "upload_time": "2018-01-16T05:46:48", "upload_time_iso_8601": "2018-01-16T05:46:48.778103Z", "url": "https://files.pythonhosted.org/packages/3b/81/a874fedaf96290365132d515269465c2b049930b8bf965fb3438184df497/trie_search-0.3.0-py3.5.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "f5ce2d6415417eb2f3ba57058b063f84", "sha256": "3e0d66ea7057e65a0aa0bf23da1bb50f03b41c94b4752e471884f1c82b33e885"}, "downloads": -1, "filename": "trie_search-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "f5ce2d6415417eb2f3ba57058b063f84", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6573, "upload_time": "2018-01-16T05:46:45", "upload_time_iso_8601": "2018-01-16T05:46:45.579823Z", "url": "https://files.pythonhosted.org/packages/93/4c/d0b45b593b262ef188c187e27fb726b5ec34e06585abd685a57a09c5d576/trie_search-0.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ce98821f813772af49ce9e1c9ffcdefe", "sha256": "a507c4696951fc7745f91a09c92367262c92d648ed05ee071ab8bc579d7deb10"}, "downloads": -1, "filename": "trie-search-0.3.0.tar.gz", "has_sig": false, "md5_digest": "ce98821f813772af49ce9e1c9ffcdefe", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4668, "upload_time": "2018-01-16T05:46:46", "upload_time_iso_8601": "2018-01-16T05:46:46.590460Z", "url": "https://files.pythonhosted.org/packages/5e/e2/f14c28bda657b9ef623d2ab4bc905a6c4adadffeda945708c9fb719d601c/trie-search-0.3.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "1cc98fc6fc69280fd162ecb2a44bc49e", "sha256": "37435dcb1bfd69776d58be3be34fe0e04d39cb9757b0f48f329112ebe64c9ef7"}, "downloads": -1, "filename": "trie_search-0.3.0-py2.7.egg", "has_sig": false, "md5_digest": "1cc98fc6fc69280fd162ecb2a44bc49e", "packagetype": "bdist_egg", "python_version": "2.7", "requires_python": null, "size": 6665, "upload_time": "2018-01-16T05:46:47", "upload_time_iso_8601": "2018-01-16T05:46:47.785057Z", "url": "https://files.pythonhosted.org/packages/6e/e6/9896cb19402dc2490a3e5505d5419bf89de99703bd16386c108944ab82c0/trie_search-0.3.0-py2.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "a8034376fc93abcc25c935dbbdb8aa81", "sha256": "e46f01ce6c2f2c610b822df3074a669a50b3967042dcfe7a91c91ed33b15e502"}, "downloads": -1, "filename": "trie_search-0.3.0-py2-none-any.whl", "has_sig": false, "md5_digest": "a8034376fc93abcc25c935dbbdb8aa81", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 6606, "upload_time": "2018-01-16T05:46:43", "upload_time_iso_8601": "2018-01-16T05:46:43.960064Z", "url": "https://files.pythonhosted.org/packages/ea/42/74d14b4911e623eb82687a39e53d6a8ab05fdf730d18da18d908576cc30c/trie_search-0.3.0-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7d5157d23bcb5a11f650578c9b29a861", "sha256": "eeeec95c0f320129382e71bc1da02e9945198608f1996b08249665ec09e512a6"}, "downloads": -1, "filename": "trie_search-0.3.0-py3.5.egg", "has_sig": false, "md5_digest": "7d5157d23bcb5a11f650578c9b29a861", "packagetype": "bdist_egg", "python_version": "3.5", "requires_python": null, "size": 6897, "upload_time": "2018-01-16T05:46:48", "upload_time_iso_8601": "2018-01-16T05:46:48.778103Z", "url": "https://files.pythonhosted.org/packages/3b/81/a874fedaf96290365132d515269465c2b049930b8bf965fb3438184df497/trie_search-0.3.0-py3.5.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "f5ce2d6415417eb2f3ba57058b063f84", "sha256": "3e0d66ea7057e65a0aa0bf23da1bb50f03b41c94b4752e471884f1c82b33e885"}, "downloads": -1, "filename": "trie_search-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "f5ce2d6415417eb2f3ba57058b063f84", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6573, "upload_time": "2018-01-16T05:46:45", "upload_time_iso_8601": "2018-01-16T05:46:45.579823Z", "url": "https://files.pythonhosted.org/packages/93/4c/d0b45b593b262ef188c187e27fb726b5ec34e06585abd685a57a09c5d576/trie_search-0.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ce98821f813772af49ce9e1c9ffcdefe", "sha256": "a507c4696951fc7745f91a09c92367262c92d648ed05ee071ab8bc579d7deb10"}, "downloads": -1, "filename": "trie-search-0.3.0.tar.gz", "has_sig": false, "md5_digest": "ce98821f813772af49ce9e1c9ffcdefe", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4668, "upload_time": "2018-01-16T05:46:46", "upload_time_iso_8601": "2018-01-16T05:46:46.590460Z", "url": "https://files.pythonhosted.org/packages/5e/e2/f14c28bda657b9ef623d2ab4bc905a6c4adadffeda945708c9fb719d601c/trie-search-0.3.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:47:14 2020"}