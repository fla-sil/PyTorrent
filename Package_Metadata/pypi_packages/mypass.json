{"info": {"author": "Sebastian Noack", "author_email": "sebstian.noack@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: End Users/Desktop", "Intended Audience :: Information Technology", "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)", "Operating System :: POSIX", "Programming Language :: Python", "Programming Language :: Python :: 3", "Topic :: Security", "Topic :: Utilities"], "description": "mypass\n======\n\n[![Build Status](https://travis-ci.org/snoack/mypass.svg?branch=master)](https://travis-ci.org/snoack/mypass)\n[![Pypi Entry](https://badge.fury.io/py/mypass.svg)](https://pypi.python.org/pypi/mypass)\n\nA secure password manager for UNIX (Linux, BSD) that can be used conviniently\nfrom the command line.\n\nI prefer the command line over the GUI, and the lack of password managers that\nserve this use case, motivated me to write my own. It also comes with a browser\nextension in order to conviniently but securely fill out logins on the web.\n\n\nInstallation\n------------\n\n### On Debian/Ubuntu\n\nA package is available from the author's PPA, which can be installed by running\nfollowing commands (as root):\n\n```\nadd-apt-repository ppa:s.noack/ppa\napt-get update\napt-get install mypass\n```\n\n\n### Using pip\n\nMake sure you have Python 3 and SQLCipher installed. Then run following\ncommand (optionally as root for system-wide installation):\n\n```\npip3 install mypass\n```\n\n\n#### Command completion (optional)\n\nIn order to enable completion of subcommands, contexts and usernames in Bash,\nadd the following line to your *~/.bashrc* or in a new file in\n*/etc/bash_completion.d/* (if available, for system-wide configuration):\n\n```\neval \"$(register-python-argcomplete --no-defaults mypass)\"\n```\n\nFor enabling completion in Zsh, Tcsh and Fish please refer to the [`argcomplete` documentation][1].\n\n\n#### Browser integration (optional)\n\nIn order to allow the browser extension to communicate with the host application,\nplease run the following commands, replacing `<vendor>` and `<manifest-dir>`\nwith the respective values from the table below:\n\n```\nmkdir -p <manifest-dir>\nln -s -t <manifest-dir> $(python3 -c 'import mypass, os; print(os.path.dirname(mypass.__file__))')/native-messaging-hosts/<vendor>/*\n```\n\n|               | `vendor` | `manifest-dir` (system-wide)            | `manifest-dir` (per-user)                    |\n| ------------- | -------- | --------------------------------------- | -------------------------------------------- |\n| Firefox       | mozilla  | /usr/lib/mozilla/native-messaging-hosts | ~/.mozilla/native-messaging-hosts            |\n| Google Chrome | chrome   | /etc/opt/chrome/native-messaging-hosts  | ~/.config/google-chrome/NativeMessagingHosts |\n| Chromium      | chrome   | /etc/chromium/native-messaging-hosts    | ~/.config/chromium/NativeMessagingHosts      |\n\n\nIf you want to load the extension in Firefox, please run the following commands,\nreplacing `<prefix>` with */usr/share* for system-wide installation (root required),\nor replace `<prefix>` with `~` for per-user installation, then restart Firefox:\n\n```\nmkdir -p <prefix>/mozilla/extensions/{ec8030f7-c20a-464f-9b0e-13a3a9e97384}\nln -s $(python3 -c 'import mypass, os; print(os.path.dirname(mypass.__file__))')/extension <prefix>/mozilla/extensions/{ec8030f7-c20a-464f-9b0e-13a3a9e97384}/mypass@snoack.addons.mozilla.org\n```\n\nFor Chromium-based browsers, you can install the extension from the [Chrome Web Store][2].\n\n\nUsage\n-----\n\nWhen you run most of the commands below, you will be prompted for the passhprase\nto decrypt/encrypt the credentials with. If the encrypted file doesn't exist yet,\nit will be created when you store any credentials for the first time.\nBy default, a daemon is spawned and shuts down after 30 minutes of inactivity,\nso that you don't have to enter your passphrase again when performing multiple\nactions within that period.\n\n\n#### `mypass add <context> [<username>] [<password>]`\n\nStores credentials for the given *context*.\n\nThe *context* can be any unique keyword which you relate to these credentials. But\nif the credentials are for a website, it is recommended to use the corresponding\ndomain as *context*, so that the browser extension finds the credentials, see below.\n\nThe *username* is optional, but specifying a username if there is any, allows you\nto store multiple username/password pairs for the same context. Also, if a username\nis given, it will be used by the browser extension when filling out web forms.\n\nIf *password* is omitted you will be prompted for the password. **Passing the\npassword on the command line is NOT recommeded**, except for import scripts,\nas it will end up in your shell's history.\n\n\n#### `mypass new <context> [<username>]`\n\nSame as `mypass add`, but stores a new random secure password and prints it.\n\n\n#### `mypass get <context>`\n\nPrints the credentials for the given *context*.\n\n\n#### `mypass list`\n\nPrints each context (one per line) that any credentials have been stored for.\nIn order to filter the list, just pipe the output to programs like `grep`.\n\n\n#### `mypass remove <context> [<username>]`\n\nDeletes credentials from the encrypted storage. If *username* is given, only\nthis username and the associated password is removed. If *username* is omitted,\nthe whole *context* is wiped.\n\n\n#### `mypass rename --new-{context|username}=<newvalue> <context> [<username>]`\n\nMoves credentials around within the encrypted storage.\n\n\n##### Examples\n\nRenaming a context:\n\n```\nmypass rename --new-context=new.example.com old.example.com\n```\n\nChanging the username for *example.com* from *john* to *rose*:\n\n```\nmypass rename --new-username=rose example.com john\n```\n\nAdding a username to a password which has been stored without an associated username:\n\n```\nmypass rename --new-username=rose example.com\n```\n\n\n#### `mypass alias <context> <alias>`\n\nCreates a new context that refers to the credentials of an existing context.\n\nChanges to the credentials performed under either context will be reflected\nwhen looking up the credentials for the other context. Removing either context\ndoesn't remove the credentials as long as the other context exists.\n\n\n#### `mypass changepw`\n\nPrompts you for a new passphrase. Existing credentials are re-encrypted\nusing this passphrase.\n\n\n#### `mypass lock`\n\nForces the daemon to immediately shutdown, if it is running,\nso that you'd have to enter the passphrase again, from now on.\n\n\nConfiguration\n-------------\n\nOptionally, you can create a config file under `~/.config/mypass`, in order to\noverride any of the following presets:\n\n```ini\n[daemon]\n# Minutes of inactivity after which the daemon shuts down, and you have\n# to enter the passphrase, the credentials are encrypted with, again.\ntimeout = 30\n\n# Path to log file any excpetions thrown by the daemon are written to.\nlogfile = /home/user/.config/mypass/log\n\n[database]\n# Path to the encrypted file storing the credentials.\npath = /home/user/.config/mypass/db\n\n[password]\n# Length of newly generated passwords.\nlength = 16\n```\n\n\nBrowser integration\n-------------------\n\nIf you installed `mypass` on Debian/Ubuntu from the PPA above, next time you\nstart Chromium or Firefox, the extension should be active. If you installed\n`mypass` by other means see above how to install the browser extension.\nNote that while the browser extension is optional, it cannot be used standalone\nbut requires the command line utility to be installed as well.\n\nThe extension adds a button to the browser bar that when clicked, fills out login\nforms in the active tab, if the document's domain and path (partially) match the\n*context* of any stored credentials. If the document's URL is `https://www.example.com/foo/bar`\nfor example, credentials from following contexts are considered, in this order:\n\n1. `www.example.com/foo/bar`\n2. `www.example.com/foo`\n3. `www.example.com`\n4. `example.com`\n\nThe browser extension is intentionally kept simple and doesn't provide functionality\nto manage credentials. Please use the command line utility therefore.\n\n[1]: https://argcomplete.readthedocs.io/#zsh-support\n[2]: https://chrome.google.com/webstore/detail/mypass/ddbeciaedkkgeiaellofogahfcolmkka\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/snoack/mypass", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "mypass", "package_url": "https://pypi.org/project/mypass/", "platform": "", "project_url": "https://pypi.org/project/mypass/", "project_urls": {"Homepage": "https://github.com/snoack/mypass"}, "release_url": "https://pypi.org/project/mypass/2.0/", "requires_dist": ["pycrypto", "argcomplete"], "requires_python": "", "summary": "A secure password manager with command line interface", "version": "2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>mypass</h1>\n<p><a href=\"https://travis-ci.org/snoack/mypass\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9a0b8cb6810f86ca94a4882747bbb538faccc228/68747470733a2f2f7472617669732d63692e6f72672f736e6f61636b2f6d79706173732e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://pypi.python.org/pypi/mypass\" rel=\"nofollow\"><img alt=\"Pypi Entry\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0839fe833467792b33cf68319d348b88aa2bb349/68747470733a2f2f62616467652e667572792e696f2f70792f6d79706173732e737667\"></a></p>\n<p>A secure password manager for UNIX (Linux, BSD) that can be used conviniently\nfrom the command line.</p>\n<p>I prefer the command line over the GUI, and the lack of password managers that\nserve this use case, motivated me to write my own. It also comes with a browser\nextension in order to conviniently but securely fill out logins on the web.</p>\n<h2>Installation</h2>\n<h3>On Debian/Ubuntu</h3>\n<p>A package is available from the author's PPA, which can be installed by running\nfollowing commands (as root):</p>\n<pre><code>add-apt-repository ppa:s.noack/ppa\napt-get update\napt-get install mypass\n</code></pre>\n<h3>Using pip</h3>\n<p>Make sure you have Python 3 and SQLCipher installed. Then run following\ncommand (optionally as root for system-wide installation):</p>\n<pre><code>pip3 install mypass\n</code></pre>\n<h4>Command completion (optional)</h4>\n<p>In order to enable completion of subcommands, contexts and usernames in Bash,\nadd the following line to your <em>~/.bashrc</em> or in a new file in\n<em>/etc/bash_completion.d/</em> (if available, for system-wide configuration):</p>\n<pre><code>eval \"$(register-python-argcomplete --no-defaults mypass)\"\n</code></pre>\n<p>For enabling completion in Zsh, Tcsh and Fish please refer to the <a href=\"https://argcomplete.readthedocs.io/#zsh-support\" rel=\"nofollow\"><code>argcomplete</code> documentation</a>.</p>\n<h4>Browser integration (optional)</h4>\n<p>In order to allow the browser extension to communicate with the host application,\nplease run the following commands, replacing <code>&lt;vendor&gt;</code> and <code>&lt;manifest-dir&gt;</code>\nwith the respective values from the table below:</p>\n<pre><code>mkdir -p &lt;manifest-dir&gt;\nln -s -t &lt;manifest-dir&gt; $(python3 -c 'import mypass, os; print(os.path.dirname(mypass.__file__))')/native-messaging-hosts/&lt;vendor&gt;/*\n</code></pre>\n<table>\n<thead>\n<tr>\n<th></th>\n<th><code>vendor</code></th>\n<th><code>manifest-dir</code> (system-wide)</th>\n<th><code>manifest-dir</code> (per-user)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Firefox</td>\n<td>mozilla</td>\n<td>/usr/lib/mozilla/native-messaging-hosts</td>\n<td>~/.mozilla/native-messaging-hosts</td>\n</tr>\n<tr>\n<td>Google Chrome</td>\n<td>chrome</td>\n<td>/etc/opt/chrome/native-messaging-hosts</td>\n<td>~/.config/google-chrome/NativeMessagingHosts</td>\n</tr>\n<tr>\n<td>Chromium</td>\n<td>chrome</td>\n<td>/etc/chromium/native-messaging-hosts</td>\n<td>~/.config/chromium/NativeMessagingHosts</td>\n</tr></tbody></table>\n<p>If you want to load the extension in Firefox, please run the following commands,\nreplacing <code>&lt;prefix&gt;</code> with <em>/usr/share</em> for system-wide installation (root required),\nor replace <code>&lt;prefix&gt;</code> with <code>~</code> for per-user installation, then restart Firefox:</p>\n<pre><code>mkdir -p &lt;prefix&gt;/mozilla/extensions/{ec8030f7-c20a-464f-9b0e-13a3a9e97384}\nln -s $(python3 -c 'import mypass, os; print(os.path.dirname(mypass.__file__))')/extension &lt;prefix&gt;/mozilla/extensions/{ec8030f7-c20a-464f-9b0e-13a3a9e97384}/mypass@snoack.addons.mozilla.org\n</code></pre>\n<p>For Chromium-based browsers, you can install the extension from the <a href=\"https://chrome.google.com/webstore/detail/mypass/ddbeciaedkkgeiaellofogahfcolmkka\" rel=\"nofollow\">Chrome Web Store</a>.</p>\n<h2>Usage</h2>\n<p>When you run most of the commands below, you will be prompted for the passhprase\nto decrypt/encrypt the credentials with. If the encrypted file doesn't exist yet,\nit will be created when you store any credentials for the first time.\nBy default, a daemon is spawned and shuts down after 30 minutes of inactivity,\nso that you don't have to enter your passphrase again when performing multiple\nactions within that period.</p>\n<h4><code>mypass add &lt;context&gt; [&lt;username&gt;] [&lt;password&gt;]</code></h4>\n<p>Stores credentials for the given <em>context</em>.</p>\n<p>The <em>context</em> can be any unique keyword which you relate to these credentials. But\nif the credentials are for a website, it is recommended to use the corresponding\ndomain as <em>context</em>, so that the browser extension finds the credentials, see below.</p>\n<p>The <em>username</em> is optional, but specifying a username if there is any, allows you\nto store multiple username/password pairs for the same context. Also, if a username\nis given, it will be used by the browser extension when filling out web forms.</p>\n<p>If <em>password</em> is omitted you will be prompted for the password. <strong>Passing the\npassword on the command line is NOT recommeded</strong>, except for import scripts,\nas it will end up in your shell's history.</p>\n<h4><code>mypass new &lt;context&gt; [&lt;username&gt;]</code></h4>\n<p>Same as <code>mypass add</code>, but stores a new random secure password and prints it.</p>\n<h4><code>mypass get &lt;context&gt;</code></h4>\n<p>Prints the credentials for the given <em>context</em>.</p>\n<h4><code>mypass list</code></h4>\n<p>Prints each context (one per line) that any credentials have been stored for.\nIn order to filter the list, just pipe the output to programs like <code>grep</code>.</p>\n<h4><code>mypass remove &lt;context&gt; [&lt;username&gt;]</code></h4>\n<p>Deletes credentials from the encrypted storage. If <em>username</em> is given, only\nthis username and the associated password is removed. If <em>username</em> is omitted,\nthe whole <em>context</em> is wiped.</p>\n<h4><code>mypass rename --new-{context|username}=&lt;newvalue&gt; &lt;context&gt; [&lt;username&gt;]</code></h4>\n<p>Moves credentials around within the encrypted storage.</p>\n<h5>Examples</h5>\n<p>Renaming a context:</p>\n<pre><code>mypass rename --new-context=new.example.com old.example.com\n</code></pre>\n<p>Changing the username for <em>example.com</em> from <em>john</em> to <em>rose</em>:</p>\n<pre><code>mypass rename --new-username=rose example.com john\n</code></pre>\n<p>Adding a username to a password which has been stored without an associated username:</p>\n<pre><code>mypass rename --new-username=rose example.com\n</code></pre>\n<h4><code>mypass alias &lt;context&gt; &lt;alias&gt;</code></h4>\n<p>Creates a new context that refers to the credentials of an existing context.</p>\n<p>Changes to the credentials performed under either context will be reflected\nwhen looking up the credentials for the other context. Removing either context\ndoesn't remove the credentials as long as the other context exists.</p>\n<h4><code>mypass changepw</code></h4>\n<p>Prompts you for a new passphrase. Existing credentials are re-encrypted\nusing this passphrase.</p>\n<h4><code>mypass lock</code></h4>\n<p>Forces the daemon to immediately shutdown, if it is running,\nso that you'd have to enter the passphrase again, from now on.</p>\n<h2>Configuration</h2>\n<p>Optionally, you can create a config file under <code>~/.config/mypass</code>, in order to\noverride any of the following presets:</p>\n<pre><span class=\"k\">[daemon]</span>\n<span class=\"c1\"># Minutes of inactivity after which the daemon shuts down, and you have</span>\n<span class=\"c1\"># to enter the passphrase, the credentials are encrypted with, again.</span>\n<span class=\"na\">timeout</span> <span class=\"o\">=</span> <span class=\"s\">30</span>\n\n<span class=\"c1\"># Path to log file any excpetions thrown by the daemon are written to.</span>\n<span class=\"na\">logfile</span> <span class=\"o\">=</span> <span class=\"s\">/home/user/.config/mypass/log</span>\n\n<span class=\"k\">[database]</span>\n<span class=\"c1\"># Path to the encrypted file storing the credentials.</span>\n<span class=\"na\">path</span> <span class=\"o\">=</span> <span class=\"s\">/home/user/.config/mypass/db</span>\n\n<span class=\"k\">[password]</span>\n<span class=\"c1\"># Length of newly generated passwords.</span>\n<span class=\"na\">length</span> <span class=\"o\">=</span> <span class=\"s\">16</span>\n</pre>\n<h2>Browser integration</h2>\n<p>If you installed <code>mypass</code> on Debian/Ubuntu from the PPA above, next time you\nstart Chromium or Firefox, the extension should be active. If you installed\n<code>mypass</code> by other means see above how to install the browser extension.\nNote that while the browser extension is optional, it cannot be used standalone\nbut requires the command line utility to be installed as well.</p>\n<p>The extension adds a button to the browser bar that when clicked, fills out login\nforms in the active tab, if the document's domain and path (partially) match the\n<em>context</em> of any stored credentials. If the document's URL is <code>https://www.example.com/foo/bar</code>\nfor example, credentials from following contexts are considered, in this order:</p>\n<ol>\n<li><code>www.example.com/foo/bar</code></li>\n<li><code>www.example.com/foo</code></li>\n<li><code>www.example.com</code></li>\n<li><code>example.com</code></li>\n</ol>\n<p>The browser extension is intentionally kept simple and doesn't provide functionality\nto manage credentials. Please use the command line utility therefore.</p>\n\n          </div>"}, "last_serial": 6471129, "releases": {"2.0": [{"comment_text": "", "digests": {"md5": "75b3b16cb5f37f60a85de8b70405196f", "sha256": "e5d663805e8f2ed97e3372559000b1fc037656286e865fb11c0237e3516de6a0"}, "downloads": -1, "filename": "mypass-2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "75b3b16cb5f37f60a85de8b70405196f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 24876, "upload_time": "2020-01-17T06:46:18", "upload_time_iso_8601": "2020-01-17T06:46:18.195940Z", "url": "https://files.pythonhosted.org/packages/82/3c/03240b9e3be835a9976b4ee339f92ca24c4abed77341c26d391a9b1415fc/mypass-2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1537c6c2659128b2ec61789008e747cc", "sha256": "4c517d65db4b764767810d975515a8838cf56f76962b1dcb32ea2f73061bc9ca"}, "downloads": -1, "filename": "mypass-2.0.tar.gz", "has_sig": false, "md5_digest": "1537c6c2659128b2ec61789008e747cc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20872, "upload_time": "2020-01-17T06:46:20", "upload_time_iso_8601": "2020-01-17T06:46:20.552298Z", "url": "https://files.pythonhosted.org/packages/68/13/44e89fefc2d0a14c3e1ae78c4622c0d061dfd1c9a0109453d1e960da02ff/mypass-2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "75b3b16cb5f37f60a85de8b70405196f", "sha256": "e5d663805e8f2ed97e3372559000b1fc037656286e865fb11c0237e3516de6a0"}, "downloads": -1, "filename": "mypass-2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "75b3b16cb5f37f60a85de8b70405196f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 24876, "upload_time": "2020-01-17T06:46:18", "upload_time_iso_8601": "2020-01-17T06:46:18.195940Z", "url": "https://files.pythonhosted.org/packages/82/3c/03240b9e3be835a9976b4ee339f92ca24c4abed77341c26d391a9b1415fc/mypass-2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1537c6c2659128b2ec61789008e747cc", "sha256": "4c517d65db4b764767810d975515a8838cf56f76962b1dcb32ea2f73061bc9ca"}, "downloads": -1, "filename": "mypass-2.0.tar.gz", "has_sig": false, "md5_digest": "1537c6c2659128b2ec61789008e747cc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20872, "upload_time": "2020-01-17T06:46:20", "upload_time_iso_8601": "2020-01-17T06:46:20.552298Z", "url": "https://files.pythonhosted.org/packages/68/13/44e89fefc2d0a14c3e1ae78c4622c0d061dfd1c9a0109453d1e960da02ff/mypass-2.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:49:24 2020"}