{"info": {"author": "Brandon Satrom", "author_email": "bsatrom@gmail.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "[![Build Status](https://dev.azure.com/brandon0360/py-conway/_apis/build/status/bsatrom.py-conway?branchName=master)](https://dev.azure.com/brandon0360/py-conway/_build/latest?definitionId=3&branchName=master)\n[![codecov](https://codecov.io/gh/bsatrom/py-conway/branch/master/graph/badge.svg)](https://codecov.io/gh/bsatrom/py-conway)\n![Pyton Version Support](https://img.shields.io/pypi/pyversions/py-conway)\n\n# py-conway\n\nTDD-style implementation of [Conway's Game of Life](https://www.conwaylife.com/wiki/Conway%27s_Game_of_Life) in Python. Built with zero dependencies in order to be portable to Web, CLI and embedded applications (like MicroPython and CircuitPython).\n\n![](/assets/CPYConway-PyBadge.gif)\n\n[View Project on PyPi](https://pypi.org/project/py-conway/)\n\n## Installation\n\n```bash\npip install py-conway\n```\n\n## Usage\n\nTo create a game, you'll need to provide dimensions and a starting two-dimensonal list to function as the game board. For example:\n\n```python\nfrom py_conway import Game\n\nseed = [[0, 1, 0],\n        [1, 1, 1],\n        [0, 1, 0]]\n\nnew_game = Game(3, 3, seed)\n```\n\nIf no seed is provided, the game can either generate a seed of zeroes, or a random starter seed. use the `random=True` positional argument to generate a random seed.\n\n```python\nnew_game = Game(12, 12, random=True)\n```\n\nOnce the game board is populated, call the `start()` method. The game values and state will be initialized so you can interact with the board one step at a time. You can also use this method to re-initialize the game:\n\n```python\nnew_game.start()\n```\n\nYou can also instruct the game to self-run with the `ThreadedGame` class and `start_thread()` method. The game will start on a background thread and update the full game board as well as a number of informational instance variables:\n\n```python\nfrom py_conway import ThreadedGame\n\nthreaded_game = ThreadedGame(12, 12, random=True)\n\nthreaded_game.start_thread()\n\nthreaded_game.current_board # hold the complete game state after each step\nthreaded_game.live_cells # the count of live cells on the board\nthreaded_game.generations # the number of steps elapsed in the current game.\n\nthreaded_game.stop_thread()\n```\n\nIt's also possible to call the `run_generation()` method and control the game state yourself from one iteration to the next. Make sure you call the `start()` method first:\n\n```python\nnew_game.run_generation()\n```\n\nAccording to the rules of Conway's Game of Life, the board is meant to be infinite. If you wish to \nemulate this behavior in your own games, you can wrap the board around on itself with the initialization flag `enforce_boundary`, which is true by default.\n\n```python\nseed = [[1, 0, 0, 0],\n        [1, 0, 0, 0],\n        [1, 0, 0, 0],\n        [0, 0, 0, 0]]\n\nnew_game = Game(4, 4, seed=seed, enforce_boundary=False)\n```\n\nIf the above code is run for a single generation, the board will look like this\n\n```\n[[0, 0, 0, 0],\n [1, 1, 0, 1],\n [0, 0, 0, 0],\n [0, 0, 0, 0]]\n```\n\nHere's an example that runs the game and plots the game board after intialization and the first generation. You can run this from the [example folder](/example), either in a Jupyter notebook or standalone script:\n\n```python\nimport matplotlib.pyplot as plt\nfrom matplotlib.animation import FuncAnimation\nfrom py-conway import Game\n\nmy_game = Game(12, 12, random=True, enforce_boundary=False)\nmy_game.start()\n\nboard, ax = plt.subplots()\nplt.title(\"Conway's Game of Life\")\n\nylim, xlim = my_game.board_size\n\nax.set_xlim(0, xlim)\nax.set_ylim(0, ylim)\n\nimage = plt.imshow(my_game.current_board, animated=True, cmap='binary')\n\n\ndef update(*args, **kwargs):\n    my_game.run_generation()\n    plt.xlabel(f\"Generation: {my_game.generations} |\\\n                Population: {my_game.live_cells}\")\n    image.set_array(my_game.current_board)\n    return image,\n\n\nconway_animation = FuncAnimation(board, update, interval=50, blit=True)\nplt.show()\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/bsatrom/py-conway", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "py-conway", "package_url": "https://pypi.org/project/py-conway/", "platform": "", "project_url": "https://pypi.org/project/py-conway/", "project_urls": {"Homepage": "https://github.com/bsatrom/py-conway"}, "release_url": "https://pypi.org/project/py-conway/0.6.0/", "requires_dist": null, "requires_python": ">=3.5", "summary": "TDD-style implementation of Conway's Game of Life in Python", "version": "0.6.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://dev.azure.com/brandon0360/py-conway/_build/latest?definitionId=3&amp;branchName=master\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9f12bfa8f88b05f67364fe9bd541456967708c91/68747470733a2f2f6465762e617a7572652e636f6d2f6272616e646f6e303336302f70792d636f6e7761792f5f617069732f6275696c642f7374617475732f62736174726f6d2e70792d636f6e7761793f6272616e63684e616d653d6d6173746572\"></a>\n<a href=\"https://codecov.io/gh/bsatrom/py-conway\" rel=\"nofollow\"><img alt=\"codecov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f4e6131c270decdb5032367220781baac67a416d/68747470733a2f2f636f6465636f762e696f2f67682f62736174726f6d2f70792d636f6e7761792f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a>\n<img alt=\"Pyton Version Support\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0b25f7868a23ef77d9305e63e1f0bd7b3e9fa93b/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f70792d636f6e776179\"></p>\n<h1>py-conway</h1>\n<p>TDD-style implementation of <a href=\"https://www.conwaylife.com/wiki/Conway%27s_Game_of_Life\" rel=\"nofollow\">Conway's Game of Life</a> in Python. Built with zero dependencies in order to be portable to Web, CLI and embedded applications (like MicroPython and CircuitPython).</p>\n<p><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9a6cd3503f053239783a436b2a46483ad6282f17/2f6173736574732f435059436f6e7761792d507942616467652e676966\"></p>\n<p><a href=\"https://pypi.org/project/py-conway/\" rel=\"nofollow\">View Project on PyPi</a></p>\n<h2>Installation</h2>\n<pre>pip install py-conway\n</pre>\n<h2>Usage</h2>\n<p>To create a game, you'll need to provide dimensions and a starting two-dimensonal list to function as the game board. For example:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">py_conway</span> <span class=\"kn\">import</span> <span class=\"n\">Game</span>\n\n<span class=\"n\">seed</span> <span class=\"o\">=</span> <span class=\"p\">[[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n        <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span>\n        <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]]</span>\n\n<span class=\"n\">new_game</span> <span class=\"o\">=</span> <span class=\"n\">Game</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">seed</span><span class=\"p\">)</span>\n</pre>\n<p>If no seed is provided, the game can either generate a seed of zeroes, or a random starter seed. use the <code>random=True</code> positional argument to generate a random seed.</p>\n<pre><span class=\"n\">new_game</span> <span class=\"o\">=</span> <span class=\"n\">Game</span><span class=\"p\">(</span><span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"n\">random</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<p>Once the game board is populated, call the <code>start()</code> method. The game values and state will be initialized so you can interact with the board one step at a time. You can also use this method to re-initialize the game:</p>\n<pre><span class=\"n\">new_game</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n</pre>\n<p>You can also instruct the game to self-run with the <code>ThreadedGame</code> class and <code>start_thread()</code> method. The game will start on a background thread and update the full game board as well as a number of informational instance variables:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">py_conway</span> <span class=\"kn\">import</span> <span class=\"n\">ThreadedGame</span>\n\n<span class=\"n\">threaded_game</span> <span class=\"o\">=</span> <span class=\"n\">ThreadedGame</span><span class=\"p\">(</span><span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"n\">random</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n<span class=\"n\">threaded_game</span><span class=\"o\">.</span><span class=\"n\">start_thread</span><span class=\"p\">()</span>\n\n<span class=\"n\">threaded_game</span><span class=\"o\">.</span><span class=\"n\">current_board</span> <span class=\"c1\"># hold the complete game state after each step</span>\n<span class=\"n\">threaded_game</span><span class=\"o\">.</span><span class=\"n\">live_cells</span> <span class=\"c1\"># the count of live cells on the board</span>\n<span class=\"n\">threaded_game</span><span class=\"o\">.</span><span class=\"n\">generations</span> <span class=\"c1\"># the number of steps elapsed in the current game.</span>\n\n<span class=\"n\">threaded_game</span><span class=\"o\">.</span><span class=\"n\">stop_thread</span><span class=\"p\">()</span>\n</pre>\n<p>It's also possible to call the <code>run_generation()</code> method and control the game state yourself from one iteration to the next. Make sure you call the <code>start()</code> method first:</p>\n<pre><span class=\"n\">new_game</span><span class=\"o\">.</span><span class=\"n\">run_generation</span><span class=\"p\">()</span>\n</pre>\n<p>According to the rules of Conway's Game of Life, the board is meant to be infinite. If you wish to\nemulate this behavior in your own games, you can wrap the board around on itself with the initialization flag <code>enforce_boundary</code>, which is true by default.</p>\n<pre><span class=\"n\">seed</span> <span class=\"o\">=</span> <span class=\"p\">[[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n        <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n        <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n        <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]]</span>\n\n<span class=\"n\">new_game</span> <span class=\"o\">=</span> <span class=\"n\">Game</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"n\">seed</span><span class=\"p\">,</span> <span class=\"n\">enforce_boundary</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n</pre>\n<p>If the above code is run for a single generation, the board will look like this</p>\n<pre><code>[[0, 0, 0, 0],\n [1, 1, 0, 1],\n [0, 0, 0, 0],\n [0, 0, 0, 0]]\n</code></pre>\n<p>Here's an example that runs the game and plots the game board after intialization and the first generation. You can run this from the <a href=\"/example\" rel=\"nofollow\">example folder</a>, either in a Jupyter notebook or standalone script:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">matplotlib.pyplot</span> <span class=\"k\">as</span> <span class=\"nn\">plt</span>\n<span class=\"kn\">from</span> <span class=\"nn\">matplotlib.animation</span> <span class=\"kn\">import</span> <span class=\"n\">FuncAnimation</span>\n<span class=\"kn\">from</span> <span class=\"nn\">py</span><span class=\"o\">-</span><span class=\"n\">conway</span> <span class=\"kn\">import</span> <span class=\"nn\">Game</span>\n\n<span class=\"n\">my_game</span> <span class=\"o\">=</span> <span class=\"n\">Game</span><span class=\"p\">(</span><span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"n\">random</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">enforce_boundary</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"n\">my_game</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n\n<span class=\"n\">board</span><span class=\"p\">,</span> <span class=\"n\">ax</span> <span class=\"o\">=</span> <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">subplots</span><span class=\"p\">()</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">title</span><span class=\"p\">(</span><span class=\"s2\">\"Conway's Game of Life\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">ylim</span><span class=\"p\">,</span> <span class=\"n\">xlim</span> <span class=\"o\">=</span> <span class=\"n\">my_game</span><span class=\"o\">.</span><span class=\"n\">board_size</span>\n\n<span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">set_xlim</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">xlim</span><span class=\"p\">)</span>\n<span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">set_ylim</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">ylim</span><span class=\"p\">)</span>\n\n<span class=\"n\">image</span> <span class=\"o\">=</span> <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">imshow</span><span class=\"p\">(</span><span class=\"n\">my_game</span><span class=\"o\">.</span><span class=\"n\">current_board</span><span class=\"p\">,</span> <span class=\"n\">animated</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">cmap</span><span class=\"o\">=</span><span class=\"s1\">'binary'</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">update</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"n\">my_game</span><span class=\"o\">.</span><span class=\"n\">run_generation</span><span class=\"p\">()</span>\n    <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">xlabel</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"Generation: </span><span class=\"si\">{</span><span class=\"n\">my_game</span><span class=\"o\">.</span><span class=\"n\">generations</span><span class=\"si\">}</span><span class=\"s2\"> |</span><span class=\"se\">\\</span>\n<span class=\"s2\">                Population: </span><span class=\"si\">{</span><span class=\"n\">my_game</span><span class=\"o\">.</span><span class=\"n\">live_cells</span><span class=\"si\">}</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n    <span class=\"n\">image</span><span class=\"o\">.</span><span class=\"n\">set_array</span><span class=\"p\">(</span><span class=\"n\">my_game</span><span class=\"o\">.</span><span class=\"n\">current_board</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">image</span><span class=\"p\">,</span>\n\n\n<span class=\"n\">conway_animation</span> <span class=\"o\">=</span> <span class=\"n\">FuncAnimation</span><span class=\"p\">(</span><span class=\"n\">board</span><span class=\"p\">,</span> <span class=\"n\">update</span><span class=\"p\">,</span> <span class=\"n\">interval</span><span class=\"o\">=</span><span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"n\">blit</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n</pre>\n\n          </div>"}, "last_serial": 6788060, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "ffb590e511a232679dc03ec801abeb43", "sha256": "ebd67a734013e5645977a092a962565ea4f653b4fe2b8103b647077b0ed49e64"}, "downloads": -1, "filename": "py_conway-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "ffb590e511a232679dc03ec801abeb43", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 8113, "upload_time": "2020-02-20T19:18:07", "upload_time_iso_8601": "2020-02-20T19:18:07.663567Z", "url": "https://files.pythonhosted.org/packages/2d/ce/4c70bd390f062dd11e4d1f5ebdec2e0209e23391aae271b4b8136e1896f5/py_conway-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bf9fa0c2611e357ab45b960d54c085e1", "sha256": "d7aa141023e0bc93921eb36eee5df2a7209e74b6f310fcb225d97bf4f04c6910"}, "downloads": -1, "filename": "py-conway-0.0.1.tar.gz", "has_sig": false, "md5_digest": "bf9fa0c2611e357ab45b960d54c085e1", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 3597, "upload_time": "2020-02-20T19:18:09", "upload_time_iso_8601": "2020-02-20T19:18:09.594156Z", "url": "https://files.pythonhosted.org/packages/4f/e8/13c81d28ec9c114869404a71691463883cbf9ff2cd2b59ef2e19b76327bf/py-conway-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "34c686dc61bf8a00b707b2b0adccef5f", "sha256": "39308c78f4e1228605367aa917c7af0080d9fefa0f9f5321c063bd8a6b4fedca"}, "downloads": -1, "filename": "py_conway-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "34c686dc61bf8a00b707b2b0adccef5f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 8198, "upload_time": "2020-02-20T20:11:42", "upload_time_iso_8601": "2020-02-20T20:11:42.178273Z", "url": "https://files.pythonhosted.org/packages/d9/4f/6090d1c60d63b0d454725242f368641bac6a8d6da848aceb9795f69897c5/py_conway-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5632698f5aea4dcd9ed242578ff7ce2a", "sha256": "40dc480fe37c67cea847e433a3d88f65569953584c80adaa7f200b6ad7bc7e34"}, "downloads": -1, "filename": "py-conway-0.0.2.tar.gz", "has_sig": false, "md5_digest": "5632698f5aea4dcd9ed242578ff7ce2a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 3704, "upload_time": "2020-02-20T20:11:44", "upload_time_iso_8601": "2020-02-20T20:11:44.065036Z", "url": "https://files.pythonhosted.org/packages/d6/6b/f1017d1dd49f65694dbce1b1308c79d3e0fab26abbe8eee22b7ee41097d0/py-conway-0.0.2.tar.gz", "yanked": false}], "0.0.21": [{"comment_text": "", "digests": {"md5": "b8ed2901434e107ad75ee82d23edc515", "sha256": "fe41b1f1b9f312e735b20b9d68e56569b5c340c63e218d8f226548482a5b7de2"}, "downloads": -1, "filename": "py_conway-0.0.21-py3-none-any.whl", "has_sig": false, "md5_digest": "b8ed2901434e107ad75ee82d23edc515", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 8285, "upload_time": "2020-02-25T15:58:15", "upload_time_iso_8601": "2020-02-25T15:58:15.387604Z", "url": "https://files.pythonhosted.org/packages/f9/de/9bd906a1de6f0a2b8f1e82fcca200a259682f105b4dbb15ae15515c09a70/py_conway-0.0.21-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ebaaa18ef424d090014bfaeb78367e7e", "sha256": "e80732cc9095e9ed525a161ddaf95e91aae76b69ac537705f37489003ce5da3f"}, "downloads": -1, "filename": "py-conway-0.0.21.tar.gz", "has_sig": false, "md5_digest": "ebaaa18ef424d090014bfaeb78367e7e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 3769, "upload_time": "2020-02-25T15:58:16", "upload_time_iso_8601": "2020-02-25T15:58:16.777931Z", "url": "https://files.pythonhosted.org/packages/af/36/dd58eb854c9dc3622db7fbcfe2ea3bb1088a978ff64ccf0aa552f026fea6/py-conway-0.0.21.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "f58dec216f1f21c2620231a1fa5981d5", "sha256": "7797aa14cdfa0cc4db46d03cd5b9c1a67fdf3c67638b2a7343273abd3e32d80d"}, "downloads": -1, "filename": "py_conway-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "f58dec216f1f21c2620231a1fa5981d5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 8274, "upload_time": "2020-02-25T17:09:26", "upload_time_iso_8601": "2020-02-25T17:09:26.765800Z", "url": "https://files.pythonhosted.org/packages/fa/4e/3a5b66bd0445918776ac27660458062fa0752b9ddd33e04f5768e191f9e9/py_conway-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "260b4541ad946583471f415109916ede", "sha256": "2abab2dcaf48ba19695c6b751efabd325106fd2c1b01bfd76bad890fe33b45b9"}, "downloads": -1, "filename": "py-conway-0.1.0.tar.gz", "has_sig": false, "md5_digest": "260b4541ad946583471f415109916ede", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 3776, "upload_time": "2020-02-25T17:09:27", "upload_time_iso_8601": "2020-02-25T17:09:27.792453Z", "url": "https://files.pythonhosted.org/packages/e6/fe/100c837110e89ec98d4bb13ce8a915556369772ad9b7b4617fdb48e7cd42/py-conway-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "16753093c53d1b201d271482e9d04662", "sha256": "826ac2518d8016e2b53b3316cba80600782c9fb80f464ca92272695a43e0333f"}, "downloads": -1, "filename": "py_conway-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "16753093c53d1b201d271482e9d04662", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 8359, "upload_time": "2020-02-25T20:26:12", "upload_time_iso_8601": "2020-02-25T20:26:12.138499Z", "url": "https://files.pythonhosted.org/packages/40/c7/5ea31e13fc819bb6271c9df57ff5729fb55e23ec81633ccc5836b0a88d77/py_conway-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "604134f459a6466e781d9539f02a70c7", "sha256": "15f072ceaf873b00e9c17e08803f2cb5a615cdecb57b61fb12f3f62a6370f9ff"}, "downloads": -1, "filename": "py-conway-0.1.1.tar.gz", "has_sig": false, "md5_digest": "604134f459a6466e781d9539f02a70c7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 3885, "upload_time": "2020-02-25T20:26:13", "upload_time_iso_8601": "2020-02-25T20:26:13.534782Z", "url": "https://files.pythonhosted.org/packages/e9/f6/2a07f74034380fc0fd6db4f61f4212de0d5947ef163a4fe3fb1567b60e2d/py-conway-0.1.1.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "ac4277cabd0db01158183206170a9eb4", "sha256": "ae4a6080efe4284eda592e3083b2e660a3aa17ae65e707826dc5a50944519175"}, "downloads": -1, "filename": "py_conway-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "ac4277cabd0db01158183206170a9eb4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 8764, "upload_time": "2020-02-26T14:01:01", "upload_time_iso_8601": "2020-02-26T14:01:01.933410Z", "url": "https://files.pythonhosted.org/packages/65/c4/f62f914ab90ddc173b68ba9b69eb1feb3a4f1443aa2511246c0a1cbe1ffc/py_conway-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8f7e97b5e38993bb420b474de664a48a", "sha256": "a6c34fa25c4bd4a91cdf1df7ed2d68cc091d8b50c7b03547afd645f54ddc0946"}, "downloads": -1, "filename": "py-conway-0.2.0.tar.gz", "has_sig": false, "md5_digest": "8f7e97b5e38993bb420b474de664a48a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 4289, "upload_time": "2020-02-26T14:01:03", "upload_time_iso_8601": "2020-02-26T14:01:03.408344Z", "url": "https://files.pythonhosted.org/packages/b5/a8/16615089a3c21c9908a951918767032358b3b2d99642dbde52ac1abfe2a4/py-conway-0.2.0.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "d79046ae122b92e5ca43af8ee6ec1cec", "sha256": "cf155cb9cce3ec4b0b2cd8ba399b4e58dd1e3d94068b19bff9e0cd6fe99cd9a9"}, "downloads": -1, "filename": "py_conway-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "d79046ae122b92e5ca43af8ee6ec1cec", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 9561, "upload_time": "2020-02-28T23:00:10", "upload_time_iso_8601": "2020-02-28T23:00:10.208947Z", "url": "https://files.pythonhosted.org/packages/e2/f8/51b7af176cadc667ce36ad9a1b5edae844cf70e77166149a591b858e5f6e/py_conway-0.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3f507a728345c1874fbcbe2efb68edf4", "sha256": "dacd47d3f54b9713d397a734b025bdd6c849fbfc5b3bcd9f98361d2769b284e7"}, "downloads": -1, "filename": "py-conway-0.3.0.tar.gz", "has_sig": false, "md5_digest": "3f507a728345c1874fbcbe2efb68edf4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 5118, "upload_time": "2020-02-28T23:00:11", "upload_time_iso_8601": "2020-02-28T23:00:11.757778Z", "url": "https://files.pythonhosted.org/packages/d4/b0/dafb56023ebf78092c6df2056e7d5a39a36b98e5a408f84750c76df0b6dd/py-conway-0.3.0.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "810fa2967b5f6893a05549a09e51c0e3", "sha256": "71eb1a3565fc2d47c5424fe8bcd852f14ff3ac4d61f0238c48e6e0158052b762"}, "downloads": -1, "filename": "py_conway-0.4.0-py3-none-any.whl", "has_sig": false, "md5_digest": "810fa2967b5f6893a05549a09e51c0e3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 9857, "upload_time": "2020-03-03T22:33:43", "upload_time_iso_8601": "2020-03-03T22:33:43.888222Z", "url": "https://files.pythonhosted.org/packages/14/78/c134f3a9405d094a4b62ca0fdcbf5e4c3a65c53de8ad005b9eda98cb420e/py_conway-0.4.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fdb0ae8cc38b0766099a980f4ce38529", "sha256": "168f4f3c79507e508eacccc853f11627aeb965c2469519df65de0daeb4ebefb3"}, "downloads": -1, "filename": "py-conway-0.4.0.tar.gz", "has_sig": false, "md5_digest": "fdb0ae8cc38b0766099a980f4ce38529", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 5428, "upload_time": "2020-03-03T22:33:45", "upload_time_iso_8601": "2020-03-03T22:33:45.056454Z", "url": "https://files.pythonhosted.org/packages/83/57/a6d3e96a6e60c87dbe03295dc00bb65ef25ee46c0cfc6b789a38571129bf/py-conway-0.4.0.tar.gz", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "9bc8f73afe102d636306e7686b945f2b", "sha256": "e36e3d3fb742346ffbaa89718e729d6e2aca080c25b9cead982c2d069c1ab31e"}, "downloads": -1, "filename": "py_conway-0.5.0-py3-none-any.whl", "has_sig": false, "md5_digest": "9bc8f73afe102d636306e7686b945f2b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 11057, "upload_time": "2020-03-04T20:32:19", "upload_time_iso_8601": "2020-03-04T20:32:19.075663Z", "url": "https://files.pythonhosted.org/packages/51/1b/23c3743ecd5767032419becdc605b08ab8cccfb040d33b76d2bab31cb513/py_conway-0.5.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "deb53267c8fe64572fc9400b0233cb7b", "sha256": "24b734b79eb50ca59d1c0ff2890ca815792aaab22a43690000a5b78a54cbd403"}, "downloads": -1, "filename": "py-conway-0.5.0.tar.gz", "has_sig": false, "md5_digest": "deb53267c8fe64572fc9400b0233cb7b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 5736, "upload_time": "2020-03-04T20:32:20", "upload_time_iso_8601": "2020-03-04T20:32:20.551460Z", "url": "https://files.pythonhosted.org/packages/78/6f/9f0ed1675881df9b55c906f51b2f7674af296b69061cae30c4965c5f21b5/py-conway-0.5.0.tar.gz", "yanked": false}], "0.5.1": [{"comment_text": "", "digests": {"md5": "f492e18f1506df71a0ab8255a2dbb7ed", "sha256": "926708630e48fdbd2d248d0c0a6adfe4f724392ee5e91c748d13df0f31f81815"}, "downloads": -1, "filename": "py_conway-0.5.1-py3-none-any.whl", "has_sig": false, "md5_digest": "f492e18f1506df71a0ab8255a2dbb7ed", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 11038, "upload_time": "2020-03-04T20:52:12", "upload_time_iso_8601": "2020-03-04T20:52:12.013798Z", "url": "https://files.pythonhosted.org/packages/c6/e5/5dde6519ee7c85683184ce6c6ff5f833cf1d61933a1ad0905f51979aa7cb/py_conway-0.5.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3ed61c47dcbdc6cf21a1c3c67786c33c", "sha256": "fadae382e1a922e7699db69c7e25a99cd552a4b0b3b6f1b7e53471c956ebbaff"}, "downloads": -1, "filename": "py-conway-0.5.1.tar.gz", "has_sig": false, "md5_digest": "3ed61c47dcbdc6cf21a1c3c67786c33c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 5728, "upload_time": "2020-03-04T20:52:13", "upload_time_iso_8601": "2020-03-04T20:52:13.308796Z", "url": "https://files.pythonhosted.org/packages/ba/c3/ae1c1ee7f3057b1280440bf91adf97b63262ef2e4456c354c2b3dfec4eab/py-conway-0.5.1.tar.gz", "yanked": false}], "0.5.2": [{"comment_text": "", "digests": {"md5": "4c859e993e2a94093f6b0c49cbe6be77", "sha256": "cc364b763b0e4497574299568750d1bb7610aaebc010748e0c1b9ec481b9694c"}, "downloads": -1, "filename": "py_conway-0.5.2-py3-none-any.whl", "has_sig": false, "md5_digest": "4c859e993e2a94093f6b0c49cbe6be77", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 11022, "upload_time": "2020-03-05T21:00:04", "upload_time_iso_8601": "2020-03-05T21:00:04.437274Z", "url": "https://files.pythonhosted.org/packages/22/b5/d1a7afe2a695f53918f238fa47db48ad5a9eef173385dfa7fd5d8e58e12d/py_conway-0.5.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e8815c91d0756fe6070f1013e4f7f207", "sha256": "e358cb3b9832198dc6fc0fb69c26b270ed251d4b4007f2eee078207591ebd14d"}, "downloads": -1, "filename": "py-conway-0.5.2.tar.gz", "has_sig": false, "md5_digest": "e8815c91d0756fe6070f1013e4f7f207", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 5755, "upload_time": "2020-03-05T21:00:05", "upload_time_iso_8601": "2020-03-05T21:00:05.597669Z", "url": "https://files.pythonhosted.org/packages/db/b4/f7f500a734cf3fa524f8475035b834a8a49d05db4632c42723f3bbb54f19/py-conway-0.5.2.tar.gz", "yanked": false}], "0.6.0": [{"comment_text": "", "digests": {"md5": "b1f4b56ed3e68751929e254a25b48c05", "sha256": "8088ab753eafa2378b1d6cac0deae2854dcad0ce12f5298bca47ff9ec55db9fc"}, "downloads": -1, "filename": "py_conway-0.6.0-py3-none-any.whl", "has_sig": false, "md5_digest": "b1f4b56ed3e68751929e254a25b48c05", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 11075, "upload_time": "2020-03-10T21:19:15", "upload_time_iso_8601": "2020-03-10T21:19:15.304063Z", "url": "https://files.pythonhosted.org/packages/13/46/bc6e85a6cb66e4dd78b60010ed0c4cfea9f330872b4527dda5ccdb76abe6/py_conway-0.6.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e2f8082ac3c2a4a243c2c5188a8a655f", "sha256": "30ce50bf2a9aafc537fbf7fa344581c7169ab6c298354a8397768dd6a559496a"}, "downloads": -1, "filename": "py-conway-0.6.0.tar.gz", "has_sig": false, "md5_digest": "e2f8082ac3c2a4a243c2c5188a8a655f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 5811, "upload_time": "2020-03-10T21:19:16", "upload_time_iso_8601": "2020-03-10T21:19:16.340540Z", "url": "https://files.pythonhosted.org/packages/ad/4f/269bc40851d4c8f50c569c6d8ccd188c8e00ceb7eb14ee570bc899c0f1fb/py-conway-0.6.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b1f4b56ed3e68751929e254a25b48c05", "sha256": "8088ab753eafa2378b1d6cac0deae2854dcad0ce12f5298bca47ff9ec55db9fc"}, "downloads": -1, "filename": "py_conway-0.6.0-py3-none-any.whl", "has_sig": false, "md5_digest": "b1f4b56ed3e68751929e254a25b48c05", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 11075, "upload_time": "2020-03-10T21:19:15", "upload_time_iso_8601": "2020-03-10T21:19:15.304063Z", "url": "https://files.pythonhosted.org/packages/13/46/bc6e85a6cb66e4dd78b60010ed0c4cfea9f330872b4527dda5ccdb76abe6/py_conway-0.6.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e2f8082ac3c2a4a243c2c5188a8a655f", "sha256": "30ce50bf2a9aafc537fbf7fa344581c7169ab6c298354a8397768dd6a559496a"}, "downloads": -1, "filename": "py-conway-0.6.0.tar.gz", "has_sig": false, "md5_digest": "e2f8082ac3c2a4a243c2c5188a8a655f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 5811, "upload_time": "2020-03-10T21:19:16", "upload_time_iso_8601": "2020-03-10T21:19:16.340540Z", "url": "https://files.pythonhosted.org/packages/ad/4f/269bc40851d4c8f50c569c6d8ccd188c8e00ceb7eb14ee570bc899c0f1fb/py-conway-0.6.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:08:04 2020"}