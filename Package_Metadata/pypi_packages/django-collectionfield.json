{"info": {"author": "Pawel Scierski", "author_email": "escer@protonmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: Web Environment", "Framework :: Django :: 1.10", "Framework :: Django :: 1.8", "Framework :: Django :: 1.9", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Topic :: Internet :: WWW/HTTP"], "description": "django-collectionfield\n======================\n\n.. image:: https://api.travis-ci.org/escer/django-collectionfield.svg?branch=master\n   :target: https://travis-ci.org/escer/django-collectionfield\n.. image:: https://img.shields.io/pypi/v/django-collectionfield.svg\n   :target: https://pypi.python.org/pypi/django-collectionfield\n.. image:: https://coveralls.io/repos/github/escer/django-collectionfield/badge.svg?branch=master\n   :target: https://coveralls.io/github/escer/django-collectionfield?branch=master\n\nA reusable Django model field to store collections.\n\nFeatures\n--------\n\n- highly configurable **model field** (changing collection and item types, sorting, choices, item uniqueness and more)\n- **custom lookups** to simplify queries over collection items\n- **form fields** for working with collections\n- collection **item validators**\n- extended ``get_FIELD_display`` method for model fields with choices\n- works with database backends without native support for multi-value columns (like ArrayField for PostgreSQL)\n\nInstallation\n------------\n\n.. code-block:: python\n\n   pip install django-collectionfield\n\n\nUsage\n-----\n\nModel field\n~~~~~~~~~~~\n\nDefine model with field that stores lists of strings:\n\n.. code-block:: python\n\n   # models.py\n   from django.db import models\n   from collectionfield.models import CollectionField\n\n   class MyModel(models.Model):\n       tags = CollectionField()\n\nPass values to model field:\n\n.. code-block:: python\n\n   my_model = MyModel.objects.create(tags=['test', 'values'])\n   my_model.values\n   ['test', 'values']\n\nMaking queries\n~~~~~~~~~~~~~~\n\nRetrieve model instances with particular value present in the collection:\n\n.. code-block:: python\n\n   MyModel.objects.filter(tags__has='test')\n\nRetrieve model instances with *ALL* values present in the collection (ignoring items' order):\n\n.. code-block:: python\n\n   MyModel.objects.filter(tags__hasall=['test', 'values'])\n\nRetrieve model instances with *ANY* of values present in the collection:\n\n.. code-block:: python\n\n   MyModel.objects.filter(tags__hasany=['test', 'values'])\n\n\nCustomizing collections\n~~~~~~~~~~~~~~~~~~~~~~~\n\nCustom collection and item type:\n\n.. code-block:: python\n\n   class IntegerSet(models.Model):\n       # This field will provide sets of integers \n       # instead of default lists of strings:\n       values = CollectionField(collection_type=set, item_type=int)\n\nSorting and uniqueness:\n\n.. code-block:: python\n\n   class SortedUniqueTextList(models.Model):\n       # Before saving, items will be sorted and duplicates dropped:\n       texts = CollectionField(sort=True, unique_items=True)\n\nChoices and collection size limit:\n\n.. code-block:: python\n\n   class TaggedModel(models.Model):\n       tags = CollectionField(\n           # Both choices and max_items limit are checked during model validation.\n           choices=(\n               ('action', \"Action\"),\n               ('comedy', \"Comedy\"),\n               ('horror', \"Horror\"),\n               # ...\n           ),\n           max_items=2\n       )\n\n``get_FIELD_display`` method can handle multiple choices and provide options to customize the display:\n\n.. code-block:: python\n\n   tagged_model = TaggedModel.objects.create(tags=['action', 'horror'])\n   tagged_model.get_tags_display()\n   \"Action, Horror\"\n\n   def li_mapper(value, label):\n       return \"<li>{0}</li>\".format(label)\n\n   def ul_wrapper(field_display):\n       return \"<ul>{0}</ul>\".format(field_display)\n\n   tagged_model.get_tags_display(delimiter='', mapper=li_mapper, wrapper=ul_wrapper)\n   '<ul><li>Action</li><li>Horror</li></ul>'\n\nDjango built-in validators work with entire field values. ``django-collectionfield`` provide validation of single collection items:\n\n.. code-block:: python\n\n   from collectionfield.validators import (\n       ItemMinValueValidator, ItemMaxValueValidator\n   )\n\n   class IntegerList(models.Model):\n       values = CollectionField(\n           item_type=int,\n           # item validators check each item separately:\n           validators=[ItemMinValueValidator(1), ItemMaxValueValidator(5)]\n       )\n\nForm fields\n~~~~~~~~~~~\n\n``django-collectionfield`` comes with 2 form fields:\n\n.. code-block:: python\n\n   from collectionfield.forms import CollectionField, CollectionChoiceField\n\n   # ``collectionfield.forms.CollectionField`` converts comma-separated text\n   # into collection of values:\n\n   class MyForm(forms.Form):\n       values = CollectionField()\n\n   my_form = MyForm({'values': \"A, B, C\"})\n   my_form.is_valid()\n   True\n   my_form.cleaned_data['values']\n   ['A', 'B', 'C']\n\n   # ``collectionfield.forms.CollectionChoiceField`` behaves more like \n   # regular MultipleChoiceField:\n\n   class MyChoiceForm(forms.Form):\n      values = CollectionChoiceField(\n          choices=(\n              ('action', \"Action\"),\n              ('comedy', \"Comedy\"),\n              ('horror', \"Horror\"),\n              # ...\n          )\n      )\n\n   my_choice_form = MyChoiceForm({'values': ['action', 'comedy']})\n   my_choice_form.is_valid()\n   True\n   my_choice_form.cleaned_data['values']\n   ['action', 'comedy']\n\nBoth form fields support the same set of parameters as the model field:\n\n.. code-block:: python\n\n   from collectionfield.forms import CollectionField\n\n   class MyForm(forms.Form):\n       values = CollectionField(collection_type=set, item_type=int)\n\n   my_form = MyForm({'values': \"1, 2, 1, 3\"})\n   my_form.is_valid()\n   True\n   my_form.cleaned_data['values']\n   {1, 2, 3}\n\nRepresentation in database\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nCollectionField converts its values into string of up to 1024 characters using the following format:\n\n.. code-block:: python\n\n   \"|item1|item2|item3|\"\n\nDefault delimiter ('|') and maximum length can be configured:\n\n.. code-block:: python\n\n   class MyModel(models.Model):\n       values = CollectionField(delimiter=\"$\", max_length=2000)\n\nRequirements\n------------\n\nPython: 2.7, 3.4, 3.5\n\nDjango: 1.8, 1.9, 1.10\n\n.. TODO: Changes\n\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/escer/django-collectionfield", "keywords": "django models fields collections", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "django-collectionfield", "package_url": "https://pypi.org/project/django-collectionfield/", "platform": "", "project_url": "https://pypi.org/project/django-collectionfield/", "project_urls": {"Homepage": "https://github.com/escer/django-collectionfield"}, "release_url": "https://pypi.org/project/django-collectionfield/0.0.4/", "requires_dist": null, "requires_python": "", "summary": "Custom Django model field to store multiple values.", "version": "0.0.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://travis-ci.org/escer/django-collectionfield\" rel=\"nofollow\"><img alt=\"https://api.travis-ci.org/escer/django-collectionfield.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b21c2d30064b0c1e3175a6ee394e77524c6eb835/68747470733a2f2f6170692e7472617669732d63692e6f72672f65736365722f646a616e676f2d636f6c6c656374696f6e6669656c642e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://pypi.python.org/pypi/django-collectionfield\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/v/django-collectionfield.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5d17fdd9d6bbb44d46c8a9c8de6eaebf35804456/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f646a616e676f2d636f6c6c656374696f6e6669656c642e737667\"></a>\n<a href=\"https://coveralls.io/github/escer/django-collectionfield?branch=master\" rel=\"nofollow\"><img alt=\"https://coveralls.io/repos/github/escer/django-collectionfield/badge.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/02b69afb04d687815df2e45b649488256e21d1b9/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f65736365722f646a616e676f2d636f6c6c656374696f6e6669656c642f62616467652e7376673f6272616e63683d6d6173746572\"></a>\n<p>A reusable Django model field to store collections.</p>\n<div id=\"features\">\n<h2>Features</h2>\n<ul>\n<li>highly configurable <strong>model field</strong> (changing collection and item types, sorting, choices, item uniqueness and more)</li>\n<li><strong>custom lookups</strong> to simplify queries over collection items</li>\n<li><strong>form fields</strong> for working with collections</li>\n<li>collection <strong>item validators</strong></li>\n<li>extended <tt>get_FIELD_display</tt> method for model fields with choices</li>\n<li>works with database backends without native support for multi-value columns (like ArrayField for PostgreSQL)</li>\n</ul>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<pre><span class=\"n\">pip</span> <span class=\"n\">install</span> <span class=\"n\">django</span><span class=\"o\">-</span><span class=\"n\">collectionfield</span>\n</pre>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<div id=\"model-field\">\n<h3>Model field</h3>\n<p>Define model with field that stores lists of strings:</p>\n<pre><span class=\"c1\"># models.py</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.db</span> <span class=\"kn\">import</span> <span class=\"n\">models</span>\n<span class=\"kn\">from</span> <span class=\"nn\">collectionfield.models</span> <span class=\"kn\">import</span> <span class=\"n\">CollectionField</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MyModel</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">tags</span> <span class=\"o\">=</span> <span class=\"n\">CollectionField</span><span class=\"p\">()</span>\n</pre>\n<p>Pass values to model field:</p>\n<pre><span class=\"n\">my_model</span> <span class=\"o\">=</span> <span class=\"n\">MyModel</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">tags</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'test'</span><span class=\"p\">,</span> <span class=\"s1\">'values'</span><span class=\"p\">])</span>\n<span class=\"n\">my_model</span><span class=\"o\">.</span><span class=\"n\">values</span>\n<span class=\"p\">[</span><span class=\"s1\">'test'</span><span class=\"p\">,</span> <span class=\"s1\">'values'</span><span class=\"p\">]</span>\n</pre>\n</div>\n<div id=\"making-queries\">\n<h3>Making queries</h3>\n<p>Retrieve model instances with particular value present in the collection:</p>\n<pre><span class=\"n\">MyModel</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">tags__has</span><span class=\"o\">=</span><span class=\"s1\">'test'</span><span class=\"p\">)</span>\n</pre>\n<p>Retrieve model instances with <em>ALL</em> values present in the collection (ignoring items\u2019 order):</p>\n<pre><span class=\"n\">MyModel</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">tags__hasall</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'test'</span><span class=\"p\">,</span> <span class=\"s1\">'values'</span><span class=\"p\">])</span>\n</pre>\n<p>Retrieve model instances with <em>ANY</em> of values present in the collection:</p>\n<pre><span class=\"n\">MyModel</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">tags__hasany</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'test'</span><span class=\"p\">,</span> <span class=\"s1\">'values'</span><span class=\"p\">])</span>\n</pre>\n</div>\n<div id=\"customizing-collections\">\n<h3>Customizing collections</h3>\n<p>Custom collection and item type:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">IntegerSet</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"c1\"># This field will provide sets of integers</span>\n    <span class=\"c1\"># instead of default lists of strings:</span>\n    <span class=\"n\">values</span> <span class=\"o\">=</span> <span class=\"n\">CollectionField</span><span class=\"p\">(</span><span class=\"n\">collection_type</span><span class=\"o\">=</span><span class=\"nb\">set</span><span class=\"p\">,</span> <span class=\"n\">item_type</span><span class=\"o\">=</span><span class=\"nb\">int</span><span class=\"p\">)</span>\n</pre>\n<p>Sorting and uniqueness:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">SortedUniqueTextList</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"c1\"># Before saving, items will be sorted and duplicates dropped:</span>\n    <span class=\"n\">texts</span> <span class=\"o\">=</span> <span class=\"n\">CollectionField</span><span class=\"p\">(</span><span class=\"n\">sort</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">unique_items</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<p>Choices and collection size limit:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">TaggedModel</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">tags</span> <span class=\"o\">=</span> <span class=\"n\">CollectionField</span><span class=\"p\">(</span>\n        <span class=\"c1\"># Both choices and max_items limit are checked during model validation.</span>\n        <span class=\"n\">choices</span><span class=\"o\">=</span><span class=\"p\">(</span>\n            <span class=\"p\">(</span><span class=\"s1\">'action'</span><span class=\"p\">,</span> <span class=\"s2\">\"Action\"</span><span class=\"p\">),</span>\n            <span class=\"p\">(</span><span class=\"s1\">'comedy'</span><span class=\"p\">,</span> <span class=\"s2\">\"Comedy\"</span><span class=\"p\">),</span>\n            <span class=\"p\">(</span><span class=\"s1\">'horror'</span><span class=\"p\">,</span> <span class=\"s2\">\"Horror\"</span><span class=\"p\">),</span>\n            <span class=\"c1\"># ...</span>\n        <span class=\"p\">),</span>\n        <span class=\"n\">max_items</span><span class=\"o\">=</span><span class=\"mi\">2</span>\n    <span class=\"p\">)</span>\n</pre>\n<p><tt>get_FIELD_display</tt> method can handle multiple choices and provide options to customize the display:</p>\n<pre><span class=\"n\">tagged_model</span> <span class=\"o\">=</span> <span class=\"n\">TaggedModel</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">tags</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'action'</span><span class=\"p\">,</span> <span class=\"s1\">'horror'</span><span class=\"p\">])</span>\n<span class=\"n\">tagged_model</span><span class=\"o\">.</span><span class=\"n\">get_tags_display</span><span class=\"p\">()</span>\n<span class=\"s2\">\"Action, Horror\"</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">li_mapper</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">label</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"s2\">\"&lt;li&gt;</span><span class=\"si\">{0}</span><span class=\"s2\">&lt;/li&gt;\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">label</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">ul_wrapper</span><span class=\"p\">(</span><span class=\"n\">field_display</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"s2\">\"&lt;ul&gt;</span><span class=\"si\">{0}</span><span class=\"s2\">&lt;/ul&gt;\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">field_display</span><span class=\"p\">)</span>\n\n<span class=\"n\">tagged_model</span><span class=\"o\">.</span><span class=\"n\">get_tags_display</span><span class=\"p\">(</span><span class=\"n\">delimiter</span><span class=\"o\">=</span><span class=\"s1\">''</span><span class=\"p\">,</span> <span class=\"n\">mapper</span><span class=\"o\">=</span><span class=\"n\">li_mapper</span><span class=\"p\">,</span> <span class=\"n\">wrapper</span><span class=\"o\">=</span><span class=\"n\">ul_wrapper</span><span class=\"p\">)</span>\n<span class=\"s1\">'&lt;ul&gt;&lt;li&gt;Action&lt;/li&gt;&lt;li&gt;Horror&lt;/li&gt;&lt;/ul&gt;'</span>\n</pre>\n<p>Django built-in validators work with entire field values. <tt><span class=\"pre\">django-collectionfield</span></tt> provide validation of single collection items:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">collectionfield.validators</span> <span class=\"kn\">import</span> <span class=\"p\">(</span>\n    <span class=\"n\">ItemMinValueValidator</span><span class=\"p\">,</span> <span class=\"n\">ItemMaxValueValidator</span>\n<span class=\"p\">)</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">IntegerList</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">values</span> <span class=\"o\">=</span> <span class=\"n\">CollectionField</span><span class=\"p\">(</span>\n        <span class=\"n\">item_type</span><span class=\"o\">=</span><span class=\"nb\">int</span><span class=\"p\">,</span>\n        <span class=\"c1\"># item validators check each item separately:</span>\n        <span class=\"n\">validators</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">ItemMinValueValidator</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"n\">ItemMaxValueValidator</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)]</span>\n    <span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"form-fields\">\n<h3>Form fields</h3>\n<p><tt><span class=\"pre\">django-collectionfield</span></tt> comes with 2 form fields:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">collectionfield.forms</span> <span class=\"kn\">import</span> <span class=\"n\">CollectionField</span><span class=\"p\">,</span> <span class=\"n\">CollectionChoiceField</span>\n\n<span class=\"c1\"># ``collectionfield.forms.CollectionField`` converts comma-separated text</span>\n<span class=\"c1\"># into collection of values:</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MyForm</span><span class=\"p\">(</span><span class=\"n\">forms</span><span class=\"o\">.</span><span class=\"n\">Form</span><span class=\"p\">):</span>\n    <span class=\"n\">values</span> <span class=\"o\">=</span> <span class=\"n\">CollectionField</span><span class=\"p\">()</span>\n\n<span class=\"n\">my_form</span> <span class=\"o\">=</span> <span class=\"n\">MyForm</span><span class=\"p\">({</span><span class=\"s1\">'values'</span><span class=\"p\">:</span> <span class=\"s2\">\"A, B, C\"</span><span class=\"p\">})</span>\n<span class=\"n\">my_form</span><span class=\"o\">.</span><span class=\"n\">is_valid</span><span class=\"p\">()</span>\n<span class=\"kc\">True</span>\n<span class=\"n\">my_form</span><span class=\"o\">.</span><span class=\"n\">cleaned_data</span><span class=\"p\">[</span><span class=\"s1\">'values'</span><span class=\"p\">]</span>\n<span class=\"p\">[</span><span class=\"s1\">'A'</span><span class=\"p\">,</span> <span class=\"s1\">'B'</span><span class=\"p\">,</span> <span class=\"s1\">'C'</span><span class=\"p\">]</span>\n\n<span class=\"c1\"># ``collectionfield.forms.CollectionChoiceField`` behaves more like</span>\n<span class=\"c1\"># regular MultipleChoiceField:</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MyChoiceForm</span><span class=\"p\">(</span><span class=\"n\">forms</span><span class=\"o\">.</span><span class=\"n\">Form</span><span class=\"p\">):</span>\n   <span class=\"n\">values</span> <span class=\"o\">=</span> <span class=\"n\">CollectionChoiceField</span><span class=\"p\">(</span>\n       <span class=\"n\">choices</span><span class=\"o\">=</span><span class=\"p\">(</span>\n           <span class=\"p\">(</span><span class=\"s1\">'action'</span><span class=\"p\">,</span> <span class=\"s2\">\"Action\"</span><span class=\"p\">),</span>\n           <span class=\"p\">(</span><span class=\"s1\">'comedy'</span><span class=\"p\">,</span> <span class=\"s2\">\"Comedy\"</span><span class=\"p\">),</span>\n           <span class=\"p\">(</span><span class=\"s1\">'horror'</span><span class=\"p\">,</span> <span class=\"s2\">\"Horror\"</span><span class=\"p\">),</span>\n           <span class=\"c1\"># ...</span>\n       <span class=\"p\">)</span>\n   <span class=\"p\">)</span>\n\n<span class=\"n\">my_choice_form</span> <span class=\"o\">=</span> <span class=\"n\">MyChoiceForm</span><span class=\"p\">({</span><span class=\"s1\">'values'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'action'</span><span class=\"p\">,</span> <span class=\"s1\">'comedy'</span><span class=\"p\">]})</span>\n<span class=\"n\">my_choice_form</span><span class=\"o\">.</span><span class=\"n\">is_valid</span><span class=\"p\">()</span>\n<span class=\"kc\">True</span>\n<span class=\"n\">my_choice_form</span><span class=\"o\">.</span><span class=\"n\">cleaned_data</span><span class=\"p\">[</span><span class=\"s1\">'values'</span><span class=\"p\">]</span>\n<span class=\"p\">[</span><span class=\"s1\">'action'</span><span class=\"p\">,</span> <span class=\"s1\">'comedy'</span><span class=\"p\">]</span>\n</pre>\n<p>Both form fields support the same set of parameters as the model field:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">collectionfield.forms</span> <span class=\"kn\">import</span> <span class=\"n\">CollectionField</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MyForm</span><span class=\"p\">(</span><span class=\"n\">forms</span><span class=\"o\">.</span><span class=\"n\">Form</span><span class=\"p\">):</span>\n    <span class=\"n\">values</span> <span class=\"o\">=</span> <span class=\"n\">CollectionField</span><span class=\"p\">(</span><span class=\"n\">collection_type</span><span class=\"o\">=</span><span class=\"nb\">set</span><span class=\"p\">,</span> <span class=\"n\">item_type</span><span class=\"o\">=</span><span class=\"nb\">int</span><span class=\"p\">)</span>\n\n<span class=\"n\">my_form</span> <span class=\"o\">=</span> <span class=\"n\">MyForm</span><span class=\"p\">({</span><span class=\"s1\">'values'</span><span class=\"p\">:</span> <span class=\"s2\">\"1, 2, 1, 3\"</span><span class=\"p\">})</span>\n<span class=\"n\">my_form</span><span class=\"o\">.</span><span class=\"n\">is_valid</span><span class=\"p\">()</span>\n<span class=\"kc\">True</span>\n<span class=\"n\">my_form</span><span class=\"o\">.</span><span class=\"n\">cleaned_data</span><span class=\"p\">[</span><span class=\"s1\">'values'</span><span class=\"p\">]</span>\n<span class=\"p\">{</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">}</span>\n</pre>\n</div>\n<div id=\"representation-in-database\">\n<h3>Representation in database</h3>\n<p>CollectionField converts its values into string of up to 1024 characters using the following format:</p>\n<pre><span class=\"s2\">\"|item1|item2|item3|\"</span>\n</pre>\n<p>Default delimiter (\u2018|\u2019) and maximum length can be configured:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">MyModel</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">values</span> <span class=\"o\">=</span> <span class=\"n\">CollectionField</span><span class=\"p\">(</span><span class=\"n\">delimiter</span><span class=\"o\">=</span><span class=\"s2\">\"$\"</span><span class=\"p\">,</span> <span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">2000</span><span class=\"p\">)</span>\n</pre>\n</div>\n</div>\n<div id=\"requirements\">\n<h2>Requirements</h2>\n<p>Python: 2.7, 3.4, 3.5</p>\n<p>Django: 1.8, 1.9, 1.10</p>\n</div>\n\n          </div>"}, "last_serial": 2391881, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "a41a3caeadc631f79247e1c3ae43197d", "sha256": "abda986359ac11ce11bb6da20cf11c46978f3e135c446c59b5dda1ee162748f2"}, "downloads": -1, "filename": "django_collectionfield-0.0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "a41a3caeadc631f79247e1c3ae43197d", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 18709, "upload_time": "2016-03-29T23:59:36", "upload_time_iso_8601": "2016-03-29T23:59:36.097312Z", "url": "https://files.pythonhosted.org/packages/c3/4a/29ac24a78bc77e03f6e03275ffd25e16598f42a5b40be3869214c04ff71a/django_collectionfield-0.0.1-py2.py3-none-any.whl", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "6f1544cadfcd7a9fc95081278903e937", "sha256": "95e93dda72f45e84c6a1b73f9367042b4c08cb286ff8ca9eed63b48bd350aa01"}, "downloads": -1, "filename": "django_collectionfield-0.0.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "6f1544cadfcd7a9fc95081278903e937", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 19546, "upload_time": "2016-04-10T00:09:46", "upload_time_iso_8601": "2016-04-10T00:09:46.794279Z", "url": "https://files.pythonhosted.org/packages/e4/da/eeb917a21d67218b9869c00640efce8966d8bc4ef1decdfdd6626c82aaee/django_collectionfield-0.0.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9b12eb6c7867ec919ebb2015bc61ec49", "sha256": "951641eb5de8aa1ebc48daa635a9f6cea90fe4f51c4419f4ade7390686383056"}, "downloads": -1, "filename": "django-collectionfield-0.0.2.tar.gz", "has_sig": false, "md5_digest": "9b12eb6c7867ec919ebb2015bc61ec49", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15259, "upload_time": "2016-04-10T00:09:51", "upload_time_iso_8601": "2016-04-10T00:09:51.588902Z", "url": "https://files.pythonhosted.org/packages/3a/22/72ca503efca1e69b32873cb01d6283e70f9c5d955cbc2a00f894750feeda/django-collectionfield-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "6fa7acd47630201be962d37e8446d03b", "sha256": "6e8afe8f7462fc3375cfe540d43ca84556c876af3f022436562cb4d5cfadeccc"}, "downloads": -1, "filename": "django_collectionfield-0.0.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "6fa7acd47630201be962d37e8446d03b", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 19831, "upload_time": "2016-05-18T23:45:52", "upload_time_iso_8601": "2016-05-18T23:45:52.721772Z", "url": "https://files.pythonhosted.org/packages/9a/00/da809db74c01620dff29fba8ea7f4494c29f7f1924a180a0e11f47487e6a/django_collectionfield-0.0.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "625821317982984e96530ba4e7219614", "sha256": "8eba85496c5cf086845a2bf91758657fd47eece5cb3c5f05f120a99fd71f197a"}, "downloads": -1, "filename": "django-collectionfield-0.0.3.tar.gz", "has_sig": false, "md5_digest": "625821317982984e96530ba4e7219614", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15540, "upload_time": "2016-05-18T23:45:58", "upload_time_iso_8601": "2016-05-18T23:45:58.045444Z", "url": "https://files.pythonhosted.org/packages/89/c1/8ce6542fbb41c6a09d2cff56ac233cb13a7db61e2806b4c6cb4a1a861ac5/django-collectionfield-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "d150695ea6c43206cc302d3fa43f4677", "sha256": "36de566775cb0b336251bec9d1396cf172916ba5a56e8ee471967201bd8ca56d"}, "downloads": -1, "filename": "django_collectionfield-0.0.4-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "d150695ea6c43206cc302d3fa43f4677", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 20040, "upload_time": "2016-10-10T21:59:43", "upload_time_iso_8601": "2016-10-10T21:59:43.279466Z", "url": "https://files.pythonhosted.org/packages/aa/ed/0e3d4ab0cf3b4997d380fbecc84fccbd07e46172b9b209a8afe4f3d7c18e/django_collectionfield-0.0.4-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d3b4f6bfd671363ec85de4548bd83a54", "sha256": "cd52aeee21736d36e52871e2efa4ca327469a6af29131865f2ef9840113646b1"}, "downloads": -1, "filename": "django-collectionfield-0.0.4.tar.gz", "has_sig": false, "md5_digest": "d3b4f6bfd671363ec85de4548bd83a54", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15712, "upload_time": "2016-10-10T21:59:45", "upload_time_iso_8601": "2016-10-10T21:59:45.421118Z", "url": "https://files.pythonhosted.org/packages/ae/65/8e3df52774bdac7ace13303301bedcd8480ca7080cb4f2f2f0116ee231ee/django-collectionfield-0.0.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d150695ea6c43206cc302d3fa43f4677", "sha256": "36de566775cb0b336251bec9d1396cf172916ba5a56e8ee471967201bd8ca56d"}, "downloads": -1, "filename": "django_collectionfield-0.0.4-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "d150695ea6c43206cc302d3fa43f4677", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 20040, "upload_time": "2016-10-10T21:59:43", "upload_time_iso_8601": "2016-10-10T21:59:43.279466Z", "url": "https://files.pythonhosted.org/packages/aa/ed/0e3d4ab0cf3b4997d380fbecc84fccbd07e46172b9b209a8afe4f3d7c18e/django_collectionfield-0.0.4-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d3b4f6bfd671363ec85de4548bd83a54", "sha256": "cd52aeee21736d36e52871e2efa4ca327469a6af29131865f2ef9840113646b1"}, "downloads": -1, "filename": "django-collectionfield-0.0.4.tar.gz", "has_sig": false, "md5_digest": "d3b4f6bfd671363ec85de4548bd83a54", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15712, "upload_time": "2016-10-10T21:59:45", "upload_time_iso_8601": "2016-10-10T21:59:45.421118Z", "url": "https://files.pythonhosted.org/packages/ae/65/8e3df52774bdac7ace13303301bedcd8480ca7080cb4f2f2f0116ee231ee/django-collectionfield-0.0.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:36:57 2020"}