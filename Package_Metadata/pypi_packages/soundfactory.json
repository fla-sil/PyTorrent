{"info": {"author": "TSAK", "author_email": "tsakians@gmail.com", "bugtrack_url": null, "classifiers": ["Environment :: Console", "Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Operating System :: Unix", "Programming Language :: Python :: 3", "Topic :: Artistic Software", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "# soundfactory\n[![Build Status](https://travis-ci.org/babaMar/soundfactory.svg?branch=development)](https://travis-ci.org/babaMar/soundfactory)\n[![codecov](https://codecov.io/gl/babaMar/soundfactory/branch/development/graph/badge.svg)](https://codecov.io/gl/babaMar/soundfactory)\n[![Documentation Status](https://readthedocs.org/projects/soundfactory/badge/?version=latest)](https://soundfactory.readthedocs.io/en/latest/?badge=latest)\n\n`soundfactory` is a simple tool to experiment and be creative with audio taking a data-oriented approach.\nIt is primarily directed to digital artists that want to generate audio samples\nfrom diverse data sources, and to audio-engineering students at their first steps\ninto the beautiful world of additive sound synthesis.\n\nThe peculiarity about `soundfactory` is the adoption of fourier-series approximation\nwhen `square`, `sawtooth`, or `triangle` wave shapes are chosen. In fact, being \napproximated the single-oscillator signals will contain upper harmonics with respect\nto the analytical signal (with the same amplitude, frequency, and wave shape), \nthat can be obtained by `scipy` (see tests). The result will be a warmer and \nunexpectedly coloured sound.\n\nIt comes from some scripts I have been writing a few years back and thought about\nhaving few reusable core modules and a command-line tool for researching new sounds.\nAnd I wanted to be able to develop it and have fun with it in my Jupyter Notebook of course!\n\nYou can find the documentation at https://soundfactory.readthedocs.io\n\n---\n**WARNING**\n\nBefore installing with `pip` check the [pre-requirements](https://soundfactory.readthedocs.io/en/latest/installation.html#prerequisites)\n\n---\n\n## Examples\n### Random Sample Generator\n```python\nfrom random import uniform, choice\nfrom soundfactory import SignalBuilder, SignalPlotter\nimport matplotlib.pyplot as plt\n\nn_components = 4\nMAX_FREQ = 1000.\n\nfname = ''\nfreqs, amps, shapes = list(), list(), list()\nfor _ in range(n_components):\n    freq = round(uniform(20., MAX_FREQ), 1)\n    freqs.append(freq)\n    amp = round(uniform(0.1, 1.), 1)\n    amps.append(amp)\n    shape = choice(['sine', 'square', 'sawtooth', 'triangle'])\n    shapes.append(shape)\n    fname += '_'.join([str(freq), str(amp), shape])\n\ns = SignalBuilder(\n    freqs, amps, shapes,\n    samplerate=96000,\n    duration=2.\n)\nfname += '.wav'\ns.export(fname)\n\n# Analyse with SignalPlotter\nsig = SignalPlotter(plt, fname, True)\nsig.show(wmsec=0.1)\n```\n\n### Reproducing a Sound Characteristic at an arbitrary Frequency\n```python\nfrom numpy import where, sqrt\nimport matplotlib.pyplot as plt\n\nfrom soundfactory import SignalBuilder, SignalPlotter\nfrom soundfactory import Signal\nfrom soundfactory.utils.scale import build_24_tet_scale\n\nSCALE_INIT = {'E0': 20.6}\n\nref_label = list(SCALE_INIT.keys())[-1]\nref_frequency = list(SCALE_INIT.values())[-1]\nscale_24 = build_24_tet_scale(ref_label, ref_frequency, max_octave=3)\n\nref_signal = Signal('/<path-to-packages>/soundfactory/samples/A3-Calib-220.wav')\n\nfreqs = ref_signal.SPECTRA['ch1_fft'][ref_signal.FREQUENCIES]\npws = ref_signal.SPECTRA['ch1_fft'][ref_signal.POWERS]\n\n# Select only few of the spectral components\nselect_idx = where(pws > 0.00001)[0]\n# Get the fundamental frequency to obtain the upper-harmonic orders\nfundamental_idx = where(pws == pws.max())[0]\nfreq_ratios = freqs / freqs[fundamental_idx]\n\ntone = 'E3\ud834\udd32'  # Choose an arbitrary tone NOT playble on the keyboard\ninput_freqs = scale_24[tone] * freq_ratios[select_idx]\ninput_amps = sqrt(2 * pws[select_idx])\n\nmy_signal = SignalBuilder(input_freqs,\n                          input_amps, [\n                          'sine' for _ in range(len(select_idx))]\n                         )\n\nfilename = './%s_sample.wav' % tone\nmy_signal.export(filename)\n\n# Analyse with SignalPlotter\nsig = SignalPlotter(plt, filename, True)\nsig.show(wmsec=0.1)\n\n```\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://gitlab.com/babaMar/soundfactory", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "soundfactory", "package_url": "https://pypi.org/project/soundfactory/", "platform": "", "project_url": "https://pypi.org/project/soundfactory/", "project_urls": {"Homepage": "https://gitlab.com/babaMar/soundfactory"}, "release_url": "https://pypi.org/project/soundfactory/0.1.0/", "requires_dist": ["cffi (==1.11.2)", "Click (==7.0)", "complexaudio (==1.0.4)", "cycler (==0.10.0)", "getch (==1.0)", "lxml (==4.2.5)", "matplotlib (==3.0.3)", "numpy (==1.15.4)", "PyAudio (==0.2.11)", "pycparser (==2.18)", "pyparsing (==2.2.0)", "PySoundFile (==0.9.0.post1)", "python-dateutil (==2.6.1)", "python-toolbox (==0.9.3)", "pytz (==2017.3)", "scipy (==1.1.0)", "six (==1.11.0)", "pytest ; extra == 'tests'", "pytest-mock ; extra == 'tests'", "pytest-cov ; extra == 'tests'"], "requires_python": ">=3.5", "summary": "simple tools for audio-signal manipulations", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>soundfactory</h1>\n<p><a href=\"https://travis-ci.org/babaMar/soundfactory\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/db7772c0e16572450b6126991e703d98520e00b7/68747470733a2f2f7472617669732d63692e6f72672f626162614d61722f736f756e64666163746f72792e7376673f6272616e63683d646576656c6f706d656e74\"></a>\n<a href=\"https://codecov.io/gl/babaMar/soundfactory\" rel=\"nofollow\"><img alt=\"codecov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0f2634a17c0a45bd8f2bfc40de9f63b4c1f0f1d5/68747470733a2f2f636f6465636f762e696f2f676c2f626162614d61722f736f756e64666163746f72792f6272616e63682f646576656c6f706d656e742f67726170682f62616467652e737667\"></a>\n<a href=\"https://soundfactory.readthedocs.io/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2c22aa72e5d34dfda01f2b536a0b1064356dc312/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f736f756e64666163746f72792f62616467652f3f76657273696f6e3d6c6174657374\"></a></p>\n<p><code>soundfactory</code> is a simple tool to experiment and be creative with audio taking a data-oriented approach.\nIt is primarily directed to digital artists that want to generate audio samples\nfrom diverse data sources, and to audio-engineering students at their first steps\ninto the beautiful world of additive sound synthesis.</p>\n<p>The peculiarity about <code>soundfactory</code> is the adoption of fourier-series approximation\nwhen <code>square</code>, <code>sawtooth</code>, or <code>triangle</code> wave shapes are chosen. In fact, being\napproximated the single-oscillator signals will contain upper harmonics with respect\nto the analytical signal (with the same amplitude, frequency, and wave shape),\nthat can be obtained by <code>scipy</code> (see tests). The result will be a warmer and\nunexpectedly coloured sound.</p>\n<p>It comes from some scripts I have been writing a few years back and thought about\nhaving few reusable core modules and a command-line tool for researching new sounds.\nAnd I wanted to be able to develop it and have fun with it in my Jupyter Notebook of course!</p>\n<p>You can find the documentation at <a href=\"https://soundfactory.readthedocs.io\" rel=\"nofollow\">https://soundfactory.readthedocs.io</a></p>\n<hr>\n<p><strong>WARNING</strong></p>\n<p>Before installing with <code>pip</code> check the <a href=\"https://soundfactory.readthedocs.io/en/latest/installation.html#prerequisites\" rel=\"nofollow\">pre-requirements</a></p>\n<hr>\n<h2>Examples</h2>\n<h3>Random Sample Generator</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">random</span> <span class=\"kn\">import</span> <span class=\"n\">uniform</span><span class=\"p\">,</span> <span class=\"n\">choice</span>\n<span class=\"kn\">from</span> <span class=\"nn\">soundfactory</span> <span class=\"kn\">import</span> <span class=\"n\">SignalBuilder</span><span class=\"p\">,</span> <span class=\"n\">SignalPlotter</span>\n<span class=\"kn\">import</span> <span class=\"nn\">matplotlib.pyplot</span> <span class=\"k\">as</span> <span class=\"nn\">plt</span>\n\n<span class=\"n\">n_components</span> <span class=\"o\">=</span> <span class=\"mi\">4</span>\n<span class=\"n\">MAX_FREQ</span> <span class=\"o\">=</span> <span class=\"mf\">1000.</span>\n\n<span class=\"n\">fname</span> <span class=\"o\">=</span> <span class=\"s1\">''</span>\n<span class=\"n\">freqs</span><span class=\"p\">,</span> <span class=\"n\">amps</span><span class=\"p\">,</span> <span class=\"n\">shapes</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(),</span> <span class=\"nb\">list</span><span class=\"p\">(),</span> <span class=\"nb\">list</span><span class=\"p\">()</span>\n<span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">n_components</span><span class=\"p\">):</span>\n    <span class=\"n\">freq</span> <span class=\"o\">=</span> <span class=\"nb\">round</span><span class=\"p\">(</span><span class=\"n\">uniform</span><span class=\"p\">(</span><span class=\"mf\">20.</span><span class=\"p\">,</span> <span class=\"n\">MAX_FREQ</span><span class=\"p\">),</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"n\">freqs</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">freq</span><span class=\"p\">)</span>\n    <span class=\"n\">amp</span> <span class=\"o\">=</span> <span class=\"nb\">round</span><span class=\"p\">(</span><span class=\"n\">uniform</span><span class=\"p\">(</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"mf\">1.</span><span class=\"p\">),</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"n\">amps</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">amp</span><span class=\"p\">)</span>\n    <span class=\"n\">shape</span> <span class=\"o\">=</span> <span class=\"n\">choice</span><span class=\"p\">([</span><span class=\"s1\">'sine'</span><span class=\"p\">,</span> <span class=\"s1\">'square'</span><span class=\"p\">,</span> <span class=\"s1\">'sawtooth'</span><span class=\"p\">,</span> <span class=\"s1\">'triangle'</span><span class=\"p\">])</span>\n    <span class=\"n\">shapes</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">shape</span><span class=\"p\">)</span>\n    <span class=\"n\">fname</span> <span class=\"o\">+=</span> <span class=\"s1\">'_'</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">([</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">freq</span><span class=\"p\">),</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">amp</span><span class=\"p\">),</span> <span class=\"n\">shape</span><span class=\"p\">])</span>\n\n<span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">SignalBuilder</span><span class=\"p\">(</span>\n    <span class=\"n\">freqs</span><span class=\"p\">,</span> <span class=\"n\">amps</span><span class=\"p\">,</span> <span class=\"n\">shapes</span><span class=\"p\">,</span>\n    <span class=\"n\">samplerate</span><span class=\"o\">=</span><span class=\"mi\">96000</span><span class=\"p\">,</span>\n    <span class=\"n\">duration</span><span class=\"o\">=</span><span class=\"mf\">2.</span>\n<span class=\"p\">)</span>\n<span class=\"n\">fname</span> <span class=\"o\">+=</span> <span class=\"s1\">'.wav'</span>\n<span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">export</span><span class=\"p\">(</span><span class=\"n\">fname</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Analyse with SignalPlotter</span>\n<span class=\"n\">sig</span> <span class=\"o\">=</span> <span class=\"n\">SignalPlotter</span><span class=\"p\">(</span><span class=\"n\">plt</span><span class=\"p\">,</span> <span class=\"n\">fname</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">sig</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">(</span><span class=\"n\">wmsec</span><span class=\"o\">=</span><span class=\"mf\">0.1</span><span class=\"p\">)</span>\n</pre>\n<h3>Reproducing a Sound Characteristic at an arbitrary Frequency</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">numpy</span> <span class=\"kn\">import</span> <span class=\"n\">where</span><span class=\"p\">,</span> <span class=\"n\">sqrt</span>\n<span class=\"kn\">import</span> <span class=\"nn\">matplotlib.pyplot</span> <span class=\"k\">as</span> <span class=\"nn\">plt</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">soundfactory</span> <span class=\"kn\">import</span> <span class=\"n\">SignalBuilder</span><span class=\"p\">,</span> <span class=\"n\">SignalPlotter</span>\n<span class=\"kn\">from</span> <span class=\"nn\">soundfactory</span> <span class=\"kn\">import</span> <span class=\"n\">Signal</span>\n<span class=\"kn\">from</span> <span class=\"nn\">soundfactory.utils.scale</span> <span class=\"kn\">import</span> <span class=\"n\">build_24_tet_scale</span>\n\n<span class=\"n\">SCALE_INIT</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'E0'</span><span class=\"p\">:</span> <span class=\"mf\">20.6</span><span class=\"p\">}</span>\n\n<span class=\"n\">ref_label</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">SCALE_INIT</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">())[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"n\">ref_frequency</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">SCALE_INIT</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">())[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"n\">scale_24</span> <span class=\"o\">=</span> <span class=\"n\">build_24_tet_scale</span><span class=\"p\">(</span><span class=\"n\">ref_label</span><span class=\"p\">,</span> <span class=\"n\">ref_frequency</span><span class=\"p\">,</span> <span class=\"n\">max_octave</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n\n<span class=\"n\">ref_signal</span> <span class=\"o\">=</span> <span class=\"n\">Signal</span><span class=\"p\">(</span><span class=\"s1\">'/&lt;path-to-packages&gt;/soundfactory/samples/A3-Calib-220.wav'</span><span class=\"p\">)</span>\n\n<span class=\"n\">freqs</span> <span class=\"o\">=</span> <span class=\"n\">ref_signal</span><span class=\"o\">.</span><span class=\"n\">SPECTRA</span><span class=\"p\">[</span><span class=\"s1\">'ch1_fft'</span><span class=\"p\">][</span><span class=\"n\">ref_signal</span><span class=\"o\">.</span><span class=\"n\">FREQUENCIES</span><span class=\"p\">]</span>\n<span class=\"n\">pws</span> <span class=\"o\">=</span> <span class=\"n\">ref_signal</span><span class=\"o\">.</span><span class=\"n\">SPECTRA</span><span class=\"p\">[</span><span class=\"s1\">'ch1_fft'</span><span class=\"p\">][</span><span class=\"n\">ref_signal</span><span class=\"o\">.</span><span class=\"n\">POWERS</span><span class=\"p\">]</span>\n\n<span class=\"c1\"># Select only few of the spectral components</span>\n<span class=\"n\">select_idx</span> <span class=\"o\">=</span> <span class=\"n\">where</span><span class=\"p\">(</span><span class=\"n\">pws</span> <span class=\"o\">&gt;</span> <span class=\"mf\">0.00001</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"c1\"># Get the fundamental frequency to obtain the upper-harmonic orders</span>\n<span class=\"n\">fundamental_idx</span> <span class=\"o\">=</span> <span class=\"n\">where</span><span class=\"p\">(</span><span class=\"n\">pws</span> <span class=\"o\">==</span> <span class=\"n\">pws</span><span class=\"o\">.</span><span class=\"n\">max</span><span class=\"p\">())[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"n\">freq_ratios</span> <span class=\"o\">=</span> <span class=\"n\">freqs</span> <span class=\"o\">/</span> <span class=\"n\">freqs</span><span class=\"p\">[</span><span class=\"n\">fundamental_idx</span><span class=\"p\">]</span>\n\n<span class=\"n\">tone</span> <span class=\"o\">=</span> <span class=\"s1\">'E3\ud834\udd32'</span>  <span class=\"c1\"># Choose an arbitrary tone NOT playble on the keyboard</span>\n<span class=\"n\">input_freqs</span> <span class=\"o\">=</span> <span class=\"n\">scale_24</span><span class=\"p\">[</span><span class=\"n\">tone</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"n\">freq_ratios</span><span class=\"p\">[</span><span class=\"n\">select_idx</span><span class=\"p\">]</span>\n<span class=\"n\">input_amps</span> <span class=\"o\">=</span> <span class=\"n\">sqrt</span><span class=\"p\">(</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">pws</span><span class=\"p\">[</span><span class=\"n\">select_idx</span><span class=\"p\">])</span>\n\n<span class=\"n\">my_signal</span> <span class=\"o\">=</span> <span class=\"n\">SignalBuilder</span><span class=\"p\">(</span><span class=\"n\">input_freqs</span><span class=\"p\">,</span>\n                          <span class=\"n\">input_amps</span><span class=\"p\">,</span> <span class=\"p\">[</span>\n                          <span class=\"s1\">'sine'</span> <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">select_idx</span><span class=\"p\">))]</span>\n                         <span class=\"p\">)</span>\n\n<span class=\"n\">filename</span> <span class=\"o\">=</span> <span class=\"s1\">'./</span><span class=\"si\">%s</span><span class=\"s1\">_sample.wav'</span> <span class=\"o\">%</span> <span class=\"n\">tone</span>\n<span class=\"n\">my_signal</span><span class=\"o\">.</span><span class=\"n\">export</span><span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Analyse with SignalPlotter</span>\n<span class=\"n\">sig</span> <span class=\"o\">=</span> <span class=\"n\">SignalPlotter</span><span class=\"p\">(</span><span class=\"n\">plt</span><span class=\"p\">,</span> <span class=\"n\">filename</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">sig</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">(</span><span class=\"n\">wmsec</span><span class=\"o\">=</span><span class=\"mf\">0.1</span><span class=\"p\">)</span>\n</pre>\n\n          </div>"}, "last_serial": 6145575, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "b7f74863f1e9c9a7bded845b307bcb89", "sha256": "1744db93116304e630119206b9778f0b25920680cae902fb6cb8f4ef90d005a9"}, "downloads": -1, "filename": "soundfactory-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "b7f74863f1e9c9a7bded845b307bcb89", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 1319536, "upload_time": "2019-11-16T01:51:31", "upload_time_iso_8601": "2019-11-16T01:51:31.950782Z", "url": "https://files.pythonhosted.org/packages/88/9b/a43006b733095de14afe6806658d286c390324afba36d8471c436e4a1633/soundfactory-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "214d895b78b8fedd0e5ff3b502bdc930", "sha256": "361c2be5640542e84d93a7894d56196c33174b2c2fe37222feacb53578dcab66"}, "downloads": -1, "filename": "soundfactory-0.1.0.tar.gz", "has_sig": false, "md5_digest": "214d895b78b8fedd0e5ff3b502bdc930", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 3653373, "upload_time": "2019-11-16T01:51:36", "upload_time_iso_8601": "2019-11-16T01:51:36.596550Z", "url": "https://files.pythonhosted.org/packages/8b/64/c254d7e570028079517cff4c55dc31e96a5594fd5ac1830b028846717729/soundfactory-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b7f74863f1e9c9a7bded845b307bcb89", "sha256": "1744db93116304e630119206b9778f0b25920680cae902fb6cb8f4ef90d005a9"}, "downloads": -1, "filename": "soundfactory-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "b7f74863f1e9c9a7bded845b307bcb89", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 1319536, "upload_time": "2019-11-16T01:51:31", "upload_time_iso_8601": "2019-11-16T01:51:31.950782Z", "url": "https://files.pythonhosted.org/packages/88/9b/a43006b733095de14afe6806658d286c390324afba36d8471c436e4a1633/soundfactory-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "214d895b78b8fedd0e5ff3b502bdc930", "sha256": "361c2be5640542e84d93a7894d56196c33174b2c2fe37222feacb53578dcab66"}, "downloads": -1, "filename": "soundfactory-0.1.0.tar.gz", "has_sig": false, "md5_digest": "214d895b78b8fedd0e5ff3b502bdc930", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 3653373, "upload_time": "2019-11-16T01:51:36", "upload_time_iso_8601": "2019-11-16T01:51:36.596550Z", "url": "https://files.pythonhosted.org/packages/8b/64/c254d7e570028079517cff4c55dc31e96a5594fd5ac1830b028846717729/soundfactory-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:06:21 2020"}