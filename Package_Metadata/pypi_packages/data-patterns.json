{"info": {"author": "De Nederlandsche Bank", "author_email": "ECDB_berichten@dnb.nl", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "Intended Audience :: Developers", "Intended Audience :: Education", "Intended Audience :: Financial and Insurance Industry", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "=============\ndata-patterns\n=============\n\n\n.. image:: https://img.shields.io/pypi/v/data_patterns.svg\n        :target: https://pypi.python.org/pypi/data_patterns\n        :alt: Pypi Version\n.. image:: https://img.shields.io/travis/DeNederlandscheBank/data-patterns.svg\n        :target: https://travis-ci.org/DeNederlandscheBank/data-patterns\n        :alt: Build Status\n.. image:: https://readthedocs.org/projects/data-patterns/badge/?version=latest\n        :target: https://data-patterns.readthedocs.io/en/latest/?badge=latest\n        :alt: Documentation Status\n.. image:: https://img.shields.io/badge/License-MIT/X-blue.svg\n        :target: https://github.com/DeNederlandscheBank/data-patterns/blob/master/LICENSE\n        :alt: License\n\nPackage for generating and evaluating data-patterns in quantitative reports\n\n* Free software: MIT/X license\n* Documentation: https://data-patterns.readthedocs.io.\n\n\nFeatures\n--------\n\nHere is what the package does:\n\n- Generating and evaluating patterns in structured datasets and exporting to Excel and JSON\n- Transforming generated patterns into XBRL validation rules and Pandas code\n- Evaluating reporting data with data quality rules published by De Nederlandsche Bank (to be provided)\n\nQuick overview\n--------------\n\nTo install the package\n\n::\n\n    pip install data_patterns\n\n\nTo introduce the features of the this package define the following Pandas DataFrame::\n\n    df = pd.DataFrame(columns = ['Name',       'Type',             'Assets', 'TV-life', 'TV-nonlife' , 'Own funds', 'Excess'],\n                      data   = [['Insurer  1', 'life insurer',     1000,     800,       0,             200,         200], \n                                ['Insurer  2', 'non-life insurer', 4000,     0,         3200,          800,         800], \n                                ['Insurer  3', 'non-life insurer', 800,      0,         700,           100,         100],\n                                ['Insurer  4', 'life insurer',     2500,     1800,      0,             700,         700], \n                                ['Insurer  5', 'non-life insurer', 2100,     0,         2200,          200,         200], \n                                ['Insurer  6', 'life insurer',     9000,     8800,      0,             200,         200],\n                                ['Insurer  7', 'life insurer',     9000,     0,         8800,          200,         200],\n                                ['Insurer  8', 'life insurer',     9000,     8800,      0,             200,         200],\n                                ['Insurer  9', 'non-life insurer', 9000,     0,         8800,          200,         200],\n                                ['Insurer 10', 'non-life insurer', 9000,     0,         8800,          200,         199.99]])\n    df.set_index('Name', inplace = True)\n\nStart by defining a PatternMiner::\n\n    miner = data_patterns.PatternMiner(df)\n\nTo generate patterns use the find-function of this object::\n\n    df_patterns = miner.find({'name'      : 'equal values', \n                              'pattern'   : '=',\n                              'parameters': {\"min_confidence\": 0.5,\n                                             \"min_support\"   : 2}})\n\nThe result is a DataFrame with the patterns that were found. The first part of the DataFrame now contains\n\n+----+--------------+------------+--------------+------------+--------+-----------+----------+\n| id |pattern_id    |P columns   |relation type |Q columns   |support |exceptions |confidence|\n+====+==============+============+==============+============+========+===========+==========+\n|  0 |equal values  |[Own funds] |=             |[Excess]    |9       |1          |0.9       |\n+----+--------------+------------+--------------+------------+--------+-----------+----------+\n|  1 |equal values  |[Excess]    |=             |[Own funds] |9       |1          |0.9       | \n+----+--------------+------------+--------------+------------+--------+-----------+----------+\n\nThe miner finds two patterns; the first states that the 'Own funds'-column is identical to the 'Excess'-column in 9 of the 10 cases (with a confidence of 90 %, there is one case where the equal-pattern does not hold), and the second pattern is identical to the first but with the columns reversed.\n\nTo analyze data with the generated set of data-patterns use the analyze function with the dataframe with the data as input::\n\n    df_results = miner.analyze(df)\n\nThe result is a DataFrame with the results. If we select ``result_type = False`` then the first part of the output contains\n\n+-----------+--------------+-------------+------------+-------------+------------+---------+---------+\n|index      |result_type   |pattern_id   |P columns   |relation type|Q columns   |P values |Q values |\n+-----------+--------------+-------------+------------+-------------+------------+---------+---------+\n|Insurer 10 |False         |equal values |[Own funds] |=            |[Excess]    |[200]    |[199.99] |\n+-----------+--------------+-------------+------------+-------------+------------+---------+---------+\n|Insurer 10 |False         |equal values |[Excess]    |=            |[Own funds] |[199.99] |[200]    |\n+-----------+--------------+-------------+------------+-------------+------------+---------+---------+\n\nOther patterns you can use are '>', '<', '<=', '>=', '!=', 'sum', and '-->'. \n\nRead the documentation for more features.\n\n\n\n=======\nHistory\n=======\n\n0.1.0 (2019-10-27)\n------------------\n\n* Development release.\n\n0.1.11 (2019-11-6)\n------------------\n\n* First release on PyPI.\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/DeNederlandscheBank/data-patterns", "keywords": "data_patterns", "license": "MIT/X license", "maintainer": "", "maintainer_email": "", "name": "data-patterns", "package_url": "https://pypi.org/project/data-patterns/", "platform": "", "project_url": "https://pypi.org/project/data-patterns/", "project_urls": {"Homepage": "https://github.com/DeNederlandscheBank/data-patterns"}, "release_url": "https://pypi.org/project/data-patterns/0.1.13/", "requires_dist": ["pandas", "numpy", "xlsxwriter"], "requires_python": ">=3.0, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "summary": "Package for generating and evaluating patterns in quantitative reports", "version": "0.1.13", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"data-patterns\">\n<h2>data-patterns</h2>\n<a href=\"https://pypi.python.org/pypi/data_patterns\" rel=\"nofollow\"><img alt=\"Pypi Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f708da4eff416fd924d3a825ae7be7c3f6286a4e/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f646174615f7061747465726e732e737667\"></a>\n<a href=\"https://travis-ci.org/DeNederlandscheBank/data-patterns\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7d80679fe53b2eec3529472a694eb9e3340d7292/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f44654e656465726c616e647363686542616e6b2f646174612d7061747465726e732e737667\"></a>\n<a href=\"https://data-patterns.readthedocs.io/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fc3e1accc501b0bd0a7335735ca8243d1dc44bf7/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f646174612d7061747465726e732f62616467652f3f76657273696f6e3d6c6174657374\"></a>\n<a href=\"https://github.com/DeNederlandscheBank/data-patterns/blob/master/LICENSE\" rel=\"nofollow\"><img alt=\"License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/bc512a548c24c7501b44660058d9f13d7daf3644/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d4d49542f582d626c75652e737667\"></a>\n<p>Package for generating and evaluating data-patterns in quantitative reports</p>\n<ul>\n<li>Free software: MIT/X license</li>\n<li>Documentation: <a href=\"https://data-patterns.readthedocs.io\" rel=\"nofollow\">https://data-patterns.readthedocs.io</a>.</li>\n</ul>\n<div id=\"features\">\n<h3>Features</h3>\n<p>Here is what the package does:</p>\n<ul>\n<li>Generating and evaluating patterns in structured datasets and exporting to Excel and JSON</li>\n<li>Transforming generated patterns into XBRL validation rules and Pandas code</li>\n<li>Evaluating reporting data with data quality rules published by De Nederlandsche Bank (to be provided)</li>\n</ul>\n</div>\n<div id=\"quick-overview\">\n<h3>Quick overview</h3>\n<p>To install the package</p>\n<pre>pip install data_patterns\n</pre>\n<p>To introduce the features of the this package define the following Pandas DataFrame:</p>\n<pre>df = pd.DataFrame(columns = ['Name',       'Type',             'Assets', 'TV-life', 'TV-nonlife' , 'Own funds', 'Excess'],\n                  data   = [['Insurer  1', 'life insurer',     1000,     800,       0,             200,         200],\n                            ['Insurer  2', 'non-life insurer', 4000,     0,         3200,          800,         800],\n                            ['Insurer  3', 'non-life insurer', 800,      0,         700,           100,         100],\n                            ['Insurer  4', 'life insurer',     2500,     1800,      0,             700,         700],\n                            ['Insurer  5', 'non-life insurer', 2100,     0,         2200,          200,         200],\n                            ['Insurer  6', 'life insurer',     9000,     8800,      0,             200,         200],\n                            ['Insurer  7', 'life insurer',     9000,     0,         8800,          200,         200],\n                            ['Insurer  8', 'life insurer',     9000,     8800,      0,             200,         200],\n                            ['Insurer  9', 'non-life insurer', 9000,     0,         8800,          200,         200],\n                            ['Insurer 10', 'non-life insurer', 9000,     0,         8800,          200,         199.99]])\ndf.set_index('Name', inplace = True)\n</pre>\n<p>Start by defining a PatternMiner:</p>\n<pre>miner = data_patterns.PatternMiner(df)\n</pre>\n<p>To generate patterns use the find-function of this object:</p>\n<pre>df_patterns = miner.find({'name'      : 'equal values',\n                          'pattern'   : '=',\n                          'parameters': {\"min_confidence\": 0.5,\n                                         \"min_support\"   : 2}})\n</pre>\n<p>The result is a DataFrame with the patterns that were found. The first part of the DataFrame now contains</p>\n<table>\n<colgroup>\n<col>\n<col>\n<col>\n<col>\n<col>\n<col>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>id</th>\n<th>pattern_id</th>\n<th>P columns</th>\n<th>relation type</th>\n<th>Q columns</th>\n<th>support</th>\n<th>exceptions</th>\n<th>confidence</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>0</td>\n<td>equal values</td>\n<td>[Own funds]</td>\n<td>=</td>\n<td>[Excess]</td>\n<td>9</td>\n<td>1</td>\n<td>0.9</td>\n</tr>\n<tr><td>1</td>\n<td>equal values</td>\n<td>[Excess]</td>\n<td>=</td>\n<td>[Own funds]</td>\n<td>9</td>\n<td>1</td>\n<td>0.9</td>\n</tr>\n</tbody>\n</table>\n<p>The miner finds two patterns; the first states that the \u2018Own funds\u2019-column is identical to the \u2018Excess\u2019-column in 9 of the 10 cases (with a confidence of 90 %, there is one case where the equal-pattern does not hold), and the second pattern is identical to the first but with the columns reversed.</p>\n<p>To analyze data with the generated set of data-patterns use the analyze function with the dataframe with the data as input:</p>\n<pre>df_results = miner.analyze(df)\n</pre>\n<p>The result is a DataFrame with the results. If we select <tt>result_type = False</tt> then the first part of the output contains</p>\n<table>\n<colgroup>\n<col>\n<col>\n<col>\n<col>\n<col>\n<col>\n<col>\n<col>\n</colgroup>\n<tbody>\n<tr><td>index</td>\n<td>result_type</td>\n<td>pattern_id</td>\n<td>P columns</td>\n<td>relation type</td>\n<td>Q columns</td>\n<td>P values</td>\n<td>Q values</td>\n</tr>\n<tr><td>Insurer 10</td>\n<td>False</td>\n<td>equal values</td>\n<td>[Own funds]</td>\n<td>=</td>\n<td>[Excess]</td>\n<td>[200]</td>\n<td>[199.99]</td>\n</tr>\n<tr><td>Insurer 10</td>\n<td>False</td>\n<td>equal values</td>\n<td>[Excess]</td>\n<td>=</td>\n<td>[Own funds]</td>\n<td>[199.99]</td>\n<td>[200]</td>\n</tr>\n</tbody>\n</table>\n<p>Other patterns you can use are \u2018&gt;\u2019, \u2018&lt;\u2019, \u2018&lt;=\u2019, \u2018&gt;=\u2019, \u2018!=\u2019, \u2018sum\u2019, and \u2018\u2013&gt;\u2019.</p>\n<p>Read the documentation for more features.</p>\n</div>\n</div>\n<div id=\"history\">\n<h2>History</h2>\n<div id=\"id1\">\n<h3>0.1.0 (2019-10-27)</h3>\n<ul>\n<li>Development release.</li>\n</ul>\n</div>\n<div id=\"id2\">\n<h3>0.1.11 (2019-11-6)</h3>\n<ul>\n<li>First release on PyPI.</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 6167670, "releases": {"0.1.11": [{"comment_text": "", "digests": {"md5": "80635e339403b8e8960d7f7e479e0de3", "sha256": "92789c2e96364a607edbcda5ecb203535f815af18f44d8ed976abc46777a285d"}, "downloads": -1, "filename": "data_patterns-0.1.11-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "80635e339403b8e8960d7f7e479e0de3", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 14475, "upload_time": "2019-11-06T13:09:06", "upload_time_iso_8601": "2019-11-06T13:09:06.931025Z", "url": "https://files.pythonhosted.org/packages/c3/e2/557d44316622e165e27682ac8be7a0f0c771c69b944fcd6fecc209f150a0/data_patterns-0.1.11-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c17ead15ae3723198537f00ee7e09e54", "sha256": "f5ced0e26e2f5233f7cce18b63c5764a19ce7df693994afe2688fc9f92fab796"}, "downloads": -1, "filename": "data_patterns-0.1.11.tar.gz", "has_sig": false, "md5_digest": "c17ead15ae3723198537f00ee7e09e54", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 23435, "upload_time": "2019-11-06T13:09:08", "upload_time_iso_8601": "2019-11-06T13:09:08.920492Z", "url": "https://files.pythonhosted.org/packages/ed/33/49c5be6cec250bef1a3d908f92d83614f6cf73d47a9df351f5062a8936fa/data_patterns-0.1.11.tar.gz", "yanked": false}], "0.1.12": [{"comment_text": "", "digests": {"md5": "670c4af64b8609e6b4fe45a594960a78", "sha256": "99f4a9131d045962bd66627994c099df328a9d3c527493ff28f0c96a4c68d670"}, "downloads": -1, "filename": "data_patterns-0.1.12-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "670c4af64b8609e6b4fe45a594960a78", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.0, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 14661, "upload_time": "2019-11-12T09:28:45", "upload_time_iso_8601": "2019-11-12T09:28:45.321296Z", "url": "https://files.pythonhosted.org/packages/7f/e6/438e5c01f5cc1f4773010d9c4a4aa31c1a01a4dd6cd34e629579d9314e2e/data_patterns-0.1.12-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0da04eef696659ce89561d4b02626559", "sha256": "fd8a9827035f9bf007024596b64751cd8edb802f119520cbb95b2b9b3034f555"}, "downloads": -1, "filename": "data_patterns-0.1.12.tar.gz", "has_sig": false, "md5_digest": "0da04eef696659ce89561d4b02626559", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.0, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 24045, "upload_time": "2019-11-12T09:28:46", "upload_time_iso_8601": "2019-11-12T09:28:46.513589Z", "url": "https://files.pythonhosted.org/packages/ba/9e/398ebf1b506c8ddd0cd20e9a13ced1948257c63e567fafe1d99b422a25d0/data_patterns-0.1.12.tar.gz", "yanked": false}], "0.1.13": [{"comment_text": "", "digests": {"md5": "5915898056692a2fa8270635f30219c7", "sha256": "5688f4991682b1857cb3bc75cf4a9581b3d91aa8ab060573ae42a0054a22cdc2"}, "downloads": -1, "filename": "data_patterns-0.1.13-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "5915898056692a2fa8270635f30219c7", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.0, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 14486, "upload_time": "2019-11-20T08:49:29", "upload_time_iso_8601": "2019-11-20T08:49:29.976582Z", "url": "https://files.pythonhosted.org/packages/bc/e6/8857f46d5091c03775a7a6e039669bc3c60e3547b9d92e5a28c0e92820eb/data_patterns-0.1.13-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "862fabe43766f199e2c47f8c337df99e", "sha256": "bb88e4bb7fadd09cadb25cc95df3a229612f3416e79f07a1a671465aaa1b4a5c"}, "downloads": -1, "filename": "data_patterns-0.1.13.tar.gz", "has_sig": false, "md5_digest": "862fabe43766f199e2c47f8c337df99e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.0, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 23914, "upload_time": "2019-11-20T08:49:31", "upload_time_iso_8601": "2019-11-20T08:49:31.493052Z", "url": "https://files.pythonhosted.org/packages/1a/51/4a0d4ddf9dd0096aa1198825ff5c11ecad0f05984e33081a9108d5af5342/data_patterns-0.1.13.tar.gz", "yanked": false}], "0.1.6": [{"comment_text": "", "digests": {"md5": "517d0e5ba22dc734e50255de21bcc9d1", "sha256": "a398db33e5aebd6e913973bd2f2537e2d3d18f1a856c79be86add677b4a90e20"}, "downloads": -1, "filename": "data_patterns-0.1.6-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "517d0e5ba22dc734e50255de21bcc9d1", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.0, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 14520, "upload_time": "2019-11-08T07:41:10", "upload_time_iso_8601": "2019-11-08T07:41:10.393418Z", "url": "https://files.pythonhosted.org/packages/72/53/7b089894a5e11f8ecc4be057edb993a32fa29046b5ac55614a4395274ea6/data_patterns-0.1.6-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9fa4c4e30f145e33050ebef3adeeeae9", "sha256": "a16dc5f111d2348a99e0991933279670297e176b3c57852d0facfb176d10d871"}, "downloads": -1, "filename": "data_patterns-0.1.6.tar.gz", "has_sig": false, "md5_digest": "9fa4c4e30f145e33050ebef3adeeeae9", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.0, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 23563, "upload_time": "2019-11-08T07:41:11", "upload_time_iso_8601": "2019-11-08T07:41:11.713064Z", "url": "https://files.pythonhosted.org/packages/3e/78/602374df198ec167ba02bbb8541d85c48c126440d4917708a01729886da6/data_patterns-0.1.6.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "5915898056692a2fa8270635f30219c7", "sha256": "5688f4991682b1857cb3bc75cf4a9581b3d91aa8ab060573ae42a0054a22cdc2"}, "downloads": -1, "filename": "data_patterns-0.1.13-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "5915898056692a2fa8270635f30219c7", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.0, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 14486, "upload_time": "2019-11-20T08:49:29", "upload_time_iso_8601": "2019-11-20T08:49:29.976582Z", "url": "https://files.pythonhosted.org/packages/bc/e6/8857f46d5091c03775a7a6e039669bc3c60e3547b9d92e5a28c0e92820eb/data_patterns-0.1.13-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "862fabe43766f199e2c47f8c337df99e", "sha256": "bb88e4bb7fadd09cadb25cc95df3a229612f3416e79f07a1a671465aaa1b4a5c"}, "downloads": -1, "filename": "data_patterns-0.1.13.tar.gz", "has_sig": false, "md5_digest": "862fabe43766f199e2c47f8c337df99e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.0, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 23914, "upload_time": "2019-11-20T08:49:31", "upload_time_iso_8601": "2019-11-20T08:49:31.493052Z", "url": "https://files.pythonhosted.org/packages/1a/51/4a0d4ddf9dd0096aa1198825ff5c11ecad0f05984e33081a9108d5af5342/data_patterns-0.1.13.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:40:16 2020"}