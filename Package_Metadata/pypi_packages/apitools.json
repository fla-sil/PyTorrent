{"info": {"author": "Nicolas Esteves", "author_email": "hamstahguru@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "Tools to play with json-schemas defined APIs.\n\nThese tools are based on json-schema draft 3 from http://tools.ietf.org/html/draft-zyp-json-schema-03\nNot all features of the schema are supported and probably won't be.\nHandling of not supported feature varies between the different tools.\n\nAll these tools are proofs of concept and work in progress, they need more extensive testing and documentation.\n\n# datagenerator \n\nClass to generate random values given a json-schema.  \nDoesn't support all json-schema monstruousities, only a subset I find useful.  \nSee TODO.md for what is likely to be implemented next.  \n\n## Examples\n\n```python\nfrom datagenerator import DataGenerator\n\ngenerator = DataGenerator()\n```\n\n### Basic\n\nGenerate random values of each basic type using\n\n```python\n>>> generator.random_value(\"string\")\n'Olzq3LV'\n>>> generator.random_value(\"number\")\n-6.675904074356879\n>>> generator.random_value(\"integer\")\n30\n>>> generator.random_value(\"boolean\")\nTrue\n\n```\n\n### Basic with constraints\n\n`number`\n\n```python\n>>> generator.random_value({\"type\":\"number\", \"minimum\":30})\n32.34295327292445\n>>> generator.random_value({\"type\":\"number\", \"maximum\":30})\n-35.80704939879546\n>>> generator.random_value({\"type\":\"number\", \"maximum\":30, \"minimum\":12})\n16.45747265846327\n```\n\n`integer` supports `minimum` and `maximum` like `number` and more\n```python\n>>> generator.random_value({\"type\":\"integer\", \"maximum\":30, \"divisibleBy\":4, \"minimum\":12})\n24\n>>> generator.random_value({\"type\":\"integer\", \"maximum\":30, \"exclusiveMaximum\":True, \"minimum\":28})\n29\n```\n(same for `exclusiveMinimum`)\n\n`string` supports `minLength`, `maxLength`, `pattern` (ignores `minLength` and `maxLength` if `pattern` is used)\n```python\n>>> generator.random_value({\"type\":\"string\", \"maxLength\":20, \"minLength\":15})\n'VytPCEdAImX11188HU'\n>>> generator.random_value({\"type\":\"string\", \"pattern\":\"[0-9]{3}[a-zA-Z]{2,5}\"})\nu'806FoNP'\n```\n\n`boolean` doesn't have any constraints.\n\n### Arrays\n\nWithout constraints the array size will be picked the same way as a random `integer`.  \nEach item in the array is generated using the default generator for the type given in `items`.\n```python\n>>> generator.random_value({\"type\":\"array\", \"items\": {\"type\":\"string\"}})\n[\n\t'39yxcpvS5tfPf6O', \n\t'sNDk7SlGNQstxxx', \n\t'nPcRSD9yIP7j ', \n\t'PWP7KQfjc1', \n\t'tt6F6Z2YEp'\n]\n```\n\n`minItems`, `maxItems` and `uniqueItems` are supported\n\nThe type of object in `items` can be anything that the generator knows about, either one of the basic types\nor a user defined one available from the generator's schemas store. \n\n```python\nfrom schemasstore import SchemasStore\n\n...\n>>> from schemasstore import SchemasStore\n>>> store = SchemasStore()\n>>> generator.schemas_store = store\n>>> store.add_schema({\"type\":\"integer\", \"name\":\"small_integer\", \"minimum\":0,\"maximum\":9})\nTrue\n>>> generator.random_value({\"type\":\"array\", \"uniqueItems\":True, \"minItems\":10, \"items\":{\"type\":\"small_integer\"}})\n[0, 7, 2, 5, 3, 6, 1, 4, 8, 9]\n```\n\nSee [datagenerator](https://github.com/hamstah/apitools/blob/master/datagenerator.py) for other examples.\n\n### Objects\n\nObjects can be generated the same way as the other types.\n\nExample generating [search_result.json](https://github.com/hamstah/apitools/blob/master/data/schemas/search_result.json)\n```python\n>>> store.load_folder(\"data/schemas/\")\n>>> generator.random_value(\"search_result\")\n{u'price': 21.980325774975253, u'name': 'wdvfXYrrt', u'reference': 26}\n```\n\nGenerating arrays of objects is fine as well\n```python\n>>> generator.random_value({\"type\":\"array\", \"maxItems\":3, \"minItems\":2, \"items\":{\"type\":\"search_result\"}})\n[\n    {u'price': 20.304440535786522, u'name': 'VUIgjaPbs', u'reference': 40}, \n\t{u'price': 28.45387747055259, u'name': 'JTycBU1V78X1S', u'reference': 27}\n]\n```\n\nOr generating objects with arrays of other objects in them, see\n[search_resuts](https://github.com/hamstah/apitools/blob/master/data/schemas/search_results.json) \nwith an array of [search_result](https://github.com/hamstah/apitools/blob/master/data/schemas/search_result.json)\n```python\n>>> generator.random_value(\"search_results\")\n{\n    u'total_results': 41, \n\tu'total_pages': 26, \n\tu'current_page': 33, \n\tu'items_per_page': 27, \n\tu'results': [\n\t    {u'price': 26.218704680177446, u'name': 'B4p1Z1pOFQO', u'reference': 38}, \n\t\t{u'price': 21.205089550441276, u'name': 'FQPHdLds', u'reference': 7}, \n\t\t{u'price': 20.610536930894398, u'name': '8D862p1XVupP', u'reference': 38}, \n\t\t{u'price': 9.543934434058526, u'name': 'PmqBA0e DIWisf', u'reference': 32}\n\t]\n}\n```\n\n### Schemas\n\nWhy not generate random schemas?\n```python\n>>> r_schema = generator.random_schema()\n>>> r_schema\n{\n    'type': 'object', \n\t'properties': {\n\t    u'viYXjhu': {'required': False, 'type': 'boolean'}, \n\t\tu'TO': {'required': False, 'type': 'string'}, \n\t\tu'NTSd': {'required': False, 'type': 'string'}, \n\t\tu'WjaL': {'required': False, 'type': 'string'}, \n\t\tu'PtvhZ': {'required': False, 'type': 'boolean'}\n\t}, \n\t'name': u'zJllGkKosmocOVO'\n}\n```\nAnd then generate an array of random values of it\n```python\n>>> store.add_schema(r_schema)\nTrue\n>>> generator.random_value({\"type\":\"array\", \"minItems\":1, \"maxItems\":3, \"items\":{\"type\":\"zJllGkKosmocOVO\"}})\n[\n\t{u'TO': 'jamKFpdwY'}, \n\t{u'WjaL': '8LnibWUdsSI', u'PtvhZ': True}, \n\t{}\n]\n```\n\n## Notes on the generation\n\nAll the values are generated using the `random` module, so please don't use the generate values for anything\nrequiring reliable randomness == **don't use it to generate passwords**.\n\nTo generate the data, the generator has to limit the range of possible values, so the values generated don't\nvary too wildly. The ranges are controlled by variables in `DataGenerator`. Feel free to tweak them, especially\nif you need values that don't fall into those ranges without having to set both minimum and maximum on your \nproperties.\n\n---\n\n# urlsgenerator\n\nClass to generate links defined in the links section of a json-schema.\n\n## Example\n\nGenerate links from [book.json](https://github.com/hamstah/apitools/blob/master/data/schemas/book.json)\n\nInput\n```javascript\n...\n\t\"isbn\" : {\n\t    \"type\":\"string\",\n\t    \"required\":true,\n\t    \"pattern\":\"^\\\\d{12}(\\\\d|X)$\"\n\t}\n\n    },\n    \"links\" : [\n\t{\n\t    \"rel\":\"self\",\n\t    \"href\":\"books/{isbn}\"\n\t},\n\t{\n\t    \"rel\":\"instances\",\n\t    \"href\": \"books\"\n\t}\n    ]\n...\n\n```\n\nOutput\n```python\n{\n    u'instances': [u'books'], \n    u'self'     : [u'books/525259838909X']\n}\n```\n\n`{isbn}` got replaced by a random value `525259838909X` satisfying the constraints on `isbn` (matches the regex).\n\n---\n\n# invaliddatagenerator\n\nClass to generate invalid data for a given schema\n\nBasically does the opposite of datagenerator. WIP, needs documentation and examples.\n\n---\n\n# modelgenerator\n\nBase class to generate models from a schema, nothing too visible on its own, check `resourceserver`.\n\n---\n\n# flasksqlalchemymodelgenerator\n\nGenerate SQLAlchemy models to be used with flask-sqlalchemy from a schema. Uses `modelgenerator`. \nUsed in `resourceserver` to store and query items.\n\n---\n\n# backbonemodelgenerator\n\nGenerate models and collections for Backbone.js from a schema.  \nThe models generated use the primary key defined in the `rel=self` link or `id` by default.  \nTo be able to use collections, make sure your schema has a `rel=instances` link or `fetch` won't work.  \n\n## Usage\n\n```bash\n$ python backbonemodelgenerator.py -h\nUsage: backbonemodelgenerator.py jsonfile1 [jsonfile2]...\n\nOptions:\n  -h, --help            show this help message and exit\n  -t OUTPUT_TYPE, --type=OUTPUT_TYPE\n                        Output type (js|wrapped|html)\n```\n\n## Output types\n\n### js\n\nOutputs only the js code for the models/collections\n\n```bash\n$ python backbonemodelgenerator.py -t js data/schemas/message.json\n\nApp.Models.Message = Backbone.Model.extend({\n    urlRoot: '/messages',\n    idAttribute: 'id'\n});\n\nApp.Collections.Messages = Backbone.Collection.extend({\n    model : App.Models.Message,\n    url : \"/messages\"\n});\n```\n\n### wrapped\n\nWraps the js code into `$(document).ready()`\n\n```bash\n$ python backbonemodelgenerator.py -t wrapped data/schemas/message.json\n\n$(document).ready(function() {\n\n    window.App = { Models : {}, Collections : {} };\n    \n    App.Models.Message = Backbone.Model.extend({\n        urlRoot: '/messages',\n        idAttribute: 'id'\n    });\n    \n    App.Collections.Messages = Backbone.Collection.extend({\n        model : App.Models.Message,\n        url : \"/messages\"\n    });\n\n});\n```\n\n### html\n\nSame as wrapped but generate a whole html page including jQuery, Backbone and Underscore to easily test.\n\n## Example usage\n\n### Setup\n\nYou can use it with resource server for example\n```bash\n$ mkdir static\n$ python backbonemodelgenerator.py -t html data/schemas/message.json > static/index.html\n$ python resourceserver.py data/schemas/message.json\nAdded message\n * Running on http://0.0.0.0:5000/\n```\n\nNow open your browser at http://0.0.0.0:5000/static/index.html\nOpen your js console to start playing\n\n### Create a collection and fetch them\n\n```javascript\nvar col = new App.Collections.Messages()\ncol.fetch()\n```\nYou should see backbone talking to the resource server in the server shell\n```bash\n127.0.0.1 - - [20/Nov/2012 01:17:15] \"GET /messages HTTP/1.1\" 200 -\n```\n\nYou can inspect the results using\n```javascript\ncol.models\n```\n\nUsing fetch() only works if your schema includes a link with `rel=instances`\n\n### Create a new message\n\n```javascript\nvar msg = new App.Models.Message({recipient:\"01234567890\", text:\"test message\"})\nmsg.attributes\n```\n\nAt that point the message is not saved yet, you can verify by using\n```javascript\nmsg.isNew()\n```\n\nYou can save it on the server using \n```javascript\nmsg.save()\n```\n\nYou can verify that the message was sent to the server in the server shell\n```bash\n127.0.0.1 - - [20/Nov/2012 01:23:24] \"POST /messages HTTP/1.1\" 201 -\n```\n\nNow you should have an id for the message and it shouldn't be marked as new anymore.\n```javascript\nmsg.id\nmsg.isNew()\n```\n\n### Fetch an existing message\n\nCreate a message with the `id` of the message to fetch\n```javascript\nvar msg = new App.Models.Message({id: 3})\n```\n\nThe message is not marked as new as it has an id.  \nWe can then fetch the actual message from the server using  \n```javascript\nmsg.fetch()\nmsg.attributes()\n```\n\nYou can see the query in the server shell again\n```bash\n127.0.0.1 - - [20/Nov/2012 01:25:41] \"PUT /messages/3 HTTP/1.1\" 200 -\n```\n\n### Update a message\n\nOnce you have a message object, you can update it using `save`.\n\n```javascript\n> msg.attributes.recipient\n\"01234567890\"\n> msg.save({recipient:\"00123456789\"})\n> msg.attributes.recipient\n\"00123456789\"\n```\n\nThis is done by doing a `PUT` on the server\n```bash\n127.0.0.1 - - [20/Nov/2012 01:33:35] \"PUT /messages/3 HTTP/1.1\" 200 -\n```\n\n### Delete a message\n\nSimply use `destroy` on the object\n```javascript\nmsg.destroy()\n```\n\nAnd see the `DELETE` happening on the server\n```bash\n127.0.0.1 - - [20/Nov/2012 01:34:48] \"DELETE /messages/3 HTTP/1.1\" 204 -\n```\n\n---\n\n# resourceserver\n\nClass to implement the REST api of resources defined in a schema.  \nSupports creation, update, retrieval, deletion, listing of instances and schema.  \n\n## Usage\n\nRun the server using\n```bash\n$ python resourceserver.py [jsonfile1, jsonfile2, ...]\n```\n\n## Example using data/schemas/message.json\n\n```bash\n$ python resourceserver.py data/schemas/message.json\nAdded message\n * Running on http://0.0.0.0:5000/\n```\n\n### Create a new message\n\n```bash\n$ curl -i -X POST    http://0.0.0.0:5000/messages -d \"recipient=07771818335&text=nice message\"\n$ curl -i -X POST    http://0.0.0.0:5000/messages -d '{\"recipient\":\"01234567890\", \"text\":\"test\"}' \\\n\t   -H \"Content-Type: application/json\"\nHTTP/1.0 201 CREATED\nContent-Type: application/json\nContent-Length: 13\nLocation: http://0.0.0.0:5000/messages/2\nServer: Werkzeug/0.8.3 Python/2.7.3\nDate: Sun, 18 Nov 2012 19:28:56 GMT\n\n{\n  \"id\": 2\n}\n```\n\n### List messages\n\n```bash\n$ curl -i -X GET     http://0.0.0.0:5000/messages\nHTTP/1.0 200 OK\nContent-Type: application/json\nContent-Length: 126\nServer: Werkzeug/0.8.3 Python/2.7.3\nDate: Sun, 18 Nov 2012 19:32:09 GMT\n\n[\n  {\"text\": \"I </3 ninjas\", \"recipient\": \"07771818337\", \"id\": 1},\n  {\"text\": \"nice message\", \"recipient\": \"07771818335\", \"id\": 2}\n]\n```\n\n### Retrieve a message\n\n```bash\n$ curl -i -X GET     http://0.0.0.0:5000/messages/2\nHTTP/1.0 200 OK\nContent-Type: application/json\nContent-Length: 71\nServer: Werkzeug/0.8.3 Python/2.7.3\nDate: Sun, 18 Nov 2012 19:35:42 GMT\n\n{\n  \"text\": \"nice message\",\n  \"recipient\": \"07771818335\",\n  \"id\": 2\n}\n```\n\n### Get the json-schema of a message\n\n```bash\n$ curl -i -X OPTIONS http://0.0.0.0:5000/messages/2\nHTTP/1.0 200 OK\nContent-Type: application/json\nContent-Length: 590\nServer: Werkzeug/0.8.3 Python/2.7.3\nDate: Sun, 18 Nov 2012 19:37:06 GMT\n\n{\n  \"description\": \"Simple message structure\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"text\": {\n      \"required\": true, \n      \"type\": \"string\", \n      \"maxLength\": 140\n    }, \n    \"recipient\": {\n      \"pattern\": \"0[0-9]{10}\", \n      \"required\": true,\n      \"type\": \"string\"\n    },\n    \"id\": {\n      \"minimum\": 0,\n      \"type\": \"integer\"\n    }\n  },\n  \"links\": [\n    {\n      \"href\": \"/messages\",\n      \"rel\": \"root\"\n    },\n    {\n      \"href\": \"{id}\",\n      \"rel\": \"self\"\n    },\n    {\n      \"rel\": \"instances\"\n    },\n    {\n      \"rel\": \"create\"\n    }\n  ],\n  \"name\": \"message\"\n}\n```\n\n### Update a message\n\nSupports partial updates\n\n```bash\n$ curl -i -X PUT     http://0.0.0.0:5000/messages/2 -d 'recipient=07771818336'\n$ curl -i -X PUT     http://0.0.0.0:5000/messages/1 -d '{\"text\":\"foo\"}' \\\n          -H \"Content-Type: application/json\"\nHTTP/1.0 200 OK\nContent-Type: text/html; charset=utf-8\nContent-Length: 0\nServer: Werkzeug/0.8.3 Python/2.7.3\nDate: Sun, 18 Nov 2012 19:38:02 GMT\n```\n\n### Delete a message\n\n```bash\n$ curl -i -X DELETE  http://0.0.0.0:5000/messages/2\nHTTP/1.0 204 NO CONTENT\nContent-Type: text/html; charset=utf-8\nContent-Length: 0\nServer: Werkzeug/0.8.3 Python/2.7.3\nDate: Sun, 18 Nov 2012 19:38:38 GMT\n```\n\n## Errors examples\n\n### Trying to set an implicit key\n\nThe message.json doesn't define an explicit primary key, but defines `id` as the key in the `rel=self` link.  \nEach message then gets an additional `id` key managed by the server.  \nTrying to set or update the `id` results in errors  \n\n```bash\n$ curl -i -X POST    http://0.0.0.0:5000/messages   -d \"recipient=07771818335&text=nice message&id=7\"\n$ curl -i -X PUT     http://0.0.0.0:5000/messages/1 -d \"recipient=07771818335&text=nice message&id=3\"\nHTTP/1.0 400 BAD REQUEST\nContent-Type: application/json\nContent-Length: 43\nServer: Werkzeug/0.8.3 Python/2.7.3\nDate: Sun, 18 Nov 2012 19:43:48 GMT\n\n{\n  \"error\": \"id is read only in message\"\n}\n```\n### Trying to create or update unknown properties\n\n```bash\n$ curl -i -X POST    http://0.0.0.0:5000/messages   -d \"recipient=07771818335&tet=test&haxxy=foo\"\n$ curl -i -X PUT     http://0.0.0.0:5000/messages/1 -d \"haxxy=foo\"\nHTTP/1.0 400 BAD REQUEST\nContent-Type: application/json\nContent-Length: 57\nServer: Werkzeug/0.8.3 Python/2.7.3\nDate: Sun, 18 Nov 2012 19:56:19 GMT\n\n{\n  \"error\": \"message does not have a 'haxxy' property\"\n}\n```\n\n### Trying to create or update properties with values not respecting constraints\n\n```bash\n$ curl -i -X PUT     http://0.0.0.0:5000/messages/1 -d \"recipient=0notanumber&text=nice message\"\n$ curl -i -X POST    http://0.0.0.0:5000/messages   -d \"recipient=0notanumber\"\nHTTP/1.0 400 BAD REQUEST\nContent-Type: application/json\nContent-Length: 86\nServer: Werkzeug/0.8.3 Python/2.7.3\nDate: Sun, 18 Nov 2012 20:03:34 GMT\n\n{\n  \"error\": \"'0notanumber' is an invalid recipient value: must match u'0[0-9]{10}'\"\n}\n```\n\n### Trying to create a message without all the required properties\n\n```bash\n$ curl -i -X POST    http://0.0.0.0:5000/messages -d \"recipient=012345678901\"HTTP/1.0 400 BAD REQUEST\nContent-Type: application/json\nContent-Length: 44\nServer: Werkzeug/0.8.3 Python/2.7.3\nDate: Sun, 18 Nov 2012 20:06:00 GMT\n\n{\n  \"error\": \"text is required in message\"\n}\n```\n\n### Trying to create a message in json with invalid data\n\n```bash\n$ curl -i -X POST    http://0.0.0.0:5000/messages  -d '{\"recipient\":\"01234567890\", \"text\":\"test}' -H \"Content-Type: application/json\"\nHTTP/1.0 400 BAD REQUEST\nContent-Type: application/json\nContent-Length: 90\nServer: Werkzeug/0.8.3 Python/2.7.3\nDate: Tue, 20 Nov 2012 00:23:05 GMT\n\n{\n  \"error\": \"Invalid data: Unterminated string starting at: line 1 column 35 (char 35)\"\n}\n```\n\n## Primary keys\n\nEach model needs a primary key.\nThere are 3 ways to define the primary key of the model:\n\nIf there is no `rel=self` link, an additional `id` (or appended with as many `_` as \nnecessary to make the name unique) attribute is created. This type of key is called *implicit* and can\nonly be set by the server (read only).\n\n\nIf there is a `rel=self` link and it contains a `{variable}` part, the variable name is used as the primary key.\n* If `variable` is the name of an existing property, this property is used as the primary key, and can be updated\n( *explicit key* )\n* Otherwise an *implicit* key is created using the `variable` name (stil read-only).\n\n### Example of an explicit key\n\nThis schema uses `isbn` as the explicit key. Instances can be created using a specific `isbn`, and its value\ncan be updated.\n\n```javascript\n...\n\t\"isbn\" : {\n\t    \"type\":\"string\",\n\t    \"required\":true,\n\t    \"pattern\":\"^\\\\d{12}[\\\\d|X]$\"\n\t}\n\n    },\n    \"links\" : [\n\t{\n\t    \"rel\":\"self\",\n\t    \"href\":\"books/{isbn}\"\n\t},\n...\n```\n\n### Example of implicit key\n\nThis schema defines an *implicit* key `order_id` (assuming no property is called `order_id`).\n```javascript\n...\n    \"links\" : [\n        {\n            \"rel\":\"self\",\n            \"href\":\"{order_id}\"\n        },\n...\n```\n\n# Dependencies\n\n## Optional\n\n### datagenerator, invaliddatagenerator and urlgenerator\n\nUse `rstr` hosted in a mercurial repo on bitbucket. Run `init.sh` in dependencies to fetch it.\nIf you don't have mercurial, `apt-get install mercurial` should help.\n\n### flasksqlalchemymodelgenerator and resourceserver\n\nflask-sqlalchemy is required, use flasksqlalchemy-requirements.txt with virtualenv\n\n### backbonemodelgenerator\n\njinja2 is required, comes with flask if you use the flasksqlalchemy-requirements.txt", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/hamstah/apitools", "keywords": null, "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "apitools", "package_url": "https://pypi.org/project/apitools/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/apitools/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/hamstah/apitools"}, "release_url": "https://pypi.org/project/apitools/0.1.4/", "requires_dist": null, "requires_python": null, "summary": "Tools to play with json-schema and rest apis", "version": "0.1.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            Tools to play with json-schemas defined APIs.<br><br>These tools are based on json-schema draft 3 from http://tools.ietf.org/html/draft-zyp-json-schema-03<br>Not all features of the schema are supported and probably won't be.<br>Handling of not supported feature varies between the different tools.<br><br>All these tools are proofs of concept and work in progress, they need more extensive testing and documentation.<br><br># datagenerator <br><br>Class to generate random values given a json-schema.  <br>Doesn't support all json-schema monstruousities, only a subset I find useful.  <br>See TODO.md for what is likely to be implemented next.  <br><br>## Examples<br><br>```python<br>from datagenerator import DataGenerator<br><br>generator = DataGenerator()<br>```<br><br>### Basic<br><br>Generate random values of each basic type using<br><br>```python<br>&gt;&gt;&gt; generator.random_value(\"string\")<br>'Olzq3LV'<br>&gt;&gt;&gt; generator.random_value(\"number\")<br>-6.675904074356879<br>&gt;&gt;&gt; generator.random_value(\"integer\")<br>30<br>&gt;&gt;&gt; generator.random_value(\"boolean\")<br>True<br><br>```<br><br>### Basic with constraints<br><br>`number`<br><br>```python<br>&gt;&gt;&gt; generator.random_value({\"type\":\"number\", \"minimum\":30})<br>32.34295327292445<br>&gt;&gt;&gt; generator.random_value({\"type\":\"number\", \"maximum\":30})<br>-35.80704939879546<br>&gt;&gt;&gt; generator.random_value({\"type\":\"number\", \"maximum\":30, \"minimum\":12})<br>16.45747265846327<br>```<br><br>`integer` supports `minimum` and `maximum` like `number` and more<br>```python<br>&gt;&gt;&gt; generator.random_value({\"type\":\"integer\", \"maximum\":30, \"divisibleBy\":4, \"minimum\":12})<br>24<br>&gt;&gt;&gt; generator.random_value({\"type\":\"integer\", \"maximum\":30, \"exclusiveMaximum\":True, \"minimum\":28})<br>29<br>```<br>(same for `exclusiveMinimum`)<br><br>`string` supports `minLength`, `maxLength`, `pattern` (ignores `minLength` and `maxLength` if `pattern` is used)<br>```python<br>&gt;&gt;&gt; generator.random_value({\"type\":\"string\", \"maxLength\":20, \"minLength\":15})<br>'VytPCEdAImX11188HU'<br>&gt;&gt;&gt; generator.random_value({\"type\":\"string\", \"pattern\":\"[0-9]{3}[a-zA-Z]{2,5}\"})<br>u'806FoNP'<br>```<br><br>`boolean` doesn't have any constraints.<br><br>### Arrays<br><br>Without constraints the array size will be picked the same way as a random `integer`.  <br>Each item in the array is generated using the default generator for the type given in `items`.<br>```python<br>&gt;&gt;&gt; generator.random_value({\"type\":\"array\", \"items\": {\"type\":\"string\"}})<br>[<br>\t'39yxcpvS5tfPf6O', <br>\t'sNDk7SlGNQstxxx', <br>\t'nPcRSD9yIP7j ', <br>\t'PWP7KQfjc1', <br>\t'tt6F6Z2YEp'<br>]<br>```<br><br>`minItems`, `maxItems` and `uniqueItems` are supported<br><br>The type of object in `items` can be anything that the generator knows about, either one of the basic types<br>or a user defined one available from the generator's schemas store. <br><br>```python<br>from schemasstore import SchemasStore<br><br>...<br>&gt;&gt;&gt; from schemasstore import SchemasStore<br>&gt;&gt;&gt; store = SchemasStore()<br>&gt;&gt;&gt; generator.schemas_store = store<br>&gt;&gt;&gt; store.add_schema({\"type\":\"integer\", \"name\":\"small_integer\", \"minimum\":0,\"maximum\":9})<br>True<br>&gt;&gt;&gt; generator.random_value({\"type\":\"array\", \"uniqueItems\":True, \"minItems\":10, \"items\":{\"type\":\"small_integer\"}})<br>[0, 7, 2, 5, 3, 6, 1, 4, 8, 9]<br>```<br><br>See [datagenerator](https://github.com/hamstah/apitools/blob/master/datagenerator.py) for other examples.<br><br>### Objects<br><br>Objects can be generated the same way as the other types.<br><br>Example generating [search_result.json](https://github.com/hamstah/apitools/blob/master/data/schemas/search_result.json)<br>```python<br>&gt;&gt;&gt; store.load_folder(\"data/schemas/\")<br>&gt;&gt;&gt; generator.random_value(\"search_result\")<br>{u'price': 21.980325774975253, u'name': 'wdvfXYrrt', u'reference': 26}<br>```<br><br>Generating arrays of objects is fine as well<br>```python<br>&gt;&gt;&gt; generator.random_value({\"type\":\"array\", \"maxItems\":3, \"minItems\":2, \"items\":{\"type\":\"search_result\"}})<br>[<br>    {u'price': 20.304440535786522, u'name': 'VUIgjaPbs', u'reference': 40}, <br>\t{u'price': 28.45387747055259, u'name': 'JTycBU1V78X1S', u'reference': 27}<br>]<br>```<br><br>Or generating objects with arrays of other objects in them, see<br>[search_resuts](https://github.com/hamstah/apitools/blob/master/data/schemas/search_results.json) <br>with an array of [search_result](https://github.com/hamstah/apitools/blob/master/data/schemas/search_result.json)<br>```python<br>&gt;&gt;&gt; generator.random_value(\"search_results\")<br>{<br>    u'total_results': 41, <br>\tu'total_pages': 26, <br>\tu'current_page': 33, <br>\tu'items_per_page': 27, <br>\tu'results': [<br>\t    {u'price': 26.218704680177446, u'name': 'B4p1Z1pOFQO', u'reference': 38}, <br>\t\t{u'price': 21.205089550441276, u'name': 'FQPHdLds', u'reference': 7}, <br>\t\t{u'price': 20.610536930894398, u'name': '8D862p1XVupP', u'reference': 38}, <br>\t\t{u'price': 9.543934434058526, u'name': 'PmqBA0e DIWisf', u'reference': 32}<br>\t]<br>}<br>```<br><br>### Schemas<br><br>Why not generate random schemas?<br>```python<br>&gt;&gt;&gt; r_schema = generator.random_schema()<br>&gt;&gt;&gt; r_schema<br>{<br>    'type': 'object', <br>\t'properties': {<br>\t    u'viYXjhu': {'required': False, 'type': 'boolean'}, <br>\t\tu'TO': {'required': False, 'type': 'string'}, <br>\t\tu'NTSd': {'required': False, 'type': 'string'}, <br>\t\tu'WjaL': {'required': False, 'type': 'string'}, <br>\t\tu'PtvhZ': {'required': False, 'type': 'boolean'}<br>\t}, <br>\t'name': u'zJllGkKosmocOVO'<br>}<br>```<br>And then generate an array of random values of it<br>```python<br>&gt;&gt;&gt; store.add_schema(r_schema)<br>True<br>&gt;&gt;&gt; generator.random_value({\"type\":\"array\", \"minItems\":1, \"maxItems\":3, \"items\":{\"type\":\"zJllGkKosmocOVO\"}})<br>[<br>\t{u'TO': 'jamKFpdwY'}, <br>\t{u'WjaL': '8LnibWUdsSI', u'PtvhZ': True}, <br>\t{}<br>]<br>```<br><br>## Notes on the generation<br><br>All the values are generated using the `random` module, so please don't use the generate values for anything<br>requiring reliable randomness == **don't use it to generate passwords**.<br><br>To generate the data, the generator has to limit the range of possible values, so the values generated don't<br>vary too wildly. The ranges are controlled by variables in `DataGenerator`. Feel free to tweak them, especially<br>if you need values that don't fall into those ranges without having to set both minimum and maximum on your <br>properties.<br><br>---<br><br># urlsgenerator<br><br>Class to generate links defined in the links section of a json-schema.<br><br>## Example<br><br>Generate links from [book.json](https://github.com/hamstah/apitools/blob/master/data/schemas/book.json)<br><br>Input<br>```javascript<br>...<br>\t\"isbn\" : {<br>\t    \"type\":\"string\",<br>\t    \"required\":true,<br>\t    \"pattern\":\"^\\\\d{12}(\\\\d|X)$\"<br>\t}<br><br>    },<br>    \"links\" : [<br>\t{<br>\t    \"rel\":\"self\",<br>\t    \"href\":\"books/{isbn}\"<br>\t},<br>\t{<br>\t    \"rel\":\"instances\",<br>\t    \"href\": \"books\"<br>\t}<br>    ]<br>...<br><br>```<br><br>Output<br>```python<br>{<br>    u'instances': [u'books'], <br>    u'self'     : [u'books/525259838909X']<br>}<br>```<br><br>`{isbn}` got replaced by a random value `525259838909X` satisfying the constraints on `isbn` (matches the regex).<br><br>---<br><br># invaliddatagenerator<br><br>Class to generate invalid data for a given schema<br><br>Basically does the opposite of datagenerator. WIP, needs documentation and examples.<br><br>---<br><br># modelgenerator<br><br>Base class to generate models from a schema, nothing too visible on its own, check `resourceserver`.<br><br>---<br><br># flasksqlalchemymodelgenerator<br><br>Generate SQLAlchemy models to be used with flask-sqlalchemy from a schema. Uses `modelgenerator`. <br>Used in `resourceserver` to store and query items.<br><br>---<br><br># backbonemodelgenerator<br><br>Generate models and collections for Backbone.js from a schema.  <br>The models generated use the primary key defined in the `rel=self` link or `id` by default.  <br>To be able to use collections, make sure your schema has a `rel=instances` link or `fetch` won't work.  <br><br>## Usage<br><br>```bash<br>$ python backbonemodelgenerator.py -h<br>Usage: backbonemodelgenerator.py jsonfile1 [jsonfile2]...<br><br>Options:<br>  -h, --help            show this help message and exit<br>  -t OUTPUT_TYPE, --type=OUTPUT_TYPE<br>                        Output type (js|wrapped|html)<br>```<br><br>## Output types<br><br>### js<br><br>Outputs only the js code for the models/collections<br><br>```bash<br>$ python backbonemodelgenerator.py -t js data/schemas/message.json<br><br>App.Models.Message = Backbone.Model.extend({<br>    urlRoot: '/messages',<br>    idAttribute: 'id'<br>});<br><br>App.Collections.Messages = Backbone.Collection.extend({<br>    model : App.Models.Message,<br>    url : \"/messages\"<br>});<br>```<br><br>### wrapped<br><br>Wraps the js code into `$(document).ready()`<br><br>```bash<br>$ python backbonemodelgenerator.py -t wrapped data/schemas/message.json<br><br>$(document).ready(function() {<br><br>    window.App = { Models : {}, Collections : {} };<br>    <br>    App.Models.Message = Backbone.Model.extend({<br>        urlRoot: '/messages',<br>        idAttribute: 'id'<br>    });<br>    <br>    App.Collections.Messages = Backbone.Collection.extend({<br>        model : App.Models.Message,<br>        url : \"/messages\"<br>    });<br><br>});<br>```<br><br>### html<br><br>Same as wrapped but generate a whole html page including jQuery, Backbone and Underscore to easily test.<br><br>## Example usage<br><br>### Setup<br><br>You can use it with resource server for example<br>```bash<br>$ mkdir static<br>$ python backbonemodelgenerator.py -t html data/schemas/message.json &gt; static/index.html<br>$ python resourceserver.py data/schemas/message.json<br>Added message<br> * Running on http://0.0.0.0:5000/<br>```<br><br>Now open your browser at http://0.0.0.0:5000/static/index.html<br>Open your js console to start playing<br><br>### Create a collection and fetch them<br><br>```javascript<br>var col = new App.Collections.Messages()<br>col.fetch()<br>```<br>You should see backbone talking to the resource server in the server shell<br>```bash<br>127.0.0.1 - - [20/Nov/2012 01:17:15] \"GET /messages HTTP/1.1\" 200 -<br>```<br><br>You can inspect the results using<br>```javascript<br>col.models<br>```<br><br>Using fetch() only works if your schema includes a link with `rel=instances`<br><br>### Create a new message<br><br>```javascript<br>var msg = new App.Models.Message({recipient:\"01234567890\", text:\"test message\"})<br>msg.attributes<br>```<br><br>At that point the message is not saved yet, you can verify by using<br>```javascript<br>msg.isNew()<br>```<br><br>You can save it on the server using <br>```javascript<br>msg.save()<br>```<br><br>You can verify that the message was sent to the server in the server shell<br>```bash<br>127.0.0.1 - - [20/Nov/2012 01:23:24] \"POST /messages HTTP/1.1\" 201 -<br>```<br><br>Now you should have an id for the message and it shouldn't be marked as new anymore.<br>```javascript<br>msg.id<br>msg.isNew()<br>```<br><br>### Fetch an existing message<br><br>Create a message with the `id` of the message to fetch<br>```javascript<br>var msg = new App.Models.Message({id: 3})<br>```<br><br>The message is not marked as new as it has an id.  <br>We can then fetch the actual message from the server using  <br>```javascript<br>msg.fetch()<br>msg.attributes()<br>```<br><br>You can see the query in the server shell again<br>```bash<br>127.0.0.1 - - [20/Nov/2012 01:25:41] \"PUT /messages/3 HTTP/1.1\" 200 -<br>```<br><br>### Update a message<br><br>Once you have a message object, you can update it using `save`.<br><br>```javascript<br>&gt; msg.attributes.recipient<br>\"01234567890\"<br>&gt; msg.save({recipient:\"00123456789\"})<br>&gt; msg.attributes.recipient<br>\"00123456789\"<br>```<br><br>This is done by doing a `PUT` on the server<br>```bash<br>127.0.0.1 - - [20/Nov/2012 01:33:35] \"PUT /messages/3 HTTP/1.1\" 200 -<br>```<br><br>### Delete a message<br><br>Simply use `destroy` on the object<br>```javascript<br>msg.destroy()<br>```<br><br>And see the `DELETE` happening on the server<br>```bash<br>127.0.0.1 - - [20/Nov/2012 01:34:48] \"DELETE /messages/3 HTTP/1.1\" 204 -<br>```<br><br>---<br><br># resourceserver<br><br>Class to implement the REST api of resources defined in a schema.  <br>Supports creation, update, retrieval, deletion, listing of instances and schema.  <br><br>## Usage<br><br>Run the server using<br>```bash<br>$ python resourceserver.py [jsonfile1, jsonfile2, ...]<br>```<br><br>## Example using data/schemas/message.json<br><br>```bash<br>$ python resourceserver.py data/schemas/message.json<br>Added message<br> * Running on http://0.0.0.0:5000/<br>```<br><br>### Create a new message<br><br>```bash<br>$ curl -i -X POST    http://0.0.0.0:5000/messages -d \"recipient=07771818335&amp;text=nice message\"<br>$ curl -i -X POST    http://0.0.0.0:5000/messages -d '{\"recipient\":\"01234567890\", \"text\":\"test\"}' \\<br>\t   -H \"Content-Type: application/json\"<br>HTTP/1.0 201 CREATED<br>Content-Type: application/json<br>Content-Length: 13<br>Location: http://0.0.0.0:5000/messages/2<br>Server: Werkzeug/0.8.3 Python/2.7.3<br>Date: Sun, 18 Nov 2012 19:28:56 GMT<br><br>{<br>  \"id\": 2<br>}<br>```<br><br>### List messages<br><br>```bash<br>$ curl -i -X GET     http://0.0.0.0:5000/messages<br>HTTP/1.0 200 OK<br>Content-Type: application/json<br>Content-Length: 126<br>Server: Werkzeug/0.8.3 Python/2.7.3<br>Date: Sun, 18 Nov 2012 19:32:09 GMT<br><br>[<br>  {\"text\": \"I &lt;/3 ninjas\", \"recipient\": \"07771818337\", \"id\": 1},<br>  {\"text\": \"nice message\", \"recipient\": \"07771818335\", \"id\": 2}<br>]<br>```<br><br>### Retrieve a message<br><br>```bash<br>$ curl -i -X GET     http://0.0.0.0:5000/messages/2<br>HTTP/1.0 200 OK<br>Content-Type: application/json<br>Content-Length: 71<br>Server: Werkzeug/0.8.3 Python/2.7.3<br>Date: Sun, 18 Nov 2012 19:35:42 GMT<br><br>{<br>  \"text\": \"nice message\",<br>  \"recipient\": \"07771818335\",<br>  \"id\": 2<br>}<br>```<br><br>### Get the json-schema of a message<br><br>```bash<br>$ curl -i -X OPTIONS http://0.0.0.0:5000/messages/2<br>HTTP/1.0 200 OK<br>Content-Type: application/json<br>Content-Length: 590<br>Server: Werkzeug/0.8.3 Python/2.7.3<br>Date: Sun, 18 Nov 2012 19:37:06 GMT<br><br>{<br>  \"description\": \"Simple message structure\",<br>  \"type\": \"object\",<br>  \"properties\": {<br>    \"text\": {<br>      \"required\": true, <br>      \"type\": \"string\", <br>      \"maxLength\": 140<br>    }, <br>    \"recipient\": {<br>      \"pattern\": \"0[0-9]{10}\", <br>      \"required\": true,<br>      \"type\": \"string\"<br>    },<br>    \"id\": {<br>      \"minimum\": 0,<br>      \"type\": \"integer\"<br>    }<br>  },<br>  \"links\": [<br>    {<br>      \"href\": \"/messages\",<br>      \"rel\": \"root\"<br>    },<br>    {<br>      \"href\": \"{id}\",<br>      \"rel\": \"self\"<br>    },<br>    {<br>      \"rel\": \"instances\"<br>    },<br>    {<br>      \"rel\": \"create\"<br>    }<br>  ],<br>  \"name\": \"message\"<br>}<br>```<br><br>### Update a message<br><br>Supports partial updates<br><br>```bash<br>$ curl -i -X PUT     http://0.0.0.0:5000/messages/2 -d 'recipient=07771818336'<br>$ curl -i -X PUT     http://0.0.0.0:5000/messages/1 -d '{\"text\":\"foo\"}' \\<br>          -H \"Content-Type: application/json\"<br>HTTP/1.0 200 OK<br>Content-Type: text/html; charset=utf-8<br>Content-Length: 0<br>Server: Werkzeug/0.8.3 Python/2.7.3<br>Date: Sun, 18 Nov 2012 19:38:02 GMT<br>```<br><br>### Delete a message<br><br>```bash<br>$ curl -i -X DELETE  http://0.0.0.0:5000/messages/2<br>HTTP/1.0 204 NO CONTENT<br>Content-Type: text/html; charset=utf-8<br>Content-Length: 0<br>Server: Werkzeug/0.8.3 Python/2.7.3<br>Date: Sun, 18 Nov 2012 19:38:38 GMT<br>```<br><br>## Errors examples<br><br>### Trying to set an implicit key<br><br>The message.json doesn't define an explicit primary key, but defines `id` as the key in the `rel=self` link.  <br>Each message then gets an additional `id` key managed by the server.  <br>Trying to set or update the `id` results in errors  <br><br>```bash<br>$ curl -i -X POST    http://0.0.0.0:5000/messages   -d \"recipient=07771818335&amp;text=nice message&amp;id=7\"<br>$ curl -i -X PUT     http://0.0.0.0:5000/messages/1 -d \"recipient=07771818335&amp;text=nice message&amp;id=3\"<br>HTTP/1.0 400 BAD REQUEST<br>Content-Type: application/json<br>Content-Length: 43<br>Server: Werkzeug/0.8.3 Python/2.7.3<br>Date: Sun, 18 Nov 2012 19:43:48 GMT<br><br>{<br>  \"error\": \"id is read only in message\"<br>}<br>```<br>### Trying to create or update unknown properties<br><br>```bash<br>$ curl -i -X POST    http://0.0.0.0:5000/messages   -d \"recipient=07771818335&amp;tet=test&amp;haxxy=foo\"<br>$ curl -i -X PUT     http://0.0.0.0:5000/messages/1 -d \"haxxy=foo\"<br>HTTP/1.0 400 BAD REQUEST<br>Content-Type: application/json<br>Content-Length: 57<br>Server: Werkzeug/0.8.3 Python/2.7.3<br>Date: Sun, 18 Nov 2012 19:56:19 GMT<br><br>{<br>  \"error\": \"message does not have a 'haxxy' property\"<br>}<br>```<br><br>### Trying to create or update properties with values not respecting constraints<br><br>```bash<br>$ curl -i -X PUT     http://0.0.0.0:5000/messages/1 -d \"recipient=0notanumber&amp;text=nice message\"<br>$ curl -i -X POST    http://0.0.0.0:5000/messages   -d \"recipient=0notanumber\"<br>HTTP/1.0 400 BAD REQUEST<br>Content-Type: application/json<br>Content-Length: 86<br>Server: Werkzeug/0.8.3 Python/2.7.3<br>Date: Sun, 18 Nov 2012 20:03:34 GMT<br><br>{<br>  \"error\": \"'0notanumber' is an invalid recipient value: must match u'0[0-9]{10}'\"<br>}<br>```<br><br>### Trying to create a message without all the required properties<br><br>```bash<br>$ curl -i -X POST    http://0.0.0.0:5000/messages -d \"recipient=012345678901\"HTTP/1.0 400 BAD REQUEST<br>Content-Type: application/json<br>Content-Length: 44<br>Server: Werkzeug/0.8.3 Python/2.7.3<br>Date: Sun, 18 Nov 2012 20:06:00 GMT<br><br>{<br>  \"error\": \"text is required in message\"<br>}<br>```<br><br>### Trying to create a message in json with invalid data<br><br>```bash<br>$ curl -i -X POST    http://0.0.0.0:5000/messages  -d '{\"recipient\":\"01234567890\", \"text\":\"test}' -H \"Content-Type: application/json\"<br>HTTP/1.0 400 BAD REQUEST<br>Content-Type: application/json<br>Content-Length: 90<br>Server: Werkzeug/0.8.3 Python/2.7.3<br>Date: Tue, 20 Nov 2012 00:23:05 GMT<br><br>{<br>  \"error\": \"Invalid data: Unterminated string starting at: line 1 column 35 (char 35)\"<br>}<br>```<br><br>## Primary keys<br><br>Each model needs a primary key.<br>There are 3 ways to define the primary key of the model:<br><br>If there is no `rel=self` link, an additional `id` (or appended with as many `_` as <br>necessary to make the name unique) attribute is created. This type of key is called *implicit* and can<br>only be set by the server (read only).<br><br><br>If there is a `rel=self` link and it contains a `{variable}` part, the variable name is used as the primary key.<br>* If `variable` is the name of an existing property, this property is used as the primary key, and can be updated<br>( *explicit key* )<br>* Otherwise an *implicit* key is created using the `variable` name (stil read-only).<br><br>### Example of an explicit key<br><br>This schema uses `isbn` as the explicit key. Instances can be created using a specific `isbn`, and its value<br>can be updated.<br><br>```javascript<br>...<br>\t\"isbn\" : {<br>\t    \"type\":\"string\",<br>\t    \"required\":true,<br>\t    \"pattern\":\"^\\\\d{12}[\\\\d|X]$\"<br>\t}<br><br>    },<br>    \"links\" : [<br>\t{<br>\t    \"rel\":\"self\",<br>\t    \"href\":\"books/{isbn}\"<br>\t},<br>...<br>```<br><br>### Example of implicit key<br><br>This schema defines an *implicit* key `order_id` (assuming no property is called `order_id`).<br>```javascript<br>...<br>    \"links\" : [<br>        {<br>            \"rel\":\"self\",<br>            \"href\":\"{order_id}\"<br>        },<br>...<br>```<br><br># Dependencies<br><br>## Optional<br><br>### datagenerator, invaliddatagenerator and urlgenerator<br><br>Use `rstr` hosted in a mercurial repo on bitbucket. Run `init.sh` in dependencies to fetch it.<br>If you don't have mercurial, `apt-get install mercurial` should help.<br><br>### flasksqlalchemymodelgenerator and resourceserver<br><br>flask-sqlalchemy is required, use flasksqlalchemy-requirements.txt with virtualenv<br><br>### backbonemodelgenerator<br><br>jinja2 is required, comes with flask if you use the flasksqlalchemy-requirements.txt\n          </div>"}, "last_serial": 1044232, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "259592a411dfacace841fbc8159d6c5c", "sha256": "f84ef225407b1578e2ee201d2f3f2c107fbbc8f6dc7fdf4f36d99ab22f644099"}, "downloads": -1, "filename": "apitools-0.1.0.tar.gz", "has_sig": false, "md5_digest": "259592a411dfacace841fbc8159d6c5c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19772, "upload_time": "2013-02-13T12:02:51", "upload_time_iso_8601": "2013-02-13T12:02:51.756269Z", "url": "https://files.pythonhosted.org/packages/19/6f/55c6869905e92c87ec365715a8b5086dd72aab31456563d56cd88aa1e07f/apitools-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "f8cb42d06fe2048668b6bd757d241fc4", "sha256": "3a3e4251b81920d34a46395903df25ce5a2ad71692ac469ffe6b745440a4f2fd"}, "downloads": -1, "filename": "apitools-0.1.1.tar.gz", "has_sig": false, "md5_digest": "f8cb42d06fe2048668b6bd757d241fc4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20239, "upload_time": "2013-02-13T12:24:18", "upload_time_iso_8601": "2013-02-13T12:24:18.390693Z", "url": "https://files.pythonhosted.org/packages/61/04/249dadab75a828b3ce41ad4b2a87890e7a6453f4cce18fc6e75e49c1cdc8/apitools-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "027c7a96847a830117287d85265c744e", "sha256": "0a8a0a7913eb84f40edba90457bcc7ef9d4220c4236bb4025f76976edb2c73de"}, "downloads": -1, "filename": "apitools-0.1.2.tar.gz", "has_sig": false, "md5_digest": "027c7a96847a830117287d85265c744e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20167, "upload_time": "2013-08-06T09:52:04", "upload_time_iso_8601": "2013-08-06T09:52:04.875187Z", "url": "https://files.pythonhosted.org/packages/9e/73/e1e512116604b2fd9e1fcb41e13fd3b3f10051cf408819b9151f8a1f5c5a/apitools-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "a7cc24cebfb902839caf061c06e11520", "sha256": "f95c66da5a2c2dc682f7d8c96c9836fba34185c819b85c9bebd4e2db12da1ea5"}, "downloads": -1, "filename": "apitools-0.1.3.tar.gz", "has_sig": false, "md5_digest": "a7cc24cebfb902839caf061c06e11520", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20006, "upload_time": "2013-08-30T15:32:07", "upload_time_iso_8601": "2013-08-30T15:32:07.406195Z", "url": "https://files.pythonhosted.org/packages/02/d5/22128a2dff4cba60116171ffa7aa72fc2d20ec622495615f6811746e8683/apitools-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "2cf02c9bea935a1b170d8b3b8795684c", "sha256": "934f00ee57a4723b853dd572dc9ba4ef765a6e1390d739b4b3187ba3646311b9"}, "downloads": -1, "filename": "apitools-0.1.4.tar.gz", "has_sig": false, "md5_digest": "2cf02c9bea935a1b170d8b3b8795684c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20727, "upload_time": "2014-03-28T10:45:29", "upload_time_iso_8601": "2014-03-28T10:45:29.974354Z", "url": "https://files.pythonhosted.org/packages/ea/14/0c9fd627e3628ca4ffd192be0b01c4887f78c5ca45afcf95e9ff44fd5548/apitools-0.1.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "2cf02c9bea935a1b170d8b3b8795684c", "sha256": "934f00ee57a4723b853dd572dc9ba4ef765a6e1390d739b4b3187ba3646311b9"}, "downloads": -1, "filename": "apitools-0.1.4.tar.gz", "has_sig": false, "md5_digest": "2cf02c9bea935a1b170d8b3b8795684c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20727, "upload_time": "2014-03-28T10:45:29", "upload_time_iso_8601": "2014-03-28T10:45:29.974354Z", "url": "https://files.pythonhosted.org/packages/ea/14/0c9fd627e3628ca4ffd192be0b01c4887f78c5ca45afcf95e9ff44fd5548/apitools-0.1.4.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:17:44 2020"}