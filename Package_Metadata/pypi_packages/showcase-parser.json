{"info": {"author": "Yuichiroh Matsubayashi and Shun Kiyono", "author_email": "y-matsu@ecei.tohoku.ac.jp", "bugtrack_url": null, "classifiers": [], "description": "Copyright (c) 2018 Inui-Suzuki Laboratory\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\nDescription: # Showcase: Japanese Predicate-Argument Structure (PAS) analyzer\n        \n        Showcase is a Pytorch implementation of the Japanese Predicate-Argument Structure (PAS) analyser presented in the paper of Matsubayashi & Inui (2018) with some improvements. \n        Given a input sentence, Showcase identifies verbal and nominal predicates in the sentence and detects their nominative (\u304c), accusative (\u3092), and dative (\u306b) case arguments. \n        The output case labels are based on the label definition of the NAIST Text Corpus where case markers in different voices are generalized into the case markers of an active voice.\n        \n        [![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n        \n        ## Usage\n        \n        ### Pass input as an argument\n        \n        -`echo '\u4eca\u65e5\u306f\u96e8\u304c\u964d\u308b' | showcase`\n        \n        ### Pass input from STDIN\n        \n        `cat example.txt | showcase`\n        \n        ### Input file format\n         \n        - One raw sentence per line.\n        - A blank line can be used to segment a document. (Showcase just resets an argument index to zero.)\n        \n        \n        ## Requirements\n        \n        - Python 3.5 (or higher)\n            - We do not support Python 2\n        - [CaboCha](https://taku910.github.io/cabocha/) with JUMAN dict\n        - PyTorch 0.4.0\n        \n        ## Instllation\n        \n        ### Step 1. Install Showcase\n        \n        `pip install showcase-parser`\n        \n        ### Step 2: Download Resources\n        \n        Resources include following files:\n        \n        - 10 Model files for predicate detector (`pred_model_0{0..9}.h5`)\n        - 10 Model files for argument detector (`arg_model_0{0..9}.h5`)\n        - Word embedding Matrix (`word_embedding.npz`)\n        - POS embedding Matrix (`pos_embedding.npz`)\n        - Word index file (`word.index`)\n        - Part-of-Speech tag index file (`pos.index`)\n        \n        Resources are all available at [Google Drive](https://drive.google.com/drive/folders/1AK_oWgx1jd5cF2QAGv--r63ky0dgd52C?usp=sharing).\n        \n        - train/*.h5: models trained with the training set described in the paper.\n        - train-test/*.h5:  models trained with the training and test sets.\n        \n        ### Step 3: Create and edit config.json\n        \n        Run `showcase setup` to create `config.json` file in `$HOME/.config/showcase`.\n        \n        Then edit `config.json` and specify valid paths for:\n        \n        - Resources downloaded in Step 2\n        - CaboCha and its JUMAN dictionary\n        \n        Original `config.json` can be found at `showcase/data/config.json` of this repo.\n        \n        You may specify path to `config.json` as follows:\n        \n        `showcase -c /path/to/config/config.json`\n        \n        Note that the apporopriate thresholds (hyperparameters) for arguments differ for each model. \n        The thresholds for the provided models are described in the sample config file in each Google Drive directory.  \n        \n        ## (Re-)training\n        TBA\n        \n        ### Step1: Train word2vec\n        TBA\n        \n        ### Step2: Train model\n        TBA\n        \n        ### Step3: Convert word2vec\n        \n        - run `get_vocab_from_word2vec.py` and `convert_word2vec_to_npy.py`\n        \n        ## Citation\n        \n        ```\n        @InProceedings{matsubayashi:2018:coling,\n          author    = {Matsubayashi, Yuichiroh and Inui, Kentaro},\n          title     = {Distance-Free Modeling of Multi-Predicate Interactions in End-to-End Japanese Predicate Argument Structure Analysis},\n          booktitle = {Proceedings of the 27th International Conference on Computational Linguistics (COLING)},\n          year      = {2018},\n        }\n        ```\n        \nPlatform: UNKNOWN\nClassifier: Programming Language :: Python :: 3.5\nProvides-Extra: test\nProvides-Extra: docs\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/cl-tohoku/showcase", "keywords": "", "license": "MIT License", "maintainer": "", "maintainer_email": "", "name": "showcase-parser", "package_url": "https://pypi.org/project/showcase-parser/", "platform": "", "project_url": "https://pypi.org/project/showcase-parser/", "project_urls": {"Homepage": "https://github.com/cl-tohoku/showcase"}, "release_url": "https://pypi.org/project/showcase-parser/0.0.1/", "requires_dist": ["logzero", "numpy", "torch (==0.4.0)", "torchvision", "tqdm", "commonmark (==0.5.4); extra == 'docs'", "recommonmark; extra == 'docs'", "sphinx; extra == 'docs'", "sphinx-fontawesome; extra == 'docs'", "sphinx-rtd-theme; extra == 'docs'", "pytest; extra == 'test'"], "requires_python": "", "summary": "Japanese Predicate-Argument Structure Analyzer", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            Copyright (c) 2018 Inui-Suzuki Laboratory<br><br>Permission is hereby granted, free of charge, to any person obtaining a copy<br>of this software and associated documentation files (the \"Software\"), to deal<br>in the Software without restriction, including without limitation the rights<br>to use, copy, modify, merge, publish, distribute, sublicense, and/or sell<br>copies of the Software, and to permit persons to whom the Software is<br>furnished to do so, subject to the following conditions:<br><br>The above copyright notice and this permission notice shall be included in all<br>copies or substantial portions of the Software.<br><br>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR<br>IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,<br>FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE<br>AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER<br>LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,<br>OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE<br>SOFTWARE.<br><br>Description: # Showcase: Japanese Predicate-Argument Structure (PAS) analyzer<br>        <br>        Showcase is a Pytorch implementation of the Japanese Predicate-Argument Structure (PAS) analyser presented in the paper of Matsubayashi &amp; Inui (2018) with some improvements. <br>        Given a input sentence, Showcase identifies verbal and nominal predicates in the sentence and detects their nominative (\u304c), accusative (\u3092), and dative (\u306b) case arguments. <br>        The output case labels are based on the label definition of the NAIST Text Corpus where case markers in different voices are generalized into the case markers of an active voice.<br>        <br>        [![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)<br>        <br>        ## Usage<br>        <br>        ### Pass input as an argument<br>        <br>        -`echo '\u4eca\u65e5\u306f\u96e8\u304c\u964d\u308b' | showcase`<br>        <br>        ### Pass input from STDIN<br>        <br>        `cat example.txt | showcase`<br>        <br>        ### Input file format<br>         <br>        - One raw sentence per line.<br>        - A blank line can be used to segment a document. (Showcase just resets an argument index to zero.)<br>        <br>        <br>        ## Requirements<br>        <br>        - Python 3.5 (or higher)<br>            - We do not support Python 2<br>        - [CaboCha](https://taku910.github.io/cabocha/) with JUMAN dict<br>        - PyTorch 0.4.0<br>        <br>        ## Instllation<br>        <br>        ### Step 1. Install Showcase<br>        <br>        `pip install showcase-parser`<br>        <br>        ### Step 2: Download Resources<br>        <br>        Resources include following files:<br>        <br>        - 10 Model files for predicate detector (`pred_model_0{0..9}.h5`)<br>        - 10 Model files for argument detector (`arg_model_0{0..9}.h5`)<br>        - Word embedding Matrix (`word_embedding.npz`)<br>        - POS embedding Matrix (`pos_embedding.npz`)<br>        - Word index file (`word.index`)<br>        - Part-of-Speech tag index file (`pos.index`)<br>        <br>        Resources are all available at [Google Drive](https://drive.google.com/drive/folders/1AK_oWgx1jd5cF2QAGv--r63ky0dgd52C?usp=sharing).<br>        <br>        - train/*.h5: models trained with the training set described in the paper.<br>        - train-test/*.h5:  models trained with the training and test sets.<br>        <br>        ### Step 3: Create and edit config.json<br>        <br>        Run `showcase setup` to create `config.json` file in `$HOME/.config/showcase`.<br>        <br>        Then edit `config.json` and specify valid paths for:<br>        <br>        - Resources downloaded in Step 2<br>        - CaboCha and its JUMAN dictionary<br>        <br>        Original `config.json` can be found at `showcase/data/config.json` of this repo.<br>        <br>        You may specify path to `config.json` as follows:<br>        <br>        `showcase -c /path/to/config/config.json`<br>        <br>        Note that the apporopriate thresholds (hyperparameters) for arguments differ for each model. <br>        The thresholds for the provided models are described in the sample config file in each Google Drive directory.  <br>        <br>        ## (Re-)training<br>        TBA<br>        <br>        ### Step1: Train word2vec<br>        TBA<br>        <br>        ### Step2: Train model<br>        TBA<br>        <br>        ### Step3: Convert word2vec<br>        <br>        - run `get_vocab_from_word2vec.py` and `convert_word2vec_to_npy.py`<br>        <br>        ## Citation<br>        <br>        ```<br>        @InProceedings{matsubayashi:2018:coling,<br>          author    = {Matsubayashi, Yuichiroh and Inui, Kentaro},<br>          title     = {Distance-Free Modeling of Multi-Predicate Interactions in End-to-End Japanese Predicate Argument Structure Analysis},<br>          booktitle = {Proceedings of the 27th International Conference on Computational Linguistics (COLING)},<br>          year      = {2018},<br>        }<br>        ```<br>        <br>Platform: UNKNOWN<br>Classifier: Programming Language :: Python :: 3.5<br>Provides-Extra: test<br>Provides-Extra: docs<br>\n          </div>"}, "last_serial": 4002477, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "8a38b61b1651448623c7f9902f0b44e0", "sha256": "a41e0f6219404d7e46ac364f4f1c47f7904dab1f216cc2b3e5023d22263ff6db"}, "downloads": -1, "filename": "showcase_parser-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "8a38b61b1651448623c7f9902f0b44e0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 34885, "upload_time": "2018-06-26T04:46:23", "upload_time_iso_8601": "2018-06-26T04:46:23.213723Z", "url": "https://files.pythonhosted.org/packages/34/77/ec567f66681bcb3b5998a5f848bb0a10e2f2a6fdffd8ef68e5f051591e8f/showcase_parser-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "96ee57a2df0b6b06c083af78f4e46f0a", "sha256": "bb09ae7dd535ad73a59aaec28495016403fbbd2522223fc48579ca731af7dcf1"}, "downloads": -1, "filename": "showcase-parser-0.0.1.tar.gz", "has_sig": false, "md5_digest": "96ee57a2df0b6b06c083af78f4e46f0a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 26528, "upload_time": "2018-06-26T04:46:24", "upload_time_iso_8601": "2018-06-26T04:46:24.730838Z", "url": "https://files.pythonhosted.org/packages/73/b0/6bb7a28ba8f9f2d674febdce7e7a28ae8874324eb2f881048e3664c3a974/showcase-parser-0.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "8a38b61b1651448623c7f9902f0b44e0", "sha256": "a41e0f6219404d7e46ac364f4f1c47f7904dab1f216cc2b3e5023d22263ff6db"}, "downloads": -1, "filename": "showcase_parser-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "8a38b61b1651448623c7f9902f0b44e0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 34885, "upload_time": "2018-06-26T04:46:23", "upload_time_iso_8601": "2018-06-26T04:46:23.213723Z", "url": "https://files.pythonhosted.org/packages/34/77/ec567f66681bcb3b5998a5f848bb0a10e2f2a6fdffd8ef68e5f051591e8f/showcase_parser-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "96ee57a2df0b6b06c083af78f4e46f0a", "sha256": "bb09ae7dd535ad73a59aaec28495016403fbbd2522223fc48579ca731af7dcf1"}, "downloads": -1, "filename": "showcase-parser-0.0.1.tar.gz", "has_sig": false, "md5_digest": "96ee57a2df0b6b06c083af78f4e46f0a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 26528, "upload_time": "2018-06-26T04:46:24", "upload_time_iso_8601": "2018-06-26T04:46:24.730838Z", "url": "https://files.pythonhosted.org/packages/73/b0/6bb7a28ba8f9f2d674febdce7e7a28ae8874324eb2f881048e3664c3a974/showcase-parser-0.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:12:35 2020"}