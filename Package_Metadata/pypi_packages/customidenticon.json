{"info": {"author": "LexSerest", "author_email": "lexserest@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "# CustomIdenticon\n\n![image](https://user-images.githubusercontent.com/22620605/53684108-2c1c3180-3d1a-11e9-84ca-64547fb6ad51.png)\n\nPython library for generate a variety of identicons. \n\n[![image](https://travis-ci.org/LexSerest/customidenticon.svg?branch=master)](https://travis-ci.org/LexSerest/customidenticon)\n\n## Features\n\n- 3 different types of identicons\n- change the final image size (size of elements, number of elements)\n- change border size\n- change background color \n- change the transparency of elements\n- change the output format (PNG, JPEG, etc.)\n- choice of hashing algorithm (including your own)\n\n\n## Installation\n\n`pip install customidenticon`\n\n## Usage\nEnd image size = size * block_size + border * 2\n```python\nimport customidenticon\nidenticon = customidenticon.create(\n    \"Test data\",            # Data\n    type=\"pixels\",          # Type of algorithm (pixels, blocks or layers)\n    format=\"png\",           # Output format\n    salt=\"\",                # salt for more variants\n    background=\"#f0f0f0\",   # background color\n    block_visibility=140,   # transparency of elements in the image (0-255)\n    block_size=30,          # size of elements (px)\n    border=25,              # border (px)\n    size=5,                 # number of elements\n    hash_func=None          # hash function (auto)\n)\n\n```\n\n### Save \n```python\nimport customidenticon\nidenticon = customidenticon.create(\"Test data\", size=5)\n# identicon = b\"\\x89PNG\\r\\n\\x1a\\n\\x00\\x00\\x00...\"\n\n# save to file\nwith open(\"identicon.png\", \"wb\") as f:\n    f.write(identicon)\n\n# to image\nimport io\nfrom PIL import Image\nimage = Image.open(io.BytesIO(identicon))\n```\n\n## Hash algorithm\nUse `hashlib` for change algorithm\n```python\nimport hashlib\nimport customidenticon\nidenticon = customidenticon.create(\"Test data\", hash_func=hashlib.sha3_256)\n```\nExample custom hash algorithm\n```python\nimport customidenticon\nclass MySuperHashAlgorithm:\n    def __init__(self, *args):\n        pass\n    def hexdigest(self):\n        return \"0\"*200\n\nidenticon = customidenticon.create(\"Test data\", hash_func=MySuperHashAlgorithm)\n```\n\n## Examples\n\n```python\nimport customidenticon\n# Create github-like (5x5)\nidenticon1 = customidenticon.create(\"Test\") # 200x200px (default for all)\n# or\nidenticon1 = customidenticon.create(\"Test\", type=\"pixels\") \n\n# Create \"pixels\" type (6x6)\n# End image size 200x200px (6 * 25 + 25 * 2)\nidenticon2 = customidenticon.create(\"Test\", size=6, block_size=25) \n\n# Create \"layers\" type (3 layer)\n# End image size 200x200px (default size = 3 and block_size = 50)\nidenticon4 = customidenticon.create(\"Test\", type=\"layers\")\n\n# Create \"layers\" type (8 layer)\n# End image size 200x200px (8 * 20 + 20 * 2)\nidenticon5 = customidenticon.create(\"Test\", type=\"layers\", size=8, block_size=20, border=20)\n\n# Create \"blocks\" type (3x3) (200x200px)\nidenticon6 = customidenticon.create(\"Test\", type=\"block\", block_visibility=100)\n```\n\n\n##### Result \n![image](https://user-images.githubusercontent.com/22620605/53685533-0c423900-3d2d-11e9-89e0-e3cc7bfa7548.png)\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/lexserest/customidenticon", "keywords": "identicon image avatar profile github custom customidenticon", "license": "MIT", "maintainer": "LexSerest", "maintainer_email": "lexserest@gmail.com", "name": "customidenticon", "package_url": "https://pypi.org/project/customidenticon/", "platform": "", "project_url": "https://pypi.org/project/customidenticon/", "project_urls": {"Homepage": "https://github.com/lexserest/customidenticon"}, "release_url": "https://pypi.org/project/customidenticon/0.1.5/", "requires_dist": ["pillow"], "requires_python": "", "summary": "Python3 library for generate a variety of identicons", "version": "0.1.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>CustomIdenticon</h1>\n<p><img alt=\"image\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7c185024fb10f50538e2c7592a1a3b213168dd0b/68747470733a2f2f757365722d696d616765732e67697468756275736572636f6e74656e742e636f6d2f32323632303630352f35333638343130382d32633163333138302d336431612d313165392d383463612d3634353437666236616435312e706e67\"></p>\n<p>Python library for generate a variety of identicons.</p>\n<p><a href=\"https://travis-ci.org/LexSerest/customidenticon\" rel=\"nofollow\"><img alt=\"image\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ba279edb30461af6aeffed67ff404b107217da1c/68747470733a2f2f7472617669732d63692e6f72672f4c65785365726573742f637573746f6d6964656e7469636f6e2e7376673f6272616e63683d6d6173746572\"></a></p>\n<h2>Features</h2>\n<ul>\n<li>3 different types of identicons</li>\n<li>change the final image size (size of elements, number of elements)</li>\n<li>change border size</li>\n<li>change background color</li>\n<li>change the transparency of elements</li>\n<li>change the output format (PNG, JPEG, etc.)</li>\n<li>choice of hashing algorithm (including your own)</li>\n</ul>\n<h2>Installation</h2>\n<p><code>pip install customidenticon</code></p>\n<h2>Usage</h2>\n<p>End image size = size * block_size + border * 2</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">customidenticon</span>\n<span class=\"n\">identicon</span> <span class=\"o\">=</span> <span class=\"n\">customidenticon</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span>\n    <span class=\"s2\">\"Test data\"</span><span class=\"p\">,</span>            <span class=\"c1\"># Data</span>\n    <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"s2\">\"pixels\"</span><span class=\"p\">,</span>          <span class=\"c1\"># Type of algorithm (pixels, blocks or layers)</span>\n    <span class=\"nb\">format</span><span class=\"o\">=</span><span class=\"s2\">\"png\"</span><span class=\"p\">,</span>           <span class=\"c1\"># Output format</span>\n    <span class=\"n\">salt</span><span class=\"o\">=</span><span class=\"s2\">\"\"</span><span class=\"p\">,</span>                <span class=\"c1\"># salt for more variants</span>\n    <span class=\"n\">background</span><span class=\"o\">=</span><span class=\"s2\">\"#f0f0f0\"</span><span class=\"p\">,</span>   <span class=\"c1\"># background color</span>\n    <span class=\"n\">block_visibility</span><span class=\"o\">=</span><span class=\"mi\">140</span><span class=\"p\">,</span>   <span class=\"c1\"># transparency of elements in the image (0-255)</span>\n    <span class=\"n\">block_size</span><span class=\"o\">=</span><span class=\"mi\">30</span><span class=\"p\">,</span>          <span class=\"c1\"># size of elements (px)</span>\n    <span class=\"n\">border</span><span class=\"o\">=</span><span class=\"mi\">25</span><span class=\"p\">,</span>              <span class=\"c1\"># border (px)</span>\n    <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">,</span>                 <span class=\"c1\"># number of elements</span>\n    <span class=\"n\">hash_func</span><span class=\"o\">=</span><span class=\"kc\">None</span>          <span class=\"c1\"># hash function (auto)</span>\n<span class=\"p\">)</span>\n</pre>\n<h3>Save</h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">customidenticon</span>\n<span class=\"n\">identicon</span> <span class=\"o\">=</span> <span class=\"n\">customidenticon</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"s2\">\"Test data\"</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"c1\"># identicon = b\"\\x89PNG\\r\\n\\x1a\\n\\x00\\x00\\x00...\"</span>\n\n<span class=\"c1\"># save to file</span>\n<span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s2\">\"identicon.png\"</span><span class=\"p\">,</span> <span class=\"s2\">\"wb\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n    <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">identicon</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># to image</span>\n<span class=\"kn\">import</span> <span class=\"nn\">io</span>\n<span class=\"kn\">from</span> <span class=\"nn\">PIL</span> <span class=\"kn\">import</span> <span class=\"n\">Image</span>\n<span class=\"n\">image</span> <span class=\"o\">=</span> <span class=\"n\">Image</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"n\">io</span><span class=\"o\">.</span><span class=\"n\">BytesIO</span><span class=\"p\">(</span><span class=\"n\">identicon</span><span class=\"p\">))</span>\n</pre>\n<h2>Hash algorithm</h2>\n<p>Use <code>hashlib</code> for change algorithm</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">hashlib</span>\n<span class=\"kn\">import</span> <span class=\"nn\">customidenticon</span>\n<span class=\"n\">identicon</span> <span class=\"o\">=</span> <span class=\"n\">customidenticon</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"s2\">\"Test data\"</span><span class=\"p\">,</span> <span class=\"n\">hash_func</span><span class=\"o\">=</span><span class=\"n\">hashlib</span><span class=\"o\">.</span><span class=\"n\">sha3_256</span><span class=\"p\">)</span>\n</pre>\n<p>Example custom hash algorithm</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">customidenticon</span>\n<span class=\"k\">class</span> <span class=\"nc\">MySuperHashAlgorithm</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">):</span>\n        <span class=\"k\">pass</span>\n    <span class=\"k\">def</span> <span class=\"nf\">hexdigest</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"s2\">\"0\"</span><span class=\"o\">*</span><span class=\"mi\">200</span>\n\n<span class=\"n\">identicon</span> <span class=\"o\">=</span> <span class=\"n\">customidenticon</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"s2\">\"Test data\"</span><span class=\"p\">,</span> <span class=\"n\">hash_func</span><span class=\"o\">=</span><span class=\"n\">MySuperHashAlgorithm</span><span class=\"p\">)</span>\n</pre>\n<h2>Examples</h2>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">customidenticon</span>\n<span class=\"c1\"># Create github-like (5x5)</span>\n<span class=\"n\">identicon1</span> <span class=\"o\">=</span> <span class=\"n\">customidenticon</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"s2\">\"Test\"</span><span class=\"p\">)</span> <span class=\"c1\"># 200x200px (default for all)</span>\n<span class=\"c1\"># or</span>\n<span class=\"n\">identicon1</span> <span class=\"o\">=</span> <span class=\"n\">customidenticon</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"s2\">\"Test\"</span><span class=\"p\">,</span> <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"s2\">\"pixels\"</span><span class=\"p\">)</span> \n\n<span class=\"c1\"># Create \"pixels\" type (6x6)</span>\n<span class=\"c1\"># End image size 200x200px (6 * 25 + 25 * 2)</span>\n<span class=\"n\">identicon2</span> <span class=\"o\">=</span> <span class=\"n\">customidenticon</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"s2\">\"Test\"</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"n\">block_size</span><span class=\"o\">=</span><span class=\"mi\">25</span><span class=\"p\">)</span> \n\n<span class=\"c1\"># Create \"layers\" type (3 layer)</span>\n<span class=\"c1\"># End image size 200x200px (default size = 3 and block_size = 50)</span>\n<span class=\"n\">identicon4</span> <span class=\"o\">=</span> <span class=\"n\">customidenticon</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"s2\">\"Test\"</span><span class=\"p\">,</span> <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"s2\">\"layers\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Create \"layers\" type (8 layer)</span>\n<span class=\"c1\"># End image size 200x200px (8 * 20 + 20 * 2)</span>\n<span class=\"n\">identicon5</span> <span class=\"o\">=</span> <span class=\"n\">customidenticon</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"s2\">\"Test\"</span><span class=\"p\">,</span> <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"s2\">\"layers\"</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"n\">block_size</span><span class=\"o\">=</span><span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"n\">border</span><span class=\"o\">=</span><span class=\"mi\">20</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Create \"blocks\" type (3x3) (200x200px)</span>\n<span class=\"n\">identicon6</span> <span class=\"o\">=</span> <span class=\"n\">customidenticon</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"s2\">\"Test\"</span><span class=\"p\">,</span> <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"s2\">\"block\"</span><span class=\"p\">,</span> <span class=\"n\">block_visibility</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">)</span>\n</pre>\n<h5>Result</h5>\n<p><img alt=\"image\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0ce8c3337251d2d26bfaae7948d281fc77d19e94/68747470733a2f2f757365722d696d616765732e67697468756275736572636f6e74656e742e636f6d2f32323632303630352f35333638353533332d30633432333930302d336432642d313165392d383965302d6533636337626661373534382e706e67\"></p>\n\n          </div>"}, "last_serial": 4951092, "releases": {"0.1.2": [{"comment_text": "", "digests": {"md5": "431f58db8d4d538f1476e718970d3e13", "sha256": "82144470b5d509dbd8f1bbe62239e45f42c2c9212d64611d3d2f085ee17367ca"}, "downloads": -1, "filename": "customidenticon-0.1.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "431f58db8d4d538f1476e718970d3e13", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4675, "upload_time": "2019-03-02T19:15:56", "upload_time_iso_8601": "2019-03-02T19:15:56.695138Z", "url": "https://files.pythonhosted.org/packages/ba/ba/f8307467eb81df9512d7bea59a1ccf8072d0c4cf8a7e54e2505536e50245/customidenticon-0.1.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8427db39feba1fa221c04f9ed43ba56a", "sha256": "4a2331bde85dfb3ca79a3b928d0f84da7c68c7e64c1ba18729ae1e1256e39c48"}, "downloads": -1, "filename": "customidenticon-0.1.2.tar.gz", "has_sig": false, "md5_digest": "8427db39feba1fa221c04f9ed43ba56a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3890, "upload_time": "2019-03-02T19:15:58", "upload_time_iso_8601": "2019-03-02T19:15:58.659158Z", "url": "https://files.pythonhosted.org/packages/78/43/ba4ade5a36d14a9bdadb1c7b1f05a6d071cdc8717101ee63765c4acec395/customidenticon-0.1.2.tar.gz", "yanked": false}], "0.1.5": [{"comment_text": "", "digests": {"md5": "bf23300e570df1a8bc0325ead9d5e122", "sha256": "a49d288a2adc466f4feed7b49cf9691a8d9699d01892c810e70aab4a237f30cb"}, "downloads": -1, "filename": "customidenticon-0.1.5-py3-none-any.whl", "has_sig": false, "md5_digest": "bf23300e570df1a8bc0325ead9d5e122", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4673, "upload_time": "2019-03-17T19:13:33", "upload_time_iso_8601": "2019-03-17T19:13:33.915352Z", "url": "https://files.pythonhosted.org/packages/f5/b1/6be651171554536b7b0eb9da567c746f587a463e6fe453071bf2c351288b/customidenticon-0.1.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e81256fb5906556f0facb516b9dc4d21", "sha256": "c5d50ff29f28230ecc7299eb27dd349e8e30e72761c7335505083b4f871f70f4"}, "downloads": -1, "filename": "customidenticon-0.1.5.tar.gz", "has_sig": false, "md5_digest": "e81256fb5906556f0facb516b9dc4d21", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3895, "upload_time": "2019-03-17T19:13:36", "upload_time_iso_8601": "2019-03-17T19:13:36.000867Z", "url": "https://files.pythonhosted.org/packages/7a/ce/3cd490ec7443f53a27e6981f523eb7be1a04c87d6c60d5906f4de80e79a7/customidenticon-0.1.5.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "bf23300e570df1a8bc0325ead9d5e122", "sha256": "a49d288a2adc466f4feed7b49cf9691a8d9699d01892c810e70aab4a237f30cb"}, "downloads": -1, "filename": "customidenticon-0.1.5-py3-none-any.whl", "has_sig": false, "md5_digest": "bf23300e570df1a8bc0325ead9d5e122", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4673, "upload_time": "2019-03-17T19:13:33", "upload_time_iso_8601": "2019-03-17T19:13:33.915352Z", "url": "https://files.pythonhosted.org/packages/f5/b1/6be651171554536b7b0eb9da567c746f587a463e6fe453071bf2c351288b/customidenticon-0.1.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e81256fb5906556f0facb516b9dc4d21", "sha256": "c5d50ff29f28230ecc7299eb27dd349e8e30e72761c7335505083b4f871f70f4"}, "downloads": -1, "filename": "customidenticon-0.1.5.tar.gz", "has_sig": false, "md5_digest": "e81256fb5906556f0facb516b9dc4d21", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3895, "upload_time": "2019-03-17T19:13:36", "upload_time_iso_8601": "2019-03-17T19:13:36.000867Z", "url": "https://files.pythonhosted.org/packages/7a/ce/3cd490ec7443f53a27e6981f523eb7be1a04c87d6c60d5906f4de80e79a7/customidenticon-0.1.5.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:41:18 2020"}