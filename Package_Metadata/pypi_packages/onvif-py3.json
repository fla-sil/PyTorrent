{"info": {"author": "rambo", "author_email": "rambo@iki.fi", "bugtrack_url": null, "classifiers": [], "description": "python-onvif\n============\n\nONVIF Client Implementation in Python\n\nDependencies\n------------\n`suds-py3 <https://pypi.python.org/pypi/suds-p3>`_\n\n`suds-passworddigest-py <http://github.com/tgaugry/suds-passworddigest-py3>`_\n\nInstall python-onvif\n--------------------\n**From Source**\n\nYou should clone this repository and run setup.py::\n\n    cd python-onvif && python setup.py install\n\n**From PyPI**\n\n::\n\n    pip install onvif-py3\n\nGetting Started\n---------------\n\nInitialize an ONVIFCamera instance\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n::\n\n    from onvif import ONVIFCamera\n    mycam = ONVIFCamera('192.168.0.2', 80, 'user', 'passwd', '/etc/onvif/wsdl/')\n\nNow, an ONVIFCamera instance is available. By default, a devicemgmt service is also available if everything is OK.\n\nSo, all operations defined in the WSDL document::\n\n/etc/onvif/wsdl/devicemgmt.wsdl\n\nare available.\n\nGet information from your camera\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n::\n\n    # Get Hostname\n    resp = mycam.devicemgmt.GetHostname()\n    print 'My camera`s hostname: ' + str(resp.Name)\n\n    # Get system date and time\n    dt = mycam.devicemgmt.GetSystemDateAndTime()\n    tz = dt.TimeZone\n    year = dt.UTCDateTime.Date.Year\n    hour = dt.UTCDateTime.Time.Hour\n\nConfigure (Control) your camera\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nTo configure your camera, there are two ways to pass parameters to service methods.\n\n**Dict**\n\nThis is the simpler way::\n\n    params = {'Name': 'NewHostName'}\n    device_service.SetHostname(params)\n\n**Type Instance**\n\nThis is the recommended way. Type instance will raise an\nexception if you set an invalid (or non-existent) parameter.\n\n::\n\n    params = mycam.devicemgmt.create_type('SetHostname')\n    params.Hostname = 'NewHostName'\n    mycam.devicemgmt.SetHostname(params)\n\n    time_params = mycam.devicemgmt.create_type('SetSystemDateAndTime')\n    time_params.DateTimeType = 'Manual'\n    time_params.DaylightSavings = True\n    time_params.TimeZone = 'CST-8:00:00'\n    time_params.UTCDateTime.Date.Year = 2014\n    time_params.UTCDateTime.Date.Month = 12\n    time_params.UTCDateTime.Date.Day = 3\n    time_params.UTCDateTime.Time.Hour = 9\n    time_params.UTCDateTime.Time.Minute = 36\n    time_params.UTCDateTime.Time.Second = 11\n    mycam.devicemgmt.SetSystemDateAndTime(time_params)\n\nUse other services\n~~~~~~~~~~~~~~~~~~\nONVIF protocol has defined many services.\nYou can find all the services and operations `here <http://www.onvif.org/onvif/ver20/util/operationIndex.html>`_.\nONVIFCamera has support methods to create new services::\n\n    # Create ptz service\n    ptz_service = mycam.create_ptz_service()\n    # Get ptz configuration\n    mycam.ptz.GetConfiguration()\n    # Another way\n    # ptz_service.GetConfiguration()\n\nOr create an unofficial service::\n\n    xaddr = 'http://192.168.0.3:8888/onvif/yourservice'\n    yourservice = mycam.create_onvif_service('service.wsdl', xaddr, 'yourservice')\n    yourservice.SomeOperation()\n    # Another way\n    # mycam.yourservice.SomeOperation()\n\nONVIF CLI\n---------\npython-onvif also provides a command line interactive interface: onvif-cli.\nonvif-cli is installed automatically.\n\nSingle command example\n~~~~~~~~~~~~~~~~~~~~~~\n\n::\n\n    $ onvif-cli devicemgmt GetHostname --user 'admin' --password '12345' --host '192.168.0.112' --port 80\n    True: {'FromDHCP': True, 'Name': hision}\n    $ onvif-cli devicemgmt SetHostname \"{'Name': 'NewerHostname'}\" --user 'admin' --password '12345' --host '192.168.0.112' --port 80\n    True: {}\n\nInteractive mode\n~~~~~~~~~~~~~~~~\n\n::\n\n    $ onvif-cli -u 'admin' -a '12345' --host '192.168.0.112' --port 80 --wsdl /etc/onvif/wsdl/\n    ONVIF >>> cmd\n    analytics   devicemgmt  events      imaging     media       ptz\n    ONVIF >>> cmd devicemgmt GetWsdlUrl\n    True: http://www.onvif.org/\n    ONVIF >>> cmd devicemgmt SetHostname {'Name': 'NewHostname'}\n    ONVIF >>> cmd devicemgmt GetHostname\n    True: {'Name': 'NewHostName'}\n    ONVIF >>> cmd devicemgmt SomeOperation\n    False: No Operation: SomeOperation\n\nNOTE: Tab completion is supported for interactive mode.\n\nBatch mode\n~~~~~~~~~~\n\n::\n\n    $ vim batchcmds\n    $ cat batchcmds\n    cmd devicemgmt GetWsdlUrl\n    cmd devicemgmt SetHostname {'Name': 'NewHostname', 'FromDHCP': True}\n    cmd devicemgmt GetHostname\n    $ onvif-cli --host 192.168.0.112 -u admin -a 12345 -w /etc/onvif/wsdl/ < batchcmds\n    ONVIF >>> True: http://www.onvif.org/\n    ONVIF >>> True: {}\n    ONVIF >>> True: {'FromDHCP': False, 'Name': NewHostname}\n\nReferences\n----------\n\n* `ONVIF Offical Website <http://www.onvif.com>`_\n\n* `Operations Index <http://www.onvif.org/onvif/ver20/util/operationIndex.html>`_\n\n* `ONVIF Develop Documents <http://www.onvif.org/specs/DocMap-2.4.2.html>`_\n\n* `Foscam Python Lib <http://github.com/quatanium/foscam-python-lib>`_", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/rambo/python-onvif", "keywords": "ONVIF,Camera,IPC", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "onvif-py3", "package_url": "https://pypi.org/project/onvif-py3/", "platform": "", "project_url": "https://pypi.org/project/onvif-py3/", "project_urls": {"Homepage": "http://github.com/rambo/python-onvif"}, "release_url": "https://pypi.org/project/onvif-py3/0.1.3/", "requires_dist": null, "requires_python": "", "summary": "Python Client for ONVIF Camera", "version": "0.1.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>ONVIF Client Implementation in Python</p>\n<div id=\"dependencies\">\n<h2>Dependencies</h2>\n<p><a href=\"https://pypi.python.org/pypi/suds-p3\" rel=\"nofollow\">suds-py3</a></p>\n<p><a href=\"http://github.com/tgaugry/suds-passworddigest-py3\" rel=\"nofollow\">suds-passworddigest-py</a></p>\n</div>\n<div id=\"install-python-onvif\">\n<h2>Install python-onvif</h2>\n<p><strong>From Source</strong></p>\n<p>You should clone this repository and run setup.py:</p>\n<pre>cd python-onvif &amp;&amp; python setup.py install\n</pre>\n<p><strong>From PyPI</strong></p>\n<pre>pip install onvif-py3\n</pre>\n</div>\n<div id=\"getting-started\">\n<h2>Getting Started</h2>\n<div id=\"initialize-an-onvifcamera-instance\">\n<h3>Initialize an ONVIFCamera instance</h3>\n<pre>from onvif import ONVIFCamera\nmycam = ONVIFCamera('192.168.0.2', 80, 'user', 'passwd', '/etc/onvif/wsdl/')\n</pre>\n<p>Now, an ONVIFCamera instance is available. By default, a devicemgmt service is also available if everything is OK.</p>\n<p>So, all operations defined in the WSDL document:</p>\n<pre>/etc/onvif/wsdl/devicemgmt.wsdl\n</pre>\n<p>are available.</p>\n</div>\n<div id=\"get-information-from-your-camera\">\n<h3>Get information from your camera</h3>\n<pre># Get Hostname\nresp = mycam.devicemgmt.GetHostname()\nprint 'My camera`s hostname: ' + str(resp.Name)\n\n# Get system date and time\ndt = mycam.devicemgmt.GetSystemDateAndTime()\ntz = dt.TimeZone\nyear = dt.UTCDateTime.Date.Year\nhour = dt.UTCDateTime.Time.Hour\n</pre>\n</div>\n<div id=\"configure-control-your-camera\">\n<h3>Configure (Control) your camera</h3>\n<p>To configure your camera, there are two ways to pass parameters to service methods.</p>\n<p><strong>Dict</strong></p>\n<p>This is the simpler way:</p>\n<pre>params = {'Name': 'NewHostName'}\ndevice_service.SetHostname(params)\n</pre>\n<p><strong>Type Instance</strong></p>\n<p>This is the recommended way. Type instance will raise an\nexception if you set an invalid (or non-existent) parameter.</p>\n<pre>params = mycam.devicemgmt.create_type('SetHostname')\nparams.Hostname = 'NewHostName'\nmycam.devicemgmt.SetHostname(params)\n\ntime_params = mycam.devicemgmt.create_type('SetSystemDateAndTime')\ntime_params.DateTimeType = 'Manual'\ntime_params.DaylightSavings = True\ntime_params.TimeZone = 'CST-8:00:00'\ntime_params.UTCDateTime.Date.Year = 2014\ntime_params.UTCDateTime.Date.Month = 12\ntime_params.UTCDateTime.Date.Day = 3\ntime_params.UTCDateTime.Time.Hour = 9\ntime_params.UTCDateTime.Time.Minute = 36\ntime_params.UTCDateTime.Time.Second = 11\nmycam.devicemgmt.SetSystemDateAndTime(time_params)\n</pre>\n</div>\n<div id=\"use-other-services\">\n<h3>Use other services</h3>\n<p>ONVIF protocol has defined many services.\nYou can find all the services and operations <a href=\"http://www.onvif.org/onvif/ver20/util/operationIndex.html\" rel=\"nofollow\">here</a>.\nONVIFCamera has support methods to create new services:</p>\n<pre># Create ptz service\nptz_service = mycam.create_ptz_service()\n# Get ptz configuration\nmycam.ptz.GetConfiguration()\n# Another way\n# ptz_service.GetConfiguration()\n</pre>\n<p>Or create an unofficial service:</p>\n<pre>xaddr = 'http://192.168.0.3:8888/onvif/yourservice'\nyourservice = mycam.create_onvif_service('service.wsdl', xaddr, 'yourservice')\nyourservice.SomeOperation()\n# Another way\n# mycam.yourservice.SomeOperation()\n</pre>\n</div>\n</div>\n<div id=\"onvif-cli\">\n<h2>ONVIF CLI</h2>\n<p>python-onvif also provides a command line interactive interface: onvif-cli.\nonvif-cli is installed automatically.</p>\n<div id=\"single-command-example\">\n<h3>Single command example</h3>\n<pre>$ onvif-cli devicemgmt GetHostname --user 'admin' --password '12345' --host '192.168.0.112' --port 80\nTrue: {'FromDHCP': True, 'Name': hision}\n$ onvif-cli devicemgmt SetHostname \"{'Name': 'NewerHostname'}\" --user 'admin' --password '12345' --host '192.168.0.112' --port 80\nTrue: {}\n</pre>\n</div>\n<div id=\"interactive-mode\">\n<h3>Interactive mode</h3>\n<pre>$ onvif-cli -u 'admin' -a '12345' --host '192.168.0.112' --port 80 --wsdl /etc/onvif/wsdl/\nONVIF &gt;&gt;&gt; cmd\nanalytics   devicemgmt  events      imaging     media       ptz\nONVIF &gt;&gt;&gt; cmd devicemgmt GetWsdlUrl\nTrue: http://www.onvif.org/\nONVIF &gt;&gt;&gt; cmd devicemgmt SetHostname {'Name': 'NewHostname'}\nONVIF &gt;&gt;&gt; cmd devicemgmt GetHostname\nTrue: {'Name': 'NewHostName'}\nONVIF &gt;&gt;&gt; cmd devicemgmt SomeOperation\nFalse: No Operation: SomeOperation\n</pre>\n<p>NOTE: Tab completion is supported for interactive mode.</p>\n</div>\n<div id=\"batch-mode\">\n<h3>Batch mode</h3>\n<pre>$ vim batchcmds\n$ cat batchcmds\ncmd devicemgmt GetWsdlUrl\ncmd devicemgmt SetHostname {'Name': 'NewHostname', 'FromDHCP': True}\ncmd devicemgmt GetHostname\n$ onvif-cli --host 192.168.0.112 -u admin -a 12345 -w /etc/onvif/wsdl/ &lt; batchcmds\nONVIF &gt;&gt;&gt; True: http://www.onvif.org/\nONVIF &gt;&gt;&gt; True: {}\nONVIF &gt;&gt;&gt; True: {'FromDHCP': False, 'Name': NewHostname}\n</pre>\n</div>\n</div>\n<div id=\"references\">\n<h2>References</h2>\n<ul>\n<li><a href=\"http://www.onvif.com\" rel=\"nofollow\">ONVIF Offical Website</a></li>\n<li><a href=\"http://www.onvif.org/onvif/ver20/util/operationIndex.html\" rel=\"nofollow\">Operations Index</a></li>\n<li><a href=\"http://www.onvif.org/specs/DocMap-2.4.2.html\" rel=\"nofollow\">ONVIF Develop Documents</a></li>\n<li><a href=\"http://github.com/quatanium/foscam-python-lib\" rel=\"nofollow\">Foscam Python Lib</a></li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 2880683, "releases": {"0.1.3": [{"comment_text": "", "digests": {"md5": "cb6ad16dd2cd8062c63ee4f523e9ac01", "sha256": "0683b58c693e451932087f1bdb8b5280aadc8d67c34868c5533c7914fcb8bd1a"}, "downloads": -1, "filename": "onvif-py3-0.1.3.tar.gz", "has_sig": false, "md5_digest": "cb6ad16dd2cd8062c63ee4f523e9ac01", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 162781, "upload_time": "2017-05-17T14:13:26", "upload_time_iso_8601": "2017-05-17T14:13:26.232510Z", "url": "https://files.pythonhosted.org/packages/2c/95/51e0a1943ace3cb1f8fd05fb467dc78a7cd03738f9bfb904bacc040bebe2/onvif-py3-0.1.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "cb6ad16dd2cd8062c63ee4f523e9ac01", "sha256": "0683b58c693e451932087f1bdb8b5280aadc8d67c34868c5533c7914fcb8bd1a"}, "downloads": -1, "filename": "onvif-py3-0.1.3.tar.gz", "has_sig": false, "md5_digest": "cb6ad16dd2cd8062c63ee4f523e9ac01", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 162781, "upload_time": "2017-05-17T14:13:26", "upload_time_iso_8601": "2017-05-17T14:13:26.232510Z", "url": "https://files.pythonhosted.org/packages/2c/95/51e0a1943ace3cb1f8fd05fb467dc78a7cd03738f9bfb904bacc040bebe2/onvif-py3-0.1.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:03:45 2020"}