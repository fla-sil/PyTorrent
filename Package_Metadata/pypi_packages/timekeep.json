{"info": {"author": "Tom Titcombe", "author_email": "t.j.titcombe@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Topic :: Scientific/Engineering :: Information Analysis"], "description": "# timekeep\n[![Build Status](https://travis-ci.com/TTitcombe/timekeep.svg?branch=master)](https://travis-ci.com/TTitcombe/timekeep)\n[![codecov](https://codecov.io/gh/TTitcombe/timekeep/branch/master/graph/badge.svg)](https://codecov.io/gh/TTitcombe/timekeep)\n[![Binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gh/TTitcombe/timekeep/master)\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n\nA python package for defensive timeseries analytics.\n\n## What is `timekeep`\nAll code needs to make assumptions about the data it uses: its shape, content, or format.\nBut constantly checking and re-checking the assumptions can make the code unwieldy.\nTimeseries data presents additional complications in that many common python packages, such as\n[`pandas`][pandas] and [`scikitlearn`][sklearn], expect 2-dimensional, static data.\n\n`timekeep` protects your timeseries data by providing simple decorators to check those assumptions.\n`timekeep` is heavily inspired by [`engarde`][engarde], but does not share its assumption about\ndata being a [`pandas`][pandas] dataframe.\n\n## Quickstart\n### How to install\n`timekeep` is available from [PyPi][pypi]. Run\n```bash\npip install timekeep\n```\nto install.\n\n**Important**:\n`timekeep` is currently on version `0.1.0` and is in active development. As the version reflects,\nthe codebase is liable to change. Once main functionality has been applied, a stable version `1.0.0`\nwill be released.\n\n### How to use\n`timekeep` provides decorators to be used on functions which return a timeseries dataset.\nEach decorator checks an assumption about the data and raises an error if this assumption is not met.\n\n```python\nimport numpy as np\nimport timekeep.decorators as tkd\n\n# Check that data returned from wont_raise\n# has shape (-1, 10, 2)\n@tkd.is_shape((-1, 10, 2))\ndef wont_raise():\n  return np.random.random((10, 10, 2))\n\n# Check that data returned from will_raise is a\n# timeseries dataset (has three dimensions)\n@tkd.is_timeseries\ndef will_raise():\n  return np.random.random((10, 2))\n```\n\nAnother key feature of `timekeep` is conversion between timeseries data formats; `timekeep` can convert between\n[`tslearn`][tslearn] style timeseries dataset and [`sklearn`][sklearn] datasets, with support for [`tsfresh`][tsfresh]\ndatasets in progress. The conversion functions can be applied as decorators to methods and functions to automatically\nconvert your data as you supply it. For example:\n\n```python\nimport numpy as np\nimport timekeep.conversion as tkc\nfrom sklearn.preprocessing import PCA\n\n# Convert timeseries dataset to sklearn for input into sklearn.preprocessing.PCA\n@tkc.convert_timeseries_input\ndef run_pca_on_timeseries(data):\n  return PCA().fit(data)\n\ntimeseries_data = np.random.random((10, 100, 2))\nrun_pca_on_timeseries(timeseries_data)\n```\n\nSee the [`examples`][examples] folder for more. You can launch this repo on [`binder`][binder_timekeep] \nand run the examples without any installation.\n\n## Contributing\nAny and all help welcome. Please see the [contributing guide][contributing].\n\n[binder_timekeep]: https://mybinder.org/v2/gh/TTitcombe/timekeep/master\n[engarde]: https://github.com/engarde-dev/engarde\n[pandas]: https://pandas.pydata.org/\n[pypi]: https://pypi.org/project/timekeep/0.1/\n[sklearn]: https://scikit-learn.org/stable/index.html\n[tsfresh]: https://tsfresh.readthedocs.io\n[tslearn]: https://tslearn.readthedocs.io\n\n[contributing]: CONTRIBUTING.md\n[examples]: examples/", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/TTitcombe/timekeep", "keywords": "timeseries time series analysis data science", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "timekeep", "package_url": "https://pypi.org/project/timekeep/", "platform": "", "project_url": "https://pypi.org/project/timekeep/", "project_urls": {"Homepage": "https://github.com/TTitcombe/timekeep"}, "release_url": "https://pypi.org/project/timekeep/0.2.0/", "requires_dist": null, "requires_python": ">=3.6", "summary": "Defensive timeseries analytics", "version": "0.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>timekeep</h1>\n<p><a href=\"https://travis-ci.com/TTitcombe/timekeep\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0d39eee16725e1c2a5fdc957b5facaf69bb2d1ab/68747470733a2f2f7472617669732d63692e636f6d2f54546974636f6d62652f74696d656b6565702e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://codecov.io/gh/TTitcombe/timekeep\" rel=\"nofollow\"><img alt=\"codecov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6be9e687ee515902f737bbf23ad9226ffecc826c/68747470733a2f2f636f6465636f762e696f2f67682f54546974636f6d62652f74696d656b6565702f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a>\n<a href=\"https://mybinder.org/v2/gh/TTitcombe/timekeep/master\" rel=\"nofollow\"><img alt=\"Binder\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/85e91bbb928104e4ce317951541520c6b9c170e1/68747470733a2f2f6d7962696e6465722e6f72672f62616467655f6c6f676f2e737667\"></a>\n<a href=\"https://github.com/psf/black\" rel=\"nofollow\"><img alt=\"Code style: black\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fbfdc7754183ecf079bc71ddeabaf88f6cbc5c00/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64652532307374796c652d626c61636b2d3030303030302e737667\"></a></p>\n<p>A python package for defensive timeseries analytics.</p>\n<h2>What is <code>timekeep</code></h2>\n<p>All code needs to make assumptions about the data it uses: its shape, content, or format.\nBut constantly checking and re-checking the assumptions can make the code unwieldy.\nTimeseries data presents additional complications in that many common python packages, such as\n<a href=\"https://pandas.pydata.org/\" rel=\"nofollow\"><code>pandas</code></a> and <a href=\"https://scikit-learn.org/stable/index.html\" rel=\"nofollow\"><code>scikitlearn</code></a>, expect 2-dimensional, static data.</p>\n<p><code>timekeep</code> protects your timeseries data by providing simple decorators to check those assumptions.\n<code>timekeep</code> is heavily inspired by <a href=\"https://github.com/engarde-dev/engarde\" rel=\"nofollow\"><code>engarde</code></a>, but does not share its assumption about\ndata being a <a href=\"https://pandas.pydata.org/\" rel=\"nofollow\"><code>pandas</code></a> dataframe.</p>\n<h2>Quickstart</h2>\n<h3>How to install</h3>\n<p><code>timekeep</code> is available from <a href=\"https://pypi.org/project/timekeep/0.1/\" rel=\"nofollow\">PyPi</a>. Run</p>\n<pre>pip install timekeep\n</pre>\n<p>to install.</p>\n<p><strong>Important</strong>:\n<code>timekeep</code> is currently on version <code>0.1.0</code> and is in active development. As the version reflects,\nthe codebase is liable to change. Once main functionality has been applied, a stable version <code>1.0.0</code>\nwill be released.</p>\n<h3>How to use</h3>\n<p><code>timekeep</code> provides decorators to be used on functions which return a timeseries dataset.\nEach decorator checks an assumption about the data and raises an error if this assumption is not met.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">import</span> <span class=\"nn\">timekeep.decorators</span> <span class=\"k\">as</span> <span class=\"nn\">tkd</span>\n\n<span class=\"c1\"># Check that data returned from wont_raise</span>\n<span class=\"c1\"># has shape (-1, 10, 2)</span>\n<span class=\"nd\">@tkd</span><span class=\"o\">.</span><span class=\"n\">is_shape</span><span class=\"p\">((</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">))</span>\n<span class=\"k\">def</span> <span class=\"nf\">wont_raise</span><span class=\"p\">():</span>\n  <span class=\"k\">return</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"p\">((</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># Check that data returned from will_raise is a</span>\n<span class=\"c1\"># timeseries dataset (has three dimensions)</span>\n<span class=\"nd\">@tkd</span><span class=\"o\">.</span><span class=\"n\">is_timeseries</span>\n<span class=\"k\">def</span> <span class=\"nf\">will_raise</span><span class=\"p\">():</span>\n  <span class=\"k\">return</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"p\">((</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">))</span>\n</pre>\n<p>Another key feature of <code>timekeep</code> is conversion between timeseries data formats; <code>timekeep</code> can convert between\n<a href=\"https://tslearn.readthedocs.io\" rel=\"nofollow\"><code>tslearn</code></a> style timeseries dataset and <a href=\"https://scikit-learn.org/stable/index.html\" rel=\"nofollow\"><code>sklearn</code></a> datasets, with support for <a href=\"https://tsfresh.readthedocs.io\" rel=\"nofollow\"><code>tsfresh</code></a>\ndatasets in progress. The conversion functions can be applied as decorators to methods and functions to automatically\nconvert your data as you supply it. For example:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">import</span> <span class=\"nn\">timekeep.conversion</span> <span class=\"k\">as</span> <span class=\"nn\">tkc</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.preprocessing</span> <span class=\"kn\">import</span> <span class=\"n\">PCA</span>\n\n<span class=\"c1\"># Convert timeseries dataset to sklearn for input into sklearn.preprocessing.PCA</span>\n<span class=\"nd\">@tkc</span><span class=\"o\">.</span><span class=\"n\">convert_timeseries_input</span>\n<span class=\"k\">def</span> <span class=\"nf\">run_pca_on_timeseries</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">):</span>\n  <span class=\"k\">return</span> <span class=\"n\">PCA</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n\n<span class=\"n\">timeseries_data</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"p\">((</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">))</span>\n<span class=\"n\">run_pca_on_timeseries</span><span class=\"p\">(</span><span class=\"n\">timeseries_data</span><span class=\"p\">)</span>\n</pre>\n<p>See the <a href=\"examples/\" rel=\"nofollow\"><code>examples</code></a> folder for more. You can launch this repo on <a href=\"https://mybinder.org/v2/gh/TTitcombe/timekeep/master\" rel=\"nofollow\"><code>binder</code></a>\nand run the examples without any installation.</p>\n<h2>Contributing</h2>\n<p>Any and all help welcome. Please see the <a href=\"CONTRIBUTING.md\" rel=\"nofollow\">contributing guide</a>.</p>\n\n          </div>"}, "last_serial": 6243029, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "ec790fc71114f65c5239e174a7ee69bc", "sha256": "5ac7e1f63dc7e169c0b3b39aa347bc369d06b6d522a57a51df4959f451045dae"}, "downloads": -1, "filename": "timekeep-0.1.tar.gz", "has_sig": false, "md5_digest": "ec790fc71114f65c5239e174a7ee69bc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4567, "upload_time": "2019-10-19T09:19:59", "upload_time_iso_8601": "2019-10-19T09:19:59.838620Z", "url": "https://files.pythonhosted.org/packages/9d/87/1fd02102fe1e94d1d20bc53e6c12f83e9c75d4d3bc8c056608f95d7e5153/timekeep-0.1.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "0226cd37ae175a58e0f9a88a62dfbbff", "sha256": "9ded398a0dfb8db0e7efda046d915acfcd61fbe78011a37461c5bc316d103b35"}, "downloads": -1, "filename": "timekeep-0.2.0.tar.gz", "has_sig": false, "md5_digest": "0226cd37ae175a58e0f9a88a62dfbbff", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 9105, "upload_time": "2019-12-04T18:22:58", "upload_time_iso_8601": "2019-12-04T18:22:58.697641Z", "url": "https://files.pythonhosted.org/packages/5b/11/471d2c963555345f53a0b5527356dc85490302b5009f533e6ce364f6de56/timekeep-0.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "0226cd37ae175a58e0f9a88a62dfbbff", "sha256": "9ded398a0dfb8db0e7efda046d915acfcd61fbe78011a37461c5bc316d103b35"}, "downloads": -1, "filename": "timekeep-0.2.0.tar.gz", "has_sig": false, "md5_digest": "0226cd37ae175a58e0f9a88a62dfbbff", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 9105, "upload_time": "2019-12-04T18:22:58", "upload_time_iso_8601": "2019-12-04T18:22:58.697641Z", "url": "https://files.pythonhosted.org/packages/5b/11/471d2c963555345f53a0b5527356dc85490302b5009f533e6ce364f6de56/timekeep-0.2.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:53:33 2020"}