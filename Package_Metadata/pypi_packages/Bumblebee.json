{"info": {"author": "Nathan Van Gheem", "author_email": "vangheem@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "Introduction\r\n============\r\n\r\nBumblebee is a deliverance-like html transformation framwork\r\nimplementation that only works on the output an html document.\r\n\r\nIt doesn't use xslt so it isn't as fast as what Diazo is; however,\r\nit accomplishes the very simple use-case of moving elements around\r\non html output.\r\n\r\n\r\nWhy\r\n---\r\n\r\nBecause I almost never needed the full-fledge deliverance approach\r\nfor what I wanted to do. In fact, it was usually an annoyance when\r\nall I wanted to do was move an element around on a page.\r\n\r\n\r\nHow-to Use\r\n==========\r\n\r\nConfigurating your transformations is done with a very xml syntax.\r\n\r\nExample:\r\n\r\nHTML::\r\n\r\n    <html>\r\n        <head></head>\r\n        <body>\r\n            <div id=\"#header\"></div>\r\n            <div id=\"content\"></div>\r\n            <div id=\"footer\"></div>\r\n        </body>\r\n    </html>\r\n\r\n\r\nRules XML::\r\n    \r\n    <xml>\r\n        <block if-content=\"#content\">\r\n            <after src=\"#header\" dst=\"#footer\" />\r\n        </block>\r\n    </xml>\r\n\r\n\r\nRunning it through::\r\n    \r\n    from bumblebee import transform\r\n    from repoze.xmliter.utils import getHTMLSerializer\r\n    from bumblebee.xml import convertRules\r\n\r\n    html = getHTMLSerializer(output)\r\n    rules = convertRules(rules_xml)\r\n    result = transform(html, rules)\r\n\r\n\r\nSelectors\r\n---------\r\n\r\nFor xml configuration that selects elements, you can use CSS selectors(default)\r\nor XPath.\r\n\r\nTo use XPath, just append '-path' onto the node name::\r\n\r\n    <after src-xpath=\"/html/body/div[0]\" src-xpath=\"/html/body/div[2]\" />\r\n\r\n\r\narbitrary html\r\n~~~~~~~~~~~~~~\r\n\r\nUse this to inject html into a page::\r\n\r\n    <after src-html=\"\" dst=\"#foo\">\r\n        <div id=\"foobar\">\r\n            <h1>hello, world</h1>\r\n        </div>\r\n    </after>\r\n\r\n\r\nRules\r\n-----\r\n\r\nBefore\r\n~~~~~~\r\n\r\nMove an element before another element::\r\n\r\n    <before src=\"#foo\" dst=\"#bar\" />\r\n\r\nMoves \"#foo\" before \"#bar\"\r\n\r\nAfter\r\n~~~~~\r\n\r\nMove an element after another::\r\n\r\n    <after src=\"#foo\" \"#bar\" />\r\n\r\nMoves \"#foo\" after \"#bar\"\r\n\r\nDrop\r\n~~~~\r\n\r\nRemove an element from the dom::\r\n\r\n    <drop src=\"#foo\" />\r\n\r\nReplace\r\n~~~~~~~\r\n\r\nReplace an element with another::\r\n\r\n    <replace src=\"#foo\" dst=\"#bar\" />\r\n\r\nReplaces \"#dst\" with \"#src\"\r\n\r\n\r\nClass\r\n~~~~~\r\n\r\nAdd or remove classes from an element::\r\n\r\n    <class src=\"#foo\" add=\"three four\" remove=\"one two\" />\r\n\r\nRemove the classes \"one\" and \"two\" from \"#foo\" and add\r\nthe classes \"three\" and \"four\".\r\n\r\n\r\nTag\r\n~~~\r\n\r\nChange a tag::\r\n\r\n    <tag src=\"#foo\" tag=\"p\" />\r\n\r\nGroup\r\n~~~~~\r\n\r\nGroup rules together with a conditions::\r\n\r\n    <group if-content=\"#foo\">\r\n        <drop src=\"#bar\" />\r\n    </group>\r\n\r\nPerforms some rules if \"#foo\" is in the document.\r\n\r\n\r\nConditions\r\n----------\r\n\r\nif-content\r\n~~~~~~~~~~\r\n\r\nPerforms actions if the selector is found in the document::\r\n\r\n    <after src=\"#foo\" dst=\"#bar\" if-content=\"#foo\" />\r\n\r\n\r\nnot conditiion\r\n~~~~~~~~~~~~~~\r\n\r\nAny condition can be negated for the opposite affect::\r\n\r\n    <drop src=\"#foo\" if-not-content=\"#bar\" />\r\n\r\n\r\nExtending\r\n---------\r\n\r\nCreating a Rule::\r\n    \r\n    from bumblebee.rules import BaseDouble\r\n    class Append(BaseDouble):\r\n        def __call__(self, root):\r\n            src, dst, skip = self.process_nodes(root)\r\n            if skip:\r\n                return None\r\n            dst = dst[0]\r\n            for el in dst:\r\n                dst.append(el)\r\n            return src\r\n    \r\n    from bumblebee.xml import addTag\r\n    addTag('append', Append)\r\n\r\nTo use the rule, you would::\r\n\r\n    <append src=\"#foo\" dst=\"#bar\" />\r\n\r\n\r\nCreating a Condition::\r\n\r\n    from bumblebee.conditions import BaseIf\r\n    class IfPath(BaseIf):\r\n        def __init__(self, path, extras={}):\r\n            super(IfPath, self).__init__(extras)\r\n            self.path = path\r\n        def __call__(self, root):\r\n            req = self.extras['request']\r\n            path = req['PATH_INFO']\r\n            if self.path.startswith('/'):\r\n                return path.startswith(self.path)\r\n            else:\r\n                return self.path in path\r\n    from bumblebee.xml import addCondition\r\n    addCondition('path', IfPath)\r\n\r\nTo use this condition, you would::\r\n\r\n    <drop src=\"#foo\" if-path=\"/foo/bar\" />\r\n\r\nor::\r\n\r\n    <drop src=\"#foo\" if-not-path=\"/foo/bar\" />\r\n\r\n\r\nCHANGELOG\r\n=========\r\n\r\n\r\n1.0a2 ~ (2011-09-22)\r\n--------------------\r\n\r\n- add support for arbitrary html\r\n\r\n- better support for adding new selectors, conditions, rules\r\n\r\n- better parsing\r\n\r\n- better handle extras parameters so that rules can be more\r\n  easily cached", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/vangheem/Bumblebee", "keywords": "transform deliverance diazo lxml", "license": "UNKNOWN", "maintainer": "", "maintainer_email": "", "name": "Bumblebee", "package_url": "https://pypi.org/project/Bumblebee/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/Bumblebee/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/vangheem/Bumblebee"}, "release_url": "https://pypi.org/project/Bumblebee/1.0a2/", "requires_dist": null, "requires_python": null, "summary": "deliverance-like implementation that only works on html output(no theme file)", "version": "1.0a2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"introduction\">\n<h2>Introduction</h2>\n<p>Bumblebee is a deliverance-like html transformation framwork\nimplementation that only works on the output an html document.</p>\n<p>It doesn\u2019t use xslt so it isn\u2019t as fast as what Diazo is; however,\nit accomplishes the very simple use-case of moving elements around\non html output.</p>\n<div id=\"why\">\n<h3>Why</h3>\n<p>Because I almost never needed the full-fledge deliverance approach\nfor what I wanted to do. In fact, it was usually an annoyance when\nall I wanted to do was move an element around on a page.</p>\n</div>\n</div>\n<div id=\"how-to-use\">\n<h2>How-to Use</h2>\n<p>Configurating your transformations is done with a very xml syntax.</p>\n<p>Example:</p>\n<p>HTML:</p>\n<pre>&lt;html&gt;\n    &lt;head&gt;&lt;/head&gt;\n    &lt;body&gt;\n        &lt;div id=\"#header\"&gt;&lt;/div&gt;\n        &lt;div id=\"content\"&gt;&lt;/div&gt;\n        &lt;div id=\"footer\"&gt;&lt;/div&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</pre>\n<p>Rules XML:</p>\n<pre>&lt;xml&gt;\n    &lt;block if-content=\"#content\"&gt;\n        &lt;after src=\"#header\" dst=\"#footer\" /&gt;\n    &lt;/block&gt;\n&lt;/xml&gt;\n</pre>\n<p>Running it through:</p>\n<pre>from bumblebee import transform\nfrom repoze.xmliter.utils import getHTMLSerializer\nfrom bumblebee.xml import convertRules\n\nhtml = getHTMLSerializer(output)\nrules = convertRules(rules_xml)\nresult = transform(html, rules)\n</pre>\n<div id=\"selectors\">\n<h3>Selectors</h3>\n<p>For xml configuration that selects elements, you can use CSS selectors(default)\nor XPath.</p>\n<p>To use XPath, just append \u2018-path\u2019 onto the node name:</p>\n<pre>&lt;after src-xpath=\"/html/body/div[0]\" src-xpath=\"/html/body/div[2]\" /&gt;\n</pre>\n<div id=\"arbitrary-html\">\n<h4>arbitrary html</h4>\n<p>Use this to inject html into a page:</p>\n<pre>&lt;after src-html=\"\" dst=\"#foo\"&gt;\n    &lt;div id=\"foobar\"&gt;\n        &lt;h1&gt;hello, world&lt;/h1&gt;\n    &lt;/div&gt;\n&lt;/after&gt;\n</pre>\n</div>\n</div>\n<div id=\"rules\">\n<h3>Rules</h3>\n<div id=\"before\">\n<h4>Before</h4>\n<p>Move an element before another element:</p>\n<pre>&lt;before src=\"#foo\" dst=\"#bar\" /&gt;\n</pre>\n<p>Moves \u201c#foo\u201d before \u201c#bar\u201d</p>\n</div>\n<div id=\"after\">\n<h4>After</h4>\n<p>Move an element after another:</p>\n<pre>&lt;after src=\"#foo\" \"#bar\" /&gt;\n</pre>\n<p>Moves \u201c#foo\u201d after \u201c#bar\u201d</p>\n</div>\n<div id=\"drop\">\n<h4>Drop</h4>\n<p>Remove an element from the dom:</p>\n<pre>&lt;drop src=\"#foo\" /&gt;\n</pre>\n</div>\n<div id=\"replace\">\n<h4>Replace</h4>\n<p>Replace an element with another:</p>\n<pre>&lt;replace src=\"#foo\" dst=\"#bar\" /&gt;\n</pre>\n<p>Replaces \u201c#dst\u201d with \u201c#src\u201d</p>\n</div>\n<div id=\"class\">\n<h4>Class</h4>\n<p>Add or remove classes from an element:</p>\n<pre>&lt;class src=\"#foo\" add=\"three four\" remove=\"one two\" /&gt;\n</pre>\n<p>Remove the classes \u201cone\u201d and \u201ctwo\u201d from \u201c#foo\u201d and add\nthe classes \u201cthree\u201d and \u201cfour\u201d.</p>\n</div>\n<div id=\"tag\">\n<h4>Tag</h4>\n<p>Change a tag:</p>\n<pre>&lt;tag src=\"#foo\" tag=\"p\" /&gt;\n</pre>\n</div>\n<div id=\"group\">\n<h4>Group</h4>\n<p>Group rules together with a conditions:</p>\n<pre>&lt;group if-content=\"#foo\"&gt;\n    &lt;drop src=\"#bar\" /&gt;\n&lt;/group&gt;\n</pre>\n<p>Performs some rules if \u201c#foo\u201d is in the document.</p>\n</div>\n</div>\n<div id=\"conditions\">\n<h3>Conditions</h3>\n<div id=\"if-content\">\n<h4>if-content</h4>\n<p>Performs actions if the selector is found in the document:</p>\n<pre>&lt;after src=\"#foo\" dst=\"#bar\" if-content=\"#foo\" /&gt;\n</pre>\n</div>\n<div id=\"not-conditiion\">\n<h4>not conditiion</h4>\n<p>Any condition can be negated for the opposite affect:</p>\n<pre>&lt;drop src=\"#foo\" if-not-content=\"#bar\" /&gt;\n</pre>\n</div>\n</div>\n<div id=\"extending\">\n<h3>Extending</h3>\n<p>Creating a Rule:</p>\n<pre>from bumblebee.rules import BaseDouble\nclass Append(BaseDouble):\n    def __call__(self, root):\n        src, dst, skip = self.process_nodes(root)\n        if skip:\n            return None\n        dst = dst[0]\n        for el in dst:\n            dst.append(el)\n        return src\n\nfrom bumblebee.xml import addTag\naddTag('append', Append)\n</pre>\n<p>To use the rule, you would:</p>\n<pre>&lt;append src=\"#foo\" dst=\"#bar\" /&gt;\n</pre>\n<p>Creating a Condition:</p>\n<pre>from bumblebee.conditions import BaseIf\nclass IfPath(BaseIf):\n    def __init__(self, path, extras={}):\n        super(IfPath, self).__init__(extras)\n        self.path = path\n    def __call__(self, root):\n        req = self.extras['request']\n        path = req['PATH_INFO']\n        if self.path.startswith('/'):\n            return path.startswith(self.path)\n        else:\n            return self.path in path\nfrom bumblebee.xml import addCondition\naddCondition('path', IfPath)\n</pre>\n<p>To use this condition, you would:</p>\n<pre>&lt;drop src=\"#foo\" if-path=\"/foo/bar\" /&gt;\n</pre>\n<p>or:</p>\n<pre>&lt;drop src=\"#foo\" if-not-path=\"/foo/bar\" /&gt;\n</pre>\n</div>\n</div>\n<div id=\"changelog\">\n<h2>CHANGELOG</h2>\n<h2 id=\"a2-2011-09-22\"><span class=\"section-subtitle\">1.0a2 ~ (2011-09-22)</span></h2>\n<ul>\n<li>add support for arbitrary html</li>\n<li>better support for adding new selectors, conditions, rules</li>\n<li>better parsing</li>\n<li>better handle extras parameters so that rules can be more\neasily cached</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 783889, "releases": {"1.0a1": [{"comment_text": "", "digests": {"md5": "825e5aeaeec2c10ed77f615ee94cb040", "sha256": "842322752b6c910bf9a1061dd8148c62cf2a32a748f97e85a77f3dae1e3e7714"}, "downloads": -1, "filename": "Bumblebee-1.0a1.zip", "has_sig": false, "md5_digest": "825e5aeaeec2c10ed77f615ee94cb040", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8944, "upload_time": "2011-09-05T23:51:45", "upload_time_iso_8601": "2011-09-05T23:51:45.092869Z", "url": "https://files.pythonhosted.org/packages/9e/c0/62643a6aa45d84b1c0ac2fdd7f9bd4666bf420b8b3891c4966443a6885de/Bumblebee-1.0a1.zip", "yanked": false}], "1.0a2": [{"comment_text": "", "digests": {"md5": "a3d7de6d1e29f2d18d6bd5d43e3d48fa", "sha256": "34efd460ceee668e629e958cffe82610a81c14fe919a2d6533ad9dc4e60278a4"}, "downloads": -1, "filename": "Bumblebee-1.0a2.zip", "has_sig": false, "md5_digest": "a3d7de6d1e29f2d18d6bd5d43e3d48fa", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19112, "upload_time": "2011-09-22T08:31:56", "upload_time_iso_8601": "2011-09-22T08:31:56.863143Z", "url": "https://files.pythonhosted.org/packages/de/f7/32f866780a9b41683d90f427b27dba97aeb9ba04c3ff3d0e93cc26653ded/Bumblebee-1.0a2.zip", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a3d7de6d1e29f2d18d6bd5d43e3d48fa", "sha256": "34efd460ceee668e629e958cffe82610a81c14fe919a2d6533ad9dc4e60278a4"}, "downloads": -1, "filename": "Bumblebee-1.0a2.zip", "has_sig": false, "md5_digest": "a3d7de6d1e29f2d18d6bd5d43e3d48fa", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19112, "upload_time": "2011-09-22T08:31:56", "upload_time_iso_8601": "2011-09-22T08:31:56.863143Z", "url": "https://files.pythonhosted.org/packages/de/f7/32f866780a9b41683d90f427b27dba97aeb9ba04c3ff3d0e93cc26653ded/Bumblebee-1.0a2.zip", "yanked": false}], "timestamp": "Thu May  7 22:36:00 2020"}