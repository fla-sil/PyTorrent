{"info": {"author": "Bart Thate", "author_email": "bthate@dds.nl", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "License :: Public Domain", "Operating System :: Unix", "Programming Language :: Python", "Topic :: Utilities"], "description": "R E A D M E\n###########\n\n| ZELF is a pure python3 framework to program bots, provides an IRC bot to use and is extendible by programming your own commands.\n| ZELF uses a timestamped, type in filename, JSON stringified, files on filesystem backend and has timed based logging capabilities.\n| ZELF has been placed in the Public Domain and contains no copyright or LICENSE.\n\n\nC O D E\n=======\n\n.. autosummary::\n    :toctree: code\n    :template: module.rst\n\n    zelf.all                      - include all modules.\n    zelf.bot\t\t\t  - bot base class\n    zelf.clock                    - timers\n    zelf.cmds\t\t\t  - commands\n    zelf.command                  - command parsing\n    zelf.db\t\t\t  - db backend\n    zelf.errors \t\t  - exceptions\n    zelf.event\t\t\t  - event class\n    zelf.fleet                    - list of bots\n    zelf.handler                  - event handler\n    zelf.irc                      - irc bot\n    zelf.kernel\t\t\t  - core handler\n    zelf.loader                   - module loader\n    zelf.log\t\t\t  - logging module\n    zelf.obj\t\t\t  - object base class.\n    zelf.tasks                    - threads\n    zelf.term \t\t\t  - terminal handling\n    zelf.udp\t\t\t  - udp to channel relay\n    zelf.user                     - manage users\n    zelf.utils                    - utilities\n\nI N S T A L L\n=============\n\n\nif you need ZELF to have access to your local directory use this: \n\n> export PYTHONPATH=\".\"\n\nthis will add your current directory to the pythonpath so the packages in it \ncan be found by ZELF.\n\ninstallation is through pypi:\n\n> sudo pip3 install zelf\n\nyou can also run the bot from the tarball at pypi and run it directly or \ninstall with setup.py:\n\n> python3 setup.py install --user\n\n\nrunning from the mercurial repository is also possible:\n\n> hg clone http://bitbucket.org/bthate/zelf\n\nlastely, you can also run directly from the tarball.\n\n\nU S A G E\n=========\n\n\nZELF includes one program, the zelf shell:\n\n> zelf [-m mod1,mod2] command\n \nto connect to irc use the -m zelf.irc option.\n\n> zelf -m zelf.irc -s irc.freenode.net -c \\#zelf -n zelf \n\n\nuse the ed command to edit the last object with a certain type of ZELF objects:\n\n> zelf ed zelf.entry.Log shell=False\n\n\nP R O G R A M M I N G\n=====================\n\n\nprogramming your own commands is easy, your can load modules with the -m option.\nif you create a mods directory and put your hello.py module in it, you would use:\n\n> zelf -m mods\n\nany command you have coded in hello.py would be available, see the `show cmds` command.\n\n> zelf show cmds\n\na command is a function with one argument, the event that was generated on the bot.\n\nexample:\n\n::\n\n def mycmd(event): \n     <your code here>\n\nyou can use event.reply() to send response back to the user:\n\n::\n\n def hello(event): \n    event.reply(\"hello %s\" % event.nick)\n\nafter starting zelf with -m mods, you see the hello command added to the bot:\n\n> zelf s cmds\n\ned,find,hello,ps,rm,show,stop,undel\n\n\nH A V E   F U N\n===============\n\nenjoy the coding ! ;]\n\n\nBart\n\nbthate@dds.nl | botfather #dunkbots irc.freenode.net | https://pypi.org/project/zelf | http://bitbucket.org/bthate/zelf", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://bitbucket.org/bthate/zelf.docs", "keywords": "", "license": "Public Domain", "maintainer": "", "maintainer_email": "", "name": "zelf.docs", "package_url": "https://pypi.org/project/zelf.docs/", "platform": "", "project_url": "https://pypi.org/project/zelf.docs/", "project_urls": {"Homepage": "https://bitbucket.org/bthate/zelf.docs"}, "release_url": "https://pypi.org/project/zelf.docs/1/", "requires_dist": null, "requires_python": "", "summary": "framework to program bots.", "version": "1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>R E A D M E\n###########</p>\n<p>| ZELF is a pure python3 framework to program bots, provides an IRC bot to use and is extendible by programming your own commands.\n| ZELF uses a timestamped, type in filename, JSON stringified, files on filesystem backend and has timed based logging capabilities.\n| ZELF has been placed in the Public Domain and contains no copyright or LICENSE.</p>\n<h1>C O D E</h1>\n<p>.. autosummary::\n:toctree: code\n:template: module.rst</p>\n<pre><code>zelf.all                      - include all modules.\nzelf.bot\t\t\t  - bot base class\nzelf.clock                    - timers\nzelf.cmds\t\t\t  - commands\nzelf.command                  - command parsing\nzelf.db\t\t\t  - db backend\nzelf.errors \t\t  - exceptions\nzelf.event\t\t\t  - event class\nzelf.fleet                    - list of bots\nzelf.handler                  - event handler\nzelf.irc                      - irc bot\nzelf.kernel\t\t\t  - core handler\nzelf.loader                   - module loader\nzelf.log\t\t\t  - logging module\nzelf.obj\t\t\t  - object base class.\nzelf.tasks                    - threads\nzelf.term \t\t\t  - terminal handling\nzelf.udp\t\t\t  - udp to channel relay\nzelf.user                     - manage users\nzelf.utils                    - utilities\n</code></pre>\n<h1>I N S T A L L</h1>\n<p>if you need ZELF to have access to your local directory use this:</p>\n<blockquote>\n<p>export PYTHONPATH=\".\"</p>\n</blockquote>\n<p>this will add your current directory to the pythonpath so the packages in it\ncan be found by ZELF.</p>\n<p>installation is through pypi:</p>\n<blockquote>\n<p>sudo pip3 install zelf</p>\n</blockquote>\n<p>you can also run the bot from the tarball at pypi and run it directly or\ninstall with setup.py:</p>\n<blockquote>\n<p>python3 setup.py install --user</p>\n</blockquote>\n<p>running from the mercurial repository is also possible:</p>\n<blockquote>\n<p>hg clone <a href=\"http://bitbucket.org/bthate/zelf\" rel=\"nofollow\">http://bitbucket.org/bthate/zelf</a></p>\n</blockquote>\n<p>lastely, you can also run directly from the tarball.</p>\n<h1>U S A G E</h1>\n<p>ZELF includes one program, the zelf shell:</p>\n<blockquote>\n<p>zelf [-m mod1,mod2] command</p>\n</blockquote>\n<p>to connect to irc use the -m zelf.irc option.</p>\n<blockquote>\n<p>zelf -m zelf.irc -s irc.freenode.net -c #zelf -n zelf</p>\n</blockquote>\n<p>use the ed command to edit the last object with a certain type of ZELF objects:</p>\n<blockquote>\n<p>zelf ed zelf.entry.Log shell=False</p>\n</blockquote>\n<h1>P R O G R A M M I N G</h1>\n<p>programming your own commands is easy, your can load modules with the -m option.\nif you create a mods directory and put your hello.py module in it, you would use:</p>\n<blockquote>\n<p>zelf -m mods</p>\n</blockquote>\n<p>any command you have coded in hello.py would be available, see the <code>show cmds</code> command.</p>\n<blockquote>\n<p>zelf show cmds</p>\n</blockquote>\n<p>a command is a function with one argument, the event that was generated on the bot.</p>\n<p>example:</p>\n<p>::</p>\n<p>def mycmd(event):\n&lt;your code here&gt;</p>\n<p>you can use event.reply() to send response back to the user:</p>\n<p>::</p>\n<p>def hello(event):\nevent.reply(\"hello %s\" % event.nick)</p>\n<p>after starting zelf with -m mods, you see the hello command added to the bot:</p>\n<blockquote>\n<p>zelf s cmds</p>\n</blockquote>\n<p>ed,find,hello,ps,rm,show,stop,undel</p>\n<h1>H A V E   F U N</h1>\n<p>enjoy the coding ! ;]</p>\n<p>Bart</p>\n<p><a href=\"mailto:bthate@dds.nl\">bthate@dds.nl</a> | botfather #dunkbots irc.freenode.net | <a href=\"https://pypi.org/project/zelf\" rel=\"nofollow\">https://pypi.org/project/zelf</a> | <a href=\"http://bitbucket.org/bthate/zelf\" rel=\"nofollow\">http://bitbucket.org/bthate/zelf</a></p>\n\n          </div>"}, "last_serial": 5644564, "releases": {"1": [{"comment_text": "", "digests": {"md5": "d52f1cc69227792441e665e17efbbff9", "sha256": "4b7f5faf4930f9f1f348f97a33f046bad0a128c2d0812b3955cb03d27429df9a"}, "downloads": -1, "filename": "zelf.docs-1.tar.gz", "has_sig": false, "md5_digest": "d52f1cc69227792441e665e17efbbff9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3347, "upload_time": "2019-08-07T11:41:27", "upload_time_iso_8601": "2019-08-07T11:41:27.010173Z", "url": "https://files.pythonhosted.org/packages/2f/16/60f4623b1c1cf95257b9c5ae66873ce04fa9ee244f10678cf05e054576a1/zelf.docs-1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d52f1cc69227792441e665e17efbbff9", "sha256": "4b7f5faf4930f9f1f348f97a33f046bad0a128c2d0812b3955cb03d27429df9a"}, "downloads": -1, "filename": "zelf.docs-1.tar.gz", "has_sig": false, "md5_digest": "d52f1cc69227792441e665e17efbbff9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3347, "upload_time": "2019-08-07T11:41:27", "upload_time_iso_8601": "2019-08-07T11:41:27.010173Z", "url": "https://files.pythonhosted.org/packages/2f/16/60f4623b1c1cf95257b9c5ae66873ce04fa9ee244f10678cf05e054576a1/zelf.docs-1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:18:21 2020"}