{"info": {"author": "David Garcia Garzon", "author_email": "voki@canvoki.net", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "yamlns.namespace\n================\n\n`Build Status <https://travis-ci.org/GuifiBaix/python-yamlns>`__\n\nAn ordered dictionary whose values can be accessed either as items or as\nattributes, like in Javascript Objects but with Pythonic sugar and YAML\nI/O.\n\nIt also provides some goodies:\n\n-  Direct mapping to YAML using ``dump()`` and ``load()`` methods.\n-  There are several convenient variations from the YAML specs in the\n   way value types are mapped between YAML and Python:\n\n   -  Inner YAML mappings (``dict``\\ s) are loaded as ``namespace``\\ s\n      as well instead of Python ``dict``.\n   -  Namespaces preserve the insertion order, as they are based on\n      ``odict``. This way the insertion order and the order in the\n      original loaded file is preserved when stored.\n   -  YAML floats are loaded as ``Decimal`` and ``Decimal`` objects are\n      stored as regular YAML floats. This avoids losing precision when\n      succesive load/store cycles are alternated.\n   -  YAML dates are maped to an extension of ``datetime.date`` which\n      provides output formats as attributes which are convenient to call\n      in ``format`` templates.\n\n-  Tools to ``format`` templates with complex namespace structures.\n\n   -  Given the attribute like access ``format`` templates result\n      cleaner.\n   -  API to fill a ``format`` template like file with a YAML one.\n   -  API to extract an empty YAML scheletton given a template with\n      substitutions.\n   -  Command line tool to make those two functions\n\nExample\n-------\n\n.. code:: python\n\n   >>> from yamlns import namespace as ns\n   >>> n = ns()\n   >>> n.attribute1 = \"value1\"\n   >>> ns['attribute2'] = \"value2\"\n   >>> print(n.dump())\n   attribute1: value1\n   attribute2: value2\n\n   >>> n.attribute2\n   'value2'\n   >>> n['attribute1']\n   'value1'\n\n   >>> n.update(ns.loads(\"\"\"\n   ... attribute3: value3\n   ... attribute4:\n   ...   attribute5: [ 4,3,2,value5 ] \n   ...   attribute6: 2015-09-23\n   ... attribute7:\n   ... - value7.1\n   ... - value7.2\n   ... \"\"\"))\n   >>> n.attribute4.attribute5\n   [4, 3, 2, 'value5']\n   >>> n.attribute4.attribute6\n   datetime.date(2015,9,23)\n   >>> n.attribute7\n   ['value7.1', 'value7.2']\n\nTemplating example:\n~~~~~~~~~~~~~~~~~~~\n\n.. code:: python\n\n   >>> template = (\n   ...     \"{client.name} {client.midname[0]}. {client.surname} buys {item.name} \"\n   ...     \"by {item.price.amount:0.02f} {item.price.coin}.\"\n   ... )\n   ...\n   >>> print(ns.fromTemplate(template).dump())\n   client:\n     name: ''\n     midname: ''\n     surname: ''\n   item:\n     name: ''\n     price:\n       amount: ''\n       coin: ''\n\n   >>> template.format(**ns.loads(\"\"\"\n   client:\n     name: 'John'\n     midname: 'Archivald'\n     surname: 'Doe'\n   item:\n     name: 'Apples'\n     price:\n       amount: 30\n       coin: 'dollars'\n   \"\"\"))\n   John A. Doe buys Apples by 30.00 dollars.\n\nCommand line tools usage\n------------------------\n\n.. code:: bash\n\n   nstemplate apply <template> <yamlfile> <output>\n   nstemplate extract <template> <yamlskeleton>\n\nTesting structures\n------------------\n\n.. code:: python\n\n   class MyTest(unittest.TestCase):\n\n       from yamlns.testutils import assertNsEqual\n\n       def test(self):\n           data = dict((letter, i) for i,letter in enumerate('murcielago'))\n           self.assertNsEqual(data, \"\"\"\\\n               a: 7\n               c: 3\n               e: 5\n               g: 8\n               i: 4\n               l: 6\n               m: 0\n               o: 9\n               r: 2\n               u: 1\n           \"\"\")\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/GuifiBaix/python-yamlns", "keywords": "", "license": "GNU General Public License v3 or later (GPLv3+)", "maintainer": "", "maintainer_email": "", "name": "yamlns", "package_url": "https://pypi.org/project/yamlns/", "platform": "", "project_url": "https://pypi.org/project/yamlns/", "project_urls": {"Homepage": "https://github.com/GuifiBaix/python-yamlns"}, "release_url": "https://pypi.org/project/yamlns/0.8/", "requires_dist": null, "requires_python": "", "summary": "YAML serializable dictionary with dual item and attribute accessors", "version": "0.8", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://travis-ci.org/GuifiBaix/python-yamlns\" rel=\"nofollow\">Build Status</a></p>\n<p>An ordered dictionary whose values can be accessed either as items or as\nattributes, like in Javascript Objects but with Pythonic sugar and YAML\nI/O.</p>\n<p>It also provides some goodies:</p>\n<ul>\n<li>Direct mapping to YAML using <tt>dump()</tt> and <tt>load()</tt> methods.</li>\n<li>There are several convenient variations from the YAML specs in the\nway value types are mapped between YAML and Python:<ul>\n<li>Inner YAML mappings (<tt>dict</tt>s) are loaded as <tt>namespace</tt>s\nas well instead of Python <tt>dict</tt>.</li>\n<li>Namespaces preserve the insertion order, as they are based on\n<tt>odict</tt>. This way the insertion order and the order in the\noriginal loaded file is preserved when stored.</li>\n<li>YAML floats are loaded as <tt>Decimal</tt> and <tt>Decimal</tt> objects are\nstored as regular YAML floats. This avoids losing precision when\nsuccesive load/store cycles are alternated.</li>\n<li>YAML dates are maped to an extension of <tt>datetime.date</tt> which\nprovides output formats as attributes which are convenient to call\nin <tt>format</tt> templates.</li>\n</ul>\n</li>\n<li>Tools to <tt>format</tt> templates with complex namespace structures.<ul>\n<li>Given the attribute like access <tt>format</tt> templates result\ncleaner.</li>\n<li>API to fill a <tt>format</tt> template like file with a YAML one.</li>\n<li>API to extract an empty YAML scheletton given a template with\nsubstitutions.</li>\n<li>Command line tool to make those two functions</li>\n</ul>\n</li>\n</ul>\n<div id=\"example\">\n<h2>Example</h2>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">yamlns</span> <span class=\"kn\">import</span> <span class=\"n\">namespace</span> <span class=\"k\">as</span> <span class=\"n\">ns</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">ns</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">n</span><span class=\"o\">.</span><span class=\"n\">attribute1</span> <span class=\"o\">=</span> <span class=\"s2\">\"value1\"</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">ns</span><span class=\"p\">[</span><span class=\"s1\">'attribute2'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">\"value2\"</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"o\">.</span><span class=\"n\">dump</span><span class=\"p\">())</span>\n<span class=\"n\">attribute1</span><span class=\"p\">:</span> <span class=\"n\">value1</span>\n<span class=\"n\">attribute2</span><span class=\"p\">:</span> <span class=\"n\">value2</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">n</span><span class=\"o\">.</span><span class=\"n\">attribute2</span>\n<span class=\"s1\">'value2'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">n</span><span class=\"p\">[</span><span class=\"s1\">'attribute1'</span><span class=\"p\">]</span>\n<span class=\"s1\">'value1'</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">n</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">ns</span><span class=\"o\">.</span><span class=\"n\">loads</span><span class=\"p\">(</span><span class=\"s2\">\"\"\"\n... attribute3: value3\n... attribute4:\n...   attribute5: [ 4,3,2,value5 ]\n...   attribute6: 2015-09-23\n... attribute7:\n... - value7.1\n... - value7.2\n... \"\"\"</span><span class=\"p\">))</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">n</span><span class=\"o\">.</span><span class=\"n\">attribute4</span><span class=\"o\">.</span><span class=\"n\">attribute5</span>\n<span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s1\">'value5'</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">n</span><span class=\"o\">.</span><span class=\"n\">attribute4</span><span class=\"o\">.</span><span class=\"n\">attribute6</span>\n<span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">2015</span><span class=\"p\">,</span><span class=\"mi\">9</span><span class=\"p\">,</span><span class=\"mi\">23</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">n</span><span class=\"o\">.</span><span class=\"n\">attribute7</span>\n<span class=\"p\">[</span><span class=\"s1\">'value7.1'</span><span class=\"p\">,</span> <span class=\"s1\">'value7.2'</span><span class=\"p\">]</span>\n</pre>\n<div id=\"templating-example\">\n<h3>Templating example:</h3>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">template</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n<span class=\"o\">...</span>     <span class=\"s2\">\"</span><span class=\"si\">{client.name}</span><span class=\"s2\"> </span><span class=\"si\">{client.midname[0]}</span><span class=\"s2\">. </span><span class=\"si\">{client.surname}</span><span class=\"s2\"> buys </span><span class=\"si\">{item.name}</span><span class=\"s2\"> \"</span>\n<span class=\"o\">...</span>     <span class=\"s2\">\"by </span><span class=\"si\">{item.price.amount:0.02f}</span><span class=\"s2\"> </span><span class=\"si\">{item.price.coin}</span><span class=\"s2\">.\"</span>\n<span class=\"o\">...</span> <span class=\"p\">)</span>\n<span class=\"o\">...</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">ns</span><span class=\"o\">.</span><span class=\"n\">fromTemplate</span><span class=\"p\">(</span><span class=\"n\">template</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">dump</span><span class=\"p\">())</span>\n<span class=\"n\">client</span><span class=\"p\">:</span>\n  <span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"s1\">''</span>\n  <span class=\"n\">midname</span><span class=\"p\">:</span> <span class=\"s1\">''</span>\n  <span class=\"n\">surname</span><span class=\"p\">:</span> <span class=\"s1\">''</span>\n<span class=\"n\">item</span><span class=\"p\">:</span>\n  <span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"s1\">''</span>\n  <span class=\"n\">price</span><span class=\"p\">:</span>\n    <span class=\"n\">amount</span><span class=\"p\">:</span> <span class=\"s1\">''</span>\n    <span class=\"n\">coin</span><span class=\"p\">:</span> <span class=\"s1\">''</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">template</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">ns</span><span class=\"o\">.</span><span class=\"n\">loads</span><span class=\"p\">(</span><span class=\"s2\">\"\"\"\nclient:\n  name: 'John'\n  midname: 'Archivald'\n  surname: 'Doe'\nitem:\n  name: 'Apples'\n  price:\n    amount: 30\n    coin: 'dollars'\n\"\"\"</span><span class=\"p\">))</span>\n<span class=\"n\">John</span> <span class=\"n\">A</span><span class=\"o\">.</span> <span class=\"n\">Doe</span> <span class=\"n\">buys</span> <span class=\"n\">Apples</span> <span class=\"n\">by</span> <span class=\"mf\">30.00</span> <span class=\"n\">dollars</span><span class=\"o\">.</span>\n</pre>\n</div>\n</div>\n<div id=\"command-line-tools-usage\">\n<h2>Command line tools usage</h2>\n<pre>nstemplate apply &lt;template&gt; &lt;yamlfile&gt; &lt;output&gt;\nnstemplate extract &lt;template&gt; &lt;yamlskeleton&gt;\n</pre>\n</div>\n<div id=\"testing-structures\">\n<h2>Testing structures</h2>\n<pre><span class=\"k\">class</span> <span class=\"nc\">MyTest</span><span class=\"p\">(</span><span class=\"n\">unittest</span><span class=\"o\">.</span><span class=\"n\">TestCase</span><span class=\"p\">):</span>\n\n    <span class=\"kn\">from</span> <span class=\"nn\">yamlns.testutils</span> <span class=\"kn\">import</span> <span class=\"n\">assertNsEqual</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">test</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"nb\">dict</span><span class=\"p\">((</span><span class=\"n\">letter</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span><span class=\"n\">letter</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"s1\">'murcielago'</span><span class=\"p\">))</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertNsEqual</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"s2\">\"\"\"</span><span class=\"se\">\\\n</span><span class=\"s2\">            a: 7\n            c: 3\n            e: 5\n            g: 8\n            i: 4\n            l: 6\n            m: 0\n            o: 9\n            r: 2\n            u: 1\n        \"\"\"</span><span class=\"p\">)</span>\n</pre>\n</div>\n\n          </div>"}, "last_serial": 6921279, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "b550caf98b38fcaea66e67c71ddc5d8b", "sha256": "ba8ce5ca75e8e495d64e2884d35b0c375783e9e36aa5d9e838fcd561122c8dd9"}, "downloads": -1, "filename": "yamlns-0.1.tar.gz", "has_sig": false, "md5_digest": "b550caf98b38fcaea66e67c71ddc5d8b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9270, "upload_time": "2015-11-26T09:05:18", "upload_time_iso_8601": "2015-11-26T09:05:18.801123Z", "url": "https://files.pythonhosted.org/packages/8b/1b/81591b57e4f846bf9c032b50faa8680e0901f41ccd3b2c3d5397aa62573a/yamlns-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "9cc65147ba3e5bc1b1e893bb1d10e893", "sha256": "34119ea4cc7c6d92cd4c1436ab4f03f1376a06c7334d65a447cf22c01d54b0c3"}, "downloads": -1, "filename": "yamlns-0.2.tar.gz", "has_sig": false, "md5_digest": "9cc65147ba3e5bc1b1e893bb1d10e893", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11108, "upload_time": "2016-01-21T14:50:31", "upload_time_iso_8601": "2016-01-21T14:50:31.175498Z", "url": "https://files.pythonhosted.org/packages/02/e5/49324ed1583e5fd20c58e8eb0701b633c3e699f6cf61c6891b967b211bfe/yamlns-0.2.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "d742eaceac13226b9e6a6e239571bf6e", "sha256": "3347fa06d5649751bc7626fc0d1ae5b5d55b9ea876882a42bf477d5a8ec26649"}, "downloads": -1, "filename": "yamlns-0.3.tar.gz", "has_sig": false, "md5_digest": "d742eaceac13226b9e6a6e239571bf6e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9991, "upload_time": "2016-06-24T16:17:45", "upload_time_iso_8601": "2016-06-24T16:17:45.483008Z", "url": "https://files.pythonhosted.org/packages/32/be/0ece03d47fa6e7027b704ef593ae47f1c9ac0286592bc9039e5cdb783832/yamlns-0.3.tar.gz", "yanked": false}], "0.4": [{"comment_text": "", "digests": {"md5": "a596c7766fab81202969fc86f109be43", "sha256": "eaf51781b0da78f5dba64bff07c0ed7d193426837e9bb71a0a8dadad5a12f56d"}, "downloads": -1, "filename": "yamlns-0.4.tar.gz", "has_sig": false, "md5_digest": "a596c7766fab81202969fc86f109be43", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10463, "upload_time": "2016-12-17T11:41:59", "upload_time_iso_8601": "2016-12-17T11:41:59.599574Z", "url": "https://files.pythonhosted.org/packages/6e/27/8bdfc13dc9e62eaa46dbecee582496e2ab068355998d3c20a55f1d3f1f33/yamlns-0.4.tar.gz", "yanked": false}], "0.5": [{"comment_text": "", "digests": {"md5": "c63207d78bcb68bd13d43f810b0a4d8d", "sha256": "b92717384996d8e8b85dc47a94a4b5ca3666958372abd652f08e26cb62b42fc7"}, "downloads": -1, "filename": "yamlns-0.5.tar.gz", "has_sig": false, "md5_digest": "c63207d78bcb68bd13d43f810b0a4d8d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10124, "upload_time": "2017-12-18T10:28:30", "upload_time_iso_8601": "2017-12-18T10:28:30.816750Z", "url": "https://files.pythonhosted.org/packages/91/14/130407f9fe9883f31fc1501028660485a7894331c60028edd81834c9beb0/yamlns-0.5.tar.gz", "yanked": false}], "0.6": [{"comment_text": "", "digests": {"md5": "5fa9f1c28f609a4e4bb6e2f134bcc0ef", "sha256": "d68bd80547528260f7ffd40be8a0c2c17ddc296177136b86568d710f43f59dff"}, "downloads": -1, "filename": "yamlns-0.6.tar.gz", "has_sig": false, "md5_digest": "5fa9f1c28f609a4e4bb6e2f134bcc0ef", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11810, "upload_time": "2017-12-18T10:37:15", "upload_time_iso_8601": "2017-12-18T10:37:15.383901Z", "url": "https://files.pythonhosted.org/packages/1f/a4/bba0f983d1cd9e7eb7ee281227f0a108a2ce8b6c01339e2c9bcb0b058d2c/yamlns-0.6.tar.gz", "yanked": false}], "0.7": [{"comment_text": "", "digests": {"md5": "176aa63fd7c5371eefe1c4c7d02659b3", "sha256": "70ad52e51c2b6372bc365af5375248705d1519168760981f422716587b417c57"}, "downloads": -1, "filename": "yamlns-0.7.tar.gz", "has_sig": false, "md5_digest": "176aa63fd7c5371eefe1c4c7d02659b3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13528, "upload_time": "2019-09-03T19:31:00", "upload_time_iso_8601": "2019-09-03T19:31:00.608158Z", "url": "https://files.pythonhosted.org/packages/c0/72/be6226cca5e1a4fe926249c4a53b2ff41dac65e5ccd94603a6935fec7a86/yamlns-0.7.tar.gz", "yanked": false}], "0.8": [{"comment_text": "", "digests": {"md5": "c1aa3c2e6070471c0b59a308b40de64a", "sha256": "9666bc2aed7535a11391dc08005f9f81f5af158bffb0ad72dad458ddd3ab76ec"}, "downloads": -1, "filename": "yamlns-0.8.tar.gz", "has_sig": false, "md5_digest": "c1aa3c2e6070471c0b59a308b40de64a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13554, "upload_time": "2020-03-31T16:23:05", "upload_time_iso_8601": "2020-03-31T16:23:05.166787Z", "url": "https://files.pythonhosted.org/packages/f7/5d/07b0f7d4bfd231bd5cb71f5f09c2f9a8387ec5b1b1efda98382db491a3b0/yamlns-0.8.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c1aa3c2e6070471c0b59a308b40de64a", "sha256": "9666bc2aed7535a11391dc08005f9f81f5af158bffb0ad72dad458ddd3ab76ec"}, "downloads": -1, "filename": "yamlns-0.8.tar.gz", "has_sig": false, "md5_digest": "c1aa3c2e6070471c0b59a308b40de64a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13554, "upload_time": "2020-03-31T16:23:05", "upload_time_iso_8601": "2020-03-31T16:23:05.166787Z", "url": "https://files.pythonhosted.org/packages/f7/5d/07b0f7d4bfd231bd5cb71f5f09c2f9a8387ec5b1b1efda98382db491a3b0/yamlns-0.8.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:23:17 2020"}