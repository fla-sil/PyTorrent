{"info": {"author": "Andy Boughton", "author_email": "abought@umich.edu", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": "# ZORP: A helpful GWAS parser\n\n[![Build Status](https://api.travis-ci.org/abought/zorp.svg?branch=develop)](https://api.travis-ci.org/abought/zorp)\n\n## Why?\nZORP is intended to abstract away differences in file formats, and help you work with GWAS data from many \ndifferent sources.\n\n- Provide a single unified interface to read text, gzip, or tabixed data\n- Separation of concerns between reading and parsing (with parsers that can handle the most common file formats)\n- Includes helpers to auto-detect data format and filter for variants of interest \n\n## Why not?\nZORP provides a high level abstraction. This means that it is convenient, at the expense of speed.\n\nFor GWAS files, ZORP does not sort the data for you, because doing so in python would be quite slow. You will still \nneed to do some basic data preparation before using.\n\n## Installation\nBy default, zorp installs with as few python dependencies as practical. For more performance, and to use special\n features, install the additional required dependencies as follows: \n\n`$ pip install zorp[perf,lookups]`\n\nThe snp-to-rsid lookup requires a very large file in order to work efficiently. You can download the pre-generated file\nusing the `zorp-assets` command line script, as follows.\n (use \"--no-update\" to skip warnings about already having the latest version)\n\n```bash\n$ zorp-assets download --type snp_to_rsid --tag genome_build GRCh37  --no-update\n$ zorp-assets download --type snp_to_rsid --tag genome_build GRCh37\n```\n\nOr build it manually (which may require first downloading a large source file):\n`$ zorp-assets build --type snp_to_rsid --tag genome_build GRCh37`\n\nAssets will be downloaded to the least user-specific location available, which may be overridden by setting the\n environment variable `ZORP_ASSETS_DIR`. Run `zorp-assets show --all` to see the currently selected asset directory.\n\n\n### A note on rsID lookups\nWhen developing on your laptop, you may not wish to download 16 GB of data per rsID lookup. A much smaller \"test\"\n dataset is available, which contains rsID data for a handful of pre-selected genes of known biological functionality.\n\n`$ zorp-assets download --type snp_to_rsid_test --tag genome_build GRCh37`\n\nTo use it in your python script, simply add an argument to the SnpToRsid constructor: \n\n`rsid_finder = lookups.SnpToRsid('GRCh37', test=True)`\n\nIf you have generated your own lookup using the code in this repo (`make_rsid_lookup.py`), you may also replace \nthe genome build with a hardcoded path to the LMDB file of lookup data. This use case is fairly uncommon, however.\n\n## Usage\n### Python\n```python\nfrom zorp import lookups, readers, parsers\n\n# Create a reader instance. This example specifies each option for clarity, but sniffers are provided to auto-detect \n#   common format options.\nsample_parser = parsers.GenericGwasLineParser(marker_col=1, pvalue_col=2, is_neg_log_pvalue=True,\n                                              delimiter='\\t')\nreader = readers.TabixReader('input.bgz', parser=sample_parser, skip_rows=1, skip_errors=True)\n\n# After parsing the data, values of pre-defined fields can be used to perform lookups for the value of one field\n#  Lookups can be reusable functions with no dependence on zorp\nrsid_finder = lookups.SnpToRsid('GRCh37')\n\nreader.add_lookup('rsid', lambda variant: rsid_finder(variant.chrom, variant.pos, variant.ref, variant.alt))\n\n# Sometimes a more powerful syntax is needed- the ability to look up several fields at once, or clean up parsed data \n#   in some way unique to this dataset \nreader.add_transform(lambda variant: mutate_entire_variant(variant))\n\n# We can filter data to the variants of interest. If you use a domain specific parser, columns can be referenced by name\nreader.add_filter('chrom', '19')  # This row must have the specified value for the \"chrom\" field\nreader.add_filter(lambda row: row.neg_log_pvalue > 7.301)  # Provide a function that can operate on all parsed fields\nreader.add_filter('neg_log_pvalue')  # Exclude values with missing data for the named field  \n\n# Iteration returns containers of cleaned, parsed data (with fields accessible by name).\nfor row in reader:\n    print(row.chrom)\n\n# Tabix files support iterating over all or part of the file\nfor row in reader.fetch('X', 500_000, 1_000_000):\n    print(row)\n\n# Write a compressed, tabix-indexed file containing the subset of variants that match filters, choosing only specific \n#   columns. The data written out will be cleaned and standardized by the parser into a well-defined format. \nout_fn = reader.write('outfile.txt', columns=['chrom', 'pos', 'pvalue'], make_tabix=True)\n\n# Real data is often messy. If a line fails to parse, the problem will be recorded.\nfor number, message, raw_line in reader.errors:\n    print('Line {} failed to parse: {}'.format(number, message))\n\n```\n\n### Command line file conversion\nThe file conversion feature of zorp is also available as a command line utility. See `zorp-convert --help` for details\nand the full list of supported options.\n\nThis utility is currently in beta; please inspect the results carefully.\n\nTo auto-detect columns based on a library of commonly known file formats:\n\n`$ zorp-convert --auto infile.txt --dest outfile.txt --compress`\n\nOr specify your data columns exactly: \n\n`$ zorp-convert infile.txt --dest outfile.txt --index  --skip-rows 1 --chrom_col 1 --pos_col 2 --ref_col 3 --alt_col 4 --pvalue_col 5 --beta_col 6 --stderr_beta_col 7 --allele_freq_col 8`\n\nThe `--index` option requires that your file be sorted first. If not, you can tabix the standard output format manually \nas follows.\n\n```\n$ (head -n 1 <filename.txt> && tail -n +2 <file> | sort -k1,1 -k 2,2n) | bgzip > <filename.sorted.gz>\n$ tabix <filename.sorted.gz> -p vcf\n```\n\n## Development\n\nTo install dependencies and run in development mode:\n\n`pip install -e '.[test,perf,lookups]'`\n\nTo run unit tests, use\n\n```bash\n$ flake8 zorp\n$ mypy zorp\n$ pytest tests/\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/abought/zorp", "keywords": "sample setuptools development", "license": "", "maintainer": "", "maintainer_email": "", "name": "zorp", "package_url": "https://pypi.org/project/zorp/", "platform": "", "project_url": "https://pypi.org/project/zorp/", "project_urls": {"Bug Reports": "https://github.com/abought/zorp/issues", "Homepage": "https://github.com/abought/zorp", "Source": "https://github.com/abought/zorp/"}, "release_url": "https://pypi.org/project/zorp/0.3.0/", "requires_dist": ["pysam", "filefetcher", "lmdb ; extra == 'lookups'", "msgpack (==1.0.0) ; extra == 'lookups'", "fastnumbers (==2.2.1) ; extra == 'perf'", "coverage ; extra == 'test'", "pytest ; extra == 'test'", "pytest-flake8 ; extra == 'test'", "pytest-mypy ; extra == 'test'"], "requires_python": ">=3.5", "summary": "ZORP: A helpful GWAS parser", "version": "0.3.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>ZORP: A helpful GWAS parser</h1>\n<p><a href=\"https://api.travis-ci.org/abought/zorp\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9539fac2c351200d826d66d92720b77a3dd532be/68747470733a2f2f6170692e7472617669732d63692e6f72672f61626f756768742f7a6f72702e7376673f6272616e63683d646576656c6f70\"></a></p>\n<h2>Why?</h2>\n<p>ZORP is intended to abstract away differences in file formats, and help you work with GWAS data from many\ndifferent sources.</p>\n<ul>\n<li>Provide a single unified interface to read text, gzip, or tabixed data</li>\n<li>Separation of concerns between reading and parsing (with parsers that can handle the most common file formats)</li>\n<li>Includes helpers to auto-detect data format and filter for variants of interest</li>\n</ul>\n<h2>Why not?</h2>\n<p>ZORP provides a high level abstraction. This means that it is convenient, at the expense of speed.</p>\n<p>For GWAS files, ZORP does not sort the data for you, because doing so in python would be quite slow. You will still\nneed to do some basic data preparation before using.</p>\n<h2>Installation</h2>\n<p>By default, zorp installs with as few python dependencies as practical. For more performance, and to use special\nfeatures, install the additional required dependencies as follows:</p>\n<p><code>$ pip install zorp[perf,lookups]</code></p>\n<p>The snp-to-rsid lookup requires a very large file in order to work efficiently. You can download the pre-generated file\nusing the <code>zorp-assets</code> command line script, as follows.\n(use \"--no-update\" to skip warnings about already having the latest version)</p>\n<pre>$ zorp-assets download --type snp_to_rsid --tag genome_build GRCh37  --no-update\n$ zorp-assets download --type snp_to_rsid --tag genome_build GRCh37\n</pre>\n<p>Or build it manually (which may require first downloading a large source file):\n<code>$ zorp-assets build --type snp_to_rsid --tag genome_build GRCh37</code></p>\n<p>Assets will be downloaded to the least user-specific location available, which may be overridden by setting the\nenvironment variable <code>ZORP_ASSETS_DIR</code>. Run <code>zorp-assets show --all</code> to see the currently selected asset directory.</p>\n<h3>A note on rsID lookups</h3>\n<p>When developing on your laptop, you may not wish to download 16 GB of data per rsID lookup. A much smaller \"test\"\ndataset is available, which contains rsID data for a handful of pre-selected genes of known biological functionality.</p>\n<p><code>$ zorp-assets download --type snp_to_rsid_test --tag genome_build GRCh37</code></p>\n<p>To use it in your python script, simply add an argument to the SnpToRsid constructor:</p>\n<p><code>rsid_finder = lookups.SnpToRsid('GRCh37', test=True)</code></p>\n<p>If you have generated your own lookup using the code in this repo (<code>make_rsid_lookup.py</code>), you may also replace\nthe genome build with a hardcoded path to the LMDB file of lookup data. This use case is fairly uncommon, however.</p>\n<h2>Usage</h2>\n<h3>Python</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">zorp</span> <span class=\"kn\">import</span> <span class=\"n\">lookups</span><span class=\"p\">,</span> <span class=\"n\">readers</span><span class=\"p\">,</span> <span class=\"n\">parsers</span>\n\n<span class=\"c1\"># Create a reader instance. This example specifies each option for clarity, but sniffers are provided to auto-detect </span>\n<span class=\"c1\">#   common format options.</span>\n<span class=\"n\">sample_parser</span> <span class=\"o\">=</span> <span class=\"n\">parsers</span><span class=\"o\">.</span><span class=\"n\">GenericGwasLineParser</span><span class=\"p\">(</span><span class=\"n\">marker_col</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">pvalue_col</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">is_neg_log_pvalue</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                                              <span class=\"n\">delimiter</span><span class=\"o\">=</span><span class=\"s1\">'</span><span class=\"se\">\\t</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n<span class=\"n\">reader</span> <span class=\"o\">=</span> <span class=\"n\">readers</span><span class=\"o\">.</span><span class=\"n\">TabixReader</span><span class=\"p\">(</span><span class=\"s1\">'input.bgz'</span><span class=\"p\">,</span> <span class=\"n\">parser</span><span class=\"o\">=</span><span class=\"n\">sample_parser</span><span class=\"p\">,</span> <span class=\"n\">skip_rows</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">skip_errors</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># After parsing the data, values of pre-defined fields can be used to perform lookups for the value of one field</span>\n<span class=\"c1\">#  Lookups can be reusable functions with no dependence on zorp</span>\n<span class=\"n\">rsid_finder</span> <span class=\"o\">=</span> <span class=\"n\">lookups</span><span class=\"o\">.</span><span class=\"n\">SnpToRsid</span><span class=\"p\">(</span><span class=\"s1\">'GRCh37'</span><span class=\"p\">)</span>\n\n<span class=\"n\">reader</span><span class=\"o\">.</span><span class=\"n\">add_lookup</span><span class=\"p\">(</span><span class=\"s1\">'rsid'</span><span class=\"p\">,</span> <span class=\"k\">lambda</span> <span class=\"n\">variant</span><span class=\"p\">:</span> <span class=\"n\">rsid_finder</span><span class=\"p\">(</span><span class=\"n\">variant</span><span class=\"o\">.</span><span class=\"n\">chrom</span><span class=\"p\">,</span> <span class=\"n\">variant</span><span class=\"o\">.</span><span class=\"n\">pos</span><span class=\"p\">,</span> <span class=\"n\">variant</span><span class=\"o\">.</span><span class=\"n\">ref</span><span class=\"p\">,</span> <span class=\"n\">variant</span><span class=\"o\">.</span><span class=\"n\">alt</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># Sometimes a more powerful syntax is needed- the ability to look up several fields at once, or clean up parsed data </span>\n<span class=\"c1\">#   in some way unique to this dataset </span>\n<span class=\"n\">reader</span><span class=\"o\">.</span><span class=\"n\">add_transform</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">variant</span><span class=\"p\">:</span> <span class=\"n\">mutate_entire_variant</span><span class=\"p\">(</span><span class=\"n\">variant</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># We can filter data to the variants of interest. If you use a domain specific parser, columns can be referenced by name</span>\n<span class=\"n\">reader</span><span class=\"o\">.</span><span class=\"n\">add_filter</span><span class=\"p\">(</span><span class=\"s1\">'chrom'</span><span class=\"p\">,</span> <span class=\"s1\">'19'</span><span class=\"p\">)</span>  <span class=\"c1\"># This row must have the specified value for the \"chrom\" field</span>\n<span class=\"n\">reader</span><span class=\"o\">.</span><span class=\"n\">add_filter</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">row</span><span class=\"p\">:</span> <span class=\"n\">row</span><span class=\"o\">.</span><span class=\"n\">neg_log_pvalue</span> <span class=\"o\">&gt;</span> <span class=\"mf\">7.301</span><span class=\"p\">)</span>  <span class=\"c1\"># Provide a function that can operate on all parsed fields</span>\n<span class=\"n\">reader</span><span class=\"o\">.</span><span class=\"n\">add_filter</span><span class=\"p\">(</span><span class=\"s1\">'neg_log_pvalue'</span><span class=\"p\">)</span>  <span class=\"c1\"># Exclude values with missing data for the named field  </span>\n\n<span class=\"c1\"># Iteration returns containers of cleaned, parsed data (with fields accessible by name).</span>\n<span class=\"k\">for</span> <span class=\"n\">row</span> <span class=\"ow\">in</span> <span class=\"n\">reader</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">row</span><span class=\"o\">.</span><span class=\"n\">chrom</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Tabix files support iterating over all or part of the file</span>\n<span class=\"k\">for</span> <span class=\"n\">row</span> <span class=\"ow\">in</span> <span class=\"n\">reader</span><span class=\"o\">.</span><span class=\"n\">fetch</span><span class=\"p\">(</span><span class=\"s1\">'X'</span><span class=\"p\">,</span> <span class=\"mi\">500_000</span><span class=\"p\">,</span> <span class=\"mi\">1_000_000</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">row</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Write a compressed, tabix-indexed file containing the subset of variants that match filters, choosing only specific </span>\n<span class=\"c1\">#   columns. The data written out will be cleaned and standardized by the parser into a well-defined format. </span>\n<span class=\"n\">out_fn</span> <span class=\"o\">=</span> <span class=\"n\">reader</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"s1\">'outfile.txt'</span><span class=\"p\">,</span> <span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'chrom'</span><span class=\"p\">,</span> <span class=\"s1\">'pos'</span><span class=\"p\">,</span> <span class=\"s1\">'pvalue'</span><span class=\"p\">],</span> <span class=\"n\">make_tabix</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Real data is often messy. If a line fails to parse, the problem will be recorded.</span>\n<span class=\"k\">for</span> <span class=\"n\">number</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"p\">,</span> <span class=\"n\">raw_line</span> <span class=\"ow\">in</span> <span class=\"n\">reader</span><span class=\"o\">.</span><span class=\"n\">errors</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Line </span><span class=\"si\">{}</span><span class=\"s1\"> failed to parse: </span><span class=\"si\">{}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">number</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"p\">))</span>\n</pre>\n<h3>Command line file conversion</h3>\n<p>The file conversion feature of zorp is also available as a command line utility. See <code>zorp-convert --help</code> for details\nand the full list of supported options.</p>\n<p>This utility is currently in beta; please inspect the results carefully.</p>\n<p>To auto-detect columns based on a library of commonly known file formats:</p>\n<p><code>$ zorp-convert --auto infile.txt --dest outfile.txt --compress</code></p>\n<p>Or specify your data columns exactly:</p>\n<p><code>$ zorp-convert infile.txt --dest outfile.txt --index --skip-rows 1 --chrom_col 1 --pos_col 2 --ref_col 3 --alt_col 4 --pvalue_col 5 --beta_col 6 --stderr_beta_col 7 --allele_freq_col 8</code></p>\n<p>The <code>--index</code> option requires that your file be sorted first. If not, you can tabix the standard output format manually\nas follows.</p>\n<pre><code>$ (head -n 1 &lt;filename.txt&gt; &amp;&amp; tail -n +2 &lt;file&gt; | sort -k1,1 -k 2,2n) | bgzip &gt; &lt;filename.sorted.gz&gt;\n$ tabix &lt;filename.sorted.gz&gt; -p vcf\n</code></pre>\n<h2>Development</h2>\n<p>To install dependencies and run in development mode:</p>\n<p><code>pip install -e '.[test,perf,lookups]'</code></p>\n<p>To run unit tests, use</p>\n<pre>$ flake8 zorp\n$ mypy zorp\n$ pytest tests/\n</pre>\n\n          </div>"}, "last_serial": 7042212, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "9b6487e29b7f3b0f8ee5b2685c028c40", "sha256": "29a5761bdbb3d2d816277a946b24138ed9ca5c34cc41d9311fecf108e70268a1"}, "downloads": -1, "filename": "zorp-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "9b6487e29b7f3b0f8ee5b2685c028c40", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 19252, "upload_time": "2019-10-07T21:27:45", "upload_time_iso_8601": "2019-10-07T21:27:45.490641Z", "url": "https://files.pythonhosted.org/packages/1c/64/fa56530edd8238988923f4c2718502c0d93ece21d208955d22db09c93a7d/zorp-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4beade8d7c56e804dee88bac5248fa15", "sha256": "bdf06ecb4e7e6eb4afb16be977b20e29fa4112b6fc42cf6c641e8350e47e23ef"}, "downloads": -1, "filename": "zorp-0.1.0.tar.gz", "has_sig": false, "md5_digest": "4beade8d7c56e804dee88bac5248fa15", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 19658, "upload_time": "2019-10-07T21:27:48", "upload_time_iso_8601": "2019-10-07T21:27:48.360664Z", "url": "https://files.pythonhosted.org/packages/1b/d6/c1d0e42427d616672788d9354f6cb071db3fd70f89b9ed22636505abf417/zorp-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "6ad4de35f5207d6008a211fbdb2bfe0b", "sha256": "5666fefe8ab3401903895ce5142a45b290ed72c1c776e98d3e5d556fbde2359e"}, "downloads": -1, "filename": "zorp-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "6ad4de35f5207d6008a211fbdb2bfe0b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 19449, "upload_time": "2019-12-18T17:01:44", "upload_time_iso_8601": "2019-12-18T17:01:44.706782Z", "url": "https://files.pythonhosted.org/packages/bb/04/bd3571c9ece67f526683c8f0e5346431933819cc2630e94ddfbce692e9ee/zorp-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "08e7323fe6ec8e9c41ab944e78d93ade", "sha256": "762f223c6fd5910b2bc37542c3c24056e72490a487a9855ee7c82c87ce988e96"}, "downloads": -1, "filename": "zorp-0.1.1.tar.gz", "has_sig": false, "md5_digest": "08e7323fe6ec8e9c41ab944e78d93ade", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 19808, "upload_time": "2019-12-18T17:01:46", "upload_time_iso_8601": "2019-12-18T17:01:46.924547Z", "url": "https://files.pythonhosted.org/packages/2c/64/6b0b3f1b6a536b9fa449abac72318444cdcc85e51b6f012c95b74bf74e97/zorp-0.1.1.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "9e3df62f9b7824027226924a1b85f29d", "sha256": "0a0f93dc3b401c45d4fe460d465e21b9b3ff150e2144e0d6de02d5d5a7b77ff5"}, "downloads": -1, "filename": "zorp-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "9e3df62f9b7824027226924a1b85f29d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 20071, "upload_time": "2020-01-20T21:34:45", "upload_time_iso_8601": "2020-01-20T21:34:45.117221Z", "url": "https://files.pythonhosted.org/packages/a9/15/826bf7992c684dd1c5c80c1c3e421f522c20d5aebbfb21be4e9b8b4d5b96/zorp-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ad9a8bb840d9376a9df21b080f6c2551", "sha256": "21ea8832aa43f5c3d79866bbc97284b749082ad141fc8c0983e133d52846b31f"}, "downloads": -1, "filename": "zorp-0.2.0.tar.gz", "has_sig": false, "md5_digest": "ad9a8bb840d9376a9df21b080f6c2551", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 20497, "upload_time": "2020-01-20T21:34:46", "upload_time_iso_8601": "2020-01-20T21:34:46.468861Z", "url": "https://files.pythonhosted.org/packages/c5/7c/bc76a95c59eb9b4c9f0ca704807656567afa8cb822e624f4d422e9757182/zorp-0.2.0.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "4fa8740426f7d61753a6ba9e3ea38aba", "sha256": "ccf28da14b11a11b658d1696671abb25d28926b4e6602b1ccf9c5db7ac50812e"}, "downloads": -1, "filename": "zorp-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "4fa8740426f7d61753a6ba9e3ea38aba", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 29478, "upload_time": "2020-04-17T18:11:58", "upload_time_iso_8601": "2020-04-17T18:11:58.925102Z", "url": "https://files.pythonhosted.org/packages/2b/e8/7ebeac8abaf5a8e67422e5e8a4cec9894bf12dfd4b1300517772334c3a4b/zorp-0.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f6e921cd656b3a89c143c91f1e164df5", "sha256": "e553425e0e0fe9df7a3079273bc0c002e5cefc69c8ee23b1954abe9af3526c3b"}, "downloads": -1, "filename": "zorp-0.3.0.tar.gz", "has_sig": false, "md5_digest": "f6e921cd656b3a89c143c91f1e164df5", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 28485, "upload_time": "2020-04-17T18:12:00", "upload_time_iso_8601": "2020-04-17T18:12:00.314393Z", "url": "https://files.pythonhosted.org/packages/5b/f1/43f4cf976b27025dcd4678c239ca88cc1df103c743cfc40c3779c5072d71/zorp-0.3.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4fa8740426f7d61753a6ba9e3ea38aba", "sha256": "ccf28da14b11a11b658d1696671abb25d28926b4e6602b1ccf9c5db7ac50812e"}, "downloads": -1, "filename": "zorp-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "4fa8740426f7d61753a6ba9e3ea38aba", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 29478, "upload_time": "2020-04-17T18:11:58", "upload_time_iso_8601": "2020-04-17T18:11:58.925102Z", "url": "https://files.pythonhosted.org/packages/2b/e8/7ebeac8abaf5a8e67422e5e8a4cec9894bf12dfd4b1300517772334c3a4b/zorp-0.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f6e921cd656b3a89c143c91f1e164df5", "sha256": "e553425e0e0fe9df7a3079273bc0c002e5cefc69c8ee23b1954abe9af3526c3b"}, "downloads": -1, "filename": "zorp-0.3.0.tar.gz", "has_sig": false, "md5_digest": "f6e921cd656b3a89c143c91f1e164df5", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 28485, "upload_time": "2020-04-17T18:12:00", "upload_time_iso_8601": "2020-04-17T18:12:00.314393Z", "url": "https://files.pythonhosted.org/packages/5b/f1/43f4cf976b27025dcd4678c239ca88cc1df103c743cfc40c3779c5072d71/zorp-0.3.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:11:36 2020"}