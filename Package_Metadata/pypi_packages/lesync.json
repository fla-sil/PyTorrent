{"info": {"author": "Imbolc", "author_email": "imbolc@imbolc.name", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "Lesync\n======\nHttp helpers for `django-channels`\n\nHello world\n-----------\n```python\nfrom lesync import login_required\n\n@login_required\nasync def hello(request):\n    return {'hello': request.user.username}\n```\n\nInstall\n-------\n\n    pip install lesync\n\nAdd `ApiConsumer` into your `routing.py`:\n\n```python\nfrom django.urls import path\nfrom channels.routing import ProtocolTypeRouter, URLRouter\nfrom channels.sessions import SessionMiddlewareStack\nfrom lesync import ApiConsumer\n\napplication = ProtocolTypeRouter({\n    # ... websockets or something\n    'http': SessionMiddlewareStack(\n        URLRouter([\n            path('/async/<path:path>', ApiConsumer),\n            # ... fallback to sync views\n        ]),\n    ),\n})\n```\n\nThat's it. Now you can add async views which will be served win `/async/` url\nprefix.\n\n\nRequest\n-------\nSubclass of `channels.http.AsgiRequest` with:\n\n- `json` attribute\n- `async load_user()` method - which returns standard django user\n- `user` attribute - it's available after calling `load_user()` of if you use\n    `@login_required` or `@staff_member_required` decorators\n\n\nResponse\n--------\nIn addition to `django.http.HttpResponse`\nyou can use sugary json responses and streaming:\n\n```python\nasync def standard(request):\n    return HttpResponse('hello, world')\n\nasync def json_data(request):\n    return {'hello': 'world'}\n\nasync def with_status(request):\n    return {'bad': 'request'}, 400\n\nasync def with_headers(request):\n    return {}, 200, {'my': 'header'}\n\nasync def streaming(request):\n    async def stream():\n        for i in range(1, 1000):\n            yield f'{i},{i**2}\\n'\n            await asyncio.sleep(.1)\n    return stream(), 200, {'Content-Type': 'text/csv'}\n```\n\n\nAuth\n----\nFamiliar `@login_required` and `@staff_member_required` decorators:\n\n```python\nfrom lesync import staff_member_required\n\n@staff_member_required\nasync def hello(request):\n    return {'admin': request.user.username}\n```\n\n\nRequest validation\n------------------\nYou can use `@validate_query` and `@validate_json` decorators\nto validate requests data. They're using `trafaret` library to perform\nvalidation, so make sure it's installed.\n\n```python\nfrom lesync.trafaret import validate_json\n\n@validate_json({'ids': [int], 'hello?': str})\nasync def foo(request):\n    return request.json\n```\n\n\nTests\n-----\n```bash\n    python -m venv .venv\n    source .venv/bin/activate\n    pip install -Ur requirements-dev.txt\n    python -m pytest tests/\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/imbolc/lesync", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "lesync", "package_url": "https://pypi.org/project/lesync/", "platform": "", "project_url": "https://pypi.org/project/lesync/", "project_urls": {"Homepage": "https://github.com/imbolc/lesync"}, "release_url": "https://pypi.org/project/lesync/0.4.0/", "requires_dist": ["django", "channels"], "requires_python": "", "summary": "Http helpers for django-channels", "version": "0.4.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Lesync</h1>\n<p>Http helpers for <code>django-channels</code></p>\n<h2>Hello world</h2>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">lesync</span> <span class=\"kn\">import</span> <span class=\"n\">login_required</span>\n\n<span class=\"nd\">@login_required</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">hello</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"s1\">'hello'</span><span class=\"p\">:</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">username</span><span class=\"p\">}</span>\n</pre>\n<h2>Install</h2>\n<pre><code>pip install lesync\n</code></pre>\n<p>Add <code>ApiConsumer</code> into your <code>routing.py</code>:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">django.urls</span> <span class=\"kn\">import</span> <span class=\"n\">path</span>\n<span class=\"kn\">from</span> <span class=\"nn\">channels.routing</span> <span class=\"kn\">import</span> <span class=\"n\">ProtocolTypeRouter</span><span class=\"p\">,</span> <span class=\"n\">URLRouter</span>\n<span class=\"kn\">from</span> <span class=\"nn\">channels.sessions</span> <span class=\"kn\">import</span> <span class=\"n\">SessionMiddlewareStack</span>\n<span class=\"kn\">from</span> <span class=\"nn\">lesync</span> <span class=\"kn\">import</span> <span class=\"n\">ApiConsumer</span>\n\n<span class=\"n\">application</span> <span class=\"o\">=</span> <span class=\"n\">ProtocolTypeRouter</span><span class=\"p\">({</span>\n    <span class=\"c1\"># ... websockets or something</span>\n    <span class=\"s1\">'http'</span><span class=\"p\">:</span> <span class=\"n\">SessionMiddlewareStack</span><span class=\"p\">(</span>\n        <span class=\"n\">URLRouter</span><span class=\"p\">([</span>\n            <span class=\"n\">path</span><span class=\"p\">(</span><span class=\"s1\">'/async/&lt;path:path&gt;'</span><span class=\"p\">,</span> <span class=\"n\">ApiConsumer</span><span class=\"p\">),</span>\n            <span class=\"c1\"># ... fallback to sync views</span>\n        <span class=\"p\">]),</span>\n    <span class=\"p\">),</span>\n<span class=\"p\">})</span>\n</pre>\n<p>That's it. Now you can add async views which will be served win <code>/async/</code> url\nprefix.</p>\n<h2>Request</h2>\n<p>Subclass of <code>channels.http.AsgiRequest</code> with:</p>\n<ul>\n<li><code>json</code> attribute</li>\n<li><code>async load_user()</code> method - which returns standard django user</li>\n<li><code>user</code> attribute - it's available after calling <code>load_user()</code> of if you use\n<code>@login_required</code> or <code>@staff_member_required</code> decorators</li>\n</ul>\n<h2>Response</h2>\n<p>In addition to <code>django.http.HttpResponse</code>\nyou can use sugary json responses and streaming:</p>\n<pre><span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">standard</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">HttpResponse</span><span class=\"p\">(</span><span class=\"s1\">'hello, world'</span><span class=\"p\">)</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">json_data</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"s1\">'hello'</span><span class=\"p\">:</span> <span class=\"s1\">'world'</span><span class=\"p\">}</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">with_status</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"s1\">'bad'</span><span class=\"p\">:</span> <span class=\"s1\">'request'</span><span class=\"p\">},</span> <span class=\"mi\">400</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">with_headers</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"p\">{},</span> <span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">'my'</span><span class=\"p\">:</span> <span class=\"s1\">'header'</span><span class=\"p\">}</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">streaming</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">stream</span><span class=\"p\">():</span>\n        <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1000</span><span class=\"p\">):</span>\n            <span class=\"k\">yield</span> <span class=\"sa\">f</span><span class=\"s1\">'</span><span class=\"si\">{</span><span class=\"n\">i</span><span class=\"si\">}</span><span class=\"s1\">,</span><span class=\"si\">{</span><span class=\"n\">i</span><span class=\"o\">**</span><span class=\"mi\">2</span><span class=\"si\">}</span><span class=\"se\">\\n</span><span class=\"s1\">'</span>\n            <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">stream</span><span class=\"p\">(),</span> <span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">'Content-Type'</span><span class=\"p\">:</span> <span class=\"s1\">'text/csv'</span><span class=\"p\">}</span>\n</pre>\n<h2>Auth</h2>\n<p>Familiar <code>@login_required</code> and <code>@staff_member_required</code> decorators:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">lesync</span> <span class=\"kn\">import</span> <span class=\"n\">staff_member_required</span>\n\n<span class=\"nd\">@staff_member_required</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">hello</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"s1\">'admin'</span><span class=\"p\">:</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">username</span><span class=\"p\">}</span>\n</pre>\n<h2>Request validation</h2>\n<p>You can use <code>@validate_query</code> and <code>@validate_json</code> decorators\nto validate requests data. They're using <code>trafaret</code> library to perform\nvalidation, so make sure it's installed.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">lesync.trafaret</span> <span class=\"kn\">import</span> <span class=\"n\">validate_json</span>\n\n<span class=\"nd\">@validate_json</span><span class=\"p\">({</span><span class=\"s1\">'ids'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">],</span> <span class=\"s1\">'hello?'</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">})</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">json</span>\n</pre>\n<h2>Tests</h2>\n<pre>    python -m venv .venv\n    <span class=\"nb\">source</span> .venv/bin/activate\n    pip install -Ur requirements-dev.txt\n    python -m pytest tests/\n</pre>\n\n          </div>"}, "last_serial": 6501410, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "3e42abf4650768632ff3408b5fe9218a", "sha256": "419ac7080ef77b6b187404675895c5956159ad1e504ef356d75acecd041b7c58"}, "downloads": -1, "filename": "lesync-0.0.1.tar.gz", "has_sig": false, "md5_digest": "3e42abf4650768632ff3408b5fe9218a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2383, "upload_time": "2018-09-09T07:52:48", "upload_time_iso_8601": "2018-09-09T07:52:48.170322Z", "url": "https://files.pythonhosted.org/packages/bc/2b/8ab33292f1ac00eaebd1d2098276d084b4f8e0b4bd8bfcc8d59971960ca2/lesync-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "23865ac9796655ffcb57424a44e9b781", "sha256": "d2797033d2900984359f225ad08de8c2ac5bb7a94402433bfda8b254b71eda3a"}, "downloads": -1, "filename": "lesync-0.0.2.tar.gz", "has_sig": false, "md5_digest": "23865ac9796655ffcb57424a44e9b781", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3526, "upload_time": "2018-09-15T12:03:54", "upload_time_iso_8601": "2018-09-15T12:03:54.173634Z", "url": "https://files.pythonhosted.org/packages/06/3a/0178ffd2b7f93167b8c39cb1d36ee194b1a4e94c5a17cfb95b9f076f11c4/lesync-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "4c95a8ff8938a291a8e679a1e4b42ec8", "sha256": "a3f97c0ce0d27f9e1630702767c6ed388844c75fcd26e35dadbbd53931dc0651"}, "downloads": -1, "filename": "lesync-0.0.3.tar.gz", "has_sig": false, "md5_digest": "4c95a8ff8938a291a8e679a1e4b42ec8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4295, "upload_time": "2018-09-16T08:50:56", "upload_time_iso_8601": "2018-09-16T08:50:56.587543Z", "url": "https://files.pythonhosted.org/packages/ae/7b/3fa7630fa59cc68516d431ba73b03257838fd86eb6c4f1bc78e0edd0822d/lesync-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "fe4cf2ea85fbbfeaebf39aa5a7c60388", "sha256": "b10a9d29b8ffe29a8868dea7a4a76c9e8d71c626671f340f3cebf3f0ba0f56c9"}, "downloads": -1, "filename": "lesync-0.0.4.tar.gz", "has_sig": false, "md5_digest": "fe4cf2ea85fbbfeaebf39aa5a7c60388", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4350, "upload_time": "2018-09-27T07:27:11", "upload_time_iso_8601": "2018-09-27T07:27:11.164780Z", "url": "https://files.pythonhosted.org/packages/6b/7a/c17928dd0e6ca3dfb32d595fde9f43026ca772248b036dd7621691263461/lesync-0.0.4.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "3b88e619eb9b4e8c2bb1c579521f14e1", "sha256": "a3791defc3f990f4326c0065ce22a7990b96772b0c13ed9b70f14b05c0376b21"}, "downloads": -1, "filename": "lesync-0.1.0.tar.gz", "has_sig": false, "md5_digest": "3b88e619eb9b4e8c2bb1c579521f14e1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4703, "upload_time": "2018-10-20T11:09:43", "upload_time_iso_8601": "2018-10-20T11:09:43.636753Z", "url": "https://files.pythonhosted.org/packages/e2/ec/3291a7a6f20e8f5edbbd914ee5c18c6592b660114becaa43f898060bbd7c/lesync-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "cab342fc6093fc4ed18d328c8a5148c9", "sha256": "3ab2096380d445512df6bf02e4c90c177965138c0ab7f1ebfa465b4adc27ce34"}, "downloads": -1, "filename": "lesync-0.2.0.tar.gz", "has_sig": false, "md5_digest": "cab342fc6093fc4ed18d328c8a5148c9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4747, "upload_time": "2018-11-23T02:14:32", "upload_time_iso_8601": "2018-11-23T02:14:32.256095Z", "url": "https://files.pythonhosted.org/packages/56/9e/68637d9c935ae49b5c4e0078edc8c711f8357f945ac76a63fdda6b4b63bf/lesync-0.2.0.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "ac5dac60f918273c372d7c2e6470878f", "sha256": "a0614f9bed13902eb406a81c2b82bf20783c76c6dfce322270b7cb38deb65fbc"}, "downloads": -1, "filename": "lesync-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "ac5dac60f918273c372d7c2e6470878f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5390, "upload_time": "2019-07-12T06:32:30", "upload_time_iso_8601": "2019-07-12T06:32:30.039212Z", "url": "https://files.pythonhosted.org/packages/8f/33/1741cb6ae7810b1ad68e2ca045f31981951e3dbec47bfe02733880b1db87/lesync-0.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6e3cf2d4acd49ac0abbe3ad67f469f4f", "sha256": "371446df0c031827e645eb2cf3a36580bf7ac3917ab357b35f81f5e5d88a4dba"}, "downloads": -1, "filename": "lesync-0.3.0.tar.gz", "has_sig": false, "md5_digest": "6e3cf2d4acd49ac0abbe3ad67f469f4f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4830, "upload_time": "2019-07-12T06:32:31", "upload_time_iso_8601": "2019-07-12T06:32:31.700008Z", "url": "https://files.pythonhosted.org/packages/bb/16/be6f3c7008cc0889d973a2a668f7c559c272981a570373a447bf2096e0a8/lesync-0.3.0.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "1e885f39965e215753dd3aba83a69cc1", "sha256": "80a3cde525afbf5644bce1b209c8814ffe82694bdd0597f5cc50858fb66f953a"}, "downloads": -1, "filename": "lesync-0.4.0-py3-none-any.whl", "has_sig": false, "md5_digest": "1e885f39965e215753dd3aba83a69cc1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5598, "upload_time": "2020-01-22T16:59:49", "upload_time_iso_8601": "2020-01-22T16:59:49.885644Z", "url": "https://files.pythonhosted.org/packages/94/6a/b81298e7ff58c3873f9c7812dfc697a797968240e85eec79e3a52dbe736c/lesync-0.4.0-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "1e885f39965e215753dd3aba83a69cc1", "sha256": "80a3cde525afbf5644bce1b209c8814ffe82694bdd0597f5cc50858fb66f953a"}, "downloads": -1, "filename": "lesync-0.4.0-py3-none-any.whl", "has_sig": false, "md5_digest": "1e885f39965e215753dd3aba83a69cc1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5598, "upload_time": "2020-01-22T16:59:49", "upload_time_iso_8601": "2020-01-22T16:59:49.885644Z", "url": "https://files.pythonhosted.org/packages/94/6a/b81298e7ff58c3873f9c7812dfc697a797968240e85eec79e3a52dbe736c/lesync-0.4.0-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 00:46:55 2020"}