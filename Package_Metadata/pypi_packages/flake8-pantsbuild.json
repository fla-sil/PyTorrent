{"info": {"author": "Pantsbuild developers", "author_email": "pantsbuild@gmail.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Software Development :: Build Tools"], "description": "# flake8-pantsbuild\n\nThis Flake8 plugin provides several custom lints used by the Pants project and its users.\n\n## Table of Contents\n\n* [Installation](#installation)\n    * [Supported Python versions](#supported-python-versions)\n* [Usage](#usage)\n* [Error Codes](#error-codes)\n* [Migrating from `lint.pythonstyle` to `flake8`](#migrating-from-lintpythonstyle-to-flake8)\n    * [Differences between the tools](#differences-between-the-tools)\n    * [Steps to migrate](#steps-to-migrate)\n    * [Alternatives to custom lints](#alternatives-to-custom-lints)\n* [Development](#development)\n\n## Installation\n\nIf using with Pants, add this to your `pants.toml`:\n\n```toml\n[GLOBAL]\nbackend_packages2.add = [\"pants.backend.python.lint.flake8\"]\n\n[flake8]\nextra_requirements.add = [\"flake8-pantsbuild\"]\n```\n\nIf using Flake8 without Pants, install with:\n\n```bash\n$ pip install flake8-pantsbuild\n```\n\n### Supported Python versions\n\nThis plugin works with Python 3.6+.\n\nIf you need support for Python 2.7 or Python 3.5, install `flake8-pantsbuild==1.*` and refer to the README at https://github.com/pantsbuild/flake8-pantsbuild/blob/1.x/README.md.\n\n## Usage\n\nIf using with Pants, run `./pants lint file.py` as usual.\n\nIf using without Pants, run `flake8 file.py` [as usual](http://flake8.pycqa.org/en/latest/user/invocation.html).\n\n## Error Codes\n\n| Error code | Description                                                     | Notes                |\n|:----------:|:---------------------------------------------------------------:|:--------------------:|\n| PB10       | Using class attribute that breaks inheritance                   |                      |\n| PB11       | Using a constant on the left-hand side of a logical operator    |                      |\n| PB12       | Using a constant on the right-hand side of an and operator      |                      |\n| PB13       | Using `open` without a `with` statement (context manager)       |                      |\n| PB20       | Check for 2-space indentation                                   | Disabled by default\u00b9 |\n| PB30       | Using slashes instead of parentheses for line continuation      | Disabled by default\u00b2 |\n\n\u00b9 To enable the `PB20` indentation lint, set `--enable-extensions=PB20`. You'll need to disable `E111` (check for 4-space indentation) via `--extend-ignore=E111`. You'll likely want to disable `E121`, `E124`, `E125`, `E127`, and `E128` as well.\n\n\u00b2 To enable the `PB30` trailing slash lint, set `--enable-extensions=PB30`.\n\n## Migrating from `lint.pythonstyle` to `flake8`\n\n`lint.pythonstyle` was a custom Pants task from the `pants.contrib.python.checks` plugin that behaved like Flake8, but was generally inferior to the more popular Flake8.\n\n### Differences between the tools \n\nPants' `lint.pythonstyle` task runs `pycodestyle` and `pyflakes`, in addition to providing several custom lints. \n\nIn contrast, Flake8 runs `pycodestyle` and `pyflakes`, but it also uses `mccabe` to check for complex sections of code and it [adds its own lints](https://flake8.pycqa.org/en/latest/user/error-codes.html). Flake8 does not have any of the custom `lint.pythonstyle` lints by default, but the [below table](#alternatives-to-custom-lints) shows how to keep any of these lints you'd like.\n\nFlake8 has hundreds of plugins that you may easily add to Pants. See [Awesome Flake8 Extensions](https://github.com/DmytroLitvinov/awesome-flake8-extensions) for a curated list of plugins.\n\n### Steps to migrate\n\nFirst, follow the [installation instructions](#installation) to hook up Flake8 with Pants. Then, disable `lint.pythonstyle` by removing `pants.contrib.python.checks` from your `pants.toml`.\n\nThen, run Flake8 by running `./pants lint file.py` (see [Usage](#usage)).\n\nThe first time you run `./pants lint` , you will likely have several errors due to its differences with `lint.pythonstyle`. We recommend starting by [disabling](https://flake8.pycqa.org/en/latest/user/violations.html) those errors in a [`.flake8` config file](https://flake8.pycqa.org/en/latest/user/configuration.html). Add this to your `pants.toml` to ensure Pants uses the config:\n\n```toml\n[flake8]\nconfig = \"path/to/.flake8\"\n```\n\nIf you want to keep any of the custom lints from `lint.pythonstyle`, refer to the below table. You will need to install additional plugins by adding this to your `pants.toml`:\n\n```toml\n[flake8]\nextra_requirements.add = [\n  \"flake8-pantsbuild\",\n  \"pep8-naming\",\n  \"flake8-import-order\",\n  # and so on...\n]\n```\n\n### Alternatives to custom lints\n\n| Old code | Old option scope            | Description                                                     | Alternative                               |\n|:--------:|:---------------------------:|:---------------------------------------------------------------:|:-----------------------------------------:|\n| T000     | pycheck-variable-names      | Class names must be `UpperCamelCase`                            | `pep8-naming` Flake8 plugin               |\n| T001     | pycheck-variable-names      | Class globals must be `UPPER_SNAKE_CASED`                       | `pep8-naming` Flake8 plugin               |\n| T002     | pycheck-variable-names      | Function names must be `lower_snake_cased`                      | `pep8-naming` Flake8 plugin               |\n| T100     | pycheck-indentation         | Enforce 2-space indentation                                     | `PB20`\u00b9                                   |\n| T200     | pycheck-trailing-whitespace | Trailing whitespace                                             | Flake8's `W291`                           |\n| T201     | pycheck-trailing-whitespace | Using slashes instead of parentheses for line continuation      | `PB30`\u00b9                                   |\n| T301     | pycheck-newlines            | Excepted 1 blank line between class methods                     | Flake8's `E301` and `E303`                |\n| T302     | pycheck-newlines            | Excepted 2 blank lines between top level definitions            | Flake8's `E302` and `E303`                |\n| T400     | pycheck-import-order        | Wildcard imports not allowed                                    | `isort` or `flake8-import-order` plugin \u00b2 |\n| T401     | pycheck-import-order        | `from` imports not sorted correctly                             | `isort` or `flake8-import-order` plugin \u00b2 |\n| T402     | pycheck-import-order        | `import` should only import one module at a time                | `isort` or `flake8-import-order` plugin \u00b2 |\n| T403     | pycheck-import-order        | Importing multiple module types in one statement                | `isort` or `flake8-import-order` plugin \u00b2 |\n| T404     | pycheck-import-order        | Unclassifiable import                                           | `isort` or `flake8-import-order` plugin \u00b2 |\n| T405     | pycheck-import-order        | Import block has multiple module types                          | `isort` or `flake8-import-order` plugin \u00b2 |\n| T406     | pycheck-import-orde         | Out of order import statements                                  | `isort` or `flake8-import-order` plugin \u00b2 |\n| T601     | pycheck-except-statement    | Using old style `except` statements instead of the `as` keyword | `PB61`\u00b3                                   |\n| T602     | pycheck-future-compat       | Using `iteritems`, `iterkeys`, or `itervalues`                  | `PB62`\u00b3                                   |\n| T603     | pycheck-future-compat       | Using `xrange`                                                  | `PB63`\u00b3                                   |\n| T604     | pycheck-future-compat       | Using `basestring` or `unicode`                                 | `PB64`\u00b3                                   |\n| T605     | pycheck-future-compat       | Using metaclasses incompatible with Python 3                    | `PB65`\u00b3                                   |\n| T606     | pycheck-new-style-classes   | Found Python 2 old-style classes (not inheriting `object`)      | `PB66`\u00b3                                   |\n| T607     | pycheck-print-statements    | Using `print` statements, rather than the `print` function      | `PB60`\u00b3                                   |\n| T800     | pycheck-class-factoring     | Using class attribute that breaks inheritance                   | `PB10`                                    |\n| T801     | pycheck-variable-names      | Shadowing a `builtin` name                                      | `flake8-builtins` plugin                  |\n| T802     | pycheck-context-manager     | Using `open` without a `with` statement (context manager)       | `PB13`                                    |\n| T803     | pycheck-except-statement    | Using a blanket `except:`                                       | Flake8's `E722`                           |\n| T804     | pycheck-constant-logic      | Using a constant on the left-hand side of a logical operator    | `PB11`                                    |\n| T805     | pycheck-constant-logic      | Using a constant on the right-hand side of an and operator      | `PB12`                                    |\n\n\u00b9 This lint is disabled by default. See the above section [`Error Codes`](#error-codes) for instructions on how to enable this lint.\n\n\u00b2 To use `isort` with Pants, set `backend_packages2.add = [\"pants.backend.python.lint.isort\"]` in your `pants.toml`.\n\n\u00b3 The `PB6*` lints are only available in the `1.x` release series for this plugin because `2.x` drops support for Python 2. Please refer to the README at https://github.com/pantsbuild/flake8-pantsbuild/blob/1.x/README.md#error-codes for instructions on how to use this plugin.\n\n## Development\n\nWe use [tox](https://testrun.org/tox/en/latest/) for test automation. To run the test suite, invoke tox:\n\n```bash\n$ tox\n```\n\nYou may run certain environments with `tox -e` (run `tox -a` to see all options):\n\n```bash\n$ tox -e format-run\n$ tox -e typecheck\n$ tox -e py36\n```\n\nYou may also manually test by building a [PEX](https://github.com/pantsbuild/pex) with this plugin, as follows:\n\n```bash\n$ pex flake8 . --entry-point flake8 --output-file flake8.pex\n$ vim example.py  # add whatever content you want\n$ ./flake.pex example.py\n```\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://pants.readme.io/docs/python-linters-and-formatters", "keywords": "", "license": "Apache-2.0", "maintainer": "", "maintainer_email": "", "name": "flake8-pantsbuild", "package_url": "https://pypi.org/project/flake8-pantsbuild/", "platform": "", "project_url": "https://pypi.org/project/flake8-pantsbuild/", "project_urls": {"Homepage": "https://pants.readme.io/docs/python-linters-and-formatters", "Repository": "https://github.com/pantsbuild/flake8-pantsbuild"}, "release_url": "https://pypi.org/project/flake8-pantsbuild/2.0.0/", "requires_dist": ["importlib_metadata (>=1.3.0); python_version < \"3.8\"", "flake8 (>=3.7)"], "requires_python": ">=3.6", "summary": "Various Flake8 lints used by the Pants project and its users.", "version": "2.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>flake8-pantsbuild</h1>\n<p>This Flake8 plugin provides several custom lints used by the Pants project and its users.</p>\n<h2>Table of Contents</h2>\n<ul>\n<li><a href=\"#installation\" rel=\"nofollow\">Installation</a>\n<ul>\n<li><a href=\"#supported-python-versions\" rel=\"nofollow\">Supported Python versions</a></li>\n</ul>\n</li>\n<li><a href=\"#usage\" rel=\"nofollow\">Usage</a></li>\n<li><a href=\"#error-codes\" rel=\"nofollow\">Error Codes</a></li>\n<li><a href=\"#migrating-from-lintpythonstyle-to-flake8\" rel=\"nofollow\">Migrating from <code>lint.pythonstyle</code> to <code>flake8</code></a>\n<ul>\n<li><a href=\"#differences-between-the-tools\" rel=\"nofollow\">Differences between the tools</a></li>\n<li><a href=\"#steps-to-migrate\" rel=\"nofollow\">Steps to migrate</a></li>\n<li><a href=\"#alternatives-to-custom-lints\" rel=\"nofollow\">Alternatives to custom lints</a></li>\n</ul>\n</li>\n<li><a href=\"#development\" rel=\"nofollow\">Development</a></li>\n</ul>\n<h2>Installation</h2>\n<p>If using with Pants, add this to your <code>pants.toml</code>:</p>\n<pre><span class=\"k\">[GLOBAL]</span>\n<span class=\"n\">backend_packages2</span><span class=\"p\">.</span><span class=\"n\">add</span> <span class=\"o\">=</span> <span class=\"k\">[\"pants.backend.python.lint.flake8\"]</span>\n\n<span class=\"k\">[flake8]</span>\n<span class=\"n\">extra_requirements</span><span class=\"p\">.</span><span class=\"n\">add</span> <span class=\"o\">=</span> <span class=\"k\">[\"flake8-pantsbuild\"]</span>\n</pre>\n<p>If using Flake8 without Pants, install with:</p>\n<pre>$ pip install flake8-pantsbuild\n</pre>\n<h3>Supported Python versions</h3>\n<p>This plugin works with Python 3.6+.</p>\n<p>If you need support for Python 2.7 or Python 3.5, install <code>flake8-pantsbuild==1.*</code> and refer to the README at <a href=\"https://github.com/pantsbuild/flake8-pantsbuild/blob/1.x/README.md\" rel=\"nofollow\">https://github.com/pantsbuild/flake8-pantsbuild/blob/1.x/README.md</a>.</p>\n<h2>Usage</h2>\n<p>If using with Pants, run <code>./pants lint file.py</code> as usual.</p>\n<p>If using without Pants, run <code>flake8 file.py</code> <a href=\"http://flake8.pycqa.org/en/latest/user/invocation.html\" rel=\"nofollow\">as usual</a>.</p>\n<h2>Error Codes</h2>\n<table>\n<thead>\n<tr>\n<th align=\"center\">Error code</th>\n<th align=\"center\">Description</th>\n<th align=\"center\">Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">PB10</td>\n<td align=\"center\">Using class attribute that breaks inheritance</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">PB11</td>\n<td align=\"center\">Using a constant on the left-hand side of a logical operator</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">PB12</td>\n<td align=\"center\">Using a constant on the right-hand side of an and operator</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">PB13</td>\n<td align=\"center\">Using <code>open</code> without a <code>with</code> statement (context manager)</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">PB20</td>\n<td align=\"center\">Check for 2-space indentation</td>\n<td align=\"center\">Disabled by default\u00b9</td>\n</tr>\n<tr>\n<td align=\"center\">PB30</td>\n<td align=\"center\">Using slashes instead of parentheses for line continuation</td>\n<td align=\"center\">Disabled by default\u00b2</td>\n</tr></tbody></table>\n<p>\u00b9 To enable the <code>PB20</code> indentation lint, set <code>--enable-extensions=PB20</code>. You'll need to disable <code>E111</code> (check for 4-space indentation) via <code>--extend-ignore=E111</code>. You'll likely want to disable <code>E121</code>, <code>E124</code>, <code>E125</code>, <code>E127</code>, and <code>E128</code> as well.</p>\n<p>\u00b2 To enable the <code>PB30</code> trailing slash lint, set <code>--enable-extensions=PB30</code>.</p>\n<h2>Migrating from <code>lint.pythonstyle</code> to <code>flake8</code></h2>\n<p><code>lint.pythonstyle</code> was a custom Pants task from the <code>pants.contrib.python.checks</code> plugin that behaved like Flake8, but was generally inferior to the more popular Flake8.</p>\n<h3>Differences between the tools</h3>\n<p>Pants' <code>lint.pythonstyle</code> task runs <code>pycodestyle</code> and <code>pyflakes</code>, in addition to providing several custom lints.</p>\n<p>In contrast, Flake8 runs <code>pycodestyle</code> and <code>pyflakes</code>, but it also uses <code>mccabe</code> to check for complex sections of code and it <a href=\"https://flake8.pycqa.org/en/latest/user/error-codes.html\" rel=\"nofollow\">adds its own lints</a>. Flake8 does not have any of the custom <code>lint.pythonstyle</code> lints by default, but the <a href=\"#alternatives-to-custom-lints\" rel=\"nofollow\">below table</a> shows how to keep any of these lints you'd like.</p>\n<p>Flake8 has hundreds of plugins that you may easily add to Pants. See <a href=\"https://github.com/DmytroLitvinov/awesome-flake8-extensions\" rel=\"nofollow\">Awesome Flake8 Extensions</a> for a curated list of plugins.</p>\n<h3>Steps to migrate</h3>\n<p>First, follow the <a href=\"#installation\" rel=\"nofollow\">installation instructions</a> to hook up Flake8 with Pants. Then, disable <code>lint.pythonstyle</code> by removing <code>pants.contrib.python.checks</code> from your <code>pants.toml</code>.</p>\n<p>Then, run Flake8 by running <code>./pants lint file.py</code> (see <a href=\"#usage\" rel=\"nofollow\">Usage</a>).</p>\n<p>The first time you run <code>./pants lint</code> , you will likely have several errors due to its differences with <code>lint.pythonstyle</code>. We recommend starting by <a href=\"https://flake8.pycqa.org/en/latest/user/violations.html\" rel=\"nofollow\">disabling</a> those errors in a <a href=\"https://flake8.pycqa.org/en/latest/user/configuration.html\" rel=\"nofollow\"><code>.flake8</code> config file</a>. Add this to your <code>pants.toml</code> to ensure Pants uses the config:</p>\n<pre><span class=\"k\">[flake8]</span>\n<span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"s\">\"path/to/.flake8\"</span>\n</pre>\n<p>If you want to keep any of the custom lints from <code>lint.pythonstyle</code>, refer to the below table. You will need to install additional plugins by adding this to your <code>pants.toml</code>:</p>\n<pre><span class=\"k\">[flake8]</span>\n<span class=\"n\">extra_requirements</span><span class=\"p\">.</span><span class=\"n\">add</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n  <span class=\"s\">\"flake8-pantsbuild\"</span><span class=\"p\">,</span>\n  <span class=\"s\">\"pep8-naming\"</span><span class=\"p\">,</span>\n  <span class=\"s\">\"flake8-import-order\"</span><span class=\"p\">,</span>\n  <span class=\"c1\"># and so on...</span>\n<span class=\"p\">]</span>\n</pre>\n<h3>Alternatives to custom lints</h3>\n<table>\n<thead>\n<tr>\n<th align=\"center\">Old code</th>\n<th align=\"center\">Old option scope</th>\n<th align=\"center\">Description</th>\n<th align=\"center\">Alternative</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">T000</td>\n<td align=\"center\">pycheck-variable-names</td>\n<td align=\"center\">Class names must be <code>UpperCamelCase</code></td>\n<td align=\"center\"><code>pep8-naming</code> Flake8 plugin</td>\n</tr>\n<tr>\n<td align=\"center\">T001</td>\n<td align=\"center\">pycheck-variable-names</td>\n<td align=\"center\">Class globals must be <code>UPPER_SNAKE_CASED</code></td>\n<td align=\"center\"><code>pep8-naming</code> Flake8 plugin</td>\n</tr>\n<tr>\n<td align=\"center\">T002</td>\n<td align=\"center\">pycheck-variable-names</td>\n<td align=\"center\">Function names must be <code>lower_snake_cased</code></td>\n<td align=\"center\"><code>pep8-naming</code> Flake8 plugin</td>\n</tr>\n<tr>\n<td align=\"center\">T100</td>\n<td align=\"center\">pycheck-indentation</td>\n<td align=\"center\">Enforce 2-space indentation</td>\n<td align=\"center\"><code>PB20</code>\u00b9</td>\n</tr>\n<tr>\n<td align=\"center\">T200</td>\n<td align=\"center\">pycheck-trailing-whitespace</td>\n<td align=\"center\">Trailing whitespace</td>\n<td align=\"center\">Flake8's <code>W291</code></td>\n</tr>\n<tr>\n<td align=\"center\">T201</td>\n<td align=\"center\">pycheck-trailing-whitespace</td>\n<td align=\"center\">Using slashes instead of parentheses for line continuation</td>\n<td align=\"center\"><code>PB30</code>\u00b9</td>\n</tr>\n<tr>\n<td align=\"center\">T301</td>\n<td align=\"center\">pycheck-newlines</td>\n<td align=\"center\">Excepted 1 blank line between class methods</td>\n<td align=\"center\">Flake8's <code>E301</code> and <code>E303</code></td>\n</tr>\n<tr>\n<td align=\"center\">T302</td>\n<td align=\"center\">pycheck-newlines</td>\n<td align=\"center\">Excepted 2 blank lines between top level definitions</td>\n<td align=\"center\">Flake8's <code>E302</code> and <code>E303</code></td>\n</tr>\n<tr>\n<td align=\"center\">T400</td>\n<td align=\"center\">pycheck-import-order</td>\n<td align=\"center\">Wildcard imports not allowed</td>\n<td align=\"center\"><code>isort</code> or <code>flake8-import-order</code> plugin \u00b2</td>\n</tr>\n<tr>\n<td align=\"center\">T401</td>\n<td align=\"center\">pycheck-import-order</td>\n<td align=\"center\"><code>from</code> imports not sorted correctly</td>\n<td align=\"center\"><code>isort</code> or <code>flake8-import-order</code> plugin \u00b2</td>\n</tr>\n<tr>\n<td align=\"center\">T402</td>\n<td align=\"center\">pycheck-import-order</td>\n<td align=\"center\"><code>import</code> should only import one module at a time</td>\n<td align=\"center\"><code>isort</code> or <code>flake8-import-order</code> plugin \u00b2</td>\n</tr>\n<tr>\n<td align=\"center\">T403</td>\n<td align=\"center\">pycheck-import-order</td>\n<td align=\"center\">Importing multiple module types in one statement</td>\n<td align=\"center\"><code>isort</code> or <code>flake8-import-order</code> plugin \u00b2</td>\n</tr>\n<tr>\n<td align=\"center\">T404</td>\n<td align=\"center\">pycheck-import-order</td>\n<td align=\"center\">Unclassifiable import</td>\n<td align=\"center\"><code>isort</code> or <code>flake8-import-order</code> plugin \u00b2</td>\n</tr>\n<tr>\n<td align=\"center\">T405</td>\n<td align=\"center\">pycheck-import-order</td>\n<td align=\"center\">Import block has multiple module types</td>\n<td align=\"center\"><code>isort</code> or <code>flake8-import-order</code> plugin \u00b2</td>\n</tr>\n<tr>\n<td align=\"center\">T406</td>\n<td align=\"center\">pycheck-import-orde</td>\n<td align=\"center\">Out of order import statements</td>\n<td align=\"center\"><code>isort</code> or <code>flake8-import-order</code> plugin \u00b2</td>\n</tr>\n<tr>\n<td align=\"center\">T601</td>\n<td align=\"center\">pycheck-except-statement</td>\n<td align=\"center\">Using old style <code>except</code> statements instead of the <code>as</code> keyword</td>\n<td align=\"center\"><code>PB61</code>\u00b3</td>\n</tr>\n<tr>\n<td align=\"center\">T602</td>\n<td align=\"center\">pycheck-future-compat</td>\n<td align=\"center\">Using <code>iteritems</code>, <code>iterkeys</code>, or <code>itervalues</code></td>\n<td align=\"center\"><code>PB62</code>\u00b3</td>\n</tr>\n<tr>\n<td align=\"center\">T603</td>\n<td align=\"center\">pycheck-future-compat</td>\n<td align=\"center\">Using <code>xrange</code></td>\n<td align=\"center\"><code>PB63</code>\u00b3</td>\n</tr>\n<tr>\n<td align=\"center\">T604</td>\n<td align=\"center\">pycheck-future-compat</td>\n<td align=\"center\">Using <code>basestring</code> or <code>unicode</code></td>\n<td align=\"center\"><code>PB64</code>\u00b3</td>\n</tr>\n<tr>\n<td align=\"center\">T605</td>\n<td align=\"center\">pycheck-future-compat</td>\n<td align=\"center\">Using metaclasses incompatible with Python 3</td>\n<td align=\"center\"><code>PB65</code>\u00b3</td>\n</tr>\n<tr>\n<td align=\"center\">T606</td>\n<td align=\"center\">pycheck-new-style-classes</td>\n<td align=\"center\">Found Python 2 old-style classes (not inheriting <code>object</code>)</td>\n<td align=\"center\"><code>PB66</code>\u00b3</td>\n</tr>\n<tr>\n<td align=\"center\">T607</td>\n<td align=\"center\">pycheck-print-statements</td>\n<td align=\"center\">Using <code>print</code> statements, rather than the <code>print</code> function</td>\n<td align=\"center\"><code>PB60</code>\u00b3</td>\n</tr>\n<tr>\n<td align=\"center\">T800</td>\n<td align=\"center\">pycheck-class-factoring</td>\n<td align=\"center\">Using class attribute that breaks inheritance</td>\n<td align=\"center\"><code>PB10</code></td>\n</tr>\n<tr>\n<td align=\"center\">T801</td>\n<td align=\"center\">pycheck-variable-names</td>\n<td align=\"center\">Shadowing a <code>builtin</code> name</td>\n<td align=\"center\"><code>flake8-builtins</code> plugin</td>\n</tr>\n<tr>\n<td align=\"center\">T802</td>\n<td align=\"center\">pycheck-context-manager</td>\n<td align=\"center\">Using <code>open</code> without a <code>with</code> statement (context manager)</td>\n<td align=\"center\"><code>PB13</code></td>\n</tr>\n<tr>\n<td align=\"center\">T803</td>\n<td align=\"center\">pycheck-except-statement</td>\n<td align=\"center\">Using a blanket <code>except:</code></td>\n<td align=\"center\">Flake8's <code>E722</code></td>\n</tr>\n<tr>\n<td align=\"center\">T804</td>\n<td align=\"center\">pycheck-constant-logic</td>\n<td align=\"center\">Using a constant on the left-hand side of a logical operator</td>\n<td align=\"center\"><code>PB11</code></td>\n</tr>\n<tr>\n<td align=\"center\">T805</td>\n<td align=\"center\">pycheck-constant-logic</td>\n<td align=\"center\">Using a constant on the right-hand side of an and operator</td>\n<td align=\"center\"><code>PB12</code></td>\n</tr></tbody></table>\n<p>\u00b9 This lint is disabled by default. See the above section <a href=\"#error-codes\" rel=\"nofollow\"><code>Error Codes</code></a> for instructions on how to enable this lint.</p>\n<p>\u00b2 To use <code>isort</code> with Pants, set <code>backend_packages2.add = [\"pants.backend.python.lint.isort\"]</code> in your <code>pants.toml</code>.</p>\n<p>\u00b3 The <code>PB6*</code> lints are only available in the <code>1.x</code> release series for this plugin because <code>2.x</code> drops support for Python 2. Please refer to the README at <a href=\"https://github.com/pantsbuild/flake8-pantsbuild/blob/1.x/README.md#error-codes\" rel=\"nofollow\">https://github.com/pantsbuild/flake8-pantsbuild/blob/1.x/README.md#error-codes</a> for instructions on how to use this plugin.</p>\n<h2>Development</h2>\n<p>We use <a href=\"https://testrun.org/tox/en/latest/\" rel=\"nofollow\">tox</a> for test automation. To run the test suite, invoke tox:</p>\n<pre>$ tox\n</pre>\n<p>You may run certain environments with <code>tox -e</code> (run <code>tox -a</code> to see all options):</p>\n<pre>$ tox -e format-run\n$ tox -e typecheck\n$ tox -e py36\n</pre>\n<p>You may also manually test by building a <a href=\"https://github.com/pantsbuild/pex\" rel=\"nofollow\">PEX</a> with this plugin, as follows:</p>\n<pre>$ pex flake8 . --entry-point flake8 --output-file flake8.pex\n$ vim example.py  <span class=\"c1\"># add whatever content you want</span>\n$ ./flake.pex example.py\n</pre>\n\n          </div>"}, "last_serial": 6817348, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "54312b805777f938fd250cba0b07290f", "sha256": "0aacba6386ecce448497c0c99a69f53b3c1191656eaca01709f0ebc9c45e7019"}, "downloads": -1, "filename": "flake8_pantsbuild-1.0.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "54312b805777f938fd250cba0b07290f", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 12634, "upload_time": "2020-03-15T20:00:30", "upload_time_iso_8601": "2020-03-15T20:00:30.710224Z", "url": "https://files.pythonhosted.org/packages/0b/8a/8c473abe202baa1a57c26d29e5477a9cf357c05ac58e925ae7ebbcf33ae3/flake8_pantsbuild-1.0.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c4d5987ac0209e28c0b4ab14de622976", "sha256": "78c66bd691de273aed908bcfefe77fbe15dc3bba5e1be40a669ebc9e9fb0b273"}, "downloads": -1, "filename": "flake8-pantsbuild-1.0.0.tar.gz", "has_sig": false, "md5_digest": "c4d5987ac0209e28c0b4ab14de622976", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 13113, "upload_time": "2020-03-15T20:00:29", "upload_time_iso_8601": "2020-03-15T20:00:29.170786Z", "url": "https://files.pythonhosted.org/packages/49/c5/fcef0b1469a07574fe91d3538919903c0d4ac7d94403d02b804b17064bf6/flake8-pantsbuild-1.0.0.tar.gz", "yanked": false}], "1.0.0rc0": [{"comment_text": "", "digests": {"md5": "0e52329c15daca086a5318c8fbc5436d", "sha256": "a1609597881e6dc1e5e085e432ca20219a355263ae0f0875748f3f67e4a8320f"}, "downloads": -1, "filename": "flake8_pantsbuild-1.0.0rc0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "0e52329c15daca086a5318c8fbc5436d", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 9574, "upload_time": "2020-03-15T18:26:07", "upload_time_iso_8601": "2020-03-15T18:26:07.316711Z", "url": "https://files.pythonhosted.org/packages/68/f3/ee97f67c2bbb1e7e98422681a105b1a96364771a34ce1254b78d7f61629f/flake8_pantsbuild-1.0.0rc0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "64d8ed91c8fbfd8567bb740e957a8ecb", "sha256": "7a34ff386dc790c5d4ce5873d61fdaa0266cf8d56f7665c32e48d1b4bc6cd5f4"}, "downloads": -1, "filename": "flake8-pantsbuild-1.0.0rc0.tar.gz", "has_sig": false, "md5_digest": "64d8ed91c8fbfd8567bb740e957a8ecb", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 8892, "upload_time": "2020-03-15T18:26:04", "upload_time_iso_8601": "2020-03-15T18:26:04.289856Z", "url": "https://files.pythonhosted.org/packages/8b/16/eb360a53a7c66d4d4a3ba8d826b0c79d7ace0493a73a39b8af4607861650/flake8-pantsbuild-1.0.0rc0.tar.gz", "yanked": false}], "2.0.0": [{"comment_text": "", "digests": {"md5": "9960a906756c22f7b8e26b45aff60afa", "sha256": "8d45cf26a55fe7d66de944a6c93b64456852cfd3a7bea81640553081469129e7"}, "downloads": -1, "filename": "flake8_pantsbuild-2.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "9960a906756c22f7b8e26b45aff60afa", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 11274, "upload_time": "2020-03-15T22:11:10", "upload_time_iso_8601": "2020-03-15T22:11:10.522137Z", "url": "https://files.pythonhosted.org/packages/ac/bd/96927daa8c58b14da8c6c4809c028d5a21eb9cb4e0cf887447c45898a4df/flake8_pantsbuild-2.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "52cb2b92d7ca24ff9b584ac39f756b79", "sha256": "1b72558db6d718c33f4410eff80f7afc2bc0300190a733d92b3cf05b231c2450"}, "downloads": -1, "filename": "flake8-pantsbuild-2.0.0.tar.gz", "has_sig": false, "md5_digest": "52cb2b92d7ca24ff9b584ac39f756b79", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 11693, "upload_time": "2020-03-15T22:11:08", "upload_time_iso_8601": "2020-03-15T22:11:08.914796Z", "url": "https://files.pythonhosted.org/packages/41/a7/c8f796a5856e019e030035c0fc12d561ae27638b38c49a7128a8956f418a/flake8-pantsbuild-2.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "9960a906756c22f7b8e26b45aff60afa", "sha256": "8d45cf26a55fe7d66de944a6c93b64456852cfd3a7bea81640553081469129e7"}, "downloads": -1, "filename": "flake8_pantsbuild-2.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "9960a906756c22f7b8e26b45aff60afa", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 11274, "upload_time": "2020-03-15T22:11:10", "upload_time_iso_8601": "2020-03-15T22:11:10.522137Z", "url": "https://files.pythonhosted.org/packages/ac/bd/96927daa8c58b14da8c6c4809c028d5a21eb9cb4e0cf887447c45898a4df/flake8_pantsbuild-2.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "52cb2b92d7ca24ff9b584ac39f756b79", "sha256": "1b72558db6d718c33f4410eff80f7afc2bc0300190a733d92b3cf05b231c2450"}, "downloads": -1, "filename": "flake8-pantsbuild-2.0.0.tar.gz", "has_sig": false, "md5_digest": "52cb2b92d7ca24ff9b584ac39f756b79", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 11693, "upload_time": "2020-03-15T22:11:08", "upload_time_iso_8601": "2020-03-15T22:11:08.914796Z", "url": "https://files.pythonhosted.org/packages/41/a7/c8f796a5856e019e030035c0fc12d561ae27638b38c49a7128a8956f418a/flake8-pantsbuild-2.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 01:03:22 2020"}