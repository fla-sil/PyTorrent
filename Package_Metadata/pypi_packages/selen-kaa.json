{"info": {"author": "Viktor Grygorchuk", "author_email": "vvgrygorchuk@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3.6", "Topic :: Software Development :: Build Tools", "Topic :: Software Development :: Testing"], "description": "A lightweight wrapper around Selenium Python.<br/>\nIt's a simple extension to standard Selenium.\nThe Philosophy is \"__Use standard Selenium, when it works, and use additional methods, \nwhen Selenium annoys, mainly with waits__\".\n\n## Short Features Overview:\n- It is easy integrated with your existing Selenium code and\n- It is compatible with any standard Selenium methods.\n<br/>For instance:\n```\n# Your Selenium code\nbrowser = webdriver.Chrome()\nbrowser.get(\"https://www.seleniumhq.org/\")\n\n# with `selen-kaa`\nfrom se_wrapper.browser_driver import BrowserDriver\n\nbrowser = BrowserDriver(webdriver.Chrome())\nbrowser.get(\"https://www.seleniumhq.org/\")\n# any methods from the WebDriver works!\nelement = browser.find_element_by_css(\".test-class\")\n```\nBesides standard Selenium, `selen-kaa` introduces more convenient way to \ninteract with a web page and web elements through `init_web_element()`\nand `init_web_elements()`:<br/>\n- you can freely create the web element in `__init__()`, as the WebDriver \nwould search this element \nonly at the time of interaction with it:\n```\nbrowser = BrowserDriver(webdriver.Chrome())\n\nclass MyPage:\n\n    def __init__():\n        # lazy creation of a web element\n        self.element1 = browser.init_web_element(\"#test\")\n    \npage = MyPage()\n# even if `self.element1` has not been rendered yet on the web page, \n# it's safe, you would have no NoSuchElementException\nbrowser.get(\"www.some.com\")\npage.element1.click() # WebDriver would `find_element` and click it only on this step\n```\n<br/>\n\n`init_web_element()` returns `SeWebElement` object, which has attributes \nof standard WebElement but with additional logic of lazy initialization,\n custom waits and conditions.\n`init_web_elements()` returns `SeElementsArray` - a collection of \n`SeWebElement` objects with the same lazy initialization logic.\n\n```\nelement1 = browser.init_web_element(\"#test\")\nelement1.should.be_visible(timeout=4) # wait 4 seconds until element becomes visible\n\nelements = browser.init_web_elements(\".test-class\")\nelements[0].should.have_exact_text(text=\"first element\", timeout=4)\n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://github.com/VicGrygorchyk/selen_kaa/archive/0.1.0.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/VicGrygorchyk/selen_kaa.git", "keywords": "Selenium,Test Automation", "license": "", "maintainer": "", "maintainer_email": "", "name": "selen-kaa", "package_url": "https://pypi.org/project/selen-kaa/", "platform": "", "project_url": "https://pypi.org/project/selen-kaa/", "project_urls": {"Download": "https://github.com/VicGrygorchyk/selen_kaa/archive/0.1.0.tar.gz", "Homepage": "https://github.com/VicGrygorchyk/selen_kaa.git"}, "release_url": "https://pypi.org/project/selen-kaa/0.1.0/", "requires_dist": null, "requires_python": ">=3.6", "summary": "A lightweight wrapper around Selenium python repo.", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>A lightweight wrapper around Selenium Python.<br>\nIt's a simple extension to standard Selenium.\nThe Philosophy is \"<strong>Use standard Selenium, when it works, and use additional methods,\nwhen Selenium annoys, mainly with waits</strong>\".</p>\n<h2>Short Features Overview:</h2>\n<ul>\n<li>It is easy integrated with your existing Selenium code and</li>\n<li>It is compatible with any standard Selenium methods.\n<br>For instance:</li>\n</ul>\n<pre><code># Your Selenium code\nbrowser = webdriver.Chrome()\nbrowser.get(\"https://www.seleniumhq.org/\")\n\n# with `selen-kaa`\nfrom se_wrapper.browser_driver import BrowserDriver\n\nbrowser = BrowserDriver(webdriver.Chrome())\nbrowser.get(\"https://www.seleniumhq.org/\")\n# any methods from the WebDriver works!\nelement = browser.find_element_by_css(\".test-class\")\n</code></pre>\n<p>Besides standard Selenium, <code>selen-kaa</code> introduces more convenient way to\ninteract with a web page and web elements through <code>init_web_element()</code>\nand <code>init_web_elements()</code>:<br></p>\n<ul>\n<li>you can freely create the web element in <code>__init__()</code>, as the WebDriver\nwould search this element\nonly at the time of interaction with it:</li>\n</ul>\n<pre><code>browser = BrowserDriver(webdriver.Chrome())\n\nclass MyPage:\n\n    def __init__():\n        # lazy creation of a web element\n        self.element1 = browser.init_web_element(\"#test\")\n    \npage = MyPage()\n# even if `self.element1` has not been rendered yet on the web page, \n# it's safe, you would have no NoSuchElementException\nbrowser.get(\"www.some.com\")\npage.element1.click() # WebDriver would `find_element` and click it only on this step\n</code></pre>\n<br>\n<p><code>init_web_element()</code> returns <code>SeWebElement</code> object, which has attributes\nof standard WebElement but with additional logic of lazy initialization,\ncustom waits and conditions.\n<code>init_web_elements()</code> returns <code>SeElementsArray</code> - a collection of\n<code>SeWebElement</code> objects with the same lazy initialization logic.</p>\n<pre><code>element1 = browser.init_web_element(\"#test\")\nelement1.should.be_visible(timeout=4) # wait 4 seconds until element becomes visible\n\nelements = browser.init_web_elements(\".test-class\")\nelements[0].should.have_exact_text(text=\"first element\", timeout=4)\n</code></pre>\n\n          </div>"}, "last_serial": 6685540, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "95be9494c1c451a79a80c66fbe2865a6", "sha256": "43e3bb942180d4e04c52675831f9c0a8b426c9cfb221f92edd3259c855e9c61a"}, "downloads": -1, "filename": "selen_kaa-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "95be9494c1c451a79a80c66fbe2865a6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 12604, "upload_time": "2019-11-10T19:47:45", "upload_time_iso_8601": "2019-11-10T19:47:45.314317Z", "url": "https://files.pythonhosted.org/packages/ac/6c/12b73742def1d5c4e4e15c1f4072c8b36ae344d659c78c85f35450ed9f96/selen_kaa-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "484bfcbdfa0ac975c70f7241b5a9aef0", "sha256": "4068118e8f580e8e60c1cbf401ea4ffc069e4b68bf3ea1b881dc502f31b56c8e"}, "downloads": -1, "filename": "selen-kaa-0.0.1.tar.gz", "has_sig": false, "md5_digest": "484bfcbdfa0ac975c70f7241b5a9aef0", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 8626, "upload_time": "2019-11-10T19:47:47", "upload_time_iso_8601": "2019-11-10T19:47:47.672659Z", "url": "https://files.pythonhosted.org/packages/0e/38/58015481d3446847d7ca9a530a3961a787e3fa803c8a0706e58f005b07a9/selen-kaa-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "20daef4d5dfe24c357da5a70d34c9a3d", "sha256": "331774402b1df72e3d0d356f3b5ece940b04c91cc54e013853cbcf6da4648395"}, "downloads": -1, "filename": "selen-kaa-0.0.2.tar.gz", "has_sig": false, "md5_digest": "20daef4d5dfe24c357da5a70d34c9a3d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 10570, "upload_time": "2019-11-20T20:52:10", "upload_time_iso_8601": "2019-11-20T20:52:10.878174Z", "url": "https://files.pythonhosted.org/packages/ab/74/c96915833719532c25d9fccb8874b35b8ffe15050faf083e52345f012ec7/selen-kaa-0.0.2.tar.gz", "yanked": false}], "0.0.3.0": [{"comment_text": "", "digests": {"md5": "d964d851d5874c038263b1481a3586a4", "sha256": "6611236ceb46507e54262faefd66ea81e0864ce5a2ef0118f1557e0bc90b84a1"}, "downloads": -1, "filename": "selen-kaa-0.0.3.0.tar.gz", "has_sig": false, "md5_digest": "d964d851d5874c038263b1481a3586a4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 11133, "upload_time": "2020-01-20T14:02:12", "upload_time_iso_8601": "2020-01-20T14:02:12.358422Z", "url": "https://files.pythonhosted.org/packages/6d/e9/72ce79d8a8f681bab69d5b491573461f81a2577ca05b824ea77f4481e523/selen-kaa-0.0.3.0.tar.gz", "yanked": false}], "0.0.3.1.0": [{"comment_text": "", "digests": {"md5": "c0ee65381d967c8aabfe60663e8608d9", "sha256": "81a49929626dada1eb06fb2a8ae9fca412459a3123f4115bcc77df39ff73f716"}, "downloads": -1, "filename": "selen-kaa-0.0.3.1.0.tar.gz", "has_sig": false, "md5_digest": "c0ee65381d967c8aabfe60663e8608d9", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 10871, "upload_time": "2020-01-20T22:59:29", "upload_time_iso_8601": "2020-01-20T22:59:29.213740Z", "url": "https://files.pythonhosted.org/packages/98/53/362ad1562ab19edd0aca00409bec05ea81d7876d4a511f0a828463a6177b/selen-kaa-0.0.3.1.0.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "82db8bd38db6348285db8dab3adc1a42", "sha256": "0cafb200f26882ceb193a9b53fb35cd1e8a3e61bb96a10b09f35e1f43c80677b"}, "downloads": -1, "filename": "selen-kaa-0.1.0.tar.gz", "has_sig": false, "md5_digest": "82db8bd38db6348285db8dab3adc1a42", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 10923, "upload_time": "2020-02-23T22:08:22", "upload_time_iso_8601": "2020-02-23T22:08:22.412745Z", "url": "https://files.pythonhosted.org/packages/9b/93/8be040035592c69610718ffa10486a87f9c42c0e5c6f6a7b009201158a2c/selen-kaa-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "82db8bd38db6348285db8dab3adc1a42", "sha256": "0cafb200f26882ceb193a9b53fb35cd1e8a3e61bb96a10b09f35e1f43c80677b"}, "downloads": -1, "filename": "selen-kaa-0.1.0.tar.gz", "has_sig": false, "md5_digest": "82db8bd38db6348285db8dab3adc1a42", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 10923, "upload_time": "2020-02-23T22:08:22", "upload_time_iso_8601": "2020-02-23T22:08:22.412745Z", "url": "https://files.pythonhosted.org/packages/9b/93/8be040035592c69610718ffa10486a87f9c42c0e5c6f6a7b009201158a2c/selen-kaa-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:55:27 2020"}