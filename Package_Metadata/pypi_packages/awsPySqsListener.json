{"info": {"author": "Umabalan Nagarajan", "author_email": "umabalan2010@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.5", "Topic :: Software Development :: Libraries"], "description": "AWS SQS Listener\n----------------\n\nThis package takes care of the boilerplate involved in listening to an SQS\nqueue, as well as sending messages to a queue.  Thanks to @eligro91, the package now supports python 3.6!\n\nInstallation\n~~~~~~~~~~~~\n\n``pip install awsPySqsListener``\n\nListening to a queue\n~~~~~~~~~~~~~~~~~~~~\n\n| Using the listener is very straightforward - just inherit from the\n  ``SqsListener`` class and implement the ``handle_message()`` method.\n  The queue will be created at runtime if it doesn't already exist.\n  You can also specify an error queue to automatically push any errors to.\n\nHere is a basic code sample:\n\n**Standard Listener**\n\n::\n\n    from sqs_listener import SqsListener\n\n    class MyListener(SqsListener):\n        def handle_message(self, body, attributes, messages_attributes):\n            run_my_function(body['param1'], body['param2'])\n\n    listener = MyListener('my-message-queue', error_queue='my-error-queue', region_name='us-east-1')\n    listener.listen()\n\n**Error Listener**\n\n::\n\n    from sqs_listener import SqsListener\n    class MyErrorListener(SqsListener):\n        def handle_message(self, body, attributes, messages_attributes):\n            save_to_log(body['exception_type'], body['error_message']\n\n    error_listener = MyErrorListener('my-error-queue')\n    error_listener.listen()\n\n\n| The options available as ``kwargs`` are as follows:\n\n- error_queue (str) - name of queue to push errors.\n- force_delete (boolean) - delete the message received from the queue, whether or not the handler function is successful.  By default the message is deleted only if the handler function returns with no exceptions\n- interval (int) - number of seconds in between polls. Set to 60 by default\n- visibility_timeout (str) - Number of seconds the message will be invisible ('in flight') after being read.  After this time interval it reappear in the queue if it wasn't deleted in the meantime.  Set to '600' (10 minutes) by default\n- error_visibility_timeout (str) - Same as previous argument, for the error queue.  Applicable only if the ``error_queue`` argument is set, and the queue doesn't already exist.\n\nRunning as a Daemon\n~~~~~~~~~~~~~~~~~~~\n\n| Typically, in a production environment, you'll want to listen to an SQS queue with a daemonized process.\n  This can be achieved easily by inheriting from the package's ``Daemon`` class and overriding the ``run()`` method.\n|\n| The sample_daemon.py file in the source root folder provides a clear example for achieving this.  Using this example,\n  you can run the listener as a daemon with the command ``python sample_daemon.py start``.  Similarly, the command\n  ``python sample_daemon.py stop`` will stop the process.  You'll most likely need to run the start script using ``sudo``.\n|\n\nLogging\n~~~~~~~\n\n| The listener and launcher instances push all their messages to a ``logger`` instance, called 'sqs_listener'.\n  In order to view the messages, the logger needs to be redirected to ``stdout`` or to a log file.\n|\n| For instance:\n\n::\n\n    logger = logging.getLogger('sqs_listener')\n    logger.setLevel(logging.INFO)\n\n    sh = logging.StreamHandler(sys.stdout)\n    sh.setLevel(logging.INFO)\n\n    formatstr = '[%(asctime)s - %(name)s - %(levelname)s]  %(message)s'\n    formatter = logging.Formatter(formatstr)\n\n    sh.setFormatter(formatter)\n    logger.addHandler(sh)\n\n|\n| Or to a log file:\n\n::\n\n    logger = logging.getLogger('sqs_listener')\n    logger.setLevel(logging.INFO)\n\n    sh = logging.FileHandler('mylog.log')\n    sh.setLevel(logging.INFO)\n\n    formatstr = '[%(asctime)s - %(name)s - %(levelname)s]  %(message)s'\n    formatter = logging.Formatter(formatstr)\n\n    sh.setFormatter(formatter)\n    logger.addHandler(sh)\n\nSending messages\n~~~~~~~~~~~~~~~~\n\n| In order to send a message, instantiate an ``SqsLauncher`` with the name of the queue.  By default an exception will\n  be raised if the queue doesn't exist, but it can be created automatically if the ``create_queue`` parameter is\n  set to true.  In such a case, there's also an option to set the newly created queue's ``VisibilityTimeout`` via the\n  third parameter.\n|\n| After instantiation, use the ``launch_message()`` method to send the message.  The message body should be a ``dict``,\n  and additional kwargs can be specified as stated in the `SQS docs\n  <http://boto3.readthedocs.io/en/latest/reference/services/sqs.html#SQS.Client.send_message>`_.\n  The method returns the response from SQS.\n\n**Launcher Example**\n\n::\n\n    from sqs_launcher import SqsLauncher\n\n    launcher = SqsLauncher('my-queue')\n    response = launcher.launch_message({'param1': 'hello', 'param2': 'world'})\n\nImportant Notes\n~~~~~~~~~~~~~~~\n\n-  The environment variable ``AWS_ACCOUNT_ID`` must be set, in addition\n   to the environment having valid AWS credentials (via environment variables or a credentials file)\n-  For both the main queue and the error queue, if the queue doesn\u2019t\n   exist (in the specified region), it will be created at runtime.\n-  The error queue receives only two values in the message body: ``exception_type`` and ``error_message``. Both are of type ``str``\n-  If the function that the listener executes involves connecting to a database, you should explicitly close the connection at the end of the function.  Otherwise, you're likely to get an error like this: ``OperationalError(2006, 'MySQL server has gone away')``\n\nContributing\n~~~~~~~~~~~~\n\nFork the repo and make a pull request.", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/balan2010/python-sqs-listener", "keywords": "aws sqs listener and launcher", "license": "Apache Software License", "maintainer": "", "maintainer_email": "", "name": "awsPySqsListener", "package_url": "https://pypi.org/project/awsPySqsListener/", "platform": "", "project_url": "https://pypi.org/project/awsPySqsListener/", "project_urls": {"Homepage": "https://github.com/balan2010/python-sqs-listener"}, "release_url": "https://pypi.org/project/awsPySqsListener/0.1.2/", "requires_dist": null, "requires_python": "", "summary": "A simple Python SQS utility package", "version": "0.1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>This package takes care of the boilerplate involved in listening to an SQS\nqueue, as well as sending messages to a queue.  Thanks to @eligro91, the package now supports python 3.6!</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p><tt>pip install awsPySqsListener</tt></p>\n</div>\n<div id=\"listening-to-a-queue\">\n<h2>Listening to a queue</h2>\n<div>\n<div>Using the listener is very straightforward - just inherit from the\n<tt>SqsListener</tt> class and implement the <tt>handle_message()</tt> method.\nThe queue will be created at runtime if it doesn\u2019t already exist.\nYou can also specify an error queue to automatically push any errors to.</div>\n</div>\n<p>Here is a basic code sample:</p>\n<p><strong>Standard Listener</strong></p>\n<pre>from sqs_listener import SqsListener\n\nclass MyListener(SqsListener):\n    def handle_message(self, body, attributes, messages_attributes):\n        run_my_function(body['param1'], body['param2'])\n\nlistener = MyListener('my-message-queue', error_queue='my-error-queue', region_name='us-east-1')\nlistener.listen()\n</pre>\n<p><strong>Error Listener</strong></p>\n<pre>from sqs_listener import SqsListener\nclass MyErrorListener(SqsListener):\n    def handle_message(self, body, attributes, messages_attributes):\n        save_to_log(body['exception_type'], body['error_message']\n\nerror_listener = MyErrorListener('my-error-queue')\nerror_listener.listen()\n</pre>\n<div>\n<div>The options available as <tt>kwargs</tt> are as follows:</div>\n</div>\n<ul>\n<li>error_queue (str) - name of queue to push errors.</li>\n<li>force_delete (boolean) - delete the message received from the queue, whether or not the handler function is successful.  By default the message is deleted only if the handler function returns with no exceptions</li>\n<li>interval (int) - number of seconds in between polls. Set to 60 by default</li>\n<li>visibility_timeout (str) - Number of seconds the message will be invisible (\u2018in flight\u2019) after being read.  After this time interval it reappear in the queue if it wasn\u2019t deleted in the meantime.  Set to \u2018600\u2019 (10 minutes) by default</li>\n<li>error_visibility_timeout (str) - Same as previous argument, for the error queue.  Applicable only if the <tt>error_queue</tt> argument is set, and the queue doesn\u2019t already exist.</li>\n</ul>\n</div>\n<div id=\"running-as-a-daemon\">\n<h2>Running as a Daemon</h2>\n<div>\n<div>Typically, in a production environment, you\u2019ll want to listen to an SQS queue with a daemonized process.\nThis can be achieved easily by inheriting from the package\u2019s <tt>Daemon</tt> class and overriding the <tt>run()</tt> method.</div>\n<div><br></div>\n<div>The sample_daemon.py file in the source root folder provides a clear example for achieving this.  Using this example,\nyou can run the listener as a daemon with the command <tt>python sample_daemon.py start</tt>.  Similarly, the command\n<tt>python sample_daemon.py stop</tt> will stop the process.  You\u2019ll most likely need to run the start script using <tt>sudo</tt>.</div>\n<div><br></div>\n</div>\n</div>\n<div id=\"logging\">\n<h2>Logging</h2>\n<div>\n<div>The listener and launcher instances push all their messages to a <tt>logger</tt> instance, called \u2018sqs_listener\u2019.\nIn order to view the messages, the logger needs to be redirected to <tt>stdout</tt> or to a log file.</div>\n<div><br></div>\n<div>For instance:</div>\n</div>\n<pre>logger = logging.getLogger('sqs_listener')\nlogger.setLevel(logging.INFO)\n\nsh = logging.StreamHandler(sys.stdout)\nsh.setLevel(logging.INFO)\n\nformatstr = '[%(asctime)s - %(name)s - %(levelname)s]  %(message)s'\nformatter = logging.Formatter(formatstr)\n\nsh.setFormatter(formatter)\nlogger.addHandler(sh)\n</pre>\n<div>\n<div><br></div>\n<div>Or to a log file:</div>\n</div>\n<pre>logger = logging.getLogger('sqs_listener')\nlogger.setLevel(logging.INFO)\n\nsh = logging.FileHandler('mylog.log')\nsh.setLevel(logging.INFO)\n\nformatstr = '[%(asctime)s - %(name)s - %(levelname)s]  %(message)s'\nformatter = logging.Formatter(formatstr)\n\nsh.setFormatter(formatter)\nlogger.addHandler(sh)\n</pre>\n</div>\n<div id=\"sending-messages\">\n<h2>Sending messages</h2>\n<div>\n<div>In order to send a message, instantiate an <tt>SqsLauncher</tt> with the name of the queue.  By default an exception will\nbe raised if the queue doesn\u2019t exist, but it can be created automatically if the <tt>create_queue</tt> parameter is\nset to true.  In such a case, there\u2019s also an option to set the newly created queue\u2019s <tt>VisibilityTimeout</tt> via the\nthird parameter.</div>\n<div><br></div>\n<div>After instantiation, use the <tt>launch_message()</tt> method to send the message.  The message body should be a <tt>dict</tt>,\nand additional kwargs can be specified as stated in the <a href=\"http://boto3.readthedocs.io/en/latest/reference/services/sqs.html#SQS.Client.send_message\" rel=\"nofollow\">SQS docs</a>.\nThe method returns the response from SQS.</div>\n</div>\n<p><strong>Launcher Example</strong></p>\n<pre>from sqs_launcher import SqsLauncher\n\nlauncher = SqsLauncher('my-queue')\nresponse = launcher.launch_message({'param1': 'hello', 'param2': 'world'})\n</pre>\n</div>\n<div id=\"important-notes\">\n<h2>Important Notes</h2>\n<ul>\n<li>The environment variable <tt>AWS_ACCOUNT_ID</tt> must be set, in addition\nto the environment having valid AWS credentials (via environment variables or a credentials file)</li>\n<li>For both the main queue and the error queue, if the queue doesn\u2019t\nexist (in the specified region), it will be created at runtime.</li>\n<li>The error queue receives only two values in the message body: <tt>exception_type</tt> and <tt>error_message</tt>. Both are of type <tt>str</tt></li>\n<li>If the function that the listener executes involves connecting to a database, you should explicitly close the connection at the end of the function.  Otherwise, you\u2019re likely to get an error like this: <tt>OperationalError(2006, 'MySQL server has gone away')</tt></li>\n</ul>\n</div>\n<div id=\"contributing\">\n<h2>Contributing</h2>\n<p>Fork the repo and make a pull request.</p>\n</div>\n\n          </div>"}, "last_serial": 3340442, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "a9330cc443923bbb99c54c28e2977bac", "sha256": "6ae3ded1f0c0bb42b1cfc9110acd7ac9402fe44049b408deb28c2aed7d7c0409"}, "downloads": -1, "filename": "awsPySqsListener-0.1.0.tar.gz", "has_sig": false, "md5_digest": "a9330cc443923bbb99c54c28e2977bac", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7535, "upload_time": "2017-11-17T02:34:38", "upload_time_iso_8601": "2017-11-17T02:34:38.216708Z", "url": "https://files.pythonhosted.org/packages/0c/ef/4318791d66a119be5c3d9ba9b5185f7da8448a272584a7f35753802b839a/awsPySqsListener-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "9669b09e981d8d090e7d3a81d3e03e0f", "sha256": "d1b9d766ddf227219ed192736abc3217e42956a27e9d18cff818232c8adb7d9b"}, "downloads": -1, "filename": "awsPySqsListener-0.1.1.tar.gz", "has_sig": false, "md5_digest": "9669b09e981d8d090e7d3a81d3e03e0f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7539, "upload_time": "2017-11-17T04:06:20", "upload_time_iso_8601": "2017-11-17T04:06:20.663684Z", "url": "https://files.pythonhosted.org/packages/8c/30/6c84ca29e98fa6caae538525ee6af05f58a6779e087fb2f6b8bf9f610469/awsPySqsListener-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "3e4cb930293316d040be2c384478f1d9", "sha256": "1ffca531e625fb0b908ca8bc55135eee44fb1b05cd3a3ce98d7e10f8c5097356"}, "downloads": -1, "filename": "awsPySqsListener-0.1.2.tar.gz", "has_sig": false, "md5_digest": "3e4cb930293316d040be2c384478f1d9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7542, "upload_time": "2017-11-17T04:58:44", "upload_time_iso_8601": "2017-11-17T04:58:44.086064Z", "url": "https://files.pythonhosted.org/packages/47/9c/ba750dc97b78589c54f6f204c5ce4350431c89df17c7c8b68c42ee350e26/awsPySqsListener-0.1.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "3e4cb930293316d040be2c384478f1d9", "sha256": "1ffca531e625fb0b908ca8bc55135eee44fb1b05cd3a3ce98d7e10f8c5097356"}, "downloads": -1, "filename": "awsPySqsListener-0.1.2.tar.gz", "has_sig": false, "md5_digest": "3e4cb930293316d040be2c384478f1d9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7542, "upload_time": "2017-11-17T04:58:44", "upload_time_iso_8601": "2017-11-17T04:58:44.086064Z", "url": "https://files.pythonhosted.org/packages/47/9c/ba750dc97b78589c54f6f204c5ce4350431c89df17c7c8b68c42ee350e26/awsPySqsListener-0.1.2.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:15:36 2020"}