{"info": {"author": "IoT-LAB Team", "author_email": "admin@iot-lab.info", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: Console", "Programming Language :: Python", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Topic :: Utilities"], "description": "############\nIoT-LAB MQTT\n############\n\nProvide access to IoT-LAB experiments as MQTT agents.\n\nProtocol documentation\n`IoT-LAB-MQTT Documentation <https://iot-lab.github.io/iot-lab-mqtt/>`_\n\nDevelopped in the context of\n`ARMOUR European Union project <http://armour-project.eu/>`_\n\n\nInstallation\n============\n\nInstall in server mode on IoT-LAB frontend::\n\n   git clone https://github.com/iot-lab/iot-lab-mqtt.git\n   cd iot-lab-mqtt\n   pip install --user -e .[server]\n\nInstall in client mode on your computer::\n\n   git clone https://github.com/iot-lab/iot-lab-mqtt.git\n   cd iot-lab-mqtt\n   pip install --user .\n\n\nAdd python user install directory to the ``PATH`` by\nappending the following line in your ``~/.bashrc``::\n\n   export PATH=\"${HOME}/.local/bin:${PATH}\"\n\nYou can do it with::\n\n   echo 'export PATH=\"${HOME}/.local/bin:${PATH}\"' >> ~/.bashrc\n   # Reload configuration\n   source ~/.bashrc\n\nIf you do not have this, you will need to run the scripts from the\nrepository directory prefixed with ``\"./\"``, so for example\n``./iotlab-mqtt-clients``.\n\n\nDocumentation\n=============\n\nThe documentation can be generated with::\n\n   pip install --user sphinx\n   make -C doc html\n\n\nContext\n=======\n\nServer\n------\n\nTo use the tools, you should have use a MQTT broker.\nFor this doc, I will use ``iot.eclipse.org``.\nBoth server and client agents will communicate through this centralized server.\n\n\nTopics\n------\n\nMQTT is based on publish/subscribe on topics that are URLs.\n\nTo prevent collisions, I advise to prefix your URLs with something specific\nto your experiment and instance.\nI would say something like::\n\n   my/experiment/on/blablabla/IOTLAB_USERNAME/IOTLAB_EXPERIMENT_ID\n\nProviding prefix on the tools uses the ``--prefix`` option.\n\n\nMore advanced\n-------------\n\nSee the documentation on the implementation\n\n\nRunning\n=======\n\n\nOn the server, you should run the ``server`` agents first::\n\n   iotlab-mqtt-serial       [ARGUMENTS]\n   iotlab-mqtt-radiosniffer [ARGUMENTS]\n   iotlab-mqtt-node         [ARGUMENTS]\n   iotlab-mqtt-process      [ARGUMENTS]\n\nAnd on the client, you should run either your client, or the provided example::\n\n   iotlab-mqtt-clients serial       [ARGUMENTS]\n   iotlab-mqtt-clients radiosniffer [ARGUMENTS]\n   iotlab-mqtt-clients node         [ARGUMENTS]\n   iotlab-mqtt-clients process      [ARGUMENTS]\n   iotlab-mqtt-clients log          [ARGUMENTS]\n\n\nArguments\n---------\n\nYou can get the list of arguments with ``--help`` option.\n\nGlobal MQTT configuration\n^^^^^^^^^^^^^^^^^^^^^^^^^\n\nBroker address, url of the MQTT server::\n\n   broker\n\nBroker port, defaults to 1883 (when I wrote it)::\n\n   --broker-port BROKER_PORT\n\nTopics prefix, your topic namespace::\n\n   --prefix PREFIX\n\n\nClient MQTT configuration\n^^^^^^^^^^^^^^^^^^^^^^^^^\n\nServer agent site name, IoT-LAB site name::\n\n   --site IOTLAB_SITE\n\n\nIoT-LAB API usage configuration\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nConfiguration for server that use IoT-LAB API (``radiosniffer``).\nWhen not provided, the tool tries to detect them from ``.iotlabrc`` and current\nrunning experiment.\n\nIoT-LAB API username::\n\n   --iotlab-user IOTLAB_USERNAME\n\nIoT-LAB API password::\n\n   --iotlab-password IOTLAB_PASSWORD\n\n\nIoT-LAB experiment ID to use::\n\n   --experiment-id EXPERIMENT_ID", "description_content_type": null, "docs_url": null, "download_url": "http://github.com/iot-lab/iot-lab-mqtt/", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://www.iot-lab.info", "keywords": "", "license": "CeCILL v2.1", "maintainer": "", "maintainer_email": "", "name": "iotlabmqtt", "package_url": "https://pypi.org/project/iotlabmqtt/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/iotlabmqtt/", "project_urls": {"Download": "http://github.com/iot-lab/iot-lab-mqtt/", "Homepage": "http://www.iot-lab.info"}, "release_url": "https://pypi.org/project/iotlabmqtt/0.6.2/", "requires_dist": null, "requires_python": "", "summary": "Provide access to IoT-LAB experiments as MQTT agents", "version": "0.6.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Provide access to IoT-LAB experiments as MQTT agents.</p>\n<p>Protocol documentation\n<a href=\"https://iot-lab.github.io/iot-lab-mqtt/\" rel=\"nofollow\">IoT-LAB-MQTT Documentation</a></p>\n<p>Developped in the context of\n<a href=\"http://armour-project.eu/\" rel=\"nofollow\">ARMOUR European Union project</a></p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Install in server mode on IoT-LAB frontend:</p>\n<pre>git clone https://github.com/iot-lab/iot-lab-mqtt.git\ncd iot-lab-mqtt\npip install --user -e .[server]\n</pre>\n<p>Install in client mode on your computer:</p>\n<pre>git clone https://github.com/iot-lab/iot-lab-mqtt.git\ncd iot-lab-mqtt\npip install --user .\n</pre>\n<p>Add python user install directory to the <tt>PATH</tt> by\nappending the following line in your <tt><span class=\"pre\">~/.bashrc</span></tt>:</p>\n<pre>export PATH=\"${HOME}/.local/bin:${PATH}\"\n</pre>\n<p>You can do it with:</p>\n<pre>echo 'export PATH=\"${HOME}/.local/bin:${PATH}\"' &gt;&gt; ~/.bashrc\n# Reload configuration\nsource ~/.bashrc\n</pre>\n<p>If you do not have this, you will need to run the scripts from the\nrepository directory prefixed with <tt><span class=\"pre\">\"./\"</span></tt>, so for example\n<tt><span class=\"pre\">./iotlab-mqtt-clients</span></tt>.</p>\n</div>\n<div id=\"documentation\">\n<h2>Documentation</h2>\n<p>The documentation can be generated with:</p>\n<pre>pip install --user sphinx\nmake -C doc html\n</pre>\n</div>\n<div id=\"context\">\n<h2>Context</h2>\n<div id=\"server\">\n<h3>Server</h3>\n<p>To use the tools, you should have use a MQTT broker.\nFor this doc, I will use <tt>iot.eclipse.org</tt>.\nBoth server and client agents will communicate through this centralized server.</p>\n</div>\n<div id=\"topics\">\n<h3>Topics</h3>\n<p>MQTT is based on publish/subscribe on topics that are URLs.</p>\n<p>To prevent collisions, I advise to prefix your URLs with something specific\nto your experiment and instance.\nI would say something like:</p>\n<pre>my/experiment/on/blablabla/IOTLAB_USERNAME/IOTLAB_EXPERIMENT_ID\n</pre>\n<p>Providing prefix on the tools uses the <tt><span class=\"pre\">--prefix</span></tt> option.</p>\n</div>\n<div id=\"more-advanced\">\n<h3>More advanced</h3>\n<p>See the documentation on the implementation</p>\n</div>\n</div>\n<div id=\"running\">\n<h2>Running</h2>\n<p>On the server, you should run the <tt>server</tt> agents first:</p>\n<pre>iotlab-mqtt-serial       [ARGUMENTS]\niotlab-mqtt-radiosniffer [ARGUMENTS]\niotlab-mqtt-node         [ARGUMENTS]\niotlab-mqtt-process      [ARGUMENTS]\n</pre>\n<p>And on the client, you should run either your client, or the provided example:</p>\n<pre>iotlab-mqtt-clients serial       [ARGUMENTS]\niotlab-mqtt-clients radiosniffer [ARGUMENTS]\niotlab-mqtt-clients node         [ARGUMENTS]\niotlab-mqtt-clients process      [ARGUMENTS]\niotlab-mqtt-clients log          [ARGUMENTS]\n</pre>\n<div id=\"arguments\">\n<h3>Arguments</h3>\n<p>You can get the list of arguments with <tt><span class=\"pre\">--help</span></tt> option.</p>\n<div id=\"global-mqtt-configuration\">\n<h4>Global MQTT configuration</h4>\n<p>Broker address, url of the MQTT server:</p>\n<pre>broker\n</pre>\n<p>Broker port, defaults to 1883 (when I wrote it):</p>\n<pre>--broker-port BROKER_PORT\n</pre>\n<p>Topics prefix, your topic namespace:</p>\n<pre>--prefix PREFIX\n</pre>\n</div>\n<div id=\"client-mqtt-configuration\">\n<h4>Client MQTT configuration</h4>\n<p>Server agent site name, IoT-LAB site name:</p>\n<pre>--site IOTLAB_SITE\n</pre>\n</div>\n<div id=\"iot-lab-api-usage-configuration\">\n<h4>IoT-LAB API usage configuration</h4>\n<p>Configuration for server that use IoT-LAB API (<tt>radiosniffer</tt>).\nWhen not provided, the tool tries to detect them from <tt>.iotlabrc</tt> and current\nrunning experiment.</p>\n<p>IoT-LAB API username:</p>\n<pre>--iotlab-user IOTLAB_USERNAME\n</pre>\n<p>IoT-LAB API password:</p>\n<pre>--iotlab-password IOTLAB_PASSWORD\n</pre>\n<p>IoT-LAB experiment ID to use:</p>\n<pre>--experiment-id EXPERIMENT_ID\n</pre>\n</div>\n</div>\n</div>\n\n          </div>"}, "last_serial": 2989343, "releases": {"0.4.0": [{"comment_text": "", "digests": {"md5": "f94058f126c4d8561fb50c3db87b1bdb", "sha256": "c0b86493f9ca38488c4353685966c74ab93d54f9504680c2aba4ac6a93220230"}, "downloads": -1, "filename": "iotlabmqtt-0.4.0.tar.gz", "has_sig": false, "md5_digest": "f94058f126c4d8561fb50c3db87b1bdb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 36656, "upload_time": "2017-03-13T14:05:09", "upload_time_iso_8601": "2017-03-13T14:05:09.147523Z", "url": "https://files.pythonhosted.org/packages/76/d3/b3c2e1815bad23265c42d18f432bc2d7f88af4de7ba61fbcc1315da7cccd/iotlabmqtt-0.4.0.tar.gz", "yanked": false}], "0.4.1": [{"comment_text": "", "digests": {"md5": "95b8f8f736015d71f43247a501c67980", "sha256": "458bee6614e7489f5eb366810b265ac2767379e3bd4290a48e974318e260982a"}, "downloads": -1, "filename": "iotlabmqtt-0.4.1.tar.gz", "has_sig": false, "md5_digest": "95b8f8f736015d71f43247a501c67980", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 36964, "upload_time": "2017-03-16T13:45:08", "upload_time_iso_8601": "2017-03-16T13:45:08.688336Z", "url": "https://files.pythonhosted.org/packages/96/63/171dba7007f90adb23ae84b7407880508f92614c4fdaaabdff0fc8ff08c7/iotlabmqtt-0.4.1.tar.gz", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "0ec4ac597f9dd6b851c257857900dc6b", "sha256": "a5113344ce339acab5c97c34d1c123a7bba4644f0069a603ffd1a084ae453657"}, "downloads": -1, "filename": "iotlabmqtt-0.5.0.tar.gz", "has_sig": false, "md5_digest": "0ec4ac597f9dd6b851c257857900dc6b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 58024, "upload_time": "2017-04-12T16:48:22", "upload_time_iso_8601": "2017-04-12T16:48:22.058683Z", "url": "https://files.pythonhosted.org/packages/eb/20/ec62e76707bead6b4cb25ab7931e8862a5c25c8461a2f4a8e45447558b70/iotlabmqtt-0.5.0.tar.gz", "yanked": false}], "0.6.0": [{"comment_text": "", "digests": {"md5": "19d42742502561c8e56676c5cc058cf3", "sha256": "c69d674a5e8708f8f1ce342585abee454987143db0feca5299e21697ae62bd77"}, "downloads": -1, "filename": "iotlabmqtt-0.6.0.tar.gz", "has_sig": false, "md5_digest": "19d42742502561c8e56676c5cc058cf3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 70834, "upload_time": "2017-05-30T12:10:56", "upload_time_iso_8601": "2017-05-30T12:10:56.171129Z", "url": "https://files.pythonhosted.org/packages/7b/57/72f4d4a775b4d90203e21a00f17e5a388ac55465ad6e62a61225750c628d/iotlabmqtt-0.6.0.tar.gz", "yanked": false}], "0.6.1": [{"comment_text": "", "digests": {"md5": "9f81d7a019ab54b421846835c794057a", "sha256": "435feca5da05e021976da49ecabbcec855a2db1cec4e723f314f27e6d94f97ba"}, "downloads": -1, "filename": "iotlabmqtt-0.6.1.tar.gz", "has_sig": false, "md5_digest": "9f81d7a019ab54b421846835c794057a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 57944, "upload_time": "2017-06-07T15:58:29", "upload_time_iso_8601": "2017-06-07T15:58:29.284363Z", "url": "https://files.pythonhosted.org/packages/07/4c/c3c84478114518699eddffc426789fed499b7039ab76dc6a4055d93e1e04/iotlabmqtt-0.6.1.tar.gz", "yanked": false}], "0.6.2": [{"comment_text": "", "digests": {"md5": "b3334ccb82ff0e2f906cbf1292a658a7", "sha256": "7ae5e764e2f45595786cbdff753fd9225db2c5a7fa870d41bda59306b8b2ed42"}, "downloads": -1, "filename": "iotlabmqtt-0.6.2.tar.gz", "has_sig": false, "md5_digest": "b3334ccb82ff0e2f906cbf1292a658a7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 61938, "upload_time": "2017-06-07T15:59:11", "upload_time_iso_8601": "2017-06-07T15:59:11.407017Z", "url": "https://files.pythonhosted.org/packages/2d/94/2f6c9e19a8e4d70dde3a5f9c572265d23c75a5f87d94cb331be69329a5a9/iotlabmqtt-0.6.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b3334ccb82ff0e2f906cbf1292a658a7", "sha256": "7ae5e764e2f45595786cbdff753fd9225db2c5a7fa870d41bda59306b8b2ed42"}, "downloads": -1, "filename": "iotlabmqtt-0.6.2.tar.gz", "has_sig": false, "md5_digest": "b3334ccb82ff0e2f906cbf1292a658a7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 61938, "upload_time": "2017-06-07T15:59:11", "upload_time_iso_8601": "2017-06-07T15:59:11.407017Z", "url": "https://files.pythonhosted.org/packages/2d/94/2f6c9e19a8e4d70dde3a5f9c572265d23c75a5f87d94cb331be69329a5a9/iotlabmqtt-0.6.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:54:49 2020"}