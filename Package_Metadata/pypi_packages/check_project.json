{"info": {"author": "Adam Wolf", "author_email": "adamwolf@feelslikeburning.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: Console", "Intended Audience :: Developers", "License :: OSI Approved :: GNU General Public License v2 (GPLv2)", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3"], "description": "==============\ncheck_project\n==============\n\ncheck_project provides a command line tool for checking a variety\nof things on a project directory, like if you have code hidden in\na git stash, or unpushed commits.  Currently, it mostly assumes\nthe project is in Git.\n\nTypical usage often looks like this::\n\n    check_projects -d /foo/bar/baz\n\nwhich would check /foo/bar/baz for the following:\n\n* a non-empty file in /foo/bar/baz with a name that starts with README\n* a non-empty file in /foo/bar/baz with a name that starts with LICENSE\n* /foo/bar/baz being in a git repository\n* /foo/bar/baz's git repository having an empty stash\n* /foo/bar/baz's git repository having remotes\n* /foo/bar/baz's git repository having no uncommited changes\n* /foo/bar/baz's git repository having no unpushed commits\n\nThe exit code of check_projects is 0 if all the checks pass, and 3 if any fail.\nOther non-zero exit codes may happen, and they indicate errors.\n\nI'm definitely open to other checks and other version control systems.  Let me know if there's\nsomething you're interested in.\n\ncheck_projects seems to work for me, but please do not assume it works perfectly.  If you're\nusing it for something critical, take a look at the code or let me know.\n\nUsage\n=====\n\nYou can get help at the command line with --help::\n\n    usage: check_project [-h] [-v | -q] [-d DIRECTORY] [--ignore-unpushed]\n                         [--ignore-uncommitted] [--ignore-stash]\n                         [--ignore-missing-readme] [--ignore-missing-license]\n                         [--ignore-no-remotes] [--ignore-unpushed-if-no-remotes]\n    \n    Check project directories for uncommitted or unpushed work and for files like\n    README and LICENSE.\n    \n    optional arguments:\n      -h, --help            show this help message and exit\n      -v, --verbose\n      -q, --quiet\n      -d DIRECTORY, --directory DIRECTORY\n                            Base of the project. Defaults to current directory.\n      --ignore-unpushed     Don't check for unpushed commits.\n      --ignore-uncommitted  Don't check for uncommitted changes.\n      --ignore-stash        Don't check for work in the stash.\n      --ignore-missing-readme\n                            Don't check for a README.\n      --ignore-missing-license\n                            Don't check for a LICENSE.\n      --ignore-no-remotes   Don't check for remotes.\n      --ignore-unpushed-if-no-remotes\n                            Don't check for unpushed commits if there are no\n                            remotes. You probably also want --ignore-no-remotes.\n\nInstallation\n============\n\ncheck_project should work on Linux and OS X, and definitely requires Git\nto be installed.  It should work on Python 2.7, and 3.4+.  It may work on \nWindows and other versions of Python.  If you test it and it does, please let\nme know.\n\nDevelopment\n===========\n\nHere's what I do.  Create a virtualenv.  Activate it.\nYou can run the code tests with ``python setup.py test``.\nIf you want to do the full suite of tests, and style checks,\ninstall tox into the virtualenv, and then run tox.  You can\nalso install the package into your virtualenv with\n``pip install -e .``.\n\nContact\n=======\nIf you have questions, comments, bug reports, heaps of praise, ideas,\nplease make an issue at https://github.com/adamwolf/check_project.\n\nThanks!\n\nOther Tools\n===========\n\nThere are numerous other tools like check_project that might suit you better.\n\n* https://github.com/nailgun/unpushed\n \n* https://github.com/badele/gitcheck\n \n* https://github.com/mbforbes/git-checker\n \n* https://astrofloyd.wordpress.com/2013/02/10/gitcheck-check-all-your-git-repositories-for-changes/", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/adamwolf/check_project", "keywords": "unpushed uncommitted style", "license": "GPLv2", "maintainer": null, "maintainer_email": null, "name": "check_project", "package_url": "https://pypi.org/project/check_project/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/check_project/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/adamwolf/check_project"}, "release_url": "https://pypi.org/project/check_project/0.1.0/", "requires_dist": null, "requires_python": null, "summary": "Check project directories for uncommitted or unpushed work and for files like README and LICENSE.", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>check_project provides a command line tool for checking a variety\nof things on a project directory, like if you have code hidden in\na git stash, or unpushed commits.  Currently, it mostly assumes\nthe project is in Git.</p>\n<p>Typical usage often looks like this:</p>\n<pre>check_projects -d /foo/bar/baz\n</pre>\n<p>which would check /foo/bar/baz for the following:</p>\n<ul>\n<li>a non-empty file in /foo/bar/baz with a name that starts with README</li>\n<li>a non-empty file in /foo/bar/baz with a name that starts with LICENSE</li>\n<li>/foo/bar/baz being in a git repository</li>\n<li>/foo/bar/baz\u2019s git repository having an empty stash</li>\n<li>/foo/bar/baz\u2019s git repository having remotes</li>\n<li>/foo/bar/baz\u2019s git repository having no uncommited changes</li>\n<li>/foo/bar/baz\u2019s git repository having no unpushed commits</li>\n</ul>\n<p>The exit code of check_projects is 0 if all the checks pass, and 3 if any fail.\nOther non-zero exit codes may happen, and they indicate errors.</p>\n<p>I\u2019m definitely open to other checks and other version control systems.  Let me know if there\u2019s\nsomething you\u2019re interested in.</p>\n<p>check_projects seems to work for me, but please do not assume it works perfectly.  If you\u2019re\nusing it for something critical, take a look at the code or let me know.</p>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>You can get help at the command line with \u2013help:</p>\n<pre>usage: check_project [-h] [-v | -q] [-d DIRECTORY] [--ignore-unpushed]\n                     [--ignore-uncommitted] [--ignore-stash]\n                     [--ignore-missing-readme] [--ignore-missing-license]\n                     [--ignore-no-remotes] [--ignore-unpushed-if-no-remotes]\n\nCheck project directories for uncommitted or unpushed work and for files like\nREADME and LICENSE.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -v, --verbose\n  -q, --quiet\n  -d DIRECTORY, --directory DIRECTORY\n                        Base of the project. Defaults to current directory.\n  --ignore-unpushed     Don't check for unpushed commits.\n  --ignore-uncommitted  Don't check for uncommitted changes.\n  --ignore-stash        Don't check for work in the stash.\n  --ignore-missing-readme\n                        Don't check for a README.\n  --ignore-missing-license\n                        Don't check for a LICENSE.\n  --ignore-no-remotes   Don't check for remotes.\n  --ignore-unpushed-if-no-remotes\n                        Don't check for unpushed commits if there are no\n                        remotes. You probably also want --ignore-no-remotes.\n</pre>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>check_project should work on Linux and OS X, and definitely requires Git\nto be installed.  It should work on Python 2.7, and 3.4+.  It may work on\nWindows and other versions of Python.  If you test it and it does, please let\nme know.</p>\n</div>\n<div id=\"development\">\n<h2>Development</h2>\n<p>Here\u2019s what I do.  Create a virtualenv.  Activate it.\nYou can run the code tests with <tt>python setup.py test</tt>.\nIf you want to do the full suite of tests, and style checks,\ninstall tox into the virtualenv, and then run tox.  You can\nalso install the package into your virtualenv with\n<tt>pip install <span class=\"pre\">-e</span> .</tt>.</p>\n</div>\n<div id=\"contact\">\n<h2>Contact</h2>\n<p>If you have questions, comments, bug reports, heaps of praise, ideas,\nplease make an issue at <a href=\"https://github.com/adamwolf/check_project\" rel=\"nofollow\">https://github.com/adamwolf/check_project</a>.</p>\n<p>Thanks!</p>\n</div>\n<div id=\"other-tools\">\n<h2>Other Tools</h2>\n<p>There are numerous other tools like check_project that might suit you better.</p>\n<ul>\n<li><a href=\"https://github.com/nailgun/unpushed\" rel=\"nofollow\">https://github.com/nailgun/unpushed</a></li>\n<li><a href=\"https://github.com/badele/gitcheck\" rel=\"nofollow\">https://github.com/badele/gitcheck</a></li>\n<li><a href=\"https://github.com/mbforbes/git-checker\" rel=\"nofollow\">https://github.com/mbforbes/git-checker</a></li>\n<li><a href=\"https://astrofloyd.wordpress.com/2013/02/10/gitcheck-check-all-your-git-repositories-for-changes/\" rel=\"nofollow\">https://astrofloyd.wordpress.com/2013/02/10/gitcheck-check-all-your-git-repositories-for-changes/</a></li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 1733790, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "5867c508f46cac6802f139e87545a98e", "sha256": "76b0efc86d16d28962af363e69241f5d70d6311eadaafbd453a105af7fff99b0"}, "downloads": -1, "filename": "check_project-0.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "5867c508f46cac6802f139e87545a98e", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 8652, "upload_time": "2015-09-22T19:30:01", "upload_time_iso_8601": "2015-09-22T19:30:01.844645Z", "url": "https://files.pythonhosted.org/packages/6c/2c/1ca20e54efc94c4d2a7c9521cd6212ba1af54cf7b2c743a3c7c0f7a8e04a/check_project-0.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6b30cbe66eb180ece2538a6e57d07b52", "sha256": "43bc6593c38571a7f04f3b975e02cb25820fb1cd9708582d5072bfd2a01011fd"}, "downloads": -1, "filename": "check_project-0.1.0.tar.gz", "has_sig": false, "md5_digest": "6b30cbe66eb180ece2538a6e57d07b52", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15471, "upload_time": "2015-09-22T19:30:13", "upload_time_iso_8601": "2015-09-22T19:30:13.182649Z", "url": "https://files.pythonhosted.org/packages/b9/9e/a15e845f6ff6975a724bc39352d390fb88c928d365e5f5919f0c38491ebb/check_project-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "5867c508f46cac6802f139e87545a98e", "sha256": "76b0efc86d16d28962af363e69241f5d70d6311eadaafbd453a105af7fff99b0"}, "downloads": -1, "filename": "check_project-0.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "5867c508f46cac6802f139e87545a98e", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 8652, "upload_time": "2015-09-22T19:30:01", "upload_time_iso_8601": "2015-09-22T19:30:01.844645Z", "url": "https://files.pythonhosted.org/packages/6c/2c/1ca20e54efc94c4d2a7c9521cd6212ba1af54cf7b2c743a3c7c0f7a8e04a/check_project-0.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6b30cbe66eb180ece2538a6e57d07b52", "sha256": "43bc6593c38571a7f04f3b975e02cb25820fb1cd9708582d5072bfd2a01011fd"}, "downloads": -1, "filename": "check_project-0.1.0.tar.gz", "has_sig": false, "md5_digest": "6b30cbe66eb180ece2538a6e57d07b52", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15471, "upload_time": "2015-09-22T19:30:13", "upload_time_iso_8601": "2015-09-22T19:30:13.182649Z", "url": "https://files.pythonhosted.org/packages/b9/9e/a15e845f6ff6975a724bc39352d390fb88c928d365e5f5919f0c38491ebb/check_project-0.1.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:19:43 2020"}