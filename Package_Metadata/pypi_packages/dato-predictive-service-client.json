{"info": {"author": "Dato, Inc.", "author_email": "support@dato.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Console", "Intended Audience :: Developers", "Intended Audience :: Financial and Insurance Industry", "Intended Audience :: Information Technology", "Intended Audience :: Other Audience", "Intended Audience :: Science/Research", "License :: OSI Approved :: BSD License", "Natural Language :: English", "Operating System :: MacOS :: MacOS X", "Operating System :: POSIX :: BSD", "Operating System :: POSIX :: Linux", "Operating System :: Unix", "Programming Language :: Python :: 2.7", "Topic :: Internet :: WWW/HTTP :: WSGI :: Application", "Topic :: Scientific/Engineering", "Topic :: Scientific/Engineering :: Information Analysis"], "description": "Dato Predictive Service Python Client\n=====================================\n\nThe purpose of the Dato Predictive Service Python Client library is to allow\nPython applications to easily query Dato Predictive Services.\n\nInstallation\n------------\n\nTo install Dato Predictive Service Python Client, simply:\n\n.. code-block:: bash\n\n    sudo pip install dato-predictive-service-client\n\nor from source:\n\n.. code-block:: bash\n\n    sudo python setup.py install\n\nRequirements\n------------\n\n- Dato Predictive Service, launched by GraphLab-Create >= 1.4 installation\n\nUsage\n-----\n\nCreate Client\n^^^^^^^^^^^^^\n\nTo use the Dato Predictive Service Python Client, first you need to obtain the\nfollowing information from a running Dato Predictive Service:\n\n- Predictive Service CNAME or DNS name (endpoint)\n- API key from the Predictive Service\n\nOnce you have obtained the above information, simply create a new PredictiveServiceClient:\n\n.. code-block:: python\n    \n    from dato.deploy import PredictiveServiceClient;\n\n    client = PredictiveServiceClient(endpoint = <endpoint>,\n                                    api_key = <api_key>,\n                                    should_verify_certificate = <True-or-False>)\n\nTo enable SSL certificate verification for this Predictive Service, \nset the ``should_verify_certificate`` to **true**. However, if your Predictive Service\nis launched with a self-signed certificate or without certificate, please \nset ``should_verify_certificate`` to **false**.\n\nThe PredictiveServiceClient can also be created by using a Predictive Service `client configuration file`_.\n\n.. code-block:: python\n\n    client = PredictiveServiceClient(config_file = <path_to_file>)\n\nQuery\n^^^^^\n\nTo query a model that is deployed on the Predictive Service, you will need:\n\n- model name\n- method to query (recommend, predict, query, etc.)\n- data used to query against the model\n\nFor example, the code below demonstrates how to query a recommender model, named\n``rec``, for recommendations for user ```Jacob Smith```:\n\n.. code:: python\n\n    data = {'users': ['Jacob Smith'] }\n    result = client.query('rec', method = 'recommend', data = data)\n\n**Notes**\n\n- Different models could support different query methods (recommend, predict, query, etc.)\n  and different syntax and format for **data**. You will need to know the\n  supported methods and query data format before querying the model.\n\nSet timeout\n^^^^^^^^^^^\n\nTo change the request timeout when querying the Predictive Service, use the following:\n\n.. code:: python\n\n    # set timeout to 5 seconds.\n    client.set_query_timeout(timeout = 5)\n\nThe default timeout is 10 seconds.\n\nResults\n^^^^^^^\n\nThe output to the ``query()`` function is a dictionary of the query result.\n\nIf query is successful, the query result contains:\n\n- model response\n- uuid for this query\n- version of the model\n\n.. code:: python\n\n    model_response = result['response']\n    uuid = result['uuid']\n    version = result['version']\n\n``model_response`` contains the actual model output from your query.\n\nSend feedback\n^^^^^^^^^^^^^\n\nOnce you get the query result, you can submit feedback data corresponding to this query\nback to the Predictive Service. This feedback data can be used for evaluating your\ncurrent model and training future models.\n\nTo submit feedback data corresponding to a particular query, you will need the UUID\nof the query. The UUID can be easily obtained from the query result.\n\n.. code:: python\n\n    uuid = result['uuid']\n\nFor the feedback data, you can use any attributes or value pairs that you like.\n\nExample: \n\n.. code:: python\n\n    feedback_data = dict()\n    feedback_data['num_of_clicks'] = 3\n    feedback_data['searched_terms'] = 'test'\n\nNow we can send this feedback data to the Predictive\nService to associate this feedback with a particular query.\n\n.. code:: python\n\n    client.feedback(uuid, feedback_data);\n\nMore Info\n---------\n\nFor more information about the Dato Predictive Service, please read\nthe `API docs`_ and `userguide`_.\n\nLicense\n-------\n\nThe Dato Predictive Service Python Client is provided under the 3-clause BSD `license`_.\n\n\n.. _client configuration file: https://dato.com/products/create/docs/generated/graphlab.deploy.PredictiveService.save_client_config.html\n.. _API docs: https://dato.com/products/create/docs/generated/graphlab.deploy.PredictiveService.html \n.. _userguide: https://dato.com/learn/userguide/deployment/pred-getting-started.html\n.. _license: https://github.com/dato-code/Dato-Predictive-Service-Client-Python/raw/master/LICENSE", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/dato-code/Dato-Predictive-Service-Client-Python", "keywords": null, "license": "LICENSE", "maintainer": null, "maintainer_email": null, "name": "dato-predictive-service-client", "package_url": "https://pypi.org/project/dato-predictive-service-client/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/dato-predictive-service-client/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/dato-code/Dato-Predictive-Service-Client-Python"}, "release_url": "https://pypi.org/project/dato-predictive-service-client/1.0.0/", "requires_dist": null, "requires_python": null, "summary": "Dato Predictive Service Client makes it easy to make REST API calls to Dato Predictive Services", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>The purpose of the Dato Predictive Service Python Client library is to allow\nPython applications to easily query Dato Predictive Services.</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>To install Dato Predictive Service Python Client, simply:</p>\n<pre>sudo pip install dato-predictive-service-client\n</pre>\n<p>or from source:</p>\n<pre>sudo python setup.py install\n</pre>\n</div>\n<div id=\"requirements\">\n<h2>Requirements</h2>\n<ul>\n<li>Dato Predictive Service, launched by GraphLab-Create &gt;= 1.4 installation</li>\n</ul>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<div id=\"create-client\">\n<h3>Create Client</h3>\n<p>To use the Dato Predictive Service Python Client, first you need to obtain the\nfollowing information from a running Dato Predictive Service:</p>\n<ul>\n<li>Predictive Service CNAME or DNS name (endpoint)</li>\n<li>API key from the Predictive Service</li>\n</ul>\n<p>Once you have obtained the above information, simply create a new PredictiveServiceClient:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">dato.deploy</span> <span class=\"kn\">import</span> <span class=\"n\">PredictiveServiceClient</span><span class=\"p\">;</span>\n\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">PredictiveServiceClient</span><span class=\"p\">(</span><span class=\"n\">endpoint</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">endpoint</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n                                <span class=\"n\">api_key</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">api_key</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n                                <span class=\"n\">should_verify_certificate</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"kc\">True</span><span class=\"o\">-</span><span class=\"ow\">or</span><span class=\"o\">-</span><span class=\"kc\">False</span><span class=\"o\">&gt;</span><span class=\"p\">)</span>\n</pre>\n<p>To enable SSL certificate verification for this Predictive Service,\nset the <tt>should_verify_certificate</tt> to <strong>true</strong>. However, if your Predictive Service\nis launched with a self-signed certificate or without certificate, please\nset <tt>should_verify_certificate</tt> to <strong>false</strong>.</p>\n<p>The PredictiveServiceClient can also be created by using a Predictive Service <a href=\"https://dato.com/products/create/docs/generated/graphlab.deploy.PredictiveService.save_client_config.html\" rel=\"nofollow\">client configuration file</a>.</p>\n<pre><span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">PredictiveServiceClient</span><span class=\"p\">(</span><span class=\"n\">config_file</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">path_to_file</span><span class=\"o\">&gt;</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"query\">\n<h3>Query</h3>\n<p>To query a model that is deployed on the Predictive Service, you will need:</p>\n<ul>\n<li>model name</li>\n<li>method to query (recommend, predict, query, etc.)</li>\n<li>data used to query against the model</li>\n</ul>\n<p>For example, the code below demonstrates how to query a recommender model, named\n<tt>rec</tt>, for recommendations for user <tt>`Jacob Smith`</tt>:</p>\n<pre><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'users'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'Jacob Smith'</span><span class=\"p\">]</span> <span class=\"p\">}</span>\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">(</span><span class=\"s1\">'rec'</span><span class=\"p\">,</span> <span class=\"n\">method</span> <span class=\"o\">=</span> <span class=\"s1\">'recommend'</span><span class=\"p\">,</span> <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"p\">)</span>\n</pre>\n<p><strong>Notes</strong></p>\n<ul>\n<li>Different models could support different query methods (recommend, predict, query, etc.)\nand different syntax and format for <strong>data</strong>. You will need to know the\nsupported methods and query data format before querying the model.</li>\n</ul>\n</div>\n<div id=\"set-timeout\">\n<h3>Set timeout</h3>\n<p>To change the request timeout when querying the Predictive Service, use the following:</p>\n<pre><span class=\"c1\"># set timeout to 5 seconds.</span>\n<span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">set_query_timeout</span><span class=\"p\">(</span><span class=\"n\">timeout</span> <span class=\"o\">=</span> <span class=\"mi\">5</span><span class=\"p\">)</span>\n</pre>\n<p>The default timeout is 10 seconds.</p>\n</div>\n<div id=\"results\">\n<h3>Results</h3>\n<p>The output to the <tt>query()</tt> function is a dictionary of the query result.</p>\n<p>If query is successful, the query result contains:</p>\n<ul>\n<li>model response</li>\n<li>uuid for this query</li>\n<li>version of the model</li>\n</ul>\n<pre><span class=\"n\">model_response</span> <span class=\"o\">=</span> <span class=\"n\">result</span><span class=\"p\">[</span><span class=\"s1\">'response'</span><span class=\"p\">]</span>\n<span class=\"n\">uuid</span> <span class=\"o\">=</span> <span class=\"n\">result</span><span class=\"p\">[</span><span class=\"s1\">'uuid'</span><span class=\"p\">]</span>\n<span class=\"n\">version</span> <span class=\"o\">=</span> <span class=\"n\">result</span><span class=\"p\">[</span><span class=\"s1\">'version'</span><span class=\"p\">]</span>\n</pre>\n<p><tt>model_response</tt> contains the actual model output from your query.</p>\n</div>\n<div id=\"send-feedback\">\n<h3>Send feedback</h3>\n<p>Once you get the query result, you can submit feedback data corresponding to this query\nback to the Predictive Service. This feedback data can be used for evaluating your\ncurrent model and training future models.</p>\n<p>To submit feedback data corresponding to a particular query, you will need the UUID\nof the query. The UUID can be easily obtained from the query result.</p>\n<pre><span class=\"n\">uuid</span> <span class=\"o\">=</span> <span class=\"n\">result</span><span class=\"p\">[</span><span class=\"s1\">'uuid'</span><span class=\"p\">]</span>\n</pre>\n<p>For the feedback data, you can use any attributes or value pairs that you like.</p>\n<p>Example:</p>\n<pre><span class=\"n\">feedback_data</span> <span class=\"o\">=</span> <span class=\"nb\">dict</span><span class=\"p\">()</span>\n<span class=\"n\">feedback_data</span><span class=\"p\">[</span><span class=\"s1\">'num_of_clicks'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>\n<span class=\"n\">feedback_data</span><span class=\"p\">[</span><span class=\"s1\">'searched_terms'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'test'</span>\n</pre>\n<p>Now we can send this feedback data to the Predictive\nService to associate this feedback with a particular query.</p>\n<pre><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">feedback</span><span class=\"p\">(</span><span class=\"n\">uuid</span><span class=\"p\">,</span> <span class=\"n\">feedback_data</span><span class=\"p\">);</span>\n</pre>\n</div>\n</div>\n<div id=\"more-info\">\n<h2>More Info</h2>\n<p>For more information about the Dato Predictive Service, please read\nthe <a href=\"https://dato.com/products/create/docs/generated/graphlab.deploy.PredictiveService.html\" rel=\"nofollow\">API docs</a> and <a href=\"https://dato.com/learn/userguide/deployment/pred-getting-started.html\" rel=\"nofollow\">userguide</a>.</p>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>The Dato Predictive Service Python Client is provided under the 3-clause BSD <a href=\"https://github.com/dato-code/Dato-Predictive-Service-Client-Python/raw/master/LICENSE\" rel=\"nofollow\">license</a>.</p>\n</div>\n\n          </div>"}, "last_serial": 1552429, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "82022f1e0b91aef55b5abc2efbb2960c", "sha256": "47c94452febb5103838e68009f70175010b74ddb075b5599734cfa43df6e0417"}, "downloads": -1, "filename": "dato-predictive-service-client-1.0.0.tar.gz", "has_sig": false, "md5_digest": "82022f1e0b91aef55b5abc2efbb2960c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6486, "upload_time": "2015-05-19T00:12:24", "upload_time_iso_8601": "2015-05-19T00:12:24.733984Z", "url": "https://files.pythonhosted.org/packages/29/0b/b4801427924dc27f41c598268d94a9d2738b346f5f1f87803cb10d292228/dato-predictive-service-client-1.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "82022f1e0b91aef55b5abc2efbb2960c", "sha256": "47c94452febb5103838e68009f70175010b74ddb075b5599734cfa43df6e0417"}, "downloads": -1, "filename": "dato-predictive-service-client-1.0.0.tar.gz", "has_sig": false, "md5_digest": "82022f1e0b91aef55b5abc2efbb2960c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6486, "upload_time": "2015-05-19T00:12:24", "upload_time_iso_8601": "2015-05-19T00:12:24.733984Z", "url": "https://files.pythonhosted.org/packages/29/0b/b4801427924dc27f41c598268d94a9d2738b346f5f1f87803cb10d292228/dato-predictive-service-client-1.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:40:03 2020"}