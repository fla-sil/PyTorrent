{"info": {"author": "Austin Clyde", "author_email": "aclyde@uchicago.edu", "bugtrack_url": null, "classifiers": ["Operating System :: OS Independent", "Programming Language :: Python :: 2", "Programming Language :: Python :: 3"], "description": "# ChebyGCN\n\n```python\npip install ChebyGCN\n```\n\nNotice, for training and testing data, permutations of the data must be done in a certain way to align with \npooling of the graph lapacian. Further, every level of graph corsening is a pool of size two, thus if you want to \npool by 2 and then 4, you need log_2(2 * 4)= 3 levels. You will also need to index your Lapancians as seen below.\n\n```python \nfrom ChebyGCN import layers, coarsening\nA = scipy.sparse.csr.csr_matrix(A) #load adjanecy matrix \ngraphs, perm = coarsening.coarsen(A, levels=3, self_connections=True) #produce graph coarsenings \nX_train = coarsening.perm_data(X_train, perm)\nX_test = coarsening.perm_data(X_test, perm)\nL = [coarsening.laplacian(A, normalized=True) for A in graphs]\n\nx_input = Input(shape=(X_train.shape[1],))\nx = Reshape((X_train.shape[1],1))(x_input)\nx = layers.GraphConvolution( 8, 2, 20, L[0])(x)\nx = layers.GraphConvolution( 8, 4, 10, L[2])(x)\nx = Flatten()(x)\nx = Dense(66, activation='softmax')(x)\n```\n\n\nThis code is 96% based on https://github.com/mdeff/cnn_graph Micha\u00ebl Defferrard, Xavier Bresson, Pierre Vandergheynst, Convolutional Neural Networks on Graphs with Fast Localized Spectral Filtering, Neural Information Processing Systems (NIPS), 2016.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/aclyde11/ChebyGCN", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "ChebyGCN", "package_url": "https://pypi.org/project/ChebyGCN/", "platform": "", "project_url": "https://pypi.org/project/ChebyGCN/", "project_urls": {"Homepage": "https://github.com/aclyde11/ChebyGCN"}, "release_url": "https://pypi.org/project/ChebyGCN/0.0.3/", "requires_dist": null, "requires_python": "", "summary": "Implements graph convolution keras layers based on Micha\u00ebl Defferrard, Xavier Bresson, Pierre Vandergheynst, Convolutional Neural Networks on Graphs with Fast Localized Spectral Filtering, Neural Information Processing Systems (NIPS), 2016.", "version": "0.0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>ChebyGCN</h1>\n<pre><span class=\"n\">pip</span> <span class=\"n\">install</span> <span class=\"n\">ChebyGCN</span>\n</pre>\n<p>Notice, for training and testing data, permutations of the data must be done in a certain way to align with\npooling of the graph lapacian. Further, every level of graph corsening is a pool of size two, thus if you want to\npool by 2 and then 4, you need log_2(2 * 4)= 3 levels. You will also need to index your Lapancians as seen below.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ChebyGCN</span> <span class=\"kn\">import</span> <span class=\"n\">layers</span><span class=\"p\">,</span> <span class=\"n\">coarsening</span>\n<span class=\"n\">A</span> <span class=\"o\">=</span> <span class=\"n\">scipy</span><span class=\"o\">.</span><span class=\"n\">sparse</span><span class=\"o\">.</span><span class=\"n\">csr</span><span class=\"o\">.</span><span class=\"n\">csr_matrix</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">)</span> <span class=\"c1\">#load adjanecy matrix </span>\n<span class=\"n\">graphs</span><span class=\"p\">,</span> <span class=\"n\">perm</span> <span class=\"o\">=</span> <span class=\"n\">coarsening</span><span class=\"o\">.</span><span class=\"n\">coarsen</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"n\">levels</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">self_connections</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span> <span class=\"c1\">#produce graph coarsenings </span>\n<span class=\"n\">X_train</span> <span class=\"o\">=</span> <span class=\"n\">coarsening</span><span class=\"o\">.</span><span class=\"n\">perm_data</span><span class=\"p\">(</span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">perm</span><span class=\"p\">)</span>\n<span class=\"n\">X_test</span> <span class=\"o\">=</span> <span class=\"n\">coarsening</span><span class=\"o\">.</span><span class=\"n\">perm_data</span><span class=\"p\">(</span><span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">perm</span><span class=\"p\">)</span>\n<span class=\"n\">L</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">coarsening</span><span class=\"o\">.</span><span class=\"n\">laplacian</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"n\">normalized</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">A</span> <span class=\"ow\">in</span> <span class=\"n\">graphs</span><span class=\"p\">]</span>\n\n<span class=\"n\">x_input</span> <span class=\"o\">=</span> <span class=\"n\">Input</span><span class=\"p\">(</span><span class=\"n\">shape</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"n\">X_train</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],))</span>\n<span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">Reshape</span><span class=\"p\">((</span><span class=\"n\">X_train</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span><span class=\"mi\">1</span><span class=\"p\">))(</span><span class=\"n\">x_input</span><span class=\"p\">)</span>\n<span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">layers</span><span class=\"o\">.</span><span class=\"n\">GraphConvolution</span><span class=\"p\">(</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"n\">L</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">layers</span><span class=\"o\">.</span><span class=\"n\">GraphConvolution</span><span class=\"p\">(</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">L</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">])(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">Flatten</span><span class=\"p\">()(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">Dense</span><span class=\"p\">(</span><span class=\"mi\">66</span><span class=\"p\">,</span> <span class=\"n\">activation</span><span class=\"o\">=</span><span class=\"s1\">'softmax'</span><span class=\"p\">)(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n</pre>\n<p>This code is 96% based on <a href=\"https://github.com/mdeff/cnn_graph\" rel=\"nofollow\">https://github.com/mdeff/cnn_graph</a> Micha\u00ebl Defferrard, Xavier Bresson, Pierre Vandergheynst, Convolutional Neural Networks on Graphs with Fast Localized Spectral Filtering, Neural Information Processing Systems (NIPS), 2016.</p>\n\n          </div>"}, "last_serial": 4744200, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "10870eb4718cf92eb9230f6f9c8cabc6", "sha256": "41ab5ded30091e9f312905f91288a585d2d64196d7b7f696ee65b4ba956019d0"}, "downloads": -1, "filename": "ChebyGCN-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "10870eb4718cf92eb9230f6f9c8cabc6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8473, "upload_time": "2019-01-25T17:15:12", "upload_time_iso_8601": "2019-01-25T17:15:12.495039Z", "url": "https://files.pythonhosted.org/packages/c8/c4/50f7d0142130d99966bf3b5e4cde1b03509f20c329905d11fdc014b644a5/ChebyGCN-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ef26ab87dbf0e9eec2693f3830c99c46", "sha256": "062abb4779e12fbaa38a141fee13957f8466e77aee36095a0aec79793db2a34d"}, "downloads": -1, "filename": "ChebyGCN-0.0.1.tar.gz", "has_sig": false, "md5_digest": "ef26ab87dbf0e9eec2693f3830c99c46", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6814, "upload_time": "2019-01-25T17:15:14", "upload_time_iso_8601": "2019-01-25T17:15:14.443188Z", "url": "https://files.pythonhosted.org/packages/fb/7b/b546e87a6a528a08d442b306f929ba45ac83b839efed2a13d3cda88740c7/ChebyGCN-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "8fcec0e55fe06afc32888f0df2af0212", "sha256": "53565fd0cd4a70faa126783290c740088d96c793451bec49f71c17c0c30e22af"}, "downloads": -1, "filename": "ChebyGCN-0.0.2.tar.gz", "has_sig": false, "md5_digest": "8fcec0e55fe06afc32888f0df2af0212", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6825, "upload_time": "2019-01-25T17:33:02", "upload_time_iso_8601": "2019-01-25T17:33:02.258331Z", "url": "https://files.pythonhosted.org/packages/d0/65/6fa91c5dfb8f1e7d5c001332a307ed0d89d871c1903a9b72ee6e3c99df3b/ChebyGCN-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "3032c7acce08b8ec66de50eff86c6a12", "sha256": "e882a07d983d4d97d38507e7519a65fa64450c9bb0f26aa4a59ab0f5843321c1"}, "downloads": -1, "filename": "ChebyGCN-0.0.3.tar.gz", "has_sig": false, "md5_digest": "3032c7acce08b8ec66de50eff86c6a12", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6828, "upload_time": "2019-01-26T18:30:26", "upload_time_iso_8601": "2019-01-26T18:30:26.801803Z", "url": "https://files.pythonhosted.org/packages/ce/5c/44ee685d452af7324c6685850ac8a2cc3e5d2a2bc2dea55cdd9a2816ab90/ChebyGCN-0.0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "3032c7acce08b8ec66de50eff86c6a12", "sha256": "e882a07d983d4d97d38507e7519a65fa64450c9bb0f26aa4a59ab0f5843321c1"}, "downloads": -1, "filename": "ChebyGCN-0.0.3.tar.gz", "has_sig": false, "md5_digest": "3032c7acce08b8ec66de50eff86c6a12", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6828, "upload_time": "2019-01-26T18:30:26", "upload_time_iso_8601": "2019-01-26T18:30:26.801803Z", "url": "https://files.pythonhosted.org/packages/ce/5c/44ee685d452af7324c6685850ac8a2cc3e5d2a2bc2dea55cdd9a2816ab90/ChebyGCN-0.0.3.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:34:21 2020"}