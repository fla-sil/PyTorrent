{"info": {"author": "Tesorio", "author_email": "hello@tesorio.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Framework :: Django", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 3"], "description": "\n**django-anon** will help you anonymize your production database so it can be\nshared among developers, helping to reproduce bugs and make performance improvements\nin a production-like environment.\n\n.. image:: https://raw.githubusercontent.com/Tesorio/django-anon/master/django-anon-recording.gif\n\nFeatures\n########\n\n.. csv-table::\n\n   \"\ud83d\ude80\", \"**Really fast** data anonymization and database operations using bulk updates to operate over huge tables\"\n   \"\ud83c\udf70\", \"**Flexible** to use your own anonymization functions or external libraries like `Faker <https://faker.readthedocs.io/en/latest/index.html>`_\"\n   \"\ud83d\udc29\", \"**Elegant** solution following consolidated patterns from projects like `Django <https://djangoproject.com/>`_ and `Factory Boy <https://factoryboy.readthedocs.io/en/latest/index.html>`_\"\n   \"\ud83d\udd28\", \"**Powerful**. It can be used on any projects, not only Django, not only Python. Really!\"\n\nTable of Contents\n#################\n.. contents::\n   :local:\n\nInstallation\n============\n\n.. code::\n\n   pip install django-anon\n\nRequirements\n============\n\n* Python (2.7, 3.6)\n* Django (1.8, 1.11, 2.2)\n\nUsage\n=====\n\nUse ``anon.BaseAnonymizer`` to define your anonymizer classes:\n\n.. code-block:: python\n\n   import anon\n   from your_app.models import Person\n\n   class PersonAnonymizer(anon.BaseAnonymizer):\n      email = anon.fake_email\n\n      # You can use static values instead of callables\n      is_admin = False\n\n      class Meta:\n         model = Person\n\n   # run anonymizer: be cautious, this will affect your current database!\n   PersonAnonymizer().run()\n\n\nBuilt-in functions\n------------------\n\n.. code:: python\n\n   fake_word(min_size=_min_word_size, max_size=20)\n   fake_text(max_size=255, max_diff_allowed=5, separator=' ')\n   fake_small_text(max_size=50)\n   fake_name(max_size=15)\n   fake_username(max_size=10, separator='', rand_range=(1000, 999999))\n   fake_email(max_size=25, suffix='@example.com')\n   fake_url(max_size=50, scheme='http://', suffix='.com')\n   fake_phone_number(format='999-999-9999')\n\n\nLazy attributes\n---------------\n\nLazy attributes can be defined as inline lambdas or methods, as shown below,\nusing the ``anon.lazy_attribute`` function/decorator.\n\n.. code-block:: python\n\n   import anon\n   from your_app.models import Person\n\n   class PersonAnonymizer(anon.BaseAnonymizer):\n      name = anon.lazy_attribute(lambda o: 'x' * len(o.name))\n\n      @lazy_attribute\n      def date_of_birth(self):\n         # keep year and month\n         return self.date_of_birth.replace(day=1)\n\n      class Meta:\n         model = Person\n\n\nThe clean method\n----------------\n\n.. code-block:: python\n\n   import anon\n\n   class UserAnonymizer(anon.BaseAnonymizer):\n      class Meta:\n         model = User\n\n      def clean(self, obj):\n         obj.set_password('test')\n         obj.save()\n\n\nDefining a custom QuerySet\n--------------------------\n\nA custom QuerySet can be used to select the rows that should be anonymized:\n\n.. code-block:: python\n\n   import anon\n   from your_app.models import Person\n\n   class PersonAnonymizer(anon.BaseAnonymizer):\n      email = anon.fake_email\n\n      class Meta:\n         model = Person\n\n      def get_queryset(self):\n         # keep admins unmodified\n         return Person.objects.exclude(is_admin=True)\n\n\nHigh-quality fake data\n----------------------\n\nIn order to be really fast, **django-anon** uses it's own algorithm to generate fake data. It is\nreally fast, but the generated data is not pretty. If you need something prettier in terms of data,\nwe suggest using `Faker <https://faker.readthedocs.io/en/latest/index.html>`_, which can be used\nout-of-the-box as the below:\n\n.. code-block:: python\n\n   import anon\n   from faker import Faker\n   from your_app.models import Address\n\n   faker = Faker()\n\n   class PersonAnonymizer(anon.BaseAnonymizer):\n      postalcode = faker.postalcode\n\n      class Meta:\n         model = Address\n\n\nChangelog\n=========\n\nCheck out `CHANGELOG.rst <https://github.com/Tesorio/django-anon/blob/master/CHANGELOG.rst>`_ for release notes\n\nContributing\n============\n\nCheck out `CONTRIBUTING.rst <https://github.com/Tesorio/django-anon/blob/master/CONTRIBUTING.rst>`_ for information about getting involved\n\nLicense\n=======\n\n`MIT <https://github.com/Tesorio/django-anon/blob/master/LICENSE>`_\n\n----\n\n`Icon <icon.svg>`_ made by `Eucalyp <https://www.flaticon.com/authors/eucalyp>`_ from `www.flaticon.com <https://www.flaticon.com/>`_\n\n\n", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Tesorio/django-anon", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "django-anon", "package_url": "https://pypi.org/project/django-anon/", "platform": "any", "project_url": "https://pypi.org/project/django-anon/", "project_urls": {"Homepage": "https://github.com/Tesorio/django-anon"}, "release_url": "https://pypi.org/project/django-anon/0.1/", "requires_dist": ["django-bulk-update", "django-chunkator"], "requires_python": "", "summary": "Anonymize production data so it can be safely used in not-so-safe environments", "version": "0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><strong>django-anon</strong> will help you anonymize your production database so it can be\nshared among developers, helping to reproduce bugs and make performance improvements\nin a production-like environment.</p>\n<img alt=\"https://raw.githubusercontent.com/Tesorio/django-anon/master/django-anon-recording.gif\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/076c033b41217ef636f943345dc2e74ecb03b9ab/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f5465736f72696f2f646a616e676f2d616e6f6e2f6d61737465722f646a616e676f2d616e6f6e2d7265636f7264696e672e676966\">\n<div id=\"features\">\n<h2>Features</h2>\n<table>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<tbody>\n<tr><td>\ud83d\ude80</td>\n<td><strong>Really fast</strong> data anonymization and database operations using bulk updates to operate over huge tables</td>\n</tr>\n<tr><td>\ud83c\udf70</td>\n<td><strong>Flexible</strong> to use your own anonymization functions or external libraries like <a href=\"https://faker.readthedocs.io/en/latest/index.html\" rel=\"nofollow\">Faker</a></td>\n</tr>\n<tr><td>\ud83d\udc29</td>\n<td><strong>Elegant</strong> solution following consolidated patterns from projects like <a href=\"https://djangoproject.com/\" rel=\"nofollow\">Django</a> and <a href=\"https://factoryboy.readthedocs.io/en/latest/index.html\" rel=\"nofollow\">Factory Boy</a></td>\n</tr>\n<tr><td>\ud83d\udd28</td>\n<td><strong>Powerful</strong>. It can be used on any projects, not only Django, not only Python. Really!</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div id=\"table-of-contents\">\n<h2>Table of Contents</h2>\n<div id=\"contents\">\n<ul>\n<li><a href=\"#installation\" id=\"id2\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"#requirements\" id=\"id3\" rel=\"nofollow\">Requirements</a></li>\n<li><a href=\"#usage\" id=\"id4\" rel=\"nofollow\">Usage</a><ul>\n<li><a href=\"#built-in-functions\" id=\"id5\" rel=\"nofollow\">Built-in functions</a></li>\n<li><a href=\"#lazy-attributes\" id=\"id6\" rel=\"nofollow\">Lazy attributes</a></li>\n<li><a href=\"#the-clean-method\" id=\"id7\" rel=\"nofollow\">The clean method</a></li>\n<li><a href=\"#defining-a-custom-queryset\" id=\"id8\" rel=\"nofollow\">Defining a custom QuerySet</a></li>\n<li><a href=\"#high-quality-fake-data\" id=\"id9\" rel=\"nofollow\">High-quality fake data</a></li>\n</ul>\n</li>\n<li><a href=\"#changelog\" id=\"id10\" rel=\"nofollow\">Changelog</a></li>\n<li><a href=\"#contributing\" id=\"id11\" rel=\"nofollow\">Contributing</a></li>\n<li><a href=\"#license\" id=\"id12\" rel=\"nofollow\">License</a></li>\n</ul>\n</div>\n<div id=\"installation\">\n<h3><a href=\"#id2\" rel=\"nofollow\">Installation</a></h3>\n<pre>pip install django-anon\n</pre>\n</div>\n<div id=\"requirements\">\n<h3><a href=\"#id3\" rel=\"nofollow\">Requirements</a></h3>\n<ul>\n<li>Python (2.7, 3.6)</li>\n<li>Django (1.8, 1.11, 2.2)</li>\n</ul>\n</div>\n<div id=\"usage\">\n<h3><a href=\"#id4\" rel=\"nofollow\">Usage</a></h3>\n<p>Use <tt>anon.BaseAnonymizer</tt> to define your anonymizer classes:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">anon</span>\n<span class=\"kn\">from</span> <span class=\"nn\">your_app.models</span> <span class=\"kn\">import</span> <span class=\"n\">Person</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">PersonAnonymizer</span><span class=\"p\">(</span><span class=\"n\">anon</span><span class=\"o\">.</span><span class=\"n\">BaseAnonymizer</span><span class=\"p\">):</span>\n   <span class=\"n\">email</span> <span class=\"o\">=</span> <span class=\"n\">anon</span><span class=\"o\">.</span><span class=\"n\">fake_email</span>\n\n   <span class=\"c1\"># You can use static values instead of callables</span>\n   <span class=\"n\">is_admin</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n\n   <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n      <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">Person</span>\n\n<span class=\"c1\"># run anonymizer: be cautious, this will affect your current database!</span>\n<span class=\"n\">PersonAnonymizer</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n</pre>\n<div id=\"built-in-functions\">\n<h4><a href=\"#id5\" rel=\"nofollow\">Built-in functions</a></h4>\n<pre><span class=\"n\">fake_word</span><span class=\"p\">(</span><span class=\"n\">min_size</span><span class=\"o\">=</span><span class=\"n\">_min_word_size</span><span class=\"p\">,</span> <span class=\"n\">max_size</span><span class=\"o\">=</span><span class=\"mi\">20</span><span class=\"p\">)</span>\n<span class=\"n\">fake_text</span><span class=\"p\">(</span><span class=\"n\">max_size</span><span class=\"o\">=</span><span class=\"mi\">255</span><span class=\"p\">,</span> <span class=\"n\">max_diff_allowed</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">separator</span><span class=\"o\">=</span><span class=\"s1\">' '</span><span class=\"p\">)</span>\n<span class=\"n\">fake_small_text</span><span class=\"p\">(</span><span class=\"n\">max_size</span><span class=\"o\">=</span><span class=\"mi\">50</span><span class=\"p\">)</span>\n<span class=\"n\">fake_name</span><span class=\"p\">(</span><span class=\"n\">max_size</span><span class=\"o\">=</span><span class=\"mi\">15</span><span class=\"p\">)</span>\n<span class=\"n\">fake_username</span><span class=\"p\">(</span><span class=\"n\">max_size</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">separator</span><span class=\"o\">=</span><span class=\"s1\">''</span><span class=\"p\">,</span> <span class=\"n\">rand_range</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1000</span><span class=\"p\">,</span> <span class=\"mi\">999999</span><span class=\"p\">))</span>\n<span class=\"n\">fake_email</span><span class=\"p\">(</span><span class=\"n\">max_size</span><span class=\"o\">=</span><span class=\"mi\">25</span><span class=\"p\">,</span> <span class=\"n\">suffix</span><span class=\"o\">=</span><span class=\"s1\">'@example.com'</span><span class=\"p\">)</span>\n<span class=\"n\">fake_url</span><span class=\"p\">(</span><span class=\"n\">max_size</span><span class=\"o\">=</span><span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"n\">scheme</span><span class=\"o\">=</span><span class=\"s1\">'http://'</span><span class=\"p\">,</span> <span class=\"n\">suffix</span><span class=\"o\">=</span><span class=\"s1\">'.com'</span><span class=\"p\">)</span>\n<span class=\"n\">fake_phone_number</span><span class=\"p\">(</span><span class=\"nb\">format</span><span class=\"o\">=</span><span class=\"s1\">'999-999-9999'</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"lazy-attributes\">\n<h4><a href=\"#id6\" rel=\"nofollow\">Lazy attributes</a></h4>\n<p>Lazy attributes can be defined as inline lambdas or methods, as shown below,\nusing the <tt>anon.lazy_attribute</tt> function/decorator.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">anon</span>\n<span class=\"kn\">from</span> <span class=\"nn\">your_app.models</span> <span class=\"kn\">import</span> <span class=\"n\">Person</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">PersonAnonymizer</span><span class=\"p\">(</span><span class=\"n\">anon</span><span class=\"o\">.</span><span class=\"n\">BaseAnonymizer</span><span class=\"p\">):</span>\n   <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">anon</span><span class=\"o\">.</span><span class=\"n\">lazy_attribute</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">o</span><span class=\"p\">:</span> <span class=\"s1\">'x'</span> <span class=\"o\">*</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">o</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">))</span>\n\n   <span class=\"nd\">@lazy_attribute</span>\n   <span class=\"k\">def</span> <span class=\"nf\">date_of_birth</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n      <span class=\"c1\"># keep year and month</span>\n      <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">date_of_birth</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"n\">day</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n   <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n      <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">Person</span>\n</pre>\n</div>\n<div id=\"the-clean-method\">\n<h4><a href=\"#id7\" rel=\"nofollow\">The clean method</a></h4>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">anon</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">UserAnonymizer</span><span class=\"p\">(</span><span class=\"n\">anon</span><span class=\"o\">.</span><span class=\"n\">BaseAnonymizer</span><span class=\"p\">):</span>\n   <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n      <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">User</span>\n\n   <span class=\"k\">def</span> <span class=\"nf\">clean</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">obj</span><span class=\"p\">):</span>\n      <span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">set_password</span><span class=\"p\">(</span><span class=\"s1\">'test'</span><span class=\"p\">)</span>\n      <span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span>\n</pre>\n</div>\n<div id=\"defining-a-custom-queryset\">\n<h4><a href=\"#id8\" rel=\"nofollow\">Defining a custom QuerySet</a></h4>\n<p>A custom QuerySet can be used to select the rows that should be anonymized:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">anon</span>\n<span class=\"kn\">from</span> <span class=\"nn\">your_app.models</span> <span class=\"kn\">import</span> <span class=\"n\">Person</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">PersonAnonymizer</span><span class=\"p\">(</span><span class=\"n\">anon</span><span class=\"o\">.</span><span class=\"n\">BaseAnonymizer</span><span class=\"p\">):</span>\n   <span class=\"n\">email</span> <span class=\"o\">=</span> <span class=\"n\">anon</span><span class=\"o\">.</span><span class=\"n\">fake_email</span>\n\n   <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n      <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">Person</span>\n\n   <span class=\"k\">def</span> <span class=\"nf\">get_queryset</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n      <span class=\"c1\"># keep admins unmodified</span>\n      <span class=\"k\">return</span> <span class=\"n\">Person</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">exclude</span><span class=\"p\">(</span><span class=\"n\">is_admin</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"high-quality-fake-data\">\n<h4><a href=\"#id9\" rel=\"nofollow\">High-quality fake data</a></h4>\n<p>In order to be really fast, <strong>django-anon</strong> uses it\u2019s own algorithm to generate fake data. It is\nreally fast, but the generated data is not pretty. If you need something prettier in terms of data,\nwe suggest using <a href=\"https://faker.readthedocs.io/en/latest/index.html\" rel=\"nofollow\">Faker</a>, which can be used\nout-of-the-box as the below:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">anon</span>\n<span class=\"kn\">from</span> <span class=\"nn\">faker</span> <span class=\"kn\">import</span> <span class=\"n\">Faker</span>\n<span class=\"kn\">from</span> <span class=\"nn\">your_app.models</span> <span class=\"kn\">import</span> <span class=\"n\">Address</span>\n\n<span class=\"n\">faker</span> <span class=\"o\">=</span> <span class=\"n\">Faker</span><span class=\"p\">()</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">PersonAnonymizer</span><span class=\"p\">(</span><span class=\"n\">anon</span><span class=\"o\">.</span><span class=\"n\">BaseAnonymizer</span><span class=\"p\">):</span>\n   <span class=\"n\">postalcode</span> <span class=\"o\">=</span> <span class=\"n\">faker</span><span class=\"o\">.</span><span class=\"n\">postalcode</span>\n\n   <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n      <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">Address</span>\n</pre>\n</div>\n</div>\n<div id=\"changelog\">\n<h3><a href=\"#id10\" rel=\"nofollow\">Changelog</a></h3>\n<p>Check out <a href=\"https://github.com/Tesorio/django-anon/blob/master/CHANGELOG.rst\" rel=\"nofollow\">CHANGELOG.rst</a> for release notes</p>\n</div>\n<div id=\"contributing\">\n<h3><a href=\"#id11\" rel=\"nofollow\">Contributing</a></h3>\n<p>Check out <a href=\"https://github.com/Tesorio/django-anon/blob/master/CONTRIBUTING.rst\" rel=\"nofollow\">CONTRIBUTING.rst</a> for information about getting involved</p>\n</div>\n<div id=\"license\">\n<h3><a href=\"#id12\" rel=\"nofollow\">License</a></h3>\n<p><a href=\"https://github.com/Tesorio/django-anon/blob/master/LICENSE\" rel=\"nofollow\">MIT</a></p>\n<hr class=\"docutils\">\n<p><a href=\"icon.svg\" rel=\"nofollow\">Icon</a> made by <a href=\"https://www.flaticon.com/authors/eucalyp\" rel=\"nofollow\">Eucalyp</a> from <a href=\"https://www.flaticon.com/\" rel=\"nofollow\">www.flaticon.com</a></p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 6125944, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "175411d222d04e4c529d9daa7055358f", "sha256": "90e0bec39c08a68e31f7420d0e39aa2a69d28345f73053cc2f47ebcda3957f6b"}, "downloads": -1, "filename": "django_anon-0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "175411d222d04e4c529d9daa7055358f", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 10957, "upload_time": "2019-11-12T19:27:43", "upload_time_iso_8601": "2019-11-12T19:27:43.902789Z", "url": "https://files.pythonhosted.org/packages/75/e5/34756543757f1ffcdbf4f89c55b28f349cc3ee2be7762d92a034dd0e91e8/django_anon-0.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "96988259f2be6d9d8efcf5cbdee64195", "sha256": "527e408d9a1648fbed18cad99b2c58e4eb89adb0f3465d42a23f9c6114fc4a00"}, "downloads": -1, "filename": "django-anon-0.1.tar.gz", "has_sig": false, "md5_digest": "96988259f2be6d9d8efcf5cbdee64195", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10409, "upload_time": "2019-11-12T19:27:46", "upload_time_iso_8601": "2019-11-12T19:27:46.906328Z", "url": "https://files.pythonhosted.org/packages/fb/d7/0d38189c1bdb0ee43d5b02f9fe174b6fd9a79b2e77bb488d9677a52af28c/django-anon-0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "175411d222d04e4c529d9daa7055358f", "sha256": "90e0bec39c08a68e31f7420d0e39aa2a69d28345f73053cc2f47ebcda3957f6b"}, "downloads": -1, "filename": "django_anon-0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "175411d222d04e4c529d9daa7055358f", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 10957, "upload_time": "2019-11-12T19:27:43", "upload_time_iso_8601": "2019-11-12T19:27:43.902789Z", "url": "https://files.pythonhosted.org/packages/75/e5/34756543757f1ffcdbf4f89c55b28f349cc3ee2be7762d92a034dd0e91e8/django_anon-0.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "96988259f2be6d9d8efcf5cbdee64195", "sha256": "527e408d9a1648fbed18cad99b2c58e4eb89adb0f3465d42a23f9c6114fc4a00"}, "downloads": -1, "filename": "django-anon-0.1.tar.gz", "has_sig": false, "md5_digest": "96988259f2be6d9d8efcf5cbdee64195", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10409, "upload_time": "2019-11-12T19:27:46", "upload_time_iso_8601": "2019-11-12T19:27:46.906328Z", "url": "https://files.pythonhosted.org/packages/fb/d7/0d38189c1bdb0ee43d5b02f9fe174b6fd9a79b2e77bb488d9677a52af28c/django-anon-0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:37:41 2020"}