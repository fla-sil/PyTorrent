{"info": {"author": "Timothy Moore", "author_email": "mtimothy984@gmail.com", "bugtrack_url": null, "classifiers": ["License :: CC0 1.0 Universal (CC0 1.0) Public Domain Dedication", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Utilities"], "description": "# PCA 3D Visualizations\n\nThis module produces informative visualizations of atleast 3-dimensional data,\noptionally using principal component analysis and automatic clustering.\n\n## Features\n\n- *Animated*: high-quality videos with multi-processed video production using\n[pympanim](https://github.com/Tjstretchalot/pympanim).\n- (Pdf) *snapshots* that can be used in research papers or where the full video\ncannot be used.\n- Supports automatic *clustering* for informative zooms\n- Supports *trajectories* of data, for example for visualizing data through\ntime for a recurrent network or through layers of a feedforward network.\n- Supports using different markers, in any combination of style and color\n\n## Installation\n\nThis package requires [ffmpeg](https://ffmpeg.org/) to be installed.\n\n`pip install pca3dvis`\n\n## Example Videos\n\n`examples/gaus_balls.py`\n\nhttps://youtu.be/n9rpWhuN6LA\n\n`examples/all_rand.py`\n\nhttps://www.youtube.com/watch?v=YnIRqSQ8lAU\n\n## Usage\n\nVideo introduction at https://youtu.be/JqfVY9pdxY8\n\n### Projecting to 3D from higher dimensions\n\nThere are many approaches for projecting to 3-dimensions. Once you have used\nany of these projections, you can use this library to visualize the resulting\n3d scatter plot.\n\nThis library provides one linear projection that depends on the eigenvectors\nof the covariance matrix, called principal component analysis. For more\ninformation see\n[Wold, Esbensen, and Geladi, 1987](https://www.sciencedirect.com/science/article/pii/0169743987800849)\n\nTo quickly generate a `pca3dvis.trajectory.ProjectedTrajectory` using this\ntechnique for an arbitrary `ndarray[samples, features]` where `features > 3`,\nthe following snippet will work:\n\n```py\nimport numpy as np\nimport pca3dvis.pcs as pcs\n\ndata: np.ndarray # must have shape [samples > 3, features > 3]\nlbls: np.ndarray # must have shape [samples = data.shape[0], ...]\ntraj = pcs.get_pc_trajectory([data], lbls)\n```\n\nThis creates a trajectory with a single snapshot; for multiple snapshots, just\nhave `[data]` instead be a list of ndarrays which each have the same number of\nsamples but possibly different numbers of features.\n\n### Converting 3D data to trajectories\n\nA trajectory is a sequence of one or more snapshots which have the same labels.\nThey include the projection matrix that created them from the original data.\nFor quickly plotting already projected data, the labels can be swapped with all\nzeros of the appropriate shape and the projection matrix with the identity map.\n\n```py\nimport numpy as np\nimport pca3dvis.snapshot\nimport pca3dvis.trajectory\n\nraw_data: np.ndarray # must have shape [samples > 3, og_features]\nproj_matrices: np.ndarray # must have shape [og_features, 3]\nlbls: np.ndarray # must have shape [samples = data.shape[0], ...]\nsnap = pca3dvis.snapshot.project_with_matrix(raw_data, lbls, proj_matrices)\n\ntraj = pca3dvis.trajectory.ProjectedTrajectory([snap]) # trajectory of one snap\n```\n\n### Plotting trajectories\n\nPlotting trajectories, the main feature of this module, requires only that you\ngive a name to each snapshot and give markers to each label.\n\nMarkers are described as follows: Suppose there are N samples and M distinct\nstyles. Then for each style m, you will create a bool numpy array with shape\n(N,) mask where `mask[i]` is `True` if `sample[i]` should be rendered with\nstyle `m`. The style is described with a `dict` which are the keyword arguments\nto [scatter](https://matplotlib.org/3.1.1/api/_as_gen/matplotlib.axes.Axes.scatter.html#matplotlib.axes.Axes.scatter).\nIt should at least specifiy the size and color (`s` and `c` respectively), and\nit may use a [colormap](https://matplotlib.org/3.1.0/tutorials/colors/colormaps.html)\nto do so, but if it does it must specify the [norm](https://matplotlib.org/3.1.1/tutorials/colors/colormapnorms.html)\nexactly, i.e., with vmin and vmax not None.\n\nFor a more complete example of styling, see `examples/gaus_balls.py`.\n\n```py\nimport numpy as np\nimport pca3dvis.trajectory\nimport pca3dvis.worker\n\ntraj: pca3dvis.trajectory.ProjectedTrajectory\ntitles = [f'Snapshot {i+1}' for i in range(traj.num_snapshots)]\nmarkers = [(\n    np.ones(traj.num_samples, 'bool'),\n    {'s': 20, 'c': 'tab:red'}\n)]\npca3dvis.worker.generate(traj, markers, titles, 'out/my_out_folder',\n                         draft=True, clusters=True)\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/tjstretchalot/pca3dvis", "keywords": "pca3dvis animations video mp4 3d", "license": "CC0", "maintainer": "", "maintainer_email": "", "name": "pca3dvis", "package_url": "https://pypi.org/project/pca3dvis/", "platform": "", "project_url": "https://pypi.org/project/pca3dvis/", "project_urls": {"Homepage": "https://github.com/tjstretchalot/pca3dvis"}, "release_url": "https://pypi.org/project/pca3dvis/0.0.3/", "requires_dist": ["pympanim", "pytypeutils", "numpy", "matplotlib", "hdbscan", "pytweening"], "requires_python": ">=3.6", "summary": "Visualize 3d matrices or their 3d projections easily", "version": "0.0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>PCA 3D Visualizations</h1>\n<p>This module produces informative visualizations of atleast 3-dimensional data,\noptionally using principal component analysis and automatic clustering.</p>\n<h2>Features</h2>\n<ul>\n<li><em>Animated</em>: high-quality videos with multi-processed video production using\n<a href=\"https://github.com/Tjstretchalot/pympanim\" rel=\"nofollow\">pympanim</a>.</li>\n<li>(Pdf) <em>snapshots</em> that can be used in research papers or where the full video\ncannot be used.</li>\n<li>Supports automatic <em>clustering</em> for informative zooms</li>\n<li>Supports <em>trajectories</em> of data, for example for visualizing data through\ntime for a recurrent network or through layers of a feedforward network.</li>\n<li>Supports using different markers, in any combination of style and color</li>\n</ul>\n<h2>Installation</h2>\n<p>This package requires <a href=\"https://ffmpeg.org/\" rel=\"nofollow\">ffmpeg</a> to be installed.</p>\n<p><code>pip install pca3dvis</code></p>\n<h2>Example Videos</h2>\n<p><code>examples/gaus_balls.py</code></p>\n<p><a href=\"https://youtu.be/n9rpWhuN6LA\" rel=\"nofollow\">https://youtu.be/n9rpWhuN6LA</a></p>\n<p><code>examples/all_rand.py</code></p>\n<p><a href=\"https://www.youtube.com/watch?v=YnIRqSQ8lAU\" rel=\"nofollow\">https://www.youtube.com/watch?v=YnIRqSQ8lAU</a></p>\n<h2>Usage</h2>\n<p>Video introduction at <a href=\"https://youtu.be/JqfVY9pdxY8\" rel=\"nofollow\">https://youtu.be/JqfVY9pdxY8</a></p>\n<h3>Projecting to 3D from higher dimensions</h3>\n<p>There are many approaches for projecting to 3-dimensions. Once you have used\nany of these projections, you can use this library to visualize the resulting\n3d scatter plot.</p>\n<p>This library provides one linear projection that depends on the eigenvectors\nof the covariance matrix, called principal component analysis. For more\ninformation see\n<a href=\"https://www.sciencedirect.com/science/article/pii/0169743987800849\" rel=\"nofollow\">Wold, Esbensen, and Geladi, 1987</a></p>\n<p>To quickly generate a <code>pca3dvis.trajectory.ProjectedTrajectory</code> using this\ntechnique for an arbitrary <code>ndarray[samples, features]</code> where <code>features &gt; 3</code>,\nthe following snippet will work:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pca3dvis.pcs</span> <span class=\"k\">as</span> <span class=\"nn\">pcs</span>\n\n<span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ndarray</span> <span class=\"c1\"># must have shape [samples &gt; 3, features &gt; 3]</span>\n<span class=\"n\">lbls</span><span class=\"p\">:</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ndarray</span> <span class=\"c1\"># must have shape [samples = data.shape[0], ...]</span>\n<span class=\"n\">traj</span> <span class=\"o\">=</span> <span class=\"n\">pcs</span><span class=\"o\">.</span><span class=\"n\">get_pc_trajectory</span><span class=\"p\">([</span><span class=\"n\">data</span><span class=\"p\">],</span> <span class=\"n\">lbls</span><span class=\"p\">)</span>\n</pre>\n<p>This creates a trajectory with a single snapshot; for multiple snapshots, just\nhave <code>[data]</code> instead be a list of ndarrays which each have the same number of\nsamples but possibly different numbers of features.</p>\n<h3>Converting 3D data to trajectories</h3>\n<p>A trajectory is a sequence of one or more snapshots which have the same labels.\nThey include the projection matrix that created them from the original data.\nFor quickly plotting already projected data, the labels can be swapped with all\nzeros of the appropriate shape and the projection matrix with the identity map.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pca3dvis.snapshot</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pca3dvis.trajectory</span>\n\n<span class=\"n\">raw_data</span><span class=\"p\">:</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ndarray</span> <span class=\"c1\"># must have shape [samples &gt; 3, og_features]</span>\n<span class=\"n\">proj_matrices</span><span class=\"p\">:</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ndarray</span> <span class=\"c1\"># must have shape [og_features, 3]</span>\n<span class=\"n\">lbls</span><span class=\"p\">:</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ndarray</span> <span class=\"c1\"># must have shape [samples = data.shape[0], ...]</span>\n<span class=\"n\">snap</span> <span class=\"o\">=</span> <span class=\"n\">pca3dvis</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">project_with_matrix</span><span class=\"p\">(</span><span class=\"n\">raw_data</span><span class=\"p\">,</span> <span class=\"n\">lbls</span><span class=\"p\">,</span> <span class=\"n\">proj_matrices</span><span class=\"p\">)</span>\n\n<span class=\"n\">traj</span> <span class=\"o\">=</span> <span class=\"n\">pca3dvis</span><span class=\"o\">.</span><span class=\"n\">trajectory</span><span class=\"o\">.</span><span class=\"n\">ProjectedTrajectory</span><span class=\"p\">([</span><span class=\"n\">snap</span><span class=\"p\">])</span> <span class=\"c1\"># trajectory of one snap</span>\n</pre>\n<h3>Plotting trajectories</h3>\n<p>Plotting trajectories, the main feature of this module, requires only that you\ngive a name to each snapshot and give markers to each label.</p>\n<p>Markers are described as follows: Suppose there are N samples and M distinct\nstyles. Then for each style m, you will create a bool numpy array with shape\n(N,) mask where <code>mask[i]</code> is <code>True</code> if <code>sample[i]</code> should be rendered with\nstyle <code>m</code>. The style is described with a <code>dict</code> which are the keyword arguments\nto <a href=\"https://matplotlib.org/3.1.1/api/_as_gen/matplotlib.axes.Axes.scatter.html#matplotlib.axes.Axes.scatter\" rel=\"nofollow\">scatter</a>.\nIt should at least specifiy the size and color (<code>s</code> and <code>c</code> respectively), and\nit may use a <a href=\"https://matplotlib.org/3.1.0/tutorials/colors/colormaps.html\" rel=\"nofollow\">colormap</a>\nto do so, but if it does it must specify the <a href=\"https://matplotlib.org/3.1.1/tutorials/colors/colormapnorms.html\" rel=\"nofollow\">norm</a>\nexactly, i.e., with vmin and vmax not None.</p>\n<p>For a more complete example of styling, see <code>examples/gaus_balls.py</code>.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pca3dvis.trajectory</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pca3dvis.worker</span>\n\n<span class=\"n\">traj</span><span class=\"p\">:</span> <span class=\"n\">pca3dvis</span><span class=\"o\">.</span><span class=\"n\">trajectory</span><span class=\"o\">.</span><span class=\"n\">ProjectedTrajectory</span>\n<span class=\"n\">titles</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"sa\">f</span><span class=\"s1\">'Snapshot </span><span class=\"si\">{</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"si\">}</span><span class=\"s1\">'</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">traj</span><span class=\"o\">.</span><span class=\"n\">num_snapshots</span><span class=\"p\">)]</span>\n<span class=\"n\">markers</span> <span class=\"o\">=</span> <span class=\"p\">[(</span>\n    <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ones</span><span class=\"p\">(</span><span class=\"n\">traj</span><span class=\"o\">.</span><span class=\"n\">num_samples</span><span class=\"p\">,</span> <span class=\"s1\">'bool'</span><span class=\"p\">),</span>\n    <span class=\"p\">{</span><span class=\"s1\">'s'</span><span class=\"p\">:</span> <span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"s1\">'c'</span><span class=\"p\">:</span> <span class=\"s1\">'tab:red'</span><span class=\"p\">}</span>\n<span class=\"p\">)]</span>\n<span class=\"n\">pca3dvis</span><span class=\"o\">.</span><span class=\"n\">worker</span><span class=\"o\">.</span><span class=\"n\">generate</span><span class=\"p\">(</span><span class=\"n\">traj</span><span class=\"p\">,</span> <span class=\"n\">markers</span><span class=\"p\">,</span> <span class=\"n\">titles</span><span class=\"p\">,</span> <span class=\"s1\">'out/my_out_folder'</span><span class=\"p\">,</span>\n                         <span class=\"n\">draft</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">clusters</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n\n          </div>"}, "last_serial": 5615269, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "d9c79a46bbdbdb962b3912a0063bfbae", "sha256": "4cb4791814ee900f1127f8ea573989c70f689edf47d35a303137992f78e3ed43"}, "downloads": -1, "filename": "pca3dvis-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "d9c79a46bbdbdb962b3912a0063bfbae", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 20444, "upload_time": "2019-07-30T20:18:15", "upload_time_iso_8601": "2019-07-30T20:18:15.224812Z", "url": "https://files.pythonhosted.org/packages/d2/08/e496b4fdf1084fcfeff0adfba1bb27a381127c124ab0fae8e58569bef1eb/pca3dvis-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5bcdbaea04ff05164004d9e27d78b759", "sha256": "4da91464406c88572fa3955dcf8186e427a015684853b5deffc88085f027f94a"}, "downloads": -1, "filename": "pca3dvis-0.0.1.tar.gz", "has_sig": false, "md5_digest": "5bcdbaea04ff05164004d9e27d78b759", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 15892, "upload_time": "2019-07-30T20:18:17", "upload_time_iso_8601": "2019-07-30T20:18:17.324427Z", "url": "https://files.pythonhosted.org/packages/37/ca/f486440fd4a3ca7056034cb8137245379029435ebedf799a05151d1e0209/pca3dvis-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "cac9b9cb5be990ca0d3b945331fe8613", "sha256": "2f1b80fa481527acaefbf39991247c5442f19f233819964b31bbfc93ed5b5e0a"}, "downloads": -1, "filename": "pca3dvis-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "cac9b9cb5be990ca0d3b945331fe8613", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 20508, "upload_time": "2019-07-31T15:54:04", "upload_time_iso_8601": "2019-07-31T15:54:04.188289Z", "url": "https://files.pythonhosted.org/packages/3f/0c/d37cbad19006cbfe4b1d1c47192e26dc29d72edc05bdae4a9cda1236d085/pca3dvis-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d89ce173c3befc0931c7d9d8f60f0185", "sha256": "c2ff19d3042b1353231dfef27b0e3a36cade13fde1dfc28379ecfc0ff7f8019d"}, "downloads": -1, "filename": "pca3dvis-0.0.2.tar.gz", "has_sig": false, "md5_digest": "d89ce173c3befc0931c7d9d8f60f0185", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 16035, "upload_time": "2019-07-31T15:54:05", "upload_time_iso_8601": "2019-07-31T15:54:05.422853Z", "url": "https://files.pythonhosted.org/packages/97/9a/d61d8ac1f8a800963a5e7e8c4302078db15d1992445798b2541c084d804b/pca3dvis-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "2efdfb36e39d40466fc37a9d56accd20", "sha256": "c5b75866a62c9ed588e4a2fbd13b81b0dcd163fe5bdbccf3047d7930a0ce1515"}, "downloads": -1, "filename": "pca3dvis-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "2efdfb36e39d40466fc37a9d56accd20", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 20521, "upload_time": "2019-07-31T19:37:40", "upload_time_iso_8601": "2019-07-31T19:37:40.938782Z", "url": "https://files.pythonhosted.org/packages/01/f0/9dbb1f1e41d261550042d3205f0b390a01a6f050cbb75cfed12fc8eb1c14/pca3dvis-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d3f49e8331932105dcca41cafa7fc5ff", "sha256": "1c4e0a65156af7aa0bc672e50d3655128dc42c8f45a156ddb5f3a6b90d6da6d5"}, "downloads": -1, "filename": "pca3dvis-0.0.3.tar.gz", "has_sig": false, "md5_digest": "d3f49e8331932105dcca41cafa7fc5ff", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 16039, "upload_time": "2019-07-31T19:37:42", "upload_time_iso_8601": "2019-07-31T19:37:42.234978Z", "url": "https://files.pythonhosted.org/packages/d2/b7/3a906b6493af4e594f280827197ee25b65dc74ba1466b0880e58c4e270d1/pca3dvis-0.0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "2efdfb36e39d40466fc37a9d56accd20", "sha256": "c5b75866a62c9ed588e4a2fbd13b81b0dcd163fe5bdbccf3047d7930a0ce1515"}, "downloads": -1, "filename": "pca3dvis-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "2efdfb36e39d40466fc37a9d56accd20", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 20521, "upload_time": "2019-07-31T19:37:40", "upload_time_iso_8601": "2019-07-31T19:37:40.938782Z", "url": "https://files.pythonhosted.org/packages/01/f0/9dbb1f1e41d261550042d3205f0b390a01a6f050cbb75cfed12fc8eb1c14/pca3dvis-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d3f49e8331932105dcca41cafa7fc5ff", "sha256": "1c4e0a65156af7aa0bc672e50d3655128dc42c8f45a156ddb5f3a6b90d6da6d5"}, "downloads": -1, "filename": "pca3dvis-0.0.3.tar.gz", "has_sig": false, "md5_digest": "d3f49e8331932105dcca41cafa7fc5ff", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 16039, "upload_time": "2019-07-31T19:37:42", "upload_time_iso_8601": "2019-07-31T19:37:42.234978Z", "url": "https://files.pythonhosted.org/packages/d2/b7/3a906b6493af4e594f280827197ee25b65dc74ba1466b0880e58c4e270d1/pca3dvis-0.0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:57:32 2020"}