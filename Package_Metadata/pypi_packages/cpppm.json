{"info": {"author": "Garcia Sylvain", "author_email": "garcia.6l20@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3.8", "Topic :: Software Development :: Build Tools"], "description": "# cpppm\nCPP Project Manager\n\n> Please note that I reference python as python3, python2 is dead and buried... RIP\n>\n## What is that\ncpppm is a C/C++ project manager that focus on flexibility.\n\n### A basic example\n\nConsider following code:\n- *main.cpp*:\n```cpp\n#define DOCTEST_CONFIG_IMPLEMENT_WITH_MAIN\n#include <doctest/doctest.h>\n#include <fmt/format.h>\n\nTEST_CASE(\"cpppm loves conan\") {\n    CHECK(fmt::format(\"{1} loves {0} !!!\", \"conan\", \"cpppm\") == \"cpppm loves conan !!!\");\n}\n```\n- *project.py*:\n```python\nfrom cpppm import Project, main\n\nproject = Project('conan_requires')\nproject.requires = 'fmt/6.1.2', 'doctest/2.3.6'\nexe = project.main_executable()\nexe.sources = 'src/main.cpp'\nexe.link_libraries = 'fmt', 'doctest'\nmain()\n```\nAt this point you'll be able to run:\n```bash\n$ python ./project.py run conan_requires\n\n# Build output ommitted...\n\n[doctest] doctest version is \"2.3.6\"\n[doctest] run with \"--help\" for options\n===============================================================================\n[doctest] test cases:      1 |      1 passed |      0 failed |      0 skipped\n[doctest] assertions:      1 |      1 passed |      0 failed |\n[doctest] Status: SUCCESS!\n```\nAmazing, no ?\n\nCheck out the examples folder for more use cases.\n\n## How it works\n\nIt is nothing more that a project file generator, with embedded conan package management.\nIt creates CMakeLists.txt file for you, calls the build commands and runs the target(s).\n\n## Why should I use it\n\nI was writing CMakeLists.txt files for decades, and I have been bored of doing:\n```cmake\nconfigure_file(my_cool_stuff_to_do.py.in my_cool_stuff_to_do.py)\nfind_package(PythonInterp REQUIRED)\nfunction(my_cool_stuff_to_do)\n    custom_command(${PYTHON_EXECUTABLE} my_cool_stuff_to_do.py ARGS ${ARGN})\nendfunction()\n...\n```\nAnd running many commands *conan*, *cmake*, *make*, *ctest*...\nSo, I wanted to turn the process from ~~*conan*, *cmake with __cool python stuff__*, *make*, *ctest*~~\ninto **cool python stuff**.\n\nSo, If you feel doing such stuff often, give it a try :kissing_heart:.\n\n### Installation\n\n- By cloning this repository:\n```bash\ngit clone https://github.com/Garcia6l20/cpppm.git\ncd cpppm\npython setup.py install --user\n```\n- Available on [PyPi](https://pypi.org/project/cpppm/):\n```bash\npip install --user cpppm\n```\n\n### Commands\n\nDefault commands can be listed with a regular help request:\n```bash\n$ python project.py --help\nUsage: project.py [OPTIONS] COMMAND [ARGS]...\n\nOptions:\n  -v, --verbose  Let me talk about me.\n  --help         Show this message and exit.\n\nCommands:\n  build      Builds the project.\n  configure  Configures CMake stuff.\n  generate   Generates conan/CMake stuff.\n  run        Runs the given TARGET with given ARGS.\n```\n\n### Documentation\n\nNo documentation yet...\nFor API, check the examples (Im trying to demonstrate all uses cases), use IDE to edit your project script (eg.: *Pycharm*).\n\n### Features\n\n- [x] CMakeLists.txt generation\n- [x] Project compilation\n- [x] Build events, file generators\n- [x] Conan package dependencies management\n- [ ] Conan package generation (not yet, but soon)\n- [x] Executables invocation (automatically added to cli interface) \n- [x] Customizable (you can do anything you can do with python)\n- [x] Cli customization (cou can add any `@cpppm.cli.command` that you want to add, see [click](https://click.palletsprojects.com/))\n\n## Contributing\n\nWould be appreciated, no contribution guide, just [PEP-8 codding style](https://www.python.org/dev/peps/pep-0008/) and smart codding, fork/PR.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Garcia6l20/cpppm", "keywords": "c++,project-manager", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "cpppm", "package_url": "https://pypi.org/project/cpppm/", "platform": "", "project_url": "https://pypi.org/project/cpppm/", "project_urls": {"Homepage": "https://github.com/Garcia6l20/cpppm"}, "release_url": "https://pypi.org/project/cpppm/0.2.0/", "requires_dist": null, "requires_python": ">=3.8", "summary": "CPP Package Manager", "version": "0.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>cpppm</h1>\n<p>CPP Project Manager</p>\n<blockquote>\n<p>Please note that I reference python as python3, python2 is dead and buried... RIP</p>\n</blockquote>\n<h2>What is that</h2>\n<p>cpppm is a C/C++ project manager that focus on flexibility.</p>\n<h3>A basic example</h3>\n<p>Consider following code:</p>\n<ul>\n<li><em>main.cpp</em>:</li>\n</ul>\n<pre><span class=\"cp\">#define DOCTEST_CONFIG_IMPLEMENT_WITH_MAIN</span>\n<span class=\"cp\">#include</span> <span class=\"cpf\">&lt;doctest/doctest.h&gt;</span><span class=\"cp\"></span>\n<span class=\"cp\">#include</span> <span class=\"cpf\">&lt;fmt/format.h&gt;</span><span class=\"cp\"></span>\n\n<span class=\"n\">TEST_CASE</span><span class=\"p\">(</span><span class=\"s\">\"cpppm loves conan\"</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"n\">CHECK</span><span class=\"p\">(</span><span class=\"n\">fmt</span><span class=\"o\">::</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"s\">\"{1} loves {0} !!!\"</span><span class=\"p\">,</span> <span class=\"s\">\"conan\"</span><span class=\"p\">,</span> <span class=\"s\">\"cpppm\"</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"s\">\"cpppm loves conan !!!\"</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</pre>\n<ul>\n<li><em>project.py</em>:</li>\n</ul>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">cpppm</span> <span class=\"kn\">import</span> <span class=\"n\">Project</span><span class=\"p\">,</span> <span class=\"n\">main</span>\n\n<span class=\"n\">project</span> <span class=\"o\">=</span> <span class=\"n\">Project</span><span class=\"p\">(</span><span class=\"s1\">'conan_requires'</span><span class=\"p\">)</span>\n<span class=\"n\">project</span><span class=\"o\">.</span><span class=\"n\">requires</span> <span class=\"o\">=</span> <span class=\"s1\">'fmt/6.1.2'</span><span class=\"p\">,</span> <span class=\"s1\">'doctest/2.3.6'</span>\n<span class=\"n\">exe</span> <span class=\"o\">=</span> <span class=\"n\">project</span><span class=\"o\">.</span><span class=\"n\">main_executable</span><span class=\"p\">()</span>\n<span class=\"n\">exe</span><span class=\"o\">.</span><span class=\"n\">sources</span> <span class=\"o\">=</span> <span class=\"s1\">'src/main.cpp'</span>\n<span class=\"n\">exe</span><span class=\"o\">.</span><span class=\"n\">link_libraries</span> <span class=\"o\">=</span> <span class=\"s1\">'fmt'</span><span class=\"p\">,</span> <span class=\"s1\">'doctest'</span>\n<span class=\"n\">main</span><span class=\"p\">()</span>\n</pre>\n<p>At this point you'll be able to run:</p>\n<pre>$ python ./project.py run conan_requires\n\n<span class=\"c1\"># Build output ommitted...</span>\n\n<span class=\"o\">[</span>doctest<span class=\"o\">]</span> doctest version is <span class=\"s2\">\"2.3.6\"</span>\n<span class=\"o\">[</span>doctest<span class=\"o\">]</span> run with <span class=\"s2\">\"--help\"</span> <span class=\"k\">for</span> <span class=\"nv\">options</span>\n<span class=\"o\">===============================================================================</span>\n<span class=\"o\">[</span>doctest<span class=\"o\">]</span> <span class=\"nb\">test</span> cases:      <span class=\"m\">1</span> <span class=\"p\">|</span>      <span class=\"m\">1</span> passed <span class=\"p\">|</span>      <span class=\"m\">0</span> failed <span class=\"p\">|</span>      <span class=\"m\">0</span> skipped\n<span class=\"o\">[</span>doctest<span class=\"o\">]</span> assertions:      <span class=\"m\">1</span> <span class=\"p\">|</span>      <span class=\"m\">1</span> passed <span class=\"p\">|</span>      <span class=\"m\">0</span> failed <span class=\"p\">|</span>\n<span class=\"o\">[</span>doctest<span class=\"o\">]</span> Status: SUCCESS!\n</pre>\n<p>Amazing, no ?</p>\n<p>Check out the examples folder for more use cases.</p>\n<h2>How it works</h2>\n<p>It is nothing more that a project file generator, with embedded conan package management.\nIt creates CMakeLists.txt file for you, calls the build commands and runs the target(s).</p>\n<h2>Why should I use it</h2>\n<p>I was writing CMakeLists.txt files for decades, and I have been bored of doing:</p>\n<pre><span class=\"nb\">configure_file</span><span class=\"p\">(</span><span class=\"s\">my_cool_stuff_to_do.py.in</span> <span class=\"s\">my_cool_stuff_to_do.py</span><span class=\"p\">)</span>\n<span class=\"nb\">find_package</span><span class=\"p\">(</span><span class=\"s\">PythonInterp</span> <span class=\"s\">REQUIRED</span><span class=\"p\">)</span>\n<span class=\"nb\">function</span><span class=\"p\">(</span><span class=\"s\">my_cool_stuff_to_do</span><span class=\"p\">)</span>\n    <span class=\"nb\">custom_command</span><span class=\"p\">(</span><span class=\"o\">${</span><span class=\"nv\">PYTHON_EXECUTABLE</span><span class=\"o\">}</span> <span class=\"s\">my_cool_stuff_to_do.py</span> <span class=\"s\">ARGS</span> <span class=\"o\">${</span><span class=\"nv\">ARGN</span><span class=\"o\">}</span><span class=\"p\">)</span>\n<span class=\"nb\">endfunction</span><span class=\"p\">()</span>\n<span class=\"err\">...</span>\n</pre>\n<p>And running many commands <em>conan</em>, <em>cmake</em>, <em>make</em>, <em>ctest</em>...\nSo, I wanted to turn the process from <del><em>conan</em>, <em>cmake with <strong>cool python stuff</strong></em>, <em>make</em>, <em>ctest</em></del>\ninto <strong>cool python stuff</strong>.</p>\n<p>So, If you feel doing such stuff often, give it a try :kissing_heart:.</p>\n<h3>Installation</h3>\n<ul>\n<li>By cloning this repository:</li>\n</ul>\n<pre>git clone https://github.com/Garcia6l20/cpppm.git\n<span class=\"nb\">cd</span> cpppm\npython setup.py install --user\n</pre>\n<ul>\n<li>Available on <a href=\"https://pypi.org/project/cpppm/\" rel=\"nofollow\">PyPi</a>:</li>\n</ul>\n<pre>pip install --user cpppm\n</pre>\n<h3>Commands</h3>\n<p>Default commands can be listed with a regular help request:</p>\n<pre>$ python project.py --help\nUsage: project.py <span class=\"o\">[</span>OPTIONS<span class=\"o\">]</span> COMMAND <span class=\"o\">[</span>ARGS<span class=\"o\">]</span>...\n\nOptions:\n  -v, --verbose  Let me talk about me.\n  --help         Show this message and exit.\n\nCommands:\n  build      Builds the project.\n  configure  Configures CMake stuff.\n  generate   Generates conan/CMake stuff.\n  run        Runs the given TARGET with given ARGS.\n</pre>\n<h3>Documentation</h3>\n<p>No documentation yet...\nFor API, check the examples (Im trying to demonstrate all uses cases), use IDE to edit your project script (eg.: <em>Pycharm</em>).</p>\n<h3>Features</h3>\n<ul>\n<li>[x] CMakeLists.txt generation</li>\n<li>[x] Project compilation</li>\n<li>[x] Build events, file generators</li>\n<li>[x] Conan package dependencies management</li>\n<li>[ ] Conan package generation (not yet, but soon)</li>\n<li>[x] Executables invocation (automatically added to cli interface)</li>\n<li>[x] Customizable (you can do anything you can do with python)</li>\n<li>[x] Cli customization (cou can add any <code>@cpppm.cli.command</code> that you want to add, see <a href=\"https://click.palletsprojects.com/\" rel=\"nofollow\">click</a>)</li>\n</ul>\n<h2>Contributing</h2>\n<p>Would be appreciated, no contribution guide, just <a href=\"https://www.python.org/dev/peps/pep-0008/\" rel=\"nofollow\">PEP-8 codding style</a> and smart codding, fork/PR.</p>\n\n          </div>"}, "last_serial": 6657441, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "fa1ac28385ec9cd061efecb222193be7", "sha256": "b4d77ed31c6c55f98216148bac70138ab4c784b6e1720e76cc127b69775929fe"}, "downloads": -1, "filename": "cpppm-0.1.0.tar.gz", "has_sig": false, "md5_digest": "fa1ac28385ec9cd061efecb222193be7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.8", "size": 11673, "upload_time": "2020-02-15T14:55:25", "upload_time_iso_8601": "2020-02-15T14:55:25.631767Z", "url": "https://files.pythonhosted.org/packages/e6/aa/9e335d3f5c62590d2b0818bc5c86dcdf0c577fd2c098428b7d0f7a20f487/cpppm-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "a1b41cac90194f24484461b7210d9d31", "sha256": "1fb4857109700f5146327fa411e7d55e8671813c674ff9c1f4dd018e30422e98"}, "downloads": -1, "filename": "cpppm-0.2.0.tar.gz", "has_sig": false, "md5_digest": "a1b41cac90194f24484461b7210d9d31", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.8", "size": 15559, "upload_time": "2020-02-18T20:46:23", "upload_time_iso_8601": "2020-02-18T20:46:23.472154Z", "url": "https://files.pythonhosted.org/packages/c2/74/3dbd57159bdb08e50ab26c32f4963801b5c39c11167f4d09ac0bf3fa28f9/cpppm-0.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a1b41cac90194f24484461b7210d9d31", "sha256": "1fb4857109700f5146327fa411e7d55e8671813c674ff9c1f4dd018e30422e98"}, "downloads": -1, "filename": "cpppm-0.2.0.tar.gz", "has_sig": false, "md5_digest": "a1b41cac90194f24484461b7210d9d31", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.8", "size": 15559, "upload_time": "2020-02-18T20:46:23", "upload_time_iso_8601": "2020-02-18T20:46:23.472154Z", "url": "https://files.pythonhosted.org/packages/c2/74/3dbd57159bdb08e50ab26c32f4963801b5c39c11167f4d09ac0bf3fa28f9/cpppm-0.2.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:42:37 2020"}