{"info": {"author": "Jelle Smet", "author_email": "development@smetj.net", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "Intended Audience :: System Administrators", "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: Implementation :: PyPy"], "description": "::\n\n              __       __    __\n    .--.--.--|__.-----|  |--|  |--.-----.-----.-----.\n    |  |  |  |  |__ --|     |  _  |  _  |     |  -__|\n    |________|__|_____|__|__|_____|_____|__|__|_____|\n\n\n    ===================================\n    wishbone_contrib.module.output.amqp\n    ===================================\n\n    Version: 3.1.0\n\n    Submits messages to AMQP.\n    -------------------------\n\n        Submits messages to AMQP.\n\n        Submits messages to an AMQP message broker.\n\n        If <exchange> is not provided, no exchange will be created during initialisation.\n        If <queue> is not provided, queue will be created during initialisation\n\n        If <exchange> and <queue> are provided, they will both be created and\n        bound during initialisation.\n\n        Parameters::\n\n            - delivery_mode(int)(1)\n               |  Sets the delivery mode of the messages.\n\n            - exchange(str)(\"\")\n               |  The exchange to declare.\n\n            - exchange_type(str)(\"direct\")\n               |  The exchange type to create. (direct, topic, fanout)\n\n            - exchange_durable(bool)(false)\n               |  Declare a durable exchange.\n\n            - exchange_auto_delete(bool)(true)\n               |  If set, the exchange is deleted when all queues have finished using it.\n\n            - exchange_passive(bool)(false)\n               |  If set, the server will not create the exchange. The client can use\n               |  this to check whether an exchange exists without modifying the server state.\n\n            - exchange_arguments(dict)({})\n               |  Additional arguments for exchange declaration.\n\n            - heartbeat(int)(0)\n                | Enable AMQP heartbeat. The value is the interval in seconds.\n                | 0 disables heartbeat support.\n\n            - host(str)(\"localhost:5672\")\n               |  The host broker to connect to.\n\n            - native_events(bool)(False)\n               |  Outgoing events should be native Wishbone events\n\n            - parallel_streams(int)(1)\n               |  The number of outgoing parallel data streams.\n\n            - password(str)(\"guest\")\n               |  The password to authenticate.\n\n            - payload(str)(None)\n               |  The string to submit.\n               |  If defined takes precedence over `selection`.\n\n            - queue(str)(\"wishbone\")\n               |  The queue to declare and bind to <exchange>. This will also the\n               |  the destination queue of the submitted messages unless\n               |  <routing_key> is set to another value and <exchange_type> is\n               |  \"topic\".\n\n            - queue_arguments(dict)({})\n               |  Additional arguments for queue declaration.\n\n            - queue_auto_delete(bool)(true)\n               |  Whether to autodelete the queue.\n\n            - queue_declare(bool)(true)\n               |  Whether to actually declare the queue.\n\n            - queue_durable(bool)(false)\n               |  Declare a durable queue.\n\n            - queue_exclusive(bool)(false)\n               |  Declare an exclusive queue.\n\n            - routing_key(str)(\"\")\n               |  The routing key to use when submitting messages.\n\n            - selection(str)(\"data\")\n               |  The part of the event to submit externally.\n\n            - ssl(bool)(False)\n               |  If True expects SSL\n\n            - user(str)(\"guest\")\n               |  The username to authenticate.\n\n            - vhost(str)(\"/\")\n               |  The virtual host to connect to.\n\n\n        Queues::\n\n            - inbox\n               | Messages going to the defined broker.\n\n", "description_content_type": "", "docs_url": null, "download_url": "https://github.com/smetj/wishbone-output-amqp/tarball/master", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/smetj/wishbone-output-amqp", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "wishbone_output_amqp", "package_url": "https://pypi.org/project/wishbone_output_amqp/", "platform": "Linux", "project_url": "https://pypi.org/project/wishbone_output_amqp/", "project_urls": {"Download": "https://github.com/smetj/wishbone-output-amqp/tarball/master", "Homepage": "https://github.com/smetj/wishbone-output-amqp"}, "release_url": "https://pypi.org/project/wishbone_output_amqp/3.0.3/", "requires_dist": null, "requires_python": "", "summary": "A Wishbone module to submit messages to an AMQP service.", "version": "3.0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <pre>          __       __    __\n.--.--.--|__.-----|  |--|  |--.-----.-----.-----.\n|  |  |  |  |__ --|     |  _  |  _  |     |  -__|\n|________|__|_____|__|__|_____|_____|__|__|_____|\n\n\n===================================\nwishbone_contrib.module.output.amqp\n===================================\n\nVersion: 3.1.0\n\nSubmits messages to AMQP.\n-------------------------\n\n    Submits messages to AMQP.\n\n    Submits messages to an AMQP message broker.\n\n    If &lt;exchange&gt; is not provided, no exchange will be created during initialisation.\n    If &lt;queue&gt; is not provided, queue will be created during initialisation\n\n    If &lt;exchange&gt; and &lt;queue&gt; are provided, they will both be created and\n    bound during initialisation.\n\n    Parameters::\n\n        - delivery_mode(int)(1)\n           |  Sets the delivery mode of the messages.\n\n        - exchange(str)(\"\")\n           |  The exchange to declare.\n\n        - exchange_type(str)(\"direct\")\n           |  The exchange type to create. (direct, topic, fanout)\n\n        - exchange_durable(bool)(false)\n           |  Declare a durable exchange.\n\n        - exchange_auto_delete(bool)(true)\n           |  If set, the exchange is deleted when all queues have finished using it.\n\n        - exchange_passive(bool)(false)\n           |  If set, the server will not create the exchange. The client can use\n           |  this to check whether an exchange exists without modifying the server state.\n\n        - exchange_arguments(dict)({})\n           |  Additional arguments for exchange declaration.\n\n        - heartbeat(int)(0)\n            | Enable AMQP heartbeat. The value is the interval in seconds.\n            | 0 disables heartbeat support.\n\n        - host(str)(\"localhost:5672\")\n           |  The host broker to connect to.\n\n        - native_events(bool)(False)\n           |  Outgoing events should be native Wishbone events\n\n        - parallel_streams(int)(1)\n           |  The number of outgoing parallel data streams.\n\n        - password(str)(\"guest\")\n           |  The password to authenticate.\n\n        - payload(str)(None)\n           |  The string to submit.\n           |  If defined takes precedence over `selection`.\n\n        - queue(str)(\"wishbone\")\n           |  The queue to declare and bind to &lt;exchange&gt;. This will also the\n           |  the destination queue of the submitted messages unless\n           |  &lt;routing_key&gt; is set to another value and &lt;exchange_type&gt; is\n           |  \"topic\".\n\n        - queue_arguments(dict)({})\n           |  Additional arguments for queue declaration.\n\n        - queue_auto_delete(bool)(true)\n           |  Whether to autodelete the queue.\n\n        - queue_declare(bool)(true)\n           |  Whether to actually declare the queue.\n\n        - queue_durable(bool)(false)\n           |  Declare a durable queue.\n\n        - queue_exclusive(bool)(false)\n           |  Declare an exclusive queue.\n\n        - routing_key(str)(\"\")\n           |  The routing key to use when submitting messages.\n\n        - selection(str)(\"data\")\n           |  The part of the event to submit externally.\n\n        - ssl(bool)(False)\n           |  If True expects SSL\n\n        - user(str)(\"guest\")\n           |  The username to authenticate.\n\n        - vhost(str)(\"/\")\n           |  The virtual host to connect to.\n\n\n    Queues::\n\n        - inbox\n           | Messages going to the defined broker.\n</pre>\n\n          </div>"}, "last_serial": 3678491, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "ecf4172d9b4030c160e8a6a16e92fd30", "sha256": "1e335f2bb770af742da1d10d4f95d37b7adb364bdbeb13ef9bdfc03ed9164042"}, "downloads": -1, "filename": "wishbone_output_amqp-1.0.0.tar.gz", "has_sig": false, "md5_digest": "ecf4172d9b4030c160e8a6a16e92fd30", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4517, "upload_time": "2016-03-28T13:33:19", "upload_time_iso_8601": "2016-03-28T13:33:19.614644Z", "url": "https://files.pythonhosted.org/packages/43/02/f3a5510071baf9d65bdf6ecc6d501668c82786c56a3c9f8ff73e555cc1c3/wishbone_output_amqp-1.0.0.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "d334a859abcc75aa51548060b5cc2384", "sha256": "003aa0cb65d13dd9c871a1720439de7db5ae0f7d392d5595de8b0a97820d8e04"}, "downloads": -1, "filename": "wishbone_output_amqp-1.1.0.tar.gz", "has_sig": false, "md5_digest": "d334a859abcc75aa51548060b5cc2384", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4524, "upload_time": "2017-02-22T20:21:43", "upload_time_iso_8601": "2017-02-22T20:21:43.980652Z", "url": "https://files.pythonhosted.org/packages/f0/f2/89a9ffb91903183771fcb57c3caa6aa6eba239e224600f47a8a35eb6b355/wishbone_output_amqp-1.1.0.tar.gz", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "52dd66745cb9320a79b0db751ae4a0c8", "sha256": "650c00a6aeed68ff0fa0d69e4e7027b0fafcc7bc6c0f35ca2b4a8aac03da87b4"}, "downloads": -1, "filename": "wishbone_output_amqp-1.1.1.tar.gz", "has_sig": false, "md5_digest": "52dd66745cb9320a79b0db751ae4a0c8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4523, "upload_time": "2017-02-23T20:03:04", "upload_time_iso_8601": "2017-02-23T20:03:04.112913Z", "url": "https://files.pythonhosted.org/packages/7e/f3/ccd3a1480d5679f509f7dde8dac24d28a978f2127fea062268d612c38c3d/wishbone_output_amqp-1.1.1.tar.gz", "yanked": false}], "3.0.3": [{"comment_text": "", "digests": {"md5": "9621760db51559e59010cdc758c89f77", "sha256": "4ceca98e8d9a594700ef2976594a025d46b54825017785ea52b0f19f7705860a"}, "downloads": -1, "filename": "wishbone_output_amqp-3.0.3.tar.gz", "has_sig": false, "md5_digest": "9621760db51559e59010cdc758c89f77", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4970, "upload_time": "2018-03-17T08:54:20", "upload_time_iso_8601": "2018-03-17T08:54:20.183444Z", "url": "https://files.pythonhosted.org/packages/3e/a6/2346cff59bcb9235969ef9f425b7e85653eba48d3d4ae92199ff8d78b3bd/wishbone_output_amqp-3.0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "9621760db51559e59010cdc758c89f77", "sha256": "4ceca98e8d9a594700ef2976594a025d46b54825017785ea52b0f19f7705860a"}, "downloads": -1, "filename": "wishbone_output_amqp-3.0.3.tar.gz", "has_sig": false, "md5_digest": "9621760db51559e59010cdc758c89f77", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4970, "upload_time": "2018-03-17T08:54:20", "upload_time_iso_8601": "2018-03-17T08:54:20.183444Z", "url": "https://files.pythonhosted.org/packages/3e/a6/2346cff59bcb9235969ef9f425b7e85653eba48d3d4ae92199ff8d78b3bd/wishbone_output_amqp-3.0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:28:36 2020"}