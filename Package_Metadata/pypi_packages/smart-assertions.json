{"info": {"author": "balalaiQA", "author_email": "", "bugtrack_url": null, "classifiers": [], "description": "[![Build Status](https://api.travis-ci.org/balalaiQA/smart-assertions.svg?branch=master)](https://travis-ci.com/github/balalaiQA/smart-assertions)\n[![PyPI version](https://badge.fury.io/py/smart-assertions.svg)](https://badge.fury.io/py/smart-assertions)\n# smart-assertions\nSoft assertions for Python\n\n## Installation\n\n```bash\n    pip install smart-assertions\n```\n## Usage\n\nAssertion is performed immediately after the call `soft_assert()`, \nbut the expected result is obtained only after the call `verify_expectations()`\n\nQuick example:\n```python\n    from  smart_assertions import soft_assert, verify_expectations\n\n    def test_something():\n        soft_assert(1 == 1)\n        soft_assert(2 > 1, 'Message if test failed')\n        soft_assert('one' != 'two', 'Some message')\n        verify_expectations()\n```\n\nYou can use asserts in loop:\n```python\n    from  smart_assertions import soft_assert, verify_expectations\n\n    def test_asserts_in_loop():\n        for number in range(1, 10):\n            soft_assert(number % 2 == 0, '{} is not a multiple of 2'.format(number))\n        verify_expectations()\n```\n\nAlso you can use it with pytest parametrized tests:\n```python\n    import pytest\n    from  smart_assertions import soft_assert, verify_expectations\n\n    @pytest.mark.parametrize(\"number\", list(range(1, 10)))\n    def test_pytest_example(number):\n        soft_assert(number % 2 == 0)\n        verify_expectations()\n```\n\nExample of output:\n```python\n    AssertionError: Failed conditions count: [ 4 ]\n\n    1. Exception: Custom message if test failed\n    Fail in \"/Users/nromanov/Documents/smart-assertions/unittest_example.py:28\" test_mixed()\n\n    2. Exception: Lists not equals\n    Fail in \"/Users/nromanov/Documents/smart-assertions/unittest_example.py:30\" test_mixed()\n\n    3. Exception: Your custom message; 4 < 5!\n    Fail in \"/Users/nromanov/Documents/smart-assertions/unittest_example.py:32\" test_mixed()\n\n    4. Exception: one != two\n    Fail in \"/Users/nromanov/Documents/smart-assertions/unittest_example.py:34\" test_mixed()\n```\n\nMore examples you can find in `unittest_example.py` \n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/balalaiQA/smart-assertions", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "smart-assertions", "package_url": "https://pypi.org/project/smart-assertions/", "platform": "", "project_url": "https://pypi.org/project/smart-assertions/", "project_urls": {"Homepage": "https://github.com/balalaiQA/smart-assertions"}, "release_url": "https://pypi.org/project/smart-assertions/1.0.2/", "requires_dist": null, "requires_python": "", "summary": "Soft assertions for Python", "version": "1.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://travis-ci.com/github/balalaiQA/smart-assertions\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e3da047d470a7cb045548b49e6c3ca7111084a10/68747470733a2f2f6170692e7472617669732d63692e6f72672f62616c616c616951412f736d6172742d617373657274696f6e732e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://badge.fury.io/py/smart-assertions\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d2f7bcc3705d2fc64a1ef2537ae922c710fee919/68747470733a2f2f62616467652e667572792e696f2f70792f736d6172742d617373657274696f6e732e737667\"></a></p>\n<h1>smart-assertions</h1>\n<p>Soft assertions for Python</p>\n<h2>Installation</h2>\n<pre>    pip install smart-assertions\n</pre>\n<h2>Usage</h2>\n<p>Assertion is performed immediately after the call <code>soft_assert()</code>,\nbut the expected result is obtained only after the call <code>verify_expectations()</code></p>\n<p>Quick example:</p>\n<pre>    <span class=\"kn\">from</span>  <span class=\"nn\">smart_assertions</span> <span class=\"kn\">import</span> <span class=\"n\">soft_assert</span><span class=\"p\">,</span> <span class=\"n\">verify_expectations</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">test_something</span><span class=\"p\">():</span>\n        <span class=\"n\">soft_assert</span><span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"n\">soft_assert</span><span class=\"p\">(</span><span class=\"mi\">2</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'Message if test failed'</span><span class=\"p\">)</span>\n        <span class=\"n\">soft_assert</span><span class=\"p\">(</span><span class=\"s1\">'one'</span> <span class=\"o\">!=</span> <span class=\"s1\">'two'</span><span class=\"p\">,</span> <span class=\"s1\">'Some message'</span><span class=\"p\">)</span>\n        <span class=\"n\">verify_expectations</span><span class=\"p\">()</span>\n</pre>\n<p>You can use asserts in loop:</p>\n<pre>    <span class=\"kn\">from</span>  <span class=\"nn\">smart_assertions</span> <span class=\"kn\">import</span> <span class=\"n\">soft_assert</span><span class=\"p\">,</span> <span class=\"n\">verify_expectations</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">test_asserts_in_loop</span><span class=\"p\">():</span>\n        <span class=\"k\">for</span> <span class=\"n\">number</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">):</span>\n            <span class=\"n\">soft_assert</span><span class=\"p\">(</span><span class=\"n\">number</span> <span class=\"o\">%</span> <span class=\"mi\">2</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s1\">'</span><span class=\"si\">{}</span><span class=\"s1\"> is not a multiple of 2'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">number</span><span class=\"p\">))</span>\n        <span class=\"n\">verify_expectations</span><span class=\"p\">()</span>\n</pre>\n<p>Also you can use it with pytest parametrized tests:</p>\n<pre>    <span class=\"kn\">import</span> <span class=\"nn\">pytest</span>\n    <span class=\"kn\">from</span>  <span class=\"nn\">smart_assertions</span> <span class=\"kn\">import</span> <span class=\"n\">soft_assert</span><span class=\"p\">,</span> <span class=\"n\">verify_expectations</span>\n\n    <span class=\"nd\">@pytest</span><span class=\"o\">.</span><span class=\"n\">mark</span><span class=\"o\">.</span><span class=\"n\">parametrize</span><span class=\"p\">(</span><span class=\"s2\">\"number\"</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)))</span>\n    <span class=\"k\">def</span> <span class=\"nf\">test_pytest_example</span><span class=\"p\">(</span><span class=\"n\">number</span><span class=\"p\">):</span>\n        <span class=\"n\">soft_assert</span><span class=\"p\">(</span><span class=\"n\">number</span> <span class=\"o\">%</span> <span class=\"mi\">2</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n        <span class=\"n\">verify_expectations</span><span class=\"p\">()</span>\n</pre>\n<p>Example of output:</p>\n<pre>    <span class=\"ne\">AssertionError</span><span class=\"p\">:</span> <span class=\"n\">Failed</span> <span class=\"n\">conditions</span> <span class=\"n\">count</span><span class=\"p\">:</span> <span class=\"p\">[</span> <span class=\"mi\">4</span> <span class=\"p\">]</span>\n\n    <span class=\"mf\">1.</span> <span class=\"ne\">Exception</span><span class=\"p\">:</span> <span class=\"n\">Custom</span> <span class=\"n\">message</span> <span class=\"k\">if</span> <span class=\"n\">test</span> <span class=\"n\">failed</span>\n    <span class=\"n\">Fail</span> <span class=\"ow\">in</span> <span class=\"s2\">\"/Users/nromanov/Documents/smart-assertions/unittest_example.py:28\"</span> <span class=\"n\">test_mixed</span><span class=\"p\">()</span>\n\n    <span class=\"mf\">2.</span> <span class=\"ne\">Exception</span><span class=\"p\">:</span> <span class=\"n\">Lists</span> <span class=\"ow\">not</span> <span class=\"n\">equals</span>\n    <span class=\"n\">Fail</span> <span class=\"ow\">in</span> <span class=\"s2\">\"/Users/nromanov/Documents/smart-assertions/unittest_example.py:30\"</span> <span class=\"n\">test_mixed</span><span class=\"p\">()</span>\n\n    <span class=\"mf\">3.</span> <span class=\"ne\">Exception</span><span class=\"p\">:</span> <span class=\"n\">Your</span> <span class=\"n\">custom</span> <span class=\"n\">message</span><span class=\"p\">;</span> <span class=\"mi\">4</span> <span class=\"o\">&lt;</span> <span class=\"mi\">5</span><span class=\"err\">!</span>\n    <span class=\"n\">Fail</span> <span class=\"ow\">in</span> <span class=\"s2\">\"/Users/nromanov/Documents/smart-assertions/unittest_example.py:32\"</span> <span class=\"n\">test_mixed</span><span class=\"p\">()</span>\n\n    <span class=\"mf\">4.</span> <span class=\"ne\">Exception</span><span class=\"p\">:</span> <span class=\"n\">one</span> <span class=\"o\">!=</span> <span class=\"n\">two</span>\n    <span class=\"n\">Fail</span> <span class=\"ow\">in</span> <span class=\"s2\">\"/Users/nromanov/Documents/smart-assertions/unittest_example.py:34\"</span> <span class=\"n\">test_mixed</span><span class=\"p\">()</span>\n</pre>\n<p>More examples you can find in <code>unittest_example.py</code></p>\n\n          </div>"}, "last_serial": 7140812, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "c87c4cf4c92cd2a2a3500f2c1309f255", "sha256": "8f9ae1f36e4646bcb63773f1ea9de9c70988e04f75dc581aa91bdbd9091979f7"}, "downloads": -1, "filename": "smart_assertions-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "c87c4cf4c92cd2a2a3500f2c1309f255", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 2821, "upload_time": "2020-04-30T16:29:41", "upload_time_iso_8601": "2020-04-30T16:29:41.662960Z", "url": "https://files.pythonhosted.org/packages/89/46/9b76be5a6bc4c2aebeb9d2f4a674ccad8bb909cd8abe6d5dea846e9895a7/smart_assertions-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1705194da04fd6a462d32857c61a5803", "sha256": "7abbf8af04c471a087dc03229440588e366f29776e758178e5329ef2af4e848a"}, "downloads": -1, "filename": "smart-assertions-1.0.0.tar.gz", "has_sig": false, "md5_digest": "1705194da04fd6a462d32857c61a5803", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1293, "upload_time": "2020-04-30T16:29:43", "upload_time_iso_8601": "2020-04-30T16:29:43.726329Z", "url": "https://files.pythonhosted.org/packages/33/31/eb363b8c5c42f2b091df65b0c101b6dc93ad977e2df3284b928496f72e99/smart-assertions-1.0.0.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "035f6ffb4cdd301d709d531228dfe5de", "sha256": "d605b55caf41acd5f255b9518c518ac0d79b92d6371baab3f58db43fd0131be3"}, "downloads": -1, "filename": "smart_assertions-1.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "035f6ffb4cdd301d709d531228dfe5de", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 3537, "upload_time": "2020-04-30T20:48:07", "upload_time_iso_8601": "2020-04-30T20:48:07.659907Z", "url": "https://files.pythonhosted.org/packages/26/05/4892f1eaa7bc2c5bf8003bea460a31acb7014632f84819720cd30a339ac1/smart_assertions-1.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3297f6baae6646ad62253e16fb30020f", "sha256": "8806bd3c5bca825b4a62ba46a66b08eb4f2b584e128e5b37aeaa4a3eb93a8809"}, "downloads": -1, "filename": "smart-assertions-1.0.2.tar.gz", "has_sig": false, "md5_digest": "3297f6baae6646ad62253e16fb30020f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2197, "upload_time": "2020-04-30T20:48:08", "upload_time_iso_8601": "2020-04-30T20:48:08.850649Z", "url": "https://files.pythonhosted.org/packages/1c/a4/3dcf9b3f974c6619e808723928f415384e5d4634cfcd0fc319699e5d3810/smart-assertions-1.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "035f6ffb4cdd301d709d531228dfe5de", "sha256": "d605b55caf41acd5f255b9518c518ac0d79b92d6371baab3f58db43fd0131be3"}, "downloads": -1, "filename": "smart_assertions-1.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "035f6ffb4cdd301d709d531228dfe5de", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 3537, "upload_time": "2020-04-30T20:48:07", "upload_time_iso_8601": "2020-04-30T20:48:07.659907Z", "url": "https://files.pythonhosted.org/packages/26/05/4892f1eaa7bc2c5bf8003bea460a31acb7014632f84819720cd30a339ac1/smart_assertions-1.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3297f6baae6646ad62253e16fb30020f", "sha256": "8806bd3c5bca825b4a62ba46a66b08eb4f2b584e128e5b37aeaa4a3eb93a8809"}, "downloads": -1, "filename": "smart-assertions-1.0.2.tar.gz", "has_sig": false, "md5_digest": "3297f6baae6646ad62253e16fb30020f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2197, "upload_time": "2020-04-30T20:48:08", "upload_time_iso_8601": "2020-04-30T20:48:08.850649Z", "url": "https://files.pythonhosted.org/packages/1c/a4/3dcf9b3f974c6619e808723928f415384e5d4634cfcd0fc319699e5d3810/smart-assertions-1.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:08:07 2020"}