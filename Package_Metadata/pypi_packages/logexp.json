{"info": {"author": "altescy", "author_email": "altescy@fastmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3.7", "Topic :: Scientific/Engineering :: Artificial Intelligence"], "description": "# logexp\n[![Actions Status](https://github.com/altescy/logexp/workflows/build/badge.svg)](https://github.com/altescy/logexp)\n[![Python version](https://img.shields.io/pypi/pyversions/logexp)](https://github.com/altescy/logexp)\n[![pypi version](https://img.shields.io/pypi/v/logexp)](https://pypi.org/project/logexp/)\n[![license](https://img.shields.io/github/license/altescy/logexp)](https://github.com/altescy/logexp/blob/master/LICENSE)\n\n## Quick Links\n\n- [Installation](#Installation)\n- [Tutorial](#Tutorial)\n- [scikit-learn example](https://github.com/altescy/logexp/tree/master/examples/scikit-learn)\n- [PyTorch example](https://github.com/altescy/logexp/tree/master/examples/pytorch)\n\n## Introduction\n\n`logexp` is a simple experiment manager for machine learning.\nYou can manage your experiments and executions from command line interface.\n\n- Features\n  - **track experiments**: `logexp` tracks experiments and environment.\n  - **manage parameters**: Import / export worker parameters with JSON format.\n  - **capture stdout / stderr**: Capture stdout / stderr during execution automatically.\n  - **search logs**: You can search your runs with [`jq`](https://stedolan.github.io/jq/) command.\n  - **written in pure Python**: `logexp` has no external dependencies.\n\n\n## Installation\n\nInstalling the library is simple using `pip`.\n```\npip install logexp\n```\n\n## Tutorial\n\nIn this tutorial we'll implement a simple worker for machine learning with [`scikit-learn`](https://scikit-learn.org/).\nAnd then, let me introduce some operations to manage experiments and executions.\n\n### 1. Create worker\n\nThis worker trains `RandomForestClassifier` and saves a trained model.\n\nWorker needs to inherit `logexp.BaseWorker`.\nIn `config` method, you can define worker parameters, that are logged automatically.\nWrite your task in `run` method, and return `logexp.Report` which describes quick result if you need.\n\n`BaseWorker.storage` is an artifact storage.\nYou can save any files by using this storage.\n\n```\n$ cat << EOF > iris.py\nimport logexp\nimport numpy as np\nimport pickle\nfrom sklearn.datasets import load_iris\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\n\nex = logexp.Experiment(\"sklearn-iris\")\n\n@ex.worker(\"train-rfc\")\nclass TrainRandomForest(logexp.BaseWorker):\n    def config(self):\n        self.rfc_params = {\n            \"n_estimators\": 100,\n            \"min_samples_leaf\": 1,\n            \"random_state\": 0,\n        }\n        self.test_size = 0.3\n        self.random_seed = 0\n\n    def run(self):\n        np.random.seed(self.random_seed)\n\n        X, y = load_iris(return_X_y=True)\n\n        X_train, X_valid, y_train, y_valid = \\\n            train_test_split(X, y, test_size=self.test_size)\n\n        model = RandomForestClassifier(**self.rfc_params)\n        model.fit(X_train, y_train)\n\n        with self.storage.open(\"rfc.pkl\", \"wb\") as f:\n            pickle.dump(model, f)\n\n        train_accuracy = model.score(X_train, y_train)\n        valid_accuracy = model.score(X_valid, y_valid)\n\n        report = logexp.Report()\n        report[\"train_size\"] = len(X_train)\n        report[\"valid_size\"] = len(X_valid)\n        report[\"train_accuracy\"] = train_accuracy\n        report[\"valid_accuracy\"] = valid_accuracy\n\n        return report\nEOF\n```\n\n\n### 2. Initialize experiment\n\nFollowing command creates log-store directory (`./.logexp` by default) and returns `experiment_id`.\n\n```\n$ logexp init -m iris -e sklearn-iris\nexperiment id: 0\n```\n\n\n### 3. Edit parameters\n\nExport default parameters with JSON format via:\n```\n$ logexp params -m iris -e sklearn-iris -w train-rfc > params.json\n$ cat params.json\n{\n  \"rfc_params\": {\n    \"n_estimators\": 100,\n    \"min_samples_leaf\": 1,\n    \"random_state\": 0\n  },\n  \"test_size\": 0.3,\n  \"random_seed\": 0\n}\n```\n\nYou can also export params from specified run:\n\n```\n$ logexp params -r [ RUN_ID ]\n```\n\nEdit `params.json` file if you need.\n\n\n### 4. Run worker\n\nRun worker via `$ logexp run` command and see quick result like bellow:\n\n```\n$ logexp run -m iris -e 0 -w train-rfc -p params.json\n** WORKER REPORT **\n{\n  \"train_size\": 105,\n  \"valid_size\": 45,\n  \"train_accuracy\": 1.0,\n  \"valid_accuracy\": 0.9777777777777777\n}\n\n** SUMMARY **\nrun_id     : 7fcd37ef38104715ad60bd55b7e1023d\nname       :\nmodule     : iris\nexperiment : sklearn-iris\nworker     : train-rfc\nstatus     : finished\nartifacts  : {'rootdir': '/src/.logexp/0/train-rfc/7fcd37ef38104715ad60bd55b7e1023d/artifacts'}\nstart_time : 2020-01-19 05:14:05.246681\nend_time   : 2020-01-19 05:14:05.430199\n```\n\n### 5. View logs\n\nFollowing command lists up executions:\n\n```\n$ logexp list -e 0 --sort start_time\nrun_id                           name exp_id exp_name     worker    status   start_time          end_time            note\n================================ ==== ====== ============ ========= ======== =================== =================== ====\n7fcd37ef38104715ad60bd55b7e1023d      0      sklearn-iris train-rfc finished 2020-01-19 05:14:05 2020-01-19 05:14:05\n5300f7fc32b949bba6775c5899e09ae9      0      sklearn-iris train-rfc finished 2020-01-19 05:44:04 2020-01-19 05:44:04\n```\n\n`$ logexp logs` command exports all logs with JSON format.\nUsing [`jq`](https://stedolan.github.io/jq/) command, you can do more complex search.\n\n```\n$ logexp logs -e 0 | jq '\n  map(select(.status == \"finished\"))\n    | sort_by(.report.valid_accuracy)\n    | reverse\n    | .[]\n    | {run_id: .uuid, valid_accuracy: .report.valid_accuracy}'\n{\n  \"run_id\": \"7fcd37ef38104715ad60bd55b7e1023d\",\n  \"valid_accuracy\": 0.9777777777777777\n}\n{\n  \"run_id\": \"5300f7fc32b949bba6775c5899e09ae9\",\n  \"valid_accuracy\": 0.9555555555555556\n}\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/altescy/logexp", "keywords": "machine learning experiment manager", "license": "MIT License", "maintainer": "", "maintainer_email": "", "name": "logexp", "package_url": "https://pypi.org/project/logexp/", "platform": "", "project_url": "https://pypi.org/project/logexp/", "project_urls": {"Homepage": "https://github.com/altescy/logexp"}, "release_url": "https://pypi.org/project/logexp/0.1.3/", "requires_dist": null, "requires_python": ">=3.7.3", "summary": "simple experiment manager for machine learning.", "version": "0.1.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>logexp</h1>\n<p><a href=\"https://github.com/altescy/logexp\" rel=\"nofollow\"><img alt=\"Actions Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5bbf8846dcc0d648df140dcaccb510d2f22c412f/68747470733a2f2f6769746875622e636f6d2f616c74657363792f6c6f676578702f776f726b666c6f77732f6275696c642f62616467652e737667\"></a>\n<a href=\"https://github.com/altescy/logexp\" rel=\"nofollow\"><img alt=\"Python version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c97db935ab60ee00899ec7c44ad10535b78551fb/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f6c6f67657870\"></a>\n<a href=\"https://pypi.org/project/logexp/\" rel=\"nofollow\"><img alt=\"pypi version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/003441f135f56ab44a8a001b209de36a63e185c5/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f6c6f67657870\"></a>\n<a href=\"https://github.com/altescy/logexp/blob/master/LICENSE\" rel=\"nofollow\"><img alt=\"license\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b33544e24b84e6643c3e8daa26e1275ddca68c11/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f616c74657363792f6c6f67657870\"></a></p>\n<h2>Quick Links</h2>\n<ul>\n<li><a href=\"#Installation\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"#Tutorial\" rel=\"nofollow\">Tutorial</a></li>\n<li><a href=\"https://github.com/altescy/logexp/tree/master/examples/scikit-learn\" rel=\"nofollow\">scikit-learn example</a></li>\n<li><a href=\"https://github.com/altescy/logexp/tree/master/examples/pytorch\" rel=\"nofollow\">PyTorch example</a></li>\n</ul>\n<h2>Introduction</h2>\n<p><code>logexp</code> is a simple experiment manager for machine learning.\nYou can manage your experiments and executions from command line interface.</p>\n<ul>\n<li>Features\n<ul>\n<li><strong>track experiments</strong>: <code>logexp</code> tracks experiments and environment.</li>\n<li><strong>manage parameters</strong>: Import / export worker parameters with JSON format.</li>\n<li><strong>capture stdout / stderr</strong>: Capture stdout / stderr during execution automatically.</li>\n<li><strong>search logs</strong>: You can search your runs with <a href=\"https://stedolan.github.io/jq/\" rel=\"nofollow\"><code>jq</code></a> command.</li>\n<li><strong>written in pure Python</strong>: <code>logexp</code> has no external dependencies.</li>\n</ul>\n</li>\n</ul>\n<h2>Installation</h2>\n<p>Installing the library is simple using <code>pip</code>.</p>\n<pre><code>pip install logexp\n</code></pre>\n<h2>Tutorial</h2>\n<p>In this tutorial we'll implement a simple worker for machine learning with <a href=\"https://scikit-learn.org/\" rel=\"nofollow\"><code>scikit-learn</code></a>.\nAnd then, let me introduce some operations to manage experiments and executions.</p>\n<h3>1. Create worker</h3>\n<p>This worker trains <code>RandomForestClassifier</code> and saves a trained model.</p>\n<p>Worker needs to inherit <code>logexp.BaseWorker</code>.\nIn <code>config</code> method, you can define worker parameters, that are logged automatically.\nWrite your task in <code>run</code> method, and return <code>logexp.Report</code> which describes quick result if you need.</p>\n<p><code>BaseWorker.storage</code> is an artifact storage.\nYou can save any files by using this storage.</p>\n<pre><code>$ cat &lt;&lt; EOF &gt; iris.py\nimport logexp\nimport numpy as np\nimport pickle\nfrom sklearn.datasets import load_iris\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\n\nex = logexp.Experiment(\"sklearn-iris\")\n\n@ex.worker(\"train-rfc\")\nclass TrainRandomForest(logexp.BaseWorker):\n    def config(self):\n        self.rfc_params = {\n            \"n_estimators\": 100,\n            \"min_samples_leaf\": 1,\n            \"random_state\": 0,\n        }\n        self.test_size = 0.3\n        self.random_seed = 0\n\n    def run(self):\n        np.random.seed(self.random_seed)\n\n        X, y = load_iris(return_X_y=True)\n\n        X_train, X_valid, y_train, y_valid = \\\n            train_test_split(X, y, test_size=self.test_size)\n\n        model = RandomForestClassifier(**self.rfc_params)\n        model.fit(X_train, y_train)\n\n        with self.storage.open(\"rfc.pkl\", \"wb\") as f:\n            pickle.dump(model, f)\n\n        train_accuracy = model.score(X_train, y_train)\n        valid_accuracy = model.score(X_valid, y_valid)\n\n        report = logexp.Report()\n        report[\"train_size\"] = len(X_train)\n        report[\"valid_size\"] = len(X_valid)\n        report[\"train_accuracy\"] = train_accuracy\n        report[\"valid_accuracy\"] = valid_accuracy\n\n        return report\nEOF\n</code></pre>\n<h3>2. Initialize experiment</h3>\n<p>Following command creates log-store directory (<code>./.logexp</code> by default) and returns <code>experiment_id</code>.</p>\n<pre><code>$ logexp init -m iris -e sklearn-iris\nexperiment id: 0\n</code></pre>\n<h3>3. Edit parameters</h3>\n<p>Export default parameters with JSON format via:</p>\n<pre><code>$ logexp params -m iris -e sklearn-iris -w train-rfc &gt; params.json\n$ cat params.json\n{\n  \"rfc_params\": {\n    \"n_estimators\": 100,\n    \"min_samples_leaf\": 1,\n    \"random_state\": 0\n  },\n  \"test_size\": 0.3,\n  \"random_seed\": 0\n}\n</code></pre>\n<p>You can also export params from specified run:</p>\n<pre><code>$ logexp params -r [ RUN_ID ]\n</code></pre>\n<p>Edit <code>params.json</code> file if you need.</p>\n<h3>4. Run worker</h3>\n<p>Run worker via <code>$ logexp run</code> command and see quick result like bellow:</p>\n<pre><code>$ logexp run -m iris -e 0 -w train-rfc -p params.json\n** WORKER REPORT **\n{\n  \"train_size\": 105,\n  \"valid_size\": 45,\n  \"train_accuracy\": 1.0,\n  \"valid_accuracy\": 0.9777777777777777\n}\n\n** SUMMARY **\nrun_id     : 7fcd37ef38104715ad60bd55b7e1023d\nname       :\nmodule     : iris\nexperiment : sklearn-iris\nworker     : train-rfc\nstatus     : finished\nartifacts  : {'rootdir': '/src/.logexp/0/train-rfc/7fcd37ef38104715ad60bd55b7e1023d/artifacts'}\nstart_time : 2020-01-19 05:14:05.246681\nend_time   : 2020-01-19 05:14:05.430199\n</code></pre>\n<h3>5. View logs</h3>\n<p>Following command lists up executions:</p>\n<pre><code>$ logexp list -e 0 --sort start_time\nrun_id                           name exp_id exp_name     worker    status   start_time          end_time            note\n================================ ==== ====== ============ ========= ======== =================== =================== ====\n7fcd37ef38104715ad60bd55b7e1023d      0      sklearn-iris train-rfc finished 2020-01-19 05:14:05 2020-01-19 05:14:05\n5300f7fc32b949bba6775c5899e09ae9      0      sklearn-iris train-rfc finished 2020-01-19 05:44:04 2020-01-19 05:44:04\n</code></pre>\n<p><code>$ logexp logs</code> command exports all logs with JSON format.\nUsing <a href=\"https://stedolan.github.io/jq/\" rel=\"nofollow\"><code>jq</code></a> command, you can do more complex search.</p>\n<pre><code>$ logexp logs -e 0 | jq '\n  map(select(.status == \"finished\"))\n    | sort_by(.report.valid_accuracy)\n    | reverse\n    | .[]\n    | {run_id: .uuid, valid_accuracy: .report.valid_accuracy}'\n{\n  \"run_id\": \"7fcd37ef38104715ad60bd55b7e1023d\",\n  \"valid_accuracy\": 0.9777777777777777\n}\n{\n  \"run_id\": \"5300f7fc32b949bba6775c5899e09ae9\",\n  \"valid_accuracy\": 0.9555555555555556\n}\n</code></pre>\n\n          </div>"}, "last_serial": 6766265, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "011d5ae693d849a569c8144372c45a47", "sha256": "7a3976013aa02d821b097787e1624ef2bc92dcc98cc1e5606584990a6f464391"}, "downloads": -1, "filename": "logexp-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "011d5ae693d849a569c8144372c45a47", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7.3", "size": 26397, "upload_time": "2020-01-19T07:28:50", "upload_time_iso_8601": "2020-01-19T07:28:50.038746Z", "url": "https://files.pythonhosted.org/packages/5b/4e/70f5398b691c5b0e7951c86cb16b7684344c9319e7d504173d96e765fb4f/logexp-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fbe254078078b5d6dd2eea4ceacfec2e", "sha256": "19afb648cfe08cb216934c2b596d1bdcc514259b5a58ab48f3b8d3f164d472e5"}, "downloads": -1, "filename": "logexp-0.1.0.tar.gz", "has_sig": false, "md5_digest": "fbe254078078b5d6dd2eea4ceacfec2e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7.3", "size": 65690, "upload_time": "2020-01-19T07:28:53", "upload_time_iso_8601": "2020-01-19T07:28:53.203186Z", "url": "https://files.pythonhosted.org/packages/ec/63/7c3bb232aff2bd827855ecfc172b8443885eef2b6bb09ce1aa9fdbcf555c/logexp-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "d4770668caafc7564ee090fc008e9c42", "sha256": "a12ee64b41f73e667f018452f4f73139df331ee269e0c443673137ff1cdbe817"}, "downloads": -1, "filename": "logexp-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "d4770668caafc7564ee090fc008e9c42", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7.3", "size": 27173, "upload_time": "2020-01-22T15:02:08", "upload_time_iso_8601": "2020-01-22T15:02:08.834448Z", "url": "https://files.pythonhosted.org/packages/ae/55/af95b54d5a8fee398ab32da16961eb193026456ed6387eac1dc2033fed7a/logexp-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b26d1234f761b30b6a5639d55b29173c", "sha256": "8cb885be9c31d175f12199d20fe80eadd4725912998a14afef862a9e489d58d5"}, "downloads": -1, "filename": "logexp-0.1.1.tar.gz", "has_sig": false, "md5_digest": "b26d1234f761b30b6a5639d55b29173c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7.3", "size": 89548, "upload_time": "2020-01-22T15:02:11", "upload_time_iso_8601": "2020-01-22T15:02:11.008949Z", "url": "https://files.pythonhosted.org/packages/87/22/cda2489b393b3670449d99c0a12ca9e5c2610ac18fff2692069b20b92971/logexp-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "ddb16ad80030fee7147e224622dfb486", "sha256": "442194e45cf94d9aafaa31bef8330a929e46a20a9112f85cf781c3210b83706d"}, "downloads": -1, "filename": "logexp-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "ddb16ad80030fee7147e224622dfb486", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7.3", "size": 27583, "upload_time": "2020-02-23T03:46:37", "upload_time_iso_8601": "2020-02-23T03:46:37.776140Z", "url": "https://files.pythonhosted.org/packages/ae/84/3d447e58de3e506f7d5de04941453243202f878ba091a38de269d83c297c/logexp-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ae5279a598844e5750f8620694da8d6f", "sha256": "d7127e4567eae0bdce006d502019d704a0356e67813b37d6dd9abc5c73fcfeee"}, "downloads": -1, "filename": "logexp-0.1.2.tar.gz", "has_sig": false, "md5_digest": "ae5279a598844e5750f8620694da8d6f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7.3", "size": 40337, "upload_time": "2020-02-23T03:46:39", "upload_time_iso_8601": "2020-02-23T03:46:39.792448Z", "url": "https://files.pythonhosted.org/packages/a5/6c/483af080d6b93eecbca24b47ae8b66cba6b669be573facd26d1399186734/logexp-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "c3e875603b94b26bc2f73bf63be4c939", "sha256": "e5f448c453591fefa4b3ba4e7c0c1f6cc1a7a830948153f00ac20d6dc65df99f"}, "downloads": -1, "filename": "logexp-0.1.3-py3-none-any.whl", "has_sig": false, "md5_digest": "c3e875603b94b26bc2f73bf63be4c939", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7.3", "size": 27485, "upload_time": "2020-03-07T02:30:16", "upload_time_iso_8601": "2020-03-07T02:30:16.352460Z", "url": "https://files.pythonhosted.org/packages/4a/5d/fc5d5a45a5ee62c2f366268dafc74a01edce01fbbddca19e47f2c5c54a15/logexp-0.1.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ea93b9e37c6b644d6498332a29838cde", "sha256": "de0486f7e6a3239cb9b259cdcdb3f4887a77b0ad0f0fca6342bb6b406fb1444e"}, "downloads": -1, "filename": "logexp-0.1.3.tar.gz", "has_sig": false, "md5_digest": "ea93b9e37c6b644d6498332a29838cde", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7.3", "size": 31669, "upload_time": "2020-03-07T02:30:18", "upload_time_iso_8601": "2020-03-07T02:30:18.360974Z", "url": "https://files.pythonhosted.org/packages/7a/a0/a6c6c28206fa2910f5928a389d5ed53e5fb95b45b68bb9048f5aef949dca/logexp-0.1.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c3e875603b94b26bc2f73bf63be4c939", "sha256": "e5f448c453591fefa4b3ba4e7c0c1f6cc1a7a830948153f00ac20d6dc65df99f"}, "downloads": -1, "filename": "logexp-0.1.3-py3-none-any.whl", "has_sig": false, "md5_digest": "c3e875603b94b26bc2f73bf63be4c939", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7.3", "size": 27485, "upload_time": "2020-03-07T02:30:16", "upload_time_iso_8601": "2020-03-07T02:30:16.352460Z", "url": "https://files.pythonhosted.org/packages/4a/5d/fc5d5a45a5ee62c2f366268dafc74a01edce01fbbddca19e47f2c5c54a15/logexp-0.1.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ea93b9e37c6b644d6498332a29838cde", "sha256": "de0486f7e6a3239cb9b259cdcdb3f4887a77b0ad0f0fca6342bb6b406fb1444e"}, "downloads": -1, "filename": "logexp-0.1.3.tar.gz", "has_sig": false, "md5_digest": "ea93b9e37c6b644d6498332a29838cde", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7.3", "size": 31669, "upload_time": "2020-03-07T02:30:18", "upload_time_iso_8601": "2020-03-07T02:30:18.360974Z", "url": "https://files.pythonhosted.org/packages/7a/a0/a6c6c28206fa2910f5928a389d5ed53e5fb95b45b68bb9048f5aef949dca/logexp-0.1.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:44:21 2020"}