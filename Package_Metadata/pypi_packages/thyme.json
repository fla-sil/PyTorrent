{"info": {"author": "Erin Nagel, Jason Greenlaw", "author_email": "erin.nagel@noaa.gov, jason.greenlaw@noaa.gov", "bugtrack_url": null, "classifiers": ["Intended Audience :: Science/Research", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "thyme\n=====\n[![Build Status](https://travis-ci.com/noaa-ocs-modeling/thyme.svg?branch=master)](https://travis-ci.com/noaa-ocs-modeling/thyme)\n\n**T**ools for **Hy**drodynamic **M**odel Output **E**xtraction\n\nA Python package providing utilities for processing, interpolating, and\nconverting hydrodynamic ocean model NetCDF datasets.\n\nWhy?\n----\n\nThere are many hydrodynamic modeling frameworks in use today by the\noceanographic community. All models are output to a NetCDF format, but\nthe structure, dimensions, variables, attributes, naming conventions,\ncoordinate systems, and masking rules can all vary significantly, making\nit difficult for users to extract meaningful information from these\ncomplex systems.\n\nThis package attempts to support a common methodology for interacting\nwith these datasets by abstracting the nuances of each modeling system\ninto distinct modules and unifying them with a single API.\n\nSupported Models\n----------------\n\n*NOTE: To date, this package has been tested to work with National Ocean\nService (NOS) Operational Forecast Systems (OFS) (e.g. CBOFS, DBOFS,\nNGOFS, etc.), however with minor tweaks it should also work with output\nfrom non-NOS OFS models.*\n\nThe following ocean modeling frameworks are presently supported:\n\n**Regional Ocean Modeling System (ROMS)**\n\n> *\\\"ROMS is a free-surface, terrain-following, primitive equations\n> ocean model widely used by the scientific community for a diverse\n> range of applications\\...In the horizontal, the primitive equations\n> are evaluated using boundary-fitted, orthogonal curvilinear\n> coordinates on a staggered Arakawa C-grid. The general formulation of\n> curvilinear coordinates includes both Cartesian (constant metrics) and\n> spherical (variable metrics) coordinates. Coastal boundaries can also\n> be specified as a finite-discretized grid via land/sea masking. As in\n> the vertical, the horizontal stencil utilizes a centered, second-order\n> finite differences.\\\"*\n>\n> Description from <https://www.myroms.org/>\n\n**Finite-Volume Community Ocean Modeling System (FVCOM)**\n\n> *\\\"FVCOM is a prognostic, unstructured-grid, finite-volume,\n> free-surface, 3-D primitive equation coastal ocean circulation model\n> developed by UMASSD-WHOI joint efforts. The model consists of\n> momentum, continuity, temperature, salinity and density equations and\n> is closed physically and mathematically using turbulence closure\n> submodels. The horizontal grid is comprised of unstructured triangular\n> cells and the irregular bottom is presented using generalized\n> terrain-following coordinates.\\\"*\n>\n> Description from <http://fvcom.smast.umassd.edu/fvcom/>\n\n**Princeton Ocean Model (POM)**\n\n> *\\\"POM is a sigma coordinate (terrain-following), free surface ocean\n> model with embedded turbulence and wave sub-models, and wet-dry\n> capability.\\\"*\n>\n> Description from <http://www.ccpo.odu.edu/POMWEB/index.html>\n\n**Hybrid Coordinate Ocean Model (HYCOM)**\n\n> *\\\"The HYbrid Coordinate Ocean Model is a primitive equation ocean\n> general circulation model that evolved from the Miami\n> Isopycnic-Coordinate Ocean Model (MICOM) developed by Rainer Bleck and\n> colleagues. Vertical coordinates in HYCOM remain isopycnic in the\n> open, stratified ocean. However, they smoothly transition to z\n> coordinates in the weakly-stratified upper-ocean mixed layer, to\n> terrain-following sigma coordinate in shallow water regions, and back\n> to level coordinates in very shallow water.\\\"*\n>\n> Description from <https://www.hycom.org/attachments/067_overview.pdf>\n\nAdditionally, a generic `rectilinear` module has been created to support\nany model output whose coordinate system conforms to a rectilinear grid\nand whose depth coordinates reflect standard depths/z-levels, however\nthis module does not support vertical interpolation.\n\nFeatures\n--------\n\n-   Support for ROMS, FVCOM, POM, HYCOM model output\n-   Interpolate staggered horizontal coordinates (i.e. ROMS Arakawa-C\n    grid rho/eta/xi) to common coordinates before further processing\n-   Apply spatially-varying rotation angle to u/v current components to\n    obtain true-north/true-east values before further processing\n-   Interpolate sigma (bathymetry-following) vertical coordinates to a\n    given depth-below-surface, respecting the appropriate vertical\n    transformation, if any\n-   Given an approximate target grid resolution, generate a regular grid\n    definition conforming to the model domain\\'s bounding box (or\n    optionally to a predefined set of bounding rectangles), and output\n    regular grid definition to CF-compliant NetCDF\n\nModel Considerations\n--------------------\n- All modules in `thyme/models/` are written specifically for\nNOAA hydrodynamic ocean models and should be used with caution.\nThe modules were written by referencing NOS model metadata, NOS model\nguidance, and roms, pom, fvcom, and hycom model documentation.\n\n- To develop a custom module to support a new model, use one of the existing modules\n(fvcom.py, hycom.py, pom.py, rectilinear.py, or roms,py) as a template, and place\nthe new python module file alongside the others under the `thyme/model/` folder\n\n- Development of a custom module may be required to support:\n\n    - Model output options specific to your organization\n    - Different variable names and dimensions\n    - Different vertical coordinates\n    - Different variable masks\n    - Different vertical or time varying horizontal masks\n    - Different date and time format\n    - If the model has already been converted to a regular or rectilinear grid\n    - If the model output's vertical coordinate system uses standard depth levels versus sigma\n\nIndex (Grid Definition) Files\n-----------------------------\n\nIn order to convert model output files to a regular grid, an index file\nmust be supplied at runtime. The purpose of the index file is to persist\ninformation that does not change between model runs in order to reduce\nthe overall processing time per cycle run. The information stored in the\nindex file includes the output grid definition and general metadata\nabout the model itself. Index files for FVCOM-based models with a hybrid\n(generalized) coordinate system additionally store interpolated vertical\ncoordinate values for each output grid cell.\n\nWhen generating a grid definition, the user has a choice between using\nthe full extent of the model\\'s domain or supplying a shapefile\ncontaining one or more polygons defining subgrids\n(sub-regions/subdomains) to which the grid definition will conform. If\nno subgrid shapefile is specified, the resulting index file will define\na regular grid (with NoData mask) matching the full model domain\n(extent). Otherwise, if a subgrid shapefile is specified, the resulting\nindex file will define a regular grid (with NoData mask) matching the\nunified extent of all subgrid polygons that intersect the model domain,\nalong with information identifying the grid cell ranges that correspond\nwith each subgrid. Note that when supplying a subgrid shapefile, all\nsubgrid polygons must be rectangular, congruent with each other, and\nadjacent to one another.\n\nA subgrid index is intended to be used to subset the model output into\nsmaller geographic areas (i.e. tiles), which in turn results in smaller\noutput file sizes. Optionally, for a subgrid index file, the user may\nspecify the name of an attribute field within the subgrid shapefile that\nuniquely identifies each subgrid (tile). If no field is specified, each\npolygon\\'s FID value is used as the identifier. This identifier can be\nused to construct unique filenames.\n\nAdditionally, a land mask polygon shapefile can be supplied when\ngenerating an index file. If supplied, any output grid cells whose\ncentroid intersects a land polygon will be masked in the final grid\ndefinition.\n\nOne index file must be created per ocean forecast system for each\ncombination of target resolution and extent (whether using the model\\'s\nfull domain extent or subgrid definition).\n\nWhen to Generate a New Index File\n---------------------------------\n\nOnce a model index file is created, it can be reused indefinitely for\nthat model/resolution/extent/land mask until any of those properties\nchange. For example, if an FVCOM-based model has a hybrid (generalized)\nvertical coordinate system that is modified at some point (i.e., sigma\nvalues are changed), any associated index files will need to be\nregenerated using a new model output file in the updated format.\n\nGenerally, a new index file is required:\n\n-   For each new model\n-   For each desired output grid resolution\n-   For each desired set of subgrids\n-   If the subgrid polygons change\n-   If the subgrid attribute identifier changes\n-   If the land mask shapefile changes\n-   If the underlining model changes (e.g., new geographic extent,\n    change to FVCOM sigma coordinates, etc.)\n\nRequirements\n------------\n\nThis codebase is written for Python 3 and relies on the following python\npackages:\n\n-   gdal\n-   netCDF4\n-   numpy\n-   scipy\n-   shapely\n\nInstallation\n------------\n\nThe GDAL Python bindings used by this package require system libraries to be\npresent, so it usually can\\'t just be installed using `pip install gdal`.\nWe recommend installing GDAL either through a package manager (e.g.\n`conda`, `apt`, `yum`, `pacman`) or by compiling from scratch.\n[Miniconda](https://docs.conda.io/en/latest/miniconda.html) is probably\nthe easiest method.\n\nOnce `gdal` has been installed, thyme can be installed using `pip`:\n\n```bash\npip install thyme\n```\n\nExample Usage\n-------------\n\nTo generate a new index file for an FVCOM-based model using the default\ngrid extent, a \\~500 meter target resolution, and a shoreline shapefile\ndefining land areas to be masked:\n\n```python\nfrom thyme.model import fvcom\nnative_model_file = fvcom.FVCOMFile('/path/to/existing_fvcom_file.nc')\nmodel_index_file = fvcom.FVCOMIndexFile('/path/to/new_index_file.nc')\ntry:\n  native_model_file.open()\n  model_index_file.open()\n  model_index_file.init_nc(native_model_file, 500, 'my_fvcom_model', '/path/to/shoreline_shapefile.shp')\nfinally:\n  model_index_file.close()\n  native_model_file.close()\n```\n\nTo generate a new index file for a ROMS-based model using a subgrid\nshapefile (with fieldname 'id' used to identify subgrid areas) and a\n\\~300m target resolution (with no shoreline mask shapefile specified):\n\n```python\nfrom thyme.model import roms\nnative_model_file = roms.ROMSFile('/path/to/existing_roms_file.nc')\nmodel_index_file = roms.ROMSIndexFile('/path/to/new_index_file.nc')\ntry:\n  native_model_file.open()\n  model_index_file.open()\n  model_index_file.init_nc(native_model_file, 300, 'my_roms_model', None, '/path/to/subgrid_shapefile.shp', 'subgrid_id_fieldname')\nfinally:\n  model_index_file.close()\n  native_model_file.close()\n```\n\nTo interpolate u/v current components from a ROMS-based model to a\nregular grid defined in an existing model index file, at a depth of 4.5\nmeters below surface, for time index 0, and store the resulting u/v\nvalues in two `numpy.ma.masked_array` objects:\n\n```python\nfrom thyme.model import roms\nnative_model_file = roms.ROMSFile('/path/to/existing_roms_file.nc')\nmodel_index_file = roms.ROMSIndexFile('/path/to/existing_index_file.nc')\ntry:\n  native_model_file.open()\n  model_index_file.open()\n  (u_with_mask, v_with_mask) = native_model_file.uv_to_regular_grid(model_index_file, 0, 4.5)\n  # u_with_mask and v_with_mask now contain 2D numpy masked arrays\nfinally:\n  model_index_file.close()\n  native_model_file.close()\n```\n\nRunning Tests\n-------------\n\nThis project uses [pytest](https://docs.pytest.org) for unit testing.\n\nTo run the test suite:\n\n```bash\npip install pytest\npytest -vv\n```\n\nAuthors\n-------\n\n-   Erin Nagel (UCAR), <erin.nagel@noaa.gov>\n-   Jason Greenlaw (ERT), <jason.greenlaw@noaa.gov>\n\nLicense\n-------\n\nThis work, as a whole, is licensed under the BSD 2-Clause License (see\n[LICENSE](LICENSE)), however it contains major contributions from the\nU.S. National Oceanic and Atmospheric Administration (NOAA), 2017 -\n2019, which are individually dedicated to the public domain.\n\nDisclaimer\n----------\n\nThis repository is a scientific product and is not official\ncommunication of the National Oceanic and Atmospheric Administration, or\nthe United States Department of Commerce. All NOAA GitHub project code\nis provided on an \\\"as is\\\" basis and the user assumes responsibility\nfor its use. Any claims against the Department of Commerce or Department\nof Commerce bureaus stemming from the use of this GitHub project will be\ngoverned by all applicable Federal law. Any reference to specific\ncommercial products, processes, or services by service mark, trademark,\nmanufacturer, or otherwise, does not constitute or imply their\nendorsement, recommendation or favoring by the Department of Commerce.\nThe Department of Commerce seal and logo, or the seal and logo of a DOC\nbureau, shall not be used in any manner to imply endorsement of any\ncommercial product or activity by DOC or the United States Government.\n\nAcknowledgments\n---------------\n\nThis software has been developed by the National Oceanic and Atmospheric\nAdministration (NOAA)/National Ocean Service (NOS)/Office of Coast\nSurvey (OCS)/Coast Survey Development Lab (CSDL) for use by the\nscientific and oceanographic communities.\n\nCSDL wishes to thank the following entities for their assistance:\n\n-   NOAA/NOS/Center for Operational Oceanographic Products and Services\n    (CO-OPS)\n-   Canadian Hydrographic Service (CHS)\n-   Teledyne CARIS", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/noaa-ocs-modeling/thyme", "keywords": "", "license": "BSD-2-Clause", "maintainer": "", "maintainer_email": "", "name": "thyme", "package_url": "https://pypi.org/project/thyme/", "platform": "", "project_url": "https://pypi.org/project/thyme/", "project_urls": {"Homepage": "https://github.com/noaa-ocs-modeling/thyme"}, "release_url": "https://pypi.org/project/thyme/0.6.0/", "requires_dist": null, "requires_python": "", "summary": "Tools for Hydrodynamic Model Output Extraction and Processing", "version": "0.6.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>thyme</h1>\n<p><a href=\"https://travis-ci.com/noaa-ocs-modeling/thyme\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8d8b960a040f0f3768d18fe85e0a698186898b44/68747470733a2f2f7472617669732d63692e636f6d2f6e6f61612d6f63732d6d6f64656c696e672f7468796d652e7376673f6272616e63683d6d6173746572\"></a></p>\n<p><strong>T</strong>ools for <strong>Hy</strong>drodynamic <strong>M</strong>odel Output <strong>E</strong>xtraction</p>\n<p>A Python package providing utilities for processing, interpolating, and\nconverting hydrodynamic ocean model NetCDF datasets.</p>\n<h2>Why?</h2>\n<p>There are many hydrodynamic modeling frameworks in use today by the\noceanographic community. All models are output to a NetCDF format, but\nthe structure, dimensions, variables, attributes, naming conventions,\ncoordinate systems, and masking rules can all vary significantly, making\nit difficult for users to extract meaningful information from these\ncomplex systems.</p>\n<p>This package attempts to support a common methodology for interacting\nwith these datasets by abstracting the nuances of each modeling system\ninto distinct modules and unifying them with a single API.</p>\n<h2>Supported Models</h2>\n<p><em>NOTE: To date, this package has been tested to work with National Ocean\nService (NOS) Operational Forecast Systems (OFS) (e.g. CBOFS, DBOFS,\nNGOFS, etc.), however with minor tweaks it should also work with output\nfrom non-NOS OFS models.</em></p>\n<p>The following ocean modeling frameworks are presently supported:</p>\n<p><strong>Regional Ocean Modeling System (ROMS)</strong></p>\n<blockquote>\n<p><em>\"ROMS is a free-surface, terrain-following, primitive equations\nocean model widely used by the scientific community for a diverse\nrange of applications...In the horizontal, the primitive equations\nare evaluated using boundary-fitted, orthogonal curvilinear\ncoordinates on a staggered Arakawa C-grid. The general formulation of\ncurvilinear coordinates includes both Cartesian (constant metrics) and\nspherical (variable metrics) coordinates. Coastal boundaries can also\nbe specified as a finite-discretized grid via land/sea masking. As in\nthe vertical, the horizontal stencil utilizes a centered, second-order\nfinite differences.\"</em></p>\n<p>Description from <a href=\"https://www.myroms.org/\" rel=\"nofollow\">https://www.myroms.org/</a></p>\n</blockquote>\n<p><strong>Finite-Volume Community Ocean Modeling System (FVCOM)</strong></p>\n<blockquote>\n<p><em>\"FVCOM is a prognostic, unstructured-grid, finite-volume,\nfree-surface, 3-D primitive equation coastal ocean circulation model\ndeveloped by UMASSD-WHOI joint efforts. The model consists of\nmomentum, continuity, temperature, salinity and density equations and\nis closed physically and mathematically using turbulence closure\nsubmodels. The horizontal grid is comprised of unstructured triangular\ncells and the irregular bottom is presented using generalized\nterrain-following coordinates.\"</em></p>\n<p>Description from <a href=\"http://fvcom.smast.umassd.edu/fvcom/\" rel=\"nofollow\">http://fvcom.smast.umassd.edu/fvcom/</a></p>\n</blockquote>\n<p><strong>Princeton Ocean Model (POM)</strong></p>\n<blockquote>\n<p><em>\"POM is a sigma coordinate (terrain-following), free surface ocean\nmodel with embedded turbulence and wave sub-models, and wet-dry\ncapability.\"</em></p>\n<p>Description from <a href=\"http://www.ccpo.odu.edu/POMWEB/index.html\" rel=\"nofollow\">http://www.ccpo.odu.edu/POMWEB/index.html</a></p>\n</blockquote>\n<p><strong>Hybrid Coordinate Ocean Model (HYCOM)</strong></p>\n<blockquote>\n<p><em>\"The HYbrid Coordinate Ocean Model is a primitive equation ocean\ngeneral circulation model that evolved from the Miami\nIsopycnic-Coordinate Ocean Model (MICOM) developed by Rainer Bleck and\ncolleagues. Vertical coordinates in HYCOM remain isopycnic in the\nopen, stratified ocean. However, they smoothly transition to z\ncoordinates in the weakly-stratified upper-ocean mixed layer, to\nterrain-following sigma coordinate in shallow water regions, and back\nto level coordinates in very shallow water.\"</em></p>\n<p>Description from <a href=\"https://www.hycom.org/attachments/067_overview.pdf\" rel=\"nofollow\">https://www.hycom.org/attachments/067_overview.pdf</a></p>\n</blockquote>\n<p>Additionally, a generic <code>rectilinear</code> module has been created to support\nany model output whose coordinate system conforms to a rectilinear grid\nand whose depth coordinates reflect standard depths/z-levels, however\nthis module does not support vertical interpolation.</p>\n<h2>Features</h2>\n<ul>\n<li>Support for ROMS, FVCOM, POM, HYCOM model output</li>\n<li>Interpolate staggered horizontal coordinates (i.e. ROMS Arakawa-C\ngrid rho/eta/xi) to common coordinates before further processing</li>\n<li>Apply spatially-varying rotation angle to u/v current components to\nobtain true-north/true-east values before further processing</li>\n<li>Interpolate sigma (bathymetry-following) vertical coordinates to a\ngiven depth-below-surface, respecting the appropriate vertical\ntransformation, if any</li>\n<li>Given an approximate target grid resolution, generate a regular grid\ndefinition conforming to the model domain's bounding box (or\noptionally to a predefined set of bounding rectangles), and output\nregular grid definition to CF-compliant NetCDF</li>\n</ul>\n<h2>Model Considerations</h2>\n<ul>\n<li>\n<p>All modules in <code>thyme/models/</code> are written specifically for\nNOAA hydrodynamic ocean models and should be used with caution.\nThe modules were written by referencing NOS model metadata, NOS model\nguidance, and roms, pom, fvcom, and hycom model documentation.</p>\n</li>\n<li>\n<p>To develop a custom module to support a new model, use one of the existing modules\n(fvcom.py, hycom.py, pom.py, rectilinear.py, or roms,py) as a template, and place\nthe new python module file alongside the others under the <code>thyme/model/</code> folder</p>\n</li>\n<li>\n<p>Development of a custom module may be required to support:</p>\n<ul>\n<li>Model output options specific to your organization</li>\n<li>Different variable names and dimensions</li>\n<li>Different vertical coordinates</li>\n<li>Different variable masks</li>\n<li>Different vertical or time varying horizontal masks</li>\n<li>Different date and time format</li>\n<li>If the model has already been converted to a regular or rectilinear grid</li>\n<li>If the model output's vertical coordinate system uses standard depth levels versus sigma</li>\n</ul>\n</li>\n</ul>\n<h2>Index (Grid Definition) Files</h2>\n<p>In order to convert model output files to a regular grid, an index file\nmust be supplied at runtime. The purpose of the index file is to persist\ninformation that does not change between model runs in order to reduce\nthe overall processing time per cycle run. The information stored in the\nindex file includes the output grid definition and general metadata\nabout the model itself. Index files for FVCOM-based models with a hybrid\n(generalized) coordinate system additionally store interpolated vertical\ncoordinate values for each output grid cell.</p>\n<p>When generating a grid definition, the user has a choice between using\nthe full extent of the model's domain or supplying a shapefile\ncontaining one or more polygons defining subgrids\n(sub-regions/subdomains) to which the grid definition will conform. If\nno subgrid shapefile is specified, the resulting index file will define\na regular grid (with NoData mask) matching the full model domain\n(extent). Otherwise, if a subgrid shapefile is specified, the resulting\nindex file will define a regular grid (with NoData mask) matching the\nunified extent of all subgrid polygons that intersect the model domain,\nalong with information identifying the grid cell ranges that correspond\nwith each subgrid. Note that when supplying a subgrid shapefile, all\nsubgrid polygons must be rectangular, congruent with each other, and\nadjacent to one another.</p>\n<p>A subgrid index is intended to be used to subset the model output into\nsmaller geographic areas (i.e. tiles), which in turn results in smaller\noutput file sizes. Optionally, for a subgrid index file, the user may\nspecify the name of an attribute field within the subgrid shapefile that\nuniquely identifies each subgrid (tile). If no field is specified, each\npolygon's FID value is used as the identifier. This identifier can be\nused to construct unique filenames.</p>\n<p>Additionally, a land mask polygon shapefile can be supplied when\ngenerating an index file. If supplied, any output grid cells whose\ncentroid intersects a land polygon will be masked in the final grid\ndefinition.</p>\n<p>One index file must be created per ocean forecast system for each\ncombination of target resolution and extent (whether using the model's\nfull domain extent or subgrid definition).</p>\n<h2>When to Generate a New Index File</h2>\n<p>Once a model index file is created, it can be reused indefinitely for\nthat model/resolution/extent/land mask until any of those properties\nchange. For example, if an FVCOM-based model has a hybrid (generalized)\nvertical coordinate system that is modified at some point (i.e., sigma\nvalues are changed), any associated index files will need to be\nregenerated using a new model output file in the updated format.</p>\n<p>Generally, a new index file is required:</p>\n<ul>\n<li>For each new model</li>\n<li>For each desired output grid resolution</li>\n<li>For each desired set of subgrids</li>\n<li>If the subgrid polygons change</li>\n<li>If the subgrid attribute identifier changes</li>\n<li>If the land mask shapefile changes</li>\n<li>If the underlining model changes (e.g., new geographic extent,\nchange to FVCOM sigma coordinates, etc.)</li>\n</ul>\n<h2>Requirements</h2>\n<p>This codebase is written for Python 3 and relies on the following python\npackages:</p>\n<ul>\n<li>gdal</li>\n<li>netCDF4</li>\n<li>numpy</li>\n<li>scipy</li>\n<li>shapely</li>\n</ul>\n<h2>Installation</h2>\n<p>The GDAL Python bindings used by this package require system libraries to be\npresent, so it usually can't just be installed using <code>pip install gdal</code>.\nWe recommend installing GDAL either through a package manager (e.g.\n<code>conda</code>, <code>apt</code>, <code>yum</code>, <code>pacman</code>) or by compiling from scratch.\n<a href=\"https://docs.conda.io/en/latest/miniconda.html\" rel=\"nofollow\">Miniconda</a> is probably\nthe easiest method.</p>\n<p>Once <code>gdal</code> has been installed, thyme can be installed using <code>pip</code>:</p>\n<pre>pip install thyme\n</pre>\n<h2>Example Usage</h2>\n<p>To generate a new index file for an FVCOM-based model using the default\ngrid extent, a ~500 meter target resolution, and a shoreline shapefile\ndefining land areas to be masked:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">thyme.model</span> <span class=\"kn\">import</span> <span class=\"n\">fvcom</span>\n<span class=\"n\">native_model_file</span> <span class=\"o\">=</span> <span class=\"n\">fvcom</span><span class=\"o\">.</span><span class=\"n\">FVCOMFile</span><span class=\"p\">(</span><span class=\"s1\">'/path/to/existing_fvcom_file.nc'</span><span class=\"p\">)</span>\n<span class=\"n\">model_index_file</span> <span class=\"o\">=</span> <span class=\"n\">fvcom</span><span class=\"o\">.</span><span class=\"n\">FVCOMIndexFile</span><span class=\"p\">(</span><span class=\"s1\">'/path/to/new_index_file.nc'</span><span class=\"p\">)</span>\n<span class=\"k\">try</span><span class=\"p\">:</span>\n  <span class=\"n\">native_model_file</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">()</span>\n  <span class=\"n\">model_index_file</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">()</span>\n  <span class=\"n\">model_index_file</span><span class=\"o\">.</span><span class=\"n\">init_nc</span><span class=\"p\">(</span><span class=\"n\">native_model_file</span><span class=\"p\">,</span> <span class=\"mi\">500</span><span class=\"p\">,</span> <span class=\"s1\">'my_fvcom_model'</span><span class=\"p\">,</span> <span class=\"s1\">'/path/to/shoreline_shapefile.shp'</span><span class=\"p\">)</span>\n<span class=\"k\">finally</span><span class=\"p\">:</span>\n  <span class=\"n\">model_index_file</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n  <span class=\"n\">native_model_file</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n</pre>\n<p>To generate a new index file for a ROMS-based model using a subgrid\nshapefile (with fieldname 'id' used to identify subgrid areas) and a\n~300m target resolution (with no shoreline mask shapefile specified):</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">thyme.model</span> <span class=\"kn\">import</span> <span class=\"n\">roms</span>\n<span class=\"n\">native_model_file</span> <span class=\"o\">=</span> <span class=\"n\">roms</span><span class=\"o\">.</span><span class=\"n\">ROMSFile</span><span class=\"p\">(</span><span class=\"s1\">'/path/to/existing_roms_file.nc'</span><span class=\"p\">)</span>\n<span class=\"n\">model_index_file</span> <span class=\"o\">=</span> <span class=\"n\">roms</span><span class=\"o\">.</span><span class=\"n\">ROMSIndexFile</span><span class=\"p\">(</span><span class=\"s1\">'/path/to/new_index_file.nc'</span><span class=\"p\">)</span>\n<span class=\"k\">try</span><span class=\"p\">:</span>\n  <span class=\"n\">native_model_file</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">()</span>\n  <span class=\"n\">model_index_file</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">()</span>\n  <span class=\"n\">model_index_file</span><span class=\"o\">.</span><span class=\"n\">init_nc</span><span class=\"p\">(</span><span class=\"n\">native_model_file</span><span class=\"p\">,</span> <span class=\"mi\">300</span><span class=\"p\">,</span> <span class=\"s1\">'my_roms_model'</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"s1\">'/path/to/subgrid_shapefile.shp'</span><span class=\"p\">,</span> <span class=\"s1\">'subgrid_id_fieldname'</span><span class=\"p\">)</span>\n<span class=\"k\">finally</span><span class=\"p\">:</span>\n  <span class=\"n\">model_index_file</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n  <span class=\"n\">native_model_file</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n</pre>\n<p>To interpolate u/v current components from a ROMS-based model to a\nregular grid defined in an existing model index file, at a depth of 4.5\nmeters below surface, for time index 0, and store the resulting u/v\nvalues in two <code>numpy.ma.masked_array</code> objects:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">thyme.model</span> <span class=\"kn\">import</span> <span class=\"n\">roms</span>\n<span class=\"n\">native_model_file</span> <span class=\"o\">=</span> <span class=\"n\">roms</span><span class=\"o\">.</span><span class=\"n\">ROMSFile</span><span class=\"p\">(</span><span class=\"s1\">'/path/to/existing_roms_file.nc'</span><span class=\"p\">)</span>\n<span class=\"n\">model_index_file</span> <span class=\"o\">=</span> <span class=\"n\">roms</span><span class=\"o\">.</span><span class=\"n\">ROMSIndexFile</span><span class=\"p\">(</span><span class=\"s1\">'/path/to/existing_index_file.nc'</span><span class=\"p\">)</span>\n<span class=\"k\">try</span><span class=\"p\">:</span>\n  <span class=\"n\">native_model_file</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">()</span>\n  <span class=\"n\">model_index_file</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">()</span>\n  <span class=\"p\">(</span><span class=\"n\">u_with_mask</span><span class=\"p\">,</span> <span class=\"n\">v_with_mask</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">native_model_file</span><span class=\"o\">.</span><span class=\"n\">uv_to_regular_grid</span><span class=\"p\">(</span><span class=\"n\">model_index_file</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mf\">4.5</span><span class=\"p\">)</span>\n  <span class=\"c1\"># u_with_mask and v_with_mask now contain 2D numpy masked arrays</span>\n<span class=\"k\">finally</span><span class=\"p\">:</span>\n  <span class=\"n\">model_index_file</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n  <span class=\"n\">native_model_file</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n</pre>\n<h2>Running Tests</h2>\n<p>This project uses <a href=\"https://docs.pytest.org\" rel=\"nofollow\">pytest</a> for unit testing.</p>\n<p>To run the test suite:</p>\n<pre>pip install pytest\npytest -vv\n</pre>\n<h2>Authors</h2>\n<ul>\n<li>Erin Nagel (UCAR), <a href=\"mailto:erin.nagel@noaa.gov\">erin.nagel@noaa.gov</a></li>\n<li>Jason Greenlaw (ERT), <a href=\"mailto:jason.greenlaw@noaa.gov\">jason.greenlaw@noaa.gov</a></li>\n</ul>\n<h2>License</h2>\n<p>This work, as a whole, is licensed under the BSD 2-Clause License (see\n<a href=\"LICENSE\" rel=\"nofollow\">LICENSE</a>), however it contains major contributions from the\nU.S. National Oceanic and Atmospheric Administration (NOAA), 2017 -\n2019, which are individually dedicated to the public domain.</p>\n<h2>Disclaimer</h2>\n<p>This repository is a scientific product and is not official\ncommunication of the National Oceanic and Atmospheric Administration, or\nthe United States Department of Commerce. All NOAA GitHub project code\nis provided on an \"as is\" basis and the user assumes responsibility\nfor its use. Any claims against the Department of Commerce or Department\nof Commerce bureaus stemming from the use of this GitHub project will be\ngoverned by all applicable Federal law. Any reference to specific\ncommercial products, processes, or services by service mark, trademark,\nmanufacturer, or otherwise, does not constitute or imply their\nendorsement, recommendation or favoring by the Department of Commerce.\nThe Department of Commerce seal and logo, or the seal and logo of a DOC\nbureau, shall not be used in any manner to imply endorsement of any\ncommercial product or activity by DOC or the United States Government.</p>\n<h2>Acknowledgments</h2>\n<p>This software has been developed by the National Oceanic and Atmospheric\nAdministration (NOAA)/National Ocean Service (NOS)/Office of Coast\nSurvey (OCS)/Coast Survey Development Lab (CSDL) for use by the\nscientific and oceanographic communities.</p>\n<p>CSDL wishes to thank the following entities for their assistance:</p>\n<ul>\n<li>NOAA/NOS/Center for Operational Oceanographic Products and Services\n(CO-OPS)</li>\n<li>Canadian Hydrographic Service (CHS)</li>\n<li>Teledyne CARIS</li>\n</ul>\n\n          </div>"}, "last_serial": 6961606, "releases": {"0.3.3": [{"comment_text": "", "digests": {"md5": "036e2189d3813ff66e71c8d11f8468a6", "sha256": "812943ca273bc74020da8828d0d32e66661993c0c4daf145965aa51c2e0e3a64"}, "downloads": -1, "filename": "thyme-0.3.3-py3-none-any.whl", "has_sig": false, "md5_digest": "036e2189d3813ff66e71c8d11f8468a6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 40084, "upload_time": "2019-07-29T21:27:44", "upload_time_iso_8601": "2019-07-29T21:27:44.350406Z", "url": "https://files.pythonhosted.org/packages/fe/1c/724d5df1b443bfeb3c0a66533140ad76f9e252811245b687a37eb07558b7/thyme-0.3.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8c24d5ec13fc020bf344392c797ab636", "sha256": "503f732b9b23d200199fac191c5a9cf5cb326e1503ad91bb8fbc5b0b0f99c1d6"}, "downloads": -1, "filename": "thyme-0.3.3.tar.gz", "has_sig": false, "md5_digest": "8c24d5ec13fc020bf344392c797ab636", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 26642, "upload_time": "2019-07-29T21:27:46", "upload_time_iso_8601": "2019-07-29T21:27:46.439926Z", "url": "https://files.pythonhosted.org/packages/9b/22/d70121e6c9daed3b7ee905f1c4fd9353787ffe0288b122d5b7492199060c/thyme-0.3.3.tar.gz", "yanked": false}], "0.3.4": [{"comment_text": "", "digests": {"md5": "b0d0db88e7bc8f62b24f2e9f66e0ac94", "sha256": "e3950aff820bf52dcc1982d729779ec1963f9b2947fc019b6aebcf93ae31b0e4"}, "downloads": -1, "filename": "thyme-0.3.4-py3-none-any.whl", "has_sig": false, "md5_digest": "b0d0db88e7bc8f62b24f2e9f66e0ac94", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 40112, "upload_time": "2019-07-29T22:13:28", "upload_time_iso_8601": "2019-07-29T22:13:28.390039Z", "url": "https://files.pythonhosted.org/packages/42/5b/79c25054e877337108076e47304e17ade1301d1fc6468a51996e02f6c79c/thyme-0.3.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5260a1a0bbb7d49b8d10e7545c3d8828", "sha256": "2fe90b656e74742854ad643fca8def256b7115da845e979cc6aaac143a5034bc"}, "downloads": -1, "filename": "thyme-0.3.4.tar.gz", "has_sig": false, "md5_digest": "5260a1a0bbb7d49b8d10e7545c3d8828", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 26687, "upload_time": "2019-07-29T22:13:29", "upload_time_iso_8601": "2019-07-29T22:13:29.964228Z", "url": "https://files.pythonhosted.org/packages/7c/c0/d3fe5d05741c5110f7a5917781342970f9483a2ae9bdbf4bcd71fc3a94df/thyme-0.3.4.tar.gz", "yanked": false}], "0.4.9": [{"comment_text": "", "digests": {"md5": "9e8b592ded82742a6ee1f11f06225277", "sha256": "45f65da76c181ae901fad127b42f7aeca99956478e81b55b56940169a98b0921"}, "downloads": -1, "filename": "thyme-0.4.9.tar.gz", "has_sig": false, "md5_digest": "9e8b592ded82742a6ee1f11f06225277", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 49826, "upload_time": "2020-01-27T14:10:14", "upload_time_iso_8601": "2020-01-27T14:10:14.617422Z", "url": "https://files.pythonhosted.org/packages/21/22/1d35e292c0f29aef297d4760dd5d9687a78395be9e572b64c4b0317653dd/thyme-0.4.9.tar.gz", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "0a5e611876f4d552059e4cf34cf9ec13", "sha256": "b47b659cc9baf2a750ea3aaf559b68ba5c074a88d2135a7eb36586a2877dd80d"}, "downloads": -1, "filename": "thyme-0.5.0-py3.6.egg", "has_sig": false, "md5_digest": "0a5e611876f4d552059e4cf34cf9ec13", "packagetype": "bdist_egg", "python_version": "3.6", "requires_python": null, "size": 82233, "upload_time": "2020-01-27T14:27:35", "upload_time_iso_8601": "2020-01-27T14:27:35.427223Z", "url": "https://files.pythonhosted.org/packages/2d/80/265ef7f76021b11fed515d6b6980675a33440c17ce23d338ba8380df95d7/thyme-0.5.0-py3.6.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "7c94ad8acb75b00c771cbdbca8d2ad7c", "sha256": "bd514e28caeb6f446eb2de57bb5a2095223955a6f50ae59e703b449b0deb5226"}, "downloads": -1, "filename": "thyme-0.5.0-py3.7.egg", "has_sig": false, "md5_digest": "7c94ad8acb75b00c771cbdbca8d2ad7c", "packagetype": "bdist_egg", "python_version": "3.7", "requires_python": null, "size": 82346, "upload_time": "2020-01-27T14:28:06", "upload_time_iso_8601": "2020-01-27T14:28:06.605340Z", "url": "https://files.pythonhosted.org/packages/4b/be/dad0be900664bb8a8e9ca305a1a9a4d05b5a15345068798d4a176f440952/thyme-0.5.0-py3.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "84eb63f08fdb86bd4b003770649784ae", "sha256": "4ecd2a2f80145044b1603ceff6e1e321b9c387b9fd6abe7358c83a61d55d7120"}, "downloads": -1, "filename": "thyme-0.5.0.tar.gz", "has_sig": false, "md5_digest": "84eb63f08fdb86bd4b003770649784ae", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 49848, "upload_time": "2020-01-27T14:27:36", "upload_time_iso_8601": "2020-01-27T14:27:36.743344Z", "url": "https://files.pythonhosted.org/packages/8d/8b/a7c46441f01097df550f0c372e7d2e663763396e8cb8a417cc2b0cb7a552/thyme-0.5.0.tar.gz", "yanked": false}], "0.5.1": [{"comment_text": "", "digests": {"md5": "f56c63bef10046e01bf11049deda656b", "sha256": "89cf30d2687bfa11c80428dadcd88dbc64bf597aa12ff7b138f01c782febbc49"}, "downloads": -1, "filename": "thyme-0.5.1-py3.6.egg", "has_sig": false, "md5_digest": "f56c63bef10046e01bf11049deda656b", "packagetype": "bdist_egg", "python_version": "3.6", "requires_python": null, "size": 82143, "upload_time": "2020-02-12T20:44:15", "upload_time_iso_8601": "2020-02-12T20:44:15.362801Z", "url": "https://files.pythonhosted.org/packages/83/3c/d6a4214da8ba7a538ef60390907c0057d3f05235b25851ad66c7c03a9fb0/thyme-0.5.1-py3.6.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "bae0cd4f717922cc431c2a4737e5f8b1", "sha256": "66be99e83678a5e95606c240c510d313395c2ae663f286316be7134e2ed11504"}, "downloads": -1, "filename": "thyme-0.5.1-py3.7.egg", "has_sig": false, "md5_digest": "bae0cd4f717922cc431c2a4737e5f8b1", "packagetype": "bdist_egg", "python_version": "3.7", "requires_python": null, "size": 82262, "upload_time": "2020-02-12T20:44:15", "upload_time_iso_8601": "2020-02-12T20:44:15.535434Z", "url": "https://files.pythonhosted.org/packages/bb/bd/65d43920deb0dda5ee403d75927199551fc0cba5833cfe7c01bd078b0d0d/thyme-0.5.1-py3.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "2cc79c20822173f6830996ad015d4e80", "sha256": "306b15233dc311df6a5356feda7ce984d56e2677326080aa943a095886845b96"}, "downloads": -1, "filename": "thyme-0.5.1.tar.gz", "has_sig": false, "md5_digest": "2cc79c20822173f6830996ad015d4e80", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 49795, "upload_time": "2020-02-12T20:44:16", "upload_time_iso_8601": "2020-02-12T20:44:16.552713Z", "url": "https://files.pythonhosted.org/packages/23/f1/352151c9b838900fc0ecfd4c2c129be1d82474647d369b291b0faff1da81/thyme-0.5.1.tar.gz", "yanked": false}], "0.6.0": [{"comment_text": "", "digests": {"md5": "928d2ffae76cbeba97fbcc057d4b540c", "sha256": "f7405e3467618c06dcef20ac3f64aae5d453dec51c70b2fcd16c0311b8e55786"}, "downloads": -1, "filename": "thyme-0.6.0-py3.6.egg", "has_sig": false, "md5_digest": "928d2ffae76cbeba97fbcc057d4b540c", "packagetype": "bdist_egg", "python_version": "3.6", "requires_python": null, "size": 82429, "upload_time": "2020-04-06T13:23:13", "upload_time_iso_8601": "2020-04-06T13:23:13.838012Z", "url": "https://files.pythonhosted.org/packages/92/a9/2ca7c3b907ea84680b7c41d6e12db1a233f01d06365a8c67bab2b398d836/thyme-0.6.0-py3.6.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "5f9fb8d15947286376158180e388e085", "sha256": "269f7a000e3af6abb23d8e01cf5629ceea0884dbd05ab8d3a08991af89a9cd50"}, "downloads": -1, "filename": "thyme-0.6.0-py3.7.egg", "has_sig": false, "md5_digest": "5f9fb8d15947286376158180e388e085", "packagetype": "bdist_egg", "python_version": "3.7", "requires_python": null, "size": 82552, "upload_time": "2020-04-06T13:23:22", "upload_time_iso_8601": "2020-04-06T13:23:22.842798Z", "url": "https://files.pythonhosted.org/packages/0c/b5/59a265bb3eec28f27cb3bf0a815fcffc50bab481732ca249f010ad645fa8/thyme-0.6.0-py3.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "0e4ad43e9941b59ae0db393c9ed68ab8", "sha256": "09e3ff373da34077600cf2c00132d1dd9724142cec20b2c11f7df7570876731c"}, "downloads": -1, "filename": "thyme-0.6.0.tar.gz", "has_sig": false, "md5_digest": "0e4ad43e9941b59ae0db393c9ed68ab8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 50158, "upload_time": "2020-04-06T13:23:14", "upload_time_iso_8601": "2020-04-06T13:23:14.876620Z", "url": "https://files.pythonhosted.org/packages/ec/e6/fd0e7ffa44570d2265092c2dded6689bd919f26ef2f02409c12700ad2b7f/thyme-0.6.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "928d2ffae76cbeba97fbcc057d4b540c", "sha256": "f7405e3467618c06dcef20ac3f64aae5d453dec51c70b2fcd16c0311b8e55786"}, "downloads": -1, "filename": "thyme-0.6.0-py3.6.egg", "has_sig": false, "md5_digest": "928d2ffae76cbeba97fbcc057d4b540c", "packagetype": "bdist_egg", "python_version": "3.6", "requires_python": null, "size": 82429, "upload_time": "2020-04-06T13:23:13", "upload_time_iso_8601": "2020-04-06T13:23:13.838012Z", "url": "https://files.pythonhosted.org/packages/92/a9/2ca7c3b907ea84680b7c41d6e12db1a233f01d06365a8c67bab2b398d836/thyme-0.6.0-py3.6.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "5f9fb8d15947286376158180e388e085", "sha256": "269f7a000e3af6abb23d8e01cf5629ceea0884dbd05ab8d3a08991af89a9cd50"}, "downloads": -1, "filename": "thyme-0.6.0-py3.7.egg", "has_sig": false, "md5_digest": "5f9fb8d15947286376158180e388e085", "packagetype": "bdist_egg", "python_version": "3.7", "requires_python": null, "size": 82552, "upload_time": "2020-04-06T13:23:22", "upload_time_iso_8601": "2020-04-06T13:23:22.842798Z", "url": "https://files.pythonhosted.org/packages/0c/b5/59a265bb3eec28f27cb3bf0a815fcffc50bab481732ca249f010ad645fa8/thyme-0.6.0-py3.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "0e4ad43e9941b59ae0db393c9ed68ab8", "sha256": "09e3ff373da34077600cf2c00132d1dd9724142cec20b2c11f7df7570876731c"}, "downloads": -1, "filename": "thyme-0.6.0.tar.gz", "has_sig": false, "md5_digest": "0e4ad43e9941b59ae0db393c9ed68ab8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 50158, "upload_time": "2020-04-06T13:23:14", "upload_time_iso_8601": "2020-04-06T13:23:14.876620Z", "url": "https://files.pythonhosted.org/packages/ec/e6/fd0e7ffa44570d2265092c2dded6689bd919f26ef2f02409c12700ad2b7f/thyme-0.6.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:53:34 2020"}