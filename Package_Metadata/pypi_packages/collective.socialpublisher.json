{"info": {"author": "Simone Orsi [simahawk]", "author_email": "simahawk@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Framework :: Plone", "Framework :: Plone :: 4.2", "Programming Language :: Python"], "description": "Introduction\r\n============\r\n\r\nProvides a viewlet (and under-the-hood machinery) for managers that allows to publish contents to social networks (only twitter ATM). Social publication can be automated by enabling it per-content.\r\n\r\nTo enable the viewlet just mark the content-type you want with `collective.socialpublisher.interfaces.IPublishable`. You can do it from ZMI or trough ZMCL::\r\n\r\n    <class class=\"Products.ATContentTypes.content.event.ATEvent\">\r\n        <implements interface=\"collectinve.socialpublisher.interfaces.IPublishable\" />\r\n    </class>\r\n\r\n    NOTE: this is already done by the package in this alpha stage.\r\n\r\nTwitter accounts management is done by `collective.twitter.accounts`.\r\n\r\nYou can provide a publisher by registeriing an utility providing `collective.socialpublisher.interfaces.ISocialPublisherUtility`. See `collective.socialpublisher.utility` for details.\r\n\r\nTo enable auto-publishing you have to enable it per-content (waiting for global configuration) and you have to create a cron the calls `@@social-auto-publish`. You can do it using `Products.cron4plone` or trough buildout like this::\r\n\r\n    [instance]\r\n    ...\r\n    zope-conf-additional =\r\n      <clock-server>\r\n          method /plonesite/@@social-auto-publish\r\n          period 1000\r\n          user admin\r\n          password admin\r\n      </clock-server>\r\n\r\nSee also http://collective-docs.readthedocs.org/en/latest/misc/asyncronoustasks.html.\r\n\r\n\r\nTested on\r\n=========\r\n\r\nPlone 4.1 + 4.2rc1\r\n\r\nPublish manager\r\n===============\r\n\r\nLet's create an Event\r\n\r\n>>> from plone.app.testing import setRoles\r\n>>> from plone.app.testing import TEST_USER_ID\r\n>>> portal = layer['portal']\r\n>>> setRoles(portal, TEST_USER_ID, ['Manager'])\r\n>>> evid = portal.invokeFactory('Event', 'event')\r\n>>> event = portal[evid]\r\n\r\nand check that is enabled for publishing\r\n\r\n>>> from collective.socialpublisher.interfaces import IPublishable\r\n>>> IPublishable.providedBy(event)\r\nTrue\r\n\r\nget the manager\r\n\r\n>>> from collective.socialpublisher.interfaces import IPublishStorageManager\r\n>>> manager = IPublishStorageManager(event, None)\r\n>>> manager is None\r\nFalse\r\n\r\nstorage must be a PersistentDict\r\n\r\n>>> from persistent.dict import PersistentDict\r\n>>> isinstance(manager.storage,PersistentDict)\r\nTrue\r\n\r\nand accounts must be an empty dict and text an empty string.\r\n\r\n>>> manager.get_accounts()\r\n{}\r\n>>> manager.get_text()\r\n''\r\n\r\nWe can save an account for a given publisher\r\n\r\n>>> publisher = 'twitter'\r\n>>> account_id = 'simahawk'\r\n>>> manager.set_account(publisher,account_id)\r\n>>> manager.get_account(publisher)\r\n'simahawk'\r\n>>> manager.get_accounts()\r\n{'twitter': 'simahawk'}\r\n\r\nlet's add another publisher/account.\r\n\r\n>>> publisher = 'facebook'\r\n>>> account_id = 'simahawkfb'\r\n>>> manager.set_account(publisher,account_id)\r\n>>> manager.get_account(publisher)\r\n'simahawkfb'\r\n>>> manager.get_accounts()\r\n{'twitter': 'simahawk', 'facebook': 'simahawkfb'}\r\n\r\nWe can also save the text to be published\r\n\r\n>>> manager.set_text('foo bar')\r\n>>> manager.get_text()\r\n'foo bar'\r\n\r\nThen we can hard reset the settings like this:\r\n\r\n>>> manager._reset_storage()\r\n>>> manager.get_accounts()\r\n{}\r\n>>> manager.get_text()\r\n''\r\n\r\nTODO\r\n====\r\n\r\n- tests + docs\r\n- add support for linkedin and facebook\r\n- make query for auto-publish content dynamic/configurable\r\n- ...\r\n\r\nChangelog\r\n=========\r\n\r\n1.0a3\r\n---------------------\r\n\r\n- [add] test buildout.cfg\r\n- [imp] improved tests\r\n- [imp] improved docs\r\n- [add] global config using p.a.registry + controlpanel\r\n- [imp] you can now turn off auto-publish globally\r\n\r\n\r\n1.0a2\r\n---------------------\r\n\r\n- [fix] old twitter import\r\n- [imp] 'update' button for saving settings without publishing\r\n- [imp] 'one-shot-text' a flag for changing the text only for the current publishing without overwriting the stored one\r\n- [imp] if cron4plone is present display any available cron schedule\r\n- [imp] improved styles a bit\r\n\r\n\r\n1.0a1\r\n---------------------\r\n\r\n- Initial release\r\n\r\nCredits\r\n=======\r\n\r\nThis product was developed by Domsense.\r\n\r\n.. image:: http://domsense.com/logo-txt.png\r\n   :alt: Domsense Website\r\n   :target: http://www.domsense.com/", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/simahawk/collective.socialpublisher", "keywords": "", "license": "GPL", "maintainer": "", "maintainer_email": "", "name": "collective.socialpublisher", "package_url": "https://pypi.org/project/collective.socialpublisher/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/collective.socialpublisher/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/simahawk/collective.socialpublisher"}, "release_url": "https://pypi.org/project/collective.socialpublisher/1.0a3/", "requires_dist": null, "requires_python": null, "summary": "Manage and automate social publishing on Plone sites", "version": "1.0a3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"introduction\">\n<h2>Introduction</h2>\n<p>Provides a viewlet (and under-the-hood machinery) for managers that allows to publish contents to social networks (only twitter ATM). Social publication can be automated by enabling it per-content.</p>\n<p>To enable the viewlet just mark the content-type you want with <cite>collective.socialpublisher.interfaces.IPublishable</cite>. You can do it from ZMI or trough ZMCL:</p>\n<pre>&lt;class class=\"Products.ATContentTypes.content.event.ATEvent\"&gt;\n    &lt;implements interface=\"collectinve.socialpublisher.interfaces.IPublishable\" /&gt;\n&lt;/class&gt;\n\nNOTE: this is already done by the package in this alpha stage.\n</pre>\n<p>Twitter accounts management is done by <cite>collective.twitter.accounts</cite>.</p>\n<p>You can provide a publisher by registeriing an utility providing <cite>collective.socialpublisher.interfaces.ISocialPublisherUtility</cite>. See <cite>collective.socialpublisher.utility</cite> for details.</p>\n<p>To enable auto-publishing you have to enable it per-content (waiting for global configuration) and you have to create a cron the calls <cite>@@social-auto-publish</cite>. You can do it using <cite>Products.cron4plone</cite> or trough buildout like this:</p>\n<pre>[instance]\n...\nzope-conf-additional =\n  &lt;clock-server&gt;\n      method /plonesite/@@social-auto-publish\n      period 1000\n      user admin\n      password admin\n  &lt;/clock-server&gt;\n</pre>\n<p>See also <a href=\"http://collective-docs.readthedocs.org/en/latest/misc/asyncronoustasks.html\" rel=\"nofollow\">http://collective-docs.readthedocs.org/en/latest/misc/asyncronoustasks.html</a>.</p>\n</div>\n<div id=\"tested-on\">\n<h2>Tested on</h2>\n<p>Plone 4.1 + 4.2rc1</p>\n</div>\n<div id=\"publish-manager\">\n<h2>Publish manager</h2>\n<p>Let\u2019s create an Event</p>\n<pre>&gt;&gt;&gt; from plone.app.testing import setRoles\n&gt;&gt;&gt; from plone.app.testing import TEST_USER_ID\n&gt;&gt;&gt; portal = layer['portal']\n&gt;&gt;&gt; setRoles(portal, TEST_USER_ID, ['Manager'])\n&gt;&gt;&gt; evid = portal.invokeFactory('Event', 'event')\n&gt;&gt;&gt; event = portal[evid]\n</pre>\n<p>and check that is enabled for publishing</p>\n<pre>&gt;&gt;&gt; from collective.socialpublisher.interfaces import IPublishable\n&gt;&gt;&gt; IPublishable.providedBy(event)\nTrue\n</pre>\n<p>get the manager</p>\n<pre>&gt;&gt;&gt; from collective.socialpublisher.interfaces import IPublishStorageManager\n&gt;&gt;&gt; manager = IPublishStorageManager(event, None)\n&gt;&gt;&gt; manager is None\nFalse\n</pre>\n<p>storage must be a PersistentDict</p>\n<pre>&gt;&gt;&gt; from persistent.dict import PersistentDict\n&gt;&gt;&gt; isinstance(manager.storage,PersistentDict)\nTrue\n</pre>\n<p>and accounts must be an empty dict and text an empty string.</p>\n<pre>&gt;&gt;&gt; manager.get_accounts()\n{}\n&gt;&gt;&gt; manager.get_text()\n''\n</pre>\n<p>We can save an account for a given publisher</p>\n<pre>&gt;&gt;&gt; publisher = 'twitter'\n&gt;&gt;&gt; account_id = 'simahawk'\n&gt;&gt;&gt; manager.set_account(publisher,account_id)\n&gt;&gt;&gt; manager.get_account(publisher)\n'simahawk'\n&gt;&gt;&gt; manager.get_accounts()\n{'twitter': 'simahawk'}\n</pre>\n<p>let\u2019s add another publisher/account.</p>\n<pre>&gt;&gt;&gt; publisher = 'facebook'\n&gt;&gt;&gt; account_id = 'simahawkfb'\n&gt;&gt;&gt; manager.set_account(publisher,account_id)\n&gt;&gt;&gt; manager.get_account(publisher)\n'simahawkfb'\n&gt;&gt;&gt; manager.get_accounts()\n{'twitter': 'simahawk', 'facebook': 'simahawkfb'}\n</pre>\n<p>We can also save the text to be published</p>\n<pre>&gt;&gt;&gt; manager.set_text('foo bar')\n&gt;&gt;&gt; manager.get_text()\n'foo bar'\n</pre>\n<p>Then we can hard reset the settings like this:</p>\n<pre>&gt;&gt;&gt; manager._reset_storage()\n&gt;&gt;&gt; manager.get_accounts()\n{}\n&gt;&gt;&gt; manager.get_text()\n''\n</pre>\n</div>\n<div id=\"todo\">\n<h2>TODO</h2>\n<ul>\n<li>tests + docs</li>\n<li>add support for linkedin and facebook</li>\n<li>make query for auto-publish content dynamic/configurable</li>\n<li>\u2026</li>\n</ul>\n</div>\n<div id=\"changelog\">\n<h2>Changelog</h2>\n<div id=\"a3\">\n<h3>1.0a3</h3>\n<ul>\n<li>[add] test buildout.cfg</li>\n<li>[imp] improved tests</li>\n<li>[imp] improved docs</li>\n<li>[add] global config using p.a.registry + controlpanel</li>\n<li>[imp] you can now turn off auto-publish globally</li>\n</ul>\n</div>\n<div id=\"a2\">\n<h3>1.0a2</h3>\n<ul>\n<li>[fix] old twitter import</li>\n<li>[imp] \u2018update\u2019 button for saving settings without publishing</li>\n<li>[imp] \u2018one-shot-text\u2019 a flag for changing the text only for the current publishing without overwriting the stored one</li>\n<li>[imp] if cron4plone is present display any available cron schedule</li>\n<li>[imp] improved styles a bit</li>\n</ul>\n</div>\n<div id=\"a1\">\n<h3>1.0a1</h3>\n<ul>\n<li>Initial release</li>\n</ul>\n</div>\n</div>\n<div id=\"credits\">\n<h2>Credits</h2>\n<p>This product was developed by Domsense.</p>\n<a href=\"http://www.domsense.com/\" rel=\"nofollow\"><img alt=\"Domsense Website\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a923c8bd1fae2b3570d12480e33d8ed26d251955/687474703a2f2f646f6d73656e73652e636f6d2f6c6f676f2d7478742e706e67\"></a>\n</div>\n\n          </div>"}, "last_serial": 788212, "releases": {"1.0a1": [{"comment_text": "", "digests": {"md5": "dca4ecc660a43184dfc9d2477157b1ec", "sha256": "f5ce50629b22115babaf58637be2298ee40efb07a2b7af20afc7e319bd89b829"}, "downloads": -1, "filename": "collective.socialpublisher-1.0a1.zip", "has_sig": false, "md5_digest": "dca4ecc660a43184dfc9d2477157b1ec", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30678, "upload_time": "2012-05-22T16:07:57", "upload_time_iso_8601": "2012-05-22T16:07:57.561456Z", "url": "https://files.pythonhosted.org/packages/1b/ea/b492ec9323b083f8a3cc1554cd903cc71edb823d5954e01f73b90177b9bd/collective.socialpublisher-1.0a1.zip", "yanked": false}], "1.0a2": [{"comment_text": "", "digests": {"md5": "ff348a1e73921e4114eaa246a2944043", "sha256": "8226b28cdf469cb4123ddc72acffb8b755e52397dd33dd9104ac22ea2ea130d5"}, "downloads": -1, "filename": "collective.socialpublisher-1.0a2.zip", "has_sig": false, "md5_digest": "ff348a1e73921e4114eaa246a2944043", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 32066, "upload_time": "2012-05-23T09:23:32", "upload_time_iso_8601": "2012-05-23T09:23:32.198724Z", "url": "https://files.pythonhosted.org/packages/4b/33/50dde10eff7955c4daff1b28cc7ce750fb761be337a67c310553b2ff956f/collective.socialpublisher-1.0a2.zip", "yanked": false}], "1.0a3": [{"comment_text": "", "digests": {"md5": "127845855219f2bb56736de4d2ce5a5f", "sha256": "dbe82c119024aa9e4acca9d42690fd2560afa162e1f7cb79d14d998fb61fd39f"}, "downloads": -1, "filename": "collective.socialpublisher-1.0a3.zip", "has_sig": false, "md5_digest": "127845855219f2bb56736de4d2ce5a5f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 40502, "upload_time": "2012-06-01T16:58:32", "upload_time_iso_8601": "2012-06-01T16:58:32.808894Z", "url": "https://files.pythonhosted.org/packages/f6/3c/398d6112ff30cdcadb1fdec171df9f0c17dfb0ab66bae93477883bf324d1/collective.socialpublisher-1.0a3.zip", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "127845855219f2bb56736de4d2ce5a5f", "sha256": "dbe82c119024aa9e4acca9d42690fd2560afa162e1f7cb79d14d998fb61fd39f"}, "downloads": -1, "filename": "collective.socialpublisher-1.0a3.zip", "has_sig": false, "md5_digest": "127845855219f2bb56736de4d2ce5a5f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 40502, "upload_time": "2012-06-01T16:58:32", "upload_time_iso_8601": "2012-06-01T16:58:32.808894Z", "url": "https://files.pythonhosted.org/packages/f6/3c/398d6112ff30cdcadb1fdec171df9f0c17dfb0ab66bae93477883bf324d1/collective.socialpublisher-1.0a3.zip", "yanked": false}], "timestamp": "Fri May  8 00:44:49 2020"}