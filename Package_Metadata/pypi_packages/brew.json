{"info": {"author": "Dayvid Victor <victor.dvro@gmail.com>, Thyago Porpino <thyago.porpino@gmail.com>", "author_email": "brew-python-devs@googlegroups.com", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "Intended Audience :: Developers", "Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Programming Language :: Python", "Programming Language :: Python :: 3", "Topic :: Scientific/Engineering"], "description": "=============================\nbrew\n=============================\n\n.. image:: https://badge.fury.io/py/brew.png\n    :target: http://badge.fury.io/py/brew\n\n.. image:: https://travis-ci.org/viisar/brew.png?branch=master\n    :target: https://travis-ci.org/viisar/brew\n\n.. image:: https://landscape.io/github/viisar/brew/master/landscape.svg?style=flat\n   :target: https://landscape.io/github/viisar/brew/master\n   :alt: Code Health\n\n.. image:: https://coveralls.io/repos/github/viisar/brew/badge.svg?branch=master\n    :target: https://coveralls.io/github/viisar/brew?branch=master\n\n.. image:: https://badges.gitter.im/Join%20Chat.svg\n   :alt: Join the chat at https://gitter.im/viisar/brew\n   :target: https://gitter.im/viisar/brew?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge\n\n\n**brew: A Multiple Classifier Systems API**\n\n| This project was started in 2014 by *Dayvid Victor* and *Thyago Porpino*\n| for the Multiple Classifier Systems class at Federal University of Pernambuco.\n\n\n| The aim of this project is to provide an easy API for Ensembling, Stacking, \n| Blending, Ensemble Generation, Ensemble Pruning, Dynamic Classifier Selection, \n| and Dynamic Ensemble Selection.\n\nFeatures\n===========\n* General: Ensembling, Stacking and Blending.\n* Ensemble Classifier Generators: Bagging, Random Subspace, SMOTE-Bagging, ICS-Bagging, SMOTE-ICS-Bagging.\n* Dynamic Selection: Overall Local Accuracy (OLA), Local Class Accuracy (LCA), Multiple Classifier Behavior (MCB), K-Nearest Oracles Eliminate (KNORA-E), K-Nearest Oracles Union (KNORA-U), A Priori Dynamic Selection, A Posteriori Dynamic Selection, Dynamic Selection KNN (DSKNN).\n* Ensemble Combination Rules: majority vote, min, max, mean and median.\n* Ensemble Diversity Metrics: Entropy Measure E, Kohavi Wolpert Variance, Q Statistics, Correlation Coefficient p, Disagreement Measure, Agreement Measure, Double Fault Measure.\n* Ensemble Pruning: Ensemble Pruning via Individual Contribution (EPIC).\n\nExample\n============\n\n.. code-block:: python\n\n        import numpy as np\n        import matplotlib.pyplot as plt\n        import matplotlib.gridspec as gridspec\n        import itertools\n\n        import sklearn\n\n        from sklearn.linear_model import LogisticRegression\n        from sklearn.svm import SVC\n        from sklearn.ensemble import RandomForestClassifier\n\n        from brew.base import Ensemble, EnsembleClassifier\n        from brew.stacking.stacker import EnsembleStack, EnsembleStackClassifier\n        from brew.combination.combiner import Combiner\n\n        from mlxtend.data import iris_data\n        from mlxtend.evaluate import plot_decision_regions\n\n        # Initializing Classifiers\n        clf1 = LogisticRegression(random_state=0)\n        clf2 = RandomForestClassifier(random_state=0)\n        clf3 = SVC(random_state=0, probability=True)\n\n        # Creating Ensemble\n        ensemble = Ensemble([clf1, clf2, clf3])\n        eclf = EnsembleClassifier(ensemble=ensemble, combiner=Combiner('mean'))\n\n        # Creating Stacking\n        layer_1 = Ensemble([clf1, clf2, clf3])\n        layer_2 = Ensemble([sklearn.clone(clf1)])\n\n        stack = EnsembleStack(cv=3)\n\n        stack.add_layer(layer_1)\n        stack.add_layer(layer_2)\n\n        sclf = EnsembleStackClassifier(stack)\n\n        clf_list = [clf1, clf2, clf3, eclf, sclf]\n        lbl_list = ['Logistic Regression', 'Random Forest', 'RBF kernel SVM', 'Ensemble', 'Stacking']\n\n        # Loading some example data\n        X, y = iris_data()\n        X = X[:,[0, 2]]\n\n        # Plotting Decision Regions\n        gs = gridspec.GridSpec(2, 3)\n        fig = plt.figure(figsize=(10, 8))\n\n        itt = itertools.product([0, 1, 2], repeat=2)\n\n        for clf, lab, grd in zip(clf_list, lbl_list, itt):\n            clf.fit(X, y)\n            ax = plt.subplot(gs[grd[0], grd[1]])\n            fig = plot_decision_regions(X=X, y=y, clf=clf, legend=2)\n            plt.title(lab)\n        plt.show()\n\n\n.. image:: https://raw.githubusercontent.com/viisar/brew/master/docs/sources/img/iris_decision_regions_2d.png\n    :alt: decision regions plots\n    :align: center\n\n\nDependencies\n============\n- Python 2.7+\n- scikit-learn >= 0.15.2\n- Numpy >= 1.6.1\n- SciPy >= 0.9\n- Matplotlib >= 0.99.1 (examples, only)\n- mlxtend (examples, only)\n\n\nInstalling\n==========\n\nYou can easily install brew using ``pip``::\n\n    pip install brew\n\nor, if you prefer an up-to-date version, get it from here::\n\n    pip install git+https://github.com/viisar/brew.git\n\n\nImportant References\n====================\n\n- Kuncheva, Ludmila I. Combining pattern classifiers: methods and algorithms. John Wiley & Sons, 2014.\n- Zhou, Zhi-Hua. Ensemble methods: foundations and algorithms. CRC Press, 2012.\n\n\n\n\nDocumentation\n-------------\n\nThe full documentation is at http://brew.rtfd.org.\n\n\n\nHistory\n-------\n\n0.1.0 (2014-11-12)\n++++++++++++++++++\n\n* First release on PyPI.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/viisar/brew", "keywords": "brew", "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "brew", "package_url": "https://pypi.org/project/brew/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/brew/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/viisar/brew"}, "release_url": "https://pypi.org/project/brew/0.1.4/", "requires_dist": null, "requires_python": null, "summary": "BREW: Python Multiple Classifier System API", "version": "0.1.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"http://badge.fury.io/py/brew\" rel=\"nofollow\"><img alt=\"https://badge.fury.io/py/brew.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d31a7c75d94200d459edad877380dab67d620b23/68747470733a2f2f62616467652e667572792e696f2f70792f627265772e706e67\"></a>\n<a href=\"https://travis-ci.org/viisar/brew\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/viisar/brew.png?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5164f78c75f4293e7d99f1034df73f5dfac1d34c/68747470733a2f2f7472617669732d63692e6f72672f7669697361722f627265772e706e673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://landscape.io/github/viisar/brew/master\" rel=\"nofollow\"><img alt=\"Code Health\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b1d128fb3983b39711f6103565c98937805b414d/68747470733a2f2f6c616e6473636170652e696f2f6769746875622f7669697361722f627265772f6d61737465722f6c616e6473636170652e7376673f7374796c653d666c6174\"></a>\n<a href=\"https://coveralls.io/github/viisar/brew?branch=master\" rel=\"nofollow\"><img alt=\"https://coveralls.io/repos/github/viisar/brew/badge.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/235154048ee3a69aac536aaa4d44ff006fccee31/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f7669697361722f627265772f62616467652e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://gitter.im/viisar/brew?utm_source=badge&amp;utm_medium=badge&amp;utm_campaign=pr-badge&amp;utm_content=badge\" rel=\"nofollow\"><img alt=\"Join the chat at https://gitter.im/viisar/brew\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/454be82554a06af0fd3393415ef17b59d8550498/68747470733a2f2f6261646765732e6769747465722e696d2f4a6f696e253230436861742e737667\"></a>\n<p><strong>brew: A Multiple Classifier Systems API</strong></p>\n<div>\n<div>This project was started in 2014 by <em>Dayvid Victor</em> and <em>Thyago Porpino</em></div>\n<div>for the Multiple Classifier Systems class at Federal University of Pernambuco.</div>\n</div>\n<div>\n<div>The aim of this project is to provide an easy API for Ensembling, Stacking,</div>\n<div>Blending, Ensemble Generation, Ensemble Pruning, Dynamic Classifier Selection,</div>\n<div>and Dynamic Ensemble Selection.</div>\n</div>\n<div id=\"features\">\n<h2>Features</h2>\n<ul>\n<li>General: Ensembling, Stacking and Blending.</li>\n<li>Ensemble Classifier Generators: Bagging, Random Subspace, SMOTE-Bagging, ICS-Bagging, SMOTE-ICS-Bagging.</li>\n<li>Dynamic Selection: Overall Local Accuracy (OLA), Local Class Accuracy (LCA), Multiple Classifier Behavior (MCB), K-Nearest Oracles Eliminate (KNORA-E), K-Nearest Oracles Union (KNORA-U), A Priori Dynamic Selection, A Posteriori Dynamic Selection, Dynamic Selection KNN (DSKNN).</li>\n<li>Ensemble Combination Rules: majority vote, min, max, mean and median.</li>\n<li>Ensemble Diversity Metrics: Entropy Measure E, Kohavi Wolpert Variance, Q Statistics, Correlation Coefficient p, Disagreement Measure, Agreement Measure, Double Fault Measure.</li>\n<li>Ensemble Pruning: Ensemble Pruning via Individual Contribution (EPIC).</li>\n</ul>\n</div>\n<div id=\"example\">\n<h2>Example</h2>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">import</span> <span class=\"nn\">matplotlib.pyplot</span> <span class=\"k\">as</span> <span class=\"nn\">plt</span>\n<span class=\"kn\">import</span> <span class=\"nn\">matplotlib.gridspec</span> <span class=\"k\">as</span> <span class=\"nn\">gridspec</span>\n<span class=\"kn\">import</span> <span class=\"nn\">itertools</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">sklearn</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.linear_model</span> <span class=\"kn\">import</span> <span class=\"n\">LogisticRegression</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.svm</span> <span class=\"kn\">import</span> <span class=\"n\">SVC</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.ensemble</span> <span class=\"kn\">import</span> <span class=\"n\">RandomForestClassifier</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">brew.base</span> <span class=\"kn\">import</span> <span class=\"n\">Ensemble</span><span class=\"p\">,</span> <span class=\"n\">EnsembleClassifier</span>\n<span class=\"kn\">from</span> <span class=\"nn\">brew.stacking.stacker</span> <span class=\"kn\">import</span> <span class=\"n\">EnsembleStack</span><span class=\"p\">,</span> <span class=\"n\">EnsembleStackClassifier</span>\n<span class=\"kn\">from</span> <span class=\"nn\">brew.combination.combiner</span> <span class=\"kn\">import</span> <span class=\"n\">Combiner</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">mlxtend.data</span> <span class=\"kn\">import</span> <span class=\"n\">iris_data</span>\n<span class=\"kn\">from</span> <span class=\"nn\">mlxtend.evaluate</span> <span class=\"kn\">import</span> <span class=\"n\">plot_decision_regions</span>\n\n<span class=\"c1\"># Initializing Classifiers</span>\n<span class=\"n\">clf1</span> <span class=\"o\">=</span> <span class=\"n\">LogisticRegression</span><span class=\"p\">(</span><span class=\"n\">random_state</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">clf2</span> <span class=\"o\">=</span> <span class=\"n\">RandomForestClassifier</span><span class=\"p\">(</span><span class=\"n\">random_state</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">clf3</span> <span class=\"o\">=</span> <span class=\"n\">SVC</span><span class=\"p\">(</span><span class=\"n\">random_state</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">probability</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Creating Ensemble</span>\n<span class=\"n\">ensemble</span> <span class=\"o\">=</span> <span class=\"n\">Ensemble</span><span class=\"p\">([</span><span class=\"n\">clf1</span><span class=\"p\">,</span> <span class=\"n\">clf2</span><span class=\"p\">,</span> <span class=\"n\">clf3</span><span class=\"p\">])</span>\n<span class=\"n\">eclf</span> <span class=\"o\">=</span> <span class=\"n\">EnsembleClassifier</span><span class=\"p\">(</span><span class=\"n\">ensemble</span><span class=\"o\">=</span><span class=\"n\">ensemble</span><span class=\"p\">,</span> <span class=\"n\">combiner</span><span class=\"o\">=</span><span class=\"n\">Combiner</span><span class=\"p\">(</span><span class=\"s1\">'mean'</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># Creating Stacking</span>\n<span class=\"n\">layer_1</span> <span class=\"o\">=</span> <span class=\"n\">Ensemble</span><span class=\"p\">([</span><span class=\"n\">clf1</span><span class=\"p\">,</span> <span class=\"n\">clf2</span><span class=\"p\">,</span> <span class=\"n\">clf3</span><span class=\"p\">])</span>\n<span class=\"n\">layer_2</span> <span class=\"o\">=</span> <span class=\"n\">Ensemble</span><span class=\"p\">([</span><span class=\"n\">sklearn</span><span class=\"o\">.</span><span class=\"n\">clone</span><span class=\"p\">(</span><span class=\"n\">clf1</span><span class=\"p\">)])</span>\n\n<span class=\"n\">stack</span> <span class=\"o\">=</span> <span class=\"n\">EnsembleStack</span><span class=\"p\">(</span><span class=\"n\">cv</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n\n<span class=\"n\">stack</span><span class=\"o\">.</span><span class=\"n\">add_layer</span><span class=\"p\">(</span><span class=\"n\">layer_1</span><span class=\"p\">)</span>\n<span class=\"n\">stack</span><span class=\"o\">.</span><span class=\"n\">add_layer</span><span class=\"p\">(</span><span class=\"n\">layer_2</span><span class=\"p\">)</span>\n\n<span class=\"n\">sclf</span> <span class=\"o\">=</span> <span class=\"n\">EnsembleStackClassifier</span><span class=\"p\">(</span><span class=\"n\">stack</span><span class=\"p\">)</span>\n\n<span class=\"n\">clf_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">clf1</span><span class=\"p\">,</span> <span class=\"n\">clf2</span><span class=\"p\">,</span> <span class=\"n\">clf3</span><span class=\"p\">,</span> <span class=\"n\">eclf</span><span class=\"p\">,</span> <span class=\"n\">sclf</span><span class=\"p\">]</span>\n<span class=\"n\">lbl_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'Logistic Regression'</span><span class=\"p\">,</span> <span class=\"s1\">'Random Forest'</span><span class=\"p\">,</span> <span class=\"s1\">'RBF kernel SVM'</span><span class=\"p\">,</span> <span class=\"s1\">'Ensemble'</span><span class=\"p\">,</span> <span class=\"s1\">'Stacking'</span><span class=\"p\">]</span>\n\n<span class=\"c1\"># Loading some example data</span>\n<span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">iris_data</span><span class=\"p\">()</span>\n<span class=\"n\">X</span> <span class=\"o\">=</span> <span class=\"n\">X</span><span class=\"p\">[:,[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]]</span>\n\n<span class=\"c1\"># Plotting Decision Regions</span>\n<span class=\"n\">gs</span> <span class=\"o\">=</span> <span class=\"n\">gridspec</span><span class=\"o\">.</span><span class=\"n\">GridSpec</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"n\">fig</span> <span class=\"o\">=</span> <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">figure</span><span class=\"p\">(</span><span class=\"n\">figsize</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">))</span>\n\n<span class=\"n\">itt</span> <span class=\"o\">=</span> <span class=\"n\">itertools</span><span class=\"o\">.</span><span class=\"n\">product</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"n\">repeat</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n\n<span class=\"k\">for</span> <span class=\"n\">clf</span><span class=\"p\">,</span> <span class=\"n\">lab</span><span class=\"p\">,</span> <span class=\"n\">grd</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">clf_list</span><span class=\"p\">,</span> <span class=\"n\">lbl_list</span><span class=\"p\">,</span> <span class=\"n\">itt</span><span class=\"p\">):</span>\n    <span class=\"n\">clf</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">)</span>\n    <span class=\"n\">ax</span> <span class=\"o\">=</span> <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">subplot</span><span class=\"p\">(</span><span class=\"n\">gs</span><span class=\"p\">[</span><span class=\"n\">grd</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">grd</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]])</span>\n    <span class=\"n\">fig</span> <span class=\"o\">=</span> <span class=\"n\">plot_decision_regions</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"o\">=</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"o\">=</span><span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">clf</span><span class=\"o\">=</span><span class=\"n\">clf</span><span class=\"p\">,</span> <span class=\"n\">legend</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n    <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">title</span><span class=\"p\">(</span><span class=\"n\">lab</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n</pre>\n<img alt=\"decision regions plots\" class=\"align-center\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/793e209f7cc06b11f9b4f489a0664267183690b9/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f7669697361722f627265772f6d61737465722f646f63732f736f75726365732f696d672f697269735f6465636973696f6e5f726567696f6e735f32642e706e67\">\n</div>\n<div id=\"dependencies\">\n<h2>Dependencies</h2>\n<ul>\n<li>Python 2.7+</li>\n<li>scikit-learn &gt;= 0.15.2</li>\n<li>Numpy &gt;= 1.6.1</li>\n<li>SciPy &gt;= 0.9</li>\n<li>Matplotlib &gt;= 0.99.1 (examples, only)</li>\n<li>mlxtend (examples, only)</li>\n</ul>\n</div>\n<div id=\"installing\">\n<h2>Installing</h2>\n<p>You can easily install brew using <tt>pip</tt>:</p>\n<pre>pip install brew\n</pre>\n<p>or, if you prefer an up-to-date version, get it from here:</p>\n<pre>pip install git+https://github.com/viisar/brew.git\n</pre>\n</div>\n<div id=\"important-references\">\n<h2>Important References</h2>\n<ul>\n<li>Kuncheva, Ludmila I. Combining pattern classifiers: methods and algorithms. John Wiley &amp; Sons, 2014.</li>\n<li>Zhou, Zhi-Hua. Ensemble methods: foundations and algorithms. CRC Press, 2012.</li>\n</ul>\n<div id=\"documentation\">\n<h3>Documentation</h3>\n<p>The full documentation is at <a href=\"http://brew.rtfd.org\" rel=\"nofollow\">http://brew.rtfd.org</a>.</p>\n</div>\n<div id=\"history\">\n<h3>History</h3>\n<h3 id=\"id1\"><span class=\"section-subtitle\">0.1.0 (2014-11-12)</span></h3>\n<ul>\n<li>First release on PyPI.</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 2533277, "releases": {"0.1.0": [], "0.1.1": [{"comment_text": "", "digests": {"md5": "a3aaec2c55d9ca1284a715bc5f5caeec", "sha256": "b579a1b8e679acdbdc960a0b2a2a99bf8f9a058da33586b65239ff750633bbc4"}, "downloads": -1, "filename": "brew-0.1.1.zip", "has_sig": false, "md5_digest": "a3aaec2c55d9ca1284a715bc5f5caeec", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 34054, "upload_time": "2015-03-24T01:19:27", "upload_time_iso_8601": "2015-03-24T01:19:27.780218Z", "url": "https://files.pythonhosted.org/packages/b3/c6/ab3328b05bcf3bfb6e453ddb18ae356f9b167dcfec0ab1bf2289c48bade2/brew-0.1.1.zip", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "75fc2c9ea0eb7c97b7f26dc6454f27a6", "sha256": "44da282909c963c4c1506cbaab481f23720f50a0ca6da325fde8e2d2459a6e9f"}, "downloads": -1, "filename": "brew-0.1.2.zip", "has_sig": false, "md5_digest": "75fc2c9ea0eb7c97b7f26dc6454f27a6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 37862, "upload_time": "2015-06-22T19:25:44", "upload_time_iso_8601": "2015-06-22T19:25:44.178189Z", "url": "https://files.pythonhosted.org/packages/cf/67/65d3ea968f55f9ac12e052476cbf7e950aa5d740ff24339f1feaf425934c/brew-0.1.2.zip", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "d504cc9c1d97782ccd1979ef493b56fb", "sha256": "44c2b3e3177d5a81d1f99230dcc0bdc880c03920dbbca6cf2f60bca6ea8ec136"}, "downloads": -1, "filename": "brew-0.1.3.zip", "has_sig": false, "md5_digest": "d504cc9c1d97782ccd1979ef493b56fb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 42976, "upload_time": "2016-05-28T13:17:13", "upload_time_iso_8601": "2016-05-28T13:17:13.759062Z", "url": "https://files.pythonhosted.org/packages/4d/d7/ea56c3726e7539d80c9a2d3c67ceaa1008cf5802e9bf552a2413b004f7b9/brew-0.1.3.zip", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "2f9561aea0c754570bc03f05e2dcbb8c", "sha256": "11f23fe972631685e2a146f91747f78bbcad9dd2e20e6ea84a3058459c605948"}, "downloads": -1, "filename": "brew-0.1.4.zip", "has_sig": false, "md5_digest": "2f9561aea0c754570bc03f05e2dcbb8c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 48846, "upload_time": "2016-10-11T22:53:08", "upload_time_iso_8601": "2016-10-11T22:53:08.327231Z", "url": "https://files.pythonhosted.org/packages/71/19/75f6d42ca862c6b31e2da9864d94f59fe81978ac5d40c43937a1c17fd065/brew-0.1.4.zip", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "2f9561aea0c754570bc03f05e2dcbb8c", "sha256": "11f23fe972631685e2a146f91747f78bbcad9dd2e20e6ea84a3058459c605948"}, "downloads": -1, "filename": "brew-0.1.4.zip", "has_sig": false, "md5_digest": "2f9561aea0c754570bc03f05e2dcbb8c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 48846, "upload_time": "2016-10-11T22:53:08", "upload_time_iso_8601": "2016-10-11T22:53:08.327231Z", "url": "https://files.pythonhosted.org/packages/71/19/75f6d42ca862c6b31e2da9864d94f59fe81978ac5d40c43937a1c17fd065/brew-0.1.4.zip", "yanked": false}], "timestamp": "Thu May  7 22:36:20 2020"}