{"info": {"author": "Matthew Levy", "author_email": "matt@webkolektiv.com", "bugtrack_url": null, "classifiers": ["Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "pyloaders\n=========\n\nBasic animated ASCII loaders for Python scripts.\n\n- Spinning Loader\n- Text Loader\n- Bar Loader\n- Progress Loader\n\n## Installation\n\n```bash\npip install pyloaders\n```\n\n#### From Source\n\n```bash\ngit clone https://gitlab.com/ml394/pyloaders.git\ncd pyloaders\npython setup.py install\n```\n\n## Usage\n\nAll loaders are declared by calling `LoaderClass(<arguments>)`\n\n#### Arguments\n\n| Option        | Description                         | Type  | Choices                  | Default   | Valid For           |\n|---------------|-------------------------------------|-------|--------------------------|-----------|---------------------|\n| text          | Text displayed while loading        | str   |                          | 'Loading' | Text, Spinning      |\n| size          | Full width of loader                | str   | small, medium, large     | 'medium'  | Text, Bar, Progress |\n| character     | ASCII value used in loader          | str   | . = * > ~ # @ $ + ! ? ,  | '.' / '=' | Text, Bar, Progress |\n| speed         | Time between loader paints          | float |                          | .25       | Text, Spinning, Bar |\n| duration      | Runtime of fixed loader, in seconds | int   |                          | 10        | Text, Spinning, Bar |\n| direction     | Initial direction of moving loader  | str   | ltr, rtl                 | 'ltr'     | Text, Bar           |\n| animation     | Continuous or oscillating movement  | str   | loop, bounce             | 'loop'    | Text, Bar           |\n| colour        | Terminal colour support required    | str   | blue, green, yellow, red | None      | ALL                 |\n| style         | Terminal styles support required    | str   | header, bold, underline  | None      | ALL                 |\n| complete_text | Text displayed after loader ends    | str   |                          | 'Done!'   | ALL                 |\n| start         | Progress loader start position      | int   |                          | 0         | Progress            |\n| total         | Progress loader total count         | int   |                          | 100       | Progress            |\n\n### Indeterminate\n\n**Available Classes:** SpinningLoader, TextLoader, BarLoader\n\nRun as threads which can be started and stopped dynamically by you at any stage.\n- To start a loader, call its `start()` method.\n- After you have completed your tasks, call the loader's `stop()` method to terminate the thread.\n- If you have set a fixed _duration_ of the loader, call the `run()` method to run the loader for the set amount of time.\n\n#### Threaded\n```python\nfrom loaders import TextLoader\n\nloader = TextLoader()\nloader.start()\n# Perform some tasks\nloader.stop()\n```\n\n#### Fixed Duration\n```python\nfrom loaders import TextLoader\n\nfixed_loader = TextLoader(duration=10)\nfixed_loader.run() # Pauses program execution and runs loader for 10s\n```\n\n**Output**\n```\n/ Loading...        # SpinningLoader\n\n.....Loading...     # TextLoader\n\n|   ======    |     # BarLoader\n```\n\n**Remember**: Don't try to start more than one loader at the same time!\n\n### Determinate\n\n**Available Classes:** ProgressLoader\n\nUsed to measure the completion progress of a loop or function.\n\nWhen you initialize a `ProgressLoader` object, you should specify the total number of iterations that will be performed in your loop as the `total` argument.\n\nOn each iteration, call the loader's `progress(n)` method, where `n` is the current iteration count, to update the progress bar in the terminal.\n\n```python\nfrom loaders import ProgressLoader\n\nloader = ProgressLoader(total=10)\nfor i in range(10):\n    # Perform some task each loop\n    loader.progress(i)\n```\n\n**Output**\n```\n|==========          | 50%\n```\n\n**Remember:** Don't print anything to the console while the loader is running!\n\n## Tests\n\nThere is a small test suite that uses the **pytest** module.\n1. Clone the repository\n2. Install pytest and dependencies\n3. Run pytest from project folder\n\n```bash\ngit clone https://gitlab.com/ml394/pyloaders.git\ncd pyloaders\npip install -r requirements.txt\npytest\n```\n\n### Examples\n\nAn visual example can be performed by running `example.py` from the project directory.\n\nThis will run a suite of example loaders specified in the file for 5s each. By default, the indeterminate examples are run on fixed durations. To run them as threads, use the optional `thread` argument.\n\n```bash\n# Fixed duration\npython example.py\n\n# Threaded\npython example.py thread\n```\n\n## Contributing\n\nTo contribute to this project, clone master and create your own development branch.\n```bash\ngit clone https://gitlab.com/ml394/pyloaders.git\ngit checkout -b <feature-name>\n```\n\nPush your branch remotely, and create a merge request to master so we can review your code.\n\nIf the merge request is approved, your new feature will be merged and pushed for the next release.\n\n### To Do\n\n- [x] Loader colours / styles\n- [x] CI/CD Pipeline\n- [ ] API Documentation\n- [ ] Print output while loader running\n\n## Donate\n\nBTC donations (no matter how tiny) accepted at wallet address:\n\n`1PSWQrgbagNARvtum6pGS7rPUub4YiLmzX`\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://gitlab.com/ml394/pyloaders.git", "keywords": "", "license": "GPL", "maintainer": "", "maintainer_email": "", "name": "pyloaders", "package_url": "https://pypi.org/project/pyloaders/", "platform": "", "project_url": "https://pypi.org/project/pyloaders/", "project_urls": {"Homepage": "https://gitlab.com/ml394/pyloaders.git"}, "release_url": "https://pypi.org/project/pyloaders/0.0.4/", "requires_dist": null, "requires_python": "", "summary": "Basic animated ASCII loaders for Python scripts", "version": "0.0.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>pyloaders</h1>\n<p>Basic animated ASCII loaders for Python scripts.</p>\n<ul>\n<li>Spinning Loader</li>\n<li>Text Loader</li>\n<li>Bar Loader</li>\n<li>Progress Loader</li>\n</ul>\n<h2>Installation</h2>\n<pre>pip install pyloaders\n</pre>\n<h4>From Source</h4>\n<pre>git clone https://gitlab.com/ml394/pyloaders.git\n<span class=\"nb\">cd</span> pyloaders\npython setup.py install\n</pre>\n<h2>Usage</h2>\n<p>All loaders are declared by calling <code>LoaderClass(&lt;arguments&gt;)</code></p>\n<h4>Arguments</h4>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Description</th>\n<th>Type</th>\n<th>Choices</th>\n<th>Default</th>\n<th>Valid For</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>text</td>\n<td>Text displayed while loading</td>\n<td>str</td>\n<td></td>\n<td>'Loading'</td>\n<td>Text, Spinning</td>\n</tr>\n<tr>\n<td>size</td>\n<td>Full width of loader</td>\n<td>str</td>\n<td>small, medium, large</td>\n<td>'medium'</td>\n<td>Text, Bar, Progress</td>\n</tr>\n<tr>\n<td>character</td>\n<td>ASCII value used in loader</td>\n<td>str</td>\n<td>. = * &gt; ~ # @ $ + ! ? ,</td>\n<td>'.' / '='</td>\n<td>Text, Bar, Progress</td>\n</tr>\n<tr>\n<td>speed</td>\n<td>Time between loader paints</td>\n<td>float</td>\n<td></td>\n<td>.25</td>\n<td>Text, Spinning, Bar</td>\n</tr>\n<tr>\n<td>duration</td>\n<td>Runtime of fixed loader, in seconds</td>\n<td>int</td>\n<td></td>\n<td>10</td>\n<td>Text, Spinning, Bar</td>\n</tr>\n<tr>\n<td>direction</td>\n<td>Initial direction of moving loader</td>\n<td>str</td>\n<td>ltr, rtl</td>\n<td>'ltr'</td>\n<td>Text, Bar</td>\n</tr>\n<tr>\n<td>animation</td>\n<td>Continuous or oscillating movement</td>\n<td>str</td>\n<td>loop, bounce</td>\n<td>'loop'</td>\n<td>Text, Bar</td>\n</tr>\n<tr>\n<td>colour</td>\n<td>Terminal colour support required</td>\n<td>str</td>\n<td>blue, green, yellow, red</td>\n<td>None</td>\n<td>ALL</td>\n</tr>\n<tr>\n<td>style</td>\n<td>Terminal styles support required</td>\n<td>str</td>\n<td>header, bold, underline</td>\n<td>None</td>\n<td>ALL</td>\n</tr>\n<tr>\n<td>complete_text</td>\n<td>Text displayed after loader ends</td>\n<td>str</td>\n<td></td>\n<td>'Done!'</td>\n<td>ALL</td>\n</tr>\n<tr>\n<td>start</td>\n<td>Progress loader start position</td>\n<td>int</td>\n<td></td>\n<td>0</td>\n<td>Progress</td>\n</tr>\n<tr>\n<td>total</td>\n<td>Progress loader total count</td>\n<td>int</td>\n<td></td>\n<td>100</td>\n<td>Progress</td>\n</tr></tbody></table>\n<h3>Indeterminate</h3>\n<p><strong>Available Classes:</strong> SpinningLoader, TextLoader, BarLoader</p>\n<p>Run as threads which can be started and stopped dynamically by you at any stage.</p>\n<ul>\n<li>To start a loader, call its <code>start()</code> method.</li>\n<li>After you have completed your tasks, call the loader's <code>stop()</code> method to terminate the thread.</li>\n<li>If you have set a fixed <em>duration</em> of the loader, call the <code>run()</code> method to run the loader for the set amount of time.</li>\n</ul>\n<h4>Threaded</h4>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">loaders</span> <span class=\"kn\">import</span> <span class=\"n\">TextLoader</span>\n\n<span class=\"n\">loader</span> <span class=\"o\">=</span> <span class=\"n\">TextLoader</span><span class=\"p\">()</span>\n<span class=\"n\">loader</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n<span class=\"c1\"># Perform some tasks</span>\n<span class=\"n\">loader</span><span class=\"o\">.</span><span class=\"n\">stop</span><span class=\"p\">()</span>\n</pre>\n<h4>Fixed Duration</h4>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">loaders</span> <span class=\"kn\">import</span> <span class=\"n\">TextLoader</span>\n\n<span class=\"n\">fixed_loader</span> <span class=\"o\">=</span> <span class=\"n\">TextLoader</span><span class=\"p\">(</span><span class=\"n\">duration</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"n\">fixed_loader</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span> <span class=\"c1\"># Pauses program execution and runs loader for 10s</span>\n</pre>\n<p><strong>Output</strong></p>\n<pre><code>/ Loading...        # SpinningLoader\n\n.....Loading...     # TextLoader\n\n|   ======    |     # BarLoader\n</code></pre>\n<p><strong>Remember</strong>: Don't try to start more than one loader at the same time!</p>\n<h3>Determinate</h3>\n<p><strong>Available Classes:</strong> ProgressLoader</p>\n<p>Used to measure the completion progress of a loop or function.</p>\n<p>When you initialize a <code>ProgressLoader</code> object, you should specify the total number of iterations that will be performed in your loop as the <code>total</code> argument.</p>\n<p>On each iteration, call the loader's <code>progress(n)</code> method, where <code>n</code> is the current iteration count, to update the progress bar in the terminal.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">loaders</span> <span class=\"kn\">import</span> <span class=\"n\">ProgressLoader</span>\n\n<span class=\"n\">loader</span> <span class=\"o\">=</span> <span class=\"n\">ProgressLoader</span><span class=\"p\">(</span><span class=\"n\">total</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">):</span>\n    <span class=\"c1\"># Perform some task each loop</span>\n    <span class=\"n\">loader</span><span class=\"o\">.</span><span class=\"n\">progress</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span>\n</pre>\n<p><strong>Output</strong></p>\n<pre><code>|==========          | 50%\n</code></pre>\n<p><strong>Remember:</strong> Don't print anything to the console while the loader is running!</p>\n<h2>Tests</h2>\n<p>There is a small test suite that uses the <strong>pytest</strong> module.</p>\n<ol>\n<li>Clone the repository</li>\n<li>Install pytest and dependencies</li>\n<li>Run pytest from project folder</li>\n</ol>\n<pre>git clone https://gitlab.com/ml394/pyloaders.git\n<span class=\"nb\">cd</span> pyloaders\npip install -r requirements.txt\npytest\n</pre>\n<h3>Examples</h3>\n<p>An visual example can be performed by running <code>example.py</code> from the project directory.</p>\n<p>This will run a suite of example loaders specified in the file for 5s each. By default, the indeterminate examples are run on fixed durations. To run them as threads, use the optional <code>thread</code> argument.</p>\n<pre><span class=\"c1\"># Fixed duration</span>\npython example.py\n\n<span class=\"c1\"># Threaded</span>\npython example.py thread\n</pre>\n<h2>Contributing</h2>\n<p>To contribute to this project, clone master and create your own development branch.</p>\n<pre>git clone https://gitlab.com/ml394/pyloaders.git\ngit checkout -b &lt;feature-name&gt;\n</pre>\n<p>Push your branch remotely, and create a merge request to master so we can review your code.</p>\n<p>If the merge request is approved, your new feature will be merged and pushed for the next release.</p>\n<h3>To Do</h3>\n<ul>\n<li>[x] Loader colours / styles</li>\n<li>[x] CI/CD Pipeline</li>\n<li>[ ] API Documentation</li>\n<li>[ ] Print output while loader running</li>\n</ul>\n<h2>Donate</h2>\n<p>BTC donations (no matter how tiny) accepted at wallet address:</p>\n<p><code>1PSWQrgbagNARvtum6pGS7rPUub4YiLmzX</code></p>\n\n          </div>"}, "last_serial": 5685164, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "91c57269fff8fba9fa62b0ae74920ead", "sha256": "7dfba78c966b4b2f3f47dc608e849352a71bfe1591593f0853ac5175b9954260"}, "downloads": -1, "filename": "pyloaders-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "91c57269fff8fba9fa62b0ae74920ead", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 17578, "upload_time": "2019-01-14T00:01:47", "upload_time_iso_8601": "2019-01-14T00:01:47.068133Z", "url": "https://files.pythonhosted.org/packages/14/e5/d9a8d41944dde82d266da170f667afde539081e6ae864ec148e10e21878c/pyloaders-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6e8e6602580546ad760bc1e52a95a84d", "sha256": "908041ebf124c48b55e8b0accdde530a997d97110738a7cc2f0a757ed615ce99"}, "downloads": -1, "filename": "pyloaders-0.0.1.tar.gz", "has_sig": false, "md5_digest": "6e8e6602580546ad760bc1e52a95a84d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5086, "upload_time": "2019-01-14T00:01:49", "upload_time_iso_8601": "2019-01-14T00:01:49.172449Z", "url": "https://files.pythonhosted.org/packages/d8/69/d22ddb5114251b6d1f77269c2cb5f3ebe65b82f207850a031b4e88f2898b/pyloaders-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "0231d38ddf73a1fc054fe1783438f0d9", "sha256": "83c56b07cc9f615947144afdb667f4d30286869c410189a878b8fc26dc4f352a"}, "downloads": -1, "filename": "pyloaders-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "0231d38ddf73a1fc054fe1783438f0d9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 17677, "upload_time": "2019-01-14T23:10:11", "upload_time_iso_8601": "2019-01-14T23:10:11.512489Z", "url": "https://files.pythonhosted.org/packages/24/51/cc9dba6c1407f90eb2ad1541919ee606a9dd907ee6e81a728dfdab57eb86/pyloaders-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "378f44f93dd98c77021a0634a5e09b6d", "sha256": "e2f984b98ef87dda596c621969510d2ebb0538fe9d323e67fbd2b0f1f5ad93d3"}, "downloads": -1, "filename": "pyloaders-0.0.2.tar.gz", "has_sig": false, "md5_digest": "378f44f93dd98c77021a0634a5e09b6d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5205, "upload_time": "2019-01-14T23:10:13", "upload_time_iso_8601": "2019-01-14T23:10:13.139615Z", "url": "https://files.pythonhosted.org/packages/96/4d/e85856097b3e1d6d150b324d17ef493943108211a196a15e3312383b0a10/pyloaders-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "89e5418ccd472135769207510ba124d7", "sha256": "986bc67dd17d30c6724e0b9834c7422c1bfb9a20ec7d5e3c4502b7a92fd8928e"}, "downloads": -1, "filename": "pyloaders-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "89e5418ccd472135769207510ba124d7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 18589, "upload_time": "2019-08-16T00:16:33", "upload_time_iso_8601": "2019-08-16T00:16:33.372519Z", "url": "https://files.pythonhosted.org/packages/03/26/6fb27f10dec4061fc956be2f71b297d8ae500dae84abb528d60e752663d5/pyloaders-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0187d83a2ac8a7b0287677584bf85280", "sha256": "4b82db8ad9250e383469e7b377d76910c8d0f8a7e408814544e7b70caa314525"}, "downloads": -1, "filename": "pyloaders-0.0.3.tar.gz", "has_sig": false, "md5_digest": "0187d83a2ac8a7b0287677584bf85280", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6111, "upload_time": "2019-08-16T00:16:34", "upload_time_iso_8601": "2019-08-16T00:16:34.867464Z", "url": "https://files.pythonhosted.org/packages/a3/7a/055e13ecf863518da39932d09ce3b241c7a7e64a92def23d1ed49eb02e1a/pyloaders-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "ef690fe95d9dcbf055c89272d3fcc243", "sha256": "0aa3a72e4dfe47dfc3795bd002e24a213c5636a87f1b11b5d7bdce5ec4c9b9bb"}, "downloads": -1, "filename": "pyloaders-0.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "ef690fe95d9dcbf055c89272d3fcc243", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 18604, "upload_time": "2019-08-16T01:15:01", "upload_time_iso_8601": "2019-08-16T01:15:01.745783Z", "url": "https://files.pythonhosted.org/packages/f8/e2/bfe5c4312edf140441deb2db5dc3f3eba54164d434f7b942bfff520a7e33/pyloaders-0.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "33cdef85d942a98e3e02a908817e70dd", "sha256": "ec32189e47d9665b47b290239513a0e10b1d1a5e5010209ef59bfd39042baf6b"}, "downloads": -1, "filename": "pyloaders-0.0.4.tar.gz", "has_sig": false, "md5_digest": "33cdef85d942a98e3e02a908817e70dd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6135, "upload_time": "2019-08-16T01:15:03", "upload_time_iso_8601": "2019-08-16T01:15:03.609623Z", "url": "https://files.pythonhosted.org/packages/63/15/d32986495e70f9cf64d0e23d9f9f1caaae952f75547db966da831ee70599/pyloaders-0.0.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ef690fe95d9dcbf055c89272d3fcc243", "sha256": "0aa3a72e4dfe47dfc3795bd002e24a213c5636a87f1b11b5d7bdce5ec4c9b9bb"}, "downloads": -1, "filename": "pyloaders-0.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "ef690fe95d9dcbf055c89272d3fcc243", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 18604, "upload_time": "2019-08-16T01:15:01", "upload_time_iso_8601": "2019-08-16T01:15:01.745783Z", "url": "https://files.pythonhosted.org/packages/f8/e2/bfe5c4312edf140441deb2db5dc3f3eba54164d434f7b942bfff520a7e33/pyloaders-0.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "33cdef85d942a98e3e02a908817e70dd", "sha256": "ec32189e47d9665b47b290239513a0e10b1d1a5e5010209ef59bfd39042baf6b"}, "downloads": -1, "filename": "pyloaders-0.0.4.tar.gz", "has_sig": false, "md5_digest": "33cdef85d942a98e3e02a908817e70dd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6135, "upload_time": "2019-08-16T01:15:03", "upload_time_iso_8601": "2019-08-16T01:15:03.609623Z", "url": "https://files.pythonhosted.org/packages/63/15/d32986495e70f9cf64d0e23d9f9f1caaae952f75547db966da831ee70599/pyloaders-0.0.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:02:55 2020"}