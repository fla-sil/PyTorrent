{"info": {"author": "RavenDB", "author_email": "support@ravendb.net", "bugtrack_url": null, "classifiers": [], "description": "========\nOverview\n========\nPyravendb-Embedded is a RavenDB  package for running RavenDB in embedded mode.\n\n.. code-block:: python\n\n    EmbeddedServer().start_server()\n    with EmbeddedServer().get_document_store(\"Embedded\") as store:\n        with store.open_session() as session:\n            session.store(User(name=\"Ilay\", age=4))\n            session.save_changes()\n\n============\nInstallation\n============\nInstall from `PyPi <https://pypi.python.org/pypi>`_, as `pyravendb-embedded_ <https://pypi.python.org/project/pyravendb-embedded>`_.\n\n.. code-block:: bash\n\n    pip install pyravendb\n\nInstall Pyravendb-Embedded from pip will provide you with a copy of RavenDB server binaries files as well\n\n========\nUsage\n========\nStart a server\n--------------\nTo start RavenDB server you only need to run ``start_server()`` method from ``EmbeddedServer`` instance and that's it.\n\n.. code-block:: python\n\n   EmbeddedServer.start_server()\n\nTo be more in control about your server `start_server` method can take one parameter `server_options`.\n\nServerOptions\n-------------\n* **framework_version** - The framework version to run the server with.\n* **data_directory** - Where to save the database data (if None the files will be saved in RavenDB folder in the base folder).\n* **server_url** - The url the server will be opened if None the server will open on local host.\n* **dotnet_path** - Where dotnet.exe is located if dotnet in the PATH nothing needed here (If .net core is not installed in your machine\n                    you can download `dotnet binaries <https://www.microsoft.com/net/download/windows>`_ and just put the path to it)\n* **command_line_args** - A list of all `server command args <https://ravendb.net/docs/article-page/4.0/csharp/server/configuration/command-line-arguments>`_.\n\n.. code-block:: python\n\n    server_options = ServerOptions(data_directory=\"MYPATH/RavenDBDataDir\")\n    EmbeddedServer().start_server(server_options)\n\nSecurity\n--------\nThere are two options to make ravendb secured in Pyravendb-Embedded:\n\n1. ``secured(certificate_path, certificate_password=None)`` - For this option you will put a path to a .pfx file for the server and a password to the file if you have one.\n\n        .. code-block:: python\n\n            server_options = ServerOptions()\n            server_options.secured(\"PATH_TO_PFX_CERT_FILE\", \"PASSWORD_TO_CERT_FILE\")\n            EmbeddedServer.start_server(server_options)\n\n2. ``secured_with_exec(self, cert_exec, cert_exec_args, server_cert_fingerprint, client_cert_path, client_cert_password=None)`` - For this option you will have to put executable program (ex. powershell, python, etc) and the arguments for him, the fingerprint of the cert file you can use pyravendb Utils for that (see get_cert_file_fingerprint method), the client cert path and the password if you have one.\n\n    .. code-block:: python\n\n        server_options = ServerOptions()\n        sserver_options.secured_with_exec(\"powershell\",\n                                         \"C:\\\\secrets\\\\give_me_cert.ps1\",\n                                         Utils.get_cert_file_fingerprint(\"PATH_TO_PEM_CERT_FILE\"),\n                                         \"PATH_TO_PEM_CERT_FILE\")\n        EmbeddedServer.start_server(server_options)\n\n\nGet Document Store\n----------------------\nAfter initialize and start the server we can use ``get_document_store`` method to be able to get a DocumentStore\nand start work with RavenDB as normal.\n\n.. code-block:: python\n\n        EmbeddedServer().start_server()\n        with EmbeddedServer().get_document_store(\"Test\") as store:\n            pass\n\n``get_document_store`` method can get or only the database_name or DatabaseOption\n\nDatabaseOptions\n---------------\n* **database_name** - The name of the database\n* **skip_creating_database** - ``get_document_store`` will create a new database if the database is not exists, if this option if True we won't create the database (Default False).\n\n.. code-block:: python\n\n    # In this example we won't create the Test database if not exists will raise an exception\n\n    database_options = DatabaseOptions(database_name=\"Test\", skip_creating_database=True)\n    with EmbeddedServer().get_document_store(database_options) as store:\n      # Your code here\n\nOpen the RavenDB studio in the browser\n--------------------------------------------\nTo open RavenDB studio from Pyravendb-Embedded you can use ``open_studio_in_browser`` method and the studio will open automatically\none your default browser.\n\n.. code-block:: python\n\n   EmbeddedServer().open_studio_in_browser()\n\n================\nAcknowledgments\n================\n**EmbeddedServer** class is a singleton!\n\nEvery time we use ``EmbeddedServer()`` we will get the same instance.", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ravendb/ravendb-python-embedded", "keywords": "pyravendb embedded database nosql doc db", "license": "Custom EULA", "maintainer": "", "maintainer_email": "", "name": "pyravendb-embedded", "package_url": "https://pypi.org/project/pyravendb-embedded/", "platform": "", "project_url": "https://pypi.org/project/pyravendb-embedded/", "project_urls": {"Homepage": "https://github.com/ravendb/ravendb-python-embedded"}, "release_url": "https://pypi.org/project/pyravendb-embedded/4.1.1.4/", "requires_dist": null, "requires_python": "", "summary": "RavenDB Embedded library to run ravendb in embedded way", "version": "4.1.1.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"overview\">\n<h2>Overview</h2>\n<p>Pyravendb-Embedded is a RavenDB  package for running RavenDB in embedded mode.</p>\n<pre><span class=\"n\">EmbeddedServer</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">start_server</span><span class=\"p\">()</span>\n<span class=\"k\">with</span> <span class=\"n\">EmbeddedServer</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">get_document_store</span><span class=\"p\">(</span><span class=\"s2\">\"Embedded\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">store</span><span class=\"p\">:</span>\n    <span class=\"k\">with</span> <span class=\"n\">store</span><span class=\"o\">.</span><span class=\"n\">open_session</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">session</span><span class=\"p\">:</span>\n        <span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">store</span><span class=\"p\">(</span><span class=\"n\">User</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"Ilay\"</span><span class=\"p\">,</span> <span class=\"n\">age</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">))</span>\n        <span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">save_changes</span><span class=\"p\">()</span>\n</pre>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Install from <a href=\"https://pypi.python.org/pypi\" rel=\"nofollow\">PyPi</a>, as <a href=\"https://pypi.python.org/project/pyravendb-embedded\" rel=\"nofollow\">pyravendb-embedded_</a>.</p>\n<pre>pip install pyravendb\n</pre>\n<p>Install Pyravendb-Embedded from pip will provide you with a copy of RavenDB server binaries files as well</p>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<div id=\"start-a-server\">\n<h3>Start a server</h3>\n<p>To start RavenDB server you only need to run <tt>start_server()</tt> method from <tt>EmbeddedServer</tt> instance and that\u2019s it.</p>\n<pre><span class=\"n\">EmbeddedServer</span><span class=\"o\">.</span><span class=\"n\">start_server</span><span class=\"p\">()</span>\n</pre>\n<p>To be more in control about your server <cite>start_server</cite> method can take one parameter <cite>server_options</cite>.</p>\n</div>\n<div id=\"serveroptions\">\n<h3>ServerOptions</h3>\n<ul>\n<li><strong>framework_version</strong> - The framework version to run the server with.</li>\n<li><strong>data_directory</strong> - Where to save the database data (if None the files will be saved in RavenDB folder in the base folder).</li>\n<li><strong>server_url</strong> - The url the server will be opened if None the server will open on local host.</li>\n<li><dl>\n<dt><strong>dotnet_path</strong> - Where dotnet.exe is located if dotnet in the PATH nothing needed here (If .net core is not installed in your machine</dt>\n<dd>you can download <a href=\"https://www.microsoft.com/net/download/windows\" rel=\"nofollow\">dotnet binaries</a> and just put the path to it)</dd>\n</dl>\n</li>\n<li><strong>command_line_args</strong> - A list of all <a href=\"https://ravendb.net/docs/article-page/4.0/csharp/server/configuration/command-line-arguments\" rel=\"nofollow\">server command args</a>.</li>\n</ul>\n<pre><span class=\"n\">server_options</span> <span class=\"o\">=</span> <span class=\"n\">ServerOptions</span><span class=\"p\">(</span><span class=\"n\">data_directory</span><span class=\"o\">=</span><span class=\"s2\">\"MYPATH/RavenDBDataDir\"</span><span class=\"p\">)</span>\n<span class=\"n\">EmbeddedServer</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">start_server</span><span class=\"p\">(</span><span class=\"n\">server_options</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"security\">\n<h3>Security</h3>\n<p>There are two options to make ravendb secured in Pyravendb-Embedded:</p>\n<ol>\n<li><p><tt>secured(certificate_path, certificate_password=None)</tt> - For this option you will put a path to a .pfx file for the server and a password to the file if you have one.</p>\n<blockquote>\n<pre><span class=\"n\">server_options</span> <span class=\"o\">=</span> <span class=\"n\">ServerOptions</span><span class=\"p\">()</span>\n<span class=\"n\">server_options</span><span class=\"o\">.</span><span class=\"n\">secured</span><span class=\"p\">(</span><span class=\"s2\">\"PATH_TO_PFX_CERT_FILE\"</span><span class=\"p\">,</span> <span class=\"s2\">\"PASSWORD_TO_CERT_FILE\"</span><span class=\"p\">)</span>\n<span class=\"n\">EmbeddedServer</span><span class=\"o\">.</span><span class=\"n\">start_server</span><span class=\"p\">(</span><span class=\"n\">server_options</span><span class=\"p\">)</span>\n</pre>\n</blockquote>\n</li>\n<li><p><tt>secured_with_exec(self, cert_exec, cert_exec_args, server_cert_fingerprint, client_cert_path, client_cert_password=None)</tt> - For this option you will have to put executable program (ex. powershell, python, etc) and the arguments for him, the fingerprint of the cert file you can use pyravendb Utils for that (see get_cert_file_fingerprint method), the client cert path and the password if you have one.</p>\n<blockquote>\n<pre><span class=\"n\">server_options</span> <span class=\"o\">=</span> <span class=\"n\">ServerOptions</span><span class=\"p\">()</span>\n<span class=\"n\">sserver_options</span><span class=\"o\">.</span><span class=\"n\">secured_with_exec</span><span class=\"p\">(</span><span class=\"s2\">\"powershell\"</span><span class=\"p\">,</span>\n                                 <span class=\"s2\">\"C:</span><span class=\"se\">\\\\</span><span class=\"s2\">secrets</span><span class=\"se\">\\\\</span><span class=\"s2\">give_me_cert.ps1\"</span><span class=\"p\">,</span>\n                                 <span class=\"n\">Utils</span><span class=\"o\">.</span><span class=\"n\">get_cert_file_fingerprint</span><span class=\"p\">(</span><span class=\"s2\">\"PATH_TO_PEM_CERT_FILE\"</span><span class=\"p\">),</span>\n                                 <span class=\"s2\">\"PATH_TO_PEM_CERT_FILE\"</span><span class=\"p\">)</span>\n<span class=\"n\">EmbeddedServer</span><span class=\"o\">.</span><span class=\"n\">start_server</span><span class=\"p\">(</span><span class=\"n\">server_options</span><span class=\"p\">)</span>\n</pre>\n</blockquote>\n</li>\n</ol>\n</div>\n<div id=\"get-document-store\">\n<h3>Get Document Store</h3>\n<p>After initialize and start the server we can use <tt>get_document_store</tt> method to be able to get a DocumentStore\nand start work with RavenDB as normal.</p>\n<pre><span class=\"n\">EmbeddedServer</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">start_server</span><span class=\"p\">()</span>\n<span class=\"k\">with</span> <span class=\"n\">EmbeddedServer</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">get_document_store</span><span class=\"p\">(</span><span class=\"s2\">\"Test\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">store</span><span class=\"p\">:</span>\n    <span class=\"k\">pass</span>\n</pre>\n<p><tt>get_document_store</tt> method can get or only the database_name or DatabaseOption</p>\n</div>\n<div id=\"databaseoptions\">\n<h3>DatabaseOptions</h3>\n<ul>\n<li><strong>database_name</strong> - The name of the database</li>\n<li><strong>skip_creating_database</strong> - <tt>get_document_store</tt> will create a new database if the database is not exists, if this option if True we won\u2019t create the database (Default False).</li>\n</ul>\n<pre><span class=\"c1\"># In this example we won't create the Test database if not exists will raise an exception</span>\n\n<span class=\"n\">database_options</span> <span class=\"o\">=</span> <span class=\"n\">DatabaseOptions</span><span class=\"p\">(</span><span class=\"n\">database_name</span><span class=\"o\">=</span><span class=\"s2\">\"Test\"</span><span class=\"p\">,</span> <span class=\"n\">skip_creating_database</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"k\">with</span> <span class=\"n\">EmbeddedServer</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">get_document_store</span><span class=\"p\">(</span><span class=\"n\">database_options</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">store</span><span class=\"p\">:</span>\n  <span class=\"c1\"># Your code here</span>\n</pre>\n</div>\n<div id=\"open-the-ravendb-studio-in-the-browser\">\n<h3>Open the RavenDB studio in the browser</h3>\n<p>To open RavenDB studio from Pyravendb-Embedded you can use <tt>open_studio_in_browser</tt> method and the studio will open automatically\none your default browser.</p>\n<pre><span class=\"n\">EmbeddedServer</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">open_studio_in_browser</span><span class=\"p\">()</span>\n</pre>\n</div>\n</div>\n<div id=\"acknowledgments\">\n<h2>Acknowledgments</h2>\n<p><strong>EmbeddedServer</strong> class is a singleton!</p>\n<p>Every time we use <tt>EmbeddedServer()</tt> we will get the same instance.</p>\n</div>\n\n          </div>"}, "last_serial": 4873022, "releases": {"4.1.0.4": [{"comment_text": "", "digests": {"md5": "d4f2c51b9039fe1a548a49d88ee88a2a", "sha256": "f0e87b73dedabda0b30ae6883960893085b6de8df724b7a8e1a9b08bc48cceb4"}, "downloads": -1, "filename": "pyravendb-embedded-4.1.0.4.tar.gz", "has_sig": false, "md5_digest": "d4f2c51b9039fe1a548a49d88ee88a2a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20261263, "upload_time": "2018-07-12T13:59:32", "upload_time_iso_8601": "2018-07-12T13:59:32.678098Z", "url": "https://files.pythonhosted.org/packages/9e/0b/bab712ce317ff38ffedf3d18ed852ab510d553354cc483476b3bf94a4717/pyravendb-embedded-4.1.0.4.tar.gz", "yanked": false}], "4.1.0.5": [{"comment_text": "", "digests": {"md5": "80d4deaddb9cb04761642adc3cd1dd2b", "sha256": "a32b34fa7b5ad7f2105573613bb4d41ef2b216918e86cfc2773dff6278d3509a"}, "downloads": -1, "filename": "pyravendb-embedded-4.1.0.5.tar.gz", "has_sig": false, "md5_digest": "80d4deaddb9cb04761642adc3cd1dd2b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20261253, "upload_time": "2018-07-12T14:06:28", "upload_time_iso_8601": "2018-07-12T14:06:28.995755Z", "url": "https://files.pythonhosted.org/packages/c7/78/6b8ff87037b6f9c7b5f0bce786657131c4007ef183df021beded40261bcc/pyravendb-embedded-4.1.0.5.tar.gz", "yanked": false}], "4.1.0.6": [{"comment_text": "", "digests": {"md5": "603b3bd1ee07288225a640aed7754814", "sha256": "57c11b130584251ed545b7e3ac967a533934401062faf0c79320a31e1f209fa1"}, "downloads": -1, "filename": "pyravendb-embedded-4.1.0.6.tar.gz", "has_sig": false, "md5_digest": "603b3bd1ee07288225a640aed7754814", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20253535, "upload_time": "2018-07-12T14:53:20", "upload_time_iso_8601": "2018-07-12T14:53:20.254392Z", "url": "https://files.pythonhosted.org/packages/54/c8/b12f60cdf316489dd336e407d1f8aa5461ecbc6a71939201847814d782d3/pyravendb-embedded-4.1.0.6.tar.gz", "yanked": false}], "4.1.0.7": [{"comment_text": "", "digests": {"md5": "081d217a96a9ab07029f7cd298770b10", "sha256": "59da7bde99d2dc29386b2715466cffc0de9e93c1caff5e72f06276b7023a1ef2"}, "downloads": -1, "filename": "pyravendb-embedded-4.1.0.7.tar.gz", "has_sig": false, "md5_digest": "081d217a96a9ab07029f7cd298770b10", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20254056, "upload_time": "2018-07-16T12:17:14", "upload_time_iso_8601": "2018-07-16T12:17:14.710369Z", "url": "https://files.pythonhosted.org/packages/cd/8c/7ad72ac89a636fc230ae3a4b5cb4f693fa49a6f4b0039efc54b34a4f060d/pyravendb-embedded-4.1.0.7.tar.gz", "yanked": false}], "4.1.0.8": [{"comment_text": "", "digests": {"md5": "95e2b797e0143dbc95ad1eaea565df19", "sha256": "243ef25f93185fc106f8b6a1ffd8ecd080217630a14588f3fdd64d59b297f118"}, "downloads": -1, "filename": "pyravendb-embedded-4.1.0.8.tar.gz", "has_sig": false, "md5_digest": "95e2b797e0143dbc95ad1eaea565df19", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20254088, "upload_time": "2018-07-18T12:34:49", "upload_time_iso_8601": "2018-07-18T12:34:49.900870Z", "url": "https://files.pythonhosted.org/packages/5e/cd/7803a560c92a3e2a355e93e9bc99851ab82f079bd6ed1c5b0b9058ca7d26/pyravendb-embedded-4.1.0.8.tar.gz", "yanked": false}], "4.1.0.9": [{"comment_text": "", "digests": {"md5": "ae5aa8fca1581a66d61d2488fc84023e", "sha256": "01310eefcbe427b55459e9dec84f7d9eb9c78297428232c973036b9c550feb0c"}, "downloads": -1, "filename": "pyravendb-embedded-4.1.0.9.tar.gz", "has_sig": false, "md5_digest": "ae5aa8fca1581a66d61d2488fc84023e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20256540, "upload_time": "2018-07-30T14:25:00", "upload_time_iso_8601": "2018-07-30T14:25:00.006139Z", "url": "https://files.pythonhosted.org/packages/81/77/38e8cdd49c94f7e087ecc6f5ef60752419f79342613610b9ccda94d1615d/pyravendb-embedded-4.1.0.9.tar.gz", "yanked": false}], "4.1.1.0": [{"comment_text": "", "digests": {"md5": "089f2f4f97c5e5679db3bf073390b4bb", "sha256": "72204e6a825b35d4b1356b3a62518ec2ca909b1c51ab0fd9a09dbefc955ffc90"}, "downloads": -1, "filename": "pyravendb-embedded-4.1.1.0.tar.gz", "has_sig": false, "md5_digest": "089f2f4f97c5e5679db3bf073390b4bb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 26577116, "upload_time": "2018-07-30T14:30:28", "upload_time_iso_8601": "2018-07-30T14:30:28.513367Z", "url": "https://files.pythonhosted.org/packages/1e/9b/d2afa711356db69ca2010ebb798e588fe9dd2d89bb0acea0daeadff90d45/pyravendb-embedded-4.1.1.0.tar.gz", "yanked": false}], "4.1.1.1": [{"comment_text": "", "digests": {"md5": "32bb2e9ed8e7a169cb54fd6ef579167c", "sha256": "7f56e525186432c6f33c4c55f2339dbebc5bfd0178f5f169357548583fe60cb3"}, "downloads": -1, "filename": "pyravendb-embedded-4.1.1.1.tar.gz", "has_sig": false, "md5_digest": "32bb2e9ed8e7a169cb54fd6ef579167c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21154023, "upload_time": "2018-07-30T20:20:23", "upload_time_iso_8601": "2018-07-30T20:20:23.703210Z", "url": "https://files.pythonhosted.org/packages/f0/46/4eb681fbc855472f89104faef4db7c2731c6638015419a01e33812258dd7/pyravendb-embedded-4.1.1.1.tar.gz", "yanked": false}], "4.1.1.2": [{"comment_text": "", "digests": {"md5": "3178da74d2bb8df3d2e645bbeb1dd4c5", "sha256": "3d4066c6ae2b2e972c9fe3743f95096e9a491a493b3ab823e97ce2a9448c8706"}, "downloads": -1, "filename": "pyravendb-embedded-4.1.1.2.tar.gz", "has_sig": false, "md5_digest": "3178da74d2bb8df3d2e645bbeb1dd4c5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20705460, "upload_time": "2018-08-01T12:33:15", "upload_time_iso_8601": "2018-08-01T12:33:15.880325Z", "url": "https://files.pythonhosted.org/packages/eb/c8/22b14671fc223e3b5c18c7110b45676a6607e7cf77156e79011354ef62ea/pyravendb-embedded-4.1.1.2.tar.gz", "yanked": false}], "4.1.1.3": [{"comment_text": "", "digests": {"md5": "01bf4e60e8a9149795dcbb33a1b5753e", "sha256": "b3d90623e580b7bf970064d17b8a4b308ac054d5eab575a763cbd761042a24ea"}, "downloads": -1, "filename": "pyravendb-embedded-4.1.1.3.tar.gz", "has_sig": false, "md5_digest": "01bf4e60e8a9149795dcbb33a1b5753e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23688236, "upload_time": "2018-09-02T11:29:48", "upload_time_iso_8601": "2018-09-02T11:29:48.656763Z", "url": "https://files.pythonhosted.org/packages/41/03/44692d7557c8ef7b41c75752e94bac00852f720480ae26fb8b866f55a122/pyravendb-embedded-4.1.1.3.tar.gz", "yanked": false}], "4.1.1.4": [{"comment_text": "", "digests": {"md5": "851088fd7ce77e7a7d31b01067fa4fa1", "sha256": "fe65d9f40827934d4521d5a254fd72348970b48bc949055e7929bf1efce26172"}, "downloads": -1, "filename": "pyravendb-embedded-4.1.1.4.tar.gz", "has_sig": false, "md5_digest": "851088fd7ce77e7a7d31b01067fa4fa1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23688492, "upload_time": "2018-09-02T11:47:30", "upload_time_iso_8601": "2018-09-02T11:47:30.398480Z", "url": "https://files.pythonhosted.org/packages/0c/5b/beb689220f6aac64368b6862d40028c3a66e9cef1853221e9341dc97feed/pyravendb-embedded-4.1.1.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "851088fd7ce77e7a7d31b01067fa4fa1", "sha256": "fe65d9f40827934d4521d5a254fd72348970b48bc949055e7929bf1efce26172"}, "downloads": -1, "filename": "pyravendb-embedded-4.1.1.4.tar.gz", "has_sig": false, "md5_digest": "851088fd7ce77e7a7d31b01067fa4fa1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23688492, "upload_time": "2018-09-02T11:47:30", "upload_time_iso_8601": "2018-09-02T11:47:30.398480Z", "url": "https://files.pythonhosted.org/packages/0c/5b/beb689220f6aac64368b6862d40028c3a66e9cef1853221e9341dc97feed/pyravendb-embedded-4.1.1.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:58:04 2020"}