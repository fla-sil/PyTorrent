{"info": {"author": "Tornike Skhulukhia", "author_email": "Tornike.Skhulukhia.1@iliauni.edu.ge", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# Automate browser the easy way.\n### Python library to automate webbrowser.\n\n**Most functionality is tested on Chrome and Firefox, but may work on others as well.**  \nThis library made my working process of browser automation much easier,\nhope it will help your team too.  \nHere you can see short information about the module, but to see what is available,  \nmake sure to check documentation of available functions.\n***\n\n# Quick examples of usage\n\n\n### 1. Initialize the browser\n\n\n```python\n# at first, initialize BrowserHelper object\nfrom br_helper.br_helper import BrowserHelper\n\nbr =  BrowserHelper(browser=\"chrome\", # you can also use firefox here\n                    driver_path='/home/tornike/Desktop/bin/chromedriver')\n\n# useful notes:\n# it you want to use same browser and driver_path most of the time,\n# after the installation you can run second line without\n# driver_path argument and follow the instructions in terminal/interpreter.\n\n# In this case, module will try to scan your system and find\n# any file with \"chromedriver\" or \"geckodriver\"(in case of firefox) \n# in name, then it lists all matches, and you can choose which one to use\n# by default if no driver_path argument is passed.\n\n# in previous step you can also pass full file path of driver\n# to use, if it is not listed,\n\n# ! make sure you are using appropriate version of \n# chromedriver/geckodriver for your chrome/firefox browser !\n```\n\n\n```python\n# if you want to use proxy, with hidden browser(maybe to run on server without GUI),  \n# and also hide images on pages, and use custom download location, you can supply options  \n# argument when creating an object, with similar form: \nbr = BrowserHelper(\"chrome\",\n                   driver_path='your_driver_file_path',\n                   options={\n                            'proxy': 'ip_address:port_number',\n                            'visibility': False,\n                            'hide_images': True,\n                            'download_location': 'your_folder_path'})\n```\n\n**All keys that you can use in previous step**\n<pre>\n   Key name                 Value                   Value Type       \n--------------------------------------------------------------\n* visibility            - True/False                - boolean\n* download_location     - /path/to/folder           - string\n* window_size           - (width, height)           - tuple\n* hide_images           - True/False                - boolean\n* disable_javascript    - True/False                - boolean\n* proxy                 - ip:port                   - string\n* user_data_dir         - path/to/chrome/profile    - string\n* disable_infobars      - True/False                - boolean\n</pre>\n\n***\n\n### 2. Basic examples\n\n\n```python\n# get a webpage\nbr.get(\"example.com\")\n\n# click on an element with partial text match\nbr.find(\"More\").click()\n# find is a powerfull method, check its documentation ( type: >>>help(br.find) )\n# to see how you can make case insensitive, exact or specific\n# tag-based element searches with just text\n\n# in some cases, it is  better to use the method click,\n# and pass matched element, which will try to click element using\n# javascript, and by default try to click its parent in case of error.\n# see click method for more information (type >>>help(br.click) )\n\n# go back in history\nbr._b()\n# and forward\nbr._f()\n```\n\n\n```python\n# scroll to the bottom\nbr.bottom()\n# go back\nbr.top()\n# refresh\nbr.r()\n\n# log some information\nbr.log_info(\"successfully refreshed the page\")\n# after this step, check new log.txt file in your current working directory.\n# To use different log file, just pass log_file argument when initializing br object,\n# with preferred full path of log file to use later.\n\n# get new page\nbr.get(\"uct.ge\")\n```\n\n```python\n# locating elements to interact with them\n\n# click on first matching element\n# by css selector\nbr.css1(\"a#programming\").click()\n# or use xpath\nbr.xpath1(\"//a[@id='programming']\").click()\n# you will get an IndexError if element was not found,\n# so you can consider using css, or xpath, instead of css1 and xpath1 methods\n# and check if returned list is not empty to continue working.\n```\n\n\n```python\n# locating elements to parse a webpage data\nelements = br.bcss(\".class_of_your_element\")\n# here first 'b' stands for bs4 library, which is used with this method\n# we also have bcss1 to find first match.\n```\n\n\n```python\n# wait until specific loader, or other element disappears\nbr.wait_until_disappears(\"type_your_css_or_xpath_selector_of_loader_here\")\n```\n\n\n```python\n# take a screenshot\nbr.google(\"why to visit Georgia\")\nbr.screenshot(image_name='screenshot.png')\n```\n\n\n```python\n# run javascript code\nreally = br.js('console.log(\"Python is cool\"); return true')\n```\n\n\n```python\n# login to a website\nbr.login(\"facebook.com\", (\"username\", \"password\"))\nbr.login(\"twitter.com/login\", (\"username\", \"password\"))\nbr.login(\"linkedin.com\", (\"username\", \"password\"))\n\n# if you want to check if login was successfull\n# in most basic cases you can rely on returned value of login method\n# otherwise, define your own logic, for example\nif br.login(\"twitter.com/login\", (\"your_username\", \"your_password\")):\n    print(\"Hello, twitter\")\nelse:\n    print(\"Unsuccessfull login\")\n```\n\n\n```python\n# if you are tired, try\nbr.mario()  # we do not have reliable methods to play it yet...\n```\n\n\n```python\n# or have some fun with this few lines of code\nbr.dino() # works for Google Chrome\n\nimport time, random\n\nwhile True:\n    time.sleep(random.randint(1, 5)/10)\n    br.press(\"up\")  # ! this method is still in development !\n```\n\n\n```python\n# Please do not try this!\nbr.get(\"finder.ge\")\nbr._dance()\n```\n\n\n### 3. Run multiple browser instances in parallel(almost)\nModule has helper class, for cases when we want to run more than one instance of browser at the same time. It allows you to automatically split given urls into number of instances that you want to get using browser, get them and call callback function after each request.\nThat specific class uses information about DRIVER_PATH, that was defined earlier, so make sure before using it to define path in modules file itself, or just initialize BrowserHelper class instance without giving driver_path and when it finds correct driver path, type the number of it in terminal to save it in file automatically(this method of getting information will probably change in next releases).\n\nHere is an examples of using it, with explanations:\n\n#### Example 1\n\n\n```python\n'''\n    Code to download multiple files using given urls.\n    Each given url should return file directly, when opened.\n\n    Please take into account the fact that in this example \n    we use very simple lambda expression as our callback argument\n    to just print urls, not waiting until downloads finish,\n    so in real cases, you may want to use a bit more complex function,\n    which also waits before downloads are completed.\n'''\n\nfrom br_helper.br_helper import MultiBr\nimport os\n\n# url pattern to use (I found that site recently to test the functionality)\nurls = ['http://ipv4.download.thinkbroadband.com/1MB.zip' for i in range(100)]\n\n# initialize\nmbr = MultiBr()\n\n# start processes\nmbr.get_with_multi(\n        # use thread\n        multi_type=\"thread\",\n        # number of threads\n        multi_num=5,\n        # options for BrowserHelper instance\n        options={\"download_location\": os.path.abspath(\"downloaded_files\")},\n        # direct download urls\n        urls=urls,\n        # just print url\n        callback=lambda br: print(br.meta['url'])\n    )\n###########\n# Enjoy ! #\n###########\n\n```\n\n#### Example 2\n\n\n```python\n\n'''\n    what test does:\n        Opens few browser instances\n        using separate threads/processes,\n\n        loads finder.ge-website, searches for specific\n        word, parses returned page data and saves\n        results in json lines or csv file.\n\n    # make sure that in br_helper you have already saved driver location #\n'''\n\nfrom br_helper.br_helper import MultiBr\nimport time\n\n# for now, module is mainly designed for get requests\n# but we can do also posts this way\n# not most efficient, but should work\n\n\n##########################################\n# define file format to save results in\n##########################################\n\nCASE = \"csv\"  # comma separated values\n\n# CASE = \"jl\"   # json lines\n\n##########################################\n\n\n# define what words we want search for\nsearch_words = [\"Javascript\", \"C#\", \"PHP\", \"Python\", \"Golang\", \"\"] * 3\n\n# say that we want to get same urls multiple times\nmain_url = \"finder.ge\"\nurls = [main_url for i in search_words]\n\n\n# define callback function\n# it will be called every time browser loads our url\ndef callback(br):\n    '''\n    when called, br_helper object (browser) will be passed here.\n    Also in each case we will have access to requested page-s url\n    with br-s meta dictionary(using url key).\n\n    If we supplied other meta data, in get_with_multi method\n    we will have access to this data here.\n    '''\n\n    # at first, make sure that there are no clicks needed\n    # (site specific - go to finder.ge first time to see it)\n\n    if br.find(\"\u10d7\u10d0\u10dc\u10ee\u10db\u10dd\u10d1\u10d0\", all_=True):\n        br.find(\"\u10d7\u10d0\u10dc\u10ee\u10db\u10dd\u10d1\u10d0\").click()\n        br.find(\"\u10d2\u10d0\u10d2\u10e0\u10eb\u10d4\u10da\u10d4\u10d1\u10d0\").click()\n        br.find(\"\u10d0\u10e6\u10ec\u10d4\u10e0\u10d0\").click()\n\n    # search\n    # with urls we also will pass word as meta data, so get it here\n\n    time.sleep(2)  # to avoid dos restriction(503)\n    search_word = br.meta[\"search_word\"]\n\n    # Just in case print check\n    print(br.meta[\"url\"])\n\n    # find input(for different selectors see br_helper's methods)\n    br.css1(\"input[placeholder]\").send_keys(search_word)\n    br.css1(\"input[value='\u10eb\u10d8\u10d4\u10d1\u10d0']\").click()\n    # breakpoint()\n\n    # get data (not the most reliable way)\n    #######################################\n    if CASE == \"jl\":\n        ######################################\n        # jl case (generate dictionary)\n        ######################################\n        data = [{k: j.strip() for j, k in\n                zip(i.text.split(\"\\n\"), \n                    [\"\u10d3\u10d0\u10e1\u10d0\u10ee\u10d4\u10da\u10d4\u10d1\u10d0\", \"\u10d9\u10dd\u10db\u10de\u10d0\u10dc\u10d8\u10d0\", \"\u10d1\u10dd\u10da\u10dd \u10d5\u10d0\u10d3\u10d0\"])}\n                for i in br.css(\"div.content\")]\n\n        # we can save data here, by hand,\n        # but this time we are going\n        # to set save_results argument to True, so\n        # data returned from this function\n        # will be saved in\n        # jl file named data_CURRENT_TIME.jl\n\n        return {\n            \"search_word\": search_word,\n            \"vacancies_data\": data}\n        ######################################\n    elif CASE == \"csv\":\n        #######################################\n        # csv case (generate list)\n        ######################################\n        data = [[search_word] +\n                i.text.split(\"\\n\") for i in br.css(\"div.content\")]\n        headers = [\"\u10e1\u10d8\u10e2\u10e7\u10d5\u10d0\", \"\u10d3\u10d0\u10e1\u10d0\u10ee\u10d4\u10da\u10d4\u10d1\u10d0\", \"\u10d9\u10dd\u10db\u10de\u10d0\u10dc\u10d8\u10d0\", \"\u10d1\u10dd\u10da\u10dd \u10d5\u10d0\u10d3\u10d0\"]\n\n        return (headers, data)\n        #######################################\n\n\n# supported save methods for now\nassert CASE in ['jl', 'csv']\n\n# initialize\nmbr = MultiBr(save_format=CASE)  # save jl or csv\n\n# start processes\nmbr.get_with_multi(\n        multi_type=\"thread\",  # we can use process or thread here\n        multi_num=5,           # how many of them\n        options={},            # options to use in browser in br_helper class\n                               # useful if we want to pass different proxies,\n                               # in which case options will be list of\n                               # options dicts\n\n        urls=urls,             # all urls we want to load\n        callback=callback,     # our function above\n        save_results=True,     # do we want to save callback answers in jl\n                               # or csv file?\n\n                               # if we are adding meta data, it should be\n                               # list of dictionaries with same length\n                               # and sequence as urls and all data in\n                               # these dictionaries will be available\n                               # in callback in br.meta dictionary.\n                               # do not use url as keys, it will be added\n                               # with information about requested/\n                               # not redirected(if that is the case)\n                               # url, every time automatically\n        meta=[{\"search_word\": i} for i in search_words]\n    )\n```\n\n# Installation methods\n1. pip install br-helper\n2. git clone https://github.com/Tornike-Skhulukhia/browser_automation_helper\n\n# Dependencies\n1. selenium\n2. beautifulsoup4\n\n### And downloaded\n* chromedriver - if you want to use Chrome\n* geckodriver - if you want to use Firefox\n\n# Python version\nCode is tested on **Python3.6** and above\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Tornike-Skhulukhia/browser_automation_helper", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "br-helper", "package_url": "https://pypi.org/project/br-helper/", "platform": "", "project_url": "https://pypi.org/project/br-helper/", "project_urls": {"Homepage": "https://github.com/Tornike-Skhulukhia/browser_automation_helper"}, "release_url": "https://pypi.org/project/br-helper/0.1.4/", "requires_dist": ["selenium (>=3.141.0)", "beautifulsoup4 (>=4.6.0)"], "requires_python": ">=3.6", "summary": "Automate browser the easy way", "version": "0.1.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Automate browser the easy way.</h1>\n<h3>Python library to automate webbrowser.</h3>\n<p><strong>Most functionality is tested on Chrome and Firefox, but may work on others as well.</strong><br>\nThis library made my working process of browser automation much easier,\nhope it will help your team too.<br>\nHere you can see short information about the module, but to see what is available,<br>\nmake sure to check documentation of available functions.</p>\n<hr>\n<h1>Quick examples of usage</h1>\n<h3>1. Initialize the browser</h3>\n<pre><span class=\"c1\"># at first, initialize BrowserHelper object</span>\n<span class=\"kn\">from</span> <span class=\"nn\">br_helper.br_helper</span> <span class=\"kn\">import</span> <span class=\"n\">BrowserHelper</span>\n\n<span class=\"n\">br</span> <span class=\"o\">=</span>  <span class=\"n\">BrowserHelper</span><span class=\"p\">(</span><span class=\"n\">browser</span><span class=\"o\">=</span><span class=\"s2\">\"chrome\"</span><span class=\"p\">,</span> <span class=\"c1\"># you can also use firefox here</span>\n                    <span class=\"n\">driver_path</span><span class=\"o\">=</span><span class=\"s1\">'/home/tornike/Desktop/bin/chromedriver'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># useful notes:</span>\n<span class=\"c1\"># it you want to use same browser and driver_path most of the time,</span>\n<span class=\"c1\"># after the installation you can run second line without</span>\n<span class=\"c1\"># driver_path argument and follow the instructions in terminal/interpreter.</span>\n\n<span class=\"c1\"># In this case, module will try to scan your system and find</span>\n<span class=\"c1\"># any file with \"chromedriver\" or \"geckodriver\"(in case of firefox) </span>\n<span class=\"c1\"># in name, then it lists all matches, and you can choose which one to use</span>\n<span class=\"c1\"># by default if no driver_path argument is passed.</span>\n\n<span class=\"c1\"># in previous step you can also pass full file path of driver</span>\n<span class=\"c1\"># to use, if it is not listed,</span>\n\n<span class=\"c1\"># ! make sure you are using appropriate version of </span>\n<span class=\"c1\"># chromedriver/geckodriver for your chrome/firefox browser !</span>\n</pre>\n<pre><span class=\"c1\"># if you want to use proxy, with hidden browser(maybe to run on server without GUI),  </span>\n<span class=\"c1\"># and also hide images on pages, and use custom download location, you can supply options  </span>\n<span class=\"c1\"># argument when creating an object, with similar form: </span>\n<span class=\"n\">br</span> <span class=\"o\">=</span> <span class=\"n\">BrowserHelper</span><span class=\"p\">(</span><span class=\"s2\">\"chrome\"</span><span class=\"p\">,</span>\n                   <span class=\"n\">driver_path</span><span class=\"o\">=</span><span class=\"s1\">'your_driver_file_path'</span><span class=\"p\">,</span>\n                   <span class=\"n\">options</span><span class=\"o\">=</span><span class=\"p\">{</span>\n                            <span class=\"s1\">'proxy'</span><span class=\"p\">:</span> <span class=\"s1\">'ip_address:port_number'</span><span class=\"p\">,</span>\n                            <span class=\"s1\">'visibility'</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n                            <span class=\"s1\">'hide_images'</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n                            <span class=\"s1\">'download_location'</span><span class=\"p\">:</span> <span class=\"s1\">'your_folder_path'</span><span class=\"p\">})</span>\n</pre>\n<p><strong>All keys that you can use in previous step</strong></p>\n<pre>   Key name                 Value                   Value Type       \n--------------------------------------------------------------\n* visibility            - True/False                - boolean\n* download_location     - /path/to/folder           - string\n* window_size           - (width, height)           - tuple\n* hide_images           - True/False                - boolean\n* disable_javascript    - True/False                - boolean\n* proxy                 - ip:port                   - string\n* user_data_dir         - path/to/chrome/profile    - string\n* disable_infobars      - True/False                - boolean\n</pre>\n<hr>\n<h3>2. Basic examples</h3>\n<pre><span class=\"c1\"># get a webpage</span>\n<span class=\"n\">br</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"example.com\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># click on an element with partial text match</span>\n<span class=\"n\">br</span><span class=\"o\">.</span><span class=\"n\">find</span><span class=\"p\">(</span><span class=\"s2\">\"More\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">click</span><span class=\"p\">()</span>\n<span class=\"c1\"># find is a powerfull method, check its documentation ( type: &gt;&gt;&gt;help(br.find) )</span>\n<span class=\"c1\"># to see how you can make case insensitive, exact or specific</span>\n<span class=\"c1\"># tag-based element searches with just text</span>\n\n<span class=\"c1\"># in some cases, it is  better to use the method click,</span>\n<span class=\"c1\"># and pass matched element, which will try to click element using</span>\n<span class=\"c1\"># javascript, and by default try to click its parent in case of error.</span>\n<span class=\"c1\"># see click method for more information (type &gt;&gt;&gt;help(br.click) )</span>\n\n<span class=\"c1\"># go back in history</span>\n<span class=\"n\">br</span><span class=\"o\">.</span><span class=\"n\">_b</span><span class=\"p\">()</span>\n<span class=\"c1\"># and forward</span>\n<span class=\"n\">br</span><span class=\"o\">.</span><span class=\"n\">_f</span><span class=\"p\">()</span>\n</pre>\n<pre><span class=\"c1\"># scroll to the bottom</span>\n<span class=\"n\">br</span><span class=\"o\">.</span><span class=\"n\">bottom</span><span class=\"p\">()</span>\n<span class=\"c1\"># go back</span>\n<span class=\"n\">br</span><span class=\"o\">.</span><span class=\"n\">top</span><span class=\"p\">()</span>\n<span class=\"c1\"># refresh</span>\n<span class=\"n\">br</span><span class=\"o\">.</span><span class=\"n\">r</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># log some information</span>\n<span class=\"n\">br</span><span class=\"o\">.</span><span class=\"n\">log_info</span><span class=\"p\">(</span><span class=\"s2\">\"successfully refreshed the page\"</span><span class=\"p\">)</span>\n<span class=\"c1\"># after this step, check new log.txt file in your current working directory.</span>\n<span class=\"c1\"># To use different log file, just pass log_file argument when initializing br object,</span>\n<span class=\"c1\"># with preferred full path of log file to use later.</span>\n\n<span class=\"c1\"># get new page</span>\n<span class=\"n\">br</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"uct.ge\"</span><span class=\"p\">)</span>\n</pre>\n<pre><span class=\"c1\"># locating elements to interact with them</span>\n\n<span class=\"c1\"># click on first matching element</span>\n<span class=\"c1\"># by css selector</span>\n<span class=\"n\">br</span><span class=\"o\">.</span><span class=\"n\">css1</span><span class=\"p\">(</span><span class=\"s2\">\"a#programming\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">click</span><span class=\"p\">()</span>\n<span class=\"c1\"># or use xpath</span>\n<span class=\"n\">br</span><span class=\"o\">.</span><span class=\"n\">xpath1</span><span class=\"p\">(</span><span class=\"s2\">\"//a[@id='programming']\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">click</span><span class=\"p\">()</span>\n<span class=\"c1\"># you will get an IndexError if element was not found,</span>\n<span class=\"c1\"># so you can consider using css, or xpath, instead of css1 and xpath1 methods</span>\n<span class=\"c1\"># and check if returned list is not empty to continue working.</span>\n</pre>\n<pre><span class=\"c1\"># locating elements to parse a webpage data</span>\n<span class=\"n\">elements</span> <span class=\"o\">=</span> <span class=\"n\">br</span><span class=\"o\">.</span><span class=\"n\">bcss</span><span class=\"p\">(</span><span class=\"s2\">\".class_of_your_element\"</span><span class=\"p\">)</span>\n<span class=\"c1\"># here first 'b' stands for bs4 library, which is used with this method</span>\n<span class=\"c1\"># we also have bcss1 to find first match.</span>\n</pre>\n<pre><span class=\"c1\"># wait until specific loader, or other element disappears</span>\n<span class=\"n\">br</span><span class=\"o\">.</span><span class=\"n\">wait_until_disappears</span><span class=\"p\">(</span><span class=\"s2\">\"type_your_css_or_xpath_selector_of_loader_here\"</span><span class=\"p\">)</span>\n</pre>\n<pre><span class=\"c1\"># take a screenshot</span>\n<span class=\"n\">br</span><span class=\"o\">.</span><span class=\"n\">google</span><span class=\"p\">(</span><span class=\"s2\">\"why to visit Georgia\"</span><span class=\"p\">)</span>\n<span class=\"n\">br</span><span class=\"o\">.</span><span class=\"n\">screenshot</span><span class=\"p\">(</span><span class=\"n\">image_name</span><span class=\"o\">=</span><span class=\"s1\">'screenshot.png'</span><span class=\"p\">)</span>\n</pre>\n<pre><span class=\"c1\"># run javascript code</span>\n<span class=\"n\">really</span> <span class=\"o\">=</span> <span class=\"n\">br</span><span class=\"o\">.</span><span class=\"n\">js</span><span class=\"p\">(</span><span class=\"s1\">'console.log(\"Python is cool\"); return true'</span><span class=\"p\">)</span>\n</pre>\n<pre><span class=\"c1\"># login to a website</span>\n<span class=\"n\">br</span><span class=\"o\">.</span><span class=\"n\">login</span><span class=\"p\">(</span><span class=\"s2\">\"facebook.com\"</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"s2\">\"username\"</span><span class=\"p\">,</span> <span class=\"s2\">\"password\"</span><span class=\"p\">))</span>\n<span class=\"n\">br</span><span class=\"o\">.</span><span class=\"n\">login</span><span class=\"p\">(</span><span class=\"s2\">\"twitter.com/login\"</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"s2\">\"username\"</span><span class=\"p\">,</span> <span class=\"s2\">\"password\"</span><span class=\"p\">))</span>\n<span class=\"n\">br</span><span class=\"o\">.</span><span class=\"n\">login</span><span class=\"p\">(</span><span class=\"s2\">\"linkedin.com\"</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"s2\">\"username\"</span><span class=\"p\">,</span> <span class=\"s2\">\"password\"</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># if you want to check if login was successfull</span>\n<span class=\"c1\"># in most basic cases you can rely on returned value of login method</span>\n<span class=\"c1\"># otherwise, define your own logic, for example</span>\n<span class=\"k\">if</span> <span class=\"n\">br</span><span class=\"o\">.</span><span class=\"n\">login</span><span class=\"p\">(</span><span class=\"s2\">\"twitter.com/login\"</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"s2\">\"your_username\"</span><span class=\"p\">,</span> <span class=\"s2\">\"your_password\"</span><span class=\"p\">)):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Hello, twitter\"</span><span class=\"p\">)</span>\n<span class=\"k\">else</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Unsuccessfull login\"</span><span class=\"p\">)</span>\n</pre>\n<pre><span class=\"c1\"># if you are tired, try</span>\n<span class=\"n\">br</span><span class=\"o\">.</span><span class=\"n\">mario</span><span class=\"p\">()</span>  <span class=\"c1\"># we do not have reliable methods to play it yet...</span>\n</pre>\n<pre><span class=\"c1\"># or have some fun with this few lines of code</span>\n<span class=\"n\">br</span><span class=\"o\">.</span><span class=\"n\">dino</span><span class=\"p\">()</span> <span class=\"c1\"># works for Google Chrome</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">time</span><span class=\"o\">,</span> <span class=\"nn\">random</span>\n\n<span class=\"k\">while</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n    <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">randint</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">)</span><span class=\"o\">/</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n    <span class=\"n\">br</span><span class=\"o\">.</span><span class=\"n\">press</span><span class=\"p\">(</span><span class=\"s2\">\"up\"</span><span class=\"p\">)</span>  <span class=\"c1\"># ! this method is still in development !</span>\n</pre>\n<pre><span class=\"c1\"># Please do not try this!</span>\n<span class=\"n\">br</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"finder.ge\"</span><span class=\"p\">)</span>\n<span class=\"n\">br</span><span class=\"o\">.</span><span class=\"n\">_dance</span><span class=\"p\">()</span>\n</pre>\n<h3>3. Run multiple browser instances in parallel(almost)</h3>\n<p>Module has helper class, for cases when we want to run more than one instance of browser at the same time. It allows you to automatically split given urls into number of instances that you want to get using browser, get them and call callback function after each request.\nThat specific class uses information about DRIVER_PATH, that was defined earlier, so make sure before using it to define path in modules file itself, or just initialize BrowserHelper class instance without giving driver_path and when it finds correct driver path, type the number of it in terminal to save it in file automatically(this method of getting information will probably change in next releases).</p>\n<p>Here is an examples of using it, with explanations:</p>\n<h4>Example 1</h4>\n<pre><span class=\"sd\">'''</span>\n<span class=\"sd\">    Code to download multiple files using given urls.</span>\n<span class=\"sd\">    Each given url should return file directly, when opened.</span>\n\n<span class=\"sd\">    Please take into account the fact that in this example </span>\n<span class=\"sd\">    we use very simple lambda expression as our callback argument</span>\n<span class=\"sd\">    to just print urls, not waiting until downloads finish,</span>\n<span class=\"sd\">    so in real cases, you may want to use a bit more complex function,</span>\n<span class=\"sd\">    which also waits before downloads are completed.</span>\n<span class=\"sd\">'''</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">br_helper.br_helper</span> <span class=\"kn\">import</span> <span class=\"n\">MultiBr</span>\n<span class=\"kn\">import</span> <span class=\"nn\">os</span>\n\n<span class=\"c1\"># url pattern to use (I found that site recently to test the functionality)</span>\n<span class=\"n\">urls</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'http://ipv4.download.thinkbroadband.com/1MB.zip'</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">)]</span>\n\n<span class=\"c1\"># initialize</span>\n<span class=\"n\">mbr</span> <span class=\"o\">=</span> <span class=\"n\">MultiBr</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># start processes</span>\n<span class=\"n\">mbr</span><span class=\"o\">.</span><span class=\"n\">get_with_multi</span><span class=\"p\">(</span>\n        <span class=\"c1\"># use thread</span>\n        <span class=\"n\">multi_type</span><span class=\"o\">=</span><span class=\"s2\">\"thread\"</span><span class=\"p\">,</span>\n        <span class=\"c1\"># number of threads</span>\n        <span class=\"n\">multi_num</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">,</span>\n        <span class=\"c1\"># options for BrowserHelper instance</span>\n        <span class=\"n\">options</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"download_location\"</span><span class=\"p\">:</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">abspath</span><span class=\"p\">(</span><span class=\"s2\">\"downloaded_files\"</span><span class=\"p\">)},</span>\n        <span class=\"c1\"># direct download urls</span>\n        <span class=\"n\">urls</span><span class=\"o\">=</span><span class=\"n\">urls</span><span class=\"p\">,</span>\n        <span class=\"c1\"># just print url</span>\n        <span class=\"n\">callback</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">br</span><span class=\"p\">:</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">br</span><span class=\"o\">.</span><span class=\"n\">meta</span><span class=\"p\">[</span><span class=\"s1\">'url'</span><span class=\"p\">])</span>\n    <span class=\"p\">)</span>\n<span class=\"c1\">###########</span>\n<span class=\"c1\"># Enjoy ! #</span>\n<span class=\"c1\">###########</span>\n</pre>\n<h4>Example 2</h4>\n<pre><span class=\"sd\">'''</span>\n<span class=\"sd\">    what test does:</span>\n<span class=\"sd\">        Opens few browser instances</span>\n<span class=\"sd\">        using separate threads/processes,</span>\n\n<span class=\"sd\">        loads finder.ge-website, searches for specific</span>\n<span class=\"sd\">        word, parses returned page data and saves</span>\n<span class=\"sd\">        results in json lines or csv file.</span>\n\n<span class=\"sd\">    # make sure that in br_helper you have already saved driver location #</span>\n<span class=\"sd\">'''</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">br_helper.br_helper</span> <span class=\"kn\">import</span> <span class=\"n\">MultiBr</span>\n<span class=\"kn\">import</span> <span class=\"nn\">time</span>\n\n<span class=\"c1\"># for now, module is mainly designed for get requests</span>\n<span class=\"c1\"># but we can do also posts this way</span>\n<span class=\"c1\"># not most efficient, but should work</span>\n\n\n<span class=\"c1\">##########################################</span>\n<span class=\"c1\"># define file format to save results in</span>\n<span class=\"c1\">##########################################</span>\n\n<span class=\"n\">CASE</span> <span class=\"o\">=</span> <span class=\"s2\">\"csv\"</span>  <span class=\"c1\"># comma separated values</span>\n\n<span class=\"c1\"># CASE = \"jl\"   # json lines</span>\n\n<span class=\"c1\">##########################################</span>\n\n\n<span class=\"c1\"># define what words we want search for</span>\n<span class=\"n\">search_words</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">\"Javascript\"</span><span class=\"p\">,</span> <span class=\"s2\">\"C#\"</span><span class=\"p\">,</span> <span class=\"s2\">\"PHP\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Python\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Golang\"</span><span class=\"p\">,</span> <span class=\"s2\">\"\"</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"mi\">3</span>\n\n<span class=\"c1\"># say that we want to get same urls multiple times</span>\n<span class=\"n\">main_url</span> <span class=\"o\">=</span> <span class=\"s2\">\"finder.ge\"</span>\n<span class=\"n\">urls</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">main_url</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">search_words</span><span class=\"p\">]</span>\n\n\n<span class=\"c1\"># define callback function</span>\n<span class=\"c1\"># it will be called every time browser loads our url</span>\n<span class=\"k\">def</span> <span class=\"nf\">callback</span><span class=\"p\">(</span><span class=\"n\">br</span><span class=\"p\">):</span>\n    <span class=\"sd\">'''</span>\n<span class=\"sd\">    when called, br_helper object (browser) will be passed here.</span>\n<span class=\"sd\">    Also in each case we will have access to requested page-s url</span>\n<span class=\"sd\">    with br-s meta dictionary(using url key).</span>\n\n<span class=\"sd\">    If we supplied other meta data, in get_with_multi method</span>\n<span class=\"sd\">    we will have access to this data here.</span>\n<span class=\"sd\">    '''</span>\n\n    <span class=\"c1\"># at first, make sure that there are no clicks needed</span>\n    <span class=\"c1\"># (site specific - go to finder.ge first time to see it)</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">br</span><span class=\"o\">.</span><span class=\"n\">find</span><span class=\"p\">(</span><span class=\"s2\">\"\u10d7\u10d0\u10dc\u10ee\u10db\u10dd\u10d1\u10d0\"</span><span class=\"p\">,</span> <span class=\"n\">all_</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">):</span>\n        <span class=\"n\">br</span><span class=\"o\">.</span><span class=\"n\">find</span><span class=\"p\">(</span><span class=\"s2\">\"\u10d7\u10d0\u10dc\u10ee\u10db\u10dd\u10d1\u10d0\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">click</span><span class=\"p\">()</span>\n        <span class=\"n\">br</span><span class=\"o\">.</span><span class=\"n\">find</span><span class=\"p\">(</span><span class=\"s2\">\"\u10d2\u10d0\u10d2\u10e0\u10eb\u10d4\u10da\u10d4\u10d1\u10d0\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">click</span><span class=\"p\">()</span>\n        <span class=\"n\">br</span><span class=\"o\">.</span><span class=\"n\">find</span><span class=\"p\">(</span><span class=\"s2\">\"\u10d0\u10e6\u10ec\u10d4\u10e0\u10d0\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">click</span><span class=\"p\">()</span>\n\n    <span class=\"c1\"># search</span>\n    <span class=\"c1\"># with urls we also will pass word as meta data, so get it here</span>\n\n    <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>  <span class=\"c1\"># to avoid dos restriction(503)</span>\n    <span class=\"n\">search_word</span> <span class=\"o\">=</span> <span class=\"n\">br</span><span class=\"o\">.</span><span class=\"n\">meta</span><span class=\"p\">[</span><span class=\"s2\">\"search_word\"</span><span class=\"p\">]</span>\n\n    <span class=\"c1\"># Just in case print check</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">br</span><span class=\"o\">.</span><span class=\"n\">meta</span><span class=\"p\">[</span><span class=\"s2\">\"url\"</span><span class=\"p\">])</span>\n\n    <span class=\"c1\"># find input(for different selectors see br_helper's methods)</span>\n    <span class=\"n\">br</span><span class=\"o\">.</span><span class=\"n\">css1</span><span class=\"p\">(</span><span class=\"s2\">\"input[placeholder]\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">send_keys</span><span class=\"p\">(</span><span class=\"n\">search_word</span><span class=\"p\">)</span>\n    <span class=\"n\">br</span><span class=\"o\">.</span><span class=\"n\">css1</span><span class=\"p\">(</span><span class=\"s2\">\"input[value='\u10eb\u10d8\u10d4\u10d1\u10d0']\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">click</span><span class=\"p\">()</span>\n    <span class=\"c1\"># breakpoint()</span>\n\n    <span class=\"c1\"># get data (not the most reliable way)</span>\n    <span class=\"c1\">#######################################</span>\n    <span class=\"k\">if</span> <span class=\"n\">CASE</span> <span class=\"o\">==</span> <span class=\"s2\">\"jl\"</span><span class=\"p\">:</span>\n        <span class=\"c1\">######################################</span>\n        <span class=\"c1\"># jl case (generate dictionary)</span>\n        <span class=\"c1\">######################################</span>\n        <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">[{</span><span class=\"n\">k</span><span class=\"p\">:</span> <span class=\"n\">j</span><span class=\"o\">.</span><span class=\"n\">strip</span><span class=\"p\">()</span> <span class=\"k\">for</span> <span class=\"n\">j</span><span class=\"p\">,</span> <span class=\"n\">k</span> <span class=\"ow\">in</span>\n                <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">.</span><span class=\"n\">text</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s2\">\"</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"p\">),</span> \n                    <span class=\"p\">[</span><span class=\"s2\">\"\u10d3\u10d0\u10e1\u10d0\u10ee\u10d4\u10da\u10d4\u10d1\u10d0\"</span><span class=\"p\">,</span> <span class=\"s2\">\"\u10d9\u10dd\u10db\u10de\u10d0\u10dc\u10d8\u10d0\"</span><span class=\"p\">,</span> <span class=\"s2\">\"\u10d1\u10dd\u10da\u10dd \u10d5\u10d0\u10d3\u10d0\"</span><span class=\"p\">])}</span>\n                <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">br</span><span class=\"o\">.</span><span class=\"n\">css</span><span class=\"p\">(</span><span class=\"s2\">\"div.content\"</span><span class=\"p\">)]</span>\n\n        <span class=\"c1\"># we can save data here, by hand,</span>\n        <span class=\"c1\"># but this time we are going</span>\n        <span class=\"c1\"># to set save_results argument to True, so</span>\n        <span class=\"c1\"># data returned from this function</span>\n        <span class=\"c1\"># will be saved in</span>\n        <span class=\"c1\"># jl file named data_CURRENT_TIME.jl</span>\n\n        <span class=\"k\">return</span> <span class=\"p\">{</span>\n            <span class=\"s2\">\"search_word\"</span><span class=\"p\">:</span> <span class=\"n\">search_word</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"vacancies_data\"</span><span class=\"p\">:</span> <span class=\"n\">data</span><span class=\"p\">}</span>\n        <span class=\"c1\">######################################</span>\n    <span class=\"k\">elif</span> <span class=\"n\">CASE</span> <span class=\"o\">==</span> <span class=\"s2\">\"csv\"</span><span class=\"p\">:</span>\n        <span class=\"c1\">#######################################</span>\n        <span class=\"c1\"># csv case (generate list)</span>\n        <span class=\"c1\">######################################</span>\n        <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">[[</span><span class=\"n\">search_word</span><span class=\"p\">]</span> <span class=\"o\">+</span>\n                <span class=\"n\">i</span><span class=\"o\">.</span><span class=\"n\">text</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s2\">\"</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">br</span><span class=\"o\">.</span><span class=\"n\">css</span><span class=\"p\">(</span><span class=\"s2\">\"div.content\"</span><span class=\"p\">)]</span>\n        <span class=\"n\">headers</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">\"\u10e1\u10d8\u10e2\u10e7\u10d5\u10d0\"</span><span class=\"p\">,</span> <span class=\"s2\">\"\u10d3\u10d0\u10e1\u10d0\u10ee\u10d4\u10da\u10d4\u10d1\u10d0\"</span><span class=\"p\">,</span> <span class=\"s2\">\"\u10d9\u10dd\u10db\u10de\u10d0\u10dc\u10d8\u10d0\"</span><span class=\"p\">,</span> <span class=\"s2\">\"\u10d1\u10dd\u10da\u10dd \u10d5\u10d0\u10d3\u10d0\"</span><span class=\"p\">]</span>\n\n        <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"n\">headers</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">)</span>\n        <span class=\"c1\">#######################################</span>\n\n\n<span class=\"c1\"># supported save methods for now</span>\n<span class=\"k\">assert</span> <span class=\"n\">CASE</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"s1\">'jl'</span><span class=\"p\">,</span> <span class=\"s1\">'csv'</span><span class=\"p\">]</span>\n\n<span class=\"c1\"># initialize</span>\n<span class=\"n\">mbr</span> <span class=\"o\">=</span> <span class=\"n\">MultiBr</span><span class=\"p\">(</span><span class=\"n\">save_format</span><span class=\"o\">=</span><span class=\"n\">CASE</span><span class=\"p\">)</span>  <span class=\"c1\"># save jl or csv</span>\n\n<span class=\"c1\"># start processes</span>\n<span class=\"n\">mbr</span><span class=\"o\">.</span><span class=\"n\">get_with_multi</span><span class=\"p\">(</span>\n        <span class=\"n\">multi_type</span><span class=\"o\">=</span><span class=\"s2\">\"thread\"</span><span class=\"p\">,</span>  <span class=\"c1\"># we can use process or thread here</span>\n        <span class=\"n\">multi_num</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">,</span>           <span class=\"c1\"># how many of them</span>\n        <span class=\"n\">options</span><span class=\"o\">=</span><span class=\"p\">{},</span>            <span class=\"c1\"># options to use in browser in br_helper class</span>\n                               <span class=\"c1\"># useful if we want to pass different proxies,</span>\n                               <span class=\"c1\"># in which case options will be list of</span>\n                               <span class=\"c1\"># options dicts</span>\n\n        <span class=\"n\">urls</span><span class=\"o\">=</span><span class=\"n\">urls</span><span class=\"p\">,</span>             <span class=\"c1\"># all urls we want to load</span>\n        <span class=\"n\">callback</span><span class=\"o\">=</span><span class=\"n\">callback</span><span class=\"p\">,</span>     <span class=\"c1\"># our function above</span>\n        <span class=\"n\">save_results</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>     <span class=\"c1\"># do we want to save callback answers in jl</span>\n                               <span class=\"c1\"># or csv file?</span>\n\n                               <span class=\"c1\"># if we are adding meta data, it should be</span>\n                               <span class=\"c1\"># list of dictionaries with same length</span>\n                               <span class=\"c1\"># and sequence as urls and all data in</span>\n                               <span class=\"c1\"># these dictionaries will be available</span>\n                               <span class=\"c1\"># in callback in br.meta dictionary.</span>\n                               <span class=\"c1\"># do not use url as keys, it will be added</span>\n                               <span class=\"c1\"># with information about requested/</span>\n                               <span class=\"c1\"># not redirected(if that is the case)</span>\n                               <span class=\"c1\"># url, every time automatically</span>\n        <span class=\"n\">meta</span><span class=\"o\">=</span><span class=\"p\">[{</span><span class=\"s2\">\"search_word\"</span><span class=\"p\">:</span> <span class=\"n\">i</span><span class=\"p\">}</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">search_words</span><span class=\"p\">]</span>\n    <span class=\"p\">)</span>\n</pre>\n<h1>Installation methods</h1>\n<ol>\n<li>pip install br-helper</li>\n<li>git clone <a href=\"https://github.com/Tornike-Skhulukhia/browser_automation_helper\" rel=\"nofollow\">https://github.com/Tornike-Skhulukhia/browser_automation_helper</a></li>\n</ol>\n<h1>Dependencies</h1>\n<ol>\n<li>selenium</li>\n<li>beautifulsoup4</li>\n</ol>\n<h3>And downloaded</h3>\n<ul>\n<li>chromedriver - if you want to use Chrome</li>\n<li>geckodriver - if you want to use Firefox</li>\n</ul>\n<h1>Python version</h1>\n<p>Code is tested on <strong>Python3.6</strong> and above</p>\n\n          </div>"}, "last_serial": 6210129, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "024a06802388fc24fef0cb66dd95d84e", "sha256": "9db60d0d542568e4e41f7ac59e5ce248c4fff3947fe5066976ba48d0062f5bb6"}, "downloads": -1, "filename": "br_helper-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "024a06802388fc24fef0cb66dd95d84e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 22193, "upload_time": "2019-11-26T19:12:07", "upload_time_iso_8601": "2019-11-26T19:12:07.301015Z", "url": "https://files.pythonhosted.org/packages/b7/3c/569a053f77c45083b96b6e304eb3f20ebdd1304c6d43195ebd28879c2547/br_helper-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a62938f81f18bf4a92cda8ceca2b234a", "sha256": "8f4c3dc0c0985e3dee308d3e3f2c348d8dc9d8df4c9bc67b02c5c60f11392d6b"}, "downloads": -1, "filename": "br_helper-0.1.0.tar.gz", "has_sig": false, "md5_digest": "a62938f81f18bf4a92cda8ceca2b234a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 25170, "upload_time": "2019-11-26T19:12:10", "upload_time_iso_8601": "2019-11-26T19:12:10.143367Z", "url": "https://files.pythonhosted.org/packages/fa/57/63c6b447b350c65478906dcbd6e882bf3c62b310ee6025305b72e2119238/br_helper-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "3a3e0ffe1d1f6172e9f0c92506aed67f", "sha256": "fdc44076a1f05d8d993b95d6216bad2d2745c1a8706390dfe2ab6a7fab5fc535"}, "downloads": -1, "filename": "br_helper-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "3a3e0ffe1d1f6172e9f0c92506aed67f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 22202, "upload_time": "2019-11-26T19:20:45", "upload_time_iso_8601": "2019-11-26T19:20:45.332892Z", "url": "https://files.pythonhosted.org/packages/97/a1/7d671782557049f78abaa534d4ea4b7569aa9fb025308515cae07a5bed1f/br_helper-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "083088a2158462c3efe6d87c95faf766", "sha256": "26f2cafb8cd8fce19f6125d42c9b6397e266e2ae1daaa29bd240be636665113e"}, "downloads": -1, "filename": "br_helper-0.1.1.tar.gz", "has_sig": false, "md5_digest": "083088a2158462c3efe6d87c95faf766", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 25191, "upload_time": "2019-11-26T19:20:47", "upload_time_iso_8601": "2019-11-26T19:20:47.196709Z", "url": "https://files.pythonhosted.org/packages/59/a7/03f7d8ecb1cd740753257d09386055599dabd945de157aa5e1992721ddba/br_helper-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "f394c73a4f56795625c423c4b79480c6", "sha256": "90ef4543a6d15ddcbcf43a7610503eb590c31c924ee6bb5bc556c5bcc3cebe61"}, "downloads": -1, "filename": "br_helper-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "f394c73a4f56795625c423c4b79480c6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 22201, "upload_time": "2019-11-26T19:22:49", "upload_time_iso_8601": "2019-11-26T19:22:49.530263Z", "url": "https://files.pythonhosted.org/packages/dd/a5/7cf16229e7d764e10305183c02315f67e09ed6ca55497af307cade1141d4/br_helper-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "85598cfe441494e6230c7d903cd5fb77", "sha256": "ee1e8e475b5f0c2ba55795b5182cc84afeda8182f32a41266d51210af62c7502"}, "downloads": -1, "filename": "br_helper-0.1.2.tar.gz", "has_sig": false, "md5_digest": "85598cfe441494e6230c7d903cd5fb77", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 25183, "upload_time": "2019-11-26T19:22:51", "upload_time_iso_8601": "2019-11-26T19:22:51.585927Z", "url": "https://files.pythonhosted.org/packages/f4/0b/2c06c33cb7ce0859ff2d07d50adcfd9b9b38c36c1859308016c6c03306eb/br_helper-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "f4614342758be033da02a532f1c72703", "sha256": "94c60ea9a457cf26918dfb05c647cd39d9d7f3fed4bb063dfc3011e3b136afa7"}, "downloads": -1, "filename": "br_helper-0.1.3-py3-none-any.whl", "has_sig": false, "md5_digest": "f4614342758be033da02a532f1c72703", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 22197, "upload_time": "2019-11-26T19:24:34", "upload_time_iso_8601": "2019-11-26T19:24:34.010692Z", "url": "https://files.pythonhosted.org/packages/81/b9/f292f1f32b9bc7e706674a5dd83a21fbd2cceaba8c701c9d2e3d4b30772c/br_helper-0.1.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "20cb07d907be444ef51e63fd812aba52", "sha256": "051547afec89a94e47b46fe6fc5ec0498e99f61e463dbc6572adb113fe84eeee"}, "downloads": -1, "filename": "br_helper-0.1.3.tar.gz", "has_sig": false, "md5_digest": "20cb07d907be444ef51e63fd812aba52", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 25178, "upload_time": "2019-11-26T19:24:35", "upload_time_iso_8601": "2019-11-26T19:24:35.815511Z", "url": "https://files.pythonhosted.org/packages/9b/86/6e9d0b75925fac5b30ebead18ec6c6a38376896ed08bf05898818617bafc/br_helper-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "951a674c373d6ab2dbc94e88bd648cdd", "sha256": "3560ed3d99afdc4b64baa59e6740fb4d3fabefb2987b146f733c5aef79f27b9d"}, "downloads": -1, "filename": "br_helper-0.1.4-py3-none-any.whl", "has_sig": false, "md5_digest": "951a674c373d6ab2dbc94e88bd648cdd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 22296, "upload_time": "2019-11-27T18:47:38", "upload_time_iso_8601": "2019-11-27T18:47:38.524625Z", "url": "https://files.pythonhosted.org/packages/05/5a/5e778efebe586f13f34f0a391a52d03eedc33ff3341698a09b959497098b/br_helper-0.1.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9012bcae1b91de10807099906a864b17", "sha256": "077e88dcb01580f142528b4b28151bca7daeb7dde11d297e4ef519f7ff58e912"}, "downloads": -1, "filename": "br_helper-0.1.4.tar.gz", "has_sig": false, "md5_digest": "9012bcae1b91de10807099906a864b17", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 25390, "upload_time": "2019-11-27T18:47:41", "upload_time_iso_8601": "2019-11-27T18:47:41.936774Z", "url": "https://files.pythonhosted.org/packages/7d/3c/90ed5374af5d9a2bc489983106a0e56d9b2b7eef89149ab260c39410488f/br_helper-0.1.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "951a674c373d6ab2dbc94e88bd648cdd", "sha256": "3560ed3d99afdc4b64baa59e6740fb4d3fabefb2987b146f733c5aef79f27b9d"}, "downloads": -1, "filename": "br_helper-0.1.4-py3-none-any.whl", "has_sig": false, "md5_digest": "951a674c373d6ab2dbc94e88bd648cdd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 22296, "upload_time": "2019-11-27T18:47:38", "upload_time_iso_8601": "2019-11-27T18:47:38.524625Z", "url": "https://files.pythonhosted.org/packages/05/5a/5e778efebe586f13f34f0a391a52d03eedc33ff3341698a09b959497098b/br_helper-0.1.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9012bcae1b91de10807099906a864b17", "sha256": "077e88dcb01580f142528b4b28151bca7daeb7dde11d297e4ef519f7ff58e912"}, "downloads": -1, "filename": "br_helper-0.1.4.tar.gz", "has_sig": false, "md5_digest": "9012bcae1b91de10807099906a864b17", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 25390, "upload_time": "2019-11-27T18:47:41", "upload_time_iso_8601": "2019-11-27T18:47:41.936774Z", "url": "https://files.pythonhosted.org/packages/7d/3c/90ed5374af5d9a2bc489983106a0e56d9b2b7eef89149ab260c39410488f/br_helper-0.1.4.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:36:19 2020"}