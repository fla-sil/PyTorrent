{"info": {"author": "Yan Gao", "author_email": "yangao07@hit.edu.cn", "bugtrack_url": null, "classifiers": [], "description": "# pyabpoa: abPOA Python interface\n## Introduction\npyabpoa provides an easy-to-use interface to [abPOA](https://github.com/yangao07/abPOA).\n\n## Installation\n\n### Install pyabpoa with pip\n\npyabpoa can be installed with pip:\n\n```\npip install pyabpoa\n```\n\n### Install pyabpoa from source\nAlternatively, you can install pyabpoa from source:\n```\ngit clone https://github.com/yangao07/abPOA.git\ncd abPOA\nmake install_py\n```\n\n## Examples\nThe following code illustrates how to use pyabpoa.\n```\nimport pyabpoa as pa\na = pa.msa_aligner()\nseqs=[\n'CCGAAGA',\n'CCGAACTCGA',\n'CCCGGAAGA',\n'CCGAAGA'\n]\nres=a.msa(seqs, out_cons=True, out_msa=True, out_pog='pog.png') # perform multiple sequence alignment \n                                                                # generate a figure of alignment graph to pog.png\n\nfor seq in res.cons_seq:\n    print(seq)  # print consensus sequence\n\nres.print_msa() # print row-column multiple sequence alignment in PIR format\n```\nYou can also try the example script:\n```\npython ./python/example.py\n```\n\n\n## APIs\n\n### Class pyabpoa.msa_aligner\n```\npyabpoa.msa_aligner(aln_mode='g', ...)\n```\nThis constructs a multiple sequence alignment handler of pyabpoa, it accepts the following arguments:\n* **aln_mode**: alignment mode. 'g': global, 'l': local, 'e': extension; default: 'g'\n* **match**: match score; default: 2\n* **gap_open1**: first gap opening penalty; default: 4\n* **gap_ext1**: first gap extension penalty; default: 2\n* **gap_open2**: second gap opening penalty; default: 24\n* **gap_ext2**: second gap extension penalty; default: 1\n* **extra_b**: first part of extra band width; default: 10\n* **extra_f**: second part of extra band width; Total extra band width: b+f\\*L, L is the sequence lengthl default : 0.01\n* **is_diploid**: set as 1 if input is diploid datal default: 0\n* **min_freq**: minimum frequency of each consensus to output for diploid datal default: 0.3\n\n```\npyabpoa.msa_aligner.msa(seqs, out_cons, out_msa, out_pog=None)\n```\nThis method performs mutliple sequence alignment and generates\n* **consensus sequence** if `out_cons` is set as `True`\n* **row-column multiple sequence alignment in PIR format** if `out_msa` is set as `True`\n* **plot of alignment graph** if `out_pog` is set as a file name with suffix as `.png` or `.pdf`\n\n### Class pyabpoa.msa_result\n```\npyabpoa.msa_result(seq_n, cons_n, cons_len, ...)\n```\nThis class describes the information of the generated consensus sequence and row-column multiple sequence alignment. The returned result of `pyabpoa.msa_aligner.msa()` is an object of this class and it has the following properties:\n* **seq_n**: number of input sequences\n* **cons_n**: number of generated consensus sequences\n* **cons_len**: an array of consensus sequence length\n* **cons_seq**: an array of consensus sequence\n* **msa_len**: size of each row in the row-column multiple sequence alignment\n* **msa_seq**: an array containing `seq_n` rows of the row-column multiple sequence alignment\n\n`pyabpoa.msa_result()` also has a function of `print_msa`. It prints the row-column multiple sequence alignment.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/yangao07/abPOA", "keywords": "multiple-sequence-alignment  partial-order-graph-alignment", "license": "GLP", "maintainer": "", "maintainer_email": "", "name": "pyabpoa", "package_url": "https://pypi.org/project/pyabpoa/", "platform": "", "project_url": "https://pypi.org/project/pyabpoa/", "project_urls": {"Homepage": "https://github.com/yangao07/abPOA"}, "release_url": "https://pypi.org/project/pyabpoa/1.0.1a0/", "requires_dist": null, "requires_python": "", "summary": "pyabpoa: SIMD-based partial order alignment using adaptive band", "version": "1.0.1a0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>pyabpoa: abPOA Python interface</h1>\n<h2>Introduction</h2>\n<p>pyabpoa provides an easy-to-use interface to <a href=\"https://github.com/yangao07/abPOA\" rel=\"nofollow\">abPOA</a>.</p>\n<h2>Installation</h2>\n<h3>Install pyabpoa with pip</h3>\n<p>pyabpoa can be installed with pip:</p>\n<pre><code>pip install pyabpoa\n</code></pre>\n<h3>Install pyabpoa from source</h3>\n<p>Alternatively, you can install pyabpoa from source:</p>\n<pre><code>git clone https://github.com/yangao07/abPOA.git\ncd abPOA\nmake install_py\n</code></pre>\n<h2>Examples</h2>\n<p>The following code illustrates how to use pyabpoa.</p>\n<pre><code>import pyabpoa as pa\na = pa.msa_aligner()\nseqs=[\n'CCGAAGA',\n'CCGAACTCGA',\n'CCCGGAAGA',\n'CCGAAGA'\n]\nres=a.msa(seqs, out_cons=True, out_msa=True, out_pog='pog.png') # perform multiple sequence alignment \n                                                                # generate a figure of alignment graph to pog.png\n\nfor seq in res.cons_seq:\n    print(seq)  # print consensus sequence\n\nres.print_msa() # print row-column multiple sequence alignment in PIR format\n</code></pre>\n<p>You can also try the example script:</p>\n<pre><code>python ./python/example.py\n</code></pre>\n<h2>APIs</h2>\n<h3>Class pyabpoa.msa_aligner</h3>\n<pre><code>pyabpoa.msa_aligner(aln_mode='g', ...)\n</code></pre>\n<p>This constructs a multiple sequence alignment handler of pyabpoa, it accepts the following arguments:</p>\n<ul>\n<li><strong>aln_mode</strong>: alignment mode. 'g': global, 'l': local, 'e': extension; default: 'g'</li>\n<li><strong>match</strong>: match score; default: 2</li>\n<li><strong>gap_open1</strong>: first gap opening penalty; default: 4</li>\n<li><strong>gap_ext1</strong>: first gap extension penalty; default: 2</li>\n<li><strong>gap_open2</strong>: second gap opening penalty; default: 24</li>\n<li><strong>gap_ext2</strong>: second gap extension penalty; default: 1</li>\n<li><strong>extra_b</strong>: first part of extra band width; default: 10</li>\n<li><strong>extra_f</strong>: second part of extra band width; Total extra band width: b+f*L, L is the sequence lengthl default : 0.01</li>\n<li><strong>is_diploid</strong>: set as 1 if input is diploid datal default: 0</li>\n<li><strong>min_freq</strong>: minimum frequency of each consensus to output for diploid datal default: 0.3</li>\n</ul>\n<pre><code>pyabpoa.msa_aligner.msa(seqs, out_cons, out_msa, out_pog=None)\n</code></pre>\n<p>This method performs mutliple sequence alignment and generates</p>\n<ul>\n<li><strong>consensus sequence</strong> if <code>out_cons</code> is set as <code>True</code></li>\n<li><strong>row-column multiple sequence alignment in PIR format</strong> if <code>out_msa</code> is set as <code>True</code></li>\n<li><strong>plot of alignment graph</strong> if <code>out_pog</code> is set as a file name with suffix as <code>.png</code> or <code>.pdf</code></li>\n</ul>\n<h3>Class pyabpoa.msa_result</h3>\n<pre><code>pyabpoa.msa_result(seq_n, cons_n, cons_len, ...)\n</code></pre>\n<p>This class describes the information of the generated consensus sequence and row-column multiple sequence alignment. The returned result of <code>pyabpoa.msa_aligner.msa()</code> is an object of this class and it has the following properties:</p>\n<ul>\n<li><strong>seq_n</strong>: number of input sequences</li>\n<li><strong>cons_n</strong>: number of generated consensus sequences</li>\n<li><strong>cons_len</strong>: an array of consensus sequence length</li>\n<li><strong>cons_seq</strong>: an array of consensus sequence</li>\n<li><strong>msa_len</strong>: size of each row in the row-column multiple sequence alignment</li>\n<li><strong>msa_seq</strong>: an array containing <code>seq_n</code> rows of the row-column multiple sequence alignment</li>\n</ul>\n<p><code>pyabpoa.msa_result()</code> also has a function of <code>print_msa</code>. It prints the row-column multiple sequence alignment.</p>\n\n          </div>"}, "last_serial": 7151192, "releases": {"1.0.0a0": [{"comment_text": "", "digests": {"md5": "ba9e099e2ee551a5b5e1390b899a56b7", "sha256": "e0c6ee6774d50f5ed9196a1f4dbf27da3934dfdd84be023e9e9e61e3e359e354"}, "downloads": -1, "filename": "pyabpoa-1.0.0a0-py3.7-linux-x86_64.egg", "has_sig": false, "md5_digest": "ba9e099e2ee551a5b5e1390b899a56b7", "packagetype": "bdist_egg", "python_version": "3.7", "requires_python": null, "size": 424764, "upload_time": "2020-04-15T02:52:02", "upload_time_iso_8601": "2020-04-15T02:52:02.480647Z", "url": "https://files.pythonhosted.org/packages/37/99/227ea2b72b95963bba96ce1af45e69237cc461565b8340ed9e9f50f860fa/pyabpoa-1.0.0a0-py3.7-linux-x86_64.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "7d41e04fab8f4c3cdeeb86b32d322c2f", "sha256": "c8d84cedb009128a95371ec2985e1589b3d7a65f9b98f7f92fcbf53add7de840"}, "downloads": -1, "filename": "pyabpoa-1.0.0a0.tar.gz", "has_sig": false, "md5_digest": "7d41e04fab8f4c3cdeeb86b32d322c2f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 102358, "upload_time": "2020-04-15T02:52:04", "upload_time_iso_8601": "2020-04-15T02:52:04.803598Z", "url": "https://files.pythonhosted.org/packages/9b/e7/df899a1ada9f1edb696a1b0675899af31c693bf264338c8350951d1b5ecf/pyabpoa-1.0.0a0.tar.gz", "yanked": false}], "1.0.0a1": [{"comment_text": "", "digests": {"md5": "204e47f0f5d74607f65c897418dc8017", "sha256": "4ab8444bdd923653ed0316c15c5e6363a47963fd7e05671df6fd7fdd6faf697f"}, "downloads": -1, "filename": "pyabpoa-1.0.0a1-py3.7-linux-x86_64.egg", "has_sig": false, "md5_digest": "204e47f0f5d74607f65c897418dc8017", "packagetype": "bdist_egg", "python_version": "3.7", "requires_python": null, "size": 424740, "upload_time": "2020-04-16T01:44:48", "upload_time_iso_8601": "2020-04-16T01:44:48.178319Z", "url": "https://files.pythonhosted.org/packages/8d/d9/f1df88331ba08eca856b698042f418e70e39105e6fb270670ad095a41314/pyabpoa-1.0.0a1-py3.7-linux-x86_64.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "d917393da42aec408cb293acc337af04", "sha256": "6c80952dd834fea0d00f008f8b78e8ccb84a6f383a4424bcf318c3c05394f011"}, "downloads": -1, "filename": "pyabpoa-1.0.0a1.tar.gz", "has_sig": false, "md5_digest": "d917393da42aec408cb293acc337af04", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 102314, "upload_time": "2020-04-16T01:44:50", "upload_time_iso_8601": "2020-04-16T01:44:50.655704Z", "url": "https://files.pythonhosted.org/packages/9c/73/7cb26c4dc084163347572ce072bc3377aeeaeba7cbe57ce1c0edafaa0b63/pyabpoa-1.0.0a1.tar.gz", "yanked": false}], "1.0.1a0": [{"comment_text": "", "digests": {"md5": "f5efd039c37ba6c72c49b906791c48f5", "sha256": "8d459ccacf4d2123a385d5e972737dfc8b76a55fc0a06e34775da9bf8eb89fd2"}, "downloads": -1, "filename": "pyabpoa-1.0.1a0-py3.7-linux-x86_64.egg", "has_sig": false, "md5_digest": "f5efd039c37ba6c72c49b906791c48f5", "packagetype": "bdist_egg", "python_version": "3.7", "requires_python": null, "size": 462083, "upload_time": "2020-05-02T12:09:16", "upload_time_iso_8601": "2020-05-02T12:09:16.827568Z", "url": "https://files.pythonhosted.org/packages/53/6d/ecab4272381ff5e04af6b13e340705da47de2bf0d0b6319f17be0ced29b4/pyabpoa-1.0.1a0-py3.7-linux-x86_64.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "8d2c5a3ab880300a2a402290f9bd84e7", "sha256": "fa899ae2d3f5b83fd4ea0ce10ff2f99ceaf787d5e42728bafd0d163084c5c410"}, "downloads": -1, "filename": "pyabpoa-1.0.1a0.tar.gz", "has_sig": false, "md5_digest": "8d2c5a3ab880300a2a402290f9bd84e7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 103110, "upload_time": "2020-05-02T12:09:18", "upload_time_iso_8601": "2020-05-02T12:09:18.515714Z", "url": "https://files.pythonhosted.org/packages/81/23/6230947311aebe386ffa9b231781df37b5ab762814c8c07ecc4690724527/pyabpoa-1.0.1a0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f5efd039c37ba6c72c49b906791c48f5", "sha256": "8d459ccacf4d2123a385d5e972737dfc8b76a55fc0a06e34775da9bf8eb89fd2"}, "downloads": -1, "filename": "pyabpoa-1.0.1a0-py3.7-linux-x86_64.egg", "has_sig": false, "md5_digest": "f5efd039c37ba6c72c49b906791c48f5", "packagetype": "bdist_egg", "python_version": "3.7", "requires_python": null, "size": 462083, "upload_time": "2020-05-02T12:09:16", "upload_time_iso_8601": "2020-05-02T12:09:16.827568Z", "url": "https://files.pythonhosted.org/packages/53/6d/ecab4272381ff5e04af6b13e340705da47de2bf0d0b6319f17be0ced29b4/pyabpoa-1.0.1a0-py3.7-linux-x86_64.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "8d2c5a3ab880300a2a402290f9bd84e7", "sha256": "fa899ae2d3f5b83fd4ea0ce10ff2f99ceaf787d5e42728bafd0d163084c5c410"}, "downloads": -1, "filename": "pyabpoa-1.0.1a0.tar.gz", "has_sig": false, "md5_digest": "8d2c5a3ab880300a2a402290f9bd84e7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 103110, "upload_time": "2020-05-02T12:09:18", "upload_time_iso_8601": "2020-05-02T12:09:18.515714Z", "url": "https://files.pythonhosted.org/packages/81/23/6230947311aebe386ffa9b231781df37b5ab762814c8c07ecc4690724527/pyabpoa-1.0.1a0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:12:05 2020"}