{"info": {"author": "Sam Wedge", "author_email": "samwedge@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Software Development :: Build Tools"], "description": "[![Build Status](https://travis-ci.org/samwedge/rapiduino.svg?branch=master)](https://travis-ci.org/samwedge/rapiduino)\n[![Coverage Status](https://coveralls.io/repos/github/samwedge/rapiduino/badge.svg?branch=master)](https://coveralls.io/github/samwedge/rapiduino?branch=master)\n![Python Supported Versions](https://img.shields.io/pypi/pyversions/rapiduino)\n[![Python Supported Versions](https://img.shields.io/pypi/l/rapiduino)](https://github.com/samwedge/rapiduino/blob/master/LICENSE)\n[![Latest Version](https://img.shields.io/pypi/v/rapiduino)](https://pypi.org/project/rapiduino/)\n\n# Rapiduino\n\nRapiduino is a Python library to allow Python code to control an Arduino.\nThe Python code runs on a computer connected to an Arduino through a serial connection.\n\nA sketch is provided to upload to the Arduino.\nThe Rapiduino library can be used to connect to the Arduino and send it familiar commands such as digitalWrite and pinMode.\nBy sending these commands from Python and not writing them directly on the Arduino, you gain the power of Python's wonderful syntax and libraries. \n\n## Why use Rapiduino?\n\n* Rapidly develop using everyone's favourite language\n* Easily integrate an Arduino with Python's libraries to provide a real-time clock, web access, data visualisation, number crunching etc...\n* Allow hot-swappable parts. Change pin mode, pin state etc. whenever you like from your Python code!\n* Easily obtain data from your Arduino without setting up any custom communication\n* Probably many other benefits that will become realised as time goes on...\n\n\n## Are there any downsides?\n\nOf course. Don't use this library if:\n* You are not able to run a computer alongside an Arduino (not even a Raspberry Pi) because of issues such as size, battery, operating conditions etc.\n* You need timing accuracy that Rapiduino does not yet support; For example, for an ultrasonic sensor where the connection lag could cause innacuracy\n* Probably many others personal to your project...\n\n\n## Status\n\nRapiduino is in active development.\nIt is ready to be used in simple projects, but there may be some major breaking changes and restructuring until it settles down\n\n\n## Installation\n\n    pip install rapiduino\n\n\n## Usage\n\nTo use with an ArduinoUno, simply import the class and globals as follows\n\n    from rapiduino.devices import ArduinoUno\n    from rapiduino.globals.arduino_uno import *\n\nSet up the class and serial connection with the following. The port to be passed in can be identified using the Arduino software\n\n    arduino = ArduinoUno('/dev/ttyACM0')\n\nThen start using it! Here is a blinking LED example:\n\n    import time\n    while True:\n        arduino.digital_write(13, HIGH)\n        time.sleep(1)\n        arduino.digital_write(13, LOW)\n        time.sleep(1)\n\nYou can also use classes for components (such as LEDs, Servos etc.) which make using the Arduino easier and less error-prone.\nThe components are \"bound\" to the Arduino along with a pin-mapping which tells the Arduino object which pin is connected\nto which component pin. As an example, the LED class has one pin which can be initialised and connected to the arduino\nas follows:\n\n    from rapiduino.components.basic import LED\n    from rapiduino.devices import PinMapping\n    led = LED()\n    bindings = [PinMapping(device_pin_no=13, component_pin_no=0)]\n    arduino.bind_component(led, bindings)\n\nThis creates an led object and binds it to the arduino. Binding it allows you to communicate with the led object, and let\nthe led object talk to the arduino object. To bind an object, you need to specify bindings. This is basically a sequence of\nPinMappings to tell the arduino which pin is to be connected to each part of the component. In the case of the LED, there is\nonly one pin to connect (Pin 0) which is connected to the arduino (Pin 13). Hence, the binding looks like:\n\n    [PinMapping(device_pin_no=13, component_pin_no=0)]\n\nWhen binding, the code automatically takes care of checking compatibility, raising an error if there is a problem. For\nexample, if you are trying to connect a component that requires a PWM pin to a non-PWM pin, you will get a helpful message.\n\nOnce the LED has been bound to the Arduino, you can re-write the blink example as:\n\n    while True:\n        led.toggle()\n        time.sleep(1)\n\nThe benefit of this is that you can use methods with familiar names such as:\n\n    led.turn_on()\n    led.turn_off()\n\nYou don't need to think of pin numbers, pin states or pin modes beyone the initial set-up.\n\n\n## Contribution\n\nYes please! Code and/or suggestions are very welcome!\n\n\n## Licence\n\n[Rapiduino is released under the MIT licence](https://github.com/samwedge/rapiduino/blob/master/LICENSE)\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/samwedge/rapiduino", "keywords": "arduino python rapid development serial communication", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "rapiduino", "package_url": "https://pypi.org/project/rapiduino/", "platform": "", "project_url": "https://pypi.org/project/rapiduino/", "project_urls": {"Homepage": "https://github.com/samwedge/rapiduino"}, "release_url": "https://pypi.org/project/rapiduino/1.0.0/", "requires_dist": ["pyserial (==3.4)", "flake8 (==3.7.9) ; extra == 'dev'", "wheel (==0.33.6) ; extra == 'dev'", "setuptools (==45.1.0) ; extra == 'dev'", "twine (==3.1.1) ; extra == 'dev'", "coveralls (==1.10.0) ; extra == 'travis'", "flake8 (==3.7.9) ; extra == 'travis'", "wheel (==0.33.6) ; extra == 'travis'", "setuptools (==45.1.0) ; extra == 'travis'", "twine (==3.1.1) ; extra == 'travis'"], "requires_python": "", "summary": "Rapidly develop code to control an Arduino using Python", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://travis-ci.org/samwedge/rapiduino\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/680670a6afc2fa8a50a7a233e30b8a581e1a1ef6/68747470733a2f2f7472617669732d63692e6f72672f73616d77656467652f726170696475696e6f2e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://coveralls.io/github/samwedge/rapiduino?branch=master\" rel=\"nofollow\"><img alt=\"Coverage Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e984c63cf1a6c1c73c4f051fdb97c0ffeb76309c/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f73616d77656467652f726170696475696e6f2f62616467652e7376673f6272616e63683d6d6173746572\"></a>\n<img alt=\"Python Supported Versions\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/02dfece4eb1ca3b45c554420825ed13305409c5f/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f726170696475696e6f\">\n<a href=\"https://github.com/samwedge/rapiduino/blob/master/LICENSE\" rel=\"nofollow\"><img alt=\"Python Supported Versions\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4ddd85fab4075a42c990f47183d078d64f3c6877/68747470733a2f2f696d672e736869656c64732e696f2f707970692f6c2f726170696475696e6f\"></a>\n<a href=\"https://pypi.org/project/rapiduino/\" rel=\"nofollow\"><img alt=\"Latest Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/298bdaaedcb2ae09fe6bc5ca44156e155f200ab5/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f726170696475696e6f\"></a></p>\n<h1>Rapiduino</h1>\n<p>Rapiduino is a Python library to allow Python code to control an Arduino.\nThe Python code runs on a computer connected to an Arduino through a serial connection.</p>\n<p>A sketch is provided to upload to the Arduino.\nThe Rapiduino library can be used to connect to the Arduino and send it familiar commands such as digitalWrite and pinMode.\nBy sending these commands from Python and not writing them directly on the Arduino, you gain the power of Python's wonderful syntax and libraries.</p>\n<h2>Why use Rapiduino?</h2>\n<ul>\n<li>Rapidly develop using everyone's favourite language</li>\n<li>Easily integrate an Arduino with Python's libraries to provide a real-time clock, web access, data visualisation, number crunching etc...</li>\n<li>Allow hot-swappable parts. Change pin mode, pin state etc. whenever you like from your Python code!</li>\n<li>Easily obtain data from your Arduino without setting up any custom communication</li>\n<li>Probably many other benefits that will become realised as time goes on...</li>\n</ul>\n<h2>Are there any downsides?</h2>\n<p>Of course. Don't use this library if:</p>\n<ul>\n<li>You are not able to run a computer alongside an Arduino (not even a Raspberry Pi) because of issues such as size, battery, operating conditions etc.</li>\n<li>You need timing accuracy that Rapiduino does not yet support; For example, for an ultrasonic sensor where the connection lag could cause innacuracy</li>\n<li>Probably many others personal to your project...</li>\n</ul>\n<h2>Status</h2>\n<p>Rapiduino is in active development.\nIt is ready to be used in simple projects, but there may be some major breaking changes and restructuring until it settles down</p>\n<h2>Installation</h2>\n<pre><code>pip install rapiduino\n</code></pre>\n<h2>Usage</h2>\n<p>To use with an ArduinoUno, simply import the class and globals as follows</p>\n<pre><code>from rapiduino.devices import ArduinoUno\nfrom rapiduino.globals.arduino_uno import *\n</code></pre>\n<p>Set up the class and serial connection with the following. The port to be passed in can be identified using the Arduino software</p>\n<pre><code>arduino = ArduinoUno('/dev/ttyACM0')\n</code></pre>\n<p>Then start using it! Here is a blinking LED example:</p>\n<pre><code>import time\nwhile True:\n    arduino.digital_write(13, HIGH)\n    time.sleep(1)\n    arduino.digital_write(13, LOW)\n    time.sleep(1)\n</code></pre>\n<p>You can also use classes for components (such as LEDs, Servos etc.) which make using the Arduino easier and less error-prone.\nThe components are \"bound\" to the Arduino along with a pin-mapping which tells the Arduino object which pin is connected\nto which component pin. As an example, the LED class has one pin which can be initialised and connected to the arduino\nas follows:</p>\n<pre><code>from rapiduino.components.basic import LED\nfrom rapiduino.devices import PinMapping\nled = LED()\nbindings = [PinMapping(device_pin_no=13, component_pin_no=0)]\narduino.bind_component(led, bindings)\n</code></pre>\n<p>This creates an led object and binds it to the arduino. Binding it allows you to communicate with the led object, and let\nthe led object talk to the arduino object. To bind an object, you need to specify bindings. This is basically a sequence of\nPinMappings to tell the arduino which pin is to be connected to each part of the component. In the case of the LED, there is\nonly one pin to connect (Pin 0) which is connected to the arduino (Pin 13). Hence, the binding looks like:</p>\n<pre><code>[PinMapping(device_pin_no=13, component_pin_no=0)]\n</code></pre>\n<p>When binding, the code automatically takes care of checking compatibility, raising an error if there is a problem. For\nexample, if you are trying to connect a component that requires a PWM pin to a non-PWM pin, you will get a helpful message.</p>\n<p>Once the LED has been bound to the Arduino, you can re-write the blink example as:</p>\n<pre><code>while True:\n    led.toggle()\n    time.sleep(1)\n</code></pre>\n<p>The benefit of this is that you can use methods with familiar names such as:</p>\n<pre><code>led.turn_on()\nled.turn_off()\n</code></pre>\n<p>You don't need to think of pin numbers, pin states or pin modes beyone the initial set-up.</p>\n<h2>Contribution</h2>\n<p>Yes please! Code and/or suggestions are very welcome!</p>\n<h2>Licence</h2>\n<p><a href=\"https://github.com/samwedge/rapiduino/blob/master/LICENSE\" rel=\"nofollow\">Rapiduino is released under the MIT licence</a></p>\n\n          </div>"}, "last_serial": 6523684, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "48080730c8c84befac4dbe89bc825cae", "sha256": "8f9b4c4b651a90c8025f9e9c6fe4258ef5d3aeda4eec956d817f96562de7eedf"}, "downloads": -1, "filename": "rapiduino-0.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "48080730c8c84befac4dbe89bc825cae", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 11277, "upload_time": "2020-01-26T22:10:56", "upload_time_iso_8601": "2020-01-26T22:10:56.426778Z", "url": "https://files.pythonhosted.org/packages/f1/ae/93ab084d54486ca15e80e1d32f6256c9c5591bf876de7d66c8c951576747/rapiduino-0.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "dae07422956c0a90ecf5d2015a5b2992", "sha256": "dba1dac545d47dcf106a72d4c67e28b47dc1e1da0bab02fa1cae53726221e252"}, "downloads": -1, "filename": "rapiduino-0.1.0.tar.gz", "has_sig": false, "md5_digest": "dae07422956c0a90ecf5d2015a5b2992", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9601, "upload_time": "2020-01-22T16:13:34", "upload_time_iso_8601": "2020-01-22T16:13:34.554805Z", "url": "https://files.pythonhosted.org/packages/32/41/e434915ac40d8db07a92c3ab4ab34ad9a44d992d4b05766707cadcc424e6/rapiduino-0.1.0.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "f641e700da725750709112e2438a51f9", "sha256": "dee8ee5763162cf622e916cb0ceaab9c1eab2a70d89f73ef3bb272517dc7f5ed"}, "downloads": -1, "filename": "rapiduino-1.0.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "f641e700da725750709112e2438a51f9", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 11276, "upload_time": "2020-01-26T22:12:32", "upload_time_iso_8601": "2020-01-26T22:12:32.236154Z", "url": "https://files.pythonhosted.org/packages/dd/f7/cef9c8d1cd9761aad0c6cb9bc7ec740d345036f3b4cf63891cb2b71d3c7c/rapiduino-1.0.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9af46810d351a06e8704c7cb6b471a58", "sha256": "5ea11258aa8e00dac926c22dfc2236f14174c1388bde1b443728d2127261ff81"}, "downloads": -1, "filename": "rapiduino-1.0.0.tar.gz", "has_sig": false, "md5_digest": "9af46810d351a06e8704c7cb6b471a58", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9595, "upload_time": "2020-01-26T22:12:33", "upload_time_iso_8601": "2020-01-26T22:12:33.566786Z", "url": "https://files.pythonhosted.org/packages/cf/b4/7526d156d5f1232b7d0ad23cf0e0c7b12feb6c2b6406b34c25291ad7da4a/rapiduino-1.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f641e700da725750709112e2438a51f9", "sha256": "dee8ee5763162cf622e916cb0ceaab9c1eab2a70d89f73ef3bb272517dc7f5ed"}, "downloads": -1, "filename": "rapiduino-1.0.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "f641e700da725750709112e2438a51f9", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 11276, "upload_time": "2020-01-26T22:12:32", "upload_time_iso_8601": "2020-01-26T22:12:32.236154Z", "url": "https://files.pythonhosted.org/packages/dd/f7/cef9c8d1cd9761aad0c6cb9bc7ec740d345036f3b4cf63891cb2b71d3c7c/rapiduino-1.0.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9af46810d351a06e8704c7cb6b471a58", "sha256": "5ea11258aa8e00dac926c22dfc2236f14174c1388bde1b443728d2127261ff81"}, "downloads": -1, "filename": "rapiduino-1.0.0.tar.gz", "has_sig": false, "md5_digest": "9af46810d351a06e8704c7cb6b471a58", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9595, "upload_time": "2020-01-26T22:12:33", "upload_time_iso_8601": "2020-01-26T22:12:33.566786Z", "url": "https://files.pythonhosted.org/packages/cf/b4/7526d156d5f1232b7d0ad23cf0e0c7b12feb6c2b6406b34c25291ad7da4a/rapiduino-1.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:07:25 2020"}