{"info": {"author": "WWW.JLOD.ORG", "author_email": "contact@jload.org", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "\nJLOD stands for JSON Local Document Database, it is a serverless in-process library that implements a self-contained document-oriented database use for storing small application data within an application without  internet connection. The database is like MongoDB, it uses Collection, Document, and JSON objects.  The JLOD  is a version of SQLite for object oriented data, the  JLOD collections can be exported to Remote MongoDB collection as well as remote MongoDB collection can also be imported to the JLOD database.\n\nJLOD is an embedded document-oriented database library. Unlike MongoDB.  JLOD does not have a separate server process. JLOD reads and writes the data to ordinary disk files.  The complete JLOD database along with the collections and the documents are contained in a disk file. The folder is a database in JLOD while the file is a collection, and each object is a document. \n\n\nAudience\n\nThis library will be quite helpful for all those developers who want to develop serverless web applications using Python. It is meant for programmers with a stronghold on MongoDB concepts.  \n\n\n\nPrerequisite\n\nThe library assumes that the readers have adequate exposure to MongoDB or any document-oriented database concepts. If you have worked on MongoDB, then it will help you further to grasp the concepts of the library quickly. \n\n\nCopyright & Disclaimer\n\n1.\tAny user is permitted to reuse, distribute this library \n2.\tAny user can contribute to this library\n\n\n\n\nFeatures of the JLOD Library\n\n\n\u2022\tSelf Contained\n\n\u2022\tPerformance\n\n\u2022\tServerless\n\n\u2022\tInstallation\n\n\u2022\tCreate Database\n\n\u2022\tCreate Collection\n\n\u2022\tAdd Documents\n\n\u2022\tDrop Collection\n\n\u2022\tCollection Size\n\n\u2022\tGet Documents\n\n\u2022\tQuery Documents\n\n\u2022\tSorting and Distinct\n\n\u2022\tRemove Document\n\n\u2022\tUpdate Document\n\n\u2022\tTruncate Collection\n\n\u2022\tExport Collection\n\n\u2022\tImport Collection\n\n\n\n\nSelf Contained\n\nJLOD database stored data in a folder within an application,  once the application is hosted to any server or build by any compiler, the database will remain along with the application. And data can be stored and retrieved without an internet connection.\n\n1. Folder is a database\n2. File is a Collection\n3. Object is a Document\n\n\n\n\nPerformance\n\nSince the JLOD database stored data in a local folder within an application, the performance is extremely awesome. The application will not need to initiate an internet connection to access the stored data.\n\n\n\nServerless\n\nSince the JLOD database stored data in a local folder within an application, there is no need for a server. The database stored where ever the application is hosted.\n\n\n\n\nStructure\n\nJLOD library creates a folder as a Database and creates a file as a collection then adds a JSON array of objects to the files as a group of documents.\n\n\n\n\n\nInstallation\n\n$ pip  install  jlod\n\n\n\n \t from jlod import database\n\n  \t dbi = database.connect('test').instance\n  \t client = dbi.collection('users')\n\n\t # Add many  documents to a collection\n\t added = client.addMany([\n\t\t{\"name\": \"Jhon\", \"gender\": \"Male\", \"age\": 24, \"city\": \"New Delhi\", \"country\": \"India\"},\n\n\t\t{\"name\": \"Zee\", \"gender\": \"Female\", \"age\": 20, \"city\": \"Lagos\", \"country\": \"Nigeria\"}, \n\n\t\t{\"name\": \"Frank\", \"gender\": \"Male\", \"age\": 27, \"city\": \"Toronto\", \"country\": \"Canada\"}\n\t ])\n\t if added:\n\t\tprint(\"Documents Added\")\n\t else:\n\t\tprint(\"Failed to add Document\")\n\n\t # Get all  documents of a collection\n\t result = client.documents\n\t for doc in result:\n\t    print(doc)\n\n     # Find document where  \"name\" is  \"Rabie\" or \"age\" is \"20\"\n\t result = client.find({\n      \"$or\": [{\"name\": {\"$eq\": \"Rabie\"}}, {\"age\": {\"$eq\": 20}}]\n     })\n\n\t # Get specific single from  documents where name is Jhon or age is 24\n \t result = client.get(['name'], {\n    \t\"name\": \"Jhon\",\n  \t\t\"age\": 24\n \t })\n\n\t#Get multiple keys\n   \t result = client.getOne(['name', 'age'], {\n   \t\t \"name\": \"Jhon\",\n    \t \"age\": 24\n \t })\n\n\n\n\nQuery Documents\nThere are two types of logical Operators in JLOAD:\n1.\tAND\n2.\tOR\nAND => returns document that matches all given conditions\nOR=> returns documents that match any  of the given conditions\n\n\n \tresult = client.find({\n        \"$and\": {\"name\": {\"$eq\": \"Rabie\"}}\n     })\n\nUsing the AND operator. Above  will find  any document that has  key \u201cname\u201d  and value equal to \u201cRabie\u201d \n\n\n\tresult = client.find({\n         \"$or\": [{\"name\": {\"$eq\": \"Rabie\"}}, {\"age\": {\"$eq\": 20}}]\n    })\n\n\nUsing the OR operator. Above will get any document that has a key name as \u201cRabie\u201d or age as \u201c23\u201d in the collection.\n\n\n\tresult = client.findOne()\n\n\nAbove will return first one document  from the entire collection.\n\n\n\tresult = client.findOne({\n          \"$and\": {\"age\": {\"$gt\": 24}}\n \t})\n\n\nAbove will return the first one document that has key \u201cage\u201d with value greater than 24.\n\n\n\nSorting and Distinct\n1.\tSorting is used in sorting data in certain format Accending or Descending.\n\nsee examples below\n\n\n \tresult = client.sort({\"age\": -1})\n\n\n\nAbove will sort all documents base on key \u201cage\u201d Deceinding order.\n\n\n\n\n \tresult = client.sort({\"name\": 1},{\n  \t  \"$and\": {\"age\": {\"$eq\": 20}}\n \t})\n\n\n\n\nAbove will sort all documents base on key \u201cname\u201d Accending order for all documents that has key \u201cage\u201d with value equal to 20.\n\n1.\tDistinct is used to get distinct data from a collection with no duplicate. \n\n\n \tresult = client.distinct()\n\n\n\n\nAbove will return the distinct documents\n\n\n\n\n\n \tresult = client.distinct({\n   \t \"$and\": {\"city\": {\"$eq\": \"Los Angeles\"}}\n \t})\n\n\n\n\nAbove will return the distinct documents for any document that has key \u201ccity\u201d with value \u201cLos Angels\u201d\n\n\n\n\nRemove Document\nIn JLOD remove is used to remove the entire or specific document from a collection, \n\nsee examples below.\n\n\n\tclient.remove()\n\n\tclient.removeAll()\n\n\nOutput: True\nAnyone of the above will remove all documents in the collection\n\n\n \tresult = client.remove({\n    \t  \"$and\": {\"name\": {\"$eq\": \"Jhon\"}}\n \t})\n\n\n\n\n\nOutput: True\nAbove will remove any document that has key \u201cname\u201d  with value \u201cJhon\u201d from the collection\n\n\n\n\n \tresult = client.remove({\n   \t   \"$or\": {\"age\": {\"$gt\": 27}}\n \t})\n\n\n\n\n        \tOutput: True\nAbove will remove any document that has key \u201cname\u201d  with a value greater than \u201c27\u201d\n\nUpdate Document\nJLOD update is used in updating documents of a specific collection.\nsee examples below.\n\n\n\tclient.update({\n   \t     \"name\": \"Mary\",\n    \t     \"age\": 20\n \t})\n\n\nOutput: True\nAbove will update the key \u201cname\u201d to \u201cMary\u201d and age to \u201c20\u201d for all documents in the collection. And if the key age doesn\u2019t exist in the collection, it will be created\n\n\n   \tresult = client.update( {\"name\": \"Jhon\", \"age\": 24},{\n    \t\t\"$and\": {\"city\": {\"$eq\": \"Los Angeles\"}}\n \t})\n\n\n\n\n\nOutput: True\nAbove will update the name to \u201cJhon\u201d and age to \u201c24\u201d on any document that has a city equal to \u201cLos Angeles\u201d. \n\nTruncate Document\n\n\n \tresult = client.truncate\n\n\n\n\nOutput: True\nAbove will remove all documents in the collection\n\nExport Collection\nExport is used to export the entire or specific document in a JLOD collection to remote MongoDB\nsee examples below.\n\n\n \tfrom jlod import database\n \timport pymongo\n\n \tdbi = database.connect('example').instance\n \tclient = dbi.collection('users')\n\n \thost = pymongo.MongoClient(\"mongodb://localhost:27017/\")\n \tmydb = host[\"example\"]\n \tmongoClient = mydb[\"users\"]\n\n \tresult = client.exportTo(mongoClient)\n\n\n\n\nOutput: True\nThe above will export all the documents in JLOD users collection to MongoDB users collections.\n\n\n\n \tresult = client.exportTo(mongoClient, {\n   \t  \"$and\": {\"name\": {\"$eq\": \"Zee\"}}\n \t})\n\n\n\n\nOutput: True\nAbove will export any document that contains a name with value  \u201cZee\u201d from the JLOD users collection to remote MongoDB users collections.\n\n\n\n\nImport Collection\nImport is used for importing entire or specific documents from the remote MongoDB collection \nto JLOD local database collection. See the examples below.\n\n\n  \tfrom jlod import database\n  \timport pymongo\n\n  \tdbi = database.connect('example').instance\n  \tclient = dbi.collection('users')\n\n \thost = pymongo.MongoClient(\"mongodb://localhost:27017/\")\n \tmydb = host[\"example\"]\n  \tmongoClient = mydb[\"users\"]\n\n  \tresult = client.importFrom(mongoClient)\n\n\n\n\nAbove will import all the documents  from remote MongoDB users collections to JLOD users collection \n\n\n result = client.importFrom(mongoClient, {\n    \"$and\": {\"name\": {\"$eq\": \"Zee\"}}\n })\n\n\nAbove will import  any document that contains key \u201cname\u201d with value \u201cZee\u201d  from the remote MongoDB users collections  to JLOD users collection\n\n\n\n\n\n\n\nEnd of the library documentation\nIf you want to contribute or discover any errors or suggestions on the code or logic, please notify us at contact@jload.org.\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://www.jlod.org", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "jlod", "package_url": "https://pypi.org/project/jlod/", "platform": "", "project_url": "https://pypi.org/project/jlod/", "project_urls": {"Homepage": "http://www.jlod.org"}, "release_url": "https://pypi.org/project/jlod/2.0.1/", "requires_dist": null, "requires_python": ">=3.6", "summary": "Local Document Oriented Database", "version": "2.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>JLOD stands for JSON Local Document Database, it is a serverless in-process library that implements a self-contained document-oriented database use for storing small application data within an application without  internet connection. The database is like MongoDB, it uses Collection, Document, and JSON objects.  The JLOD  is a version of SQLite for object oriented data, the  JLOD collections can be exported to Remote MongoDB collection as well as remote MongoDB collection can also be imported to the JLOD database.</p>\n<p>JLOD is an embedded document-oriented database library. Unlike MongoDB.  JLOD does not have a separate server process. JLOD reads and writes the data to ordinary disk files.  The complete JLOD database along with the collections and the documents are contained in a disk file. The folder is a database in JLOD while the file is a collection, and each object is a document.</p>\n<p>Audience</p>\n<p>This library will be quite helpful for all those developers who want to develop serverless web applications using Python. It is meant for programmers with a stronghold on MongoDB concepts.</p>\n<p>Prerequisite</p>\n<p>The library assumes that the readers have adequate exposure to MongoDB or any document-oriented database concepts. If you have worked on MongoDB, then it will help you further to grasp the concepts of the library quickly.</p>\n<p>Copyright &amp; Disclaimer</p>\n<ol>\n<li>Any user is permitted to reuse, distribute this library</li>\n<li>Any user can contribute to this library</li>\n</ol>\n<p>Features of the JLOD Library</p>\n<p>\u2022\tSelf Contained</p>\n<p>\u2022\tPerformance</p>\n<p>\u2022\tServerless</p>\n<p>\u2022\tInstallation</p>\n<p>\u2022\tCreate Database</p>\n<p>\u2022\tCreate Collection</p>\n<p>\u2022\tAdd Documents</p>\n<p>\u2022\tDrop Collection</p>\n<p>\u2022\tCollection Size</p>\n<p>\u2022\tGet Documents</p>\n<p>\u2022\tQuery Documents</p>\n<p>\u2022\tSorting and Distinct</p>\n<p>\u2022\tRemove Document</p>\n<p>\u2022\tUpdate Document</p>\n<p>\u2022\tTruncate Collection</p>\n<p>\u2022\tExport Collection</p>\n<p>\u2022\tImport Collection</p>\n<p>Self Contained</p>\n<p>JLOD database stored data in a folder within an application,  once the application is hosted to any server or build by any compiler, the database will remain along with the application. And data can be stored and retrieved without an internet connection.</p>\n<ol>\n<li>Folder is a database</li>\n<li>File is a Collection</li>\n<li>Object is a Document</li>\n</ol>\n<p>Performance</p>\n<p>Since the JLOD database stored data in a local folder within an application, the performance is extremely awesome. The application will not need to initiate an internet connection to access the stored data.</p>\n<p>Serverless</p>\n<p>Since the JLOD database stored data in a local folder within an application, there is no need for a server. The database stored where ever the application is hosted.</p>\n<p>Structure</p>\n<p>JLOD library creates a folder as a Database and creates a file as a collection then adds a JSON array of objects to the files as a group of documents.</p>\n<p>Installation</p>\n<p>$ pip  install  jlod</p>\n<pre><code> from jlod import database\n\n dbi = database.connect('test').instance\n client = dbi.collection('users')\n\n # Add many  documents to a collection\n added = client.addMany([\n\t{\"name\": \"Jhon\", \"gender\": \"Male\", \"age\": 24, \"city\": \"New Delhi\", \"country\": \"India\"},\n\n\t{\"name\": \"Zee\", \"gender\": \"Female\", \"age\": 20, \"city\": \"Lagos\", \"country\": \"Nigeria\"}, \n\n\t{\"name\": \"Frank\", \"gender\": \"Male\", \"age\": 27, \"city\": \"Toronto\", \"country\": \"Canada\"}\n ])\n if added:\n\tprint(\"Documents Added\")\n else:\n\tprint(\"Failed to add Document\")\n\n # Get all  documents of a collection\n result = client.documents\n for doc in result:\n    print(doc)\n\n # Find document where  \"name\" is  \"Rabie\" or \"age\" is \"20\"\n result = client.find({\n  \"$or\": [{\"name\": {\"$eq\": \"Rabie\"}}, {\"age\": {\"$eq\": 20}}]\n })\n\n # Get specific single from  documents where name is Jhon or age is 24\n result = client.get(['name'], {\n\t\"name\": \"Jhon\",\n\t\"age\": 24\n })\n\n#Get multiple keys\n result = client.getOne(['name', 'age'], {\n\t \"name\": \"Jhon\",\n\t \"age\": 24\n })\n</code></pre>\n<p>Query Documents\nThere are two types of logical Operators in JLOAD:</p>\n<ol>\n<li>\n<p>AND</p>\n</li>\n<li>\n<p>OR\nAND =&gt; returns document that matches all given conditions\nOR=&gt; returns documents that match any  of the given conditions</p>\n<p>result = client.find({\n\"$and\": {\"name\": {\"$eq\": \"Rabie\"}}\n})</p>\n</li>\n</ol>\n<p>Using the AND operator. Above  will find  any document that has  key \u201cname\u201d  and value equal to \u201cRabie\u201d</p>\n<pre><code>result = client.find({\n     \"$or\": [{\"name\": {\"$eq\": \"Rabie\"}}, {\"age\": {\"$eq\": 20}}]\n})\n</code></pre>\n<p>Using the OR operator. Above will get any document that has a key name as \u201cRabie\u201d or age as \u201c23\u201d in the collection.</p>\n<pre><code>result = client.findOne()\n</code></pre>\n<p>Above will return first one document  from the entire collection.</p>\n<pre><code>result = client.findOne({\n      \"$and\": {\"age\": {\"$gt\": 24}}\n})\n</code></pre>\n<p>Above will return the first one document that has key \u201cage\u201d with value greater than 24.</p>\n<p>Sorting and Distinct</p>\n<ol>\n<li>Sorting is used in sorting data in certain format Accending or Descending.</li>\n</ol>\n<p>see examples below</p>\n<pre><code>result = client.sort({\"age\": -1})\n</code></pre>\n<p>Above will sort all documents base on key \u201cage\u201d Deceinding order.</p>\n<pre><code>result = client.sort({\"name\": 1},{\n  \"$and\": {\"age\": {\"$eq\": 20}}\n})\n</code></pre>\n<p>Above will sort all documents base on key \u201cname\u201d Accending order for all documents that has key \u201cage\u201d with value equal to 20.</p>\n<ol>\n<li>\n<p>Distinct is used to get distinct data from a collection with no duplicate.</p>\n<p>result = client.distinct()</p>\n</li>\n</ol>\n<p>Above will return the distinct documents</p>\n<pre><code>result = client.distinct({\n \"$and\": {\"city\": {\"$eq\": \"Los Angeles\"}}\n})\n</code></pre>\n<p>Above will return the distinct documents for any document that has key \u201ccity\u201d with value \u201cLos Angels\u201d</p>\n<p>Remove Document\nIn JLOD remove is used to remove the entire or specific document from a collection,</p>\n<p>see examples below.</p>\n<pre><code>client.remove()\n\nclient.removeAll()\n</code></pre>\n<p>Output: True\nAnyone of the above will remove all documents in the collection</p>\n<pre><code>result = client.remove({\n\t  \"$and\": {\"name\": {\"$eq\": \"Jhon\"}}\n})\n</code></pre>\n<p>Output: True\nAbove will remove any document that has key \u201cname\u201d  with value \u201cJhon\u201d from the collection</p>\n<pre><code>result = client.remove({\n   \"$or\": {\"age\": {\"$gt\": 27}}\n})\n\n\n\n\n    \tOutput: True\n</code></pre>\n<p>Above will remove any document that has key \u201cname\u201d  with a value greater than \u201c27\u201d</p>\n<p>Update Document\nJLOD update is used in updating documents of a specific collection.\nsee examples below.</p>\n<pre><code>client.update({\n     \"name\": \"Mary\",\n\t     \"age\": 20\n})\n</code></pre>\n<p>Output: True\nAbove will update the key \u201cname\u201d to \u201cMary\u201d and age to \u201c20\u201d for all documents in the collection. And if the key age doesn\u2019t exist in the collection, it will be created</p>\n<pre><code>result = client.update( {\"name\": \"Jhon\", \"age\": 24},{\n\t\t\"$and\": {\"city\": {\"$eq\": \"Los Angeles\"}}\n})\n</code></pre>\n<p>Output: True\nAbove will update the name to \u201cJhon\u201d and age to \u201c24\u201d on any document that has a city equal to \u201cLos Angeles\u201d.</p>\n<p>Truncate Document</p>\n<pre><code>result = client.truncate\n</code></pre>\n<p>Output: True\nAbove will remove all documents in the collection</p>\n<p>Export Collection\nExport is used to export the entire or specific document in a JLOD collection to remote MongoDB\nsee examples below.</p>\n<pre><code>from jlod import database\nimport pymongo\n\ndbi = database.connect('example').instance\nclient = dbi.collection('users')\n\nhost = pymongo.MongoClient(\"mongodb://localhost:27017/\")\nmydb = host[\"example\"]\nmongoClient = mydb[\"users\"]\n\nresult = client.exportTo(mongoClient)\n</code></pre>\n<p>Output: True\nThe above will export all the documents in JLOD users collection to MongoDB users collections.</p>\n<pre><code>result = client.exportTo(mongoClient, {\n  \"$and\": {\"name\": {\"$eq\": \"Zee\"}}\n})\n</code></pre>\n<p>Output: True\nAbove will export any document that contains a name with value  \u201cZee\u201d from the JLOD users collection to remote MongoDB users collections.</p>\n<p>Import Collection\nImport is used for importing entire or specific documents from the remote MongoDB collection\nto JLOD local database collection. See the examples below.</p>\n<pre><code>from jlod import database\nimport pymongo\n\ndbi = database.connect('example').instance\nclient = dbi.collection('users')\n\nhost = pymongo.MongoClient(\"mongodb://localhost:27017/\")\nmydb = host[\"example\"]\nmongoClient = mydb[\"users\"]\n\nresult = client.importFrom(mongoClient)\n</code></pre>\n<p>Above will import all the documents  from remote MongoDB users collections to JLOD users collection</p>\n<p>result = client.importFrom(mongoClient, {\n\"$and\": {\"name\": {\"$eq\": \"Zee\"}}\n})</p>\n<p>Above will import  any document that contains key \u201cname\u201d with value \u201cZee\u201d  from the remote MongoDB users collections  to JLOD users collection</p>\n<p>End of the library documentation\nIf you want to contribute or discover any errors or suggestions on the code or logic, please notify us at <a href=\"mailto:contact@jload.org\">contact@jload.org</a>.</p>\n\n          </div>"}, "last_serial": 7139778, "releases": {"2.0.1": [{"comment_text": "", "digests": {"md5": "3f7f3dbf103a3d58005099c1dee2c71d", "sha256": "2cc4b6b7ef26115a779a395b2c94e848019f8756cacf9ede8dca8dc7707faf62"}, "downloads": -1, "filename": "jlod-2.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "3f7f3dbf103a3d58005099c1dee2c71d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 8291, "upload_time": "2020-04-30T19:21:50", "upload_time_iso_8601": "2020-04-30T19:21:50.411802Z", "url": "https://files.pythonhosted.org/packages/41/9f/5709ff4de477285f83169cb12f6a8c7e8e8b6fdb37454791bc294dc0ad95/jlod-2.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "42c6e17926229aa40c890cd21e908d76", "sha256": "0fa2dcbf0fc1805df831e27f22b0c614a66c056fc59b5e26186db9b2a19aa115"}, "downloads": -1, "filename": "jlod-2.0.1.tar.gz", "has_sig": false, "md5_digest": "42c6e17926229aa40c890cd21e908d76", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 11295, "upload_time": "2020-04-30T19:21:51", "upload_time_iso_8601": "2020-04-30T19:21:51.743101Z", "url": "https://files.pythonhosted.org/packages/12/6d/c14d870fc7dc8e8059dd7ee647da20cf1b2b4e288386108be0dbb8227286/jlod-2.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "3f7f3dbf103a3d58005099c1dee2c71d", "sha256": "2cc4b6b7ef26115a779a395b2c94e848019f8756cacf9ede8dca8dc7707faf62"}, "downloads": -1, "filename": "jlod-2.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "3f7f3dbf103a3d58005099c1dee2c71d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 8291, "upload_time": "2020-04-30T19:21:50", "upload_time_iso_8601": "2020-04-30T19:21:50.411802Z", "url": "https://files.pythonhosted.org/packages/41/9f/5709ff4de477285f83169cb12f6a8c7e8e8b6fdb37454791bc294dc0ad95/jlod-2.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "42c6e17926229aa40c890cd21e908d76", "sha256": "0fa2dcbf0fc1805df831e27f22b0c614a66c056fc59b5e26186db9b2a19aa115"}, "downloads": -1, "filename": "jlod-2.0.1.tar.gz", "has_sig": false, "md5_digest": "42c6e17926229aa40c890cd21e908d76", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 11295, "upload_time": "2020-04-30T19:21:51", "upload_time_iso_8601": "2020-04-30T19:21:51.743101Z", "url": "https://files.pythonhosted.org/packages/12/6d/c14d870fc7dc8e8059dd7ee647da20cf1b2b4e288386108be0dbb8227286/jlod-2.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:52:26 2020"}