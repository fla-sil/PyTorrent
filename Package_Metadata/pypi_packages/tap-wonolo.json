{"info": {"author": "David Wallace", "author_email": "david.wallace@goodeggs.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: 3 :: Only", "Topic :: Software Development"], "description": "# tap-wonolo\n[![PyPI version](https://badge.fury.io/py/tap-wonolo.svg)](https://badge.fury.io/py/tap-wonolo)\n![PyPI - Status](https://img.shields.io/pypi/status/tap-wonolo)\n[![Build Status](https://travis-ci.com/goodeggs/tap-wonolo.svg?branch=master)](https://travis-ci.com/goodeggs/tap-wonolo.svg?branch=master)\n![PyPI - Python Version](https://img.shields.io/pypi/pyversions/tap-wonolo)\n[![License: GPL v3](https://img.shields.io/badge/License-GPLv3-blue.svg)](https://www.gnu.org/licenses/gpl-3.0)\n\nA [Singer](https://www.singer.io/) tap for extracting data from the [Wonolo REST API v2](https://wonolo.readme.io/docs/getting-started).\n\n## Installation\n\nSince package dependencies tend to conflict between various taps and targets, Singer [recommends](https://github.com/singer-io/getting-started/blob/master/docs/RUNNING_AND_DEVELOPING.md#running-singer-with-python) installing taps and targets into their own isolated virtual environments:\n\n### Install Wonolo Tap\n\n```bash\n$ python3 -m venv ~/.venvs/tap-wonolo\n$ source ~/.venvs/tap-wonolo/bin/activate\n$ pip3 install tap-wonolo\n$ deactivate\n```\n\n### Install Stitch Target (optional)\n\n```bash\n$ python3 -m venv ~/.venvs/target-stitch\n$ source ~/.venvs/target-stitch/bin/activate\n$ pip3 install target-stitch\n$ deactivate\n```\n\n## Configuration\n\nThe tap accepts a JSON-formatted configuration file as arguments. This configuration file has four required fields:\n\n1. `api_key`: A valid Wonolo API key.\n2. `secret_key`: A valid Wonolo secret key.\n3. `environment`: A valid Wonolo enviroment (either \"test\" or \"production\").\n\nAn bare-bones Wonolo configuration may file may look like the following:\n\n```json\n{\n  \"api_key\": \"foo\",\n  \"secret_key\": \"bar\",\n  \"environment\": \"test\"\n}\n```\n\n### Authentication\nIf no `auth_token` key is supplied in the configuration file, the tap will automatically request one via the API and write it back to the config file:\n\n```json\n{\n  \"api_key\": \"foo\",\n  \"secret_key\": \"bar\",\n  \"environment\": \"test\",\n  \"auth_token\": \"foobar\",\n  \"auth_token_expires_at\": \"2019-11-08T00:00:20Z\",\n}\n```\n\nThe tap will then use the aforementioned `auth_token` to authenticate to the API, until the `auth_token` becomes invalidated, at which point the tap will automatically request and record a new `auth_token` from the API.\n\n### Granular Stream Configuration\n\nAdditionally, you may specify more granular configurations for individual streams. Each key under a stream should represent a valid API request parameter for that endpoint. A more fleshed-out configuration file may look similar to the following:\n\n```json\n{\n  \"api_key\": \"foo\",\n  \"secret_key\": \"bar\",\n  \"environment\": \"test\",\n  \"api_version\": \"v2\",\n  \"streams\": {\n    \"jobs\": {\n      \"state\": \"fulfilled\",\n      \"company_id\": \"1234\",\n      \"classification\": \"w2\"\n    },\n    \"job_requests\": {\n      \"w2_hourly_rate\": 21.5,\n      \"updated_after\": \"2017-05-24T17:01:19.391-07:00\"\n    }\n  }\n}\n```\n\n## Streams\n\nThe current version of the tap syncs three distinct [Streams](https://github.com/singer-io/getting-started/blob/master/docs/SYNC_MODE.md#streams):\n1. `Jobs`: [Endpoint Documentation](https://wonolo.readme.io/docs/entities-in-the-api#section-jobs)\n2. `Job Requests`: [Endpoint Documentation](https://wonolo.readme.io/docs/entities-in-the-api#section-job-requests)\n3. `Users`: [Endpoint Documentation](https://wonolo.readme.io/docs/entities-in-the-api#section-users)\n\n## Discovery\n\nSinger taps describe the data that a stream supports via a [Discovery](https://github.com/singer-io/getting-started/blob/master/docs/DISCOVERY_MODE.md#discovery-mode) process. You can run the Dayforce tap in Discovery mode by passing the `--discover` flag at runtime:\n\n```bash\n$ ~/.venvs/tap-wonolo/bin/tap-wonolo --config=config/wonolo.config.json --discover\n```\n\nThe tap will generate a [Catalog](https://github.com/singer-io/getting-started/blob/master/docs/DISCOVERY_MODE.md#the-catalog) to stdout. To pass the Catalog to a file instead, simply redirect it to a file:s\n\n```bash\n$ ~/.venvs/tap-wonolo/bin/tap-wonolo --config=config/wonolo.config.json --discover > catalog.json\n```\n\n## Sync to stdout\n\nRunning a tap in [Sync mode](https://github.com/singer-io/getting-started/blob/master/docs/SYNC_MODE.md#sync-mode) will extract data from the various selected Streams. In order to run a tap in Sync mode and have messages emitted to stdout, pass a valid configuration file and catalog file:\n\n```bash\n$ ~/.venvs/tap-wonolo/bin/tap-wonolo --config=config/wonolo.config.json --catalog=catalog.json\n```\n\nThe tap will emit occasional [Metric](https://github.com/singer-io/getting-started/blob/master/docs/SYNC_MODE.md#metric-messages), [Schema](https://github.com/singer-io/getting-started/blob/master/docs/SPEC.md#schema-message), [Record](https://github.com/singer-io/getting-started/blob/master/docs/SPEC.md#record-message), and [State messages](https://github.com/singer-io/getting-started/blob/master/docs/SPEC.md#state-message). You can persist State between runs by redirecting messages to a file:\n\n```bash\n$ ~/.venvs/tap-wonolo/bin/tap-wonolo --config=config/wonolo.config.json --catalog=catalog.json >> state.json\n$ tail -1 state.json > state.json.tmp\n$ mv state.json.tmp state.json\n```\n\n## Sync to Stitch\n\nYou can also send the output of the tap to [Stitch Data](https://www.stitchdata.com/) for loading into the data warehouse. To do this, first create a JSON-formatted configuration for Stitch. This configuration file has two required fields:\n1. `client_id`: The ID associated with the Stitch Data account you'll be sending data to.\n2. `token` The token associated with the specific [Import API integration](https://www.stitchdata.com/docs/integrations/import-api/) within the Stitch Data account.\n\nAn example configuration file will look as follows:\n\n```json\n{\n  \"client_id\": 1234,\n  \"token\": \"foobarfoobar\"\n}\n```\n\nOnce the configuration file is created, simply pipe the output of the tap to the Stitch Data target and supply the target with the newly created configuration file:\n\n```bash\n$ ~/.venvs/tap-wonolo/bin/tap-wonolo --config=config/dayforce.config.json --catalog=catalog.json --state=state.json | ~/.venvs/target-stitch/bin/target-stitch --config=config/stitch.config.json >> state.json\n$ tail -1 state.json > state.json.tmp\n$ mv state.json.tmp state.json\n```\n\n## Contributing\n\nThe first step to contributing is getting a copy of the source code. First, [fork `tap-wonolo` on GitHub](https://github.com/goodeggs/tap-wonolo/fork). Then, `cd` into the directory where you want your copy of the source code to live and clone the source code:\n\n```bash\n$ git clone git@github.com:YourGitHubName/tap-wonolo.git\n```\n\nNow that you have a copy of the source code on your local machine, you can leverage [Pipenv](https://docs.pipenv.org/en/latest/) and the corresponding `Pipfile` to install of the development dependencies within a virtual environment:\n\n```bash\n$ pipenv install --three --dev\n```\n\nThis command will create an isolated virtual environment for your `tap-wonolo` project and install all the development dependencies defined within the `Pipfile` inside of the environment. You can then enter a shell within the environment:\n\n```bash\n$ pipenv shell\n```\n\nOr, you can run individual commands within the environment without entering the shell:\n\n```bash\n$ pipenv run <command>\n```\n\nFor example, to format your code using [isort](https://github.com/timothycrosley/isort) and [flake8](http://flake8.pycqa.org/en/latest/index.html) before commiting changes, run the following commands:\n\n```bash\n$ pipenv run make isort\n$ pipenv run make flake8\n```\n\nYou can also run the entire testing suite before committing using [tox](https://tox.readthedocs.io/en/latest/):\n\n```bash\n$ pipenv run tox\n```\n\nFinally, you can run your local version of the tap within the virtual environment using a command like the following:\n\n```bash\n$ pipenv run tap-wonolo --config=config/dayforce.config.json --catalog=catalog.json\n```\n\nOnce you've confirmed that your changes work and the testing suite passes, feel free to put out a PR!\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/goodeggs/tap-wonolo", "keywords": "singer tap python wonolo", "license": "GPLv3", "maintainer": "", "maintainer_email": "", "name": "tap-wonolo", "package_url": "https://pypi.org/project/tap-wonolo/", "platform": "", "project_url": "https://pypi.org/project/tap-wonolo/", "project_urls": {"Homepage": "https://github.com/goodeggs/tap-wonolo"}, "release_url": "https://pypi.org/project/tap-wonolo/0.1.2/", "requires_dist": ["requests (>=2.22.0)", "attrs (>=19.3.0)", "singer-python (==5.8.1)", "backoff (==1.8.0)", "rollbar (>=0.14.7)"], "requires_python": ">=3.6", "summary": "Singer.io tap for extracting data from Wonolo REST API", "version": "0.1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>tap-wonolo</h1>\n<p><a href=\"https://badge.fury.io/py/tap-wonolo\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2ec1b04d53acb0e24520a7f52695414128f4b8a3/68747470733a2f2f62616467652e667572792e696f2f70792f7461702d776f6e6f6c6f2e737667\"></a>\n<img alt=\"PyPI - Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d016601384219c634d9205a9b15c41b10a6bdaa8/68747470733a2f2f696d672e736869656c64732e696f2f707970692f7374617475732f7461702d776f6e6f6c6f\">\n<a href=\"https://travis-ci.com/goodeggs/tap-wonolo.svg?branch=master\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c40a343ff83ed54c61daaf274b0604c11c3eab8d/68747470733a2f2f7472617669732d63692e636f6d2f676f6f64656767732f7461702d776f6e6f6c6f2e7376673f6272616e63683d6d6173746572\"></a>\n<img alt=\"PyPI - Python Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/abb81a0ea9de106d7ce0aafb6873f2bdb4e374f5/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f7461702d776f6e6f6c6f\">\n<a href=\"https://www.gnu.org/licenses/gpl-3.0\" rel=\"nofollow\"><img alt=\"License: GPL v3\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8de17537dd1659a5a076ce547de301e27c839e67/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d47504c76332d626c75652e737667\"></a></p>\n<p>A <a href=\"https://www.singer.io/\" rel=\"nofollow\">Singer</a> tap for extracting data from the <a href=\"https://wonolo.readme.io/docs/getting-started\" rel=\"nofollow\">Wonolo REST API v2</a>.</p>\n<h2>Installation</h2>\n<p>Since package dependencies tend to conflict between various taps and targets, Singer <a href=\"https://github.com/singer-io/getting-started/blob/master/docs/RUNNING_AND_DEVELOPING.md#running-singer-with-python\" rel=\"nofollow\">recommends</a> installing taps and targets into their own isolated virtual environments:</p>\n<h3>Install Wonolo Tap</h3>\n<pre>$ python3 -m venv ~/.venvs/tap-wonolo\n$ <span class=\"nb\">source</span> ~/.venvs/tap-wonolo/bin/activate\n$ pip3 install tap-wonolo\n$ deactivate\n</pre>\n<h3>Install Stitch Target (optional)</h3>\n<pre>$ python3 -m venv ~/.venvs/target-stitch\n$ <span class=\"nb\">source</span> ~/.venvs/target-stitch/bin/activate\n$ pip3 install target-stitch\n$ deactivate\n</pre>\n<h2>Configuration</h2>\n<p>The tap accepts a JSON-formatted configuration file as arguments. This configuration file has four required fields:</p>\n<ol>\n<li><code>api_key</code>: A valid Wonolo API key.</li>\n<li><code>secret_key</code>: A valid Wonolo secret key.</li>\n<li><code>environment</code>: A valid Wonolo enviroment (either \"test\" or \"production\").</li>\n</ol>\n<p>An bare-bones Wonolo configuration may file may look like the following:</p>\n<pre><span class=\"p\">{</span>\n  <span class=\"nt\">\"api_key\"</span><span class=\"p\">:</span> <span class=\"s2\">\"foo\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"secret_key\"</span><span class=\"p\">:</span> <span class=\"s2\">\"bar\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"environment\"</span><span class=\"p\">:</span> <span class=\"s2\">\"test\"</span>\n<span class=\"p\">}</span>\n</pre>\n<h3>Authentication</h3>\n<p>If no <code>auth_token</code> key is supplied in the configuration file, the tap will automatically request one via the API and write it back to the config file:</p>\n<pre><span class=\"p\">{</span>\n  <span class=\"nt\">\"api_key\"</span><span class=\"p\">:</span> <span class=\"s2\">\"foo\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"secret_key\"</span><span class=\"p\">:</span> <span class=\"s2\">\"bar\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"environment\"</span><span class=\"p\">:</span> <span class=\"s2\">\"test\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"auth_token\"</span><span class=\"p\">:</span> <span class=\"s2\">\"foobar\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"auth_token_expires_at\"</span><span class=\"p\">:</span> <span class=\"s2\">\"2019-11-08T00:00:20Z\"</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n</pre>\n<p>The tap will then use the aforementioned <code>auth_token</code> to authenticate to the API, until the <code>auth_token</code> becomes invalidated, at which point the tap will automatically request and record a new <code>auth_token</code> from the API.</p>\n<h3>Granular Stream Configuration</h3>\n<p>Additionally, you may specify more granular configurations for individual streams. Each key under a stream should represent a valid API request parameter for that endpoint. A more fleshed-out configuration file may look similar to the following:</p>\n<pre><span class=\"p\">{</span>\n  <span class=\"nt\">\"api_key\"</span><span class=\"p\">:</span> <span class=\"s2\">\"foo\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"secret_key\"</span><span class=\"p\">:</span> <span class=\"s2\">\"bar\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"environment\"</span><span class=\"p\">:</span> <span class=\"s2\">\"test\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"api_version\"</span><span class=\"p\">:</span> <span class=\"s2\">\"v2\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"streams\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"nt\">\"jobs\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n      <span class=\"nt\">\"state\"</span><span class=\"p\">:</span> <span class=\"s2\">\"fulfilled\"</span><span class=\"p\">,</span>\n      <span class=\"nt\">\"company_id\"</span><span class=\"p\">:</span> <span class=\"s2\">\"1234\"</span><span class=\"p\">,</span>\n      <span class=\"nt\">\"classification\"</span><span class=\"p\">:</span> <span class=\"s2\">\"w2\"</span>\n    <span class=\"p\">},</span>\n    <span class=\"nt\">\"job_requests\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n      <span class=\"nt\">\"w2_hourly_rate\"</span><span class=\"p\">:</span> <span class=\"mf\">21.5</span><span class=\"p\">,</span>\n      <span class=\"nt\">\"updated_after\"</span><span class=\"p\">:</span> <span class=\"s2\">\"2017-05-24T17:01:19.391-07:00\"</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n<h2>Streams</h2>\n<p>The current version of the tap syncs three distinct <a href=\"https://github.com/singer-io/getting-started/blob/master/docs/SYNC_MODE.md#streams\" rel=\"nofollow\">Streams</a>:</p>\n<ol>\n<li><code>Jobs</code>: <a href=\"https://wonolo.readme.io/docs/entities-in-the-api#section-jobs\" rel=\"nofollow\">Endpoint Documentation</a></li>\n<li><code>Job Requests</code>: <a href=\"https://wonolo.readme.io/docs/entities-in-the-api#section-job-requests\" rel=\"nofollow\">Endpoint Documentation</a></li>\n<li><code>Users</code>: <a href=\"https://wonolo.readme.io/docs/entities-in-the-api#section-users\" rel=\"nofollow\">Endpoint Documentation</a></li>\n</ol>\n<h2>Discovery</h2>\n<p>Singer taps describe the data that a stream supports via a <a href=\"https://github.com/singer-io/getting-started/blob/master/docs/DISCOVERY_MODE.md#discovery-mode\" rel=\"nofollow\">Discovery</a> process. You can run the Dayforce tap in Discovery mode by passing the <code>--discover</code> flag at runtime:</p>\n<pre>$ ~/.venvs/tap-wonolo/bin/tap-wonolo --config<span class=\"o\">=</span>config/wonolo.config.json --discover\n</pre>\n<p>The tap will generate a <a href=\"https://github.com/singer-io/getting-started/blob/master/docs/DISCOVERY_MODE.md#the-catalog\" rel=\"nofollow\">Catalog</a> to stdout. To pass the Catalog to a file instead, simply redirect it to a file:s</p>\n<pre>$ ~/.venvs/tap-wonolo/bin/tap-wonolo --config<span class=\"o\">=</span>config/wonolo.config.json --discover &gt; catalog.json\n</pre>\n<h2>Sync to stdout</h2>\n<p>Running a tap in <a href=\"https://github.com/singer-io/getting-started/blob/master/docs/SYNC_MODE.md#sync-mode\" rel=\"nofollow\">Sync mode</a> will extract data from the various selected Streams. In order to run a tap in Sync mode and have messages emitted to stdout, pass a valid configuration file and catalog file:</p>\n<pre>$ ~/.venvs/tap-wonolo/bin/tap-wonolo --config<span class=\"o\">=</span>config/wonolo.config.json --catalog<span class=\"o\">=</span>catalog.json\n</pre>\n<p>The tap will emit occasional <a href=\"https://github.com/singer-io/getting-started/blob/master/docs/SYNC_MODE.md#metric-messages\" rel=\"nofollow\">Metric</a>, <a href=\"https://github.com/singer-io/getting-started/blob/master/docs/SPEC.md#schema-message\" rel=\"nofollow\">Schema</a>, <a href=\"https://github.com/singer-io/getting-started/blob/master/docs/SPEC.md#record-message\" rel=\"nofollow\">Record</a>, and <a href=\"https://github.com/singer-io/getting-started/blob/master/docs/SPEC.md#state-message\" rel=\"nofollow\">State messages</a>. You can persist State between runs by redirecting messages to a file:</p>\n<pre>$ ~/.venvs/tap-wonolo/bin/tap-wonolo --config<span class=\"o\">=</span>config/wonolo.config.json --catalog<span class=\"o\">=</span>catalog.json &gt;&gt; state.json\n$ tail -1 state.json &gt; state.json.tmp\n$ mv state.json.tmp state.json\n</pre>\n<h2>Sync to Stitch</h2>\n<p>You can also send the output of the tap to <a href=\"https://www.stitchdata.com/\" rel=\"nofollow\">Stitch Data</a> for loading into the data warehouse. To do this, first create a JSON-formatted configuration for Stitch. This configuration file has two required fields:</p>\n<ol>\n<li><code>client_id</code>: The ID associated with the Stitch Data account you'll be sending data to.</li>\n<li><code>token</code> The token associated with the specific <a href=\"https://www.stitchdata.com/docs/integrations/import-api/\" rel=\"nofollow\">Import API integration</a> within the Stitch Data account.</li>\n</ol>\n<p>An example configuration file will look as follows:</p>\n<pre><span class=\"p\">{</span>\n  <span class=\"nt\">\"client_id\"</span><span class=\"p\">:</span> <span class=\"mi\">1234</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"token\"</span><span class=\"p\">:</span> <span class=\"s2\">\"foobarfoobar\"</span>\n<span class=\"p\">}</span>\n</pre>\n<p>Once the configuration file is created, simply pipe the output of the tap to the Stitch Data target and supply the target with the newly created configuration file:</p>\n<pre>$ ~/.venvs/tap-wonolo/bin/tap-wonolo --config<span class=\"o\">=</span>config/dayforce.config.json --catalog<span class=\"o\">=</span>catalog.json --state<span class=\"o\">=</span>state.json <span class=\"p\">|</span> ~/.venvs/target-stitch/bin/target-stitch --config<span class=\"o\">=</span>config/stitch.config.json &gt;&gt; state.json\n$ tail -1 state.json &gt; state.json.tmp\n$ mv state.json.tmp state.json\n</pre>\n<h2>Contributing</h2>\n<p>The first step to contributing is getting a copy of the source code. First, <a href=\"https://github.com/goodeggs/tap-wonolo/fork\" rel=\"nofollow\">fork <code>tap-wonolo</code> on GitHub</a>. Then, <code>cd</code> into the directory where you want your copy of the source code to live and clone the source code:</p>\n<pre>$ git clone git@github.com:YourGitHubName/tap-wonolo.git\n</pre>\n<p>Now that you have a copy of the source code on your local machine, you can leverage <a href=\"https://docs.pipenv.org/en/latest/\" rel=\"nofollow\">Pipenv</a> and the corresponding <code>Pipfile</code> to install of the development dependencies within a virtual environment:</p>\n<pre>$ pipenv install --three --dev\n</pre>\n<p>This command will create an isolated virtual environment for your <code>tap-wonolo</code> project and install all the development dependencies defined within the <code>Pipfile</code> inside of the environment. You can then enter a shell within the environment:</p>\n<pre>$ pipenv shell\n</pre>\n<p>Or, you can run individual commands within the environment without entering the shell:</p>\n<pre>$ pipenv run &lt;command&gt;\n</pre>\n<p>For example, to format your code using <a href=\"https://github.com/timothycrosley/isort\" rel=\"nofollow\">isort</a> and <a href=\"http://flake8.pycqa.org/en/latest/index.html\" rel=\"nofollow\">flake8</a> before commiting changes, run the following commands:</p>\n<pre>$ pipenv run make isort\n$ pipenv run make flake8\n</pre>\n<p>You can also run the entire testing suite before committing using <a href=\"https://tox.readthedocs.io/en/latest/\" rel=\"nofollow\">tox</a>:</p>\n<pre>$ pipenv run tox\n</pre>\n<p>Finally, you can run your local version of the tap within the virtual environment using a command like the following:</p>\n<pre>$ pipenv run tap-wonolo --config<span class=\"o\">=</span>config/dayforce.config.json --catalog<span class=\"o\">=</span>catalog.json\n</pre>\n<p>Once you've confirmed that your changes work and the testing suite passes, feel free to put out a PR!</p>\n\n          </div>"}, "last_serial": 6851222, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "e1f8a8dcb51ad9751e5bc8634a74fd24", "sha256": "aa7bfac1907946ed6a4e2c8e324f16aaf0feee8e125d36a386f2811046183efe"}, "downloads": -1, "filename": "tap_wonolo-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "e1f8a8dcb51ad9751e5bc8634a74fd24", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 22754, "upload_time": "2019-12-04T15:10:01", "upload_time_iso_8601": "2019-12-04T15:10:01.230951Z", "url": "https://files.pythonhosted.org/packages/93/bc/49fef642bd7a0901162d6191a3c262f5f813cd70cf35d775fb5ee6ec4bf3/tap_wonolo-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "49310e6b828ea5985f28b8a46068bc31", "sha256": "980cda8362c5293b865a12e5b8aa835b478b8ae001bd0bc5a941fc518c9b1fdc"}, "downloads": -1, "filename": "tap_wonolo-0.1.0.tar.gz", "has_sig": false, "md5_digest": "49310e6b828ea5985f28b8a46068bc31", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 12104, "upload_time": "2019-12-04T15:10:02", "upload_time_iso_8601": "2019-12-04T15:10:02.416192Z", "url": "https://files.pythonhosted.org/packages/9d/b6/3ea728db711ec7f1e511a62805c5e0393d233f6b6afd54605526ac710370/tap_wonolo-0.1.0.tar.gz", "yanked": false}], "0.1.0rc1": [{"comment_text": "", "digests": {"md5": "ba6ea152332baf45ca8b8f023382e9ca", "sha256": "84826c2be67e307717380f29ae8a5fd003e37ddb2889c510c49005f2df35d74c"}, "downloads": -1, "filename": "tap_wonolo-0.1.0rc1-py3-none-any.whl", "has_sig": false, "md5_digest": "ba6ea152332baf45ca8b8f023382e9ca", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 22145, "upload_time": "2019-11-13T17:25:19", "upload_time_iso_8601": "2019-11-13T17:25:19.128960Z", "url": "https://files.pythonhosted.org/packages/3a/52/aab8149f33ef8ca2db3b08e97e6f89803bc248243ca49d20f49088242cc8/tap_wonolo-0.1.0rc1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "531a0c53a5e8797cc513e37dcb86e24c", "sha256": "28659a694f461858eea18c462b02eab09f9ade89fef48fa840b9471a349b50bd"}, "downloads": -1, "filename": "tap_wonolo-0.1.0rc1.tar.gz", "has_sig": false, "md5_digest": "531a0c53a5e8797cc513e37dcb86e24c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 11435, "upload_time": "2019-11-13T17:25:21", "upload_time_iso_8601": "2019-11-13T17:25:21.583340Z", "url": "https://files.pythonhosted.org/packages/92/a5/d8f3ddbe77a88b13067edcbfffaa83f756d350dd9765da1e452de52c29e2/tap_wonolo-0.1.0rc1.tar.gz", "yanked": false}], "0.1.0rc2": [{"comment_text": "", "digests": {"md5": "9a75cb74af146300573508fbb492c3fc", "sha256": "6b561c53b81cf6f0c05c6ff7d58f252a9046ff5f243583df7a0c4ec848d3302b"}, "downloads": -1, "filename": "tap_wonolo-0.1.0rc2-py3-none-any.whl", "has_sig": false, "md5_digest": "9a75cb74af146300573508fbb492c3fc", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 22832, "upload_time": "2019-11-14T17:49:09", "upload_time_iso_8601": "2019-11-14T17:49:09.404878Z", "url": "https://files.pythonhosted.org/packages/65/2c/021a81214bc1821affc7920fdf6f38b36dd134f1b0fa0957fed6858c9366/tap_wonolo-0.1.0rc2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b1403e76d9bce5cea3db5d0d8d4ee82f", "sha256": "fd9fd00cf84d5f4ed6f4ed9cd7ebd7a27fdc68a542d00cd5a1bb951fb80d8eb1"}, "downloads": -1, "filename": "tap_wonolo-0.1.0rc2.tar.gz", "has_sig": false, "md5_digest": "b1403e76d9bce5cea3db5d0d8d4ee82f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 12120, "upload_time": "2019-11-14T17:49:12", "upload_time_iso_8601": "2019-11-14T17:49:12.346889Z", "url": "https://files.pythonhosted.org/packages/66/0a/ce470071c19a746978c216311f382684b2fee9b9fafb9e9a4cc5e0dcd2c9/tap_wonolo-0.1.0rc2.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "827e51fea95db2ca11871200cbaa185b", "sha256": "de5bdd4ea391117f19b93d9cb1d8796597a38431d94ed0eb2467348de9319adb"}, "downloads": -1, "filename": "tap_wonolo-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "827e51fea95db2ca11871200cbaa185b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 23179, "upload_time": "2019-12-23T15:30:59", "upload_time_iso_8601": "2019-12-23T15:30:59.543747Z", "url": "https://files.pythonhosted.org/packages/8e/cf/2ffb1d3bf6c7dc66b846fe396f2f3e430a51ac27a072b1a888661982d21f/tap_wonolo-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2befbf5c7c9022b74ca1c5d28756eb8c", "sha256": "d7d118c1fe4d3558401e4a2b8d4c7dd4b391080595961704728d83751c5ff125"}, "downloads": -1, "filename": "tap_wonolo-0.1.1.tar.gz", "has_sig": false, "md5_digest": "2befbf5c7c9022b74ca1c5d28756eb8c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 12512, "upload_time": "2019-12-23T15:31:00", "upload_time_iso_8601": "2019-12-23T15:31:00.730593Z", "url": "https://files.pythonhosted.org/packages/8e/2b/1d4e4f44a583f1a060e49c2eb525b8522a7bca6791abf634ed5706ec7aed/tap_wonolo-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "0eac560cb5eb9a7d7790dfb89b2ac1ae", "sha256": "d3cbf0415571f1334362c7fc0da65f54e9e4dbf39771efb7772e50e2114fed82"}, "downloads": -1, "filename": "tap_wonolo-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "0eac560cb5eb9a7d7790dfb89b2ac1ae", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 23276, "upload_time": "2020-03-20T17:04:24", "upload_time_iso_8601": "2020-03-20T17:04:24.613134Z", "url": "https://files.pythonhosted.org/packages/62/84/e41f17f3b08a23182500945f1a119d5d77c563de5926668abc4b273b7ba2/tap_wonolo-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "06623802268945c670759ea7d129e469", "sha256": "f7cd2f49c24d9c6c01d8e4057c8051988f5cf3ba5cdc49cc63611b3743c1da01"}, "downloads": -1, "filename": "tap_wonolo-0.1.2.tar.gz", "has_sig": false, "md5_digest": "06623802268945c670759ea7d129e469", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 12607, "upload_time": "2020-03-20T17:04:26", "upload_time_iso_8601": "2020-03-20T17:04:26.166929Z", "url": "https://files.pythonhosted.org/packages/cd/fb/292c910b0985a8d0a49ba709ea9a9c90ab8469805ba88c59abffec0ce772/tap_wonolo-0.1.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "0eac560cb5eb9a7d7790dfb89b2ac1ae", "sha256": "d3cbf0415571f1334362c7fc0da65f54e9e4dbf39771efb7772e50e2114fed82"}, "downloads": -1, "filename": "tap_wonolo-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "0eac560cb5eb9a7d7790dfb89b2ac1ae", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 23276, "upload_time": "2020-03-20T17:04:24", "upload_time_iso_8601": "2020-03-20T17:04:24.613134Z", "url": "https://files.pythonhosted.org/packages/62/84/e41f17f3b08a23182500945f1a119d5d77c563de5926668abc4b273b7ba2/tap_wonolo-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "06623802268945c670759ea7d129e469", "sha256": "f7cd2f49c24d9c6c01d8e4057c8051988f5cf3ba5cdc49cc63611b3743c1da01"}, "downloads": -1, "filename": "tap_wonolo-0.1.2.tar.gz", "has_sig": false, "md5_digest": "06623802268945c670759ea7d129e469", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 12607, "upload_time": "2020-03-20T17:04:26", "upload_time_iso_8601": "2020-03-20T17:04:26.166929Z", "url": "https://files.pythonhosted.org/packages/cd/fb/292c910b0985a8d0a49ba709ea9a9c90ab8469805ba88c59abffec0ce772/tap_wonolo-0.1.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:57:59 2020"}