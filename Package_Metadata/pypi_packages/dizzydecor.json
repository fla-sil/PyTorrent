{"info": {"author": "Tyler Nullmeier", "author_email": "Tylerzeromaster@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3 :: Only", "Topic :: Utilities"], "description": "Tornado web services @ your fingertips\n===============================================================================\n\n**dizzydecor** is a python library that makes it easy to create web services \nin tornado. To accomplish this, the library adds two new classes and decorators \nthat help eliminate the need for boilerplate code. \n\nExample\n----------------------------------------------------------------------------\n\nHere is an example to show how **dizzydecor**, works:\n\n.. code:: python\n\n    from tornado.ioloop import IOLoop\n\n    from dizzydecor import (\n        WSApplication,\n        WebserviceHandler,\n        webservice,\n        servicemethod\n    )\n\n    @webservice\n    class MyWebService(WebserviceHandler):\n\n        @servicemethod()\n        async def echo(self, message):\n            return f\"You said: {message}\"\n\n        @servicemethod(httpmethod=\"GET\")\n        async def my_greeting(self):\n            return dict(greeting=\"Hello, welcome to my web service demo!\")\n\n    if __name__ == \"__main__\":\n        app = WSApplication()\n        app.listen(8080)\n        IOLoop.current().start()\n\nThis will create a web service with two service methods: echo and my_greeting.\nBy default, service methods respond to POST requests; however, the ``httpmethod``\nargument to ``servicemethod`` can change this behaviour. For instance, \nmy_greeting is setup to respond to GET requests.\n\nPaths are generated based on class and method names. \n    - A web service's path is the lower-case class name with each word joined by a hyphen. (MyWebService -> my-web-service)\n    - A method's path is the method's name with underscores replaced with hyphens. (my_greeting -> my-greeting)\n\nIt's also worth noting that if a service method does not get all of its \narguments, the service handler sends a 400 HTTP status code.\n\nTo test, you can use curl::\n\n    $ curl http://localhost:8080/my-web-service/echo -d '{\"message\": \"This is my message\"}'\n    \"You said: This is my message\"\n    $ curl http://localhost:8080/my-web-service/my-greeting\n    {\"greeting\": \"Hello, welcome to my web service demo!\"}\n\nYou may have noticed that the example uses JSON.\n\nWhat if I do not want to use JSON?\n----------------------------------------------------------------------------\n\nIn this case, all you need to do is override the ``load`` and ``dump``\nmethods in a subclass of ``WebserviceHandler`` or ``SyncWebserviceHandler``\n\nHere is an example with `PyYAML <http://pyyaml.org/wiki/PyYAML>`_:\n\n.. code:: python\n\n    # -- snip --\n\n    import yaml\n\n    class YAMLServiceHandler(WebserviceHandler):\n\n        def load(self, request):\n            return yaml.safe_load(request)\n\n        def dump(self, response):\n            # You can also set content-type here with self.set_header\n            return yaml.safe_dump(response)\n\n    @webservice\n    class YetAnotherService(YAMLServiceHandler):\n\n        @servicemethod()\n        async def join(self, arr, delim):\n            return dict(message=delim.join(map(str, arr)))\n\n    # -- snip --\n\nThe rest is exactly the same, except now your service will use YAML.\n\nHere's how to test it with curl::\n\n    $ curl http://localhost:8080/yet-another-service/join --data-binary @\"/dev/stdin\"<<_eof_\n    arr:\n        - Hello\n        - world\n    delim: \" \"\n    _eof_\n    message: Hello world\n\nInstallation\n----------------------------------------------------------------------------\n\nInstall with pip or easy_install::\n\n    $ pip install dizzydecor\n\n**dizzydecor** is only available for Python 3\n\nWhat about non-standard HTTP methods? (Experimental)\n----------------------------------------------------------------------------\n\nIn this case, all you need to do is extend the SUPPORTED_METHODS property \nof the service handler class.\n\n.. code:: python\n\n    # -- snip --\n\n    @webservice\n    class NotificationService(WebserviceHandler):\n        SUPPORTED_METHODS = WebserviceHandler.SUPPORTED_METHODS + (\"NOTIFY\",)\n\n        @servicemethod(httpmethod=\"NOTIFY\")\n        async def notification(self, message):\n            # etc\n\n    # -- snip --\n\nThe script for the new HTTP method is added to the service handler \nduring the creation of the web service. After that, all you need to \ndo is setup to service method to respond to that request type. Depending \non the situation, you might also need to customize the way arguments are \nparsed by overriding prepare.\n\nSynchronous services\n----------------------------------------------------------------------------\n\nThe ``WebserviceHandler`` is asynchronous; however, you can make synchronous \nservice handlers using the ``SyncWebserviceHandler`` class.\n\n.. code:: python\n\n    # -- snip --\n\n    @webservice\n    class MySyncService(SyncWebserviceHandler):\n\n        # This time the method is not async\n        @servicemethod(httpmethod=\"GET\")\n        def my_greeting(self):\n            return dict(greeting=\"Hello...\")\n\n    # -- snip --\n\n", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/TylerZeroMaster/dizzydecor", "keywords": "tornado webservice web service oriented SOA decorator", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "dizzydecor", "package_url": "https://pypi.org/project/dizzydecor/", "platform": "", "project_url": "https://pypi.org/project/dizzydecor/", "project_urls": {"Homepage": "https://github.com/TylerZeroMaster/dizzydecor"}, "release_url": "https://pypi.org/project/dizzydecor/0.0.2/", "requires_dist": ["tornado"], "requires_python": ">=3", "summary": "Web service decorators for tornado", "version": "0.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><strong>dizzydecor</strong> is a python library that makes it easy to create web services\nin tornado. To accomplish this, the library adds two new classes and decorators\nthat help eliminate the need for boilerplate code.</p>\n<div id=\"example\">\n<h2>Example</h2>\n<p>Here is an example to show how <strong>dizzydecor</strong>, works:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">tornado.ioloop</span> <span class=\"kn\">import</span> <span class=\"n\">IOLoop</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">dizzydecor</span> <span class=\"kn\">import</span> <span class=\"p\">(</span>\n    <span class=\"n\">WSApplication</span><span class=\"p\">,</span>\n    <span class=\"n\">WebserviceHandler</span><span class=\"p\">,</span>\n    <span class=\"n\">webservice</span><span class=\"p\">,</span>\n    <span class=\"n\">servicemethod</span>\n<span class=\"p\">)</span>\n\n<span class=\"nd\">@webservice</span>\n<span class=\"k\">class</span> <span class=\"nc\">MyWebService</span><span class=\"p\">(</span><span class=\"n\">WebserviceHandler</span><span class=\"p\">):</span>\n\n    <span class=\"nd\">@servicemethod</span><span class=\"p\">()</span>\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">echo</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"sa\">f</span><span class=\"s2\">\"You said: </span><span class=\"si\">{</span><span class=\"n\">message</span><span class=\"si\">}</span><span class=\"s2\">\"</span>\n\n    <span class=\"nd\">@servicemethod</span><span class=\"p\">(</span><span class=\"n\">httpmethod</span><span class=\"o\">=</span><span class=\"s2\">\"GET\"</span><span class=\"p\">)</span>\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">my_greeting</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">greeting</span><span class=\"o\">=</span><span class=\"s2\">\"Hello, welcome to my web service demo!\"</span><span class=\"p\">)</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s2\">\"__main__\"</span><span class=\"p\">:</span>\n    <span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">WSApplication</span><span class=\"p\">()</span>\n    <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">listen</span><span class=\"p\">(</span><span class=\"mi\">8080</span><span class=\"p\">)</span>\n    <span class=\"n\">IOLoop</span><span class=\"o\">.</span><span class=\"n\">current</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n</pre>\n<p>This will create a web service with two service methods: echo and my_greeting.\nBy default, service methods respond to POST requests; however, the <tt>httpmethod</tt>\nargument to <tt>servicemethod</tt> can change this behaviour. For instance,\nmy_greeting is setup to respond to GET requests.</p>\n<dl>\n<dt>Paths are generated based on class and method names.</dt>\n<dd><ul>\n<li>A web service\u2019s path is the lower-case class name with each word joined by a hyphen. (MyWebService -&gt; my-web-service)</li>\n<li>A method\u2019s path is the method\u2019s name with underscores replaced with hyphens. (my_greeting -&gt; my-greeting)</li>\n</ul>\n</dd>\n</dl>\n<p>It\u2019s also worth noting that if a service method does not get all of its\narguments, the service handler sends a 400 HTTP status code.</p>\n<p>To test, you can use curl:</p>\n<pre>$ curl http://localhost:8080/my-web-service/echo -d '{\"message\": \"This is my message\"}'\n\"You said: This is my message\"\n$ curl http://localhost:8080/my-web-service/my-greeting\n{\"greeting\": \"Hello, welcome to my web service demo!\"}\n</pre>\n<p>You may have noticed that the example uses JSON.</p>\n</div>\n<div id=\"what-if-i-do-not-want-to-use-json\">\n<h2>What if I do not want to use JSON?</h2>\n<p>In this case, all you need to do is override the <tt>load</tt> and <tt>dump</tt>\nmethods in a subclass of <tt>WebserviceHandler</tt> or <tt>SyncWebserviceHandler</tt></p>\n<p>Here is an example with <a href=\"http://pyyaml.org/wiki/PyYAML\" rel=\"nofollow\">PyYAML</a>:</p>\n<pre><span class=\"c1\"># -- snip --</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">yaml</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">YAMLServiceHandler</span><span class=\"p\">(</span><span class=\"n\">WebserviceHandler</span><span class=\"p\">):</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">load</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">yaml</span><span class=\"o\">.</span><span class=\"n\">safe_load</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">dump</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">response</span><span class=\"p\">):</span>\n        <span class=\"c1\"># You can also set content-type here with self.set_header</span>\n        <span class=\"k\">return</span> <span class=\"n\">yaml</span><span class=\"o\">.</span><span class=\"n\">safe_dump</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@webservice</span>\n<span class=\"k\">class</span> <span class=\"nc\">YetAnotherService</span><span class=\"p\">(</span><span class=\"n\">YAMLServiceHandler</span><span class=\"p\">):</span>\n\n    <span class=\"nd\">@servicemethod</span><span class=\"p\">()</span>\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">join</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">arr</span><span class=\"p\">,</span> <span class=\"n\">delim</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"o\">=</span><span class=\"n\">delim</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">arr</span><span class=\"p\">)))</span>\n\n<span class=\"c1\"># -- snip --</span>\n</pre>\n<p>The rest is exactly the same, except now your service will use YAML.</p>\n<p>Here\u2019s how to test it with curl:</p>\n<pre>$ curl http://localhost:8080/yet-another-service/join --data-binary @\"/dev/stdin\"&lt;&lt;_eof_\narr:\n    - Hello\n    - world\ndelim: \" \"\n_eof_\nmessage: Hello world\n</pre>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Install with pip or easy_install:</p>\n<pre>$ pip install dizzydecor\n</pre>\n<p><strong>dizzydecor</strong> is only available for Python 3</p>\n</div>\n<div id=\"what-about-non-standard-http-methods-experimental\">\n<h2>What about non-standard HTTP methods? (Experimental)</h2>\n<p>In this case, all you need to do is extend the SUPPORTED_METHODS property\nof the service handler class.</p>\n<pre><span class=\"c1\"># -- snip --</span>\n\n<span class=\"nd\">@webservice</span>\n<span class=\"k\">class</span> <span class=\"nc\">NotificationService</span><span class=\"p\">(</span><span class=\"n\">WebserviceHandler</span><span class=\"p\">):</span>\n    <span class=\"n\">SUPPORTED_METHODS</span> <span class=\"o\">=</span> <span class=\"n\">WebserviceHandler</span><span class=\"o\">.</span><span class=\"n\">SUPPORTED_METHODS</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"s2\">\"NOTIFY\"</span><span class=\"p\">,)</span>\n\n    <span class=\"nd\">@servicemethod</span><span class=\"p\">(</span><span class=\"n\">httpmethod</span><span class=\"o\">=</span><span class=\"s2\">\"NOTIFY\"</span><span class=\"p\">)</span>\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">notification</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"p\">):</span>\n        <span class=\"c1\"># etc</span>\n\n<span class=\"c1\"># -- snip --</span>\n</pre>\n<p>The script for the new HTTP method is added to the service handler\nduring the creation of the web service. After that, all you need to\ndo is setup to service method to respond to that request type. Depending\non the situation, you might also need to customize the way arguments are\nparsed by overriding prepare.</p>\n</div>\n<div id=\"synchronous-services\">\n<h2>Synchronous services</h2>\n<p>The <tt>WebserviceHandler</tt> is asynchronous; however, you can make synchronous\nservice handlers using the <tt>SyncWebserviceHandler</tt> class.</p>\n<pre><span class=\"c1\"># -- snip --</span>\n\n<span class=\"nd\">@webservice</span>\n<span class=\"k\">class</span> <span class=\"nc\">MySyncService</span><span class=\"p\">(</span><span class=\"n\">SyncWebserviceHandler</span><span class=\"p\">):</span>\n\n    <span class=\"c1\"># This time the method is not async</span>\n    <span class=\"nd\">@servicemethod</span><span class=\"p\">(</span><span class=\"n\">httpmethod</span><span class=\"o\">=</span><span class=\"s2\">\"GET\"</span><span class=\"p\">)</span>\n    <span class=\"k\">def</span> <span class=\"nf\">my_greeting</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">greeting</span><span class=\"o\">=</span><span class=\"s2\">\"Hello...\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># -- snip --</span>\n</pre>\n</div>\n\n          </div>"}, "last_serial": 6387952, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "107e8d934b544e86c64982cc89937dd5", "sha256": "8777be082482f9681077050210c6645f8b1410cb004ced16b5f55eaf974718fe"}, "downloads": -1, "filename": "dizzydecor-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "107e8d934b544e86c64982cc89937dd5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 6170, "upload_time": "2019-08-05T21:12:37", "upload_time_iso_8601": "2019-08-05T21:12:37.348258Z", "url": "https://files.pythonhosted.org/packages/89/6f/2563e3d143dc759c270d7e5df95a80cadd9c71160e0d1b435b1c513a659c/dizzydecor-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "322e3cb3981ecce9275815f0ce93baef", "sha256": "3641a1328ed569c2708388d22f5afda2a4367b3e633c04f21a8e4e8e00e05c20"}, "downloads": -1, "filename": "dizzydecor-0.0.1.tar.gz", "has_sig": false, "md5_digest": "322e3cb3981ecce9275815f0ce93baef", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 6318, "upload_time": "2019-08-05T21:12:39", "upload_time_iso_8601": "2019-08-05T21:12:39.721023Z", "url": "https://files.pythonhosted.org/packages/3c/55/c3dff2503dc15d408c79250849a9ec19b7fed5fcd2a64baba562f47b9a6d/dizzydecor-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "c35a950394add193f803b2b626889126", "sha256": "e35f462b0c85b7235296ce48181d6c6a40f992e746f6c9d74abab999599a0c3d"}, "downloads": -1, "filename": "dizzydecor-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "c35a950394add193f803b2b626889126", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 6192, "upload_time": "2020-01-02T21:56:06", "upload_time_iso_8601": "2020-01-02T21:56:06.017019Z", "url": "https://files.pythonhosted.org/packages/79/6f/c6b9d1a84c3fc5c3beba22740625af72be71caac67ba6bce3a26be3dfd92/dizzydecor-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "158f3bb303234dacd61f6e11ce010e89", "sha256": "7673ce59f419d276d3b03733e1430a2cb90a795293097e0f4042e97b3fcbd550"}, "downloads": -1, "filename": "dizzydecor-0.0.2.tar.gz", "has_sig": false, "md5_digest": "158f3bb303234dacd61f6e11ce010e89", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 6340, "upload_time": "2020-01-02T21:56:07", "upload_time_iso_8601": "2020-01-02T21:56:07.974235Z", "url": "https://files.pythonhosted.org/packages/88/0c/48e26af51707a6708ac8f0be020ca5c6973ffa5bebf8d9893e07ed594553/dizzydecor-0.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c35a950394add193f803b2b626889126", "sha256": "e35f462b0c85b7235296ce48181d6c6a40f992e746f6c9d74abab999599a0c3d"}, "downloads": -1, "filename": "dizzydecor-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "c35a950394add193f803b2b626889126", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 6192, "upload_time": "2020-01-02T21:56:06", "upload_time_iso_8601": "2020-01-02T21:56:06.017019Z", "url": "https://files.pythonhosted.org/packages/79/6f/c6b9d1a84c3fc5c3beba22740625af72be71caac67ba6bce3a26be3dfd92/dizzydecor-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "158f3bb303234dacd61f6e11ce010e89", "sha256": "7673ce59f419d276d3b03733e1430a2cb90a795293097e0f4042e97b3fcbd550"}, "downloads": -1, "filename": "dizzydecor-0.0.2.tar.gz", "has_sig": false, "md5_digest": "158f3bb303234dacd61f6e11ce010e89", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 6340, "upload_time": "2020-01-02T21:56:07", "upload_time_iso_8601": "2020-01-02T21:56:07.974235Z", "url": "https://files.pythonhosted.org/packages/88/0c/48e26af51707a6708ac8f0be020ca5c6973ffa5bebf8d9893e07ed594553/dizzydecor-0.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:37:57 2020"}