{"info": {"author": "Andrew P Smith", "author_email": "a.p.smith@leeds.ac.uk", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# UK Census Data API\n\n[![Build Status](https://travis-ci.org/virgesmith/UKCensusAPI.png?branch=master)](https://travis-ci.org/virgesmith/UKCensusAPI) [![License](https://img.shields.io/github/license/mashape/apistatus.svg)](https://opensource.org/licenses/MIT)\n[![JOSS status](http://joss.theoj.org/papers/40041a0ebb1364286d5eb144d333bb6a/status.svg)](http://joss.theoj.org/papers/40041a0ebb1364286d5eb144d333bb6a)\n[![DOI](https://zenodo.org/badge/99702514.svg)](https://zenodo.org/badge/latestdoi/99702514)\n[![PyPI version](https://badge.fury.io/py/ukcensusapi.svg)](https://badge.fury.io/py/ukcensusapi)\n[![Anaconda-Server Badge](https://anaconda.org/conda-forge/ukcensusapi/badges/version.svg)](https://anaconda.org/conda-forge/ukcensusapi)\n[![Anaconda-Server Badge](https://anaconda.org/conda-forge/ukcensusapi/badges/downloads.svg)](https://anaconda.org/conda-forge/ukcensusapi)\n> ## Update\n> This package has been something of a misnomer as it only used Nomisweb as its data source, which only provides full census data for England & Wales. (They do provide some UK key statistics and quick statistics tables).\n\n> Version 1.1.x of this package extends the 2011 census data coverage for Scotland and Northern Ireland. The aim is to make the data (and the metadata) consistent across all nations, but as neither country provide a web API for their data we have to resort to web scraping. This means the slicing-and-dicing and geographical query functionality may be more limited than it is for England & Wales. Note also that category values in equivalent tables may differ slightly.\n\n> ### Scotland\n> For Scotland, data can be downloaded at country or Council Area (~LAD) level, at geographical resolutions of Council Area, Data Zone (~LSOA) and Output Area. Intermediate Area (~MSOA) data can be aggregated (only) where the data is available at a higher geographical resolution.\n\n> The principal functions are `NRScotland.get_metadata()` for metadata, `NRScotland.get_data()` for the actual data, and `NRScotland.contextify()` to annotate the data using the metadata. \n\n> ### Northern Ireland\n> For Northern Ireland, data can be downloaded at country or Local Government District (~LAD) level, at geographical resolutions of Super Output Area (~LSOA) and Small Area (OA). Ward (~MSOA) (~MSOA) data can be aggregated (only) where the data is available at higher geographical resolution.\n> The principal functions are `NISRA.get_metadata()` for metadata, `NISRA.get_data()` for the actual data, and `NISRA.contextify()` to annotate the data using the metadata. \n\n[Nomisweb](https://www.nomisweb.co.uk), run by Durham University, provides online access to the most detailed and up-to-date statistics from official sources for local areas throughout the UK, including census data.  \n\nThis package provides both a `python` and an `R` wrapper around the nomisweb census data API, the NRScotland and NISRA websites, enabling:\n\n- querying table metadata\n- autogenerating customised python and R query code for future use\n- automated cached data downloads\n- modifying the geography of queries\n- adding descriptive information to tables (from metadata)\n\nQueries can be customised on geographical coverage, geographical resolution, and table fields, the latter can be filtered to include only the category values you require.\n\nThe package can generate reusable code snippets that can be inserted into applications. Such applications will work seamlessly for any user as long as they have installed this package, and possess their own nomisweb API key.   \n\nSince census data is essentially static, it makes little sense to download the data every time it is requested: all data downloads are cached.\n\nExample code is also provided which:\n- shows how an existing query can easily be modified in terms of geographical coverage.\n- shows how raw data can be annotated with meaningful metadata\n\n## Prerequisites\n\n### Software\n\n- python3.4 or higher, with pip, numpy and pandas. The dependencies should install automatically. Python 2 is not supported.\n- R version 3.3.3 or higher (optional, if using the R interface)\n\n### API key\n\nIt is recommended that you register with [nomisweb](https://www.nomisweb.co.uk) before using this package and use the API key the supply you in all queries. Without a key, queries will be truncated (max 25000 rows). With a key, the row limit is 1000000 and this package will warn if a query generates data with this number of rows. \n\nOnce registered, you will find your API key on [this page](https://www.nomisweb.co.uk/myaccount/webservice.asp). You should not divulge this key to others.\n\nThis package will look for the key in the following places (in order):\n- locally: a file `NOMIS_API_KEY` in the cache directory defined at initialisation, e.g.\n   ```\n   $ cat cache/NOMIS_API_KEY\n   0x0000000000000000000000000000000000000000\n   ```\n- globally: the environment variable NOMIS_API_KEY. R users can store the key in their `.Renviron` file: R will set the environment on startup, which will be visible to a python session instantiated from R.\n\nInitialisation will fail if the key is not defined in one of these locations. Note: if for some reason you cannot register with nomisweb, you must still define an API key - just set it to an obviously invalid value.\n\n## Installation\n\n### python (from PyPI)\n```\nuser@host:~$ python3 -m pip install UKCensusAPI\n```\n(NB This will install only the basic package without the scripts and examples.)\n### python (from github)\n```\nuser@host:~$ pip install git+https://github.com/virgesmith/UKCensusAPI.git\n``` \n### python (from cloned repo):\n```\nuser@host:~/dev/UKCensusAPI$ ./setup.py install\n``` \nand to test\n```\nuser@host:~/dev/UKCensusAPI$ ./setup.py test\n``` \n### R\n```\n> devtools::install_github(\"virgesmith/UKCensusAPI\")\n```\nSet the `RETICULATE_PYTHON` environment variable in your .Renviron file to the python3 interpreter, e.g. (for linux)\n```\nRETICULATE_PYTHON=$(which python3)\n```\n\n## Usage\n\nIn your Python code import the package like e.g.:\n```\nimport ukcensusapi.Nomisweb as census_api\n```\nAnd in R:\n```\nlibrary(UKCensusAPI)\n```\n### Queries\n\nQueries have three distinct subtypes:\n\n- metadata: query a table for the fields and categories it contains\n- geography: retrieve a list of area codes of a particular type within a given region of another (larger) type.\n- data: retrieve data from a table using a query built from the metadata and geography.\n\nData and metadata are cached locally to minimise requests to nomisweb.co.uk.\n\nUsing the interactive query builder, and a known table, you can constuct a programmatically reusable query selecting categories, specific category values, and (optionally) geography, See example below. \n\nQueries can subsequently be programmatically modified to switched to a different geographical region and/or resolution.\n\n### Interactive Query\n\nThe first thing users may want to do is an interactive query. All you need to do is specify the name of a census table. The script will then iterate over the categories within the table, prompting you user to select the categories and values you're interested in.\n\nOnce done you'll be prompted to (optionally) specify a geography for the data - a geographical region and a resolution.\n\nFinally, if you've specified the geography, the script will ask if you want to download (and cache) the data immediately.\n\nThe script then produces the following files:\n\n- a json file containing the table metadata\n- python and R code snippets that build the query and call this package to download the data \n- (optionally, depending on above selections) the data itself (which is cached)\n\nThese files are all saved in the cache directory (default is `/tmp/UKCensusAPI`).\n\nThe code snippets are designed to be copy/pasted into user code. The (cached) data and metadata can simply be loaded by user code as required.\n\nNote for R users - there is no direct R script for the interactive query largely due to the fact it will not work from within RStudio (due to the way RStudio handles stdin).\n\n### Data reuse\n\nExisting cached data is always used in preference to downloading. The data is stored locally using a filename based on the table name and md5 hash of the query used to download the data. This way, different queries on the same table can be stored.\n\nTo force the data to be downloaded, just delete the cached data. \n\n### Query Reuse\n\nThe code snippets can simply be inserted into user code, and the metadata (json) can be used as a guide for modifying the query, either manually or automatically.\n\n### Switching Geography\n\nExisting queries can easily be modified to switch to a different geographical area and/or a different geographical resolution. \n\nThis allows, for example, users to write models where the geographical coverage and resolution can be user inputs.\n\nExamples of how to do this are in [`geoquery.py`](inst/examples/geoquery.py) and [`geoquery.R`](inst/examples/geoquery.R).\n\n### Annotating Data\n\nQueries will download data with a minimal memory footprint, but also metadata that provides meaning. Whilst this makes manipulating and querying the data efficient, it means that the data itself lacks human-readability. For this reason the package provides a way of annotating tables with contextual data derived from the table metadata. \n\nExamples of how to do this are in [`contextify.py`](inst/examples/contextify.py) and [`contextify.R`](inst/examples/contextify.R).\n\n## Interactive Query Builder\n\nThis functionality requires that you already know the name of the census table of interest, and want to define a custom query on that table, for a specific geography at a specific resolution.\n\nIf you're unsure about which table to query, Nomisweb provide a useful [table finder](https://www.nomisweb.co.uk/census/2011/data_finder). NB Not all census tables are available at all geographical resolutions, but the above link will enumerate the available resolutions for each table.\n\n### Interactive Query - Example\n\nRun the script. You'll be prompted to enter the name of the census table of interest:\n\n<pre>\nuser@host ~/dev/UKCensusAPI $ inst/scripts/interactive.py \nCache directory:  /tmp/UKCensusAPI/\nCacheing local authority codes\nNomisweb census data interactive query builder\nSee README.md for details on how to use this package\nCensus table: <b>KS401EW</b>\n</pre>\n\nThe table description is displayed. The script then iterates through the available fields.\n```\nKS401EW - Dwellings, household spaces and accommodation type\n```\nYou are now prompted to select the categories you require. For the purposes of this example let's say we only want a subset of the fields. Required values should be comma separated, or where contiguous, separated by '...'.\n\n<pre>\nCELL:\n  0 (All categories: Dwelling type)\n  1 (Unshared dwelling)\n  2 (Shared dwelling: Two household spaces)\n  3 (Shared dwelling: Three or more household spaces)\n  4 (All categories: Household spaces)\n  5 (Household spaces with at least one usual resident)\n  6 (Household spaces with no usual residents)\n  7 (Whole house or bungalow: Detached)\n  8 (Whole house or bungalow: Semi-detached)\n  9 (Whole house or bungalow: Terraced (including end-terrace))\n  10 (Flat, maisonette or apartment: Purpose-built block of flats or tenement)\n  11 (Flat, maisonette or apartment: Part of a converted or shared house (including bed-sits))\n  12 (Flat, maisonette or apartment: In a commercial building)\n  13 (Caravan or other mobile or temporary structure)\nSelect categories (default 0): <b>7...13</b>\n</pre>\nSelect the output type you want (absolute values or percentages)\n<pre>\nMEASURES:\n  20100 (value)\n  20301 (percent)\nSelect categories (default 0): <b>20100</b>\n</pre>\nFor the purposes of this example we don't require the RURAL_URBAN field in our output, so we just hit return to accept the default selection. When the default is selected, the query builder will prompt you for whether you want to include this field in the output. (If something other than the default is not selected, the query builder will always assume that you want the field in the output.)\n<pre>\nRURAL_URBAN:\n  0 (Total)\n  1 (Urban city and town in a sparse setting)\n  2 (Urban major conurbation)\n  3 (Urban minor conurbation)\n  4 (Urban city and town)\n  101 (Rural (total))\n  6 (Rural village in a sparse setting)\n  7 (Rural hamlet and isolated dwellings in a sparse setting)\n  8 (Rural town and fringe)\n  9 (Rural village)\n  10 (Rural hamlet and isolated dwellings)\n  100 (Urban (total))\n  5 (Rural town and fringe in a sparse setting)\nSelect categories (default 0): <b>&#8629;</b>\ninclude in output? (y/n) <b>n</b>\n</pre>\nNow you can optionally select the geographical area(s) you want to cover. This can be a single local authority, multiple local authorities, England, England & Wales, GB or UK. If a local authority, you can specify it either by name or ONS code (e.g. E09000001)\n<pre>\nAdd geography? (y/N): <b>y</b>\n\nGeographical coverage\nE/EW/GB/UK or LA code(s)/name(s), comma separated: <b>Leeds</b>\n</pre>\nNow select the geographical resolution required. Currently supports local authority, and both 2001 and 2011 MSOA, LSOA, and OAs:\n<pre>\nResolution (LAD/MSOA11/LSOA11/OA11/MSOA01/LSOA01/OA01): <b>MSOA11</b>\n</pre>\nYou will then be prompted to choose whether to download the data immediately. If so, the query builder assembles the query and computes an md5 hash of it. It then checks the cache directory if a file with this name exists and will load the data from the file if so. If not, the query builder downloads the data and save the data in the cache directory. \n\n```\nGetting data...\nWriting metadata to  /tmp/UKCensusAPI/KS401EW_metadata.json\nDownloading and cacheing data: /tmp/UKCensusAPI/KS401EW_2d17ead209999cbc7a1e7f5a299ccba5.tsv\n\nWriting python code snippet to /tmp/UKCensusAPI/KS401EW.py\n\nWriting R code snippet to /tmp/UKCensusAPI/KS401EW.R\nuser@host:~$\n```\nRegardless of whether you selected geography, or downloaded the data, the query builder will generate python and R code snippets for later use.\n\nThe generated python code snippet is:\n\n```\n\"\"\"\nKS401EW - Dwellings, household spaces and accommodation type\n\nCode autogenerated by UKCensusAPI\n(https://github.com/virgesmith/UKCensusAPI)\n\"\"\"\n\n# This code requires an API key, see the README.md for details\n\n# Query url:\n# https://www.nomisweb.co.uk/api/v01/dataset/NM_618_1.data.tsv?CELL=7...13&MEASURES=20100&RURAL_URBAN=0&date=latest&geography=1245714681...1245714688&select=GEOGRAPHY_CODE%2CCELL%2COBS_VALUE\n\nimport ukcensusapi.Nomisweb as CensusApi\n\napi = CensusApi.Nomisweb(\"/tmp/UKCensusAPI/\")\ntable = \"KS401EW\"\ntable_internal = \"NM_618_1\"\nquery_params = {}\nquery_params[\"RURAL_URBAN\"] = \"0\"\nquery_params[\"select\"] = \"GEOGRAPHY_CODE,CELL,OBS_VALUE\"\nquery_params[\"date\"] = \"latest\"\nquery_params[\"geography\"] = \"1245714681...1245714688\"\nquery_params[\"MEASURES\"] = \"20100\"\nquery_params[\"CELL\"] = \"7...13\"\nKS401EW = api.get_data(table, table_internal, query_params)\n```\nThe the R code:\n```\n# KS401EW - Dwellings, household spaces and accommodation type\n\n# Code autogenerated by UKCensusAPI\n#https://github.com/virgesmith/UKCensusAPI\n\n# This code requires an API key, see the README.md for details\n# Query url: https://www.nomisweb.co.uk/api/v01/dataset/NM_618_1.data.tsv?CELL=7...13&MEASURES=20100&RURAL_URBAN=0&date=latest&geography=1245714681...1245714688&select=GEOGRAPHY_CODE%2CCELL%2COBS_VALUE\n\nlibrary(\"UKCensusAPI\")\ncacheDir = \"/tmp/UKCensusAPI/\"\napi = UKCensusAPI::instance(cacheDir)\ntable = \"KS401EW\"\ntable_internal = \"NM_618_1\"\nqueryParams = list(\n  RURAL_URBAN = \"0\",\n  select = \"GEOGRAPHY_CODE,CELL,OBS_VALUE\",\n  date = \"latest\",\n  geography = \"1245714681...1245714688\",\n  MEASURES = \"20100\",\n  CELL = \"7...13\"\n)\nKS401EW = UKCensusAPI::getData(api, table, table_internal, queryParams)\n```\nUsers can then copy and paste the generated code snippets into their models, modifying as necessary, to automate the download of the correct data. The metadata looks like this:\n\n```\n{\n  \"description\": \"KS401EW - Dwellings, household spaces and accommodation type\",\n  \"fields\": {\n    \"RURAL_URBAN\": {\n      \"0\": \"Total\",\n      \"1\": \"Urban city and town in a sparse setting\",\n      \"2\": \"Urban major conurbation\",\n      \"3\": \"Urban minor conurbation\",\n      \"4\": \"Urban city and town\",\n      \"101\": \"Rural (total)\",\n      \"6\": \"Rural village in a sparse setting\",\n      \"7\": \"Rural hamlet and isolated dwellings in a sparse setting\",\n      \"8\": \"Rural town and fringe\",\n      \"9\": \"Rural village\",\n      \"10\": \"Rural hamlet and isolated dwellings\",\n      \"100\": \"Urban (total)\",\n      \"5\": \"Rural town and fringe in a sparse setting\"\n    },\n    \"FREQ\": {\n      \"A\": \"Annually\"\n    },\n    \"GEOGRAPHY\": {\n      \"2092957699\": \"England\",\n      \"2092957700\": \"Wales\",\n      \"2092957703\": \"England and Wales\"\n    },\n    \"MEASURES\": {\n      \"20100\": \"value\",\n      \"20301\": \"percent\"\n    },\n    \"CELL\": {\n      \"0\": \"All categories: Dwelling type\",\n      \"1\": \"Unshared dwelling\",\n      \"2\": \"Shared dwelling: Two household spaces\",\n      \"3\": \"Shared dwelling: Three or more household spaces\",\n      \"4\": \"All categories: Household spaces\",\n      \"5\": \"Household spaces with at least one usual resident\",\n      \"6\": \"Household spaces with no usual residents\",\n      \"7\": \"Whole house or bungalow: Detached\",\n      \"8\": \"Whole house or bungalow: Semi-detached\",\n      \"9\": \"Whole house or bungalow: Terraced (including end-terrace)\",\n      \"10\": \"Flat, maisonette or apartment: Purpose-built block of flats or tenement\",\n      \"11\": \"Flat, maisonette or apartment: Part of a converted or shared house (including bed-sits)\",\n      \"12\": \"Flat, maisonette or apartment: In a commercial building\",\n      \"13\": \"Caravan or other mobile or temporary structure\"\n    }\n  },\n  \"nomis_table\": \"NM_618_1\"\n}\n```\nIf you've selected to download the data, a tsv file (like csv but with a tab separator) called `KS401EW_24e10481f275c9c65cda1afc53adaa2d.tsv` will be saved in the cache directory: \n\n```\n\"GEOGRAPHY_CODE\"\t\"CELL\"\t\"OBS_VALUE\"\n\"E02002330\"\t\"7\"\t1736\n\"E02002330\"\t\"8\"\t743\n\"E02002330\"\t\"9\"\t224\n\"E02002330\"\t\"10\"\t106\n\"E02002330\"\t\"11\"\t13\n\"E02002330\"\t\"12\"\t7\n\"E02002330\"\t\"13\"\t0\n\"E02002331\"\t\"7\"\t597\n\"E02002331\"\t\"8\"\t797\n...\n```\n\nThe data in this table has (for brevity and efficiency) the values \"7\" to \"13\" in the cell column, which are obviously meaningless without context. Meaning can be conveyed using the metadata that is also downloaded and cached locally. It's probably best to leave this step until the result stage, but you can annotate a table, given a column name and the appropriate metadata, using the `contextify` function, like this:\n\n```\n\"GEOGRAPHY_CODE\"\t\"CELL\"\t\"OBS_VALUE\"\t\"CELL_NAME\"\n\"E02002330\"\t\"7\"\t1736\t\"Whole house or bungalow: Detached\"\n\"E02002330\"\t\"8\"\t743\t\"Whole house or bungalow: Semi-detached\"\n\"E02002330\"\t\"9\"\t224\t\"Whole house or bungalow: Terraced (including end-terrace)\"\n\"E02002330\"\t\"10\"\t106\t\"Flat, maisonette or apartment: Purpose-built block of flats or tenement\"\n\"E02002330\"\t\"11\"\t13\t\"Flat, maisonette or apartment: Part of a converted or shared house (including bed-sits)\"\n\"E02002330\"\t\"12\"\t7\t\"Flat, maisonette or apartment: In a commercial building\"\n\"E02002330\"\t\"13\"\t0\t\"Caravan or other mobile or temporary structure\"\n\"E02002331\"\t\"7\"\t597\t\"Whole house or bungalow: Detached\"\n\"E02002331\"\t\"8\"\t797\t\"Whole house or bungalow: Semi-detached\"\n...\n```\nSee the example code in [contextify.py](inst/examples/contextify.py) and/or [contextify.R](inst/examples/contextify.R)\n\n## Detailed Help\n\n### Public classes/methods (python)\n\nUse python's built-in help functionality, e.g.\n```\n>>> import ukcensusapi.Nomisweb as api\n>>> help(api)\n...\n>>> import ukcensusapi.Query as query\n>>> help(query)\n```\n### Public functions (R)\n\nSee the man pages, which can be accessed from RStudio using the command `?UKCensusAPI`\n\n## Support and Feature Requests\n\nPlease use the issues section to report bugs, request features and see status of existing issues. Code contributions (by PR) are most welcome.\n\n\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/virgesmith/UKCensusAPI", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "ukcensusapi", "package_url": "https://pypi.org/project/ukcensusapi/", "platform": "", "project_url": "https://pypi.org/project/ukcensusapi/", "project_urls": {"Homepage": "https://github.com/virgesmith/UKCensusAPI"}, "release_url": "https://pypi.org/project/ukcensusapi/1.1.5/", "requires_dist": ["numpy", "pandas", "requests"], "requires_python": "", "summary": "UK census data query automation", "version": "1.1.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>UK Census Data API</h1>\n<p><a href=\"https://travis-ci.org/virgesmith/UKCensusAPI\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6424e0eeeceb3aac9f95057c8d658ad47a4bc573/68747470733a2f2f7472617669732d63692e6f72672f7669726765736d6974682f554b43656e7375734150492e706e673f6272616e63683d6d6173746572\"></a> <a href=\"https://opensource.org/licenses/MIT\" rel=\"nofollow\"><img alt=\"License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/36686084675cebbeff3809cb9d8291b8e6ebd672/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f6d6173686170652f6170697374617475732e737667\"></a>\n<a href=\"http://joss.theoj.org/papers/40041a0ebb1364286d5eb144d333bb6a\" rel=\"nofollow\"><img alt=\"JOSS status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fb3ce3fcfac79acd4477e86393b0408f33f489bb/687474703a2f2f6a6f73732e7468656f6a2e6f72672f7061706572732f34303034316130656262313336343238366435656231343464333333626236612f7374617475732e737667\"></a>\n<a href=\"https://zenodo.org/badge/latestdoi/99702514\" rel=\"nofollow\"><img alt=\"DOI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/77d19ff4b70c0c23200d81d14779997e0e757c1a/68747470733a2f2f7a656e6f646f2e6f72672f62616467652f39393730323531342e737667\"></a>\n<a href=\"https://badge.fury.io/py/ukcensusapi\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3f5e7e063b0855a8d466b6b94cad563e91673316/68747470733a2f2f62616467652e667572792e696f2f70792f756b63656e7375736170692e737667\"></a>\n<a href=\"https://anaconda.org/conda-forge/ukcensusapi\" rel=\"nofollow\"><img alt=\"Anaconda-Server Badge\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/bd8490734f8b528d7f689f773edc078c803787f5/68747470733a2f2f616e61636f6e64612e6f72672f636f6e64612d666f7267652f756b63656e7375736170692f6261646765732f76657273696f6e2e737667\"></a>\n<a href=\"https://anaconda.org/conda-forge/ukcensusapi\" rel=\"nofollow\"><img alt=\"Anaconda-Server Badge\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/68f59d7259ac46efff0feb812dff0f0cd76935f1/68747470733a2f2f616e61636f6e64612e6f72672f636f6e64612d666f7267652f756b63656e7375736170692f6261646765732f646f776e6c6f6164732e737667\"></a></p>\n<blockquote>\n<h2>Update</h2>\n<p>This package has been something of a misnomer as it only used Nomisweb as its data source, which only provides full census data for England &amp; Wales. (They do provide some UK key statistics and quick statistics tables).</p>\n</blockquote>\n<blockquote>\n<p>Version 1.1.x of this package extends the 2011 census data coverage for Scotland and Northern Ireland. The aim is to make the data (and the metadata) consistent across all nations, but as neither country provide a web API for their data we have to resort to web scraping. This means the slicing-and-dicing and geographical query functionality may be more limited than it is for England &amp; Wales. Note also that category values in equivalent tables may differ slightly.</p>\n</blockquote>\n<blockquote>\n<h3>Scotland</h3>\n<p>For Scotland, data can be downloaded at country or Council Area (~LAD) level, at geographical resolutions of Council Area, Data Zone (~LSOA) and Output Area. Intermediate Area (~MSOA) data can be aggregated (only) where the data is available at a higher geographical resolution.</p>\n</blockquote>\n<blockquote>\n<p>The principal functions are <code>NRScotland.get_metadata()</code> for metadata, <code>NRScotland.get_data()</code> for the actual data, and <code>NRScotland.contextify()</code> to annotate the data using the metadata.</p>\n</blockquote>\n<blockquote>\n<h3>Northern Ireland</h3>\n<p>For Northern Ireland, data can be downloaded at country or Local Government District (~LAD) level, at geographical resolutions of Super Output Area (~LSOA) and Small Area (OA). Ward (~MSOA) (~MSOA) data can be aggregated (only) where the data is available at higher geographical resolution.\nThe principal functions are <code>NISRA.get_metadata()</code> for metadata, <code>NISRA.get_data()</code> for the actual data, and <code>NISRA.contextify()</code> to annotate the data using the metadata.</p>\n</blockquote>\n<p><a href=\"https://www.nomisweb.co.uk\" rel=\"nofollow\">Nomisweb</a>, run by Durham University, provides online access to the most detailed and up-to-date statistics from official sources for local areas throughout the UK, including census data.</p>\n<p>This package provides both a <code>python</code> and an <code>R</code> wrapper around the nomisweb census data API, the NRScotland and NISRA websites, enabling:</p>\n<ul>\n<li>querying table metadata</li>\n<li>autogenerating customised python and R query code for future use</li>\n<li>automated cached data downloads</li>\n<li>modifying the geography of queries</li>\n<li>adding descriptive information to tables (from metadata)</li>\n</ul>\n<p>Queries can be customised on geographical coverage, geographical resolution, and table fields, the latter can be filtered to include only the category values you require.</p>\n<p>The package can generate reusable code snippets that can be inserted into applications. Such applications will work seamlessly for any user as long as they have installed this package, and possess their own nomisweb API key.</p>\n<p>Since census data is essentially static, it makes little sense to download the data every time it is requested: all data downloads are cached.</p>\n<p>Example code is also provided which:</p>\n<ul>\n<li>shows how an existing query can easily be modified in terms of geographical coverage.</li>\n<li>shows how raw data can be annotated with meaningful metadata</li>\n</ul>\n<h2>Prerequisites</h2>\n<h3>Software</h3>\n<ul>\n<li>python3.4 or higher, with pip, numpy and pandas. The dependencies should install automatically. Python 2 is not supported.</li>\n<li>R version 3.3.3 or higher (optional, if using the R interface)</li>\n</ul>\n<h3>API key</h3>\n<p>It is recommended that you register with <a href=\"https://www.nomisweb.co.uk\" rel=\"nofollow\">nomisweb</a> before using this package and use the API key the supply you in all queries. Without a key, queries will be truncated (max 25000 rows). With a key, the row limit is 1000000 and this package will warn if a query generates data with this number of rows.</p>\n<p>Once registered, you will find your API key on <a href=\"https://www.nomisweb.co.uk/myaccount/webservice.asp\" rel=\"nofollow\">this page</a>. You should not divulge this key to others.</p>\n<p>This package will look for the key in the following places (in order):</p>\n<ul>\n<li>locally: a file <code>NOMIS_API_KEY</code> in the cache directory defined at initialisation, e.g.\n<pre><code>$ cat cache/NOMIS_API_KEY\n0x0000000000000000000000000000000000000000\n</code></pre>\n</li>\n<li>globally: the environment variable NOMIS_API_KEY. R users can store the key in their <code>.Renviron</code> file: R will set the environment on startup, which will be visible to a python session instantiated from R.</li>\n</ul>\n<p>Initialisation will fail if the key is not defined in one of these locations. Note: if for some reason you cannot register with nomisweb, you must still define an API key - just set it to an obviously invalid value.</p>\n<h2>Installation</h2>\n<h3>python (from PyPI)</h3>\n<pre><code>user@host:~$ python3 -m pip install UKCensusAPI\n</code></pre>\n<p>(NB This will install only the basic package without the scripts and examples.)</p>\n<h3>python (from github)</h3>\n<pre><code>user@host:~$ pip install git+https://github.com/virgesmith/UKCensusAPI.git\n</code></pre>\n<h3>python (from cloned repo):</h3>\n<pre><code>user@host:~/dev/UKCensusAPI$ ./setup.py install\n</code></pre>\n<p>and to test</p>\n<pre><code>user@host:~/dev/UKCensusAPI$ ./setup.py test\n</code></pre>\n<h3>R</h3>\n<pre><code>&gt; devtools::install_github(\"virgesmith/UKCensusAPI\")\n</code></pre>\n<p>Set the <code>RETICULATE_PYTHON</code> environment variable in your .Renviron file to the python3 interpreter, e.g. (for linux)</p>\n<pre><code>RETICULATE_PYTHON=$(which python3)\n</code></pre>\n<h2>Usage</h2>\n<p>In your Python code import the package like e.g.:</p>\n<pre><code>import ukcensusapi.Nomisweb as census_api\n</code></pre>\n<p>And in R:</p>\n<pre><code>library(UKCensusAPI)\n</code></pre>\n<h3>Queries</h3>\n<p>Queries have three distinct subtypes:</p>\n<ul>\n<li>metadata: query a table for the fields and categories it contains</li>\n<li>geography: retrieve a list of area codes of a particular type within a given region of another (larger) type.</li>\n<li>data: retrieve data from a table using a query built from the metadata and geography.</li>\n</ul>\n<p>Data and metadata are cached locally to minimise requests to nomisweb.co.uk.</p>\n<p>Using the interactive query builder, and a known table, you can constuct a programmatically reusable query selecting categories, specific category values, and (optionally) geography, See example below.</p>\n<p>Queries can subsequently be programmatically modified to switched to a different geographical region and/or resolution.</p>\n<h3>Interactive Query</h3>\n<p>The first thing users may want to do is an interactive query. All you need to do is specify the name of a census table. The script will then iterate over the categories within the table, prompting you user to select the categories and values you're interested in.</p>\n<p>Once done you'll be prompted to (optionally) specify a geography for the data - a geographical region and a resolution.</p>\n<p>Finally, if you've specified the geography, the script will ask if you want to download (and cache) the data immediately.</p>\n<p>The script then produces the following files:</p>\n<ul>\n<li>a json file containing the table metadata</li>\n<li>python and R code snippets that build the query and call this package to download the data</li>\n<li>(optionally, depending on above selections) the data itself (which is cached)</li>\n</ul>\n<p>These files are all saved in the cache directory (default is <code>/tmp/UKCensusAPI</code>).</p>\n<p>The code snippets are designed to be copy/pasted into user code. The (cached) data and metadata can simply be loaded by user code as required.</p>\n<p>Note for R users - there is no direct R script for the interactive query largely due to the fact it will not work from within RStudio (due to the way RStudio handles stdin).</p>\n<h3>Data reuse</h3>\n<p>Existing cached data is always used in preference to downloading. The data is stored locally using a filename based on the table name and md5 hash of the query used to download the data. This way, different queries on the same table can be stored.</p>\n<p>To force the data to be downloaded, just delete the cached data.</p>\n<h3>Query Reuse</h3>\n<p>The code snippets can simply be inserted into user code, and the metadata (json) can be used as a guide for modifying the query, either manually or automatically.</p>\n<h3>Switching Geography</h3>\n<p>Existing queries can easily be modified to switch to a different geographical area and/or a different geographical resolution.</p>\n<p>This allows, for example, users to write models where the geographical coverage and resolution can be user inputs.</p>\n<p>Examples of how to do this are in <a href=\"inst/examples/geoquery.py\" rel=\"nofollow\"><code>geoquery.py</code></a> and <a href=\"inst/examples/geoquery.R\" rel=\"nofollow\"><code>geoquery.R</code></a>.</p>\n<h3>Annotating Data</h3>\n<p>Queries will download data with a minimal memory footprint, but also metadata that provides meaning. Whilst this makes manipulating and querying the data efficient, it means that the data itself lacks human-readability. For this reason the package provides a way of annotating tables with contextual data derived from the table metadata.</p>\n<p>Examples of how to do this are in <a href=\"inst/examples/contextify.py\" rel=\"nofollow\"><code>contextify.py</code></a> and <a href=\"inst/examples/contextify.R\" rel=\"nofollow\"><code>contextify.R</code></a>.</p>\n<h2>Interactive Query Builder</h2>\n<p>This functionality requires that you already know the name of the census table of interest, and want to define a custom query on that table, for a specific geography at a specific resolution.</p>\n<p>If you're unsure about which table to query, Nomisweb provide a useful <a href=\"https://www.nomisweb.co.uk/census/2011/data_finder\" rel=\"nofollow\">table finder</a>. NB Not all census tables are available at all geographical resolutions, but the above link will enumerate the available resolutions for each table.</p>\n<h3>Interactive Query - Example</h3>\n<p>Run the script. You'll be prompted to enter the name of the census table of interest:</p>\n<pre>user@host ~/dev/UKCensusAPI $ inst/scripts/interactive.py \nCache directory:  /tmp/UKCensusAPI/\nCacheing local authority codes\nNomisweb census data interactive query builder\nSee README.md for details on how to use this package\nCensus table: <b>KS401EW</b>\n</pre>\n<p>The table description is displayed. The script then iterates through the available fields.</p>\n<pre><code>KS401EW - Dwellings, household spaces and accommodation type\n</code></pre>\n<p>You are now prompted to select the categories you require. For the purposes of this example let's say we only want a subset of the fields. Required values should be comma separated, or where contiguous, separated by '...'.</p>\n<pre>CELL:\n  0 (All categories: Dwelling type)\n  1 (Unshared dwelling)\n  2 (Shared dwelling: Two household spaces)\n  3 (Shared dwelling: Three or more household spaces)\n  4 (All categories: Household spaces)\n  5 (Household spaces with at least one usual resident)\n  6 (Household spaces with no usual residents)\n  7 (Whole house or bungalow: Detached)\n  8 (Whole house or bungalow: Semi-detached)\n  9 (Whole house or bungalow: Terraced (including end-terrace))\n  10 (Flat, maisonette or apartment: Purpose-built block of flats or tenement)\n  11 (Flat, maisonette or apartment: Part of a converted or shared house (including bed-sits))\n  12 (Flat, maisonette or apartment: In a commercial building)\n  13 (Caravan or other mobile or temporary structure)\nSelect categories (default 0): <b>7...13</b>\n</pre>\n<p>Select the output type you want (absolute values or percentages)</p>\n<pre>MEASURES:\n  20100 (value)\n  20301 (percent)\nSelect categories (default 0): <b>20100</b>\n</pre>\n<p>For the purposes of this example we don't require the RURAL_URBAN field in our output, so we just hit return to accept the default selection. When the default is selected, the query builder will prompt you for whether you want to include this field in the output. (If something other than the default is not selected, the query builder will always assume that you want the field in the output.)</p>\n<pre>RURAL_URBAN:\n  0 (Total)\n  1 (Urban city and town in a sparse setting)\n  2 (Urban major conurbation)\n  3 (Urban minor conurbation)\n  4 (Urban city and town)\n  101 (Rural (total))\n  6 (Rural village in a sparse setting)\n  7 (Rural hamlet and isolated dwellings in a sparse setting)\n  8 (Rural town and fringe)\n  9 (Rural village)\n  10 (Rural hamlet and isolated dwellings)\n  100 (Urban (total))\n  5 (Rural town and fringe in a sparse setting)\nSelect categories (default 0): <b>\u21b5</b>\ninclude in output? (y/n) <b>n</b>\n</pre>\n<p>Now you can optionally select the geographical area(s) you want to cover. This can be a single local authority, multiple local authorities, England, England &amp; Wales, GB or UK. If a local authority, you can specify it either by name or ONS code (e.g. E09000001)</p>\n<pre>Add geography? (y/N): <b>y</b>\n\nGeographical coverage\nE/EW/GB/UK or LA code(s)/name(s), comma separated: <b>Leeds</b>\n</pre>\n<p>Now select the geographical resolution required. Currently supports local authority, and both 2001 and 2011 MSOA, LSOA, and OAs:</p>\n<pre>Resolution (LAD/MSOA11/LSOA11/OA11/MSOA01/LSOA01/OA01): <b>MSOA11</b>\n</pre>\n<p>You will then be prompted to choose whether to download the data immediately. If so, the query builder assembles the query and computes an md5 hash of it. It then checks the cache directory if a file with this name exists and will load the data from the file if so. If not, the query builder downloads the data and save the data in the cache directory.</p>\n<pre><code>Getting data...\nWriting metadata to  /tmp/UKCensusAPI/KS401EW_metadata.json\nDownloading and cacheing data: /tmp/UKCensusAPI/KS401EW_2d17ead209999cbc7a1e7f5a299ccba5.tsv\n\nWriting python code snippet to /tmp/UKCensusAPI/KS401EW.py\n\nWriting R code snippet to /tmp/UKCensusAPI/KS401EW.R\nuser@host:~$\n</code></pre>\n<p>Regardless of whether you selected geography, or downloaded the data, the query builder will generate python and R code snippets for later use.</p>\n<p>The generated python code snippet is:</p>\n<pre><code>\"\"\"\nKS401EW - Dwellings, household spaces and accommodation type\n\nCode autogenerated by UKCensusAPI\n(https://github.com/virgesmith/UKCensusAPI)\n\"\"\"\n\n# This code requires an API key, see the README.md for details\n\n# Query url:\n# https://www.nomisweb.co.uk/api/v01/dataset/NM_618_1.data.tsv?CELL=7...13&amp;MEASURES=20100&amp;RURAL_URBAN=0&amp;date=latest&amp;geography=1245714681...1245714688&amp;select=GEOGRAPHY_CODE%2CCELL%2COBS_VALUE\n\nimport ukcensusapi.Nomisweb as CensusApi\n\napi = CensusApi.Nomisweb(\"/tmp/UKCensusAPI/\")\ntable = \"KS401EW\"\ntable_internal = \"NM_618_1\"\nquery_params = {}\nquery_params[\"RURAL_URBAN\"] = \"0\"\nquery_params[\"select\"] = \"GEOGRAPHY_CODE,CELL,OBS_VALUE\"\nquery_params[\"date\"] = \"latest\"\nquery_params[\"geography\"] = \"1245714681...1245714688\"\nquery_params[\"MEASURES\"] = \"20100\"\nquery_params[\"CELL\"] = \"7...13\"\nKS401EW = api.get_data(table, table_internal, query_params)\n</code></pre>\n<p>The the R code:</p>\n<pre><code># KS401EW - Dwellings, household spaces and accommodation type\n\n# Code autogenerated by UKCensusAPI\n#https://github.com/virgesmith/UKCensusAPI\n\n# This code requires an API key, see the README.md for details\n# Query url: https://www.nomisweb.co.uk/api/v01/dataset/NM_618_1.data.tsv?CELL=7...13&amp;MEASURES=20100&amp;RURAL_URBAN=0&amp;date=latest&amp;geography=1245714681...1245714688&amp;select=GEOGRAPHY_CODE%2CCELL%2COBS_VALUE\n\nlibrary(\"UKCensusAPI\")\ncacheDir = \"/tmp/UKCensusAPI/\"\napi = UKCensusAPI::instance(cacheDir)\ntable = \"KS401EW\"\ntable_internal = \"NM_618_1\"\nqueryParams = list(\n  RURAL_URBAN = \"0\",\n  select = \"GEOGRAPHY_CODE,CELL,OBS_VALUE\",\n  date = \"latest\",\n  geography = \"1245714681...1245714688\",\n  MEASURES = \"20100\",\n  CELL = \"7...13\"\n)\nKS401EW = UKCensusAPI::getData(api, table, table_internal, queryParams)\n</code></pre>\n<p>Users can then copy and paste the generated code snippets into their models, modifying as necessary, to automate the download of the correct data. The metadata looks like this:</p>\n<pre><code>{\n  \"description\": \"KS401EW - Dwellings, household spaces and accommodation type\",\n  \"fields\": {\n    \"RURAL_URBAN\": {\n      \"0\": \"Total\",\n      \"1\": \"Urban city and town in a sparse setting\",\n      \"2\": \"Urban major conurbation\",\n      \"3\": \"Urban minor conurbation\",\n      \"4\": \"Urban city and town\",\n      \"101\": \"Rural (total)\",\n      \"6\": \"Rural village in a sparse setting\",\n      \"7\": \"Rural hamlet and isolated dwellings in a sparse setting\",\n      \"8\": \"Rural town and fringe\",\n      \"9\": \"Rural village\",\n      \"10\": \"Rural hamlet and isolated dwellings\",\n      \"100\": \"Urban (total)\",\n      \"5\": \"Rural town and fringe in a sparse setting\"\n    },\n    \"FREQ\": {\n      \"A\": \"Annually\"\n    },\n    \"GEOGRAPHY\": {\n      \"2092957699\": \"England\",\n      \"2092957700\": \"Wales\",\n      \"2092957703\": \"England and Wales\"\n    },\n    \"MEASURES\": {\n      \"20100\": \"value\",\n      \"20301\": \"percent\"\n    },\n    \"CELL\": {\n      \"0\": \"All categories: Dwelling type\",\n      \"1\": \"Unshared dwelling\",\n      \"2\": \"Shared dwelling: Two household spaces\",\n      \"3\": \"Shared dwelling: Three or more household spaces\",\n      \"4\": \"All categories: Household spaces\",\n      \"5\": \"Household spaces with at least one usual resident\",\n      \"6\": \"Household spaces with no usual residents\",\n      \"7\": \"Whole house or bungalow: Detached\",\n      \"8\": \"Whole house or bungalow: Semi-detached\",\n      \"9\": \"Whole house or bungalow: Terraced (including end-terrace)\",\n      \"10\": \"Flat, maisonette or apartment: Purpose-built block of flats or tenement\",\n      \"11\": \"Flat, maisonette or apartment: Part of a converted or shared house (including bed-sits)\",\n      \"12\": \"Flat, maisonette or apartment: In a commercial building\",\n      \"13\": \"Caravan or other mobile or temporary structure\"\n    }\n  },\n  \"nomis_table\": \"NM_618_1\"\n}\n</code></pre>\n<p>If you've selected to download the data, a tsv file (like csv but with a tab separator) called <code>KS401EW_24e10481f275c9c65cda1afc53adaa2d.tsv</code> will be saved in the cache directory:</p>\n<pre><code>\"GEOGRAPHY_CODE\"\t\"CELL\"\t\"OBS_VALUE\"\n\"E02002330\"\t\"7\"\t1736\n\"E02002330\"\t\"8\"\t743\n\"E02002330\"\t\"9\"\t224\n\"E02002330\"\t\"10\"\t106\n\"E02002330\"\t\"11\"\t13\n\"E02002330\"\t\"12\"\t7\n\"E02002330\"\t\"13\"\t0\n\"E02002331\"\t\"7\"\t597\n\"E02002331\"\t\"8\"\t797\n...\n</code></pre>\n<p>The data in this table has (for brevity and efficiency) the values \"7\" to \"13\" in the cell column, which are obviously meaningless without context. Meaning can be conveyed using the metadata that is also downloaded and cached locally. It's probably best to leave this step until the result stage, but you can annotate a table, given a column name and the appropriate metadata, using the <code>contextify</code> function, like this:</p>\n<pre><code>\"GEOGRAPHY_CODE\"\t\"CELL\"\t\"OBS_VALUE\"\t\"CELL_NAME\"\n\"E02002330\"\t\"7\"\t1736\t\"Whole house or bungalow: Detached\"\n\"E02002330\"\t\"8\"\t743\t\"Whole house or bungalow: Semi-detached\"\n\"E02002330\"\t\"9\"\t224\t\"Whole house or bungalow: Terraced (including end-terrace)\"\n\"E02002330\"\t\"10\"\t106\t\"Flat, maisonette or apartment: Purpose-built block of flats or tenement\"\n\"E02002330\"\t\"11\"\t13\t\"Flat, maisonette or apartment: Part of a converted or shared house (including bed-sits)\"\n\"E02002330\"\t\"12\"\t7\t\"Flat, maisonette or apartment: In a commercial building\"\n\"E02002330\"\t\"13\"\t0\t\"Caravan or other mobile or temporary structure\"\n\"E02002331\"\t\"7\"\t597\t\"Whole house or bungalow: Detached\"\n\"E02002331\"\t\"8\"\t797\t\"Whole house or bungalow: Semi-detached\"\n...\n</code></pre>\n<p>See the example code in <a href=\"inst/examples/contextify.py\" rel=\"nofollow\">contextify.py</a> and/or <a href=\"inst/examples/contextify.R\" rel=\"nofollow\">contextify.R</a></p>\n<h2>Detailed Help</h2>\n<h3>Public classes/methods (python)</h3>\n<p>Use python's built-in help functionality, e.g.</p>\n<pre><code>&gt;&gt;&gt; import ukcensusapi.Nomisweb as api\n&gt;&gt;&gt; help(api)\n...\n&gt;&gt;&gt; import ukcensusapi.Query as query\n&gt;&gt;&gt; help(query)\n</code></pre>\n<h3>Public functions (R)</h3>\n<p>See the man pages, which can be accessed from RStudio using the command <code>?UKCensusAPI</code></p>\n<h2>Support and Feature Requests</h2>\n<p>Please use the issues section to report bugs, request features and see status of existing issues. Code contributions (by PR) are most welcome.</p>\n\n          </div>"}, "last_serial": 4453827, "releases": {"1.1.2": [{"comment_text": "", "digests": {"md5": "4e2d8d1de78df2185f286040a029811a", "sha256": "e88277ac41060fed1d4cd64c66fbd221d68148c838b7549bbfdfe445b823442b"}, "downloads": -1, "filename": "ukcensusapi-1.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "4e2d8d1de78df2185f286040a029811a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 49518, "upload_time": "2018-07-13T14:17:45", "upload_time_iso_8601": "2018-07-13T14:17:45.935793Z", "url": "https://files.pythonhosted.org/packages/ea/ce/a61527ff82341f8b94378b30715b4de2fc477747e94d5105e6d633489702/ukcensusapi-1.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c41232738d59b9a2909551617ff0ffd1", "sha256": "1f07cb975113c88bf5e1286617280079229cc0879992817dea0be94e57659519"}, "downloads": -1, "filename": "ukcensusapi-1.1.2.tar.gz", "has_sig": false, "md5_digest": "c41232738d59b9a2909551617ff0ffd1", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 20613, "upload_time": "2018-07-13T14:17:47", "upload_time_iso_8601": "2018-07-13T14:17:47.346701Z", "url": "https://files.pythonhosted.org/packages/9b/9e/97b404cfa3f6b77f123c4aba3c6b800202d7b7ec9fd88fecbf8fb01d2f91/ukcensusapi-1.1.2.tar.gz", "yanked": false}], "1.1.3": [{"comment_text": "", "digests": {"md5": "4e18d19626a0c9a20a7fbc21c0a2d754", "sha256": "0ec97741fb6077acf56d7ef1de2bb29fbd97fa0681ae3a676b577a2baaaf9325"}, "downloads": -1, "filename": "ukcensusapi-1.1.3-py3-none-any.whl", "has_sig": false, "md5_digest": "4e18d19626a0c9a20a7fbc21c0a2d754", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 49767, "upload_time": "2018-07-16T12:37:12", "upload_time_iso_8601": "2018-07-16T12:37:12.470472Z", "url": "https://files.pythonhosted.org/packages/c9/1c/516bcde7b3517c16fec93c2f6d1c75886393376533f275840025d65aad42/ukcensusapi-1.1.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c3a6ea32fddd34222ba9a04495abdeae", "sha256": "03381c74b2eec3d50390600adaf3d2d8dee373554b3d57a471a4435ed31053f3"}, "downloads": -1, "filename": "ukcensusapi-1.1.3.tar.gz", "has_sig": false, "md5_digest": "c3a6ea32fddd34222ba9a04495abdeae", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20722, "upload_time": "2018-07-16T19:58:13", "upload_time_iso_8601": "2018-07-16T19:58:13.075921Z", "url": "https://files.pythonhosted.org/packages/67/0f/032981d4159e3509c942c585e64598e312b82f47f918b148486d6ce2c7a6/ukcensusapi-1.1.3.tar.gz", "yanked": false}], "1.1.4": [{"comment_text": "", "digests": {"md5": "c5840a667d5cb3be1c17824b36d62c18", "sha256": "242788f65c23d97f62b66d2df4be1f14f74042f791bb2911c58e28895193392f"}, "downloads": -1, "filename": "ukcensusapi-1.1.4-py3-none-any.whl", "has_sig": false, "md5_digest": "c5840a667d5cb3be1c17824b36d62c18", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 47308, "upload_time": "2018-07-17T07:41:33", "upload_time_iso_8601": "2018-07-17T07:41:33.123366Z", "url": "https://files.pythonhosted.org/packages/d6/14/0eeaa144d662848034da6a3ed6914bf13a867b9ea302368217b995b4d3b4/ukcensusapi-1.1.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "06d03506f9eb5abc70a26c5816a0808e", "sha256": "d0d52afbf779b7f1044769a6a944a1b424deb0c858d25131e9afa900a89cd6b2"}, "downloads": -1, "filename": "ukcensusapi-1.1.4.tar.gz", "has_sig": false, "md5_digest": "06d03506f9eb5abc70a26c5816a0808e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21388, "upload_time": "2018-07-17T07:41:34", "upload_time_iso_8601": "2018-07-17T07:41:34.851024Z", "url": "https://files.pythonhosted.org/packages/a4/88/e13b9136723fb4617041904243cd24ccddcff5324868c963ab72564d04bc/ukcensusapi-1.1.4.tar.gz", "yanked": false}], "1.1.5": [{"comment_text": "", "digests": {"md5": "119dcb359157bd9afac649edcfa1afab", "sha256": "d23cf31c23d234a7ac40612607f1fe97219205fe9696ca0cb06d74fa5bb4e7ff"}, "downloads": -1, "filename": "ukcensusapi-1.1.5-py3.6.egg", "has_sig": false, "md5_digest": "119dcb359157bd9afac649edcfa1afab", "packagetype": "bdist_egg", "python_version": "3.6", "requires_python": null, "size": 62065, "upload_time": "2018-11-05T17:14:36", "upload_time_iso_8601": "2018-11-05T17:14:36.901972Z", "url": "https://files.pythonhosted.org/packages/3e/26/8989d544af74ee2fd8f0e22af69174b70f498e3fc8971edf9bcc15a640c0/ukcensusapi-1.1.5-py3.6.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "3d7afad57f1be7638e44e0c2d6b06c41", "sha256": "9482ad0efe55d0db3d53f133fe51f0cf5c794aa1794c5afec196e31fb207b56e"}, "downloads": -1, "filename": "ukcensusapi-1.1.5-py3-none-any.whl", "has_sig": false, "md5_digest": "3d7afad57f1be7638e44e0c2d6b06c41", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 42241, "upload_time": "2018-11-05T17:14:35", "upload_time_iso_8601": "2018-11-05T17:14:35.641392Z", "url": "https://files.pythonhosted.org/packages/cc/29/a0a997875929b2bc9235e4a63612d8b902a869df459e75b4ca02e66b0ea8/ukcensusapi-1.1.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8178bc2a13db550eaba3b8e97ae275ff", "sha256": "d5a274fbe882f3feba9e2f8ca65866b94bf7dfbc7fc2e9cc40cf3e770ce6613d"}, "downloads": -1, "filename": "ukcensusapi-1.1.5.tar.gz", "has_sig": false, "md5_digest": "8178bc2a13db550eaba3b8e97ae275ff", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21480, "upload_time": "2018-11-05T17:14:38", "upload_time_iso_8601": "2018-11-05T17:14:38.355390Z", "url": "https://files.pythonhosted.org/packages/60/f3/6a5e19acb7723680f5f6b867574f6c458f4cf18c40c477f50973f19adf09/ukcensusapi-1.1.5.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "119dcb359157bd9afac649edcfa1afab", "sha256": "d23cf31c23d234a7ac40612607f1fe97219205fe9696ca0cb06d74fa5bb4e7ff"}, "downloads": -1, "filename": "ukcensusapi-1.1.5-py3.6.egg", "has_sig": false, "md5_digest": "119dcb359157bd9afac649edcfa1afab", "packagetype": "bdist_egg", "python_version": "3.6", "requires_python": null, "size": 62065, "upload_time": "2018-11-05T17:14:36", "upload_time_iso_8601": "2018-11-05T17:14:36.901972Z", "url": "https://files.pythonhosted.org/packages/3e/26/8989d544af74ee2fd8f0e22af69174b70f498e3fc8971edf9bcc15a640c0/ukcensusapi-1.1.5-py3.6.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "3d7afad57f1be7638e44e0c2d6b06c41", "sha256": "9482ad0efe55d0db3d53f133fe51f0cf5c794aa1794c5afec196e31fb207b56e"}, "downloads": -1, "filename": "ukcensusapi-1.1.5-py3-none-any.whl", "has_sig": false, "md5_digest": "3d7afad57f1be7638e44e0c2d6b06c41", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 42241, "upload_time": "2018-11-05T17:14:35", "upload_time_iso_8601": "2018-11-05T17:14:35.641392Z", "url": "https://files.pythonhosted.org/packages/cc/29/a0a997875929b2bc9235e4a63612d8b902a869df459e75b4ca02e66b0ea8/ukcensusapi-1.1.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8178bc2a13db550eaba3b8e97ae275ff", "sha256": "d5a274fbe882f3feba9e2f8ca65866b94bf7dfbc7fc2e9cc40cf3e770ce6613d"}, "downloads": -1, "filename": "ukcensusapi-1.1.5.tar.gz", "has_sig": false, "md5_digest": "8178bc2a13db550eaba3b8e97ae275ff", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21480, "upload_time": "2018-11-05T17:14:38", "upload_time_iso_8601": "2018-11-05T17:14:38.355390Z", "url": "https://files.pythonhosted.org/packages/60/f3/6a5e19acb7723680f5f6b867574f6c458f4cf18c40c477f50973f19adf09/ukcensusapi-1.1.5.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:41:19 2020"}