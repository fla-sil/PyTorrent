{"info": {"author": "Caleb Hattingh", "author_email": "caleb.hattingh@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: 3.9", "Programming Language :: Python :: Implementation :: PyPy"], "description": "\n\n.. image:: https://github.com/cjrh/excitertools/workflows/Python%20application/badge.svg\n    :target: https://github.com/cjrh/excitertools/actions\n\n.. image:: https://coveralls.io/repos/github/cjrh/excitertools/badge.svg?branch=master\n    :target: https://coveralls.io/github/cjrh/excitertools?branch=master\n\n.. image:: https://img.shields.io/pypi/pyversions/excitertools.svg\n    :target: https://pypi.python.org/pypi/excitertools\n\n.. image:: https://img.shields.io/github/tag/cjrh/excitertools.svg\n    :target: https://img.shields.io/github/tag/cjrh/excitertools.svg\n\n.. image:: https://img.shields.io/badge/install-pip%20install%20excitertools-ff69b4.svg\n    :target: https://img.shields.io/badge/install-pip%20install%20excitertools-ff69b4.svg\n\n.. image:: https://img.shields.io/pypi/v/excitertools.svg\n    :target: https://img.shields.io/pypi/v/excitertools.svg\n\n.. image:: https://img.shields.io/badge/calver-YYYY.MM.MINOR-22bfda.svg\n    :target: http://calver.org/\n\n.. image:: https://img.shields.io/badge/code%20style-black-000000.svg\n    :target: https://github.com/ambv/black\n\n\n.. _more-itertools: https://more-itertools.readthedocs.io/en/stable/index.html\n\n.. _excitertools:\n\nexcitertools\n############\n\nitertools in the form of function call chaining\n\n.. contents::\n    :depth: 1\n\nRelated projects\n****************\n\n* My fork of a now-missing library: `chained-iterable <https://github.com/cjrh/chained-iterable>`_.\n\n* `https://github.com/olirice/flupy <https://github.com/olirice/flupy>`_\n\n* `https://github.com/ddstte/chiter <https://github.com/ddstte/chiter>`_\n\n* `https://github.com/neverendingqs/pyiterable <https://github.com/neverendingqs/pyiterable>`_\n\n* `https://github.com/alliefitter/iterable_collections <https://github.com/alliefitter/iterable_collections>`_\n\n* `https://github.com/halprin/iterator-chain <https://github.com/halprin/iterator-chain>`_\n\n* `https://github.com/jagill/python-chainz <https://github.com/jagill/python-chainz>`_\n\n* `https://github.com/ZianVW/IterPipe <https://github.com/ZianVW/IterPipe>`_\n\n* `https://github.com/Evelyn-H/iterchain <https://github.com/Evelyn-H/iterchain>`_\n\n* `https://github.com/EntilZha/PyFunctional <https://github.com/EntilZha/PyFunctional>`_\n\nTangentially related:\n\n* `https://github.com/jreese/aioitertools <https://github.com/jreese/aioitertools>`_\n\n\n.. |warning| unicode:: U+26A0\n.. |cool| unicode:: U+2728\n.. |flux| unicode:: U+1F6E0\n.. |source| unicode:: U+1F3A4\n.. |sink| unicode:: U+1F3A7\n\n\nAPI Documentation\n#################\n\nSeveral emoji are used to indicate things about parts of the API:\n\n- |source| This API method is a *source*, meaning that it produces data\n  that will be processed in an iterator chain.\n- |sink| This API method is a *sink*, meaning that it consumes data that\n  was processed in an iterator chain.\n- |warning| Warning - pay attention\n- |flux| This API is still in flux, and might be changed or\n  removed in the future\n- |cool| Noteworthy; could be especially useful in many situations.\n\nThe API is arranged roughly with the module-level functions first, and\nthereafter the Iter_ class itself. It is the Iter_ class that does\nthe work to allow these iterators to be chained together. However, the\nmodule-level functions are more likely to be used directly and that's\nwhy they're presented first.\n\nThe API includes wrappers for the stdlib *itertools* module, including\nthe \"recipes\" given in the *itertools* docs, as well as wrappers for\nthe iterators from the more-itertools_ 3rd-party package.\n\n.. contents::\n    :local:\n\n\n\n\n-----\n\nThe following module-level functions, like range_, zip_ and so on, are \nintended to be used as replacements for their homonymous builtins. The\nonly difference between these and the builtin versions is that these \nreturn instances of the Iter_ class. Note that because Iter_ is itself\niterable, it means that the functions here can be used as drop-in \nreplacements.\n\n\n\n.. _range:\n\n\n|source| ``range(*args) -> \"Iter[int]\"``\n****************************************\n\n\nReplacement for the builtin ``range`` function.  This version returns\nan instance of Iter_ to allow further iterable chaining.\n\nAll the same calling variations work because this function merely wraps\nthe original function.\n\n.. code-block:: python\n\n    >>> range(3).collect()\n    [0, 1, 2]\n    >>> range(1, 4).collect()\n    [1, 2, 3]\n    >>> range(1, 6, 2).collect()\n    [1, 3, 5]\n    >>> range(1, 101, 3).filter(lambda x: x % 7 == 0).collect()\n    [7, 28, 49, 70, 91]\n\nThis example multiples, element by element, the series [0:5] with the\nseries [1:6]. Two things to note: Firstly, Iter.zip_ is used to emit\nthe tuples from each series. Secondly, Iter.starmap_ is used to receive\nthose tuples into separate arguments in the lambda.\n\n.. code-block:: python\n\n    >>> range(5).zip(range(1, 6)).starmap(lambda x, y: x * y).collect()\n    [0, 2, 6, 12, 20]\n\nWhen written in a single line as above, it can get difficult to follow\nthe chain of logic if there are many processing steps. Parentheses in\nPython allow grouping such that expressions can be spread over multiple\nlines.\n\nThis is the same example as the prior one, but formatted to be spread\nover several lines. This is much clearer:\n\n.. code-block:: python\n\n    >>> # Written out differently\n    >>> (\n    ...     range(5)\n    ...         .zip(range(1, 6))\n    ...         .starmap(lambda x, y: x * y)\n    ...         .collect()\n    ... )\n    [0, 2, 6, 12, 20]\n\nIf you wanted the sum instead, it isn't necessary to do the collection\nat all:\n\n.. code-block:: python\n\n    >>> (\n    ...     range(5)\n    ...         .zip(range(1, 6))\n    ...         .starmap(lambda x, y: x * y)\n    ...         .sum()\n    ... )\n    40\n\n\n\n.. _zip:\n\n\n``zip(*iterables: Any) -> \"Iter[Tuple[T, ...]]\"``\n*************************************************\nReplacement for the builtin ``zip`` function.  This version returns\nan instance of Iter_ to allow further iterable chaining.\n\n.. _enumerate:\n\n\n``enumerate(iterable) -> \"Iter[Tuple[int, T]]\"``\n************************************************\nReplacement for the builtin ``enumerate`` function.  This version returns\nan instance of Iter_ to allow further iterable chaining.\n\n.. code-block:: python\n\n    >>> enumerate(string.ascii_lowercase).take(3).collect()\n    [(0, 'a'), (1, 'b'), (2, 'c')]\n\n\n\n\n.. _map:\n\n\n``map(func: Union[Callable[..., C], str], iterable) -> \"Iter[C]\"``\n******************************************************************\nReplacement for the builtin ``map`` function.  This version returns\nan instance of Iter_ to allow further iterable chaining.\n\n.. code-block:: python\n\n    >>> result = map(lambda x: (x, ord(x)), 'caleb').dict()\n    >>> assert result == {'a': 97, 'b': 98, 'c': 99, 'e': 101, 'l': 108}\n\n    >>> result = map('x, ord(x)', 'caleb').dict()\n    >>> assert result == {'a': 97, 'b': 98, 'c': 99, 'e': 101, 'l': 108}\n\n\n.. _filter:\n\n\n``filter(function: \"Callable[[Any], ...]\", iterable: Iterable) -> \"Iter[T]\"``\n*****************************************************************************\nReplacement for the builtin ``filter`` function.  This version returns\nan instance of Iter_ to allow further iterable chaining.\n\n.. code-block:: python\n\n    >>> filter(lambda x: x % 3 == 0, range(10)).collect()\n    [0, 3, 6, 9]\n\n\n\n\n.. _count:\n\n\n|source| ``count(start, step: int = 1) -> \"Iter[int]\"``\n*******************************************************\n\n\nReplacement for the itertools ``count`` function.  This version returns\nan instance of Iter_ to allow further iterable chaining.\n\n.. code-block:: python\n\n    >>> count(0).take(5).collect()\n    [0, 1, 2, 3, 4]\n    >>> count(0).take(0).collect()\n    []\n    >>> count(10).take(0).collect()\n    []\n    >>> count(10).take(5).collect()\n    [10, 11, 12, 13, 14]\n    >>> count(1).filter(lambda x: x > 10).take(5).collect()\n    [11, 12, 13, 14, 15]\n\n\n\n.. _cycle:\n\n\n``cycle(iterable) -> \"Iter[T]\"``\n********************************\nReplacement for the itertools ``count`` function.  This version returns\nan instance of Iter_ to allow further iterable chaining.\n\n.. code-block:: python\n\n    >>> cycle(range(3)).take(6).collect()\n    [0, 1, 2, 0, 1, 2]\n    >>> cycle([]).take(6).collect()\n    []\n    >>> cycle(range(3)).take(0).collect()\n    []\n\n\n\n.. _repeat:\n\n\n|source| ``repeat(object: C, times=None) -> \"Iter[C]\"``\n*******************************************************\n\n\nReplacement for the itertools ``count`` function.  This version returns\nan instance of Iter_ to allow further iterable chaining.\n\n.. code-block:: python\n\n    >>> repeat('a').take(3).collect()\n    ['a', 'a', 'a']\n    >>> repeat([1, 2]).take(3).collect()\n    [[1, 2], [1, 2], [1, 2]]\n    >>> repeat([1, 2]).take(3).collapse().collect()\n    [1, 2, 1, 2, 1, 2]\n    >>> repeat([1, 2]).collapse().take(3).collect()\n    [1, 2, 1]\n    >>> repeat('a', times=3).collect()\n    ['a', 'a', 'a']\n\n\n\n\nThis next set of functions return iterators that terminate on the shortest \ninput sequence.\n\n\n\n.. _accumulate:\n\n\n``accumulate(iterable, func=None, *, initial=None)``\n****************************************************\nReplacement for the itertools ``accumulate`` function.  This version returns\nan instance of Iter_ to allow further iterable chaining.\n\n.. code-block:: python\n\n    >>> accumulate([1, 2, 3, 4, 5]).collect()\n    [1, 3, 6, 10, 15]\n    >>> if sys.version_info >= (3, 8):\n    ...     output = accumulate([1, 2, 3, 4, 5], initial=100).collect()\n    ...     assert output == [100, 101, 103, 106, 110, 115]\n    >>> accumulate([1, 2, 3, 4, 5], operator.mul).collect()\n    [1, 2, 6, 24, 120]\n    >>> accumulate([]).collect()\n    []\n    >>> accumulate('abc').collect()\n    ['a', 'ab', 'abc']\n    >>> accumulate(b'abc').collect()\n    [97, 195, 294]\n    >>> accumulate(bytearray(b'abc')).collect()\n    [97, 195, 294]\n\n\n\n.. _chain:\n\n\n``chain(*iterables: Iterable[T]) -> \"Iter[T]\"``\n***********************************************\nReplacement for the itertools ``chain`` function.  This version returns\nan instance of Iter_ to allow further iterable chaining.\n\n.. code-block:: python\n\n    >>> chain('ABC', 'DEF').collect()\n    ['A', 'B', 'C', 'D', 'E', 'F']\n    >>> chain().collect()\n    []\n\n\n\n.. _chain_from_iterable:\n\n\n``chain_from_iterable(iterable) -> \"Iter[T]\"``\n**********************************************\nReplacement for the itertools ``chain.from_iterable`` method.\nThis version returns an instance of Iter_ to allow\nfurther iterable chaining.\n\n.. code-block:: python\n\n    >>> chain_from_iterable(['ABC', 'DEF']).collect()\n    ['A', 'B', 'C', 'D', 'E', 'F']\n    >>> chain_from_iterable([]).collect()\n    []\n\n\n\n.. _compress:\n\n\n``compress(data, selectors)``\n*****************************\nReplacement for the itertools ``compress`` function.  This version returns\nan instance of Iter_ to allow further iterable chaining.\n\n.. code-block:: python\n\n    >>> compress('ABCDEF', [1, 0, 1, 0, 1, 1]).collect()\n    ['A', 'C', 'E', 'F']\n\n\n\n\n.. _dropwhile:\n\n\n``dropwhile(pred, iterable)``\n*****************************\nReplacement for the itertools ``dropwhile`` function.  This version returns\nan instance of Iter_ to allow further iterable chaining.\n\n.. code-block:: python\n\n    >>> dropwhile(lambda x: x < 4, range(6)).collect()\n    [4, 5]\n\n\n\n.. _filterfalse:\n\n\n``filterfalse(pred, iterable)``\n*******************************\nReplacement for the itertools ``filterfalse`` function.  This version returns\nan instance of Iter_ to allow further iterable chaining.\n\n.. code-block:: python\n\n    >>> filterfalse(None, [2, 0, 3, None, 4, 0]).collect()\n    [0, None, 0]\n\n\n\n.. _groupby:\n\n\n``groupby(iterable, key=None)``\n*******************************\nReplacement for the itertools ``groupby`` function.  This version returns\nan instance of Iter_ to allow further iterable chaining.\n\ngroupby_ returns an iterator of a key and \"grouper\" iterable. In the\nexample below, we use Iter.starmap_ to collect each grouper iterable\ninto a list, as this makes it neater for display here in the docstring.\n\n.. code-block:: python\n\n    >>> (\n    ...     groupby(['john', 'jill', 'anne', 'jack'], key=lambda x: x[0])\n    ...         .starmap(lambda k, g: (k, list(g)))\n    ...         .collect()\n    ... )\n    [('j', ['john', 'jill']), ('a', ['anne']), ('j', ['jack'])]\n\n\n\n\n.. _islice:\n\n\n``islice(iterable, *args) -> \"Iter\"``\n*************************************\nReplacement for the itertools ``islice`` function.  This version returns\nan instance of Iter_ to allow further iterable chaining.\n\n.. code-block:: python\n\n    >>> islice('ABCDEFG', 2).collect()\n    ['A', 'B']\n    >>> islice('ABCDEFG', 2, 4).collect()\n    ['C', 'D']\n    >>> islice('ABCDEFG', 2, None).collect()\n    ['C', 'D', 'E', 'F', 'G']\n    >>> islice('ABCDEFG', 0, None, 2).collect()\n    ['A', 'C', 'E', 'G']\n\n\n\n.. _starmap:\n\n\n``starmap(func, iterable)``\n***************************\nReplacement for the itertools ``starmap`` function.  This version returns\nan instance of Iter_ to allow further iterable chaining.\n\n.. code-block:: python\n\n    >>> starmap(pow, [(2, 5), (3, 2), (10, 3)]).collect()\n    [32, 9, 1000]\n\n\n\n.. _takewhile:\n\n\n``takewhile(pred, iterable)``\n*****************************\nReplacement for the itertools ``takewhile`` function.  This version returns\nan instance of Iter_ to allow further iterable chaining.\n\n.. code-block:: python\n\n    >>> takewhile(lambda x: x < 5, [1, 4, 6, 4, 1]).collect()\n    [1, 4]\n\n\n\n.. _tee:\n\n\n``tee(iterable, n=2)``\n**********************\nReplacement for the itertools ``tee`` function.  This version returns\nan instance of Iter_ to allow further iterable chaining.\n\n.. code-block:: python\n\n    >>> a, b = tee(range(5))\n    >>> a.collect()\n    [0, 1, 2, 3, 4]\n    >>> b.sum()\n    10\n\nIt is also possible to operate on the returned iterators in the chain\nbut it gets quite difficult to understand:\n\n.. code-block:: python\n\n    >>> tee(range(5)).map(lambda it: it.sum()).collect()\n    [10, 10]\n\nIn the example above we passed in range_, but with excitertools_\nit's usually more natural to push data sources further left:\n\n.. code-block:: python\n\n    >>> range(5).tee().map(lambda it: it.sum()).collect()\n    [10, 10]\n\nPay close attention to the above. The map_ is acting on each of the\ncopied iterators.\n\n\n\n.. _zip_longest:\n\n\n``zip_longest(*iterables, fillvalue=None)``\n*******************************************\nReplacement for the itertools ``zip_longest`` function.  This version returns\nan instance of Iter_ to allow further iterable chaining.\n\n.. code-block:: python\n\n    >>> zip_longest('ABCD', 'xy', fillvalue='-').collect()\n    [('A', 'x'), ('B', 'y'), ('C', '-'), ('D', '-')]\n    >>> (\n    ...     zip_longest('ABCD', 'xy', fillvalue='-')\n    ...         .map(lambda tup: concat(tup, ''))\n    ...         .collect()\n    ... )\n    ['Ax', 'By', 'C-', 'D-']\n    >>> (\n    ...     zip_longest('ABCD', 'xy', fillvalue='-')\n    ...         .starmap(operator.add)\n    ...         .collect()\n    ... )\n    ['Ax', 'By', 'C-', 'D-']\n\n\n\n.. _Iter:\n\n\n|cool| ``class Iter(Generic[T])``\n*********************************\n\n\nThis class is what allows chaining. Many of the methods in this class\nreturn an instance of Iter_, which allows further chaining. There\nare two exceptions to this: *sources* and *sinks*.\n\nA \"source\" is usually a ``classmethod`` which can be used as an\ninitializer to produce data via an iterable. For example, the Iter.range_\nclassmethod can be used to get a sequence of numbers:\n\n.. code-block:: python\n\n    >>> Iter.range(1_000_000).take(3).collect()\n    [0, 1, 2]\n\nEven though our range was a million elements, the iterator chaining\ntook only 3 of those elements before collecting.\n\nA \"sink\" is a method that is usually the last component of a processing\nchain and often (but not always!) consumes the entire iterator. In the\nexample above, the call to Iter.collect_ was a sink. Note that we still\ncall it a sink even though it did not consume the entire iterator.\n\nWe're using the term \"source\" to refer to a classmethod of Iter_ that\nproduces data; but, the most typical source is going to be data that\nyou provide. Iter_ can be called with anything that is iterable, including\nsequences, iterators, mappings, sets, generators and so on.\n\nExamples:\n\n.. code-block:: python\n\n    List\n    >>> Iter([1, 2, 3]).map(lambda x: x * 2).sum()\n    12\n\n    Generator\n    >>> Iter((1, 2, 3)).map(lambda x: x * 2).sum()\n    12\n    >>> def g():\n    ...     for i in [1, 2, 3]:\n    ...         yield i\n    >>> Iter(g()).map(lambda x: x * 2).sum()\n    12\n\n    Iterator\n    >>> Iter(iter([1, 2, 3])).map(lambda x: x * 2).sum()\n    12\n\n    Dict\n    >>> Iter(dict(a=1, b=2)).map(lambda x: x.upper()).collect()\n    ['A', 'B']\n    >>> d = dict(a=1, b=2, c=3)\n    >>> Iter(d.items()).starmap(lambda k, v: v).map(lambda x: x * 2).sum()\n    12\n\nA common error with generators is forgetting to actually evaluate, i.e.,\ncall a generator function. If you do this there's a friendly error\npointing out the mistake:\n\n.. code-block:: python\n\n    >>> def mygen(): yield 123\n    >>> Iter(mygen).collect()\n    Traceback (most recent call last):\n        ...\n    TypeError: It seems you passed a generator function, but you\n    probably intended to pass a generator. Remember to evaluate the\n    function to obtain a generator instance:\n    <BLANKLINE>\n    def mygen():\n        yield 123\n    <BLANKLINE>\n    Iter(mygen)    # ERROR - a generator function object is not iterable\n    Iter(mygen())  # CORRECT - a generator instance is iterable.\n    >>> Iter(mygen()).collect()\n    [123]\n\nInstance of Iter_ are resumable. Once an instance it created, it can\nbe partially iterated in successive calls, like the following example\nshows:\n\n.. code-block:: python\n\n    >>> it = Iter.range(1_000_000)\n    >>> it.take(3).collect()\n    [0, 1, 2]\n    >>> it.take(4).collect()\n    [3, 4, 5, 6]\n    >>> # Consume most of the stream, collect the last few\n    >>> it.consume(999_990).collect()\n    [999997, 999998, 999999]\n\nThis class implements the chaining. However, the module-level functions\nin excitertools_, such as range_, zip_ and so on, also return\ninstances of Iter_, so they allow the chaining to continue. These are\nequivalent:\n\n.. code-block:: python\n\n    >>> Iter.range(10).filter(lambda x: x > 7).collect()\n    [8, 9]\n    >>> range(10).filter(lambda x: x > 7).collect()\n    [8, 9]\n\nIt is intended that the module-level functions can act as drop-in\nreplacements for the builtins they wrap:\n\n>>> import builtins\n>>> list(builtins.range(3))\n[0, 1, 2]\n>>> list(range(3))  # This is excitertools.range!\n[0, 1, 2]\n>>> list(Iter.range(3))\n[0, 1, 2]\n\nIn your own code where you might like to use the excitertools_ version of\nrange_ and the other functions, you can just import it and use it to access all the other\ncool stuff:\n\n.. code-block:: python\n\n    # mymodule.py\n    from excitertools import (\n        range,\n        map,\n        filter,\n        reduce,\n        repeat,\n        count,\n        enumerate,\n        zip,\n        ...\n    )\n\n    def func(inputs):\n        data = (\n            map(lambda x: x + 2, inputs)\n                .enumerate()\n                .filter(lambda x: x[1] > 10)\n                ...\n                .collect()\n\n        )\n\nAlternatively, if you don't want to hide the builtins you can do just\nfine with importing this class only, or even importing the module only:\n\n.. code-block:: python\n\n    # mymodule.py - same example as before\n    import excitertools\n\n    def func(inputs):\n        data = (\n            excitertools.Iter(inputs)\n                .map(lambda x: x + 2, inputs)\n                .enumerate()\n                .filter(lambda x: x[1] > 10)\n                ...\n                .collect()\n        )\n\n        # Do something with data\n\nThere are several valuable additions to the standard *itertools* and\nmore-itertools_ functions. These usually involve sources and sinks,\nwhich are ways of getting data into an iterator pipeline, and then\ngetting results out again. In the majority of documentation examples\nshown here, the Iter.collect_ method is used to collect all the\nremaining data on a stream into a list; but in practice this is not\nuseful because large lists consume memory.\n\nIn practice it is more useful to send iterator data to one of these\ncommon sinks:\n\n- files\n- sockets\n- queues\n- HTTP APIs\n- Cloud storage buckets\n- (Ideas for more to add here?)\n\nIter_ has support for these use-cases, both for reading and for writing.\n\n\n\n\n\n.. _Iter.collect:\n\n\n|sink| ``Iter.collect(self, container=list) -> \"List[T]\"``\n==========================================================\n\n\n\n.. code-block:: python\n\n    >>> Iter('abc').collect()\n    ['a', 'b', 'c']\n    >>> Iter('abc').collect(str)\n    'abc'\n    >>> Iter('abcaaaabbbbccc').collect(set) == {'a', 'b', 'c'}\n    True\n\n\n\n.. _Iter.open:\n\n\n|cool| |source| ``@classmethod Iter.open(cls, file, mode=\"r\", buffering=-1, encoding=None, errors=None, newline=None, closefd=True, opener=None, ) -> \"Iter\"``\n==============================================================================================================================================================\n\n\n\n\nWrap the ``open()`` builtin precisely, but return an ``Iter``\ninstance to allow function chaining on the result.\n\n>>> import tempfile\n>>> with tempfile.TemporaryDirectory() as td:\n...     with open(td + 'text.txt', 'w') as f:\n...         f.writelines(['abc\\n', 'def\\n', 'ghi\\n'])\n...     Iter.open(td + 'text.txt').filter(lambda line: 'def' in line).collect()\n['def\\n']\n\nNote that this is a convenience method for *reading* from a file,\nnot for writing. The function signature includes the ``mode``\nparameter for parity with the builtin ``open()`` function, but\nonly reading is supported.\n\n\n\n.. _Iter.range:\n\n\n|source| ``@classmethod Iter.range(cls, *args) -> \"Iter[int]\"``\n===============================================================\n\n\nDocstring TBD\n\n\n.. _Iter.zip:\n\n\n``Iter.zip(self, *iterables: Any) -> \"Iter[Tuple[T, ...]]\"``\n============================================================\nDocstring TBD\n\n\n.. _Iter.any:\n\n\n|sink| ``Iter.any(self) -> \"bool\"``\n===================================\n\n\nDocstring TBD\n\n\n.. _Iter.all:\n\n\n|sink| ``Iter.all(self) -> \"bool\"``\n===================================\n\n\nDocstring TBD\n\n\n.. _Iter.enumerate:\n\n\n``Iter.enumerate(self) -> \"Iter[Tuple[int, T]]\"``\n=================================================\nDocstring TBD\n\n\n.. _Iter.dict:\n\n\n``Iter.dict(self) -> \"Dict\"``\n=============================\nDocstring TBD\n\n\n.. _Iter.map:\n\n\n``Iter.map(self, func: Union[Callable[..., C], str]) -> \"Iter[C]\"``\n===================================================================\n\n>>> result = Iter('caleb').map(lambda x: (x, ord(x))).dict()\n>>> assert result == {'a': 97, 'b': 98, 'c': 99, 'e': 101, 'l': 108}\n\n>>> result = Iter('caleb').map('x, ord(x)').dict()\n>>> assert result == {'a': 97, 'b': 98, 'c': 99, 'e': 101, 'l': 108}\n\n\n.. _Iter.filter:\n\n\n``Iter.filter(self, *args) -> \"Iter[T]\"``\n=========================================\nDocstring TBD\n\n\n.. _Iter.reduce:\n\n\n``Iter.reduce(self, func: Callable[..., T], *args) -> \"T\"``\n===========================================================\nDocstring TBD\n\n\n.. _Iter.sum:\n\n\n|sink| ``Iter.sum(self)``\n=========================\n\n\nDocstring TBD \n\n.. _Iter.concat:\n\n\n|sink| ``Iter.concat(self, glue: AnyStr) -> \"AnyStr\"``\n======================================================\n\n\nDocstring TBD\n\n\n.. _Iter.insert:\n\n\n``Iter.insert(self, glue: C) -> \"Iter[Union[C, T]]\"``\n=====================================================\nDocstring TBD\n\n\n.. _Iter.count:\n\n\n|source| ``@classmethod Iter.count(cls, *args) -> \"Iter[int]\"``\n===============================================================\n\n\nDocstring TBD \n\n.. _Iter.cycle:\n\n\n``Iter.cycle(self) -> \"Iter[T]\"``\n=================================\nDocstring TBD\n\n\n.. _Iter.repeat:\n\n\n|source| ``@classmethod Iter.repeat(cls, elem: C, times=None) -> \"Iter[C]\"``\n============================================================================\n\n\nDocstring TBD \n\n.. _Iter.accumulate:\n\n\n``Iter.accumulate(self, func=None, *, initial=None)``\n=====================================================\nDocstring TBD\n\n.. code-block:: python\n\n    >>> Iter([1, 2, 3, 4, 5]).accumulate().collect()\n    [1, 3, 6, 10, 15]\n    >>> if sys.version_info >= (3, 8):\n    ...     out = Iter([1, 2, 3, 4, 5]).accumulate(initial=100).collect()\n    ...     assert out == [100, 101, 103, 106, 110, 115]\n    >>> Iter([1, 2, 3, 4, 5]).accumulate(operator.mul).collect()\n    [1, 2, 6, 24, 120]\n\n\n\n.. _Iter.chain:\n\n\n``Iter.chain(self, *iterables: Iterable[T]) -> \"Iter[T]\"``\n==========================================================\nDocstring TBD\n\n.. code-block:: python\n\n    >>> Iter('ABC').chain('DEF').collect()\n    ['A', 'B', 'C', 'D', 'E', 'F']\n    >>> Iter('ABC').chain().collect()\n    ['A', 'B', 'C']\n\n\n\n.. _Iter.chain_from_iterable:\n\n\n``Iter.chain_from_iterable(self) -> \"Iter[T]\"``\n===============================================\nDocstring TBD\n\n.. code-block:: python\n\n    >>> Iter(['ABC', 'DEF']).chain_from_iterable().collect()\n    ['A', 'B', 'C', 'D', 'E', 'F']\n\n\n\n.. _Iter.compress:\n\n\n``Iter.compress(self, selectors)``\n==================================\nReplacement for the itertools ``compress`` function.  This version returns\nan instance of Iter_ to allow further iterable chaining.\n\n.. code-block:: python\n\n    >>> Iter('ABCDEF').compress([1, 0, 1, 0, 1, 1]).collect()\n    ['A', 'C', 'E', 'F']\n\n\n\n.. _Iter.dropwhile:\n\n\n``Iter.dropwhile(self, pred)``\n==============================\nDocstring TBD\n\n\n.. _Iter.filterfalse:\n\n\n``Iter.filterfalse(self, pred)``\n================================\nDocstring TBD\n\n\n.. _Iter.groupby:\n\n\n``Iter.groupby(self, key=None)``\n================================\nDocstring TBD\n\n\n.. _Iter.islice:\n\n\n``Iter.islice(self, *args) -> \"Iter\"``\n======================================\nDocstring TBD\n\n\n.. _Iter.starmap:\n\n\n``Iter.starmap(self, func)``\n============================\nDocstring TBD\n\n\n.. _Iter.takewhile:\n\n\n``Iter.takewhile(self, pred)``\n==============================\nDocstring TBD\n\n\n.. _Iter.tee:\n\n\n``Iter.tee(self, n=2)``\n=======================\nDocstring TBD\n\n\n.. _Iter.zip_longest:\n\n\n``Iter.zip_longest(self, *iterables, fillvalue=None)``\n======================================================\nDocstring TBD\n\n\n.. _Iter.chunked:\n\n\n``Iter.chunked(self, n: int) -> \"Iter\"``\n========================================\nDocstring TBD\n\n\n.. _Iter.ichunked:\n\n\n``Iter.ichunked(self, n: int) -> \"Iter\"``\n=========================================\nDocstring TBD\n\n\n.. _Iter.sliced:\n\n\n``@classmethod Iter.sliced(cls, seq: Sequence, n: int) -> \"Iter\"``\n==================================================================\nDocstring TBD\n\n\n.. _Iter.distribute:\n\n\n``Iter.distribute(self, n: int) -> \"Iter\"``\n===========================================\nDocstring TBD\n\n\n.. _Iter.divide:\n\n\n``Iter.divide(self, n: int) -> \"Iter\"``\n=======================================\nDocstring TBD\n\n\n.. _Iter.split_at:\n\n\n``Iter.split_at(self, pred)``\n=============================\nDocstring TBD\n\n\n.. _Iter.split_before:\n\n\n``Iter.split_before(self, pred)``\n=================================\nDocstring TBD\n\n\n.. _Iter.split_after:\n\n\n``Iter.split_after(self, pred)``\n================================\nDocstring TBD\n\n\n.. _Iter.split_into:\n\n\n``Iter.split_into(self, sizes)``\n================================\nDocstring TBD\n\n\n.. _Iter.split_when:\n\n\n``Iter.split_when(self, pred)``\n===============================\nDocstring TBD\n\n\n.. _Iter.bucket:\n\n\n``Iter.bucket(self, key, validator=None)``\n==========================================\nDocstring TBD\n\n\n.. _Iter.unzip:\n\n\n``Iter.unzip(self)``\n====================\nDocstring TBD\n\n\n.. _Iter.grouper:\n\n\n``Iter.grouper(self, n: int, fillvalue=None) -> \"Iter\"``\n========================================================\nDocstring TBD\n\n\n.. _Iter.partition:\n\n\n``Iter.partition(self, pred) -> \"Iter\"``\n========================================\nDocstring TBD\n\n\n.. _Iter.spy:\n\n\n``Iter.spy(self, n=1) -> \"Tuple[Iter, Iter]\"``\n==============================================\nDocstring TBD\n\n\n.. _Iter.peekable:\n\n\n``Iter.peekable(self) -> \"more_itertools.peekable\"``\n====================================================\nDocstring TBD\n\n\n.. _Iter.seekable:\n\n\n``Iter.seekable(self) -> \"more_itertools.seekable\"``\n====================================================\nDocstring TBD\n\n\n.. _Iter.windowed:\n\n\n``Iter.windowed(self, n, fillvalue=None, step=1) -> \"Iter\"``\n============================================================\nDocstring TBD\n\n\n.. _Iter.substrings:\n\n\n``Iter.substrings(self)``\n=========================\nDocstring TBD\n\n\n.. _Iter.substrings_indexes:\n\n\n``Iter.substrings_indexes(self, reverse=False)``\n================================================\nDocstring TBD\n\n\n.. _Iter.stagger:\n\n\n``Iter.stagger(self, offsets=(-1, 0, 1), longest=False, fillvalue=None)``\n=========================================================================\n\n.. code-block:: python\n\n    >>> Iter([0, 1, 2, 3]).stagger().collect()\n    [(None, 0, 1), (0, 1, 2), (1, 2, 3)]\n    >>> Iter(range(8)).stagger(offsets=(0, 2, 4)).collect()\n    [(0, 2, 4), (1, 3, 5), (2, 4, 6), (3, 5, 7)]\n    >>> Iter([0, 1, 2, 3]).stagger(longest=True).collect()\n    [(None, 0, 1), (0, 1, 2), (1, 2, 3), (2, 3, None), (3, None, None)]\n\n\n\n.. _Iter.pairwise:\n\n\n``Iter.pairwise(self)``\n=======================\n\nReference `more_itertools.pairwise <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.pairwise>`_\n\n.. code-block:: python\n\n    >>> Iter.count().pairwise().take(4).collect()\n    [(0, 1), (1, 2), (2, 3), (3, 4)]\n\n\n.. _Iter.count_cycle:\n\n\n``Iter.count_cycle(self, n=None) -> \"Iter\"``\n============================================\n\n\nReference: `more_itertools.count_cycle <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.count_cycle>`_\n\n.. code-block:: python\n\n    >>> Iter('AB').count_cycle(3).collect()\n    [(0, 'A'), (0, 'B'), (1, 'A'), (1, 'B'), (2, 'A'), (2, 'B')]\n\n\n\n.. _Iter.intersperse:\n\n\n``Iter.intersperse(self, e, n=1) -> \"Iter\"``\n============================================\n\nReference: `more_itertools.intersperse <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.intersperse>`_\n\n.. code-block:: python\n\n    >>> Iter([1, 2, 3, 4, 5]).intersperse('!').collect()\n    [1, '!', 2, '!', 3, '!', 4, '!', 5]\n\n    >>> Iter([1, 2, 3, 4, 5]).intersperse(None, n=2).collect()\n    [1, 2, None, 3, 4, None, 5]\n\n\n\n.. _Iter.padded:\n\n\n``Iter.padded(self, fillvalue: Optional[C] = None, n: Optional[int] = None, next_multiple: bool = False, ) -> \"Iter[Union[T, C]]\"``\n===================================================================================================================================\n\nReference: `more_itertools.padded <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.padded>`_\n\n.. code-block:: python\n\n    >>> Iter([1, 2, 3]).padded('?', 5).collect()\n    [1, 2, 3, '?', '?']\n\n    >>> Iter([1, 2, 3, 4]).padded(n=3, next_multiple=True).collect()\n    [1, 2, 3, 4, None, None]\n\n\n\n.. _Iter.repeat_last:\n\n\n``Iter.repeat_last(self, default=None) -> \"Iter[T]\"``\n=====================================================\n\nReference: `more_itertools.repeat_last <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.repeat_last>`_\n\n.. code-block:: python\n\n    >>> Iter(range(3)).repeat_last().islice(5).collect()\n    [0, 1, 2, 2, 2]\n\n    >>> Iter(range(0)).repeat_last(42).islice(5).collect()\n    [42, 42, 42, 42, 42]\n\n\n\n.. _Iter.adjacent:\n\n\n``Iter.adjacent(self, pred, distance=1) -> \"Iter[Tuple[bool, T]]\"``\n===================================================================\n\nReference: `more_itertools.adjacent <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.adjacent>`_\n\n.. code-block:: python\n\n    >>> Iter(range(6)).adjacent(lambda x: x == 3).collect()\n    [(False, 0), (False, 1), (True, 2), (True, 3), (True, 4), (False, 5)]\n\n    >>> Iter(range(6)).adjacent(lambda x: x == 3, distance=2).collect()\n    [(False, 0), (True, 1), (True, 2), (True, 3), (True, 4), (True, 5)]\n\n\n\n\n.. _Iter.groupby_transform:\n\n\n``Iter.groupby_transform(self, keyfunc: Optional[Callable[..., K]] = None, valuefunc: Optional[Callable[..., V]] = None, ) -> \"Iter[Tuple[K, Iterable[V]]]\"``\n=============================================================================================================================================================\n\nReference: `more_itertools.groupby_transform <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.groupby_transform>`_\n\nThis example has been modified somewhat from the original. We're using\n``starmap`` here to \"unzip\" the tuples produced by the group\ntransform.\n\n.. code-block:: python\n\n    >>> iterable = 'AaaABbBCcA'\n    >>> keyfunc = lambda x: x.upper()\n    >>> valuefunc = lambda x: x.lower()\n    >>> (\n    ...    Iter(iterable)\n    ...        .groupby_transform(keyfunc, valuefunc)\n    ...        .starmap(lambda k, g: (k, ''.join(g)))\n    ...        .collect()\n    ... )\n    [('A', 'aaaa'), ('B', 'bbb'), ('C', 'cc'), ('A', 'a')]\n\n    >>> from operator import itemgetter\n    >>> keys = [0, 0, 1, 1, 1, 2, 2, 2, 3]\n    >>> values = 'abcdefghi'\n    >>> iterable = zip(keys, values)\n    >>> (\n    ...     Iter(iterable)\n    ...        .groupby_transform(itemgetter(0), itemgetter(1))\n    ...        .starmap(lambda k, g: (k, ''.join(g)))\n    ...        .collect()\n    ... )\n    [(0, 'ab'), (1, 'cde'), (2, 'fgh'), (3, 'i')]\n\n\n\n.. _Iter.padnone:\n\n\n``Iter.padnone(self) -> \"Iter[Union[T, None]]\"``\n================================================\n\nReference: `more_itertools.padnone <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.padnone>`_\n\n.. code-block:: python\n\n    >>> Iter(range(3)).padnone().take(5).collect()\n    [0, 1, 2, None, None]\n\n\n\n.. _Iter.ncycles:\n\n\n``Iter.ncycles(self, n) -> \"Iter[T]\"``\n======================================\n\nReference: `more_itertools.ncycles <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.ncycles>`_\n\n.. code-block:: python\n\n    >>> Iter(['a', 'b']).ncycles(3).collect()\n    ['a', 'b', 'a', 'b', 'a', 'b']\n\n\n\n.. _Iter.collapse:\n\n\n``Iter.collapse(self, base_type=None, levels=None) -> \"Iter\"``\n==============================================================\n\nReference: `more_itertools.collapse <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.collapse>`_\n\n.. code-block:: python\n\n    >>> iterable = [(1, 2), ([3, 4], [[5], [6]])]\n    >>> Iter(iterable).collapse().collect()\n    [1, 2, 3, 4, 5, 6]\n\n    >>> iterable = ['ab', ('cd', 'ef'), ['gh', 'ij']]\n    >>> Iter(iterable).collapse(base_type=tuple).collect()\n    ['ab', ('cd', 'ef'), 'gh', 'ij']\n\n    >>> iterable = [('a', ['b']), ('c', ['d'])]\n    >>> Iter(iterable).collapse().collect() # Fully flattened\n    ['a', 'b', 'c', 'd']\n    >>> Iter(iterable).collapse(levels=1).collect() # Only one level flattened\n    ['a', ['b'], 'c', ['d']]\n\n\n\n.. _Iter.sort_together:\n\n\n``@class_or_instancemethod Iter.sort_together(self_or_cls, iterables, key_list=(0,), reverse=False)``\n=====================================================================================================\n\nReference: `more_itertools.sort_together <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.sort_together>`_\n\nThis can be called either as an instance method or a class method.\nThe classmethod form is more convenient if all the iterables are\nalready available. The instancemethod form is more convenient if\none of the iterables already goes through some transformation.\n\nHere are examples from the classmethod form, which mirror the\nexamples in the more-itertools_ documentation:\n\n.. code-block:: python\n\n    >>> iterables = [(4, 3, 2, 1), ('a', 'b', 'c', 'd')]\n    >>> Iter.sort_together(iterables).collect()\n    [(1, 2, 3, 4), ('d', 'c', 'b', 'a')]\n\n    >>> iterables = [(3, 1, 2), (0, 1, 0), ('c', 'b', 'a')]\n    >>> Iter.sort_together(iterables, key_list=(1, 2)).collect()\n    [(2, 3, 1), (0, 0, 1), ('a', 'c', 'b')]\n\n    >>> Iter.sort_together([(1, 2, 3), ('c', 'b', 'a')], reverse=True).collect()\n    [(3, 2, 1), ('a', 'b', 'c')]\n\nHere is an examples using the instancemethod form:\n\n    >>> iterables = [('a', 'b', 'c', 'd')]\n    >>> Iter([4, 3, 2, 1]).sort_together(iterables).collect()\n    [(1, 2, 3, 4), ('d', 'c', 'b', 'a')]\n\n\n\n.. _Iter.interleave:\n\n\n``@class_or_instancemethod Iter.interleave(self_or_cls, *iterables) -> \"Iter\"``\n===============================================================================\n\nReference: `more_itertools.interleave <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.interleave>`_\n\nClassmethod form:\n\n.. code-block:: python\n\n    >>> Iter.interleave([1, 2, 3], [4, 5], [6, 7, 8]).collect()\n    [1, 4, 6, 2, 5, 7]\n\nInstancemethod form:\n\n.. code-block:: python\n\n    >>> Iter([1, 2, 3]).interleave([4, 5], [6, 7, 8]).collect()\n    [1, 4, 6, 2, 5, 7]\n\n\n\n.. _Iter.interleave_longest:\n\n\n``@class_or_instancemethod Iter.interleave_longest(self_or_cls, *iterables) -> \"Iter\"``\n=======================================================================================\n\nReference: `more_itertools.interleave_longest <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.interleave_longest>`_\n\nClassmethod form:\n\n.. code-block:: python\n\n    >>> Iter.interleave_longest([1, 2, 3], [4, 5], [6, 7, 8]).collect()\n    [1, 4, 6, 2, 5, 7, 3, 8]\n\nInstancemethod form:\n\n.. code-block:: python\n\n    >>> Iter([1, 2, 3]).interleave_longest([4, 5], [6, 7, 8]).collect()\n    [1, 4, 6, 2, 5, 7, 3, 8]\n\n\n\n.. _Iter.zip_offset:\n\n\n``@classmethod Iter.zip_offset(cls, *iterables, offsets, longest=False, fillvalue=None) -> \"Iter\"``\n===================================================================================================\n\nReference: `more_itertools.zip_offset <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.zip_offset>`_\n\n.. code-block:: python\n\n    >>> Iter.zip_offset('0123', 'abcdef', offsets=(0, 1)).collect()\n    [('0', 'b'), ('1', 'c'), ('2', 'd'), ('3', 'e')]\n\n    >>> Iter.zip_offset('0123', 'abcdef', offsets=(0, 1), longest=True).collect()\n    [('0', 'b'), ('1', 'c'), ('2', 'd'), ('3', 'e'), (None, 'f')]\n\n\n.. _Iter.dotproduct:\n\n\n``Iter.dotproduct(self, vec2: Iterable)``\n=========================================\n\nReference: `more_itertools.dotproduct <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.dotproduct>`_\n\n.. code-block:: python\n\n    >>> Iter([10, 10]).dotproduct([20, 20])\n    400\n\n\n.. _Iter.flatten:\n\n\n``Iter.flatten(self) -> \"Iter[T]\"``\n===================================\n\nReference: `more_itertools.flatten <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.flatten>`_\n\n.. code-block:: python\n\n    >>> Iter([[0, 1], [2, 3]]).flatten().collect()\n    [0, 1, 2, 3]\n\n\n\n.. _Iter.roundrobin:\n\n\n``@class_or_instancemethod Iter.roundrobin(self_or_cls: Union[Type[T], T], *iterables: C) -> \"Iter[Union[T, C]]\"``\n==================================================================================================================\n\nReference: `more_itertools.roundrobin <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.roundrobin>`_\n\nClassmethod form:\n\n.. code-block:: python\n\n    >>> Iter.roundrobin('ABC', 'D', 'EF').collect()\n    ['A', 'D', 'E', 'B', 'F', 'C']\n\nInstancemethod form:\n\n.. code-block:: python\n\n    >>> Iter('ABC').roundrobin('D', 'EF').collect()\n    ['A', 'D', 'E', 'B', 'F', 'C']\n\n\n\n.. _Iter.prepend:\n\n\n``Iter.prepend(self, value: C) -> \"Iter[Union[T, C]]\"``\n=======================================================\n\nReference: `more_itertools.prepend <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.prepend>`_\n\n.. code-block:: python\n\n    >>> value = '0'\n    >>> iterator = ['1', '2', '3']\n    >>> Iter(iterator).prepend(value).collect()\n    ['0', '1', '2', '3']\n\n\n\n.. _Iter.ilen:\n\n\n|sink| ``Iter.ilen(self) -> \"int\"``\n===================================\n\n\n\nReference: `more_itertools.ilen <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.ilen>`_\n\n.. code-block:: python\n\n    >>> Iter(x for x in range(1000000) if x % 3 == 0).ilen()\n    333334\n\n\n\n.. _Iter.unique_to_each:\n\n\n``Iter.unique_to_each(self) -> \"Iter[T]\"``\n==========================================\n\nReference: `more_itertools.unique_to_each <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.unique_to_each>`_\n\n.. code-block:: python\n\n    >>> Iter([{'A', 'B'}, {'B', 'C'}, {'B', 'D'}]).unique_to_each().collect()\n    [['A'], ['C'], ['D']]\n\n    >>> Iter([\"mississippi\", \"missouri\"]).unique_to_each().collect()\n    [['p', 'p'], ['o', 'u', 'r']]\n\n\n.. _Iter.sample:\n\n\n``Iter.sample(self, k=1, weights=None) -> \"Iter\"``\n==================================================\n\nReference: `more_itertools.sample <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.sample>`_\n\n.. code-block:: python\n\n    >>> iterable = range(100)\n    >>> Iter(iterable).sample(5).collect()  # doctest: +SKIP\n    [81, 60, 96, 16, 4]\n\n    >>> iterable = range(100)\n    >>> weights = (i * i + 1 for i in range(100))\n    >>> Iter(iterable).sample(5, weights=weights)  # doctest: +SKIP\n    [79, 67, 74, 66, 78]\n\n    >>> data = \"abcdefgh\"\n    >>> weights = range(1, len(data) + 1)\n    >>> Iter(data).sample(k=len(data), weights=weights)  # doctest: +SKIP\n    ['c', 'a', 'b', 'e', 'g', 'd', 'h', 'f']\n\n\n    >>> # This one just to let the doctest run\n    >>> iterable = range(100)\n    >>> Iter(iterable).sample(5).map(lambda x: 0 <= x < 100).all()\n    True\n\n\n\n.. _Iter.consecutive_groups:\n\n\n``Iter.consecutive_groups(self, ordering=lambda x: x)``\n=======================================================\n\nReference: `more_itertools.consecutive_groups <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.consecutive_groups>`_\n\n.. code-block:: python\n\n    >>> iterable = [1, 10, 11, 12, 20, 30, 31, 32, 33, 40]\n    >>> Iter(iterable).consecutive_groups().map(lambda g: list(g)).print('{v}').consume()\n    [1]\n    [10, 11, 12]\n    [20]\n    [30, 31, 32, 33]\n    [40]\n\n\n\n.. _Iter.run_length_encode:\n\n\n``Iter.run_length_encode(self) -> \"Iter[Tuple[T, int]]\"``\n=========================================================\n\nReference: `more_itertools.run_length <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.run_length>`_\n\n.. code-block:: python\n\n    >>> uncompressed = 'abbcccdddd'\n    >>> Iter(uncompressed).run_length_encode().collect()\n    [('a', 1), ('b', 2), ('c', 3), ('d', 4)]\n\n\n\n.. _Iter.run_length_decode:\n\n\n``Iter.run_length_decode(self) -> \"Iter\"``\n==========================================\n\nReference: `more_itertools.run_length <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.run_length>`_\n\n.. code-block:: python\n\n    >>> compressed = [('a', 1), ('b', 2), ('c', 3), ('d', 4)]\n    >>> Iter(compressed).run_length_decode().collect()\n    ['a', 'b', 'b', 'c', 'c', 'c', 'd', 'd', 'd', 'd']\n\n\n\n.. _Iter.map_reduce:\n\n\n``Iter.map_reduce(self, keyfunc, valuefunc=None, reducefunc=None) -> \"Dict\"``\n=============================================================================\n\nReference: `more_itertools.map_reduce <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.map_reduce>`_\n\nThis interface mirrors what more-itertools_ does in that it returns\na dict. See ``map_reduce_it()`` for a slightly-modified interface\nthat returns the dict items as another iterator.\n\n.. code-block:: python\n\n    >>> keyfunc = lambda x: x.upper()\n    >>> d = Iter('abbccc').map_reduce(keyfunc)\n    >>> sorted(d.items())\n    [('A', ['a']), ('B', ['b', 'b']), ('C', ['c', 'c', 'c'])]\n\n    >>> keyfunc = lambda x: x.upper()\n    >>> valuefunc = lambda x: 1\n    >>> d = Iter('abbccc').map_reduce(keyfunc, valuefunc)\n    >>> sorted(d.items())\n    [('A', [1]), ('B', [1, 1]), ('C', [1, 1, 1])]\n\n    >>> keyfunc = lambda x: x.upper()\n    >>> valuefunc = lambda x: 1\n    >>> reducefunc = sum\n    >>> d = Iter('abbccc').map_reduce(keyfunc, valuefunc, reducefunc)\n    >>> sorted(d.items())\n    [('A', 1), ('B', 2), ('C', 3)]\n\nNote the warning given in the more-itertools_ docs about how\nlists are created before the reduce step. This means you always want\nto filter *before* applying map_reduce, not after.\n\n.. code-block:: python\n\n    >>> all_items = _range(30)\n    >>> keyfunc = lambda x: x % 2  # Evens map to 0; odds to 1\n    >>> categories = Iter(all_items).filter(lambda x: 10<=x<=20).map_reduce(keyfunc=keyfunc)\n    >>> sorted(categories.items())\n    [(0, [10, 12, 14, 16, 18, 20]), (1, [11, 13, 15, 17, 19])]\n    >>> summaries = Iter(all_items).filter(lambda x: 10<=x<=20).map_reduce(keyfunc=keyfunc, reducefunc=sum)\n    >>> sorted(summaries.items())\n    [(0, 90), (1, 75)]\n\n\n\n.. _Iter.map_reduce_it:\n\n\n``Iter.map_reduce_it(self, keyfunc: Callable[..., K], valuefunc: Optional[Callable[..., V]] = None, reducefunc: Optional[Callable[..., R]] = None, ) -> \"Iter[Tuple[K, R]]\"``\n=============================================================================================================================================================================\n\nReference: `more_itertools.map_reduce <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.map_reduce>`_\n\n.. code-block:: python\n\n    >>> keyfunc = lambda x: x.upper()\n    >>> Iter('abbccc').map_reduce_it(keyfunc).collect()\n    [('A', ['a']), ('B', ['b', 'b']), ('C', ['c', 'c', 'c'])]\n\n    >>> keyfunc = lambda x: x.upper()\n    >>> valuefunc = lambda x: 1\n    >>> Iter('abbccc').map_reduce_it(keyfunc, valuefunc).collect()\n    [('A', [1]), ('B', [1, 1]), ('C', [1, 1, 1])]\n\n    >>> keyfunc = lambda x: x.upper()\n    >>> valuefunc = lambda x: 1\n    >>> reducefunc = sum\n    >>> Iter('abbccc').map_reduce_it(keyfunc, valuefunc, reducefunc).collect()\n    [('A', 1), ('B', 2), ('C', 3)]\n\n\n\n.. _Iter.exactly_n:\n\n\n|sink| ``Iter.exactly_n(self, n, predicate=bool) -> \"bool\"``\n============================================================\n\n\n\nDocstring TBD\n\n.. code-block:: python\n\n    >>> Iter([True, True, False]).exactly_n(2)\n    True\n\n\n\n.. _Iter.all_equal:\n\n\n``Iter.all_equal(self)``\n========================\n\n.. _Iter.first_true:\n\n\n``Iter.first_true(self)``\n=========================\n\n.. _Iter.quantify:\n\n\n``Iter.quantify(self)``\n=======================\n\n.. _Iter.islice_extended:\n\n\n``Iter.islice_extended(self, *args)``\n=====================================\n\nReference: `more_itertools.islice_extended <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.islice_extended>`_\n\n.. code-block:: python\n\n    >>> Iter('abcdefgh').islice_extended(-4, -1).collect()\n    ['e', 'f', 'g']\n\n.. code-block:: python\n\n    >>> Iter.count().islice_extended( 110, 99, -2).collect()\n    [110, 108, 106, 104, 102, 100]\n\n\n\n.. _Iter.first:\n\n\n``Iter.first(self)``\n====================\n\nReference: `more_itertools.first <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.first>`_\n\n\n.. _Iter.last:\n\n\n``Iter.last(self)``\n===================\n\nReference: `more_itertools.last <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.last>`_\n\n\n.. _Iter.one:\n\n\n``Iter.one(self)``\n==================\n\nReference: `more_itertools.one <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.one>`_\n\n\n\n.. _Iter.only:\n\n\n``Iter.only(self, default=None, too_long=ValueError) -> \"T\"``\n=============================================================\n\nReference: `more_itertools.one <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.one>`_\n\n.. code-block:: python\n\n    >>> Iter([]).only(default='missing')\n    'missing'\n    >>> Iter([42]).only(default='missing')\n    42\n    >>> Iter([1, 2]).only()\n    Traceback (most recent call last):\n        ...\n    ValueError: ...\n\n\n\n.. _Iter.strip:\n\n\n``Iter.strip(self, pred) -> \"Iter[T]\"``\n=======================================\n\nReference: `more_itertools.strip <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.strip>`_\n\n.. code-block:: python\n\n    >>> iterable = (None, False, None, 1, 2, None, 3, False, None)\n    >>> pred = lambda x: x in {None, False, ''}\n    >>> Iter(iterable).strip(pred).collect()\n    [1, 2, None, 3]\n\n\n\n.. _Iter.lstrip:\n\n\n``Iter.lstrip(self, pred) -> \"Iter[T]\"``\n========================================\n\nReference: `more_itertools.lstrip <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.lstrip>`_\n\n.. code-block:: python\n\n    >>> iterable = (None, False, None, 1, 2, None, 3, False, None)\n    >>> pred = lambda x: x in {None, False, ''}\n    >>> Iter(iterable).lstrip(pred).collect()\n    [1, 2, None, 3, False, None]\n\n\n\n.. _Iter.rstrip:\n\n\n``Iter.rstrip(self, pred) -> \"Iter[T]\"``\n========================================\n\nReference: `more_itertools.rstrip <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.rstrip>`_\n\n.. code-block:: python\n\n    >>> iterable = (None, False, None, 1, 2, None, 3, False, None)\n    >>> pred = lambda x: x in {None, False, ''}\n    >>> Iter(iterable).rstrip(pred).collect()\n    [None, False, None, 1, 2, None, 3]\n\n\n\n.. _Iter.filter_except:\n\n\n``Iter.filter_except(self, validator, *exceptions) -> \"Iter[T]\"``\n=================================================================\n\nReference: `more_itertools.filter_except <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.filter_except>`_\n\n.. code-block:: python\n\n    >>> iterable = ['1', '2', 'three', '4', None]\n    >>> Iter(iterable).filter_except(int, ValueError, TypeError).collect()\n    ['1', '2', '4']\n\n\n\n.. _Iter.map_except:\n\n\n``Iter.map_except(self, function, *exceptions) -> \"Iter\"``\n==========================================================\n\nReference: `more_itertools.map_except <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.map_except>`_\n\n.. code-block:: python\n\n    >>> iterable = ['1', '2', 'three', '4', None]\n    >>> Iter(iterable).map_except(int, ValueError, TypeError).collect()\n    [1, 2, 4]\n\n\n\n.. _Iter.nth_or_last:\n\n\n``Iter.nth_or_last(self, n, default=_marker) -> \"T\"``\n=====================================================\n\nReference: `more_itertools.nth_or_last <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.nth_or_last>`_\n\n.. code-block:: python\n\n    >>> Iter([0, 1, 2, 3]).nth_or_last(2)\n    2\n    >>> Iter([0, 1]).nth_or_last(2)\n    1\n    >>> Iter([]).nth_or_last(0, 'some default')\n    'some default'\n\n\n\n.. _Iter.nth:\n\n\n``Iter.nth(self, n, default=None)``\n===================================\n\nReference: `more_itertools.nth <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.nth>`_\n\n\n.. _Iter.take:\n\n\n``Iter.take(self, n: int) -> \"Iter\"``\n=====================================\n\nReference: `more_itertools.take <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.take>`_\n\n\n.. _Iter.tail:\n\n\n``Iter.tail(self)``\n===================\n\nReference: `more_itertools.tail <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.tail>`_\n\n\n.. _Iter.unique_everseen:\n\n\n``Iter.unique_everseen(self)``\n==============================\n\nReference: `more_itertools.unique_everseen <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.unique_everseen>`_\n\n\n.. _Iter.unique_justseen:\n\n\n``Iter.unique_justseen(self)``\n==============================\n\nReference: `more_itertools.unique_justseen <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.unique_justseen>`_\n\n\n.. _Iter.distinct_permutations:\n\n\n``Iter.distinct_permutations(self)``\n====================================\n\nReference: `more_itertools.distinct_permutations <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.distinct_permutations>`_\n\n\n.. _Iter.distinct_combinations:\n\n\n``Iter.distinct_combinations(self, r)``\n=======================================\n\nReference: `more_itertools.distinct_combinations <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.distinct_combinations>`_\n\n\n.. _Iter.circular_shifts:\n\n\n``Iter.circular_shifts(self) -> \"Iter\"``\n========================================\n\nReference: `more_itertools.circular_shifts <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.circular_shifts>`_\n\n\n.. _Iter.partitions:\n\n\n``Iter.partitions(self) -> \"Iter\"``\n===================================\n\nReference: `more_itertools.partitions <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.partitions>`_\n\n\n.. _Iter.set_partitions:\n\n\n``Iter.set_partitions(self, k=None) -> \"Iter\"``\n===============================================\n\nReference: `more_itertools.set_partitions <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.set_partitions>`_\n\n\n.. _Iter.powerset:\n\n\n``Iter.powerset(self)``\n=======================\n\nReference: `more_itertools.powerset <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.powerset>`_\n\n\n.. _Iter.random_product:\n\n\n``Iter.random_product(self)``\n=============================\n\nReference: `more_itertools.random_product <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.random_product>`_\n\n\n.. _Iter.random_permutation:\n\n\n``Iter.random_permutation(self)``\n=================================\n\nReference: `more_itertools.random_permutation <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.random_permutation>`_\n\n\n.. _Iter.random_combination:\n\n\n``Iter.random_combination(self)``\n=================================\n\nReference: `more_itertools.random_combination <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.random_combination>`_\n\n\n.. _Iter.random_combination_with_replacement:\n\n\n``Iter.random_combination_with_replacement(self)``\n==================================================\n\nReference: `more_itertools.random_combination_with_replacement <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.random_combination_with_replacement>`_\n\n\n.. _Iter.nth_combination:\n\n\n``Iter.nth_combination(self)``\n==============================\n\nReference: `more_itertools.nth_combination <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.nth_combination>`_\n\n\n.. _Iter.always_iterable:\n\n\n``Iter.always_iterable(self)``\n==============================\n\nReference: `more_itertools.always_iterable <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.always_iterable>`_\n\n\n.. _Iter.always_reversible:\n\n\n``Iter.always_reversible(self)``\n================================\n\nReference: `more_itertools.always_reversible <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.always_reversible>`_\n\n\n.. _Iter.with_iter:\n\n\n``@classmethod Iter.with_iter(cls, context_manager)``\n=====================================================\n\nReference: `more_itertools.with_iter <https://more-itertools.readthedocs.io/en/stable/api.html?highlight=numeric_range#more_itertools.with_iter>`_\n\nNote: Any context manager which returns an iterable is a candidate for\nIter.with_iter_.\n\n.. code-block:: python\n\n    >>> import tempfile\n    >>> with tempfile.TemporaryDirectory() as td:\n    ...     with open(td + 'text.txt', 'w') as f:\n    ...         f.writelines(['abc\\n', 'def\\n', 'ghi\\n'])\n    ...     Iter.with_iter(open(td + 'text.txt')).map(lambda x: x.upper()).collect()\n    ['ABC\\n', 'DEF\\n', 'GHI\\n']\n\nSee also: Iter.open_\n\n|flux| TODO: perhaps we should get rid of Iter.open_ and just use this?\n\n\n\n.. _Iter.iter_except:\n\n\n``@classmethod Iter.iter_except(cls, func, exception, first=None) -> \"Iter\"``\n=============================================================================\n\nReference: `more_itertools.iter_except <https://more-itertools.readthedocs.io/en/stable/api.html?highlight=numeric_range#more_itertools.iter_except>`_\n\n.. code-block:: python\n\n    >>> l = [0, 1, 2]\n    >>> Iter.iter_except(l.pop, IndexError).collect()\n    [2, 1, 0]\n\n\n\n.. _Iter.locate:\n\n\n``Iter.locate(self, pred=bool, window_size=None) -> \"Iter\"``\n============================================================\n\nReference: `more_itertools.locate <https://more-itertools.readthedocs.io/en/stable/api.html?highlight=numeric_range#more_itertools.locate>`_\n\n.. code-block:: python\n\n    >>> Iter([0, 1, 1, 0, 1, 0, 0]).locate().collect()\n    [1, 2, 4]\n\n.. code-block:: python\n\n    >>> Iter(['a', 'b', 'c', 'b']).locate(lambda x: x == 'b').collect()\n    [1, 3]\n\n.. code-block:: python\n\n    >>> iterable = [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3]\n    >>> pred = lambda *args: args == (1, 2, 3)\n    >>> Iter(iterable).locate(pred=pred, window_size=3).collect()\n    [1, 5, 9]\n\n.. code-block:: python\n\n    >>> from itertools import count\n    >>> from more_itertools import seekable\n    >>> source = (3 * n + 1 if (n % 2) else n // 2 for n in count())\n    >>> it = Iter(source).seekable()\n    >>> pred = lambda x: x > 100\n    >>> # TODO: can we avoid making two instances?\n    >>> indexes = Iter(it).locate(pred=pred)\n    >>> i = next(indexes)\n    >>> it.seek(i)\n    >>> next(it)\n    106\n\n\n\n.. _Iter.rlocate:\n\n\n``Iter.rlocate(self, pred=bool, window_size=None) -> \"Iter\"``\n=============================================================\n\nReference: `more_itertools.rlocate <https://more-itertools.readthedocs.io/en/stable/api.html?highlight=numeric_range#more_itertools.rlocate>`_\n\n.. code-block:: python\n\n    >>> Iter([0, 1, 1, 0, 1, 0, 0]).rlocate().collect()  # Truthy at 1, 2, and 4\n    [4, 2, 1]\n\n.. code-block:: python\n\n    >>> pred = lambda x: x == 'b'\n    >>> Iter('abcb').rlocate(pred).collect()\n    [3, 1]\n\n.. code-block:: python\n\n    >>> iterable = [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3]\n    >>> pred = lambda *args: args == (1, 2, 3)\n    >>> Iter(iterable).rlocate(pred=pred, window_size=3).collect()\n    [9, 5, 1]\n\n\n\n.. _Iter.replace:\n\n\n``Iter.replace(self, pred, substitutes, count=None, window_size=1) -> \"Iter\"``\n==============================================================================\n\nReference: `more_itertools.replace <https://more-itertools.readthedocs.io/en/stable/api.html?highlight=numeric_range#more_itertools.replace>`_\n\n.. code-block:: python\n\n    >>> iterable = [1, 1, 0, 1, 1, 0, 1, 1]\n    >>> pred = lambda x: x == 0\n    >>> substitutes = (2, 3)\n    >>> Iter(iterable).replace(pred, substitutes).collect()\n    [1, 1, 2, 3, 1, 1, 2, 3, 1, 1]\n\n.. code-block:: python\n\n    >>> iterable = [1, 1, 0, 1, 1, 0, 1, 1, 0]\n    >>> pred = lambda x: x == 0\n    >>> substitutes = [None]\n    >>> Iter(iterable).replace(pred, substitutes, count=2).collect()\n    [1, 1, None, 1, 1, None, 1, 1, 0]\n\n.. code-block:: python\n\n    >>> iterable = [0, 1, 2, 5, 0, 1, 2, 5]\n    >>> window_size = 3\n    >>> pred = lambda *args: args == (0, 1, 2)  # 3 items passed to pred\n    >>> substitutes = [3, 4] # Splice in these items\n    >>> Iter(iterable).replace(\n    ...     pred, substitutes, window_size=window_size\n    ... ).collect()\n    [3, 4, 5, 3, 4, 5]\n\n\n\n.. _Iter.numeric_range:\n\n\n``@classmethod Iter.numeric_range(cls, *args) -> \"Iter\"``\n=========================================================\n\nReference: `more_itertools.numeric_range <https://more-itertools.readthedocs.io/en/stable/api.html?highlight=numeric_range#more_itertools.numeric_range>`_\n\n.. code-block:: python\n\n    >>> Iter.numeric_range(3.5).collect()\n    [0.0, 1.0, 2.0, 3.0]\n\n.. code-block:: python\n\n    >>> from decimal import Decimal\n    >>> start = Decimal('2.1')\n    >>> stop = Decimal('5.1')\n    >>> Iter.numeric_range(start, stop).collect()\n    [Decimal('2.1'), Decimal('3.1'), Decimal('4.1')]\n\n.. code-block:: python\n\n    >>> from fractions import Fraction\n    >>> start = Fraction(1, 2)  # Start at 1/2\n    >>> stop = Fraction(5, 2)  # End at 5/2\n    >>> step = Fraction(1, 2)  # Count by 1/2\n    >>> Iter.numeric_range(start, stop, step).collect()\n    [Fraction(1, 2), Fraction(1, 1), Fraction(3, 2), Fraction(2, 1)]\n\n.. code-block:: python\n\n    >>> Iter.numeric_range(3, -1, -1.0).collect()\n    [3.0, 2.0, 1.0, 0.0]\n\n\n\n.. _Iter.side_effect:\n\n\n``Iter.side_effect(self, func, chunk_size=None, before=None, after=None)``\n==========================================================================\n\nReference: `more_itertools.side_effect <https://more-itertools.readthedocs.io/en/stable/api.html?highlight=numeric_range#more_itertools.side_effect>`_\n\n.. code-block:: python\n\n    >>> def f(item):\n    ...     if item == 3:\n    ...         raise Exception('got 3')\n    >>> Iter.range(5).side_effect(f).consume()\n    Traceback (most recent call last):\n        ...\n    Exception: got 3\n\n.. code-block:: python\n\n    >>> func = lambda item: print('Received {}'.format(item))\n    >>> Iter.range(2).side_effect(func).consume()\n    Received 0\n    Received 1\n\n\n\n\n.. _Iter.iterate:\n\n\n``Iter.iterate(self)``\n======================\n\n.. _Iter.difference:\n\n\n``Iter.difference(self, func=operator.sub, *, initial=None)``\n=============================================================\n\nReference: `more_itertools.difference <https://more-itertools.readthedocs.io/en/stable/api.html?highlight=difference#more_itertools.difference>`_\n\n.. code-block:: python\n\n    >>> iterable = [0, 1, 3, 6, 10]\n    >>> Iter(iterable).difference().collect()\n    [0, 1, 2, 3, 4]\n\n.. code-block:: python\n\n    >>> iterable = [1, 2, 6, 24, 120]  # Factorial sequence\n    >>> func = lambda x, y: x // y\n    >>> Iter(iterable).difference(func).collect()\n    [1, 2, 3, 4, 5]\n\n\n\n.. _Iter.make_decorator:\n\n\n``Iter.make_decorator(self)``\n=============================\n\n.. _Iter.SequenceView:\n\n\n``Iter.SequenceView(self)``\n===========================\n\n.. _Iter.time_limited:\n\n\n``Iter.time_limited(self, limit_seconds) -> \"Iter\"``\n====================================================\n\nReference: `more_itertools.time_limited <https://more-itertools.readthedocs.io/en/stable/api.html?highlight=time_limited#more_itertools.time_limited>`_\n\n.. code-block:: python\n\n    >>> from time import sleep\n    >>> def generator():\n    ...     yield 1\n    ...     yield 2\n    ...     sleep(0.2)\n    ...     yield 3\n    >>> Iter(generator()).time_limited(0.1).collect()\n    [1, 2]\n\n\n\n.. _Iter.consume:\n\n\n|sink| ``Iter.consume(self, n: Optional[int] = None) -> \"Optional[Iter[T]]\"``\n=============================================================================\n\n\nIf n is not provided, the entire iterator is consumed and\n``None`` is returned. Otherwise, an iterator will *always* be\nreturned, even if n is greater than the number of items left in\nthe iterator.\n\nIn this example, the source has more elements than what we consume,\nso there will still be data available on the chain:\n\n.. code-block:: python\n\n    >>> range(10).consume(5).collect()\n    [5, 6, 7, 8, 9]\n\nWe can bump up the count of how many items can be consumed. Note that\neven though ``n`` is greater than the number of items in the source,\nit is still required to call Iter.collect_ to consume the remaining\nitems.\n\n.. code-block:: python\n\n    >>> range(10).consume(50).collect()\n    []\n\nFinally, if ``n`` is not provided, the entire stream is consumed.\nIn this scenario, Iter.collect_ would fail since nothing is being\nreturned from the consume call.\n\n.. code-block:: python\n\n    >>> assert range(10).consume() is None\n\n\n\n.. _Iter.tabulate:\n\n\n``Iter.tabulate(self)``\n=======================\n\n.. _Iter.repeatfunc:\n\n\n|source| ``@classmethod Iter.repeatfunc(cls, func, *args, times=None)``\n=======================================================================\n\n\nDocstring TBD\n\n.. code-block:: python\n\n    >>> Iter.repeatfunc(operator.add, 3, 5, times=4).collect()\n    [8, 8, 8, 8]\n\n\n\n.. _Iter.wrap:\n\n\n``Iter.wrap(self, ends: \"Sequence[T, T]\" = \"()\")``\n==================================================\nOther examples for ends: '\"' * 2, or '`' * 2, or '[]' etc.\n\n\n.. _Iter.print:\n\n\n``Iter.print(self, template=\"{i}: {v}\") -> \"Iter[T]\"``\n======================================================\n\nPrinting during the execution of an iterator. Mostly useful\nfor debugging. Returns another iterator instance through which\nthe original data is passed unchanged. This means you can include\na `print()` step as necessary to observe data during iteration.\n\n.. code-block:: python\n\n    >>> Iter('abc').print().collect()\n    0: a\n    1: b\n    2: c\n    ['a', 'b', 'c']\n\n    >>> (\n    ...    Iter(range(5))\n    ...        .print('before filter {i}: {v}')\n    ...        .filter(lambda x: x > 2)\n    ...        .print('after filter {i}: {v}')\n    ...        .collect()\n    ... )\n    before filter 0: 0\n    before filter 1: 1\n    before filter 2: 2\n    before filter 3: 3\n    after filter 0: 3\n    before filter 4: 4\n    after filter 1: 4\n    [3, 4]\n\n\n\n.. _Iter.from_queue:\n\n\n|source| ``@classmethod Iter.from_queue(cls, q: queue.Queue, timeout=None, sentinel=None)``\n===========================================================================================\n\n\nWrap a queue with an iterator interface. This allows it to participate\nin chaining operations. The iterator will block while waiting for\nnew values to appear on the queue. This is useful: it allows you\nto easily and safely pass data between threads or processes, and\nfeed the incoming data into a pipeline.\n\nThe sentinel value, default ``None``, will terminate the iterator.\n\n.. code-block:: python\n\n    >>> q = queue.Queue()\n    >>> # This line puts stuff onto a queue\n    >>> range(10).chain([None]).map(q.put).consume()\n    >>> # This is where we consume data from the queue:\n    >>> Iter.from_queue(q).filter(lambda x: 2 < x < 9).collect()\n    [3, 4, 5, 6, 7, 8]\n\nIf ``None`` had not been chained onto the data, the iterator would\nhave waited in Iter.collect_ forever.\n\n\n\n.. _Iter.into_queue:\n\n\n|sink| ``Iter.into_queue(self, q: queue.Queue)``\n================================================\n\n\nThis is a sink, like Iter.collect_, that consumes data from\nan iterator chain and puts the data into the given queue.\n\n.. code-block:: python\n\n    >>> q = queue.Queue()\n    >>> # This demonstrates the queue sink\n    >>> range(5).into_queue(q)\n    >>> # Code below is only for verification\n    >>> out = []\n    >>> finished = False\n    >>> while not finished:\n    ...     try:\n    ...         out.append(q.get_nowait())\n    ...     except queue.Empty:\n    ...         finished = True\n    >>> out\n    [0, 1, 2, 3, 4]\n\n\n\n.. _Iter.send:\n\n\n|sink| ``Iter.send(self, collector: Generator, close_collector_when_done=False) -> \"None\"``\n===========================================================================================\n\n\nSee also: `more_itertools.consumer <https://more-itertools.readthedocs.io/en/stable/api.html?highlight=numeric_range#more_itertools.consumer>`_\n\nSend data into a generator. You do not have to first call ``next()``\non the generator. Iter.send_ will do this for you.\n\n|warning| Look carefully at the examples below; you'll see that the\n``yield`` keyword is wrapped in a second set of parens, e.g.\n``output.append((yield))``. This is required!\n\nSimple case:\n\n.. code-block:: python\n\n    >>> output = []\n    >>> def collector():\n    ...     while True:\n    ...         output.append((yield))\n    >>> Iter.range(3).send(collector())\n    >>> output\n    [0, 1, 2]\n\nNote that the generator is **not** closed by default after the iterable is\nexhausted. But this can be changed. If you choose to close the\ngenerator, use the parameter:\n\n.. code-block:: python\n\n    >>> output = []\n    >>> def collector():\n    ...     while True:\n    ...         output.append((yield))\n    >>> g = collector()\n    >>> Iter.range(3).send(g, close_collector_when_done=True)\n    >>> Iter.range(3).send(g)\n    Traceback (most recent call last):\n        ...\n    StopIteration\n\nThe default behaviour is that the generator is left open which means you\ncan keep using it for other iterators:\n\n.. code-block:: python\n\n    >>> output = []\n    >>> def collector():\n    ...     while True:\n    ...         output.append((yield))\n    >>> g = collector()\n    >>> Iter.range(3).send(g)\n    >>> Iter.range(10, 13).send(g)\n    >>> Iter.range(100, 103).send(g)\n    >>> output\n    [0, 1, 2, 10, 11, 12, 100, 101, 102]\n\n\nIf the generator is closed before the iteration is complete,\nyou'll get a ``StopIteration`` exception:\n\n.. code-block:: python\n\n    >>> output = []\n    >>> def collector():\n    ...   for i in range(3):\n    ...       output.append((yield))\n    >>> Iter.range(5).send(collector())\n    Traceback (most recent call last):\n        ...\n    StopIteration\n\nNote that Iter.send_ is a sink, so no further chaining is allowed.\n\n\n\n.. _Iter.send_also:\n\n\n``Iter.send_also(self, collector: Generator) -> \"Iter\"``\n========================================================\n\nReference: `more_itertools.consumer <https://more-itertools.readthedocs.io/en/stable/api.html?highlight=numeric_range#more_itertools.consumer>`_\n\nSome ideas around a reverse iterator as a sink. The requirement to\nfirst \"next\" a just-started generator before you can send values\ninto it is irritating, but not insurmountable. This method will\nautomatically detect the \"just-started generator\" situation, do the\n``next()``, and then send in the first value as necessary.\n\nSimple case:\n\n.. code-block:: python\n\n    >>> output = []\n    >>> def collector():\n    ...     while True:\n    ...         output.append((yield))\n    >>> Iter.range(3).send_also(collector()).collect()\n    [0, 1, 2]\n    >>> output\n    [0, 1, 2]\n\nIf the generator is closed before the iteration is complete,\nyou'll get an exception (Python 3.7+):\n\n.. code-block:: python\n\n    >>> output = []\n    >>> def collector():\n    ...   for i in builtins.range(3):\n    ...       output.append((yield))\n    >>> Iter.range(50).send_also(collector()).collect()  # doctest: +SKIP\n    Traceback (most recent call last):\n        ...\n    RuntimeError\n\nNote that the above doesn't happen in Python < 3.7 (which includes\npypy 7.3.1 that matches Python 3.6.9 compatibility). Instead, you\ncollect out the items up to until the point that the collector\nreturns; in this case, you'd get [0, 1, 2]. This change was made\nas part of `PEP 479 <https://www.python.org/dev/peps/pep-0479/>`_.\n\nRegardless, for any Python it's recommended that your generator\nlive at least as long as the iterator feeding it.\n\n\n\n.. _IterDict:\n\n\n|flux| ``class IterDict(UserDict)``\n***********************************\n\n\n\nThe idea here was to make a custom dict where several of\nthe standard dict methods return ``Iter`` instances, which can then\nbe chained. I'm not sure if this will be kept yet.\n\n\n.. _IterDict.keys:\n\n\n``IterDict.keys(self) -> \"Iter\"``\n=================================\n\n.. _IterDict.values:\n\n\n``IterDict.values(self) -> \"Iter\"``\n===================================\n\n.. _IterDict.items:\n\n\n``IterDict.items(self) -> \"Iter\"``\n==================================\n\n.. _IterDict.update:\n\n\n``IterDict.update(self, *args, **kwargs) -> \"IterDict\"``\n========================================================\n\n.. _insert_separator:\n\n\n``insert_separator(iterable: Iterable[Any], glue: Any) -> \"Iterable[Any]\"``\n***************************************************************************\nSimilar functionality can be obtained with, e.g.,\ninterleave, as in\n\n>>> result = Iter('caleb').interleave(Iter.repeat('x')).collect()\n>>> result == list('cxaxlxexbx')\nTrue\n\nBut you'll see a trailing \"x\" there, which join avoids. join\nmakes sure to only add the glue separator if another element\nhas arrived.\n\nIt can handle strings without any special considerations, but it doesn't\ndo any special handling for bytes and bytearrays. For that, rather\nlook at `concat()`.\n\n\n.. _concat:\n\n\n``concat(iterable: Iterable[AnyStr], glue: AnyStr) -> \"AnyStr\"``\n****************************************************************\nConcatenate strings, bytes and bytearrays. It is careful to avoid the\nproblem with single bytes becoming integers, and it looks at the value\nof `glue` to know whether to handle bytes or strings.\n\nThis function can raise ``ValueError`` if called with something\nother than ``bytes``, ``bytearray`` or ``str``.\n\n.. _from_queue:\n\n\n|source| ``from_queue(q: queue.Queue, timeout=None, sentinel=None) -> \"Iter\"``\n******************************************************************************\n\n\nWrap a queue with an iterator interface. This allows it to participate\nin chaining operations. The iterator will block while waiting for\nnew values to appear on the queue. This is useful: it allows you\nto easily and safely pass data between threads or processes, and\nfeed the incoming data into a pipeline.\n\nThe sentinel value, default ``None``, will terminate the iterator.\n\n.. code-block:: python\n\n    >>> q = queue.Queue()\n    >>> # This line puts stuff onto a queue\n    >>> range(10).chain([None]).map(q.put).consume()\n    >>> from_queue(q).filter(lambda x: 2 < x < 9).collect()\n    [3, 4, 5, 6, 7, 8]\n\n\n\n\nDev Instructions\n################\n\nSetup\n*****\n\n.. code-block:: shell\n\n    $ python -m venv venv\n    $ source venv/bin/activate\n    (venv) $ pip install -e .[dev,test]\n\nTesting\n*******\n\n.. code-block:: shell\n\n    (venv) $ pytest --cov\n\nDocumentation\n*************\n\nTo regenerate the documentation, file ``README.rst``:\n\n.. code-block:: shell\n\n    (venv) $ python regenerate_readme.py -m excitertools.py > README.rst\n\nReleasing\n*********\n\nTo do a release, we're using `bumpymcbumpface <https://pypi.org/project/bumpymcbumpface/>`_.\nMake sure that is set up correctly according to its own documentation. I \nlike to use `pipx <https://github.com/pipxproject/pipx>`_ to install and \nmanage these kinds of tools.\n\n.. code-block:: shell\n\n    $ bumpymcbumpface --push-git --push-pypi\n\n|\n|\n\n-----\n\n|\n|\n\n    Work is a necessary evil to be avoided. \n    *Mark Twain*\n\n\n\n\n\n", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/cjrh/excitertools", "keywords": "itertools", "license": "", "maintainer": "", "maintainer_email": "", "name": "excitertools", "package_url": "https://pypi.org/project/excitertools/", "platform": "", "project_url": "https://pypi.org/project/excitertools/", "project_urls": {"Homepage": "https://github.com/cjrh/excitertools"}, "release_url": "https://pypi.org/project/excitertools/0.2.2/", "requires_dist": ["more-itertools", "check-manifest ; extra == 'dev'", "pytest ; extra == 'test'", "coverage ; extra == 'test'"], "requires_python": "", "summary": "itertools with function chaining", "version": "0.2.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://github.com/cjrh/excitertools/actions\" rel=\"nofollow\"><img alt=\"https://github.com/cjrh/excitertools/workflows/Python%20application/badge.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ec96b04a752572c7768da7c09489d8da866e522e/68747470733a2f2f6769746875622e636f6d2f636a72682f65786369746572746f6f6c732f776f726b666c6f77732f507974686f6e2532306170706c69636174696f6e2f62616467652e737667\"></a>\n<a href=\"https://coveralls.io/github/cjrh/excitertools?branch=master\" rel=\"nofollow\"><img alt=\"https://coveralls.io/repos/github/cjrh/excitertools/badge.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e6903b24be9b00d340305bd573cb32c5b60eec2a/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f636a72682f65786369746572746f6f6c732f62616467652e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://pypi.python.org/pypi/excitertools\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/pyversions/excitertools.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e3dc2030d6cd56286e68f628035b6f17970087d8/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f65786369746572746f6f6c732e737667\"></a>\n<a href=\"https://img.shields.io/github/tag/cjrh/excitertools.svg\" rel=\"nofollow\"><img alt=\"https://img.shields.io/github/tag/cjrh/excitertools.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/63b3a90254403b6b2deb5d505b29569d75936bfd/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f7461672f636a72682f65786369746572746f6f6c732e737667\"></a>\n<a href=\"https://img.shields.io/badge/install-pip%20install%20excitertools-ff69b4.svg\" rel=\"nofollow\"><img alt=\"https://img.shields.io/badge/install-pip%20install%20excitertools-ff69b4.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/89ae202b142e82238fd9d94abb0ac15957c4610a/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f696e7374616c6c2d706970253230696e7374616c6c25323065786369746572746f6f6c732d6666363962342e737667\"></a>\n<a href=\"https://img.shields.io/pypi/v/excitertools.svg\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/v/excitertools.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/879e2f7ef8b76e908b5fd5f8de5608289d56b3bf/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f65786369746572746f6f6c732e737667\"></a>\n<a href=\"http://calver.org/\" rel=\"nofollow\"><img alt=\"https://img.shields.io/badge/calver-YYYY.MM.MINOR-22bfda.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/957cdcd66ebe5225fea6bbf83a04bc66a232ab1c/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f63616c7665722d595959592e4d4d2e4d494e4f522d3232626664612e737667\"></a>\n<a href=\"https://github.com/ambv/black\" rel=\"nofollow\"><img alt=\"https://img.shields.io/badge/code%20style-black-000000.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fbfdc7754183ecf079bc71ddeabaf88f6cbc5c00/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64652532307374796c652d626c61636b2d3030303030302e737667\"></a>\n<div id=\"id1\">\n<span id=\"excitertools\"></span><h2><a href=\"#id7\" rel=\"nofollow\">excitertools</a></h2>\n<p>itertools in the form of function call chaining</p>\n<div id=\"contents\">\n<p>Contents</p>\n<ul>\n<li><a href=\"#id1\" id=\"id7\" rel=\"nofollow\">excitertools</a></li>\n<li><a href=\"#api-documentation\" id=\"id8\" rel=\"nofollow\">API Documentation</a></li>\n<li><a href=\"#dev-instructions\" id=\"id9\" rel=\"nofollow\">Dev Instructions</a></li>\n</ul>\n</div>\n<div id=\"related-projects\">\n<h3>Related projects</h3>\n<ul>\n<li>My fork of a now-missing library: <a href=\"https://github.com/cjrh/chained-iterable\" rel=\"nofollow\">chained-iterable</a>.</li>\n<li><a href=\"https://github.com/olirice/flupy\" rel=\"nofollow\">https://github.com/olirice/flupy</a></li>\n<li><a href=\"https://github.com/ddstte/chiter\" rel=\"nofollow\">https://github.com/ddstte/chiter</a></li>\n<li><a href=\"https://github.com/neverendingqs/pyiterable\" rel=\"nofollow\">https://github.com/neverendingqs/pyiterable</a></li>\n<li><a href=\"https://github.com/alliefitter/iterable_collections\" rel=\"nofollow\">https://github.com/alliefitter/iterable_collections</a></li>\n<li><a href=\"https://github.com/halprin/iterator-chain\" rel=\"nofollow\">https://github.com/halprin/iterator-chain</a></li>\n<li><a href=\"https://github.com/jagill/python-chainz\" rel=\"nofollow\">https://github.com/jagill/python-chainz</a></li>\n<li><a href=\"https://github.com/ZianVW/IterPipe\" rel=\"nofollow\">https://github.com/ZianVW/IterPipe</a></li>\n<li><a href=\"https://github.com/Evelyn-H/iterchain\" rel=\"nofollow\">https://github.com/Evelyn-H/iterchain</a></li>\n<li><a href=\"https://github.com/EntilZha/PyFunctional\" rel=\"nofollow\">https://github.com/EntilZha/PyFunctional</a></li>\n</ul>\n<p>Tangentially related:</p>\n<ul>\n<li><a href=\"https://github.com/jreese/aioitertools\" rel=\"nofollow\">https://github.com/jreese/aioitertools</a></li>\n</ul>\n</div>\n</div>\n<div id=\"api-documentation\">\n<h2><a href=\"#id8\" rel=\"nofollow\">API Documentation</a></h2>\n<p>Several emoji are used to indicate things about parts of the API:</p>\n<ul>\n<li>\ud83c\udfa4 This API method is a <em>source</em>, meaning that it produces data\nthat will be processed in an iterator chain.</li>\n<li>\ud83c\udfa7 This API method is a <em>sink</em>, meaning that it consumes data that\nwas processed in an iterator chain.</li>\n<li>\u26a0 Warning - pay attention</li>\n<li>\ud83d\udee0 This API is still in flux, and might be changed or\nremoved in the future</li>\n<li>\u2728 Noteworthy; could be especially useful in many situations.</li>\n</ul>\n<p>The API is arranged roughly with the module-level functions first, and\nthereafter the <a href=\"#iter\" rel=\"nofollow\">Iter</a> class itself. It is the <a href=\"#iter\" rel=\"nofollow\">Iter</a> class that does\nthe work to allow these iterators to be chained together. However, the\nmodule-level functions are more likely to be used directly and that\u2019s\nwhy they\u2019re presented first.</p>\n<p>The API includes wrappers for the stdlib <em>itertools</em> module, including\nthe \u201crecipes\u201d given in the <em>itertools</em> docs, as well as wrappers for\nthe iterators from the <a href=\"https://more-itertools.readthedocs.io/en/stable/index.html\" rel=\"nofollow\">more-itertools</a> 3rd-party package.</p>\n<div id=\"id2\">\n<ul>\n<li><a href=\"#source-range-args-iter-int\" id=\"id10\" rel=\"nofollow\">\ud83c\udfa4 <tt><span class=\"pre\">range(*args)</span> <span class=\"pre\">-&gt;</span> \"Iter[int]\"</tt></a></li>\n<li><a href=\"#zip-iterables-any-iter-tuple-t\" id=\"id11\" rel=\"nofollow\"><tt><span class=\"pre\">zip(*iterables:</span> Any) <span class=\"pre\">-&gt;</span> \"Iter[Tuple[T, <span class=\"pre\">...]]\"</span></tt></a></li>\n<li><a href=\"#enumerate-iterable-iter-tuple-int-t\" id=\"id12\" rel=\"nofollow\"><tt>enumerate(iterable) <span class=\"pre\">-&gt;</span> \"Iter[Tuple[int, <span class=\"pre\">T]]\"</span></tt></a></li>\n<li><a href=\"#map-func-union-callable-c-str-iterable-iter-c\" id=\"id13\" rel=\"nofollow\"><tt>map(func: <span class=\"pre\">Union[Callable[...,</span> C], str], iterable) <span class=\"pre\">-&gt;</span> \"Iter[C]\"</tt></a></li>\n<li><a href=\"#filter-function-callable-any-iterable-iterable-iter-t\" id=\"id14\" rel=\"nofollow\"><tt>filter(function: <span class=\"pre\">\"Callable[[Any],</span> <span class=\"pre\">...]\",</span> iterable: Iterable) <span class=\"pre\">-&gt;</span> \"Iter[T]\"</tt></a></li>\n<li><a href=\"#source-count-start-step-int-1-iter-int\" id=\"id15\" rel=\"nofollow\">\ud83c\udfa4 <tt>count(start, step: int = 1) <span class=\"pre\">-&gt;</span> \"Iter[int]\"</tt></a></li>\n<li><a href=\"#cycle-iterable-iter-t\" id=\"id16\" rel=\"nofollow\"><tt>cycle(iterable) <span class=\"pre\">-&gt;</span> \"Iter[T]\"</tt></a></li>\n<li><a href=\"#source-repeat-object-c-times-none-iter-c\" id=\"id17\" rel=\"nofollow\">\ud83c\udfa4 <tt>repeat(object: C, times=None) <span class=\"pre\">-&gt;</span> \"Iter[C]\"</tt></a></li>\n<li><a href=\"#accumulate-iterable-func-none-initial-none\" id=\"id18\" rel=\"nofollow\"><tt>accumulate(iterable, func=None, *, initial=None)</tt></a></li>\n<li><a href=\"#chain-iterables-iterable-t-iter-t\" id=\"id19\" rel=\"nofollow\"><tt><span class=\"pre\">chain(*iterables:</span> Iterable[T]) <span class=\"pre\">-&gt;</span> \"Iter[T]\"</tt></a></li>\n<li><a href=\"#chain-from-iterable-iterable-iter-t\" id=\"id20\" rel=\"nofollow\"><tt>chain_from_iterable(iterable) <span class=\"pre\">-&gt;</span> \"Iter[T]\"</tt></a></li>\n<li><a href=\"#compress-data-selectors\" id=\"id21\" rel=\"nofollow\"><tt>compress(data, selectors)</tt></a></li>\n<li><a href=\"#dropwhile-pred-iterable\" id=\"id22\" rel=\"nofollow\"><tt>dropwhile(pred, iterable)</tt></a></li>\n<li><a href=\"#filterfalse-pred-iterable\" id=\"id23\" rel=\"nofollow\"><tt>filterfalse(pred, iterable)</tt></a></li>\n<li><a href=\"#groupby-iterable-key-none\" id=\"id24\" rel=\"nofollow\"><tt>groupby(iterable, key=None)</tt></a></li>\n<li><a href=\"#islice-iterable-args-iter\" id=\"id25\" rel=\"nofollow\"><tt>islice(iterable, *args) <span class=\"pre\">-&gt;</span> \"Iter\"</tt></a></li>\n<li><a href=\"#starmap-func-iterable\" id=\"id26\" rel=\"nofollow\"><tt>starmap(func, iterable)</tt></a></li>\n<li><a href=\"#takewhile-pred-iterable\" id=\"id27\" rel=\"nofollow\"><tt>takewhile(pred, iterable)</tt></a></li>\n<li><a href=\"#tee-iterable-n-2\" id=\"id28\" rel=\"nofollow\"><tt>tee(iterable, n=2)</tt></a></li>\n<li><a href=\"#zip-longest-iterables-fillvalue-none\" id=\"id29\" rel=\"nofollow\"><tt><span class=\"pre\">zip_longest(*iterables,</span> fillvalue=None)</tt></a></li>\n<li><a href=\"#cool-class-iter-generic-t\" id=\"id30\" rel=\"nofollow\">\u2728 <tt>class Iter(Generic[T])</tt></a><ul>\n<li><a href=\"#sink-iter-collect-self-container-list-list-t\" id=\"id31\" rel=\"nofollow\">\ud83c\udfa7 <tt>Iter.collect(self, container=list) <span class=\"pre\">-&gt;</span> \"List[T]\"</tt></a></li>\n<li><a href=\"#cool-source-classmethod-iter-open-cls-file-mode-r-buffering-1-encoding-none-errors-none-newline-none-closefd-true-opener-none-iter\" id=\"id32\" rel=\"nofollow\">\u2728 \ud83c\udfa4 <tt>@classmethod Iter.open(cls, file, <span class=\"pre\">mode=\"r\",</span> <span class=\"pre\">buffering=-1,</span> encoding=None, errors=None, newline=None, closefd=True, opener=None, ) <span class=\"pre\">-&gt;</span> \"Iter\"</tt></a></li>\n<li><a href=\"#source-classmethod-iter-range-cls-args-iter-int\" id=\"id33\" rel=\"nofollow\">\ud83c\udfa4 <tt>@classmethod Iter.range(cls, *args) <span class=\"pre\">-&gt;</span> \"Iter[int]\"</tt></a></li>\n<li><a href=\"#iter-zip-self-iterables-any-iter-tuple-t\" id=\"id34\" rel=\"nofollow\"><tt>Iter.zip(self, *iterables: Any) <span class=\"pre\">-&gt;</span> \"Iter[Tuple[T, <span class=\"pre\">...]]\"</span></tt></a></li>\n<li><a href=\"#sink-iter-any-self-bool\" id=\"id35\" rel=\"nofollow\">\ud83c\udfa7 <tt>Iter.any(self) <span class=\"pre\">-&gt;</span> \"bool\"</tt></a></li>\n<li><a href=\"#sink-iter-all-self-bool\" id=\"id36\" rel=\"nofollow\">\ud83c\udfa7 <tt>Iter.all(self) <span class=\"pre\">-&gt;</span> \"bool\"</tt></a></li>\n<li><a href=\"#iter-enumerate-self-iter-tuple-int-t\" id=\"id37\" rel=\"nofollow\"><tt>Iter.enumerate(self) <span class=\"pre\">-&gt;</span> \"Iter[Tuple[int, <span class=\"pre\">T]]\"</span></tt></a></li>\n<li><a href=\"#iter-dict-self-dict\" id=\"id38\" rel=\"nofollow\"><tt>Iter.dict(self) <span class=\"pre\">-&gt;</span> \"Dict\"</tt></a></li>\n<li><a href=\"#iter-map-self-func-union-callable-c-str-iter-c\" id=\"id39\" rel=\"nofollow\"><tt>Iter.map(self, func: <span class=\"pre\">Union[Callable[...,</span> C], str]) <span class=\"pre\">-&gt;</span> \"Iter[C]\"</tt></a></li>\n<li><a href=\"#iter-filter-self-args-iter-t\" id=\"id40\" rel=\"nofollow\"><tt>Iter.filter(self, *args) <span class=\"pre\">-&gt;</span> \"Iter[T]\"</tt></a></li>\n<li><a href=\"#iter-reduce-self-func-callable-t-args-t\" id=\"id41\" rel=\"nofollow\"><tt>Iter.reduce(self, func: <span class=\"pre\">Callable[...,</span> T], *args) <span class=\"pre\">-&gt;</span> \"T\"</tt></a></li>\n<li><a href=\"#sink-iter-sum-self\" id=\"id42\" rel=\"nofollow\">\ud83c\udfa7 <tt>Iter.sum(self)</tt></a></li>\n<li><a href=\"#sink-iter-concat-self-glue-anystr-anystr\" id=\"id43\" rel=\"nofollow\">\ud83c\udfa7 <tt>Iter.concat(self, glue: AnyStr) <span class=\"pre\">-&gt;</span> \"AnyStr\"</tt></a></li>\n<li><a href=\"#iter-insert-self-glue-c-iter-union-c-t\" id=\"id44\" rel=\"nofollow\"><tt>Iter.insert(self, glue: C) <span class=\"pre\">-&gt;</span> \"Iter[Union[C, <span class=\"pre\">T]]\"</span></tt></a></li>\n<li><a href=\"#source-classmethod-iter-count-cls-args-iter-int\" id=\"id45\" rel=\"nofollow\">\ud83c\udfa4 <tt>@classmethod Iter.count(cls, *args) <span class=\"pre\">-&gt;</span> \"Iter[int]\"</tt></a></li>\n<li><a href=\"#iter-cycle-self-iter-t\" id=\"id46\" rel=\"nofollow\"><tt>Iter.cycle(self) <span class=\"pre\">-&gt;</span> \"Iter[T]\"</tt></a></li>\n<li><a href=\"#source-classmethod-iter-repeat-cls-elem-c-times-none-iter-c\" id=\"id47\" rel=\"nofollow\">\ud83c\udfa4 <tt>@classmethod Iter.repeat(cls, elem: C, times=None) <span class=\"pre\">-&gt;</span> \"Iter[C]\"</tt></a></li>\n<li><a href=\"#iter-accumulate-self-func-none-initial-none\" id=\"id48\" rel=\"nofollow\"><tt>Iter.accumulate(self, func=None, *, initial=None)</tt></a></li>\n<li><a href=\"#iter-chain-self-iterables-iterable-t-iter-t\" id=\"id49\" rel=\"nofollow\"><tt>Iter.chain(self, *iterables: Iterable[T]) <span class=\"pre\">-&gt;</span> \"Iter[T]\"</tt></a></li>\n<li><a href=\"#iter-chain-from-iterable-self-iter-t\" id=\"id50\" rel=\"nofollow\"><tt>Iter.chain_from_iterable(self) <span class=\"pre\">-&gt;</span> \"Iter[T]\"</tt></a></li>\n<li><a href=\"#iter-compress-self-selectors\" id=\"id51\" rel=\"nofollow\"><tt>Iter.compress(self, selectors)</tt></a></li>\n<li><a href=\"#iter-dropwhile-self-pred\" id=\"id52\" rel=\"nofollow\"><tt>Iter.dropwhile(self, pred)</tt></a></li>\n<li><a href=\"#iter-filterfalse-self-pred\" id=\"id53\" rel=\"nofollow\"><tt>Iter.filterfalse(self, pred)</tt></a></li>\n<li><a href=\"#iter-groupby-self-key-none\" id=\"id54\" rel=\"nofollow\"><tt>Iter.groupby(self, key=None)</tt></a></li>\n<li><a href=\"#iter-islice-self-args-iter\" id=\"id55\" rel=\"nofollow\"><tt>Iter.islice(self, *args) <span class=\"pre\">-&gt;</span> \"Iter\"</tt></a></li>\n<li><a href=\"#iter-starmap-self-func\" id=\"id56\" rel=\"nofollow\"><tt>Iter.starmap(self, func)</tt></a></li>\n<li><a href=\"#iter-takewhile-self-pred\" id=\"id57\" rel=\"nofollow\"><tt>Iter.takewhile(self, pred)</tt></a></li>\n<li><a href=\"#iter-tee-self-n-2\" id=\"id58\" rel=\"nofollow\"><tt>Iter.tee(self, n=2)</tt></a></li>\n<li><a href=\"#iter-zip-longest-self-iterables-fillvalue-none\" id=\"id59\" rel=\"nofollow\"><tt>Iter.zip_longest(self, *iterables, fillvalue=None)</tt></a></li>\n<li><a href=\"#iter-chunked-self-n-int-iter\" id=\"id60\" rel=\"nofollow\"><tt>Iter.chunked(self, n: int) <span class=\"pre\">-&gt;</span> \"Iter\"</tt></a></li>\n<li><a href=\"#iter-ichunked-self-n-int-iter\" id=\"id61\" rel=\"nofollow\"><tt>Iter.ichunked(self, n: int) <span class=\"pre\">-&gt;</span> \"Iter\"</tt></a></li>\n<li><a href=\"#classmethod-iter-sliced-cls-seq-sequence-n-int-iter\" id=\"id62\" rel=\"nofollow\"><tt>@classmethod Iter.sliced(cls, seq: Sequence, n: int) <span class=\"pre\">-&gt;</span> \"Iter\"</tt></a></li>\n<li><a href=\"#iter-distribute-self-n-int-iter\" id=\"id63\" rel=\"nofollow\"><tt>Iter.distribute(self, n: int) <span class=\"pre\">-&gt;</span> \"Iter\"</tt></a></li>\n<li><a href=\"#iter-divide-self-n-int-iter\" id=\"id64\" rel=\"nofollow\"><tt>Iter.divide(self, n: int) <span class=\"pre\">-&gt;</span> \"Iter\"</tt></a></li>\n<li><a href=\"#iter-split-at-self-pred\" id=\"id65\" rel=\"nofollow\"><tt>Iter.split_at(self, pred)</tt></a></li>\n<li><a href=\"#iter-split-before-self-pred\" id=\"id66\" rel=\"nofollow\"><tt>Iter.split_before(self, pred)</tt></a></li>\n<li><a href=\"#iter-split-after-self-pred\" id=\"id67\" rel=\"nofollow\"><tt>Iter.split_after(self, pred)</tt></a></li>\n<li><a href=\"#iter-split-into-self-sizes\" id=\"id68\" rel=\"nofollow\"><tt>Iter.split_into(self, sizes)</tt></a></li>\n<li><a href=\"#iter-split-when-self-pred\" id=\"id69\" rel=\"nofollow\"><tt>Iter.split_when(self, pred)</tt></a></li>\n<li><a href=\"#iter-bucket-self-key-validator-none\" id=\"id70\" rel=\"nofollow\"><tt>Iter.bucket(self, key, validator=None)</tt></a></li>\n<li><a href=\"#iter-unzip-self\" id=\"id71\" rel=\"nofollow\"><tt>Iter.unzip(self)</tt></a></li>\n<li><a href=\"#iter-grouper-self-n-int-fillvalue-none-iter\" id=\"id72\" rel=\"nofollow\"><tt>Iter.grouper(self, n: int, fillvalue=None) <span class=\"pre\">-&gt;</span> \"Iter\"</tt></a></li>\n<li><a href=\"#iter-partition-self-pred-iter\" id=\"id73\" rel=\"nofollow\"><tt>Iter.partition(self, pred) <span class=\"pre\">-&gt;</span> \"Iter\"</tt></a></li>\n<li><a href=\"#iter-spy-self-n-1-tuple-iter-iter\" id=\"id74\" rel=\"nofollow\"><tt>Iter.spy(self, n=1) <span class=\"pre\">-&gt;</span> \"Tuple[Iter, Iter]\"</tt></a></li>\n<li><a href=\"#iter-peekable-self-more-itertools-peekable\" id=\"id75\" rel=\"nofollow\"><tt>Iter.peekable(self) <span class=\"pre\">-&gt;</span> \"more_itertools.peekable\"</tt></a></li>\n<li><a href=\"#iter-seekable-self-more-itertools-seekable\" id=\"id76\" rel=\"nofollow\"><tt>Iter.seekable(self) <span class=\"pre\">-&gt;</span> \"more_itertools.seekable\"</tt></a></li>\n<li><a href=\"#iter-windowed-self-n-fillvalue-none-step-1-iter\" id=\"id77\" rel=\"nofollow\"><tt>Iter.windowed(self, n, fillvalue=None, step=1) <span class=\"pre\">-&gt;</span> \"Iter\"</tt></a></li>\n<li><a href=\"#iter-substrings-self\" id=\"id78\" rel=\"nofollow\"><tt>Iter.substrings(self)</tt></a></li>\n<li><a href=\"#iter-substrings-indexes-self-reverse-false\" id=\"id79\" rel=\"nofollow\"><tt>Iter.substrings_indexes(self, reverse=False)</tt></a></li>\n<li><a href=\"#iter-stagger-self-offsets-1-0-1-longest-false-fillvalue-none\" id=\"id80\" rel=\"nofollow\"><tt>Iter.stagger(self, <span class=\"pre\">offsets=(-1,</span> 0, 1), longest=False, fillvalue=None)</tt></a></li>\n<li><a href=\"#iter-pairwise-self\" id=\"id81\" rel=\"nofollow\"><tt>Iter.pairwise(self)</tt></a></li>\n<li><a href=\"#iter-count-cycle-self-n-none-iter\" id=\"id82\" rel=\"nofollow\"><tt>Iter.count_cycle(self, n=None) <span class=\"pre\">-&gt;</span> \"Iter\"</tt></a></li>\n<li><a href=\"#iter-intersperse-self-e-n-1-iter\" id=\"id83\" rel=\"nofollow\"><tt>Iter.intersperse(self, e, n=1) <span class=\"pre\">-&gt;</span> \"Iter\"</tt></a></li>\n<li><a href=\"#iter-padded-self-fillvalue-optional-c-none-n-optional-int-none-next-multiple-bool-false-iter-union-t-c\" id=\"id84\" rel=\"nofollow\"><tt>Iter.padded(self, fillvalue: Optional[C] = None, n: Optional[int] = None, next_multiple: bool = False, ) <span class=\"pre\">-&gt;</span> \"Iter[Union[T, <span class=\"pre\">C]]\"</span></tt></a></li>\n<li><a href=\"#iter-repeat-last-self-default-none-iter-t\" id=\"id85\" rel=\"nofollow\"><tt>Iter.repeat_last(self, default=None) <span class=\"pre\">-&gt;</span> \"Iter[T]\"</tt></a></li>\n<li><a href=\"#iter-adjacent-self-pred-distance-1-iter-tuple-bool-t\" id=\"id86\" rel=\"nofollow\"><tt>Iter.adjacent(self, pred, distance=1) <span class=\"pre\">-&gt;</span> \"Iter[Tuple[bool, <span class=\"pre\">T]]\"</span></tt></a></li>\n<li><a href=\"#iter-groupby-transform-self-keyfunc-optional-callable-k-none-valuefunc-optional-callable-v-none-iter-tuple-k-iterable-v\" id=\"id87\" rel=\"nofollow\"><tt>Iter.groupby_transform(self, keyfunc: <span class=\"pre\">Optional[Callable[...,</span> K]] = None, valuefunc: <span class=\"pre\">Optional[Callable[...,</span> V]] = None, ) <span class=\"pre\">-&gt;</span> \"Iter[Tuple[K, <span class=\"pre\">Iterable[V]]]\"</span></tt></a></li>\n<li><a href=\"#iter-padnone-self-iter-union-t-none\" id=\"id88\" rel=\"nofollow\"><tt>Iter.padnone(self) <span class=\"pre\">-&gt;</span> \"Iter[Union[T, <span class=\"pre\">None]]\"</span></tt></a></li>\n<li><a href=\"#iter-ncycles-self-n-iter-t\" id=\"id89\" rel=\"nofollow\"><tt>Iter.ncycles(self, n) <span class=\"pre\">-&gt;</span> \"Iter[T]\"</tt></a></li>\n<li><a href=\"#iter-collapse-self-base-type-none-levels-none-iter\" id=\"id90\" rel=\"nofollow\"><tt>Iter.collapse(self, base_type=None, levels=None) <span class=\"pre\">-&gt;</span> \"Iter\"</tt></a></li>\n<li><a href=\"#class-or-instancemethod-iter-sort-together-self-or-cls-iterables-key-list-0-reverse-false\" id=\"id91\" rel=\"nofollow\"><tt>@class_or_instancemethod Iter.sort_together(self_or_cls, iterables, <span class=\"pre\">key_list=(0,),</span> reverse=False)</tt></a></li>\n<li><a href=\"#class-or-instancemethod-iter-interleave-self-or-cls-iterables-iter\" id=\"id92\" rel=\"nofollow\"><tt>@class_or_instancemethod Iter.interleave(self_or_cls, *iterables) <span class=\"pre\">-&gt;</span> \"Iter\"</tt></a></li>\n<li><a href=\"#class-or-instancemethod-iter-interleave-longest-self-or-cls-iterables-iter\" id=\"id93\" rel=\"nofollow\"><tt>@class_or_instancemethod Iter.interleave_longest(self_or_cls, *iterables) <span class=\"pre\">-&gt;</span> \"Iter\"</tt></a></li>\n<li><a href=\"#classmethod-iter-zip-offset-cls-iterables-offsets-longest-false-fillvalue-none-iter\" id=\"id94\" rel=\"nofollow\"><tt>@classmethod Iter.zip_offset(cls, *iterables, offsets, longest=False, fillvalue=None) <span class=\"pre\">-&gt;</span> \"Iter\"</tt></a></li>\n<li><a href=\"#iter-dotproduct-self-vec2-iterable\" id=\"id95\" rel=\"nofollow\"><tt>Iter.dotproduct(self, vec2: Iterable)</tt></a></li>\n<li><a href=\"#iter-flatten-self-iter-t\" id=\"id96\" rel=\"nofollow\"><tt>Iter.flatten(self) <span class=\"pre\">-&gt;</span> \"Iter[T]\"</tt></a></li>\n<li><a href=\"#class-or-instancemethod-iter-roundrobin-self-or-cls-union-type-t-t-iterables-c-iter-union-t-c\" id=\"id97\" rel=\"nofollow\"><tt>@class_or_instancemethod Iter.roundrobin(self_or_cls: Union[Type[T], T], *iterables: C) <span class=\"pre\">-&gt;</span> \"Iter[Union[T, <span class=\"pre\">C]]\"</span></tt></a></li>\n<li><a href=\"#iter-prepend-self-value-c-iter-union-t-c\" id=\"id98\" rel=\"nofollow\"><tt>Iter.prepend(self, value: C) <span class=\"pre\">-&gt;</span> \"Iter[Union[T, <span class=\"pre\">C]]\"</span></tt></a></li>\n<li><a href=\"#sink-iter-ilen-self-int\" id=\"id99\" rel=\"nofollow\">\ud83c\udfa7 <tt>Iter.ilen(self) <span class=\"pre\">-&gt;</span> \"int\"</tt></a></li>\n<li><a href=\"#iter-unique-to-each-self-iter-t\" id=\"id100\" rel=\"nofollow\"><tt>Iter.unique_to_each(self) <span class=\"pre\">-&gt;</span> \"Iter[T]\"</tt></a></li>\n<li><a href=\"#iter-sample-self-k-1-weights-none-iter\" id=\"id101\" rel=\"nofollow\"><tt>Iter.sample(self, k=1, weights=None) <span class=\"pre\">-&gt;</span> \"Iter\"</tt></a></li>\n<li><a href=\"#iter-consecutive-groups-self-ordering-lambda-x-x\" id=\"id102\" rel=\"nofollow\"><tt>Iter.consecutive_groups(self, ordering=lambda x: x)</tt></a></li>\n<li><a href=\"#iter-run-length-encode-self-iter-tuple-t-int\" id=\"id103\" rel=\"nofollow\"><tt>Iter.run_length_encode(self) <span class=\"pre\">-&gt;</span> \"Iter[Tuple[T, <span class=\"pre\">int]]\"</span></tt></a></li>\n<li><a href=\"#iter-run-length-decode-self-iter\" id=\"id104\" rel=\"nofollow\"><tt>Iter.run_length_decode(self) <span class=\"pre\">-&gt;</span> \"Iter\"</tt></a></li>\n<li><a href=\"#iter-map-reduce-self-keyfunc-valuefunc-none-reducefunc-none-dict\" id=\"id105\" rel=\"nofollow\"><tt>Iter.map_reduce(self, keyfunc, valuefunc=None, reducefunc=None) <span class=\"pre\">-&gt;</span> \"Dict\"</tt></a></li>\n<li><a href=\"#iter-map-reduce-it-self-keyfunc-callable-k-valuefunc-optional-callable-v-none-reducefunc-optional-callable-r-none-iter-tuple-k-r\" id=\"id106\" rel=\"nofollow\"><tt>Iter.map_reduce_it(self, keyfunc: <span class=\"pre\">Callable[...,</span> K], valuefunc: <span class=\"pre\">Optional[Callable[...,</span> V]] = None, reducefunc: <span class=\"pre\">Optional[Callable[...,</span> R]] = None, ) <span class=\"pre\">-&gt;</span> \"Iter[Tuple[K, <span class=\"pre\">R]]\"</span></tt></a></li>\n<li><a href=\"#sink-iter-exactly-n-self-n-predicate-bool-bool\" id=\"id107\" rel=\"nofollow\">\ud83c\udfa7 <tt>Iter.exactly_n(self, n, predicate=bool) <span class=\"pre\">-&gt;</span> \"bool\"</tt></a></li>\n<li><a href=\"#iter-all-equal-self\" id=\"id108\" rel=\"nofollow\"><tt>Iter.all_equal(self)</tt></a></li>\n<li><a href=\"#iter-first-true-self\" id=\"id109\" rel=\"nofollow\"><tt>Iter.first_true(self)</tt></a></li>\n<li><a href=\"#iter-quantify-self\" id=\"id110\" rel=\"nofollow\"><tt>Iter.quantify(self)</tt></a></li>\n<li><a href=\"#iter-islice-extended-self-args\" id=\"id111\" rel=\"nofollow\"><tt>Iter.islice_extended(self, *args)</tt></a></li>\n<li><a href=\"#iter-first-self\" id=\"id112\" rel=\"nofollow\"><tt>Iter.first(self)</tt></a></li>\n<li><a href=\"#iter-last-self\" id=\"id113\" rel=\"nofollow\"><tt>Iter.last(self)</tt></a></li>\n<li><a href=\"#iter-one-self\" id=\"id114\" rel=\"nofollow\"><tt>Iter.one(self)</tt></a></li>\n<li><a href=\"#iter-only-self-default-none-too-long-valueerror-t\" id=\"id115\" rel=\"nofollow\"><tt>Iter.only(self, default=None, too_long=ValueError) <span class=\"pre\">-&gt;</span> \"T\"</tt></a></li>\n<li><a href=\"#iter-strip-self-pred-iter-t\" id=\"id116\" rel=\"nofollow\"><tt>Iter.strip(self, pred) <span class=\"pre\">-&gt;</span> \"Iter[T]\"</tt></a></li>\n<li><a href=\"#iter-lstrip-self-pred-iter-t\" id=\"id117\" rel=\"nofollow\"><tt>Iter.lstrip(self, pred) <span class=\"pre\">-&gt;</span> \"Iter[T]\"</tt></a></li>\n<li><a href=\"#iter-rstrip-self-pred-iter-t\" id=\"id118\" rel=\"nofollow\"><tt>Iter.rstrip(self, pred) <span class=\"pre\">-&gt;</span> \"Iter[T]\"</tt></a></li>\n<li><a href=\"#iter-filter-except-self-validator-exceptions-iter-t\" id=\"id119\" rel=\"nofollow\"><tt>Iter.filter_except(self, validator, *exceptions) <span class=\"pre\">-&gt;</span> \"Iter[T]\"</tt></a></li>\n<li><a href=\"#iter-map-except-self-function-exceptions-iter\" id=\"id120\" rel=\"nofollow\"><tt>Iter.map_except(self, function, *exceptions) <span class=\"pre\">-&gt;</span> \"Iter\"</tt></a></li>\n<li><a href=\"#iter-nth-or-last-self-n-default-marker-t\" id=\"id121\" rel=\"nofollow\"><tt>Iter.nth_or_last(self, n, default=_marker) <span class=\"pre\">-&gt;</span> \"T\"</tt></a></li>\n<li><a href=\"#iter-nth-self-n-default-none\" id=\"id122\" rel=\"nofollow\"><tt>Iter.nth(self, n, default=None)</tt></a></li>\n<li><a href=\"#iter-take-self-n-int-iter\" id=\"id123\" rel=\"nofollow\"><tt>Iter.take(self, n: int) <span class=\"pre\">-&gt;</span> \"Iter\"</tt></a></li>\n<li><a href=\"#iter-tail-self\" id=\"id124\" rel=\"nofollow\"><tt>Iter.tail(self)</tt></a></li>\n<li><a href=\"#iter-unique-everseen-self\" id=\"id125\" rel=\"nofollow\"><tt>Iter.unique_everseen(self)</tt></a></li>\n<li><a href=\"#iter-unique-justseen-self\" id=\"id126\" rel=\"nofollow\"><tt>Iter.unique_justseen(self)</tt></a></li>\n<li><a href=\"#iter-distinct-permutations-self\" id=\"id127\" rel=\"nofollow\"><tt>Iter.distinct_permutations(self)</tt></a></li>\n<li><a href=\"#iter-distinct-combinations-self-r\" id=\"id128\" rel=\"nofollow\"><tt>Iter.distinct_combinations(self, r)</tt></a></li>\n<li><a href=\"#iter-circular-shifts-self-iter\" id=\"id129\" rel=\"nofollow\"><tt>Iter.circular_shifts(self) <span class=\"pre\">-&gt;</span> \"Iter\"</tt></a></li>\n<li><a href=\"#iter-partitions-self-iter\" id=\"id130\" rel=\"nofollow\"><tt>Iter.partitions(self) <span class=\"pre\">-&gt;</span> \"Iter\"</tt></a></li>\n<li><a href=\"#iter-set-partitions-self-k-none-iter\" id=\"id131\" rel=\"nofollow\"><tt>Iter.set_partitions(self, k=None) <span class=\"pre\">-&gt;</span> \"Iter\"</tt></a></li>\n<li><a href=\"#iter-powerset-self\" id=\"id132\" rel=\"nofollow\"><tt>Iter.powerset(self)</tt></a></li>\n<li><a href=\"#iter-random-product-self\" id=\"id133\" rel=\"nofollow\"><tt>Iter.random_product(self)</tt></a></li>\n<li><a href=\"#iter-random-permutation-self\" id=\"id134\" rel=\"nofollow\"><tt>Iter.random_permutation(self)</tt></a></li>\n<li><a href=\"#iter-random-combination-self\" id=\"id135\" rel=\"nofollow\"><tt>Iter.random_combination(self)</tt></a></li>\n<li><a href=\"#iter-random-combination-with-replacement-self\" id=\"id136\" rel=\"nofollow\"><tt>Iter.random_combination_with_replacement(self)</tt></a></li>\n<li><a href=\"#iter-nth-combination-self\" id=\"id137\" rel=\"nofollow\"><tt>Iter.nth_combination(self)</tt></a></li>\n<li><a href=\"#iter-always-iterable-self\" id=\"id138\" rel=\"nofollow\"><tt>Iter.always_iterable(self)</tt></a></li>\n<li><a href=\"#iter-always-reversible-self\" id=\"id139\" rel=\"nofollow\"><tt>Iter.always_reversible(self)</tt></a></li>\n<li><a href=\"#classmethod-iter-with-iter-cls-context-manager\" id=\"id140\" rel=\"nofollow\"><tt>@classmethod Iter.with_iter(cls, context_manager)</tt></a></li>\n<li><a href=\"#classmethod-iter-iter-except-cls-func-exception-first-none-iter\" id=\"id141\" rel=\"nofollow\"><tt>@classmethod Iter.iter_except(cls, func, exception, first=None) <span class=\"pre\">-&gt;</span> \"Iter\"</tt></a></li>\n<li><a href=\"#iter-locate-self-pred-bool-window-size-none-iter\" id=\"id142\" rel=\"nofollow\"><tt>Iter.locate(self, pred=bool, window_size=None) <span class=\"pre\">-&gt;</span> \"Iter\"</tt></a></li>\n<li><a href=\"#iter-rlocate-self-pred-bool-window-size-none-iter\" id=\"id143\" rel=\"nofollow\"><tt>Iter.rlocate(self, pred=bool, window_size=None) <span class=\"pre\">-&gt;</span> \"Iter\"</tt></a></li>\n<li><a href=\"#iter-replace-self-pred-substitutes-count-none-window-size-1-iter\" id=\"id144\" rel=\"nofollow\"><tt>Iter.replace(self, pred, substitutes, count=None, window_size=1) <span class=\"pre\">-&gt;</span> \"Iter\"</tt></a></li>\n<li><a href=\"#classmethod-iter-numeric-range-cls-args-iter\" id=\"id145\" rel=\"nofollow\"><tt>@classmethod Iter.numeric_range(cls, *args) <span class=\"pre\">-&gt;</span> \"Iter\"</tt></a></li>\n<li><a href=\"#iter-side-effect-self-func-chunk-size-none-before-none-after-none\" id=\"id146\" rel=\"nofollow\"><tt>Iter.side_effect(self, func, chunk_size=None, before=None, after=None)</tt></a></li>\n<li><a href=\"#iter-iterate-self\" id=\"id147\" rel=\"nofollow\"><tt>Iter.iterate(self)</tt></a></li>\n<li><a href=\"#iter-difference-self-func-operator-sub-initial-none\" id=\"id148\" rel=\"nofollow\"><tt>Iter.difference(self, func=operator.sub, *, initial=None)</tt></a></li>\n<li><a href=\"#iter-make-decorator-self\" id=\"id149\" rel=\"nofollow\"><tt>Iter.make_decorator(self)</tt></a></li>\n<li><a href=\"#iter-sequenceview-self\" id=\"id150\" rel=\"nofollow\"><tt>Iter.SequenceView(self)</tt></a></li>\n<li><a href=\"#iter-time-limited-self-limit-seconds-iter\" id=\"id151\" rel=\"nofollow\"><tt>Iter.time_limited(self, limit_seconds) <span class=\"pre\">-&gt;</span> \"Iter\"</tt></a></li>\n<li><a href=\"#sink-iter-consume-self-n-optional-int-none-optional-iter-t\" id=\"id152\" rel=\"nofollow\">\ud83c\udfa7 <tt>Iter.consume(self, n: Optional[int] = None) <span class=\"pre\">-&gt;</span> <span class=\"pre\">\"Optional[Iter[T]]\"</span></tt></a></li>\n<li><a href=\"#iter-tabulate-self\" id=\"id153\" rel=\"nofollow\"><tt>Iter.tabulate(self)</tt></a></li>\n<li><a href=\"#source-classmethod-iter-repeatfunc-cls-func-args-times-none\" id=\"id154\" rel=\"nofollow\">\ud83c\udfa4 <tt>@classmethod Iter.repeatfunc(cls, func, *args, times=None)</tt></a></li>\n<li><a href=\"#iter-wrap-self-ends-sequence-t-t\" id=\"id155\" rel=\"nofollow\"><tt>Iter.wrap(self, ends: \"Sequence[T, T]\" = <span class=\"pre\">\"()\")</span></tt></a></li>\n<li><a href=\"#iter-print-self-template-i-v-iter-t\" id=\"id156\" rel=\"nofollow\"><tt>Iter.print(self, <span class=\"pre\">template=\"{i}:</span> <span class=\"pre\">{v}\")</span> <span class=\"pre\">-&gt;</span> \"Iter[T]\"</tt></a></li>\n<li><a href=\"#source-classmethod-iter-from-queue-cls-q-queue-queue-timeout-none-sentinel-none\" id=\"id157\" rel=\"nofollow\">\ud83c\udfa4 <tt>@classmethod Iter.from_queue(cls, q: queue.Queue, timeout=None, sentinel=None)</tt></a></li>\n<li><a href=\"#sink-iter-into-queue-self-q-queue-queue\" id=\"id158\" rel=\"nofollow\">\ud83c\udfa7 <tt>Iter.into_queue(self, q: queue.Queue)</tt></a></li>\n<li><a href=\"#sink-iter-send-self-collector-generator-close-collector-when-done-false-none\" id=\"id159\" rel=\"nofollow\">\ud83c\udfa7 <tt>Iter.send(self, collector: Generator, close_collector_when_done=False) <span class=\"pre\">-&gt;</span> \"None\"</tt></a></li>\n<li><a href=\"#iter-send-also-self-collector-generator-iter\" id=\"id160\" rel=\"nofollow\"><tt>Iter.send_also(self, collector: Generator) <span class=\"pre\">-&gt;</span> \"Iter\"</tt></a></li>\n</ul>\n</li>\n<li><a href=\"#flux-class-iterdict-userdict\" id=\"id161\" rel=\"nofollow\">\ud83d\udee0 <tt>class IterDict(UserDict)</tt></a><ul>\n<li><a href=\"#iterdict-keys-self-iter\" id=\"id162\" rel=\"nofollow\"><tt>IterDict.keys(self) <span class=\"pre\">-&gt;</span> \"Iter\"</tt></a></li>\n<li><a href=\"#iterdict-values-self-iter\" id=\"id163\" rel=\"nofollow\"><tt>IterDict.values(self) <span class=\"pre\">-&gt;</span> \"Iter\"</tt></a></li>\n<li><a href=\"#iterdict-items-self-iter\" id=\"id164\" rel=\"nofollow\"><tt>IterDict.items(self) <span class=\"pre\">-&gt;</span> \"Iter\"</tt></a></li>\n<li><a href=\"#iterdict-update-self-args-kwargs-iterdict\" id=\"id165\" rel=\"nofollow\"><tt>IterDict.update(self, *args, **kwargs) <span class=\"pre\">-&gt;</span> \"IterDict\"</tt></a></li>\n</ul>\n</li>\n<li><a href=\"#insert-separator-iterable-iterable-any-glue-any-iterable-any\" id=\"id166\" rel=\"nofollow\"><tt>insert_separator(iterable: Iterable[Any], glue: Any) <span class=\"pre\">-&gt;</span> \"Iterable[Any]\"</tt></a></li>\n<li><a href=\"#concat-iterable-iterable-anystr-glue-anystr-anystr\" id=\"id167\" rel=\"nofollow\"><tt>concat(iterable: Iterable[AnyStr], glue: AnyStr) <span class=\"pre\">-&gt;</span> \"AnyStr\"</tt></a></li>\n<li><a href=\"#source-from-queue-q-queue-queue-timeout-none-sentinel-none-iter\" id=\"id168\" rel=\"nofollow\">\ud83c\udfa4 <tt>from_queue(q: queue.Queue, timeout=None, sentinel=None) <span class=\"pre\">-&gt;</span> \"Iter\"</tt></a></li>\n</ul>\n</div>\n<hr class=\"docutils\">\n<p>The following module-level functions, like <a href=\"#range\" rel=\"nofollow\">range</a>, <a href=\"#zip\" rel=\"nofollow\">zip</a> and so on, are\nintended to be used as replacements for their homonymous builtins. The\nonly difference between these and the builtin versions is that these\nreturn instances of the <a href=\"#iter\" rel=\"nofollow\">Iter</a> class. Note that because <a href=\"#iter\" rel=\"nofollow\">Iter</a> is itself\niterable, it means that the functions here can be used as drop-in\nreplacements.</p>\n<div id=\"source-range-args-iter-int\">\n<span id=\"range\"></span><h3><a href=\"#id10\" rel=\"nofollow\">\ud83c\udfa4 <tt><span class=\"pre\">range(*args)</span> <span class=\"pre\">-&gt;</span> \"Iter[int]\"</tt></a></h3>\n<p>Replacement for the builtin <tt>range</tt> function.  This version returns\nan instance of <a href=\"#iter\" rel=\"nofollow\">Iter</a> to allow further iterable chaining.</p>\n<p>All the same calling variations work because this function merely wraps\nthe original function.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n<span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n<span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n<span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">101</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">%</span> <span class=\"mi\">7</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n<span class=\"p\">[</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">28</span><span class=\"p\">,</span> <span class=\"mi\">49</span><span class=\"p\">,</span> <span class=\"mi\">70</span><span class=\"p\">,</span> <span class=\"mi\">91</span><span class=\"p\">]</span>\n</pre>\n<p>This example multiples, element by element, the series [0:5] with the\nseries [1:6]. Two things to note: Firstly, <a href=\"#iter-zip\" rel=\"nofollow\">Iter.zip</a> is used to emit\nthe tuples from each series. Secondly, <a href=\"#iter-starmap\" rel=\"nofollow\">Iter.starmap</a> is used to receive\nthose tuples into separate arguments in the lambda.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">zip</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">starmap</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">*</span> <span class=\"n\">y</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n<span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">]</span>\n</pre>\n<p>When written in a single line as above, it can get difficult to follow\nthe chain of logic if there are many processing steps. Parentheses in\nPython allow grouping such that expressions can be spread over multiple\nlines.</p>\n<p>This is the same example as the prior one, but formatted to be spread\nover several lines. This is much clearer:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># Written out differently</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"p\">(</span>\n<span class=\"o\">...</span>     <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>         <span class=\"o\">.</span><span class=\"n\">zip</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">))</span>\n<span class=\"o\">...</span>         <span class=\"o\">.</span><span class=\"n\">starmap</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">*</span> <span class=\"n\">y</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>         <span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n<span class=\"o\">...</span> <span class=\"p\">)</span>\n<span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">]</span>\n</pre>\n<p>If you wanted the sum instead, it isn\u2019t necessary to do the collection\nat all:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"p\">(</span>\n<span class=\"o\">...</span>     <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>         <span class=\"o\">.</span><span class=\"n\">zip</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">))</span>\n<span class=\"o\">...</span>         <span class=\"o\">.</span><span class=\"n\">starmap</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">*</span> <span class=\"n\">y</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>         <span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">()</span>\n<span class=\"o\">...</span> <span class=\"p\">)</span>\n<span class=\"mi\">40</span>\n</pre>\n</div>\n<div id=\"zip-iterables-any-iter-tuple-t\">\n<span id=\"zip\"></span><h3><a href=\"#id11\" rel=\"nofollow\"><tt><span class=\"pre\">zip(*iterables:</span> Any) <span class=\"pre\">-&gt;</span> \"Iter[Tuple[T, <span class=\"pre\">...]]\"</span></tt></a></h3>\n<p>Replacement for the builtin <tt>zip</tt> function.  This version returns\nan instance of <a href=\"#iter\" rel=\"nofollow\">Iter</a> to allow further iterable chaining.</p>\n</div>\n<div id=\"enumerate-iterable-iter-tuple-int-t\">\n<span id=\"enumerate\"></span><h3><a href=\"#id12\" rel=\"nofollow\"><tt>enumerate(iterable) <span class=\"pre\">-&gt;</span> \"Iter[Tuple[int, <span class=\"pre\">T]]\"</span></tt></a></h3>\n<p>Replacement for the builtin <tt>enumerate</tt> function.  This version returns\nan instance of <a href=\"#iter\" rel=\"nofollow\">Iter</a> to allow further iterable chaining.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">string</span><span class=\"o\">.</span><span class=\"n\">ascii_lowercase</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n<span class=\"p\">[(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s1\">'a'</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'b'</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s1\">'c'</span><span class=\"p\">)]</span>\n</pre>\n</div>\n<div id=\"map-func-union-callable-c-str-iterable-iter-c\">\n<span id=\"map\"></span><h3><a href=\"#id13\" rel=\"nofollow\"><tt>map(func: <span class=\"pre\">Union[Callable[...,</span> C], str], iterable) <span class=\"pre\">-&gt;</span> \"Iter[C]\"</tt></a></h3>\n<p>Replacement for the builtin <tt>map</tt> function.  This version returns\nan instance of <a href=\"#iter\" rel=\"nofollow\">Iter</a> to allow further iterable chaining.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"nb\">ord</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)),</span> <span class=\"s1\">'caleb'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">dict</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">assert</span> <span class=\"n\">result</span> <span class=\"o\">==</span> <span class=\"p\">{</span><span class=\"s1\">'a'</span><span class=\"p\">:</span> <span class=\"mi\">97</span><span class=\"p\">,</span> <span class=\"s1\">'b'</span><span class=\"p\">:</span> <span class=\"mi\">98</span><span class=\"p\">,</span> <span class=\"s1\">'c'</span><span class=\"p\">:</span> <span class=\"mi\">99</span><span class=\"p\">,</span> <span class=\"s1\">'e'</span><span class=\"p\">:</span> <span class=\"mi\">101</span><span class=\"p\">,</span> <span class=\"s1\">'l'</span><span class=\"p\">:</span> <span class=\"mi\">108</span><span class=\"p\">}</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"s1\">'x, ord(x)'</span><span class=\"p\">,</span> <span class=\"s1\">'caleb'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">dict</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">assert</span> <span class=\"n\">result</span> <span class=\"o\">==</span> <span class=\"p\">{</span><span class=\"s1\">'a'</span><span class=\"p\">:</span> <span class=\"mi\">97</span><span class=\"p\">,</span> <span class=\"s1\">'b'</span><span class=\"p\">:</span> <span class=\"mi\">98</span><span class=\"p\">,</span> <span class=\"s1\">'c'</span><span class=\"p\">:</span> <span class=\"mi\">99</span><span class=\"p\">,</span> <span class=\"s1\">'e'</span><span class=\"p\">:</span> <span class=\"mi\">101</span><span class=\"p\">,</span> <span class=\"s1\">'l'</span><span class=\"p\">:</span> <span class=\"mi\">108</span><span class=\"p\">}</span>\n</pre>\n</div>\n<div id=\"filter-function-callable-any-iterable-iterable-iter-t\">\n<span id=\"filter\"></span><h3><a href=\"#id14\" rel=\"nofollow\"><tt>filter(function: <span class=\"pre\">\"Callable[[Any],</span> <span class=\"pre\">...]\",</span> iterable: Iterable) <span class=\"pre\">-&gt;</span> \"Iter[T]\"</tt></a></h3>\n<p>Replacement for the builtin <tt>filter</tt> function.  This version returns\nan instance of <a href=\"#iter\" rel=\"nofollow\">Iter</a> to allow further iterable chaining.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">filter</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">%</span> <span class=\"mi\">3</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n<span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">]</span>\n</pre>\n</div>\n<div id=\"source-count-start-step-int-1-iter-int\">\n<span id=\"count\"></span><h3><a href=\"#id15\" rel=\"nofollow\">\ud83c\udfa4 <tt>count(start, step: int = 1) <span class=\"pre\">-&gt;</span> \"Iter[int]\"</tt></a></h3>\n<p>Replacement for the itertools <tt>count</tt> function.  This version returns\nan instance of <a href=\"#iter\" rel=\"nofollow\">Iter</a> to allow further iterable chaining.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">count</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n<span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">count</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n<span class=\"p\">[]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">count</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n<span class=\"p\">[]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">count</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n<span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">13</span><span class=\"p\">,</span> <span class=\"mi\">14</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">count</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">&gt;</span> <span class=\"mi\">10</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n<span class=\"p\">[</span><span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">13</span><span class=\"p\">,</span> <span class=\"mi\">14</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">]</span>\n</pre>\n</div>\n<div id=\"cycle-iterable-iter-t\">\n<span id=\"cycle\"></span><h3><a href=\"#id16\" rel=\"nofollow\"><tt>cycle(iterable) <span class=\"pre\">-&gt;</span> \"Iter[T]\"</tt></a></h3>\n<p>Replacement for the itertools <tt>count</tt> function.  This version returns\nan instance of <a href=\"#iter\" rel=\"nofollow\">Iter</a> to allow further iterable chaining.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cycle</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n<span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cycle</span><span class=\"p\">([])</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n<span class=\"p\">[]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cycle</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n<span class=\"p\">[]</span>\n</pre>\n</div>\n<div id=\"source-repeat-object-c-times-none-iter-c\">\n<span id=\"repeat\"></span><h3><a href=\"#id17\" rel=\"nofollow\">\ud83c\udfa4 <tt>repeat(object: C, times=None) <span class=\"pre\">-&gt;</span> \"Iter[C]\"</tt></a></h3>\n<p>Replacement for the itertools <tt>count</tt> function.  This version returns\nan instance of <a href=\"#iter\" rel=\"nofollow\">Iter</a> to allow further iterable chaining.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">repeat</span><span class=\"p\">(</span><span class=\"s1\">'a'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n<span class=\"p\">[</span><span class=\"s1\">'a'</span><span class=\"p\">,</span> <span class=\"s1\">'a'</span><span class=\"p\">,</span> <span class=\"s1\">'a'</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">repeat</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n<span class=\"p\">[[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">repeat</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">collapse</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n<span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">repeat</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">collapse</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n<span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">repeat</span><span class=\"p\">(</span><span class=\"s1\">'a'</span><span class=\"p\">,</span> <span class=\"n\">times</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n<span class=\"p\">[</span><span class=\"s1\">'a'</span><span class=\"p\">,</span> <span class=\"s1\">'a'</span><span class=\"p\">,</span> <span class=\"s1\">'a'</span><span class=\"p\">]</span>\n</pre>\n<p>This next set of functions return iterators that terminate on the shortest\ninput sequence.</p>\n</div>\n<div id=\"accumulate-iterable-func-none-initial-none\">\n<span id=\"accumulate\"></span><h3><a href=\"#id18\" rel=\"nofollow\"><tt>accumulate(iterable, func=None, *, initial=None)</tt></a></h3>\n<p>Replacement for the itertools <tt>accumulate</tt> function.  This version returns\nan instance of <a href=\"#iter\" rel=\"nofollow\">Iter</a> to allow further iterable chaining.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">accumulate</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n<span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">if</span> <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">version_info</span> <span class=\"o\">&gt;=</span> <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"n\">output</span> <span class=\"o\">=</span> <span class=\"n\">accumulate</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">],</span> <span class=\"n\">initial</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n<span class=\"o\">...</span>     <span class=\"k\">assert</span> <span class=\"n\">output</span> <span class=\"o\">==</span> <span class=\"p\">[</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">101</span><span class=\"p\">,</span> <span class=\"mi\">103</span><span class=\"p\">,</span> <span class=\"mi\">106</span><span class=\"p\">,</span> <span class=\"mi\">110</span><span class=\"p\">,</span> <span class=\"mi\">115</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">accumulate</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">],</span> <span class=\"n\">operator</span><span class=\"o\">.</span><span class=\"n\">mul</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n<span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">24</span><span class=\"p\">,</span> <span class=\"mi\">120</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">accumulate</span><span class=\"p\">([])</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n<span class=\"p\">[]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">accumulate</span><span class=\"p\">(</span><span class=\"s1\">'abc'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n<span class=\"p\">[</span><span class=\"s1\">'a'</span><span class=\"p\">,</span> <span class=\"s1\">'ab'</span><span class=\"p\">,</span> <span class=\"s1\">'abc'</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">accumulate</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s1\">'abc'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n<span class=\"p\">[</span><span class=\"mi\">97</span><span class=\"p\">,</span> <span class=\"mi\">195</span><span class=\"p\">,</span> <span class=\"mi\">294</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">accumulate</span><span class=\"p\">(</span><span class=\"nb\">bytearray</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s1\">'abc'</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n<span class=\"p\">[</span><span class=\"mi\">97</span><span class=\"p\">,</span> <span class=\"mi\">195</span><span class=\"p\">,</span> <span class=\"mi\">294</span><span class=\"p\">]</span>\n</pre>\n</div>\n<div id=\"chain-iterables-iterable-t-iter-t\">\n<span id=\"chain\"></span><h3><a href=\"#id19\" rel=\"nofollow\"><tt><span class=\"pre\">chain(*iterables:</span> Iterable[T]) <span class=\"pre\">-&gt;</span> \"Iter[T]\"</tt></a></h3>\n<p>Replacement for the itertools <tt>chain</tt> function.  This version returns\nan instance of <a href=\"#iter\" rel=\"nofollow\">Iter</a> to allow further iterable chaining.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">chain</span><span class=\"p\">(</span><span class=\"s1\">'ABC'</span><span class=\"p\">,</span> <span class=\"s1\">'DEF'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n<span class=\"p\">[</span><span class=\"s1\">'A'</span><span class=\"p\">,</span> <span class=\"s1\">'B'</span><span class=\"p\">,</span> <span class=\"s1\">'C'</span><span class=\"p\">,</span> <span class=\"s1\">'D'</span><span class=\"p\">,</span> <span class=\"s1\">'E'</span><span class=\"p\">,</span> <span class=\"s1\">'F'</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">chain</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n<span class=\"p\">[]</span>\n</pre>\n</div>\n<div id=\"chain-from-iterable-iterable-iter-t\">\n<span id=\"chain-from-iterable\"></span><h3><a href=\"#id20\" rel=\"nofollow\"><tt>chain_from_iterable(iterable) <span class=\"pre\">-&gt;</span> \"Iter[T]\"</tt></a></h3>\n<p>Replacement for the itertools <tt>chain.from_iterable</tt> method.\nThis version returns an instance of <a href=\"#iter\" rel=\"nofollow\">Iter</a> to allow\nfurther iterable chaining.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">chain_from_iterable</span><span class=\"p\">([</span><span class=\"s1\">'ABC'</span><span class=\"p\">,</span> <span class=\"s1\">'DEF'</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n<span class=\"p\">[</span><span class=\"s1\">'A'</span><span class=\"p\">,</span> <span class=\"s1\">'B'</span><span class=\"p\">,</span> <span class=\"s1\">'C'</span><span class=\"p\">,</span> <span class=\"s1\">'D'</span><span class=\"p\">,</span> <span class=\"s1\">'E'</span><span class=\"p\">,</span> <span class=\"s1\">'F'</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">chain_from_iterable</span><span class=\"p\">([])</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n<span class=\"p\">[]</span>\n</pre>\n</div>\n<div id=\"compress-data-selectors\">\n<span id=\"compress\"></span><h3><a href=\"#id21\" rel=\"nofollow\"><tt>compress(data, selectors)</tt></a></h3>\n<p>Replacement for the itertools <tt>compress</tt> function.  This version returns\nan instance of <a href=\"#iter\" rel=\"nofollow\">Iter</a> to allow further iterable chaining.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">compress</span><span class=\"p\">(</span><span class=\"s1\">'ABCDEF'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n<span class=\"p\">[</span><span class=\"s1\">'A'</span><span class=\"p\">,</span> <span class=\"s1\">'C'</span><span class=\"p\">,</span> <span class=\"s1\">'E'</span><span class=\"p\">,</span> <span class=\"s1\">'F'</span><span class=\"p\">]</span>\n</pre>\n</div>\n<div id=\"dropwhile-pred-iterable\">\n<span id=\"dropwhile\"></span><h3><a href=\"#id22\" rel=\"nofollow\"><tt>dropwhile(pred, iterable)</tt></a></h3>\n<p>Replacement for the itertools <tt>dropwhile</tt> function.  This version returns\nan instance of <a href=\"#iter\" rel=\"nofollow\">Iter</a> to allow further iterable chaining.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">dropwhile</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">&lt;</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n<span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">]</span>\n</pre>\n</div>\n<div id=\"filterfalse-pred-iterable\">\n<span id=\"filterfalse\"></span><h3><a href=\"#id23\" rel=\"nofollow\"><tt>filterfalse(pred, iterable)</tt></a></h3>\n<p>Replacement for the itertools <tt>filterfalse</tt> function.  This version returns\nan instance of <a href=\"#iter\" rel=\"nofollow\">Iter</a> to allow further iterable chaining.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">filterfalse</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n<span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]</span>\n</pre>\n</div>\n<div id=\"groupby-iterable-key-none\">\n<span id=\"groupby\"></span><h3><a href=\"#id24\" rel=\"nofollow\"><tt>groupby(iterable, key=None)</tt></a></h3>\n<p>Replacement for the itertools <tt>groupby</tt> function.  This version returns\nan instance of <a href=\"#iter\" rel=\"nofollow\">Iter</a> to allow further iterable chaining.</p>\n<p><a href=\"#groupby\" rel=\"nofollow\">groupby</a> returns an iterator of a key and \u201cgrouper\u201d iterable. In the\nexample below, we use <a href=\"#iter-starmap\" rel=\"nofollow\">Iter.starmap</a> to collect each grouper iterable\ninto a list, as this makes it neater for display here in the docstring.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"p\">(</span>\n<span class=\"o\">...</span>     <span class=\"n\">groupby</span><span class=\"p\">([</span><span class=\"s1\">'john'</span><span class=\"p\">,</span> <span class=\"s1\">'jill'</span><span class=\"p\">,</span> <span class=\"s1\">'anne'</span><span class=\"p\">,</span> <span class=\"s1\">'jack'</span><span class=\"p\">],</span> <span class=\"n\">key</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n<span class=\"o\">...</span>         <span class=\"o\">.</span><span class=\"n\">starmap</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">g</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">g</span><span class=\"p\">)))</span>\n<span class=\"o\">...</span>         <span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n<span class=\"o\">...</span> <span class=\"p\">)</span>\n<span class=\"p\">[(</span><span class=\"s1\">'j'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">'john'</span><span class=\"p\">,</span> <span class=\"s1\">'jill'</span><span class=\"p\">]),</span> <span class=\"p\">(</span><span class=\"s1\">'a'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">'anne'</span><span class=\"p\">]),</span> <span class=\"p\">(</span><span class=\"s1\">'j'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">'jack'</span><span class=\"p\">])]</span>\n</pre>\n</div>\n<div id=\"islice-iterable-args-iter\">\n<span id=\"islice\"></span><h3><a href=\"#id25\" rel=\"nofollow\"><tt>islice(iterable, *args) <span class=\"pre\">-&gt;</span> \"Iter\"</tt></a></h3>\n<p>Replacement for the itertools <tt>islice</tt> function.  This version returns\nan instance of <a href=\"#iter\" rel=\"nofollow\">Iter</a> to allow further iterable chaining.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">islice</span><span class=\"p\">(</span><span class=\"s1\">'ABCDEFG'</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n<span class=\"p\">[</span><span class=\"s1\">'A'</span><span class=\"p\">,</span> <span class=\"s1\">'B'</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">islice</span><span class=\"p\">(</span><span class=\"s1\">'ABCDEFG'</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n<span class=\"p\">[</span><span class=\"s1\">'C'</span><span class=\"p\">,</span> <span class=\"s1\">'D'</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">islice</span><span class=\"p\">(</span><span class=\"s1\">'ABCDEFG'</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n<span class=\"p\">[</span><span class=\"s1\">'C'</span><span class=\"p\">,</span> <span class=\"s1\">'D'</span><span class=\"p\">,</span> <span class=\"s1\">'E'</span><span class=\"p\">,</span> <span class=\"s1\">'F'</span><span class=\"p\">,</span> <span class=\"s1\">'G'</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">islice</span><span class=\"p\">(</span><span class=\"s1\">'ABCDEFG'</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n<span class=\"p\">[</span><span class=\"s1\">'A'</span><span class=\"p\">,</span> <span class=\"s1\">'C'</span><span class=\"p\">,</span> <span class=\"s1\">'E'</span><span class=\"p\">,</span> <span class=\"s1\">'G'</span><span class=\"p\">]</span>\n</pre>\n</div>\n<div id=\"starmap-func-iterable\">\n<span id=\"starmap\"></span><h3><a href=\"#id26\" rel=\"nofollow\"><tt>starmap(func, iterable)</tt></a></h3>\n<p>Replacement for the itertools <tt>starmap</tt> function.  This version returns\nan instance of <a href=\"#iter\" rel=\"nofollow\">Iter</a> to allow further iterable chaining.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">starmap</span><span class=\"p\">(</span><span class=\"nb\">pow</span><span class=\"p\">,</span> <span class=\"p\">[(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)])</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n<span class=\"p\">[</span><span class=\"mi\">32</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">1000</span><span class=\"p\">]</span>\n</pre>\n</div>\n<div id=\"takewhile-pred-iterable\">\n<span id=\"takewhile\"></span><h3><a href=\"#id27\" rel=\"nofollow\"><tt>takewhile(pred, iterable)</tt></a></h3>\n<p>Replacement for the itertools <tt>takewhile</tt> function.  This version returns\nan instance of <a href=\"#iter\" rel=\"nofollow\">Iter</a> to allow further iterable chaining.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">takewhile</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">&lt;</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n<span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]</span>\n</pre>\n</div>\n<div id=\"tee-iterable-n-2\">\n<span id=\"tee\"></span><h3><a href=\"#id28\" rel=\"nofollow\"><tt>tee(iterable, n=2)</tt></a></h3>\n<p>Replacement for the itertools <tt>tee</tt> function.  This version returns\nan instance of <a href=\"#iter\" rel=\"nofollow\">Iter</a> to allow further iterable chaining.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">tee</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">))</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n<span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">()</span>\n<span class=\"mi\">10</span>\n</pre>\n<p>It is also possible to operate on the returned iterators in the chain\nbut it gets quite difficult to understand:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">tee</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">it</span><span class=\"p\">:</span> <span class=\"n\">it</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">())</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n<span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">]</span>\n</pre>\n<p>In the example above we passed in <a href=\"#range\" rel=\"nofollow\">range</a>, but with <a href=\"#excitertools\" rel=\"nofollow\">excitertools</a>\nit\u2019s usually more natural to push data sources further left:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">tee</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">it</span><span class=\"p\">:</span> <span class=\"n\">it</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">())</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n<span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">]</span>\n</pre>\n<p>Pay close attention to the above. The <a href=\"#map\" rel=\"nofollow\">map</a> is acting on each of the\ncopied iterators.</p>\n</div>\n<div id=\"zip-longest-iterables-fillvalue-none\">\n<span id=\"zip-longest\"></span><h3><a href=\"#id29\" rel=\"nofollow\"><tt><span class=\"pre\">zip_longest(*iterables,</span> fillvalue=None)</tt></a></h3>\n<p>Replacement for the itertools <tt>zip_longest</tt> function.  This version returns\nan instance of <a href=\"#iter\" rel=\"nofollow\">Iter</a> to allow further iterable chaining.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">zip_longest</span><span class=\"p\">(</span><span class=\"s1\">'ABCD'</span><span class=\"p\">,</span> <span class=\"s1\">'xy'</span><span class=\"p\">,</span> <span class=\"n\">fillvalue</span><span class=\"o\">=</span><span class=\"s1\">'-'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n<span class=\"p\">[(</span><span class=\"s1\">'A'</span><span class=\"p\">,</span> <span class=\"s1\">'x'</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'B'</span><span class=\"p\">,</span> <span class=\"s1\">'y'</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'C'</span><span class=\"p\">,</span> <span class=\"s1\">'-'</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'D'</span><span class=\"p\">,</span> <span class=\"s1\">'-'</span><span class=\"p\">)]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"p\">(</span>\n<span class=\"o\">...</span>     <span class=\"n\">zip_longest</span><span class=\"p\">(</span><span class=\"s1\">'ABCD'</span><span class=\"p\">,</span> <span class=\"s1\">'xy'</span><span class=\"p\">,</span> <span class=\"n\">fillvalue</span><span class=\"o\">=</span><span class=\"s1\">'-'</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>         <span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">tup</span><span class=\"p\">:</span> <span class=\"n\">concat</span><span class=\"p\">(</span><span class=\"n\">tup</span><span class=\"p\">,</span> <span class=\"s1\">''</span><span class=\"p\">))</span>\n<span class=\"o\">...</span>         <span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n<span class=\"o\">...</span> <span class=\"p\">)</span>\n<span class=\"p\">[</span><span class=\"s1\">'Ax'</span><span class=\"p\">,</span> <span class=\"s1\">'By'</span><span class=\"p\">,</span> <span class=\"s1\">'C-'</span><span class=\"p\">,</span> <span class=\"s1\">'D-'</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"p\">(</span>\n<span class=\"o\">...</span>     <span class=\"n\">zip_longest</span><span class=\"p\">(</span><span class=\"s1\">'ABCD'</span><span class=\"p\">,</span> <span class=\"s1\">'xy'</span><span class=\"p\">,</span> <span class=\"n\">fillvalue</span><span class=\"o\">=</span><span class=\"s1\">'-'</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>         <span class=\"o\">.</span><span class=\"n\">starmap</span><span class=\"p\">(</span><span class=\"n\">operator</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>         <span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n<span class=\"o\">...</span> <span class=\"p\">)</span>\n<span class=\"p\">[</span><span class=\"s1\">'Ax'</span><span class=\"p\">,</span> <span class=\"s1\">'By'</span><span class=\"p\">,</span> <span class=\"s1\">'C-'</span><span class=\"p\">,</span> <span class=\"s1\">'D-'</span><span class=\"p\">]</span>\n</pre>\n</div>\n<div id=\"cool-class-iter-generic-t\">\n<span id=\"iter\"></span><h3><a href=\"#id30\" rel=\"nofollow\">\u2728 <tt>class Iter(Generic[T])</tt></a></h3>\n<p>This class is what allows chaining. Many of the methods in this class\nreturn an instance of <a href=\"#iter\" rel=\"nofollow\">Iter</a>, which allows further chaining. There\nare two exceptions to this: <em>sources</em> and <em>sinks</em>.</p>\n<p>A \u201csource\u201d is usually a <tt>classmethod</tt> which can be used as an\ninitializer to produce data via an iterable. For example, the <a href=\"#iter-range\" rel=\"nofollow\">Iter.range</a>\nclassmethod can be used to get a sequence of numbers:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Iter</span><span class=\"o\">.</span><span class=\"n\">range</span><span class=\"p\">(</span><span class=\"mi\">1_000_000</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n<span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span>\n</pre>\n<p>Even though our range was a million elements, the iterator chaining\ntook only 3 of those elements before collecting.</p>\n<p>A \u201csink\u201d is a method that is usually the last component of a processing\nchain and often (but not always!) consumes the entire iterator. In the\nexample above, the call to <a href=\"#iter-collect\" rel=\"nofollow\">Iter.collect</a> was a sink. Note that we still\ncall it a sink even though it did not consume the entire iterator.</p>\n<p>We\u2019re using the term \u201csource\u201d to refer to a classmethod of <a href=\"#iter\" rel=\"nofollow\">Iter</a> that\nproduces data; but, the most typical source is going to be data that\nyou provide. <a href=\"#iter\" rel=\"nofollow\">Iter</a> can be called with anything that is iterable, including\nsequences, iterators, mappings, sets, generators and so on.</p>\n<p>Examples:</p>\n<pre><span class=\"n\">List</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Iter</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">*</span> <span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">()</span>\n<span class=\"mi\">12</span>\n\n<span class=\"n\">Generator</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Iter</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">*</span> <span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">()</span>\n<span class=\"mi\">12</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">def</span> <span class=\"nf\">g</span><span class=\"p\">():</span>\n<span class=\"o\">...</span>     <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]:</span>\n<span class=\"o\">...</span>         <span class=\"k\">yield</span> <span class=\"n\">i</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Iter</span><span class=\"p\">(</span><span class=\"n\">g</span><span class=\"p\">())</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">*</span> <span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">()</span>\n<span class=\"mi\">12</span>\n\n<span class=\"n\">Iterator</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Iter</span><span class=\"p\">(</span><span class=\"nb\">iter</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]))</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">*</span> <span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">()</span>\n<span class=\"mi\">12</span>\n\n<span class=\"n\">Dict</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Iter</span><span class=\"p\">(</span><span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">upper</span><span class=\"p\">())</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n<span class=\"p\">[</span><span class=\"s1\">'A'</span><span class=\"p\">,</span> <span class=\"s1\">'B'</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Iter</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">())</span><span class=\"o\">.</span><span class=\"n\">starmap</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">:</span> <span class=\"n\">v</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">*</span> <span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">()</span>\n<span class=\"mi\">12</span>\n</pre>\n<p>A common error with generators is forgetting to actually evaluate, i.e.,\ncall a generator function. If you do this there\u2019s a friendly error\npointing out the mistake:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">def</span> <span class=\"nf\">mygen</span><span class=\"p\">():</span> <span class=\"k\">yield</span> <span class=\"mi\">123</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Iter</span><span class=\"p\">(</span><span class=\"n\">mygen</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n<span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n<span class=\"ne\">TypeError</span><span class=\"p\">:</span> <span class=\"n\">It</span> <span class=\"n\">seems</span> <span class=\"n\">you</span> <span class=\"n\">passed</span> <span class=\"n\">a</span> <span class=\"n\">generator</span> <span class=\"n\">function</span><span class=\"p\">,</span> <span class=\"n\">but</span> <span class=\"n\">you</span>\n<span class=\"n\">probably</span> <span class=\"n\">intended</span> <span class=\"n\">to</span> <span class=\"k\">pass</span> <span class=\"n\">a</span> <span class=\"n\">generator</span><span class=\"o\">.</span> <span class=\"n\">Remember</span> <span class=\"n\">to</span> <span class=\"n\">evaluate</span> <span class=\"n\">the</span>\n<span class=\"n\">function</span> <span class=\"n\">to</span> <span class=\"n\">obtain</span> <span class=\"n\">a</span> <span class=\"n\">generator</span> <span class=\"n\">instance</span><span class=\"p\">:</span>\n<span class=\"o\">&lt;</span><span class=\"n\">BLANKLINE</span><span class=\"o\">&gt;</span>\n<span class=\"k\">def</span> <span class=\"nf\">mygen</span><span class=\"p\">():</span>\n    <span class=\"k\">yield</span> <span class=\"mi\">123</span>\n<span class=\"o\">&lt;</span><span class=\"n\">BLANKLINE</span><span class=\"o\">&gt;</span>\n<span class=\"n\">Iter</span><span class=\"p\">(</span><span class=\"n\">mygen</span><span class=\"p\">)</span>    <span class=\"c1\"># ERROR - a generator function object is not iterable</span>\n<span class=\"n\">Iter</span><span class=\"p\">(</span><span class=\"n\">mygen</span><span class=\"p\">())</span>  <span class=\"c1\"># CORRECT - a generator instance is iterable.</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Iter</span><span class=\"p\">(</span><span class=\"n\">mygen</span><span class=\"p\">())</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n<span class=\"p\">[</span><span class=\"mi\">123</span><span class=\"p\">]</span>\n</pre>\n<p>Instance of <a href=\"#iter\" rel=\"nofollow\">Iter</a> are resumable. Once an instance it created, it can\nbe partially iterated in successive calls, like the following example\nshows:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">it</span> <span class=\"o\">=</span> <span class=\"n\">Iter</span><span class=\"o\">.</span><span class=\"n\">range</span><span class=\"p\">(</span><span class=\"mi\">1_000_000</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">it</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n<span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">it</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n<span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># Consume most of the stream, collect the last few</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">it</span><span class=\"o\">.</span><span class=\"n\">consume</span><span class=\"p\">(</span><span class=\"mi\">999_990</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n<span class=\"p\">[</span><span class=\"mi\">999997</span><span class=\"p\">,</span> <span class=\"mi\">999998</span><span class=\"p\">,</span> <span class=\"mi\">999999</span><span class=\"p\">]</span>\n</pre>\n<p>This class implements the chaining. However, the module-level functions\nin <a href=\"#excitertools\" rel=\"nofollow\">excitertools</a>, such as <a href=\"#range\" rel=\"nofollow\">range</a>, <a href=\"#zip\" rel=\"nofollow\">zip</a> and so on, also return\ninstances of <a href=\"#iter\" rel=\"nofollow\">Iter</a>, so they allow the chaining to continue. These are\nequivalent:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Iter</span><span class=\"o\">.</span><span class=\"n\">range</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">&gt;</span> <span class=\"mi\">7</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n<span class=\"p\">[</span><span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">&gt;</span> <span class=\"mi\">7</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n<span class=\"p\">[</span><span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">]</span>\n</pre>\n<p>It is intended that the module-level functions can act as drop-in\nreplacements for the builtins they wrap:</p>\n<pre>&gt;&gt;&gt; import builtins\n&gt;&gt;&gt; list(builtins.range(3))\n[0, 1, 2]\n&gt;&gt;&gt; list(range(3))  # This is excitertools.range!\n[0, 1, 2]\n&gt;&gt;&gt; list(Iter.range(3))\n[0, 1, 2]\n</pre>\n<p>In your own code where you might like to use the <a href=\"#excitertools\" rel=\"nofollow\">excitertools</a> version of\n<a href=\"#range\" rel=\"nofollow\">range</a> and the other functions, you can just import it and use it to access all the other\ncool stuff:</p>\n<pre><span class=\"c1\"># mymodule.py</span>\n<span class=\"kn\">from</span> <span class=\"nn\">excitertools</span> <span class=\"kn\">import</span> <span class=\"p\">(</span>\n    <span class=\"nb\">range</span><span class=\"p\">,</span>\n    <span class=\"nb\">map</span><span class=\"p\">,</span>\n    <span class=\"nb\">filter</span><span class=\"p\">,</span>\n    <span class=\"n\">reduce</span><span class=\"p\">,</span>\n    <span class=\"n\">repeat</span><span class=\"p\">,</span>\n    <span class=\"n\">count</span><span class=\"p\">,</span>\n    <span class=\"nb\">enumerate</span><span class=\"p\">,</span>\n    <span class=\"nb\">zip</span><span class=\"p\">,</span>\n    <span class=\"o\">...</span>\n<span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">func</span><span class=\"p\">(</span><span class=\"n\">inputs</span><span class=\"p\">):</span>\n    <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n        <span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">inputs</span><span class=\"p\">)</span>\n            <span class=\"o\">.</span><span class=\"n\">enumerate</span><span class=\"p\">()</span>\n            <span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"mi\">10</span><span class=\"p\">)</span>\n            <span class=\"o\">...</span>\n            <span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n\n    <span class=\"p\">)</span>\n</pre>\n<p>Alternatively, if you don\u2019t want to hide the builtins you can do just\nfine with importing this class only, or even importing the module only:</p>\n<pre><span class=\"c1\"># mymodule.py - same example as before</span>\n<span class=\"kn\">import</span> <span class=\"nn\">excitertools</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">func</span><span class=\"p\">(</span><span class=\"n\">inputs</span><span class=\"p\">):</span>\n    <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n        <span class=\"n\">excitertools</span><span class=\"o\">.</span><span class=\"n\">Iter</span><span class=\"p\">(</span><span class=\"n\">inputs</span><span class=\"p\">)</span>\n            <span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">inputs</span><span class=\"p\">)</span>\n            <span class=\"o\">.</span><span class=\"n\">enumerate</span><span class=\"p\">()</span>\n            <span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"mi\">10</span><span class=\"p\">)</span>\n            <span class=\"o\">...</span>\n            <span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"c1\"># Do something with data</span>\n</pre>\n<p>There are several valuable additions to the standard <em>itertools</em> and\n<a href=\"https://more-itertools.readthedocs.io/en/stable/index.html\" rel=\"nofollow\">more-itertools</a> functions. These usually involve sources and sinks,\nwhich are ways of getting data into an iterator pipeline, and then\ngetting results out again. In the majority of documentation examples\nshown here, the <a href=\"#iter-collect\" rel=\"nofollow\">Iter.collect</a> method is used to collect all the\nremaining data on a stream into a list; but in practice this is not\nuseful because large lists consume memory.</p>\n<p>In practice it is more useful to send iterator data to one of these\ncommon sinks:</p>\n<ul>\n<li>files</li>\n<li>sockets</li>\n<li>queues</li>\n<li>HTTP APIs</li>\n<li>Cloud storage buckets</li>\n<li>(Ideas for more to add here?)</li>\n</ul>\n<p><a href=\"#iter\" rel=\"nofollow\">Iter</a> has support for these use-cases, both for reading and for writing.</p>\n<div id=\"sink-iter-collect-self-container-list-list-t\">\n<span id=\"iter-collect\"></span><h4><a href=\"#id31\" rel=\"nofollow\">\ud83c\udfa7 <tt>Iter.collect(self, container=list) <span class=\"pre\">-&gt;</span> \"List[T]\"</tt></a></h4>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Iter</span><span class=\"p\">(</span><span class=\"s1\">'abc'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n<span class=\"p\">[</span><span class=\"s1\">'a'</span><span class=\"p\">,</span> <span class=\"s1\">'b'</span><span class=\"p\">,</span> <span class=\"s1\">'c'</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Iter</span><span class=\"p\">(</span><span class=\"s1\">'abc'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">)</span>\n<span class=\"s1\">'abc'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Iter</span><span class=\"p\">(</span><span class=\"s1\">'abcaaaabbbbccc'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">(</span><span class=\"nb\">set</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"p\">{</span><span class=\"s1\">'a'</span><span class=\"p\">,</span> <span class=\"s1\">'b'</span><span class=\"p\">,</span> <span class=\"s1\">'c'</span><span class=\"p\">}</span>\n<span class=\"kc\">True</span>\n</pre>\n</div>\n<div id=\"cool-source-classmethod-iter-open-cls-file-mode-r-buffering-1-encoding-none-errors-none-newline-none-closefd-true-opener-none-iter\">\n<span id=\"iter-open\"></span><h4><a href=\"#id32\" rel=\"nofollow\">\u2728 \ud83c\udfa4 <tt>@classmethod Iter.open(cls, file, <span class=\"pre\">mode=\"r\",</span> <span class=\"pre\">buffering=-1,</span> encoding=None, errors=None, newline=None, closefd=True, opener=None, ) <span class=\"pre\">-&gt;</span> \"Iter\"</tt></a></h4>\n<p>Wrap the <tt>open()</tt> builtin precisely, but return an <tt>Iter</tt>\ninstance to allow function chaining on the result.</p>\n<pre>&gt;&gt;&gt; import tempfile\n&gt;&gt;&gt; with tempfile.TemporaryDirectory() as td:\n...     with open(td + 'text.txt', 'w') as f:\n...         f.writelines(['abc\\n', 'def\\n', 'ghi\\n'])\n...     Iter.open(td + 'text.txt').filter(lambda line: 'def' in line).collect()\n['def\\n']\n</pre>\n<p>Note that this is a convenience method for <em>reading</em> from a file,\nnot for writing. The function signature includes the <tt>mode</tt>\nparameter for parity with the builtin <tt>open()</tt> function, but\nonly reading is supported.</p>\n</div>\n<div id=\"source-classmethod-iter-range-cls-args-iter-int\">\n<span id=\"iter-range\"></span><h4><a href=\"#id33\" rel=\"nofollow\">\ud83c\udfa4 <tt>@classmethod Iter.range(cls, *args) <span class=\"pre\">-&gt;</span> \"Iter[int]\"</tt></a></h4>\n<p>Docstring TBD</p>\n</div>\n<div id=\"iter-zip-self-iterables-any-iter-tuple-t\">\n<span id=\"iter-zip\"></span><h4><a href=\"#id34\" rel=\"nofollow\"><tt>Iter.zip(self, *iterables: Any) <span class=\"pre\">-&gt;</span> \"Iter[Tuple[T, <span class=\"pre\">...]]\"</span></tt></a></h4>\n<p>Docstring TBD</p>\n</div>\n<div id=\"sink-iter-any-self-bool\">\n<span id=\"iter-any\"></span><h4><a href=\"#id35\" rel=\"nofollow\">\ud83c\udfa7 <tt>Iter.any(self) <span class=\"pre\">-&gt;</span> \"bool\"</tt></a></h4>\n<p>Docstring TBD</p>\n</div>\n<div id=\"sink-iter-all-self-bool\">\n<span id=\"iter-all\"></span><h4><a href=\"#id36\" rel=\"nofollow\">\ud83c\udfa7 <tt>Iter.all(self) <span class=\"pre\">-&gt;</span> \"bool\"</tt></a></h4>\n<p>Docstring TBD</p>\n</div>\n<div id=\"iter-enumerate-self-iter-tuple-int-t\">\n<span id=\"iter-enumerate\"></span><h4><a href=\"#id37\" rel=\"nofollow\"><tt>Iter.enumerate(self) <span class=\"pre\">-&gt;</span> \"Iter[Tuple[int, <span class=\"pre\">T]]\"</span></tt></a></h4>\n<p>Docstring TBD</p>\n</div>\n<div id=\"iter-dict-self-dict\">\n<span id=\"iter-dict\"></span><h4><a href=\"#id38\" rel=\"nofollow\"><tt>Iter.dict(self) <span class=\"pre\">-&gt;</span> \"Dict\"</tt></a></h4>\n<p>Docstring TBD</p>\n</div>\n<div id=\"iter-map-self-func-union-callable-c-str-iter-c\">\n<span id=\"iter-map\"></span><h4><a href=\"#id39\" rel=\"nofollow\"><tt>Iter.map(self, func: <span class=\"pre\">Union[Callable[...,</span> C], str]) <span class=\"pre\">-&gt;</span> \"Iter[C]\"</tt></a></h4>\n<pre>&gt;&gt;&gt; result = Iter('caleb').map(lambda x: (x, ord(x))).dict()\n&gt;&gt;&gt; assert result == {'a': 97, 'b': 98, 'c': 99, 'e': 101, 'l': 108}\n</pre>\n<pre>&gt;&gt;&gt; result = Iter('caleb').map('x, ord(x)').dict()\n&gt;&gt;&gt; assert result == {'a': 97, 'b': 98, 'c': 99, 'e': 101, 'l': 108}\n</pre>\n</div>\n<div id=\"iter-filter-self-args-iter-t\">\n<span id=\"iter-filter\"></span><h4><a href=\"#id40\" rel=\"nofollow\"><tt>Iter.filter(self, *args) <span class=\"pre\">-&gt;</span> \"Iter[T]\"</tt></a></h4>\n<p>Docstring TBD</p>\n</div>\n<div id=\"iter-reduce-self-func-callable-t-args-t\">\n<span id=\"iter-reduce\"></span><h4><a href=\"#id41\" rel=\"nofollow\"><tt>Iter.reduce(self, func: <span class=\"pre\">Callable[...,</span> T], *args) <span class=\"pre\">-&gt;</span> \"T\"</tt></a></h4>\n<p>Docstring TBD</p>\n</div>\n<div id=\"sink-iter-sum-self\">\n<span id=\"iter-sum\"></span><h4><a href=\"#id42\" rel=\"nofollow\">\ud83c\udfa7 <tt>Iter.sum(self)</tt></a></h4>\n<p>Docstring TBD</p>\n</div>\n<div id=\"sink-iter-concat-self-glue-anystr-anystr\">\n<span id=\"iter-concat\"></span><h4><a href=\"#id43\" rel=\"nofollow\">\ud83c\udfa7 <tt>Iter.concat(self, glue: AnyStr) <span class=\"pre\">-&gt;</span> \"AnyStr\"</tt></a></h4>\n<p>Docstring TBD</p>\n</div>\n<div id=\"iter-insert-self-glue-c-iter-union-c-t\">\n<span id=\"iter-insert\"></span><h4><a href=\"#id44\" rel=\"nofollow\"><tt>Iter.insert(self, glue: C) <span class=\"pre\">-&gt;</span> \"Iter[Union[C, <span class=\"pre\">T]]\"</span></tt></a></h4>\n<p>Docstring TBD</p>\n</div>\n<div id=\"source-classmethod-iter-count-cls-args-iter-int\">\n<span id=\"iter-count\"></span><h4><a href=\"#id45\" rel=\"nofollow\">\ud83c\udfa4 <tt>@classmethod Iter.count(cls, *args) <span class=\"pre\">-&gt;</span> \"Iter[int]\"</tt></a></h4>\n<p>Docstring TBD</p>\n</div>\n<div id=\"iter-cycle-self-iter-t\">\n<span id=\"iter-cycle\"></span><h4><a href=\"#id46\" rel=\"nofollow\"><tt>Iter.cycle(self) <span class=\"pre\">-&gt;</span> \"Iter[T]\"</tt></a></h4>\n<p>Docstring TBD</p>\n</div>\n<div id=\"source-classmethod-iter-repeat-cls-elem-c-times-none-iter-c\">\n<span id=\"iter-repeat\"></span><h4><a href=\"#id47\" rel=\"nofollow\">\ud83c\udfa4 <tt>@classmethod Iter.repeat(cls, elem: C, times=None) <span class=\"pre\">-&gt;</span> \"Iter[C]\"</tt></a></h4>\n<p>Docstring TBD</p>\n</div>\n<div id=\"iter-accumulate-self-func-none-initial-none\">\n<span id=\"iter-accumulate\"></span><h4><a href=\"#id48\" rel=\"nofollow\"><tt>Iter.accumulate(self, func=None, *, initial=None)</tt></a></h4>\n<p>Docstring TBD</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Iter</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">accumulate</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n<span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">if</span> <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">version_info</span> <span class=\"o\">&gt;=</span> <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"n\">out</span> <span class=\"o\">=</span> <span class=\"n\">Iter</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">accumulate</span><span class=\"p\">(</span><span class=\"n\">initial</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n<span class=\"o\">...</span>     <span class=\"k\">assert</span> <span class=\"n\">out</span> <span class=\"o\">==</span> <span class=\"p\">[</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">101</span><span class=\"p\">,</span> <span class=\"mi\">103</span><span class=\"p\">,</span> <span class=\"mi\">106</span><span class=\"p\">,</span> <span class=\"mi\">110</span><span class=\"p\">,</span> <span class=\"mi\">115</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Iter</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">accumulate</span><span class=\"p\">(</span><span class=\"n\">operator</span><span class=\"o\">.</span><span class=\"n\">mul</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n<span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">24</span><span class=\"p\">,</span> <span class=\"mi\">120</span><span class=\"p\">]</span>\n</pre>\n</div>\n<div id=\"iter-chain-self-iterables-iterable-t-iter-t\">\n<span id=\"iter-chain\"></span><h4><a href=\"#id49\" rel=\"nofollow\"><tt>Iter.chain(self, *iterables: Iterable[T]) <span class=\"pre\">-&gt;</span> \"Iter[T]\"</tt></a></h4>\n<p>Docstring TBD</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Iter</span><span class=\"p\">(</span><span class=\"s1\">'ABC'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">chain</span><span class=\"p\">(</span><span class=\"s1\">'DEF'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n<span class=\"p\">[</span><span class=\"s1\">'A'</span><span class=\"p\">,</span> <span class=\"s1\">'B'</span><span class=\"p\">,</span> <span class=\"s1\">'C'</span><span class=\"p\">,</span> <span class=\"s1\">'D'</span><span class=\"p\">,</span> <span class=\"s1\">'E'</span><span class=\"p\">,</span> <span class=\"s1\">'F'</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Iter</span><span class=\"p\">(</span><span class=\"s1\">'ABC'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">chain</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n<span class=\"p\">[</span><span class=\"s1\">'A'</span><span class=\"p\">,</span> <span class=\"s1\">'B'</span><span class=\"p\">,</span> <span class=\"s1\">'C'</span><span class=\"p\">]</span>\n</pre>\n</div>\n<div id=\"iter-chain-from-iterable-self-iter-t\">\n<span id=\"iter-chain-from-iterable\"></span><h4><a href=\"#id50\" rel=\"nofollow\"><tt>Iter.chain_from_iterable(self) <span class=\"pre\">-&gt;</span> \"Iter[T]\"</tt></a></h4>\n<p>Docstring TBD</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Iter</span><span class=\"p\">([</span><span class=\"s1\">'ABC'</span><span class=\"p\">,</span> <span class=\"s1\">'DEF'</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">chain_from_iterable</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n<span class=\"p\">[</span><span class=\"s1\">'A'</span><span class=\"p\">,</span> <span class=\"s1\">'B'</span><span class=\"p\">,</span> <span class=\"s1\">'C'</span><span class=\"p\">,</span> <span class=\"s1\">'D'</span><span class=\"p\">,</span> <span class=\"s1\">'E'</span><span class=\"p\">,</span> <span class=\"s1\">'F'</span><span class=\"p\">]</span>\n</pre>\n</div>\n<div id=\"iter-compress-self-selectors\">\n<span id=\"iter-compress\"></span><h4><a href=\"#id51\" rel=\"nofollow\"><tt>Iter.compress(self, selectors)</tt></a></h4>\n<p>Replacement for the itertools <tt>compress</tt> function.  This version returns\nan instance of <a href=\"#iter\" rel=\"nofollow\">Iter</a> to allow further iterable chaining.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Iter</span><span class=\"p\">(</span><span class=\"s1\">'ABCDEF'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">compress</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n<span class=\"p\">[</span><span class=\"s1\">'A'</span><span class=\"p\">,</span> <span class=\"s1\">'C'</span><span class=\"p\">,</span> <span class=\"s1\">'E'</span><span class=\"p\">,</span> <span class=\"s1\">'F'</span><span class=\"p\">]</span>\n</pre>\n</div>\n<div id=\"iter-dropwhile-self-pred\">\n<span id=\"iter-dropwhile\"></span><h4><a href=\"#id52\" rel=\"nofollow\"><tt>Iter.dropwhile(self, pred)</tt></a></h4>\n<p>Docstring TBD</p>\n</div>\n<div id=\"iter-filterfalse-self-pred\">\n<span id=\"iter-filterfalse\"></span><h4><a href=\"#id53\" rel=\"nofollow\"><tt>Iter.filterfalse(self, pred)</tt></a></h4>\n<p>Docstring TBD</p>\n</div>\n<div id=\"iter-groupby-self-key-none\">\n<span id=\"iter-groupby\"></span><h4><a href=\"#id54\" rel=\"nofollow\"><tt>Iter.groupby(self, key=None)</tt></a></h4>\n<p>Docstring TBD</p>\n</div>\n<div id=\"iter-islice-self-args-iter\">\n<span id=\"iter-islice\"></span><h4><a href=\"#id55\" rel=\"nofollow\"><tt>Iter.islice(self, *args) <span class=\"pre\">-&gt;</span> \"Iter\"</tt></a></h4>\n<p>Docstring TBD</p>\n</div>\n<div id=\"iter-starmap-self-func\">\n<span id=\"iter-starmap\"></span><h4><a href=\"#id56\" rel=\"nofollow\"><tt>Iter.starmap(self, func)</tt></a></h4>\n<p>Docstring TBD</p>\n</div>\n<div id=\"iter-takewhile-self-pred\">\n<span id=\"iter-takewhile\"></span><h4><a href=\"#id57\" rel=\"nofollow\"><tt>Iter.takewhile(self, pred)</tt></a></h4>\n<p>Docstring TBD</p>\n</div>\n<div id=\"iter-tee-self-n-2\">\n<span id=\"iter-tee\"></span><h4><a href=\"#id58\" rel=\"nofollow\"><tt>Iter.tee(self, n=2)</tt></a></h4>\n<p>Docstring TBD</p>\n</div>\n<div id=\"iter-zip-longest-self-iterables-fillvalue-none\">\n<span id=\"iter-zip-longest\"></span><h4><a href=\"#id59\" rel=\"nofollow\"><tt>Iter.zip_longest(self, *iterables, fillvalue=None)</tt></a></h4>\n<p>Docstring TBD</p>\n</div>\n<div id=\"iter-chunked-self-n-int-iter\">\n<span id=\"iter-chunked\"></span><h4><a href=\"#id60\" rel=\"nofollow\"><tt>Iter.chunked(self, n: int) <span class=\"pre\">-&gt;</span> \"Iter\"</tt></a></h4>\n<p>Docstring TBD</p>\n</div>\n<div id=\"iter-ichunked-self-n-int-iter\">\n<span id=\"iter-ichunked\"></span><h4><a href=\"#id61\" rel=\"nofollow\"><tt>Iter.ichunked(self, n: int) <span class=\"pre\">-&gt;</span> \"Iter\"</tt></a></h4>\n<p>Docstring TBD</p>\n</div>\n<div id=\"classmethod-iter-sliced-cls-seq-sequence-n-int-iter\">\n<span id=\"iter-sliced\"></span><h4><a href=\"#id62\" rel=\"nofollow\"><tt>@classmethod Iter.sliced(cls, seq: Sequence, n: int) <span class=\"pre\">-&gt;</span> \"Iter\"</tt></a></h4>\n<p>Docstring TBD</p>\n</div>\n<div id=\"iter-distribute-self-n-int-iter\">\n<span id=\"iter-distribute\"></span><h4><a href=\"#id63\" rel=\"nofollow\"><tt>Iter.distribute(self, n: int) <span class=\"pre\">-&gt;</span> \"Iter\"</tt></a></h4>\n<p>Docstring TBD</p>\n</div>\n<div id=\"iter-divide-self-n-int-iter\">\n<span id=\"iter-divide\"></span><h4><a href=\"#id64\" rel=\"nofollow\"><tt>Iter.divide(self, n: int) <span class=\"pre\">-&gt;</span> \"Iter\"</tt></a></h4>\n<p>Docstring TBD</p>\n</div>\n<div id=\"iter-split-at-self-pred\">\n<span id=\"iter-split-at\"></span><h4><a href=\"#id65\" rel=\"nofollow\"><tt>Iter.split_at(self, pred)</tt></a></h4>\n<p>Docstring TBD</p>\n</div>\n<div id=\"iter-split-before-self-pred\">\n<span id=\"iter-split-before\"></span><h4><a href=\"#id66\" rel=\"nofollow\"><tt>Iter.split_before(self, pred)</tt></a></h4>\n<p>Docstring TBD</p>\n</div>\n<div id=\"iter-split-after-self-pred\">\n<span id=\"iter-split-after\"></span><h4><a href=\"#id67\" rel=\"nofollow\"><tt>Iter.split_after(self, pred)</tt></a></h4>\n<p>Docstring TBD</p>\n</div>\n<div id=\"iter-split-into-self-sizes\">\n<span id=\"iter-split-into\"></span><h4><a href=\"#id68\" rel=\"nofollow\"><tt>Iter.split_into(self, sizes)</tt></a></h4>\n<p>Docstring TBD</p>\n</div>\n<div id=\"iter-split-when-self-pred\">\n<span id=\"iter-split-when\"></span><h4><a href=\"#id69\" rel=\"nofollow\"><tt>Iter.split_when(self, pred)</tt></a></h4>\n<p>Docstring TBD</p>\n</div>\n<div id=\"iter-bucket-self-key-validator-none\">\n<span id=\"iter-bucket\"></span><h4><a href=\"#id70\" rel=\"nofollow\"><tt>Iter.bucket(self, key, validator=None)</tt></a></h4>\n<p>Docstring TBD</p>\n</div>\n<div id=\"iter-unzip-self\">\n<span id=\"iter-unzip\"></span><h4><a href=\"#id71\" rel=\"nofollow\"><tt>Iter.unzip(self)</tt></a></h4>\n<p>Docstring TBD</p>\n</div>\n<div id=\"iter-grouper-self-n-int-fillvalue-none-iter\">\n<span id=\"iter-grouper\"></span><h4><a href=\"#id72\" rel=\"nofollow\"><tt>Iter.grouper(self, n: int, fillvalue=None) <span class=\"pre\">-&gt;</span> \"Iter\"</tt></a></h4>\n<p>Docstring TBD</p>\n</div>\n<div id=\"iter-partition-self-pred-iter\">\n<span id=\"iter-partition\"></span><h4><a href=\"#id73\" rel=\"nofollow\"><tt>Iter.partition(self, pred) <span class=\"pre\">-&gt;</span> \"Iter\"</tt></a></h4>\n<p>Docstring TBD</p>\n</div>\n<div id=\"iter-spy-self-n-1-tuple-iter-iter\">\n<span id=\"iter-spy\"></span><h4><a href=\"#id74\" rel=\"nofollow\"><tt>Iter.spy(self, n=1) <span class=\"pre\">-&gt;</span> \"Tuple[Iter, Iter]\"</tt></a></h4>\n<p>Docstring TBD</p>\n</div>\n<div id=\"iter-peekable-self-more-itertools-peekable\">\n<span id=\"iter-peekable\"></span><h4><a href=\"#id75\" rel=\"nofollow\"><tt>Iter.peekable(self) <span class=\"pre\">-&gt;</span> \"more_itertools.peekable\"</tt></a></h4>\n<p>Docstring TBD</p>\n</div>\n<div id=\"iter-seekable-self-more-itertools-seekable\">\n<span id=\"iter-seekable\"></span><h4><a href=\"#id76\" rel=\"nofollow\"><tt>Iter.seekable(self) <span class=\"pre\">-&gt;</span> \"more_itertools.seekable\"</tt></a></h4>\n<p>Docstring TBD</p>\n</div>\n<div id=\"iter-windowed-self-n-fillvalue-none-step-1-iter\">\n<span id=\"iter-windowed\"></span><h4><a href=\"#id77\" rel=\"nofollow\"><tt>Iter.windowed(self, n, fillvalue=None, step=1) <span class=\"pre\">-&gt;</span> \"Iter\"</tt></a></h4>\n<p>Docstring TBD</p>\n</div>\n<div id=\"iter-substrings-self\">\n<span id=\"iter-substrings\"></span><h4><a href=\"#id78\" rel=\"nofollow\"><tt>Iter.substrings(self)</tt></a></h4>\n<p>Docstring TBD</p>\n</div>\n<div id=\"iter-substrings-indexes-self-reverse-false\">\n<span id=\"iter-substrings-indexes\"></span><h4><a href=\"#id79\" rel=\"nofollow\"><tt>Iter.substrings_indexes(self, reverse=False)</tt></a></h4>\n<p>Docstring TBD</p>\n</div>\n<div id=\"iter-stagger-self-offsets-1-0-1-longest-false-fillvalue-none\">\n<span id=\"iter-stagger\"></span><h4><a href=\"#id80\" rel=\"nofollow\"><tt>Iter.stagger(self, <span class=\"pre\">offsets=(-1,</span> 0, 1), longest=False, fillvalue=None)</tt></a></h4>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Iter</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">stagger</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n<span class=\"p\">[(</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Iter</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">8</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">stagger</span><span class=\"p\">(</span><span class=\"n\">offsets</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n<span class=\"p\">[(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">)]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Iter</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">stagger</span><span class=\"p\">(</span><span class=\"n\">longest</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n<span class=\"p\">[(</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)]</span>\n</pre>\n</div>\n<div id=\"iter-pairwise-self\">\n<span id=\"iter-pairwise\"></span><h4><a href=\"#id81\" rel=\"nofollow\"><tt>Iter.pairwise(self)</tt></a></h4>\n<p>Reference <a href=\"https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.pairwise\" rel=\"nofollow\">more_itertools.pairwise</a></p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Iter</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">pairwise</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n<span class=\"p\">[(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)]</span>\n</pre>\n</div>\n<div id=\"iter-count-cycle-self-n-none-iter\">\n<span id=\"iter-count-cycle\"></span><h4><a href=\"#id82\" rel=\"nofollow\"><tt>Iter.count_cycle(self, n=None) <span class=\"pre\">-&gt;</span> \"Iter\"</tt></a></h4>\n<p>Reference: <a href=\"https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.count_cycle\" rel=\"nofollow\">more_itertools.count_cycle</a></p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Iter</span><span class=\"p\">(</span><span class=\"s1\">'AB'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">count_cycle</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n<span class=\"p\">[(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s1\">'A'</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s1\">'B'</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'A'</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'B'</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s1\">'A'</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s1\">'B'</span><span class=\"p\">)]</span>\n</pre>\n</div>\n<div id=\"iter-intersperse-self-e-n-1-iter\">\n<span id=\"iter-intersperse\"></span><h4><a href=\"#id83\" rel=\"nofollow\"><tt>Iter.intersperse(self, e, n=1) <span class=\"pre\">-&gt;</span> \"Iter\"</tt></a></h4>\n<p>Reference: <a href=\"https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.intersperse\" rel=\"nofollow\">more_itertools.intersperse</a></p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Iter</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">intersperse</span><span class=\"p\">(</span><span class=\"s1\">'!'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n<span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'!'</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s1\">'!'</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"s1\">'!'</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"s1\">'!'</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">]</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Iter</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">intersperse</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n<span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">]</span>\n</pre>\n</div>\n<div id=\"iter-padded-self-fillvalue-optional-c-none-n-optional-int-none-next-multiple-bool-false-iter-union-t-c\">\n<span id=\"iter-padded\"></span><h4><a href=\"#id84\" rel=\"nofollow\"><tt>Iter.padded(self, fillvalue: Optional[C] = None, n: Optional[int] = None, next_multiple: bool = False, ) <span class=\"pre\">-&gt;</span> \"Iter[Union[T, <span class=\"pre\">C]]\"</span></tt></a></h4>\n<p>Reference: <a href=\"https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.padded\" rel=\"nofollow\">more_itertools.padded</a></p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Iter</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">padded</span><span class=\"p\">(</span><span class=\"s1\">'?'</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n<span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"s1\">'?'</span><span class=\"p\">,</span> <span class=\"s1\">'?'</span><span class=\"p\">]</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Iter</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">padded</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">next_multiple</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n<span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">]</span>\n</pre>\n</div>\n<div id=\"iter-repeat-last-self-default-none-iter-t\">\n<span id=\"iter-repeat-last\"></span><h4><a href=\"#id85\" rel=\"nofollow\"><tt>Iter.repeat_last(self, default=None) <span class=\"pre\">-&gt;</span> \"Iter[T]\"</tt></a></h4>\n<p>Reference: <a href=\"https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.repeat_last\" rel=\"nofollow\">more_itertools.repeat_last</a></p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Iter</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">repeat_last</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">islice</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n<span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Iter</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">repeat_last</span><span class=\"p\">(</span><span class=\"mi\">42</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">islice</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n<span class=\"p\">[</span><span class=\"mi\">42</span><span class=\"p\">,</span> <span class=\"mi\">42</span><span class=\"p\">,</span> <span class=\"mi\">42</span><span class=\"p\">,</span> <span class=\"mi\">42</span><span class=\"p\">,</span> <span class=\"mi\">42</span><span class=\"p\">]</span>\n</pre>\n</div>\n<div id=\"iter-adjacent-self-pred-distance-1-iter-tuple-bool-t\">\n<span id=\"iter-adjacent\"></span><h4><a href=\"#id86\" rel=\"nofollow\"><tt>Iter.adjacent(self, pred, distance=1) <span class=\"pre\">-&gt;</span> \"Iter[Tuple[bool, <span class=\"pre\">T]]\"</span></tt></a></h4>\n<p>Reference: <a href=\"https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.adjacent\" rel=\"nofollow\">more_itertools.adjacent</a></p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Iter</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">adjacent</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">==</span> <span class=\"mi\">3</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n<span class=\"p\">[(</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">)]</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Iter</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">adjacent</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">==</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">distance</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n<span class=\"p\">[(</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">)]</span>\n</pre>\n</div>\n<div id=\"iter-groupby-transform-self-keyfunc-optional-callable-k-none-valuefunc-optional-callable-v-none-iter-tuple-k-iterable-v\">\n<span id=\"iter-groupby-transform\"></span><h4><a href=\"#id87\" rel=\"nofollow\"><tt>Iter.groupby_transform(self, keyfunc: <span class=\"pre\">Optional[Callable[...,</span> K]] = None, valuefunc: <span class=\"pre\">Optional[Callable[...,</span> V]] = None, ) <span class=\"pre\">-&gt;</span> \"Iter[Tuple[K, <span class=\"pre\">Iterable[V]]]\"</span></tt></a></h4>\n<p>Reference: <a href=\"https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.groupby_transform\" rel=\"nofollow\">more_itertools.groupby_transform</a></p>\n<p>This example has been modified somewhat from the original. We\u2019re using\n<tt>starmap</tt> here to \u201cunzip\u201d the tuples produced by the group\ntransform.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">iterable</span> <span class=\"o\">=</span> <span class=\"s1\">'AaaABbBCcA'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">keyfunc</span> <span class=\"o\">=</span> <span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">upper</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">valuefunc</span> <span class=\"o\">=</span> <span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"p\">(</span>\n<span class=\"o\">...</span>    <span class=\"n\">Iter</span><span class=\"p\">(</span><span class=\"n\">iterable</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>        <span class=\"o\">.</span><span class=\"n\">groupby_transform</span><span class=\"p\">(</span><span class=\"n\">keyfunc</span><span class=\"p\">,</span> <span class=\"n\">valuefunc</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>        <span class=\"o\">.</span><span class=\"n\">starmap</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">g</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"s1\">''</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">g</span><span class=\"p\">)))</span>\n<span class=\"o\">...</span>        <span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n<span class=\"o\">...</span> <span class=\"p\">)</span>\n<span class=\"p\">[(</span><span class=\"s1\">'A'</span><span class=\"p\">,</span> <span class=\"s1\">'aaaa'</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'B'</span><span class=\"p\">,</span> <span class=\"s1\">'bbb'</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'C'</span><span class=\"p\">,</span> <span class=\"s1\">'cc'</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'A'</span><span class=\"p\">,</span> <span class=\"s1\">'a'</span><span class=\"p\">)]</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">operator</span> <span class=\"kn\">import</span> <span class=\"n\">itemgetter</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">keys</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">values</span> <span class=\"o\">=</span> <span class=\"s1\">'abcdefghi'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">iterable</span> <span class=\"o\">=</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">keys</span><span class=\"p\">,</span> <span class=\"n\">values</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"p\">(</span>\n<span class=\"o\">...</span>     <span class=\"n\">Iter</span><span class=\"p\">(</span><span class=\"n\">iterable</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>        <span class=\"o\">.</span><span class=\"n\">groupby_transform</span><span class=\"p\">(</span><span class=\"n\">itemgetter</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"n\">itemgetter</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">))</span>\n<span class=\"o\">...</span>        <span class=\"o\">.</span><span class=\"n\">starmap</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">g</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"s1\">''</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">g</span><span class=\"p\">)))</span>\n<span class=\"o\">...</span>        <span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n<span class=\"o\">...</span> <span class=\"p\">)</span>\n<span class=\"p\">[(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s1\">'ab'</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'cde'</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s1\">'fgh'</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"s1\">'i'</span><span class=\"p\">)]</span>\n</pre>\n</div>\n<div id=\"iter-padnone-self-iter-union-t-none\">\n<span id=\"iter-padnone\"></span><h4><a href=\"#id88\" rel=\"nofollow\"><tt>Iter.padnone(self) <span class=\"pre\">-&gt;</span> \"Iter[Union[T, <span class=\"pre\">None]]\"</span></tt></a></h4>\n<p>Reference: <a href=\"https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.padnone\" rel=\"nofollow\">more_itertools.padnone</a></p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Iter</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">padnone</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n<span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">]</span>\n</pre>\n</div>\n<div id=\"iter-ncycles-self-n-iter-t\">\n<span id=\"iter-ncycles\"></span><h4><a href=\"#id89\" rel=\"nofollow\"><tt>Iter.ncycles(self, n) <span class=\"pre\">-&gt;</span> \"Iter[T]\"</tt></a></h4>\n<p>Reference: <a href=\"https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.ncycles\" rel=\"nofollow\">more_itertools.ncycles</a></p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Iter</span><span class=\"p\">([</span><span class=\"s1\">'a'</span><span class=\"p\">,</span> <span class=\"s1\">'b'</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">ncycles</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n<span class=\"p\">[</span><span class=\"s1\">'a'</span><span class=\"p\">,</span> <span class=\"s1\">'b'</span><span class=\"p\">,</span> <span class=\"s1\">'a'</span><span class=\"p\">,</span> <span class=\"s1\">'b'</span><span class=\"p\">,</span> <span class=\"s1\">'a'</span><span class=\"p\">,</span> <span class=\"s1\">'b'</span><span class=\"p\">]</span>\n</pre>\n</div>\n<div id=\"iter-collapse-self-base-type-none-levels-none-iter\">\n<span id=\"iter-collapse\"></span><h4><a href=\"#id90\" rel=\"nofollow\"><tt>Iter.collapse(self, base_type=None, levels=None) <span class=\"pre\">-&gt;</span> \"Iter\"</tt></a></h4>\n<p>Reference: <a href=\"https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.collapse\" rel=\"nofollow\">more_itertools.collapse</a></p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">iterable</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"p\">([</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">],</span> <span class=\"p\">[[</span><span class=\"mi\">5</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"p\">]])]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Iter</span><span class=\"p\">(</span><span class=\"n\">iterable</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">collapse</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n<span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">]</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">iterable</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'ab'</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"s1\">'cd'</span><span class=\"p\">,</span> <span class=\"s1\">'ef'</span><span class=\"p\">),</span> <span class=\"p\">[</span><span class=\"s1\">'gh'</span><span class=\"p\">,</span> <span class=\"s1\">'ij'</span><span class=\"p\">]]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Iter</span><span class=\"p\">(</span><span class=\"n\">iterable</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">collapse</span><span class=\"p\">(</span><span class=\"n\">base_type</span><span class=\"o\">=</span><span class=\"nb\">tuple</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n<span class=\"p\">[</span><span class=\"s1\">'ab'</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"s1\">'cd'</span><span class=\"p\">,</span> <span class=\"s1\">'ef'</span><span class=\"p\">),</span> <span class=\"s1\">'gh'</span><span class=\"p\">,</span> <span class=\"s1\">'ij'</span><span class=\"p\">]</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">iterable</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"s1\">'a'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">'b'</span><span class=\"p\">]),</span> <span class=\"p\">(</span><span class=\"s1\">'c'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">'d'</span><span class=\"p\">])]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Iter</span><span class=\"p\">(</span><span class=\"n\">iterable</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">collapse</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span> <span class=\"c1\"># Fully flattened</span>\n<span class=\"p\">[</span><span class=\"s1\">'a'</span><span class=\"p\">,</span> <span class=\"s1\">'b'</span><span class=\"p\">,</span> <span class=\"s1\">'c'</span><span class=\"p\">,</span> <span class=\"s1\">'d'</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Iter</span><span class=\"p\">(</span><span class=\"n\">iterable</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">collapse</span><span class=\"p\">(</span><span class=\"n\">levels</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span> <span class=\"c1\"># Only one level flattened</span>\n<span class=\"p\">[</span><span class=\"s1\">'a'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">'b'</span><span class=\"p\">],</span> <span class=\"s1\">'c'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">'d'</span><span class=\"p\">]]</span>\n</pre>\n</div>\n<div id=\"class-or-instancemethod-iter-sort-together-self-or-cls-iterables-key-list-0-reverse-false\">\n<span id=\"iter-sort-together\"></span><h4><a href=\"#id91\" rel=\"nofollow\"><tt>@class_or_instancemethod Iter.sort_together(self_or_cls, iterables, <span class=\"pre\">key_list=(0,),</span> reverse=False)</tt></a></h4>\n<p>Reference: <a href=\"https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.sort_together\" rel=\"nofollow\">more_itertools.sort_together</a></p>\n<p>This can be called either as an instance method or a class method.\nThe classmethod form is more convenient if all the iterables are\nalready available. The instancemethod form is more convenient if\none of the iterables already goes through some transformation.</p>\n<p>Here are examples from the classmethod form, which mirror the\nexamples in the <a href=\"https://more-itertools.readthedocs.io/en/stable/index.html\" rel=\"nofollow\">more-itertools</a> documentation:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">iterables</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'a'</span><span class=\"p\">,</span> <span class=\"s1\">'b'</span><span class=\"p\">,</span> <span class=\"s1\">'c'</span><span class=\"p\">,</span> <span class=\"s1\">'d'</span><span class=\"p\">)]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Iter</span><span class=\"o\">.</span><span class=\"n\">sort_together</span><span class=\"p\">(</span><span class=\"n\">iterables</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n<span class=\"p\">[(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'d'</span><span class=\"p\">,</span> <span class=\"s1\">'c'</span><span class=\"p\">,</span> <span class=\"s1\">'b'</span><span class=\"p\">,</span> <span class=\"s1\">'a'</span><span class=\"p\">)]</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">iterables</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'c'</span><span class=\"p\">,</span> <span class=\"s1\">'b'</span><span class=\"p\">,</span> <span class=\"s1\">'a'</span><span class=\"p\">)]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Iter</span><span class=\"o\">.</span><span class=\"n\">sort_together</span><span class=\"p\">(</span><span class=\"n\">iterables</span><span class=\"p\">,</span> <span class=\"n\">key_list</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n<span class=\"p\">[(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'a'</span><span class=\"p\">,</span> <span class=\"s1\">'c'</span><span class=\"p\">,</span> <span class=\"s1\">'b'</span><span class=\"p\">)]</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Iter</span><span class=\"o\">.</span><span class=\"n\">sort_together</span><span class=\"p\">([(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'c'</span><span class=\"p\">,</span> <span class=\"s1\">'b'</span><span class=\"p\">,</span> <span class=\"s1\">'a'</span><span class=\"p\">)],</span> <span class=\"n\">reverse</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n<span class=\"p\">[(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'a'</span><span class=\"p\">,</span> <span class=\"s1\">'b'</span><span class=\"p\">,</span> <span class=\"s1\">'c'</span><span class=\"p\">)]</span>\n</pre>\n<p>Here is an examples using the instancemethod form:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; iterables = [('a', 'b', 'c', 'd')]\n&gt;&gt;&gt; Iter([4, 3, 2, 1]).sort_together(iterables).collect()\n[(1, 2, 3, 4), ('d', 'c', 'b', 'a')]\n</pre>\n</blockquote>\n</div>\n<div id=\"class-or-instancemethod-iter-interleave-self-or-cls-iterables-iter\">\n<span id=\"iter-interleave\"></span><h4><a href=\"#id92\" rel=\"nofollow\"><tt>@class_or_instancemethod Iter.interleave(self_or_cls, *iterables) <span class=\"pre\">-&gt;</span> \"Iter\"</tt></a></h4>\n<p>Reference: <a href=\"https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.interleave\" rel=\"nofollow\">more_itertools.interleave</a></p>\n<p>Classmethod form:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Iter</span><span class=\"o\">.</span><span class=\"n\">interleave</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n<span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">]</span>\n</pre>\n<p>Instancemethod form:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Iter</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">interleave</span><span class=\"p\">([</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n<span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">]</span>\n</pre>\n</div>\n<div id=\"class-or-instancemethod-iter-interleave-longest-self-or-cls-iterables-iter\">\n<span id=\"iter-interleave-longest\"></span><h4><a href=\"#id93\" rel=\"nofollow\"><tt>@class_or_instancemethod Iter.interleave_longest(self_or_cls, *iterables) <span class=\"pre\">-&gt;</span> \"Iter\"</tt></a></h4>\n<p>Reference: <a href=\"https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.interleave_longest\" rel=\"nofollow\">more_itertools.interleave_longest</a></p>\n<p>Classmethod form:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Iter</span><span class=\"o\">.</span><span class=\"n\">interleave_longest</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n<span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">]</span>\n</pre>\n<p>Instancemethod form:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Iter</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">interleave_longest</span><span class=\"p\">([</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n<span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">]</span>\n</pre>\n</div>\n<div id=\"classmethod-iter-zip-offset-cls-iterables-offsets-longest-false-fillvalue-none-iter\">\n<span id=\"iter-zip-offset\"></span><h4><a href=\"#id94\" rel=\"nofollow\"><tt>@classmethod Iter.zip_offset(cls, *iterables, offsets, longest=False, fillvalue=None) <span class=\"pre\">-&gt;</span> \"Iter\"</tt></a></h4>\n<p>Reference: <a href=\"https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.zip_offset\" rel=\"nofollow\">more_itertools.zip_offset</a></p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Iter</span><span class=\"o\">.</span><span class=\"n\">zip_offset</span><span class=\"p\">(</span><span class=\"s1\">'0123'</span><span class=\"p\">,</span> <span class=\"s1\">'abcdef'</span><span class=\"p\">,</span> <span class=\"n\">offsets</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n<span class=\"p\">[(</span><span class=\"s1\">'0'</span><span class=\"p\">,</span> <span class=\"s1\">'b'</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'1'</span><span class=\"p\">,</span> <span class=\"s1\">'c'</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'2'</span><span class=\"p\">,</span> <span class=\"s1\">'d'</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'3'</span><span class=\"p\">,</span> <span class=\"s1\">'e'</span><span class=\"p\">)]</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Iter</span><span class=\"o\">.</span><span class=\"n\">zip_offset</span><span class=\"p\">(</span><span class=\"s1\">'0123'</span><span class=\"p\">,</span> <span class=\"s1\">'abcdef'</span><span class=\"p\">,</span> <span class=\"n\">offsets</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"n\">longest</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n<span class=\"p\">[(</span><span class=\"s1\">'0'</span><span class=\"p\">,</span> <span class=\"s1\">'b'</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'1'</span><span class=\"p\">,</span> <span class=\"s1\">'c'</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'2'</span><span class=\"p\">,</span> <span class=\"s1\">'d'</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'3'</span><span class=\"p\">,</span> <span class=\"s1\">'e'</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"s1\">'f'</span><span class=\"p\">)]</span>\n</pre>\n</div>\n<div id=\"iter-dotproduct-self-vec2-iterable\">\n<span id=\"iter-dotproduct\"></span><h4><a href=\"#id95\" rel=\"nofollow\"><tt>Iter.dotproduct(self, vec2: Iterable)</tt></a></h4>\n<p>Reference: <a href=\"https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.dotproduct\" rel=\"nofollow\">more_itertools.dotproduct</a></p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Iter</span><span class=\"p\">([</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">dotproduct</span><span class=\"p\">([</span><span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">])</span>\n<span class=\"mi\">400</span>\n</pre>\n</div>\n<div id=\"iter-flatten-self-iter-t\">\n<span id=\"iter-flatten\"></span><h4><a href=\"#id96\" rel=\"nofollow\"><tt>Iter.flatten(self) <span class=\"pre\">-&gt;</span> \"Iter[T]\"</tt></a></h4>\n<p>Reference: <a href=\"https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.flatten\" rel=\"nofollow\">more_itertools.flatten</a></p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Iter</span><span class=\"p\">([[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]])</span><span class=\"o\">.</span><span class=\"n\">flatten</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n<span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n</pre>\n</div>\n<div id=\"class-or-instancemethod-iter-roundrobin-self-or-cls-union-type-t-t-iterables-c-iter-union-t-c\">\n<span id=\"iter-roundrobin\"></span><h4><a href=\"#id97\" rel=\"nofollow\"><tt>@class_or_instancemethod Iter.roundrobin(self_or_cls: Union[Type[T], T], *iterables: C) <span class=\"pre\">-&gt;</span> \"Iter[Union[T, <span class=\"pre\">C]]\"</span></tt></a></h4>\n<p>Reference: <a href=\"https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.roundrobin\" rel=\"nofollow\">more_itertools.roundrobin</a></p>\n<p>Classmethod form:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Iter</span><span class=\"o\">.</span><span class=\"n\">roundrobin</span><span class=\"p\">(</span><span class=\"s1\">'ABC'</span><span class=\"p\">,</span> <span class=\"s1\">'D'</span><span class=\"p\">,</span> <span class=\"s1\">'EF'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n<span class=\"p\">[</span><span class=\"s1\">'A'</span><span class=\"p\">,</span> <span class=\"s1\">'D'</span><span class=\"p\">,</span> <span class=\"s1\">'E'</span><span class=\"p\">,</span> <span class=\"s1\">'B'</span><span class=\"p\">,</span> <span class=\"s1\">'F'</span><span class=\"p\">,</span> <span class=\"s1\">'C'</span><span class=\"p\">]</span>\n</pre>\n<p>Instancemethod form:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Iter</span><span class=\"p\">(</span><span class=\"s1\">'ABC'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">roundrobin</span><span class=\"p\">(</span><span class=\"s1\">'D'</span><span class=\"p\">,</span> <span class=\"s1\">'EF'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n<span class=\"p\">[</span><span class=\"s1\">'A'</span><span class=\"p\">,</span> <span class=\"s1\">'D'</span><span class=\"p\">,</span> <span class=\"s1\">'E'</span><span class=\"p\">,</span> <span class=\"s1\">'B'</span><span class=\"p\">,</span> <span class=\"s1\">'F'</span><span class=\"p\">,</span> <span class=\"s1\">'C'</span><span class=\"p\">]</span>\n</pre>\n</div>\n<div id=\"iter-prepend-self-value-c-iter-union-t-c\">\n<span id=\"iter-prepend\"></span><h4><a href=\"#id98\" rel=\"nofollow\"><tt>Iter.prepend(self, value: C) <span class=\"pre\">-&gt;</span> \"Iter[Union[T, <span class=\"pre\">C]]\"</span></tt></a></h4>\n<p>Reference: <a href=\"https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.prepend\" rel=\"nofollow\">more_itertools.prepend</a></p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"s1\">'0'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">iterator</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'1'</span><span class=\"p\">,</span> <span class=\"s1\">'2'</span><span class=\"p\">,</span> <span class=\"s1\">'3'</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Iter</span><span class=\"p\">(</span><span class=\"n\">iterator</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">prepend</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n<span class=\"p\">[</span><span class=\"s1\">'0'</span><span class=\"p\">,</span> <span class=\"s1\">'1'</span><span class=\"p\">,</span> <span class=\"s1\">'2'</span><span class=\"p\">,</span> <span class=\"s1\">'3'</span><span class=\"p\">]</span>\n</pre>\n</div>\n<div id=\"sink-iter-ilen-self-int\">\n<span id=\"iter-ilen\"></span><h4><a href=\"#id99\" rel=\"nofollow\">\ud83c\udfa7 <tt>Iter.ilen(self) <span class=\"pre\">-&gt;</span> \"int\"</tt></a></h4>\n<p>Reference: <a href=\"https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.ilen\" rel=\"nofollow\">more_itertools.ilen</a></p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Iter</span><span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1000000</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"o\">%</span> <span class=\"mi\">3</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">ilen</span><span class=\"p\">()</span>\n<span class=\"mi\">333334</span>\n</pre>\n</div>\n<div id=\"iter-unique-to-each-self-iter-t\">\n<span id=\"iter-unique-to-each\"></span><h4><a href=\"#id100\" rel=\"nofollow\"><tt>Iter.unique_to_each(self) <span class=\"pre\">-&gt;</span> \"Iter[T]\"</tt></a></h4>\n<p>Reference: <a href=\"https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.unique_to_each\" rel=\"nofollow\">more_itertools.unique_to_each</a></p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Iter</span><span class=\"p\">([{</span><span class=\"s1\">'A'</span><span class=\"p\">,</span> <span class=\"s1\">'B'</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"s1\">'B'</span><span class=\"p\">,</span> <span class=\"s1\">'C'</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"s1\">'B'</span><span class=\"p\">,</span> <span class=\"s1\">'D'</span><span class=\"p\">}])</span><span class=\"o\">.</span><span class=\"n\">unique_to_each</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n<span class=\"p\">[[</span><span class=\"s1\">'A'</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"s1\">'C'</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"s1\">'D'</span><span class=\"p\">]]</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Iter</span><span class=\"p\">([</span><span class=\"s2\">\"mississippi\"</span><span class=\"p\">,</span> <span class=\"s2\">\"missouri\"</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">unique_to_each</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n<span class=\"p\">[[</span><span class=\"s1\">'p'</span><span class=\"p\">,</span> <span class=\"s1\">'p'</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"s1\">'o'</span><span class=\"p\">,</span> <span class=\"s1\">'u'</span><span class=\"p\">,</span> <span class=\"s1\">'r'</span><span class=\"p\">]]</span>\n</pre>\n</div>\n<div id=\"iter-sample-self-k-1-weights-none-iter\">\n<span id=\"iter-sample\"></span><h4><a href=\"#id101\" rel=\"nofollow\"><tt>Iter.sample(self, k=1, weights=None) <span class=\"pre\">-&gt;</span> \"Iter\"</tt></a></h4>\n<p>Reference: <a href=\"https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.sample\" rel=\"nofollow\">more_itertools.sample</a></p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">iterable</span> <span class=\"o\">=</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Iter</span><span class=\"p\">(</span><span class=\"n\">iterable</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">sample</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"p\">[</span><span class=\"mi\">81</span><span class=\"p\">,</span> <span class=\"mi\">60</span><span class=\"p\">,</span> <span class=\"mi\">96</span><span class=\"p\">,</span> <span class=\"mi\">16</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">iterable</span> <span class=\"o\">=</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">weights</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">*</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">))</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Iter</span><span class=\"p\">(</span><span class=\"n\">iterable</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">sample</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">weights</span><span class=\"o\">=</span><span class=\"n\">weights</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"p\">[</span><span class=\"mi\">79</span><span class=\"p\">,</span> <span class=\"mi\">67</span><span class=\"p\">,</span> <span class=\"mi\">74</span><span class=\"p\">,</span> <span class=\"mi\">66</span><span class=\"p\">,</span> <span class=\"mi\">78</span><span class=\"p\">]</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"s2\">\"abcdefgh\"</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">weights</span> <span class=\"o\">=</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Iter</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">sample</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"o\">=</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">),</span> <span class=\"n\">weights</span><span class=\"o\">=</span><span class=\"n\">weights</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"p\">[</span><span class=\"s1\">'c'</span><span class=\"p\">,</span> <span class=\"s1\">'a'</span><span class=\"p\">,</span> <span class=\"s1\">'b'</span><span class=\"p\">,</span> <span class=\"s1\">'e'</span><span class=\"p\">,</span> <span class=\"s1\">'g'</span><span class=\"p\">,</span> <span class=\"s1\">'d'</span><span class=\"p\">,</span> <span class=\"s1\">'h'</span><span class=\"p\">,</span> <span class=\"s1\">'f'</span><span class=\"p\">]</span>\n\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># This one just to let the doctest run</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">iterable</span> <span class=\"o\">=</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Iter</span><span class=\"p\">(</span><span class=\"n\">iterable</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">sample</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"mi\">0</span> <span class=\"o\">&lt;=</span> <span class=\"n\">x</span> <span class=\"o\">&lt;</span> <span class=\"mi\">100</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span>\n<span class=\"kc\">True</span>\n</pre>\n</div>\n<div id=\"iter-consecutive-groups-self-ordering-lambda-x-x\">\n<span id=\"iter-consecutive-groups\"></span><h4><a href=\"#id102\" rel=\"nofollow\"><tt>Iter.consecutive_groups(self, ordering=lambda x: x)</tt></a></h4>\n<p>Reference: <a href=\"https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.consecutive_groups\" rel=\"nofollow\">more_itertools.consecutive_groups</a></p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">iterable</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"mi\">31</span><span class=\"p\">,</span> <span class=\"mi\">32</span><span class=\"p\">,</span> <span class=\"mi\">33</span><span class=\"p\">,</span> <span class=\"mi\">40</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Iter</span><span class=\"p\">(</span><span class=\"n\">iterable</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">consecutive_groups</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">g</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">g</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"s1\">'</span><span class=\"si\">{v}</span><span class=\"s1\">'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">consume</span><span class=\"p\">()</span>\n<span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">]</span>\n<span class=\"p\">[</span><span class=\"mi\">20</span><span class=\"p\">]</span>\n<span class=\"p\">[</span><span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"mi\">31</span><span class=\"p\">,</span> <span class=\"mi\">32</span><span class=\"p\">,</span> <span class=\"mi\">33</span><span class=\"p\">]</span>\n<span class=\"p\">[</span><span class=\"mi\">40</span><span class=\"p\">]</span>\n</pre>\n</div>\n<div id=\"iter-run-length-encode-self-iter-tuple-t-int\">\n<span id=\"iter-run-length-encode\"></span><h4><a href=\"#id103\" rel=\"nofollow\"><tt>Iter.run_length_encode(self) <span class=\"pre\">-&gt;</span> \"Iter[Tuple[T, <span class=\"pre\">int]]\"</span></tt></a></h4>\n<p>Reference: <a href=\"https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.run_length\" rel=\"nofollow\">more_itertools.run_length</a></p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">uncompressed</span> <span class=\"o\">=</span> <span class=\"s1\">'abbcccdddd'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Iter</span><span class=\"p\">(</span><span class=\"n\">uncompressed</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">run_length_encode</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n<span class=\"p\">[(</span><span class=\"s1\">'a'</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'b'</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'c'</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'d'</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)]</span>\n</pre>\n</div>\n<div id=\"iter-run-length-decode-self-iter\">\n<span id=\"iter-run-length-decode\"></span><h4><a href=\"#id104\" rel=\"nofollow\"><tt>Iter.run_length_decode(self) <span class=\"pre\">-&gt;</span> \"Iter\"</tt></a></h4>\n<p>Reference: <a href=\"https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.run_length\" rel=\"nofollow\">more_itertools.run_length</a></p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">compressed</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"s1\">'a'</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'b'</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'c'</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'d'</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Iter</span><span class=\"p\">(</span><span class=\"n\">compressed</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">run_length_decode</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n<span class=\"p\">[</span><span class=\"s1\">'a'</span><span class=\"p\">,</span> <span class=\"s1\">'b'</span><span class=\"p\">,</span> <span class=\"s1\">'b'</span><span class=\"p\">,</span> <span class=\"s1\">'c'</span><span class=\"p\">,</span> <span class=\"s1\">'c'</span><span class=\"p\">,</span> <span class=\"s1\">'c'</span><span class=\"p\">,</span> <span class=\"s1\">'d'</span><span class=\"p\">,</span> <span class=\"s1\">'d'</span><span class=\"p\">,</span> <span class=\"s1\">'d'</span><span class=\"p\">,</span> <span class=\"s1\">'d'</span><span class=\"p\">]</span>\n</pre>\n</div>\n<div id=\"iter-map-reduce-self-keyfunc-valuefunc-none-reducefunc-none-dict\">\n<span id=\"iter-map-reduce\"></span><h4><a href=\"#id105\" rel=\"nofollow\"><tt>Iter.map_reduce(self, keyfunc, valuefunc=None, reducefunc=None) <span class=\"pre\">-&gt;</span> \"Dict\"</tt></a></h4>\n<p>Reference: <a href=\"https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.map_reduce\" rel=\"nofollow\">more_itertools.map_reduce</a></p>\n<p>This interface mirrors what <a href=\"https://more-itertools.readthedocs.io/en/stable/index.html\" rel=\"nofollow\">more-itertools</a> does in that it returns\na dict. See <tt>map_reduce_it()</tt> for a slightly-modified interface\nthat returns the dict items as another iterator.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">keyfunc</span> <span class=\"o\">=</span> <span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">upper</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"n\">Iter</span><span class=\"p\">(</span><span class=\"s1\">'abbccc'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">map_reduce</span><span class=\"p\">(</span><span class=\"n\">keyfunc</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">())</span>\n<span class=\"p\">[(</span><span class=\"s1\">'A'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">'a'</span><span class=\"p\">]),</span> <span class=\"p\">(</span><span class=\"s1\">'B'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">'b'</span><span class=\"p\">,</span> <span class=\"s1\">'b'</span><span class=\"p\">]),</span> <span class=\"p\">(</span><span class=\"s1\">'C'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">'c'</span><span class=\"p\">,</span> <span class=\"s1\">'c'</span><span class=\"p\">,</span> <span class=\"s1\">'c'</span><span class=\"p\">])]</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">keyfunc</span> <span class=\"o\">=</span> <span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">upper</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">valuefunc</span> <span class=\"o\">=</span> <span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"mi\">1</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"n\">Iter</span><span class=\"p\">(</span><span class=\"s1\">'abbccc'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">map_reduce</span><span class=\"p\">(</span><span class=\"n\">keyfunc</span><span class=\"p\">,</span> <span class=\"n\">valuefunc</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">())</span>\n<span class=\"p\">[(</span><span class=\"s1\">'A'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]),</span> <span class=\"p\">(</span><span class=\"s1\">'B'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]),</span> <span class=\"p\">(</span><span class=\"s1\">'C'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">])]</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">keyfunc</span> <span class=\"o\">=</span> <span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">upper</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">valuefunc</span> <span class=\"o\">=</span> <span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"mi\">1</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">reducefunc</span> <span class=\"o\">=</span> <span class=\"nb\">sum</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"n\">Iter</span><span class=\"p\">(</span><span class=\"s1\">'abbccc'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">map_reduce</span><span class=\"p\">(</span><span class=\"n\">keyfunc</span><span class=\"p\">,</span> <span class=\"n\">valuefunc</span><span class=\"p\">,</span> <span class=\"n\">reducefunc</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">())</span>\n<span class=\"p\">[(</span><span class=\"s1\">'A'</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'B'</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'C'</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)]</span>\n</pre>\n<p>Note the warning given in the <a href=\"https://more-itertools.readthedocs.io/en/stable/index.html\" rel=\"nofollow\">more-itertools</a> docs about how\nlists are created before the reduce step. This means you always want\nto filter <em>before</em> applying map_reduce, not after.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">all_items</span> <span class=\"o\">=</span> <span class=\"n\">_range</span><span class=\"p\">(</span><span class=\"mi\">30</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">keyfunc</span> <span class=\"o\">=</span> <span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">%</span> <span class=\"mi\">2</span>  <span class=\"c1\"># Evens map to 0; odds to 1</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">categories</span> <span class=\"o\">=</span> <span class=\"n\">Iter</span><span class=\"p\">(</span><span class=\"n\">all_items</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"o\">&lt;=</span><span class=\"n\">x</span><span class=\"o\">&lt;=</span><span class=\"mi\">20</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">map_reduce</span><span class=\"p\">(</span><span class=\"n\">keyfunc</span><span class=\"o\">=</span><span class=\"n\">keyfunc</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">categories</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">())</span>\n<span class=\"p\">[(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">14</span><span class=\"p\">,</span> <span class=\"mi\">16</span><span class=\"p\">,</span> <span class=\"mi\">18</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">]),</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"mi\">13</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"mi\">17</span><span class=\"p\">,</span> <span class=\"mi\">19</span><span class=\"p\">])]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">summaries</span> <span class=\"o\">=</span> <span class=\"n\">Iter</span><span class=\"p\">(</span><span class=\"n\">all_items</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"o\">&lt;=</span><span class=\"n\">x</span><span class=\"o\">&lt;=</span><span class=\"mi\">20</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">map_reduce</span><span class=\"p\">(</span><span class=\"n\">keyfunc</span><span class=\"o\">=</span><span class=\"n\">keyfunc</span><span class=\"p\">,</span> <span class=\"n\">reducefunc</span><span class=\"o\">=</span><span class=\"nb\">sum</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">summaries</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">())</span>\n<span class=\"p\">[(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">90</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">75</span><span class=\"p\">)]</span>\n</pre>\n</div>\n<div id=\"iter-map-reduce-it-self-keyfunc-callable-k-valuefunc-optional-callable-v-none-reducefunc-optional-callable-r-none-iter-tuple-k-r\">\n<span id=\"iter-map-reduce-it\"></span><h4><a href=\"#id106\" rel=\"nofollow\"><tt>Iter.map_reduce_it(self, keyfunc: <span class=\"pre\">Callable[...,</span> K], valuefunc: <span class=\"pre\">Optional[Callable[...,</span> V]] = None, reducefunc: <span class=\"pre\">Optional[Callable[...,</span> R]] = None, ) <span class=\"pre\">-&gt;</span> \"Iter[Tuple[K, <span class=\"pre\">R]]\"</span></tt></a></h4>\n<p>Reference: <a href=\"https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.map_reduce\" rel=\"nofollow\">more_itertools.map_reduce</a></p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">keyfunc</span> <span class=\"o\">=</span> <span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">upper</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Iter</span><span class=\"p\">(</span><span class=\"s1\">'abbccc'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">map_reduce_it</span><span class=\"p\">(</span><span class=\"n\">keyfunc</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n<span class=\"p\">[(</span><span class=\"s1\">'A'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">'a'</span><span class=\"p\">]),</span> <span class=\"p\">(</span><span class=\"s1\">'B'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">'b'</span><span class=\"p\">,</span> <span class=\"s1\">'b'</span><span class=\"p\">]),</span> <span class=\"p\">(</span><span class=\"s1\">'C'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">'c'</span><span class=\"p\">,</span> <span class=\"s1\">'c'</span><span class=\"p\">,</span> <span class=\"s1\">'c'</span><span class=\"p\">])]</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">keyfunc</span> <span class=\"o\">=</span> <span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">upper</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">valuefunc</span> <span class=\"o\">=</span> <span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"mi\">1</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Iter</span><span class=\"p\">(</span><span class=\"s1\">'abbccc'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">map_reduce_it</span><span class=\"p\">(</span><span class=\"n\">keyfunc</span><span class=\"p\">,</span> <span class=\"n\">valuefunc</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n<span class=\"p\">[(</span><span class=\"s1\">'A'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]),</span> <span class=\"p\">(</span><span class=\"s1\">'B'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]),</span> <span class=\"p\">(</span><span class=\"s1\">'C'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">])]</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">keyfunc</span> <span class=\"o\">=</span> <span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">upper</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">valuefunc</span> <span class=\"o\">=</span> <span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"mi\">1</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">reducefunc</span> <span class=\"o\">=</span> <span class=\"nb\">sum</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Iter</span><span class=\"p\">(</span><span class=\"s1\">'abbccc'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">map_reduce_it</span><span class=\"p\">(</span><span class=\"n\">keyfunc</span><span class=\"p\">,</span> <span class=\"n\">valuefunc</span><span class=\"p\">,</span> <span class=\"n\">reducefunc</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n<span class=\"p\">[(</span><span class=\"s1\">'A'</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'B'</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'C'</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)]</span>\n</pre>\n</div>\n<div id=\"sink-iter-exactly-n-self-n-predicate-bool-bool\">\n<span id=\"iter-exactly-n\"></span><h4><a href=\"#id107\" rel=\"nofollow\">\ud83c\udfa7 <tt>Iter.exactly_n(self, n, predicate=bool) <span class=\"pre\">-&gt;</span> \"bool\"</tt></a></h4>\n<p>Docstring TBD</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Iter</span><span class=\"p\">([</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">exactly_n</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"kc\">True</span>\n</pre>\n</div>\n<div id=\"iter-all-equal-self\">\n<span id=\"iter-all-equal\"></span><h4><a href=\"#id108\" rel=\"nofollow\"><tt>Iter.all_equal(self)</tt></a></h4>\n</div>\n<div id=\"iter-first-true-self\">\n<span id=\"iter-first-true\"></span><h4><a href=\"#id109\" rel=\"nofollow\"><tt>Iter.first_true(self)</tt></a></h4>\n</div>\n<div id=\"iter-quantify-self\">\n<span id=\"iter-quantify\"></span><h4><a href=\"#id110\" rel=\"nofollow\"><tt>Iter.quantify(self)</tt></a></h4>\n</div>\n<div id=\"iter-islice-extended-self-args\">\n<span id=\"iter-islice-extended\"></span><h4><a href=\"#id111\" rel=\"nofollow\"><tt>Iter.islice_extended(self, *args)</tt></a></h4>\n<p>Reference: <a href=\"https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.islice_extended\" rel=\"nofollow\">more_itertools.islice_extended</a></p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Iter</span><span class=\"p\">(</span><span class=\"s1\">'abcdefgh'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">islice_extended</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n<span class=\"p\">[</span><span class=\"s1\">'e'</span><span class=\"p\">,</span> <span class=\"s1\">'f'</span><span class=\"p\">,</span> <span class=\"s1\">'g'</span><span class=\"p\">]</span>\n</pre>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Iter</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">islice_extended</span><span class=\"p\">(</span> <span class=\"mi\">110</span><span class=\"p\">,</span> <span class=\"mi\">99</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n<span class=\"p\">[</span><span class=\"mi\">110</span><span class=\"p\">,</span> <span class=\"mi\">108</span><span class=\"p\">,</span> <span class=\"mi\">106</span><span class=\"p\">,</span> <span class=\"mi\">104</span><span class=\"p\">,</span> <span class=\"mi\">102</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">]</span>\n</pre>\n</div>\n<div id=\"iter-first-self\">\n<span id=\"iter-first\"></span><h4><a href=\"#id112\" rel=\"nofollow\"><tt>Iter.first(self)</tt></a></h4>\n<p>Reference: <a href=\"https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.first\" rel=\"nofollow\">more_itertools.first</a></p>\n</div>\n<div id=\"iter-last-self\">\n<span id=\"iter-last\"></span><h4><a href=\"#id113\" rel=\"nofollow\"><tt>Iter.last(self)</tt></a></h4>\n<p>Reference: <a href=\"https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.last\" rel=\"nofollow\">more_itertools.last</a></p>\n</div>\n<div id=\"iter-one-self\">\n<span id=\"iter-one\"></span><h4><a href=\"#id114\" rel=\"nofollow\"><tt>Iter.one(self)</tt></a></h4>\n<p>Reference: <a href=\"https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.one\" rel=\"nofollow\">more_itertools.one</a></p>\n</div>\n<div id=\"iter-only-self-default-none-too-long-valueerror-t\">\n<span id=\"iter-only\"></span><h4><a href=\"#id115\" rel=\"nofollow\"><tt>Iter.only(self, default=None, too_long=ValueError) <span class=\"pre\">-&gt;</span> \"T\"</tt></a></h4>\n<p>Reference: <a href=\"https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.one\" rel=\"nofollow\">more_itertools.one</a></p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Iter</span><span class=\"p\">([])</span><span class=\"o\">.</span><span class=\"n\">only</span><span class=\"p\">(</span><span class=\"n\">default</span><span class=\"o\">=</span><span class=\"s1\">'missing'</span><span class=\"p\">)</span>\n<span class=\"s1\">'missing'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Iter</span><span class=\"p\">([</span><span class=\"mi\">42</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">only</span><span class=\"p\">(</span><span class=\"n\">default</span><span class=\"o\">=</span><span class=\"s1\">'missing'</span><span class=\"p\">)</span>\n<span class=\"mi\">42</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Iter</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">only</span><span class=\"p\">()</span>\n<span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n<span class=\"ne\">ValueError</span><span class=\"p\">:</span> <span class=\"o\">...</span>\n</pre>\n</div>\n<div id=\"iter-strip-self-pred-iter-t\">\n<span id=\"iter-strip\"></span><h4><a href=\"#id116\" rel=\"nofollow\"><tt>Iter.strip(self, pred) <span class=\"pre\">-&gt;</span> \"Iter[T]\"</tt></a></h4>\n<p>Reference: <a href=\"https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.strip\" rel=\"nofollow\">more_itertools.strip</a></p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">iterable</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">pred</span> <span class=\"o\">=</span> <span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"p\">{</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"s1\">''</span><span class=\"p\">}</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Iter</span><span class=\"p\">(</span><span class=\"n\">iterable</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">strip</span><span class=\"p\">(</span><span class=\"n\">pred</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n<span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n</pre>\n</div>\n<div id=\"iter-lstrip-self-pred-iter-t\">\n<span id=\"iter-lstrip\"></span><h4><a href=\"#id117\" rel=\"nofollow\"><tt>Iter.lstrip(self, pred) <span class=\"pre\">-&gt;</span> \"Iter[T]\"</tt></a></h4>\n<p>Reference: <a href=\"https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.lstrip\" rel=\"nofollow\">more_itertools.lstrip</a></p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">iterable</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">pred</span> <span class=\"o\">=</span> <span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"p\">{</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"s1\">''</span><span class=\"p\">}</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Iter</span><span class=\"p\">(</span><span class=\"n\">iterable</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">lstrip</span><span class=\"p\">(</span><span class=\"n\">pred</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n<span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">]</span>\n</pre>\n</div>\n<div id=\"iter-rstrip-self-pred-iter-t\">\n<span id=\"iter-rstrip\"></span><h4><a href=\"#id118\" rel=\"nofollow\"><tt>Iter.rstrip(self, pred) <span class=\"pre\">-&gt;</span> \"Iter[T]\"</tt></a></h4>\n<p>Reference: <a href=\"https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.rstrip\" rel=\"nofollow\">more_itertools.rstrip</a></p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">iterable</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">pred</span> <span class=\"o\">=</span> <span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"p\">{</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"s1\">''</span><span class=\"p\">}</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Iter</span><span class=\"p\">(</span><span class=\"n\">iterable</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">rstrip</span><span class=\"p\">(</span><span class=\"n\">pred</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n<span class=\"p\">[</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n</pre>\n</div>\n<div id=\"iter-filter-except-self-validator-exceptions-iter-t\">\n<span id=\"iter-filter-except\"></span><h4><a href=\"#id119\" rel=\"nofollow\"><tt>Iter.filter_except(self, validator, *exceptions) <span class=\"pre\">-&gt;</span> \"Iter[T]\"</tt></a></h4>\n<p>Reference: <a href=\"https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.filter_except\" rel=\"nofollow\">more_itertools.filter_except</a></p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">iterable</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'1'</span><span class=\"p\">,</span> <span class=\"s1\">'2'</span><span class=\"p\">,</span> <span class=\"s1\">'three'</span><span class=\"p\">,</span> <span class=\"s1\">'4'</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Iter</span><span class=\"p\">(</span><span class=\"n\">iterable</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">filter_except</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"ne\">ValueError</span><span class=\"p\">,</span> <span class=\"ne\">TypeError</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n<span class=\"p\">[</span><span class=\"s1\">'1'</span><span class=\"p\">,</span> <span class=\"s1\">'2'</span><span class=\"p\">,</span> <span class=\"s1\">'4'</span><span class=\"p\">]</span>\n</pre>\n</div>\n<div id=\"iter-map-except-self-function-exceptions-iter\">\n<span id=\"iter-map-except\"></span><h4><a href=\"#id120\" rel=\"nofollow\"><tt>Iter.map_except(self, function, *exceptions) <span class=\"pre\">-&gt;</span> \"Iter\"</tt></a></h4>\n<p>Reference: <a href=\"https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.map_except\" rel=\"nofollow\">more_itertools.map_except</a></p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">iterable</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'1'</span><span class=\"p\">,</span> <span class=\"s1\">'2'</span><span class=\"p\">,</span> <span class=\"s1\">'three'</span><span class=\"p\">,</span> <span class=\"s1\">'4'</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Iter</span><span class=\"p\">(</span><span class=\"n\">iterable</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">map_except</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"ne\">ValueError</span><span class=\"p\">,</span> <span class=\"ne\">TypeError</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n<span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]</span>\n</pre>\n</div>\n<div id=\"iter-nth-or-last-self-n-default-marker-t\">\n<span id=\"iter-nth-or-last\"></span><h4><a href=\"#id121\" rel=\"nofollow\"><tt>Iter.nth_or_last(self, n, default=_marker) <span class=\"pre\">-&gt;</span> \"T\"</tt></a></h4>\n<p>Reference: <a href=\"https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.nth_or_last\" rel=\"nofollow\">more_itertools.nth_or_last</a></p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Iter</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">nth_or_last</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"mi\">2</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Iter</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">nth_or_last</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"mi\">1</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Iter</span><span class=\"p\">([])</span><span class=\"o\">.</span><span class=\"n\">nth_or_last</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s1\">'some default'</span><span class=\"p\">)</span>\n<span class=\"s1\">'some default'</span>\n</pre>\n</div>\n<div id=\"iter-nth-self-n-default-none\">\n<span id=\"iter-nth\"></span><h4><a href=\"#id122\" rel=\"nofollow\"><tt>Iter.nth(self, n, default=None)</tt></a></h4>\n<p>Reference: <a href=\"https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.nth\" rel=\"nofollow\">more_itertools.nth</a></p>\n</div>\n<div id=\"iter-take-self-n-int-iter\">\n<span id=\"iter-take\"></span><h4><a href=\"#id123\" rel=\"nofollow\"><tt>Iter.take(self, n: int) <span class=\"pre\">-&gt;</span> \"Iter\"</tt></a></h4>\n<p>Reference: <a href=\"https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.take\" rel=\"nofollow\">more_itertools.take</a></p>\n</div>\n<div id=\"iter-tail-self\">\n<span id=\"iter-tail\"></span><h4><a href=\"#id124\" rel=\"nofollow\"><tt>Iter.tail(self)</tt></a></h4>\n<p>Reference: <a href=\"https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.tail\" rel=\"nofollow\">more_itertools.tail</a></p>\n</div>\n<div id=\"iter-unique-everseen-self\">\n<span id=\"iter-unique-everseen\"></span><h4><a href=\"#id125\" rel=\"nofollow\"><tt>Iter.unique_everseen(self)</tt></a></h4>\n<p>Reference: <a href=\"https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.unique_everseen\" rel=\"nofollow\">more_itertools.unique_everseen</a></p>\n</div>\n<div id=\"iter-unique-justseen-self\">\n<span id=\"iter-unique-justseen\"></span><h4><a href=\"#id126\" rel=\"nofollow\"><tt>Iter.unique_justseen(self)</tt></a></h4>\n<p>Reference: <a href=\"https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.unique_justseen\" rel=\"nofollow\">more_itertools.unique_justseen</a></p>\n</div>\n<div id=\"iter-distinct-permutations-self\">\n<span id=\"iter-distinct-permutations\"></span><h4><a href=\"#id127\" rel=\"nofollow\"><tt>Iter.distinct_permutations(self)</tt></a></h4>\n<p>Reference: <a href=\"https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.distinct_permutations\" rel=\"nofollow\">more_itertools.distinct_permutations</a></p>\n</div>\n<div id=\"iter-distinct-combinations-self-r\">\n<span id=\"iter-distinct-combinations\"></span><h4><a href=\"#id128\" rel=\"nofollow\"><tt>Iter.distinct_combinations(self, r)</tt></a></h4>\n<p>Reference: <a href=\"https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.distinct_combinations\" rel=\"nofollow\">more_itertools.distinct_combinations</a></p>\n</div>\n<div id=\"iter-circular-shifts-self-iter\">\n<span id=\"iter-circular-shifts\"></span><h4><a href=\"#id129\" rel=\"nofollow\"><tt>Iter.circular_shifts(self) <span class=\"pre\">-&gt;</span> \"Iter\"</tt></a></h4>\n<p>Reference: <a href=\"https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.circular_shifts\" rel=\"nofollow\">more_itertools.circular_shifts</a></p>\n</div>\n<div id=\"iter-partitions-self-iter\">\n<span id=\"iter-partitions\"></span><h4><a href=\"#id130\" rel=\"nofollow\"><tt>Iter.partitions(self) <span class=\"pre\">-&gt;</span> \"Iter\"</tt></a></h4>\n<p>Reference: <a href=\"https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.partitions\" rel=\"nofollow\">more_itertools.partitions</a></p>\n</div>\n<div id=\"iter-set-partitions-self-k-none-iter\">\n<span id=\"iter-set-partitions\"></span><h4><a href=\"#id131\" rel=\"nofollow\"><tt>Iter.set_partitions(self, k=None) <span class=\"pre\">-&gt;</span> \"Iter\"</tt></a></h4>\n<p>Reference: <a href=\"https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.set_partitions\" rel=\"nofollow\">more_itertools.set_partitions</a></p>\n</div>\n<div id=\"iter-powerset-self\">\n<span id=\"iter-powerset\"></span><h4><a href=\"#id132\" rel=\"nofollow\"><tt>Iter.powerset(self)</tt></a></h4>\n<p>Reference: <a href=\"https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.powerset\" rel=\"nofollow\">more_itertools.powerset</a></p>\n</div>\n<div id=\"iter-random-product-self\">\n<span id=\"iter-random-product\"></span><h4><a href=\"#id133\" rel=\"nofollow\"><tt>Iter.random_product(self)</tt></a></h4>\n<p>Reference: <a href=\"https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.random_product\" rel=\"nofollow\">more_itertools.random_product</a></p>\n</div>\n<div id=\"iter-random-permutation-self\">\n<span id=\"iter-random-permutation\"></span><h4><a href=\"#id134\" rel=\"nofollow\"><tt>Iter.random_permutation(self)</tt></a></h4>\n<p>Reference: <a href=\"https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.random_permutation\" rel=\"nofollow\">more_itertools.random_permutation</a></p>\n</div>\n<div id=\"iter-random-combination-self\">\n<span id=\"iter-random-combination\"></span><h4><a href=\"#id135\" rel=\"nofollow\"><tt>Iter.random_combination(self)</tt></a></h4>\n<p>Reference: <a href=\"https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.random_combination\" rel=\"nofollow\">more_itertools.random_combination</a></p>\n</div>\n<div id=\"iter-random-combination-with-replacement-self\">\n<span id=\"iter-random-combination-with-replacement\"></span><h4><a href=\"#id136\" rel=\"nofollow\"><tt>Iter.random_combination_with_replacement(self)</tt></a></h4>\n<p>Reference: <a href=\"https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.random_combination_with_replacement\" rel=\"nofollow\">more_itertools.random_combination_with_replacement</a></p>\n</div>\n<div id=\"iter-nth-combination-self\">\n<span id=\"iter-nth-combination\"></span><h4><a href=\"#id137\" rel=\"nofollow\"><tt>Iter.nth_combination(self)</tt></a></h4>\n<p>Reference: <a href=\"https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.nth_combination\" rel=\"nofollow\">more_itertools.nth_combination</a></p>\n</div>\n<div id=\"iter-always-iterable-self\">\n<span id=\"iter-always-iterable\"></span><h4><a href=\"#id138\" rel=\"nofollow\"><tt>Iter.always_iterable(self)</tt></a></h4>\n<p>Reference: <a href=\"https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.always_iterable\" rel=\"nofollow\">more_itertools.always_iterable</a></p>\n</div>\n<div id=\"iter-always-reversible-self\">\n<span id=\"iter-always-reversible\"></span><h4><a href=\"#id139\" rel=\"nofollow\"><tt>Iter.always_reversible(self)</tt></a></h4>\n<p>Reference: <a href=\"https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.always_reversible\" rel=\"nofollow\">more_itertools.always_reversible</a></p>\n</div>\n<div id=\"classmethod-iter-with-iter-cls-context-manager\">\n<span id=\"iter-with-iter\"></span><h4><a href=\"#id140\" rel=\"nofollow\"><tt>@classmethod Iter.with_iter(cls, context_manager)</tt></a></h4>\n<p>Reference: <a href=\"https://more-itertools.readthedocs.io/en/stable/api.html?highlight=numeric_range#more_itertools.with_iter\" rel=\"nofollow\">more_itertools.with_iter</a></p>\n<p>Note: Any context manager which returns an iterable is a candidate for\n<a href=\"#iter-with-iter\" rel=\"nofollow\">Iter.with_iter</a>.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">tempfile</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">with</span> <span class=\"n\">tempfile</span><span class=\"o\">.</span><span class=\"n\">TemporaryDirectory</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">td</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>     <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">td</span> <span class=\"o\">+</span> <span class=\"s1\">'text.txt'</span><span class=\"p\">,</span> <span class=\"s1\">'w'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>         <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">writelines</span><span class=\"p\">([</span><span class=\"s1\">'abc</span><span class=\"se\">\\n</span><span class=\"s1\">'</span><span class=\"p\">,</span> <span class=\"s1\">'def</span><span class=\"se\">\\n</span><span class=\"s1\">'</span><span class=\"p\">,</span> <span class=\"s1\">'ghi</span><span class=\"se\">\\n</span><span class=\"s1\">'</span><span class=\"p\">])</span>\n<span class=\"o\">...</span>     <span class=\"n\">Iter</span><span class=\"o\">.</span><span class=\"n\">with_iter</span><span class=\"p\">(</span><span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">td</span> <span class=\"o\">+</span> <span class=\"s1\">'text.txt'</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">upper</span><span class=\"p\">())</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n<span class=\"p\">[</span><span class=\"s1\">'ABC</span><span class=\"se\">\\n</span><span class=\"s1\">'</span><span class=\"p\">,</span> <span class=\"s1\">'DEF</span><span class=\"se\">\\n</span><span class=\"s1\">'</span><span class=\"p\">,</span> <span class=\"s1\">'GHI</span><span class=\"se\">\\n</span><span class=\"s1\">'</span><span class=\"p\">]</span>\n</pre>\n<p>See also: <a href=\"#iter-open\" rel=\"nofollow\">Iter.open</a></p>\n<p>\ud83d\udee0 TODO: perhaps we should get rid of <a href=\"#iter-open\" rel=\"nofollow\">Iter.open</a> and just use this?</p>\n</div>\n<div id=\"classmethod-iter-iter-except-cls-func-exception-first-none-iter\">\n<span id=\"iter-iter-except\"></span><h4><a href=\"#id141\" rel=\"nofollow\"><tt>@classmethod Iter.iter_except(cls, func, exception, first=None) <span class=\"pre\">-&gt;</span> \"Iter\"</tt></a></h4>\n<p>Reference: <a href=\"https://more-itertools.readthedocs.io/en/stable/api.html?highlight=numeric_range#more_itertools.iter_except\" rel=\"nofollow\">more_itertools.iter_except</a></p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Iter</span><span class=\"o\">.</span><span class=\"n\">iter_except</span><span class=\"p\">(</span><span class=\"n\">l</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">,</span> <span class=\"ne\">IndexError</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n<span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]</span>\n</pre>\n</div>\n<div id=\"iter-locate-self-pred-bool-window-size-none-iter\">\n<span id=\"iter-locate\"></span><h4><a href=\"#id142\" rel=\"nofollow\"><tt>Iter.locate(self, pred=bool, window_size=None) <span class=\"pre\">-&gt;</span> \"Iter\"</tt></a></h4>\n<p>Reference: <a href=\"https://more-itertools.readthedocs.io/en/stable/api.html?highlight=numeric_range#more_itertools.locate\" rel=\"nofollow\">more_itertools.locate</a></p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Iter</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">locate</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n<span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]</span>\n</pre>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Iter</span><span class=\"p\">([</span><span class=\"s1\">'a'</span><span class=\"p\">,</span> <span class=\"s1\">'b'</span><span class=\"p\">,</span> <span class=\"s1\">'c'</span><span class=\"p\">,</span> <span class=\"s1\">'b'</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">locate</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">==</span> <span class=\"s1\">'b'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n<span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n</pre>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">iterable</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">pred</span> <span class=\"o\">=</span> <span class=\"k\">lambda</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"n\">args</span> <span class=\"o\">==</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Iter</span><span class=\"p\">(</span><span class=\"n\">iterable</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">locate</span><span class=\"p\">(</span><span class=\"n\">pred</span><span class=\"o\">=</span><span class=\"n\">pred</span><span class=\"p\">,</span> <span class=\"n\">window_size</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n<span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">]</span>\n</pre>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">itertools</span> <span class=\"kn\">import</span> <span class=\"n\">count</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">more_itertools</span> <span class=\"kn\">import</span> <span class=\"n\">seekable</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">3</span> <span class=\"o\">*</span> <span class=\"n\">n</span> <span class=\"o\">+</span> <span class=\"mi\">1</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">%</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"k\">else</span> <span class=\"n\">n</span> <span class=\"o\">//</span> <span class=\"mi\">2</span> <span class=\"k\">for</span> <span class=\"n\">n</span> <span class=\"ow\">in</span> <span class=\"n\">count</span><span class=\"p\">())</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">it</span> <span class=\"o\">=</span> <span class=\"n\">Iter</span><span class=\"p\">(</span><span class=\"n\">source</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">seekable</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">pred</span> <span class=\"o\">=</span> <span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">&gt;</span> <span class=\"mi\">100</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># TODO: can we avoid making two instances?</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">indexes</span> <span class=\"o\">=</span> <span class=\"n\">Iter</span><span class=\"p\">(</span><span class=\"n\">it</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">locate</span><span class=\"p\">(</span><span class=\"n\">pred</span><span class=\"o\">=</span><span class=\"n\">pred</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"nb\">next</span><span class=\"p\">(</span><span class=\"n\">indexes</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">it</span><span class=\"o\">.</span><span class=\"n\">seek</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">next</span><span class=\"p\">(</span><span class=\"n\">it</span><span class=\"p\">)</span>\n<span class=\"mi\">106</span>\n</pre>\n</div>\n<div id=\"iter-rlocate-self-pred-bool-window-size-none-iter\">\n<span id=\"iter-rlocate\"></span><h4><a href=\"#id143\" rel=\"nofollow\"><tt>Iter.rlocate(self, pred=bool, window_size=None) <span class=\"pre\">-&gt;</span> \"Iter\"</tt></a></h4>\n<p>Reference: <a href=\"https://more-itertools.readthedocs.io/en/stable/api.html?highlight=numeric_range#more_itertools.rlocate\" rel=\"nofollow\">more_itertools.rlocate</a></p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Iter</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">rlocate</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>  <span class=\"c1\"># Truthy at 1, 2, and 4</span>\n<span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n</pre>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">pred</span> <span class=\"o\">=</span> <span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">==</span> <span class=\"s1\">'b'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Iter</span><span class=\"p\">(</span><span class=\"s1\">'abcb'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">rlocate</span><span class=\"p\">(</span><span class=\"n\">pred</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n<span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n</pre>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">iterable</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">pred</span> <span class=\"o\">=</span> <span class=\"k\">lambda</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"n\">args</span> <span class=\"o\">==</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Iter</span><span class=\"p\">(</span><span class=\"n\">iterable</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">rlocate</span><span class=\"p\">(</span><span class=\"n\">pred</span><span class=\"o\">=</span><span class=\"n\">pred</span><span class=\"p\">,</span> <span class=\"n\">window_size</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n<span class=\"p\">[</span><span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n</pre>\n</div>\n<div id=\"iter-replace-self-pred-substitutes-count-none-window-size-1-iter\">\n<span id=\"iter-replace\"></span><h4><a href=\"#id144\" rel=\"nofollow\"><tt>Iter.replace(self, pred, substitutes, count=None, window_size=1) <span class=\"pre\">-&gt;</span> \"Iter\"</tt></a></h4>\n<p>Reference: <a href=\"https://more-itertools.readthedocs.io/en/stable/api.html?highlight=numeric_range#more_itertools.replace\" rel=\"nofollow\">more_itertools.replace</a></p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">iterable</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">pred</span> <span class=\"o\">=</span> <span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">==</span> <span class=\"mi\">0</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">substitutes</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Iter</span><span class=\"p\">(</span><span class=\"n\">iterable</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"n\">pred</span><span class=\"p\">,</span> <span class=\"n\">substitutes</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n<span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n</pre>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">iterable</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">pred</span> <span class=\"o\">=</span> <span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">==</span> <span class=\"mi\">0</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">substitutes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"kc\">None</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Iter</span><span class=\"p\">(</span><span class=\"n\">iterable</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"n\">pred</span><span class=\"p\">,</span> <span class=\"n\">substitutes</span><span class=\"p\">,</span> <span class=\"n\">count</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n<span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]</span>\n</pre>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">iterable</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">window_size</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">pred</span> <span class=\"o\">=</span> <span class=\"k\">lambda</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"n\">args</span> <span class=\"o\">==</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>  <span class=\"c1\"># 3 items passed to pred</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">substitutes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]</span> <span class=\"c1\"># Splice in these items</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Iter</span><span class=\"p\">(</span><span class=\"n\">iterable</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span>\n<span class=\"o\">...</span>     <span class=\"n\">pred</span><span class=\"p\">,</span> <span class=\"n\">substitutes</span><span class=\"p\">,</span> <span class=\"n\">window_size</span><span class=\"o\">=</span><span class=\"n\">window_size</span>\n<span class=\"o\">...</span> <span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n<span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">]</span>\n</pre>\n</div>\n<div id=\"classmethod-iter-numeric-range-cls-args-iter\">\n<span id=\"iter-numeric-range\"></span><h4><a href=\"#id145\" rel=\"nofollow\"><tt>@classmethod Iter.numeric_range(cls, *args) <span class=\"pre\">-&gt;</span> \"Iter\"</tt></a></h4>\n<p>Reference: <a href=\"https://more-itertools.readthedocs.io/en/stable/api.html?highlight=numeric_range#more_itertools.numeric_range\" rel=\"nofollow\">more_itertools.numeric_range</a></p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Iter</span><span class=\"o\">.</span><span class=\"n\">numeric_range</span><span class=\"p\">(</span><span class=\"mf\">3.5</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n<span class=\"p\">[</span><span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"mf\">2.0</span><span class=\"p\">,</span> <span class=\"mf\">3.0</span><span class=\"p\">]</span>\n</pre>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">decimal</span> <span class=\"kn\">import</span> <span class=\"n\">Decimal</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"n\">Decimal</span><span class=\"p\">(</span><span class=\"s1\">'2.1'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">stop</span> <span class=\"o\">=</span> <span class=\"n\">Decimal</span><span class=\"p\">(</span><span class=\"s1\">'5.1'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Iter</span><span class=\"o\">.</span><span class=\"n\">numeric_range</span><span class=\"p\">(</span><span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"n\">stop</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n<span class=\"p\">[</span><span class=\"n\">Decimal</span><span class=\"p\">(</span><span class=\"s1\">'2.1'</span><span class=\"p\">),</span> <span class=\"n\">Decimal</span><span class=\"p\">(</span><span class=\"s1\">'3.1'</span><span class=\"p\">),</span> <span class=\"n\">Decimal</span><span class=\"p\">(</span><span class=\"s1\">'4.1'</span><span class=\"p\">)]</span>\n</pre>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">fractions</span> <span class=\"kn\">import</span> <span class=\"n\">Fraction</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"n\">Fraction</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>  <span class=\"c1\"># Start at 1/2</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">stop</span> <span class=\"o\">=</span> <span class=\"n\">Fraction</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>  <span class=\"c1\"># End at 5/2</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">step</span> <span class=\"o\">=</span> <span class=\"n\">Fraction</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>  <span class=\"c1\"># Count by 1/2</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Iter</span><span class=\"o\">.</span><span class=\"n\">numeric_range</span><span class=\"p\">(</span><span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"n\">stop</span><span class=\"p\">,</span> <span class=\"n\">step</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n<span class=\"p\">[</span><span class=\"n\">Fraction</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"n\">Fraction</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"n\">Fraction</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"n\">Fraction</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)]</span>\n</pre>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Iter</span><span class=\"o\">.</span><span class=\"n\">numeric_range</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">1.0</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n<span class=\"p\">[</span><span class=\"mf\">3.0</span><span class=\"p\">,</span> <span class=\"mf\">2.0</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">]</span>\n</pre>\n</div>\n<div id=\"iter-side-effect-self-func-chunk-size-none-before-none-after-none\">\n<span id=\"iter-side-effect\"></span><h4><a href=\"#id146\" rel=\"nofollow\"><tt>Iter.side_effect(self, func, chunk_size=None, before=None, after=None)</tt></a></h4>\n<p>Reference: <a href=\"https://more-itertools.readthedocs.io/en/stable/api.html?highlight=numeric_range#more_itertools.side_effect\" rel=\"nofollow\">more_itertools.side_effect</a></p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">def</span> <span class=\"nf\">f</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"k\">if</span> <span class=\"n\">item</span> <span class=\"o\">==</span> <span class=\"mi\">3</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>         <span class=\"k\">raise</span> <span class=\"ne\">Exception</span><span class=\"p\">(</span><span class=\"s1\">'got 3'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Iter</span><span class=\"o\">.</span><span class=\"n\">range</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">side_effect</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">consume</span><span class=\"p\">()</span>\n<span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n<span class=\"ne\">Exception</span><span class=\"p\">:</span> <span class=\"n\">got</span> <span class=\"mi\">3</span>\n</pre>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">func</span> <span class=\"o\">=</span> <span class=\"k\">lambda</span> <span class=\"n\">item</span><span class=\"p\">:</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Received </span><span class=\"si\">{}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">))</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Iter</span><span class=\"o\">.</span><span class=\"n\">range</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">side_effect</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">consume</span><span class=\"p\">()</span>\n<span class=\"n\">Received</span> <span class=\"mi\">0</span>\n<span class=\"n\">Received</span> <span class=\"mi\">1</span>\n</pre>\n</div>\n<div id=\"iter-iterate-self\">\n<span id=\"iter-iterate\"></span><h4><a href=\"#id147\" rel=\"nofollow\"><tt>Iter.iterate(self)</tt></a></h4>\n</div>\n<div id=\"iter-difference-self-func-operator-sub-initial-none\">\n<span id=\"iter-difference\"></span><h4><a href=\"#id148\" rel=\"nofollow\"><tt>Iter.difference(self, func=operator.sub, *, initial=None)</tt></a></h4>\n<p>Reference: <a href=\"https://more-itertools.readthedocs.io/en/stable/api.html?highlight=difference#more_itertools.difference\" rel=\"nofollow\">more_itertools.difference</a></p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">iterable</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Iter</span><span class=\"p\">(</span><span class=\"n\">iterable</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">difference</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n<span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]</span>\n</pre>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">iterable</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">24</span><span class=\"p\">,</span> <span class=\"mi\">120</span><span class=\"p\">]</span>  <span class=\"c1\"># Factorial sequence</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">func</span> <span class=\"o\">=</span> <span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">//</span> <span class=\"n\">y</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Iter</span><span class=\"p\">(</span><span class=\"n\">iterable</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">difference</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n<span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">]</span>\n</pre>\n</div>\n<div id=\"iter-make-decorator-self\">\n<span id=\"iter-make-decorator\"></span><h4><a href=\"#id149\" rel=\"nofollow\"><tt>Iter.make_decorator(self)</tt></a></h4>\n</div>\n<div id=\"iter-sequenceview-self\">\n<span id=\"iter-sequenceview\"></span><h4><a href=\"#id150\" rel=\"nofollow\"><tt>Iter.SequenceView(self)</tt></a></h4>\n</div>\n<div id=\"iter-time-limited-self-limit-seconds-iter\">\n<span id=\"iter-time-limited\"></span><h4><a href=\"#id151\" rel=\"nofollow\"><tt>Iter.time_limited(self, limit_seconds) <span class=\"pre\">-&gt;</span> \"Iter\"</tt></a></h4>\n<p>Reference: <a href=\"https://more-itertools.readthedocs.io/en/stable/api.html?highlight=time_limited#more_itertools.time_limited\" rel=\"nofollow\">more_itertools.time_limited</a></p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">time</span> <span class=\"kn\">import</span> <span class=\"n\">sleep</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">def</span> <span class=\"nf\">generator</span><span class=\"p\">():</span>\n<span class=\"o\">...</span>     <span class=\"k\">yield</span> <span class=\"mi\">1</span>\n<span class=\"o\">...</span>     <span class=\"k\">yield</span> <span class=\"mi\">2</span>\n<span class=\"o\">...</span>     <span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mf\">0.2</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>     <span class=\"k\">yield</span> <span class=\"mi\">3</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Iter</span><span class=\"p\">(</span><span class=\"n\">generator</span><span class=\"p\">())</span><span class=\"o\">.</span><span class=\"n\">time_limited</span><span class=\"p\">(</span><span class=\"mf\">0.1</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n<span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span>\n</pre>\n</div>\n<div id=\"sink-iter-consume-self-n-optional-int-none-optional-iter-t\">\n<span id=\"iter-consume\"></span><h4><a href=\"#id152\" rel=\"nofollow\">\ud83c\udfa7 <tt>Iter.consume(self, n: Optional[int] = None) <span class=\"pre\">-&gt;</span> <span class=\"pre\">\"Optional[Iter[T]]\"</span></tt></a></h4>\n<p>If n is not provided, the entire iterator is consumed and\n<tt>None</tt> is returned. Otherwise, an iterator will <em>always</em> be\nreturned, even if n is greater than the number of items left in\nthe iterator.</p>\n<p>In this example, the source has more elements than what we consume,\nso there will still be data available on the chain:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">consume</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n<span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">]</span>\n</pre>\n<p>We can bump up the count of how many items can be consumed. Note that\neven though <tt>n</tt> is greater than the number of items in the source,\nit is still required to call <a href=\"#iter-collect\" rel=\"nofollow\">Iter.collect</a> to consume the remaining\nitems.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">consume</span><span class=\"p\">(</span><span class=\"mi\">50</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n<span class=\"p\">[]</span>\n</pre>\n<p>Finally, if <tt>n</tt> is not provided, the entire stream is consumed.\nIn this scenario, <a href=\"#iter-collect\" rel=\"nofollow\">Iter.collect</a> would fail since nothing is being\nreturned from the consume call.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">assert</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">consume</span><span class=\"p\">()</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span>\n</pre>\n</div>\n<div id=\"iter-tabulate-self\">\n<span id=\"iter-tabulate\"></span><h4><a href=\"#id153\" rel=\"nofollow\"><tt>Iter.tabulate(self)</tt></a></h4>\n</div>\n<div id=\"source-classmethod-iter-repeatfunc-cls-func-args-times-none\">\n<span id=\"iter-repeatfunc\"></span><h4><a href=\"#id154\" rel=\"nofollow\">\ud83c\udfa4 <tt>@classmethod Iter.repeatfunc(cls, func, *args, times=None)</tt></a></h4>\n<p>Docstring TBD</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Iter</span><span class=\"o\">.</span><span class=\"n\">repeatfunc</span><span class=\"p\">(</span><span class=\"n\">operator</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">times</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n<span class=\"p\">[</span><span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">]</span>\n</pre>\n</div>\n<div id=\"iter-wrap-self-ends-sequence-t-t\">\n<span id=\"iter-wrap\"></span><h4><a href=\"#id155\" rel=\"nofollow\"><tt>Iter.wrap(self, ends: \"Sequence[T, T]\" = <span class=\"pre\">\"()\")</span></tt></a></h4>\n<p>Other examples for ends: \u2018\u201d\u2019 * 2, or \u2018`\u2019 * 2, or \u2018[]\u2019 etc.</p>\n</div>\n<div id=\"iter-print-self-template-i-v-iter-t\">\n<span id=\"iter-print\"></span><h4><a href=\"#id156\" rel=\"nofollow\"><tt>Iter.print(self, <span class=\"pre\">template=\"{i}:</span> <span class=\"pre\">{v}\")</span> <span class=\"pre\">-&gt;</span> \"Iter[T]\"</tt></a></h4>\n<p>Printing during the execution of an iterator. Mostly useful\nfor debugging. Returns another iterator instance through which\nthe original data is passed unchanged. This means you can include\na <cite>print()</cite> step as necessary to observe data during iteration.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Iter</span><span class=\"p\">(</span><span class=\"s1\">'abc'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">print</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n<span class=\"mi\">0</span><span class=\"p\">:</span> <span class=\"n\">a</span>\n<span class=\"mi\">1</span><span class=\"p\">:</span> <span class=\"n\">b</span>\n<span class=\"mi\">2</span><span class=\"p\">:</span> <span class=\"n\">c</span>\n<span class=\"p\">[</span><span class=\"s1\">'a'</span><span class=\"p\">,</span> <span class=\"s1\">'b'</span><span class=\"p\">,</span> <span class=\"s1\">'c'</span><span class=\"p\">]</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"p\">(</span>\n<span class=\"o\">...</span>    <span class=\"n\">Iter</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">))</span>\n<span class=\"o\">...</span>        <span class=\"o\">.</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"s1\">'before filter </span><span class=\"si\">{i}</span><span class=\"s1\">: </span><span class=\"si\">{v}</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>        <span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">&gt;</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>        <span class=\"o\">.</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"s1\">'after filter </span><span class=\"si\">{i}</span><span class=\"s1\">: </span><span class=\"si\">{v}</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>        <span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n<span class=\"o\">...</span> <span class=\"p\">)</span>\n<span class=\"n\">before</span> <span class=\"nb\">filter</span> <span class=\"mi\">0</span><span class=\"p\">:</span> <span class=\"mi\">0</span>\n<span class=\"n\">before</span> <span class=\"nb\">filter</span> <span class=\"mi\">1</span><span class=\"p\">:</span> <span class=\"mi\">1</span>\n<span class=\"n\">before</span> <span class=\"nb\">filter</span> <span class=\"mi\">2</span><span class=\"p\">:</span> <span class=\"mi\">2</span>\n<span class=\"n\">before</span> <span class=\"nb\">filter</span> <span class=\"mi\">3</span><span class=\"p\">:</span> <span class=\"mi\">3</span>\n<span class=\"n\">after</span> <span class=\"nb\">filter</span> <span class=\"mi\">0</span><span class=\"p\">:</span> <span class=\"mi\">3</span>\n<span class=\"n\">before</span> <span class=\"nb\">filter</span> <span class=\"mi\">4</span><span class=\"p\">:</span> <span class=\"mi\">4</span>\n<span class=\"n\">after</span> <span class=\"nb\">filter</span> <span class=\"mi\">1</span><span class=\"p\">:</span> <span class=\"mi\">4</span>\n<span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]</span>\n</pre>\n</div>\n<div id=\"source-classmethod-iter-from-queue-cls-q-queue-queue-timeout-none-sentinel-none\">\n<span id=\"iter-from-queue\"></span><h4><a href=\"#id157\" rel=\"nofollow\">\ud83c\udfa4 <tt>@classmethod Iter.from_queue(cls, q: queue.Queue, timeout=None, sentinel=None)</tt></a></h4>\n<p>Wrap a queue with an iterator interface. This allows it to participate\nin chaining operations. The iterator will block while waiting for\nnew values to appear on the queue. This is useful: it allows you\nto easily and safely pass data between threads or processes, and\nfeed the incoming data into a pipeline.</p>\n<p>The sentinel value, default <tt>None</tt>, will terminate the iterator.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">q</span> <span class=\"o\">=</span> <span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"n\">Queue</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># This line puts stuff onto a queue</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">chain</span><span class=\"p\">([</span><span class=\"kc\">None</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"n\">q</span><span class=\"o\">.</span><span class=\"n\">put</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">consume</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># This is where we consume data from the queue:</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Iter</span><span class=\"o\">.</span><span class=\"n\">from_queue</span><span class=\"p\">(</span><span class=\"n\">q</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"mi\">2</span> <span class=\"o\">&lt;</span> <span class=\"n\">x</span> <span class=\"o\">&lt;</span> <span class=\"mi\">9</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n<span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">]</span>\n</pre>\n<p>If <tt>None</tt> had not been chained onto the data, the iterator would\nhave waited in <a href=\"#iter-collect\" rel=\"nofollow\">Iter.collect</a> forever.</p>\n</div>\n<div id=\"sink-iter-into-queue-self-q-queue-queue\">\n<span id=\"iter-into-queue\"></span><h4><a href=\"#id158\" rel=\"nofollow\">\ud83c\udfa7 <tt>Iter.into_queue(self, q: queue.Queue)</tt></a></h4>\n<p>This is a sink, like <a href=\"#iter-collect\" rel=\"nofollow\">Iter.collect</a>, that consumes data from\nan iterator chain and puts the data into the given queue.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">q</span> <span class=\"o\">=</span> <span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"n\">Queue</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># This demonstrates the queue sink</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">into_queue</span><span class=\"p\">(</span><span class=\"n\">q</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># Code below is only for verification</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">out</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">finished</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">while</span> <span class=\"ow\">not</span> <span class=\"n\">finished</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>     <span class=\"k\">try</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>         <span class=\"n\">out</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">q</span><span class=\"o\">.</span><span class=\"n\">get_nowait</span><span class=\"p\">())</span>\n<span class=\"o\">...</span>     <span class=\"k\">except</span> <span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"n\">Empty</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>         <span class=\"n\">finished</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">out</span>\n<span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]</span>\n</pre>\n</div>\n<div id=\"sink-iter-send-self-collector-generator-close-collector-when-done-false-none\">\n<span id=\"iter-send\"></span><h4><a href=\"#id159\" rel=\"nofollow\">\ud83c\udfa7 <tt>Iter.send(self, collector: Generator, close_collector_when_done=False) <span class=\"pre\">-&gt;</span> \"None\"</tt></a></h4>\n<p>See also: <a href=\"https://more-itertools.readthedocs.io/en/stable/api.html?highlight=numeric_range#more_itertools.consumer\" rel=\"nofollow\">more_itertools.consumer</a></p>\n<p>Send data into a generator. You do not have to first call <tt>next()</tt>\non the generator. <a href=\"#iter-send\" rel=\"nofollow\">Iter.send</a> will do this for you.</p>\n<p>\u26a0 Look carefully at the examples below; you\u2019ll see that the\n<tt>yield</tt> keyword is wrapped in a second set of parens, e.g.\n<tt><span class=\"pre\">output.append((yield))</span></tt>. This is required!</p>\n<p>Simple case:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">output</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">def</span> <span class=\"nf\">collector</span><span class=\"p\">():</span>\n<span class=\"o\">...</span>     <span class=\"k\">while</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>         <span class=\"n\">output</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">((</span><span class=\"k\">yield</span><span class=\"p\">))</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Iter</span><span class=\"o\">.</span><span class=\"n\">range</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">send</span><span class=\"p\">(</span><span class=\"n\">collector</span><span class=\"p\">())</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">output</span>\n<span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span>\n</pre>\n<p>Note that the generator is <strong>not</strong> closed by default after the iterable is\nexhausted. But this can be changed. If you choose to close the\ngenerator, use the parameter:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">output</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">def</span> <span class=\"nf\">collector</span><span class=\"p\">():</span>\n<span class=\"o\">...</span>     <span class=\"k\">while</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>         <span class=\"n\">output</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">((</span><span class=\"k\">yield</span><span class=\"p\">))</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">g</span> <span class=\"o\">=</span> <span class=\"n\">collector</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Iter</span><span class=\"o\">.</span><span class=\"n\">range</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">send</span><span class=\"p\">(</span><span class=\"n\">g</span><span class=\"p\">,</span> <span class=\"n\">close_collector_when_done</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Iter</span><span class=\"o\">.</span><span class=\"n\">range</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">send</span><span class=\"p\">(</span><span class=\"n\">g</span><span class=\"p\">)</span>\n<span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n<span class=\"ne\">StopIteration</span>\n</pre>\n<p>The default behaviour is that the generator is left open which means you\ncan keep using it for other iterators:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">output</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">def</span> <span class=\"nf\">collector</span><span class=\"p\">():</span>\n<span class=\"o\">...</span>     <span class=\"k\">while</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>         <span class=\"n\">output</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">((</span><span class=\"k\">yield</span><span class=\"p\">))</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">g</span> <span class=\"o\">=</span> <span class=\"n\">collector</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Iter</span><span class=\"o\">.</span><span class=\"n\">range</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">send</span><span class=\"p\">(</span><span class=\"n\">g</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Iter</span><span class=\"o\">.</span><span class=\"n\">range</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">13</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">send</span><span class=\"p\">(</span><span class=\"n\">g</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Iter</span><span class=\"o\">.</span><span class=\"n\">range</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">103</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">send</span><span class=\"p\">(</span><span class=\"n\">g</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">output</span>\n<span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">101</span><span class=\"p\">,</span> <span class=\"mi\">102</span><span class=\"p\">]</span>\n</pre>\n<p>If the generator is closed before the iteration is complete,\nyou\u2019ll get a <tt>StopIteration</tt> exception:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">output</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">def</span> <span class=\"nf\">collector</span><span class=\"p\">():</span>\n<span class=\"o\">...</span>   <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>       <span class=\"n\">output</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">((</span><span class=\"k\">yield</span><span class=\"p\">))</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Iter</span><span class=\"o\">.</span><span class=\"n\">range</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">send</span><span class=\"p\">(</span><span class=\"n\">collector</span><span class=\"p\">())</span>\n<span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n<span class=\"ne\">StopIteration</span>\n</pre>\n<p>Note that <a href=\"#iter-send\" rel=\"nofollow\">Iter.send</a> is a sink, so no further chaining is allowed.</p>\n</div>\n<div id=\"iter-send-also-self-collector-generator-iter\">\n<span id=\"iter-send-also\"></span><h4><a href=\"#id160\" rel=\"nofollow\"><tt>Iter.send_also(self, collector: Generator) <span class=\"pre\">-&gt;</span> \"Iter\"</tt></a></h4>\n<p>Reference: <a href=\"https://more-itertools.readthedocs.io/en/stable/api.html?highlight=numeric_range#more_itertools.consumer\" rel=\"nofollow\">more_itertools.consumer</a></p>\n<p>Some ideas around a reverse iterator as a sink. The requirement to\nfirst \u201cnext\u201d a just-started generator before you can send values\ninto it is irritating, but not insurmountable. This method will\nautomatically detect the \u201cjust-started generator\u201d situation, do the\n<tt>next()</tt>, and then send in the first value as necessary.</p>\n<p>Simple case:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">output</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">def</span> <span class=\"nf\">collector</span><span class=\"p\">():</span>\n<span class=\"o\">...</span>     <span class=\"k\">while</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>         <span class=\"n\">output</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">((</span><span class=\"k\">yield</span><span class=\"p\">))</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Iter</span><span class=\"o\">.</span><span class=\"n\">range</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">send_also</span><span class=\"p\">(</span><span class=\"n\">collector</span><span class=\"p\">())</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n<span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">output</span>\n<span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span>\n</pre>\n<p>If the generator is closed before the iteration is complete,\nyou\u2019ll get an exception (Python 3.7+):</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">output</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">def</span> <span class=\"nf\">collector</span><span class=\"p\">():</span>\n<span class=\"o\">...</span>   <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">builtins</span><span class=\"o\">.</span><span class=\"n\">range</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>       <span class=\"n\">output</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">((</span><span class=\"k\">yield</span><span class=\"p\">))</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Iter</span><span class=\"o\">.</span><span class=\"n\">range</span><span class=\"p\">(</span><span class=\"mi\">50</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">send_also</span><span class=\"p\">(</span><span class=\"n\">collector</span><span class=\"p\">())</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>  <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n<span class=\"ne\">RuntimeError</span>\n</pre>\n<p>Note that the above doesn\u2019t happen in Python &lt; 3.7 (which includes\npypy 7.3.1 that matches Python 3.6.9 compatibility). Instead, you\ncollect out the items up to until the point that the collector\nreturns; in this case, you\u2019d get [0, 1, 2]. This change was made\nas part of <a href=\"https://www.python.org/dev/peps/pep-0479/\" rel=\"nofollow\">PEP 479</a>.</p>\n<p>Regardless, for any Python it\u2019s recommended that your generator\nlive at least as long as the iterator feeding it.</p>\n</div>\n</div>\n<div id=\"flux-class-iterdict-userdict\">\n<span id=\"iterdict\"></span><h3><a href=\"#id161\" rel=\"nofollow\">\ud83d\udee0 <tt>class IterDict(UserDict)</tt></a></h3>\n<p>The idea here was to make a custom dict where several of\nthe standard dict methods return <tt>Iter</tt> instances, which can then\nbe chained. I\u2019m not sure if this will be kept yet.</p>\n<div id=\"iterdict-keys-self-iter\">\n<span id=\"iterdict-keys\"></span><h4><a href=\"#id162\" rel=\"nofollow\"><tt>IterDict.keys(self) <span class=\"pre\">-&gt;</span> \"Iter\"</tt></a></h4>\n</div>\n<div id=\"iterdict-values-self-iter\">\n<span id=\"iterdict-values\"></span><h4><a href=\"#id163\" rel=\"nofollow\"><tt>IterDict.values(self) <span class=\"pre\">-&gt;</span> \"Iter\"</tt></a></h4>\n</div>\n<div id=\"iterdict-items-self-iter\">\n<span id=\"iterdict-items\"></span><h4><a href=\"#id164\" rel=\"nofollow\"><tt>IterDict.items(self) <span class=\"pre\">-&gt;</span> \"Iter\"</tt></a></h4>\n</div>\n<div id=\"iterdict-update-self-args-kwargs-iterdict\">\n<span id=\"iterdict-update\"></span><h4><a href=\"#id165\" rel=\"nofollow\"><tt>IterDict.update(self, *args, **kwargs) <span class=\"pre\">-&gt;</span> \"IterDict\"</tt></a></h4>\n</div>\n</div>\n<div id=\"insert-separator-iterable-iterable-any-glue-any-iterable-any\">\n<span id=\"insert-separator\"></span><h3><a href=\"#id166\" rel=\"nofollow\"><tt>insert_separator(iterable: Iterable[Any], glue: Any) <span class=\"pre\">-&gt;</span> \"Iterable[Any]\"</tt></a></h3>\n<p>Similar functionality can be obtained with, e.g.,\ninterleave, as in</p>\n<pre>&gt;&gt;&gt; result = Iter('caleb').interleave(Iter.repeat('x')).collect()\n&gt;&gt;&gt; result == list('cxaxlxexbx')\nTrue\n</pre>\n<p>But you\u2019ll see a trailing \u201cx\u201d there, which join avoids. join\nmakes sure to only add the glue separator if another element\nhas arrived.</p>\n<p>It can handle strings without any special considerations, but it doesn\u2019t\ndo any special handling for bytes and bytearrays. For that, rather\nlook at <cite>concat()</cite>.</p>\n</div>\n<div id=\"concat-iterable-iterable-anystr-glue-anystr-anystr\">\n<span id=\"concat\"></span><h3><a href=\"#id167\" rel=\"nofollow\"><tt>concat(iterable: Iterable[AnyStr], glue: AnyStr) <span class=\"pre\">-&gt;</span> \"AnyStr\"</tt></a></h3>\n<p>Concatenate strings, bytes and bytearrays. It is careful to avoid the\nproblem with single bytes becoming integers, and it looks at the value\nof <cite>glue</cite> to know whether to handle bytes or strings.</p>\n<p>This function can raise <tt>ValueError</tt> if called with something\nother than <tt>bytes</tt>, <tt>bytearray</tt> or <tt>str</tt>.</p>\n</div>\n<div id=\"source-from-queue-q-queue-queue-timeout-none-sentinel-none-iter\">\n<span id=\"from-queue\"></span><h3><a href=\"#id168\" rel=\"nofollow\">\ud83c\udfa4 <tt>from_queue(q: queue.Queue, timeout=None, sentinel=None) <span class=\"pre\">-&gt;</span> \"Iter\"</tt></a></h3>\n<p>Wrap a queue with an iterator interface. This allows it to participate\nin chaining operations. The iterator will block while waiting for\nnew values to appear on the queue. This is useful: it allows you\nto easily and safely pass data between threads or processes, and\nfeed the incoming data into a pipeline.</p>\n<p>The sentinel value, default <tt>None</tt>, will terminate the iterator.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">q</span> <span class=\"o\">=</span> <span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"n\">Queue</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># This line puts stuff onto a queue</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">chain</span><span class=\"p\">([</span><span class=\"kc\">None</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"n\">q</span><span class=\"o\">.</span><span class=\"n\">put</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">consume</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">from_queue</span><span class=\"p\">(</span><span class=\"n\">q</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"mi\">2</span> <span class=\"o\">&lt;</span> <span class=\"n\">x</span> <span class=\"o\">&lt;</span> <span class=\"mi\">9</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n<span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">]</span>\n</pre>\n</div>\n</div>\n<div id=\"dev-instructions\">\n<h2><a href=\"#id9\" rel=\"nofollow\">Dev Instructions</a></h2>\n<div id=\"setup\">\n<h3>Setup</h3>\n<pre>$ python -m venv venv\n$ <span class=\"nb\">source</span> venv/bin/activate\n<span class=\"o\">(</span>venv<span class=\"o\">)</span> $ pip install -e .<span class=\"o\">[</span>dev,test<span class=\"o\">]</span>\n</pre>\n</div>\n<div id=\"testing\">\n<h3>Testing</h3>\n<pre><span class=\"o\">(</span>venv<span class=\"o\">)</span> $ pytest --cov\n</pre>\n</div>\n<div id=\"documentation\">\n<h3>Documentation</h3>\n<p>To regenerate the documentation, file <tt>README.rst</tt>:</p>\n<pre><span class=\"o\">(</span>venv<span class=\"o\">)</span> $ python regenerate_readme.py -m excitertools.py &gt; README.rst\n</pre>\n</div>\n<div id=\"releasing\">\n<h3>Releasing</h3>\n<p>To do a release, we\u2019re using <a href=\"https://pypi.org/project/bumpymcbumpface/\" rel=\"nofollow\">bumpymcbumpface</a>.\nMake sure that is set up correctly according to its own documentation. I\nlike to use <a href=\"https://github.com/pipxproject/pipx\" rel=\"nofollow\">pipx</a> to install and\nmanage these kinds of tools.</p>\n<pre>$ bumpymcbumpface --push-git --push-pypi\n</pre>\n<div>\n<div><br></div>\n<div><br></div>\n</div>\n<hr class=\"docutils\">\n<div>\n<div><br></div>\n<div><br></div>\n</div>\n<blockquote>\nWork is a necessary evil to be avoided.\n<em>Mark Twain</em></blockquote>\n</div>\n</div>\n\n          </div>"}, "last_serial": 7162392, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "b6b63e799bcc395df37f5d685ebdd9c0", "sha256": "eb7e4c204c0df8130cfb1399cc4421517ec1ced0f661e23c012879560f45b488"}, "downloads": -1, "filename": "excitertools-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "b6b63e799bcc395df37f5d685ebdd9c0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 13516, "upload_time": "2020-05-03T06:33:49", "upload_time_iso_8601": "2020-05-03T06:33:49.247025Z", "url": "https://files.pythonhosted.org/packages/3c/9b/139a5434f8bc782436c48fdc968b7f2abeec136432837c38447cf5d50df3/excitertools-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f47f1ec8b2ddef8d7e7b2de9c2a7ea11", "sha256": "75d16169a8710f09e90a167cabff5f2f66031d19daee74986c1ac5eada1308dc"}, "downloads": -1, "filename": "excitertools-0.0.1.tar.gz", "has_sig": false, "md5_digest": "f47f1ec8b2ddef8d7e7b2de9c2a7ea11", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28843, "upload_time": "2020-05-03T06:33:53", "upload_time_iso_8601": "2020-05-03T06:33:53.092396Z", "url": "https://files.pythonhosted.org/packages/70/82/b5bd7b749223b11127f00f76feb783bbcd4add802c01013512685a61c4cc/excitertools-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "d90f48d5a84d7ec5c4172ae4e3f48b56", "sha256": "a3aa90d724c5e6d78cd591735d2fa866b822ba4221f5e1bd0af431ccfca23b60"}, "downloads": -1, "filename": "excitertools-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "d90f48d5a84d7ec5c4172ae4e3f48b56", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 13583, "upload_time": "2020-05-03T06:40:17", "upload_time_iso_8601": "2020-05-03T06:40:17.146509Z", "url": "https://files.pythonhosted.org/packages/0a/06/844eadae34d9c236536e76251c02505277b5c375d84c674907a118622dd6/excitertools-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "86ef3052509db0d4d16f4f7defda749a", "sha256": "778fc80de7a370e9b0bca05516a68bd5ec580053bd2b84f35457ae46be67b71f"}, "downloads": -1, "filename": "excitertools-0.0.2.tar.gz", "has_sig": false, "md5_digest": "86ef3052509db0d4d16f4f7defda749a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28949, "upload_time": "2020-05-03T06:40:22", "upload_time_iso_8601": "2020-05-03T06:40:22.135715Z", "url": "https://files.pythonhosted.org/packages/2d/bd/5a55ceff6fa32e01f85ab50596e1cbc5497c5db97c729d5b99443796b50c/excitertools-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "90d0ec7fc0f01ea008eacf2aff8d5773", "sha256": "fce4c408becb0032953df349d60ad471c133cbc8fdd32c7548b23f0703b73977"}, "downloads": -1, "filename": "excitertools-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "90d0ec7fc0f01ea008eacf2aff8d5773", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 13584, "upload_time": "2020-05-03T06:45:31", "upload_time_iso_8601": "2020-05-03T06:45:31.602801Z", "url": "https://files.pythonhosted.org/packages/73/f5/5f008278938e3f48883bd67346390ecf3e91ec527257f2d2a3d893c23ae9/excitertools-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "789aa685d5970ef664ba5b093ff97f62", "sha256": "2e94466da4e881d80c70bddc3915377ac453c668f8c3d7ffe6fba93a234944bd"}, "downloads": -1, "filename": "excitertools-0.0.3.tar.gz", "has_sig": false, "md5_digest": "789aa685d5970ef664ba5b093ff97f62", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28976, "upload_time": "2020-05-03T06:45:35", "upload_time_iso_8601": "2020-05-03T06:45:35.044177Z", "url": "https://files.pythonhosted.org/packages/80/8f/bd67c01afa12fe0a37e01a2e0808b8ba410af84444d4d2911d82ddcc7d75/excitertools-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "4780dc964dbc7c16146839bd47928937", "sha256": "770b1ffed10eb16705c155064c38184209d530979f7b8645b964c9e09c559a59"}, "downloads": -1, "filename": "excitertools-0.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "4780dc964dbc7c16146839bd47928937", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 13718, "upload_time": "2020-05-03T06:59:34", "upload_time_iso_8601": "2020-05-03T06:59:34.147980Z", "url": "https://files.pythonhosted.org/packages/98/8d/d794421ccde0119508026474c490d732e47bd7247a981f80aca46bb81f7c/excitertools-0.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b2d822c03419076d31783fcd5dc1cec5", "sha256": "d1f76fe22e502ab371c3247849c554ba6b2197b7b1171d642b007461996b93af"}, "downloads": -1, "filename": "excitertools-0.0.4.tar.gz", "has_sig": false, "md5_digest": "b2d822c03419076d31783fcd5dc1cec5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29568, "upload_time": "2020-05-03T06:59:37", "upload_time_iso_8601": "2020-05-03T06:59:37.323744Z", "url": "https://files.pythonhosted.org/packages/72/01/ed67cc0529462904b8a136843ce0ce2e42000055b0bc89b7482d974b489b/excitertools-0.0.4.tar.gz", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "625315dd695c8d7ce630a80746068273", "sha256": "ce339c6f6ab422157622ad76ab75b41a07289433fc39329316096a2ef297f2f5"}, "downloads": -1, "filename": "excitertools-0.0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "625315dd695c8d7ce630a80746068273", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 15860, "upload_time": "2020-05-03T13:55:16", "upload_time_iso_8601": "2020-05-03T13:55:16.251807Z", "url": "https://files.pythonhosted.org/packages/84/28/25edcea65bdb09788c7080bd60cb04afa19a37bc28c241e420cb10873491/excitertools-0.0.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5ec8cf5b2e88d161f1f6d633bf44706b", "sha256": "0584ed00fcaa2236cb9159a91be89718419d6b553e108afae3d3c79ac37fd2da"}, "downloads": -1, "filename": "excitertools-0.0.5.tar.gz", "has_sig": false, "md5_digest": "5ec8cf5b2e88d161f1f6d633bf44706b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 36085, "upload_time": "2020-05-03T13:55:19", "upload_time_iso_8601": "2020-05-03T13:55:19.720794Z", "url": "https://files.pythonhosted.org/packages/0e/55/d0dbe72ddf2905430c9d97274f3d8d477dc0d57f3ce02a9e20f2fcdc2833/excitertools-0.0.5.tar.gz", "yanked": false}], "0.0.6": [{"comment_text": "", "digests": {"md5": "b6fdab5f1ecbe316a619b6f4b4e17dea", "sha256": "5e234afcc915c4f968cec6e60cfa75981e7b859407503fc51ad3fc2f29887d08"}, "downloads": -1, "filename": "excitertools-0.0.6-py3-none-any.whl", "has_sig": false, "md5_digest": "b6fdab5f1ecbe316a619b6f4b4e17dea", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 15891, "upload_time": "2020-05-03T13:59:11", "upload_time_iso_8601": "2020-05-03T13:59:11.940642Z", "url": "https://files.pythonhosted.org/packages/70/27/cecc883a3bffa54a12a67131d94870d0df9d07a22c49fe2971a32e35efee/excitertools-0.0.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2e3bb4c25b863ea0b7715989389cfeb2", "sha256": "b0206df43c5a7dc8b6ae93a4c10e6568c540177f5639c3c28d5b4bce62b33259"}, "downloads": -1, "filename": "excitertools-0.0.6.tar.gz", "has_sig": false, "md5_digest": "2e3bb4c25b863ea0b7715989389cfeb2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 36163, "upload_time": "2020-05-03T13:59:15", "upload_time_iso_8601": "2020-05-03T13:59:15.728665Z", "url": "https://files.pythonhosted.org/packages/09/d8/893760304e40a73fc483f14b7f2cada7d203867e9fc6148d96f6a6e20b18/excitertools-0.0.6.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "a7e6204dc97afa8ea0e9b384e14f2bd7", "sha256": "f23a1b5bd44d8cf1e9a2c83eda583eae1e943041c5294b5389ab13ab377d8001"}, "downloads": -1, "filename": "excitertools-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "a7e6204dc97afa8ea0e9b384e14f2bd7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 19963, "upload_time": "2020-05-04T05:35:53", "upload_time_iso_8601": "2020-05-04T05:35:53.705693Z", "url": "https://files.pythonhosted.org/packages/34/93/61d9bb08b9ac61821da7c7141282edf6fca0946110436013265ba8df5fb8/excitertools-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "82998b71fc98cb26056651a802c950b7", "sha256": "c6fbdece26530f8d1205f25deb27f2671ffe223ff5747a49f56786843696543c"}, "downloads": -1, "filename": "excitertools-0.1.0.tar.gz", "has_sig": false, "md5_digest": "82998b71fc98cb26056651a802c950b7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 48737, "upload_time": "2020-05-04T05:35:58", "upload_time_iso_8601": "2020-05-04T05:35:58.387570Z", "url": "https://files.pythonhosted.org/packages/ba/30/b7b05e4ba64801498d049e94e34edc9598e2bce7ad63ff5f316d2d405597/excitertools-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "d7ea69ded4ad3d05dfb6d1ace98b6648", "sha256": "15d90f04349042d96f71847314ba4753b039a6a6bb4d9b3b60dcf93ab16a7dcf"}, "downloads": -1, "filename": "excitertools-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "d7ea69ded4ad3d05dfb6d1ace98b6648", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 19962, "upload_time": "2020-05-04T05:40:06", "upload_time_iso_8601": "2020-05-04T05:40:06.632682Z", "url": "https://files.pythonhosted.org/packages/bc/d8/f55623dd4b466634b61890fc33d9d52f62a438f04b985c91734c98b1d4eb/excitertools-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "45b9415053847c011e8123602a141673", "sha256": "f87f1d9ee46dfa81401c5b1ad431d9798dd24634d2facca69a6bfebdf17f9475"}, "downloads": -1, "filename": "excitertools-0.1.1.tar.gz", "has_sig": false, "md5_digest": "45b9415053847c011e8123602a141673", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 48736, "upload_time": "2020-05-04T05:40:11", "upload_time_iso_8601": "2020-05-04T05:40:11.087771Z", "url": "https://files.pythonhosted.org/packages/d2/2f/604b740c8f643fb6309fc8b6b673926a8996b292aaa668c8203598c23440/excitertools-0.1.1.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "173927528f1596afde6dcc194c67b358", "sha256": "0e15a06bb3c2994f9e3fbf0f155cfe16f24ad235c0418b1d3385cf23a0abaf8e"}, "downloads": -1, "filename": "excitertools-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "173927528f1596afde6dcc194c67b358", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 20345, "upload_time": "2020-05-04T07:12:52", "upload_time_iso_8601": "2020-05-04T07:12:52.875629Z", "url": "https://files.pythonhosted.org/packages/e8/4b/f78e51c238ffd6f78f5a854c98820a2e77220e8152ece61f1962a687f146/excitertools-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d22ace5e8cc7d4000b1220a85a69e6e9", "sha256": "023e739d5661cd80795042354fa346010d93ab7180775e834deaa01a9841b12e"}, "downloads": -1, "filename": "excitertools-0.2.0.tar.gz", "has_sig": false, "md5_digest": "d22ace5e8cc7d4000b1220a85a69e6e9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 49796, "upload_time": "2020-05-04T07:12:57", "upload_time_iso_8601": "2020-05-04T07:12:57.103097Z", "url": "https://files.pythonhosted.org/packages/de/41/4f3dfc3ab2180572256026b95e79d86a4eda867522f10f0ad2ff526a102d/excitertools-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "caae572b49c3b41919c827c5b8a10d43", "sha256": "8c4442b654574f90d80e81e8085404fd24af09e220a4dde1f27d6b0faac9529d"}, "downloads": -1, "filename": "excitertools-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "caae572b49c3b41919c827c5b8a10d43", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 20354, "upload_time": "2020-05-04T07:16:36", "upload_time_iso_8601": "2020-05-04T07:16:36.967287Z", "url": "https://files.pythonhosted.org/packages/e4/5d/4af0e5e7a4bd3bd5added38c863d5ee9ffd1ee94811ab3990e70f3167a4d/excitertools-0.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "701d7feb04d279e3c3be2df6e501deaa", "sha256": "100e8110625102b8f5d8bbca584d205a463bbac67a5e7e7c99c14f17225517fe"}, "downloads": -1, "filename": "excitertools-0.2.1.tar.gz", "has_sig": false, "md5_digest": "701d7feb04d279e3c3be2df6e501deaa", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 49821, "upload_time": "2020-05-04T07:16:43", "upload_time_iso_8601": "2020-05-04T07:16:43.050127Z", "url": "https://files.pythonhosted.org/packages/68/0d/ffe66bb8157e312ddbc59da8658215aef57327c2800c215d55e82c420a9c/excitertools-0.2.1.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "79e3031bfd5046b08c4705f05c1d2c60", "sha256": "05feb8e2666c0f3e50542aa043091c083f9043e33dc3a4ca6b9da679f80856d5"}, "downloads": -1, "filename": "excitertools-0.2.2-py3-none-any.whl", "has_sig": false, "md5_digest": "79e3031bfd5046b08c4705f05c1d2c60", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 20977, "upload_time": "2020-05-04T09:05:40", "upload_time_iso_8601": "2020-05-04T09:05:40.991185Z", "url": "https://files.pythonhosted.org/packages/27/8c/a27866d320297b4f3cd12acf1e3b727418ee91bcdecb7dfd97fa1f00d3ae/excitertools-0.2.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f3471283d4b3b4ebc09990fa15033ac7", "sha256": "d7cc2e0c6cfc27c0fec665e6c3d8798ca9bef2c61ceeaa09665cacf8bf071cf4"}, "downloads": -1, "filename": "excitertools-0.2.2.tar.gz", "has_sig": false, "md5_digest": "f3471283d4b3b4ebc09990fa15033ac7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 51619, "upload_time": "2020-05-04T09:05:45", "upload_time_iso_8601": "2020-05-04T09:05:45.810537Z", "url": "https://files.pythonhosted.org/packages/03/14/5854d8ca325c39bc611ce86cb4a4554cea067881b6c85d2e349e79d064b9/excitertools-0.2.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "79e3031bfd5046b08c4705f05c1d2c60", "sha256": "05feb8e2666c0f3e50542aa043091c083f9043e33dc3a4ca6b9da679f80856d5"}, "downloads": -1, "filename": "excitertools-0.2.2-py3-none-any.whl", "has_sig": false, "md5_digest": "79e3031bfd5046b08c4705f05c1d2c60", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 20977, "upload_time": "2020-05-04T09:05:40", "upload_time_iso_8601": "2020-05-04T09:05:40.991185Z", "url": "https://files.pythonhosted.org/packages/27/8c/a27866d320297b4f3cd12acf1e3b727418ee91bcdecb7dfd97fa1f00d3ae/excitertools-0.2.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f3471283d4b3b4ebc09990fa15033ac7", "sha256": "d7cc2e0c6cfc27c0fec665e6c3d8798ca9bef2c61ceeaa09665cacf8bf071cf4"}, "downloads": -1, "filename": "excitertools-0.2.2.tar.gz", "has_sig": false, "md5_digest": "f3471283d4b3b4ebc09990fa15033ac7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 51619, "upload_time": "2020-05-04T09:05:45", "upload_time_iso_8601": "2020-05-04T09:05:45.810537Z", "url": "https://files.pythonhosted.org/packages/03/14/5854d8ca325c39bc611ce86cb4a4554cea067881b6c85d2e349e79d064b9/excitertools-0.2.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:44:53 2020"}