{"info": {"author": "Ilia Barahovsky", "author_email": "barahilia@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "*******\nspamspy\n*******\n\n.. image:: https://travis-ci.org/barahilia/spamspy.svg?branch=master\n    :target: https://travis-ci.org/barahilia/spamspy\n    :alt: Build status\n\nPure Python implementation of *spamsum* (also known from *ssdeep*) with improvements and extensions.\n\nIntroduction\n============\n\nConventional hash and checksum tools like\n`sha256 <https://en.m.wikipedia.org/wiki/SHA-2>`_ and\n`CRC32 <https://en.m.wikipedia.org/wiki/Cyclic_redundancy_check>`_\nare good at grasping **exact** file content.\nThey result in very different hash after any byte or even bit change.\n`Spamsum <https://www.samba.org/ftp/unpacked/junkcode/spamsum/README>`_\nwas developed by Andrew Tridgell to compare **similar** files.\nAfter several changes in few parts of a file hash changes only slightly.\nSpamsum comes in two parts: a \"fuzzy\" hash generating similar output for similar files,\nand a slightly adopted edit distance implementation to estimate how similar the hashes\nand their files are.\n\nSpamsum hash length is bound by 64 characters. Block size is chosen at about 1/64 of the\nfile size. Every block is hashed to one character. File division to blocks depends on\nfile content so that on average block size will be like the\ntarget. This allows to get same blocks with same one-character hash even if other parts of the files are different.\n\n* comparable files should be up to two times in size one from another, due to block size\n* for the same reason you can **not** use spamsum to search for some large chunk appearance in files\n* all 64 blocks might appear in the beginning and spamsum hash might \"cover\" only the first part of the file\n* you should consider file format before usage; zip archives to be decompressed before hashing\n* this hash is **not** secure and does **not** garantee similarity; it should be easy enough to generate\n  file having specific hash\n\nSpamspy\n=======\n\nIn this project both spamsum components - hash and edit distance, - are implemented in pure Python. As well\na number of improvements are made. Spamsum hash length limitation is dropped, and so both block length and\nthe maximal hash length are configurable and can depend on the file size.\n\nAnother system for library search based on ngrams is introduced. Given a large library of files and one\nnew file we want to check if any large part from the new file appears in the library. For this all files\nare hashed with spamsum with some constant block size. Then hashes are split to ngrams. Library preserves\na mapping from ngram to its original files. Search in library iterates over all ngrams of the new file hash\nand yields the library file(s) with most matches. Assuming block size of 10KB and ngram size of 5, single\nmatch means some chance of about 50KB match in the files themselves.\n\nUsage\n=====\n\nThe package depends on standard modules only. Install with::\n\n    pip install spamspy\n\nIn code:\n\n.. code-block:: python\n\n    from spamspy.spamsum import spamsum\n    s1 = 'some long text'  # or open('first.txt').read()\n    hash1 = spamsum(s1)\n    hash2 = spamsum('somewhat long telegram')\n\n    from spamsum.edit_dist import edit_dist\n\n    ed = edit_dist(hash1, hash2)  # large number means more difference\n\nIn shell:\n\n.. code-block:: sh\n\n    spamsum first.txt  # 3:uqHRXLAHBn:K2\n    edit_dist uqHRXLAHBn uqHRXLAHc  # 2 - two changes from first hash to the second\n\n    ngram_spy update first.txt  # hashes and saves ngrams in ./registry.dat\n    ngram_spy search second.txt # (first.txt, 23) - matches on 23 ngrams\n    ngram_spy search other.txt  # (None, 0) - no matches found\n\nPerformance\n===========\n\nIn Python 2.7 spamsum runs about 600 times slower than the native implementation.\nThe good news is that in PyPy 5.1.1 it is only 15 times slower than the native which should be\ntolerable in many applications. This would be the price for extensions, the new ngrams\nalgorithm and for convenience of in-Python world. If blazing speed is the must, then\nthe new code should be ported back.\n\nLicense\n=======\n\nCopyright (c) 2017 Ilia Barahovsky\n\nThis project is distributed under MIT License.\n\nThe *spamsum* algorithm and tool was developed by Andrew Tridgell as an\nefficient similarity comparison between two files and a spam filter for mail\nclient. It is licensed under the GNU General Public License version 2 or under\nthe terms of the Perl Artistic license. It was copied without modifications from\nhttps://www.samba.org/ftp/unpacked/junkcode/spamsum/ to ``original/`` for\nverification of the Python port.", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/barahilia/spamspy", "keywords": "", "license": "MIT License", "maintainer": "", "maintainer_email": "", "name": "spamspy", "package_url": "https://pypi.org/project/spamspy/", "platform": "", "project_url": "https://pypi.org/project/spamspy/", "project_urls": {"Homepage": "https://github.com/barahilia/spamspy"}, "release_url": "https://pypi.org/project/spamspy/0.1/", "requires_dist": null, "requires_python": "", "summary": "", "version": "0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://travis-ci.org/barahilia/spamspy\" rel=\"nofollow\"><img alt=\"Build status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c861dec2683e58c3fde7a90037e725aa7059ed29/68747470733a2f2f7472617669732d63692e6f72672f6261726168696c69612f7370616d7370792e7376673f6272616e63683d6d6173746572\"></a>\n<p>Pure Python implementation of <em>spamsum</em> (also known from <em>ssdeep</em>) with improvements and extensions.</p>\n<div id=\"introduction\">\n<h2>Introduction</h2>\n<p>Conventional hash and checksum tools like\n<a href=\"https://en.m.wikipedia.org/wiki/SHA-2\" rel=\"nofollow\">sha256</a> and\n<a href=\"https://en.m.wikipedia.org/wiki/Cyclic_redundancy_check\" rel=\"nofollow\">CRC32</a>\nare good at grasping <strong>exact</strong> file content.\nThey result in very different hash after any byte or even bit change.\n<a href=\"https://www.samba.org/ftp/unpacked/junkcode/spamsum/README\" rel=\"nofollow\">Spamsum</a>\nwas developed by Andrew Tridgell to compare <strong>similar</strong> files.\nAfter several changes in few parts of a file hash changes only slightly.\nSpamsum comes in two parts: a \u201cfuzzy\u201d hash generating similar output for similar files,\nand a slightly adopted edit distance implementation to estimate how similar the hashes\nand their files are.</p>\n<p>Spamsum hash length is bound by 64 characters. Block size is chosen at about 1/64 of the\nfile size. Every block is hashed to one character. File division to blocks depends on\nfile content so that on average block size will be like the\ntarget. This allows to get same blocks with same one-character hash even if other parts of the files are different.</p>\n<ul>\n<li>comparable files should be up to two times in size one from another, due to block size</li>\n<li>for the same reason you can <strong>not</strong> use spamsum to search for some large chunk appearance in files</li>\n<li>all 64 blocks might appear in the beginning and spamsum hash might \u201ccover\u201d only the first part of the file</li>\n<li>you should consider file format before usage; zip archives to be decompressed before hashing</li>\n<li>this hash is <strong>not</strong> secure and does <strong>not</strong> garantee similarity; it should be easy enough to generate\nfile having specific hash</li>\n</ul>\n</div>\n<div id=\"id1\">\n<h2>Spamspy</h2>\n<p>In this project both spamsum components - hash and edit distance, - are implemented in pure Python. As well\na number of improvements are made. Spamsum hash length limitation is dropped, and so both block length and\nthe maximal hash length are configurable and can depend on the file size.</p>\n<p>Another system for library search based on ngrams is introduced. Given a large library of files and one\nnew file we want to check if any large part from the new file appears in the library. For this all files\nare hashed with spamsum with some constant block size. Then hashes are split to ngrams. Library preserves\na mapping from ngram to its original files. Search in library iterates over all ngrams of the new file hash\nand yields the library file(s) with most matches. Assuming block size of 10KB and ngram size of 5, single\nmatch means some chance of about 50KB match in the files themselves.</p>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>The package depends on standard modules only. Install with:</p>\n<pre>pip install spamspy\n</pre>\n<p>In code:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">spamspy.spamsum</span> <span class=\"kn\">import</span> <span class=\"n\">spamsum</span>\n<span class=\"n\">s1</span> <span class=\"o\">=</span> <span class=\"s1\">'some long text'</span>  <span class=\"c1\"># or open('first.txt').read()</span>\n<span class=\"n\">hash1</span> <span class=\"o\">=</span> <span class=\"n\">spamsum</span><span class=\"p\">(</span><span class=\"n\">s1</span><span class=\"p\">)</span>\n<span class=\"n\">hash2</span> <span class=\"o\">=</span> <span class=\"n\">spamsum</span><span class=\"p\">(</span><span class=\"s1\">'somewhat long telegram'</span><span class=\"p\">)</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">spamsum.edit_dist</span> <span class=\"kn\">import</span> <span class=\"n\">edit_dist</span>\n\n<span class=\"n\">ed</span> <span class=\"o\">=</span> <span class=\"n\">edit_dist</span><span class=\"p\">(</span><span class=\"n\">hash1</span><span class=\"p\">,</span> <span class=\"n\">hash2</span><span class=\"p\">)</span>  <span class=\"c1\"># large number means more difference</span>\n</pre>\n<p>In shell:</p>\n<pre>spamsum first.txt  <span class=\"c1\"># 3:uqHRXLAHBn:K2\n</span>edit_dist uqHRXLAHBn uqHRXLAHc  <span class=\"c1\"># 2 - two changes from first hash to the second\n</span>\nngram_spy update first.txt  <span class=\"c1\"># hashes and saves ngrams in ./registry.dat\n</span>ngram_spy search second.txt <span class=\"c1\"># (first.txt, 23) - matches on 23 ngrams\n</span>ngram_spy search other.txt  <span class=\"c1\"># (None, 0) - no matches found</span>\n</pre>\n</div>\n<div id=\"performance\">\n<h2>Performance</h2>\n<p>In Python 2.7 spamsum runs about 600 times slower than the native implementation.\nThe good news is that in PyPy 5.1.1 it is only 15 times slower than the native which should be\ntolerable in many applications. This would be the price for extensions, the new ngrams\nalgorithm and for convenience of in-Python world. If blazing speed is the must, then\nthe new code should be ported back.</p>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>Copyright (c) 2017 Ilia Barahovsky</p>\n<p>This project is distributed under MIT License.</p>\n<p>The <em>spamsum</em> algorithm and tool was developed by Andrew Tridgell as an\nefficient similarity comparison between two files and a spam filter for mail\nclient. It is licensed under the GNU General Public License version 2 or under\nthe terms of the Perl Artistic license. It was copied without modifications from\n<a href=\"https://www.samba.org/ftp/unpacked/junkcode/spamsum/\" rel=\"nofollow\">https://www.samba.org/ftp/unpacked/junkcode/spamsum/</a> to <tt>original/</tt> for\nverification of the Python port.</p>\n</div>\n\n          </div>"}, "last_serial": 3245858, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "2d0dc17b2fea10fe82cbf581ebdc4608", "sha256": "2cbc8a0d43afa26984a9d1f97074bb764a5be0ac459b15253b4125651031f4e9"}, "downloads": -1, "filename": "spamspy-0.1.tar.gz", "has_sig": false, "md5_digest": "2d0dc17b2fea10fe82cbf581ebdc4608", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6318, "upload_time": "2017-10-12T18:03:54", "upload_time_iso_8601": "2017-10-12T18:03:54.348946Z", "url": "https://files.pythonhosted.org/packages/10/1b/a9acbb3d67aaa32e5952f3f64e77402944de1e108334a977d81b5a83294d/spamspy-0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "2d0dc17b2fea10fe82cbf581ebdc4608", "sha256": "2cbc8a0d43afa26984a9d1f97074bb764a5be0ac459b15253b4125651031f4e9"}, "downloads": -1, "filename": "spamspy-0.1.tar.gz", "has_sig": false, "md5_digest": "2d0dc17b2fea10fe82cbf581ebdc4608", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6318, "upload_time": "2017-10-12T18:03:54", "upload_time_iso_8601": "2017-10-12T18:03:54.348946Z", "url": "https://files.pythonhosted.org/packages/10/1b/a9acbb3d67aaa32e5952f3f64e77402944de1e108334a977d81b5a83294d/spamspy-0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:06:00 2020"}