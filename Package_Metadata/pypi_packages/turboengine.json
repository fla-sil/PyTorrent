{"info": {"author": "Luis C. Cruz", "author_email": "carlitos.kyo@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Topic :: Internet", "Topic :: Software Development :: Libraries", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "===========\nTurboengine\n===========\n\nGoogle app engine utilities using some django's ideas.\n\nInstall\n-------\n:\n    git clone git://github.com/carlitux/turboengine.git\n    cd turboengine\n    python setup.py Install\n    \nUsage\n-----\nCreate an setting.py file and can add variables settings as you want, but\nthis is some commons variables::\n    TEMPLATE_PATH = 'templates'\n\n    # setting DEBUG\n    DEBUG = True\n    SITE_TITLE = 'turboengine for GAE'\n\n    # mapping (parent url, appname) \n    INSTALLED_APPS = [(parent_url, appnane)] # app names shouldn't be standard python libraries and they should be importables into PYTHONPATH\n    TEMPLATE_TAGS_PATHS = [] # not used but it will be used in feature for loading templatetags\n    ERROR_PAGE_PATH = '/error/' # path where will be redirected the error\n    LOGIN_PATH_REDIRECT = '/'   # path where redirect after login or logout\n    PROFILE_PATH = '/account/profile/'\n\nTo import settings do this:\n    from turboengine.conf import settings\n    \nIf you want to implement an Website use this:\n    from turboengine.http import RequestHandler\n    from turboengine.decorators import login_required\n    \n    class MyHandler(RequestHandler):\n        def get(self):\n            # you can add headers or common usages of the request\n            user = self.user # return authenticated user or None if is not logged in\n            .... code\n            self.render_template(template, paramaters)\n            \n        @login_required\n        def post(self):\n            .... code\n            \nAnd use one file like (app.py)::\n    from google.appengine.ext import webapp\n    from google.appengine.ext.webapp.util import run_wsgi_app\n      \n    from turboengine import urls\n    from turboengine.conf import settings\n      \n    application = webapp.WSGIApplication(urls.generate_urls(settings.INSTALLED_APPS), debug=settings.DEBUG)\n      \n    def main():   \n        run_wsgi_app(application)\n      \n    if __name__ == \"__main__\":\n        main()\n        \nIf you want to implement webservices first install ZSI and zope.interface then::\n    from turboengine.webservices.application import SOAPAplication\n    from turboengine.webservices.application import WSGIAplication\n    \n    from EchoServer_server import * # this class is generated by 'python wsdl2py SimpleEcho.wsdl' see http://carlitos-kyo.blogspot.com/2009/12/web-services-python-google-app-engine.html\n    \n    # Implementing services\n\n    class wsEchoServer(EchoServer):\n        # Make WSDL available for HTTP GET\n        wsdl = \"\".join(open('SimpleEcho.wsdl').readlines())\n        disco = \"\".join(open('SimpleEcho.disco').readlines())\n          \n        def soap_Echo(self, ps, **kw):\n            request, response = EchoServer.soap_Echo(self, ps, **kw)\n            return request, request \n    \n    def main():\n        application = WSGIApplication()\n        application['EchoServer.asmx'] = SOAPAplication(wsEchoServer())\n        #application['OtherServer.asmx'] = SOAPAplication(wsOtherServer()) # could have many webservices\n        run_wsgi_app(application)\n    \n    if __name__ == '__main__':\n        main()\n        \nPlease to see how to use webservices on GAE visit this: \n   http://carlitos-kyo.blogspot.com/2009/12/web-services-python-google-app-engine.html\n   \nTODO\n----\n\nImplement restful and templatetags", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/carlitux/turboengine", "keywords": "GAE utility", "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "turboengine", "package_url": "https://pypi.org/project/turboengine/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/turboengine/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/carlitux/turboengine"}, "release_url": "https://pypi.org/project/turboengine/1.0.2/", "requires_dist": null, "requires_python": null, "summary": "Utilities for google app engine", "version": "1.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            ===========<br>Turboengine<br>===========<br><br>Google app engine utilities using some django's ideas.<br><br>Install<br>-------<br>:<br>    git clone git://github.com/carlitux/turboengine.git<br>    cd turboengine<br>    python setup.py Install<br>    <br>Usage<br>-----<br>Create an setting.py file and can add variables settings as you want, but<br>this is some commons variables::<br>    TEMPLATE_PATH = 'templates'<br><br>    # setting DEBUG<br>    DEBUG = True<br>    SITE_TITLE = 'turboengine for GAE'<br><br>    # mapping (parent url, appname) <br>    INSTALLED_APPS = [(parent_url, appnane)] # app names shouldn't be standard python libraries and they should be importables into PYTHONPATH<br>    TEMPLATE_TAGS_PATHS = [] # not used but it will be used in feature for loading templatetags<br>    ERROR_PAGE_PATH = '/error/' # path where will be redirected the error<br>    LOGIN_PATH_REDIRECT = '/'   # path where redirect after login or logout<br>    PROFILE_PATH = '/account/profile/'<br><br>To import settings do this:<br>    from turboengine.conf import settings<br>    <br>If you want to implement an Website use this:<br>    from turboengine.http import RequestHandler<br>    from turboengine.decorators import login_required<br>    <br>    class MyHandler(RequestHandler):<br>        def get(self):<br>            # you can add headers or common usages of the request<br>            user = self.user # return authenticated user or None if is not logged in<br>            .... code<br>            self.render_template(template, paramaters)<br>            <br>        @login_required<br>        def post(self):<br>            .... code<br>            <br>And use one file like (app.py)::<br>    from google.appengine.ext import webapp<br>    from google.appengine.ext.webapp.util import run_wsgi_app<br>      <br>    from turboengine import urls<br>    from turboengine.conf import settings<br>      <br>    application = webapp.WSGIApplication(urls.generate_urls(settings.INSTALLED_APPS), debug=settings.DEBUG)<br>      <br>    def main():   <br>        run_wsgi_app(application)<br>      <br>    if __name__ == \"__main__\":<br>        main()<br>        <br>If you want to implement webservices first install ZSI and zope.interface then::<br>    from turboengine.webservices.application import SOAPAplication<br>    from turboengine.webservices.application import WSGIAplication<br>    <br>    from EchoServer_server import * # this class is generated by 'python wsdl2py SimpleEcho.wsdl' see http://carlitos-kyo.blogspot.com/2009/12/web-services-python-google-app-engine.html<br>    <br>    # Implementing services<br><br>    class wsEchoServer(EchoServer):<br>        # Make WSDL available for HTTP GET<br>        wsdl = \"\".join(open('SimpleEcho.wsdl').readlines())<br>        disco = \"\".join(open('SimpleEcho.disco').readlines())<br>          <br>        def soap_Echo(self, ps, **kw):<br>            request, response = EchoServer.soap_Echo(self, ps, **kw)<br>            return request, request <br>    <br>    def main():<br>        application = WSGIApplication()<br>        application['EchoServer.asmx'] = SOAPAplication(wsEchoServer())<br>        #application['OtherServer.asmx'] = SOAPAplication(wsOtherServer()) # could have many webservices<br>        run_wsgi_app(application)<br>    <br>    if __name__ == '__main__':<br>        main()<br>        <br>Please to see how to use webservices on GAE visit this: <br>   http://carlitos-kyo.blogspot.com/2009/12/web-services-python-google-app-engine.html<br>   <br>TODO<br>----<br><br>Implement restful and templatetags\n          </div>"}, "last_serial": 801002, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "8cdac6eb6b03b62e040ab9bf8a89d06d", "sha256": "8c4ed67e87ec9fd9a0ca8aa1926e2e1aa59cecf1938d434f75c8a3a77c864f2f"}, "downloads": -1, "filename": "turboengine-1.0.0.tar.gz", "has_sig": false, "md5_digest": "8cdac6eb6b03b62e040ab9bf8a89d06d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6331, "upload_time": "2010-10-09T06:29:44", "upload_time_iso_8601": "2010-10-09T06:29:44.289847Z", "url": "https://files.pythonhosted.org/packages/02/f4/b9cbf48433e72e42a88c9cd3028d3f0ebd13b437dd19a3f7e6e92ee2b008/turboengine-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "3f857468214b0486226768c2665d0478", "sha256": "95419c759a022b07d34c2ec2b86a2c27a6538e9199bf638bf5c5e88283d35d07"}, "downloads": -1, "filename": "turboengine-1.0.1.tar.gz", "has_sig": false, "md5_digest": "3f857468214b0486226768c2665d0478", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6360, "upload_time": "2010-10-09T21:06:27", "upload_time_iso_8601": "2010-10-09T21:06:27.431823Z", "url": "https://files.pythonhosted.org/packages/c7/37/00613f08bfdc594620bc1a27915e5e26db062a5f8c7d12f757a68dfa2b8a/turboengine-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "18fad5c2e3dbaf91057688a2092f6179", "sha256": "dfabd903c8f45b3726f236b4edee3f556348a0daf6211eb35af3fb6319463b0d"}, "downloads": -1, "filename": "turboengine-1.0.2.tar.gz", "has_sig": false, "md5_digest": "18fad5c2e3dbaf91057688a2092f6179", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6612, "upload_time": "2010-10-09T21:24:02", "upload_time_iso_8601": "2010-10-09T21:24:02.698988Z", "url": "https://files.pythonhosted.org/packages/c3/11/2ee766d546417c3364bfd373b63519f8a6040062c90558d74645df2736b1/turboengine-1.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "18fad5c2e3dbaf91057688a2092f6179", "sha256": "dfabd903c8f45b3726f236b4edee3f556348a0daf6211eb35af3fb6319463b0d"}, "downloads": -1, "filename": "turboengine-1.0.2.tar.gz", "has_sig": false, "md5_digest": "18fad5c2e3dbaf91057688a2092f6179", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6612, "upload_time": "2010-10-09T21:24:02", "upload_time_iso_8601": "2010-10-09T21:24:02.698988Z", "url": "https://files.pythonhosted.org/packages/c3/11/2ee766d546417c3364bfd373b63519f8a6040062c90558d74645df2736b1/turboengine-1.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:44:40 2020"}