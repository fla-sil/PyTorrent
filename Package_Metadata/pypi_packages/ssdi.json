{"info": {"author": "Dadeerh", "author_email": "dadeerh91@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: Python Software Foundation License"], "description": "# SSDI (Super Simple Dependency Injector)\n\nSSDI is an incredibly simple class that uses Python 3 type annotations to give simple dependency injection.\nIt provides an injector class that automatically resolves dependencies based on type.\nIt works with base classes and abstract base classes.\n\nIn case of multiple of the same type it will chose the first added type.\n\nIt is, as the name indicates, really a very simple injector!\n\n# Requirements\nAs the class uses type annotations, it is required to use Python 3\n\nThere are further requirements to how you code your classes. This will be covered in usage and examples.\n\n# Installation\n## pip installation\n```\npip install ssdi\n```\nor\n```\npython -m pip install ssdi\n```\n\n# Usage\n\nThere are some simple requirements for using ssdi:\n\n* Type annotations must be used for parameters\n* Named parameters given must not be the same name as the classes to be injected\n* There cannot be more than one of a type in the injector\n    * *truth be told* there can, but then only the first presented class will be used.\n\nBelow you see a simple example of using the Injector class.\nIt is shown that you can pass parameters and named parameters to the classes.\n\nFor a more real life example see the *examples* section of this document. \n\n```python\nfrom ssdi import Injector\n\nclass BaseClass():\n    def logic(self) -> None:\n        print(\"BaseClass logic\")\n        pass\n\nclass ChildClass(BaseClass):\n    def __init__(self, param: int)\n        self.param = param\n\n    def logic(self) -> None:\n        super().logic()\n        print(\"ChildClass logic: \", self.param)\n        pass\n\nclass OtherClass():\n    def __init__(self, param: int, some_class:  BaseClass, named_param: str = \"foo\") -> None:\n        self.some_class = some_class\n        self.param = param\n        self.named_param = named_param\n\n    def logic(self) -> None:\n        self.some_class.logic()\n        print(\"OtherClass logic: \", self.param, self.named_param)\n\nif __name__ == \"__main__\":\n    injector = Injector()\n\n    injector.add(ChildClass, 123)\n    injector.add(OtherClass, 456, named_param=\"bar\")\n\n    other_class = injector.get(OtherClass)\n    other_class.logic()\n```\n\ngives output:\n\n```\nBaseClass logic\nChildClass logic 123\nOtherClass logic 456 bar\n```\n\n# Examples\n## Logging classes\n\nImagine you have a larger application. For this you have implemented custom logging logic. For this you have a logging object that can be given an instance of various classes. To begin with you just log to stdout using print statements. \n\nThen after some months you find a need to log to a database. This will require new logic. \nNow instead of replacing all the instances of TestLogger - you instead use SSDI and simply need to replace it once - the place where you have given the injector your class. \nThe rest of the class instantiations - all your 100's of classes of business logic - will now automatically be instantiated with the new DatabaseLogger class instead, saving you time and reducing chances of bugs.\n\n\nFirst we have our loggers defined:\n\n\nFile *logger.py*\n```python\nimport ABC\n\nclass Logger(ABC.abc):\n    @abstractmethod\n    def log(message: str) -> None:\n        \"\"\" \n        This functions implementation will log a message\n        \"\"\"\n        pass\n\nclass TestLogger(Logger):\n    def log(message: str) -> None:\n        \"\"\"\n        This function logs to a debug interface, f.x. to stdout\n        \"\"\"\n        print(message)\n\nclass DatabaseLogger(Logger):\n    def log(message: str) -> None:\n        \"\"\"\n        This function logs to a database\n        \"\"\"\n        # Logic to log to database\n        pass\n\n\n```\n\nThen we have all our business logic:\n\nFile *business.py*\n```python\nfrom logger import Logger\n\nclass BusinessLogicOne():\n    def __init__(self, logger: Logger) -> None:\n        self.logger = logger\n\n    def logic(self):\n        self.logger.log(\"Some log message\")\n\nclass BusinessLogicTwo():\n    def __init__(self, logger: Logger) -> None:\n        self.logger = logger\n\n    def logic(self):\n        self.logger.log(\"Some log message\")\n\nclass BusinessLogicN():\n    def __init__(self, logger: Logger) -> None:\n        self.logger = logger\n\n    def logic(self):\n        self.logger.log(\"Some log message\")\n```\n\nAnd then finally we have a class that uses SSDI. See here that no matter how many classes uses the logger class instantiation, we still only need to change it one place when we instead implement out database logger. See if you can change the code below to use the new logger - the promise is that it really is *super simple*.\n\nFile main.py\n\n```python\nfrom ssdi import Injector\n\nfrom business import *\nfrom logger import *\n\nif __name__ == \"__main__\":\n    injector = Injector()\n    injector.add(BusinessLogicOne)\n    injector.add(BusinessLogicTwo)\n    injector.add(BusinessLogicN)\n    injector.add(TestLogger)\n\n    business_logic_one = injector.get(BusinessLogicOne)\n    business_logic_one.logic()\n\n    business_logic_two = injector.get(BusinessLogicTwo)\n    business_logic_two.logic()\n\n    business_logic_n = injector.get(BusinessLogicN)\n    business_logic_n.logic()\n```\n\n\n# Tests\nSeveral unit tests have been created. These are created to be tested using pytest. Please see the file test_injector.py on github (https://github.com/Dadeerh/ssdi) for all the tests.\n\n# Contact\nComment on github (https://github.com/Dadeerh/ssdi) or email to dadeerh91@gmail.com\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "dependency injection injector di super simple", "license": "", "maintainer": "", "maintainer_email": "", "name": "ssdi", "package_url": "https://pypi.org/project/ssdi/", "platform": "", "project_url": "https://pypi.org/project/ssdi/", "project_urls": null, "release_url": "https://pypi.org/project/ssdi/0.1.1/", "requires_dist": null, "requires_python": "", "summary": "Super Simple Dependency Injector", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>SSDI (Super Simple Dependency Injector)</h1>\n<p>SSDI is an incredibly simple class that uses Python 3 type annotations to give simple dependency injection.\nIt provides an injector class that automatically resolves dependencies based on type.\nIt works with base classes and abstract base classes.</p>\n<p>In case of multiple of the same type it will chose the first added type.</p>\n<p>It is, as the name indicates, really a very simple injector!</p>\n<h1>Requirements</h1>\n<p>As the class uses type annotations, it is required to use Python 3</p>\n<p>There are further requirements to how you code your classes. This will be covered in usage and examples.</p>\n<h1>Installation</h1>\n<h2>pip installation</h2>\n<pre><code>pip install ssdi\n</code></pre>\n<p>or</p>\n<pre><code>python -m pip install ssdi\n</code></pre>\n<h1>Usage</h1>\n<p>There are some simple requirements for using ssdi:</p>\n<ul>\n<li>Type annotations must be used for parameters</li>\n<li>Named parameters given must not be the same name as the classes to be injected</li>\n<li>There cannot be more than one of a type in the injector\n<ul>\n<li><em>truth be told</em> there can, but then only the first presented class will be used.</li>\n</ul>\n</li>\n</ul>\n<p>Below you see a simple example of using the Injector class.\nIt is shown that you can pass parameters and named parameters to the classes.</p>\n<p>For a more real life example see the <em>examples</em> section of this document.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ssdi</span> <span class=\"kn\">import</span> <span class=\"n\">Injector</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">BaseClass</span><span class=\"p\">():</span>\n    <span class=\"k\">def</span> <span class=\"nf\">logic</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"BaseClass logic\"</span><span class=\"p\">)</span>\n        <span class=\"k\">pass</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">ChildClass</span><span class=\"p\">(</span><span class=\"n\">BaseClass</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">param</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">param</span> <span class=\"o\">=</span> <span class=\"n\">param</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">logic</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">logic</span><span class=\"p\">()</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"ChildClass logic: \"</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">param</span><span class=\"p\">)</span>\n        <span class=\"k\">pass</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">OtherClass</span><span class=\"p\">():</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">param</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">some_class</span><span class=\"p\">:</span>  <span class=\"n\">BaseClass</span><span class=\"p\">,</span> <span class=\"n\">named_param</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s2\">\"foo\"</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">some_class</span> <span class=\"o\">=</span> <span class=\"n\">some_class</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">param</span> <span class=\"o\">=</span> <span class=\"n\">param</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">named_param</span> <span class=\"o\">=</span> <span class=\"n\">named_param</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">logic</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">some_class</span><span class=\"o\">.</span><span class=\"n\">logic</span><span class=\"p\">()</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"OtherClass logic: \"</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">param</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">named_param</span><span class=\"p\">)</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s2\">\"__main__\"</span><span class=\"p\">:</span>\n    <span class=\"n\">injector</span> <span class=\"o\">=</span> <span class=\"n\">Injector</span><span class=\"p\">()</span>\n\n    <span class=\"n\">injector</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">ChildClass</span><span class=\"p\">,</span> <span class=\"mi\">123</span><span class=\"p\">)</span>\n    <span class=\"n\">injector</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">OtherClass</span><span class=\"p\">,</span> <span class=\"mi\">456</span><span class=\"p\">,</span> <span class=\"n\">named_param</span><span class=\"o\">=</span><span class=\"s2\">\"bar\"</span><span class=\"p\">)</span>\n\n    <span class=\"n\">other_class</span> <span class=\"o\">=</span> <span class=\"n\">injector</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">OtherClass</span><span class=\"p\">)</span>\n    <span class=\"n\">other_class</span><span class=\"o\">.</span><span class=\"n\">logic</span><span class=\"p\">()</span>\n</pre>\n<p>gives output:</p>\n<pre><code>BaseClass logic\nChildClass logic 123\nOtherClass logic 456 bar\n</code></pre>\n<h1>Examples</h1>\n<h2>Logging classes</h2>\n<p>Imagine you have a larger application. For this you have implemented custom logging logic. For this you have a logging object that can be given an instance of various classes. To begin with you just log to stdout using print statements.</p>\n<p>Then after some months you find a need to log to a database. This will require new logic.\nNow instead of replacing all the instances of TestLogger - you instead use SSDI and simply need to replace it once - the place where you have given the injector your class.\nThe rest of the class instantiations - all your 100's of classes of business logic - will now automatically be instantiated with the new DatabaseLogger class instead, saving you time and reducing chances of bugs.</p>\n<p>First we have our loggers defined:</p>\n<p>File <em>logger.py</em></p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">ABC</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Logger</span><span class=\"p\">(</span><span class=\"n\">ABC</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"p\">):</span>\n    <span class=\"nd\">@abstractmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">log</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"sd\">\"\"\" </span>\n<span class=\"sd\">        This functions implementation will log a message</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"k\">pass</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">TestLogger</span><span class=\"p\">(</span><span class=\"n\">Logger</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">log</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">        This function logs to a debug interface, f.x. to stdout</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"p\">)</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">DatabaseLogger</span><span class=\"p\">(</span><span class=\"n\">Logger</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">log</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">        This function logs to a database</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"c1\"># Logic to log to database</span>\n        <span class=\"k\">pass</span>\n</pre>\n<p>Then we have all our business logic:</p>\n<p>File <em>business.py</em></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">logger</span> <span class=\"kn\">import</span> <span class=\"n\">Logger</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">BusinessLogicOne</span><span class=\"p\">():</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">logger</span><span class=\"p\">:</span> <span class=\"n\">Logger</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span> <span class=\"o\">=</span> <span class=\"n\">logger</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">logic</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">log</span><span class=\"p\">(</span><span class=\"s2\">\"Some log message\"</span><span class=\"p\">)</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">BusinessLogicTwo</span><span class=\"p\">():</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">logger</span><span class=\"p\">:</span> <span class=\"n\">Logger</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span> <span class=\"o\">=</span> <span class=\"n\">logger</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">logic</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">log</span><span class=\"p\">(</span><span class=\"s2\">\"Some log message\"</span><span class=\"p\">)</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">BusinessLogicN</span><span class=\"p\">():</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">logger</span><span class=\"p\">:</span> <span class=\"n\">Logger</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span> <span class=\"o\">=</span> <span class=\"n\">logger</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">logic</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">log</span><span class=\"p\">(</span><span class=\"s2\">\"Some log message\"</span><span class=\"p\">)</span>\n</pre>\n<p>And then finally we have a class that uses SSDI. See here that no matter how many classes uses the logger class instantiation, we still only need to change it one place when we instead implement out database logger. See if you can change the code below to use the new logger - the promise is that it really is <em>super simple</em>.</p>\n<p>File main.py</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ssdi</span> <span class=\"kn\">import</span> <span class=\"n\">Injector</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">business</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">logger</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s2\">\"__main__\"</span><span class=\"p\">:</span>\n    <span class=\"n\">injector</span> <span class=\"o\">=</span> <span class=\"n\">Injector</span><span class=\"p\">()</span>\n    <span class=\"n\">injector</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">BusinessLogicOne</span><span class=\"p\">)</span>\n    <span class=\"n\">injector</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">BusinessLogicTwo</span><span class=\"p\">)</span>\n    <span class=\"n\">injector</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">BusinessLogicN</span><span class=\"p\">)</span>\n    <span class=\"n\">injector</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">TestLogger</span><span class=\"p\">)</span>\n\n    <span class=\"n\">business_logic_one</span> <span class=\"o\">=</span> <span class=\"n\">injector</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">BusinessLogicOne</span><span class=\"p\">)</span>\n    <span class=\"n\">business_logic_one</span><span class=\"o\">.</span><span class=\"n\">logic</span><span class=\"p\">()</span>\n\n    <span class=\"n\">business_logic_two</span> <span class=\"o\">=</span> <span class=\"n\">injector</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">BusinessLogicTwo</span><span class=\"p\">)</span>\n    <span class=\"n\">business_logic_two</span><span class=\"o\">.</span><span class=\"n\">logic</span><span class=\"p\">()</span>\n\n    <span class=\"n\">business_logic_n</span> <span class=\"o\">=</span> <span class=\"n\">injector</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">BusinessLogicN</span><span class=\"p\">)</span>\n    <span class=\"n\">business_logic_n</span><span class=\"o\">.</span><span class=\"n\">logic</span><span class=\"p\">()</span>\n</pre>\n<h1>Tests</h1>\n<p>Several unit tests have been created. These are created to be tested using pytest. Please see the file test_injector.py on github (<a href=\"https://github.com/Dadeerh/ssdi\" rel=\"nofollow\">https://github.com/Dadeerh/ssdi</a>) for all the tests.</p>\n<h1>Contact</h1>\n<p>Comment on github (<a href=\"https://github.com/Dadeerh/ssdi\" rel=\"nofollow\">https://github.com/Dadeerh/ssdi</a>) or email to <a href=\"mailto:dadeerh91@gmail.com\">dadeerh91@gmail.com</a></p>\n\n          </div>"}, "last_serial": 5677444, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "976250614f0453a07112c6d95df3b59a", "sha256": "4886b93e375edde43841b4d0ca5f16df4e22714a871cd97ce24439f60c3b5500"}, "downloads": -1, "filename": "ssdi-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "976250614f0453a07112c6d95df3b59a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4227, "upload_time": "2019-08-14T14:42:39", "upload_time_iso_8601": "2019-08-14T14:42:39.135475Z", "url": "https://files.pythonhosted.org/packages/7f/79/05a65025c176993325f58172f04bfd4c662d4e2da83f99171eeeb5d1fe69/ssdi-0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fb0f82193a557a1bf567abb7d34b906f", "sha256": "eec5621fd5e09af99db898b32616c934045fbb6093260c1ed80b351b553d7a68"}, "downloads": -1, "filename": "ssdi-0.1.tar.gz", "has_sig": false, "md5_digest": "fb0f82193a557a1bf567abb7d34b906f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3843, "upload_time": "2019-08-14T14:42:41", "upload_time_iso_8601": "2019-08-14T14:42:41.314777Z", "url": "https://files.pythonhosted.org/packages/05/53/8fcb16738ceb51d1ef4cc065a477be22b8773923d052ce1012c8f089aff6/ssdi-0.1.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "3b0245d565cfb6b77fb28fe1a796edc3", "sha256": "c447374ef3963021c319e9b0753483e1fe48e3b9ee1798aebb93262588201ea2"}, "downloads": -1, "filename": "ssdi-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "3b0245d565cfb6b77fb28fe1a796edc3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4219, "upload_time": "2019-08-14T14:45:43", "upload_time_iso_8601": "2019-08-14T14:45:43.296728Z", "url": "https://files.pythonhosted.org/packages/25/57/76623baa86bb6f8a60f3e3f09f42c2579608f1bfbf5dff3a1771022099d8/ssdi-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c6dd7d4af45adfddcfbb9e3395f52e36", "sha256": "a62f41dc9653558d3586743648db7c4279a36eecf4e3257b3be507bfbec6b030"}, "downloads": -1, "filename": "ssdi-0.1.1.tar.gz", "has_sig": false, "md5_digest": "c6dd7d4af45adfddcfbb9e3395f52e36", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3836, "upload_time": "2019-08-14T14:45:44", "upload_time_iso_8601": "2019-08-14T14:45:44.772233Z", "url": "https://files.pythonhosted.org/packages/4e/58/7248dcf25f8c2ca9ba01310f6529e13dba5f1fa2e02cd8c1923bdb170649/ssdi-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "3b0245d565cfb6b77fb28fe1a796edc3", "sha256": "c447374ef3963021c319e9b0753483e1fe48e3b9ee1798aebb93262588201ea2"}, "downloads": -1, "filename": "ssdi-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "3b0245d565cfb6b77fb28fe1a796edc3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4219, "upload_time": "2019-08-14T14:45:43", "upload_time_iso_8601": "2019-08-14T14:45:43.296728Z", "url": "https://files.pythonhosted.org/packages/25/57/76623baa86bb6f8a60f3e3f09f42c2579608f1bfbf5dff3a1771022099d8/ssdi-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c6dd7d4af45adfddcfbb9e3395f52e36", "sha256": "a62f41dc9653558d3586743648db7c4279a36eecf4e3257b3be507bfbec6b030"}, "downloads": -1, "filename": "ssdi-0.1.1.tar.gz", "has_sig": false, "md5_digest": "c6dd7d4af45adfddcfbb9e3395f52e36", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3836, "upload_time": "2019-08-14T14:45:44", "upload_time_iso_8601": "2019-08-14T14:45:44.772233Z", "url": "https://files.pythonhosted.org/packages/4e/58/7248dcf25f8c2ca9ba01310f6529e13dba5f1fa2e02cd8c1923bdb170649/ssdi-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:03:13 2020"}