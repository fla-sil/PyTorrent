{"info": {"author": "Transifex Devs", "author_email": "info@transifex.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3.6"], "description": "Totem\n-----\n\nTotem is a Health Check library that checks whether or not certain quality standards are followed on Pull Requests or local Git repositories.\n\nIt is inspired by the [Transifex Engineering Manifesto (TEM)](https://tem.transifex.com/), a document that defines the Quality Standards used in [Transifex](https://www.transifex.com). Totem was created as an automated way to ensure high quality in Git-related guidelines described in the TEM. \n\nCurrently it supports Github Pull Requests only, but can also be used locally.\n\n\n# Features\n- Multiple quality checks on Pull Requests\n- Multiple quality checks on local Git repositories \n- Comes with [pre-commit](http://www.pre-commit.com) support, and can also be added as a pre-push Git hook\n- Configurable: you can only enable the checks you want, and define the configuration parameters for each check\n- Detailed report in the console, makes it easy to spot issues\n- Compact summary shown as a comment created on the Pull Request, with configurable content (disabled by default)  \n\n\n# Checks\n\nTotem supports the following checks:\n\n- **branch_name**: the name of the branch must follow a certain regex pattern\n- **pr_title**: the title of the Pull Request must follow a certain regex pattern\n- **pr_body_checklist**: the body of the Pull Request must not contain any unfinished checklist item\n- **pr_body_excludes**: the body of the Pull Request must not contain certain strings\n- **pr_body_includes**: the body of the Pull Request must contain certain strings\n- **commit_message**: the message of each commit must follow these guidelines:\n  * subject:\n    * has a minimum and maximum allowed length\n    * must follow a certain regex pattern, e.g. start with an uppercase character and *not* end with a '.'\n  * body\n    * if there is a body, each line has a maximum allowed length\n    * if the number of total changed lines in a commit is above a certain threshold, a body must be present and must have a minimum number of lines\n\nWith a custom configuration, you can define which checks will be executed. All of the checks have at least a certain level of configuration.  \n\n## Failure level\nIf a check is executed but fails to pass, it can either provide a failed status check (exit status = 1) or simply print out a warning.\nThe former can be used in order to prevent a Pull Request from being merged, a local commit to be completed, or local changes to be pushed to the remote, until all Totem checks are fixed.\nThe latter is mainly used as a sign that something might not be right, and can be useful when comitting in or pushing from a local repo, or when reviewing a Pull Request. The warning level is necessary because in some repos a rule may not be always applicable, so it should be judged on a case-by-case basis.  \n\n\n# Installation\nTotem can be installed by running `pip install totem`. It requires Python 3.6.0+.\n\n# Running on a PR\n## Command line\nTotem provides a console command and requires only the URL of the pull request to check. \nBy default, it will attempt to read the `.totem.yml` file on the repo as configuration. If it is not found, it defaults to `./contrib/config/sample.yml` on the Totem repo.\n\n```\ntotem -p https://www.github.com/:owner/:repo/pulls/:number\n```\n\nExample:\n```\ntotem -p https://github.com/transifex/totem/pull/17\n```\n\nNOTE: the default configuration will *not* create a comment on the Pull Request being checked. If you use a custom config, you can enable the comment feature.   \n\nA custom config can be provided and supports a lot of options.\n\n```\ntotem -p https://www.github.com/:owner/:repo/pulls/:number -c ./totem_config.yml\n```\n\nThe project includes a sample configuration file, which can be found at `./contrib/config/sample.yml`.\n\n## CI\nWhen running from a CI service, you need to retrieve the pull request URL from the environment variables the service provides. Also, you can set the URL of the CI build page, in which case a link appears on the PR comment that the Totem creates.\n\nFor example, you make a call like this:\n```\ntotem --pr-url \"<pull_request_url>\" --config-file \".totem.yml\" --details-url \"<ci_service_build_page>\"\n```\nwhere `<pull_request_url>` is a variable given from the CI service. For example, for CircleCI it's `$CIRCLE_PULL_REQUEST`.\n\n### Github authentication\nIn order to run Totem on pull requests of private projects, as well as in order to be able to enable reporting in PR comments, the tool needs to be authenticated when contacting Github. In order to do that, you need to add an environment variable with the Github access token to your CI service:\n`GITHUB_ACCESS_TOKEN=<my_super_secret_token>`\n\nYou also need to authorize add a deploy key on the CI service. For example, on Circle CI go to the project Settings > Permissions > Checkout SSH keys and click on [Add Deploy key].\n\nAn example of a complete setup on a CI, together with GitHub authentication, looks like this:\n```yaml\njobs:\n  totem:\n    docker:\n    - image: python:alpine\n      environment:\n    steps:\n    - checkout\n    - add_ssh_keys:\n        fingerprint:\n          # a public deploy key of the current repository on GitHub, something like:\n          \"8a:32:b1:d4:24:12:c4:33:8f:ac:0f:37:c8:84:c4:cc\"\n    - run:\n        name: Install git/openssh-client and add github to the list of known hosts\n        command: apk add git openssh-client && mkdir ~/.ssh && ssh-keyscan github.com > ~/.ssh/known_hosts\n    - run:\n        name: Install totem\n        command: pip install totem\n    - run:\n        name: Run Totem\n        command: totem --pr-url \"<pull_request_url>\" --config-file \".totem.yml\" --details-url \"<ci_service_build_page>\"\n``` \n\n### CircleCI\nKeep in mind that because of a bug in CircleCI, sometimes the `$CIRCLE_PULL_REQUEST` variable is empty. If the pull request argument in the `totem` CLI command is empty, Totem runs in local mode because there is no pull request to check. This can create false positives (that everything is OK when in fact it's not). Therefore, in order to run Totem without the false positives, the following workaround can be used: \n```shell\nif [[ \"$CIRCLE_BRANCH\" == \"devel\" || \"$CIRCLE_BRANCH\" == \"master\" ]]; then\n  echo \"Totem is disabled on branch '$CIRCLE_BRANCH'. Won't execute.\"\nelse\n  if [[ \"$CIRCLE_PULL_REQUEST\" == \"\" ]]; then\n    echo \"\\$CIRCLE_PULL_REQUEST is empty. It's probably due to CircleCI's bug\"\n    echo \"(https://discuss.circleci.com/t/circle-pull-request-not-being-set/14409).\"\n    echo \"Please rerun the workflow until the PR variable is populated by CircleCI.\"\n    exit 1\n  else\n    totem --pr-url \"$CIRCLE_PULL_REQUEST\" --config-file \".totem.yml\" --details-url \"$CIRCLE_BUILD_URL\"\n  fi\nfi\n```\n\nThe script above does not run Totem if the current branch is `devel` or `master`, which means that it's running on a merge commit. Of course, these are just sample branches and may differ from the base branches you have in your workflow. \n\n\n# Running on a local repository\n\nYou can call the command without any arguments. In this case it reads the `.totem.yml` file on the repo as configuration. If this file does not exist, the tool cannot run.\n```\ntotem\n```\n\nYou can also define a custom config file to use.\n```\ntotem -c <file>\n```\n\nThe local mode of Totem runs only a subset of the available (and enabled) checks:\n- **branch_name**: the name of the branch must follow a certain regex pattern\n- **commit_message**: the message of each commit must follow certain guidelines\n\nThe reason is that the rest of the checks require a Pull Request, which is not available locally. \n\n\n## Pre-commit hook\nIn order to use it as a [pre-commit](http://www.pre-commit.com) hook, add the following in your `.pre-commit-config.yaml` file.\n\n```yaml\n- repo: https://github.com/transifex/totem/\n  rev: master\n  hooks:\n  - id: totem\n```\n\nMake sure you follow the instructions given in [pre-commit](http://www.pre-commit.com) on how to install and use the hooks.\nAs soon as you do that, Totem will run every time you attempt to create a new commit and will abort the command in case any checks fail. Note that it will not abort in case of warnings. \n\n\n## Pre-push hook\n\nIn order to use it as a pre-push hook, add the following in the `.git/hooks/pre-push` file:\n```\n#!/bin/sh\ntotem\n```\n\nNote: Make sure the file is executable (`chmod +x .git/hooks/pre-push`).\n\nThis way, totem will run every time you call `git push`, and will abort the command in case any checks fail. Note that it will not abort in case of warnings.\n\n\n# Configuration\nThis is a sample configuration that contains all available options:\n\n```yaml\nsettings:\n  pr_comment_report:\n    enabled: True\n    show_empty_sections: True\n    show_message: True\n    show_details: True\n  console_report:\n    show_empty_sections: True\n    show_message: True\n    show_details: True\n    show_successful: True\n  local_console_report:\n    show_empty_sections: False\n    show_message: True\n    show_details: True\n    show_successful: False\nchecks:\n  branch_name:\n    pattern: ^[\\w\\d\\-]+$\n    pattern_descr: Branch name must only include lowercase characters, digits and dashes\n    failure_level: warning\n  pr_title:\n    pattern: ^[A-Z].+$\n    pattern_descr: PR title must start with a capital letter\n    failure_level: warning\n  pr_body_checklist:\n    failure_level: error\n  pr_body_excludes:\n    patterns:\n    - excl1\n    - excl2\n    failure_level: error\n  pr_body_includes:\n    patterns:\n    - incl1\n    - incl2\n    failure_level: error\n  commit_message:\n    subject:\n      min_length: 10\n      max_length: 50\n      pattern: ^[A-Z].+(?<!\\.)$\n      pattern_descr: Commit message subject must start with a capital letter and not\n        finish with a dot\n    body:\n      max_line_length: 72\n      smart_require:\n        min_changes: 100\n        min_body_lines: 1\n    failure_level: error\n```\n\n# Sample report\nThis is how a report created as a comment on the pull request may look like:\n\nChecking if this PR follows the expected quality standards. Powered by [totem](https://www.github.com/transifex/totem).\n\nfailures | warnings | successful\n----------- | ------------- | -------------\n| 2 | 1 | 3\n\n\n\n:bangbang: **Failures (2)** - *These need to be fixed!*\n- **pr_body_includes**\n  Required strings in PR body are missing: `\"Problem and/or solution\"`\n- **commit_message**\n  Found 2 commit message(s) that do not follow the expected format (errors: `\"smart_body_size\"`, `\"subject_pattern\"`, `\"subject_length\"`)\n  errors:\n  - commit_order: 1\n    sha: fda892cf64cd2f47285bc368aa892d0d6c134caa\n    smart_body_size: 'There are more than 15 changes in total on this commit, so the\n      commit message body should be at least 2 lines long, but it is 0 instead'\n    url: https://github.com/owner/repo/commit/fda892cf64cd2f47285bc368aa892d0d6c134caa\n  - commit_order: 2\n    sha: ceb9696937b19ee2cda96c968800596b45280b1e\n    subject_length: 'Subject has 1 characters but should be between 10 and 50'\n    subject_pattern: 'Subject does not follow pattern: `\"^[A-Z].+(?<!\\.)$\"`. Explanation:\n      Commit message subject must start with a capital letter and not finish with\n      a dot'\n    url: https://github.com/owner/repo/commit/ceb9696937b19ee2cda96c968800596b45280b1e\n\n\n:eight_pointed_black_star: **Warnings (1)** - *Fixing these may not be applicable, please review them case by case*\n- **pr_title**\n  PR title `\"Fix things\"` does not match pattern: `\"^XX-[0-9]+ .+$\"`. \n  Explanation: PR title must start with the Jira ID\n\n:white_check_mark: **Successful (3)** - *Good job on these!*\n- **branch_name**\n- **pr_body_checklist**\n- **pr_body_excludes**\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/transifex/totem", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "totem", "package_url": "https://pypi.org/project/totem/", "platform": "", "project_url": "https://pypi.org/project/totem/", "project_urls": {"Homepage": "https://github.com/transifex/totem"}, "release_url": "https://pypi.org/project/totem/0.2.2/", "requires_dist": ["Click", "PyGitHub (==1.40a4)", "pyaml (==17.12.1)", "GitPython (==2.1.11)"], "requires_python": "", "summary": "Software to verify that PRs and commits follow expected Quality Standards", "version": "0.2.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h2>Totem</h2>\n<p>Totem is a Health Check library that checks whether or not certain quality standards are followed on Pull Requests or local Git repositories.</p>\n<p>It is inspired by the <a href=\"https://tem.transifex.com/\" rel=\"nofollow\">Transifex Engineering Manifesto (TEM)</a>, a document that defines the Quality Standards used in <a href=\"https://www.transifex.com\" rel=\"nofollow\">Transifex</a>. Totem was created as an automated way to ensure high quality in Git-related guidelines described in the TEM.</p>\n<p>Currently it supports Github Pull Requests only, but can also be used locally.</p>\n<h1>Features</h1>\n<ul>\n<li>Multiple quality checks on Pull Requests</li>\n<li>Multiple quality checks on local Git repositories</li>\n<li>Comes with <a href=\"http://www.pre-commit.com\" rel=\"nofollow\">pre-commit</a> support, and can also be added as a pre-push Git hook</li>\n<li>Configurable: you can only enable the checks you want, and define the configuration parameters for each check</li>\n<li>Detailed report in the console, makes it easy to spot issues</li>\n<li>Compact summary shown as a comment created on the Pull Request, with configurable content (disabled by default)</li>\n</ul>\n<h1>Checks</h1>\n<p>Totem supports the following checks:</p>\n<ul>\n<li><strong>branch_name</strong>: the name of the branch must follow a certain regex pattern</li>\n<li><strong>pr_title</strong>: the title of the Pull Request must follow a certain regex pattern</li>\n<li><strong>pr_body_checklist</strong>: the body of the Pull Request must not contain any unfinished checklist item</li>\n<li><strong>pr_body_excludes</strong>: the body of the Pull Request must not contain certain strings</li>\n<li><strong>pr_body_includes</strong>: the body of the Pull Request must contain certain strings</li>\n<li><strong>commit_message</strong>: the message of each commit must follow these guidelines:\n<ul>\n<li>subject:\n<ul>\n<li>has a minimum and maximum allowed length</li>\n<li>must follow a certain regex pattern, e.g. start with an uppercase character and <em>not</em> end with a '.'</li>\n</ul>\n</li>\n<li>body\n<ul>\n<li>if there is a body, each line has a maximum allowed length</li>\n<li>if the number of total changed lines in a commit is above a certain threshold, a body must be present and must have a minimum number of lines</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>With a custom configuration, you can define which checks will be executed. All of the checks have at least a certain level of configuration.</p>\n<h2>Failure level</h2>\n<p>If a check is executed but fails to pass, it can either provide a failed status check (exit status = 1) or simply print out a warning.\nThe former can be used in order to prevent a Pull Request from being merged, a local commit to be completed, or local changes to be pushed to the remote, until all Totem checks are fixed.\nThe latter is mainly used as a sign that something might not be right, and can be useful when comitting in or pushing from a local repo, or when reviewing a Pull Request. The warning level is necessary because in some repos a rule may not be always applicable, so it should be judged on a case-by-case basis.</p>\n<h1>Installation</h1>\n<p>Totem can be installed by running <code>pip install totem</code>. It requires Python 3.6.0+.</p>\n<h1>Running on a PR</h1>\n<h2>Command line</h2>\n<p>Totem provides a console command and requires only the URL of the pull request to check.\nBy default, it will attempt to read the <code>.totem.yml</code> file on the repo as configuration. If it is not found, it defaults to <code>./contrib/config/sample.yml</code> on the Totem repo.</p>\n<pre><code>totem -p https://www.github.com/:owner/:repo/pulls/:number\n</code></pre>\n<p>Example:</p>\n<pre><code>totem -p https://github.com/transifex/totem/pull/17\n</code></pre>\n<p>NOTE: the default configuration will <em>not</em> create a comment on the Pull Request being checked. If you use a custom config, you can enable the comment feature.</p>\n<p>A custom config can be provided and supports a lot of options.</p>\n<pre><code>totem -p https://www.github.com/:owner/:repo/pulls/:number -c ./totem_config.yml\n</code></pre>\n<p>The project includes a sample configuration file, which can be found at <code>./contrib/config/sample.yml</code>.</p>\n<h2>CI</h2>\n<p>When running from a CI service, you need to retrieve the pull request URL from the environment variables the service provides. Also, you can set the URL of the CI build page, in which case a link appears on the PR comment that the Totem creates.</p>\n<p>For example, you make a call like this:</p>\n<pre><code>totem --pr-url \"&lt;pull_request_url&gt;\" --config-file \".totem.yml\" --details-url \"&lt;ci_service_build_page&gt;\"\n</code></pre>\n<p>where <code>&lt;pull_request_url&gt;</code> is a variable given from the CI service. For example, for CircleCI it's <code>$CIRCLE_PULL_REQUEST</code>.</p>\n<h3>Github authentication</h3>\n<p>In order to run Totem on pull requests of private projects, as well as in order to be able to enable reporting in PR comments, the tool needs to be authenticated when contacting Github. In order to do that, you need to add an environment variable with the Github access token to your CI service:\n<code>GITHUB_ACCESS_TOKEN=&lt;my_super_secret_token&gt;</code></p>\n<p>You also need to authorize add a deploy key on the CI service. For example, on Circle CI go to the project Settings &gt; Permissions &gt; Checkout SSH keys and click on [Add Deploy key].</p>\n<p>An example of a complete setup on a CI, together with GitHub authentication, looks like this:</p>\n<pre><span class=\"nt\">jobs</span><span class=\"p\">:</span>\n  <span class=\"nt\">totem</span><span class=\"p\">:</span>\n    <span class=\"nt\">docker</span><span class=\"p\">:</span>\n    <span class=\"p p-Indicator\">-</span> <span class=\"nt\">image</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">python:alpine</span>\n      <span class=\"nt\">environment</span><span class=\"p\">:</span>\n    <span class=\"nt\">steps</span><span class=\"p\">:</span>\n    <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">checkout</span>\n    <span class=\"p p-Indicator\">-</span> <span class=\"nt\">add_ssh_keys</span><span class=\"p\">:</span>\n        <span class=\"nt\">fingerprint</span><span class=\"p\">:</span>\n          <span class=\"c1\"># a public deploy key of the current repository on GitHub, something like:</span>\n          <span class=\"s\">\"8a:32:b1:d4:24:12:c4:33:8f:ac:0f:37:c8:84:c4:cc\"</span>\n    <span class=\"p p-Indicator\">-</span> <span class=\"nt\">run</span><span class=\"p\">:</span>\n        <span class=\"nt\">name</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">Install git/openssh-client and add github to the list of known hosts</span>\n        <span class=\"nt\">command</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">apk add git openssh-client &amp;&amp; mkdir ~/.ssh &amp;&amp; ssh-keyscan github.com &gt; ~/.ssh/known_hosts</span>\n    <span class=\"p p-Indicator\">-</span> <span class=\"nt\">run</span><span class=\"p\">:</span>\n        <span class=\"nt\">name</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">Install totem</span>\n        <span class=\"nt\">command</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">pip install totem</span>\n    <span class=\"p p-Indicator\">-</span> <span class=\"nt\">run</span><span class=\"p\">:</span>\n        <span class=\"nt\">name</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">Run Totem</span>\n        <span class=\"nt\">command</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">totem --pr-url \"&lt;pull_request_url&gt;\" --config-file \".totem.yml\" --details-url \"&lt;ci_service_build_page&gt;\"</span>\n</pre>\n<h3>CircleCI</h3>\n<p>Keep in mind that because of a bug in CircleCI, sometimes the <code>$CIRCLE_PULL_REQUEST</code> variable is empty. If the pull request argument in the <code>totem</code> CLI command is empty, Totem runs in local mode because there is no pull request to check. This can create false positives (that everything is OK when in fact it's not). Therefore, in order to run Totem without the false positives, the following workaround can be used:</p>\n<pre><span class=\"k\">if</span> <span class=\"o\">[[</span> <span class=\"s2\">\"</span><span class=\"nv\">$CIRCLE_BRANCH</span><span class=\"s2\">\"</span> <span class=\"o\">==</span> <span class=\"s2\">\"devel\"</span> <span class=\"o\">||</span> <span class=\"s2\">\"</span><span class=\"nv\">$CIRCLE_BRANCH</span><span class=\"s2\">\"</span> <span class=\"o\">==</span> <span class=\"s2\">\"master\"</span> <span class=\"o\">]]</span><span class=\"p\">;</span> <span class=\"k\">then</span>\n  <span class=\"nb\">echo</span> <span class=\"s2\">\"Totem is disabled on branch '</span><span class=\"nv\">$CIRCLE_BRANCH</span><span class=\"s2\">'. Won't execute.\"</span>\n<span class=\"k\">else</span>\n  <span class=\"k\">if</span> <span class=\"o\">[[</span> <span class=\"s2\">\"</span><span class=\"nv\">$CIRCLE_PULL_REQUEST</span><span class=\"s2\">\"</span> <span class=\"o\">==</span> <span class=\"s2\">\"\"</span> <span class=\"o\">]]</span><span class=\"p\">;</span> <span class=\"k\">then</span>\n    <span class=\"nb\">echo</span> <span class=\"s2\">\"\\$CIRCLE_PULL_REQUEST is empty. It's probably due to CircleCI's bug\"</span>\n    <span class=\"nb\">echo</span> <span class=\"s2\">\"(https://discuss.circleci.com/t/circle-pull-request-not-being-set/14409).\"</span>\n    <span class=\"nb\">echo</span> <span class=\"s2\">\"Please rerun the workflow until the PR variable is populated by CircleCI.\"</span>\n    <span class=\"nb\">exit</span> <span class=\"m\">1</span>\n  <span class=\"k\">else</span>\n    totem --pr-url <span class=\"s2\">\"</span><span class=\"nv\">$CIRCLE_PULL_REQUEST</span><span class=\"s2\">\"</span> --config-file <span class=\"s2\">\".totem.yml\"</span> --details-url <span class=\"s2\">\"</span><span class=\"nv\">$CIRCLE_BUILD_URL</span><span class=\"s2\">\"</span>\n  <span class=\"k\">fi</span>\n<span class=\"k\">fi</span>\n</pre>\n<p>The script above does not run Totem if the current branch is <code>devel</code> or <code>master</code>, which means that it's running on a merge commit. Of course, these are just sample branches and may differ from the base branches you have in your workflow.</p>\n<h1>Running on a local repository</h1>\n<p>You can call the command without any arguments. In this case it reads the <code>.totem.yml</code> file on the repo as configuration. If this file does not exist, the tool cannot run.</p>\n<pre><code>totem\n</code></pre>\n<p>You can also define a custom config file to use.</p>\n<pre><code>totem -c &lt;file&gt;\n</code></pre>\n<p>The local mode of Totem runs only a subset of the available (and enabled) checks:</p>\n<ul>\n<li><strong>branch_name</strong>: the name of the branch must follow a certain regex pattern</li>\n<li><strong>commit_message</strong>: the message of each commit must follow certain guidelines</li>\n</ul>\n<p>The reason is that the rest of the checks require a Pull Request, which is not available locally.</p>\n<h2>Pre-commit hook</h2>\n<p>In order to use it as a <a href=\"http://www.pre-commit.com\" rel=\"nofollow\">pre-commit</a> hook, add the following in your <code>.pre-commit-config.yaml</code> file.</p>\n<pre><span class=\"p p-Indicator\">-</span> <span class=\"nt\">repo</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">https://github.com/transifex/totem/</span>\n  <span class=\"nt\">rev</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">master</span>\n  <span class=\"nt\">hooks</span><span class=\"p\">:</span>\n  <span class=\"p p-Indicator\">-</span> <span class=\"nt\">id</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">totem</span>\n</pre>\n<p>Make sure you follow the instructions given in <a href=\"http://www.pre-commit.com\" rel=\"nofollow\">pre-commit</a> on how to install and use the hooks.\nAs soon as you do that, Totem will run every time you attempt to create a new commit and will abort the command in case any checks fail. Note that it will not abort in case of warnings.</p>\n<h2>Pre-push hook</h2>\n<p>In order to use it as a pre-push hook, add the following in the <code>.git/hooks/pre-push</code> file:</p>\n<pre><code>#!/bin/sh\ntotem\n</code></pre>\n<p>Note: Make sure the file is executable (<code>chmod +x .git/hooks/pre-push</code>).</p>\n<p>This way, totem will run every time you call <code>git push</code>, and will abort the command in case any checks fail. Note that it will not abort in case of warnings.</p>\n<h1>Configuration</h1>\n<p>This is a sample configuration that contains all available options:</p>\n<pre><span class=\"nt\">settings</span><span class=\"p\">:</span>\n  <span class=\"nt\">pr_comment_report</span><span class=\"p\">:</span>\n    <span class=\"nt\">enabled</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">True</span>\n    <span class=\"nt\">show_empty_sections</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">True</span>\n    <span class=\"nt\">show_message</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">True</span>\n    <span class=\"nt\">show_details</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">True</span>\n  <span class=\"nt\">console_report</span><span class=\"p\">:</span>\n    <span class=\"nt\">show_empty_sections</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">True</span>\n    <span class=\"nt\">show_message</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">True</span>\n    <span class=\"nt\">show_details</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">True</span>\n    <span class=\"nt\">show_successful</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">True</span>\n  <span class=\"nt\">local_console_report</span><span class=\"p\">:</span>\n    <span class=\"nt\">show_empty_sections</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">False</span>\n    <span class=\"nt\">show_message</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">True</span>\n    <span class=\"nt\">show_details</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">True</span>\n    <span class=\"nt\">show_successful</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">False</span>\n<span class=\"nt\">checks</span><span class=\"p\">:</span>\n  <span class=\"nt\">branch_name</span><span class=\"p\">:</span>\n    <span class=\"nt\">pattern</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">^[\\w\\d\\-]+$</span>\n    <span class=\"nt\">pattern_descr</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">Branch name must only include lowercase characters, digits and dashes</span>\n    <span class=\"nt\">failure_level</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">warning</span>\n  <span class=\"nt\">pr_title</span><span class=\"p\">:</span>\n    <span class=\"nt\">pattern</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">^[A-Z].+$</span>\n    <span class=\"nt\">pattern_descr</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">PR title must start with a capital letter</span>\n    <span class=\"nt\">failure_level</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">warning</span>\n  <span class=\"nt\">pr_body_checklist</span><span class=\"p\">:</span>\n    <span class=\"nt\">failure_level</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">error</span>\n  <span class=\"nt\">pr_body_excludes</span><span class=\"p\">:</span>\n    <span class=\"nt\">patterns</span><span class=\"p\">:</span>\n    <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">excl1</span>\n    <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">excl2</span>\n    <span class=\"nt\">failure_level</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">error</span>\n  <span class=\"nt\">pr_body_includes</span><span class=\"p\">:</span>\n    <span class=\"nt\">patterns</span><span class=\"p\">:</span>\n    <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">incl1</span>\n    <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">incl2</span>\n    <span class=\"nt\">failure_level</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">error</span>\n  <span class=\"nt\">commit_message</span><span class=\"p\">:</span>\n    <span class=\"nt\">subject</span><span class=\"p\">:</span>\n      <span class=\"nt\">min_length</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">10</span>\n      <span class=\"nt\">max_length</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">50</span>\n      <span class=\"nt\">pattern</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">^[A-Z].+(?&lt;!\\.)$</span>\n      <span class=\"nt\">pattern_descr</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">Commit message subject must start with a capital letter and not</span>\n        <span class=\"l l-Scalar l-Scalar-Plain\">finish with a dot</span>\n    <span class=\"nt\">body</span><span class=\"p\">:</span>\n      <span class=\"nt\">max_line_length</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">72</span>\n      <span class=\"nt\">smart_require</span><span class=\"p\">:</span>\n        <span class=\"nt\">min_changes</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">100</span>\n        <span class=\"nt\">min_body_lines</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">1</span>\n    <span class=\"nt\">failure_level</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">error</span>\n</pre>\n<h1>Sample report</h1>\n<p>This is how a report created as a comment on the pull request may look like:</p>\n<p>Checking if this PR follows the expected quality standards. Powered by <a href=\"https://www.github.com/transifex/totem\" rel=\"nofollow\">totem</a>.</p>\n<table>\n<thead>\n<tr>\n<th>failures</th>\n<th>warnings</th>\n<th>successful</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>2</td>\n<td>1</td>\n<td>3</td>\n</tr></tbody></table>\n<p>:bangbang: <strong>Failures (2)</strong> - <em>These need to be fixed!</em></p>\n<ul>\n<li><strong>pr_body_includes</strong>\nRequired strings in PR body are missing: <code>\"Problem and/or solution\"</code></li>\n<li><strong>commit_message</strong>\nFound 2 commit message(s) that do not follow the expected format (errors: <code>\"smart_body_size\"</code>, <code>\"subject_pattern\"</code>, <code>\"subject_length\"</code>)\nerrors:\n<ul>\n<li>commit_order: 1\nsha: fda892cf64cd2f47285bc368aa892d0d6c134caa\nsmart_body_size: 'There are more than 15 changes in total on this commit, so the\ncommit message body should be at least 2 lines long, but it is 0 instead'\nurl: <a href=\"https://github.com/owner/repo/commit/fda892cf64cd2f47285bc368aa892d0d6c134caa\" rel=\"nofollow\">https://github.com/owner/repo/commit/fda892cf64cd2f47285bc368aa892d0d6c134caa</a></li>\n<li>commit_order: 2\nsha: ceb9696937b19ee2cda96c968800596b45280b1e\nsubject_length: 'Subject has 1 characters but should be between 10 and 50'\nsubject_pattern: 'Subject does not follow pattern: <code>\"^[A-Z].+(?&lt;!\\.)$\"</code>. Explanation:\nCommit message subject must start with a capital letter and not finish with\na dot'\nurl: <a href=\"https://github.com/owner/repo/commit/ceb9696937b19ee2cda96c968800596b45280b1e\" rel=\"nofollow\">https://github.com/owner/repo/commit/ceb9696937b19ee2cda96c968800596b45280b1e</a></li>\n</ul>\n</li>\n</ul>\n<p>:eight_pointed_black_star: <strong>Warnings (1)</strong> - <em>Fixing these may not be applicable, please review them case by case</em></p>\n<ul>\n<li><strong>pr_title</strong>\nPR title <code>\"Fix things\"</code> does not match pattern: <code>\"^XX-[0-9]+ .+$\"</code>.\nExplanation: PR title must start with the Jira ID</li>\n</ul>\n<p>:white_check_mark: <strong>Successful (3)</strong> - <em>Good job on these!</em></p>\n<ul>\n<li><strong>branch_name</strong></li>\n<li><strong>pr_body_checklist</strong></li>\n<li><strong>pr_body_excludes</strong></li>\n</ul>\n\n          </div>"}, "last_serial": 4881368, "releases": {"0.2.2": [{"comment_text": "", "digests": {"md5": "e26fee3bc759bf8b37e031273ccc9cf4", "sha256": "3fcf3f0efff88dcf646f579b4ba0187483d9b663080e61ac4a330a47545cd725"}, "downloads": -1, "filename": "totem-0.2.2-py3-none-any.whl", "has_sig": false, "md5_digest": "e26fee3bc759bf8b37e031273ccc9cf4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 39921, "upload_time": "2019-02-28T22:13:59", "upload_time_iso_8601": "2019-02-28T22:13:59.845194Z", "url": "https://files.pythonhosted.org/packages/a8/5a/2128ddfb42313aec91eddcc7da6d8d3b96f45b1e26ee871c86697eabb776/totem-0.2.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1aab20a08e7ed68e5f442dd333a536a4", "sha256": "e755c691a3b156f7d8d05bab8a393bd6df973a00f9bb3ab0692d2187f8931053"}, "downloads": -1, "filename": "totem-0.2.2.tar.gz", "has_sig": false, "md5_digest": "1aab20a08e7ed68e5f442dd333a536a4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 52938, "upload_time": "2019-02-28T22:14:02", "upload_time_iso_8601": "2019-02-28T22:14:02.525766Z", "url": "https://files.pythonhosted.org/packages/7f/92/faae8be0e1625385b7d3fca7bbc6002c36a56a19cfce23fbbb733256ebb6/totem-0.2.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e26fee3bc759bf8b37e031273ccc9cf4", "sha256": "3fcf3f0efff88dcf646f579b4ba0187483d9b663080e61ac4a330a47545cd725"}, "downloads": -1, "filename": "totem-0.2.2-py3-none-any.whl", "has_sig": false, "md5_digest": "e26fee3bc759bf8b37e031273ccc9cf4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 39921, "upload_time": "2019-02-28T22:13:59", "upload_time_iso_8601": "2019-02-28T22:13:59.845194Z", "url": "https://files.pythonhosted.org/packages/a8/5a/2128ddfb42313aec91eddcc7da6d8d3b96f45b1e26ee871c86697eabb776/totem-0.2.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1aab20a08e7ed68e5f442dd333a536a4", "sha256": "e755c691a3b156f7d8d05bab8a393bd6df973a00f9bb3ab0692d2187f8931053"}, "downloads": -1, "filename": "totem-0.2.2.tar.gz", "has_sig": false, "md5_digest": "1aab20a08e7ed68e5f442dd333a536a4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 52938, "upload_time": "2019-02-28T22:14:02", "upload_time_iso_8601": "2019-02-28T22:14:02.525766Z", "url": "https://files.pythonhosted.org/packages/7f/92/faae8be0e1625385b7d3fca7bbc6002c36a56a19cfce23fbbb733256ebb6/totem-0.2.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:49:32 2020"}