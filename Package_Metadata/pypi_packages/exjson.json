{"info": {"author": "Pedro Rodriguez", "author_email": "", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6"], "description": "# EXJSON \n## Extended JSON Parser for Python\n\n### Introduction\nEXJSON is layer over the Python Standard JSON decoder library, which implements functionality not currently supported by it while trying to keep compliant with the JSON standard as much as possible.\n\n### Main Features\n* C Style Single-Line and Multi-Lines Comments.\n* Inclusion of other JSON files from local storage or an http/https source.\n* Included file checksum verification.\n* Absolute and Relative Value referencing using `$root`, `$parent` and `$this`.\n* Extensible Scripting.\n\n\n### Supported Python Versions\n- Python 3.x\n\n### Install/Upgrade\n\n```sh\npip install exjson --upgrade\n```\n\n### Sample\n\n**samplefile1.json**\n```json\n{\n  // Sample Property\n  \"name\": \"test file\",\n  // Sample value set with an included object\n  \"values\": [\n    /* INCLUDE \"samplefile2.json\" */\n    {\n      \"value_id\": \"923ko30k3\",\n      \"value\": \"Another Value\"\n    }\n  ]\n}\n```\n\n**samplefile2.json**\n```json\n/*\n  INCLUDIBLE TEST FILE\n*/\n{\n   \"value_id\": \"93987272\",\n   \"value\": \"This Value\"\n}\n```\n\n**Usage**\n```python\nimport exjson as json\n\n# Decode\nsample_value_set = json.load(\"./samplefile1.json\")\n\n# ... Do stuff with sample_value_set\n\n# Encode\nwith open(\"./result.json\") as f:\n    f.write(json.dumps(sample_value_set))\n\n```\n\n**result.json**\n```json\n{\n  \"name\": \"test file\",\n  \"values\": [\n    {\n       \"value_id\": \"93987272\",\n       \"value\": \"This Value\"\n    },\n    {\n      \"value_id\": \"923ko30k3\",\n      \"value\": \"Another Value\"\n    }\n  ]\n}\n```\n\nThe `#Include` directive accepts three parameters from which only the first one is required. They are pipe separated.\n\n```c\n#INCLUDE \"test.json|{}|e3ae49df2030ee913f8be352999f30d7\"\n```\n- `test.json`: the location of the file to include.\n- `{}`: the default value to use if the file is not found and the `error_on_included_file_not_found` is set to `False`.\n- `e3ae49df2030ee913f8be352999f30d7`: expected checksum. It will be used in order to verify the file validity.\n\nAdditionally you are table to download the file from an http/https url and verify its checksum to prevent injection of malicious code.\n\n**Include from HTTP/HTTPS**\n```json\n{\n  // Sample Property\n  \"name\": \"test file\",\n  // Sample value set with an included object\n  \"values\": [\n    /* INCLUDE \"http://www.exjson.com/lab/test.json\" */\n    {\n      \"value_id\": \"923ko30k3\",\n      \"value\": \"Another Value\"\n    }\n  ]\n}\n```\n\n**Include from HTTP/HTTPS and verify checksum**\n```json\n{\n  // Sample Property\n  \"name\": \"test file\",\n  // Sample value set with an included object\n  \"values\": [\n    /* INCLUDE \"http://www.exjson.com/lab/test.json|{}|e3ae49df2030ee913f8be352999f30d7\" */\n    {\n      \"value_id\": \"923ko30k3\",\n      \"value\": \"Another Value\"\n    }\n  ]\n}\n```\n\nFor more complex examples please check the [unit tests](https://github.com/prods/exjson/tree/master/tests).\n\n\n### API\nThe exjson API offers similar API to the one available on the Python standard JSON decoder/encoder library. \n\n* **load**(json_file_path, encoding=None, cls=None, object_hook=None, parse_float=None,\n          parse_int=None, parse_constant=None, object_pairs_hook=None, error_on_include_file_not_found=False, \\*\\*kw)\n\n  Deserializes JSON file into a dictionary.\n\n  **Arguments:**\n  - `json_file_path`: main json file to be loaded.\n  - `encoding`: encoding codec to use when loading the file and all included files. All included files should use the same encoding.\n  - `cls`: if specified, it uses the provided custom JSONDecoder instance to decode the json file. [See Python docs for details.](https://docs.python.org/3/library/json.html#json.JSONDecoder)\n  - `object_hook`: if specified, it will be called for every decoded JSON object and its value will be used instead of the default `dict`. [See Python docs for details.](https://docs.python.org/3/library/json.html#json.JSONDecoder)\n  - `parse_float`: if specified, it will be called for every `float` that is decoded. [See Python docs for details.](https://docs.python.org/3/library/json.html#json.JSONDecoder)\n  - `parse_int`: if specified, it will be called for every `int` that is decoded. [See Python docs for details.](https://docs.python.org/3/library/json.html#json.JSONDecoder)\n  - `parse_constant`: if specified, will be called with one of the following strings: '-Infinity', 'Infinity', 'NaN'. [See Python docs for details.](https://docs.python.org/3/library/json.html#json.JSONDecoder)\n  - `object_pairs_hook`: if specified, it will be called for every decoded JSON object with an ordered list of pairs. Its result will be used instead of the default `dict`. [See Python docs for details.](https://docs.python.org/3/library/json.html#json.JSONDecoder)\n  - `error_on_included_file_not_found`: if set to `True` an Exception is raised if an included file is not found.\n\n  **Supported Extended Functionality:**\n   - Supports #INCLUDE directive. \n   - Supports single-line and multi-line C style comments\n\n* **loads**(json_string, encoding=None, cls=None, object_hook=None, parse_float=None,\n          parse_int=None, parse_constant=None, object_pairs_hook=None, error_on_include_file_not_found=False, includes_path=None, \\*\\*kw)\n\n  Deserializes JSON string into a dictionary.\n\n  **Arguments:**\n  - `json_file_path`: main json file to be loaded.\n  - `encoding`: encoding codec to use when loading the file and all included files. All included files should use the same encoding.\n  - `cls`: if specified, it uses the provided custom JSONDecoder instance to decode the json file. [See Python docs for details.](https://docs.python.org/3/library/json.html#json.JSONDecoder)\n  - `object_hook`: if specified, it will be called for every decoded JSON object and its value will be used instead of the default `dict`. [See Python docs for details.](https://docs.python.org/3/library/json.html#json.JSONDecoder)\n  - `parse_float`: if specified, it will be called for every `float` that is decoded. [See Python docs for details.](https://docs.python.org/3/library/json.html#json.JSONDecoder)\n  - `parse_int`: if specified, it will be called for every `int` that is decoded. [See Python docs for details.](https://docs.python.org/3/library/json.html#json.JSONDecoder)\n  - `parse_constant`: if specified, will be called with one of the following strings: '-Infinity', 'Infinity', 'NaN'. [See Python docs for details.](https://docs.python.org/3/library/json.html#json.JSONDecoder)\n  - `object_pairs_hook`: if specified, it will be called for every decoded JSON object with an ordered list of pairs. Its result will be used instead of the default `dict`. [See Python docs for details.](https://docs.python.org/3/library/json.html#json.JSONDecoder)\n  - `error_on_included_file_not_found`: if set to `True` an Exception is raised if an included file is not found.\n  - `includes_path`: if provided it will be used to set the root path from where the included files will be loaded. When not provided the executing python script path will be used. Please, bear in mind that `#INCLUDE` directive file path is consider relative to this one.\n\n  **Supported Extended Functionality:**\n   - Supports #INCLUDE directive. \n   - Supports single-line and multi-line C style comments\n\n* **dumps(obj, skipkeys=False, ensure_ascii=True, check_circular=True,\n          allow_nan=True, cls=None, indent=None, separators=None,\n          default=None, sort_keys=False, \\*\\*kw)**\n\n  Serializes a python object/dictionary instance into a JSON string.\n\n  **Arguments:**\n  - `obj`: object instance to encode (serialize).\n  - `skipkeys`: If set to `False` a `TypeError` is raised if the keys are not primitive types (`int`, `str`, `float` or `None`). [See Python docs for details.](https://docs.python.org/3/library/json.html#json.JSONEncoder)\n  - `ensure_ascii`: If set to `True` all Incoming ASCII characters will be escaped in the output, else they will kept as-is. [See Python docs for details.](https://docs.python.org/3/library/json.html#json.JSONEncoder)\n  - `check_circular`: If set to `True` will check all classes and dictionaries for prevent circular references in order to prevent infinite recursion. [See Python docs for details.](https://docs.python.org/3/library/json.html#json.JSONEncoder)\n  - `allow_nan`: If set to `True`, `NaN`, `Infinity`, and `-Infinity` will be encoded as such. [See Python docs for details.](https://docs.python.org/3/library/json.html#json.JSONEncoder)\n  - `cls`: [See Python docs for details.](https://docs.python.org/3/library/json.html#json.JSONEncoder)\n  - `indent`: If set to `True` the output json will be indented. [See Python docs for details.](https://docs.python.org/3/library/json.html#json.JSONEncoder)\n  - `separators`: If specified, it should be a tuple listing the item and key separators to use during encoding. [See Python docs for details.](https://docs.python.org/3/library/json.html#json.JSONEncoder)\n  - `default`: [See Python docs for details.](https://docs.python.org/3/library/json.html#json.JSONEncoder.default)\n  - `sort_keys`: It set to `True` the output dictionary will be sorted by key. [See Python docs for details.](https://docs.python.org/3/library/json.html#json.JSONEncoder)\n\n  **Supported Extended Functionality:**\n  - Does not support #INCLUDE directive.\n  - Does not support comments.\n\n### Features:\n\n#### C Style Comments\nSupports C Style Comments.\nSingle-Line\n```c\n// TEST\n\n/* TEST */\n```\n\n```c\n/* \nTEST\n*/\n```\n\n\n#### C Style Include directive\n Loads specified file from the same path where the file is being loaded.\n Supports 2 syntax always enclosed in comments:\n\n ```c\n /* #INCLUDE <[PropertyName:]json_file_relative_path> */\n ```\n\n **PropertyName** _(Optional)_\n\n This is the name of the JSON property that will encapsulate the included file content. This required when including a file between other properties.\n\n\n ```json\n {\n  \"Name\": \"Test\"\n  /* #INCLUDES <Values:values.json> */\n }\n ```\n\n ```json\n {\n  \"Name\": \"Test\",\n  \"Values\": { \n    \"1\": \"Test1\",\n    \"2\": \"Test2\"\n   }\n }\n ```\n\n**json_file_relative_path** \n\nThis is the json file name including relative path (if located in a nested folder) to the path where the main json file exists. When the main json is loaded as a string and the `includes_path` is not specified it will use the executing python script path.\nIf the script is not found an error will be raised.\n\n\nThe `#INCLUDE` directive arguments can be enclosed in `<>` or `\"\"`.\n\n\n#### Access Value by Reference\n`$root`, `$parent` and `$this` accessor prefixes are supported. This accessors allow you to reference values from the JSON root, parent or current object even if they are being included or its value is being calculated at runtime using a function and they can be interpolated into a string without the need of enclosing characters.\n\nSample:\n```json\n{\n  \"prefix\": \"A\",\n    \"first\": [\n        { \"id\": \"A1\" },\n        { \"id\": \"A2\" },\n        { \"id\": \"A3\" },\n        { \"id\": \"$root.prefix4\" }\n    ],\n    \"second\": \"$root.prefix\",\n    \"third\": {\n        \"test1\": 23,\n        \"test2\": [\n            1,2,3\n        ],\n        \"test3\": {\n            \"deep1\": 44,\n            \"deep2\": false,\n            \"deep3\": \"$root.secondB\",\n            \"deep4\": \"AZ-$parent.test1X\"\n        }\n    },\n    \"fourth\": {\n      \"t1\": \"B\",\n      \"t2\": \"$this.t1\"\n    }\n}\n```\n\nResult:\n```json\n{\n  \"prefix\": \"A\",\n    \"first\": [\n        { \"id\": \"A1\" },\n        { \"id\": \"A2\" },\n        { \"id\": \"A3\" },\n        { \"id\": \"A4\" }\n    ],\n    \"second\": \"A\",\n    \"third\": {\n        \"test1\": 23,\n        \"test2\": [\n            1,2,3\n        ],\n        \"test3\": {\n            \"deep1\": 44,\n            \"deep2\": false,\n            \"deep3\": \"AB\",\n            \"deep4\": \"AZ-23X\"\n        }\n    },\n    \"fourth\": {\n      \"t1\": \"B\",\n      \"t2\": \"B\"\n    }\n}\n```\n\n * **first[3]** = `$root.prefix4` references the value of `prefix` on the JSON root while interpolated in the string.\n * **second** = `$root.prefix` references the value of `prefix` on the JSON root.\n * **third.test3.deep3** = `$root.secondB` referenced the value of `second` on the JSON root while interpolated in the string.\n * **third.test3.deep4** = `AZ-$parent.test1X` references the the value of `$root.third.test1` which is the parent object of `test3` while interpolated in a string.\n * **fourth.t2** = `$this.t1` references the value of `$root.fourth.t1` which is the parent\n\n**Current Limitations**\n> **Relative and Absolute Value references are not supported as function parameters yet.**\n\n#### Scripting\nEXJSON supports dynamic values by using an extensible scripting engine based on python. Commonly used extension functions can be found in the `scripting/extensions` package but you can create and load your own custom extensions functions by using the `register_custom_scripting_extension`.\n\n\n- Function calls can be interpolated in strings like `AAX-$.sequence('product-sequence')ZZ` which will yield `AAX-1ZZ`.\n- Null values can be set by using `null`.\n\n##### Standard Functions:\n###### **Cryptography**\n   * **MD5**\n\n     Generates a MD5 hash from the specified string value. When no string is provided a random long of 128 random bits is used.\n\n   Signature\n   ```json\n    $.md5([optional]string value)\n   ```\n\n   Usage\n      ```json\n      {\n        \"value\": \"$.md5('test message')\",\n        \"value1\": \"$.md5()\"\n      }\n      ```\n    Result\n      ```json\n      {\n        \"value\": \"c72b9698fa1927e1dd12d3cf26ed84b2\",\n        \"value1\": \"a1fa31838987e9a93338afb0831709d7\"\n      }\n      ```\n   * **SHA1**\n\n     Generates an SHA1 hash from the specified string value. When no string is provided a random long of 128 random bits is used.\n\n     Signature\n       ```json\n        $.sha1([optional]string value)\n       ```\n\n     Usage\n      ```json\n      {\n        \"value\": \"$.sha1('test message')\",\n        \"value1\": \"$.sha1()\"\n      }\n      ```\n     Result\n      ```json\n      {\n        \"value\": \"35ee8386410d41d14b3f779fc95f4695f4851682\",\n        \"value1\": \"18ba91517fde987433d27dab5f49390483ac2f03\"\n      }\n      ```\n  * **SHA256**\n\n     Generates an SHA256 hash from the specified string value. When no string is provided a random long of 256 random bits is used.\n\n     Signature\n       ```json\n        $.sha256([optional]string value)\n       ```\n\n    Usage\n      ```json\n      {\n        \"value\": \"$.sha256('test message')\",\n        \"value1\": \"$.sha256()\"\n      }\n      ```\n    Result\n      ```json\n      {\n        \"value\": \"3f0a377ba0a4a460ecb616f6507ce0d8cfa3e704025d4fda3ed0c5ca05468728\",\n        \"value1\": \"c0329b1e9a0b31d62da4855ed3730ad7104a4cd634415b38c038ccaf1db83cc3\"\n      }\n      ```\n  * **SHA512**\n\n     Generates an SHA512 hash from the specified string value. When no string is provided a random long of 512 random bits is used.\n\n     Signature\n       ```json\n        $.sha512([optional]string value)\n       ```\n\n    Usage\n      ```json\n      {\n        \"value\": \"$.sha512('test message')\",\n        \"value1\": \"$.sha512()\"\n      }\n      ```\n    Result\n      ```json\n      {\n        \"value\": \"950b2a7effa78f51a63515ec45e03ecebe50ef2f1c41e69629b50778f11bc080002e4db8112b59d09389d10f3558f85bfdeb4f1cc55a34217af0f8547700ebf3\",\n        \"value1\": \"5ac6b81120595d01cce41f18a14440dffb435955020a682c47288eae9aacf5263a051e14bff01f688433cb575dab0ac82b6135286d0f1ced93dbc37375ffba68\"\n      }\n      ```\n###### Date and Time\n\n  By default datetime functions will return date and time in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format with explicit TZ even on UTC. ISO-8601 Zulu format can be achived by using the `Z` format as described in the table below:\n\n| \"Universal\" Format Code | [Python Format Code](http://strftime.org/)        | Description                                                      | Example     |\n|-------------|---------------------------|------------------------------------------------------------------|-------------|\n| dddd        |   %A                      | Weekday as locale\u2019s full name.                                   | Monday      |\n| ddd         |   %a                      | Weekday as locale\u2019s abbreviated name.                            | Mon         |\n| ww          |   %w                      | Weekday as a zero padded number, where 0 is Sunday and 6 is Saturday.|  01         |\n| w           |   %-w                      | Weekday as a decimal number, where 0 is Sunday and 6 is Saturday.|  1          |\n| dd          |   %d                      | Day of the month as a zero-padded decimal number.                | 30          |\n| d           |   %-d                     | Day of the month as a decimal number.         | 30          |\n| MMMM        |   %B                      | Month as locale\u2019s full name.                                     | September   |\n| MMM         |   %b                      | Month as locale\u2019s abbreviated name.                              | Sep         |\n| MM          |   %m                      | Month as a zero-padded decimal number.                           | 09          |\n| M           |   %-m                     | Month as a decimal number.                    |  9          |\n| yyyy        |   %Y                      | Year with century as a decimal number.                           | 2013        |\n| y           |   %y                      | Year without century as a zero-padded decimal number.            | 13          |\n| HH          |   %H                      | Hour (24-hour clock) as a zero-padded decimal number.            | 19          |\n| H           |   %-H                     | Hour (24-hour clock) as a decimal number.     | 19          |\n| hh          |   %I                      | Hour (12-hour clock) as a zero-padded decimal number.            | 07          |\n| h           |   %-I                     | Hour (12-hour clock) as a decimal number.     |  7          |\n| tt          |   %p                      | Locale\u2019s equivalent of either AM or PM.                          | AM          |\n| mm          |   %M                      | Minute as a zero-padded decimal number.                          | 06          |\n| m           |   %-M                     | Minute as a decimal number.                                      |  6          |\n| ss          |   %S                      | Second as a zero-padded decimal number.                          | 05          |\n| s           |   %-S                     | Second as a decimal number.                   |  5          |  \n| f           |   %f                      | Microsecond as a decimal number, zero-padded on the left.        | 000000      |\n| zzz         |   %Z                      | Time zone name (empty string if the object is -00:00).           | -04:00      |\n| z           |   %z                      | UTC offset in the form +HHMM or -HHMM.                           | -04:00      |\n| j           |   %j                      | Day of the year as a zero-padded decimal number.                 | 273         |\n| jj          |   %-j                     | Day of the year as a decimal number.          | 273         |\n| UU          |   %U                      | Week number of the year (Sunday as the first day of the week) as a zero padded decimal number. All days in a new year preceding the first Sunday are considered to be in week 0.        | 09 |\n| U           |   %-U                     | Week number of the year (Sunday as the first day of the week) as a decimal number. All days in a new year preceding the first Sunday are considered to be in week 0.        |  9 |\n| WW          |   %W                      | Week number of the year (Monday as the first day of the week) as a zero padded decimal number. All days in a new year preceding the first Monday are considered to be in week 0.                    | 08 |\n| W           |   %W                      | Week number of the year (Monday as the first day of the week) as a decimal number. All days in a new year preceding the first Monday are considered to be in week 0.                    |  8 |\n| q           |   **custom**              | Calendar Quarter as zero padded number.                           | 04          |\n| qq          |   **custom**              | Calendar Quarter as number.                                      |  4          |\n| F           |   %c                      | Locale\u2019s appropriate date and time representation.        | Mon Sep 30 07:06:05 2013 |\n| D           |   %x                      | Locale\u2019s appropriate date representation.        | 09/30/13 |\n| T           |   %X                      | Locale\u2019s appropriate time representation.        | 07:06:05 |\n| Z           |   %Y-%m-%dT%H:%m:%s.%f%z  | Zulu UTC ISO-8601                                | 2018-05-25T15:05:25.120Z |\n\n  __No need to worry about running it on windows or linux. The universal format converter takes care of the platform specific tokens `-`/`#`.__\n\n\n  * **NOW()**\n\n     Gets the current date and time based on server timezone.\n\n       Signature\n       ```json\n        $.now([optional]format string)\n       ```\n\n       Usage\n\n          ```json\n          {\n            \"value\": \"$.now('MM/dd/yyyy hh:mm tt')\",\n            \"value1\": \"$.now()\"\n          }\n          ```\n\n       Result\n\n          ```json\n          {\n            \"value\": \"05/27/2018 12:50 PM\",\n            \"value1\": \"2018-05-27T12:50:05.302736-04:00\"\n          }\n          ```\n  * **NOW().ADD()**\n\n     Adds the specified number of time units to the current date and time based on server timezone.\n\n       | Unit of Time  |  Description            |\n       |------------|-------------------------|\n       | day        | Adds or subtracts days. |\n       | week       | Adds or subtracts weeks. |\n       | month      | Adds or subtracts months. |\n       | year       | Adds or subtracts years. |\n       | quarter    | Adds or subtracts quarter. |\n\n       Signature\n       ```json\n        $.now().add([required]unit of time criterias..., [optional]format string)\n       ```\n\n       Usage\n\n          ```json\n          {\n            \"value\": \"$.now().add(day=-1,'MM/dd/yyyy')\",\n            \"value1\": \"$.now().add(day=-1)\"\n          }\n          ```\n\n       Result\n\n          ```json\n          {\n            \"value\": \"05/26/2018\",\n            \"value1\": \"2018-05-26T00:00:00.0000-04:00\"\n          }\n          ```\n\n  * **NOW().UTC()**\n\n    Same as `now()` but returns `UTC` date and time.\n\n  * **NOW().UTC().ADD()**\n\n    Same as `now().add()` but returns `UTC` date and time.\n\n* Sequences and Identification\n  * **UUID4()**\n\n     Returns a uuid v4 hash.\n\n      Signature\n       ```json\n        $.uuid4()\n       ```\n\n       Usage\n\n          ```json\n          {\n            \"value\": \"$.uuid4()\",\n          }\n          ```\n\n       Result\n\n          ```json\n          {\n            \"value\": \"9f1ac603-0e7c-4d25-b73c-05ac2807d814\"\n          }\n          ```\n  * **SEQUENCE()**\n\n     Creates and returns one or multiple named integer sequence values. Sequences are generated per load/loads call. Sequences are destroyed once they are populated in the JSON file.\n\n       Signature\n       ```json\n        $.sequence([required]sequence_name,  [optional]padding_pattern, [optional]step)\n       ```\n       The `padding_pattern` uses the [python string formatting mini language](https://docs.python.org/3/library/string.html#formatstrings) and the `step` is defaulted to `1` if no value is provided.\n\n       Usage\n\n          ```json\n          {\n            \"value\": \"$.sequence('seq1',2)\",\n            \"values\": [\n                \"test1\": \"A-$.sequence('seq2', '{0:0>4}')\",\n                \"test2\": \"A-$.sequence('seq2', '{0:0>4}')\"\n                \"test3\": \"A-$.sequence('seq2', '{0:0>4}')\"\n                \"test4\": \"A-$.sequence('seq2', '{0:0>4}')\"\n            ],\n            \"value1\": \"$.sequence('seq1',2)\",\n          }\n          ```\n\n       Result\n\n          ```json\n          {\n            \"value\": \"1\",\n            \"values\": [\n                \"test1\": \"A-0001\",\n                \"test2\": \"A-0002\"\n                \"test3\": \"A-0003\"\n                \"test4\": \"A-0004\"\n            ],\n            \"value1\": \"1\",\n          }\n          ```\n  * **FILE_CHECKSUM()**\n\n     Calculates MD5 or SHA1 checksum for the specified file. The file path should be relative to the path where the JSON file is located if loaded or included. Relative to the executing python script if using loads from a JSON string. If no `algorithm` is provided `md5` will be used by default.\n\n       Signature\n       ```json\n        $.file_checksum([required]file_path,  [optional]algorithm)\n       ```\n       Supported algorithms are `md5` and `sha1`.\n\n       Usage\n\n          ```json\n          {\n            \"filename\": \"../file.db\",\n            \"checksum\": \"$.file_checksum('../file.db', 'md5')\"\n          }\n          ```\n\n       Result\n\n          ```json\n           {\n            \"filename\": \"../file.db\",\n            \"checksum\": \"ceb4c1f4b28bd59b941573d8a41f14d3\"\n          }\n          ```\n\n##### How to Create a custom scripting extension function and register it at Run-Time.\nWhile standard functions can be added through issues (requests) or pull requests into the version branch you may want to use some functions that are too specific to your scenario that cannot be classified as standard. In this case you may want to register them at run-time.\n\nStandard or Custom Scripting Extension Function Example:\n```python\ndef custom_add(*args):\n    result = 0\n    if len(args) == 0:\n        result = 0\n    else:\n        for r in args:\n            result = result + r\n    return result\n```\nA custom scripting function should always have an `*args` variable in order to allow for an undefined number of parameters to be passed in. Parameter check can always be performed inside the function body if required. The scripting extension functio should always return a primitive type (`int`, `str`, `float`, etc...). Arrays and other types are not supported yet.\n\nRegistration:\n```python\nif __name__ == \"__main__\":\n    exjson.register_custom_scripting_extension(\"add\", custom_add)\n    ...\n    exjson.load(\"sample.json\")\n```\n\nUsage:\n```json\n{\n  \"a\": $.add(10, 20)\n}\n```\n\nResult:\n```json\n{\n  \"a\": 30\n}\n```\n\nThe resulting value can be accessed using the relative and absolute accessors `$this`, `$parent` and `$root` from anywhere in the current file or an included JSON file. \n\n### Life Cycle:\n\n1. Load JSON File Content\n2. Comments are extracted.\n3. Directives are extracted from comments.\n4. Include files (`#INCLUDE` directive) content are extracted recursively (Apply steps 1 to 4). \n   The load process is stopped if an included file is determined to have a circular reference.\n5. Include files are merged into JSON file which included it.\n6. Script function calls are extracted and evaluated.\n7. Relative and Absolute value references are evaluated.\n\n\n### Unit Test Requirements:\nEXJSON unit testing runs on the [standard Python unit test library](https://docs.python.org/2/library/unittest.html). But I EXJSON unit test functions support automatic-generation of call diagrams from each test function execution. Because of this there is an additional dependency on [PyCallGraph](http://pycallgraph.readthedocs.io/en/master/). Please follow the steps below in order to install this dependency on Windows, Linux or OSX.\nPlease bear in mind that the steps below assume you already have python 3.6+ and pip installed. Depending on how your environment is setup Python 3.x `pip` may be available through an alias named `pip3`.\n\n#### Turn on and off call graph generator\nCall graph generate is controlled by an environmental variable named `GENERATE_CALL_GRAPHS`. If the environmental variable does not exists the value is defaulted to `False`, no graph will be generated. If it exists and it is set to `True` graphs will be generated in the `tests/calls` folder.\n\n**Linux/OSX**\n```bash\nexport GENERATE_CALL_GRAPHS=True\n```\n\n**Windows**\n```cmd\n%GENERATE_CALL_GRAPHS%=True\n```\n\n#### Ubuntu\n1. Install `Graphviz` and it's development libraries\n```bash\nsudo apt-get install graphviz libgraphviz-dev\n```\n2. Install `pygraphviz`\n```bash\npip install pygraphviz\n``` \n4. Install `pycallgraph`.\n```bash\npip install pycallgraph\n```\n\nAlternatively you can download the [PyGraphviz](https://pypi.org/project/graphviz/#files) wheel file from Pypi.org and installing it as described in steps 4 and 5 for Windows below.\n\n### Windows\n1. Download [Graphviz for windows](https://graphviz.gitlab.io/_pages/Download/Download_windows.html) from the graphiviz site.\n2. Add the Graphviz bin path `C:\\Program Files (x86)\\Graphviz2.38\\bin` in your Windows path.\n3. **Close and reopen your terminals so the path changes is recognized.**\n4. Download the [pygraphviz python 3.6 wheel](https://pypi.org/project/graphviz/#files).\n5. Install the `pygraphviz` wheel.\n  ```bash\n  pip install graphviz-0.8.3-py2.py3-none-any.whl\n  ``` \n6. Install `pycallgraph`\n```bash\npip install pycallgraph\n```\n\n### OSX\n1. Install [HomeBrew](https://brew.sh/).\n2. Download the [pygraphviz python 3.6 wheel](https://pypi.org/project/graphviz/#files).\n3. Install the `pygraphviz` wheel.\n```bash\npip install graphviz-0.8.3-py2.py3-none-any.whl\n``` \n4. Install `pycallgraph`.\n```bash\npip install pycallgraph\n```\n\n### Road Map:\n* Better unit testing coverage.\n* Stabilize and resolve any bugs.\n* Segregate and make better scripting extension documentation.\n* Support Multi-File Serialization.\n* For More check [Issues](https://github.com/prods/exjson/issues) tagged as `next release` or `deffered` for details.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/prods/exjson", "keywords": "json serialization decoder encoder configuration", "license": "", "maintainer": "", "maintainer_email": "", "name": "exjson", "package_url": "https://pypi.org/project/exjson/", "platform": "", "project_url": "https://pypi.org/project/exjson/", "project_urls": {"Bug Reports": "https://github.com/prods/exjson/issues", "Homepage": "https://github.com/prods/exjson", "Source": "https://github.com/prods/exjson"}, "release_url": "https://pypi.org/project/exjson/1.0.2/", "requires_dist": null, "requires_python": "", "summary": "Extended JSON Parser Library for Python", "version": "1.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>EXJSON</h1>\n<h2>Extended JSON Parser for Python</h2>\n<h3>Introduction</h3>\n<p>EXJSON is layer over the Python Standard JSON decoder library, which implements functionality not currently supported by it while trying to keep compliant with the JSON standard as much as possible.</p>\n<h3>Main Features</h3>\n<ul>\n<li>C Style Single-Line and Multi-Lines Comments.</li>\n<li>Inclusion of other JSON files from local storage or an http/https source.</li>\n<li>Included file checksum verification.</li>\n<li>Absolute and Relative Value referencing using <code>$root</code>, <code>$parent</code> and <code>$this</code>.</li>\n<li>Extensible Scripting.</li>\n</ul>\n<h3>Supported Python Versions</h3>\n<ul>\n<li>Python 3.x</li>\n</ul>\n<h3>Install/Upgrade</h3>\n<pre>pip install exjson --upgrade\n</pre>\n<h3>Sample</h3>\n<p><strong>samplefile1.json</strong></p>\n<pre><span class=\"p\">{</span>\n  <span class=\"err\">//</span> <span class=\"err\">Sample</span> <span class=\"err\">Property</span>\n  <span class=\"nt\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"test file\"</span><span class=\"p\">,</span>\n  <span class=\"err\">//</span> <span class=\"err\">Sample</span> <span class=\"err\">value</span> <span class=\"err\">set</span> <span class=\"err\">with</span> <span class=\"err\">an</span> <span class=\"err\">included</span> <span class=\"err\">object</span>\n  <span class=\"nt\">\"values\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n    <span class=\"err\">/*</span> <span class=\"err\">INCLUDE</span> <span class=\"s2\">\"samplefile2.json\"</span> <span class=\"err\">*/</span>\n    <span class=\"p\">{</span>\n      <span class=\"nt\">\"value_id\"</span><span class=\"p\">:</span> <span class=\"s2\">\"923ko30k3\"</span><span class=\"p\">,</span>\n      <span class=\"nt\">\"value\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Another Value\"</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">]</span>\n<span class=\"p\">}</span>\n</pre>\n<p><strong>samplefile2.json</strong></p>\n<pre><span class=\"err\">/*</span>\n  <span class=\"err\">INCLUDIBLE</span> <span class=\"err\">TEST</span> <span class=\"err\">FILE</span>\n<span class=\"err\">*/</span>\n<span class=\"p\">{</span>\n   <span class=\"nt\">\"value_id\"</span><span class=\"p\">:</span> <span class=\"s2\">\"93987272\"</span><span class=\"p\">,</span>\n   <span class=\"nt\">\"value\"</span><span class=\"p\">:</span> <span class=\"s2\">\"This Value\"</span>\n<span class=\"p\">}</span>\n</pre>\n<p><strong>Usage</strong></p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">exjson</span> <span class=\"k\">as</span> <span class=\"nn\">json</span>\n\n<span class=\"c1\"># Decode</span>\n<span class=\"n\">sample_value_set</span> <span class=\"o\">=</span> <span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"s2\">\"./samplefile1.json\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># ... Do stuff with sample_value_set</span>\n\n<span class=\"c1\"># Encode</span>\n<span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s2\">\"./result.json\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n    <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">dumps</span><span class=\"p\">(</span><span class=\"n\">sample_value_set</span><span class=\"p\">))</span>\n</pre>\n<p><strong>result.json</strong></p>\n<pre><span class=\"p\">{</span>\n  <span class=\"nt\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"test file\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"values\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span>\n       <span class=\"nt\">\"value_id\"</span><span class=\"p\">:</span> <span class=\"s2\">\"93987272\"</span><span class=\"p\">,</span>\n       <span class=\"nt\">\"value\"</span><span class=\"p\">:</span> <span class=\"s2\">\"This Value\"</span>\n    <span class=\"p\">},</span>\n    <span class=\"p\">{</span>\n      <span class=\"nt\">\"value_id\"</span><span class=\"p\">:</span> <span class=\"s2\">\"923ko30k3\"</span><span class=\"p\">,</span>\n      <span class=\"nt\">\"value\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Another Value\"</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">]</span>\n<span class=\"p\">}</span>\n</pre>\n<p>The <code>#Include</code> directive accepts three parameters from which only the first one is required. They are pipe separated.</p>\n<pre><span class=\"cp\">#INCLUDE \"test.json|{}|e3ae49df2030ee913f8be352999f30d7\"</span>\n</pre>\n<ul>\n<li><code>test.json</code>: the location of the file to include.</li>\n<li><code>{}</code>: the default value to use if the file is not found and the <code>error_on_included_file_not_found</code> is set to <code>False</code>.</li>\n<li><code>e3ae49df2030ee913f8be352999f30d7</code>: expected checksum. It will be used in order to verify the file validity.</li>\n</ul>\n<p>Additionally you are table to download the file from an http/https url and verify its checksum to prevent injection of malicious code.</p>\n<p><strong>Include from HTTP/HTTPS</strong></p>\n<pre><span class=\"p\">{</span>\n  <span class=\"err\">//</span> <span class=\"err\">Sample</span> <span class=\"err\">Property</span>\n  <span class=\"nt\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"test file\"</span><span class=\"p\">,</span>\n  <span class=\"err\">//</span> <span class=\"err\">Sample</span> <span class=\"err\">value</span> <span class=\"err\">set</span> <span class=\"err\">with</span> <span class=\"err\">an</span> <span class=\"err\">included</span> <span class=\"err\">object</span>\n  <span class=\"nt\">\"values\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n    <span class=\"err\">/*</span> <span class=\"err\">INCLUDE</span> <span class=\"s2\">\"http://www.exjson.com/lab/test.json\"</span> <span class=\"err\">*/</span>\n    <span class=\"p\">{</span>\n      <span class=\"nt\">\"value_id\"</span><span class=\"p\">:</span> <span class=\"s2\">\"923ko30k3\"</span><span class=\"p\">,</span>\n      <span class=\"nt\">\"value\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Another Value\"</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">]</span>\n<span class=\"p\">}</span>\n</pre>\n<p><strong>Include from HTTP/HTTPS and verify checksum</strong></p>\n<pre><span class=\"p\">{</span>\n  <span class=\"err\">//</span> <span class=\"err\">Sample</span> <span class=\"err\">Property</span>\n  <span class=\"nt\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"test file\"</span><span class=\"p\">,</span>\n  <span class=\"err\">//</span> <span class=\"err\">Sample</span> <span class=\"err\">value</span> <span class=\"err\">set</span> <span class=\"err\">with</span> <span class=\"err\">an</span> <span class=\"err\">included</span> <span class=\"err\">object</span>\n  <span class=\"nt\">\"values\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n    <span class=\"err\">/*</span> <span class=\"err\">INCLUDE</span> <span class=\"s2\">\"http://www.exjson.com/lab/test.json|{}|e3ae49df2030ee913f8be352999f30d7\"</span> <span class=\"err\">*/</span>\n    <span class=\"p\">{</span>\n      <span class=\"nt\">\"value_id\"</span><span class=\"p\">:</span> <span class=\"s2\">\"923ko30k3\"</span><span class=\"p\">,</span>\n      <span class=\"nt\">\"value\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Another Value\"</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">]</span>\n<span class=\"p\">}</span>\n</pre>\n<p>For more complex examples please check the <a href=\"https://github.com/prods/exjson/tree/master/tests\" rel=\"nofollow\">unit tests</a>.</p>\n<h3>API</h3>\n<p>The exjson API offers similar API to the one available on the Python standard JSON decoder/encoder library.</p>\n<ul>\n<li>\n<p><strong>load</strong>(json_file_path, encoding=None, cls=None, object_hook=None, parse_float=None,\nparse_int=None, parse_constant=None, object_pairs_hook=None, error_on_include_file_not_found=False, **kw)</p>\n<p>Deserializes JSON file into a dictionary.</p>\n<p><strong>Arguments:</strong></p>\n<ul>\n<li><code>json_file_path</code>: main json file to be loaded.</li>\n<li><code>encoding</code>: encoding codec to use when loading the file and all included files. All included files should use the same encoding.</li>\n<li><code>cls</code>: if specified, it uses the provided custom JSONDecoder instance to decode the json file. <a href=\"https://docs.python.org/3/library/json.html#json.JSONDecoder\" rel=\"nofollow\">See Python docs for details.</a></li>\n<li><code>object_hook</code>: if specified, it will be called for every decoded JSON object and its value will be used instead of the default <code>dict</code>. <a href=\"https://docs.python.org/3/library/json.html#json.JSONDecoder\" rel=\"nofollow\">See Python docs for details.</a></li>\n<li><code>parse_float</code>: if specified, it will be called for every <code>float</code> that is decoded. <a href=\"https://docs.python.org/3/library/json.html#json.JSONDecoder\" rel=\"nofollow\">See Python docs for details.</a></li>\n<li><code>parse_int</code>: if specified, it will be called for every <code>int</code> that is decoded. <a href=\"https://docs.python.org/3/library/json.html#json.JSONDecoder\" rel=\"nofollow\">See Python docs for details.</a></li>\n<li><code>parse_constant</code>: if specified, will be called with one of the following strings: '-Infinity', 'Infinity', 'NaN'. <a href=\"https://docs.python.org/3/library/json.html#json.JSONDecoder\" rel=\"nofollow\">See Python docs for details.</a></li>\n<li><code>object_pairs_hook</code>: if specified, it will be called for every decoded JSON object with an ordered list of pairs. Its result will be used instead of the default <code>dict</code>. <a href=\"https://docs.python.org/3/library/json.html#json.JSONDecoder\" rel=\"nofollow\">See Python docs for details.</a></li>\n<li><code>error_on_included_file_not_found</code>: if set to <code>True</code> an Exception is raised if an included file is not found.</li>\n</ul>\n<p><strong>Supported Extended Functionality:</strong></p>\n<ul>\n<li>Supports #INCLUDE directive.</li>\n<li>Supports single-line and multi-line C style comments</li>\n</ul>\n</li>\n<li>\n<p><strong>loads</strong>(json_string, encoding=None, cls=None, object_hook=None, parse_float=None,\nparse_int=None, parse_constant=None, object_pairs_hook=None, error_on_include_file_not_found=False, includes_path=None, **kw)</p>\n<p>Deserializes JSON string into a dictionary.</p>\n<p><strong>Arguments:</strong></p>\n<ul>\n<li><code>json_file_path</code>: main json file to be loaded.</li>\n<li><code>encoding</code>: encoding codec to use when loading the file and all included files. All included files should use the same encoding.</li>\n<li><code>cls</code>: if specified, it uses the provided custom JSONDecoder instance to decode the json file. <a href=\"https://docs.python.org/3/library/json.html#json.JSONDecoder\" rel=\"nofollow\">See Python docs for details.</a></li>\n<li><code>object_hook</code>: if specified, it will be called for every decoded JSON object and its value will be used instead of the default <code>dict</code>. <a href=\"https://docs.python.org/3/library/json.html#json.JSONDecoder\" rel=\"nofollow\">See Python docs for details.</a></li>\n<li><code>parse_float</code>: if specified, it will be called for every <code>float</code> that is decoded. <a href=\"https://docs.python.org/3/library/json.html#json.JSONDecoder\" rel=\"nofollow\">See Python docs for details.</a></li>\n<li><code>parse_int</code>: if specified, it will be called for every <code>int</code> that is decoded. <a href=\"https://docs.python.org/3/library/json.html#json.JSONDecoder\" rel=\"nofollow\">See Python docs for details.</a></li>\n<li><code>parse_constant</code>: if specified, will be called with one of the following strings: '-Infinity', 'Infinity', 'NaN'. <a href=\"https://docs.python.org/3/library/json.html#json.JSONDecoder\" rel=\"nofollow\">See Python docs for details.</a></li>\n<li><code>object_pairs_hook</code>: if specified, it will be called for every decoded JSON object with an ordered list of pairs. Its result will be used instead of the default <code>dict</code>. <a href=\"https://docs.python.org/3/library/json.html#json.JSONDecoder\" rel=\"nofollow\">See Python docs for details.</a></li>\n<li><code>error_on_included_file_not_found</code>: if set to <code>True</code> an Exception is raised if an included file is not found.</li>\n<li><code>includes_path</code>: if provided it will be used to set the root path from where the included files will be loaded. When not provided the executing python script path will be used. Please, bear in mind that <code>#INCLUDE</code> directive file path is consider relative to this one.</li>\n</ul>\n<p><strong>Supported Extended Functionality:</strong></p>\n<ul>\n<li>Supports #INCLUDE directive.</li>\n<li>Supports single-line and multi-line C style comments</li>\n</ul>\n</li>\n<li>\n<p><strong>dumps(obj, skipkeys=False, ensure_ascii=True, check_circular=True,\nallow_nan=True, cls=None, indent=None, separators=None,\ndefault=None, sort_keys=False, **kw)</strong></p>\n<p>Serializes a python object/dictionary instance into a JSON string.</p>\n<p><strong>Arguments:</strong></p>\n<ul>\n<li><code>obj</code>: object instance to encode (serialize).</li>\n<li><code>skipkeys</code>: If set to <code>False</code> a <code>TypeError</code> is raised if the keys are not primitive types (<code>int</code>, <code>str</code>, <code>float</code> or <code>None</code>). <a href=\"https://docs.python.org/3/library/json.html#json.JSONEncoder\" rel=\"nofollow\">See Python docs for details.</a></li>\n<li><code>ensure_ascii</code>: If set to <code>True</code> all Incoming ASCII characters will be escaped in the output, else they will kept as-is. <a href=\"https://docs.python.org/3/library/json.html#json.JSONEncoder\" rel=\"nofollow\">See Python docs for details.</a></li>\n<li><code>check_circular</code>: If set to <code>True</code> will check all classes and dictionaries for prevent circular references in order to prevent infinite recursion. <a href=\"https://docs.python.org/3/library/json.html#json.JSONEncoder\" rel=\"nofollow\">See Python docs for details.</a></li>\n<li><code>allow_nan</code>: If set to <code>True</code>, <code>NaN</code>, <code>Infinity</code>, and <code>-Infinity</code> will be encoded as such. <a href=\"https://docs.python.org/3/library/json.html#json.JSONEncoder\" rel=\"nofollow\">See Python docs for details.</a></li>\n<li><code>cls</code>: <a href=\"https://docs.python.org/3/library/json.html#json.JSONEncoder\" rel=\"nofollow\">See Python docs for details.</a></li>\n<li><code>indent</code>: If set to <code>True</code> the output json will be indented. <a href=\"https://docs.python.org/3/library/json.html#json.JSONEncoder\" rel=\"nofollow\">See Python docs for details.</a></li>\n<li><code>separators</code>: If specified, it should be a tuple listing the item and key separators to use during encoding. <a href=\"https://docs.python.org/3/library/json.html#json.JSONEncoder\" rel=\"nofollow\">See Python docs for details.</a></li>\n<li><code>default</code>: <a href=\"https://docs.python.org/3/library/json.html#json.JSONEncoder.default\" rel=\"nofollow\">See Python docs for details.</a></li>\n<li><code>sort_keys</code>: It set to <code>True</code> the output dictionary will be sorted by key. <a href=\"https://docs.python.org/3/library/json.html#json.JSONEncoder\" rel=\"nofollow\">See Python docs for details.</a></li>\n</ul>\n<p><strong>Supported Extended Functionality:</strong></p>\n<ul>\n<li>Does not support #INCLUDE directive.</li>\n<li>Does not support comments.</li>\n</ul>\n</li>\n</ul>\n<h3>Features:</h3>\n<h4>C Style Comments</h4>\n<p>Supports C Style Comments.\nSingle-Line</p>\n<pre><span class=\"c1\">// TEST</span>\n\n<span class=\"cm\">/* TEST */</span>\n</pre>\n<pre><span class=\"cm\">/* </span>\n<span class=\"cm\">TEST</span>\n<span class=\"cm\">*/</span>\n</pre>\n<h4>C Style Include directive</h4>\n<p>Loads specified file from the same path where the file is being loaded.\nSupports 2 syntax always enclosed in comments:</p>\n<pre><span class=\"cm\">/* #INCLUDE &lt;[PropertyName:]json_file_relative_path&gt; */</span>\n</pre>\n<p><strong>PropertyName</strong> <em>(Optional)</em></p>\n<p>This is the name of the JSON property that will encapsulate the included file content. This required when including a file between other properties.</p>\n<pre><span class=\"p\">{</span>\n <span class=\"nt\">\"Name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Test\"</span>\n <span class=\"err\">/*</span> <span class=\"err\">#INCLUDES</span> <span class=\"err\">&lt;Values</span><span class=\"p\">:</span><span class=\"err\">values.json&gt;</span> <span class=\"err\">*/</span>\n<span class=\"p\">}</span>\n</pre>\n<pre><span class=\"p\">{</span>\n <span class=\"nt\">\"Name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Test\"</span><span class=\"p\">,</span>\n <span class=\"nt\">\"Values\"</span><span class=\"p\">:</span> <span class=\"p\">{</span> \n   <span class=\"nt\">\"1\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Test1\"</span><span class=\"p\">,</span>\n   <span class=\"nt\">\"2\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Test2\"</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n<p><strong>json_file_relative_path</strong></p>\n<p>This is the json file name including relative path (if located in a nested folder) to the path where the main json file exists. When the main json is loaded as a string and the <code>includes_path</code> is not specified it will use the executing python script path.\nIf the script is not found an error will be raised.</p>\n<p>The <code>#INCLUDE</code> directive arguments can be enclosed in <code>&lt;&gt;</code> or <code>\"\"</code>.</p>\n<h4>Access Value by Reference</h4>\n<p><code>$root</code>, <code>$parent</code> and <code>$this</code> accessor prefixes are supported. This accessors allow you to reference values from the JSON root, parent or current object even if they are being included or its value is being calculated at runtime using a function and they can be interpolated into a string without the need of enclosing characters.</p>\n<p>Sample:</p>\n<pre><span class=\"p\">{</span>\n  <span class=\"nt\">\"prefix\"</span><span class=\"p\">:</span> <span class=\"s2\">\"A\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"first\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n        <span class=\"p\">{</span> <span class=\"nt\">\"id\"</span><span class=\"p\">:</span> <span class=\"s2\">\"A1\"</span> <span class=\"p\">},</span>\n        <span class=\"p\">{</span> <span class=\"nt\">\"id\"</span><span class=\"p\">:</span> <span class=\"s2\">\"A2\"</span> <span class=\"p\">},</span>\n        <span class=\"p\">{</span> <span class=\"nt\">\"id\"</span><span class=\"p\">:</span> <span class=\"s2\">\"A3\"</span> <span class=\"p\">},</span>\n        <span class=\"p\">{</span> <span class=\"nt\">\"id\"</span><span class=\"p\">:</span> <span class=\"s2\">\"$root.prefix4\"</span> <span class=\"p\">}</span>\n    <span class=\"p\">],</span>\n    <span class=\"nt\">\"second\"</span><span class=\"p\">:</span> <span class=\"s2\">\"$root.prefix\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"third\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"nt\">\"test1\"</span><span class=\"p\">:</span> <span class=\"mi\">23</span><span class=\"p\">,</span>\n        <span class=\"nt\">\"test2\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n            <span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span>\n        <span class=\"p\">],</span>\n        <span class=\"nt\">\"test3\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"nt\">\"deep1\"</span><span class=\"p\">:</span> <span class=\"mi\">44</span><span class=\"p\">,</span>\n            <span class=\"nt\">\"deep2\"</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>\n            <span class=\"nt\">\"deep3\"</span><span class=\"p\">:</span> <span class=\"s2\">\"$root.secondB\"</span><span class=\"p\">,</span>\n            <span class=\"nt\">\"deep4\"</span><span class=\"p\">:</span> <span class=\"s2\">\"AZ-$parent.test1X\"</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">},</span>\n    <span class=\"nt\">\"fourth\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n      <span class=\"nt\">\"t1\"</span><span class=\"p\">:</span> <span class=\"s2\">\"B\"</span><span class=\"p\">,</span>\n      <span class=\"nt\">\"t2\"</span><span class=\"p\">:</span> <span class=\"s2\">\"$this.t1\"</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n<p>Result:</p>\n<pre><span class=\"p\">{</span>\n  <span class=\"nt\">\"prefix\"</span><span class=\"p\">:</span> <span class=\"s2\">\"A\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"first\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n        <span class=\"p\">{</span> <span class=\"nt\">\"id\"</span><span class=\"p\">:</span> <span class=\"s2\">\"A1\"</span> <span class=\"p\">},</span>\n        <span class=\"p\">{</span> <span class=\"nt\">\"id\"</span><span class=\"p\">:</span> <span class=\"s2\">\"A2\"</span> <span class=\"p\">},</span>\n        <span class=\"p\">{</span> <span class=\"nt\">\"id\"</span><span class=\"p\">:</span> <span class=\"s2\">\"A3\"</span> <span class=\"p\">},</span>\n        <span class=\"p\">{</span> <span class=\"nt\">\"id\"</span><span class=\"p\">:</span> <span class=\"s2\">\"A4\"</span> <span class=\"p\">}</span>\n    <span class=\"p\">],</span>\n    <span class=\"nt\">\"second\"</span><span class=\"p\">:</span> <span class=\"s2\">\"A\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"third\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"nt\">\"test1\"</span><span class=\"p\">:</span> <span class=\"mi\">23</span><span class=\"p\">,</span>\n        <span class=\"nt\">\"test2\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n            <span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span>\n        <span class=\"p\">],</span>\n        <span class=\"nt\">\"test3\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"nt\">\"deep1\"</span><span class=\"p\">:</span> <span class=\"mi\">44</span><span class=\"p\">,</span>\n            <span class=\"nt\">\"deep2\"</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>\n            <span class=\"nt\">\"deep3\"</span><span class=\"p\">:</span> <span class=\"s2\">\"AB\"</span><span class=\"p\">,</span>\n            <span class=\"nt\">\"deep4\"</span><span class=\"p\">:</span> <span class=\"s2\">\"AZ-23X\"</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">},</span>\n    <span class=\"nt\">\"fourth\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n      <span class=\"nt\">\"t1\"</span><span class=\"p\">:</span> <span class=\"s2\">\"B\"</span><span class=\"p\">,</span>\n      <span class=\"nt\">\"t2\"</span><span class=\"p\">:</span> <span class=\"s2\">\"B\"</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n<ul>\n<li><strong>first[3]</strong> = <code>$root.prefix4</code> references the value of <code>prefix</code> on the JSON root while interpolated in the string.</li>\n<li><strong>second</strong> = <code>$root.prefix</code> references the value of <code>prefix</code> on the JSON root.</li>\n<li><strong>third.test3.deep3</strong> = <code>$root.secondB</code> referenced the value of <code>second</code> on the JSON root while interpolated in the string.</li>\n<li><strong>third.test3.deep4</strong> = <code>AZ-$parent.test1X</code> references the the value of <code>$root.third.test1</code> which is the parent object of <code>test3</code> while interpolated in a string.</li>\n<li><strong>fourth.t2</strong> = <code>$this.t1</code> references the value of <code>$root.fourth.t1</code> which is the parent</li>\n</ul>\n<p><strong>Current Limitations</strong></p>\n<blockquote>\n<p><strong>Relative and Absolute Value references are not supported as function parameters yet.</strong></p>\n</blockquote>\n<h4>Scripting</h4>\n<p>EXJSON supports dynamic values by using an extensible scripting engine based on python. Commonly used extension functions can be found in the <code>scripting/extensions</code> package but you can create and load your own custom extensions functions by using the <code>register_custom_scripting_extension</code>.</p>\n<ul>\n<li>Function calls can be interpolated in strings like <code>AAX-$.sequence('product-sequence')ZZ</code> which will yield <code>AAX-1ZZ</code>.</li>\n<li>Null values can be set by using <code>null</code>.</li>\n</ul>\n<h5>Standard Functions:</h5>\n<h6><strong>Cryptography</strong></h6>\n<ul>\n<li>\n<p><strong>MD5</strong></p>\n<p>Generates a MD5 hash from the specified string value. When no string is provided a random long of 128 random bits is used.</p>\n</li>\n</ul>\n<p>Signature</p>\n<pre> <span class=\"err\">$.md</span><span class=\"mi\">5</span><span class=\"err\">(</span><span class=\"p\">[</span><span class=\"err\">optional</span><span class=\"p\">]</span><span class=\"err\">string</span> <span class=\"err\">value)</span>\n</pre>\n<p>Usage\n<code>json { \"value\": \"$.md5('test message')\", \"value1\": \"$.md5()\" }</code>\nResult\n<code>json { \"value\": \"c72b9698fa1927e1dd12d3cf26ed84b2\", \"value1\": \"a1fa31838987e9a93338afb0831709d7\" }</code></p>\n<ul>\n<li>\n<p><strong>SHA1</strong></p>\n<p>Generates an SHA1 hash from the specified string value. When no string is provided a random long of 128 random bits is used.</p>\n<p>Signature</p>\n<pre> <span class=\"err\">$.sha</span><span class=\"mi\">1</span><span class=\"err\">(</span><span class=\"p\">[</span><span class=\"err\">optional</span><span class=\"p\">]</span><span class=\"err\">string</span> <span class=\"err\">value)</span>\n</pre>\n<p>Usage</p>\n<pre><span class=\"p\">{</span>\n  <span class=\"nt\">\"value\"</span><span class=\"p\">:</span> <span class=\"s2\">\"$.sha1('test message')\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"value1\"</span><span class=\"p\">:</span> <span class=\"s2\">\"$.sha1()\"</span>\n<span class=\"p\">}</span>\n</pre>\n<p>Result</p>\n<pre><span class=\"p\">{</span>\n  <span class=\"nt\">\"value\"</span><span class=\"p\">:</span> <span class=\"s2\">\"35ee8386410d41d14b3f779fc95f4695f4851682\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"value1\"</span><span class=\"p\">:</span> <span class=\"s2\">\"18ba91517fde987433d27dab5f49390483ac2f03\"</span>\n<span class=\"p\">}</span>\n</pre>\n</li>\n<li>\n<p><strong>SHA256</strong></p>\n<p>Generates an SHA256 hash from the specified string value. When no string is provided a random long of 256 random bits is used.</p>\n<p>Signature</p>\n<pre> <span class=\"err\">$.sha</span><span class=\"mi\">256</span><span class=\"err\">(</span><span class=\"p\">[</span><span class=\"err\">optional</span><span class=\"p\">]</span><span class=\"err\">string</span> <span class=\"err\">value)</span>\n</pre>\n<p>Usage</p>\n<pre><span class=\"p\">{</span>\n  <span class=\"nt\">\"value\"</span><span class=\"p\">:</span> <span class=\"s2\">\"$.sha256('test message')\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"value1\"</span><span class=\"p\">:</span> <span class=\"s2\">\"$.sha256()\"</span>\n<span class=\"p\">}</span>\n</pre>\n<p>Result</p>\n<pre><span class=\"p\">{</span>\n  <span class=\"nt\">\"value\"</span><span class=\"p\">:</span> <span class=\"s2\">\"3f0a377ba0a4a460ecb616f6507ce0d8cfa3e704025d4fda3ed0c5ca05468728\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"value1\"</span><span class=\"p\">:</span> <span class=\"s2\">\"c0329b1e9a0b31d62da4855ed3730ad7104a4cd634415b38c038ccaf1db83cc3\"</span>\n<span class=\"p\">}</span>\n</pre>\n</li>\n<li>\n<p><strong>SHA512</strong></p>\n<p>Generates an SHA512 hash from the specified string value. When no string is provided a random long of 512 random bits is used.</p>\n<p>Signature</p>\n<pre> <span class=\"err\">$.sha</span><span class=\"mi\">512</span><span class=\"err\">(</span><span class=\"p\">[</span><span class=\"err\">optional</span><span class=\"p\">]</span><span class=\"err\">string</span> <span class=\"err\">value)</span>\n</pre>\n<p>Usage</p>\n<pre><span class=\"p\">{</span>\n  <span class=\"nt\">\"value\"</span><span class=\"p\">:</span> <span class=\"s2\">\"$.sha512('test message')\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"value1\"</span><span class=\"p\">:</span> <span class=\"s2\">\"$.sha512()\"</span>\n<span class=\"p\">}</span>\n</pre>\n<p>Result</p>\n<pre><span class=\"p\">{</span>\n  <span class=\"nt\">\"value\"</span><span class=\"p\">:</span> <span class=\"s2\">\"950b2a7effa78f51a63515ec45e03ecebe50ef2f1c41e69629b50778f11bc080002e4db8112b59d09389d10f3558f85bfdeb4f1cc55a34217af0f8547700ebf3\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"value1\"</span><span class=\"p\">:</span> <span class=\"s2\">\"5ac6b81120595d01cce41f18a14440dffb435955020a682c47288eae9aacf5263a051e14bff01f688433cb575dab0ac82b6135286d0f1ced93dbc37375ffba68\"</span>\n<span class=\"p\">}</span>\n</pre>\n</li>\n</ul>\n<h6>Date and Time</h6>\n<p>By default datetime functions will return date and time in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\" rel=\"nofollow\">ISO-8601</a> format with explicit TZ even on UTC. ISO-8601 Zulu format can be achived by using the <code>Z</code> format as described in the table below:</p>\n<table>\n<thead>\n<tr>\n<th>\"Universal\" Format Code</th>\n<th><a href=\"http://strftime.org/\" rel=\"nofollow\">Python Format Code</a></th>\n<th>Description</th>\n<th>Example</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>dddd</td>\n<td>%A</td>\n<td>Weekday as locale\u2019s full name.</td>\n<td>Monday</td>\n</tr>\n<tr>\n<td>ddd</td>\n<td>%a</td>\n<td>Weekday as locale\u2019s abbreviated name.</td>\n<td>Mon</td>\n</tr>\n<tr>\n<td>ww</td>\n<td>%w</td>\n<td>Weekday as a zero padded number, where 0 is Sunday and 6 is Saturday.</td>\n<td>01</td>\n</tr>\n<tr>\n<td>w</td>\n<td>%-w</td>\n<td>Weekday as a decimal number, where 0 is Sunday and 6 is Saturday.</td>\n<td>1</td>\n</tr>\n<tr>\n<td>dd</td>\n<td>%d</td>\n<td>Day of the month as a zero-padded decimal number.</td>\n<td>30</td>\n</tr>\n<tr>\n<td>d</td>\n<td>%-d</td>\n<td>Day of the month as a decimal number.</td>\n<td>30</td>\n</tr>\n<tr>\n<td>MMMM</td>\n<td>%B</td>\n<td>Month as locale\u2019s full name.</td>\n<td>September</td>\n</tr>\n<tr>\n<td>MMM</td>\n<td>%b</td>\n<td>Month as locale\u2019s abbreviated name.</td>\n<td>Sep</td>\n</tr>\n<tr>\n<td>MM</td>\n<td>%m</td>\n<td>Month as a zero-padded decimal number.</td>\n<td>09</td>\n</tr>\n<tr>\n<td>M</td>\n<td>%-m</td>\n<td>Month as a decimal number.</td>\n<td>9</td>\n</tr>\n<tr>\n<td>yyyy</td>\n<td>%Y</td>\n<td>Year with century as a decimal number.</td>\n<td>2013</td>\n</tr>\n<tr>\n<td>y</td>\n<td>%y</td>\n<td>Year without century as a zero-padded decimal number.</td>\n<td>13</td>\n</tr>\n<tr>\n<td>HH</td>\n<td>%H</td>\n<td>Hour (24-hour clock) as a zero-padded decimal number.</td>\n<td>19</td>\n</tr>\n<tr>\n<td>H</td>\n<td>%-H</td>\n<td>Hour (24-hour clock) as a decimal number.</td>\n<td>19</td>\n</tr>\n<tr>\n<td>hh</td>\n<td>%I</td>\n<td>Hour (12-hour clock) as a zero-padded decimal number.</td>\n<td>07</td>\n</tr>\n<tr>\n<td>h</td>\n<td>%-I</td>\n<td>Hour (12-hour clock) as a decimal number.</td>\n<td>7</td>\n</tr>\n<tr>\n<td>tt</td>\n<td>%p</td>\n<td>Locale\u2019s equivalent of either AM or PM.</td>\n<td>AM</td>\n</tr>\n<tr>\n<td>mm</td>\n<td>%M</td>\n<td>Minute as a zero-padded decimal number.</td>\n<td>06</td>\n</tr>\n<tr>\n<td>m</td>\n<td>%-M</td>\n<td>Minute as a decimal number.</td>\n<td>6</td>\n</tr>\n<tr>\n<td>ss</td>\n<td>%S</td>\n<td>Second as a zero-padded decimal number.</td>\n<td>05</td>\n</tr>\n<tr>\n<td>s</td>\n<td>%-S</td>\n<td>Second as a decimal number.</td>\n<td>5</td>\n</tr>\n<tr>\n<td>f</td>\n<td>%f</td>\n<td>Microsecond as a decimal number, zero-padded on the left.</td>\n<td>000000</td>\n</tr>\n<tr>\n<td>zzz</td>\n<td>%Z</td>\n<td>Time zone name (empty string if the object is -00:00).</td>\n<td>-04:00</td>\n</tr>\n<tr>\n<td>z</td>\n<td>%z</td>\n<td>UTC offset in the form +HHMM or -HHMM.</td>\n<td>-04:00</td>\n</tr>\n<tr>\n<td>j</td>\n<td>%j</td>\n<td>Day of the year as a zero-padded decimal number.</td>\n<td>273</td>\n</tr>\n<tr>\n<td>jj</td>\n<td>%-j</td>\n<td>Day of the year as a decimal number.</td>\n<td>273</td>\n</tr>\n<tr>\n<td>UU</td>\n<td>%U</td>\n<td>Week number of the year (Sunday as the first day of the week) as a zero padded decimal number. All days in a new year preceding the first Sunday are considered to be in week 0.</td>\n<td>09</td>\n</tr>\n<tr>\n<td>U</td>\n<td>%-U</td>\n<td>Week number of the year (Sunday as the first day of the week) as a decimal number. All days in a new year preceding the first Sunday are considered to be in week 0.</td>\n<td>9</td>\n</tr>\n<tr>\n<td>WW</td>\n<td>%W</td>\n<td>Week number of the year (Monday as the first day of the week) as a zero padded decimal number. All days in a new year preceding the first Monday are considered to be in week 0.</td>\n<td>08</td>\n</tr>\n<tr>\n<td>W</td>\n<td>%W</td>\n<td>Week number of the year (Monday as the first day of the week) as a decimal number. All days in a new year preceding the first Monday are considered to be in week 0.</td>\n<td>8</td>\n</tr>\n<tr>\n<td>q</td>\n<td><strong>custom</strong></td>\n<td>Calendar Quarter as zero padded number.</td>\n<td>04</td>\n</tr>\n<tr>\n<td>qq</td>\n<td><strong>custom</strong></td>\n<td>Calendar Quarter as number.</td>\n<td>4</td>\n</tr>\n<tr>\n<td>F</td>\n<td>%c</td>\n<td>Locale\u2019s appropriate date and time representation.</td>\n<td>Mon Sep 30 07:06:05 2013</td>\n</tr>\n<tr>\n<td>D</td>\n<td>%x</td>\n<td>Locale\u2019s appropriate date representation.</td>\n<td>09/30/13</td>\n</tr>\n<tr>\n<td>T</td>\n<td>%X</td>\n<td>Locale\u2019s appropriate time representation.</td>\n<td>07:06:05</td>\n</tr>\n<tr>\n<td>Z</td>\n<td>%Y-%m-%dT%H:%m:%s.%f%z</td>\n<td>Zulu UTC ISO-8601</td>\n<td>2018-05-25T15:05:25.120Z</td>\n</tr></tbody></table>\n<p><strong>No need to worry about running it on windows or linux. The universal format converter takes care of the platform specific tokens <code>-</code>/<code>#</code>.</strong></p>\n<ul>\n<li>\n<p><strong>NOW()</strong></p>\n<p>Gets the current date and time based on server timezone.</p>\n<p>Signature</p>\n<pre> <span class=\"err\">$.now(</span><span class=\"p\">[</span><span class=\"err\">optional</span><span class=\"p\">]</span><span class=\"err\">format</span> <span class=\"err\">string)</span>\n</pre>\n<p>Usage</p>\n<pre><code>  ```json\n  {\n    \"value\": \"$.now('MM/dd/yyyy hh:mm tt')\",\n    \"value1\": \"$.now()\"\n  }\n  ```\n</code></pre>\n<p>Result</p>\n<pre><code>  ```json\n  {\n    \"value\": \"05/27/2018 12:50 PM\",\n    \"value1\": \"2018-05-27T12:50:05.302736-04:00\"\n  }\n  ```\n</code></pre>\n</li>\n<li>\n<p><strong>NOW().ADD()</strong></p>\n<p>Adds the specified number of time units to the current date and time based on server timezone.</p>\n<table>\n<thead>\n<tr>\n<th>Unit of Time</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>day</td>\n<td>Adds or subtracts days.</td>\n</tr>\n<tr>\n<td>week</td>\n<td>Adds or subtracts weeks.</td>\n</tr>\n<tr>\n<td>month</td>\n<td>Adds or subtracts months.</td>\n</tr>\n<tr>\n<td>year</td>\n<td>Adds or subtracts years.</td>\n</tr>\n<tr>\n<td>quarter</td>\n<td>Adds or subtracts quarter.</td>\n</tr></tbody></table>\n<p>Signature</p>\n<pre> <span class=\"err\">$.now().add(</span><span class=\"p\">[</span><span class=\"err\">required</span><span class=\"p\">]</span><span class=\"err\">unit</span> <span class=\"err\">of</span> <span class=\"err\">time</span> <span class=\"err\">criterias...,</span> <span class=\"p\">[</span><span class=\"err\">optional</span><span class=\"p\">]</span><span class=\"err\">format</span> <span class=\"err\">string)</span>\n</pre>\n<p>Usage</p>\n<pre><code>  ```json\n  {\n    \"value\": \"$.now().add(day=-1,'MM/dd/yyyy')\",\n    \"value1\": \"$.now().add(day=-1)\"\n  }\n  ```\n</code></pre>\n<p>Result</p>\n<pre><code>  ```json\n  {\n    \"value\": \"05/26/2018\",\n    \"value1\": \"2018-05-26T00:00:00.0000-04:00\"\n  }\n  ```\n</code></pre>\n</li>\n<li>\n<p><strong>NOW().UTC()</strong></p>\n<p>Same as <code>now()</code> but returns <code>UTC</code> date and time.</p>\n</li>\n<li>\n<p><strong>NOW().UTC().ADD()</strong></p>\n<p>Same as <code>now().add()</code> but returns <code>UTC</code> date and time.</p>\n</li>\n<li>\n<p>Sequences and Identification</p>\n<ul>\n<li>\n<p><strong>UUID4()</strong></p>\n<p>Returns a uuid v4 hash.</p>\n<p>Signature</p>\n<pre> <span class=\"err\">$.uuid</span><span class=\"mi\">4</span><span class=\"err\">()</span>\n</pre>\n<p>Usage</p>\n<pre><code>  ```json\n  {\n    \"value\": \"$.uuid4()\",\n  }\n  ```\n</code></pre>\n<p>Result</p>\n<pre><code>  ```json\n  {\n    \"value\": \"9f1ac603-0e7c-4d25-b73c-05ac2807d814\"\n  }\n  ```\n</code></pre>\n</li>\n<li>\n<p><strong>SEQUENCE()</strong></p>\n<p>Creates and returns one or multiple named integer sequence values. Sequences are generated per load/loads call. Sequences are destroyed once they are populated in the JSON file.</p>\n<p>Signature</p>\n<pre> <span class=\"err\">$.sequence(</span><span class=\"p\">[</span><span class=\"err\">required</span><span class=\"p\">]</span><span class=\"err\">sequence_name,</span>  <span class=\"p\">[</span><span class=\"err\">optional</span><span class=\"p\">]</span><span class=\"err\">padding_pattern,</span> <span class=\"p\">[</span><span class=\"err\">optional</span><span class=\"p\">]</span><span class=\"err\">step)</span>\n</pre>\n<p>The <code>padding_pattern</code> uses the <a href=\"https://docs.python.org/3/library/string.html#formatstrings\" rel=\"nofollow\">python string formatting mini language</a> and the <code>step</code> is defaulted to <code>1</code> if no value is provided.</p>\n<p>Usage</p>\n<pre><code>  ```json\n  {\n    \"value\": \"$.sequence('seq1',2)\",\n    \"values\": [\n        \"test1\": \"A-$.sequence('seq2', '{0:0&gt;4}')\",\n        \"test2\": \"A-$.sequence('seq2', '{0:0&gt;4}')\"\n        \"test3\": \"A-$.sequence('seq2', '{0:0&gt;4}')\"\n        \"test4\": \"A-$.sequence('seq2', '{0:0&gt;4}')\"\n    ],\n    \"value1\": \"$.sequence('seq1',2)\",\n  }\n  ```\n</code></pre>\n<p>Result</p>\n<pre><code>  ```json\n  {\n    \"value\": \"1\",\n    \"values\": [\n        \"test1\": \"A-0001\",\n        \"test2\": \"A-0002\"\n        \"test3\": \"A-0003\"\n        \"test4\": \"A-0004\"\n    ],\n    \"value1\": \"1\",\n  }\n  ```\n</code></pre>\n</li>\n<li>\n<p><strong>FILE_CHECKSUM()</strong></p>\n<p>Calculates MD5 or SHA1 checksum for the specified file. The file path should be relative to the path where the JSON file is located if loaded or included. Relative to the executing python script if using loads from a JSON string. If no <code>algorithm</code> is provided <code>md5</code> will be used by default.</p>\n<p>Signature</p>\n<pre> <span class=\"err\">$.file_checksum(</span><span class=\"p\">[</span><span class=\"err\">required</span><span class=\"p\">]</span><span class=\"err\">file_path,</span>  <span class=\"p\">[</span><span class=\"err\">optional</span><span class=\"p\">]</span><span class=\"err\">algorithm)</span>\n</pre>\n<p>Supported algorithms are <code>md5</code> and <code>sha1</code>.</p>\n<p>Usage</p>\n<pre><code>  ```json\n  {\n    \"filename\": \"../file.db\",\n    \"checksum\": \"$.file_checksum('../file.db', 'md5')\"\n  }\n  ```\n</code></pre>\n<p>Result</p>\n<pre><code>  ```json\n   {\n    \"filename\": \"../file.db\",\n    \"checksum\": \"ceb4c1f4b28bd59b941573d8a41f14d3\"\n  }\n  ```\n</code></pre>\n</li>\n</ul>\n</li>\n</ul>\n<h5>How to Create a custom scripting extension function and register it at Run-Time.</h5>\n<p>While standard functions can be added through issues (requests) or pull requests into the version branch you may want to use some functions that are too specific to your scenario that cannot be classified as standard. In this case you may want to register them at run-time.</p>\n<p>Standard or Custom Scripting Extension Function Example:</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">custom_add</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">):</span>\n    <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n    <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"k\">for</span> <span class=\"n\">r</span> <span class=\"ow\">in</span> <span class=\"n\">args</span><span class=\"p\">:</span>\n            <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">result</span> <span class=\"o\">+</span> <span class=\"n\">r</span>\n    <span class=\"k\">return</span> <span class=\"n\">result</span>\n</pre>\n<p>A custom scripting function should always have an <code>*args</code> variable in order to allow for an undefined number of parameters to be passed in. Parameter check can always be performed inside the function body if required. The scripting extension functio should always return a primitive type (<code>int</code>, <code>str</code>, <code>float</code>, etc...). Arrays and other types are not supported yet.</p>\n<p>Registration:</p>\n<pre><span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s2\">\"__main__\"</span><span class=\"p\">:</span>\n    <span class=\"n\">exjson</span><span class=\"o\">.</span><span class=\"n\">register_custom_scripting_extension</span><span class=\"p\">(</span><span class=\"s2\">\"add\"</span><span class=\"p\">,</span> <span class=\"n\">custom_add</span><span class=\"p\">)</span>\n    <span class=\"o\">...</span>\n    <span class=\"n\">exjson</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"s2\">\"sample.json\"</span><span class=\"p\">)</span>\n</pre>\n<p>Usage:</p>\n<pre><span class=\"p\">{</span>\n  <span class=\"nt\">\"a\"</span><span class=\"p\">:</span> <span class=\"err\">$.add(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"err\">20)</span>\n<span class=\"p\">}</span>\n</pre>\n<p>Result:</p>\n<pre><span class=\"p\">{</span>\n  <span class=\"nt\">\"a\"</span><span class=\"p\">:</span> <span class=\"mi\">30</span>\n<span class=\"p\">}</span>\n</pre>\n<p>The resulting value can be accessed using the relative and absolute accessors <code>$this</code>, <code>$parent</code> and <code>$root</code> from anywhere in the current file or an included JSON file.</p>\n<h3>Life Cycle:</h3>\n<ol>\n<li>Load JSON File Content</li>\n<li>Comments are extracted.</li>\n<li>Directives are extracted from comments.</li>\n<li>Include files (<code>#INCLUDE</code> directive) content are extracted recursively (Apply steps 1 to 4).\nThe load process is stopped if an included file is determined to have a circular reference.</li>\n<li>Include files are merged into JSON file which included it.</li>\n<li>Script function calls are extracted and evaluated.</li>\n<li>Relative and Absolute value references are evaluated.</li>\n</ol>\n<h3>Unit Test Requirements:</h3>\n<p>EXJSON unit testing runs on the <a href=\"https://docs.python.org/2/library/unittest.html\" rel=\"nofollow\">standard Python unit test library</a>. But I EXJSON unit test functions support automatic-generation of call diagrams from each test function execution. Because of this there is an additional dependency on <a href=\"http://pycallgraph.readthedocs.io/en/master/\" rel=\"nofollow\">PyCallGraph</a>. Please follow the steps below in order to install this dependency on Windows, Linux or OSX.\nPlease bear in mind that the steps below assume you already have python 3.6+ and pip installed. Depending on how your environment is setup Python 3.x <code>pip</code> may be available through an alias named <code>pip3</code>.</p>\n<h4>Turn on and off call graph generator</h4>\n<p>Call graph generate is controlled by an environmental variable named <code>GENERATE_CALL_GRAPHS</code>. If the environmental variable does not exists the value is defaulted to <code>False</code>, no graph will be generated. If it exists and it is set to <code>True</code> graphs will be generated in the <code>tests/calls</code> folder.</p>\n<p><strong>Linux/OSX</strong></p>\n<pre><span class=\"nb\">export</span> <span class=\"nv\">GENERATE_CALL_GRAPHS</span><span class=\"o\">=</span>True\n</pre>\n<p><strong>Windows</strong></p>\n<pre>%GENERATE_CALL_GRAPHS%=True\n</pre>\n<h4>Ubuntu</h4>\n<ol>\n<li>Install <code>Graphviz</code> and it's development libraries</li>\n</ol>\n<pre>sudo apt-get install graphviz libgraphviz-dev\n</pre>\n<ol>\n<li>Install <code>pygraphviz</code></li>\n</ol>\n<pre>pip install pygraphviz\n</pre>\n<ol>\n<li>Install <code>pycallgraph</code>.</li>\n</ol>\n<pre>pip install pycallgraph\n</pre>\n<p>Alternatively you can download the <a href=\"https://pypi.org/project/graphviz/#files\" rel=\"nofollow\">PyGraphviz</a> wheel file from Pypi.org and installing it as described in steps 4 and 5 for Windows below.</p>\n<h3>Windows</h3>\n<ol>\n<li>Download <a href=\"https://graphviz.gitlab.io/_pages/Download/Download_windows.html\" rel=\"nofollow\">Graphviz for windows</a> from the graphiviz site.</li>\n<li>Add the Graphviz bin path <code>C:\\Program Files (x86)\\Graphviz2.38\\bin</code> in your Windows path.</li>\n<li><strong>Close and reopen your terminals so the path changes is recognized.</strong></li>\n<li>Download the <a href=\"https://pypi.org/project/graphviz/#files\" rel=\"nofollow\">pygraphviz python 3.6 wheel</a>.</li>\n<li>Install the <code>pygraphviz</code> wheel.</li>\n</ol>\n<pre>pip install graphviz-0.8.3-py2.py3-none-any.whl\n</pre>\n<ol>\n<li>Install <code>pycallgraph</code></li>\n</ol>\n<pre>pip install pycallgraph\n</pre>\n<h3>OSX</h3>\n<ol>\n<li>Install <a href=\"https://brew.sh/\" rel=\"nofollow\">HomeBrew</a>.</li>\n<li>Download the <a href=\"https://pypi.org/project/graphviz/#files\" rel=\"nofollow\">pygraphviz python 3.6 wheel</a>.</li>\n<li>Install the <code>pygraphviz</code> wheel.</li>\n</ol>\n<pre>pip install graphviz-0.8.3-py2.py3-none-any.whl\n</pre>\n<ol>\n<li>Install <code>pycallgraph</code>.</li>\n</ol>\n<pre>pip install pycallgraph\n</pre>\n<h3>Road Map:</h3>\n<ul>\n<li>Better unit testing coverage.</li>\n<li>Stabilize and resolve any bugs.</li>\n<li>Segregate and make better scripting extension documentation.</li>\n<li>Support Multi-File Serialization.</li>\n<li>For More check <a href=\"https://github.com/prods/exjson/issues\" rel=\"nofollow\">Issues</a> tagged as <code>next release</code> or <code>deffered</code> for details.</li>\n</ul>\n\n          </div>"}, "last_serial": 3911062, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "6ad8e8dfef60ebd65f8cf9010badbf00", "sha256": "918d32f40a9157f0e596c94e5656ed078f6b933ea6b73d3401fd49c117a9f48c"}, "downloads": -1, "filename": "exjson-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "6ad8e8dfef60ebd65f8cf9010badbf00", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 12682, "upload_time": "2018-05-28T21:03:44", "upload_time_iso_8601": "2018-05-28T21:03:44.189433Z", "url": "https://files.pythonhosted.org/packages/d3/3b/4da1cea35a879dbb015d6b52ff4441bb7f1c17954e2ca09c98083c0d5202/exjson-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7ebd37eb4d3c8f9c790539ad883906e2", "sha256": "e14088e3d0746e1e64ef03cf7642271bec2d3397270139fcacc368ffdb534bfe"}, "downloads": -1, "filename": "exjson-1.0.0.tar.gz", "has_sig": false, "md5_digest": "7ebd37eb4d3c8f9c790539ad883906e2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21146, "upload_time": "2018-05-28T21:03:45", "upload_time_iso_8601": "2018-05-28T21:03:45.534151Z", "url": "https://files.pythonhosted.org/packages/4a/87/0ffb9d02c904816be4e40750be42b3c5b9b48c8955339c85b2e3a1a43f6e/exjson-1.0.0.tar.gz", "yanked": false}], "1.0.0a1": [{"comment_text": "", "digests": {"md5": "2c5139aabd2d86f89f6dcd0515725698", "sha256": "33d35e14d62773a177d332ea75f3b49c73f268a73f4d8bf3ff1e38aac247ff2c"}, "downloads": -1, "filename": "exjson-1.0.0a1-py3-none-any.whl", "has_sig": false, "md5_digest": "2c5139aabd2d86f89f6dcd0515725698", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 2574, "upload_time": "2018-04-28T15:33:11", "upload_time_iso_8601": "2018-04-28T15:33:11.932373Z", "url": "https://files.pythonhosted.org/packages/15/2e/e8757162fb7b19bd0af7f5b3e8d5902f0ac866115b1c8c5da7f27ca512b1/exjson-1.0.0a1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a7fdc3e3598be8cde5d719f601b7cd5c", "sha256": "04f8fa0b6c47d6aa21d60da9ca6aed7c6ce228d9e288a0ec0353f14958078102"}, "downloads": -1, "filename": "exjson-1.0.0a1.tar.gz", "has_sig": false, "md5_digest": "a7fdc3e3598be8cde5d719f601b7cd5c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7700, "upload_time": "2018-04-28T15:33:12", "upload_time_iso_8601": "2018-04-28T15:33:12.717298Z", "url": "https://files.pythonhosted.org/packages/22/ad/1aa9a2e315d4f573bb80bc8350b825678bb012af29971142a37d0da51498/exjson-1.0.0a1.tar.gz", "yanked": false}], "1.0.0a3": [{"comment_text": "", "digests": {"md5": "fcace99e77b6f87961ec9e55e181c7ec", "sha256": "969658148272fda4e1a2f0d7ebc86d60e3e68572b2917bb7dc9419bc5ebd5193"}, "downloads": -1, "filename": "exjson-1.0.0a3-py3-none-any.whl", "has_sig": false, "md5_digest": "fcace99e77b6f87961ec9e55e181c7ec", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 3263, "upload_time": "2018-04-30T01:39:34", "upload_time_iso_8601": "2018-04-30T01:39:34.015582Z", "url": "https://files.pythonhosted.org/packages/ab/27/69b8bf756ac0bd0cdf06ab0b97c970b26c7b9d1bc429309d28d8ccb6bde4/exjson-1.0.0a3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "99bc68480b17a4ae7950b13dfa524860", "sha256": "2a8abac04831463c3a487944395434ecd7c16b4590ef05d599f743c12030fbbf"}, "downloads": -1, "filename": "exjson-1.0.0a3.tar.gz", "has_sig": false, "md5_digest": "99bc68480b17a4ae7950b13dfa524860", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8742, "upload_time": "2018-04-30T01:39:35", "upload_time_iso_8601": "2018-04-30T01:39:35.032445Z", "url": "https://files.pythonhosted.org/packages/d7/20/a0c1388b03aff17dc4b638fb8666fb1c0398fc3f77e0cc3f20ba7a54f7f9/exjson-1.0.0a3.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "ca0117577ed3308fc4ba083591c8d4c4", "sha256": "4d510b51c6b918e7e39dc4270edcd5aebc4847f9f96842e98c2c608384577dd2"}, "downloads": -1, "filename": "exjson-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "ca0117577ed3308fc4ba083591c8d4c4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 13164, "upload_time": "2018-05-29T02:23:02", "upload_time_iso_8601": "2018-05-29T02:23:02.632869Z", "url": "https://files.pythonhosted.org/packages/b2/8b/8690d8c08137ed3bd61609dd624694ef508ccd31f1088443190eadcd5945/exjson-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b7ba2a3765d2ed8002bfc14c294d98df", "sha256": "1b5bf56c90d1c35db5d9e0213303f6bfc8540986ff797f223f8cf635e087cc2f"}, "downloads": -1, "filename": "exjson-1.0.1.tar.gz", "has_sig": false, "md5_digest": "b7ba2a3765d2ed8002bfc14c294d98df", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21612, "upload_time": "2018-05-29T02:23:03", "upload_time_iso_8601": "2018-05-29T02:23:03.826540Z", "url": "https://files.pythonhosted.org/packages/83/37/4038e27b99cec52235b078f04afa5d0fb050ffb1ff0e3798cc180c8bb797/exjson-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "15162a626c7811d209fce058849cad35", "sha256": "b68699ba61447dfc0a65e9a3ad4812b1f6a4d64c3a22e72e6b0933be9ab6e716"}, "downloads": -1, "filename": "exjson-1.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "15162a626c7811d209fce058849cad35", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 21222, "upload_time": "2018-05-30T01:25:19", "upload_time_iso_8601": "2018-05-30T01:25:19.580767Z", "url": "https://files.pythonhosted.org/packages/b0/43/8fe5619146b52afeceaa54c6f4f163c8131a9cc499c4d0801eb18de3b9e8/exjson-1.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ab30bff04343a77072e6d83d0f3b3183", "sha256": "ae3ef0c8f604bfaaced25dba04c0870ff2b0b298155c356f33652d0582af604c"}, "downloads": -1, "filename": "exjson-1.0.2.tar.gz", "has_sig": false, "md5_digest": "ab30bff04343a77072e6d83d0f3b3183", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 35576, "upload_time": "2018-05-30T01:25:21", "upload_time_iso_8601": "2018-05-30T01:25:21.442311Z", "url": "https://files.pythonhosted.org/packages/3b/42/712bd5d0bf744dc68fd91825b1075c010950fb9d68d7280c3fb3dfa9a6a7/exjson-1.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "15162a626c7811d209fce058849cad35", "sha256": "b68699ba61447dfc0a65e9a3ad4812b1f6a4d64c3a22e72e6b0933be9ab6e716"}, "downloads": -1, "filename": "exjson-1.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "15162a626c7811d209fce058849cad35", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 21222, "upload_time": "2018-05-30T01:25:19", "upload_time_iso_8601": "2018-05-30T01:25:19.580767Z", "url": "https://files.pythonhosted.org/packages/b0/43/8fe5619146b52afeceaa54c6f4f163c8131a9cc499c4d0801eb18de3b9e8/exjson-1.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ab30bff04343a77072e6d83d0f3b3183", "sha256": "ae3ef0c8f604bfaaced25dba04c0870ff2b0b298155c356f33652d0582af604c"}, "downloads": -1, "filename": "exjson-1.0.2.tar.gz", "has_sig": false, "md5_digest": "ab30bff04343a77072e6d83d0f3b3183", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 35576, "upload_time": "2018-05-30T01:25:21", "upload_time_iso_8601": "2018-05-30T01:25:21.442311Z", "url": "https://files.pythonhosted.org/packages/3b/42/712bd5d0bf744dc68fd91825b1075c010950fb9d68d7280c3fb3dfa9a6a7/exjson-1.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:44:46 2020"}