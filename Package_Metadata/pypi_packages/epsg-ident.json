{"info": {"author": "Cory Mollet", "author_email": "cory@corymollet.com", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: ISC License (ISCL)", "Natural Language :: English", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Topic :: Scientific/Engineering :: GIS", "Topic :: Utilities"], "description": "epsg\\_ident\n===========\n\nOverview\n--------\n\n``epsg_ident`` is a command-line utility and Python module for quickly\nidentifying the `EPSG Registry Code <http://www.epsg-registry.org/>`__\nfrom a ``.prj`` file typically associated with `ESRI\nShapefiles <https://en.wikipedia.org/wiki/Shapefile>`__. It ships with a\nSQlite3 database containing mappings of `Well-known\nText <https://en.wikipedia.org/wiki/Well-known_text>`__ strings to EPSG\ncodes, the bulk of which was manually sourced and cleaned from `an ESRI\nwebsite <https://developers.arcgis.com/javascript/jshelp/pcs.html>`__.\nIt's not complete, however, and in the event you test it against a WKT\nstring not in the database it will search the\n`prj2epsg.org <http://prj2epsg.org>`__ API. If the API returns an exact\nmatch, that code is returned and saved to the SQLite database. Handling\nseveral partial matches is currently planned, but not yet implemented.\n\nTL;DR\n-----\n\nCommand-Line usage\n------------------\n\n.. code:: bash\n\n    $ epsg_ident seattle_land_use.prj\n    2285\n\nPython module usage\n-------------------\n\n.. code:: python\n\n    >>> from epsg_ident import EpsgIdent\n\n    >>> # Read .prj file from the filesystem\n    >>> ident = EpsgIdent()\n    >>> ident.read_prj_from_file('seattle_land_use.prj')\n    >>> ident.get_epsg()\n    2285\n\n    >>> # Paste in Well-Known Text string directly\n    >>> ident = EpsgIdent(prj=\"\"\"PROJCS[\"NAD_1983_StatePlane_Washington_North_FIPS_4601_Feet\",GEOGCS[\"GCS_North_American_1983\",DATUM[\"D_North_American_1983\",SPHEROID[\"GRS_1980\",6378137.0,298.257222101]],PRIMEM[\"Greenwich\",0.0],UNIT[\"Degree\",0.0174532925199433]],PROJECTION[\"Lambert_Conformal_Conic\"],PARAMETER[\"False_Easting\",1640416.666666667],PARAMETER[\"False_Northing\",0.0],PARAMETER[\"Central_Meridian\",-120.8333333333333],PARAMETER[\"Standard_Parallel_1\",47.5],PARAMETER[\"Standard_Parallel_2\",48.73333333333333],PARAMETER[\"Latitude_Of_Origin\",47.0],UNIT[\"Foot_US\",0.3048006096012192]]\"\"\")\n    >>> ident.get_epsg()\n    2285\n\n\nBackground\n----------\n\nThink of projections as character encoding for spatial data. Spatial\ndata lacking information about the coordinate system on which it has\nbeen projected is all but useless, just as if you had text data in an\nunknown encoding.\n\n``epsg_ident`` is not meant to be a full-fledged client library to the actual\nEPSG database, for that you're probably looking for something like `python-epsg <https://github.com/geo-data/python-epsg>`__\n\nRather, ``epsg_ident`` is for those looking to quickly identify the EPSG code\nof a shapefile, especially when `importing into PostGIS <http://postgis.net/docs/manual-2.2/using_postgis_dbmanagement.html#shp2pgsql_usage>`__ . Of course, you could use `ogr2ogr <http://www.gdal.org/ogr2ogr.html>`__ \nto convert everything into a web-friendly projection, like:\n\n.. code:: bash\n\n    $ ogr2ogr -f PostgreSQL -t_srs EPSG:4326 PG:dbname=seattle seattle_land_use.shp\n\nBut transforming spatial data from one projection to another is a lossy operation\nand can result in coordinate drift. Ideally, you would store the original data\nin its original coordinate system and then transform copies as needed.", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/cmollet/epsg_ident", "keywords": "epsg,gis,shapefile", "license": "ISCL", "maintainer": "", "maintainer_email": "", "name": "epsg-ident", "package_url": "https://pypi.org/project/epsg-ident/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/epsg-ident/", "project_urls": {"Homepage": "https://github.com/cmollet/epsg_ident"}, "release_url": "https://pypi.org/project/epsg-ident/0.1.1/", "requires_dist": ["Click", "flake8", "tox", "twine"], "requires_python": "", "summary": "Quickly get the EPSG code from a .prj file or WKT", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"overview\">\n<h2>Overview</h2>\n<p><tt>epsg_ident</tt> is a command-line utility and Python module for quickly\nidentifying the <a href=\"http://www.epsg-registry.org/\" rel=\"nofollow\">EPSG Registry Code</a>\nfrom a <tt>.prj</tt> file typically associated with <a href=\"https://en.wikipedia.org/wiki/Shapefile\" rel=\"nofollow\">ESRI\nShapefiles</a>. It ships with a\nSQlite3 database containing mappings of <a href=\"https://en.wikipedia.org/wiki/Well-known_text\" rel=\"nofollow\">Well-known\nText</a> strings to EPSG\ncodes, the bulk of which was manually sourced and cleaned from <a href=\"https://developers.arcgis.com/javascript/jshelp/pcs.html\" rel=\"nofollow\">an ESRI\nwebsite</a>.\nIt\u2019s not complete, however, and in the event you test it against a WKT\nstring not in the database it will search the\n<a href=\"http://prj2epsg.org\" rel=\"nofollow\">prj2epsg.org</a> API. If the API returns an exact\nmatch, that code is returned and saved to the SQLite database. Handling\nseveral partial matches is currently planned, but not yet implemented.</p>\n</div>\n<div id=\"tl-dr\">\n<h2>TL;DR</h2>\n</div>\n<div id=\"command-line-usage\">\n<h2>Command-Line usage</h2>\n<pre>$ epsg_ident seattle_land_use.prj\n<span class=\"m\">2285</span>\n</pre>\n</div>\n<div id=\"python-module-usage\">\n<h2>Python module usage</h2>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">epsg_ident</span> <span class=\"kn\">import</span> <span class=\"n\">EpsgIdent</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># Read .prj file from the filesystem</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">ident</span> <span class=\"o\">=</span> <span class=\"n\">EpsgIdent</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">ident</span><span class=\"o\">.</span><span class=\"n\">read_prj_from_file</span><span class=\"p\">(</span><span class=\"s1\">'seattle_land_use.prj'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">ident</span><span class=\"o\">.</span><span class=\"n\">get_epsg</span><span class=\"p\">()</span>\n<span class=\"mi\">2285</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># Paste in Well-Known Text string directly</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">ident</span> <span class=\"o\">=</span> <span class=\"n\">EpsgIdent</span><span class=\"p\">(</span><span class=\"n\">prj</span><span class=\"o\">=</span><span class=\"s2\">\"\"\"PROJCS[\"NAD_1983_StatePlane_Washington_North_FIPS_4601_Feet\",GEOGCS[\"GCS_North_American_1983\",DATUM[\"D_North_American_1983\",SPHEROID[\"GRS_1980\",6378137.0,298.257222101]],PRIMEM[\"Greenwich\",0.0],UNIT[\"Degree\",0.0174532925199433]],PROJECTION[\"Lambert_Conformal_Conic\"],PARAMETER[\"False_Easting\",1640416.666666667],PARAMETER[\"False_Northing\",0.0],PARAMETER[\"Central_Meridian\",-120.8333333333333],PARAMETER[\"Standard_Parallel_1\",47.5],PARAMETER[\"Standard_Parallel_2\",48.73333333333333],PARAMETER[\"Latitude_Of_Origin\",47.0],UNIT[\"Foot_US\",0.3048006096012192]]\"\"\"</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">ident</span><span class=\"o\">.</span><span class=\"n\">get_epsg</span><span class=\"p\">()</span>\n<span class=\"mi\">2285</span>\n</pre>\n</div>\n<div id=\"background\">\n<h2>Background</h2>\n<p>Think of projections as character encoding for spatial data. Spatial\ndata lacking information about the coordinate system on which it has\nbeen projected is all but useless, just as if you had text data in an\nunknown encoding.</p>\n<p><tt>epsg_ident</tt> is not meant to be a full-fledged client library to the actual\nEPSG database, for that you\u2019re probably looking for something like <a href=\"https://github.com/geo-data/python-epsg\" rel=\"nofollow\">python-epsg</a></p>\n<p>Rather, <tt>epsg_ident</tt> is for those looking to quickly identify the EPSG code\nof a shapefile, especially when <a href=\"http://postgis.net/docs/manual-2.2/using_postgis_dbmanagement.html#shp2pgsql_usage\" rel=\"nofollow\">importing into PostGIS</a> . Of course, you could use <a href=\"http://www.gdal.org/ogr2ogr.html\" rel=\"nofollow\">ogr2ogr</a>\nto convert everything into a web-friendly projection, like:</p>\n<pre>$ ogr2ogr -f PostgreSQL -t_srs EPSG:4326 PG:dbname<span class=\"o\">=</span>seattle seattle_land_use.shp\n</pre>\n<p>But transforming spatial data from one projection to another is a lossy operation\nand can result in coordinate drift. Ideally, you would store the original data\nin its original coordinate system and then transform copies as needed.</p>\n</div>\n\n          </div>"}, "last_serial": 2102760, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "65371ade002a4c3fe66080bd1a296e86", "sha256": "c6e57214db5ef00a4c2483a73f219fac52e90a80f9c35edc1edb873959a76c86"}, "downloads": -1, "filename": "epsg_ident-0.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "65371ade002a4c3fe66080bd1a296e86", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 397430, "upload_time": "2016-05-05T22:22:31", "upload_time_iso_8601": "2016-05-05T22:22:31.746951Z", "url": "https://files.pythonhosted.org/packages/07/47/30bb261e7cd43bce2a68dfe9c236b0fea1c1b1a311f2952759630fdd17c0/epsg_ident-0.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b5c263209815d16d68755de33a7de999", "sha256": "20ecc67c3f1c3e5d11724c312497ffae7d708a34e7a90b42f04633e8421c313b"}, "downloads": -1, "filename": "epsg_ident-0.1.0.tar.gz", "has_sig": false, "md5_digest": "b5c263209815d16d68755de33a7de999", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6809, "upload_time": "2016-05-05T22:22:42", "upload_time_iso_8601": "2016-05-05T22:22:42.386667Z", "url": "https://files.pythonhosted.org/packages/14/ad/636aaf81bf90f50d1f3d79f687299ba40733d8abe33f21fc62d6be0672a0/epsg_ident-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "51d5f06ef9d64e5ec5713a6df0681b9c", "sha256": "5fa02c2dbff7f33003d8beae913de2eb14a30226ef29fb941fb8b47f93d1846f"}, "downloads": -1, "filename": "epsg_ident-0.1.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "51d5f06ef9d64e5ec5713a6df0681b9c", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 398289, "upload_time": "2016-05-06T15:17:05", "upload_time_iso_8601": "2016-05-06T15:17:05.971198Z", "url": "https://files.pythonhosted.org/packages/17/e2/12f72795a0a9b6f3471169e42eb3cfb728aad77139e5cfa2925749e56dee/epsg_ident-0.1.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f7de35ef56cc40c86b8a5ad18a0c976c", "sha256": "7e4b5045986efcd671cb43fdba04c85f70688df581b21817f77f97c04f8575e3"}, "downloads": -1, "filename": "epsg_ident-0.1.1.tar.gz", "has_sig": false, "md5_digest": "f7de35ef56cc40c86b8a5ad18a0c976c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 381072, "upload_time": "2016-05-06T15:17:12", "upload_time_iso_8601": "2016-05-06T15:17:12.512314Z", "url": "https://files.pythonhosted.org/packages/0a/9e/45966dc6280145782af51c588befc2386e5b82b1e9263277422898616a64/epsg_ident-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "51d5f06ef9d64e5ec5713a6df0681b9c", "sha256": "5fa02c2dbff7f33003d8beae913de2eb14a30226ef29fb941fb8b47f93d1846f"}, "downloads": -1, "filename": "epsg_ident-0.1.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "51d5f06ef9d64e5ec5713a6df0681b9c", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 398289, "upload_time": "2016-05-06T15:17:05", "upload_time_iso_8601": "2016-05-06T15:17:05.971198Z", "url": "https://files.pythonhosted.org/packages/17/e2/12f72795a0a9b6f3471169e42eb3cfb728aad77139e5cfa2925749e56dee/epsg_ident-0.1.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f7de35ef56cc40c86b8a5ad18a0c976c", "sha256": "7e4b5045986efcd671cb43fdba04c85f70688df581b21817f77f97c04f8575e3"}, "downloads": -1, "filename": "epsg_ident-0.1.1.tar.gz", "has_sig": false, "md5_digest": "f7de35ef56cc40c86b8a5ad18a0c976c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 381072, "upload_time": "2016-05-06T15:17:12", "upload_time_iso_8601": "2016-05-06T15:17:12.512314Z", "url": "https://files.pythonhosted.org/packages/0a/9e/45966dc6280145782af51c588befc2386e5b82b1e9263277422898616a64/epsg_ident-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:45:54 2020"}