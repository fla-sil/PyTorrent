{"info": {"author": "Jarek Zgoda", "author_email": "jarek.zgoda@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "Environment :: Web Environment", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: POSIX :: Linux", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: 3 :: Only", "Programming Language :: Python :: Implementation :: CPython", "Topic :: Internet :: WWW/HTTP :: Dynamic Content", "Topic :: Internet :: WWW/HTTP :: WSGI :: Application", "Typing :: Typed"], "description": "Kristall\n========\n\n.. image:: https://travis-ci.com/zgoda/kristall.svg?branch=master\n    :target: https://travis-ci.com/zgoda/kristall\n    :alt: Travis CI\n\n.. image:: https://codecov.io/gh/zgoda/kristall/branch/master/graph/badge.svg\n    :target: https://codecov.io/gh/zgoda/kristall\n    :alt: CodeCov\n\n.. image:: https://www.codefactor.io/repository/github/zgoda/kristall/badge\n    :target: https://www.codefactor.io/repository/github/zgoda/kristall\n    :alt: CodeFactor\n\nLightweight *web framework*\n(`wink, wink <https://www.youtube.com/watch?v=dlDXVI6uM78>`_)\nfor building APIs and backends.\nReasonably fast in execution, developer friendly. If you need gazillions of\nrequests served by single process in a second then there are better options\nthan Kristall. I'm happy when it's not slower than Flask.\n\nWhy\n---\n\nSome frameworks suck here, others suck there and none is good at all things\nI want. I decided to build a WSGI application tool that's based on\n`Werkzeug <https://palletsprojects.com/p/werkzeug/>`_ and is simpler than\nFlask. Sure, there are\n`Flask <https://palletsprojects.com/p/flask/>`_ extensions that make writing\nREST APIs simpler like\n`Flask-RESTFul <https://flask-restful.readthedocs.io/en/latest/>`_ and\n`Flask-RESTPlus <https://flask-restplus.readthedocs.io/en/stable/>`_ but they\nare built on top of Flask and do many extra things that are better done by\nothers, or not done at all. I wanted something that is somewhere in between\nFalcon and Flask. Simplicity of Falcon with convenience of Flask.\n\nBut since not everything sucks in Falcon I'd grab some ideas, like\nresourceful routing without need to subclass specific ``Resource`` base class,\nor only static route registration.\n\nWhat\n----\n\n* resourceful routing\n* static route registration\n* only JSON content type supported\n* very limited automatic coercion to JSON\n\nThat's it for now.\n\nFuture developments:\n\n* JWT-based resource access control (optional)\n* CORS support (optional)\n\nWhat not\n--------\n\n* no decorator-based route registration - there's only one way to register\n  routes and it is explicit\n* no built-in support for any other content type than ``application/json`` on\n  both input and output\n* no fancy JSON de/encoding, only builtin ``json`` module is used in default JSON\n  handling - use schema parsing/validating library eg.\n  `Marshmallow <https://marshmallow.readthedocs.io/en/stable/>`_ or\n  `Colander <https://docs.pylonsproject.org/projects/colander/en/stable/>`_ if\n  you need anything beyond that; default behaviour may be customised to some\n  degree by providing JSON decoder and encoder classes\n\nHow\n---\n\nReally very thin wrapper over Werkzeug utility functions and classes.\nSeriously, I'm not calling this *a framework*. Not yet. It consists of\n``Application`` class that's and entry point to runtime and\n``Request``/``Response`` objects that in fact are Werkzeug's built in\nwrappers reconfigured to support only JSON as transport media with some\nconvenience methods.\n\nRuntime dependencies\n--------------------\n\n* Python 3.7\n* Werkzeug 0.16\n\nThese are minimal versions of requirements.\n\n\n", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/zgoda/kristall", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "kristall", "package_url": "https://pypi.org/project/kristall/", "platform": "", "project_url": "https://pypi.org/project/kristall/", "project_urls": {"Homepage": "https://github.com/zgoda/kristall"}, "release_url": "https://pypi.org/project/kristall/0.0.1/", "requires_dist": ["Werkzeug", "pytest ; extra == 'dev'", "pytest-cov ; extra == 'dev'", "pip ; extra == 'dev'", "setuptools ; extra == 'dev'", "wheel ; extra == 'dev'", "ipython ; extra == 'dev'", "ipdb ; extra == 'dev'", "watchdog ; extra == 'dev'", "termcolor ; extra == 'dev'", "flake8 ; extra == 'dev'", "flake8-builtins ; extra == 'dev'", "flake8-bugbear ; extra == 'dev'", "flake8-mutable ; extra == 'dev'", "flake8-comprehensions ; extra == 'dev'", "pep8-naming ; extra == 'dev'", "dlint ; extra == 'dev'", "towncrier ; extra == 'dev'", "Sphinx ; extra == 'dev'", "sphinx-autodoc-typehints ; extra == 'dev'", "python-dotenv ; extra == 'dev'", "doc8 ; extra == 'dev'", "pytest ; extra == 'test'", "pytest-cov ; extra == 'test'"], "requires_python": "~=3.7", "summary": "Lightweight web framework for building APIs and backends", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://travis-ci.com/zgoda/kristall\" rel=\"nofollow\"><img alt=\"Travis CI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a243dcfa24cdf31fa0de0a38d08b627a728608cb/68747470733a2f2f7472617669732d63692e636f6d2f7a676f64612f6b72697374616c6c2e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://codecov.io/gh/zgoda/kristall\" rel=\"nofollow\"><img alt=\"CodeCov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a2ee0b87ca4d0868c7f616e5021ae8c05ae14f81/68747470733a2f2f636f6465636f762e696f2f67682f7a676f64612f6b72697374616c6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a>\n<a href=\"https://www.codefactor.io/repository/github/zgoda/kristall\" rel=\"nofollow\"><img alt=\"CodeFactor\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5261ecec75d973c52b5267c86367eca3630f129d/68747470733a2f2f7777772e636f6465666163746f722e696f2f7265706f7369746f72792f6769746875622f7a676f64612f6b72697374616c6c2f6261646765\"></a>\n<p>Lightweight <em>web framework</em>\n(<a href=\"https://www.youtube.com/watch?v=dlDXVI6uM78\" rel=\"nofollow\">wink, wink</a>)\nfor building APIs and backends.\nReasonably fast in execution, developer friendly. If you need gazillions of\nrequests served by single process in a second then there are better options\nthan Kristall. I\u2019m happy when it\u2019s not slower than Flask.</p>\n<div id=\"why\">\n<h2>Why</h2>\n<p>Some frameworks suck here, others suck there and none is good at all things\nI want. I decided to build a WSGI application tool that\u2019s based on\n<a href=\"https://palletsprojects.com/p/werkzeug/\" rel=\"nofollow\">Werkzeug</a> and is simpler than\nFlask. Sure, there are\n<a href=\"https://palletsprojects.com/p/flask/\" rel=\"nofollow\">Flask</a> extensions that make writing\nREST APIs simpler like\n<a href=\"https://flask-restful.readthedocs.io/en/latest/\" rel=\"nofollow\">Flask-RESTFul</a> and\n<a href=\"https://flask-restplus.readthedocs.io/en/stable/\" rel=\"nofollow\">Flask-RESTPlus</a> but they\nare built on top of Flask and do many extra things that are better done by\nothers, or not done at all. I wanted something that is somewhere in between\nFalcon and Flask. Simplicity of Falcon with convenience of Flask.</p>\n<p>But since not everything sucks in Falcon I\u2019d grab some ideas, like\nresourceful routing without need to subclass specific <tt>Resource</tt> base class,\nor only static route registration.</p>\n</div>\n<div id=\"what\">\n<h2>What</h2>\n<ul>\n<li>resourceful routing</li>\n<li>static route registration</li>\n<li>only JSON content type supported</li>\n<li>very limited automatic coercion to JSON</li>\n</ul>\n<p>That\u2019s it for now.</p>\n<p>Future developments:</p>\n<ul>\n<li>JWT-based resource access control (optional)</li>\n<li>CORS support (optional)</li>\n</ul>\n</div>\n<div id=\"what-not\">\n<h2>What not</h2>\n<ul>\n<li>no decorator-based route registration - there\u2019s only one way to register\nroutes and it is explicit</li>\n<li>no built-in support for any other content type than <tt>application/json</tt> on\nboth input and output</li>\n<li>no fancy JSON de/encoding, only builtin <tt>json</tt> module is used in default JSON\nhandling - use schema parsing/validating library eg.\n<a href=\"https://marshmallow.readthedocs.io/en/stable/\" rel=\"nofollow\">Marshmallow</a> or\n<a href=\"https://docs.pylonsproject.org/projects/colander/en/stable/\" rel=\"nofollow\">Colander</a> if\nyou need anything beyond that; default behaviour may be customised to some\ndegree by providing JSON decoder and encoder classes</li>\n</ul>\n</div>\n<div id=\"how\">\n<h2>How</h2>\n<p>Really very thin wrapper over Werkzeug utility functions and classes.\nSeriously, I\u2019m not calling this <em>a framework</em>. Not yet. It consists of\n<tt>Application</tt> class that\u2019s and entry point to runtime and\n<tt>Request</tt>/<tt>Response</tt> objects that in fact are Werkzeug\u2019s built in\nwrappers reconfigured to support only JSON as transport media with some\nconvenience methods.</p>\n</div>\n<div id=\"runtime-dependencies\">\n<h2>Runtime dependencies</h2>\n<ul>\n<li>Python 3.7</li>\n<li>Werkzeug 0.16</li>\n</ul>\n<p>These are minimal versions of requirements.</p>\n</div>\n\n          </div>"}, "last_serial": 6487971, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "ec0fedfbf313c3d7373f78106183cbba", "sha256": "40c71d4a9bd88ae5e4d6b35602c909ce2e0b6ae513e07423d1fac2e3a1417e4f"}, "downloads": -1, "filename": "kristall-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "ec0fedfbf313c3d7373f78106183cbba", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": "~=3.7", "size": 13712, "upload_time": "2020-01-20T15:39:52", "upload_time_iso_8601": "2020-01-20T15:39:52.852570Z", "url": "https://files.pythonhosted.org/packages/81/d9/b07944f5fa73a0551b3907db9b15f3800fa30a0cfe7e1ca589248bf36483/kristall-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d5a0e65ef34e32772a9d5de0e4899647", "sha256": "432f31c49996799dc2f0c4b3a735dd005bce8d06052facca8d2d8c28e7b88e51"}, "downloads": -1, "filename": "kristall-0.0.1.tar.gz", "has_sig": false, "md5_digest": "d5a0e65ef34e32772a9d5de0e4899647", "packagetype": "sdist", "python_version": "source", "requires_python": "~=3.7", "size": 12387, "upload_time": "2020-01-20T15:39:55", "upload_time_iso_8601": "2020-01-20T15:39:55.228525Z", "url": "https://files.pythonhosted.org/packages/9e/9c/0b296518b2cc0a70ba6c45c657640b41cffaf63993e77f05b866b14cd5ff/kristall-0.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ec0fedfbf313c3d7373f78106183cbba", "sha256": "40c71d4a9bd88ae5e4d6b35602c909ce2e0b6ae513e07423d1fac2e3a1417e4f"}, "downloads": -1, "filename": "kristall-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "ec0fedfbf313c3d7373f78106183cbba", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": "~=3.7", "size": 13712, "upload_time": "2020-01-20T15:39:52", "upload_time_iso_8601": "2020-01-20T15:39:52.852570Z", "url": "https://files.pythonhosted.org/packages/81/d9/b07944f5fa73a0551b3907db9b15f3800fa30a0cfe7e1ca589248bf36483/kristall-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d5a0e65ef34e32772a9d5de0e4899647", "sha256": "432f31c49996799dc2f0c4b3a735dd005bce8d06052facca8d2d8c28e7b88e51"}, "downloads": -1, "filename": "kristall-0.0.1.tar.gz", "has_sig": false, "md5_digest": "d5a0e65ef34e32772a9d5de0e4899647", "packagetype": "sdist", "python_version": "source", "requires_python": "~=3.7", "size": 12387, "upload_time": "2020-01-20T15:39:55", "upload_time_iso_8601": "2020-01-20T15:39:55.228525Z", "url": "https://files.pythonhosted.org/packages/9e/9c/0b296518b2cc0a70ba6c45c657640b41cffaf63993e77f05b866b14cd5ff/kristall-0.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:48:47 2020"}