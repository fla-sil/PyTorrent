{"info": {"author": "Egor Urvanov", "author_email": "hedgehogues@bk.ru", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3.7"], "description": "# Table test\n\nThis package wrote to use table tests in python. The best practice and very useful practice is test with simple-style \nstructure. You don't write any code: for-loop, conditions, exceptions and other difficult constructions in tests. \nYou describe your test as some cases:\n\n* Name\n* Description\n* Object (class or function)\n* Target value or exception\n* After and before middleware\n\nSuch kind of tests intend of standartization and getting rid of verbosity. You can find some examples into \n[tests](https://github.com/hedgehogues/table-tests/tree/tests). More sophisticated examples you can find \n[here](https://github.com/Hedgehogues/youtube-crawler/tree/master/tests)\n\n# Installation\n\n    git clone https://github.com/Hedgehogues/table-tests\n    pip install -r requirements\n\n# Our recommendations\n\nIf you want to use our util, we recommend to use for single class for testing each function or method. You must inherit \nfrom the base class and build your own class:\n\n    from utils import BaseTestClass, SubTest\n    from example.c import MyClass\n\n\n    class MyTest(BaseTestClass):\n\n        def setUp(self):\n            self.tests = [\n                SubTest(\n                    name=\"Test 1\",\n                    description=\"This is accepted test for MyClass.plus method\",\n                    object=MyClass(5),\n                    args={'b': 1},\n                    want=6,\n                ),\n            ]\n\n        def test(self):\n            for test in self.tests:\n                self.apply_test(test, lambda obj, kwargs: obj.plus(**kwargs))\n\n* BaseTestClass - this is simple engine for process your tests.\n* SubTest - this is instance of your test\n\nYou're welcome! Enjoy it (=. \n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Hedgehogues/table-tests", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "table-test", "package_url": "https://pypi.org/project/table-test/", "platform": "", "project_url": "https://pypi.org/project/table-test/", "project_urls": {"Homepage": "https://github.com/Hedgehogues/table-tests"}, "release_url": "https://pypi.org/project/table-test/0.4.1/", "requires_dist": ["deepdiff (==4.0.6)", "numpy (==1.16.4)"], "requires_python": "", "summary": "Simple engine for your test. No code, no noodles", "version": "0.4.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Table test</h1>\n<p>This package wrote to use table tests in python. The best practice and very useful practice is test with simple-style\nstructure. You don't write any code: for-loop, conditions, exceptions and other difficult constructions in tests.\nYou describe your test as some cases:</p>\n<ul>\n<li>Name</li>\n<li>Description</li>\n<li>Object (class or function)</li>\n<li>Target value or exception</li>\n<li>After and before middleware</li>\n</ul>\n<p>Such kind of tests intend of standartization and getting rid of verbosity. You can find some examples into\n<a href=\"https://github.com/hedgehogues/table-tests/tree/tests\" rel=\"nofollow\">tests</a>. More sophisticated examples you can find\n<a href=\"https://github.com/Hedgehogues/youtube-crawler/tree/master/tests\" rel=\"nofollow\">here</a></p>\n<h1>Installation</h1>\n<pre><code>git clone https://github.com/Hedgehogues/table-tests\npip install -r requirements\n</code></pre>\n<h1>Our recommendations</h1>\n<p>If you want to use our util, we recommend to use for single class for testing each function or method. You must inherit\nfrom the base class and build your own class:</p>\n<pre><code>from utils import BaseTestClass, SubTest\nfrom example.c import MyClass\n\n\nclass MyTest(BaseTestClass):\n\n    def setUp(self):\n        self.tests = [\n            SubTest(\n                name=\"Test 1\",\n                description=\"This is accepted test for MyClass.plus method\",\n                object=MyClass(5),\n                args={'b': 1},\n                want=6,\n            ),\n        ]\n\n    def test(self):\n        for test in self.tests:\n            self.apply_test(test, lambda obj, kwargs: obj.plus(**kwargs))\n</code></pre>\n<ul>\n<li>BaseTestClass - this is simple engine for process your tests.</li>\n<li>SubTest - this is instance of your test</li>\n</ul>\n<p>You're welcome! Enjoy it (=.</p>\n\n          </div>"}, "last_serial": 5868164, "releases": {"0.4.1": [{"comment_text": "", "digests": {"md5": "961c13f2b34a34b46373ef67821204da", "sha256": "633adab978cd747f7b433045e3472ff2395d86260ed76ebfed6008a51351e063"}, "downloads": -1, "filename": "table_test-0.4.1-py3-none-any.whl", "has_sig": false, "md5_digest": "961c13f2b34a34b46373ef67821204da", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4651, "upload_time": "2019-09-22T07:28:21", "upload_time_iso_8601": "2019-09-22T07:28:21.466777Z", "url": "https://files.pythonhosted.org/packages/bf/d6/6cd56afa131d4bec023a63d802a6882f0d3547f9b321fea4184a1fc9848c/table_test-0.4.1-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "961c13f2b34a34b46373ef67821204da", "sha256": "633adab978cd747f7b433045e3472ff2395d86260ed76ebfed6008a51351e063"}, "downloads": -1, "filename": "table_test-0.4.1-py3-none-any.whl", "has_sig": false, "md5_digest": "961c13f2b34a34b46373ef67821204da", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4651, "upload_time": "2019-09-22T07:28:21", "upload_time_iso_8601": "2019-09-22T07:28:21.466777Z", "url": "https://files.pythonhosted.org/packages/bf/d6/6cd56afa131d4bec023a63d802a6882f0d3547f9b321fea4184a1fc9848c/table_test-0.4.1-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 02:58:38 2020"}