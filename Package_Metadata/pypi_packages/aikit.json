{"info": {"author": "", "author_email": "", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "Intended Audience :: Science/Research", "License :: OSI Approved :: BSD License", "Operating System :: MacOS", "Operating System :: Microsoft :: Windows", "Operating System :: POSIX", "Operating System :: Unix", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Topic :: Scientific/Engineering", "Topic :: Software Development"], "description": "![Build Status](https://travis-ci.org/societe-generale/aikit.svg?branch=master)\n[![Python 3.6](https://img.shields.io/badge/python-3.6-blue.svg)](https://github.com/societe-generale/aikit)\n[![PyPI version](https://badge.fury.io/py/aikit.svg)](https://badge.fury.io/py/aikit)\n[![Documentation Status](https://readthedocs.org/projects/aikit/badge/?version=latest)](https://aikit.readthedocs.io/en/latest/?badge=latest)\n[![Binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gh/societe-generale/aikit/master?filepath=/notebooks)\n\n# aikit\nAutomatic Tool Kit for Machine Learning and Datascience.\n\nThe objective is to provide tools to ease the repetitive part of the DataScientist job and so that he/she can focus on modelization. This package is still in alpha and more features will be added.\nIts mains features are:\n * improved and new \"scikit-learn like\" transformers ;\n * GraphPipeline : an extension of sklearn Pipeline that handles more generic chains of tranformations ;\n * an AutoML to automatically search throught several transformers and models.\n\nFull documentation is available here: https://aikit.readthedocs.io/en/latest/\n\nYou can run examples [here](https://mybinder.org/v2/gh/societe-generale/aikit/master?filepath=/notebooks), thanks to [Binder](https://mybinder.org).\n\n\n### GraphPipeline\n\nThe GraphPipeline object is an extension of `sklearn.pipeline.Pipeline` but the transformers/models can be chained with any directed graph.\n\nThe objects takes as input two arguments:\n * models: dictionary of models (each key is the name of a given node, and each corresponding value is the transformer corresponding to that node)\n * edges: list of tuples that links the nodes to each other\n\nExample:\n```python\ngpipeline = GraphPipeline(\n    models = {\n        \"vect\": CountVectorizerWrapper(analyzer=\"char\",\n                                       ngram_range=(1, 4),\n                                       columns_to_use=[\"text1\", \"text2\"]),\n        \"cat\": NumericalEncoder(columns_to_use=[\"cat1\", \"cat2\"]),\n        \"rf\": RandomForestClassifier(n_estimators=100)\n    },\n    edges = [(\"vect\", \"rf\"), (\"cat\", \"rf\")]\n)\n```\n\n![Alt text](docs/img/graphpipeline_mergingpipe.png?raw=true \"Title\")\n\n### AutoML\n\nAikit contains an AutoML part which will test several models and transformers for a given dataset.\n\nFor example, you can create the following python script `run_automl_titanic.py`:\n```python\nfrom aikit.datasets import load_dataset, DatasetEnum\nfrom aikit.ml_machine import MlMachineLauncher\n\ndef loader():\n    dfX, y, *_ = load_dataset(DatasetEnum.titanic)\n    return dfX, y\n\ndef set_configs(launcher):\n    \"\"\" modify that function to change launcher configuration \"\"\"\n    launcher.job_config.score_base_line = 0.75\n    launcher.job_config.allow_approx_cv = True\n    return launcher\n\nif __name__ == \"__main__\":\n    launcher = MlMachineLauncher(base_folder = \"~/automl/titanic\",\n                                 name = \"titanic\",\n                                 loader = loader,\n                                 set_configs = set_configs)\n    launcher.execute_processed_command_argument()\n```\n\nAnd then run the command:\n```\npython run_automl_titanic.py run -n 4\n```\n\nTo run the automl using 4 workers, the results will be stored in the specified folder\nYou can aggregate those result using:\n```\npython run_automl_titanic.py result\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://pypi.org/project/aikit/#files", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/societe-generale/aikit", "keywords": "", "license": "BSD License", "maintainer": "Lionel Massoulard", "maintainer_email": "", "name": "aikit", "package_url": "https://pypi.org/project/aikit/", "platform": "", "project_url": "https://pypi.org/project/aikit/", "project_urls": {"Download": "https://pypi.org/project/aikit/#files", "Homepage": "https://github.com/societe-generale/aikit"}, "release_url": "https://pypi.org/project/aikit/0.2.1/", "requires_dist": ["scikit-learn (>=0.20)", "pandas (<1.0,>=0.23)", "numpy", "scipy", "statsmodels", "lockfile", "decorator", "networkx"], "requires_python": "", "summary": "An automated machine learning framework", "version": "0.2.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/42937e0818239186be4647074e4d90cf3483a7a1/68747470733a2f2f7472617669732d63692e6f72672f736f63696574652d67656e6572616c652f61696b69742e7376673f6272616e63683d6d6173746572\">\n<a href=\"https://github.com/societe-generale/aikit\" rel=\"nofollow\"><img alt=\"Python 3.6\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/01419d339114693587408dd14856677a4789006a/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f707974686f6e2d332e362d626c75652e737667\"></a>\n<a href=\"https://badge.fury.io/py/aikit\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/64c26ea1d2fc938a7314c4b07c4a2e5fef0522e4/68747470733a2f2f62616467652e667572792e696f2f70792f61696b69742e737667\"></a>\n<a href=\"https://aikit.readthedocs.io/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6213454f18fd4744e072bb93d4b5983b9c240000/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f61696b69742f62616467652f3f76657273696f6e3d6c6174657374\"></a>\n<a href=\"https://mybinder.org/v2/gh/societe-generale/aikit/master?filepath=/notebooks\" rel=\"nofollow\"><img alt=\"Binder\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/85e91bbb928104e4ce317951541520c6b9c170e1/68747470733a2f2f6d7962696e6465722e6f72672f62616467655f6c6f676f2e737667\"></a></p>\n<h1>aikit</h1>\n<p>Automatic Tool Kit for Machine Learning and Datascience.</p>\n<p>The objective is to provide tools to ease the repetitive part of the DataScientist job and so that he/she can focus on modelization. This package is still in alpha and more features will be added.\nIts mains features are:</p>\n<ul>\n<li>improved and new \"scikit-learn like\" transformers ;</li>\n<li>GraphPipeline : an extension of sklearn Pipeline that handles more generic chains of tranformations ;</li>\n<li>an AutoML to automatically search throught several transformers and models.</li>\n</ul>\n<p>Full documentation is available here: <a href=\"https://aikit.readthedocs.io/en/latest/\" rel=\"nofollow\">https://aikit.readthedocs.io/en/latest/</a></p>\n<p>You can run examples <a href=\"https://mybinder.org/v2/gh/societe-generale/aikit/master?filepath=/notebooks\" rel=\"nofollow\">here</a>, thanks to <a href=\"https://mybinder.org\" rel=\"nofollow\">Binder</a>.</p>\n<h3>GraphPipeline</h3>\n<p>The GraphPipeline object is an extension of <code>sklearn.pipeline.Pipeline</code> but the transformers/models can be chained with any directed graph.</p>\n<p>The objects takes as input two arguments:</p>\n<ul>\n<li>models: dictionary of models (each key is the name of a given node, and each corresponding value is the transformer corresponding to that node)</li>\n<li>edges: list of tuples that links the nodes to each other</li>\n</ul>\n<p>Example:</p>\n<pre><span class=\"n\">gpipeline</span> <span class=\"o\">=</span> <span class=\"n\">GraphPipeline</span><span class=\"p\">(</span>\n    <span class=\"n\">models</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"s2\">\"vect\"</span><span class=\"p\">:</span> <span class=\"n\">CountVectorizerWrapper</span><span class=\"p\">(</span><span class=\"n\">analyzer</span><span class=\"o\">=</span><span class=\"s2\">\"char\"</span><span class=\"p\">,</span>\n                                       <span class=\"n\">ngram_range</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">),</span>\n                                       <span class=\"n\">columns_to_use</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"text1\"</span><span class=\"p\">,</span> <span class=\"s2\">\"text2\"</span><span class=\"p\">]),</span>\n        <span class=\"s2\">\"cat\"</span><span class=\"p\">:</span> <span class=\"n\">NumericalEncoder</span><span class=\"p\">(</span><span class=\"n\">columns_to_use</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"cat1\"</span><span class=\"p\">,</span> <span class=\"s2\">\"cat2\"</span><span class=\"p\">]),</span>\n        <span class=\"s2\">\"rf\"</span><span class=\"p\">:</span> <span class=\"n\">RandomForestClassifier</span><span class=\"p\">(</span><span class=\"n\">n_estimators</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">)</span>\n    <span class=\"p\">},</span>\n    <span class=\"n\">edges</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"s2\">\"vect\"</span><span class=\"p\">,</span> <span class=\"s2\">\"rf\"</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s2\">\"cat\"</span><span class=\"p\">,</span> <span class=\"s2\">\"rf\"</span><span class=\"p\">)]</span>\n<span class=\"p\">)</span>\n</pre>\n<p><img alt=\"Alt text\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1865a0bb88317909fbf3c64abbf92f03412a71fb/646f63732f696d672f6772617068706970656c696e655f6d657267696e67706970652e706e673f7261773d74727565\"></p>\n<h3>AutoML</h3>\n<p>Aikit contains an AutoML part which will test several models and transformers for a given dataset.</p>\n<p>For example, you can create the following python script <code>run_automl_titanic.py</code>:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">aikit.datasets</span> <span class=\"kn\">import</span> <span class=\"n\">load_dataset</span><span class=\"p\">,</span> <span class=\"n\">DatasetEnum</span>\n<span class=\"kn\">from</span> <span class=\"nn\">aikit.ml_machine</span> <span class=\"kn\">import</span> <span class=\"n\">MlMachineLauncher</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">loader</span><span class=\"p\">():</span>\n    <span class=\"n\">dfX</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">_</span> <span class=\"o\">=</span> <span class=\"n\">load_dataset</span><span class=\"p\">(</span><span class=\"n\">DatasetEnum</span><span class=\"o\">.</span><span class=\"n\">titanic</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">dfX</span><span class=\"p\">,</span> <span class=\"n\">y</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">set_configs</span><span class=\"p\">(</span><span class=\"n\">launcher</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\" modify that function to change launcher configuration \"\"\"</span>\n    <span class=\"n\">launcher</span><span class=\"o\">.</span><span class=\"n\">job_config</span><span class=\"o\">.</span><span class=\"n\">score_base_line</span> <span class=\"o\">=</span> <span class=\"mf\">0.75</span>\n    <span class=\"n\">launcher</span><span class=\"o\">.</span><span class=\"n\">job_config</span><span class=\"o\">.</span><span class=\"n\">allow_approx_cv</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n    <span class=\"k\">return</span> <span class=\"n\">launcher</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s2\">\"__main__\"</span><span class=\"p\">:</span>\n    <span class=\"n\">launcher</span> <span class=\"o\">=</span> <span class=\"n\">MlMachineLauncher</span><span class=\"p\">(</span><span class=\"n\">base_folder</span> <span class=\"o\">=</span> <span class=\"s2\">\"~/automl/titanic\"</span><span class=\"p\">,</span>\n                                 <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s2\">\"titanic\"</span><span class=\"p\">,</span>\n                                 <span class=\"n\">loader</span> <span class=\"o\">=</span> <span class=\"n\">loader</span><span class=\"p\">,</span>\n                                 <span class=\"n\">set_configs</span> <span class=\"o\">=</span> <span class=\"n\">set_configs</span><span class=\"p\">)</span>\n    <span class=\"n\">launcher</span><span class=\"o\">.</span><span class=\"n\">execute_processed_command_argument</span><span class=\"p\">()</span>\n</pre>\n<p>And then run the command:</p>\n<pre><code>python run_automl_titanic.py run -n 4\n</code></pre>\n<p>To run the automl using 4 workers, the results will be stored in the specified folder\nYou can aggregate those result using:</p>\n<pre><code>python run_automl_titanic.py result\n</code></pre>\n\n          </div>"}, "last_serial": 6736194, "releases": {"0.1.4": [{"comment_text": "", "digests": {"md5": "fd49afbe5229e28ab3322d55db46a046", "sha256": "f862f247753e5bdefdbb576fce9ccec1a9465847f5eb9979a643b95418238249"}, "downloads": -1, "filename": "aikit-0.1.4-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "fd49afbe5229e28ab3322d55db46a046", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 157588, "upload_time": "2019-11-11T20:19:16", "upload_time_iso_8601": "2019-11-11T20:19:16.705545Z", "url": "https://files.pythonhosted.org/packages/50/95/42e10d4d014b0538cefeaeea620f8b6bbab84ec65f38262f43871e0bbdb3/aikit-0.1.4-py2.py3-none-any.whl", "yanked": false}], "0.1.dev0": [{"comment_text": "", "digests": {"md5": "38bb5b2a295678034f183455bd7cc031", "sha256": "644169acfd0efabf3647b539e2f162583621906e2bd3456727f471ed6102595d"}, "downloads": -1, "filename": "aikit-0.1.dev0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "38bb5b2a295678034f183455bd7cc031", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 2493, "upload_time": "2018-09-14T10:32:44", "upload_time_iso_8601": "2018-09-14T10:32:44.476853Z", "url": "https://files.pythonhosted.org/packages/92/10/0927cab1e8658a55241a9beeba33d0d355790bd65bbadf784da754bedf25/aikit-0.1.dev0-py2.py3-none-any.whl", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "a6bc342509a5bbd5c36535362f592dfa", "sha256": "7b2c3aac2a0f412d28c55f5d6421af868e510fbd4b9540f276b90f31f9810230"}, "downloads": -1, "filename": "aikit-0.2.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "a6bc342509a5bbd5c36535362f592dfa", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 159177, "upload_time": "2020-03-02T21:23:08", "upload_time_iso_8601": "2020-03-02T21:23:08.769190Z", "url": "https://files.pythonhosted.org/packages/16/7c/01fb52f381e44949f494d2ce1d98de59c073b5eb793ef5dba9b185076fe8/aikit-0.2.1-py2.py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a6bc342509a5bbd5c36535362f592dfa", "sha256": "7b2c3aac2a0f412d28c55f5d6421af868e510fbd4b9540f276b90f31f9810230"}, "downloads": -1, "filename": "aikit-0.2.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "a6bc342509a5bbd5c36535362f592dfa", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 159177, "upload_time": "2020-03-02T21:23:08", "upload_time_iso_8601": "2020-03-02T21:23:08.769190Z", "url": "https://files.pythonhosted.org/packages/16/7c/01fb52f381e44949f494d2ce1d98de59c073b5eb793ef5dba9b185076fe8/aikit-0.2.1-py2.py3-none-any.whl", "yanked": false}], "timestamp": "Thu May  7 16:21:58 2020"}