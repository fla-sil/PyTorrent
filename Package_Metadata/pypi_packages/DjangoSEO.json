{"info": {"author": "Will Hardy", "author_email": "djangoseo@willhardy.com.au", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Web Environment", "Framework :: Django", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Software Development"], "description": "================\nDjango SEO tools\n================\n\nThis is a set of SEO tools for Django.\nIt allows you to associate metadata with:\n\n* absolute paths\n* model instances\n* model classes\n* views\n\nMetadata can be edited in the admin in a centralised place, but also alongside any associated models.\n\nThis is however a framework, not an app. You therefore have\ncomplete control over the data you store. \nHere is an example of a definition::\n\n    from rollyourown import seo\n\n    class BasicMetadata(seo.Metadata):\n        title          = seo.Tag(max_length=68, head=True)\n        keywords       = seo.KeywordTag()\n        description    = seo.MetaTag(max_length=155)\n        heading        = seo.Tag(name=\"h1\")\n        subheading     = seo.Tag(name=\"h2\")\n        extra          = seo.Raw(head=True)\n    \n        # Adding some fields for facebook (opengraph)\n        og_title       = seo.MetaTag(name=\"og:title\", populate_from=\"title\", verbose_name=\"facebook title\")\n        og_description = seo.MetaTag(name=\"og:description\", populate_from=\"description\", verbose_name='facebook description')\n\nAs you can see it is very flexible, but there is much more than this simple example.\n\nThe full documentation can be read online at http://django-seo.readthedocs.org/.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/willhardy/django-seo", "keywords": "seo,django,framework", "license": "LICENSE", "maintainer": null, "maintainer_email": null, "name": "DjangoSEO", "package_url": "https://pypi.org/project/DjangoSEO/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/DjangoSEO/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/willhardy/django-seo"}, "release_url": "https://pypi.org/project/DjangoSEO/1.0/", "requires_dist": null, "requires_python": null, "summary": "A framework for managing SEO metadata in Django.", "version": "1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>This is a set of SEO tools for Django.\nIt allows you to associate metadata with:</p>\n<ul>\n<li>absolute paths</li>\n<li>model instances</li>\n<li>model classes</li>\n<li>views</li>\n</ul>\n<p>Metadata can be edited in the admin in a centralised place, but also alongside any associated models.</p>\n<p>This is however a framework, not an app. You therefore have\ncomplete control over the data you store.\nHere is an example of a definition:</p>\n<pre>from rollyourown import seo\n\nclass BasicMetadata(seo.Metadata):\n    title          = seo.Tag(max_length=68, head=True)\n    keywords       = seo.KeywordTag()\n    description    = seo.MetaTag(max_length=155)\n    heading        = seo.Tag(name=\"h1\")\n    subheading     = seo.Tag(name=\"h2\")\n    extra          = seo.Raw(head=True)\n\n    # Adding some fields for facebook (opengraph)\n    og_title       = seo.MetaTag(name=\"og:title\", populate_from=\"title\", verbose_name=\"facebook title\")\n    og_description = seo.MetaTag(name=\"og:description\", populate_from=\"description\", verbose_name='facebook description')\n</pre>\n<p>As you can see it is very flexible, but there is much more than this simple example.</p>\n<p>The full documentation can be read online at <a href=\"http://django-seo.readthedocs.org/\" rel=\"nofollow\">http://django-seo.readthedocs.org/</a>.</p>\n\n          </div>"}, "last_serial": 784148, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "69cd65eb3a9d716b5ba067b1a4e63735", "sha256": "9e6889f5e28550a90f69ac34e96b811f7afb7627bf221ededae0ac93b35c243e"}, "downloads": -1, "filename": "DjangoSEO-1.0.tar.gz", "has_sig": false, "md5_digest": "69cd65eb3a9d716b5ba067b1a4e63735", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 200572, "upload_time": "2011-02-22T23:53:28", "upload_time_iso_8601": "2011-02-22T23:53:28.681041Z", "url": "https://files.pythonhosted.org/packages/a0/44/53bf0fa00fab3ba594d8755556fad5b2106e22e70442005bcd0f6edabf88/DjangoSEO-1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "69cd65eb3a9d716b5ba067b1a4e63735", "sha256": "9e6889f5e28550a90f69ac34e96b811f7afb7627bf221ededae0ac93b35c243e"}, "downloads": -1, "filename": "DjangoSEO-1.0.tar.gz", "has_sig": false, "md5_digest": "69cd65eb3a9d716b5ba067b1a4e63735", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 200572, "upload_time": "2011-02-22T23:53:28", "upload_time_iso_8601": "2011-02-22T23:53:28.681041Z", "url": "https://files.pythonhosted.org/packages/a0/44/53bf0fa00fab3ba594d8755556fad5b2106e22e70442005bcd0f6edabf88/DjangoSEO-1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:53:37 2020"}