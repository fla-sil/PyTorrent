{"info": {"author": "Oscar Martinez-Rubi", "author_email": "o.rubi@esciencecenter.nl", "bugtrack_url": null, "classifiers": [], "description": "**This repository is currently not maintained. We welcome people to fork this repository for further development and maintenance.** \n\n\n# pycoeman\n\n[![Build Status](https://travis-ci.org/NLeSC/pycoeman.svg?branch=master)](https://travis-ci.org/NLeSC/pycoeman)\n[![Codacy Badge](https://api.codacy.com/project/badge/Grade/41716b834df24626a8cce742ac068fce)](https://www.codacy.com/app/omrubi/pycoeman?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=NLeSC/pycoeman&amp;utm_campaign=Badge_Grade)\n[![DOI](https://zenodo.org/badge/22553/NLeSC/pycoeman.svg)](https://zenodo.org/badge/latestdoi/22553/NLeSC/pycoeman)\n\nPython Commands Execution Manager\n\npycoeman is a Python toolkit for executing command-line commands. It allows the execution of:\n\n- Sequential commands: this is a chain of command-line commands which will be executed one after the other. In other words, this is a set of commands that you would traditionally execute in a Bash script. Normally there are IO dependencies between commands (one command requires the output from one or previous ones).\n\n- Parallel commands: this is a set of command-line commands which are executed in parallel. In other words, this is a set of commands that you would traditionally execute in a Bash script with all the commands as background jobs (with the & at the end). There cannot be IO dependencies between commands. This is can be useful for pleasingly parallel solutions, i.e. tools which are single-core at programming level but can be parallelized at data level and usually require some final merging process.\n\npycoeman adds CPU/MEM/disk monitoring during the execution of the commands and it allows to create clean execution environments for easier management of your executions (the commands will be executed in different folders separated from where the input data is). pycoeman has tools to run both sequential and parallel commands locally (in the local computer), and also to run parallel commands in a set of remote hosts accessible via SSH as well as in SGE clusters (computer clusters with Sun Grid Engine batch-queuing system). pycoeman is configured using XML files.\n\npycoeman is used by pymicmac (https://github.com/ImproPhoto/pymicmac)\n\n## Installation\n\nFor now pycoeman only works in Linux systems. It requires Python 3.5 and it is installed using pip.\nIf Python 3.5 is not the default Python on user's system, the user should use **pip3** to install *pycoeman*.\nTo avoid issues with dependencies and versions, and indirectly permissions, the use should use [**virtualenv**](https://virtualenv.pypa.io/en/stable/).\n\n* Installing system package dependencies\n```\nsudo apt-get install freetype libssl-dev libffi-dev\n```\n\n* Installing *pycoeman* from sources:\n```\ngit clone https://github.com/NLeSC/pycoeman\ncd pycoeman\n\n#If virtualenv is not installed:\nsudo apt-get install virtualenv\n\nvirtualenv pycoeman_env\n. pycoeman_env/bin/activate\n\npip3 -r requirements.txt install .\n```\n\n* Installing *pycoeman* package:\n```\n#If virtualenv is not installed:\nsudo apt-get install virtualenv\n\nvirtualenv pycoeman_env\n. pycoeman_env/bin/activate\n\npip3 -r requirements.txt install pycoeman\n```\n\nThe installation makes the following command-line tools available: `coeman-seq-local`, `coeman-par-local`, `coeman-par-ssh` and `coeman-par-sge`\n\n## Deployment\n\nWith *Pycoeman* user's commands are executed either in *sequential mode* or *parallel mode*. The commands, their arguments and the required files/directories\nare listed in a XML configuration file. Independent from the execution mode, the commands are either executed at the user's computer (commands with *-local*\nsuffix) or distributed among a set of machines (commands with either *-ssh* or *-sge* suffix). The ones with *-ssh* suffix use **ssh** to run commands at the\nremote hosts. The ones with *-sge* suffix submit the commands as jobs to a Sun Grid Engine queuing system.\n\n### Sequential mode\n\nThe sequential commands XML configuration file must contain a root tag `<SeqCommands>` and for each command a XML element `<Component>` is added with two\nmandatory nested XML elements, `<id>` and `<command>`. Dependencies on files/directories should be specified with `<require>` or `<requirelist>` tags. (Soft)\nlinks are created in the execution folder for the specified files/folders. Using `<require>` is recommended for small number of required files/folders, and\nthey are specified comma-separated. Using `<requirelist>` is recommended when the number of required files/folders is large. In this case they are specified in\na separate ASCII file, one file/folder per line. Both `<require>` and `<requirelist>` can be simultaneously used.  \n\nOnce the sequential mode XML configuration file is defined the user should use the tools `coeman-seq-[local | ssh | sge]` to execute them. For\nlocal executions, it is important to notice that since all the commands are executed in the same execution folder file/folders already linked\nfor one of the commands (using `<require>` or `<requirelist>`) they don't need to be linked again. In the following example, *inputfile1* and\n*inputfile2* are linked for *Executable1* and re-used for *Executable2*.\n```\n<SeqCommands>\n  <Component>\n    <id> Executable1 </id>\n    <requirelist>listimages.txt</requirelist>\n    <require> inputfile1 inputfile2</require>\n    <command> Executable1 *jpg inputfile1 inputfile2 -o outputfile1 </command>\n  </Component>\n  <Component>\n    <id> Executable2 </id>\n    <command> Executable2 inputfile1 outputfile1 </command>\n  </Component>\n</SeqCommands>\n```\n\n### Parallel mode\n\nThe parallel commands XML configuration file must contain a root tag `<ParCommands>` and for each command a XML element `<Component>` is added with three\nmandatory nested XML elements, `<id>`, `<command>` and `<output>`. The latter determines which files and directories should be collected as output. Dependencies\non files/directories should be specified with `<require>` or `<requirelist>` tags. (Soft) links are created in the execution folder for the specified\nfiles/folders. Using `<require>` is recommended for small number of required files/folders, and they are specified comma-separated. Using `<requirelist>`\nis recommended when the number of required files/folders is large. In this case they are specified in a separate ASCII file, one file/folder per line.\nBoth `<require>` and `<requirelist>` can be simultaneously used.  \n\nOnce the parallel mode XML configuration file is defined the user should use the tools `coeman-par-[local | ssh | sge]` to execute them. When running in\nparallel mode, commands are executed in a different execution folder and possibly in a more than one computer. For each command, the required data is\ncopied/linked from the location where the pycoeman tool is launched to the remote execution folders. After a successful execution of the commands, the\nfiles listed under the tag `<output>` are copied back to the location where the pycoeman tool was launched. \n\nFor data availability the execution model is share-nothing, i.e., the data indicated by `<require>` and `<requirelist>` is not shared between different\ncommands execution. Hence, in each command `<require>` and `<requirelist>` must indicate ALL the required data. This is different than in the sequential\ncommands execution where the required data from a *command A* can be shared with the other commands since they are all executed in the same execution folder.\nIn the following example, *listimage.list* needs to be specified as *<requirelist>* for both *Executable1* and *Executable2* command.\n```\n<ParCommands>\n  <Component>\n    <id>Executable1</id>\n    <requirelist>listimages.list</requirelist>\n    <require>ParallelConfig/0_Config.xml</require>\n    <command>Executable1 *jpg 0_Config.xml -o output1</command>\n    <output>output1</output>\n  </Component>\n  <Component>\n    <id>Executable1</id>\n    <requirelist>listimages.list</requirelist>\n    <require>ParallelConfig/1_Config.xml</require>\n    <command>Executable1 *jpg 1_Config.xml -o output2</command>\n    <output>output2</output>\n  </Component>\n</ParCommands>\n```\n\n### Remote execution\n\n\nThe tools either with the `-ssh` or `-sge` suffix are used to run commands at remote hosts. In addition to the XML configuration file, the user needs\nto specify the hosts XML file. The host XML file has a `<Host>` XML element per each host and five nested XML elements: the `<name>` to define host\nname, `<user>` user name at the remote host, `<setenv>` to set environment before each command execution at the remote host, `<numcommands>` to\ndefine the number of commands executed in simultaneously, and `<exedir>` specifies the root directory for each command's execution directory\n(each command will then use `<exedir>/<commandId>` as execution directory). An example of the hosts XML file follows:\n\n```\n<Hosts>\n  <Host>\n    <name> localhost </name>\n    <user> oscarr </user>\n    <setenv> /home/oscarr/.bashrc </setenv>\n    <numcommands> 4 </numcommands>\n    <exedir> /home/oscarr/test_remote_ssh </exedir>\n  </Host>\n</Hosts>\n```\n\n**IMPORTANT:**\n* All the required data is sent to the remote nodes using SCP, therefore, the host name must be a valid ssh-reachable host name. It is assumed that\npassword-less ssh connections are possible with all the involved hosts. So, before running `coeman-par-ssh` make sure this is the case. To set password-less\nconnections with remote hosts use SSH keys: generate a key locally with `ssh-keygen` and add the local public key to the remote machine with `ssh-copy-id <remotehost>`.\n* It is assumed that pycoeman and all software required by each commands is installed on all remote hosts.\n* The file specified by `<setenv>` is used to load the environment at the remote hosts. Hence, the user should make sure all the dependencies, including\n*pycoeman* are loaded through `<setenv>`. The same holds for environment variables.\n\n#### SGE clusters\n\nThe tools with the suffix `-sge` run commands in clusters with Sun Grid Engine (SGE) queuing system. SGE clusters should have all a shared folder accessable on all the nodes. Having all nodes simultaneously reading and writing to the shared storage is discouraged. Hence, for performance reasons the user should\ncopy the input data from the shared storage to the node's local storage and use a local directory to store command's outputs.\n\nThe *setenv* file and the XML configuration file should be placed at the shared folder. The output of the tools with `-sge` suffix is a submission script.\nThe user should run it to submit the different jobs to a SGE queuing system. It is assumed that the software locations are shared between all the nodes\nand that the setenv file will set the environment properly in all the nodes.\n\n### Monitoring\n\nFor both sequential and parallel commands, during the execution of each command of the specified in the XML configuration file, the CPU and memory and usage of the involved processes are monitored (child processes from any of the executed commands are also considered). There is also monitoring of the disk usage (free vs. used file system storage of the data directory). Monitoring files are created in the execution folder. Concretely a .mon file, a .mon.disk and a .log file. The first one contains CPU/MEM usage monitoring, the second one contains disk usage monitoring and the third one is the log produced by the executed command. To get statistics of CPU and memory usage use the tool `coeman-mon-stats`, to plot the CPU and memory usage use the tool`coeman-mon-plot-cpu-mem`, and to plot the disk usage use the tool `coeman-mon-plot-disk`.\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/NLeSC/pycoeman", "keywords": "", "license": "Apache License 2.0", "maintainer": "", "maintainer_email": "", "name": "pycoeman", "package_url": "https://pypi.org/project/pycoeman/", "platform": "", "project_url": "https://pypi.org/project/pycoeman/", "project_urls": {"Homepage": "https://github.com/NLeSC/pycoeman"}, "release_url": "https://pypi.org/project/pycoeman/1.1.1/", "requires_dist": null, "requires_python": "", "summary": "", "version": "1.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            **This repository is currently not maintained. We welcome people to fork this repository for further development and maintenance.** <br><br><br># pycoeman<br><br>[![Build Status](https://travis-ci.org/NLeSC/pycoeman.svg?branch=master)](https://travis-ci.org/NLeSC/pycoeman)<br>[![Codacy Badge](https://api.codacy.com/project/badge/Grade/41716b834df24626a8cce742ac068fce)](https://www.codacy.com/app/omrubi/pycoeman?utm_source=github.com&amp;amp;utm_medium=referral&amp;amp;utm_content=NLeSC/pycoeman&amp;amp;utm_campaign=Badge_Grade)<br>[![DOI](https://zenodo.org/badge/22553/NLeSC/pycoeman.svg)](https://zenodo.org/badge/latestdoi/22553/NLeSC/pycoeman)<br><br>Python Commands Execution Manager<br><br>pycoeman is a Python toolkit for executing command-line commands. It allows the execution of:<br><br>- Sequential commands: this is a chain of command-line commands which will be executed one after the other. In other words, this is a set of commands that you would traditionally execute in a Bash script. Normally there are IO dependencies between commands (one command requires the output from one or previous ones).<br><br>- Parallel commands: this is a set of command-line commands which are executed in parallel. In other words, this is a set of commands that you would traditionally execute in a Bash script with all the commands as background jobs (with the &amp; at the end). There cannot be IO dependencies between commands. This is can be useful for pleasingly parallel solutions, i.e. tools which are single-core at programming level but can be parallelized at data level and usually require some final merging process.<br><br>pycoeman adds CPU/MEM/disk monitoring during the execution of the commands and it allows to create clean execution environments for easier management of your executions (the commands will be executed in different folders separated from where the input data is). pycoeman has tools to run both sequential and parallel commands locally (in the local computer), and also to run parallel commands in a set of remote hosts accessible via SSH as well as in SGE clusters (computer clusters with Sun Grid Engine batch-queuing system). pycoeman is configured using XML files.<br><br>pycoeman is used by pymicmac (https://github.com/ImproPhoto/pymicmac)<br><br>## Installation<br><br>For now pycoeman only works in Linux systems. It requires Python 3.5 and it is installed using pip.<br>If Python 3.5 is not the default Python on user's system, the user should use **pip3** to install *pycoeman*.<br>To avoid issues with dependencies and versions, and indirectly permissions, the use should use [**virtualenv**](https://virtualenv.pypa.io/en/stable/).<br><br>* Installing system package dependencies<br>```<br>sudo apt-get install freetype libssl-dev libffi-dev<br>```<br><br>* Installing *pycoeman* from sources:<br>```<br>git clone https://github.com/NLeSC/pycoeman<br>cd pycoeman<br><br>#If virtualenv is not installed:<br>sudo apt-get install virtualenv<br><br>virtualenv pycoeman_env<br>. pycoeman_env/bin/activate<br><br>pip3 -r requirements.txt install .<br>```<br><br>* Installing *pycoeman* package:<br>```<br>#If virtualenv is not installed:<br>sudo apt-get install virtualenv<br><br>virtualenv pycoeman_env<br>. pycoeman_env/bin/activate<br><br>pip3 -r requirements.txt install pycoeman<br>```<br><br>The installation makes the following command-line tools available: `coeman-seq-local`, `coeman-par-local`, `coeman-par-ssh` and `coeman-par-sge`<br><br>## Deployment<br><br>With *Pycoeman* user's commands are executed either in *sequential mode* or *parallel mode*. The commands, their arguments and the required files/directories<br>are listed in a XML configuration file. Independent from the execution mode, the commands are either executed at the user's computer (commands with *-local*<br>suffix) or distributed among a set of machines (commands with either *-ssh* or *-sge* suffix). The ones with *-ssh* suffix use **ssh** to run commands at the<br>remote hosts. The ones with *-sge* suffix submit the commands as jobs to a Sun Grid Engine queuing system.<br><br>### Sequential mode<br><br>The sequential commands XML configuration file must contain a root tag `&lt;SeqCommands&gt;` and for each command a XML element `&lt;Component&gt;` is added with two<br>mandatory nested XML elements, `&lt;id&gt;` and `&lt;command&gt;`. Dependencies on files/directories should be specified with `&lt;require&gt;` or `&lt;requirelist&gt;` tags. (Soft)<br>links are created in the execution folder for the specified files/folders. Using `&lt;require&gt;` is recommended for small number of required files/folders, and<br>they are specified comma-separated. Using `&lt;requirelist&gt;` is recommended when the number of required files/folders is large. In this case they are specified in<br>a separate ASCII file, one file/folder per line. Both `&lt;require&gt;` and `&lt;requirelist&gt;` can be simultaneously used.  <br><br>Once the sequential mode XML configuration file is defined the user should use the tools `coeman-seq-[local | ssh | sge]` to execute them. For<br>local executions, it is important to notice that since all the commands are executed in the same execution folder file/folders already linked<br>for one of the commands (using `&lt;require&gt;` or `&lt;requirelist&gt;`) they don't need to be linked again. In the following example, *inputfile1* and<br>*inputfile2* are linked for *Executable1* and re-used for *Executable2*.<br>```<br>&lt;SeqCommands&gt;<br>  &lt;Component&gt;<br>    &lt;id&gt; Executable1 &lt;/id&gt;<br>    &lt;requirelist&gt;listimages.txt&lt;/requirelist&gt;<br>    &lt;require&gt; inputfile1 inputfile2&lt;/require&gt;<br>    &lt;command&gt; Executable1 *jpg inputfile1 inputfile2 -o outputfile1 &lt;/command&gt;<br>  &lt;/Component&gt;<br>  &lt;Component&gt;<br>    &lt;id&gt; Executable2 &lt;/id&gt;<br>    &lt;command&gt; Executable2 inputfile1 outputfile1 &lt;/command&gt;<br>  &lt;/Component&gt;<br>&lt;/SeqCommands&gt;<br>```<br><br>### Parallel mode<br><br>The parallel commands XML configuration file must contain a root tag `&lt;ParCommands&gt;` and for each command a XML element `&lt;Component&gt;` is added with three<br>mandatory nested XML elements, `&lt;id&gt;`, `&lt;command&gt;` and `&lt;output&gt;`. The latter determines which files and directories should be collected as output. Dependencies<br>on files/directories should be specified with `&lt;require&gt;` or `&lt;requirelist&gt;` tags. (Soft) links are created in the execution folder for the specified<br>files/folders. Using `&lt;require&gt;` is recommended for small number of required files/folders, and they are specified comma-separated. Using `&lt;requirelist&gt;`<br>is recommended when the number of required files/folders is large. In this case they are specified in a separate ASCII file, one file/folder per line.<br>Both `&lt;require&gt;` and `&lt;requirelist&gt;` can be simultaneously used.  <br><br>Once the parallel mode XML configuration file is defined the user should use the tools `coeman-par-[local | ssh | sge]` to execute them. When running in<br>parallel mode, commands are executed in a different execution folder and possibly in a more than one computer. For each command, the required data is<br>copied/linked from the location where the pycoeman tool is launched to the remote execution folders. After a successful execution of the commands, the<br>files listed under the tag `&lt;output&gt;` are copied back to the location where the pycoeman tool was launched. <br><br>For data availability the execution model is share-nothing, i.e., the data indicated by `&lt;require&gt;` and `&lt;requirelist&gt;` is not shared between different<br>commands execution. Hence, in each command `&lt;require&gt;` and `&lt;requirelist&gt;` must indicate ALL the required data. This is different than in the sequential<br>commands execution where the required data from a *command A* can be shared with the other commands since they are all executed in the same execution folder.<br>In the following example, *listimage.list* needs to be specified as *&lt;requirelist&gt;* for both *Executable1* and *Executable2* command.<br>```<br>&lt;ParCommands&gt;<br>  &lt;Component&gt;<br>    &lt;id&gt;Executable1&lt;/id&gt;<br>    &lt;requirelist&gt;listimages.list&lt;/requirelist&gt;<br>    &lt;require&gt;ParallelConfig/0_Config.xml&lt;/require&gt;<br>    &lt;command&gt;Executable1 *jpg 0_Config.xml -o output1&lt;/command&gt;<br>    &lt;output&gt;output1&lt;/output&gt;<br>  &lt;/Component&gt;<br>  &lt;Component&gt;<br>    &lt;id&gt;Executable1&lt;/id&gt;<br>    &lt;requirelist&gt;listimages.list&lt;/requirelist&gt;<br>    &lt;require&gt;ParallelConfig/1_Config.xml&lt;/require&gt;<br>    &lt;command&gt;Executable1 *jpg 1_Config.xml -o output2&lt;/command&gt;<br>    &lt;output&gt;output2&lt;/output&gt;<br>  &lt;/Component&gt;<br>&lt;/ParCommands&gt;<br>```<br><br>### Remote execution<br><br><br>The tools either with the `-ssh` or `-sge` suffix are used to run commands at remote hosts. In addition to the XML configuration file, the user needs<br>to specify the hosts XML file. The host XML file has a `&lt;Host&gt;` XML element per each host and five nested XML elements: the `&lt;name&gt;` to define host<br>name, `&lt;user&gt;` user name at the remote host, `&lt;setenv&gt;` to set environment before each command execution at the remote host, `&lt;numcommands&gt;` to<br>define the number of commands executed in simultaneously, and `&lt;exedir&gt;` specifies the root directory for each command's execution directory<br>(each command will then use `&lt;exedir&gt;/&lt;commandId&gt;` as execution directory). An example of the hosts XML file follows:<br><br>```<br>&lt;Hosts&gt;<br>  &lt;Host&gt;<br>    &lt;name&gt; localhost &lt;/name&gt;<br>    &lt;user&gt; oscarr &lt;/user&gt;<br>    &lt;setenv&gt; /home/oscarr/.bashrc &lt;/setenv&gt;<br>    &lt;numcommands&gt; 4 &lt;/numcommands&gt;<br>    &lt;exedir&gt; /home/oscarr/test_remote_ssh &lt;/exedir&gt;<br>  &lt;/Host&gt;<br>&lt;/Hosts&gt;<br>```<br><br>**IMPORTANT:**<br>* All the required data is sent to the remote nodes using SCP, therefore, the host name must be a valid ssh-reachable host name. It is assumed that<br>password-less ssh connections are possible with all the involved hosts. So, before running `coeman-par-ssh` make sure this is the case. To set password-less<br>connections with remote hosts use SSH keys: generate a key locally with `ssh-keygen` and add the local public key to the remote machine with `ssh-copy-id &lt;remotehost&gt;`.<br>* It is assumed that pycoeman and all software required by each commands is installed on all remote hosts.<br>* The file specified by `&lt;setenv&gt;` is used to load the environment at the remote hosts. Hence, the user should make sure all the dependencies, including<br>*pycoeman* are loaded through `&lt;setenv&gt;`. The same holds for environment variables.<br><br>#### SGE clusters<br><br>The tools with the suffix `-sge` run commands in clusters with Sun Grid Engine (SGE) queuing system. SGE clusters should have all a shared folder accessable on all the nodes. Having all nodes simultaneously reading and writing to the shared storage is discouraged. Hence, for performance reasons the user should<br>copy the input data from the shared storage to the node's local storage and use a local directory to store command's outputs.<br><br>The *setenv* file and the XML configuration file should be placed at the shared folder. The output of the tools with `-sge` suffix is a submission script.<br>The user should run it to submit the different jobs to a SGE queuing system. It is assumed that the software locations are shared between all the nodes<br>and that the setenv file will set the environment properly in all the nodes.<br><br>### Monitoring<br><br>For both sequential and parallel commands, during the execution of each command of the specified in the XML configuration file, the CPU and memory and usage of the involved processes are monitored (child processes from any of the executed commands are also considered). There is also monitoring of the disk usage (free vs. used file system storage of the data directory). Monitoring files are created in the execution folder. Concretely a .mon file, a .mon.disk and a .log file. The first one contains CPU/MEM usage monitoring, the second one contains disk usage monitoring and the third one is the log produced by the executed command. To get statistics of CPU and memory usage use the tool `coeman-mon-stats`, to plot the CPU and memory usage use the tool`coeman-mon-plot-cpu-mem`, and to plot the disk usage use the tool `coeman-mon-plot-disk`.<br>\n          </div>"}, "last_serial": 3331778, "releases": {"1.1.0": [{"comment_text": "", "digests": {"md5": "aa2c0eea25151a006d6451968790322c", "sha256": "c9a63f0a46ce6e3484df715e71cf93671f0ac4f4d5a3c7b1e8d46abad23416cc"}, "downloads": -1, "filename": "pycoeman-1.1.0.tar.gz", "has_sig": false, "md5_digest": "aa2c0eea25151a006d6451968790322c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14743, "upload_time": "2017-11-14T13:38:03", "upload_time_iso_8601": "2017-11-14T13:38:03.063601Z", "url": "https://files.pythonhosted.org/packages/06/19/e22339ede0a27aa5b9940a194e159ca8d5a94b34c8535938b2fe1932bbd4/pycoeman-1.1.0.tar.gz", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "c8a6ecd1a5989bc7f9aedde5bd6a1b37", "sha256": "18bfcb4a0f98547b4ddbf774bbe5cd371d41b70c52f387176e8e2f98a4e5977c"}, "downloads": -1, "filename": "pycoeman-1.1.1.tar.gz", "has_sig": false, "md5_digest": "c8a6ecd1a5989bc7f9aedde5bd6a1b37", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18495, "upload_time": "2017-11-14T14:19:48", "upload_time_iso_8601": "2017-11-14T14:19:48.780172Z", "url": "https://files.pythonhosted.org/packages/5d/d8/392aa7cf522503cd9e51e3b447f52952c5fdc49e69b8c50b47506f69099d/pycoeman-1.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c8a6ecd1a5989bc7f9aedde5bd6a1b37", "sha256": "18bfcb4a0f98547b4ddbf774bbe5cd371d41b70c52f387176e8e2f98a4e5977c"}, "downloads": -1, "filename": "pycoeman-1.1.1.tar.gz", "has_sig": false, "md5_digest": "c8a6ecd1a5989bc7f9aedde5bd6a1b37", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18495, "upload_time": "2017-11-14T14:19:48", "upload_time_iso_8601": "2017-11-14T14:19:48.780172Z", "url": "https://files.pythonhosted.org/packages/5d/d8/392aa7cf522503cd9e51e3b447f52952c5fdc49e69b8c50b47506f69099d/pycoeman-1.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:08:15 2020"}