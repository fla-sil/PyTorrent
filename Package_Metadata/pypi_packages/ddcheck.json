{"info": {"author": "Jiri Barton", "author_email": "jbar@tele3.cz", "bugtrack_url": null, "classifiers": [], "description": "=======\nddcheck\n=======\n\nCheck URLs and manage the respective records in DynDNS.\n\n\nDescription\n===========\n\n``ddcheck`` accepts a list of healthckeck URLs, resolve them to IPs and makes\nHTTP requests directly to the IPs. When given IP is recognized as down, it will\nremove the record from DynDNS\n\nFeatures\n--------\n\n* IPv4 and IPv6 support (A and AAAA records in DNS)\n* Traversing over CNAMEs to target A/AAAA records\n* IP is marked as failed when it either timeouts (configurable in seconds) or\n  returns defined HTTP code (for example 500, by default turned off)\n* Dry run mode: Will not change the DynDNS recods. Outputs only ``curl`` commands\n  instead.\n* Will not delete IPs from DynDNS, when all the IPs in the dns record fail.\n\nInstallation\n============\n\n``pip install 'git+https://github.com/whiskybar/ddcheck.git#egg=ddcheck'``\n\n\nUsage\n=====\n\n\nCLI\n---\n\nDynDNS credetials can be defined either by env variables, or as parameters.\n\n::\n\n    # ddcheck --help\n\n    usage: ddcheck [-h] [-d] [-e ERROR_CODES] [-t TIMEOUT] [-D]\n                   [--dynect-customer DYNECT_CUSTOMER] [--dynect-user DYNECT_USER]\n                   [--dynect-password DYNECT_PASSWORD]\n                   URL [URL ...]\n\n    Run a ddcheck.\n\n    positional arguments:\n      URL                   URL to check\n\n    optional arguments:\n      -h, --help            show this help message and exit\n      -d, --debug           Debug logging on\n      -e ERROR_CODES, --error-codes ERROR_CODES\n                            HTTP codes considered as non-OK\n      -t TIMEOUT, --timeout TIMEOUT\n                            URL timeout\n      -D, --dry-run         Do not really update the dyndns. Just print records to\n                            delete.\n      --dynect-customer DYNECT_CUSTOMER\n                            Customer name in DynEct (defaults to\n                            DYNECT_CUSTOMER_NAME env variable)\n      --dynect-user DYNECT_USER\n                            Username in DynEct (defaults to DYNECT_USER_NAME env\n                            variable)\n      --dynect-password DYNECT_PASSWORD\n                            Password in DynEct (defaults to DYNECT_PASSWORD env\n                            variable)\n\n\n\nExample\n~~~~~~~\n\n::\n\n    export DYNECT_PASSWORD=aaa\n    export DYNECT_USER_NAME=bbb\n    export DYNECT_CUSTOMER_NAME=ccc\n    ddcheck -e 500 --debug --dry-run http://root.example1.com/health/ http://cname.example2.com/check/\n\nPython\n------\n\nExample\n~~~~~~~", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/whiskybar/ddcheck", "keywords": null, "license": "BSD", "maintainer": null, "maintainer_email": null, "name": "ddcheck", "package_url": "https://pypi.org/project/ddcheck/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/ddcheck/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/whiskybar/ddcheck"}, "release_url": "https://pypi.org/project/ddcheck/0.0.1/", "requires_dist": null, "requires_python": null, "summary": "Check URLs and manage the respective records in DynDNS.", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Check URLs and manage the respective records in DynDNS.</p>\n<div id=\"description\">\n<h2>Description</h2>\n<p><tt>ddcheck</tt> accepts a list of healthckeck URLs, resolve them to IPs and makes\nHTTP requests directly to the IPs. When given IP is recognized as down, it will\nremove the record from DynDNS</p>\n<div id=\"features\">\n<h3>Features</h3>\n<ul>\n<li>IPv4 and IPv6 support (A and AAAA records in DNS)</li>\n<li>Traversing over CNAMEs to target A/AAAA records</li>\n<li>IP is marked as failed when it either timeouts (configurable in seconds) or\nreturns defined HTTP code (for example 500, by default turned off)</li>\n<li>Dry run mode: Will not change the DynDNS recods. Outputs only <tt>curl</tt> commands\ninstead.</li>\n<li>Will not delete IPs from DynDNS, when all the IPs in the dns record fail.</li>\n</ul>\n</div>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p><tt>pip install <span class=\"pre\">'git+https://github.com/whiskybar/ddcheck.git#egg=ddcheck'</span></tt></p>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<div id=\"cli\">\n<h3>CLI</h3>\n<p>DynDNS credetials can be defined either by env variables, or as parameters.</p>\n<pre># ddcheck --help\n\nusage: ddcheck [-h] [-d] [-e ERROR_CODES] [-t TIMEOUT] [-D]\n               [--dynect-customer DYNECT_CUSTOMER] [--dynect-user DYNECT_USER]\n               [--dynect-password DYNECT_PASSWORD]\n               URL [URL ...]\n\nRun a ddcheck.\n\npositional arguments:\n  URL                   URL to check\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -d, --debug           Debug logging on\n  -e ERROR_CODES, --error-codes ERROR_CODES\n                        HTTP codes considered as non-OK\n  -t TIMEOUT, --timeout TIMEOUT\n                        URL timeout\n  -D, --dry-run         Do not really update the dyndns. Just print records to\n                        delete.\n  --dynect-customer DYNECT_CUSTOMER\n                        Customer name in DynEct (defaults to\n                        DYNECT_CUSTOMER_NAME env variable)\n  --dynect-user DYNECT_USER\n                        Username in DynEct (defaults to DYNECT_USER_NAME env\n                        variable)\n  --dynect-password DYNECT_PASSWORD\n                        Password in DynEct (defaults to DYNECT_PASSWORD env\n                        variable)\n</pre>\n<div id=\"example\">\n<h4>Example</h4>\n<pre>export DYNECT_PASSWORD=aaa\nexport DYNECT_USER_NAME=bbb\nexport DYNECT_CUSTOMER_NAME=ccc\nddcheck -e 500 --debug --dry-run http://root.example1.com/health/ http://cname.example2.com/check/\n</pre>\n</div>\n</div>\n<div id=\"python\">\n<h3>Python</h3>\n<h3 id=\"id1\"><span class=\"section-subtitle\">Example</span></h3>\n</div>\n</div>\n\n          </div>"}, "last_serial": 976146, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "08939a63220e8d97446da9181b3d43dd", "sha256": "3b214f3dc0d435ba109fa3ad207d37a646ac9260e9effd7987bda4316f110e4d"}, "downloads": -1, "filename": "ddcheck-0.0.1.tar.gz", "has_sig": false, "md5_digest": "08939a63220e8d97446da9181b3d43dd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6024, "upload_time": "2014-01-21T15:09:47", "upload_time_iso_8601": "2014-01-21T15:09:47.200397Z", "url": "https://files.pythonhosted.org/packages/ac/d2/b0fc4d2f50fd4cbc35572fe3cf2314b50fb71c69ee0390e16e5869699474/ddcheck-0.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "08939a63220e8d97446da9181b3d43dd", "sha256": "3b214f3dc0d435ba109fa3ad207d37a646ac9260e9effd7987bda4316f110e4d"}, "downloads": -1, "filename": "ddcheck-0.0.1.tar.gz", "has_sig": false, "md5_digest": "08939a63220e8d97446da9181b3d43dd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6024, "upload_time": "2014-01-21T15:09:47", "upload_time_iso_8601": "2014-01-21T15:09:47.200397Z", "url": "https://files.pythonhosted.org/packages/ac/d2/b0fc4d2f50fd4cbc35572fe3cf2314b50fb71c69ee0390e16e5869699474/ddcheck-0.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:39:44 2020"}