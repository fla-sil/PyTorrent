{"info": {"author": "Chris Drackett", "author_email": "chris@tiltshiftstudio.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Web Environment", "Framework :: Django", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python"], "description": "Timeline (event streams)\n========================\n\nThere are two parts to using event streams.  The first is to declare an Event,\nit looks like this::\n\n    from django.contrib.auth.models import User\n\n    from timeline.base import EventType\n    from yourapp.library.models import Item\n\n\n    class AddedToLibrary(EventType):\n        slug = \"added-to-library\"\n        context_shape = {\n            \"user\": User,\n            \"item\": Item,\n        }\n        queryable_by = [\"user\", \"item\"]\n\nAnd then there is querying, all querying is encapsulated in the\n``timeline.base.Stream`` class.  It is used like so::\n\n    Stream(request.user)\n\nwill return a ``Stream`` for all of the events for the ``request.user.pk`` User.\nIt can take any number of positional arguments and it will combine their streams.\n\nIt also takes a number of keyword arguments.  ``event_type`` which will return\nonly ``Events`` for a given slug.  ``limit`` a number saying how many\n``Events`` should be included, defaults to 20.  ``cluster`` a boolean saying\nwhether the data returned should be clustered, if it is than it yields a list\nof ``Events``, rather than discrete ``Events``.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/tiltshift/django-timeline.git", "keywords": "", "license": "UNKNOWN", "maintainer": "", "maintainer_email": "", "name": "django-timeline", "package_url": "https://pypi.org/project/django-timeline/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/django-timeline/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/tiltshift/django-timeline.git"}, "release_url": "https://pypi.org/project/django-timeline/0.5/", "requires_dist": null, "requires_python": null, "summary": "a Django timeline (activity stream) using redis", "version": "0.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>There are two parts to using event streams.  The first is to declare an Event,\nit looks like this:</p>\n<pre>from django.contrib.auth.models import User\n\nfrom timeline.base import EventType\nfrom yourapp.library.models import Item\n\n\nclass AddedToLibrary(EventType):\n    slug = \"added-to-library\"\n    context_shape = {\n        \"user\": User,\n        \"item\": Item,\n    }\n    queryable_by = [\"user\", \"item\"]\n</pre>\n<p>And then there is querying, all querying is encapsulated in the\n<tt>timeline.base.Stream</tt> class.  It is used like so:</p>\n<pre>Stream(request.user)\n</pre>\n<p>will return a <tt>Stream</tt> for all of the events for the <tt>request.user.pk</tt> User.\nIt can take any number of positional arguments and it will combine their streams.</p>\n<p>It also takes a number of keyword arguments.  <tt>event_type</tt> which will return\nonly <tt>Events</tt> for a given slug.  <tt>limit</tt> a number saying how many\n<tt>Events</tt> should be included, defaults to 20.  <tt>cluster</tt> a boolean saying\nwhether the data returned should be clustered, if it is than it yields a list\nof <tt>Events</tt>, rather than discrete <tt>Events</tt>.</p>\n\n          </div>"}, "last_serial": 790882, "releases": {"0.5": [{"comment_text": "", "digests": {"md5": "ed1f767ef2a7ccb97bfab95aef4fd667", "sha256": "0f06dd38ddba4c18f6a0a6494cf50c438552888c3a44ae3e445a56999ba939e0"}, "downloads": -1, "filename": "django-timeline-0.5.tar.gz", "has_sig": false, "md5_digest": "ed1f767ef2a7ccb97bfab95aef4fd667", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7158, "upload_time": "2012-07-28T20:31:36", "upload_time_iso_8601": "2012-07-28T20:31:36.095809Z", "url": "https://files.pythonhosted.org/packages/4d/9d/45c078a6956f8907b1f76264bc1cb8221d46a5a2e779b30fd998b5f0cba9/django-timeline-0.5.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ed1f767ef2a7ccb97bfab95aef4fd667", "sha256": "0f06dd38ddba4c18f6a0a6494cf50c438552888c3a44ae3e445a56999ba939e0"}, "downloads": -1, "filename": "django-timeline-0.5.tar.gz", "has_sig": false, "md5_digest": "ed1f767ef2a7ccb97bfab95aef4fd667", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7158, "upload_time": "2012-07-28T20:31:36", "upload_time_iso_8601": "2012-07-28T20:31:36.095809Z", "url": "https://files.pythonhosted.org/packages/4d/9d/45c078a6956f8907b1f76264bc1cb8221d46a5a2e779b30fd998b5f0cba9/django-timeline-0.5.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:52:28 2020"}