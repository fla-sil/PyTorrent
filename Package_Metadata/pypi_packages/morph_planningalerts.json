{"info": {"author": "Christopher Nilsson", "author_email": "christopher@otherchirps.net", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: Mozilla Public License 2.0 (MPL 2.0)", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.2", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Software Development :: Libraries"], "description": "Planningalerts Data Library\n===========================\n\n.. image:: https://img.shields.io/bitbucket/pipelines/otherchirps/morph_planningalerts.svg\n  :target: https://bitbucket.org/otherchirps/morph_planningalerts/addon/pipelines/home#!/results/branch/master/page/1\n\nAims to provide a simple, standardised perisistance layer for `PlanningAlerts <https://www.planningalerts.org.au>`_ records.\n\nMainly intended to use when writing PlanningAlerts scrapers on `morph.io <https://morph.io>`_.  Morph python environments already \nhave nice libraries, like `scraperwiki <https://github.com/openaustralia/scraperwiki-python/tree/morph_defaults>`_ installed, but those don't enforce the data `requirements <https://www.planningalerts.org.au/how_to_write_a_scraper>`_ \nexpected by PlanningAlerts. This library attempts to do so.\n\n\nInstallation\n------------\n\nFrom source\n~~~~~~~~~~~\n\n``python setup.py install``\n\npip\n~~~\n\n``pip install morph_planningalerts``\n\nUsage\n-----\n\n.. code-block:: python\n\n   from morph_planningalerts import DevelopmentApplication, MorphDatabase\n\n   # Make sure the database file exists. If it does, this won't do anything.\n   MorphDatabase.init()\n   \n   # Time passes... data is scraped...\n   new_record = DevelopmentApplication.create(\n       council_reference='M123/456',\n       address='64 Zoo Lane',\n       description='this is the least info needed to prevent explosions',\n       info_url='http://detail_page_about_application',\n       comment_url='http://some_feedback_url'\n   )\n\n   # Or, if you only want to insert new records:\n   record, was_created = DevelopmentApplication.create_or_get(\n       council_reference=...\n   )\n\nFor more examples, check out the docs on `querying with the Peewee ORM <http://peewee.readthedocs.org/en/latest/peewee/querying.html>`_.\n\nSource code\n-----------\n\nYou can get the code here:\n\nhttps://bitbucket.org/otherchirps/morph_planningalerts\n\n\nTesting\n-------\n \n`tox <https://pypi.python.org/pypi/tox>`_ is being used to run the tests across\npython 2.7 & 3.x. \n\nTo bootstrap your test environment, the easiest way is you \nuse the `pip <https://pip.pypa.io/en/latest/installing.htm>`_ requirements file::\n\n    pip install -r requirements.txt\n\nThen you can simply run::\n\n    tox", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://bitbucket.org/otherchirps/morph_planningalerts", "keywords": "openaustralia planningalerts morph.io", "license": "http://www.mozilla.org/MPL/2.0/", "maintainer": "", "maintainer_email": "", "name": "morph_planningalerts", "package_url": "https://pypi.org/project/morph_planningalerts/", "platform": "", "project_url": "https://pypi.org/project/morph_planningalerts/", "project_urls": {"Homepage": "https://bitbucket.org/otherchirps/morph_planningalerts"}, "release_url": "https://pypi.org/project/morph_planningalerts/1.0.1/", "requires_dist": null, "requires_python": "", "summary": "planningalerts morph.io data layer Python client package", "version": "1.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://bitbucket.org/otherchirps/morph_planningalerts/addon/pipelines/home#!/results/branch/master/page/1\" rel=\"nofollow\"><img alt=\"https://img.shields.io/bitbucket/pipelines/otherchirps/morph_planningalerts.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c5928890f6456e99874f880286b5bd1952ffb6db/68747470733a2f2f696d672e736869656c64732e696f2f6269746275636b65742f706970656c696e65732f6f746865726368697270732f6d6f7270685f706c616e6e696e67616c657274732e737667\"></a>\n<p>Aims to provide a simple, standardised perisistance layer for <a href=\"https://www.planningalerts.org.au\" rel=\"nofollow\">PlanningAlerts</a> records.</p>\n<p>Mainly intended to use when writing PlanningAlerts scrapers on <a href=\"https://morph.io\" rel=\"nofollow\">morph.io</a>.  Morph python environments already\nhave nice libraries, like <a href=\"https://github.com/openaustralia/scraperwiki-python/tree/morph_defaults\" rel=\"nofollow\">scraperwiki</a> installed, but those don\u2019t enforce the data <a href=\"https://www.planningalerts.org.au/how_to_write_a_scraper\" rel=\"nofollow\">requirements</a>\nexpected by PlanningAlerts. This library attempts to do so.</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<div id=\"from-source\">\n<h3>From source</h3>\n<p><tt>python setup.py install</tt></p>\n</div>\n<div id=\"pip\">\n<h3>pip</h3>\n<p><tt>pip install morph_planningalerts</tt></p>\n</div>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">morph_planningalerts</span> <span class=\"kn\">import</span> <span class=\"n\">DevelopmentApplication</span><span class=\"p\">,</span> <span class=\"n\">MorphDatabase</span>\n\n<span class=\"c1\"># Make sure the database file exists. If it does, this won't do anything.</span>\n<span class=\"n\">MorphDatabase</span><span class=\"o\">.</span><span class=\"n\">init</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Time passes... data is scraped...</span>\n<span class=\"n\">new_record</span> <span class=\"o\">=</span> <span class=\"n\">DevelopmentApplication</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span>\n    <span class=\"n\">council_reference</span><span class=\"o\">=</span><span class=\"s1\">'M123/456'</span><span class=\"p\">,</span>\n    <span class=\"n\">address</span><span class=\"o\">=</span><span class=\"s1\">'64 Zoo Lane'</span><span class=\"p\">,</span>\n    <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"s1\">'this is the least info needed to prevent explosions'</span><span class=\"p\">,</span>\n    <span class=\"n\">info_url</span><span class=\"o\">=</span><span class=\"s1\">'http://detail_page_about_application'</span><span class=\"p\">,</span>\n    <span class=\"n\">comment_url</span><span class=\"o\">=</span><span class=\"s1\">'http://some_feedback_url'</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\"># Or, if you only want to insert new records:</span>\n<span class=\"n\">record</span><span class=\"p\">,</span> <span class=\"n\">was_created</span> <span class=\"o\">=</span> <span class=\"n\">DevelopmentApplication</span><span class=\"o\">.</span><span class=\"n\">create_or_get</span><span class=\"p\">(</span>\n    <span class=\"n\">council_reference</span><span class=\"o\">=...</span>\n<span class=\"p\">)</span>\n</pre>\n<p>For more examples, check out the docs on <a href=\"http://peewee.readthedocs.org/en/latest/peewee/querying.html\" rel=\"nofollow\">querying with the Peewee ORM</a>.</p>\n</div>\n<div id=\"source-code\">\n<h2>Source code</h2>\n<p>You can get the code here:</p>\n<p><a href=\"https://bitbucket.org/otherchirps/morph_planningalerts\" rel=\"nofollow\">https://bitbucket.org/otherchirps/morph_planningalerts</a></p>\n</div>\n<div id=\"testing\">\n<h2>Testing</h2>\n<p><a href=\"https://pypi.python.org/pypi/tox\" rel=\"nofollow\">tox</a> is being used to run the tests across\npython 2.7 &amp; 3.x.</p>\n<p>To bootstrap your test environment, the easiest way is you\nuse the <a href=\"https://pip.pypa.io/en/latest/installing.htm\" rel=\"nofollow\">pip</a> requirements file:</p>\n<pre>pip install -r requirements.txt\n</pre>\n<p>Then you can simply run:</p>\n<pre>tox\n</pre>\n</div>\n\n          </div>"}, "last_serial": 4451447, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "d9d3f7c286677450c53e72bddc85dd88", "sha256": "cbb95259967dcf87357230870ef00da8c575ee057cb529fb81ffc963bb258b59"}, "downloads": -1, "filename": "morph_planningalerts-1.0.0.tar.gz", "has_sig": true, "md5_digest": "d9d3f7c286677450c53e72bddc85dd88", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3872, "upload_time": "2015-07-30T18:18:53", "upload_time_iso_8601": "2015-07-30T18:18:53.352361Z", "url": "https://files.pythonhosted.org/packages/08/d8/0728b66d2cf4aa5648b268911e18fee75960b0107e78d17604f477d69303/morph_planningalerts-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "6f6cf376a5cbbedf16534e92f8e84115", "sha256": "48353ad567b8898a0912d5840c5be7fcd23c31c2f1e5383880b73714a03f84cb"}, "downloads": -1, "filename": "morph_planningalerts-1.0.1.tar.gz", "has_sig": false, "md5_digest": "6f6cf376a5cbbedf16534e92f8e84115", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4098, "upload_time": "2018-11-05T04:03:55", "upload_time_iso_8601": "2018-11-05T04:03:55.449878Z", "url": "https://files.pythonhosted.org/packages/30/5c/6b455fa6fbfa0489144fad329eb68436b9ed8ce6a2bacee063f810e78828/morph_planningalerts-1.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "6f6cf376a5cbbedf16534e92f8e84115", "sha256": "48353ad567b8898a0912d5840c5be7fcd23c31c2f1e5383880b73714a03f84cb"}, "downloads": -1, "filename": "morph_planningalerts-1.0.1.tar.gz", "has_sig": false, "md5_digest": "6f6cf376a5cbbedf16534e92f8e84115", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4098, "upload_time": "2018-11-05T04:03:55", "upload_time_iso_8601": "2018-11-05T04:03:55.449878Z", "url": "https://files.pythonhosted.org/packages/30/5c/6b455fa6fbfa0489144fad329eb68436b9ed8ce6a2bacee063f810e78828/morph_planningalerts-1.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:51:45 2020"}