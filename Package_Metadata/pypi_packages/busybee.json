{"info": {"author": "Daniel H", "author_email": "not_provided@example.org", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# BusyBee \ud83d\udc1d\n\n - Simple, interactive multiprocessing for slow I/O and calculation in your notebook\n - Simple to use as a drop-in replacement for the standard `map` function\n - Prints the current progress and remaining time estimate\n - No external dependencies and 100% test coverage\n\nThe PyPI project page is here: https://pypi.org/project/busybee/\n\n[![CircleCI](https://circleci.com/gh/lambdapioneer/busybee.svg?style=svg)](https://circleci.com/gh/lambdapioneer/busybee)\n\n## Quick start\n\nInstall the BusyBee module via `pip` and use it as a replacement for your current `map` function. As BusyBee needs to know to total number of items the data must expose its length to `len()` calls. The best approach is to provide it as a `list`.\n\n**Install:**\n\n```bash\n$ pip3 install busybee\n```\n\n**Code:**\n\n```python\nimport busybee\nresult = busybee.map(func, data)\n```\n\n**Output:**\n\n```C\nBusyBee: Start processing 42 items with 8 processes...\nBusyBee:  1/42,  2.4% (avg: 3.2s cpu, rem: 16.5s)\nBusyBee: 15/42, 35.7% (avg: 2.4s cpu, rem: 8.1s)\nBusyBee: 21/42, 50.0% (avg: 2.5s cpu, rem: 6.5s)\nBusyBee: 24/42, 57.1% (avg: 2.6s cpu, rem: 5.8s)\nBusyBee: 34/42, 81.0% (avg: 2.5s cpu, rem: 2.5s)\nBusyBee: Finished processing 42 items in 16.1s (avg: 2.6s cpu)\n```\n\n## Advanced usage \ud83d\udc69\u200d\ud83d\udcbb \ud83d\udc68\u200d\ud83d\udcbb\n\nYou can configure the amount of cores to be used using the `processes` argument. For this you can either provide a number (e.g. 1, 8) or a simple formula such as `n/2` or `n-1`. The `n` refers to the logical number of CPU cores returned by the `multiprocessing` module.\n\nFurther, you can configure the output by providing a custom `stdout` sink and configuring how often you want to receive an update. You can do so by using the arguments `update_every_n_seconds` (default: 10) and `update_every_n_percent` (default: 50).\n\nIf you do not want any output, just set `quiet=False`.\n\n**Example:**\n\n\n```python\nimport busybee\nresult = busybee.map(\n    func, data\n    processes='n-1',\n    update_every_n_seconds=10,\n    update_every_n_percent=25,\n)\n```\n\n## Q&A \ud83e\udd14\n\n**Why did you built it? And why shouldn't I just use the `multiprocessing` module?**\n\nI started building BusyBee when I was working with a lot of I/O and pre-processing in Python Notebooks. Parallelizing these cells made it much faster, but it was often more involved than a one-line change. For instance, the worker pool needs manual clean-up and leaks a substantial amount of memory otherwise.\n\nAlso, it was hard to predict the remaining time and whether it was worth to avoid context switching or actually making some tea/coffee \u2615.\n\n**Is there more than the `map(func, data, ...)` function?**\n\nYes! While the `map` function is the most universal, there are more: The `filter(func, data, ...)` functions works similar to the regular `filter` function applied on lists. The `mk_dict(func, keys, ...)` function resembles the dictionary compression syntax `{k: func(k) for k in keys)`.\n\n**I want a different output!**\n\nI want to allow choosing from certain output styles. This is on my roadmap, but I do not have any certain date in mind. To maintain the simplicity I do not envision supporting custom output formatting. However, I am happy to be convinced otherwise.\n\n## Contribute \ud83d\udc4b\n\nAwesome that you are interested in improving this code! When contributing, please follow the following (common-sense) steps:\n\n - Create an issue before you write any code. This allows to guide you in the right direction.\n    - If you are after a simple 1-5 line fix, you might ignore this.\n - In the pull-request explain the high-level goal and your approach. That provides valuable context.\n - Convince others (and yourself) that the change is safe and sound.\n    - Run `python3 -m unittest tests/test*` after you added test cases for your changes\n    - Run `coverage3 run --source busybee setup.py test && coverage3 report` to ensure that the code is actually fully covered\n\n## Reference/BibTex \ud83d\udcda\n\nIf you want to reference BusyBee in documentation or articles, feel free to use this suggested BibTex snippet:\n\n```\n@misc{hugenroth2020busybee,\n  author={{Daniel Hugenroth}},\n  title={BusyBee Python Software Library},\n  year={2020},\n  url={https://github.com/lambdapioneer/busybee},\n}\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/lambdapioneer/busybee", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "busybee", "package_url": "https://pypi.org/project/busybee/", "platform": "", "project_url": "https://pypi.org/project/busybee/", "project_urls": {"Homepage": "https://github.com/lambdapioneer/busybee"}, "release_url": "https://pypi.org/project/busybee/1.0.0/", "requires_dist": null, "requires_python": ">=3.6", "summary": "Simple and interactive multi-processing for Python and notebooks", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>BusyBee \ud83d\udc1d</h1>\n<ul>\n<li>Simple, interactive multiprocessing for slow I/O and calculation in your notebook</li>\n<li>Simple to use as a drop-in replacement for the standard <code>map</code> function</li>\n<li>Prints the current progress and remaining time estimate</li>\n<li>No external dependencies and 100% test coverage</li>\n</ul>\n<p>The PyPI project page is here: <a href=\"https://pypi.org/project/busybee/\" rel=\"nofollow\">https://pypi.org/project/busybee/</a></p>\n<p><a href=\"https://circleci.com/gh/lambdapioneer/busybee\" rel=\"nofollow\"><img alt=\"CircleCI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/befd0a340c5cec5fbf39f06f1d6c37dd45c2ebff/68747470733a2f2f636972636c6563692e636f6d2f67682f6c616d62646170696f6e6565722f627573796265652e7376673f7374796c653d737667\"></a></p>\n<h2>Quick start</h2>\n<p>Install the BusyBee module via <code>pip</code> and use it as a replacement for your current <code>map</code> function. As BusyBee needs to know to total number of items the data must expose its length to <code>len()</code> calls. The best approach is to provide it as a <code>list</code>.</p>\n<p><strong>Install:</strong></p>\n<pre>$ pip3 install busybee\n</pre>\n<p><strong>Code:</strong></p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">busybee</span>\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">busybee</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">)</span>\n</pre>\n<p><strong>Output:</strong></p>\n<pre><span class=\"nl\">BusyBee</span><span class=\"p\">:</span> <span class=\"n\">Start</span> <span class=\"n\">processing</span> <span class=\"mi\">42</span> <span class=\"n\">items</span> <span class=\"n\">with</span> <span class=\"mi\">8</span> <span class=\"n\">processes</span><span class=\"p\">...</span>\n<span class=\"nl\">BusyBee</span><span class=\"p\">:</span>  <span class=\"mi\">1</span><span class=\"o\">/</span><span class=\"mi\">42</span><span class=\"p\">,</span>  <span class=\"mf\">2.4</span><span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"nl\">avg</span><span class=\"p\">:</span> <span class=\"mf\">3.2</span><span class=\"n\">s</span> <span class=\"n\">cpu</span><span class=\"p\">,</span> <span class=\"nl\">rem</span><span class=\"p\">:</span> <span class=\"mf\">16.5</span><span class=\"n\">s</span><span class=\"p\">)</span>\n<span class=\"nl\">BusyBee</span><span class=\"p\">:</span> <span class=\"mi\">15</span><span class=\"o\">/</span><span class=\"mi\">42</span><span class=\"p\">,</span> <span class=\"mf\">35.7</span><span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"nl\">avg</span><span class=\"p\">:</span> <span class=\"mf\">2.4</span><span class=\"n\">s</span> <span class=\"n\">cpu</span><span class=\"p\">,</span> <span class=\"nl\">rem</span><span class=\"p\">:</span> <span class=\"mf\">8.1</span><span class=\"n\">s</span><span class=\"p\">)</span>\n<span class=\"nl\">BusyBee</span><span class=\"p\">:</span> <span class=\"mi\">21</span><span class=\"o\">/</span><span class=\"mi\">42</span><span class=\"p\">,</span> <span class=\"mf\">50.0</span><span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"nl\">avg</span><span class=\"p\">:</span> <span class=\"mf\">2.5</span><span class=\"n\">s</span> <span class=\"n\">cpu</span><span class=\"p\">,</span> <span class=\"nl\">rem</span><span class=\"p\">:</span> <span class=\"mf\">6.5</span><span class=\"n\">s</span><span class=\"p\">)</span>\n<span class=\"nl\">BusyBee</span><span class=\"p\">:</span> <span class=\"mi\">24</span><span class=\"o\">/</span><span class=\"mi\">42</span><span class=\"p\">,</span> <span class=\"mf\">57.1</span><span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"nl\">avg</span><span class=\"p\">:</span> <span class=\"mf\">2.6</span><span class=\"n\">s</span> <span class=\"n\">cpu</span><span class=\"p\">,</span> <span class=\"nl\">rem</span><span class=\"p\">:</span> <span class=\"mf\">5.8</span><span class=\"n\">s</span><span class=\"p\">)</span>\n<span class=\"nl\">BusyBee</span><span class=\"p\">:</span> <span class=\"mi\">34</span><span class=\"o\">/</span><span class=\"mi\">42</span><span class=\"p\">,</span> <span class=\"mf\">81.0</span><span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"nl\">avg</span><span class=\"p\">:</span> <span class=\"mf\">2.5</span><span class=\"n\">s</span> <span class=\"n\">cpu</span><span class=\"p\">,</span> <span class=\"nl\">rem</span><span class=\"p\">:</span> <span class=\"mf\">2.5</span><span class=\"n\">s</span><span class=\"p\">)</span>\n<span class=\"nl\">BusyBee</span><span class=\"p\">:</span> <span class=\"n\">Finished</span> <span class=\"n\">processing</span> <span class=\"mi\">42</span> <span class=\"n\">items</span> <span class=\"n\">in</span> <span class=\"mf\">16.1</span><span class=\"n\">s</span> <span class=\"p\">(</span><span class=\"nl\">avg</span><span class=\"p\">:</span> <span class=\"mf\">2.6</span><span class=\"n\">s</span> <span class=\"n\">cpu</span><span class=\"p\">)</span>\n</pre>\n<h2>Advanced usage \ud83d\udc69\u200d\ud83d\udcbb \ud83d\udc68\u200d\ud83d\udcbb</h2>\n<p>You can configure the amount of cores to be used using the <code>processes</code> argument. For this you can either provide a number (e.g. 1, 8) or a simple formula such as <code>n/2</code> or <code>n-1</code>. The <code>n</code> refers to the logical number of CPU cores returned by the <code>multiprocessing</code> module.</p>\n<p>Further, you can configure the output by providing a custom <code>stdout</code> sink and configuring how often you want to receive an update. You can do so by using the arguments <code>update_every_n_seconds</code> (default: 10) and <code>update_every_n_percent</code> (default: 50).</p>\n<p>If you do not want any output, just set <code>quiet=False</code>.</p>\n<p><strong>Example:</strong></p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">busybee</span>\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">busybee</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span>\n    <span class=\"n\">func</span><span class=\"p\">,</span> <span class=\"n\">data</span>\n    <span class=\"n\">processes</span><span class=\"o\">=</span><span class=\"s1\">'n-1'</span><span class=\"p\">,</span>\n    <span class=\"n\">update_every_n_seconds</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span>\n    <span class=\"n\">update_every_n_percent</span><span class=\"o\">=</span><span class=\"mi\">25</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n</pre>\n<h2>Q&amp;A \ud83e\udd14</h2>\n<p><strong>Why did you built it? And why shouldn't I just use the <code>multiprocessing</code> module?</strong></p>\n<p>I started building BusyBee when I was working with a lot of I/O and pre-processing in Python Notebooks. Parallelizing these cells made it much faster, but it was often more involved than a one-line change. For instance, the worker pool needs manual clean-up and leaks a substantial amount of memory otherwise.</p>\n<p>Also, it was hard to predict the remaining time and whether it was worth to avoid context switching or actually making some tea/coffee \u2615.</p>\n<p><strong>Is there more than the <code>map(func, data, ...)</code> function?</strong></p>\n<p>Yes! While the <code>map</code> function is the most universal, there are more: The <code>filter(func, data, ...)</code> functions works similar to the regular <code>filter</code> function applied on lists. The <code>mk_dict(func, keys, ...)</code> function resembles the dictionary compression syntax <code>{k: func(k) for k in keys)</code>.</p>\n<p><strong>I want a different output!</strong></p>\n<p>I want to allow choosing from certain output styles. This is on my roadmap, but I do not have any certain date in mind. To maintain the simplicity I do not envision supporting custom output formatting. However, I am happy to be convinced otherwise.</p>\n<h2>Contribute \ud83d\udc4b</h2>\n<p>Awesome that you are interested in improving this code! When contributing, please follow the following (common-sense) steps:</p>\n<ul>\n<li>Create an issue before you write any code. This allows to guide you in the right direction.\n<ul>\n<li>If you are after a simple 1-5 line fix, you might ignore this.</li>\n</ul>\n</li>\n<li>In the pull-request explain the high-level goal and your approach. That provides valuable context.</li>\n<li>Convince others (and yourself) that the change is safe and sound.\n<ul>\n<li>Run <code>python3 -m unittest tests/test*</code> after you added test cases for your changes</li>\n<li>Run <code>coverage3 run --source busybee setup.py test &amp;&amp; coverage3 report</code> to ensure that the code is actually fully covered</li>\n</ul>\n</li>\n</ul>\n<h2>Reference/BibTex \ud83d\udcda</h2>\n<p>If you want to reference BusyBee in documentation or articles, feel free to use this suggested BibTex snippet:</p>\n<pre><code>@misc{hugenroth2020busybee,\n  author={{Daniel Hugenroth}},\n  title={BusyBee Python Software Library},\n  year={2020},\n  url={https://github.com/lambdapioneer/busybee},\n}\n</code></pre>\n\n          </div>"}, "last_serial": 6851038, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "e0084610f96bdf3ed4015b7f9323131b", "sha256": "0f2877a6eaeacf29ca7db891148fb250955d982f30300c9793aebfc605ab8b5d"}, "downloads": -1, "filename": "busybee-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "e0084610f96bdf3ed4015b7f9323131b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 11324, "upload_time": "2020-02-23T16:33:03", "upload_time_iso_8601": "2020-02-23T16:33:03.911749Z", "url": "https://files.pythonhosted.org/packages/ae/8d/f176c3eff9b2d747eba15647e27d47a4fc0ad5a779e6115a0c3c3fd71bab/busybee-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "eb7c4490d43bc24945e915e552242588", "sha256": "e0b024ac830cbc8b3f92a52f734fcd10ccb940d2ffa392fbdf6c600516141ed3"}, "downloads": -1, "filename": "busybee-0.1.0.tar.gz", "has_sig": false, "md5_digest": "eb7c4490d43bc24945e915e552242588", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 8568, "upload_time": "2020-02-23T16:33:06", "upload_time_iso_8601": "2020-02-23T16:33:06.255499Z", "url": "https://files.pythonhosted.org/packages/c6/fb/bc90364ea37693ba81609fd3ff534d8be0a2b14975bd2edc39d0b49b4f7b/busybee-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "5bd76464346eadbee7aee3f4230953ee", "sha256": "0f86a95ac3a50bcc509d069882840ca3c8fb8aebae591ac405329c2a64e38c33"}, "downloads": -1, "filename": "busybee-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "5bd76464346eadbee7aee3f4230953ee", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 11514, "upload_time": "2020-02-23T18:40:15", "upload_time_iso_8601": "2020-02-23T18:40:15.065941Z", "url": "https://files.pythonhosted.org/packages/d1/79/f54e0274368a5d68183fa5eb4d0b1fa24fdc327a5374c2a58076530429d3/busybee-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "109638fabe1e56b611d4f2685f3c99f1", "sha256": "5eac9f06c5ebb9517cc12f16b40531830dc70acfb5ad05dc4eac57a79a9918df"}, "downloads": -1, "filename": "busybee-0.1.1.tar.gz", "has_sig": false, "md5_digest": "109638fabe1e56b611d4f2685f3c99f1", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 8762, "upload_time": "2020-02-23T18:40:16", "upload_time_iso_8601": "2020-02-23T18:40:16.707099Z", "url": "https://files.pythonhosted.org/packages/f7/c4/78bfb7281194d5c182faafbd985d2d67103225da8fbc774fdaef4b0e34f7/busybee-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "dc3d0ea1e7c682849a0f3ede914f1e6d", "sha256": "e3d67c9c731c38a606bfa78aa4233209cd520ee5247a0424e84916d1a2a35ea8"}, "downloads": -1, "filename": "busybee-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "dc3d0ea1e7c682849a0f3ede914f1e6d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 12124, "upload_time": "2020-03-07T14:24:07", "upload_time_iso_8601": "2020-03-07T14:24:07.298447Z", "url": "https://files.pythonhosted.org/packages/73/5f/a1f43b9d7e8f2edb11aa010bea657a4d54fadfd4dc0196461f548f3a4141/busybee-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f8a6f2124c253a24613f7e398c9d5e96", "sha256": "af12982f8bf0c169e8a06f14a226d6deff2ef9bdc0bd6cdc92a41898cf36ab42"}, "downloads": -1, "filename": "busybee-0.1.2.tar.gz", "has_sig": false, "md5_digest": "f8a6f2124c253a24613f7e398c9d5e96", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 9335, "upload_time": "2020-03-07T14:24:08", "upload_time_iso_8601": "2020-03-07T14:24:08.451273Z", "url": "https://files.pythonhosted.org/packages/b4/71/1bcdae996210b4983690c62e19d2a0e368335a15866f750015ee3a9b9123/busybee-0.1.2.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "2420230119a9b06303283c2b9c620b99", "sha256": "fe5140a1d90496596767b2367562572d2f1cbfc65068f2577af72852cb39a40d"}, "downloads": -1, "filename": "busybee-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "2420230119a9b06303283c2b9c620b99", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 12587, "upload_time": "2020-03-20T16:42:14", "upload_time_iso_8601": "2020-03-20T16:42:14.616015Z", "url": "https://files.pythonhosted.org/packages/7e/bf/9c6192f0b11134225b94f18bf6639d1824165861d3a7f8fa5cc70e3f0c7c/busybee-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "46f8af455059e1fcaad8ce38fb952455", "sha256": "56c0f336802184a36e6887a1111e0ac6f0ad152ce5cf49069d3e1802f3fea8c4"}, "downloads": -1, "filename": "busybee-1.0.0.tar.gz", "has_sig": false, "md5_digest": "46f8af455059e1fcaad8ce38fb952455", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 9776, "upload_time": "2020-03-20T16:42:16", "upload_time_iso_8601": "2020-03-20T16:42:16.041900Z", "url": "https://files.pythonhosted.org/packages/02/c6/20f83fcc8d3123ce38f41d491fc1c53dc3d615a1df67ffe752f1c2507879/busybee-1.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "2420230119a9b06303283c2b9c620b99", "sha256": "fe5140a1d90496596767b2367562572d2f1cbfc65068f2577af72852cb39a40d"}, "downloads": -1, "filename": "busybee-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "2420230119a9b06303283c2b9c620b99", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 12587, "upload_time": "2020-03-20T16:42:14", "upload_time_iso_8601": "2020-03-20T16:42:14.616015Z", "url": "https://files.pythonhosted.org/packages/7e/bf/9c6192f0b11134225b94f18bf6639d1824165861d3a7f8fa5cc70e3f0c7c/busybee-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "46f8af455059e1fcaad8ce38fb952455", "sha256": "56c0f336802184a36e6887a1111e0ac6f0ad152ce5cf49069d3e1802f3fea8c4"}, "downloads": -1, "filename": "busybee-1.0.0.tar.gz", "has_sig": false, "md5_digest": "46f8af455059e1fcaad8ce38fb952455", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 9776, "upload_time": "2020-03-20T16:42:16", "upload_time_iso_8601": "2020-03-20T16:42:16.041900Z", "url": "https://files.pythonhosted.org/packages/02/c6/20f83fcc8d3123ce38f41d491fc1c53dc3d615a1df67ffe752f1c2507879/busybee-1.0.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:35:55 2020"}