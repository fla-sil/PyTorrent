{"info": {"author": "Andrew Ramsay", "author_email": "andrew.ramsay@glasgow.ac.uk", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5"], "description": "# JAKE Drivers\n\nThis project contains drivers for the JAKE sensor packs. For more information on the devices and their capabilities, [see the wiki](https://github.com/andrewramsay/jake-drivers/wiki/Overview).\n\nThis repo contains multiple drivers. The most feature complete implementation is a C++ driver that can be compiled for Windows, OSX and Linux (32/64-bit). This driver also has bindings for Python, C# and Java, although in some cases functionality supported by the C++ code has not yet been exposed through these bindings.\n\nIn addition, there are two separate implementations, one written in Python (with a dependency on [pyserial](http://pyserial.sourceforge.net/)) and one written in Java (probably most useful in that it supports Android). \n\n**NOTE**: If you install both the Python/C++ bindings and the pure Python implementation in the same Python environment you may encounter naming conflicts, as both include a module called \"pyjake\".\n\n## Installation on Windows\n\nThe easiest way to get up and running quickly on Windows is to use the Python implementation. Install pyserial, then run `python setup.py install` from the `jake-drivers/python` directory. \n\nIf you want to use the C++ driver, you'll need to compile it first. Inside the `jake-drivers/cpp` directory, you'll find:\n\n * jake\\_driver (the C++ code)\n * pyjake (Python bindings for jake\\_driver)\n * jake\\_cs (C# bindings for jake\\_driver)\n * jake\\_java (Java bindings for jake\\_driver)\n * jake\\_mex (Basic Matlab bindings for jake\\_driver)\n\nEach of these should have a Visual Studio project file that can be used to compile them individually depending on which parts you need. They will probably also compile with gcc/g++ from MingW, but there are no build scripts for this at the moment. \n\n## Installation on OSX\n\nAgain the Python implementation is the easiest way to get started quickly:\n\n * Install pyserial\n * Run `python setup.py install` from `jake-drivers/python`\n\nIf you have the XCode/developer packages installed and want to compile the C++/Python bindings:\n\n * Run `sh build_osx_64.sh` from `jake-drivers/cpp/jake_driver`\n * Run `python setup_osx.py install` from `jake-drivers/cpp/pyjake`\n\n## Installation on Linux\n\nSimilar to OSX. For the Python implementation:\n\n * Install pyserial\n * Run `python setup.py install` from `jake-drivers/python`\n\nFor the C++/Python bindings:\n\n * Run `sh build.sh` from `jake-drivers/cpp/jake_driver`\n * Run `python setup.py install` from `jake-drivers/cpp/pyjake`\n\n## A basic example\n\n(for more examples see [the wiki page](https://github.com/andrewramsay/jake-drivers/wiki/Examples)\n\n**Python / pyserial**\n\n```python\nfrom pyjake import *\njd = jake_device()\n\n# connection details depend on platform\n# Windows (virtual COM port number)\ndevice = 10\n# OSX (Serial Port Profile dev node)\n# device = '/dev/tty.JAKESN0077-SPP'\n\njd.connect(device) # returns False if connection failed\nprint jd.acc() # current accelerometer output\nprint jd.mag() # current magnetometer output\nprint jd.heading() # current heading output\njd.close()\n```\n\n**Python/C++ bindings**\n```python\nfrom jake import *\njd = jake_device()\n\n# Windows: for non-Microsoft Bluetooth stacks\njd.connect(10) \n\n# Windows: if you're using the Microsoft Bluetooth stack, \n# you can instead connect by specifying the device address directly\njd.connect_rfcomm('aa:bb:cc:dd:ee:ff')\n\n# OSX: always use this function\n# TODO\n\n# Linux: Bluetooth device address\njd.connect_rfcomm('aa:bb:cc:dd:ee:ff')\n\n# access data...\nprint jd.acc(), jd.mag(), jd.heading()\n\njd.close()\n```", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/andrewramsay/jake-drivers", "keywords": "development sensors sensing JAKE", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "jake-drivers", "package_url": "https://pypi.org/project/jake-drivers/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/jake-drivers/", "project_urls": {"Homepage": "https://github.com/andrewramsay/jake-drivers"}, "release_url": "https://pypi.org/project/jake-drivers/1.0.1/", "requires_dist": ["pyserial"], "requires_python": "", "summary": "JAKE sensor device driver", "version": "1.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            # JAKE Drivers<br><br>This project contains drivers for the JAKE sensor packs. For more information on the devices and their capabilities, [see the wiki](https://github.com/andrewramsay/jake-drivers/wiki/Overview).<br><br>This repo contains multiple drivers. The most feature complete implementation is a C++ driver that can be compiled for Windows, OSX and Linux (32/64-bit). This driver also has bindings for Python, C# and Java, although in some cases functionality supported by the C++ code has not yet been exposed through these bindings.<br><br>In addition, there are two separate implementations, one written in Python (with a dependency on [pyserial](http://pyserial.sourceforge.net/)) and one written in Java (probably most useful in that it supports Android). <br><br>**NOTE**: If you install both the Python/C++ bindings and the pure Python implementation in the same Python environment you may encounter naming conflicts, as both include a module called \"pyjake\".<br><br>## Installation on Windows<br><br>The easiest way to get up and running quickly on Windows is to use the Python implementation. Install pyserial, then run `python setup.py install` from the `jake-drivers/python` directory. <br><br>If you want to use the C++ driver, you'll need to compile it first. Inside the `jake-drivers/cpp` directory, you'll find:<br><br> * jake\\_driver (the C++ code)<br> * pyjake (Python bindings for jake\\_driver)<br> * jake\\_cs (C# bindings for jake\\_driver)<br> * jake\\_java (Java bindings for jake\\_driver)<br> * jake\\_mex (Basic Matlab bindings for jake\\_driver)<br><br>Each of these should have a Visual Studio project file that can be used to compile them individually depending on which parts you need. They will probably also compile with gcc/g++ from MingW, but there are no build scripts for this at the moment. <br><br>## Installation on OSX<br><br>Again the Python implementation is the easiest way to get started quickly:<br><br> * Install pyserial<br> * Run `python setup.py install` from `jake-drivers/python`<br><br>If you have the XCode/developer packages installed and want to compile the C++/Python bindings:<br><br> * Run `sh build_osx_64.sh` from `jake-drivers/cpp/jake_driver`<br> * Run `python setup_osx.py install` from `jake-drivers/cpp/pyjake`<br><br>## Installation on Linux<br><br>Similar to OSX. For the Python implementation:<br><br> * Install pyserial<br> * Run `python setup.py install` from `jake-drivers/python`<br><br>For the C++/Python bindings:<br><br> * Run `sh build.sh` from `jake-drivers/cpp/jake_driver`<br> * Run `python setup.py install` from `jake-drivers/cpp/pyjake`<br><br>## A basic example<br><br>(for more examples see [the wiki page](https://github.com/andrewramsay/jake-drivers/wiki/Examples)<br><br>**Python / pyserial**<br><br>```python<br>from pyjake import *<br>jd = jake_device()<br><br># connection details depend on platform<br># Windows (virtual COM port number)<br>device = 10<br># OSX (Serial Port Profile dev node)<br># device = '/dev/tty.JAKESN0077-SPP'<br><br>jd.connect(device) # returns False if connection failed<br>print jd.acc() # current accelerometer output<br>print jd.mag() # current magnetometer output<br>print jd.heading() # current heading output<br>jd.close()<br>```<br><br>**Python/C++ bindings**<br>```python<br>from jake import *<br>jd = jake_device()<br><br># Windows: for non-Microsoft Bluetooth stacks<br>jd.connect(10) <br><br># Windows: if you're using the Microsoft Bluetooth stack, <br># you can instead connect by specifying the device address directly<br>jd.connect_rfcomm('aa:bb:cc:dd:ee:ff')<br><br># OSX: always use this function<br># TODO<br><br># Linux: Bluetooth device address<br>jd.connect_rfcomm('aa:bb:cc:dd:ee:ff')<br><br># access data...<br>print jd.acc(), jd.mag(), jd.heading()<br><br>jd.close()<br>```\n          </div>"}, "last_serial": 2170635, "releases": {"1.0.0": [], "1.0.1": [{"comment_text": "", "digests": {"md5": "deec5849b052ecbfb594defa8b46cf26", "sha256": "db570cb1dc29923edacc56ea24f12e699f03769b9f66dd0a346300010083cd40"}, "downloads": -1, "filename": "jake_drivers-1.0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "deec5849b052ecbfb594defa8b46cf26", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 16111, "upload_time": "2016-06-16T11:28:51", "upload_time_iso_8601": "2016-06-16T11:28:51.543385Z", "url": "https://files.pythonhosted.org/packages/45/94/55a135935c4201cf74baebe58ccb253a95ad3d9a77ccb5cc39f7b5a292fe/jake_drivers-1.0.1-py2.py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "deec5849b052ecbfb594defa8b46cf26", "sha256": "db570cb1dc29923edacc56ea24f12e699f03769b9f66dd0a346300010083cd40"}, "downloads": -1, "filename": "jake_drivers-1.0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "deec5849b052ecbfb594defa8b46cf26", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 16111, "upload_time": "2016-06-16T11:28:51", "upload_time_iso_8601": "2016-06-16T11:28:51.543385Z", "url": "https://files.pythonhosted.org/packages/45/94/55a135935c4201cf74baebe58ccb253a95ad3d9a77ccb5cc39f7b5a292fe/jake_drivers-1.0.1-py2.py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 00:53:20 2020"}