{"info": {"author": "Jongwook Choi", "author_email": "wookayin@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3"], "description": "TensorFlow Plot (tfplot)\n========================\n\n[![pypi](https://img.shields.io/pypi/v/tensorflow-plot.svg?maxAge=86400)][pypi_tfplot]\n[![Documentation Status](https://readthedocs.org/projects/tensorflow-plot/badge/?version=latest)][documentation]\n[![Build Status](https://travis-ci.org/wookayin/tensorflow-plot.svg?branch=master)](https://travis-ci.org/wookayin/tensorflow-plot)\n\nA [TensorFlow][tensorflow] utility for providing matplotlib-based **plot** operations\n\u2014 [TensorBoard][tensorboard] \u2764\ufe0f [Matplotlib][matplotlib].\n\n<p align=\"center\">\n<i> \ud83d\udea7 Under Construction \u2014  API might change!</i>\n</p>\n\nIt allows us to draw **_any_** [matplotlib][matplotlib] plots or figures into images,\nas a part of TensorFlow computation graph.\nEspecially, we can easily any plot and see the result image\nas an image summary in [TensorBoard][tensorboard].\n\n<p align=\"center\">\n<img src=\"./assets/tensorboard-plot-summary.png\" width=\"70%\" />\n</p>\n\n\nQuick Overview\n--------------\n\nThere are two main ways of using `tfplot`: (i) Use as TF op, and (ii) Manually add summary protos.\n\n### Usage: Decorator\n\nYou can directly declare a Tensor factory by using [`tfplot.autowrap`][tfplot-autowrap] as a decorator.\nIn the body of the wrapped function you can add any logic for drawing plots. Example:\n\n```python\n@tfplot.autowrap(figsize=(2, 2))\ndef plot_scatter(x: np.ndarray, y: np.ndarray, *, ax, color='red'):\n    ax.scatter(x, y, color=color)\n\nx = tf.constant([1, 2, 3], dtype=tf.float32)     # tf.Tensor\ny = tf.constant([1, 4, 9], dtype=tf.float32)     # tf.Tensor\nplot_op = plot_scatter(x, y)                     # tf.Tensor shape=(?, ?, 4) dtype=uint8\n```\n\n\n### Usage: Wrap as TF ops\n\nWe can [wrap][tfplot-autowrap] **any** pure python function for plotting as a Tensorflow op, such as:\n\n- (i) A python function that creates and return a matplotlib `Figure` (see below)\n- (ii) A python function that has `fig` or `ax` keyword parameters (will be auto-injected);\n  e.g. [`seaborn.heatmap`](http://seaborn.pydata.org/generated/seaborn.heatmap.html)\n- (iii) A method instance of [matplotlib `Axes`](https://matplotlib.org/api/axes_api.html);\n  e.g. [`Axes.scatter`](https://matplotlib.org/api/_as_gen/matplotlib.axes.Axes.scatter.html#matplotlib.axes.Axes.scatter)\n\nExample of (i): You can define a python function that takes `numpy.ndarray` values as input (as an argument of Tensor input),\nand draw a plot as a return value of `matplotlib.figure.Figure`.\nThe resulting TensorFlow plot op will be a RGBA image tensor of shape `[height, width, 4]` containing the resulting plot.\n\n\n```python\ndef figure_heatmap(heatmap, cmap='jet'):\n    # draw a heatmap with a colorbar\n    fig, ax = tfplot.subplots(figsize=(4, 3))       # DON'T USE plt.subplots() !!!!\n    im = ax.imshow(heatmap, cmap=cmap)\n    fig.colorbar(im)\n    return fig\n\nheatmap_tensor = ...   # tf.Tensor shape=(16, 16) dtype=float32\n\n# (a) wrap function as a Tensor factory\nplot_op = tfplot.autowrap(figure_heatmap)(heatmap_tensor)      # tf.Tensor shape=(?, ?, 4) dtype=uint8\n\n# (b) direct invocation similar to tf.py_func\nplot_op = tfplot.plot(figure_heatmap, [heatmap_tensor], cmap='jet')\n\n# (c) or just directly add an image summary with the plot\ntfplot.summary.plot(\"heatmap_summary\", figure_heatmap, [heatmap_tensor])\n```\n\nExample of (ii):\n\n```python tfplot\nimport tfplot\nimport seaborn.apionly as sns\n\ntf_heatmap = tfplot.autowrap(sns.heatmap, figsize=(4, 4), batch=True)   # function: Tensor -> Tensor\nplot_op = tf_heatmap(attention_maps)   # tf.Tensor shape=(?, 400, 400, 4) dtype=uint8\ntf.summary.image(\"attention_maps\", plot_op)\n```\n\nPlease take a look at the [the showcase][examples-showcase] or [examples directory][examples-dir] for more examples and use cases.\n\n[The full documentation][documentation] including API docs can be found at [readthedocs][documentation].\n\n\n### Usage: Manually add summary protos\n\n```python\nimport tensorboard as tb\nfig, ax = ...\n\n# Get RGB image manually or by executing plot ops.\nembedding_plot = sess.run(plot_op)                 # ndarray [H, W, 3] uint8\nembedding_plot = tfplot.figure_to_array(fig)       # ndarray [H, W, 3] uint8\n\nsummary_pb = tb.summary.image_pb('plot_embedding', [embedding_plot])\nsummary_writer.write_add_summary(summary_pb, global_step=global_step)\n```\n\n\nInstallation\n------------\n\n```\npip install tensorflow-plot\n```\n\nTo grab the latest development version:\n\n```\npip install git+https://github.com/wookayin/tensorflow-plot.git@master\n```\n\nNote\n----\n\n### Some comments on Speed\n\n* Matplotlib operations can be **very** slow as Matplotlib runs in python rather than native code,\nso please watch out for runtime speed.\nThere is still a room for improvement, which will be addressed in the near future.\n\n* Moreover, it might be also a good idea to draw plots from the main code (rather than having a TF op) and add them as image summaries.\nPlease use this library at your best discernment.\n\n### Thread-safety issue\n\nPlease use **object-oriented** matplotlib APIs (e.g. `Figure`, `AxesSubplot`)\ninstead of [pyplot] APIs (i.e. `matplotlib.pyplot` or `plt.XXX()`)\nwhen creating and drawing plots.\nThis is because [pyplot] APIs are not *thread-safe*,\nwhile the TensorFlow plot operations are usually executed in multi-threaded manners.\n\nFor example, avoid any use of `pyplot` (or `plt`):\n\n```python\n# DON'T DO LIKE THIS !!!\ndef figure_heatmap(heatmap):\n    fig = plt.figure()                 # <--- NO!\n    plt.imshow(heatmap)\n    return fig\n```\n\nand do it like:\n\n```python\ndef figure_heatmap(heatmap):\n    fig = matplotlib.figure.Figure()   # or just `fig = tfplot.Figure()`\n    ax = fig.add_subplot(1, 1, 1)      # ax: AxesSubplot\n    # or, just `fig, ax = tfplot.subplots()`\n    ax.imshow(heatmap)\n    return fig                         # fig: Figure\n```\n\nFor example, `tfplot.subplots()` is a good replacement for `plt.subplots()`\nto use inside plot functions.\nAlternatively, you can just take advantage of automatic injection of `fig` and/or `ax`.\n\n\n[pypi_tfplot]: https://pypi.python.org/pypi/tensorflow-plot\n[matplotlib]: http://matplotlib.org/\n[tensorflow]: https://www.tensorflow.org/\n[tensorboard]: https://www.tensorflow.org/get_started/summaries_and_tensorboard\n[pyplot]: http://matplotlib.org/api/pyplot_api.html\n[examples-dir]: https://github.com/wookayin/tensorflow-plot/blob/master/examples/\n[examples-showcase]: https://github.com/wookayin/tensorflow-plot/blob/master/examples/showcases.ipynb\n[documentation]: http://tensorflow-plot.readthedocs.io/en/latest/\n\n[tfplot-autowrap]: https://tensorflow-plot.readthedocs.io/en/latest/api/tfplot.html#tfplot.autowrap\n\n\n### TensorFlow compatibility\n\nCurrently, `tfplot` is compatible with TensorFlow 1.x series.\nSupport for eager execution and TF 2.0 will be coming soon!\n\n\nLicense\n-------\n\n[MIT License](LICENSE) \u00a9 Jongwook Choi", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/wookayin/tensorflow-plot", "keywords": "tensorflow matplotlib tensorboard plot tfplot", "license": "MIT License", "maintainer": "", "maintainer_email": "", "name": "tensorflow-plot", "package_url": "https://pypi.org/project/tensorflow-plot/", "platform": "", "project_url": "https://pypi.org/project/tensorflow-plot/", "project_urls": {"Homepage": "https://github.com/wookayin/tensorflow-plot"}, "release_url": "https://pypi.org/project/tensorflow-plot/0.3.2/", "requires_dist": null, "requires_python": "", "summary": "TensorFlow Plot", "version": "0.3.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>TensorFlow Plot (tfplot)</h1>\n<p><a href=\"https://pypi.python.org/pypi/tensorflow-plot\" rel=\"nofollow\"><img alt=\"pypi\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b12371408b42b585b2b8f419db2542dedf4af9a0/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f74656e736f72666c6f772d706c6f742e7376673f6d61784167653d3836343030\"></a>\n<a href=\"http://tensorflow-plot.readthedocs.io/en/latest/\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a5cab3c6cd54f7df1c96853a7e3d8cd2c575d43c/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f74656e736f72666c6f772d706c6f742f62616467652f3f76657273696f6e3d6c6174657374\"></a>\n<a href=\"https://travis-ci.org/wookayin/tensorflow-plot\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e5aca7d2d8813755da02f6b7232d2b7206ea3be6/68747470733a2f2f7472617669732d63692e6f72672f776f6f6b6179696e2f74656e736f72666c6f772d706c6f742e7376673f6272616e63683d6d6173746572\"></a></p>\n<p>A <a href=\"https://www.tensorflow.org/\" rel=\"nofollow\">TensorFlow</a> utility for providing matplotlib-based <strong>plot</strong> operations\n\u2014 <a href=\"https://www.tensorflow.org/get_started/summaries_and_tensorboard\" rel=\"nofollow\">TensorBoard</a> \u2764\ufe0f <a href=\"http://matplotlib.org/\" rel=\"nofollow\">Matplotlib</a>.</p>\n<p align=\"center\">\n<i> \ud83d\udea7 Under Construction \u2014  API might change!</i>\n</p>\n<p>It allows us to draw <strong><em>any</em></strong> <a href=\"http://matplotlib.org/\" rel=\"nofollow\">matplotlib</a> plots or figures into images,\nas a part of TensorFlow computation graph.\nEspecially, we can easily any plot and see the result image\nas an image summary in <a href=\"https://www.tensorflow.org/get_started/summaries_and_tensorboard\" rel=\"nofollow\">TensorBoard</a>.</p>\n<p align=\"center\">\n<img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9d821905283625abf6a833a6631669570e816408/2e2f6173736574732f74656e736f72626f6172642d706c6f742d73756d6d6172792e706e67\" width=\"70%\">\n</p>\n<h2>Quick Overview</h2>\n<p>There are two main ways of using <code>tfplot</code>: (i) Use as TF op, and (ii) Manually add summary protos.</p>\n<h3>Usage: Decorator</h3>\n<p>You can directly declare a Tensor factory by using <a href=\"https://tensorflow-plot.readthedocs.io/en/latest/api/tfplot.html#tfplot.autowrap\" rel=\"nofollow\"><code>tfplot.autowrap</code></a> as a decorator.\nIn the body of the wrapped function you can add any logic for drawing plots. Example:</p>\n<pre><span class=\"nd\">@tfplot</span><span class=\"o\">.</span><span class=\"n\">autowrap</span><span class=\"p\">(</span><span class=\"n\">figsize</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">))</span>\n<span class=\"k\">def</span> <span class=\"nf\">plot_scatter</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"p\">,</span> <span class=\"n\">ax</span><span class=\"p\">,</span> <span class=\"n\">color</span><span class=\"o\">=</span><span class=\"s1\">'red'</span><span class=\"p\">):</span>\n    <span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">scatter</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">color</span><span class=\"o\">=</span><span class=\"n\">color</span><span class=\"p\">)</span>\n\n<span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">tf</span><span class=\"o\">.</span><span class=\"n\">constant</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">tf</span><span class=\"o\">.</span><span class=\"n\">float32</span><span class=\"p\">)</span>     <span class=\"c1\"># tf.Tensor</span>\n<span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">tf</span><span class=\"o\">.</span><span class=\"n\">constant</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">],</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">tf</span><span class=\"o\">.</span><span class=\"n\">float32</span><span class=\"p\">)</span>     <span class=\"c1\"># tf.Tensor</span>\n<span class=\"n\">plot_op</span> <span class=\"o\">=</span> <span class=\"n\">plot_scatter</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">)</span>                     <span class=\"c1\"># tf.Tensor shape=(?, ?, 4) dtype=uint8</span>\n</pre>\n<h3>Usage: Wrap as TF ops</h3>\n<p>We can <a href=\"https://tensorflow-plot.readthedocs.io/en/latest/api/tfplot.html#tfplot.autowrap\" rel=\"nofollow\">wrap</a> <strong>any</strong> pure python function for plotting as a Tensorflow op, such as:</p>\n<ul>\n<li>(i) A python function that creates and return a matplotlib <code>Figure</code> (see below)</li>\n<li>(ii) A python function that has <code>fig</code> or <code>ax</code> keyword parameters (will be auto-injected);\ne.g. <a href=\"http://seaborn.pydata.org/generated/seaborn.heatmap.html\" rel=\"nofollow\"><code>seaborn.heatmap</code></a></li>\n<li>(iii) A method instance of <a href=\"https://matplotlib.org/api/axes_api.html\" rel=\"nofollow\">matplotlib <code>Axes</code></a>;\ne.g. <a href=\"https://matplotlib.org/api/_as_gen/matplotlib.axes.Axes.scatter.html#matplotlib.axes.Axes.scatter\" rel=\"nofollow\"><code>Axes.scatter</code></a></li>\n</ul>\n<p>Example of (i): You can define a python function that takes <code>numpy.ndarray</code> values as input (as an argument of Tensor input),\nand draw a plot as a return value of <code>matplotlib.figure.Figure</code>.\nThe resulting TensorFlow plot op will be a RGBA image tensor of shape <code>[height, width, 4]</code> containing the resulting plot.</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">figure_heatmap</span><span class=\"p\">(</span><span class=\"n\">heatmap</span><span class=\"p\">,</span> <span class=\"n\">cmap</span><span class=\"o\">=</span><span class=\"s1\">'jet'</span><span class=\"p\">):</span>\n    <span class=\"c1\"># draw a heatmap with a colorbar</span>\n    <span class=\"n\">fig</span><span class=\"p\">,</span> <span class=\"n\">ax</span> <span class=\"o\">=</span> <span class=\"n\">tfplot</span><span class=\"o\">.</span><span class=\"n\">subplots</span><span class=\"p\">(</span><span class=\"n\">figsize</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">))</span>       <span class=\"c1\"># DON'T USE plt.subplots() !!!!</span>\n    <span class=\"n\">im</span> <span class=\"o\">=</span> <span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">imshow</span><span class=\"p\">(</span><span class=\"n\">heatmap</span><span class=\"p\">,</span> <span class=\"n\">cmap</span><span class=\"o\">=</span><span class=\"n\">cmap</span><span class=\"p\">)</span>\n    <span class=\"n\">fig</span><span class=\"o\">.</span><span class=\"n\">colorbar</span><span class=\"p\">(</span><span class=\"n\">im</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">fig</span>\n\n<span class=\"n\">heatmap_tensor</span> <span class=\"o\">=</span> <span class=\"o\">...</span>   <span class=\"c1\"># tf.Tensor shape=(16, 16) dtype=float32</span>\n\n<span class=\"c1\"># (a) wrap function as a Tensor factory</span>\n<span class=\"n\">plot_op</span> <span class=\"o\">=</span> <span class=\"n\">tfplot</span><span class=\"o\">.</span><span class=\"n\">autowrap</span><span class=\"p\">(</span><span class=\"n\">figure_heatmap</span><span class=\"p\">)(</span><span class=\"n\">heatmap_tensor</span><span class=\"p\">)</span>      <span class=\"c1\"># tf.Tensor shape=(?, ?, 4) dtype=uint8</span>\n\n<span class=\"c1\"># (b) direct invocation similar to tf.py_func</span>\n<span class=\"n\">plot_op</span> <span class=\"o\">=</span> <span class=\"n\">tfplot</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">figure_heatmap</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">heatmap_tensor</span><span class=\"p\">],</span> <span class=\"n\">cmap</span><span class=\"o\">=</span><span class=\"s1\">'jet'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># (c) or just directly add an image summary with the plot</span>\n<span class=\"n\">tfplot</span><span class=\"o\">.</span><span class=\"n\">summary</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"s2\">\"heatmap_summary\"</span><span class=\"p\">,</span> <span class=\"n\">figure_heatmap</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">heatmap_tensor</span><span class=\"p\">])</span>\n</pre>\n<p>Example of (ii):</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">tfplot</span>\n<span class=\"kn\">import</span> <span class=\"nn\">seaborn.apionly</span> <span class=\"k\">as</span> <span class=\"nn\">sns</span>\n\n<span class=\"n\">tf_heatmap</span> <span class=\"o\">=</span> <span class=\"n\">tfplot</span><span class=\"o\">.</span><span class=\"n\">autowrap</span><span class=\"p\">(</span><span class=\"n\">sns</span><span class=\"o\">.</span><span class=\"n\">heatmap</span><span class=\"p\">,</span> <span class=\"n\">figsize</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">),</span> <span class=\"n\">batch</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>   <span class=\"c1\"># function: Tensor -&gt; Tensor</span>\n<span class=\"n\">plot_op</span> <span class=\"o\">=</span> <span class=\"n\">tf_heatmap</span><span class=\"p\">(</span><span class=\"n\">attention_maps</span><span class=\"p\">)</span>   <span class=\"c1\"># tf.Tensor shape=(?, 400, 400, 4) dtype=uint8</span>\n<span class=\"n\">tf</span><span class=\"o\">.</span><span class=\"n\">summary</span><span class=\"o\">.</span><span class=\"n\">image</span><span class=\"p\">(</span><span class=\"s2\">\"attention_maps\"</span><span class=\"p\">,</span> <span class=\"n\">plot_op</span><span class=\"p\">)</span>\n</pre>\n<p>Please take a look at the <a href=\"https://github.com/wookayin/tensorflow-plot/blob/master/examples/showcases.ipynb\" rel=\"nofollow\">the showcase</a> or <a href=\"https://github.com/wookayin/tensorflow-plot/blob/master/examples/\" rel=\"nofollow\">examples directory</a> for more examples and use cases.</p>\n<p><a href=\"http://tensorflow-plot.readthedocs.io/en/latest/\" rel=\"nofollow\">The full documentation</a> including API docs can be found at <a href=\"http://tensorflow-plot.readthedocs.io/en/latest/\" rel=\"nofollow\">readthedocs</a>.</p>\n<h3>Usage: Manually add summary protos</h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">tensorboard</span> <span class=\"k\">as</span> <span class=\"nn\">tb</span>\n<span class=\"n\">fig</span><span class=\"p\">,</span> <span class=\"n\">ax</span> <span class=\"o\">=</span> <span class=\"o\">...</span>\n\n<span class=\"c1\"># Get RGB image manually or by executing plot ops.</span>\n<span class=\"n\">embedding_plot</span> <span class=\"o\">=</span> <span class=\"n\">sess</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">plot_op</span><span class=\"p\">)</span>                 <span class=\"c1\"># ndarray [H, W, 3] uint8</span>\n<span class=\"n\">embedding_plot</span> <span class=\"o\">=</span> <span class=\"n\">tfplot</span><span class=\"o\">.</span><span class=\"n\">figure_to_array</span><span class=\"p\">(</span><span class=\"n\">fig</span><span class=\"p\">)</span>       <span class=\"c1\"># ndarray [H, W, 3] uint8</span>\n\n<span class=\"n\">summary_pb</span> <span class=\"o\">=</span> <span class=\"n\">tb</span><span class=\"o\">.</span><span class=\"n\">summary</span><span class=\"o\">.</span><span class=\"n\">image_pb</span><span class=\"p\">(</span><span class=\"s1\">'plot_embedding'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">embedding_plot</span><span class=\"p\">])</span>\n<span class=\"n\">summary_writer</span><span class=\"o\">.</span><span class=\"n\">write_add_summary</span><span class=\"p\">(</span><span class=\"n\">summary_pb</span><span class=\"p\">,</span> <span class=\"n\">global_step</span><span class=\"o\">=</span><span class=\"n\">global_step</span><span class=\"p\">)</span>\n</pre>\n<h2>Installation</h2>\n<pre><code>pip install tensorflow-plot\n</code></pre>\n<p>To grab the latest development version:</p>\n<pre><code>pip install git+https://github.com/wookayin/tensorflow-plot.git@master\n</code></pre>\n<h2>Note</h2>\n<h3>Some comments on Speed</h3>\n<ul>\n<li>\n<p>Matplotlib operations can be <strong>very</strong> slow as Matplotlib runs in python rather than native code,\nso please watch out for runtime speed.\nThere is still a room for improvement, which will be addressed in the near future.</p>\n</li>\n<li>\n<p>Moreover, it might be also a good idea to draw plots from the main code (rather than having a TF op) and add them as image summaries.\nPlease use this library at your best discernment.</p>\n</li>\n</ul>\n<h3>Thread-safety issue</h3>\n<p>Please use <strong>object-oriented</strong> matplotlib APIs (e.g. <code>Figure</code>, <code>AxesSubplot</code>)\ninstead of <a href=\"http://matplotlib.org/api/pyplot_api.html\" rel=\"nofollow\">pyplot</a> APIs (i.e. <code>matplotlib.pyplot</code> or <code>plt.XXX()</code>)\nwhen creating and drawing plots.\nThis is because <a href=\"http://matplotlib.org/api/pyplot_api.html\" rel=\"nofollow\">pyplot</a> APIs are not <em>thread-safe</em>,\nwhile the TensorFlow plot operations are usually executed in multi-threaded manners.</p>\n<p>For example, avoid any use of <code>pyplot</code> (or <code>plt</code>):</p>\n<pre><span class=\"c1\"># DON'T DO LIKE THIS !!!</span>\n<span class=\"k\">def</span> <span class=\"nf\">figure_heatmap</span><span class=\"p\">(</span><span class=\"n\">heatmap</span><span class=\"p\">):</span>\n    <span class=\"n\">fig</span> <span class=\"o\">=</span> <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">figure</span><span class=\"p\">()</span>                 <span class=\"c1\"># &lt;--- NO!</span>\n    <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">imshow</span><span class=\"p\">(</span><span class=\"n\">heatmap</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">fig</span>\n</pre>\n<p>and do it like:</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">figure_heatmap</span><span class=\"p\">(</span><span class=\"n\">heatmap</span><span class=\"p\">):</span>\n    <span class=\"n\">fig</span> <span class=\"o\">=</span> <span class=\"n\">matplotlib</span><span class=\"o\">.</span><span class=\"n\">figure</span><span class=\"o\">.</span><span class=\"n\">Figure</span><span class=\"p\">()</span>   <span class=\"c1\"># or just `fig = tfplot.Figure()`</span>\n    <span class=\"n\">ax</span> <span class=\"o\">=</span> <span class=\"n\">fig</span><span class=\"o\">.</span><span class=\"n\">add_subplot</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>      <span class=\"c1\"># ax: AxesSubplot</span>\n    <span class=\"c1\"># or, just `fig, ax = tfplot.subplots()`</span>\n    <span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">imshow</span><span class=\"p\">(</span><span class=\"n\">heatmap</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">fig</span>                         <span class=\"c1\"># fig: Figure</span>\n</pre>\n<p>For example, <code>tfplot.subplots()</code> is a good replacement for <code>plt.subplots()</code>\nto use inside plot functions.\nAlternatively, you can just take advantage of automatic injection of <code>fig</code> and/or <code>ax</code>.</p>\n<h3>TensorFlow compatibility</h3>\n<p>Currently, <code>tfplot</code> is compatible with TensorFlow 1.x series.\nSupport for eager execution and TF 2.0 will be coming soon!</p>\n<h2>License</h2>\n<p><a href=\"LICENSE\" rel=\"nofollow\">MIT License</a> \u00a9 Jongwook Choi</p>\n\n          </div>"}, "last_serial": 5575695, "releases": {"0.2.0": [{"comment_text": "", "digests": {"md5": "152d7e4242169bfbc0e9af0ae84bee5d", "sha256": "709ac25afe70b26a078a19763bce9b3815985e648cb071e03d6c97ce334bda7c"}, "downloads": -1, "filename": "tensorflow-plot-0.2.0.tar.gz", "has_sig": false, "md5_digest": "152d7e4242169bfbc0e9af0ae84bee5d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12845, "upload_time": "2018-10-20T20:00:24", "upload_time_iso_8601": "2018-10-20T20:00:24.959626Z", "url": "https://files.pythonhosted.org/packages/41/69/350b59d106813db9ac7591db18b3eedea94894fe732bf897bd9aca74b0b1/tensorflow-plot-0.2.0.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "45f4e3ad8a03a36c6b5cb096b65decff", "sha256": "7749e2eee621712c168bc8e0cfb25f8438bcc88665a20a12b6bd192a88c8036e"}, "downloads": -1, "filename": "tensorflow-plot-0.3.0.tar.gz", "has_sig": false, "md5_digest": "45f4e3ad8a03a36c6b5cb096b65decff", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22379, "upload_time": "2019-02-23T23:14:41", "upload_time_iso_8601": "2019-02-23T23:14:41.374952Z", "url": "https://files.pythonhosted.org/packages/da/d0/95c6e93a4db54b8e6b2c2514b84838aa9f1f0f25d15eccac908fe5266831/tensorflow-plot-0.3.0.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "2be7bac7e8df63582e990b7c8f1df98e", "sha256": "420f2e002a1a580c670659d063ac85f2ba3fce36e70ece32afd43da02e15f336"}, "downloads": -1, "filename": "tensorflow-plot-0.3.1.tar.gz", "has_sig": false, "md5_digest": "2be7bac7e8df63582e990b7c8f1df98e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22873, "upload_time": "2019-05-02T01:51:30", "upload_time_iso_8601": "2019-05-02T01:51:30.864480Z", "url": "https://files.pythonhosted.org/packages/f0/bc/a591b7deb756d9ff8525fb79049258e8647b2bbb97628f52510bda7a81f6/tensorflow-plot-0.3.1.tar.gz", "yanked": false}], "0.3.2": [{"comment_text": "", "digests": {"md5": "3a110723b7dbda4bdc20a6979706f2e6", "sha256": "3ebfd460324490127aedbb4f2935ba04fe1553b619cd06ef877dbd9bef194a43"}, "downloads": -1, "filename": "tensorflow-plot-0.3.2.tar.gz", "has_sig": false, "md5_digest": "3a110723b7dbda4bdc20a6979706f2e6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23010, "upload_time": "2019-07-24T04:45:26", "upload_time_iso_8601": "2019-07-24T04:45:26.294763Z", "url": "https://files.pythonhosted.org/packages/14/72/df7fa1d0cd68aa6f4ab525cea794713367bf774ce311bdca59e441be91e5/tensorflow-plot-0.3.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "3a110723b7dbda4bdc20a6979706f2e6", "sha256": "3ebfd460324490127aedbb4f2935ba04fe1553b619cd06ef877dbd9bef194a43"}, "downloads": -1, "filename": "tensorflow-plot-0.3.2.tar.gz", "has_sig": false, "md5_digest": "3a110723b7dbda4bdc20a6979706f2e6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23010, "upload_time": "2019-07-24T04:45:26", "upload_time_iso_8601": "2019-07-24T04:45:26.294763Z", "url": "https://files.pythonhosted.org/packages/14/72/df7fa1d0cd68aa6f4ab525cea794713367bf774ce311bdca59e441be91e5/tensorflow-plot-0.3.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:56:07 2020"}