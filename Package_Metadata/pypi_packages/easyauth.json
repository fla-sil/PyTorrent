{"info": {"author": "Sherman Liu", "author_email": "qingfeng0820@sina.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2.7", "Topic :: Utilities"], "description": "easyauth: A toolkit to set up web application with authentication and authorization functionalities based on Django\r\n====================================================================================================================\r\nDon't need any code for authentication and authorization checking, just use configuration to enable authorization\r\n\r\n.. image:: https://img.shields.io/travis/qingfeng0820/easyauth/master.svg\r\n    :target: https://travis-ci.org/qingfeng0820/easyauth\r\n\r\n\r\n`\u4e2d\u6587README <https://github.com/qingfeng0820/easyauth/blob/master/README-CN.rst>`_\r\n\r\nLicense\r\n-------\r\n\r\n`BSD License <LICENSE.txt>`_\r\n\r\n\r\nSource code\r\n-----------\r\n`Github <https://github.com/qingfeng0820/easyauth>`_\r\n\r\n\r\nDevelop environment\r\n-------------------\r\n- Python 2.7\r\n- pip\r\n- npm (can install nodejs which contains npm)\r\n\r\n\r\nInstallation\r\n------------\r\n\r\nfrom pypi\r\n\r\n.. code-block:: shell\r\n\r\n    pip install easyauth\r\n\r\n\r\n\r\nSetup your own project via easyauth\r\n-----------------------------------\r\n\r\n1. Create your app by below command(it will create project under current folder):\r\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n\r\n.. code-block:: shell\r\n\r\n    > make_project {your_app_name}\r\n\r\n2. Setup backend which based on Django\r\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n\r\n1). Change configurations of the easyauth and Django based project\r\n    - You can keep the configuration as default if you just want to trial\r\n    - Main configurations are in {your_app_name}/settings/production.py\r\n    - {your_app_name}/settings/local.py is used for some special configuration only need enabled in development\r\n\r\n2). Change your User mode located in {your_app_name}/models.py\r\n    - see below example code (don't need add serializer, view and permission classes for User model)\r\n\r\n.. code-block:: python\r\n\r\n    from easyauth.models import AbstractUser\r\n\r\n\r\n    class User(AbstractUser):\r\n        # you can define additional fields\r\n        {Other field} = models.CharField(...)\r\n        # You can specify the some other field to be USERNAME_FIELD.\r\n        # USERNAME_FIELD is unique field to identity an user for login\r\n        # Default is phone\r\n        USERNAME_FIELD = {Other field to stand for username}\r\n\r\n        # You can specify the USER_DEPART_FIELD field if you user model is grouped by department or company\r\n        # For with depart field case, the permitted user can only maintain the users in the same department.\r\n        # Default value is None for USER_DEPART_FIELD.\r\n        USER_DEPART_FIELD = \"company\"\r\n        company = models.ForeignKey(Company, related_name='users', null=True)\r\n\r\n        # Filter properties are defined in view classed for filtering.\r\n        # But the User model related views are defined in easyauth, you cannot create or change filter properties\r\n        # Thus there is another way to add filter properties like below in user model\r\n        FILTER_FIELDS = ('company__name', ...)\r\n        SEARCH_FIELDS = (...)\r\n        ORDERING_FIELDS = ('company__name', ...)\r\n\r\n        # PS: You can have no implementation of this class (just add 'pass' in this class) if you just want to trial.\r\n\r\n3). Create your own models, serializers and views\r\n    - modify {your_app_name}/models.py to add your own models\r\n\r\n.. code-block:: python\r\n\r\n    class DummyModel(models.Model):\r\n        name = models.CharField(max_length=100, unique=True)\r\n        created_time = models.DateTimeField(auto_now_add=True)\r\n\r\n        class Meta:\r\n            permissions = (\r\n                (\"maintain_dummy_model\", _(\"Can maintain dummy model\")),   # <=== define a permission in your model\r\n            )\r\n            ordering = ('id', )\r\n\r\n- create {your_app_name}/serializers.py to add your own serializers\r\n\r\n.. code-block:: python\r\n\r\n        from rest_framework import serializers\r\n\r\n        from {your_app_name} import models\r\n\r\n        class DummyModelSerializer(serializers.ModelSerializer):\r\n\r\n            class Meta:\r\n                model = models.DummyModel\r\n                fields = '__all__'\r\n                depth = 1\r\n\r\n\r\n- create {your_app_name}/permissions.py to add your own permission classes\r\n\r\n.. code-block:: python\r\n\r\n    from easyauth.permissions import DBBasedPermissionsAll\r\n\r\n\r\n    class DummyModelMaintainPermission(DBBasedPermissionsAll):\r\n        required_permission_names = [\"{your_app_name}.maintain_dummy_model\", ]    # <=== permission check class for the defined permission in your model\r\n\r\n- create {your_app_name}/views.py to add your own views\r\n\r\n.. code-block:: python\r\n\r\n    from rest_framework import viewsets, permissions\r\n\r\n    from {your_app_name} import models, serializers\r\n    from {your_app_name}.permissions import DummyModelMaintainPermission\r\n\r\n    class DummyModelViewSet(viewsets.ModelViewSet):\r\n        queryset = models.DummyModel.objects.all()\r\n        serializer_class = serializers.DummyModelSerializer\r\n        permission_classes = (DummyModelMaintainPermission, )                   # <=== use the defined permission class\r\n        # Or you can the common permission class DjangoModelPermissions instead, which provided by Rest framework lib\r\n        #  permission_classes = (permissions.DjangoModelPermissions, )\r\n\r\n- modify {your_app_name}/urls.py to add your API urls\r\n\r\n.. code-block:: python\r\n\r\n    from django.conf.urls import url, include\r\n    from rest_framework import routers\r\n\r\n    from easyauth import urls as auth_urls\r\n    from easyauth import admin_urls as user_admin_urls\r\n\r\n    from {your_app_name} import views\r\n\r\n    router = routers.DefaultRouter(trailing_slash=False)\r\n    # app apis\r\n    router.register(r'api/dummy_models', views.DummyModelViewSet, base_name='dummy_model') # <=== define your API url\r\n\r\n    urlpatterns = router.urls\r\n\r\n    urlpatterns += [\r\n        # url(r'^admin/', admin.site.urls),\r\n        # auth apis including login, password reset\r\n        url(r'^api-auth/', include(auth_urls)),            # <=== authentication APIs provided by easyauth\r\n        # user crud apis - only used by administrator\r\n        url(r'^api/', include(user_admin_urls)),           # <=== user/group/permission admin APIs provided by easyauth\r\n    ]\r\n\r\n4). Go to {your_app_name} folder to initiate database\r\n    - run below commands:\r\n\r\n.. code-block:: shell\r\n\r\n    {your_app_name}> python manage.py makemigrations\r\n    {your_app_name}> python manage.py makemigrations {your_app_name}\r\n    {your_app_name}> python manage.py migrate\r\n\r\n5). Then create a superuser\r\n    - run below command:\r\n\r\n.. code-block:: shell\r\n\r\n    {your_app_name}> python manage.py createsuperuser\r\n\r\n6). Start your backend for your development test\r\n    - run below command:\r\n\r\n.. code-block:: shell\r\n\r\n    {your_app_name}> python manage.py runserver 0.0.0.0:80\r\n\r\n7). Have a test\r\n    - Maintain authentication and authorization test\r\n        - User the created super user to login\r\n        - Create roles/groups\r\n        - Create users, and assign them proper roles or permissions\r\n    - All APIs provided by easyauth\r\n        - user group(role) admin APIs (super user or have related permissions)\r\n            - /api/groups GET: Get all user groups (super user or have 'query_group' permission)\r\n            - /api/groups POST: Create an user group  (super user)\r\n            - /api/groups/[group_id] GET: Get an user group  (super user or have 'query_group' permission)\r\n            - /api/groups/[group_id] PUT or PATCH: Modify an user group (super user)\r\n            - /api/groups/[group_id] DELETE: Delete an user group (super user)\r\n        - user admin APIs (super user or have related permissions, if department enabled for user model, user can only maintain users in the same department if he/she has related permissions)\r\n            - /api/users GET: Get all users (super user or have 'query_user' permission)\r\n            - /api/users POST: Create an user (super user or have 'create_user' permission)\r\n            - /api/users/[user_id] GET: Get a specific user (super user or have 'query_user' permission)\r\n            - /api/users/[user_id] PUT or PATCH: Modify a specific user  (super user or have 'change_user' permission)\r\n            - /api/users/[user_id] DELETE: Delete a specific user   (super user or have 'delete_user' permission)\r\n            - /api/users/[user_id]/reset/password PUT: Reset to default password for a specific user (super user or have 'change_user' permission)\r\n        - query permission APIs (permissions are defined in models code)\r\n            - /api/permissions GET: Get all permissions (super user or have 'query_permission' permission)\r\n            - /api/permissions/[permission_id] GET: Get a specific permission (super user or have 'query_permission' permission)\r\n        - authentication APIs\r\n            - /api-auth/login POST: User login\r\n            - /api-auth/logout POST (or GET if enabled): User logout\r\n            - /api-auth/me PUT or PATCH: Modify current login user\r\n            - /api-auth/me GET: Get current login user\r\n            - /api-auth/password/change PUT: Change the current login user's password\r\n            - /api-auth/register POST: Register User (This API can be disabled by configuration)\r\n        - Your own APIs\r\n            - ...\r\n\r\n\r\n3. Setup frontend if you need admin dashboard, which based Vue + Element-UI\r\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n1). Go to {your_app_name}/vue-ui folder, and run below command to install dependency libs\r\n    - run below command:\r\n\r\n.. code-block:: shell\r\n\r\n    {your_app_name}/vue-ui> npm install\r\n\r\n2). Configure your backend baseURL by changing {your_app_name}/vue-ui/src/components/config.js\r\n    - see below code:\r\n\r\n.. code-block:: javascript\r\n\r\n    var baseURL = 'http://localhost';                // <=== baseURL for production\r\n    if (process.env.NODE_ENV == 'development') {\r\n        baseURL = 'http://localhost';                // <=== baseURL for development\r\n    }\r\n    ...\r\n\r\n3). Change theme by alias in {your_app_name}/vue-ui/build/webpack.base.conf.js\r\n    - Change the value of alias 'THEME'\r\n    - Now support two themes\r\n        - resolve('src/themes/default')             // <=== default theme\r\n        - resolve('src/themes/green')               // <=== green theme\r\n\r\n4). Create your own vue pages to {your_app_name}/vue-ui/src/components/page/\r\n    - Common pages are under {your_app_name}/vue-ui/src/components/common/\r\n\r\n5). Change the menu in left slider bar by changing {your_app_name}/vue-ui/src/components/menus.js\r\n    - see below example code:\r\n\r\n.. code-block:: javascript\r\n\r\n    import i18n from '../i18n/i18n'\r\n    import permission from './common/permission'\r\n    import Dashboard from '@/components/page/Dashboard'\r\n    import UserAdmin from '@/components/page/UserAdmin'\r\n    import RoleAdmin from '@/components/page/RoleAdmin'     // RoleAdmin and UserAdmin are default pages, you can just use it.\r\n    import YourSubMenuItem from '@/components/page/YourSubMenuItem'\r\n    import YourSubSubMenuItem from '@/components/page/YourSubSubMenuItem'\r\n\r\n    var menu = [\r\n            {\r\n                name: 'Dashboard',\r\n                path: '/dashboard',\r\n                component: Dashboard,\r\n                icon: 'el-icon-lx-home',\r\n                meta: {\r\n                    getTitle: function() {\r\n                        return i18n.t(\"page.homeTitle\")\r\n                    },\r\n                },\r\n            },\r\n            {\r\n                name: 'UserAdmin',\r\n                path: '/userAdmin',\r\n                component: UserAdmin,\r\n                icon: 'el-icon-lx-people',\r\n                meta: {\r\n                    getTitle:  function() {\r\n                        return i18n.t(\"page.userAdminTitle\")\r\n                    },\r\n                    // must have all permissions listed below to access this menu item\r\n                    requiredPermissions: ['query_group', 'query_permission', 'add_user', 'change_user', 'delete_user'],\r\n                },\r\n            },\r\n            {\r\n                name: 'RoleAdmin',\r\n                path: '/roleAdmin',\r\n                component: RoleAdmin,\r\n                icon: 'el-icon-lx-group',\r\n                meta: {\r\n                        getTitle: function() {\r\n                            return i18n.t(\"page.roleAdminTitle\")\r\n                        },\r\n                        permissionCheck: function(user) {\r\n                            return permission.isSuperUser(user)\r\n                        }\r\n                    },\r\n            },\r\n            {\r\n                name: 'YourFolderMenu',\r\n                icon: 'xxx',\r\n                meta: {\r\n                        getTitle: function() {\r\n                            return \"Your Folder Menu\"\r\n                        },\r\n                        notRequireAuth: true,                       // <=== this configuration item means this menu can access by anonymous user\r\n                    },\r\n                subs: [\r\n                      {\r\n                          name: 'YourSubFolderMenu',\r\n                          meta: {\r\n                              getTitle: function() {\r\n                                 return \"Your Sub Folder Menu\"\r\n                              },\r\n                              requiredPermissions: [...],\r\n                          },\r\n                          subs: [\r\n                               // only can support three levels menu\r\n                               {\r\n                                   name: 'YourSubSubMenuItem',\r\n                                   path: '/yourSubSubMenuItem',\r\n                                   component: YourSubSubMenuItem,\r\n                                   meta: {\r\n                                       getTitle: function() {\r\n                                           return \"Your Sub Sub Menu Item\"\r\n                                       },\r\n                                   },\r\n                               },\r\n                               ...\r\n\r\n                          ]\r\n                      },\r\n                      {\r\n                          name: 'YourSubMenuItem',\r\n                          path: '/yourSubMenuItem',\r\n                          component: YourSubMenuItem,\r\n                          meta: {\r\n                               getTitle: function() {\r\n                                   return \"Your Sub Menu Item\"\r\n                               },\r\n                               requiredPermissions: ['maintain_dummy_model', ...],    // <=== Use the defined permission in your model\r\n                          },\r\n                      },\r\n                      ...\r\n                ]\r\n            },\r\n    ]\r\n\r\n\r\n- screen shot for above menu\r\n.. image:: img/ui.JPG\r\n\r\n6). Modify UserAdmin.vue page\r\n    - If you have additional fields in your User model, you can change the UserAdmin.vue to support them\r\n        - Add columns in <el-table> for additional fields\r\n        - Add form items in <el-dialog> of editing user for additional fields\r\n        - Change related javascript code in that page\r\n\r\n7). Build you pages\r\n    - run below command:\r\n\r\n.. code-block:: shell\r\n\r\n    {your_app_name}/vue-ui> npm run build\r\n\r\n8). Deploy build results to static folder\r\n    - run below commands:\r\n\r\n.. code-block:: shell\r\n\r\n    {your_app_name}> mkdir static\r\n    {your_app_name}> cp vue-ui/build/* static/\r\n\r\n9). Access you pages\r\n    - Visit http://localhost/static/index.html\r\n\r\n10). if you are focus on pages development, you can use use dev model instead of steps 7 - 9\r\n    - run below command, then visit http://localhost:8080:\r\n\r\n.. code-block:: shell\r\n\r\n    {your_app_name}/vue-ui> npm run build\r\n\r\n\r\nMore configurations\r\n-------------------\r\n\r\n\r\nLanguage configuration\r\n^^^^^^^^^^^^^^^^^^^^^^^^\r\n- Change to be Chinese\r\n    - Change LANGUAGE_CODE = 'zh-hans' in {your app name}/settings/production.py (backend)\r\n    - Change defaultLangCode: \"zh-hans\" in {your_app_name}/vue-ui/src/components/config.js (frontend)\r\n\r\n.. code-block:: javascript\r\n\r\n    ...\r\n    const config = {\r\n        loginFieldName: \"phone\",                         // <=== should keep this value same as USERNAME_FIELD in your User model\r\n        backendBaseURL: baseURL,\r\n        requestTimeout: 10000,\r\n        defaultLangCode: \"zh-hans\",                      // <=== Change here for frontend\r\n    }\r\n    ...\r\n\r\n\r\neasyauth Configuration\r\n^^^^^^^^^^^^^^^^^^^^^^^^\r\n\r\nChange EASYAUTH_CONF in {your_app_name}/settings/product.py if you need:\r\n\r\n.. code-block:: python\r\n\r\n    EASYAUTH_CONF = {\r\n        'USER_DEFAULT_PWD_MAINTAIN_BY_ADMIN': \"12345678\",\r\n        'ACCOUNT_LOGOUT_ON_GET': False,\r\n        'DISABLE_REGISTER': False,\r\n        'LANG_PARAM': 'lang',\r\n    }\r\n\r\n+----------------------------------------+------------+--------------------------------------------------------------+\r\n| Configuration Item                     | Type       | Description                                                  |\r\n+========================================+============+==============================================================+\r\n| USER_DEFAULT_PWD_MAINTAIN_BY_ADMIN     | string     | Define the default password for maintaining by administrator.|\r\n|                                        |            |                                                              |\r\n|                                        |            | Default value is 123456 for absent                           |\r\n+----------------------------------------+------------+--------------------------------------------------------------+\r\n| ACCOUNT_LOGOUT_ON_GET                  | bool       | Switch for enabling GET method for logout API.               |\r\n|                                        |            |                                                              |\r\n|                                        |            | Default value is False for absent                            |\r\n+----------------------------------------+------------+--------------------------------------------------------------+\r\n| DISABLE_REGISTER                       | bool       | Switch for disabling register API.                           |\r\n|                                        |            |                                                              |\r\n|                                        |            | Default value is False for absent                            |\r\n+----------------------------------------+------------+--------------------------------------------------------------+\r\n| LANG_PARAM                             | string     | Set the language parameter name in http request.             |\r\n|                                        |            | (Usually don't need to change it)                            |\r\n|                                        |            |                                                              |\r\n|                                        |            | Default value is lang, it will be used like                  |\r\n|                                        |            | http://localhost/api/users?lang=zh-hans                      |\r\n|                                        |            |                                                              |\r\n|                                        |            | Tips: Keep the value of lang_param in                        |\r\n|                                        |            | {your_app_name}/vue-ui/src/components/common/easyauth.js     |\r\n|                                        |            | same with this configuration value.                          |\r\n+----------------------------------------+------------+--------------------------------------------------------------+\r\n\r\nMore examples please see the test app in this repo\r\n\r\n\r\n\r\n\r\n\r\n\r\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/qingfeng0820/easyauth", "keywords": "Authentication based on Django,Authorization based on Django,Python web application Auth", "license": "BSD", "maintainer": "Sherman Liu", "maintainer_email": "qingfeng0820@sina.com", "name": "easyauth", "package_url": "https://pypi.org/project/easyauth/", "platform": "all", "project_url": "https://pypi.org/project/easyauth/", "project_urls": {"Homepage": "https://github.com/qingfeng0820/easyauth"}, "release_url": "https://pypi.org/project/easyauth/0.1.3/", "requires_dist": ["django (==1.9)", "djangorestframework (==3.7)", "django-cors-headers", "django-filter (==1.1.0)"], "requires_python": "", "summary": "A toolkit to set up web application with authentication and authorization functionalities based on Django.", "version": "0.1.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            easyauth: A toolkit to set up web application with authentication and authorization functionalities based on Django\n<br>====================================================================================================================\n<br>Don't need any code for authentication and authorization checking, just use configuration to enable authorization\n<br>\n<br>.. image:: https://img.shields.io/travis/qingfeng0820/easyauth/master.svg\n<br>    :target: https://travis-ci.org/qingfeng0820/easyauth\n<br>\n<br>\n<br>`\u4e2d\u6587README &lt;https://github.com/qingfeng0820/easyauth/blob/master/README-CN.rst&gt;`_\n<br>\n<br>License\n<br>-------\n<br>\n<br>`BSD License &lt;LICENSE.txt&gt;`_\n<br>\n<br>\n<br>Source code\n<br>-----------\n<br>`Github &lt;https://github.com/qingfeng0820/easyauth&gt;`_\n<br>\n<br>\n<br>Develop environment\n<br>-------------------\n<br>- Python 2.7\n<br>- pip\n<br>- npm (can install nodejs which contains npm)\n<br>\n<br>\n<br>Installation\n<br>------------\n<br>\n<br>from pypi\n<br>\n<br>.. code-block:: shell\n<br>\n<br>    pip install easyauth\n<br>\n<br>\n<br>\n<br>Setup your own project via easyauth\n<br>-----------------------------------\n<br>\n<br>1. Create your app by below command(it will create project under current folder):\n<br>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n<br>\n<br>.. code-block:: shell\n<br>\n<br>    &gt; make_project {your_app_name}\n<br>\n<br>2. Setup backend which based on Django\n<br>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n<br>\n<br>1). Change configurations of the easyauth and Django based project\n<br>    - You can keep the configuration as default if you just want to trial\n<br>    - Main configurations are in {your_app_name}/settings/production.py\n<br>    - {your_app_name}/settings/local.py is used for some special configuration only need enabled in development\n<br>\n<br>2). Change your User mode located in {your_app_name}/models.py\n<br>    - see below example code (don't need add serializer, view and permission classes for User model)\n<br>\n<br>.. code-block:: python\n<br>\n<br>    from easyauth.models import AbstractUser\n<br>\n<br>\n<br>    class User(AbstractUser):\n<br>        # you can define additional fields\n<br>        {Other field} = models.CharField(...)\n<br>        # You can specify the some other field to be USERNAME_FIELD.\n<br>        # USERNAME_FIELD is unique field to identity an user for login\n<br>        # Default is phone\n<br>        USERNAME_FIELD = {Other field to stand for username}\n<br>\n<br>        # You can specify the USER_DEPART_FIELD field if you user model is grouped by department or company\n<br>        # For with depart field case, the permitted user can only maintain the users in the same department.\n<br>        # Default value is None for USER_DEPART_FIELD.\n<br>        USER_DEPART_FIELD = \"company\"\n<br>        company = models.ForeignKey(Company, related_name='users', null=True)\n<br>\n<br>        # Filter properties are defined in view classed for filtering.\n<br>        # But the User model related views are defined in easyauth, you cannot create or change filter properties\n<br>        # Thus there is another way to add filter properties like below in user model\n<br>        FILTER_FIELDS = ('company__name', ...)\n<br>        SEARCH_FIELDS = (...)\n<br>        ORDERING_FIELDS = ('company__name', ...)\n<br>\n<br>        # PS: You can have no implementation of this class (just add 'pass' in this class) if you just want to trial.\n<br>\n<br>3). Create your own models, serializers and views\n<br>    - modify {your_app_name}/models.py to add your own models\n<br>\n<br>.. code-block:: python\n<br>\n<br>    class DummyModel(models.Model):\n<br>        name = models.CharField(max_length=100, unique=True)\n<br>        created_time = models.DateTimeField(auto_now_add=True)\n<br>\n<br>        class Meta:\n<br>            permissions = (\n<br>                (\"maintain_dummy_model\", _(\"Can maintain dummy model\")),   # &lt;=== define a permission in your model\n<br>            )\n<br>            ordering = ('id', )\n<br>\n<br>- create {your_app_name}/serializers.py to add your own serializers\n<br>\n<br>.. code-block:: python\n<br>\n<br>        from rest_framework import serializers\n<br>\n<br>        from {your_app_name} import models\n<br>\n<br>        class DummyModelSerializer(serializers.ModelSerializer):\n<br>\n<br>            class Meta:\n<br>                model = models.DummyModel\n<br>                fields = '__all__'\n<br>                depth = 1\n<br>\n<br>\n<br>- create {your_app_name}/permissions.py to add your own permission classes\n<br>\n<br>.. code-block:: python\n<br>\n<br>    from easyauth.permissions import DBBasedPermissionsAll\n<br>\n<br>\n<br>    class DummyModelMaintainPermission(DBBasedPermissionsAll):\n<br>        required_permission_names = [\"{your_app_name}.maintain_dummy_model\", ]    # &lt;=== permission check class for the defined permission in your model\n<br>\n<br>- create {your_app_name}/views.py to add your own views\n<br>\n<br>.. code-block:: python\n<br>\n<br>    from rest_framework import viewsets, permissions\n<br>\n<br>    from {your_app_name} import models, serializers\n<br>    from {your_app_name}.permissions import DummyModelMaintainPermission\n<br>\n<br>    class DummyModelViewSet(viewsets.ModelViewSet):\n<br>        queryset = models.DummyModel.objects.all()\n<br>        serializer_class = serializers.DummyModelSerializer\n<br>        permission_classes = (DummyModelMaintainPermission, )                   # &lt;=== use the defined permission class\n<br>        # Or you can the common permission class DjangoModelPermissions instead, which provided by Rest framework lib\n<br>        #  permission_classes = (permissions.DjangoModelPermissions, )\n<br>\n<br>- modify {your_app_name}/urls.py to add your API urls\n<br>\n<br>.. code-block:: python\n<br>\n<br>    from django.conf.urls import url, include\n<br>    from rest_framework import routers\n<br>\n<br>    from easyauth import urls as auth_urls\n<br>    from easyauth import admin_urls as user_admin_urls\n<br>\n<br>    from {your_app_name} import views\n<br>\n<br>    router = routers.DefaultRouter(trailing_slash=False)\n<br>    # app apis\n<br>    router.register(r'api/dummy_models', views.DummyModelViewSet, base_name='dummy_model') # &lt;=== define your API url\n<br>\n<br>    urlpatterns = router.urls\n<br>\n<br>    urlpatterns += [\n<br>        # url(r'^admin/', admin.site.urls),\n<br>        # auth apis including login, password reset\n<br>        url(r'^api-auth/', include(auth_urls)),            # &lt;=== authentication APIs provided by easyauth\n<br>        # user crud apis - only used by administrator\n<br>        url(r'^api/', include(user_admin_urls)),           # &lt;=== user/group/permission admin APIs provided by easyauth\n<br>    ]\n<br>\n<br>4). Go to {your_app_name} folder to initiate database\n<br>    - run below commands:\n<br>\n<br>.. code-block:: shell\n<br>\n<br>    {your_app_name}&gt; python manage.py makemigrations\n<br>    {your_app_name}&gt; python manage.py makemigrations {your_app_name}\n<br>    {your_app_name}&gt; python manage.py migrate\n<br>\n<br>5). Then create a superuser\n<br>    - run below command:\n<br>\n<br>.. code-block:: shell\n<br>\n<br>    {your_app_name}&gt; python manage.py createsuperuser\n<br>\n<br>6). Start your backend for your development test\n<br>    - run below command:\n<br>\n<br>.. code-block:: shell\n<br>\n<br>    {your_app_name}&gt; python manage.py runserver 0.0.0.0:80\n<br>\n<br>7). Have a test\n<br>    - Maintain authentication and authorization test\n<br>        - User the created super user to login\n<br>        - Create roles/groups\n<br>        - Create users, and assign them proper roles or permissions\n<br>    - All APIs provided by easyauth\n<br>        - user group(role) admin APIs (super user or have related permissions)\n<br>            - /api/groups GET: Get all user groups (super user or have 'query_group' permission)\n<br>            - /api/groups POST: Create an user group  (super user)\n<br>            - /api/groups/[group_id] GET: Get an user group  (super user or have 'query_group' permission)\n<br>            - /api/groups/[group_id] PUT or PATCH: Modify an user group (super user)\n<br>            - /api/groups/[group_id] DELETE: Delete an user group (super user)\n<br>        - user admin APIs (super user or have related permissions, if department enabled for user model, user can only maintain users in the same department if he/she has related permissions)\n<br>            - /api/users GET: Get all users (super user or have 'query_user' permission)\n<br>            - /api/users POST: Create an user (super user or have 'create_user' permission)\n<br>            - /api/users/[user_id] GET: Get a specific user (super user or have 'query_user' permission)\n<br>            - /api/users/[user_id] PUT or PATCH: Modify a specific user  (super user or have 'change_user' permission)\n<br>            - /api/users/[user_id] DELETE: Delete a specific user   (super user or have 'delete_user' permission)\n<br>            - /api/users/[user_id]/reset/password PUT: Reset to default password for a specific user (super user or have 'change_user' permission)\n<br>        - query permission APIs (permissions are defined in models code)\n<br>            - /api/permissions GET: Get all permissions (super user or have 'query_permission' permission)\n<br>            - /api/permissions/[permission_id] GET: Get a specific permission (super user or have 'query_permission' permission)\n<br>        - authentication APIs\n<br>            - /api-auth/login POST: User login\n<br>            - /api-auth/logout POST (or GET if enabled): User logout\n<br>            - /api-auth/me PUT or PATCH: Modify current login user\n<br>            - /api-auth/me GET: Get current login user\n<br>            - /api-auth/password/change PUT: Change the current login user's password\n<br>            - /api-auth/register POST: Register User (This API can be disabled by configuration)\n<br>        - Your own APIs\n<br>            - ...\n<br>\n<br>\n<br>3. Setup frontend if you need admin dashboard, which based Vue + Element-UI\n<br>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n<br>1). Go to {your_app_name}/vue-ui folder, and run below command to install dependency libs\n<br>    - run below command:\n<br>\n<br>.. code-block:: shell\n<br>\n<br>    {your_app_name}/vue-ui&gt; npm install\n<br>\n<br>2). Configure your backend baseURL by changing {your_app_name}/vue-ui/src/components/config.js\n<br>    - see below code:\n<br>\n<br>.. code-block:: javascript\n<br>\n<br>    var baseURL = 'http://localhost';                // &lt;=== baseURL for production\n<br>    if (process.env.NODE_ENV == 'development') {\n<br>        baseURL = 'http://localhost';                // &lt;=== baseURL for development\n<br>    }\n<br>    ...\n<br>\n<br>3). Change theme by alias in {your_app_name}/vue-ui/build/webpack.base.conf.js\n<br>    - Change the value of alias 'THEME'\n<br>    - Now support two themes\n<br>        - resolve('src/themes/default')             // &lt;=== default theme\n<br>        - resolve('src/themes/green')               // &lt;=== green theme\n<br>\n<br>4). Create your own vue pages to {your_app_name}/vue-ui/src/components/page/\n<br>    - Common pages are under {your_app_name}/vue-ui/src/components/common/\n<br>\n<br>5). Change the menu in left slider bar by changing {your_app_name}/vue-ui/src/components/menus.js\n<br>    - see below example code:\n<br>\n<br>.. code-block:: javascript\n<br>\n<br>    import i18n from '../i18n/i18n'\n<br>    import permission from './common/permission'\n<br>    import Dashboard from '@/components/page/Dashboard'\n<br>    import UserAdmin from '@/components/page/UserAdmin'\n<br>    import RoleAdmin from '@/components/page/RoleAdmin'     // RoleAdmin and UserAdmin are default pages, you can just use it.\n<br>    import YourSubMenuItem from '@/components/page/YourSubMenuItem'\n<br>    import YourSubSubMenuItem from '@/components/page/YourSubSubMenuItem'\n<br>\n<br>    var menu = [\n<br>            {\n<br>                name: 'Dashboard',\n<br>                path: '/dashboard',\n<br>                component: Dashboard,\n<br>                icon: 'el-icon-lx-home',\n<br>                meta: {\n<br>                    getTitle: function() {\n<br>                        return i18n.t(\"page.homeTitle\")\n<br>                    },\n<br>                },\n<br>            },\n<br>            {\n<br>                name: 'UserAdmin',\n<br>                path: '/userAdmin',\n<br>                component: UserAdmin,\n<br>                icon: 'el-icon-lx-people',\n<br>                meta: {\n<br>                    getTitle:  function() {\n<br>                        return i18n.t(\"page.userAdminTitle\")\n<br>                    },\n<br>                    // must have all permissions listed below to access this menu item\n<br>                    requiredPermissions: ['query_group', 'query_permission', 'add_user', 'change_user', 'delete_user'],\n<br>                },\n<br>            },\n<br>            {\n<br>                name: 'RoleAdmin',\n<br>                path: '/roleAdmin',\n<br>                component: RoleAdmin,\n<br>                icon: 'el-icon-lx-group',\n<br>                meta: {\n<br>                        getTitle: function() {\n<br>                            return i18n.t(\"page.roleAdminTitle\")\n<br>                        },\n<br>                        permissionCheck: function(user) {\n<br>                            return permission.isSuperUser(user)\n<br>                        }\n<br>                    },\n<br>            },\n<br>            {\n<br>                name: 'YourFolderMenu',\n<br>                icon: 'xxx',\n<br>                meta: {\n<br>                        getTitle: function() {\n<br>                            return \"Your Folder Menu\"\n<br>                        },\n<br>                        notRequireAuth: true,                       // &lt;=== this configuration item means this menu can access by anonymous user\n<br>                    },\n<br>                subs: [\n<br>                      {\n<br>                          name: 'YourSubFolderMenu',\n<br>                          meta: {\n<br>                              getTitle: function() {\n<br>                                 return \"Your Sub Folder Menu\"\n<br>                              },\n<br>                              requiredPermissions: [...],\n<br>                          },\n<br>                          subs: [\n<br>                               // only can support three levels menu\n<br>                               {\n<br>                                   name: 'YourSubSubMenuItem',\n<br>                                   path: '/yourSubSubMenuItem',\n<br>                                   component: YourSubSubMenuItem,\n<br>                                   meta: {\n<br>                                       getTitle: function() {\n<br>                                           return \"Your Sub Sub Menu Item\"\n<br>                                       },\n<br>                                   },\n<br>                               },\n<br>                               ...\n<br>\n<br>                          ]\n<br>                      },\n<br>                      {\n<br>                          name: 'YourSubMenuItem',\n<br>                          path: '/yourSubMenuItem',\n<br>                          component: YourSubMenuItem,\n<br>                          meta: {\n<br>                               getTitle: function() {\n<br>                                   return \"Your Sub Menu Item\"\n<br>                               },\n<br>                               requiredPermissions: ['maintain_dummy_model', ...],    // &lt;=== Use the defined permission in your model\n<br>                          },\n<br>                      },\n<br>                      ...\n<br>                ]\n<br>            },\n<br>    ]\n<br>\n<br>\n<br>- screen shot for above menu\n<br>.. image:: img/ui.JPG\n<br>\n<br>6). Modify UserAdmin.vue page\n<br>    - If you have additional fields in your User model, you can change the UserAdmin.vue to support them\n<br>        - Add columns in &lt;el-table&gt; for additional fields\n<br>        - Add form items in &lt;el-dialog&gt; of editing user for additional fields\n<br>        - Change related javascript code in that page\n<br>\n<br>7). Build you pages\n<br>    - run below command:\n<br>\n<br>.. code-block:: shell\n<br>\n<br>    {your_app_name}/vue-ui&gt; npm run build\n<br>\n<br>8). Deploy build results to static folder\n<br>    - run below commands:\n<br>\n<br>.. code-block:: shell\n<br>\n<br>    {your_app_name}&gt; mkdir static\n<br>    {your_app_name}&gt; cp vue-ui/build/* static/\n<br>\n<br>9). Access you pages\n<br>    - Visit http://localhost/static/index.html\n<br>\n<br>10). if you are focus on pages development, you can use use dev model instead of steps 7 - 9\n<br>    - run below command, then visit http://localhost:8080:\n<br>\n<br>.. code-block:: shell\n<br>\n<br>    {your_app_name}/vue-ui&gt; npm run build\n<br>\n<br>\n<br>More configurations\n<br>-------------------\n<br>\n<br>\n<br>Language configuration\n<br>^^^^^^^^^^^^^^^^^^^^^^^^\n<br>- Change to be Chinese\n<br>    - Change LANGUAGE_CODE = 'zh-hans' in {your app name}/settings/production.py (backend)\n<br>    - Change defaultLangCode: \"zh-hans\" in {your_app_name}/vue-ui/src/components/config.js (frontend)\n<br>\n<br>.. code-block:: javascript\n<br>\n<br>    ...\n<br>    const config = {\n<br>        loginFieldName: \"phone\",                         // &lt;=== should keep this value same as USERNAME_FIELD in your User model\n<br>        backendBaseURL: baseURL,\n<br>        requestTimeout: 10000,\n<br>        defaultLangCode: \"zh-hans\",                      // &lt;=== Change here for frontend\n<br>    }\n<br>    ...\n<br>\n<br>\n<br>easyauth Configuration\n<br>^^^^^^^^^^^^^^^^^^^^^^^^\n<br>\n<br>Change EASYAUTH_CONF in {your_app_name}/settings/product.py if you need:\n<br>\n<br>.. code-block:: python\n<br>\n<br>    EASYAUTH_CONF = {\n<br>        'USER_DEFAULT_PWD_MAINTAIN_BY_ADMIN': \"12345678\",\n<br>        'ACCOUNT_LOGOUT_ON_GET': False,\n<br>        'DISABLE_REGISTER': False,\n<br>        'LANG_PARAM': 'lang',\n<br>    }\n<br>\n<br>+----------------------------------------+------------+--------------------------------------------------------------+\n<br>| Configuration Item                     | Type       | Description                                                  |\n<br>+========================================+============+==============================================================+\n<br>| USER_DEFAULT_PWD_MAINTAIN_BY_ADMIN     | string     | Define the default password for maintaining by administrator.|\n<br>|                                        |            |                                                              |\n<br>|                                        |            | Default value is 123456 for absent                           |\n<br>+----------------------------------------+------------+--------------------------------------------------------------+\n<br>| ACCOUNT_LOGOUT_ON_GET                  | bool       | Switch for enabling GET method for logout API.               |\n<br>|                                        |            |                                                              |\n<br>|                                        |            | Default value is False for absent                            |\n<br>+----------------------------------------+------------+--------------------------------------------------------------+\n<br>| DISABLE_REGISTER                       | bool       | Switch for disabling register API.                           |\n<br>|                                        |            |                                                              |\n<br>|                                        |            | Default value is False for absent                            |\n<br>+----------------------------------------+------------+--------------------------------------------------------------+\n<br>| LANG_PARAM                             | string     | Set the language parameter name in http request.             |\n<br>|                                        |            | (Usually don't need to change it)                            |\n<br>|                                        |            |                                                              |\n<br>|                                        |            | Default value is lang, it will be used like                  |\n<br>|                                        |            | http://localhost/api/users?lang=zh-hans                      |\n<br>|                                        |            |                                                              |\n<br>|                                        |            | Tips: Keep the value of lang_param in                        |\n<br>|                                        |            | {your_app_name}/vue-ui/src/components/common/easyauth.js     |\n<br>|                                        |            | same with this configuration value.                          |\n<br>+----------------------------------------+------------+--------------------------------------------------------------+\n<br>\n<br>More examples please see the test app in this repo\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n          </div>"}, "last_serial": 4991265, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "819558d4074ef9b6ddac004d30751564", "sha256": "d7074ce9dac1b96cbd12e831bda8ea8152008dd053b9230a5b9310233307e35b"}, "downloads": -1, "filename": "easyauth-0.1.0-py2-none-any.whl", "has_sig": false, "md5_digest": "819558d4074ef9b6ddac004d30751564", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 11606, "upload_time": "2018-11-19T02:24:47", "upload_time_iso_8601": "2018-11-19T02:24:47.541618Z", "url": "https://files.pythonhosted.org/packages/f8/c5/c175f2a245245199e65b07b82218ee62193e74da3e7d7442143c75fb2d32/easyauth-0.1.0-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3e044bde38c0d8ca3f146a6dd6321ea3", "sha256": "a5beab1503aa7bb4d3c2273284874a69d64cfb16e650c6bf71d5db649a6c72f8"}, "downloads": -1, "filename": "easyauth-0.1.0.tar.gz", "has_sig": false, "md5_digest": "3e044bde38c0d8ca3f146a6dd6321ea3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8843, "upload_time": "2018-11-19T02:24:50", "upload_time_iso_8601": "2018-11-19T02:24:50.062182Z", "url": "https://files.pythonhosted.org/packages/37/67/4f413673293b6b6f9dd73ce02b236a3874c0886dc3675d385dd1bbe09344/easyauth-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "6cc4ed30176e8286b37e436570e48044", "sha256": "5aee8d6f626693041e6f380c9a0f502e1facb93c174938743600136ea562e450"}, "downloads": -1, "filename": "easyauth-0.1.1-py2-none-any.whl", "has_sig": false, "md5_digest": "6cc4ed30176e8286b37e436570e48044", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 12843, "upload_time": "2018-11-19T15:33:48", "upload_time_iso_8601": "2018-11-19T15:33:48.770058Z", "url": "https://files.pythonhosted.org/packages/c8/39/64054a67568619f79639bb8098d43d153544125d1f66e7c40cf2c1314807/easyauth-0.1.1-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "39376fbd1c0d6e7578eedac126f3e3f6", "sha256": "6739ca3e8acadeabed058f96537b091639a108b41dc7656b4a05509f1fbd390b"}, "downloads": -1, "filename": "easyauth-0.1.1.tar.gz", "has_sig": false, "md5_digest": "39376fbd1c0d6e7578eedac126f3e3f6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9170, "upload_time": "2018-11-19T15:33:50", "upload_time_iso_8601": "2018-11-19T15:33:50.356793Z", "url": "https://files.pythonhosted.org/packages/fe/6c/4f088da8c1f0afec6de7708281b82af48af9060f562cd04bae77f6051b2d/easyauth-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "6859f1f2ddfac8a4f4d42626ba04d2cf", "sha256": "34066027817a57e1a45512467e5d70903130d36b580bbb7aad4dede0d1fe0842"}, "downloads": -1, "filename": "easyauth-0.1.2-py2-none-any.whl", "has_sig": false, "md5_digest": "6859f1f2ddfac8a4f4d42626ba04d2cf", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 315382, "upload_time": "2018-12-28T06:42:58", "upload_time_iso_8601": "2018-12-28T06:42:58.784798Z", "url": "https://files.pythonhosted.org/packages/26/da/8103abe93718bcc67349db8204cde228d39ec8ce3cfbc9f18fa9a9ebe22c/easyauth-0.1.2-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0c742e80547984db6f42d2b17a46e37a", "sha256": "93fa1d26ad458291eadce99f85dbec2a7546dcd8bd84267c17b81e76de45bba3"}, "downloads": -1, "filename": "easyauth-0.1.2.tar.gz", "has_sig": false, "md5_digest": "0c742e80547984db6f42d2b17a46e37a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 288208, "upload_time": "2018-12-28T06:43:01", "upload_time_iso_8601": "2018-12-28T06:43:01.599133Z", "url": "https://files.pythonhosted.org/packages/0e/2e/183622eef5c362288194f7cc019ba6805332c19bf023545c40d82898c591/easyauth-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "035bfcc667b0d3214e3d7068be13b11c", "sha256": "57fb6dc2e0e2ac56d66b5be1be648b494b3e16bae1cd10a1e42f35b515366b2e"}, "downloads": -1, "filename": "easyauth-0.1.3-py2-none-any.whl", "has_sig": false, "md5_digest": "035bfcc667b0d3214e3d7068be13b11c", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 314569, "upload_time": "2019-03-27T08:00:52", "upload_time_iso_8601": "2019-03-27T08:00:52.235361Z", "url": "https://files.pythonhosted.org/packages/51/6d/af3fdaccf29b088ec3a9ff7d1a61771fa955e83e1ae914c8b98b9badba65/easyauth-0.1.3-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f6982078ed59790fb74b5b4516598c67", "sha256": "e06246ef020dd49d1888fec038a431f7ab84cebceeb21d3d21457f9171a383cf"}, "downloads": -1, "filename": "easyauth-0.1.3.tar.gz", "has_sig": false, "md5_digest": "f6982078ed59790fb74b5b4516598c67", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 287761, "upload_time": "2019-03-27T08:00:54", "upload_time_iso_8601": "2019-03-27T08:00:54.505286Z", "url": "https://files.pythonhosted.org/packages/15/4b/31d4d66b6689c5fc935777aa600fc703725954f76803972b4db367beba29/easyauth-0.1.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "035bfcc667b0d3214e3d7068be13b11c", "sha256": "57fb6dc2e0e2ac56d66b5be1be648b494b3e16bae1cd10a1e42f35b515366b2e"}, "downloads": -1, "filename": "easyauth-0.1.3-py2-none-any.whl", "has_sig": false, "md5_digest": "035bfcc667b0d3214e3d7068be13b11c", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 314569, "upload_time": "2019-03-27T08:00:52", "upload_time_iso_8601": "2019-03-27T08:00:52.235361Z", "url": "https://files.pythonhosted.org/packages/51/6d/af3fdaccf29b088ec3a9ff7d1a61771fa955e83e1ae914c8b98b9badba65/easyauth-0.1.3-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f6982078ed59790fb74b5b4516598c67", "sha256": "e06246ef020dd49d1888fec038a431f7ab84cebceeb21d3d21457f9171a383cf"}, "downloads": -1, "filename": "easyauth-0.1.3.tar.gz", "has_sig": false, "md5_digest": "f6982078ed59790fb74b5b4516598c67", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 287761, "upload_time": "2019-03-27T08:00:54", "upload_time_iso_8601": "2019-03-27T08:00:54.505286Z", "url": "https://files.pythonhosted.org/packages/15/4b/31d4d66b6689c5fc935777aa600fc703725954f76803972b4db367beba29/easyauth-0.1.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:48:27 2020"}