{"info": {"author": "Martijn Faassen", "author_email": "faassen@startifact.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Web Environment", "Framework :: Zope :: 3", "Framework :: Zope :: 4", "Intended Audience :: Developers", "License :: OSI Approved :: Zope Public License", "Operating System :: OS Independent", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Database", "Topic :: Internet :: WWW/HTTP", "Topic :: Software Development :: Libraries"], "description": "z3c.saconfig\n************\n\nIntroduction\n============\n\nThis aim of this package is to offer a simple but flexible way to\nconfigure SQLAlchemy's scoped session support using the Zope component\narchitecture. This package is based on ``zope.sqlalchemy``, which\noffers transaction integration between Zope and SQLAlchemy.\n\nWe sketch out two main scenarios here:\n\n* one database per Zope instance.\n\n* one database per site (or Grok application) in a Zope instance\n  (and thus multiple databases per Zope instance).\n\nGloballyScopedSession (one database per Zope instance)\n======================================================\n\nThe simplest way to set up SQLAlchemy for Zope is to have a single\nthread-scoped session that's global to your entire Zope\ninstance. Multiple applications will all share this session. The\nengine is set up with a global utility.\n\nWe use the SQLAlchemy ``sqlalchemy.ext.declarative`` extension to\ndefine some tables and classes::\n\n  >>> from sqlalchemy import *\n  >>> from sqlalchemy.ext.declarative import declarative_base\n  >>> from sqlalchemy.orm import relation\n\n  >>> Base = declarative_base()\n  >>> class User(Base):\n  ...     __tablename__ = 'test_users'\n  ...     id = Column('id', Integer, primary_key=True)\n  ...     name = Column('name', String(50))\n  ...     addresses = relation(\"Address\", backref=\"user\")\n  >>> class Address(Base):\n  ...     __tablename__ = 'test_addresses'\n  ...     id = Column('id', Integer, primary_key=True)\n  ...     email = Column('email', String(50))\n  ...     user_id = Column('user_id', Integer, ForeignKey('test_users.id'))\n\nSo far this doesn't differ from the ``zope.sqlalchemy`` example. We\nnow arrive at the first difference. Instead of making the engine\ndirectly, we can set up the engine factory as a (global) utility. This\nutility makes sure an engine is created and cached for us.\n\n  >>> from z3c.saconfig import EngineFactory\n  >>> engine_factory = EngineFactory(TEST_DSN)\n\nYou can pass the parameters you'd normally pass to\n``sqlalchemy.create_engine`` to ``EngineFactory``.\n\nWe now register the engine factory as a global utility using\n``zope.component``. Normally you'd use either ZCML or Grok to do this\nconfirmation, but we'll do it manually here::::\n\n  >>> from zope import component\n  >>> from z3c.saconfig.interfaces import IEngineFactory\n  >>> component.provideUtility(engine_factory, provides=IEngineFactory)\n\nNote that setting up an engine factory is not actually necessary in\nthe globally scoped use case. You could also just create the engine as\na global and pass it as ``bind`` when you create the\n``GloballyScopedSession`` later.\n\nLet's look up the engine by calling the factory and create the tables\nin our test database::\n\n  >>> engine = engine_factory()\n  >>> Base.metadata.create_all(engine)\n\nNow as for the second difference from ``zope.sqlalchemy``: how the\nsession is set up and used. We'll use the ``GloballyScopedSession``\nutility to implement our session creation::\n\n  >>> from z3c.saconfig import GloballyScopedSession\n\nWe give the constructor to ``GloballyScopedSession`` the parameters\nyou'd normally give to ``sqlalchemy.orm.create_session``, or\n``sqlalchemy.orm.sessionmaker``::\n\n  >>> utility = GloballyScopedSession(twophase=TEST_TWOPHASE)\n\n``GlobalScopedSession`` looks up the engine using ``IEngineFactory``\nif you don't supply your own ``bind``\nargument. ``GloballyScopedSession`` also automatically sets up the\n``autocommit``, ``autoflush`` and ``extension`` parameters to be the\nright ones for Zope integration, so normally you wouldn't need to\nsupply these, but you could pass in your own if you do need it.\n\nWe now register this as an ``IScopedSession`` utility::\n\n  >>> from z3c.saconfig.interfaces import IScopedSession\n  >>> component.provideUtility(utility, provides=IScopedSession)\n\nWe are done with configuration now. As you have seen it involves\nsetting up two utilities, ``IEngineFactory`` and ``IScopedSession``,\nwhere only the latter is really needed in this globally shared session\nuse case.\n\nAfter the ``IScopedSession`` utility is registered, one can import the\n``Session`` class from z3c.saconfig.  This ``Session`` class is like\nthe one you'd produce with ``sessionmaker`` from\nSQLAlchemy. `z3c.saconfig.Session`` is intended to be the only\n``Session`` class you'll ever need, as all configuration and Zope\nintegration is done automatically for you by ``z3c.saconfig``,\nappropriate the context in Zope where you use it. There is no need to\ncreate ``Session`` classes yourself with ``sessionmaker`` or\n``scoped_sesion`` anymore.\n\nWe can now use the ``Session`` class to create a session which will\nbehave according to the utility we provided::\n\n  >>> from z3c.saconfig import Session\n  >>> session = Session()\n\nNow things go the usual ``zope.sqlalchemy`` way, which is like\n``SQLAlchemy`` except you can use Zope's ``transaction`` module::\n\n  >>> session.query(User).all()\n  []\n  >>> import transaction\n  >>> session.add(User(name='bob'))\n  >>> transaction.commit()\n\n  >>> session = Session()\n  >>> bob = session.query(User).all()[0]\n  >>> bob.name == 'bob'\n  True\n  >>> bob.addresses\n  []\n\nEvents\n======\n\nWhen a new engine is created by an ``EngineFactory``, an\n``IEngineCreatedEvent`` is fired. This event has an attribute\n``engine`` that contains the engine that was just created::\n\n  >>> from z3c.saconfig.interfaces import IEngineCreatedEvent\n  >>> @component.adapter(IEngineCreatedEvent)\n  ... def createdHandler(event):\n  ...     print(\"created engine\")\n  ...     print(\"args: {0}\".format(event.engine_args))\n  ...     print(\"kw: {0}\".format(event.engine_kw))\n  >>> component.provideHandler(createdHandler)\n  >>> event_engine_factory = EngineFactory(TEST_DSN1)\n  >>> engine = event_engine_factory()\n  created engine\n  args: ('sqlite:///:memory:',)\n  kw: {}\n\nLet's get rid of the event handler again::\n\n  >>> sm = component.getSiteManager()\n  >>> sm.unregisterHandler(None,\n  ...   required=[IEngineCreatedEvent])\n  True\n\nSiteScopedSession (one database per site)\n=========================================\n\nIn the example above we have set up SQLAlchemy with Zope using\nutilities, but it did not gain us very much, except that you can just\nuse ``zope.sqlalchemy.Session`` to get the correct session.\n\nNow we'll see how we can set up different engines per site by\nregistering the engine factory as a local utility for each one.\n\nIn order to make this work, we'll set up ``SiteScopedSession`` instead\nof ``GloballyScopedSession``. We need to subclass\n``SiteScopedSession`` first because we need to implement its\n``siteScopeFunc`` method, which should return a unique ID per site\n(such as a path retrieved by ``zope.traversing.api.getPath``). We need\nto implement it here, as ``z3c.saconfig`` leaves this policy up to the\napplication or a higher-level framework::\n\n  >>> from z3c.saconfig import SiteScopedSession\n  >>> class OurSiteScopedSession(SiteScopedSession):\n  ...   def siteScopeFunc(self):\n  ...      return getSite().id # the dummy site has a unique id\n  >>> utility = OurSiteScopedSession()\n  >>> component.provideUtility(utility, provides=IScopedSession)\n\nWe want to register two engine factories, each in a different site::\n\n  >>> engine_factory1 = EngineFactory(TEST_DSN1)\n  >>> engine_factory2 = EngineFactory(TEST_DSN2)\n\nWe need to set up the database in both new engines::\n\n  >>> Base.metadata.create_all(engine_factory1())\n  >>> Base.metadata.create_all(engine_factory2())\n\nLet's now create two sites, each of which will be connected to another\nengine::\n\n  >>> site1 = DummySite(id=1)\n  >>> site2 = DummySite(id=2)\n\nWe set the local engine factories for each site:\n\n  >>> sm1 = site1.getSiteManager()\n  >>> sm1.registerUtility(engine_factory1, provided=IEngineFactory)\n  >>> sm2 = site2.getSiteManager()\n  >>> sm2.registerUtility(engine_factory2, provided=IEngineFactory)\n\nJust so we don't accidentally get it, we'll disable our global engine factory::\n\n  >>> component.provideUtility(None, provides=IEngineFactory)\n\nWhen we set the site to ``site1``, a lookup of ``IEngineFactory`` gets\nus engine factory 1::\n\n  >>> setSite(site1)\n  >>> component.getUtility(IEngineFactory) is engine_factory1\n  True\n\nAnd when we set it to ``site2``, we'll get engine factory 2::\n\n  >>> setSite(site2)\n  >>> component.getUtility(IEngineFactory) is engine_factory2\n  True\n\nWe can look up our global utility even if we're in a site::\n\n  >>> component.getUtility(IScopedSession) is utility\n  True\n\nPhew. That was a lot of set up, but basically this is actually just\nstraightforward utility setup code; you should use the APIs or Grok's\n``grok.local_utility`` directive to set up local utilities. Now all\nthat is out of the way, we can create a session for ``site1``::\n\n  >>> setSite(site1)\n  >>> session = Session()\n\nThe database is still empty::\n\n  >>> session.query(User).all()\n  []\n\nWe'll add something to this database now::\n\n  >>> session.add(User(name='bob'))\n  >>> transaction.commit()\n\n``bob`` is now there::\n\n  >>> session = Session()\n  >>> session.query(User).all()[0].name == 'bob'\n  True\n\nNow we'll switch to ``site2``::\n\n  >>> setSite(site2)\n\nIf we create a new session now, we should now be working with a\ndifferent database, which should still be empty::\n\n  >>> session = Session()\n  >>> session.query(User).all()\n  []\n\nWe'll add ``fred`` to this database::\n\n  >>> session.add(User(name='fred'))\n  >>> transaction.commit()\n\nNow ``fred`` is indeed there::\n\n  >>> session = Session()\n  >>> users = session.query(User).all()\n  >>> len(users)\n  1\n  >>> users[0].name == 'fred'\n  True\n\nAnd ``bob`` is still in ``site1``::\n\n  >>> setSite(site1)\n  >>> session = Session()\n  >>> users = session.query(User).all()\n  >>> len(users)\n  1\n  >>> users[0].name == 'bob'\n  True\n\nEngines and Threading\n=====================\n\n  >>> engine = None\n  >>> def setEngine():\n  ...     global engine\n  ...     engine = engine_factory1()\n\nEngine factories must produce the same engine:\n\n  >>> setEngine()\n  >>> engine is engine_factory1()\n  True\n\nEven if you call it in a different thread:\n\n  >>> import threading\n  >>> engine = None\n  >>> t = threading.Thread(target=setEngine)\n  >>> t.start()\n  >>> t.join()\n\n  >>> engine is engine_factory1()\n  True\n\nUnless they are reset:\n\n  >>> engine_factory1.reset()\n  >>> engine is engine_factory1()\n  False\n\nEven engine factories with the same parameters created at (almost) the same\ntime should produce different engines:\n\n  >>> EngineFactory(TEST_DSN1)() is EngineFactory(TEST_DSN1)()\n  False\n\nConfiguration using ZCML\n========================\n\nA configuration directive is provided to register a database engine\nfactory using ZCML.\n\n  >>> from io import BytesIO\n  >>> from zope.configuration import xmlconfig\n  >>> import z3c.saconfig\n  >>> xmlconfig.XMLConfig('meta.zcml', z3c.saconfig)()\n\nLet's try registering the directory again.\n\n  >>> xmlconfig.xmlconfig(BytesIO(b\"\"\"\n  ... <configure xmlns=\"http://namespaces.zope.org/db\">\n  ...   <engine name=\"dummy\" url=\"sqlite:///:memory:\" />\n  ... </configure>\"\"\"))\n\n  >>> component.getUtility(IEngineFactory, name=\"dummy\")\n  <z3c.saconfig.utility.EngineFactory object at ...>\n\nThis time with a setup call.\n\n  >>> xmlconfig.xmlconfig(BytesIO(b\"\"\"\n  ... <configure xmlns=\"http://namespaces.zope.org/db\">\n  ...   <engine name=\"dummy2\" url=\"sqlite:///:memory:\"\n  ...           setup=\"z3c.saconfig.tests.engine_subscriber\" />\n  ... </configure>\"\"\"))\n  got: Engine(sqlite:///:memory:)\n\nIt's also possible to specify connection pooling options:\n\n  >>> xmlconfig.xmlconfig(BytesIO(b\"\"\"\n  ... <configure xmlns=\"http://namespaces.zope.org/db\">\n  ...   <engine name=\"dummy\" url=\"sqlite:///:memory:\"\n  ...       pool_size=\"1\"\n  ...       max_overflow=\"2\"\n  ...       pool_recycle=\"3\"\n  ...       pool_timeout=\"4\"\n  ...       />\n  ... </configure>\"\"\"))\n\n  >>> engineFactory = component.getUtility(IEngineFactory, name=\"dummy\")\n  >>> engineFactory._kw == {'convert_unicode': False, 'echo': None, 'pool_size': 1, 'max_overflow': 2, 'pool_recycle': 3, 'pool_timeout': 4}\n  True\n\n(See the SQLAlchemy documentation on connection pooling for details on how\nthese arguments are used.)\n\nThe session directive is provided to register a scoped session utility:\n\n  >>> xmlconfig.xmlconfig(BytesIO(b\"\"\"\n  ... <configure xmlns=\"http://namespaces.zope.org/db\">\n  ...   <session name=\"dummy\" engine=\"dummy2\" />\n  ... </configure>\"\"\"))\n\n  >>> component.getUtility(IScopedSession, name=\"dummy\")\n  <z3c.saconfig.utility.GloballyScopedSession object at ...>\n\n  >>> from z3c.saconfig import named_scoped_session\n  >>> factory = component.getUtility(IEngineFactory, name=\"dummy2\")\n  >>> Session = named_scoped_session('dummy')\n  >>> Session().bind is factory()\n  True\n\nz3c.saconfig\n************\n\n0.16.0 (2020-04-03)\n===================\n\n- Added support for Python 3.7 [nazrulworld]\n- Added support for Python 3.8 [icemac]\n- Added support for zope.sqlalchemy >= 1.2 [cklinger]\n- Updated local boostrap.py [cklinger]\n- Use newer SQLAlchemy for tests [cklinger]\n\n\n0.15 (2018-11-30)\n=================\n\n- Added Python 3.5 and 3.6 compatibility [nazrulworld]\n- fix: `Issue with python3 compatibility, on zope interface implementation <https://github.com/zopefoundation/z3c.saconfig/issues/4>`_ [nazrulworld]\n\n\n0.14 (2015-06-29)\n=================\n\n- Drop support for sqlalchemy < 0.5\n  [oggers]\n\n\n0.13 (2011-07-26)\n=================\n\n- Register engine factory setup using a zcml action\n\n\n0.12 (2010-09-28)\n=================\n\n- EngineCreatedEvent also gets ``engine_args`` and ``engine_kw`` as\n  attributes, so that event handlers can potentially differentiate\n  between engines.\n\n\n0.11 (2010-07-05)\n=================\n\n- Add pool_size, max_overflow, pool_recycle and pool_timeout options to the\n  <engine /> directive. This allows connection pooling options to be defined\n  in ZCML.\n\n- works with sqlalchemy >= 0.5 (wouldn't work with sqlalchemy > 5 prior)\n\n\n0.10 (2010-01-18)\n=================\n\n- Support current ZTK code\n\n- engine.echo must default to None for SQLAlchemy to honor\n  logging.getLogger(\"sqlalchemy.engine\").setLevel(...)\n\n- Do not enable convert_unicode by default. This option changes\n  standard SQLAlchemy behaviour by making String type columns return\n  unicode data.  This can be especially painful in Zope2 environments\n  where unicode is not always accepted.\n\n- Add a convert_unicode option to the zcml engine statement, allowing\n  people who need convert_unicode to enable it.\n\n\n0.9.1 (2009-08-14)\n==================\n\n- Include documentation on PyPI.\n\n- Small documentation tweaks.\n\n\n0.9 (2009-08-14)\n================\n\n- Initial public release.", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/zopefoundation/z3c.saconfig/", "keywords": "zope relational sqlalchemy component integration", "license": "ZPL 2.1", "maintainer": "", "maintainer_email": "", "name": "z3c.saconfig", "package_url": "https://pypi.org/project/z3c.saconfig/", "platform": "", "project_url": "https://pypi.org/project/z3c.saconfig/", "project_urls": {"Homepage": "https://github.com/zopefoundation/z3c.saconfig/"}, "release_url": "https://pypi.org/project/z3c.saconfig/0.16.0/", "requires_dist": null, "requires_python": "", "summary": "Minimal SQLAlchemy ORM session configuration for Zope", "version": "0.16.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"z3c-saconfig\">\n<h2>z3c.saconfig</h2>\n<div id=\"introduction\">\n<h3>Introduction</h3>\n<p>This aim of this package is to offer a simple but flexible way to\nconfigure SQLAlchemy\u2019s scoped session support using the Zope component\narchitecture. This package is based on <tt>zope.sqlalchemy</tt>, which\noffers transaction integration between Zope and SQLAlchemy.</p>\n<p>We sketch out two main scenarios here:</p>\n<ul>\n<li>one database per Zope instance.</li>\n<li>one database per site (or Grok application) in a Zope instance\n(and thus multiple databases per Zope instance).</li>\n</ul>\n</div>\n<div id=\"globallyscopedsession-one-database-per-zope-instance\">\n<h3>GloballyScopedSession (one database per Zope instance)</h3>\n<p>The simplest way to set up SQLAlchemy for Zope is to have a single\nthread-scoped session that\u2019s global to your entire Zope\ninstance. Multiple applications will all share this session. The\nengine is set up with a global utility.</p>\n<p>We use the SQLAlchemy <tt>sqlalchemy.ext.declarative</tt> extension to\ndefine some tables and classes:</p>\n<pre>&gt;&gt;&gt; from sqlalchemy import *\n&gt;&gt;&gt; from sqlalchemy.ext.declarative import declarative_base\n&gt;&gt;&gt; from sqlalchemy.orm import relation\n\n&gt;&gt;&gt; Base = declarative_base()\n&gt;&gt;&gt; class User(Base):\n...     __tablename__ = 'test_users'\n...     id = Column('id', Integer, primary_key=True)\n...     name = Column('name', String(50))\n...     addresses = relation(\"Address\", backref=\"user\")\n&gt;&gt;&gt; class Address(Base):\n...     __tablename__ = 'test_addresses'\n...     id = Column('id', Integer, primary_key=True)\n...     email = Column('email', String(50))\n...     user_id = Column('user_id', Integer, ForeignKey('test_users.id'))\n</pre>\n<p>So far this doesn\u2019t differ from the <tt>zope.sqlalchemy</tt> example. We\nnow arrive at the first difference. Instead of making the engine\ndirectly, we can set up the engine factory as a (global) utility. This\nutility makes sure an engine is created and cached for us.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; from z3c.saconfig import EngineFactory\n&gt;&gt;&gt; engine_factory = EngineFactory(TEST_DSN)\n</pre>\n</blockquote>\n<p>You can pass the parameters you\u2019d normally pass to\n<tt>sqlalchemy.create_engine</tt> to <tt>EngineFactory</tt>.</p>\n<p>We now register the engine factory as a global utility using\n<tt>zope.component</tt>. Normally you\u2019d use either ZCML or Grok to do this\nconfirmation, but we\u2019ll do it manually here:::</p>\n<pre>&gt;&gt;&gt; from zope import component\n&gt;&gt;&gt; from z3c.saconfig.interfaces import IEngineFactory\n&gt;&gt;&gt; component.provideUtility(engine_factory, provides=IEngineFactory)\n</pre>\n<p>Note that setting up an engine factory is not actually necessary in\nthe globally scoped use case. You could also just create the engine as\na global and pass it as <tt>bind</tt> when you create the\n<tt>GloballyScopedSession</tt> later.</p>\n<p>Let\u2019s look up the engine by calling the factory and create the tables\nin our test database:</p>\n<pre>&gt;&gt;&gt; engine = engine_factory()\n&gt;&gt;&gt; Base.metadata.create_all(engine)\n</pre>\n<p>Now as for the second difference from <tt>zope.sqlalchemy</tt>: how the\nsession is set up and used. We\u2019ll use the <tt>GloballyScopedSession</tt>\nutility to implement our session creation:</p>\n<pre>&gt;&gt;&gt; from z3c.saconfig import GloballyScopedSession\n</pre>\n<p>We give the constructor to <tt>GloballyScopedSession</tt> the parameters\nyou\u2019d normally give to <tt>sqlalchemy.orm.create_session</tt>, or\n<tt>sqlalchemy.orm.sessionmaker</tt>:</p>\n<pre>&gt;&gt;&gt; utility = GloballyScopedSession(twophase=TEST_TWOPHASE)\n</pre>\n<p><tt>GlobalScopedSession</tt> looks up the engine using <tt>IEngineFactory</tt>\nif you don\u2019t supply your own <tt>bind</tt>\nargument. <tt>GloballyScopedSession</tt> also automatically sets up the\n<tt>autocommit</tt>, <tt>autoflush</tt> and <tt>extension</tt> parameters to be the\nright ones for Zope integration, so normally you wouldn\u2019t need to\nsupply these, but you could pass in your own if you do need it.</p>\n<p>We now register this as an <tt>IScopedSession</tt> utility:</p>\n<pre>&gt;&gt;&gt; from z3c.saconfig.interfaces import IScopedSession\n&gt;&gt;&gt; component.provideUtility(utility, provides=IScopedSession)\n</pre>\n<p>We are done with configuration now. As you have seen it involves\nsetting up two utilities, <tt>IEngineFactory</tt> and <tt>IScopedSession</tt>,\nwhere only the latter is really needed in this globally shared session\nuse case.</p>\n<p>After the <tt>IScopedSession</tt> utility is registered, one can import the\n<tt>Session</tt> class from z3c.saconfig.  This <tt>Session</tt> class is like\nthe one you\u2019d produce with <tt>sessionmaker</tt> from\nSQLAlchemy. <cite>z3c.saconfig.Session`</cite> is intended to be the only\n<tt>Session</tt> class you\u2019ll ever need, as all configuration and Zope\nintegration is done automatically for you by <tt>z3c.saconfig</tt>,\nappropriate the context in Zope where you use it. There is no need to\ncreate <tt>Session</tt> classes yourself with <tt>sessionmaker</tt> or\n<tt>scoped_sesion</tt> anymore.</p>\n<p>We can now use the <tt>Session</tt> class to create a session which will\nbehave according to the utility we provided:</p>\n<pre>&gt;&gt;&gt; from z3c.saconfig import Session\n&gt;&gt;&gt; session = Session()\n</pre>\n<p>Now things go the usual <tt>zope.sqlalchemy</tt> way, which is like\n<tt>SQLAlchemy</tt> except you can use Zope\u2019s <tt>transaction</tt> module:</p>\n<pre>&gt;&gt;&gt; session.query(User).all()\n[]\n&gt;&gt;&gt; import transaction\n&gt;&gt;&gt; session.add(User(name='bob'))\n&gt;&gt;&gt; transaction.commit()\n\n&gt;&gt;&gt; session = Session()\n&gt;&gt;&gt; bob = session.query(User).all()[0]\n&gt;&gt;&gt; bob.name == 'bob'\nTrue\n&gt;&gt;&gt; bob.addresses\n[]\n</pre>\n</div>\n<div id=\"events\">\n<h3>Events</h3>\n<p>When a new engine is created by an <tt>EngineFactory</tt>, an\n<tt>IEngineCreatedEvent</tt> is fired. This event has an attribute\n<tt>engine</tt> that contains the engine that was just created:</p>\n<pre>&gt;&gt;&gt; from z3c.saconfig.interfaces import IEngineCreatedEvent\n&gt;&gt;&gt; @component.adapter(IEngineCreatedEvent)\n... def createdHandler(event):\n...     print(\"created engine\")\n...     print(\"args: {0}\".format(event.engine_args))\n...     print(\"kw: {0}\".format(event.engine_kw))\n&gt;&gt;&gt; component.provideHandler(createdHandler)\n&gt;&gt;&gt; event_engine_factory = EngineFactory(TEST_DSN1)\n&gt;&gt;&gt; engine = event_engine_factory()\ncreated engine\nargs: ('sqlite:///:memory:',)\nkw: {}\n</pre>\n<p>Let\u2019s get rid of the event handler again:</p>\n<pre>&gt;&gt;&gt; sm = component.getSiteManager()\n&gt;&gt;&gt; sm.unregisterHandler(None,\n...   required=[IEngineCreatedEvent])\nTrue\n</pre>\n</div>\n<div id=\"sitescopedsession-one-database-per-site\">\n<h3>SiteScopedSession (one database per site)</h3>\n<p>In the example above we have set up SQLAlchemy with Zope using\nutilities, but it did not gain us very much, except that you can just\nuse <tt>zope.sqlalchemy.Session</tt> to get the correct session.</p>\n<p>Now we\u2019ll see how we can set up different engines per site by\nregistering the engine factory as a local utility for each one.</p>\n<p>In order to make this work, we\u2019ll set up <tt>SiteScopedSession</tt> instead\nof <tt>GloballyScopedSession</tt>. We need to subclass\n<tt>SiteScopedSession</tt> first because we need to implement its\n<tt>siteScopeFunc</tt> method, which should return a unique ID per site\n(such as a path retrieved by <tt>zope.traversing.api.getPath</tt>). We need\nto implement it here, as <tt>z3c.saconfig</tt> leaves this policy up to the\napplication or a higher-level framework:</p>\n<pre>&gt;&gt;&gt; from z3c.saconfig import SiteScopedSession\n&gt;&gt;&gt; class OurSiteScopedSession(SiteScopedSession):\n...   def siteScopeFunc(self):\n...      return getSite().id # the dummy site has a unique id\n&gt;&gt;&gt; utility = OurSiteScopedSession()\n&gt;&gt;&gt; component.provideUtility(utility, provides=IScopedSession)\n</pre>\n<p>We want to register two engine factories, each in a different site:</p>\n<pre>&gt;&gt;&gt; engine_factory1 = EngineFactory(TEST_DSN1)\n&gt;&gt;&gt; engine_factory2 = EngineFactory(TEST_DSN2)\n</pre>\n<p>We need to set up the database in both new engines:</p>\n<pre>&gt;&gt;&gt; Base.metadata.create_all(engine_factory1())\n&gt;&gt;&gt; Base.metadata.create_all(engine_factory2())\n</pre>\n<p>Let\u2019s now create two sites, each of which will be connected to another\nengine:</p>\n<pre>&gt;&gt;&gt; site1 = DummySite(id=1)\n&gt;&gt;&gt; site2 = DummySite(id=2)\n</pre>\n<p>We set the local engine factories for each site:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; sm1 = site1.getSiteManager()\n&gt;&gt;&gt; sm1.registerUtility(engine_factory1, provided=IEngineFactory)\n&gt;&gt;&gt; sm2 = site2.getSiteManager()\n&gt;&gt;&gt; sm2.registerUtility(engine_factory2, provided=IEngineFactory)\n</pre>\n</blockquote>\n<p>Just so we don\u2019t accidentally get it, we\u2019ll disable our global engine factory:</p>\n<pre>&gt;&gt;&gt; component.provideUtility(None, provides=IEngineFactory)\n</pre>\n<p>When we set the site to <tt>site1</tt>, a lookup of <tt>IEngineFactory</tt> gets\nus engine factory 1:</p>\n<pre>&gt;&gt;&gt; setSite(site1)\n&gt;&gt;&gt; component.getUtility(IEngineFactory) is engine_factory1\nTrue\n</pre>\n<p>And when we set it to <tt>site2</tt>, we\u2019ll get engine factory 2:</p>\n<pre>&gt;&gt;&gt; setSite(site2)\n&gt;&gt;&gt; component.getUtility(IEngineFactory) is engine_factory2\nTrue\n</pre>\n<p>We can look up our global utility even if we\u2019re in a site:</p>\n<pre>&gt;&gt;&gt; component.getUtility(IScopedSession) is utility\nTrue\n</pre>\n<p>Phew. That was a lot of set up, but basically this is actually just\nstraightforward utility setup code; you should use the APIs or Grok\u2019s\n<tt>grok.local_utility</tt> directive to set up local utilities. Now all\nthat is out of the way, we can create a session for <tt>site1</tt>:</p>\n<pre>&gt;&gt;&gt; setSite(site1)\n&gt;&gt;&gt; session = Session()\n</pre>\n<p>The database is still empty:</p>\n<pre>&gt;&gt;&gt; session.query(User).all()\n[]\n</pre>\n<p>We\u2019ll add something to this database now:</p>\n<pre>&gt;&gt;&gt; session.add(User(name='bob'))\n&gt;&gt;&gt; transaction.commit()\n</pre>\n<p><tt>bob</tt> is now there:</p>\n<pre>&gt;&gt;&gt; session = Session()\n&gt;&gt;&gt; session.query(User).all()[0].name == 'bob'\nTrue\n</pre>\n<p>Now we\u2019ll switch to <tt>site2</tt>:</p>\n<pre>&gt;&gt;&gt; setSite(site2)\n</pre>\n<p>If we create a new session now, we should now be working with a\ndifferent database, which should still be empty:</p>\n<pre>&gt;&gt;&gt; session = Session()\n&gt;&gt;&gt; session.query(User).all()\n[]\n</pre>\n<p>We\u2019ll add <tt>fred</tt> to this database:</p>\n<pre>&gt;&gt;&gt; session.add(User(name='fred'))\n&gt;&gt;&gt; transaction.commit()\n</pre>\n<p>Now <tt>fred</tt> is indeed there:</p>\n<pre>&gt;&gt;&gt; session = Session()\n&gt;&gt;&gt; users = session.query(User).all()\n&gt;&gt;&gt; len(users)\n1\n&gt;&gt;&gt; users[0].name == 'fred'\nTrue\n</pre>\n<p>And <tt>bob</tt> is still in <tt>site1</tt>:</p>\n<pre>&gt;&gt;&gt; setSite(site1)\n&gt;&gt;&gt; session = Session()\n&gt;&gt;&gt; users = session.query(User).all()\n&gt;&gt;&gt; len(users)\n1\n&gt;&gt;&gt; users[0].name == 'bob'\nTrue\n</pre>\n</div>\n<div id=\"engines-and-threading\">\n<h3>Engines and Threading</h3>\n<blockquote>\n<pre>&gt;&gt;&gt; engine = None\n&gt;&gt;&gt; def setEngine():\n...     global engine\n...     engine = engine_factory1()\n</pre>\n</blockquote>\n<p>Engine factories must produce the same engine:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; setEngine()\n&gt;&gt;&gt; engine is engine_factory1()\nTrue\n</pre>\n</blockquote>\n<p>Even if you call it in a different thread:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; import threading\n&gt;&gt;&gt; engine = None\n&gt;&gt;&gt; t = threading.Thread(target=setEngine)\n&gt;&gt;&gt; t.start()\n&gt;&gt;&gt; t.join()\n</pre>\n<pre>&gt;&gt;&gt; engine is engine_factory1()\nTrue\n</pre>\n</blockquote>\n<p>Unless they are reset:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; engine_factory1.reset()\n&gt;&gt;&gt; engine is engine_factory1()\nFalse\n</pre>\n</blockquote>\n<p>Even engine factories with the same parameters created at (almost) the same\ntime should produce different engines:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; EngineFactory(TEST_DSN1)() is EngineFactory(TEST_DSN1)()\nFalse\n</pre>\n</blockquote>\n</div>\n<div id=\"configuration-using-zcml\">\n<h3>Configuration using ZCML</h3>\n<p>A configuration directive is provided to register a database engine\nfactory using ZCML.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; from io import BytesIO\n&gt;&gt;&gt; from zope.configuration import xmlconfig\n&gt;&gt;&gt; import z3c.saconfig\n&gt;&gt;&gt; xmlconfig.XMLConfig('meta.zcml', z3c.saconfig)()\n</pre>\n</blockquote>\n<p>Let\u2019s try registering the directory again.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; xmlconfig.xmlconfig(BytesIO(b\"\"\"\n... &lt;configure xmlns=\"http://namespaces.zope.org/db\"&gt;\n...   &lt;engine name=\"dummy\" url=\"sqlite:///:memory:\" /&gt;\n... &lt;/configure&gt;\"\"\"))\n</pre>\n<pre>&gt;&gt;&gt; component.getUtility(IEngineFactory, name=\"dummy\")\n&lt;z3c.saconfig.utility.EngineFactory object at ...&gt;\n</pre>\n</blockquote>\n<p>This time with a setup call.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; xmlconfig.xmlconfig(BytesIO(b\"\"\"\n... &lt;configure xmlns=\"http://namespaces.zope.org/db\"&gt;\n...   &lt;engine name=\"dummy2\" url=\"sqlite:///:memory:\"\n...           setup=\"z3c.saconfig.tests.engine_subscriber\" /&gt;\n... &lt;/configure&gt;\"\"\"))\ngot: Engine(sqlite:///:memory:)\n</pre>\n</blockquote>\n<p>It\u2019s also possible to specify connection pooling options:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; xmlconfig.xmlconfig(BytesIO(b\"\"\"\n... &lt;configure xmlns=\"http://namespaces.zope.org/db\"&gt;\n...   &lt;engine name=\"dummy\" url=\"sqlite:///:memory:\"\n...       pool_size=\"1\"\n...       max_overflow=\"2\"\n...       pool_recycle=\"3\"\n...       pool_timeout=\"4\"\n...       /&gt;\n... &lt;/configure&gt;\"\"\"))\n</pre>\n<pre>&gt;&gt;&gt; engineFactory = component.getUtility(IEngineFactory, name=\"dummy\")\n&gt;&gt;&gt; engineFactory._kw == {'convert_unicode': False, 'echo': None, 'pool_size': 1, 'max_overflow': 2, 'pool_recycle': 3, 'pool_timeout': 4}\nTrue\n</pre>\n</blockquote>\n<p>(See the SQLAlchemy documentation on connection pooling for details on how\nthese arguments are used.)</p>\n<p>The session directive is provided to register a scoped session utility:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; xmlconfig.xmlconfig(BytesIO(b\"\"\"\n... &lt;configure xmlns=\"http://namespaces.zope.org/db\"&gt;\n...   &lt;session name=\"dummy\" engine=\"dummy2\" /&gt;\n... &lt;/configure&gt;\"\"\"))\n</pre>\n<pre>&gt;&gt;&gt; component.getUtility(IScopedSession, name=\"dummy\")\n&lt;z3c.saconfig.utility.GloballyScopedSession object at ...&gt;\n</pre>\n<pre>&gt;&gt;&gt; from z3c.saconfig import named_scoped_session\n&gt;&gt;&gt; factory = component.getUtility(IEngineFactory, name=\"dummy2\")\n&gt;&gt;&gt; Session = named_scoped_session('dummy')\n&gt;&gt;&gt; Session().bind is factory()\nTrue\n</pre>\n</blockquote>\n</div>\n</div>\n<div id=\"id1\">\n<h2>z3c.saconfig</h2>\n<div id=\"id2\">\n<h3>0.16.0 (2020-04-03)</h3>\n<ul>\n<li>Added support for Python 3.7 [nazrulworld]</li>\n<li>Added support for Python 3.8 [icemac]</li>\n<li>Added support for zope.sqlalchemy &gt;= 1.2 [cklinger]</li>\n<li>Updated local boostrap.py [cklinger]</li>\n<li>Use newer SQLAlchemy for tests [cklinger]</li>\n</ul>\n</div>\n<div id=\"id3\">\n<h3>0.15 (2018-11-30)</h3>\n<ul>\n<li>Added Python 3.5 and 3.6 compatibility [nazrulworld]</li>\n<li>fix: <a href=\"https://github.com/zopefoundation/z3c.saconfig/issues/4\" rel=\"nofollow\">Issue with python3 compatibility, on zope interface implementation</a> [nazrulworld]</li>\n</ul>\n</div>\n<div id=\"id4\">\n<h3>0.14 (2015-06-29)</h3>\n<ul>\n<li>Drop support for sqlalchemy &lt; 0.5\n[oggers]</li>\n</ul>\n</div>\n<div id=\"id5\">\n<h3>0.13 (2011-07-26)</h3>\n<ul>\n<li>Register engine factory setup using a zcml action</li>\n</ul>\n</div>\n<div id=\"id6\">\n<h3>0.12 (2010-09-28)</h3>\n<ul>\n<li>EngineCreatedEvent also gets <tt>engine_args</tt> and <tt>engine_kw</tt> as\nattributes, so that event handlers can potentially differentiate\nbetween engines.</li>\n</ul>\n</div>\n<div id=\"id7\">\n<h3>0.11 (2010-07-05)</h3>\n<ul>\n<li>Add pool_size, max_overflow, pool_recycle and pool_timeout options to the\n&lt;engine /&gt; directive. This allows connection pooling options to be defined\nin ZCML.</li>\n<li>works with sqlalchemy &gt;= 0.5 (wouldn\u2019t work with sqlalchemy &gt; 5 prior)</li>\n</ul>\n</div>\n<div id=\"id8\">\n<h3>0.10 (2010-01-18)</h3>\n<ul>\n<li>Support current ZTK code</li>\n<li>engine.echo must default to None for SQLAlchemy to honor\nlogging.getLogger(\u201csqlalchemy.engine\u201d).setLevel(\u2026)</li>\n<li>Do not enable convert_unicode by default. This option changes\nstandard SQLAlchemy behaviour by making String type columns return\nunicode data.  This can be especially painful in Zope2 environments\nwhere unicode is not always accepted.</li>\n<li>Add a convert_unicode option to the zcml engine statement, allowing\npeople who need convert_unicode to enable it.</li>\n</ul>\n</div>\n<div id=\"id9\">\n<h3>0.9.1 (2009-08-14)</h3>\n<ul>\n<li>Include documentation on PyPI.</li>\n<li>Small documentation tweaks.</li>\n</ul>\n</div>\n<div id=\"id10\">\n<h3>0.9 (2009-08-14)</h3>\n<ul>\n<li>Initial public release.</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 6943701, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "6e8ffa7087544e32dadf39aa18e02b23", "sha256": "bb8aacfc4ca5f25e8de32b6f42428fd704d7da4427e23e7dcf27fbbffa83839e"}, "downloads": -1, "filename": "z3c.saconfig-0.1.tar.gz", "has_sig": false, "md5_digest": "6e8ffa7087544e32dadf39aa18e02b23", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12340, "upload_time": "2009-04-24T23:00:16", "upload_time_iso_8601": "2009-04-24T23:00:16.214053Z", "url": "https://files.pythonhosted.org/packages/d7/e5/0ee7fc4d88282e57f4347abf36bb38881898d283047f0823a220c0ace65b/z3c.saconfig-0.1.tar.gz", "yanked": false}], "0.10": [{"comment_text": "", "digests": {"md5": "436624bb587e12a3c629e4eb61ff4f01", "sha256": "b6149d77b4c6b52315e8938646e8830cd7a6933492db34dee1a562992191918c"}, "downloads": -1, "filename": "z3c.saconfig-0.10.tar.gz", "has_sig": false, "md5_digest": "436624bb587e12a3c629e4eb61ff4f01", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19403, "upload_time": "2010-01-18T20:48:51", "upload_time_iso_8601": "2010-01-18T20:48:51.744502Z", "url": "https://files.pythonhosted.org/packages/93/82/1c87e2df52f1bd76995e2b0a67f416117e296c211b162fdb513bd2fd1f41/z3c.saconfig-0.10.tar.gz", "yanked": false}], "0.11": [{"comment_text": "", "digests": {"md5": "aaf81ac0b75d4e345b6284cb758edcd3", "sha256": "ba8bda622b8000b7d3c357484d750cf06291b029d85fb0a7a66c1baa18a7043a"}, "downloads": -1, "filename": "z3c.saconfig-0.11.tar.gz", "has_sig": false, "md5_digest": "aaf81ac0b75d4e345b6284cb758edcd3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14338, "upload_time": "2010-07-05T16:11:38", "upload_time_iso_8601": "2010-07-05T16:11:38.453556Z", "url": "https://files.pythonhosted.org/packages/f2/ba/8ad645a38e8a028bf51d9822e344dae8a1e0926569a00ff27f4ac073254a/z3c.saconfig-0.11.tar.gz", "yanked": false}], "0.12": [{"comment_text": "", "digests": {"md5": "83a24fdd795ba7381904044f096c6e73", "sha256": "a549eaf62bd4bd17f074ea761c0a070205264edb9d3c42643f7d69dd53acbec6"}, "downloads": -1, "filename": "z3c.saconfig-0.12.tar.gz", "has_sig": false, "md5_digest": "83a24fdd795ba7381904044f096c6e73", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20679, "upload_time": "2010-09-28T17:57:51", "upload_time_iso_8601": "2010-09-28T17:57:51.365770Z", "url": "https://files.pythonhosted.org/packages/53/ed/6f874f2a8be40cd47af371cd22fe34cd566a05fc303728f76ed36b117952/z3c.saconfig-0.12.tar.gz", "yanked": false}], "0.13": [{"comment_text": "", "digests": {"md5": "a762f5819072bf6d5485199bf7d45fce", "sha256": "a243255707589eff2d2afc44a4fdcc2a809c67832ffc7af21c555197f99bfd28"}, "downloads": -1, "filename": "z3c.saconfig-0.13.tar.gz", "has_sig": false, "md5_digest": "a762f5819072bf6d5485199bf7d45fce", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20501, "upload_time": "2011-07-26T16:38:43", "upload_time_iso_8601": "2011-07-26T16:38:43.451233Z", "url": "https://files.pythonhosted.org/packages/a2/2d/6dfec06ec629de174f51bb6fec6ad6305a3d0757d8ec8e97baf7a8f1ecb8/z3c.saconfig-0.13.tar.gz", "yanked": false}], "0.14": [{"comment_text": "", "digests": {"md5": "b94b24df2be1e43f99b9df8efc3f6a60", "sha256": "465e17c3dbf8f0bc2e7165dcbc1304b9dacdf2145e2e14cacd42be7cd54975ac"}, "downloads": -1, "filename": "z3c.saconfig-0.14.zip", "has_sig": false, "md5_digest": "b94b24df2be1e43f99b9df8efc3f6a60", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30492, "upload_time": "2015-06-29T13:20:39", "upload_time_iso_8601": "2015-06-29T13:20:39.147137Z", "url": "https://files.pythonhosted.org/packages/21/32/3438268db1f44fbedccc68d8e5d893f5db157b1b78605494ed2ff5713838/z3c.saconfig-0.14.zip", "yanked": false}], "0.15": [{"comment_text": "", "digests": {"md5": "000c972e2eb40fd6dd416926e03c4c89", "sha256": "e000a1a1212a0b1d4cdd363a0cc1852ff8d9c57ff7f4579fb92dca46cfacec09"}, "downloads": -1, "filename": "z3c.saconfig-0.15.tar.gz", "has_sig": false, "md5_digest": "000c972e2eb40fd6dd416926e03c4c89", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16167, "upload_time": "2018-11-30T12:01:42", "upload_time_iso_8601": "2018-11-30T12:01:42.379174Z", "url": "https://files.pythonhosted.org/packages/3a/e2/303318348e58934614a319a901a8b142f187a7142c9a71b4c6d37d1c8a38/z3c.saconfig-0.15.tar.gz", "yanked": false}], "0.16.0": [{"comment_text": "", "digests": {"md5": "346e8c7c71b27d703fbce547699a2a97", "sha256": "38a3e5d31c047dd3723e542ec372bd726ed8e3da05fc0189ea9a57933638170b"}, "downloads": -1, "filename": "z3c.saconfig-0.16.0.tar.gz", "has_sig": false, "md5_digest": "346e8c7c71b27d703fbce547699a2a97", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20100, "upload_time": "2020-04-03T14:18:02", "upload_time_iso_8601": "2020-04-03T14:18:02.656920Z", "url": "https://files.pythonhosted.org/packages/f4/9c/159da7ce4348f890eb4eb30a1d67819d53ce988f80ac42030a2c3a4f702c/z3c.saconfig-0.16.0.tar.gz", "yanked": false}], "0.9": [{"comment_text": "", "digests": {"md5": "c373e05a034d7afc56fdb67ef6fa0f5a", "sha256": "10d3237b2221016bacd0621a50dae440e922a9661e17beb0b042490401add168"}, "downloads": -1, "filename": "z3c.saconfig-0.9.tar.gz", "has_sig": false, "md5_digest": "c373e05a034d7afc56fdb67ef6fa0f5a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11822, "upload_time": "2009-08-14T16:42:30", "upload_time_iso_8601": "2009-08-14T16:42:30.288931Z", "url": "https://files.pythonhosted.org/packages/09/15/4052eb75b1926fa4a7d22089121ad1a87e4a8d6d74e2c749af861d389c96/z3c.saconfig-0.9.tar.gz", "yanked": false}], "0.9.1": [{"comment_text": "", "digests": {"md5": "e1bae3c81eb890dfb118745df7e05d4d", "sha256": "45df6145343b33b4c63c0a8ca231377493024140159488b978f74ab50cb6c196"}, "downloads": -1, "filename": "z3c.saconfig-0.9.1.tar.gz", "has_sig": false, "md5_digest": "e1bae3c81eb890dfb118745df7e05d4d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18756, "upload_time": "2009-08-14T16:47:46", "upload_time_iso_8601": "2009-08-14T16:47:46.269461Z", "url": "https://files.pythonhosted.org/packages/c3/8b/874138baef5ebcf07d0b89a3bd8bccc996dd53abf8c16ae5b513090c95ae/z3c.saconfig-0.9.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "346e8c7c71b27d703fbce547699a2a97", "sha256": "38a3e5d31c047dd3723e542ec372bd726ed8e3da05fc0189ea9a57933638170b"}, "downloads": -1, "filename": "z3c.saconfig-0.16.0.tar.gz", "has_sig": false, "md5_digest": "346e8c7c71b27d703fbce547699a2a97", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20100, "upload_time": "2020-04-03T14:18:02", "upload_time_iso_8601": "2020-04-03T14:18:02.656920Z", "url": "https://files.pythonhosted.org/packages/f4/9c/159da7ce4348f890eb4eb30a1d67819d53ce988f80ac42030a2c3a4f702c/z3c.saconfig-0.16.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:20:32 2020"}