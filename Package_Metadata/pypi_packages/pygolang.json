{"info": {"author": "Kirill Smelkov", "author_email": "kirr@nexedi.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "Programming Language :: Cython", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy", "Topic :: Software Development :: Interpreters", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "===================================================\n Pygolang - Go-like features for Python and Cython\n===================================================\n\nPackage `golang` provides Go-like features for Python:\n\n- `gpython` is Python interpreter with support for lightweight threads.\n- `go` spawns lightweight thread.\n- `chan` and `select` provide channels with Go semantic.\n- `func` allows to define methods separate from class.\n- `defer` allows to schedule a cleanup from the main control flow.\n- `error` and package `errors` provide error chaining.\n- `b` and `u` provide way to make sure an object is either bytes or unicode.\n- `gimport` allows to import python modules by full path in a Go workspace.\n\nPackage `golang.pyx` provides__ similar features for Cython/nogil.\n\n__ `Cython/nogil API`_\n\nAdditional packages and utilities are also provided__ to close other gaps\nbetween Python/Cython and Go environments.\n\n__ `Additional packages and utilities`_\n\n\n\n.. contents::\n   :depth: 1\n\n\nGPython\n-------\n\nCommand `gpython` provides Python interpreter that supports lightweight threads\nvia tight integration with gevent__. The standard library of GPython is API\ncompatible with Python standard library, but inplace of OS threads lightweight\ncoroutines are provided, and IO is internally organized via\nlibuv__/libev__-based IO scheduler. Consequently programs can spawn lots of\ncoroutines cheaply, and modules like `time`, `socket`, `ssl`, `subprocess` etc -\nall could be used from all coroutines simultaneously, and in the same blocking way\nas if every coroutine was a full OS thread. This gives ability to scale programs\nwithout changing concurrency model and existing code.\n\n__ http://www.gevent.org/\n__ http://libuv.org/\n__ http://software.schmorp.de/pkg/libev.html\n\n\nAdditionally GPython sets UTF-8 to be default encoding always, and puts `go`,\n`chan`, `select` etc into builtin namespace.\n\n.. note::\n\n   GPython is optional and the rest of Pygolang can be used from under standard Python too.\n   However without gevent integration `go` spawns full - not lightweight - OS thread.\n\n\nGoroutines and channels\n-----------------------\n\n`go` spawns a coroutine, or thread if gevent was not activated. It is possible to\nexchange data in between either threads or coroutines via channels. `chan`\ncreates a new channel with Go semantic - either synchronous or buffered. Use\n`chan.recv`, `chan.send` and `chan.close` for communication. `nilchan`\nstands for nil channel. `select` can be used to multiplex on several\nchannels. For example::\n\n    ch1 = chan()    # synchronous channel\n    ch2 = chan(3)   # channel with buffer of size 3\n\n    def _():\n        ch1.send('a')\n        ch2.send('b')\n    go(_)\n\n    ch1.recv()      # will give 'a'\n    ch2.recv_()     # will give ('b', True)\n\n    ch2 = nilchan   # rebind ch2 to nil channel\n    _, _rx = select(\n        ch1.recv,           # 0\n        ch1.recv_,          # 1\n        (ch1.send, obj),    # 2\n        ch2.recv,           # 3\n        default,            # 4\n    )\n    if _ == 0:\n        # _rx is what was received from ch1\n        ...\n    if _ == 1:\n        # _rx is (rx, ok) of what was received from ch1\n        ...\n    if _ == 2:\n        # we know obj was sent to ch1\n        ...\n    if _ == 3:\n        # this case will be never selected because\n        # send/recv on nil channel block forever.\n        ...\n    if _ == 4:\n        # default case\n        ...\n\nBy default `chan` creates new channel that can carry arbitrary Python objects.\nHowever type of channel elements can be specified via `chan(dtype=X)` - for\nexample `chan(dtype='C.int')` creates new channel whose elements are C\nintegers. `chan.nil(X)` creates typed nil channel. `Cython/nogil API`_\nexplains how channels with non-Python dtypes, besides in-Python usage, can be\nadditionally used for interaction in between Python and nogil worlds.\n\n\nMethods\n-------\n\n`func` decorator allows to define methods separate from class.\n\nFor example::\n\n  @func(MyClass)\n  def my_method(self, ...):\n      ...\n\nwill define `MyClass.my_method()`.\n\n`func` can be also used on just functions, for example::\n\n  @func\n  def my_function(...):\n      ...\n\n\nDefer / recover / panic\n-----------------------\n\n`defer` allows to schedule a cleanup to be executed when current function\nreturns. It is similar to `try`/`finally` but does not force the cleanup part\nto be far away in the end. For example::\n\n   wc = wcfs.join(zurl)    \u2502     wc = wcfs.join(zurl)\n   defer(wc.close)         \u2502     try:\n                           \u2502        ...\n   ...                     \u2502        ...\n   ...                     \u2502        ...\n   ...                     \u2502     finally:\n                           \u2502        wc.close()\n\nIf deferred cleanup fails, previously unhandled exception, if any, won't be\nlost - it will be chained with (`PEP 3134`__) and included into traceback dump\neven on Python2.\n\n__ https://www.python.org/dev/peps/pep-3134/\n\nFor completeness there is `recover` and `panic` that allow to program with\nGo-style error handling, for example::\n\n   def _():\n      r = recover()\n      if r is not None:\n         print(\"recovered. error was: %s\" % (r,))\n   defer(_)\n\n   ...\n\n   panic(\"aaa\")\n\nBut `recover` and `panic` are probably of less utility since they can be\npractically natively modelled with `try`/`except`.\n\nIf `defer` is used, the function that uses it must be wrapped with `@func`\ndecorator.\n\n\nErrors\n------\n\nIn concurrent systems operational stack generally differs from execution code\nflow, which makes code stack traces significantly less useful to understand an\nerror. Pygolang provides support for error chaining that gives ability to build\noperational error stack and to inspect resulting errors:\n\n`error` is error type that can be used by itself or subclassed. By\nproviding `.Unwrap()` method, an error can optionally wrap another error this\nway forming an error chain. `errors.Is` reports whether an item in error chain\nmatches target. `fmt.Errorf` provides handy way to build wrapping errors.\nFor example::\n\n   e1 = error(\"problem\")\n   e2 = fmt.Errorf(\"doing something for %s: %w\", \"joe\", e1)\n   print(e2)         # prints \"doing something for joe: problem\"\n   errors.Is(e2, e1) # gives True\n\n   # OpError is example class to represents an error of operation op(path).\n   class OpError(error):\n      def __init__(e, op, path, err):\n         e.op   = op\n         e.path = path\n         e.err  = err\n\n      # .Error() should be used to define what error's string is.\n      # it is automatically used by error to also provide both .__str__ and .__repr__.\n      def Error(e):\n         return \"%s %s: %s\" % (e.op, e.path, e.err)\n\n      # provided .Unwrap() indicates that this error is chained.\n      def Unwrap(e):\n         return e.err\n\n   mye = OpError(\"read\", \"file.txt\", io.ErrUnexpectedEOF)\n   print(mye)                          # prints \"read file.txt: unexpected EOF\"\n   errors.Is(mye, io.EOF)              # gives False\n   errors.Is(mye. io.ErrUnexpectedEOF) # gives True\n\nBoth wrapped and wrapping error can be of arbitrary Python type - not\nnecessarily of `error` or its subclass.\n\n`error` is also used to represent at Python level an error returned by\nCython/nogil call (see `Cython/nogil API`_) and preserves Cython/nogil error\nchain for inspection at Python level.\n\nPygolang error chaining integrates with Python error chaining and takes\n`.__cause__` attribute into account for exception created via `raise X from Y`\n(`PEP 3134`__).\n\n__ https://www.python.org/dev/peps/pep-3134/\n\n\nStrings\n-------\n\n`b` and `u` provide way to make sure an object is either bytes or unicode.\n`b(obj)` converts str/unicode/bytes obj to UTF-8 encoded bytestring, while\n`u(obj)` converts str/unicode/bytes obj to unicode string. For example::\n\n   b(\"\u043f\u0440\u0438\u0432\u0435\u0442 \u043c\u0438\u0440\")   # -> gives bytes corresponding to UTF-8 encoding of \"\u043f\u0440\u0438\u0432\u0435\u0442 \u043c\u0438\u0440\".\n\n   def f(s):\n      s = u(s)       # make sure s is unicode, decoding as UTF-8(*) if it was bytes.\n      ...            # (*) but see below about lack of decode errors.\n\nThe conversion in both encoding and decoding never fails and never looses\ninformation: `b(u(\u00b7))` and `u(b(\u00b7))` are always identity for bytes and unicode\ncorrespondingly, even if bytes input is not valid UTF-8.\n\n\nImport\n------\n\n`gimport` provides way to import python modules by full path in a Go workspace.\n\nFor example\n\n::\n\n    lonet = gimport('lab.nexedi.com/kirr/go123/xnet/lonet')\n\nwill import either\n\n- `lab.nexedi.com/kirr/go123/xnet/lonet.py`, or\n- `lab.nexedi.com/kirr/go123/xnet/lonet/__init__.py`\n\nlocated in `src/` under `$GOPATH`.\n\n\nCython/nogil API\n----------------\n\nCython package `golang` provides *nogil* API with goroutines, channels and\nother features that mirror corresponding Python package. Cython API is not only\nfaster compared to Python version, but also, due to *nogil* property, allows to\nbuild concurrent systems without limitations imposed by Python's GIL. All that\nwhile still programming in Python-like language. Brief description of\nCython/nogil API follows:\n\n`go` spawns new task - a coroutine, or thread, depending on activated runtime.\n`chan[T]` represents a channel with Go semantic and elements of type `T`.\nUse `makechan[T]` to create new channel, and `chan[T].recv`, `chan[T].send`,\n`chan[T].close` for communication. `nil` stands for nil channel. `select`\ncan be used to multiplex on several channels. For example::\n\n   cdef nogil:\n      struct Point:\n         int x\n         int y\n\n      void worker(chan[int] chi, chan[Point] chp):\n         chi.send(1)\n\n         cdef Point p\n         p.x = 3\n         p.y = 4\n         chp.send(p)\n\n      void myfunc():\n         cdef chan[int]   chi = makechan[int]()       # synchronous channel of integers\n         cdef chan[Point] chp = makechan[Point](3)    # channel with buffer of size 3 and Point elements\n\n         go(worker, chi, chp)\n\n         i = chi.recv()    # will give 1\n         p = chp.recv()    # will give Point(3,4)\n\n         chp = nil         # rebind chp to nil channel\n         cdef cbool ok\n         cdef int j = 33\n         _ = select([\n             chi.recvs(&i),         # 0\n             chi.recvs(&i, &ok),    # 1\n             chi.sends(&j),         # 2\n             chp.recvs(&p),         # 3\n             default,               # 4\n         ])\n         if _ == 0:\n             # i is what was received from chi\n             ...\n         if _ == 1:\n             # (i, ok) is what was received from chi\n             ...\n         if _ == 2:\n             # we know j was sent to chi\n             ...\n         if _ == 3:\n             # this case will be never selected because\n             # send/recv on nil channel block forever.\n             ...\n         if _ == 4:\n             # default case\n             ...\n\nPython channels are represented by `pychan` cdef class. Python\nchannels that carry non-Python elements (`pychan.dtype != DTYPE_PYOBJECT`) can\nbe converted to Cython/nogil `chan[T]` via `pychan.chan_*()`.\nSimilarly Cython/nogil `chan[T]` can be wrapped into `pychan` via\n`pychan.from_chan_*()`. This provides interaction mechanism\nin between *nogil* and Python worlds. For example::\n\n   def myfunc(pychan pych):\n      if pych.dtype != DTYPE_INT:\n         raise TypeError(\"expected chan[int]\")\n\n      cdef chan[int] ch = pych.chan_int()  # pychan -> chan[int]\n      with nogil:\n         # use ch in nogil code. Both Python and nogil parts can\n         # send/receive on the channel simultaneously.\n         ...\n\n   def mytick(): # -> pychan\n      cdef chan[int] ch\n      with nogil:\n         # create a channel that is connected to some nogil task of the program\n         ch = ...\n\n      # wrap the channel into pychan. Both Python and nogil parts can\n      # send/receive on the channel simultaneously.\n      cdef pychan pych = pychan.from_chan_int(ch)  # pychan <- chan[int]\n      return pych\n\n\n`error` is the interface that represents errors. `errors.New` and `fmt.errorf`\nprovide way to build errors from text. An error can optionally wrap another\nerror by implementing `errorWrapper` interface and providing `.Unwrap()` method.\n`errors.Is` reports whether an item in error chain matches target. `fmt.errorf`\nwith `%w` specifier provide handy way to build wrapping errors. For example::\n\n   e1 = errors.New(\"problem\")\n   e2 = fmt.errorf(\"doing something for %s: %w\", \"joe\", e1)\n   e2.Error()        # gives \"doing something for joe: problem\"\n   errors.Is(e2, e1) # gives True\n\nAn `error` can be exposed to Python via `pyerror` cdef class wrapper\ninstantiated by `pyerror.from_error()`. `pyerror` preserves Cython/nogil error\nchain for inspection by Python-level `error.Is`.\n\n\n`panic` stops normal execution of current goroutine by throwing a C-level\nexception. On Python/C boundaries C-level exceptions have to be converted to\nPython-level exceptions with `topyexc`. For example::\n\n   cdef void _do_something() nogil:\n      ...\n      panic(\"bug\")   # hit a bug\n\n   # do_something is called by Python code - it is thus on Python/C boundary\n   cdef void do_something() nogil except +topyexc:\n      _do_something()\n\n   def pydo_something():\n      with nogil:\n         do_something()\n\n\nSee |libgolang.h|_ and |golang.pxd|_ for details of the API.\nSee also |testprog/golang_pyx_user/|_ for demo project that uses Pygolang in\nCython/nogil mode.\n\n.. |libgolang.h| replace:: `libgolang.h`\n.. _libgolang.h: https://lab.nexedi.com/kirr/pygolang/tree/master/golang/libgolang.h\n\n.. |golang.pxd| replace:: `golang.pxd`\n.. _golang.pxd: https://lab.nexedi.com/kirr/pygolang/tree/master/golang/_golang.pxd\n\n.. |testprog/golang_pyx_user/| replace:: `testprog/golang_pyx_user/`\n.. _testprog/golang_pyx_user/: https://lab.nexedi.com/kirr/pygolang/tree/master/golang/pyx/testprog/golang_pyx_user\n\n--------\n\nAdditional packages and utilities\n---------------------------------\n\nThe following additional packages and utilities are also provided to close gaps\nbetween Python/Cython and Go environments:\n\n.. contents::\n   :local:\n\nConcurrency\n~~~~~~~~~~~\n\nIn addition to `go` and channels, the following packages are provided to help\nhandle concurrency in structured ways:\n\n- |golang.context|_ (py__, pyx__) provides contexts to propagate deadlines, cancellation and\n  task-scoped values among spawned goroutines [*]_.\n\n  .. |golang.context| replace:: `golang.context`\n  .. _golang.context: https://lab.nexedi.com/kirr/pygolang/tree/master/golang/context.h\n  __ https://lab.nexedi.com/kirr/pygolang/tree/master/golang/context.py\n  __ https://lab.nexedi.com/kirr/pygolang/tree/master/golang/_context.pxd\n\n- |golang.sync|_ (py__, pyx__) provides `sync.WorkGroup` to spawn group of goroutines working\n  on a common task. It also provides low-level primitives - for example\n  `sync.Once`, `sync.WaitGroup`, `sync.Mutex` and `sync.RWMutex` - that are\n  sometimes useful too.\n\n  .. |golang.sync| replace:: `golang.sync`\n  .. _golang.sync: https://lab.nexedi.com/kirr/pygolang/tree/master/golang/sync.h\n  __ https://lab.nexedi.com/kirr/pygolang/tree/master/golang/sync.py\n  __ https://lab.nexedi.com/kirr/pygolang/tree/master/golang/_sync.pxd\n\n- |golang.time|_ (py__, pyx__) provides timers integrated with channels.\n\n  .. |golang.time| replace:: `golang.time`\n  .. _golang.time: https://lab.nexedi.com/kirr/pygolang/tree/master/golang/time.h\n  __ https://lab.nexedi.com/kirr/pygolang/tree/master/golang/time.py\n  __ https://lab.nexedi.com/kirr/pygolang/tree/master/golang/_time.pxd\n\n\n.. [*] See `Go Concurrency Patterns: Context`__ for overview.\n\n__ https://blog.golang.org/context\n\n\nString conversion\n~~~~~~~~~~~~~~~~~\n\n`qq` (import from `golang.gcompat`) provides `%q` functionality that quotes as\nGo would do. For example the following code will print name quoted in `\"`\nwithout escaping printable UTF-8 characters::\n\n   print('hello %s' % qq(name))\n\n`qq` accepts both `str` and `bytes` (`unicode` and `str` on Python2)\nand also any other type that can be converted to `str`.\n\nPackage |golang.strconv|_ provides direct access to conversion routines, for\nexample `strconv.quote` and `strconv.unquote`.\n\n.. |golang.strconv| replace:: `golang.strconv`\n.. _golang.strconv: https://lab.nexedi.com/kirr/pygolang/tree/master/golang/strconv.py\n\n\nBenchmarking and testing\n~~~~~~~~~~~~~~~~~~~~~~~~\n\n`py.bench` allows to benchmark python code similarly to `go test -bench` and `py.test`.\nFor example, running `py.bench` on the following code::\n\n    def bench_add(b):\n        x, y = 1, 2\n        for i in xrange(b.N):\n            x + y\n\ngives something like::\n\n    $ py.bench --count=3 x.py\n    ...\n    pymod: bench_add.py\n    Benchmarkadd    50000000        0.020 \u00b5s/op\n    Benchmarkadd    50000000        0.020 \u00b5s/op\n    Benchmarkadd    50000000        0.020 \u00b5s/op\n\nPackage |golang.testing|_ provides corresponding runtime bits, e.g. `testing.B`.\n\n`py.bench` produces output in `Go benchmark format`__, and so benchmark results\ncan be analyzed and compared with standard Go tools, for example with\n`benchstat`__.\nAdditionally package |golang.x.perf.benchlib|_ can be used to load and process\nsuch benchmarking data in Python.\n\n.. |golang.testing| replace:: `golang.testing`\n.. _golang.testing: https://lab.nexedi.com/kirr/pygolang/tree/master/golang/testing.py\n.. |golang.x.perf.benchlib| replace:: `golang.x.perf.benchlib`\n.. _golang.x.perf.benchlib: https://lab.nexedi.com/kirr/pygolang/tree/master/golang/x/perf/benchlib.py\n__ https://github.com/golang/proposal/blob/master/design/14313-benchmark-format.md\n__ https://godoc.org/golang.org/x/perf/cmd/benchstat\n\n----\n\nPygolang change history\n-----------------------\n\n0.0.6 (2020-02-28)\n~~~~~~~~~~~~~~~~~~\n\n- Provide support for error chaining. In concurrent systems\n  operational stack generally differs from execution code flow, which makes\n  code stack traces significantly less useful to understand an error.\n  Error chaining gives ability to build operational\n  error stack and to inspect resulting errors.\n  (`commit 1`__, 2__, 3__, 4__, 5__, 6__, `overview 1`__, `overview 2`__).\n\n  __ https://lab.nexedi.com/kirr/pygolang/commit/fd95c88a\n  __ https://lab.nexedi.com/kirr/pygolang/commit/17798442\n  __ https://lab.nexedi.com/kirr/pygolang/commit/78d0c76f\n  __ https://lab.nexedi.com/kirr/pygolang/commit/337de0d7\n  __ https://lab.nexedi.com/kirr/pygolang/commit/03f88c0b\n  __ https://lab.nexedi.com/kirr/pygolang/commit/80ab5863\n  __ https://blog.golang.org/go1.13-errors\n  __ https://commandcenter.blogspot.com/2017/12/error-handling-in-upspin.html\n\n- Provide `unicode` \u2194 `bytes` conversion:\n  `b(obj)` converts str/unicode/bytes obj to UTF-8 encoded bytestring, while\n  `u(obj)` converts str/unicode/bytes obj to unicode string. The conversion in\n  both encoding and decoding never fails and never looses information:\n  `b(u(\u00b7))` and `u(b(\u00b7))` are always identity for bytes and unicode\n  correspondingly, even if bytes input is not valid UTF-8.\n  (`commit 1`__, 2__, 3__, 4__, 5__, 6__, 7__).\n\n  __ https://lab.nexedi.com/kirr/pygolang/commit/bcb95cd5\n  __ https://lab.nexedi.com/kirr/pygolang/commit/073d81a8\n  __ https://lab.nexedi.com/kirr/pygolang/commit/5cc679ac\n  __ https://lab.nexedi.com/kirr/pygolang/commit/0561926a\n  __ https://lab.nexedi.com/kirr/pygolang/commit/8c459a99\n  __ https://lab.nexedi.com/kirr/pygolang/commit/3073ac98\n  __ https://lab.nexedi.com/kirr/pygolang/commit/e028cf28\n\n- Provide `sync.RWMutex` (`commit 1`__, 2__).\n\n  __ https://lab.nexedi.com/kirr/pygolang/commit/1ad3c2d5\n  __ https://lab.nexedi.com/kirr/pygolang/commit/a9345a98\n\n- Provide `nil` as alias for `nullptr` and NULL (`commit 1`__, 2__, 3__, 4__).\n\n  __ https://lab.nexedi.com/kirr/pygolang/commit/60f6db6f\n  __ https://lab.nexedi.com/kirr/pygolang/commit/fc1c3e24\n  __ https://lab.nexedi.com/kirr/pygolang/commit/01ade7ac\n  __ https://lab.nexedi.com/kirr/pygolang/commit/230c81c4\n\n- Add `io` package with `io.EOF` and `io.ErrUnexpectedEOF` (commit__).\n\n  __ https://lab.nexedi.com/kirr/pygolang/commit/36ab859c\n\n- Correct `cxx.dict` API to follow libgolang comma-ok style (commit__).\n\n  __ https://lab.nexedi.com/kirr/pygolang/commit/58fcdd87\n\n- Provide `pyx.build.DSO` for projects to build dynamic libraries that\n  use/link-to libgolang (`commit 1`__, 2__).\n\n  __ https://lab.nexedi.com/kirr/pygolang/commit/64765688\n  __ https://lab.nexedi.com/kirr/pygolang/commit/cd67996e\n\n- Fix `pyx.build.build_ext` to allow customization (commit__).\n\n  __ https://lab.nexedi.com/kirr/pygolang/commit/8af78fc5\n\n| |_| |_| |_| |_| |_| |_| |_| |_| *This release is driven by* |wendelin.core|_ *v2 needs*.\n\n\n0.0.5 (2019-11-27)\n~~~~~~~~~~~~~~~~~~\n\n- Add support for typed Python channels. For\n  example `chan(dtype='C.int')` creates channel whose elements type is C `int`\n  instead of Python object. Besides providing runtime type-safety, this allows\n  to build interaction in between Python and nogil worlds (`commit 1`__, 2__,\n  3__, 4__, 5__, 6__, 7__, 8__, 9__, 10__, 11__).\n\n  __ https://lab.nexedi.com/kirr/pygolang/commit/f2847307\n  __ https://lab.nexedi.com/kirr/pygolang/commit/d6c8862d\n  __ https://lab.nexedi.com/kirr/pygolang/commit/2590e9a7\n  __ https://lab.nexedi.com/kirr/pygolang/commit/47111d3e\n  __ https://lab.nexedi.com/kirr/pygolang/commit/30561db4\n  __ https://lab.nexedi.com/kirr/pygolang/commit/f6fab7b5\n  __ https://lab.nexedi.com/kirr/pygolang/commit/2c8063f4\n  __ https://lab.nexedi.com/kirr/pygolang/commit/3121b290\n  __ https://lab.nexedi.com/kirr/pygolang/commit/77719d8a\n  __ https://lab.nexedi.com/kirr/pygolang/commit/69b80926\n  __ https://lab.nexedi.com/kirr/pygolang/commit/07f9430d\n\n- Provide automatic memory management for C++/Cython/nogil classes.\n  Used approach complements `\"Automatic multithreaded-safe memory managed\n  classes in Cython\"` (Gwena\u00ebl Samain et al. 2019, `blog post`__) (`commit 1`__,\n  2__, 3__, 4__, 5__, 6__, 7__).\n\n  __ https://www.nexedi.com/blog/NXD-Document.Blog.Cypclass\n  __ https://lab.nexedi.com/kirr/pygolang/commit/e82b4fab\n  __ https://lab.nexedi.com/kirr/pygolang/commit/e614d641\n  __ https://lab.nexedi.com/kirr/pygolang/commit/af4a8d80\n  __ https://lab.nexedi.com/kirr/pygolang/commit/b2253abf\n  __ https://lab.nexedi.com/kirr/pygolang/commit/274afa3f\n  __ https://lab.nexedi.com/kirr/pygolang/commit/fd2a6fab\n  __ https://lab.nexedi.com/kirr/pygolang/commit/7f0672aa\n\n- Provide minimal support for interfaces with empty and `error` interfaces\n  provided by base library (`commit 1`__, 2__).\n\n  __ https://lab.nexedi.com/kirr/pygolang/commit/5a99b769\n  __ https://lab.nexedi.com/kirr/pygolang/commit/45c8cddd\n\n- Provide `sync.Mutex` and `sync.Sema` as part of both Python and Cython/nogil\n  API (`commit 1`__, 2__, 3__, 4__, 5__, 6__).\n\n  __ https://lab.nexedi.com/kirr/pygolang/commit/d99bb6b7\n  __ https://lab.nexedi.com/kirr/pygolang/commit/9c795ca7\n  __ https://lab.nexedi.com/kirr/pygolang/commit/34b7a1f4\n  __ https://lab.nexedi.com/kirr/pygolang/commit/2c1be15e\n  __ https://lab.nexedi.com/kirr/pygolang/commit/e6788170\n  __ https://lab.nexedi.com/kirr/pygolang/commit/548f2df1\n\n- Provide C++/Cython/nogil API for `time` package. Python-level `time` becomes a\n  small wrapper around Cython/nogil one (`commit 1`__, 2__, 3__, 4__, 5__, 6__,\n  7__, 8__, 9__, 10__, 11__, 12__, 13__, 14__).\n\n  __ https://lab.nexedi.com/kirr/pygolang/commit/32f34607\n  __ https://lab.nexedi.com/kirr/pygolang/commit/0e838833\n  __ https://lab.nexedi.com/kirr/pygolang/commit/106c1b95\n  __ https://lab.nexedi.com/kirr/pygolang/commit/4f6a9e09\n  __ https://lab.nexedi.com/kirr/pygolang/commit/7c929b25\n  __ https://lab.nexedi.com/kirr/pygolang/commit/8c2ac5e9\n  __ https://lab.nexedi.com/kirr/pygolang/commit/a0ba1226\n  __ https://lab.nexedi.com/kirr/pygolang/commit/873cf8aa\n  __ https://lab.nexedi.com/kirr/pygolang/commit/8399ff2d\n  __ https://lab.nexedi.com/kirr/pygolang/commit/419c8950\n  __ https://lab.nexedi.com/kirr/pygolang/commit/1a9dae3b\n  __ https://lab.nexedi.com/kirr/pygolang/commit/b073f6df\n  __ https://lab.nexedi.com/kirr/pygolang/commit/0e6088ec\n  __ https://lab.nexedi.com/kirr/pygolang/commit/73182038\n\n- Provide C++/Cython/nogil API for `context` package. Python-level `context`\n  becomes a small wrapper around Cython/nogil one (`commit 1`__, 2__, 3__, 4__,\n  5__, 6__, 7__, 8__, 9__, 10__, 11__, 12__, 13__, 14__, 15__).\n\n  __ https://lab.nexedi.com/kirr/pygolang/commit/149ae661\n  __ https://lab.nexedi.com/kirr/pygolang/commit/cc7069e0\n  __ https://lab.nexedi.com/kirr/pygolang/commit/223d7950\n  __ https://lab.nexedi.com/kirr/pygolang/commit/89381488\n  __ https://lab.nexedi.com/kirr/pygolang/commit/9662785b\n  __ https://lab.nexedi.com/kirr/pygolang/commit/34e3c404\n  __ https://lab.nexedi.com/kirr/pygolang/commit/ba2ab242\n  __ https://lab.nexedi.com/kirr/pygolang/commit/9869dc45\n  __ https://lab.nexedi.com/kirr/pygolang/commit/20761c55\n  __ https://lab.nexedi.com/kirr/pygolang/commit/f76c11f3\n  __ https://lab.nexedi.com/kirr/pygolang/commit/281defb2\n  __ https://lab.nexedi.com/kirr/pygolang/commit/66e1e756\n  __ https://lab.nexedi.com/kirr/pygolang/commit/9216e2db\n  __ https://lab.nexedi.com/kirr/pygolang/commit/2a359791\n  __ https://lab.nexedi.com/kirr/pygolang/commit/a6c1c984\n\n- Provide C++/Cython/nogil API for `sync` package. Python-level `sync` becomes a\n  small wrapper around Cython/nogil one (`commit 1`__, 2__, 3__, 4__, 5__, 6__, 7__, 8__, 9__).\n\n  __ https://lab.nexedi.com/kirr/pygolang/commit/0fb53e33\n  __ https://lab.nexedi.com/kirr/pygolang/commit/b316e504\n  __ https://lab.nexedi.com/kirr/pygolang/commit/c5c576d2\n  __ https://lab.nexedi.com/kirr/pygolang/commit/5146a416\n  __ https://lab.nexedi.com/kirr/pygolang/commit/4fc6e49c\n  __ https://lab.nexedi.com/kirr/pygolang/commit/a36efe6d\n  __ https://lab.nexedi.com/kirr/pygolang/commit/4fb9b51c\n  __ https://lab.nexedi.com/kirr/pygolang/commit/33cf3113\n  __ https://lab.nexedi.com/kirr/pygolang/commit/6d94fccf\n\n- Add `errors` package with `errors.New` to create new error with provided text (commit__).\n\n  __ https://lab.nexedi.com/kirr/pygolang/commit/a245ab56\n\n- Add `fmt` package with `fmt.sprintf` and `fmt.errorf` to format text into\n  strings and errors (commit__).\n\n  __ https://lab.nexedi.com/kirr/pygolang/commit/309963f8\n\n- Add `strings` package with utilities like `strings.has_prefix`,\n  `strings.split` and similar (commit__).\n\n  __ https://lab.nexedi.com/kirr/pygolang/commit/0efd4a9a\n\n- Add `cxx` package with `cxx.dict` and `cxx.set` providing ergonomic interface\n  over STL hash map and set (commit__).\n\n  __ https://lab.nexedi.com/kirr/pygolang/commit/9785f2d3\n\n- Teach `defer` to chain exceptions (PEP 3134) and adjust traceback dumps to\n  include exception cause/context even on Python2 (`commit 1`__, 2__, 3__, 4__, 5__).\n\n  __ https://lab.nexedi.com/kirr/pygolang/commit/6729fe92\n  __ https://lab.nexedi.com/kirr/pygolang/commit/bb9a94c3\n  __ https://lab.nexedi.com/kirr/pygolang/commit/7faaecbc\n  __ https://lab.nexedi.com/kirr/pygolang/commit/06cac90b\n  __ https://lab.nexedi.com/kirr/pygolang/commit/1477dd02\n\n- Provide `defer` as part of C++ API too (`commit 1`__, 2__, 3__).\n\n  __ https://lab.nexedi.com/kirr/pygolang/commit/1d153a45\n  __ https://lab.nexedi.com/kirr/pygolang/commit/14a249cb\n  __ https://lab.nexedi.com/kirr/pygolang/commit/39f40159\n\n- Provide `build_ext` as part of `pyx.build` package API. This allows projects\n  to customize the way their Pygolang-based extensions are built (`commit 1`__, 2__).\n\n  __ https://lab.nexedi.com/kirr/pygolang/commit/8f9e5619\n  __ https://lab.nexedi.com/kirr/pygolang/commit/b4feee6f\n\n- Fix `recover` to clean current exception (`commit 1`__, 2__).\n\n  __ https://lab.nexedi.com/kirr/pygolang/commit/9e6ff8bd\n  __ https://lab.nexedi.com/kirr/pygolang/commit/5f76f363\n\n- Fix `select` to not leak object reference on error path (commit__).\n\n  __ https://lab.nexedi.com/kirr/pygolang/commit/e9180de1\n\n- Fix gevent runtime to preserve Python exception state during runtime calls\n  (`commit 1`__, 2__).\n\n  __ https://lab.nexedi.com/kirr/pygolang/commit/689dc862\n  __ https://lab.nexedi.com/kirr/pygolang/commit/47fac0a9\n\n\n| |_| |_| |_| |_| |_| |_| |_| |_| *This release is driven by* |wendelin.core|_ *v2 needs*.\n| |_| |_| |_| |_| |_| |_| |_| |_| *This release is dedicated to the memory of* |\u0411\u0430\u0441\u044f|_.\n\n.. |wendelin.core| replace:: *wendelin.core*\n.. _wendelin.core: https://pypi.org/project/wendelin.core\n.. |\u0411\u0430\u0441\u044f| replace:: *\u0411\u0430\u0441\u044f*\n.. _\u0411\u0430\u0441\u044f: https://navytux.spb.ru/memory/%D0%91%D0%B0%D1%81%D1%8F/\n\n\n0.0.4 (2019-09-17)\n~~~~~~~~~~~~~~~~~~\n\n- Add ThreadSanitizer, AddressSanitizer and Python debug builds to testing coverage (commit__).\n\n  __ https://lab.nexedi.com/kirr/pygolang/commit/4dc1a7f0\n\n- Fix race bugs in `close`, `recv` and `select` (`commit 1`__, 2__, 3__, 4__, 5__, 6__).\n  A 25-years old race condition in Python was also discovered while doing\n  quality assurance on concurrency (`commit 7`__, `Python bug`__, `PyPy bug`__).\n\n  __ https://lab.nexedi.com/kirr/pygolang/commit/78e38690\n  __ https://lab.nexedi.com/kirr/pygolang/commit/44737253\n  __ https://lab.nexedi.com/kirr/pygolang/commit/c92a4830\n  __ https://lab.nexedi.com/kirr/pygolang/commit/dcf4ebd1\n  __ https://lab.nexedi.com/kirr/pygolang/commit/65c43848\n  __ https://lab.nexedi.com/kirr/pygolang/commit/5aa1e899\n  __ https://lab.nexedi.com/kirr/pygolang/commit/5142460d\n  __ https://bugs.python.org/issue38106\n  __ https://bitbucket.org/pypy/pypy/issues/3072\n\n- If C-level panic causes termination, its argument is now printed (commit__).\n\n  __ https://lab.nexedi.com/kirr/pygolang/commit/f2b77c94\n\n\n0.0.3 (2019-08-29)\n~~~~~~~~~~~~~~~~~~\n\n- Provide Cython/nogil API with goroutines and channels. Cython API is not only\n  faster compared to Python version, but also, due to *nogil* property, allows to\n  build concurrent systems without limitations imposed by Python's GIL.\n  This work was motivated by wendelin.core__ v2, which, due to its design,\n  would deadlock if it tries to take the GIL in its pinner thread.\n  Implementation of Python-level goroutines and channels becomes tiny wrapper\n  around Cython/nogil API. This brings in ~5x speedup to Python-level `golang`\n  package along the way (`commit 1`__, 2__, 3__, 4__, 5__, 6__, 7__, 8__, 9__,\n  10__, 11__, 12__, 13__, 14__, 15__, 16__, 17__, 18__, 19__, 20__, 21__, 22__,\n  23__, 24__, 25__, 26__, 27__).\n\n  __ https://pypi.org/project/wendelin.core\n  __ https://lab.nexedi.com/kirr/pygolang/commit/d98e42e3\n  __ https://lab.nexedi.com/kirr/pygolang/commit/352628b5\n  __ https://lab.nexedi.com/kirr/pygolang/commit/fa667412\n  __ https://lab.nexedi.com/kirr/pygolang/commit/f812faa2\n  __ https://lab.nexedi.com/kirr/pygolang/commit/88eb8fe0\n  __ https://lab.nexedi.com/kirr/pygolang/commit/62bdb806\n  __ https://lab.nexedi.com/kirr/pygolang/commit/8fa3c15b\n  __ https://lab.nexedi.com/kirr/pygolang/commit/ad00be70\n  __ https://lab.nexedi.com/kirr/pygolang/commit/ce8152a2\n  __ https://lab.nexedi.com/kirr/pygolang/commit/7ae8c4f3\n  __ https://lab.nexedi.com/kirr/pygolang/commit/f971a2a8\n  __ https://lab.nexedi.com/kirr/pygolang/commit/83259a1b\n  __ https://lab.nexedi.com/kirr/pygolang/commit/311df9f1\n  __ https://lab.nexedi.com/kirr/pygolang/commit/7e55394d\n  __ https://lab.nexedi.com/kirr/pygolang/commit/790189e3\n  __ https://lab.nexedi.com/kirr/pygolang/commit/a508be9a\n  __ https://lab.nexedi.com/kirr/pygolang/commit/a0714b8e\n  __ https://lab.nexedi.com/kirr/pygolang/commit/1bcb8297\n  __ https://lab.nexedi.com/kirr/pygolang/commit/ef076d3a\n  __ https://lab.nexedi.com/kirr/pygolang/commit/4166dc65\n  __ https://lab.nexedi.com/kirr/pygolang/commit/b9333e00\n  __ https://lab.nexedi.com/kirr/pygolang/commit/d5e74947\n  __ https://lab.nexedi.com/kirr/pygolang/commit/2fc71566\n  __ https://lab.nexedi.com/kirr/pygolang/commit/e4dddf15\n  __ https://lab.nexedi.com/kirr/pygolang/commit/69db91bf\n  __ https://lab.nexedi.com/kirr/pygolang/commit/9efb6575\n  __ https://lab.nexedi.com/kirr/pygolang/commit/3b241983\n\n\n- Provide way to install Pygolang with extra requirements in the form of\n  `pygolang[<package>]`. For example `pygolang[x.perf.benchlib]` additionally\n  selects NumPy, `pygolang[pyx.build]` - everything needed by build system, and\n  `pygolang[all]` selects everything (commit__).\n\n  __ https://lab.nexedi.com/kirr/pygolang/commit/89a1061a\n\n- Improve tests to exercise the implementation more thoroughly in many\n  places (`commit 1`__, 2__, 3__, 4__, 5__, 6__).\n\n  __ https://lab.nexedi.com/kirr/pygolang/commit/773d8fb2\n  __ https://lab.nexedi.com/kirr/pygolang/commit/3e5b5f01\n  __ https://lab.nexedi.com/kirr/pygolang/commit/7f2362dd\n  __ https://lab.nexedi.com/kirr/pygolang/commit/c5810987\n  __ https://lab.nexedi.com/kirr/pygolang/commit/cb5bfdd2\n  __ https://lab.nexedi.com/kirr/pygolang/commit/02f6991f\n\n- Fix race bugs in buffered channel send and receive (`commit 1`__, 2__).\n\n  __ https://lab.nexedi.com/kirr/pygolang/commit/eb8a1fef\n  __ https://lab.nexedi.com/kirr/pygolang/commit/c6bb9eb3\n\n- Fix deadlock in `sync.WorkGroup` tests (commit__).\n\n  __ https://lab.nexedi.com/kirr/pygolang/commit/b8b042c5\n\n- Fix `@func(cls) def name` not to override `name` in calling context (commit__).\n\n  __ https://lab.nexedi.com/kirr/pygolang/commit/924a808c\n\n- Fix `sync.WorkGroup` to propagate all exception types, not only those derived\n  from `Exception` (commit__).\n\n  __ https://lab.nexedi.com/kirr/pygolang/commit/79aab7df\n\n- Replace `threading.Event` with `chan` in `sync.WorkGroup` implementation.\n  This removes reliance on outside semaphore+waitlist code and speeds up\n  `sync.WorkGroup` along the way (commit__).\n\n  __ https://lab.nexedi.com/kirr/pygolang/commit/78d85cdc\n\n- Speedup `sync.WorkGroup` by not using `@func` at runtime (commit__).\n\n  __ https://lab.nexedi.com/kirr/pygolang/commit/94c6160b\n\n- Add benchmarks for `chan`, `select`, `@func` and `defer` (commit__).\n\n  __ https://lab.nexedi.com/kirr/pygolang/commit/3c55ca59\n\n|_| |_| |_| |_| |_| |_| |_| |_| *This release is dedicated to the memory of* |\u0412\u0435\u0440\u0430 \u041f\u0430\u0432\u043b\u043e\u0432\u043d\u0430 \u0421\u0443\u043f\u0440\u0443\u043d|_.\n\n.. |\u0412\u0435\u0440\u0430 \u041f\u0430\u0432\u043b\u043e\u0432\u043d\u0430 \u0421\u0443\u043f\u0440\u0443\u043d| replace:: *\u0412\u0435\u0440\u0430 \u041f\u0430\u0432\u043b\u043e\u0432\u043d\u0430 \u0421\u0443\u043f\u0440\u0443\u043d*\n.. _\u0412\u0435\u0440\u0430 \u041f\u0430\u0432\u043b\u043e\u0432\u043d\u0430 \u0421\u0443\u043f\u0440\u0443\u043d: https://navytux.spb.ru/memory/%D0%A2%D1%91%D1%82%D1%8F%20%D0%92%D0%B5%D1%80%D0%B0.pdf#page=3\n\n\n0.0.2 (2019-05-16)\n~~~~~~~~~~~~~~~~~~\n\n- Add `time` package with `time.Timer` and `time.Ticker` (`commit 1`__, 2__, 3__).\n\n  __ https://lab.nexedi.com/kirr/pygolang/commit/81dfefa0\n  __ https://lab.nexedi.com/kirr/pygolang/commit/6e3b3ff4\n  __ https://lab.nexedi.com/kirr/pygolang/commit/9c260fde\n\n- Add support for deadlines and timeouts to `context` package (`commit 1`__, 2__, 3__, 4__).\n\n  __ https://lab.nexedi.com/kirr/pygolang/commit/58ba1765\n  __ https://lab.nexedi.com/kirr/pygolang/commit/e5687f2f\n  __ https://lab.nexedi.com/kirr/pygolang/commit/27f91b78\n  __ https://lab.nexedi.com/kirr/pygolang/commit/b2450310\n\n0.0.1 (2019-05-09)\n~~~~~~~~~~~~~~~~~~\n\n- Add support for nil channels (commit__).\n\n  __ https://lab.nexedi.com/kirr/pygolang/commit/2aad64bb\n\n- Add `context` package to propagate cancellation and task-scoped values among\n  spawned goroutines (commit__, `overview`__).\n\n  __ https://lab.nexedi.com/kirr/pygolang/commit/e9567c7b\n  __ https://blog.golang.org/context\n\n- Add `sync` package with `sync.WorkGroup` to spawn group of goroutines working\n  on a common task (`commit 1`__, 2__).\n\n  __ https://lab.nexedi.com/kirr/pygolang/commit/e6bea2cf\n  __ https://lab.nexedi.com/kirr/pygolang/commit/9ee7ba91\n\n- Remove deprecated `@method` (commit__).\n\n  __ https://lab.nexedi.com/kirr/pygolang/commit/262f8986\n\n0.0.0.dev8 (2019-03-24)\n~~~~~~~~~~~~~~~~~~~~~~~\n\n- Fix `gpython` to properly initialize `sys.path` (commit__).\n\n  __ https://lab.nexedi.com/kirr/pygolang/commit/6b4990f6\n\n- Fix channel tests to pass irregardless of surround OS load (commit__).\n\n  __ https://lab.nexedi.com/kirr/pygolang/commit/731f39e3\n\n- Deprecate `@method(cls)` in favour of `@func(cls)` (commit__).\n\n  __ https://lab.nexedi.com/kirr/pygolang/commit/942ee900\n\n- Support both `PyPy2` and `PyPy3` (`commit 1`__, 2__, 3__).\n\n  __ https://lab.nexedi.com/kirr/pygolang/commit/da68a8ae\n  __ https://lab.nexedi.com/kirr/pygolang/commit/e847c550\n  __ https://lab.nexedi.com/kirr/pygolang/commit/704d99f0\n\n0.0.0.dev7 (2019-01-16)\n~~~~~~~~~~~~~~~~~~~~~~~\n\n- Provide `gpython` interpreter, that sets UTF-8 as default encoding, integrates\n  gevent and puts `go`, `chan`, `select` etc into builtin namespace (commit__).\n\n  __ https://lab.nexedi.com/kirr/pygolang/commit/32a21d5b\n\n0.0.0.dev6 (2018-12-13)\n~~~~~~~~~~~~~~~~~~~~~~~\n\n- Add `strconv` package with `quote` and `unquote` (`commit 1`__, 2__).\n\n  __ https://lab.nexedi.com/kirr/pygolang/commit/f09701b0\n  __ https://lab.nexedi.com/kirr/pygolang/commit/ed6b7895\n\n- Support `PyPy` as well (commit__).\n\n  __ https://lab.nexedi.com/kirr/pygolang/commit/c859940b\n\n0.0.0.dev5 (2018-10-30)\n~~~~~~~~~~~~~~~~~~~~~~~\n\n- Fix `select` bug that was causing several cases to be potentially executed\n  at the same time (`commit 1`__, 2__, 3__).\n\n  __ https://lab.nexedi.com/kirr/pygolang/commit/f0b592b4\n  __ https://lab.nexedi.com/kirr/pygolang/commit/b51b8d5d\n  __ https://lab.nexedi.com/kirr/pygolang/commit/2fc6797c\n\n- Add `defer` and `recover` (commit__).\n  The implementation is partly inspired by work of Denis Kolodin (1__, 2__).\n\n  __ https://lab.nexedi.com/kirr/pygolang/commit/5146eb0b\n  __ https://habr.com/post/191786\n  __ https://stackoverflow.com/a/43028386/9456786\n\n- Fix `@method` on Python3 (commit__).\n\n  __ https://lab.nexedi.com/kirr/pygolang/commit/ab69e0fa\n\n- A leaked goroutine no longer prevents whole program to exit (`commit 1`__, 2__).\n\n  __ https://lab.nexedi.com/kirr/pygolang/commit/69cef96e\n  __ https://lab.nexedi.com/kirr/pygolang/commit/ec929991\n\n\n0.0.0.dev4 (2018-07-04)\n~~~~~~~~~~~~~~~~~~~~~~~\n\n- Add `py.bench` program and `golang.testing` package with corresponding bits (commit__).\n\n  __ https://lab.nexedi.com/kirr/pygolang/commit/9bf03d9c\n\n0.0.0.dev3 (2018-07-02)\n~~~~~~~~~~~~~~~~~~~~~~~\n\n- Support both Python2 and Python3; `qq` now does not escape printable UTF-8\n  characters. (`commit 1`__, 2__, 3__).\n\n  __ https://lab.nexedi.com/kirr/pygolang/commit/02dddb97\n  __ https://lab.nexedi.com/kirr/pygolang/commit/e01e5c2f\n  __ https://lab.nexedi.com/kirr/pygolang/commit/622ccd82\n\n- `golang/x/perf/benchlib:` New module to load & work with data in Go benchmark\n  format (commit__).\n\n  __ https://lab.nexedi.com/kirr/pygolang/commit/812e7ed7\n\n\n0.0.0.dev2 (2018-06-20)\n~~~~~~~~~~~~~~~~~~~~~~~\n\n- Turn into full pygolang: `go`, `chan`, `select`, `method` and `gcompat.qq`\n  are provided in addition to `gimport` (commit__). The implementation is\n  not very fast, but should be working correctly including `select` - `select`\n  sends for synchronous channels.\n\n  __ https://lab.nexedi.com/kirr/pygolang/commit/afa46cf5\n\n\n0.0.0.dev1 (2018-05-21)\n~~~~~~~~~~~~~~~~~~~~~~~\n\n- Initial release; `gimport` functionality only (commit__).\n\n  __ https://lab.nexedi.com/kirr/pygolang/commit/9c61f254\n\n\n.. readme_renderer/pypi don't support `.. class:: align-center`\n.. |_| unicode:: 0xA0   .. nbsp", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://lab.nexedi.com/kirr/pygolang", "keywords": "golang go channel goroutine concurrency GOPATH python import gpython gevent cython nogil GIL", "license": "GPLv3+ with wide exception for Open-Source", "maintainer": "", "maintainer_email": "", "name": "pygolang", "package_url": "https://pypi.org/project/pygolang/", "platform": "", "project_url": "https://pypi.org/project/pygolang/", "project_urls": {"Bug Tracker": "https://lab.nexedi.com/kirr/pygolang/issues", "Documentation": "https://pypi.org/project/pygolang", "Homepage": "https://lab.nexedi.com/kirr/pygolang", "Source Code": "https://lab.nexedi.com/kirr/pygolang"}, "release_url": "https://pypi.org/project/pygolang/0.0.6.post2/", "requires_dist": null, "requires_python": "", "summary": "Go-like features for Python and Cython", "version": "0.0.6.post2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Package <cite>golang</cite> provides Go-like features for Python:</p>\n<ul>\n<li><cite>gpython</cite> is Python interpreter with support for lightweight threads.</li>\n<li><cite>go</cite> spawns lightweight thread.</li>\n<li><cite>chan</cite> and <cite>select</cite> provide channels with Go semantic.</li>\n<li><cite>func</cite> allows to define methods separate from class.</li>\n<li><cite>defer</cite> allows to schedule a cleanup from the main control flow.</li>\n<li><cite>error</cite> and package <cite>errors</cite> provide error chaining.</li>\n<li><cite>b</cite> and <cite>u</cite> provide way to make sure an object is either bytes or unicode.</li>\n<li><cite>gimport</cite> allows to import python modules by full path in a Go workspace.</li>\n</ul>\n<p>Package <cite>golang.pyx</cite> <a href=\"#cython-nogil-api\" rel=\"nofollow\">provides</a> similar features for Cython/nogil.</p>\n<p>Additional packages and utilities are also <a href=\"#additional-packages-and-utilities\" rel=\"nofollow\">provided</a> to close other gaps\nbetween Python/Cython and Go environments.</p>\n<div id=\"contents\">\n<p>Contents</p>\n<ul>\n<li><a href=\"#gpython\" id=\"id231\" rel=\"nofollow\">GPython</a></li>\n<li><a href=\"#goroutines-and-channels\" id=\"id232\" rel=\"nofollow\">Goroutines and channels</a></li>\n<li><a href=\"#methods\" id=\"id233\" rel=\"nofollow\">Methods</a></li>\n<li><a href=\"#defer-recover-panic\" id=\"id234\" rel=\"nofollow\">Defer / recover / panic</a></li>\n<li><a href=\"#errors\" id=\"id235\" rel=\"nofollow\">Errors</a></li>\n<li><a href=\"#strings\" id=\"id236\" rel=\"nofollow\">Strings</a></li>\n<li><a href=\"#import\" id=\"id237\" rel=\"nofollow\">Import</a></li>\n<li><a href=\"#cython-nogil-api\" id=\"id238\" rel=\"nofollow\">Cython/nogil API</a></li>\n<li><a href=\"#additional-packages-and-utilities\" id=\"id239\" rel=\"nofollow\">Additional packages and utilities</a></li>\n<li><a href=\"#pygolang-change-history\" id=\"id240\" rel=\"nofollow\">Pygolang change history</a></li>\n</ul>\n</div>\n<div id=\"gpython\">\n<h2><a href=\"#id231\" rel=\"nofollow\">GPython</a></h2>\n<p>Command <cite>gpython</cite> provides Python interpreter that supports lightweight threads\nvia tight integration with <a href=\"http://www.gevent.org/\" rel=\"nofollow\">gevent</a>. The standard library of GPython is API\ncompatible with Python standard library, but inplace of OS threads lightweight\ncoroutines are provided, and IO is internally organized via\n<a href=\"http://libuv.org/\" rel=\"nofollow\">libuv</a>/<a href=\"http://software.schmorp.de/pkg/libev.html\" rel=\"nofollow\">libev</a>-based IO scheduler. Consequently programs can spawn lots of\ncoroutines cheaply, and modules like <cite>time</cite>, <cite>socket</cite>, <cite>ssl</cite>, <cite>subprocess</cite> etc -\nall could be used from all coroutines simultaneously, and in the same blocking way\nas if every coroutine was a full OS thread. This gives ability to scale programs\nwithout changing concurrency model and existing code.</p>\n<p>Additionally GPython sets UTF-8 to be default encoding always, and puts <cite>go</cite>,\n<cite>chan</cite>, <cite>select</cite> etc into builtin namespace.</p>\n<div>\n<p>Note</p>\n<p>GPython is optional and the rest of Pygolang can be used from under standard Python too.\nHowever without gevent integration <cite>go</cite> spawns full - not lightweight - OS thread.</p>\n</div>\n</div>\n<div id=\"goroutines-and-channels\">\n<h2><a href=\"#id232\" rel=\"nofollow\">Goroutines and channels</a></h2>\n<p><cite>go</cite> spawns a coroutine, or thread if gevent was not activated. It is possible to\nexchange data in between either threads or coroutines via channels. <cite>chan</cite>\ncreates a new channel with Go semantic - either synchronous or buffered. Use\n<cite>chan.recv</cite>, <cite>chan.send</cite> and <cite>chan.close</cite> for communication. <cite>nilchan</cite>\nstands for nil channel. <cite>select</cite> can be used to multiplex on several\nchannels. For example:</p>\n<pre>ch1 = chan()    # synchronous channel\nch2 = chan(3)   # channel with buffer of size 3\n\ndef _():\n    ch1.send('a')\n    ch2.send('b')\ngo(_)\n\nch1.recv()      # will give 'a'\nch2.recv_()     # will give ('b', True)\n\nch2 = nilchan   # rebind ch2 to nil channel\n_, _rx = select(\n    ch1.recv,           # 0\n    ch1.recv_,          # 1\n    (ch1.send, obj),    # 2\n    ch2.recv,           # 3\n    default,            # 4\n)\nif _ == 0:\n    # _rx is what was received from ch1\n    ...\nif _ == 1:\n    # _rx is (rx, ok) of what was received from ch1\n    ...\nif _ == 2:\n    # we know obj was sent to ch1\n    ...\nif _ == 3:\n    # this case will be never selected because\n    # send/recv on nil channel block forever.\n    ...\nif _ == 4:\n    # default case\n    ...\n</pre>\n<p>By default <cite>chan</cite> creates new channel that can carry arbitrary Python objects.\nHowever type of channel elements can be specified via <cite>chan(dtype=X)</cite> - for\nexample <cite>chan(dtype=\u2019C.int\u2019)</cite> creates new channel whose elements are C\nintegers. <cite>chan.nil(X)</cite> creates typed nil channel. <a href=\"#cython-nogil-api\" rel=\"nofollow\">Cython/nogil API</a>\nexplains how channels with non-Python dtypes, besides in-Python usage, can be\nadditionally used for interaction in between Python and nogil worlds.</p>\n</div>\n<div id=\"methods\">\n<h2><a href=\"#id233\" rel=\"nofollow\">Methods</a></h2>\n<p><cite>func</cite> decorator allows to define methods separate from class.</p>\n<p>For example:</p>\n<pre>@func(MyClass)\ndef my_method(self, ...):\n    ...\n</pre>\n<p>will define <cite>MyClass.my_method()</cite>.</p>\n<p><cite>func</cite> can be also used on just functions, for example:</p>\n<pre>@func\ndef my_function(...):\n    ...\n</pre>\n</div>\n<div id=\"defer-recover-panic\">\n<h2><a href=\"#id234\" rel=\"nofollow\">Defer / recover / panic</a></h2>\n<p><cite>defer</cite> allows to schedule a cleanup to be executed when current function\nreturns. It is similar to <cite>try</cite>/<cite>finally</cite> but does not force the cleanup part\nto be far away in the end. For example:</p>\n<pre>wc = wcfs.join(zurl)    \u2502     wc = wcfs.join(zurl)\ndefer(wc.close)         \u2502     try:\n                        \u2502        ...\n...                     \u2502        ...\n...                     \u2502        ...\n...                     \u2502     finally:\n                        \u2502        wc.close()\n</pre>\n<p>If deferred cleanup fails, previously unhandled exception, if any, won\u2019t be\nlost - it will be chained with (<a href=\"https://www.python.org/dev/peps/pep-3134/\" rel=\"nofollow\">PEP 3134</a>) and included into traceback dump\neven on Python2.</p>\n<p>For completeness there is <cite>recover</cite> and <cite>panic</cite> that allow to program with\nGo-style error handling, for example:</p>\n<pre>def _():\n   r = recover()\n   if r is not None:\n      print(\"recovered. error was: %s\" % (r,))\ndefer(_)\n\n...\n\npanic(\"aaa\")\n</pre>\n<p>But <cite>recover</cite> and <cite>panic</cite> are probably of less utility since they can be\npractically natively modelled with <cite>try</cite>/<cite>except</cite>.</p>\n<p>If <cite>defer</cite> is used, the function that uses it must be wrapped with <cite>@func</cite>\ndecorator.</p>\n</div>\n<div id=\"errors\">\n<h2><a href=\"#id235\" rel=\"nofollow\">Errors</a></h2>\n<p>In concurrent systems operational stack generally differs from execution code\nflow, which makes code stack traces significantly less useful to understand an\nerror. Pygolang provides support for error chaining that gives ability to build\noperational error stack and to inspect resulting errors:</p>\n<p><cite>error</cite> is error type that can be used by itself or subclassed. By\nproviding <cite>.Unwrap()</cite> method, an error can optionally wrap another error this\nway forming an error chain. <cite>errors.Is</cite> reports whether an item in error chain\nmatches target. <cite>fmt.Errorf</cite> provides handy way to build wrapping errors.\nFor example:</p>\n<pre>e1 = error(\"problem\")\ne2 = fmt.Errorf(\"doing something for %s: %w\", \"joe\", e1)\nprint(e2)         # prints \"doing something for joe: problem\"\nerrors.Is(e2, e1) # gives True\n\n# OpError is example class to represents an error of operation op(path).\nclass OpError(error):\n   def __init__(e, op, path, err):\n      e.op   = op\n      e.path = path\n      e.err  = err\n\n   # .Error() should be used to define what error's string is.\n   # it is automatically used by error to also provide both .__str__ and .__repr__.\n   def Error(e):\n      return \"%s %s: %s\" % (e.op, e.path, e.err)\n\n   # provided .Unwrap() indicates that this error is chained.\n   def Unwrap(e):\n      return e.err\n\nmye = OpError(\"read\", \"file.txt\", io.ErrUnexpectedEOF)\nprint(mye)                          # prints \"read file.txt: unexpected EOF\"\nerrors.Is(mye, io.EOF)              # gives False\nerrors.Is(mye. io.ErrUnexpectedEOF) # gives True\n</pre>\n<p>Both wrapped and wrapping error can be of arbitrary Python type - not\nnecessarily of <cite>error</cite> or its subclass.</p>\n<p><cite>error</cite> is also used to represent at Python level an error returned by\nCython/nogil call (see <a href=\"#cython-nogil-api\" rel=\"nofollow\">Cython/nogil API</a>) and preserves Cython/nogil error\nchain for inspection at Python level.</p>\n<p>Pygolang error chaining integrates with Python error chaining and takes\n<cite>.__cause__</cite> attribute into account for exception created via <cite>raise X from Y</cite>\n(<a href=\"https://www.python.org/dev/peps/pep-3134/\" rel=\"nofollow\">PEP 3134</a>).</p>\n</div>\n<div id=\"strings\">\n<h2><a href=\"#id236\" rel=\"nofollow\">Strings</a></h2>\n<p><cite>b</cite> and <cite>u</cite> provide way to make sure an object is either bytes or unicode.\n<cite>b(obj)</cite> converts str/unicode/bytes obj to UTF-8 encoded bytestring, while\n<cite>u(obj)</cite> converts str/unicode/bytes obj to unicode string. For example:</p>\n<pre>b(\"\u043f\u0440\u0438\u0432\u0435\u0442 \u043c\u0438\u0440\")   # -&gt; gives bytes corresponding to UTF-8 encoding of \"\u043f\u0440\u0438\u0432\u0435\u0442 \u043c\u0438\u0440\".\n\ndef f(s):\n   s = u(s)       # make sure s is unicode, decoding as UTF-8(*) if it was bytes.\n   ...            # (*) but see below about lack of decode errors.\n</pre>\n<p>The conversion in both encoding and decoding never fails and never looses\ninformation: <cite>b(u(\u00b7))</cite> and <cite>u(b(\u00b7))</cite> are always identity for bytes and unicode\ncorrespondingly, even if bytes input is not valid UTF-8.</p>\n</div>\n<div id=\"import\">\n<h2><a href=\"#id237\" rel=\"nofollow\">Import</a></h2>\n<p><cite>gimport</cite> provides way to import python modules by full path in a Go workspace.</p>\n<p>For example</p>\n<pre>lonet = gimport('lab.nexedi.com/kirr/go123/xnet/lonet')\n</pre>\n<p>will import either</p>\n<ul>\n<li><cite>lab.nexedi.com/kirr/go123/xnet/lonet.py</cite>, or</li>\n<li><cite>lab.nexedi.com/kirr/go123/xnet/lonet/__init__.py</cite></li>\n</ul>\n<p>located in <cite>src/</cite> under <cite>$GOPATH</cite>.</p>\n</div>\n<div id=\"cython-nogil-api\">\n<h2><a href=\"#id238\" rel=\"nofollow\">Cython/nogil API</a></h2>\n<p>Cython package <cite>golang</cite> provides <em>nogil</em> API with goroutines, channels and\nother features that mirror corresponding Python package. Cython API is not only\nfaster compared to Python version, but also, due to <em>nogil</em> property, allows to\nbuild concurrent systems without limitations imposed by Python\u2019s GIL. All that\nwhile still programming in Python-like language. Brief description of\nCython/nogil API follows:</p>\n<p><cite>go</cite> spawns new task - a coroutine, or thread, depending on activated runtime.\n<cite>chan[T]</cite> represents a channel with Go semantic and elements of type <cite>T</cite>.\nUse <cite>makechan[T]</cite> to create new channel, and <cite>chan[T].recv</cite>, <cite>chan[T].send</cite>,\n<cite>chan[T].close</cite> for communication. <cite>nil</cite> stands for nil channel. <cite>select</cite>\ncan be used to multiplex on several channels. For example:</p>\n<pre>cdef nogil:\n   struct Point:\n      int x\n      int y\n\n   void worker(chan[int] chi, chan[Point] chp):\n      chi.send(1)\n\n      cdef Point p\n      p.x = 3\n      p.y = 4\n      chp.send(p)\n\n   void myfunc():\n      cdef chan[int]   chi = makechan[int]()       # synchronous channel of integers\n      cdef chan[Point] chp = makechan[Point](3)    # channel with buffer of size 3 and Point elements\n\n      go(worker, chi, chp)\n\n      i = chi.recv()    # will give 1\n      p = chp.recv()    # will give Point(3,4)\n\n      chp = nil         # rebind chp to nil channel\n      cdef cbool ok\n      cdef int j = 33\n      _ = select([\n          chi.recvs(&amp;i),         # 0\n          chi.recvs(&amp;i, &amp;ok),    # 1\n          chi.sends(&amp;j),         # 2\n          chp.recvs(&amp;p),         # 3\n          default,               # 4\n      ])\n      if _ == 0:\n          # i is what was received from chi\n          ...\n      if _ == 1:\n          # (i, ok) is what was received from chi\n          ...\n      if _ == 2:\n          # we know j was sent to chi\n          ...\n      if _ == 3:\n          # this case will be never selected because\n          # send/recv on nil channel block forever.\n          ...\n      if _ == 4:\n          # default case\n          ...\n</pre>\n<p>Python channels are represented by <cite>pychan</cite> cdef class. Python\nchannels that carry non-Python elements (<cite>pychan.dtype != DTYPE_PYOBJECT</cite>) can\nbe converted to Cython/nogil <cite>chan[T]</cite> via <cite>pychan.chan_*()</cite>.\nSimilarly Cython/nogil <cite>chan[T]</cite> can be wrapped into <cite>pychan</cite> via\n<cite>pychan.from_chan_*()</cite>. This provides interaction mechanism\nin between <em>nogil</em> and Python worlds. For example:</p>\n<pre>def myfunc(pychan pych):\n   if pych.dtype != DTYPE_INT:\n      raise TypeError(\"expected chan[int]\")\n\n   cdef chan[int] ch = pych.chan_int()  # pychan -&gt; chan[int]\n   with nogil:\n      # use ch in nogil code. Both Python and nogil parts can\n      # send/receive on the channel simultaneously.\n      ...\n\ndef mytick(): # -&gt; pychan\n   cdef chan[int] ch\n   with nogil:\n      # create a channel that is connected to some nogil task of the program\n      ch = ...\n\n   # wrap the channel into pychan. Both Python and nogil parts can\n   # send/receive on the channel simultaneously.\n   cdef pychan pych = pychan.from_chan_int(ch)  # pychan &lt;- chan[int]\n   return pych\n</pre>\n<p><cite>error</cite> is the interface that represents errors. <cite>errors.New</cite> and <cite>fmt.errorf</cite>\nprovide way to build errors from text. An error can optionally wrap another\nerror by implementing <cite>errorWrapper</cite> interface and providing <cite>.Unwrap()</cite> method.\n<cite>errors.Is</cite> reports whether an item in error chain matches target. <cite>fmt.errorf</cite>\nwith <cite>%w</cite> specifier provide handy way to build wrapping errors. For example:</p>\n<pre>e1 = errors.New(\"problem\")\ne2 = fmt.errorf(\"doing something for %s: %w\", \"joe\", e1)\ne2.Error()        # gives \"doing something for joe: problem\"\nerrors.Is(e2, e1) # gives True\n</pre>\n<p>An <cite>error</cite> can be exposed to Python via <cite>pyerror</cite> cdef class wrapper\ninstantiated by <cite>pyerror.from_error()</cite>. <cite>pyerror</cite> preserves Cython/nogil error\nchain for inspection by Python-level <cite>error.Is</cite>.</p>\n<p><cite>panic</cite> stops normal execution of current goroutine by throwing a C-level\nexception. On Python/C boundaries C-level exceptions have to be converted to\nPython-level exceptions with <cite>topyexc</cite>. For example:</p>\n<pre>cdef void _do_something() nogil:\n   ...\n   panic(\"bug\")   # hit a bug\n\n# do_something is called by Python code - it is thus on Python/C boundary\ncdef void do_something() nogil except +topyexc:\n   _do_something()\n\ndef pydo_something():\n   with nogil:\n      do_something()\n</pre>\n<p>See <a href=\"https://lab.nexedi.com/kirr/pygolang/tree/master/golang/libgolang.h\" rel=\"nofollow\"><cite>libgolang.h</cite></a> and <a href=\"https://lab.nexedi.com/kirr/pygolang/tree/master/golang/_golang.pxd\" rel=\"nofollow\"><cite>golang.pxd</cite></a> for details of the API.\nSee also <a href=\"https://lab.nexedi.com/kirr/pygolang/tree/master/golang/pyx/testprog/golang_pyx_user\" rel=\"nofollow\"><cite>testprog/golang_pyx_user/</cite></a> for demo project that uses Pygolang in\nCython/nogil mode.</p>\n</div>\n<hr class=\"docutils\">\n<div id=\"additional-packages-and-utilities\">\n<h2><a href=\"#id239\" rel=\"nofollow\">Additional packages and utilities</a></h2>\n<p>The following additional packages and utilities are also provided to close gaps\nbetween Python/Cython and Go environments:</p>\n<div id=\"id8\">\n<ul>\n<li><a href=\"#concurrency\" id=\"id241\" rel=\"nofollow\">Concurrency</a></li>\n<li><a href=\"#string-conversion\" id=\"id242\" rel=\"nofollow\">String conversion</a></li>\n<li><a href=\"#benchmarking-and-testing\" id=\"id243\" rel=\"nofollow\">Benchmarking and testing</a></li>\n</ul>\n</div>\n<div id=\"concurrency\">\n<h3><a href=\"#id241\" rel=\"nofollow\">Concurrency</a></h3>\n<p>In addition to <cite>go</cite> and channels, the following packages are provided to help\nhandle concurrency in structured ways:</p>\n<ul>\n<li><a href=\"https://lab.nexedi.com/kirr/pygolang/tree/master/golang/context.h\" rel=\"nofollow\"><cite>golang.context</cite></a> (<a href=\"https://lab.nexedi.com/kirr/pygolang/tree/master/golang/context.py\" rel=\"nofollow\">py</a>, <a href=\"https://lab.nexedi.com/kirr/pygolang/tree/master/golang/_context.pxd\" rel=\"nofollow\">pyx</a>) provides contexts to propagate deadlines, cancellation and\ntask-scoped values among spawned goroutines <a href=\"#id16\" id=\"id9\" rel=\"nofollow\">[*]</a>.</li>\n<li><a href=\"https://lab.nexedi.com/kirr/pygolang/tree/master/golang/sync.h\" rel=\"nofollow\"><cite>golang.sync</cite></a> (<a href=\"https://lab.nexedi.com/kirr/pygolang/tree/master/golang/sync.py\" rel=\"nofollow\">py</a>, <a href=\"https://lab.nexedi.com/kirr/pygolang/tree/master/golang/_sync.pxd\" rel=\"nofollow\">pyx</a>) provides <cite>sync.WorkGroup</cite> to spawn group of goroutines working\non a common task. It also provides low-level primitives - for example\n<cite>sync.Once</cite>, <cite>sync.WaitGroup</cite>, <cite>sync.Mutex</cite> and <cite>sync.RWMutex</cite> - that are\nsometimes useful too.</li>\n<li><a href=\"https://lab.nexedi.com/kirr/pygolang/tree/master/golang/time.h\" rel=\"nofollow\"><cite>golang.time</cite></a> (<a href=\"https://lab.nexedi.com/kirr/pygolang/tree/master/golang/time.py\" rel=\"nofollow\">py</a>, <a href=\"https://lab.nexedi.com/kirr/pygolang/tree/master/golang/_time.pxd\" rel=\"nofollow\">pyx</a>) provides timers integrated with channels.</li>\n</ul>\n<table id=\"id16\">\n<col><col>\n<tbody>\n<tr><td><a href=\"#id9\" rel=\"nofollow\">[*]</a></td><td>See <a href=\"https://blog.golang.org/context\" rel=\"nofollow\">Go Concurrency Patterns: Context</a> for overview.</td></tr>\n</tbody>\n</table>\n</div>\n<div id=\"string-conversion\">\n<h3><a href=\"#id242\" rel=\"nofollow\">String conversion</a></h3>\n<p><cite>qq</cite> (import from <cite>golang.gcompat</cite>) provides <cite>%q</cite> functionality that quotes as\nGo would do. For example the following code will print name quoted in <cite>\u201c</cite>\nwithout escaping printable UTF-8 characters:</p>\n<pre>print('hello %s' % qq(name))\n</pre>\n<p><cite>qq</cite> accepts both <cite>str</cite> and <cite>bytes</cite> (<cite>unicode</cite> and <cite>str</cite> on Python2)\nand also any other type that can be converted to <cite>str</cite>.</p>\n<p>Package <a href=\"https://lab.nexedi.com/kirr/pygolang/tree/master/golang/strconv.py\" rel=\"nofollow\"><cite>golang.strconv</cite></a> provides direct access to conversion routines, for\nexample <cite>strconv.quote</cite> and <cite>strconv.unquote</cite>.</p>\n</div>\n<div id=\"benchmarking-and-testing\">\n<h3><a href=\"#id243\" rel=\"nofollow\">Benchmarking and testing</a></h3>\n<p><cite>py.bench</cite> allows to benchmark python code similarly to <cite>go test -bench</cite> and <cite>py.test</cite>.\nFor example, running <cite>py.bench</cite> on the following code:</p>\n<pre>def bench_add(b):\n    x, y = 1, 2\n    for i in xrange(b.N):\n        x + y\n</pre>\n<p>gives something like:</p>\n<pre>$ py.bench --count=3 x.py\n...\npymod: bench_add.py\nBenchmarkadd    50000000        0.020 \u00b5s/op\nBenchmarkadd    50000000        0.020 \u00b5s/op\nBenchmarkadd    50000000        0.020 \u00b5s/op\n</pre>\n<p>Package <a href=\"https://lab.nexedi.com/kirr/pygolang/tree/master/golang/testing.py\" rel=\"nofollow\"><cite>golang.testing</cite></a> provides corresponding runtime bits, e.g. <cite>testing.B</cite>.</p>\n<p><cite>py.bench</cite> produces output in <a href=\"https://github.com/golang/proposal/blob/master/design/14313-benchmark-format.md\" rel=\"nofollow\">Go benchmark format</a>, and so benchmark results\ncan be analyzed and compared with standard Go tools, for example with\n<a href=\"https://godoc.org/golang.org/x/perf/cmd/benchstat\" rel=\"nofollow\">benchstat</a>.\nAdditionally package <a href=\"https://lab.nexedi.com/kirr/pygolang/tree/master/golang/x/perf/benchlib.py\" rel=\"nofollow\"><cite>golang.x.perf.benchlib</cite></a> can be used to load and process\nsuch benchmarking data in Python.</p>\n</div>\n</div>\n<hr class=\"docutils\">\n<div id=\"pygolang-change-history\">\n<h2><a href=\"#id240\" rel=\"nofollow\">Pygolang change history</a></h2>\n<div id=\"id20\">\n<h3>0.0.6 (2020-02-28)</h3>\n<ul>\n<li>Provide support for error chaining. In concurrent systems\noperational stack generally differs from execution code flow, which makes\ncode stack traces significantly less useful to understand an error.\nError chaining gives ability to build operational\nerror stack and to inspect resulting errors.\n(<a href=\"https://lab.nexedi.com/kirr/pygolang/commit/fd95c88a\" rel=\"nofollow\">commit 1</a>, <a href=\"https://lab.nexedi.com/kirr/pygolang/commit/17798442\" rel=\"nofollow\">2</a>, <a href=\"https://lab.nexedi.com/kirr/pygolang/commit/78d0c76f\" rel=\"nofollow\">3</a>, <a href=\"https://lab.nexedi.com/kirr/pygolang/commit/337de0d7\" rel=\"nofollow\">4</a>, <a href=\"https://lab.nexedi.com/kirr/pygolang/commit/03f88c0b\" rel=\"nofollow\">5</a>, <a href=\"https://lab.nexedi.com/kirr/pygolang/commit/80ab5863\" rel=\"nofollow\">6</a>, <a href=\"https://blog.golang.org/go1.13-errors\" rel=\"nofollow\">overview 1</a>, <a href=\"https://commandcenter.blogspot.com/2017/12/error-handling-in-upspin.html\" rel=\"nofollow\">overview 2</a>).</li>\n<li>Provide <cite>unicode</cite> \u2194 <cite>bytes</cite> conversion:\n<cite>b(obj)</cite> converts str/unicode/bytes obj to UTF-8 encoded bytestring, while\n<cite>u(obj)</cite> converts str/unicode/bytes obj to unicode string. The conversion in\nboth encoding and decoding never fails and never looses information:\n<cite>b(u(\u00b7))</cite> and <cite>u(b(\u00b7))</cite> are always identity for bytes and unicode\ncorrespondingly, even if bytes input is not valid UTF-8.\n(<a href=\"https://lab.nexedi.com/kirr/pygolang/commit/bcb95cd5\" rel=\"nofollow\">commit 1</a>, <a href=\"https://lab.nexedi.com/kirr/pygolang/commit/073d81a8\" rel=\"nofollow\">2</a>, <a href=\"https://lab.nexedi.com/kirr/pygolang/commit/5cc679ac\" rel=\"nofollow\">3</a>, <a href=\"https://lab.nexedi.com/kirr/pygolang/commit/0561926a\" rel=\"nofollow\">4</a>, <a href=\"https://lab.nexedi.com/kirr/pygolang/commit/8c459a99\" rel=\"nofollow\">5</a>, <a href=\"https://lab.nexedi.com/kirr/pygolang/commit/3073ac98\" rel=\"nofollow\">6</a>, <a href=\"https://lab.nexedi.com/kirr/pygolang/commit/e028cf28\" rel=\"nofollow\">7</a>).</li>\n<li>Provide <cite>sync.RWMutex</cite> (<a href=\"https://lab.nexedi.com/kirr/pygolang/commit/1ad3c2d5\" rel=\"nofollow\">commit 1</a>, <a href=\"https://lab.nexedi.com/kirr/pygolang/commit/a9345a98\" rel=\"nofollow\">2</a>).</li>\n<li>Provide <cite>nil</cite> as alias for <cite>nullptr</cite> and NULL (<a href=\"https://lab.nexedi.com/kirr/pygolang/commit/60f6db6f\" rel=\"nofollow\">commit 1</a>, <a href=\"https://lab.nexedi.com/kirr/pygolang/commit/fc1c3e24\" rel=\"nofollow\">2</a>, <a href=\"https://lab.nexedi.com/kirr/pygolang/commit/01ade7ac\" rel=\"nofollow\">3</a>, <a href=\"https://lab.nexedi.com/kirr/pygolang/commit/230c81c4\" rel=\"nofollow\">4</a>).</li>\n<li>Add <cite>io</cite> package with <cite>io.EOF</cite> and <cite>io.ErrUnexpectedEOF</cite> (<a href=\"https://lab.nexedi.com/kirr/pygolang/commit/36ab859c\" rel=\"nofollow\">commit</a>).</li>\n<li>Correct <cite>cxx.dict</cite> API to follow libgolang comma-ok style (<a href=\"https://lab.nexedi.com/kirr/pygolang/commit/58fcdd87\" rel=\"nofollow\">commit</a>).</li>\n<li>Provide <cite>pyx.build.DSO</cite> for projects to build dynamic libraries that\nuse/link-to libgolang (<a href=\"https://lab.nexedi.com/kirr/pygolang/commit/64765688\" rel=\"nofollow\">commit 1</a>, <a href=\"https://lab.nexedi.com/kirr/pygolang/commit/cd67996e\" rel=\"nofollow\">2</a>).</li>\n<li>Fix <cite>pyx.build.build_ext</cite> to allow customization (<a href=\"https://lab.nexedi.com/kirr/pygolang/commit/8af78fc5\" rel=\"nofollow\">commit</a>).</li>\n</ul>\n<div>\n<div>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <em>This release is driven by</em> <a href=\"https://pypi.org/project/wendelin.core\" rel=\"nofollow\"><em>wendelin.core</em></a> <em>v2 needs</em>.</div>\n</div>\n</div>\n<div id=\"id47\">\n<h3>0.0.5 (2019-11-27)</h3>\n<ul>\n<li>Add support for typed Python channels. For\nexample <cite>chan(dtype=\u2019C.int\u2019)</cite> creates channel whose elements type is C <cite>int</cite>\ninstead of Python object. Besides providing runtime type-safety, this allows\nto build interaction in between Python and nogil worlds (<a href=\"https://lab.nexedi.com/kirr/pygolang/commit/f2847307\" rel=\"nofollow\">commit 1</a>, <a href=\"https://lab.nexedi.com/kirr/pygolang/commit/d6c8862d\" rel=\"nofollow\">2</a>,\n<a href=\"https://lab.nexedi.com/kirr/pygolang/commit/2590e9a7\" rel=\"nofollow\">3</a>, <a href=\"https://lab.nexedi.com/kirr/pygolang/commit/47111d3e\" rel=\"nofollow\">4</a>, <a href=\"https://lab.nexedi.com/kirr/pygolang/commit/30561db4\" rel=\"nofollow\">5</a>, <a href=\"https://lab.nexedi.com/kirr/pygolang/commit/f6fab7b5\" rel=\"nofollow\">6</a>, <a href=\"https://lab.nexedi.com/kirr/pygolang/commit/2c8063f4\" rel=\"nofollow\">7</a>, <a href=\"https://lab.nexedi.com/kirr/pygolang/commit/3121b290\" rel=\"nofollow\">8</a>, <a href=\"https://lab.nexedi.com/kirr/pygolang/commit/77719d8a\" rel=\"nofollow\">9</a>, <a href=\"https://lab.nexedi.com/kirr/pygolang/commit/69b80926\" rel=\"nofollow\">10</a>, <a href=\"https://lab.nexedi.com/kirr/pygolang/commit/07f9430d\" rel=\"nofollow\">11</a>).</li>\n<li>Provide automatic memory management for C++/Cython/nogil classes.\nUsed approach complements <cite>\u201cAutomatic multithreaded-safe memory managed\nclasses in Cython\u201d</cite> (Gwena\u00ebl Samain et al. 2019, <a href=\"https://www.nexedi.com/blog/NXD-Document.Blog.Cypclass\" rel=\"nofollow\">blog post</a>) (<a href=\"https://lab.nexedi.com/kirr/pygolang/commit/e82b4fab\" rel=\"nofollow\">commit 1</a>,\n<a href=\"https://lab.nexedi.com/kirr/pygolang/commit/e614d641\" rel=\"nofollow\">2</a>, <a href=\"https://lab.nexedi.com/kirr/pygolang/commit/af4a8d80\" rel=\"nofollow\">3</a>, <a href=\"https://lab.nexedi.com/kirr/pygolang/commit/b2253abf\" rel=\"nofollow\">4</a>, <a href=\"https://lab.nexedi.com/kirr/pygolang/commit/274afa3f\" rel=\"nofollow\">5</a>, <a href=\"https://lab.nexedi.com/kirr/pygolang/commit/fd2a6fab\" rel=\"nofollow\">6</a>, <a href=\"https://lab.nexedi.com/kirr/pygolang/commit/7f0672aa\" rel=\"nofollow\">7</a>).</li>\n<li>Provide minimal support for interfaces with empty and <cite>error</cite> interfaces\nprovided by base library (<a href=\"https://lab.nexedi.com/kirr/pygolang/commit/5a99b769\" rel=\"nofollow\">commit 1</a>, <a href=\"https://lab.nexedi.com/kirr/pygolang/commit/45c8cddd\" rel=\"nofollow\">2</a>).</li>\n<li>Provide <cite>sync.Mutex</cite> and <cite>sync.Sema</cite> as part of both Python and Cython/nogil\nAPI (<a href=\"https://lab.nexedi.com/kirr/pygolang/commit/d99bb6b7\" rel=\"nofollow\">commit 1</a>, <a href=\"https://lab.nexedi.com/kirr/pygolang/commit/9c795ca7\" rel=\"nofollow\">2</a>, <a href=\"https://lab.nexedi.com/kirr/pygolang/commit/34b7a1f4\" rel=\"nofollow\">3</a>, <a href=\"https://lab.nexedi.com/kirr/pygolang/commit/2c1be15e\" rel=\"nofollow\">4</a>, <a href=\"https://lab.nexedi.com/kirr/pygolang/commit/e6788170\" rel=\"nofollow\">5</a>, <a href=\"https://lab.nexedi.com/kirr/pygolang/commit/548f2df1\" rel=\"nofollow\">6</a>).</li>\n<li>Provide C++/Cython/nogil API for <cite>time</cite> package. Python-level <cite>time</cite> becomes a\nsmall wrapper around Cython/nogil one (<a href=\"https://lab.nexedi.com/kirr/pygolang/commit/32f34607\" rel=\"nofollow\">commit 1</a>, <a href=\"https://lab.nexedi.com/kirr/pygolang/commit/0e838833\" rel=\"nofollow\">2</a>, <a href=\"https://lab.nexedi.com/kirr/pygolang/commit/106c1b95\" rel=\"nofollow\">3</a>, <a href=\"https://lab.nexedi.com/kirr/pygolang/commit/4f6a9e09\" rel=\"nofollow\">4</a>, <a href=\"https://lab.nexedi.com/kirr/pygolang/commit/7c929b25\" rel=\"nofollow\">5</a>, <a href=\"https://lab.nexedi.com/kirr/pygolang/commit/8c2ac5e9\" rel=\"nofollow\">6</a>,\n<a href=\"https://lab.nexedi.com/kirr/pygolang/commit/a0ba1226\" rel=\"nofollow\">7</a>, <a href=\"https://lab.nexedi.com/kirr/pygolang/commit/873cf8aa\" rel=\"nofollow\">8</a>, <a href=\"https://lab.nexedi.com/kirr/pygolang/commit/8399ff2d\" rel=\"nofollow\">9</a>, <a href=\"https://lab.nexedi.com/kirr/pygolang/commit/419c8950\" rel=\"nofollow\">10</a>, <a href=\"https://lab.nexedi.com/kirr/pygolang/commit/1a9dae3b\" rel=\"nofollow\">11</a>, <a href=\"https://lab.nexedi.com/kirr/pygolang/commit/b073f6df\" rel=\"nofollow\">12</a>, <a href=\"https://lab.nexedi.com/kirr/pygolang/commit/0e6088ec\" rel=\"nofollow\">13</a>, <a href=\"https://lab.nexedi.com/kirr/pygolang/commit/73182038\" rel=\"nofollow\">14</a>).</li>\n<li>Provide C++/Cython/nogil API for <cite>context</cite> package. Python-level <cite>context</cite>\nbecomes a small wrapper around Cython/nogil one (<a href=\"https://lab.nexedi.com/kirr/pygolang/commit/149ae661\" rel=\"nofollow\">commit 1</a>, <a href=\"https://lab.nexedi.com/kirr/pygolang/commit/cc7069e0\" rel=\"nofollow\">2</a>, <a href=\"https://lab.nexedi.com/kirr/pygolang/commit/223d7950\" rel=\"nofollow\">3</a>, <a href=\"https://lab.nexedi.com/kirr/pygolang/commit/89381488\" rel=\"nofollow\">4</a>,\n<a href=\"https://lab.nexedi.com/kirr/pygolang/commit/9662785b\" rel=\"nofollow\">5</a>, <a href=\"https://lab.nexedi.com/kirr/pygolang/commit/34e3c404\" rel=\"nofollow\">6</a>, <a href=\"https://lab.nexedi.com/kirr/pygolang/commit/ba2ab242\" rel=\"nofollow\">7</a>, <a href=\"https://lab.nexedi.com/kirr/pygolang/commit/9869dc45\" rel=\"nofollow\">8</a>, <a href=\"https://lab.nexedi.com/kirr/pygolang/commit/20761c55\" rel=\"nofollow\">9</a>, <a href=\"https://lab.nexedi.com/kirr/pygolang/commit/f76c11f3\" rel=\"nofollow\">10</a>, <a href=\"https://lab.nexedi.com/kirr/pygolang/commit/281defb2\" rel=\"nofollow\">11</a>, <a href=\"https://lab.nexedi.com/kirr/pygolang/commit/66e1e756\" rel=\"nofollow\">12</a>, <a href=\"https://lab.nexedi.com/kirr/pygolang/commit/9216e2db\" rel=\"nofollow\">13</a>, <a href=\"https://lab.nexedi.com/kirr/pygolang/commit/2a359791\" rel=\"nofollow\">14</a>, <a href=\"https://lab.nexedi.com/kirr/pygolang/commit/a6c1c984\" rel=\"nofollow\">15</a>).</li>\n<li>Provide C++/Cython/nogil API for <cite>sync</cite> package. Python-level <cite>sync</cite> becomes a\nsmall wrapper around Cython/nogil one (<a href=\"https://lab.nexedi.com/kirr/pygolang/commit/0fb53e33\" rel=\"nofollow\">commit 1</a>, <a href=\"https://lab.nexedi.com/kirr/pygolang/commit/b316e504\" rel=\"nofollow\">2</a>, <a href=\"https://lab.nexedi.com/kirr/pygolang/commit/c5c576d2\" rel=\"nofollow\">3</a>, <a href=\"https://lab.nexedi.com/kirr/pygolang/commit/5146a416\" rel=\"nofollow\">4</a>, <a href=\"https://lab.nexedi.com/kirr/pygolang/commit/4fc6e49c\" rel=\"nofollow\">5</a>, <a href=\"https://lab.nexedi.com/kirr/pygolang/commit/a36efe6d\" rel=\"nofollow\">6</a>, <a href=\"https://lab.nexedi.com/kirr/pygolang/commit/4fb9b51c\" rel=\"nofollow\">7</a>, <a href=\"https://lab.nexedi.com/kirr/pygolang/commit/33cf3113\" rel=\"nofollow\">8</a>, <a href=\"https://lab.nexedi.com/kirr/pygolang/commit/6d94fccf\" rel=\"nofollow\">9</a>).</li>\n<li>Add <cite>errors</cite> package with <cite>errors.New</cite> to create new error with provided text (<a href=\"https://lab.nexedi.com/kirr/pygolang/commit/a245ab56\" rel=\"nofollow\">commit</a>).</li>\n<li>Add <cite>fmt</cite> package with <cite>fmt.sprintf</cite> and <cite>fmt.errorf</cite> to format text into\nstrings and errors (<a href=\"https://lab.nexedi.com/kirr/pygolang/commit/309963f8\" rel=\"nofollow\">commit</a>).</li>\n<li>Add <cite>strings</cite> package with utilities like <cite>strings.has_prefix</cite>,\n<cite>strings.split</cite> and similar (<a href=\"https://lab.nexedi.com/kirr/pygolang/commit/0efd4a9a\" rel=\"nofollow\">commit</a>).</li>\n<li>Add <cite>cxx</cite> package with <cite>cxx.dict</cite> and <cite>cxx.set</cite> providing ergonomic interface\nover STL hash map and set (<a href=\"https://lab.nexedi.com/kirr/pygolang/commit/9785f2d3\" rel=\"nofollow\">commit</a>).</li>\n<li>Teach <cite>defer</cite> to chain exceptions (PEP 3134) and adjust traceback dumps to\ninclude exception cause/context even on Python2 (<a href=\"https://lab.nexedi.com/kirr/pygolang/commit/6729fe92\" rel=\"nofollow\">commit 1</a>, <a href=\"https://lab.nexedi.com/kirr/pygolang/commit/bb9a94c3\" rel=\"nofollow\">2</a>, <a href=\"https://lab.nexedi.com/kirr/pygolang/commit/7faaecbc\" rel=\"nofollow\">3</a>, <a href=\"https://lab.nexedi.com/kirr/pygolang/commit/06cac90b\" rel=\"nofollow\">4</a>, <a href=\"https://lab.nexedi.com/kirr/pygolang/commit/1477dd02\" rel=\"nofollow\">5</a>).</li>\n<li>Provide <cite>defer</cite> as part of C++ API too (<a href=\"https://lab.nexedi.com/kirr/pygolang/commit/1d153a45\" rel=\"nofollow\">commit 1</a>, <a href=\"https://lab.nexedi.com/kirr/pygolang/commit/14a249cb\" rel=\"nofollow\">2</a>, <a href=\"https://lab.nexedi.com/kirr/pygolang/commit/39f40159\" rel=\"nofollow\">3</a>).</li>\n<li>Provide <cite>build_ext</cite> as part of <cite>pyx.build</cite> package API. This allows projects\nto customize the way their Pygolang-based extensions are built (<a href=\"https://lab.nexedi.com/kirr/pygolang/commit/8f9e5619\" rel=\"nofollow\">commit 1</a>, <a href=\"https://lab.nexedi.com/kirr/pygolang/commit/b4feee6f\" rel=\"nofollow\">2</a>).</li>\n<li>Fix <cite>recover</cite> to clean current exception (<a href=\"https://lab.nexedi.com/kirr/pygolang/commit/9e6ff8bd\" rel=\"nofollow\">commit 1</a>, <a href=\"https://lab.nexedi.com/kirr/pygolang/commit/5f76f363\" rel=\"nofollow\">2</a>).</li>\n<li>Fix <cite>select</cite> to not leak object reference on error path (<a href=\"https://lab.nexedi.com/kirr/pygolang/commit/e9180de1\" rel=\"nofollow\">commit</a>).</li>\n<li>Fix gevent runtime to preserve Python exception state during runtime calls\n(<a href=\"https://lab.nexedi.com/kirr/pygolang/commit/689dc862\" rel=\"nofollow\">commit 1</a>, <a href=\"https://lab.nexedi.com/kirr/pygolang/commit/47fac0a9\" rel=\"nofollow\">2</a>).</li>\n</ul>\n<div>\n<div>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <em>This release is driven by</em> <a href=\"https://pypi.org/project/wendelin.core\" rel=\"nofollow\"><em>wendelin.core</em></a> <em>v2 needs</em>.</div>\n<div>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <em>This release is dedicated to the memory of</em> <a href=\"https://navytux.spb.ru/memory/%D0%91%D0%B0%D1%81%D1%8F/\" rel=\"nofollow\"><em>\u0411\u0430\u0441\u044f</em></a>.</div>\n</div>\n</div>\n<div id=\"id133\">\n<h3>0.0.4 (2019-09-17)</h3>\n<ul>\n<li>Add ThreadSanitizer, AddressSanitizer and Python debug builds to testing coverage (<a href=\"https://lab.nexedi.com/kirr/pygolang/commit/4dc1a7f0\" rel=\"nofollow\">commit</a>).</li>\n<li>Fix race bugs in <cite>close</cite>, <cite>recv</cite> and <cite>select</cite> (<a href=\"https://lab.nexedi.com/kirr/pygolang/commit/78e38690\" rel=\"nofollow\">commit 1</a>, <a href=\"https://lab.nexedi.com/kirr/pygolang/commit/44737253\" rel=\"nofollow\">2</a>, <a href=\"https://lab.nexedi.com/kirr/pygolang/commit/c92a4830\" rel=\"nofollow\">3</a>, <a href=\"https://lab.nexedi.com/kirr/pygolang/commit/dcf4ebd1\" rel=\"nofollow\">4</a>, <a href=\"https://lab.nexedi.com/kirr/pygolang/commit/65c43848\" rel=\"nofollow\">5</a>, <a href=\"https://lab.nexedi.com/kirr/pygolang/commit/5aa1e899\" rel=\"nofollow\">6</a>).\nA 25-years old race condition in Python was also discovered while doing\nquality assurance on concurrency (<a href=\"https://lab.nexedi.com/kirr/pygolang/commit/5142460d\" rel=\"nofollow\">commit 7</a>, <a href=\"https://bugs.python.org/issue38106\" rel=\"nofollow\">Python bug</a>, <a href=\"https://bitbucket.org/pypy/pypy/issues/3072\" rel=\"nofollow\">PyPy bug</a>).</li>\n<li>If C-level panic causes termination, its argument is now printed (<a href=\"https://lab.nexedi.com/kirr/pygolang/commit/f2b77c94\" rel=\"nofollow\">commit</a>).</li>\n</ul>\n</div>\n<div id=\"id145\">\n<h3>0.0.3 (2019-08-29)</h3>\n<ul>\n<li>Provide Cython/nogil API with goroutines and channels. Cython API is not only\nfaster compared to Python version, but also, due to <em>nogil</em> property, allows to\nbuild concurrent systems without limitations imposed by Python\u2019s GIL.\nThis work was motivated by <a href=\"https://pypi.org/project/wendelin.core\" rel=\"nofollow\">wendelin.core</a> v2, which, due to its design,\nwould deadlock if it tries to take the GIL in its pinner thread.\nImplementation of Python-level goroutines and channels becomes tiny wrapper\naround Cython/nogil API. This brings in ~5x speedup to Python-level <cite>golang</cite>\npackage along the way (<a href=\"https://lab.nexedi.com/kirr/pygolang/commit/d98e42e3\" rel=\"nofollow\">commit 1</a>, <a href=\"https://lab.nexedi.com/kirr/pygolang/commit/352628b5\" rel=\"nofollow\">2</a>, <a href=\"https://lab.nexedi.com/kirr/pygolang/commit/fa667412\" rel=\"nofollow\">3</a>, <a href=\"https://lab.nexedi.com/kirr/pygolang/commit/f812faa2\" rel=\"nofollow\">4</a>, <a href=\"https://lab.nexedi.com/kirr/pygolang/commit/88eb8fe0\" rel=\"nofollow\">5</a>, <a href=\"https://lab.nexedi.com/kirr/pygolang/commit/62bdb806\" rel=\"nofollow\">6</a>, <a href=\"https://lab.nexedi.com/kirr/pygolang/commit/8fa3c15b\" rel=\"nofollow\">7</a>, <a href=\"https://lab.nexedi.com/kirr/pygolang/commit/ad00be70\" rel=\"nofollow\">8</a>, <a href=\"https://lab.nexedi.com/kirr/pygolang/commit/ce8152a2\" rel=\"nofollow\">9</a>,\n<a href=\"https://lab.nexedi.com/kirr/pygolang/commit/7ae8c4f3\" rel=\"nofollow\">10</a>, <a href=\"https://lab.nexedi.com/kirr/pygolang/commit/f971a2a8\" rel=\"nofollow\">11</a>, <a href=\"https://lab.nexedi.com/kirr/pygolang/commit/83259a1b\" rel=\"nofollow\">12</a>, <a href=\"https://lab.nexedi.com/kirr/pygolang/commit/311df9f1\" rel=\"nofollow\">13</a>, <a href=\"https://lab.nexedi.com/kirr/pygolang/commit/7e55394d\" rel=\"nofollow\">14</a>, <a href=\"https://lab.nexedi.com/kirr/pygolang/commit/790189e3\" rel=\"nofollow\">15</a>, <a href=\"https://lab.nexedi.com/kirr/pygolang/commit/a508be9a\" rel=\"nofollow\">16</a>, <a href=\"https://lab.nexedi.com/kirr/pygolang/commit/a0714b8e\" rel=\"nofollow\">17</a>, <a href=\"https://lab.nexedi.com/kirr/pygolang/commit/1bcb8297\" rel=\"nofollow\">18</a>, <a href=\"https://lab.nexedi.com/kirr/pygolang/commit/ef076d3a\" rel=\"nofollow\">19</a>, <a href=\"https://lab.nexedi.com/kirr/pygolang/commit/4166dc65\" rel=\"nofollow\">20</a>, <a href=\"https://lab.nexedi.com/kirr/pygolang/commit/b9333e00\" rel=\"nofollow\">21</a>, <a href=\"https://lab.nexedi.com/kirr/pygolang/commit/d5e74947\" rel=\"nofollow\">22</a>,\n<a href=\"https://lab.nexedi.com/kirr/pygolang/commit/2fc71566\" rel=\"nofollow\">23</a>, <a href=\"https://lab.nexedi.com/kirr/pygolang/commit/e4dddf15\" rel=\"nofollow\">24</a>, <a href=\"https://lab.nexedi.com/kirr/pygolang/commit/69db91bf\" rel=\"nofollow\">25</a>, <a href=\"https://lab.nexedi.com/kirr/pygolang/commit/9efb6575\" rel=\"nofollow\">26</a>, <a href=\"https://lab.nexedi.com/kirr/pygolang/commit/3b241983\" rel=\"nofollow\">27</a>).</li>\n<li>Provide way to install Pygolang with extra requirements in the form of\n<cite>pygolang[&lt;package&gt;]</cite>. For example <cite>pygolang[x.perf.benchlib]</cite> additionally\nselects NumPy, <cite>pygolang[pyx.build]</cite> - everything needed by build system, and\n<cite>pygolang[all]</cite> selects everything (<a href=\"https://lab.nexedi.com/kirr/pygolang/commit/89a1061a\" rel=\"nofollow\">commit</a>).</li>\n<li>Improve tests to exercise the implementation more thoroughly in many\nplaces (<a href=\"https://lab.nexedi.com/kirr/pygolang/commit/773d8fb2\" rel=\"nofollow\">commit 1</a>, <a href=\"https://lab.nexedi.com/kirr/pygolang/commit/3e5b5f01\" rel=\"nofollow\">2</a>, <a href=\"https://lab.nexedi.com/kirr/pygolang/commit/7f2362dd\" rel=\"nofollow\">3</a>, <a href=\"https://lab.nexedi.com/kirr/pygolang/commit/c5810987\" rel=\"nofollow\">4</a>, <a href=\"https://lab.nexedi.com/kirr/pygolang/commit/cb5bfdd2\" rel=\"nofollow\">5</a>, <a href=\"https://lab.nexedi.com/kirr/pygolang/commit/02f6991f\" rel=\"nofollow\">6</a>).</li>\n<li>Fix race bugs in buffered channel send and receive (<a href=\"https://lab.nexedi.com/kirr/pygolang/commit/eb8a1fef\" rel=\"nofollow\">commit 1</a>, <a href=\"https://lab.nexedi.com/kirr/pygolang/commit/c6bb9eb3\" rel=\"nofollow\">2</a>).</li>\n<li>Fix deadlock in <cite>sync.WorkGroup</cite> tests (<a href=\"https://lab.nexedi.com/kirr/pygolang/commit/b8b042c5\" rel=\"nofollow\">commit</a>).</li>\n<li>Fix <cite>@func(cls) def name</cite> not to override <cite>name</cite> in calling context (<a href=\"https://lab.nexedi.com/kirr/pygolang/commit/924a808c\" rel=\"nofollow\">commit</a>).</li>\n<li>Fix <cite>sync.WorkGroup</cite> to propagate all exception types, not only those derived\nfrom <cite>Exception</cite> (<a href=\"https://lab.nexedi.com/kirr/pygolang/commit/79aab7df\" rel=\"nofollow\">commit</a>).</li>\n<li>Replace <cite>threading.Event</cite> with <cite>chan</cite> in <cite>sync.WorkGroup</cite> implementation.\nThis removes reliance on outside semaphore+waitlist code and speeds up\n<cite>sync.WorkGroup</cite> along the way (<a href=\"https://lab.nexedi.com/kirr/pygolang/commit/78d85cdc\" rel=\"nofollow\">commit</a>).</li>\n<li>Speedup <cite>sync.WorkGroup</cite> by not using <cite>@func</cite> at runtime (<a href=\"https://lab.nexedi.com/kirr/pygolang/commit/94c6160b\" rel=\"nofollow\">commit</a>).</li>\n<li>Add benchmarks for <cite>chan</cite>, <cite>select</cite>, <cite>@func</cite> and <cite>defer</cite> (<a href=\"https://lab.nexedi.com/kirr/pygolang/commit/3c55ca59\" rel=\"nofollow\">commit</a>).</li>\n</ul>\n<p>\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 <em>This release is dedicated to the memory of</em> <a href=\"https://navytux.spb.ru/memory/%D0%A2%D1%91%D1%82%D1%8F%20%D0%92%D0%B5%D1%80%D0%B0.pdf#page=3\" rel=\"nofollow\"><em>\u0412\u0435\u0440\u0430 \u041f\u0430\u0432\u043b\u043e\u0432\u043d\u0430 \u0421\u0443\u043f\u0440\u0443\u043d</em></a>.</p>\n</div>\n<div id=\"id190\">\n<h3>0.0.2 (2019-05-16)</h3>\n<ul>\n<li>Add <cite>time</cite> package with <cite>time.Timer</cite> and <cite>time.Ticker</cite> (<a href=\"https://lab.nexedi.com/kirr/pygolang/commit/81dfefa0\" rel=\"nofollow\">commit 1</a>, <a href=\"https://lab.nexedi.com/kirr/pygolang/commit/6e3b3ff4\" rel=\"nofollow\">2</a>, <a href=\"https://lab.nexedi.com/kirr/pygolang/commit/9c260fde\" rel=\"nofollow\">3</a>).</li>\n<li>Add support for deadlines and timeouts to <cite>context</cite> package (<a href=\"https://lab.nexedi.com/kirr/pygolang/commit/58ba1765\" rel=\"nofollow\">commit 1</a>, <a href=\"https://lab.nexedi.com/kirr/pygolang/commit/e5687f2f\" rel=\"nofollow\">2</a>, <a href=\"https://lab.nexedi.com/kirr/pygolang/commit/27f91b78\" rel=\"nofollow\">3</a>, <a href=\"https://lab.nexedi.com/kirr/pygolang/commit/b2450310\" rel=\"nofollow\">4</a>).</li>\n</ul>\n</div>\n<div id=\"id198\">\n<h3>0.0.1 (2019-05-09)</h3>\n<ul>\n<li>Add support for nil channels (<a href=\"https://lab.nexedi.com/kirr/pygolang/commit/2aad64bb\" rel=\"nofollow\">commit</a>).</li>\n<li>Add <cite>context</cite> package to propagate cancellation and task-scoped values among\nspawned goroutines (<a href=\"https://lab.nexedi.com/kirr/pygolang/commit/e9567c7b\" rel=\"nofollow\">commit</a>, <a href=\"https://blog.golang.org/context\" rel=\"nofollow\">overview</a>).</li>\n<li>Add <cite>sync</cite> package with <cite>sync.WorkGroup</cite> to spawn group of goroutines working\non a common task (<a href=\"https://lab.nexedi.com/kirr/pygolang/commit/e6bea2cf\" rel=\"nofollow\">commit 1</a>, <a href=\"https://lab.nexedi.com/kirr/pygolang/commit/9ee7ba91\" rel=\"nofollow\">2</a>).</li>\n<li>Remove deprecated <cite>@method</cite> (<a href=\"https://lab.nexedi.com/kirr/pygolang/commit/262f8986\" rel=\"nofollow\">commit</a>).</li>\n</ul>\n</div>\n<div id=\"dev8-2019-03-24\">\n<h3>0.0.0.dev8 (2019-03-24)</h3>\n<ul>\n<li>Fix <cite>gpython</cite> to properly initialize <cite>sys.path</cite> (<a href=\"https://lab.nexedi.com/kirr/pygolang/commit/6b4990f6\" rel=\"nofollow\">commit</a>).</li>\n<li>Fix channel tests to pass irregardless of surround OS load (<a href=\"https://lab.nexedi.com/kirr/pygolang/commit/731f39e3\" rel=\"nofollow\">commit</a>).</li>\n<li>Deprecate <cite>@method(cls)</cite> in favour of <cite>@func(cls)</cite> (<a href=\"https://lab.nexedi.com/kirr/pygolang/commit/942ee900\" rel=\"nofollow\">commit</a>).</li>\n<li>Support both <cite>PyPy2</cite> and <cite>PyPy3</cite> (<a href=\"https://lab.nexedi.com/kirr/pygolang/commit/da68a8ae\" rel=\"nofollow\">commit 1</a>, <a href=\"https://lab.nexedi.com/kirr/pygolang/commit/e847c550\" rel=\"nofollow\">2</a>, <a href=\"https://lab.nexedi.com/kirr/pygolang/commit/704d99f0\" rel=\"nofollow\">3</a>).</li>\n</ul>\n</div>\n<div id=\"dev7-2019-01-16\">\n<h3>0.0.0.dev7 (2019-01-16)</h3>\n<ul>\n<li>Provide <cite>gpython</cite> interpreter, that sets UTF-8 as default encoding, integrates\ngevent and puts <cite>go</cite>, <cite>chan</cite>, <cite>select</cite> etc into builtin namespace (<a href=\"https://lab.nexedi.com/kirr/pygolang/commit/32a21d5b\" rel=\"nofollow\">commit</a>).</li>\n</ul>\n</div>\n<div id=\"dev6-2018-12-13\">\n<h3>0.0.0.dev6 (2018-12-13)</h3>\n<ul>\n<li>Add <cite>strconv</cite> package with <cite>quote</cite> and <cite>unquote</cite> (<a href=\"https://lab.nexedi.com/kirr/pygolang/commit/f09701b0\" rel=\"nofollow\">commit 1</a>, <a href=\"https://lab.nexedi.com/kirr/pygolang/commit/ed6b7895\" rel=\"nofollow\">2</a>).</li>\n<li>Support <cite>PyPy</cite> as well (<a href=\"https://lab.nexedi.com/kirr/pygolang/commit/c859940b\" rel=\"nofollow\">commit</a>).</li>\n</ul>\n</div>\n<div id=\"dev5-2018-10-30\">\n<h3>0.0.0.dev5 (2018-10-30)</h3>\n<ul>\n<li>Fix <cite>select</cite> bug that was causing several cases to be potentially executed\nat the same time (<a href=\"https://lab.nexedi.com/kirr/pygolang/commit/f0b592b4\" rel=\"nofollow\">commit 1</a>, <a href=\"https://lab.nexedi.com/kirr/pygolang/commit/b51b8d5d\" rel=\"nofollow\">2</a>, <a href=\"https://lab.nexedi.com/kirr/pygolang/commit/2fc6797c\" rel=\"nofollow\">3</a>).</li>\n<li>Add <cite>defer</cite> and <cite>recover</cite> (<a href=\"https://lab.nexedi.com/kirr/pygolang/commit/5146eb0b\" rel=\"nofollow\">commit</a>).\nThe implementation is partly inspired by work of Denis Kolodin (<a href=\"https://habr.com/post/191786\" rel=\"nofollow\">1</a>, <a href=\"https://stackoverflow.com/a/43028386/9456786\" rel=\"nofollow\">2</a>).</li>\n<li>Fix <cite>@method</cite> on Python3 (<a href=\"https://lab.nexedi.com/kirr/pygolang/commit/ab69e0fa\" rel=\"nofollow\">commit</a>).</li>\n<li>A leaked goroutine no longer prevents whole program to exit (<a href=\"https://lab.nexedi.com/kirr/pygolang/commit/69cef96e\" rel=\"nofollow\">commit 1</a>, <a href=\"https://lab.nexedi.com/kirr/pygolang/commit/ec929991\" rel=\"nofollow\">2</a>).</li>\n</ul>\n</div>\n<div id=\"dev4-2018-07-04\">\n<h3>0.0.0.dev4 (2018-07-04)</h3>\n<ul>\n<li>Add <cite>py.bench</cite> program and <cite>golang.testing</cite> package with corresponding bits (<a href=\"https://lab.nexedi.com/kirr/pygolang/commit/9bf03d9c\" rel=\"nofollow\">commit</a>).</li>\n</ul>\n</div>\n<div id=\"dev3-2018-07-02\">\n<h3>0.0.0.dev3 (2018-07-02)</h3>\n<ul>\n<li>Support both Python2 and Python3; <cite>qq</cite> now does not escape printable UTF-8\ncharacters. (<a href=\"https://lab.nexedi.com/kirr/pygolang/commit/02dddb97\" rel=\"nofollow\">commit 1</a>, <a href=\"https://lab.nexedi.com/kirr/pygolang/commit/e01e5c2f\" rel=\"nofollow\">2</a>, <a href=\"https://lab.nexedi.com/kirr/pygolang/commit/622ccd82\" rel=\"nofollow\">3</a>).</li>\n<li><cite>golang/x/perf/benchlib:</cite> New module to load &amp; work with data in Go benchmark\nformat (<a href=\"https://lab.nexedi.com/kirr/pygolang/commit/812e7ed7\" rel=\"nofollow\">commit</a>).</li>\n</ul>\n</div>\n<div id=\"dev2-2018-06-20\">\n<h3>0.0.0.dev2 (2018-06-20)</h3>\n<ul>\n<li>Turn into full pygolang: <cite>go</cite>, <cite>chan</cite>, <cite>select</cite>, <cite>method</cite> and <cite>gcompat.qq</cite>\nare provided in addition to <cite>gimport</cite> (<a href=\"https://lab.nexedi.com/kirr/pygolang/commit/afa46cf5\" rel=\"nofollow\">commit</a>). The implementation is\nnot very fast, but should be working correctly including <cite>select</cite> - <cite>select</cite>\nsends for synchronous channels.</li>\n</ul>\n</div>\n<div id=\"dev1-2018-05-21\">\n<h3>0.0.0.dev1 (2018-05-21)</h3>\n<ul>\n<li>Initial release; <cite>gimport</cite> functionality only (<a href=\"https://lab.nexedi.com/kirr/pygolang/commit/9c61f254\" rel=\"nofollow\">commit</a>).</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 7032342, "releases": {"0.0.0.dev2": [{"comment_text": "", "digests": {"md5": "0afb17d21a5e1912dff24ea750f2c503", "sha256": "f39076c689e12de461f3590fdeff5ffcaaac76e32cd4955e1dfa6063a4d4e545"}, "downloads": -1, "filename": "pygolang-0.0.0.dev2.tar.gz", "has_sig": true, "md5_digest": "0afb17d21a5e1912dff24ea750f2c503", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9640, "upload_time": "2018-06-20T12:34:23", "upload_time_iso_8601": "2018-06-20T12:34:23.284282Z", "url": "https://files.pythonhosted.org/packages/47/9a/25631d52045d4ad4c38effb6d5cc002e47a72ff4f419cf12627708882562/pygolang-0.0.0.dev2.tar.gz", "yanked": false}], "0.0.0.dev3": [{"comment_text": "", "digests": {"md5": "11820aadbcc1f680d27b7788c5a4f000", "sha256": "559056e570d69b9052c5df69d3c7cda42b221088f4ea105a1a400d4e2c877116"}, "downloads": -1, "filename": "pygolang-0.0.0.dev3.tar.gz", "has_sig": true, "md5_digest": "11820aadbcc1f680d27b7788c5a4f000", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16449, "upload_time": "2018-07-02T16:53:16", "upload_time_iso_8601": "2018-07-02T16:53:16.713503Z", "url": "https://files.pythonhosted.org/packages/1a/e1/5fa37364be29432e7a8da9e889d6c5de4d00dc51326633384e95e0e90bfd/pygolang-0.0.0.dev3.tar.gz", "yanked": false}], "0.0.0.dev4": [{"comment_text": "", "digests": {"md5": "14e5c81e07f2ed1866712db029c7bb37", "sha256": "b9e0853525c76ec9ed5755e6f96b3edfa36cb3186aad3d4e7fe3b73af5739969"}, "downloads": -1, "filename": "pygolang-0.0.0.dev4.tar.gz", "has_sig": true, "md5_digest": "14e5c81e07f2ed1866712db029c7bb37", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20625, "upload_time": "2018-07-04T13:30:01", "upload_time_iso_8601": "2018-07-04T13:30:01.509187Z", "url": "https://files.pythonhosted.org/packages/59/a2/cb450972961b01feb071902932628e40767e4512b617f39f939fe2025eb0/pygolang-0.0.0.dev4.tar.gz", "yanked": false}], "0.0.0.dev5": [{"comment_text": "", "digests": {"md5": "766ced114dab1898f17930f2258b4d94", "sha256": "2493346e2c8e39195816220a4327a215cda3b19a1f32e06398737eff616258ce"}, "downloads": -1, "filename": "pygolang-0.0.0.dev5.tar.gz", "has_sig": true, "md5_digest": "766ced114dab1898f17930f2258b4d94", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24841, "upload_time": "2018-10-30T16:58:32", "upload_time_iso_8601": "2018-10-30T16:58:32.505244Z", "url": "https://files.pythonhosted.org/packages/a9/45/a87fc203e239d8cbb88d62b95c9cad620a78fb2797b0a5fc10abdd8f6829/pygolang-0.0.0.dev5.tar.gz", "yanked": false}], "0.0.0.dev6": [{"comment_text": "", "digests": {"md5": "561edf50628ad355b3b75ae50d7472f3", "sha256": "014b952191aa60399ab2fb1a8b6688a2352b1ea5df6a118d829f4f3f08439f05"}, "downloads": -1, "filename": "pygolang-0.0.0.dev6.tar.gz", "has_sig": true, "md5_digest": "561edf50628ad355b3b75ae50d7472f3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27383, "upload_time": "2018-12-13T12:51:26", "upload_time_iso_8601": "2018-12-13T12:51:26.177873Z", "url": "https://files.pythonhosted.org/packages/1e/18/9089989d24b8398b00daa4151952a4ae426b20bf3161e4aa9865a733c88c/pygolang-0.0.0.dev6.tar.gz", "yanked": false}], "0.0.0.dev7": [{"comment_text": "", "digests": {"md5": "d6eeeeb0405a7ffa3e92c0e77b2f79c3", "sha256": "7d84778131f6fa240c13d3b4165f2681eebe69b509853e0ca4437e8807bbb5eb"}, "downloads": -1, "filename": "pygolang-0.0.0.dev7.tar.gz", "has_sig": true, "md5_digest": "d6eeeeb0405a7ffa3e92c0e77b2f79c3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 45371, "upload_time": "2019-01-16T14:13:52", "upload_time_iso_8601": "2019-01-16T14:13:52.816728Z", "url": "https://files.pythonhosted.org/packages/9d/72/35dcf273aa5f6c76a14445fb8567b14a491dd73b49074ea4bc558600367a/pygolang-0.0.0.dev7.tar.gz", "yanked": false}], "0.0.0.dev8": [{"comment_text": "", "digests": {"md5": "f39828de90ea309213f30b745d487667", "sha256": "fbbfb8c41e44662345f97a36bae7a54938ab4c12c685f9c4c4e8d1a6a1864fa6"}, "downloads": -1, "filename": "pygolang-0.0.0.dev8.tar.gz", "has_sig": true, "md5_digest": "f39828de90ea309213f30b745d487667", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 47068, "upload_time": "2019-03-24T10:40:04", "upload_time_iso_8601": "2019-03-24T10:40:04.457243Z", "url": "https://files.pythonhosted.org/packages/4e/4b/4c935999e544f23f2e45f7e68892a8f7ca73e1c3de4935c80c8b0dc68a63/pygolang-0.0.0.dev8.tar.gz", "yanked": false}], "0.0.1": [{"comment_text": "", "digests": {"md5": "93820df1da38066d819855a14118c2db", "sha256": "228d9ac4a46a788652380309fd33cb034ddf6cebd8e0b9206cb6b6c44cc66594"}, "downloads": -1, "filename": "pygolang-0.0.1.tar.gz", "has_sig": true, "md5_digest": "93820df1da38066d819855a14118c2db", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 57158, "upload_time": "2019-05-09T20:14:13", "upload_time_iso_8601": "2019-05-09T20:14:13.717083Z", "url": "https://files.pythonhosted.org/packages/79/cf/162fc7b36b38a8f37cc2c4dcd6f93c7a2baa89978e2fcf6a33df1a824355/pygolang-0.0.1.tar.gz", "yanked": false}], "0.0.1.post1": [{"comment_text": "", "digests": {"md5": "b61271c3acf43c6d5385d377d8dd5b9d", "sha256": "a1ac826439d462518ac1e907158ef00a82af2f972940711337b45813dabf64d7"}, "downloads": -1, "filename": "pygolang-0.0.1.post1.tar.gz", "has_sig": true, "md5_digest": "b61271c3acf43c6d5385d377d8dd5b9d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 57063, "upload_time": "2019-05-10T04:28:20", "upload_time_iso_8601": "2019-05-10T04:28:20.457294Z", "url": "https://files.pythonhosted.org/packages/86/b7/94d818145b5e4bfb91b24743bd7af52384e5151896aa06c151263f2d0280/pygolang-0.0.1.post1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "14ab9abfc9b897710e57c3dfa63b8b6a", "sha256": "ea893da071c5447d555a78a301dca9ed2b1a6599f2635ac632b82c2ddb7c14a4"}, "downloads": -1, "filename": "pygolang-0.0.2.tar.gz", "has_sig": true, "md5_digest": "14ab9abfc9b897710e57c3dfa63b8b6a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 57004, "upload_time": "2019-05-16T17:33:16", "upload_time_iso_8601": "2019-05-16T17:33:16.620347Z", "url": "https://files.pythonhosted.org/packages/97/fa/44240c4f5619294a57bb215c7ac4c2a901d333c88c81179987800aa80106/pygolang-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "e6547d58c2a902534a436f930dd56120", "sha256": "2ee68b124023f27b205910c9ad0f5eaba1aa7055301b4b767a12a078d6b66834"}, "downloads": -1, "filename": "pygolang-0.0.3.tar.gz", "has_sig": true, "md5_digest": "e6547d58c2a902534a436f930dd56120", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 92366, "upload_time": "2019-08-29T12:37:11", "upload_time_iso_8601": "2019-08-29T12:37:11.757925Z", "url": "https://files.pythonhosted.org/packages/65/d8/2ed42763857d9f64b89f579e06ec2cf9fd972991958331861582c984e0ff/pygolang-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "d76db8ca78d88611919938bf42bcef1d", "sha256": "e59f254e5981da3d0b65ddd6c24512a76595160a81094e8f505b40e1d1d78f1e"}, "downloads": -1, "filename": "pygolang-0.0.4.tar.gz", "has_sig": true, "md5_digest": "d76db8ca78d88611919938bf42bcef1d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 103085, "upload_time": "2019-09-17T06:47:48", "upload_time_iso_8601": "2019-09-17T06:47:48.638149Z", "url": "https://files.pythonhosted.org/packages/ac/65/0f5d58daf312885e38d6a11b6ab8e7d104d2918a2d9c1a432dc46ff16a3c/pygolang-0.0.4.tar.gz", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "ad55c13d0d337030d6587e29f6c1be72", "sha256": "fb3b7fc116f186ca1423711786a050d699992a39aa88cea34dca57bf95ef8d48"}, "downloads": -1, "filename": "pygolang-0.0.5.tar.gz", "has_sig": true, "md5_digest": "ad55c13d0d337030d6587e29f6c1be72", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 151484, "upload_time": "2019-11-27T16:52:33", "upload_time_iso_8601": "2019-11-27T16:52:33.927570Z", "url": "https://files.pythonhosted.org/packages/5d/0e/cac474f50d6771337104ae72acc34af6f981978787bf4ab7913e1e2e072a/pygolang-0.0.5.tar.gz", "yanked": false}], "0.0.6": [{"comment_text": "", "digests": {"md5": "d768ee68423e1e87bc541355f96bb626", "sha256": "799867f3960328af9e6b6007ffd1637f8fc907fae6017ad3a059a91b701eaf4f"}, "downloads": -1, "filename": "pygolang-0.0.6.tar.gz", "has_sig": true, "md5_digest": "d768ee68423e1e87bc541355f96bb626", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 178314, "upload_time": "2020-02-28T17:28:53", "upload_time_iso_8601": "2020-02-28T17:28:53.714085Z", "url": "https://files.pythonhosted.org/packages/24/ed/1b39fea0ceca897a44b708a71d3902e4510b15630245fd4c62595dbc46db/pygolang-0.0.6.tar.gz", "yanked": false}], "0.0.6.post1": [{"comment_text": "", "digests": {"md5": "8eada8d4b453343184204053e4323652", "sha256": "b9419000e38f95066d266969dab375902c3cd90129b75d1c7b5d2c163ff02c37"}, "downloads": -1, "filename": "pygolang-0.0.6.post1.tar.gz", "has_sig": true, "md5_digest": "8eada8d4b453343184204053e4323652", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 177913, "upload_time": "2020-04-15T15:04:19", "upload_time_iso_8601": "2020-04-15T15:04:19.391891Z", "url": "https://files.pythonhosted.org/packages/80/0b/1d081ec181007c72b29e95a1dc0427799f2159c1c2a3858de42621db7be3/pygolang-0.0.6.post1.tar.gz", "yanked": false}], "0.0.6.post2": [{"comment_text": "", "digests": {"md5": "4885f9cc993207d828648abe0d1a88d1", "sha256": "7e8e10cb87edfaa37057439a029594ca4719b42555005ff0ea6c80f4148b8530"}, "downloads": -1, "filename": "pygolang-0.0.6.post2.tar.gz", "has_sig": true, "md5_digest": "4885f9cc993207d828648abe0d1a88d1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 178714, "upload_time": "2020-04-16T14:02:09", "upload_time_iso_8601": "2020-04-16T14:02:09.827042Z", "url": "https://files.pythonhosted.org/packages/38/42/0fbbc5cf21e18655895be423bff6463304c75bd3b996640019423145d428/pygolang-0.0.6.post2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4885f9cc993207d828648abe0d1a88d1", "sha256": "7e8e10cb87edfaa37057439a029594ca4719b42555005ff0ea6c80f4148b8530"}, "downloads": -1, "filename": "pygolang-0.0.6.post2.tar.gz", "has_sig": true, "md5_digest": "4885f9cc993207d828648abe0d1a88d1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 178714, "upload_time": "2020-04-16T14:02:09", "upload_time_iso_8601": "2020-04-16T14:02:09.827042Z", "url": "https://files.pythonhosted.org/packages/38/42/0fbbc5cf21e18655895be423bff6463304c75bd3b996640019423145d428/pygolang-0.0.6.post2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:04:47 2020"}