{"info": {"author": "Navya Zaveri", "author_email": "author@example.com", "bugtrack_url": null, "classifiers": ["Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "## JumpDB\n\nJumpDB is a simple key-value store that exploits Sorted String Tables.\n\nHere's a [tutorial](https://navyazaveri.github.io/algorithms/2020/01/12/write-a-kv-store-from-scratch.html)  which goes a little more in-depth into how it works.\n\n\n\n### Install  \n\n```\npip3 install jumpDB\n```\n\n\n\n### Usage \n\n```\nfrom jumpDB import DB\n\ndb = DB()\ndb[\"k1\"] = \"v1\"\ndb[\"k2\"] = \"v2\"\ndel db[\"k2\"]\nassert db[\"k1\"] == \"v1\"\nassert \"k2\" not in db\n```\n\n\n### API\n\n* `get(key)` => Finds the corresponding value to the given key \n\n* `set(key, value)` => Insert the entry into the db \n\n* `delete(key)` => Deletes the key from the db \n\n* `contains(key)` => Checks if the given key is present in the db \n\n\n\n### Design & Implementation \n\nThe design is essentially a simplified version of [levelDB](https://en.wikipedia.org/wiki/LevelDB). \n\nEvery write is initially inserted into an in-memory data structure (typically called \"memtable\")\n -- in this case,  a red-black tree. \n\nWhen the memtable's size exceeds a certain threshold, all entries are written out into a segment file. \nExploiting the properties of a red-black BST, we can ensure all entries will be efficiently written in sorted order.\nThe resulting file is immutable and called a sorted-string table (SST).\n\nWhilst performing the above write, we also maintain a sparse index table, keeping track of the \nfile offset of every in 1 in x entries. \n\nWhen a read comes in, we first look into the memtable for the corresponding k-v pair; if it doesn't exist, \nwe look at the *closest* entry (by key) in the sparse table. We *jump* to the file offset of that entry and then linearly scan forwards \n until we find the desired key-value pair. This is only possible because the SST is sorted by key.\n\n\nPeriodically, the segments are merged (also called \"compaction\"); this ensures a reduction \nin memory footprint as the resulting merged segments(s) would only hold the most recent entries. \n\nAn addition optimisation includes the use of bloom-filters to check if a key is not present in \nthe DB. This saves us from performing heavy disk reads for keys that haven't been inserted into the db. \n\n\n\n### Tests \nRun `pytest -v`\n\n\n### License \nBSD 2-Clause License\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/NavyaZaveri/jumpDB", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "jumpDB", "package_url": "https://pypi.org/project/jumpDB/", "platform": "", "project_url": "https://pypi.org/project/jumpDB/", "project_urls": {"Homepage": "https://github.com/NavyaZaveri/jumpDB"}, "release_url": "https://pypi.org/project/jumpDB/0.0.6/", "requires_dist": ["attrs (==19.3.0)", "Babel (==2.8.0)", "bitarray (==1.2.1)", "certifi (==2019.11.28)", "chardet (==3.0.4)", "docutils (==0.16)", "idna (==2.8)", "imagesize (==1.2.0)", "importlib-metadata (==1.4.0)", "Jinja2 (==2.10.3)", "MarkupSafe (==1.1.1)", "more-itertools (==8.1.0)", "packaging (==20.0)", "pluggy (==0.13.1)", "py (==1.8.1)", "pybloom-live (==3.0.0)", "Pygments (==2.5.2)", "pyparsing (==2.4.6)", "pytest (==5.3.3)", "pytz (==2019.3)", "recommonmark (==0.6.0)", "requests (==2.22.0)", "six (==1.14.0)", "snowballstemmer (==2.0.0)", "sortedcontainers (==2.1.0)", "urllib3 (==1.25.8)", "wcwidth (==0.1.8)", "zipp (==1.0.0)"], "requires_python": ">=3.6", "summary": "A simple kv store", "version": "0.0.6", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h2>JumpDB</h2>\n<p>JumpDB is a simple key-value store that exploits Sorted String Tables.</p>\n<p>Here's a <a href=\"https://navyazaveri.github.io/algorithms/2020/01/12/write-a-kv-store-from-scratch.html\" rel=\"nofollow\">tutorial</a>  which goes a little more in-depth into how it works.</p>\n<h3>Install</h3>\n<pre><code>pip3 install jumpDB\n</code></pre>\n<h3>Usage</h3>\n<pre><code>from jumpDB import DB\n\ndb = DB()\ndb[\"k1\"] = \"v1\"\ndb[\"k2\"] = \"v2\"\ndel db[\"k2\"]\nassert db[\"k1\"] == \"v1\"\nassert \"k2\" not in db\n</code></pre>\n<h3>API</h3>\n<ul>\n<li>\n<p><code>get(key)</code> =&gt; Finds the corresponding value to the given key</p>\n</li>\n<li>\n<p><code>set(key, value)</code> =&gt; Insert the entry into the db</p>\n</li>\n<li>\n<p><code>delete(key)</code> =&gt; Deletes the key from the db</p>\n</li>\n<li>\n<p><code>contains(key)</code> =&gt; Checks if the given key is present in the db</p>\n</li>\n</ul>\n<h3>Design &amp; Implementation</h3>\n<p>The design is essentially a simplified version of <a href=\"https://en.wikipedia.org/wiki/LevelDB\" rel=\"nofollow\">levelDB</a>.</p>\n<p>Every write is initially inserted into an in-memory data structure (typically called \"memtable\")\n-- in this case,  a red-black tree.</p>\n<p>When the memtable's size exceeds a certain threshold, all entries are written out into a segment file.\nExploiting the properties of a red-black BST, we can ensure all entries will be efficiently written in sorted order.\nThe resulting file is immutable and called a sorted-string table (SST).</p>\n<p>Whilst performing the above write, we also maintain a sparse index table, keeping track of the\nfile offset of every in 1 in x entries.</p>\n<p>When a read comes in, we first look into the memtable for the corresponding k-v pair; if it doesn't exist,\nwe look at the <em>closest</em> entry (by key) in the sparse table. We <em>jump</em> to the file offset of that entry and then linearly scan forwards\nuntil we find the desired key-value pair. This is only possible because the SST is sorted by key.</p>\n<p>Periodically, the segments are merged (also called \"compaction\"); this ensures a reduction\nin memory footprint as the resulting merged segments(s) would only hold the most recent entries.</p>\n<p>An addition optimisation includes the use of bloom-filters to check if a key is not present in\nthe DB. This saves us from performing heavy disk reads for keys that haven't been inserted into the db.</p>\n<h3>Tests</h3>\n<p>Run <code>pytest -v</code></p>\n<h3>License</h3>\n<p>BSD 2-Clause License</p>\n\n          </div>"}, "last_serial": 6565230, "releases": {"0.0.4": [{"comment_text": "", "digests": {"md5": "b644d82f3dfecd02840044897ad6ba6a", "sha256": "5f7f11695852515c40691d2fff4c172e8baacabc814886f6e5f3da54be21669c"}, "downloads": -1, "filename": "jumpDB-0.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "b644d82f3dfecd02840044897ad6ba6a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 11131, "upload_time": "2020-02-02T23:19:26", "upload_time_iso_8601": "2020-02-02T23:19:26.376200Z", "url": "https://files.pythonhosted.org/packages/9d/52/3cbc97ee89597bfc8a984bf37075a4b7d98ff5308ceb4808a393f98e4215/jumpDB-0.0.4-py3-none-any.whl", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "4ef8ee3cb93d5c6a73c156772e1ea78c", "sha256": "2895c9f5b22dc988d4227ce0560a58a9eb8bf20c149da6f13faef261db939b2d"}, "downloads": -1, "filename": "jumpDB-0.0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "4ef8ee3cb93d5c6a73c156772e1ea78c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 11129, "upload_time": "2020-02-03T15:53:12", "upload_time_iso_8601": "2020-02-03T15:53:12.934973Z", "url": "https://files.pythonhosted.org/packages/5f/c4/c444218095145a6040eb575f692935c7ad21b257646b2cf4a54491852b1c/jumpDB-0.0.5-py3-none-any.whl", "yanked": false}], "0.0.6": [{"comment_text": "", "digests": {"md5": "e5ffcb5cb30141a77b0f25f6617c3bb0", "sha256": "afdea4323c34f66360e94525f2aa7000dd284077cddb7557678d035ee61b78d1"}, "downloads": -1, "filename": "jumpDB-0.0.6-py3-none-any.whl", "has_sig": false, "md5_digest": "e5ffcb5cb30141a77b0f25f6617c3bb0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 11103, "upload_time": "2020-02-03T22:30:08", "upload_time_iso_8601": "2020-02-03T22:30:08.880013Z", "url": "https://files.pythonhosted.org/packages/a5/71/14d5c3e82eb2b4d448fc0795e9b2c90030f2bd0144b46cbf7f15a65a5a95/jumpDB-0.0.6-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e5ffcb5cb30141a77b0f25f6617c3bb0", "sha256": "afdea4323c34f66360e94525f2aa7000dd284077cddb7557678d035ee61b78d1"}, "downloads": -1, "filename": "jumpDB-0.0.6-py3-none-any.whl", "has_sig": false, "md5_digest": "e5ffcb5cb30141a77b0f25f6617c3bb0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 11103, "upload_time": "2020-02-03T22:30:08", "upload_time_iso_8601": "2020-02-03T22:30:08.880013Z", "url": "https://files.pythonhosted.org/packages/a5/71/14d5c3e82eb2b4d448fc0795e9b2c90030f2bd0144b46cbf7f15a65a5a95/jumpDB-0.0.6-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 00:51:23 2020"}