{"info": {"author": "miniufo", "author_email": "miniufo@163.com", "bugtrack_url": null, "classifiers": ["Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": "# xgrads\n\n![3D plot](https://raw.githubusercontent.com/miniufo/xgrads/master/pics/3D.png)\n\n\n## 1. Introduction\nThe Grid Analysis and Display System ([GrADS](http://cola.gmu.edu/grads/) or [OpenGrADS](http://www.opengrads.org/)) is a widely used software for easy access, manipulation, and visualization of earth science data.  It uses a [descriptor (or control) file with a suffix `.ctl`](http://cola.gmu.edu/grads/gadoc/descriptorfile.html) to  describe a raw binary 4D dataset.  The `ctl` file is similar to the header information of a [NetCDF](https://www.unidata.ucar.edu/software/netcdf/docs/file_structure_and_performance.html) file, containing all the information about dimensions, attributes, and variables except for the variable data.\n\nThis python package [`xgrads`](https://github.com/miniufo/xgrads) is designed for parse and read the `.ctl` file commonly used by [GrADS](http://cola.gmu.edu/grads/).  Right now it can parse various kinds of `.ctl` files.  However, only the commonly used raw binary 4D datasets can be read using [`dask`](https://dask.org/) and return as a [`xarray.Dataset`](http://xarray.pydata.org/en/stable/)  Other types of binary data, like `dtype` is `station` or`grib`, may be supported in the future.\n\n---\n## 2. How to install\n**Requirements**\n`xgrads` is developed under the environment with `xarray` (=version 0.15.0), `dask` (=version 2.11.0), and `numpy` (=version 1.15.4).  Older versions of these packages are not well tested.\n\n**Install via pip**\n```\npip install xgrads\n```\n\n**Install from github**\n```\ngit clone https://github.com/miniufo/xgrads.git\ncd xgrads\npython setup.py install\n```\n\n\n---\n## 3. Examples\n### 3.1 Parse a `.ctl` file\nParsing a `.ctl` file is pretty simple using the following code:\n```python\nfrom xgrads import CtlDescriptor\n\nctl = CtlDescriptor(file='test.ctl')\n\n# print all the info in ctl file\nprint(ctl)\n```\n\nIf you have already load the ASCII content in the `.ctl` file, you can do it as:\n```python\ncontent = \\\n    \"dset ^binary.dat\\n\" \\\n    \"* this is a comment line\\n\" \\\n    \"title 10-deg resolution model\\n\" \\\n    \"undef -9.99e8\\n\" \\\n    \"xdef 36 linear   0 10\\n\" \\\n    \"ydef 19 linear -90 10\\n\" \\\n    \"zdef  1 linear   0  1\\n\" \\\n    \"tdef  1 linear 00z01Jan2000 1dy\\n\" \\\n    \"vars  1\\n\" \\\n    \"test  1 99 test variable\\n\" \\\n    \"endvars\\n\"\n\nctl = CtlDescriptor(content=content)\n\n# print all the info\nprint(ctl)\n```\n---\n\n### 3.2 Read binary data into a `xarray.Dataset`\nReading a `.ctl` related binary data file is also pretty simple using the following code:\n```python\nfrom xgrads import open_CtlDataset\n\ndset = open_CtlDataset('test.ctl')\n\n# print all the info in ctl file\nprint(dset)\n```\n\nThen you have the `dset` as a `xarray.Dataset`.  This is similar to [`xarray.open_dataset`](http://xarray.pydata.org/en/stable/generated/xarray.open_dataset.html) that use [`dask`](https://dask.org/) to chunk (buffer) parts of the whole dataset in physical memory if the whole dataset is too large to fit in.\n\n---\n\n### 3.3 Convert a GrADS dataset to a NetCDF dataset\nWith the above functionality, it is easy to convert a `.ctl` ([GrADS](http://cola.gmu.edu/grads/)) dataset to a `.nc` ([NetCDF](https://www.unidata.ucar.edu/software/netcdf/docs/file_structure_and_performance.html)) dataset:\n```python\nfrom xgrads import open_CtlDataset\n\nopen_CtlDataset('input.ctl').to_netcdf('output.nc')\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/miniufo/xgrads", "keywords": "grads xarray dask", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "xgrads", "package_url": "https://pypi.org/project/xgrads/", "platform": "", "project_url": "https://pypi.org/project/xgrads/", "project_urls": {"Homepage": "https://github.com/miniufo/xgrads"}, "release_url": "https://pypi.org/project/xgrads/0.1.5/", "requires_dist": ["numpy", "xarray", "dask"], "requires_python": "", "summary": "Parse and read ctl file commonly used by GrADS.", "version": "0.1.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>xgrads</h1>\n<p><img alt=\"3D plot\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2e17e6003f2a55b3a4b2cdcc96c44659e78be84f/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f6d696e6975666f2f7867726164732f6d61737465722f706963732f33442e706e67\"></p>\n<h2>1. Introduction</h2>\n<p>The Grid Analysis and Display System (<a href=\"http://cola.gmu.edu/grads/\" rel=\"nofollow\">GrADS</a> or <a href=\"http://www.opengrads.org/\" rel=\"nofollow\">OpenGrADS</a>) is a widely used software for easy access, manipulation, and visualization of earth science data.  It uses a <a href=\"http://cola.gmu.edu/grads/gadoc/descriptorfile.html\" rel=\"nofollow\">descriptor (or control) file with a suffix <code>.ctl</code></a> to  describe a raw binary 4D dataset.  The <code>ctl</code> file is similar to the header information of a <a href=\"https://www.unidata.ucar.edu/software/netcdf/docs/file_structure_and_performance.html\" rel=\"nofollow\">NetCDF</a> file, containing all the information about dimensions, attributes, and variables except for the variable data.</p>\n<p>This python package <a href=\"https://github.com/miniufo/xgrads\" rel=\"nofollow\"><code>xgrads</code></a> is designed for parse and read the <code>.ctl</code> file commonly used by <a href=\"http://cola.gmu.edu/grads/\" rel=\"nofollow\">GrADS</a>.  Right now it can parse various kinds of <code>.ctl</code> files.  However, only the commonly used raw binary 4D datasets can be read using <a href=\"https://dask.org/\" rel=\"nofollow\"><code>dask</code></a> and return as a <a href=\"http://xarray.pydata.org/en/stable/\" rel=\"nofollow\"><code>xarray.Dataset</code></a>  Other types of binary data, like <code>dtype</code> is <code>station</code> or<code>grib</code>, may be supported in the future.</p>\n<hr>\n<h2>2. How to install</h2>\n<p><strong>Requirements</strong>\n<code>xgrads</code> is developed under the environment with <code>xarray</code> (=version 0.15.0), <code>dask</code> (=version 2.11.0), and <code>numpy</code> (=version 1.15.4).  Older versions of these packages are not well tested.</p>\n<p><strong>Install via pip</strong></p>\n<pre><code>pip install xgrads\n</code></pre>\n<p><strong>Install from github</strong></p>\n<pre><code>git clone https://github.com/miniufo/xgrads.git\ncd xgrads\npython setup.py install\n</code></pre>\n<hr>\n<h2>3. Examples</h2>\n<h3>3.1 Parse a <code>.ctl</code> file</h3>\n<p>Parsing a <code>.ctl</code> file is pretty simple using the following code:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">xgrads</span> <span class=\"kn\">import</span> <span class=\"n\">CtlDescriptor</span>\n\n<span class=\"n\">ctl</span> <span class=\"o\">=</span> <span class=\"n\">CtlDescriptor</span><span class=\"p\">(</span><span class=\"n\">file</span><span class=\"o\">=</span><span class=\"s1\">'test.ctl'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># print all the info in ctl file</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">ctl</span><span class=\"p\">)</span>\n</pre>\n<p>If you have already load the ASCII content in the <code>.ctl</code> file, you can do it as:</p>\n<pre><span class=\"n\">content</span> <span class=\"o\">=</span> \\\n    <span class=\"s2\">\"dset ^binary.dat</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span> \\\n    <span class=\"s2\">\"* this is a comment line</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span> \\\n    <span class=\"s2\">\"title 10-deg resolution model</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span> \\\n    <span class=\"s2\">\"undef -9.99e8</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span> \\\n    <span class=\"s2\">\"xdef 36 linear   0 10</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span> \\\n    <span class=\"s2\">\"ydef 19 linear -90 10</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span> \\\n    <span class=\"s2\">\"zdef  1 linear   0  1</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span> \\\n    <span class=\"s2\">\"tdef  1 linear 00z01Jan2000 1dy</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span> \\\n    <span class=\"s2\">\"vars  1</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span> \\\n    <span class=\"s2\">\"test  1 99 test variable</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span> \\\n    <span class=\"s2\">\"endvars</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span>\n\n<span class=\"n\">ctl</span> <span class=\"o\">=</span> <span class=\"n\">CtlDescriptor</span><span class=\"p\">(</span><span class=\"n\">content</span><span class=\"o\">=</span><span class=\"n\">content</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># print all the info</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">ctl</span><span class=\"p\">)</span>\n</pre>\n<hr>\n<h3>3.2 Read binary data into a <code>xarray.Dataset</code></h3>\n<p>Reading a <code>.ctl</code> related binary data file is also pretty simple using the following code:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">xgrads</span> <span class=\"kn\">import</span> <span class=\"n\">open_CtlDataset</span>\n\n<span class=\"n\">dset</span> <span class=\"o\">=</span> <span class=\"n\">open_CtlDataset</span><span class=\"p\">(</span><span class=\"s1\">'test.ctl'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># print all the info in ctl file</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">dset</span><span class=\"p\">)</span>\n</pre>\n<p>Then you have the <code>dset</code> as a <code>xarray.Dataset</code>.  This is similar to <a href=\"http://xarray.pydata.org/en/stable/generated/xarray.open_dataset.html\" rel=\"nofollow\"><code>xarray.open_dataset</code></a> that use <a href=\"https://dask.org/\" rel=\"nofollow\"><code>dask</code></a> to chunk (buffer) parts of the whole dataset in physical memory if the whole dataset is too large to fit in.</p>\n<hr>\n<h3>3.3 Convert a GrADS dataset to a NetCDF dataset</h3>\n<p>With the above functionality, it is easy to convert a <code>.ctl</code> (<a href=\"http://cola.gmu.edu/grads/\" rel=\"nofollow\">GrADS</a>) dataset to a <code>.nc</code> (<a href=\"https://www.unidata.ucar.edu/software/netcdf/docs/file_structure_and_performance.html\" rel=\"nofollow\">NetCDF</a>) dataset:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">xgrads</span> <span class=\"kn\">import</span> <span class=\"n\">open_CtlDataset</span>\n\n<span class=\"n\">open_CtlDataset</span><span class=\"p\">(</span><span class=\"s1\">'input.ctl'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">to_netcdf</span><span class=\"p\">(</span><span class=\"s1\">'output.nc'</span><span class=\"p\">)</span>\n</pre>\n\n          </div>"}, "last_serial": 7157888, "releases": {"0.1.5": [{"comment_text": "", "digests": {"md5": "fbd6d322e86b600c02ede554f22d6db6", "sha256": "6ced324cf45a68885399f103506fbc30ec67218226b4198ea900f41bfdddaaf6"}, "downloads": -1, "filename": "xgrads-0.1.5-py3-none-any.whl", "has_sig": false, "md5_digest": "fbd6d322e86b600c02ede554f22d6db6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 13487, "upload_time": "2020-05-03T16:27:15", "upload_time_iso_8601": "2020-05-03T16:27:15.588376Z", "url": "https://files.pythonhosted.org/packages/88/7e/c9a810a75e2baf4a448d3c4ceb8054eaf8bf69ffa6a643a90f2672991fb4/xgrads-0.1.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5c94aba25c13bdb8458d378a17c3c293", "sha256": "498c6b0765852a9cb9f36119aefe4e76f8295cee72af91f5363c8482aa47d134"}, "downloads": -1, "filename": "xgrads-0.1.5.tar.gz", "has_sig": false, "md5_digest": "5c94aba25c13bdb8458d378a17c3c293", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13359, "upload_time": "2020-05-03T16:27:17", "upload_time_iso_8601": "2020-05-03T16:27:17.349952Z", "url": "https://files.pythonhosted.org/packages/c0/f7/fd195ac9854ebe180ba38d7136dca8f520603d87d00ea0cb115db8136091/xgrads-0.1.5.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "fbd6d322e86b600c02ede554f22d6db6", "sha256": "6ced324cf45a68885399f103506fbc30ec67218226b4198ea900f41bfdddaaf6"}, "downloads": -1, "filename": "xgrads-0.1.5-py3-none-any.whl", "has_sig": false, "md5_digest": "fbd6d322e86b600c02ede554f22d6db6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 13487, "upload_time": "2020-05-03T16:27:15", "upload_time_iso_8601": "2020-05-03T16:27:15.588376Z", "url": "https://files.pythonhosted.org/packages/88/7e/c9a810a75e2baf4a448d3c4ceb8054eaf8bf69ffa6a643a90f2672991fb4/xgrads-0.1.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5c94aba25c13bdb8458d378a17c3c293", "sha256": "498c6b0765852a9cb9f36119aefe4e76f8295cee72af91f5363c8482aa47d134"}, "downloads": -1, "filename": "xgrads-0.1.5.tar.gz", "has_sig": false, "md5_digest": "5c94aba25c13bdb8458d378a17c3c293", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13359, "upload_time": "2020-05-03T16:27:17", "upload_time_iso_8601": "2020-05-03T16:27:17.349952Z", "url": "https://files.pythonhosted.org/packages/c0/f7/fd195ac9854ebe180ba38d7136dca8f520603d87d00ea0cb115db8136091/xgrads-0.1.5.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:25:34 2020"}