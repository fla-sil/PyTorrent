{"info": {"author": "Kenneth Knowles", "author_email": "kenn.knowles@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.2", "Programming Language :: Python :: 3.3"], "description": "Python JSONPath RW\n==================\n\nhttps://github.com/kennknowles/python-jsonpath-rw\n\n|Build Status| |Test coverage| |PyPi version| |PyPi downloads|\n\nThis library provides a robust and significantly extended implementation\nof JSONPath for Python. It is tested with Python 2.6, 2.7, 3.2, 3.3. \n*(On travis-ci there is a segfault when running the tests with pypy; I don't think the problem lies with this library)*.\n\nThis library differs from other JSONPath implementations in that it is a\nfull *language* implementation, meaning the JSONPath expressions are\nfirst class objects, easy to analyze, transform, parse, print, and\nextend. (You can also execute them :-)\n\nQuick Start\n-----------\n\nTo install, use pip:\n\n::\n\n    $ pip install jsonpath-rw\n\nThen:\n\n.. code:: python\n\n    $ python\n\n    >>> from jsonpath_rw import jsonpath, parse\n\n    # A robust parser, not just a regex. (Makes powerful extensions possible; see below)\n    >>> jsonpath_expr = parse('foo[*].baz')\n\n    # Extracting values is easy\n    >>> [match.value for match in jsonpath_expr.find({'foo': [{'baz': 1}, {'baz': 2}]})]\n    [1, 2]\n\n    # Matches remember where they came from\n    >>> [str(match.full_path) for match in jsonpath_expr.find({'foo': [{'baz': 1}, {'baz': 2}]})]\n    ['foo.[0].baz', 'foo.[1].baz']\n\n    # And this can be useful for automatically providing ids for bits of data that do not have them (currently a global switch)\n    >>> jsonpath.auto_id_field = 'id'\n    >>> [match.value for match in parse('foo[*].id').find({'foo': [{'id': 'bizzle'}, {'baz': 3}]})]\n    ['foo.bizzle', 'foo.[1]']\n\n    # A handy extension: named operators like `parent`\n    >>> [match.value for match in parse('a.*.b.`parent`.c').find({'a': {'x': {'b': 1, 'c': 'number one'}, 'y': {'b': 2, 'c': 'number two'}}})]\n    ['number two', 'number one']\n\n    # You can also build expressions directly quite easily \n    >>> from jsonpath_rw.jsonpath import Fields\n    >>> from jsonpath_rw.jsonpath import Slice\n\n    >>> jsonpath_expr_direct = Fields('foo').child(Slice('*')).child(Fields('baz'))  # This is equivalent\n\nJSONPath Syntax\n---------------\n\nThe JSONPath syntax supported by this library includes some additional\nfeatures and omits some problematic features (those that make it\nunportable). In particular, some new operators such as ``|`` and\n``where`` are available, and parentheses are used for grouping not for\ncallbacks into Python, since with these changes the language is not\ntrivially associative. Also, fields may be quoted whether or not they\nare contained in brackets.\n\nAtomic expressions:\n\n+-----------------------+---------------------------------------------------------------------------------------------+\n| Syntax                | Meaning                                                                                     |\n+=======================+=============================================================================================+\n| ``$``                 | The root object                                                                             |\n+-----------------------+---------------------------------------------------------------------------------------------+\n| ```this```            | The \"current\" object.                                                                       |\n+-----------------------+---------------------------------------------------------------------------------------------+\n| ```foo```             | More generally, this syntax allows \"named operators\" to extend JSONPath is arbitrary ways   |\n+-----------------------+---------------------------------------------------------------------------------------------+\n| *field*               | Specified field(s), described below                                                         |\n+-----------------------+---------------------------------------------------------------------------------------------+\n| ``[`` *field* ``]``   | Same as *field*                                                                             |\n+-----------------------+---------------------------------------------------------------------------------------------+\n| ``[`` *idx* ``]``     | Array access, described below (this is always unambiguous with field access)                |\n+-----------------------+---------------------------------------------------------------------------------------------+\n\nJsonpath operators:\n\n+-------------------------------------+------------------------------------------------------------------------------------+\n| Syntax                              | Meaning                                                                            |\n+=====================================+====================================================================================+\n| *jsonpath1* ``.`` *jsonpath2*       | All nodes matched by *jsonpath2* starting at any node matching *jsonpath1*         |\n+-------------------------------------+------------------------------------------------------------------------------------+\n| *jsonpath* ``[`` *whatever* ``]``   | Same as *jsonpath*\\ ``.``\\ *whatever*                                              |\n+-------------------------------------+------------------------------------------------------------------------------------+\n| *jsonpath1* ``..`` *jsonpath2*      | All nodes matched by *jsonpath2* that descend from any node matching *jsonpath1*   |\n+-------------------------------------+------------------------------------------------------------------------------------+\n| *jsonpath1* ``where`` *jsonpath2*   | Any nodes matching *jsonpath1* with a child matching *jsonpath2*                   |\n+-------------------------------------+------------------------------------------------------------------------------------+\n| *jsonpath1* ``|`` *jsonpath2*       | Any nodes matching the union of *jsonpath1* and *jsonpath2*                        |\n+-------------------------------------+------------------------------------------------------------------------------------+\n\nField specifiers ( *field* ):\n\n+-------------------------+-------------------------------------------------------------------------------------+\n| Syntax                  | Meaning                                                                             |\n+=========================+=====================================================================================+\n| ``fieldname``           | the field ``fieldname`` (from the \"current\" object)                                 |\n+-------------------------+-------------------------------------------------------------------------------------+\n| ``\"fieldname\"``         | same as above, for allowing special characters in the fieldname                     |\n+-------------------------+-------------------------------------------------------------------------------------+\n| ``'fieldname'``         | ditto                                                                               |\n+-------------------------+-------------------------------------------------------------------------------------+\n| ``*``                   | any field                                                                           |\n+-------------------------+-------------------------------------------------------------------------------------+\n| *field* ``,`` *field*   | either of the named fields (you can always build equivalent jsonpath using ``|``)   |\n+-------------------------+-------------------------------------------------------------------------------------+\n\nArray specifiers ( *idx* ):\n\n+-----------------------------------------+---------------------------------------------------------------------------------------+\n| Syntax                                  | Meaning                                                                               |\n+=========================================+=======================================================================================+\n| ``[``\\ *n*\\ ``]``                       | array index (may be comma-separated list)                                             |\n+-----------------------------------------+---------------------------------------------------------------------------------------+\n| ``[``\\ *start*\\ ``?:``\\ *end*\\ ``?]``   | array slicing (note that *step* is unimplemented only due to lack of need thus far)   |\n+-----------------------------------------+---------------------------------------------------------------------------------------+\n| ``[*]``                                 | any array index                                                                       |\n+-----------------------------------------+---------------------------------------------------------------------------------------+\n\nProgrammatic JSONPath\n---------------------\n\nIf you are programming in Python and would like a more robust way to\ncreate JSONPath expressions that does not depend on a parser, it is very\neasy to do so directly, and here are some examples:\n\n-  ``Root()``\n-  ``Slice(start=0, end=None, step=None)``\n-  ``Fields('foo', 'bar')``\n-  ``Index(42)``\n-  ``Child(Fields('foo'), Index(42))``\n-  ``Where(Slice(), Fields('subfield'))``\n-  ``Descendants(jsonpath, jsonpath)``\n\nExtensions\n----------\n\n-  *Path data*: The result of ``JsonPath.find`` provide detailed context\n   and path data so it is easy to traverse to parent objects, print full\n   paths to pieces of data, and generate automatic ids.\n-  *Automatic Ids*: If you set ``jsonpath_rw.auto_id_field`` to a value\n   other than None, then for any piece of data missing that field, it\n   will be replaced by the JSONPath to it, giving automatic unique ids\n   to any piece of data. These ids will take into account any ids\n   already present as well.\n-  *Named operators*: Instead of using ``@`` to reference the currently\n   object, this library uses ```this```. In general, any string\n   contained in backquotes can be made to be a new operator, currently\n   by extending the library.\n\nMore to explore\n---------------\n\nThere are way too many jsonpath implementations out there to discuss.\nSome are robust, some are toy projects that still work fine, some are\nexercises. There will undoubtedly be many more. This one is made for use\nin released, maintained code, and in particular for programmatic access\nto the abstract syntax and extension. But JSONPath at its simplest just\nisn't that complicated, so you can probably use any of them\nsuccessfully. Why not this one?\n\nThe original proposal, as far as I know:\n\n-  `JSONPath - XPath for\n   JSON <http://goessner.net/articles/JSONPath/>`__ by Stefan Goessner.\n\nSpecial note about PLY and docstrings\n-------------------------------------\n\nThe main parsing toolkit underlying this library,\n`PLY <https://github.com/dabeaz/ply>`__, does not work with docstrings\nremoved. For example, ``PYTHONOPTIMIZE=2`` and ``python -OO`` will both\ncause a failure.\n\nContributors\n------------\n\nThis package is authored and maintained by:\n\n-  `Kenn Knowles <https://github.com/kennknowles>`__\n   (`@kennknowles <https://twitter.com/KennKnowles>`__)\n   \nwith the help of patches submitted by `these contributors <https://github.com/kennknowles/python-jsonpath-rw/graphs/contributors>`__.\n\nCopyright and License\n---------------------\n\nCopyright 2013- Kenneth Knowles\n\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may\nnot use this file except in compliance with the License. You may obtain\na copy of the License at\n\n::\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\n.. |Build Status| image:: https://travis-ci.org/kennknowles/python-jsonpath-rw.png?branch=master\n   :target: https://travis-ci.org/kennknowles/python-jsonpath-rw\n.. |Test coverage| image:: https://coveralls.io/repos/kennknowles/python-jsonpath-rw/badge.png?branch=master\n   :target: https://coveralls.io/r/kennknowles/python-jsonpath-rw\n.. |PyPi version| image:: https://pypip.in/v/jsonpath-rw/badge.png\n   :target: https://pypi.python.org/pypi/jsonpath-rw\n.. |PyPi downloads| image:: https://pypip.in/d/jsonpath-rw/badge.png\n   :target: https://pypi.python.org/pypi/jsonpath-rw", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/kennknowles/python-jsonpath-rw", "keywords": null, "license": "Apache 2.0", "maintainer": null, "maintainer_email": null, "name": "jsonpath-rw", "package_url": "https://pypi.org/project/jsonpath-rw/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/jsonpath-rw/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/kennknowles/python-jsonpath-rw"}, "release_url": "https://pypi.org/project/jsonpath-rw/1.4.0/", "requires_dist": null, "requires_python": null, "summary": "A robust and significantly extended implementation of JSONPath for Python, with a clear AST for metaprogramming.", "version": "1.4.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://github.com/kennknowles/python-jsonpath-rw\" rel=\"nofollow\">https://github.com/kennknowles/python-jsonpath-rw</a></p>\n<p><a href=\"https://travis-ci.org/kennknowles/python-jsonpath-rw\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4a39c72482280f09c7b6e4ae284111c29a2bf6fd/68747470733a2f2f7472617669732d63692e6f72672f6b656e6e6b6e6f776c65732f707974686f6e2d6a736f6e706174682d72772e706e673f6272616e63683d6d6173746572\"></a> <a href=\"https://coveralls.io/r/kennknowles/python-jsonpath-rw\" rel=\"nofollow\"><img alt=\"Test coverage\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/73ca0aa4b56d501243fc4048518760ed20cdbc6a/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6b656e6e6b6e6f776c65732f707974686f6e2d6a736f6e706174682d72772f62616467652e706e673f6272616e63683d6d6173746572\"></a> <a href=\"https://pypi.python.org/pypi/jsonpath-rw\" rel=\"nofollow\"><img alt=\"PyPi version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1074be06bf3a7c92d0c121666fba9baaceb41258/68747470733a2f2f70797069702e696e2f762f6a736f6e706174682d72772f62616467652e706e67\"></a> <a href=\"https://pypi.python.org/pypi/jsonpath-rw\" rel=\"nofollow\"><img alt=\"PyPi downloads\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/dd0d56991e4347b2c2c5e233ab910e1e332e181d/68747470733a2f2f70797069702e696e2f642f6a736f6e706174682d72772f62616467652e706e67\"></a></p>\n<p>This library provides a robust and significantly extended implementation\nof JSONPath for Python. It is tested with Python 2.6, 2.7, 3.2, 3.3.\n<em>(On travis-ci there is a segfault when running the tests with pypy; I don\u2019t think the problem lies with this library)</em>.</p>\n<p>This library differs from other JSONPath implementations in that it is a\nfull <em>language</em> implementation, meaning the JSONPath expressions are\nfirst class objects, easy to analyze, transform, parse, print, and\nextend. (You can also execute them :-)</p>\n<div id=\"quick-start\">\n<h2>Quick Start</h2>\n<p>To install, use pip:</p>\n<pre>$ pip install jsonpath-rw\n</pre>\n<p>Then:</p>\n<pre><span class=\"err\">$</span> <span class=\"n\">python</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">jsonpath_rw</span> <span class=\"kn\">import</span> <span class=\"n\">jsonpath</span><span class=\"p\">,</span> <span class=\"n\">parse</span>\n\n<span class=\"c1\"># A robust parser, not just a regex. (Makes powerful extensions possible; see below)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">jsonpath_expr</span> <span class=\"o\">=</span> <span class=\"n\">parse</span><span class=\"p\">(</span><span class=\"s1\">'foo[*].baz'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Extracting values is easy</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"p\">[</span><span class=\"n\">match</span><span class=\"o\">.</span><span class=\"n\">value</span> <span class=\"k\">for</span> <span class=\"n\">match</span> <span class=\"ow\">in</span> <span class=\"n\">jsonpath_expr</span><span class=\"o\">.</span><span class=\"n\">find</span><span class=\"p\">({</span><span class=\"s1\">'foo'</span><span class=\"p\">:</span> <span class=\"p\">[{</span><span class=\"s1\">'baz'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"s1\">'baz'</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">}]})]</span>\n<span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span>\n\n<span class=\"c1\"># Matches remember where they came from</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">match</span><span class=\"o\">.</span><span class=\"n\">full_path</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">match</span> <span class=\"ow\">in</span> <span class=\"n\">jsonpath_expr</span><span class=\"o\">.</span><span class=\"n\">find</span><span class=\"p\">({</span><span class=\"s1\">'foo'</span><span class=\"p\">:</span> <span class=\"p\">[{</span><span class=\"s1\">'baz'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"s1\">'baz'</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">}]})]</span>\n<span class=\"p\">[</span><span class=\"s1\">'foo.[0].baz'</span><span class=\"p\">,</span> <span class=\"s1\">'foo.[1].baz'</span><span class=\"p\">]</span>\n\n<span class=\"c1\"># And this can be useful for automatically providing ids for bits of data that do not have them (currently a global switch)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">jsonpath</span><span class=\"o\">.</span><span class=\"n\">auto_id_field</span> <span class=\"o\">=</span> <span class=\"s1\">'id'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"p\">[</span><span class=\"n\">match</span><span class=\"o\">.</span><span class=\"n\">value</span> <span class=\"k\">for</span> <span class=\"n\">match</span> <span class=\"ow\">in</span> <span class=\"n\">parse</span><span class=\"p\">(</span><span class=\"s1\">'foo[*].id'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">find</span><span class=\"p\">({</span><span class=\"s1\">'foo'</span><span class=\"p\">:</span> <span class=\"p\">[{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"s1\">'bizzle'</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"s1\">'baz'</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">}]})]</span>\n<span class=\"p\">[</span><span class=\"s1\">'foo.bizzle'</span><span class=\"p\">,</span> <span class=\"s1\">'foo.[1]'</span><span class=\"p\">]</span>\n\n<span class=\"c1\"># A handy extension: named operators like `parent`</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"p\">[</span><span class=\"n\">match</span><span class=\"o\">.</span><span class=\"n\">value</span> <span class=\"k\">for</span> <span class=\"n\">match</span> <span class=\"ow\">in</span> <span class=\"n\">parse</span><span class=\"p\">(</span><span class=\"s1\">'a.*.b.`parent`.c'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">find</span><span class=\"p\">({</span><span class=\"s1\">'a'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'x'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'b'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'c'</span><span class=\"p\">:</span> <span class=\"s1\">'number one'</span><span class=\"p\">},</span> <span class=\"s1\">'y'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'b'</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s1\">'c'</span><span class=\"p\">:</span> <span class=\"s1\">'number two'</span><span class=\"p\">}}})]</span>\n<span class=\"p\">[</span><span class=\"s1\">'number two'</span><span class=\"p\">,</span> <span class=\"s1\">'number one'</span><span class=\"p\">]</span>\n\n<span class=\"c1\"># You can also build expressions directly quite easily</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">jsonpath_rw.jsonpath</span> <span class=\"kn\">import</span> <span class=\"n\">Fields</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">jsonpath_rw.jsonpath</span> <span class=\"kn\">import</span> <span class=\"n\">Slice</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">jsonpath_expr_direct</span> <span class=\"o\">=</span> <span class=\"n\">Fields</span><span class=\"p\">(</span><span class=\"s1\">'foo'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">child</span><span class=\"p\">(</span><span class=\"n\">Slice</span><span class=\"p\">(</span><span class=\"s1\">'*'</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">child</span><span class=\"p\">(</span><span class=\"n\">Fields</span><span class=\"p\">(</span><span class=\"s1\">'baz'</span><span class=\"p\">))</span>  <span class=\"c1\"># This is equivalent</span>\n</pre>\n</div>\n<div id=\"jsonpath-syntax\">\n<h2>JSONPath Syntax</h2>\n<p>The JSONPath syntax supported by this library includes some additional\nfeatures and omits some problematic features (those that make it\nunportable). In particular, some new operators such as <tt>|</tt> and\n<tt>where</tt> are available, and parentheses are used for grouping not for\ncallbacks into Python, since with these changes the language is not\ntrivially associative. Also, fields may be quoted whether or not they\nare contained in brackets.</p>\n<p>Atomic expressions:</p>\n<table>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Syntax</th>\n<th>Meaning</th>\n</tr>\n</thead>\n<tbody>\n<tr><td><tt>$</tt></td>\n<td>The root object</td>\n</tr>\n<tr><td><tt>`this`</tt></td>\n<td>The \u201ccurrent\u201d object.</td>\n</tr>\n<tr><td><tt>`foo`</tt></td>\n<td>More generally, this syntax allows \u201cnamed operators\u201d to extend JSONPath is arbitrary ways</td>\n</tr>\n<tr><td><em>field</em></td>\n<td>Specified field(s), described below</td>\n</tr>\n<tr><td><tt>[</tt> <em>field</em> <tt>]</tt></td>\n<td>Same as <em>field</em></td>\n</tr>\n<tr><td><tt>[</tt> <em>idx</em> <tt>]</tt></td>\n<td>Array access, described below (this is always unambiguous with field access)</td>\n</tr>\n</tbody>\n</table>\n<p>Jsonpath operators:</p>\n<table>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Syntax</th>\n<th>Meaning</th>\n</tr>\n</thead>\n<tbody>\n<tr><td><em>jsonpath1</em> <tt>.</tt> <em>jsonpath2</em></td>\n<td>All nodes matched by <em>jsonpath2</em> starting at any node matching <em>jsonpath1</em></td>\n</tr>\n<tr><td><em>jsonpath</em> <tt>[</tt> <em>whatever</em> <tt>]</tt></td>\n<td>Same as <em>jsonpath</em><tt>.</tt><em>whatever</em></td>\n</tr>\n<tr><td><em>jsonpath1</em> <tt>..</tt> <em>jsonpath2</em></td>\n<td>All nodes matched by <em>jsonpath2</em> that descend from any node matching <em>jsonpath1</em></td>\n</tr>\n<tr><td><em>jsonpath1</em> <tt>where</tt> <em>jsonpath2</em></td>\n<td>Any nodes matching <em>jsonpath1</em> with a child matching <em>jsonpath2</em></td>\n</tr>\n<tr><td><em>jsonpath1</em> <tt>|</tt> <em>jsonpath2</em></td>\n<td>Any nodes matching the union of <em>jsonpath1</em> and <em>jsonpath2</em></td>\n</tr>\n</tbody>\n</table>\n<p>Field specifiers ( <em>field</em> ):</p>\n<table>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Syntax</th>\n<th>Meaning</th>\n</tr>\n</thead>\n<tbody>\n<tr><td><tt>fieldname</tt></td>\n<td>the field <tt>fieldname</tt> (from the \u201ccurrent\u201d object)</td>\n</tr>\n<tr><td><tt>\"fieldname\"</tt></td>\n<td>same as above, for allowing special characters in the fieldname</td>\n</tr>\n<tr><td><tt>'fieldname'</tt></td>\n<td>ditto</td>\n</tr>\n<tr><td><tt>*</tt></td>\n<td>any field</td>\n</tr>\n<tr><td><em>field</em> <tt>,</tt> <em>field</em></td>\n<td>either of the named fields (you can always build equivalent jsonpath using <tt>|</tt>)</td>\n</tr>\n</tbody>\n</table>\n<p>Array specifiers ( <em>idx</em> ):</p>\n<table>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Syntax</th>\n<th>Meaning</th>\n</tr>\n</thead>\n<tbody>\n<tr><td><tt>[</tt><em>n</em><tt>]</tt></td>\n<td>array index (may be comma-separated list)</td>\n</tr>\n<tr><td><tt>[</tt><em>start</em><tt><span class=\"pre\">?:</span></tt><em>end</em><tt><span class=\"pre\">?]</span></tt></td>\n<td>array slicing (note that <em>step</em> is unimplemented only due to lack of need thus far)</td>\n</tr>\n<tr><td><tt>[*]</tt></td>\n<td>any array index</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div id=\"programmatic-jsonpath\">\n<h2>Programmatic JSONPath</h2>\n<p>If you are programming in Python and would like a more robust way to\ncreate JSONPath expressions that does not depend on a parser, it is very\neasy to do so directly, and here are some examples:</p>\n<ul>\n<li><tt>Root()</tt></li>\n<li><tt>Slice(start=0, end=None, step=None)</tt></li>\n<li><tt><span class=\"pre\">Fields('foo',</span> 'bar')</tt></li>\n<li><tt>Index(42)</tt></li>\n<li><tt><span class=\"pre\">Child(Fields('foo'),</span> Index(42))</tt></li>\n<li><tt><span class=\"pre\">Where(Slice(),</span> <span class=\"pre\">Fields('subfield'))</span></tt></li>\n<li><tt>Descendants(jsonpath, jsonpath)</tt></li>\n</ul>\n</div>\n<div id=\"extensions\">\n<h2>Extensions</h2>\n<ul>\n<li><em>Path data</em>: The result of <tt>JsonPath.find</tt> provide detailed context\nand path data so it is easy to traverse to parent objects, print full\npaths to pieces of data, and generate automatic ids.</li>\n<li><em>Automatic Ids</em>: If you set <tt>jsonpath_rw.auto_id_field</tt> to a value\nother than None, then for any piece of data missing that field, it\nwill be replaced by the JSONPath to it, giving automatic unique ids\nto any piece of data. These ids will take into account any ids\nalready present as well.</li>\n<li><em>Named operators</em>: Instead of using <tt>@</tt> to reference the currently\nobject, this library uses <tt>`this`</tt>. In general, any string\ncontained in backquotes can be made to be a new operator, currently\nby extending the library.</li>\n</ul>\n</div>\n<div id=\"more-to-explore\">\n<h2>More to explore</h2>\n<p>There are way too many jsonpath implementations out there to discuss.\nSome are robust, some are toy projects that still work fine, some are\nexercises. There will undoubtedly be many more. This one is made for use\nin released, maintained code, and in particular for programmatic access\nto the abstract syntax and extension. But JSONPath at its simplest just\nisn\u2019t that complicated, so you can probably use any of them\nsuccessfully. Why not this one?</p>\n<p>The original proposal, as far as I know:</p>\n<ul>\n<li><a href=\"http://goessner.net/articles/JSONPath/\" rel=\"nofollow\">JSONPath - XPath for\nJSON</a> by Stefan Goessner.</li>\n</ul>\n</div>\n<div id=\"special-note-about-ply-and-docstrings\">\n<h2>Special note about PLY and docstrings</h2>\n<p>The main parsing toolkit underlying this library,\n<a href=\"https://github.com/dabeaz/ply\" rel=\"nofollow\">PLY</a>, does not work with docstrings\nremoved. For example, <tt>PYTHONOPTIMIZE=2</tt> and <tt>python <span class=\"pre\">-OO</span></tt> will both\ncause a failure.</p>\n</div>\n<div id=\"contributors\">\n<h2>Contributors</h2>\n<p>This package is authored and maintained by:</p>\n<ul>\n<li><a href=\"https://github.com/kennknowles\" rel=\"nofollow\">Kenn Knowles</a>\n(<a href=\"https://twitter.com/KennKnowles\" rel=\"nofollow\">@kennknowles</a>)</li>\n</ul>\n<p>with the help of patches submitted by <a href=\"https://github.com/kennknowles/python-jsonpath-rw/graphs/contributors\" rel=\"nofollow\">these contributors</a>.</p>\n</div>\n<div id=\"copyright-and-license\">\n<h2>Copyright and License</h2>\n<p>Copyright 2013- Kenneth Knowles</p>\n<p>Licensed under the Apache License, Version 2.0 (the \u201cLicense\u201d); you may\nnot use this file except in compliance with the License. You may obtain\na copy of the License at</p>\n<pre>http://www.apache.org/licenses/LICENSE-2.0\n</pre>\n<p>Unless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \u201cAS IS\u201d BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.</p>\n</div>\n\n          </div>"}, "last_serial": 1511129, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "e69a4d25082dbecc67a759860269d152", "sha256": "7cf82a77b2aebc3b74030155ab162f154137f14291dc7cc4fa867b7f41a3d4f5"}, "downloads": -1, "filename": "jsonpath-rw-0.1.tar.gz", "has_sig": false, "md5_digest": "e69a4d25082dbecc67a759860269d152", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8465, "upload_time": "2013-02-09T05:41:51", "upload_time_iso_8601": "2013-02-09T05:41:51.914634Z", "url": "https://files.pythonhosted.org/packages/b3/6c/def6601938b342823c6f0fa1c6c787491765fe77675f47b05601cca3c520/jsonpath-rw-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "601ac09b1663ef1d78d0c28ea480f818", "sha256": "e2986651e34324328731a58bfa4ac49d8e1450470e5d3733990ecf9545c51c9a"}, "downloads": -1, "filename": "jsonpath-rw-0.2.tar.gz", "has_sig": false, "md5_digest": "601ac09b1663ef1d78d0c28ea480f818", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8566, "upload_time": "2013-02-15T18:06:50", "upload_time_iso_8601": "2013-02-15T18:06:50.450102Z", "url": "https://files.pythonhosted.org/packages/b5/a1/7f8214447a211ca50d1c4af1bed8cf15cc91b93c62afff8b8e41f90193a5/jsonpath-rw-0.2.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "7caf10975ecc59a242bf76615f9bbd55", "sha256": "9a21e8bd6bc17d75d361e14f905f06284545fd6f965f4fc5e423a1c71b6e8cc5"}, "downloads": -1, "filename": "jsonpath-rw-0.3.tar.gz", "has_sig": false, "md5_digest": "7caf10975ecc59a242bf76615f9bbd55", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9075, "upload_time": "2013-03-15T15:43:28", "upload_time_iso_8601": "2013-03-15T15:43:28.451698Z", "url": "https://files.pythonhosted.org/packages/4e/20/b78c0a928fe2701aa4a117731e1315ddc99be1969d0458fdbdaae0226143/jsonpath-rw-0.3.tar.gz", "yanked": false}], "0.4": [{"comment_text": "", "digests": {"md5": "31acdff75a04bd0250802a8074cc80b6", "sha256": "781d94f2ab7a1126abd724aa217b5cbffec83cca0b4ac756b3fa9e101a649fee"}, "downloads": -1, "filename": "jsonpath-rw-0.4.tar.gz", "has_sig": false, "md5_digest": "31acdff75a04bd0250802a8074cc80b6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9833, "upload_time": "2013-03-15T18:04:23", "upload_time_iso_8601": "2013-03-15T18:04:23.284894Z", "url": "https://files.pythonhosted.org/packages/83/4b/6135a07f34166371bd8ce8bf9755551a91574e09d77e8c7e15cc293089a4/jsonpath-rw-0.4.tar.gz", "yanked": false}], "0.5": [{"comment_text": "", "digests": {"md5": "843ea0ef0b09f513dd376c4ff1fd0d1f", "sha256": "cc78c4413089be6ff9433d30e68a1d30182f79e5f1ce16aa2e28a50b1cef5251"}, "downloads": -1, "filename": "jsonpath-rw-0.5.tar.gz", "has_sig": false, "md5_digest": "843ea0ef0b09f513dd376c4ff1fd0d1f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10615, "upload_time": "2013-03-22T17:25:37", "upload_time_iso_8601": "2013-03-22T17:25:37.879773Z", "url": "https://files.pythonhosted.org/packages/f4/57/c277bfecafdf1d2750f179e23ed52e80e90dcc2171609242336435753d75/jsonpath-rw-0.5.tar.gz", "yanked": false}], "0.6": [{"comment_text": "", "digests": {"md5": "26afa9507c9da298abf878ac8dce0b9a", "sha256": "6d1fd401b49f7787a60f056c8c76b84c1546b41dc3c8e2e6a35cb35bb1c0a172"}, "downloads": -1, "filename": "jsonpath-rw-0.6.tar.gz", "has_sig": false, "md5_digest": "26afa9507c9da298abf878ac8dce0b9a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10621, "upload_time": "2013-03-22T17:34:25", "upload_time_iso_8601": "2013-03-22T17:34:25.772386Z", "url": "https://files.pythonhosted.org/packages/cc/9d/237c5b60126d26615dd502e9b5ef16ed2215d8df295996dfcbe234757df8/jsonpath-rw-0.6.tar.gz", "yanked": false}], "0.7": [{"comment_text": "", "digests": {"md5": "c8bc22150c8227e15a4f5189ab6ce1a3", "sha256": "bc360f29669c4cb3369e5417a4a25c3127f4a7d86a68dbc2cfc3235d09a6985b"}, "downloads": -1, "filename": "jsonpath-rw-0.7.tar.gz", "has_sig": false, "md5_digest": "c8bc22150c8227e15a4f5189ab6ce1a3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10649, "upload_time": "2013-03-22T17:43:41", "upload_time_iso_8601": "2013-03-22T17:43:41.021534Z", "url": "https://files.pythonhosted.org/packages/9d/e2/95b573f5b4cf837b37af36784e1096e2d4f0b9be66285661e9164814f964/jsonpath-rw-0.7.tar.gz", "yanked": false}], "0.8": [{"comment_text": "", "digests": {"md5": "df1119eec702903e5fb20ef62f866109", "sha256": "eddda311d474f03dec8d0a5e3f4e6c9d1a6be3ac300c0f065253667e09b3fbbf"}, "downloads": -1, "filename": "jsonpath-rw-0.8.tar.gz", "has_sig": false, "md5_digest": "df1119eec702903e5fb20ef62f866109", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10727, "upload_time": "2013-03-26T18:15:02", "upload_time_iso_8601": "2013-03-26T18:15:02.328689Z", "url": "https://files.pythonhosted.org/packages/38/59/e6848f575d1088666ca73b108b3155f22b644f116bb478d9ee7061bd9aef/jsonpath-rw-0.8.tar.gz", "yanked": false}], "0.9": [{"comment_text": "", "digests": {"md5": "c7447f75a28e5d712761c8a3682848d2", "sha256": "2fca2ced964b18a4a744c9cab49bd648e3ff2731ddf134b64a42481665491711"}, "downloads": -1, "filename": "jsonpath-rw-0.9.tar.gz", "has_sig": false, "md5_digest": "c7447f75a28e5d712761c8a3682848d2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10861, "upload_time": "2013-03-26T20:35:49", "upload_time_iso_8601": "2013-03-26T20:35:49.271554Z", "url": "https://files.pythonhosted.org/packages/6d/1b/f1c5284bdec07587ca49bdcaa5a8f23473650ee04f0da7eb27b427e94ff8/jsonpath-rw-0.9.tar.gz", "yanked": false}], "1.0": [{"comment_text": "", "digests": {"md5": "7c5ce654b628917843de2a83cec5d5bf", "sha256": "f667c2792ac34cfad3f6f8f9703c83cacde12f5dacc2ab1a007c9c9010ddc674"}, "downloads": -1, "filename": "jsonpath-rw-1.0.tar.gz", "has_sig": false, "md5_digest": "7c5ce654b628917843de2a83cec5d5bf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10904, "upload_time": "2013-03-27T16:27:37", "upload_time_iso_8601": "2013-03-27T16:27:37.252730Z", "url": "https://files.pythonhosted.org/packages/86/06/87b4e0e0c0ab9f14afe77bb3663b4431e27215c94631c51bb3a93ebf01d0/jsonpath-rw-1.0.tar.gz", "yanked": false}], "1.1": [{"comment_text": "", "digests": {"md5": "05921d928b24592e1e53879e537f3a1b", "sha256": "6919cf701ab0219b57bf8915e174e8c628c8890905cb781cf78714dbb07ecd19"}, "downloads": -1, "filename": "jsonpath-rw-1.1.tar.gz", "has_sig": false, "md5_digest": "05921d928b24592e1e53879e537f3a1b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11555, "upload_time": "2013-03-27T19:50:56", "upload_time_iso_8601": "2013-03-27T19:50:56.733899Z", "url": "https://files.pythonhosted.org/packages/14/50/8e714894829952c20db325d5fa3607d690f7d8314e1e129f407fda0d9df9/jsonpath-rw-1.1.tar.gz", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "c86a4008b0848fa35cee6e0e0190de4c", "sha256": "ffd450fe24bbb15564500ddf98949224b0107427d43a0605020978f95f7af88f"}, "downloads": -1, "filename": "jsonpath-rw-1.1.1.tar.gz", "has_sig": false, "md5_digest": "c86a4008b0848fa35cee6e0e0190de4c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11576, "upload_time": "2013-05-01T21:54:41", "upload_time_iso_8601": "2013-05-01T21:54:41.010841Z", "url": "https://files.pythonhosted.org/packages/15/b8/b8af416f79d55212421d0ecf4c31de31aa88326ca9f1a240446278053beb/jsonpath-rw-1.1.1.tar.gz", "yanked": false}], "1.1.2": [{"comment_text": "", "digests": {"md5": "3f3eae0475c7b2a28a512004e23fec5a", "sha256": "cca4eeb2d0b57acff3d21b1c387c1c256a093dcbb099511709fef28cd5fd36f7"}, "downloads": -1, "filename": "jsonpath-rw-1.1.2.tar.gz", "has_sig": false, "md5_digest": "3f3eae0475c7b2a28a512004e23fec5a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11668, "upload_time": "2013-05-01T22:01:16", "upload_time_iso_8601": "2013-05-01T22:01:16.141425Z", "url": "https://files.pythonhosted.org/packages/06/d5/827f272acbea805a8da116953edab81c5f761bb8fe07abbbe5e9724e5e1b/jsonpath-rw-1.1.2.tar.gz", "yanked": false}], "1.1.3": [{"comment_text": "", "digests": {"md5": "b18bd4678913baec79ef401280237731", "sha256": "f075132295b00a6d536ead174b393aefecaf3f5348e014dfb8bcd36ecc056e14"}, "downloads": -1, "filename": "jsonpath-rw-1.1.3.tar.gz", "has_sig": false, "md5_digest": "b18bd4678913baec79ef401280237731", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11779, "upload_time": "2013-05-29T16:02:37", "upload_time_iso_8601": "2013-05-29T16:02:37.264311Z", "url": "https://files.pythonhosted.org/packages/56/8e/fd2792cb470afc2d812b4fee643fdcfadb7198f3ff0dfff179a069feb320/jsonpath-rw-1.1.3.tar.gz", "yanked": false}], "1.1.4": [{"comment_text": "", "digests": {"md5": "5428161fe0f24389ae8806bde26eeb67", "sha256": "3426c315815c605d6008b7f9131c279938da72b20e6d69f9b2b88460cfe8c2fe"}, "downloads": -1, "filename": "jsonpath-rw-1.1.4.tar.gz", "has_sig": false, "md5_digest": "5428161fe0f24389ae8806bde26eeb67", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12482, "upload_time": "2013-06-04T18:46:39", "upload_time_iso_8601": "2013-06-04T18:46:39.827485Z", "url": "https://files.pythonhosted.org/packages/1d/99/55efe80ed7bd5bfb3ae6c41e5278b15fc1b679d1d7fc70d15f5c8ea59f5f/jsonpath-rw-1.1.4.tar.gz", "yanked": false}], "1.2.0": [{"comment_text": "", "digests": {"md5": "8d0212c5503bbf35e0ca41868ed0d401", "sha256": "a085a9ee8c2211c21e7b3d9f354a98cb0001b0ad4e6a83f875e64cd82707853b"}, "downloads": -1, "filename": "jsonpath-rw-1.2.0.tar.gz", "has_sig": false, "md5_digest": "8d0212c5503bbf35e0ca41868ed0d401", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12734, "upload_time": "2013-06-17T16:52:34", "upload_time_iso_8601": "2013-06-17T16:52:34.584519Z", "url": "https://files.pythonhosted.org/packages/d6/52/321053326d7127d60d7c71b7d94b5e30b480f1803364ef9bdfc745bc74e3/jsonpath-rw-1.2.0.tar.gz", "yanked": false}], "1.2.1": [{"comment_text": "", "digests": {"md5": "ba747ca180511ee7be9a5210f6a81834", "sha256": "a4486ca8b25cf6cfcd0b2eecd73460abe1aa7c562214f016c850490bc0b97b32"}, "downloads": -1, "filename": "jsonpath-rw-1.2.1.tar.gz", "has_sig": false, "md5_digest": "ba747ca180511ee7be9a5210f6a81834", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13389, "upload_time": "2013-09-24T21:40:18", "upload_time_iso_8601": "2013-09-24T21:40:18.972668Z", "url": "https://files.pythonhosted.org/packages/d2/1b/c3c81cd0d9579d92a21c10adacde32dfc8865a5d12d8e87be51a65bfbed9/jsonpath-rw-1.2.1.tar.gz", "yanked": false}], "1.2.2": [{"comment_text": "", "digests": {"md5": "01efc54b636e4c023d5bca7d5453dd3b", "sha256": "fca5edf074d43aa5846afb455e9302b20144167dcea05f8e70b42b4e7c8e17d4"}, "downloads": -1, "filename": "jsonpath-rw-1.2.2.tar.gz", "has_sig": false, "md5_digest": "01efc54b636e4c023d5bca7d5453dd3b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13294, "upload_time": "2013-12-11T19:43:56", "upload_time_iso_8601": "2013-12-11T19:43:56.424932Z", "url": "https://files.pythonhosted.org/packages/f1/75/8dec15625112f03ff7d1cd465b21f2df08fb5c5aef8ccc7874be938e3f0e/jsonpath-rw-1.2.2.tar.gz", "yanked": false}], "1.2.3": [{"comment_text": "", "digests": {"md5": "fe75b54ce4ea5201e132504590db6140", "sha256": "070f316dd172cdbb733f8da1b981ebcd3c8f90b75aca9f978c9ac145c1a25e86"}, "downloads": -1, "filename": "jsonpath-rw-1.2.3.tar.gz", "has_sig": false, "md5_digest": "fe75b54ce4ea5201e132504590db6140", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12685, "upload_time": "2013-12-18T15:57:25", "upload_time_iso_8601": "2013-12-18T15:57:25.426688Z", "url": "https://files.pythonhosted.org/packages/7d/1e/611525d284fb2b9d5f1c0b9c16f178f14b574ab6c2290b073b5f246ed996/jsonpath-rw-1.2.3.tar.gz", "yanked": false}], "1.3.0": [{"comment_text": "", "digests": {"md5": "5d1d8d10a21b38637cbd0a84f4b30843", "sha256": "d4869e5c540e797189acca97f1fef2dfaf5dc3560fd25109d44e353e8eacabbc"}, "downloads": -1, "filename": "jsonpath-rw-1.3.0.tar.gz", "has_sig": false, "md5_digest": "5d1d8d10a21b38637cbd0a84f4b30843", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12796, "upload_time": "2014-02-08T00:42:51", "upload_time_iso_8601": "2014-02-08T00:42:51.354509Z", "url": "https://files.pythonhosted.org/packages/b7/ed/eee374b40f17250991bca89490f27e602d626f4b4b30ef8ee33505d36c9c/jsonpath-rw-1.3.0.tar.gz", "yanked": false}], "1.4.0": [{"comment_text": "", "digests": {"md5": "3a807e05c2c12158fc6bb0a402fd5778", "sha256": "05c471281c45ae113f6103d1268ec7a4831a2e96aa80de45edc89b11fac4fbec"}, "downloads": -1, "filename": "jsonpath-rw-1.4.0.tar.gz", "has_sig": false, "md5_digest": "3a807e05c2c12158fc6bb0a402fd5778", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13814, "upload_time": "2015-04-19T01:47:15", "upload_time_iso_8601": "2015-04-19T01:47:15.060153Z", "url": "https://files.pythonhosted.org/packages/71/7c/45001b1f19af8c4478489fbae4fc657b21c4c669d7a5a036a86882581d85/jsonpath-rw-1.4.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "3a807e05c2c12158fc6bb0a402fd5778", "sha256": "05c471281c45ae113f6103d1268ec7a4831a2e96aa80de45edc89b11fac4fbec"}, "downloads": -1, "filename": "jsonpath-rw-1.4.0.tar.gz", "has_sig": false, "md5_digest": "3a807e05c2c12158fc6bb0a402fd5778", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13814, "upload_time": "2015-04-19T01:47:15", "upload_time_iso_8601": "2015-04-19T01:47:15.060153Z", "url": "https://files.pythonhosted.org/packages/71/7c/45001b1f19af8c4478489fbae4fc657b21c4c669d7a5a036a86882581d85/jsonpath-rw-1.4.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:51:43 2020"}