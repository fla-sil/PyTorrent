{"info": {"author": "Valentin Lievin", "author_email": "valentin.lievin@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# Booster\n\nA lightweight library to ease the training and the debugging of deep neural networks with PyTorch. Data structures and paradigms.\n\n## Data Structures\n\n### Diagnostic\n\nA two level dictionary structure to store the model diagnostics. Compatible with Tensorboard datastructure.\n\nExample:\n\n```python\nfrom booster.data import Diagnostic\n\ndata = {\n'loss' : {'nll' : [45., 58.], 'kl': [22., 18.]},\n'info : {'batch_size' : 16, 'runtime' : 0.01}\n}\n\ndiagnostic = Diagnostic(data)\n```\n\n### Aggregator\n\nA module to compute the running average of the diagnostics.\n\n```python\nfrom booster.data import Aggregator, Diagnostic\n\naggregator = Aggregator()\n...\naggregator.initialize()\nfor x in loader:\n  data = op_step(model, data)\n  aggregator.update(data)\n\nsummmary = aggregator.data # summary is a Diagnostic\nsummmary = summary.to('cpu')\n```\n\nThe output is a Diagnostic object and can easily be dumped to Tensorboard.\n\n```python\n# log to tensorboard\nwriter = SummaryWriter(log_dir=\"....\")\nsummary.log(writer, global_step)\n```\n\n## Pipeline: model + evaluator\n\nAn Evaluator computes the loss and the diagnostics. The pipeline fuses the model forward pass with the evaluator and can be wrapped into a custom Dataparallel class that handles the diagnostics.\n\n```python\n# fuse model + evaluator\npipeline = BoosterPipeline(model, evaluator)\n\n# wrap as DataParallel\nparallel_pipeline = DataParallelPipeline(pipeline, device_ids=device_ids)\n\n# evaluate model on multiple devices and gather loss and diagnostics\ndata = next(iter(loader))\nloss, diagnostics = parallel_pipeline(data) \n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/vlievin/booster-pytorch", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "booster-pytorch", "package_url": "https://pypi.org/project/booster-pytorch/", "platform": "", "project_url": "https://pypi.org/project/booster-pytorch/", "project_urls": {"Homepage": "https://github.com/vlievin/booster-pytorch"}, "release_url": "https://pypi.org/project/booster-pytorch/0.0.1/", "requires_dist": null, "requires_python": "", "summary": "A lightweight library to ease the training and the debugging of deep neural networks with PyTorch. Data structures and paradigms.", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Booster</h1>\n<p>A lightweight library to ease the training and the debugging of deep neural networks with PyTorch. Data structures and paradigms.</p>\n<h2>Data Structures</h2>\n<h3>Diagnostic</h3>\n<p>A two level dictionary structure to store the model diagnostics. Compatible with Tensorboard datastructure.</p>\n<p>Example:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">booster.data</span> <span class=\"kn\">import</span> <span class=\"n\">Diagnostic</span>\n\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n<span class=\"s1\">'loss'</span> <span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'nll'</span> <span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mf\">45.</span><span class=\"p\">,</span> <span class=\"mf\">58.</span><span class=\"p\">],</span> <span class=\"s1\">'kl'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mf\">22.</span><span class=\"p\">,</span> <span class=\"mf\">18.</span><span class=\"p\">]},</span>\n<span class=\"s1\">'info : {'</span><span class=\"n\">batch_size</span><span class=\"s1\">' : 16, '</span><span class=\"n\">runtime</span><span class=\"s1\">' : 0.01}</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">diagnostic</span> <span class=\"o\">=</span> <span class=\"n\">Diagnostic</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n</pre>\n<h3>Aggregator</h3>\n<p>A module to compute the running average of the diagnostics.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">booster.data</span> <span class=\"kn\">import</span> <span class=\"n\">Aggregator</span><span class=\"p\">,</span> <span class=\"n\">Diagnostic</span>\n\n<span class=\"n\">aggregator</span> <span class=\"o\">=</span> <span class=\"n\">Aggregator</span><span class=\"p\">()</span>\n<span class=\"o\">...</span>\n<span class=\"n\">aggregator</span><span class=\"o\">.</span><span class=\"n\">initialize</span><span class=\"p\">()</span>\n<span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">loader</span><span class=\"p\">:</span>\n  <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">op_step</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">)</span>\n  <span class=\"n\">aggregator</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n\n<span class=\"n\">summmary</span> <span class=\"o\">=</span> <span class=\"n\">aggregator</span><span class=\"o\">.</span><span class=\"n\">data</span> <span class=\"c1\"># summary is a Diagnostic</span>\n<span class=\"n\">summmary</span> <span class=\"o\">=</span> <span class=\"n\">summary</span><span class=\"o\">.</span><span class=\"n\">to</span><span class=\"p\">(</span><span class=\"s1\">'cpu'</span><span class=\"p\">)</span>\n</pre>\n<p>The output is a Diagnostic object and can easily be dumped to Tensorboard.</p>\n<pre><span class=\"c1\"># log to tensorboard</span>\n<span class=\"n\">writer</span> <span class=\"o\">=</span> <span class=\"n\">SummaryWriter</span><span class=\"p\">(</span><span class=\"n\">log_dir</span><span class=\"o\">=</span><span class=\"s2\">\"....\"</span><span class=\"p\">)</span>\n<span class=\"n\">summary</span><span class=\"o\">.</span><span class=\"n\">log</span><span class=\"p\">(</span><span class=\"n\">writer</span><span class=\"p\">,</span> <span class=\"n\">global_step</span><span class=\"p\">)</span>\n</pre>\n<h2>Pipeline: model + evaluator</h2>\n<p>An Evaluator computes the loss and the diagnostics. The pipeline fuses the model forward pass with the evaluator and can be wrapped into a custom Dataparallel class that handles the diagnostics.</p>\n<pre><span class=\"c1\"># fuse model + evaluator</span>\n<span class=\"n\">pipeline</span> <span class=\"o\">=</span> <span class=\"n\">BoosterPipeline</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">,</span> <span class=\"n\">evaluator</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># wrap as DataParallel</span>\n<span class=\"n\">parallel_pipeline</span> <span class=\"o\">=</span> <span class=\"n\">DataParallelPipeline</span><span class=\"p\">(</span><span class=\"n\">pipeline</span><span class=\"p\">,</span> <span class=\"n\">device_ids</span><span class=\"o\">=</span><span class=\"n\">device_ids</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># evaluate model on multiple devices and gather loss and diagnostics</span>\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"nb\">next</span><span class=\"p\">(</span><span class=\"nb\">iter</span><span class=\"p\">(</span><span class=\"n\">loader</span><span class=\"p\">))</span>\n<span class=\"n\">loss</span><span class=\"p\">,</span> <span class=\"n\">diagnostics</span> <span class=\"o\">=</span> <span class=\"n\">parallel_pipeline</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span> \n</pre>\n\n          </div>"}, "last_serial": 6051761, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "a733190dc8e3f5c13fc80fbf776e1a83", "sha256": "8aefb907553abe188f68bb6e98f9302702c3ef475db6570d218b67a297c0a8d1"}, "downloads": -1, "filename": "booster-pytorch-0.0.1.tar.gz", "has_sig": false, "md5_digest": "a733190dc8e3f5c13fc80fbf776e1a83", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9284, "upload_time": "2019-10-30T10:03:21", "upload_time_iso_8601": "2019-10-30T10:03:21.930778Z", "url": "https://files.pythonhosted.org/packages/b1/cb/3c6fa9efe2ed9c997abd2507062193f42be9cb1d6ae89de9ec5e3bf100a3/booster-pytorch-0.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a733190dc8e3f5c13fc80fbf776e1a83", "sha256": "8aefb907553abe188f68bb6e98f9302702c3ef475db6570d218b67a297c0a8d1"}, "downloads": -1, "filename": "booster-pytorch-0.0.1.tar.gz", "has_sig": false, "md5_digest": "a733190dc8e3f5c13fc80fbf776e1a83", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9284, "upload_time": "2019-10-30T10:03:21", "upload_time_iso_8601": "2019-10-30T10:03:21.930778Z", "url": "https://files.pythonhosted.org/packages/b1/cb/3c6fa9efe2ed9c997abd2507062193f42be9cb1d6ae89de9ec5e3bf100a3/booster-pytorch-0.0.1.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:36:42 2020"}