{"info": {"author": "Jonathan Slenders, Gert van Gool, Maarten Timmerman, Steven (rh0dium), Unleashed NV", "author_email": "operations@unleashed.be", "bugtrack_url": null, "classifiers": ["Environment :: Web Environment", "Framework :: Django", "Intended Audience :: Developers", "Operating System :: OS Independent", "Programming Language :: Python"], "description": "Django States\n=============\n\n|Build Status|\n\nDescription\n-----------\n\nState engine for django models. Define a state graph for a model and\nremember the state of each object. State transitions can be logged for\nobjects.\n\nInstallation\n------------\n\n.. code:: sh\n\n    pip install django-states2\n\nUsage example\n-------------\n\nTo use a state machine, you should add a state field to the model\n\n.. code:: python\n\n    from django_states.fields import StateField\n    from django_states.machine import StateMachine, StateDefinition, StateTransition\n\n    class PurchaseStateMachine(StateMachine):\n       log_transitions = True\n\n       # possible states\n       class initiated(StateDefinition):\n           description = _('Purchase initiated')\n           initial = True\n\n       class paid(StateDefinition):\n           description = _('Purchase paid')\n\n           def handler(self, instance):\n               code_to_execute_when_arriving_in_this_state()\n\n       class shipped(StateDefinition):\n           description = _('Purchase shipped')\n\n       # state transitions\n       class mark_paid(StateTransition):\n           from_state = 'initiated'\n           to_state = 'paid'\n           description = 'Mark this purchase as paid'\n\n       class ship(StateTransition):\n           from_state = 'paid'\n           to_state = 'shipped'\n           description = 'Ship purchase'\n\n           def handler(transition, instance, user):\n               code_to_execute_during_this_transition()\n\n           def has_permission(transition, instance, user):\n               return true_when_user_can_make_this_transition()\n\n    class Purchase(StateModel):\n        purchase_state = StateField(machine=PurchaseStateMachine, default='initiated')\n        ... (other fields for a purchase)\n\nIf ``log_transitions`` is enabled, another model is created. Everything\nshould be compatible with South\\_ for migrations.\n\nNote: If you're creating a ``DataMigration`` in\n`South <http://south.aeracode.org/>`__, remember to use\n``obj.save(no_state_validation=True)``\n\nUsage example:\n\n.. code:: python\n\n   p = Purchase()\n\n   # Will automatically create state object for this purchase, in the\n   # initial state.\n   p.save()\n   p.get_purchase_state_info().make_transition('mark_paid', request.user) # User parameter is optional\n   p.state # Will return 'paid'\n   p.get_purchase_state_info().description # Will return 'Purchase paid'\n\n   # Returns an iterator of possible transitions for this purchase.\n   p.get_purchase_state_info().possible_transitions()\n\n   # Which can be used like this..\n   [x.get_name() for x in p.possible_transitions]\n\nFor better transition control, override:\n\n-  ``has_permission(self, instance, user)``: Check whether this user is\n   allowed to make this transition.\n-  ``handler(self, instance, user)``: Code to run during this\n   transition. When an exception has been raised in here, the transition\n   will not be made.\n\nGet all objects in a certain state::\n\n   Purchase.objects.filter(state='initiated')\n\nValidation\n----------\n\nYou can add a test that needs to pass before a state transition can be\nexecuted. Well, you can add 2: one based on the current user\n(``has_permission``) and one generic (``validate``).\n\nSo on a ``StateTransition``-object you need to specify an extra\n``validate`` function (signature is ``validate(cls, instance)``). This\nshould yield ``TransitionValidationError``, this way you can return\nmultiple errors on that need to pass before the transition can happen.\n\nThe ``has_permission`` function (signature\n``has_permission(transition, instance, user)``) should check whether the\ngiven user is allowed to make the transition. E.g. a super user can\nmoderate all comments while other users can only moderate comments on\ntheir blog-posts.\n\nGroups\n------\n\nSometimes you want to group several states together, since for a certain\nview (or other content) it doesn't really matter which of the states it\nis. We support 2 different state groups, inclusive (only these) or\nexclusive (everything but these):\n\n.. code:: python\n\n  class is_paid(StateGroup):\n      states = ['paid', 'shipped']\n\n  class is_paid(StateGroup):\n      exclude_states = ['initiated']\n\nState graph\n-----------\n\nYou can get a graph of your states by running the ``graph_states``\nmanagement command.\n\n.. code:: sh\n\n   python manage.py graph_states myapp.Purchase.state\n\nThis requires `graphviz <http://graphviz.org>`__ and python bindings for\ngraphviz: ``pygraphviz`` and ``yapgvb``.\n\n.. |Build Status| image:: https://travis-ci.org/vikingco/django-states2.svg?branch=fix%2F15403%2Fdebug-in_group-and-add-unittests\n   :target: https://travis-ci.org/vikingco/django-states2", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/vikingco/django-states2", "keywords": null, "license": "BSD", "maintainer": null, "maintainer_email": null, "name": "django-states2", "package_url": "https://pypi.org/project/django-states2/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/django-states2/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/vikingco/django-states2"}, "release_url": "https://pypi.org/project/django-states2/1.6.10/", "requires_dist": null, "requires_python": null, "summary": "State machine for django models", "version": "1.6.10", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://travis-ci.org/vikingco/django-states2\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/04f3e6ce55fa3194454b7a5897cce04ffe10204d/68747470733a2f2f7472617669732d63692e6f72672f76696b696e67636f2f646a616e676f2d737461746573322e7376673f6272616e63683d666978253246313534303325324664656275672d696e5f67726f75702d616e642d6164642d756e69747465737473\"></a></p>\n<div id=\"description\">\n<h2>Description</h2>\n<p>State engine for django models. Define a state graph for a model and\nremember the state of each object. State transitions can be logged for\nobjects.</p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<pre>pip install django-states2\n</pre>\n</div>\n<div id=\"usage-example\">\n<h2>Usage example</h2>\n<p>To use a state machine, you should add a state field to the model</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">django_states.fields</span> <span class=\"kn\">import</span> <span class=\"n\">StateField</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django_states.machine</span> <span class=\"kn\">import</span> <span class=\"n\">StateMachine</span><span class=\"p\">,</span> <span class=\"n\">StateDefinition</span><span class=\"p\">,</span> <span class=\"n\">StateTransition</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">PurchaseStateMachine</span><span class=\"p\">(</span><span class=\"n\">StateMachine</span><span class=\"p\">):</span>\n   <span class=\"n\">log_transitions</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n\n   <span class=\"c1\"># possible states</span>\n   <span class=\"k\">class</span> <span class=\"nc\">initiated</span><span class=\"p\">(</span><span class=\"n\">StateDefinition</span><span class=\"p\">):</span>\n       <span class=\"n\">description</span> <span class=\"o\">=</span> <span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s1\">'Purchase initiated'</span><span class=\"p\">)</span>\n       <span class=\"n\">initial</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n\n   <span class=\"k\">class</span> <span class=\"nc\">paid</span><span class=\"p\">(</span><span class=\"n\">StateDefinition</span><span class=\"p\">):</span>\n       <span class=\"n\">description</span> <span class=\"o\">=</span> <span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s1\">'Purchase paid'</span><span class=\"p\">)</span>\n\n       <span class=\"k\">def</span> <span class=\"nf\">handler</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">instance</span><span class=\"p\">):</span>\n           <span class=\"n\">code_to_execute_when_arriving_in_this_state</span><span class=\"p\">()</span>\n\n   <span class=\"k\">class</span> <span class=\"nc\">shipped</span><span class=\"p\">(</span><span class=\"n\">StateDefinition</span><span class=\"p\">):</span>\n       <span class=\"n\">description</span> <span class=\"o\">=</span> <span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s1\">'Purchase shipped'</span><span class=\"p\">)</span>\n\n   <span class=\"c1\"># state transitions</span>\n   <span class=\"k\">class</span> <span class=\"nc\">mark_paid</span><span class=\"p\">(</span><span class=\"n\">StateTransition</span><span class=\"p\">):</span>\n       <span class=\"n\">from_state</span> <span class=\"o\">=</span> <span class=\"s1\">'initiated'</span>\n       <span class=\"n\">to_state</span> <span class=\"o\">=</span> <span class=\"s1\">'paid'</span>\n       <span class=\"n\">description</span> <span class=\"o\">=</span> <span class=\"s1\">'Mark this purchase as paid'</span>\n\n   <span class=\"k\">class</span> <span class=\"nc\">ship</span><span class=\"p\">(</span><span class=\"n\">StateTransition</span><span class=\"p\">):</span>\n       <span class=\"n\">from_state</span> <span class=\"o\">=</span> <span class=\"s1\">'paid'</span>\n       <span class=\"n\">to_state</span> <span class=\"o\">=</span> <span class=\"s1\">'shipped'</span>\n       <span class=\"n\">description</span> <span class=\"o\">=</span> <span class=\"s1\">'Ship purchase'</span>\n\n       <span class=\"k\">def</span> <span class=\"nf\">handler</span><span class=\"p\">(</span><span class=\"n\">transition</span><span class=\"p\">,</span> <span class=\"n\">instance</span><span class=\"p\">,</span> <span class=\"n\">user</span><span class=\"p\">):</span>\n           <span class=\"n\">code_to_execute_during_this_transition</span><span class=\"p\">()</span>\n\n       <span class=\"k\">def</span> <span class=\"nf\">has_permission</span><span class=\"p\">(</span><span class=\"n\">transition</span><span class=\"p\">,</span> <span class=\"n\">instance</span><span class=\"p\">,</span> <span class=\"n\">user</span><span class=\"p\">):</span>\n           <span class=\"k\">return</span> <span class=\"n\">true_when_user_can_make_this_transition</span><span class=\"p\">()</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Purchase</span><span class=\"p\">(</span><span class=\"n\">StateModel</span><span class=\"p\">):</span>\n    <span class=\"n\">purchase_state</span> <span class=\"o\">=</span> <span class=\"n\">StateField</span><span class=\"p\">(</span><span class=\"n\">machine</span><span class=\"o\">=</span><span class=\"n\">PurchaseStateMachine</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"s1\">'initiated'</span><span class=\"p\">)</span>\n    <span class=\"o\">...</span> <span class=\"p\">(</span><span class=\"n\">other</span> <span class=\"n\">fields</span> <span class=\"k\">for</span> <span class=\"n\">a</span> <span class=\"n\">purchase</span><span class=\"p\">)</span>\n</pre>\n<p>If <tt>log_transitions</tt> is enabled, another model is created. Everything\nshould be compatible with South_ for migrations.</p>\n<p>Note: If you\u2019re creating a <tt>DataMigration</tt> in\n<a href=\"http://south.aeracode.org/\" rel=\"nofollow\">South</a>, remember to use\n<tt>obj.save(no_state_validation=True)</tt></p>\n<p>Usage example:</p>\n<pre><span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">Purchase</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Will automatically create state object for this purchase, in the</span>\n<span class=\"c1\"># initial state.</span>\n<span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span>\n<span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">get_purchase_state_info</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">make_transition</span><span class=\"p\">(</span><span class=\"s1\">'mark_paid'</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">user</span><span class=\"p\">)</span> <span class=\"c1\"># User parameter is optional</span>\n<span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">state</span> <span class=\"c1\"># Will return 'paid'</span>\n<span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">get_purchase_state_info</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">description</span> <span class=\"c1\"># Will return 'Purchase paid'</span>\n\n<span class=\"c1\"># Returns an iterator of possible transitions for this purchase.</span>\n<span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">get_purchase_state_info</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">possible_transitions</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Which can be used like this..</span>\n<span class=\"p\">[</span><span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">get_name</span><span class=\"p\">()</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">possible_transitions</span><span class=\"p\">]</span>\n</pre>\n<p>For better transition control, override:</p>\n<ul>\n<li><tt>has_permission(self, instance, user)</tt>: Check whether this user is\nallowed to make this transition.</li>\n<li><tt>handler(self, instance, user)</tt>: Code to run during this\ntransition. When an exception has been raised in here, the transition\nwill not be made.</li>\n</ul>\n<p>Get all objects in a certain state:</p>\n<pre>Purchase.objects.filter(state='initiated')\n</pre>\n</div>\n<div id=\"validation\">\n<h2>Validation</h2>\n<p>You can add a test that needs to pass before a state transition can be\nexecuted. Well, you can add 2: one based on the current user\n(<tt>has_permission</tt>) and one generic (<tt>validate</tt>).</p>\n<p>So on a <tt>StateTransition</tt>-object you need to specify an extra\n<tt>validate</tt> function (signature is <tt>validate(cls, instance)</tt>). This\nshould yield <tt>TransitionValidationError</tt>, this way you can return\nmultiple errors on that need to pass before the transition can happen.</p>\n<p>The <tt>has_permission</tt> function (signature\n<tt>has_permission(transition, instance, user)</tt>) should check whether the\ngiven user is allowed to make the transition. E.g. a super user can\nmoderate all comments while other users can only moderate comments on\ntheir blog-posts.</p>\n</div>\n<div id=\"groups\">\n<h2>Groups</h2>\n<p>Sometimes you want to group several states together, since for a certain\nview (or other content) it doesn\u2019t really matter which of the states it\nis. We support 2 different state groups, inclusive (only these) or\nexclusive (everything but these):</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">is_paid</span><span class=\"p\">(</span><span class=\"n\">StateGroup</span><span class=\"p\">):</span>\n    <span class=\"n\">states</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'paid'</span><span class=\"p\">,</span> <span class=\"s1\">'shipped'</span><span class=\"p\">]</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">is_paid</span><span class=\"p\">(</span><span class=\"n\">StateGroup</span><span class=\"p\">):</span>\n    <span class=\"n\">exclude_states</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'initiated'</span><span class=\"p\">]</span>\n</pre>\n</div>\n<div id=\"state-graph\">\n<h2>State graph</h2>\n<p>You can get a graph of your states by running the <tt>graph_states</tt>\nmanagement command.</p>\n<pre>python manage.py graph_states myapp.Purchase.state\n</pre>\n<p>This requires <a href=\"http://graphviz.org\" rel=\"nofollow\">graphviz</a> and python bindings for\ngraphviz: <tt>pygraphviz</tt> and <tt>yapgvb</tt>.</p>\n</div>\n\n          </div>"}, "last_serial": 2909394, "releases": {"1.6.10": [{"comment_text": "", "digests": {"md5": "ff2a8f17404bacc59642c637b916bab9", "sha256": "866473e62ebbb0c1848adf4b1563b82a9ee75bde14c94f293807502156d37854"}, "downloads": -1, "filename": "django_states2-1.6.10-py2-none-any.whl", "has_sig": false, "md5_digest": "ff2a8f17404bacc59642c637b916bab9", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 26632, "upload_time": "2017-05-30T13:04:13", "upload_time_iso_8601": "2017-05-30T13:04:13.608027Z", "url": "https://files.pythonhosted.org/packages/08/27/0a75a4ff7afd34434664c1eba36522c594161b9f44d07784ada4725e09e4/django_states2-1.6.10-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9d7f5408f1c59ebe041c67d3d625324e", "sha256": "367127203870c90dcc613b52b7a3a7ffabec86cabb2945ff941b11ff7eae22e9"}, "downloads": -1, "filename": "django-states2-1.6.10.tar.gz", "has_sig": false, "md5_digest": "9d7f5408f1c59ebe041c67d3d625324e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19375, "upload_time": "2017-05-30T13:04:06", "upload_time_iso_8601": "2017-05-30T13:04:06.288528Z", "url": "https://files.pythonhosted.org/packages/83/87/2668af768ad68f9b9791d1c1c984d291d60da236364ebb27af13d11d0bcc/django-states2-1.6.10.tar.gz", "yanked": false}], "1.6.5": []}, "urls": [{"comment_text": "", "digests": {"md5": "ff2a8f17404bacc59642c637b916bab9", "sha256": "866473e62ebbb0c1848adf4b1563b82a9ee75bde14c94f293807502156d37854"}, "downloads": -1, "filename": "django_states2-1.6.10-py2-none-any.whl", "has_sig": false, "md5_digest": "ff2a8f17404bacc59642c637b916bab9", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 26632, "upload_time": "2017-05-30T13:04:13", "upload_time_iso_8601": "2017-05-30T13:04:13.608027Z", "url": "https://files.pythonhosted.org/packages/08/27/0a75a4ff7afd34434664c1eba36522c594161b9f44d07784ada4725e09e4/django_states2-1.6.10-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9d7f5408f1c59ebe041c67d3d625324e", "sha256": "367127203870c90dcc613b52b7a3a7ffabec86cabb2945ff941b11ff7eae22e9"}, "downloads": -1, "filename": "django-states2-1.6.10.tar.gz", "has_sig": false, "md5_digest": "9d7f5408f1c59ebe041c67d3d625324e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19375, "upload_time": "2017-05-30T13:04:06", "upload_time_iso_8601": "2017-05-30T13:04:06.288528Z", "url": "https://files.pythonhosted.org/packages/83/87/2668af768ad68f9b9791d1c1c984d291d60da236364ebb27af13d11d0bcc/django-states2-1.6.10.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:52:58 2020"}