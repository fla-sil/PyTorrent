{"info": {"author": "Nico Schl\u00f6mer", "author_email": "nico.schloemer@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Scientific/Engineering", "Topic :: Scientific/Engineering :: Mathematics"], "description": "# pacopy\n\n[![CircleCI](https://img.shields.io/circleci/project/github/nschloe/pacopy/master.svg?style=flat-square)](https://circleci.com/gh/nschloe/pacopy/tree/master)\n[![codecov](https://img.shields.io/codecov/c/github/nschloe/pacopy.svg?style=flat-square)](https://codecov.io/gh/nschloe/pacopy)\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg?style=flat-square)](https://github.com/psf/black)\n[![Documentation Status](https://readthedocs.org/projects/pacopy/badge/?version=latest)](https://pacopy.readthedocs.org/en/latest/?badge=latest)\n[![PyPI pyversions](https://img.shields.io/pypi/pyversions/pacopy.svg?style=flat-square)](https://pypi.org/pypi/pacopy/)\n[![PyPi Version](https://img.shields.io/pypi/v/pacopy.svg?style=flat-square)](https://pypi.org/project/pacopy)\n[![GitHub stars](https://img.shields.io/github/stars/nschloe/pacopy.svg?style=flat-square&logo=github&label=Stars&logoColor=white)](https://github.com/nschloe/pacopy)\n[![PyPi downloads](https://img.shields.io/pypi/dm/pacopy.svg?style=flat-square)](https://pypistats.org/packages/pacopy)\n\npacopy provides various algorithms of [numerical parameter\ncontinuation](https://en.wikipedia.org/wiki/Numerical_continuation) for PDEs in Python.\n\npacopy is backend-agnostic, so it doesn't matter if your problem is formulated with\n[SciPy](https://www.scipy.org/), [FEniCS](https://fenicsproject.org/),\n[pyfvm](https://github.com/nschloe/pyfvm), or any other Python package. The only thing\nthe user must provide is a class with some simple methods, e.g., a function evaluation\n`f(u, lmbda)`, a Jacobian a solver `jacobian_solver(u, lmbda, rhs)` etc.\n\nSome pacopy documentation is available [here](https://pacopy.readthedocs.org/en/latest/?badge=latest).\n\n\n### Examples\n\n#### Bratu\n\n<img src=\"https://nschloe.github.io/pacopy/bratu1d.png\" width=\"30%\">\n\nThe classical [Bratu\nproblem](https://en.wikipedia.org/wiki/Liouville%E2%80%93Bratu%E2%80%93Gelfand_equation)\nin 1D with Dirichlet boundary conditions. To reproduce the plot, you first have to\nspecify the problem; this is the classical finite-difference approximation:\n```python\nclass Bratu1d:\n    def __init__(self):\n        self.n = 51\n        h = 1.0 / (self.n - 1)\n\n        self.H = numpy.full(self.n, h)\n        self.H[0] = h / 2\n        self.H[-1] = h / 2\n\n        self.A = (\n            scipy.sparse.diags([-1.0, 2.0, -1.0], [-1, 0, 1], shape=(self.n, self.n))\n            / h ** 2\n        )\n\n    def inner(self, a, b):\n        \"\"\"The inner product of the problem. Can be numpy.dot(a, b), but factoring in\n        the mesh width stays true to the PDE.\n        \"\"\"\n        return numpy.dot(a, self.H * b)\n\n    def norm2_r(self, a):\n        \"\"\"The norm in the range space; used to determine if a solution has been found.\n        \"\"\"\n        return numpy.dot(a, a)\n\n    def f(self, u, lmbda):\n        \"\"\"The evaluation of the function to be solved\n        \"\"\"\n        out = self.A.dot(u) - lmbda * numpy.exp(u)\n        out[0] = u[0]\n        out[-1] = u[-1]\n        return out\n\n    def df_dlmbda(self, u, lmbda):\n        \"\"\"The function's derivative with respect to the parameter. Used in Euler-Newton\n        continuation.\n        \"\"\"\n        out = -numpy.exp(u)\n        out[0] = 0.0\n        out[-1] = 0.0\n        return out\n\n    def jacobian_solver(self, u, lmbda, rhs):\n        \"\"\"A solver for the Jacobian problem.\n        \"\"\"\n        M = self.A.copy()\n        d = M.diagonal().copy()\n        d -= lmbda * numpy.exp(u)\n        M.setdiag(d)\n        # Dirichlet conditions\n        M.data[0][self.n - 2] = 0.0\n        M.data[1][0] = 1.0\n        M.data[1][self.n - 1] = 1.0\n        M.data[2][1] = 0.0\n        return scipy.sparse.linalg.spsolve(M.tocsr(), rhs)\n```\nThen pass the object to any of pacopy's methods, e.g., the Euler-Newton (arclength)\ncontinuation:\n```python\nproblem = Bratu1d()\n# Initial guess\nu0 = numpy.zeros(problem.n)\n# Initial parameter value\nlmbda0 = 0.0\n\nlmbda_list = []\nvalues_list = []\ndef callback(k, lmbda, sol):\n    # Use the callback for plotting, writing data to files etc.\n    fig = plt.figure()\n    ax1 = fig.add_subplot(111)\n    ax1.set_xlabel(\"$\\\\lambda$\")\n    ax1.set_ylabel(\"$||u||_2$\")\n    ax1.grid()\n\n    lmbda_list.append(lmbda)\n    values_list.append(numpy.sqrt(problem.inner(sol, sol)))\n\n    ax1.plot(lmbda_list, values_list, \"-x\", color=\"#1f77f4\")\n    ax1.set_xlim(0.0, 4.0)\n    ax1.set_ylim(0.0, 6.0)\n\n# Natural parameter continuation\n# pacopy.natural(problem, u0, lmbda0, callback, max_steps=100)\n\npacopy.euler_newton(\n    problem, u0, lmbda0, callback, max_steps=500, newton_tol=1.0e-10\n)\n```\n\n\n#### Ginzburg\u2013Landau\n\n![ginzburg-landau](https://nschloe.github.io/pacopy/ginzburg-landau.gif)\n\nThe [Ginzburg-Landau\nequations](https://en.wikipedia.org/wiki/Ginzburg%E2%80%93Landau_theory) model the\nbehavior of extreme type-II superconductors under a magnetic field. The above example\n(to be found in full detail\n[here](https://github.com/nschloe/pacopy/blob/master/test/test_ginzburg_landau.py))\nshows parameter continuation in the strength of the magnetic field. The plot on the\nright-hand side shows the complex-valued solution using\n[cplot](https://github.com/nschloe/cplot).\n\n\n### Installation\n\npacopy is [available from the Python Package\nIndex](https://pypi.org/project/pacopy/), so simply type\n```\npip install -U pacopy\n```\nto install or upgrade.\n\n### Testing\n\nTo run the pacopy unit tests, check out this repository and type\n```\npytest\n```\n\n### License\n\npacopy is published under the [MIT license](https://en.wikipedia.org/wiki/MIT_License).\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/nschloe/pacopy", "keywords": "", "license": "License :: OSI Approved :: MIT License", "maintainer": "", "maintainer_email": "", "name": "pacopy", "package_url": "https://pypi.org/project/pacopy/", "platform": "", "project_url": "https://pypi.org/project/pacopy/", "project_urls": {"Homepage": "https://github.com/nschloe/pacopy"}, "release_url": "https://pypi.org/project/pacopy/0.1.2/", "requires_dist": null, "requires_python": ">=3.6", "summary": "Numerical continuation in Python", "version": "0.1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>pacopy</h1>\n<p><a href=\"https://circleci.com/gh/nschloe/pacopy/tree/master\" rel=\"nofollow\"><img alt=\"CircleCI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1379345a6b9106d98d237d24e197eaa79781efd8/68747470733a2f2f696d672e736869656c64732e696f2f636972636c6563692f70726f6a6563742f6769746875622f6e7363686c6f652f7061636f70792f6d61737465722e7376673f7374796c653d666c61742d737175617265\"></a>\n<a href=\"https://codecov.io/gh/nschloe/pacopy\" rel=\"nofollow\"><img alt=\"codecov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/653267bf356ff7d450f71cb54c72c722eb645bbe/68747470733a2f2f696d672e736869656c64732e696f2f636f6465636f762f632f6769746875622f6e7363686c6f652f7061636f70792e7376673f7374796c653d666c61742d737175617265\"></a>\n<a href=\"https://github.com/psf/black\" rel=\"nofollow\"><img alt=\"Code style: black\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1c326c58e924b9f3508f32a8ac6b3ee91f40b090/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64652532307374796c652d626c61636b2d3030303030302e7376673f7374796c653d666c61742d737175617265\"></a>\n<a href=\"https://pacopy.readthedocs.org/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f5d144995239335654ba090f667ce5cc30c65116/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f7061636f70792f62616467652f3f76657273696f6e3d6c6174657374\"></a>\n<a href=\"https://pypi.org/pypi/pacopy/\" rel=\"nofollow\"><img alt=\"PyPI pyversions\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f18aad106312fc602e8b2c73d450e5d6f958fd5c/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f7061636f70792e7376673f7374796c653d666c61742d737175617265\"></a>\n<a href=\"https://pypi.org/project/pacopy\" rel=\"nofollow\"><img alt=\"PyPi Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/495e0ab4e4f394154ad667e7e2d412e2e4295055/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f7061636f70792e7376673f7374796c653d666c61742d737175617265\"></a>\n<a href=\"https://github.com/nschloe/pacopy\" rel=\"nofollow\"><img alt=\"GitHub stars\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f20134d2f69aace0ee252cf6baa9341786026d93/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f73746172732f6e7363686c6f652f7061636f70792e7376673f7374796c653d666c61742d737175617265266c6f676f3d676974687562266c6162656c3d5374617273266c6f676f436f6c6f723d7768697465\"></a>\n<a href=\"https://pypistats.org/packages/pacopy\" rel=\"nofollow\"><img alt=\"PyPi downloads\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0ee3a84ce0a80420477315632cc6db37d78f5a4f/68747470733a2f2f696d672e736869656c64732e696f2f707970692f646d2f7061636f70792e7376673f7374796c653d666c61742d737175617265\"></a></p>\n<p>pacopy provides various algorithms of <a href=\"https://en.wikipedia.org/wiki/Numerical_continuation\" rel=\"nofollow\">numerical parameter\ncontinuation</a> for PDEs in Python.</p>\n<p>pacopy is backend-agnostic, so it doesn't matter if your problem is formulated with\n<a href=\"https://www.scipy.org/\" rel=\"nofollow\">SciPy</a>, <a href=\"https://fenicsproject.org/\" rel=\"nofollow\">FEniCS</a>,\n<a href=\"https://github.com/nschloe/pyfvm\" rel=\"nofollow\">pyfvm</a>, or any other Python package. The only thing\nthe user must provide is a class with some simple methods, e.g., a function evaluation\n<code>f(u, lmbda)</code>, a Jacobian a solver <code>jacobian_solver(u, lmbda, rhs)</code> etc.</p>\n<p>Some pacopy documentation is available <a href=\"https://pacopy.readthedocs.org/en/latest/?badge=latest\" rel=\"nofollow\">here</a>.</p>\n<h3>Examples</h3>\n<h4>Bratu</h4>\n<img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/06a823224167a4483119562cef34bd0b5d204e8a/68747470733a2f2f6e7363686c6f652e6769746875622e696f2f7061636f70792f627261747531642e706e67\" width=\"30%\">\n<p>The classical <a href=\"https://en.wikipedia.org/wiki/Liouville%E2%80%93Bratu%E2%80%93Gelfand_equation\" rel=\"nofollow\">Bratu\nproblem</a>\nin 1D with Dirichlet boundary conditions. To reproduce the plot, you first have to\nspecify the problem; this is the classical finite-difference approximation:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">Bratu1d</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"mi\">51</span>\n        <span class=\"n\">h</span> <span class=\"o\">=</span> <span class=\"mf\">1.0</span> <span class=\"o\">/</span> <span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">n</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">H</span> <span class=\"o\">=</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">full</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">h</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">H</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">h</span> <span class=\"o\">/</span> <span class=\"mi\">2</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">H</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">h</span> <span class=\"o\">/</span> <span class=\"mi\">2</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">A</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n            <span class=\"n\">scipy</span><span class=\"o\">.</span><span class=\"n\">sparse</span><span class=\"o\">.</span><span class=\"n\">diags</span><span class=\"p\">([</span><span class=\"o\">-</span><span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"mf\">2.0</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">1.0</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">shape</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">n</span><span class=\"p\">))</span>\n            <span class=\"o\">/</span> <span class=\"n\">h</span> <span class=\"o\">**</span> <span class=\"mi\">2</span>\n        <span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">inner</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"The inner product of the problem. Can be numpy.dot(a, b), but factoring in</span>\n<span class=\"sd\">        the mesh width stays true to the PDE.</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"k\">return</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dot</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">H</span> <span class=\"o\">*</span> <span class=\"n\">b</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">norm2_r</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"The norm in the range space; used to determine if a solution has been found.</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"k\">return</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dot</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">f</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">u</span><span class=\"p\">,</span> <span class=\"n\">lmbda</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"The evaluation of the function to be solved</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"n\">out</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">A</span><span class=\"o\">.</span><span class=\"n\">dot</span><span class=\"p\">(</span><span class=\"n\">u</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"n\">lmbda</span> <span class=\"o\">*</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">exp</span><span class=\"p\">(</span><span class=\"n\">u</span><span class=\"p\">)</span>\n        <span class=\"n\">out</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">u</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"n\">out</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">u</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n        <span class=\"k\">return</span> <span class=\"n\">out</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">df_dlmbda</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">u</span><span class=\"p\">,</span> <span class=\"n\">lmbda</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"The function's derivative with respect to the parameter. Used in Euler-Newton</span>\n<span class=\"sd\">        continuation.</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"n\">out</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">exp</span><span class=\"p\">(</span><span class=\"n\">u</span><span class=\"p\">)</span>\n        <span class=\"n\">out</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>\n        <span class=\"n\">out</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>\n        <span class=\"k\">return</span> <span class=\"n\">out</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">jacobian_solver</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">u</span><span class=\"p\">,</span> <span class=\"n\">lmbda</span><span class=\"p\">,</span> <span class=\"n\">rhs</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"A solver for the Jacobian problem.</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"n\">M</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">A</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()</span>\n        <span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"n\">M</span><span class=\"o\">.</span><span class=\"n\">diagonal</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()</span>\n        <span class=\"n\">d</span> <span class=\"o\">-=</span> <span class=\"n\">lmbda</span> <span class=\"o\">*</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">exp</span><span class=\"p\">(</span><span class=\"n\">u</span><span class=\"p\">)</span>\n        <span class=\"n\">M</span><span class=\"o\">.</span><span class=\"n\">setdiag</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">)</span>\n        <span class=\"c1\"># Dirichlet conditions</span>\n        <span class=\"n\">M</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">n</span> <span class=\"o\">-</span> <span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>\n        <span class=\"n\">M</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mf\">1.0</span>\n        <span class=\"n\">M</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">n</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mf\">1.0</span>\n        <span class=\"n\">M</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>\n        <span class=\"k\">return</span> <span class=\"n\">scipy</span><span class=\"o\">.</span><span class=\"n\">sparse</span><span class=\"o\">.</span><span class=\"n\">linalg</span><span class=\"o\">.</span><span class=\"n\">spsolve</span><span class=\"p\">(</span><span class=\"n\">M</span><span class=\"o\">.</span><span class=\"n\">tocsr</span><span class=\"p\">(),</span> <span class=\"n\">rhs</span><span class=\"p\">)</span>\n</pre>\n<p>Then pass the object to any of pacopy's methods, e.g., the Euler-Newton (arclength)\ncontinuation:</p>\n<pre><span class=\"n\">problem</span> <span class=\"o\">=</span> <span class=\"n\">Bratu1d</span><span class=\"p\">()</span>\n<span class=\"c1\"># Initial guess</span>\n<span class=\"n\">u0</span> <span class=\"o\">=</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">zeros</span><span class=\"p\">(</span><span class=\"n\">problem</span><span class=\"o\">.</span><span class=\"n\">n</span><span class=\"p\">)</span>\n<span class=\"c1\"># Initial parameter value</span>\n<span class=\"n\">lmbda0</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>\n\n<span class=\"n\">lmbda_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"n\">values_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"k\">def</span> <span class=\"nf\">callback</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">lmbda</span><span class=\"p\">,</span> <span class=\"n\">sol</span><span class=\"p\">):</span>\n    <span class=\"c1\"># Use the callback for plotting, writing data to files etc.</span>\n    <span class=\"n\">fig</span> <span class=\"o\">=</span> <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">figure</span><span class=\"p\">()</span>\n    <span class=\"n\">ax1</span> <span class=\"o\">=</span> <span class=\"n\">fig</span><span class=\"o\">.</span><span class=\"n\">add_subplot</span><span class=\"p\">(</span><span class=\"mi\">111</span><span class=\"p\">)</span>\n    <span class=\"n\">ax1</span><span class=\"o\">.</span><span class=\"n\">set_xlabel</span><span class=\"p\">(</span><span class=\"s2\">\"$</span><span class=\"se\">\\\\</span><span class=\"s2\">lambda$\"</span><span class=\"p\">)</span>\n    <span class=\"n\">ax1</span><span class=\"o\">.</span><span class=\"n\">set_ylabel</span><span class=\"p\">(</span><span class=\"s2\">\"$||u||_2$\"</span><span class=\"p\">)</span>\n    <span class=\"n\">ax1</span><span class=\"o\">.</span><span class=\"n\">grid</span><span class=\"p\">()</span>\n\n    <span class=\"n\">lmbda_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">lmbda</span><span class=\"p\">)</span>\n    <span class=\"n\">values_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">sqrt</span><span class=\"p\">(</span><span class=\"n\">problem</span><span class=\"o\">.</span><span class=\"n\">inner</span><span class=\"p\">(</span><span class=\"n\">sol</span><span class=\"p\">,</span> <span class=\"n\">sol</span><span class=\"p\">)))</span>\n\n    <span class=\"n\">ax1</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">lmbda_list</span><span class=\"p\">,</span> <span class=\"n\">values_list</span><span class=\"p\">,</span> <span class=\"s2\">\"-x\"</span><span class=\"p\">,</span> <span class=\"n\">color</span><span class=\"o\">=</span><span class=\"s2\">\"#1f77f4\"</span><span class=\"p\">)</span>\n    <span class=\"n\">ax1</span><span class=\"o\">.</span><span class=\"n\">set_xlim</span><span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mf\">4.0</span><span class=\"p\">)</span>\n    <span class=\"n\">ax1</span><span class=\"o\">.</span><span class=\"n\">set_ylim</span><span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mf\">6.0</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Natural parameter continuation</span>\n<span class=\"c1\"># pacopy.natural(problem, u0, lmbda0, callback, max_steps=100)</span>\n\n<span class=\"n\">pacopy</span><span class=\"o\">.</span><span class=\"n\">euler_newton</span><span class=\"p\">(</span>\n    <span class=\"n\">problem</span><span class=\"p\">,</span> <span class=\"n\">u0</span><span class=\"p\">,</span> <span class=\"n\">lmbda0</span><span class=\"p\">,</span> <span class=\"n\">callback</span><span class=\"p\">,</span> <span class=\"n\">max_steps</span><span class=\"o\">=</span><span class=\"mi\">500</span><span class=\"p\">,</span> <span class=\"n\">newton_tol</span><span class=\"o\">=</span><span class=\"mf\">1.0e-10</span>\n<span class=\"p\">)</span>\n</pre>\n<h4>Ginzburg\u2013Landau</h4>\n<p><img alt=\"ginzburg-landau\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0f31cfdb602ceaf918809cb372d28174447b77f8/68747470733a2f2f6e7363686c6f652e6769746875622e696f2f7061636f70792f67696e7a627572672d6c616e6461752e676966\"></p>\n<p>The <a href=\"https://en.wikipedia.org/wiki/Ginzburg%E2%80%93Landau_theory\" rel=\"nofollow\">Ginzburg-Landau\nequations</a> model the\nbehavior of extreme type-II superconductors under a magnetic field. The above example\n(to be found in full detail\n<a href=\"https://github.com/nschloe/pacopy/blob/master/test/test_ginzburg_landau.py\" rel=\"nofollow\">here</a>)\nshows parameter continuation in the strength of the magnetic field. The plot on the\nright-hand side shows the complex-valued solution using\n<a href=\"https://github.com/nschloe/cplot\" rel=\"nofollow\">cplot</a>.</p>\n<h3>Installation</h3>\n<p>pacopy is <a href=\"https://pypi.org/project/pacopy/\" rel=\"nofollow\">available from the Python Package\nIndex</a>, so simply type</p>\n<pre><code>pip install -U pacopy\n</code></pre>\n<p>to install or upgrade.</p>\n<h3>Testing</h3>\n<p>To run the pacopy unit tests, check out this repository and type</p>\n<pre><code>pytest\n</code></pre>\n<h3>License</h3>\n<p>pacopy is published under the <a href=\"https://en.wikipedia.org/wiki/MIT_License\" rel=\"nofollow\">MIT license</a>.</p>\n\n          </div>"}, "last_serial": 6688347, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "69beaa5e6c1c434b5cae9c65851ac5b6", "sha256": "62e77091515dd6167a577cf2464c9f9178d1a86bafe6eb13fec9ad27a2e671a0"}, "downloads": -1, "filename": "pacopy-0.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "69beaa5e6c1c434b5cae9c65851ac5b6", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 8442, "upload_time": "2018-09-17T20:07:42", "upload_time_iso_8601": "2018-09-17T20:07:42.222476Z", "url": "https://files.pythonhosted.org/packages/62/c0/b254078d6343ca3901f39841fa74084a5479b7be0a8b09a5f026719a5401/pacopy-0.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c5880903899ccef63a07b6be94e1fe60", "sha256": "fc4c018b5acf919cd005b89e08649a6b07e030fbc48e565c5086f83c7ac9f931"}, "downloads": -1, "filename": "pacopy-0.1.0.tar.gz", "has_sig": false, "md5_digest": "c5880903899ccef63a07b6be94e1fe60", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17793, "upload_time": "2018-09-17T20:07:43", "upload_time_iso_8601": "2018-09-17T20:07:43.831242Z", "url": "https://files.pythonhosted.org/packages/55/84/6947e2795404c1dfda1b23c0f922083c190421ae652981237e96afacf21d/pacopy-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "e4a6c4705f552df77e3aa52775729bb1", "sha256": "c86f156abb942181bd8e2c11ac7d273ce4f5a88b240eee5ae4bd2450f2e71a7b"}, "downloads": -1, "filename": "pacopy-0.1.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "e4a6c4705f552df77e3aa52775729bb1", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 10027, "upload_time": "2019-07-16T20:42:01", "upload_time_iso_8601": "2019-07-16T20:42:01.421283Z", "url": "https://files.pythonhosted.org/packages/87/ed/4531b44c94098c74d2c381b9ee09e9f37b0d28e282b1d4107ed4b49373d2/pacopy-0.1.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f1bed1b7a8d318f3861c7da26156c5a1", "sha256": "04cf6acdbbe138ae685ea860265dd347818aa6199127e729871821b762876d8e"}, "downloads": -1, "filename": "pacopy-0.1.1.tar.gz", "has_sig": false, "md5_digest": "f1bed1b7a8d318f3861c7da26156c5a1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18540, "upload_time": "2019-07-16T20:42:02", "upload_time_iso_8601": "2019-07-16T20:42:02.901446Z", "url": "https://files.pythonhosted.org/packages/71/0e/30d9f603709661c6ebe041d2a20b9f8f02bee0aaa31e977b08b5ac6d19ea/pacopy-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "b8cac6d52c89fb62a70b62b90ee58b73", "sha256": "ceb7782d4cc586bef12ca622a7701d64f0ecf270b1986f7499cd567c97adcee9"}, "downloads": -1, "filename": "pacopy-0.1.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "b8cac6d52c89fb62a70b62b90ee58b73", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6", "size": 11616, "upload_time": "2020-02-24T12:25:49", "upload_time_iso_8601": "2020-02-24T12:25:49.378963Z", "url": "https://files.pythonhosted.org/packages/04/00/09a5736db48ef828078fa509c54b958f7e1a5f455046ec3f22a826facf64/pacopy-0.1.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bf33baa519ed08e936509efec0f4211a", "sha256": "04800ee5c809db36d4133750fffc63d2df43b1a14894a4aa1fe98e42b93ec3f7"}, "downloads": -1, "filename": "pacopy-0.1.2.tar.gz", "has_sig": false, "md5_digest": "bf33baa519ed08e936509efec0f4211a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 23232, "upload_time": "2020-02-24T12:25:50", "upload_time_iso_8601": "2020-02-24T12:25:50.664344Z", "url": "https://files.pythonhosted.org/packages/68/fc/4cfdb108dacd5534b5f552dc4d4bee1c0d39aa12e76e5ca67c521aa0e54a/pacopy-0.1.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b8cac6d52c89fb62a70b62b90ee58b73", "sha256": "ceb7782d4cc586bef12ca622a7701d64f0ecf270b1986f7499cd567c97adcee9"}, "downloads": -1, "filename": "pacopy-0.1.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "b8cac6d52c89fb62a70b62b90ee58b73", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6", "size": 11616, "upload_time": "2020-02-24T12:25:49", "upload_time_iso_8601": "2020-02-24T12:25:49.378963Z", "url": "https://files.pythonhosted.org/packages/04/00/09a5736db48ef828078fa509c54b958f7e1a5f455046ec3f22a826facf64/pacopy-0.1.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bf33baa519ed08e936509efec0f4211a", "sha256": "04800ee5c809db36d4133750fffc63d2df43b1a14894a4aa1fe98e42b93ec3f7"}, "downloads": -1, "filename": "pacopy-0.1.2.tar.gz", "has_sig": false, "md5_digest": "bf33baa519ed08e936509efec0f4211a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 23232, "upload_time": "2020-02-24T12:25:50", "upload_time_iso_8601": "2020-02-24T12:25:50.664344Z", "url": "https://files.pythonhosted.org/packages/68/fc/4cfdb108dacd5534b5f552dc4d4bee1c0d39aa12e76e5ca67c521aa0e54a/pacopy-0.1.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:00:03 2020"}