{"info": {"author": "Rick van Rein (for the ARPA2 Quick DER project)", "author_email": "rick@openfortress.nl", "bugtrack_url": null, "classifiers": [], "description": "# Embedding Quick DER into Python\n\n<img alt=\"Quick DER logo\" src=\"quick-der-logo.png\" style=\"float: right;\"/>\n\n> *This description explains how Quick DER is mapped into Python.\n> The design is made to facilitate similar structural traversals in\n> Python as in C, albeit through a different mechanism.  Much like\n> the C headers, the structures are generated and placed into modules\n> that are delivered along with Quick DER for Python.*\n\n\n## General Description\n\nThe implementation of Quick DER in Python centers around classes that\nencapsulate the logic of various ASN.1 objects.  Constructed types such\nas `CHOICE`, `SEQUENCE` and `SET` have named fields, which map to attributes\nthat can be addressed directly by adding `.fielfname` to the instance.\n\nAlthough in C we need to explicitly traverse `SEQUENCE OF` and `SET OF`\non account of their variable-sized structures, this has been encapsulated\ninto the Python API, and such structures show up as either a list or a\nset that can be manipulated as is normal under Python.\n\nASN.1 objects typed by `ANY` are left as they are, and provided as a\n(binary) Python string, holding the header and contents.  You can use\nit in any way you like, but if you know the class, you can instantiate\nit as though you received the data over a protocol.\n\nIt is possible to create custom classes, by setting up the right internal\nvariables in a subclass or instance of `ASN1Object`, but this is not for\nthe faint of heart; there are ways of crashing the program in the current\nsystem.  The same risk does not occur with generated include files.  So,\nthe best way to create handlers for custom structures is by mapping a\ncustom ASN.1 specification through the `asn2quickder` compiler.\n\nBuilding DER is the reverse process, and it can follow the same process.\n\n\n## Using the Generated Classes\n\nThe package for Quick DER is `quick_der`.  It provides a function\n`der_unpack()` which expects a class (that must be a subclass of `ASN1Object`)\nand a Python string holding the byte sequence to decode.  It will return\nan instance of the given class, with all the pleasantries of using it.\n\nGiven such an instance, entries in it can be manipulated as expected.  It\nshould be noted that the data in each output of `der_unpack()` is shared,\nmeaning that you could traverse to an object within the parsed structure,\nchange it, and then repack the overall structure, to find the changes made\nin the embedded object.  If this is not what you need, you should `clone()`\nthe respective object.\n\nAny `ASN1Object` may be turned into DER bytes through its `_der_pack()`\nmethod (not an ASN.1 name) or the packages `der_pack()` function.  This\nuses the information stored in the object to find the format for packing.\nIn general, using Quick DER under Python means that you are using classes,\nnot packer descriptions such as in C.  It marks the differences between\nthe languages.\n\nIn case you are wondering why the package `quick_der` explicitly mentions\nDER again in `der_pack()` and `der_unpack()` functions: we can see ways\nof expanding this approach with encodings for BER, XER, one of the JER\nencodings, PER, CER and so on.  This might work through multiple inheritance\nof the objects, that could incorporate a possible future Quick XER module,\nand so on.  Factories may do this appropriately for your platform.  One day,\nwho knows!\n\n\n## Example Code\n\nKerberos is completely defined in terms of ASN.1, so it serves as a good\nexample.  Instead of the binary transmission format that defies manipulation\nand perhaps even reading of parts, we can turn it into a Python object, work\non it and generate the binary transmission format when the need arises.\n\nThe `asn2quickder` compiler produces Python packages for many specifications,\nready to be loaded as modules.  For example, a Kerberos Ticket is defined\nby the name `Ticket` in RFC 4120, so it can be reached under\n`quickder.rfc.rfc4120.Ticket` and used just like a custom class that would\nimplement a Kerberos Ticket:\n\n    from quickder.rfc.rfc4120 import Ticket\n\n    def show_ticket (der):\n            \"\"\"Access individual parts of the Ticket, and print them.\n               Then compose the owner's name from its constituent parts.\n            \"\"\"\n            tkt = Ticket (der)\n            print 'Ticket for Realm', tkt.realm\n            print '       has name-type', tkt.sname.name_type\n            for nm in tkt.sname.name_string:\n                    print '       has name-string component', nm\n            owner = '/'.join (tkt.sname.name_string) + '@' + tkt.realm\n            print 'In short, it is for', owner\n\n    def rebase_ticket (der, newrealm):\n            \"\"\"This violates RFC 4120, but is still a nice demo of modifying\n               DER data in Python.  The violation is caused by the mismatch\n               of the realm with the encrypted copy in tkt.enc_part\n            \"\"\"\n            tkt = Ticket (der)\n            tkt.realm = newrealm\n            return tkt._der_pack ()\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://gitlab.com/arpa2/quick-der", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "arpa2.quickder", "package_url": "https://pypi.org/project/arpa2.quickder/", "platform": "", "project_url": "https://pypi.org/project/arpa2.quickder/", "project_urls": {"Homepage": "https://gitlab.com/arpa2/quick-der"}, "release_url": "https://pypi.org/project/arpa2.quickder/1.4.0/", "requires_dist": ["asn1ate (>=0.6.0)", "colored", "six", "arpa2.quickder-tools ; extra == 'tools'"], "requires_python": "", "summary": "Quick DER -- Abstract Base Classes for generated ASN.1 handlers", "version": "1.4.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Embedding Quick DER into Python</h1>\n<img alt=\"Quick DER logo\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/650ddfc664d076cd4ab6587b78bcd2dd36286a20/717569636b2d6465722d6c6f676f2e706e67\">\n<blockquote>\n<p><em>This description explains how Quick DER is mapped into Python.\nThe design is made to facilitate similar structural traversals in\nPython as in C, albeit through a different mechanism.  Much like\nthe C headers, the structures are generated and placed into modules\nthat are delivered along with Quick DER for Python.</em></p>\n</blockquote>\n<h2>General Description</h2>\n<p>The implementation of Quick DER in Python centers around classes that\nencapsulate the logic of various ASN.1 objects.  Constructed types such\nas <code>CHOICE</code>, <code>SEQUENCE</code> and <code>SET</code> have named fields, which map to attributes\nthat can be addressed directly by adding <code>.fielfname</code> to the instance.</p>\n<p>Although in C we need to explicitly traverse <code>SEQUENCE OF</code> and <code>SET OF</code>\non account of their variable-sized structures, this has been encapsulated\ninto the Python API, and such structures show up as either a list or a\nset that can be manipulated as is normal under Python.</p>\n<p>ASN.1 objects typed by <code>ANY</code> are left as they are, and provided as a\n(binary) Python string, holding the header and contents.  You can use\nit in any way you like, but if you know the class, you can instantiate\nit as though you received the data over a protocol.</p>\n<p>It is possible to create custom classes, by setting up the right internal\nvariables in a subclass or instance of <code>ASN1Object</code>, but this is not for\nthe faint of heart; there are ways of crashing the program in the current\nsystem.  The same risk does not occur with generated include files.  So,\nthe best way to create handlers for custom structures is by mapping a\ncustom ASN.1 specification through the <code>asn2quickder</code> compiler.</p>\n<p>Building DER is the reverse process, and it can follow the same process.</p>\n<h2>Using the Generated Classes</h2>\n<p>The package for Quick DER is <code>quick_der</code>.  It provides a function\n<code>der_unpack()</code> which expects a class (that must be a subclass of <code>ASN1Object</code>)\nand a Python string holding the byte sequence to decode.  It will return\nan instance of the given class, with all the pleasantries of using it.</p>\n<p>Given such an instance, entries in it can be manipulated as expected.  It\nshould be noted that the data in each output of <code>der_unpack()</code> is shared,\nmeaning that you could traverse to an object within the parsed structure,\nchange it, and then repack the overall structure, to find the changes made\nin the embedded object.  If this is not what you need, you should <code>clone()</code>\nthe respective object.</p>\n<p>Any <code>ASN1Object</code> may be turned into DER bytes through its <code>_der_pack()</code>\nmethod (not an ASN.1 name) or the packages <code>der_pack()</code> function.  This\nuses the information stored in the object to find the format for packing.\nIn general, using Quick DER under Python means that you are using classes,\nnot packer descriptions such as in C.  It marks the differences between\nthe languages.</p>\n<p>In case you are wondering why the package <code>quick_der</code> explicitly mentions\nDER again in <code>der_pack()</code> and <code>der_unpack()</code> functions: we can see ways\nof expanding this approach with encodings for BER, XER, one of the JER\nencodings, PER, CER and so on.  This might work through multiple inheritance\nof the objects, that could incorporate a possible future Quick XER module,\nand so on.  Factories may do this appropriately for your platform.  One day,\nwho knows!</p>\n<h2>Example Code</h2>\n<p>Kerberos is completely defined in terms of ASN.1, so it serves as a good\nexample.  Instead of the binary transmission format that defies manipulation\nand perhaps even reading of parts, we can turn it into a Python object, work\non it and generate the binary transmission format when the need arises.</p>\n<p>The <code>asn2quickder</code> compiler produces Python packages for many specifications,\nready to be loaded as modules.  For example, a Kerberos Ticket is defined\nby the name <code>Ticket</code> in RFC 4120, so it can be reached under\n<code>quickder.rfc.rfc4120.Ticket</code> and used just like a custom class that would\nimplement a Kerberos Ticket:</p>\n<pre><code>from quickder.rfc.rfc4120 import Ticket\n\ndef show_ticket (der):\n        \"\"\"Access individual parts of the Ticket, and print them.\n           Then compose the owner's name from its constituent parts.\n        \"\"\"\n        tkt = Ticket (der)\n        print 'Ticket for Realm', tkt.realm\n        print '       has name-type', tkt.sname.name_type\n        for nm in tkt.sname.name_string:\n                print '       has name-string component', nm\n        owner = '/'.join (tkt.sname.name_string) + '@' + tkt.realm\n        print 'In short, it is for', owner\n\ndef rebase_ticket (der, newrealm):\n        \"\"\"This violates RFC 4120, but is still a nice demo of modifying\n           DER data in Python.  The violation is caused by the mismatch\n           of the realm with the encrypted copy in tkt.enc_part\n        \"\"\"\n        tkt = Ticket (der)\n        tkt.realm = newrealm\n        return tkt._der_pack ()\n</code></pre>\n\n          </div>"}, "last_serial": 6747320, "releases": {"1.4.0": [{"comment_text": "", "digests": {"md5": "27a9ffa207da1d65c6639f78b1351caf", "sha256": "dfadcb585f6e87a7d8e846319492605e51b55b4ab8dbf05980a91d6e32069c6a"}, "downloads": -1, "filename": "arpa2.quickder-1.4.0-cp36-cp36m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "27a9ffa207da1d65c6639f78b1351caf", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 45224, "upload_time": "2020-03-04T11:48:38", "upload_time_iso_8601": "2020-03-04T11:48:38.529467Z", "url": "https://files.pythonhosted.org/packages/e8/51/fce24943cd5259e195b0089a8f968e025eb30dfb4244aeb720a5f8f71799/arpa2.quickder-1.4.0-cp36-cp36m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a4e2e1f6ffa3e8d3a13beb9004b9c383", "sha256": "4cdfa58c7b267f6deb6f68511530a1f6860816e66d2ca5ea20580b463d94ffb7"}, "downloads": -1, "filename": "arpa2.quickder-1.4.0-cp36-cp36m-manylinux2010_x86_64.whl", "has_sig": false, "md5_digest": "a4e2e1f6ffa3e8d3a13beb9004b9c383", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 45224, "upload_time": "2020-03-04T11:48:39", "upload_time_iso_8601": "2020-03-04T11:48:39.915094Z", "url": "https://files.pythonhosted.org/packages/09/3f/0608f4d6310a83b68893d136350f1f15170718cd455c52a71e0f09a721e8/arpa2.quickder-1.4.0-cp36-cp36m-manylinux2010_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d5c2859bd8445bfde39fc4c01ba870df", "sha256": "68267609eafd3565f09e75a8122ca2c27d2c7c576061b611229d8acb961f506e"}, "downloads": -1, "filename": "arpa2.quickder-1.4.0-cp37-cp37m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "d5c2859bd8445bfde39fc4c01ba870df", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": null, "size": 46105, "upload_time": "2020-03-04T11:29:38", "upload_time_iso_8601": "2020-03-04T11:29:38.951807Z", "url": "https://files.pythonhosted.org/packages/8c/cd/0968ae5b1e061a1e311bd6725f0b5cc03fd667148afecc04d5626476a1f8/arpa2.quickder-1.4.0-cp37-cp37m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "085cf7902ee00b9887da7f9caa8142bc", "sha256": "83715492b88881b21e22b04288e63583d0be4c310d459d3e0ef878a260232750"}, "downloads": -1, "filename": "arpa2.quickder-1.4.0-cp37-cp37m-manylinux2010_x86_64.whl", "has_sig": false, "md5_digest": "085cf7902ee00b9887da7f9caa8142bc", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": null, "size": 46107, "upload_time": "2020-03-04T11:29:41", "upload_time_iso_8601": "2020-03-04T11:29:41.512700Z", "url": "https://files.pythonhosted.org/packages/44/c7/151787ac3c221643fcab0e31d450be1c929d76deb83571ba641a17350f40/arpa2.quickder-1.4.0-cp37-cp37m-manylinux2010_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e641ec3e4fe1a58eed946532cc86a4c0", "sha256": "fdcd594e02b0bb9e053152afbc1fceed9a22bcf4dc2afbe8db1da01829cea778"}, "downloads": -1, "filename": "arpa2.quickder-1.4.0-cp38-cp38-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "e641ec3e4fe1a58eed946532cc86a4c0", "packagetype": "bdist_wheel", "python_version": "cp38", "requires_python": null, "size": 45332, "upload_time": "2020-03-04T11:45:01", "upload_time_iso_8601": "2020-03-04T11:45:01.182505Z", "url": "https://files.pythonhosted.org/packages/36/b9/5b78537cf88163adab9489716c2bcc4421bf739964a8e4b9e9a701550a76/arpa2.quickder-1.4.0-cp38-cp38-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d94cabf1c7e9a5843ed8d1f9946cd6d1", "sha256": "5e62b1ff584ebf467621fb7f0334305c18cf4a59722490cc842f9bbcd6a7ef8c"}, "downloads": -1, "filename": "arpa2.quickder-1.4.0-cp38-cp38-manylinux2010_x86_64.whl", "has_sig": false, "md5_digest": "d94cabf1c7e9a5843ed8d1f9946cd6d1", "packagetype": "bdist_wheel", "python_version": "cp38", "requires_python": null, "size": 45336, "upload_time": "2020-03-04T11:45:02", "upload_time_iso_8601": "2020-03-04T11:45:02.342685Z", "url": "https://files.pythonhosted.org/packages/0e/d0/76427f3dceb418706cf21a674360c5f7d93d51eb6a5ff13072c6f96252d1/arpa2.quickder-1.4.0-cp38-cp38-manylinux2010_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "abab31b3f2f749806cf29a362a3d2796", "sha256": "79ce2d2ea693909087f803e8b61de73f6e128f309b4a564e7c7e016340e55227"}, "downloads": -1, "filename": "arpa2.quickder-1.4.0.tar.gz", "has_sig": false, "md5_digest": "abab31b3f2f749806cf29a362a3d2796", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15118, "upload_time": "2020-03-04T11:29:49", "upload_time_iso_8601": "2020-03-04T11:29:49.985197Z", "url": "https://files.pythonhosted.org/packages/84/6e/d941724923db1413ad0687e78c73864d975a8393444e68ddc51d5d72945d/arpa2.quickder-1.4.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "27a9ffa207da1d65c6639f78b1351caf", "sha256": "dfadcb585f6e87a7d8e846319492605e51b55b4ab8dbf05980a91d6e32069c6a"}, "downloads": -1, "filename": "arpa2.quickder-1.4.0-cp36-cp36m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "27a9ffa207da1d65c6639f78b1351caf", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 45224, "upload_time": "2020-03-04T11:48:38", "upload_time_iso_8601": "2020-03-04T11:48:38.529467Z", "url": "https://files.pythonhosted.org/packages/e8/51/fce24943cd5259e195b0089a8f968e025eb30dfb4244aeb720a5f8f71799/arpa2.quickder-1.4.0-cp36-cp36m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a4e2e1f6ffa3e8d3a13beb9004b9c383", "sha256": "4cdfa58c7b267f6deb6f68511530a1f6860816e66d2ca5ea20580b463d94ffb7"}, "downloads": -1, "filename": "arpa2.quickder-1.4.0-cp36-cp36m-manylinux2010_x86_64.whl", "has_sig": false, "md5_digest": "a4e2e1f6ffa3e8d3a13beb9004b9c383", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 45224, "upload_time": "2020-03-04T11:48:39", "upload_time_iso_8601": "2020-03-04T11:48:39.915094Z", "url": "https://files.pythonhosted.org/packages/09/3f/0608f4d6310a83b68893d136350f1f15170718cd455c52a71e0f09a721e8/arpa2.quickder-1.4.0-cp36-cp36m-manylinux2010_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d5c2859bd8445bfde39fc4c01ba870df", "sha256": "68267609eafd3565f09e75a8122ca2c27d2c7c576061b611229d8acb961f506e"}, "downloads": -1, "filename": "arpa2.quickder-1.4.0-cp37-cp37m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "d5c2859bd8445bfde39fc4c01ba870df", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": null, "size": 46105, "upload_time": "2020-03-04T11:29:38", "upload_time_iso_8601": "2020-03-04T11:29:38.951807Z", "url": "https://files.pythonhosted.org/packages/8c/cd/0968ae5b1e061a1e311bd6725f0b5cc03fd667148afecc04d5626476a1f8/arpa2.quickder-1.4.0-cp37-cp37m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "085cf7902ee00b9887da7f9caa8142bc", "sha256": "83715492b88881b21e22b04288e63583d0be4c310d459d3e0ef878a260232750"}, "downloads": -1, "filename": "arpa2.quickder-1.4.0-cp37-cp37m-manylinux2010_x86_64.whl", "has_sig": false, "md5_digest": "085cf7902ee00b9887da7f9caa8142bc", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": null, "size": 46107, "upload_time": "2020-03-04T11:29:41", "upload_time_iso_8601": "2020-03-04T11:29:41.512700Z", "url": "https://files.pythonhosted.org/packages/44/c7/151787ac3c221643fcab0e31d450be1c929d76deb83571ba641a17350f40/arpa2.quickder-1.4.0-cp37-cp37m-manylinux2010_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e641ec3e4fe1a58eed946532cc86a4c0", "sha256": "fdcd594e02b0bb9e053152afbc1fceed9a22bcf4dc2afbe8db1da01829cea778"}, "downloads": -1, "filename": "arpa2.quickder-1.4.0-cp38-cp38-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "e641ec3e4fe1a58eed946532cc86a4c0", "packagetype": "bdist_wheel", "python_version": "cp38", "requires_python": null, "size": 45332, "upload_time": "2020-03-04T11:45:01", "upload_time_iso_8601": "2020-03-04T11:45:01.182505Z", "url": "https://files.pythonhosted.org/packages/36/b9/5b78537cf88163adab9489716c2bcc4421bf739964a8e4b9e9a701550a76/arpa2.quickder-1.4.0-cp38-cp38-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d94cabf1c7e9a5843ed8d1f9946cd6d1", "sha256": "5e62b1ff584ebf467621fb7f0334305c18cf4a59722490cc842f9bbcd6a7ef8c"}, "downloads": -1, "filename": "arpa2.quickder-1.4.0-cp38-cp38-manylinux2010_x86_64.whl", "has_sig": false, "md5_digest": "d94cabf1c7e9a5843ed8d1f9946cd6d1", "packagetype": "bdist_wheel", "python_version": "cp38", "requires_python": null, "size": 45336, "upload_time": "2020-03-04T11:45:02", "upload_time_iso_8601": "2020-03-04T11:45:02.342685Z", "url": "https://files.pythonhosted.org/packages/0e/d0/76427f3dceb418706cf21a674360c5f7d93d51eb6a5ff13072c6f96252d1/arpa2.quickder-1.4.0-cp38-cp38-manylinux2010_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "abab31b3f2f749806cf29a362a3d2796", "sha256": "79ce2d2ea693909087f803e8b61de73f6e128f309b4a564e7c7e016340e55227"}, "downloads": -1, "filename": "arpa2.quickder-1.4.0.tar.gz", "has_sig": false, "md5_digest": "abab31b3f2f749806cf29a362a3d2796", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15118, "upload_time": "2020-03-04T11:29:49", "upload_time_iso_8601": "2020-03-04T11:29:49.985197Z", "url": "https://files.pythonhosted.org/packages/84/6e/d941724923db1413ad0687e78c73864d975a8393444e68ddc51d5d72945d/arpa2.quickder-1.4.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:17:11 2020"}