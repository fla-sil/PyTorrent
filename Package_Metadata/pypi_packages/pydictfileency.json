{"info": {"author": "Hengyue Li", "author_email": "hengyue.li@hengyue.li", "bugtrack_url": null, "classifiers": [], "description": "# PyDictFileEncy\n\nStore a python dictionary into a file with a password (by AES256). The interaction is between the file and memory directly(No decrypted file.tmp will be created). The encrypted data is saved by string in a file on the disc. One can load the data from a disc into a python dictionary and use it in the memory. The core part of this package is make use of the answer in [StackOverflow](https://stackoverflow.com/questions/12524994/encrypt-decrypt-using-pycrypto-aes-256).\n\n\n\n\n## Install\n\n```\npip install pydictfileency\n```\n\n\n## Usage\nA (set of) python dict is collected in a \"container\" which will be operated directly.\n\n\n\n## example and API\n\n```\nfrom pydictfileency import PyDictFileEncy\n```\n\n\n\n\nCreate a container\n```\n#-----------------------------------------------------\n# create a new filedict (with password = 'password')\ncontainer = PyDictFileEncy('encrypted.dat','password')\ncontainer.connect()\n# a file is created. One can check the context in it.\n```\n\n\n\nConnect to it (verify password)\n```\n#-----------------------------------------------------\n# connect to a filedict\ncontainer = PyDictFileEncy('encrypted.dat','password')\ncontainer.connect()\nprint(container.IsConnected())\n# a filedict is connect. One can try another password.\n```\n\n\n\n\nCreate a table (a table is a python dict)  \n```\n#-----------------------------------------------------\n# create a table\ncontainer = PyDictFileEncy('encrypted.dat','password')\ncontainer.connect()\ncontainer.CreateTableIfNotExist('testTable')\n# remenber to save it\ncontainer.Save()\n```\n\n\nShow all tables\n```\n#-----------------------------------------------------\n# get all the tables in container\ncontainer = PyDictFileEncy('encrypted.dat','password')\ncontainer.connect()\n# return a python dict 'dict_keys' type\nl = container.GetTableList()\nprint(l)\n```\n\n\nGet a python dict in the container. One can have operations on it.\n```\n#-----------------------------------------------------\n# get a normal python dict in the container so one can interact with it\ncontainer = PyDictFileEncy('encrypted.dat','password')\ncontainer.connect()\nd = container.GetTable('testTable')\nprint(type(d),d)\n# ---  inser an element\nd['new'] = 'hellow'\n# remenber to save it\ncontainer.Save()\n```\n\nRemove a table\n```\n#-----------------------------------------------------\n# remove a table\ncontainer = PyDictFileEncy('encrypted.dat','password')\ncontainer.connect()\ncontainer.DropTable('testTable')\n# remenber to save it\ncontainer.Save()\n```\n\n\n\n\nReset a new password\n```\n#-----------------------------------------------------\n# reset password\ncontainer = PyDictFileEncy('encrypted.dat','password')\ncontainer.connect()\ncontainer.SetPassword('newpassword')\n# remenber to save it\ncontainer.Save()\n# the container itself is already renewed\nprint( container.IsConnected() )\n```\n\nGet encrypted file (careful to use it): save the decrypted data into a file\n```\n#----------------------------------------------------\n# password is also saved into the file!!!\ncontainer = PyDictFileEncy('encrypted.dat','password')\ncontainer.connect()\ncontainer.SaveDecryptedDataToFile('DecryptedData.txt')\n```\n\n\nRead data from a decrypted file:\n```\n#----------------------------------------------------\n# The current file will be overrided.\ncontainer = PyDictFileEncy('encrypted.dat','password')\ncontainer.connect()\ncontainer.ReadDecryptedDataFile('DecryptedData.txt')\n```\n\n`SaveDecryptedDataToFile` and `ReadDecryptedDataFile` can be used to backup and restore.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/HengyueLi/easycon", "keywords": "", "license": "LICENSE.md", "maintainer": "", "maintainer_email": "", "name": "pydictfileency", "package_url": "https://pypi.org/project/pydictfileency/", "platform": "", "project_url": "https://pypi.org/project/pydictfileency/", "project_urls": {"Homepage": "https://github.com/HengyueLi/easycon"}, "release_url": "https://pypi.org/project/pydictfileency/2020.4.25.1905/", "requires_dist": null, "requires_python": ">=3.5", "summary": "A simple API used to encrypt the python dict into a file using AES256.", "version": "2020.4.25.1905", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>PyDictFileEncy</h1>\n<p>Store a python dictionary into a file with a password (by AES256). The interaction is between the file and memory directly(No decrypted file.tmp will be created). The encrypted data is saved by string in a file on the disc. One can load the data from a disc into a python dictionary and use it in the memory. The core part of this package is make use of the answer in <a href=\"https://stackoverflow.com/questions/12524994/encrypt-decrypt-using-pycrypto-aes-256\" rel=\"nofollow\">StackOverflow</a>.</p>\n<h2>Install</h2>\n<pre><code>pip install pydictfileency\n</code></pre>\n<h2>Usage</h2>\n<p>A (set of) python dict is collected in a \"container\" which will be operated directly.</p>\n<h2>example and API</h2>\n<pre><code>from pydictfileency import PyDictFileEncy\n</code></pre>\n<p>Create a container</p>\n<pre><code>#-----------------------------------------------------\n# create a new filedict (with password = 'password')\ncontainer = PyDictFileEncy('encrypted.dat','password')\ncontainer.connect()\n# a file is created. One can check the context in it.\n</code></pre>\n<p>Connect to it (verify password)</p>\n<pre><code>#-----------------------------------------------------\n# connect to a filedict\ncontainer = PyDictFileEncy('encrypted.dat','password')\ncontainer.connect()\nprint(container.IsConnected())\n# a filedict is connect. One can try another password.\n</code></pre>\n<p>Create a table (a table is a python dict)</p>\n<pre><code>#-----------------------------------------------------\n# create a table\ncontainer = PyDictFileEncy('encrypted.dat','password')\ncontainer.connect()\ncontainer.CreateTableIfNotExist('testTable')\n# remenber to save it\ncontainer.Save()\n</code></pre>\n<p>Show all tables</p>\n<pre><code>#-----------------------------------------------------\n# get all the tables in container\ncontainer = PyDictFileEncy('encrypted.dat','password')\ncontainer.connect()\n# return a python dict 'dict_keys' type\nl = container.GetTableList()\nprint(l)\n</code></pre>\n<p>Get a python dict in the container. One can have operations on it.</p>\n<pre><code>#-----------------------------------------------------\n# get a normal python dict in the container so one can interact with it\ncontainer = PyDictFileEncy('encrypted.dat','password')\ncontainer.connect()\nd = container.GetTable('testTable')\nprint(type(d),d)\n# ---  inser an element\nd['new'] = 'hellow'\n# remenber to save it\ncontainer.Save()\n</code></pre>\n<p>Remove a table</p>\n<pre><code>#-----------------------------------------------------\n# remove a table\ncontainer = PyDictFileEncy('encrypted.dat','password')\ncontainer.connect()\ncontainer.DropTable('testTable')\n# remenber to save it\ncontainer.Save()\n</code></pre>\n<p>Reset a new password</p>\n<pre><code>#-----------------------------------------------------\n# reset password\ncontainer = PyDictFileEncy('encrypted.dat','password')\ncontainer.connect()\ncontainer.SetPassword('newpassword')\n# remenber to save it\ncontainer.Save()\n# the container itself is already renewed\nprint( container.IsConnected() )\n</code></pre>\n<p>Get encrypted file (careful to use it): save the decrypted data into a file</p>\n<pre><code>#----------------------------------------------------\n# password is also saved into the file!!!\ncontainer = PyDictFileEncy('encrypted.dat','password')\ncontainer.connect()\ncontainer.SaveDecryptedDataToFile('DecryptedData.txt')\n</code></pre>\n<p>Read data from a decrypted file:</p>\n<pre><code>#----------------------------------------------------\n# The current file will be overrided.\ncontainer = PyDictFileEncy('encrypted.dat','password')\ncontainer.connect()\ncontainer.ReadDecryptedDataFile('DecryptedData.txt')\n</code></pre>\n<p><code>SaveDecryptedDataToFile</code> and <code>ReadDecryptedDataFile</code> can be used to backup and restore.</p>\n\n          </div>"}, "last_serial": 7099032, "releases": {"2018.11.181": [{"comment_text": "", "digests": {"md5": "a726d572aee56c874a7e1c1f96b77d98", "sha256": "b62a21f6e2dff2daa59c041969aebfbddbe4a0f0bf390d321d263979bd695932"}, "downloads": -1, "filename": "pydictfileency-2018.11.181.tar.gz", "has_sig": false, "md5_digest": "a726d572aee56c874a7e1c1f96b77d98", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4317, "upload_time": "2018-11-18T07:33:07", "upload_time_iso_8601": "2018-11-18T07:33:07.018989Z", "url": "https://files.pythonhosted.org/packages/58/77/f9f4864e83412e2a2f903c7bca7cf455fe1101ed9d81370c509391942500/pydictfileency-2018.11.181.tar.gz", "yanked": false}], "2019.12.27.1019": [{"comment_text": "", "digests": {"md5": "14d9ae7c7f3917fb55c431487685aa82", "sha256": "e2dd0aced7acfb7f5765e5bd5e415829c59d548552a808160f6bad6e3bc05e6e"}, "downloads": -1, "filename": "pydictfileency-2019.12.27.1019.tar.gz", "has_sig": false, "md5_digest": "14d9ae7c7f3917fb55c431487685aa82", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 4238, "upload_time": "2019-12-27T02:19:58", "upload_time_iso_8601": "2019-12-27T02:19:58.283942Z", "url": "https://files.pythonhosted.org/packages/f0/33/88a05cb6c00bbf1616499f489971f0d0c6a511111d33ba71169ba2da3b9d/pydictfileency-2019.12.27.1019.tar.gz", "yanked": false}], "2020.4.23.2113": [{"comment_text": "", "digests": {"md5": "0568f8e7193839f72338257f80c93244", "sha256": "3a387134268b9937e1333cb08d6749395c9bbd8b3e4f9fe12d94278946fccb79"}, "downloads": -1, "filename": "pydictfileency-2020.4.23.2113.tar.gz", "has_sig": false, "md5_digest": "0568f8e7193839f72338257f80c93244", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 4258, "upload_time": "2020-04-23T13:13:04", "upload_time_iso_8601": "2020-04-23T13:13:04.837772Z", "url": "https://files.pythonhosted.org/packages/6a/69/3589f4d408a4354d943375cd64ed36950edeb9db00a451cbd5f31f47c921/pydictfileency-2020.4.23.2113.tar.gz", "yanked": false}], "2020.4.25.1805": [{"comment_text": "", "digests": {"md5": "a77c7aa292767818a5f05d2424ee8607", "sha256": "770e3fb8bf758917b423030c9a05b2c38a5b8ef80e87785d307ff950d425f3ca"}, "downloads": -1, "filename": "pydictfileency-2020.4.25.1805.tar.gz", "has_sig": false, "md5_digest": "a77c7aa292767818a5f05d2424ee8607", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 4622, "upload_time": "2020-04-25T10:05:04", "upload_time_iso_8601": "2020-04-25T10:05:04.850724Z", "url": "https://files.pythonhosted.org/packages/3d/97/31ba565685868fc9a99e9826a76662781993261f43d2aac13a6bd52b4222/pydictfileency-2020.4.25.1805.tar.gz", "yanked": false}], "2020.4.25.1905": [{"comment_text": "", "digests": {"md5": "4f8560e4e11c6d1f8e2bf01cfb18211b", "sha256": "9b8ac2462525ad9df590dfbbfc31c43a94c166088aa8890be037b6fef61a6d46"}, "downloads": -1, "filename": "pydictfileency-2020.4.25.1905.tar.gz", "has_sig": false, "md5_digest": "4f8560e4e11c6d1f8e2bf01cfb18211b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 4760, "upload_time": "2020-04-25T11:05:47", "upload_time_iso_8601": "2020-04-25T11:05:47.236218Z", "url": "https://files.pythonhosted.org/packages/dc/e1/52b4596f5275fbed1042e9422e7343cf18fee3c2de738c344916b3ec5fd0/pydictfileency-2020.4.25.1905.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4f8560e4e11c6d1f8e2bf01cfb18211b", "sha256": "9b8ac2462525ad9df590dfbbfc31c43a94c166088aa8890be037b6fef61a6d46"}, "downloads": -1, "filename": "pydictfileency-2020.4.25.1905.tar.gz", "has_sig": false, "md5_digest": "4f8560e4e11c6d1f8e2bf01cfb18211b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 4760, "upload_time": "2020-04-25T11:05:47", "upload_time_iso_8601": "2020-04-25T11:05:47.236218Z", "url": "https://files.pythonhosted.org/packages/dc/e1/52b4596f5275fbed1042e9422e7343cf18fee3c2de738c344916b3ec5fd0/pydictfileency-2020.4.25.1905.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:07:01 2020"}