{"info": {"author": "David Hin", "author_email": "a1720858@student.adelaide.edu.au", "bugtrack_url": null, "classifiers": [], "description": "# Python module for string matching\nONLY TESTED WITH PYTHON 3.5+.\n\n# Installation\n```\npip install so-processing\n```\n\n# Usage\n```\ndf = pd.read_parquet('sse.parquet')\n```\nText is stemmed and preprocessed\n\n| postid | tags             | title                                      | question                                                     | answers                                                      |\n| ------ | ---------------- | ------------------------------------------ | ------------------------------------------------------------ | ------------------------------------------------------------ |\n| 12041  | javascript\\|html | are \u201cman in the middle\u201d attack extrem rare | i am wonder if there is any cold hard real world data to back up that assert -- are man in the middl attack actual rare in the real world base on gather data from actual intrus or secur incid | my favorit current resourc for cold hard real world data is the verizon 2011 data breach investig report an excerpt from page 69 of the report action the top three threat action categori were hack malwar and social the most common type of hack action use were the use of stolen login credenti exploit backdoor and man-in-the-middl attack from read that i infer that its a secondari action use onc somebodi has a foothold in the system but the dutch high tech crime unit data say its quit credibl for concern of the 32 data breach that made up their statist 15 involv mitm action |\n\n```\nimport so_textprocessing as stp\ntp = stp.TextPreprocess(strlist='targetwords.txt')\ndf = tp.transform_df(df)\n```\nAdds new columns. transform_df() uses reformat='summary' by default.\n\n| postid | tags             | title                                      | question                                                     | answers                                                      | uniq | raw  | words                                                   | len  | ratio  |\n| ------ | ---------------- | ------------------------------------------ | ------------------------------------------------------------ | ------------------------------------------------------------ | ---- | ---- | ------------------------------------------------------- | ---- | ------ |\n| 12041  | javascript\\|html | are \u201cman in the middle\u201d attack extrem rare | i am wonder if there is any cold hard real world data to back up that assert -- are man in the middl attack.... | my favorit current resourc for cold hard real world data is the verizon 2011 data... | 4    | 7    | man in the middle\\| attack\\|malware \\|man-in-the-middle | 151  | 0.0463 |\n\n# Reformat Options\n```df = tp.transform_df(df, reformat='raw')```\nreturns raw aho-corasick output\n\n```df = tp.transform_df(df, reformat='index')```\nreturns raw string matches with start/end indexes\n\n```df = tp.transform_df(df, reformat='words')```\nreturns list of raw words (as orignal, unstemmed words)\n\n```df = tp.transform_df(df, reformat='summary')```\n(default): returns unique_count, raw_count, words, len and ratio. Only keeps longest string if a substring exists.  e.g. 'time bomb' will only count 'time bomb' and not 'bomb'.\n\n```df = tp.transform_df(df, reformat='full')```\nsame as summary, but when used in transform_df, it also processes+stems the text of the dataframe. Slowest option.", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.cs.adelaide.edu.au/a1720858/so_textprocessing", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "so-processing", "package_url": "https://pypi.org/project/so-processing/", "platform": "", "project_url": "https://pypi.org/project/so-processing/", "project_urls": {"Homepage": "https://github.cs.adelaide.edu.au/a1720858/so_textprocessing"}, "release_url": "https://pypi.org/project/so-processing/0.2/", "requires_dist": null, "requires_python": "", "summary": "SO text processing", "version": "0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p># Python module for string matching\nONLY TESTED WITH PYTHON 3.5+.</p>\n<p># Installation\n<tt>`\npip install <span class=\"pre\">so-processing</span>\n`</tt></p>\n<p># Usage\n<tt>`\ndf = <span class=\"pre\">pd.read_parquet('sse.parquet')</span>\n`</tt>\nText is stemmed and preprocessed</p>\n<div>\n<div>postid | tags             | title                                      | question                                                     | answers                                                      |</div>\n<div>\u2014\u2014 | \u2014\u2014\u2014\u2014\u2014- | \u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014 | \u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014 | \u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014 |</div>\n<div>12041  | javascript|html | are \u201cman in the middle\u201d attack extrem rare | i am wonder if there is any cold hard real world data to back up that assert \u2013 are man in the middl attack actual rare in the real world base on gather data from actual intrus or secur incid | my favorit current resourc for cold hard real world data is the verizon 2011 data breach investig report an excerpt from page 69 of the report action the top three threat action categori were hack malwar and social the most common type of hack action use were the use of stolen login credenti exploit backdoor and man-in-the-middl attack from read that i infer that its a secondari action use onc somebodi has a foothold in the system but the dutch high tech crime unit data say its quit credibl for concern of the 32 data breach that made up their statist 15 involv mitm action |</div>\n</div>\n<p><tt>`\nimport so_textprocessing as stp\ntp = <span class=\"pre\">stp.TextPreprocess(strlist='targetwords.txt')</span>\ndf = tp.transform_df(df)\n`</tt>\nAdds new columns. transform_df() uses reformat=\u2019summary\u2019 by default.</p>\n<div>\n<div>postid | tags             | title                                      | question                                                     | answers                                                      | uniq | raw  | words                                                   | len  | ratio  |</div>\n<div>\u2014\u2014 | \u2014\u2014\u2014\u2014\u2014- | \u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014 | \u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014 | \u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014 | \u2014- | \u2014- | \u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014- | \u2014- | \u2014\u2014 |</div>\n<div>12041  | javascript|html | are \u201cman in the middle\u201d attack extrem rare | i am wonder if there is any cold hard real world data to back up that assert \u2013 are man in the middl attack\u2026. | my favorit current resourc for cold hard real world data is the verizon 2011 data\u2026 | 4    | 7    | man in the middle| attack|malware |man-in-the-middle | 151  | 0.0463 |</div>\n</div>\n<p># Reformat Options\n<tt>`df = tp.transform_df(df, <span class=\"pre\">reformat='raw')`</span></tt>\nreturns raw aho-corasick output</p>\n<p><tt>`df = tp.transform_df(df, <span class=\"pre\">reformat='index')`</span></tt>\nreturns raw string matches with start/end indexes</p>\n<p><tt>`df = tp.transform_df(df, <span class=\"pre\">reformat='words')`</span></tt>\nreturns list of raw words (as orignal, unstemmed words)</p>\n<p><tt>`df = tp.transform_df(df, <span class=\"pre\">reformat='summary')`</span></tt>\n(default): returns unique_count, raw_count, words, len and ratio. Only keeps longest string if a substring exists.  e.g. \u2018time bomb\u2019 will only count \u2018time bomb\u2019 and not \u2018bomb\u2019.</p>\n<p><tt>`df = tp.transform_df(df, <span class=\"pre\">reformat='full')`</span></tt>\nsame as summary, but when used in transform_df, it also processes+stems the text of the dataframe. Slowest option.</p>\n\n          </div>"}, "last_serial": 7003378, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "3795984b46f4e7e396813a16a8ad9325", "sha256": "e54b815aab36747c2ebb7cbe4af3644b9305c0272dbbd54d651dc961d3af99fd"}, "downloads": -1, "filename": "so_processing-0.1.tar.gz", "has_sig": false, "md5_digest": "3795984b46f4e7e396813a16a8ad9325", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19792, "upload_time": "2020-04-08T03:04:00", "upload_time_iso_8601": "2020-04-08T03:04:00.768190Z", "url": "https://files.pythonhosted.org/packages/5d/94/06de10c7c83aada42d89ff7de5ef6ea2312de16c2b5ab3ba7ad1ef0369c0/so_processing-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "3ee9a30884ce01906b7cd1cedcbbc7e0", "sha256": "4c9f9b6cbdaa8f5f3dfb08da0af791331f422066793dd64af9011cbd9f35186b"}, "downloads": -1, "filename": "so_processing-0.2.tar.gz", "has_sig": false, "md5_digest": "3ee9a30884ce01906b7cd1cedcbbc7e0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19745, "upload_time": "2020-04-12T07:39:14", "upload_time_iso_8601": "2020-04-12T07:39:14.298353Z", "url": "https://files.pythonhosted.org/packages/21/c8/95ad709aa2ab3192dfc0a8a36935f19bc0e565a10afd5757c7682a9e4fad/so_processing-0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "3ee9a30884ce01906b7cd1cedcbbc7e0", "sha256": "4c9f9b6cbdaa8f5f3dfb08da0af791331f422066793dd64af9011cbd9f35186b"}, "downloads": -1, "filename": "so_processing-0.2.tar.gz", "has_sig": false, "md5_digest": "3ee9a30884ce01906b7cd1cedcbbc7e0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19745, "upload_time": "2020-04-12T07:39:14", "upload_time_iso_8601": "2020-04-12T07:39:14.298353Z", "url": "https://files.pythonhosted.org/packages/21/c8/95ad709aa2ab3192dfc0a8a36935f19bc0e565a10afd5757c7682a9e4fad/so_processing-0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:06:33 2020"}