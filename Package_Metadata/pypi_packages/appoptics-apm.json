{"info": {"author": "SolarWinds, LLC", "author_email": "support@appoptics.com", "bugtrack_url": null, "classifiers": [], "description": "[![Build Status](https://travis-ci.com/librato/python-appoptics.svg?token=hJPGuB4cPyioy5R8LBV9&branch=ci)](https://travis-ci.com/librato/python-appoptics)\n\n# appoptics_apm\n\nThe 'appoptics_apm' module provides automatic instrumentation and metrics/tracing SDK hooks for use with [AppOptics](https://appoptics.com).\n\nThe appoptics_apm module provides middleware and other instrumentation for popular web frameworks such as Django, Tornado, Pyramid, and WSGI, as well as commonly used libraries like SQLAlchemy, httplib, redis, memcached.  Read more at [our full documentation](https://docs.appoptics.com/kb/apm_tracing/python/).\n\n\n## Installing\n\nThe Python instrumentation for AppOptics uses a module named `appoptics_apm`, which is distributed via pypi.\n\n```sh\npip install appoptics_apm\n```\n\nAlternately, you can use this repository to build a local copy.\n\n## Configuring\n\nSee our documentation on [configuring the python instrumentation](https://docs.appoptics.com/kb/apm_tracing/python/configure/).\n\n# Upgrading\n\nTo upgrade an existing installation, you simply need to run:\n\n```sh\npip install --upgrade appoptics_apm\n```\n\n## Running the Tests\n\nMost of the test suite is configured to automatically run in Travis; there is also a way to run them locally in a Docker Compose environment.\n\n### Test directory layout\n\nAll tests are under the `test` directory, top-level files such as `install_test_dependencies.sh` are shared by both Travis and Docker Compose to help set up test dependencies.  The actual test suite is organized into these subdirectories:\n\n* `unit` -- these are actually functional tests; naming is for historic reasons.\n* `extension` -- these are tests that exercise the actual c-lib extension, which is stubbed in the unit tests.\n* `manual` -- manual verification of certain behaviors.\n* `docker/install_tests.sh` -- these test installing the built agent distribution on a variety of platforms.\n\n### Running the tests locally via docker-compose\n\n#### Prerequisites\n\n* install Docker and Docker Compose on your local machine\n\n* have the built agent distribution under your local `dist/` directory\n\n  Most of the tests depend on agent code in the local working tree but some, like the install tests, depend on having the distribution built and available locally.  There is a Dockerfile and helper script `run_docker_dev.sh` for this project that helps set up a development environment in which you can build the agent, see comments in `run_docker_dev.sh` for instructions.  Once in the development container, run `make sdist-package` to create a local agent distribution, then exit the container.  You should now have something like `dist/appoptics_apm-3.5.9.tar.gz`.\n\n#### Run tests\n\nDo this on your local machine, by going into the `test/docker` directory under this project.  This directory contains Docker Compose configuration and supporting files to help run the unit, extension, and install tests in a local composed environment.\n\nFor example, if the project is checked out under `~/source/python-appoptics`:\n```\ncd ~/source/python-appoptics/test/docker\n```\n\nTo see the test matrix as defined by the Compose environment:\n```\ndocker-compose config\n```\n\nTo run the entire test suite:\n```\ndocker-compose up -d\n```\n\nTest logs are written to `test/docker/logs`, and each composed service (i.e. test run) will exit 1 if there are test failures,  you can check via:\n```\ndocker-compose ps\n```\n\nOnce done, tear down via:\n```\ndocker-compose down\n```\n\nSee the comments in the `docker-compose.yml` file for more information.\n\n#### Code Coverage Report for Tests\n\nTo activate code coverage reports for your tests, you can simply set the following environment variable in your shell:\n```\nPYTHON_APPOPTICS_CODECOVERAGE=1\n```\n\nThis will measure your code coverage with the `coverage` Python module and create html-reports in the `test/docker/reports` directory for the unit as well as the extension tests. The reports will be stored under\n```\n<project_root>/test/docker/reports/<service>/<unit|extension>/index.html\n````\nand can simply be viewed with your browser.\n\nFor example, if the project is checked out under `~/source/python-appoptics`:\n\nRun the desired service `<service>` with temporarily activated coverage measurement:\n```\nPYTHON_APPOPTICS_CODECOVERAGE=1 docker-compose up <service> -d\n```\n\nAfter the tests have been completed, you should find the coverage report for this service under\n```\n~/source/python-appoptics/test/docker/reports/<service>\n```\n\nTo view e.g. the unit test results, just open\n```\n~/source/python-appoptics/test/docker/reports/<service>/unit/index.html\n```\nin your browser.\n\n## Support\n\nIf you find a bug or would like to request an enhancement, feel free to file\nan issue. For all other support requests, please email support@appoptics.com.\n\n## Contributing\n\nYou are obviously a person of great sense and intelligence. We happily\nappreciate all contributions to the appoptics_apm module whether it is documentation,\na bug fix, new instrumentation for a library or framework or anything else\nwe haven't thought of.\n\nWe welcome you to send us PRs. We also humbly request that any new\ninstrumentation submissions have corresponding tests that accompany\nthem. This way we don't break any of your additions when we (and others)\nmake changes after the fact.\n\n### Activating Git hooks\n\nThis repo provides a folder hooks, in which all git hook related scripts can be found. Currently, there is only a pre-commit hook which runs Pylint on the changed \\*.py files.\n\nTo set up the pre-commit hook, simply run the `install_hook.sh` script in this folder. This will install a project-specific virtual Python environment under which the code will be linted. Note that this requires Pyenv and Pyenv-virtualenv to be installed on your system.\n\nNote:\nPyenv-virtualenv provides a functionality to automatically detect your project-specific virtual environment (e.g. when changing into the project folder in the terminal). To activate the auto-detection, you only need to make sure that you added `pyenv virtualenv-init` to your shell (refer to the installation section for [pyenv-virtualenv]( https://github.com/pyenv/pyenv-virtualenv) for more details).\n\n### Pylint\nTo make sure that the code conforms the standards defined in the `.pylintrc` file, the pre-commit hook will not allow you to commit code if Pylint does issue any errors or warnings on the files you changed.\n\nYou can change this behaviour by setting certain environment variables when invoking `git commit`.\n\n#### Ignore Pylint warning messages\nYou can commit your code even though Pylint issued warning messages by setting\n```\nPYTHON_APPOPTICS_PYLINT_IGNORE_WARNINGS=1\n```\nwhen invoking git commit.\n\n#### Ignore Pylint error messages\nYou can commit your code even though Pylint issued error messages by setting\n```\nPYTHON_APPOPTICS_PYLINT_IGNORE_ERRORS=1\n```\nwhen invoking git commit. Please use this option with great care as Pylint error messages usually indicate genuine bugs in your code.\n\n### Code Formatting with Yapf\nFor a more consistent formatting of the Python files, this repository comes with the code formatter Yapf pre-installed in the virtual environment. The configurations of Yapf are stored in the `.style.yapf` file in the root directory of this repository. Please consult the [Yapf documentation](https://github.com/google/yapf) for more information about the auto-formatter.\n\nCurrently, the formatting is not enforced through any commit hooks, but you can invoke Yapf with the provided configuration in your local development environment.\n\n## Developer Resources\n\nWe have made a large effort to expose as much technical information\nas possible to assist developers wishing to contribute to the AppOptics module.\nBelow are the three major sources for information and help for developers:\n\n* The [AppOptics Knowledge Base](https://docs.appoptics.com/) has a large collection of technical articles or, if needed, you can submit a support request directly to the team.\n\nIf you have any questions or ideas, don't hesitate to contact us anytime.\n\nTo see the code related to the C++ extension, take a look in `appoptics_apm/swig`.\n\n## License\n\nCopyright (c) 2017 SolarWinds, LLC\n\nReleased under the [Librato Open License](http://docs.appoptics.com/Instrumentation/librato-open-license.html)", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://pypi.python.org/pypi/appoptics_apm", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://www.appoptics.com/monitor/python-performance", "keywords": "appoptics_apm traceview tracelytics oboe liboboe instrumentation performance wsgi middleware django", "license": "LICENSE.txt", "maintainer": "", "maintainer_email": "", "name": "appoptics-apm", "package_url": "https://pypi.org/project/appoptics-apm/", "platform": "", "project_url": "https://pypi.org/project/appoptics-apm/", "project_urls": {"Download": "https://pypi.python.org/pypi/appoptics_apm", "Homepage": "https://www.appoptics.com/monitor/python-performance"}, "release_url": "https://pypi.org/project/appoptics-apm/4.0.0/", "requires_dist": null, "requires_python": "", "summary": "AppOptics APM libraries, instrumentation, and web middleware components for WSGI, Django, and Tornado.", "version": "4.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://travis-ci.com/librato/python-appoptics\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/38943c904656e7c390c54713f0f0cd16f60dd24d/68747470733a2f2f7472617669732d63692e636f6d2f6c69627261746f2f707974686f6e2d6170706f70746963732e7376673f746f6b656e3d684a5047754234635079696f793552384c425639266272616e63683d6369\"></a></p>\n<h1>appoptics_apm</h1>\n<p>The 'appoptics_apm' module provides automatic instrumentation and metrics/tracing SDK hooks for use with <a href=\"https://appoptics.com\" rel=\"nofollow\">AppOptics</a>.</p>\n<p>The appoptics_apm module provides middleware and other instrumentation for popular web frameworks such as Django, Tornado, Pyramid, and WSGI, as well as commonly used libraries like SQLAlchemy, httplib, redis, memcached.  Read more at <a href=\"https://docs.appoptics.com/kb/apm_tracing/python/\" rel=\"nofollow\">our full documentation</a>.</p>\n<h2>Installing</h2>\n<p>The Python instrumentation for AppOptics uses a module named <code>appoptics_apm</code>, which is distributed via pypi.</p>\n<pre>pip install appoptics_apm\n</pre>\n<p>Alternately, you can use this repository to build a local copy.</p>\n<h2>Configuring</h2>\n<p>See our documentation on <a href=\"https://docs.appoptics.com/kb/apm_tracing/python/configure/\" rel=\"nofollow\">configuring the python instrumentation</a>.</p>\n<h1>Upgrading</h1>\n<p>To upgrade an existing installation, you simply need to run:</p>\n<pre>pip install --upgrade appoptics_apm\n</pre>\n<h2>Running the Tests</h2>\n<p>Most of the test suite is configured to automatically run in Travis; there is also a way to run them locally in a Docker Compose environment.</p>\n<h3>Test directory layout</h3>\n<p>All tests are under the <code>test</code> directory, top-level files such as <code>install_test_dependencies.sh</code> are shared by both Travis and Docker Compose to help set up test dependencies.  The actual test suite is organized into these subdirectories:</p>\n<ul>\n<li><code>unit</code> -- these are actually functional tests; naming is for historic reasons.</li>\n<li><code>extension</code> -- these are tests that exercise the actual c-lib extension, which is stubbed in the unit tests.</li>\n<li><code>manual</code> -- manual verification of certain behaviors.</li>\n<li><code>docker/install_tests.sh</code> -- these test installing the built agent distribution on a variety of platforms.</li>\n</ul>\n<h3>Running the tests locally via docker-compose</h3>\n<h4>Prerequisites</h4>\n<ul>\n<li>\n<p>install Docker and Docker Compose on your local machine</p>\n</li>\n<li>\n<p>have the built agent distribution under your local <code>dist/</code> directory</p>\n<p>Most of the tests depend on agent code in the local working tree but some, like the install tests, depend on having the distribution built and available locally.  There is a Dockerfile and helper script <code>run_docker_dev.sh</code> for this project that helps set up a development environment in which you can build the agent, see comments in <code>run_docker_dev.sh</code> for instructions.  Once in the development container, run <code>make sdist-package</code> to create a local agent distribution, then exit the container.  You should now have something like <code>dist/appoptics_apm-3.5.9.tar.gz</code>.</p>\n</li>\n</ul>\n<h4>Run tests</h4>\n<p>Do this on your local machine, by going into the <code>test/docker</code> directory under this project.  This directory contains Docker Compose configuration and supporting files to help run the unit, extension, and install tests in a local composed environment.</p>\n<p>For example, if the project is checked out under <code>~/source/python-appoptics</code>:</p>\n<pre><code>cd ~/source/python-appoptics/test/docker\n</code></pre>\n<p>To see the test matrix as defined by the Compose environment:</p>\n<pre><code>docker-compose config\n</code></pre>\n<p>To run the entire test suite:</p>\n<pre><code>docker-compose up -d\n</code></pre>\n<p>Test logs are written to <code>test/docker/logs</code>, and each composed service (i.e. test run) will exit 1 if there are test failures,  you can check via:</p>\n<pre><code>docker-compose ps\n</code></pre>\n<p>Once done, tear down via:</p>\n<pre><code>docker-compose down\n</code></pre>\n<p>See the comments in the <code>docker-compose.yml</code> file for more information.</p>\n<h4>Code Coverage Report for Tests</h4>\n<p>To activate code coverage reports for your tests, you can simply set the following environment variable in your shell:</p>\n<pre><code>PYTHON_APPOPTICS_CODECOVERAGE=1\n</code></pre>\n<p>This will measure your code coverage with the <code>coverage</code> Python module and create html-reports in the <code>test/docker/reports</code> directory for the unit as well as the extension tests. The reports will be stored under</p>\n<pre><code>&lt;project_root&gt;/test/docker/reports/&lt;service&gt;/&lt;unit|extension&gt;/index.html\n</code></pre>\n<p>and can simply be viewed with your browser.</p>\n<p>For example, if the project is checked out under <code>~/source/python-appoptics</code>:</p>\n<p>Run the desired service <code>&lt;service&gt;</code> with temporarily activated coverage measurement:</p>\n<pre><code>PYTHON_APPOPTICS_CODECOVERAGE=1 docker-compose up &lt;service&gt; -d\n</code></pre>\n<p>After the tests have been completed, you should find the coverage report for this service under</p>\n<pre><code>~/source/python-appoptics/test/docker/reports/&lt;service&gt;\n</code></pre>\n<p>To view e.g. the unit test results, just open</p>\n<pre><code>~/source/python-appoptics/test/docker/reports/&lt;service&gt;/unit/index.html\n</code></pre>\n<p>in your browser.</p>\n<h2>Support</h2>\n<p>If you find a bug or would like to request an enhancement, feel free to file\nan issue. For all other support requests, please email <a href=\"mailto:support@appoptics.com\">support@appoptics.com</a>.</p>\n<h2>Contributing</h2>\n<p>You are obviously a person of great sense and intelligence. We happily\nappreciate all contributions to the appoptics_apm module whether it is documentation,\na bug fix, new instrumentation for a library or framework or anything else\nwe haven't thought of.</p>\n<p>We welcome you to send us PRs. We also humbly request that any new\ninstrumentation submissions have corresponding tests that accompany\nthem. This way we don't break any of your additions when we (and others)\nmake changes after the fact.</p>\n<h3>Activating Git hooks</h3>\n<p>This repo provides a folder hooks, in which all git hook related scripts can be found. Currently, there is only a pre-commit hook which runs Pylint on the changed *.py files.</p>\n<p>To set up the pre-commit hook, simply run the <code>install_hook.sh</code> script in this folder. This will install a project-specific virtual Python environment under which the code will be linted. Note that this requires Pyenv and Pyenv-virtualenv to be installed on your system.</p>\n<p>Note:\nPyenv-virtualenv provides a functionality to automatically detect your project-specific virtual environment (e.g. when changing into the project folder in the terminal). To activate the auto-detection, you only need to make sure that you added <code>pyenv virtualenv-init</code> to your shell (refer to the installation section for <a href=\"https://github.com/pyenv/pyenv-virtualenv\" rel=\"nofollow\">pyenv-virtualenv</a> for more details).</p>\n<h3>Pylint</h3>\n<p>To make sure that the code conforms the standards defined in the <code>.pylintrc</code> file, the pre-commit hook will not allow you to commit code if Pylint does issue any errors or warnings on the files you changed.</p>\n<p>You can change this behaviour by setting certain environment variables when invoking <code>git commit</code>.</p>\n<h4>Ignore Pylint warning messages</h4>\n<p>You can commit your code even though Pylint issued warning messages by setting</p>\n<pre><code>PYTHON_APPOPTICS_PYLINT_IGNORE_WARNINGS=1\n</code></pre>\n<p>when invoking git commit.</p>\n<h4>Ignore Pylint error messages</h4>\n<p>You can commit your code even though Pylint issued error messages by setting</p>\n<pre><code>PYTHON_APPOPTICS_PYLINT_IGNORE_ERRORS=1\n</code></pre>\n<p>when invoking git commit. Please use this option with great care as Pylint error messages usually indicate genuine bugs in your code.</p>\n<h3>Code Formatting with Yapf</h3>\n<p>For a more consistent formatting of the Python files, this repository comes with the code formatter Yapf pre-installed in the virtual environment. The configurations of Yapf are stored in the <code>.style.yapf</code> file in the root directory of this repository. Please consult the <a href=\"https://github.com/google/yapf\" rel=\"nofollow\">Yapf documentation</a> for more information about the auto-formatter.</p>\n<p>Currently, the formatting is not enforced through any commit hooks, but you can invoke Yapf with the provided configuration in your local development environment.</p>\n<h2>Developer Resources</h2>\n<p>We have made a large effort to expose as much technical information\nas possible to assist developers wishing to contribute to the AppOptics module.\nBelow are the three major sources for information and help for developers:</p>\n<ul>\n<li>The <a href=\"https://docs.appoptics.com/\" rel=\"nofollow\">AppOptics Knowledge Base</a> has a large collection of technical articles or, if needed, you can submit a support request directly to the team.</li>\n</ul>\n<p>If you have any questions or ideas, don't hesitate to contact us anytime.</p>\n<p>To see the code related to the C++ extension, take a look in <code>appoptics_apm/swig</code>.</p>\n<h2>License</h2>\n<p>Copyright (c) 2017 SolarWinds, LLC</p>\n<p>Released under the <a href=\"http://docs.appoptics.com/Instrumentation/librato-open-license.html\" rel=\"nofollow\">Librato Open License</a></p>\n\n          </div>"}, "last_serial": 7133302, "releases": {"3.0.0.0": [{"comment_text": "", "digests": {"md5": "65c8456e8889720a6e68755286c9ae87", "sha256": "121fd20dd79acf45ef6ab8760a74f4b8c73552238f24c24895bc160ca66d5486"}, "downloads": -1, "filename": "appoptics_apm-3.0.0.0.tar.gz", "has_sig": false, "md5_digest": "65c8456e8889720a6e68755286c9ae87", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4681157, "upload_time": "2018-05-03T20:13:57", "upload_time_iso_8601": "2018-05-03T20:13:57.961217Z", "url": "https://files.pythonhosted.org/packages/0e/3c/a97aeedba80beb959c13334b7919669152a0829815a0c142246ce83c9581/appoptics_apm-3.0.0.0.tar.gz", "yanked": false}], "3.1.0.0": [{"comment_text": "", "digests": {"md5": "a9846dfdbb1b6532dd249f647b98c30d", "sha256": "d6f357bc7d48f87fb0b0725e2050026f120222aa4e0dc32d9f1f9bf3bb2a02f9"}, "downloads": -1, "filename": "appoptics_apm-3.1.0.0.tar.gz", "has_sig": false, "md5_digest": "a9846dfdbb1b6532dd249f647b98c30d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4626544, "upload_time": "2018-06-07T01:23:03", "upload_time_iso_8601": "2018-06-07T01:23:03.913819Z", "url": "https://files.pythonhosted.org/packages/88/18/19ed22fffb165e0d79d3ce5884f5e6afe902cf277209b4cec31f5f8ce4b5/appoptics_apm-3.1.0.0.tar.gz", "yanked": false}], "3.2.0": [{"comment_text": "", "digests": {"md5": "39a859145014c020f90aa681e9af35b7", "sha256": "b70a65f303034c062adbf46c42f664b9c9b710546c1da635137793dab2474217"}, "downloads": -1, "filename": "appoptics_apm-3.2.0.tar.gz", "has_sig": false, "md5_digest": "39a859145014c020f90aa681e9af35b7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4628088, "upload_time": "2018-07-12T16:27:58", "upload_time_iso_8601": "2018-07-12T16:27:58.474990Z", "url": "https://files.pythonhosted.org/packages/3b/38/c61fe4e626d294db1df275a6e7aba29dc1e08eed3d9d9f6dbd6bbbbc3fff/appoptics_apm-3.2.0.tar.gz", "yanked": false}], "3.2.0.1": [], "3.3.0": [{"comment_text": "", "digests": {"md5": "038c1db42632e25beba84559305ccc19", "sha256": "1bfa3222e7b5ed9d5e8f86abcfe64841e9bc7798ebdcdf7c759b1190ed407c9f"}, "downloads": -1, "filename": "appoptics_apm-3.3.0.tar.gz", "has_sig": false, "md5_digest": "038c1db42632e25beba84559305ccc19", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2768471, "upload_time": "2018-08-13T20:29:19", "upload_time_iso_8601": "2018-08-13T20:29:19.775801Z", "url": "https://files.pythonhosted.org/packages/f6/a4/a069515131aec09cf614fa4bb110c15e20f33a4043572d7d819a8f600602/appoptics_apm-3.3.0.tar.gz", "yanked": false}], "3.3.1": [{"comment_text": "", "digests": {"md5": "1dfc7c6a6b8361ca3d8a38c4377aed4c", "sha256": "c17c0472570810cb169af75e9c61f30c9cd4c2747668b130e6d9abed0fee7a6d"}, "downloads": -1, "filename": "appoptics_apm-3.3.1.tar.gz", "has_sig": false, "md5_digest": "1dfc7c6a6b8361ca3d8a38c4377aed4c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2780060, "upload_time": "2018-08-16T17:52:15", "upload_time_iso_8601": "2018-08-16T17:52:15.486567Z", "url": "https://files.pythonhosted.org/packages/dc/e3/b630cffec38a093a3967a0399369d1029f7b84fb0ad290b462da96fbc121/appoptics_apm-3.3.1.tar.gz", "yanked": false}], "3.4.0": [{"comment_text": "", "digests": {"md5": "3fb92b9ebc3db2606b26b7ff0a917c24", "sha256": "42b9b323b0af42b4f36a9000e1258402f77333c76e6bafef8efc328994ab0a59"}, "downloads": -1, "filename": "appoptics_apm-3.4.0.tar.gz", "has_sig": false, "md5_digest": "3fb92b9ebc3db2606b26b7ff0a917c24", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2781154, "upload_time": "2018-09-04T15:40:11", "upload_time_iso_8601": "2018-09-04T15:40:11.941186Z", "url": "https://files.pythonhosted.org/packages/47/e8/9ca9bad2687f3aadb5bba20028db56a3930765ff462b070928dc60438d21/appoptics_apm-3.4.0.tar.gz", "yanked": false}], "3.4.0.1": [{"comment_text": "", "digests": {"md5": "3feea2fd1f519b3d17c897c8cb7ab099", "sha256": "7b72f423e81ac50eb6a0e9af1c1a1a3cbd9dc898d22fad578287115737086205"}, "downloads": -1, "filename": "appoptics_apm-3.4.0.1.tar.gz", "has_sig": false, "md5_digest": "3feea2fd1f519b3d17c897c8cb7ab099", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2781178, "upload_time": "2018-09-04T16:55:53", "upload_time_iso_8601": "2018-09-04T16:55:53.657103Z", "url": "https://files.pythonhosted.org/packages/cc/d6/9b65914fcdc0ea05de5d29469ce73c4e3016f7d36ef016f4516b73669233/appoptics_apm-3.4.0.1.tar.gz", "yanked": false}], "3.4.1": [{"comment_text": "", "digests": {"md5": "edc9e1b43861136552edd5e0040c8864", "sha256": "364799831195fda9fd3e3c17801bcb46906a2504ee273364519eea0859496b3d"}, "downloads": -1, "filename": "appoptics_apm-3.4.1.tar.gz", "has_sig": false, "md5_digest": "edc9e1b43861136552edd5e0040c8864", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2778459, "upload_time": "2018-09-14T16:22:31", "upload_time_iso_8601": "2018-09-14T16:22:31.780426Z", "url": "https://files.pythonhosted.org/packages/1c/f3/d977de32bf8c842dce5adadd5cce4864b121056dcb14cb038a928a8d7438/appoptics_apm-3.4.1.tar.gz", "yanked": false}], "3.4.2": [{"comment_text": "", "digests": {"md5": "4a90a1329421c452bc0b2122d9c42820", "sha256": "21ff66bb1f522f22c591a2642c17bbc97cbec611ddd5b9876df3eff08b1b87ff"}, "downloads": -1, "filename": "appoptics_apm-3.4.2.tar.gz", "has_sig": false, "md5_digest": "4a90a1329421c452bc0b2122d9c42820", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2778097, "upload_time": "2018-10-01T23:09:15", "upload_time_iso_8601": "2018-10-01T23:09:15.078354Z", "url": "https://files.pythonhosted.org/packages/ed/52/03eeb5866c680e37f1c1aad504337502a0c10aef5c149e700d0386f83648/appoptics_apm-3.4.2.tar.gz", "yanked": false}], "3.4.3": [{"comment_text": "", "digests": {"md5": "9cede7db3db1aa8f8f7ff3adb7965160", "sha256": "71d52213345ae21e866fcbbf69b0e7cea56776fd7e8d8d9a711d5bcbfa843b39"}, "downloads": -1, "filename": "appoptics_apm-3.4.3.tar.gz", "has_sig": false, "md5_digest": "9cede7db3db1aa8f8f7ff3adb7965160", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2776450, "upload_time": "2018-10-11T00:54:34", "upload_time_iso_8601": "2018-10-11T00:54:34.868777Z", "url": "https://files.pythonhosted.org/packages/f8/53/eeba53a5f6020c992e2762cc4b1a68c5ab6e0d276c40f951e1763b7b664c/appoptics_apm-3.4.3.tar.gz", "yanked": false}], "3.4.4": [{"comment_text": "", "digests": {"md5": "f74aa36d5cf893e0a8877ba2cbfb3335", "sha256": "ea1053b9b88024b0c448bd229c4d598790073be6a678ecf5e8293fbd48ecd1e6"}, "downloads": -1, "filename": "appoptics_apm-3.4.4.tar.gz", "has_sig": false, "md5_digest": "f74aa36d5cf893e0a8877ba2cbfb3335", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2782522, "upload_time": "2018-11-06T00:32:26", "upload_time_iso_8601": "2018-11-06T00:32:26.390030Z", "url": "https://files.pythonhosted.org/packages/b9/35/f2c30cad42a8b7cc4fbc60bd9cbe12fc712aab9783b4a7e4c9b303e78d15/appoptics_apm-3.4.4.tar.gz", "yanked": false}], "3.4.5": [{"comment_text": "", "digests": {"md5": "28aa2dc4e06ad32164ce7252c934db0b", "sha256": "21561f7c0fc83e89843d52de910ae447a2f9a51f73aa6864cd845c62a29d36ca"}, "downloads": -1, "filename": "appoptics_apm-3.4.5.tar.gz", "has_sig": false, "md5_digest": "28aa2dc4e06ad32164ce7252c934db0b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2799554, "upload_time": "2018-11-23T17:55:21", "upload_time_iso_8601": "2018-11-23T17:55:21.937655Z", "url": "https://files.pythonhosted.org/packages/ad/63/688bf8c62521575354587af626b2e58c22c45d11aae98984f9ff99ad4156/appoptics_apm-3.4.5.tar.gz", "yanked": false}], "3.4.6": [{"comment_text": "", "digests": {"md5": "bb8e0a754b08fa1f8d67b9f8e7057a3d", "sha256": "e692ee19882e41c1d2c4c51e1b9099deca9c6272a7efeb01014980d4621c53cb"}, "downloads": -1, "filename": "appoptics_apm-3.4.6.tar.gz", "has_sig": false, "md5_digest": "bb8e0a754b08fa1f8d67b9f8e7057a3d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2783454, "upload_time": "2018-12-12T23:24:23", "upload_time_iso_8601": "2018-12-12T23:24:23.813169Z", "url": "https://files.pythonhosted.org/packages/25/c4/d55f34b33b0209c6a9044a0fb69e029c27439f65c0a79a08c91065875898/appoptics_apm-3.4.6.tar.gz", "yanked": false}], "3.4.7": [{"comment_text": "", "digests": {"md5": "866babc74589620c42a2b8fd3dca1f52", "sha256": "1e07dda66208f3ca8aa56530cb623cc37ad2cd64fc632ed28f58ab80a1643428"}, "downloads": -1, "filename": "appoptics_apm-3.4.7.tar.gz", "has_sig": false, "md5_digest": "866babc74589620c42a2b8fd3dca1f52", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2783465, "upload_time": "2018-12-14T21:27:56", "upload_time_iso_8601": "2018-12-14T21:27:56.316173Z", "url": "https://files.pythonhosted.org/packages/d8/a6/e6126115132b7c63404cfcfd9b864dd9988229d20160fa05d49087341894/appoptics_apm-3.4.7.tar.gz", "yanked": false}], "3.4.8": [{"comment_text": "", "digests": {"md5": "6805e4628054e43b0c2afe1f3e0fc5a8", "sha256": "a14927dc3872fc3164796e8090de6c4745d51a8881a527d209dc887496e571b0"}, "downloads": -1, "filename": "appoptics_apm-3.4.8.tar.gz", "has_sig": false, "md5_digest": "6805e4628054e43b0c2afe1f3e0fc5a8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2784474, "upload_time": "2019-01-30T22:04:17", "upload_time_iso_8601": "2019-01-30T22:04:17.339739Z", "url": "https://files.pythonhosted.org/packages/7c/f3/8e5b136542154cd9157efeee937f1d1e1f6eef0d2dfc16ab43a75dda09d4/appoptics_apm-3.4.8.tar.gz", "yanked": false}], "3.4.9": [{"comment_text": "", "digests": {"md5": "fcb8c3b056fcaff59d1a016779eda70e", "sha256": "7162717804a3ff9eb88c3c74fa173742c93790aeab2fcd6dac02ad1282693e6f"}, "downloads": -1, "filename": "appoptics_apm-3.4.9.tar.gz", "has_sig": false, "md5_digest": "fcb8c3b056fcaff59d1a016779eda70e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2829013, "upload_time": "2019-05-03T00:31:19", "upload_time_iso_8601": "2019-05-03T00:31:19.986908Z", "url": "https://files.pythonhosted.org/packages/b8/d0/39e708787a81a2b64507343d266411802cd3b52a8cd0c0f4abd2c26eba33/appoptics_apm-3.4.9.tar.gz", "yanked": false}], "3.5.9": [{"comment_text": "", "digests": {"md5": "ba369ba244192cf96e8c5b810a1141af", "sha256": "c3135984a5a2e20213233965ee24a2a32f89f05874d4303b176522844e93c669"}, "downloads": -1, "filename": "appoptics_apm-3.5.9.tar.gz", "has_sig": false, "md5_digest": "ba369ba244192cf96e8c5b810a1141af", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3238106, "upload_time": "2019-05-13T19:40:42", "upload_time_iso_8601": "2019-05-13T19:40:42.778487Z", "url": "https://files.pythonhosted.org/packages/fd/c6/573c2c0bf5133f7fc39ba91e2f102cff1e02114bedcc20408138bafb4fad/appoptics_apm-3.5.9.tar.gz", "yanked": false}], "4.0.0": [{"comment_text": "", "digests": {"md5": "153177de622ff6503d2f655245799623", "sha256": "e5ed0d70d88d09be21a85c99da5981de5bb668c98888d965abcf926cce2bf4ee"}, "downloads": -1, "filename": "appoptics_apm-4.0.0.tar.gz", "has_sig": false, "md5_digest": "153177de622ff6503d2f655245799623", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3248007, "upload_time": "2020-04-29T23:29:37", "upload_time_iso_8601": "2020-04-29T23:29:37.835014Z", "url": "https://files.pythonhosted.org/packages/0c/7b/b64bd3dc8ae725f45b8570ecba45e9ce247f4d0c92a62bd15b949cadd08a/appoptics_apm-4.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "153177de622ff6503d2f655245799623", "sha256": "e5ed0d70d88d09be21a85c99da5981de5bb668c98888d965abcf926cce2bf4ee"}, "downloads": -1, "filename": "appoptics_apm-4.0.0.tar.gz", "has_sig": false, "md5_digest": "153177de622ff6503d2f655245799623", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3248007, "upload_time": "2020-04-29T23:29:37", "upload_time_iso_8601": "2020-04-29T23:29:37.835014Z", "url": "https://files.pythonhosted.org/packages/0c/7b/b64bd3dc8ae725f45b8570ecba45e9ce247f4d0c92a62bd15b949cadd08a/appoptics_apm-4.0.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:17:36 2020"}