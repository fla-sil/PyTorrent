{"info": {"author": "ofc", "author_email": "support@youtubedata.io", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Topic :: Multimedia :: Video", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "### YouTube Data\nYouTube Data provides comprehensive YouTube video metadata scraping. Results are returned in a dictionary containing likes, dislikes, views published dates and more.\n\nWebsite: [youtubedata.io](https://www.youtubedata.io)\n\n### Usage\n##### Positional Arguments\nUsage is simple, the first method is to not pass any keyword arguments. In this case, the function will determine whether a channel code was passed. \n\n*Channel Codes begin with UC. For example, Ariana Grande's channel code is UC9CoOnJkIBMdeijd9qYoT_g*.\n\nIf a channel code was passed, YouTube Data will proceed straight to the scraping algorithm and extract the desired data. Otherwise, a step is added to find the channel that best matches the entered argument.\n\n```python\nfrom youtubedata import youtubedata \n```\n\n```python\nariana_grande = youtubedata.get(\"UC9CoOnJkIBMdeijd9qYoT_g\")\n```\n\n```python\nariana_grande = youtubedata.get(\"Ariana Grande\")\n```\n\n##### Keyword Arguments\nThe second method is to explicity pass the keyword arguments *channel_code* and *best_match*. This way YouTube Data does not have to guess which is being provided.\n\n```python\nariana_grande = youtubedata.get(channel_code = \"UC9CoOnJkIBMdeijd9qYoT_g\")\n```\n\n```python\nariana_grande = youtubedata.get(best_match = \"Ariana Grande\")\n```\n\n### Progress\nProgress is indicated through percentage complete print statements. The algorithm works by first identifying all \"playlists\" associated to the channel and then extracting all video URLs in each playlist and then deduplicating any repeated URLs.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/AAbdelmalek/youtubedata_library", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "youtubedata", "package_url": "https://pypi.org/project/youtubedata/", "platform": "", "project_url": "https://pypi.org/project/youtubedata/", "project_urls": {"Homepage": "https://github.com/AAbdelmalek/youtubedata_library"}, "release_url": "https://pypi.org/project/youtubedata/1.1.1/", "requires_dist": null, "requires_python": "", "summary": "YouTube Data provides comprehensive YouTube video metadata scraping. Results are returned in a dictionary containing likes, dislikes, views, published dates and more.", "version": "1.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h3>YouTube Data</h3>\n<p>YouTube Data provides comprehensive YouTube video metadata scraping. Results are returned in a dictionary containing likes, dislikes, views published dates and more.</p>\n<p>Website: <a href=\"https://www.youtubedata.io\" rel=\"nofollow\">youtubedata.io</a></p>\n<h3>Usage</h3>\n<h5>Positional Arguments</h5>\n<p>Usage is simple, the first method is to not pass any keyword arguments. In this case, the function will determine whether a channel code was passed.</p>\n<p><em>Channel Codes begin with UC. For example, Ariana Grande's channel code is UC9CoOnJkIBMdeijd9qYoT_g</em>.</p>\n<p>If a channel code was passed, YouTube Data will proceed straight to the scraping algorithm and extract the desired data. Otherwise, a step is added to find the channel that best matches the entered argument.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">youtubedata</span> <span class=\"kn\">import</span> <span class=\"n\">youtubedata</span> \n</pre>\n<pre><span class=\"n\">ariana_grande</span> <span class=\"o\">=</span> <span class=\"n\">youtubedata</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"UC9CoOnJkIBMdeijd9qYoT_g\"</span><span class=\"p\">)</span>\n</pre>\n<pre><span class=\"n\">ariana_grande</span> <span class=\"o\">=</span> <span class=\"n\">youtubedata</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"Ariana Grande\"</span><span class=\"p\">)</span>\n</pre>\n<h5>Keyword Arguments</h5>\n<p>The second method is to explicity pass the keyword arguments <em>channel_code</em> and <em>best_match</em>. This way YouTube Data does not have to guess which is being provided.</p>\n<pre><span class=\"n\">ariana_grande</span> <span class=\"o\">=</span> <span class=\"n\">youtubedata</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">channel_code</span> <span class=\"o\">=</span> <span class=\"s2\">\"UC9CoOnJkIBMdeijd9qYoT_g\"</span><span class=\"p\">)</span>\n</pre>\n<pre><span class=\"n\">ariana_grande</span> <span class=\"o\">=</span> <span class=\"n\">youtubedata</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">best_match</span> <span class=\"o\">=</span> <span class=\"s2\">\"Ariana Grande\"</span><span class=\"p\">)</span>\n</pre>\n<h3>Progress</h3>\n<p>Progress is indicated through percentage complete print statements. The algorithm works by first identifying all \"playlists\" associated to the channel and then extracting all video URLs in each playlist and then deduplicating any repeated URLs.</p>\n\n          </div>"}, "last_serial": 5860012, "releases": {"1.0.9": [{"comment_text": "", "digests": {"md5": "2e0efb0e6e263d2fd089ed8bd02067db", "sha256": "b3a783ff0203b997d01266ef3e9dfe8280a8b7c3c57ce83bbaf83fabca1d3733"}, "downloads": -1, "filename": "youtubedata-1.0.9-py3-none-any.whl", "has_sig": false, "md5_digest": "2e0efb0e6e263d2fd089ed8bd02067db", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6834, "upload_time": "2019-06-28T00:00:11", "upload_time_iso_8601": "2019-06-28T00:00:11.393768Z", "url": "https://files.pythonhosted.org/packages/b6/34/6cf231879dc2860568be17be8701375e5f32d7448acad26d959588220a63/youtubedata-1.0.9-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4e582365bce64ff5fdd853efb0aa480f", "sha256": "b13a24fdb932da25107132c4d8612ec2d2bce602932393d2c7c8b548416a01aa"}, "downloads": -1, "filename": "youtubedata-1.0.9.tar.gz", "has_sig": false, "md5_digest": "4e582365bce64ff5fdd853efb0aa480f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5574, "upload_time": "2019-06-28T00:00:12", "upload_time_iso_8601": "2019-06-28T00:00:12.816723Z", "url": "https://files.pythonhosted.org/packages/24/63/72c559472cfe4d2f4ac83b2e5fc8a7ace9ed89725e53e794c9ccfd12108a/youtubedata-1.0.9.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "4f3a4c86f75034b8f919eccc327ad665", "sha256": "0af3ed681e84d92e855316a93aae3f0f2e8a95cd6a5c32bf462f0aa31f2feb76"}, "downloads": -1, "filename": "youtubedata-1.1.0.tar.gz", "has_sig": false, "md5_digest": "4f3a4c86f75034b8f919eccc327ad665", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5681, "upload_time": "2019-09-16T00:09:05", "upload_time_iso_8601": "2019-09-16T00:09:05.387834Z", "url": "https://files.pythonhosted.org/packages/a7/75/264821b0c397b8c8c489cfeb4583ba400bc58c429b32d7db0e1d89fb264f/youtubedata-1.1.0.tar.gz", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "f7ff57d3051d6d2b7a525916b293006d", "sha256": "bacaead0de32af474ed8685877a1c3779e264b192a74c268c9902a2e158acc99"}, "downloads": -1, "filename": "youtubedata-1.1.1.tar.gz", "has_sig": false, "md5_digest": "f7ff57d3051d6d2b7a525916b293006d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5695, "upload_time": "2019-09-20T03:52:55", "upload_time_iso_8601": "2019-09-20T03:52:55.294874Z", "url": "https://files.pythonhosted.org/packages/26/50/d40f2fb9b1701b85450c9637ae154d7f56701f1f558f8784bdd9126a686a/youtubedata-1.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f7ff57d3051d6d2b7a525916b293006d", "sha256": "bacaead0de32af474ed8685877a1c3779e264b192a74c268c9902a2e158acc99"}, "downloads": -1, "filename": "youtubedata-1.1.1.tar.gz", "has_sig": false, "md5_digest": "f7ff57d3051d6d2b7a525916b293006d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5695, "upload_time": "2019-09-20T03:52:55", "upload_time_iso_8601": "2019-09-20T03:52:55.294874Z", "url": "https://files.pythonhosted.org/packages/26/50/d40f2fb9b1701b85450c9637ae154d7f56701f1f558f8784bdd9126a686a/youtubedata-1.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:21:48 2020"}