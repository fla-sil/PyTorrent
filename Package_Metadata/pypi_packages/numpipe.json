{"info": {"author": "John Parker", "author_email": "japarker@uchicago.edu", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "License :: OSI Approved :: MIT License", "Operating System :: MacOS", "Operating System :: POSIX", "Programming Language :: Python"], "description": "# NumPipe\nNumPipe is a Python software package that makes long-running tasks easier and faster by executing code in embarrassingly parallel and caching the output to HDF5 files.\n\n## Features\n* Combine computation and visualization code into single scripts. Only re-run computations on request\n* Use the `yield` statement to return data over time that will be periodically cached to file\n* Specify dependencies between cached functions\n* Progress bars similar to `tqdm` that work in parallel to show the progress of running tasks\n* An optional Telegram Messenger bot that can notify the user of completion and send Matplotlib figures and animations\n* Command line arguments to re-run tasks and automatically save Matplotlib figures and animations\n* Option to use the Slurm Workload Manager to automatically create and submit an sbatch file (used on many compute clusters)\n\n## Installation\nNumPipe can be installed with pip\n```shell\npip install numpipe\n```\n\n## Examples\n\n### single task\n```python\nfrom numpipe import scheduler, pbar\nfrom time import sleep\nimport matplotlib.pyplot as plt\n\njob = scheduler()\n\n@job.cache\ndef sim():\n    for i in pbar(range(100)):\n        sleep(.1)   # long running task...\n        yield dict(i=i, x=i**2)\n\n@job.plots\ndef vis():\n    var = job.load(sim)\n    plt.plot(var.i, var.x)\n\nif __name__ == '__main__':\n    job.run()\n```\n\n### parallel tasks\n```python\nfrom numpipe import scheduler, pbar\nfrom time import sleep\nimport matplotlib.pyplot as plt\n\njob = scheduler()\n\n@job.cache\ndef sim(power):\n    for i in pbar(range(100)):\n        sleep(.1)   # long running task...\n        yield dict(i=i, x=i**power)\n\n@job.plots\ndef vis():\n    for name, var in job.load(sim):\n        plt.plot(var.i, var.x)\n\nfor i in range(3):\n    job.add(sim, power=i)\n\nif __name__ == '__main__':\n    job.run()\n```\n### more examples\nSee the [examples folder](https://github.com/johnaparker/numpipe/tree/master/examples) for more usage examples\n\n## Command line arguments\n```\npositional arguments:\n  {display,clean,slurm}\n    display             display available functions and descriptions\n    clean               remove all h5files that are no longer cache functions\n    slurm               run on a system with the Slurm Workload Manager\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -r [RERUN [RERUN ...]], --rerun [RERUN [RERUN ...]]\n                        re-run specific cached functions by name\n  -f, --force           force over-write any existing cached data\n  -d [DELETE [DELETE ...]], --delete [DELETE [DELETE ...]]\n                        delete specified cached data\n  -e EXCLUDE [EXCLUDE ...], --exclude EXCLUDE [EXCLUDE ...]\n                        exclude cached function from being re-run\n  --at-end              only run at_end functions\n  --no-at-end           don't run at_end functions\n  -p [PROCESSES], --processes [PROCESSES]\n                        number of processes to use in parallel execution (default: cpu_count)\n  -ct CACHE_TIME, --cache_time CACHE_TIME\n                        time (in seconds) until data cached data is flushed to file\n  --no-deps             do not rerun functions that depend on other reran functions\n  --mininterval MININTERVAL\n                        time (in seconds) for progress bar mininterval argument\n  --notify              send notifications without delay\n  --notify-message NOTIFY_MESSAGE\n                        send a custom message with other notifications\n  --notify-delay NOTIFY_DELAY\n                        time (in seconds) before notifications will be sent\n  --theme THEME         matplotlib plot theme\n  --figures FIGURES [FIGURES ...]\n                        which figure numbers to display\n  --save [SAVE]         save figures and animations\n  --save-format SAVE_FORMAT [SAVE_FORMAT ...]\n                        file format for figures\n  --save-figs [SAVE_FIGS]\n                        save figures\n  --save-anims [SAVE_ANIMS]\n                        save animations\n  --debug               run in debug mode (single process)\n```\n\n## License\nNumPipe is licensed under the terms of the MIT license.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "cache pipeline hdf5 parallel cluster", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "numpipe", "package_url": "https://pypi.org/project/numpipe/", "platform": "", "project_url": "https://pypi.org/project/numpipe/", "project_urls": null, "release_url": "https://pypi.org/project/numpipe/0.3.0/", "requires_dist": ["numpy", "h5py", "termcolor", "toml", "matplotlib", "tqdm", "colorama", "python-telegram-bot"], "requires_python": "", "summary": "Easily run Python functions in parallel and cache the results", "version": "0.3.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>NumPipe</h1>\n<p>NumPipe is a Python software package that makes long-running tasks easier and faster by executing code in embarrassingly parallel and caching the output to HDF5 files.</p>\n<h2>Features</h2>\n<ul>\n<li>Combine computation and visualization code into single scripts. Only re-run computations on request</li>\n<li>Use the <code>yield</code> statement to return data over time that will be periodically cached to file</li>\n<li>Specify dependencies between cached functions</li>\n<li>Progress bars similar to <code>tqdm</code> that work in parallel to show the progress of running tasks</li>\n<li>An optional Telegram Messenger bot that can notify the user of completion and send Matplotlib figures and animations</li>\n<li>Command line arguments to re-run tasks and automatically save Matplotlib figures and animations</li>\n<li>Option to use the Slurm Workload Manager to automatically create and submit an sbatch file (used on many compute clusters)</li>\n</ul>\n<h2>Installation</h2>\n<p>NumPipe can be installed with pip</p>\n<pre>pip install numpipe\n</pre>\n<h2>Examples</h2>\n<h3>single task</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">numpipe</span> <span class=\"kn\">import</span> <span class=\"n\">scheduler</span><span class=\"p\">,</span> <span class=\"n\">pbar</span>\n<span class=\"kn\">from</span> <span class=\"nn\">time</span> <span class=\"kn\">import</span> <span class=\"n\">sleep</span>\n<span class=\"kn\">import</span> <span class=\"nn\">matplotlib.pyplot</span> <span class=\"k\">as</span> <span class=\"nn\">plt</span>\n\n<span class=\"n\">job</span> <span class=\"o\">=</span> <span class=\"n\">scheduler</span><span class=\"p\">()</span>\n\n<span class=\"nd\">@job</span><span class=\"o\">.</span><span class=\"n\">cache</span>\n<span class=\"k\">def</span> <span class=\"nf\">sim</span><span class=\"p\">():</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">pbar</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">)):</span>\n        <span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"mi\">1</span><span class=\"p\">)</span>   <span class=\"c1\"># long running task...</span>\n        <span class=\"k\">yield</span> <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">=</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"o\">=</span><span class=\"n\">i</span><span class=\"o\">**</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@job</span><span class=\"o\">.</span><span class=\"n\">plots</span>\n<span class=\"k\">def</span> <span class=\"nf\">vis</span><span class=\"p\">():</span>\n    <span class=\"n\">var</span> <span class=\"o\">=</span> <span class=\"n\">job</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"n\">sim</span><span class=\"p\">)</span>\n    <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">var</span><span class=\"o\">.</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">var</span><span class=\"o\">.</span><span class=\"n\">x</span><span class=\"p\">)</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"n\">job</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n</pre>\n<h3>parallel tasks</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">numpipe</span> <span class=\"kn\">import</span> <span class=\"n\">scheduler</span><span class=\"p\">,</span> <span class=\"n\">pbar</span>\n<span class=\"kn\">from</span> <span class=\"nn\">time</span> <span class=\"kn\">import</span> <span class=\"n\">sleep</span>\n<span class=\"kn\">import</span> <span class=\"nn\">matplotlib.pyplot</span> <span class=\"k\">as</span> <span class=\"nn\">plt</span>\n\n<span class=\"n\">job</span> <span class=\"o\">=</span> <span class=\"n\">scheduler</span><span class=\"p\">()</span>\n\n<span class=\"nd\">@job</span><span class=\"o\">.</span><span class=\"n\">cache</span>\n<span class=\"k\">def</span> <span class=\"nf\">sim</span><span class=\"p\">(</span><span class=\"n\">power</span><span class=\"p\">):</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">pbar</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">)):</span>\n        <span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"mi\">1</span><span class=\"p\">)</span>   <span class=\"c1\"># long running task...</span>\n        <span class=\"k\">yield</span> <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">=</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"o\">=</span><span class=\"n\">i</span><span class=\"o\">**</span><span class=\"n\">power</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@job</span><span class=\"o\">.</span><span class=\"n\">plots</span>\n<span class=\"k\">def</span> <span class=\"nf\">vis</span><span class=\"p\">():</span>\n    <span class=\"k\">for</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">var</span> <span class=\"ow\">in</span> <span class=\"n\">job</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"n\">sim</span><span class=\"p\">):</span>\n        <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">var</span><span class=\"o\">.</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">var</span><span class=\"o\">.</span><span class=\"n\">x</span><span class=\"p\">)</span>\n\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">):</span>\n    <span class=\"n\">job</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">sim</span><span class=\"p\">,</span> <span class=\"n\">power</span><span class=\"o\">=</span><span class=\"n\">i</span><span class=\"p\">)</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"n\">job</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n</pre>\n<h3>more examples</h3>\n<p>See the <a href=\"https://github.com/johnaparker/numpipe/tree/master/examples\" rel=\"nofollow\">examples folder</a> for more usage examples</p>\n<h2>Command line arguments</h2>\n<pre><code>positional arguments:\n  {display,clean,slurm}\n    display             display available functions and descriptions\n    clean               remove all h5files that are no longer cache functions\n    slurm               run on a system with the Slurm Workload Manager\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -r [RERUN [RERUN ...]], --rerun [RERUN [RERUN ...]]\n                        re-run specific cached functions by name\n  -f, --force           force over-write any existing cached data\n  -d [DELETE [DELETE ...]], --delete [DELETE [DELETE ...]]\n                        delete specified cached data\n  -e EXCLUDE [EXCLUDE ...], --exclude EXCLUDE [EXCLUDE ...]\n                        exclude cached function from being re-run\n  --at-end              only run at_end functions\n  --no-at-end           don't run at_end functions\n  -p [PROCESSES], --processes [PROCESSES]\n                        number of processes to use in parallel execution (default: cpu_count)\n  -ct CACHE_TIME, --cache_time CACHE_TIME\n                        time (in seconds) until data cached data is flushed to file\n  --no-deps             do not rerun functions that depend on other reran functions\n  --mininterval MININTERVAL\n                        time (in seconds) for progress bar mininterval argument\n  --notify              send notifications without delay\n  --notify-message NOTIFY_MESSAGE\n                        send a custom message with other notifications\n  --notify-delay NOTIFY_DELAY\n                        time (in seconds) before notifications will be sent\n  --theme THEME         matplotlib plot theme\n  --figures FIGURES [FIGURES ...]\n                        which figure numbers to display\n  --save [SAVE]         save figures and animations\n  --save-format SAVE_FORMAT [SAVE_FORMAT ...]\n                        file format for figures\n  --save-figs [SAVE_FIGS]\n                        save figures\n  --save-anims [SAVE_ANIMS]\n                        save animations\n  --debug               run in debug mode (single process)\n</code></pre>\n<h2>License</h2>\n<p>NumPipe is licensed under the terms of the MIT license.</p>\n\n          </div>"}, "last_serial": 7194193, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "8594ba8310abe3035ccf9d338fbcbcea", "sha256": "713ba91c955c3e653bf9eb77d8c7cfc6675d0305bf59c2c64d5ff886a36d896b"}, "downloads": -1, "filename": "numpipe-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "8594ba8310abe3035ccf9d338fbcbcea", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 14990, "upload_time": "2020-01-27T09:24:25", "upload_time_iso_8601": "2020-01-27T09:24:25.228125Z", "url": "https://files.pythonhosted.org/packages/38/3a/4288e7c878ffa7d4efd59168270eaf21c83091f50b6409ef9cfb2aa82dd9/numpipe-0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c5f31b4ba892285180de0f11768f1649", "sha256": "8c31c71952809fc9a0005c7634a8dca63e9f76aba9b8825e11cdce4f51b8918b"}, "downloads": -1, "filename": "numpipe-0.1.tar.gz", "has_sig": false, "md5_digest": "c5f31b4ba892285180de0f11768f1649", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12042, "upload_time": "2020-01-27T09:24:27", "upload_time_iso_8601": "2020-01-27T09:24:27.722494Z", "url": "https://files.pythonhosted.org/packages/a0/b0/409d76a7450610f9065e91b3f0f087cf8373f6d5f276b78ffaf5051c318b/numpipe-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "0a692e936690cbe5806314240705a8a5", "sha256": "f3b790a76061fce72565f54ee4e874a7e280ce44f31ced60f3233b72c66484de"}, "downloads": -1, "filename": "numpipe-0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "0a692e936690cbe5806314240705a8a5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 25165, "upload_time": "2020-03-19T21:54:12", "upload_time_iso_8601": "2020-03-19T21:54:12.886717Z", "url": "https://files.pythonhosted.org/packages/fa/24/5bae7db196ceede574b63b31c4ea21f83763c35461f23211965cb74c4a18/numpipe-0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bff255fa7a06b98cd63aa3e129bdcbd1", "sha256": "2a4f8c60f8783f0a8396a35cc6411d8fc20e8056d5945449e35662283735b74d"}, "downloads": -1, "filename": "numpipe-0.2.tar.gz", "has_sig": false, "md5_digest": "bff255fa7a06b98cd63aa3e129bdcbd1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21295, "upload_time": "2020-03-19T21:54:14", "upload_time_iso_8601": "2020-03-19T21:54:14.525084Z", "url": "https://files.pythonhosted.org/packages/da/35/bc10bae6518d8b57dd6dcfd94a2c4463b1d9e6e9c25abc9e93dd0a1bd7b0/numpipe-0.2.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "ed986fcd05fe37a4d569079966e0ce8f", "sha256": "3a41cfac9c8cca624a2e70e4d044ebd766e31891c4b94761832d5e370e49eca9"}, "downloads": -1, "filename": "numpipe-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "ed986fcd05fe37a4d569079966e0ce8f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 25330, "upload_time": "2020-03-20T02:53:35", "upload_time_iso_8601": "2020-03-20T02:53:35.539242Z", "url": "https://files.pythonhosted.org/packages/88/e6/c4d296211324da2a0a7741a9bfcf7c1d4e9788f96e35a868453b81183d1e/numpipe-0.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f2abcbd12c7fad0106aedf39aec654ab", "sha256": "9315dd79cf04286521a8f6de90abec5cbab49bf13da9c113fc559d6986cb05f6"}, "downloads": -1, "filename": "numpipe-0.2.1.tar.gz", "has_sig": false, "md5_digest": "f2abcbd12c7fad0106aedf39aec654ab", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21459, "upload_time": "2020-03-20T02:53:37", "upload_time_iso_8601": "2020-03-20T02:53:37.302787Z", "url": "https://files.pythonhosted.org/packages/d6/4e/e1f0194aab11e21274ae92f3fff240016f5eed3e6ca843fa5318eeab05f8/numpipe-0.2.1.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "5dcf2738ad0c3f531ddca5fb6026459b", "sha256": "302a67772454900558e53df5c894944225a1c68620892c361d9ef00d07d2ae21"}, "downloads": -1, "filename": "numpipe-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "5dcf2738ad0c3f531ddca5fb6026459b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 26909, "upload_time": "2020-05-08T05:15:14", "upload_time_iso_8601": "2020-05-08T05:15:14.295216Z", "url": "https://files.pythonhosted.org/packages/34/b5/9e61b842cf7770f976de0b9e427f39dea1c41f56176e7a2d5eb9a66838a7/numpipe-0.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d576611204b7ad0859717cad3b85aec6", "sha256": "72b8fe481fbf86285ccdf8c6786280d470650378ee1d848303e6f88a07ea409b"}, "downloads": -1, "filename": "numpipe-0.3.0.tar.gz", "has_sig": false, "md5_digest": "d576611204b7ad0859717cad3b85aec6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24242, "upload_time": "2020-05-08T05:15:16", "upload_time_iso_8601": "2020-05-08T05:15:16.263739Z", "url": "https://files.pythonhosted.org/packages/b3/55/ea248a50fbed71b22819cf8147643816a1345f919939423bf0de8244a3d6/numpipe-0.3.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "5dcf2738ad0c3f531ddca5fb6026459b", "sha256": "302a67772454900558e53df5c894944225a1c68620892c361d9ef00d07d2ae21"}, "downloads": -1, "filename": "numpipe-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "5dcf2738ad0c3f531ddca5fb6026459b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 26909, "upload_time": "2020-05-08T05:15:14", "upload_time_iso_8601": "2020-05-08T05:15:14.295216Z", "url": "https://files.pythonhosted.org/packages/34/b5/9e61b842cf7770f976de0b9e427f39dea1c41f56176e7a2d5eb9a66838a7/numpipe-0.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d576611204b7ad0859717cad3b85aec6", "sha256": "72b8fe481fbf86285ccdf8c6786280d470650378ee1d848303e6f88a07ea409b"}, "downloads": -1, "filename": "numpipe-0.3.0.tar.gz", "has_sig": false, "md5_digest": "d576611204b7ad0859717cad3b85aec6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24242, "upload_time": "2020-05-08T05:15:16", "upload_time_iso_8601": "2020-05-08T05:15:16.263739Z", "url": "https://files.pythonhosted.org/packages/b3/55/ea248a50fbed71b22819cf8147643816a1345f919939423bf0de8244a3d6/numpipe-0.3.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:44:12 2020"}