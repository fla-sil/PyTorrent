{"info": {"author": "Fabiano Engler", "author_email": "fabianoengler@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Software Development :: Libraries"], "description": "[![Build Status](https://travis-ci.com/fabianoengler/dictvars.svg?branch=master)](https://travis-ci.com/fabianoengler/dictvars)\n[![Coverage Status](https://coveralls.io/repos/github/fabianoengler/dictvars/badge.svg)](https://coveralls.io/github/fabianoengler/dictvars)\n[![PyPI - Wheel](https://img.shields.io/pypi/wheel/dictvars)](https://pypi.org/project/dictvars/)\n[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/dictvars)](https://pypi.org/project/dictvars/)\n[![GitHub](https://img.shields.io/github/license/fabianoengler/dictvars?color=sucess)](https://github.com/fabianoengler/dictvars/blob/master/LICENSE.txt)\n\n\n# dictvars\n\nCreate dicts from variables in scope.\n\n\n## Why?\n\nIn python it is very common to create a dict from variables already\ndefined, for example when returning a context dict from a view function\nthat will be passed to a serializer or a template render.\n\nCode like this:\n\n```python\n    return dict(user=user, form=form, comments=comments)\n```\n\nWith `varsdict` you can get rid of the redundancy of having all\nvariables named twice in the code.\n\nThe above code can be replaced for this:\n\n```python\n    return dictvars(user, form, comments)\n```\n\nAlternatively, variable names can be passed as strings with `varsnamed`:\n\n```python\n    return varsnamed('form', 'comments', 'myapp')\n```\n\n## Install\n\n```\npip install dictvars\n```\n\n## Example\n\nGlobal variables can be passed to `varsdict` as well.\n\nThe following example is a complete code to illustrate how\na \"real\" code looks like when using and not using `varsdict`\n and `varsnamed`.\n\n```python\nfrom dictvars import dictvars, varsnamed\n\n\nmyapp = 'MyApp'  # a global var\n\n\ndef somefunc_regular_python():\n    # pretend this is a controller code that makes sense\n    user = dict(some='very', complex_='expression')\n    permission = user.get('permission', False)\n    user_has_permission = bool(permission)\n    form = dict(another='object', perm=user_has_permission)\n    comments = []\n    for values in [d.values() for d in [user, form]]:\n        comments.extend([v for v in values if isinstance(v, str)])\n\n    return dict(form=form, comments=comments, myapp=myapp)\n\n\ndef somefunc_dictvars():\n    # pretend this is a controller code that makes sense\n    user = dict(some='very', complex_='expression')\n    permission = user.get('permission', False)\n    user_has_permission = bool(permission)\n    form = dict(another='object', perm=user_has_permission)\n    comments = []\n    for values in [d.values() for d in [user, form]]:\n        comments.extend([v for v in values if isinstance(v, str)])\n\n    return dictvars(form, comments, myapp)\n\n\ndef somefunc_varsnamed():\n    # pretend this is a controller code that makes sense\n    user = dict(some='very', complex_='expression')\n    permission = user.get('permission', False)\n    user_has_permission = bool(permission)\n    form = dict(another='object', perm=user_has_permission)\n    comments = []\n    for values in [d.values() for d in [user, form]]:\n        comments.extend([v for v in values if isinstance(v, str)])\n\n    return varsnamed('form', 'comments', 'myapp')\n\n\nif __name__ == '__main__':\n    from pprint import pprint\n    pprint(somefunc_regular_python())\n    pprint(somefunc_dictvars())\n    pprint(somefunc_varsnamed())\n\n```\n\n\nOutput is the same in all versions:\n\n```\n{'comments': ['very', 'expression', 'object'],\n 'form': {'another': 'object', 'perm': False},\n 'myapp': 'MyApp'}\n{'comments': ['very', 'expression', 'object'],\n 'form': {'another': 'object', 'perm': False},\n 'myapp': 'MyApp'}\n{'comments': ['very', 'expression', 'object'],\n 'form': {'another': 'object', 'perm': False},\n 'myapp': 'MyApp'}\n```\n\n## Renaming variables\n\nThe standard kwargs syntax of `dict` is also supported by `dictvars`.\n\nSuppose you have a variable `current_user` but you want to use only `user`\non your dict:\n\n```python\ndef somefunc_dictvars(current_user):\n    form = dict(some='very', complex_='expression')\n    comments = ['bla', 'bla']\n\n    return dictvars(form, comments, app=myapp, user=current_user)\n```\n\nWorks as expected:\n\n```\n{'app': 'MyApp',\n 'comments': ['bla', 'bla'],\n 'form': {'some': 'very', 'complex_': 'expression'},\n 'user': 'John Do'}\n```\n\n\n## Limitations\n\nTo create a dict from the passed variables, some \"magic\" is done to\nobtain the original variables names: the variables list from the scope\nis traversed looking for variables that are the same (same reference,\nsame id).\n\nThis implementation detail can lead to unintended leak of variables\nwhen an object is referenced more then one time.\n\nAn example:\n\n```python\ndef somefunc():\n    a = '1'\n    b = '2'\n    c = '3'\n    leak = b\n    return dictvars(a, b)\n\nprint(somefunc())\n```\n\nReturns:\n```\n{'a': '1',\n 'b': '2',\n 'leak': '2'}\n```\n\nPlease note that no new value or object is leaked, only the name of\nan object that was already in the dict.\n\nI find that this is rare enough to not be a problem most of the time,\nadditional variables returned usually can just be ignored.\n\nI'm not sure how to fix this yet. Open to suggestions.\n\nIf this is a problem on a specific context, one can just pass the\noffending variable with a explicit name, just like a regular dict:\n\n```python\ndef somefunc():\n    a = '1'\n    b = '2'\n    c = '3'\n    no_leaks_now = b\n    return dictvars(a, b=b)\n\nprint(somefunc())\n```\n\nReturns:\n```\n{'a': '1',\n 'b': '2'}\n```\n\nYet another alternative in such cases would be to swap `dictvars` for\n`varsnamed`:\n\n```python\n    return varsnamed('a', 'b')\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/fabianoengler/dictvars", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "dictvars", "package_url": "https://pypi.org/project/dictvars/", "platform": "", "project_url": "https://pypi.org/project/dictvars/", "project_urls": {"Homepage": "https://github.com/fabianoengler/dictvars"}, "release_url": "https://pypi.org/project/dictvars/0.2.0/", "requires_dist": null, "requires_python": ">=3.5", "summary": "Create dicts from variables in scope", "version": "0.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://travis-ci.com/fabianoengler/dictvars\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d9c08aa193dab6fbba5f6ee5ba9641b1fa17f640/68747470733a2f2f7472617669732d63692e636f6d2f66616269616e6f656e676c65722f64696374766172732e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://coveralls.io/github/fabianoengler/dictvars\" rel=\"nofollow\"><img alt=\"Coverage Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9f7015c4b44ff86e04e8127bf44adddb74064185/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f66616269616e6f656e676c65722f64696374766172732f62616467652e737667\"></a>\n<a href=\"https://pypi.org/project/dictvars/\" rel=\"nofollow\"><img alt=\"PyPI - Wheel\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/41a0976e3f596c9982e4a43c7846d7232cc601c8/68747470733a2f2f696d672e736869656c64732e696f2f707970692f776865656c2f6469637476617273\"></a>\n<a href=\"https://pypi.org/project/dictvars/\" rel=\"nofollow\"><img alt=\"PyPI - Python Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c2582133d109b9d562914a0ca3effa6c81c2de6a/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f6469637476617273\"></a>\n<a href=\"https://github.com/fabianoengler/dictvars/blob/master/LICENSE.txt\" rel=\"nofollow\"><img alt=\"GitHub\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b23a9b2731e74cf81ef3a1d1c46696bfd830cf41/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f66616269616e6f656e676c65722f64696374766172733f636f6c6f723d737563657373\"></a></p>\n<h1>dictvars</h1>\n<p>Create dicts from variables in scope.</p>\n<h2>Why?</h2>\n<p>In python it is very common to create a dict from variables already\ndefined, for example when returning a context dict from a view function\nthat will be passed to a serializer or a template render.</p>\n<p>Code like this:</p>\n<pre>    <span class=\"k\">return</span> <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"o\">=</span><span class=\"n\">user</span><span class=\"p\">,</span> <span class=\"n\">form</span><span class=\"o\">=</span><span class=\"n\">form</span><span class=\"p\">,</span> <span class=\"n\">comments</span><span class=\"o\">=</span><span class=\"n\">comments</span><span class=\"p\">)</span>\n</pre>\n<p>With <code>varsdict</code> you can get rid of the redundancy of having all\nvariables named twice in the code.</p>\n<p>The above code can be replaced for this:</p>\n<pre>    <span class=\"k\">return</span> <span class=\"n\">dictvars</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"p\">,</span> <span class=\"n\">form</span><span class=\"p\">,</span> <span class=\"n\">comments</span><span class=\"p\">)</span>\n</pre>\n<p>Alternatively, variable names can be passed as strings with <code>varsnamed</code>:</p>\n<pre>    <span class=\"k\">return</span> <span class=\"n\">varsnamed</span><span class=\"p\">(</span><span class=\"s1\">'form'</span><span class=\"p\">,</span> <span class=\"s1\">'comments'</span><span class=\"p\">,</span> <span class=\"s1\">'myapp'</span><span class=\"p\">)</span>\n</pre>\n<h2>Install</h2>\n<pre><code>pip install dictvars\n</code></pre>\n<h2>Example</h2>\n<p>Global variables can be passed to <code>varsdict</code> as well.</p>\n<p>The following example is a complete code to illustrate how\na \"real\" code looks like when using and not using <code>varsdict</code>\nand <code>varsnamed</code>.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">dictvars</span> <span class=\"kn\">import</span> <span class=\"n\">dictvars</span><span class=\"p\">,</span> <span class=\"n\">varsnamed</span>\n\n\n<span class=\"n\">myapp</span> <span class=\"o\">=</span> <span class=\"s1\">'MyApp'</span>  <span class=\"c1\"># a global var</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">somefunc_regular_python</span><span class=\"p\">():</span>\n    <span class=\"c1\"># pretend this is a controller code that makes sense</span>\n    <span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">some</span><span class=\"o\">=</span><span class=\"s1\">'very'</span><span class=\"p\">,</span> <span class=\"n\">complex_</span><span class=\"o\">=</span><span class=\"s1\">'expression'</span><span class=\"p\">)</span>\n    <span class=\"n\">permission</span> <span class=\"o\">=</span> <span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'permission'</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">)</span>\n    <span class=\"n\">user_has_permission</span> <span class=\"o\">=</span> <span class=\"nb\">bool</span><span class=\"p\">(</span><span class=\"n\">permission</span><span class=\"p\">)</span>\n    <span class=\"n\">form</span> <span class=\"o\">=</span> <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">another</span><span class=\"o\">=</span><span class=\"s1\">'object'</span><span class=\"p\">,</span> <span class=\"n\">perm</span><span class=\"o\">=</span><span class=\"n\">user_has_permission</span><span class=\"p\">)</span>\n    <span class=\"n\">comments</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">for</span> <span class=\"n\">values</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">()</span> <span class=\"k\">for</span> <span class=\"n\">d</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"n\">user</span><span class=\"p\">,</span> <span class=\"n\">form</span><span class=\"p\">]]:</span>\n        <span class=\"n\">comments</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">([</span><span class=\"n\">v</span> <span class=\"k\">for</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"n\">values</span> <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">)])</span>\n\n    <span class=\"k\">return</span> <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">form</span><span class=\"o\">=</span><span class=\"n\">form</span><span class=\"p\">,</span> <span class=\"n\">comments</span><span class=\"o\">=</span><span class=\"n\">comments</span><span class=\"p\">,</span> <span class=\"n\">myapp</span><span class=\"o\">=</span><span class=\"n\">myapp</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">somefunc_dictvars</span><span class=\"p\">():</span>\n    <span class=\"c1\"># pretend this is a controller code that makes sense</span>\n    <span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">some</span><span class=\"o\">=</span><span class=\"s1\">'very'</span><span class=\"p\">,</span> <span class=\"n\">complex_</span><span class=\"o\">=</span><span class=\"s1\">'expression'</span><span class=\"p\">)</span>\n    <span class=\"n\">permission</span> <span class=\"o\">=</span> <span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'permission'</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">)</span>\n    <span class=\"n\">user_has_permission</span> <span class=\"o\">=</span> <span class=\"nb\">bool</span><span class=\"p\">(</span><span class=\"n\">permission</span><span class=\"p\">)</span>\n    <span class=\"n\">form</span> <span class=\"o\">=</span> <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">another</span><span class=\"o\">=</span><span class=\"s1\">'object'</span><span class=\"p\">,</span> <span class=\"n\">perm</span><span class=\"o\">=</span><span class=\"n\">user_has_permission</span><span class=\"p\">)</span>\n    <span class=\"n\">comments</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">for</span> <span class=\"n\">values</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">()</span> <span class=\"k\">for</span> <span class=\"n\">d</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"n\">user</span><span class=\"p\">,</span> <span class=\"n\">form</span><span class=\"p\">]]:</span>\n        <span class=\"n\">comments</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">([</span><span class=\"n\">v</span> <span class=\"k\">for</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"n\">values</span> <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">)])</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">dictvars</span><span class=\"p\">(</span><span class=\"n\">form</span><span class=\"p\">,</span> <span class=\"n\">comments</span><span class=\"p\">,</span> <span class=\"n\">myapp</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">somefunc_varsnamed</span><span class=\"p\">():</span>\n    <span class=\"c1\"># pretend this is a controller code that makes sense</span>\n    <span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">some</span><span class=\"o\">=</span><span class=\"s1\">'very'</span><span class=\"p\">,</span> <span class=\"n\">complex_</span><span class=\"o\">=</span><span class=\"s1\">'expression'</span><span class=\"p\">)</span>\n    <span class=\"n\">permission</span> <span class=\"o\">=</span> <span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'permission'</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">)</span>\n    <span class=\"n\">user_has_permission</span> <span class=\"o\">=</span> <span class=\"nb\">bool</span><span class=\"p\">(</span><span class=\"n\">permission</span><span class=\"p\">)</span>\n    <span class=\"n\">form</span> <span class=\"o\">=</span> <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">another</span><span class=\"o\">=</span><span class=\"s1\">'object'</span><span class=\"p\">,</span> <span class=\"n\">perm</span><span class=\"o\">=</span><span class=\"n\">user_has_permission</span><span class=\"p\">)</span>\n    <span class=\"n\">comments</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">for</span> <span class=\"n\">values</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">()</span> <span class=\"k\">for</span> <span class=\"n\">d</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"n\">user</span><span class=\"p\">,</span> <span class=\"n\">form</span><span class=\"p\">]]:</span>\n        <span class=\"n\">comments</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">([</span><span class=\"n\">v</span> <span class=\"k\">for</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"n\">values</span> <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">)])</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">varsnamed</span><span class=\"p\">(</span><span class=\"s1\">'form'</span><span class=\"p\">,</span> <span class=\"s1\">'comments'</span><span class=\"p\">,</span> <span class=\"s1\">'myapp'</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">pprint</span> <span class=\"kn\">import</span> <span class=\"n\">pprint</span>\n    <span class=\"n\">pprint</span><span class=\"p\">(</span><span class=\"n\">somefunc_regular_python</span><span class=\"p\">())</span>\n    <span class=\"n\">pprint</span><span class=\"p\">(</span><span class=\"n\">somefunc_dictvars</span><span class=\"p\">())</span>\n    <span class=\"n\">pprint</span><span class=\"p\">(</span><span class=\"n\">somefunc_varsnamed</span><span class=\"p\">())</span>\n</pre>\n<p>Output is the same in all versions:</p>\n<pre><code>{'comments': ['very', 'expression', 'object'],\n 'form': {'another': 'object', 'perm': False},\n 'myapp': 'MyApp'}\n{'comments': ['very', 'expression', 'object'],\n 'form': {'another': 'object', 'perm': False},\n 'myapp': 'MyApp'}\n{'comments': ['very', 'expression', 'object'],\n 'form': {'another': 'object', 'perm': False},\n 'myapp': 'MyApp'}\n</code></pre>\n<h2>Renaming variables</h2>\n<p>The standard kwargs syntax of <code>dict</code> is also supported by <code>dictvars</code>.</p>\n<p>Suppose you have a variable <code>current_user</code> but you want to use only <code>user</code>\non your dict:</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">somefunc_dictvars</span><span class=\"p\">(</span><span class=\"n\">current_user</span><span class=\"p\">):</span>\n    <span class=\"n\">form</span> <span class=\"o\">=</span> <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">some</span><span class=\"o\">=</span><span class=\"s1\">'very'</span><span class=\"p\">,</span> <span class=\"n\">complex_</span><span class=\"o\">=</span><span class=\"s1\">'expression'</span><span class=\"p\">)</span>\n    <span class=\"n\">comments</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'bla'</span><span class=\"p\">,</span> <span class=\"s1\">'bla'</span><span class=\"p\">]</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">dictvars</span><span class=\"p\">(</span><span class=\"n\">form</span><span class=\"p\">,</span> <span class=\"n\">comments</span><span class=\"p\">,</span> <span class=\"n\">app</span><span class=\"o\">=</span><span class=\"n\">myapp</span><span class=\"p\">,</span> <span class=\"n\">user</span><span class=\"o\">=</span><span class=\"n\">current_user</span><span class=\"p\">)</span>\n</pre>\n<p>Works as expected:</p>\n<pre><code>{'app': 'MyApp',\n 'comments': ['bla', 'bla'],\n 'form': {'some': 'very', 'complex_': 'expression'},\n 'user': 'John Do'}\n</code></pre>\n<h2>Limitations</h2>\n<p>To create a dict from the passed variables, some \"magic\" is done to\nobtain the original variables names: the variables list from the scope\nis traversed looking for variables that are the same (same reference,\nsame id).</p>\n<p>This implementation detail can lead to unintended leak of variables\nwhen an object is referenced more then one time.</p>\n<p>An example:</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">somefunc</span><span class=\"p\">():</span>\n    <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"s1\">'1'</span>\n    <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"s1\">'2'</span>\n    <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"s1\">'3'</span>\n    <span class=\"n\">leak</span> <span class=\"o\">=</span> <span class=\"n\">b</span>\n    <span class=\"k\">return</span> <span class=\"n\">dictvars</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">somefunc</span><span class=\"p\">())</span>\n</pre>\n<p>Returns:</p>\n<pre><code>{'a': '1',\n 'b': '2',\n 'leak': '2'}\n</code></pre>\n<p>Please note that no new value or object is leaked, only the name of\nan object that was already in the dict.</p>\n<p>I find that this is rare enough to not be a problem most of the time,\nadditional variables returned usually can just be ignored.</p>\n<p>I'm not sure how to fix this yet. Open to suggestions.</p>\n<p>If this is a problem on a specific context, one can just pass the\noffending variable with a explicit name, just like a regular dict:</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">somefunc</span><span class=\"p\">():</span>\n    <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"s1\">'1'</span>\n    <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"s1\">'2'</span>\n    <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"s1\">'3'</span>\n    <span class=\"n\">no_leaks_now</span> <span class=\"o\">=</span> <span class=\"n\">b</span>\n    <span class=\"k\">return</span> <span class=\"n\">dictvars</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"o\">=</span><span class=\"n\">b</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">somefunc</span><span class=\"p\">())</span>\n</pre>\n<p>Returns:</p>\n<pre><code>{'a': '1',\n 'b': '2'}\n</code></pre>\n<p>Yet another alternative in such cases would be to swap <code>dictvars</code> for\n<code>varsnamed</code>:</p>\n<pre>    <span class=\"k\">return</span> <span class=\"n\">varsnamed</span><span class=\"p\">(</span><span class=\"s1\">'a'</span><span class=\"p\">,</span> <span class=\"s1\">'b'</span><span class=\"p\">)</span>\n</pre>\n\n          </div>"}, "last_serial": 6174147, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "414ecd831c9261ce3c674421faecaeb5", "sha256": "8a3c5ad1eba59f7bf1786bd78a807b1d8f028dcc902c3ed19b6e5ec0954fe6ac"}, "downloads": -1, "filename": "dictvars-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "414ecd831c9261ce3c674421faecaeb5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 4484, "upload_time": "2019-11-21T06:01:13", "upload_time_iso_8601": "2019-11-21T06:01:13.406720Z", "url": "https://files.pythonhosted.org/packages/68/f9/caf919fb2ecdc0d6bd0d078546b24bf5998da6c6f63e6b89cdbce8ea2ec0/dictvars-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "660aab66acc3c9540026106d8869f3bb", "sha256": "590e09b22c3613584004560907563938be09a7a345ed6b4c57e28068110bcc36"}, "downloads": -1, "filename": "dictvars-0.1.0.tar.gz", "has_sig": false, "md5_digest": "660aab66acc3c9540026106d8869f3bb", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 6219, "upload_time": "2019-11-21T06:01:16", "upload_time_iso_8601": "2019-11-21T06:01:16.070350Z", "url": "https://files.pythonhosted.org/packages/83/63/cad8c866d6487b6d7b6125c7583e5619ea2b6918c2f94a3716a63ba2d1c1/dictvars-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "1a0b02e42449c3792fb52fb9f69efac8", "sha256": "8ea1d7c4621ed7f6805c1e980e44bae03c8e317ddcafd8f57f92ea387bb128aa"}, "downloads": -1, "filename": "dictvars-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "1a0b02e42449c3792fb52fb9f69efac8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 4850, "upload_time": "2019-11-21T10:15:17", "upload_time_iso_8601": "2019-11-21T10:15:17.456182Z", "url": "https://files.pythonhosted.org/packages/a2/34/d730ff6d5b330ae6ca2ca2de3a68b4af4f037eb1dcc370fb1c56928fed1a/dictvars-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c6dad54a77ae5fdc87154f17aad5c824", "sha256": "1170c1eb26e952682c46e9dfc7149f4401753ff83667bb6d8f21f45ede083cb5"}, "downloads": -1, "filename": "dictvars-0.2.0.tar.gz", "has_sig": false, "md5_digest": "c6dad54a77ae5fdc87154f17aad5c824", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 7373, "upload_time": "2019-11-21T10:15:19", "upload_time_iso_8601": "2019-11-21T10:15:19.300974Z", "url": "https://files.pythonhosted.org/packages/04/b5/c99f5423dad80e5b70c338a35d0f46d97ac50ea922ec07945708f7660d67/dictvars-0.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "1a0b02e42449c3792fb52fb9f69efac8", "sha256": "8ea1d7c4621ed7f6805c1e980e44bae03c8e317ddcafd8f57f92ea387bb128aa"}, "downloads": -1, "filename": "dictvars-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "1a0b02e42449c3792fb52fb9f69efac8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 4850, "upload_time": "2019-11-21T10:15:17", "upload_time_iso_8601": "2019-11-21T10:15:17.456182Z", "url": "https://files.pythonhosted.org/packages/a2/34/d730ff6d5b330ae6ca2ca2de3a68b4af4f037eb1dcc370fb1c56928fed1a/dictvars-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c6dad54a77ae5fdc87154f17aad5c824", "sha256": "1170c1eb26e952682c46e9dfc7149f4401753ff83667bb6d8f21f45ede083cb5"}, "downloads": -1, "filename": "dictvars-0.2.0.tar.gz", "has_sig": false, "md5_digest": "c6dad54a77ae5fdc87154f17aad5c824", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 7373, "upload_time": "2019-11-21T10:15:19", "upload_time_iso_8601": "2019-11-21T10:15:19.300974Z", "url": "https://files.pythonhosted.org/packages/04/b5/c99f5423dad80e5b70c338a35d0f46d97ac50ea922ec07945708f7660d67/dictvars-0.2.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:38:30 2020"}