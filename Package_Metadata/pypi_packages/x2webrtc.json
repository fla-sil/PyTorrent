{"info": {"author": "Yuki Igarashi", "author_email": "me@bonprosoft.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: 3.9"], "description": "# x2webrtc\n[![PyPI](https://img.shields.io/pypi/v/x2webrtc.svg)](https://pypi.org/project/x2webrtc/)\n[![PyPI Supported Python Versions](https://img.shields.io/pypi/pyversions/x2webrtc.svg)](https://pypi.org/project/x2webrtc/)\n[![GitHub license](https://img.shields.io/github/license/bonprosoft/x2webrtc.svg)](https://github.com/bonprosoft/x2webrtc)\n\nx2webrtc is a command-line tool for forwarding an X window as a media track through WebRTC.\nIt is a simple tool; it just grabs screenshots for the window with Xlib and send them via a WebRTC stream, but it can realize the following features:\n\n- You can send an X window through the NAT.\n- A media stream is transported using a secure method. (compared to the standard VNC)\n- You can easily install it by pip.\n- You don't necessarily have admin access to the system.\n\n## Install\n\nNote that Python 3.6+ and X Window System are required to use the tool.\n\n```sh\npip install x2webrtc\n```\n\nThe tool requires `aiortc` to work with WebRTC.\nPlease refer to [the install instruction](https://github.com/aiortc/aiortc#linux) of `aiortc` if you failed to install it automatically.\n\n## Quickstart\n\n**NOTE**:\nCurrently, hand signaling is required to start a WebRTC session.\nI am planning to implement a plug-in system so that a user can customize its signaling method.\n\n1. Start x2webrtc.\n\n    ```sh\n    x2webrtc forward\n    ```\n\n    If `DISPLAY` environment is not set to your environment, pass `--display` argument to specify an X server.\n\n    ```sh\n    x2webrtc forward --display :0\n    ```\n\n2. (tentative) Copy a WebRTC offer.\nYou will see the following message on your terminal:\n\n    ```sh\n    -- Please send this message to the remote party --\n    {\"sdp\": \"...\" , \"type\": \"offer\"}\n    ```\n\n    Please copy the offer json.\n\n3. (tentative) Open [the web viewer](https://bonprosoft.github.io/x2webrtc/online_viewer/) and click `Connect` button.\n4. (tentative) Paste the offer json into `Input Offer` text-area (A) and click `Create Answer` button (B). Then you will get an answer json (C). Copy the json again.\n![](https://raw.githubusercontent.com/bonprosoft/x2webrtc/master/imgs/quick_start_web_client.png)\n5. (tentative) Go back to your terminal. Paste the answer json into the terminal, then press Enter.\n6. Now you will see your screen in the web viewer.\n\n## Usage\n\n```sh\nusage: x2webrtc [-h] [-v] COMMANDS ...\n\nCommands:\n    forward       forward X Window\n    info          show window information of the X server\n\noptional arguments:\n  -h, --help      show this help message and exit\n  -v, --verbose   verbose; can be used up to 3 times to increase verbosity\n```\n\n### x2webrtc forward\n\nForward a specified X window.\n\n```sh\nusage: x2webrtc forward [-h] [--display DISPLAY]\n\noptional arguments:\n  -h, --help         show this help message and exit\n  --display DISPLAY  display_name of the X server to connect to (e.g., hostname:1, :1.)\n```\n\n### x2webrtc info\n\nShow information on a specified X server.\n\n```sh\nusage: x2webrtc info [-h] [--display DISPLAY] [--props]\n\noptional arguments:\n  -h, --help         show this help message and exit\n  --display DISPLAY  display_name of the X server to connect to (e.g., hostname:1, :1.)\n  --props            show all properties of each window\n```\n\n## Configuration\n\nThe order of preference is the `$X2WEBRTC_CONFIG` environment variable, then `.x2webrtc` file of the working directory, and then `~/.x2webrtc`.\nThe config file must be in the YAML format.\nHere is an example of a configuration file:\n```yaml\nsignaling_plugin: \"path/to/signaling_plugin.py\"  # optional\npeer_connection:                 # optional\n  ice_servers:\n    - url: stun:stun.example.com\n    - url: turn:turn.example.com\n      username: shamiko          # optional\n      credential: momo           # optional\n```\n\nFor more details, please refer to `x2webrtc/config.py`.\n\n## Plugin\n\nYou can customize the signaling method that x2webrtc uses for a WebRTC peer connection by using a plugin.\nHere is an example of a plugin implementation:\n```py\nfrom typing import Type\nfrom aiortc import RTCPeerConnection\nfrom x2webrtc.plugin import SignalingPlugin\n\nclass SomePlugin(SignalingPlugin):\n    async def __call__(self, pc: RTCPeerConnection) -> bool:\n        return True\n\ndef plugin() -> Type[SignalingPlugin]:\n    return SomePlugin\n```\n\nA plugin file must have a `plugin` function that returns a subclass of `SignalingPlugin`.\nThe plugin file is required to specify in a configuration file, as already mentioned in the Configuration section.\n\nFor more details, please refer to `CopyAndPasteSignaling` class located in `x2webrtc/signaling.py`.\n\n## FAQ\n\n### Failed to install PyAV\n`PyAV` uses `AV_CODEC_CAP_HARDWARE` macro in its source code, but it seems to be available in `libavcodec >= 58.0`. Check the version of libavcodec and try again.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/bonprosoft/x2webrtc", "keywords": "", "license": "MIT License", "maintainer": "", "maintainer_email": "", "name": "x2webrtc", "package_url": "https://pypi.org/project/x2webrtc/", "platform": "", "project_url": "https://pypi.org/project/x2webrtc/", "project_urls": {"Homepage": "https://github.com/bonprosoft/x2webrtc"}, "release_url": "https://pypi.org/project/x2webrtc/0.2.0/", "requires_dist": ["Pillow (<7.1.0,>=7.0.0)", "PyYAML (<6.0.0,>=5.0.0)", "aiortc (<0.10.0,>=0.9.0)", "av (<8.0.0,>=7.0.0)", "dacite (<1.3.0,>=1.2.0)", "numpy (<1.19.0,>=1.18.0)", "python-xlib (<1.0,>=0.26)", "dataclasses ; python_version < \"3.7\"", "pytest (<6.0.0,>=5.0.0) ; extra == 'test'", "pytest-asyncio (<1.0.0,>=0.10.0) ; extra == 'test'"], "requires_python": "", "summary": "Forward X window through WebRTC as a MediaStream", "version": "0.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>x2webrtc</h1>\n<p><a href=\"https://pypi.org/project/x2webrtc/\" rel=\"nofollow\"><img alt=\"PyPI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/26eccb71414dee455cda28e7ac54901a73d7c071/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f78327765627274632e737667\"></a>\n<a href=\"https://pypi.org/project/x2webrtc/\" rel=\"nofollow\"><img alt=\"PyPI Supported Python Versions\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3bb2071caec8cc1236ad8be71cd5b7268e1a4ec4/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f78327765627274632e737667\"></a>\n<a href=\"https://github.com/bonprosoft/x2webrtc\" rel=\"nofollow\"><img alt=\"GitHub license\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fe9319699e0b057eba2cc9093c5065b701d28254/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f626f6e70726f736f66742f78327765627274632e737667\"></a></p>\n<p>x2webrtc is a command-line tool for forwarding an X window as a media track through WebRTC.\nIt is a simple tool; it just grabs screenshots for the window with Xlib and send them via a WebRTC stream, but it can realize the following features:</p>\n<ul>\n<li>You can send an X window through the NAT.</li>\n<li>A media stream is transported using a secure method. (compared to the standard VNC)</li>\n<li>You can easily install it by pip.</li>\n<li>You don't necessarily have admin access to the system.</li>\n</ul>\n<h2>Install</h2>\n<p>Note that Python 3.6+ and X Window System are required to use the tool.</p>\n<pre>pip install x2webrtc\n</pre>\n<p>The tool requires <code>aiortc</code> to work with WebRTC.\nPlease refer to <a href=\"https://github.com/aiortc/aiortc#linux\" rel=\"nofollow\">the install instruction</a> of <code>aiortc</code> if you failed to install it automatically.</p>\n<h2>Quickstart</h2>\n<p><strong>NOTE</strong>:\nCurrently, hand signaling is required to start a WebRTC session.\nI am planning to implement a plug-in system so that a user can customize its signaling method.</p>\n<ol>\n<li>\n<p>Start x2webrtc.</p>\n<pre>x2webrtc forward\n</pre>\n<p>If <code>DISPLAY</code> environment is not set to your environment, pass <code>--display</code> argument to specify an X server.</p>\n<pre>x2webrtc forward --display :0\n</pre>\n</li>\n<li>\n<p>(tentative) Copy a WebRTC offer.\nYou will see the following message on your terminal:</p>\n<pre>-- Please send this message to the remote party --\n<span class=\"o\">{</span><span class=\"s2\">\"sdp\"</span>: <span class=\"s2\">\"...\"</span> , <span class=\"s2\">\"type\"</span>: <span class=\"s2\">\"offer\"</span><span class=\"o\">}</span>\n</pre>\n<p>Please copy the offer json.</p>\n</li>\n<li>\n<p>(tentative) Open <a href=\"https://bonprosoft.github.io/x2webrtc/online_viewer/\" rel=\"nofollow\">the web viewer</a> and click <code>Connect</code> button.</p>\n</li>\n<li>\n<p>(tentative) Paste the offer json into <code>Input Offer</code> text-area (A) and click <code>Create Answer</code> button (B). Then you will get an answer json (C). Copy the json again.\n<img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7b52c2878dadd03c73303a6a66b22aa6fb7f4917/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f626f6e70726f736f66742f78327765627274632f6d61737465722f696d67732f717569636b5f73746172745f7765625f636c69656e742e706e67\"></p>\n</li>\n<li>\n<p>(tentative) Go back to your terminal. Paste the answer json into the terminal, then press Enter.</p>\n</li>\n<li>\n<p>Now you will see your screen in the web viewer.</p>\n</li>\n</ol>\n<h2>Usage</h2>\n<pre>usage: x2webrtc <span class=\"o\">[</span>-h<span class=\"o\">]</span> <span class=\"o\">[</span>-v<span class=\"o\">]</span> COMMANDS ...\n\nCommands:\n    forward       forward X Window\n    info          show window information of the X server\n\noptional arguments:\n  -h, --help      show this <span class=\"nb\">help</span> message and <span class=\"nb\">exit</span>\n  -v, --verbose   verbose<span class=\"p\">;</span> can be used up to <span class=\"m\">3</span> <span class=\"nb\">times</span> to increase verbosity\n</pre>\n<h3>x2webrtc forward</h3>\n<p>Forward a specified X window.</p>\n<pre>usage: x2webrtc forward <span class=\"o\">[</span>-h<span class=\"o\">]</span> <span class=\"o\">[</span>--display DISPLAY<span class=\"o\">]</span>\n\noptional arguments:\n  -h, --help         show this <span class=\"nb\">help</span> message and <span class=\"nb\">exit</span>\n  --display DISPLAY  display_name of the X server to connect to <span class=\"o\">(</span>e.g., hostname:1, :1.<span class=\"o\">)</span>\n</pre>\n<h3>x2webrtc info</h3>\n<p>Show information on a specified X server.</p>\n<pre>usage: x2webrtc info <span class=\"o\">[</span>-h<span class=\"o\">]</span> <span class=\"o\">[</span>--display DISPLAY<span class=\"o\">]</span> <span class=\"o\">[</span>--props<span class=\"o\">]</span>\n\noptional arguments:\n  -h, --help         show this <span class=\"nb\">help</span> message and <span class=\"nb\">exit</span>\n  --display DISPLAY  display_name of the X server to connect to <span class=\"o\">(</span>e.g., hostname:1, :1.<span class=\"o\">)</span>\n  --props            show all properties of each window\n</pre>\n<h2>Configuration</h2>\n<p>The order of preference is the <code>$X2WEBRTC_CONFIG</code> environment variable, then <code>.x2webrtc</code> file of the working directory, and then <code>~/.x2webrtc</code>.\nThe config file must be in the YAML format.\nHere is an example of a configuration file:</p>\n<pre><span class=\"nt\">signaling_plugin</span><span class=\"p\">:</span> <span class=\"s\">\"path/to/signaling_plugin.py\"</span>  <span class=\"c1\"># optional</span>\n<span class=\"nt\">peer_connection</span><span class=\"p\">:</span>                 <span class=\"c1\"># optional</span>\n  <span class=\"nt\">ice_servers</span><span class=\"p\">:</span>\n    <span class=\"p p-Indicator\">-</span> <span class=\"nt\">url</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">stun:stun.example.com</span>\n    <span class=\"p p-Indicator\">-</span> <span class=\"nt\">url</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">turn:turn.example.com</span>\n      <span class=\"nt\">username</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">shamiko</span>          <span class=\"c1\"># optional</span>\n      <span class=\"nt\">credential</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">momo</span>           <span class=\"c1\"># optional</span>\n</pre>\n<p>For more details, please refer to <code>x2webrtc/config.py</code>.</p>\n<h2>Plugin</h2>\n<p>You can customize the signaling method that x2webrtc uses for a WebRTC peer connection by using a plugin.\nHere is an example of a plugin implementation:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">Type</span>\n<span class=\"kn\">from</span> <span class=\"nn\">aiortc</span> <span class=\"kn\">import</span> <span class=\"n\">RTCPeerConnection</span>\n<span class=\"kn\">from</span> <span class=\"nn\">x2webrtc.plugin</span> <span class=\"kn\">import</span> <span class=\"n\">SignalingPlugin</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">SomePlugin</span><span class=\"p\">(</span><span class=\"n\">SignalingPlugin</span><span class=\"p\">):</span>\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"fm\">__call__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">pc</span><span class=\"p\">:</span> <span class=\"n\">RTCPeerConnection</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">bool</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">plugin</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Type</span><span class=\"p\">[</span><span class=\"n\">SignalingPlugin</span><span class=\"p\">]:</span>\n    <span class=\"k\">return</span> <span class=\"n\">SomePlugin</span>\n</pre>\n<p>A plugin file must have a <code>plugin</code> function that returns a subclass of <code>SignalingPlugin</code>.\nThe plugin file is required to specify in a configuration file, as already mentioned in the Configuration section.</p>\n<p>For more details, please refer to <code>CopyAndPasteSignaling</code> class located in <code>x2webrtc/signaling.py</code>.</p>\n<h2>FAQ</h2>\n<h3>Failed to install PyAV</h3>\n<p><code>PyAV</code> uses <code>AV_CODEC_CAP_HARDWARE</code> macro in its source code, but it seems to be available in <code>libavcodec &gt;= 58.0</code>. Check the version of libavcodec and try again.</p>\n\n          </div>"}, "last_serial": 6901468, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "6461c569a49f08a1f8e9c075b673765a", "sha256": "bbfa6462b2271f9369d0efa00e7ba9d1cdb93f95a5056c71f88698e307f21d04"}, "downloads": -1, "filename": "x2webrtc-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "6461c569a49f08a1f8e9c075b673765a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 11534, "upload_time": "2020-03-21T16:29:47", "upload_time_iso_8601": "2020-03-21T16:29:47.051962Z", "url": "https://files.pythonhosted.org/packages/e4/a8/b59ea7dbef4ef7be573a6200aebdb1a6d0c533f87c0448c5a4e44e41ef19/x2webrtc-0.1.0-py3-none-any.whl", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "b73b5995c4e328859fd56b37b630ea26", "sha256": "f2643d26551c61963a36c2ab055053dbf9c330bcffa7743d1e221f931491623f"}, "downloads": -1, "filename": "x2webrtc-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "b73b5995c4e328859fd56b37b630ea26", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 14312, "upload_time": "2020-03-28T11:25:57", "upload_time_iso_8601": "2020-03-28T11:25:57.011402Z", "url": "https://files.pythonhosted.org/packages/4b/18/2907cdfbbd00a641fdc4566d88ca23fca57f5f060e024ad1f8fbe22a3c44/x2webrtc-0.2.0-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b73b5995c4e328859fd56b37b630ea26", "sha256": "f2643d26551c61963a36c2ab055053dbf9c330bcffa7743d1e221f931491623f"}, "downloads": -1, "filename": "x2webrtc-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "b73b5995c4e328859fd56b37b630ea26", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 14312, "upload_time": "2020-03-28T11:25:57", "upload_time_iso_8601": "2020-03-28T11:25:57.011402Z", "url": "https://files.pythonhosted.org/packages/4b/18/2907cdfbbd00a641fdc4566d88ca23fca57f5f060e024ad1f8fbe22a3c44/x2webrtc-0.2.0-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 03:26:31 2020"}