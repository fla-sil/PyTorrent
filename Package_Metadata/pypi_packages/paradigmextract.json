{"info": {"author": "Spr\u00e5kbanken", "author_email": "info@spraakbanken.gu.se", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "Intended Audience :: Information Technology", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python"], "description": "## NB!\nThis is Spr\u00e5kbanken's inofficial version of the paradigmextract library.\nThe main version can be found [here](https://github.com/marfors/paradigmextract).\n\n---\\*---   ---\\*---   ---\\*---\n\n# Paradigm learning and paradigm prediction\n\nThe software collection in this repository is related to a body of\nscientific work on paradigm learning and paradigm prediction, of which\nthe following publication is the latest one. See the reference list\nfor previous work.\n\n[Forsberg, M; Hulden, M. (2016). Learning Transducer Models for\nMorphological Analysis from Example Inflections. In Proceedings of\nStatFSM. Association for Computational Linguistics.] (http://anthology.aclweb.org/W16-2405)\n\n## Quick reference\n\n### Paradigm learning: `pextract.py`\n\n#### Description\n\nExtract paradigmatic representations from input inflection tables. See\nSection 2 in Forsberg and Hulden (2016) for details.\n\n#### Example\n\n`$ python src/pextract.py < data/es_verb_train.txt > es_verb.p`\n\n### Non-probabilistic morphological analyzers: `morphanalyzer.py`\n\n#### Description\n\nCreate a foma-compatible morphological analyzer from a paradigm\nfile. The analyzer is non-probabilistic.\n\nOptions:\n* `-o`  recreate original data (all vars must be exactly instantiated as seen in training data)\n* `-c`  constrain variables by generalizing (default pvalue = 0.05)\n* `-u`  unconstrained (all variables are defined as ?+)\n* `-p`  <pvalue>  use <pvalue> together with -c\n* `-s`  keep different analyzers separate instead of merging with\npriority union (may be necessary for some analyzers)\n* `-n`  name of binary foma file to compile to\n\nAny combination of the above may be used. The analyzers are combined\nby priority union, e.g. `-o -c -u` would yield an analyzer\n`[ Goriginal .P. Gconstrained .P. Gunconstrained ]`.\n\n#### Example\n\n`$ python src/morphanalyzer.py -o -c es_verb.p > es_verb.foma`\n\n### Probabilistic morphological analyzers: `morphparser.py`\n\n#### Description\n\nCreate a probabilistic morphological analyzer from a paradigm\nfile.\n\nReads one or more whitespace-separated words from STDIN and\nreturns the most plausible analysis for the set in the format:\n`SCORE  NAME_OF_PARADIGM  VARIABLES  WORDFORM1:BASEFORM,MSD#WORDFORM2:BASEFORM,MSD...`\n\nFlags:\n* `-k num` print the k best analyses\n* `-t`     print the entire table for the best analysis\n* `-d`     print debug info\n* `-n num` use an nth order ngram model for selecting best paradigm (an n-gram model for variables in the paradigm is used)\n\n#### Example\n\n`$ echo \"coger cojo\" | python morphparser.py ./../paradigms/spanish_verbs.p -k 1 -t`\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/spraakbanken/paradigmextract", "keywords": "setup,distutils", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "paradigmextract", "package_url": "https://pypi.org/project/paradigmextract/", "platform": "", "project_url": "https://pypi.org/project/paradigmextract/", "project_urls": {"Bug Tracker": "https://github.com/spraakbanken/paradigmextract", "Documentation": "https://github.com/spraakbanken/paradigmextract", "Homepage": "https://github.com/spraakbanken/paradigmextract", "Source Code": "https://github.com/spraakbanken/paradigmextract"}, "release_url": "https://pypi.org/project/paradigmextract/0.0.7/", "requires_dist": ["pyre-check ; extra == 'dev'", "flake8 ; extra == 'dev'", "pytest ; extra == 'dev'", "pytest-cov ; extra == 'dev'"], "requires_python": "", "summary": "Paradigm learning and paradigm prediction", "version": "0.0.7", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h2>NB!</h2>\n<p>This is Spr\u00e5kbanken's inofficial version of the paradigmextract library.\nThe main version can be found <a href=\"https://github.com/marfors/paradigmextract\" rel=\"nofollow\">here</a>.</p>\n<p>---*---   ---*---   ---*---</p>\n<h1>Paradigm learning and paradigm prediction</h1>\n<p>The software collection in this repository is related to a body of\nscientific work on paradigm learning and paradigm prediction, of which\nthe following publication is the latest one. See the reference list\nfor previous work.</p>\n<p>[Forsberg, M; Hulden, M. (2016). Learning Transducer Models for\nMorphological Analysis from Example Inflections. In Proceedings of\nStatFSM. Association for Computational Linguistics.] (<a href=\"http://anthology.aclweb.org/W16-2405\" rel=\"nofollow\">http://anthology.aclweb.org/W16-2405</a>)</p>\n<h2>Quick reference</h2>\n<h3>Paradigm learning: <code>pextract.py</code></h3>\n<h4>Description</h4>\n<p>Extract paradigmatic representations from input inflection tables. See\nSection 2 in Forsberg and Hulden (2016) for details.</p>\n<h4>Example</h4>\n<p><code>$ python src/pextract.py &lt; data/es_verb_train.txt &gt; es_verb.p</code></p>\n<h3>Non-probabilistic morphological analyzers: <code>morphanalyzer.py</code></h3>\n<h4>Description</h4>\n<p>Create a foma-compatible morphological analyzer from a paradigm\nfile. The analyzer is non-probabilistic.</p>\n<p>Options:</p>\n<ul>\n<li><code>-o</code>  recreate original data (all vars must be exactly instantiated as seen in training data)</li>\n<li><code>-c</code>  constrain variables by generalizing (default pvalue = 0.05)</li>\n<li><code>-u</code>  unconstrained (all variables are defined as ?+)</li>\n<li><code>-p</code>  &lt;pvalue&gt;  use &lt;pvalue&gt; together with -c</li>\n<li><code>-s</code>  keep different analyzers separate instead of merging with\npriority union (may be necessary for some analyzers)</li>\n<li><code>-n</code>  name of binary foma file to compile to</li>\n</ul>\n<p>Any combination of the above may be used. The analyzers are combined\nby priority union, e.g. <code>-o -c -u</code> would yield an analyzer\n<code>[ Goriginal .P. Gconstrained .P. Gunconstrained ]</code>.</p>\n<h4>Example</h4>\n<p><code>$ python src/morphanalyzer.py -o -c es_verb.p &gt; es_verb.foma</code></p>\n<h3>Probabilistic morphological analyzers: <code>morphparser.py</code></h3>\n<h4>Description</h4>\n<p>Create a probabilistic morphological analyzer from a paradigm\nfile.</p>\n<p>Reads one or more whitespace-separated words from STDIN and\nreturns the most plausible analysis for the set in the format:\n<code>SCORE NAME_OF_PARADIGM VARIABLES WORDFORM1:BASEFORM,MSD#WORDFORM2:BASEFORM,MSD...</code></p>\n<p>Flags:</p>\n<ul>\n<li><code>-k num</code> print the k best analyses</li>\n<li><code>-t</code>     print the entire table for the best analysis</li>\n<li><code>-d</code>     print debug info</li>\n<li><code>-n num</code> use an nth order ngram model for selecting best paradigm (an n-gram model for variables in the paradigm is used)</li>\n</ul>\n<h4>Example</h4>\n<p><code>$ echo \"coger cojo\" | python morphparser.py ./../paradigms/spanish_verbs.p -k 1 -t</code></p>\n\n          </div>"}, "last_serial": 6777358, "releases": {"0.0.7": [{"comment_text": "", "digests": {"md5": "52fea4cdf141f0b33ebbd8b9d1b7919b", "sha256": "46efa6b2185fb89409fdecf99c96a131ef5f29a4a2d475e18b065018f93bfbd2"}, "downloads": -1, "filename": "paradigmextract-0.0.7-py3-none-any.whl", "has_sig": false, "md5_digest": "52fea4cdf141f0b33ebbd8b9d1b7919b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 15506, "upload_time": "2020-03-09T13:00:45", "upload_time_iso_8601": "2020-03-09T13:00:45.565430Z", "url": "https://files.pythonhosted.org/packages/dd/b9/e2e3d64caf460ed80059b17dd412521083364cb755a72c581aed803c57fe/paradigmextract-0.0.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "45a9b09de2c30f2cfd152950f50aada0", "sha256": "729678d0d7291523aac7906c5265cfeb88b912b15867c36a2e920c615a4b755c"}, "downloads": -1, "filename": "paradigmextract-0.0.7.tar.gz", "has_sig": false, "md5_digest": "45a9b09de2c30f2cfd152950f50aada0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25193, "upload_time": "2020-03-09T13:00:47", "upload_time_iso_8601": "2020-03-09T13:00:47.303936Z", "url": "https://files.pythonhosted.org/packages/6c/ef/6d5ca7f1c684d950492116974e8d4472057ac47702cd9fef753c1ccf49c6/paradigmextract-0.0.7.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "52fea4cdf141f0b33ebbd8b9d1b7919b", "sha256": "46efa6b2185fb89409fdecf99c96a131ef5f29a4a2d475e18b065018f93bfbd2"}, "downloads": -1, "filename": "paradigmextract-0.0.7-py3-none-any.whl", "has_sig": false, "md5_digest": "52fea4cdf141f0b33ebbd8b9d1b7919b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 15506, "upload_time": "2020-03-09T13:00:45", "upload_time_iso_8601": "2020-03-09T13:00:45.565430Z", "url": "https://files.pythonhosted.org/packages/dd/b9/e2e3d64caf460ed80059b17dd412521083364cb755a72c581aed803c57fe/paradigmextract-0.0.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "45a9b09de2c30f2cfd152950f50aada0", "sha256": "729678d0d7291523aac7906c5265cfeb88b912b15867c36a2e920c615a4b755c"}, "downloads": -1, "filename": "paradigmextract-0.0.7.tar.gz", "has_sig": false, "md5_digest": "45a9b09de2c30f2cfd152950f50aada0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25193, "upload_time": "2020-03-09T13:00:47", "upload_time_iso_8601": "2020-03-09T13:00:47.303936Z", "url": "https://files.pythonhosted.org/packages/6c/ef/6d5ca7f1c684d950492116974e8d4472057ac47702cd9fef753c1ccf49c6/paradigmextract-0.0.7.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:58:41 2020"}