{"info": {"author": "Jan Laukemann", "author_email": "jan.laukemann@fau.de", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "Intended Audience :: Science/Research", "License :: OSI Approved :: GNU Affero General Public License v3", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Topic :: Scientific/Engineering", "Topic :: Software Development", "Topic :: Utilities"], "description": ".. image:: docs/img/osaca-logo.png\n   :alt: OSACA logo\n   :width: 80%\n\nOSACA\n=====\n\nOpen Source Architecture Code Analyzer\n--------------------------------------\n\nFor an innermost loop kernel in assembly, this tool allows automatic instruction fetching of assembly code and automatic runtime prediction including throughput analysis and detection for critical path and loop-carried dependencies.\n\n.. image:: https://travis-ci.org/RRZE-HPC/OSACA.svg?branch=master\n    :target: https://travis-ci.org/RRZE-HPC/OSACA\n    :alt: Build Status\n\n.. image:: https://codecov.io/github/RRZE-HPC/OSACA/coverage.svg?branch=master\n    :target: https://codecov.io/github/RRZE-HPC/OSACA?branch=master\n    :alt: Code Coverage\n\n.. image:: https://readthedocs.org/projects/osaca/badge/?version=latest\n    :target: https://osaca.readthedocs.io/en/latest/?badge=latest\n    :alt: Documentation Status\n\n.. image:: https://img.shields.io/badge/read-the_docs-blue\n    :target: https://osaca.readthedocs.io/\n    :alt: Docs\n\n.. image:: https://img.shields.io/badge/code%20style-black-000000.svg\n    :target: https://github.com/ambv/black\n    :alt: Code Style\n\nGetting started\n===============\n\nInstallation\n------------\nOn most systems with python pip and setuputils installed, just run:\n\n.. code:: bash\n\n    pip install --user osaca\n\nfor the latest release.\n\nTo build OSACA from source, clone this repository using ``git clone https://github.com/RRZE-HPC/OSACA`` and run in the root directory:\n\n.. code:: bash\n\n   python ./setup.py install\n\nAfter installation, OSACA can be started with the command ``osaca`` in the CLI.\n\nDependencies:\n-------------\nAdditional requirements are:\n\n-  `Python3 <https://www.python.org/>`__\n-  `Graphviz <https://www.graphviz.org/>`__ for dependency graph creation (minimal dependency is `libgraphviz-dev` on Ubuntu)\n-  `Kerncraft <https://github.com/RRZE-HPC/kerncraft>`__ >=v0.8.4 for marker insertion\n-   `ibench <https://github.com/RRZE-HPC/ibench>`__ or `asmbench <https://github.com/RRZE-HPC/asmbench/>`__ for throughput/latency measurements\n\nDesign\n======\nA schematic design of OSACA's workflow is shown below:\n\n.. image:: docs/img/osaca-workflow.png\n   :alt: OSACA workflow\n   :width: 80%\n\nUsage\n=====\n\nThe usage of OSACA can be listed as:\n\n.. code:: bash\n\n    osaca [-h] [-V] [--arch ARCH] [--fixed] [--db-check] \n    \t  [--import MICROBENCH] [--insert-marker] \n\t  [--export-graph GRAPHNAME] [--ignore-unknown] [--verbose]\n\t  FILEPATH\n\n-h, --help\n  prints out the help message.\n-V, --version\n  shows the program\u2019s version number.\n--arch ARCH\n  needs to be replaced with the target architecture abbreviation.\n  Possible options are ``SNB``, ``IVB``, ``HSW``, ``BDW``, ``SKX`` and ``CSX`` for the latest Intel micro architectures starting from Intel Sandy Bridge and ``ZEN1``, ``ZEN2`` for AMD Zen architectures.\n  Furthermore, ``TX2`` for Marvell`s ARM-based ThunderX2 architecture is available.\n--fixed\n  Run the throughput analysis with fixed port utilization for all suitable ports per instruction.\n  Otherwise, OSACA will print out the optimal port utilization for the kernel.\n--db-check\n  Run a sanity check on the by \"--arch\" specified database.\n  The output depends on the verbosity level.\n  Keep in mind you have to provide an existing (dummy) filename in anyway.\n--import MICROBENCH\n  Import a given microbenchmark output file into the corresponding architecture instruction database.\n  Define the type of microbenchmark either as \"ibench\" or \"asmbench\".\n--insert-marker\n  OSACA calls the Kerncraft module for the interactively insertion of `IACA <https://software.intel.com/en-us/articles/intel-architecture-code-analyzer>`__ byte markers or OSACA AArch64 byte markers in suggested assembly blocks.\n--export-graph EXPORT_PATH\n  Output path for .dot file export. If \".\" is given, the file will be stored as \"./osaca_dg.dot\".\n  After the file was created, you can convert it to a PDF file using `dot <https://graphviz.gitlab.io/_pages/pdf/dotguide.pdf>`__.\n--ignore-unknown\n  Force OSACA to apply a throughput and latency of 0.0 cy for all unknown instruction forms.\n  If not specified, a warning will be printed instead if one ore more isntruction form is unknown to OSACA.\n-v, --verbose\n  Increases verbosity level\n\nThe **FILEPATH** describes the filepath to the file to work with and is always necessary\n\n______________________\n\nHereinafter OSACA's scope of function will be described.\n\nThroughput & Latency analysis\n-----------------------------\nAs main functionality of OSACA, the tool starts the analysis on a marked assembly file by running the following command with one or more of the optional parameters:\n\n.. code-block:: bash\n\n    osaca --arch ARCH [--fixed] [--ignore-unknown]\n                      [--export-graph EXPORT_PATH]\n          file\n\nThe ``file`` parameter specifies the target assembly file and is always mandatory.\n\nThe parameter ``ARCH`` is positional for the analysis and must be replaced by the target architecture abbreviation.\n\nOSACA assumes an optimal scheduling for all instructions and assumes the processor to be able to schedule instructions in a way that it achieves a minimal reciprocal throughput.\nHowever, in older versions (<=v0.2.2) of OSACA, a fixed probability for port utilization was assumed.\nThis means, instructions with *N* available ports for execution were scheduled with a probability of *1/N* to each of the ports.\nThis behavior can be enforced by using the ``--fixed`` flag.\n\nIf one or more instruction forms are unknown to OSACA, it refuses to print an overall throughput, CP and\nLCD analysis and marks all unknown instruction forms with ``X`` next to the mnemonic.\nThis is done so the user does not miss out on this unrecognized instruction and might assume an incorrect runtime prediction.\nTo force OSACA to apply a throughput and latency of 0.0 cy for all unknown instruction forms, the flag ``--ignore-unknown`` can be specified.\n\nTo get a visualization of the analyzed kernel and its dependency chains, OSACA provides the option to additionally produce a graph as DOT file, which represents the kernel and all register dependencies inside of it.\nThe tool highlights all LCDs and the CP.\nThe graph generation is done by running OSACA with the ``--export-graph EXPORT_GRAPH`` flag.\nOSACA stores the DOT file either at the by ``EXPORT_GRAPH`` specified filepath or uses the default filename \"osaca_dg.dot\" in the current working directory.\nSubsequently, the DOT-graph can be adjusted in its appearance and converted to various output formats such as PDF, SVG, or PNG using the `dot command <https://graphviz.gitlab.io/_pages/pdf/dotguide.pdf>`__, e.g., ``dot -Tpdf osaca_dg.dot -o\ngraph.pdf`` to generate a PDF document.\n\nMarker insertion\n----------------\nFor extracting the right kernel, one has to mark it in beforehand.\nCurrently, only the detection of markers in the assembly code and therefore the analysis of assembly files is supported by OSACA.\n\nMarking a kernel means to insert the byte markers in the assembly file in before and after the loop.\nFor this, the start marker has to be inserted right in front of the loop label and the end marker directly after the jump instruction.\nIACA requires byte markers since it operates on opcode-level.\nTo provide a trade-off between reusability for such tool and convenient usability, OSACA supports both byte markers and comment line markers.\nWhile the byte markers for x86 are equivalent to IACA byte markers, the comment keywords ``OSACA-BEGIN`` and ``OSACA-END`` are based on LLVM-MCA's markers.\n\nx86 markers\n^^^^^^^^^^^\n**Byte markers**\n\n.. code-block:: asm\n\n      movl    $111,%ebx       #IACA/OSACA START MARKER\n      .byte   100,103,144     #IACA/OSACA START MARKER\n    .loop:\n      # loop body\n      jb      .loop\n      movl    $222,%ebx       #IACA/OSACA END MARKER\n      .byte   100,103,144     #IACA/OSACA END MARKER\n\n**Comment line markers**\n\n.. code-block:: asm\n\n      # OSACA-BEGIN\n    .loop:\n      # loop body\n      jb      .loop\n      # OSACA-END\n\nAArch64 markers\n^^^^^^^^^^^^^^^\n**Byte markers**\n\n::\n\n      mov      x1, #111        // OSACA START\n      .byte    213,3,32,31     // OSACA START\n    .loop:\n      // loop body\n      b.ne     .loop\n      mov      x1, #222        // OSACA END\n      .byte    213,3,32,31     // OSACA END\n\n**Comment line markers**\n\n::\n\n      // OSACA-BEGIN\n    .loop:\n      // loop body\n      b.ne     .loop\n      // OSACA-END\n\nOSACA in combination with Kerncraft provides a functionality for the automatic detection of possible loop kernels and inserting markers.\nThis can be done by using the ``--insert-marker`` flag together with the path to the target assembly file and the target architecture.\n\nBenchmark import\n----------------\nOSACA supports the automatic integration of new instruction forms by parsing the output of the micro-\nbenchmark tools `asmbench <https://github.com/RRZE-HPC/asmbench>`__ and `ibench <https://github.com/RRZE-HPC/ibench>`__.\nThis can be achieved by running OSACA with the command line option ``--import MICROBENCH``:\n\n.. code-block:: bash\n\n  osaca --arch ARCH --import MICROBENCH file\n\n``MICROBENCH`` specifies one of the currently supported benchmark tools, i.e., \"asmbench\" or \"ibench\".\n``ARCH`` defines the abbreviation of the target architecture for which the instructions will be added and file must be the path to the generated output file of the benchmark.\nThe format of this file has to match either the basic command line output of ibench, e.g.,\n\n::\n\n  [INSTRUCTION FORM]-TP:    0.500 (clock cycles)    [DEBUG - result: 1.000000]\n  [INSTRUCTION FORM]-LT:    4.000 (clock cycles)    [DEBUG - result: 1.000000]\n\nor the command line output of asmbench including the name of the instruction form in a separate line at the\nbeginning, e.g.:\n\n::\n\n  [INSTRUCTION FORM]\n  Latency: 4.00 cycle\n  Throughput: 0.50 cycle\n\n\nNote that there must be an empty line after each throughput measurement as part of the output so that one instruction form entry consists of four (4) lines.\n\nTo let OSACA import the instruction form with the correct operands, the naming conventions for the instruction form name must be followed:\n\n* The first part of the name is the mnemonic and ends with the character \"``-``\" (not part of the mnemonic in the DB).\n\n* The second part of the name are the operands. Each operand must be separated from another operand by the character \"``_``\".\n\n* For each **x86** operand, one of the following symbols must be used:\n\n  * \"``r``\" for general purpose registers (rax, edi, r9, ...)\n  * \"``x``\", \"``y``\", or \"``z``\" for xmm, ymm, or zmm registers, respectively\n  * \"``i``\" for immediates\n  * \"``m``\" for a memory address. Add \"``b``\" if the memory address contains a base register, \"``o``\" if it contains an offset,\n    \"``i``\" if it contains an index register, and \"``s``\" if the index register additionally has a scale factor of *more* than 1.\n\n* For each **AArch64** operand, one of the following symbols must be used:\n\n  * \"``w``\", \"``x``\", \"``b``\", \"``h``\", \"``s``\", \"``d``\", or \"``q``\" for registers with the corresponding prefix.\n  * \"``v``\" followed by a single character (\"``b``\", \"``h``\", \"``s``\", or \"``d``\") for vector registers with the corresponding lane width of the second character.\n    If no second character is given, OSACA assumes a lane width of 64 bit (``d``) as default.\n  * \"``i``\" for immediates\n  * \"``m``\" for a memory address. Add \"``b``\" if the memory address contains a base register, \"``o``\" if it contains an offset,\n    \"``i``\" if it contains an index register, and \"``s``\" if the index register additionally has a scale factor of *more* \n    than 1. Add \"``r``\" if the address format uses pre-indexing and \"``p``\" if it uses post-indexing.\n\nValid instruction form examples for x86 are ``vaddpd-x_x_x``, ``mov-r_mboi``, and ``vfmadd213pd-mbis_y_y``. \n\nValid instruction form examples for AArch64 are ``fadd-vd_vd_v``, ``ldp-d_d_mo``, and ``fmov-s_i``.\n\nNote that the options to define operands are limited, therefore, one might need to adjust the instruction forms in the architecture DB after importing.\nOSACA parses the output for an arbitrary number of instruction forms and adds them as entries to the architecture DB.\nThe user must edit the ISA DB in case the instruction form shows irregular source and destination operands for its ISA syntax. OSACA applies the following rules by default:\n\n* If there is only one operand, it is considered as source operand\n\n* In case of multiple operands the target operand (depending on the ISA syntax the last or first one) is considered to be the\n  destination operand, all others are considered as source operands.\n\nDatabase check\n--------------\nSince a manual adjustment of the ISA DB is currently indispensable when adding new instruction forms,\nOSACA provides a database sanity check using the --db-check flag. It can be executed via:\n\n.. code-block:: bash\n\n  osaca --arch ARCH --db-check [-v] file\n\n``ARCH`` defines the abbreviation of the target architecture of the database to check.\nThe ``file`` argument needs to be specified as it is positional but may be any existing dummy path.\nWhen called, OSACA prints a summary of database information containing the amount of missing throughput values, latency values or \u03bc-ops assignments for an instruction form.\nFurthermore, it shows the amount of duplicate instruction forms in both the architecture DB and the ISA DB and checks how many instruction forms in the ISA DB are non-existent in the architecture DB.\nFinally, it checks via simple heuristics how many of the instruction forms contained in the architecture DB might miss an ISA DB entry.\nRunning the database check including the ``-v`` verbosity flag, OSACA prints in addition the specific name of the identified instruction forms so that the user can check the mentioned incidents.\n\nExamples\n========\nFor clarifying the functionality of OSACA a sample kernel is analyzed for an Intel CSX core hereafter:\n\n.. code-block:: c\n\n    double a[N], double b[N];\n    double s;\n\n    // loop\n    for(int i = 0; i < N; ++i)\n        a[i] = s * b[i];\n\nThe code shows a simple scalar multiplication of a vector ``b`` and a floating-point number ``s``.\nThe result is written in vector ``a``.\nAfter including the OSACA byte marker into the assembly, one can start the analysis typing \n\n.. code-block:: bash\n\n    osaca --arch CSX PATH/TO/FILE\n\nin the command line.\n\nThe output is:\n\n::\n\n    Open Source Architecture Code Analyzer (OSACA) - v0.3\n    Analyzed file:      scale.s.csx.O3.s\n    Architecture:       csx\n    Timestamp:          2019-10-03 23:36:21\n\n     P - Throughput of LOAD operation can be hidden behind a past or future STORE instruction\n     * - Instruction micro-ops not bound to a port\n     X - No throughput/latency information for this instruction in data file\n\n\n\tCombined Analysis Report\n\t-----------------------\n\t                                     Port pressure in cycles\n\t     |  0   - 0DV  |  1   |  2   -  2D  |  3   -  3D  |  4   |  5   |  6   |  7   ||  CP  | LCD  |\n\t-------------------------------------------------------------------------------------------------\n\t 170 |             |      |             |             |      |      |      |      ||      |      |   .L22:\n\t 171 | 0.50        | 0.50 | 0.50   0.50 | 0.50   0.50 |      |      |      |      ||  8.0 |      |   vmulpd    (%r12,%rax), %ymm1, %ymm0\n\t 172 |             |      | 0.50        | 0.50        | 1.00 |      |      |      ||  5.0 |      |   vmovapd   %ymm0, 0(%r13,%rax)\n\t 173 | 0.25        | 0.25 |             |             |      | 0.25 | 0.25 |      ||      |  1.0 |   addq      $32, %rax\n\t 174 | 0.00        | 0.00 |             |             |      | 0.50 | 0.50 |      ||      |      |   cmpq      %rax, %r14\n\t 175 |             |      |             |             |      |      |      |      ||      |      | * jne       .L22\n\n\t       0.75          0.75   1.00   0.50   1.00   0.50   1.00   0.75   0.75           13.0   1.0\n\n\n\tLoop-Carried Dependencies Analysis Report\n\t-----------------------------------------\n\t 173 |  1.0 | addq      $32, %rax                      | [173]\n\n\nIt shows the whole kernel together with the optimized port pressure of each instruction form and the overall port binding.\nFurthermore, in the two columns on the right, the critical path (CP) and the longest loop-carried dependency (LCD) of the loop kernel.\nIn the bottom, all loop-carried dependencies are shown, each with a list of line numbers being part of this dependency chain on the right.\n\nYou can find more (already marked) examples and sample outputs for various architectures in the `examples <examples/>`__ directory.\n\nCredits\n=======\nImplementation: Jan Laukemann\n\nLicense\n=======\n`AGPL-3.0 </LICENSE>`__\n\n\n", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/RRZE-HPC/OSACA", "keywords": "hpc performance benchmark analysis architecture", "license": "AGPLv3", "maintainer": "", "maintainer_email": "", "name": "osaca", "package_url": "https://pypi.org/project/osaca/", "platform": "", "project_url": "https://pypi.org/project/osaca/", "project_urls": {"Homepage": "https://github.com/RRZE-HPC/OSACA"}, "release_url": "https://pypi.org/project/osaca/0.3.2/", "requires_dist": ["networkx", "pyparsing", "ruamel.yaml"], "requires_python": ">=3.5", "summary": "Open Source Architecture Code Analyzer", "version": "0.3.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <img alt=\"OSACA logo\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/16df34327ffd0b830e098c1db85514a6a542d8b3/646f63732f696d672f6f736163612d6c6f676f2e706e67\" width=\"80%\">\n<div id=\"osaca\">\n<h2>OSACA</h2>\n<h2 id=\"open-source-architecture-code-analyzer\"><span class=\"section-subtitle\">Open Source Architecture Code Analyzer</span></h2>\n<p>For an innermost loop kernel in assembly, this tool allows automatic instruction fetching of assembly code and automatic runtime prediction including throughput analysis and detection for critical path and loop-carried dependencies.</p>\n<a href=\"https://travis-ci.org/RRZE-HPC/OSACA\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/610a39c58703ad71f597d62d7f9e63e6e343959a/68747470733a2f2f7472617669732d63692e6f72672f52525a452d4850432f4f534143412e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://codecov.io/github/RRZE-HPC/OSACA?branch=master\" rel=\"nofollow\"><img alt=\"Code Coverage\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/076dbddc2119043e1c18deaf9d1af62e7c3591dd/68747470733a2f2f636f6465636f762e696f2f6769746875622f52525a452d4850432f4f534143412f636f7665726167652e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://osaca.readthedocs.io/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6ac4a9777cbb12aaf8251d486f784ab5edeef056/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f6f736163612f62616467652f3f76657273696f6e3d6c6174657374\"></a>\n<a href=\"https://osaca.readthedocs.io/\" rel=\"nofollow\"><img alt=\"Docs\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/53f791bcecf2fe1f7fa097070340f655dcef2931/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f726561642d7468655f646f63732d626c7565\"></a>\n<a href=\"https://github.com/ambv/black\" rel=\"nofollow\"><img alt=\"Code Style\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fbfdc7754183ecf079bc71ddeabaf88f6cbc5c00/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64652532307374796c652d626c61636b2d3030303030302e737667\"></a>\n</div>\n<div id=\"getting-started\">\n<h2>Getting started</h2>\n<div id=\"installation\">\n<h3>Installation</h3>\n<p>On most systems with python pip and setuputils installed, just run:</p>\n<pre>pip install --user osaca\n</pre>\n<p>for the latest release.</p>\n<p>To build OSACA from source, clone this repository using <tt>git clone <span class=\"pre\">https://github.com/RRZE-HPC/OSACA</span></tt> and run in the root directory:</p>\n<pre>python ./setup.py install\n</pre>\n<p>After installation, OSACA can be started with the command <tt>osaca</tt> in the CLI.</p>\n</div>\n<div id=\"dependencies\">\n<h3>Dependencies:</h3>\n<p>Additional requirements are:</p>\n<ul>\n<li><a href=\"https://www.python.org/\" rel=\"nofollow\">Python3</a></li>\n<li><a href=\"https://www.graphviz.org/\" rel=\"nofollow\">Graphviz</a> for dependency graph creation (minimal dependency is <cite>libgraphviz-dev</cite> on Ubuntu)</li>\n<li><a href=\"https://github.com/RRZE-HPC/kerncraft\" rel=\"nofollow\">Kerncraft</a> &gt;=v0.8.4 for marker insertion</li>\n<li><a href=\"https://github.com/RRZE-HPC/ibench\" rel=\"nofollow\">ibench</a> or <a href=\"https://github.com/RRZE-HPC/asmbench/\" rel=\"nofollow\">asmbench</a> for throughput/latency measurements</li>\n</ul>\n</div>\n</div>\n<div id=\"design\">\n<h2>Design</h2>\n<p>A schematic design of OSACA\u2019s workflow is shown below:</p>\n<img alt=\"OSACA workflow\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/cb6eb53ef5692fdad09cc6d2c881ffc925872a0c/646f63732f696d672f6f736163612d776f726b666c6f772e706e67\" width=\"80%\">\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>The usage of OSACA can be listed as:</p>\n<pre>osaca <span class=\"o\">[</span>-h<span class=\"o\">]</span> <span class=\"o\">[</span>-V<span class=\"o\">]</span> <span class=\"o\">[</span>--arch ARCH<span class=\"o\">]</span> <span class=\"o\">[</span>--fixed<span class=\"o\">]</span> <span class=\"o\">[</span>--db-check<span class=\"o\">]</span>\n      <span class=\"o\">[</span>--import MICROBENCH<span class=\"o\">]</span> <span class=\"o\">[</span>--insert-marker<span class=\"o\">]</span>\n      <span class=\"o\">[</span>--export-graph GRAPHNAME<span class=\"o\">]</span> <span class=\"o\">[</span>--ignore-unknown<span class=\"o\">]</span> <span class=\"o\">[</span>--verbose<span class=\"o\">]</span>\n      FILEPATH\n</pre>\n<table>\n<col>\n<col>\n<tbody>\n<tr><td>\n<kbd><span class=\"option\">-h</span>, <span class=\"option\">--help</span></kbd></td>\n<td>prints out the help message.</td></tr>\n<tr><td>\n<kbd><span class=\"option\">-V</span>, <span class=\"option\">--version</span></kbd></td>\n<td>shows the program\u2019s version number.</td></tr>\n<tr><td>\n<kbd><span class=\"option\">--arch <var>ARCH</var></span></kbd></td>\n<td>needs to be replaced with the target architecture abbreviation.\nPossible options are <tt>SNB</tt>, <tt>IVB</tt>, <tt>HSW</tt>, <tt>BDW</tt>, <tt>SKX</tt> and <tt>CSX</tt> for the latest Intel micro architectures starting from Intel Sandy Bridge and <tt>ZEN1</tt>, <tt>ZEN2</tt> for AMD Zen architectures.\nFurthermore, <tt>TX2</tt> for Marvell`s ARM-based ThunderX2 architecture is available.</td></tr>\n<tr><td>\n<kbd><span class=\"option\">--fixed</span></kbd></td>\n<td>Run the throughput analysis with fixed port utilization for all suitable ports per instruction.\nOtherwise, OSACA will print out the optimal port utilization for the kernel.</td></tr>\n<tr><td>\n<kbd><span class=\"option\">--db-check</span></kbd></td>\n<td>Run a sanity check on the by \u201c\u2013arch\u201d specified database.\nThe output depends on the verbosity level.\nKeep in mind you have to provide an existing (dummy) filename in anyway.</td></tr>\n<tr><td>\n<kbd><span class=\"option\">--import <var>MICROBENCH</var></span></kbd></td>\n</tr>\n<tr><td>\u00a0</td><td>Import a given microbenchmark output file into the corresponding architecture instruction database.\nDefine the type of microbenchmark either as \u201cibench\u201d or \u201casmbench\u201d.</td></tr>\n<tr><td>\n<kbd><span class=\"option\">--insert-marker</span></kbd></td>\n</tr>\n<tr><td>\u00a0</td><td>OSACA calls the Kerncraft module for the interactively insertion of <a href=\"https://software.intel.com/en-us/articles/intel-architecture-code-analyzer\" rel=\"nofollow\">IACA</a> byte markers or OSACA AArch64 byte markers in suggested assembly blocks.</td></tr>\n<tr><td>\n<kbd><span class=\"option\">--export-graph <var>EXPORT_PATH</var></span></kbd></td>\n</tr>\n<tr><td>\u00a0</td><td>Output path for .dot file export. If \u201c.\u201d is given, the file will be stored as \u201c./osaca_dg.dot\u201d.\nAfter the file was created, you can convert it to a PDF file using <a href=\"https://graphviz.gitlab.io/_pages/pdf/dotguide.pdf\" rel=\"nofollow\">dot</a>.</td></tr>\n<tr><td>\n<kbd><span class=\"option\">--ignore-unknown</span></kbd></td>\n</tr>\n<tr><td>\u00a0</td><td>Force OSACA to apply a throughput and latency of 0.0 cy for all unknown instruction forms.\nIf not specified, a warning will be printed instead if one ore more isntruction form is unknown to OSACA.</td></tr>\n<tr><td>\n<kbd><span class=\"option\">-v</span>, <span class=\"option\">--verbose</span></kbd></td>\n<td>Increases verbosity level</td></tr>\n</tbody>\n</table>\n<p>The <strong>FILEPATH</strong> describes the filepath to the file to work with and is always necessary</p>\n<hr class=\"docutils\">\n<p>Hereinafter OSACA\u2019s scope of function will be described.</p>\n<div id=\"throughput-latency-analysis\">\n<h3>Throughput &amp; Latency analysis</h3>\n<p>As main functionality of OSACA, the tool starts the analysis on a marked assembly file by running the following command with one or more of the optional parameters:</p>\n<pre>osaca --arch ARCH <span class=\"o\">[</span>--fixed<span class=\"o\">]</span> <span class=\"o\">[</span>--ignore-unknown<span class=\"o\">]</span>\n                  <span class=\"o\">[</span>--export-graph EXPORT_PATH<span class=\"o\">]</span>\n      file\n</pre>\n<p>The <tt>file</tt> parameter specifies the target assembly file and is always mandatory.</p>\n<p>The parameter <tt>ARCH</tt> is positional for the analysis and must be replaced by the target architecture abbreviation.</p>\n<p>OSACA assumes an optimal scheduling for all instructions and assumes the processor to be able to schedule instructions in a way that it achieves a minimal reciprocal throughput.\nHowever, in older versions (&lt;=v0.2.2) of OSACA, a fixed probability for port utilization was assumed.\nThis means, instructions with <em>N</em> available ports for execution were scheduled with a probability of <em>1/N</em> to each of the ports.\nThis behavior can be enforced by using the <tt><span class=\"pre\">--fixed</span></tt> flag.</p>\n<p>If one or more instruction forms are unknown to OSACA, it refuses to print an overall throughput, CP and\nLCD analysis and marks all unknown instruction forms with <tt>X</tt> next to the mnemonic.\nThis is done so the user does not miss out on this unrecognized instruction and might assume an incorrect runtime prediction.\nTo force OSACA to apply a throughput and latency of 0.0 cy for all unknown instruction forms, the flag <tt><span class=\"pre\">--ignore-unknown</span></tt> can be specified.</p>\n<p>To get a visualization of the analyzed kernel and its dependency chains, OSACA provides the option to additionally produce a graph as DOT file, which represents the kernel and all register dependencies inside of it.\nThe tool highlights all LCDs and the CP.\nThe graph generation is done by running OSACA with the <tt><span class=\"pre\">--export-graph</span> EXPORT_GRAPH</tt> flag.\nOSACA stores the DOT file either at the by <tt>EXPORT_GRAPH</tt> specified filepath or uses the default filename \u201cosaca_dg.dot\u201d in the current working directory.\nSubsequently, the DOT-graph can be adjusted in its appearance and converted to various output formats such as PDF, SVG, or PNG using the <a href=\"https://graphviz.gitlab.io/_pages/pdf/dotguide.pdf\" rel=\"nofollow\">dot command</a>, e.g., <tt>dot <span class=\"pre\">-Tpdf</span> osaca_dg.dot <span class=\"pre\">-o</span>\ngraph.pdf</tt> to generate a PDF document.</p>\n</div>\n<div id=\"marker-insertion\">\n<h3>Marker insertion</h3>\n<p>For extracting the right kernel, one has to mark it in beforehand.\nCurrently, only the detection of markers in the assembly code and therefore the analysis of assembly files is supported by OSACA.</p>\n<p>Marking a kernel means to insert the byte markers in the assembly file in before and after the loop.\nFor this, the start marker has to be inserted right in front of the loop label and the end marker directly after the jump instruction.\nIACA requires byte markers since it operates on opcode-level.\nTo provide a trade-off between reusability for such tool and convenient usability, OSACA supports both byte markers and comment line markers.\nWhile the byte markers for x86 are equivalent to IACA byte markers, the comment keywords <tt><span class=\"pre\">OSACA-BEGIN</span></tt> and <tt><span class=\"pre\">OSACA-END</span></tt> are based on LLVM-MCA\u2019s markers.</p>\n<div id=\"x86-markers\">\n<h4>x86 markers</h4>\n<p><strong>Byte markers</strong></p>\n<pre>  <span class=\"nf\">movl</span>    <span class=\"no\">$111</span><span class=\"p\">,</span><span class=\"nv\">%ebx</span>       <span class=\"c1\">#IACA/OSACA START MARKER\n</span>  <span class=\"na\">.byte</span>   <span class=\"mi\">100</span><span class=\"p\">,</span><span class=\"mi\">103</span><span class=\"p\">,</span><span class=\"mi\">144</span>     <span class=\"c1\">#IACA/OSACA START MARKER\n</span><span class=\"nl\">.loop:</span>\n  <span class=\"c1\"># loop body\n</span>  <span class=\"nf\">jb</span>      <span class=\"no\">.loop</span>\n  <span class=\"nf\">movl</span>    <span class=\"no\">$222</span><span class=\"p\">,</span><span class=\"nv\">%ebx</span>       <span class=\"c1\">#IACA/OSACA END MARKER\n</span>  <span class=\"na\">.byte</span>   <span class=\"mi\">100</span><span class=\"p\">,</span><span class=\"mi\">103</span><span class=\"p\">,</span><span class=\"mi\">144</span>     <span class=\"c1\">#IACA/OSACA END MARKER</span>\n</pre>\n<p><strong>Comment line markers</strong></p>\n<pre>  <span class=\"c1\"># OSACA-BEGIN\n</span><span class=\"nl\">.loop:</span>\n  <span class=\"c1\"># loop body\n</span>  <span class=\"nf\">jb</span>      <span class=\"no\">.loop</span>\n  <span class=\"c1\"># OSACA-END</span>\n</pre>\n</div>\n<div id=\"aarch64-markers\">\n<h4>AArch64 markers</h4>\n<p><strong>Byte markers</strong></p>\n<pre>  mov      x1, #111        // OSACA START\n  .byte    213,3,32,31     // OSACA START\n.loop:\n  // loop body\n  b.ne     .loop\n  mov      x1, #222        // OSACA END\n  .byte    213,3,32,31     // OSACA END\n</pre>\n<p><strong>Comment line markers</strong></p>\n<pre>  // OSACA-BEGIN\n.loop:\n  // loop body\n  b.ne     .loop\n  // OSACA-END\n</pre>\n<p>OSACA in combination with Kerncraft provides a functionality for the automatic detection of possible loop kernels and inserting markers.\nThis can be done by using the <tt><span class=\"pre\">--insert-marker</span></tt> flag together with the path to the target assembly file and the target architecture.</p>\n</div>\n</div>\n<div id=\"benchmark-import\">\n<h3>Benchmark import</h3>\n<p>OSACA supports the automatic integration of new instruction forms by parsing the output of the micro-\nbenchmark tools <a href=\"https://github.com/RRZE-HPC/asmbench\" rel=\"nofollow\">asmbench</a> and <a href=\"https://github.com/RRZE-HPC/ibench\" rel=\"nofollow\">ibench</a>.\nThis can be achieved by running OSACA with the command line option <tt><span class=\"pre\">--import</span> MICROBENCH</tt>:</p>\n<pre>osaca --arch ARCH --import MICROBENCH file\n</pre>\n<p><tt>MICROBENCH</tt> specifies one of the currently supported benchmark tools, i.e., \u201casmbench\u201d or \u201cibench\u201d.\n<tt>ARCH</tt> defines the abbreviation of the target architecture for which the instructions will be added and file must be the path to the generated output file of the benchmark.\nThe format of this file has to match either the basic command line output of ibench, e.g.,</p>\n<pre>[INSTRUCTION FORM]-TP:    0.500 (clock cycles)    [DEBUG - result: 1.000000]\n[INSTRUCTION FORM]-LT:    4.000 (clock cycles)    [DEBUG - result: 1.000000]\n</pre>\n<p>or the command line output of asmbench including the name of the instruction form in a separate line at the\nbeginning, e.g.:</p>\n<pre>[INSTRUCTION FORM]\nLatency: 4.00 cycle\nThroughput: 0.50 cycle\n</pre>\n<p>Note that there must be an empty line after each throughput measurement as part of the output so that one instruction form entry consists of four (4) lines.</p>\n<p>To let OSACA import the instruction form with the correct operands, the naming conventions for the instruction form name must be followed:</p>\n<ul>\n<li>The first part of the name is the mnemonic and ends with the character \u201c<tt>-</tt>\u201d (not part of the mnemonic in the DB).</li>\n<li>The second part of the name are the operands. Each operand must be separated from another operand by the character \u201c<tt>_</tt>\u201d.</li>\n<li>For each <strong>x86</strong> operand, one of the following symbols must be used:<ul>\n<li>\u201c<tt>r</tt>\u201d for general purpose registers (rax, edi, r9, \u2026)</li>\n<li>\u201c<tt>x</tt>\u201d, \u201c<tt>y</tt>\u201d, or \u201c<tt>z</tt>\u201d for xmm, ymm, or zmm registers, respectively</li>\n<li>\u201c<tt>i</tt>\u201d for immediates</li>\n<li>\u201c<tt>m</tt>\u201d for a memory address. Add \u201c<tt>b</tt>\u201d if the memory address contains a base register, \u201c<tt>o</tt>\u201d if it contains an offset,\n\u201c<tt>i</tt>\u201d if it contains an index register, and \u201c<tt>s</tt>\u201d if the index register additionally has a scale factor of <em>more</em> than 1.</li>\n</ul>\n</li>\n<li>For each <strong>AArch64</strong> operand, one of the following symbols must be used:<ul>\n<li>\u201c<tt>w</tt>\u201d, \u201c<tt>x</tt>\u201d, \u201c<tt>b</tt>\u201d, \u201c<tt>h</tt>\u201d, \u201c<tt>s</tt>\u201d, \u201c<tt>d</tt>\u201d, or \u201c<tt>q</tt>\u201d for registers with the corresponding prefix.</li>\n<li>\u201c<tt>v</tt>\u201d followed by a single character (\u201c<tt>b</tt>\u201d, \u201c<tt>h</tt>\u201d, \u201c<tt>s</tt>\u201d, or \u201c<tt>d</tt>\u201d) for vector registers with the corresponding lane width of the second character.\nIf no second character is given, OSACA assumes a lane width of 64 bit (<tt>d</tt>) as default.</li>\n<li>\u201c<tt>i</tt>\u201d for immediates</li>\n<li>\u201c<tt>m</tt>\u201d for a memory address. Add \u201c<tt>b</tt>\u201d if the memory address contains a base register, \u201c<tt>o</tt>\u201d if it contains an offset,\n\u201c<tt>i</tt>\u201d if it contains an index register, and \u201c<tt>s</tt>\u201d if the index register additionally has a scale factor of <em>more</em>\nthan 1. Add \u201c<tt>r</tt>\u201d if the address format uses pre-indexing and \u201c<tt>p</tt>\u201d if it uses post-indexing.</li>\n</ul>\n</li>\n</ul>\n<p>Valid instruction form examples for x86 are <tt><span class=\"pre\">vaddpd-x_x_x</span></tt>, <tt><span class=\"pre\">mov-r_mboi</span></tt>, and <tt><span class=\"pre\">vfmadd213pd-mbis_y_y</span></tt>.</p>\n<p>Valid instruction form examples for AArch64 are <tt><span class=\"pre\">fadd-vd_vd_v</span></tt>, <tt><span class=\"pre\">ldp-d_d_mo</span></tt>, and <tt><span class=\"pre\">fmov-s_i</span></tt>.</p>\n<p>Note that the options to define operands are limited, therefore, one might need to adjust the instruction forms in the architecture DB after importing.\nOSACA parses the output for an arbitrary number of instruction forms and adds them as entries to the architecture DB.\nThe user must edit the ISA DB in case the instruction form shows irregular source and destination operands for its ISA syntax. OSACA applies the following rules by default:</p>\n<ul>\n<li>If there is only one operand, it is considered as source operand</li>\n<li>In case of multiple operands the target operand (depending on the ISA syntax the last or first one) is considered to be the\ndestination operand, all others are considered as source operands.</li>\n</ul>\n</div>\n<div id=\"database-check\">\n<h3>Database check</h3>\n<p>Since a manual adjustment of the ISA DB is currently indispensable when adding new instruction forms,\nOSACA provides a database sanity check using the \u2013db-check flag. It can be executed via:</p>\n<pre>osaca --arch ARCH --db-check <span class=\"o\">[</span>-v<span class=\"o\">]</span> file\n</pre>\n<p><tt>ARCH</tt> defines the abbreviation of the target architecture of the database to check.\nThe <tt>file</tt> argument needs to be specified as it is positional but may be any existing dummy path.\nWhen called, OSACA prints a summary of database information containing the amount of missing throughput values, latency values or \u03bc-ops assignments for an instruction form.\nFurthermore, it shows the amount of duplicate instruction forms in both the architecture DB and the ISA DB and checks how many instruction forms in the ISA DB are non-existent in the architecture DB.\nFinally, it checks via simple heuristics how many of the instruction forms contained in the architecture DB might miss an ISA DB entry.\nRunning the database check including the <tt><span class=\"pre\">-v</span></tt> verbosity flag, OSACA prints in addition the specific name of the identified instruction forms so that the user can check the mentioned incidents.</p>\n</div>\n</div>\n<div id=\"examples\">\n<h2>Examples</h2>\n<p>For clarifying the functionality of OSACA a sample kernel is analyzed for an Intel CSX core hereafter:</p>\n<pre><span class=\"kt\">double</span> <span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">N</span><span class=\"p\">],</span> <span class=\"kt\">double</span> <span class=\"n\">b</span><span class=\"p\">[</span><span class=\"n\">N</span><span class=\"p\">];</span>\n<span class=\"kt\">double</span> <span class=\"n\">s</span><span class=\"p\">;</span>\n\n<span class=\"c1\">// loop\n</span><span class=\"k\">for</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">N</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span>\n    <span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">s</span> <span class=\"o\">*</span> <span class=\"n\">b</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span>\n</pre>\n<p>The code shows a simple scalar multiplication of a vector <tt>b</tt> and a floating-point number <tt>s</tt>.\nThe result is written in vector <tt>a</tt>.\nAfter including the OSACA byte marker into the assembly, one can start the analysis typing</p>\n<pre>osaca --arch CSX PATH/TO/FILE\n</pre>\n<p>in the command line.</p>\n<p>The output is:</p>\n<pre>Open Source Architecture Code Analyzer (OSACA) - v0.3\nAnalyzed file:      scale.s.csx.O3.s\nArchitecture:       csx\nTimestamp:          2019-10-03 23:36:21\n\n P - Throughput of LOAD operation can be hidden behind a past or future STORE instruction\n * - Instruction micro-ops not bound to a port\n X - No throughput/latency information for this instruction in data file\n\n\n    Combined Analysis Report\n    -----------------------\n                                         Port pressure in cycles\n         |  0   - 0DV  |  1   |  2   -  2D  |  3   -  3D  |  4   |  5   |  6   |  7   ||  CP  | LCD  |\n    -------------------------------------------------------------------------------------------------\n     170 |             |      |             |             |      |      |      |      ||      |      |   .L22:\n     171 | 0.50        | 0.50 | 0.50   0.50 | 0.50   0.50 |      |      |      |      ||  8.0 |      |   vmulpd    (%r12,%rax), %ymm1, %ymm0\n     172 |             |      | 0.50        | 0.50        | 1.00 |      |      |      ||  5.0 |      |   vmovapd   %ymm0, 0(%r13,%rax)\n     173 | 0.25        | 0.25 |             |             |      | 0.25 | 0.25 |      ||      |  1.0 |   addq      $32, %rax\n     174 | 0.00        | 0.00 |             |             |      | 0.50 | 0.50 |      ||      |      |   cmpq      %rax, %r14\n     175 |             |      |             |             |      |      |      |      ||      |      | * jne       .L22\n\n           0.75          0.75   1.00   0.50   1.00   0.50   1.00   0.75   0.75           13.0   1.0\n\n\n    Loop-Carried Dependencies Analysis Report\n    -----------------------------------------\n     173 |  1.0 | addq      $32, %rax                      | [173]\n</pre>\n<p>It shows the whole kernel together with the optimized port pressure of each instruction form and the overall port binding.\nFurthermore, in the two columns on the right, the critical path (CP) and the longest loop-carried dependency (LCD) of the loop kernel.\nIn the bottom, all loop-carried dependencies are shown, each with a list of line numbers being part of this dependency chain on the right.</p>\n<p>You can find more (already marked) examples and sample outputs for various architectures in the <a href=\"examples/\" rel=\"nofollow\">examples</a> directory.</p>\n</div>\n<div id=\"credits\">\n<h2>Credits</h2>\n<p>Implementation: Jan Laukemann</p>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p><a href=\"/LICENSE\" rel=\"nofollow\">AGPL-3.0</a></p>\n</div>\n\n          </div>"}, "last_serial": 6824277, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "bfc2e081b1baea09e277fe48ca435393", "sha256": "af25ed1559fbcabdca25258306535fc20a61d9294ed3f6ef04330a037768a66c"}, "downloads": -1, "filename": "osaca-0.1.tar.gz", "has_sig": false, "md5_digest": "bfc2e081b1baea09e277fe48ca435393", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2648980, "upload_time": "2018-01-24T08:17:47", "upload_time_iso_8601": "2018-01-24T08:17:47.964459Z", "url": "https://files.pythonhosted.org/packages/f0/99/d8f31ae8f2d0f79257d6cfc036ded8d484c27b5534258b4232e0193e949e/osaca-0.1.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "3a32b2a9d4fd55f0f7348036f531879f", "sha256": "751fc7e8c4f974854dd928e104f3127fc56c13ecc5cfd1bd86fafaf805fd54a4"}, "downloads": -1, "filename": "osaca-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "3a32b2a9d4fd55f0f7348036f531879f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 45829, "upload_time": "2018-09-03T19:51:05", "upload_time_iso_8601": "2018-09-03T19:51:05.125825Z", "url": "https://files.pythonhosted.org/packages/88/a5/2a81436fc6321f057e6d6a70369d0847d6c6ba48b9d70cbc16920846b288/osaca-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1f7d4929e6ace32bde066bbb204ceedb", "sha256": "de21c016a48629d59192170cfbd29ccf7353d14be4c7a0b41ef2843ab2fcb55f"}, "downloads": -1, "filename": "osaca-0.2.0.tar.gz", "has_sig": false, "md5_digest": "1f7d4929e6ace32bde066bbb204ceedb", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 76358, "upload_time": "2018-09-03T19:51:06", "upload_time_iso_8601": "2018-09-03T19:51:06.699155Z", "url": "https://files.pythonhosted.org/packages/1d/22/a94998e6069447b386f9bd32a6dad3553a66279c50349feb089b5e9c9a37/osaca-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "d5563ecbd042c5c3f1c6ad68e56deadb", "sha256": "c8569d2d9446860b3cc29674daaa9382117f304b146023861fc5dc650db473ce"}, "downloads": -1, "filename": "osaca-0.2.1.tar.gz", "has_sig": false, "md5_digest": "d5563ecbd042c5c3f1c6ad68e56deadb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2649646, "upload_time": "2019-01-10T12:55:55", "upload_time_iso_8601": "2019-01-10T12:55:55.586753Z", "url": "https://files.pythonhosted.org/packages/a3/b1/fbf0b923352e53214751e33cabc1cbd7a67aa58751d38dcf7c5569270840/osaca-0.2.1.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "ee6388ab8e7ef35abd91f1e419906758", "sha256": "62c7d46e4435d4e00ab0acf79de12b86c1db135fdd003b92a3fd58aaed783384"}, "downloads": -1, "filename": "osaca-0.2.2-py3-none-any.whl", "has_sig": false, "md5_digest": "ee6388ab8e7ef35abd91f1e419906758", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 228589, "upload_time": "2019-05-16T14:50:24", "upload_time_iso_8601": "2019-05-16T14:50:24.743454Z", "url": "https://files.pythonhosted.org/packages/e3/0b/b558bef3592baf38d82825dedb6183d81160d9dcf6d58095ff7c0cc46ae8/osaca-0.2.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "05d0da51b55271233b2e7fb4ecd1b0ad", "sha256": "da05a322938e64ab7b8451536a1c4e150f5b03f75ac234fb9607eec1e8472651"}, "downloads": -1, "filename": "osaca-0.2.2.tar.gz", "has_sig": false, "md5_digest": "05d0da51b55271233b2e7fb4ecd1b0ad", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 254235, "upload_time": "2019-05-16T14:50:26", "upload_time_iso_8601": "2019-05-16T14:50:26.887171Z", "url": "https://files.pythonhosted.org/packages/81/08/56c5706373727bff12253a0bb267d131c981cf7d82ae4f5659c314f8c476/osaca-0.2.2.tar.gz", "yanked": false}], "0.3.0.dev0": [{"comment_text": "", "digests": {"md5": "ab0227e1764b2d6c52a843563f2117f8", "sha256": "cbcee6e3f12a16171575a28891aeeee7735c50ba262067c8043b357d33607ae8"}, "downloads": -1, "filename": "osaca-0.3.0.dev0-py3-none-any.whl", "has_sig": false, "md5_digest": "ab0227e1764b2d6c52a843563f2117f8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 259588, "upload_time": "2019-09-27T16:17:44", "upload_time_iso_8601": "2019-09-27T16:17:44.532621Z", "url": "https://files.pythonhosted.org/packages/de/5f/5e665f93249ecb4eb73999ec03722384d7b39afc9e68eb26ac6b30fa8647/osaca-0.3.0.dev0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "95ce980aafb1f6e9201fbfa158ca69d9", "sha256": "5219ebf8f1a95939fba90c283e26d14fa20f7da5d103ab3a602c508659612c74"}, "downloads": -1, "filename": "osaca-0.3.0.dev0.tar.gz", "has_sig": false, "md5_digest": "95ce980aafb1f6e9201fbfa158ca69d9", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 255746, "upload_time": "2019-09-27T16:17:47", "upload_time_iso_8601": "2019-09-27T16:17:47.140429Z", "url": "https://files.pythonhosted.org/packages/33/9c/943f13b3077cde82c8c153e7da15a0d330b6f3d5e711f4056ba0b1fe0068/osaca-0.3.0.dev0.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "e9eb1881ab7b5ce194a294f482627215", "sha256": "603c50dff51a5fe47c74fc513e4d934841d78463d1e7493be43b3dbe62c94f05"}, "downloads": -1, "filename": "osaca-0.3.1-py3-none-any.whl", "has_sig": false, "md5_digest": "e9eb1881ab7b5ce194a294f482627215", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 342880, "upload_time": "2019-11-18T22:08:45", "upload_time_iso_8601": "2019-11-18T22:08:45.596302Z", "url": "https://files.pythonhosted.org/packages/1c/4a/21ba2b38855d0be0d7006f3a7453ce0ba280630b1fadd41e2280a9a1fc45/osaca-0.3.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6211086c44fddc36f27fb23602e341d4", "sha256": "c6172540933c3861c38f17eb8e2e9cbeb935ce471470852eb2a341b76d20c4a9"}, "downloads": -1, "filename": "osaca-0.3.1.tar.gz", "has_sig": false, "md5_digest": "6211086c44fddc36f27fb23602e341d4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 122115, "upload_time": "2019-11-18T22:03:38", "upload_time_iso_8601": "2019-11-18T22:03:38.330842Z", "url": "https://files.pythonhosted.org/packages/bc/60/4c2bba7a8304f00bd8ef3c3b9c756da340159f5b9d6db49b560aa3ce0146/osaca-0.3.1.tar.gz", "yanked": false}], "0.3.1.dev0": [{"comment_text": "", "digests": {"md5": "efe2faf81ae14167e262cb431137455c", "sha256": "392ab407bac62d060932df31cbf23c87ad8f181ffef6a61941d0d0d433236830"}, "downloads": -1, "filename": "osaca-0.3.1.dev0-py3-none-any.whl", "has_sig": false, "md5_digest": "efe2faf81ae14167e262cb431137455c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 256082, "upload_time": "2019-10-04T00:15:55", "upload_time_iso_8601": "2019-10-04T00:15:55.727562Z", "url": "https://files.pythonhosted.org/packages/ba/f3/cd38d9c4321b0c122fe669852ff2d298f0af9aef1eaa8bc0fd7a0454b091/osaca-0.3.1.dev0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f1f9253720f417a8c104484d2acd1a61", "sha256": "b084e4c0dfb769441214d4909810561922aeaedc70c9063d09878aeb31ad2b6b"}, "downloads": -1, "filename": "osaca-0.3.1.dev0.tar.gz", "has_sig": false, "md5_digest": "f1f9253720f417a8c104484d2acd1a61", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 62255, "upload_time": "2019-10-04T00:15:58", "upload_time_iso_8601": "2019-10-04T00:15:58.035694Z", "url": "https://files.pythonhosted.org/packages/46/ea/d137d125bc423727d01f88c3c651bc5a651a85e86a30c596b34cc2ae43e9/osaca-0.3.1.dev0.tar.gz", "yanked": false}], "0.3.1.dev1": [{"comment_text": "", "digests": {"md5": "42c1d74ea88066e866f83f116021f611", "sha256": "ee21bf1eafce1094e7b63280d1bb7285f743efe6504122fe2217e4591323b5ec"}, "downloads": -1, "filename": "osaca-0.3.1.dev1.tar.gz", "has_sig": false, "md5_digest": "42c1d74ea88066e866f83f116021f611", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 62710, "upload_time": "2019-10-16T09:00:32", "upload_time_iso_8601": "2019-10-16T09:00:32.211231Z", "url": "https://files.pythonhosted.org/packages/27/65/661f5d3885487ddc8c79c03a098a6cb4a440c0dd2b2f287117888acfff15/osaca-0.3.1.dev1.tar.gz", "yanked": false}], "0.3.2": [{"comment_text": "", "digests": {"md5": "f010cabfe70bbfa65b29d0c45f6a1137", "sha256": "bd6fcffb9bfe8362db7bf0026f39e67eb2458f51963c8d367efa09f5428eb3e1"}, "downloads": -1, "filename": "osaca-0.3.2-py3-none-any.whl", "has_sig": false, "md5_digest": "f010cabfe70bbfa65b29d0c45f6a1137", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 1586948, "upload_time": "2020-03-10T09:07:56", "upload_time_iso_8601": "2020-03-10T09:07:56.954488Z", "url": "https://files.pythonhosted.org/packages/ac/b7/bbc323456b2d34537eb2d5f11d1c61677d1b7558683a7cab71652008af14/osaca-0.3.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "49d8e68ee44141cb3e36c1ee44ad5d21", "sha256": "ee8a52b1d137fa7ebf19581122169e5da0ead9bb110bb0c827f1676ff697583b"}, "downloads": -1, "filename": "osaca-0.3.2.tar.gz", "has_sig": false, "md5_digest": "49d8e68ee44141cb3e36c1ee44ad5d21", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 547185, "upload_time": "2020-03-10T09:07:59", "upload_time_iso_8601": "2020-03-10T09:07:59.486870Z", "url": "https://files.pythonhosted.org/packages/a8/c5/9007412dc2e3ba32846c2cbcb68afacf6c4cdfc6ea2d7bae092d03a001e4/osaca-0.3.2.tar.gz", "yanked": false}], "0.3.2.dev1": [{"comment_text": "", "digests": {"md5": "6fe2c7e83dc82ebf0f1f566cd965da2f", "sha256": "6272bbc09b2a59014be98038252ec359fc59cc2c80c9a01f1777c4629aef5b43"}, "downloads": -1, "filename": "osaca-0.3.2.dev1.tar.gz", "has_sig": false, "md5_digest": "6fe2c7e83dc82ebf0f1f566cd965da2f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 122906, "upload_time": "2019-12-16T17:27:26", "upload_time_iso_8601": "2019-12-16T17:27:26.628477Z", "url": "https://files.pythonhosted.org/packages/a8/03/ca3adb9f716ffb6492d9ef0a45d5005d07e2a07df9d51a49bea290c757ae/osaca-0.3.2.dev1.tar.gz", "yanked": false}], "0.3.2.dev2": [{"comment_text": "", "digests": {"md5": "f2539b167bac64f718ae98143540a281", "sha256": "d741450f28699029803ba3b6c19e7d70ecbe5e167aceda786785f4565d5635d3"}, "downloads": -1, "filename": "osaca-0.3.2.dev2.tar.gz", "has_sig": false, "md5_digest": "f2539b167bac64f718ae98143540a281", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 123486, "upload_time": "2020-01-08T10:57:09", "upload_time_iso_8601": "2020-01-08T10:57:09.333324Z", "url": "https://files.pythonhosted.org/packages/5b/b3/a33b1f947ae999716e6ed97058f69f5b13c64f302be0c5ba2a98ca4df83f/osaca-0.3.2.dev2.tar.gz", "yanked": false}], "0.3.2.dev3": [{"comment_text": "", "digests": {"md5": "5423f892fad34fac7b52c68fb0fab05c", "sha256": "ccbc66454143f8d9920944437e0e8c953ed80146dfcc45527bdcd5ea8c6cf888"}, "downloads": -1, "filename": "osaca-0.3.2.dev3-py3-none-any.whl", "has_sig": false, "md5_digest": "5423f892fad34fac7b52c68fb0fab05c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 1036189, "upload_time": "2020-01-22T14:28:22", "upload_time_iso_8601": "2020-01-22T14:28:22.446936Z", "url": "https://files.pythonhosted.org/packages/d4/b5/f504523120de70f615a732090a1c3c2a5d7f7057f8cb3bf25b9e5d17d295/osaca-0.3.2.dev3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6579ff5a8cf802582c137697cb8300d1", "sha256": "1ffae0027d83d6ef926a3653ccfdcffd1ecabe76311ed54f47850c08be8b9c18"}, "downloads": -1, "filename": "osaca-0.3.2.dev3.tar.gz", "has_sig": false, "md5_digest": "6579ff5a8cf802582c137697cb8300d1", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 155333, "upload_time": "2020-01-22T14:26:15", "upload_time_iso_8601": "2020-01-22T14:26:15.272325Z", "url": "https://files.pythonhosted.org/packages/6a/35/da5d7a7e020e2313385b6f362f0c2ef8d050e72484f02208e09295a0f6f2/osaca-0.3.2.dev3.tar.gz", "yanked": false}], "0.3.2.dev4": [{"comment_text": "", "digests": {"md5": "165e22eea308fed3a58f1f9cae37e4e9", "sha256": "4dbd9e947ba2ed7bf1a4cebe2d2b29c57d49f2d84d33c759bf29c5763306e8b5"}, "downloads": -1, "filename": "osaca-0.3.2.dev4.tar.gz", "has_sig": false, "md5_digest": "165e22eea308fed3a58f1f9cae37e4e9", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 155943, "upload_time": "2020-01-28T16:31:47", "upload_time_iso_8601": "2020-01-28T16:31:47.181966Z", "url": "https://files.pythonhosted.org/packages/5a/eb/b000fbaad732f0bff637cd7536865392bdd71fd22a5834f4c9c14ddd1d3c/osaca-0.3.2.dev4.tar.gz", "yanked": false}], "0.3.2.dev5": [{"comment_text": "", "digests": {"md5": "29701c50fb5dc1c4275a49280f7ee8f9", "sha256": "63f0561c83273042c15e803b6d5c2571173fce6e11fe7034307609c9d9dcfbe2"}, "downloads": -1, "filename": "osaca-0.3.2.dev5-py3-none-any.whl", "has_sig": false, "md5_digest": "29701c50fb5dc1c4275a49280f7ee8f9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 1036916, "upload_time": "2020-01-31T18:22:19", "upload_time_iso_8601": "2020-01-31T18:22:19.348094Z", "url": "https://files.pythonhosted.org/packages/57/2e/eec429454ca91abb99c39f618d3037df5b31df064be6ab3578bf2528cbea/osaca-0.3.2.dev5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a84df4414fdd5ed840a7167d2e853446", "sha256": "b47a7e5d9a9a8667e7a38282ae5b37fc5d426d6c0126dc39f72e991fc13f7547"}, "downloads": -1, "filename": "osaca-0.3.2.dev5.tar.gz", "has_sig": false, "md5_digest": "a84df4414fdd5ed840a7167d2e853446", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 156088, "upload_time": "2020-01-31T18:20:37", "upload_time_iso_8601": "2020-01-31T18:20:37.402113Z", "url": "https://files.pythonhosted.org/packages/5c/8e/6c13fdf72ec8d446b3342563fcee36d200f73e2a06c2f5c8bbb2ad20442f/osaca-0.3.2.dev5.tar.gz", "yanked": false}], "0.3.3.dev0": [{"comment_text": "", "digests": {"md5": "47a6d8082d4fba90bed750cc6078479f", "sha256": "eafbee97e5f20727661270fc0d8e4a69016e2662bf4d133e5c6f3caca29b1fa1"}, "downloads": -1, "filename": "osaca-0.3.3.dev0.tar.gz", "has_sig": false, "md5_digest": "47a6d8082d4fba90bed750cc6078479f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 543640, "upload_time": "2020-03-16T21:20:05", "upload_time_iso_8601": "2020-03-16T21:20:05.056626Z", "url": "https://files.pythonhosted.org/packages/15/6c/4c3f8f1cb7465e4a1374b604d1c9560e3bb0e30adf6d9c9176489d3053af/osaca-0.3.3.dev0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f010cabfe70bbfa65b29d0c45f6a1137", "sha256": "bd6fcffb9bfe8362db7bf0026f39e67eb2458f51963c8d367efa09f5428eb3e1"}, "downloads": -1, "filename": "osaca-0.3.2-py3-none-any.whl", "has_sig": false, "md5_digest": "f010cabfe70bbfa65b29d0c45f6a1137", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 1586948, "upload_time": "2020-03-10T09:07:56", "upload_time_iso_8601": "2020-03-10T09:07:56.954488Z", "url": "https://files.pythonhosted.org/packages/ac/b7/bbc323456b2d34537eb2d5f11d1c61677d1b7558683a7cab71652008af14/osaca-0.3.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "49d8e68ee44141cb3e36c1ee44ad5d21", "sha256": "ee8a52b1d137fa7ebf19581122169e5da0ead9bb110bb0c827f1676ff697583b"}, "downloads": -1, "filename": "osaca-0.3.2.tar.gz", "has_sig": false, "md5_digest": "49d8e68ee44141cb3e36c1ee44ad5d21", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 547185, "upload_time": "2020-03-10T09:07:59", "upload_time_iso_8601": "2020-03-10T09:07:59.486870Z", "url": "https://files.pythonhosted.org/packages/a8/c5/9007412dc2e3ba32846c2cbcb68afacf6c4cdfc6ea2d7bae092d03a001e4/osaca-0.3.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:01:27 2020"}