{"info": {"author": "Eric Emsellem", "author_email": "eric.emsellem@eso.org", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# pymusepipe\n\nWARNING: Doc need to be updated since many major changes. Coming asap.\n\nThis is a Python wrapper for the MUSE/VLT pipeline recipes. This runs \nusing the esorex command lines (in parallel, using by default likwid, although \nother options are available). This wrapper is meant to reduce MUSE OBs automatically, \nafter dumping the fits files in a given folder.\n\nThis package includes an alignment module which may be useful, independently given \na set of images to align and assuming a reference image is provided. It can spit out \nan \"OFFSET_LIST\" MUSE compatible fits table including the flux scaling factors.\n\npymusepipe is also made for multi-pointing mosaics and multi-targets surveys\nas it will process targets automatically when provided a specific dictionary \nof which target and which pointings to consider.\n\n## 1 - Getting Started\nHere are some basic instructions to get you going with pymusepipe.\n\n### Prerequisites\npymusepipe uses Python 3. It is not compatible with python 2.7. If you are \nstill using python 2.7 I would recommend you to switch asap as it won't be \nsupported much longer anyway.\n\npymusepipe needs a number of standard modules/packages including:\n   * **numpy**\n   * **scipy** for the alignment module\n   * **matplotlib** if you wish to make some plots (e.g. via the check_pipe module)\n   * **astropy** as a general provider of many useful functions and structures, most importantly the astropy Tables.\n\nThe convolution package of pymusepipe (allowing full convolution of a datacube) uses\n**pypher** which is thus a requirement for this module to work.\nThis also includes a heavy-based usage of **mpdaf**, which is a super useful package\ndeveloped by the MUSE GTO-CRAL Team, to process and analyse datacubes, and more specifically\nMUSE cubes, images and spectra.\n\n### Installing\n\nYou can install this package via Pypi via a simple:\n```buildoutcfg\npip install pymusepipe\n```\n\nYou can obviously also install it by cloning it from github, or \ndownloading the source (from github) and do something like:\n```\npython setup.py develop\n```\nI advise to use the \"develop\" option as it actually does not copy \nthe files in your system but just create a link. \nIn that way you can easily update the source software without \nreinstalling it. The link will directly use the source which has been udpated.\n\nThe other option is to use the standard \"install\" option:\n```\npython setup.py install\n```\n\n## 2 - Basic Usage - Dealing with OBs, individually\nThe pymusepipe wrapper is meant to provide the user with a simple way to \nrun the MUSE pipeline.\n\nOnly 3 steps are needed: preparing the data (download), preparing the \nconfiguration files (templates are provided) which should take a couple of minutes, \nand using the code (a few lines at most). The package has many other hidden functionalities\nwhich I'll document as soon as I can.\n\nI recommend to use ```Ipython``` as an environment, possibly via \na ```screen``` which would allow you to disconnect from the server that \nactually runs the commands. Jupyter notebooks may also be very handy \nalthough I would not necessarily recommend them for this specific purpose as \nthe running of the pipeline may take hours.\n\n### Step 1 = Preparing your data\nThe first thing to do is to prepare the folder structure to welcome your \nMUSE datasets. This is actually rather simple.\n\nImagine you have\n   * a target or field named \"NGC1000\" (just for the sake of using an example).\n   * several pointings (each pointing can represent a set of OBs which have \n   roughly the same coordinates, best is that they have a very significant \n   overlap): 1, 2, and 3\n\nThen under your data root folder <my_data_folder> create the following folder structure:\n```\n<my_data_folder>/NGC1000\n    ./P01\n       ./Raw\n   ./P02\n       ./Raw\n   ./P03\n       ./Raw\n```\nEach pointing/OB has a \"Raw\" folder.\n\nThe next step is to download your MUSE data from the ESO web site, \nand put all the raw files (fits/fits.gz) into each individual \"Raw\" folder, \nassociated with the right pointing.\n\n### Step 2 = Preparing your configuration files\npymusepipe only needs 2 configurations ASCII files: 1 for the calibration \n(calib_tables.dic) and one for the root folders (rc.dic). \n**Examples** of such files are provided in the \"config_templates\" \nfolder of the pymusepipe package.\n\n### Step 3 = Running the pipeline\nThe pipeline is meant to be run automatically from a given python \nstructure. This should thus take the user only a few lines of codes, \nincluding one to import pymusepipe, a couple to define the names of \nthe configuration files, one to initialise the musepipe python structure, \nand one to launch the recipes. Here is an example of how this should look:\n\n```buildoutcfg\n# Import the modules\nimport pymusepipe as pmp\nfrom pymusepipe import musepipe\n\n# define the names of the configuration files\nrcfile = \"/my_data/MUSE/Config/rc.dic\"\ncalfile = \"my_data_MUSE/Config/calib_table.dic\"\n\n# Initialisation of the python - MusePipe Class - structure\nmypipe = musepipe.MusePipe(targetname=\"NGCXXXX\", pointing=1, rc_filename=rcfile,\n                          cal_filename=calfile, logfile=\"NGCXXXX_version01.log\",\n                          fakemode=False, overwrite_astropy_table=True, \n                          filter_list=\"white,Cousins_R\",\n                          filter_for_alignment=\"Cousins_R\")\n\n# Launching the pipeline\nmypipe.run_all_recipes()\n```\nSome explanation may be needed to understand what is happening:\n   * \"targetname\": is just the name of the target, used to decided where the data will be\n   * \"pointing\": will be used as \"P01\" for pointing=1, etc.\n   * \"logfile\": name of the logging file. Note that this logfile is actually \n   a shell-like file which can be used to re-run the pipeline one step at a time. Note that\n   there will be also 2 more files created using that name <logfile_name>, namely:\n   a file named <logfile_name>.out and <logfile_name>.err which will\n   contain the full output of the commands, and the error messages (stdout, stderr, resp.).\n   * \"fakemode\": you can set this to True if you just wish to initialise \n   things without actually running any recipes. The pipeline will only set \n   things up but if you run any recipes will only \"fake\" them (not launch any \n   esorex command, only spitting the code out)\n   * \"filter_list\": list of filter names to use to reconstruct images \n   when building up cubes. This should be part of the filter_list fits \n   table provided (see calib_tables config file).\n   * \"filter_for_alignment\": specific filter name used for alignment between exposures.\n\nOther options can be useful:\n   * \"musemode\": this is by default \"WFM_NOAO_N\" which is the most often \n   used MUSE mode. This will filter out exposures not compatible with the \n   given mode. So please beware.\n   * \"reset_log\": will reset the log file. By default it is False, hence \n   new runs will be appended.\n   * \"overwrite_astropy_table\": by default this is False. If True, \n   new runs will rewrite the Astropy output tables.\n   * \"time_astrometry\": by default it is False, meaning the pipeline \n   will try to detect a GEOMETRY and ASTROMETRY Files delivered with the Raw\n   files by ESO. If set to True, it will use the time dependent astro/geo files\n   provided by the GTO Team but you would need to make these available on your system.\n   Hence I would recommend to keep the default (False).\n\n## 3- Advanced Usage - Targets and Mosaics\n\n## 4- Alignment module\nDetails to come.\n\n## 5- Further details\nHere we provide a bit more details about a few issues regarding \nthe configuration files or set up parameters.\n\n### Configuration files\n\n#### rc configuration file\nIt contains 3 lines, with: *musecalib*, *musecalib_time* and *root*.\n\n   * *root* provides the root folder for your data. For Target NGCXXXX, \n   and Pointing 1, the Raw data will be looked for \n   in *root*/TargetXXXX/P01/Raw (see *Preparing your data* above).\n   * musecalib should contain the standard MUSE calibration files. \n   These are usually distributed in the MUSE kit within a \n   \"muse-calib-x.x.x/cal\" folder.\n   * musecalib_time: time dependent geometry and astrometry files \n   (the correspondence between observing run dates and specific \n   files are given in the dic_geo_astrowcs_table in musepipe.py).\n\n#### calib_table configuration file\nIt contains a series of given fits files which will be used by the pipeline. Most names are self-explantory. That includes:\n   * *geo_table* and *astro_table*: only used if you don't rely on the default time dependent geometry files (see rc file).\n   * *badpix_table*, *vignetting_mask*, *std_flux_table*, *extinct_table*, *line_catalog* all usually provided with the MUSE pipeline.\n   * *filter_list* : name of the fits filter list. This is used in case you wish to provide your own. Note that it needs to follow the MUSE standard for such a table.\n\n### Recipes\nMost MUSE pipeline recipes are run while run_all_recipes is launched. This can be changed in the prep_recipes_pipe.py or just scripted. Actually run_all_recipes() is just a function which launches (assuming 'mypipe' is your MusePipe structure, see above):\n```\n        mypipe.run_bias()\n        mypipe.run_flat()\n        mypipe.run_wave()\n        mypipe.run_lsf()\n        mypipe.run_twilight(illum=illum)\n        mypipe.run_scibasic_all(illum=illum)\n        mypipe.run_standard()\n        mypipe.run_sky(fraction=fraction)\n        mypipe.run_prep_align()\n        mypipe.run_align_bypointing()\n        mypipe.run_align_bygroup()\n        mypipe.run_scipost()\n        mypipe.run_scipost(expotype=\"SKY\", offset_list=False, skymethod='none')\n        mypipe.run_combine_pointing()\n```\nwhere \"illum\" is a boolean (default is True), fraction is 0.8.\n\nFeel free to launch these steps one by one (the order is important as in any data reduction process).\n\n### Structure of the output\n\n#### Folders\nThe structure of the output is driven by a set of folder names described in init_musepipe.py in a few dictionaries (dic_input_folders, dic_folders, dic_folders_target). You can in principle change the names of the folders themselves, but I would advise against that.\n\nThe pipeline will create the folder structure automatically, checking whether the folders exist or not.\n\n#### Log files\n2 basic log files are spitted out: one is the Esorex output which will \nbe stored in the \"Esorex_log\" folder. The other one will be in the \"Log\" \nfolder with the name provided at start: that one is like a shell script \nwhich can be used to rerun things directly via the command line.\nIn the \"Log\" folder, there will also be, for each log file, a file \".out\" and\none with \".err\" extensions, respectively including all the stdout and stderr\nmessages. This may be useful to trace details in the data reduction and problems.\n\n#### Astropy Tables\nEach recipe will trigger the creation of a astropy Table. \nThese are stored under \"Astro_Tables\". You can use these to monitor \nwhich files have been processed or used.\n\n#### Python structure\nMost of the information you may need is actually stored in the \npython \"MusePipe\" class structure. More details to come.\n\n## Authors\n* **Eric Emsellem** [2017-2020], at ESO and CRAL\n\n## License\n\nThis project is licensed under the MIT License - see the \n[LICENSE](LICENSE) file for details\n\n## Acknowledgments\nI would like to thank people who have initially sent me \ntheir code-samples, including Bernd Husemann, Dimitri Gadotti, \nLodovico Coccato, Mark den Brok. I would also like to specifically \nand warmly thank Rebecca McElroy who supported me with the MUSE\ndata reduction at the early stages of the development of this package,\nand Francesco Santoro who has significantly contributed \nin the testing, debugging of the code (version 1), and proposed dedicated python lines \nto be integrated in pymusepipe (e.g., alignment module).", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://github.com/emsellem/pymusepipe/archive/v2.9.6.beta.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/emsellem/pipemusepipe", "keywords": "MUSE,DATAREDUCTION", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "pymusepipe", "package_url": "https://pypi.org/project/pymusepipe/", "platform": "", "project_url": "https://pypi.org/project/pymusepipe/", "project_urls": {"Download": "https://github.com/emsellem/pymusepipe/archive/v2.9.6.beta.tar.gz", "Homepage": "https://github.com/emsellem/pipemusepipe"}, "release_url": "https://pypi.org/project/pymusepipe/2.9.9.post8/", "requires_dist": null, "requires_python": "", "summary": "python module to reduce MUSE Raw data and combine them", "version": "2.9.9.post8", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>pymusepipe</h1>\n<p>WARNING: Doc need to be updated since many major changes. Coming asap.</p>\n<p>This is a Python wrapper for the MUSE/VLT pipeline recipes. This runs\nusing the esorex command lines (in parallel, using by default likwid, although\nother options are available). This wrapper is meant to reduce MUSE OBs automatically,\nafter dumping the fits files in a given folder.</p>\n<p>This package includes an alignment module which may be useful, independently given\na set of images to align and assuming a reference image is provided. It can spit out\nan \"OFFSET_LIST\" MUSE compatible fits table including the flux scaling factors.</p>\n<p>pymusepipe is also made for multi-pointing mosaics and multi-targets surveys\nas it will process targets automatically when provided a specific dictionary\nof which target and which pointings to consider.</p>\n<h2>1 - Getting Started</h2>\n<p>Here are some basic instructions to get you going with pymusepipe.</p>\n<h3>Prerequisites</h3>\n<p>pymusepipe uses Python 3. It is not compatible with python 2.7. If you are\nstill using python 2.7 I would recommend you to switch asap as it won't be\nsupported much longer anyway.</p>\n<p>pymusepipe needs a number of standard modules/packages including:</p>\n<ul>\n<li><strong>numpy</strong></li>\n<li><strong>scipy</strong> for the alignment module</li>\n<li><strong>matplotlib</strong> if you wish to make some plots (e.g. via the check_pipe module)</li>\n<li><strong>astropy</strong> as a general provider of many useful functions and structures, most importantly the astropy Tables.</li>\n</ul>\n<p>The convolution package of pymusepipe (allowing full convolution of a datacube) uses\n<strong>pypher</strong> which is thus a requirement for this module to work.\nThis also includes a heavy-based usage of <strong>mpdaf</strong>, which is a super useful package\ndeveloped by the MUSE GTO-CRAL Team, to process and analyse datacubes, and more specifically\nMUSE cubes, images and spectra.</p>\n<h3>Installing</h3>\n<p>You can install this package via Pypi via a simple:</p>\n<pre>pip install pymusepipe\n</pre>\n<p>You can obviously also install it by cloning it from github, or\ndownloading the source (from github) and do something like:</p>\n<pre><code>python setup.py develop\n</code></pre>\n<p>I advise to use the \"develop\" option as it actually does not copy\nthe files in your system but just create a link.\nIn that way you can easily update the source software without\nreinstalling it. The link will directly use the source which has been udpated.</p>\n<p>The other option is to use the standard \"install\" option:</p>\n<pre><code>python setup.py install\n</code></pre>\n<h2>2 - Basic Usage - Dealing with OBs, individually</h2>\n<p>The pymusepipe wrapper is meant to provide the user with a simple way to\nrun the MUSE pipeline.</p>\n<p>Only 3 steps are needed: preparing the data (download), preparing the\nconfiguration files (templates are provided) which should take a couple of minutes,\nand using the code (a few lines at most). The package has many other hidden functionalities\nwhich I'll document as soon as I can.</p>\n<p>I recommend to use <code>Ipython</code> as an environment, possibly via\na <code>screen</code> which would allow you to disconnect from the server that\nactually runs the commands. Jupyter notebooks may also be very handy\nalthough I would not necessarily recommend them for this specific purpose as\nthe running of the pipeline may take hours.</p>\n<h3>Step 1 = Preparing your data</h3>\n<p>The first thing to do is to prepare the folder structure to welcome your\nMUSE datasets. This is actually rather simple.</p>\n<p>Imagine you have</p>\n<ul>\n<li>a target or field named \"NGC1000\" (just for the sake of using an example).</li>\n<li>several pointings (each pointing can represent a set of OBs which have\nroughly the same coordinates, best is that they have a very significant\noverlap): 1, 2, and 3</li>\n</ul>\n<p>Then under your data root folder &lt;my_data_folder&gt; create the following folder structure:</p>\n<pre><code>&lt;my_data_folder&gt;/NGC1000\n    ./P01\n       ./Raw\n   ./P02\n       ./Raw\n   ./P03\n       ./Raw\n</code></pre>\n<p>Each pointing/OB has a \"Raw\" folder.</p>\n<p>The next step is to download your MUSE data from the ESO web site,\nand put all the raw files (fits/fits.gz) into each individual \"Raw\" folder,\nassociated with the right pointing.</p>\n<h3>Step 2 = Preparing your configuration files</h3>\n<p>pymusepipe only needs 2 configurations ASCII files: 1 for the calibration\n(calib_tables.dic) and one for the root folders (rc.dic).\n<strong>Examples</strong> of such files are provided in the \"config_templates\"\nfolder of the pymusepipe package.</p>\n<h3>Step 3 = Running the pipeline</h3>\n<p>The pipeline is meant to be run automatically from a given python\nstructure. This should thus take the user only a few lines of codes,\nincluding one to import pymusepipe, a couple to define the names of\nthe configuration files, one to initialise the musepipe python structure,\nand one to launch the recipes. Here is an example of how this should look:</p>\n<pre># Import the modules\nimport pymusepipe as pmp\nfrom pymusepipe import musepipe\n\n# define the names of the configuration files\nrcfile = \"/my_data/MUSE/Config/rc.dic\"\ncalfile = \"my_data_MUSE/Config/calib_table.dic\"\n\n# Initialisation of the python - MusePipe Class - structure\nmypipe = musepipe.MusePipe(targetname=\"NGCXXXX\", pointing=1, rc_filename=rcfile,\n                          cal_filename=calfile, logfile=\"NGCXXXX_version01.log\",\n                          fakemode=False, overwrite_astropy_table=True, \n                          filter_list=\"white,Cousins_R\",\n                          filter_for_alignment=\"Cousins_R\")\n\n# Launching the pipeline\nmypipe.run_all_recipes()\n</pre>\n<p>Some explanation may be needed to understand what is happening:</p>\n<ul>\n<li>\"targetname\": is just the name of the target, used to decided where the data will be</li>\n<li>\"pointing\": will be used as \"P01\" for pointing=1, etc.</li>\n<li>\"logfile\": name of the logging file. Note that this logfile is actually\na shell-like file which can be used to re-run the pipeline one step at a time. Note that\nthere will be also 2 more files created using that name &lt;logfile_name&gt;, namely:\na file named &lt;logfile_name&gt;.out and &lt;logfile_name&gt;.err which will\ncontain the full output of the commands, and the error messages (stdout, stderr, resp.).</li>\n<li>\"fakemode\": you can set this to True if you just wish to initialise\nthings without actually running any recipes. The pipeline will only set\nthings up but if you run any recipes will only \"fake\" them (not launch any\nesorex command, only spitting the code out)</li>\n<li>\"filter_list\": list of filter names to use to reconstruct images\nwhen building up cubes. This should be part of the filter_list fits\ntable provided (see calib_tables config file).</li>\n<li>\"filter_for_alignment\": specific filter name used for alignment between exposures.</li>\n</ul>\n<p>Other options can be useful:</p>\n<ul>\n<li>\"musemode\": this is by default \"WFM_NOAO_N\" which is the most often\nused MUSE mode. This will filter out exposures not compatible with the\ngiven mode. So please beware.</li>\n<li>\"reset_log\": will reset the log file. By default it is False, hence\nnew runs will be appended.</li>\n<li>\"overwrite_astropy_table\": by default this is False. If True,\nnew runs will rewrite the Astropy output tables.</li>\n<li>\"time_astrometry\": by default it is False, meaning the pipeline\nwill try to detect a GEOMETRY and ASTROMETRY Files delivered with the Raw\nfiles by ESO. If set to True, it will use the time dependent astro/geo files\nprovided by the GTO Team but you would need to make these available on your system.\nHence I would recommend to keep the default (False).</li>\n</ul>\n<h2>3- Advanced Usage - Targets and Mosaics</h2>\n<h2>4- Alignment module</h2>\n<p>Details to come.</p>\n<h2>5- Further details</h2>\n<p>Here we provide a bit more details about a few issues regarding\nthe configuration files or set up parameters.</p>\n<h3>Configuration files</h3>\n<h4>rc configuration file</h4>\n<p>It contains 3 lines, with: <em>musecalib</em>, <em>musecalib_time</em> and <em>root</em>.</p>\n<ul>\n<li><em>root</em> provides the root folder for your data. For Target NGCXXXX,\nand Pointing 1, the Raw data will be looked for\nin <em>root</em>/TargetXXXX/P01/Raw (see <em>Preparing your data</em> above).</li>\n<li>musecalib should contain the standard MUSE calibration files.\nThese are usually distributed in the MUSE kit within a\n\"muse-calib-x.x.x/cal\" folder.</li>\n<li>musecalib_time: time dependent geometry and astrometry files\n(the correspondence between observing run dates and specific\nfiles are given in the dic_geo_astrowcs_table in musepipe.py).</li>\n</ul>\n<h4>calib_table configuration file</h4>\n<p>It contains a series of given fits files which will be used by the pipeline. Most names are self-explantory. That includes:</p>\n<ul>\n<li><em>geo_table</em> and <em>astro_table</em>: only used if you don't rely on the default time dependent geometry files (see rc file).</li>\n<li><em>badpix_table</em>, <em>vignetting_mask</em>, <em>std_flux_table</em>, <em>extinct_table</em>, <em>line_catalog</em> all usually provided with the MUSE pipeline.</li>\n<li><em>filter_list</em> : name of the fits filter list. This is used in case you wish to provide your own. Note that it needs to follow the MUSE standard for such a table.</li>\n</ul>\n<h3>Recipes</h3>\n<p>Most MUSE pipeline recipes are run while run_all_recipes is launched. This can be changed in the prep_recipes_pipe.py or just scripted. Actually run_all_recipes() is just a function which launches (assuming 'mypipe' is your MusePipe structure, see above):</p>\n<pre><code>        mypipe.run_bias()\n        mypipe.run_flat()\n        mypipe.run_wave()\n        mypipe.run_lsf()\n        mypipe.run_twilight(illum=illum)\n        mypipe.run_scibasic_all(illum=illum)\n        mypipe.run_standard()\n        mypipe.run_sky(fraction=fraction)\n        mypipe.run_prep_align()\n        mypipe.run_align_bypointing()\n        mypipe.run_align_bygroup()\n        mypipe.run_scipost()\n        mypipe.run_scipost(expotype=\"SKY\", offset_list=False, skymethod='none')\n        mypipe.run_combine_pointing()\n</code></pre>\n<p>where \"illum\" is a boolean (default is True), fraction is 0.8.</p>\n<p>Feel free to launch these steps one by one (the order is important as in any data reduction process).</p>\n<h3>Structure of the output</h3>\n<h4>Folders</h4>\n<p>The structure of the output is driven by a set of folder names described in init_musepipe.py in a few dictionaries (dic_input_folders, dic_folders, dic_folders_target). You can in principle change the names of the folders themselves, but I would advise against that.</p>\n<p>The pipeline will create the folder structure automatically, checking whether the folders exist or not.</p>\n<h4>Log files</h4>\n<p>2 basic log files are spitted out: one is the Esorex output which will\nbe stored in the \"Esorex_log\" folder. The other one will be in the \"Log\"\nfolder with the name provided at start: that one is like a shell script\nwhich can be used to rerun things directly via the command line.\nIn the \"Log\" folder, there will also be, for each log file, a file \".out\" and\none with \".err\" extensions, respectively including all the stdout and stderr\nmessages. This may be useful to trace details in the data reduction and problems.</p>\n<h4>Astropy Tables</h4>\n<p>Each recipe will trigger the creation of a astropy Table.\nThese are stored under \"Astro_Tables\". You can use these to monitor\nwhich files have been processed or used.</p>\n<h4>Python structure</h4>\n<p>Most of the information you may need is actually stored in the\npython \"MusePipe\" class structure. More details to come.</p>\n<h2>Authors</h2>\n<ul>\n<li><strong>Eric Emsellem</strong> [2017-2020], at ESO and CRAL</li>\n</ul>\n<h2>License</h2>\n<p>This project is licensed under the MIT License - see the\n<a href=\"LICENSE\" rel=\"nofollow\">LICENSE</a> file for details</p>\n<h2>Acknowledgments</h2>\n<p>I would like to thank people who have initially sent me\ntheir code-samples, including Bernd Husemann, Dimitri Gadotti,\nLodovico Coccato, Mark den Brok. I would also like to specifically\nand warmly thank Rebecca McElroy who supported me with the MUSE\ndata reduction at the early stages of the development of this package,\nand Francesco Santoro who has significantly contributed\nin the testing, debugging of the code (version 1), and proposed dedicated python lines\nto be integrated in pymusepipe (e.g., alignment module).</p>\n\n          </div>"}, "last_serial": 7069118, "releases": {"2.9.6": [{"comment_text": "", "digests": {"md5": "45c52607dfc87b55067c69fc2236e37e", "sha256": "3fa8785a13c06ba1e1dc089736af4ffb0793b77b97637168f9175403ef5b9168"}, "downloads": -1, "filename": "pymusepipe-2.9.6-py3-none-any.whl", "has_sig": false, "md5_digest": "45c52607dfc87b55067c69fc2236e37e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 104926, "upload_time": "2020-03-27T12:23:33", "upload_time_iso_8601": "2020-03-27T12:23:33.563379Z", "url": "https://files.pythonhosted.org/packages/7c/97/53c76e4f040a66c6aac3b24e2bef78fc5e0f32ffa9133097b259c56e59f7/pymusepipe-2.9.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "312126d2cbb758b2d95fad6f870f6e81", "sha256": "12f59d64eed53b56a398819fc1953c339caa496f76f23c3d2d0018435c31d39e"}, "downloads": -1, "filename": "pymusepipe-2.9.6.tar.gz", "has_sig": false, "md5_digest": "312126d2cbb758b2d95fad6f870f6e81", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 94568, "upload_time": "2020-03-27T12:23:36", "upload_time_iso_8601": "2020-03-27T12:23:36.089637Z", "url": "https://files.pythonhosted.org/packages/54/79/02af248ca98fe712c46fc796e3069b14da2ffb52a58a5441355146a17c5f/pymusepipe-2.9.6.tar.gz", "yanked": false}], "2.9.7": [{"comment_text": "", "digests": {"md5": "cad64e367598c6da672cb0a335050a09", "sha256": "aa33075a471cb58ef7010e6c2ddba1c6f5357689d31c3d5b6e4bee998fa51323"}, "downloads": -1, "filename": "pymusepipe-2.9.7-py3-none-any.whl", "has_sig": false, "md5_digest": "cad64e367598c6da672cb0a335050a09", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 105007, "upload_time": "2020-03-27T12:31:24", "upload_time_iso_8601": "2020-03-27T12:31:24.514614Z", "url": "https://files.pythonhosted.org/packages/35/9a/8008c1b69687de6597985d26ed5c1429dc21965cac09441996324904a82b/pymusepipe-2.9.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "234da41aafcb466ce4c01d06a3be1f1c", "sha256": "859f2449bf45c5e9780e4d256bdcf61c37724a8cc8a681b56841b5132a9b7b78"}, "downloads": -1, "filename": "pymusepipe-2.9.7.tar.gz", "has_sig": false, "md5_digest": "234da41aafcb466ce4c01d06a3be1f1c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 94767, "upload_time": "2020-03-27T12:31:27", "upload_time_iso_8601": "2020-03-27T12:31:27.225278Z", "url": "https://files.pythonhosted.org/packages/89/e7/93bf90ea40f11ca90724c8894a80f0f2e5839aad67606092d2b685557a16/pymusepipe-2.9.7.tar.gz", "yanked": false}], "2.9.8": [{"comment_text": "", "digests": {"md5": "833b81b3145eaa53c3a65d9dd095b014", "sha256": "96306b13c3a677b65029c2a9f9b5a94928a33f565f95649624f7f3e46d7b4215"}, "downloads": -1, "filename": "pymusepipe-2.9.8.tar.gz", "has_sig": false, "md5_digest": "833b81b3145eaa53c3a65d9dd095b014", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 97805, "upload_time": "2020-03-27T16:18:55", "upload_time_iso_8601": "2020-03-27T16:18:55.503949Z", "url": "https://files.pythonhosted.org/packages/ae/81/ac9c8daa17f0c0f106f7e593b11d90e05cf2991df76dcf72ee5fc4c9202c/pymusepipe-2.9.8.tar.gz", "yanked": false}], "2.9.8.post1": [{"comment_text": "", "digests": {"md5": "84ac745757c2ea1930df528a578682ac", "sha256": "63cf5adbc53998cfcd656b8ab63b13d187fd5ed2b7b495a65349ecf14874aa6d"}, "downloads": -1, "filename": "pymusepipe-2.9.8.post1.tar.gz", "has_sig": false, "md5_digest": "84ac745757c2ea1930df528a578682ac", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 97792, "upload_time": "2020-03-27T16:44:33", "upload_time_iso_8601": "2020-03-27T16:44:33.598918Z", "url": "https://files.pythonhosted.org/packages/8c/c8/89b931d696ec75b6fb403455b610b9ccbd88869c67871ab370ac94d4d0dc/pymusepipe-2.9.8.post1.tar.gz", "yanked": false}], "2.9.9.post5": [{"comment_text": "", "digests": {"md5": "40d475d445be38675d402a4b477de74e", "sha256": "f456207fe1cfc59be2813d8afde59d81e9cb3296c2f8a4bf47b032aeb08cb916"}, "downloads": -1, "filename": "pymusepipe-2.9.9.post5.tar.gz", "has_sig": false, "md5_digest": "40d475d445be38675d402a4b477de74e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 98429, "upload_time": "2020-04-06T13:27:23", "upload_time_iso_8601": "2020-04-06T13:27:23.572170Z", "url": "https://files.pythonhosted.org/packages/fe/41/d6a75ecae0e39d8ef3094091b82952e65a566b05516c9d12828509dd5a88/pymusepipe-2.9.9.post5.tar.gz", "yanked": false}], "2.9.9.post8": [{"comment_text": "", "digests": {"md5": "ae62862d533e4896263feeb52cd591b8", "sha256": "c470b3a24661ac41d1917b908241ed270ca701ae7c90a1b94adebf3671e50f7e"}, "downloads": -1, "filename": "pymusepipe-2.9.9.post8.tar.gz", "has_sig": false, "md5_digest": "ae62862d533e4896263feeb52cd591b8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 99371, "upload_time": "2020-04-21T16:18:15", "upload_time_iso_8601": "2020-04-21T16:18:15.121219Z", "url": "https://files.pythonhosted.org/packages/58/9f/18e0295491e4fea0d2f94cb4227ae0d9f0d044457bb9b97d0a95e2e1e3ec/pymusepipe-2.9.9.post8.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ae62862d533e4896263feeb52cd591b8", "sha256": "c470b3a24661ac41d1917b908241ed270ca701ae7c90a1b94adebf3671e50f7e"}, "downloads": -1, "filename": "pymusepipe-2.9.9.post8.tar.gz", "has_sig": false, "md5_digest": "ae62862d533e4896263feeb52cd591b8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 99371, "upload_time": "2020-04-21T16:18:15", "upload_time_iso_8601": "2020-04-21T16:18:15.121219Z", "url": "https://files.pythonhosted.org/packages/58/9f/18e0295491e4fea0d2f94cb4227ae0d9f0d044457bb9b97d0a95e2e1e3ec/pymusepipe-2.9.9.post8.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:01:30 2020"}