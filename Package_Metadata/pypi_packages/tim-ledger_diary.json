{"info": {"author": "Matthias Kauer", "author_email": "mk.software@zuez.org", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Console", "Intended Audience :: End Users/Desktop", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python"], "description": "[![build status](https://travis-ci.org/MatthiasKauer/tim.png?branch=master)](https://travis-ci.org/MatthiasKauer/tim)\n**Note: I'm in the process of adapting the cram tests to tim; this is difficult on Windows and happens only when I feel like booting up my Linux machine. I am using tim daily already however**\n\n#tim amendments\ntim tries to simplify [ti](https://github.com/sharat87/ti) by relying on [hledger](http://hledger.org/) (which must be on your path) for number crunching.\n\nBiggest changes:\n\n* hledger omits tasks that are too short. 4min, rounded up to 0.1 h seems to be the cut-off.\n* interrupts are gone because the stack is complex; you can call switch if you want to start work on something else. If you enter finish, nothing is automatically started.\n* hl command hands over your data to hledger to perform aggregations. [hledger manual](http://hledger.org/manual.html#timelog)\n* I'm not sure which program the test cases belong to. Please let me know, so I can amend them and test accordingly. Answer seems to be [cram](https://pypi.python.org/pypi/cram).\n* note is gone. \n* tag is gone (for now)\n* edit is deactivated till I figure out what it does\n\nThis leaves the following commands intact:\n\n* on\n* fin\n* log\n* status\n* help\n\n#Installation\nTim is on PyPI: https://pypi.python.org/pypi/tim-timetracker\n\nInstall via:\n```\npip install tim-timetracker\n```\n\n#File size considerations\nMy tim-sheet grows roughly 2KB / day. That's about 700kB / year. Probably less if I don't track weekends.\nWriting line by line the way I am doing it now is starting to get slow already however (at 6KB). hledger itself is significantly faster. As soon as this difference bothers me enough I will switch to storing in hledger format directly s.t. the speed will no longer be an issue.\n\n#For developers\n###Python environment installation\n####Windows\nWe develop using Anaconda with package manager [conda](http://conda.io/).\nYou can install all packages in our environment (inspect environment.yml beforehand; expect 2-3 min of linking/downloading, probably more if your conda base installation is still very basic or has vastly different packages than mine) using:\n```\nconda env create\n```\nif it already exists you may have to remove it first.\n\n    * Read <name> on top of environment.yml\n    * Confirm via ```conda env list```\n    * Remove ```conda env remove --name <name>```\n\nIf you feel like updating the environment, run ```conda env export -f environment.yml``` and commit it to the repository.\n\n# ti &mdash; A silly simple time tracker\n\n`ti` is a small command line time tracking application. Simple basic usage\nlooks like this\n\n    $ ti on my-project\n    $ ti fin\n\nYou can also give it human-readable times.\n\n    $ ti on my-project 30mins ago\n\n`ti` sports many other cool features. Read along to discover.\n\n## Wat?\n\n`ti` is a simple command line time tracker. It has been completely re-written in\npython (from being a bash script) and has (almost) complete test coverage. It is\ninspired by [timed](http://adeel.github.com/timed), which is a nice project\nand you should check out if you don't like `ti`. It also takes inspiration from\nthe simplicity of [t](http://stevelosh.com/projects/t/).\n\nIf a time tracker tool makes me think for more than 3-5 seconds, I lose my line\nof thought and forget what I was doing. This is why I created `ti`. With `ti`,\nyou'll be as fast as you can type, which you should be good with anyway.\n\nThe most important part about `ti` is that it\nprovides just a few commands to manage your time tracking and gets out\nof your way. All data is saved in a JSON file (`~/.ti-sheet`, can be changed by\nsetting `$SHEET_FILE`) for easy access to whatever you need to do. Some ideas,\n\n- Read your json file to generate beautiful html reports.\n- Build monthly statistics based on tags or the tasks themselves.\n- Read the currently working project and make it show up in your terminal\n  prompt. May be even with how long you've been on it. (!!!)\n\nIts *your* data.\n\nOh and by the way, the source is a fairly small python script, so if you know\npython, you may want to skim over it to get a better feel of how it works.\n\n*Note*: If you have used the previous bash version of `ti`, which was horribly\ntied up to only work on linux, you might notice the lack of *plugins* in this\npython version. I am not really missing them, so I might not add them. If anyone\nhas any interesting use cases for it, I'm willing to consider.\n\n## Usage\n\nHere's the minimal usage style:\n\n    $ ti on my-project\n    Start working on my-project.\n\n    $ ti status\n    You have been working on my-project for less than a minute.\n\n    $ ti fin\n    So you stopped working on my-project.\n\n`on` and `fin` can take a time (format described further down) at which to apply\nthe action.\n\n    $ ti on another-project 2 hours ago\n    Start working on another-project.\n\n    $ ti s\n    You have been working on another-project for about 2 hours.\n\n    $ ti fin 30 minutes ago\n    So you stopped working on another-project.\n\nAlso illustrating in the previous example is short aliases of all commands,\ntheir first letter. Like, `s` for `status`, `o` for `on`, `f` for `fin`, etc.\n\nPut brief notes on what you've been doing.\n\n    $ ti note waiting for Napoleon to take over the world\n    $ ti n another simple note for demo purposes\n\nTag your activities for fun and profit.\n\n    $ ti tag imp\n\nGet a log of all activities with the `log` (or `l`) command.\n\n    $ ti log\n\n## Command reference\n\nRun `ti -h` (or `--help` or `help` or just `h`) to get a short command summary\nof commands.\n\n### on\n\n- Short: `o`\n- Syntax: `ti (o|on) <name> [<time>...]`\n\nStart tracking time for the project/activity given by `<name>`. For example,\n\n    ti on conquest\n\ntells `ti` to start tracking for the activitiy `conquest` *now*. You can\noptionally specify a relative time in the past like so,\n\n    ti on conquest 10mins ago\n\nThe format of the time is detailed further below.\n\n### fin\n\n- Short: `f`\n- Syntax: `ti (f|fin) [<time>...]`\n\nEnd tracking for the current activity *now*. Just like with `on` command above,\nyou can give an optional time to the past. Example\n\n    ti fin 10mins ago\n\ntells `ti` that you finished working on the current activity at, well, 10\nminutes ago.\n\n### status\n\n- Short: `s`\n- Syntax: `ti (s|status)`\n\nGives short human readable message on the current status. i.e., whether anything\nis being tracked currently or not. Example,\n\n    $ ti on conqering-the-world\n    Start working on conqering-the-world.\n    $ ti status\n    You have been working on `conqering-the-world` for less than a minute.\n\n### tag\n\n- Short: `t`\n- Syntax: `ti (t|tag) <tag>...`\n\nThis command adds the given tags to the current activity. Tags are not currently\nused within the `ti` time tracker, but they will be saved in the json data file.\nYou may use them for whatever purposes you like.\n\nFor example, if you have a script to generate a html report from your `ti` data,\nyou could tag some activities with a tag like `red` or `important` so that, that\nactivity will appear in red in the final html report.\n\nUse it like,\n\n    ti tag red for-joe\n\nadds the tags `red` and `for-joe` to the current activitiy. You can specify any\nnumber of tags.\n\nTags are currently for your purpose. Use them as you see fit.\n\n### note\n\n- Short: `n`\n- Syntax: `ti (n|note) <note-text>...`\n\nThis command adds a note on the current activity. Again, like tags, this has no\nsignificance with the time tracking aspect of `ti`. This is for your own\nrecording purposes and for the scripts your write to process your `ti` data.\n\nUse it like,\n\n    ti note Discuss this with the other team.\n\nadds the note `Discuss this with the other team.` to the current activity.\n\n### log\n\n- Short: `l`\n- Syntax: `ti (l|log) [today]`\n\nGives a table like representation of all activities and total time spent on each\nof them.\n\n## Time format\n\nCurrently only the following are recognized. If there is something that is not\nhandled, but should be, please open an issue about it or a pull request\n(function in question is `parse_time`)\n\n- *n* seconds ago can be written as:\n    - *n*seconds ago\n    - *n*second ago\n    - *n*secs ago\n    - *n*sec ago\n    - *n*s ago\n    - `a` in place of *n* in all above cases, to mean 1 second.\n    - Eg., `10s ago`, `a sec ago` `25 seconds ago`, `25seconds ago`.\n\n- *n* minutes ago can be written as:\n    - *n*minutes ago\n    - *n*minute ago\n    - *n*mins ago\n    - *n*min ago\n    - `a` in place of *n* in all above cases, to mean 1 minute.\n    - Eg., `5mins ago`, `a minute ago`, `10 minutes ago`.\n\n- *n* hours ago can be written as:\n    - *n*hours ago\n    - *n*hour ago\n    - *n*hrs ago\n    - *n*hr ago\n    - `a` or `an` in place of *n* in all above cases, to mean 1 hour.\n    - Eg., `an hour ago`, `an hr ago`, `2hrs ago`.\n\nWhere *n* is an arbitrary number and any number of spaces between *n* and the\ntime unit are allowed.\n\n## Status\n\nThe project is beta. If you find any bug or have any feedback, please do open an\nissue on [Github issues](https://github.com/sharat87/ti/issues).\n\n## Gimme!\n\nYou can download `ti` [from the source on\ngithub](https://raw.github.com/sharat87/ti/master/bin/ti)</a>.\n\n- Put it somewhere in your `$PATH` and make sure it has executable permissions.\n- Install pyyaml using the command `pip install --user pyyaml`.\n\nAfter that, `ti` should be working fine.\n\nAlso, visit the [project page on github](https://github.com/sharat87/ti) for any\nfurther details.\n\n## Who?\n\nCreated and fed by Shrikant Sharat\n([@sharat87](https://twitter.com/#!sharat87)). To get in touch, ping me on\ntwitter or <a href=mailto:shrikantsharat.k@gmail.com>email</a>.\n\n## License\n\n[MIT License](http://mitl.sharats.me).\n\n\nMatthias Kauer\nShrikant Sharat K (http://ti.sharats.me/, https://twitter.com/sharat87)", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/MatthiasKauer/tim", "keywords": null, "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "tim-ledger_diary", "package_url": "https://pypi.org/project/tim-ledger_diary/", "platform": "Any", "project_url": "https://pypi.org/project/tim-ledger_diary/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/MatthiasKauer/tim"}, "release_url": "https://pypi.org/project/tim-ledger_diary/0.5.2/", "requires_dist": null, "requires_python": null, "summary": "command line time logger with hledger backend for number crunching", "version": "0.5.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            [![build status](https://travis-ci.org/MatthiasKauer/tim.png?branch=master)](https://travis-ci.org/MatthiasKauer/tim)<br>**Note: I'm in the process of adapting the cram tests to tim; this is difficult on Windows and happens only when I feel like booting up my Linux machine. I am using tim daily already however**<br><br>#tim amendments<br>tim tries to simplify [ti](https://github.com/sharat87/ti) by relying on [hledger](http://hledger.org/) (which must be on your path) for number crunching.<br><br>Biggest changes:<br><br>* hledger omits tasks that are too short. 4min, rounded up to 0.1 h seems to be the cut-off.<br>* interrupts are gone because the stack is complex; you can call switch if you want to start work on something else. If you enter finish, nothing is automatically started.<br>* hl command hands over your data to hledger to perform aggregations. [hledger manual](http://hledger.org/manual.html#timelog)<br>* I'm not sure which program the test cases belong to. Please let me know, so I can amend them and test accordingly. Answer seems to be [cram](https://pypi.python.org/pypi/cram).<br>* note is gone. <br>* tag is gone (for now)<br>* edit is deactivated till I figure out what it does<br><br>This leaves the following commands intact:<br><br>* on<br>* fin<br>* log<br>* status<br>* help<br><br>#Installation<br>Tim is on PyPI: https://pypi.python.org/pypi/tim-timetracker<br><br>Install via:<br>```<br>pip install tim-timetracker<br>```<br><br>#File size considerations<br>My tim-sheet grows roughly 2KB / day. That's about 700kB / year. Probably less if I don't track weekends.<br>Writing line by line the way I am doing it now is starting to get slow already however (at 6KB). hledger itself is significantly faster. As soon as this difference bothers me enough I will switch to storing in hledger format directly s.t. the speed will no longer be an issue.<br><br>#For developers<br>###Python environment installation<br>####Windows<br>We develop using Anaconda with package manager [conda](http://conda.io/).<br>You can install all packages in our environment (inspect environment.yml beforehand; expect 2-3 min of linking/downloading, probably more if your conda base installation is still very basic or has vastly different packages than mine) using:<br>```<br>conda env create<br>```<br>if it already exists you may have to remove it first.<br><br>    * Read &lt;name&gt; on top of environment.yml<br>    * Confirm via ```conda env list```<br>    * Remove ```conda env remove --name &lt;name&gt;```<br><br>If you feel like updating the environment, run ```conda env export -f environment.yml``` and commit it to the repository.<br><br># ti &amp;mdash; A silly simple time tracker<br><br>`ti` is a small command line time tracking application. Simple basic usage<br>looks like this<br><br>    $ ti on my-project<br>    $ ti fin<br><br>You can also give it human-readable times.<br><br>    $ ti on my-project 30mins ago<br><br>`ti` sports many other cool features. Read along to discover.<br><br>## Wat?<br><br>`ti` is a simple command line time tracker. It has been completely re-written in<br>python (from being a bash script) and has (almost) complete test coverage. It is<br>inspired by [timed](http://adeel.github.com/timed), which is a nice project<br>and you should check out if you don't like `ti`. It also takes inspiration from<br>the simplicity of [t](http://stevelosh.com/projects/t/).<br><br>If a time tracker tool makes me think for more than 3-5 seconds, I lose my line<br>of thought and forget what I was doing. This is why I created `ti`. With `ti`,<br>you'll be as fast as you can type, which you should be good with anyway.<br><br>The most important part about `ti` is that it<br>provides just a few commands to manage your time tracking and gets out<br>of your way. All data is saved in a JSON file (`~/.ti-sheet`, can be changed by<br>setting `$SHEET_FILE`) for easy access to whatever you need to do. Some ideas,<br><br>- Read your json file to generate beautiful html reports.<br>- Build monthly statistics based on tags or the tasks themselves.<br>- Read the currently working project and make it show up in your terminal<br>  prompt. May be even with how long you've been on it. (!!!)<br><br>Its *your* data.<br><br>Oh and by the way, the source is a fairly small python script, so if you know<br>python, you may want to skim over it to get a better feel of how it works.<br><br>*Note*: If you have used the previous bash version of `ti`, which was horribly<br>tied up to only work on linux, you might notice the lack of *plugins* in this<br>python version. I am not really missing them, so I might not add them. If anyone<br>has any interesting use cases for it, I'm willing to consider.<br><br>## Usage<br><br>Here's the minimal usage style:<br><br>    $ ti on my-project<br>    Start working on my-project.<br><br>    $ ti status<br>    You have been working on my-project for less than a minute.<br><br>    $ ti fin<br>    So you stopped working on my-project.<br><br>`on` and `fin` can take a time (format described further down) at which to apply<br>the action.<br><br>    $ ti on another-project 2 hours ago<br>    Start working on another-project.<br><br>    $ ti s<br>    You have been working on another-project for about 2 hours.<br><br>    $ ti fin 30 minutes ago<br>    So you stopped working on another-project.<br><br>Also illustrating in the previous example is short aliases of all commands,<br>their first letter. Like, `s` for `status`, `o` for `on`, `f` for `fin`, etc.<br><br>Put brief notes on what you've been doing.<br><br>    $ ti note waiting for Napoleon to take over the world<br>    $ ti n another simple note for demo purposes<br><br>Tag your activities for fun and profit.<br><br>    $ ti tag imp<br><br>Get a log of all activities with the `log` (or `l`) command.<br><br>    $ ti log<br><br>## Command reference<br><br>Run `ti -h` (or `--help` or `help` or just `h`) to get a short command summary<br>of commands.<br><br>### on<br><br>- Short: `o`<br>- Syntax: `ti (o|on) &lt;name&gt; [&lt;time&gt;...]`<br><br>Start tracking time for the project/activity given by `&lt;name&gt;`. For example,<br><br>    ti on conquest<br><br>tells `ti` to start tracking for the activitiy `conquest` *now*. You can<br>optionally specify a relative time in the past like so,<br><br>    ti on conquest 10mins ago<br><br>The format of the time is detailed further below.<br><br>### fin<br><br>- Short: `f`<br>- Syntax: `ti (f|fin) [&lt;time&gt;...]`<br><br>End tracking for the current activity *now*. Just like with `on` command above,<br>you can give an optional time to the past. Example<br><br>    ti fin 10mins ago<br><br>tells `ti` that you finished working on the current activity at, well, 10<br>minutes ago.<br><br>### status<br><br>- Short: `s`<br>- Syntax: `ti (s|status)`<br><br>Gives short human readable message on the current status. i.e., whether anything<br>is being tracked currently or not. Example,<br><br>    $ ti on conqering-the-world<br>    Start working on conqering-the-world.<br>    $ ti status<br>    You have been working on `conqering-the-world` for less than a minute.<br><br>### tag<br><br>- Short: `t`<br>- Syntax: `ti (t|tag) &lt;tag&gt;...`<br><br>This command adds the given tags to the current activity. Tags are not currently<br>used within the `ti` time tracker, but they will be saved in the json data file.<br>You may use them for whatever purposes you like.<br><br>For example, if you have a script to generate a html report from your `ti` data,<br>you could tag some activities with a tag like `red` or `important` so that, that<br>activity will appear in red in the final html report.<br><br>Use it like,<br><br>    ti tag red for-joe<br><br>adds the tags `red` and `for-joe` to the current activitiy. You can specify any<br>number of tags.<br><br>Tags are currently for your purpose. Use them as you see fit.<br><br>### note<br><br>- Short: `n`<br>- Syntax: `ti (n|note) &lt;note-text&gt;...`<br><br>This command adds a note on the current activity. Again, like tags, this has no<br>significance with the time tracking aspect of `ti`. This is for your own<br>recording purposes and for the scripts your write to process your `ti` data.<br><br>Use it like,<br><br>    ti note Discuss this with the other team.<br><br>adds the note `Discuss this with the other team.` to the current activity.<br><br>### log<br><br>- Short: `l`<br>- Syntax: `ti (l|log) [today]`<br><br>Gives a table like representation of all activities and total time spent on each<br>of them.<br><br>## Time format<br><br>Currently only the following are recognized. If there is something that is not<br>handled, but should be, please open an issue about it or a pull request<br>(function in question is `parse_time`)<br><br>- *n* seconds ago can be written as:<br>    - *n*seconds ago<br>    - *n*second ago<br>    - *n*secs ago<br>    - *n*sec ago<br>    - *n*s ago<br>    - `a` in place of *n* in all above cases, to mean 1 second.<br>    - Eg., `10s ago`, `a sec ago` `25 seconds ago`, `25seconds ago`.<br><br>- *n* minutes ago can be written as:<br>    - *n*minutes ago<br>    - *n*minute ago<br>    - *n*mins ago<br>    - *n*min ago<br>    - `a` in place of *n* in all above cases, to mean 1 minute.<br>    - Eg., `5mins ago`, `a minute ago`, `10 minutes ago`.<br><br>- *n* hours ago can be written as:<br>    - *n*hours ago<br>    - *n*hour ago<br>    - *n*hrs ago<br>    - *n*hr ago<br>    - `a` or `an` in place of *n* in all above cases, to mean 1 hour.<br>    - Eg., `an hour ago`, `an hr ago`, `2hrs ago`.<br><br>Where *n* is an arbitrary number and any number of spaces between *n* and the<br>time unit are allowed.<br><br>## Status<br><br>The project is beta. If you find any bug or have any feedback, please do open an<br>issue on [Github issues](https://github.com/sharat87/ti/issues).<br><br>## Gimme!<br><br>You can download `ti` [from the source on<br>github](https://raw.github.com/sharat87/ti/master/bin/ti)&lt;/a&gt;.<br><br>- Put it somewhere in your `$PATH` and make sure it has executable permissions.<br>- Install pyyaml using the command `pip install --user pyyaml`.<br><br>After that, `ti` should be working fine.<br><br>Also, visit the [project page on github](https://github.com/sharat87/ti) for any<br>further details.<br><br>## Who?<br><br>Created and fed by Shrikant Sharat<br>([@sharat87](https://twitter.com/#!sharat87)). To get in touch, ping me on<br>twitter or &lt;a href=mailto:shrikantsharat.k@gmail.com&gt;email&lt;/a&gt;.<br><br>## License<br><br>[MIT License](http://mitl.sharats.me).<br><br><br>Matthias Kauer<br>Shrikant Sharat K (http://ti.sharats.me/, https://twitter.com/sharat87)\n          </div>"}, "last_serial": 1720436, "releases": {"0.5.2": [{"comment_text": "", "digests": {"md5": "3cb6b5c869551466ecb6cbc41eee7bfc", "sha256": "ecf7c747ef2d040281e046123203c5139ce563c4ef5900a2493ccd18984e6501"}, "downloads": -1, "filename": "tim-ledger_diary-0.5.2.tar.gz", "has_sig": false, "md5_digest": "3cb6b5c869551466ecb6cbc41eee7bfc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10836, "upload_time": "2015-09-13T06:06:02", "upload_time_iso_8601": "2015-09-13T06:06:02.557904Z", "url": "https://files.pythonhosted.org/packages/ed/53/02da0eca3f66e44e2e86367f87cbfecbcab007b70e34f5dd527b999b1ff3/tim-ledger_diary-0.5.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "3cb6b5c869551466ecb6cbc41eee7bfc", "sha256": "ecf7c747ef2d040281e046123203c5139ce563c4ef5900a2493ccd18984e6501"}, "downloads": -1, "filename": "tim-ledger_diary-0.5.2.tar.gz", "has_sig": false, "md5_digest": "3cb6b5c869551466ecb6cbc41eee7bfc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10836, "upload_time": "2015-09-13T06:06:02", "upload_time_iso_8601": "2015-09-13T06:06:02.557904Z", "url": "https://files.pythonhosted.org/packages/ed/53/02da0eca3f66e44e2e86367f87cbfecbcab007b70e34f5dd527b999b1ff3/tim-ledger_diary-0.5.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:53:17 2020"}