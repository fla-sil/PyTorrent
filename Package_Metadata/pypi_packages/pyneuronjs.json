{"info": {"author": "Kael Zhang", "author_email": "i@kael.me", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: Implementation :: PyPy", "Topic :: Utilities"], "description": "|Build Status|\n\npyneuronjs\n==========\n\nPython utilities and middleware for neuron.js\n\npyneuronjs analyzes the dependencies from user defined facades according\nto the dependency tree, and outputs ``<script>`` tags and configurations\nfor `neuron.js <https://github.com/kaelzhang/neuron>`__\n\nThe dependency tree can be generated by\n`neuron-package-dependency <https://github.com/kaelzhang/neuron-package-dependency>`__\n\nInstall\n-------\n\n.. code:: sh\n\n    $ pip install pyneuronjs\n\nUsage\n-----\n\n.. code:: py\n\n    from pyneuronjs import Neuron\n\n    n = Neuron(\n      dependency_tree=dependency_tree,  # must defined\n      resolve=resolve,\n      version=version,\n      cache=cache,\n      debug=False)\n\n``pyneuronjs`` could be used either in template file or your python\ncontroller.\n\n`Here <./sample/sample-jinja.html>`__ is a sample Jinja2 template file.\n\n-  **dependency\\_tree** ``dict`` the ``json.loads()``\\ ed dependency\n   tree\n-  **resolve** ``function(id)=`` (optional) implements your own custom\n   resolver. ``resolve`` accepts one parameter ``id`` which can be\n   either a ``str`` of module id or a ``list`` of module ids. If a\n   ``str`` is passed in, the method should returns the resolved absolute\n   url of the module id. If ``id`` is a ``list``, an url of comboed\n   script files should be returned.\n-  **debug** ``function|bool=False`` tells pyneuronjs whether should\n   switch on debug mode. When on debug mode, no javascript files of\n   dependencies will be preloaded, and the output will not be\n   compressed.\n-  if ``debug`` is callable, pyneuronjs will use the return value of\n   method ``debug``\n-  if ``debug`` is a boolean value, and ``debug`` is true, the debug\n   mode will be on.\n-  **cache** ``dict=None`` if ``cache`` is defined, it should contains 3\n   methods:\n-  ``cache.has(key)`` returns ``bool``\n-  ``cache.get(key)`` looks up and returns the cached value by key\n-  ``cache.set(key, value)`` sets the value by key\n-  **version** ``str`` only works if ``cache`` is defined. pyneuronjs\n   will uses ``version`` to generate the key to cache the output result\n\nmodule id\n^^^^^^^^^\n\n.. code:: js\n\n    <name>@<version><path>  # for example: 'jquery@2.0.0/jquery.js'\n\nn.facade(entry, data=None)\n^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n-  **entry** ``str`` id of the entry module\n\nRegisters a facade entry with ``data``. pyneuronjs will\n\nReturns ``''``\\ (empty string), so you can use this method in python\ntemplate\n\nn.combo(id...)\n^^^^^^^^^^^^^^\n\nReturns ``''``\n\nn.css(id)\n^^^^^^^^^\n\nReturns ``''``\n\nn.output()\n^^^^^^^^^^\n\nReturns ``str``\n\nn.output\\_css()\n^^^^^^^^^^^^^^^\n\nReturns ``str``\n\nLicense\n-------\n\nMIT\n\n.. |Build Status| image:: https://travis-ci.org/kaelzhang/pyneuronjs.svg?branch=master\n   :target: https://travis-ci.org/kaelzhang/pyneuronjs", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/kaelzhang/pyneuronjs", "keywords": "neuron.js middleware javascript loader facade", "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "pyneuronjs", "package_url": "https://pypi.org/project/pyneuronjs/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/pyneuronjs/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/kaelzhang/pyneuronjs"}, "release_url": "https://pypi.org/project/pyneuronjs/1.2.0/", "requires_dist": null, "requires_python": null, "summary": "The python middleware for neuron.js", "version": "1.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://travis-ci.org/kaelzhang/pyneuronjs\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/892f95001b56b279db9f7ace0aaf4089f9eb5d7e/68747470733a2f2f7472617669732d63692e6f72672f6b61656c7a68616e672f70796e6575726f6e6a732e7376673f6272616e63683d6d6173746572\"></a></p>\n<div id=\"pyneuronjs\">\n<h2>pyneuronjs</h2>\n<p>Python utilities and middleware for neuron.js</p>\n<p>pyneuronjs analyzes the dependencies from user defined facades according\nto the dependency tree, and outputs <tt>&lt;script&gt;</tt> tags and configurations\nfor <a href=\"https://github.com/kaelzhang/neuron\" rel=\"nofollow\">neuron.js</a></p>\n<p>The dependency tree can be generated by\n<a href=\"https://github.com/kaelzhang/neuron-package-dependency\" rel=\"nofollow\">neuron-package-dependency</a></p>\n<div id=\"install\">\n<h3>Install</h3>\n<pre>$ pip install pyneuronjs\n</pre>\n</div>\n<div id=\"usage\">\n<h3>Usage</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pyneuronjs</span> <span class=\"kn\">import</span> <span class=\"n\">Neuron</span>\n\n<span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">Neuron</span><span class=\"p\">(</span>\n  <span class=\"n\">dependency_tree</span><span class=\"o\">=</span><span class=\"n\">dependency_tree</span><span class=\"p\">,</span>  <span class=\"c1\"># must defined</span>\n  <span class=\"n\">resolve</span><span class=\"o\">=</span><span class=\"n\">resolve</span><span class=\"p\">,</span>\n  <span class=\"n\">version</span><span class=\"o\">=</span><span class=\"n\">version</span><span class=\"p\">,</span>\n  <span class=\"n\">cache</span><span class=\"o\">=</span><span class=\"n\">cache</span><span class=\"p\">,</span>\n  <span class=\"n\">debug</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n</pre>\n<p><tt>pyneuronjs</tt> could be used either in template file or your python\ncontroller.</p>\n<p><a href=\"./sample/sample-jinja.html\" rel=\"nofollow\">Here</a> is a sample Jinja2 template file.</p>\n<ul>\n<li><strong>dependency_tree</strong> <tt>dict</tt> the <tt>json.loads()</tt>ed dependency\ntree</li>\n<li><strong>resolve</strong> <tt>function(id)=</tt> (optional) implements your own custom\nresolver. <tt>resolve</tt> accepts one parameter <tt>id</tt> which can be\neither a <tt>str</tt> of module id or a <tt>list</tt> of module ids. If a\n<tt>str</tt> is passed in, the method should returns the resolved absolute\nurl of the module id. If <tt>id</tt> is a <tt>list</tt>, an url of comboed\nscript files should be returned.</li>\n<li><strong>debug</strong> <tt>function|bool=False</tt> tells pyneuronjs whether should\nswitch on debug mode. When on debug mode, no javascript files of\ndependencies will be preloaded, and the output will not be\ncompressed.</li>\n<li>if <tt>debug</tt> is callable, pyneuronjs will use the return value of\nmethod <tt>debug</tt></li>\n<li>if <tt>debug</tt> is a boolean value, and <tt>debug</tt> is true, the debug\nmode will be on.</li>\n<li><strong>cache</strong> <tt>dict=None</tt> if <tt>cache</tt> is defined, it should contains 3\nmethods:</li>\n<li><tt>cache.has(key)</tt> returns <tt>bool</tt></li>\n<li><tt>cache.get(key)</tt> looks up and returns the cached value by key</li>\n<li><tt>cache.set(key, value)</tt> sets the value by key</li>\n<li><strong>version</strong> <tt>str</tt> only works if <tt>cache</tt> is defined. pyneuronjs\nwill uses <tt>version</tt> to generate the key to cache the output result</li>\n</ul>\n<div id=\"module-id\">\n<h4>module id</h4>\n<pre><span class=\"o\">&lt;</span><span class=\"nx\">name</span><span class=\"o\">&gt;</span><span class=\"err\">@</span><span class=\"o\">&lt;</span><span class=\"nx\">version</span><span class=\"o\">&gt;&lt;</span><span class=\"nx\">path</span><span class=\"o\">&gt;</span>  <span class=\"err\">#</span> <span class=\"k\">for</span> <span class=\"nx\">example</span><span class=\"o\">:</span> <span class=\"s1\">'jquery@2.0.0/jquery.js'</span>\n</pre>\n</div>\n<div id=\"n-facade-entry-data-none\">\n<h4>n.facade(entry, data=None)</h4>\n<ul>\n<li><strong>entry</strong> <tt>str</tt> id of the entry module</li>\n</ul>\n<p>Registers a facade entry with <tt>data</tt>. pyneuronjs will</p>\n<p>Returns <tt>''</tt>(empty string), so you can use this method in python\ntemplate</p>\n</div>\n<div id=\"n-combo-id\">\n<h4>n.combo(id\u2026)</h4>\n<p>Returns <tt>''</tt></p>\n</div>\n<div id=\"n-css-id\">\n<h4>n.css(id)</h4>\n<p>Returns <tt>''</tt></p>\n</div>\n<div id=\"n-output\">\n<h4>n.output()</h4>\n<p>Returns <tt>str</tt></p>\n</div>\n<div id=\"n-output-css\">\n<h4>n.output_css()</h4>\n<p>Returns <tt>str</tt></p>\n</div>\n</div>\n<div id=\"license\">\n<h3>License</h3>\n<p>MIT</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 1828936, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "67af7c5977433edb3270031d4fc27754", "sha256": "803f3a3aa1ef76dd4236d34efcfe998187d067c26acfb686432d020a20d931e0"}, "downloads": -1, "filename": "pyneuronjs-0.0.1.tar.gz", "has_sig": false, "md5_digest": "67af7c5977433edb3270031d4fc27754", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5214, "upload_time": "2015-11-09T16:46:36", "upload_time_iso_8601": "2015-11-09T16:46:36.546427Z", "url": "https://files.pythonhosted.org/packages/b1/1e/3c052f418a04acff3ae36534abae50ba120c2dd17ecf09bbc63d3bc29440/pyneuronjs-0.0.1.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "2a536a9756e5ce823ce7ad29623d3e99", "sha256": "dffdd217fd856cd67bd909a53a5e98ba22d04ee60c1a894c944999875fb8a91c"}, "downloads": -1, "filename": "pyneuronjs-1.0.0.tar.gz", "has_sig": false, "md5_digest": "2a536a9756e5ce823ce7ad29623d3e99", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5168, "upload_time": "2015-11-16T17:17:32", "upload_time_iso_8601": "2015-11-16T17:17:32.960891Z", "url": "https://files.pythonhosted.org/packages/b2/ab/4e4c6fe8f16c81200526b0441af0a6ae06aa34a618060ac329d3df884fda/pyneuronjs-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "671cdf3432dd1206b639c0b42d61e46e", "sha256": "32effd6fb46745c16cd09a11b0094ad55cc05984c1a35bb2ae1f5b22047a0922"}, "downloads": -1, "filename": "pyneuronjs-1.0.1.tar.gz", "has_sig": false, "md5_digest": "671cdf3432dd1206b639c0b42d61e46e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6640, "upload_time": "2015-11-17T10:58:11", "upload_time_iso_8601": "2015-11-17T10:58:11.915854Z", "url": "https://files.pythonhosted.org/packages/98/5f/5b02d5212b14dd9d5b9ade7bfba9e4c905c65a1ba42454acdf487f9a69a5/pyneuronjs-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "9d41bb6c38525a296502c6c28e70ce10", "sha256": "14d5dea76a72ac639e8af1f01aa366814a183bcddf99a0ade35a11c7108e8271"}, "downloads": -1, "filename": "pyneuronjs-1.0.2.tar.gz", "has_sig": false, "md5_digest": "9d41bb6c38525a296502c6c28e70ce10", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6504, "upload_time": "2015-11-17T10:58:50", "upload_time_iso_8601": "2015-11-17T10:58:50.968417Z", "url": "https://files.pythonhosted.org/packages/ec/49/456961fd344bf50e5849b40ad5fb842bcf4c23879aaf3a318ed31a43dd26/pyneuronjs-1.0.2.tar.gz", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "9ead303b8e93735d43845b133e6c4997", "sha256": "211d0aafed0f68f09cdf7b8e77cfe6ee842a427e602fdb780c18ffb5575a3be5"}, "downloads": -1, "filename": "pyneuronjs-1.0.3.tar.gz", "has_sig": false, "md5_digest": "9ead303b8e93735d43845b133e6c4997", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6489, "upload_time": "2015-11-17T11:47:55", "upload_time_iso_8601": "2015-11-17T11:47:55.148953Z", "url": "https://files.pythonhosted.org/packages/98/c6/e277979c763cf094ae33482b8be992e3801079531bc29a2b700f0a9fe36b/pyneuronjs-1.0.3.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "571e401608d9a820160cc031a741f598", "sha256": "b42fb6855d84e8fb0d52a9aec3c914851481652802330c063df52f2a14263a10"}, "downloads": -1, "filename": "pyneuronjs-1.1.0.tar.gz", "has_sig": false, "md5_digest": "571e401608d9a820160cc031a741f598", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6495, "upload_time": "2015-11-18T01:53:41", "upload_time_iso_8601": "2015-11-18T01:53:41.568951Z", "url": "https://files.pythonhosted.org/packages/f3/c5/0057709681ccdb8df6a2f6d2c8dd07195122a7d465e5a0ff4d4778d4c6b6/pyneuronjs-1.1.0.tar.gz", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "969c66010490da2a257fe751d267aebe", "sha256": "7084034e08ff54261a5d17dd653a44dff3fec4355b50250f361b11b68646fd99"}, "downloads": -1, "filename": "pyneuronjs-1.1.1.tar.gz", "has_sig": false, "md5_digest": "969c66010490da2a257fe751d267aebe", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6541, "upload_time": "2015-11-20T09:08:40", "upload_time_iso_8601": "2015-11-20T09:08:40.578974Z", "url": "https://files.pythonhosted.org/packages/ba/49/529a74f59c3956f4fea281cd3875250c8af59f5db31402b27ac925bc5c8f/pyneuronjs-1.1.1.tar.gz", "yanked": false}], "1.2.0": [{"comment_text": "", "digests": {"md5": "3e7fdcbba3ff2cc143ad4dc6515792d3", "sha256": "b2a894e45a944facbe04f1201a53b7d7bc7ce9999947a00840f398afaf324bc1"}, "downloads": -1, "filename": "pyneuronjs-1.2.0.tar.gz", "has_sig": false, "md5_digest": "3e7fdcbba3ff2cc143ad4dc6515792d3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6562, "upload_time": "2015-11-23T07:21:18", "upload_time_iso_8601": "2015-11-23T07:21:18.356726Z", "url": "https://files.pythonhosted.org/packages/80/f7/27b371a689a019be33af9dce589e48bbe5085cbc7551a0ec11ce43b586ec/pyneuronjs-1.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "3e7fdcbba3ff2cc143ad4dc6515792d3", "sha256": "b2a894e45a944facbe04f1201a53b7d7bc7ce9999947a00840f398afaf324bc1"}, "downloads": -1, "filename": "pyneuronjs-1.2.0.tar.gz", "has_sig": false, "md5_digest": "3e7fdcbba3ff2cc143ad4dc6515792d3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6562, "upload_time": "2015-11-23T07:21:18", "upload_time_iso_8601": "2015-11-23T07:21:18.356726Z", "url": "https://files.pythonhosted.org/packages/80/f7/27b371a689a019be33af9dce589e48bbe5085cbc7551a0ec11ce43b586ec/pyneuronjs-1.2.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:01:14 2020"}