{"info": {"author": "Digvijay Gusain", "author_email": "d.gusain@tudelft.nl", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6"], "description": "# energysim\n\n![energysim](https://i.imgur.com/9Z73YNM.png)\n\n**energysim** (previously, FMUWorld) is a python-based tool that was developed specifically to simplify energy system based cosimulations. Currently, it allows users to combine:\n\n  - Dynamic models packaged as Functional Mockup Units (FMUs)\n  - Pandapower Networks packaged as pickle files\n  - PyPSA models (BETA) packaged as Excel workbook\n  - csv data files\n\n## Installation\nenergysim can be installed using PyPI index command:\n```\npip install energysim\n```\n\nIt uses the following packages to work:\n  - [FMPy](https://github.com/CATIA-Systems/FMPy)\n  - [Numpy](https://pypi.org/project/numpy/)\n  - [Pandas](https://pypi.org/project/pandas/)\n  - [Matplotlib](https://pypi.org/project/matplotlib/)\n  - [Pandapower](https://pypi.org/project/pandapower/)\n  - [PyPSA](https://pypi.org/project/pypsa/)\n  - [tqdm](https://pypi.org/project/tqdm/)\n\n## Usage\nenergysim simplifies cosimulation setup by conceptualising the setup in an intuitive manner. The whole system is defined within a `World()` canvas. Within `World()`, users can specify different simulators by using commands such as `add_fmu()`, `add_powerflow()`, `add_csv()`, `add_signal()`. Apart from this, users can also specify initialisation options using the `options()` command, connections between simulators using the `add_connections()` command. Finally, the system can be simulated using the `simulate()` command. This method provides a results dataframe which can then be used for analysis of the multi-energy system simulation. Apart from simple simulations, **energysim** alo incudes a method to perform sensitivity analysis on selected parameters within the cosimulation environment.\n\nA brief example is shown below:\n\n```\n#import package\nfrom FMUWorld import World\n#create world instance\nmy_world = World(stop_time = 1000, \n                logging = True, \n                exchange = 2,\n                interpolate_results = False)\n\nsimLoc1 = os.path.join(working_dir,chp+'.fmu') #fmu location\nsimLoc2 = os.path.join(working_dir,elec+'.p') #pandapower network location\n\n#add fmu\nmy_world.add_fmu(name = 'chp', \n                loc = simLoc1, \n                step_size = 2, \n                outputs = ['rampeQfuel.y.signal',\n                            'Alternateur.Welec'])\nmy_world.add_powerflow(name = 'elec', \n                loc = simLoc2, \n                step_size = 1e-3, \n                inputs = ['gen1.P']\n                outputs = ['gen1.f',\n                           'gen2.f',\n                           'gen3.f'])\n\n#define connections\nconnections = \n    {'chp.Alternateur.Welec':'elec.gen1.P'}\n\n#add connections\nmy_world.add_connections(connections)\n\n#simulate\nresults = my_world.simulate()\n```\n\nMore information is provided on the documentation page.\n\n## Citing\nPlease cite the following paper if you use **energysim**:\nGusain, D, Cvetkovi\u0107, M & Palensky, P 2019, Energy flexibility analysis using FMUWorld. in 2019 IEEE Milan PowerTech., 8810433, IEEE, 2019 IEEE Milan PowerTech, PowerTech 2019, Milan, Italy, 23/06/19. https://doi.org/10.1109/PTC.2019.8810433\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/dgusain1/energysim", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "energysim", "package_url": "https://pypi.org/project/energysim/", "platform": "", "project_url": "https://pypi.org/project/energysim/", "project_urls": {"Homepage": "https://github.com/dgusain1/energysim"}, "release_url": "https://pypi.org/project/energysim/0.0.3/", "requires_dist": ["numpy", "pandas", "tqdm", "fmpy", "pandapower", "pypsa", "networkx", "matplotlib"], "requires_python": "", "summary": "Python package for cosimulation of FMU based multi-energy systems", "version": "0.0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>energysim</h1>\n<p><img alt=\"energysim\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a9d1a71e104f49610b7cac97cc3c7b6fb4c22020/68747470733a2f2f692e696d6775722e636f6d2f395a3733594e4d2e706e67\"></p>\n<p><strong>energysim</strong> (previously, FMUWorld) is a python-based tool that was developed specifically to simplify energy system based cosimulations. Currently, it allows users to combine:</p>\n<ul>\n<li>Dynamic models packaged as Functional Mockup Units (FMUs)</li>\n<li>Pandapower Networks packaged as pickle files</li>\n<li>PyPSA models (BETA) packaged as Excel workbook</li>\n<li>csv data files</li>\n</ul>\n<h2>Installation</h2>\n<p>energysim can be installed using PyPI index command:</p>\n<pre><code>pip install energysim\n</code></pre>\n<p>It uses the following packages to work:</p>\n<ul>\n<li><a href=\"https://github.com/CATIA-Systems/FMPy\" rel=\"nofollow\">FMPy</a></li>\n<li><a href=\"https://pypi.org/project/numpy/\" rel=\"nofollow\">Numpy</a></li>\n<li><a href=\"https://pypi.org/project/pandas/\" rel=\"nofollow\">Pandas</a></li>\n<li><a href=\"https://pypi.org/project/matplotlib/\" rel=\"nofollow\">Matplotlib</a></li>\n<li><a href=\"https://pypi.org/project/pandapower/\" rel=\"nofollow\">Pandapower</a></li>\n<li><a href=\"https://pypi.org/project/pypsa/\" rel=\"nofollow\">PyPSA</a></li>\n<li><a href=\"https://pypi.org/project/tqdm/\" rel=\"nofollow\">tqdm</a></li>\n</ul>\n<h2>Usage</h2>\n<p>energysim simplifies cosimulation setup by conceptualising the setup in an intuitive manner. The whole system is defined within a <code>World()</code> canvas. Within <code>World()</code>, users can specify different simulators by using commands such as <code>add_fmu()</code>, <code>add_powerflow()</code>, <code>add_csv()</code>, <code>add_signal()</code>. Apart from this, users can also specify initialisation options using the <code>options()</code> command, connections between simulators using the <code>add_connections()</code> command. Finally, the system can be simulated using the <code>simulate()</code> command. This method provides a results dataframe which can then be used for analysis of the multi-energy system simulation. Apart from simple simulations, <strong>energysim</strong> alo incudes a method to perform sensitivity analysis on selected parameters within the cosimulation environment.</p>\n<p>A brief example is shown below:</p>\n<pre><code>#import package\nfrom FMUWorld import World\n#create world instance\nmy_world = World(stop_time = 1000, \n                logging = True, \n                exchange = 2,\n                interpolate_results = False)\n\nsimLoc1 = os.path.join(working_dir,chp+'.fmu') #fmu location\nsimLoc2 = os.path.join(working_dir,elec+'.p') #pandapower network location\n\n#add fmu\nmy_world.add_fmu(name = 'chp', \n                loc = simLoc1, \n                step_size = 2, \n                outputs = ['rampeQfuel.y.signal',\n                            'Alternateur.Welec'])\nmy_world.add_powerflow(name = 'elec', \n                loc = simLoc2, \n                step_size = 1e-3, \n                inputs = ['gen1.P']\n                outputs = ['gen1.f',\n                           'gen2.f',\n                           'gen3.f'])\n\n#define connections\nconnections = \n    {'chp.Alternateur.Welec':'elec.gen1.P'}\n\n#add connections\nmy_world.add_connections(connections)\n\n#simulate\nresults = my_world.simulate()\n</code></pre>\n<p>More information is provided on the documentation page.</p>\n<h2>Citing</h2>\n<p>Please cite the following paper if you use <strong>energysim</strong>:\nGusain, D, Cvetkovi\u0107, M &amp; Palensky, P 2019, Energy flexibility analysis using FMUWorld. in 2019 IEEE Milan PowerTech., 8810433, IEEE, 2019 IEEE Milan PowerTech, PowerTech 2019, Milan, Italy, 23/06/19. <a href=\"https://doi.org/10.1109/PTC.2019.8810433\" rel=\"nofollow\">https://doi.org/10.1109/PTC.2019.8810433</a></p>\n\n          </div>"}, "last_serial": 7118495, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "2ce05aa2f858ace946bdf7ecc609a0a6", "sha256": "409e088ef3f92411e50b898a6a496ae10564eac6df4bbe866161c952f32553d9"}, "downloads": -1, "filename": "energysim-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "2ce05aa2f858ace946bdf7ecc609a0a6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 35025, "upload_time": "2020-03-02T09:44:50", "upload_time_iso_8601": "2020-03-02T09:44:50.480743Z", "url": "https://files.pythonhosted.org/packages/35/1d/722307de731cb08d304d2a33fd879b366e832c163a6ec8e574e549b8f479/energysim-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4c6ba58839668a06a437d6bf68ca9ea7", "sha256": "719b44359834cc019ca6ba107a2c511193dd0f0383abcd3f1e0d6b85d1c75e21"}, "downloads": -1, "filename": "energysim-0.0.1.tar.gz", "has_sig": false, "md5_digest": "4c6ba58839668a06a437d6bf68ca9ea7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18582, "upload_time": "2020-03-02T09:44:52", "upload_time_iso_8601": "2020-03-02T09:44:52.862480Z", "url": "https://files.pythonhosted.org/packages/a2/06/dbb6fb4f6457660a3f5bf8b53e3a0d0cae007e2a97bc9be0aa621d3dbfe5/energysim-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "621c6f0bc070e45a4f94ea56021dd000", "sha256": "6e8ca8b05c6a16ce8a1a1d626d37aa576ddcc402358aecb97e46ae80bd573416"}, "downloads": -1, "filename": "energysim-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "621c6f0bc070e45a4f94ea56021dd000", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 35065, "upload_time": "2020-04-17T09:32:21", "upload_time_iso_8601": "2020-04-17T09:32:21.311302Z", "url": "https://files.pythonhosted.org/packages/3d/30/143ca9a30d790aa9e12524cf72896c18c01101b03f176f114c1b7a91b02a/energysim-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bb871443195b2176d3627e16af2c79af", "sha256": "3609fbf9f04b1b25572912b5b7f2f8dc196c85a22068bdb71da578186034544f"}, "downloads": -1, "filename": "energysim-0.0.2.tar.gz", "has_sig": false, "md5_digest": "bb871443195b2176d3627e16af2c79af", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18633, "upload_time": "2020-04-17T09:32:22", "upload_time_iso_8601": "2020-04-17T09:32:22.664237Z", "url": "https://files.pythonhosted.org/packages/fe/0f/de888d0365b4ec547d0a285519fb912800e486ea9c0417275dd0fd438091/energysim-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "d34722a982259238b95be22eb582b80e", "sha256": "5c839decafde5ae4796a3df8ef485c3a946a2fefa2f30d56b7a36e3a560c9319"}, "downloads": -1, "filename": "energysim-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "d34722a982259238b95be22eb582b80e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 35112, "upload_time": "2020-04-28T09:05:18", "upload_time_iso_8601": "2020-04-28T09:05:18.663161Z", "url": "https://files.pythonhosted.org/packages/f2/8e/592c5eb9b6074e4099dfca7b15b8ea4d9056fd62ebe7026ee9f9c6079228/energysim-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "73a7268bcb9bb9f4b6802ae1d9763220", "sha256": "604111961cd9676add888edf76f3812e1911cc1add387a74ef356a3bd58b3b83"}, "downloads": -1, "filename": "energysim-0.0.3.tar.gz", "has_sig": false, "md5_digest": "73a7268bcb9bb9f4b6802ae1d9763220", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18682, "upload_time": "2020-04-28T09:05:19", "upload_time_iso_8601": "2020-04-28T09:05:19.757188Z", "url": "https://files.pythonhosted.org/packages/ed/0f/56e0f7791dbaeca61f49de2186e76be2da622c64368afed155174b01557e/energysim-0.0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d34722a982259238b95be22eb582b80e", "sha256": "5c839decafde5ae4796a3df8ef485c3a946a2fefa2f30d56b7a36e3a560c9319"}, "downloads": -1, "filename": "energysim-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "d34722a982259238b95be22eb582b80e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 35112, "upload_time": "2020-04-28T09:05:18", "upload_time_iso_8601": "2020-04-28T09:05:18.663161Z", "url": "https://files.pythonhosted.org/packages/f2/8e/592c5eb9b6074e4099dfca7b15b8ea4d9056fd62ebe7026ee9f9c6079228/energysim-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "73a7268bcb9bb9f4b6802ae1d9763220", "sha256": "604111961cd9676add888edf76f3812e1911cc1add387a74ef356a3bd58b3b83"}, "downloads": -1, "filename": "energysim-0.0.3.tar.gz", "has_sig": false, "md5_digest": "73a7268bcb9bb9f4b6802ae1d9763220", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18682, "upload_time": "2020-04-28T09:05:19", "upload_time_iso_8601": "2020-04-28T09:05:19.757188Z", "url": "https://files.pythonhosted.org/packages/ed/0f/56e0f7791dbaeca61f49de2186e76be2da622c64368afed155174b01557e/energysim-0.0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:46:22 2020"}