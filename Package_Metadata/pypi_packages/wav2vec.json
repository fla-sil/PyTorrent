{"info": {"author": "Chris Burkhardt", "author_email": "dev@orangenoiseproduction.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Topic :: Software Development :: Libraries :: Python Modules"], "description": ":toc:\n:toc-placement!:\n\n= wav2vec.py\n\ntoc::[]\n\n== Introduction\n\n`wav2vec` is a Python script and package for converting waveform files (WAV or AIFF) to vector graphics (SVG or PostScript). Use cases include using an audio waveform as an element in a graphic design or including a waveform in a document.\n\n== Features\n\n* Portable: runs on Python 2.7+ and Python 3 and does not depend on any third-party packages.\n* Supported PCM input file formats:\n** 8-bit signed AIFF\n** 8-bit unsigned WAV\n** 16-bit signed WAV and AIFF\n** 32-bit signed WAV and AIFF\n* Input file format is automatically detected and handled (the file name/extension is unimportant)\n* Output file formats:\n** Scalable Vector Graphics (SVG)\n** PostScript\n** Comma-Separated Values (CSV)\n* Easy to write a custom output formatter\n* Options to scale the output data\n* Can process input files in chunks so large files can be processed with minimal memory\n\n== Install\n\n=== From PyPI with PIP\nThe easiest way to install `wav2vec` is to use `pip` to install from the Python Package Index:\n\n[source, sh]\n----\n$ pip install wav2vec\n----\n\nDepending on your system, in order to install in the Python 3 path, you may have to use `pip3` instead of `pip`.\n\n=== From git repo\n\nClone the git repository:\n\n[source, sh]\n----\n$ git clone https://github.com/cristoper/wav2vec.git\n$ cd wav2vec\n----\n\nNow you can run `wav2vec.py` directly:\n\n[source, sh]\n----\n$ python wav2vec.py -h\n----\n\nOr install the package with PIP:\n\n[source, sh]\n----\n$ pip install .\n$ wav2vec -h\n----\n\n== Usage\n\nOnce the package is installed using pip (see above), the command can be invoked as `wav2vec`. It takes an input file and outputs (SVG, by default) to stdout:\n\n[source, sh]\n----\n$ wav2vec filename.wav > filename.svg\n----\n\nRun `wav2vec -h` to get a usage summary:\n\n----\nusage: wav2vec [-h] [--format {PostScript,SVG,CSV}] [--width WIDTH]\n               [--height HEIGHT] [--stream BS] [--downtoss N]\n               [--log {DEBUG,INFO,WARNING,ERROR,CRITICAL}]\n               filename\n\nConvert WAV and AIFF files to vector (SVG, PostScript, CVS) graphics.\n\npositional arguments:\n  filename              The WAV file to read\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --format {PostScript,SVG,CSV}, -f {PostScript,SVG,CSV}\n                        The output format, one of: SVG, CSV, PostScript.\n                        Default is SVG.\n  --width WIDTH         Maximum width of generated SVG (graphic will be scaled\n                        down to this size in px)\n  --height HEIGHT       Maximum height of generated SVG (graphic will be\n                        scaled down to this size in px). Note that this scales\n                        according to the highest possible amplitude (given the\n                        sample bit depth), not the highest amplitude that\n                        actually occurs in the data.\n  --stream BS           Stream the input file size in chunks (of BS number of\n                        frames at a time) and process/format each chunk\n                        separately. Useful for conserving memory when\n                        processing large files, but note that multi-channel\n                        paths will be split up into BS-sized chunks. By\n                        default BS=0, which causes the entire file to be read\n                        into memory before processing.\n  --downtoss N          Downsize by keeping only 1 out of every N samples.\n  --log {DEBUG,INFO,WARNING,ERROR,CRITICAL}\n                        Set the logging level.\n\nThe output is sent to stdout.\n\n----\n\n=== Options\n==== Output format\n\nThe `--format` flag sets the output format. `wav2vec` includes three formatters: `SVG` (default if no `--format` is given), `PostScript`, and `CVS`.\n\n[source, sh]\n----\n$ wav2vec filename.wav --format PostScript > output.ps\n----\n\n==== Scale output\n\nUse the `--width` and `--height` options to scale the output so that its maximum bounds are equal to or less than the values following the flags. In SVG these values are pixels (\"user units\"); in PostScript the values are interpreted as pts (1/72 of an inch). By default (if the flags are not given), the width is set to 1000 and the height to 500.\n\n[source, sh]\n----\n$ wav2vec filename.wav --width 500 --height 350 > output.svg\n----\n\n==== Stream input file\n\nBy default, `wav2vec` reads the entire input file into memory and then streams the output to stdout as it process it. Passing the `--stream` flag will cause `wav2vec` to process the input file in chunks. This can be useful if the input file is very big and won't fit into available memory. The `--stream` flag requires one argument, the number of frames to read and process at a time (each frame includes one sample from each channel). A value of around 1024 seems to work well.\n\n[source, sh]\n----\n$ wav2vec filename.aiff --stream 1024 > output.svg\n----\n\nNote that using the `--stream` flag on files with multiple channels will result in non-continuous paths in the output (because channel data is interleaved in WAV/AIF files).\n\nNote also that converting very large audio files to SVG may not be practical: most SVG editors will not handle paths with hundreds of thousands or millions of points well.\n\n==== Downsampling\n\nThe `--downtoss N` flag will keep only 1 out of every N samples. This is a brutal form of downsampling which will clobber high frequency and add aliasing noise. It's best to instead downsample in your waveform recorder/editor before processing (or in your drawing program after processing).\n\n=== API\n\nYou can also `import wav2vec` in order to convert wave files to the supported output formats in your own Python scripts. The package provides two main classes: `WavDecoder` and the abstract `Formatter` (and the concrete implementations: `SVGFormatter`, `PSFormatter`, and `CSVFormatter`). The documentation is currently contained in the source files; look at link:./wav2vec/main.py[main.py] for an example of usage.\n\nThe `WavDecoder` class wraps the standard library's `wave` and `aifc` modules and provides an easy way to read and decode WAV/AIFF files.  Use it as a context manager to ensure `close()` is called. Use it as an iterator to process all frames:\n\n[source, python]\n----\n>>> wd = WavDecoder('filename')\n>>> with wd as data:\n>>>     for frames in data:\n>>>         print(frames)\n----\n\nSee link:./wav2vec/WavDecoder.py[wav2vec/WavDecoder.py].\n\nThe `Formatter` class is an abstract base class which defines the interface for all formatters which output WAV data in textual formats. Each concrete subclass of `Formatter` takes a `WavDecoder` object in its constructor which is what is responsible for reading/decoding data from a WAV or AIFF file.\n\nThe `output()` method will stream output to a file (stdout by default), but the entire output string can be captured using the `__str__()` method.\n\n[source, python]\n----\n>>> wd = WavDecoder(\"filename\")\n>>> svgformatter = SVGFormatter(wd)\n>>> svgformatter.output() # outputs SVG to stdout\n>>> svg_str = str(svgformatter) # get SVG as a string\n----\n\nSee link:./wav2vec/formatter/[the formatter package].\n\n=== Examples\n\n==== SVG\n\nHere's what the link:tests/valfiles/snd/test-16-stereo.wav[tests/valfiles/snd/test-16-stereo.wav] file looks like in Audacity:\n\nimage::./readme_imgs/audacity.png[]\n\nWe can conver it to an SVG and then open it in Inkscape:\n\n[source, sh]\n----\n$ wav2vec tests/valfiles/snd/test-16-stereo.wav > test.svg\n$ inkscape test.svg\n----\n\nimage::./readme_imgs/inkscape.png[]\n\nThen we can use Inkscape to non-destructively add filters and path effects and otherwise incorporate the waveform into a design:\n\nimage::./readme_imgs/output.png[]\n\n==== PostScript\n\nTo convert to PostScript instead of SVG:\n\n[source, sh]\n----\n$ wav2vec tests/valfiles/snd/test-16-stereo.wav -f PostScript > test.ps\n$ ps2pdf test.ps\n$ evince test.pdf\n----\n\nThe above uses the Ghostscript `ps2pdf` tool to convert the resulting PostScript file to PDF and then opens it in the evince PDF reader (shown in the screenshot below). You could instead open `test.ps` directly in a PostScript viewer (or send it to a printer/plotter, or embedded in a LaTeX document, etc).\n\nimage::./readme_imgs/evince.png[]\n\n==== CSV\n\n`wav2vec.py` also comes with a CSV formatter, which is useful to get WAV data into a spreadsheet:\n\n[source, sh]\n----\n$ wav2vec tests/valfiles/snd/test-16-stereo.wav -f CSV --height 0 > test.csv\n$ libreoffice test.csv\n----\n\nNote the `--height 0` option which prevents `wav2vec` from scaling the raw PCM values.\n\n== Hacking\n\n=== Run tests\n\nTo run unit and validation tests (requires python3):\n\n[source, sh]\n----\n$ python -m unittest discover\n----\n\n=== Write custom formatter\n\nCreating a custom formatter is simply a matter of subclassing `Formatter` and overriding the five abstract methods it defines. Use the included SVGFormatter, PSFormatter, or CSVFormatter as a template (see link:./wav2vec/formatter/formatters.py[wav2vec/formatter/formatters.py]).\n\n== Issues\n\nPlease feel free to use the Github issue tracker as a support forum for any questions, suggestions, bug reports, or feature requests. Thanks! https://github.com/cristoper/wav2vec/issues\n\n== See also\n\n- http://www.audacityteam.org/[Audacity] is a good Free audio recorder and waveform editor.\n- https://inkscape.org/en/[Inkscape] is a Free SVG-based drawing program\n- https://www.ghostscript.com/[Ghostscript] is a Free PostScript interpreter which can distill to PDF.\n\n== Support the Author\n\nIf this script was useful to you, please consider supporting my work on this and other open-source projects by making a small one-time donation: https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=E78W4LH2NADXE[donate via PayPal].\n\nIf you're looking to contract a Python developer, I might be able to help. Contact me, Chris, at dev@orangenoiseproduction.com\n\n\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/cristoper/wav2vec", "keywords": "audio graphics svg postscript data", "license": "WTFPL", "maintainer": "", "maintainer_email": "", "name": "wav2vec", "package_url": "https://pypi.org/project/wav2vec/", "platform": "", "project_url": "https://pypi.org/project/wav2vec/", "project_urls": {"Homepage": "https://github.com/cristoper/wav2vec"}, "release_url": "https://pypi.org/project/wav2vec/1.0.1/", "requires_dist": null, "requires_python": ">=2.7", "summary": "A Python package to convert waveform files (WAV or AIFF) to vector graphics (SVG, PostScript, or CVS)", "version": "1.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            :toc:<br>:toc-placement!:<br><br>= wav2vec.py<br><br>toc::[]<br><br>== Introduction<br><br>`wav2vec` is a Python script and package for converting waveform files (WAV or AIFF) to vector graphics (SVG or PostScript). Use cases include using an audio waveform as an element in a graphic design or including a waveform in a document.<br><br>== Features<br><br>* Portable: runs on Python 2.7+ and Python 3 and does not depend on any third-party packages.<br>* Supported PCM input file formats:<br>** 8-bit signed AIFF<br>** 8-bit unsigned WAV<br>** 16-bit signed WAV and AIFF<br>** 32-bit signed WAV and AIFF<br>* Input file format is automatically detected and handled (the file name/extension is unimportant)<br>* Output file formats:<br>** Scalable Vector Graphics (SVG)<br>** PostScript<br>** Comma-Separated Values (CSV)<br>* Easy to write a custom output formatter<br>* Options to scale the output data<br>* Can process input files in chunks so large files can be processed with minimal memory<br><br>== Install<br><br>=== From PyPI with PIP<br>The easiest way to install `wav2vec` is to use `pip` to install from the Python Package Index:<br><br>[source, sh]<br>----<br>$ pip install wav2vec<br>----<br><br>Depending on your system, in order to install in the Python 3 path, you may have to use `pip3` instead of `pip`.<br><br>=== From git repo<br><br>Clone the git repository:<br><br>[source, sh]<br>----<br>$ git clone https://github.com/cristoper/wav2vec.git<br>$ cd wav2vec<br>----<br><br>Now you can run `wav2vec.py` directly:<br><br>[source, sh]<br>----<br>$ python wav2vec.py -h<br>----<br><br>Or install the package with PIP:<br><br>[source, sh]<br>----<br>$ pip install .<br>$ wav2vec -h<br>----<br><br>== Usage<br><br>Once the package is installed using pip (see above), the command can be invoked as `wav2vec`. It takes an input file and outputs (SVG, by default) to stdout:<br><br>[source, sh]<br>----<br>$ wav2vec filename.wav &gt; filename.svg<br>----<br><br>Run `wav2vec -h` to get a usage summary:<br><br>----<br>usage: wav2vec [-h] [--format {PostScript,SVG,CSV}] [--width WIDTH]<br>               [--height HEIGHT] [--stream BS] [--downtoss N]<br>               [--log {DEBUG,INFO,WARNING,ERROR,CRITICAL}]<br>               filename<br><br>Convert WAV and AIFF files to vector (SVG, PostScript, CVS) graphics.<br><br>positional arguments:<br>  filename              The WAV file to read<br><br>optional arguments:<br>  -h, --help            show this help message and exit<br>  --format {PostScript,SVG,CSV}, -f {PostScript,SVG,CSV}<br>                        The output format, one of: SVG, CSV, PostScript.<br>                        Default is SVG.<br>  --width WIDTH         Maximum width of generated SVG (graphic will be scaled<br>                        down to this size in px)<br>  --height HEIGHT       Maximum height of generated SVG (graphic will be<br>                        scaled down to this size in px). Note that this scales<br>                        according to the highest possible amplitude (given the<br>                        sample bit depth), not the highest amplitude that<br>                        actually occurs in the data.<br>  --stream BS           Stream the input file size in chunks (of BS number of<br>                        frames at a time) and process/format each chunk<br>                        separately. Useful for conserving memory when<br>                        processing large files, but note that multi-channel<br>                        paths will be split up into BS-sized chunks. By<br>                        default BS=0, which causes the entire file to be read<br>                        into memory before processing.<br>  --downtoss N          Downsize by keeping only 1 out of every N samples.<br>  --log {DEBUG,INFO,WARNING,ERROR,CRITICAL}<br>                        Set the logging level.<br><br>The output is sent to stdout.<br><br>----<br><br>=== Options<br>==== Output format<br><br>The `--format` flag sets the output format. `wav2vec` includes three formatters: `SVG` (default if no `--format` is given), `PostScript`, and `CVS`.<br><br>[source, sh]<br>----<br>$ wav2vec filename.wav --format PostScript &gt; output.ps<br>----<br><br>==== Scale output<br><br>Use the `--width` and `--height` options to scale the output so that its maximum bounds are equal to or less than the values following the flags. In SVG these values are pixels (\"user units\"); in PostScript the values are interpreted as pts (1/72 of an inch). By default (if the flags are not given), the width is set to 1000 and the height to 500.<br><br>[source, sh]<br>----<br>$ wav2vec filename.wav --width 500 --height 350 &gt; output.svg<br>----<br><br>==== Stream input file<br><br>By default, `wav2vec` reads the entire input file into memory and then streams the output to stdout as it process it. Passing the `--stream` flag will cause `wav2vec` to process the input file in chunks. This can be useful if the input file is very big and won't fit into available memory. The `--stream` flag requires one argument, the number of frames to read and process at a time (each frame includes one sample from each channel). A value of around 1024 seems to work well.<br><br>[source, sh]<br>----<br>$ wav2vec filename.aiff --stream 1024 &gt; output.svg<br>----<br><br>Note that using the `--stream` flag on files with multiple channels will result in non-continuous paths in the output (because channel data is interleaved in WAV/AIF files).<br><br>Note also that converting very large audio files to SVG may not be practical: most SVG editors will not handle paths with hundreds of thousands or millions of points well.<br><br>==== Downsampling<br><br>The `--downtoss N` flag will keep only 1 out of every N samples. This is a brutal form of downsampling which will clobber high frequency and add aliasing noise. It's best to instead downsample in your waveform recorder/editor before processing (or in your drawing program after processing).<br><br>=== API<br><br>You can also `import wav2vec` in order to convert wave files to the supported output formats in your own Python scripts. The package provides two main classes: `WavDecoder` and the abstract `Formatter` (and the concrete implementations: `SVGFormatter`, `PSFormatter`, and `CSVFormatter`). The documentation is currently contained in the source files; look at link:./wav2vec/main.py[main.py] for an example of usage.<br><br>The `WavDecoder` class wraps the standard library's `wave` and `aifc` modules and provides an easy way to read and decode WAV/AIFF files.  Use it as a context manager to ensure `close()` is called. Use it as an iterator to process all frames:<br><br>[source, python]<br>----<br>&gt;&gt;&gt; wd = WavDecoder('filename')<br>&gt;&gt;&gt; with wd as data:<br>&gt;&gt;&gt;     for frames in data:<br>&gt;&gt;&gt;         print(frames)<br>----<br><br>See link:./wav2vec/WavDecoder.py[wav2vec/WavDecoder.py].<br><br>The `Formatter` class is an abstract base class which defines the interface for all formatters which output WAV data in textual formats. Each concrete subclass of `Formatter` takes a `WavDecoder` object in its constructor which is what is responsible for reading/decoding data from a WAV or AIFF file.<br><br>The `output()` method will stream output to a file (stdout by default), but the entire output string can be captured using the `__str__()` method.<br><br>[source, python]<br>----<br>&gt;&gt;&gt; wd = WavDecoder(\"filename\")<br>&gt;&gt;&gt; svgformatter = SVGFormatter(wd)<br>&gt;&gt;&gt; svgformatter.output() # outputs SVG to stdout<br>&gt;&gt;&gt; svg_str = str(svgformatter) # get SVG as a string<br>----<br><br>See link:./wav2vec/formatter/[the formatter package].<br><br>=== Examples<br><br>==== SVG<br><br>Here's what the link:tests/valfiles/snd/test-16-stereo.wav[tests/valfiles/snd/test-16-stereo.wav] file looks like in Audacity:<br><br>image::./readme_imgs/audacity.png[]<br><br>We can conver it to an SVG and then open it in Inkscape:<br><br>[source, sh]<br>----<br>$ wav2vec tests/valfiles/snd/test-16-stereo.wav &gt; test.svg<br>$ inkscape test.svg<br>----<br><br>image::./readme_imgs/inkscape.png[]<br><br>Then we can use Inkscape to non-destructively add filters and path effects and otherwise incorporate the waveform into a design:<br><br>image::./readme_imgs/output.png[]<br><br>==== PostScript<br><br>To convert to PostScript instead of SVG:<br><br>[source, sh]<br>----<br>$ wav2vec tests/valfiles/snd/test-16-stereo.wav -f PostScript &gt; test.ps<br>$ ps2pdf test.ps<br>$ evince test.pdf<br>----<br><br>The above uses the Ghostscript `ps2pdf` tool to convert the resulting PostScript file to PDF and then opens it in the evince PDF reader (shown in the screenshot below). You could instead open `test.ps` directly in a PostScript viewer (or send it to a printer/plotter, or embedded in a LaTeX document, etc).<br><br>image::./readme_imgs/evince.png[]<br><br>==== CSV<br><br>`wav2vec.py` also comes with a CSV formatter, which is useful to get WAV data into a spreadsheet:<br><br>[source, sh]<br>----<br>$ wav2vec tests/valfiles/snd/test-16-stereo.wav -f CSV --height 0 &gt; test.csv<br>$ libreoffice test.csv<br>----<br><br>Note the `--height 0` option which prevents `wav2vec` from scaling the raw PCM values.<br><br>== Hacking<br><br>=== Run tests<br><br>To run unit and validation tests (requires python3):<br><br>[source, sh]<br>----<br>$ python -m unittest discover<br>----<br><br>=== Write custom formatter<br><br>Creating a custom formatter is simply a matter of subclassing `Formatter` and overriding the five abstract methods it defines. Use the included SVGFormatter, PSFormatter, or CSVFormatter as a template (see link:./wav2vec/formatter/formatters.py[wav2vec/formatter/formatters.py]).<br><br>== Issues<br><br>Please feel free to use the Github issue tracker as a support forum for any questions, suggestions, bug reports, or feature requests. Thanks! https://github.com/cristoper/wav2vec/issues<br><br>== See also<br><br>- http://www.audacityteam.org/[Audacity] is a good Free audio recorder and waveform editor.<br>- https://inkscape.org/en/[Inkscape] is a Free SVG-based drawing program<br>- https://www.ghostscript.com/[Ghostscript] is a Free PostScript interpreter which can distill to PDF.<br><br>== Support the Author<br><br>If this script was useful to you, please consider supporting my work on this and other open-source projects by making a small one-time donation: https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&amp;hosted_button_id=E78W4LH2NADXE[donate via PayPal].<br><br>If you're looking to contract a Python developer, I might be able to help. Contact me, Chris, at dev@orangenoiseproduction.com<br><br><br>\n          </div>"}, "last_serial": 3125773, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "b1f42adb98bd90aeb716902c2d99c715", "sha256": "49e8199f1421cdec87d2547dbf6986e885b2341db460863ae5af8ca0992b4896"}, "downloads": -1, "filename": "wav2vec-1.0.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "b1f42adb98bd90aeb716902c2d99c715", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7", "size": 18200, "upload_time": "2017-08-26T23:04:02", "upload_time_iso_8601": "2017-08-26T23:04:02.080478Z", "url": "https://files.pythonhosted.org/packages/3a/90/09505d05969c7d7e496ae687421c75ba1d31dea50b0817df6593f66c7348/wav2vec-1.0.0-py2.py3-none-any.whl", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "a47194c26ad5d0c8ce47823dd74e6672", "sha256": "67b4f12024241283a1784b6803cc434001cea68f12501a661bb294d65a99d4c9"}, "downloads": -1, "filename": "wav2vec-1.0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "a47194c26ad5d0c8ce47823dd74e6672", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7", "size": 18265, "upload_time": "2017-08-26T23:20:04", "upload_time_iso_8601": "2017-08-26T23:20:04.631143Z", "url": "https://files.pythonhosted.org/packages/e2/db/84e5f10de416c4ccadd8b2c62486c577c703c07ce26d9c29769c51f8d84b/wav2vec-1.0.1-py2.py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a47194c26ad5d0c8ce47823dd74e6672", "sha256": "67b4f12024241283a1784b6803cc434001cea68f12501a661bb294d65a99d4c9"}, "downloads": -1, "filename": "wav2vec-1.0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "a47194c26ad5d0c8ce47823dd74e6672", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7", "size": 18265, "upload_time": "2017-08-26T23:20:04", "upload_time_iso_8601": "2017-08-26T23:20:04.631143Z", "url": "https://files.pythonhosted.org/packages/e2/db/84e5f10de416c4ccadd8b2c62486c577c703c07ce26d9c29769c51f8d84b/wav2vec-1.0.1-py2.py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 03:31:59 2020"}