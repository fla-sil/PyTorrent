{"info": {"author": "Abdelkrime Aries", "author_email": "kariminfo0@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: Console", "Intended Audience :: Developers", "Intended Audience :: Education", "Intended Audience :: Science/Research", "License :: OSI Approved :: Apache Software License", "Natural Language :: Arabic", "Operating System :: OS Independent", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.6", "Topic :: Education", "Topic :: Software Development :: Build Tools", "Topic :: Text Processing :: Linguistic"], "description": "# Aruudy\n\n[![Project](https://img.shields.io/badge/Project-Aruudy-0BDA51.svg?style=plastic)](https://kariminf.github.io/aruudy/)\n[![License](https://img.shields.io/badge/License-Apache_2-0BDA51.svg?style=plastic)](http://www.apache.org/licenses/LICENSE-2.0)\n[![PyPI](https://img.shields.io/pypi/v/aruudy.svg?style=plastic)](https://pypi.python.org/pypi/aruudy)\n[![Downloads](https://img.shields.io/pypi/dm/aruudy.svg?style=plastic)](https://pypi.org/project/aruudy/)\n[![Python version](https://img.shields.io/pypi/pyversions/aruudy.svg?style=plastic)](https://pypi.org/project/aruudy/)\n[![Documentation Status](https://readthedocs.org/projects/aruudy/badge/?version=latest)](https://aruudy.readthedocs.io/en/latest/?badge=latest)\n[![Travis](https://img.shields.io/travis/kariminf/aruudy.svg?style=plastic)](https://travis-ci.org/kariminf/aruudy)\n[![Codecov](https://img.shields.io/codecov/c/github/kariminf/aruudy.svg?style=plastic)](https://codecov.io/gh/kariminf/aruudy)\n[![CodeFactor](https://www.codefactor.io/repository/github/kariminf/aruudy/badge/master)](https://www.codefactor.io/repository/github/kariminf/aruudy/overview/master)\n[![codebeat badge](https://codebeat.co/badges/9ea7f2f7-58cb-4df9-b4b7-33d33aee07aa)](https://codebeat.co/projects/github-com-kariminf-aruudy-master)\n[![Code Climate](https://img.shields.io/codeclimate/maintainability-percentage/kariminf/aruudy.svg?style=plastic)](https://codeclimate.com/github/kariminf/aruudy/)\n\nAruudy is a light library for Arabic prosody (Aruud) or \"Science of Poetry\".\n\n[Test here](https://kariminf.github.io/aruudy/)\n\n[web API: kariminf.pythonanywhere.com/](https://kariminf.pythonanywhere.com/)\n\n## Notions\n\n- **Verse [Bayt]**: (\u0628\u064a\u062a) a line of poetry which is composed of two parts.\n- **Hemistich [Shatr]**: (\u0634\u0637\u0631) a part of a verse\n- **Meter [Bahr]**: (\u0628\u062d\u0631) The rhythme\n- **Scansion [Wazn]**: (\u0648\u0632\u0646) the weight of syllables, or the rhythmic structure\n- **Foot [Tafiila]**: (\u062a\u0641\u0639\u064a\u0644\u0629) the rhythmic parts which compose the scansion\n\nIn Arabic scansion, we use two letters:\n- \"w\": watad [peg] (\u0648\u062a\u062f); it represents a vowelled letter\n- \"s\": sabad [cord] (\u0633\u0628\u0628); it represents an unvowelled letter\n\nIn english scansion, we use two characters:\n- \"u\": short syllable;\n- \"-\": long syllable\n\n## Features\n\n- bahr\n    - Recover all meters (arabic name, english name, transliterated name)\n    - Get the meters information by either its arabic or english names\n\n\n- poetry\n    - Information about Arabic poetery meters\n    - Normalizing part (shatr) of a verse: delete tatweel, add forgotten diacretics\n    - Writing the part into prosody form\n    - Finding the arabic prosodic units \"watad\" and \"sabab\" based on haraka (vowel)\n    - Finding the english prosodic units based on syllables\n    - Detecting Arabic poetry meter\n    - Affording feet types and the parts according to these feet\n\n\n- web\n    - API with flask\n    - CGI (Common Gateway Interface) program\n\n\n## Use\n\n### Install\n\n```\npip install aruudy\n```\n\n### Command line\n\n#### List all available meters\n\n```sh\naruudy [-l | --list] [a|e|t]\n```\nWill print the 16 meters names in\n- Arabic if the option is \"a\"\n- English if the option is \"e\"\n- Transliteration if the option is \"t\"\n\nFor example:\n\n```sh\naruudy -l a\n```\n\n![shell ls](img/shell.ls.ar.png)\n\n#### Get information about a meter\n\n```sh\naruudy [-i, --info] <name>\n```\n\nThe name can be in Arabic or in English.\n\nExample:\n\n```sh\naruudy -i long\n```\n\n![shell ls](img/shell.info.en.png)\n\n#### Get the meter of a Shatr (part of verse)\n\n```sh\naruudy [-s, --shatr] <text>\n```\n\nExample:\n\n```sh\naruudy -s \"\u0623\u064e\u0633\u0650\u0631\u0652\u0628\u064e \u0627\u0644\u0642\u064e\u0637\u0627 \u0647\u064e\u0644\u0652 \u0645\u064e\u0646\u0652 \u064a\u064f\u0639\u0650\u064a\u0652\u0631\u064f \u062c\u064e\u0646\u0627\u062d\u064e\u0647\u064f\"\n```\n\n![shell shatr](img/shell.shatr.found.png)\n\n### Web Api\n\nThe api uses **flask** which must be installed. To test the api on your machine (locally), type:\n\n```sh\naruudy_flask\n```\n\nThis will create a server on **http://127.0.0.1:5000**.\n\nThe api has these request types:\n\n#### $host/ls\n\nReturns a json list with names of available Arabic poetry meters (16 meters).\nThe names are:\n- arabic: Arabic names of the 16 meters\n- english: English equivalent names\n- trans: transliterated names\n\n![api ls](img/api.ls.png)\n\n#### $host/info/[name]\n\nRetrieve information about a meter by its name (arabic or english).\nIt returns a json object describing the meter (bahr).\n\n- name: an object containing the different names of the meter\n    - arabic: Arabic names of the 16 meters\n    - english: English equivalent names\n    - trans: transliterated names\n\n\n- std_scansion and used_scansion: the standard scansion of the bahr, and the used one.\nThe two of them have the following elements:\n    - ameter: meter used by Arabs as defined by Al-Khalil\n    - emeter: the meter by syllables (European method)\n    - mnemonic: the feet of the hemistich\n    - type: the type of each foot\n\n\n- key: a verse which describs the bahr\n\n```\n$host/info/long\n```\n\n![api info ar](img/api.info.ar.png)\n\n```\n$host/info/complete\n```\n\n![api info en](img/api.info.en.png)\n\n#### $host/shatr/[text]\n\nUsed to find the meter of the given text (a shatr: part of the verse). It returns a json object with these information:\n- norm: the text normalized: no tatweel, fix some diacretics\n- prosody: prosody writing (\u0627\u0644\u0643\u062a\u0627\u0628\u0629 \u0627\u0644\u0639\u0631\u0648\u0636\u064a\u0629) of the text\n- ameter: the arabic meter of the text\n- emeter: the english/european meter of the text\n- bahr: the name of the bahr\n    - if not found, it is a string \"None\"\n    - if found, it is a json object with all the bahr's description\n\n- parts: the text divided into parts accoding to the feet (as a list). each element is an object with the following information:\n    - emeter: foot's english meter\n    - mnemonic: foot's mnemonic\n    - part: part of the text that fits the foot\n    - type: the type of the foot\n\n```\n$host/shatr/\u0641\u064e\u0640\u0644\u0627%20\u062a\u064e\u0638\u064f\u0640\u0646\u0651\u0640\u0646\u0651%20\u0623\u0646\u0651%20\u0627\u0644\u0644\u0651\u064a\u0652\u0640\u062b\u064e%20\u064a\u064e\u0628\u0652\u062a\u064e\u0633\u0650\u0640\u0645\u064f\n```\n\n![api shatr found](img/api.shatr.found.png)\n\n```\n$host/shatr/\u0641\u064e\u0640\u0644\u0627%20\u062a\u064e\u0638\u064f\u0640\u0646\u0651\u0640\u0646\u0651%20\u0623\u0646\u0651\n```\n\n![api shatr none](img/api.shatr.none.png)\n\n#### $host/shatr/[text]/[opt]\n\nSame as **$host/shatr/[text]**, but you can choose which elements to include in the response by separating their names with a comma (\",\"). If you ommit \"bahr\", it will return just the names of the meter and not all its information. Example:\n\n```\n$host/shatr/\u0641\u064e\u0640\u0644\u0627%20\u062a\u064e\u0638\u064f\u0640\u0646\u0651\u0640\u0646\u0651%20\u0623\u0646\u0651%20\u0627\u0644\u0644\u0651\u064a\u0652\u0640\u062b\u064e%20\u064a\u064e\u0628\u0652\u062a\u064e\u0633\u0650\u0640\u0645\u064f/ameter\n```\n![api shatr incl](img/api.shatr.incl.png)\n\nThis will return the names of the meter with the texts arabic scansion.\n\nIf you want to include all elements and ommit some, you can put a minus in front of your options list. Example:\n\n```\n$host/shatr/\u0641\u064e\u0640\u0644\u0627%20\u062a\u064e\u0638\u064f\u0640\u0646\u0651\u0640\u0646\u0651%20\u0623\u0646\u0651%20\u0627\u0644\u0644\u0651\u064a\u0652\u0640\u062b\u064e%20\u064a\u064e\u0628\u0652\u062a\u064e\u0633\u0650\u0640\u0645\u064f/-parts,bahr\n```\n![api shatr excl](img/api.shatr.excl.png)\n\nIf you put \"none\", you will receive just the names of the meter.\n\n```\n$host/shatr/\u0641\u064e\u0640\u0644\u0627%20\u062a\u064e\u0638\u064f\u0640\u0646\u0651\u0640\u0646\u0651%20\u0623\u0646\u0651%20\u0627\u0644\u0644\u0651\u064a\u0652\u0640\u062b\u064e%20\u064a\u064e\u0628\u0652\u062a\u064e\u0633\u0650\u0640\u0645\u064f/none\n```\n![api shatr nopt](img/api.shatr.nopt.png)\n\n### Programming\n\nArabic poetry meter detection\n\n```python\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nfrom aruudy.poetry import prosody\n\ntext = u'\u0623\u064e\u0633\u0650\u0631\u0652\u0628\u064e \u0627\u0644\u0642\u064e\u0637\u0627 \u0647\u064e\u0644\u0652 \u0645\u064e\u0646\u0652 \u064a\u064f\u0639\u0650\u064a\u0652\u0631\u064f \u062c\u064e\u0646\u0627\u062d\u064e\u0647\u064f'\n\nshatr = meter.process_shatr(text)\n\n#Normalized text\nprint(\"normalized: \" + shatr.norm)\n\n#prosody form\nprint(\"prosody form: \" + shatr.prosody)\n\n# Farahidi meter for poetry\nprint(\"arabic scansion: \" + shatr.ameter)\n\n# Western-like metre\nprint(\"western scansion: \" + shatr.emeter)\n\n#get the bahr: it has aname, ename, trans,\nb = shatr.bahr\n\n```\n\nYou can process a text with sub-functions (without using **meter.process_shatr** which uses them all):\n- **prosody.normalize(text)**: returns a normalized text; deletes tatweel and fix some diacretics problems\n- **prosody.prosody_form(text)**: returns the prosody writing (\u0627\u0644\u0643\u062a\u0627\u0628\u0629 \u0627\u0644\u0639\u0631\u0648\u0636\u064a\u0629) of the text\n- **meter.get_ameter(text)**: returns a string of arabic meter  with \"v\" as haraka \"c\" as sukuun\n\nTo read the API documentation (chack Aruudy on readthedocs)[https://aruudy.readthedocs.io/en/latest/]\n\n## Recommendations\n\nTo detect the meter, the verse's part must be fully vocalized (has diacritics).\nThis program can detect and infer some common unvolization patterns, such as the first letter of a word if it is not an alif (must be vocalized).\nIn this case, it marks a letter as vocalized without giving the right vocalization: if it is damma, kasra or fatha.\n\nIf the text is not vocalized at all, you must vocalize it manually or automatically.\nA project you can use is [Mishkal](https://github.com/linuxscout/mishkal).\nWhen you use it with Aruudy, you have to keep in mind that Aruudy is Apache-2 licensed while [Mishkal](https://github.com/linuxscout/mishkal) is GPL-3 licensed.\n\n\n## License\nCopyright (C) 2014-2019 Abdelkrime Aries\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n[http://www.apache.org/licenses/LICENSE-2.0](http://www.apache.org/licenses/LICENSE-2.0)\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/kariminf/aruudy", "keywords": "arabic nlp languages poetry prosody", "license": "Apache-2.0", "maintainer": "", "maintainer_email": "", "name": "aruudy", "package_url": "https://pypi.org/project/aruudy/", "platform": "", "project_url": "https://pypi.org/project/aruudy/", "project_urls": {"Homepage": "https://github.com/kariminf/aruudy"}, "release_url": "https://pypi.org/project/aruudy/0.5/", "requires_dist": null, "requires_python": "", "summary": "Arabic poetry package", "version": "0.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Aruudy</h1>\n<p><a href=\"https://kariminf.github.io/aruudy/\" rel=\"nofollow\"><img alt=\"Project\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/23f3d43c2f1e1d12ad069aadcf1c2f281a6000b6/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f50726f6a6563742d4172757564792d3042444135312e7376673f7374796c653d706c6173746963\"></a>\n<a href=\"http://www.apache.org/licenses/LICENSE-2.0\" rel=\"nofollow\"><img alt=\"License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/cb08116732c255cf68d009e761b1d01aebc8feff/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d4170616368655f322d3042444135312e7376673f7374796c653d706c6173746963\"></a>\n<a href=\"https://pypi.python.org/pypi/aruudy\" rel=\"nofollow\"><img alt=\"PyPI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9d624335487667324ee164f33f03e0bcb7302df0/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f6172757564792e7376673f7374796c653d706c6173746963\"></a>\n<a href=\"https://pypi.org/project/aruudy/\" rel=\"nofollow\"><img alt=\"Downloads\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/bfe1d052a13372af978942d552e20776e6190ee3/68747470733a2f2f696d672e736869656c64732e696f2f707970692f646d2f6172757564792e7376673f7374796c653d706c6173746963\"></a>\n<a href=\"https://pypi.org/project/aruudy/\" rel=\"nofollow\"><img alt=\"Python version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ae43d60f10a55bae2d6eb80451115a182bb010fb/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f6172757564792e7376673f7374796c653d706c6173746963\"></a>\n<a href=\"https://aruudy.readthedocs.io/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c900e4eca51d3ea2f16637872161f3bde6685152/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f6172757564792f62616467652f3f76657273696f6e3d6c6174657374\"></a>\n<a href=\"https://travis-ci.org/kariminf/aruudy\" rel=\"nofollow\"><img alt=\"Travis\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/984ce8b6aeeed4b8f3495ce1cba63da7b4618a03/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f6b6172696d696e662f6172757564792e7376673f7374796c653d706c6173746963\"></a>\n<a href=\"https://codecov.io/gh/kariminf/aruudy\" rel=\"nofollow\"><img alt=\"Codecov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f4e30cde7d55025077a82e3068793fb1a6858199/68747470733a2f2f696d672e736869656c64732e696f2f636f6465636f762f632f6769746875622f6b6172696d696e662f6172757564792e7376673f7374796c653d706c6173746963\"></a>\n<a href=\"https://www.codefactor.io/repository/github/kariminf/aruudy/overview/master\" rel=\"nofollow\"><img alt=\"CodeFactor\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e8b9a646ae34d034bfcd231887720dfad4348a59/68747470733a2f2f7777772e636f6465666163746f722e696f2f7265706f7369746f72792f6769746875622f6b6172696d696e662f6172757564792f62616467652f6d6173746572\"></a>\n<a href=\"https://codebeat.co/projects/github-com-kariminf-aruudy-master\" rel=\"nofollow\"><img alt=\"codebeat badge\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/37436f1b32e32976b422358f3c05375067ae31b3/68747470733a2f2f636f6465626561742e636f2f6261646765732f39656137663266372d353863622d346466392d623462372d333364333361656530376161\"></a>\n<a href=\"https://codeclimate.com/github/kariminf/aruudy/\" rel=\"nofollow\"><img alt=\"Code Climate\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6cda886fd503e0952c9b0b7c7b5a35669f93c639/68747470733a2f2f696d672e736869656c64732e696f2f636f6465636c696d6174652f6d61696e7461696e6162696c6974792d70657263656e746167652f6b6172696d696e662f6172757564792e7376673f7374796c653d706c6173746963\"></a></p>\n<p>Aruudy is a light library for Arabic prosody (Aruud) or \"Science of Poetry\".</p>\n<p><a href=\"https://kariminf.github.io/aruudy/\" rel=\"nofollow\">Test here</a></p>\n<p><a href=\"https://kariminf.pythonanywhere.com/\" rel=\"nofollow\">web API: kariminf.pythonanywhere.com/</a></p>\n<h2>Notions</h2>\n<ul>\n<li><strong>Verse [Bayt]</strong>: (\u0628\u064a\u062a) a line of poetry which is composed of two parts.</li>\n<li><strong>Hemistich [Shatr]</strong>: (\u0634\u0637\u0631) a part of a verse</li>\n<li><strong>Meter [Bahr]</strong>: (\u0628\u062d\u0631) The rhythme</li>\n<li><strong>Scansion [Wazn]</strong>: (\u0648\u0632\u0646) the weight of syllables, or the rhythmic structure</li>\n<li><strong>Foot [Tafiila]</strong>: (\u062a\u0641\u0639\u064a\u0644\u0629) the rhythmic parts which compose the scansion</li>\n</ul>\n<p>In Arabic scansion, we use two letters:</p>\n<ul>\n<li>\"w\": watad [peg] (\u0648\u062a\u062f); it represents a vowelled letter</li>\n<li>\"s\": sabad [cord] (\u0633\u0628\u0628); it represents an unvowelled letter</li>\n</ul>\n<p>In english scansion, we use two characters:</p>\n<ul>\n<li>\"u\": short syllable;</li>\n<li>\"-\": long syllable</li>\n</ul>\n<h2>Features</h2>\n<ul>\n<li>\n<p>bahr</p>\n<ul>\n<li>Recover all meters (arabic name, english name, transliterated name)</li>\n<li>Get the meters information by either its arabic or english names</li>\n</ul>\n</li>\n<li>\n<p>poetry</p>\n<ul>\n<li>Information about Arabic poetery meters</li>\n<li>Normalizing part (shatr) of a verse: delete tatweel, add forgotten diacretics</li>\n<li>Writing the part into prosody form</li>\n<li>Finding the arabic prosodic units \"watad\" and \"sabab\" based on haraka (vowel)</li>\n<li>Finding the english prosodic units based on syllables</li>\n<li>Detecting Arabic poetry meter</li>\n<li>Affording feet types and the parts according to these feet</li>\n</ul>\n</li>\n<li>\n<p>web</p>\n<ul>\n<li>API with flask</li>\n<li>CGI (Common Gateway Interface) program</li>\n</ul>\n</li>\n</ul>\n<h2>Use</h2>\n<h3>Install</h3>\n<pre><code>pip install aruudy\n</code></pre>\n<h3>Command line</h3>\n<h4>List all available meters</h4>\n<pre>aruudy <span class=\"o\">[</span>-l <span class=\"p\">|</span> --list<span class=\"o\">]</span> <span class=\"o\">[</span>a<span class=\"p\">|</span>e<span class=\"p\">|</span>t<span class=\"o\">]</span>\n</pre>\n<p>Will print the 16 meters names in</p>\n<ul>\n<li>Arabic if the option is \"a\"</li>\n<li>English if the option is \"e\"</li>\n<li>Transliteration if the option is \"t\"</li>\n</ul>\n<p>For example:</p>\n<pre>aruudy -l a\n</pre>\n<p><img alt=\"shell ls\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/be1229e8e5a0482e8994f084319a9de8f86fd205/696d672f7368656c6c2e6c732e61722e706e67\"></p>\n<h4>Get information about a meter</h4>\n<pre>aruudy <span class=\"o\">[</span>-i, --info<span class=\"o\">]</span> &lt;name&gt;\n</pre>\n<p>The name can be in Arabic or in English.</p>\n<p>Example:</p>\n<pre>aruudy -i long\n</pre>\n<p><img alt=\"shell ls\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/442933980797c5613b6a34f722fa3c348a75a0bc/696d672f7368656c6c2e696e666f2e656e2e706e67\"></p>\n<h4>Get the meter of a Shatr (part of verse)</h4>\n<pre>aruudy <span class=\"o\">[</span>-s, --shatr<span class=\"o\">]</span> &lt;text&gt;\n</pre>\n<p>Example:</p>\n<pre>aruudy -s <span class=\"s2\">\"\u0623\u064e\u0633\u0650\u0631\u0652\u0628\u064e \u0627\u0644\u0642\u064e\u0637\u0627 \u0647\u064e\u0644\u0652 \u0645\u064e\u0646\u0652 \u064a\u064f\u0639\u0650\u064a\u0652\u0631\u064f \u062c\u064e\u0646\u0627\u062d\u064e\u0647\u064f\"</span>\n</pre>\n<p><img alt=\"shell shatr\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0ea537e05d1340f929c4b254c877c901b7255027/696d672f7368656c6c2e73686174722e666f756e642e706e67\"></p>\n<h3>Web Api</h3>\n<p>The api uses <strong>flask</strong> which must be installed. To test the api on your machine (locally), type:</p>\n<pre>aruudy_flask\n</pre>\n<p>This will create a server on <strong><a href=\"http://127.0.0.1:5000\" rel=\"nofollow\">http://127.0.0.1:5000</a></strong>.</p>\n<p>The api has these request types:</p>\n<h4>$host/ls</h4>\n<p>Returns a json list with names of available Arabic poetry meters (16 meters).\nThe names are:</p>\n<ul>\n<li>arabic: Arabic names of the 16 meters</li>\n<li>english: English equivalent names</li>\n<li>trans: transliterated names</li>\n</ul>\n<p><img alt=\"api ls\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/bc67a70c83fb2b830a1e1b9738308076904492e5/696d672f6170692e6c732e706e67\"></p>\n<h4>$host/info/[name]</h4>\n<p>Retrieve information about a meter by its name (arabic or english).\nIt returns a json object describing the meter (bahr).</p>\n<ul>\n<li>\n<p>name: an object containing the different names of the meter</p>\n<ul>\n<li>arabic: Arabic names of the 16 meters</li>\n<li>english: English equivalent names</li>\n<li>trans: transliterated names</li>\n</ul>\n</li>\n<li>\n<p>std_scansion and used_scansion: the standard scansion of the bahr, and the used one.\nThe two of them have the following elements:</p>\n<ul>\n<li>ameter: meter used by Arabs as defined by Al-Khalil</li>\n<li>emeter: the meter by syllables (European method)</li>\n<li>mnemonic: the feet of the hemistich</li>\n<li>type: the type of each foot</li>\n</ul>\n</li>\n<li>\n<p>key: a verse which describs the bahr</p>\n</li>\n</ul>\n<pre><code>$host/info/long\n</code></pre>\n<p><img alt=\"api info ar\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8a6544862018d4f8b32ade6cd888f9b6fdcf7b05/696d672f6170692e696e666f2e61722e706e67\"></p>\n<pre><code>$host/info/complete\n</code></pre>\n<p><img alt=\"api info en\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/66689fedeb0e6704f2dd47237a3cf146feb9ab62/696d672f6170692e696e666f2e656e2e706e67\"></p>\n<h4>$host/shatr/[text]</h4>\n<p>Used to find the meter of the given text (a shatr: part of the verse). It returns a json object with these information:</p>\n<ul>\n<li>\n<p>norm: the text normalized: no tatweel, fix some diacretics</p>\n</li>\n<li>\n<p>prosody: prosody writing (\u0627\u0644\u0643\u062a\u0627\u0628\u0629 \u0627\u0644\u0639\u0631\u0648\u0636\u064a\u0629) of the text</p>\n</li>\n<li>\n<p>ameter: the arabic meter of the text</p>\n</li>\n<li>\n<p>emeter: the english/european meter of the text</p>\n</li>\n<li>\n<p>bahr: the name of the bahr</p>\n<ul>\n<li>if not found, it is a string \"None\"</li>\n<li>if found, it is a json object with all the bahr's description</li>\n</ul>\n</li>\n<li>\n<p>parts: the text divided into parts accoding to the feet (as a list). each element is an object with the following information:</p>\n<ul>\n<li>emeter: foot's english meter</li>\n<li>mnemonic: foot's mnemonic</li>\n<li>part: part of the text that fits the foot</li>\n<li>type: the type of the foot</li>\n</ul>\n</li>\n</ul>\n<pre><code>$host/shatr/\u0641\u064e\u0640\u0644\u0627%20\u062a\u064e\u0638\u064f\u0640\u0646\u0651\u0640\u0646\u0651%20\u0623\u0646\u0651%20\u0627\u0644\u0644\u0651\u064a\u0652\u0640\u062b\u064e%20\u064a\u064e\u0628\u0652\u062a\u064e\u0633\u0650\u0640\u0645\u064f\n</code></pre>\n<p><img alt=\"api shatr found\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b824952233494d66533700b0beef41721b8cf32d/696d672f6170692e73686174722e666f756e642e706e67\"></p>\n<pre><code>$host/shatr/\u0641\u064e\u0640\u0644\u0627%20\u062a\u064e\u0638\u064f\u0640\u0646\u0651\u0640\u0646\u0651%20\u0623\u0646\u0651\n</code></pre>\n<p><img alt=\"api shatr none\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0e868f2074585c0d92dac88b9e03026dff4c4d98/696d672f6170692e73686174722e6e6f6e652e706e67\"></p>\n<h4>$host/shatr/[text]/[opt]</h4>\n<p>Same as <strong>$host/shatr/[text]</strong>, but you can choose which elements to include in the response by separating their names with a comma (\",\"). If you ommit \"bahr\", it will return just the names of the meter and not all its information. Example:</p>\n<pre><code>$host/shatr/\u0641\u064e\u0640\u0644\u0627%20\u062a\u064e\u0638\u064f\u0640\u0646\u0651\u0640\u0646\u0651%20\u0623\u0646\u0651%20\u0627\u0644\u0644\u0651\u064a\u0652\u0640\u062b\u064e%20\u064a\u064e\u0628\u0652\u062a\u064e\u0633\u0650\u0640\u0645\u064f/ameter\n</code></pre>\n<p><img alt=\"api shatr incl\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a33c6f746083ba678cc301f66214f3d078048366/696d672f6170692e73686174722e696e636c2e706e67\"></p>\n<p>This will return the names of the meter with the texts arabic scansion.</p>\n<p>If you want to include all elements and ommit some, you can put a minus in front of your options list. Example:</p>\n<pre><code>$host/shatr/\u0641\u064e\u0640\u0644\u0627%20\u062a\u064e\u0638\u064f\u0640\u0646\u0651\u0640\u0646\u0651%20\u0623\u0646\u0651%20\u0627\u0644\u0644\u0651\u064a\u0652\u0640\u062b\u064e%20\u064a\u064e\u0628\u0652\u062a\u064e\u0633\u0650\u0640\u0645\u064f/-parts,bahr\n</code></pre>\n<p><img alt=\"api shatr excl\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/32d2bd987444355f667958fd47916268b2596be0/696d672f6170692e73686174722e6578636c2e706e67\"></p>\n<p>If you put \"none\", you will receive just the names of the meter.</p>\n<pre><code>$host/shatr/\u0641\u064e\u0640\u0644\u0627%20\u062a\u064e\u0638\u064f\u0640\u0646\u0651\u0640\u0646\u0651%20\u0623\u0646\u0651%20\u0627\u0644\u0644\u0651\u064a\u0652\u0640\u062b\u064e%20\u064a\u064e\u0628\u0652\u062a\u064e\u0633\u0650\u0640\u0645\u064f/none\n</code></pre>\n<p><img alt=\"api shatr nopt\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8cfb68717818888a3441697d04c394997870412b/696d672f6170692e73686174722e6e6f70742e706e67\"></p>\n<h3>Programming</h3>\n<p>Arabic poetry meter detection</p>\n<pre><span class=\"ch\">#!/usr/bin/env python</span>\n<span class=\"c1\"># -*- coding: utf-8 -*-</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">aruudy.poetry</span> <span class=\"kn\">import</span> <span class=\"n\">prosody</span>\n\n<span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"sa\">u</span><span class=\"s1\">'\u0623\u064e\u0633\u0650\u0631\u0652\u0628\u064e \u0627\u0644\u0642\u064e\u0637\u0627 \u0647\u064e\u0644\u0652 \u0645\u064e\u0646\u0652 \u064a\u064f\u0639\u0650\u064a\u0652\u0631\u064f \u062c\u064e\u0646\u0627\u062d\u064e\u0647\u064f'</span>\n\n<span class=\"n\">shatr</span> <span class=\"o\">=</span> <span class=\"n\">meter</span><span class=\"o\">.</span><span class=\"n\">process_shatr</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">)</span>\n\n<span class=\"c1\">#Normalized text</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"normalized: \"</span> <span class=\"o\">+</span> <span class=\"n\">shatr</span><span class=\"o\">.</span><span class=\"n\">norm</span><span class=\"p\">)</span>\n\n<span class=\"c1\">#prosody form</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"prosody form: \"</span> <span class=\"o\">+</span> <span class=\"n\">shatr</span><span class=\"o\">.</span><span class=\"n\">prosody</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Farahidi meter for poetry</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"arabic scansion: \"</span> <span class=\"o\">+</span> <span class=\"n\">shatr</span><span class=\"o\">.</span><span class=\"n\">ameter</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Western-like metre</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"western scansion: \"</span> <span class=\"o\">+</span> <span class=\"n\">shatr</span><span class=\"o\">.</span><span class=\"n\">emeter</span><span class=\"p\">)</span>\n\n<span class=\"c1\">#get the bahr: it has aname, ename, trans,</span>\n<span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">shatr</span><span class=\"o\">.</span><span class=\"n\">bahr</span>\n</pre>\n<p>You can process a text with sub-functions (without using <strong>meter.process_shatr</strong> which uses them all):</p>\n<ul>\n<li><strong>prosody.normalize(text)</strong>: returns a normalized text; deletes tatweel and fix some diacretics problems</li>\n<li><strong>prosody.prosody_form(text)</strong>: returns the prosody writing (\u0627\u0644\u0643\u062a\u0627\u0628\u0629 \u0627\u0644\u0639\u0631\u0648\u0636\u064a\u0629) of the text</li>\n<li><strong>meter.get_ameter(text)</strong>: returns a string of arabic meter  with \"v\" as haraka \"c\" as sukuun</li>\n</ul>\n<p>To read the API documentation (chack Aruudy on readthedocs)[https://aruudy.readthedocs.io/en/latest/]</p>\n<h2>Recommendations</h2>\n<p>To detect the meter, the verse's part must be fully vocalized (has diacritics).\nThis program can detect and infer some common unvolization patterns, such as the first letter of a word if it is not an alif (must be vocalized).\nIn this case, it marks a letter as vocalized without giving the right vocalization: if it is damma, kasra or fatha.</p>\n<p>If the text is not vocalized at all, you must vocalize it manually or automatically.\nA project you can use is <a href=\"https://github.com/linuxscout/mishkal\" rel=\"nofollow\">Mishkal</a>.\nWhen you use it with Aruudy, you have to keep in mind that Aruudy is Apache-2 licensed while <a href=\"https://github.com/linuxscout/mishkal\" rel=\"nofollow\">Mishkal</a> is GPL-3 licensed.</p>\n<h2>License</h2>\n<p>Copyright (C) 2014-2019 Abdelkrime Aries</p>\n<p>Licensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at</p>\n<p><a href=\"http://www.apache.org/licenses/LICENSE-2.0\" rel=\"nofollow\">http://www.apache.org/licenses/LICENSE-2.0</a></p>\n<p>Unless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.</p>\n\n          </div>"}, "last_serial": 7123455, "releases": {"0.1.1": [{"comment_text": "", "digests": {"md5": "e45e40fb0dcfe30d0ca83e89ec0f786d", "sha256": "b219a5a7ecca6b1b2a8b8edafb3320645b57c94a8899fbf62ddace9b54147da1"}, "downloads": -1, "filename": "aruudy-0.1.1.tar.gz", "has_sig": false, "md5_digest": "e45e40fb0dcfe30d0ca83e89ec0f786d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2306, "upload_time": "2017-07-27T14:25:43", "upload_time_iso_8601": "2017-07-27T14:25:43.576201Z", "url": "https://files.pythonhosted.org/packages/6b/a3/a440efeeade06564fdaad47a6653422a561b6c1a0eacf8c483637ab62377/aruudy-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "5d2ac75c4e92253ed3d00ca3580f831a", "sha256": "7f70e9530b958eeaeaa34de26e101eb1bb0b239c8c4d89fb8c4b50b47bb6f581"}, "downloads": -1, "filename": "aruudy-0.1.2.tar.gz", "has_sig": false, "md5_digest": "5d2ac75c4e92253ed3d00ca3580f831a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7315, "upload_time": "2017-07-27T14:44:58", "upload_time_iso_8601": "2017-07-27T14:44:58.877370Z", "url": "https://files.pythonhosted.org/packages/ef/71/f5b5cefb8eacd4248a5244c3071cea0c4dcb63981d0955ab02cfe8bc61e8/aruudy-0.1.2.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "a4bb457f7024060de0a5793366654837", "sha256": "b2d54f8eb31c248a293c77581ffd2613740e5b25ec50fa03405e104df29ee056"}, "downloads": -1, "filename": "aruudy-0.2.1.tar.gz", "has_sig": false, "md5_digest": "a4bb457f7024060de0a5793366654837", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12482, "upload_time": "2019-01-02T18:10:49", "upload_time_iso_8601": "2019-01-02T18:10:49.570083Z", "url": "https://files.pythonhosted.org/packages/26/89/e39c6ff42ef6c2aad50fb019eae964939820068615ba5c6fbb03b7dab237/aruudy-0.2.1.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "859f292230a17b387f9ddb73f653b796", "sha256": "049f5fc661fb7900299aecb27c176d485976cb92975b713c519de2f4fdbc54c4"}, "downloads": -1, "filename": "aruudy-0.3.0.tar.gz", "has_sig": false, "md5_digest": "859f292230a17b387f9ddb73f653b796", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13957, "upload_time": "2019-01-11T21:36:23", "upload_time_iso_8601": "2019-01-11T21:36:23.169095Z", "url": "https://files.pythonhosted.org/packages/47/5c/5c55b5412220350b6865f5733ca23d5c6bf5091acc8a7cc81ce223a78a78/aruudy-0.3.0.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "614c5b90735317ff143e3aabe0e3d516", "sha256": "8cb629c180cf6e2617985f89fa56a3f2058169743eb91ef38eaad5add5354181"}, "downloads": -1, "filename": "aruudy-0.4.0.tar.gz", "has_sig": false, "md5_digest": "614c5b90735317ff143e3aabe0e3d516", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15755, "upload_time": "2019-01-18T19:43:41", "upload_time_iso_8601": "2019-01-18T19:43:41.307378Z", "url": "https://files.pythonhosted.org/packages/cc/39/dbc8d64d22b28bdd72e060ef88f70f54c5ebccaaa0ab672d0f739a6f974f/aruudy-0.4.0.tar.gz", "yanked": false}], "0.4.1": [{"comment_text": "", "digests": {"md5": "08fdcac0873ee31f47e951fbad412df7", "sha256": "6c51971014e65ed1155782be824a45b33ce07d3c79e49be524f37d22a689dd2d"}, "downloads": -1, "filename": "aruudy-0.4.1.tar.gz", "has_sig": false, "md5_digest": "08fdcac0873ee31f47e951fbad412df7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17197, "upload_time": "2019-01-18T20:05:17", "upload_time_iso_8601": "2019-01-18T20:05:17.950943Z", "url": "https://files.pythonhosted.org/packages/2f/b3/93767266f693ef5095f7fc9bf6cf840254c2a9a5e39714f18e431602e3a3/aruudy-0.4.1.tar.gz", "yanked": false}], "0.5": [{"comment_text": "", "digests": {"md5": "ba2dce3dd048e6668c0c4b34eeb8fbdf", "sha256": "0948c0b2f347401996a6d0d549a45fd1eba0aec5e827b70c0b177d595aaa0db2"}, "downloads": -1, "filename": "aruudy-0.5.tar.gz", "has_sig": false, "md5_digest": "ba2dce3dd048e6668c0c4b34eeb8fbdf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17569, "upload_time": "2020-04-28T21:01:19", "upload_time_iso_8601": "2020-04-28T21:01:19.902619Z", "url": "https://files.pythonhosted.org/packages/3d/ce/c67e00809bd454836d5f8fa7216c560c4434331b74c58127c64fda71d3cb/aruudy-0.5.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ba2dce3dd048e6668c0c4b34eeb8fbdf", "sha256": "0948c0b2f347401996a6d0d549a45fd1eba0aec5e827b70c0b177d595aaa0db2"}, "downloads": -1, "filename": "aruudy-0.5.tar.gz", "has_sig": false, "md5_digest": "ba2dce3dd048e6668c0c4b34eeb8fbdf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17569, "upload_time": "2020-04-28T21:01:19", "upload_time_iso_8601": "2020-04-28T21:01:19.902619Z", "url": "https://files.pythonhosted.org/packages/3d/ce/c67e00809bd454836d5f8fa7216c560c4434331b74c58127c64fda71d3cb/aruudy-0.5.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:17:06 2020"}