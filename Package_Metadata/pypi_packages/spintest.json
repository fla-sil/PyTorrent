{"info": {"author": "Matthieu Gouel", "author_email": "matthieu.gouel@gmail.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Topic :: Utilities"], "description": "# Spintest\n\nFunctional scenario interpreter.\n\nSpintest is a library that facilitates the integration and functional test of APIs. It takes a list of URLs in parameter and a list of tasks (also called scenario) that will be executed against the specified URLs.\n\nEach task represents an API call and provides some options in order to validate or react to the response. Indeed, by default the task is in success if the HTTP code returned is between `200` and `299` included, but you can specify the error code or the body you expect. You can also provide a list of rollback tasks (or task references) that is executed if the task fails.\n\nAlso, the response of the API call can be stored in order to be used in a future task.\n\nFinally, you can choose to run the task scenario concurrently on each URL.\n\n## Installation\n\nYou can install the package using PIP.\n\n```\n$ pip install spintest\n```\n\n## URLs and tasks definition\n\nThe url list is just a list of endpoints. A route added here will not be evaluated because the route definition is set on the task.\n\n```\n[\n    \"https://foo.com\",\n    \"https://bar.com\"\n]\n```\n\nThe task definition is a little bit more complex. A scenario is a list of tasks possibly dependent to each other.\n\nA single task follow this schema :\n\n```\n{\n    \"method\": str,\n    Optional(\"route\", default=\"/\"): str,\n    Optional(\"name\"): str,\n    Optional(\"body\"): dict,\n    Optional(\n        \"headers\",\n        default={\"Accept\": \"application/json\", \"Content-Type\": \"application/json\"},\n    ): dict,\n    Optional(\"output\"): str,\n    Optional(\"expected\"): {\n        Optional(\"code\"): int,\n        Optional(\"body\"): Or(dict, str),\n        Optional(\"expected_match\", default=\"strict\"): Or(\"partial\", \"strict\"),\n    },\n    Optional(\"retry\", default=0): int,\n    Optional(\"delay\", default=1): int,\n    Optional(\"ignore\", default=False): bool,\n    Optional(\"rollback\"): [Or(str, dict)],\n}\n```\n\n- **method** is the HTTP method of the request (GET, POST, DELETE, ...). Only a valid HTTP method is accepted.\n- **route** (optional) is the route to test on the endpoint. It will be appended of the current URL (default is \"/\")\n- **name** (optional) is the name of the task. Mandatory if you want to use that task in a rollback.\n- **body** (optional) is a request body.\n- **header** (optional) is a dictionary of headers. Default is JSON application headers. For Oauth endpoint you don't need to add the appropriate header with the token (if you specify the token).\n- **output** (optional) Variable definition where Spintest put the result of the call. This result can be used later in an other task using Jinja syntax.\n- **expected** (optional) is an expected HTTP response code or response body.\n    - **code** (optional) is the expected HTTP code.\n    - **body** (optional) is an expected response body. You can put a value to *null* if you don't want to check the value of a key but you will have to set all keys. It also checks nested list and dictionary unless you put \"null\" instead.\n    - **expected_match** is an option to check partially the keys present on your response body. By default it is set to strict.\n- **retry** (optional) is the number of retries if it fails (default is 0).\n- **delay** (optional) is the time in second to wait between retries (default is 1).\n- **ignore** (optional) is if you want to continue the scenario in case of error of this task.\n- **rollback** (optional) is a list of task names or tasks that is triggered in case of failure of the task.\n\n\n## Usage\n\nA first example with a single route.\n\n```python\nfrom spintest import spintest\n\nurls = [\"https://test.com\"]\ntasks = [\n    {\n        \"method\": \"GET\",\n        \"route\": \"test\",\n    }\n]\n\nresult = spintest(urls, tasks)\nassert True is result\n```\n\nThis test will perform a GET call into `https://test.com/test` and expect a return code between `200` and `299` included.\n\nHere is another example with an interation between two routes :\n\n```python\nfrom spintest import spintest\n\nurls = [\"https://test.com\"]\ntasks = [\n    {\n        \"method\": \"POST\",\n        \"route\": \"test\",\n        \"output\": \"test_output\",\n        \"body\": {\"name\": \"Disk1\", \"size\": 20},\n    },\n    {\n        \"method\": \"DELETE\",\n        \"route\": \"volumes/{{ test_output['id'] }}\",\n        \"expected\": {\"code\": 204},\n    }\n]\n\nresult = spintest(urls, tasks)\nassert True is result\n```\n\nAs you can see, the first task has a key `output`. This way you can store the output of this first task into a `test_output` variables and be able to use it in following tasks in Jinja templating language.\nMorevoer, the second task has a key `expected`. Here we want to check a specific return code `204`.\n\nFinally a last example that show how to run tasks in several task in parallel.\n\n```python\nfrom spintest import spintest\n\nurls = [\"https://foo.com\", \"https://bar.com\"]\ntasks = [\n    {\n        \"method\": \"GET\",\n        \"route\": \"test\",\n        \"expected\": {\n            \"body\": {\"result\": None},\n            \"expected_match\": \"partial\",\n        }\n    }\n]\n\nresult = spintest(urls, tasks, parallel=True)\nassert True is result\n```\n\nHere we provided two URLS and we have added the option `parallel` in `spintest` function. Without this option, the scenario will be executed iteratively on every URLS.\n\nBut with this option, the each task of the scenario will be executed concurrently for every URLS.\n\nOne last word on the expected option. Here we want to validate that a certain key (`result`) is present from the output. We don't mind about the value of this key so we just set it to `None`. The option `expected_match` set to `partial` indicates that we don't want to a task failure if there is more key in the API response than expected.\n\n### Token management\n\nYou can automatically include Oauth token into the task headers.\n\n- You can directly hard code token\n\n```python\nurls = [\"http://test.com\"]\ntasks = []\n\nspintest(urls, tasks, token= 'ABC')\n```\n\n- You can give the generate function that create your token :\n\n```python\nurls = [\"http://test.com\"]\ntasks = []\n\nspintest(urls, tasks, token=create_token)\n```\n\n### Rollback actions\n\nYou can specify a list of rollback task that is executed in case of task failure.\n\n```python\nfrom spintest import spintest\n\nurls = [\"https://test.com\"]\ntasks = [\n    {\n        \"method\": \"POST\",\n        \"route\": \"test\",\n        \"rollback\": [\n            {\n                \"method\": \"DELETE\",\n                \"route\": \"test,\n            }\n        ]\n    }\n]\n\nspintest(urls, tasks)\n```\n\nYou can also specify the name of a task to avoid rewriting them.\n\n```python\nfrom spintest import spintest\n\nurls = [\"https://test.com\"]\ntasks = [\n    {\n        \"method\": \"POST\",\n        \"route\": \"test\",\n        \"rollback\": [\n            \"test_delete\"\n        ]\n    },\n    {\n        \"name\": \"test_delete\",\n        \"method\": \"DELETE\",\n        \"route\": \"test,\n    }\n]\n\nspintest(urls, tasks)\n```\n\n### Run the tasks one by one\n\n\nYou can also go further to control the flow of the task execution. It can be useful to perform other actions between tasks (clean up, external settings, ...)\n\n\n```python\n\nimport asyncio\n\nfrom spintest import TaskManager\n\n\nurls = [\"http://test.com\"]\ntasks = [{\"method\": \"GET\", \"route\": \"/test\"}]\ntoken = \"90b7aa25-870a-4dda-a1fc-b57cf0fbf278\"\n\nloop = asyncio.get_event_loop()\n\nmanager = TaskManager(urls, tasks, token=token)\nresult = loop.run_until_complete(manager.next())\n\nassert \"SUCCESS\" == result[\"status\"]\n```\n\n\nThe `next()` method throw a `StopAsyncIteration` if there is no task left to execute.\n\nNote: You can use the method `next()` in parallel mode. In that situation the method returns a list with the result of the task against each URLs.\n\n\n### Type convertion\n\nTask template evaluation always returns a string, but sometimes the target API expects a non-string value,\nit can be useful to convert it to the corresponding type.\n\nSpintest provides a set of json value converters that provide such functionality.\n\n- Int -> Converts value to a `int`\n- List -> Converts value to a `list`\n- Float -> Converts value to a `float`\n- Bool -> Converts value to a `bool`\n\n```python\nfrom spintest import spintest\n\nurls = [\"http://test.com\"]\ntasks = [\n    {\n        \"method\": \"GET\",\n        \"route\": \"persons\",\n        \"output\": \"value\",\n        # Returns\n        # {\n        #     \"age\": 20,\n        #     \"height\": 1.85,\n        #     \"alive\": True,\n        # }\n    },\n    {\n        \"method\": \"POST\",\n        \"route\": \"persons\",\n        \"body\": {\n            # int convertion\n            \"age_str\": \"{{ value.person['age'] }}\", # {\"age_str\": \"20\"},\n            \"age\": Int(\"{{ value.person['age'] }}\"), # {\"age\": 20},\n\n            # float convertion\n            \"height_str\": \"{{ value.person['height'] }}\", # {\"height_str\": \"1.85\"},\n            \"height\": Float(\"{{ value.person['height'] }}\"), # {\"height\": 1.85},\n\n            # bool convertion\n            \"alive_str\": \"{{ value.person['alive'] }}\", # {\"alive_str\": \"True\"},\n            \"alive\": Bool(\"{{ value.person['alive'] }}\"), # {\"alive\": true},\n        }\n    }\n]\n\nspintest(urls, tasks, token=token_write)\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/societe-generale/spintest", "keywords": "", "license": "BSD-3-Clause", "maintainer": "", "maintainer_email": "", "name": "spintest", "package_url": "https://pypi.org/project/spintest/", "platform": "", "project_url": "https://pypi.org/project/spintest/", "project_urls": {"Homepage": "https://github.com/societe-generale/spintest"}, "release_url": "https://pypi.org/project/spintest/0.2.0/", "requires_dist": ["colorlog", "jinja2", "schema", "requests"], "requires_python": "", "summary": "Functional scenario interpreter", "version": "0.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Spintest</h1>\n<p>Functional scenario interpreter.</p>\n<p>Spintest is a library that facilitates the integration and functional test of APIs. It takes a list of URLs in parameter and a list of tasks (also called scenario) that will be executed against the specified URLs.</p>\n<p>Each task represents an API call and provides some options in order to validate or react to the response. Indeed, by default the task is in success if the HTTP code returned is between <code>200</code> and <code>299</code> included, but you can specify the error code or the body you expect. You can also provide a list of rollback tasks (or task references) that is executed if the task fails.</p>\n<p>Also, the response of the API call can be stored in order to be used in a future task.</p>\n<p>Finally, you can choose to run the task scenario concurrently on each URL.</p>\n<h2>Installation</h2>\n<p>You can install the package using PIP.</p>\n<pre><code>$ pip install spintest\n</code></pre>\n<h2>URLs and tasks definition</h2>\n<p>The url list is just a list of endpoints. A route added here will not be evaluated because the route definition is set on the task.</p>\n<pre><code>[\n    \"https://foo.com\",\n    \"https://bar.com\"\n]\n</code></pre>\n<p>The task definition is a little bit more complex. A scenario is a list of tasks possibly dependent to each other.</p>\n<p>A single task follow this schema :</p>\n<pre><code>{\n    \"method\": str,\n    Optional(\"route\", default=\"/\"): str,\n    Optional(\"name\"): str,\n    Optional(\"body\"): dict,\n    Optional(\n        \"headers\",\n        default={\"Accept\": \"application/json\", \"Content-Type\": \"application/json\"},\n    ): dict,\n    Optional(\"output\"): str,\n    Optional(\"expected\"): {\n        Optional(\"code\"): int,\n        Optional(\"body\"): Or(dict, str),\n        Optional(\"expected_match\", default=\"strict\"): Or(\"partial\", \"strict\"),\n    },\n    Optional(\"retry\", default=0): int,\n    Optional(\"delay\", default=1): int,\n    Optional(\"ignore\", default=False): bool,\n    Optional(\"rollback\"): [Or(str, dict)],\n}\n</code></pre>\n<ul>\n<li><strong>method</strong> is the HTTP method of the request (GET, POST, DELETE, ...). Only a valid HTTP method is accepted.</li>\n<li><strong>route</strong> (optional) is the route to test on the endpoint. It will be appended of the current URL (default is \"/\")</li>\n<li><strong>name</strong> (optional) is the name of the task. Mandatory if you want to use that task in a rollback.</li>\n<li><strong>body</strong> (optional) is a request body.</li>\n<li><strong>header</strong> (optional) is a dictionary of headers. Default is JSON application headers. For Oauth endpoint you don't need to add the appropriate header with the token (if you specify the token).</li>\n<li><strong>output</strong> (optional) Variable definition where Spintest put the result of the call. This result can be used later in an other task using Jinja syntax.</li>\n<li><strong>expected</strong> (optional) is an expected HTTP response code or response body.\n<ul>\n<li><strong>code</strong> (optional) is the expected HTTP code.</li>\n<li><strong>body</strong> (optional) is an expected response body. You can put a value to <em>null</em> if you don't want to check the value of a key but you will have to set all keys. It also checks nested list and dictionary unless you put \"null\" instead.</li>\n<li><strong>expected_match</strong> is an option to check partially the keys present on your response body. By default it is set to strict.</li>\n</ul>\n</li>\n<li><strong>retry</strong> (optional) is the number of retries if it fails (default is 0).</li>\n<li><strong>delay</strong> (optional) is the time in second to wait between retries (default is 1).</li>\n<li><strong>ignore</strong> (optional) is if you want to continue the scenario in case of error of this task.</li>\n<li><strong>rollback</strong> (optional) is a list of task names or tasks that is triggered in case of failure of the task.</li>\n</ul>\n<h2>Usage</h2>\n<p>A first example with a single route.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">spintest</span> <span class=\"kn\">import</span> <span class=\"n\">spintest</span>\n\n<span class=\"n\">urls</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">\"https://test.com\"</span><span class=\"p\">]</span>\n<span class=\"n\">tasks</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span>\n        <span class=\"s2\">\"method\"</span><span class=\"p\">:</span> <span class=\"s2\">\"GET\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"route\"</span><span class=\"p\">:</span> <span class=\"s2\">\"test\"</span><span class=\"p\">,</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">spintest</span><span class=\"p\">(</span><span class=\"n\">urls</span><span class=\"p\">,</span> <span class=\"n\">tasks</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"kc\">True</span> <span class=\"ow\">is</span> <span class=\"n\">result</span>\n</pre>\n<p>This test will perform a GET call into <code>https://test.com/test</code> and expect a return code between <code>200</code> and <code>299</code> included.</p>\n<p>Here is another example with an interation between two routes :</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">spintest</span> <span class=\"kn\">import</span> <span class=\"n\">spintest</span>\n\n<span class=\"n\">urls</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">\"https://test.com\"</span><span class=\"p\">]</span>\n<span class=\"n\">tasks</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span>\n        <span class=\"s2\">\"method\"</span><span class=\"p\">:</span> <span class=\"s2\">\"POST\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"route\"</span><span class=\"p\">:</span> <span class=\"s2\">\"test\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"output\"</span><span class=\"p\">:</span> <span class=\"s2\">\"test_output\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"body\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s2\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Disk1\"</span><span class=\"p\">,</span> <span class=\"s2\">\"size\"</span><span class=\"p\">:</span> <span class=\"mi\">20</span><span class=\"p\">},</span>\n    <span class=\"p\">},</span>\n    <span class=\"p\">{</span>\n        <span class=\"s2\">\"method\"</span><span class=\"p\">:</span> <span class=\"s2\">\"DELETE\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"route\"</span><span class=\"p\">:</span> <span class=\"s2\">\"volumes/{{ test_output['id'] }}\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"expected\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s2\">\"code\"</span><span class=\"p\">:</span> <span class=\"mi\">204</span><span class=\"p\">},</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">spintest</span><span class=\"p\">(</span><span class=\"n\">urls</span><span class=\"p\">,</span> <span class=\"n\">tasks</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"kc\">True</span> <span class=\"ow\">is</span> <span class=\"n\">result</span>\n</pre>\n<p>As you can see, the first task has a key <code>output</code>. This way you can store the output of this first task into a <code>test_output</code> variables and be able to use it in following tasks in Jinja templating language.\nMorevoer, the second task has a key <code>expected</code>. Here we want to check a specific return code <code>204</code>.</p>\n<p>Finally a last example that show how to run tasks in several task in parallel.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">spintest</span> <span class=\"kn\">import</span> <span class=\"n\">spintest</span>\n\n<span class=\"n\">urls</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">\"https://foo.com\"</span><span class=\"p\">,</span> <span class=\"s2\">\"https://bar.com\"</span><span class=\"p\">]</span>\n<span class=\"n\">tasks</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span>\n        <span class=\"s2\">\"method\"</span><span class=\"p\">:</span> <span class=\"s2\">\"GET\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"route\"</span><span class=\"p\">:</span> <span class=\"s2\">\"test\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"expected\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"s2\">\"body\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s2\">\"result\"</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">},</span>\n            <span class=\"s2\">\"expected_match\"</span><span class=\"p\">:</span> <span class=\"s2\">\"partial\"</span><span class=\"p\">,</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">spintest</span><span class=\"p\">(</span><span class=\"n\">urls</span><span class=\"p\">,</span> <span class=\"n\">tasks</span><span class=\"p\">,</span> <span class=\"n\">parallel</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"kc\">True</span> <span class=\"ow\">is</span> <span class=\"n\">result</span>\n</pre>\n<p>Here we provided two URLS and we have added the option <code>parallel</code> in <code>spintest</code> function. Without this option, the scenario will be executed iteratively on every URLS.</p>\n<p>But with this option, the each task of the scenario will be executed concurrently for every URLS.</p>\n<p>One last word on the expected option. Here we want to validate that a certain key (<code>result</code>) is present from the output. We don't mind about the value of this key so we just set it to <code>None</code>. The option <code>expected_match</code> set to <code>partial</code> indicates that we don't want to a task failure if there is more key in the API response than expected.</p>\n<h3>Token management</h3>\n<p>You can automatically include Oauth token into the task headers.</p>\n<ul>\n<li>You can directly hard code token</li>\n</ul>\n<pre><span class=\"n\">urls</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">\"http://test.com\"</span><span class=\"p\">]</span>\n<span class=\"n\">tasks</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n<span class=\"n\">spintest</span><span class=\"p\">(</span><span class=\"n\">urls</span><span class=\"p\">,</span> <span class=\"n\">tasks</span><span class=\"p\">,</span> <span class=\"n\">token</span><span class=\"o\">=</span> <span class=\"s1\">'ABC'</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li>You can give the generate function that create your token :</li>\n</ul>\n<pre><span class=\"n\">urls</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">\"http://test.com\"</span><span class=\"p\">]</span>\n<span class=\"n\">tasks</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n<span class=\"n\">spintest</span><span class=\"p\">(</span><span class=\"n\">urls</span><span class=\"p\">,</span> <span class=\"n\">tasks</span><span class=\"p\">,</span> <span class=\"n\">token</span><span class=\"o\">=</span><span class=\"n\">create_token</span><span class=\"p\">)</span>\n</pre>\n<h3>Rollback actions</h3>\n<p>You can specify a list of rollback task that is executed in case of task failure.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">spintest</span> <span class=\"kn\">import</span> <span class=\"n\">spintest</span>\n\n<span class=\"n\">urls</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">\"https://test.com\"</span><span class=\"p\">]</span>\n<span class=\"n\">tasks</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span>\n        <span class=\"s2\">\"method\"</span><span class=\"p\">:</span> <span class=\"s2\">\"POST\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"route\"</span><span class=\"p\">:</span> <span class=\"s2\">\"test\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"rollback\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n            <span class=\"p\">{</span>\n                <span class=\"s2\">\"method\"</span><span class=\"p\">:</span> <span class=\"s2\">\"DELETE\"</span><span class=\"p\">,</span>\n                <span class=\"s2\">\"route\"</span><span class=\"p\">:</span> <span class=\"s2\">\"test,</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">]</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">spintest</span><span class=\"p\">(</span><span class=\"n\">urls</span><span class=\"p\">,</span> <span class=\"n\">tasks</span><span class=\"p\">)</span>\n</pre>\n<p>You can also specify the name of a task to avoid rewriting them.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">spintest</span> <span class=\"kn\">import</span> <span class=\"n\">spintest</span>\n\n<span class=\"n\">urls</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">\"https://test.com\"</span><span class=\"p\">]</span>\n<span class=\"n\">tasks</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span>\n        <span class=\"s2\">\"method\"</span><span class=\"p\">:</span> <span class=\"s2\">\"POST\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"route\"</span><span class=\"p\">:</span> <span class=\"s2\">\"test\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"rollback\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n            <span class=\"s2\">\"test_delete\"</span>\n        <span class=\"p\">]</span>\n    <span class=\"p\">},</span>\n    <span class=\"p\">{</span>\n        <span class=\"s2\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"test_delete\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"method\"</span><span class=\"p\">:</span> <span class=\"s2\">\"DELETE\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"route\"</span><span class=\"p\">:</span> <span class=\"s2\">\"test,</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">spintest</span><span class=\"p\">(</span><span class=\"n\">urls</span><span class=\"p\">,</span> <span class=\"n\">tasks</span><span class=\"p\">)</span>\n</pre>\n<h3>Run the tasks one by one</h3>\n<p>You can also go further to control the flow of the task execution. It can be useful to perform other actions between tasks (clean up, external settings, ...)</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">spintest</span> <span class=\"kn\">import</span> <span class=\"n\">TaskManager</span>\n\n\n<span class=\"n\">urls</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">\"http://test.com\"</span><span class=\"p\">]</span>\n<span class=\"n\">tasks</span> <span class=\"o\">=</span> <span class=\"p\">[{</span><span class=\"s2\">\"method\"</span><span class=\"p\">:</span> <span class=\"s2\">\"GET\"</span><span class=\"p\">,</span> <span class=\"s2\">\"route\"</span><span class=\"p\">:</span> <span class=\"s2\">\"/test\"</span><span class=\"p\">}]</span>\n<span class=\"n\">token</span> <span class=\"o\">=</span> <span class=\"s2\">\"90b7aa25-870a-4dda-a1fc-b57cf0fbf278\"</span>\n\n<span class=\"n\">loop</span> <span class=\"o\">=</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">get_event_loop</span><span class=\"p\">()</span>\n\n<span class=\"n\">manager</span> <span class=\"o\">=</span> <span class=\"n\">TaskManager</span><span class=\"p\">(</span><span class=\"n\">urls</span><span class=\"p\">,</span> <span class=\"n\">tasks</span><span class=\"p\">,</span> <span class=\"n\">token</span><span class=\"o\">=</span><span class=\"n\">token</span><span class=\"p\">)</span>\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span><span class=\"n\">manager</span><span class=\"o\">.</span><span class=\"n\">next</span><span class=\"p\">())</span>\n\n<span class=\"k\">assert</span> <span class=\"s2\">\"SUCCESS\"</span> <span class=\"o\">==</span> <span class=\"n\">result</span><span class=\"p\">[</span><span class=\"s2\">\"status\"</span><span class=\"p\">]</span>\n</pre>\n<p>The <code>next()</code> method throw a <code>StopAsyncIteration</code> if there is no task left to execute.</p>\n<p>Note: You can use the method <code>next()</code> in parallel mode. In that situation the method returns a list with the result of the task against each URLs.</p>\n<h3>Type convertion</h3>\n<p>Task template evaluation always returns a string, but sometimes the target API expects a non-string value,\nit can be useful to convert it to the corresponding type.</p>\n<p>Spintest provides a set of json value converters that provide such functionality.</p>\n<ul>\n<li>Int -&gt; Converts value to a <code>int</code></li>\n<li>List -&gt; Converts value to a <code>list</code></li>\n<li>Float -&gt; Converts value to a <code>float</code></li>\n<li>Bool -&gt; Converts value to a <code>bool</code></li>\n</ul>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">spintest</span> <span class=\"kn\">import</span> <span class=\"n\">spintest</span>\n\n<span class=\"n\">urls</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">\"http://test.com\"</span><span class=\"p\">]</span>\n<span class=\"n\">tasks</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span>\n        <span class=\"s2\">\"method\"</span><span class=\"p\">:</span> <span class=\"s2\">\"GET\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"route\"</span><span class=\"p\">:</span> <span class=\"s2\">\"persons\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"output\"</span><span class=\"p\">:</span> <span class=\"s2\">\"value\"</span><span class=\"p\">,</span>\n        <span class=\"c1\"># Returns</span>\n        <span class=\"c1\"># {</span>\n        <span class=\"c1\">#     \"age\": 20,</span>\n        <span class=\"c1\">#     \"height\": 1.85,</span>\n        <span class=\"c1\">#     \"alive\": True,</span>\n        <span class=\"c1\"># }</span>\n    <span class=\"p\">},</span>\n    <span class=\"p\">{</span>\n        <span class=\"s2\">\"method\"</span><span class=\"p\">:</span> <span class=\"s2\">\"POST\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"route\"</span><span class=\"p\">:</span> <span class=\"s2\">\"persons\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"body\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"c1\"># int convertion</span>\n            <span class=\"s2\">\"age_str\"</span><span class=\"p\">:</span> <span class=\"s2\">\"{{ value.person['age'] }}\"</span><span class=\"p\">,</span> <span class=\"c1\"># {\"age_str\": \"20\"},</span>\n            <span class=\"s2\">\"age\"</span><span class=\"p\">:</span> <span class=\"n\">Int</span><span class=\"p\">(</span><span class=\"s2\">\"{{ value.person['age'] }}\"</span><span class=\"p\">),</span> <span class=\"c1\"># {\"age\": 20},</span>\n\n            <span class=\"c1\"># float convertion</span>\n            <span class=\"s2\">\"height_str\"</span><span class=\"p\">:</span> <span class=\"s2\">\"{{ value.person['height'] }}\"</span><span class=\"p\">,</span> <span class=\"c1\"># {\"height_str\": \"1.85\"},</span>\n            <span class=\"s2\">\"height\"</span><span class=\"p\">:</span> <span class=\"n\">Float</span><span class=\"p\">(</span><span class=\"s2\">\"{{ value.person['height'] }}\"</span><span class=\"p\">),</span> <span class=\"c1\"># {\"height\": 1.85},</span>\n\n            <span class=\"c1\"># bool convertion</span>\n            <span class=\"s2\">\"alive_str\"</span><span class=\"p\">:</span> <span class=\"s2\">\"{{ value.person['alive'] }}\"</span><span class=\"p\">,</span> <span class=\"c1\"># {\"alive_str\": \"True\"},</span>\n            <span class=\"s2\">\"alive\"</span><span class=\"p\">:</span> <span class=\"n\">Bool</span><span class=\"p\">(</span><span class=\"s2\">\"{{ value.person['alive'] }}\"</span><span class=\"p\">),</span> <span class=\"c1\"># {\"alive\": true},</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">spintest</span><span class=\"p\">(</span><span class=\"n\">urls</span><span class=\"p\">,</span> <span class=\"n\">tasks</span><span class=\"p\">,</span> <span class=\"n\">token</span><span class=\"o\">=</span><span class=\"n\">token_write</span><span class=\"p\">)</span>\n</pre>\n\n          </div>"}, "last_serial": 6603187, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "989a8daed58c71cd8df9f012d6fdb003", "sha256": "6d90ef37ae0bed8dd53916701a702b67fe7ecd88eee974c4cd769141631932d3"}, "downloads": -1, "filename": "spintest-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "989a8daed58c71cd8df9f012d6fdb003", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 11110, "upload_time": "2019-08-19T16:22:15", "upload_time_iso_8601": "2019-08-19T16:22:15.336564Z", "url": "https://files.pythonhosted.org/packages/e0/61/946b23f72549497c7a68f02da1185e6ab084b0d141e1ae6d56e929868485/spintest-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "43346b192774c4b4eeb87964fc71b251", "sha256": "607f9c212f62002888e2492ed49614be7d5a235b40dbe216bbe28d2dd263888e"}, "downloads": -1, "filename": "spintest-0.1.0.tar.gz", "has_sig": false, "md5_digest": "43346b192774c4b4eeb87964fc71b251", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15568, "upload_time": "2019-08-19T16:22:17", "upload_time_iso_8601": "2019-08-19T16:22:17.664426Z", "url": "https://files.pythonhosted.org/packages/61/82/b1075f15e248dae926bb5ea144265f6233c0866fea5998f8ffd9f5978883/spintest-0.1.0.tar.gz", "yanked": false}], "0.1.1.dev1": [{"comment_text": "", "digests": {"md5": "7228b666bf99de83d73b7a96ec866505", "sha256": "57833bc5aa9685b663fd16d4fea0fc7b59f47275efd0571123e24f228a047b47"}, "downloads": -1, "filename": "spintest-0.1.1.dev1-py3-none-any.whl", "has_sig": false, "md5_digest": "7228b666bf99de83d73b7a96ec866505", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 11177, "upload_time": "2020-01-28T13:14:50", "upload_time_iso_8601": "2020-01-28T13:14:50.772308Z", "url": "https://files.pythonhosted.org/packages/e1/a9/0e26669be966b723e3d5aba7c16c8a3042b590e503fecf0340fb92cb177f/spintest-0.1.1.dev1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d77ead688f5d50fe1169cee2ba781553", "sha256": "42a169adee11060a64a8eb8d2910882fb6afe34891e4161735b68b882b0034bd"}, "downloads": -1, "filename": "spintest-0.1.1.dev1.tar.gz", "has_sig": false, "md5_digest": "d77ead688f5d50fe1169cee2ba781553", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15576, "upload_time": "2020-01-28T13:14:52", "upload_time_iso_8601": "2020-01-28T13:14:52.131915Z", "url": "https://files.pythonhosted.org/packages/50/93/8f7fa4a738843ee1f6cc8a059ac1898f6f28a737608084d697c9168cc84b/spintest-0.1.1.dev1.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "1af4a62cb2f1ee7d51cf3eda4c2123e1", "sha256": "1ba0549182ef149336f5cebe17f54de31f00fc8a9d66ec9e9873a31d5d43a88d"}, "downloads": -1, "filename": "spintest-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "1af4a62cb2f1ee7d51cf3eda4c2123e1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 11133, "upload_time": "2020-02-10T15:33:10", "upload_time_iso_8601": "2020-02-10T15:33:10.615292Z", "url": "https://files.pythonhosted.org/packages/82/c1/51451f2395f644defdc5a5a2761c48dd59c94487e8964124c6d06497d1c1/spintest-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e012da1eb7f5ddc7177f66451d6cafb4", "sha256": "2b3aba896a28c0883f4ab16cad897f3c24b2da9ec18bb2b211039387da837b0d"}, "downloads": -1, "filename": "spintest-0.2.0.tar.gz", "has_sig": false, "md5_digest": "e012da1eb7f5ddc7177f66451d6cafb4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15730, "upload_time": "2020-02-10T15:33:11", "upload_time_iso_8601": "2020-02-10T15:33:11.596992Z", "url": "https://files.pythonhosted.org/packages/57/5c/6a90f4061cece4dcbef46140462c2c1265a828413f168ef0120214e1d952/spintest-0.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "1af4a62cb2f1ee7d51cf3eda4c2123e1", "sha256": "1ba0549182ef149336f5cebe17f54de31f00fc8a9d66ec9e9873a31d5d43a88d"}, "downloads": -1, "filename": "spintest-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "1af4a62cb2f1ee7d51cf3eda4c2123e1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 11133, "upload_time": "2020-02-10T15:33:10", "upload_time_iso_8601": "2020-02-10T15:33:10.615292Z", "url": "https://files.pythonhosted.org/packages/82/c1/51451f2395f644defdc5a5a2761c48dd59c94487e8964124c6d06497d1c1/spintest-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e012da1eb7f5ddc7177f66451d6cafb4", "sha256": "2b3aba896a28c0883f4ab16cad897f3c24b2da9ec18bb2b211039387da837b0d"}, "downloads": -1, "filename": "spintest-0.2.0.tar.gz", "has_sig": false, "md5_digest": "e012da1eb7f5ddc7177f66451d6cafb4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15730, "upload_time": "2020-02-10T15:33:11", "upload_time_iso_8601": "2020-02-10T15:33:11.596992Z", "url": "https://files.pythonhosted.org/packages/57/5c/6a90f4061cece4dcbef46140462c2c1265a828413f168ef0120214e1d952/spintest-0.2.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:04:48 2020"}