{"info": {"author": "Andrew Seaman", "author_email": "andrewseaman35@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "==================\npy_value_validator\n==================\n\nThis is a Python module that provides an easy way to validate values in\nother projects. The base class provides some generic comparisons and should\nbe overridden in order to define comparisons for other classes.\n\nInstallation\n============\n\nAdd the source as a submodule to your project.\n\n    $ git submodule add https://github.com/andrewseaman35/py-value-validator.git\n    $ git submodule init\n\nUsage\n=====\n\nBy overriding the functions class, validation functions can be added by data type\nor to the generic function list. Any function that is specified as generic may be\nused by any data of any type being validated.\n\n    class ValidatorFunctions(GenericValidatorFunctions):\n        def _add_typed_functions(self):\n            self._add_function(str, \"contains\", contains)\n            self._add_function(\"generic\", \"is_not_none\", is_not_none)\n\n    def contains(mine, yours):\n        return yours in mine\n\n    def is_not_none(mine, yours=None):\n        return mine is not None\n\nCreate a validator with an instance of the function class.\n\n    _validator_functions = ValidatorFunctions()\n    validator = ValueValidator(_validator_functions)\n\nDefine a list of tuples that define the validation for the given value.\n\n    validations = [('contains', 'ell'), ('is_not_none', None)]\n\nRun the validations against a value and keep an eye out for a ValidationError.\n\n    try:\n        validator.validate(\"hello, world!\", validations)\n    except ValidationError as validation_error:\n        print(\"Value did not pass validation!\")", "description_content_type": null, "docs_url": null, "download_url": null, "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://pypi.python.org/pypi/py_value_validator/", "keywords": null, "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "py-value-validator", "package_url": "https://pypi.org/project/py-value-validator/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/py-value-validator/", "project_urls": {"Homepage": "http://pypi.python.org/pypi/py_value_validator/"}, "release_url": "https://pypi.org/project/py-value-validator/0.0.2/", "requires_dist": null, "requires_python": null, "summary": "Value validation module", "version": "0.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>This is a Python module that provides an easy way to validate values in\nother projects. The base class provides some generic comparisons and should\nbe overridden in order to define comparisons for other classes.</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Add the source as a submodule to your project.</p>\n<blockquote>\n$ git submodule add <a href=\"https://github.com/andrewseaman35/py-value-validator.git\" rel=\"nofollow\">https://github.com/andrewseaman35/py-value-validator.git</a>\n$ git submodule init</blockquote>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>By overriding the functions class, validation functions can be added by data type\nor to the generic function list. Any function that is specified as generic may be\nused by any data of any type being validated.</p>\n<blockquote>\n<dl>\n<dt>class ValidatorFunctions(GenericValidatorFunctions):</dt>\n<dd><dl>\n<dt>def _add_typed_functions(self):</dt>\n<dd>self._add_function(str, \u201ccontains\u201d, contains)\nself._add_function(\u201cgeneric\u201d, \u201cis_not_none\u201d, is_not_none)</dd>\n</dl>\n</dd>\n<dt>def contains(mine, yours):</dt>\n<dd>return yours in mine</dd>\n<dt>def is_not_none(mine, yours=None):</dt>\n<dd>return mine is not None</dd>\n</dl>\n</blockquote>\n<p>Create a validator with an instance of the function class.</p>\n<blockquote>\n_validator_functions = ValidatorFunctions()\nvalidator = ValueValidator(_validator_functions)</blockquote>\n<p>Define a list of tuples that define the validation for the given value.</p>\n<blockquote>\nvalidations = [(\u2018contains\u2019, \u2018ell\u2019), (\u2018is_not_none\u2019, None)]</blockquote>\n<p>Run the validations against a value and keep an eye out for a ValidationError.</p>\n<blockquote>\n<dl>\n<dt>try:</dt>\n<dd>validator.validate(\u201chello, world!\u201d, validations)</dd>\n<dt>except ValidationError as validation_error:</dt>\n<dd>print(\u201cValue did not pass validation!\u201d)</dd>\n</dl>\n</blockquote>\n</div>\n\n          </div>"}, "last_serial": 2576260, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "d2fcd42e7c38712fb1af40a1bdac3f4f", "sha256": "479bd13c16c7cfb3a4d0012da7953d795ab110e75806ae8ce95268a54a7a68ce"}, "downloads": -1, "filename": "py_value_validator-0.0.2.tar.gz", "has_sig": false, "md5_digest": "d2fcd42e7c38712fb1af40a1bdac3f4f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4021, "upload_time": "2017-01-16T00:08:54", "upload_time_iso_8601": "2017-01-16T00:08:54.375531Z", "url": "https://files.pythonhosted.org/packages/75/1c/2deb641cd07c399065005187e79830e11b1234ae3896c81cc56cd127ef5a/py_value_validator-0.0.2.tar.gz", "yanked": false}], "0.0.2": []}, "urls": [], "timestamp": "Fri May  8 03:12:14 2020"}